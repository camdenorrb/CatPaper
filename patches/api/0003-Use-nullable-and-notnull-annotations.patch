From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: camdenorrb <me@12oclock.dev>
Date: Sat, 22 Oct 2022 02:19:57 -0500
Subject: [PATCH] Use nullable and notnull annotations


diff --git a/src/main/java/co/aikar/timings/FullServerTickHandler.java b/src/main/java/co/aikar/timings/FullServerTickHandler.java
index 43b85ce3a6c27a2f92c67d62bee7484c2652b72a..6beb702449fde74f7df0182ca3d8ac3139024513 100644
--- a/src/main/java/co/aikar/timings/FullServerTickHandler.java
+++ b/src/main/java/co/aikar/timings/FullServerTickHandler.java
@@ -7,7 +7,7 @@ import org.jetbrains.annotations.NotNull;
 
 public class FullServerTickHandler extends TimingHandler {
     private static final TimingIdentifier IDENTITY = new TimingIdentifier("Minecraft", "Full Server Tick", null);
-    final TimingData minuteData;
+    final @NotNull TimingData minuteData;
     double avgFreeMemory = -1D;
     double avgUsedMemory = -1D;
     FullServerTickHandler() {
diff --git a/src/main/java/co/aikar/timings/TimedEventExecutor.java b/src/main/java/co/aikar/timings/TimedEventExecutor.java
index 34e43e56ccc663e05b9cae36643e8df5eee5cb17..0dea21f8cbd26a2fdf47f911cb9bdeaa8febf5b6 100644
--- a/src/main/java/co/aikar/timings/TimedEventExecutor.java
+++ b/src/main/java/co/aikar/timings/TimedEventExecutor.java
@@ -36,8 +36,8 @@ import org.jetbrains.annotations.Nullable;
 
 public class TimedEventExecutor implements EventExecutor {
 
-    private final EventExecutor executor;
-    private final Timing timings;
+    private final @NotNull EventExecutor executor;
+    private final @NotNull Timing timings;
 
     /**
      * Wraps an event executor and associates a timing handler to it.
diff --git a/src/main/java/co/aikar/timings/TimingData.java b/src/main/java/co/aikar/timings/TimingData.java
index a5d13a1e44edb861f45c83a9b4309fbf799d407d..92ce1f95daef668c2ad3e346ca59176b0a53a84b 100644
--- a/src/main/java/co/aikar/timings/TimingData.java
+++ b/src/main/java/co/aikar/timings/TimingData.java
@@ -46,7 +46,7 @@ class TimingData {
         this.id = id;
     }
 
-    private TimingData(TimingData data) {
+    private TimingData(@NotNull TimingData data) {
         this.id = data.id;
         this.totalTime = data.totalTime;
         this.lagTotalTime = data.lagTotalTime;
@@ -79,7 +79,7 @@ class TimingData {
         lagTotalTime = 0;
     }
 
-    protected TimingData clone() {
+    protected @NotNull TimingData clone() {
         return new TimingData(this);
     }
 
diff --git a/src/main/java/co/aikar/timings/TimingHandler.java b/src/main/java/co/aikar/timings/TimingHandler.java
index 199789d56d22fcb1b77ebd56805cc28aa5a5ab0a..ba5a33b7b4a51a63c468dbe7574ce2ea66aa2242 100644
--- a/src/main/java/co/aikar/timings/TimingHandler.java
+++ b/src/main/java/co/aikar/timings/TimingHandler.java
@@ -38,17 +38,17 @@ import org.jetbrains.annotations.Nullable;
 
 class TimingHandler implements Timing {
 
-    private static AtomicInteger idPool = new AtomicInteger(1);
-    private static Deque<TimingHandler> TIMING_STACK = new ArrayDeque<>();
+    private static @NotNull AtomicInteger idPool = new AtomicInteger(1);
+    private static @NotNull Deque<TimingHandler> TIMING_STACK = new ArrayDeque<>();
     final int id = idPool.getAndIncrement();
 
-    final TimingIdentifier identifier;
+    final @NotNull TimingIdentifier identifier;
     private final boolean verbose;
 
     private final Int2ObjectOpenHashMap<TimingData> children = new LoadingIntMap<>(TimingData::new);
 
-    final TimingData record;
-    private TimingHandler startParent;
+    final @NotNull TimingData record;
+    private @Nullable TimingHandler startParent;
     private final TimingHandler groupHandler;
 
     private long start = 0;
@@ -215,7 +215,7 @@ class TimingHandler implements Timing {
     }
 
     @NotNull
-    TimingData[] cloneChildren() {
+    TimingData @NotNull [] cloneChildren() {
         final TimingData[] clonedChildren = new TimingData[children.size()];
         int i = 0;
         for (TimingData child : children.values()) {
diff --git a/src/main/java/co/aikar/timings/TimingHistory.java b/src/main/java/co/aikar/timings/TimingHistory.java
index 203cda0f9a4dea4f28a21ea9ee8db7a7369842e3..9bdc5f8127c33017be901e1181f9249ed9a7aaec 100644
--- a/src/main/java/co/aikar/timings/TimingHistory.java
+++ b/src/main/java/co/aikar/timings/TimingHistory.java
@@ -59,7 +59,7 @@ public class TimingHistory {
     public static long tileEntityTicks;
     public static long activatedEntityTicks;
     private static int worldIdPool = 1;
-    static Map<String, Integer> worldMap = LoadingMap.newHashMap(new Function<String, Integer>() {
+    static @NotNull Map<String, Integer> worldMap = LoadingMap.newHashMap(new Function<String, Integer>() {
         @NotNull
         @Override
         public Integer apply(@Nullable String input) {
@@ -70,12 +70,12 @@ public class TimingHistory {
     private final long startTime;
     private final long totalTicks;
     private final long totalTime; // Represents all time spent running the server this history
-    private final MinuteReport[] minuteReports;
+    private final MinuteReport @NotNull [] minuteReports;
 
-    private final TimingHistoryEntry[] entries;
+    private final TimingHistoryEntry @NotNull [] entries;
     final Set<Material> tileEntityTypeSet = Sets.newHashSet();
     final Set<EntityType> entityTypeSet = Sets.newHashSet();
-    private final Map<Object, Object> worlds;
+    private final @NotNull Map<Object, Object> worlds;
 
     TimingHistory() {
         this.endTime = System.currentTimeMillis() / 1000;
@@ -104,7 +104,7 @@ public class TimingHistory {
         this.worlds = toObjectMapper(Bukkit.getWorlds(), new Function<World, JSONPair>() {
             @NotNull
             @Override
-            public JSONPair apply(World world) {
+            public JSONPair apply(@NotNull World world) {
                 Map<RegionId, RegionData> regions = LoadingMap.newHashMap(RegionData.LOADER);
 
                 for (Chunk chunk : world.getLoadedChunks()) {
@@ -133,7 +133,7 @@ public class TimingHistory {
                     toArrayMapper(regions.values(),new Function<RegionData, Object>() {
                         @NotNull
                         @Override
-                        public Object apply(RegionData input) {
+                        public Object apply(@NotNull RegionData input) {
                             return toArray(
                                 input.regionId.x,
                                 input.regionId.z,
@@ -141,7 +141,7 @@ public class TimingHistory {
                                     new Function<Map.Entry<EntityType, Counter>, JSONPair>() {
                                         @NotNull
                                         @Override
-                                        public JSONPair apply(Map.Entry<EntityType, Counter> entry) {
+                                        public JSONPair apply(Map.@NotNull Entry<EntityType, Counter> entry) {
                                             entityTypeSet.add(entry.getKey());
                                             return pair(
                                                     String.valueOf(entry.getKey().ordinal()),
@@ -154,7 +154,7 @@ public class TimingHistory {
                                     new Function<Map.Entry<Material, Counter>, JSONPair>() {
                                         @NotNull
                                         @Override
-                                        public JSONPair apply(Map.Entry<Material, Counter> entry) {
+                                        public JSONPair apply(Map.@NotNull Entry<Material, Counter> entry) {
                                             tileEntityTypeSet.add(entry.getKey());
                                             return pair(
                                                     String.valueOf(entry.getKey().ordinal()),
@@ -171,9 +171,9 @@ public class TimingHistory {
         });
     }
     static class RegionData {
-        final RegionId regionId;
+        final @NotNull RegionId regionId;
         @SuppressWarnings("Guava")
-        static Function<RegionId, RegionData> LOADER = new Function<RegionId, RegionData>() {
+        static @NotNull Function<RegionId, RegionData> LOADER = new Function<RegionId, RegionData>() {
             @NotNull
             @Override
             public RegionData apply(@NotNull RegionId id) {
@@ -185,7 +185,7 @@ public class TimingHistory {
         }
 
         @Override
-        public boolean equals(Object o) {
+        public boolean equals(@Nullable Object o) {
             if (this == o) {
                 return true;
             }
@@ -223,7 +223,7 @@ public class TimingHistory {
             }
 
             @Override
-            public boolean equals(Object o) {
+            public boolean equals(@Nullable Object o) {
                 if (this == o) return true;
                 if (o == null || getClass() != o.getClass()) return false;
 
@@ -262,7 +262,7 @@ public class TimingHistory {
             pair("h", toArrayMapper(entries, new Function<TimingHistoryEntry, Object>() {
                 @Nullable
                 @Override
-                public Object apply(TimingHistoryEntry entry) {
+                public Object apply(@NotNull TimingHistoryEntry entry) {
                     TimingData record = entry.data;
                     if (!record.hasData()) {
                         return null;
@@ -273,7 +273,7 @@ public class TimingHistory {
             pair("mp", toArrayMapper(minuteReports, new Function<MinuteReport, Object>() {
                 @NotNull
                 @Override
-                public Object apply(MinuteReport input) {
+                public Object apply(@NotNull MinuteReport input) {
                     return input.export();
                 }
             }))
diff --git a/src/main/java/co/aikar/timings/TimingHistoryEntry.java b/src/main/java/co/aikar/timings/TimingHistoryEntry.java
index 86d5ac6bd0d7d0003688761aceb3f3343575319f..7b48643ce77402190d683d9784f4d466c5419256 100644
--- a/src/main/java/co/aikar/timings/TimingHistoryEntry.java
+++ b/src/main/java/co/aikar/timings/TimingHistoryEntry.java
@@ -31,8 +31,8 @@ import org.jetbrains.annotations.NotNull;
 import static co.aikar.util.JSONUtil.toArrayMapper;
 
 class TimingHistoryEntry {
-    final TimingData data;
-    private final TimingData[] children;
+    final @NotNull TimingData data;
+    private final TimingData @NotNull [] children;
 
     TimingHistoryEntry(@NotNull TimingHandler handler) {
         this.data = handler.record.clone();
@@ -47,7 +47,7 @@ class TimingHistoryEntry {
                 toArrayMapper(children, new Function<TimingData, Object>() {
                     @NotNull
                     @Override
-                    public Object apply(TimingData child) {
+                    public Object apply(@NotNull TimingData child) {
                         return child.export();
                     }
                 })
diff --git a/src/main/java/co/aikar/timings/TimingIdentifier.java b/src/main/java/co/aikar/timings/TimingIdentifier.java
index df142a89b8c43acb81eb383eac0ef048a1f49a6e..53a9dbef57f37b225caa6e7b296f5ffd8ba0e06c 100644
--- a/src/main/java/co/aikar/timings/TimingIdentifier.java
+++ b/src/main/java/co/aikar/timings/TimingIdentifier.java
@@ -47,8 +47,8 @@ final class TimingIdentifier {
     static final Map<String, TimingGroup> GROUP_MAP = LoadingMap.of(new ConcurrentHashMap<>(64, .5F), TimingGroup::new);
     private static final TimingGroup DEFAULT_GROUP = getGroup("Minecraft");
     final String group;
-    final String name;
-    final TimingHandler groupHandler;
+    final @NotNull String name;
+    final @Nullable TimingHandler groupHandler;
     private final int hashCode;
 
     TimingIdentifier(@Nullable String group, @NotNull String name, @Nullable Timing groupHandler) {
@@ -69,7 +69,7 @@ final class TimingIdentifier {
     }
 
     @Override
-    public boolean equals(Object o) {
+    public boolean equals(@Nullable Object o) {
         if (o == null) {
             return false;
         }
@@ -84,13 +84,13 @@ final class TimingIdentifier {
     }
 
     @Override
-    public String toString() {
+    public @NotNull String toString() {
         return "TimingIdentifier{id=" + group + ":" + name +'}';
     }
 
     static class TimingGroup {
 
-        private static AtomicInteger idPool = new AtomicInteger(1);
+        private static @NotNull AtomicInteger idPool = new AtomicInteger(1);
         final int id = idPool.getAndIncrement();
 
         final String name;
@@ -101,7 +101,7 @@ final class TimingIdentifier {
         }
 
         @Override
-        public boolean equals(Object o) {
+        public boolean equals(@Nullable Object o) {
             if (this == o) return true;
             if (o == null || getClass() != o.getClass()) return false;
             TimingGroup that = (TimingGroup) o;
diff --git a/src/main/java/co/aikar/timings/TimingsCommand.java b/src/main/java/co/aikar/timings/TimingsCommand.java
index 3132dc98d26c54c5e46162e53aaed195d7335c8d..ceb040b9016e3540c2004e51ac683a7bc8097edb 100644
--- a/src/main/java/co/aikar/timings/TimingsCommand.java
+++ b/src/main/java/co/aikar/timings/TimingsCommand.java
@@ -49,7 +49,7 @@ public class TimingsCommand extends BukkitCommand {
     }
 
     @Override
-    public boolean execute(@NotNull CommandSender sender, @NotNull String currentAlias, @NotNull String[] args) {
+    public boolean execute(@NotNull CommandSender sender, @NotNull String currentAlias, @NotNull String @NotNull [] args) {
         if (!testPermission(sender)) {
             return true;
         }
@@ -106,7 +106,7 @@ public class TimingsCommand extends BukkitCommand {
 
     @NotNull
     @Override
-    public List<String> tabComplete(@NotNull CommandSender sender, @NotNull String alias, @NotNull String[] args) {
+    public List<String> tabComplete(@NotNull CommandSender sender, @NotNull String alias, @NotNull String @NotNull [] args) {
         Preconditions.checkNotNull(sender, "Sender cannot be null");
         Preconditions.checkNotNull(args, "Arguments cannot be null");
         Preconditions.checkNotNull(alias, "Alias cannot be null");
diff --git a/src/main/java/co/aikar/timings/TimingsManager.java b/src/main/java/co/aikar/timings/TimingsManager.java
index a92925d41110226f7fda055b71ce7be60eedd038..5af825420d322287385887c15d6a71724879239b 100644
--- a/src/main/java/co/aikar/timings/TimingsManager.java
+++ b/src/main/java/co/aikar/timings/TimingsManager.java
@@ -46,14 +46,14 @@ public final class TimingsManager {
     public static final FullServerTickHandler FULL_SERVER_TICK = new FullServerTickHandler();
     public static final TimingHandler TIMINGS_TICK = Timings.ofSafe("Timings Tick", FULL_SERVER_TICK);
     public static final Timing PLUGIN_GROUP_HANDLER = Timings.ofSafe("Plugins");
-    public static String url = "https://timings.aikar.co/";
-    public static List<String> hiddenConfigs = new ArrayList<String>();
+    public static @NotNull String url = "https://timings.aikar.co/";
+    public static @NotNull List<String> hiddenConfigs = new ArrayList<String>();
     public static boolean privacy = false;
 
     static final List<TimingHandler> HANDLERS = new ArrayList<>(1024);
     static final List<TimingHistory.MinuteReport> MINUTE_REPORTS = new ArrayList<>(64);
 
-    static EvictingQueue<TimingHistory> HISTORY = EvictingQueue.create(12);
+    static @NotNull EvictingQueue<TimingHistory> HISTORY = EvictingQueue.create(12);
     static long timingStart = 0;
     static long historyStart = 0;
     static boolean needsFullReset = false;
diff --git a/src/main/java/co/aikar/timings/TimingsReportListener.java b/src/main/java/co/aikar/timings/TimingsReportListener.java
index 34f4c02c3bdbe571a7efb1f8c61d8924b0c81268..11f375d0719f4ff2613739f656da2e3905454199 100644
--- a/src/main/java/co/aikar/timings/TimingsReportListener.java
+++ b/src/main/java/co/aikar/timings/TimingsReportListener.java
@@ -14,9 +14,9 @@ import java.util.List;
 
 @SuppressWarnings("WeakerAccess")
 public class TimingsReportListener implements net.kyori.adventure.audience.ForwardingAudience, MessageCommandSender {
-    private final List<CommandSender> senders;
-    private final Runnable onDone;
-    private String timingsURL;
+    private final @NotNull List<CommandSender> senders;
+    private final @Nullable Runnable onDone;
+    private @Nullable String timingsURL;
 
     public TimingsReportListener(@NotNull CommandSender senders) {
         this(senders, null);
diff --git a/src/main/java/co/aikar/util/JSONUtil.java b/src/main/java/co/aikar/util/JSONUtil.java
index 190bf0598442c89c2a1c93ad7c8c1a29797304ae..3487965277ab502ad6a261ed934937d70b91075c 100644
--- a/src/main/java/co/aikar/util/JSONUtil.java
+++ b/src/main/java/co/aikar/util/JSONUtil.java
@@ -56,7 +56,7 @@ public final class JSONUtil {
      * @return Map
      */
     @NotNull
-    public static Map<String, Object> appendObjectData(@NotNull Map parent, @NotNull JSONPair... data) {
+    public static Map<String, Object> appendObjectData(@NotNull Map parent, @NotNull JSONPair @NotNull ... data) {
         for (JSONPair JSONPair : data) {
             parent.put(JSONPair.key, JSONPair.val);
         }
@@ -129,8 +129,8 @@ public final class JSONUtil {
      */
     @SuppressWarnings("PublicInnerClass")
     public static class JSONPair {
-        final String key;
-        final Object val;
+        final @NotNull String key;
+        final @NotNull Object val;
 
         JSONPair(@NotNull String key, @NotNull Object val) {
             this.key = key;
diff --git a/src/main/java/co/aikar/util/LoadingIntMap.java b/src/main/java/co/aikar/util/LoadingIntMap.java
index 63a899c7dbdb69daa4876a2ce2a7dfb734b5af9d..13cc2968cbe63f151757c6290d249f7b6c68a680 100644
--- a/src/main/java/co/aikar/util/LoadingIntMap.java
+++ b/src/main/java/co/aikar/util/LoadingIntMap.java
@@ -27,7 +27,7 @@ import org.jetbrains.annotations.Nullable;
  * @param <V> Value
  */
 public class LoadingIntMap<V> extends Int2ObjectOpenHashMap<V> {
-    private final Function<Integer, V> loader;
+    private final @NotNull Function<Integer, V> loader;
 
     public LoadingIntMap(@NotNull Function<Integer, V> loader) {
         super();
diff --git a/src/main/java/co/aikar/util/LoadingMap.java b/src/main/java/co/aikar/util/LoadingMap.java
index aedbb03321886cb267879d7994653e447b485f6a..b3d086d571d5d8b65ebb0f45efbce7bf4d546397 100644
--- a/src/main/java/co/aikar/util/LoadingMap.java
+++ b/src/main/java/co/aikar/util/LoadingMap.java
@@ -51,8 +51,8 @@ import org.jetbrains.annotations.Nullable;
  * @param <V> Value
  */
 public class LoadingMap <K, V> extends AbstractMap<K, V> {
-    private final Map<K, V> backingMap;
-    private final java.util.function.Function<K, V> loader;
+    private final @NotNull Map<K, V> backingMap;
+    private final java.util.function.@NotNull Function<K, V> loader;
 
     /**
      * Initializes an auto loading map using specified loader and backing map
@@ -312,8 +312,8 @@ public class LoadingMap <K, V> extends AbstractMap<K, V> {
     }
 
     private static class AutoInstantiatingLoader<K, V> implements Function<K, V> {
-        final Constructor<? extends V> constructor;
-        private final Class<? extends V> valueClass;
+        final @Nullable Constructor<? extends V> constructor;
+        private final @NotNull Class<? extends V> valueClass;
 
         AutoInstantiatingLoader(@Nullable Class<? extends K> keyClass, @NotNull Class<? extends V> valueClass) {
             try {
diff --git a/src/main/java/co/aikar/util/MRUMapCache.java b/src/main/java/co/aikar/util/MRUMapCache.java
index 5989ee21297935651b0edd44b8239e655eaef1d9..fe93fd1187e09e3ea136d694e199392f09f8aa83 100644
--- a/src/main/java/co/aikar/util/MRUMapCache.java
+++ b/src/main/java/co/aikar/util/MRUMapCache.java
@@ -37,9 +37,9 @@ import org.jetbrains.annotations.Nullable;
  * @param <V> Value Type of the Map
  */
 public class MRUMapCache<K, V> extends AbstractMap<K, V> {
-    final Map<K, V> backingMap;
-    Object cacheKey;
-    V cacheValue;
+    final @NotNull Map<K, V> backingMap;
+    @Nullable Object cacheKey;
+    @Nullable V cacheValue;
     public MRUMapCache(@NotNull final Map<K, V> backingMap) {
         this.backingMap = backingMap;
     }
diff --git a/src/main/java/com/destroystokyo/paper/ClientOption.java b/src/main/java/com/destroystokyo/paper/ClientOption.java
index f89bfeba29e6988db849957a508ca97ff5322242..8500ba25f212b15992661f9a848a69d965595bb3 100644
--- a/src/main/java/com/destroystokyo/paper/ClientOption.java
+++ b/src/main/java/com/destroystokyo/paper/ClientOption.java
@@ -17,7 +17,7 @@ public final class ClientOption<T> {
     public static final ClientOption<Boolean> ALLOW_SERVER_LISTINGS = new ClientOption<>(Boolean.class);
     public static final ClientOption<Boolean> TEXT_FILTERING_ENABLED = new ClientOption<>(Boolean.class);
 
-    private final Class<T> type;
+    private final @NotNull Class<T> type;
 
     private ClientOption(@NotNull Class<T> type) {
         this.type = type;
@@ -34,7 +34,7 @@ public final class ClientOption<T> {
         HIDDEN("hidden"),
         UNKNOWN("unknown");
 
-        public static Index<String, ChatVisibility> NAMES = Index.create(ChatVisibility.class, chatVisibility -> chatVisibility.name);
+        public static @NotNull Index<String, ChatVisibility> NAMES = Index.create(ChatVisibility.class, chatVisibility -> chatVisibility.name);
         private final String name;
 
         ChatVisibility(String name) {
diff --git a/src/main/java/com/destroystokyo/paper/MaterialTags.java b/src/main/java/com/destroystokyo/paper/MaterialTags.java
index 0c3cd2856f7df3702ec0ff6b8dba1e052929863e..05bdc4dd765ccb4dcca2b98356e3f93eed8cc4e7 100644
--- a/src/main/java/com/destroystokyo/paper/MaterialTags.java
+++ b/src/main/java/com/destroystokyo/paper/MaterialTags.java
@@ -26,6 +26,8 @@ package com.destroystokyo.paper;
 import org.bukkit.Material;
 import org.bukkit.NamespacedKey;
 import org.bukkit.Tag;
+import org.jetbrains.annotations.NotNull;
+
 
 /**
  * Represents a collection tags to identify materials that share common properties.
@@ -37,7 +39,7 @@ import org.bukkit.Tag;
 @SuppressWarnings({"NonFinalUtilityClass", "unused", "WeakerAccess"})
 public class MaterialTags {
 
-    private static NamespacedKey keyFor(String key) {
+    private static @NotNull NamespacedKey keyFor(String key) {
         //noinspection deprecation
         return new NamespacedKey("paper", key + "_settag");
     }
diff --git a/src/main/java/com/destroystokyo/paper/NamespacedTag.java b/src/main/java/com/destroystokyo/paper/NamespacedTag.java
index 28f3fda950999a9c964a3608042ca60567ae1d6a..b8ad665896cda49f61016e338ef1f3045813d0ce 100644
--- a/src/main/java/com/destroystokyo/paper/NamespacedTag.java
+++ b/src/main/java/com/destroystokyo/paper/NamespacedTag.java
@@ -6,6 +6,8 @@ import java.util.UUID;
 import java.util.regex.Pattern;
 import org.bukkit.plugin.Plugin;
 import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 /**
  * Represents a String based key pertaining to a tagged entry. Consists of two components - a namespace
@@ -34,8 +36,8 @@ public final class NamespacedTag implements com.destroystokyo.paper.Namespaced {
     private static final Pattern VALID_NAMESPACE = Pattern.compile("[a-z0-9._-]+");
     private static final Pattern VALID_KEY = Pattern.compile("[a-z0-9/._-]+");
     //
-    private final String namespace;
-    private final String key;
+    private final @NotNull String namespace;
+    private final @NotNull String key;
 
     /**
      * Create a key in a specific namespace.
@@ -102,7 +104,7 @@ public final class NamespacedTag implements com.destroystokyo.paper.Namespaced {
     }
 
     @Override
-    public boolean equals(Object obj) {
+    public boolean equals(@Nullable Object obj) {
         if (obj == null) {
             return false;
         }
@@ -114,7 +116,7 @@ public final class NamespacedTag implements com.destroystokyo.paper.Namespaced {
     }
 
     @Override
-    public String toString() {
+    public @NotNull String toString() {
         return "#" + this.namespace + ":" + this.key;
     }
 
@@ -125,7 +127,7 @@ public final class NamespacedTag implements com.destroystokyo.paper.Namespaced {
      * @deprecated should never be used by plugins, for internal use only!!
      */
     @Deprecated
-    public static NamespacedTag randomKey() {
+    public static @NotNull NamespacedTag randomKey() {
         return new NamespacedTag(BUKKIT, UUID.randomUUID().toString());
     }
 
diff --git a/src/main/java/com/destroystokyo/paper/ParticleBuilder.java b/src/main/java/com/destroystokyo/paper/ParticleBuilder.java
index f45b8cfd1611345e8d81ecb8297a586f05eb5dc6..a4132a764f1eb8c01a66b18644c8f84f169c7a7f 100644
--- a/src/main/java/com/destroystokyo/paper/ParticleBuilder.java
+++ b/src/main/java/com/destroystokyo/paper/ParticleBuilder.java
@@ -21,13 +21,13 @@ import org.jetbrains.annotations.Nullable;
 public class ParticleBuilder {
 
     private Particle particle;
-    private List<Player> receivers;
-    private Player source;
+    private @Nullable List<Player> receivers;
+    private @Nullable Player source;
     private Location location;
     private int count = 1;
     private double offsetX = 0, offsetY = 0, offsetZ = 0;
     private double extra = 1;
-    private Object data;
+    private @Nullable Object data;
     private boolean force = true;
 
     public ParticleBuilder(@NotNull Particle particle) {
@@ -136,7 +136,7 @@ public class ParticleBuilder {
      * @return a reference to this object.
      */
     @NotNull
-    public ParticleBuilder receivers(@Nullable Player... receivers) {
+    public ParticleBuilder receivers(@Nullable Player @Nullable ... receivers) {
         this.receivers = receivers != null ? Lists.newArrayList(receivers) : null;
         return this;
     }
diff --git a/src/main/java/com/destroystokyo/paper/Title.java b/src/main/java/com/destroystokyo/paper/Title.java
index 9e90c3df567a65b48a0b9341f784eb902cb35d8c..dfc2394a78c2ff693d779e12bf058ab090efb0e3 100644
--- a/src/main/java/com/destroystokyo/paper/Title.java
+++ b/src/main/java/com/destroystokyo/paper/Title.java
@@ -40,7 +40,7 @@ public final class Title {
      */
     public static final int DEFAULT_FADE_OUT = 20;
 
-    private final BaseComponent[] title;
+    private final BaseComponent @NotNull [] title;
     private final BaseComponent[] subtitle;
     private final int fadeIn;
     private final int stay;
@@ -258,7 +258,7 @@ public final class Title {
      *
      * @param players the receivers of the title
      */
-    public void send(@NotNull Player[] players) {
+    public void send(@NotNull Player @NotNull [] players) {
         for (Player player : players) {
             player.sendTitle(this);
         }
diff --git a/src/main/java/com/destroystokyo/paper/block/TargetBlockInfo.java b/src/main/java/com/destroystokyo/paper/block/TargetBlockInfo.java
index c896d172519a8552a132031cb956378db272878f..d9666a3b79581525857c09a4afb9187441be068a 100644
--- a/src/main/java/com/destroystokyo/paper/block/TargetBlockInfo.java
+++ b/src/main/java/com/destroystokyo/paper/block/TargetBlockInfo.java
@@ -11,8 +11,8 @@ import org.jetbrains.annotations.NotNull;
  */
 @Deprecated(forRemoval = true)
 public class TargetBlockInfo {
-    private final Block block;
-    private final BlockFace blockFace;
+    private final @NotNull Block block;
+    private final @NotNull BlockFace blockFace;
 
     public TargetBlockInfo(@NotNull Block block, @NotNull BlockFace blockFace) {
         this.block = block;
diff --git a/src/main/java/com/destroystokyo/paper/entity/TargetEntityInfo.java b/src/main/java/com/destroystokyo/paper/entity/TargetEntityInfo.java
index af8765b213390cf75fe02a6eb68aecf7a06d5acf..08f3108662cee13c6dff65e5d7c0cfdd73300747 100644
--- a/src/main/java/com/destroystokyo/paper/entity/TargetEntityInfo.java
+++ b/src/main/java/com/destroystokyo/paper/entity/TargetEntityInfo.java
@@ -10,8 +10,8 @@ import org.jetbrains.annotations.NotNull;
  */
 @Deprecated(forRemoval = true)
 public class TargetEntityInfo {
-    private final Entity entity;
-    private final Vector hitVec;
+    private final @NotNull Entity entity;
+    private final @NotNull Vector hitVec;
 
     public TargetEntityInfo(@NotNull Entity entity, @NotNull Vector hitVec) {
         this.entity = entity;
diff --git a/src/main/java/com/destroystokyo/paper/entity/ai/GoalKey.java b/src/main/java/com/destroystokyo/paper/entity/ai/GoalKey.java
index 9cd98c6fcfa3eb439d9013ef76ef4661175a0e5a..bc30cadda2b5e2d90d139810edd7e3c9a1ec884a 100644
--- a/src/main/java/com/destroystokyo/paper/entity/ai/GoalKey.java
+++ b/src/main/java/com/destroystokyo/paper/entity/ai/GoalKey.java
@@ -8,6 +8,8 @@ import java.util.StringJoiner;
 
 import org.bukkit.NamespacedKey;
 import org.bukkit.entity.Mob;
+import org.jetbrains.annotations.Nullable;
+
 
 /**
  *
@@ -17,8 +19,8 @@ import org.bukkit.entity.Mob;
  */
 public class GoalKey<T extends Mob> {
 
-    private final Class<T> entityClass;
-    private final NamespacedKey namespacedKey;
+    private final @NotNull Class<T> entityClass;
+    private final @NotNull NamespacedKey namespacedKey;
 
     private GoalKey(@NotNull Class<T> entityClass, @NotNull NamespacedKey namespacedKey) {
         this.entityClass = entityClass;
@@ -36,7 +38,7 @@ public class GoalKey<T extends Mob> {
     }
 
     @Override
-    public boolean equals(Object o) {
+    public boolean equals(@Nullable Object o) {
         if (this == o) return true;
         if (o == null || getClass() != o.getClass()) return false;
         GoalKey<?> goalKey = (GoalKey<?>) o;
diff --git a/src/main/java/com/destroystokyo/paper/event/entity/EntityTransformedEvent.java b/src/main/java/com/destroystokyo/paper/event/entity/EntityTransformedEvent.java
index 12194f1fc7f03ca6785904b6187b3dfd03b16461..b2f70131502e9841674275b2ac6d3a2392cec382 100644
--- a/src/main/java/com/destroystokyo/paper/event/entity/EntityTransformedEvent.java
+++ b/src/main/java/com/destroystokyo/paper/event/entity/EntityTransformedEvent.java
@@ -6,6 +6,8 @@ import org.bukkit.event.Cancellable;
 import org.bukkit.event.HandlerList;
 import org.bukkit.event.entity.EntityEvent;
 import org.bukkit.event.entity.EntityTransformEvent;
+import org.jetbrains.annotations.NotNull;
+
 
 /**
  * Fired when an entity transforms into another entity
@@ -20,7 +22,7 @@ public class EntityTransformedEvent extends EntityEvent implements Cancellable {
     private final Entity transformed;
     private final TransformedReason reason;
 
-    public EntityTransformedEvent(Entity entity, Entity transformed, TransformedReason reason) {
+    public EntityTransformedEvent(@NotNull Entity entity, Entity transformed, TransformedReason reason) {
         super(entity);
         this.transformed = transformed;
         this.reason = reason;
@@ -48,11 +50,11 @@ public class EntityTransformedEvent extends EntityEvent implements Cancellable {
 
 
     @Override
-    public HandlerList getHandlers(){
+    public @NotNull HandlerList getHandlers(){
         return handlers;
     }
 
-    public static HandlerList getHandlerList(){
+    public static @NotNull HandlerList getHandlerList(){
         return handlers;
     }
 
diff --git a/src/main/java/com/destroystokyo/paper/event/entity/SkeletonHorseTrapEvent.java b/src/main/java/com/destroystokyo/paper/event/entity/SkeletonHorseTrapEvent.java
index 9ce2948dfaa56d0adf53fe9b6117a90d7773b771..20a534a04ee2f4f137e392bd1b16f390b9a892f2 100644
--- a/src/main/java/com/destroystokyo/paper/event/entity/SkeletonHorseTrapEvent.java
+++ b/src/main/java/com/destroystokyo/paper/event/entity/SkeletonHorseTrapEvent.java
@@ -16,7 +16,7 @@ import java.util.List;
 public class SkeletonHorseTrapEvent extends EntityEvent implements Cancellable {
     private static final HandlerList handlers = new HandlerList();
     private boolean cancelled;
-    private final List<HumanEntity> eligibleHumans;
+    private final @NotNull List<HumanEntity> eligibleHumans;
 
     public SkeletonHorseTrapEvent(@NotNull SkeletonHorse horse) {
         this(horse, ImmutableList.of());
diff --git a/src/main/java/com/destroystokyo/paper/event/entity/ThrownEggHatchEvent.java b/src/main/java/com/destroystokyo/paper/event/entity/ThrownEggHatchEvent.java
index 085d77dde83d6ed13eb83f23cf3e51d380187c9c..0e577cd7a60b5b85d94ca869359817763365dbe4 100644
--- a/src/main/java/com/destroystokyo/paper/event/entity/ThrownEggHatchEvent.java
+++ b/src/main/java/com/destroystokyo/paper/event/entity/ThrownEggHatchEvent.java
@@ -13,7 +13,7 @@ import org.jetbrains.annotations.NotNull;
  */
 public class ThrownEggHatchEvent extends Event {
     private static final HandlerList handlers = new HandlerList();
-    private final Egg egg;
+    private final @NotNull Egg egg;
     private boolean hatching;
     private EntityType hatchType;
     private byte numHatches;
diff --git a/src/main/java/com/destroystokyo/paper/event/entity/WitchReadyPotionEvent.java b/src/main/java/com/destroystokyo/paper/event/entity/WitchReadyPotionEvent.java
index 5351b523defa054ba56ae3fb591029283ca7510d..d13c15935cfe223a7c4edd14396802a3a14df030 100644
--- a/src/main/java/com/destroystokyo/paper/event/entity/WitchReadyPotionEvent.java
+++ b/src/main/java/com/destroystokyo/paper/event/entity/WitchReadyPotionEvent.java
@@ -10,7 +10,7 @@ import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
 public class WitchReadyPotionEvent extends EntityEvent implements Cancellable {
-    private ItemStack potion;
+    private @Nullable ItemStack potion;
 
     public WitchReadyPotionEvent(@NotNull Witch witch, @Nullable ItemStack potion) {
         super(witch);
diff --git a/src/main/java/com/destroystokyo/paper/event/executor/MethodHandleEventExecutor.java b/src/main/java/com/destroystokyo/paper/event/executor/MethodHandleEventExecutor.java
index fbebf649e893cf872be9b27091146a7c2f451aca..bbec023085c651e80eef6d7c7d0329d60cd23229 100644
--- a/src/main/java/com/destroystokyo/paper/event/executor/MethodHandleEventExecutor.java
+++ b/src/main/java/com/destroystokyo/paper/event/executor/MethodHandleEventExecutor.java
@@ -12,7 +12,7 @@ import org.bukkit.plugin.EventExecutor;
 import org.jetbrains.annotations.NotNull;
 
 public class MethodHandleEventExecutor implements EventExecutor {
-    private final Class<? extends Event> eventClass;
+    private final @NotNull Class<? extends Event> eventClass;
     private final MethodHandle handle;
     private final Method method;
 
diff --git a/src/main/java/com/destroystokyo/paper/event/executor/StaticMethodHandleEventExecutor.java b/src/main/java/com/destroystokyo/paper/event/executor/StaticMethodHandleEventExecutor.java
index 87ea5354808dbbdefbdfc78f352a543f72a0d033..4773f8e19924a624f050a02e7a575b3b66f09a1e 100644
--- a/src/main/java/com/destroystokyo/paper/event/executor/StaticMethodHandleEventExecutor.java
+++ b/src/main/java/com/destroystokyo/paper/event/executor/StaticMethodHandleEventExecutor.java
@@ -16,7 +16,7 @@ import org.bukkit.plugin.EventExecutor;
 import org.jetbrains.annotations.NotNull;
 
 public class StaticMethodHandleEventExecutor implements EventExecutor {
-    private final Class<? extends Event> eventClass;
+    private final @NotNull Class<? extends Event> eventClass;
     private final MethodHandle handle;
     private final Method method;
 
diff --git a/src/main/java/com/destroystokyo/paper/event/executor/asm/ASMEventExecutorGenerator.java b/src/main/java/com/destroystokyo/paper/event/executor/asm/ASMEventExecutorGenerator.java
index 084c31af1a7ba32bb4c3dc8f16f67fd09ce0b6a4..1f912a6f640ba37b58531bf3213363914630fae9 100644
--- a/src/main/java/com/destroystokyo/paper/event/executor/asm/ASMEventExecutorGenerator.java
+++ b/src/main/java/com/destroystokyo/paper/event/executor/asm/ASMEventExecutorGenerator.java
@@ -45,7 +45,7 @@ public class ASMEventExecutorGenerator {
         return writer.toByteArray();
     }
 
-    public static AtomicInteger NEXT_ID = new AtomicInteger(1);
+    public static @NotNull AtomicInteger NEXT_ID = new AtomicInteger(1);
     @NotNull
     public static String generateName() {
         int id = NEXT_ID.getAndIncrement();
diff --git a/src/main/java/com/destroystokyo/paper/event/executor/asm/SafeClassDefiner.java b/src/main/java/com/destroystokyo/paper/event/executor/asm/SafeClassDefiner.java
index ac99477e9f2c08041aeff31abc1d1edee58d0a67..9fe51164022d058d04958d6619654d40f544a487 100644
--- a/src/main/java/com/destroystokyo/paper/event/executor/asm/SafeClassDefiner.java
+++ b/src/main/java/com/destroystokyo/paper/event/executor/asm/SafeClassDefiner.java
@@ -18,7 +18,7 @@ public class SafeClassDefiner implements ClassDefiner {
 
     @NotNull
     @Override
-    public Class<?> defineClass(@NotNull ClassLoader parentLoader, @NotNull String name, @NotNull byte[] data) {
+    public Class<?> defineClass(@NotNull ClassLoader parentLoader, @NotNull String name, @NotNull byte @NotNull [] data) {
         GeneratedClassLoader loader = loaders.computeIfAbsent(parentLoader, GeneratedClassLoader::new);
         synchronized (loader.getClassLoadingLock(name)) {
             Preconditions.checkState(!loader.hasClass(name), "%s already defined", name);
@@ -37,7 +37,7 @@ public class SafeClassDefiner implements ClassDefiner {
             super(parent);
         }
 
-        private Class<?> define(@NotNull String name, byte[] data) {
+        private @NotNull Class<?> define(@NotNull String name, byte @NotNull [] data) {
             synchronized (getClassLoadingLock(name)) {
                 assert !hasClass(name);
                 Class<?> c = defineClass(name, data, 0, data.length);
diff --git a/src/main/java/com/destroystokyo/paper/event/player/PlayerArmorChangeEvent.java b/src/main/java/com/destroystokyo/paper/event/player/PlayerArmorChangeEvent.java
index e406ce639a2e88b78f82f25e71678a669d0a958b..4c4669471089af530dbb457e7ecab21d4432a6fa 100644
--- a/src/main/java/com/destroystokyo/paper/event/player/PlayerArmorChangeEvent.java
+++ b/src/main/java/com/destroystokyo/paper/event/player/PlayerArmorChangeEvent.java
@@ -65,7 +65,7 @@ public class PlayerArmorChangeEvent extends PlayerEvent {
     }
 
     @Override
-    public String toString() {
+    public @NotNull String toString() {
         return "ArmorChangeEvent{" + "player=" + player + ", slotType=" + slotType + ", oldItem=" + oldItem + ", newItem=" + newItem + '}';
     }
 
diff --git a/src/main/java/com/destroystokyo/paper/event/player/PlayerClientOptionsChangeEvent.java b/src/main/java/com/destroystokyo/paper/event/player/PlayerClientOptionsChangeEvent.java
index cf67dc7d465223710adbf2b798109f525d3b057d..492ced5040893c5f6090819592b20d2fade867f7 100644
--- a/src/main/java/com/destroystokyo/paper/event/player/PlayerClientOptionsChangeEvent.java
+++ b/src/main/java/com/destroystokyo/paper/event/player/PlayerClientOptionsChangeEvent.java
@@ -18,12 +18,12 @@ public class PlayerClientOptionsChangeEvent extends PlayerEvent {
 
     private static final HandlerList handlers = new HandlerList();
 
-    private final String locale;
+    private final @NotNull String locale;
     private final int viewDistance;
-    private final ChatVisibility chatVisibility;
+    private final @NotNull ChatVisibility chatVisibility;
     private final boolean chatColors;
-    private final SkinParts skinparts;
-    private final MainHand mainHand;
+    private final @NotNull SkinParts skinparts;
+    private final @NotNull MainHand mainHand;
     private final boolean allowsServerListings;
     private final boolean textFilteringEnabled;
 
diff --git a/src/main/java/com/destroystokyo/paper/event/player/PlayerHandshakeEvent.java b/src/main/java/com/destroystokyo/paper/event/player/PlayerHandshakeEvent.java
index 59ae7bc3a0a2079fe4b3a92d777aca682a58e4e3..3dfb181ce83af4949fdca76ce319c69f1818af5e 100644
--- a/src/main/java/com/destroystokyo/paper/event/player/PlayerHandshakeEvent.java
+++ b/src/main/java/com/destroystokyo/paper/event/player/PlayerHandshakeEvent.java
@@ -31,7 +31,7 @@ public class PlayerHandshakeEvent extends Event implements Cancellable {
     @Nullable private UUID uniqueId;
     @Nullable private String propertiesJson;
     private boolean failed;
-    private Component failMessage = Component.text("If you wish to use IP forwarding, please enable it in your BungeeCord config as well!", NamedTextColor.YELLOW);
+    private @NotNull Component failMessage = Component.text("If you wish to use IP forwarding, please enable it in your BungeeCord config as well!", NamedTextColor.YELLOW);
 
     /**
      * Creates a new {@link PlayerHandshakeEvent}.
diff --git a/src/main/java/com/destroystokyo/paper/event/player/PlayerJumpEvent.java b/src/main/java/com/destroystokyo/paper/event/player/PlayerJumpEvent.java
index 289a0d784a3c74caf8a7231b4dd166096b1849a1..9fa3734cd8a8b89d99ba028d2bcfb2ed30440d4d 100644
--- a/src/main/java/com/destroystokyo/paper/event/player/PlayerJumpEvent.java
+++ b/src/main/java/com/destroystokyo/paper/event/player/PlayerJumpEvent.java
@@ -88,7 +88,7 @@ public class PlayerJumpEvent extends PlayerEvent implements Cancellable {
         return to;
     }
 
-    private void validateLocation(Location loc) {
+    private void validateLocation(@NotNull Location loc) {
         Preconditions.checkArgument(loc != null, "Cannot use null location!");
         Preconditions.checkArgument(loc.getWorld() != null, "Cannot use location with null world!");
     }
diff --git a/src/main/java/com/destroystokyo/paper/event/player/PlayerLocaleChangeEvent.java b/src/main/java/com/destroystokyo/paper/event/player/PlayerLocaleChangeEvent.java
index 29dd763a99ce7c6ecb176b9fb346a400369d48a0..cf82fdb51a5ba05b22a43c978ad67431b8df2f30 100644
--- a/src/main/java/com/destroystokyo/paper/event/player/PlayerLocaleChangeEvent.java
+++ b/src/main/java/com/destroystokyo/paper/event/player/PlayerLocaleChangeEvent.java
@@ -3,6 +3,8 @@ package com.destroystokyo.paper.event.player;
 import org.bukkit.entity.Player;
 import org.bukkit.event.HandlerList;
 import org.bukkit.event.player.PlayerEvent;
+import org.jetbrains.annotations.NotNull;
+
 
 /**
  * Called when the locale of the player is changed.
@@ -15,7 +17,7 @@ public class PlayerLocaleChangeEvent extends PlayerEvent {
     private final String oldLocale;
     private final String newLocale;
 
-    public PlayerLocaleChangeEvent(final Player player, final String oldLocale, final String newLocale) {
+    public PlayerLocaleChangeEvent(final @NotNull Player player, final String oldLocale, final String newLocale) {
         super(player);
         this.oldLocale = oldLocale;
         this.newLocale = newLocale;
@@ -40,11 +42,11 @@ public class PlayerLocaleChangeEvent extends PlayerEvent {
     }
 
     @Override
-    public HandlerList getHandlers() {
+    public @NotNull HandlerList getHandlers() {
         return handlers;
     }
 
-    public static HandlerList getHandlerList() {
+    public static @NotNull HandlerList getHandlerList() {
         return handlers;
     }
 }
diff --git a/src/main/java/com/destroystokyo/paper/event/player/PlayerPostRespawnEvent.java b/src/main/java/com/destroystokyo/paper/event/player/PlayerPostRespawnEvent.java
index 31f34b54801f6699ce43355fa2a0a51f1ad0c997..70dd950a619e441bf61906475d715fca7b260933 100644
--- a/src/main/java/com/destroystokyo/paper/event/player/PlayerPostRespawnEvent.java
+++ b/src/main/java/com/destroystokyo/paper/event/player/PlayerPostRespawnEvent.java
@@ -11,7 +11,7 @@ import org.jetbrains.annotations.NotNull;
  */
 public class PlayerPostRespawnEvent extends PlayerEvent {
     private final static HandlerList handlers = new HandlerList();
-    private final Location respawnedLocation;
+    private final @NotNull Location respawnedLocation;
     private final boolean isBedSpawn;
 
     public PlayerPostRespawnEvent(@NotNull final Player respawnPlayer, @NotNull final Location respawnedLocation, final boolean isBedSpawn) {
diff --git a/src/main/java/com/destroystokyo/paper/event/player/PlayerSetSpawnEvent.java b/src/main/java/com/destroystokyo/paper/event/player/PlayerSetSpawnEvent.java
index c615dbe6ca1289bb090b8e28e98b9ad7b0af8b2a..69058a7bf266a9c48663b3c5b723633e995a8919 100644
--- a/src/main/java/com/destroystokyo/paper/event/player/PlayerSetSpawnEvent.java
+++ b/src/main/java/com/destroystokyo/paper/event/player/PlayerSetSpawnEvent.java
@@ -17,11 +17,11 @@ public class PlayerSetSpawnEvent extends PlayerEvent implements Cancellable {
 
     private static final HandlerList HANDLER_LIST = new HandlerList();
 
-    private final Cause cause;
-    private Location location;
+    private final @NotNull Cause cause;
+    private @Nullable Location location;
     private boolean forced;
     private boolean notifyPlayer;
-    private Component notification;
+    private @Nullable Component notification;
 
     private boolean cancelled;
 
diff --git a/src/main/java/com/destroystokyo/paper/event/profile/PreLookupProfileEvent.java b/src/main/java/com/destroystokyo/paper/event/profile/PreLookupProfileEvent.java
index 4dcf6242c9acc62d030a94f67b78729ed29f8c85..e91392ad1b975eeddc69a55f8d27c63afbd58eb9 100644
--- a/src/main/java/com/destroystokyo/paper/event/profile/PreLookupProfileEvent.java
+++ b/src/main/java/com/destroystokyo/paper/event/profile/PreLookupProfileEvent.java
@@ -27,7 +27,7 @@ public class PreLookupProfileEvent extends Event {
 
     private static final HandlerList handlers = new HandlerList();
     @NotNull private final String name;
-    private UUID uuid;
+    private @Nullable UUID uuid;
     @NotNull private Set<ProfileProperty> properties = new HashSet<>();
 
     public PreLookupProfileEvent(@NotNull String name) {
diff --git a/src/main/java/com/destroystokyo/paper/event/server/AsyncTabCompleteEvent.java b/src/main/java/com/destroystokyo/paper/event/server/AsyncTabCompleteEvent.java
index 9be64a95c2345433b6142d611077dedadcef9f5d..4e9417be93e05522889b59ee7a731a336513ea3d 100644
--- a/src/main/java/com/destroystokyo/paper/event/server/AsyncTabCompleteEvent.java
+++ b/src/main/java/com/destroystokyo/paper/event/server/AsyncTabCompleteEvent.java
@@ -284,8 +284,8 @@ public class AsyncTabCompleteEvent extends Event implements Cancellable {
     }
 
     static final class CompletionImpl implements Completion {
-        private final String suggestion;
-        private final Component tooltip;
+        private final @NotNull String suggestion;
+        private final @Nullable Component tooltip;
 
         CompletionImpl(final @NotNull String suggestion, final @Nullable Component tooltip) {
             this.suggestion = suggestion;
diff --git a/src/main/java/com/destroystokyo/paper/event/server/GS4QueryEvent.java b/src/main/java/com/destroystokyo/paper/event/server/GS4QueryEvent.java
index 77a19995f6792a182c5a43d6714e7bda0f42df5b..025c193ebe895ea119a367807d9337114107a32c 100644
--- a/src/main/java/com/destroystokyo/paper/event/server/GS4QueryEvent.java
+++ b/src/main/java/com/destroystokyo/paper/event/server/GS4QueryEvent.java
@@ -22,8 +22,8 @@ import java.util.List;
 public final class GS4QueryEvent extends Event {
     private static final HandlerList handlers = new HandlerList();
 
-    private final QueryType queryType;
-    private final InetAddress querierAddress;
+    private final @NotNull QueryType queryType;
+    private final @NotNull InetAddress querierAddress;
     private QueryResponse response;
 
     public GS4QueryEvent(@NotNull QueryType queryType, @NotNull InetAddress querierAddress, @NotNull QueryResponse response) {
@@ -69,7 +69,7 @@ public final class GS4QueryEvent extends Event {
     }
 
     @Override
-    public String toString() {
+    public @NotNull String toString() {
         return "GS4QueryEvent{" +
             "queryType=" + queryType +
             ", querierAddress=" + querierAddress +
@@ -260,8 +260,8 @@ public final class GS4QueryEvent extends Event {
             private int maxPlayers;
             private int port;
 
-            private List<String> players = new ArrayList<>();
-            private List<PluginInformation> plugins = new ArrayList<>();
+            private @NotNull List<String> players = new ArrayList<>();
+            private @NotNull List<PluginInformation> plugins = new ArrayList<>();
 
             private Builder() {}
 
diff --git a/src/main/java/com/destroystokyo/paper/event/server/PaperServerListPingEvent.java b/src/main/java/com/destroystokyo/paper/event/server/PaperServerListPingEvent.java
index e886ac04c0c14ae5dfb87212e262b96ec5b3b9dc..292c69fedf381dd55f1864136fe5a1a343cd5ea7 100644
--- a/src/main/java/com/destroystokyo/paper/event/server/PaperServerListPingEvent.java
+++ b/src/main/java/com/destroystokyo/paper/event/server/PaperServerListPingEvent.java
@@ -271,7 +271,7 @@ public class PaperServerListPingEvent extends ServerListPingEvent implements Can
     }
 
     @NotNull
-    protected Object[] getOnlinePlayers() {
+    protected Object @NotNull [] getOnlinePlayers() {
         return Bukkit.getOnlinePlayers().toArray();
     }
 
diff --git a/src/main/java/com/destroystokyo/paper/exception/ServerCommandException.java b/src/main/java/com/destroystokyo/paper/exception/ServerCommandException.java
index 6fb39af0479a818f7f1465bcdfe505ab4ff7da1a..236d6159712e4f65ef3fad955017427a8839b716 100644
--- a/src/main/java/com/destroystokyo/paper/exception/ServerCommandException.java
+++ b/src/main/java/com/destroystokyo/paper/exception/ServerCommandException.java
@@ -2,6 +2,7 @@ package com.destroystokyo.paper.exception;
 
 import org.bukkit.command.Command;
 import org.bukkit.command.CommandSender;
+import org.jetbrains.annotations.NotNull;
 
 import static com.google.common.base.Preconditions.checkNotNull;
 
@@ -10,9 +11,9 @@ import static com.google.common.base.Preconditions.checkNotNull;
  */
 public class ServerCommandException extends ServerException {
 
-    private final Command command;
-    private final CommandSender commandSender;
-    private final String[] arguments;
+    private final @NotNull Command command;
+    private final @NotNull CommandSender commandSender;
+    private final String @NotNull [] arguments;
 
     public ServerCommandException(String message, Throwable cause, Command command, CommandSender commandSender, String[] arguments) {
         super(message, cause);
diff --git a/src/main/java/com/destroystokyo/paper/exception/ServerEventException.java b/src/main/java/com/destroystokyo/paper/exception/ServerEventException.java
index 410b24139535cd5d8439ad581c43c61b5757fbf6..f5c836d3e9ff953f4424fd46a5ee4aed119bcd09 100644
--- a/src/main/java/com/destroystokyo/paper/exception/ServerEventException.java
+++ b/src/main/java/com/destroystokyo/paper/exception/ServerEventException.java
@@ -3,6 +3,7 @@ package com.destroystokyo.paper.exception;
 import org.bukkit.event.Event;
 import org.bukkit.event.Listener;
 import org.bukkit.plugin.Plugin;
+import org.jetbrains.annotations.NotNull;
 
 import static com.google.common.base.Preconditions.*;
 
@@ -11,8 +12,8 @@ import static com.google.common.base.Preconditions.*;
  */
 public class ServerEventException extends ServerPluginException {
 
-    private final Listener listener;
-    private final Event event;
+    private final @NotNull Listener listener;
+    private final @NotNull Event event;
 
     public ServerEventException(String message, Throwable cause, Plugin responsiblePlugin, Listener listener, Event event) {
         super(message, cause, responsiblePlugin);
diff --git a/src/main/java/com/destroystokyo/paper/exception/ServerPluginException.java b/src/main/java/com/destroystokyo/paper/exception/ServerPluginException.java
index be3f92e3c6bcefe8b78da701b75121275001882e..ec666dc56746a6f2490bbb8d331882ca5057fbf8 100644
--- a/src/main/java/com/destroystokyo/paper/exception/ServerPluginException.java
+++ b/src/main/java/com/destroystokyo/paper/exception/ServerPluginException.java
@@ -1,6 +1,7 @@
 package com.destroystokyo.paper.exception;
 
 import org.bukkit.plugin.Plugin;
+import org.jetbrains.annotations.NotNull;
 
 import static com.google.common.base.Preconditions.checkNotNull;
 
@@ -23,7 +24,7 @@ public class ServerPluginException extends ServerException {
         this.responsiblePlugin = checkNotNull(responsiblePlugin, "responsiblePlugin");
     }
 
-    private final Plugin responsiblePlugin;
+    private final @NotNull Plugin responsiblePlugin;
 
     /**
      * Gets the plugin which is directly responsible for the exception being thrown
diff --git a/src/main/java/com/destroystokyo/paper/exception/ServerPluginMessageException.java b/src/main/java/com/destroystokyo/paper/exception/ServerPluginMessageException.java
index 89e132525cfae0ce979e37b3e2793df781e47227..81cb1dbe6a63fa6a377b48fe4f6f028427036504 100644
--- a/src/main/java/com/destroystokyo/paper/exception/ServerPluginMessageException.java
+++ b/src/main/java/com/destroystokyo/paper/exception/ServerPluginMessageException.java
@@ -2,6 +2,7 @@ package com.destroystokyo.paper.exception;
 
 import org.bukkit.entity.Player;
 import org.bukkit.plugin.Plugin;
+import org.jetbrains.annotations.NotNull;
 
 import static com.google.common.base.Preconditions.*;
 
@@ -10,9 +11,9 @@ import static com.google.common.base.Preconditions.*;
  */
 public class ServerPluginMessageException extends ServerPluginException {
 
-    private final Player player;
-    private final String channel;
-    private final byte[] data;
+    private final @NotNull Player player;
+    private final @NotNull String channel;
+    private final byte @NotNull [] data;
 
     public ServerPluginMessageException(String message, Throwable cause, Plugin responsiblePlugin, Player player, String channel, byte[] data) {
         super(message, cause, responsiblePlugin);
diff --git a/src/main/java/com/destroystokyo/paper/exception/ServerSchedulerException.java b/src/main/java/com/destroystokyo/paper/exception/ServerSchedulerException.java
index 2d0b2d4a9b3e5bdeec0e4ea7ab69858d86aa3715..4f8b6d817c885bf15fd474fbf32c1f15f8b31e17 100644
--- a/src/main/java/com/destroystokyo/paper/exception/ServerSchedulerException.java
+++ b/src/main/java/com/destroystokyo/paper/exception/ServerSchedulerException.java
@@ -1,6 +1,7 @@
 package com.destroystokyo.paper.exception;
 
 import org.bukkit.scheduler.BukkitTask;
+import org.jetbrains.annotations.NotNull;
 
 import static com.google.common.base.Preconditions.checkNotNull;
 
@@ -9,19 +10,19 @@ import static com.google.common.base.Preconditions.checkNotNull;
  */
 public class ServerSchedulerException extends ServerPluginException {
 
-    private final BukkitTask task;
+    private final @NotNull BukkitTask task;
 
-    public ServerSchedulerException(String message, Throwable cause, BukkitTask task) {
+    public ServerSchedulerException(String message, Throwable cause, @NotNull BukkitTask task) {
         super(message, cause, task.getOwner());
         this.task = checkNotNull(task, "task");
     }
 
-    public ServerSchedulerException(Throwable cause, BukkitTask task) {
+    public ServerSchedulerException(Throwable cause, @NotNull BukkitTask task) {
         super(cause, task.getOwner());
         this.task = checkNotNull(task, "task");
     }
 
-    protected ServerSchedulerException(String message, Throwable cause, boolean enableSuppression, boolean writableStackTrace, BukkitTask task) {
+    protected ServerSchedulerException(String message, Throwable cause, boolean enableSuppression, boolean writableStackTrace, @NotNull BukkitTask task) {
         super(message, cause, enableSuppression, writableStackTrace, task.getOwner());
         this.task = checkNotNull(task, "task");
     }
diff --git a/src/main/java/com/destroystokyo/paper/inventory/ItemStackRecipeChoice.java b/src/main/java/com/destroystokyo/paper/inventory/ItemStackRecipeChoice.java
index 43e6576b1d1bb811f9feb22de0024d9c823cb21a..dba348f607cbd686182420c1cc4a74d24f2af56a 100644
--- a/src/main/java/com/destroystokyo/paper/inventory/ItemStackRecipeChoice.java
+++ b/src/main/java/com/destroystokyo/paper/inventory/ItemStackRecipeChoice.java
@@ -2,6 +2,7 @@ package com.destroystokyo.paper.inventory;
 
 import org.bukkit.inventory.ItemStack;
 import org.bukkit.inventory.RecipeChoice;
+import org.jetbrains.annotations.NotNull;
 
 import java.util.ArrayList;
 import java.util.List;
@@ -19,17 +20,17 @@ public class ItemStackRecipeChoice implements RecipeChoice {
         this.choices.add(choices);
     }
 
-    public ItemStackRecipeChoice(List<ItemStack> choices) {
+    public ItemStackRecipeChoice(@NotNull List<ItemStack> choices) {
         this.choices.addAll(choices);
     }
 
     @Override
-    public ItemStack getItemStack() {
+    public @NotNull ItemStack getItemStack() {
         return choices.isEmpty() ? null : choices.get(0);
     }
 
     @Override
-    public RecipeChoice clone() {
+    public @NotNull RecipeChoice clone() {
         try {
             ItemStackRecipeChoice clone = (ItemStackRecipeChoice) super.clone();
             clone.choices.addAll(this.choices);
diff --git a/src/main/java/com/destroystokyo/paper/network/NetworkClient.java b/src/main/java/com/destroystokyo/paper/network/NetworkClient.java
index 7b2af1bd72dfbcf4e962a982940fc49b851aa04f..11ba5bf0b0a84dc42e50608024902645bcefdd95 100644
--- a/src/main/java/com/destroystokyo/paper/network/NetworkClient.java
+++ b/src/main/java/com/destroystokyo/paper/network/NetworkClient.java
@@ -15,8 +15,7 @@ public interface NetworkClient {
      *
      * @return The client's socket address
      */
-    @NotNull
-    InetSocketAddress getAddress();
+    @Nullable InetSocketAddress getAddress();
 
     /**
      * Returns the protocol version of the client.
diff --git a/src/main/java/com/destroystokyo/paper/profile/ProfileProperty.java b/src/main/java/com/destroystokyo/paper/profile/ProfileProperty.java
index 7b3b6ef533d32169fbeca389bd61cfc6b0e0faee..14a0a5e2d4801859dbd1573a8733a5537148fabf 100644
--- a/src/main/java/com/destroystokyo/paper/profile/ProfileProperty.java
+++ b/src/main/java/com/destroystokyo/paper/profile/ProfileProperty.java
@@ -10,9 +10,9 @@ import org.jetbrains.annotations.Nullable;
  * Represents a property on a {@link PlayerProfile}
  */
 public class ProfileProperty {
-    private final String name;
-    private final String value;
-    private final String signature;
+    private final @NotNull String name;
+    private final @NotNull String value;
+    private final @Nullable String signature;
 
     public ProfileProperty(@NotNull String name, @NotNull String value) {
         this(name, value, null);
@@ -56,7 +56,7 @@ public class ProfileProperty {
     }
 
     @Override
-    public boolean equals(Object o) {
+    public boolean equals(@Nullable Object o) {
         if (this == o) return true;
         if (o == null || getClass() != o.getClass()) return false;
         ProfileProperty that = (ProfileProperty) o;
diff --git a/src/main/java/io/papermc/paper/event/block/BellRevealRaiderEvent.java b/src/main/java/io/papermc/paper/event/block/BellRevealRaiderEvent.java
index 03dae5be7dba8ab550d03f365c05af4ba73e4224..016fc638245d9d076497cee74dd79bb1f932f29f 100644
--- a/src/main/java/io/papermc/paper/event/block/BellRevealRaiderEvent.java
+++ b/src/main/java/io/papermc/paper/event/block/BellRevealRaiderEvent.java
@@ -15,7 +15,7 @@ public class BellRevealRaiderEvent extends BlockEvent implements Cancellable {
     private static final HandlerList handlers = new HandlerList();
 
     private boolean cancelled = false;
-    private final Raider raider;
+    private final @NotNull Raider raider;
 
     public BellRevealRaiderEvent(@NotNull Block theBlock, @NotNull Entity raider) {
         super(theBlock);
diff --git a/src/main/java/io/papermc/paper/event/block/BellRingEvent.java b/src/main/java/io/papermc/paper/event/block/BellRingEvent.java
index 881e545df51409e6101b4bb49f699655a744f13f..06004b21deb372fade3212aa942220f8a594ddf1 100644
--- a/src/main/java/io/papermc/paper/event/block/BellRingEvent.java
+++ b/src/main/java/io/papermc/paper/event/block/BellRingEvent.java
@@ -15,7 +15,7 @@ import org.jetbrains.annotations.Nullable;
 public class BellRingEvent extends BlockEvent implements Cancellable {
     private static final HandlerList handlers = new HandlerList();
     private boolean cancelled;
-    private final Entity entity;
+    private final @Nullable Entity entity;
 
     public BellRingEvent(@NotNull Block block, @Nullable Entity entity) {
         super(block);
diff --git a/src/main/java/io/papermc/paper/event/block/BlockBreakBlockEvent.java b/src/main/java/io/papermc/paper/event/block/BlockBreakBlockEvent.java
index ac7a60403a9e51fc194f2cc92b0bd60d8879a661..2377219cd2a24cd7b041fd943f4b41103c6d799b 100644
--- a/src/main/java/io/papermc/paper/event/block/BlockBreakBlockEvent.java
+++ b/src/main/java/io/papermc/paper/event/block/BlockBreakBlockEvent.java
@@ -17,8 +17,8 @@ public class BlockBreakBlockEvent extends BlockEvent {
 
     private static final HandlerList HANDLER_LIST = new HandlerList();
 
-    private final List<ItemStack> drops;
-    private final Block source;
+    private final @NotNull List<ItemStack> drops;
+    private final @NotNull Block source;
 
     public BlockBreakBlockEvent(@NotNull Block block, @NotNull Block source, @NotNull List<ItemStack> drops) {
         super(block);
diff --git a/src/main/java/io/papermc/paper/event/block/BlockPreDispenseEvent.java b/src/main/java/io/papermc/paper/event/block/BlockPreDispenseEvent.java
index 07aad3f4ff60a6a6de69634b0d31926e9c00e77b..3bc64014af5b7378d74c79390fcc82cd38223ad6 100644
--- a/src/main/java/io/papermc/paper/event/block/BlockPreDispenseEvent.java
+++ b/src/main/java/io/papermc/paper/event/block/BlockPreDispenseEvent.java
@@ -10,7 +10,7 @@ import org.jetbrains.annotations.NotNull;
 public class BlockPreDispenseEvent extends BlockEvent implements Cancellable {
     private static final HandlerList handlers = new HandlerList();
     private boolean cancelled = false;
-    private final ItemStack itemStack;
+    private final @NotNull ItemStack itemStack;
     private final int slot;
 
     public BlockPreDispenseEvent(@NotNull Block block, @NotNull ItemStack itemStack, int slot) {
diff --git a/src/main/java/io/papermc/paper/event/block/DragonEggFormEvent.java b/src/main/java/io/papermc/paper/event/block/DragonEggFormEvent.java
index 5495b87330518363498e1ac5d8f0a832be35fefb..7aee3a5992dc4ff9d34427cf133757f18b6ca40a 100644
--- a/src/main/java/io/papermc/paper/event/block/DragonEggFormEvent.java
+++ b/src/main/java/io/papermc/paper/event/block/DragonEggFormEvent.java
@@ -19,7 +19,7 @@ import org.jetbrains.annotations.NotNull;
  */
 public class DragonEggFormEvent extends BlockFormEvent implements Cancellable {
 	private static final HandlerList handlers = new HandlerList();
-	private final DragonBattle dragonBattle;
+	private final @NotNull DragonBattle dragonBattle;
 	private boolean cancelled;
 	
 	public DragonEggFormEvent(@NotNull Block block, @NotNull BlockState newState,
diff --git a/src/main/java/io/papermc/paper/event/block/PlayerShearBlockEvent.java b/src/main/java/io/papermc/paper/event/block/PlayerShearBlockEvent.java
index aa7d440b797eac9e62678d03cc87f42838758bfd..805157fc4faf8cadbee9e3c1cae3db354856753a 100644
--- a/src/main/java/io/papermc/paper/event/block/PlayerShearBlockEvent.java
+++ b/src/main/java/io/papermc/paper/event/block/PlayerShearBlockEvent.java
@@ -22,10 +22,10 @@ import java.util.List;
 public class PlayerShearBlockEvent extends PlayerEvent implements Cancellable {
     private static final HandlerList handlers = new HandlerList();
     private boolean cancelled = false;
-    private final Block block;
-    private final ItemStack item;
-    private final EquipmentSlot hand;
-    private final List<ItemStack> drops;
+    private final @NotNull Block block;
+    private final @NotNull ItemStack item;
+    private final @NotNull EquipmentSlot hand;
+    private final @NotNull List<ItemStack> drops;
 
     public PlayerShearBlockEvent(@NotNull Player who, @NotNull Block block, @NotNull ItemStack item, @NotNull EquipmentSlot hand, @NotNull List<ItemStack> drops) {
         super(who);
diff --git a/src/main/java/io/papermc/paper/event/entity/ElderGuardianAppearanceEvent.java b/src/main/java/io/papermc/paper/event/entity/ElderGuardianAppearanceEvent.java
index 4cd551c8311ff8f7321ed2dc6a4efc87162dadfe..209973e66abefa8072e8d2c81c6e866ce7b5a2ac 100644
--- a/src/main/java/io/papermc/paper/event/entity/ElderGuardianAppearanceEvent.java
+++ b/src/main/java/io/papermc/paper/event/entity/ElderGuardianAppearanceEvent.java
@@ -19,7 +19,7 @@ public class ElderGuardianAppearanceEvent extends EntityEvent implements Cancell
     private static final HandlerList handlers = new HandlerList();
 
     private boolean cancelled;
-    private final Player affectedPlayer;
+    private final @NotNull Player affectedPlayer;
 
     public ElderGuardianAppearanceEvent(@NotNull Entity what, @NotNull Player affectedPlayer) {
         super(what);
diff --git a/src/main/java/io/papermc/paper/event/entity/EntityDamageItemEvent.java b/src/main/java/io/papermc/paper/event/entity/EntityDamageItemEvent.java
index 13862939d7b633f08d5c70bfd2097c47278efcce..f9610d812fb7a092f3f2b6fc596badca7ab6277e 100644
--- a/src/main/java/io/papermc/paper/event/entity/EntityDamageItemEvent.java
+++ b/src/main/java/io/papermc/paper/event/entity/EntityDamageItemEvent.java
@@ -16,7 +16,7 @@ import org.jetbrains.annotations.NotNull;
 public class EntityDamageItemEvent extends EntityEvent implements Cancellable {
 
     private static final HandlerList HANDLER_LIST = new HandlerList();
-    private final ItemStack item;
+    private final @NotNull ItemStack item;
     private int damage;
     private boolean cancelled;
 
diff --git a/src/main/java/io/papermc/paper/event/entity/EntityDyeEvent.java b/src/main/java/io/papermc/paper/event/entity/EntityDyeEvent.java
index aefbaccd32f1ab25a4da63bdc878922e0c220478..b121ec4764525c143d459980b255e569f15f824f 100644
--- a/src/main/java/io/papermc/paper/event/entity/EntityDyeEvent.java
+++ b/src/main/java/io/papermc/paper/event/entity/EntityDyeEvent.java
@@ -18,7 +18,7 @@ public class EntityDyeEvent extends EntityEvent implements Cancellable {
     private static final HandlerList HANDLER_LIST = new HandlerList();
 
     private DyeColor dyeColor;
-    private final Player player;
+    private final @Nullable Player player;
     private boolean cancel;
 
     public EntityDyeEvent(@NotNull Entity entity, @NotNull DyeColor dyeColor, @Nullable Player player) {
diff --git a/src/main/java/io/papermc/paper/event/entity/EntityInsideBlockEvent.java b/src/main/java/io/papermc/paper/event/entity/EntityInsideBlockEvent.java
index 447fed3d39d68f13fd6cd94332c7ec7553d8e0df..68616f056b4942e11a1d40a9d84a9fbbb4010150 100644
--- a/src/main/java/io/papermc/paper/event/entity/EntityInsideBlockEvent.java
+++ b/src/main/java/io/papermc/paper/event/entity/EntityInsideBlockEvent.java
@@ -42,7 +42,7 @@ public class EntityInsideBlockEvent extends EntityEvent implements Cancellable {
 
     private static final HandlerList HANDLER_LIST = new HandlerList();
 
-    private final Block block;
+    private final @NotNull Block block;
     private boolean cancelled;
 
     public EntityInsideBlockEvent(@NotNull Entity entity, @NotNull Block block) {
diff --git a/src/main/java/io/papermc/paper/event/entity/EntityLoadCrossbowEvent.java b/src/main/java/io/papermc/paper/event/entity/EntityLoadCrossbowEvent.java
index aa9ccd7c806e864455ecd5f15ddb17c0fa8728c4..5d20e847a71714abd7d58c56f803819868065f22 100644
--- a/src/main/java/io/papermc/paper/event/entity/EntityLoadCrossbowEvent.java
+++ b/src/main/java/io/papermc/paper/event/entity/EntityLoadCrossbowEvent.java
@@ -15,8 +15,8 @@ import org.jetbrains.annotations.Nullable;
  */
 public class EntityLoadCrossbowEvent extends EntityEvent implements Cancellable {
     private static final HandlerList handlers = new HandlerList();
-    private final ItemStack crossbow;
-    private final EquipmentSlot hand;
+    private final @Nullable ItemStack crossbow;
+    private final @NotNull EquipmentSlot hand;
     private boolean cancelled;
     private boolean consumeItem = true;
 
diff --git a/src/main/java/io/papermc/paper/event/entity/EntityPortalReadyEvent.java b/src/main/java/io/papermc/paper/event/entity/EntityPortalReadyEvent.java
index 3c6c1d7e97a0c9813bbc585fd209cc63f498e0d4..ba2bda907b717c54b4b8521830f1228c1219062f 100644
--- a/src/main/java/io/papermc/paper/event/entity/EntityPortalReadyEvent.java
+++ b/src/main/java/io/papermc/paper/event/entity/EntityPortalReadyEvent.java
@@ -21,8 +21,8 @@ public class EntityPortalReadyEvent extends EntityEvent implements Cancellable {
 
     private static final HandlerList HANDLER_LIST = new HandlerList();
 
-    private World targetWorld;
-    private final PortalType portalType;
+    private @Nullable World targetWorld;
+    private final @NotNull PortalType portalType;
     private boolean cancelled;
 
     public EntityPortalReadyEvent(final @NotNull Entity entity, final @Nullable World targetWorld, final @NotNull PortalType portalType) {
diff --git a/src/main/java/io/papermc/paper/event/entity/WardenAngerChangeEvent.java b/src/main/java/io/papermc/paper/event/entity/WardenAngerChangeEvent.java
index 4fd31d4d8b35f27789f3cd9581e7c17a6bde5373..4a528364b3706b1b462705c530f087a280a9aaea 100644
--- a/src/main/java/io/papermc/paper/event/entity/WardenAngerChangeEvent.java
+++ b/src/main/java/io/papermc/paper/event/entity/WardenAngerChangeEvent.java
@@ -17,7 +17,7 @@ public class WardenAngerChangeEvent extends EntityEvent implements Cancellable {
 
     private static final HandlerList handlers = new HandlerList();
     private boolean cancelled;
-    private final Entity target;
+    private final @Nullable Entity target;
     private final int oldAnger;
     private int newAnger;
 
diff --git a/src/main/java/io/papermc/paper/event/packet/PlayerChunkLoadEvent.java b/src/main/java/io/papermc/paper/event/packet/PlayerChunkLoadEvent.java
index 2c1cda1126e577a88f19071e958eddb5a38785af..934c8fbd44e6a3b9f1d4b4ea76c962b760a379c6 100644
--- a/src/main/java/io/papermc/paper/event/packet/PlayerChunkLoadEvent.java
+++ b/src/main/java/io/papermc/paper/event/packet/PlayerChunkLoadEvent.java
@@ -17,7 +17,7 @@ import org.jetbrains.annotations.NotNull;
 public class PlayerChunkLoadEvent extends ChunkEvent {
 
     private static final HandlerList handlers = new HandlerList();
-    private final Player player;
+    private final @NotNull Player player;
 
     public PlayerChunkLoadEvent(@NotNull Chunk chunk, @NotNull Player player) {
         super(chunk);
diff --git a/src/main/java/io/papermc/paper/event/packet/PlayerChunkUnloadEvent.java b/src/main/java/io/papermc/paper/event/packet/PlayerChunkUnloadEvent.java
index 12163a7b0591a7d022dc7eb9ee6608a1b6c39d9b..d19ef7eb03751d081601c3db9735636539e2f15c 100644
--- a/src/main/java/io/papermc/paper/event/packet/PlayerChunkUnloadEvent.java
+++ b/src/main/java/io/papermc/paper/event/packet/PlayerChunkUnloadEvent.java
@@ -15,7 +15,7 @@ import org.jetbrains.annotations.NotNull;
 public class PlayerChunkUnloadEvent extends ChunkEvent {
 
     private static final HandlerList handlers = new HandlerList();
-    private final Player player;
+    private final @NotNull Player player;
 
     public PlayerChunkUnloadEvent(@NotNull Chunk chunk, @NotNull Player player) {
         super(chunk);
diff --git a/src/main/java/io/papermc/paper/event/player/AbstractChatEvent.java b/src/main/java/io/papermc/paper/event/player/AbstractChatEvent.java
index e7e13011c76285681ad420e6f356f6b83045d31a..bf10d267e67a55c6c41852a87079bea8fdac44a6 100644
--- a/src/main/java/io/papermc/paper/event/player/AbstractChatEvent.java
+++ b/src/main/java/io/papermc/paper/event/player/AbstractChatEvent.java
@@ -17,8 +17,8 @@ import static java.util.Objects.requireNonNull;
  * An abstract implementation of a chat event, handling shared logic.
  */
 public abstract class AbstractChatEvent extends PlayerEvent implements Cancellable {
-    private final Set<Audience> viewers;
-    private final Component originalMessage;
+    private final @NotNull Set<Audience> viewers;
+    private final @NotNull Component originalMessage;
     private final SignedMessage signedMessage;
     private ChatRenderer renderer;
     private Component message;
diff --git a/src/main/java/io/papermc/paper/event/player/AsyncChatDecorateEvent.java b/src/main/java/io/papermc/paper/event/player/AsyncChatDecorateEvent.java
index 9a962337948810b00ceae1124962fcc7058b70ad..bd800f6640b9920d371e505be7aa6cb7705966f3 100644
--- a/src/main/java/io/papermc/paper/event/player/AsyncChatDecorateEvent.java
+++ b/src/main/java/io/papermc/paper/event/player/AsyncChatDecorateEvent.java
@@ -23,8 +23,8 @@ public class AsyncChatDecorateEvent extends ServerEvent implements Cancellable {
 
     private static final HandlerList HANDLER_LIST = new HandlerList();
 
-    private final Player player;
-    private final Component originalMessage;
+    private final @Nullable Player player;
+    private final @NotNull Component originalMessage;
     private Component result;
     private boolean cancelled;
 
diff --git a/src/main/java/io/papermc/paper/event/player/PlayerArmSwingEvent.java b/src/main/java/io/papermc/paper/event/player/PlayerArmSwingEvent.java
index ce76b07cfaa9173c78e2844add2bc5bb437b1106..5d1b76dc091e91dc8d82f4a5721594d9969ef3d4 100644
--- a/src/main/java/io/papermc/paper/event/player/PlayerArmSwingEvent.java
+++ b/src/main/java/io/papermc/paper/event/player/PlayerArmSwingEvent.java
@@ -8,7 +8,7 @@ import org.jetbrains.annotations.NotNull;
 
 public class PlayerArmSwingEvent extends PlayerAnimationEvent {
 
-    private final EquipmentSlot equipmentSlot;
+    private final @NotNull EquipmentSlot equipmentSlot;
 
     public PlayerArmSwingEvent(@NotNull Player player, @NotNull EquipmentSlot equipmentSlot) {
         super(player, equipmentSlot == EquipmentSlot.HAND ? PlayerAnimationType.ARM_SWING : PlayerAnimationType.OFF_ARM_SWING);
diff --git a/src/main/java/io/papermc/paper/event/player/PlayerBedFailEnterEvent.java b/src/main/java/io/papermc/paper/event/player/PlayerBedFailEnterEvent.java
index e0028733615ddc9e34359f673ca1c3cadb133948..3d8b598c61fba3fdbe97bca025c188109f39f830 100644
--- a/src/main/java/io/papermc/paper/event/player/PlayerBedFailEnterEvent.java
+++ b/src/main/java/io/papermc/paper/event/player/PlayerBedFailEnterEvent.java
@@ -13,10 +13,10 @@ public class PlayerBedFailEnterEvent extends PlayerEvent implements Cancellable
 
     private static final HandlerList HANDLER_LIST = new HandlerList();
 
-    private final FailReason failReason;
-    private final Block bed;
+    private final @NotNull FailReason failReason;
+    private final @NotNull Block bed;
     private boolean willExplode;
-    private Component message;
+    private @Nullable Component message;
     private boolean cancelled;
 
     public PlayerBedFailEnterEvent(@NotNull Player player, @NotNull FailReason failReason, @NotNull Block bed, boolean willExplode, @Nullable Component message) {
diff --git a/src/main/java/io/papermc/paper/event/player/PlayerChangeBeaconEffectEvent.java b/src/main/java/io/papermc/paper/event/player/PlayerChangeBeaconEffectEvent.java
index c80183a79713b1e73549911e474a8c585cfdeb52..187a28792b6a91720c3741bb816a1a29223b244b 100644
--- a/src/main/java/io/papermc/paper/event/player/PlayerChangeBeaconEffectEvent.java
+++ b/src/main/java/io/papermc/paper/event/player/PlayerChangeBeaconEffectEvent.java
@@ -15,9 +15,9 @@ import org.jetbrains.annotations.Nullable;
 public class PlayerChangeBeaconEffectEvent extends PlayerEvent implements Cancellable {
     private static final HandlerList handlers = new HandlerList();
 
-    private PotionEffectType primary;
-    private PotionEffectType secondary;
-    private final Block beacon;
+    private @Nullable PotionEffectType primary;
+    private @Nullable PotionEffectType secondary;
+    private final @Nullable Block beacon;
     private boolean consumeItem = true;
 
     private boolean isCancelled;
diff --git a/src/main/java/io/papermc/paper/event/player/PlayerInventorySlotChangeEvent.java b/src/main/java/io/papermc/paper/event/player/PlayerInventorySlotChangeEvent.java
index 0a3e3b56b754d8838674c88105bd1312b96eb69d..e6f78f6d717c7880329dfbc315174edefea6c789 100644
--- a/src/main/java/io/papermc/paper/event/player/PlayerInventorySlotChangeEvent.java
+++ b/src/main/java/io/papermc/paper/event/player/PlayerInventorySlotChangeEvent.java
@@ -14,8 +14,8 @@ public class PlayerInventorySlotChangeEvent extends PlayerEvent {
     private static final HandlerList handlers = new HandlerList();
     private final int rawSlot;
     private final int slot;
-    private final ItemStack oldItemStack;
-    private final ItemStack newItemStack;
+    private final @NotNull ItemStack oldItemStack;
+    private final @NotNull ItemStack newItemStack;
     private boolean triggerAdvancements = true;
 
     public PlayerInventorySlotChangeEvent(@NotNull Player player, int rawSlot, @NotNull ItemStack oldItemStack, @NotNull ItemStack newItemStack) {
diff --git a/src/main/java/io/papermc/paper/event/player/PlayerItemFrameChangeEvent.java b/src/main/java/io/papermc/paper/event/player/PlayerItemFrameChangeEvent.java
index 451fb94a5802755c255e04aebb40f178bbfbf996..4c102cd6b2b228c1389670b1fba147e4c32da928 100644
--- a/src/main/java/io/papermc/paper/event/player/PlayerItemFrameChangeEvent.java
+++ b/src/main/java/io/papermc/paper/event/player/PlayerItemFrameChangeEvent.java
@@ -17,9 +17,9 @@ public class PlayerItemFrameChangeEvent extends PlayerEvent implements Cancellab
 
     private static final HandlerList HANDLERS = new HandlerList();
     private boolean cancelled;
-    private final ItemFrame itemFrame;
+    private final @NotNull ItemFrame itemFrame;
     private ItemStack itemStack;
-    private final ItemFrameChangeAction action;
+    private final @NotNull ItemFrameChangeAction action;
 
     public PlayerItemFrameChangeEvent(@NotNull Player player, @NotNull ItemFrame itemFrame,
                                       @NotNull ItemStack itemStack, @NotNull ItemFrameChangeAction action) {
diff --git a/src/main/java/io/papermc/paper/event/player/PlayerLecternPageChangeEvent.java b/src/main/java/io/papermc/paper/event/player/PlayerLecternPageChangeEvent.java
index 26370e46e4a12e3470e9bb747fac5786a7305810..0d3b7125317097a06456175d1b00d3ecf00177b5 100644
--- a/src/main/java/io/papermc/paper/event/player/PlayerLecternPageChangeEvent.java
+++ b/src/main/java/io/papermc/paper/event/player/PlayerLecternPageChangeEvent.java
@@ -14,9 +14,9 @@ public class PlayerLecternPageChangeEvent extends PlayerEvent implements Cancell
     private static final HandlerList HANDLER_LIST = new HandlerList();
 
     private boolean cancelled;
-    private final Lectern lectern;
-    private final ItemStack book;
-    private final PageChangeDirection pageChangeDirection;
+    private final @NotNull Lectern lectern;
+    private final @NotNull ItemStack book;
+    private final @NotNull PageChangeDirection pageChangeDirection;
     private final int oldPage;
     private int newPage;
 
diff --git a/src/main/java/io/papermc/paper/event/player/PlayerLoomPatternSelectEvent.java b/src/main/java/io/papermc/paper/event/player/PlayerLoomPatternSelectEvent.java
index 8cb05709f7cb5dee993ff6fea1626c41b90a7d8b..316ef9970f1a89df3d14a0cc896ad645a361b59b 100644
--- a/src/main/java/io/papermc/paper/event/player/PlayerLoomPatternSelectEvent.java
+++ b/src/main/java/io/papermc/paper/event/player/PlayerLoomPatternSelectEvent.java
@@ -16,7 +16,7 @@ public class PlayerLoomPatternSelectEvent extends PlayerEvent implements Cancell
     private static final HandlerList HANDLER_LIST = new HandlerList();
 
     private boolean cancelled;
-    private final LoomInventory loomInventory;
+    private final @NotNull LoomInventory loomInventory;
     private PatternType patternType;
 
     public PlayerLoomPatternSelectEvent(@NotNull Player player, @NotNull LoomInventory loomInventory, @NotNull PatternType patternType) {
diff --git a/src/main/java/io/papermc/paper/event/player/PlayerNameEntityEvent.java b/src/main/java/io/papermc/paper/event/player/PlayerNameEntityEvent.java
index ef9e53a73eff469bbaa8fb20c634297acb9d1986..8254a3e92682ac28bc8415474b331b55dcb2370e 100755
--- a/src/main/java/io/papermc/paper/event/player/PlayerNameEntityEvent.java
+++ b/src/main/java/io/papermc/paper/event/player/PlayerNameEntityEvent.java
@@ -15,7 +15,7 @@ import org.jetbrains.annotations.Nullable;
 public class PlayerNameEntityEvent extends PlayerEvent implements Cancellable {
 
     private LivingEntity entity;
-    private Component name;
+    private @Nullable Component name;
     private boolean persistent;
     private boolean cancelled;
 
diff --git a/src/main/java/io/papermc/paper/event/player/PlayerSignCommandPreprocessEvent.java b/src/main/java/io/papermc/paper/event/player/PlayerSignCommandPreprocessEvent.java
index a51a2288bf812e7d8845a6ec70274d625ff793b6..5772fe16f7c7cb3c13b43275290d0dff5c1e476a 100644
--- a/src/main/java/io/papermc/paper/event/player/PlayerSignCommandPreprocessEvent.java
+++ b/src/main/java/io/papermc/paper/event/player/PlayerSignCommandPreprocessEvent.java
@@ -15,7 +15,7 @@ import java.util.Set;
  */
 public class PlayerSignCommandPreprocessEvent extends PlayerCommandPreprocessEvent {
 
-    private final Sign sign;
+    private final @NotNull Sign sign;
 
     public PlayerSignCommandPreprocessEvent(@NotNull Player player, @NotNull String message, @NotNull Set<Player> recipients, @NotNull Sign sign) {
         super(player, message, recipients);
diff --git a/src/main/java/io/papermc/paper/event/player/PlayerStonecutterRecipeSelectEvent.java b/src/main/java/io/papermc/paper/event/player/PlayerStonecutterRecipeSelectEvent.java
index fb1bca3a9d12096c9a2b2663f466a8ff5f2b4319..667226d79645c67c689b5eae491e5c2562b75252 100644
--- a/src/main/java/io/papermc/paper/event/player/PlayerStonecutterRecipeSelectEvent.java
+++ b/src/main/java/io/papermc/paper/event/player/PlayerStonecutterRecipeSelectEvent.java
@@ -13,7 +13,7 @@ public class PlayerStonecutterRecipeSelectEvent extends PlayerEvent implements C
     private static final HandlerList HANDLER_LIST = new HandlerList();
 
     private boolean cancelled;
-    private final StonecutterInventory stonecutterInventory;
+    private final @NotNull StonecutterInventory stonecutterInventory;
     private StonecuttingRecipe stonecuttingRecipe;
 
     public PlayerStonecutterRecipeSelectEvent(@NotNull Player player, @NotNull StonecutterInventory stonecutterInventory, @NotNull StonecuttingRecipe stonecuttingRecipe) {
diff --git a/src/main/java/io/papermc/paper/event/player/PlayerTradeEvent.java b/src/main/java/io/papermc/paper/event/player/PlayerTradeEvent.java
index a41fc186746b87f76347dfcc1f80d0969398322b..4ae99bc597ba63f80b11354ed47b937043ec37d4 100755
--- a/src/main/java/io/papermc/paper/event/player/PlayerTradeEvent.java
+++ b/src/main/java/io/papermc/paper/event/player/PlayerTradeEvent.java
@@ -10,7 +10,7 @@ import org.jetbrains.annotations.NotNull;
  */
 public class PlayerTradeEvent extends PlayerPurchaseEvent {
 
-    private final AbstractVillager villager;
+    private final @NotNull AbstractVillager villager;
 
     public PlayerTradeEvent(@NotNull Player player, @NotNull AbstractVillager villager, @NotNull MerchantRecipe trade, boolean rewardExp, boolean increaseTradeUses) {
         super(player, trade, rewardExp, increaseTradeUses);
diff --git a/src/main/java/io/papermc/paper/event/server/ServerResourcesReloadedEvent.java b/src/main/java/io/papermc/paper/event/server/ServerResourcesReloadedEvent.java
index 7a8d6815c17a107039399298f7ac9f0612faee02..b04222a1c567658a5c343d5b027903252c3f0cee 100644
--- a/src/main/java/io/papermc/paper/event/server/ServerResourcesReloadedEvent.java
+++ b/src/main/java/io/papermc/paper/event/server/ServerResourcesReloadedEvent.java
@@ -14,7 +14,7 @@ public class ServerResourcesReloadedEvent extends ServerEvent {
 
     public static final HandlerList HANDLER_LIST = new HandlerList();
 
-    private final Cause cause;
+    private final @NotNull Cause cause;
 
     public ServerResourcesReloadedEvent(@NotNull Cause cause) {
         this.cause = cause;
diff --git a/src/main/java/io/papermc/paper/event/world/StructureLocateEvent.java b/src/main/java/io/papermc/paper/event/world/StructureLocateEvent.java
index 0c83a02059d65672ff191c42932d850950e9ea00..bb396652f170e82f17128661dfb35acbaaf314d4 100644
--- a/src/main/java/io/papermc/paper/event/world/StructureLocateEvent.java
+++ b/src/main/java/io/papermc/paper/event/world/StructureLocateEvent.java
@@ -23,8 +23,8 @@ import org.jetbrains.annotations.Nullable;
 @Deprecated(forRemoval = true)
 public class StructureLocateEvent extends WorldEvent implements Cancellable {
     private static final HandlerList handlers = new HandlerList();
-    private final Location origin;
-    private Location result = null;
+    private final @NotNull Location origin;
+    private @Nullable Location result = null;
     private StructureType type;
     private int radius;
     private boolean findUnexplored;
diff --git a/src/main/java/io/papermc/paper/event/world/StructuresLocateEvent.java b/src/main/java/io/papermc/paper/event/world/StructuresLocateEvent.java
index 566f9df8f615142e14330965f3491f4e83846783..fd75bd0b12d98c065eb068bd7273553f78bb6941 100644
--- a/src/main/java/io/papermc/paper/event/world/StructuresLocateEvent.java
+++ b/src/main/java/io/papermc/paper/event/world/StructuresLocateEvent.java
@@ -28,8 +28,8 @@ public class StructuresLocateEvent extends WorldEvent implements Cancellable {
 
     private static final HandlerList HANDLER_LIST = new HandlerList();
 
-    private final Location origin;
-    private Result result;
+    private final @NotNull Location origin;
+    private @Nullable Result result;
     private List<ConfiguredStructure> configuredStructures;
     private int radius;
     private boolean findUnexplored;
diff --git a/src/main/java/io/papermc/paper/event/world/WorldGameRuleChangeEvent.java b/src/main/java/io/papermc/paper/event/world/WorldGameRuleChangeEvent.java
index 20c25a0f9d65188402e8bb3981348bc6462904bf..6aa0980a82e46703d1fdfe66132a795ee19e2f53 100644
--- a/src/main/java/io/papermc/paper/event/world/WorldGameRuleChangeEvent.java
+++ b/src/main/java/io/papermc/paper/event/world/WorldGameRuleChangeEvent.java
@@ -17,8 +17,8 @@ public class WorldGameRuleChangeEvent extends WorldEvent implements Cancellable
 
     private static final HandlerList HANDLER_LIST = new HandlerList();
 
-    private final CommandSender commandSender;
-    private final GameRule<?> gameRule;
+    private final @Nullable CommandSender commandSender;
+    private final @NotNull GameRule<?> gameRule;
     private String value;
     private boolean cancelled;
 
diff --git a/src/main/java/io/papermc/paper/event/world/border/WorldBorderCenterChangeEvent.java b/src/main/java/io/papermc/paper/event/world/border/WorldBorderCenterChangeEvent.java
index 4a10c773a8d05a596066e63306dead74c1363fd7..ec6ed8ad5e51a92fb95c62b8583981ebb35f9858 100644
--- a/src/main/java/io/papermc/paper/event/world/border/WorldBorderCenterChangeEvent.java
+++ b/src/main/java/io/papermc/paper/event/world/border/WorldBorderCenterChangeEvent.java
@@ -15,7 +15,7 @@ public class WorldBorderCenterChangeEvent extends WorldBorderEvent implements Ca
 
     private static final HandlerList HANDLER_LIST = new HandlerList();
 
-    private final Location oldCenter;
+    private final @NotNull Location oldCenter;
     private Location newCenter;
     private boolean cancelled;
 
diff --git a/src/main/java/io/papermc/paper/event/world/border/WorldBorderEvent.java b/src/main/java/io/papermc/paper/event/world/border/WorldBorderEvent.java
index 67bd469d3680c9554ce6c1d5493826a252682835..c0703f96933877d9b26ec359ee0c873a0abaa89f 100644
--- a/src/main/java/io/papermc/paper/event/world/border/WorldBorderEvent.java
+++ b/src/main/java/io/papermc/paper/event/world/border/WorldBorderEvent.java
@@ -8,7 +8,7 @@ import org.jetbrains.annotations.NotNull;
 
 public abstract class WorldBorderEvent extends WorldEvent {
 
-    private final WorldBorder worldBorder;
+    private final @NotNull WorldBorder worldBorder;
 
     public WorldBorderEvent(@NotNull World world, @NotNull WorldBorder worldBorder) {
         super(world);
diff --git a/src/main/java/io/papermc/paper/potion/PotionMix.java b/src/main/java/io/papermc/paper/potion/PotionMix.java
index cb6d93526b637946aec311bef103ad3096781113..db8ff61686a2975ce9acd9130d659d3b90ea0cbc 100644
--- a/src/main/java/io/papermc/paper/potion/PotionMix.java
+++ b/src/main/java/io/papermc/paper/potion/PotionMix.java
@@ -6,6 +6,7 @@ import org.bukkit.inventory.ItemStack;
 import org.bukkit.inventory.RecipeChoice;
 import org.jetbrains.annotations.ApiStatus;
 import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
 
 import java.util.Objects;
 
@@ -15,10 +16,10 @@ import java.util.Objects;
 @ApiStatus.NonExtendable
 public class PotionMix implements Keyed {
 
-    private final NamespacedKey key;
-    private final ItemStack result;
-    private final RecipeChoice input;
-    private final RecipeChoice ingredient;
+    private final @NotNull NamespacedKey key;
+    private final @NotNull ItemStack result;
+    private final @NotNull RecipeChoice input;
+    private final @NotNull RecipeChoice ingredient;
 
     /**
      * Creates a new potion mix. Add it to the server with {@link org.bukkit.potion.PotionBrewer#addPotionMix(PotionMix)}.
@@ -68,7 +69,7 @@ public class PotionMix implements Keyed {
     }
 
     @Override
-    public String toString() {
+    public @NotNull String toString() {
         return "PotionMix{" +
             "result=" + this.result +
             ", base=" + this.input +
@@ -77,7 +78,7 @@ public class PotionMix implements Keyed {
     }
 
     @Override
-    public boolean equals(Object o) {
+    public boolean equals(@Nullable Object o) {
         if (this == o) return true;
         if (o == null || getClass() != o.getClass()) return false;
         PotionMix potionMix = (PotionMix) o;
diff --git a/src/main/java/io/papermc/paper/tag/BaseTag.java b/src/main/java/io/papermc/paper/tag/BaseTag.java
index 794787912325ae32b3cfc8217bc3fc2159ceabd5..06e437b743e26afc1b4a1aab4113541f91c11bde 100644
--- a/src/main/java/io/papermc/paper/tag/BaseTag.java
+++ b/src/main/java/io/papermc/paper/tag/BaseTag.java
@@ -18,8 +18,8 @@ import java.util.stream.Collectors;
 public abstract class BaseTag<T extends Keyed, C extends BaseTag<T, C>> implements Tag<T> {
 
     protected final NamespacedKey key;
-    protected final Set<T> tagged;
-    private final List<Predicate<T>> globalPredicates;
+    protected final @NotNull Set<T> tagged;
+    private final @NotNull List<Predicate<T>> globalPredicates;
     private boolean locked = false;
 
     public BaseTag(@NotNull Class<T> clazz, @NotNull NamespacedKey key, @NotNull Predicate<T> filter) {
@@ -42,7 +42,7 @@ public abstract class BaseTag<T extends Keyed, C extends BaseTag<T, C>> implemen
         this.globalPredicates = Lists.newArrayList(globalPredicates);
     }
 
-    private <E> Set<E> createEnumSet(Class<E> enumClass) {
+    private <E> @NotNull Set<E> createEnumSet(@NotNull Class<E> enumClass) {
         assert enumClass.isEnum();
         return (Set<E>) EnumSet.noneOf((Class<Enum>) enumClass);
     }
@@ -80,7 +80,7 @@ public abstract class BaseTag<T extends Keyed, C extends BaseTag<T, C>> implemen
     }
 
     @NotNull
-    public C add(@NotNull Tag<T>...tags) {
+    public C add(@NotNull Tag<T> @NotNull ...tags) {
         for (Tag<T> tag : tags) {
             add(tag.getValues());
         }
@@ -122,7 +122,7 @@ public abstract class BaseTag<T extends Keyed, C extends BaseTag<T, C>> implemen
     }
 
     @NotNull
-    public C not(@NotNull Tag<T>...tags) {
+    public C not(@NotNull Tag<T> @NotNull ...tags) {
         for (Tag<T> tag : tags) {
             not(tag.getValues());
         }
diff --git a/src/main/java/io/papermc/paper/tag/EntityTags.java b/src/main/java/io/papermc/paper/tag/EntityTags.java
index d7eb49a05c3f0cacf285f8995433c5d5e988de0f..8c8a2e483dd8938ef5d368d5e8e3d11e3f1ee73e 100644
--- a/src/main/java/io/papermc/paper/tag/EntityTags.java
+++ b/src/main/java/io/papermc/paper/tag/EntityTags.java
@@ -1,6 +1,7 @@
 package io.papermc.paper.tag;
 
 import org.bukkit.NamespacedKey;
+import org.jetbrains.annotations.NotNull;
 
 import static org.bukkit.entity.EntityType.*;
 
@@ -10,7 +11,7 @@ import static org.bukkit.entity.EntityType.*;
  */
 public class EntityTags {
 
-    private static NamespacedKey keyFor(String key) {
+    private static @NotNull NamespacedKey keyFor(String key) {
         //noinspection deprecation
         return new NamespacedKey("paper", key + "_settag");
     }
diff --git a/src/main/java/io/papermc/paper/util/TransformingRandomAccessList.java b/src/main/java/io/papermc/paper/util/TransformingRandomAccessList.java
index 6f560a51277ccbd46a9142cfa057d276118c1c7b..65b6e0ab6a45a745dacb519393035d1b30da0f89 100644
--- a/src/main/java/io/papermc/paper/util/TransformingRandomAccessList.java
+++ b/src/main/java/io/papermc/paper/util/TransformingRandomAccessList.java
@@ -20,9 +20,9 @@ import static com.google.common.base.Preconditions.checkNotNull;
  * @param <T> transformed list element type
  */
 public final class TransformingRandomAccessList<F, T> extends AbstractList<T> implements RandomAccess {
-    final List<F> fromList;
-    final Function<? super F, ? extends T> toFunction;
-    final Function<? super T, ? extends F> fromFunction;
+    final @NotNull List<F> fromList;
+    final @NotNull Function<? super F, ? extends T> toFunction;
+    final @NotNull Function<? super T, ? extends F> fromFunction;
 
     /**
      * Create a new {@link TransformingRandomAccessList}.
@@ -77,7 +77,7 @@ public final class TransformingRandomAccessList<F, T> extends AbstractList<T> im
     }
 
     @Override
-    public boolean removeIf(Predicate<? super T> filter) {
+    public boolean removeIf(@NotNull Predicate<? super T> filter) {
         checkNotNull(filter);
         return this.fromList.removeIf(element -> filter.test(this.toFunction.apply(element)));
     }
@@ -103,7 +103,7 @@ public final class TransformingRandomAccessList<F, T> extends AbstractList<T> im
     }
 
     static abstract class TransformedListIterator<F, T> implements ListIterator<T>, Iterator<T> {
-        final Iterator<F> backingIterator;
+        final @NotNull Iterator<F> backingIterator;
 
         TransformedListIterator(ListIterator<F> backingIterator) {
             this.backingIterator = checkNotNull((Iterator<F>) backingIterator);
diff --git a/src/main/java/io/papermc/paper/world/structure/ConfiguredStructure.java b/src/main/java/io/papermc/paper/world/structure/ConfiguredStructure.java
index 5a43e40b7311ed2acb51f6ba8b12d1f34569ff2e..e98fa3f3ccaba77e4fb8249e66772c41bf55628e 100644
--- a/src/main/java/io/papermc/paper/world/structure/ConfiguredStructure.java
+++ b/src/main/java/io/papermc/paper/world/structure/ConfiguredStructure.java
@@ -6,6 +6,7 @@ import org.bukkit.NamespacedKey;
 import org.bukkit.Registry;
 import org.bukkit.StructureType;
 import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
 
 import java.util.Objects;
 
@@ -49,8 +50,8 @@ public final class ConfiguredStructure implements Keyed {
     public static final Reference<ConfiguredStructure> RUINED_PORTAL_NETHER = create("ruined_portal_nether");
     // public static final Reference<ConfiguredStructure> ANCIENT_CITY = create("ancient_city"); // TODO remove when upstream adds "jigsaw" StructureType
 
-    private final NamespacedKey key;
-    private final StructureType structureType;
+    private final @NotNull NamespacedKey key;
+    private final @NotNull StructureType structureType;
 
     ConfiguredStructure(@NotNull NamespacedKey key, @NotNull StructureType structureType) {
         this.key = key;
@@ -72,7 +73,7 @@ public final class ConfiguredStructure implements Keyed {
     }
 
     @Override
-    public boolean equals(Object o) {
+    public boolean equals(@Nullable Object o) {
         if (this == o) return true;
         if (o == null || getClass() != o.getClass()) return false;
         ConfiguredStructure structure = (ConfiguredStructure) o;
@@ -85,7 +86,7 @@ public final class ConfiguredStructure implements Keyed {
     }
 
     @Override
-    public String toString() {
+    public @NotNull String toString() {
         return "ConfiguredStructure{" +
             "key=" + this.key +
             ", structureType=" + this.structureType +
diff --git a/src/main/java/org/bukkit/Art.java b/src/main/java/org/bukkit/Art.java
index ac420f0059fc50d3e1294f85df7515c9e17ff78f..24c2dc2035fd9452a25490d1bb2b1d4c40742413 100644
--- a/src/main/java/org/bukkit/Art.java
+++ b/src/main/java/org/bukkit/Art.java
@@ -42,7 +42,7 @@ public enum Art implements Keyed {
     FIRE(29, 2, 2);
 
     private final int id, width, height;
-    private final NamespacedKey key;
+    private final @NotNull NamespacedKey key;
     private static final HashMap<String, Art> BY_NAME = Maps.newHashMap();
     private static final HashMap<Integer, Art> BY_ID = Maps.newHashMap();
 
diff --git a/src/main/java/org/bukkit/BanEntry.java b/src/main/java/org/bukkit/BanEntry.java
index 2cf11ca4f67480b5e03d2dad0d3ee9283cddc48a..b4b4dc9712a85612b270719298cde2dcef1ecc98 100644
--- a/src/main/java/org/bukkit/BanEntry.java
+++ b/src/main/java/org/bukkit/BanEntry.java
@@ -57,8 +57,7 @@ public interface BanEntry {
      *
      * @return the creation date
      */
-    @NotNull
-    public Date getCreated();
+    public @Nullable Date getCreated();
 
     /**
      * Sets the date this ban entry was created.
diff --git a/src/main/java/org/bukkit/ChatColor.java b/src/main/java/org/bukkit/ChatColor.java
index f6eb30f53dad684f156102cf7147b2f00c82c71e..01ab0516a75505a87d9c8a194b6e3593d0551f83 100644
--- a/src/main/java/org/bukkit/ChatColor.java
+++ b/src/main/java/org/bukkit/ChatColor.java
@@ -243,7 +243,7 @@ public enum ChatColor {
     private final int intCode;
     private final char code;
     private final boolean isFormat;
-    private final String toString;
+    private final @NotNull String toString;
     private static final Map<Integer, ChatColor> BY_ID = Maps.newHashMap();
     private static final Map<Character, ChatColor> BY_CHAR = Maps.newHashMap();
 
diff --git a/src/main/java/org/bukkit/Color.java b/src/main/java/org/bukkit/Color.java
index d2f8f5a8e49f60422b6a41e51248a6710251d61b..f67dd97da3767aa6eeed026a042dd8fed62135aa 100644
--- a/src/main/java/org/bukkit/Color.java
+++ b/src/main/java/org/bukkit/Color.java
@@ -262,7 +262,7 @@ public final class Color implements ConfigurationSerializable {
      */
     // TODO: Javadoc what this method does, not what it mimics. API != Implementation
     @NotNull
-    public Color mixDyes(@NotNull DyeColor... colors) {
+    public Color mixDyes(@NotNull DyeColor @NotNull ... colors) {
         Preconditions.checkArgument(colors != null && Arrays.stream(colors).allMatch(Objects::nonNull), "Colors cannot be null");
 
         Color[] toPass = new Color[colors.length];
@@ -282,7 +282,7 @@ public final class Color implements ConfigurationSerializable {
      */
     // TODO: Javadoc what this method does, not what it mimics. API != Implementation
     @NotNull
-    public Color mixColors(@NotNull Color... colors) {
+    public Color mixColors(@NotNull Color @NotNull ... colors) {
         Preconditions.checkArgument(colors != null && Arrays.stream(colors).allMatch(Objects::nonNull), "Colors cannot be null");
 
         int totalRed = this.getRed();
@@ -353,7 +353,7 @@ public final class Color implements ConfigurationSerializable {
     }
 
     @Override
-    public String toString() {
+    public @NotNull String toString() {
         return "Color:[rgb0x" + Integer.toHexString(getRed()).toUpperCase() + Integer.toHexString(getGreen()).toUpperCase() + Integer.toHexString(getBlue()).toUpperCase() + "]";
     }
 }
diff --git a/src/main/java/org/bukkit/DyeColor.java b/src/main/java/org/bukkit/DyeColor.java
index bd213cabddd8752e609544f24cfba95405726155..11ff11d2fe4dc66df6b31ef648859079618fcc59 100644
--- a/src/main/java/org/bukkit/DyeColor.java
+++ b/src/main/java/org/bukkit/DyeColor.java
@@ -79,10 +79,10 @@ public enum DyeColor {
     private final byte dyeData;
     private final Color color;
     private final Color firework;
-    private static final DyeColor[] BY_WOOL_DATA;
-    private static final DyeColor[] BY_DYE_DATA;
-    private static final Map<Color, DyeColor> BY_COLOR;
-    private static final Map<Color, DyeColor> BY_FIREWORK;
+    private static final DyeColor @NotNull [] BY_WOOL_DATA;
+    private static final DyeColor @NotNull [] BY_DYE_DATA;
+    private static final @NotNull Map<Color, DyeColor> BY_COLOR;
+    private static final @NotNull Map<Color, DyeColor> BY_FIREWORK;
 
     private DyeColor(final int woolData, final int dyeData, /*@NotNull*/ Color color, /*@NotNull*/ Color firework) {
         this.woolData = (byte) woolData;
diff --git a/src/main/java/org/bukkit/Effect.java b/src/main/java/org/bukkit/Effect.java
index e6573b8bd45e0d3ae4f46d64996fa67f13d29f2b..de83d4d60917f6bb44bff23e74c153111f36e525 100644
--- a/src/main/java/org/bukkit/Effect.java
+++ b/src/main/java/org/bukkit/Effect.java
@@ -496,7 +496,7 @@ public enum Effect {
     }
 
     // Paper start
-    private static boolean isDeprecated(Effect effect) {
+    private static boolean isDeprecated(@NotNull Effect effect) {
         try {
             return Effect.class.getDeclaredField(effect.name()).isAnnotationPresent(Deprecated.class);
         } catch (NoSuchFieldException e) {
diff --git a/src/main/java/org/bukkit/FireworkEffect.java b/src/main/java/org/bukkit/FireworkEffect.java
index 637fa73d4366c2d88e2716e5c8d3465706d788a7..d625930561c604c6ea0e1089f3c445be009977d4 100644
--- a/src/main/java/org/bukkit/FireworkEffect.java
+++ b/src/main/java/org/bukkit/FireworkEffect.java
@@ -8,6 +8,8 @@ import java.util.Map;
 import org.bukkit.configuration.serialization.ConfigurationSerializable;
 import org.bukkit.configuration.serialization.SerializableAs;
 import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 /**
  * Represents a single firework effect.
@@ -77,8 +79,8 @@ public final class FireworkEffect implements ConfigurationSerializable {
         boolean flicker = false;
         boolean trail = false;
         final ImmutableList.Builder<Color> colors = ImmutableList.builder();
-        ImmutableList.Builder<Color> fadeColors = null;
-        Type type = Type.BALL;
+        ImmutableList.@Nullable Builder<Color> fadeColors = null;
+        @NotNull Type type = Type.BALL;
 
         Builder() {}
 
@@ -168,7 +170,7 @@ public final class FireworkEffect implements ConfigurationSerializable {
          *     thrown after changes have occurred)
          */
         @NotNull
-        public Builder withColor(@NotNull Color... colors) throws IllegalArgumentException {
+        public Builder withColor(@NotNull Color @NotNull ... colors) throws IllegalArgumentException {
             Preconditions.checkArgument(colors != null, "Cannot have null colors");
             if (colors.length == 0) {
                 return this;
@@ -240,7 +242,7 @@ public final class FireworkEffect implements ConfigurationSerializable {
          *     thrown after changes have occurred)
          */
         @NotNull
-        public Builder withFade(@NotNull Color... colors) throws IllegalArgumentException {
+        public Builder withFade(@NotNull Color @NotNull ... colors) throws IllegalArgumentException {
             Preconditions.checkArgument(colors != null, "Cannot have null colors");
             if (colors.length == 0) {
                 return this;
@@ -316,10 +318,10 @@ public final class FireworkEffect implements ConfigurationSerializable {
 
     private final boolean flicker;
     private final boolean trail;
-    private final ImmutableList<Color> colors;
-    private final ImmutableList<Color> fadeColors;
-    private final Type type;
-    private String string = null;
+    private final @NotNull ImmutableList<Color> colors;
+    private final @NotNull ImmutableList<Color> fadeColors;
+    private final @NotNull Type type;
+    private @Nullable String string = null;
 
     FireworkEffect(boolean flicker, boolean trail, @NotNull ImmutableList<Color> colors, @NotNull ImmutableList<Color> fadeColors, @NotNull Type type) {
         if (colors.isEmpty()) {
@@ -411,7 +413,7 @@ public final class FireworkEffect implements ConfigurationSerializable {
     }
 
     @Override
-    public String toString() {
+    public @NotNull String toString() {
         final String string = this.string;
         if (string == null) {
             return this.string = "FireworkEffect:" + serialize();
diff --git a/src/main/java/org/bukkit/Fluid.java b/src/main/java/org/bukkit/Fluid.java
index 7202b44a65e8699cf64329e441e83d4dd1779c19..bcd4ae61f7c4c996c52dadc1fe6505b66188dd9b 100644
--- a/src/main/java/org/bukkit/Fluid.java
+++ b/src/main/java/org/bukkit/Fluid.java
@@ -31,7 +31,7 @@ public enum Fluid implements Keyed {
      */
     FLOWING_LAVA;
 
-    private final NamespacedKey key;
+    private final @NotNull NamespacedKey key;
 
     private Fluid() {
         this.key = NamespacedKey.minecraft(this.name().toLowerCase(Locale.ROOT));
diff --git a/src/main/java/org/bukkit/GameEvent.java b/src/main/java/org/bukkit/GameEvent.java
index 4808824a55628d1e2344981d40d3665d572117e0..f71b209c4285bd9672946ef08cb8b0dfd7d49ba9 100644
--- a/src/main/java/org/bukkit/GameEvent.java
+++ b/src/main/java/org/bukkit/GameEvent.java
@@ -126,7 +126,7 @@ public final class GameEvent implements Keyed {
         return Collections.unmodifiableCollection(GAME_EVENTS.values());
     }
 
-    private static GameEvent getEvent(String vanilla) {
+    private static @NotNull GameEvent getEvent(@NotNull String vanilla) {
         return new GameEvent(NamespacedKey.minecraft(vanilla));
     }
 }
diff --git a/src/main/java/org/bukkit/GameMode.java b/src/main/java/org/bukkit/GameMode.java
index ef49495909a37d718a87d5dfbcd644d46e27fa88..e34a51e123890ddac5a88cd6733578b900a375af 100644
--- a/src/main/java/org/bukkit/GameMode.java
+++ b/src/main/java/org/bukkit/GameMode.java
@@ -3,6 +3,7 @@ package org.bukkit;
 import com.google.common.collect.Maps;
 import java.util.Map;
 import org.bukkit.entity.HumanEntity;
+import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
 /**
@@ -36,7 +37,7 @@ public enum GameMode implements net.kyori.adventure.translation.Translatable { /
     private final int value;
     private static final Map<Integer, GameMode> BY_ID = Maps.newHashMap();
     // Paper start - translation keys
-    private final String translationKey;
+    private final @NotNull String translationKey;
 
     @Override
     public @org.jetbrains.annotations.NotNull String translationKey() {
diff --git a/src/main/java/org/bukkit/GameRule.java b/src/main/java/org/bukkit/GameRule.java
index b02490737409eb80a2d2fb275c9a60b6078a8133..dc79508b8bf6ade66b911036e6eaba87341ddf64 100644
--- a/src/main/java/org/bukkit/GameRule.java
+++ b/src/main/java/org/bukkit/GameRule.java
@@ -17,7 +17,7 @@ import org.jetbrains.annotations.Nullable;
  */
 public final class GameRule<T> implements net.kyori.adventure.translation.Translatable { // Paper - Adventure translations
 
-    private static Map<String, GameRule<?>> gameRules = new HashMap<>();
+    private static @NotNull Map<String, GameRule<?>> gameRules = new HashMap<>();
     // Boolean rules
     /**
      * Toggles the announcing of advancements.
@@ -243,8 +243,8 @@ public final class GameRule<T> implements net.kyori.adventure.translation.Transl
     public static final GameRule<Integer> SNOW_ACCUMULATION_HEIGHT = new GameRule<>("snowAccumulationHeight", Integer.class);
 
     // All GameRules instantiated above this for organizational purposes
-    private final String name;
-    private final Class<T> type;
+    private final @NotNull String name;
+    private final @NotNull Class<T> type;
 
     private GameRule(@NotNull String name, @NotNull Class<T> clazz) {
         Preconditions.checkNotNull(name, "GameRule name cannot be null");
@@ -288,7 +288,7 @@ public final class GameRule<T> implements net.kyori.adventure.translation.Transl
     }
 
     @Override
-    public String toString() {
+    public @NotNull String toString() {
         return "GameRule{" + "key=" + name + ", type=" + type + '}';
     }
 
@@ -311,7 +311,7 @@ public final class GameRule<T> implements net.kyori.adventure.translation.Transl
      * @return an immutable collection containing all registered GameRules.
      */
     @NotNull
-    public static GameRule<?>[] values() {
+    public static GameRule<?> @NotNull [] values() {
         return gameRules.values().toArray(new GameRule<?>[gameRules.size()]);
     }
 
diff --git a/src/main/java/org/bukkit/Location.java b/src/main/java/org/bukkit/Location.java
index 6bbf8468bc47e82b0aeb164e49cdb73d93bae87b..985216eab87d1769abd034bd4585081531474613 100644
--- a/src/main/java/org/bukkit/Location.java
+++ b/src/main/java/org/bukkit/Location.java
@@ -31,7 +31,7 @@ import org.bukkit.entity.Player;
  * representation by the implementation.
  */
 public class Location implements Cloneable, ConfigurationSerializable, io.papermc.paper.math.FinePosition { // Paper
-    private Reference<World> world;
+    private @Nullable Reference<World> world;
     private double x;
     private double y;
     private double z;
@@ -60,7 +60,7 @@ public class Location implements Cloneable, ConfigurationSerializable, io.paperm
      * @param yaw The absolute rotation on the x-plane, in degrees
      * @param pitch The absolute rotation on the y-plane, in degrees
      */
-    public Location(@UndefinedNullability final World world, final double x, final double y, final double z, final float yaw, final float pitch) { // Paper
+    public Location(@UndefinedNullability final @Nullable World world, final double x, final double y, final double z, final float yaw, final float pitch) { // Paper
         if (world != null) {
             this.world = new WeakReference<>(world);
         }
@@ -103,7 +103,7 @@ public class Location implements Cloneable, ConfigurationSerializable, io.paperm
      * @see #isWorldLoaded()
      */
     @UndefinedNullability // Paper
-    public World getWorld() {
+    public @Nullable World getWorld() {
         if (this.world == null) {
             return null;
         }
@@ -1005,7 +1005,7 @@ public class Location implements Cloneable, ConfigurationSerializable, io.paperm
     }
     // Paper end
     @Override
-    public boolean equals(Object obj) {
+    public boolean equals(@Nullable Object obj) {
         if (obj == null) {
             return false;
         }
@@ -1052,7 +1052,7 @@ public class Location implements Cloneable, ConfigurationSerializable, io.paperm
     }
 
     @Override
-    public String toString() {
+    public @NotNull String toString() {
         World world = (this.world == null) ? null : this.world.get();
         return "Location{" + "world=" + world + ",x=" + x + ",y=" + y + ",z=" + z + ",pitch=" + pitch + ",yaw=" + yaw + '}';
     }
diff --git a/src/main/java/org/bukkit/Material.java b/src/main/java/org/bukkit/Material.java
index e5b94299793ba7cb9071a3f3a35ddbe08b0b9906..8d2d37bf65f1f076bac93d2eef7f3e53b2226052 100644
--- a/src/main/java/org/bukkit/Material.java
+++ b/src/main/java/org/bukkit/Material.java
@@ -4268,13 +4268,13 @@ public enum Material implements Keyed, net.kyori.adventure.translation.Translata
     public static final String LEGACY_PREFIX = "LEGACY_";
 
     private final int id;
-    private final Constructor<? extends MaterialData> ctor;
+    private final @Nullable Constructor<? extends MaterialData> ctor;
     private static final Map<String, Material> BY_NAME = Maps.newHashMap();
     private final int maxStack;
     private final short durability;
     public final Class<?> data;
     private final boolean legacy;
-    private final NamespacedKey key;
+    private final @NotNull NamespacedKey key;
     private boolean isBlock; // Paper
 
     private Material(final int id) {
@@ -4289,15 +4289,15 @@ public enum Material implements Keyed, net.kyori.adventure.translation.Translata
         this(id, stack, durability, MaterialData.class);
     }
 
-    private Material(final int id, /*@NotNull*/ final Class<?> data) {
+    private Material(final int id, /*@NotNull*/ final @NotNull Class<?> data) {
         this(id, 64, data);
     }
 
-    private Material(final int id, final int stack, /*@NotNull*/ final Class<?> data) {
+    private Material(final int id, final int stack, /*@NotNull*/ final @NotNull Class<?> data) {
         this(id, stack, 0, data);
     }
 
-    private Material(final int id, final int stack, final int durability, /*@NotNull*/ final Class<?> data) {
+    private Material(final int id, final int stack, final int durability, /*@NotNull*/ final @NotNull Class<?> data) {
         this.id = id;
         this.durability = (short) durability;
         this.maxStack = stack;
diff --git a/src/main/java/org/bukkit/NamespacedKey.java b/src/main/java/org/bukkit/NamespacedKey.java
index 236c9aea9ffc36269e5c32eacc9f1fd6bd039c88..3a74d43ba4f0a0a38ebc271e4bd40405d9e85687 100644
--- a/src/main/java/org/bukkit/NamespacedKey.java
+++ b/src/main/java/org/bukkit/NamespacedKey.java
@@ -34,8 +34,8 @@ public final class NamespacedKey implements net.kyori.adventure.key.Key, com.des
     private static final Pattern VALID_NAMESPACE = Pattern.compile("[a-z0-9._-]+");
     private static final Pattern VALID_KEY = Pattern.compile("[a-z0-9/._-]+");
     //
-    private final String namespace;
-    private final String key;
+    private final @NotNull String namespace;
+    private final @NotNull String key;
 
     /**
      * Create a key in a specific namespace.
@@ -106,7 +106,7 @@ public final class NamespacedKey implements net.kyori.adventure.key.Key, com.des
     }
 
     @Override
-    public boolean equals(Object obj) {
+    public boolean equals(@Nullable Object obj) {
         if (obj == null) {
             return false;
         }
@@ -118,7 +118,7 @@ public final class NamespacedKey implements net.kyori.adventure.key.Key, com.des
     }
 
     @Override
-    public String toString() {
+    public @NotNull String toString() {
         return this.namespace + ":" + this.key;
     }
 
diff --git a/src/main/java/org/bukkit/Note.java b/src/main/java/org/bukkit/Note.java
index fc3da7ce6f7948aeab0962d9472e8f3a126834cf..95f79cdbc586a0d3bd46b2e0b13ee5696c45ac44 100644
--- a/src/main/java/org/bukkit/Note.java
+++ b/src/main/java/org/bukkit/Note.java
@@ -263,7 +263,7 @@ public class Note {
     }
 
     @Override
-    public boolean equals(Object obj) {
+    public boolean equals(@Nullable Object obj) {
         if (this == obj)
             return true;
         if (obj == null)
@@ -277,7 +277,7 @@ public class Note {
     }
 
     @Override
-    public String toString() {
+    public @NotNull String toString() {
         return "Note{" + getTone().toString() + (isSharped() ? "#" : "") + "}";
     }
 }
diff --git a/src/main/java/org/bukkit/Particle.java b/src/main/java/org/bukkit/Particle.java
index 2315fffc4a1a5bebc50a703e9df59df8121c2200..64928045973bba9107f38036f44effa1e63bca09 100644
--- a/src/main/java/org/bukkit/Particle.java
+++ b/src/main/java/org/bukkit/Particle.java
@@ -177,7 +177,7 @@ public enum Particle {
      */
     public static class DustOptions {
 
-        private final Color color;
+        private final @NotNull Color color;
         private final float size;
 
         public DustOptions(@NotNull Color color, float size) {
@@ -211,7 +211,7 @@ public enum Particle {
      */
     public static class DustTransition extends DustOptions {
 
-        private final Color toColor;
+        private final @NotNull Color toColor;
 
         public DustTransition(@NotNull Color fromColor, @NotNull Color toColor, float size) {
             super(fromColor, size);
diff --git a/src/main/java/org/bukkit/Registry.java b/src/main/java/org/bukkit/Registry.java
index 56a90dbf1a61dce615ee0f712851bf01de06b28c..8dab6678f041cd61047976bcc4de8e4659ecdfc8 100644
--- a/src/main/java/org/bukkit/Registry.java
+++ b/src/main/java/org/bukkit/Registry.java
@@ -135,13 +135,13 @@ public interface Registry<T extends Keyed> extends Iterable<T> {
      *
      * @see Structure
      */
-    Registry<Structure> STRUCTURE = Bukkit.getRegistry(Structure.class);
+    @Nullable Registry<Structure> STRUCTURE = Bukkit.getRegistry(Structure.class);
     /**
      * Server structure types.
      *
      * @see StructureType
      */
-    Registry<StructureType> STRUCTURE_TYPE = Bukkit.getRegistry(StructureType.class);
+    @Nullable Registry<StructureType> STRUCTURE_TYPE = Bukkit.getRegistry(StructureType.class);
     /**
      * Sound keys.
      *
@@ -215,7 +215,7 @@ public interface Registry<T extends Keyed> extends Iterable<T> {
      * Configured structures.
      * @see io.papermc.paper.world.structure.ConfiguredStructure
      */
-    Registry<io.papermc.paper.world.structure.ConfiguredStructure> CONFIGURED_STRUCTURE = Bukkit.getRegistry(io.papermc.paper.world.structure.ConfiguredStructure.class);
+    @Nullable Registry<io.papermc.paper.world.structure.ConfiguredStructure> CONFIGURED_STRUCTURE = Bukkit.getRegistry(io.papermc.paper.world.structure.ConfiguredStructure.class);
     /**
      * Potion effect types.
      *
@@ -248,7 +248,7 @@ public interface Registry<T extends Keyed> extends Iterable<T> {
 
     static final class SimpleRegistry<T extends Enum<T> & Keyed> implements Registry<T> {
 
-        private final Map<NamespacedKey, T> map;
+        private final @NotNull Map<NamespacedKey, T> map;
 
         protected SimpleRegistry(@NotNull Class<T> type) {
             this(type, Predicates.<T>alwaysTrue());
diff --git a/src/main/java/org/bukkit/Sound.java b/src/main/java/org/bukkit/Sound.java
index bf8eea5464f4b09198e7b621419a3adade9f4601..060a57f469e8175ad5d1d92d604e332d7bc29b84 100644
--- a/src/main/java/org/bukkit/Sound.java
+++ b/src/main/java/org/bukkit/Sound.java
@@ -1405,9 +1405,9 @@ public enum Sound implements Keyed, net.kyori.adventure.sound.Sound.Type { // Pa
     WEATHER_RAIN("weather.rain"),
     WEATHER_RAIN_ABOVE("weather.rain.above");
 
-    private final NamespacedKey key;
+    private final @NotNull NamespacedKey key;
 
-    private Sound(String key) {
+    private Sound(@NotNull String key) {
         this.key = NamespacedKey.minecraft(key);
     }
 
diff --git a/src/main/java/org/bukkit/Statistic.java b/src/main/java/org/bukkit/Statistic.java
index 4ce888688d04eb0c4b2261a6474df870e7d2bb00..d1a9398a75cd6b3bbb6ca3ff54be03c024489516 100644
--- a/src/main/java/org/bukkit/Statistic.java
+++ b/src/main/java/org/bukkit/Statistic.java
@@ -95,7 +95,7 @@ public enum Statistic implements Keyed {
     STRIDER_ONE_CM;
 
     private final Type type;
-    private final NamespacedKey key;
+    private final @NotNull NamespacedKey key;
 
     private Statistic() {
         this(Type.UNTYPED);
diff --git a/src/main/java/org/bukkit/StructureType.java b/src/main/java/org/bukkit/StructureType.java
index 7707def6e9bf84009647885f06417a0f86327c9b..92a789748f81af4dca654993b784e2a3c05bcfa9 100644
--- a/src/main/java/org/bukkit/StructureType.java
+++ b/src/main/java/org/bukkit/StructureType.java
@@ -166,8 +166,8 @@ public final class StructureType implements Keyed {
      *  STRUCTURE TYPES REGISTERED ABOVE THIS
      * ****************
      */
-    private final NamespacedKey key;
-    private final MapCursor.Type mapCursor;
+    private final @NotNull NamespacedKey key;
+    private final MapCursor.@Nullable Type mapCursor;
 
     /**
      * Create a new StructureType with a given name and map cursor. To indicate
@@ -228,7 +228,7 @@ public final class StructureType implements Keyed {
     }
 
     @Override
-    public String toString() {
+    public @NotNull String toString() {
         return "StructureType{key=" + this.key + ", cursor=" + this.mapCursor + "}";
     }
 
diff --git a/src/main/java/org/bukkit/Tag.java b/src/main/java/org/bukkit/Tag.java
index 84dbfefb2cfc10a1ac7d9712535fcaecc9af6a2d..f2a196827940b6ff976430e83868c8b3da16be19 100644
--- a/src/main/java/org/bukkit/Tag.java
+++ b/src/main/java/org/bukkit/Tag.java
@@ -3,6 +3,8 @@ package org.bukkit;
 import java.util.Set;
 import org.bukkit.entity.EntityType;
 import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 /**
  * Represents a tag that may be defined by the server or a resource pack to
@@ -26,119 +28,120 @@ public interface Tag<T extends Keyed> extends Keyed {
     /**
      * Vanilla block tag representing all colors of wool.
      */
-    Tag<Material> WOOL = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("wool"), Material.class);
+    @Nullable Tag<Material> WOOL = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("wool"), Material.class);
     /**
      * Vanilla block tag representing all plank variants.
      */
-    Tag<Material> PLANKS = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("planks"), Material.class);
+    @Nullable Tag<Material> PLANKS = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("planks"), Material.class);
     /**
      * Vanilla block tag representing all regular/mossy/cracked/chiseled stone
      * bricks.
      */
-    Tag<Material> STONE_BRICKS = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("stone_bricks"), Material.class);
+    @Nullable Tag<Material> STONE_BRICKS = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("stone_bricks"), Material.class);
     /**
      * Vanilla block tag representing all wooden buttons.
      */
-    Tag<Material> WOODEN_BUTTONS = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("wooden_buttons"), Material.class);
+    @Nullable Tag<Material> WOODEN_BUTTONS = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("wooden_buttons"), Material.class);
     /**
      * Vanilla block tag representing all buttons (inherits from
      * {@link #WOODEN_BUTTONS}.
      */
-    Tag<Material> BUTTONS = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("buttons"), Material.class);
+    @Nullable Tag<Material> BUTTONS = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("buttons"), Material.class);
     /**
      * Vanilla block tag representing all colors of carpet.
      */
-    Tag<Material> WOOL_CARPETS = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("wool_carpets"), Material.class);
+    @Nullable Tag<Material> WOOL_CARPETS = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("wool_carpets"), Material.class);
     /**
      * @deprecated {@link #WOOL_CARPETS}.
      */
     @Deprecated
+    @Nullable
     Tag<Material> CARPETS = WOOL_CARPETS;
     /**
      * Vanilla block tag representing all wooden doors.
      */
-    Tag<Material> WOODEN_DOORS = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("wooden_doors"), Material.class);
+    @Nullable Tag<Material> WOODEN_DOORS = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("wooden_doors"), Material.class);
     /**
      * Vanilla block tag representing all wooden stairs.
      */
-    Tag<Material> WOODEN_STAIRS = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("wooden_stairs"), Material.class);
+    @Nullable Tag<Material> WOODEN_STAIRS = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("wooden_stairs"), Material.class);
     /**
      * Vanilla block tag representing all wooden slabs.
      */
-    Tag<Material> WOODEN_SLABS = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("wooden_slabs"), Material.class);
+    @Nullable Tag<Material> WOODEN_SLABS = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("wooden_slabs"), Material.class);
     /**
      * Vanilla block tag representing all wooden fences.
      */
-    Tag<Material> WOODEN_FENCES = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("wooden_fences"), Material.class);
+    @Nullable Tag<Material> WOODEN_FENCES = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("wooden_fences"), Material.class);
     /**
      * Vanilla block tag representing all pressure plates.
      */
-    Tag<Material> PRESSURE_PLATES = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("pressure_plates"), Material.class);
+    @Nullable Tag<Material> PRESSURE_PLATES = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("pressure_plates"), Material.class);
     /**
      * Vanilla block tag representing all wooden pressure plates.
      */
-    Tag<Material> WOODEN_PRESSURE_PLATES = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("wooden_pressure_plates"), Material.class);
+    @Nullable Tag<Material> WOODEN_PRESSURE_PLATES = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("wooden_pressure_plates"), Material.class);
     /**
      * Vanilla block tag representing all stone pressure plates.
      */
-    Tag<Material> STONE_PRESSURE_PLATES = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("stone_pressure_plates"), Material.class);
+    @Nullable Tag<Material> STONE_PRESSURE_PLATES = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("stone_pressure_plates"), Material.class);
     /**
      * Vanilla block tag representing all wooden trapdoors.
      */
-    Tag<Material> WOODEN_TRAPDOORS = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("wooden_trapdoors"), Material.class);
+    @Nullable Tag<Material> WOODEN_TRAPDOORS = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("wooden_trapdoors"), Material.class);
     /**
      * Vanilla block tag representing all doors (inherits from
      * {@link #WOODEN_DOORS}.
      */
-    Tag<Material> DOORS = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("doors"), Material.class);
+    @Nullable Tag<Material> DOORS = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("doors"), Material.class);
     /**
      * Vanilla block tag representing all sapling variants.
      */
-    Tag<Material> SAPLINGS = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("saplings"), Material.class);
+    @Nullable Tag<Material> SAPLINGS = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("saplings"), Material.class);
     /**
      * Vanilla block tag representing all log and bark variants that burn.
      */
-    Tag<Material> LOGS_THAT_BURN = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("logs_that_burn"), Material.class);
+    @Nullable Tag<Material> LOGS_THAT_BURN = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("logs_that_burn"), Material.class);
     /**
      * Vanilla block tag representing all log and bark variants.
      */
-    Tag<Material> LOGS = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("logs"), Material.class);
+    @Nullable Tag<Material> LOGS = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("logs"), Material.class);
     /**
      * Vanilla block tag representing all dark oak log and bark variants.
      */
-    Tag<Material> DARK_OAK_LOGS = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("dark_oak_logs"), Material.class);
+    @Nullable Tag<Material> DARK_OAK_LOGS = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("dark_oak_logs"), Material.class);
     /**
      * Vanilla block tag representing all oak log and bark variants.
      */
-    Tag<Material> OAK_LOGS = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("oak_logs"), Material.class);
+    @Nullable Tag<Material> OAK_LOGS = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("oak_logs"), Material.class);
     /**
      * Vanilla block tag representing all birch log and bark variants.
      */
-    Tag<Material> BIRCH_LOGS = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("birch_logs"), Material.class);
+    @Nullable Tag<Material> BIRCH_LOGS = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("birch_logs"), Material.class);
     /**
      * Vanilla block tag representing all acacia log and bark variants.
      */
-    Tag<Material> ACACIA_LOGS = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("acacia_logs"), Material.class);
+    @Nullable Tag<Material> ACACIA_LOGS = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("acacia_logs"), Material.class);
     /**
      * Vanilla block tag representing all jungle log and bark variants.
      */
-    Tag<Material> JUNGLE_LOGS = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("jungle_logs"), Material.class);
+    @Nullable Tag<Material> JUNGLE_LOGS = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("jungle_logs"), Material.class);
     /**
      * Vanilla block tag representing all spruce log and bark variants.
      */
-    Tag<Material> SPRUCE_LOGS = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("spruce_logs"), Material.class);
+    @Nullable Tag<Material> SPRUCE_LOGS = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("spruce_logs"), Material.class);
     /**
      * Vanilla block tag representing all mangrove log and bark variants.
      */
-    Tag<Material> MANGROVE_LOGS = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("mangrove_logs"), Material.class);
+    @Nullable Tag<Material> MANGROVE_LOGS = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("mangrove_logs"), Material.class);
     /**
      * Vanilla block tag representing all crimson stems.
      */
-    Tag<Material> CRIMSON_STEMS = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("crimson_stems"), Material.class);
+    @Nullable Tag<Material> CRIMSON_STEMS = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("crimson_stems"), Material.class);
     /**
      * Vanilla block tag representing all warped stems.
      */
-    Tag<Material> WARPED_STEMS = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("warped_stems"), Material.class);
+    @Nullable Tag<Material> WARPED_STEMS = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("warped_stems"), Material.class);
     /**
      * Vanilla block tag representing all bamboo blocks.
      */
@@ -147,169 +150,169 @@ public interface Tag<T extends Keyed> extends Keyed {
     /**
      * Vanilla block tag representing all banner blocks.
      */
-    Tag<Material> BANNERS = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("banners"), Material.class);
+    @Nullable Tag<Material> BANNERS = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("banners"), Material.class);
     /**
      * Vanilla block tag representing all sand blocks.
      */
-    Tag<Material> SAND = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("sand"), Material.class);
+    @Nullable Tag<Material> SAND = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("sand"), Material.class);
     /**
      * Vanilla block tag representing all stairs.
      */
-    Tag<Material> STAIRS = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("stairs"), Material.class);
+    @Nullable Tag<Material> STAIRS = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("stairs"), Material.class);
     /**
      * Vanilla block tag representing all slabs.
      */
-    Tag<Material> SLABS = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("slabs"), Material.class);
+    @Nullable Tag<Material> SLABS = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("slabs"), Material.class);
     /**
      * Vanilla block tag representing all walls.
      */
-    Tag<Material> WALLS = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("walls"), Material.class);
+    @Nullable Tag<Material> WALLS = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("walls"), Material.class);
     /**
      * Vanilla block tag representing all damaged and undamaged anvils.
      */
-    Tag<Material> ANVIL = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("anvil"), Material.class);
+    @Nullable Tag<Material> ANVIL = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("anvil"), Material.class);
     /**
      * Vanilla block tag representing all Minecart rails.
      */
-    Tag<Material> RAILS = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("rails"), Material.class);
+    @Nullable Tag<Material> RAILS = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("rails"), Material.class);
     /**
      * Vanilla block tag representing all leaves fans.
      */
-    Tag<Material> LEAVES = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("leaves"), Material.class);
+    @Nullable Tag<Material> LEAVES = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("leaves"), Material.class);
     /**
      * Vanilla block tag representing all trapdoors (inherits from
      * {@link #WOODEN_TRAPDOORS}.
      */
-    Tag<Material> TRAPDOORS = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("trapdoors"), Material.class);
+    @Nullable Tag<Material> TRAPDOORS = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("trapdoors"), Material.class);
     /**
      * Vanilla block tag representing all empty and filled flower pots.
      */
-    Tag<Material> FLOWER_POTS = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("flower_pots"), Material.class);
+    @Nullable Tag<Material> FLOWER_POTS = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("flower_pots"), Material.class);
     /**
      * Vanilla block tag representing all small flowers.
      */
-    Tag<Material> SMALL_FLOWERS = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("small_flowers"), Material.class);
+    @Nullable Tag<Material> SMALL_FLOWERS = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("small_flowers"), Material.class);
     /**
      * Vanilla block tag representing all beds.
      */
-    Tag<Material> BEDS = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("beds"), Material.class);
+    @Nullable Tag<Material> BEDS = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("beds"), Material.class);
     /**
      * Vanilla block tag representing all fences.
      */
-    Tag<Material> FENCES = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("fences"), Material.class);
+    @Nullable Tag<Material> FENCES = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("fences"), Material.class);
     /**
      * Vanilla block tag representing all tall flowers.
      */
-    Tag<Material> TALL_FLOWERS = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("tall_flowers"), Material.class);
+    @Nullable Tag<Material> TALL_FLOWERS = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("tall_flowers"), Material.class);
     /**
      * Vanilla block tag representing all flowers.
      */
-    Tag<Material> FLOWERS = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("flowers"), Material.class);
+    @Nullable Tag<Material> FLOWERS = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("flowers"), Material.class);
     /**
      * Vanilla block tag representing all piglin repellents.
      */
-    Tag<Material> PIGLIN_REPELLENTS = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("piglin_repellents"), Material.class);
+    @Nullable Tag<Material> PIGLIN_REPELLENTS = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("piglin_repellents"), Material.class);
     /**
      * Vanilla block tag representing all gold ores.
      */
-    Tag<Material> GOLD_ORES = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("gold_ores"), Material.class);
+    @Nullable Tag<Material> GOLD_ORES = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("gold_ores"), Material.class);
     /**
      * Vanilla block tag representing all iron ores.
      */
-    Tag<Material> IRON_ORES = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("iron_ores"), Material.class);
+    @Nullable Tag<Material> IRON_ORES = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("iron_ores"), Material.class);
     /**
      * Vanilla block tag representing all diamond ores.
      */
-    Tag<Material> DIAMOND_ORES = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("diamond_ores"), Material.class);
+    @Nullable Tag<Material> DIAMOND_ORES = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("diamond_ores"), Material.class);
     /**
      * Vanilla block tag representing all redstone ores.
      */
-    Tag<Material> REDSTONE_ORES = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("redstone_ores"), Material.class);
+    @Nullable Tag<Material> REDSTONE_ORES = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("redstone_ores"), Material.class);
     /**
      * Vanilla block tag representing all lapis ores.
      */
-    Tag<Material> LAPIS_ORES = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("lapis_ores"), Material.class);
+    @Nullable Tag<Material> LAPIS_ORES = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("lapis_ores"), Material.class);
     /**
      * Vanilla block tag representing all coal ores.
      */
-    Tag<Material> COAL_ORES = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("coal_ores"), Material.class);
+    @Nullable Tag<Material> COAL_ORES = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("coal_ores"), Material.class);
     /**
      * Vanilla block tag representing all emerald ores.
      */
-    Tag<Material> EMERALD_ORES = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("emerald_ores"), Material.class);
+    @Nullable Tag<Material> EMERALD_ORES = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("emerald_ores"), Material.class);
     /**
      * Vanilla block tag representing all copper ores.
      */
-    Tag<Material> COPPER_ORES = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("copper_ores"), Material.class);
+    @Nullable Tag<Material> COPPER_ORES = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("copper_ores"), Material.class);
     /**
      * Vanilla block tag representing all candles.
      */
-    Tag<Material> CANDLES = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("candles"), Material.class);
+    @Nullable Tag<Material> CANDLES = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("candles"), Material.class);
     /**
      * Vanilla block tag representing all dirt.
      */
-    Tag<Material> DIRT = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("dirt"), Material.class);
+    @Nullable Tag<Material> DIRT = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("dirt"), Material.class);
     /**
      * Vanilla block tag representing all terracotta.
      */
-    Tag<Material> TERRACOTTA = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("terracotta"), Material.class);
+    @Nullable Tag<Material> TERRACOTTA = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("terracotta"), Material.class);
     /**
      * Vanilla block tag representing all blocks which complete the find tree
      * tutorial.
      */
-    Tag<Material> COMPLETES_FIND_TREE_TUTORIAL = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("completes_find_tree_tutorial"), Material.class);
+    @Nullable Tag<Material> COMPLETES_FIND_TREE_TUTORIAL = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("completes_find_tree_tutorial"), Material.class);
     /**
      * Vanilla block tag denoting blocks that enderman may pick up and hold.
      */
-    Tag<Material> ENDERMAN_HOLDABLE = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("enderman_holdable"), Material.class);
+    @Nullable Tag<Material> ENDERMAN_HOLDABLE = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("enderman_holdable"), Material.class);
     /**
      * Vanilla block tag denoting ice blocks.
      */
-    Tag<Material> ICE = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("ice"), Material.class);
+    @Nullable Tag<Material> ICE = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("ice"), Material.class);
     /**
      * Vanilla block tag denoting all valid mob spawn positions.
      */
-    Tag<Material> VALID_SPAWN = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("valid_spawn"), Material.class);
+    @Nullable Tag<Material> VALID_SPAWN = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("valid_spawn"), Material.class);
     /**
      * Vanilla block tag denoting impermeable blocks which do not drip fluids.
      */
-    Tag<Material> IMPERMEABLE = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("impermeable"), Material.class);
+    @Nullable Tag<Material> IMPERMEABLE = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("impermeable"), Material.class);
     /**
      * Vanilla block tag denoting all underwater blocks which may be bonemealed.
      */
-    Tag<Material> UNDERWATER_BONEMEALS = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("underwater_bonemeals"), Material.class);
+    @Nullable Tag<Material> UNDERWATER_BONEMEALS = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("underwater_bonemeals"), Material.class);
     /**
      * Vanilla block tag representing all coral blocks.
      */
-    Tag<Material> CORAL_BLOCKS = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("coral_blocks"), Material.class);
+    @Nullable Tag<Material> CORAL_BLOCKS = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("coral_blocks"), Material.class);
     /**
      * Vanilla block tag representing all wall corals.
      */
-    Tag<Material> WALL_CORALS = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("wall_corals"), Material.class);
+    @Nullable Tag<Material> WALL_CORALS = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("wall_corals"), Material.class);
     /**
      * Vanilla block tag representing all coral plants.
      */
-    Tag<Material> CORAL_PLANTS = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("coral_plants"), Material.class);
+    @Nullable Tag<Material> CORAL_PLANTS = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("coral_plants"), Material.class);
     /**
      * Vanilla block tag representing all coral.
      */
-    Tag<Material> CORALS = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("corals"), Material.class);
+    @Nullable Tag<Material> CORALS = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("corals"), Material.class);
     /**
      * Vanilla block tag denoting all blocks bamboo may be planted on.
      */
-    Tag<Material> BAMBOO_PLANTABLE_ON = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("bamboo_plantable_on"), Material.class);
+    @Nullable Tag<Material> BAMBOO_PLANTABLE_ON = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("bamboo_plantable_on"), Material.class);
     /**
      * Vanilla block tag representing all standing signs.
      */
-    Tag<Material> STANDING_SIGNS = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("standing_signs"), Material.class);
+    @Nullable Tag<Material> STANDING_SIGNS = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("standing_signs"), Material.class);
     /**
      * Vanilla block tag representing all wall signs.
      */
-    Tag<Material> WALL_SIGNS = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("wall_signs"), Material.class);
+    @Nullable Tag<Material> WALL_SIGNS = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("wall_signs"), Material.class);
     /**
      * Vanilla block tag representing all regular signs.
      */
-    Tag<Material> SIGNS = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("signs"), Material.class);
+    @Nullable Tag<Material> SIGNS = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("signs"), Material.class);
     /**
      * Vanilla block tag representing all ceiling signs.
      */
@@ -332,354 +335,355 @@ public interface Tag<T extends Keyed> extends Keyed {
     /**
      * Vanilla block tag representing all blocks immune to dragons.
      */
-    Tag<Material> DRAGON_IMMUNE = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("dragon_immune"), Material.class);
+    @Nullable Tag<Material> DRAGON_IMMUNE = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("dragon_immune"), Material.class);
     /**
      * Vanilla block tag representing all blocks transparent to the ender
      * dragon.
      */
-    Tag<Material> DRAGON_TRANSPARENT = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("dragon_transparent"), Material.class);
+    @Nullable Tag<Material> DRAGON_TRANSPARENT = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("dragon_transparent"), Material.class);
     /**
      * Vanilla block tag representing all blocks immune to withers.
      */
-    Tag<Material> WITHER_IMMUNE = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("wither_immune"), Material.class);
+    @Nullable Tag<Material> WITHER_IMMUNE = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("wither_immune"), Material.class);
     /**
      * Vanilla block tag representing all base blocks used for wither summoning.
      */
-    Tag<Material> WITHER_SUMMON_BASE_BLOCKS = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("wither_summon_base_blocks"), Material.class);
+    @Nullable Tag<Material> WITHER_SUMMON_BASE_BLOCKS = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("wither_summon_base_blocks"), Material.class);
     /**
      * Vanilla block tag representing all beehives.
      */
-    Tag<Material> BEEHIVES = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("beehives"), Material.class);
+    @Nullable Tag<Material> BEEHIVES = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("beehives"), Material.class);
     /**
      * Vanilla block tag representing all crops.
      */
-    Tag<Material> CROPS = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("crops"), Material.class);
+    @Nullable Tag<Material> CROPS = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("crops"), Material.class);
     /**
      * Vanilla block tag representing all bee growables.
      */
-    Tag<Material> BEE_GROWABLES = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("bee_growables"), Material.class);
+    @Nullable Tag<Material> BEE_GROWABLES = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("bee_growables"), Material.class);
     /**
      * Vanilla block tag representing all portals.
      */
-    Tag<Material> PORTALS = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("portals"), Material.class);
+    @Nullable Tag<Material> PORTALS = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("portals"), Material.class);
     /**
      * Vanilla block tag representing all fire blocks.
      */
-    Tag<Material> FIRE = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("fire"), Material.class);
+    @Nullable Tag<Material> FIRE = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("fire"), Material.class);
     /**
      * Vanilla block tag representing all nylium blocks.
      */
-    Tag<Material> NYLIUM = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("nylium"), Material.class);
+    @Nullable Tag<Material> NYLIUM = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("nylium"), Material.class);
     /**
      * Vanilla block tag representing all wart blocks.
      */
-    Tag<Material> WART_BLOCKS = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("wart_blocks"), Material.class);
+    @Nullable Tag<Material> WART_BLOCKS = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("wart_blocks"), Material.class);
     /**
      * Vanilla block tag representing all beacon base blocks.
      */
-    Tag<Material> BEACON_BASE_BLOCKS = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("beacon_base_blocks"), Material.class);
+    @Nullable Tag<Material> BEACON_BASE_BLOCKS = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("beacon_base_blocks"), Material.class);
     /**
      * Vanilla block tag representing all blocks affected by the soul speed
      * enchantment.
      */
-    Tag<Material> SOUL_SPEED_BLOCKS = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("soul_speed_blocks"), Material.class);
+    @Nullable Tag<Material> SOUL_SPEED_BLOCKS = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("soul_speed_blocks"), Material.class);
     /**
      * Vanilla block tag representing all wall post overrides.
      */
-    Tag<Material> WALL_POST_OVERRIDE = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("wall_post_override"), Material.class);
+    @Nullable Tag<Material> WALL_POST_OVERRIDE = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("wall_post_override"), Material.class);
     /**
      * Vanilla block tag representing all climbable blocks.
      */
-    Tag<Material> CLIMBABLE = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("climbable"), Material.class);
+    @Nullable Tag<Material> CLIMBABLE = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("climbable"), Material.class);
     /**
      * Vanilla block tag representing all blocks which reset fall damage.
      */
-    Tag<Material> FALL_DAMAGE_RESETTING = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("fall_damage_resetting"), Material.class);
+    @Nullable Tag<Material> FALL_DAMAGE_RESETTING = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("fall_damage_resetting"), Material.class);
     /**
      * Vanilla block tag representing all shulker boxes.
      */
-    Tag<Material> SHULKER_BOXES = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("shulker_boxes"), Material.class);
+    @Nullable Tag<Material> SHULKER_BOXES = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("shulker_boxes"), Material.class);
     /**
      * Vanilla block tag representing all hoglin repellents.
      */
-    Tag<Material> HOGLIN_REPELLENTS = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("hoglin_repellents"), Material.class);
+    @Nullable Tag<Material> HOGLIN_REPELLENTS = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("hoglin_repellents"), Material.class);
     /**
      * Vanilla block tag representing all soul fire base blocks.
      */
-    Tag<Material> SOUL_FIRE_BASE_BLOCKS = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("soul_fire_base_blocks"), Material.class);
+    @Nullable Tag<Material> SOUL_FIRE_BASE_BLOCKS = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("soul_fire_base_blocks"), Material.class);
     /**
      * Vanilla block tag representing all warm strider blocks.
      */
-    Tag<Material> STRIDER_WARM_BLOCKS = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("strider_warm_blocks"), Material.class);
+    @Nullable Tag<Material> STRIDER_WARM_BLOCKS = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("strider_warm_blocks"), Material.class);
     /**
      * Vanilla block tag representing all campfires.
      */
-    Tag<Material> CAMPFIRES = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("campfires"), Material.class);
+    @Nullable Tag<Material> CAMPFIRES = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("campfires"), Material.class);
     /**
      * Vanilla block tag representing all blocks guarded by piglins.
      */
-    Tag<Material> GUARDED_BY_PIGLINS = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("guarded_by_piglins"), Material.class);
+    @Nullable Tag<Material> GUARDED_BY_PIGLINS = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("guarded_by_piglins"), Material.class);
     /**
      * Vanilla block tag representing all blocks that prevent inside mob
      * spawning.
      */
-    Tag<Material> PREVENT_MOB_SPAWNING_INSIDE = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("prevent_mob_spawning_inside"), Material.class);
+    @Nullable Tag<Material> PREVENT_MOB_SPAWNING_INSIDE = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("prevent_mob_spawning_inside"), Material.class);
     /**
      * Vanilla block tag representing all fence gates.
      */
-    Tag<Material> FENCE_GATES = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("fence_gates"), Material.class);
+    @Nullable Tag<Material> FENCE_GATES = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("fence_gates"), Material.class);
     /**
      * Vanilla block tag representing all unstable bottom center blocks.
      */
-    Tag<Material> UNSTABLE_BOTTOM_CENTER = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("unstable_bottom_center"), Material.class);
-    Tag<Material> MUSHROOM_GROW_BLOCK = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("mushroom_grow_block"), Material.class);
+    @Nullable Tag<Material> UNSTABLE_BOTTOM_CENTER = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("unstable_bottom_center"), Material.class);
+    @Nullable Tag<Material> MUSHROOM_GROW_BLOCK = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("mushroom_grow_block"), Material.class);
 
     /**
      * Vanilla block tag representing all blocks that burn forever in the
      * overworld.
      */
-    Tag<Material> INFINIBURN_OVERWORLD = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("infiniburn_overworld"), Material.class);
+    @Nullable Tag<Material> INFINIBURN_OVERWORLD = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("infiniburn_overworld"), Material.class);
     /**
      * Vanilla block tag representing all blocks that burn forever in the
      * nether.
      */
-    Tag<Material> INFINIBURN_NETHER = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("infiniburn_nether"), Material.class);
+    @Nullable Tag<Material> INFINIBURN_NETHER = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("infiniburn_nether"), Material.class);
     /**
      * Vanilla block tag representing all blocks that burn forever in the end.
      */
-    Tag<Material> INFINIBURN_END = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("infiniburn_end"), Material.class);
+    @Nullable Tag<Material> INFINIBURN_END = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("infiniburn_end"), Material.class);
     /**
      * Vanilla block tag representing the overworld base material.
      */
-    Tag<Material> BASE_STONE_OVERWORLD = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("base_stone_overworld"), Material.class);
+    @Nullable Tag<Material> BASE_STONE_OVERWORLD = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("base_stone_overworld"), Material.class);
     /**
      * Vanilla block tag representing all blocks that may be replaced by ores.
      */
-    Tag<Material> STONE_ORE_REPLACEABLES = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("stone_ore_replaceables"), Material.class);
+    @Nullable Tag<Material> STONE_ORE_REPLACEABLES = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("stone_ore_replaceables"), Material.class);
     /**
      * Vanilla block tag representing all blocks that may be replaced by
      * deepslate ores.
      */
-    Tag<Material> DEEPSLATE_ORE_REPLACEABLES = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("deepslate_ore_replaceables"), Material.class);
+    @Nullable Tag<Material> DEEPSLATE_ORE_REPLACEABLES = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("deepslate_ore_replaceables"), Material.class);
     /**
      * Vanilla block tag representing the nether base material.
      */
-    Tag<Material> BASE_STONE_NETHER = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("base_stone_nether"), Material.class);
+    @Nullable Tag<Material> BASE_STONE_NETHER = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("base_stone_nether"), Material.class);
     /**
      * Vanilla block tag representing all blocks replaceable by the overworld
      * carver.
      */
-    Tag<Material> OVERWORLD_CARVER_REPLACEABLES = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("overworld_carver_replaceables"), Material.class);
+    @Nullable Tag<Material> OVERWORLD_CARVER_REPLACEABLES = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("overworld_carver_replaceables"), Material.class);
     /**
      * Vanilla block tag representing all blocks replaceable by the nether
      * carver.
      */
-    Tag<Material> NETHER_CARVER_REPLACEABLES = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("nether_carver_replaceables"), Material.class);
+    @Nullable Tag<Material> NETHER_CARVER_REPLACEABLES = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("nether_carver_replaceables"), Material.class);
     /**
      * Vanilla block tag representing all candle cakes.
      */
-    Tag<Material> CANDLE_CAKES = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("candle_cakes"), Material.class);
+    @Nullable Tag<Material> CANDLE_CAKES = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("candle_cakes"), Material.class);
     /**
      * Vanilla block tag representing all cauldrons.
      */
-    Tag<Material> CAULDRONS = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("cauldrons"), Material.class);
+    @Nullable Tag<Material> CAULDRONS = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("cauldrons"), Material.class);
     /**
      * Vanilla block tag representing all blocks that make crystal sounds.
      */
-    Tag<Material> CRYSTAL_SOUND_BLOCKS = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("crystal_sound_blocks"), Material.class);
+    @Nullable Tag<Material> CRYSTAL_SOUND_BLOCKS = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("crystal_sound_blocks"), Material.class);
     /**
      * Vanilla block tag representing all blocks that play muffled step sounds.
      */
-    Tag<Material> INSIDE_STEP_SOUND_BLOCKS = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("inside_step_sound_blocks"), Material.class);
+    @Nullable Tag<Material> INSIDE_STEP_SOUND_BLOCKS = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("inside_step_sound_blocks"), Material.class);
     /**
      * Vanilla block tag representing all blocks that block vibration signals.
      */
-    Tag<Material> OCCLUDES_VIBRATION_SIGNALS = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("occludes_vibration_signals"), Material.class);
+    @Nullable Tag<Material> OCCLUDES_VIBRATION_SIGNALS = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("occludes_vibration_signals"), Material.class);
     /**
      * Vanilla block tag representing all blocks that dampen the propagation of
      * vibration signals.
      */
-    Tag<Material> DAMPENS_VIBRATIONS = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("dampens_vibrations"), Material.class);
+    @Nullable Tag<Material> DAMPENS_VIBRATIONS = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("dampens_vibrations"), Material.class);
     /**
      * Vanilla block tag representing all blocks that are replaceable by
      * dripstone.
      */
-    Tag<Material> DRIPSTONE_REPLACEABLE = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("dripstone_replaceable_blocks"), Material.class);
+    @Nullable Tag<Material> DRIPSTONE_REPLACEABLE = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("dripstone_replaceable_blocks"), Material.class);
     /**
      * Vanilla block tag representing all cave vines.
      */
-    Tag<Material> CAVE_VINES = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("cave_vines"), Material.class);
+    @Nullable Tag<Material> CAVE_VINES = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("cave_vines"), Material.class);
     /**
      * Vanilla block tag representing all blocks replaceable by moss.
      */
-    Tag<Material> MOSS_REPLACEABLE = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("moss_replaceable"), Material.class);
+    @Nullable Tag<Material> MOSS_REPLACEABLE = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("moss_replaceable"), Material.class);
     /**
      * Vanilla block tag representing all blocks replaceable by lush ground.
      */
-    Tag<Material> LUSH_GROUND_REPLACEABLE = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("lush_ground_replaceable"), Material.class);
+    @Nullable Tag<Material> LUSH_GROUND_REPLACEABLE = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("lush_ground_replaceable"), Material.class);
     /**
      * Vanilla block tag representing all blocks replaceable by azalea root.
      */
-    Tag<Material> AZALEA_ROOT_REPLACEABLE = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("azalea_root_replaceable"), Material.class);
+    @Nullable Tag<Material> AZALEA_ROOT_REPLACEABLE = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("azalea_root_replaceable"), Material.class);
     /**
      * Vanilla block tag representing all blocks which small dripleaf can be
      * placed on.
      */
-    Tag<Material> SMALL_DRIPLEAF_PLACEABLE = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("small_dripleaf_placeable"), Material.class);
+    @Nullable Tag<Material> SMALL_DRIPLEAF_PLACEABLE = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("small_dripleaf_placeable"), Material.class);
     /**
      * Vanilla block tag representing all blocks which big dripleaf can be
      * placed on.
      */
-    Tag<Material> BIG_DRIPLEAF_PLACEABLE = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("big_dripleaf_placeable"), Material.class);
+    @Nullable Tag<Material> BIG_DRIPLEAF_PLACEABLE = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("big_dripleaf_placeable"), Material.class);
     /**
      * Vanilla block tag representing all snow blocks.
      */
-    Tag<Material> SNOW = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("snow"), Material.class);
+    @Nullable Tag<Material> SNOW = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("snow"), Material.class);
     /**
      * Vanilla block tag representing all blocks mineable with an axe.
      */
-    Tag<Material> MINEABLE_AXE = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("mineable/axe"), Material.class);
+    @Nullable Tag<Material> MINEABLE_AXE = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("mineable/axe"), Material.class);
     /**
      * Vanilla block tag representing all blocks mineable with a hoe.
      */
-    Tag<Material> MINEABLE_HOE = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("mineable/hoe"), Material.class);
+    @Nullable Tag<Material> MINEABLE_HOE = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("mineable/hoe"), Material.class);
     /**
      * Vanilla block tag representing all blocks mineable with a pickaxe.
      */
-    Tag<Material> MINEABLE_PICKAXE = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("mineable/pickaxe"), Material.class);
+    @Nullable Tag<Material> MINEABLE_PICKAXE = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("mineable/pickaxe"), Material.class);
     /**
      * Vanilla block tag representing all blocks mineable with a shovel.
      */
-    Tag<Material> MINEABLE_SHOVEL = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("mineable/shovel"), Material.class);
+    @Nullable Tag<Material> MINEABLE_SHOVEL = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("mineable/shovel"), Material.class);
     /**
      * Vanilla block tag representing all blocks which require a diamond tool.
      */
-    Tag<Material> NEEDS_DIAMOND_TOOL = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("needs_diamond_tool"), Material.class);
+    @Nullable Tag<Material> NEEDS_DIAMOND_TOOL = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("needs_diamond_tool"), Material.class);
     /**
      * Vanilla block tag representing all blocks which require an iron tool.
      */
-    Tag<Material> NEEDS_IRON_TOOL = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("needs_iron_tool"), Material.class);
+    @Nullable Tag<Material> NEEDS_IRON_TOOL = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("needs_iron_tool"), Material.class);
     /**
      * Vanilla block tag representing all blocks which require a stone tool.
      */
-    Tag<Material> NEEDS_STONE_TOOL = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("needs_stone_tool"), Material.class);
+    @Nullable Tag<Material> NEEDS_STONE_TOOL = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("needs_stone_tool"), Material.class);
     /**
      * Vanilla block tag representing all blocks which will not be replaced by
      * world generation features.
      */
-    Tag<Material> FEATURES_CANNOT_REPLACE = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("features_cannot_replace"), Material.class);
+    @Nullable Tag<Material> FEATURES_CANNOT_REPLACE = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("features_cannot_replace"), Material.class);
     /**
      * Vanilla block tag representing all blocks which lava pools will not
      * replace.
      */
-    Tag<Material> LAVA_POOL_STONE_CANNOT_REPLACE = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("lava_pool_stone_cannot_replace"), Material.class);
+    @Nullable Tag<Material> LAVA_POOL_STONE_CANNOT_REPLACE = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("lava_pool_stone_cannot_replace"), Material.class);
     /**
      * Vanilla block tag representing all blocks which geodes will not spawn in.
      */
-    Tag<Material> GEODE_INVALID_BLOCKS = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("geode_invalid_blocks"), Material.class);
+    @Nullable Tag<Material> GEODE_INVALID_BLOCKS = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("geode_invalid_blocks"), Material.class);
     /**
      * Vanilla block tag representing all blocks which frogs prefer to jump to.
      */
-    Tag<Material> FROG_PREFER_JUMP_TO = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("frog_prefer_jump_to"), Material.class);
+    @Nullable Tag<Material> FROG_PREFER_JUMP_TO = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("frog_prefer_jump_to"), Material.class);
     /**
      * Vanilla block tag representing all blocks which can be replaced by skulk.
      */
-    Tag<Material> SCULK_REPLACEABLE = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("sculk_replaceable"), Material.class);
+    @Nullable Tag<Material> SCULK_REPLACEABLE = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("sculk_replaceable"), Material.class);
     /**
      * Vanilla block tag representing all blocks which can be replaced by skulk
      * during world generation.
      */
-    Tag<Material> SCULK_REPLACEABLE_WORLD_GEN = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("sculk_replaceable_world_gen"), Material.class);
+    @Nullable Tag<Material> SCULK_REPLACEABLE_WORLD_GEN = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("sculk_replaceable_world_gen"), Material.class);
     /**
      * Vanilla block tag representing all blocks which can be replaced by
      * ancient cities.
      */
-    Tag<Material> ANCIENT_CITY_REPLACEABLE = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("ancient_city_replaceable"), Material.class);
+    @Nullable Tag<Material> ANCIENT_CITY_REPLACEABLE = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("ancient_city_replaceable"), Material.class);
     /**
      * Vanilla block tag representing all blocks which animals will spawn on.
      */
-    Tag<Material> ANIMALS_SPAWNABLE_ON = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("animals_spawnable_on"), Material.class);
+    @Nullable Tag<Material> ANIMALS_SPAWNABLE_ON = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("animals_spawnable_on"), Material.class);
     /**
      * Vanilla block tag representing all blocks which axolotls will spawn on.
      */
-    Tag<Material> AXOLOTLS_SPAWNABLE_ON = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("axolotls_spawnable_on"), Material.class);
+    @Nullable Tag<Material> AXOLOTLS_SPAWNABLE_ON = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("axolotls_spawnable_on"), Material.class);
     /**
      * Vanilla block tag representing all blocks which goats will spawn on.
      */
-    Tag<Material> GOATS_SPAWNABLE_ON = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("goats_spawnable_on"), Material.class);
+    @Nullable Tag<Material> GOATS_SPAWNABLE_ON = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("goats_spawnable_on"), Material.class);
     /**
      * Vanilla block tag representing all blocks which mooshrooms will spawn on.
      */
-    Tag<Material> MOOSHROOMS_SPAWNABLE_ON = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("mooshrooms_spawnable_on"), Material.class);
+    @Nullable Tag<Material> MOOSHROOMS_SPAWNABLE_ON = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("mooshrooms_spawnable_on"), Material.class);
     /**
      * Vanilla block tag representing all blocks which parrots will spawn on.
      */
-    Tag<Material> PARROTS_SPAWNABLE_ON = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("parrots_spawnable_on"), Material.class);
+    @Nullable Tag<Material> PARROTS_SPAWNABLE_ON = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("parrots_spawnable_on"), Material.class);
     /**
      * Vanilla block tag representing all blocks which polar bears will spawn
      * on.
      */
-    Tag<Material> POLAR_BEARS_SPAWNABLE_ON_ALTERNATE = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("polar_bears_spawnable_on_alternate"), Material.class);
+    @Nullable Tag<Material> POLAR_BEARS_SPAWNABLE_ON_ALTERNATE = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("polar_bears_spawnable_on_alternate"), Material.class);
     /**
      * @deprecated {@link #POLAR_BEARS_SPAWNABLE_ON_ALTERNATE}
      */
     @Deprecated
+    @Nullable
     Tag<Material> POLAR_BEARS_SPAWNABLE_ON_IN_FROZEN_OCEAN = POLAR_BEARS_SPAWNABLE_ON_ALTERNATE;
     /**
      * Vanilla block tag representing all blocks which rabbits will spawn on.
      */
-    Tag<Material> RABBITS_SPAWNABLE_ON = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("rabbits_spawnable_on"), Material.class);
+    @Nullable Tag<Material> RABBITS_SPAWNABLE_ON = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("rabbits_spawnable_on"), Material.class);
     /**
      * Vanilla block tag representing all blocks which foxes will spawn on.
      */
-    Tag<Material> FOXES_SPAWNABLE_ON = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("foxes_spawnable_on"), Material.class);
+    @Nullable Tag<Material> FOXES_SPAWNABLE_ON = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("foxes_spawnable_on"), Material.class);
     /**
      * Vanilla block tag representing all blocks which wolves will spawn on.
      */
-    Tag<Material> WOLVES_SPAWNABLE_ON = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("wolves_spawnable_on"), Material.class);
+    @Nullable Tag<Material> WOLVES_SPAWNABLE_ON = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("wolves_spawnable_on"), Material.class);
     /**
      * Vanilla block tag representing all blocks which frogs will spawn on.
      */
-    Tag<Material> FROGS_SPAWNABLE_ON = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("frogs_spawnable_on"), Material.class);
+    @Nullable Tag<Material> FROGS_SPAWNABLE_ON = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("frogs_spawnable_on"), Material.class);
     /**
      * Vanilla block tag representing all blocks which azaleas will grow on.
      */
-    Tag<Material> AZALEA_GROWS_ON = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("azalea_grows_on"), Material.class);
+    @Nullable Tag<Material> AZALEA_GROWS_ON = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("azalea_grows_on"), Material.class);
     /**
      * Vanilla block tag representing all plant blocks which may be replaced.
      */
-    Tag<Material> REPLACEABLE_PLANTS = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("replaceable_plants"), Material.class);
+    @Nullable Tag<Material> REPLACEABLE_PLANTS = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("replaceable_plants"), Material.class);
     /**
      * Vanilla block tag representing all blocks which may be converted to mud.
      */
-    Tag<Material> CONVERTABLE_TO_MUD = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("convertable_to_mud"), Material.class);
+    @Nullable Tag<Material> CONVERTABLE_TO_MUD = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("convertable_to_mud"), Material.class);
     /**
      * Vanilla block tag representing all blocks which mangrove logs can grow
      * through.
      */
-    Tag<Material> MANGROVE_LOGS_CAN_GROW_THROUGH = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("mangrove_logs_can_grow_through"), Material.class);
+    @Nullable Tag<Material> MANGROVE_LOGS_CAN_GROW_THROUGH = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("mangrove_logs_can_grow_through"), Material.class);
     /**
      * Vanilla block tag representing all blocks which mangrove roots can grow
      * through.
      */
-    Tag<Material> MANGROVE_ROOTS_CAN_GROW_THROUGH = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("mangrove_roots_can_grow_through"), Material.class);
+    @Nullable Tag<Material> MANGROVE_ROOTS_CAN_GROW_THROUGH = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("mangrove_roots_can_grow_through"), Material.class);
     /**
      * Vanilla block tag representing all blocks which dead bushes may be placed
      * on.
      */
-    Tag<Material> DEAD_BUSH_MAY_PLACE_ON = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("dead_bush_may_place_on"), Material.class);
+    @Nullable Tag<Material> DEAD_BUSH_MAY_PLACE_ON = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("dead_bush_may_place_on"), Material.class);
     /**
      * Vanilla block tag representing all blocks which snap dropped goat horns.
      */
-    Tag<Material> SNAPS_GOAT_HORN = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("snaps_goat_horn"), Material.class);
+    @Nullable Tag<Material> SNAPS_GOAT_HORN = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("snaps_goat_horn"), Material.class);
     /**
      * Vanilla block tag representing blocks which snow cannot survive on.
      */
-    Tag<Material> SNOW_LAYER_CANNOT_SURVIVE_ON = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("snow_layer_cannot_survive_on"), Material.class);
+    @Nullable Tag<Material> SNOW_LAYER_CANNOT_SURVIVE_ON = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("snow_layer_cannot_survive_on"), Material.class);
     /**
      * Vanilla block tag representing blocks which snow can survive on.
      */
-    Tag<Material> SNOW_LAYER_CAN_SURVIVE_ON = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("snow_layer_can_survive_on"), Material.class);
+    @Nullable Tag<Material> SNOW_LAYER_CAN_SURVIVE_ON = Bukkit.getTag(REGISTRY_BLOCKS, NamespacedKey.minecraft("snow_layer_can_survive_on"), Material.class);
     /**
      * Vanilla block tag representing blocks which cannot be dismounted into.
      */
@@ -691,31 +695,31 @@ public interface Tag<T extends Keyed> extends Keyed {
     /**
      * Vanilla item tag representing all items loved by piglins.
      */
-    Tag<Material> ITEMS_PIGLIN_LOVED = Bukkit.getTag(REGISTRY_ITEMS, NamespacedKey.minecraft("piglin_loved"), Material.class);
+    @Nullable Tag<Material> ITEMS_PIGLIN_LOVED = Bukkit.getTag(REGISTRY_ITEMS, NamespacedKey.minecraft("piglin_loved"), Material.class);
     /**
      * Vanilla item tag representing all items ignored by piglin babies.
      */
-    Tag<Material> IGNORED_BY_PIGLIN_BABIES = Bukkit.getTag(REGISTRY_ITEMS, NamespacedKey.minecraft("ignored_by_piglin_babies"), Material.class);
+    @Nullable Tag<Material> IGNORED_BY_PIGLIN_BABIES = Bukkit.getTag(REGISTRY_ITEMS, NamespacedKey.minecraft("ignored_by_piglin_babies"), Material.class);
     /**
      * Vanilla item tag representing all piglin food.
      */
-    Tag<Material> PIGLIN_FOOD = Bukkit.getTag(REGISTRY_ITEMS, NamespacedKey.minecraft("piglin_food"), Material.class);
+    @Nullable Tag<Material> PIGLIN_FOOD = Bukkit.getTag(REGISTRY_ITEMS, NamespacedKey.minecraft("piglin_food"), Material.class);
     /**
      * Vanilla item tag representing all fox food.
      */
-    Tag<Material> FOX_FOOD = Bukkit.getTag(REGISTRY_ITEMS, NamespacedKey.minecraft("fox_food"), Material.class);
+    @Nullable Tag<Material> FOX_FOOD = Bukkit.getTag(REGISTRY_ITEMS, NamespacedKey.minecraft("fox_food"), Material.class);
     /**
      * Vanilla item tag representing all banner items.
      */
-    Tag<Material> ITEMS_BANNERS = Bukkit.getTag(REGISTRY_ITEMS, NamespacedKey.minecraft("banners"), Material.class);
+    @Nullable Tag<Material> ITEMS_BANNERS = Bukkit.getTag(REGISTRY_ITEMS, NamespacedKey.minecraft("banners"), Material.class);
     /**
      * Vanilla item tag representing all boat items.
      */
-    Tag<Material> ITEMS_BOATS = Bukkit.getTag(REGISTRY_ITEMS, NamespacedKey.minecraft("boats"), Material.class);
+    @Nullable Tag<Material> ITEMS_BOATS = Bukkit.getTag(REGISTRY_ITEMS, NamespacedKey.minecraft("boats"), Material.class);
     /**
      * Vanilla item tag representing all chest boat items.
      */
-    Tag<Material> ITEMS_CHEST_BOATS = Bukkit.getTag(REGISTRY_ITEMS, NamespacedKey.minecraft("chest_boats"), Material.class);
+    @Nullable Tag<Material> ITEMS_CHEST_BOATS = Bukkit.getTag(REGISTRY_ITEMS, NamespacedKey.minecraft("chest_boats"), Material.class);
     // Paper start
     /**
      * Vanilla item tag representing all non-flammable wood items.
@@ -725,27 +729,27 @@ public interface Tag<T extends Keyed> extends Keyed {
     /**
      * Vanilla item tag representing all fish items.
      */
-    Tag<Material> ITEMS_FISHES = Bukkit.getTag(REGISTRY_ITEMS, NamespacedKey.minecraft("fishes"), Material.class);
+    @Nullable Tag<Material> ITEMS_FISHES = Bukkit.getTag(REGISTRY_ITEMS, NamespacedKey.minecraft("fishes"), Material.class);
     /**
      * Vanilla item tag representing all music disc items.
      */
-    Tag<Material> ITEMS_MUSIC_DISCS = Bukkit.getTag(REGISTRY_ITEMS, NamespacedKey.minecraft("music_discs"), Material.class);
+    @Nullable Tag<Material> ITEMS_MUSIC_DISCS = Bukkit.getTag(REGISTRY_ITEMS, NamespacedKey.minecraft("music_discs"), Material.class);
     /**
      * Vanilla item tag representing all music disc items dropped by creepers.
      */
-    Tag<Material> ITEMS_CREEPER_DROP_MUSIC_DISCS = Bukkit.getTag(REGISTRY_ITEMS, NamespacedKey.minecraft("creeper_drop_music_discs"), Material.class);
+    @Nullable Tag<Material> ITEMS_CREEPER_DROP_MUSIC_DISCS = Bukkit.getTag(REGISTRY_ITEMS, NamespacedKey.minecraft("creeper_drop_music_discs"), Material.class);
     /**
      * Vanilla item tag representing all coal items.
      */
-    Tag<Material> ITEMS_COALS = Bukkit.getTag(REGISTRY_ITEMS, NamespacedKey.minecraft("coals"), Material.class);
+    @Nullable Tag<Material> ITEMS_COALS = Bukkit.getTag(REGISTRY_ITEMS, NamespacedKey.minecraft("coals"), Material.class);
     /**
      * Vanilla item tag representing all arrow items.
      */
-    Tag<Material> ITEMS_ARROWS = Bukkit.getTag(REGISTRY_ITEMS, NamespacedKey.minecraft("arrows"), Material.class);
+    @Nullable Tag<Material> ITEMS_ARROWS = Bukkit.getTag(REGISTRY_ITEMS, NamespacedKey.minecraft("arrows"), Material.class);
     /**
      * Vanilla item tag representing all books that may be placed on lecterns.
      */
-    Tag<Material> ITEMS_LECTERN_BOOKS = Bukkit.getTag(REGISTRY_ITEMS, NamespacedKey.minecraft("lectern_books"), Material.class);
+    @Nullable Tag<Material> ITEMS_LECTERN_BOOKS = Bukkit.getTag(REGISTRY_ITEMS, NamespacedKey.minecraft("lectern_books"), Material.class);
     /**
      * Vanilla item tag representing all books that may be placed on bookshelves.
      */
@@ -754,19 +758,19 @@ public interface Tag<T extends Keyed> extends Keyed {
     /**
      * Vanilla item tag representing all items that may be placed in beacons.
      */
-    Tag<Material> ITEMS_BEACON_PAYMENT_ITEMS = Bukkit.getTag(REGISTRY_ITEMS, NamespacedKey.minecraft("beacon_payment_items"), Material.class);
+    @Nullable Tag<Material> ITEMS_BEACON_PAYMENT_ITEMS = Bukkit.getTag(REGISTRY_ITEMS, NamespacedKey.minecraft("beacon_payment_items"), Material.class);
     /**
      * Vanilla item tag representing all stone tool materials.
      */
-    Tag<Material> ITEMS_STONE_TOOL_MATERIALS = Bukkit.getTag(REGISTRY_ITEMS, NamespacedKey.minecraft("stone_tool_materials"), Material.class);
+    @Nullable Tag<Material> ITEMS_STONE_TOOL_MATERIALS = Bukkit.getTag(REGISTRY_ITEMS, NamespacedKey.minecraft("stone_tool_materials"), Material.class);
     /**
      * Vanilla item tag representing all furnace materials.
      */
-    Tag<Material> ITEMS_FURNACE_MATERIALS = Bukkit.getTag(REGISTRY_ITEMS, NamespacedKey.minecraft("furnace_materials"), Material.class);
+    @Nullable Tag<Material> ITEMS_FURNACE_MATERIALS = Bukkit.getTag(REGISTRY_ITEMS, NamespacedKey.minecraft("furnace_materials"), Material.class);
     /**
      * Vanilla item tag representing all compasses.
      */
-    Tag<Material> ITEMS_COMPASSES = Bukkit.getTag(REGISTRY_ITEMS, NamespacedKey.minecraft("compasses"), Material.class);
+    @Nullable Tag<Material> ITEMS_COMPASSES = Bukkit.getTag(REGISTRY_ITEMS, NamespacedKey.minecraft("compasses"), Material.class);
     /**
      * Vanilla item tag representing all hanging signs.
      */
@@ -781,16 +785,16 @@ public interface Tag<T extends Keyed> extends Keyed {
      * Vanilla item tag representing all items that confer freeze immunity on
      * the wearer.
      */
-    Tag<Material> FREEZE_IMMUNE_WEARABLES = Bukkit.getTag(REGISTRY_ITEMS, NamespacedKey.minecraft("freeze_immune_wearables"), Material.class);
+    @Nullable Tag<Material> FREEZE_IMMUNE_WEARABLES = Bukkit.getTag(REGISTRY_ITEMS, NamespacedKey.minecraft("freeze_immune_wearables"), Material.class);
     /**
      * Vanilla item tag representing all items which tempt axolotls.
      */
-    Tag<Material> AXOLOTL_TEMPT_ITEMS = Bukkit.getTag(REGISTRY_ITEMS, NamespacedKey.minecraft("axolotl_tempt_items"), Material.class);
+    @Nullable Tag<Material> AXOLOTL_TEMPT_ITEMS = Bukkit.getTag(REGISTRY_ITEMS, NamespacedKey.minecraft("axolotl_tempt_items"), Material.class);
     /**
      * Vanilla item tag representing all items which are preferred for
      * harvesting clusters (unused).
      */
-    Tag<Material> CLUSTER_MAX_HARVESTABLES = Bukkit.getTag(REGISTRY_ITEMS, NamespacedKey.minecraft("cluster_max_harvestables"), Material.class);
+    @Nullable Tag<Material> CLUSTER_MAX_HARVESTABLES = Bukkit.getTag(REGISTRY_ITEMS, NamespacedKey.minecraft("cluster_max_harvestables"), Material.class);
     /**
      * Key for the built in fluid registry.
      */
@@ -798,11 +802,11 @@ public interface Tag<T extends Keyed> extends Keyed {
     /**
      * Vanilla fluid tag representing lava and flowing lava.
      */
-    Tag<Fluid> FLUIDS_LAVA = Bukkit.getTag(REGISTRY_FLUIDS, NamespacedKey.minecraft("lava"), Fluid.class);
+    @Nullable Tag<Fluid> FLUIDS_LAVA = Bukkit.getTag(REGISTRY_FLUIDS, NamespacedKey.minecraft("lava"), Fluid.class);
     /**
      * Vanilla fluid tag representing water and flowing water.
      */
-    Tag<Fluid> FLUIDS_WATER = Bukkit.getTag(REGISTRY_FLUIDS, NamespacedKey.minecraft("water"), Fluid.class);
+    @Nullable Tag<Fluid> FLUIDS_WATER = Bukkit.getTag(REGISTRY_FLUIDS, NamespacedKey.minecraft("water"), Fluid.class);
     /**
      * Key for the built in entity registry.
      */
@@ -810,47 +814,47 @@ public interface Tag<T extends Keyed> extends Keyed {
     /**
      * Vanilla tag representing skeletons.
      */
-    Tag<EntityType> ENTITY_TYPES_SKELETONS = Bukkit.getTag(REGISTRY_ENTITY_TYPES, NamespacedKey.minecraft("skeletons"), EntityType.class);
+    @Nullable Tag<EntityType> ENTITY_TYPES_SKELETONS = Bukkit.getTag(REGISTRY_ENTITY_TYPES, NamespacedKey.minecraft("skeletons"), EntityType.class);
     /**
      * Vanilla tag representing raiders.
      */
-    Tag<EntityType> ENTITY_TYPES_RAIDERS = Bukkit.getTag(REGISTRY_ENTITY_TYPES, NamespacedKey.minecraft("raiders"), EntityType.class);
+    @Nullable Tag<EntityType> ENTITY_TYPES_RAIDERS = Bukkit.getTag(REGISTRY_ENTITY_TYPES, NamespacedKey.minecraft("raiders"), EntityType.class);
     /**
      * Vanilla tag representing entities which can live in beehives.
      */
-    Tag<EntityType> ENTITY_TYPES_BEEHIVE_INHABITORS = Bukkit.getTag(REGISTRY_ENTITY_TYPES, NamespacedKey.minecraft("beehive_inhabitors"), EntityType.class);
+    @Nullable Tag<EntityType> ENTITY_TYPES_BEEHIVE_INHABITORS = Bukkit.getTag(REGISTRY_ENTITY_TYPES, NamespacedKey.minecraft("beehive_inhabitors"), EntityType.class);
     /**
      * Vanilla tag representing arrows.
      */
-    Tag<EntityType> ENTITY_TYPES_ARROWS = Bukkit.getTag(REGISTRY_ENTITY_TYPES, NamespacedKey.minecraft("arrows"), EntityType.class);
+    @Nullable Tag<EntityType> ENTITY_TYPES_ARROWS = Bukkit.getTag(REGISTRY_ENTITY_TYPES, NamespacedKey.minecraft("arrows"), EntityType.class);
     /**
      * Vanilla tag representing projectiles.
      */
-    Tag<EntityType> ENTITY_TYPES_IMPACT_PROJECTILES = Bukkit.getTag(REGISTRY_ENTITY_TYPES, NamespacedKey.minecraft("impact_projectiles"), EntityType.class);
+    @Nullable Tag<EntityType> ENTITY_TYPES_IMPACT_PROJECTILES = Bukkit.getTag(REGISTRY_ENTITY_TYPES, NamespacedKey.minecraft("impact_projectiles"), EntityType.class);
     /**
      * Vanilla tag representing mobs which can walk on powder snow.
      */
-    Tag<EntityType> ENTITY_TYPES_POWDER_SNOW_WALKABLE_MOBS = Bukkit.getTag(REGISTRY_ENTITY_TYPES, NamespacedKey.minecraft("powder_snow_walkable_mobs"), EntityType.class);
+    @Nullable Tag<EntityType> ENTITY_TYPES_POWDER_SNOW_WALKABLE_MOBS = Bukkit.getTag(REGISTRY_ENTITY_TYPES, NamespacedKey.minecraft("powder_snow_walkable_mobs"), EntityType.class);
     /**
      * Vanilla tag representing which entities axolotls are always hostile to.
      */
-    Tag<EntityType> ENTITY_TYPES_AXOLOTL_ALWAYS_HOSTILES = Bukkit.getTag(REGISTRY_ENTITY_TYPES, NamespacedKey.minecraft("axolotl_always_hostiles"), EntityType.class);
+    @Nullable Tag<EntityType> ENTITY_TYPES_AXOLOTL_ALWAYS_HOSTILES = Bukkit.getTag(REGISTRY_ENTITY_TYPES, NamespacedKey.minecraft("axolotl_always_hostiles"), EntityType.class);
     /**
      * Vanilla tag representing axolotl targets.
      */
-    Tag<EntityType> ENTITY_TYPES_AXOLOTL_HUNT_TARGETS = Bukkit.getTag(REGISTRY_ENTITY_TYPES, NamespacedKey.minecraft("axolotl_hunt_targets"), EntityType.class);
+    @Nullable Tag<EntityType> ENTITY_TYPES_AXOLOTL_HUNT_TARGETS = Bukkit.getTag(REGISTRY_ENTITY_TYPES, NamespacedKey.minecraft("axolotl_hunt_targets"), EntityType.class);
     /**
      * Vanilla tag representing entities immune from freezing.
      */
-    Tag<EntityType> ENTITY_TYPES_FREEZE_IMMUNE_ENTITY_TYPES = Bukkit.getTag(REGISTRY_ENTITY_TYPES, NamespacedKey.minecraft("freeze_immune_entity_types"), EntityType.class);
+    @Nullable Tag<EntityType> ENTITY_TYPES_FREEZE_IMMUNE_ENTITY_TYPES = Bukkit.getTag(REGISTRY_ENTITY_TYPES, NamespacedKey.minecraft("freeze_immune_entity_types"), EntityType.class);
     /**
      * Vanilla tag representing entities extra susceptible to freezing.
      */
-    Tag<EntityType> ENTITY_TYPES_FREEZE_HURTS_EXTRA_TYPES = Bukkit.getTag(REGISTRY_ENTITY_TYPES, NamespacedKey.minecraft("freeze_hurts_extra_types"), EntityType.class);
+    @Nullable Tag<EntityType> ENTITY_TYPES_FREEZE_HURTS_EXTRA_TYPES = Bukkit.getTag(REGISTRY_ENTITY_TYPES, NamespacedKey.minecraft("freeze_hurts_extra_types"), EntityType.class);
     /**
      * Vanilla tag representing entities which can be eaten by frogs.
      */
-    Tag<EntityType> ENTITY_TYPES_FROG_FOOD = Bukkit.getTag(REGISTRY_ENTITY_TYPES, NamespacedKey.minecraft("frog_food"), EntityType.class);
+    @Nullable Tag<EntityType> ENTITY_TYPES_FROG_FOOD = Bukkit.getTag(REGISTRY_ENTITY_TYPES, NamespacedKey.minecraft("frog_food"), EntityType.class);
     // Paper start
     /**
      * Key for the built-in entity registry
@@ -863,30 +867,35 @@ public interface Tag<T extends Keyed> extends Keyed {
      * @deprecated use {@link #ENTITY_TYPES_ARROWS}
      */
     @Deprecated(forRemoval = true)
+    @Nullable
     Tag<EntityType> ARROWS = ENTITY_TYPES_ARROWS;
     /**
      * Vanilla entity tag representing entities that live in beehives
      * @deprecated use {@link #ENTITY_TYPES_BEEHIVE_INHABITORS}
      */
     @Deprecated(forRemoval = true)
+    @Nullable
     Tag<EntityType> BEEHIVE_INHABITORS = ENTITY_TYPES_BEEHIVE_INHABITORS;
     /**
      * Vanilla entity tag representing projectiles that impact
      * @deprecated use {@link #ENTITY_TYPES_IMPACT_PROJECTILES}
      */
     @Deprecated(forRemoval = true)
+    @Nullable
     Tag<EntityType> IMPACT_PROJECTILES = ENTITY_TYPES_IMPACT_PROJECTILES;
     /**
      * Vanilla entity tag for village raiders
      * @deprecated use {@link #ENTITY_TYPES_RAIDERS}
      */
     @Deprecated(forRemoval = true)
+    @Nullable
     Tag<EntityType> RAIDERS = ENTITY_TYPES_RAIDERS;
     /**
      * Vanilla entity tag for skeleton types
      * @deprecated use {@link #ENTITY_TYPES_SKELETONS}
      */
     @Deprecated(forRemoval = true)
+    @Nullable
     Tag<EntityType> SKELETONS = ENTITY_TYPES_SKELETONS;
 
     String REGISTRY_GAME_EVENTS = "game_events";
@@ -894,12 +903,12 @@ public interface Tag<T extends Keyed> extends Keyed {
     /**
      * Tag for game events that trigger sculk sensors
      */
-    Tag<GameEvent> GAME_EVENT_VIBRATIONS = Bukkit.getTag(REGISTRY_GAME_EVENTS, NamespacedKey.minecraft("vibrations"), GameEvent.class);
+    @Nullable Tag<GameEvent> GAME_EVENT_VIBRATIONS = Bukkit.getTag(REGISTRY_GAME_EVENTS, NamespacedKey.minecraft("vibrations"), GameEvent.class);
 
     /**
      * Tag for game events that are ignored if the entity is sneaking
      */
-    Tag<GameEvent> GAME_EVENT_IGNORE_VIBRATIONS_SNEAKING = Bukkit.getTag(REGISTRY_GAME_EVENTS, NamespacedKey.minecraft("ignore_vibrations_sneaking"), GameEvent.class);
+    @Nullable Tag<GameEvent> GAME_EVENT_IGNORE_VIBRATIONS_SNEAKING = Bukkit.getTag(REGISTRY_GAME_EVENTS, NamespacedKey.minecraft("ignore_vibrations_sneaking"), GameEvent.class);
     // Paper end
 
     /**
diff --git a/src/main/java/org/bukkit/UnsafeValues.java b/src/main/java/org/bukkit/UnsafeValues.java
index 854be548e5a645e7312e6e9390d5255f8b1d61e6..c4c0d8f4a06b23e0c75ce81124a330bfe7ad7bf6 100644
--- a/src/main/java/org/bukkit/UnsafeValues.java
+++ b/src/main/java/org/bukkit/UnsafeValues.java
@@ -11,6 +11,9 @@ import org.bukkit.inventory.ItemStack;
 import org.bukkit.material.MaterialData;
 import org.bukkit.plugin.InvalidPluginException;
 import org.bukkit.plugin.PluginDescriptionFile;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 /**
  * This interface provides value conversions that may be specific to a
@@ -70,7 +73,7 @@ public interface UnsafeValues {
      * @param advancement representation of the advancement
      * @return the loaded advancement or null if an error occurred
      */
-    Advancement loadAdvancement(NamespacedKey key, String advancement);
+    @Nullable Advancement loadAdvancement(NamespacedKey key, String advancement);
 
     /**
      * Delete an advancement which was loaded and saved by
@@ -99,13 +102,13 @@ public interface UnsafeValues {
     /**
      * Called once by the version command on first use, then cached.
      */
-    default com.destroystokyo.paper.util.VersionFetcher getVersionFetcher() {
+    default com.destroystokyo.paper.util.@NotNull VersionFetcher getVersionFetcher() {
         return new com.destroystokyo.paper.util.VersionFetcher.DummyVersionFetcher();
     }
 
     boolean isSupportedApiVersion(String apiVersion);
 
-    static boolean isLegacyPlugin(org.bukkit.plugin.Plugin plugin) {
+    static boolean isLegacyPlugin(org.bukkit.plugin.@NotNull Plugin plugin) {
         return !Bukkit.getUnsafe().isSupportedApiVersion(plugin.getDescription().getAPIVersion());
     }
 
diff --git a/src/main/java/org/bukkit/Vibration.java b/src/main/java/org/bukkit/Vibration.java
index bbc01e7c192ae6689c301670047ff114306c57cb..9b1143afb0553f618d7c115b0f18e91fb67277dc 100644
--- a/src/main/java/org/bukkit/Vibration.java
+++ b/src/main/java/org/bukkit/Vibration.java
@@ -9,8 +9,8 @@ import org.jetbrains.annotations.NotNull;
  */
 public class Vibration {
 
-    private final Location origin;
-    private final Destination destination;
+    private final @NotNull Location origin;
+    private final @NotNull Destination destination;
     private final int arrivalTime;
 
     // Paper start
@@ -62,7 +62,7 @@ public class Vibration {
 
         public static class EntityDestination implements Destination {
 
-            private final Entity entity;
+            private final @NotNull Entity entity;
 
             public EntityDestination(@NotNull Entity entity) {
                 this.entity = entity;
@@ -76,7 +76,7 @@ public class Vibration {
 
         public static class BlockDestination implements Destination {
 
-            private final Location block;
+            private final @NotNull Location block;
 
             public BlockDestination(@NotNull Location block) {
                 this.block = block;
diff --git a/src/main/java/org/bukkit/WorldCreator.java b/src/main/java/org/bukkit/WorldCreator.java
index dc92ce261b9e67979da3f82cb75292ff980ad87e..b575a1fd5f346b43b98afa9e53f865332877f803 100644
--- a/src/main/java/org/bukkit/WorldCreator.java
+++ b/src/main/java/org/bukkit/WorldCreator.java
@@ -12,17 +12,17 @@ import org.jetbrains.annotations.Nullable;
  * Represents various types of options that may be used to create a world.
  */
 public class WorldCreator {
-    private final NamespacedKey key; // Paper
-    private final String name;
+    private final @NotNull NamespacedKey key; // Paper
+    private final @NotNull String name;
     private long seed;
-    private World.Environment environment = World.Environment.NORMAL;
-    private ChunkGenerator generator = null;
-    private BiomeProvider biomeProvider = null;
-    private WorldType type = WorldType.NORMAL;
+    private World.@NotNull Environment environment = World.Environment.NORMAL;
+    private @Nullable ChunkGenerator generator = null;
+    private @Nullable BiomeProvider biomeProvider = null;
+    private @Nullable WorldType type = WorldType.NORMAL;
     private boolean generateStructures = true;
-    private String generatorSettings = "";
+    private @NotNull String generatorSettings = "";
     private boolean hardcore = false;
-    private net.kyori.adventure.util.TriState keepSpawnLoaded = net.kyori.adventure.util.TriState.NOT_SET; // Paper
+    private net.kyori.adventure.util.@NotNull TriState keepSpawnLoaded = net.kyori.adventure.util.TriState.NOT_SET; // Paper
 
     /**
      * Creates an empty WorldCreationOptions for the given world name
@@ -34,7 +34,7 @@ public class WorldCreator {
         this(name, getWorldKey(name));
     }
 
-    private static NamespacedKey getWorldKey(String name) {
+    private static @NotNull NamespacedKey getWorldKey(@NotNull String name) {
         final String mainLevelName = Bukkit.getUnsafe().getMainLevelName();
         if (name.equals(mainLevelName)) {
             return NamespacedKey.minecraft("overworld");
diff --git a/src/main/java/org/bukkit/advancement/AdvancementDisplayType.java b/src/main/java/org/bukkit/advancement/AdvancementDisplayType.java
index f6e1a6c1bb7b99a391dec73c9707840214988fc6..b0ca529b01fda655957d92291f444e6e77e5764b 100644
--- a/src/main/java/org/bukkit/advancement/AdvancementDisplayType.java
+++ b/src/main/java/org/bukkit/advancement/AdvancementDisplayType.java
@@ -25,7 +25,7 @@ public enum AdvancementDisplayType {
      * Goal icons have a rounded icon frame.
      */
     GOAL(ChatColor.GREEN);
-    private final ChatColor color;
+    private final @NotNull ChatColor color;
 
     private AdvancementDisplayType(@NotNull ChatColor color) {
         this.color = color;
diff --git a/src/main/java/org/bukkit/attribute/Attribute.java b/src/main/java/org/bukkit/attribute/Attribute.java
index 107e36ef02a9481954bd770ce9a55a0b1e84be7a..28de1410c03f2c891dfd6ee2fc1e54fa4ee4daa5 100644
--- a/src/main/java/org/bukkit/attribute/Attribute.java
+++ b/src/main/java/org/bukkit/attribute/Attribute.java
@@ -62,9 +62,9 @@ public enum Attribute implements Keyed, net.kyori.adventure.translation.Translat
      */
     ZOMBIE_SPAWN_REINFORCEMENTS("zombie.spawn_reinforcements");
 
-    private final NamespacedKey key;
+    private final @NotNull NamespacedKey key;
 
-    private Attribute(String key) {
+    private Attribute(@NotNull String key) {
         this.key = NamespacedKey.minecraft(key);
     }
 
diff --git a/src/main/java/org/bukkit/attribute/AttributeModifier.java b/src/main/java/org/bukkit/attribute/AttributeModifier.java
index d124768378d6f0c5573f28ee815ea3886fe74868..5e09f95a9bcd840a03d4c41f82fec51550829284 100644
--- a/src/main/java/org/bukkit/attribute/AttributeModifier.java
+++ b/src/main/java/org/bukkit/attribute/AttributeModifier.java
@@ -16,11 +16,11 @@ import org.jetbrains.annotations.Nullable;
  */
 public class AttributeModifier implements ConfigurationSerializable {
 
-    private final UUID uuid;
-    private final String name;
+    private final @NotNull UUID uuid;
+    private final @NotNull String name;
     private final double amount;
-    private final Operation operation;
-    private final EquipmentSlot slot;
+    private final @NotNull Operation operation;
+    private final @Nullable EquipmentSlot slot;
 
     public AttributeModifier(@NotNull String name, double amount, @NotNull Operation operation) {
         this(UUID.randomUUID(), name, amount, operation);
@@ -127,7 +127,7 @@ public class AttributeModifier implements ConfigurationSerializable {
     }
 
     @Override
-    public String toString() {
+    public @NotNull String toString() {
         return "AttributeModifier{"
                 + "uuid=" + this.uuid.toString()
                 + ", name=" + this.name
diff --git a/src/main/java/org/bukkit/block/Biome.java b/src/main/java/org/bukkit/block/Biome.java
index d56e1b50dd7da18f40278cec4bfdc9414aae0be1..e95624915bc020603e7e3c4996abaeb35f4b486e 100644
--- a/src/main/java/org/bukkit/block/Biome.java
+++ b/src/main/java/org/bukkit/block/Biome.java
@@ -77,7 +77,7 @@ public enum Biome implements Keyed, net.kyori.adventure.translation.Translatable
      */
     CUSTOM;
 
-    private final NamespacedKey key;
+    private final @NotNull NamespacedKey key;
 
     private Biome() {
         this.key = NamespacedKey.minecraft(name().toLowerCase(Locale.ROOT));
diff --git a/src/main/java/org/bukkit/block/BlockFace.java b/src/main/java/org/bukkit/block/BlockFace.java
index fe83ed9bf6b6288991b044bb992bd8b2f00edc24..65140b80da08f2e70467790bac13e7defaa4e275 100644
--- a/src/main/java/org/bukkit/block/BlockFace.java
+++ b/src/main/java/org/bukkit/block/BlockFace.java
@@ -37,7 +37,7 @@ public enum BlockFace {
         this.modZ = modZ;
     }
 
-    private BlockFace(final BlockFace face1, final BlockFace face2) {
+    private BlockFace(final @NotNull BlockFace face1, final @NotNull BlockFace face2) {
         this.modX = face1.getModX() + face2.getModX();
         this.modY = face1.getModY() + face2.getModY();
         this.modZ = face1.getModZ() + face2.getModZ();
diff --git a/src/main/java/org/bukkit/block/PistonMoveReaction.java b/src/main/java/org/bukkit/block/PistonMoveReaction.java
index b90f5dc345ad2cdd3ae353dc57f42a14c231d18a..554e391174ed25d11ab08ff60db240d133cc3a45 100644
--- a/src/main/java/org/bukkit/block/PistonMoveReaction.java
+++ b/src/main/java/org/bukkit/block/PistonMoveReaction.java
@@ -2,6 +2,8 @@ package org.bukkit.block;
 
 import java.util.HashMap;
 import java.util.Map;
+
+import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
 /**
@@ -35,7 +37,7 @@ public enum PistonMoveReaction {
     PUSH_ONLY(4);
 
     private int id;
-    private static Map<Integer, PistonMoveReaction> byId = new HashMap<Integer, PistonMoveReaction>();
+    private static @NotNull Map<Integer, PistonMoveReaction> byId = new HashMap<Integer, PistonMoveReaction>();
     static {
         for (PistonMoveReaction reaction : PistonMoveReaction.values()) {
             byId.put(reaction.id, reaction);
diff --git a/src/main/java/org/bukkit/block/banner/Pattern.java b/src/main/java/org/bukkit/block/banner/Pattern.java
index 5c293ab0b7505267dda019c3e60d3b053c0fdd27..539028be80b7dde1dabd1af0e99a4e8c1ff096ca 100644
--- a/src/main/java/org/bukkit/block/banner/Pattern.java
+++ b/src/main/java/org/bukkit/block/banner/Pattern.java
@@ -7,6 +7,8 @@ import org.bukkit.DyeColor;
 import org.bukkit.configuration.serialization.ConfigurationSerializable;
 import org.bukkit.configuration.serialization.SerializableAs;
 import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 @SerializableAs("Pattern")
 public class Pattern implements ConfigurationSerializable {
@@ -14,8 +16,8 @@ public class Pattern implements ConfigurationSerializable {
     private static final String COLOR = "color";
     private static final String PATTERN = "pattern";
 
-    private final DyeColor color;
-    private final PatternType pattern;
+    private final @NotNull DyeColor color;
+    private final @Nullable PatternType pattern;
 
     /**
      * Creates a new pattern from the specified color and
@@ -39,7 +41,7 @@ public class Pattern implements ConfigurationSerializable {
         pattern = PatternType.getByIdentifier(getString(map, PATTERN));
     }
 
-    private static String getString(@NotNull Map<?, ?> map, @NotNull Object key) {
+    private static @NotNull String getString(@NotNull Map<?, ?> map, @NotNull Object key) {
         Object str = map.get(key);
         if (str instanceof String) {
             return (String) str;
@@ -85,7 +87,7 @@ public class Pattern implements ConfigurationSerializable {
     }
 
     @Override
-    public boolean equals(Object obj) {
+    public boolean equals(@Nullable Object obj) {
         if (obj == null) {
             return false;
         }
diff --git a/src/main/java/org/bukkit/command/Command.java b/src/main/java/org/bukkit/command/Command.java
index 608b541aef01f33891a492fff5b8400496832c3a..5bf4394eafe9b63a3fa4d97c2b3878b14648771b 100644
--- a/src/main/java/org/bukkit/command/Command.java
+++ b/src/main/java/org/bukkit/command/Command.java
@@ -28,11 +28,11 @@ public abstract class Command {
     private String label;
     private List<String> aliases;
     private List<String> activeAliases;
-    private CommandMap commandMap;
+    private @Nullable CommandMap commandMap;
     protected String description;
     protected String usageMessage;
-    private String permission;
-    private net.kyori.adventure.text.Component permissionMessage; // Paper
+    private @Nullable String permission;
+    private net.kyori.adventure.text.@Nullable Component permissionMessage; // Paper
     public co.aikar.timings.Timing timings; // Paper
     @NotNull public String getTimingName() {return getName();} // Paper
 
@@ -72,7 +72,7 @@ public abstract class Command {
      * @throws IllegalArgumentException if sender, alias, or args is null
      */
     @NotNull
-    public List<String> tabComplete(@NotNull CommandSender sender, @NotNull String alias, @NotNull String[] args) throws IllegalArgumentException {
+    public List<String> tabComplete(@NotNull CommandSender sender, @NotNull String alias, @NotNull String @NotNull [] args) throws IllegalArgumentException {
         return tabComplete0(sender, alias, args, null);
     }
 
@@ -89,12 +89,12 @@ public abstract class Command {
      * @throws IllegalArgumentException if sender, alias, or args is null
      */
     @NotNull
-    public List<String> tabComplete(@NotNull CommandSender sender, @NotNull String alias, @NotNull String[] args, @Nullable Location location) throws IllegalArgumentException {
+    public List<String> tabComplete(@NotNull CommandSender sender, @NotNull String alias, @NotNull String @NotNull [] args, @Nullable Location location) throws IllegalArgumentException {
         return tabComplete(sender, alias, args);
     }
 
     @NotNull
-    private List<String> tabComplete0(@NotNull CommandSender sender, @NotNull String alias, @NotNull String[] args, @Nullable Location location) throws IllegalArgumentException {
+    private List<String> tabComplete0(@NotNull CommandSender sender, @NotNull String alias, @NotNull String @NotNull [] args, @Nullable Location location) throws IllegalArgumentException {
         Preconditions.checkArgument(sender != null, "Sender cannot be null");
         Preconditions.checkArgument(args != null, "Arguments cannot be null");
         Preconditions.checkArgument(alias != null, "Alias cannot be null");
@@ -485,7 +485,7 @@ public abstract class Command {
     }
 
     @Override
-    public String toString() {
+    public @NotNull String toString() {
         return getClass().getName() + '(' + name + ')';
     }
 }
diff --git a/src/main/java/org/bukkit/command/FormattedCommandAlias.java b/src/main/java/org/bukkit/command/FormattedCommandAlias.java
index 9d4f553c04784cca63901a56a7aea62a5cae1d72..aeac65d883a7f650ad145871e88f114edbf0f7c6 100644
--- a/src/main/java/org/bukkit/command/FormattedCommandAlias.java
+++ b/src/main/java/org/bukkit/command/FormattedCommandAlias.java
@@ -17,7 +17,7 @@ public class FormattedCommandAlias extends Command {
     }
 
     @Override
-    public boolean execute(@NotNull CommandSender sender, @NotNull String commandLabel, @NotNull String[] args) {
+    public boolean execute(@NotNull CommandSender sender, @NotNull String commandLabel, @NotNull String @NotNull [] args) {
         boolean result = false;
         ArrayList<String> commands = new ArrayList<String>();
         for (String formatString : formatStrings) {
@@ -40,7 +40,7 @@ public class FormattedCommandAlias extends Command {
         return result;
     }
 
-    private String buildCommand(@NotNull CommandSender sender, @NotNull String formatString, @NotNull String[] args) { // Paper
+    private @NotNull String buildCommand(@NotNull CommandSender sender, @NotNull String formatString, @NotNull String @NotNull [] args) { // Paper
         if (formatString.contains("$sender")) { // Paper
             formatString = formatString.replaceAll(Pattern.quote("$sender"), Matcher.quoteReplacement(sender.getName())); // Paper
         } // Paper
diff --git a/src/main/java/org/bukkit/command/MessageCommandSender.java b/src/main/java/org/bukkit/command/MessageCommandSender.java
index 9d263ab3afb938c215c0b64d9171345fca6ceb2c..66b3932439759b2502affc07061e68b6c84e0dd2 100644
--- a/src/main/java/org/bukkit/command/MessageCommandSender.java
+++ b/src/main/java/org/bukkit/command/MessageCommandSender.java
@@ -19,7 +19,7 @@ import org.jetbrains.annotations.Nullable;
 public interface MessageCommandSender extends CommandSender {
 
     @Override
-    default void sendMessage(@NotNull String[] messages) {
+    default void sendMessage(@NotNull String @NotNull [] messages) {
         for (String message : messages) {
             sendMessage(message);
         }
@@ -31,7 +31,7 @@ public interface MessageCommandSender extends CommandSender {
     }
 
     @Override
-    default void sendMessage(@Nullable UUID sender, @NotNull String[] messages) {
+    default void sendMessage(@Nullable UUID sender, @NotNull String @NotNull [] messages) {
         for (String message : messages) {
             sendMessage(message);
         }
diff --git a/src/main/java/org/bukkit/command/PluginCommand.java b/src/main/java/org/bukkit/command/PluginCommand.java
index 1dbbc244309043b18c1d71707c4fb066c0d0e02d..d4d5fd7563500606e8d7447e9a0431aa1224fb47 100644
--- a/src/main/java/org/bukkit/command/PluginCommand.java
+++ b/src/main/java/org/bukkit/command/PluginCommand.java
@@ -10,9 +10,9 @@ import org.jetbrains.annotations.Nullable;
  * Represents a {@link Command} belonging to a plugin
  */
 public final class PluginCommand extends Command implements PluginIdentifiableCommand {
-    private final Plugin owningPlugin;
+    private final @NotNull Plugin owningPlugin;
     private CommandExecutor executor;
-    private TabCompleter completer;
+    private @Nullable TabCompleter completer;
 
     protected PluginCommand(@NotNull String name, @NotNull Plugin owner) {
         super(name);
@@ -127,7 +127,7 @@ public final class PluginCommand extends Command implements PluginIdentifiableCo
      */
     @NotNull
     @Override
-    public java.util.List<String> tabComplete(@NotNull CommandSender sender, @NotNull String alias, @NotNull String[] args) throws CommandException, IllegalArgumentException {
+    public java.util.List<String> tabComplete(@NotNull CommandSender sender, @NotNull String alias, String @Nullable [] args) throws CommandException, IllegalArgumentException {
         Preconditions.checkArgument(sender != null, "Sender cannot be null");
         Preconditions.checkArgument(args != null, "Arguments cannot be null");
         Preconditions.checkArgument(alias != null, "Alias cannot be null");
@@ -157,7 +157,7 @@ public final class PluginCommand extends Command implements PluginIdentifiableCo
     }
 
     @Override
-    public String toString() {
+    public @NotNull String toString() {
         StringBuilder stringBuilder = new StringBuilder(super.toString());
         stringBuilder.deleteCharAt(stringBuilder.length() - 1);
         stringBuilder.append(", ").append(owningPlugin.getDescription().getFullName()).append(')');
diff --git a/src/main/java/org/bukkit/command/SimpleCommandMap.java b/src/main/java/org/bukkit/command/SimpleCommandMap.java
index b8623575b1c1b565560c2dd6438190716845a652..832867887f99ce31fefe1f3c9225126bdc34b1c4 100644
--- a/src/main/java/org/bukkit/command/SimpleCommandMap.java
+++ b/src/main/java/org/bukkit/command/SimpleCommandMap.java
@@ -23,7 +23,7 @@ import org.jetbrains.annotations.Nullable;
 
 public class SimpleCommandMap implements CommandMap {
     protected final Map<String, Command> knownCommands = new HashMap<String, Command>();
-    private final Server server;
+    private final @NotNull Server server;
 
     public SimpleCommandMap(@NotNull final Server server) {
         this.server = server;
diff --git a/src/main/java/org/bukkit/command/defaults/HelpCommand.java b/src/main/java/org/bukkit/command/defaults/HelpCommand.java
index a1699aa93c62f70238822c446326ed46ea71db14..d3426fa3120e08d1f5fbcd2a813069e86864bfe7 100644
--- a/src/main/java/org/bukkit/command/defaults/HelpCommand.java
+++ b/src/main/java/org/bukkit/command/defaults/HelpCommand.java
@@ -32,7 +32,7 @@ public class HelpCommand extends BukkitCommand {
     }
 
     @Override
-    public boolean execute(@NotNull CommandSender sender, @NotNull String currentAlias, @NotNull String[] args) {
+    public boolean execute(@NotNull CommandSender sender, @NotNull String currentAlias, @NotNull String @NotNull [] args) {
         if (!testPermission(sender)) return true;
 
         String command;
@@ -111,7 +111,7 @@ public class HelpCommand extends BukkitCommand {
 
     @NotNull
     @Override
-    public List<String> tabComplete(@NotNull CommandSender sender, @NotNull String alias, @NotNull String[] args) {
+    public List<String> tabComplete(@NotNull CommandSender sender, @NotNull String alias, @NotNull String @NotNull [] args) {
         Preconditions.checkArgument(sender != null, "Sender cannot be null");
         Preconditions.checkArgument(args != null, "Arguments cannot be null");
         Preconditions.checkArgument(alias != null, "Alias cannot be null");
diff --git a/src/main/java/org/bukkit/command/defaults/ReloadCommand.java b/src/main/java/org/bukkit/command/defaults/ReloadCommand.java
index 3ec32b46264cfff857b50129b5e0fa5584943ec6..6df8b7182f1d4b3ddefb146c935805f7151434e3 100644
--- a/src/main/java/org/bukkit/command/defaults/ReloadCommand.java
+++ b/src/main/java/org/bukkit/command/defaults/ReloadCommand.java
@@ -19,7 +19,7 @@ public class ReloadCommand extends BukkitCommand {
     }
 
     @Override
-    public boolean execute(@NotNull CommandSender sender, @NotNull String currentAlias, @NotNull String[] args) { // Paper
+    public boolean execute(@NotNull CommandSender sender, @NotNull String currentAlias, @NotNull String @NotNull [] args) { // Paper
         if (!testPermission(sender)) return true;
 
         // Paper start - Reload permissions.yml & require confirm
diff --git a/src/main/java/org/bukkit/command/defaults/VersionCommand.java b/src/main/java/org/bukkit/command/defaults/VersionCommand.java
index e40f017f87d6b6b4770501b106c76dc69ec69abb..694495b753ffbc1d4750d02852f18ded359b6e0b 100644
--- a/src/main/java/org/bukkit/command/defaults/VersionCommand.java
+++ b/src/main/java/org/bukkit/command/defaults/VersionCommand.java
@@ -25,6 +25,8 @@ import org.bukkit.plugin.Plugin;
 import org.bukkit.plugin.PluginDescriptionFile;
 import org.bukkit.util.StringUtil;
 import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 public class VersionCommand extends BukkitCommand {
     private VersionFetcher versionFetcher;
@@ -46,7 +48,7 @@ public class VersionCommand extends BukkitCommand {
     }
 
     @Override
-    public boolean execute(@NotNull CommandSender sender, @NotNull String currentAlias, @NotNull String[] args) {
+    public boolean execute(@NotNull CommandSender sender, @NotNull String currentAlias, @NotNull String @NotNull [] args) {
         if (!testPermission(sender)) return true;
 
         if (args.length == 0) {
@@ -136,7 +138,7 @@ public class VersionCommand extends BukkitCommand {
 
     @NotNull
     @Override
-    public List<String> tabComplete(@NotNull CommandSender sender, @NotNull String alias, @NotNull String[] args) {
+    public List<String> tabComplete(@NotNull CommandSender sender, @NotNull String alias, @NotNull String @NotNull [] args) {
         Preconditions.checkArgument(sender != null, "Sender cannot be null");
         Preconditions.checkArgument(args != null, "Arguments cannot be null");
         Preconditions.checkArgument(alias != null, "Alias cannot be null");
@@ -156,7 +158,7 @@ public class VersionCommand extends BukkitCommand {
 
     private final ReentrantLock versionLock = new ReentrantLock();
     private boolean hasVersion = false;
-    private net.kyori.adventure.text.Component versionMessage = null; // Paper
+    private net.kyori.adventure.text.@Nullable Component versionMessage = null; // Paper
     private final Set<CommandSender> versionWaiters = new HashSet<CommandSender>();
     private boolean versionTaskStarted = false;
     private long lastCheck = 0;
diff --git a/src/main/java/org/bukkit/configuration/ConfigurationOptions.java b/src/main/java/org/bukkit/configuration/ConfigurationOptions.java
index 356bad6bc7878765fae9f98b4d907591733067dd..faf443bcd34845490fde2971a2992edb5d9828da 100644
--- a/src/main/java/org/bukkit/configuration/ConfigurationOptions.java
+++ b/src/main/java/org/bukkit/configuration/ConfigurationOptions.java
@@ -9,7 +9,7 @@ import org.jetbrains.annotations.NotNull;
 public class ConfigurationOptions {
     private char pathSeparator = '.';
     private boolean copyDefaults = false;
-    private final Configuration configuration;
+    private final @NotNull Configuration configuration;
 
     protected ConfigurationOptions(@NotNull Configuration configuration) {
         this.configuration = configuration;
diff --git a/src/main/java/org/bukkit/configuration/MemoryConfiguration.java b/src/main/java/org/bukkit/configuration/MemoryConfiguration.java
index 2eef233d1ea08b11581682e7dd5aacfaa320a9fe..ce5bcffba0ef2e63832f5f3f7d42a5595ab7ddd9 100644
--- a/src/main/java/org/bukkit/configuration/MemoryConfiguration.java
+++ b/src/main/java/org/bukkit/configuration/MemoryConfiguration.java
@@ -11,7 +11,7 @@ import org.jetbrains.annotations.Nullable;
  * This is useful for temporary Configurations for providing defaults.
  */
 public class MemoryConfiguration extends MemorySection implements Configuration {
-    protected Configuration defaults;
+    protected @Nullable Configuration defaults;
     protected MemoryConfigurationOptions options;
 
     /**
diff --git a/src/main/java/org/bukkit/configuration/MemorySection.java b/src/main/java/org/bukkit/configuration/MemorySection.java
index 90751edd742d9b8d2171c4b16891aa009e4b8dfe..cc4778f78398987d3b089432416f4a40bc4f5183 100644
--- a/src/main/java/org/bukkit/configuration/MemorySection.java
+++ b/src/main/java/org/bukkit/configuration/MemorySection.java
@@ -25,10 +25,10 @@ import org.jetbrains.annotations.Nullable;
  */
 public class MemorySection implements ConfigurationSection {
     protected final Map<String, SectionPathData> map = new LinkedHashMap<String, SectionPathData>();
-    private final Configuration root;
-    private final ConfigurationSection parent;
-    private final String path;
-    private final String fullPath;
+    private final @Nullable Configuration root;
+    private final @Nullable ConfigurationSection parent;
+    private final @NotNull String path;
+    private final @NotNull String fullPath;
 
     /**
      * Creates an empty MemorySection for use as a root {@link Configuration}
@@ -1031,7 +1031,7 @@ public class MemorySection implements ConfigurationSection {
     }
 
     @Override
-    public String toString() {
+    public @NotNull String toString() {
         Configuration root = getRoot();
         return new StringBuilder()
             .append(getClass().getSimpleName())
diff --git a/src/main/java/org/bukkit/configuration/SectionPathData.java b/src/main/java/org/bukkit/configuration/SectionPathData.java
index 54647c817b290719e0313c0f900542decbc873af..82e4c7d5268602e2e6be14f1b3ee06f760161568 100644
--- a/src/main/java/org/bukkit/configuration/SectionPathData.java
+++ b/src/main/java/org/bukkit/configuration/SectionPathData.java
@@ -7,7 +7,7 @@ import org.jetbrains.annotations.Nullable;
 
 final class SectionPathData {
 
-    private Object data;
+    private @Nullable Object data;
     private List<String> comments;
     private List<String> inlineComments;
 
diff --git a/src/main/java/org/bukkit/configuration/file/FileConfigurationOptions.java b/src/main/java/org/bukkit/configuration/file/FileConfigurationOptions.java
index 121dbbf163588690d0678ae73a6ab8edf82f8367..d96985148f8ab8ec1cd88fc528624761058f3afe 100644
--- a/src/main/java/org/bukkit/configuration/file/FileConfigurationOptions.java
+++ b/src/main/java/org/bukkit/configuration/file/FileConfigurationOptions.java
@@ -13,8 +13,8 @@ import org.jetbrains.annotations.Nullable;
  * FileConfiguration}
  */
 public class FileConfigurationOptions extends MemoryConfigurationOptions {
-    private List<String> header = Collections.emptyList();
-    private List<String> footer = Collections.emptyList();
+    private @NotNull List<String> header = Collections.emptyList();
+    private @NotNull List<String> footer = Collections.emptyList();
     // Paper start - add system prop for comment parsing
     private static final boolean PAPER_PARSE_COMMENTS_BY_DEFAULT = Boolean.parseBoolean(System.getProperty("Paper.parseYamlCommentsByDefault", "true"));
     private boolean parseComments = PAPER_PARSE_COMMENTS_BY_DEFAULT;
diff --git a/src/main/java/org/bukkit/configuration/file/YamlConfiguration.java b/src/main/java/org/bukkit/configuration/file/YamlConfiguration.java
index 9903be1739a5f8657f182b641e93d8b3480f3d57..5178612d563dba1f8f77d605ee11ab6e765b18c9 100644
--- a/src/main/java/org/bukkit/configuration/file/YamlConfiguration.java
+++ b/src/main/java/org/bukkit/configuration/file/YamlConfiguration.java
@@ -19,6 +19,7 @@ import org.bukkit.configuration.ConfigurationSection;
 import org.bukkit.configuration.InvalidConfigurationException;
 import org.bukkit.configuration.serialization.ConfigurationSerialization;
 import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
 import org.yaml.snakeyaml.DumperOptions;
 import org.yaml.snakeyaml.LoaderOptions;
 import org.yaml.snakeyaml.Yaml;
@@ -49,11 +50,11 @@ public class YamlConfiguration extends FileConfiguration {
      */
     @Deprecated
     protected static final String BLANK_CONFIG = "{}\n";
-    private final DumperOptions yamlDumperOptions;
-    private final LoaderOptions yamlLoaderOptions;
-    private final YamlConstructor constructor;
-    private final YamlRepresenter representer;
-    private final Yaml yaml;
+    private final @NotNull DumperOptions yamlDumperOptions;
+    private final @NotNull LoaderOptions yamlLoaderOptions;
+    private final @NotNull YamlConstructor constructor;
+    private final @NotNull YamlRepresenter representer;
+    private final @NotNull Yaml yaml;
 
     public YamlConfiguration() {
         constructor = new YamlConstructor();
@@ -124,7 +125,7 @@ public class YamlConfiguration extends FileConfiguration {
      *
      * @param node The root node of the yaml object
      */
-    private void adjustNodeComments(final MappingNode node) {
+    private void adjustNodeComments(final @NotNull MappingNode node) {
         if (node.getBlockComments() == null && !node.getValue().isEmpty()) {
             Node firstNode = node.getValue().get(0).getKeyNode();
             List<CommentLine> lines = firstNode.getBlockComments();
@@ -169,7 +170,7 @@ public class YamlConfiguration extends FileConfiguration {
         }
     }
 
-    private boolean hasSerializedTypeKey(MappingNode node) {
+    private boolean hasSerializedTypeKey(@NotNull MappingNode node) {
         for (NodeTuple nodeTuple : node.getValue()) {
             Node keyNode = nodeTuple.getKeyNode();
             if (!(keyNode instanceof ScalarNode)) continue;
@@ -181,7 +182,7 @@ public class YamlConfiguration extends FileConfiguration {
         return false;
     }
 
-    private MappingNode toNodeTree(@NotNull ConfigurationSection section) {
+    private @NotNull MappingNode toNodeTree(@NotNull ConfigurationSection section) {
         List<NodeTuple> nodeTuples = new ArrayList<>();
         for (Map.Entry<String, Object> entry : section.getValues(false).entrySet()) {
             Node key = representer.represent(entry.getKey());
@@ -204,7 +205,7 @@ public class YamlConfiguration extends FileConfiguration {
         return new MappingNode(Tag.MAP, nodeTuples, DumperOptions.FlowStyle.BLOCK);
     }
 
-    private List<String> getCommentLines(List<CommentLine> comments) {
+    private @NotNull List<String> getCommentLines(@Nullable List<CommentLine> comments) {
         List<String> lines = new ArrayList<>();
         if (comments != null) {
             for (CommentLine comment : comments) {
@@ -220,7 +221,7 @@ public class YamlConfiguration extends FileConfiguration {
         return lines;
     }
 
-    private List<CommentLine> getCommentLines(List<String> comments, CommentType commentType) {
+    private @NotNull List<CommentLine> getCommentLines(@NotNull List<String> comments, CommentType commentType) {
         List<CommentLine> lines = new ArrayList<CommentLine>();
         for (String comment : comments) {
             if (comment == null) {
@@ -242,7 +243,7 @@ public class YamlConfiguration extends FileConfiguration {
      * @param header The list of heading comments
      * @return The modified list
      */
-    private List<String> loadHeader(List<String> header) {
+    private @NotNull List<String> loadHeader(@NotNull List<String> header) {
         LinkedList<String> list = new LinkedList<>(header);
 
         if (!list.isEmpty()) {
@@ -263,7 +264,7 @@ public class YamlConfiguration extends FileConfiguration {
      * @param header The list of heading comments
      * @return The modified list
      */
-    private List<String> saveHeader(List<String> header) {
+    private @NotNull List<String> saveHeader(@NotNull List<String> header) {
         LinkedList<String> list = new LinkedList<>(header);
 
         if (!list.isEmpty()) {
diff --git a/src/main/java/org/bukkit/configuration/serialization/ConfigurationSerialization.java b/src/main/java/org/bukkit/configuration/serialization/ConfigurationSerialization.java
index 2c04706294fe405cc2f69b85d479d0b0b1766d55..9922eb98e3a223984534baa798181b11d04834ef 100644
--- a/src/main/java/org/bukkit/configuration/serialization/ConfigurationSerialization.java
+++ b/src/main/java/org/bukkit/configuration/serialization/ConfigurationSerialization.java
@@ -28,8 +28,8 @@ import org.jetbrains.annotations.Nullable;
  */
 public class ConfigurationSerialization {
     public static final String SERIALIZED_TYPE_KEY = "==";
-    private final Class<? extends ConfigurationSerializable> clazz;
-    private static Map<String, Class<? extends ConfigurationSerializable>> aliases = new HashMap<String, Class<? extends ConfigurationSerializable>>();
+    private final @NotNull Class<? extends ConfigurationSerializable> clazz;
+    private static @NotNull Map<String, Class<? extends ConfigurationSerializable>> aliases = new HashMap<String, Class<? extends ConfigurationSerializable>>();
 
     static {
         registerClass(Vector.class);
diff --git a/src/main/java/org/bukkit/conversations/Conversation.java b/src/main/java/org/bukkit/conversations/Conversation.java
index bf2407c838bc20197802687c150d513f4e86ed2b..8e5bd0330ee5f2f5447cb06bd9479f236acc4fda 100644
--- a/src/main/java/org/bukkit/conversations/Conversation.java
+++ b/src/main/java/org/bukkit/conversations/Conversation.java
@@ -35,9 +35,9 @@ import org.jetbrains.annotations.Nullable;
  */
 public class Conversation {
 
-    private Prompt firstPrompt;
+    private @Nullable Prompt firstPrompt;
     private boolean abandoned;
-    protected Prompt currentPrompt;
+    protected @Nullable Prompt currentPrompt;
     protected ConversationContext context;
     protected boolean modal;
     protected boolean localEchoEnabled;
diff --git a/src/main/java/org/bukkit/conversations/ConversationAbandonedEvent.java b/src/main/java/org/bukkit/conversations/ConversationAbandonedEvent.java
index 0d67fe0c00e886def63edf72c3af3e4e5b7b3ea2..6b4c4cf27c93a18b97058ebbfdba681a90de94e1 100644
--- a/src/main/java/org/bukkit/conversations/ConversationAbandonedEvent.java
+++ b/src/main/java/org/bukkit/conversations/ConversationAbandonedEvent.java
@@ -11,7 +11,7 @@ import org.jetbrains.annotations.Nullable;
 public class ConversationAbandonedEvent extends EventObject {
 
     private ConversationContext context;
-    private ConversationCanceller canceller;
+    private @Nullable ConversationCanceller canceller;
 
     public ConversationAbandonedEvent(@NotNull Conversation conversation) {
         this(conversation, null);
diff --git a/src/main/java/org/bukkit/conversations/ConversationContext.java b/src/main/java/org/bukkit/conversations/ConversationContext.java
index 5bc0d36fe2a0f0e8f1cd3fb077f6b2285d60cbf4..d05d1474241ed6fd2dfdf130b4482a5eb7f13696 100644
--- a/src/main/java/org/bukkit/conversations/ConversationContext.java
+++ b/src/main/java/org/bukkit/conversations/ConversationContext.java
@@ -12,9 +12,9 @@ import org.jetbrains.annotations.Nullable;
  * invocations.
  */
 public class ConversationContext {
-    private final Conversable forWhom;
-    private final Map<Object, Object> sessionData;
-    private final Plugin plugin;
+    private final @NotNull Conversable forWhom;
+    private final @NotNull Map<Object, Object> sessionData;
+    private final @Nullable Plugin plugin;
 
     /**
      * @param plugin The owning plugin.
diff --git a/src/main/java/org/bukkit/conversations/ConversationFactory.java b/src/main/java/org/bukkit/conversations/ConversationFactory.java
index 58009e1e7a9cbbba1b0db43cd81eddc19c710687..14d73e37fdb23872cc30bbb9332ec7d654637c2c 100644
--- a/src/main/java/org/bukkit/conversations/ConversationFactory.java
+++ b/src/main/java/org/bukkit/conversations/ConversationFactory.java
@@ -25,9 +25,9 @@ public class ConversationFactory {
     protected boolean isModal;
     protected boolean localEchoEnabled;
     protected ConversationPrefix prefix;
-    protected Prompt firstPrompt;
+    protected @Nullable Prompt firstPrompt;
     protected Map<Object, Object> initialSessionData;
-    protected String playerOnlyMessage;
+    protected @Nullable String playerOnlyMessage;
     protected List<ConversationCanceller> cancellers;
     protected List<ConversationAbandonedListener> abandonedListeners;
 
diff --git a/src/main/java/org/bukkit/conversations/Prompt.java b/src/main/java/org/bukkit/conversations/Prompt.java
index fcca208c0f31b41ab67323d0e77a8e3ecf9e78dd..f788dbaf355937d019f33b762671ec3f5dbb5c33 100644
--- a/src/main/java/org/bukkit/conversations/Prompt.java
+++ b/src/main/java/org/bukkit/conversations/Prompt.java
@@ -15,7 +15,7 @@ public interface Prompt extends Cloneable {
     /**
      * A convenience constant for indicating the end of a conversation.
      */
-    static final Prompt END_OF_CONVERSATION = null;
+    static final @Nullable Prompt END_OF_CONVERSATION = null;
 
     /**
      * Gets the text to display to the user when this prompt is first
@@ -24,8 +24,7 @@ public interface Prompt extends Cloneable {
      * @param context Context information about the conversation.
      * @return The text to display.
      */
-    @NotNull
-    String getPromptText(@NotNull ConversationContext context);
+    @Nullable String getPromptText(@NotNull ConversationContext context);
 
     /**
      * Checks to see if this prompt implementation should wait for user input
diff --git a/src/main/java/org/bukkit/enchantments/Enchantment.java b/src/main/java/org/bukkit/enchantments/Enchantment.java
index 69a048eb4e48c92db70c3d6b6aa4ae96326b9705..4360347c61b3b969d551e5a82c4d580e02b06722 100644
--- a/src/main/java/org/bukkit/enchantments/Enchantment.java
+++ b/src/main/java/org/bukkit/enchantments/Enchantment.java
@@ -213,7 +213,7 @@ public abstract class Enchantment implements Keyed, net.kyori.adventure.translat
     private static final Map<NamespacedKey, Enchantment> byKey = new HashMap<NamespacedKey, Enchantment>();
     private static final Map<String, Enchantment> byName = new HashMap<String, Enchantment>();
     private static boolean acceptingNew = true;
-    private final NamespacedKey key;
+    private final @NotNull NamespacedKey key;
 
     public Enchantment(@NotNull NamespacedKey key) {
         this.key = key;
@@ -350,7 +350,7 @@ public abstract class Enchantment implements Keyed, net.kyori.adventure.translat
     // Paper end
 
     @Override
-    public boolean equals(Object obj) {
+    public boolean equals(@Nullable Object obj) {
         if (obj == null) {
             return false;
         }
@@ -370,7 +370,7 @@ public abstract class Enchantment implements Keyed, net.kyori.adventure.translat
     }
 
     @Override
-    public String toString() {
+    public @NotNull String toString() {
         return "Enchantment[" + key + ", " + getName() + "]";
     }
 
@@ -440,7 +440,7 @@ public abstract class Enchantment implements Keyed, net.kyori.adventure.translat
      * @return Array of enchantments
      */
     @NotNull
-    public static Enchantment[] values() {
+    public static Enchantment @NotNull [] values() {
         return byName.values().toArray(new Enchantment[byName.size()]);
     }
 }
diff --git a/src/main/java/org/bukkit/entity/AbstractArrow.java b/src/main/java/org/bukkit/entity/AbstractArrow.java
index d173010d51d05928c35bb4bf5fbc08ce221ec474..bfcb013504b5010073f59c0636a7dfec16b5ea3a 100644
--- a/src/main/java/org/bukkit/entity/AbstractArrow.java
+++ b/src/main/java/org/bukkit/entity/AbstractArrow.java
@@ -205,7 +205,7 @@ public interface AbstractArrow extends Projectile {
      * @deprecated Use {@link Arrow#getPickupStatus()} as an upstream compatible replacement for this function
      */
     @Deprecated
-    default PickupRule getPickupRule() {
+    default @NotNull PickupRule getPickupRule() {
         return PickupRule.valueOf(this.getPickupStatus().name());
     }
 
@@ -216,7 +216,7 @@ public interface AbstractArrow extends Projectile {
      * @deprecated Use {@link Arrow#setPickupStatus(PickupStatus)} with {@link PickupStatus} as an upstream compatible replacement for this function
      */
     @Deprecated
-    default void setPickupRule(PickupRule rule) {
+    default void setPickupRule(@NotNull PickupRule rule) {
         this.setPickupStatus(PickupStatus.valueOf(rule.name()));
     }
 
diff --git a/src/main/java/org/bukkit/entity/ArmorStand.java b/src/main/java/org/bukkit/entity/ArmorStand.java
index 7530eb5d2a506e13e2bc7e189fd6e957c013cdf5..d5cfaf210bc9803e35e72b4bcb97e9e2cac75ab0 100644
--- a/src/main/java/org/bukkit/entity/ArmorStand.java
+++ b/src/main/java/org/bukkit/entity/ArmorStand.java
@@ -362,7 +362,7 @@ public interface ArmorStand extends LivingEntity {
     void setCanMove(boolean move);
 
     @Override
-    org.bukkit.inventory.@NotNull EntityEquipment getEquipment();
+    org.bukkit.inventory.@NotNull @Nullable EntityEquipment getEquipment();
 
     /**
      * Tests if this armor stand can tick.
diff --git a/src/main/java/org/bukkit/entity/Cat.java b/src/main/java/org/bukkit/entity/Cat.java
index bd74b47879b69b7a2e078a5aca460e5c97b0a919..e81ab3336b36236637420f7d732bb2a994367e43 100644
--- a/src/main/java/org/bukkit/entity/Cat.java
+++ b/src/main/java/org/bukkit/entity/Cat.java
@@ -57,7 +57,7 @@ public interface Cat extends Tameable, Sittable, io.papermc.paper.entity.CollarC
         ALL_BLACK;
 
         // Paper start
-        private final org.bukkit.NamespacedKey key;
+        private final org.bukkit.@NotNull NamespacedKey key;
 
         Type() {
             this.key = org.bukkit.NamespacedKey.minecraft(name().toLowerCase(java.util.Locale.ROOT));
diff --git a/src/main/java/org/bukkit/entity/EntityType.java b/src/main/java/org/bukkit/entity/EntityType.java
index b507b715f9b28b98e32f6589344a5066d1009f64..ba1ff1679d06da7fc8b8d633ce0da27d1777bba3 100644
--- a/src/main/java/org/bukkit/entity/EntityType.java
+++ b/src/main/java/org/bukkit/entity/EntityType.java
@@ -298,7 +298,7 @@ public enum EntityType implements Keyed, net.kyori.adventure.translation.Transla
     private final Class<? extends Entity> clazz;
     private final short typeId;
     private final boolean independent, living;
-    private final NamespacedKey key;
+    private final @Nullable NamespacedKey key;
 
     private static final Map<String, EntityType> NAME_MAP = new HashMap<String, EntityType>();
     private static final Map<Short, EntityType> ID_MAP = new HashMap<Short, EntityType>();
@@ -333,7 +333,7 @@ public enum EntityType implements Keyed, net.kyori.adventure.translation.Transla
         this(name, clazz, typeId, true);
     }
 
-    private EntityType(/*@Nullable*/ String name, /*@Nullable*/ Class<? extends Entity> clazz, int typeId, boolean independent) {
+    private EntityType(/*@Nullable*/ @Nullable String name, /*@Nullable*/ @Nullable Class<? extends Entity> clazz, int typeId, boolean independent) {
         this.name = name;
         this.clazz = clazz;
         this.typeId = (short) typeId;
diff --git a/src/main/java/org/bukkit/entity/FallingBlock.java b/src/main/java/org/bukkit/entity/FallingBlock.java
index ae8fab2395e56d25227b5877b8648510c73bf948..7156789ca999fc6e79e4aedc2a8315a0315e2406 100644
--- a/src/main/java/org/bukkit/entity/FallingBlock.java
+++ b/src/main/java/org/bukkit/entity/FallingBlock.java
@@ -3,6 +3,8 @@ package org.bukkit.entity;
 import org.bukkit.Material;
 import org.bukkit.block.data.BlockData;
 import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 /**
  * Represents a falling block
@@ -62,7 +64,7 @@ public interface FallingBlock extends Entity {
      * @deprecated replaced by {@link Entity#getOrigin()}
      */
     @Deprecated
-    default org.bukkit.Location getSourceLoc() {
+    default org.bukkit.@Nullable Location getSourceLoc() {
         return this.getOrigin();
     }
     // Paper Start - Auto expire setting
diff --git a/src/main/java/org/bukkit/entity/Frog.java b/src/main/java/org/bukkit/entity/Frog.java
index 0960bdbb3253bfe109dc6283244b8c9d95a850f7..51011abca1f40a07e1fca0df3c39129f5327eec3 100644
--- a/src/main/java/org/bukkit/entity/Frog.java
+++ b/src/main/java/org/bukkit/entity/Frog.java
@@ -58,7 +58,7 @@ public interface Frog extends Animals {
          * Cold (green) frog.
          */
         COLD;
-        private final NamespacedKey key;
+        private final @NotNull NamespacedKey key;
 
         private Variant() {
             this.key = NamespacedKey.minecraft(name().toLowerCase(Locale.ROOT));
diff --git a/src/main/java/org/bukkit/entity/HumanEntity.java b/src/main/java/org/bukkit/entity/HumanEntity.java
index 3b204144e2d245098b3dc23b8779f9ed817bb6d1..a4259804153e1eeade5c0799fb9ba79b7ece1653 100644
--- a/src/main/java/org/bukkit/entity/HumanEntity.java
+++ b/src/main/java/org/bukkit/entity/HumanEntity.java
@@ -24,7 +24,7 @@ public interface HumanEntity extends LivingEntity, AnimalTamer, InventoryHolder
 
     // Paper start
     @Override
-    org.bukkit.inventory.@NotNull EntityEquipment getEquipment();
+    org.bukkit.inventory.@NotNull @Nullable EntityEquipment getEquipment();
     // Paper end
 
     /**
diff --git a/src/main/java/org/bukkit/entity/Mob.java b/src/main/java/org/bukkit/entity/Mob.java
index d53de07b40d9cd63a9553d4b0ad442d526530b92..4c0924f41162da81c550554c95e0328a6a6fb360 100644
--- a/src/main/java/org/bukkit/entity/Mob.java
+++ b/src/main/java/org/bukkit/entity/Mob.java
@@ -12,7 +12,7 @@ public interface Mob extends LivingEntity, Lootable {
 
     // Paper start
     @Override
-    org.bukkit.inventory.@org.jetbrains.annotations.NotNull EntityEquipment getEquipment();
+    org.bukkit.inventory.@org.jetbrains.annotations.NotNull @Nullable EntityEquipment getEquipment();
 
     /**
      * Enables access to control the pathing of an Entity
diff --git a/src/main/java/org/bukkit/entity/Player.java b/src/main/java/org/bukkit/entity/Player.java
index de960716478477ce199526b8f860cfafa1541ee9..2c9feecc77c92762b822453617f37eb6a739220a 100644
--- a/src/main/java/org/bukkit/entity/Player.java
+++ b/src/main/java/org/bukkit/entity/Player.java
@@ -1044,7 +1044,7 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      * @param components the components to send
      */
     @Deprecated
-    public default void sendMessage(net.md_5.bungee.api.ChatMessageType position, net.md_5.bungee.api.chat.BaseComponent... components) {
+    public default void sendMessage(net.md_5.bungee.api.@NotNull ChatMessageType position, net.md_5.bungee.api.chat.BaseComponent... components) {
         spigot().sendMessage(position, components);
     }
 
diff --git a/src/main/java/org/bukkit/entity/TNTPrimed.java b/src/main/java/org/bukkit/entity/TNTPrimed.java
index 0813bd913c8fdb2001963ce3e82c07c2af105418..1024a4b36a84fb672c05b55066c0178b0e2c7c85 100644
--- a/src/main/java/org/bukkit/entity/TNTPrimed.java
+++ b/src/main/java/org/bukkit/entity/TNTPrimed.java
@@ -61,7 +61,7 @@ public interface TNTPrimed extends Explosive {
      * @deprecated replaced by {@link Entity#getOrigin()}
      */
     @Deprecated
-    default org.bukkit.Location getSourceLoc() {
+    default org.bukkit.@Nullable Location getSourceLoc() {
         return this.getOrigin();
     }
 }
diff --git a/src/main/java/org/bukkit/entity/Villager.java b/src/main/java/org/bukkit/entity/Villager.java
index c61e7e41aeb3d4f5f4ac47da8890051d8e97340d..d7e71d186d6504d6032d21550da6306baef2e43f 100644
--- a/src/main/java/org/bukkit/entity/Villager.java
+++ b/src/main/java/org/bukkit/entity/Villager.java
@@ -174,7 +174,7 @@ public interface Villager extends AbstractVillager {
         SNOW,
         SWAMP,
         TAIGA;
-        private final NamespacedKey key;
+        private final @NotNull NamespacedKey key;
 
         private Type() {
             this.key = NamespacedKey.minecraft(this.name().toLowerCase(Locale.ROOT));
@@ -263,7 +263,7 @@ public interface Villager extends AbstractVillager {
          * trade for iron and diamond weapons, sometimes enchanted.
          */
         WEAPONSMITH;
-        private final NamespacedKey key;
+        private final @NotNull NamespacedKey key;
 
         private Profession() {
             this.key = NamespacedKey.minecraft(this.name().toLowerCase(Locale.ROOT));
diff --git a/src/main/java/org/bukkit/event/Event.java b/src/main/java/org/bukkit/event/Event.java
index 8ec56cd6b8e0f5c5dd8c7c88b4671e18dcf109d0..2db882a227e8b0c018c7842fad36f24bcb055293 100644
--- a/src/main/java/org/bukkit/event/Event.java
+++ b/src/main/java/org/bukkit/event/Event.java
@@ -3,6 +3,8 @@ package org.bukkit.event;
 import org.bukkit.plugin.Plugin;
 import org.bukkit.plugin.PluginManager;
 import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 /**
  * Represents an event.
@@ -66,8 +68,7 @@ public abstract class Event {
         return name;
     }
 
-    @NotNull
-    public abstract HandlerList getHandlers();
+    public abstract @Nullable HandlerList getHandlers();
 
     /**
      * Any custom event that should not by synchronized with other events must
diff --git a/src/main/java/org/bukkit/event/EventException.java b/src/main/java/org/bukkit/event/EventException.java
index 84638e852501cc804c13c188c90c38b163657c36..72c4efeec9deb6636d168a7d6dd6cbf71962b37b 100644
--- a/src/main/java/org/bukkit/event/EventException.java
+++ b/src/main/java/org/bukkit/event/EventException.java
@@ -1,8 +1,11 @@
 package org.bukkit.event;
 
+import org.jetbrains.annotations.Nullable;
+
+
 public class EventException extends Exception {
     private static final long serialVersionUID = 3532808232324183999L;
-    private final Throwable cause;
+    private final @Nullable Throwable cause;
 
     /**
      * Constructs a new EventException based on the given Exception
@@ -47,7 +50,7 @@ public class EventException extends Exception {
      * @return Inner exception, or null if one does not exist
      */
     @Override
-    public Throwable getCause() {
+    public @Nullable Throwable getCause() {
         return cause;
     }
 }
diff --git a/src/main/java/org/bukkit/event/HandlerList.java b/src/main/java/org/bukkit/event/HandlerList.java
index 2292bd460ce2be113beb4ba6b4eb19350060f01c..cffed9934a0d311b618a0bbc7b79a01caa600c07 100644
--- a/src/main/java/org/bukkit/event/HandlerList.java
+++ b/src/main/java/org/bukkit/event/HandlerList.java
@@ -9,6 +9,8 @@ import java.util.Map.Entry;
 import org.bukkit.plugin.Plugin;
 import org.bukkit.plugin.RegisteredListener;
 import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 /**
  * A list of event handlers, stored per-event. Based on lahwran's fevents.
@@ -19,19 +21,19 @@ public class HandlerList {
      * Handler array. This field being an array is the key to this system's
      * speed.
      */
-    private volatile RegisteredListener[] handlers = null;
+    private volatile RegisteredListener @Nullable [] handlers = null;
 
     /**
      * Dynamic handler lists. These are changed using register() and
      * unregister() and are automatically baked to the handlers array any time
      * they have changed.
      */
-    private final EnumMap<EventPriority, ArrayList<RegisteredListener>> handlerslots;
+    private final @NotNull EnumMap<EventPriority, ArrayList<RegisteredListener>> handlerslots;
 
     /**
      * List of all HandlerLists which have been created, for use in bakeAll()
      */
-    private static ArrayList<HandlerList> allLists = new ArrayList<HandlerList>();
+    private static @NotNull ArrayList<HandlerList> allLists = new ArrayList<HandlerList>();
 
     // Paper start
     /**
@@ -204,7 +206,7 @@ public class HandlerList {
      * @return the array of registered listeners
      */
     @NotNull
-    public RegisteredListener[] getRegisteredListeners() {
+    public RegisteredListener @NotNull [] getRegisteredListeners() {
         RegisteredListener[] handlers;
         while ((handlers = this.handlers) == null) bake(); // This prevents fringe cases of returning null
         return handlers;
diff --git a/src/main/java/org/bukkit/event/block/BlockBreakEvent.java b/src/main/java/org/bukkit/event/block/BlockBreakEvent.java
index 691733a642b3295bbe6d484be728c77cd32803bd..76a7a42e3dc640cf0b499409c659026a994039f2 100644
--- a/src/main/java/org/bukkit/event/block/BlockBreakEvent.java
+++ b/src/main/java/org/bukkit/event/block/BlockBreakEvent.java
@@ -27,7 +27,7 @@ import org.jetbrains.annotations.NotNull;
  * experience will not drop.
  */
 public class BlockBreakEvent extends BlockExpEvent implements Cancellable {
-    private final Player player;
+    private final @NotNull Player player;
     private boolean dropItems;
     private boolean cancel;
 
diff --git a/src/main/java/org/bukkit/event/block/BlockBurnEvent.java b/src/main/java/org/bukkit/event/block/BlockBurnEvent.java
index c0c38df368a760dc75aa52b2ebbe796d268cc19b..febc103224d855fb10c3827de35c123d59c21946 100644
--- a/src/main/java/org/bukkit/event/block/BlockBurnEvent.java
+++ b/src/main/java/org/bukkit/event/block/BlockBurnEvent.java
@@ -15,7 +15,7 @@ import org.jetbrains.annotations.Nullable;
 public class BlockBurnEvent extends BlockEvent implements Cancellable {
     private static final HandlerList handlers = new HandlerList();
     private boolean cancelled;
-    private final Block ignitingBlock;
+    private final @Nullable Block ignitingBlock;
 
     @Deprecated
     public BlockBurnEvent(@NotNull final Block block) {
diff --git a/src/main/java/org/bukkit/event/block/BlockCanBuildEvent.java b/src/main/java/org/bukkit/event/block/BlockCanBuildEvent.java
index a1350c0f74d445dca09eea6e10abac050bb06990..221169184b32eea6a403eaef1c1c863cffcea59e 100644
--- a/src/main/java/org/bukkit/event/block/BlockCanBuildEvent.java
+++ b/src/main/java/org/bukkit/event/block/BlockCanBuildEvent.java
@@ -24,7 +24,7 @@ public class BlockCanBuildEvent extends BlockEvent {
     protected boolean buildable;
 
     protected BlockData blockData;
-    private final Player player;
+    private final @Nullable Player player;
 
     @Deprecated
     public BlockCanBuildEvent(@NotNull final Block block, @NotNull final BlockData type, final boolean canBuild) {
diff --git a/src/main/java/org/bukkit/event/block/BlockCookEvent.java b/src/main/java/org/bukkit/event/block/BlockCookEvent.java
index a3f1c9cb36c9069ed622985a525bfc2a7a27ab91..b448b3ed02607de5429cb22190dce6da50e57c98 100644
--- a/src/main/java/org/bukkit/event/block/BlockCookEvent.java
+++ b/src/main/java/org/bukkit/event/block/BlockCookEvent.java
@@ -5,16 +5,18 @@ import org.bukkit.event.Cancellable;
 import org.bukkit.event.HandlerList;
 import org.bukkit.inventory.ItemStack;
 import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 /**
  * Called when an ItemStack is successfully cooked in a block.
  */
 public class BlockCookEvent extends BlockEvent implements Cancellable {
     private static final HandlerList handlers = new HandlerList();
-    private final ItemStack source;
+    private final @NotNull ItemStack source;
     private ItemStack result;
     private boolean cancelled;
-    private final org.bukkit.inventory.CookingRecipe<?> recipe; // Paper
+    private final org.bukkit.inventory.@Nullable CookingRecipe<?> recipe; // Paper
 
     @Deprecated // Paper
     public BlockCookEvent(@NotNull final Block block, @NotNull final ItemStack source, @NotNull final ItemStack result) {
diff --git a/src/main/java/org/bukkit/event/block/BlockDamageAbortEvent.java b/src/main/java/org/bukkit/event/block/BlockDamageAbortEvent.java
index edc204b50ef45ccda83d6c2239b924008a94a7f2..aa4b11da7b855f785e33e90c08c59683842b28db 100644
--- a/src/main/java/org/bukkit/event/block/BlockDamageAbortEvent.java
+++ b/src/main/java/org/bukkit/event/block/BlockDamageAbortEvent.java
@@ -13,8 +13,8 @@ import org.jetbrains.annotations.NotNull;
 public class BlockDamageAbortEvent extends BlockEvent {
 
     private static final HandlerList handlers = new HandlerList();
-    private final Player player;
-    private final ItemStack itemstack;
+    private final @NotNull Player player;
+    private final @NotNull ItemStack itemstack;
 
     public BlockDamageAbortEvent(@NotNull final Player player, @NotNull final Block block, @NotNull final ItemStack itemInHand) {
         super(block);
diff --git a/src/main/java/org/bukkit/event/block/BlockDamageEvent.java b/src/main/java/org/bukkit/event/block/BlockDamageEvent.java
index cd04a0bd9d232857408b38605787016a217cb8d2..03c634dc148b94f93f18fbfcc033bf6552c577d9 100644
--- a/src/main/java/org/bukkit/event/block/BlockDamageEvent.java
+++ b/src/main/java/org/bukkit/event/block/BlockDamageEvent.java
@@ -15,10 +15,10 @@ import org.jetbrains.annotations.NotNull;
  */
 public class BlockDamageEvent extends BlockEvent implements Cancellable {
     private static final HandlerList handlers = new HandlerList();
-    private final Player player;
+    private final @NotNull Player player;
     private boolean instaBreak;
     private boolean cancel;
-    private final ItemStack itemstack;
+    private final @NotNull ItemStack itemstack;
 
     public BlockDamageEvent(@NotNull final Player player, @NotNull final Block block, @NotNull final ItemStack itemInHand, final boolean instaBreak) {
         super(block);
diff --git a/src/main/java/org/bukkit/event/block/BlockDispenseArmorEvent.java b/src/main/java/org/bukkit/event/block/BlockDispenseArmorEvent.java
index 57b831979c26d7b6a0325e009b3ba627b3b29a2a..22a660e67a2ecbdbbd67c55b59555b419b4ce29a 100644
--- a/src/main/java/org/bukkit/event/block/BlockDispenseArmorEvent.java
+++ b/src/main/java/org/bukkit/event/block/BlockDispenseArmorEvent.java
@@ -15,7 +15,7 @@ import org.jetbrains.annotations.NotNull;
  */
 public class BlockDispenseArmorEvent extends BlockDispenseEvent {
 
-    private final LivingEntity target;
+    private final @NotNull LivingEntity target;
 
     public BlockDispenseArmorEvent(@NotNull Block block, @NotNull ItemStack dispensed, @NotNull LivingEntity target) {
         super(block, dispensed, new Vector(0, 0, 0));
diff --git a/src/main/java/org/bukkit/event/block/BlockDropItemEvent.java b/src/main/java/org/bukkit/event/block/BlockDropItemEvent.java
index 3dd4bd38e72c04e74e5787fb38ca9abd10bad06b..49f9a41dffb0eb993d4d5d28f2adb6219ea44e7a 100644
--- a/src/main/java/org/bukkit/event/block/BlockDropItemEvent.java
+++ b/src/main/java/org/bukkit/event/block/BlockDropItemEvent.java
@@ -27,10 +27,10 @@ import org.jetbrains.annotations.NotNull;
 public class BlockDropItemEvent extends BlockEvent implements Cancellable {
 
     private static final HandlerList handlers = new HandlerList();
-    private final Player player;
+    private final @NotNull Player player;
     private boolean cancel;
-    private final BlockState blockState;
-    private final List<Item> items;
+    private final @NotNull BlockState blockState;
+    private final @NotNull List<Item> items;
 
     public BlockDropItemEvent(@NotNull Block block, @NotNull BlockState blockState, @NotNull Player player, @NotNull List<Item> items) {
         super(block);
diff --git a/src/main/java/org/bukkit/event/block/BlockExplodeEvent.java b/src/main/java/org/bukkit/event/block/BlockExplodeEvent.java
index 2474628851c35fe8500d4d113aaafda6ce087313..29cb1322c2a516e9750d4f76e0552d660572d171 100644
--- a/src/main/java/org/bukkit/event/block/BlockExplodeEvent.java
+++ b/src/main/java/org/bukkit/event/block/BlockExplodeEvent.java
@@ -16,7 +16,7 @@ import org.jetbrains.annotations.NotNull;
 public class BlockExplodeEvent extends BlockEvent implements Cancellable {
     private static final HandlerList handlers = new HandlerList();
     private boolean cancel;
-    private final List<Block> blocks;
+    private final @NotNull List<Block> blocks;
     private float yield;
     private final org.bukkit.block.BlockState explodedBlockState; // Paper
 
diff --git a/src/main/java/org/bukkit/event/block/BlockFadeEvent.java b/src/main/java/org/bukkit/event/block/BlockFadeEvent.java
index 362643de40ff283ad37ac63c1349f91ae2b9b326..89e1e761e2ee2f552037d3f97d7e7730a131701e 100644
--- a/src/main/java/org/bukkit/event/block/BlockFadeEvent.java
+++ b/src/main/java/org/bukkit/event/block/BlockFadeEvent.java
@@ -24,7 +24,7 @@ import org.jetbrains.annotations.NotNull;
 public class BlockFadeEvent extends BlockEvent implements Cancellable {
     private static final HandlerList handlers = new HandlerList();
     private boolean cancelled;
-    private final BlockState newState;
+    private final @NotNull BlockState newState;
 
     public BlockFadeEvent(@NotNull final Block block, @NotNull final BlockState newState) {
         super(block);
diff --git a/src/main/java/org/bukkit/event/block/BlockFertilizeEvent.java b/src/main/java/org/bukkit/event/block/BlockFertilizeEvent.java
index 695309b4b7ef269ba2496408a5f874f61cd6c445..fdf27806e5f24d97c5a261441c4eff6b7d790ce6 100644
--- a/src/main/java/org/bukkit/event/block/BlockFertilizeEvent.java
+++ b/src/main/java/org/bukkit/event/block/BlockFertilizeEvent.java
@@ -20,8 +20,8 @@ public class BlockFertilizeEvent extends BlockEvent implements Cancellable {
     private static final HandlerList handlers = new HandlerList();
     private boolean cancelled;
     //
-    private final Player player;
-    private final List<BlockState> blocks;
+    private final @Nullable Player player;
+    private final @NotNull List<BlockState> blocks;
 
     public BlockFertilizeEvent(@NotNull Block theBlock, @Nullable Player player, @NotNull List<BlockState> blocks) {
         super(theBlock);
diff --git a/src/main/java/org/bukkit/event/block/BlockGrowEvent.java b/src/main/java/org/bukkit/event/block/BlockGrowEvent.java
index 73d5375d2f67ee00204d80308828cd9f2b2f17e8..13f8b117db5685a42996f7fdc603042bdd1a0361 100644
--- a/src/main/java/org/bukkit/event/block/BlockGrowEvent.java
+++ b/src/main/java/org/bukkit/event/block/BlockGrowEvent.java
@@ -23,7 +23,7 @@ import org.jetbrains.annotations.NotNull;
  */
 public class BlockGrowEvent extends BlockEvent implements Cancellable {
     private static final HandlerList handlers = new HandlerList();
-    private final BlockState newState;
+    private final @NotNull BlockState newState;
     private boolean cancelled = false;
 
     public BlockGrowEvent(@NotNull final Block block, @NotNull final BlockState newState) {
diff --git a/src/main/java/org/bukkit/event/block/BlockIgniteEvent.java b/src/main/java/org/bukkit/event/block/BlockIgniteEvent.java
index 6dcd9f828c6c40e48593b0bad5a44a656eb01645..4b27be9418669daff224ff2c2c9a53f0ff1f97a2 100644
--- a/src/main/java/org/bukkit/event/block/BlockIgniteEvent.java
+++ b/src/main/java/org/bukkit/event/block/BlockIgniteEvent.java
@@ -16,9 +16,9 @@ import org.jetbrains.annotations.Nullable;
  */
 public class BlockIgniteEvent extends BlockEvent implements Cancellable {
     private static final HandlerList handlers = new HandlerList();
-    private final IgniteCause cause;
-    private final Entity ignitingEntity;
-    private final Block ignitingBlock;
+    private final @NotNull IgniteCause cause;
+    private final @Nullable Entity ignitingEntity;
+    private final @Nullable Block ignitingBlock;
     private boolean cancel;
 
     public BlockIgniteEvent(@NotNull final Block theBlock, @NotNull final IgniteCause cause, @Nullable final Entity ignitingEntity) {
diff --git a/src/main/java/org/bukkit/event/block/BlockMultiPlaceEvent.java b/src/main/java/org/bukkit/event/block/BlockMultiPlaceEvent.java
index 7ca2b1b321447289c50c210a608a88db9c4b4f99..ecf21c079e881b99590291bd997baa55c0643df6 100644
--- a/src/main/java/org/bukkit/event/block/BlockMultiPlaceEvent.java
+++ b/src/main/java/org/bukkit/event/block/BlockMultiPlaceEvent.java
@@ -16,7 +16,7 @@ import org.jetbrains.annotations.NotNull;
  * block.
  */
 public class BlockMultiPlaceEvent extends BlockPlaceEvent {
-    private final List<BlockState> states;
+    private final @NotNull List<BlockState> states;
 
     @Deprecated // Paper
     public BlockMultiPlaceEvent(@NotNull List<BlockState> states, @NotNull Block clicked, @NotNull ItemStack itemInHand, @NotNull Player thePlayer, boolean canBuild) {
diff --git a/src/main/java/org/bukkit/event/block/BlockPhysicsEvent.java b/src/main/java/org/bukkit/event/block/BlockPhysicsEvent.java
index 1d496e5a3d1541bf0a257a4358b3943fd6415204..89d0eb198b887aff7e7701779f8bdc930256401c 100644
--- a/src/main/java/org/bukkit/event/block/BlockPhysicsEvent.java
+++ b/src/main/java/org/bukkit/event/block/BlockPhysicsEvent.java
@@ -28,13 +28,13 @@ import org.jetbrains.annotations.NotNull;
  */
 public class BlockPhysicsEvent extends BlockEvent implements Cancellable {
     private static final HandlerList handlers = new HandlerList();
-    private final BlockData changed;
-    private final Block sourceBlock;
+    private final @NotNull BlockData changed;
+    private final @NotNull Block sourceBlock;
     private boolean cancel = false;
 
     // Paper start - Legacy constructor, use #BlockPhysicsEvent(Block, BlockData, Block)
     @Deprecated
-    public BlockPhysicsEvent(final Block block, final BlockData changed, final int sourceX, final int sourceY, final int sourceZ) {
+    public BlockPhysicsEvent(final @NotNull Block block, final @NotNull BlockData changed, final int sourceX, final int sourceY, final int sourceZ) {
         this(block, changed, block.getWorld().getBlockAt(sourceX, sourceY, sourceZ));
     }
     // Paper end
diff --git a/src/main/java/org/bukkit/event/block/BlockPistonEvent.java b/src/main/java/org/bukkit/event/block/BlockPistonEvent.java
index 2cdf2919e7ca895787fa037809d895ab10b0bf73..3e6e5e467aea54607474afaff41ba60705f4a3de 100644
--- a/src/main/java/org/bukkit/event/block/BlockPistonEvent.java
+++ b/src/main/java/org/bukkit/event/block/BlockPistonEvent.java
@@ -11,7 +11,7 @@ import org.jetbrains.annotations.NotNull;
  */
 public abstract class BlockPistonEvent extends BlockEvent implements Cancellable {
     private boolean cancelled;
-    private final BlockFace direction;
+    private final @NotNull BlockFace direction;
 
     public BlockPistonEvent(@NotNull final Block block, @NotNull final BlockFace direction) {
         super(block);
diff --git a/src/main/java/org/bukkit/event/block/BlockReceiveGameEvent.java b/src/main/java/org/bukkit/event/block/BlockReceiveGameEvent.java
index e226d1306402324c2684946faa547cccb77fd138..27174fcc967295b2727c8bf5a4de7695037769f4 100644
--- a/src/main/java/org/bukkit/event/block/BlockReceiveGameEvent.java
+++ b/src/main/java/org/bukkit/event/block/BlockReceiveGameEvent.java
@@ -17,8 +17,8 @@ import org.jetbrains.annotations.Nullable;
 public class BlockReceiveGameEvent extends BlockEvent implements Cancellable {
 
     private static final HandlerList handlers = new HandlerList();
-    private final GameEvent event;
-    private final Entity entity;
+    private final @NotNull GameEvent event;
+    private final @Nullable Entity entity;
     private boolean cancelled;
 
     public BlockReceiveGameEvent(@NotNull GameEvent event, @NotNull Block block, @Nullable Entity entity) {
diff --git a/src/main/java/org/bukkit/event/block/BlockShearEntityEvent.java b/src/main/java/org/bukkit/event/block/BlockShearEntityEvent.java
index 71c0af9373069cfaa074e1fbad592eab81025b1c..d6a0a3e344ab71b985e8e928cdcdfe973504c5d2 100644
--- a/src/main/java/org/bukkit/event/block/BlockShearEntityEvent.java
+++ b/src/main/java/org/bukkit/event/block/BlockShearEntityEvent.java
@@ -14,8 +14,8 @@ public class BlockShearEntityEvent extends BlockEvent implements Cancellable {
 
     private static final HandlerList handlers = new HandlerList();
     //
-    private final Entity sheared;
-    private final ItemStack tool;
+    private final @NotNull Entity sheared;
+    private final @NotNull ItemStack tool;
     private boolean cancelled;
 
     public BlockShearEntityEvent(@NotNull Block dispenser, @NotNull Entity sheared, @NotNull ItemStack tool) {
diff --git a/src/main/java/org/bukkit/event/block/BlockSpreadEvent.java b/src/main/java/org/bukkit/event/block/BlockSpreadEvent.java
index e9239caec9d20985479f090bff15c7f2ec90c8cd..e531ce9daf5ce2751fcac1e0acfec2fb13da04f0 100644
--- a/src/main/java/org/bukkit/event/block/BlockSpreadEvent.java
+++ b/src/main/java/org/bukkit/event/block/BlockSpreadEvent.java
@@ -23,7 +23,7 @@ import org.jetbrains.annotations.NotNull;
  */
 public class BlockSpreadEvent extends BlockFormEvent {
     private static final HandlerList handlers = new HandlerList();
-    private final Block source;
+    private final @NotNull Block source;
 
     public BlockSpreadEvent(@NotNull final Block block, @NotNull final Block source, @NotNull final BlockState newState) {
         super(block, newState);
diff --git a/src/main/java/org/bukkit/event/block/CauldronLevelChangeEvent.java b/src/main/java/org/bukkit/event/block/CauldronLevelChangeEvent.java
index 891f3d250b8ea2af0902602758efb1e27183d558..a3397fbaebce21d62b20a967915ba86c2c3c124f 100644
--- a/src/main/java/org/bukkit/event/block/CauldronLevelChangeEvent.java
+++ b/src/main/java/org/bukkit/event/block/CauldronLevelChangeEvent.java
@@ -17,9 +17,9 @@ public class CauldronLevelChangeEvent extends BlockEvent implements Cancellable
     private static final HandlerList handlers = new HandlerList();
     private boolean cancelled;
     //
-    private final Entity entity;
-    private final ChangeReason reason;
-    private final BlockState newState;
+    private final @Nullable Entity entity;
+    private final @NotNull ChangeReason reason;
+    private final @NotNull BlockState newState;
 
     public CauldronLevelChangeEvent(@NotNull Block block, @Nullable Entity entity, @NotNull ChangeReason reason, @NotNull BlockState newBlock) {
         super(block);
diff --git a/src/main/java/org/bukkit/event/block/EntityBlockFormEvent.java b/src/main/java/org/bukkit/event/block/EntityBlockFormEvent.java
index 3baed1c43bb13f296cded8b3f635af38f866a012..0e6bb7c096d7d7383fc94e324ce998ef5d0a194e 100644
--- a/src/main/java/org/bukkit/event/block/EntityBlockFormEvent.java
+++ b/src/main/java/org/bukkit/event/block/EntityBlockFormEvent.java
@@ -15,7 +15,7 @@ import org.jetbrains.annotations.NotNull;
  * </ul>
  */
 public class EntityBlockFormEvent extends BlockFormEvent {
-    private final Entity entity;
+    private final @NotNull Entity entity;
 
     public EntityBlockFormEvent(@NotNull final Entity entity, @NotNull final Block block, @NotNull final BlockState blockstate) {
         super(block, blockstate);
diff --git a/src/main/java/org/bukkit/event/block/MoistureChangeEvent.java b/src/main/java/org/bukkit/event/block/MoistureChangeEvent.java
index bf5de52e79fb152c7fc847383cb9c259535d88f3..aaf970f92c9925958985001665afb4b300e063e3 100644
--- a/src/main/java/org/bukkit/event/block/MoistureChangeEvent.java
+++ b/src/main/java/org/bukkit/event/block/MoistureChangeEvent.java
@@ -13,7 +13,7 @@ public class MoistureChangeEvent extends BlockEvent implements Cancellable {
 
     private static final HandlerList handlers = new HandlerList();
     private boolean cancelled;
-    private final BlockState newState;
+    private final @NotNull BlockState newState;
 
     public MoistureChangeEvent(@NotNull final Block block, @NotNull final BlockState newState) {
         super(block);
diff --git a/src/main/java/org/bukkit/event/block/NotePlayEvent.java b/src/main/java/org/bukkit/event/block/NotePlayEvent.java
index 676b31f6f38d4e85cd4bd16ccf42cbc39a5d8423..8bb5238dc6a7bc69b88054f66b6336c8cc3139df 100644
--- a/src/main/java/org/bukkit/event/block/NotePlayEvent.java
+++ b/src/main/java/org/bukkit/event/block/NotePlayEvent.java
@@ -13,7 +13,7 @@ import org.jetbrains.annotations.NotNull;
  */
 public class NotePlayEvent extends BlockEvent implements Cancellable {
 
-    private static HandlerList handlers = new HandlerList();
+    private static @NotNull HandlerList handlers = new HandlerList();
     private Instrument instrument;
     private Note note;
     private boolean cancelled = false;
diff --git a/src/main/java/org/bukkit/event/block/SignChangeEvent.java b/src/main/java/org/bukkit/event/block/SignChangeEvent.java
index 1268066e30ddb0cd3792ea4b3de894eb04196669..85a05389ec4d142299fc31d2a9b301bc4e299a34 100644
--- a/src/main/java/org/bukkit/event/block/SignChangeEvent.java
+++ b/src/main/java/org/bukkit/event/block/SignChangeEvent.java
@@ -15,9 +15,9 @@ import org.jetbrains.annotations.Nullable;
 public class SignChangeEvent extends BlockEvent implements Cancellable {
     private static final HandlerList handlers = new HandlerList();
     private boolean cancel = false;
-    private final Player player;
+    private final @NotNull Player player;
     // Paper start
-    private final java.util.List<net.kyori.adventure.text.Component> adventure$lines;
+    private final java.util.@NotNull List<net.kyori.adventure.text.Component> adventure$lines;
 
     public SignChangeEvent(@NotNull final Block theBlock, @NotNull final Player player, @NotNull final java.util.List<net.kyori.adventure.text.Component> adventure$lines) {
         super(theBlock);
@@ -26,7 +26,7 @@ public class SignChangeEvent extends BlockEvent implements Cancellable {
     }
 
     @Deprecated // Paper end
-    public SignChangeEvent(@NotNull final Block theBlock, @NotNull final Player thePlayer, @NotNull final String[] theLines) {
+    public SignChangeEvent(@NotNull final Block theBlock, @NotNull final Player thePlayer, @NotNull final String @NotNull [] theLines) {
         super(theBlock);
         this.player = thePlayer;
         // Paper start
@@ -91,7 +91,7 @@ public class SignChangeEvent extends BlockEvent implements Cancellable {
      */
     @NotNull
     @Deprecated // Paper
-    public String[] getLines() {
+    public String @NotNull [] getLines() {
         return adventure$lines.stream().map(net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection()::serialize).toArray(String[]::new); // Paper
     }
 
diff --git a/src/main/java/org/bukkit/event/block/SpongeAbsorbEvent.java b/src/main/java/org/bukkit/event/block/SpongeAbsorbEvent.java
index 7029cfcd00ed5d9c7f06898ec2b81238ec775a70..43e02e5b6a91c0352272015cbf57a7768a53e462 100644
--- a/src/main/java/org/bukkit/event/block/SpongeAbsorbEvent.java
+++ b/src/main/java/org/bukkit/event/block/SpongeAbsorbEvent.java
@@ -21,7 +21,7 @@ public class SpongeAbsorbEvent extends BlockEvent implements Cancellable {
 
     private static final HandlerList handlers = new HandlerList();
     private boolean cancelled;
-    private final List<BlockState> blocks;
+    private final @NotNull List<BlockState> blocks;
 
     public SpongeAbsorbEvent(@NotNull Block block, @NotNull List<BlockState> waterblocks) {
         super(block);
diff --git a/src/main/java/org/bukkit/event/enchantment/EnchantItemEvent.java b/src/main/java/org/bukkit/event/enchantment/EnchantItemEvent.java
index 5a3e74f90c8e9bdaf1bab678eda28094838ed1da..e0008fdace3ac8805d219881616db1d1dbe7b675 100644
--- a/src/main/java/org/bukkit/event/enchantment/EnchantItemEvent.java
+++ b/src/main/java/org/bukkit/event/enchantment/EnchantItemEvent.java
@@ -19,12 +19,12 @@ import org.jetbrains.annotations.NotNull;
  */
 public class EnchantItemEvent extends InventoryEvent implements Cancellable {
     private static final HandlerList handlers = new HandlerList();
-    private final Block table;
-    private final ItemStack item;
+    private final @NotNull Block table;
+    private final @NotNull ItemStack item;
     private int level;
     private boolean cancelled;
-    private final Map<Enchantment, Integer> enchants;
-    private final Player enchanter;
+    private final @NotNull Map<Enchantment, Integer> enchants;
+    private final @NotNull Player enchanter;
     private final int button;
 
     public EnchantItemEvent(@NotNull final Player enchanter, @NotNull final InventoryView view, @NotNull final Block table, @NotNull final ItemStack item, final int level, @NotNull final Map<Enchantment, Integer> enchants, final int i) {
diff --git a/src/main/java/org/bukkit/event/enchantment/PrepareItemEnchantEvent.java b/src/main/java/org/bukkit/event/enchantment/PrepareItemEnchantEvent.java
index 8eb6f4090578d9e1b12aff813840108fdeece730..9d6f1c9fcc1fb23fbf3f57974bf257a7b4fa5467 100644
--- a/src/main/java/org/bukkit/event/enchantment/PrepareItemEnchantEvent.java
+++ b/src/main/java/org/bukkit/event/enchantment/PrepareItemEnchantEvent.java
@@ -16,12 +16,12 @@ import org.jetbrains.annotations.NotNull;
  */
 public class PrepareItemEnchantEvent extends InventoryEvent implements Cancellable {
     private static final HandlerList handlers = new HandlerList();
-    private final Block table;
-    private final ItemStack item;
-    private final EnchantmentOffer[] offers;
+    private final @NotNull Block table;
+    private final @NotNull ItemStack item;
+    private final EnchantmentOffer @NotNull [] offers;
     private final int bonus;
     private boolean cancelled;
-    private final Player enchanter;
+    private final @NotNull Player enchanter;
 
     public PrepareItemEnchantEvent(@NotNull final Player enchanter, @NotNull InventoryView view, @NotNull final Block table, @NotNull final ItemStack item, @org.jetbrains.annotations.Nullable final EnchantmentOffer @NotNull [] offers, final int bonus) { // Paper - offers can contain null values
         super(view);
diff --git a/src/main/java/org/bukkit/event/entity/AreaEffectCloudApplyEvent.java b/src/main/java/org/bukkit/event/entity/AreaEffectCloudApplyEvent.java
index a37febd0d4dd5b733e9ee72628fdf9395fec4367..f3c8265899d374dd90953f146404799200c6899c 100644
--- a/src/main/java/org/bukkit/event/entity/AreaEffectCloudApplyEvent.java
+++ b/src/main/java/org/bukkit/event/entity/AreaEffectCloudApplyEvent.java
@@ -13,7 +13,7 @@ import org.jetbrains.annotations.NotNull;
  */
 public class AreaEffectCloudApplyEvent extends EntityEvent implements Cancellable {
     private static final HandlerList handlers = new HandlerList();
-    private final List<LivingEntity> affectedEntities;
+    private final @NotNull List<LivingEntity> affectedEntities;
     private boolean cancelled = false;
 
     public AreaEffectCloudApplyEvent(@NotNull final AreaEffectCloud entity, @NotNull final List<LivingEntity> affectedEntities) {
diff --git a/src/main/java/org/bukkit/event/entity/CreatureSpawnEvent.java b/src/main/java/org/bukkit/event/entity/CreatureSpawnEvent.java
index 9a06487e0f76cd7765e6f900b7458a3cf0aa44e7..a940a793ebfa98dc8d951e111a1ffa641c49b002 100644
--- a/src/main/java/org/bukkit/event/entity/CreatureSpawnEvent.java
+++ b/src/main/java/org/bukkit/event/entity/CreatureSpawnEvent.java
@@ -11,7 +11,7 @@ import org.jetbrains.annotations.NotNull;
  * If a Creature Spawn event is cancelled, the creature will not spawn.
  */
 public class CreatureSpawnEvent extends EntitySpawnEvent {
-    private final SpawnReason spawnReason;
+    private final @NotNull SpawnReason spawnReason;
 
     public CreatureSpawnEvent(@NotNull final LivingEntity spawnee, @NotNull final SpawnReason spawnReason) {
         super(spawnee);
diff --git a/src/main/java/org/bukkit/event/entity/CreeperPowerEvent.java b/src/main/java/org/bukkit/event/entity/CreeperPowerEvent.java
index 4295baf51eb69a18e8e33de94fc55a3367b4b764..4d3354ebde39dbcd0b184a942926397712e8a7be 100644
--- a/src/main/java/org/bukkit/event/entity/CreeperPowerEvent.java
+++ b/src/main/java/org/bukkit/event/entity/CreeperPowerEvent.java
@@ -15,7 +15,7 @@ import org.jetbrains.annotations.Nullable;
 public class CreeperPowerEvent extends EntityEvent implements Cancellable {
     private static final HandlerList handlers = new HandlerList();
     private boolean canceled;
-    private final PowerCause cause;
+    private final @NotNull PowerCause cause;
     private LightningStrike bolt;
 
     public CreeperPowerEvent(@NotNull final Creeper creeper, @NotNull final LightningStrike bolt, @NotNull final PowerCause cause) {
diff --git a/src/main/java/org/bukkit/event/entity/EnderDragonChangePhaseEvent.java b/src/main/java/org/bukkit/event/entity/EnderDragonChangePhaseEvent.java
index 498609bb1b5443698e98aa2636afa700cb866d8b..2955858c79b2eb347bca5f34aa3b44e369a82ca9 100644
--- a/src/main/java/org/bukkit/event/entity/EnderDragonChangePhaseEvent.java
+++ b/src/main/java/org/bukkit/event/entity/EnderDragonChangePhaseEvent.java
@@ -14,7 +14,7 @@ public class EnderDragonChangePhaseEvent extends EntityEvent implements Cancella
 
     private static final HandlerList handlers = new HandlerList();
     private boolean cancel;
-    private final EnderDragon.Phase currentPhase;
+    private final EnderDragon.@Nullable Phase currentPhase;
     private EnderDragon.Phase newPhase;
 
     public EnderDragonChangePhaseEvent(@NotNull EnderDragon enderDragon, @Nullable EnderDragon.Phase currentPhase, @NotNull EnderDragon.Phase newPhase) {
diff --git a/src/main/java/org/bukkit/event/entity/EntityBreedEvent.java b/src/main/java/org/bukkit/event/entity/EntityBreedEvent.java
index 486387789102c61e7df2bb018baeb8f1fce778b6..ec986f8721ca36e961c42b8e2d6d31bb1bb6146e 100644
--- a/src/main/java/org/bukkit/event/entity/EntityBreedEvent.java
+++ b/src/main/java/org/bukkit/event/entity/EntityBreedEvent.java
@@ -15,10 +15,10 @@ public class EntityBreedEvent extends EntityEvent implements Cancellable {
 
     private static final HandlerList handlers = new HandlerList();
     //
-    private final LivingEntity mother;
-    private final LivingEntity father;
-    private final LivingEntity breeder;
-    private final ItemStack bredWith;
+    private final @NotNull LivingEntity mother;
+    private final @NotNull LivingEntity father;
+    private final @Nullable LivingEntity breeder;
+    private final @Nullable ItemStack bredWith;
     private int experience;
     //
     private boolean cancel;
diff --git a/src/main/java/org/bukkit/event/entity/EntityChangeBlockEvent.java b/src/main/java/org/bukkit/event/entity/EntityChangeBlockEvent.java
index 1a9575ad4c81aefa5ef0b927f6ac8f7064b55c49..f21198c100271b0aa4cdb191e620f392a0b6db74 100644
--- a/src/main/java/org/bukkit/event/entity/EntityChangeBlockEvent.java
+++ b/src/main/java/org/bukkit/event/entity/EntityChangeBlockEvent.java
@@ -13,9 +13,9 @@ import org.jetbrains.annotations.NotNull;
  */
 public class EntityChangeBlockEvent extends EntityEvent implements Cancellable {
     private static final HandlerList handlers = new HandlerList();
-    private final Block block;
+    private final @NotNull Block block;
     private boolean cancel;
-    private final BlockData to;
+    private final @NotNull BlockData to;
 
     public EntityChangeBlockEvent(@NotNull final Entity what, @NotNull final Block block, @NotNull final BlockData to) {
         super(what);
diff --git a/src/main/java/org/bukkit/event/entity/EntityCombustByBlockEvent.java b/src/main/java/org/bukkit/event/entity/EntityCombustByBlockEvent.java
index 5886ee448a3ba40bc4787c0363edbd378ac5e09a..99f41fd180b9ed1519a544f87236680292dfa655 100644
--- a/src/main/java/org/bukkit/event/entity/EntityCombustByBlockEvent.java
+++ b/src/main/java/org/bukkit/event/entity/EntityCombustByBlockEvent.java
@@ -9,7 +9,7 @@ import org.jetbrains.annotations.Nullable;
  * Called when a block causes an entity to combust.
  */
 public class EntityCombustByBlockEvent extends EntityCombustEvent {
-    private final Block combuster;
+    private final @Nullable Block combuster;
 
     public EntityCombustByBlockEvent(@Nullable final Block combuster, @NotNull final Entity combustee, final int duration) {
         super(combustee, duration);
diff --git a/src/main/java/org/bukkit/event/entity/EntityCombustByEntityEvent.java b/src/main/java/org/bukkit/event/entity/EntityCombustByEntityEvent.java
index 0b67364e133af7d227ee046a5d76d4abfde2b913..f5d8644af905e24edf49cf5381fdb204abda1ebf 100644
--- a/src/main/java/org/bukkit/event/entity/EntityCombustByEntityEvent.java
+++ b/src/main/java/org/bukkit/event/entity/EntityCombustByEntityEvent.java
@@ -7,7 +7,7 @@ import org.jetbrains.annotations.NotNull;
  * Called when an entity causes another entity to combust.
  */
 public class EntityCombustByEntityEvent extends EntityCombustEvent {
-    private final Entity combuster;
+    private final @NotNull Entity combuster;
 
     public EntityCombustByEntityEvent(@NotNull final Entity combuster, @NotNull final Entity combustee, final int duration) {
         super(combustee, duration);
diff --git a/src/main/java/org/bukkit/event/entity/EntityCreatePortalEvent.java b/src/main/java/org/bukkit/event/entity/EntityCreatePortalEvent.java
index 397baaefd2fb45ae9d50b7b9bd5276e6ad980f20..f0fbea8cdc16512ca010c01dd15cac46f7312a53 100644
--- a/src/main/java/org/bukkit/event/entity/EntityCreatePortalEvent.java
+++ b/src/main/java/org/bukkit/event/entity/EntityCreatePortalEvent.java
@@ -17,9 +17,9 @@ import org.jetbrains.annotations.NotNull;
 @Deprecated
 public class EntityCreatePortalEvent extends EntityEvent implements Cancellable {
     private static final HandlerList handlers = new HandlerList();
-    private final List<BlockState> blocks;
+    private final @NotNull List<BlockState> blocks;
     private boolean cancelled = false;
-    private PortalType type = PortalType.CUSTOM;
+    private @NotNull PortalType type = PortalType.CUSTOM;
 
     public EntityCreatePortalEvent(@NotNull final LivingEntity what, @NotNull final List<BlockState> blocks, @NotNull final PortalType type) {
         super(what);
diff --git a/src/main/java/org/bukkit/event/entity/EntityDamageByBlockEvent.java b/src/main/java/org/bukkit/event/entity/EntityDamageByBlockEvent.java
index 461727dc7f06efb3550fc370e0db5bd04ba89711..8b16e96635c33ff595b62b6d00c4c3679836b224 100644
--- a/src/main/java/org/bukkit/event/entity/EntityDamageByBlockEvent.java
+++ b/src/main/java/org/bukkit/event/entity/EntityDamageByBlockEvent.java
@@ -11,7 +11,7 @@ import org.jetbrains.annotations.Nullable;
  * Called when an entity is damaged by a block
  */
 public class EntityDamageByBlockEvent extends EntityDamageEvent {
-    private final Block damager;
+    private final @Nullable Block damager;
 
     public EntityDamageByBlockEvent(@Nullable final Block damager, @NotNull final Entity damagee, @NotNull final DamageCause cause, final double damage) {
         super(damagee, cause, damage);
diff --git a/src/main/java/org/bukkit/event/entity/EntityDamageByEntityEvent.java b/src/main/java/org/bukkit/event/entity/EntityDamageByEntityEvent.java
index 7ce8f1a26c1b33dd0eb6e6435952fd73abf49879..f5424399ba130428a98190aac434b7f988d25d8f 100644
--- a/src/main/java/org/bukkit/event/entity/EntityDamageByEntityEvent.java
+++ b/src/main/java/org/bukkit/event/entity/EntityDamageByEntityEvent.java
@@ -9,7 +9,7 @@ import org.jetbrains.annotations.NotNull;
  * Called when an entity is damaged by an entity
  */
 public class EntityDamageByEntityEvent extends EntityDamageEvent {
-    private final Entity damager;
+    private final @NotNull Entity damager;
 
     @Deprecated // Paper - add critical damage API
     public EntityDamageByEntityEvent(@NotNull final Entity damager, @NotNull final Entity damagee, @NotNull final DamageCause cause, final double damage) {
diff --git a/src/main/java/org/bukkit/event/entity/EntityDamageEvent.java b/src/main/java/org/bukkit/event/entity/EntityDamageEvent.java
index 6241f31e7326954b2e704da46bf0115adbcf8671..bd97bf58ca778c01e25a2fae692098bfc6fae7e6 100644
--- a/src/main/java/org/bukkit/event/entity/EntityDamageEvent.java
+++ b/src/main/java/org/bukkit/event/entity/EntityDamageEvent.java
@@ -21,11 +21,11 @@ public class EntityDamageEvent extends EntityEvent implements Cancellable {
     private static final HandlerList handlers = new HandlerList();
     private static final DamageModifier[] MODIFIERS = DamageModifier.values();
     private static final Function<? super Double, Double> ZERO = Functions.constant(-0.0);
-    private final Map<DamageModifier, Double> modifiers;
-    private final Map<DamageModifier, ? extends Function<? super Double, Double>> modifierFunctions;
-    private final Map<DamageModifier, Double> originals;
+    private final @NotNull Map<DamageModifier, Double> modifiers;
+    private final @NotNull Map<DamageModifier, ? extends Function<? super Double, Double>> modifierFunctions;
+    private final @NotNull Map<DamageModifier, Double> originals;
     private boolean cancelled;
-    private final DamageCause cause;
+    private final @NotNull DamageCause cause;
 
     public EntityDamageEvent(@NotNull final Entity damagee, @NotNull final DamageCause cause, final double damage) {
         this(damagee, cause, new EnumMap<DamageModifier, Double>(ImmutableMap.of(DamageModifier.BASE, damage)), new EnumMap<DamageModifier, Function<? super Double, Double>>(ImmutableMap.of(DamageModifier.BASE, ZERO)));
diff --git a/src/main/java/org/bukkit/event/entity/EntityDeathEvent.java b/src/main/java/org/bukkit/event/entity/EntityDeathEvent.java
index e19a3df9aa2204b44c0b029bda141ae6306f60a1..0d32a44f8f864684474845264dac7acb346d6f1e 100644
--- a/src/main/java/org/bukkit/event/entity/EntityDeathEvent.java
+++ b/src/main/java/org/bukkit/event/entity/EntityDeathEvent.java
@@ -12,7 +12,7 @@ import org.jetbrains.annotations.Nullable;
  */
 public class EntityDeathEvent extends EntityEvent implements org.bukkit.event.Cancellable {  // Paper - make cancellable
     private static final HandlerList handlers = new HandlerList();
-    private final List<ItemStack> drops;
+    private final @NotNull List<ItemStack> drops;
     private int dropExp = 0;
     // Paper start - make cancellable
     private boolean cancelled;
diff --git a/src/main/java/org/bukkit/event/entity/EntityDropItemEvent.java b/src/main/java/org/bukkit/event/entity/EntityDropItemEvent.java
index 3ccdcc755e76838046f169a6c2060adf825f2108..f850e20e81bd69ec9a2d577170f2ddb8353785c7 100644
--- a/src/main/java/org/bukkit/event/entity/EntityDropItemEvent.java
+++ b/src/main/java/org/bukkit/event/entity/EntityDropItemEvent.java
@@ -12,7 +12,7 @@ import org.jetbrains.annotations.NotNull;
 public class EntityDropItemEvent extends EntityEvent implements Cancellable {
 
     private static final HandlerList handlers = new HandlerList();
-    private final Item drop;
+    private final @NotNull Item drop;
     private boolean cancel = false;
 
     public EntityDropItemEvent(@NotNull final Entity entity, @NotNull final Item drop) {
diff --git a/src/main/java/org/bukkit/event/entity/EntityEnterBlockEvent.java b/src/main/java/org/bukkit/event/entity/EntityEnterBlockEvent.java
index d5bd804a58a07258c19e73700d2554b07a9a8cd7..850e4342353d41f8b394e2a5ba9b1ed29b7f01f0 100644
--- a/src/main/java/org/bukkit/event/entity/EntityEnterBlockEvent.java
+++ b/src/main/java/org/bukkit/event/entity/EntityEnterBlockEvent.java
@@ -17,7 +17,7 @@ import org.jetbrains.annotations.NotNull;
 public class EntityEnterBlockEvent extends EntityEvent implements Cancellable {
 
     private static final HandlerList handlers = new HandlerList();
-    private final Block block;
+    private final @NotNull Block block;
     private boolean cancel;
 
     public EntityEnterBlockEvent(@NotNull final Entity entity, @NotNull final Block block) {
diff --git a/src/main/java/org/bukkit/event/entity/EntityEnterLoveModeEvent.java b/src/main/java/org/bukkit/event/entity/EntityEnterLoveModeEvent.java
index 59aab10c2d27247eb77bd71d75b5f9126aa0fb12..8cc4c6a78c2467515e52eaea33cca77bf098bc40 100644
--- a/src/main/java/org/bukkit/event/entity/EntityEnterLoveModeEvent.java
+++ b/src/main/java/org/bukkit/event/entity/EntityEnterLoveModeEvent.java
@@ -17,7 +17,7 @@ public class EntityEnterLoveModeEvent extends EntityEvent implements Cancellable
 
     private static final HandlerList handlers = new HandlerList();
     private boolean cancel;
-    private final HumanEntity humanEntity;
+    private final @Nullable HumanEntity humanEntity;
     private int ticksInLove;
 
     public EntityEnterLoveModeEvent(@NotNull Animals animalInLove, @Nullable HumanEntity humanEntity, int ticksInLove) {
diff --git a/src/main/java/org/bukkit/event/entity/EntityExhaustionEvent.java b/src/main/java/org/bukkit/event/entity/EntityExhaustionEvent.java
index 2ff372d73e666ea4a19869fef7f452cefaf40b62..7e6c8756bd73ffe96c409fd258f86539f52b6bcd 100644
--- a/src/main/java/org/bukkit/event/entity/EntityExhaustionEvent.java
+++ b/src/main/java/org/bukkit/event/entity/EntityExhaustionEvent.java
@@ -13,7 +13,7 @@ import org.jetbrains.annotations.NotNull;
 public class EntityExhaustionEvent extends EntityEvent implements Cancellable {
 
     private static final HandlerList handlers = new HandlerList();
-    private final ExhaustionReason exhaustionReason;
+    private final @NotNull ExhaustionReason exhaustionReason;
     private float exhaustion;
     private boolean cancel;
 
diff --git a/src/main/java/org/bukkit/event/entity/EntityExplodeEvent.java b/src/main/java/org/bukkit/event/entity/EntityExplodeEvent.java
index 10d0e18dfd423b108fe381e8142867eb10399359..787f2a11300b5f374be1339b62c8f4284df17915 100644
--- a/src/main/java/org/bukkit/event/entity/EntityExplodeEvent.java
+++ b/src/main/java/org/bukkit/event/entity/EntityExplodeEvent.java
@@ -14,8 +14,8 @@ import org.jetbrains.annotations.NotNull;
 public class EntityExplodeEvent extends EntityEvent implements Cancellable {
     private static final HandlerList handlers = new HandlerList();
     private boolean cancel;
-    private final Location location;
-    private final List<Block> blocks;
+    private final @NotNull Location location;
+    private final @NotNull List<Block> blocks;
     private float yield;
 
     public EntityExplodeEvent(@NotNull final Entity what, @NotNull final Location location, @NotNull final List<Block> blocks, final float yield) {
diff --git a/src/main/java/org/bukkit/event/entity/EntityPickupItemEvent.java b/src/main/java/org/bukkit/event/entity/EntityPickupItemEvent.java
index c866df03d66dd8724e12c7353da4cf144c70b2c8..4986ca4a11da109e131d19ab58eaf66d868c7065 100644
--- a/src/main/java/org/bukkit/event/entity/EntityPickupItemEvent.java
+++ b/src/main/java/org/bukkit/event/entity/EntityPickupItemEvent.java
@@ -11,7 +11,7 @@ import org.jetbrains.annotations.NotNull;
  */
 public class EntityPickupItemEvent extends EntityEvent implements Cancellable {
     private static final HandlerList handlers = new HandlerList();
-    private final Item item;
+    private final @NotNull Item item;
     private boolean cancel = false;
     private final int remaining;
 
diff --git a/src/main/java/org/bukkit/event/entity/EntityPlaceEvent.java b/src/main/java/org/bukkit/event/entity/EntityPlaceEvent.java
index 327876e0ad7dcfeb71d9d22afe1c04bcd71c3bf9..2ca958ada7afe32ba5c547d01e80f7b238da1023 100644
--- a/src/main/java/org/bukkit/event/entity/EntityPlaceEvent.java
+++ b/src/main/java/org/bukkit/event/entity/EntityPlaceEvent.java
@@ -21,10 +21,10 @@ public class EntityPlaceEvent extends EntityEvent implements Cancellable {
 
     private static final HandlerList handlers = new HandlerList();
     private boolean cancelled;
-    private final Player player;
-    private final Block block;
-    private final BlockFace blockFace;
-    private final EquipmentSlot hand;
+    private final @Nullable Player player;
+    private final @NotNull Block block;
+    private final @NotNull BlockFace blockFace;
+    private final @NotNull EquipmentSlot hand;
 
     public EntityPlaceEvent(@NotNull final Entity entity, @Nullable final Player player, @NotNull final Block block, @NotNull final BlockFace blockFace, @NotNull final EquipmentSlot hand) {
         super(entity);
diff --git a/src/main/java/org/bukkit/event/entity/EntityPortalEnterEvent.java b/src/main/java/org/bukkit/event/entity/EntityPortalEnterEvent.java
index 6818e9f0ba32ca1a1e612703f7526b29f5a6438f..d0fd6515605f2242c8afd52a234ae73c0f35c4bd 100644
--- a/src/main/java/org/bukkit/event/entity/EntityPortalEnterEvent.java
+++ b/src/main/java/org/bukkit/event/entity/EntityPortalEnterEvent.java
@@ -10,7 +10,7 @@ import org.jetbrains.annotations.NotNull;
  */
 public class EntityPortalEnterEvent extends EntityEvent {
     private static final HandlerList handlers = new HandlerList();
-    private final Location location;
+    private final @NotNull Location location;
 
     public EntityPortalEnterEvent(@NotNull final Entity entity, @NotNull final Location location) {
         super(entity);
diff --git a/src/main/java/org/bukkit/event/entity/EntityPoseChangeEvent.java b/src/main/java/org/bukkit/event/entity/EntityPoseChangeEvent.java
index 6fb2b02ace143e8e9a12d5bef91c661939eaf950..b6371eeb15c0b26be9aa166545d0dd5ed1d21ced 100644
--- a/src/main/java/org/bukkit/event/entity/EntityPoseChangeEvent.java
+++ b/src/main/java/org/bukkit/event/entity/EntityPoseChangeEvent.java
@@ -14,7 +14,7 @@ public class EntityPoseChangeEvent extends EntityEvent {
 
     private static final HandlerList handlers = new HandlerList();
     //
-    private final Pose pose;
+    private final @NotNull Pose pose;
 
     public EntityPoseChangeEvent(@NotNull Entity who, @NotNull Pose pose) {
         super(who);
diff --git a/src/main/java/org/bukkit/event/entity/EntityPotionEffectEvent.java b/src/main/java/org/bukkit/event/entity/EntityPotionEffectEvent.java
index 01c5e8b71338fbb4b1605e45bf2a2e705188f6b5..303bf48334b5d53022ee30d980de370921622fe9 100644
--- a/src/main/java/org/bukkit/event/entity/EntityPotionEffectEvent.java
+++ b/src/main/java/org/bukkit/event/entity/EntityPotionEffectEvent.java
@@ -18,10 +18,10 @@ public class EntityPotionEffectEvent extends EntityEvent implements Cancellable
 
     private static final HandlerList handlers = new HandlerList();
     private boolean cancel;
-    private final PotionEffect oldEffect;
-    private final PotionEffect newEffect;
-    private final Cause cause;
-    private final Action action;
+    private final @Nullable PotionEffect oldEffect;
+    private final @Nullable PotionEffect newEffect;
+    private final @NotNull Cause cause;
+    private final @NotNull Action action;
     private boolean override;
 
     @Contract("_, null, null, _, _, _ -> fail")
diff --git a/src/main/java/org/bukkit/event/entity/EntityRegainHealthEvent.java b/src/main/java/org/bukkit/event/entity/EntityRegainHealthEvent.java
index 7ecff9fcee19fc94be784474fea620e5dd434731..a374a839d1b120a3b47962a581a9ca03671a4483 100644
--- a/src/main/java/org/bukkit/event/entity/EntityRegainHealthEvent.java
+++ b/src/main/java/org/bukkit/event/entity/EntityRegainHealthEvent.java
@@ -12,7 +12,7 @@ public class EntityRegainHealthEvent extends EntityEvent implements Cancellable
     private static final HandlerList handlers = new HandlerList();
     private boolean cancelled;
     private double amount;
-    private final RegainReason regainReason;
+    private final @NotNull RegainReason regainReason;
     private final boolean isFastRegen; // Paper
 
     public EntityRegainHealthEvent(@NotNull final Entity entity, final double amount, @NotNull final RegainReason regainReason) {
diff --git a/src/main/java/org/bukkit/event/entity/EntityResurrectEvent.java b/src/main/java/org/bukkit/event/entity/EntityResurrectEvent.java
index 2f6ad5c2fc7ae7cf22cb424df3543c24f3ee6ebe..79efd9a1bb609b5d828cb1c741830e531475baf0 100644
--- a/src/main/java/org/bukkit/event/entity/EntityResurrectEvent.java
+++ b/src/main/java/org/bukkit/event/entity/EntityResurrectEvent.java
@@ -18,7 +18,7 @@ public class EntityResurrectEvent extends EntityEvent implements Cancellable {
     //
     private boolean cancelled;
 
-    private final EquipmentSlot hand;
+    private final @Nullable EquipmentSlot hand;
 
     public EntityResurrectEvent(@NotNull LivingEntity what, @Nullable EquipmentSlot hand) {
         super(what);
diff --git a/src/main/java/org/bukkit/event/entity/EntityShootBowEvent.java b/src/main/java/org/bukkit/event/entity/EntityShootBowEvent.java
index 719d0d878320c1903b44076053989ba99fa0e92a..401b95c308bcd24c2a4cf46dbd5674f5a75a9844 100644
--- a/src/main/java/org/bukkit/event/entity/EntityShootBowEvent.java
+++ b/src/main/java/org/bukkit/event/entity/EntityShootBowEvent.java
@@ -15,10 +15,10 @@ import org.jetbrains.annotations.Nullable;
  */
 public class EntityShootBowEvent extends EntityEvent implements Cancellable {
     private static final HandlerList handlers = new HandlerList();
-    private final ItemStack bow;
-    private final ItemStack consumable;
+    private final @Nullable ItemStack bow;
+    private final @Nullable ItemStack consumable;
     private Entity projectile;
-    private final EquipmentSlot hand;
+    private final @NotNull EquipmentSlot hand;
     private final float force;
     private boolean consumeItem;
     private boolean cancelled;
diff --git a/src/main/java/org/bukkit/event/entity/EntitySpellCastEvent.java b/src/main/java/org/bukkit/event/entity/EntitySpellCastEvent.java
index 0252ca7aeda9d8adc7c211575b5de698f4d520a0..eec6aa4958d0f77707c2c6d53581c5bb70ca23bb 100644
--- a/src/main/java/org/bukkit/event/entity/EntitySpellCastEvent.java
+++ b/src/main/java/org/bukkit/event/entity/EntitySpellCastEvent.java
@@ -13,7 +13,7 @@ public class EntitySpellCastEvent extends EntityEvent implements Cancellable {
     private static final HandlerList handlers = new HandlerList();
     //
     private boolean cancelled = false;
-    private final Spellcaster.Spell spell;
+    private final Spellcaster.@NotNull Spell spell;
 
     public EntitySpellCastEvent(@NotNull Spellcaster what, @NotNull Spellcaster.Spell spell) {
         super(what);
diff --git a/src/main/java/org/bukkit/event/entity/EntityTameEvent.java b/src/main/java/org/bukkit/event/entity/EntityTameEvent.java
index c410b48c2f9db17654e202b681a669d9aafba8c8..7c6d751de25a0f012c82e03e3e279e3e5bac6b3d 100644
--- a/src/main/java/org/bukkit/event/entity/EntityTameEvent.java
+++ b/src/main/java/org/bukkit/event/entity/EntityTameEvent.java
@@ -12,7 +12,7 @@ import org.jetbrains.annotations.NotNull;
 public class EntityTameEvent extends EntityEvent implements Cancellable {
     private static final HandlerList handlers = new HandlerList();
     private boolean cancelled;
-    private final AnimalTamer owner;
+    private final @NotNull AnimalTamer owner;
 
     public EntityTameEvent(@NotNull final LivingEntity entity, @NotNull final AnimalTamer owner) {
         super(entity);
diff --git a/src/main/java/org/bukkit/event/entity/EntityTargetEvent.java b/src/main/java/org/bukkit/event/entity/EntityTargetEvent.java
index 601904150156d475c18286b485f3409307a75950..6c4d20894d3e3eb8f337ddbdf191dc667bdbb626 100644
--- a/src/main/java/org/bukkit/event/entity/EntityTargetEvent.java
+++ b/src/main/java/org/bukkit/event/entity/EntityTargetEvent.java
@@ -12,8 +12,8 @@ import org.jetbrains.annotations.Nullable;
 public class EntityTargetEvent extends EntityEvent implements Cancellable {
     private static final HandlerList handlers = new HandlerList();
     private boolean cancel = false;
-    private Entity target;
-    private final TargetReason reason;
+    private @Nullable Entity target;
+    private final @NotNull TargetReason reason;
 
     public EntityTargetEvent(@NotNull final Entity entity, @Nullable final Entity target, @NotNull final TargetReason reason) {
         super(entity);
diff --git a/src/main/java/org/bukkit/event/entity/EntityTeleportEvent.java b/src/main/java/org/bukkit/event/entity/EntityTeleportEvent.java
index a7918049ae599a583a9188d90eb86922fd948296..e5c080a2c42a563f0621d231d6a630a8da60f27e 100644
--- a/src/main/java/org/bukkit/event/entity/EntityTeleportEvent.java
+++ b/src/main/java/org/bukkit/event/entity/EntityTeleportEvent.java
@@ -17,7 +17,7 @@ public class EntityTeleportEvent extends EntityEvent implements Cancellable {
     private static final HandlerList handlers = new HandlerList();
     private boolean cancel;
     private Location from;
-    private Location to;
+    private @Nullable Location to;
 
     public EntityTeleportEvent(@NotNull Entity what, @NotNull Location from, @Nullable Location to) {
         super(what);
diff --git a/src/main/java/org/bukkit/event/entity/EntityTransformEvent.java b/src/main/java/org/bukkit/event/entity/EntityTransformEvent.java
index 1592aac603eb839607c7a1faa6437e442ab8fb30..90bc9ad896dfc8e78d9118648b8039eb153d8a07 100644
--- a/src/main/java/org/bukkit/event/entity/EntityTransformEvent.java
+++ b/src/main/java/org/bukkit/event/entity/EntityTransformEvent.java
@@ -15,8 +15,8 @@ public class EntityTransformEvent extends EntityEvent implements Cancellable {
     private static final HandlerList handlers = new HandlerList();
     private boolean cancelled;
     private final Entity converted;
-    private final List<Entity> convertedList;
-    private final TransformReason transformReason;
+    private final @NotNull List<Entity> convertedList;
+    private final @NotNull TransformReason transformReason;
 
     public EntityTransformEvent(@NotNull Entity original, @NotNull List<Entity> convertedList, @NotNull TransformReason transformReason) {
         super(original);
diff --git a/src/main/java/org/bukkit/event/entity/EntityUnleashEvent.java b/src/main/java/org/bukkit/event/entity/EntityUnleashEvent.java
index 95248d0f5cf9b62d31a4883955b9088a7fc8a3b3..bfcdbd2c82fa595d825d69c2da57b4b0dc238f3c 100644
--- a/src/main/java/org/bukkit/event/entity/EntityUnleashEvent.java
+++ b/src/main/java/org/bukkit/event/entity/EntityUnleashEvent.java
@@ -17,7 +17,7 @@ import org.jetbrains.annotations.NotNull;
  */
 public class EntityUnleashEvent extends EntityEvent implements org.bukkit.event.Cancellable { // Paper
     private static final HandlerList handlers = new HandlerList();
-    private final UnleashReason reason;
+    private final @NotNull UnleashReason reason;
     private boolean dropLeash; // Paper
     private boolean cancelled; // Paper
 
diff --git a/src/main/java/org/bukkit/event/entity/FoodLevelChangeEvent.java b/src/main/java/org/bukkit/event/entity/FoodLevelChangeEvent.java
index 7f4c5ea8607b08f8676528cc71b0b312575809ed..18b2c73f41a4e4f8d5c20df19b7dbb16f55a3d38 100644
--- a/src/main/java/org/bukkit/event/entity/FoodLevelChangeEvent.java
+++ b/src/main/java/org/bukkit/event/entity/FoodLevelChangeEvent.java
@@ -14,7 +14,7 @@ public class FoodLevelChangeEvent extends EntityEvent implements Cancellable {
     private static final HandlerList handlers = new HandlerList();
     private boolean cancel = false;
     private int level;
-    private final ItemStack item;
+    private final @Nullable ItemStack item;
 
     public FoodLevelChangeEvent(@NotNull final HumanEntity what, final int level) {
         this(what, level, null);
diff --git a/src/main/java/org/bukkit/event/entity/ItemDespawnEvent.java b/src/main/java/org/bukkit/event/entity/ItemDespawnEvent.java
index 6fc66197eb2c5d59c70d8d028b7963748371edbe..d9a911d749950766b0629acfeded3800abd7f98f 100644
--- a/src/main/java/org/bukkit/event/entity/ItemDespawnEvent.java
+++ b/src/main/java/org/bukkit/event/entity/ItemDespawnEvent.java
@@ -16,7 +16,7 @@ import org.jetbrains.annotations.NotNull;
 public class ItemDespawnEvent extends EntityEvent implements Cancellable {
     private static final HandlerList handlers = new HandlerList();
     private boolean canceled;
-    private final Location location;
+    private final @NotNull Location location;
 
     public ItemDespawnEvent(@NotNull final Item despawnee, @NotNull final Location loc) {
         super(despawnee);
diff --git a/src/main/java/org/bukkit/event/entity/ItemMergeEvent.java b/src/main/java/org/bukkit/event/entity/ItemMergeEvent.java
index e378cc29b47238fe12ae9aff5171edcff6b456f5..7443e4b90f4d184f6e1754d0ff9bd569164e54d2 100644
--- a/src/main/java/org/bukkit/event/entity/ItemMergeEvent.java
+++ b/src/main/java/org/bukkit/event/entity/ItemMergeEvent.java
@@ -9,7 +9,7 @@ public class ItemMergeEvent extends EntityEvent implements Cancellable {
 
     private static final HandlerList handlers = new HandlerList();
     private boolean cancelled;
-    private final Item target;
+    private final @NotNull Item target;
 
     public ItemMergeEvent(@NotNull Item item, @NotNull Item target) {
         super(item);
diff --git a/src/main/java/org/bukkit/event/entity/LingeringPotionSplashEvent.java b/src/main/java/org/bukkit/event/entity/LingeringPotionSplashEvent.java
index a10dab1671b6e0c8c4dfa37b10cf928a4edfb8ce..4e0a5aa1d6697e52159c0dc3e9bd375a1a36d81d 100644
--- a/src/main/java/org/bukkit/event/entity/LingeringPotionSplashEvent.java
+++ b/src/main/java/org/bukkit/event/entity/LingeringPotionSplashEvent.java
@@ -12,7 +12,7 @@ import org.jetbrains.annotations.NotNull;
 public class LingeringPotionSplashEvent extends ProjectileHitEvent implements Cancellable {
     private static final HandlerList handlers = new HandlerList();
     private boolean cancelled;
-    private final AreaEffectCloud entity;
+    private final @NotNull AreaEffectCloud entity;
 
     public LingeringPotionSplashEvent(@NotNull final ThrownPotion potion, @NotNull final AreaEffectCloud entity) {
         super(potion);
diff --git a/src/main/java/org/bukkit/event/entity/PigZapEvent.java b/src/main/java/org/bukkit/event/entity/PigZapEvent.java
index d3949edfc736b3d67a627ef378748b374769e183..2bb0c265253a8d1c234e7650ab79c6a538f43609 100644
--- a/src/main/java/org/bukkit/event/entity/PigZapEvent.java
+++ b/src/main/java/org/bukkit/event/entity/PigZapEvent.java
@@ -16,8 +16,8 @@ import org.jetbrains.annotations.NotNull;
 public class PigZapEvent extends EntityZapEvent implements Cancellable {
     //private static final HandlerList handlers = new HandlerList();
     private boolean canceled;
-    private final PigZombie pigzombie;
-    private final LightningStrike bolt;
+    private final @NotNull PigZombie pigzombie;
+    private final @NotNull LightningStrike bolt;
 
     public PigZapEvent(@NotNull final Pig pig, @NotNull final LightningStrike bolt, @NotNull final PigZombie pigzombie) {
         super(pig, bolt, pigzombie);
diff --git a/src/main/java/org/bukkit/event/entity/PigZombieAngerEvent.java b/src/main/java/org/bukkit/event/entity/PigZombieAngerEvent.java
index bb4f13bbb23893a6ac2d898394cc9d2d6af965c4..70b9423f4ebe8fe5876a30f36caa5f8489ecb312 100644
--- a/src/main/java/org/bukkit/event/entity/PigZombieAngerEvent.java
+++ b/src/main/java/org/bukkit/event/entity/PigZombieAngerEvent.java
@@ -16,7 +16,7 @@ public class PigZombieAngerEvent extends EntityEvent implements Cancellable {
 
     private static final HandlerList handlers = new HandlerList();
     private boolean canceled;
-    private final Entity target;
+    private final @Nullable Entity target;
     private int newAnger;
 
     public PigZombieAngerEvent(@NotNull final PigZombie pigZombie, @Nullable final Entity target, final int newAnger) {
diff --git a/src/main/java/org/bukkit/event/entity/PiglinBarterEvent.java b/src/main/java/org/bukkit/event/entity/PiglinBarterEvent.java
index c17ff41a688b2cbd877cda25d4ec033ac8ef5524..05e96d239e1dbbc770c014514bcb05582e91edaa 100644
--- a/src/main/java/org/bukkit/event/entity/PiglinBarterEvent.java
+++ b/src/main/java/org/bukkit/event/entity/PiglinBarterEvent.java
@@ -17,8 +17,8 @@ public class PiglinBarterEvent extends EntityEvent implements Cancellable {
 
     private static final HandlerList handlers = new HandlerList();
     private boolean cancelled;
-    private final List<ItemStack> outcome;
-    private final ItemStack input;
+    private final @NotNull List<ItemStack> outcome;
+    private final @NotNull ItemStack input;
 
     public PiglinBarterEvent(@NotNull Piglin what, @NotNull ItemStack input, @NotNull List<ItemStack> outcome) {
         super(what);
diff --git a/src/main/java/org/bukkit/event/entity/PlayerDeathEvent.java b/src/main/java/org/bukkit/event/entity/PlayerDeathEvent.java
index d5eeb37d331e205826aa6199bd481cb0db40d721..7c6365cae6a541bddff141810d770945947569ba 100644
--- a/src/main/java/org/bukkit/event/entity/PlayerDeathEvent.java
+++ b/src/main/java/org/bukkit/event/entity/PlayerDeathEvent.java
@@ -13,8 +13,8 @@ import org.jetbrains.annotations.Nullable;
  */
 public class PlayerDeathEvent extends EntityDeathEvent {
     private int newExp = 0;
-    private String deathMessage = "";
-    private net.kyori.adventure.text.Component adventure$deathMessage; // Paper
+    private @Nullable String deathMessage = "";
+    private net.kyori.adventure.text.@Nullable Component adventure$deathMessage; // Paper
     private int newLevel = 0;
     private int newTotalExp = 0;
     private boolean keepLevel = false;
@@ -71,7 +71,7 @@ public class PlayerDeathEvent extends EntityDeathEvent {
 
     @Deprecated // Paper
     // Paper start
-    private List<ItemStack> itemsToKeep = new java.util.ArrayList<>();
+    private @NotNull List<ItemStack> itemsToKeep = new java.util.ArrayList<>();
 
     /**
      * A mutable collection to add items that the player should retain in their inventory on death (Similar to KeepInventory game rule)
@@ -180,7 +180,7 @@ public class PlayerDeathEvent extends EntityDeathEvent {
         return this.deathMessage != null ? this.deathMessage : (this.adventure$deathMessage != null ? getDeathMessageString(this.adventure$deathMessage) : null); // Paper
     }
     // Paper start //TODO: add translation API to drop String deathMessage in favor of just Adventure
-    private static String getDeathMessageString(net.kyori.adventure.text.Component component) {
+    private static @NotNull String getDeathMessageString(net.kyori.adventure.text.@NotNull Component component) {
         return net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().serialize(component);
     }
     // Paper end
diff --git a/src/main/java/org/bukkit/event/entity/PlayerLeashEntityEvent.java b/src/main/java/org/bukkit/event/entity/PlayerLeashEntityEvent.java
index 883d54dc0cc32973df5d66f2991d1af8150add43..e3d77dd9973512e58863504c08e939482cd282f2 100644
--- a/src/main/java/org/bukkit/event/entity/PlayerLeashEntityEvent.java
+++ b/src/main/java/org/bukkit/event/entity/PlayerLeashEntityEvent.java
@@ -13,11 +13,11 @@ import org.jetbrains.annotations.NotNull;
  */
 public class PlayerLeashEntityEvent extends Event implements Cancellable {
     private static final HandlerList handlers = new HandlerList();
-    private final Entity leashHolder;
-    private final Entity entity;
+    private final @NotNull Entity leashHolder;
+    private final @NotNull Entity entity;
     private boolean cancelled = false;
-    private final Player player;
-    private final EquipmentSlot hand;
+    private final @NotNull Player player;
+    private final @NotNull EquipmentSlot hand;
 
     public PlayerLeashEntityEvent(@NotNull Entity what, @NotNull Entity leashHolder, @NotNull Player leasher, @NotNull EquipmentSlot hand) {
         this.leashHolder = leashHolder;
diff --git a/src/main/java/org/bukkit/event/entity/PotionSplashEvent.java b/src/main/java/org/bukkit/event/entity/PotionSplashEvent.java
index 97d94aba0a8e86e055abd836dd868b8fe8a486bd..c952744cc65e3bf0e7a09ad5456b351bfb5ef286 100644
--- a/src/main/java/org/bukkit/event/entity/PotionSplashEvent.java
+++ b/src/main/java/org/bukkit/event/entity/PotionSplashEvent.java
@@ -16,7 +16,7 @@ import org.jetbrains.annotations.NotNull;
 public class PotionSplashEvent extends ProjectileHitEvent implements Cancellable {
     private static final HandlerList handlers = new HandlerList();
     private boolean cancelled;
-    protected final Map<LivingEntity, Double> affectedEntities; // Paper
+    protected final @NotNull Map<LivingEntity, Double> affectedEntities; // Paper
 
     public PotionSplashEvent(@NotNull final ThrownPotion potion, @NotNull final Map<LivingEntity, Double> affectedEntities) {
         super(potion);
diff --git a/src/main/java/org/bukkit/event/entity/ProjectileHitEvent.java b/src/main/java/org/bukkit/event/entity/ProjectileHitEvent.java
index 775e3223aa5054f1883403e50c8f2241d97b1285..c9c815ffb5548b39bd5dd47a7dda73ef3de5183c 100644
--- a/src/main/java/org/bukkit/event/entity/ProjectileHitEvent.java
+++ b/src/main/java/org/bukkit/event/entity/ProjectileHitEvent.java
@@ -14,9 +14,9 @@ import org.jetbrains.annotations.Nullable;
  */
 public class ProjectileHitEvent extends EntityEvent implements Cancellable {
     private static final HandlerList handlers = new HandlerList();
-    private final Entity hitEntity;
-    private final Block hitBlock;
-    private final BlockFace hitFace;
+    private final @Nullable Entity hitEntity;
+    private final @Nullable Block hitBlock;
+    private final @Nullable BlockFace hitFace;
     private boolean cancel = false;
 
     public ProjectileHitEvent(@NotNull final Projectile projectile) {
diff --git a/src/main/java/org/bukkit/event/entity/SpawnerSpawnEvent.java b/src/main/java/org/bukkit/event/entity/SpawnerSpawnEvent.java
index 9353f0d09272404f42167ab8b7ad83a03620c436..a03e8fbf2bf12502ea50d17ddae08c197dac9b3e 100644
--- a/src/main/java/org/bukkit/event/entity/SpawnerSpawnEvent.java
+++ b/src/main/java/org/bukkit/event/entity/SpawnerSpawnEvent.java
@@ -10,7 +10,7 @@ import org.jetbrains.annotations.NotNull;
  * If a Spawner Spawn event is cancelled, the entity will not spawn.
  */
 public class SpawnerSpawnEvent extends EntitySpawnEvent {
-    private final CreatureSpawner spawner;
+    private final @NotNull CreatureSpawner spawner;
 
     public SpawnerSpawnEvent(@NotNull final Entity spawnee, @NotNull final CreatureSpawner spawner) {
         super(spawnee);
diff --git a/src/main/java/org/bukkit/event/entity/VillagerCareerChangeEvent.java b/src/main/java/org/bukkit/event/entity/VillagerCareerChangeEvent.java
index 346899bc0e32dc121e398281178c12da4bd2a3e9..e4b9d608438842b24a38c324221239eac26f722b 100644
--- a/src/main/java/org/bukkit/event/entity/VillagerCareerChangeEvent.java
+++ b/src/main/java/org/bukkit/event/entity/VillagerCareerChangeEvent.java
@@ -11,7 +11,7 @@ public class VillagerCareerChangeEvent extends EntityEvent implements Cancellabl
     private static final HandlerList handlers = new HandlerList();
     private boolean cancelled;
     private Profession profession;
-    private final ChangeReason reason;
+    private final @NotNull ChangeReason reason;
 
     public VillagerCareerChangeEvent(@NotNull Villager what, @NotNull Profession profession, @NotNull ChangeReason reason) {
         super(what);
diff --git a/src/main/java/org/bukkit/event/hanging/HangingBreakByEntityEvent.java b/src/main/java/org/bukkit/event/hanging/HangingBreakByEntityEvent.java
index 68517811f63838bdad41073ee26be82f95042a8e..0c84d4d846738d84e5349bd6f2d704233ee63f62 100644
--- a/src/main/java/org/bukkit/event/hanging/HangingBreakByEntityEvent.java
+++ b/src/main/java/org/bukkit/event/hanging/HangingBreakByEntityEvent.java
@@ -9,7 +9,7 @@ import org.jetbrains.annotations.Nullable;
  * Triggered when a hanging entity is removed by an entity
  */
 public class HangingBreakByEntityEvent extends HangingBreakEvent {
-    private final Entity remover;
+    private final @Nullable Entity remover;
 
     public HangingBreakByEntityEvent(@NotNull final Hanging hanging, @Nullable final Entity remover) {
         this(hanging, remover, HangingBreakEvent.RemoveCause.ENTITY);
diff --git a/src/main/java/org/bukkit/event/hanging/HangingBreakEvent.java b/src/main/java/org/bukkit/event/hanging/HangingBreakEvent.java
index 16d8196e1fd0f82c48312cd2b38a891202a94417..17b6a140eadb7d5c745a12d9499e17245973b044 100644
--- a/src/main/java/org/bukkit/event/hanging/HangingBreakEvent.java
+++ b/src/main/java/org/bukkit/event/hanging/HangingBreakEvent.java
@@ -11,7 +11,7 @@ import org.jetbrains.annotations.NotNull;
 public class HangingBreakEvent extends HangingEvent implements Cancellable {
     private static final HandlerList handlers = new HandlerList();
     private boolean cancelled;
-    private final HangingBreakEvent.RemoveCause cause;
+    private final HangingBreakEvent.@NotNull RemoveCause cause;
 
     public HangingBreakEvent(@NotNull final Hanging hanging, @NotNull final HangingBreakEvent.RemoveCause cause) {
         super(hanging);
diff --git a/src/main/java/org/bukkit/event/hanging/HangingPlaceEvent.java b/src/main/java/org/bukkit/event/hanging/HangingPlaceEvent.java
index cc5781f276ec0a503b1bfef19d630c85db897c2a..def033382ecf3f0a11c9195a71525998e3cbf4a4 100644
--- a/src/main/java/org/bukkit/event/hanging/HangingPlaceEvent.java
+++ b/src/main/java/org/bukkit/event/hanging/HangingPlaceEvent.java
@@ -17,11 +17,11 @@ import org.jetbrains.annotations.Nullable;
 public class HangingPlaceEvent extends HangingEvent implements Cancellable {
     private static final HandlerList handlers = new HandlerList();
     private boolean cancelled;
-    private final Player player;
-    private final Block block;
-    private final BlockFace blockFace;
-    private final EquipmentSlot hand;
-    private final ItemStack itemStack;
+    private final @Nullable Player player;
+    private final @NotNull Block block;
+    private final @NotNull BlockFace blockFace;
+    private final @Nullable EquipmentSlot hand;
+    private final @Nullable ItemStack itemStack;
 
     @Deprecated
     public HangingPlaceEvent(@NotNull final Hanging hanging, @Nullable final Player player, @NotNull final Block block, @NotNull final BlockFace blockFace, @Nullable final EquipmentSlot hand) {
diff --git a/src/main/java/org/bukkit/event/inventory/BrewEvent.java b/src/main/java/org/bukkit/event/inventory/BrewEvent.java
index f37cc5dee0bf678444be12c4acc61182d3d72fe0..d59aa9c8c97d0c2b17d784e29935f875699584cf 100644
--- a/src/main/java/org/bukkit/event/inventory/BrewEvent.java
+++ b/src/main/java/org/bukkit/event/inventory/BrewEvent.java
@@ -16,7 +16,7 @@ import org.jetbrains.annotations.NotNull;
 public class BrewEvent extends BlockEvent implements Cancellable {
     private static final HandlerList handlers = new HandlerList();
     private BrewerInventory contents;
-    private final List<ItemStack> results;
+    private final @NotNull List<ItemStack> results;
     private int fuelLevel;
     private boolean cancelled;
 
diff --git a/src/main/java/org/bukkit/event/inventory/BrewingStandFuelEvent.java b/src/main/java/org/bukkit/event/inventory/BrewingStandFuelEvent.java
index 633ec5187175ed59d41ee9ee52e7f5e277ea910d..37802648299b00ee643d1d130005426a2977ec35 100644
--- a/src/main/java/org/bukkit/event/inventory/BrewingStandFuelEvent.java
+++ b/src/main/java/org/bukkit/event/inventory/BrewingStandFuelEvent.java
@@ -14,7 +14,7 @@ import org.jetbrains.annotations.NotNull;
 public class BrewingStandFuelEvent extends BlockEvent implements Cancellable {
 
     private static final HandlerList handlers = new HandlerList();
-    private final ItemStack fuel;
+    private final @NotNull ItemStack fuel;
     private int fuelPower;
     private boolean cancelled;
     private boolean consuming = true;
diff --git a/src/main/java/org/bukkit/event/inventory/FurnaceBurnEvent.java b/src/main/java/org/bukkit/event/inventory/FurnaceBurnEvent.java
index caef53d0f6546516fa7aabb2cb3abed70808b3ba..20660ef464920be31f7742871b64c890d9bba955 100644
--- a/src/main/java/org/bukkit/event/inventory/FurnaceBurnEvent.java
+++ b/src/main/java/org/bukkit/event/inventory/FurnaceBurnEvent.java
@@ -12,7 +12,7 @@ import org.jetbrains.annotations.NotNull;
  */
 public class FurnaceBurnEvent extends BlockEvent implements Cancellable {
     private static final HandlerList handlers = new HandlerList();
-    private final ItemStack fuel;
+    private final @NotNull ItemStack fuel;
     private int burnTime;
     private boolean cancelled;
     private boolean burning;
diff --git a/src/main/java/org/bukkit/event/inventory/FurnaceExtractEvent.java b/src/main/java/org/bukkit/event/inventory/FurnaceExtractEvent.java
index 020739697a0b535cad0b15b574f77cdabbdfa3eb..5b049b9dc15b185e60cbf91ab366140081868cbe 100644
--- a/src/main/java/org/bukkit/event/inventory/FurnaceExtractEvent.java
+++ b/src/main/java/org/bukkit/event/inventory/FurnaceExtractEvent.java
@@ -10,8 +10,8 @@ import org.jetbrains.annotations.NotNull;
  * This event is called when a player takes items out of the furnace
  */
 public class FurnaceExtractEvent extends BlockExpEvent {
-    private final Player player;
-    private final Material itemType;
+    private final @NotNull Player player;
+    private final @NotNull Material itemType;
     private final int itemAmount;
 
     public FurnaceExtractEvent(@NotNull Player player, @NotNull Block block, @NotNull Material itemType, int itemAmount, int exp) {
diff --git a/src/main/java/org/bukkit/event/inventory/FurnaceStartSmeltEvent.java b/src/main/java/org/bukkit/event/inventory/FurnaceStartSmeltEvent.java
index f13f1b4daa99fb86b60acc94d0406dcd8cb4d98b..e3c9d58e79ca2f4ee1d978d71583e51873dcf70d 100644
--- a/src/main/java/org/bukkit/event/inventory/FurnaceStartSmeltEvent.java
+++ b/src/main/java/org/bukkit/event/inventory/FurnaceStartSmeltEvent.java
@@ -9,8 +9,8 @@ import org.jetbrains.annotations.NotNull;
 
 public class FurnaceStartSmeltEvent extends BlockEvent {
     private static final HandlerList handlers = new HandlerList();
-    private final ItemStack source;
-    private final CookingRecipe<?> recipe;
+    private final @NotNull ItemStack source;
+    private final @NotNull CookingRecipe<?> recipe;
     private int totalCookTime;
 
     @Deprecated // Paper - furnace cook speed multiplier
diff --git a/src/main/java/org/bukkit/event/inventory/InventoryClickEvent.java b/src/main/java/org/bukkit/event/inventory/InventoryClickEvent.java
index 79797a2be7fb139d528116d34d13e51d39b96e56..d612f38442fac649c4fa63ea879e3cbc70878a7e 100644
--- a/src/main/java/org/bukkit/event/inventory/InventoryClickEvent.java
+++ b/src/main/java/org/bukkit/event/inventory/InventoryClickEvent.java
@@ -47,12 +47,12 @@ import org.jetbrains.annotations.Nullable;
  */
 public class InventoryClickEvent extends InventoryInteractEvent {
     private static final HandlerList handlers = new HandlerList();
-    private final ClickType click;
-    private final InventoryAction action;
+    private final @NotNull ClickType click;
+    private final @NotNull InventoryAction action;
     private SlotType slot_type;
     private int whichSlot;
     private int rawSlot;
-    private ItemStack current = null;
+    private @Nullable ItemStack current = null;
     private int hotbarKey = -1;
 
     public InventoryClickEvent(@NotNull InventoryView view, @NotNull SlotType type, int slot, @NotNull ClickType click, @NotNull InventoryAction action) {
diff --git a/src/main/java/org/bukkit/event/inventory/InventoryCloseEvent.java b/src/main/java/org/bukkit/event/inventory/InventoryCloseEvent.java
index 21ad8888c0e403bfc63518502577d651c02dda05..148ed12fb84231da6da88ac0303f5c39b5e55b5c 100644
--- a/src/main/java/org/bukkit/event/inventory/InventoryCloseEvent.java
+++ b/src/main/java/org/bukkit/event/inventory/InventoryCloseEvent.java
@@ -12,7 +12,7 @@ import org.jetbrains.annotations.NotNull;
 public class InventoryCloseEvent extends InventoryEvent {
     private static final HandlerList handlers = new HandlerList();
     // Paper start
-    private final Reason reason;
+    private final @NotNull Reason reason;
     @NotNull
     public Reason getReason() {
         return reason;
diff --git a/src/main/java/org/bukkit/event/inventory/InventoryDragEvent.java b/src/main/java/org/bukkit/event/inventory/InventoryDragEvent.java
index da37e0ddf905593be9532a2ec322086aad947c3b..deef4e50872d02f572bf0db4d95ea727b3a029b8 100644
--- a/src/main/java/org/bukkit/event/inventory/InventoryDragEvent.java
+++ b/src/main/java/org/bukkit/event/inventory/InventoryDragEvent.java
@@ -56,11 +56,11 @@ import org.jetbrains.annotations.Nullable;
  */
 public class InventoryDragEvent extends InventoryInteractEvent {
     private static final HandlerList handlers = new HandlerList();
-    private final DragType type;
-    private final Map<Integer, ItemStack> addedItems;
-    private final Set<Integer> containerSlots;
-    private final ItemStack oldCursor;
-    private ItemStack newCursor;
+    private final @NotNull DragType type;
+    private final @NotNull Map<Integer, ItemStack> addedItems;
+    private final @NotNull Set<Integer> containerSlots;
+    private final @NotNull ItemStack oldCursor;
+    private @Nullable ItemStack newCursor;
 
     public InventoryDragEvent(@NotNull InventoryView what, @Nullable ItemStack newCursor, @NotNull ItemStack oldCursor, boolean right, @NotNull Map<Integer, ItemStack> slots) {
         super(what);
diff --git a/src/main/java/org/bukkit/event/inventory/InventoryInteractEvent.java b/src/main/java/org/bukkit/event/inventory/InventoryInteractEvent.java
index 14f821ca1da3fb9ceb97a4624528371e1b401aea..dee4f5f7e35ae4f68f9f435a51f301818a2b9a2e 100644
--- a/src/main/java/org/bukkit/event/inventory/InventoryInteractEvent.java
+++ b/src/main/java/org/bukkit/event/inventory/InventoryInteractEvent.java
@@ -10,7 +10,7 @@ import org.jetbrains.annotations.NotNull;
  * HumanEntity and the contents of an Inventory.
  */
 public abstract class InventoryInteractEvent extends InventoryEvent implements Cancellable {
-    private Result result = Result.DEFAULT;
+    private @NotNull Result result = Result.DEFAULT;
 
     public InventoryInteractEvent(@NotNull InventoryView transaction) {
         super(transaction);
diff --git a/src/main/java/org/bukkit/event/inventory/InventoryMoveItemEvent.java b/src/main/java/org/bukkit/event/inventory/InventoryMoveItemEvent.java
index 95e51bcf5dfd27cc9012d7542c4ed1bceca29626..308e664b42d413b38da72c6b9cd8f397a59cdd0c 100644
--- a/src/main/java/org/bukkit/event/inventory/InventoryMoveItemEvent.java
+++ b/src/main/java/org/bukkit/event/inventory/InventoryMoveItemEvent.java
@@ -27,8 +27,8 @@ import org.jetbrains.annotations.NotNull;
 public class InventoryMoveItemEvent extends Event implements Cancellable {
     private static final HandlerList handlers = new HandlerList();
     private boolean cancelled;
-    private final Inventory sourceInventory;
-    private final Inventory destinationInventory;
+    private final @NotNull Inventory sourceInventory;
+    private final @NotNull Inventory destinationInventory;
     private ItemStack itemStack;
     private final boolean didSourceInitiate;
     public boolean calledGetItem; // Paper
diff --git a/src/main/java/org/bukkit/event/inventory/InventoryPickupItemEvent.java b/src/main/java/org/bukkit/event/inventory/InventoryPickupItemEvent.java
index 1ffac4d58e0943a56f993c2609fa7142ec116921..cd10a36b4d018760e7a0728ae7fba6016cedf39e 100644
--- a/src/main/java/org/bukkit/event/inventory/InventoryPickupItemEvent.java
+++ b/src/main/java/org/bukkit/event/inventory/InventoryPickupItemEvent.java
@@ -13,8 +13,8 @@ import org.jetbrains.annotations.NotNull;
 public class InventoryPickupItemEvent extends Event implements Cancellable {
     private static final HandlerList handlers = new HandlerList();
     private boolean cancelled;
-    private final Inventory inventory;
-    private final Item item;
+    private final @NotNull Inventory inventory;
+    private final @NotNull Item item;
 
     public InventoryPickupItemEvent(@NotNull final Inventory inventory, @NotNull final Item item) {
         super();
diff --git a/src/main/java/org/bukkit/event/inventory/InventoryType.java b/src/main/java/org/bukkit/event/inventory/InventoryType.java
index 8d7ad84c2bdafa8c8a385fe31acb887a883194ff..6ae5e2c7f0197400c333c514122d92c8d0d2cf56 100644
--- a/src/main/java/org/bukkit/event/inventory/InventoryType.java
+++ b/src/main/java/org/bukkit/event/inventory/InventoryType.java
@@ -146,7 +146,7 @@ public enum InventoryType {
     private final boolean isCreatable;
 
     // Paper start
-    private final net.kyori.adventure.text.Component defaultTitleComponent;
+    private final net.kyori.adventure.text.@NotNull Component defaultTitleComponent;
 
     /**
      * Gets the inventory's default title.
@@ -157,11 +157,11 @@ public enum InventoryType {
         return defaultTitleComponent;
     }
     // Paper end
-    private InventoryType(int defaultSize, /*@NotNull*/ String defaultTitle) {
+    private InventoryType(int defaultSize, /*@NotNull*/ @NotNull String defaultTitle) {
         this(defaultSize, defaultTitle, true);
     }
 
-    private InventoryType(int defaultSize, /*@NotNull*/ String defaultTitle, boolean isCreatable) {
+    private InventoryType(int defaultSize, /*@NotNull*/ @NotNull String defaultTitle, boolean isCreatable) {
         size = defaultSize;
         title = defaultTitle;
         this.isCreatable = isCreatable;
diff --git a/src/main/java/org/bukkit/event/player/AsyncPlayerChatEvent.java b/src/main/java/org/bukkit/event/player/AsyncPlayerChatEvent.java
index 399afcd19fcb6acd24857ed6ab48cf0d105a01a3..8817cedbcf85bf6e428d0d9747dcaf63136dc600 100644
--- a/src/main/java/org/bukkit/event/player/AsyncPlayerChatEvent.java
+++ b/src/main/java/org/bukkit/event/player/AsyncPlayerChatEvent.java
@@ -31,8 +31,8 @@ public class AsyncPlayerChatEvent extends PlayerEvent implements Cancellable {
     private static final HandlerList handlers = new HandlerList();
     private boolean cancel = false;
     private String message;
-    private String format = "<%1$s> %2$s";
-    private final Set<Player> recipients;
+    private @NotNull String format = "<%1$s> %2$s";
+    private final @NotNull Set<Player> recipients;
 
     /**
      * @param async This changes the event to a synchronous state.
diff --git a/src/main/java/org/bukkit/event/player/AsyncPlayerPreLoginEvent.java b/src/main/java/org/bukkit/event/player/AsyncPlayerPreLoginEvent.java
index 635b8787fc235b61c0d5677def034656e4ec4cef..57e0d6b737cd89414c32f5fd2f8c8bf0f0a1b647 100644
--- a/src/main/java/org/bukkit/event/player/AsyncPlayerPreLoginEvent.java
+++ b/src/main/java/org/bukkit/event/player/AsyncPlayerPreLoginEvent.java
@@ -19,10 +19,10 @@ public class AsyncPlayerPreLoginEvent extends Event {
     private Result result;
     private net.kyori.adventure.text.Component message; // Paper
     //private String name; // Paper - Not used anymore
-    private final InetAddress ipAddress;
-    private final InetAddress rawAddress; // Paper
+    private final @NotNull InetAddress ipAddress;
+    private final @NotNull InetAddress rawAddress; // Paper
     //private UUID uniqueId; // Paper - Not used anymore
-    private final String hostname; // Paper
+    private final @NotNull String hostname; // Paper
 
     @Deprecated
     public AsyncPlayerPreLoginEvent(@NotNull final String name, @NotNull final InetAddress ipAddress) {
diff --git a/src/main/java/org/bukkit/event/player/PlayerAdvancementDoneEvent.java b/src/main/java/org/bukkit/event/player/PlayerAdvancementDoneEvent.java
index 6f618bb140a901c5c1cd08210978a6a651677ba4..cc7945ce671e312b0dae7f816f36b37f2dbfb55e 100644
--- a/src/main/java/org/bukkit/event/player/PlayerAdvancementDoneEvent.java
+++ b/src/main/java/org/bukkit/event/player/PlayerAdvancementDoneEvent.java
@@ -16,8 +16,8 @@ public class PlayerAdvancementDoneEvent extends PlayerEvent {
 
     private static final HandlerList handlers = new HandlerList();
     //
-    private final Advancement advancement;
-    private Component message; // Paper - Add Adventure message
+    private final @NotNull Advancement advancement;
+    private @Nullable Component message; // Paper - Add Adventure message
 
     public PlayerAdvancementDoneEvent(@NotNull Player who, @NotNull Advancement advancement) {
         // Paper start - Add Adventure message
diff --git a/src/main/java/org/bukkit/event/player/PlayerAnimationEvent.java b/src/main/java/org/bukkit/event/player/PlayerAnimationEvent.java
index 11c27b1a4a749e129ed4b2d906c315d97a4b66e7..68bba0c1ab79275bdfa34d6fc95e4a6347798c9a 100644
--- a/src/main/java/org/bukkit/event/player/PlayerAnimationEvent.java
+++ b/src/main/java/org/bukkit/event/player/PlayerAnimationEvent.java
@@ -11,7 +11,7 @@ import org.jetbrains.annotations.NotNull;
  */
 public class PlayerAnimationEvent extends PlayerEvent implements Cancellable {
     private static final HandlerList handlers = new HandlerList();
-    private final PlayerAnimationType animationType;
+    private final @NotNull PlayerAnimationType animationType;
     private boolean isCancelled = false;
 
     @Deprecated
diff --git a/src/main/java/org/bukkit/event/player/PlayerArmorStandManipulateEvent.java b/src/main/java/org/bukkit/event/player/PlayerArmorStandManipulateEvent.java
index f1391d834bcb9aa7c3b230e9a2083c427e0b22c5..5399293412fb419a6681821c4ae5e87f6cfd42b5 100644
--- a/src/main/java/org/bukkit/event/player/PlayerArmorStandManipulateEvent.java
+++ b/src/main/java/org/bukkit/event/player/PlayerArmorStandManipulateEvent.java
@@ -15,9 +15,9 @@ public class PlayerArmorStandManipulateEvent extends PlayerInteractEntityEvent {
 
     private static final HandlerList handlers = new HandlerList();
 
-    private final ItemStack playerItem;
-    private final ItemStack armorStandItem;
-    private final EquipmentSlot slot;
+    private final @NotNull ItemStack playerItem;
+    private final @NotNull ItemStack armorStandItem;
+    private final @NotNull EquipmentSlot slot;
 
     public PlayerArmorStandManipulateEvent(@NotNull final Player who, @NotNull final ArmorStand clickedEntity, @NotNull final ItemStack playerItem, @NotNull final ItemStack armorStandItem, @NotNull final EquipmentSlot slot, @NotNull EquipmentSlot hand) {
         super(who, clickedEntity, hand);
diff --git a/src/main/java/org/bukkit/event/player/PlayerBedEnterEvent.java b/src/main/java/org/bukkit/event/player/PlayerBedEnterEvent.java
index ced77de350fa53889439e945336343a1cca5b9ba..cef5772e0c25dce6b6a020ada1b301ed0e58936c 100644
--- a/src/main/java/org/bukkit/event/player/PlayerBedEnterEvent.java
+++ b/src/main/java/org/bukkit/event/player/PlayerBedEnterEvent.java
@@ -59,9 +59,9 @@ public class PlayerBedEnterEvent extends PlayerEvent implements Cancellable {
     }
 
     private static final HandlerList handlers = new HandlerList();
-    private final Block bed;
-    private final BedEnterResult bedEnterResult;
-    private Result useBed = Result.DEFAULT;
+    private final @NotNull Block bed;
+    private final @NotNull BedEnterResult bedEnterResult;
+    private @NotNull Result useBed = Result.DEFAULT;
 
     public PlayerBedEnterEvent(@NotNull Player who, @NotNull Block bed, @NotNull BedEnterResult bedEnterResult) {
         super(who);
diff --git a/src/main/java/org/bukkit/event/player/PlayerBedLeaveEvent.java b/src/main/java/org/bukkit/event/player/PlayerBedLeaveEvent.java
index 1cb70b5c8776863f44f1c4cdde152c35cb51edb5..8c955a0a74bcc8c67f9ac807b0a2f4c8a8135b3f 100644
--- a/src/main/java/org/bukkit/event/player/PlayerBedLeaveEvent.java
+++ b/src/main/java/org/bukkit/event/player/PlayerBedLeaveEvent.java
@@ -12,7 +12,7 @@ import org.jetbrains.annotations.NotNull;
  */
 public class PlayerBedLeaveEvent extends PlayerEvent implements Cancellable {
     private static final HandlerList handlers = new HandlerList();
-    private final Block bed;
+    private final @NotNull Block bed;
     private boolean setBedSpawn;
     private boolean cancelled;
 
diff --git a/src/main/java/org/bukkit/event/player/PlayerBucketEntityEvent.java b/src/main/java/org/bukkit/event/player/PlayerBucketEntityEvent.java
index 7b9c91b3f0bf21c2b4338e33eeffb56bee76382e..7d13f37713433cf22c3ddf227db91d65c2de9b71 100644
--- a/src/main/java/org/bukkit/event/player/PlayerBucketEntityEvent.java
+++ b/src/main/java/org/bukkit/event/player/PlayerBucketEntityEvent.java
@@ -16,10 +16,10 @@ public class PlayerBucketEntityEvent extends PlayerEvent implements Cancellable
 
     private static final HandlerList handlers = new HandlerList();
     private boolean cancelled;
-    private final Entity entity;
-    private final ItemStack originalBucket;
-    private final ItemStack entityBucket;
-    private final EquipmentSlot hand;
+    private final @NotNull Entity entity;
+    private final @NotNull ItemStack originalBucket;
+    private final @NotNull ItemStack entityBucket;
+    private final @NotNull EquipmentSlot hand;
 
     public PlayerBucketEntityEvent(@NotNull Player player, @NotNull Entity entity, @NotNull ItemStack originalBucket, @NotNull ItemStack entityBucket, @NotNull EquipmentSlot hand) {
         super(player);
diff --git a/src/main/java/org/bukkit/event/player/PlayerBucketEvent.java b/src/main/java/org/bukkit/event/player/PlayerBucketEvent.java
index d108067c3c548d0b40e2023484c57ec2a7b0474f..971863637a7ded4ce91822c1d5c415f96a353b44 100644
--- a/src/main/java/org/bukkit/event/player/PlayerBucketEvent.java
+++ b/src/main/java/org/bukkit/event/player/PlayerBucketEvent.java
@@ -14,13 +14,13 @@ import org.jetbrains.annotations.Nullable;
  * Called when a player interacts with a Bucket
  */
 public abstract class PlayerBucketEvent extends PlayerEvent implements Cancellable {
-    private ItemStack itemStack;
+    private @Nullable ItemStack itemStack;
     private boolean cancelled = false;
-    private final Block block;
-    private final Block blockClicked;
-    private final BlockFace blockFace;
-    private final Material bucket;
-    private final EquipmentSlot hand;
+    private final @NotNull Block block;
+    private final @NotNull Block blockClicked;
+    private final @NotNull BlockFace blockFace;
+    private final @NotNull Material bucket;
+    private final @NotNull EquipmentSlot hand;
 
     @Deprecated
     public PlayerBucketEvent(@NotNull final Player who, @NotNull final Block blockClicked, @NotNull final BlockFace blockFace, @NotNull final Material bucket, @NotNull final ItemStack itemInHand) {
diff --git a/src/main/java/org/bukkit/event/player/PlayerChangedMainHandEvent.java b/src/main/java/org/bukkit/event/player/PlayerChangedMainHandEvent.java
index 6070b1323c244d129aa8a5496444c5f312db2870..3bf0963aeea1e19f922804dd7573c948d0c93517 100644
--- a/src/main/java/org/bukkit/event/player/PlayerChangedMainHandEvent.java
+++ b/src/main/java/org/bukkit/event/player/PlayerChangedMainHandEvent.java
@@ -12,7 +12,7 @@ public class PlayerChangedMainHandEvent extends PlayerEvent {
 
     private static final HandlerList handlers = new HandlerList();
     //
-    private final MainHand mainHand;
+    private final @NotNull MainHand mainHand;
 
     public PlayerChangedMainHandEvent(@NotNull Player who, @NotNull MainHand mainHand) {
         super(who);
diff --git a/src/main/java/org/bukkit/event/player/PlayerChangedWorldEvent.java b/src/main/java/org/bukkit/event/player/PlayerChangedWorldEvent.java
index f1d1d1e9bddf824a0ae2f115fef7cc22f62bbc5b..19ff14dfecabb5f92568bbfd95c8cdf50764b9d1 100644
--- a/src/main/java/org/bukkit/event/player/PlayerChangedWorldEvent.java
+++ b/src/main/java/org/bukkit/event/player/PlayerChangedWorldEvent.java
@@ -10,7 +10,7 @@ import org.jetbrains.annotations.NotNull;
  */
 public class PlayerChangedWorldEvent extends PlayerEvent {
     private static final HandlerList handlers = new HandlerList();
-    private final World from;
+    private final @NotNull World from;
 
     public PlayerChangedWorldEvent(@NotNull final Player player, @NotNull final World from) {
         super(player);
diff --git a/src/main/java/org/bukkit/event/player/PlayerChannelEvent.java b/src/main/java/org/bukkit/event/player/PlayerChannelEvent.java
index 9316a525f9d3f6e80c9e1c06ee56b02d765c5456..95872056993964373e77ae6d3c0e07a9d14ec266 100644
--- a/src/main/java/org/bukkit/event/player/PlayerChannelEvent.java
+++ b/src/main/java/org/bukkit/event/player/PlayerChannelEvent.java
@@ -10,7 +10,7 @@ import org.jetbrains.annotations.NotNull;
  */
 public abstract class PlayerChannelEvent extends PlayerEvent {
     private static final HandlerList handlers = new HandlerList();
-    private final String channel;
+    private final @NotNull String channel;
 
     public PlayerChannelEvent(@NotNull final Player player, @NotNull final String channel) {
         super(player);
diff --git a/src/main/java/org/bukkit/event/player/PlayerChatEvent.java b/src/main/java/org/bukkit/event/player/PlayerChatEvent.java
index 3a1da86e3dbf18c6e1040086c1df4b8976bc2b9d..379660a677a55b4dbc014641f6554f20e59fce7f 100644
--- a/src/main/java/org/bukkit/event/player/PlayerChatEvent.java
+++ b/src/main/java/org/bukkit/event/player/PlayerChatEvent.java
@@ -27,7 +27,7 @@ public class PlayerChatEvent extends PlayerEvent implements Cancellable {
     private boolean cancel = false;
     private String message;
     private String format;
-    private final Set<Player> recipients;
+    private final @NotNull Set<Player> recipients;
 
     public PlayerChatEvent(@NotNull final Player player, @NotNull final String message) {
         super(player);
diff --git a/src/main/java/org/bukkit/event/player/PlayerChatTabCompleteEvent.java b/src/main/java/org/bukkit/event/player/PlayerChatTabCompleteEvent.java
index 93191b7e322eae2f276f67920e5c28674359cd1a..9c6a4d2a9d36df9352e4de0afb039dc5560eb111 100644
--- a/src/main/java/org/bukkit/event/player/PlayerChatTabCompleteEvent.java
+++ b/src/main/java/org/bukkit/event/player/PlayerChatTabCompleteEvent.java
@@ -16,9 +16,9 @@ import org.jetbrains.annotations.NotNull;
 @Warning(reason = "This event is no longer fired due to client changes")
 public class PlayerChatTabCompleteEvent extends PlayerEvent {
     private static final HandlerList handlers = new HandlerList();
-    private final String message;
-    private final String lastToken;
-    private final Collection<String> completions;
+    private final @NotNull String message;
+    private final @NotNull String lastToken;
+    private final @NotNull Collection<String> completions;
 
     public PlayerChatTabCompleteEvent(@NotNull final Player who, @NotNull final String message, @NotNull final Collection<String> completions) {
         super(who);
diff --git a/src/main/java/org/bukkit/event/player/PlayerCommandPreprocessEvent.java b/src/main/java/org/bukkit/event/player/PlayerCommandPreprocessEvent.java
index 48a00fb50fe32c732a578d5179b3bb43ffd68b69..5c138d73d077e7bedf611947a003d93e3db9fbf9 100644
--- a/src/main/java/org/bukkit/event/player/PlayerCommandPreprocessEvent.java
+++ b/src/main/java/org/bukkit/event/player/PlayerCommandPreprocessEvent.java
@@ -49,7 +49,7 @@ public class PlayerCommandPreprocessEvent extends PlayerEvent implements Cancell
     private static final HandlerList handlers = new HandlerList();
     private boolean cancel = false;
     private String message;
-    private final Set<Player> recipients;
+    private final @NotNull Set<Player> recipients;
 
     public PlayerCommandPreprocessEvent(@NotNull final Player player, @NotNull final String message) {
         super(player);
diff --git a/src/main/java/org/bukkit/event/player/PlayerCommandSendEvent.java b/src/main/java/org/bukkit/event/player/PlayerCommandSendEvent.java
index 762825997f1c6249de4ba5a0618d94bd1ec9ef33..ca07cd6be91a5a3bd9538d6b2140846846ffb456 100644
--- a/src/main/java/org/bukkit/event/player/PlayerCommandSendEvent.java
+++ b/src/main/java/org/bukkit/event/player/PlayerCommandSendEvent.java
@@ -17,7 +17,7 @@ import org.jetbrains.annotations.NotNull;
 public class PlayerCommandSendEvent extends PlayerEvent {
 
     private static final HandlerList handlers = new HandlerList();
-    private final Collection<String> commands;
+    private final @NotNull Collection<String> commands;
 
     public PlayerCommandSendEvent(@NotNull final Player player, @NotNull final Collection<String> commands) {
         super(player);
diff --git a/src/main/java/org/bukkit/event/player/PlayerDropItemEvent.java b/src/main/java/org/bukkit/event/player/PlayerDropItemEvent.java
index aca500f32e2ae69095a1abce9f14a164df442638..2d92f923732d78df89219c90a63645da9386b173 100644
--- a/src/main/java/org/bukkit/event/player/PlayerDropItemEvent.java
+++ b/src/main/java/org/bukkit/event/player/PlayerDropItemEvent.java
@@ -11,7 +11,7 @@ import org.jetbrains.annotations.NotNull;
  */
 public class PlayerDropItemEvent extends PlayerEvent implements Cancellable {
     private static final HandlerList handlers = new HandlerList();
-    private final Item drop;
+    private final @NotNull Item drop;
     private boolean cancel = false;
 
     public PlayerDropItemEvent(@NotNull final Player player, @NotNull final Item drop) {
diff --git a/src/main/java/org/bukkit/event/player/PlayerEditBookEvent.java b/src/main/java/org/bukkit/event/player/PlayerEditBookEvent.java
index 8c5f1f5892de51c22ed316da655ba3f1402961ce..6fd6d6382ee4af1aa5db30521fab1de027dbcaa1 100644
--- a/src/main/java/org/bukkit/event/player/PlayerEditBookEvent.java
+++ b/src/main/java/org/bukkit/event/player/PlayerEditBookEvent.java
@@ -15,7 +15,7 @@ import org.jetbrains.annotations.NotNull;
 public class PlayerEditBookEvent extends PlayerEvent implements Cancellable {
     private static final HandlerList handlers = new HandlerList();
 
-    private final BookMeta previousBookMeta;
+    private final @NotNull BookMeta previousBookMeta;
     private final int slot;
     private BookMeta newBookMeta;
     private boolean isSigning;
diff --git a/src/main/java/org/bukkit/event/player/PlayerEggThrowEvent.java b/src/main/java/org/bukkit/event/player/PlayerEggThrowEvent.java
index 917338044bfffe865af76c16616133970d0cb268..974ec7d921cac4934d30f59a8f88d79ab113f757 100644
--- a/src/main/java/org/bukkit/event/player/PlayerEggThrowEvent.java
+++ b/src/main/java/org/bukkit/event/player/PlayerEggThrowEvent.java
@@ -11,7 +11,7 @@ import org.jetbrains.annotations.NotNull;
  */
 public class PlayerEggThrowEvent extends PlayerEvent {
     private static final HandlerList handlers = new HandlerList();
-    private final Egg egg;
+    private final @NotNull Egg egg;
     private boolean hatching;
     private EntityType hatchType;
     private byte numHatches;
diff --git a/src/main/java/org/bukkit/event/player/PlayerFishEvent.java b/src/main/java/org/bukkit/event/player/PlayerFishEvent.java
index 45342030ad0f46632d3ee9a6d0348251f8ee375f..d64ec1283923dd4de8fda2b2dbf1c9e815acbf63 100644
--- a/src/main/java/org/bukkit/event/player/PlayerFishEvent.java
+++ b/src/main/java/org/bukkit/event/player/PlayerFishEvent.java
@@ -14,12 +14,12 @@ import org.jetbrains.annotations.Nullable;
  */
 public class PlayerFishEvent extends PlayerEvent implements Cancellable {
     private static final HandlerList handlers = new HandlerList();
-    private final Entity entity;
+    private final @Nullable Entity entity;
     private boolean cancel = false;
     private int exp;
-    private final State state;
-    private final FishHook hookEntity;
-    private final EquipmentSlot hand;
+    private final @NotNull State state;
+    private final @NotNull FishHook hookEntity;
+    private final @Nullable EquipmentSlot hand;
 
     public PlayerFishEvent(@NotNull final Player player, @Nullable final Entity entity, @NotNull final FishHook hookEntity, @Nullable EquipmentSlot hand, @NotNull final State state) {
         super(player);
diff --git a/src/main/java/org/bukkit/event/player/PlayerGameModeChangeEvent.java b/src/main/java/org/bukkit/event/player/PlayerGameModeChangeEvent.java
index aee4a8b52c0d4abb655a4778575f0122acf19049..7ead401151856744fbfa622441167836412cfd53 100644
--- a/src/main/java/org/bukkit/event/player/PlayerGameModeChangeEvent.java
+++ b/src/main/java/org/bukkit/event/player/PlayerGameModeChangeEvent.java
@@ -5,6 +5,8 @@ import org.bukkit.entity.Player;
 import org.bukkit.event.Cancellable;
 import org.bukkit.event.HandlerList;
 import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 /**
  * Called when the GameMode of the player is changed.
@@ -17,10 +19,10 @@ import org.jetbrains.annotations.NotNull;
 public class PlayerGameModeChangeEvent extends PlayerEvent implements Cancellable {
     private static final HandlerList handlers = new HandlerList();
     private boolean cancelled;
-    private final GameMode newGameMode;
+    private final @NotNull GameMode newGameMode;
     // Paper start
-    private final Cause cause;
-    private net.kyori.adventure.text.Component cancelMessage;
+    private final @NotNull Cause cause;
+    private net.kyori.adventure.text.@Nullable Component cancelMessage;
 
     @Deprecated // Paper end
     public PlayerGameModeChangeEvent(@NotNull final Player player, @NotNull final GameMode newGameMode) {
diff --git a/src/main/java/org/bukkit/event/player/PlayerHarvestBlockEvent.java b/src/main/java/org/bukkit/event/player/PlayerHarvestBlockEvent.java
index 5cd4b1311b6b13497c6c0b43af1b878e607cc5f4..77bbe79ba674e43ed2dbb31d55cc0ece9d3810af 100644
--- a/src/main/java/org/bukkit/event/player/PlayerHarvestBlockEvent.java
+++ b/src/main/java/org/bukkit/event/player/PlayerHarvestBlockEvent.java
@@ -23,9 +23,9 @@ public class PlayerHarvestBlockEvent extends PlayerEvent implements Cancellable
 
     private static final HandlerList handlers = new HandlerList();
     private boolean cancel = false;
-    private final Block harvestedBlock;
-    private final EquipmentSlot hand;
-    private final List<ItemStack> itemsHarvested;
+    private final @NotNull Block harvestedBlock;
+    private final @NotNull EquipmentSlot hand;
+    private final @NotNull List<ItemStack> itemsHarvested;
 
     public PlayerHarvestBlockEvent(@NotNull Player player, @NotNull Block harvestedBlock, @NotNull EquipmentSlot hand, @NotNull List<ItemStack> itemsHarvested) {
         super(player);
diff --git a/src/main/java/org/bukkit/event/player/PlayerHideEntityEvent.java b/src/main/java/org/bukkit/event/player/PlayerHideEntityEvent.java
index 78869fdb9cf4c541dff7d67b51866914987abf18..e702a6811ec9e7fa2a5b7a1d0139b2173a4c9944 100644
--- a/src/main/java/org/bukkit/event/player/PlayerHideEntityEvent.java
+++ b/src/main/java/org/bukkit/event/player/PlayerHideEntityEvent.java
@@ -21,7 +21,7 @@ import org.jetbrains.annotations.NotNull;
 public class PlayerHideEntityEvent extends PlayerEvent {
 
     private static final HandlerList handlers = new HandlerList();
-    private final Entity entity;
+    private final @NotNull Entity entity;
 
     public PlayerHideEntityEvent(@NotNull Player who, @NotNull Entity entity) {
         super(who);
diff --git a/src/main/java/org/bukkit/event/player/PlayerInteractAtEntityEvent.java b/src/main/java/org/bukkit/event/player/PlayerInteractAtEntityEvent.java
index 3f24d302e28170f7f6e5885b5b9abb22cbbb7d66..7726278490291418d37b67ee4ad65df2e9b3d436 100644
--- a/src/main/java/org/bukkit/event/player/PlayerInteractAtEntityEvent.java
+++ b/src/main/java/org/bukkit/event/player/PlayerInteractAtEntityEvent.java
@@ -19,7 +19,7 @@ import org.jetbrains.annotations.NotNull;
  */
 public class PlayerInteractAtEntityEvent extends PlayerInteractEntityEvent {
     private static final HandlerList handlers = new HandlerList();
-    private final Vector position;
+    private final @NotNull Vector position;
 
     public PlayerInteractAtEntityEvent(@NotNull Player who, @NotNull Entity clickedEntity, @NotNull Vector position) {
         this(who, clickedEntity, position, EquipmentSlot.HAND);
diff --git a/src/main/java/org/bukkit/event/player/PlayerInteractEvent.java b/src/main/java/org/bukkit/event/player/PlayerInteractEvent.java
index a01f86e6aba8b66ecc713da0787cd861e2930a2a..731b6cb15500e92ac1bda9d83e305e24c2d2da2e 100644
--- a/src/main/java/org/bukkit/event/player/PlayerInteractEvent.java
+++ b/src/main/java/org/bukkit/event/player/PlayerInteractEvent.java
@@ -28,14 +28,14 @@ import org.jetbrains.annotations.Nullable;
  */
 public class PlayerInteractEvent extends PlayerEvent implements Cancellable {
     private static final HandlerList handlers = new HandlerList();
-    protected ItemStack item;
+    protected @Nullable ItemStack item;
     protected Action action;
-    protected Block blockClicked;
+    protected @Nullable Block blockClicked;
     protected BlockFace blockFace;
     private Result useClickedBlock;
     private Result useItemInHand;
-    private EquipmentSlot hand;
-    private Location interactionPoint; // Paper
+    private @Nullable EquipmentSlot hand;
+    private @Nullable Location interactionPoint; // Paper
 
     public PlayerInteractEvent(@NotNull final Player who, @NotNull final Action action, @Nullable final ItemStack item, @Nullable final Block clickedBlock, @NotNull final BlockFace clickedFace) {
         this(who, action, item, clickedBlock, clickedFace, EquipmentSlot.HAND);
diff --git a/src/main/java/org/bukkit/event/player/PlayerItemBreakEvent.java b/src/main/java/org/bukkit/event/player/PlayerItemBreakEvent.java
index 35c373c8705386778afe81e40232dfd8690d351c..1f282b0bd52864817b9e683edd6d736a41bfdb37 100644
--- a/src/main/java/org/bukkit/event/player/PlayerItemBreakEvent.java
+++ b/src/main/java/org/bukkit/event/player/PlayerItemBreakEvent.java
@@ -13,7 +13,7 @@ import org.jetbrains.annotations.NotNull;
  */
 public class PlayerItemBreakEvent extends PlayerEvent {
     private static final HandlerList handlers = new HandlerList();
-    private final ItemStack brokenItem;
+    private final @NotNull ItemStack brokenItem;
 
     public PlayerItemBreakEvent(@NotNull final Player player, @NotNull final ItemStack brokenItem) {
         super(player);
diff --git a/src/main/java/org/bukkit/event/player/PlayerItemConsumeEvent.java b/src/main/java/org/bukkit/event/player/PlayerItemConsumeEvent.java
index 6110d0417340710333b44312d82c7bd5165a8954..eb0934fe02c7974b5cd339e98c2ae0d7bc81b945 100644
--- a/src/main/java/org/bukkit/event/player/PlayerItemConsumeEvent.java
+++ b/src/main/java/org/bukkit/event/player/PlayerItemConsumeEvent.java
@@ -23,7 +23,7 @@ public class PlayerItemConsumeEvent extends PlayerEvent implements Cancellable {
     private static final HandlerList handlers = new HandlerList();
     private boolean isCancelled = false;
     private ItemStack item;
-    private final EquipmentSlot hand;
+    private final @NotNull EquipmentSlot hand;
     @Nullable private ItemStack replacement; // Paper
 
     /**
diff --git a/src/main/java/org/bukkit/event/player/PlayerItemDamageEvent.java b/src/main/java/org/bukkit/event/player/PlayerItemDamageEvent.java
index a2993c7434c9775483a1b4628f2f66454b0d666d..768b5fddf684afe57c253abbc04cf96dc222b286 100644
--- a/src/main/java/org/bukkit/event/player/PlayerItemDamageEvent.java
+++ b/src/main/java/org/bukkit/event/player/PlayerItemDamageEvent.java
@@ -13,7 +13,7 @@ import org.jetbrains.annotations.NotNull;
 public class PlayerItemDamageEvent extends PlayerEvent implements Cancellable {
 
     private static final HandlerList handlers = new HandlerList();
-    private final ItemStack item;
+    private final @NotNull ItemStack item;
     private int damage;
     private int originalDamage; // Paper - Add pre-reduction damage
     private boolean cancelled = false;
diff --git a/src/main/java/org/bukkit/event/player/PlayerItemMendEvent.java b/src/main/java/org/bukkit/event/player/PlayerItemMendEvent.java
index 5b2415c2c92127947a21dfe8d672d2b88ea457df..1f3b1b2a62bacee40b6970b72f653b01102a4792 100644
--- a/src/main/java/org/bukkit/event/player/PlayerItemMendEvent.java
+++ b/src/main/java/org/bukkit/event/player/PlayerItemMendEvent.java
@@ -18,9 +18,9 @@ public class PlayerItemMendEvent extends PlayerEvent implements Cancellable {
 
     private static final HandlerList handlers = new HandlerList();
     //
-    private final ItemStack item;
-    private final EquipmentSlot slot;
-    private final ExperienceOrb experienceOrb;
+    private final @NotNull ItemStack item;
+    private final @NotNull EquipmentSlot slot;
+    private final @NotNull ExperienceOrb experienceOrb;
     private int repairAmount;
     private boolean cancelled;
 
diff --git a/src/main/java/org/bukkit/event/player/PlayerJoinEvent.java b/src/main/java/org/bukkit/event/player/PlayerJoinEvent.java
index 4af1d064fcb57773dfa8f6ad40d6482973f8e1a8..81e0f2127787fab3318c8751a6ac198d1e764fad 100644
--- a/src/main/java/org/bukkit/event/player/PlayerJoinEvent.java
+++ b/src/main/java/org/bukkit/event/player/PlayerJoinEvent.java
@@ -11,7 +11,7 @@ import org.jetbrains.annotations.Nullable;
 public class PlayerJoinEvent extends PlayerEvent {
     private static final HandlerList handlers = new HandlerList();
     // Paper start
-    private net.kyori.adventure.text.Component joinMessage;
+    private net.kyori.adventure.text.@Nullable Component joinMessage;
     public PlayerJoinEvent(@NotNull final Player playerJoined, @Nullable final net.kyori.adventure.text.Component joinMessage) {
         super(playerJoined);
         this.joinMessage = joinMessage;
diff --git a/src/main/java/org/bukkit/event/player/PlayerKickEvent.java b/src/main/java/org/bukkit/event/player/PlayerKickEvent.java
index 5c968a0867223925b7eb5d6e04dbc33c41b7be6b..c1ce175905986c2a978a9ef406d718cd388a311e 100644
--- a/src/main/java/org/bukkit/event/player/PlayerKickEvent.java
+++ b/src/main/java/org/bukkit/event/player/PlayerKickEvent.java
@@ -12,7 +12,7 @@ public class PlayerKickEvent extends PlayerEvent implements Cancellable {
     private static final HandlerList handlers = new HandlerList();
     private net.kyori.adventure.text.Component leaveMessage; // Paper
     private net.kyori.adventure.text.Component kickReason; // Paper
-    private final Cause cause; // Paper
+    private final @NotNull Cause cause; // Paper
     private boolean cancel;
 
     @Deprecated // Paper
diff --git a/src/main/java/org/bukkit/event/player/PlayerLocaleChangeEvent.java b/src/main/java/org/bukkit/event/player/PlayerLocaleChangeEvent.java
index ebd499c1a2d11ea068e8c374edbc3967e4cece3d..b65c7eb44c176c88469cc44831a5892523061f68 100644
--- a/src/main/java/org/bukkit/event/player/PlayerLocaleChangeEvent.java
+++ b/src/main/java/org/bukkit/event/player/PlayerLocaleChangeEvent.java
@@ -3,6 +3,8 @@ package org.bukkit.event.player;
 import org.bukkit.entity.Player;
 import org.bukkit.event.HandlerList;
 import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 /**
  * Called when a player changes their locale in the client settings.
@@ -11,9 +13,9 @@ public class PlayerLocaleChangeEvent extends PlayerEvent {
 
     private static final HandlerList handlers = new HandlerList();
     //
-    private final String locale;
+    private final @NotNull String locale;
     // Paper start
-    private final java.util.Locale adventure$locale;
+    private final java.util.@Nullable Locale adventure$locale;
     /**
      * @see Player#getLocale()
      *
diff --git a/src/main/java/org/bukkit/event/player/PlayerLoginEvent.java b/src/main/java/org/bukkit/event/player/PlayerLoginEvent.java
index 95c53d934f928d25f7b20cfbf2e5faa3df31ddc4..0d7385239de649ec00c74f73107d0bc2f9633aa2 100644
--- a/src/main/java/org/bukkit/event/player/PlayerLoginEvent.java
+++ b/src/main/java/org/bukkit/event/player/PlayerLoginEvent.java
@@ -14,11 +14,11 @@ import org.jetbrains.annotations.NotNull;
  */
 public class PlayerLoginEvent extends PlayerEvent {
     private static final HandlerList handlers = new HandlerList();
-    private final InetAddress address;
-    private final String hostname;
-    private Result result = Result.ALLOWED;
-    private net.kyori.adventure.text.Component message = net.kyori.adventure.text.Component.empty();
-    private final InetAddress realAddress; // Spigot
+    private final @NotNull InetAddress address;
+    private final @NotNull String hostname;
+    private @NotNull Result result = Result.ALLOWED;
+    private net.kyori.adventure.text.@NotNull Component message = net.kyori.adventure.text.Component.empty();
+    private final @NotNull InetAddress realAddress; // Spigot
 
     /**
      * This constructor defaults message to an empty string, and result to
diff --git a/src/main/java/org/bukkit/event/player/PlayerMoveEvent.java b/src/main/java/org/bukkit/event/player/PlayerMoveEvent.java
index b484abf3b06b1fb3577b43d50d64498dcd7652c9..5f328b4f82655a064715f0386ca79d201615a273 100644
--- a/src/main/java/org/bukkit/event/player/PlayerMoveEvent.java
+++ b/src/main/java/org/bukkit/event/player/PlayerMoveEvent.java
@@ -15,7 +15,7 @@ public class PlayerMoveEvent extends PlayerEvent implements Cancellable {
     private static final HandlerList handlers = new HandlerList();
     private boolean cancel = false;
     private Location from;
-    private Location to;
+    private @Nullable Location to;
 
     public PlayerMoveEvent(@NotNull final Player player, @NotNull final Location from, @Nullable final Location to) {
         super(player);
diff --git a/src/main/java/org/bukkit/event/player/PlayerPickupArrowEvent.java b/src/main/java/org/bukkit/event/player/PlayerPickupArrowEvent.java
index c9a8663945cdeb9702d04887d9122b7c18b16006..c0463859a673da60673917724f4061ede6304d2f 100644
--- a/src/main/java/org/bukkit/event/player/PlayerPickupArrowEvent.java
+++ b/src/main/java/org/bukkit/event/player/PlayerPickupArrowEvent.java
@@ -10,7 +10,7 @@ import org.jetbrains.annotations.NotNull;
  */
 public class PlayerPickupArrowEvent extends PlayerPickupItemEvent {
 
-    private final AbstractArrow arrow;
+    private final @NotNull AbstractArrow arrow;
 
     public PlayerPickupArrowEvent(@NotNull final Player player, @NotNull final Item item, @NotNull final AbstractArrow arrow) {
         super(player, item, 0);
diff --git a/src/main/java/org/bukkit/event/player/PlayerPickupItemEvent.java b/src/main/java/org/bukkit/event/player/PlayerPickupItemEvent.java
index 18d82c111f30e0279c10a174a51bac018185cd38..51ffd54ab9ee226e7abbd7eddf95928c730f067c 100644
--- a/src/main/java/org/bukkit/event/player/PlayerPickupItemEvent.java
+++ b/src/main/java/org/bukkit/event/player/PlayerPickupItemEvent.java
@@ -16,7 +16,7 @@ import org.jetbrains.annotations.NotNull;
 @Warning(false)
 public class PlayerPickupItemEvent extends PlayerEvent implements Cancellable {
     private static final HandlerList handlers = new HandlerList();
-    private final Item item;
+    private final @NotNull Item item;
     private boolean flyAtPlayer = true; // Paper
     private boolean cancel = false;
     private final int remaining;
diff --git a/src/main/java/org/bukkit/event/player/PlayerPreLoginEvent.java b/src/main/java/org/bukkit/event/player/PlayerPreLoginEvent.java
index 6800132c6288b4588fd02b08d26f016c38f27129..8179c95d8ce901e7deeefc9b4488fa358860313d 100644
--- a/src/main/java/org/bukkit/event/player/PlayerPreLoginEvent.java
+++ b/src/main/java/org/bukkit/event/player/PlayerPreLoginEvent.java
@@ -20,9 +20,9 @@ public class PlayerPreLoginEvent extends Event {
     private static final HandlerList handlers = new HandlerList();
     private Result result;
     private net.kyori.adventure.text.Component message; // Paper
-    private final String name;
-    private final InetAddress ipAddress;
-    private final UUID uniqueId;
+    private final @NotNull String name;
+    private final @NotNull InetAddress ipAddress;
+    private final @NotNull UUID uniqueId;
 
     @Deprecated
     public PlayerPreLoginEvent(@NotNull final String name, @NotNull final InetAddress ipAddress) {
diff --git a/src/main/java/org/bukkit/event/player/PlayerQuitEvent.java b/src/main/java/org/bukkit/event/player/PlayerQuitEvent.java
index 6e9205024ca9d3000a371bd0eb723dcd6c662bce..4964f75aea37c9d9936643e9e8a78c35def7b2f9 100644
--- a/src/main/java/org/bukkit/event/player/PlayerQuitEvent.java
+++ b/src/main/java/org/bukkit/event/player/PlayerQuitEvent.java
@@ -10,8 +10,8 @@ import org.jetbrains.annotations.Nullable;
  */
 public class PlayerQuitEvent extends PlayerEvent {
     private static final HandlerList handlers = new HandlerList();
-    private net.kyori.adventure.text.Component quitMessage; // Paper
-    private final QuitReason reason; // Paper
+    private net.kyori.adventure.text.@Nullable Component quitMessage; // Paper
+    private final @NotNull QuitReason reason; // Paper
 
     @Deprecated // Paper
     public PlayerQuitEvent(@NotNull final Player who, @Nullable final String quitMessage) {
diff --git a/src/main/java/org/bukkit/event/player/PlayerRecipeDiscoverEvent.java b/src/main/java/org/bukkit/event/player/PlayerRecipeDiscoverEvent.java
index f41c29e98a0af0e33ce4f7827bc062de2bb0d233..8850b73394b6af4ce9ec2e3278cbeaae9ae0ff05 100644
--- a/src/main/java/org/bukkit/event/player/PlayerRecipeDiscoverEvent.java
+++ b/src/main/java/org/bukkit/event/player/PlayerRecipeDiscoverEvent.java
@@ -14,7 +14,7 @@ public class PlayerRecipeDiscoverEvent extends PlayerEvent implements Cancellabl
     private static final HandlerList handlers = new HandlerList();
 
     private boolean cancel = false;
-    private final NamespacedKey recipe;
+    private final @NotNull NamespacedKey recipe;
 
     public PlayerRecipeDiscoverEvent(@NotNull Player who, @NotNull NamespacedKey recipe) {
         super(who);
diff --git a/src/main/java/org/bukkit/event/player/PlayerResourcePackStatusEvent.java b/src/main/java/org/bukkit/event/player/PlayerResourcePackStatusEvent.java
index 4c2102a11c3d682d98f0db4ccafa35231e66bcdd..88eca326425ef1eeab68d73ceb192a159203d3a8 100644
--- a/src/main/java/org/bukkit/event/player/PlayerResourcePackStatusEvent.java
+++ b/src/main/java/org/bukkit/event/player/PlayerResourcePackStatusEvent.java
@@ -3,6 +3,8 @@ package org.bukkit.event.player;
 import org.bukkit.entity.Player;
 import org.bukkit.event.HandlerList;
 import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 /**
  * Called when a player takes action on a resource pack request sent via
@@ -12,7 +14,7 @@ public class PlayerResourcePackStatusEvent extends PlayerEvent {
 
     private static final HandlerList handlers = new HandlerList();
     @Deprecated
-    private final String hash; // Paper
+    private final @Nullable String hash; // Paper
     private final Status status;
 
     public PlayerResourcePackStatusEvent(@NotNull final Player who, @NotNull Status resourcePackStatus) {
@@ -22,7 +24,7 @@ public class PlayerResourcePackStatusEvent extends PlayerEvent {
     }
 
     @Deprecated // Paper
-    public PlayerResourcePackStatusEvent(final Player who, Status resourcePackStatus, String hash) {
+    public PlayerResourcePackStatusEvent(final @NotNull Player who, Status resourcePackStatus, String hash) {
         super(who);
         this.hash = hash; // Paper
         this.status = resourcePackStatus;
@@ -32,7 +34,7 @@ public class PlayerResourcePackStatusEvent extends PlayerEvent {
     /**
      * @deprecated Hash does not seem to ever be set
      */
-    public String getHash() {
+    public @Nullable String getHash() {
         return this.hash;
     }
     // Paper end
diff --git a/src/main/java/org/bukkit/event/player/PlayerRespawnEvent.java b/src/main/java/org/bukkit/event/player/PlayerRespawnEvent.java
index 3715584a8289200ffb968e384e359ab574aaec5c..4c455cc2f385616d278d92bc85f9f6b5c35ca217 100644
--- a/src/main/java/org/bukkit/event/player/PlayerRespawnEvent.java
+++ b/src/main/java/org/bukkit/event/player/PlayerRespawnEvent.java
@@ -17,7 +17,7 @@ public class PlayerRespawnEvent extends PlayerEvent {
     private Location respawnLocation;
     private final boolean isBedSpawn;
     private final boolean isAnchorSpawn;
-    private final java.util.Set<RespawnFlag> respawnFlags; // Paper
+    private final java.util.@NotNull Set<RespawnFlag> respawnFlags; // Paper
 
     @Deprecated
     public PlayerRespawnEvent(@NotNull final Player respawnPlayer, @NotNull final Location respawnLocation, final boolean isBedSpawn) {
diff --git a/src/main/java/org/bukkit/event/player/PlayerRiptideEvent.java b/src/main/java/org/bukkit/event/player/PlayerRiptideEvent.java
index c23142a72b674d81a672f46e3b3063fe6af222ec..34afaf60d2c0e979baccdb65fffdf176a7811933 100644
--- a/src/main/java/org/bukkit/event/player/PlayerRiptideEvent.java
+++ b/src/main/java/org/bukkit/event/player/PlayerRiptideEvent.java
@@ -15,7 +15,7 @@ import org.jetbrains.annotations.NotNull;
 public class PlayerRiptideEvent extends PlayerEvent {
 
     private static final HandlerList handlers = new HandlerList();
-    private final ItemStack item;
+    private final @NotNull ItemStack item;
 
     public PlayerRiptideEvent(@NotNull final Player who, @NotNull final ItemStack item) {
         super(who);
diff --git a/src/main/java/org/bukkit/event/player/PlayerShearEntityEvent.java b/src/main/java/org/bukkit/event/player/PlayerShearEntityEvent.java
index 04b3dce008edefb045162d0f69f87462ea1f3534..4231833d91485003f9be2ed92e75bae99832f446 100644
--- a/src/main/java/org/bukkit/event/player/PlayerShearEntityEvent.java
+++ b/src/main/java/org/bukkit/event/player/PlayerShearEntityEvent.java
@@ -15,9 +15,9 @@ import org.jetbrains.annotations.NotNull;
 public class PlayerShearEntityEvent extends PlayerEvent implements Cancellable {
     private static final HandlerList handlers = new HandlerList();
     private boolean cancel;
-    private final Entity what;
-    private final ItemStack item;
-    private final EquipmentSlot hand;
+    private final @NotNull Entity what;
+    private final @NotNull ItemStack item;
+    private final @NotNull EquipmentSlot hand;
 
     public PlayerShearEntityEvent(@NotNull Player who, @NotNull Entity what, @NotNull ItemStack item, @NotNull EquipmentSlot hand) {
         super(who);
diff --git a/src/main/java/org/bukkit/event/player/PlayerShowEntityEvent.java b/src/main/java/org/bukkit/event/player/PlayerShowEntityEvent.java
index 29bb84145be18ef9162abdfc8820f2b3f7fd0db5..9783c2bbb98cc2bdc3713414d5845929804e989f 100644
--- a/src/main/java/org/bukkit/event/player/PlayerShowEntityEvent.java
+++ b/src/main/java/org/bukkit/event/player/PlayerShowEntityEvent.java
@@ -22,7 +22,7 @@ import org.jetbrains.annotations.NotNull;
 public class PlayerShowEntityEvent extends PlayerEvent {
 
     private static final HandlerList handlers = new HandlerList();
-    private final Entity entity;
+    private final @NotNull Entity entity;
 
     public PlayerShowEntityEvent(@NotNull Player who, @NotNull Entity entity) {
         super(who);
diff --git a/src/main/java/org/bukkit/event/player/PlayerStatisticIncrementEvent.java b/src/main/java/org/bukkit/event/player/PlayerStatisticIncrementEvent.java
index f971844bf490c7a7bfbe305d33df739ed2197a37..6f9b39c76134d291e31b794ff454db9d687cb76a 100644
--- a/src/main/java/org/bukkit/event/player/PlayerStatisticIncrementEvent.java
+++ b/src/main/java/org/bukkit/event/player/PlayerStatisticIncrementEvent.java
@@ -18,12 +18,12 @@ import org.jetbrains.annotations.Nullable;
  */
 public class PlayerStatisticIncrementEvent extends PlayerEvent implements Cancellable {
     private static final HandlerList handlers = new HandlerList();
-    protected final Statistic statistic;
+    protected final @NotNull Statistic statistic;
     private final int initialValue;
     private final int newValue;
     private boolean isCancelled = false;
-    private final EntityType entityType;
-    private final Material material;
+    private final @Nullable EntityType entityType;
+    private final @Nullable Material material;
 
     public PlayerStatisticIncrementEvent(@NotNull Player player, @NotNull Statistic statistic, int initialValue, int newValue) {
         super(player);
diff --git a/src/main/java/org/bukkit/event/player/PlayerSwapHandItemsEvent.java b/src/main/java/org/bukkit/event/player/PlayerSwapHandItemsEvent.java
index 9f592317c920589c22a5fb8e916c6ca58ebe5c59..a237bd5968685fe1ed38ea6f4a11262d28a7aad1 100644
--- a/src/main/java/org/bukkit/event/player/PlayerSwapHandItemsEvent.java
+++ b/src/main/java/org/bukkit/event/player/PlayerSwapHandItemsEvent.java
@@ -15,8 +15,8 @@ public class PlayerSwapHandItemsEvent extends PlayerEvent implements Cancellable
 
     private static final HandlerList handlers = new HandlerList();
     //
-    private ItemStack mainHandItem;
-    private ItemStack offHandItem;
+    private @Nullable ItemStack mainHandItem;
+    private @Nullable ItemStack offHandItem;
     private boolean cancelled;
 
     public PlayerSwapHandItemsEvent(@NotNull Player player, @NotNull ItemStack mainHandItem, @NotNull ItemStack offHandItem) {
diff --git a/src/main/java/org/bukkit/event/player/PlayerTakeLecternBookEvent.java b/src/main/java/org/bukkit/event/player/PlayerTakeLecternBookEvent.java
index 5ef664a6556ff8931b60cad818780e12831d84f9..0a61c7e0ea2886b4aec97f981266cf04e7182a1d 100644
--- a/src/main/java/org/bukkit/event/player/PlayerTakeLecternBookEvent.java
+++ b/src/main/java/org/bukkit/event/player/PlayerTakeLecternBookEvent.java
@@ -17,7 +17,7 @@ public class PlayerTakeLecternBookEvent extends PlayerEvent implements Cancellab
     private static final HandlerList handlers = new HandlerList();
     //
     private boolean cancelled;
-    private final Lectern lectern;
+    private final @NotNull Lectern lectern;
 
     public PlayerTakeLecternBookEvent(@NotNull Player who, @NotNull Lectern lectern) {
         super(who);
diff --git a/src/main/java/org/bukkit/event/player/PlayerTeleportEvent.java b/src/main/java/org/bukkit/event/player/PlayerTeleportEvent.java
index 149725da2468cf2e8cf3877f78b4a9b749ec1e51..a1e70269162f7a1af3a8c90778e72bdda0322784 100644
--- a/src/main/java/org/bukkit/event/player/PlayerTeleportEvent.java
+++ b/src/main/java/org/bukkit/event/player/PlayerTeleportEvent.java
@@ -11,11 +11,11 @@ import org.jetbrains.annotations.Nullable;
  */
 public class PlayerTeleportEvent extends PlayerMoveEvent {
     private static final HandlerList handlers = new HandlerList();
-    private TeleportCause cause = TeleportCause.UNKNOWN;
+    private @NotNull TeleportCause cause = TeleportCause.UNKNOWN;
 
     // Paper start - Teleport API
     private boolean dismounted = true;
-    private final java.util.Set<io.papermc.paper.entity.RelativeTeleportFlag> teleportFlagSet;
+    private final java.util.@NotNull Set<io.papermc.paper.entity.RelativeTeleportFlag> teleportFlagSet;
     // Paper end
 
     public PlayerTeleportEvent(@NotNull final Player player, @NotNull final Location from, @Nullable final Location to) {
diff --git a/src/main/java/org/bukkit/event/player/PlayerUnleashEntityEvent.java b/src/main/java/org/bukkit/event/player/PlayerUnleashEntityEvent.java
index d63bd62606763d0902ea800f0c35a1cfd07fc8ec..8c4a97ca50aee9c78f61817bf964eff6934afde9 100644
--- a/src/main/java/org/bukkit/event/player/PlayerUnleashEntityEvent.java
+++ b/src/main/java/org/bukkit/event/player/PlayerUnleashEntityEvent.java
@@ -14,8 +14,8 @@ public class PlayerUnleashEntityEvent extends EntityUnleashEvent implements Canc
 
     private boolean cancelled = false;
 
-    private final Player player;
-    private final EquipmentSlot hand;
+    private final @NotNull Player player;
+    private final @NotNull EquipmentSlot hand;
 
     // Paper start - drop leash variable
     @Deprecated
diff --git a/src/main/java/org/bukkit/event/raid/RaidEvent.java b/src/main/java/org/bukkit/event/raid/RaidEvent.java
index b2ff4bc331f8af77e8fd0f263f25222606af90e7..00068d714591654b0098af6a7adb394157f2b411 100644
--- a/src/main/java/org/bukkit/event/raid/RaidEvent.java
+++ b/src/main/java/org/bukkit/event/raid/RaidEvent.java
@@ -10,7 +10,7 @@ import org.jetbrains.annotations.NotNull;
  */
 public abstract class RaidEvent extends WorldEvent {
 
-    private final Raid raid;
+    private final @NotNull Raid raid;
 
     protected RaidEvent(@NotNull Raid raid, @NotNull World world) {
         super(world);
diff --git a/src/main/java/org/bukkit/event/raid/RaidFinishEvent.java b/src/main/java/org/bukkit/event/raid/RaidFinishEvent.java
index f0d280b8c1c1db802c420fe77a77f4b9871f281e..711b7c6dceff6e64ffcff65c3f446d425e23097b 100644
--- a/src/main/java/org/bukkit/event/raid/RaidFinishEvent.java
+++ b/src/main/java/org/bukkit/event/raid/RaidFinishEvent.java
@@ -15,7 +15,7 @@ public class RaidFinishEvent extends RaidEvent {
 
     private static final HandlerList handlers = new HandlerList();
     //
-    private final List<Player> winners;
+    private final @NotNull List<Player> winners;
 
     public RaidFinishEvent(@NotNull Raid raid, @NotNull World world, @NotNull List<Player> winners) {
         super(raid, world);
diff --git a/src/main/java/org/bukkit/event/raid/RaidSpawnWaveEvent.java b/src/main/java/org/bukkit/event/raid/RaidSpawnWaveEvent.java
index cd58dd7de781823804701fc023706e805c0142a8..9bff2ad374a640f32406a4a85d1415bb68468f5c 100644
--- a/src/main/java/org/bukkit/event/raid/RaidSpawnWaveEvent.java
+++ b/src/main/java/org/bukkit/event/raid/RaidSpawnWaveEvent.java
@@ -16,8 +16,8 @@ public class RaidSpawnWaveEvent extends RaidEvent {
 
     private static final HandlerList handlers = new HandlerList();
     //
-    private final List<Raider> raiders;
-    private final Raider leader;
+    private final @NotNull List<Raider> raiders;
+    private final @Nullable Raider leader;
 
     public RaidSpawnWaveEvent(@NotNull Raid raid, @NotNull World world, @Nullable Raider leader, @NotNull List<Raider> raiders) {
         super(raid, world);
diff --git a/src/main/java/org/bukkit/event/raid/RaidStopEvent.java b/src/main/java/org/bukkit/event/raid/RaidStopEvent.java
index 9e852ac973d7a38c075249360be483ed0e5f5ac6..1eb0c33b7476a7a6b6b19efab3ae0da62c392a8d 100644
--- a/src/main/java/org/bukkit/event/raid/RaidStopEvent.java
+++ b/src/main/java/org/bukkit/event/raid/RaidStopEvent.java
@@ -12,7 +12,7 @@ public class RaidStopEvent extends RaidEvent {
 
     private static final HandlerList handlers = new HandlerList();
     //
-    private final Reason reason;
+    private final @NotNull Reason reason;
 
     public RaidStopEvent(@NotNull Raid raid, @NotNull World world, @NotNull Reason reason) {
         super(raid, world);
diff --git a/src/main/java/org/bukkit/event/raid/RaidTriggerEvent.java b/src/main/java/org/bukkit/event/raid/RaidTriggerEvent.java
index 128e43cf12205f82f2b119a773208502cdccfdd4..dc3b8357491eea1c6a958e4deacfa415b3cc3f4d 100644
--- a/src/main/java/org/bukkit/event/raid/RaidTriggerEvent.java
+++ b/src/main/java/org/bukkit/event/raid/RaidTriggerEvent.java
@@ -15,7 +15,7 @@ public class RaidTriggerEvent extends RaidEvent implements Cancellable {
 
     private static final HandlerList handlers = new HandlerList();
     //
-    private final Player player;
+    private final @NotNull Player player;
     private boolean cancel;
 
     public RaidTriggerEvent(@NotNull Raid raid, @NotNull World world, @NotNull Player player) {
diff --git a/src/main/java/org/bukkit/event/server/BroadcastMessageEvent.java b/src/main/java/org/bukkit/event/server/BroadcastMessageEvent.java
index 943d324435350d3f16fad3e21cb472a01a3ff60b..4becd85bd41d7a351e2d689d0415ae7ecbd5376c 100644
--- a/src/main/java/org/bukkit/event/server/BroadcastMessageEvent.java
+++ b/src/main/java/org/bukkit/event/server/BroadcastMessageEvent.java
@@ -19,7 +19,7 @@ public class BroadcastMessageEvent extends ServerEvent implements Cancellable {
 
     private static final HandlerList handlers = new HandlerList();
     private net.kyori.adventure.text.Component message; // Paper
-    private final Set<CommandSender> recipients;
+    private final @NotNull Set<CommandSender> recipients;
     private boolean cancelled = false;
 
     @Deprecated
diff --git a/src/main/java/org/bukkit/event/server/MapInitializeEvent.java b/src/main/java/org/bukkit/event/server/MapInitializeEvent.java
index dc7440d2eb132c141bc3646815a35349b01b2bcd..84123b65c5b301df5627bb9e0b7dc26947c2fa22 100644
--- a/src/main/java/org/bukkit/event/server/MapInitializeEvent.java
+++ b/src/main/java/org/bukkit/event/server/MapInitializeEvent.java
@@ -9,7 +9,7 @@ import org.jetbrains.annotations.NotNull;
  */
 public class MapInitializeEvent extends ServerEvent {
     private static final HandlerList handlers = new HandlerList();
-    private final MapView mapView;
+    private final @NotNull MapView mapView;
 
     public MapInitializeEvent(@NotNull final MapView mapView) {
         this.mapView = mapView;
diff --git a/src/main/java/org/bukkit/event/server/PluginEvent.java b/src/main/java/org/bukkit/event/server/PluginEvent.java
index 89487b359ae69ec7ca0c2e10928cad3fdc7529fb..41edbed256254d7d7404ad404e7fafbd0ef3c6a8 100644
--- a/src/main/java/org/bukkit/event/server/PluginEvent.java
+++ b/src/main/java/org/bukkit/event/server/PluginEvent.java
@@ -7,7 +7,7 @@ import org.jetbrains.annotations.NotNull;
  * Used for plugin enable and disable events
  */
 public abstract class PluginEvent extends ServerEvent {
-    private final Plugin plugin;
+    private final @NotNull Plugin plugin;
 
     public PluginEvent(@NotNull final Plugin plugin) {
         this.plugin = plugin;
diff --git a/src/main/java/org/bukkit/event/server/ServerCommandEvent.java b/src/main/java/org/bukkit/event/server/ServerCommandEvent.java
index 617459afaea20213e948b1010278ab0131e08338..79bc6ded4f0ead623ef966f361cbe722935710e6 100644
--- a/src/main/java/org/bukkit/event/server/ServerCommandEvent.java
+++ b/src/main/java/org/bukkit/event/server/ServerCommandEvent.java
@@ -42,7 +42,7 @@ import org.jetbrains.annotations.NotNull;
 public class ServerCommandEvent extends ServerEvent implements Cancellable {
     private static final HandlerList handlers = new HandlerList();
     private String command;
-    private final CommandSender sender;
+    private final @NotNull CommandSender sender;
     private boolean cancel = false;
 
     public ServerCommandEvent(@NotNull final CommandSender sender, @NotNull final String command) {
diff --git a/src/main/java/org/bukkit/event/server/ServerListPingEvent.java b/src/main/java/org/bukkit/event/server/ServerListPingEvent.java
index 732d8d0436dc76cff33394b43452ff8f7a9b7fab..c854f0347dce51dc75105fef2dd69ef71bcc43c3 100644
--- a/src/main/java/org/bukkit/event/server/ServerListPingEvent.java
+++ b/src/main/java/org/bukkit/event/server/ServerListPingEvent.java
@@ -21,7 +21,7 @@ public class ServerListPingEvent extends ServerEvent implements Iterable<Player>
     private static final int MAGIC_PLAYER_COUNT = Integer.MIN_VALUE;
     private static final HandlerList handlers = new HandlerList();
     private final String hostname;
-    private final InetAddress address;
+    private final @NotNull InetAddress address;
     private net.kyori.adventure.text.Component motd; // Paper
     private final int numPlayers;
     private int maxPlayers;
diff --git a/src/main/java/org/bukkit/event/server/ServerLoadEvent.java b/src/main/java/org/bukkit/event/server/ServerLoadEvent.java
index c9a252d7e2f8c82b8ce10c02a92ada4529495f71..cc4745d8f69a7841616903366f1bad75d4395cf6 100644
--- a/src/main/java/org/bukkit/event/server/ServerLoadEvent.java
+++ b/src/main/java/org/bukkit/event/server/ServerLoadEvent.java
@@ -16,7 +16,7 @@ public class ServerLoadEvent extends ServerEvent {
     }
 
     private static final HandlerList handlers = new HandlerList();
-    private final LoadType type;
+    private final @NotNull LoadType type;
 
     /**
      * Creates a {@code ServerLoadEvent} with a given loading type.
diff --git a/src/main/java/org/bukkit/event/server/ServiceEvent.java b/src/main/java/org/bukkit/event/server/ServiceEvent.java
index 55e278cd063b8395ca8db36fcab302f56c2dd76c..5bcee8f91b4133da87efd9a695d00507e0e2d93b 100644
--- a/src/main/java/org/bukkit/event/server/ServiceEvent.java
+++ b/src/main/java/org/bukkit/event/server/ServiceEvent.java
@@ -8,7 +8,7 @@ import org.jetbrains.annotations.NotNull;
  * org.bukkit.plugin.ServicesManager}
  */
 public abstract class ServiceEvent extends ServerEvent {
-    private final RegisteredServiceProvider<?> provider;
+    private final @NotNull RegisteredServiceProvider<?> provider;
 
     public ServiceEvent(@NotNull final RegisteredServiceProvider<?> provider) {
         this.provider = provider;
diff --git a/src/main/java/org/bukkit/event/server/TabCompleteEvent.java b/src/main/java/org/bukkit/event/server/TabCompleteEvent.java
index 4a3451af454295ac3e1b688e6665cad9fc594c82..99ec0ae158224f0b17e887cd5d68e71cbb5da4e3 100644
--- a/src/main/java/org/bukkit/event/server/TabCompleteEvent.java
+++ b/src/main/java/org/bukkit/event/server/TabCompleteEvent.java
@@ -8,6 +8,8 @@ import org.bukkit.event.Event;
 import org.bukkit.event.HandlerList;
 import org.bukkit.event.player.PlayerCommandSendEvent;
 import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 /**
  * Called when a {@link CommandSender} of any description (ie: player or
@@ -23,8 +25,8 @@ public class TabCompleteEvent extends Event implements Cancellable {
 
     private static final HandlerList handlers = new HandlerList();
     //
-    private final CommandSender sender;
-    private final String buffer;
+    private final @NotNull CommandSender sender;
+    private final @NotNull String buffer;
     private List<String> completions;
     private boolean cancelled;
 
@@ -78,7 +80,7 @@ public class TabCompleteEvent extends Event implements Cancellable {
 
     // Paper start
     private final boolean isCommand;
-    private final org.bukkit.Location loc;
+    private final org.bukkit.@Nullable Location loc;
     /**
      * @return True if it is a command being tab completed, false if it is a chat message.
      */
diff --git a/src/main/java/org/bukkit/event/vehicle/VehicleBlockCollisionEvent.java b/src/main/java/org/bukkit/event/vehicle/VehicleBlockCollisionEvent.java
index d2b33f4105ae32a884e714a8936e3d91e23a00a0..9b6a89946077b312491ba9a61f42b6806f5bf7ca 100644
--- a/src/main/java/org/bukkit/event/vehicle/VehicleBlockCollisionEvent.java
+++ b/src/main/java/org/bukkit/event/vehicle/VehicleBlockCollisionEvent.java
@@ -10,7 +10,7 @@ import org.jetbrains.annotations.NotNull;
  */
 public class VehicleBlockCollisionEvent extends VehicleCollisionEvent {
     // private static final HandlerList handlers = new HandlerList(); // Paper - move HandlerList to VehicleCollisionEvent
-    private final Block block;
+    private final @NotNull Block block;
     private final org.bukkit.util.Vector velocity; // Paper
 
     // Paper start - Add pre-collision velocity
diff --git a/src/main/java/org/bukkit/event/vehicle/VehicleDamageEvent.java b/src/main/java/org/bukkit/event/vehicle/VehicleDamageEvent.java
index 45da51d5946781169f0c1a4d2493040faa2bc22e..5a06af005427fb29c3f333cc000343806b86fb29 100644
--- a/src/main/java/org/bukkit/event/vehicle/VehicleDamageEvent.java
+++ b/src/main/java/org/bukkit/event/vehicle/VehicleDamageEvent.java
@@ -12,7 +12,7 @@ import org.jetbrains.annotations.Nullable;
  */
 public class VehicleDamageEvent extends VehicleEvent implements Cancellable {
     private static final HandlerList handlers = new HandlerList();
-    private final Entity attacker;
+    private final @Nullable Entity attacker;
     private double damage;
     private boolean cancelled;
 
diff --git a/src/main/java/org/bukkit/event/vehicle/VehicleDestroyEvent.java b/src/main/java/org/bukkit/event/vehicle/VehicleDestroyEvent.java
index 26bc6898fce8ae938c3e2bf7818596fe90e6f525..d0776aaa4a4b2e427ffa4e449b0e9f90c9a5630a 100644
--- a/src/main/java/org/bukkit/event/vehicle/VehicleDestroyEvent.java
+++ b/src/main/java/org/bukkit/event/vehicle/VehicleDestroyEvent.java
@@ -14,7 +14,7 @@ import org.jetbrains.annotations.Nullable;
  */
 public class VehicleDestroyEvent extends VehicleEvent implements Cancellable {
     private static final HandlerList handlers = new HandlerList();
-    private final Entity attacker;
+    private final @Nullable Entity attacker;
     private boolean cancelled;
 
     public VehicleDestroyEvent(@NotNull final Vehicle vehicle, @Nullable final Entity attacker) {
diff --git a/src/main/java/org/bukkit/event/vehicle/VehicleEnterEvent.java b/src/main/java/org/bukkit/event/vehicle/VehicleEnterEvent.java
index 64f21f684912ed158d03040f442c32983ab49ea7..83679875fdc7dbc1dc79c0e29e2b8595ac8a429b 100644
--- a/src/main/java/org/bukkit/event/vehicle/VehicleEnterEvent.java
+++ b/src/main/java/org/bukkit/event/vehicle/VehicleEnterEvent.java
@@ -12,7 +12,7 @@ import org.jetbrains.annotations.NotNull;
 public class VehicleEnterEvent extends VehicleEvent implements Cancellable {
     private static final HandlerList handlers = new HandlerList();
     private boolean cancelled;
-    private final Entity entered;
+    private final @NotNull Entity entered;
 
     public VehicleEnterEvent(@NotNull final Vehicle vehicle, @NotNull final Entity entered) {
         super(vehicle);
diff --git a/src/main/java/org/bukkit/event/vehicle/VehicleEntityCollisionEvent.java b/src/main/java/org/bukkit/event/vehicle/VehicleEntityCollisionEvent.java
index f7f8d6274d49895f0b7db92a84bc224d936022ba..d6c63f2226b514f7e00b4e2c981db73f0b574307 100644
--- a/src/main/java/org/bukkit/event/vehicle/VehicleEntityCollisionEvent.java
+++ b/src/main/java/org/bukkit/event/vehicle/VehicleEntityCollisionEvent.java
@@ -11,7 +11,7 @@ import org.jetbrains.annotations.NotNull;
  */
 public class VehicleEntityCollisionEvent extends VehicleCollisionEvent implements Cancellable {
     // private static final HandlerList handlers = new HandlerList(); // Paper - move HandlerList to VehicleCollisionEvent
-    private final Entity entity;
+    private final @NotNull Entity entity;
     private boolean cancelled = false;
     private boolean cancelledPickup = false;
     private boolean cancelledCollision = false;
diff --git a/src/main/java/org/bukkit/event/vehicle/VehicleExitEvent.java b/src/main/java/org/bukkit/event/vehicle/VehicleExitEvent.java
index 39f6afd2f9cbcff6a74a91a21dcc3e29d2497dd8..e7cbd608fab81701ac2f873b8da5e2321a3b7bc8 100644
--- a/src/main/java/org/bukkit/event/vehicle/VehicleExitEvent.java
+++ b/src/main/java/org/bukkit/event/vehicle/VehicleExitEvent.java
@@ -12,7 +12,7 @@ import org.jetbrains.annotations.NotNull;
 public class VehicleExitEvent extends VehicleEvent implements Cancellable {
     private static final HandlerList handlers = new HandlerList();
     private boolean cancelled;
-    private final LivingEntity exited;
+    private final @NotNull LivingEntity exited;
     private final boolean isCancellable; // Paper
 
     public VehicleExitEvent(@NotNull final Vehicle vehicle, @NotNull final LivingEntity exited, boolean isCancellable) { // Paper
diff --git a/src/main/java/org/bukkit/event/vehicle/VehicleMoveEvent.java b/src/main/java/org/bukkit/event/vehicle/VehicleMoveEvent.java
index 7bfb84d3948c773e943374316ea25a19288ec7d0..75041757d3b258129343da9ea8ae96121c2eed66 100644
--- a/src/main/java/org/bukkit/event/vehicle/VehicleMoveEvent.java
+++ b/src/main/java/org/bukkit/event/vehicle/VehicleMoveEvent.java
@@ -10,8 +10,8 @@ import org.jetbrains.annotations.NotNull;
  */
 public class VehicleMoveEvent extends VehicleEvent {
     private static final HandlerList handlers = new HandlerList();
-    private final Location from;
-    private final Location to;
+    private final @NotNull Location from;
+    private final @NotNull Location to;
 
     public VehicleMoveEvent(@NotNull final Vehicle vehicle, @NotNull final Location from, @NotNull final Location to) {
         super(vehicle);
diff --git a/src/main/java/org/bukkit/event/weather/LightningStrikeEvent.java b/src/main/java/org/bukkit/event/weather/LightningStrikeEvent.java
index c98f07f82d179dffe162bb5cd85efe97de1b6175..b46e502d22bda31d972d984e9e355086f0f72c56 100644
--- a/src/main/java/org/bukkit/event/weather/LightningStrikeEvent.java
+++ b/src/main/java/org/bukkit/event/weather/LightningStrikeEvent.java
@@ -12,8 +12,8 @@ import org.jetbrains.annotations.NotNull;
 public class LightningStrikeEvent extends WeatherEvent implements Cancellable {
     private static final HandlerList handlers = new HandlerList();
     private boolean canceled;
-    private final LightningStrike bolt;
-    private final Cause cause;
+    private final @NotNull LightningStrike bolt;
+    private final @NotNull Cause cause;
 
     @Deprecated
     public LightningStrikeEvent(@NotNull final World world, @NotNull final LightningStrike bolt) {
diff --git a/src/main/java/org/bukkit/event/weather/ThunderChangeEvent.java b/src/main/java/org/bukkit/event/weather/ThunderChangeEvent.java
index 032395c7114b6d757acf1918ce2b014870e85fcd..b7246cab71f60156203c13d71ab1e869ffd901ce 100644
--- a/src/main/java/org/bukkit/event/weather/ThunderChangeEvent.java
+++ b/src/main/java/org/bukkit/event/weather/ThunderChangeEvent.java
@@ -13,7 +13,7 @@ public class ThunderChangeEvent extends WeatherEvent implements Cancellable {
     private boolean canceled;
     private final boolean to;
     // Paper start
-    private final Cause cause;
+    private final @NotNull Cause cause;
 
     public ThunderChangeEvent(@NotNull final World world, final boolean to, @NotNull final Cause cause) {
         super(world);
diff --git a/src/main/java/org/bukkit/event/weather/WeatherChangeEvent.java b/src/main/java/org/bukkit/event/weather/WeatherChangeEvent.java
index dabd390b84354c14c269c03cbed2006014d004b2..e4976b197e1fb8938775346b3292fe9cc23ed4c6 100644
--- a/src/main/java/org/bukkit/event/weather/WeatherChangeEvent.java
+++ b/src/main/java/org/bukkit/event/weather/WeatherChangeEvent.java
@@ -13,7 +13,7 @@ public class WeatherChangeEvent extends WeatherEvent implements Cancellable {
     private boolean canceled;
     private final boolean to;
     // Paper start
-    private final Cause cause;
+    private final @NotNull Cause cause;
 
     public WeatherChangeEvent(@NotNull final World world, final boolean to, @NotNull Cause cause) {
         super(world);
diff --git a/src/main/java/org/bukkit/event/world/EntitiesLoadEvent.java b/src/main/java/org/bukkit/event/world/EntitiesLoadEvent.java
index 88b13a481e2113ef4fcff5b93a231c11471e57ec..07f92b4ecf644c3f8d9d5e01fb8d4147af9fc7f4 100644
--- a/src/main/java/org/bukkit/event/world/EntitiesLoadEvent.java
+++ b/src/main/java/org/bukkit/event/world/EntitiesLoadEvent.java
@@ -14,7 +14,7 @@ import org.jetbrains.annotations.NotNull;
 public class EntitiesLoadEvent extends ChunkEvent {
 
     private static final HandlerList handlers = new HandlerList();
-    private final List<Entity> entities;
+    private final @NotNull List<Entity> entities;
 
     public EntitiesLoadEvent(@NotNull Chunk chunk, @NotNull List<Entity> entities) {
         super(chunk);
diff --git a/src/main/java/org/bukkit/event/world/EntitiesUnloadEvent.java b/src/main/java/org/bukkit/event/world/EntitiesUnloadEvent.java
index 1e3f144f1fb167bdf5cc07214cf35fd68b28ba1a..053a5e88780e1f3d833a87a5c23d499c7de0219a 100644
--- a/src/main/java/org/bukkit/event/world/EntitiesUnloadEvent.java
+++ b/src/main/java/org/bukkit/event/world/EntitiesUnloadEvent.java
@@ -14,7 +14,7 @@ import org.jetbrains.annotations.NotNull;
 public class EntitiesUnloadEvent extends ChunkEvent {
 
     private static final HandlerList handlers = new HandlerList();
-    private final List<Entity> entities;
+    private final @NotNull List<Entity> entities;
 
     public EntitiesUnloadEvent(@NotNull Chunk chunk, @NotNull List<Entity> entities) {
         super(chunk);
diff --git a/src/main/java/org/bukkit/event/world/GenericGameEvent.java b/src/main/java/org/bukkit/event/world/GenericGameEvent.java
index 2a2a329877d8da45c2d6afecf78ce88d52635cad..44374ba7a1a1711c6ecbc1ba8b543bc4065d50c9 100644
--- a/src/main/java/org/bukkit/event/world/GenericGameEvent.java
+++ b/src/main/java/org/bukkit/event/world/GenericGameEvent.java
@@ -18,9 +18,9 @@ import org.jetbrains.annotations.Nullable;
 public class GenericGameEvent extends WorldEvent implements Cancellable {
 
     private static final HandlerList handlers = new HandlerList();
-    private final GameEvent event;
-    private final Location location;
-    private final Entity entity;
+    private final @NotNull GameEvent event;
+    private final @NotNull Location location;
+    private final @Nullable Entity entity;
     private int radius;
     private boolean cancelled;
 
diff --git a/src/main/java/org/bukkit/event/world/LootGenerateEvent.java b/src/main/java/org/bukkit/event/world/LootGenerateEvent.java
index e051dc8b94893a0aa729996695aae91de57f3acd..87b469114b1f79e25428d0316727593767d1b670 100644
--- a/src/main/java/org/bukkit/event/world/LootGenerateEvent.java
+++ b/src/main/java/org/bukkit/event/world/LootGenerateEvent.java
@@ -27,11 +27,11 @@ public class LootGenerateEvent extends WorldEvent implements Cancellable {
 
     private static final HandlerList handlers = new HandlerList();
     private boolean cancelled;
-    private final Entity entity;
-    private final InventoryHolder inventoryHolder;
-    private final LootTable lootTable;
-    private final LootContext lootContext;
-    private final List<ItemStack> loot;
+    private final @Nullable Entity entity;
+    private final @Nullable InventoryHolder inventoryHolder;
+    private final @NotNull LootTable lootTable;
+    private final @NotNull LootContext lootContext;
+    private final @NotNull List<ItemStack> loot;
     private final boolean plugin;
 
     public LootGenerateEvent(@NotNull World world, @Nullable Entity entity, @Nullable InventoryHolder inventoryHolder, @NotNull LootTable lootTable, @NotNull LootContext lootContext, @NotNull List<ItemStack> items, boolean plugin) {
diff --git a/src/main/java/org/bukkit/event/world/PortalCreateEvent.java b/src/main/java/org/bukkit/event/world/PortalCreateEvent.java
index 579f017474ff22f0991ca884c35cdde7e14a94dc..5ee629ba6d3505cdab66b899cf84b4cd3403b3b9 100644
--- a/src/main/java/org/bukkit/event/world/PortalCreateEvent.java
+++ b/src/main/java/org/bukkit/event/world/PortalCreateEvent.java
@@ -15,9 +15,9 @@ import org.jetbrains.annotations.Nullable;
 public class PortalCreateEvent extends WorldEvent implements Cancellable {
     private static final HandlerList handlers = new HandlerList();
     private boolean cancel = false;
-    private final List<BlockState> blocks;
-    private final Entity entity;
-    private final CreateReason reason;
+    private final @NotNull List<BlockState> blocks;
+    private final @Nullable Entity entity;
+    private final @NotNull CreateReason reason;
 
     @Deprecated
     public PortalCreateEvent(@NotNull final List<BlockState> blocks, @NotNull final World world, @NotNull CreateReason reason) {
diff --git a/src/main/java/org/bukkit/event/world/SpawnChangeEvent.java b/src/main/java/org/bukkit/event/world/SpawnChangeEvent.java
index 9ce93d00935446589cb2bb970cb540d109616e85..a32532befa4cd81ad1a948183d2c01a113da11c0 100644
--- a/src/main/java/org/bukkit/event/world/SpawnChangeEvent.java
+++ b/src/main/java/org/bukkit/event/world/SpawnChangeEvent.java
@@ -11,7 +11,7 @@ import org.jetbrains.annotations.NotNull;
  */
 public class SpawnChangeEvent extends WorldEvent {
     private static final HandlerList handlers = new HandlerList();
-    private final Location previousLocation;
+    private final @NotNull Location previousLocation;
 
     public SpawnChangeEvent(@NotNull final World world, @NotNull final Location previousLocation) {
         super(world);
diff --git a/src/main/java/org/bukkit/event/world/StructureGrowEvent.java b/src/main/java/org/bukkit/event/world/StructureGrowEvent.java
index 7af8d6e51c824cf0592b722b834f1d4986e3cc08..a355356d1e6b5b276f5b32774db0d606de613478 100644
--- a/src/main/java/org/bukkit/event/world/StructureGrowEvent.java
+++ b/src/main/java/org/bukkit/event/world/StructureGrowEvent.java
@@ -17,11 +17,11 @@ import org.jetbrains.annotations.Nullable;
 public class StructureGrowEvent extends WorldEvent implements Cancellable {
     private static final HandlerList handlers = new HandlerList();
     private boolean cancelled = false;
-    private final Location location;
-    private final TreeType species;
+    private final @NotNull Location location;
+    private final @NotNull TreeType species;
     private final boolean bonemeal;
-    private final Player player;
-    private final List<BlockState> blocks;
+    private final @Nullable Player player;
+    private final @NotNull List<BlockState> blocks;
 
     public StructureGrowEvent(@NotNull final Location location, @NotNull final TreeType species, final boolean bonemeal, @Nullable final Player player, @NotNull final List<BlockState> blocks) {
         super(location.getWorld());
diff --git a/src/main/java/org/bukkit/event/world/TimeSkipEvent.java b/src/main/java/org/bukkit/event/world/TimeSkipEvent.java
index cb50cbbb2736096bfe5543e09fb24d127336c95c..30e604e9bfbe7f11b135b14a677ed28ce0f61f8b 100644
--- a/src/main/java/org/bukkit/event/world/TimeSkipEvent.java
+++ b/src/main/java/org/bukkit/event/world/TimeSkipEvent.java
@@ -15,7 +15,7 @@ public class TimeSkipEvent extends WorldEvent implements Cancellable {
     private static final HandlerList handlers = new HandlerList();
     //
     private boolean cancelled;
-    private final SkipReason skipReason;
+    private final @NotNull SkipReason skipReason;
     private long skipAmount;
 
     public TimeSkipEvent(@NotNull World world, @NotNull SkipReason skipReason, long skipAmount) {
diff --git a/src/main/java/org/bukkit/event/world/WorldEvent.java b/src/main/java/org/bukkit/event/world/WorldEvent.java
index 6d58b4adb62800d0e4bc78582a8a3ce3191bfad6..210023d9c7199444d51d75033ea5d1f0f9e0c4d4 100644
--- a/src/main/java/org/bukkit/event/world/WorldEvent.java
+++ b/src/main/java/org/bukkit/event/world/WorldEvent.java
@@ -8,7 +8,7 @@ import org.jetbrains.annotations.NotNull;
  * Represents events within a world
  */
 public abstract class WorldEvent extends Event {
-    private final World world;
+    private final @NotNull World world;
 
     public WorldEvent(@NotNull final World world) {
         this(world, false);
diff --git a/src/main/java/org/bukkit/generator/structure/Structure.java b/src/main/java/org/bukkit/generator/structure/Structure.java
index ff7708a303b737643bb2bc2cebd4bc56d706d00e..c3e02105ea231bba109d783624c55a9949a07876 100644
--- a/src/main/java/org/bukkit/generator/structure/Structure.java
+++ b/src/main/java/org/bukkit/generator/structure/Structure.java
@@ -4,6 +4,8 @@ import org.bukkit.Keyed;
 import org.bukkit.NamespacedKey;
 import org.bukkit.Registry;
 import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 /**
  * Represent a Structure from the world.
@@ -14,40 +16,40 @@ import org.jetbrains.annotations.NotNull;
  */
 public abstract class Structure implements Keyed {
 
-    public static final Structure PILLAGER_OUTPOST = getStructure("pillager_outpost");
-    public static final Structure MINESHAFT = getStructure("mineshaft");
-    public static final Structure MINESHAFT_MESA = getStructure("mineshaft_mesa");
-    public static final Structure MANSION = getStructure("mansion");
-    public static final Structure JUNGLE_PYRAMID = getStructure("jungle_pyramid");
-    public static final Structure DESERT_PYRAMID = getStructure("desert_pyramid");
-    public static final Structure IGLOO = getStructure("igloo");
-    public static final Structure SHIPWRECK = getStructure("shipwreck");
-    public static final Structure SHIPWRECK_BEACHED = getStructure("shipwreck_beached");
-    public static final Structure SWAMP_HUT = getStructure("swamp_hut");
-    public static final Structure STRONGHOLD = getStructure("stronghold");
-    public static final Structure MONUMENT = getStructure("monument");
-    public static final Structure OCEAN_RUIN_COLD = getStructure("ocean_ruin_cold");
-    public static final Structure OCEAN_RUIN_WARM = getStructure("ocean_ruin_warm");
-    public static final Structure FORTRESS = getStructure("fortress");
-    public static final Structure NETHER_FOSSIL = getStructure("nether_fossil");
-    public static final Structure END_CITY = getStructure("end_city");
-    public static final Structure BURIED_TREASURE = getStructure("buried_treasure");
-    public static final Structure BASTION_REMNANT = getStructure("bastion_remnant");
-    public static final Structure VILLAGE_PLAINS = getStructure("village_plains");
-    public static final Structure VILLAGE_DESERT = getStructure("village_desert");
-    public static final Structure VILLAGE_SAVANNA = getStructure("village_savanna");
-    public static final Structure VILLAGE_SNOWY = getStructure("village_snowy");
-    public static final Structure VILLAGE_TAIGA = getStructure("village_taiga");
-    public static final Structure RUINED_PORTAL = getStructure("ruined_portal");
-    public static final Structure RUINED_PORTAL_DESERT = getStructure("ruined_portal_desert");
-    public static final Structure RUINED_PORTAL_JUNGLE = getStructure("ruined_portal_jungle");
-    public static final Structure RUINED_PORTAL_SWAMP = getStructure("ruined_portal_swamp");
-    public static final Structure RUINED_PORTAL_MOUNTAIN = getStructure("ruined_portal_mountain");
-    public static final Structure RUINED_PORTAL_OCEAN = getStructure("ruined_portal_ocean");
-    public static final Structure RUINED_PORTAL_NETHER = getStructure("ruined_portal_nether");
-    public static final Structure ANCIENT_CITY = getStructure("ancient_city");
+    public static final @Nullable Structure PILLAGER_OUTPOST = getStructure("pillager_outpost");
+    public static final @Nullable Structure MINESHAFT = getStructure("mineshaft");
+    public static final @Nullable Structure MINESHAFT_MESA = getStructure("mineshaft_mesa");
+    public static final @Nullable Structure MANSION = getStructure("mansion");
+    public static final @Nullable Structure JUNGLE_PYRAMID = getStructure("jungle_pyramid");
+    public static final @Nullable Structure DESERT_PYRAMID = getStructure("desert_pyramid");
+    public static final @Nullable Structure IGLOO = getStructure("igloo");
+    public static final @Nullable Structure SHIPWRECK = getStructure("shipwreck");
+    public static final @Nullable Structure SHIPWRECK_BEACHED = getStructure("shipwreck_beached");
+    public static final @Nullable Structure SWAMP_HUT = getStructure("swamp_hut");
+    public static final @Nullable Structure STRONGHOLD = getStructure("stronghold");
+    public static final @Nullable Structure MONUMENT = getStructure("monument");
+    public static final @Nullable Structure OCEAN_RUIN_COLD = getStructure("ocean_ruin_cold");
+    public static final @Nullable Structure OCEAN_RUIN_WARM = getStructure("ocean_ruin_warm");
+    public static final @Nullable Structure FORTRESS = getStructure("fortress");
+    public static final @Nullable Structure NETHER_FOSSIL = getStructure("nether_fossil");
+    public static final @Nullable Structure END_CITY = getStructure("end_city");
+    public static final @Nullable Structure BURIED_TREASURE = getStructure("buried_treasure");
+    public static final @Nullable Structure BASTION_REMNANT = getStructure("bastion_remnant");
+    public static final @Nullable Structure VILLAGE_PLAINS = getStructure("village_plains");
+    public static final @Nullable Structure VILLAGE_DESERT = getStructure("village_desert");
+    public static final @Nullable Structure VILLAGE_SAVANNA = getStructure("village_savanna");
+    public static final @Nullable Structure VILLAGE_SNOWY = getStructure("village_snowy");
+    public static final @Nullable Structure VILLAGE_TAIGA = getStructure("village_taiga");
+    public static final @Nullable Structure RUINED_PORTAL = getStructure("ruined_portal");
+    public static final @Nullable Structure RUINED_PORTAL_DESERT = getStructure("ruined_portal_desert");
+    public static final @Nullable Structure RUINED_PORTAL_JUNGLE = getStructure("ruined_portal_jungle");
+    public static final @Nullable Structure RUINED_PORTAL_SWAMP = getStructure("ruined_portal_swamp");
+    public static final @Nullable Structure RUINED_PORTAL_MOUNTAIN = getStructure("ruined_portal_mountain");
+    public static final @Nullable Structure RUINED_PORTAL_OCEAN = getStructure("ruined_portal_ocean");
+    public static final @Nullable Structure RUINED_PORTAL_NETHER = getStructure("ruined_portal_nether");
+    public static final @Nullable Structure ANCIENT_CITY = getStructure("ancient_city");
 
-    private static Structure getStructure(String name) {
+    private static @Nullable Structure getStructure(@NotNull String name) {
         return Registry.STRUCTURE.get(NamespacedKey.minecraft(name));
     }
 
diff --git a/src/main/java/org/bukkit/generator/structure/StructureType.java b/src/main/java/org/bukkit/generator/structure/StructureType.java
index 2f908d5545d76ea25e26f6a4be579460512b5faf..e9eb5c1eb01b0eebc3dd5de8ad01870d79305bec 100644
--- a/src/main/java/org/bukkit/generator/structure/StructureType.java
+++ b/src/main/java/org/bukkit/generator/structure/StructureType.java
@@ -3,6 +3,9 @@ package org.bukkit.generator.structure;
 import org.bukkit.Keyed;
 import org.bukkit.NamespacedKey;
 import org.bukkit.Registry;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 /**
  * Represent a StructureType of a {@link Structure}.
@@ -14,24 +17,24 @@ import org.bukkit.Registry;
  */
 public abstract class StructureType implements Keyed {
 
-    public static final StructureType BURIED_TREASURE = getStructureType("buried_treasure");
-    public static final StructureType DESERT_PYRAMID = getStructureType("desert_pyramid");
-    public static final StructureType END_CITY = getStructureType("end_city");
-    public static final StructureType FORTRESS = getStructureType("fortress");
-    public static final StructureType IGLOO = getStructureType("igloo");
-    public static final StructureType JIGSAW = getStructureType("jigsaw");
-    public static final StructureType JUNGLE_TEMPLE = getStructureType("jungle_temple");
-    public static final StructureType MINESHAFT = getStructureType("mineshaft");
-    public static final StructureType NETHER_FOSSIL = getStructureType("nether_fossil");
-    public static final StructureType OCEAN_MONUMENT = getStructureType("ocean_monument");
-    public static final StructureType OCEAN_RUIN = getStructureType("ocean_ruin");
-    public static final StructureType RUINED_PORTAL = getStructureType("ruined_portal");
-    public static final StructureType SHIPWRECK = getStructureType("shipwreck");
-    public static final StructureType STRONGHOLD = getStructureType("stronghold");
-    public static final StructureType SWAMP_HUT = getStructureType("swamp_hut");
-    public static final StructureType WOODLAND_MANSION = getStructureType("woodland_mansion");
+    public static final @Nullable StructureType BURIED_TREASURE = getStructureType("buried_treasure");
+    public static final @Nullable StructureType DESERT_PYRAMID = getStructureType("desert_pyramid");
+    public static final @Nullable StructureType END_CITY = getStructureType("end_city");
+    public static final @Nullable StructureType FORTRESS = getStructureType("fortress");
+    public static final @Nullable StructureType IGLOO = getStructureType("igloo");
+    public static final @Nullable StructureType JIGSAW = getStructureType("jigsaw");
+    public static final @Nullable StructureType JUNGLE_TEMPLE = getStructureType("jungle_temple");
+    public static final @Nullable StructureType MINESHAFT = getStructureType("mineshaft");
+    public static final @Nullable StructureType NETHER_FOSSIL = getStructureType("nether_fossil");
+    public static final @Nullable StructureType OCEAN_MONUMENT = getStructureType("ocean_monument");
+    public static final @Nullable StructureType OCEAN_RUIN = getStructureType("ocean_ruin");
+    public static final @Nullable StructureType RUINED_PORTAL = getStructureType("ruined_portal");
+    public static final @Nullable StructureType SHIPWRECK = getStructureType("shipwreck");
+    public static final @Nullable StructureType STRONGHOLD = getStructureType("stronghold");
+    public static final @Nullable StructureType SWAMP_HUT = getStructureType("swamp_hut");
+    public static final @Nullable StructureType WOODLAND_MANSION = getStructureType("woodland_mansion");
 
-    private static StructureType getStructureType(String name) {
+    private static @Nullable StructureType getStructureType(@NotNull String name) {
         return Registry.STRUCTURE_TYPE.get(NamespacedKey.minecraft(name));
     }
 }
diff --git a/src/main/java/org/bukkit/help/HelpTopic.java b/src/main/java/org/bukkit/help/HelpTopic.java
index 2e2e1af50d4716df0450558d97a0a9baf73679d9..a3d57946346de4b27c733b33c02887a8ebee9ff6 100644
--- a/src/main/java/org/bukkit/help/HelpTopic.java
+++ b/src/main/java/org/bukkit/help/HelpTopic.java
@@ -20,8 +20,8 @@ import org.jetbrains.annotations.Nullable;
 public abstract class HelpTopic {
     protected String name = "";
     protected String shortText = "";
-    protected String fullText = "";
-    protected String amendedPermission = null;
+    protected @NotNull String fullText = "";
+    protected @Nullable String amendedPermission = null;
 
     /**
      * Determines if a {@link Player} is allowed to see this help topic.
diff --git a/src/main/java/org/bukkit/help/IndexHelpTopic.java b/src/main/java/org/bukkit/help/IndexHelpTopic.java
index 88a812d66b7eea7389103b9c2776a8adcfc141c7..143eba81a5c5a548c242062bebdc93c034a184dd 100644
--- a/src/main/java/org/bukkit/help/IndexHelpTopic.java
+++ b/src/main/java/org/bukkit/help/IndexHelpTopic.java
@@ -19,7 +19,7 @@ import org.jetbrains.annotations.Nullable;
  */
 public class IndexHelpTopic extends HelpTopic {
 
-    protected String permission;
+    protected @Nullable String permission;
     protected String preamble;
     protected Collection<HelpTopic> allTopics;
 
diff --git a/src/main/java/org/bukkit/inventory/CookingRecipe.java b/src/main/java/org/bukkit/inventory/CookingRecipe.java
index f7fa79393aef40027446b78bac8e9490cfafd8bc..01cfc2e350bcd41d5890a46483ca3c3310498590 100644
--- a/src/main/java/org/bukkit/inventory/CookingRecipe.java
+++ b/src/main/java/org/bukkit/inventory/CookingRecipe.java
@@ -13,12 +13,12 @@ import org.jetbrains.annotations.NotNull;
  * @param <T> type of recipe
  */
 public abstract class CookingRecipe<T extends CookingRecipe> implements Recipe, Keyed {
-    private final NamespacedKey key;
+    private final @NotNull NamespacedKey key;
     private ItemStack output;
     private RecipeChoice ingredient;
     private float experience;
     private int cookingTime;
-    private String group = "";
+    private @NotNull String group = "";
     private CookingBookCategory category = CookingBookCategory.MISC;
 
     /**
diff --git a/src/main/java/org/bukkit/inventory/CreativeCategory.java b/src/main/java/org/bukkit/inventory/CreativeCategory.java
index 78587d9fabe6371a23a7963917b054dbe7603694..7f2c6882d36ee9e3409de1714813022b97e3f096 100644
--- a/src/main/java/org/bukkit/inventory/CreativeCategory.java
+++ b/src/main/java/org/bukkit/inventory/CreativeCategory.java
@@ -1,5 +1,8 @@
 package org.bukkit.inventory;
 
+import org.jetbrains.annotations.NotNull;
+
+
 /**
  * Represents a category in the creative inventory.
  */
@@ -51,7 +54,7 @@ public enum CreativeCategory implements net.kyori.adventure.translation.Translat
      */
     BREWING("brewing"); // Paper
     // Paper start
-    private final String translationKey;
+    private final @NotNull String translationKey;
 
     CreativeCategory(String translationKey) {
         this.translationKey = "itemGroup." + translationKey;
diff --git a/src/main/java/org/bukkit/inventory/EntityEquipment.java b/src/main/java/org/bukkit/inventory/EntityEquipment.java
index 58d52f6e1660ebdb098566a2ae6b50c8b44dc0d9..0e017938f5ce078cd4f8ed7c8aeeaafc91b5c5c6 100644
--- a/src/main/java/org/bukkit/inventory/EntityEquipment.java
+++ b/src/main/java/org/bukkit/inventory/EntityEquipment.java
@@ -169,7 +169,8 @@ public interface EntityEquipment {
      *
      * @return The helmet being worn
      */
-    @org.bukkit.UndefinedNullability("not null for entities, nullable for players") // Paper
+    @org.bukkit.UndefinedNullability("not null for entities, nullable for players")
+    @Nullable // Paper
     ItemStack getHelmet();
 
     /**
@@ -205,7 +206,8 @@ public interface EntityEquipment {
      *
      * @return The chest plate being worn
      */
-    @org.bukkit.UndefinedNullability("not null for entities, nullable for players") // Paper
+    @org.bukkit.UndefinedNullability("not null for entities, nullable for players")
+    @Nullable // Paper
     ItemStack getChestplate();
 
     /**
@@ -241,7 +243,8 @@ public interface EntityEquipment {
      *
      * @return The leggings being worn
      */
-    @org.bukkit.UndefinedNullability("not null for entities, nullable for players") // Paper
+    @org.bukkit.UndefinedNullability("not null for entities, nullable for players")
+    @Nullable // Paper
     ItemStack getLeggings();
 
     /**
@@ -277,7 +280,8 @@ public interface EntityEquipment {
      *
      * @return The boots being worn
      */
-    @org.bukkit.UndefinedNullability("not null for entities, nullable for players") // Paper
+    @org.bukkit.UndefinedNullability("not null for entities, nullable for players")
+    @Nullable // Paper
     ItemStack getBoots();
 
     /**
@@ -511,7 +515,7 @@ public interface EntityEquipment {
      *
      * @return the entity this EntityEquipment belongs to
      */
-    @NotNull // Paper
+    @Nullable// Paper
     Entity getHolder();
     // Paper start
     /**
diff --git a/src/main/java/org/bukkit/inventory/FurnaceRecipe.java b/src/main/java/org/bukkit/inventory/FurnaceRecipe.java
index af8f7b88edf0fa790edcf16356a030c4834f531e..21f6fdec0861d6dd288596e9844b54f35fe30121 100644
--- a/src/main/java/org/bukkit/inventory/FurnaceRecipe.java
+++ b/src/main/java/org/bukkit/inventory/FurnaceRecipe.java
@@ -91,7 +91,7 @@ public class FurnaceRecipe extends CookingRecipe<FurnaceRecipe> {
      * @deprecated Magic value
      */
     @Deprecated
-    public FurnaceRecipe setInput(@NotNull Material input, int data) {
+    public @NotNull FurnaceRecipe setInput(@NotNull Material input, int data) {
         return setInputChoice(new RecipeChoice.MaterialChoice(Collections.singletonList(input)));
     }
 
diff --git a/src/main/java/org/bukkit/inventory/ItemStack.java b/src/main/java/org/bukkit/inventory/ItemStack.java
index 870c0ddd101094a3bce1ebf5ec4d42c51053db84..9648e9683580a5f07314bd4d2a386b52300a71fa 100644
--- a/src/main/java/org/bukkit/inventory/ItemStack.java
+++ b/src/main/java/org/bukkit/inventory/ItemStack.java
@@ -25,10 +25,10 @@ import org.jetbrains.annotations.Nullable;
  * returns false.</b>
  */
 public class ItemStack implements Cloneable, ConfigurationSerializable, net.kyori.adventure.text.event.HoverEventSource<net.kyori.adventure.text.event.HoverEvent.ShowItem>, net.kyori.adventure.translation.Translatable { // Paper
-    private Material type = Material.AIR;
+    private @NotNull Material type = Material.AIR;
     private int amount = 0;
-    private MaterialData data = null;
-    private ItemMeta meta;
+    private @Nullable MaterialData data = null;
+    private @Nullable ItemMeta meta;
 
     @Utility
     protected ItemStack() {}
@@ -256,7 +256,7 @@ public class ItemStack implements Cloneable, ConfigurationSerializable, net.kyor
 
     @Override
     @Utility
-    public String toString() {
+    public @NotNull String toString() {
         StringBuilder toString = new StringBuilder("ItemStack{").append(getType().name()).append(" x ").append(getAmount());
         if (hasItemMeta()) {
             toString.append(", ").append(getItemMeta());
diff --git a/src/main/java/org/bukkit/inventory/MerchantRecipe.java b/src/main/java/org/bukkit/inventory/MerchantRecipe.java
index afaa21b9347683fa373a938d9b1aa01c2058192a..a8895555a3a2507ccadd3545eba9d0235f9974b3 100644
--- a/src/main/java/org/bukkit/inventory/MerchantRecipe.java
+++ b/src/main/java/org/bukkit/inventory/MerchantRecipe.java
@@ -49,7 +49,7 @@ import org.jetbrains.annotations.Nullable;
 public class MerchantRecipe implements Recipe {
 
     private ItemStack result;
-    private List<ItemStack> ingredients = new ArrayList<ItemStack>();
+    private @NotNull List<ItemStack> ingredients = new ArrayList<ItemStack>();
     private int uses;
     private int maxUses;
     private boolean experienceReward;
diff --git a/src/main/java/org/bukkit/inventory/RecipeChoice.java b/src/main/java/org/bukkit/inventory/RecipeChoice.java
index 90208bc96085f05a3b657b9467b1670d00b03104..1abe1b49935c1be2e6b462f2ab6a90c08935b5ce 100644
--- a/src/main/java/org/bukkit/inventory/RecipeChoice.java
+++ b/src/main/java/org/bukkit/inventory/RecipeChoice.java
@@ -10,6 +10,8 @@ import java.util.function.Predicate;
 import org.bukkit.Material;
 import org.bukkit.Tag;
 import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 /**
  * Represents a potential item match within a recipe. All choices within a
@@ -120,7 +122,7 @@ public interface RecipeChoice extends Predicate<ItemStack>, Cloneable {
         }
 
         @Override
-        public boolean equals(Object obj) {
+        public boolean equals(@Nullable Object obj) {
             if (this == obj) {
                 return true;
             }
@@ -138,7 +140,7 @@ public interface RecipeChoice extends Predicate<ItemStack>, Cloneable {
         }
 
         @Override
-        public String toString() {
+        public @NotNull String toString() {
             return "MaterialChoice{" + "choices=" + choices + '}';
         }
     }
@@ -213,7 +215,7 @@ public interface RecipeChoice extends Predicate<ItemStack>, Cloneable {
         }
 
         @Override
-        public boolean equals(Object obj) {
+        public boolean equals(@Nullable Object obj) {
             if (this == obj) {
                 return true;
             }
@@ -231,7 +233,7 @@ public interface RecipeChoice extends Predicate<ItemStack>, Cloneable {
         }
 
         @Override
-        public String toString() {
+        public @NotNull String toString() {
             return "ExactChoice{" + "choices=" + choices + '}';
         }
     }
diff --git a/src/main/java/org/bukkit/inventory/ShapedRecipe.java b/src/main/java/org/bukkit/inventory/ShapedRecipe.java
index 038a82b865afee02380805bd1f3816149143c811..080dec4c7560ab570e3048a2e2a49cbcb6304a54 100644
--- a/src/main/java/org/bukkit/inventory/ShapedRecipe.java
+++ b/src/main/java/org/bukkit/inventory/ShapedRecipe.java
@@ -15,11 +15,11 @@ import org.jetbrains.annotations.NotNull;
  * Represents a shaped (ie normal) crafting recipe.
  */
 public class ShapedRecipe implements Recipe, Keyed {
-    private final NamespacedKey key;
-    private final ItemStack output;
+    private final @NotNull NamespacedKey key;
+    private final @NotNull ItemStack output;
     private String[] rows;
-    private Map<Character, RecipeChoice> ingredients = new HashMap<>();
-    private String group = "";
+    private @NotNull Map<Character, RecipeChoice> ingredients = new HashMap<>();
+    private @NotNull String group = "";
     private CraftingBookCategory category = CraftingBookCategory.MISC;
 
     @Deprecated
@@ -62,7 +62,7 @@ public class ShapedRecipe implements Recipe, Keyed {
      * @return The changed recipe, so you can chain calls.
      */
     @NotNull
-    public ShapedRecipe shape(@NotNull final String... shape) {
+    public ShapedRecipe shape(@NotNull final String @NotNull ... shape) {
         Preconditions.checkArgument(shape != null, "Must provide a shape");
         Preconditions.checkArgument(shape.length > 0 && shape.length < 4, "Crafting recipes should be 1, 2 or 3 rows, not ", shape.length);
 
diff --git a/src/main/java/org/bukkit/inventory/ShapelessRecipe.java b/src/main/java/org/bukkit/inventory/ShapelessRecipe.java
index 402eef14987f00d2a5fccc45f0b7e3b1c16706dc..b065a8a487ed9d5c88e8fb46a3ba180310df54a2 100644
--- a/src/main/java/org/bukkit/inventory/ShapelessRecipe.java
+++ b/src/main/java/org/bukkit/inventory/ShapelessRecipe.java
@@ -17,10 +17,10 @@ import org.jetbrains.annotations.NotNull;
  * the crafting grid does not matter.
  */
 public class ShapelessRecipe implements Recipe, Keyed {
-    private final NamespacedKey key;
-    private final ItemStack output;
+    private final @NotNull NamespacedKey key;
+    private final @NotNull ItemStack output;
     private final List<RecipeChoice> ingredients = new ArrayList<>();
-    private String group = "";
+    private @NotNull String group = "";
     private CraftingBookCategory category = CraftingBookCategory.MISC;
 
     @Deprecated
diff --git a/src/main/java/org/bukkit/inventory/SmithingRecipe.java b/src/main/java/org/bukkit/inventory/SmithingRecipe.java
index 00000f1399b053bb3c7b6d4792559b630d414b81..ea001505d50055530127e47ae1ef4c923a60b7b8 100644
--- a/src/main/java/org/bukkit/inventory/SmithingRecipe.java
+++ b/src/main/java/org/bukkit/inventory/SmithingRecipe.java
@@ -9,10 +9,10 @@ import org.jetbrains.annotations.NotNull;
  */
 public class SmithingRecipe implements Recipe, Keyed {
 
-    private final NamespacedKey key;
-    private final ItemStack result;
-    private final RecipeChoice base;
-    private final RecipeChoice addition;
+    private final @NotNull NamespacedKey key;
+    private final @NotNull ItemStack result;
+    private final @NotNull RecipeChoice base;
+    private final @NotNull RecipeChoice addition;
     private final boolean copyNbt; // Paper
 
     /**
diff --git a/src/main/java/org/bukkit/inventory/StonecuttingRecipe.java b/src/main/java/org/bukkit/inventory/StonecuttingRecipe.java
index aa5e7f37d20d6976f33e04876ae625ed0e5b2b41..2a6fd719fa8bc18a5491fc561ebd66dbdcfd10f9 100644
--- a/src/main/java/org/bukkit/inventory/StonecuttingRecipe.java
+++ b/src/main/java/org/bukkit/inventory/StonecuttingRecipe.java
@@ -11,10 +11,10 @@ import org.jetbrains.annotations.NotNull;
  * Represents a Stonecutting recipe.
  */
 public class StonecuttingRecipe implements Recipe, Keyed {
-    private final NamespacedKey key;
+    private final @NotNull NamespacedKey key;
     private ItemStack output;
     private RecipeChoice ingredient;
-    private String group = "";
+    private @NotNull String group = "";
 
     /**
      * Create a Stonecutting recipe to craft the specified ItemStack.
diff --git a/src/main/java/org/bukkit/inventory/meta/CompassMeta.java b/src/main/java/org/bukkit/inventory/meta/CompassMeta.java
index 5040ab6190b41442986d2a734a8e782df0eab2f6..708437a61424a307487db21884ef99543fcccec1 100644
--- a/src/main/java/org/bukkit/inventory/meta/CompassMeta.java
+++ b/src/main/java/org/bukkit/inventory/meta/CompassMeta.java
@@ -1,6 +1,7 @@
 package org.bukkit.inventory.meta;
 
 import org.bukkit.Location;
+import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
 /**
@@ -53,5 +54,6 @@ public interface CompassMeta extends ItemMeta {
     void setLodestoneTracked(boolean tracked);
 
     @Override
+    @NotNull
     CompassMeta clone();
 }
diff --git a/src/main/java/org/bukkit/inventory/meta/PotionMeta.java b/src/main/java/org/bukkit/inventory/meta/PotionMeta.java
index 8e2f474a44a9b6355c4582d4f51c1fd83a51584a..4a9b1bb75bfb3a495b2c45d476eafc3d7e5a0d8c 100644
--- a/src/main/java/org/bukkit/inventory/meta/PotionMeta.java
+++ b/src/main/java/org/bukkit/inventory/meta/PotionMeta.java
@@ -120,5 +120,6 @@ public interface PotionMeta extends ItemMeta {
     void setColor(@Nullable Color color);
 
     @Override
+    @NotNull
     PotionMeta clone();
 }
diff --git a/src/main/java/org/bukkit/inventory/meta/SuspiciousStewMeta.java b/src/main/java/org/bukkit/inventory/meta/SuspiciousStewMeta.java
index c2f4282c188e7d8041459cb3acaad674443ba147..13ff726232914d22f1ec8b82d8fbb5337ff75367 100644
--- a/src/main/java/org/bukkit/inventory/meta/SuspiciousStewMeta.java
+++ b/src/main/java/org/bukkit/inventory/meta/SuspiciousStewMeta.java
@@ -63,5 +63,6 @@ public interface SuspiciousStewMeta extends ItemMeta {
     boolean clearCustomEffects();
 
     @Override
+    @NotNull
     SuspiciousStewMeta clone();
 }
diff --git a/src/main/java/org/bukkit/inventory/meta/tags/ItemTagType.java b/src/main/java/org/bukkit/inventory/meta/tags/ItemTagType.java
index 09082d4813ec7915dcf2a8722019a3e31672970b..32d31d3ecb9f28deb21e731fe5bbff0e9724c3a2 100644
--- a/src/main/java/org/bukkit/inventory/meta/tags/ItemTagType.java
+++ b/src/main/java/org/bukkit/inventory/meta/tags/ItemTagType.java
@@ -124,7 +124,7 @@ public interface ItemTagType<T, Z> {
      */
     class PrimitiveTagType<T> implements ItemTagType<T, T> {
 
-        private final Class<T> primitiveType;
+        private final @NotNull Class<T> primitiveType;
 
         PrimitiveTagType(@NotNull Class<T> primitiveType) {
             this.primitiveType = primitiveType;
diff --git a/src/main/java/org/bukkit/loot/LootContext.java b/src/main/java/org/bukkit/loot/LootContext.java
index 71b7aa9d675e1714e286e6fd4015ead036d912e0..ad379615e1a7a2b4e418ed5a6b23595d08b9f993 100644
--- a/src/main/java/org/bukkit/loot/LootContext.java
+++ b/src/main/java/org/bukkit/loot/LootContext.java
@@ -15,11 +15,11 @@ public final class LootContext {
 
     public static final int DEFAULT_LOOT_MODIFIER = -1;
 
-    private final Location location;
+    private final @NotNull Location location;
     private final float luck;
     private final int lootingModifier;
-    private final Entity lootedEntity;
-    private final HumanEntity killer;
+    private final @Nullable Entity lootedEntity;
+    private final @Nullable HumanEntity killer;
 
     private LootContext(@NotNull Location location, float luck, int lootingModifier, @Nullable Entity lootedEntity, @Nullable HumanEntity killer) {
         Preconditions.checkArgument(location != null, "LootContext location cannot be null");
@@ -95,11 +95,11 @@ public final class LootContext {
      */
     public static class Builder {
 
-        private final Location location;
+        private final @NotNull Location location;
         private float luck;
         private int lootingModifier = LootContext.DEFAULT_LOOT_MODIFIER;
-        private Entity lootedEntity;
-        private HumanEntity killer;
+        private @Nullable Entity lootedEntity;
+        private @Nullable HumanEntity killer;
 
         /**
          * Creates a new LootContext.Builder instance to facilitate easy
diff --git a/src/main/java/org/bukkit/map/MapCursor.java b/src/main/java/org/bukkit/map/MapCursor.java
index ca763b231749f108b6773040a5c6109378b21b31..1441013a9bdb32d50fd3e0bf172af423d65b801a 100644
--- a/src/main/java/org/bukkit/map/MapCursor.java
+++ b/src/main/java/org/bukkit/map/MapCursor.java
@@ -10,7 +10,7 @@ public final class MapCursor {
     private byte x, y;
     private byte direction, type;
     private boolean visible;
-    private net.kyori.adventure.text.Component caption; // Paper
+    private net.kyori.adventure.text.@Nullable Component caption; // Paper
 
     /**
      * Initialize the map cursor.
diff --git a/src/main/java/org/bukkit/map/MapCursorCollection.java b/src/main/java/org/bukkit/map/MapCursorCollection.java
index 01dec2c877df58c9dc22445e8b1f9ce2e53066da..b8ca2f7edf38adf541253a5137de76f792fa6e10 100644
--- a/src/main/java/org/bukkit/map/MapCursorCollection.java
+++ b/src/main/java/org/bukkit/map/MapCursorCollection.java
@@ -10,7 +10,7 @@ import org.jetbrains.annotations.Nullable;
  * MapCursorCollection is linked to a specific {@link MapRenderer}.
  */
 public final class MapCursorCollection {
-    private List<MapCursor> cursors = new ArrayList<MapCursor>();
+    private @NotNull List<MapCursor> cursors = new ArrayList<MapCursor>();
 
     /**
      * Get the amount of cursors in this collection.
diff --git a/src/main/java/org/bukkit/map/MapFont.java b/src/main/java/org/bukkit/map/MapFont.java
index a45ce8198eafc57fd62c3ae86f68837cc90fd9e0..7c6404da755f2364e705038c2eb89eeb4f62bf50 100644
--- a/src/main/java/org/bukkit/map/MapFont.java
+++ b/src/main/java/org/bukkit/map/MapFont.java
@@ -112,7 +112,7 @@ public class MapFont {
         private final int height;
         private final boolean[] data;
 
-        public CharacterSprite(int width, int height, @NotNull boolean[] data) {
+        public CharacterSprite(int width, int height, @NotNull boolean @NotNull [] data) {
             this.width = width;
             this.height = height;
             this.data = data;
diff --git a/src/main/java/org/bukkit/material/Banner.java b/src/main/java/org/bukkit/material/Banner.java
index 08ce9d8bc6dcd9beec5f75c1b7cd5d98e8c9e168..2dec14f4727558189eeeb67289967fb3d0ee5707 100644
--- a/src/main/java/org/bukkit/material/Banner.java
+++ b/src/main/java/org/bukkit/material/Banner.java
@@ -2,6 +2,8 @@ package org.bukkit.material;
 
 import org.bukkit.Material;
 import org.bukkit.block.BlockFace;
+import org.jetbrains.annotations.NotNull;
+
 
 /**
  * @deprecated all usage of MaterialData is deprecated and subject to removal.
@@ -33,7 +35,7 @@ public class Banner extends MaterialData implements Attachable {
     }
 
     @Override
-    public BlockFace getAttachedFace() {
+    public @NotNull BlockFace getAttachedFace() {
         if (isWallBanner()) {
             byte data = getData();
 
@@ -58,7 +60,7 @@ public class Banner extends MaterialData implements Attachable {
     }
 
     @Override
-    public BlockFace getFacing() {
+    public @NotNull BlockFace getFacing() {
         byte data = getData();
 
         if (!isWallBanner()) {
@@ -119,7 +121,7 @@ public class Banner extends MaterialData implements Attachable {
     }
 
     @Override
-    public void setFacingDirection(BlockFace face) {
+    public void setFacingDirection(@NotNull BlockFace face) {
         byte data;
 
         if (isWallBanner()) {
@@ -212,7 +214,7 @@ public class Banner extends MaterialData implements Attachable {
     }
 
     @Override
-    public String toString() {
+    public @NotNull String toString() {
         return super.toString() + " facing " + getFacing();
     }
 
diff --git a/src/main/java/org/bukkit/material/Bed.java b/src/main/java/org/bukkit/material/Bed.java
index c5256129e00a63d2699fbae213470ed7197c4571..5d865a5e8808781a2f45af5497d218cdc4a900cf 100644
--- a/src/main/java/org/bukkit/material/Bed.java
+++ b/src/main/java/org/bukkit/material/Bed.java
@@ -2,6 +2,8 @@ package org.bukkit.material;
 
 import org.bukkit.Material;
 import org.bukkit.block.BlockFace;
+import org.jetbrains.annotations.NotNull;
+
 
 /**
  * Represents a bed.
@@ -24,7 +26,7 @@ public class Bed extends MaterialData implements Directional {
      *
      * @param direction the direction the bed's head is facing
      */
-    public Bed(BlockFace direction) {
+    public Bed(@NotNull BlockFace direction) {
         this();
         setFacingDirection(direction);
     }
@@ -66,7 +68,7 @@ public class Bed extends MaterialData implements Directional {
      * only affect one of the two blocks the bed is made of.
      */
     @Override
-    public void setFacingDirection(BlockFace face) {
+    public void setFacingDirection(@NotNull BlockFace face) {
         byte data;
 
         switch (face) {
@@ -100,7 +102,7 @@ public class Bed extends MaterialData implements Directional {
      * @return the direction the head of the bed is facing
      */
     @Override
-    public BlockFace getFacing() {
+    public @NotNull BlockFace getFacing() {
         byte data = (byte) (getData() & 0x7);
 
         switch (data) {
@@ -120,7 +122,7 @@ public class Bed extends MaterialData implements Directional {
     }
 
     @Override
-    public String toString() {
+    public @NotNull String toString() {
         return (isHeadOfBed() ? "HEAD" : "FOOT") + " of " + super.toString() + " facing " + getFacing();
     }
 
diff --git a/src/main/java/org/bukkit/material/Button.java b/src/main/java/org/bukkit/material/Button.java
index da7d016cf118932c9cc9ddcfb4a2abd4b4356fb5..6a4568530ae0a51d6a02e6a46b8e267ce291c210 100644
--- a/src/main/java/org/bukkit/material/Button.java
+++ b/src/main/java/org/bukkit/material/Button.java
@@ -2,6 +2,8 @@ package org.bukkit.material;
 
 import org.bukkit.Material;
 import org.bukkit.block.BlockFace;
+import org.jetbrains.annotations.NotNull;
+
 
 /**
  * Represents a button
@@ -56,7 +58,7 @@ public class Button extends SimpleAttachableMaterialData implements Redstone {
      * @return BlockFace attached to
      */
     @Override
-    public BlockFace getAttachedFace() {
+    public @NotNull BlockFace getAttachedFace() {
         byte data = (byte) (getData() & 0x7);
 
         switch (data) {
@@ -86,7 +88,7 @@ public class Button extends SimpleAttachableMaterialData implements Redstone {
      * Sets the direction this button is pointing toward
      */
     @Override
-    public void setFacingDirection(BlockFace face) {
+    public void setFacingDirection(@NotNull BlockFace face) {
         byte data = (byte) (getData() & 0x8);
 
         switch (face) {
@@ -119,7 +121,7 @@ public class Button extends SimpleAttachableMaterialData implements Redstone {
     }
 
     @Override
-    public String toString() {
+    public @NotNull String toString() {
         return super.toString() + " " + (isPowered() ? "" : "NOT ") + "POWERED";
     }
 
diff --git a/src/main/java/org/bukkit/material/Cake.java b/src/main/java/org/bukkit/material/Cake.java
index d39dd491626cd84f83169cf5c2135d05516d77f2..2035f7614780670af1f71dcdefd1293ac3d2848a 100644
--- a/src/main/java/org/bukkit/material/Cake.java
+++ b/src/main/java/org/bukkit/material/Cake.java
@@ -1,6 +1,8 @@
 package org.bukkit.material;
 
 import org.bukkit.Material;
+import org.jetbrains.annotations.NotNull;
+
 
 /**
  * @deprecated all usage of MaterialData is deprecated and subject to removal.
@@ -68,7 +70,7 @@ public class Cake extends MaterialData {
     }
 
     @Override
-    public String toString() {
+    public @NotNull String toString() {
         return super.toString() + " " + getSlicesEaten() + "/" + getSlicesRemaining() + " slices eaten/remaining";
     }
 
diff --git a/src/main/java/org/bukkit/material/Cauldron.java b/src/main/java/org/bukkit/material/Cauldron.java
index b331b4c27e58d766dd1759062c9c198c348a58bb..cb3fe78720ad0e8e27610b888a868dc3c4040d5b 100644
--- a/src/main/java/org/bukkit/material/Cauldron.java
+++ b/src/main/java/org/bukkit/material/Cauldron.java
@@ -1,6 +1,8 @@
 package org.bukkit.material;
 
 import org.bukkit.Material;
+import org.jetbrains.annotations.NotNull;
+
 
 /**
  * Represents a cauldron
@@ -55,7 +57,7 @@ public class Cauldron extends MaterialData {
     }
 
     @Override
-    public String toString() {
+    public @NotNull String toString() {
         return (isEmpty() ? "EMPTY" : (isFull() ? "FULL" : getData() + "/3 FULL")) + " CAULDRON";
     }
 
diff --git a/src/main/java/org/bukkit/material/Chest.java b/src/main/java/org/bukkit/material/Chest.java
index 4d120d3c33566606ff7d8b03c32341bf2ac147c4..d974453e4f7a0fd6d31963f65ed1375627073421 100644
--- a/src/main/java/org/bukkit/material/Chest.java
+++ b/src/main/java/org/bukkit/material/Chest.java
@@ -2,6 +2,8 @@ package org.bukkit.material;
 
 import org.bukkit.Material;
 import org.bukkit.block.BlockFace;
+import org.jetbrains.annotations.NotNull;
+
 
 /**
  * Represents a chest
@@ -21,7 +23,7 @@ public class Chest extends DirectionalContainer {
      *
      * @param direction the direction the chest's lit opens towards
      */
-    public Chest(BlockFace direction) {
+    public Chest(@NotNull BlockFace direction) {
         this();
         setFacingDirection(direction);
     }
diff --git a/src/main/java/org/bukkit/material/Coal.java b/src/main/java/org/bukkit/material/Coal.java
index fb842cfa7bf29ca6c670fc98e7deecaab31c71f2..c8d88ff721e574534532d4fd4b1010b5c9a85d34 100644
--- a/src/main/java/org/bukkit/material/Coal.java
+++ b/src/main/java/org/bukkit/material/Coal.java
@@ -2,6 +2,9 @@ package org.bukkit.material;
 
 import org.bukkit.CoalType;
 import org.bukkit.Material;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 /**
  * Represents the different types of coals.
@@ -15,7 +18,7 @@ public class Coal extends MaterialData {
         super(Material.LEGACY_COAL);
     }
 
-    public Coal(CoalType type) {
+    public Coal(@NotNull CoalType type) {
         this();
         setType(type);
     }
@@ -39,7 +42,7 @@ public class Coal extends MaterialData {
      *
      * @return CoalType of this coal
      */
-    public CoalType getType() {
+    public @Nullable CoalType getType() {
         return CoalType.getByData(getData());
     }
 
@@ -48,12 +51,12 @@ public class Coal extends MaterialData {
      *
      * @param type New type of this coal
      */
-    public void setType(CoalType type) {
+    public void setType(@NotNull CoalType type) {
         setData(type.getData());
     }
 
     @Override
-    public String toString() {
+    public @NotNull String toString() {
         return getType() + " " + super.toString();
     }
 
diff --git a/src/main/java/org/bukkit/material/CocoaPlant.java b/src/main/java/org/bukkit/material/CocoaPlant.java
index b1b1c729d182b676d8ea69a8d3c942c6820863dd..ec795074cdcf2175c70e562a9b2e6f3a1d8cab33 100644
--- a/src/main/java/org/bukkit/material/CocoaPlant.java
+++ b/src/main/java/org/bukkit/material/CocoaPlant.java
@@ -2,6 +2,8 @@ package org.bukkit.material;
 
 import org.bukkit.Material;
 import org.bukkit.block.BlockFace;
+import org.jetbrains.annotations.NotNull;
+
 
 /**
  * Represents the cocoa plant
@@ -32,12 +34,12 @@ public class CocoaPlant extends MaterialData implements Directional, Attachable
         super(type, data);
     }
 
-    public CocoaPlant(CocoaPlantSize sz) {
+    public CocoaPlant(@NotNull CocoaPlantSize sz) {
         this();
         setSize(sz);
     }
 
-    public CocoaPlant(CocoaPlantSize sz, BlockFace dir) {
+    public CocoaPlant(@NotNull CocoaPlantSize sz, @NotNull BlockFace dir) {
         this();
         setSize(sz);
         setFacingDirection(dir);
@@ -48,7 +50,7 @@ public class CocoaPlant extends MaterialData implements Directional, Attachable
      *
      * @return size
      */
-    public CocoaPlantSize getSize() {
+    public @NotNull CocoaPlantSize getSize() {
         switch (getData() & 0xC) {
             case 0:
                 return CocoaPlantSize.SMALL;
@@ -64,7 +66,7 @@ public class CocoaPlant extends MaterialData implements Directional, Attachable
      *
      * @param sz - size of plant
      */
-    public void setSize(CocoaPlantSize sz) {
+    public void setSize(@NotNull CocoaPlantSize sz) {
         int dat = getData() & 0x3;
         switch (sz) {
             case SMALL:
@@ -80,12 +82,12 @@ public class CocoaPlant extends MaterialData implements Directional, Attachable
     }
 
     @Override
-    public BlockFace getAttachedFace() {
+    public @NotNull BlockFace getAttachedFace() {
         return getFacing().getOppositeFace();
     }
 
     @Override
-    public void setFacingDirection(BlockFace face) {
+    public void setFacingDirection(@NotNull BlockFace face) {
         int dat = getData() & 0xC;
         switch (face) {
             default:
@@ -105,7 +107,7 @@ public class CocoaPlant extends MaterialData implements Directional, Attachable
     }
 
     @Override
-    public BlockFace getFacing() {
+    public @NotNull BlockFace getFacing() {
         switch (getData() & 0x3) {
             case 0:
                 return BlockFace.SOUTH;
@@ -125,7 +127,7 @@ public class CocoaPlant extends MaterialData implements Directional, Attachable
     }
 
     @Override
-    public String toString() {
+    public @NotNull String toString() {
         return super.toString() + " facing " + getFacing() + " " + getSize();
     }
 }
diff --git a/src/main/java/org/bukkit/material/Command.java b/src/main/java/org/bukkit/material/Command.java
index bcac1b08294569b218722278568b7106e1ce48f3..014dfb03f4670a354b851ee76bc36ca0ca80bfbc 100644
--- a/src/main/java/org/bukkit/material/Command.java
+++ b/src/main/java/org/bukkit/material/Command.java
@@ -1,6 +1,8 @@
 package org.bukkit.material;
 
 import org.bukkit.Material;
+import org.jetbrains.annotations.NotNull;
+
 
 /**
  * Represents a command block
@@ -50,7 +52,7 @@ public class Command extends MaterialData implements Redstone {
     }
 
     @Override
-    public String toString() {
+    public @NotNull String toString() {
         return super.toString() + " " + (isPowered() ? "" : "NOT ") + "POWERED";
     }
 
diff --git a/src/main/java/org/bukkit/material/Comparator.java b/src/main/java/org/bukkit/material/Comparator.java
index 49d32d54438ad689bc7768342dc84d31e5f30285..9aa56f29fd4b59ec9eee07482800db990301cd91 100644
--- a/src/main/java/org/bukkit/material/Comparator.java
+++ b/src/main/java/org/bukkit/material/Comparator.java
@@ -2,6 +2,8 @@ package org.bukkit.material;
 
 import org.bukkit.Material;
 import org.bukkit.block.BlockFace;
+import org.jetbrains.annotations.NotNull;
+
 
 /**
  * Represents a comparator in the on or off state, in normal or subtraction mode and facing in a specific direction.
@@ -32,7 +34,7 @@ public class Comparator extends MaterialData implements Directional, Redstone {
      *
      * @see BlockFace
      */
-    public Comparator(BlockFace facingDirection) {
+    public Comparator(@NotNull BlockFace facingDirection) {
         this(facingDirection, DEFAULT_SUBTRACTION_MODE, DEFAULT_STATE);
     }
 
@@ -44,7 +46,7 @@ public class Comparator extends MaterialData implements Directional, Redstone {
      *
      * @see BlockFace
      */
-    public Comparator(BlockFace facingDirection, boolean isSubtraction) {
+    public Comparator(@NotNull BlockFace facingDirection, boolean isSubtraction) {
         this(facingDirection, isSubtraction, DEFAULT_STATE);
     }
 
@@ -57,7 +59,7 @@ public class Comparator extends MaterialData implements Directional, Redstone {
      *
      * @see BlockFace
      */
-    public Comparator(BlockFace facingDirection, boolean isSubtraction, boolean state) {
+    public Comparator(@NotNull BlockFace facingDirection, boolean isSubtraction, boolean state) {
         super(state ? Material.LEGACY_REDSTONE_COMPARATOR_ON : Material.LEGACY_REDSTONE_COMPARATOR_OFF);
         setFacingDirection(facingDirection);
         setSubtractionMode(isSubtraction);
@@ -103,7 +105,7 @@ public class Comparator extends MaterialData implements Directional, Redstone {
      * @see BlockFace
      */
     @Override
-    public void setFacingDirection(BlockFace face) {
+    public void setFacingDirection(@NotNull BlockFace face) {
         int data = getData() & 0xC;
 
         switch (face) {
@@ -135,7 +137,7 @@ public class Comparator extends MaterialData implements Directional, Redstone {
      * @see BlockFace
      */
     @Override
-    public BlockFace getFacing() {
+    public @NotNull BlockFace getFacing() {
         byte data = (byte) (getData() & 0x3);
 
         switch (data) {
@@ -155,7 +157,7 @@ public class Comparator extends MaterialData implements Directional, Redstone {
     }
 
     @Override
-    public String toString() {
+    public @NotNull String toString() {
         return super.toString() + " facing " + getFacing() + " in " + (isSubtractionMode() ? "subtraction" : "comparator") + " mode";
     }
 
diff --git a/src/main/java/org/bukkit/material/Crops.java b/src/main/java/org/bukkit/material/Crops.java
index 4cf3de5fbba8617bc8edab9ca1c0ddee8033ed09..6274eba6c33d4bc6b7ce98a65b81a34756ec6237 100644
--- a/src/main/java/org/bukkit/material/Crops.java
+++ b/src/main/java/org/bukkit/material/Crops.java
@@ -2,6 +2,9 @@ package org.bukkit.material;
 
 import org.bukkit.CropState;
 import org.bukkit.Material;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 /**
  * Represents the different types of crops in different states of growth.
@@ -32,7 +35,7 @@ public class Crops extends MaterialData {
      *
      * @param state The growth state of the crops
      */
-    public Crops(CropState state) {
+    public Crops(@NotNull CropState state) {
         this(DEFAULT_TYPE, state);
         setState(state);
     }
@@ -43,7 +46,7 @@ public class Crops extends MaterialData {
      * @param type The type of crops
      * @param state The growth state of the crops
      */
-    public Crops(final Material type, final CropState state) {
+    public Crops(final Material type, final @NotNull CropState state) {
         super(type);
         setState(state);
     }
@@ -75,7 +78,7 @@ public class Crops extends MaterialData {
      *
      * @return CropState of this crop
      */
-    public CropState getState() {
+    public @Nullable CropState getState() {
         switch (getItemType()) {
             case LEGACY_CROPS:
             case LEGACY_CARROT:
@@ -106,7 +109,7 @@ public class Crops extends MaterialData {
      *
      * @param state New growth state of this crop
      */
-    public void setState(CropState state) {
+    public void setState(@NotNull CropState state) {
         switch (getItemType()) {
             case LEGACY_CROPS:
             case LEGACY_CARROT:
@@ -125,7 +128,7 @@ public class Crops extends MaterialData {
     }
 
     @Override
-    public String toString() {
+    public @NotNull String toString() {
         return getState() + " " + super.toString();
     }
 
diff --git a/src/main/java/org/bukkit/material/Diode.java b/src/main/java/org/bukkit/material/Diode.java
index 36a62258bcdea8136672ef6b2313a3877b3c724c..b27f3d40ac903a9150b9bab5f5da9316b94875d5 100644
--- a/src/main/java/org/bukkit/material/Diode.java
+++ b/src/main/java/org/bukkit/material/Diode.java
@@ -2,6 +2,8 @@ package org.bukkit.material;
 
 import org.bukkit.Material;
 import org.bukkit.block.BlockFace;
+import org.jetbrains.annotations.NotNull;
+
 
 /**
  * Represents a diode/repeater in the on or off state, with a delay and facing
@@ -39,7 +41,7 @@ public class Diode extends MaterialData implements Directional, Redstone {
      *
      * @see BlockFace
      */
-    public Diode(BlockFace facingDirection) {
+    public Diode(@NotNull BlockFace facingDirection) {
         this(facingDirection, DEFAULT_DELAY, DEFAULT_STATE);
     }
 
@@ -53,7 +55,7 @@ public class Diode extends MaterialData implements Directional, Redstone {
      *
      * @see BlockFace
      */
-    public Diode(BlockFace facingDirection, int delay) {
+    public Diode(@NotNull BlockFace facingDirection, int delay) {
         this(facingDirection, delay, DEFAULT_STATE);
     }
 
@@ -68,7 +70,7 @@ public class Diode extends MaterialData implements Directional, Redstone {
      *
      * @see BlockFace
      */
-    public Diode(BlockFace facingDirection, int delay, boolean state) {
+    public Diode(@NotNull BlockFace facingDirection, int delay, boolean state) {
         super(state ? Material.LEGACY_DIODE_BLOCK_ON : Material.LEGACY_DIODE_BLOCK_OFF);
         setFacingDirection(facingDirection);
         setDelay(delay);
@@ -122,7 +124,7 @@ public class Diode extends MaterialData implements Directional, Redstone {
      * @see BlockFace
      */
     @Override
-    public void setFacingDirection(BlockFace face) {
+    public void setFacingDirection(@NotNull BlockFace face) {
         int delay = getDelay();
         byte data;
 
@@ -153,7 +155,7 @@ public class Diode extends MaterialData implements Directional, Redstone {
      * @see BlockFace
      */
     @Override
-    public BlockFace getFacing() {
+    public @NotNull BlockFace getFacing() {
         byte data = (byte) (getData() & 0x3);
 
         switch (data) {
@@ -173,7 +175,7 @@ public class Diode extends MaterialData implements Directional, Redstone {
     }
 
     @Override
-    public String toString() {
+    public @NotNull String toString() {
         return super.toString() + " facing " + getFacing() + " with " + getDelay() + " ticks delay";
     }
 
diff --git a/src/main/java/org/bukkit/material/DirectionalContainer.java b/src/main/java/org/bukkit/material/DirectionalContainer.java
index 0190e5f3df5b86a0d8f912baf0570a4f54853829..f19c01a58b99d15416a466c9272864f636d2ae46 100644
--- a/src/main/java/org/bukkit/material/DirectionalContainer.java
+++ b/src/main/java/org/bukkit/material/DirectionalContainer.java
@@ -2,6 +2,8 @@ package org.bukkit.material;
 
 import org.bukkit.Material;
 import org.bukkit.block.BlockFace;
+import org.jetbrains.annotations.NotNull;
+
 
 /**
  * Represents a furnace or a dispenser.
@@ -27,7 +29,7 @@ public class DirectionalContainer extends MaterialData implements Directional {
     }
 
     @Override
-    public void setFacingDirection(BlockFace face) {
+    public void setFacingDirection(@NotNull BlockFace face) {
         byte data;
 
         switch (face) {
@@ -52,7 +54,7 @@ public class DirectionalContainer extends MaterialData implements Directional {
     }
 
     @Override
-    public BlockFace getFacing() {
+    public @NotNull BlockFace getFacing() {
         byte data = getData();
 
         switch (data) {
@@ -72,7 +74,7 @@ public class DirectionalContainer extends MaterialData implements Directional {
     }
 
     @Override
-    public String toString() {
+    public @NotNull String toString() {
         return super.toString() + " facing " + getFacing();
     }
 
diff --git a/src/main/java/org/bukkit/material/Dispenser.java b/src/main/java/org/bukkit/material/Dispenser.java
index b12993a93781bd8a3d218a0dd102e357996ee79e..ae53c45735cba6f110971ab045fe8cb517d46833 100644
--- a/src/main/java/org/bukkit/material/Dispenser.java
+++ b/src/main/java/org/bukkit/material/Dispenser.java
@@ -2,6 +2,8 @@ package org.bukkit.material;
 
 import org.bukkit.Material;
 import org.bukkit.block.BlockFace;
+import org.jetbrains.annotations.NotNull;
+
 
 /**
  * Represents a dispenser.
@@ -16,7 +18,7 @@ public class Dispenser extends FurnaceAndDispenser {
         super(Material.LEGACY_DISPENSER);
     }
 
-    public Dispenser(BlockFace direction) {
+    public Dispenser(@NotNull BlockFace direction) {
         this();
         setFacingDirection(direction);
     }
@@ -36,7 +38,7 @@ public class Dispenser extends FurnaceAndDispenser {
     }
 
     @Override
-    public void setFacingDirection(BlockFace face) {
+    public void setFacingDirection(@NotNull BlockFace face) {
         byte data;
 
         switch (face) {
@@ -69,7 +71,7 @@ public class Dispenser extends FurnaceAndDispenser {
     }
 
     @Override
-    public BlockFace getFacing() {
+    public @NotNull BlockFace getFacing() {
         int data = getData() & 0x7;
 
         switch (data) {
diff --git a/src/main/java/org/bukkit/material/Door.java b/src/main/java/org/bukkit/material/Door.java
index d04ece5abab7a22abc4283d3043a52d4286d4103..ef5b77f7f1b2bfa741e204e836cd4d3549ff5268 100644
--- a/src/main/java/org/bukkit/material/Door.java
+++ b/src/main/java/org/bukkit/material/Door.java
@@ -3,6 +3,8 @@ package org.bukkit.material;
 import org.bukkit.Material;
 import org.bukkit.TreeSpecies;
 import org.bukkit.block.BlockFace;
+import org.jetbrains.annotations.NotNull;
+
 
 /**
  * Represents a door.
@@ -59,7 +61,7 @@ public class Door extends MaterialData implements Directional, Openable {
      * @see BlockFace#EAST
      * @see BlockFace#SOUTH
      */
-    public Door(final Material type, BlockFace face) {
+    public Door(final Material type, @NotNull BlockFace face) {
         this(type, face, false);
     }
 
@@ -84,7 +86,7 @@ public class Door extends MaterialData implements Directional, Openable {
      * @see BlockFace#EAST
      * @see BlockFace#SOUTH
      */
-    public Door(final Material type, BlockFace face, boolean isOpen) {
+    public Door(final Material type, @NotNull BlockFace face, boolean isOpen) {
         super(type);
         setTopHalf(false);
         setFacingDirection(face);
@@ -125,7 +127,7 @@ public class Door extends MaterialData implements Directional, Openable {
      * @see BlockFace#EAST
      * @see BlockFace#SOUTH
      */
-    public Door(final TreeSpecies species, BlockFace face) {
+    public Door(final @NotNull TreeSpecies species, @NotNull BlockFace face) {
         this(getWoodDoorOfSpecies(species), face, false);
     }
 
@@ -144,7 +146,7 @@ public class Door extends MaterialData implements Directional, Openable {
      * @see BlockFace#EAST
      * @see BlockFace#SOUTH
      */
-    public Door(final TreeSpecies species, BlockFace face, boolean isOpen) {
+    public Door(final @NotNull TreeSpecies species, @NotNull BlockFace face, boolean isOpen) {
         this(getWoodDoorOfSpecies(species), face, isOpen);
     }
 
@@ -156,7 +158,7 @@ public class Door extends MaterialData implements Directional, Openable {
      *
      * @see TreeSpecies
      */
-    public Door(final TreeSpecies species, boolean isHingeRight) {
+    public Door(final @NotNull TreeSpecies species, boolean isHingeRight) {
         this(getWoodDoorOfSpecies(species), isHingeRight);
     }
 
@@ -183,7 +185,7 @@ public class Door extends MaterialData implements Directional, Openable {
      * @see Material#LEGACY_ACACIA_DOOR
      * @see Material#LEGACY_DARK_OAK_DOOR
      */
-    public static Material getWoodDoorOfSpecies(TreeSpecies species) {
+    public static @NotNull Material getWoodDoorOfSpecies(@NotNull TreeSpecies species) {
         switch (species) {
             default:
             case GENERIC:
@@ -238,12 +240,12 @@ public class Door extends MaterialData implements Directional, Openable {
      * @deprecated This method should not be used; use hinge and facing accessors instead.
      */
     @Deprecated
-    public BlockFace getHingeCorner() {
+    public @NotNull BlockFace getHingeCorner() {
         return BlockFace.SELF;
     }
 
     @Override
-    public String toString() {
+    public @NotNull String toString() {
         return (isTopHalf() ? "TOP" : "BOTTOM") + " half of " + super.toString();
     }
 
@@ -255,7 +257,7 @@ public class Door extends MaterialData implements Directional, Openable {
      * @param face the direction
      */
     @Override
-    public void setFacingDirection(BlockFace face) {
+    public void setFacingDirection(@NotNull BlockFace face) {
         byte data = (byte) (getData() & 0xC);
         switch (face) {
             case WEST:
@@ -282,7 +284,7 @@ public class Door extends MaterialData implements Directional, Openable {
      * @return the direction
      */
     @Override
-    public BlockFace getFacing() {
+    public @NotNull BlockFace getFacing() {
         byte data = (byte) (getData() & 0x3);
         switch (data) {
             case 0:
diff --git a/src/main/java/org/bukkit/material/Dye.java b/src/main/java/org/bukkit/material/Dye.java
index f34f23da74013006ec453b539bb10751dcb3ecee..79defe9e1421383933bc58c711978746c4b4a954 100644
--- a/src/main/java/org/bukkit/material/Dye.java
+++ b/src/main/java/org/bukkit/material/Dye.java
@@ -2,6 +2,8 @@ package org.bukkit.material;
 
 import org.bukkit.DyeColor;
 import org.bukkit.Material;
+import org.jetbrains.annotations.NotNull;
+
 
 /**
  * Represents dye
@@ -32,7 +34,7 @@ public class Dye extends MaterialData implements Colorable {
     /**
      * @param color color of the dye
      */
-    public Dye(final DyeColor color) {
+    public Dye(final @NotNull DyeColor color) {
         super(Material.LEGACY_INK_SACK, color.getDyeData());
     }
 
@@ -52,12 +54,12 @@ public class Dye extends MaterialData implements Colorable {
      * @param color New color of this dye
      */
     @Override
-    public void setColor(DyeColor color) {
+    public void setColor(@NotNull DyeColor color) {
         setData(color.getDyeData());
     }
 
     @Override
-    public String toString() {
+    public @NotNull String toString() {
         return getColor() + " DYE(" + getData() + ")";
     }
 
diff --git a/src/main/java/org/bukkit/material/EnderChest.java b/src/main/java/org/bukkit/material/EnderChest.java
index ad232cacd94230fbcabb894cf35d540aff1d8662..04aebc4a2b3843a66ced66aabf9c08671e90f669 100644
--- a/src/main/java/org/bukkit/material/EnderChest.java
+++ b/src/main/java/org/bukkit/material/EnderChest.java
@@ -2,6 +2,8 @@ package org.bukkit.material;
 
 import org.bukkit.Material;
 import org.bukkit.block.BlockFace;
+import org.jetbrains.annotations.NotNull;
+
 
 /**
  * Represents an ender chest
@@ -21,7 +23,7 @@ public class EnderChest extends DirectionalContainer {
      *
      * @param direction the direction the ender chest's lid opens towards
      */
-    public EnderChest(BlockFace direction) {
+    public EnderChest(@NotNull BlockFace direction) {
         this();
         setFacingDirection(direction);
     }
diff --git a/src/main/java/org/bukkit/material/ExtendedRails.java b/src/main/java/org/bukkit/material/ExtendedRails.java
index 9b2577f7b5bab678d9e491323772ce616181ade3..17001b5c919fae61555d257061f1f8fed4ceae27 100644
--- a/src/main/java/org/bukkit/material/ExtendedRails.java
+++ b/src/main/java/org/bukkit/material/ExtendedRails.java
@@ -2,6 +2,8 @@ package org.bukkit.material;
 
 import org.bukkit.Material;
 import org.bukkit.block.BlockFace;
+import org.jetbrains.annotations.NotNull;
+
 
 /**
  * This is the superclass for the {@link DetectorRail} and {@link PoweredRail}
@@ -44,7 +46,7 @@ public class ExtendedRails extends Rails {
     }
 
     @Override
-    public void setDirection(BlockFace face, boolean isOnSlope) {
+    public void setDirection(@NotNull BlockFace face, boolean isOnSlope) {
         boolean extraBitSet = (getData() & 0x8) == 0x8;
 
         if (face != BlockFace.WEST && face != BlockFace.EAST && face != BlockFace.NORTH && face != BlockFace.SOUTH) {
diff --git a/src/main/java/org/bukkit/material/FlowerPot.java b/src/main/java/org/bukkit/material/FlowerPot.java
index 6101e33288dded9ce871fe6c6f0b36c895d7214a..199dcd0a713612152b34ddf0ffa64b6db1857c38 100644
--- a/src/main/java/org/bukkit/material/FlowerPot.java
+++ b/src/main/java/org/bukkit/material/FlowerPot.java
@@ -3,6 +3,9 @@ package org.bukkit.material;
 import org.bukkit.GrassSpecies;
 import org.bukkit.Material;
 import org.bukkit.TreeSpecies;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 /**
  * Represents a flower pot.
@@ -40,7 +43,7 @@ public class FlowerPot extends MaterialData {
      * @return material MaterialData for the block currently in the flower pot
      *     or null if empty
      */
-    public MaterialData getContents() {
+    public @Nullable MaterialData getContents() {
         switch (getData()) {
             case 1:
                 return new MaterialData(Material.LEGACY_RED_ROSE);
@@ -74,7 +77,7 @@ public class FlowerPot extends MaterialData {
      *
      * @param materialData MaterialData of the block to put in the flower pot.
      */
-    public void setContents(MaterialData materialData) {
+    public void setContents(@NotNull MaterialData materialData) {
         Material mat = materialData.getItemType();
 
         if (mat == Material.LEGACY_RED_ROSE) {
@@ -111,7 +114,7 @@ public class FlowerPot extends MaterialData {
     }
 
     @Override
-    public String toString() {
+    public @NotNull String toString() {
         return super.toString() + " containing " + getContents();
     }
 
diff --git a/src/main/java/org/bukkit/material/Furnace.java b/src/main/java/org/bukkit/material/Furnace.java
index 380f7f4b1f3adaa59c3202db02221abec2678fd7..db7810cacc3099c60978d71b179614306780719c 100644
--- a/src/main/java/org/bukkit/material/Furnace.java
+++ b/src/main/java/org/bukkit/material/Furnace.java
@@ -2,6 +2,8 @@ package org.bukkit.material;
 
 import org.bukkit.Material;
 import org.bukkit.block.BlockFace;
+import org.jetbrains.annotations.NotNull;
+
 
 /**
  * Represents a furnace.
@@ -21,7 +23,7 @@ public class Furnace extends FurnaceAndDispenser {
      *
      * @param direction the direction the furnace's "opening" is facing
      */
-    public Furnace(BlockFace direction) {
+    public Furnace(@NotNull BlockFace direction) {
         this();
         setFacingDirection(direction);
     }
diff --git a/src/main/java/org/bukkit/material/Gate.java b/src/main/java/org/bukkit/material/Gate.java
index fc67fc59a75410f7aa70609ebc9538bfdecdd403..84b3f0e3c617b811223c5a28c8cdbdcf722ca820 100644
--- a/src/main/java/org/bukkit/material/Gate.java
+++ b/src/main/java/org/bukkit/material/Gate.java
@@ -2,6 +2,8 @@ package org.bukkit.material;
 
 import org.bukkit.Material;
 import org.bukkit.block.BlockFace;
+import org.jetbrains.annotations.NotNull;
+
 
 /**
  * Represents a fence gate
@@ -37,7 +39,7 @@ public class Gate extends MaterialData implements Directional, Openable {
     }
 
     @Override
-    public void setFacingDirection(BlockFace face) {
+    public void setFacingDirection(@NotNull BlockFace face) {
         byte data = (byte) (getData() & ~DIR_BIT);
 
         switch (face) {
@@ -60,7 +62,7 @@ public class Gate extends MaterialData implements Directional, Openable {
     }
 
     @Override
-    public BlockFace getFacing() {
+    public @NotNull BlockFace getFacing() {
         switch (getData() & DIR_BIT) {
             case GATE_SOUTH:
                 return BlockFace.EAST;
@@ -94,7 +96,7 @@ public class Gate extends MaterialData implements Directional, Openable {
     }
 
     @Override
-    public String toString() {
+    public @NotNull String toString() {
         return (isOpen() ? "OPEN " : "CLOSED ") + " facing and opening " + getFacing();
     }
 
diff --git a/src/main/java/org/bukkit/material/Hopper.java b/src/main/java/org/bukkit/material/Hopper.java
index cfd32666c274383204dee9f9734ffb06184d2aaa..2074846a8343a8bbfd76a0ad1fb9f42b072a5cbc 100644
--- a/src/main/java/org/bukkit/material/Hopper.java
+++ b/src/main/java/org/bukkit/material/Hopper.java
@@ -2,6 +2,8 @@ package org.bukkit.material;
 
 import org.bukkit.Material;
 import org.bukkit.block.BlockFace;
+import org.jetbrains.annotations.NotNull;
+
 
 /**
  * Represents a hopper in an active or deactivated state and facing in a
@@ -33,7 +35,7 @@ public class Hopper extends MaterialData implements Directional, Redstone {
      *
      * @see BlockFace
      */
-    public Hopper(BlockFace facingDirection) {
+    public Hopper(@NotNull BlockFace facingDirection) {
         this(facingDirection, DEFAULT_ACTIVE);
     }
 
@@ -47,7 +49,7 @@ public class Hopper extends MaterialData implements Directional, Redstone {
      *
      * @see BlockFace
      */
-    public Hopper(BlockFace facingDirection, boolean isActive) {
+    public Hopper(@NotNull BlockFace facingDirection, boolean isActive) {
         super(Material.LEGACY_HOPPER);
         setFacingDirection(facingDirection);
         setActive(isActive);
@@ -94,7 +96,7 @@ public class Hopper extends MaterialData implements Directional, Redstone {
      * @see BlockFace
      */
     @Override
-    public void setFacingDirection(BlockFace face) {
+    public void setFacingDirection(@NotNull BlockFace face) {
         int data = getData() & 0x8;
 
         switch (face) {
@@ -126,7 +128,7 @@ public class Hopper extends MaterialData implements Directional, Redstone {
      * @see BlockFace
      */
     @Override
-    public BlockFace getFacing() {
+    public @NotNull BlockFace getFacing() {
         byte data = (byte) (getData() & 0x7);
 
         switch (data) {
@@ -145,7 +147,7 @@ public class Hopper extends MaterialData implements Directional, Redstone {
     }
 
     @Override
-    public String toString() {
+    public @NotNull String toString() {
         return super.toString() + " facing " + getFacing();
     }
 
diff --git a/src/main/java/org/bukkit/material/Ladder.java b/src/main/java/org/bukkit/material/Ladder.java
index de263530823aa8c1ae8b4a9bd2497d7239156384..3243147f53b1d2ddbdaa49c5379bb251cb0d70af 100644
--- a/src/main/java/org/bukkit/material/Ladder.java
+++ b/src/main/java/org/bukkit/material/Ladder.java
@@ -2,6 +2,8 @@ package org.bukkit.material;
 
 import org.bukkit.Material;
 import org.bukkit.block.BlockFace;
+import org.jetbrains.annotations.NotNull;
+
 
 /**
  * Represents Ladder data
@@ -35,7 +37,7 @@ public class Ladder extends SimpleAttachableMaterialData {
      * @return BlockFace attached to
      */
     @Override
-    public BlockFace getAttachedFace() {
+    public @NotNull BlockFace getAttachedFace() {
         byte data = getData();
 
         switch (data) {
@@ -59,7 +61,7 @@ public class Ladder extends SimpleAttachableMaterialData {
      * Sets the direction this ladder is facing
      */
     @Override
-    public void setFacingDirection(BlockFace face) {
+    public void setFacingDirection(@NotNull BlockFace face) {
         byte data = (byte) 0x0;
 
         switch (face) {
diff --git a/src/main/java/org/bukkit/material/Leaves.java b/src/main/java/org/bukkit/material/Leaves.java
index 923a794ac1d2f43b680165dfddb4119faf5ecdd1..9d8d307e6f43ad89a0074aeec2d183e11d4f0c84 100644
--- a/src/main/java/org/bukkit/material/Leaves.java
+++ b/src/main/java/org/bukkit/material/Leaves.java
@@ -2,6 +2,8 @@ package org.bukkit.material;
 
 import org.bukkit.Material;
 import org.bukkit.TreeSpecies;
+import org.jetbrains.annotations.NotNull;
+
 
 /**
  * Represents the different types of leaf block that may be permanent or can
@@ -30,7 +32,7 @@ public class Leaves extends Wood {
      *
      * @param species the species of the wood block
      */
-    public Leaves(TreeSpecies species) {
+    public Leaves(@NotNull TreeSpecies species) {
         this(DEFAULT_TYPE, species, DEFAULT_DECAYABLE);
     }
 
@@ -41,7 +43,7 @@ public class Leaves extends Wood {
      * @param species the species of the wood block
      * @param isDecayable whether the block is permanent or can disappear
      */
-    public Leaves(TreeSpecies species, boolean isDecayable) {
+    public Leaves(@NotNull TreeSpecies species, boolean isDecayable) {
         this(DEFAULT_TYPE, species, isDecayable);
     }
 
@@ -50,7 +52,7 @@ public class Leaves extends Wood {
      *
      * @param type the type of leaf block
      */
-    public Leaves(final Material type) {
+    public Leaves(final @NotNull Material type) {
         this(type, DEFAULT_SPECIES, DEFAULT_DECAYABLE);
     }
 
@@ -60,7 +62,7 @@ public class Leaves extends Wood {
      * @param type the type of leaf block
      * @param species the species of the wood block
      */
-    public Leaves(final Material type, TreeSpecies species) {
+    public Leaves(final @NotNull Material type, @NotNull TreeSpecies species) {
         this(type, species, DEFAULT_DECAYABLE);
     }
 
@@ -72,7 +74,7 @@ public class Leaves extends Wood {
      * @param species the species of the wood block
      * @param isDecayable whether the block is permanent or can disappear
      */
-    public Leaves(final Material type, TreeSpecies species, boolean isDecayable) {
+    public Leaves(final @NotNull Material type, @NotNull TreeSpecies species, boolean isDecayable) {
         super(type, species);
         setDecayable(isDecayable);
     }
@@ -130,7 +132,7 @@ public class Leaves extends Wood {
     }
 
     @Override
-    public String toString() {
+    public @NotNull String toString() {
         return getSpecies() + (isDecayable() ? " DECAYABLE " : " PERMANENT ") + (isDecaying() ? " DECAYING " : " ") + super.toString();
     }
 
diff --git a/src/main/java/org/bukkit/material/Lever.java b/src/main/java/org/bukkit/material/Lever.java
index 09f290f8898914b77f89c1546f285a6e6212499e..d3ac88e77f8f32f88d824974e996b73510b4148b 100644
--- a/src/main/java/org/bukkit/material/Lever.java
+++ b/src/main/java/org/bukkit/material/Lever.java
@@ -2,6 +2,8 @@ package org.bukkit.material;
 
 import org.bukkit.Material;
 import org.bukkit.block.BlockFace;
+import org.jetbrains.annotations.NotNull;
+
 
 /**
  * Represents a lever
@@ -55,7 +57,7 @@ public class Lever extends SimpleAttachableMaterialData implements Redstone {
      * @return BlockFace attached to
      */
     @Override
-    public BlockFace getAttachedFace() {
+    public @NotNull BlockFace getAttachedFace() {
         byte data = (byte) (getData() & 0x7);
 
         switch (data) {
@@ -88,7 +90,7 @@ public class Lever extends SimpleAttachableMaterialData implements Redstone {
      * Sets the direction this lever is pointing in
      */
     @Override
-    public void setFacingDirection(BlockFace face) {
+    public void setFacingDirection(@NotNull BlockFace face) {
         byte data = (byte) (getData() & 0x8);
         BlockFace attach = getAttachedFace();
 
@@ -139,7 +141,7 @@ public class Lever extends SimpleAttachableMaterialData implements Redstone {
     }
 
     @Override
-    public String toString() {
+    public @NotNull String toString() {
         return super.toString() + " facing " + getFacing() + " " + (isPowered() ? "" : "NOT ") + "POWERED";
     }
 
diff --git a/src/main/java/org/bukkit/material/LongGrass.java b/src/main/java/org/bukkit/material/LongGrass.java
index 497857ec37482ff477eab77d680b2a1bec52ea14..d95504b9ba4b12af60185a8061b7f43f5f541a02 100644
--- a/src/main/java/org/bukkit/material/LongGrass.java
+++ b/src/main/java/org/bukkit/material/LongGrass.java
@@ -2,6 +2,9 @@ package org.bukkit.material;
 
 import org.bukkit.GrassSpecies;
 import org.bukkit.Material;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 /**
  * Represents the different types of long grasses.
@@ -15,7 +18,7 @@ public class LongGrass extends MaterialData {
         super(Material.LEGACY_LONG_GRASS);
     }
 
-    public LongGrass(GrassSpecies species) {
+    public LongGrass(@NotNull GrassSpecies species) {
         this();
         setSpecies(species);
     }
@@ -39,7 +42,7 @@ public class LongGrass extends MaterialData {
      *
      * @return GrassSpecies of this grass
      */
-    public GrassSpecies getSpecies() {
+    public @Nullable GrassSpecies getSpecies() {
         return GrassSpecies.getByData(getData());
     }
 
@@ -48,12 +51,12 @@ public class LongGrass extends MaterialData {
      *
      * @param species New species of this grass
      */
-    public void setSpecies(GrassSpecies species) {
+    public void setSpecies(@NotNull GrassSpecies species) {
         setData(species.getData());
     }
 
     @Override
-    public String toString() {
+    public @NotNull String toString() {
         return getSpecies() + " " + super.toString();
     }
 
diff --git a/src/main/java/org/bukkit/material/MaterialData.java b/src/main/java/org/bukkit/material/MaterialData.java
index ccaddb87922b3afe22a350a3e5e5e7af86b2f398..524dd816ac169b1c2ad8e3a481cb28ec45bc1bbe 100644
--- a/src/main/java/org/bukkit/material/MaterialData.java
+++ b/src/main/java/org/bukkit/material/MaterialData.java
@@ -2,6 +2,9 @@ package org.bukkit.material;
 
 import org.bukkit.Material;
 import org.bukkit.inventory.ItemStack;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 /**
  * Handles specific metadata for certain items or blocks
@@ -68,7 +71,7 @@ public class MaterialData implements Cloneable {
      * generally useful. Consider {@link #toItemStack(int)}.
      */
     @Deprecated
-    public ItemStack toItemStack() {
+    public @NotNull ItemStack toItemStack() {
         return new ItemStack(type, 0, data);
     }
 
@@ -78,7 +81,7 @@ public class MaterialData implements Cloneable {
      * @param amount The stack size of the new stack
      * @return New ItemStack containing a copy of this MaterialData
      */
-    public ItemStack toItemStack(int amount) {
+    public @NotNull ItemStack toItemStack(int amount) {
         return new ItemStack(type, amount, data);
     }
 
@@ -93,7 +96,7 @@ public class MaterialData implements Cloneable {
     }
 
     @Override
-    public boolean equals(Object obj) {
+    public boolean equals(@Nullable Object obj) {
         if (obj != null && obj instanceof MaterialData) {
             MaterialData md = (MaterialData) obj;
 
diff --git a/src/main/java/org/bukkit/material/MonsterEggs.java b/src/main/java/org/bukkit/material/MonsterEggs.java
index 2fac218f1e237d4b867c1e6215fe40151dcceaf0..95f1ca226538d95167421d2f8b9878efbec5d180 100644
--- a/src/main/java/org/bukkit/material/MonsterEggs.java
+++ b/src/main/java/org/bukkit/material/MonsterEggs.java
@@ -3,6 +3,8 @@ package org.bukkit.material;
 import java.util.ArrayList;
 import java.util.List;
 import org.bukkit.Material;
+import org.jetbrains.annotations.NotNull;
+
 
 /**
  * Represents the different types of monster eggs
@@ -42,7 +44,7 @@ public class MonsterEggs extends TexturedMaterial {
     }
 
     @Override
-    public List<Material> getTextures() {
+    public @NotNull List<Material> getTextures() {
         return textures;
     }
 
diff --git a/src/main/java/org/bukkit/material/Mushroom.java b/src/main/java/org/bukkit/material/Mushroom.java
index 8927b307adcc3c98aa96caea38ea2eb9338e284e..3e6e44c7dca6348672d0a352d3f7e3427b5f2a6f 100644
--- a/src/main/java/org/bukkit/material/Mushroom.java
+++ b/src/main/java/org/bukkit/material/Mushroom.java
@@ -6,6 +6,9 @@ import java.util.Set;
 import org.bukkit.Material;
 import org.bukkit.block.BlockFace;
 import org.bukkit.material.types.MushroomBlockTexture;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 /**
  * Represents a huge mushroom block with certain combinations of faces set to
@@ -70,7 +73,7 @@ public class Mushroom extends MaterialData {
      * @see Material#LEGACY_HUGE_MUSHROOM_1
      * @see Material#LEGACY_HUGE_MUSHROOM_2
      */
-    public Mushroom(Material shroom, MushroomBlockTexture texture) {
+    public Mushroom(Material shroom, @NotNull MushroomBlockTexture texture) {
         this(shroom, texture.getData());
     }
 
@@ -113,7 +116,7 @@ public class Mushroom extends MaterialData {
      *
      * @return The mushroom texture of this block
      */
-    public MushroomBlockTexture getBlockTexture() {
+    public @Nullable MushroomBlockTexture getBlockTexture() {
         return MushroomBlockTexture.getByData(getData());
     }
 
@@ -122,7 +125,7 @@ public class Mushroom extends MaterialData {
      *
      * @param texture The mushroom texture to set
      */
-    public void setBlockTexture(MushroomBlockTexture texture) {
+    public void setBlockTexture(@NotNull MushroomBlockTexture texture) {
         setData(texture.getData());
     }
 
@@ -132,7 +135,7 @@ public class Mushroom extends MaterialData {
      * @param face The face to check.
      * @return True if it is painted.
      */
-    public boolean isFacePainted(BlockFace face) {
+    public boolean isFacePainted(@NotNull BlockFace face) {
         byte data = getData();
 
         if (data == MushroomBlockTexture.ALL_PORES.getData() || data == MushroomBlockTexture.STEM_SIDES.getData()
@@ -171,7 +174,7 @@ public class Mushroom extends MaterialData {
      * @deprecated Use MushroomBlockType cap options
      */
     @Deprecated
-    public void setFacePainted(BlockFace face, boolean painted) {
+    public void setFacePainted(@NotNull BlockFace face, boolean painted) {
         if (painted == isFacePainted(face)) {
             return;
         }
@@ -244,7 +247,7 @@ public class Mushroom extends MaterialData {
      * @return A set of all faces that are currently painted (an empty set if
      *     it is a stem)
      */
-    public Set<BlockFace> getPaintedFaces() {
+    public @NotNull Set<BlockFace> getPaintedFaces() {
         EnumSet<BlockFace> faces = EnumSet.noneOf(BlockFace.class);
 
         if (isFacePainted(BlockFace.WEST)) {
@@ -275,7 +278,7 @@ public class Mushroom extends MaterialData {
     }
 
     @Override
-    public String toString() {
+    public @NotNull String toString() {
         return getItemType() + (isStem() ? " STEM " : " CAP ") + getPaintedFaces();
     }
 
diff --git a/src/main/java/org/bukkit/material/NetherWarts.java b/src/main/java/org/bukkit/material/NetherWarts.java
index 1fed8b937a68bfd12d04e04b962e1627c36a074f..f42fb15031aca71097df455abe16808a7a96b8bd 100644
--- a/src/main/java/org/bukkit/material/NetherWarts.java
+++ b/src/main/java/org/bukkit/material/NetherWarts.java
@@ -2,6 +2,8 @@ package org.bukkit.material;
 
 import org.bukkit.Material;
 import org.bukkit.NetherWartsState;
+import org.jetbrains.annotations.NotNull;
+
 
 /**
  * Represents nether wart
@@ -15,7 +17,7 @@ public class NetherWarts extends MaterialData {
         super(Material.LEGACY_NETHER_WARTS);
     }
 
-    public NetherWarts(NetherWartsState state) {
+    public NetherWarts(@NotNull NetherWartsState state) {
         this();
         setState(state);
     }
@@ -39,7 +41,7 @@ public class NetherWarts extends MaterialData {
      *
      * @return NetherWartsState of this nether wart
      */
-    public NetherWartsState getState() {
+    public @NotNull NetherWartsState getState() {
         switch (getData()) {
             case 0:
                 return NetherWartsState.SEEDED;
@@ -57,7 +59,7 @@ public class NetherWarts extends MaterialData {
      *
      * @param state New growth state of this nether wart
      */
-    public void setState(NetherWartsState state) {
+    public void setState(@NotNull NetherWartsState state) {
         switch (state) {
             case SEEDED:
                 setData((byte) 0x0);
@@ -75,7 +77,7 @@ public class NetherWarts extends MaterialData {
     }
 
     @Override
-    public String toString() {
+    public @NotNull String toString() {
         return getState() + " " + super.toString();
     }
 
diff --git a/src/main/java/org/bukkit/material/Observer.java b/src/main/java/org/bukkit/material/Observer.java
index 843790b331e1ed1db9e46716251851b0782497c1..bce83b36f85335998bdac5066ad61711e9641424 100644
--- a/src/main/java/org/bukkit/material/Observer.java
+++ b/src/main/java/org/bukkit/material/Observer.java
@@ -2,6 +2,8 @@ package org.bukkit.material;
 
 import org.bukkit.Material;
 import org.bukkit.block.BlockFace;
+import org.jetbrains.annotations.NotNull;
+
 
 /**
  * Represents an observer.
@@ -16,7 +18,7 @@ public class Observer extends MaterialData implements Directional, Redstone {
         super(Material.LEGACY_OBSERVER);
     }
 
-    public Observer(BlockFace direction) {
+    public Observer(@NotNull BlockFace direction) {
         this();
         setFacingDirection(direction);
     }
@@ -41,7 +43,7 @@ public class Observer extends MaterialData implements Directional, Redstone {
     }
 
     @Override
-    public void setFacingDirection(BlockFace face) {
+    public void setFacingDirection(@NotNull BlockFace face) {
         byte data = (byte) (getData() & 0x8);
 
         switch (face) {
@@ -69,7 +71,7 @@ public class Observer extends MaterialData implements Directional, Redstone {
     }
 
     @Override
-    public BlockFace getFacing() {
+    public @NotNull BlockFace getFacing() {
         int data = getData() & 0x7;
 
         switch (data) {
@@ -91,7 +93,7 @@ public class Observer extends MaterialData implements Directional, Redstone {
     }
 
     @Override
-    public String toString() {
+    public @NotNull String toString() {
         return super.toString() + " facing " + getFacing();
     }
 
diff --git a/src/main/java/org/bukkit/material/PistonBaseMaterial.java b/src/main/java/org/bukkit/material/PistonBaseMaterial.java
index 8165e94339097ac5cf8e27ebc60256c8fefd7d63..ae35d30149a441fd16637eb3d1b3c931cc148151 100644
--- a/src/main/java/org/bukkit/material/PistonBaseMaterial.java
+++ b/src/main/java/org/bukkit/material/PistonBaseMaterial.java
@@ -2,6 +2,8 @@ package org.bukkit.material;
 
 import org.bukkit.Material;
 import org.bukkit.block.BlockFace;
+import org.jetbrains.annotations.NotNull;
+
 
 /**
  * Material data for the piston base block
@@ -29,7 +31,7 @@ public class PistonBaseMaterial extends MaterialData implements Directional, Red
     }
 
     @Override
-    public void setFacingDirection(BlockFace face) {
+    public void setFacingDirection(@NotNull BlockFace face) {
         byte data = (byte) (getData() & 0x8);
 
         switch (face) {
@@ -53,7 +55,7 @@ public class PistonBaseMaterial extends MaterialData implements Directional, Red
     }
 
     @Override
-    public BlockFace getFacing() {
+    public @NotNull BlockFace getFacing() {
         byte dir = (byte) (getData() & 7);
 
         switch (dir) {
diff --git a/src/main/java/org/bukkit/material/PistonExtensionMaterial.java b/src/main/java/org/bukkit/material/PistonExtensionMaterial.java
index e7cfc7158b5d31376ddb8f5415e22e76c6d62f10..b7208e2f1a50612cf729abe74d983a33e9f3942e 100644
--- a/src/main/java/org/bukkit/material/PistonExtensionMaterial.java
+++ b/src/main/java/org/bukkit/material/PistonExtensionMaterial.java
@@ -2,6 +2,8 @@ package org.bukkit.material;
 
 import org.bukkit.Material;
 import org.bukkit.block.BlockFace;
+import org.jetbrains.annotations.NotNull;
+
 
 /**
  * Material data for the piston extension block
@@ -27,7 +29,7 @@ public class PistonExtensionMaterial extends MaterialData implements Attachable
     }
 
     @Override
-    public void setFacingDirection(BlockFace face) {
+    public void setFacingDirection(@NotNull BlockFace face) {
         byte data = (byte) (getData() & 0x8);
 
         switch (face) {
@@ -51,7 +53,7 @@ public class PistonExtensionMaterial extends MaterialData implements Attachable
     }
 
     @Override
-    public BlockFace getFacing() {
+    public @NotNull BlockFace getFacing() {
         byte dir = (byte) (getData() & 7);
 
         switch (dir) {
@@ -91,7 +93,7 @@ public class PistonExtensionMaterial extends MaterialData implements Attachable
     }
 
     @Override
-    public BlockFace getAttachedFace() {
+    public @NotNull BlockFace getAttachedFace() {
         return getFacing().getOppositeFace();
     }
 
diff --git a/src/main/java/org/bukkit/material/PressurePlate.java b/src/main/java/org/bukkit/material/PressurePlate.java
index ffababbc1b1ef1f19e941beb6412457b839e92eb..3e3fb20aa64c4ad3601eb90b84d000db76a63b72 100644
--- a/src/main/java/org/bukkit/material/PressurePlate.java
+++ b/src/main/java/org/bukkit/material/PressurePlate.java
@@ -1,6 +1,8 @@
 package org.bukkit.material;
 
 import org.bukkit.Material;
+import org.jetbrains.annotations.NotNull;
+
 
 /**
  * Represents a pressure plate
@@ -34,7 +36,7 @@ public class PressurePlate extends MaterialData implements PressureSensor {
     }
 
     @Override
-    public String toString() {
+    public @NotNull String toString() {
         return super.toString() + (isPressed() ? " PRESSED" : "");
     }
 
diff --git a/src/main/java/org/bukkit/material/Pumpkin.java b/src/main/java/org/bukkit/material/Pumpkin.java
index 7c1b5eea0aba649bc9ed6b05836609e7cda314c0..8e9537d32e8ae5d0b8c9e34c44b877a3419d7518 100644
--- a/src/main/java/org/bukkit/material/Pumpkin.java
+++ b/src/main/java/org/bukkit/material/Pumpkin.java
@@ -2,6 +2,8 @@ package org.bukkit.material;
 
 import org.bukkit.Material;
 import org.bukkit.block.BlockFace;
+import org.jetbrains.annotations.NotNull;
+
 
 /**
  * Represents a pumpkin.
@@ -21,7 +23,7 @@ public class Pumpkin extends MaterialData implements Directional {
      *
      * @param direction the direction the pumkin's face is facing
      */
-    public Pumpkin(BlockFace direction) {
+    public Pumpkin(@NotNull BlockFace direction) {
         this();
         setFacingDirection(direction);
     }
@@ -45,7 +47,7 @@ public class Pumpkin extends MaterialData implements Directional {
     }
 
     @Override
-    public void setFacingDirection(BlockFace face) {
+    public void setFacingDirection(@NotNull BlockFace face) {
         byte data;
 
         switch (face) {
@@ -70,7 +72,7 @@ public class Pumpkin extends MaterialData implements Directional {
     }
 
     @Override
-    public BlockFace getFacing() {
+    public @NotNull BlockFace getFacing() {
         byte data = getData();
 
         switch (data) {
@@ -90,7 +92,7 @@ public class Pumpkin extends MaterialData implements Directional {
     }
 
     @Override
-    public String toString() {
+    public @NotNull String toString() {
         return super.toString() + " facing " + getFacing() + " " + (isLit() ? "" : "NOT ") + "LIT";
     }
 
diff --git a/src/main/java/org/bukkit/material/Rails.java b/src/main/java/org/bukkit/material/Rails.java
index 0b041ee66c38cb884a0d69d1cc17df3fe25f7533..80d15cda01e9c15fda8ecff2cc946ae377214a34 100644
--- a/src/main/java/org/bukkit/material/Rails.java
+++ b/src/main/java/org/bukkit/material/Rails.java
@@ -2,6 +2,8 @@ package org.bukkit.material;
 
 import org.bukkit.Material;
 import org.bukkit.block.BlockFace;
+import org.jetbrains.annotations.NotNull;
+
 
 /**
  * Represents minecart rails.
@@ -55,7 +57,7 @@ public class Rails extends MaterialData {
      *     is the ascending direction if the track is set on a slope. If it is
      *     set as a curve, the corner of the track is returned.
      */
-    public BlockFace getDirection() {
+    public @NotNull BlockFace getDirection() {
         byte d = getConvertedData();
 
         switch (d) {
@@ -93,7 +95,7 @@ public class Rails extends MaterialData {
     }
 
     @Override
-    public String toString() {
+    public @NotNull String toString() {
         return super.toString() + " facing " + getDirection() + (isCurve() ? " on a curve" : (isOnSlope() ? " on a slope" : ""));
     }
 
@@ -120,7 +122,7 @@ public class Rails extends MaterialData {
      * @param face the direction the track should be facing
      * @param isOnSlope whether or not the track should be on a slope
      */
-    public void setDirection(BlockFace face, boolean isOnSlope) {
+    public void setDirection(@NotNull BlockFace face, boolean isOnSlope) {
         switch (face) {
         case EAST:
             setData((byte) (isOnSlope ? 0x2 : 0x1));
diff --git a/src/main/java/org/bukkit/material/RedstoneTorch.java b/src/main/java/org/bukkit/material/RedstoneTorch.java
index 40956914366195f8a658952923ea7e92235dc4a8..3ce82b67ac7fe604f4da08e5ade8df818689a027 100644
--- a/src/main/java/org/bukkit/material/RedstoneTorch.java
+++ b/src/main/java/org/bukkit/material/RedstoneTorch.java
@@ -1,6 +1,8 @@
 package org.bukkit.material;
 
 import org.bukkit.Material;
+import org.jetbrains.annotations.NotNull;
+
 
 /**
  * Represents a redstone torch
@@ -40,7 +42,7 @@ public class RedstoneTorch extends Torch implements Redstone {
     }
 
     @Override
-    public String toString() {
+    public @NotNull String toString() {
         return super.toString() + " " + (isPowered() ? "" : "NOT ") + "POWERED";
     }
 
diff --git a/src/main/java/org/bukkit/material/RedstoneWire.java b/src/main/java/org/bukkit/material/RedstoneWire.java
index 8877ef48eb8de20b220d40c8068e5da2566d6109..b235924a0f6e85417f4f8f50b73bc6f633233932 100644
--- a/src/main/java/org/bukkit/material/RedstoneWire.java
+++ b/src/main/java/org/bukkit/material/RedstoneWire.java
@@ -1,6 +1,8 @@
 package org.bukkit.material;
 
 import org.bukkit.Material;
+import org.jetbrains.annotations.NotNull;
+
 
 /**
  * Represents redstone wire
@@ -40,7 +42,7 @@ public class RedstoneWire extends MaterialData implements Redstone {
     }
 
     @Override
-    public String toString() {
+    public @NotNull String toString() {
         return super.toString() + " " + (isPowered() ? "" : "NOT ") + "POWERED";
     }
 
diff --git a/src/main/java/org/bukkit/material/Sandstone.java b/src/main/java/org/bukkit/material/Sandstone.java
index 8d8673edcd19d03077e7d53388c3ba2e9d80a618..fbe67690c63c46cad8afcefcbaf17fbe32570ebe 100644
--- a/src/main/java/org/bukkit/material/Sandstone.java
+++ b/src/main/java/org/bukkit/material/Sandstone.java
@@ -2,6 +2,9 @@ package org.bukkit.material;
 
 import org.bukkit.Material;
 import org.bukkit.SandstoneType;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 /**
  * Represents the different types of sandstone.
@@ -15,7 +18,7 @@ public class Sandstone extends MaterialData {
         super(Material.LEGACY_SANDSTONE);
     }
 
-    public Sandstone(SandstoneType type) {
+    public Sandstone(@NotNull SandstoneType type) {
         this();
         setType(type);
     }
@@ -39,7 +42,7 @@ public class Sandstone extends MaterialData {
      *
      * @return SandstoneType of this sandstone
      */
-    public SandstoneType getType() {
+    public @Nullable SandstoneType getType() {
         return SandstoneType.getByData(getData());
     }
 
@@ -48,12 +51,12 @@ public class Sandstone extends MaterialData {
      *
      * @param type New type of this sandstone
      */
-    public void setType(SandstoneType type) {
+    public void setType(@NotNull SandstoneType type) {
         setData(type.getData());
     }
 
     @Override
-    public String toString() {
+    public @NotNull String toString() {
         return getType() + " " + super.toString();
     }
 
diff --git a/src/main/java/org/bukkit/material/Sapling.java b/src/main/java/org/bukkit/material/Sapling.java
index c615a0022256887022ba7f347c19005478c35691..b687e6df4a134009a703f8ef4b130d46c7316dd5 100644
--- a/src/main/java/org/bukkit/material/Sapling.java
+++ b/src/main/java/org/bukkit/material/Sapling.java
@@ -2,6 +2,8 @@ package org.bukkit.material;
 
 import org.bukkit.Material;
 import org.bukkit.TreeSpecies;
+import org.jetbrains.annotations.NotNull;
+
 
 /**
  * Represents the different types of Tree block that face a direction.
@@ -26,7 +28,7 @@ public class Sapling extends Wood {
      *
      * @param species the species of the sapling
      */
-    public Sapling(TreeSpecies species) {
+    public Sapling(@NotNull TreeSpecies species) {
         this(species, false);
     }
 
@@ -37,7 +39,7 @@ public class Sapling extends Wood {
      * @param species the species of the tree block
      * @param isInstantGrowable true if the Sapling should grow when next ticked with bonemeal
      */
-    public Sapling(TreeSpecies species, boolean isInstantGrowable) {
+    public Sapling(@NotNull TreeSpecies species, boolean isInstantGrowable) {
         this(Material.LEGACY_SAPLING, species, isInstantGrowable);
     }
 
@@ -46,7 +48,7 @@ public class Sapling extends Wood {
      *
      * @param type the type of tree block
      */
-    public Sapling(final Material type) {
+    public Sapling(final @NotNull Material type) {
         this(type, DEFAULT_SPECIES, false);
     }
 
@@ -56,7 +58,7 @@ public class Sapling extends Wood {
      * @param type the type of sapling
      * @param species the species of the sapling
      */
-    public Sapling(final Material type, TreeSpecies species) {
+    public Sapling(final @NotNull Material type, @NotNull TreeSpecies species) {
         this(type, species, false);
     }
 
@@ -69,7 +71,7 @@ public class Sapling extends Wood {
      * @param isInstantGrowable true if the Sapling should grow when next ticked
      * with bonemeal
      */
-    public Sapling(final Material type, TreeSpecies species, boolean isInstantGrowable) {
+    public Sapling(final @NotNull Material type, @NotNull TreeSpecies species, boolean isInstantGrowable) {
         super(type, species);
         setIsInstantGrowable(isInstantGrowable);
     }
@@ -104,7 +106,7 @@ public class Sapling extends Wood {
     }
 
     @Override
-    public String toString() {
+    public @NotNull String toString() {
         return getSpecies() + " " + (isInstantGrowable() ? " IS_INSTANT_GROWABLE " : "") + " " + super.toString();
     }
 
diff --git a/src/main/java/org/bukkit/material/Sign.java b/src/main/java/org/bukkit/material/Sign.java
index 3b32679b4a670aaaaeb0481265d189a3bb99bdca..13662e4558c7e15d1cde6d07d279c6aababc88bc 100644
--- a/src/main/java/org/bukkit/material/Sign.java
+++ b/src/main/java/org/bukkit/material/Sign.java
@@ -2,6 +2,8 @@ package org.bukkit.material;
 
 import org.bukkit.Material;
 import org.bukkit.block.BlockFace;
+import org.jetbrains.annotations.NotNull;
+
 
 /**
  * MaterialData for signs
@@ -45,7 +47,7 @@ public class Sign extends MaterialData implements Attachable {
      * @return BlockFace attached to
      */
     @Override
-    public BlockFace getAttachedFace() {
+    public @NotNull BlockFace getAttachedFace() {
         if (isWallSign()) {
             byte data = getData();
 
@@ -75,7 +77,7 @@ public class Sign extends MaterialData implements Attachable {
      * @return BlockFace indicating where this sign is facing
      */
     @Override
-    public BlockFace getFacing() {
+    public @NotNull BlockFace getFacing() {
         byte data = getData();
 
         if (!isWallSign()) {
@@ -136,7 +138,7 @@ public class Sign extends MaterialData implements Attachable {
     }
 
     @Override
-    public void setFacingDirection(BlockFace face) {
+    public void setFacingDirection(@NotNull BlockFace face) {
         byte data;
 
         if (isWallSign()) {
@@ -229,7 +231,7 @@ public class Sign extends MaterialData implements Attachable {
     }
 
     @Override
-    public String toString() {
+    public @NotNull String toString() {
         return super.toString() + " facing " + getFacing();
     }
 
diff --git a/src/main/java/org/bukkit/material/SimpleAttachableMaterialData.java b/src/main/java/org/bukkit/material/SimpleAttachableMaterialData.java
index 6267d81ba2e9dde3f8a1063df66940086b4f5fce..4ddd4204c45649d1393db81719cca7c23c252819 100644
--- a/src/main/java/org/bukkit/material/SimpleAttachableMaterialData.java
+++ b/src/main/java/org/bukkit/material/SimpleAttachableMaterialData.java
@@ -2,6 +2,8 @@ package org.bukkit.material;
 
 import org.bukkit.Material;
 import org.bukkit.block.BlockFace;
+import org.jetbrains.annotations.NotNull;
+
 
 /**
  * Simple utility class for attachable MaterialData subclasses
@@ -12,7 +14,7 @@ import org.bukkit.block.BlockFace;
 @Deprecated
 public abstract class SimpleAttachableMaterialData extends MaterialData implements Attachable {
 
-    public SimpleAttachableMaterialData(Material type, BlockFace direction) {
+    public SimpleAttachableMaterialData(Material type, @NotNull BlockFace direction) {
         this(type);
         setFacingDirection(direction);
     }
@@ -32,13 +34,13 @@ public abstract class SimpleAttachableMaterialData extends MaterialData implemen
     }
 
     @Override
-    public BlockFace getFacing() {
+    public @NotNull BlockFace getFacing() {
         BlockFace attachedFace = getAttachedFace();
         return attachedFace == null ? null : attachedFace.getOppositeFace();
     }
 
     @Override
-    public String toString() {
+    public @NotNull String toString() {
         return super.toString() + " facing " + getFacing();
     }
 
diff --git a/src/main/java/org/bukkit/material/Skull.java b/src/main/java/org/bukkit/material/Skull.java
index a73ad62468a9589f78e270a82cd9ac8ff1b240b2..11083a0d65e70040a2f863abc8bceecf29eca462 100644
--- a/src/main/java/org/bukkit/material/Skull.java
+++ b/src/main/java/org/bukkit/material/Skull.java
@@ -2,6 +2,8 @@ package org.bukkit.material;
 
 import org.bukkit.Material;
 import org.bukkit.block.BlockFace;
+import org.jetbrains.annotations.NotNull;
+
 
 /**
  * Represents a skull.
@@ -20,7 +22,7 @@ public class Skull extends MaterialData implements Directional {
      *
      * @param direction the direction the skull's face is facing
      */
-    public Skull(BlockFace direction) {
+    public Skull(@NotNull BlockFace direction) {
         this();
         setFacingDirection(direction);
     }
@@ -40,7 +42,7 @@ public class Skull extends MaterialData implements Directional {
     }
 
     @Override
-    public void setFacingDirection(BlockFace face) {
+    public void setFacingDirection(@NotNull BlockFace face) {
         int data;
 
         switch (face) {
@@ -69,7 +71,7 @@ public class Skull extends MaterialData implements Directional {
     }
 
     @Override
-    public BlockFace getFacing() {
+    public @NotNull BlockFace getFacing() {
         int data = getData();
 
         switch (data) {
@@ -92,7 +94,7 @@ public class Skull extends MaterialData implements Directional {
     }
 
     @Override
-    public String toString() {
+    public @NotNull String toString() {
         return super.toString() + " facing " + getFacing();
     }
 
diff --git a/src/main/java/org/bukkit/material/SmoothBrick.java b/src/main/java/org/bukkit/material/SmoothBrick.java
index e4812b7cef9847745d147aad87181c4eb903f5df..80354af40d06d22caa0f26a210839f1c03f99e6d 100644
--- a/src/main/java/org/bukkit/material/SmoothBrick.java
+++ b/src/main/java/org/bukkit/material/SmoothBrick.java
@@ -3,6 +3,8 @@ package org.bukkit.material;
 import java.util.ArrayList;
 import java.util.List;
 import org.bukkit.Material;
+import org.jetbrains.annotations.NotNull;
+
 
 /**
  * Represents the different types of smooth bricks.
@@ -43,7 +45,7 @@ public class SmoothBrick extends TexturedMaterial {
     }
 
     @Override
-    public List<Material> getTextures() {
+    public @NotNull List<Material> getTextures() {
         return textures;
     }
 
diff --git a/src/main/java/org/bukkit/material/SpawnEgg.java b/src/main/java/org/bukkit/material/SpawnEgg.java
index a177021d259110ebf0c26e5a19cea5d9f6f3a8a8..370ded6309e3d65911ff370a32777a11083bebda 100644
--- a/src/main/java/org/bukkit/material/SpawnEgg.java
+++ b/src/main/java/org/bukkit/material/SpawnEgg.java
@@ -3,6 +3,9 @@ package org.bukkit.material;
 import org.bukkit.Material;
 import org.bukkit.entity.EntityType;
 import org.bukkit.inventory.meta.SpawnEggMeta;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 /**
  * Represents a spawn egg that can be used to spawn mobs
@@ -34,7 +37,7 @@ public class SpawnEgg extends MaterialData {
         super(Material.LEGACY_MONSTER_EGG, data);
     }
 
-    public SpawnEgg(EntityType type) {
+    public SpawnEgg(@NotNull EntityType type) {
         this();
         setSpawnedType(type);
     }
@@ -46,7 +49,7 @@ public class SpawnEgg extends MaterialData {
      * @deprecated This is now stored in {@link SpawnEggMeta}.
      */
     @Deprecated
-    public EntityType getSpawnedType() {
+    public @Nullable EntityType getSpawnedType() {
         return EntityType.fromId(getData());
     }
 
@@ -57,12 +60,12 @@ public class SpawnEgg extends MaterialData {
      * @deprecated This is now stored in {@link SpawnEggMeta}.
      */
     @Deprecated
-    public void setSpawnedType(EntityType type) {
+    public void setSpawnedType(@NotNull EntityType type) {
         setData((byte) type.getTypeId());
     }
 
     @Override
-    public String toString() {
+    public @NotNull String toString() {
         return "SPAWN EGG{" + getSpawnedType() + "}";
     }
 
diff --git a/src/main/java/org/bukkit/material/Stairs.java b/src/main/java/org/bukkit/material/Stairs.java
index e5db60bd0d5c0d4990d418cf89415274c7698a9d..2ece5cb973bbbf292c7517768b0e7ed582381a03 100644
--- a/src/main/java/org/bukkit/material/Stairs.java
+++ b/src/main/java/org/bukkit/material/Stairs.java
@@ -2,6 +2,8 @@ package org.bukkit.material;
 
 import org.bukkit.Material;
 import org.bukkit.block.BlockFace;
+import org.jetbrains.annotations.NotNull;
+
 
 /**
  * Represents stairs.
@@ -29,7 +31,7 @@ public class Stairs extends MaterialData implements Directional {
     /**
      * @return the direction the stairs ascend towards
      */
-    public BlockFace getAscendingDirection() {
+    public @NotNull BlockFace getAscendingDirection() {
         byte data = getData();
 
         switch (data & 0x3) {
@@ -51,7 +53,7 @@ public class Stairs extends MaterialData implements Directional {
     /**
      * @return the direction the stairs descend towards
      */
-    public BlockFace getDescendingDirection() {
+    public @NotNull BlockFace getDescendingDirection() {
         return getAscendingDirection().getOppositeFace();
     }
 
@@ -59,7 +61,7 @@ public class Stairs extends MaterialData implements Directional {
      * Set the direction the stair part of the block is facing
      */
     @Override
-    public void setFacingDirection(BlockFace face) {
+    public void setFacingDirection(@NotNull BlockFace face) {
         byte data;
 
         switch (face) {
@@ -88,7 +90,7 @@ public class Stairs extends MaterialData implements Directional {
      * @return the direction the stair part of the block is facing
      */
     @Override
-    public BlockFace getFacing() {
+    public @NotNull BlockFace getFacing() {
         return getDescendingDirection();
     }
 
@@ -116,7 +118,7 @@ public class Stairs extends MaterialData implements Directional {
     }
 
     @Override
-    public String toString() {
+    public @NotNull String toString() {
         return super.toString() + " facing " + getFacing() + (isInverted() ? " inverted" : "");
     }
 
diff --git a/src/main/java/org/bukkit/material/Step.java b/src/main/java/org/bukkit/material/Step.java
index 10c0465cf58d680bfa9a0f9233f94e8b6d5a9b93..6f360105880ce5d9c4f5e5152f28393f7d0dcbae 100644
--- a/src/main/java/org/bukkit/material/Step.java
+++ b/src/main/java/org/bukkit/material/Step.java
@@ -3,6 +3,8 @@ package org.bukkit.material;
 import java.util.ArrayList;
 import java.util.List;
 import org.bukkit.Material;
+import org.jetbrains.annotations.NotNull;
+
 
 /**
  * Represents the different types of steps.
@@ -46,7 +48,7 @@ public class Step extends TexturedMaterial {
     }
 
     @Override
-    public List<Material> getTextures() {
+    public @NotNull List<Material> getTextures() {
         return textures;
     }
 
@@ -101,7 +103,7 @@ public class Step extends TexturedMaterial {
     }
 
     @Override
-    public String toString() {
+    public @NotNull String toString() {
         return super.toString() + (isInverted() ? "inverted" : "");
     }
 }
diff --git a/src/main/java/org/bukkit/material/TexturedMaterial.java b/src/main/java/org/bukkit/material/TexturedMaterial.java
index 6e0a834794453eff7b3efc93e90c9bf49ef7c688..108d0d0d6e4716a1814a4ca8e9cacaf9129f02e8 100644
--- a/src/main/java/org/bukkit/material/TexturedMaterial.java
+++ b/src/main/java/org/bukkit/material/TexturedMaterial.java
@@ -2,6 +2,8 @@ package org.bukkit.material;
 
 import java.util.List;
 import org.bukkit.Material;
+import org.jetbrains.annotations.NotNull;
+
 
 /**
  * Represents textured materials like steps and smooth bricks
@@ -85,7 +87,7 @@ public abstract class TexturedMaterial extends MaterialData {
     }
 
     @Override
-    public String toString() {
+    public @NotNull String toString() {
         return getMaterial() + " " + super.toString();
     }
 
diff --git a/src/main/java/org/bukkit/material/Torch.java b/src/main/java/org/bukkit/material/Torch.java
index a4f0c62dcd39f94a68bca8cc76311847118d9ad1..e52f1dff5065c4a18beecaa92f6e07d5e04dd0b6 100644
--- a/src/main/java/org/bukkit/material/Torch.java
+++ b/src/main/java/org/bukkit/material/Torch.java
@@ -2,6 +2,8 @@ package org.bukkit.material;
 
 import org.bukkit.Material;
 import org.bukkit.block.BlockFace;
+import org.jetbrains.annotations.NotNull;
+
 
 /**
  * MaterialData for torches
@@ -35,7 +37,7 @@ public class Torch extends SimpleAttachableMaterialData {
      * @return BlockFace attached to
      */
     @Override
-    public BlockFace getAttachedFace() {
+    public @NotNull BlockFace getAttachedFace() {
         byte data = getData();
 
         switch (data) {
@@ -58,7 +60,7 @@ public class Torch extends SimpleAttachableMaterialData {
     }
 
     @Override
-    public void setFacingDirection(BlockFace face) {
+    public void setFacingDirection(@NotNull BlockFace face) {
         byte data;
 
         switch (face) {
diff --git a/src/main/java/org/bukkit/material/TrapDoor.java b/src/main/java/org/bukkit/material/TrapDoor.java
index effedfc714d67254428b548bba74264cdba4ba15..e11df2c3df448b60e4e6575bce55e5b416fb19c3 100644
--- a/src/main/java/org/bukkit/material/TrapDoor.java
+++ b/src/main/java/org/bukkit/material/TrapDoor.java
@@ -2,6 +2,8 @@ package org.bukkit.material;
 
 import org.bukkit.Material;
 import org.bukkit.block.BlockFace;
+import org.jetbrains.annotations.NotNull;
+
 
 /**
  * Represents a trap door
@@ -70,7 +72,7 @@ public class TrapDoor extends SimpleAttachableMaterialData implements Openable {
     }
 
     @Override
-    public BlockFace getAttachedFace() {
+    public @NotNull BlockFace getAttachedFace() {
         byte data = (byte) (getData() & 0x3);
 
         switch (data) {
@@ -92,7 +94,7 @@ public class TrapDoor extends SimpleAttachableMaterialData implements Openable {
     }
 
     @Override
-    public void setFacingDirection(BlockFace face) {
+    public void setFacingDirection(@NotNull BlockFace face) {
         byte data = (byte) (getData() & 0xC);
 
         switch (face) {
@@ -111,7 +113,7 @@ public class TrapDoor extends SimpleAttachableMaterialData implements Openable {
     }
 
     @Override
-    public String toString() {
+    public @NotNull String toString() {
         return (isOpen() ? "OPEN " : "CLOSED ") + super.toString() + " with hinges set " + getAttachedFace() + (isInverted() ? " inverted" : "");
     }
 
diff --git a/src/main/java/org/bukkit/material/Tree.java b/src/main/java/org/bukkit/material/Tree.java
index e759f50339903ab10f50bebe56bab5cfe8d9f7e0..75cb1760a2d05513b8b6585149c4287fdf7a3466 100644
--- a/src/main/java/org/bukkit/material/Tree.java
+++ b/src/main/java/org/bukkit/material/Tree.java
@@ -3,6 +3,8 @@ package org.bukkit.material;
 import org.bukkit.Material;
 import org.bukkit.TreeSpecies;
 import org.bukkit.block.BlockFace;
+import org.jetbrains.annotations.NotNull;
+
 
 /**
  * Represents the different types of Tree block that face a direction.
@@ -41,7 +43,7 @@ public class Tree extends Wood {
      * @param species the species of the tree block
      * @param dir the direction the tree block is facing
      */
-    public Tree(TreeSpecies species, BlockFace dir) {
+    public Tree(TreeSpecies species, @NotNull BlockFace dir) {
         this(DEFAULT_TYPE, species, dir);
     }
 
@@ -72,7 +74,7 @@ public class Tree extends Wood {
      * @param species the species of the tree block
      * @param dir the direction the tree block is facing
      */
-    public Tree(final Material type, TreeSpecies species, BlockFace dir) {
+    public Tree(final Material type, TreeSpecies species, @NotNull BlockFace dir) {
         super(type, species);
         setDirection(dir);
     }
@@ -99,7 +101,7 @@ public class Tree extends Wood {
      * </ul>
      */
     @SuppressWarnings("deprecation")
-    public BlockFace getDirection() {
+    public @NotNull BlockFace getDirection() {
         switch ((getData() >> 2) & 0x3) {
             case 0: // Up-down
             default:
@@ -119,7 +121,7 @@ public class Tree extends Wood {
      * @param dir - direction of end of log (BlockFace.SELF for no direction)
      */
     @SuppressWarnings("deprecation")
-    public void setDirection(BlockFace dir) {
+    public void setDirection(@NotNull BlockFace dir) {
         int dat;
         switch (dir) {
             case UP:
@@ -143,7 +145,7 @@ public class Tree extends Wood {
     }
 
     @Override
-    public String toString() {
+    public @NotNull String toString() {
         return getSpecies() + " " + getDirection() + " " + super.toString();
     }
 
diff --git a/src/main/java/org/bukkit/material/Tripwire.java b/src/main/java/org/bukkit/material/Tripwire.java
index e5ffa4db87b435df8c04f1b43521fda6493fd43d..f2c50111b112090606859fe4c7ce50f3970ed649 100644
--- a/src/main/java/org/bukkit/material/Tripwire.java
+++ b/src/main/java/org/bukkit/material/Tripwire.java
@@ -1,6 +1,8 @@
 package org.bukkit.material;
 
 import org.bukkit.Material;
+import org.jetbrains.annotations.NotNull;
+
 
 /**
  * Represents the tripwire
@@ -75,7 +77,7 @@ public class Tripwire extends MaterialData {
     }
 
     @Override
-    public String toString() {
+    public @NotNull String toString() {
         return super.toString() + (isActivated() ? " Activated" : "") + (isObjectTriggering() ? " Triggered" : "");
     }
 }
diff --git a/src/main/java/org/bukkit/material/TripwireHook.java b/src/main/java/org/bukkit/material/TripwireHook.java
index 80aa1c7bc7a1ef71b51101b154361feff4dcf88e..38dcb6d9cdf9f9e53dde677034922fd269619f30 100644
--- a/src/main/java/org/bukkit/material/TripwireHook.java
+++ b/src/main/java/org/bukkit/material/TripwireHook.java
@@ -2,6 +2,8 @@ package org.bukkit.material;
 
 import org.bukkit.Material;
 import org.bukkit.block.BlockFace;
+import org.jetbrains.annotations.NotNull;
+
 
 /**
  * Represents the tripwire hook
@@ -26,7 +28,7 @@ public class TripwireHook extends SimpleAttachableMaterialData implements Redsto
         super(type, data);
     }
 
-    public TripwireHook(BlockFace dir) {
+    public TripwireHook(@NotNull BlockFace dir) {
         this();
         setFacingDirection(dir);
     }
@@ -76,7 +78,7 @@ public class TripwireHook extends SimpleAttachableMaterialData implements Redsto
     }
 
     @Override
-    public void setFacingDirection(BlockFace face) {
+    public void setFacingDirection(@NotNull BlockFace face) {
         int dat = getData() & 0xC;
         switch (face) {
         case WEST:
@@ -96,7 +98,7 @@ public class TripwireHook extends SimpleAttachableMaterialData implements Redsto
     }
 
     @Override
-    public BlockFace getAttachedFace() {
+    public @NotNull BlockFace getAttachedFace() {
         switch (getData() & 0x3) {
         case 0:
             return BlockFace.NORTH;
@@ -121,7 +123,7 @@ public class TripwireHook extends SimpleAttachableMaterialData implements Redsto
     }
 
     @Override
-    public String toString() {
+    public @NotNull String toString() {
         return super.toString() + " facing " + getFacing() + (isActivated() ? " Activated" : "") + (isConnected() ? " Connected" : "");
     }
 }
diff --git a/src/main/java/org/bukkit/material/Vine.java b/src/main/java/org/bukkit/material/Vine.java
index 07a4f3b1511e274affe751aad2b9020b49df815f..5d17242a8c17e4e78c5c2644c2c725591d357bad 100644
--- a/src/main/java/org/bukkit/material/Vine.java
+++ b/src/main/java/org/bukkit/material/Vine.java
@@ -4,6 +4,8 @@ import java.util.Arrays;
 import java.util.EnumSet;
 import org.bukkit.Material;
 import org.bukkit.block.BlockFace;
+import org.jetbrains.annotations.NotNull;
+
 
 /**
  * Represents a vine
@@ -46,7 +48,7 @@ public class Vine extends MaterialData {
         this(EnumSet.copyOf(Arrays.asList(faces)));
     }
 
-    public Vine(EnumSet<BlockFace> faces) {
+    public Vine(@NotNull EnumSet<BlockFace> faces) {
         this((byte) 0);
         faces.retainAll(possibleFaces);
 
@@ -79,7 +81,7 @@ public class Vine extends MaterialData {
      * @param face The face to check.
      * @return Whether it is attached to that face.
      */
-    public boolean isOnFace(BlockFace face) {
+    public boolean isOnFace(@NotNull BlockFace face) {
         switch (face) {
             case WEST:
                 return (getData() & VINE_WEST) == VINE_WEST;
@@ -109,7 +111,7 @@ public class Vine extends MaterialData {
      *
      * @param face The face to attach.
      */
-    public void putOnFace(BlockFace face) {
+    public void putOnFace(@NotNull BlockFace face) {
         switch (face) {
             case WEST:
                 setData((byte) (getData() | VINE_WEST));
@@ -151,7 +153,7 @@ public class Vine extends MaterialData {
      *
      * @param face The face to detach.
      */
-    public void removeFromFace(BlockFace face) {
+    public void removeFromFace(@NotNull BlockFace face) {
         switch (face) {
             case WEST:
                 setData((byte) (getData() & ~VINE_WEST));
@@ -189,7 +191,7 @@ public class Vine extends MaterialData {
     }
 
     @Override
-    public String toString() {
+    public @NotNull String toString() {
         return "VINE";
     }
 
diff --git a/src/main/java/org/bukkit/material/Wood.java b/src/main/java/org/bukkit/material/Wood.java
index 5d51c9286dbf71ff4bb8717d5e83431b1815770e..3ad004b64957559290203d6c5d576135f0d1eb6e 100644
--- a/src/main/java/org/bukkit/material/Wood.java
+++ b/src/main/java/org/bukkit/material/Wood.java
@@ -2,6 +2,9 @@ package org.bukkit.material;
 
 import org.bukkit.Material;
 import org.bukkit.TreeSpecies;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 /**
  * Represents wood blocks of different species.
@@ -30,7 +33,7 @@ public class Wood extends MaterialData {
      *
      * @param species the species of the wood block
      */
-    public Wood(TreeSpecies species) {
+    public Wood(@NotNull TreeSpecies species) {
         this(DEFAULT_TYPE, species);
     }
 
@@ -39,7 +42,7 @@ public class Wood extends MaterialData {
      *
      * @param type the type of wood block
      */
-    public Wood(final Material type) {
+    public Wood(final @NotNull Material type) {
         this(type, DEFAULT_SPECIES);
     }
 
@@ -49,7 +52,7 @@ public class Wood extends MaterialData {
      * @param type the type of wood block
      * @param species the species of the wood block
      */
-    public Wood(final Material type, final TreeSpecies species) {
+    public Wood(final @NotNull Material type, final @NotNull TreeSpecies species) {
         // Ensure only valid species-type combinations
         super(getSpeciesType(type, species));
         setSpecies(species);
@@ -70,7 +73,7 @@ public class Wood extends MaterialData {
      *
      * @return TreeSpecies of this wood block
      */
-    public TreeSpecies getSpecies() {
+    public @Nullable TreeSpecies getSpecies() {
         switch (getItemType()) {
             case LEGACY_WOOD:
             case LEGACY_WOOD_DOUBLE_STEP:
@@ -96,7 +99,7 @@ public class Wood extends MaterialData {
      * @param species The required species
      * @return The actual type for this species given the desired type
      */
-    private static Material getSpeciesType(Material type, TreeSpecies species) {
+    private static Material getSpeciesType(@NotNull Material type, @NotNull TreeSpecies species) {
         switch (species) {
             case GENERIC:
             case REDWOOD:
@@ -129,7 +132,7 @@ public class Wood extends MaterialData {
      *
      * @param species New species of this wood block
      */
-    public void setSpecies(final TreeSpecies species) {
+    public void setSpecies(final @NotNull TreeSpecies species) {
         boolean firstType = false;
         switch (getItemType()) {
             case LEGACY_WOOD:
diff --git a/src/main/java/org/bukkit/material/WoodenStep.java b/src/main/java/org/bukkit/material/WoodenStep.java
index b99a9a304d1c14c187ad2721424d5e5caed90973..d246994c47540b442a73b3de269ec4612b2bb84f 100644
--- a/src/main/java/org/bukkit/material/WoodenStep.java
+++ b/src/main/java/org/bukkit/material/WoodenStep.java
@@ -2,6 +2,8 @@ package org.bukkit.material;
 
 import org.bukkit.Material;
 import org.bukkit.TreeSpecies;
+import org.jetbrains.annotations.NotNull;
+
 
 /**
  * Represents the different types of wooden steps.
@@ -28,7 +30,7 @@ public class WoodenStep extends Wood {
      *
      * @param species the species of the wooden step
      */
-    public WoodenStep(TreeSpecies species) {
+    public WoodenStep(@NotNull TreeSpecies species) {
         this(species, DEFAULT_INVERTED);
     }
 
@@ -39,7 +41,7 @@ public class WoodenStep extends Wood {
      * @param species the species of the wooden step
      * @param inv true the step is at the top of the block
      */
-    public WoodenStep(final TreeSpecies species, boolean inv) {
+    public WoodenStep(final @NotNull TreeSpecies species, boolean inv) {
         super(DEFAULT_TYPE, species);
         setInverted(inv);
     }
@@ -85,7 +87,7 @@ public class WoodenStep extends Wood {
     }
 
     @Override
-    public String toString() {
+    public @NotNull String toString() {
         return super.toString() + " " + getSpecies() + (isInverted() ? " inverted" : "");
     }
 }
diff --git a/src/main/java/org/bukkit/material/Wool.java b/src/main/java/org/bukkit/material/Wool.java
index 3b17409a98b53538989a8d2d5ad1b80643befeab..89984e213c3353b7cb4fddbadb4d6efec7a011bf 100644
--- a/src/main/java/org/bukkit/material/Wool.java
+++ b/src/main/java/org/bukkit/material/Wool.java
@@ -2,6 +2,8 @@ package org.bukkit.material;
 
 import org.bukkit.DyeColor;
 import org.bukkit.Material;
+import org.jetbrains.annotations.NotNull;
+
 
 /**
  * Represents a Wool/Cloth block
@@ -14,7 +16,7 @@ public class Wool extends MaterialData implements Colorable {
         super(Material.LEGACY_WOOL);
     }
 
-    public Wool(DyeColor color) {
+    public Wool(@NotNull DyeColor color) {
         this();
         setColor(color);
     }
@@ -49,12 +51,12 @@ public class Wool extends MaterialData implements Colorable {
      * @param color New color of this dye
      */
     @Override
-    public void setColor(DyeColor color) {
+    public void setColor(@NotNull DyeColor color) {
         setData(color.getWoolData());
     }
 
     @Override
-    public String toString() {
+    public @NotNull String toString() {
         return getColor() + " " + super.toString();
     }
 
diff --git a/src/main/java/org/bukkit/material/types/MushroomBlockTexture.java b/src/main/java/org/bukkit/material/types/MushroomBlockTexture.java
index e99644eae1c662b117aa19060d2484aca19fe0a4..3608108989162541389b386a0c1d561d10af5357 100644
--- a/src/main/java/org/bukkit/material/types/MushroomBlockTexture.java
+++ b/src/main/java/org/bukkit/material/types/MushroomBlockTexture.java
@@ -3,6 +3,7 @@ package org.bukkit.material.types;
 import com.google.common.collect.Maps;
 import java.util.Map;
 import org.bukkit.block.BlockFace;
+import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
 /**
@@ -68,7 +69,7 @@ public enum MushroomBlockTexture {
     private static final Map<Byte, MushroomBlockTexture> BY_DATA = Maps.newHashMap();
     private static final Map<BlockFace, MushroomBlockTexture> BY_BLOCKFACE = Maps.newHashMap();
 
-    private final Byte data;
+    private final @NotNull Byte data;
     private final BlockFace capFace;
 
     private MushroomBlockTexture(final int data, /*@Nullable*/ final BlockFace capFace) {
diff --git a/src/main/java/org/bukkit/metadata/FixedMetadataValue.java b/src/main/java/org/bukkit/metadata/FixedMetadataValue.java
index 4ded655310e93fadf5847846625d46a2cdecb538..3f792a0baeb216536e07bef16265b3dd6f171b44 100644
--- a/src/main/java/org/bukkit/metadata/FixedMetadataValue.java
+++ b/src/main/java/org/bukkit/metadata/FixedMetadataValue.java
@@ -18,7 +18,7 @@ public class FixedMetadataValue extends LazyMetadataValue {
     /**
      * Store the internal value that is represented by this fixed value.
      */
-    private final Object internalValue;
+    private final @Nullable Object internalValue;
 
     /**
      * Initializes a FixedMetadataValue with an Object
diff --git a/src/main/java/org/bukkit/metadata/MetadataStoreBase.java b/src/main/java/org/bukkit/metadata/MetadataStoreBase.java
index a298baaa7a126515bb2802dd311f8487f3e5533f..f6ffbaab9089a21e5f7d597d2a22fd0265818e6c 100644
--- a/src/main/java/org/bukkit/metadata/MetadataStoreBase.java
+++ b/src/main/java/org/bukkit/metadata/MetadataStoreBase.java
@@ -13,7 +13,7 @@ import org.bukkit.plugin.Plugin;
 import org.jetbrains.annotations.NotNull;
 
 public abstract class MetadataStoreBase<T> {
-    private Map<String, Map<Plugin, MetadataValue>> metadataMap = new java.util.concurrent.ConcurrentHashMap<String, Map<Plugin, MetadataValue>>(); // Paper
+    private @NotNull Map<String, Map<Plugin, MetadataValue>> metadataMap = new java.util.concurrent.ConcurrentHashMap<String, Map<Plugin, MetadataValue>>(); // Paper
 
     /**
      * Adds a metadata value to an object. Each metadata value is owned by a
diff --git a/src/main/java/org/bukkit/metadata/MetadataValueAdapter.java b/src/main/java/org/bukkit/metadata/MetadataValueAdapter.java
index 162aedc9846b146681d2bc4b7e5bff19073d4352..a3d4fcd1858f1dff7f84c457882d2ef876d481f8 100644
--- a/src/main/java/org/bukkit/metadata/MetadataValueAdapter.java
+++ b/src/main/java/org/bukkit/metadata/MetadataValueAdapter.java
@@ -15,7 +15,7 @@ import org.jetbrains.annotations.Nullable;
  * value() and invalidate().
  */
 public abstract class MetadataValueAdapter implements MetadataValue {
-    protected final WeakReference<Plugin> owningPlugin;
+    protected final @NotNull WeakReference<Plugin> owningPlugin;
 
     protected MetadataValueAdapter(@NotNull Plugin owningPlugin) {
         Preconditions.checkArgument(owningPlugin != null, "owningPlugin cannot be null");
diff --git a/src/main/java/org/bukkit/permissions/PermissibleBase.java b/src/main/java/org/bukkit/permissions/PermissibleBase.java
index cd3296fea01648592d2af89b3d80135acb6d0958..68ae337a841263a38ad97ff00c21e4036db539e7 100644
--- a/src/main/java/org/bukkit/permissions/PermissibleBase.java
+++ b/src/main/java/org/bukkit/permissions/PermissibleBase.java
@@ -16,8 +16,8 @@ import org.jetbrains.annotations.Nullable;
  * Base Permissible for use in any Permissible object via proxy or extension
  */
 public class PermissibleBase implements Permissible {
-    private final ServerOperator opable;
-    private final Permissible parent;
+    private final @Nullable ServerOperator opable;
+    private final @NotNull Permissible parent;
     private final List<PermissionAttachment> attachments = new LinkedList<PermissionAttachment>();
     private final Map<String, PermissionAttachmentInfo> permissions = new HashMap<String, PermissionAttachmentInfo>();
 
@@ -255,7 +255,7 @@ public class PermissibleBase implements Permissible {
     }
 
     private static class RemoveAttachmentRunnable implements Runnable {
-        private final PermissionAttachment attachment;
+        private final @NotNull PermissionAttachment attachment;
 
         public RemoveAttachmentRunnable(@NotNull PermissionAttachment attachment) {
             this.attachment = attachment;
diff --git a/src/main/java/org/bukkit/permissions/Permission.java b/src/main/java/org/bukkit/permissions/Permission.java
index 894f07b91d054344a420ac42af77a366526334d6..7af400cb1d714d5387da707db3b6133f707fb7f0 100644
--- a/src/main/java/org/bukkit/permissions/Permission.java
+++ b/src/main/java/org/bukkit/permissions/Permission.java
@@ -19,7 +19,7 @@ import org.jetbrains.annotations.Nullable;
 public class Permission {
     public static final PermissionDefault DEFAULT_PERMISSION = PermissionDefault.OP;
 
-    private final String name;
+    private final @NotNull String name;
     private final Map<String, Boolean> children = new LinkedHashMap<String, Boolean>();
     private PermissionDefault defaultValue = DEFAULT_PERMISSION;
     private String description;
diff --git a/src/main/java/org/bukkit/permissions/PermissionAttachment.java b/src/main/java/org/bukkit/permissions/PermissionAttachment.java
index cd8ac371a16173e2415c2628a96c1dc3c6ca895d..6d1e29c2a53e50910c8cac3b765bf9437a1ca6e3 100644
--- a/src/main/java/org/bukkit/permissions/PermissionAttachment.java
+++ b/src/main/java/org/bukkit/permissions/PermissionAttachment.java
@@ -11,10 +11,10 @@ import org.jetbrains.annotations.Nullable;
  * object
  */
 public class PermissionAttachment {
-    private PermissionRemovedExecutor removed;
+    private @Nullable PermissionRemovedExecutor removed;
     private final Map<String, Boolean> permissions = new LinkedHashMap<String, Boolean>();
-    private final Permissible permissible;
-    private final Plugin plugin;
+    private final @NotNull Permissible permissible;
+    private final @NotNull Plugin plugin;
 
     public PermissionAttachment(@NotNull Plugin plugin, @NotNull Permissible permissible) {
         if (plugin == null) {
diff --git a/src/main/java/org/bukkit/permissions/PermissionAttachmentInfo.java b/src/main/java/org/bukkit/permissions/PermissionAttachmentInfo.java
index a7f4cd37cff15f3f0875c376d6de8f473879b119..f8b3357864569c72d39359510190797e157c3129 100644
--- a/src/main/java/org/bukkit/permissions/PermissionAttachmentInfo.java
+++ b/src/main/java/org/bukkit/permissions/PermissionAttachmentInfo.java
@@ -8,9 +8,9 @@ import org.jetbrains.annotations.Nullable;
  * provides it
  */
 public class PermissionAttachmentInfo {
-    private final Permissible permissible;
-    private final String permission;
-    private final PermissionAttachment attachment;
+    private final @NotNull Permissible permissible;
+    private final @NotNull String permission;
+    private final @Nullable PermissionAttachment attachment;
     private final boolean value;
 
     public PermissionAttachmentInfo(@NotNull Permissible permissible, @NotNull String permission, @Nullable PermissionAttachment attachment, boolean value) {
diff --git a/src/main/java/org/bukkit/persistence/PersistentDataType.java b/src/main/java/org/bukkit/persistence/PersistentDataType.java
index 0af00a2485cbb3fccd689dea56f0a705d0034782..f0838860b1bb9c1f16b10dfdc5445817f48854f9 100644
--- a/src/main/java/org/bukkit/persistence/PersistentDataType.java
+++ b/src/main/java/org/bukkit/persistence/PersistentDataType.java
@@ -125,7 +125,7 @@ public interface PersistentDataType<T, Z> {
      */
     class PrimitivePersistentDataType<T> implements PersistentDataType<T, T> {
 
-        private final Class<T> primitiveType;
+        private final @NotNull Class<T> primitiveType;
 
         PrimitivePersistentDataType(@NotNull Class<T> primitiveType) {
             this.primitiveType = primitiveType;
diff --git a/src/main/java/org/bukkit/plugin/PluginBase.java b/src/main/java/org/bukkit/plugin/PluginBase.java
index 94f8ceb965cecb5669a84a0ec61c0f706c2a2673..ff14c63f3d6ac99f9cba7609bf060e7e4eafa0ad 100644
--- a/src/main/java/org/bukkit/plugin/PluginBase.java
+++ b/src/main/java/org/bukkit/plugin/PluginBase.java
@@ -1,6 +1,8 @@
 package org.bukkit.plugin;
 
 import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 /**
  * Represents a base {@link Plugin}
@@ -15,7 +17,7 @@ public abstract class PluginBase implements Plugin {
     }
 
     @Override
-    public final boolean equals(Object obj) {
+    public final boolean equals(@Nullable Object obj) {
         if (this == obj) {
             return true;
         }
diff --git a/src/main/java/org/bukkit/plugin/PluginDescriptionFile.java b/src/main/java/org/bukkit/plugin/PluginDescriptionFile.java
index 0c9f4d1e9104fa6951114c1f9ec954dfcc749196..cf3428c2f0c3ef033ade9e07e240b094b39b5d26 100644
--- a/src/main/java/org/bukkit/plugin/PluginDescriptionFile.java
+++ b/src/main/java/org/bukkit/plugin/PluginDescriptionFile.java
@@ -232,28 +232,28 @@ public final class PluginDescriptionFile {
             });
         }
     };
-    String rawName = null;
-    private String name = null;
-    private List<String> provides = ImmutableList.of();
-    private String main = null;
-    private String classLoaderOf = null;
-    private List<String> depend = ImmutableList.of();
-    private List<String> softDepend = ImmutableList.of();
-    private List<String> loadBefore = ImmutableList.of();
-    private String version = null;
-    private Map<String, Map<String, Object>> commands = ImmutableMap.of();
-    private String description = null;
-    private List<String> authors = null;
-    private List<String> contributors = null;
-    private String website = null;
-    private String prefix = null;
-    private PluginLoadOrder order = PluginLoadOrder.POSTWORLD;
-    private List<Permission> permissions = null;
-    private Map<?, ?> lazyPermissions = null;
-    private PermissionDefault defaultPerm = PermissionDefault.OP;
-    private Set<PluginAwareness> awareness = ImmutableSet.of();
-    private String apiVersion = null;
-    private List<String> libraries = ImmutableList.of();
+    @Nullable String rawName = null;
+    private @Nullable String name = null;
+    private @NotNull List<String> provides = ImmutableList.of();
+    private @Nullable String main = null;
+    private @Nullable String classLoaderOf = null;
+    private @NotNull List<String> depend = ImmutableList.of();
+    private @NotNull List<String> softDepend = ImmutableList.of();
+    private @NotNull List<String> loadBefore = ImmutableList.of();
+    private @Nullable String version = null;
+    private @NotNull Map<String, Map<String, Object>> commands = ImmutableMap.of();
+    private @Nullable String description = null;
+    private @Nullable List<String> authors = null;
+    private @Nullable List<String> contributors = null;
+    private @Nullable String website = null;
+    private @Nullable String prefix = null;
+    private @NotNull PluginLoadOrder order = PluginLoadOrder.POSTWORLD;
+    private @Nullable List<Permission> permissions = null;
+    private @Nullable Map<?, ?> lazyPermissions = null;
+    private @Nullable PermissionDefault defaultPerm = PermissionDefault.OP;
+    private @NotNull Set<PluginAwareness> awareness = ImmutableSet.of();
+    private @Nullable String apiVersion = null;
+    private @NotNull List<String> libraries = ImmutableList.of();
 
     public PluginDescriptionFile(@NotNull final InputStream stream) throws InvalidDescriptionException {
         loadMap(asMap(YAML.get().load(stream)));
diff --git a/src/main/java/org/bukkit/plugin/RegisteredListener.java b/src/main/java/org/bukkit/plugin/RegisteredListener.java
index 3b3d9642a8d63798dc28f2f8df77f0466451cbff..494522581ee46f9e7cc0fda5bcbc59d96d878a2d 100644
--- a/src/main/java/org/bukkit/plugin/RegisteredListener.java
+++ b/src/main/java/org/bukkit/plugin/RegisteredListener.java
@@ -11,10 +11,10 @@ import org.jetbrains.annotations.NotNull;
  * Stores relevant information for plugin listeners
  */
 public class RegisteredListener {
-    private final Listener listener;
-    private final EventPriority priority;
-    private final Plugin plugin;
-    private final EventExecutor executor;
+    private final @NotNull Listener listener;
+    private final @NotNull EventPriority priority;
+    private final @NotNull Plugin plugin;
+    private final @NotNull EventExecutor executor;
     private final boolean ignoreCancelled;
 
     public RegisteredListener(@NotNull final Listener listener, @NotNull final EventExecutor executor, @NotNull final EventPriority priority, @NotNull final Plugin plugin, final boolean ignoreCancelled) {
diff --git a/src/main/java/org/bukkit/plugin/SimplePluginManager.java b/src/main/java/org/bukkit/plugin/SimplePluginManager.java
index b012ce40d82389c29d1b841ff685425ac10a7f9e..74db935644302c0a87fb93d48e2b0ad5c64b99de 100644
--- a/src/main/java/org/bukkit/plugin/SimplePluginManager.java
+++ b/src/main/java/org/bukkit/plugin/SimplePluginManager.java
@@ -46,13 +46,13 @@ import org.jetbrains.annotations.Nullable;
 @Deprecated(forRemoval = true) // Paper - This implementation may be replaced in a future version of Paper.
 // Plugins may still reflect into this class to modify permission logic for the time being.
 public final class SimplePluginManager implements PluginManager {
-    private final Server server;
+    private final @NotNull Server server;
     private final Map<Pattern, PluginLoader> fileAssociations = new HashMap<Pattern, PluginLoader>();
     private final List<Plugin> plugins = new ArrayList<Plugin>();
     private final Map<String, Plugin> lookupNames = new HashMap<String, Plugin>();
-    private MutableGraph<String> dependencyGraph = GraphBuilder.directed().build();
+    private @NotNull MutableGraph<String> dependencyGraph = GraphBuilder.directed().build();
     private File updateDirectory;
-    private final SimpleCommandMap commandMap;
+    private final @NotNull SimpleCommandMap commandMap;
     private final Map<String, Permission> permissions = new HashMap<String, Permission>();
     private final Map<Boolean, Set<Permission>> defaultPerms = new LinkedHashMap<Boolean, Set<Permission>>();
     private final Map<String, Map<Permissible, Boolean>> permSubs = new HashMap<String, Map<Permissible, Boolean>>();
@@ -117,7 +117,7 @@ public final class SimplePluginManager implements PluginManager {
         return this.loadPlugins(directory, java.util.Collections.emptyList());
     }
     @NotNull
-    public Plugin[] loadPlugins(final @NotNull File directory, final @NotNull List<File> extraPluginJars) {
+    public Plugin @NotNull [] loadPlugins(final @NotNull File directory, final @NotNull List<File> extraPluginJars) {
         // Paper end
         Preconditions.checkArgument(directory != null, "Directory cannot be null");
         Preconditions.checkArgument(directory.isDirectory(), "Directory must be a directory");
@@ -431,7 +431,7 @@ public final class SimplePluginManager implements PluginManager {
      * @param file
      * @throws InvalidPluginException
      */
-    private File checkUpdate(@NotNull File file) throws InvalidPluginException {
+    private @NotNull File checkUpdate(@NotNull File file) throws InvalidPluginException {
         if (updateDirectory == null || !updateDirectory.isDirectory()) {
             return file;
         }
@@ -469,7 +469,7 @@ public final class SimplePluginManager implements PluginManager {
     }
 
     @Nullable
-    private PluginLoader getPluginLoader(File file) {
+    private PluginLoader getPluginLoader(@NotNull File file) {
         Set<Pattern> filters = fileAssociations.keySet();
         for (Pattern filter : filters) {
             Matcher match = filter.matcher(file.getName());
@@ -497,7 +497,7 @@ public final class SimplePluginManager implements PluginManager {
 
     @Override
     @NotNull
-    public synchronized Plugin[] getPlugins() {
+    public synchronized Plugin @NotNull [] getPlugins() {
         return plugins.toArray(new Plugin[plugins.size()]);
     }
 
@@ -644,7 +644,7 @@ public final class SimplePluginManager implements PluginManager {
             defaultPerms.get(false).clear();
         }
     }
-    private void fireEvent(Event event) { callEvent(event); } // Paper - support old method incase plugin uses reflection
+    private void fireEvent(@NotNull Event event) { callEvent(event); } // Paper - support old method incase plugin uses reflection
 
     /**
      * Calls an event with the given details.
diff --git a/src/main/java/org/bukkit/plugin/java/JavaPlugin.java b/src/main/java/org/bukkit/plugin/java/JavaPlugin.java
index 3bea5dd67ad0393160ccede4ac99a3c7baa1803b..0c802f3033b0d8b09031560cf859922376ea0343 100644
--- a/src/main/java/org/bukkit/plugin/java/JavaPlugin.java
+++ b/src/main/java/org/bukkit/plugin/java/JavaPlugin.java
@@ -34,16 +34,16 @@ import org.jetbrains.annotations.Nullable;
  */
 public abstract class JavaPlugin extends PluginBase {
     private boolean isEnabled = false;
-    private PluginLoader loader = null;
-    private Server server = null;
-    private File file = null;
-    private PluginDescriptionFile description = null;
-    private File dataFolder = null;
-    private ClassLoader classLoader = null;
+    private @Nullable PluginLoader loader = null;
+    private @Nullable Server server = null;
+    private @Nullable File file = null;
+    private @Nullable PluginDescriptionFile description = null;
+    private @Nullable File dataFolder = null;
+    private @Nullable ClassLoader classLoader = null;
     private boolean naggable = true;
-    private FileConfiguration newConfig = null;
-    private File configFile = null;
-    Logger logger = null; // Paper - PluginLogger -> Logger, package-private
+    private @Nullable FileConfiguration newConfig = null;
+    private @Nullable File configFile = null;
+    @Nullable Logger logger = null; // Paper - PluginLogger -> Logger, package-private
 
     public JavaPlugin() {
         final ClassLoader classLoader = this.getClass().getClassLoader();
diff --git a/src/main/java/org/bukkit/plugin/java/JavaPluginLoader.java b/src/main/java/org/bukkit/plugin/java/JavaPluginLoader.java
index 7e5149a21b6747f64425a277c142e69f0ef43b3f..2cd69fe535a3ae67557e3cab12f159032b9b3d10 100644
--- a/src/main/java/org/bukkit/plugin/java/JavaPluginLoader.java
+++ b/src/main/java/org/bukkit/plugin/java/JavaPluginLoader.java
@@ -51,13 +51,13 @@ import org.yaml.snakeyaml.error.YAMLException;
  */
 @Deprecated(forRemoval = true) // Paper - The PluginLoader system will not function in the near future. This implementation will be moved.
 public final class JavaPluginLoader implements PluginLoader {
-    final Server server;
+    final @NotNull Server server;
     private static final boolean DISABLE_CLASS_PRIORITIZATION = Boolean.getBoolean("Paper.DisableClassPrioritization"); // Paper
     private final Pattern[] fileFilters = new Pattern[]{Pattern.compile("\\.jar$")};
     private final Map<String, java.util.concurrent.locks.ReentrantReadWriteLock> classLoadLock = new java.util.HashMap<String, java.util.concurrent.locks.ReentrantReadWriteLock>(); // Paper
     private final Map<String, Integer> classLoadLockCount = new java.util.HashMap<String, Integer>(); // Paper
     private final List<PluginClassLoader> loaders = new CopyOnWriteArrayList<PluginClassLoader>();
-    private final LibraryLoader libraryLoader;
+    private final @Nullable LibraryLoader libraryLoader;
 
     /**
      * This class was not meant to be constructed explicitly
@@ -210,11 +210,11 @@ public final class JavaPluginLoader implements PluginLoader {
     }
 
     @Nullable
-    Class<?> getClassByName(final String name, boolean resolve, PluginDescriptionFile description) {
+    Class<?> getClassByName(final @NotNull String name, boolean resolve, @NotNull PluginDescriptionFile description) {
         // Paper start - prioritize self
         return getClassByName(name, resolve, description, null);
     }
-    Class<?> getClassByName(final String name, boolean resolve, PluginDescriptionFile description, PluginClassLoader requester) {
+    @Nullable Class<?> getClassByName(final @NotNull String name, boolean resolve, @NotNull PluginDescriptionFile description, @Nullable PluginClassLoader requester) {
         // Paper end
         // Paper start - make MT safe
         java.util.concurrent.locks.ReentrantReadWriteLock lock;
diff --git a/src/main/java/org/bukkit/plugin/java/LibraryLoader.java b/src/main/java/org/bukkit/plugin/java/LibraryLoader.java
index 6d634b0ea813ccb19f1562a7d0e5a59cea4eab21..1ea4a3dc6f258aa61a2482f512fb977a240aac7b 100644
--- a/src/main/java/org/bukkit/plugin/java/LibraryLoader.java
+++ b/src/main/java/org/bukkit/plugin/java/LibraryLoader.java
@@ -39,9 +39,9 @@ import org.jetbrains.annotations.Nullable;
 class LibraryLoader
 {
 
-    private final Logger logger;
+    private final @NotNull Logger logger;
     private final RepositorySystem repository;
-    private final DefaultRepositorySystemSession session;
+    private final @NotNull DefaultRepositorySystemSession session;
     private final List<RemoteRepository> repositories;
 
     public LibraryLoader(@NotNull Logger logger)
diff --git a/src/main/java/org/bukkit/plugin/java/PluginClassLoader.java b/src/main/java/org/bukkit/plugin/java/PluginClassLoader.java
index cb3c25ef46b279ffdde87f47f729eb8aa7549c1c..4d8894f4775c46254048d5bdd60b8aba5b744cfc 100644
--- a/src/main/java/org/bukkit/plugin/java/PluginClassLoader.java
+++ b/src/main/java/org/bukkit/plugin/java/PluginClassLoader.java
@@ -31,16 +31,16 @@ import org.jetbrains.annotations.Nullable;
  */
 public final class PluginClassLoader extends URLClassLoader { // Spigot
     public JavaPlugin getPlugin() { return plugin; } // Spigot
-    private final JavaPluginLoader loader;
+    private final @NotNull JavaPluginLoader loader;
     private final Map<String, Class<?>> classes = new ConcurrentHashMap<String, Class<?>>();
-    private final PluginDescriptionFile description; PluginDescriptionFile getDescription() { return description; } // Paper
-    private final File dataFolder;
-    private final File file;
-    private final JarFile jar;
+    private final @NotNull PluginDescriptionFile description; PluginDescriptionFile getDescription() { return description; } // Paper
+    private final @NotNull File dataFolder;
+    private final @NotNull File file;
+    private final @NotNull JarFile jar;
     private final Manifest manifest;
-    private final URL url;
-    private final ClassLoader libraryLoader;
-    final JavaPlugin plugin;
+    private final @NotNull URL url;
+    private final @Nullable ClassLoader libraryLoader;
+    final @NotNull JavaPlugin plugin;
     private JavaPlugin pluginInit;
     private IllegalStateException pluginState;
     private final Set<String> seenIllegalAccess = Collections.newSetFromMap(new ConcurrentHashMap<>());
@@ -100,7 +100,7 @@ public final class PluginClassLoader extends URLClassLoader { // Spigot
     }
 
     @Override
-    public Enumeration<URL> getResources(String name) throws IOException {
+    public @NotNull Enumeration<URL> getResources(String name) throws IOException {
         // Paper start
         java.util.ArrayList<URL> resources = new java.util.ArrayList<>();
         addEnumeration(resources, findResources(name));
@@ -112,7 +112,7 @@ public final class PluginClassLoader extends URLClassLoader { // Spigot
     }
 
     // Paper start
-    private <T> void addEnumeration(java.util.ArrayList<T> list, Enumeration<T> enumeration) {
+    private <T> void addEnumeration(java.util.@NotNull ArrayList<T> list, @NotNull Enumeration<T> enumeration) {
         while (enumeration.hasMoreElements()) {
             list.add(enumeration.nextElement());
         }
@@ -120,7 +120,7 @@ public final class PluginClassLoader extends URLClassLoader { // Spigot
     // Paper end
 
     @Override
-    protected Class<?> loadClass(String name, boolean resolve) throws ClassNotFoundException {
+    protected Class<?> loadClass(@NotNull String name, boolean resolve) throws ClassNotFoundException {
         return loadClass0(name, resolve, true, true);
     }
 
@@ -178,7 +178,7 @@ public final class PluginClassLoader extends URLClassLoader { // Spigot
     }
 
     @Override
-    protected Class<?> findClass(String name) throws ClassNotFoundException {
+    protected @NotNull Class<?> findClass(@NotNull String name) throws ClassNotFoundException {
         if (name.startsWith("org.bukkit.") || name.startsWith("net.minecraft.")) {
             throw new ClassNotFoundException(name);
         }
@@ -264,7 +264,7 @@ public final class PluginClassLoader extends URLClassLoader { // Spigot
 
     // Paper start
     @Override
-    public String toString() {
+    public @NotNull String toString() {
         JavaPlugin currPlugin = plugin != null ? plugin : pluginInit;
         return "PluginClassLoader{" +
                    "plugin=" + currPlugin +
diff --git a/src/main/java/org/bukkit/plugin/messaging/ChannelNameTooLongException.java b/src/main/java/org/bukkit/plugin/messaging/ChannelNameTooLongException.java
index 80ef8a2a342ff9dc16c98b5254cadd539f6ea0d9..e27dd8a96f0d99ede219303abfa6d0431a3ad976 100644
--- a/src/main/java/org/bukkit/plugin/messaging/ChannelNameTooLongException.java
+++ b/src/main/java/org/bukkit/plugin/messaging/ChannelNameTooLongException.java
@@ -1,5 +1,8 @@
 package org.bukkit.plugin.messaging;
 
+import org.jetbrains.annotations.NotNull;
+
+
 /**
  * Thrown if a Plugin Channel is too long.
  */
@@ -9,7 +12,7 @@ public class ChannelNameTooLongException extends RuntimeException {
         super("Attempted to send a Plugin Message to a channel that was too large. The maximum length a channel may be is " + Messenger.MAX_CHANNEL_SIZE + " chars.");
     }
 
-    public ChannelNameTooLongException(String channel) {
+    public ChannelNameTooLongException(@NotNull String channel) {
         super("Attempted to send a Plugin Message to a channel that was too large. The maximum length a channel may be is " + Messenger.MAX_CHANNEL_SIZE + " chars (attempted " + channel.length() + " - '" + channel + ".");
     }
 }
diff --git a/src/main/java/org/bukkit/plugin/messaging/MessageTooLargeException.java b/src/main/java/org/bukkit/plugin/messaging/MessageTooLargeException.java
index 61af8c4c1f787858e7fb2cbaf3130ce8a7fc17f4..195ed8c695b9026f65735ede9ac6f6b20772df76 100644
--- a/src/main/java/org/bukkit/plugin/messaging/MessageTooLargeException.java
+++ b/src/main/java/org/bukkit/plugin/messaging/MessageTooLargeException.java
@@ -1,5 +1,8 @@
 package org.bukkit.plugin.messaging;
 
+import org.jetbrains.annotations.NotNull;
+
+
 /**
  * Thrown if a Plugin Message is sent that is too large to be sent.
  */
@@ -9,7 +12,7 @@ public class MessageTooLargeException extends RuntimeException {
         this("Attempted to send a plugin message that was too large. The maximum length a plugin message may be is " + Messenger.MAX_MESSAGE_SIZE + " bytes.");
     }
 
-    public MessageTooLargeException(byte[] message) {
+    public MessageTooLargeException(byte @NotNull [] message) {
         this(message.length);
     }
 
diff --git a/src/main/java/org/bukkit/plugin/messaging/PluginMessageListenerRegistration.java b/src/main/java/org/bukkit/plugin/messaging/PluginMessageListenerRegistration.java
index 1d002967245e5b98d5cb929e725ea34540136409..556bda7ffa8a4e1d50515cbc9e99cee4ccc185a6 100644
--- a/src/main/java/org/bukkit/plugin/messaging/PluginMessageListenerRegistration.java
+++ b/src/main/java/org/bukkit/plugin/messaging/PluginMessageListenerRegistration.java
@@ -2,16 +2,18 @@ package org.bukkit.plugin.messaging;
 
 import org.bukkit.plugin.Plugin;
 import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 /**
  * Contains information about a {@link Plugin}s registration to a plugin
  * channel.
  */
 public final class PluginMessageListenerRegistration {
-    private final Messenger messenger;
-    private final Plugin plugin;
-    private final String channel;
-    private final PluginMessageListener listener;
+    private final @NotNull Messenger messenger;
+    private final @NotNull Plugin plugin;
+    private final @NotNull String channel;
+    private final @NotNull PluginMessageListener listener;
 
     public PluginMessageListenerRegistration(@NotNull Messenger messenger, @NotNull Plugin plugin, @NotNull String channel, @NotNull PluginMessageListener listener) {
         if (messenger == null) {
@@ -73,7 +75,7 @@ public final class PluginMessageListenerRegistration {
     }
 
     @Override
-    public boolean equals(Object obj) {
+    public boolean equals(@Nullable Object obj) {
         if (obj == null) {
             return false;
         }
diff --git a/src/main/java/org/bukkit/plugin/messaging/StandardMessenger.java b/src/main/java/org/bukkit/plugin/messaging/StandardMessenger.java
index 6fda7f3aa68e76af64362e9afed70fc6a5e92986..9cff8e93032d732df3c70ed19d9611cba1c76f59 100644
--- a/src/main/java/org/bukkit/plugin/messaging/StandardMessenger.java
+++ b/src/main/java/org/bukkit/plugin/messaging/StandardMessenger.java
@@ -11,6 +11,8 @@ import java.util.logging.Level;
 import org.bukkit.entity.Player;
 import org.bukkit.plugin.Plugin;
 import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 /**
  * Standard implementation to {@link Messenger}
@@ -439,7 +441,7 @@ public class StandardMessenger implements Messenger {
     }
 
     @Override
-    public void dispatchIncomingMessage(@NotNull Player source, @NotNull String channel, @NotNull byte[] message) {
+    public void dispatchIncomingMessage(@NotNull Player source, @NotNull String channel, byte @Nullable [] message) {
         if (source == null) {
             throw new IllegalArgumentException("Player source cannot be null");
         }
@@ -527,7 +529,7 @@ public class StandardMessenger implements Messenger {
      * @throws ChannelNotRegisteredException Thrown if the channel is not
      *     registered for this plugin.
      */
-    public static void validatePluginMessage(@NotNull Messenger messenger, @NotNull Plugin source, @NotNull String channel, @NotNull byte[] message) {
+    public static void validatePluginMessage(@NotNull Messenger messenger, @NotNull Plugin source, @NotNull String channel, byte @Nullable [] message) {
         if (messenger == null) {
             throw new IllegalArgumentException("Messenger cannot be null");
         }
diff --git a/src/main/java/org/bukkit/potion/Potion.java b/src/main/java/org/bukkit/potion/Potion.java
index 69e7ce61090e3e3a7a337a96b380c8ffe78ffb8d..19e3e61c4d0c3de8af4e94ef3fd00886f32043b1 100644
--- a/src/main/java/org/bukkit/potion/Potion.java
+++ b/src/main/java/org/bukkit/potion/Potion.java
@@ -7,6 +7,8 @@ import org.bukkit.entity.LivingEntity;
 import org.bukkit.inventory.ItemStack;
 import org.bukkit.inventory.meta.PotionMeta;
 import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 /**
  * Potion Adapter for pre-1.9 data values
@@ -126,7 +128,7 @@ public class Potion {
     }
 
     @Override
-    public boolean equals(Object obj) {
+    public boolean equals(@Nullable Object obj) {
         if (this == obj) {
             return true;
         }
diff --git a/src/main/java/org/bukkit/potion/PotionData.java b/src/main/java/org/bukkit/potion/PotionData.java
index ef5fe586a71f0c6d258a5891444b99da08fbdf27..1ffb8df32c54b780176fd5d504989ea3b5d1ecb1 100644
--- a/src/main/java/org/bukkit/potion/PotionData.java
+++ b/src/main/java/org/bukkit/potion/PotionData.java
@@ -2,10 +2,12 @@ package org.bukkit.potion;
 
 import com.google.common.base.Preconditions;
 import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 public final class PotionData {
 
-    private final PotionType type;
+    private final @NotNull PotionType type;
     private final boolean extended;
     private final boolean upgraded;
 
@@ -74,7 +76,7 @@ public final class PotionData {
     }
 
     @Override
-    public boolean equals(Object obj) {
+    public boolean equals(@Nullable Object obj) {
         if (this == obj) {
             return true;
         }
diff --git a/src/main/java/org/bukkit/potion/PotionEffect.java b/src/main/java/org/bukkit/potion/PotionEffect.java
index 24e36cdf580da885ac64002673a786b9c5a3f787..a6d766555f664626dd390ed7db350ca47af7b636 100644
--- a/src/main/java/org/bukkit/potion/PotionEffect.java
+++ b/src/main/java/org/bukkit/potion/PotionEffect.java
@@ -28,7 +28,7 @@ public class PotionEffect implements ConfigurationSerializable {
     private static final String ICON = "has-icon";
     private final int amplifier;
     private final int duration;
-    private final PotionEffectType type;
+    private final @NotNull PotionEffectType type;
     private final boolean ambient;
     private final boolean particles;
     private final boolean icon;
@@ -269,7 +269,7 @@ public class PotionEffect implements ConfigurationSerializable {
     }
 
     @Override
-    public String toString() {
+    public @NotNull String toString() {
         return type.getName() + (ambient ? ":(" : ":") + duration + "t-x" + amplifier + (ambient ? ")" : "");
     }
 }
diff --git a/src/main/java/org/bukkit/potion/PotionEffectType.java b/src/main/java/org/bukkit/potion/PotionEffectType.java
index 84fd181ad897f620e450750246d9ea416dcbd48a..c50dadfe97b938641a22565fd25635ea6e74400d 100644
--- a/src/main/java/org/bukkit/potion/PotionEffectType.java
+++ b/src/main/java/org/bukkit/potion/PotionEffectType.java
@@ -186,7 +186,7 @@ public abstract class PotionEffectType implements Keyed, net.kyori.adventure.tra
     public static final PotionEffectType DARKNESS = new PotionEffectTypeWrapper(33, "darkness");
 
     private final int id;
-    private final NamespacedKey key;
+    private final @NotNull NamespacedKey key;
 
     protected PotionEffectType(int id, @NotNull NamespacedKey key) {
         this.id = id;
@@ -257,7 +257,7 @@ public abstract class PotionEffectType implements Keyed, net.kyori.adventure.tra
     public abstract Color getColor();
 
     @Override
-    public boolean equals(Object obj) {
+    public boolean equals(@Nullable Object obj) {
         if (obj == null) {
             return false;
         }
@@ -277,7 +277,7 @@ public abstract class PotionEffectType implements Keyed, net.kyori.adventure.tra
     }
 
     @Override
-    public String toString() {
+    public @NotNull String toString() {
         return "PotionEffectType[" + id + ", " + getName() + "]";
     }
 
@@ -360,7 +360,7 @@ public abstract class PotionEffectType implements Keyed, net.kyori.adventure.tra
      * @return Array of types.
      */
     @NotNull
-    public static PotionEffectType[] values() {
+    public static PotionEffectType @NotNull [] values() {
         return Arrays.copyOfRange(byId, 1, byId.length);
     }
     // Paper start
diff --git a/src/main/java/org/bukkit/scoreboard/DisplaySlot.java b/src/main/java/org/bukkit/scoreboard/DisplaySlot.java
index fe7d0a19f970ac5b4e0c4bef4ff7c4ceae60bb86..93ae483486fad4322040221271cbb28671e5e8fe 100644
--- a/src/main/java/org/bukkit/scoreboard/DisplaySlot.java
+++ b/src/main/java/org/bukkit/scoreboard/DisplaySlot.java
@@ -1,6 +1,9 @@
 package org.bukkit.scoreboard;
 
 import net.kyori.adventure.text.format.NamedTextColor; // Paper
+import org.jetbrains.annotations.NotNull;
+
+
 /**
  * Locations for displaying objectives to the player
  */
@@ -28,7 +31,7 @@ public enum DisplaySlot {
 
     public static final net.kyori.adventure.util.Index<String, DisplaySlot> NAMES = net.kyori.adventure.util.Index.create(DisplaySlot.class, DisplaySlot::getId);
 
-    private final String id;
+    private final @NotNull String id;
 
     DisplaySlot(@org.jetbrains.annotations.NotNull String id) {
         this.id = id;
@@ -48,7 +51,7 @@ public enum DisplaySlot {
     }
 
     @Override
-    public String toString() {
+    public @NotNull String toString() {
         return this.id;
     }
     // Paper end
diff --git a/src/main/java/org/bukkit/util/BlockIterator.java b/src/main/java/org/bukkit/util/BlockIterator.java
index 8a377e1413a0034da8e8f03e25d1e3d6e2cf6f92..22d8555b72d2fb8d629f50eddb17b301d1aaae3a 100644
--- a/src/main/java/org/bukkit/util/BlockIterator.java
+++ b/src/main/java/org/bukkit/util/BlockIterator.java
@@ -15,14 +15,14 @@ import org.jetbrains.annotations.NotNull;
  */
 public class BlockIterator implements Iterator<Block> {
 
-    private final World world;
+    private final @NotNull World world;
     private final int maxDistance;
 
     private static final int gridSize = 1 << 24;
 
     private boolean end = false;
 
-    private Block[] blockQueue = new Block[3];
+    private Block @NotNull [] blockQueue = new Block[3];
     private int currentBlock = 0;
     private int currentDistance = 0;
     private int maxDistanceInt;
@@ -180,15 +180,15 @@ public class BlockIterator implements Iterator<Block> {
         return a.getX() == b.getX() && a.getY() == b.getY() && a.getZ() == b.getZ();
     }
 
-    private BlockFace getXFace(@NotNull Vector direction) {
+    private @NotNull BlockFace getXFace(@NotNull Vector direction) {
         return ((direction.getX() > 0) ? BlockFace.EAST : BlockFace.WEST);
     }
 
-    private BlockFace getYFace(@NotNull Vector direction) {
+    private @NotNull BlockFace getYFace(@NotNull Vector direction) {
         return ((direction.getY() > 0) ? BlockFace.UP : BlockFace.DOWN);
     }
 
-    private BlockFace getZFace(@NotNull Vector direction) {
+    private @NotNull BlockFace getZFace(@NotNull Vector direction) {
         return ((direction.getZ() > 0) ? BlockFace.SOUTH : BlockFace.NORTH);
     }
 
diff --git a/src/main/java/org/bukkit/util/BlockVector.java b/src/main/java/org/bukkit/util/BlockVector.java
index eddc7248903fe3672010c04c0684f9ae3e8559e4..0d8384d2230ef07e898dc372ddab31b934cae902 100644
--- a/src/main/java/org/bukkit/util/BlockVector.java
+++ b/src/main/java/org/bukkit/util/BlockVector.java
@@ -105,7 +105,7 @@ public class BlockVector extends Vector {
      * @return vector
      */
     @Override
-    public BlockVector clone() {
+    public @NotNull BlockVector clone() {
         return (BlockVector) super.clone();
     }
 
diff --git a/src/main/java/org/bukkit/util/BoundingBox.java b/src/main/java/org/bukkit/util/BoundingBox.java
index 9883983c33fcff0f4c1e23867adafa436e2ed96f..35463c4a57c23489d3182480e921f48f4c71c209 100644
--- a/src/main/java/org/bukkit/util/BoundingBox.java
+++ b/src/main/java/org/bukkit/util/BoundingBox.java
@@ -987,7 +987,7 @@ public class BoundingBox implements Cloneable, ConfigurationSerializable {
     }
 
     @Override
-    public String toString() {
+    public @NotNull String toString() {
         StringBuilder builder = new StringBuilder();
         builder.append("BoundingBox [minX=");
         builder.append(minX);
diff --git a/src/main/java/org/bukkit/util/ChatPaginator.java b/src/main/java/org/bukkit/util/ChatPaginator.java
index dea3b53c298128f93f2d71dbb488e69540dd8952..1c15b186e1b733955181029b5e940e30c61f760d 100644
--- a/src/main/java/org/bukkit/util/ChatPaginator.java
+++ b/src/main/java/org/bukkit/util/ChatPaginator.java
@@ -64,7 +64,7 @@ public class ChatPaginator {
      * @return An array of word-wrapped lines.
      */
     @NotNull
-    public static String[] wordWrap(@Nullable String rawString, int lineLength) {
+    public static String @NotNull [] wordWrap(@Nullable String rawString, int lineLength) {
         // A null string is a single line
         if (rawString == null) {
             return new String[] {""};
diff --git a/src/main/java/org/bukkit/util/EulerAngle.java b/src/main/java/org/bukkit/util/EulerAngle.java
index 201cb4a8c7ca840f4d0ecb78005316554bde5183..56ba1a70ce6311c3727d005ea9a78249248fb2a4 100644
--- a/src/main/java/org/bukkit/util/EulerAngle.java
+++ b/src/main/java/org/bukkit/util/EulerAngle.java
@@ -1,6 +1,8 @@
 package org.bukkit.util;
 
 import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 /**
  * EulerAngle is used to represent 3 angles, one for each
@@ -127,7 +129,7 @@ public class EulerAngle {
     }
 
     @Override
-    public boolean equals(Object o) {
+    public boolean equals(@Nullable Object o) {
         if (this == o) return true;
         if (o == null || getClass() != o.getClass()) return false;
 
diff --git a/src/main/java/org/bukkit/util/RayTraceResult.java b/src/main/java/org/bukkit/util/RayTraceResult.java
index ccda3b3bc678d14662c493451a5b2aba13ff5660..1f8df7ca62fedbdc82004c9abf28480735d98f2a 100644
--- a/src/main/java/org/bukkit/util/RayTraceResult.java
+++ b/src/main/java/org/bukkit/util/RayTraceResult.java
@@ -17,11 +17,11 @@ import org.jetbrains.annotations.Nullable;
  */
 public class RayTraceResult {
 
-    private final Vector hitPosition;
+    private final @NotNull Vector hitPosition;
 
-    private final Block hitBlock;
-    private final BlockFace hitBlockFace;
-    private final Entity hitEntity;
+    private final @Nullable Block hitBlock;
+    private final @Nullable BlockFace hitBlockFace;
+    private final @Nullable Entity hitEntity;
 
     private RayTraceResult(@NotNull Vector hitPosition, @Nullable Block hitBlock, @Nullable BlockFace hitBlockFace, @Nullable Entity hitEntity) {
         Preconditions.checkArgument(hitPosition != null, "Hit position is null!");
@@ -146,7 +146,7 @@ public class RayTraceResult {
     }
 
     @Override
-    public String toString() {
+    public @NotNull String toString() {
         StringBuilder builder = new StringBuilder();
         builder.append("RayTraceResult [hitPosition=");
         builder.append(hitPosition);
diff --git a/src/main/java/org/bukkit/util/Vector.java b/src/main/java/org/bukkit/util/Vector.java
index bdfb9623b74ea73a3d343b20fc1369cc797880c5..8b102ab7b1e30b688b884b74cad7be37eacf4574 100644
--- a/src/main/java/org/bukkit/util/Vector.java
+++ b/src/main/java/org/bukkit/util/Vector.java
@@ -21,7 +21,7 @@ import org.jetbrains.annotations.NotNull;
 public class Vector implements Cloneable, ConfigurationSerializable {
     private static final long serialVersionUID = -2657651106777219169L;
 
-    private static Random random = new Random();
+    private static @NotNull Random random = new Random();
 
     /**
      * Threshold for fuzzy equals().
@@ -767,7 +767,7 @@ public class Vector implements Cloneable, ConfigurationSerializable {
      * Returns this vector's components as x,y,z.
      */
     @Override
-    public String toString() {
+    public @NotNull String toString() {
         return x + "," + y + "," + z;
     }
 
diff --git a/src/main/java/org/bukkit/util/io/BukkitObjectInputStream.java b/src/main/java/org/bukkit/util/io/BukkitObjectInputStream.java
index 0f8eb97bd5e2f8b0f0cc03f7c4342aae06c4520c..65b7c5867977a60d23bbc06f2fcd924ea2f159dd 100644
--- a/src/main/java/org/bukkit/util/io/BukkitObjectInputStream.java
+++ b/src/main/java/org/bukkit/util/io/BukkitObjectInputStream.java
@@ -5,6 +5,8 @@ import java.io.InputStream;
 import java.io.ObjectInputStream;
 import org.bukkit.configuration.serialization.ConfigurationSerializable;
 import org.bukkit.configuration.serialization.ConfigurationSerialization;
+import org.jetbrains.annotations.NotNull;
+
 
 /**
  * This class is designed to be used in conjunction with the {@link
@@ -55,7 +57,7 @@ public class BukkitObjectInputStream extends ObjectInputStream {
         return super.resolveObject(obj);
     }
 
-    private static IOException newIOException(String string, Throwable cause) {
+    private static @NotNull IOException newIOException(String string, Throwable cause) {
         IOException exception = new IOException(string);
         exception.initCause(cause);
         return exception;
diff --git a/src/main/java/org/bukkit/util/io/Wrapper.java b/src/main/java/org/bukkit/util/io/Wrapper.java
index c3496dc8ba124cfdd23f0fe14d17f8f7cea7c955..58aff8a145b23852cac0420e8233fd0c39769c21 100644
--- a/src/main/java/org/bukkit/util/io/Wrapper.java
+++ b/src/main/java/org/bukkit/util/io/Wrapper.java
@@ -10,9 +10,9 @@ import org.jetbrains.annotations.NotNull;
 final class Wrapper<T extends Map<String, ?> & Serializable> implements Serializable {
     private static final long serialVersionUID = -986209235411767547L;
 
-    final T map;
+    final @NotNull T map;
 
-    static Wrapper<ImmutableMap<String, ?>> newWrapper(@NotNull ConfigurationSerializable obj) {
+    static @NotNull Wrapper<ImmutableMap<String, ?>> newWrapper(@NotNull ConfigurationSerializable obj) {
         return new Wrapper<ImmutableMap<String, ?>>(ImmutableMap.<String, Object>builder().put(ConfigurationSerialization.SERIALIZED_TYPE_KEY, ConfigurationSerialization.getAlias(obj.getClass())).putAll(obj.serialize()).build());
     }
 
diff --git a/src/main/java/org/bukkit/util/noise/PerlinOctaveGenerator.java b/src/main/java/org/bukkit/util/noise/PerlinOctaveGenerator.java
index af7e01188ee767858ba760089b2aceab0bc9626a..a518f27d469dbc3f45e5f6d8a5b2ffc6c038eba0 100644
--- a/src/main/java/org/bukkit/util/noise/PerlinOctaveGenerator.java
+++ b/src/main/java/org/bukkit/util/noise/PerlinOctaveGenerator.java
@@ -40,7 +40,7 @@ public class PerlinOctaveGenerator extends OctaveGenerator {
     }
 
     @NotNull
-    private static NoiseGenerator[] createOctaves(@NotNull Random rand, int octaves) {
+    private static NoiseGenerator @NotNull [] createOctaves(@NotNull Random rand, int octaves) {
         NoiseGenerator[] result = new NoiseGenerator[octaves];
 
         for (int i = 0; i < octaves; i++) {
diff --git a/src/main/java/org/bukkit/util/noise/SimplexNoiseGenerator.java b/src/main/java/org/bukkit/util/noise/SimplexNoiseGenerator.java
index 775d8f40322e9ed6702eb23bf50f35442d673c30..93741d777d0f8f93e5be73683238b29e8d483686 100644
--- a/src/main/java/org/bukkit/util/noise/SimplexNoiseGenerator.java
+++ b/src/main/java/org/bukkit/util/noise/SimplexNoiseGenerator.java
@@ -78,15 +78,15 @@ public class SimplexNoiseGenerator extends PerlinNoiseGenerator {
         offsetW = rand.nextDouble() * 256;
     }
 
-    protected static double dot(@NotNull int[] g, double x, double y) {
+    protected static double dot(@NotNull int @NotNull [] g, double x, double y) {
         return g[0] * x + g[1] * y;
     }
 
-    protected static double dot(@NotNull int[] g, double x, double y, double z) {
+    protected static double dot(@NotNull int @NotNull [] g, double x, double y, double z) {
         return g[0] * x + g[1] * y + g[2] * z;
     }
 
-    protected static double dot(@NotNull int[] g, double x, double y, double z, double w) {
+    protected static double dot(@NotNull int @NotNull [] g, double x, double y, double z, double w) {
         return g[0] * x + g[1] * y + g[2] * z + g[3] * w;
     }
 
diff --git a/src/main/java/org/bukkit/util/noise/SimplexOctaveGenerator.java b/src/main/java/org/bukkit/util/noise/SimplexOctaveGenerator.java
index 6cc15431e1b288df1830adac936a7648c6834b3e..39dbd57b7963235b5d139eb9f0233ee5bcfad4f6 100644
--- a/src/main/java/org/bukkit/util/noise/SimplexOctaveGenerator.java
+++ b/src/main/java/org/bukkit/util/noise/SimplexOctaveGenerator.java
@@ -119,7 +119,7 @@ public class SimplexOctaveGenerator extends OctaveGenerator {
     }
 
     @NotNull
-    private static NoiseGenerator[] createOctaves(@NotNull Random rand, int octaves) {
+    private static NoiseGenerator @NotNull [] createOctaves(@NotNull Random rand, int octaves) {
         NoiseGenerator[] result = new NoiseGenerator[octaves];
 
         for (int i = 0; i < octaves; i++) {
diff --git a/src/main/java/org/spigotmc/event/entity/EntityDismountEvent.java b/src/main/java/org/spigotmc/event/entity/EntityDismountEvent.java
index a7632c8f5cb1bce4be0e456ec34f4a69c5ce80f3..91b4c31676cfae6aa39a2e1129064c48b5a0eb25 100644
--- a/src/main/java/org/spigotmc/event/entity/EntityDismountEvent.java
+++ b/src/main/java/org/spigotmc/event/entity/EntityDismountEvent.java
@@ -13,7 +13,7 @@ public class EntityDismountEvent extends EntityEvent implements Cancellable {
 
     private static final HandlerList handlers = new HandlerList();
     private boolean cancelled;
-    private final Entity dismounted;
+    private final @NotNull Entity dismounted;
     private final boolean isCancellable; // Paper
 
     public EntityDismountEvent(@NotNull Entity what, @NotNull Entity dismounted) {
diff --git a/src/main/java/org/spigotmc/event/entity/EntityMountEvent.java b/src/main/java/org/spigotmc/event/entity/EntityMountEvent.java
index de9c41effefdd9312869a3978946fb9a48bce707..64689de5b53367bf53a400014329e10d9be3a387 100644
--- a/src/main/java/org/spigotmc/event/entity/EntityMountEvent.java
+++ b/src/main/java/org/spigotmc/event/entity/EntityMountEvent.java
@@ -13,7 +13,7 @@ public class EntityMountEvent extends EntityEvent implements Cancellable {
 
     private static final HandlerList handlers = new HandlerList();
     private boolean cancelled;
-    private final Entity mount;
+    private final @NotNull Entity mount;
 
     public EntityMountEvent(@NotNull Entity what, @NotNull Entity mount) {
         super(what);
diff --git a/src/test/java/com/destroystokyo/paper/MaterialTagsTest.java b/src/test/java/com/destroystokyo/paper/MaterialTagsTest.java
index 91a151524a35a0beed9e4eec10de6de737840607..860716e90003b995d184a96e3b39afa6e8655879 100644
--- a/src/test/java/com/destroystokyo/paper/MaterialTagsTest.java
+++ b/src/test/java/com/destroystokyo/paper/MaterialTagsTest.java
@@ -8,6 +8,7 @@ import io.papermc.paper.tag.BaseTag;
 import io.papermc.paper.tag.EntityTags;
 import org.bukkit.Bukkit;
 import org.bukkit.TestServer;
+import org.jetbrains.annotations.NotNull;
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
@@ -45,13 +46,13 @@ public class MaterialTagsTest {
         testLocked(EntityTags.class);
     }
 
-    private static void testLocked(Class<?> clazz) {
+    private static void testLocked(@NotNull Class<?> clazz) {
         for (BaseTag<?, ?> tag : collectTags(clazz)) {
             assertTrue(tag.isLocked(), "Tag " + tag.key() + " is not locked");
         }
     }
 
-    private static Set<BaseTag<?, ?>> collectTags(Class<?> clazz) {
+    private static @NotNull Set<BaseTag<?, ?>> collectTags(@NotNull Class<?> clazz) {
         Set<BaseTag<?, ?>> tags = new HashSet<>();
         try {
             for (Field field : clazz.getDeclaredFields()) {
diff --git a/src/test/java/org/bukkit/BukkitMirrorTest.java b/src/test/java/org/bukkit/BukkitMirrorTest.java
index b715650fb68dc68b3497bf04e931b560767e9c93..0f6ce76601596dbc489c75559bb7a7dcc90b8fdc 100644
--- a/src/test/java/org/bukkit/BukkitMirrorTest.java
+++ b/src/test/java/org/bukkit/BukkitMirrorTest.java
@@ -1,5 +1,6 @@
 package org.bukkit;
 
+import org.jetbrains.annotations.NotNull;
 import org.junit.jupiter.params.ParameterizedTest;
 import org.junit.jupiter.params.provider.MethodSource;
 
@@ -14,7 +15,7 @@ import static org.hamcrest.Matchers.is;
 public class BukkitMirrorTest {
 
     @ParameterizedTest(name = "{index}: {1}")
-    public static Stream<Object[]> data() {
+    public static @NotNull Stream<Object[]> data() {
         return Arrays.stream(Server.class.getDeclaredMethods()).map(input -> new Object[]{
             input,
             input.toGenericString().substring("public abstract ".length()).replace("(", "{").replace(")", "}")
@@ -24,27 +25,27 @@ public class BukkitMirrorTest {
 
     private Method bukkit;
 
-    public void makeBukkit(Method server) throws Throwable {
+    public void makeBukkit(@NotNull Method server) throws Throwable {
         bukkit = Bukkit.class.getDeclaredMethod(server.getName(), server.getParameterTypes());
     }
 
     @ParameterizedTest
     @MethodSource("data")
-    public void isStatic(Method server, String name) throws Throwable {
+    public void isStatic(@NotNull Method server, String name) throws Throwable {
         makeBukkit(server);
         assertThat(Modifier.isStatic(bukkit.getModifiers()), is(true));
     }
 
     @ParameterizedTest
     @MethodSource("data")
-    public void isDeprecated(Method server, String name) throws Throwable {
+    public void isDeprecated(@NotNull Method server, String name) throws Throwable {
         makeBukkit(server);
         assertThat(bukkit.isAnnotationPresent(Deprecated.class), is(server.isAnnotationPresent(Deprecated.class)));
     }
 
     @ParameterizedTest
     @MethodSource("data")
-    public void returnType(Method server, String name) throws Throwable {
+    public void returnType(@NotNull Method server, String name) throws Throwable {
         makeBukkit(server);
         assertThat(bukkit.getReturnType(), is((Object) server.getReturnType()));
         // assertThat(bukkit.getGenericReturnType(), is(server.getGenericReturnType())); // too strict on <T> type generics
@@ -52,14 +53,14 @@ public class BukkitMirrorTest {
 
     @ParameterizedTest
     @MethodSource("data")
-    public void parameterTypes(Method server, String name) throws Throwable {
+    public void parameterTypes(@NotNull Method server, String name) throws Throwable {
         makeBukkit(server);
         // assertThat(bukkit.getGenericParameterTypes(), is(server.getGenericParameterTypes())); // too strict on <T> type generics
     }
 
     @ParameterizedTest
     @MethodSource("data")
-    public void declaredException(Method server, String name) throws Throwable {
+    public void declaredException(@NotNull Method server, String name) throws Throwable {
         makeBukkit(server);
         assertThat(bukkit.getGenericExceptionTypes(), is(server.getGenericExceptionTypes()));
     }
diff --git a/src/test/java/org/bukkit/ColorTest.java b/src/test/java/org/bukkit/ColorTest.java
index d3c45873462932854593c679b57c2e1a8f536371..0312f9c0234235ee071607d5beb55f51dc23b7fb 100644
--- a/src/test/java/org/bukkit/ColorTest.java
+++ b/src/test/java/org/bukkit/ColorTest.java
@@ -6,6 +6,7 @@ import static org.junit.jupiter.api.Assertions.*;
 import static org.junit.jupiter.api.Assertions.assertThrows;
 
 import org.bukkit.configuration.file.YamlConfiguration;
+import org.jetbrains.annotations.NotNull;
 import org.junit.jupiter.api.Assertions;
 import org.junit.jupiter.api.Test;
 
@@ -13,7 +14,7 @@ import org.junit.jupiter.api.Test;
 public class ColorTest {
     static class TestColor {
         static int id = 0;
-        final String name;
+        final @NotNull String name;
         final int rgb;
         final int bgr;
         final int r;
@@ -30,7 +31,7 @@ public class ColorTest {
         }
     }
 
-    static TestColor[] examples = new TestColor[]{
+    static TestColor @NotNull [] examples = new TestColor[]{
         /*            0xRRGGBB, 0xBBGGRR, 0xRR, 0xGG, 0xBB */
         new TestColor(0xFFFFFF, 0xFFFFFF, 0xFF, 0xFF, 0xFF),
         new TestColor(0xFFFFAA, 0xAAFFFF, 0xFF, 0xFF, 0xAA),
diff --git a/src/test/java/org/bukkit/DyeColorTest.java b/src/test/java/org/bukkit/DyeColorTest.java
index a5104a9c227eee8533c920c6262c2ee2d11eb182..caa1f33ae9eedfdc70095c3232522f590420056a 100644
--- a/src/test/java/org/bukkit/DyeColorTest.java
+++ b/src/test/java/org/bukkit/DyeColorTest.java
@@ -3,6 +3,7 @@ package org.bukkit;
 import org.bukkit.material.Colorable;
 import org.bukkit.material.Dye;
 import org.bukkit.material.Wool;
+import org.jetbrains.annotations.NotNull;
 import org.junit.jupiter.params.ParameterizedTest;
 import org.junit.jupiter.params.provider.MethodSource;
 
@@ -15,14 +16,14 @@ import static org.hamcrest.Matchers.is;
 public class DyeColorTest {
 
     @ParameterizedTest(name = "{index}: {0}")
-    public static Stream<Object[]> data() {
+    public static @NotNull Stream<Object[]> data() {
         return Arrays.stream(DyeColor.values()).map(dye -> new Object[] {dye});
     }
 
     @ParameterizedTest
     @SuppressWarnings("deprecation")
     @MethodSource("data")
-    public void getByData(DyeColor dye) {
+    public void getByData(@NotNull DyeColor dye) {
         byte data = dye.getWoolData();
 
         DyeColor byData = DyeColor.getByWoolData(data);
@@ -31,7 +32,7 @@ public class DyeColorTest {
 
     @ParameterizedTest
     @MethodSource("data")
-    public void getByWoolData(DyeColor dye) {
+    public void getByWoolData(@NotNull DyeColor dye) {
         byte data = dye.getWoolData();
 
         DyeColor byData = DyeColor.getByWoolData(data);
@@ -40,7 +41,7 @@ public class DyeColorTest {
 
     @ParameterizedTest
     @MethodSource("data")
-    public void getByDyeData(DyeColor dye) {
+    public void getByDyeData(@NotNull DyeColor dye) {
         byte data = dye.getDyeData();
 
         DyeColor byData = DyeColor.getByDyeData(data);
@@ -49,18 +50,18 @@ public class DyeColorTest {
 
     @ParameterizedTest
     @MethodSource("data")
-    public void getDyeDyeColor(DyeColor dye) {
+    public void getDyeDyeColor(@NotNull DyeColor dye) {
         testColorable(dye, new Dye(Material.LEGACY_INK_SACK, dye.getDyeData()));
         testColorable(dye, new Dye(dye));
     }
 
     @ParameterizedTest
     @MethodSource("data")
-    public void getWoolDyeColor(DyeColor dye) {
+    public void getWoolDyeColor(@NotNull DyeColor dye) {
         testColorable(dye, new Wool(Material.LEGACY_WOOL, dye.getWoolData()));
     }
 
-    private void testColorable(final DyeColor dye, final Colorable colorable) {
+    private void testColorable(final DyeColor dye, final @NotNull Colorable colorable) {
         assertThat(colorable.getColor(), is(dye));
     }
 }
diff --git a/src/test/java/org/bukkit/EffectTest.java b/src/test/java/org/bukkit/EffectTest.java
index aaec9611aea814e971516426d157b23016264d8b..ee3e34b5710734643eebd126a4c50c525b28e6bf 100644
--- a/src/test/java/org/bukkit/EffectTest.java
+++ b/src/test/java/org/bukkit/EffectTest.java
@@ -3,6 +3,8 @@ package org.bukkit;
 import static org.hamcrest.CoreMatchers.*;
 import static org.hamcrest.MatcherAssert.assertThat;
 import static org.junit.jupiter.api.Assertions.*;
+
+import org.jetbrains.annotations.NotNull;
 import org.junit.jupiter.api.Test;
 
 public class EffectTest {
@@ -17,7 +19,7 @@ public class EffectTest {
     }
 
     // Paper start
-    private static boolean isDeprecated(Effect effect) {
+    private static boolean isDeprecated(@NotNull Effect effect) {
         try {
             return Effect.class.getDeclaredField(effect.name()).isAnnotationPresent(Deprecated.class);
         } catch (NoSuchFieldException e) {
diff --git a/src/test/java/org/bukkit/LocationTest.java b/src/test/java/org/bukkit/LocationTest.java
index 29967274356767975b0be693c0207ebb644d5527..9ee47525052b615e5de047ccc4ced3825ac42ec8 100644
--- a/src/test/java/org/bukkit/LocationTest.java
+++ b/src/test/java/org/bukkit/LocationTest.java
@@ -1,6 +1,7 @@
 package org.bukkit;
 
 import org.bukkit.util.Vector;
+import org.jetbrains.annotations.NotNull;
 import org.junit.jupiter.params.ParameterizedTest;
 import org.junit.jupiter.params.provider.MethodSource;
 
@@ -35,7 +36,7 @@ public class LocationTest {
     private static final double HALF_HALF_UNIT = Math.sqrt(1 / 4f);
 
     @ParameterizedTest(name = "{index}: {0}")
-    public static Stream<Object[]> data() {
+    public static @NotNull Stream<Object[]> data() {
         Random RANDOM = new Random(1L); // Test is deterministic
         int r = 0;
         return Stream.of(
@@ -108,7 +109,7 @@ public class LocationTest {
         );
     }
 
-    private static Object[] getRandom(Random random, int index) {
+    private static Object @NotNull [] getRandom(@NotNull Random random, int index) {
         final double YAW_FACTOR = 360;
         final double YAW_OFFSET = 0;
         final double PITCH_FACTOR = 180;
@@ -173,15 +174,15 @@ public class LocationTest {
         assertThat(first, is(second));
     }
 
-    private Vector getVector(double x, double y, double z) {
+    private @NotNull Vector getVector(double x, double y, double z) {
         return new Vector(x, y, z);
     }
 
-    private static Location getEmptyLocation() {
+    private static @NotNull Location getEmptyLocation() {
         return new Location(TestWorld.INSTANCE, 0, 0, 0);
     }
 
-    private Location getLocation(float yaw, float pitch) {
+    private @NotNull Location getLocation(float yaw, float pitch) {
         Location location = getEmptyLocation();
         location.setYaw(yaw);
         location.setPitch(pitch);
diff --git a/src/test/java/org/bukkit/TestServer.java b/src/test/java/org/bukkit/TestServer.java
index bfb39f48bea14ad616c53e2a8a6901e93f728768..9cd5a816d56e578690d1a841c4fd34733ee314ae 100644
--- a/src/test/java/org/bukkit/TestServer.java
+++ b/src/test/java/org/bukkit/TestServer.java
@@ -15,10 +15,10 @@ import org.jetbrains.annotations.Nullable;
 
 public final class TestServer implements InvocationHandler {
     private static interface MethodHandler {
-        Object handle(TestServer server, Object[] args);
+        @Nullable Object handle(TestServer server, Object[] args);
     }
 
-    private static final Map<Method, MethodHandler> methods;
+    private static final @NotNull Map<Method, MethodHandler> methods;
 
     static {
         try {
@@ -27,7 +27,7 @@ public final class TestServer implements InvocationHandler {
                     Server.class.getMethod("isPrimaryThread"),
                     new MethodHandler() {
                         @Override
-                        public Object handle(TestServer server, Object[] args) {
+                        public @NotNull Object handle(@NotNull TestServer server, Object[] args) {
                             return Thread.currentThread().equals(server.creatingThread);
                         }
                     }
@@ -36,7 +36,7 @@ public final class TestServer implements InvocationHandler {
             methodMap.put(
                 Server.class.getMethod("getTag", String.class, NamespacedKey.class, Class.class),
                 new MethodHandler() {
-                    public Object handle(TestServer server, Object[] args) {
+                    public @NotNull Object handle(TestServer server, Object[] args) {
                         return new com.destroystokyo.paper.MaterialSetTag();
                     }
                 }
@@ -46,7 +46,7 @@ public final class TestServer implements InvocationHandler {
                     Server.class.getMethod("getPluginManager"),
                     new MethodHandler() {
                         @Override
-                        public Object handle(TestServer server, Object[] args) {
+                        public Object handle(@NotNull TestServer server, Object[] args) {
                             return server.pluginManager;
                         }
                     }
@@ -65,7 +65,7 @@ public final class TestServer implements InvocationHandler {
                     Server.class.getMethod("getName"),
                     new MethodHandler() {
                         @Override
-                        public Object handle(TestServer server, Object[] args) {
+                        public @NotNull Object handle(TestServer server, Object[] args) {
                             return TestServer.class.getSimpleName();
                         }
                     }
@@ -74,7 +74,7 @@ public final class TestServer implements InvocationHandler {
                     Server.class.getMethod("getVersion"),
                     new MethodHandler() {
                         @Override
-                        public Object handle(TestServer server, Object[] args) {
+                        public @NotNull Object handle(TestServer server, Object[] args) {
                             return "Version_" + TestServer.class.getPackage().getImplementationVersion();
                         }
                     }
@@ -83,7 +83,7 @@ public final class TestServer implements InvocationHandler {
                     Server.class.getMethod("getBukkitVersion"),
                     new MethodHandler() {
                         @Override
-                        public Object handle(TestServer server, Object[] args) {
+                        public @NotNull Object handle(TestServer server, Object[] args) {
                             return "BukkitVersion_" + TestServer.class.getPackage().getImplementationVersion();
                         }
                     }
@@ -92,7 +92,7 @@ public final class TestServer implements InvocationHandler {
                     Server.class.getMethod("getRegistry", Class.class),
                     new MethodHandler() {
                         @Override
-                        public Object handle(TestServer server, Object[] args) {
+                        public @NotNull Object handle(TestServer server, Object[] args) {
                             return new Registry() {
                                 @NotNull
                                 @Override
@@ -113,7 +113,7 @@ public final class TestServer implements InvocationHandler {
                     Server.class.getMethod("getScoreboardCriteria", String.class),
                     new MethodHandler() {
                         @Override
-                        public Object handle(TestServer server, Object[] args) {
+                        public @Nullable Object handle(TestServer server, Object[] args) {
                             // Does not need to return anything. Exists solely to test CriteriaTest which has static init fields
                             return null;
                         }
@@ -130,11 +130,11 @@ public final class TestServer implements InvocationHandler {
         }
     }
 
-    private Thread creatingThread = Thread.currentThread();
+    private @NotNull Thread creatingThread = Thread.currentThread();
     private PluginManager pluginManager;
     private TestServer() {};
 
-    public static Server getInstance() {
+    public static @NotNull Server getInstance() {
         return Bukkit.getServer();
     }
 
diff --git a/src/test/java/org/bukkit/TestWorld.java b/src/test/java/org/bukkit/TestWorld.java
index ab34f1199921d415fa2ca6e281a8125c9e6d7173..992d6dbec541e36507ddfab729cfc1a920afb44e 100644
--- a/src/test/java/org/bukkit/TestWorld.java
+++ b/src/test/java/org/bukkit/TestWorld.java
@@ -1,6 +1,8 @@
 package org.bukkit;
 
 import com.google.common.collect.ImmutableMap;
+import org.jetbrains.annotations.NotNull;
+
 import java.lang.reflect.InvocationHandler;
 import java.lang.reflect.Method;
 import java.lang.reflect.Proxy;
@@ -13,8 +15,8 @@ public final class TestWorld implements InvocationHandler {
         Object handle(TestWorld server, Object[] args);
     }
 
-    private static final Map<Method, MethodHandler> methods;
-    public static final World INSTANCE;
+    private static final @NotNull Map<Method, MethodHandler> methods;
+    public static final @NotNull World INSTANCE;
 
     static {
         try {
@@ -25,7 +27,7 @@ public final class TestWorld implements InvocationHandler {
                     Object.class.getMethod("equals", Object.class),
                     new MethodHandler() {
                         @Override
-                        public Object handle(TestWorld server, Object[] args) {
+                        public @NotNull Object handle(TestWorld server, Object[] args) {
                             return this == args[0];
                         }
                     }
@@ -34,7 +36,7 @@ public final class TestWorld implements InvocationHandler {
                     Object.class.getMethod("hashCode"),
                     new MethodHandler() {
                         @Override
-                        public Object handle(TestWorld server, Object[] args) {
+                        public @NotNull Object handle(TestWorld server, Object[] args) {
                             return this.hashCode();
                         }
                     }
@@ -51,7 +53,7 @@ public final class TestWorld implements InvocationHandler {
     private TestWorld() {
     }
 
-    public static Server getInstance() {
+    public static @NotNull Server getInstance() {
         return Bukkit.getServer();
     }
 
diff --git a/src/test/java/org/bukkit/configuration/ConfigurationSectionTest.java b/src/test/java/org/bukkit/configuration/ConfigurationSectionTest.java
index 7971dcc76ecb0a62f91b558d1981cbd451bb659d..6301b110421bdedcc000039028799b484349ad87 100644
--- a/src/test/java/org/bukkit/configuration/ConfigurationSectionTest.java
+++ b/src/test/java/org/bukkit/configuration/ConfigurationSectionTest.java
@@ -12,6 +12,7 @@ import org.bukkit.Material;
 import org.bukkit.configuration.serialization.ConfigurationSerializable;
 import org.bukkit.inventory.ItemStack;
 import org.bukkit.util.Vector;
+import org.jetbrains.annotations.NotNull;
 import org.junit.jupiter.api.Test;
 
 public abstract class ConfigurationSectionTest {
@@ -611,11 +612,11 @@ public abstract class ConfigurationSectionTest {
         BANANAS;
 
         @Override
-        public Map<String, Object> serialize() {
+        public @NotNull Map<String, Object> serialize() {
             return Collections.singletonMap("variant", this.name());
         }
 
-        public static TestEnum deserialize(Map<String, Object> map) {
+        public static @NotNull TestEnum deserialize(@NotNull Map<String, Object> map) {
             return TestEnum.valueOf((String) map.get("variant"));
         }
     }
diff --git a/src/test/java/org/bukkit/configuration/ConfigurationTest.java b/src/test/java/org/bukkit/configuration/ConfigurationTest.java
index c0276c177fa856d1281ae51e727e1425749356df..c77a455c936ee10ece4d7eeb0afe3d83f375321f 100644
--- a/src/test/java/org/bukkit/configuration/ConfigurationTest.java
+++ b/src/test/java/org/bukkit/configuration/ConfigurationTest.java
@@ -10,6 +10,7 @@ import java.util.Map;
 import java.util.Set;
 import org.bukkit.configuration.serialization.ConfigurationSerialization;
 import org.bukkit.util.Vector;
+import org.jetbrains.annotations.NotNull;
 import org.junit.jupiter.api.Test;
 
 public abstract class ConfigurationTest {
@@ -20,7 +21,7 @@ public abstract class ConfigurationTest {
 
     public abstract Configuration getConfig();
 
-    public Map<String, Object> getTestValues() {
+    public @NotNull Map<String, Object> getTestValues() {
         HashMap<String, Object> result = new LinkedHashMap<String, Object>();
 
         result.put("integer", Integer.MIN_VALUE);
diff --git a/src/test/java/org/bukkit/configuration/MemorySectionTest.java b/src/test/java/org/bukkit/configuration/MemorySectionTest.java
index be7768abe59a8e989b6eae4ef6205b229a694709..d51de0e8ddabe335dcafcb57877ef76c0cbd78f5 100644
--- a/src/test/java/org/bukkit/configuration/MemorySectionTest.java
+++ b/src/test/java/org/bukkit/configuration/MemorySectionTest.java
@@ -1,8 +1,11 @@
 package org.bukkit.configuration;
 
+import org.jetbrains.annotations.NotNull;
+
+
 public class MemorySectionTest extends ConfigurationSectionTest {
     @Override
-    public ConfigurationSection getConfigurationSection() {
+    public @NotNull ConfigurationSection getConfigurationSection() {
         return new MemoryConfiguration().createSection("section");
     }
 }
diff --git a/src/test/java/org/bukkit/configuration/file/FileConfigurationTest.java b/src/test/java/org/bukkit/configuration/file/FileConfigurationTest.java
index db8808acc5c89015e21f4e3944427d75b8be637b..b9d94e83d614bf2dd9490aeef078dd627ff6ae63 100644
--- a/src/test/java/org/bukkit/configuration/file/FileConfigurationTest.java
+++ b/src/test/java/org/bukkit/configuration/file/FileConfigurationTest.java
@@ -1,6 +1,7 @@
 package org.bukkit.configuration.file;
 
 import org.bukkit.configuration.MemoryConfigurationTest;
+import org.jetbrains.annotations.NotNull;
 import org.junit.jupiter.api.Test;
 import org.junit.jupiter.api.io.TempDir;
 
@@ -34,7 +35,7 @@ public abstract class FileConfigurationTest extends MemoryConfigurationTest {
     public abstract String getTestHeaderKeyCommentResult();
 
     @org.junit.jupiter.api.Test
-    public void testSave_File(@TempDir Path testFolder) throws Exception {
+    public void testSave_File(@TempDir @NotNull Path testFolder) throws Exception {
         FileConfiguration config = getConfig();
         File file = testFolder.resolve("test.config").toFile();
 
@@ -48,7 +49,7 @@ public abstract class FileConfigurationTest extends MemoryConfigurationTest {
     }
 
     @org.junit.jupiter.api.Test
-    public void testSave_String(@TempDir Path testFolder) throws Exception {
+    public void testSave_String(@TempDir @NotNull Path testFolder) throws Exception {
         FileConfiguration config = getConfig();
         File file = testFolder.resolve("test.config").toFile();
 
@@ -76,7 +77,7 @@ public abstract class FileConfigurationTest extends MemoryConfigurationTest {
     }
 
     @org.junit.jupiter.api.Test
-    public void testLoad_File(@TempDir Path testFolder) throws Exception {
+    public void testLoad_File(@TempDir @NotNull Path testFolder) throws Exception {
         FileConfiguration config = getConfig();
         File file = testFolder.resolve("test.config").toFile();
         BufferedWriter writer = new BufferedWriter(new FileWriter(file));
@@ -99,7 +100,7 @@ public abstract class FileConfigurationTest extends MemoryConfigurationTest {
     }
 
     @org.junit.jupiter.api.Test
-    public void testLoad_String(@TempDir Path testFolder) throws Exception {
+    public void testLoad_String(@TempDir @NotNull Path testFolder) throws Exception {
         FileConfiguration config = getConfig();
         File file = testFolder.resolve("test.config").toFile();
         BufferedWriter writer = new BufferedWriter(new FileWriter(file));
diff --git a/src/test/java/org/bukkit/configuration/file/YamlConfigurationTest.java b/src/test/java/org/bukkit/configuration/file/YamlConfigurationTest.java
index 679d162196fb2746de719d9613bb14522f831812..87ef131121bb63538d01284456f52a6e98696921 100644
--- a/src/test/java/org/bukkit/configuration/file/YamlConfigurationTest.java
+++ b/src/test/java/org/bukkit/configuration/file/YamlConfigurationTest.java
@@ -11,17 +11,18 @@ import java.util.Map.Entry;
 import org.bukkit.configuration.ConfigurationSection;
 import org.bukkit.configuration.InvalidConfigurationException;
 import org.bukkit.configuration.MemoryConfiguration;
+import org.jetbrains.annotations.NotNull;
 import org.junit.jupiter.api.Test;
 
 public class YamlConfigurationTest extends FileConfigurationTest {
 
     @Override
-    public YamlConfiguration getConfig() {
+    public @NotNull YamlConfiguration getConfig() {
         return new YamlConfiguration();
     }
 
     @Override
-    public List<String> getTestCommentInput() {
+    public @NotNull List<String> getTestCommentInput() {
         List<String> comments = new ArrayList<>();
         comments.add("This is a sample");
         comments.add("header.");
@@ -36,32 +37,32 @@ public class YamlConfigurationTest extends FileConfigurationTest {
     }
 
     @Override
-    public String getTestCommentResult() {
+    public @NotNull String getTestCommentResult() {
         return "# This is a sample\n# header.\n# Newline above should be commented.\n#\n#\n\n\n# Comment of first Key\n# and a second line.";
     }
 
     @Override
-    public List<String> getTestHeaderComments() {
+    public @NotNull List<String> getTestHeaderComments() {
         return Arrays.asList("Header", "Second Line");
     }
 
     @Override
-    public String getTestHeaderCommentsResult() {
+    public @NotNull String getTestHeaderCommentsResult() {
         return "# Header\n# Second Line\n";
     }
 
     @Override
-    public List<String> getTestKeyComments() {
+    public @NotNull List<String> getTestKeyComments() {
         return Arrays.asList("First key Comment", "Second Line");
     }
 
     @Override
-    public String getTestHeaderKeyCommentResult() {
+    public @NotNull String getTestHeaderKeyCommentResult() {
         return "# Header\n# Second Line\n\n# First key Comment\n# Second Line\n";
     }
 
     @Override
-    public String getTestValuesString() {
+    public @NotNull String getTestValuesString() {
         return "integer: -2147483648\n"
                 + "string: String Value\n"
                 + "long: 9223372036854775807\n"
diff --git a/src/test/java/org/bukkit/conversations/ConversationTest.java b/src/test/java/org/bukkit/conversations/ConversationTest.java
index 759a8f4e3be84bef8c4c38ba838db937f00cb92a..eeee0cee99faed9de5f77470fc95e62100713bb5 100644
--- a/src/test/java/org/bukkit/conversations/ConversationTest.java
+++ b/src/test/java/org/bukkit/conversations/ConversationTest.java
@@ -2,6 +2,7 @@ package org.bukkit.conversations;
 
 import static org.junit.jupiter.api.Assertions.*;
 import org.bukkit.plugin.TestPlugin;
+import org.jetbrains.annotations.NotNull;
 import org.junit.jupiter.api.Test;
 
 /**
@@ -90,12 +91,12 @@ public class ConversationTest {
     private class FirstPrompt extends StringPrompt {
 
         @Override
-        public String getPromptText(ConversationContext context) {
+        public @NotNull String getPromptText(ConversationContext context) {
             return "FirstPrompt";
         }
 
         @Override
-        public Prompt acceptInput(ConversationContext context, String input) {
+        public @NotNull Prompt acceptInput(@NotNull ConversationContext context, String input) {
             assertEquals("FirstInput", input);
             context.setSessionData("data", 10);
             return new SecondPrompt();
@@ -110,7 +111,7 @@ public class ConversationTest {
         }
 
         @Override
-        public String getPromptText(ConversationContext context) {
+        public @NotNull String getPromptText(@NotNull ConversationContext context) {
             // Assert that session data passes from one prompt to the next
             assertEquals(context.getSessionData("data"), 10);
             return "SecondPrompt";
diff --git a/src/test/java/org/bukkit/conversations/FakeConversable.java b/src/test/java/org/bukkit/conversations/FakeConversable.java
index 567bfd7d3e45d83b5520af6ddd0140c2b84139b2..b6dea8f7c7a2f3029534e873088f26656e861340 100644
--- a/src/test/java/org/bukkit/conversations/FakeConversable.java
+++ b/src/test/java/org/bukkit/conversations/FakeConversable.java
@@ -29,7 +29,7 @@ public class FakeConversable implements Conversable {
     }
 
     @Override
-    public boolean beginConversation(Conversation conversation) {
+    public boolean beginConversation(@NotNull Conversation conversation) {
         begunConversation = conversation;
         conversation.outputNextPrompt();
         return true;
@@ -56,11 +56,11 @@ public class FakeConversable implements Conversable {
         this.sendRawMessage(message);
     }
 
-    public Server getServer() {
+    public @Nullable Server getServer() {
         return null;
     }
 
-    public String getName() {
+    public @Nullable String getName() {
         return null;
     }
 
@@ -80,19 +80,19 @@ public class FakeConversable implements Conversable {
         return false;
     }
 
-    public PermissionAttachment addAttachment(Plugin plugin, String name, boolean value) {
+    public @Nullable PermissionAttachment addAttachment(Plugin plugin, String name, boolean value) {
         return null;
     }
 
-    public PermissionAttachment addAttachment(Plugin plugin) {
+    public @Nullable PermissionAttachment addAttachment(Plugin plugin) {
         return null;
     }
 
-    public PermissionAttachment addAttachment(Plugin plugin, String name, boolean value, int ticks) {
+    public @Nullable PermissionAttachment addAttachment(Plugin plugin, String name, boolean value, int ticks) {
         return null;
     }
 
-    public PermissionAttachment addAttachment(Plugin plugin, int ticks) {
+    public @Nullable PermissionAttachment addAttachment(Plugin plugin, int ticks) {
         return null;
     }
 
@@ -104,7 +104,7 @@ public class FakeConversable implements Conversable {
 
     }
 
-    public Set<PermissionAttachmentInfo> getEffectivePermissions() {
+    public @Nullable Set<PermissionAttachmentInfo> getEffectivePermissions() {
         return null;
     }
 
diff --git a/src/test/java/org/bukkit/conversations/ValidatingPromptTest.java b/src/test/java/org/bukkit/conversations/ValidatingPromptTest.java
index 45dab3cff3985c74de7dfe6bac4851454b58a7e0..78daf069ece1681dc5b5d0729cf51421c6a731db 100644
--- a/src/test/java/org/bukkit/conversations/ValidatingPromptTest.java
+++ b/src/test/java/org/bukkit/conversations/ValidatingPromptTest.java
@@ -1,6 +1,9 @@
 package org.bukkit.conversations;
 
 import static org.junit.jupiter.api.Assertions.*;
+
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
 import org.junit.jupiter.api.Test;
 
 /**
@@ -52,13 +55,13 @@ public class ValidatingPromptTest {
         public boolean result;
 
         @Override
-        protected Prompt acceptValidatedInput(ConversationContext context, boolean input) {
+        protected @Nullable Prompt acceptValidatedInput(ConversationContext context, boolean input) {
             result = input;
             return null;
         }
 
         @Override
-        public String getPromptText(ConversationContext context) {
+        public @Nullable String getPromptText(ConversationContext context) {
             return null;
         }
     }
@@ -71,13 +74,13 @@ public class ValidatingPromptTest {
         }
 
         @Override
-        protected Prompt acceptValidatedInput(ConversationContext context, String input) {
+        protected @Nullable Prompt acceptValidatedInput(ConversationContext context, String input) {
             result = input;
             return null;
         }
 
         @Override
-        public String getPromptText(ConversationContext context) {
+        public @Nullable String getPromptText(ConversationContext context) {
             return null;
         }
     }
@@ -86,13 +89,13 @@ public class ValidatingPromptTest {
         public Number result;
 
         @Override
-        protected Prompt acceptValidatedInput(ConversationContext context, Number input) {
+        protected @Nullable Prompt acceptValidatedInput(ConversationContext context, Number input) {
             result = input;
             return null;
         }
 
         @Override
-        public String getPromptText(ConversationContext context) {
+        public @Nullable String getPromptText(ConversationContext context) {
             return null;
         }
     }
@@ -100,18 +103,18 @@ public class ValidatingPromptTest {
     private class TestRegexPrompt extends RegexPrompt {
         public String result;
 
-        public TestRegexPrompt(String pattern) {
+        public TestRegexPrompt(@NotNull String pattern) {
             super(pattern);
         }
 
         @Override
-        protected Prompt acceptValidatedInput(ConversationContext context, String input) {
+        protected @Nullable Prompt acceptValidatedInput(ConversationContext context, String input) {
             result = input;
             return null;
         }
 
         @Override
-        public String getPromptText(ConversationContext context) {
+        public @Nullable String getPromptText(ConversationContext context) {
             return null;
         }
     }
diff --git a/src/test/java/org/bukkit/event/PlayerChatTabCompleteEventTest.java b/src/test/java/org/bukkit/event/PlayerChatTabCompleteEventTest.java
index 7632eca361509426bc2f62b9d8f5ae518a0b1fe0..ea4ed93ae5fe2ea2fd6ba3f5baa2691f81a79cfe 100644
--- a/src/test/java/org/bukkit/event/PlayerChatTabCompleteEventTest.java
+++ b/src/test/java/org/bukkit/event/PlayerChatTabCompleteEventTest.java
@@ -6,6 +6,7 @@ import static org.junit.jupiter.api.Assertions.*;
 import com.google.common.collect.ImmutableList;
 import org.bukkit.event.player.PlayerChatTabCompleteEvent;
 import org.bukkit.plugin.messaging.TestPlayer;
+import org.jetbrains.annotations.NotNull;
 import org.junit.jupiter.api.Test;
 
 public class PlayerChatTabCompleteEventTest {
@@ -21,7 +22,7 @@ public class PlayerChatTabCompleteEventTest {
         assertThat(getToken(" "), is(""));
     }
 
-    private String getToken(String message) {
+    private @NotNull String getToken(@NotNull String message) {
         return new PlayerChatTabCompleteEvent(TestPlayer.getInstance(), message, ImmutableList.<String>of()).getLastToken();
     }
 }
diff --git a/src/test/java/org/bukkit/event/SyntheticEventTest.java b/src/test/java/org/bukkit/event/SyntheticEventTest.java
index eb647d0ed9d7d7d4467968f61e4a6ba13c29e14b..ee7398d8696ccea112d1ac874734bfc8b66c237e 100644
--- a/src/test/java/org/bukkit/event/SyntheticEventTest.java
+++ b/src/test/java/org/bukkit/event/SyntheticEventTest.java
@@ -5,6 +5,7 @@ import org.bukkit.plugin.PluginLoader;
 import org.bukkit.plugin.SimplePluginManager;
 import org.bukkit.plugin.TestPlugin;
 import org.bukkit.plugin.java.JavaPluginLoader;
+import org.jetbrains.annotations.NotNull;
 import org.junit.jupiter.api.Test;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
@@ -17,7 +18,7 @@ public class SyntheticEventTest {
         final JavaPluginLoader loader = new JavaPluginLoader(TestServer.getInstance());
         TestPlugin plugin = new TestPlugin(getClass().getName()) {
             @Override
-            public PluginLoader getPluginLoader() {
+            public @NotNull PluginLoader getPluginLoader() {
                 return loader;
             }
         };
diff --git a/src/test/java/org/bukkit/event/TestEvent.java b/src/test/java/org/bukkit/event/TestEvent.java
index 25904f5f8170bcfdc4b39860e4e8b5715aaf6909..8eea6110a0d61b3077fdce9c891d1cd74e67b22b 100644
--- a/src/test/java/org/bukkit/event/TestEvent.java
+++ b/src/test/java/org/bukkit/event/TestEvent.java
@@ -1,6 +1,9 @@
 package org.bukkit.event;
 
 
+import org.jetbrains.annotations.NotNull;
+
+
 public class TestEvent extends Event {
     private static final HandlerList handlers = new HandlerList();
 
@@ -9,11 +12,11 @@ public class TestEvent extends Event {
     }
 
     @Override
-    public HandlerList getHandlers() {
+    public @NotNull HandlerList getHandlers() {
         return handlers;
     }
 
-    public static HandlerList getHandlerList() {
+    public static @NotNull HandlerList getHandlerList() {
         return handlers;
     }
 }
diff --git a/src/test/java/org/bukkit/metadata/FixedMetadataValueTest.java b/src/test/java/org/bukkit/metadata/FixedMetadataValueTest.java
index 409040293a1b5125990dce0c0cffc495cf3a7fc7..0d5b91b447f445f98fd50102d9197d9ebed4646c 100644
--- a/src/test/java/org/bukkit/metadata/FixedMetadataValueTest.java
+++ b/src/test/java/org/bukkit/metadata/FixedMetadataValueTest.java
@@ -2,13 +2,14 @@ package org.bukkit.metadata;
 
 import org.bukkit.plugin.Plugin;
 import org.bukkit.plugin.TestPlugin;
+import org.jetbrains.annotations.NotNull;
 import org.junit.jupiter.api.Test;
 
 import static org.junit.jupiter.api.Assertions.*;
 
 
 public class FixedMetadataValueTest {
-    private Plugin plugin = new TestPlugin("X");
+    private @NotNull Plugin plugin = new TestPlugin("X");
     private FixedMetadataValue subject;
 
     @Test
diff --git a/src/test/java/org/bukkit/metadata/LazyMetadataValueTest.java b/src/test/java/org/bukkit/metadata/LazyMetadataValueTest.java
index d8902fecc3b82e9d18638453d6f9f32c60be7ffa..9828f14006e2cd5389723bff2e51f64908d392ec 100644
--- a/src/test/java/org/bukkit/metadata/LazyMetadataValueTest.java
+++ b/src/test/java/org/bukkit/metadata/LazyMetadataValueTest.java
@@ -3,11 +3,12 @@ package org.bukkit.metadata;
 import static org.junit.jupiter.api.Assertions.*;
 import java.util.concurrent.Callable;
 import org.bukkit.plugin.TestPlugin;
+import org.jetbrains.annotations.NotNull;
 import org.junit.jupiter.api.Test;
 
 public class LazyMetadataValueTest {
     private LazyMetadataValue subject;
-    private TestPlugin plugin = new TestPlugin("x");
+    private @NotNull TestPlugin plugin = new TestPlugin("x");
 
     @org.junit.jupiter.api.Test
     public void testLazyInt() {
@@ -59,7 +60,7 @@ public class LazyMetadataValueTest {
         final int value = 10;
         subject = new LazyMetadataValue(plugin, LazyMetadataValue.CacheStrategy.CACHE_AFTER_FIRST_EVAL, new Callable<Object>() {
             @Override
-            public Object call() throws Exception {
+            public @NotNull Object call() throws Exception {
                 counter.increment();
                 return value;
             }
@@ -81,7 +82,7 @@ public class LazyMetadataValueTest {
         final int value = 10;
         subject = new LazyMetadataValue(plugin, LazyMetadataValue.CacheStrategy.NEVER_CACHE, new Callable<Object>() {
             @Override
-            public Object call() throws Exception {
+            public @NotNull Object call() throws Exception {
                 counter.increment();
                 return value;
             }
@@ -99,7 +100,7 @@ public class LazyMetadataValueTest {
         final int value = 10;
         subject = new LazyMetadataValue(plugin, LazyMetadataValue.CacheStrategy.CACHE_ETERNALLY, new Callable<Object>() {
             @Override
-            public Object call() throws Exception {
+            public @NotNull Object call() throws Exception {
                 counter.increment();
                 return value;
             }
@@ -116,7 +117,7 @@ public class LazyMetadataValueTest {
         assertEquals(1, counter.value());
     }
 
-    private LazyMetadataValue makeSimpleCallable(final Object value) {
+    private @NotNull LazyMetadataValue makeSimpleCallable(final @NotNull Object value) {
         return new LazyMetadataValue(plugin, new Callable<Object>() {
             @Override
             public Object call() throws Exception {
diff --git a/src/test/java/org/bukkit/metadata/MetadataConversionTest.java b/src/test/java/org/bukkit/metadata/MetadataConversionTest.java
index 4fda0b5667b9dc5241d95d1e7a4830e99366d0d9..00ede6e0af7eea7c21309da937fd7b82b0de7339 100644
--- a/src/test/java/org/bukkit/metadata/MetadataConversionTest.java
+++ b/src/test/java/org/bukkit/metadata/MetadataConversionTest.java
@@ -18,12 +18,13 @@ package org.bukkit.metadata;
 import static org.junit.jupiter.api.Assertions.*;
 import org.bukkit.plugin.Plugin;
 import org.bukkit.plugin.TestPlugin;
+import org.jetbrains.annotations.NotNull;
 import org.junit.jupiter.api.Test;
 
 /**
  */
 public class MetadataConversionTest {
-    private Plugin plugin = new TestPlugin("x");
+    private @NotNull Plugin plugin = new TestPlugin("x");
     private FixedMetadataValue subject;
 
     private void setSubject(Object value) {
diff --git a/src/test/java/org/bukkit/metadata/MetadataStoreTest.java b/src/test/java/org/bukkit/metadata/MetadataStoreTest.java
index d9bfa92c20be27540c4d8a9771738449498f6465..d1573333c35b9fbe6f935377d29c280c05cd6e7a 100644
--- a/src/test/java/org/bukkit/metadata/MetadataStoreTest.java
+++ b/src/test/java/org/bukkit/metadata/MetadataStoreTest.java
@@ -5,13 +5,14 @@ import java.util.List;
 import java.util.concurrent.Callable;
 import org.bukkit.plugin.Plugin;
 import org.bukkit.plugin.TestPlugin;
+import org.jetbrains.annotations.NotNull;
 import org.junit.jupiter.api.Test;
 
 public class MetadataStoreTest {
-    private Plugin pluginX = new TestPlugin("x");
-    private Plugin pluginY = new TestPlugin("y");
+    private @NotNull Plugin pluginX = new TestPlugin("x");
+    private @NotNull Plugin pluginY = new TestPlugin("y");
 
-    StringMetadataStore subject = new StringMetadataStore();
+    @NotNull StringMetadataStore subject = new StringMetadataStore();
 
     @Test
     public void testMetadataStore() {
@@ -35,7 +36,7 @@ public class MetadataStoreTest {
 
         subject.setMetadata("subject", "key", new LazyMetadataValue(pluginX, new Callable<Object>() {
             @Override
-            public Object call() throws Exception {
+            public @NotNull Object call() throws Exception {
                 counter.increment();
                 return 10;
             }
@@ -54,7 +55,7 @@ public class MetadataStoreTest {
 
         subject.setMetadata("subject", "key", new LazyMetadataValue(pluginX, new Callable<Object>() {
             @Override
-            public Object call() throws Exception {
+            public @NotNull Object call() throws Exception {
                 counter.increment();
                 return 10;
             }
@@ -122,7 +123,7 @@ public class MetadataStoreTest {
 
     private class StringMetadataStore extends MetadataStoreBase<String> implements MetadataStore<String> {
         @Override
-        protected String disambiguate(String subject, String metadataKey) {
+        protected @NotNull String disambiguate(String subject, String metadataKey) {
             return subject + ":" + metadataKey;
         }
     }
diff --git a/src/test/java/org/bukkit/metadata/MetadataValueAdapterTest.java b/src/test/java/org/bukkit/metadata/MetadataValueAdapterTest.java
index a92ba625966e9b1a0521a0ea018e2ff1c16c0bb3..e8a40b36705ce0eeaaa2d4b1a74bd438bcd5cb61 100644
--- a/src/test/java/org/bukkit/metadata/MetadataValueAdapterTest.java
+++ b/src/test/java/org/bukkit/metadata/MetadataValueAdapterTest.java
@@ -3,10 +3,11 @@ package org.bukkit.metadata;
 import static org.junit.jupiter.api.Assertions.*;
 import org.bukkit.plugin.Plugin;
 import org.bukkit.plugin.TestPlugin;
+import org.jetbrains.annotations.NotNull;
 import org.junit.jupiter.api.Test;
 
 public class MetadataValueAdapterTest {
-    private TestPlugin plugin = new TestPlugin("x");
+    private @NotNull TestPlugin plugin = new TestPlugin("x");
 
     @Test
     public void testAdapterBasics() {
@@ -71,7 +72,7 @@ public class MetadataValueAdapterTest {
      * @param value the value to wrap
      * @return the fixed value
      */
-    private MetadataValue simpleValue(Object value) {
+    private @NotNull MetadataValue simpleValue(Object value) {
         return new FixedMetadataValue(plugin, value);
     }
 
@@ -86,7 +87,7 @@ public class MetadataValueAdapterTest {
     class IncrementingMetaValue extends MetadataValueAdapter {
         private int internalValue = 0;
 
-        protected IncrementingMetaValue(Plugin owningPlugin) {
+        protected IncrementingMetaValue(@NotNull Plugin owningPlugin) {
             super(owningPlugin);
         }
 
diff --git a/src/test/java/org/bukkit/plugin/PluginManagerTest.java b/src/test/java/org/bukkit/plugin/PluginManagerTest.java
index b10a0e32c3064eeb42a75331283792fa5330f233..5b85202328a80c30e7d47640acb7eaa5f0140228 100644
--- a/src/test/java/org/bukkit/plugin/PluginManagerTest.java
+++ b/src/test/java/org/bukkit/plugin/PluginManagerTest.java
@@ -7,12 +7,14 @@ import org.bukkit.TestServer;
 import org.bukkit.event.Event;
 import org.bukkit.event.TestEvent;
 import org.bukkit.permissions.Permission;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
 import org.junit.jupiter.api.AfterEach;
 import org.junit.jupiter.api.Test;
 
 public class PluginManagerTest {
     private class MutableObject {
-        volatile Object value = null;
+        volatile @Nullable Object value = null;
     }
 
     private static final PluginManager pm = TestServer.getInstance().getPluginManager();
@@ -161,7 +163,7 @@ public class PluginManagerTest {
         this.testRemovePermissionByPermission("CaMeL");
     }
 
-    private void testRemovePermissionByName(final String name) {
+    private void testRemovePermissionByName(final @NotNull String name) {
         final Permission perm = new Permission(name);
         pm.addPermission(perm);
         assertThat("Permission \"" + name + "\" was not added", pm.getPermission(name), is(perm));
@@ -169,7 +171,7 @@ public class PluginManagerTest {
         assertThat("Permission \"" + name + "\" was not removed", pm.getPermission(name), is(nullValue()));
     }
 
-    private void testRemovePermissionByPermission(final String name) {
+    private void testRemovePermissionByPermission(final @NotNull String name) {
         final Permission perm = new Permission(name);
         pm.addPermission(perm);
         assertThat("Permission \"" + name + "\" was not added", pm.getPermission(name), is(perm));
diff --git a/src/test/java/org/bukkit/plugin/TestPlugin.java b/src/test/java/org/bukkit/plugin/TestPlugin.java
index a8be3e23e3e280ad301d9530de50028515612966..ea581690bde4c5f49c357d688c44a77eb6ad470b 100644
--- a/src/test/java/org/bukkit/plugin/TestPlugin.java
+++ b/src/test/java/org/bukkit/plugin/TestPlugin.java
@@ -9,6 +9,8 @@ import org.bukkit.command.CommandSender;
 import org.bukkit.configuration.file.FileConfiguration;
 import org.bukkit.generator.BiomeProvider;
 import org.bukkit.generator.ChunkGenerator;
+import org.jetbrains.annotations.NotNull;
+
 
 public class TestPlugin extends PluginBase {
     private boolean enabled = true;
@@ -24,17 +26,17 @@ public class TestPlugin extends PluginBase {
     }
 
     @Override
-    public File getDataFolder() {
+    public @NotNull File getDataFolder() {
         throw new UnsupportedOperationException("Not supported.");
     }
 
     @Override
-    public PluginDescriptionFile getDescription() {
+    public @NotNull PluginDescriptionFile getDescription() {
         return new PluginDescriptionFile(pluginName, "1.0", "test.test");
     }
 
     @Override
-    public FileConfiguration getConfig() {
+    public @NotNull FileConfiguration getConfig() {
         throw new UnsupportedOperationException("Not supported.");
     }
 
@@ -64,17 +66,17 @@ public class TestPlugin extends PluginBase {
     }
 
     @Override
-    public PluginLogger getLogger() {
+    public @NotNull PluginLogger getLogger() {
         throw new UnsupportedOperationException("Not supported.");
     }
 
     @Override
-    public PluginLoader getPluginLoader() {
+    public @NotNull PluginLoader getPluginLoader() {
         throw new UnsupportedOperationException("Not supported.");
     }
 
     @Override
-    public Server getServer() {
+    public @NotNull Server getServer() {
         throw new UnsupportedOperationException("Not supported.");
     }
 
diff --git a/src/test/java/org/bukkit/plugin/messaging/StandardMessengerTest.java b/src/test/java/org/bukkit/plugin/messaging/StandardMessengerTest.java
index e921c4df99b2ae4eefde19bfe39c5dcf16ffc788..01f06f77a455d4016956ee9c4a842e8cbdb950c9 100644
--- a/src/test/java/org/bukkit/plugin/messaging/StandardMessengerTest.java
+++ b/src/test/java/org/bukkit/plugin/messaging/StandardMessengerTest.java
@@ -7,15 +7,16 @@ import static org.junit.jupiter.api.Assertions.*;
 import java.util.Collection;
 import org.bukkit.entity.Player;
 import org.bukkit.plugin.TestPlugin;
+import org.jetbrains.annotations.NotNull;
 import org.junit.jupiter.api.Test;
 
 public class StandardMessengerTest {
-    public StandardMessenger getMessenger() {
+    public @NotNull StandardMessenger getMessenger() {
         return new StandardMessenger();
     }
 
     private int count = 0;
-    public TestPlugin getPlugin() {
+    public @NotNull TestPlugin getPlugin() {
         return new TestPlugin("" + count++);
     }
 
@@ -298,7 +299,7 @@ public class StandardMessengerTest {
         assertEquals("BungeeCord", StandardMessenger.validateAndCorrectChannel("bungeecord:main"));
     }
 
-    private static <T> void assertEquals2Collection(Collection<T> actual, T... expected) {
+    private static <T> void assertEquals2Collection(@NotNull Collection<T> actual, T @NotNull ... expected) {
         assertThat("Size of the array", actual.size(), is(expected.length));
         assertThat(actual, hasItems(expected));
     }
diff --git a/src/test/java/org/bukkit/plugin/messaging/TestPlayer.java b/src/test/java/org/bukkit/plugin/messaging/TestPlayer.java
index 1b7642dc1c55c6bf87018b67d8c368478c0b9ca1..cbd4ced912ba80ef1669711b9720b28baf18a30e 100644
--- a/src/test/java/org/bukkit/plugin/messaging/TestPlayer.java
+++ b/src/test/java/org/bukkit/plugin/messaging/TestPlayer.java
@@ -6,13 +6,14 @@ import java.lang.reflect.Method;
 import java.lang.reflect.Proxy;
 import java.util.HashMap;
 import org.bukkit.entity.Player;
+import org.jetbrains.annotations.NotNull;
 
 
 public final class TestPlayer implements InvocationHandler {
     private static interface MethodHandler {
         Object handle(TestPlayer server, Object[] args);
     }
-    private static final Constructor<? extends Player> constructor;
+    private static final @NotNull Constructor<? extends Player> constructor;
     private static final HashMap<Method, MethodHandler> methods = new HashMap<Method, MethodHandler>();
     static {
         try {
@@ -31,7 +32,7 @@ public final class TestPlayer implements InvocationHandler {
 
     private TestPlayer() {};
 
-    public static Player getInstance() {
+    public static @NotNull Player getInstance() {
         try {
             return constructor.newInstance(new TestPlayer());
         } catch (Throwable t) {
diff --git a/src/test/java/org/bukkit/util/StringUtilStartsWithTest.java b/src/test/java/org/bukkit/util/StringUtilStartsWithTest.java
index 0086ac516acca1893fb559a08a0e162e18e286a9..6cabe063f6f76ff3ed511206a7ed4af7c697c47b 100644
--- a/src/test/java/org/bukkit/util/StringUtilStartsWithTest.java
+++ b/src/test/java/org/bukkit/util/StringUtilStartsWithTest.java
@@ -1,5 +1,6 @@
 package org.bukkit.util;
 
+import org.jetbrains.annotations.NotNull;
 import org.junit.jupiter.params.ParameterizedTest;
 import org.junit.jupiter.params.provider.MethodSource;
 
@@ -11,7 +12,7 @@ import static org.hamcrest.Matchers.is;
 public class StringUtilStartsWithTest {
 
     @ParameterizedTest(name = "{index}: {0} startsWith {1} == {2}")
-    public static Stream<Object[]> data() {
+    public static @NotNull Stream<Object[]> data() {
         return Stream.of(
             new Object[] {
                 "Apple",
@@ -68,7 +69,7 @@ public class StringUtilStartsWithTest {
 
     @ParameterizedTest
     @MethodSource("data")
-    public void testFor(String base, String prefix, boolean result) {
+    public void testFor(@NotNull String base, @NotNull String prefix, boolean result) {
         assertThat(base + " starts with " + prefix + ": " + result, StringUtil.startsWithIgnoreCase(base, prefix), is(result));
     }
 }
diff --git a/src/test/java/org/bukkit/util/io/BukkitObjectStreamTest.java b/src/test/java/org/bukkit/util/io/BukkitObjectStreamTest.java
index 765035a77081a7da6ce509dd425a0e9e79b3b724..0652f3a62caa6dcb3e2a29b7f8235fad00e90faa 100644
--- a/src/test/java/org/bukkit/util/io/BukkitObjectStreamTest.java
+++ b/src/test/java/org/bukkit/util/io/BukkitObjectStreamTest.java
@@ -6,6 +6,7 @@ import org.bukkit.FireworkEffect;
 import org.bukkit.FireworkEffect.Type;
 import org.bukkit.configuration.serialization.ConfigurationSerializable;
 import org.bukkit.util.Vector;
+import org.jetbrains.annotations.NotNull;
 import org.junit.jupiter.api.Disabled;
 import org.junit.jupiter.params.ParameterizedTest;
 import org.junit.jupiter.params.provider.MethodSource;
@@ -21,7 +22,7 @@ import static org.hamcrest.Matchers.is;
 public class BukkitObjectStreamTest {
 
     @ParameterizedTest(name = "{index}: {0}")
-    public static Stream<Object[]> data() {
+    public static @NotNull Stream<Object[]> data() {
         return Stream.of(
             new Object[] {
                 Color.class.getName(),
@@ -69,7 +70,7 @@ public class BukkitObjectStreamTest {
 
     @ParameterizedTest
     @MethodSource("data")
-    public void checkSerlialization(String className, String preEncoded, List<ConfigurationSerializable> object) throws Throwable {
+    public void checkSerlialization(String className, @NotNull String preEncoded, List<ConfigurationSerializable> object) throws Throwable {
         // If this test fails, you may start your trek to debug by commenting the '@Ignore' on the next method
         // (and of course, you would read those comments too)
         final ByteArrayOutputStream out = new ByteArrayOutputStream();
