From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: camdenorrb <me@12oclock.dev>
Date: Sat, 26 Nov 2022 05:11:28 -0600
Subject: [PATCH] Make final


diff --git a/src/main/java/co/aikar/timings/FullServerTickHandler.java b/src/main/java/co/aikar/timings/FullServerTickHandler.java
index 6beb702449fde74f7df0182ca3d8ac3139024513..45567114a96b26f0756784aeb4bad51040dd6f99 100644
--- a/src/main/java/co/aikar/timings/FullServerTickHandler.java
+++ b/src/main/java/co/aikar/timings/FullServerTickHandler.java
@@ -36,8 +36,8 @@ public class FullServerTickHandler extends TimingHandler {
         }
         if (TimingHistory.timedTicks % 20 == 0) {
             final Runtime runtime = Runtime.getRuntime();
-            double usedMemory = runtime.totalMemory() - runtime.freeMemory();
-            double freeMemory = runtime.maxMemory() - usedMemory;
+            final double usedMemory = runtime.totalMemory() - runtime.freeMemory();
+            final double freeMemory = runtime.maxMemory() - usedMemory;
             if (this.avgFreeMemory == -1) {
                 this.avgFreeMemory = freeMemory;
             } else {
@@ -51,9 +51,9 @@ public class FullServerTickHandler extends TimingHandler {
             }
         }
 
-        long start = System.nanoTime();
+        final long start = System.nanoTime();
         TimingsManager.tick();
-        long diff = System.nanoTime() - start;
+        final long diff = System.nanoTime() - start;
         TIMINGS_TICK.addDiff(diff, null);
         // addDiff for TIMINGS_TICK incremented this, bring it back down to 1 per tick.
         record.setCurTickCount(record.getCurTickCount()-1);
@@ -61,7 +61,7 @@ public class FullServerTickHandler extends TimingHandler {
         minuteData.setCurTickTotal(record.getCurTickTotal());
         minuteData.setCurTickCount(1);
 
-        boolean violated = isViolated();
+        final boolean violated = isViolated();
         minuteData.processTick(violated);
         TIMINGS_TICK.processTick(violated);
         processTick(violated);
diff --git a/src/main/java/co/aikar/timings/TimedEventExecutor.java b/src/main/java/co/aikar/timings/TimedEventExecutor.java
index 0dea21f8cbd26a2fdf47f911cb9bdeaa8febf5b6..16269f35c66e2e8ce19695578370dd7121ff1cfc 100644
--- a/src/main/java/co/aikar/timings/TimedEventExecutor.java
+++ b/src/main/java/co/aikar/timings/TimedEventExecutor.java
@@ -47,9 +47,9 @@ public class TimedEventExecutor implements EventExecutor {
      * @param method EventHandler method
      * @param eventClass Owning class
      */
-    public TimedEventExecutor(@NotNull EventExecutor executor, @NotNull Plugin plugin, @Nullable Method method, @NotNull Class<? extends Event> eventClass) {
+    public TimedEventExecutor(@NotNull final EventExecutor executor, @NotNull final Plugin plugin, @Nullable Method method, @NotNull final Class<? extends Event> eventClass) {
         this.executor = executor;
-        String id;
+        final String id;
 
         if (method == null) {
             if (executor.getClass().getEnclosingClass() != null) { // Oh Skript, how we love you
@@ -65,18 +65,18 @@ public class TimedEventExecutor implements EventExecutor {
 
 
         final String eventName = eventClass.getSimpleName();
-        boolean verbose = "BlockPhysicsEvent".equals(eventName);
+        final boolean verbose = "BlockPhysicsEvent".equals(eventName);
         this.timings = Timings.ofSafe(plugin, (verbose ? "## " : "") +
             "Event: " + id + " (" + eventName + ")");
     }
 
     @Override
-    public void execute(@NotNull Listener listener, @NotNull Event event) throws EventException {
+    public void execute(@NotNull final Listener listener, @NotNull final Event event) throws EventException {
         if (event.isAsynchronous() || !Timings.timingsEnabled || !Bukkit.isPrimaryThread()) {
             executor.execute(listener, event);
             return;
         }
-        try (Timing ignored = timings.startTiming()){
+        try (final Timing ignored = timings.startTiming()){
             executor.execute(listener, event);
         }
     }
diff --git a/src/main/java/co/aikar/timings/TimingData.java b/src/main/java/co/aikar/timings/TimingData.java
index c122a2e2994f2dcff9a06244dfe7738e26ec3344..b77abbef525640cf214ea52d2439d54319fc2a0e 100644
--- a/src/main/java/co/aikar/timings/TimingData.java
+++ b/src/main/java/co/aikar/timings/TimingData.java
@@ -42,11 +42,11 @@ class TimingData {
     private int curTickCount = 0;
     private long curTickTotal = 0;
 
-    TimingData(int id) {
+    TimingData(final int id) {
         this.id = id;
     }
 
-    private TimingData(@NotNull TimingData data) {
+    private TimingData(@NotNull final TimingData data) {
         this.id = data.id;
         this.totalTime = data.totalTime;
         this.lagTotalTime = data.lagTotalTime;
@@ -54,12 +54,12 @@ class TimingData {
         this.lagCount = data.lagCount;
     }
 
-    void add(long diff) {
+    void add(final long diff) {
         ++curTickCount;
         curTickTotal += diff;
     }
 
-    void processTick(boolean violated) {
+    void processTick(final boolean violated) {
         totalTime += curTickTotal;
         count += curTickCount;
         if (violated) {
@@ -85,7 +85,7 @@ class TimingData {
 
     @NotNull
     List<Object> export() {
-        List<Object> list = toArray(
+        final List<Object> list = toArray(
 	        Integer.valueOf(id),
 	        Integer.valueOf(count),
 	        Long.valueOf(totalTime));
@@ -108,7 +108,7 @@ class TimingData {
         return curTickCount;
     }
 
-    void setCurTickCount(int curTickCount) {
+    void setCurTickCount(final int curTickCount) {
         this.curTickCount = curTickCount;
     }
 
@@ -116,7 +116,7 @@ class TimingData {
         return curTickTotal;
     }
 
-    void setCurTickTotal(long curTickTotal) {
+    void setCurTickTotal(final long curTickTotal) {
         this.curTickTotal = curTickTotal;
     }
 }
diff --git a/src/main/java/co/aikar/timings/TimingHandler.java b/src/main/java/co/aikar/timings/TimingHandler.java
index c2bcf325dc6c2073f325d0eff9be3d046ad90288..c6a837a90a00b49136ffe717f1d989cebdec4326 100644
--- a/src/main/java/co/aikar/timings/TimingHandler.java
+++ b/src/main/java/co/aikar/timings/TimingHandler.java
@@ -57,7 +57,7 @@ class TimingHandler implements Timing {
     private boolean timed;
     private boolean enabled;
 
-    TimingHandler(@NotNull TimingIdentifier id) {
+    TimingHandler(@NotNull final TimingIdentifier id) {
         this.identifier = id;
         this.verbose = id.name.startsWith("##");
         this.record = new TimingData(this.id);
@@ -71,7 +71,7 @@ class TimingHandler implements Timing {
         enabled = Timings.timingsEnabled && (!verbose || Timings.verboseEnabled);
     }
 
-    void processTick(boolean violated) {
+    void processTick(final boolean violated) {
         if (timingDepth != 0 || record.getCurTickCount() == 0) {
             timingDepth = 0;
             start = 0;
@@ -79,7 +79,7 @@ class TimingHandler implements Timing {
         }
 
         record.processTick(violated);
-        for (TimingData handler : children.values()) {
+        for (final TimingData handler : children.values()) {
             handler.processTick(violated);
         }
     }
@@ -132,7 +132,7 @@ class TimingHandler implements Timing {
                 Logger.getGlobal().log(Level.SEVERE, "TIMING_STACK_CORRUPTION - Report this to the plugin " + last.identifier.group + " (Look for errors above this in the logs) (" + last.identifier + " did not stopTiming)", new Throwable());
             }
 
-            boolean found = TIMING_STACK.contains(this);
+            final boolean found = TIMING_STACK.contains(this);
             if (!found) {
                 // We aren't even in the stack... Don't pop everything
                 TIMING_STACK.addLast(last);
@@ -146,7 +146,7 @@ class TimingHandler implements Timing {
 
     }
 
-    void addDiff(long diff, @Nullable TimingHandler parent) {
+    void addDiff(final long diff, @Nullable final TimingHandler parent) {
         if (parent != null) {
             parent.children.get(id).add(diff);
         }
@@ -166,7 +166,7 @@ class TimingHandler implements Timing {
     /**
      * Reset this timer, setting all values to zero.
      */
-    void reset(boolean full) {
+    void reset(final boolean full) {
         record.reset();
         if (full) {
             timed = false;
@@ -185,7 +185,7 @@ class TimingHandler implements Timing {
     }
 
     @Override
-    public boolean equals(Object o) {
+    public boolean equals(final Object o) {
         return (this == o);
     }
 
@@ -218,7 +218,7 @@ class TimingHandler implements Timing {
     TimingData @NotNull [] cloneChildren() {
         final TimingData[] clonedChildren = new TimingData[children.size()];
         int i = 0;
-        for (TimingData child : children.values()) {
+        for (final TimingData child : children.values()) {
             clonedChildren[i++] = child.clone();
         }
         return clonedChildren;
diff --git a/src/main/java/co/aikar/timings/TimingHistory.java b/src/main/java/co/aikar/timings/TimingHistory.java
index 49186b4fcb81b284cebb57052b208bc8c17a4be6..9d7d7358fa39b9dbf8981098bc924ba4ba76a5a5 100644
--- a/src/main/java/co/aikar/timings/TimingHistory.java
+++ b/src/main/java/co/aikar/timings/TimingHistory.java
@@ -62,7 +62,7 @@ public class TimingHistory {
     static @NotNull Map<String, Integer> worldMap = LoadingMap.newHashMap(new Function<String, Integer>() {
         @NotNull
         @Override
-        public Integer apply(@Nullable String input) {
+        public Integer apply(@Nullable final String input) {
             return Integer.valueOf(worldIdPool++);
         }
     });
@@ -87,7 +87,7 @@ public class TimingHistory {
             this.minuteReports = MINUTE_REPORTS.toArray(new MinuteReport[0]);
         }
         long ticks = 0;
-        for (MinuteReport mp : this.minuteReports) {
+        for (final MinuteReport mp : this.minuteReports) {
             ticks += mp.ticksRecord.timed;
         }
         this.totalTicks = ticks;
@@ -95,7 +95,7 @@ public class TimingHistory {
         this.entries = new TimingHistoryEntry[TimingsManager.HANDLERS.size()];
 
         int i = 0;
-        for (TimingHandler handler : TimingsManager.HANDLERS) {
+        for (final TimingHandler handler : TimingsManager.HANDLERS) {
             entries[i++] = new TimingHistoryEntry(handler);
         }
 
@@ -104,13 +104,13 @@ public class TimingHistory {
         this.worlds = toObjectMapper(Bukkit.getWorlds(), new Function<World, JSONPair>() {
             @NotNull
             @Override
-            public JSONPair apply(@NotNull World world) {
-                Map<RegionId, RegionData> regions = LoadingMap.newHashMap(RegionData.LOADER);
+            public JSONPair apply(@NotNull final World world) {
+                final Map<RegionId, RegionData> regions = LoadingMap.newHashMap(RegionData.LOADER);
 
-                for (Chunk chunk : world.getLoadedChunks()) {
-                    RegionData data = regions.get(new RegionId(chunk.getX(), chunk.getZ()));
+                for (final Chunk chunk : world.getLoadedChunks()) {
+                    final RegionData data = regions.get(new RegionId(chunk.getX(), chunk.getZ()));
 
-                    for (Entity entity : chunk.getEntities()) {
+                    for (final Entity entity : chunk.getEntities()) {
                         if (entity == null) {
                             Bukkit.getLogger().warning("Null entity detected in chunk at position x: " + chunk.getX() + ", z: " + chunk.getZ());
                             continue;
@@ -119,7 +119,7 @@ public class TimingHistory {
                         data.entityCounts.get(entity.getType()).increment();
                     }
 
-                    for (BlockState tileEntity : chunk.getTileEntities(false)) {
+                    for (final BlockState tileEntity : chunk.getTileEntities(false)) {
                         if (tileEntity == null) {
                             Bukkit.getLogger().warning("Null tileentity detected in chunk at position x: " + chunk.getX() + ", z: " + chunk.getZ());
                             continue;
@@ -133,7 +133,7 @@ public class TimingHistory {
                     toArrayMapper(regions.values(),new Function<RegionData, Object>() {
                         @NotNull
                         @Override
-                        public Object apply(@NotNull RegionData input) {
+                        public Object apply(@NotNull final RegionData input) {
                             return toArray(
                                 Integer.valueOf(input.regionId.x),
                                 Integer.valueOf(input.regionId.z),
@@ -141,7 +141,7 @@ public class TimingHistory {
                                     new Function<Map.Entry<EntityType, Counter>, JSONPair>() {
                                         @NotNull
                                         @Override
-                                        public JSONPair apply(Map.@NotNull Entry<EntityType, Counter> entry) {
+                                        public JSONPair apply(final Map.@NotNull Entry<EntityType, Counter> entry) {
                                             entityTypeSet.add(entry.getKey());
                                             return pair(
                                                     String.valueOf(entry.getKey().ordinal()),
@@ -154,7 +154,7 @@ public class TimingHistory {
                                     new Function<Map.Entry<Material, Counter>, JSONPair>() {
                                         @NotNull
                                         @Override
-                                        public JSONPair apply(Map.@NotNull Entry<Material, Counter> entry) {
+                                        public JSONPair apply(final Map.@NotNull Entry<Material, Counter> entry) {
                                             tileEntityTypeSet.add(entry.getKey());
                                             return pair(
                                                     String.valueOf(entry.getKey().ordinal()),
@@ -176,16 +176,16 @@ public class TimingHistory {
         static @NotNull Function<RegionId, RegionData> LOADER = new Function<RegionId, RegionData>() {
             @NotNull
             @Override
-            public RegionData apply(@NotNull RegionId id) {
+            public RegionData apply(@NotNull final RegionId id) {
                 return new RegionData(id);
             }
         };
-        RegionData(@NotNull RegionId id) {
+        RegionData(@NotNull final RegionId id) {
             this.regionId = id;
         }
 
         @Override
-        public boolean equals(@Nullable Object o) {
+        public boolean equals(@Nullable final Object o) {
             if (this == o) {
                 return true;
             }
@@ -193,7 +193,7 @@ public class TimingHistory {
                 return false;
             }
 
-            RegionData that = (RegionData) o;
+            final RegionData that = (RegionData) o;
 
             return regionId.equals(that.regionId);
 
@@ -216,18 +216,18 @@ public class TimingHistory {
         static class RegionId {
             final int x, z;
             final long regionId;
-            RegionId(int x, int z) {
+            RegionId(final int x, final int z) {
                 this.x = x >> 5 << 5;
                 this.z = z >> 5 << 5;
                 this.regionId = ((long) (this.x) << 32) + (this.z >> 5 << 5) - Integer.MIN_VALUE;
             }
 
             @Override
-            public boolean equals(@Nullable Object o) {
+            public boolean equals(@Nullable final Object o) {
                 if (this == o) return true;
                 if (o == null || getClass() != o.getClass()) return false;
 
-                RegionId regionId1 = (RegionId) o;
+                final RegionId regionId1 = (RegionId) o;
 
                 return regionId == regionId1.regionId;
 
@@ -239,7 +239,7 @@ public class TimingHistory {
             }
         }
     }
-    static void resetTicks(boolean fullReset) {
+    static void resetTicks(final boolean fullReset) {
         if (fullReset) {
             // Non full is simply for 1 minute reports
             timedTicks = 0;
@@ -262,8 +262,8 @@ public class TimingHistory {
             pair("h", toArrayMapper(entries, new Function<TimingHistoryEntry, Object>() {
                 @Nullable
                 @Override
-                public Object apply(@NotNull TimingHistoryEntry entry) {
-                    TimingData record = entry.data;
+                public Object apply(@NotNull final TimingHistoryEntry entry) {
+                    final TimingData record = entry.data;
                     if (!record.hasData()) {
                         return null;
                     }
@@ -273,7 +273,7 @@ public class TimingHistory {
             pair("mp", toArrayMapper(minuteReports, new Function<MinuteReport, Object>() {
                 @NotNull
                 @Override
-                public Object apply(@NotNull MinuteReport input) {
+                public Object apply(@NotNull final MinuteReport input) {
                     return input.export();
                 }
             }))
@@ -334,7 +334,7 @@ public class TimingHistory {
         PingRecord() {
             final Collection<? extends Player> onlinePlayers = Bukkit.getOnlinePlayers();
             int totalPing = 0;
-            for (Player player : onlinePlayers) {
+            for (final Player player : onlinePlayers) {
                 totalPing += player.spigot().getPing();
             }
             avg = onlinePlayers.isEmpty() ? 0 : totalPing / onlinePlayers.size();
diff --git a/src/main/java/co/aikar/timings/TimingHistoryEntry.java b/src/main/java/co/aikar/timings/TimingHistoryEntry.java
index 7b48643ce77402190d683d9784f4d466c5419256..d6d2468b524f63767cc332a298d4acb7fdd03ec7 100644
--- a/src/main/java/co/aikar/timings/TimingHistoryEntry.java
+++ b/src/main/java/co/aikar/timings/TimingHistoryEntry.java
@@ -34,20 +34,20 @@ class TimingHistoryEntry {
     final @NotNull TimingData data;
     private final TimingData @NotNull [] children;
 
-    TimingHistoryEntry(@NotNull TimingHandler handler) {
+    TimingHistoryEntry(@NotNull final TimingHandler handler) {
         this.data = handler.record.clone();
         children = handler.cloneChildren();
     }
 
     @NotNull
     List<Object> export() {
-        List<Object> result = data.export();
+        final List<Object> result = data.export();
         if (children.length > 0) {
             result.add(
                 toArrayMapper(children, new Function<TimingData, Object>() {
                     @NotNull
                     @Override
-                    public Object apply(@NotNull TimingData child) {
+                    public Object apply(@NotNull final TimingData child) {
                         return child.export();
                     }
                 })
diff --git a/src/main/java/co/aikar/timings/TimingIdentifier.java b/src/main/java/co/aikar/timings/TimingIdentifier.java
index ffadb5b4acb1da6524a7a5589ff93988410e15ad..64e00d33851f3b299f02615c838ae57aff22d9b2 100644
--- a/src/main/java/co/aikar/timings/TimingIdentifier.java
+++ b/src/main/java/co/aikar/timings/TimingIdentifier.java
@@ -51,7 +51,7 @@ final class TimingIdentifier {
     final @Nullable TimingHandler groupHandler;
     private final int hashCode;
 
-    TimingIdentifier(@Nullable String group, @NotNull String name, @Nullable Timing groupHandler) {
+    TimingIdentifier(@Nullable final String group, @NotNull final String name, @Nullable final Timing groupHandler) {
         this.group = group != null ? group: DEFAULT_GROUP.name;
         this.name = name;
         this.groupHandler = groupHandler != null ? groupHandler.getTimingHandler() : null;
@@ -59,7 +59,7 @@ final class TimingIdentifier {
     }
 
     @NotNull
-    static TimingGroup getGroup(@Nullable String groupName) {
+    static TimingGroup getGroup(@Nullable final String groupName) {
         if (groupName == null) {
             //noinspection ConstantConditions
             return DEFAULT_GROUP;
@@ -69,12 +69,12 @@ final class TimingIdentifier {
     }
 
     @Override
-    public boolean equals(@Nullable Object o) {
+    public boolean equals(@Nullable final Object o) {
         if (o == null) {
             return false;
         }
 
-        TimingIdentifier that = (TimingIdentifier) o;
+        final TimingIdentifier that = (TimingIdentifier) o;
         return Objects.equals(group, that.group) && Objects.equals(name, that.name);
     }
 
@@ -96,15 +96,15 @@ final class TimingIdentifier {
         final String name;
         final List<TimingHandler> handlers = Collections.synchronizedList(new ArrayList<>(64));
 
-        private TimingGroup(String name) {
+        private TimingGroup(final String name) {
             this.name = name;
         }
 
         @Override
-        public boolean equals(@Nullable Object o) {
+        public boolean equals(@Nullable final Object o) {
             if (this == o) return true;
             if (o == null || getClass() != o.getClass()) return false;
-            TimingGroup that = (TimingGroup) o;
+            final TimingGroup that = (TimingGroup) o;
             return id == that.id;
         }
 
diff --git a/src/main/java/co/aikar/timings/Timings.java b/src/main/java/co/aikar/timings/Timings.java
index dd72a34eaa4bedd9ea0b92eaa79091b00eb4dd09..99a860d857db353b49720bffec1ac57bb8ada790 100644
--- a/src/main/java/co/aikar/timings/Timings.java
+++ b/src/main/java/co/aikar/timings/Timings.java
@@ -57,7 +57,7 @@ public final class Timings {
      * @return Handler
      */
     @NotNull
-    public static Timing of(@NotNull Plugin plugin, @NotNull String name) {
+    public static Timing of(@NotNull final Plugin plugin, @NotNull final String name) {
         Timing pluginHandler = null;
         if (plugin != null) {
             pluginHandler = ofSafe(plugin.getName(), "Combined Total", TimingsManager.PLUGIN_GROUP_HANDLER);
@@ -78,7 +78,7 @@ public final class Timings {
      * @return Timing Handler
      */
     @NotNull
-    public static Timing of(@NotNull Plugin plugin, @NotNull String name, @Nullable Timing groupHandler) {
+    public static Timing of(@NotNull final Plugin plugin, @NotNull final String name, @Nullable final Timing groupHandler) {
         Preconditions.checkNotNull(plugin, "Plugin can not be null");
         return TimingsManager.getHandler(plugin.getName(), name, groupHandler);
     }
@@ -95,7 +95,7 @@ public final class Timings {
      * @return Timing Handler
      */
     @NotNull
-    public static Timing ofStart(@NotNull Plugin plugin, @NotNull String name) {
+    public static Timing ofStart(@NotNull final Plugin plugin, @NotNull final String name) {
         return ofStart(plugin, name, null);
     }
 
@@ -112,8 +112,8 @@ public final class Timings {
      * @return Timing Handler
      */
     @NotNull
-    public static Timing ofStart(@NotNull Plugin plugin, @NotNull String name, @Nullable Timing groupHandler) {
-        Timing timing = of(plugin, name, groupHandler);
+    public static Timing ofStart(@NotNull final Plugin plugin, @NotNull final String name, @Nullable final Timing groupHandler) {
+        final Timing timing = of(plugin, name, groupHandler);
         timing.startTiming();
         return timing;
     }
@@ -134,7 +134,7 @@ public final class Timings {
      *
      * @param enabled Should timings be reported
      */
-    public static void setTimingsEnabled(boolean enabled) {
+    public static void setTimingsEnabled(final boolean enabled) {
         timingsEnabled = enabled;
         reset();
     }
@@ -158,7 +158,7 @@ public final class Timings {
      *
      * @param enabled Should high-frequency timings be reported
      */
-    public static void setVerboseTimingsEnabled(boolean enabled) {
+    public static void setVerboseTimingsEnabled(final boolean enabled) {
         verboseEnabled = enabled;
         TimingsManager.needsRecheckEnabled = true;
     }
@@ -184,7 +184,7 @@ public final class Timings {
      *
      * @param interval Interval in ticks
      */
-    public static void setHistoryInterval(int interval) {
+    public static void setHistoryInterval(final int interval) {
         historyInterval = Math.max(20*60, interval);
         // Recheck the history length with the new Interval
         if (historyLength != -1) {
@@ -214,7 +214,7 @@ public final class Timings {
      *
      * @param length Duration in ticks
      */
-    public static void setHistoryLength(int length) {
+    public static void setHistoryLength(final int length) {
         // Cap at 12 History Frames, 1 hour at 5 minute frames.
         int maxLength = historyInterval * MAX_HISTORY_FRAMES;
         // For special cases of servers with special permission to bypass the max.
@@ -224,8 +224,8 @@ public final class Timings {
             maxLength = Integer.MAX_VALUE;
         }
         historyLength = Math.max(Math.min(maxLength, length), historyInterval);
-        Queue<TimingHistory> oldQueue = TimingsManager.HISTORY;
-        int frames = (getHistoryLength() / getHistoryInterval());
+        final Queue<TimingHistory> oldQueue = TimingsManager.HISTORY;
+        final int frames = (getHistoryLength() / getHistoryInterval());
         if (length > maxLength) {
             Bukkit.getLogger().log(Level.WARNING, "Timings Length too high. Requested " + length + ", max is " + maxLength + ". To get longer history, you must increase your interval. Set Interval to " + Math.ceil(length / MAX_HISTORY_FRAMES) + " to achieve this length.");
         }
@@ -258,7 +258,7 @@ public final class Timings {
      * Use with {@link org.bukkit.command.BufferedCommandSender} to get full response when done!
      * @param sender The listener to send responses too.
      */
-    public static void generateReport(@NotNull TimingsReportListener sender) {
+    public static void generateReport(@NotNull final TimingsReportListener sender) {
         Preconditions.checkNotNull(sender);
         requestingReport.add(sender);
     }
@@ -270,12 +270,12 @@ public final class Timings {
     =================
     */
     @NotNull
-    static TimingHandler ofSafe(@NotNull String name) {
+    static TimingHandler ofSafe(@NotNull final String name) {
         return ofSafe(null, name, null);
     }
 
     @NotNull
-    static Timing ofSafe(@Nullable Plugin plugin, @NotNull String name) {
+    static Timing ofSafe(@Nullable final Plugin plugin, @NotNull final String name) {
         Timing pluginHandler = null;
         if (plugin != null) {
             pluginHandler = ofSafe(plugin.getName(), "Combined Total", TimingsManager.PLUGIN_GROUP_HANDLER);
@@ -284,12 +284,12 @@ public final class Timings {
     }
 
     @NotNull
-    static TimingHandler ofSafe(@NotNull String name, @Nullable Timing groupHandler) {
+    static TimingHandler ofSafe(@NotNull final String name, @Nullable final Timing groupHandler) {
         return ofSafe(null, name, groupHandler);
     }
 
     @NotNull
-    static TimingHandler ofSafe(@Nullable String groupName, @NotNull String name, @Nullable Timing groupHandler) {
+    static TimingHandler ofSafe(@Nullable final String groupName, @NotNull final String name, @Nullable final Timing groupHandler) {
         return TimingsManager.getHandler(groupName, name, groupHandler);
     }
 }
diff --git a/src/main/java/co/aikar/timings/TimingsCommand.java b/src/main/java/co/aikar/timings/TimingsCommand.java
index ceb040b9016e3540c2004e51ac683a7bc8097edb..b22dcd75f9d1f1455a9ef3ae68a8d66fb26d615d 100644
--- a/src/main/java/co/aikar/timings/TimingsCommand.java
+++ b/src/main/java/co/aikar/timings/TimingsCommand.java
@@ -41,7 +41,7 @@ public class TimingsCommand extends BukkitCommand {
     private static final List<String> TIMINGS_SUBCOMMANDS = ImmutableList.of("report", "reset", "on", "off", "paste", "verbon", "verboff");
     private long lastResetAttempt = 0;
 
-    public TimingsCommand(@NotNull String name) {
+    public TimingsCommand(@NotNull final String name) {
         super(name);
         this.description = "Manages Spigot Timings data to see performance of the server.";
         this.usageMessage = "/timings <reset|report|on|off|verbon|verboff>";
@@ -49,7 +49,7 @@ public class TimingsCommand extends BukkitCommand {
     }
 
     @Override
-    public boolean execute(@NotNull CommandSender sender, @NotNull String currentAlias, @NotNull String @NotNull [] args) {
+    public boolean execute(@NotNull final CommandSender sender, @NotNull final String currentAlias, @NotNull final String @NotNull [] args) {
         if (!testPermission(sender)) {
             return true;
         }
@@ -73,7 +73,7 @@ public class TimingsCommand extends BukkitCommand {
             return true;
         }
 
-        long now = System.currentTimeMillis();
+        final long now = System.currentTimeMillis();
         if ("verbon".equalsIgnoreCase(arg)) {
             Timings.setVerboseTimingsEnabled(true);
             sender.sendMessage(text("Enabled Verbose Timings"));
@@ -106,7 +106,7 @@ public class TimingsCommand extends BukkitCommand {
 
     @NotNull
     @Override
-    public List<String> tabComplete(@NotNull CommandSender sender, @NotNull String alias, @NotNull String @NotNull [] args) {
+    public List<String> tabComplete(@NotNull final CommandSender sender, @NotNull final String alias, @NotNull final String @NotNull [] args) {
         Preconditions.checkNotNull(sender, "Sender cannot be null");
         Preconditions.checkNotNull(args, "Arguments cannot be null");
         Preconditions.checkNotNull(alias, "Alias cannot be null");
diff --git a/src/main/java/co/aikar/timings/TimingsManager.java b/src/main/java/co/aikar/timings/TimingsManager.java
index 5af825420d322287385887c15d6a71724879239b..950d42fa8eae2db814168d9c435da634dad0f8e5 100644
--- a/src/main/java/co/aikar/timings/TimingsManager.java
+++ b/src/main/java/co/aikar/timings/TimingsManager.java
@@ -74,9 +74,9 @@ public final class TimingsManager {
      */
     static void tick() {
         if (Timings.timingsEnabled) {
-            boolean violated = FULL_SERVER_TICK.isViolated();
+            final boolean violated = FULL_SERVER_TICK.isViolated();
 
-            for (TimingHandler handler : HANDLERS) {
+            for (final TimingHandler handler : HANDLERS) {
                 if (handler.isSpecial()) {
                     // We manually call this
                     continue;
@@ -95,7 +95,7 @@ public final class TimingsManager {
     }
     static void recheckEnabled() {
         synchronized (TIMING_MAP) {
-            for (TimingHandler timings : TIMING_MAP.values()) {
+            for (final TimingHandler timings : TIMING_MAP.values()) {
                 timings.checkEnabled();
             }
         }
@@ -106,7 +106,7 @@ public final class TimingsManager {
             // Full resets need to re-check every handlers enabled state
             // Timing map can be modified from async so we must sync on it.
             synchronized (TIMING_MAP) {
-                for (TimingHandler timings : TIMING_MAP.values()) {
+                for (final TimingHandler timings : TIMING_MAP.values()) {
                     timings.reset(true);
                 }
             }
@@ -118,7 +118,7 @@ public final class TimingsManager {
         } else {
             // Soft resets only need to act on timings that have done something
             // Handlers can only be modified on main thread.
-            for (TimingHandler timings : HANDLERS) {
+            for (final TimingHandler timings : HANDLERS) {
                 timings.reset(false);
             }
         }
@@ -131,7 +131,7 @@ public final class TimingsManager {
     }
 
     @NotNull
-    static TimingHandler getHandler(@Nullable String group, @NotNull String name, @Nullable Timing parent) {
+    static TimingHandler getHandler(@Nullable final String group, @NotNull final String name, @Nullable final Timing parent) {
         return TIMING_MAP.get(new TimingIdentifier(group, name, parent));
     }
 
@@ -146,7 +146,7 @@ public final class TimingsManager {
      * @return TimingHandler
      */
     @NotNull
-    public static Timing getCommandTiming(@Nullable String pluginName, @NotNull Command command) {
+    public static Timing getCommandTiming(@Nullable final String pluginName, @NotNull final Command command) {
         Plugin plugin = null;
         final Server server = Bukkit.getServer();
         if (!(  server == null || pluginName == null ||
@@ -174,13 +174,13 @@ public final class TimingsManager {
      * @return Plugin if created by a plugin
      */
     @Nullable
-    public static Plugin getPluginByClassloader(@Nullable Class<?> clazz) {
+    public static Plugin getPluginByClassloader(@Nullable final Class<?> clazz) {
         if (clazz == null) {
             return null;
         }
         final ClassLoader classLoader = clazz.getClassLoader();
         if (classLoader instanceof PluginClassLoader) {
-            PluginClassLoader pluginClassLoader = (PluginClassLoader) classLoader;
+            final PluginClassLoader pluginClassLoader = (PluginClassLoader) classLoader;
             return pluginClassLoader.getPlugin();
         }
         return null;
diff --git a/src/main/java/co/aikar/timings/TimingsReportListener.java b/src/main/java/co/aikar/timings/TimingsReportListener.java
index d8ba8c5a2096fae41004da2592697267235bdcd5..db5e300247043a628e590c99d8c1ac9149e41c38 100644
--- a/src/main/java/co/aikar/timings/TimingsReportListener.java
+++ b/src/main/java/co/aikar/timings/TimingsReportListener.java
@@ -18,16 +18,16 @@ public class TimingsReportListener implements net.kyori.adventure.audience.Forwa
     private final @Nullable Runnable onDone;
     private @Nullable String timingsURL;
 
-    public TimingsReportListener(@NotNull CommandSender senders) {
+    public TimingsReportListener(@NotNull final CommandSender senders) {
         this(senders, null);
     }
-    public TimingsReportListener(@NotNull CommandSender sender, @Nullable Runnable onDone) {
+    public TimingsReportListener(@NotNull final CommandSender sender, @Nullable final Runnable onDone) {
         this(Lists.newArrayList(sender), onDone);
     }
-    public TimingsReportListener(@NotNull List<CommandSender> senders) {
+    public TimingsReportListener(@NotNull final List<CommandSender> senders) {
         this(senders, null);
     }
-    public TimingsReportListener(@NotNull List<CommandSender> senders, @Nullable Runnable onDone) {
+    public TimingsReportListener(@NotNull final List<CommandSender> senders, @Nullable final Runnable onDone) {
         Preconditions.checkNotNull(senders);
         Preconditions.checkArgument(!senders.isEmpty(), "senders is empty");
 
@@ -44,12 +44,12 @@ public class TimingsReportListener implements net.kyori.adventure.audience.Forwa
         done(null);
     }
 
-    public void done(@Nullable String url) {
+    public void done(@Nullable final String url) {
         this.timingsURL = url;
         if (onDone != null) {
             onDone.run();
         }
-        for (CommandSender sender : senders) {
+        for (final CommandSender sender : senders) {
             if (sender instanceof TimingsReportListener) {
                 ((TimingsReportListener) sender).done();
             }
@@ -68,13 +68,13 @@ public class TimingsReportListener implements net.kyori.adventure.audience.Forwa
     }
 
     @Override
-    public void sendMessage(@NotNull String message) {
+    public void sendMessage(@NotNull final String message) {
         senders.forEach((sender) -> sender.sendMessage(message));
     }
 
     public void addConsoleIfNeeded() {
         boolean hasConsole = false;
-        for (CommandSender sender : this.senders) {
+        for (final CommandSender sender : this.senders) {
             if (sender instanceof ConsoleCommandSender || sender instanceof RemoteConsoleCommandSender) {
                 hasConsole = true;
                 break;
diff --git a/src/main/java/co/aikar/timings/UnsafeTimingHandler.java b/src/main/java/co/aikar/timings/UnsafeTimingHandler.java
index 632c4961515f5052551f841cfa840e60bba7a257..3f3ac219889e348af23dd96efd2a08385d789748 100644
--- a/src/main/java/co/aikar/timings/UnsafeTimingHandler.java
+++ b/src/main/java/co/aikar/timings/UnsafeTimingHandler.java
@@ -28,7 +28,7 @@ import org.jetbrains.annotations.NotNull;
 
 class UnsafeTimingHandler extends TimingHandler {
 
-    UnsafeTimingHandler(@NotNull TimingIdentifier id) {
+    UnsafeTimingHandler(@NotNull final TimingIdentifier id) {
         super(id);
     }
 
diff --git a/src/main/java/co/aikar/util/Counter.java b/src/main/java/co/aikar/util/Counter.java
index 2422959b56b3454edb693ab71630e03b6ce95f48..48ec8203d237013226d94eaa54a002849f4b14be 100644
--- a/src/main/java/co/aikar/util/Counter.java
+++ b/src/main/java/co/aikar/util/Counter.java
@@ -10,23 +10,23 @@ import org.jetbrains.annotations.Nullable;
 public class Counter <T> extends ForwardingMap<T, Long> {
     private final Map<T, Long> counts = new HashMap<>();
 
-    public long decrement(@Nullable T key) {
+    public long decrement(@Nullable final T key) {
         return increment(key, -1);
     }
-    public long increment(@Nullable T key) {
+    public long increment(@Nullable final T key) {
         return increment(key, 1);
     }
-    public long decrement(@Nullable T key, long amount) {
+    public long decrement(@Nullable final T key, final long amount) {
         return increment(key, -amount);
     }
-    public long increment(@Nullable T key, long amount) {
+    public long increment(@Nullable final T key, final long amount) {
         long count = Long.valueOf(this.getCount(key));
         count = count + amount;
         this.counts.put(key, Long.valueOf(count));
         return count;
     }
 
-    public long getCount(@Nullable T key) {
+    public long getCount(@Nullable final T key) {
         return this.counts.getOrDefault(key, Long.valueOf(0L)).longValue();
     }
 
diff --git a/src/main/java/co/aikar/util/JSONUtil.java b/src/main/java/co/aikar/util/JSONUtil.java
index 33e058ae9237d32ab8f6dd74f4d846b3fcd80fd4..e16d91906bc295fcfd2340cf374f04bb23ac5a00 100644
--- a/src/main/java/co/aikar/util/JSONUtil.java
+++ b/src/main/java/co/aikar/util/JSONUtil.java
@@ -25,12 +25,12 @@ public final class JSONUtil {
      * @return JSONPair
      */
     @NotNull
-    public static JSONPair pair(@NotNull String key, @Nullable Object obj) {
+    public static JSONPair pair(@NotNull final String key, @Nullable final Object obj) {
         return new JSONPair(key, obj);
     }
 
     @NotNull
-    public static JSONPair pair(long key, @Nullable Object obj) {
+    public static JSONPair pair(final long key, @Nullable final Object obj) {
         return new JSONPair(String.valueOf(key), obj);
     }
 
@@ -41,7 +41,7 @@ public final class JSONUtil {
      * @return Map
      */
     @NotNull
-    public static Map<String, Object> createObject(@NotNull JSONPair... data) {
+    public static Map<String, Object> createObject(@NotNull final JSONPair... data) {
         return appendObjectData(new LinkedHashMap(), data);
     }
 
@@ -53,8 +53,8 @@ public final class JSONUtil {
      * @return Map
      */
     @NotNull
-    public static Map<String, Object> appendObjectData(@NotNull Map parent, @NotNull JSONPair @NotNull ... data) {
-        for (JSONPair JSONPair : data) {
+    public static Map<String, Object> appendObjectData(@NotNull final Map parent, @NotNull final JSONPair @NotNull ... data) {
+        for (final JSONPair JSONPair : data) {
             parent.put(JSONPair.key, JSONPair.val);
         }
         return parent;
@@ -67,7 +67,7 @@ public final class JSONUtil {
      * @return List
      */
     @NotNull
-    public static List toArray(@NotNull Object... data) {
+    public static List toArray(@NotNull final Object... data) {
         return Lists.newArrayList(data);
     }
 
@@ -80,15 +80,15 @@ public final class JSONUtil {
      * @return List
      */
     @NotNull
-    public static <E> List toArrayMapper(@NotNull E[] collection, @NotNull Function<E, Object> mapper) {
+    public static <E> List toArrayMapper(@NotNull final E[] collection, @NotNull final Function<E, Object> mapper) {
         return toArrayMapper(Lists.newArrayList(collection), mapper);
     }
 
     @NotNull
-    public static <E> List toArrayMapper(@NotNull Iterable<E> collection, @NotNull Function<E, Object> mapper) {
-        List array = Lists.newArrayList();
-        for (E e : collection) {
-            Object object = mapper.apply(e);
+    public static <E> List toArrayMapper(@NotNull final Iterable<E> collection, @NotNull final Function<E, Object> mapper) {
+        final List array = Lists.newArrayList();
+        for (final E e : collection) {
+            final Object object = mapper.apply(e);
             if (object != null) {
                 array.add(object);
             }
@@ -105,15 +105,15 @@ public final class JSONUtil {
      * @return Map
      */
     @NotNull
-    public static <E> Map toObjectMapper(@NotNull E[] collection, @NotNull Function<E, JSONPair> mapper) {
+    public static <E> Map toObjectMapper(@NotNull final E[] collection, @NotNull final Function<E, JSONPair> mapper) {
         return toObjectMapper(Lists.newArrayList(collection), mapper);
     }
 
     @NotNull
-    public static <E> Map toObjectMapper(@NotNull Iterable<E> collection, @NotNull Function<E, JSONPair> mapper) {
-        Map object = Maps.newLinkedHashMap();
-        for (E e : collection) {
-            JSONPair JSONPair = mapper.apply(e);
+    public static <E> Map toObjectMapper(@NotNull final Iterable<E> collection, @NotNull final Function<E, JSONPair> mapper) {
+        final Map object = Maps.newLinkedHashMap();
+        for (final E e : collection) {
+            final JSONPair JSONPair = mapper.apply(e);
             if (JSONPair != null) {
                 object.put(JSONPair.key, JSONPair.val);
             }
@@ -129,7 +129,7 @@ public final class JSONUtil {
         final @NotNull String key;
         final @NotNull Object val;
 
-        JSONPair(@NotNull String key, @NotNull Object val) {
+        JSONPair(@NotNull final String key, @NotNull final Object val) {
             this.key = key;
             this.val = val;
         }
diff --git a/src/main/java/co/aikar/util/LoadingIntMap.java b/src/main/java/co/aikar/util/LoadingIntMap.java
index b22f066d1b771d7125a5a11e166741ce6387a447..a3be28f50a5af4664b5811a920a693cc3425a783 100644
--- a/src/main/java/co/aikar/util/LoadingIntMap.java
+++ b/src/main/java/co/aikar/util/LoadingIntMap.java
@@ -29,17 +29,17 @@ import org.jetbrains.annotations.Nullable;
 public class LoadingIntMap<V> extends Int2ObjectOpenHashMap<V> {
     private final @NotNull Function<Integer, V> loader;
 
-    public LoadingIntMap(@NotNull Function<Integer, V> loader) {
+    public LoadingIntMap(@NotNull final Function<Integer, V> loader) {
         super();
         this.loader = loader;
     }
 
-    public LoadingIntMap(int expectedSize, @NotNull Function<Integer, V> loader) {
+    public LoadingIntMap(final int expectedSize, @NotNull final Function<Integer, V> loader) {
         super(expectedSize);
         this.loader = loader;
     }
 
-    public LoadingIntMap(int expectedSize, float loadFactor, @NotNull Function<Integer, V> loader) {
+    public LoadingIntMap(final int expectedSize, final float loadFactor, @NotNull final Function<Integer, V> loader) {
         super(expectedSize, loadFactor);
         this.loader = loader;
     }
@@ -47,7 +47,7 @@ public class LoadingIntMap<V> extends Int2ObjectOpenHashMap<V> {
 
     @Nullable
     @Override
-    public V get(int key) {
+    public V get(final int key) {
         V res = super.get(key);
         if (res == null) {
             res = loader.apply(Integer.valueOf(key));
@@ -66,7 +66,7 @@ public class LoadingIntMap<V> extends Int2ObjectOpenHashMap<V> {
     public abstract static class Feeder <T> implements Function<T, T> {
         @Nullable
         @Override
-        public T apply(@Nullable Object input) {
+        public T apply(@Nullable final Object input) {
             return apply();
         }
 
diff --git a/src/main/java/co/aikar/util/LoadingMap.java b/src/main/java/co/aikar/util/LoadingMap.java
index 8fbf1c0da490d9f2eb1db078512bba2b346f53cf..d1c00b72bedaf45bff52977a8547a4ecc2810e47 100644
--- a/src/main/java/co/aikar/util/LoadingMap.java
+++ b/src/main/java/co/aikar/util/LoadingMap.java
@@ -58,7 +58,7 @@ public class LoadingMap <K, V> extends AbstractMap<K, V> {
      * @param backingMap Map to wrap
      * @param loader Loader
      */
-    public LoadingMap(@NotNull Map<K, V> backingMap, @NotNull java.util.function.Function<K, V> loader) {
+    public LoadingMap(@NotNull final Map<K, V> backingMap, @NotNull final java.util.function.Function<K, V> loader) {
         this.backingMap = backingMap;
         this.loader = loader;
     }
@@ -73,7 +73,7 @@ public class LoadingMap <K, V> extends AbstractMap<K, V> {
      * @return Map
      */
     @NotNull
-    public static <K, V> Map<K, V> of(@NotNull Map<K, V> backingMap, @NotNull Function<K, V> loader) {
+    public static <K, V> Map<K, V> of(@NotNull final Map<K, V> backingMap, @NotNull final Function<K, V> loader) {
         return new LoadingMap<>(backingMap, loader);
     }
 
@@ -93,7 +93,7 @@ public class LoadingMap <K, V> extends AbstractMap<K, V> {
      * @return Map that auto instantiates on .get()
      */
     @NotNull
-    public static <K, V> Map<K, V> newAutoMap(@NotNull Map<K, V> backingMap, @Nullable final Class<? extends K> keyClass,
+    public static <K, V> Map<K, V> newAutoMap(@NotNull final Map<K, V> backingMap, @Nullable final Class<? extends K> keyClass,
                                               @NotNull final Class<? extends V> valueClass) {
         return new LoadingMap<>(backingMap, new AutoInstantiatingLoader<>(keyClass, valueClass));
     }
@@ -112,7 +112,7 @@ public class LoadingMap <K, V> extends AbstractMap<K, V> {
      * @return Map that auto instantiates on .get()
      */
     @NotNull
-    public static <K, V> Map<K, V> newAutoMap(@NotNull Map<K, V> backingMap,
+    public static <K, V> Map<K, V> newAutoMap(@NotNull final Map<K, V> backingMap,
                                               @NotNull final Class<? extends V> valueClass) {
         return newAutoMap(backingMap, null, valueClass);
     }
@@ -162,7 +162,7 @@ public class LoadingMap <K, V> extends AbstractMap<K, V> {
      * @return Map that auto instantiates on .get()
      */
     @NotNull
-    public static <K, V> Map<K, V> newHashAutoMap(@Nullable final Class<? extends K> keyClass, @NotNull final Class<? extends V> valueClass, int initialCapacity, float loadFactor) {
+    public static <K, V> Map<K, V> newHashAutoMap(@Nullable final Class<? extends K> keyClass, @NotNull final Class<? extends V> valueClass, final int initialCapacity, final float loadFactor) {
         return newAutoMap(new HashMap<>(initialCapacity, loadFactor), keyClass, valueClass);
     }
 
@@ -179,7 +179,7 @@ public class LoadingMap <K, V> extends AbstractMap<K, V> {
      * @return  Map that auto instantiates on .get()
      */
     @NotNull
-    public static <K, V> Map<K, V> newHashAutoMap(@NotNull final Class<? extends V> valueClass, int initialCapacity, float loadFactor) {
+    public static <K, V> Map<K, V> newHashAutoMap(@NotNull final Class<? extends V> valueClass, final int initialCapacity, final float loadFactor) {
         return newHashAutoMap(null, valueClass, initialCapacity, loadFactor);
     }
 
@@ -192,7 +192,7 @@ public class LoadingMap <K, V> extends AbstractMap<K, V> {
      * @return Map
      */
     @NotNull
-    public static <K, V> Map<K, V> newHashMap(@NotNull Function<K, V> loader) {
+    public static <K, V> Map<K, V> newHashMap(@NotNull final Function<K, V> loader) {
         return new LoadingMap<>(new HashMap<>(), loader);
     }
 
@@ -206,7 +206,7 @@ public class LoadingMap <K, V> extends AbstractMap<K, V> {
      * @return Map
      */
     @NotNull
-    public static <K, V> Map<K, V> newHashMap(@NotNull Function<K, V> loader, int initialCapacity) {
+    public static <K, V> Map<K, V> newHashMap(@NotNull final Function<K, V> loader, final int initialCapacity) {
         return new LoadingMap<>(new HashMap<>(initialCapacity), loader);
     }
     /**
@@ -220,7 +220,7 @@ public class LoadingMap <K, V> extends AbstractMap<K, V> {
      * @return Map
      */
     @NotNull
-    public static <K, V> Map<K, V> newHashMap(@NotNull Function<K, V> loader, int initialCapacity, float loadFactor) {
+    public static <K, V> Map<K, V> newHashMap(@NotNull final Function<K, V> loader, final int initialCapacity, final float loadFactor) {
         return new LoadingMap<>(new HashMap<>(initialCapacity, loadFactor), loader);
     }
 
@@ -233,7 +233,7 @@ public class LoadingMap <K, V> extends AbstractMap<K, V> {
      * @return Map
      */
     @NotNull
-    public static <K, V> Map<K, V> newIdentityHashMap(@NotNull Function<K, V> loader) {
+    public static <K, V> Map<K, V> newIdentityHashMap(@NotNull final Function<K, V> loader) {
         return new LoadingMap<>(new IdentityHashMap<>(), loader);
     }
 
@@ -247,7 +247,7 @@ public class LoadingMap <K, V> extends AbstractMap<K, V> {
      * @return Map
      */
     @NotNull
-    public static <K, V> Map<K, V> newIdentityHashMap(@NotNull Function<K, V> loader, int initialCapacity) {
+    public static <K, V> Map<K, V> newIdentityHashMap(@NotNull final Function<K, V> loader, final int initialCapacity) {
         return new LoadingMap<>(new IdentityHashMap<>(initialCapacity), loader);
     }
 
@@ -258,15 +258,15 @@ public class LoadingMap <K, V> extends AbstractMap<K, V> {
     public boolean isEmpty() {return backingMap.isEmpty();}
 
     @Override
-    public boolean containsKey(@Nullable Object key) {return backingMap.containsKey(key);}
+    public boolean containsKey(@Nullable final Object key) {return backingMap.containsKey(key);}
 
     @Override
-    public boolean containsValue(@Nullable Object value) {return backingMap.containsValue(value);}
+    public boolean containsValue(@Nullable final Object value) {return backingMap.containsValue(value);}
 
     @Nullable
     @Override
-    public V get(@Nullable Object key) {
-        V v = backingMap.get(key);
+    public V get(@Nullable final Object key) {
+        final V v = backingMap.get(key);
         if (v != null) {
             return v;
         }
@@ -274,13 +274,13 @@ public class LoadingMap <K, V> extends AbstractMap<K, V> {
     }
 
     @Nullable
-    public V put(@Nullable K key, @Nullable V value) {return backingMap.put(key, value);}
+    public V put(@Nullable final K key, @Nullable final V value) {return backingMap.put(key, value);}
 
     @Nullable
     @Override
-    public V remove(@Nullable Object key) {return backingMap.remove(key);}
+    public V remove(@Nullable final Object key) {return backingMap.remove(key);}
 
-    public void putAll(@NotNull Map<? extends K, ? extends V> m) {backingMap.putAll(m);}
+    public void putAll(@NotNull final Map<? extends K, ? extends V> m) {backingMap.putAll(m);}
 
     @Override
     public void clear() {backingMap.clear();}
@@ -294,7 +294,7 @@ public class LoadingMap <K, V> extends AbstractMap<K, V> {
     public Collection<V> values() {return backingMap.values();}
 
     @Override
-    public boolean equals(@Nullable Object o) {return backingMap.equals(o);}
+    public boolean equals(@Nullable final Object o) {return backingMap.equals(o);}
 
     @Override
     public int hashCode() {return backingMap.hashCode();}
@@ -314,7 +314,7 @@ public class LoadingMap <K, V> extends AbstractMap<K, V> {
         final @Nullable Constructor<? extends V> constructor;
         private final @NotNull Class<? extends V> valueClass;
 
-        AutoInstantiatingLoader(@Nullable Class<? extends K> keyClass, @NotNull Class<? extends V> valueClass) {
+        AutoInstantiatingLoader(@Nullable final Class<? extends K> keyClass, @NotNull final Class<? extends V> valueClass) {
             try {
                 this.valueClass = valueClass;
                 if (keyClass != null) {
@@ -322,7 +322,7 @@ public class LoadingMap <K, V> extends AbstractMap<K, V> {
                 } else {
                     constructor = null;
                 }
-            } catch (NoSuchMethodException e) {
+            } catch (final NoSuchMethodException e) {
                 throw new IllegalStateException(
                     valueClass.getName() + " does not have a constructor for " + (keyClass != null ? keyClass.getName() : null));
             }
@@ -330,10 +330,10 @@ public class LoadingMap <K, V> extends AbstractMap<K, V> {
 
         @NotNull
         @Override
-        public V apply(@Nullable K input) {
+        public V apply(@Nullable final K input) {
             try {
                 return (constructor != null ? constructor.newInstance(input) : valueClass.newInstance());
-            } catch (Exception e) {
+            } catch (final Exception e) {
                 throw new ExceptionInInitializerError(e);
             }
         }
@@ -344,7 +344,7 @@ public class LoadingMap <K, V> extends AbstractMap<K, V> {
         }
 
         @Override
-        public boolean equals(Object object) {
+        public boolean equals(final Object object) {
             return false;
         }
     }
@@ -357,7 +357,7 @@ public class LoadingMap <K, V> extends AbstractMap<K, V> {
     public abstract static class Feeder <T> implements Function<T, T> {
         @Nullable
         @Override
-        public T apply(@Nullable Object input) {
+        public T apply(@Nullable final Object input) {
             return apply();
         }
 
diff --git a/src/main/java/co/aikar/util/MRUMapCache.java b/src/main/java/co/aikar/util/MRUMapCache.java
index fe93fd1187e09e3ea136d694e199392f09f8aa83..30a67cf5f947138fa5a7c12ab80ef2f8c525270b 100644
--- a/src/main/java/co/aikar/util/MRUMapCache.java
+++ b/src/main/java/co/aikar/util/MRUMapCache.java
@@ -48,16 +48,16 @@ public class MRUMapCache<K, V> extends AbstractMap<K, V> {
 
     public boolean isEmpty() {return backingMap.isEmpty();}
 
-    public boolean containsKey(@Nullable Object key) {
+    public boolean containsKey(@Nullable final Object key) {
         return key != null && key.equals(cacheKey) || backingMap.containsKey(key);
     }
 
-    public boolean containsValue(@Nullable Object value) {
+    public boolean containsValue(@Nullable final Object value) {
         return value != null && value == cacheValue || backingMap.containsValue(value);
     }
 
     @Nullable
-    public V get(@Nullable Object key) {
+    public V get(@Nullable final Object key) {
         if (cacheKey != null && cacheKey.equals(key)) {
             return cacheValue;
         }
@@ -66,20 +66,20 @@ public class MRUMapCache<K, V> extends AbstractMap<K, V> {
     }
 
     @Nullable
-    public V put(@Nullable K key, @Nullable V value) {
+    public V put(@Nullable final K key, @Nullable final V value) {
         cacheKey = key;
         return cacheValue = backingMap.put(key, value);
     }
 
     @Nullable
-    public V remove(@Nullable Object key) {
+    public V remove(@Nullable final Object key) {
         if (key != null && key.equals(cacheKey)) {
             cacheKey = null;
         }
         return backingMap.remove(key);
     }
 
-    public void putAll(@NotNull Map<? extends K, ? extends V> m) {backingMap.putAll(m);}
+    public void putAll(@NotNull final Map<? extends K, ? extends V> m) {backingMap.putAll(m);}
 
     public void clear() {
         cacheKey = null;
@@ -105,7 +105,7 @@ public class MRUMapCache<K, V> extends AbstractMap<K, V> {
      * @return Map
      */
     @NotNull
-    public static <K, V> Map<K, V> of(@NotNull Map<K, V> map) {
+    public static <K, V> Map<K, V> of(@NotNull final Map<K, V> map) {
         return new MRUMapCache<K, V>(map);
     }
 }
diff --git a/src/main/java/com/destroystokyo/paper/ClientOption.java b/src/main/java/com/destroystokyo/paper/ClientOption.java
index 8500ba25f212b15992661f9a848a69d965595bb3..3694f323256681617934076c4239a5da14b4c94c 100644
--- a/src/main/java/com/destroystokyo/paper/ClientOption.java
+++ b/src/main/java/com/destroystokyo/paper/ClientOption.java
@@ -19,7 +19,7 @@ public final class ClientOption<T> {
 
     private final @NotNull Class<T> type;
 
-    private ClientOption(@NotNull Class<T> type) {
+    private ClientOption(@NotNull final Class<T> type) {
         this.type = type;
     }
 
@@ -37,7 +37,7 @@ public final class ClientOption<T> {
         public static @NotNull Index<String, ChatVisibility> NAMES = Index.create(ChatVisibility.class, chatVisibility -> chatVisibility.name);
         private final String name;
 
-        ChatVisibility(String name) {
+        ChatVisibility(final String name) {
             this.name = name;
         }
 
diff --git a/src/main/java/com/destroystokyo/paper/MaterialSetTag.java b/src/main/java/com/destroystokyo/paper/MaterialSetTag.java
index a02a02aa0c87e0f0ed9e509e4dcab01565b3d92a..e9d6f9c8cf00c59dc820fdd47dfd8c71b7ff8f77 100644
--- a/src/main/java/com/destroystokyo/paper/MaterialSetTag.java
+++ b/src/main/java/com/destroystokyo/paper/MaterialSetTag.java
@@ -27,7 +27,7 @@ public class MaterialSetTag extends BaseTag<Material, MaterialSetTag> {
      * @deprecated Use NamespacedKey version of constructor
      */
     @Deprecated
-    public MaterialSetTag(@NotNull Predicate<Material> filter) {
+    public MaterialSetTag(@NotNull final Predicate<Material> filter) {
         this(null, Stream.of(Material.values()).filter(filter).collect(Collectors.toList()));
     }
 
@@ -35,7 +35,7 @@ public class MaterialSetTag extends BaseTag<Material, MaterialSetTag> {
      * @deprecated Use NamespacedKey version of constructor
      */
     @Deprecated
-    public MaterialSetTag(@NotNull Collection<Material> materials) {
+    public MaterialSetTag(@NotNull final Collection<Material> materials) {
         this(null, materials);
     }
 
@@ -43,23 +43,23 @@ public class MaterialSetTag extends BaseTag<Material, MaterialSetTag> {
      * @deprecated Use NamespacedKey version of constructor
      */
     @Deprecated
-    public MaterialSetTag(@NotNull Material... materials) {
+    public MaterialSetTag(@NotNull final Material... materials) {
         this(null, materials);
     }
 
-    public MaterialSetTag(@Nullable NamespacedKey key, @NotNull Predicate<Material> filter) {
+    public MaterialSetTag(@Nullable final NamespacedKey key, @NotNull final Predicate<Material> filter) {
         this(key, Stream.of(Material.values()).filter(filter).collect(Collectors.toList()));
     }
 
-    public MaterialSetTag(@Nullable NamespacedKey key, @NotNull Material... materials) {
+    public MaterialSetTag(@Nullable final NamespacedKey key, @NotNull final Material... materials) {
         this(key, Lists.newArrayList(materials));
     }
 
-    public MaterialSetTag(@Nullable NamespacedKey key, @NotNull Collection<Material> materials) {
+    public MaterialSetTag(@Nullable final NamespacedKey key, @NotNull final Collection<Material> materials) {
         this(key != null ? key : NamespacedKey.randomKey(), materials, ((Predicate<Material>) Material::isLegacy).negate());
     }
 
-    public MaterialSetTag(@Nullable NamespacedKey key, @NotNull Collection<Material> materials, @NotNull Predicate<Material>...globalPredicates) {
+    public MaterialSetTag(@Nullable final NamespacedKey key, @NotNull final Collection<Material> materials, @NotNull final Predicate<Material>...globalPredicates) {
         super(Material.class, key != null ? key : NamespacedKey.randomKey(), materials, globalPredicates);
     }
 
@@ -71,27 +71,27 @@ public class MaterialSetTag extends BaseTag<Material, MaterialSetTag> {
 
     @Override
     @NotNull
-    protected String getName(@NotNull Material value) {
+    protected String getName(@NotNull final Material value) {
         return value.name();
     }
 
-    public boolean isTagged(@NotNull BlockData block) {
+    public boolean isTagged(@NotNull final BlockData block) {
         return isTagged(block.getMaterial());
     }
 
-    public boolean isTagged(@NotNull BlockState block) {
+    public boolean isTagged(@NotNull final BlockState block) {
         return isTagged(block.getType());
     }
 
-    public boolean isTagged(@NotNull Block block) {
+    public boolean isTagged(@NotNull final Block block) {
         return isTagged(block.getType());
     }
 
-    public boolean isTagged(@NotNull ItemStack item) {
+    public boolean isTagged(@NotNull final ItemStack item) {
         return isTagged(item.getType());
     }
 
-    public boolean isTagged(@NotNull Material material) {
+    public boolean isTagged(@NotNull final Material material) {
         return this.tagged.contains(material);
     }
 }
diff --git a/src/main/java/com/destroystokyo/paper/MaterialTags.java b/src/main/java/com/destroystokyo/paper/MaterialTags.java
index 05bdc4dd765ccb4dcca2b98356e3f93eed8cc4e7..0c7e36eebdcee4e5b8ccc0d9281b82ae36caf002 100644
--- a/src/main/java/com/destroystokyo/paper/MaterialTags.java
+++ b/src/main/java/com/destroystokyo/paper/MaterialTags.java
@@ -39,7 +39,7 @@ import org.jetbrains.annotations.NotNull;
 @SuppressWarnings({"NonFinalUtilityClass", "unused", "WeakerAccess"})
 public class MaterialTags {
 
-    private static @NotNull NamespacedKey keyFor(String key) {
+    private static @NotNull NamespacedKey keyFor(final String key) {
         //noinspection deprecation
         return new NamespacedKey("paper", key + "_settag");
     }
diff --git a/src/main/java/com/destroystokyo/paper/NamespacedTag.java b/src/main/java/com/destroystokyo/paper/NamespacedTag.java
index b8ad665896cda49f61016e338ef1f3045813d0ce..14db4eac663f8e5b7a6bffdcfe133fe8c1a62976 100644
--- a/src/main/java/com/destroystokyo/paper/NamespacedTag.java
+++ b/src/main/java/com/destroystokyo/paper/NamespacedTag.java
@@ -47,14 +47,14 @@ public final class NamespacedTag implements com.destroystokyo.paper.Namespaced {
      * @deprecated should never be used by plugins, for internal use only!!
      */
     @Deprecated
-    public NamespacedTag(@NotNull String namespace, @NotNull String key) {
+    public NamespacedTag(@NotNull final String namespace, @NotNull final String key) {
         Preconditions.checkArgument(namespace != null && VALID_NAMESPACE.matcher(namespace).matches(), "Invalid namespace. Must be [a-z0-9._-]: %s", namespace);
         Preconditions.checkArgument(key != null && VALID_KEY.matcher(key).matches(), "Invalid key. Must be [a-z0-9/._-]: %s", key);
 
         this.namespace = namespace;
         this.key = key;
 
-        String string = toString();
+        final String string = toString();
         Preconditions.checkArgument(string.length() < 256, "NamespacedTag must be less than 256 characters", string);
     }
 
@@ -70,7 +70,7 @@ public final class NamespacedTag implements com.destroystokyo.paper.Namespaced {
      * @param plugin the plugin to use for the namespace
      * @param key the key to create
      */
-    public NamespacedTag(@NotNull Plugin plugin, @NotNull String key) {
+    public NamespacedTag(@NotNull final Plugin plugin, @NotNull final String key) {
         Preconditions.checkArgument(plugin != null, "Plugin cannot be null");
         Preconditions.checkArgument(key != null, "Key cannot be null");
 
@@ -81,7 +81,7 @@ public final class NamespacedTag implements com.destroystokyo.paper.Namespaced {
         Preconditions.checkArgument(VALID_NAMESPACE.matcher(this.namespace).matches(), "Invalid namespace. Must be [a-z0-9._-]: %s", this.namespace);
         Preconditions.checkArgument(VALID_KEY.matcher(this.key).matches(), "Invalid key. Must be [a-z0-9/._-]: %s", this.key);
 
-        String string = toString();
+        final String string = toString();
         Preconditions.checkArgument(string.length() < 256, "NamespacedTag must be less than 256 characters (%s)", string);
     }
 
@@ -104,7 +104,7 @@ public final class NamespacedTag implements com.destroystokyo.paper.Namespaced {
     }
 
     @Override
-    public boolean equals(@Nullable Object obj) {
+    public boolean equals(@Nullable final Object obj) {
         if (obj == null) {
             return false;
         }
@@ -138,7 +138,7 @@ public final class NamespacedTag implements com.destroystokyo.paper.Namespaced {
      * @return new key in the Minecraft namespace
      */
     @NotNull
-    public static NamespacedTag minecraft(@NotNull String key) {
+    public static NamespacedTag minecraft(@NotNull final String key) {
         return new NamespacedTag(MINECRAFT, key);
     }
 }
diff --git a/src/main/java/com/destroystokyo/paper/ParticleBuilder.java b/src/main/java/com/destroystokyo/paper/ParticleBuilder.java
index a4132a764f1eb8c01a66b18644c8f84f169c7a7f..3a87f38e601b821c730345230db9427a85ca1094 100644
--- a/src/main/java/com/destroystokyo/paper/ParticleBuilder.java
+++ b/src/main/java/com/destroystokyo/paper/ParticleBuilder.java
@@ -30,7 +30,7 @@ public class ParticleBuilder {
     private @Nullable Object data;
     private boolean force = true;
 
-    public ParticleBuilder(@NotNull Particle particle) {
+    public ParticleBuilder(@NotNull final Particle particle) {
         this.particle = particle;
     }
 
@@ -67,7 +67,7 @@ public class ParticleBuilder {
      * @return a reference to this object.
      */
     @NotNull
-    public ParticleBuilder particle(@NotNull Particle particle) {
+    public ParticleBuilder particle(@NotNull final Particle particle) {
         this.particle = particle;
         return this;
     }
@@ -112,7 +112,7 @@ public class ParticleBuilder {
      * @return a reference to this object.
      */
     @NotNull
-    public ParticleBuilder receivers(@Nullable List<Player> receivers) {
+    public ParticleBuilder receivers(@Nullable final List<Player> receivers) {
         // Had to keep this as we first made API List<> and not Collection, but removing this may break plugins compiled on older jars
         // TODO: deprecate?
         this.receivers = receivers != null ? Lists.newArrayList(receivers) : null;
@@ -125,7 +125,7 @@ public class ParticleBuilder {
      * @return a reference to this object.
      */
     @NotNull
-    public ParticleBuilder receivers(@Nullable Collection<Player> receivers) {
+    public ParticleBuilder receivers(@Nullable final Collection<Player> receivers) {
         this.receivers = receivers != null ? Lists.newArrayList(receivers) : null;
         return this;
     }
@@ -136,7 +136,7 @@ public class ParticleBuilder {
      * @return a reference to this object.
      */
     @NotNull
-    public ParticleBuilder receivers(@Nullable Player @Nullable ... receivers) {
+    public ParticleBuilder receivers(@Nullable final Player @Nullable ... receivers) {
         this.receivers = receivers != null ? Lists.newArrayList(receivers) : null;
         return this;
     }
@@ -150,7 +150,7 @@ public class ParticleBuilder {
      * @return a reference to this object.
      */
     @NotNull
-    public ParticleBuilder receivers(int radius) {
+    public ParticleBuilder receivers(final int radius) {
         return receivers(radius, radius);
     }
 
@@ -164,17 +164,17 @@ public class ParticleBuilder {
      * @return a reference to this object.
      */
     @NotNull
-    public ParticleBuilder receivers(int radius, boolean byDistance) {
+    public ParticleBuilder receivers(final int radius, final boolean byDistance) {
         if (!byDistance) {
             return receivers(radius, radius, radius);
         } else {
             this.receivers = Lists.newArrayList();
-            for (Player nearbyPlayer : location.getWorld()
+            for (final Player nearbyPlayer : location.getWorld()
                 .getNearbyPlayers(location, radius, radius, radius)) {
-                Location loc = nearbyPlayer.getLocation();
-                double x = NumberConversions.square(location.getX() - loc.getX());
-                double y = NumberConversions.square(location.getY() - loc.getY());
-                double z = NumberConversions.square(location.getZ() - loc.getZ());
+                final Location loc = nearbyPlayer.getLocation();
+                final double x = NumberConversions.square(location.getX() - loc.getX());
+                final double y = NumberConversions.square(location.getY() - loc.getY());
+                final double z = NumberConversions.square(location.getZ() - loc.getZ());
                 if (Math.sqrt(x + y + z) > radius) {
                     continue;
                 }
@@ -195,7 +195,7 @@ public class ParticleBuilder {
      * @return a reference to this object.
      */
     @NotNull
-    public ParticleBuilder receivers(int xzRadius, int yRadius) {
+    public ParticleBuilder receivers(final int xzRadius, final int yRadius) {
         return receivers(xzRadius, yRadius, xzRadius);
     }
 
@@ -210,19 +210,19 @@ public class ParticleBuilder {
      * @return a reference to this object.
      */
     @NotNull
-    public ParticleBuilder receivers(int xzRadius, int yRadius, boolean byDistance) {
+    public ParticleBuilder receivers(final int xzRadius, final int yRadius, final boolean byDistance) {
         if (!byDistance) {
             return receivers(xzRadius, yRadius, xzRadius);
         } else {
             this.receivers = Lists.newArrayList();
-            for (Player nearbyPlayer : location.getWorld()
+            for (final Player nearbyPlayer : location.getWorld()
                 .getNearbyPlayers(location, xzRadius, yRadius, xzRadius)) {
-                Location loc = nearbyPlayer.getLocation();
+                final Location loc = nearbyPlayer.getLocation();
                 if (Math.abs(loc.getY() - this.location.getY()) > yRadius) {
                     continue;
                 }
-                double x = NumberConversions.square(location.getX() - loc.getX());
-                double z = NumberConversions.square(location.getZ() - loc.getZ());
+                final double x = NumberConversions.square(location.getX() - loc.getX());
+                final double z = NumberConversions.square(location.getZ() - loc.getZ());
                 if (x + z > NumberConversions.square(xzRadius)) {
                     continue;
                 }
@@ -243,7 +243,7 @@ public class ParticleBuilder {
      * @return a reference to this object.
      */
     @NotNull
-    public ParticleBuilder receivers(int xRadius, int yRadius, int zRadius) {
+    public ParticleBuilder receivers(final int xRadius, final int yRadius, final int zRadius) {
         if (location == null) {
             throw new IllegalStateException("Please set location first");
         }
@@ -265,7 +265,7 @@ public class ParticleBuilder {
      * @return a reference to this object.
      */
     @NotNull
-    public ParticleBuilder source(@Nullable Player source) {
+    public ParticleBuilder source(@Nullable final Player source) {
         this.source = source;
         return this;
     }
@@ -285,7 +285,7 @@ public class ParticleBuilder {
      * @return a reference to this object.
      */
     @NotNull
-    public ParticleBuilder location(@NotNull Location location) {
+    public ParticleBuilder location(@NotNull final Location location) {
         this.location = location.clone();
         return this;
     }
@@ -300,7 +300,7 @@ public class ParticleBuilder {
      * @return a reference to this object.
      */
     @NotNull
-    public ParticleBuilder location(@NotNull World world, double x, double y, double z) {
+    public ParticleBuilder location(@NotNull final World world, final double x, final double y, final double z) {
         this.location = new Location(world, x, y, z);
         return this;
     }
@@ -319,7 +319,7 @@ public class ParticleBuilder {
      * @return a reference to this object.
      */
     @NotNull
-    public ParticleBuilder count(int count) {
+    public ParticleBuilder count(final int count) {
         this.count = count;
         return this;
     }
@@ -360,7 +360,7 @@ public class ParticleBuilder {
      * @return a reference to this object.
      */
     @NotNull
-    public ParticleBuilder offset(double offsetX, double offsetY, double offsetZ) {
+    public ParticleBuilder offset(final double offsetX, final double offsetY, final double offsetZ) {
         this.offsetX = offsetX;
         this.offsetY = offsetY;
         this.offsetZ = offsetZ;
@@ -383,7 +383,7 @@ public class ParticleBuilder {
      * @return a reference to this object.
      */
     @NotNull
-    public ParticleBuilder extra(double extra) {
+    public ParticleBuilder extra(final double extra) {
         this.extra = extra;
         return this;
     }
@@ -408,7 +408,7 @@ public class ParticleBuilder {
      * @return a reference to this object.
      */
     @NotNull
-    public <T> ParticleBuilder data(@Nullable T data) {
+    public <T> ParticleBuilder data(@Nullable final T data) {
         this.data = data;
         return this;
     }
@@ -429,7 +429,7 @@ public class ParticleBuilder {
      * @return a reference to this object.
      */
     @NotNull
-    public ParticleBuilder force(boolean force) {
+    public ParticleBuilder force(final boolean force) {
         this.force = force;
         return this;
     }
@@ -441,7 +441,7 @@ public class ParticleBuilder {
      * @return a reference to this object.
      */
     @NotNull
-    public ParticleBuilder color(@Nullable Color color) {
+    public ParticleBuilder color(@Nullable final Color color) {
         return color(color, 1);
     }
 
@@ -453,7 +453,7 @@ public class ParticleBuilder {
      * @return a reference to this object.
      */
     @NotNull
-    public ParticleBuilder color(@Nullable Color color, float size) {
+    public ParticleBuilder color(@Nullable final Color color, final float size) {
         if (particle != Particle.REDSTONE && color != null) {
             throw new IllegalStateException("Color may only be set on REDSTONE");
         }
@@ -479,7 +479,7 @@ public class ParticleBuilder {
      * @return a reference to this object.
      */
     @NotNull
-    public ParticleBuilder color(int r, int g, int b) {
+    public ParticleBuilder color(final int r, final int g, final int b) {
         return color(Color.fromRGB(r, g, b));
     }
 }
diff --git a/src/main/java/com/destroystokyo/paper/Title.java b/src/main/java/com/destroystokyo/paper/Title.java
index 83ed9e483431aec0bff04268c58bb0240ff97d35..3489835618fbb9ad328347d29cf5facd4283d163 100644
--- a/src/main/java/com/destroystokyo/paper/Title.java
+++ b/src/main/java/com/destroystokyo/paper/Title.java
@@ -51,7 +51,7 @@ public final class Title {
      * @param title the main text of the title
      * @throws NullPointerException if the title is null
      */
-    public Title(@NotNull BaseComponent title) {
+    public Title(@NotNull final BaseComponent title) {
         this(title, null);
     }
 
@@ -63,7 +63,7 @@ public final class Title {
      * @param title the main text of the title
      * @throws NullPointerException if the title is null
      */
-    public Title(@NotNull BaseComponent[] title) {
+    public Title(@NotNull final BaseComponent[] title) {
         this(title, null);
     }
 
@@ -75,7 +75,7 @@ public final class Title {
      * @param title the main text of the title
      * @throws NullPointerException if the title is null
      */
-    public Title(@NotNull String title) {
+    public Title(@NotNull final String title) {
         this(title, null);
     }
 
@@ -87,7 +87,7 @@ public final class Title {
      * @param title    the main text of the title
      * @param subtitle the secondary text of the title
      */
-    public Title(@NotNull BaseComponent title, @Nullable BaseComponent subtitle) {
+    public Title(@NotNull final BaseComponent title, @Nullable final BaseComponent subtitle) {
         this(title, subtitle, DEFAULT_FADE_IN, DEFAULT_STAY, DEFAULT_FADE_OUT);
     }
 
@@ -99,7 +99,7 @@ public final class Title {
      * @param title    the main text of the title
      * @param subtitle the secondary text of the title
      */
-    public Title(@NotNull BaseComponent[] title, @Nullable BaseComponent[] subtitle) {
+    public Title(@NotNull final BaseComponent[] title, @Nullable final BaseComponent[] subtitle) {
         this(title, subtitle, DEFAULT_FADE_IN, DEFAULT_STAY, DEFAULT_FADE_OUT);
     }
 
@@ -111,7 +111,7 @@ public final class Title {
      * @param title    the main text of the title
      * @param subtitle the secondary text of the title
      */
-    public Title(@NotNull String title, @Nullable String subtitle) {
+    public Title(@NotNull final String title, @Nullable final String subtitle) {
         this(title, subtitle, DEFAULT_FADE_IN, DEFAULT_STAY, DEFAULT_FADE_OUT);
     }
 
@@ -125,7 +125,7 @@ public final class Title {
      * @param fadeOut  the number of ticks for the title to fade out
      * @throws IllegalArgumentException if any of the times are negative
      */
-    public Title(@NotNull BaseComponent title, @Nullable BaseComponent subtitle, int fadeIn, int stay, int fadeOut) {
+    public Title(@NotNull final BaseComponent title, @Nullable final BaseComponent subtitle, final int fadeIn, final int stay, final int fadeOut) {
         this(
                 new BaseComponent[]{checkNotNull(title, "title")},
                 subtitle == null ? null : new BaseComponent[]{subtitle},
@@ -145,7 +145,7 @@ public final class Title {
      * @param fadeOut  the number of ticks for the title to fade out
      * @throws IllegalArgumentException if any of the times are negative
      */
-    public Title(@Nullable BaseComponent[] title, @NotNull BaseComponent[] subtitle, int fadeIn, int stay, int fadeOut) {
+    public Title(@Nullable final BaseComponent[] title, @NotNull final BaseComponent[] subtitle, final int fadeIn, final int stay, final int fadeOut) {
         checkArgument(fadeIn >= 0, "Negative fadeIn: %s", fadeIn);
         checkArgument(stay >= 0, "Negative stay: %s", stay);
         checkArgument(fadeOut >= 0, "Negative fadeOut: %s", fadeOut);
@@ -167,7 +167,7 @@ public final class Title {
      * @param stay     the number of ticks for the title to stay on screen
      * @param fadeOut  the number of ticks for the title to fade out
      */
-    public Title(@NotNull String title, @Nullable String subtitle, int fadeIn, int stay, int fadeOut) {
+    public Title(@NotNull final String title, @Nullable final String subtitle, final int fadeIn, final int stay, final int fadeOut) {
         this(
                 TextComponent.fromLegacyText(checkNotNull(title, "title")),
                 subtitle == null ? null : TextComponent.fromLegacyText(subtitle),
@@ -235,7 +235,7 @@ public final class Title {
      *
      * @param player the receiver of the title
      */
-    public void send(@NotNull Player player) {
+    public void send(@NotNull final Player player) {
         player.sendTitle(this);
     }
 
@@ -244,8 +244,8 @@ public final class Title {
      *
      * @param players the receivers of the title
      */
-    public void send(@NotNull Collection<? extends Player> players) {
-        for (Player player : players) {
+    public void send(@NotNull final Collection<? extends Player> players) {
+        for (final Player player : players) {
             player.sendTitle(this);
         }
     }
@@ -255,8 +255,8 @@ public final class Title {
      *
      * @param players the receivers of the title
      */
-    public void send(@NotNull Player @NotNull [] players) {
-        for (Player player : players) {
+    public void send(@NotNull final Player @NotNull [] players) {
+        for (final Player player : players) {
             player.sendTitle(this);
         }
     }
@@ -292,7 +292,7 @@ public final class Title {
          * @throws NullPointerException if the title is null
          */
         @NotNull
-        public Builder title(@NotNull BaseComponent title) {
+        public Builder title(@NotNull final BaseComponent title) {
             return this.title(new BaseComponent[]{checkNotNull(title, "title")});
         }
 
@@ -304,7 +304,7 @@ public final class Title {
          * @throws NullPointerException if the title is null
          */
         @NotNull
-        public Builder title(@NotNull BaseComponent[] title) {
+        public Builder title(@NotNull final BaseComponent[] title) {
             this.title = checkNotNull(title, "title");
             return this;
         }
@@ -319,7 +319,7 @@ public final class Title {
          * @throws NullPointerException if the title is null
          */
         @NotNull
-        public Builder title(@NotNull String title) {
+        public Builder title(@NotNull final String title) {
             return this.title(TextComponent.fromLegacyText(checkNotNull(title, "title")));
         }
 
@@ -330,7 +330,7 @@ public final class Title {
          * @return this builder instance
          */
         @NotNull
-        public Builder subtitle(@Nullable BaseComponent subtitle) {
+        public Builder subtitle(@Nullable final BaseComponent subtitle) {
             return this.subtitle(subtitle == null ? null : new BaseComponent[]{subtitle});
         }
 
@@ -341,7 +341,7 @@ public final class Title {
          * @return this builder instance
          */
         @NotNull
-        public Builder subtitle(@Nullable BaseComponent[] subtitle) {
+        public Builder subtitle(@Nullable final BaseComponent[] subtitle) {
             this.subtitle = subtitle;
             return this;
         }
@@ -355,7 +355,7 @@ public final class Title {
          * @return this builder instance
          */
         @NotNull
-        public Builder subtitle(@Nullable String subtitle) {
+        public Builder subtitle(@Nullable final String subtitle) {
             return this.subtitle(subtitle == null ? null : TextComponent.fromLegacyText(subtitle));
         }
 
@@ -367,7 +367,7 @@ public final class Title {
          * @throws IllegalArgumentException if it is negative
          */
         @NotNull
-        public Builder fadeIn(int fadeIn) {
+        public Builder fadeIn(final int fadeIn) {
             checkArgument(fadeIn >= 0, "Negative fadeIn: %s", fadeIn);
             this.fadeIn = fadeIn;
             return this;
@@ -382,7 +382,7 @@ public final class Title {
          * @throws IllegalArgumentException if it is negative
          */
         @NotNull
-        public Builder stay(int stay) {
+        public Builder stay(final int stay) {
             checkArgument(stay >= 0, "Negative stay: %s", stay);
             this.stay = stay;
             return this;
@@ -396,7 +396,7 @@ public final class Title {
          * @throws IllegalArgumentException if it is negative
          */
         @NotNull
-        public Builder fadeOut(int fadeOut) {
+        public Builder fadeOut(final int fadeOut) {
             checkArgument(fadeOut >= 0, "Negative fadeOut: %s", fadeOut);
             this.fadeOut = fadeOut;
             return this;
diff --git a/src/main/java/com/destroystokyo/paper/block/TargetBlockInfo.java b/src/main/java/com/destroystokyo/paper/block/TargetBlockInfo.java
index d9666a3b79581525857c09a4afb9187441be068a..f6d3177566b04023a839b128fbca29831e2adf56 100644
--- a/src/main/java/com/destroystokyo/paper/block/TargetBlockInfo.java
+++ b/src/main/java/com/destroystokyo/paper/block/TargetBlockInfo.java
@@ -14,7 +14,7 @@ public class TargetBlockInfo {
     private final @NotNull Block block;
     private final @NotNull BlockFace blockFace;
 
-    public TargetBlockInfo(@NotNull Block block, @NotNull BlockFace blockFace) {
+    public TargetBlockInfo(@NotNull final Block block, @NotNull final BlockFace blockFace) {
         this.block = block;
         this.blockFace = blockFace;
     }
diff --git a/src/main/java/com/destroystokyo/paper/entity/Pathfinder.java b/src/main/java/com/destroystokyo/paper/entity/Pathfinder.java
index 43f062257472a06e9e64c2feef6c3b1012aee00e..12b75ccbf2ac52c3250719006a3269d2d77b92ea 100644
--- a/src/main/java/com/destroystokyo/paper/entity/Pathfinder.java
+++ b/src/main/java/com/destroystokyo/paper/entity/Pathfinder.java
@@ -66,7 +66,7 @@ public interface Pathfinder {
      * @param loc Location to navigate to
      * @return If the pathfinding was successfully started
      */
-    default boolean moveTo(@NotNull Location loc) {
+    default boolean moveTo(@NotNull final Location loc) {
         return moveTo(loc, 1);
     }
 
@@ -77,8 +77,8 @@ public interface Pathfinder {
      * @param speed Speed multiplier to navigate at, where 1 is 'normal'
      * @return If the pathfinding was successfully started
      */
-    default boolean moveTo(@NotNull Location loc, double speed) {
-        PathResult path = findPath(loc);
+    default boolean moveTo(@NotNull final Location loc, final double speed) {
+        final PathResult path = findPath(loc);
         return path != null && moveTo(path, speed);
     }
 
@@ -94,7 +94,7 @@ public interface Pathfinder {
      * @param target the Entity to navigate to
      * @return If the pathfinding was successfully started
      */
-    default boolean moveTo(@NotNull LivingEntity target) {
+    default boolean moveTo(@NotNull final LivingEntity target) {
         return moveTo(target, 1);
     }
 
@@ -111,8 +111,8 @@ public interface Pathfinder {
      * @param speed Speed multiplier to navigate at, where 1 is 'normal'
      * @return If the pathfinding was successfully started
      */
-    default boolean moveTo(@NotNull LivingEntity target, double speed) {
-        PathResult path = findPath(target);
+    default boolean moveTo(@NotNull final LivingEntity target, final double speed) {
+        final PathResult path = findPath(target);
         return path != null && moveTo(path, speed);
     }
 
@@ -123,7 +123,7 @@ public interface Pathfinder {
      * @param path The Path to start following
      * @return If the pathfinding was successfully started
      */
-    default boolean moveTo(@NotNull PathResult path) {
+    default boolean moveTo(@NotNull final PathResult path) {
         return moveTo(path, 1);
     }
 
diff --git a/src/main/java/com/destroystokyo/paper/entity/TargetEntityInfo.java b/src/main/java/com/destroystokyo/paper/entity/TargetEntityInfo.java
index 08f3108662cee13c6dff65e5d7c0cfdd73300747..9b9a16e8fa42239941f8ca28e53f0672faa439fa 100644
--- a/src/main/java/com/destroystokyo/paper/entity/TargetEntityInfo.java
+++ b/src/main/java/com/destroystokyo/paper/entity/TargetEntityInfo.java
@@ -13,7 +13,7 @@ public class TargetEntityInfo {
     private final @NotNull Entity entity;
     private final @NotNull Vector hitVec;
 
-    public TargetEntityInfo(@NotNull Entity entity, @NotNull Vector hitVec) {
+    public TargetEntityInfo(@NotNull final Entity entity, @NotNull final Vector hitVec) {
         this.entity = entity;
         this.hitVec = hitVec;
     }
diff --git a/src/main/java/com/destroystokyo/paper/entity/ai/GoalKey.java b/src/main/java/com/destroystokyo/paper/entity/ai/GoalKey.java
index bc30cadda2b5e2d90d139810edd7e3c9a1ec884a..2bc0d3b1bdea2d3928dc68231be67b5906deca2f 100644
--- a/src/main/java/com/destroystokyo/paper/entity/ai/GoalKey.java
+++ b/src/main/java/com/destroystokyo/paper/entity/ai/GoalKey.java
@@ -22,7 +22,7 @@ public class GoalKey<T extends Mob> {
     private final @NotNull Class<T> entityClass;
     private final @NotNull NamespacedKey namespacedKey;
 
-    private GoalKey(@NotNull Class<T> entityClass, @NotNull NamespacedKey namespacedKey) {
+    private GoalKey(@NotNull final Class<T> entityClass, @NotNull final NamespacedKey namespacedKey) {
         this.entityClass = entityClass;
         this.namespacedKey = namespacedKey;
     }
@@ -38,10 +38,10 @@ public class GoalKey<T extends Mob> {
     }
 
     @Override
-    public boolean equals(@Nullable Object o) {
+    public boolean equals(@Nullable final Object o) {
         if (this == o) return true;
         if (o == null || getClass() != o.getClass()) return false;
-        GoalKey<?> goalKey = (GoalKey<?>) o;
+        final GoalKey<?> goalKey = (GoalKey<?>) o;
         return Objects.equal(entityClass, goalKey.entityClass) &&
                Objects.equal(namespacedKey, goalKey.namespacedKey);
     }
@@ -60,7 +60,7 @@ public class GoalKey<T extends Mob> {
     }
 
     @NotNull
-    public static <A extends Mob> GoalKey<A> of(@NotNull Class<A> entityClass, @NotNull NamespacedKey namespacedKey) {
+    public static <A extends Mob> GoalKey<A> of(@NotNull final Class<A> entityClass, @NotNull final NamespacedKey namespacedKey) {
         return new GoalKey<>(entityClass, namespacedKey);
     }
 }
diff --git a/src/main/java/com/destroystokyo/paper/entity/villager/Reputation.java b/src/main/java/com/destroystokyo/paper/entity/villager/Reputation.java
index 0a69e21b0b3001c9cc50951b4b8bd593f6fa74be..0a1da3b2883df80d2aef50c3a11bee2baf452def 100644
--- a/src/main/java/com/destroystokyo/paper/entity/villager/Reputation.java
+++ b/src/main/java/com/destroystokyo/paper/entity/villager/Reputation.java
@@ -18,7 +18,7 @@ public final class Reputation {
         this(new EnumMap<>(ReputationType.class));
     }
 
-    public Reputation(@NotNull Map<ReputationType, Integer> reputation) {
+    public Reputation(@NotNull final Map<ReputationType, Integer> reputation) {
         Preconditions.checkNotNull(reputation, "reputation cannot be null");
         this.reputation = reputation;
     }
@@ -29,7 +29,7 @@ public final class Reputation {
      * @param type The {@link ReputationType type} of reputation to get.
      * @return The value of the {@link ReputationType type}.
      */
-    public int getReputation(@NotNull ReputationType type) {
+    public int getReputation(@NotNull final ReputationType type) {
         Preconditions.checkNotNull(type, "the reputation type cannot be null");
         return this.reputation.getOrDefault(type, 0);
     }
@@ -40,7 +40,7 @@ public final class Reputation {
      * @param type The {@link ReputationType type} of reputation to set.
      * @param value The value of the {@link ReputationType type}.
      */
-    public void setReputation(@NotNull ReputationType type, int value) {
+    public void setReputation(@NotNull final ReputationType type, final int value) {
         Preconditions.checkNotNull(type, "the reputation type cannot be null");
         this.reputation.put(type, value);
     }
@@ -51,7 +51,7 @@ public final class Reputation {
      * @param type The {@link ReputationType type} to check
      * @return If there is a value for this {@link ReputationType type} set.
      */
-    public boolean hasReputationSet(@NotNull ReputationType type) {
+    public boolean hasReputationSet(@NotNull final ReputationType type) {
         return this.reputation.containsKey(type);
     }
 }
diff --git a/src/main/java/com/destroystokyo/paper/event/block/AnvilDamagedEvent.java b/src/main/java/com/destroystokyo/paper/event/block/AnvilDamagedEvent.java
index 9f8041e76d03572fcfe0099f23f1615157856bc3..b9c847bbafa0fe06e8ae7592e853127877ea3eea 100644
--- a/src/main/java/com/destroystokyo/paper/event/block/AnvilDamagedEvent.java
+++ b/src/main/java/com/destroystokyo/paper/event/block/AnvilDamagedEvent.java
@@ -18,7 +18,7 @@ public class AnvilDamagedEvent extends InventoryEvent implements Cancellable {
     private boolean cancel;
     private DamageState damageState;
 
-    public AnvilDamagedEvent(@NotNull InventoryView inventory, @NotNull BlockData blockData) {
+    public AnvilDamagedEvent(@NotNull final InventoryView inventory, @NotNull final BlockData blockData) {
         super(inventory);
         this.damageState = DamageState.getState(blockData);
     }
@@ -44,7 +44,7 @@ public class AnvilDamagedEvent extends InventoryEvent implements Cancellable {
      *
      * @param damageState Damage state
      */
-    public void setDamageState(@NotNull DamageState damageState) {
+    public void setDamageState(@NotNull final DamageState damageState) {
         this.damageState = damageState;
     }
 
@@ -62,7 +62,7 @@ public class AnvilDamagedEvent extends InventoryEvent implements Cancellable {
      *
      * @param breaking True if breaking
      */
-    public void setBreaking(boolean breaking) {
+    public void setBreaking(final boolean breaking) {
         if (breaking) {
             damageState = DamageState.BROKEN;
         } else if (damageState == DamageState.BROKEN) {
@@ -74,7 +74,7 @@ public class AnvilDamagedEvent extends InventoryEvent implements Cancellable {
         return cancel;
     }
 
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.cancel = cancel;
     }
 
@@ -99,7 +99,7 @@ public class AnvilDamagedEvent extends InventoryEvent implements Cancellable {
 
         private final Material material;
 
-        DamageState(@NotNull Material material) {
+        DamageState(@NotNull final Material material) {
             this.material = material;
         }
 
@@ -121,7 +121,7 @@ public class AnvilDamagedEvent extends InventoryEvent implements Cancellable {
          * @throws IllegalArgumentException If non anvil block data is given
          */
         @NotNull
-        public static DamageState getState(@Nullable BlockData blockData) {
+        public static DamageState getState(@Nullable final BlockData blockData) {
             return blockData == null ? BROKEN : getState(blockData.getMaterial());
         }
 
@@ -133,11 +133,11 @@ public class AnvilDamagedEvent extends InventoryEvent implements Cancellable {
          * @throws IllegalArgumentException If non anvil material is given
          */
         @NotNull
-        public static DamageState getState(@Nullable Material material) {
+        public static DamageState getState(@Nullable final Material material) {
             if (material == null) {
                 return BROKEN;
             }
-            for (DamageState state : values()) {
+            for (final DamageState state : values()) {
                 if (state.material == material) {
                     return state;
                 }
diff --git a/src/main/java/com/destroystokyo/paper/event/block/BeaconEffectEvent.java b/src/main/java/com/destroystokyo/paper/event/block/BeaconEffectEvent.java
index ea929a3e4c2c28452cfcf54ee4a44a64d13c8ab8..fe23aa59c59b6a93d16cd8261f611e95b78926ab 100644
--- a/src/main/java/com/destroystokyo/paper/event/block/BeaconEffectEvent.java
+++ b/src/main/java/com/destroystokyo/paper/event/block/BeaconEffectEvent.java
@@ -18,7 +18,7 @@ public class BeaconEffectEvent extends BlockEvent implements Cancellable {
     private final Player player;
     private final boolean primary;
 
-    public BeaconEffectEvent(@NotNull Block block, @NotNull PotionEffect effect, @NotNull Player player, boolean primary) {
+    public BeaconEffectEvent(@NotNull final Block block, @NotNull final PotionEffect effect, @NotNull final Player player, final boolean primary) {
         super(block);
         this.effect = effect;
         this.player = player;
@@ -31,7 +31,7 @@ public class BeaconEffectEvent extends BlockEvent implements Cancellable {
     }
 
     @Override
-    public void setCancelled(boolean cancelled) {
+    public void setCancelled(final boolean cancelled) {
         this.cancelled = cancelled;
     }
 
@@ -50,7 +50,7 @@ public class BeaconEffectEvent extends BlockEvent implements Cancellable {
      *
      * @param effect Potion effect
      */
-    public void setEffect(@NotNull PotionEffect effect) {
+    public void setEffect(@NotNull final PotionEffect effect) {
         this.effect = effect;
     }
 
diff --git a/src/main/java/com/destroystokyo/paper/event/block/BlockDestroyEvent.java b/src/main/java/com/destroystokyo/paper/event/block/BlockDestroyEvent.java
index 051b2ef76a914228338fa28553ad739bd2a0278c..d5608a8c1b7a4555201ae140eb178f5617d1953c 100644
--- a/src/main/java/com/destroystokyo/paper/event/block/BlockDestroyEvent.java
+++ b/src/main/java/com/destroystokyo/paper/event/block/BlockDestroyEvent.java
@@ -28,7 +28,7 @@ public class BlockDestroyEvent extends BlockEvent implements Cancellable {
 
     private boolean cancelled = false;
 
-    public BlockDestroyEvent(@NotNull Block block, @NotNull BlockData newState, boolean willDrop) {
+    public BlockDestroyEvent(@NotNull final Block block, @NotNull final BlockData newState, final boolean willDrop) {
         super(block);
         this.newState = newState;
         this.willDrop = willDrop;
@@ -52,7 +52,7 @@ public class BlockDestroyEvent extends BlockEvent implements Cancellable {
     /**
      * @param willDrop If the server is going to drop the block in question with this destroy event
      */
-    public void setWillDrop(boolean willDrop) {
+    public void setWillDrop(final boolean willDrop) {
         this.willDrop = willDrop;
     }
 
@@ -66,7 +66,7 @@ public class BlockDestroyEvent extends BlockEvent implements Cancellable {
     /**
      * @param playEffect If the server should play the sound effect for this destruction
      */
-    public void setPlayEffect(boolean playEffect) {
+    public void setPlayEffect(final boolean playEffect) {
         this.playEffect = playEffect;
     }
 
@@ -83,7 +83,7 @@ public class BlockDestroyEvent extends BlockEvent implements Cancellable {
      * @param cancel true if you wish to cancel this event
      */
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         cancelled = cancel;
     }
 
diff --git a/src/main/java/com/destroystokyo/paper/event/block/TNTPrimeEvent.java b/src/main/java/com/destroystokyo/paper/event/block/TNTPrimeEvent.java
index 563ffad23b6577b579d51a3bb7947b20ebaaa2ed..c518d5b1530eb2ba74f8e77361f75f6468ae9de9 100644
--- a/src/main/java/com/destroystokyo/paper/event/block/TNTPrimeEvent.java
+++ b/src/main/java/com/destroystokyo/paper/event/block/TNTPrimeEvent.java
@@ -22,7 +22,7 @@ public class TNTPrimeEvent extends BlockEvent implements Cancellable {
     @NotNull private final PrimeReason reason;
     @Nullable private final Entity primerEntity;
 
-    public TNTPrimeEvent(@NotNull Block theBlock, @NotNull PrimeReason reason, @Nullable Entity primerEntity) {
+    public TNTPrimeEvent(@NotNull final Block theBlock, @NotNull final PrimeReason reason, @Nullable final Entity primerEntity) {
         super(theBlock);
         this.reason = reason;
         this.primerEntity = primerEntity;
@@ -68,7 +68,7 @@ public class TNTPrimeEvent extends BlockEvent implements Cancellable {
      * @param cancel whether spawning {@link org.bukkit.entity.TNTPrimed} should be cancelled or not
      */
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.cancelled = cancel;
     }
 
diff --git a/src/main/java/com/destroystokyo/paper/event/entity/CreeperIgniteEvent.java b/src/main/java/com/destroystokyo/paper/event/entity/CreeperIgniteEvent.java
index e9768c919a1860881802ab68eff559874590ac1c..2ae4159a26dc6431631107cf995d9affc5b626c6 100644
--- a/src/main/java/com/destroystokyo/paper/event/entity/CreeperIgniteEvent.java
+++ b/src/main/java/com/destroystokyo/paper/event/entity/CreeperIgniteEvent.java
@@ -16,7 +16,7 @@ public class CreeperIgniteEvent extends EntityEvent implements Cancellable {
     private boolean canceled;
     private boolean ignited;
 
-    public CreeperIgniteEvent(@NotNull Creeper creeper, boolean ignited) {
+    public CreeperIgniteEvent(@NotNull final Creeper creeper, final boolean ignited) {
         super(creeper);
         this.ignited = ignited;
     }
@@ -31,7 +31,7 @@ public class CreeperIgniteEvent extends EntityEvent implements Cancellable {
         return ignited;
     }
 
-    public void setIgnited(boolean ignited) {
+    public void setIgnited(final boolean ignited) {
         this.ignited = ignited;
     }
 
@@ -39,7 +39,7 @@ public class CreeperIgniteEvent extends EntityEvent implements Cancellable {
         return canceled;
     }
 
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         canceled = cancel;
     }
 
diff --git a/src/main/java/com/destroystokyo/paper/event/entity/EnderDragonFireballHitEvent.java b/src/main/java/com/destroystokyo/paper/event/entity/EnderDragonFireballHitEvent.java
index 118c7b6772a52c250649af2a9286f483f43da385..de865a364c13c71ed917d51fd6f9bf532c55d0a2 100644
--- a/src/main/java/com/destroystokyo/paper/event/entity/EnderDragonFireballHitEvent.java
+++ b/src/main/java/com/destroystokyo/paper/event/entity/EnderDragonFireballHitEvent.java
@@ -18,7 +18,7 @@ public class EnderDragonFireballHitEvent extends EntityEvent implements Cancella
     @Nullable private final Collection<LivingEntity> targets;
     @NotNull private final AreaEffectCloud areaEffectCloud;
 
-    public EnderDragonFireballHitEvent(@NotNull DragonFireball fireball, @Nullable Collection<LivingEntity> targets, @NotNull AreaEffectCloud areaEffectCloud) {
+    public EnderDragonFireballHitEvent(@NotNull final DragonFireball fireball, @Nullable final Collection<LivingEntity> targets, @NotNull final AreaEffectCloud areaEffectCloud) {
         super(fireball);
         this.targets = targets;
         this.areaEffectCloud = areaEffectCloud;
@@ -73,7 +73,7 @@ public class EnderDragonFireballHitEvent extends EntityEvent implements Cancella
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         cancelled = cancel;
     }
 }
diff --git a/src/main/java/com/destroystokyo/paper/event/entity/EnderDragonFlameEvent.java b/src/main/java/com/destroystokyo/paper/event/entity/EnderDragonFlameEvent.java
index 1915177f4b8f8013656fbdb41240f6c5c88f95d7..b6eb09d47b542a869379cc64bd68a60ca0eaf35e 100644
--- a/src/main/java/com/destroystokyo/paper/event/entity/EnderDragonFlameEvent.java
+++ b/src/main/java/com/destroystokyo/paper/event/entity/EnderDragonFlameEvent.java
@@ -13,7 +13,7 @@ import org.jetbrains.annotations.NotNull;
 public class EnderDragonFlameEvent extends EntityEvent implements Cancellable {
     @NotNull private final AreaEffectCloud areaEffectCloud;
 
-    public EnderDragonFlameEvent(@NotNull EnderDragon enderDragon, @NotNull AreaEffectCloud areaEffectCloud) {
+    public EnderDragonFlameEvent(@NotNull final EnderDragon enderDragon, @NotNull final AreaEffectCloud areaEffectCloud) {
         super(enderDragon);
         this.areaEffectCloud = areaEffectCloud;
     }
@@ -55,7 +55,7 @@ public class EnderDragonFlameEvent extends EntityEvent implements Cancellable {
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         cancelled = cancel;
     }
 }
diff --git a/src/main/java/com/destroystokyo/paper/event/entity/EnderDragonShootFireballEvent.java b/src/main/java/com/destroystokyo/paper/event/entity/EnderDragonShootFireballEvent.java
index 8414bd805ec68d7b305fbf645c59f8d5b762c9ce..c62e4a274c3ff81a6b16e5f5f400e59a5bd2a1a9 100644
--- a/src/main/java/com/destroystokyo/paper/event/entity/EnderDragonShootFireballEvent.java
+++ b/src/main/java/com/destroystokyo/paper/event/entity/EnderDragonShootFireballEvent.java
@@ -13,7 +13,7 @@ import org.jetbrains.annotations.NotNull;
 public class EnderDragonShootFireballEvent extends EntityEvent implements Cancellable {
     @NotNull private final DragonFireball fireball;
 
-    public EnderDragonShootFireballEvent(@NotNull EnderDragon entity, @NotNull DragonFireball fireball) {
+    public EnderDragonShootFireballEvent(@NotNull final EnderDragon entity, @NotNull final DragonFireball fireball) {
         super(entity);
         this.fireball = fireball;
     }
@@ -55,7 +55,7 @@ public class EnderDragonShootFireballEvent extends EntityEvent implements Cancel
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         cancelled = cancel;
     }
 }
diff --git a/src/main/java/com/destroystokyo/paper/event/entity/EndermanAttackPlayerEvent.java b/src/main/java/com/destroystokyo/paper/event/entity/EndermanAttackPlayerEvent.java
index 84ee5904b450d0b7e024039875d8a18cf10b03aa..495b4ef0c2c40b9e1a24d3c5946fea1f0e5031bb 100644
--- a/src/main/java/com/destroystokyo/paper/event/entity/EndermanAttackPlayerEvent.java
+++ b/src/main/java/com/destroystokyo/paper/event/entity/EndermanAttackPlayerEvent.java
@@ -39,7 +39,7 @@ import org.jetbrains.annotations.NotNull;
 public class EndermanAttackPlayerEvent extends EntityEvent implements Cancellable {
     @NotNull private final Player player;
 
-    public EndermanAttackPlayerEvent(@NotNull Enderman entity, @NotNull Player player) {
+    public EndermanAttackPlayerEvent(@NotNull final Enderman entity, @NotNull final Player player) {
         super(entity);
         this.player = player;
     }
@@ -93,7 +93,7 @@ public class EndermanAttackPlayerEvent extends EntityEvent implements Cancellabl
      * @param cancel true if you wish to cancel this event
      */
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         cancelled = cancel;
     }
 }
diff --git a/src/main/java/com/destroystokyo/paper/event/entity/EndermanEscapeEvent.java b/src/main/java/com/destroystokyo/paper/event/entity/EndermanEscapeEvent.java
index bed4727417f57337b1f2f5b09e3c7efbbc01e635..92247ecafc53e92f97e4d38fc0dcb3f1c354c407 100644
--- a/src/main/java/com/destroystokyo/paper/event/entity/EndermanEscapeEvent.java
+++ b/src/main/java/com/destroystokyo/paper/event/entity/EndermanEscapeEvent.java
@@ -9,7 +9,7 @@ import org.jetbrains.annotations.NotNull;
 public class EndermanEscapeEvent extends EntityEvent implements Cancellable {
     @NotNull private final Reason reason;
 
-    public EndermanEscapeEvent(@NotNull Enderman entity, @NotNull Reason reason) {
+    public EndermanEscapeEvent(@NotNull final Enderman entity, @NotNull final Reason reason) {
         super(entity);
         this.reason = reason;
     }
@@ -56,7 +56,7 @@ public class EndermanEscapeEvent extends EntityEvent implements Cancellable {
      * @param cancel true if you wish to cancel this event
      */
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         cancelled = cancel;
     }
 
diff --git a/src/main/java/com/destroystokyo/paper/event/entity/EntityAddToWorldEvent.java b/src/main/java/com/destroystokyo/paper/event/entity/EntityAddToWorldEvent.java
index a8c4c1cee9ed97523458e21995dd2a87818c4ca7..adee19a6b000bb64d13f59c3213a977dac17dd60 100644
--- a/src/main/java/com/destroystokyo/paper/event/entity/EntityAddToWorldEvent.java
+++ b/src/main/java/com/destroystokyo/paper/event/entity/EntityAddToWorldEvent.java
@@ -13,7 +13,7 @@ import org.jetbrains.annotations.NotNull;
  */
 public class EntityAddToWorldEvent extends EntityEvent {
 
-    public EntityAddToWorldEvent(@NotNull Entity entity) {
+    public EntityAddToWorldEvent(@NotNull final Entity entity) {
         super(entity);
     }
 
diff --git a/src/main/java/com/destroystokyo/paper/event/entity/EntityJumpEvent.java b/src/main/java/com/destroystokyo/paper/event/entity/EntityJumpEvent.java
index f0067c2e953d18e1a33536980071ba3f0152ecb4..425330e7f43bda2394dcb8ee68b196e7aaf55219 100644
--- a/src/main/java/com/destroystokyo/paper/event/entity/EntityJumpEvent.java
+++ b/src/main/java/com/destroystokyo/paper/event/entity/EntityJumpEvent.java
@@ -15,7 +15,7 @@ public class EntityJumpEvent extends EntityEvent implements Cancellable {
     private static final HandlerList handlers = new HandlerList();
     private boolean canceled;
 
-    public EntityJumpEvent(@NotNull LivingEntity entity) {
+    public EntityJumpEvent(@NotNull final LivingEntity entity) {
         super(entity);
     }
 
@@ -29,7 +29,7 @@ public class EntityJumpEvent extends EntityEvent implements Cancellable {
         return canceled;
     }
 
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         canceled = cancel;
     }
 
diff --git a/src/main/java/com/destroystokyo/paper/event/entity/EntityKnockbackByEntityEvent.java b/src/main/java/com/destroystokyo/paper/event/entity/EntityKnockbackByEntityEvent.java
index 42fdf7a5bfab99a61ff2fbf562f2872ac360bef2..0153dfb35aeae5e62425253542b16923d0c680ec 100644
--- a/src/main/java/com/destroystokyo/paper/event/entity/EntityKnockbackByEntityEvent.java
+++ b/src/main/java/com/destroystokyo/paper/event/entity/EntityKnockbackByEntityEvent.java
@@ -14,7 +14,7 @@ import org.jetbrains.annotations.NotNull;
 public class EntityKnockbackByEntityEvent extends EntityPushedByEntityAttackEvent {
     private final float knockbackStrength;
 
-    public EntityKnockbackByEntityEvent(@NotNull LivingEntity entity, @NotNull Entity hitBy, float knockbackStrength, @NotNull Vector acceleration) {
+    public EntityKnockbackByEntityEvent(@NotNull final LivingEntity entity, @NotNull final Entity hitBy, final float knockbackStrength, @NotNull final Vector acceleration) {
         super(entity, hitBy, acceleration);
         this.knockbackStrength = knockbackStrength;
     }
diff --git a/src/main/java/com/destroystokyo/paper/event/entity/EntityPathfindEvent.java b/src/main/java/com/destroystokyo/paper/event/entity/EntityPathfindEvent.java
index 63e46b2fb1b12b36fcb1e98b178cf29dd2e3d1b5..577301921036ec15d3040cac09a5430be0886217 100644
--- a/src/main/java/com/destroystokyo/paper/event/entity/EntityPathfindEvent.java
+++ b/src/main/java/com/destroystokyo/paper/event/entity/EntityPathfindEvent.java
@@ -18,7 +18,7 @@ public class EntityPathfindEvent extends EntityEvent implements Cancellable {
     @Nullable private final Entity targetEntity;
     @NotNull private final Location loc;
 
-    public EntityPathfindEvent(@NotNull Entity entity, @NotNull Location loc, @Nullable Entity targetEntity) {
+    public EntityPathfindEvent(@NotNull final Entity entity, @NotNull final Location loc, @Nullable final Entity targetEntity) {
         super(entity);
         this.targetEntity = targetEntity;
         this.loc = loc;
@@ -76,7 +76,7 @@ public class EntityPathfindEvent extends EntityEvent implements Cancellable {
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         cancelled = cancel;
     }
 }
diff --git a/src/main/java/com/destroystokyo/paper/event/entity/EntityRemoveFromWorldEvent.java b/src/main/java/com/destroystokyo/paper/event/entity/EntityRemoveFromWorldEvent.java
index d23773d9013bfa4da085b91669e39768fb6e8800..2ceb504a5d86a29e5f4c4f1d5bb1fb8670210a6b 100644
--- a/src/main/java/com/destroystokyo/paper/event/entity/EntityRemoveFromWorldEvent.java
+++ b/src/main/java/com/destroystokyo/paper/event/entity/EntityRemoveFromWorldEvent.java
@@ -10,7 +10,7 @@ import org.jetbrains.annotations.NotNull;
  */
 public class EntityRemoveFromWorldEvent extends EntityEvent {
 
-    public EntityRemoveFromWorldEvent(@NotNull Entity entity) {
+    public EntityRemoveFromWorldEvent(@NotNull final Entity entity) {
         super(entity);
     }
 
diff --git a/src/main/java/com/destroystokyo/paper/event/entity/EntityTeleportEndGatewayEvent.java b/src/main/java/com/destroystokyo/paper/event/entity/EntityTeleportEndGatewayEvent.java
index bfc69a43c291fbed91b9d0387e4ef18b0ed1b9de..3bf3185a007df79403681f49eb9831cc4f2bf782 100644
--- a/src/main/java/com/destroystokyo/paper/event/entity/EntityTeleportEndGatewayEvent.java
+++ b/src/main/java/com/destroystokyo/paper/event/entity/EntityTeleportEndGatewayEvent.java
@@ -13,7 +13,7 @@ public class EntityTeleportEndGatewayEvent extends EntityTeleportEvent {
 
     @NotNull private final EndGateway gateway;
 
-    public EntityTeleportEndGatewayEvent(@NotNull Entity what, @NotNull Location from, @NotNull Location to, @NotNull EndGateway gateway) {
+    public EntityTeleportEndGatewayEvent(@NotNull final Entity what, @NotNull final Location from, @NotNull final Location to, @NotNull final EndGateway gateway) {
         super(what, from, to);
         this.gateway = gateway;
     }
diff --git a/src/main/java/com/destroystokyo/paper/event/entity/EntityTransformedEvent.java b/src/main/java/com/destroystokyo/paper/event/entity/EntityTransformedEvent.java
index b2f70131502e9841674275b2ac6d3a2392cec382..28d9e1d49a96511cd80f1474253e614a992b7d58 100644
--- a/src/main/java/com/destroystokyo/paper/event/entity/EntityTransformedEvent.java
+++ b/src/main/java/com/destroystokyo/paper/event/entity/EntityTransformedEvent.java
@@ -22,7 +22,7 @@ public class EntityTransformedEvent extends EntityEvent implements Cancellable {
     private final Entity transformed;
     private final TransformedReason reason;
 
-    public EntityTransformedEvent(@NotNull Entity entity, Entity transformed, TransformedReason reason) {
+    public EntityTransformedEvent(@NotNull final Entity entity, final Entity transformed, final TransformedReason reason) {
         super(entity);
         this.transformed = transformed;
         this.reason = reason;
@@ -64,7 +64,7 @@ public class EntityTransformedEvent extends EntityEvent implements Cancellable {
     }
 
     @Override
-    public void setCancelled(boolean cancel){
+    public void setCancelled(final boolean cancel){
         cancelled = cancel;
     }
 
diff --git a/src/main/java/com/destroystokyo/paper/event/entity/EntityZapEvent.java b/src/main/java/com/destroystokyo/paper/event/entity/EntityZapEvent.java
index 1c5fa066c9e5e1b1a06df30842a4c7acc4742df8..c54b46a50dfdf7e2854ae7ee7b8b453cefedc990 100644
--- a/src/main/java/com/destroystokyo/paper/event/entity/EntityZapEvent.java
+++ b/src/main/java/com/destroystokyo/paper/event/entity/EntityZapEvent.java
@@ -29,7 +29,7 @@ public class EntityZapEvent extends EntityTransformEvent implements Cancellable
         return cancelled;
     }
 
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.cancelled = cancel;
     }
 
diff --git a/src/main/java/com/destroystokyo/paper/event/entity/ExperienceOrbMergeEvent.java b/src/main/java/com/destroystokyo/paper/event/entity/ExperienceOrbMergeEvent.java
index 0ce3e397716c28c30ed05e153babd0bfb9dd354a..09214f5e3d73d83b37ff4f858e770e8157167808 100644
--- a/src/main/java/com/destroystokyo/paper/event/entity/ExperienceOrbMergeEvent.java
+++ b/src/main/java/com/destroystokyo/paper/event/entity/ExperienceOrbMergeEvent.java
@@ -36,7 +36,7 @@ public class ExperienceOrbMergeEvent extends EntityEvent implements Cancellable
     @NotNull private final ExperienceOrb mergeTarget;
     @NotNull private final ExperienceOrb mergeSource;
 
-    public ExperienceOrbMergeEvent(@NotNull ExperienceOrb mergeTarget, @NotNull ExperienceOrb mergeSource) {
+    public ExperienceOrbMergeEvent(@NotNull final ExperienceOrb mergeTarget, @NotNull final ExperienceOrb mergeSource) {
         super(mergeTarget);
         this.mergeTarget = mergeTarget;
         this.mergeSource = mergeSource;
@@ -81,7 +81,7 @@ public class ExperienceOrbMergeEvent extends EntityEvent implements Cancellable
      * @param cancel true if you wish to cancel this event, and prevent the orbs from merging
      */
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         cancelled = cancel;
     }
 }
diff --git a/src/main/java/com/destroystokyo/paper/event/entity/PhantomPreSpawnEvent.java b/src/main/java/com/destroystokyo/paper/event/entity/PhantomPreSpawnEvent.java
index 9022f697ab244df43074e48c9150f39d44217531..25dd21fce55598ac81a966b6274b9a053441ee58 100644
--- a/src/main/java/com/destroystokyo/paper/event/entity/PhantomPreSpawnEvent.java
+++ b/src/main/java/com/destroystokyo/paper/event/entity/PhantomPreSpawnEvent.java
@@ -14,7 +14,7 @@ import org.jetbrains.annotations.Nullable;
 public class PhantomPreSpawnEvent extends PreCreatureSpawnEvent {
     @NotNull private final Entity entity;
 
-    public PhantomPreSpawnEvent(@NotNull Location location, @NotNull Entity entity, @NotNull CreatureSpawnEvent.SpawnReason reason) {
+    public PhantomPreSpawnEvent(@NotNull final Location location, @NotNull final Entity entity, @NotNull final CreatureSpawnEvent.SpawnReason reason) {
         super(location, EntityType.PHANTOM, reason);
         this.entity = entity;
     }
diff --git a/src/main/java/com/destroystokyo/paper/event/entity/PlayerNaturallySpawnCreaturesEvent.java b/src/main/java/com/destroystokyo/paper/event/entity/PlayerNaturallySpawnCreaturesEvent.java
index 1a89870e118aae3fd7c0b7f218c14f51083d1946..bc6b009d062401b46113d7ec4dbcc178823b3157 100644
--- a/src/main/java/com/destroystokyo/paper/event/entity/PlayerNaturallySpawnCreaturesEvent.java
+++ b/src/main/java/com/destroystokyo/paper/event/entity/PlayerNaturallySpawnCreaturesEvent.java
@@ -12,7 +12,7 @@ import org.jetbrains.annotations.NotNull;
 public class PlayerNaturallySpawnCreaturesEvent extends PlayerEvent implements Cancellable {
     private byte radius;
 
-    public PlayerNaturallySpawnCreaturesEvent(@NotNull Player player, byte radius) {
+    public PlayerNaturallySpawnCreaturesEvent(@NotNull final Player player, final byte radius) {
         super(player);
         this.radius = radius;
     }
@@ -27,7 +27,7 @@ public class PlayerNaturallySpawnCreaturesEvent extends PlayerEvent implements C
     /**
      * @param radius The radius of chunks around this player to be included in natural spawn selection
      */
-    public void setSpawnRadius(byte radius) {
+    public void setSpawnRadius(final byte radius) {
         this.radius = radius;
     }
 
@@ -57,7 +57,7 @@ public class PlayerNaturallySpawnCreaturesEvent extends PlayerEvent implements C
      * @param cancel true if you wish to cancel this event, and not include this players chunks for natural spawning
      */
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         cancelled = cancel;
     }
 }
diff --git a/src/main/java/com/destroystokyo/paper/event/entity/PreCreatureSpawnEvent.java b/src/main/java/com/destroystokyo/paper/event/entity/PreCreatureSpawnEvent.java
index 02e421b0bb4ce3529ef1c4d34ec8a0c0345cce57..911d303c163d503455824bf141f56954b4197109 100644
--- a/src/main/java/com/destroystokyo/paper/event/entity/PreCreatureSpawnEvent.java
+++ b/src/main/java/com/destroystokyo/paper/event/entity/PreCreatureSpawnEvent.java
@@ -25,7 +25,7 @@ public class PreCreatureSpawnEvent extends Event implements Cancellable {
     @NotNull private final CreatureSpawnEvent.SpawnReason reason;
     private boolean shouldAbortSpawn;
 
-    public PreCreatureSpawnEvent(@NotNull Location location, @NotNull EntityType type, @NotNull CreatureSpawnEvent.SpawnReason reason) {
+    public PreCreatureSpawnEvent(@NotNull final Location location, @NotNull final EntityType type, @NotNull final CreatureSpawnEvent.SpawnReason reason) {
         this.location = Preconditions.checkNotNull(location, "Location may not be null");
         this.type = Preconditions.checkNotNull(type, "Type may not be null");
         this.reason = Preconditions.checkNotNull(reason, "Reason may not be null");
@@ -68,7 +68,7 @@ public class PreCreatureSpawnEvent extends Event implements Cancellable {
      *
      * @param shouldAbortSpawn Set if the spawn process should be aborted vs trying more attempts
      */
-    public void setShouldAbortSpawn(boolean shouldAbortSpawn) {
+    public void setShouldAbortSpawn(final boolean shouldAbortSpawn) {
         this.shouldAbortSpawn = shouldAbortSpawn;
     }
 
@@ -99,7 +99,7 @@ public class PreCreatureSpawnEvent extends Event implements Cancellable {
      * @param cancel true if you wish to cancel this event, and abort the spawn of this creature
      */
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         cancelled = cancel;
     }
 }
diff --git a/src/main/java/com/destroystokyo/paper/event/entity/PreSpawnerSpawnEvent.java b/src/main/java/com/destroystokyo/paper/event/entity/PreSpawnerSpawnEvent.java
index 48cff063594840a07aeaf35513780e28ea019a76..49371ead4b6fb95b81eeae2019b6111218911797 100644
--- a/src/main/java/com/destroystokyo/paper/event/entity/PreSpawnerSpawnEvent.java
+++ b/src/main/java/com/destroystokyo/paper/event/entity/PreSpawnerSpawnEvent.java
@@ -17,7 +17,7 @@ import org.jetbrains.annotations.NotNull;
 public class PreSpawnerSpawnEvent extends PreCreatureSpawnEvent {
     @NotNull private final Location spawnerLocation;
 
-    public PreSpawnerSpawnEvent(@NotNull Location location, @NotNull EntityType type, @NotNull Location spawnerLocation) {
+    public PreSpawnerSpawnEvent(@NotNull final Location location, @NotNull final EntityType type, @NotNull final Location spawnerLocation) {
         super(location, type, CreatureSpawnEvent.SpawnReason.SPAWNER);
         this.spawnerLocation = Preconditions.checkNotNull(spawnerLocation, "Spawner location may not be null");
     }
diff --git a/src/main/java/com/destroystokyo/paper/event/entity/ProjectileCollideEvent.java b/src/main/java/com/destroystokyo/paper/event/entity/ProjectileCollideEvent.java
index 6ae2bc3d952d34f298220738856024e0b6594199..5567a2e7dd402afc9799cc96d6f23b0b6f92e83d 100644
--- a/src/main/java/com/destroystokyo/paper/event/entity/ProjectileCollideEvent.java
+++ b/src/main/java/com/destroystokyo/paper/event/entity/ProjectileCollideEvent.java
@@ -27,7 +27,7 @@ public class ProjectileCollideEvent extends EntityEvent implements Cancellable {
         return collidedWith;
     }
 
-    public ProjectileCollideEvent(@NotNull Projectile what, @NotNull Entity collidedWith) {
+    public ProjectileCollideEvent(@NotNull final Projectile what, @NotNull final Entity collidedWith) {
         super(what);
         this.collidedWith = collidedWith;
     }
@@ -63,7 +63,7 @@ public class ProjectileCollideEvent extends EntityEvent implements Cancellable {
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.cancelled = cancel;
     }
 }
diff --git a/src/main/java/com/destroystokyo/paper/event/entity/SkeletonHorseTrapEvent.java b/src/main/java/com/destroystokyo/paper/event/entity/SkeletonHorseTrapEvent.java
index 20a534a04ee2f4f137e392bd1b16f390b9a892f2..eea3123f97088e94e7e9a3c46d018b480afe9539 100644
--- a/src/main/java/com/destroystokyo/paper/event/entity/SkeletonHorseTrapEvent.java
+++ b/src/main/java/com/destroystokyo/paper/event/entity/SkeletonHorseTrapEvent.java
@@ -18,11 +18,11 @@ public class SkeletonHorseTrapEvent extends EntityEvent implements Cancellable {
     private boolean cancelled;
     private final @NotNull List<HumanEntity> eligibleHumans;
 
-    public SkeletonHorseTrapEvent(@NotNull SkeletonHorse horse) {
+    public SkeletonHorseTrapEvent(@NotNull final SkeletonHorse horse) {
         this(horse, ImmutableList.of());
     }
 
-    public SkeletonHorseTrapEvent(@NotNull SkeletonHorse horse, @NotNull List<HumanEntity> eligibleHumans) {
+    public SkeletonHorseTrapEvent(@NotNull final SkeletonHorse horse, @NotNull final List<HumanEntity> eligibleHumans) {
         super(horse);
         this.eligibleHumans = eligibleHumans;
     }
@@ -39,7 +39,7 @@ public class SkeletonHorseTrapEvent extends EntityEvent implements Cancellable {
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.cancelled = cancel;
     }
 
diff --git a/src/main/java/com/destroystokyo/paper/event/entity/SlimeChangeDirectionEvent.java b/src/main/java/com/destroystokyo/paper/event/entity/SlimeChangeDirectionEvent.java
index 2638bbd3e1392b3d8640be58163f6eb2789dee4a..bb0caa312aa23086ee0d5008d9363af3a59baa1e 100644
--- a/src/main/java/com/destroystokyo/paper/event/entity/SlimeChangeDirectionEvent.java
+++ b/src/main/java/com/destroystokyo/paper/event/entity/SlimeChangeDirectionEvent.java
@@ -13,7 +13,7 @@ import org.jetbrains.annotations.NotNull;
 public class SlimeChangeDirectionEvent extends SlimePathfindEvent implements Cancellable {
     private float yaw;
 
-    public SlimeChangeDirectionEvent(@NotNull Slime slime, float yaw) {
+    public SlimeChangeDirectionEvent(@NotNull final Slime slime, final float yaw) {
         super(slime);
         this.yaw = yaw;
     }
@@ -32,7 +32,7 @@ public class SlimeChangeDirectionEvent extends SlimePathfindEvent implements Can
      *
      * @param yaw Chosen yaw
      */
-    public void setNewYaw(float yaw) {
+    public void setNewYaw(final float yaw) {
         this.yaw = yaw;
     }
 }
diff --git a/src/main/java/com/destroystokyo/paper/event/entity/SlimePathfindEvent.java b/src/main/java/com/destroystokyo/paper/event/entity/SlimePathfindEvent.java
index 14b67da109321ae6521eab2ac6f6945f05d02db5..8a74279041f3ac49b2d06ea94dc8114d5d437c02 100644
--- a/src/main/java/com/destroystokyo/paper/event/entity/SlimePathfindEvent.java
+++ b/src/main/java/com/destroystokyo/paper/event/entity/SlimePathfindEvent.java
@@ -13,7 +13,7 @@ import org.jetbrains.annotations.NotNull;
  * is choosing to start moving.
  */
 public class SlimePathfindEvent extends EntityEvent implements Cancellable {
-    public SlimePathfindEvent(@NotNull Slime slime) {
+    public SlimePathfindEvent(@NotNull final Slime slime) {
         super(slime);
     }
 
@@ -47,7 +47,7 @@ public class SlimePathfindEvent extends EntityEvent implements Cancellable {
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         cancelled = cancel;
     }
 }
diff --git a/src/main/java/com/destroystokyo/paper/event/entity/SlimeSwimEvent.java b/src/main/java/com/destroystokyo/paper/event/entity/SlimeSwimEvent.java
index c8dd49d11da5a90a1bac965a75f2b65fd825f3f7..71e14fdbdd8a76669bca7110aac61311e70b6ab6 100644
--- a/src/main/java/com/destroystokyo/paper/event/entity/SlimeSwimEvent.java
+++ b/src/main/java/com/destroystokyo/paper/event/entity/SlimeSwimEvent.java
@@ -11,7 +11,7 @@ import org.jetbrains.annotations.NotNull;
  * is choosing to start jumping.
  */
 public class SlimeSwimEvent extends SlimeWanderEvent implements Cancellable {
-    public SlimeSwimEvent(@NotNull Slime slime) {
+    public SlimeSwimEvent(@NotNull final Slime slime) {
         super(slime);
     }
 }
diff --git a/src/main/java/com/destroystokyo/paper/event/entity/SlimeTargetLivingEntityEvent.java b/src/main/java/com/destroystokyo/paper/event/entity/SlimeTargetLivingEntityEvent.java
index e9ba32799ed838779e49cd4c5011b7515b3363cb..54037b62b0adf5f0e2ea9d7f4d27d92b5623013a 100644
--- a/src/main/java/com/destroystokyo/paper/event/entity/SlimeTargetLivingEntityEvent.java
+++ b/src/main/java/com/destroystokyo/paper/event/entity/SlimeTargetLivingEntityEvent.java
@@ -14,7 +14,7 @@ import org.jetbrains.annotations.NotNull;
 public class SlimeTargetLivingEntityEvent extends SlimePathfindEvent implements Cancellable {
     @NotNull private final LivingEntity target;
 
-    public SlimeTargetLivingEntityEvent(@NotNull Slime slime, @NotNull LivingEntity target) {
+    public SlimeTargetLivingEntityEvent(@NotNull final Slime slime, @NotNull final LivingEntity target) {
         super(slime);
         this.target = target;
     }
diff --git a/src/main/java/com/destroystokyo/paper/event/entity/SlimeWanderEvent.java b/src/main/java/com/destroystokyo/paper/event/entity/SlimeWanderEvent.java
index 4683a7237d2ed527fc85b9b4e5b2eaaf5ae3d797..289e25d3687fa76a597d675e4abdc047db1c5397 100644
--- a/src/main/java/com/destroystokyo/paper/event/entity/SlimeWanderEvent.java
+++ b/src/main/java/com/destroystokyo/paper/event/entity/SlimeWanderEvent.java
@@ -11,7 +11,7 @@ import org.jetbrains.annotations.NotNull;
  * is choosing to start moving.
  */
 public class SlimeWanderEvent extends SlimePathfindEvent implements Cancellable {
-    public SlimeWanderEvent(@NotNull Slime slime) {
+    public SlimeWanderEvent(@NotNull final Slime slime) {
         super(slime);
     }
 }
diff --git a/src/main/java/com/destroystokyo/paper/event/entity/ThrownEggHatchEvent.java b/src/main/java/com/destroystokyo/paper/event/entity/ThrownEggHatchEvent.java
index 0e577cd7a60b5b85d94ca869359817763365dbe4..e3dbaa2b078ce9b122ec85a5b192b093bf560089 100644
--- a/src/main/java/com/destroystokyo/paper/event/entity/ThrownEggHatchEvent.java
+++ b/src/main/java/com/destroystokyo/paper/event/entity/ThrownEggHatchEvent.java
@@ -51,7 +51,7 @@ public class ThrownEggHatchEvent extends Event {
      * @param hatching true if you want the egg to hatch, false if you want it
      *     not to
      */
-    public void setHatching(boolean hatching) {
+    public void setHatching(final boolean hatching) {
         this.hatching = hatching;
     }
 
@@ -70,7 +70,7 @@ public class ThrownEggHatchEvent extends Event {
      *
      * @param hatchType The type of the mob being hatched by the egg
      */
-    public void setHatchingType(@NotNull EntityType hatchType) {
+    public void setHatchingType(@NotNull final EntityType hatchType) {
         if (!hatchType.isSpawnable()) throw new IllegalArgumentException("Can't spawn that entity type from an egg!");
         this.hatchType = hatchType;
     }
@@ -98,7 +98,7 @@ public class ThrownEggHatchEvent extends Event {
      *
      * @param numHatches The number of mobs coming out of the egg
      */
-    public void setNumHatches(byte numHatches) {
+    public void setNumHatches(final byte numHatches) {
         this.numHatches = numHatches;
     }
 
diff --git a/src/main/java/com/destroystokyo/paper/event/entity/TurtleGoHomeEvent.java b/src/main/java/com/destroystokyo/paper/event/entity/TurtleGoHomeEvent.java
index 021356d151ed638068e3e89b8cc77b3795883233..295baf73ac44c7270f129937deb7d32e00c78b27 100644
--- a/src/main/java/com/destroystokyo/paper/event/entity/TurtleGoHomeEvent.java
+++ b/src/main/java/com/destroystokyo/paper/event/entity/TurtleGoHomeEvent.java
@@ -13,7 +13,7 @@ public class TurtleGoHomeEvent extends EntityEvent implements Cancellable {
     private static final HandlerList handlers = new HandlerList();
     private boolean cancelled = false;
 
-    public TurtleGoHomeEvent(@NotNull Turtle turtle) {
+    public TurtleGoHomeEvent(@NotNull final Turtle turtle) {
         super(turtle);
     }
 
@@ -33,7 +33,7 @@ public class TurtleGoHomeEvent extends EntityEvent implements Cancellable {
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         cancelled = cancel;
     }
 
diff --git a/src/main/java/com/destroystokyo/paper/event/entity/TurtleLayEggEvent.java b/src/main/java/com/destroystokyo/paper/event/entity/TurtleLayEggEvent.java
index bcc8dba50e3a3df0206c4827bb468bf884837b8b..aa3b120d92d857e221fce999228097502f69480a 100644
--- a/src/main/java/com/destroystokyo/paper/event/entity/TurtleLayEggEvent.java
+++ b/src/main/java/com/destroystokyo/paper/event/entity/TurtleLayEggEvent.java
@@ -17,7 +17,7 @@ public class TurtleLayEggEvent extends EntityEvent implements Cancellable {
     private final Location location;
     private int eggCount;
 
-    public TurtleLayEggEvent(@NotNull Turtle turtle, @NotNull Location location, int eggCount) {
+    public TurtleLayEggEvent(@NotNull final Turtle turtle, @NotNull final Location location, final int eggCount) {
         super(turtle);
         this.location = location;
         this.eggCount = eggCount;
@@ -57,7 +57,7 @@ public class TurtleLayEggEvent extends EntityEvent implements Cancellable {
      *
      * @param eggCount Number of eggs
      */
-    public void setEggCount(int eggCount) {
+    public void setEggCount(final int eggCount) {
         if (eggCount < 1) {
             cancelled = true;
             return;
@@ -71,7 +71,7 @@ public class TurtleLayEggEvent extends EntityEvent implements Cancellable {
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         cancelled = cancel;
     }
 
diff --git a/src/main/java/com/destroystokyo/paper/event/entity/TurtleStartDiggingEvent.java b/src/main/java/com/destroystokyo/paper/event/entity/TurtleStartDiggingEvent.java
index abeb24fccda2acfdb0dfdadacb8fe688bd97cf78..a1f268d70bbdb6977e5cfddb0d87eb22793a1056 100644
--- a/src/main/java/com/destroystokyo/paper/event/entity/TurtleStartDiggingEvent.java
+++ b/src/main/java/com/destroystokyo/paper/event/entity/TurtleStartDiggingEvent.java
@@ -15,7 +15,7 @@ public class TurtleStartDiggingEvent extends EntityEvent implements Cancellable
     private boolean cancelled = false;
     @NotNull private final Location location;
 
-    public TurtleStartDiggingEvent(@NotNull Turtle turtle, @NotNull Location location) {
+    public TurtleStartDiggingEvent(@NotNull final Turtle turtle, @NotNull final Location location) {
         super(turtle);
         this.location = location;
     }
@@ -46,7 +46,7 @@ public class TurtleStartDiggingEvent extends EntityEvent implements Cancellable
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         cancelled = cancel;
     }
 
diff --git a/src/main/java/com/destroystokyo/paper/event/entity/WitchConsumePotionEvent.java b/src/main/java/com/destroystokyo/paper/event/entity/WitchConsumePotionEvent.java
index fbbace36d69373046a7f3618ed5c1c1318b489b9..b91434a4c6ef476f829d429fd7826ad2fb2d8477 100644
--- a/src/main/java/com/destroystokyo/paper/event/entity/WitchConsumePotionEvent.java
+++ b/src/main/java/com/destroystokyo/paper/event/entity/WitchConsumePotionEvent.java
@@ -14,7 +14,7 @@ import org.jetbrains.annotations.Nullable;
 public class WitchConsumePotionEvent extends EntityEvent implements Cancellable {
     @Nullable private ItemStack potion;
 
-    public WitchConsumePotionEvent(@NotNull Witch witch, @Nullable ItemStack potion) {
+    public WitchConsumePotionEvent(@NotNull final Witch witch, @Nullable final ItemStack potion) {
         super(witch);
         this.potion = potion;
     }
@@ -37,7 +37,7 @@ public class WitchConsumePotionEvent extends EntityEvent implements Cancellable
      * Sets the potion to be consumed and applied to the witch.
      * @param potion The potion
      */
-    public void setPotion(@Nullable ItemStack potion) {
+    public void setPotion(@Nullable final ItemStack potion) {
         this.potion = potion != null ? potion.clone() : null;
     }
 
@@ -64,7 +64,7 @@ public class WitchConsumePotionEvent extends EntityEvent implements Cancellable
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         cancelled = cancel;
     }
 }
diff --git a/src/main/java/com/destroystokyo/paper/event/entity/WitchReadyPotionEvent.java b/src/main/java/com/destroystokyo/paper/event/entity/WitchReadyPotionEvent.java
index d13c15935cfe223a7c4edd14396802a3a14df030..2d8161c00db705ce0b0735bc609f099951f19a0d 100644
--- a/src/main/java/com/destroystokyo/paper/event/entity/WitchReadyPotionEvent.java
+++ b/src/main/java/com/destroystokyo/paper/event/entity/WitchReadyPotionEvent.java
@@ -12,7 +12,7 @@ import org.jetbrains.annotations.Nullable;
 public class WitchReadyPotionEvent extends EntityEvent implements Cancellable {
     private @Nullable ItemStack potion;
 
-    public WitchReadyPotionEvent(@NotNull Witch witch, @Nullable ItemStack potion) {
+    public WitchReadyPotionEvent(@NotNull final Witch witch, @Nullable final ItemStack potion) {
         super(witch);
         this.potion = potion;
     }
@@ -24,8 +24,8 @@ public class WitchReadyPotionEvent extends EntityEvent implements Cancellable {
      * @return The ItemStack to be used
      */
     @Nullable
-    public static ItemStack process(@NotNull Witch witch, @Nullable ItemStack potion) {
-        WitchReadyPotionEvent event = new WitchReadyPotionEvent(witch, potion);
+    public static ItemStack process(@NotNull final Witch witch, @Nullable final ItemStack potion) {
+        final WitchReadyPotionEvent event = new WitchReadyPotionEvent(witch, potion);
         if (!event.callEvent() || event.getPotion() == null) {
             return new ItemStack(Material.AIR);
         }
@@ -50,7 +50,7 @@ public class WitchReadyPotionEvent extends EntityEvent implements Cancellable {
      * Sets the potion the which is going to hold and use
      * @param potion The potion
      */
-    public void setPotion(@Nullable ItemStack potion) {
+    public void setPotion(@Nullable final ItemStack potion) {
         this.potion = potion != null ? potion.clone() : null;
     }
 
@@ -74,7 +74,7 @@ public class WitchReadyPotionEvent extends EntityEvent implements Cancellable {
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         cancelled = cancel;
     }
 }
diff --git a/src/main/java/com/destroystokyo/paper/event/entity/WitchThrowPotionEvent.java b/src/main/java/com/destroystokyo/paper/event/entity/WitchThrowPotionEvent.java
index 688a596aa2b925651a92bf092e1ef4d77a47258c..5bf19e717d0a5a110b3e67f7206aa9abaa28da18 100644
--- a/src/main/java/com/destroystokyo/paper/event/entity/WitchThrowPotionEvent.java
+++ b/src/main/java/com/destroystokyo/paper/event/entity/WitchThrowPotionEvent.java
@@ -16,7 +16,7 @@ public class WitchThrowPotionEvent extends EntityEvent implements Cancellable {
     @NotNull private final LivingEntity target;
     @Nullable private ItemStack potion;
 
-    public WitchThrowPotionEvent(@NotNull Witch witch, @NotNull LivingEntity target, @Nullable ItemStack potion) {
+    public WitchThrowPotionEvent(@NotNull final Witch witch, @NotNull final LivingEntity target, @Nullable final ItemStack potion) {
         super(witch);
         this.target = target;
         this.potion = potion;
@@ -48,7 +48,7 @@ public class WitchThrowPotionEvent extends EntityEvent implements Cancellable {
      * Sets the potion to be thrown at a player
      * @param potion The potion
      */
-    public void setPotion(@Nullable ItemStack potion) {
+    public void setPotion(@Nullable final ItemStack potion) {
         this.potion = potion != null ? potion.clone() : null;
     }
 
@@ -75,7 +75,7 @@ public class WitchThrowPotionEvent extends EntityEvent implements Cancellable {
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         cancelled = cancel;
     }
 }
diff --git a/src/main/java/com/destroystokyo/paper/event/executor/MethodHandleEventExecutor.java b/src/main/java/com/destroystokyo/paper/event/executor/MethodHandleEventExecutor.java
index bbec023085c651e80eef6d7c7d0329d60cd23229..cc1f7a361640e443e67209a25bb47fc1f235a71f 100644
--- a/src/main/java/com/destroystokyo/paper/event/executor/MethodHandleEventExecutor.java
+++ b/src/main/java/com/destroystokyo/paper/event/executor/MethodHandleEventExecutor.java
@@ -16,29 +16,29 @@ public class MethodHandleEventExecutor implements EventExecutor {
     private final MethodHandle handle;
     private final Method method;
 
-    public MethodHandleEventExecutor(@NotNull Class<? extends Event> eventClass, @NotNull MethodHandle handle) {
+    public MethodHandleEventExecutor(@NotNull final Class<? extends Event> eventClass, @NotNull final MethodHandle handle) {
         this.eventClass = eventClass;
         this.handle = handle;
         this.method = null;
     }
 
-    public MethodHandleEventExecutor(@NotNull Class<? extends Event> eventClass, @NotNull Method m) {
+    public MethodHandleEventExecutor(@NotNull final Class<? extends Event> eventClass, @NotNull final Method m) {
         this.eventClass = eventClass;
         try {
             m.setAccessible(true);
             this.handle = MethodHandles.lookup().unreflect(m);
-        } catch (IllegalAccessException e) {
+        } catch (final IllegalAccessException e) {
             throw new AssertionError("Unable to set accessible", e);
         }
         this.method = m;
     }
 
     @Override
-    public void execute(@NotNull Listener listener, @NotNull Event event) throws EventException {
+    public void execute(@NotNull final Listener listener, @NotNull final Event event) throws EventException {
         if (!eventClass.isInstance(event)) return;
         try {
             handle.invoke(listener, event);
-        } catch (Throwable t) {
+        } catch (final Throwable t) {
             SneakyThrow.sneaky(t);
         }
     }
diff --git a/src/main/java/com/destroystokyo/paper/event/executor/StaticMethodHandleEventExecutor.java b/src/main/java/com/destroystokyo/paper/event/executor/StaticMethodHandleEventExecutor.java
index e316fb60f1fef29a9a6427b789d18d8a1d104d9a..55c20a7e4a23e861c017a8b52313752dab36badc 100644
--- a/src/main/java/com/destroystokyo/paper/event/executor/StaticMethodHandleEventExecutor.java
+++ b/src/main/java/com/destroystokyo/paper/event/executor/StaticMethodHandleEventExecutor.java
@@ -19,25 +19,25 @@ public class StaticMethodHandleEventExecutor implements EventExecutor {
     private final MethodHandle handle;
     private final Method method;
 
-    public StaticMethodHandleEventExecutor(@NotNull Class<? extends Event> eventClass, @NotNull Method m) {
+    public StaticMethodHandleEventExecutor(@NotNull final Class<? extends Event> eventClass, @NotNull final Method m) {
         Preconditions.checkArgument(Modifier.isStatic(m.getModifiers()), "Not a static method: %s", m);
         Preconditions.checkArgument(eventClass != null, "eventClass is null");
         this.eventClass = eventClass;
         try {
             m.setAccessible(true);
             this.handle = MethodHandles.lookup().unreflect(m);
-        } catch (IllegalAccessException e) {
+        } catch (final IllegalAccessException e) {
             throw new AssertionError("Unable to set accessible", e);
         }
         this.method = m;
     }
 
     @Override
-    public void execute(@NotNull Listener listener, @NotNull Event event) throws EventException {
+    public void execute(@NotNull final Listener listener, @NotNull final Event event) throws EventException {
         if (!eventClass.isInstance(event)) return;
         try {
             handle.invoke(event);
-        } catch (Throwable throwable) {
+        } catch (final Throwable throwable) {
             SneakyThrow.sneaky(throwable);
         }
     }
diff --git a/src/main/java/com/destroystokyo/paper/event/executor/asm/ASMEventExecutorGenerator.java b/src/main/java/com/destroystokyo/paper/event/executor/asm/ASMEventExecutorGenerator.java
index 1f912a6f640ba37b58531bf3213363914630fae9..8a5586186b078ef2d77c4a968337cb35366338e2 100644
--- a/src/main/java/com/destroystokyo/paper/event/executor/asm/ASMEventExecutorGenerator.java
+++ b/src/main/java/com/destroystokyo/paper/event/executor/asm/ASMEventExecutorGenerator.java
@@ -16,8 +16,8 @@ public class ASMEventExecutorGenerator {
     private static final String EXECUTE_DESCRIPTOR = "(Lorg/bukkit/event/Listener;Lorg/bukkit/event/Event;)V";
 
     @NotNull
-    public static byte[] generateEventExecutor(@NotNull Method m, @NotNull String name) {
-        ClassWriter writer = new ClassWriter(ClassWriter.COMPUTE_FRAMES | ClassWriter.COMPUTE_MAXS);
+    public static byte[] generateEventExecutor(@NotNull final Method m, @NotNull final String name) {
+        final ClassWriter writer = new ClassWriter(ClassWriter.COMPUTE_FRAMES | ClassWriter.COMPUTE_MAXS);
         writer.visit(V1_8, ACC_PUBLIC, name.replace('.', '/'), null, Type.getInternalName(Object.class), new String[] {Type.getInternalName(EventExecutor.class)});
         // Generate constructor
         GeneratorAdapter methodGenerator = new GeneratorAdapter(writer.visitMethod(ACC_PUBLIC, "<init>", "()V", null, null), ACC_PUBLIC, "<init>", "()V");
@@ -48,7 +48,7 @@ public class ASMEventExecutorGenerator {
     public static @NotNull AtomicInteger NEXT_ID = new AtomicInteger(1);
     @NotNull
     public static String generateName() {
-        int id = NEXT_ID.getAndIncrement();
+        final int id = NEXT_ID.getAndIncrement();
         return "com.destroystokyo.paper.event.executor.asm.generated.GeneratedEventExecutor" + id;
     }
 }
diff --git a/src/main/java/com/destroystokyo/paper/event/executor/asm/SafeClassDefiner.java b/src/main/java/com/destroystokyo/paper/event/executor/asm/SafeClassDefiner.java
index 1c1554f89739ce37ac4ef28558fee6ee4bd458f6..d1310d35395673779d9807b1b92a5ae9568024fe 100644
--- a/src/main/java/com/destroystokyo/paper/event/executor/asm/SafeClassDefiner.java
+++ b/src/main/java/com/destroystokyo/paper/event/executor/asm/SafeClassDefiner.java
@@ -17,11 +17,11 @@ public class SafeClassDefiner implements ClassDefiner {
 
     @NotNull
     @Override
-    public Class<?> defineClass(@NotNull ClassLoader parentLoader, @NotNull String name, @NotNull byte @NotNull [] data) {
-        GeneratedClassLoader loader = loaders.computeIfAbsent(parentLoader, GeneratedClassLoader::new);
+    public Class<?> defineClass(@NotNull final ClassLoader parentLoader, @NotNull final String name, @NotNull final byte @NotNull [] data) {
+        final GeneratedClassLoader loader = loaders.computeIfAbsent(parentLoader, GeneratedClassLoader::new);
         synchronized (loader.getClassLoadingLock(name)) {
             Preconditions.checkState(!loader.hasClass(name), "%s already defined", name);
-            Class<?> c = loader.define(name, data);
+            final Class<?> c = loader.define(name, data);
             assert c.getName().equals(name);
             return c;
         }
@@ -32,14 +32,14 @@ public class SafeClassDefiner implements ClassDefiner {
             ClassLoader.registerAsParallelCapable();
         }
 
-        protected GeneratedClassLoader(@NotNull ClassLoader parent) {
+        protected GeneratedClassLoader(@NotNull final ClassLoader parent) {
             super(parent);
         }
 
-        private @NotNull Class<?> define(@NotNull String name, byte @NotNull [] data) {
+        private @NotNull Class<?> define(@NotNull final String name, final byte @NotNull [] data) {
             synchronized (getClassLoadingLock(name)) {
                 assert !hasClass(name);
-                Class<?> c = defineClass(name, data, 0, data.length);
+                final Class<?> c = defineClass(name, data, 0, data.length);
                 resolveClass(c);
                 return c;
             }
@@ -47,16 +47,16 @@ public class SafeClassDefiner implements ClassDefiner {
 
         @Override
         @NotNull
-        public Object getClassLoadingLock(@NotNull String name) {
+        public Object getClassLoadingLock(@NotNull final String name) {
             return super.getClassLoadingLock(name);
         }
 
-        public boolean hasClass(@NotNull String name) {
+        public boolean hasClass(@NotNull final String name) {
             synchronized (getClassLoadingLock(name)) {
                 try {
                     Class.forName(name);
                     return true;
-                } catch (ClassNotFoundException e) {
+                } catch (final ClassNotFoundException e) {
                     return false;
                 }
             }
diff --git a/src/main/java/com/destroystokyo/paper/event/inventory/PrepareGrindstoneEvent.java b/src/main/java/com/destroystokyo/paper/event/inventory/PrepareGrindstoneEvent.java
index a89d189e1175e980e5af8476f539f0a025e8903b..355640d14d5a2f6f41fc9dedab8a5ac23352dbc9 100644
--- a/src/main/java/com/destroystokyo/paper/event/inventory/PrepareGrindstoneEvent.java
+++ b/src/main/java/com/destroystokyo/paper/event/inventory/PrepareGrindstoneEvent.java
@@ -13,7 +13,7 @@ import org.jetbrains.annotations.Nullable;
 @Deprecated
 public class PrepareGrindstoneEvent extends PrepareResultEvent {
 
-    public PrepareGrindstoneEvent(@NotNull InventoryView inventory, @Nullable ItemStack result) {
+    public PrepareGrindstoneEvent(@NotNull final InventoryView inventory, @Nullable final ItemStack result) {
         super(inventory, result);
     }
 
diff --git a/src/main/java/com/destroystokyo/paper/event/inventory/PrepareResultEvent.java b/src/main/java/com/destroystokyo/paper/event/inventory/PrepareResultEvent.java
index 25e5f0354b3b65c656d6c173ec108825f1e8b1be..40000244927db5398aee0e14194c5267b3662cec 100644
--- a/src/main/java/com/destroystokyo/paper/event/inventory/PrepareResultEvent.java
+++ b/src/main/java/com/destroystokyo/paper/event/inventory/PrepareResultEvent.java
@@ -12,7 +12,7 @@ import org.jetbrains.annotations.Nullable;
 public class PrepareResultEvent extends PrepareInventoryResultEvent {
 
     // HandlerList on PrepareInventoryResultEvent to ensure api compat
-    public PrepareResultEvent(@NotNull InventoryView inventory, @Nullable ItemStack result) {
+    public PrepareResultEvent(@NotNull final InventoryView inventory, @Nullable final ItemStack result) {
         super(inventory, result);
     }
 
@@ -31,7 +31,7 @@ public class PrepareResultEvent extends PrepareInventoryResultEvent {
      *
      * @param result result item
      */
-    public void setResult(@Nullable ItemStack result) {
+    public void setResult(@Nullable final ItemStack result) {
         super.setResult(result);
     }
 }
diff --git a/src/main/java/com/destroystokyo/paper/event/player/IllegalPacketEvent.java b/src/main/java/com/destroystokyo/paper/event/player/IllegalPacketEvent.java
index 8d8e9b16f2a6707d2af7567c7682dfc5db51a737..8476aa274fab55420fc6b90644e94573f4d24646 100644
--- a/src/main/java/com/destroystokyo/paper/event/player/IllegalPacketEvent.java
+++ b/src/main/java/com/destroystokyo/paper/event/player/IllegalPacketEvent.java
@@ -17,7 +17,7 @@ public class IllegalPacketEvent extends PlayerEvent {
     @Nullable private String kickMessage;
     private boolean shouldKick = true;
 
-    public IllegalPacketEvent(@NotNull Player player, @Nullable String type, @Nullable String kickMessage, @NotNull Exception e) {
+    public IllegalPacketEvent(@NotNull final Player player, @Nullable final String type, @Nullable final String kickMessage, @NotNull final Exception e) {
         super(player);
         this.type = type;
         this.kickMessage = kickMessage;
@@ -28,7 +28,7 @@ public class IllegalPacketEvent extends PlayerEvent {
         return shouldKick;
     }
 
-    public void setShouldKick(boolean shouldKick) {
+    public void setShouldKick(final boolean shouldKick) {
         this.shouldKick = shouldKick;
     }
 
@@ -37,7 +37,7 @@ public class IllegalPacketEvent extends PlayerEvent {
         return kickMessage;
     }
 
-    public void setKickMessage(@Nullable String kickMessage) {
+    public void setKickMessage(@Nullable final String kickMessage) {
         this.kickMessage = kickMessage;
     }
 
@@ -63,8 +63,8 @@ public class IllegalPacketEvent extends PlayerEvent {
         return handlers;
     }
 
-    public static void process(@NotNull Player player, @Nullable String type, @Nullable String kickMessage, @NotNull Exception exception) {
-        IllegalPacketEvent event = new IllegalPacketEvent(player, type, kickMessage, exception);
+    public static void process(@NotNull final Player player, @Nullable final String type, @Nullable final String kickMessage, @NotNull final Exception exception) {
+        final IllegalPacketEvent event = new IllegalPacketEvent(player, type, kickMessage, exception);
         event.callEvent();
         if (event.shouldKick) {
             player.kickPlayer(kickMessage);
diff --git a/src/main/java/com/destroystokyo/paper/event/player/PlayerAdvancementCriterionGrantEvent.java b/src/main/java/com/destroystokyo/paper/event/player/PlayerAdvancementCriterionGrantEvent.java
index bb8d7c959cdea4b66455a49e74804ea4b126620d..a00a5e6f9bb7dca4471ddc0f3051a99d8c18e9e5 100644
--- a/src/main/java/com/destroystokyo/paper/event/player/PlayerAdvancementCriterionGrantEvent.java
+++ b/src/main/java/com/destroystokyo/paper/event/player/PlayerAdvancementCriterionGrantEvent.java
@@ -16,7 +16,7 @@ public class PlayerAdvancementCriterionGrantEvent extends PlayerEvent implements
     @NotNull private final String criterion;
     private boolean cancel = false;
 
-    public PlayerAdvancementCriterionGrantEvent(@NotNull Player who, @NotNull Advancement advancement, @NotNull String criterion) {
+    public PlayerAdvancementCriterionGrantEvent(@NotNull final Player who, @NotNull final Advancement advancement, @NotNull final String criterion) {
         super(who);
         this.advancement = advancement;
         this.criterion = criterion;
@@ -46,7 +46,7 @@ public class PlayerAdvancementCriterionGrantEvent extends PlayerEvent implements
         return cancel;
     }
 
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.cancel = cancel;
     }
 
diff --git a/src/main/java/com/destroystokyo/paper/event/player/PlayerArmorChangeEvent.java b/src/main/java/com/destroystokyo/paper/event/player/PlayerArmorChangeEvent.java
index 42bf14c87bae08e38088ec70a4e7c7a27019623d..58dbf6cec79796fcf353e7dbb2a500094e4e05ad 100644
--- a/src/main/java/com/destroystokyo/paper/event/player/PlayerArmorChangeEvent.java
+++ b/src/main/java/com/destroystokyo/paper/event/player/PlayerArmorChangeEvent.java
@@ -25,7 +25,7 @@ public class PlayerArmorChangeEvent extends PlayerEvent {
     @Nullable private final ItemStack oldItem;
     @Nullable private final ItemStack newItem;
 
-    public PlayerArmorChangeEvent(@NotNull Player player, @NotNull SlotType slotType, @Nullable ItemStack oldItem, @Nullable ItemStack newItem) {
+    public PlayerArmorChangeEvent(@NotNull final Player player, @NotNull final SlotType slotType, @Nullable final ItemStack oldItem, @Nullable final ItemStack newItem) {
         super(player);
         this.slotType = slotType;
         this.oldItem = oldItem;
@@ -87,7 +87,7 @@ public class PlayerArmorChangeEvent extends PlayerEvent {
         private final Set<Material> mutableTypes = EnumSet.noneOf(Material.class);
         private Set<Material> immutableTypes;
 
-        SlotType(Material... types) {
+        SlotType(final Material... types) {
             this.mutableTypes.addAll(Arrays.asList(types));
         }
 
@@ -113,8 +113,8 @@ public class PlayerArmorChangeEvent extends PlayerEvent {
          * @return slot type the material will go in, or null if it won't
          */
         @Nullable
-        public static SlotType getByMaterial(@NotNull Material material) {
-            for (SlotType slotType : values()) {
+        public static SlotType getByMaterial(@NotNull final Material material) {
+            for (final SlotType slotType : values()) {
                 if (slotType.getTypes().contains(material)) {
                     return slotType;
                 }
@@ -128,7 +128,7 @@ public class PlayerArmorChangeEvent extends PlayerEvent {
          * @param material material to check
          * @return whether or not this material can be equipped
          */
-        public static boolean isEquipable(@NotNull Material material) {
+        public static boolean isEquipable(@NotNull final Material material) {
             return getByMaterial(material) != null;
         }
     }
diff --git a/src/main/java/com/destroystokyo/paper/event/player/PlayerAttackEntityCooldownResetEvent.java b/src/main/java/com/destroystokyo/paper/event/player/PlayerAttackEntityCooldownResetEvent.java
index ebdebe7b6ec6ed5aadc7ee925ba0147e61e6bc84..00bbc536c63179869c9be0af2e4ad6a5149d91ee 100644
--- a/src/main/java/com/destroystokyo/paper/event/player/PlayerAttackEntityCooldownResetEvent.java
+++ b/src/main/java/com/destroystokyo/paper/event/player/PlayerAttackEntityCooldownResetEvent.java
@@ -17,7 +17,7 @@ public class PlayerAttackEntityCooldownResetEvent extends PlayerEvent implements
     private static final HandlerList handlers = new HandlerList();
     @NotNull private final Entity attackedEntity;
 
-    public PlayerAttackEntityCooldownResetEvent(@NotNull Player who, @NotNull Entity attackedEntity, float cooledAttackStrength) {
+    public PlayerAttackEntityCooldownResetEvent(@NotNull final Player who, @NotNull final Entity attackedEntity, final float cooledAttackStrength) {
         super(who);
         this.attackedEntity = attackedEntity;
         this.cooledAttackStrength = cooledAttackStrength;
@@ -51,7 +51,7 @@ public class PlayerAttackEntityCooldownResetEvent extends PlayerEvent implements
      * @param cancel true if you wish to cancel this event
      */
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.cancel = cancel;
     }
 
diff --git a/src/main/java/com/destroystokyo/paper/event/player/PlayerClientOptionsChangeEvent.java b/src/main/java/com/destroystokyo/paper/event/player/PlayerClientOptionsChangeEvent.java
index e5844a1a20014536a3f9857755a585481f17b11d..25029ebe5e04bf2928b39ec0eb1d7cca1a0de3fd 100644
--- a/src/main/java/com/destroystokyo/paper/event/player/PlayerClientOptionsChangeEvent.java
+++ b/src/main/java/com/destroystokyo/paper/event/player/PlayerClientOptionsChangeEvent.java
@@ -28,7 +28,7 @@ public class PlayerClientOptionsChangeEvent extends PlayerEvent {
     private final boolean textFilteringEnabled;
 
     @Deprecated
-    public PlayerClientOptionsChangeEvent(@NotNull Player player, @NotNull String locale, int viewDistance, @NotNull ChatVisibility chatVisibility, boolean chatColors, @NotNull SkinParts skinParts, @NotNull MainHand mainHand) {
+    public PlayerClientOptionsChangeEvent(@NotNull final Player player, @NotNull final String locale, final int viewDistance, @NotNull final ChatVisibility chatVisibility, final boolean chatColors, @NotNull final SkinParts skinParts, @NotNull final MainHand mainHand) {
         super(player);
         this.locale = locale;
         this.viewDistance = viewDistance;
@@ -40,7 +40,7 @@ public class PlayerClientOptionsChangeEvent extends PlayerEvent {
         this.textFilteringEnabled = false;
     }
 
-    public PlayerClientOptionsChangeEvent(@NotNull Player player, @NotNull Map<ClientOption<?>, ?> options) {
+    public PlayerClientOptionsChangeEvent(@NotNull final Player player, @NotNull final Map<ClientOption<?>, ?> options) {
         super(player);
 
         this.locale = (String) options.get(ClientOption.LOCALE);
diff --git a/src/main/java/com/destroystokyo/paper/event/player/PlayerElytraBoostEvent.java b/src/main/java/com/destroystokyo/paper/event/player/PlayerElytraBoostEvent.java
index 18ea8ee77d5cf370b1a3e7cd5dcc57a4c14cb9cf..1274bf42ac45fc02f5c5ad9f42a22420c3e79eeb 100644
--- a/src/main/java/com/destroystokyo/paper/event/player/PlayerElytraBoostEvent.java
+++ b/src/main/java/com/destroystokyo/paper/event/player/PlayerElytraBoostEvent.java
@@ -18,7 +18,7 @@ public class PlayerElytraBoostEvent extends PlayerEvent implements Cancellable {
     @NotNull private final Firework firework;
     private boolean consume = true;
 
-    public PlayerElytraBoostEvent(@NotNull Player player, @NotNull ItemStack itemStack, @NotNull Firework firework) {
+    public PlayerElytraBoostEvent(@NotNull final Player player, @NotNull final ItemStack itemStack, @NotNull final Firework firework) {
         super(player);
         this.itemStack = itemStack;
         this.firework = firework;
@@ -58,7 +58,7 @@ public class PlayerElytraBoostEvent extends PlayerEvent implements Cancellable {
      *
      * @param consume True to consume
      */
-    public void setShouldConsume(boolean consume) {
+    public void setShouldConsume(final boolean consume) {
         this.consume = consume;
     }
 
@@ -79,7 +79,7 @@ public class PlayerElytraBoostEvent extends PlayerEvent implements Cancellable {
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         cancelled = cancel;
     }
 }
diff --git a/src/main/java/com/destroystokyo/paper/event/player/PlayerHandshakeEvent.java b/src/main/java/com/destroystokyo/paper/event/player/PlayerHandshakeEvent.java
index 3dfb181ce83af4949fdca76ce319c69f1818af5e..745a715dc88c15435aeae0f4b22dd99fb9d0cc7f 100644
--- a/src/main/java/com/destroystokyo/paper/event/player/PlayerHandshakeEvent.java
+++ b/src/main/java/com/destroystokyo/paper/event/player/PlayerHandshakeEvent.java
@@ -42,7 +42,7 @@ public class PlayerHandshakeEvent extends Event implements Cancellable {
      * @deprecated in favour of {@link PlayerHandshakeEvent(String, String, boolean)}
      */
     @Deprecated
-    public PlayerHandshakeEvent(@NotNull String originalHandshake, boolean cancelled) {
+    public PlayerHandshakeEvent(@NotNull final String originalHandshake, final boolean cancelled) {
         this(originalHandshake, "127.0.0.1", cancelled);
     }
 
@@ -53,7 +53,7 @@ public class PlayerHandshakeEvent extends Event implements Cancellable {
      * @param originalSocketAddressHostname the original socket address hostname
      * @param cancelled if this event is enabled
      */
-    public PlayerHandshakeEvent(@NotNull String originalHandshake, @NotNull String originalSocketAddressHostname, boolean cancelled) {
+    public PlayerHandshakeEvent(@NotNull final String originalHandshake, @NotNull final String originalSocketAddressHostname, final boolean cancelled) {
         super(true);
         this.originalHandshake = originalHandshake;
         this.originalSocketAddressHostname = originalSocketAddressHostname;
@@ -82,7 +82,7 @@ public class PlayerHandshakeEvent extends Event implements Cancellable {
      * @param cancelled {@code true} if this event is cancelled, {@code false} otherwise
      */
     @Override
-    public void setCancelled(boolean cancelled) {
+    public void setCancelled(final boolean cancelled) {
         this.cancelled = cancelled;
     }
 
@@ -128,7 +128,7 @@ public class PlayerHandshakeEvent extends Event implements Cancellable {
      *
      * @param serverHostname the server hostname string
      */
-    public void setServerHostname(@NotNull String serverHostname) {
+    public void setServerHostname(@NotNull final String serverHostname) {
         this.serverHostname = serverHostname;
     }
 
@@ -151,7 +151,7 @@ public class PlayerHandshakeEvent extends Event implements Cancellable {
      *
      * @param socketAddressHostname the socket address hostname string
      */
-    public void setSocketAddressHostname(@NotNull String socketAddressHostname) {
+    public void setSocketAddressHostname(@NotNull final String socketAddressHostname) {
         this.socketAddressHostname = socketAddressHostname;
     }
 
@@ -170,7 +170,7 @@ public class PlayerHandshakeEvent extends Event implements Cancellable {
      *
      * @param uniqueId the unique id
      */
-    public void setUniqueId(@NotNull UUID uniqueId) {
+    public void setUniqueId(@NotNull final UUID uniqueId) {
         this.uniqueId = uniqueId;
     }
 
@@ -206,7 +206,7 @@ public class PlayerHandshakeEvent extends Event implements Cancellable {
      *
      * @param failed {@code true} if authentication failed, {@code false} otherwise
      */
-    public void setFailed(boolean failed) {
+    public void setFailed(final boolean failed) {
         this.failed = failed;
     }
 
@@ -217,7 +217,7 @@ public class PlayerHandshakeEvent extends Event implements Cancellable {
      *
      * @param propertiesJson the profile properties, as JSON
      */
-    public void setPropertiesJson(@NotNull String propertiesJson) {
+    public void setPropertiesJson(@NotNull final String propertiesJson) {
         this.propertiesJson = propertiesJson;
     }
 
@@ -236,7 +236,7 @@ public class PlayerHandshakeEvent extends Event implements Cancellable {
      *
      * @param failMessage the message to display to the client
      */
-    public void failMessage(@NotNull Component failMessage) {
+    public void failMessage(@NotNull final Component failMessage) {
         this.failMessage = failMessage;
     }
 
@@ -259,7 +259,7 @@ public class PlayerHandshakeEvent extends Event implements Cancellable {
      * @deprecated use {@link #failMessage(Component)}
      */
     @Deprecated
-    public void setFailMessage(@NotNull String failMessage) {
+    public void setFailMessage(@NotNull final String failMessage) {
         Preconditions.checkArgument(failMessage != null && !failMessage.isEmpty(), "fail message cannot be null or empty");
         this.failMessage(LegacyComponentSerializer.legacySection().deserialize(failMessage));
     }
diff --git a/src/main/java/com/destroystokyo/paper/event/player/PlayerInitialSpawnEvent.java b/src/main/java/com/destroystokyo/paper/event/player/PlayerInitialSpawnEvent.java
index 626e97bbcaa19d55475a0fc8770412d437af2733..2db5a208b7d19a49c2d4957ef2b9f0c06fa558ea 100644
--- a/src/main/java/com/destroystokyo/paper/event/player/PlayerInitialSpawnEvent.java
+++ b/src/main/java/com/destroystokyo/paper/event/player/PlayerInitialSpawnEvent.java
@@ -11,7 +11,7 @@ import org.spigotmc.event.player.PlayerSpawnLocationEvent;
 @Deprecated
 public class PlayerInitialSpawnEvent extends PlayerSpawnLocationEvent {
 
-    public PlayerInitialSpawnEvent(@NotNull Player who, @NotNull Location spawnLocation) {
+    public PlayerInitialSpawnEvent(@NotNull final Player who, @NotNull final Location spawnLocation) {
         super(who, spawnLocation);
     }
 }
diff --git a/src/main/java/com/destroystokyo/paper/event/player/PlayerJumpEvent.java b/src/main/java/com/destroystokyo/paper/event/player/PlayerJumpEvent.java
index 8131bb20166a3b5967c88825f254423769ee41e7..fab43ac909d7c66a1d60b9dad844d788145b9edb 100644
--- a/src/main/java/com/destroystokyo/paper/event/player/PlayerJumpEvent.java
+++ b/src/main/java/com/destroystokyo/paper/event/player/PlayerJumpEvent.java
@@ -51,7 +51,7 @@ public class PlayerJumpEvent extends PlayerEvent implements Cancellable {
      *
      * @param cancel true if you wish to cancel this event
      */
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.cancel = cancel;
     }
 
@@ -70,7 +70,7 @@ public class PlayerJumpEvent extends PlayerEvent implements Cancellable {
      *
      * @param from New location to mark as the players previous location
      */
-    public void setFrom(@NotNull Location from) {
+    public void setFrom(@NotNull final Location from) {
         validateLocation(from);
         this.from = from;
     }
@@ -88,7 +88,7 @@ public class PlayerJumpEvent extends PlayerEvent implements Cancellable {
         return to;
     }
 
-    private void validateLocation(@NotNull Location loc) {
+    private void validateLocation(@NotNull final Location loc) {
         Preconditions.checkArgument(loc != null, "Cannot use null location!");
         Preconditions.checkArgument(loc.getWorld() != null, "Cannot use location with null world!");
     }
diff --git a/src/main/java/com/destroystokyo/paper/event/player/PlayerLaunchProjectileEvent.java b/src/main/java/com/destroystokyo/paper/event/player/PlayerLaunchProjectileEvent.java
index 5450575459f2d95be93db5a8c6d4d88c69deb2ec..c2830425a43464ca134b1826df1e7f0dcdd4afc9 100644
--- a/src/main/java/com/destroystokyo/paper/event/player/PlayerLaunchProjectileEvent.java
+++ b/src/main/java/com/destroystokyo/paper/event/player/PlayerLaunchProjectileEvent.java
@@ -22,7 +22,7 @@ public class PlayerLaunchProjectileEvent extends PlayerEvent implements Cancella
     private boolean consumeItem = true;
     private boolean cancelled;
 
-    public PlayerLaunchProjectileEvent(@NotNull Player shooter, @NotNull ItemStack itemStack, @NotNull Projectile projectile) {
+    public PlayerLaunchProjectileEvent(@NotNull final Player shooter, @NotNull final ItemStack itemStack, @NotNull final Projectile projectile) {
         super(shooter);
         this.itemStack = itemStack;
         this.projectile = projectile;
@@ -62,7 +62,7 @@ public class PlayerLaunchProjectileEvent extends PlayerEvent implements Cancella
      *
      * @param consumeItem True to consume
      */
-    public void setShouldConsume(boolean consumeItem) {
+    public void setShouldConsume(final boolean consumeItem) {
         this.consumeItem = consumeItem;
     }
 
@@ -70,7 +70,7 @@ public class PlayerLaunchProjectileEvent extends PlayerEvent implements Cancella
         return cancelled;
     }
 
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         cancelled = cancel;
     }
 
diff --git a/src/main/java/com/destroystokyo/paper/event/player/PlayerPickupExperienceEvent.java b/src/main/java/com/destroystokyo/paper/event/player/PlayerPickupExperienceEvent.java
index d117956ca6026ad676e1aa551b4f10ca83be0b7e..5a3de00eb94731e853d24dd0a62ab8b1d088745d 100644
--- a/src/main/java/com/destroystokyo/paper/event/player/PlayerPickupExperienceEvent.java
+++ b/src/main/java/com/destroystokyo/paper/event/player/PlayerPickupExperienceEvent.java
@@ -36,7 +36,7 @@ import org.jetbrains.annotations.NotNull;
 public class PlayerPickupExperienceEvent extends PlayerEvent implements Cancellable {
     @NotNull private final ExperienceOrb experienceOrb;
 
-    public PlayerPickupExperienceEvent(@NotNull Player player, @NotNull ExperienceOrb experienceOrb) {
+    public PlayerPickupExperienceEvent(@NotNull final Player player, @NotNull final ExperienceOrb experienceOrb) {
         super(player);
         this.experienceOrb = experienceOrb;
     }
@@ -73,7 +73,7 @@ public class PlayerPickupExperienceEvent extends PlayerEvent implements Cancella
      * @param cancel true if you wish to cancel this event
      */
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         cancelled = cancel;
     }
 }
diff --git a/src/main/java/com/destroystokyo/paper/event/player/PlayerReadyArrowEvent.java b/src/main/java/com/destroystokyo/paper/event/player/PlayerReadyArrowEvent.java
index 5cf47f7ffd039add8bcdce9e08f52b2fc5aafcc6..13cedfc3934ce4f0a579bc5ac34bc9a206a33433 100644
--- a/src/main/java/com/destroystokyo/paper/event/player/PlayerReadyArrowEvent.java
+++ b/src/main/java/com/destroystokyo/paper/event/player/PlayerReadyArrowEvent.java
@@ -37,7 +37,7 @@ public class PlayerReadyArrowEvent extends PlayerEvent implements Cancellable {
     @NotNull private final ItemStack bow;
     @NotNull private final ItemStack arrow;
 
-    public PlayerReadyArrowEvent(@NotNull Player player, @NotNull ItemStack bow, @NotNull ItemStack arrow) {
+    public PlayerReadyArrowEvent(@NotNull final Player player, @NotNull final ItemStack bow, @NotNull final ItemStack arrow) {
         super(player);
         this.bow = bow;
         this.arrow = arrow;
@@ -86,7 +86,7 @@ public class PlayerReadyArrowEvent extends PlayerEvent implements Cancellable {
      * @param cancel true if you wish to cancel this event
      */
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         cancelled = cancel;
     }
 }
diff --git a/src/main/java/com/destroystokyo/paper/event/player/PlayerRecipeBookClickEvent.java b/src/main/java/com/destroystokyo/paper/event/player/PlayerRecipeBookClickEvent.java
index 7fa937d339ee98ad308deebb523fead6522eb262..d53869afc80d101577c8796a75f771974297359b 100644
--- a/src/main/java/com/destroystokyo/paper/event/player/PlayerRecipeBookClickEvent.java
+++ b/src/main/java/com/destroystokyo/paper/event/player/PlayerRecipeBookClickEvent.java
@@ -16,7 +16,7 @@ public class PlayerRecipeBookClickEvent extends PlayerEvent implements Cancellab
     @NotNull private NamespacedKey recipe;
     private boolean makeAll;
 
-    public PlayerRecipeBookClickEvent(@NotNull Player player, @NotNull NamespacedKey recipe, boolean makeAll) {
+    public PlayerRecipeBookClickEvent(@NotNull final Player player, @NotNull final NamespacedKey recipe, final boolean makeAll) {
         super(player);
         this.recipe = recipe;
         this.makeAll = makeAll;
@@ -37,7 +37,7 @@ public class PlayerRecipeBookClickEvent extends PlayerEvent implements Cancellab
      *
      * @param recipe The key of the recipe that should be requested
      */
-    public void setRecipe(@NotNull NamespacedKey recipe) {
+    public void setRecipe(@NotNull final NamespacedKey recipe) {
         this.recipe = recipe;
     }
 
@@ -57,7 +57,7 @@ public class PlayerRecipeBookClickEvent extends PlayerEvent implements Cancellab
      *
      * @param makeAll {@code true} if the request should attempt to make the maximum amount of results
      */
-    public void setMakeAll(boolean makeAll) {
+    public void setMakeAll(final boolean makeAll) {
         this.makeAll = makeAll;
     }
 
@@ -67,7 +67,7 @@ public class PlayerRecipeBookClickEvent extends PlayerEvent implements Cancellab
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.cancel = cancel;
     }
 
diff --git a/src/main/java/com/destroystokyo/paper/event/player/PlayerSetSpawnEvent.java b/src/main/java/com/destroystokyo/paper/event/player/PlayerSetSpawnEvent.java
index 69058a7bf266a9c48663b3c5b723633e995a8919..2893e074e53a736e0a347c977d347da38eba0918 100644
--- a/src/main/java/com/destroystokyo/paper/event/player/PlayerSetSpawnEvent.java
+++ b/src/main/java/com/destroystokyo/paper/event/player/PlayerSetSpawnEvent.java
@@ -25,7 +25,7 @@ public class PlayerSetSpawnEvent extends PlayerEvent implements Cancellable {
 
     private boolean cancelled;
 
-    public PlayerSetSpawnEvent(@NotNull Player who, @NotNull Cause cause, @Nullable Location location, boolean forced, boolean notifyPlayer, @Nullable Component notification) {
+    public PlayerSetSpawnEvent(@NotNull final Player who, @NotNull final Cause cause, @Nullable final Location location, final boolean forced, final boolean notifyPlayer, @Nullable final Component notification) {
         super(who);
         this.cause = cause;
         this.location = location;
@@ -63,7 +63,7 @@ public class PlayerSetSpawnEvent extends PlayerEvent implements Cancellable {
      *
      * @param location the spawn location, or null to remove the spawn location
      */
-    public void setLocation(@Nullable Location location) {
+    public void setLocation(@Nullable final Location location) {
         this.location = location;
     }
 
@@ -81,7 +81,7 @@ public class PlayerSetSpawnEvent extends PlayerEvent implements Cancellable {
      *
      * @param forced true to force
      */
-    public void setForced(boolean forced) {
+    public void setForced(final boolean forced) {
         this.forced = forced;
     }
 
@@ -101,7 +101,7 @@ public class PlayerSetSpawnEvent extends PlayerEvent implements Cancellable {
      *
      * @param notifyPlayer true to notify
      */
-    public void setNotifyPlayer(boolean notifyPlayer) {
+    public void setNotifyPlayer(final boolean notifyPlayer) {
         this.notifyPlayer = notifyPlayer;
     }
 
@@ -121,7 +121,7 @@ public class PlayerSetSpawnEvent extends PlayerEvent implements Cancellable {
      *
      * @param notification null to send no message
      */
-    public void setNotification(@Nullable Component notification) {
+    public void setNotification(@Nullable final Component notification) {
         this.notification = notification;
     }
 
@@ -131,7 +131,7 @@ public class PlayerSetSpawnEvent extends PlayerEvent implements Cancellable {
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.cancelled = cancel;
     }
 
diff --git a/src/main/java/com/destroystokyo/paper/event/player/PlayerStartSpectatingEntityEvent.java b/src/main/java/com/destroystokyo/paper/event/player/PlayerStartSpectatingEntityEvent.java
index b8ec7ef2d4ef0683cc0d6ca86885dd9a01f47e16..289193177c7353df189eaf802790afd754e035db 100644
--- a/src/main/java/com/destroystokyo/paper/event/player/PlayerStartSpectatingEntityEvent.java
+++ b/src/main/java/com/destroystokyo/paper/event/player/PlayerStartSpectatingEntityEvent.java
@@ -17,7 +17,7 @@ public class PlayerStartSpectatingEntityEvent extends PlayerEvent implements Can
     @NotNull private final Entity currentSpectatorTarget;
     @NotNull private final Entity newSpectatorTarget;
 
-    public PlayerStartSpectatingEntityEvent(@NotNull Player player, @NotNull Entity currentSpectatorTarget, @NotNull Entity newSpectatorTarget) {
+    public PlayerStartSpectatingEntityEvent(@NotNull final Player player, @NotNull final Entity currentSpectatorTarget, @NotNull final Entity newSpectatorTarget) {
         super(player);
         this.currentSpectatorTarget = currentSpectatorTarget;
         this.newSpectatorTarget = newSpectatorTarget;
@@ -49,7 +49,7 @@ public class PlayerStartSpectatingEntityEvent extends PlayerEvent implements Can
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.cancelled = cancel;
     }
 
diff --git a/src/main/java/com/destroystokyo/paper/event/player/PlayerStopSpectatingEntityEvent.java b/src/main/java/com/destroystokyo/paper/event/player/PlayerStopSpectatingEntityEvent.java
index 693d119ab920a1bd0d1b5a0feb092631715ec0ad..f772884beaeb4781b09e4e62827b37bfe47bef24 100644
--- a/src/main/java/com/destroystokyo/paper/event/player/PlayerStopSpectatingEntityEvent.java
+++ b/src/main/java/com/destroystokyo/paper/event/player/PlayerStopSpectatingEntityEvent.java
@@ -16,7 +16,7 @@ public class PlayerStopSpectatingEntityEvent extends PlayerEvent implements Canc
     private boolean cancelled;
     @NotNull private final Entity spectatorTarget;
 
-    public PlayerStopSpectatingEntityEvent(@NotNull Player player, @NotNull Entity spectatorTarget) {
+    public PlayerStopSpectatingEntityEvent(@NotNull final Player player, @NotNull final Entity spectatorTarget) {
         super(player);
         this.spectatorTarget = spectatorTarget;
     }
@@ -37,7 +37,7 @@ public class PlayerStopSpectatingEntityEvent extends PlayerEvent implements Canc
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.cancelled = cancel;
     }
 
diff --git a/src/main/java/com/destroystokyo/paper/event/player/PlayerTeleportEndGatewayEvent.java b/src/main/java/com/destroystokyo/paper/event/player/PlayerTeleportEndGatewayEvent.java
index b64ab6eecd8bc4ca9c109b9d83c82861d6260793..899ecbbbd459e5d508ee10e5218133223437c7fd 100644
--- a/src/main/java/com/destroystokyo/paper/event/player/PlayerTeleportEndGatewayEvent.java
+++ b/src/main/java/com/destroystokyo/paper/event/player/PlayerTeleportEndGatewayEvent.java
@@ -12,7 +12,7 @@ import org.jetbrains.annotations.NotNull;
 public class PlayerTeleportEndGatewayEvent extends PlayerTeleportEvent {
     @NotNull private final EndGateway gateway;
 
-    public PlayerTeleportEndGatewayEvent(@NotNull Player player, @NotNull Location from, @NotNull Location to, @NotNull EndGateway gateway) {
+    public PlayerTeleportEndGatewayEvent(@NotNull final Player player, @NotNull final Location from, @NotNull final Location to, @NotNull final EndGateway gateway) {
         super(player, from, to, PlayerTeleportEvent.TeleportCause.END_GATEWAY);
         this.gateway = gateway;
     }
diff --git a/src/main/java/com/destroystokyo/paper/event/player/PlayerUseUnknownEntityEvent.java b/src/main/java/com/destroystokyo/paper/event/player/PlayerUseUnknownEntityEvent.java
index 09cfdf48ead8f03f3497646537292174241b0868..56b5b1f2f06e42de321ec07e099f6913a85218fb 100644
--- a/src/main/java/com/destroystokyo/paper/event/player/PlayerUseUnknownEntityEvent.java
+++ b/src/main/java/com/destroystokyo/paper/event/player/PlayerUseUnknownEntityEvent.java
@@ -13,7 +13,7 @@ public class PlayerUseUnknownEntityEvent extends PlayerEvent {
     private final boolean attack;
     @NotNull private final EquipmentSlot hand;
 
-    public PlayerUseUnknownEntityEvent(@NotNull Player who, int entityId, boolean attack, @NotNull EquipmentSlot hand) {
+    public PlayerUseUnknownEntityEvent(@NotNull final Player who, final int entityId, final boolean attack, @NotNull final EquipmentSlot hand) {
         super(who);
         this.entityId = entityId;
         this.attack = attack;
diff --git a/src/main/java/com/destroystokyo/paper/event/profile/FillProfileEvent.java b/src/main/java/com/destroystokyo/paper/event/profile/FillProfileEvent.java
index 71f36e9cae209ec6861835a5e76e018de959040a..a987ae74bb56a53c869a9671608c8eddf996c54a 100644
--- a/src/main/java/com/destroystokyo/paper/event/profile/FillProfileEvent.java
+++ b/src/main/java/com/destroystokyo/paper/event/profile/FillProfileEvent.java
@@ -37,7 +37,7 @@ import org.jetbrains.annotations.NotNull;
 public class FillProfileEvent extends Event {
     @NotNull private final PlayerProfile profile;
 
-    public FillProfileEvent(@NotNull PlayerProfile profile) {
+    public FillProfileEvent(@NotNull final PlayerProfile profile) {
         super(!org.bukkit.Bukkit.isPrimaryThread());
         this.profile = profile;
     }
diff --git a/src/main/java/com/destroystokyo/paper/event/profile/LookupProfileEvent.java b/src/main/java/com/destroystokyo/paper/event/profile/LookupProfileEvent.java
index 8df37c07cd55ddf110d1dd68183d7b697f7a6756..a5b7e84456e01a08f62281109abdc63d4d982b64 100644
--- a/src/main/java/com/destroystokyo/paper/event/profile/LookupProfileEvent.java
+++ b/src/main/java/com/destroystokyo/paper/event/profile/LookupProfileEvent.java
@@ -20,7 +20,7 @@ public class LookupProfileEvent extends Event {
 
     @NotNull private final PlayerProfile profile;
 
-    public LookupProfileEvent(@NotNull PlayerProfile profile) {
+    public LookupProfileEvent(@NotNull final PlayerProfile profile) {
         super(!Bukkit.isPrimaryThread());
         this.profile = profile;
     }
diff --git a/src/main/java/com/destroystokyo/paper/event/profile/PreFillProfileEvent.java b/src/main/java/com/destroystokyo/paper/event/profile/PreFillProfileEvent.java
index 021bc86310a06f84b39459e0eb8927802726399c..7c7ec07b176704dd7d168d8cb03a346a56bf8993 100644
--- a/src/main/java/com/destroystokyo/paper/event/profile/PreFillProfileEvent.java
+++ b/src/main/java/com/destroystokyo/paper/event/profile/PreFillProfileEvent.java
@@ -39,7 +39,7 @@ import org.jetbrains.annotations.NotNull;
 public class PreFillProfileEvent extends Event {
     @NotNull private final PlayerProfile profile;
 
-    public PreFillProfileEvent(@NotNull PlayerProfile profile) {
+    public PreFillProfileEvent(@NotNull final PlayerProfile profile) {
         super(!org.bukkit.Bukkit.isPrimaryThread());
         this.profile = profile;
     }
@@ -59,7 +59,7 @@ public class PreFillProfileEvent extends Event {
      * @see PlayerProfile#setProperties(Collection)
      * @param properties The properties to set/append
      */
-    public void setProperties(@NotNull Collection<ProfileProperty> properties) {
+    public void setProperties(@NotNull final Collection<ProfileProperty> properties) {
         profile.setProperties(properties);
     }
 
diff --git a/src/main/java/com/destroystokyo/paper/event/profile/PreLookupProfileEvent.java b/src/main/java/com/destroystokyo/paper/event/profile/PreLookupProfileEvent.java
index 822a5377e4caafc135fbdf60e72aba326313d9f1..0ac5c3fe49a3284add347e82a93a5a265ec0fa85 100644
--- a/src/main/java/com/destroystokyo/paper/event/profile/PreLookupProfileEvent.java
+++ b/src/main/java/com/destroystokyo/paper/event/profile/PreLookupProfileEvent.java
@@ -28,7 +28,7 @@ public class PreLookupProfileEvent extends Event {
     private @Nullable UUID uuid;
     @NotNull private Set<ProfileProperty> properties = new HashSet<>();
 
-    public PreLookupProfileEvent(@NotNull String name) {
+    public PreLookupProfileEvent(@NotNull final String name) {
         super(!Bukkit.isPrimaryThread());
         this.name = name;
     }
@@ -60,7 +60,7 @@ public class PreLookupProfileEvent extends Event {
      *
      * @param uuid the UUID to set for the profile or null to reset
      */
-    public void setUUID(@Nullable UUID uuid) {
+    public void setUUID(@Nullable final UUID uuid) {
         this.uuid = uuid;
     }
 
@@ -78,7 +78,7 @@ public class PreLookupProfileEvent extends Event {
      * Any property in this Set will be automatically prefilled on this Profile
      * @param properties The properties to add
      */
-    public void setProfileProperties(@NotNull Set<ProfileProperty> properties) {
+    public void setProfileProperties(@NotNull final Set<ProfileProperty> properties) {
         this.properties = new HashSet<>();
         this.properties.addAll(properties);
     }
@@ -88,7 +88,7 @@ public class PreLookupProfileEvent extends Event {
      * Any property in this Set will be automatically prefilled on this Profile
      * @param properties The properties to add
      */
-    public void addProfileProperties(@NotNull Set<ProfileProperty> properties) {
+    public void addProfileProperties(@NotNull final Set<ProfileProperty> properties) {
         this.properties.addAll(properties);
     }
 
diff --git a/src/main/java/com/destroystokyo/paper/event/profile/ProfileWhitelistVerifyEvent.java b/src/main/java/com/destroystokyo/paper/event/profile/ProfileWhitelistVerifyEvent.java
index c6f5e2b5459368ad1e4db9929ca14568a25793fa..754e14c2da5318f7c26201516ab433d1f4c0057b 100644
--- a/src/main/java/com/destroystokyo/paper/event/profile/ProfileWhitelistVerifyEvent.java
+++ b/src/main/java/com/destroystokyo/paper/event/profile/ProfileWhitelistVerifyEvent.java
@@ -46,11 +46,11 @@ public class ProfileWhitelistVerifyEvent extends Event {
     @Nullable private Component kickMessage;
 
     @Deprecated
-    public ProfileWhitelistVerifyEvent(@NotNull final PlayerProfile profile, boolean whitelistEnabled, boolean whitelisted, boolean isOp, @Nullable String kickMessage) {
+    public ProfileWhitelistVerifyEvent(@NotNull final PlayerProfile profile, final boolean whitelistEnabled, final boolean whitelisted, final boolean isOp, @Nullable final String kickMessage) {
         this(profile, whitelistEnabled, whitelisted, isOp, kickMessage == null ? null : LegacyComponentSerializer.legacySection().deserialize(kickMessage));
     }
 
-    public ProfileWhitelistVerifyEvent(@NotNull final PlayerProfile profile, boolean whitelistEnabled, boolean whitelisted, boolean isOp, @Nullable Component kickMessage) {
+    public ProfileWhitelistVerifyEvent(@NotNull final PlayerProfile profile, final boolean whitelistEnabled, final boolean whitelisted, final boolean isOp, @Nullable final Component kickMessage) {
         this.profile = profile;
         this.whitelistEnabled = whitelistEnabled;
         this.whitelisted = whitelisted;
@@ -73,7 +73,7 @@ public class ProfileWhitelistVerifyEvent extends Event {
      * @deprecated Use {@link #kickMessage(Component)}
      */
     @Deprecated
-    public void setKickMessage(@Nullable String kickMessage) {
+    public void setKickMessage(@Nullable final String kickMessage) {
         this.kickMessage(kickMessage == null ? null : LegacyComponentSerializer.legacySection().deserialize(kickMessage));
     }
 
@@ -88,7 +88,7 @@ public class ProfileWhitelistVerifyEvent extends Event {
     /**
      * @param kickMessage The message to send to the player on kick if not whitelisted. May set to null to use the server configured default
      */
-    public void kickMessage(@Nullable Component kickMessage) {
+    public void kickMessage(@Nullable final Component kickMessage) {
         this.kickMessage = kickMessage;
     }
 
@@ -111,7 +111,7 @@ public class ProfileWhitelistVerifyEvent extends Event {
      * Changes the players whitelisted state. false will deny the login
      * @param whitelisted The new whitelisted state
      */
-    public void setWhitelisted(boolean whitelisted) {
+    public void setWhitelisted(final boolean whitelisted) {
         this.whitelisted = whitelisted;
     }
 
diff --git a/src/main/java/com/destroystokyo/paper/event/server/AsyncTabCompleteEvent.java b/src/main/java/com/destroystokyo/paper/event/server/AsyncTabCompleteEvent.java
index 77e84b28ebb0a1b44cafdfcbe5a63d7c9365f49a..cd05409d13b76817e08f65255223aa3f12dde2c8 100644
--- a/src/main/java/com/destroystokyo/paper/event/server/AsyncTabCompleteEvent.java
+++ b/src/main/java/com/destroystokyo/paper/event/server/AsyncTabCompleteEvent.java
@@ -63,7 +63,7 @@ public class AsyncTabCompleteEvent extends Event implements Cancellable {
     private boolean handled = false;
     private final boolean fireSyncHandler = true;
 
-    public AsyncTabCompleteEvent(@NotNull CommandSender sender, @NotNull String buffer, boolean isCommand, @Nullable Location loc) {
+    public AsyncTabCompleteEvent(@NotNull final CommandSender sender, @NotNull final String buffer, final boolean isCommand, @Nullable final Location loc) {
         super(true);
         this.sender = sender;
         this.buffer = buffer;
@@ -72,7 +72,7 @@ public class AsyncTabCompleteEvent extends Event implements Cancellable {
     }
 
     @Deprecated
-    public AsyncTabCompleteEvent(@NotNull CommandSender sender, @NotNull List<String> completions, @NotNull String buffer, boolean isCommand, @Nullable Location loc) {
+    public AsyncTabCompleteEvent(@NotNull final CommandSender sender, @NotNull final List<String> completions, @NotNull final String buffer, final boolean isCommand, @Nullable final Location loc) {
         super(true);
         this.sender = sender;
         this.completions.addAll(fromStrings(completions));
@@ -116,7 +116,7 @@ public class AsyncTabCompleteEvent extends Event implements Cancellable {
      *
      * @param completions the new completions
      */
-    public void setCompletions(@NotNull List<String> completions) {
+    public void setCompletions(@NotNull final List<String> completions) {
         if (completions == this.stringCompletions) {
             return;
         }
@@ -197,7 +197,7 @@ public class AsyncTabCompleteEvent extends Event implements Cancellable {
      *
      * @param handled if this completion should be marked as being handled
      */
-    public void setHandled(boolean handled) {
+    public void setHandled(final boolean handled) {
         this.handled = handled;
     }
 
@@ -214,7 +214,7 @@ public class AsyncTabCompleteEvent extends Event implements Cancellable {
      * @param cancelled true if you wish to cancel this event
      */
     @Override
-    public void setCancelled(boolean cancelled) {
+    public void setCancelled(final boolean cancelled) {
         this.cancelled = cancelled;
     }
 
diff --git a/src/main/java/com/destroystokyo/paper/event/server/GS4QueryEvent.java b/src/main/java/com/destroystokyo/paper/event/server/GS4QueryEvent.java
index 99abacc44ed55e35f0619fda0a617da41e85616b..fee67b299493105c6da98abad0e1e1d30912ebf1 100644
--- a/src/main/java/com/destroystokyo/paper/event/server/GS4QueryEvent.java
+++ b/src/main/java/com/destroystokyo/paper/event/server/GS4QueryEvent.java
@@ -26,7 +26,7 @@ public final class GS4QueryEvent extends Event {
     private final @NotNull InetAddress querierAddress;
     private QueryResponse response;
 
-    public GS4QueryEvent(@NotNull QueryType queryType, @NotNull InetAddress querierAddress, @NotNull QueryResponse response) {
+    public GS4QueryEvent(@NotNull final QueryType queryType, @NotNull final InetAddress querierAddress, @NotNull final QueryResponse response) {
         super(true); // should always be called async
         this.queryType = Preconditions.checkNotNull(queryType, "queryType");
         this.querierAddress = Preconditions.checkNotNull(querierAddress, "querierAddress");
@@ -64,7 +64,7 @@ public final class GS4QueryEvent extends Event {
      * Set query response
      * @param response query response
      */
-    public void setResponse(@NotNull QueryResponse response) {
+    public void setResponse(@NotNull final QueryResponse response) {
         this.response = Preconditions.checkNotNull(response, "response");
     }
 
@@ -117,7 +117,7 @@ public final class GS4QueryEvent extends Event {
         private final String serverVersion;
         private final Collection<PluginInformation> plugins;
 
-        private QueryResponse(String motd, String gameVersion, String map, int currentPlayers, int maxPlayers, String hostname, int port, Collection<String> players, String serverVersion, Collection<PluginInformation> plugins) {
+        private QueryResponse(final String motd, final String gameVersion, final String map, final int currentPlayers, final int maxPlayers, final String hostname, final int port, final Collection<String> players, final String serverVersion, final Collection<PluginInformation> plugins) {
             this.motd = motd;
             this.gameVersion = gameVersion;
             this.map = map;
@@ -266,58 +266,58 @@ public final class GS4QueryEvent extends Event {
             private Builder() {}
 
             @NotNull
-            public Builder motd(@NotNull String motd) {
+            public Builder motd(@NotNull final String motd) {
                 this.motd = Preconditions.checkNotNull(motd, "motd");
                 return this;
             }
 
             @NotNull
-            public Builder gameVersion(@NotNull String gameVersion) {
+            public Builder gameVersion(@NotNull final String gameVersion) {
                 this.gameVersion = Preconditions.checkNotNull(gameVersion, "gameVersion");
                 return this;
             }
 
             @NotNull
-            public Builder map(@NotNull String map) {
+            public Builder map(@NotNull final String map) {
                 this.map = Preconditions.checkNotNull(map, "map");
                 return this;
             }
 
             @NotNull
-            public Builder currentPlayers(int currentPlayers) {
+            public Builder currentPlayers(final int currentPlayers) {
                 Preconditions.checkArgument(currentPlayers >= 0, "currentPlayers cannot be negative");
                 this.currentPlayers = currentPlayers;
                 return this;
             }
 
             @NotNull
-            public Builder maxPlayers(int maxPlayers) {
+            public Builder maxPlayers(final int maxPlayers) {
                 Preconditions.checkArgument(maxPlayers >= 0, "maxPlayers cannot be negative");
                 this.maxPlayers = maxPlayers;
                 return this;
             }
 
             @NotNull
-            public Builder hostname(@NotNull String hostname) {
+            public Builder hostname(@NotNull final String hostname) {
                 this.hostname = Preconditions.checkNotNull(hostname, "hostname");
                 return this;
             }
 
             @NotNull
-            public Builder port(int port) {
+            public Builder port(final int port) {
                 Preconditions.checkArgument(port >= 1 && port <= 65535, "port must be between 1-65535");
                 this.port = port;
                 return this;
             }
 
             @NotNull
-            public Builder players(@NotNull Collection<String> players) {
+            public Builder players(@NotNull final Collection<String> players) {
                 this.players.addAll(Preconditions.checkNotNull(players, "players"));
                 return this;
             }
 
             @NotNull
-            public Builder players(@NotNull String... players) {
+            public Builder players(@NotNull final String... players) {
                 this.players.addAll(Arrays.asList(Preconditions.checkNotNull(players, "players")));
                 return this;
             }
@@ -329,19 +329,19 @@ public final class GS4QueryEvent extends Event {
             }
 
             @NotNull
-            public Builder serverVersion(@NotNull String serverVersion) {
+            public Builder serverVersion(@NotNull final String serverVersion) {
                 this.serverVersion = Preconditions.checkNotNull(serverVersion, "serverVersion");
                 return this;
             }
 
             @NotNull
-            public Builder plugins(@NotNull Collection<PluginInformation> plugins) {
+            public Builder plugins(@NotNull final Collection<PluginInformation> plugins) {
                 this.plugins.addAll(Preconditions.checkNotNull(plugins, "plugins"));
                 return this;
             }
 
             @NotNull
-            public Builder plugins(@NotNull PluginInformation... plugins) {
+            public Builder plugins(@NotNull final PluginInformation... plugins) {
                 this.plugins.addAll(Arrays.asList(Preconditions.checkNotNull(plugins, "plugins")));
                 return this;
             }
@@ -380,7 +380,7 @@ public final class GS4QueryEvent extends Event {
             private String name;
             private String version;
 
-            public PluginInformation(@NotNull String name, @NotNull String version) {
+            public PluginInformation(@NotNull final String name, @NotNull final String version) {
                 this.name = Preconditions.checkNotNull(name, "name");
                 this.version = Preconditions.checkNotNull(version, "version");
             }
@@ -390,11 +390,11 @@ public final class GS4QueryEvent extends Event {
                 return name;
             }
 
-            public void setName(@NotNull String name) {
+            public void setName(@NotNull final String name) {
                 this.name = name;
             }
 
-            public void setVersion(@NotNull String version) {
+            public void setVersion(@NotNull final String version) {
                 this.version = version;
             }
 
@@ -404,7 +404,7 @@ public final class GS4QueryEvent extends Event {
             }
 
             @NotNull
-            public static PluginInformation of(@NotNull String name, @NotNull String version) {
+            public static PluginInformation of(@NotNull final String name, @NotNull final String version) {
                 return new PluginInformation(name, version);
             }
         }
diff --git a/src/main/java/com/destroystokyo/paper/event/server/PaperServerListPingEvent.java b/src/main/java/com/destroystokyo/paper/event/server/PaperServerListPingEvent.java
index 292c69fedf381dd55f1864136fe5a1a343cd5ea7..83ea31695a73d3e06ef7b1ecbb864a25de2e321a 100644
--- a/src/main/java/com/destroystokyo/paper/event/server/PaperServerListPingEvent.java
+++ b/src/main/java/com/destroystokyo/paper/event/server/PaperServerListPingEvent.java
@@ -42,8 +42,8 @@ public class PaperServerListPingEvent extends ServerListPingEvent implements Can
     private Object[] players;
 
     @Deprecated
-    public PaperServerListPingEvent(@NotNull StatusClient client, @NotNull String motd, int numPlayers, int maxPlayers,
-            @NotNull String version, int protocolVersion, @Nullable CachedServerIcon favicon) {
+    public PaperServerListPingEvent(@NotNull final StatusClient client, @NotNull final String motd, final int numPlayers, final int maxPlayers,
+            @NotNull final String version, final int protocolVersion, @Nullable final CachedServerIcon favicon) {
         super("", client.getAddress().getAddress(), motd, numPlayers, maxPlayers);
         this.client = client;
         this.numPlayers = numPlayers;
@@ -52,8 +52,8 @@ public class PaperServerListPingEvent extends ServerListPingEvent implements Can
         setServerIcon(favicon);
     }
 
-    public PaperServerListPingEvent(@NotNull StatusClient client, @NotNull net.kyori.adventure.text.Component motd, int numPlayers, int maxPlayers,
-                                    @NotNull String version, int protocolVersion, @Nullable CachedServerIcon favicon) {
+    public PaperServerListPingEvent(@NotNull final StatusClient client, @NotNull final net.kyori.adventure.text.Component motd, final int numPlayers, final int maxPlayers,
+                                    @NotNull final String version, final int protocolVersion, @Nullable final CachedServerIcon favicon) {
         super("", client.getAddress().getAddress(), motd, numPlayers, maxPlayers);
         this.client = client;
         this.numPlayers = numPlayers;
@@ -95,7 +95,7 @@ public class PaperServerListPingEvent extends ServerListPingEvent implements Can
      *
      * @param numPlayers The number of online players
      */
-    public void setNumPlayers(int numPlayers) {
+    public void setNumPlayers(final int numPlayers) {
         if (this.numPlayers != numPlayers) {
             this.numPlayers = numPlayers;
             this.originalPlayerCount = false;
@@ -141,7 +141,7 @@ public class PaperServerListPingEvent extends ServerListPingEvent implements Can
      *
      * @param hidePlayers {@code true} if the player count should be hidden
      */
-    public void setHidePlayers(boolean hidePlayers) {
+    public void setHidePlayers(final boolean hidePlayers) {
         this.hidePlayers = hidePlayers;
     }
 
@@ -174,7 +174,7 @@ public class PaperServerListPingEvent extends ServerListPingEvent implements Can
      *
      * @param version The server version
      */
-    public void setVersion(@NotNull String version) {
+    public void setVersion(@NotNull final String version) {
         this.version = requireNonNull(version, "version");
     }
 
@@ -195,7 +195,7 @@ public class PaperServerListPingEvent extends ServerListPingEvent implements Can
      *
      * @param protocolVersion The protocol version of the server
      */
-    public void setProtocolVersion(int protocolVersion) {
+    public void setProtocolVersion(final int protocolVersion) {
         this.protocolVersion = protocolVersion;
     }
 
@@ -242,7 +242,7 @@ public class PaperServerListPingEvent extends ServerListPingEvent implements Can
      * without sending a response to the client.</p>
      */
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.cancelled = cancel;
     }
 
@@ -276,7 +276,7 @@ public class PaperServerListPingEvent extends ServerListPingEvent implements Can
     }
 
     @NotNull
-    protected Player getBukkitPlayer(@NotNull Object player) {
+    protected Player getBukkitPlayer(@NotNull final Object player) {
         return (Player) player;
     }
 
@@ -315,7 +315,7 @@ public class PaperServerListPingEvent extends ServerListPingEvent implements Can
                 throw new IllegalStateException();
             }
 
-            UUID uniqueId = this.player.getUniqueId();
+            final UUID uniqueId = this.player.getUniqueId();
             this.player = null;
 
             // Remove player from iterator
diff --git a/src/main/java/com/destroystokyo/paper/event/server/ServerExceptionEvent.java b/src/main/java/com/destroystokyo/paper/event/server/ServerExceptionEvent.java
index 8406c852c4fd806145ec8d89f176af464e0e922b..688a808a60eb1ba0922144c80137717843dfb3a3 100644
--- a/src/main/java/com/destroystokyo/paper/event/server/ServerExceptionEvent.java
+++ b/src/main/java/com/destroystokyo/paper/event/server/ServerExceptionEvent.java
@@ -14,7 +14,7 @@ public class ServerExceptionEvent extends Event {
     private static final HandlerList handlers = new HandlerList();
     @NotNull private final ServerException exception;
 
-    public ServerExceptionEvent(@NotNull ServerException exception) {
+    public ServerExceptionEvent(@NotNull final ServerException exception) {
         super(!Bukkit.isPrimaryThread());
         this.exception = Preconditions.checkNotNull(exception, "exception");
     }
diff --git a/src/main/java/com/destroystokyo/paper/event/server/ServerTickEndEvent.java b/src/main/java/com/destroystokyo/paper/event/server/ServerTickEndEvent.java
index 9fd28e03649f66f71fb7f0536a137557ec32cd25..47840cc574f7d110e0ed965829195fffd2cd6a0e 100644
--- a/src/main/java/com/destroystokyo/paper/event/server/ServerTickEndEvent.java
+++ b/src/main/java/com/destroystokyo/paper/event/server/ServerTickEndEvent.java
@@ -14,7 +14,7 @@ public class ServerTickEndEvent extends Event {
     private final double tickDuration;
     private final long timeEnd;
 
-    public ServerTickEndEvent(int tickNumber, double tickDuration, long timeRemaining) {
+    public ServerTickEndEvent(final int tickNumber, final double tickDuration, final long timeRemaining) {
         this.tickNumber = tickNumber;
         this.tickDuration = tickDuration;
         this.timeEnd = System.nanoTime() + timeRemaining;
diff --git a/src/main/java/com/destroystokyo/paper/event/server/ServerTickStartEvent.java b/src/main/java/com/destroystokyo/paper/event/server/ServerTickStartEvent.java
index eac85f1f49088bb71afb01eff4d5f53887306461..c6d1e2f65bf903cdba5a62dc4167140d228393e0 100644
--- a/src/main/java/com/destroystokyo/paper/event/server/ServerTickStartEvent.java
+++ b/src/main/java/com/destroystokyo/paper/event/server/ServerTickStartEvent.java
@@ -9,7 +9,7 @@ public class ServerTickStartEvent extends Event {
     private static final HandlerList handlers = new HandlerList();
     private final int tickNumber;
 
-    public ServerTickStartEvent(int tickNumber) {
+    public ServerTickStartEvent(final int tickNumber) {
         this.tickNumber = tickNumber;
     }
 
diff --git a/src/main/java/com/destroystokyo/paper/event/server/WhitelistToggleEvent.java b/src/main/java/com/destroystokyo/paper/event/server/WhitelistToggleEvent.java
index 6ecb63067d73c8677d0c6c544ff5fc9b6f6ca9c0..1eac64525aefd98172508559e0a10cab64176e29 100644
--- a/src/main/java/com/destroystokyo/paper/event/server/WhitelistToggleEvent.java
+++ b/src/main/java/com/destroystokyo/paper/event/server/WhitelistToggleEvent.java
@@ -14,7 +14,7 @@ public class WhitelistToggleEvent extends Event {
 
     private final boolean enabled;
 
-    public WhitelistToggleEvent(boolean enabled) {
+    public WhitelistToggleEvent(final boolean enabled) {
         this.enabled = enabled;
     }
 
diff --git a/src/main/java/com/destroystokyo/paper/exception/ServerCommandException.java b/src/main/java/com/destroystokyo/paper/exception/ServerCommandException.java
index 236d6159712e4f65ef3fad955017427a8839b716..fb31cde0208ce360c8119687d03b911fb7a4b96f 100644
--- a/src/main/java/com/destroystokyo/paper/exception/ServerCommandException.java
+++ b/src/main/java/com/destroystokyo/paper/exception/ServerCommandException.java
@@ -15,21 +15,21 @@ public class ServerCommandException extends ServerException {
     private final @NotNull CommandSender commandSender;
     private final String @NotNull [] arguments;
 
-    public ServerCommandException(String message, Throwable cause, Command command, CommandSender commandSender, String[] arguments) {
+    public ServerCommandException(final String message, final Throwable cause, final Command command, final CommandSender commandSender, final String[] arguments) {
         super(message, cause);
         this.commandSender = checkNotNull(commandSender, "commandSender");
         this.arguments = checkNotNull(arguments, "arguments");
         this.command = checkNotNull(command, "command");
     }
 
-    public ServerCommandException(Throwable cause, Command command, CommandSender commandSender, String[] arguments) {
+    public ServerCommandException(final Throwable cause, final Command command, final CommandSender commandSender, final String[] arguments) {
         super(cause);
         this.commandSender = checkNotNull(commandSender, "commandSender");
         this.arguments = checkNotNull(arguments, "arguments");
         this.command = checkNotNull(command, "command");
     }
 
-    protected ServerCommandException(String message, Throwable cause, boolean enableSuppression, boolean writableStackTrace, Command command, CommandSender commandSender, String[] arguments) {
+    protected ServerCommandException(final String message, final Throwable cause, final boolean enableSuppression, final boolean writableStackTrace, final Command command, final CommandSender commandSender, final String[] arguments) {
         super(message, cause, enableSuppression, writableStackTrace);
         this.commandSender = checkNotNull(commandSender, "commandSender");
         this.arguments = checkNotNull(arguments, "arguments");
diff --git a/src/main/java/com/destroystokyo/paper/exception/ServerEventException.java b/src/main/java/com/destroystokyo/paper/exception/ServerEventException.java
index f5c836d3e9ff953f4424fd46a5ee4aed119bcd09..2391c65ea5061c26f17f0b5801deff9e45e11053 100644
--- a/src/main/java/com/destroystokyo/paper/exception/ServerEventException.java
+++ b/src/main/java/com/destroystokyo/paper/exception/ServerEventException.java
@@ -15,19 +15,19 @@ public class ServerEventException extends ServerPluginException {
     private final @NotNull Listener listener;
     private final @NotNull Event event;
 
-    public ServerEventException(String message, Throwable cause, Plugin responsiblePlugin, Listener listener, Event event) {
+    public ServerEventException(final String message, final Throwable cause, final Plugin responsiblePlugin, final Listener listener, final Event event) {
         super(message, cause, responsiblePlugin);
         this.listener = checkNotNull(listener, "listener");
         this.event = checkNotNull(event, "event");
     }
 
-    public ServerEventException(Throwable cause, Plugin responsiblePlugin, Listener listener, Event event) {
+    public ServerEventException(final Throwable cause, final Plugin responsiblePlugin, final Listener listener, final Event event) {
         super(cause, responsiblePlugin);
         this.listener = checkNotNull(listener, "listener");
         this.event = checkNotNull(event, "event");
     }
 
-    protected ServerEventException(String message, Throwable cause, boolean enableSuppression, boolean writableStackTrace, Plugin responsiblePlugin, Listener listener, Event event) {
+    protected ServerEventException(final String message, final Throwable cause, final boolean enableSuppression, final boolean writableStackTrace, final Plugin responsiblePlugin, final Listener listener, final Event event) {
         super(message, cause, enableSuppression, writableStackTrace, responsiblePlugin);
         this.listener = checkNotNull(listener, "listener");
         this.event = checkNotNull(event, "event");
diff --git a/src/main/java/com/destroystokyo/paper/exception/ServerException.java b/src/main/java/com/destroystokyo/paper/exception/ServerException.java
index c06ea3942447d4824b83ff839cb449fb818dede1..0d4a3369eb35da58e6bcc02cdaf1637bc8e9b57f 100644
--- a/src/main/java/com/destroystokyo/paper/exception/ServerException.java
+++ b/src/main/java/com/destroystokyo/paper/exception/ServerException.java
@@ -5,19 +5,19 @@ package com.destroystokyo.paper.exception;
  */
 public class ServerException extends Exception {
 
-    public ServerException(String message) {
+    public ServerException(final String message) {
         super(message);
     }
 
-    public ServerException(String message, Throwable cause) {
+    public ServerException(final String message, final Throwable cause) {
         super(message, cause);
     }
 
-    public ServerException(Throwable cause) {
+    public ServerException(final Throwable cause) {
         super(cause);
     }
 
-    protected ServerException(String message, Throwable cause, boolean enableSuppression, boolean writableStackTrace) {
+    protected ServerException(final String message, final Throwable cause, final boolean enableSuppression, final boolean writableStackTrace) {
         super(message, cause, enableSuppression, writableStackTrace);
     }
 }
diff --git a/src/main/java/com/destroystokyo/paper/exception/ServerInternalException.java b/src/main/java/com/destroystokyo/paper/exception/ServerInternalException.java
index 2c3effca7c9d6c904cbe248d312b74e2cd360acf..a696df258d531375186f5a8b28407cafe89edaaf 100644
--- a/src/main/java/com/destroystokyo/paper/exception/ServerInternalException.java
+++ b/src/main/java/com/destroystokyo/paper/exception/ServerInternalException.java
@@ -9,27 +9,27 @@ import com.destroystokyo.paper.event.server.ServerExceptionEvent;
  */
 public class ServerInternalException extends ServerException {
 
-    public ServerInternalException(String message) {
+    public ServerInternalException(final String message) {
         super(message);
     }
 
-    public ServerInternalException(String message, Throwable cause) {
+    public ServerInternalException(final String message, final Throwable cause) {
         super(message, cause);
     }
 
-    public ServerInternalException(Throwable cause) {
+    public ServerInternalException(final Throwable cause) {
         super(cause);
     }
 
-    protected ServerInternalException(String message, Throwable cause, boolean enableSuppression, boolean writableStackTrace) {
+    protected ServerInternalException(final String message, final Throwable cause, final boolean enableSuppression, final boolean writableStackTrace) {
         super(message, cause, enableSuppression, writableStackTrace);
     }
 
-    public static void reportInternalException(Throwable cause) {
+    public static void reportInternalException(final Throwable cause) {
         try {
             Bukkit.getPluginManager().callEvent(new ServerExceptionEvent(new ServerInternalException(cause)));
             ;
-        } catch (Throwable t) {
+        } catch (final Throwable t) {
             Bukkit.getLogger().log(Level.WARNING, "Exception posting ServerExceptionEvent", t); // Don't want to rethrow!
         }
     }
diff --git a/src/main/java/com/destroystokyo/paper/exception/ServerPluginEnableDisableException.java b/src/main/java/com/destroystokyo/paper/exception/ServerPluginEnableDisableException.java
index f016ba3b1b62e554a9bacbb9635f2dbe441b3c4e..59de6bf8a08c33133238d153d9f8508ef4faf3c8 100644
--- a/src/main/java/com/destroystokyo/paper/exception/ServerPluginEnableDisableException.java
+++ b/src/main/java/com/destroystokyo/paper/exception/ServerPluginEnableDisableException.java
@@ -6,15 +6,15 @@ import org.bukkit.plugin.Plugin;
  * Thrown whenever there is an exception with any enabling or disabling of plugins.
  */
 public class ServerPluginEnableDisableException extends ServerPluginException {
-    public ServerPluginEnableDisableException(String message, Throwable cause, Plugin responsiblePlugin) {
+    public ServerPluginEnableDisableException(final String message, final Throwable cause, final Plugin responsiblePlugin) {
         super(message, cause, responsiblePlugin);
     }
 
-    public ServerPluginEnableDisableException(Throwable cause, Plugin responsiblePlugin) {
+    public ServerPluginEnableDisableException(final Throwable cause, final Plugin responsiblePlugin) {
         super(cause, responsiblePlugin);
     }
 
-    protected ServerPluginEnableDisableException(String message, Throwable cause, boolean enableSuppression, boolean writableStackTrace, Plugin responsiblePlugin) {
+    protected ServerPluginEnableDisableException(final String message, final Throwable cause, final boolean enableSuppression, final boolean writableStackTrace, final Plugin responsiblePlugin) {
         super(message, cause, enableSuppression, writableStackTrace, responsiblePlugin);
     }
 }
\ No newline at end of file
diff --git a/src/main/java/com/destroystokyo/paper/exception/ServerPluginException.java b/src/main/java/com/destroystokyo/paper/exception/ServerPluginException.java
index ec666dc56746a6f2490bbb8d331882ca5057fbf8..f1f2f7d47ba91d055405979ac32aafea7e5f0225 100644
--- a/src/main/java/com/destroystokyo/paper/exception/ServerPluginException.java
+++ b/src/main/java/com/destroystokyo/paper/exception/ServerPluginException.java
@@ -9,17 +9,17 @@ import static com.google.common.base.Preconditions.checkNotNull;
  * Wrapper exception for all cases to which a plugin can be immediately blamed for
  */
 public class ServerPluginException extends ServerException {
-    public ServerPluginException(String message, Throwable cause, Plugin responsiblePlugin) {
+    public ServerPluginException(final String message, final Throwable cause, final Plugin responsiblePlugin) {
         super(message, cause);
         this.responsiblePlugin = checkNotNull(responsiblePlugin, "responsiblePlugin");
     }
 
-    public ServerPluginException(Throwable cause, Plugin responsiblePlugin) {
+    public ServerPluginException(final Throwable cause, final Plugin responsiblePlugin) {
         super(cause);
         this.responsiblePlugin = checkNotNull(responsiblePlugin, "responsiblePlugin");
     }
 
-    protected ServerPluginException(String message, Throwable cause, boolean enableSuppression, boolean writableStackTrace, Plugin responsiblePlugin) {
+    protected ServerPluginException(final String message, final Throwable cause, final boolean enableSuppression, final boolean writableStackTrace, final Plugin responsiblePlugin) {
         super(message, cause, enableSuppression, writableStackTrace);
         this.responsiblePlugin = checkNotNull(responsiblePlugin, "responsiblePlugin");
     }
diff --git a/src/main/java/com/destroystokyo/paper/exception/ServerPluginMessageException.java b/src/main/java/com/destroystokyo/paper/exception/ServerPluginMessageException.java
index 81cb1dbe6a63fa6a377b48fe4f6f028427036504..e73b2ecb14ce072ed23ba6c4620efc2138585c87 100644
--- a/src/main/java/com/destroystokyo/paper/exception/ServerPluginMessageException.java
+++ b/src/main/java/com/destroystokyo/paper/exception/ServerPluginMessageException.java
@@ -15,21 +15,21 @@ public class ServerPluginMessageException extends ServerPluginException {
     private final @NotNull String channel;
     private final byte @NotNull [] data;
 
-    public ServerPluginMessageException(String message, Throwable cause, Plugin responsiblePlugin, Player player, String channel, byte[] data) {
+    public ServerPluginMessageException(final String message, final Throwable cause, final Plugin responsiblePlugin, final Player player, final String channel, final byte[] data) {
         super(message, cause, responsiblePlugin);
         this.player = checkNotNull(player, "player");
         this.channel = checkNotNull(channel, "channel");
         this.data = checkNotNull(data, "data");
     }
 
-    public ServerPluginMessageException(Throwable cause, Plugin responsiblePlugin, Player player, String channel, byte[] data) {
+    public ServerPluginMessageException(final Throwable cause, final Plugin responsiblePlugin, final Player player, final String channel, final byte[] data) {
         super(cause, responsiblePlugin);
         this.player = checkNotNull(player, "player");
         this.channel = checkNotNull(channel, "channel");
         this.data = checkNotNull(data, "data");
     }
 
-    protected ServerPluginMessageException(String message, Throwable cause, boolean enableSuppression, boolean writableStackTrace, Plugin responsiblePlugin, Player player, String channel, byte[] data) {
+    protected ServerPluginMessageException(final String message, final Throwable cause, final boolean enableSuppression, final boolean writableStackTrace, final Plugin responsiblePlugin, final Player player, final String channel, final byte[] data) {
         super(message, cause, enableSuppression, writableStackTrace, responsiblePlugin);
         this.player = checkNotNull(player, "player");
         this.channel = checkNotNull(channel, "channel");
diff --git a/src/main/java/com/destroystokyo/paper/exception/ServerSchedulerException.java b/src/main/java/com/destroystokyo/paper/exception/ServerSchedulerException.java
index 4f8b6d817c885bf15fd474fbf32c1f15f8b31e17..182198d5366cb51e084855f7c829a424f3dd7551 100644
--- a/src/main/java/com/destroystokyo/paper/exception/ServerSchedulerException.java
+++ b/src/main/java/com/destroystokyo/paper/exception/ServerSchedulerException.java
@@ -12,17 +12,17 @@ public class ServerSchedulerException extends ServerPluginException {
 
     private final @NotNull BukkitTask task;
 
-    public ServerSchedulerException(String message, Throwable cause, @NotNull BukkitTask task) {
+    public ServerSchedulerException(final String message, final Throwable cause, @NotNull final BukkitTask task) {
         super(message, cause, task.getOwner());
         this.task = checkNotNull(task, "task");
     }
 
-    public ServerSchedulerException(Throwable cause, @NotNull BukkitTask task) {
+    public ServerSchedulerException(final Throwable cause, @NotNull final BukkitTask task) {
         super(cause, task.getOwner());
         this.task = checkNotNull(task, "task");
     }
 
-    protected ServerSchedulerException(String message, Throwable cause, boolean enableSuppression, boolean writableStackTrace, @NotNull BukkitTask task) {
+    protected ServerSchedulerException(final String message, final Throwable cause, final boolean enableSuppression, final boolean writableStackTrace, @NotNull final BukkitTask task) {
         super(message, cause, enableSuppression, writableStackTrace, task.getOwner());
         this.task = checkNotNull(task, "task");
     }
diff --git a/src/main/java/com/destroystokyo/paper/exception/ServerTabCompleteException.java b/src/main/java/com/destroystokyo/paper/exception/ServerTabCompleteException.java
index 5582999fe94c7a3dac655044ccc6d078cd9521a1..dd97631c6fa7b04938326013785cbf4affa27951 100644
--- a/src/main/java/com/destroystokyo/paper/exception/ServerTabCompleteException.java
+++ b/src/main/java/com/destroystokyo/paper/exception/ServerTabCompleteException.java
@@ -8,15 +8,15 @@ import org.bukkit.command.CommandSender;
  */
 public class ServerTabCompleteException extends ServerCommandException {
 
-    public ServerTabCompleteException(String message, Throwable cause, Command command, CommandSender commandSender, String[] arguments) {
+    public ServerTabCompleteException(final String message, final Throwable cause, final Command command, final CommandSender commandSender, final String[] arguments) {
         super(message, cause, command, commandSender, arguments);
     }
 
-    public ServerTabCompleteException(Throwable cause, Command command, CommandSender commandSender, String[] arguments) {
+    public ServerTabCompleteException(final Throwable cause, final Command command, final CommandSender commandSender, final String[] arguments) {
         super(cause, command, commandSender, arguments);
     }
 
-    protected ServerTabCompleteException(String message, Throwable cause, boolean enableSuppression, boolean writableStackTrace, Command command, CommandSender commandSender, String[] arguments) {
+    protected ServerTabCompleteException(final String message, final Throwable cause, final boolean enableSuppression, final boolean writableStackTrace, final Command command, final CommandSender commandSender, final String[] arguments) {
         super(message, cause, enableSuppression, writableStackTrace, command, commandSender, arguments);
     }
 }
diff --git a/src/main/java/com/destroystokyo/paper/inventory/ItemStackRecipeChoice.java b/src/main/java/com/destroystokyo/paper/inventory/ItemStackRecipeChoice.java
index dba348f607cbd686182420c1cc4a74d24f2af56a..adf3d7e89805befff14164819cf4c5922c8eacdd 100644
--- a/src/main/java/com/destroystokyo/paper/inventory/ItemStackRecipeChoice.java
+++ b/src/main/java/com/destroystokyo/paper/inventory/ItemStackRecipeChoice.java
@@ -16,11 +16,11 @@ public class ItemStackRecipeChoice implements RecipeChoice {
 
     protected final List<ItemStack> choices = new ArrayList<>();
 
-    public ItemStackRecipeChoice(ItemStack choices) {
+    public ItemStackRecipeChoice(final ItemStack choices) {
         this.choices.add(choices);
     }
 
-    public ItemStackRecipeChoice(@NotNull List<ItemStack> choices) {
+    public ItemStackRecipeChoice(@NotNull final List<ItemStack> choices) {
         this.choices.addAll(choices);
     }
 
@@ -32,17 +32,17 @@ public class ItemStackRecipeChoice implements RecipeChoice {
     @Override
     public @NotNull RecipeChoice clone() {
         try {
-            ItemStackRecipeChoice clone = (ItemStackRecipeChoice) super.clone();
+            final ItemStackRecipeChoice clone = (ItemStackRecipeChoice) super.clone();
             clone.choices.addAll(this.choices);
             return clone;
-        } catch (CloneNotSupportedException ex) {
+        } catch (final CloneNotSupportedException ex) {
             throw new AssertionError(ex);
         }
     }
 
     @Override
-    public boolean test(ItemStack itemStack) {
-        for (ItemStack stack : choices) {
+    public boolean test(final ItemStack itemStack) {
+        for (final ItemStack stack : choices) {
             if (stack.isSimilar(itemStack)) {
                 return true;
             }
diff --git a/src/main/java/com/destroystokyo/paper/loottable/LootableInventory.java b/src/main/java/com/destroystokyo/paper/loottable/LootableInventory.java
index 97815eeb231cf0706b34fa47a4f7d1bb786305b4..6bad56ddc34aa85df23244031296154df1fdb246 100644
--- a/src/main/java/com/destroystokyo/paper/loottable/LootableInventory.java
+++ b/src/main/java/com/destroystokyo/paper/loottable/LootableInventory.java
@@ -37,7 +37,7 @@ public interface LootableInventory extends Lootable {
      * @param player The player to check
      * @return Whether or not this player has looted this block
      */
-    default boolean hasPlayerLooted(@NotNull Player player) {
+    default boolean hasPlayerLooted(@NotNull final Player player) {
         return hasPlayerLooted(player.getUniqueId());
     }
 
@@ -55,7 +55,7 @@ public interface LootableInventory extends Lootable {
      * @return Timestamp last looted, or null if player has not looted this object
      */
     @Nullable
-    default Long getLastLooted(@NotNull Player player) {
+    default Long getLastLooted(@NotNull final Player player) {
         return getLastLooted(player.getUniqueId());
     }
 
@@ -74,7 +74,7 @@ public interface LootableInventory extends Lootable {
      * @param looted true to add player to looted list, false to remove
      * @return The previous state of whether the player had looted this or not
      */
-    default boolean setHasPlayerLooted(@NotNull Player player, boolean looted) {
+    default boolean setHasPlayerLooted(@NotNull final Player player, final boolean looted) {
         return setHasPlayerLooted(player.getUniqueId(), looted);
     }
 
diff --git a/src/main/java/com/destroystokyo/paper/loottable/LootableInventoryReplenishEvent.java b/src/main/java/com/destroystokyo/paper/loottable/LootableInventoryReplenishEvent.java
index fd184f13f5e8ee5cf829fff4f44696e1f760430b..20d9dbab73d352b7d045a83b5b0f45028eb7bfa6 100644
--- a/src/main/java/com/destroystokyo/paper/loottable/LootableInventoryReplenishEvent.java
+++ b/src/main/java/com/destroystokyo/paper/loottable/LootableInventoryReplenishEvent.java
@@ -9,7 +9,7 @@ import org.jetbrains.annotations.NotNull;
 public class LootableInventoryReplenishEvent extends PlayerEvent implements Cancellable {
     @NotNull private final LootableInventory inventory;
 
-    public LootableInventoryReplenishEvent(@NotNull Player player, @NotNull LootableInventory inventory) {
+    public LootableInventoryReplenishEvent(@NotNull final Player player, @NotNull final LootableInventory inventory) {
         super(player);
         this.inventory = inventory;
     }
@@ -39,7 +39,7 @@ public class LootableInventoryReplenishEvent extends PlayerEvent implements Canc
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         cancelled = cancel;
     }
 }
diff --git a/src/main/java/com/destroystokyo/paper/profile/PlayerProfile.java b/src/main/java/com/destroystokyo/paper/profile/PlayerProfile.java
index b76f13a0266806544bde13952476d4867caaf25b..56bc3b653dd872282e00080b4ea5a293743156d4 100644
--- a/src/main/java/com/destroystokyo/paper/profile/PlayerProfile.java
+++ b/src/main/java/com/destroystokyo/paper/profile/PlayerProfile.java
@@ -100,7 +100,7 @@ public interface PlayerProfile extends org.bukkit.profile.PlayerProfile {
      * @param property The property to remove
      * @return If a property was removed
      */
-    default boolean removeProperty(@NotNull ProfileProperty property) {
+    default boolean removeProperty(@NotNull final ProfileProperty property) {
         return removeProperty(property.getName());
     }
 
@@ -109,9 +109,9 @@ public interface PlayerProfile extends org.bukkit.profile.PlayerProfile {
      * @param properties The properties to remove
      * @return If any property was removed
      */
-    default boolean removeProperties(@NotNull Collection<ProfileProperty> properties) {
+    default boolean removeProperties(@NotNull final Collection<ProfileProperty> properties) {
         boolean removed = false;
-        for (ProfileProperty property : properties) {
+        for (final ProfileProperty property : properties) {
             if (removeProperty(property)) {
                 removed = true;
             }
diff --git a/src/main/java/com/destroystokyo/paper/profile/ProfileProperty.java b/src/main/java/com/destroystokyo/paper/profile/ProfileProperty.java
index 14a0a5e2d4801859dbd1573a8733a5537148fabf..d43676f338614394f08c827106eb7b3b8a773ef3 100644
--- a/src/main/java/com/destroystokyo/paper/profile/ProfileProperty.java
+++ b/src/main/java/com/destroystokyo/paper/profile/ProfileProperty.java
@@ -14,11 +14,11 @@ public class ProfileProperty {
     private final @NotNull String value;
     private final @Nullable String signature;
 
-    public ProfileProperty(@NotNull String name, @NotNull String value) {
+    public ProfileProperty(@NotNull final String name, @NotNull final String value) {
         this(name, value, null);
     }
 
-    public ProfileProperty(@NotNull String name, @NotNull String value, @Nullable String signature) {
+    public ProfileProperty(@NotNull final String name, @NotNull final String value, @Nullable final String signature) {
         this.name = Preconditions.checkNotNull(name, "ProfileProperty name can not be null");
         this.value = Preconditions.checkNotNull(value, "ProfileProperty value can not be null");
         this.signature = signature;
@@ -56,10 +56,10 @@ public class ProfileProperty {
     }
 
     @Override
-    public boolean equals(@Nullable Object o) {
+    public boolean equals(@Nullable final Object o) {
         if (this == o) return true;
         if (o == null || getClass() != o.getClass()) return false;
-        ProfileProperty that = (ProfileProperty) o;
+        final ProfileProperty that = (ProfileProperty) o;
         return Objects.equals(name, that.name) &&
                 Objects.equals(value, that.value) &&
                 Objects.equals(signature, that.signature);
diff --git a/src/main/java/com/destroystokyo/paper/util/SneakyThrow.java b/src/main/java/com/destroystokyo/paper/util/SneakyThrow.java
index b27281a6538cb223f6dffbf3859366dedbbf75f1..5d182da3164f1df059e3788cfe859ca00bf64e5f 100644
--- a/src/main/java/com/destroystokyo/paper/util/SneakyThrow.java
+++ b/src/main/java/com/destroystokyo/paper/util/SneakyThrow.java
@@ -4,12 +4,12 @@ import org.jetbrains.annotations.NotNull;
 
 public class SneakyThrow {
 
-    public static void sneaky(@NotNull Throwable exception) {
+    public static void sneaky(@NotNull final Throwable exception) {
         SneakyThrow.throwSneaky(exception);
     }
 
     @SuppressWarnings("unchecked")
-    private static <T extends Throwable> void throwSneaky(@NotNull Throwable exception) throws T {
+    private static <T extends Throwable> void throwSneaky(@NotNull final Throwable exception) throws T {
         throw (T) exception;
     }
 
diff --git a/src/main/java/com/destroystokyo/paper/util/VersionFetcher.java b/src/main/java/com/destroystokyo/paper/util/VersionFetcher.java
index a736d7bcdc5861a01b66ba36158db1c716339346..92983170f4a30ab67cfb8af738f5239d8a0a8f36 100644
--- a/src/main/java/com/destroystokyo/paper/util/VersionFetcher.java
+++ b/src/main/java/com/destroystokyo/paper/util/VersionFetcher.java
@@ -35,7 +35,7 @@ public interface VersionFetcher {
 
         @NotNull
         @Override
-        public Component getVersionMessage(@NotNull String serverVersion) {
+        public Component getVersionMessage(@NotNull final String serverVersion) {
             Bukkit.getLogger().warning("Version provider has not been set, cannot check for updates!");
             Bukkit.getLogger().info("Override the default implementation of org.bukkit.UnsafeValues#getVersionFetcher()");
             new Throwable().printStackTrace();
diff --git a/src/main/java/com/destroystokyo/paper/utils/CachedSizeConcurrentLinkedQueue.java b/src/main/java/com/destroystokyo/paper/utils/CachedSizeConcurrentLinkedQueue.java
index 5bb677ce585b856b3d3e589e29786a29619c56a7..4a4fb55adc29e6d2295bbc55c23306869a48fd90 100644
--- a/src/main/java/com/destroystokyo/paper/utils/CachedSizeConcurrentLinkedQueue.java
+++ b/src/main/java/com/destroystokyo/paper/utils/CachedSizeConcurrentLinkedQueue.java
@@ -9,8 +9,8 @@ public class CachedSizeConcurrentLinkedQueue<E> extends ConcurrentLinkedQueue<E>
     private final LongAdder cachedSize = new LongAdder();
 
     @Override
-    public boolean add(@NotNull E e) {
-        boolean result = super.add(e);
+    public boolean add(@NotNull final E e) {
+        final boolean result = super.add(e);
         if (result) {
             cachedSize.increment();
         }
@@ -20,7 +20,7 @@ public class CachedSizeConcurrentLinkedQueue<E> extends ConcurrentLinkedQueue<E>
     @Nullable
     @Override
     public E poll() {
-        E result = super.poll();
+        final E result = super.poll();
         if (result != null) {
             cachedSize.decrement();
         }
diff --git a/src/main/java/com/destroystokyo/paper/utils/PaperPluginLogger.java b/src/main/java/com/destroystokyo/paper/utils/PaperPluginLogger.java
index 76f2cb9cd99cad2a9484eab2becd8c36f1dd91b3..4678d8c93eddbe89b90ef3d200c6b5f6d5e061f4 100644
--- a/src/main/java/com/destroystokyo/paper/utils/PaperPluginLogger.java
+++ b/src/main/java/com/destroystokyo/paper/utils/PaperPluginLogger.java
@@ -13,7 +13,7 @@ import org.jetbrains.annotations.NotNull;
 public class PaperPluginLogger extends Logger {
 
     @NotNull
-    public static Logger getLogger(@NotNull PluginDescriptionFile description) {
+    public static Logger getLogger(@NotNull final PluginDescriptionFile description) {
         Logger logger = new PaperPluginLogger(description);
         if (!LogManager.getLogManager().addLogger(logger)) {
             // Disable this if it's going to happen across reloads anyways...
@@ -24,12 +24,12 @@ public class PaperPluginLogger extends Logger {
         return logger;
     }
 
-    private PaperPluginLogger(@NotNull PluginDescriptionFile description) {
+    private PaperPluginLogger(@NotNull final PluginDescriptionFile description) {
         super(description.getPrefix() != null ? description.getPrefix() : description.getName(), null);
     }
 
     @Override
-    public void setParent(@NotNull Logger parent) {
+    public void setParent(@NotNull final Logger parent) {
         if (getParent() != null) {
             warning("Ignoring attempt to change parent of plugin logger");
         } else {
diff --git a/src/main/java/io/papermc/paper/advancement/AdvancementDisplay.java b/src/main/java/io/papermc/paper/advancement/AdvancementDisplay.java
index 19202e17f362fdffca472178b102d1336349590c..33befc2b2b32bb7f2f3ccac90210f3cf61e21a4e 100644
--- a/src/main/java/io/papermc/paper/advancement/AdvancementDisplay.java
+++ b/src/main/java/io/papermc/paper/advancement/AdvancementDisplay.java
@@ -135,7 +135,7 @@ public interface AdvancementDisplay {
         private final String name;
         private final TextColor color;
 
-        Frame(String name, TextColor color) {
+        Frame(final String name, final TextColor color) {
             this.name = name;
             this.color = color;
         }
diff --git a/src/main/java/io/papermc/paper/enchantments/EnchantmentRarity.java b/src/main/java/io/papermc/paper/enchantments/EnchantmentRarity.java
index e6a40c1fcea761bd66743b50e3da3d14797d05b0..77b2ff33cf25b5c5ba8a9310aabb4b0ab0b7cde4 100644
--- a/src/main/java/io/papermc/paper/enchantments/EnchantmentRarity.java
+++ b/src/main/java/io/papermc/paper/enchantments/EnchantmentRarity.java
@@ -9,7 +9,7 @@ public enum EnchantmentRarity {
 
     private final int weight;
 
-    EnchantmentRarity(int weight) {
+    EnchantmentRarity(final int weight) {
         this.weight = weight;
     }
 
diff --git a/src/main/java/io/papermc/paper/event/block/BeaconActivatedEvent.java b/src/main/java/io/papermc/paper/event/block/BeaconActivatedEvent.java
index 7575ca7dd84dee89528ec2e5e5f99f97d8a10f58..b1d2b7b21815c3e54dd81d8943974c7dfdf7df51 100644
--- a/src/main/java/io/papermc/paper/event/block/BeaconActivatedEvent.java
+++ b/src/main/java/io/papermc/paper/event/block/BeaconActivatedEvent.java
@@ -13,7 +13,7 @@ import org.jetbrains.annotations.NotNull;
 public class BeaconActivatedEvent extends BlockEvent {
     private static final HandlerList handlers = new HandlerList();
 
-    public BeaconActivatedEvent(@NotNull Block block) {
+    public BeaconActivatedEvent(@NotNull final Block block) {
         super(block);
     }
 
diff --git a/src/main/java/io/papermc/paper/event/block/BeaconDeactivatedEvent.java b/src/main/java/io/papermc/paper/event/block/BeaconDeactivatedEvent.java
index 34f18468b4cfc08717cc3442778c9e85124e5a22..2cdea152d5a55d4d2fd109a024c5bfc760550102 100644
--- a/src/main/java/io/papermc/paper/event/block/BeaconDeactivatedEvent.java
+++ b/src/main/java/io/papermc/paper/event/block/BeaconDeactivatedEvent.java
@@ -14,7 +14,7 @@ import org.jetbrains.annotations.Nullable;
 public class BeaconDeactivatedEvent extends BlockEvent {
     private static final HandlerList handlers = new HandlerList();
 
-    public BeaconDeactivatedEvent(@NotNull Block block) {
+    public BeaconDeactivatedEvent(@NotNull final Block block) {
         super(block);
     }
 
diff --git a/src/main/java/io/papermc/paper/event/block/BellRevealRaiderEvent.java b/src/main/java/io/papermc/paper/event/block/BellRevealRaiderEvent.java
index 016fc638245d9d076497cee74dd79bb1f932f29f..90e02c79d80573f611fd0c689f694671588c67d1 100644
--- a/src/main/java/io/papermc/paper/event/block/BellRevealRaiderEvent.java
+++ b/src/main/java/io/papermc/paper/event/block/BellRevealRaiderEvent.java
@@ -17,7 +17,7 @@ public class BellRevealRaiderEvent extends BlockEvent implements Cancellable {
     private boolean cancelled = false;
     private final @NotNull Raider raider;
 
-    public BellRevealRaiderEvent(@NotNull Block theBlock, @NotNull Entity raider) {
+    public BellRevealRaiderEvent(@NotNull final Block theBlock, @NotNull final Entity raider) {
         super(theBlock);
         this.raider = (Raider) raider;
     }
@@ -43,7 +43,7 @@ public class BellRevealRaiderEvent extends BlockEvent implements Cancellable {
      * This does not cancel the particle effects shown on the bell, only the entity.
      */
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.cancelled = cancel;
     }
 
diff --git a/src/main/java/io/papermc/paper/event/block/BellRingEvent.java b/src/main/java/io/papermc/paper/event/block/BellRingEvent.java
index 18de6a084d87e152c26b66e9cf1b486b6b8bb892..6d7828ef15286d539d6f15f262838db8499970bd 100644
--- a/src/main/java/io/papermc/paper/event/block/BellRingEvent.java
+++ b/src/main/java/io/papermc/paper/event/block/BellRingEvent.java
@@ -16,7 +16,7 @@ public class BellRingEvent extends BlockEvent implements Cancellable {
     private boolean cancelled;
     private final @Nullable Entity entity;
 
-    public BellRingEvent(@NotNull Block block, @Nullable Entity entity) {
+    public BellRingEvent(@NotNull final Block block, @Nullable final Entity entity) {
         super(block);
         this.entity = entity;
     }
@@ -27,7 +27,7 @@ public class BellRingEvent extends BlockEvent implements Cancellable {
     }
 
     @Override
-    public void setCancelled(boolean cancelled) {
+    public void setCancelled(final boolean cancelled) {
         this.cancelled = cancelled;
     }
 
diff --git a/src/main/java/io/papermc/paper/event/block/BlockBreakBlockEvent.java b/src/main/java/io/papermc/paper/event/block/BlockBreakBlockEvent.java
index 2377219cd2a24cd7b041fd943f4b41103c6d799b..36d26551908b3aac7fb70a9f7ff71f0140db0e27 100644
--- a/src/main/java/io/papermc/paper/event/block/BlockBreakBlockEvent.java
+++ b/src/main/java/io/papermc/paper/event/block/BlockBreakBlockEvent.java
@@ -20,7 +20,7 @@ public class BlockBreakBlockEvent extends BlockEvent {
     private final @NotNull List<ItemStack> drops;
     private final @NotNull Block source;
 
-    public BlockBreakBlockEvent(@NotNull Block block, @NotNull Block source, @NotNull List<ItemStack> drops) {
+    public BlockBreakBlockEvent(@NotNull final Block block, @NotNull final Block source, @NotNull final List<ItemStack> drops) {
         super(block);
         this.source = source;
         this.drops = drops;
diff --git a/src/main/java/io/papermc/paper/event/block/BlockFailedDispenseEvent.java b/src/main/java/io/papermc/paper/event/block/BlockFailedDispenseEvent.java
index dab794341170ed10d5a05c1b4c180d164e0f70e2..1b65302394868842912b3d795d067a2cff211d29 100644
--- a/src/main/java/io/papermc/paper/event/block/BlockFailedDispenseEvent.java
+++ b/src/main/java/io/papermc/paper/event/block/BlockFailedDispenseEvent.java
@@ -13,7 +13,7 @@ public class BlockFailedDispenseEvent extends BlockEvent {
 
     private boolean shouldPlayEffect = true;
 
-    public BlockFailedDispenseEvent(@NotNull Block theBlock) {
+    public BlockFailedDispenseEvent(@NotNull final Block theBlock) {
         super(theBlock);
     }
 
@@ -29,7 +29,7 @@ public class BlockFailedDispenseEvent extends BlockEvent {
      *
      * @param playEffect if the effect should be played
      */
-    public void shouldPlayEffect(boolean playEffect) {
+    public void shouldPlayEffect(final boolean playEffect) {
         this.shouldPlayEffect = playEffect;
     }
 
diff --git a/src/main/java/io/papermc/paper/event/block/BlockPreDispenseEvent.java b/src/main/java/io/papermc/paper/event/block/BlockPreDispenseEvent.java
index 3bc64014af5b7378d74c79390fcc82cd38223ad6..7f49ebb2ae7f95b732340c4a520209f077c32b4b 100644
--- a/src/main/java/io/papermc/paper/event/block/BlockPreDispenseEvent.java
+++ b/src/main/java/io/papermc/paper/event/block/BlockPreDispenseEvent.java
@@ -13,7 +13,7 @@ public class BlockPreDispenseEvent extends BlockEvent implements Cancellable {
     private final @NotNull ItemStack itemStack;
     private final int slot;
 
-    public BlockPreDispenseEvent(@NotNull Block block, @NotNull ItemStack itemStack, int slot) {
+    public BlockPreDispenseEvent(@NotNull final Block block, @NotNull final ItemStack itemStack, final int slot) {
         super(block);
         this.itemStack = itemStack;
         this.slot = slot;
@@ -54,7 +54,7 @@ public class BlockPreDispenseEvent extends BlockEvent implements Cancellable {
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.cancelled = cancel;
     }
 }
diff --git a/src/main/java/io/papermc/paper/event/block/DragonEggFormEvent.java b/src/main/java/io/papermc/paper/event/block/DragonEggFormEvent.java
index 7aee3a5992dc4ff9d34427cf133757f18b6ca40a..02eb060b3969f44c1ff634c3edee14a7ad7fdfa5 100644
--- a/src/main/java/io/papermc/paper/event/block/DragonEggFormEvent.java
+++ b/src/main/java/io/papermc/paper/event/block/DragonEggFormEvent.java
@@ -22,8 +22,8 @@ public class DragonEggFormEvent extends BlockFormEvent implements Cancellable {
 	private final @NotNull DragonBattle dragonBattle;
 	private boolean cancelled;
 	
-	public DragonEggFormEvent(@NotNull Block block, @NotNull BlockState newState,
-			@NotNull DragonBattle dragonBattle) {
+	public DragonEggFormEvent(@NotNull final Block block, @NotNull final BlockState newState,
+	                          @NotNull final DragonBattle dragonBattle) {
 		super(block, newState);
 		this.dragonBattle = dragonBattle;
 	}
@@ -34,7 +34,7 @@ public class DragonEggFormEvent extends BlockFormEvent implements Cancellable {
 	}
 	
 	@Override
-	public void setCancelled(boolean cancelled) {
+	public void setCancelled(final boolean cancelled) {
 		this.cancelled = cancelled;
 	}
 	
diff --git a/src/main/java/io/papermc/paper/event/block/PlayerShearBlockEvent.java b/src/main/java/io/papermc/paper/event/block/PlayerShearBlockEvent.java
index 805157fc4faf8cadbee9e3c1cae3db354856753a..6809f09a08c128cbb91b5bd394cfbba93cc08e2e 100644
--- a/src/main/java/io/papermc/paper/event/block/PlayerShearBlockEvent.java
+++ b/src/main/java/io/papermc/paper/event/block/PlayerShearBlockEvent.java
@@ -27,7 +27,7 @@ public class PlayerShearBlockEvent extends PlayerEvent implements Cancellable {
     private final @NotNull EquipmentSlot hand;
     private final @NotNull List<ItemStack> drops;
 
-    public PlayerShearBlockEvent(@NotNull Player who, @NotNull Block block, @NotNull ItemStack item, @NotNull EquipmentSlot hand, @NotNull List<ItemStack> drops) {
+    public PlayerShearBlockEvent(@NotNull final Player who, @NotNull final Block block, @NotNull final ItemStack item, @NotNull final EquipmentSlot hand, @NotNull final List<ItemStack> drops) {
         super(who);
         this.block = block;
         this.item = item;
@@ -91,7 +91,7 @@ public class PlayerShearBlockEvent extends PlayerEvent implements Cancellable {
      * @param cancel whether the shearing of the block should be cancelled or not.
      */
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.cancelled = cancel;
     }
 
diff --git a/src/main/java/io/papermc/paper/event/block/TargetHitEvent.java b/src/main/java/io/papermc/paper/event/block/TargetHitEvent.java
index cc067ae118af9957b1b9f5c8d45f63f9154f4942..40678de326b413591402d0890d54790f852a779f 100644
--- a/src/main/java/io/papermc/paper/event/block/TargetHitEvent.java
+++ b/src/main/java/io/papermc/paper/event/block/TargetHitEvent.java
@@ -20,7 +20,7 @@ public class TargetHitEvent extends ProjectileHitEvent implements Cancellable {
     private boolean cancelled;
     private int signalStrength;
 
-    public TargetHitEvent(@NotNull Projectile projectile, @NotNull Block block, @NotNull BlockFace blockFace, int signalStrength) {
+    public TargetHitEvent(@NotNull final Projectile projectile, @NotNull final Block block, @NotNull final BlockFace blockFace, final int signalStrength) {
         super(projectile, null, block, blockFace);
         this.signalStrength = signalStrength;
     }
@@ -31,7 +31,7 @@ public class TargetHitEvent extends ProjectileHitEvent implements Cancellable {
     }
 
     @Override
-    public void setCancelled(boolean cancelled) {
+    public void setCancelled(final boolean cancelled) {
         this.cancelled = cancelled;
     }
 
@@ -60,7 +60,7 @@ public class TargetHitEvent extends ProjectileHitEvent implements Cancellable {
      *
      * @param signalStrength the strength of the redstone signal to be emitted
      */
-    public void setSignalStrength(int signalStrength) {
+    public void setSignalStrength(final int signalStrength) {
         if (signalStrength < 0 || signalStrength > 15) {
             throw new IllegalArgumentException("Signal strength out of range (" + signalStrength + "), must be in range [0,15]");
         }
diff --git a/src/main/java/io/papermc/paper/event/entity/ElderGuardianAppearanceEvent.java b/src/main/java/io/papermc/paper/event/entity/ElderGuardianAppearanceEvent.java
index f28a5627b4cf6090513fccf9fb76901392d97486..37b4b07a1b182f21df34bd19ec70f6049b6864df 100644
--- a/src/main/java/io/papermc/paper/event/entity/ElderGuardianAppearanceEvent.java
+++ b/src/main/java/io/papermc/paper/event/entity/ElderGuardianAppearanceEvent.java
@@ -19,7 +19,7 @@ public class ElderGuardianAppearanceEvent extends EntityEvent implements Cancell
     private boolean cancelled;
     private final @NotNull Player affectedPlayer;
 
-    public ElderGuardianAppearanceEvent(@NotNull Entity what, @NotNull Player affectedPlayer) {
+    public ElderGuardianAppearanceEvent(@NotNull final Entity what, @NotNull final Player affectedPlayer) {
         super(what);
         this.affectedPlayer = affectedPlayer;
     }
@@ -50,7 +50,7 @@ public class ElderGuardianAppearanceEvent extends EntityEvent implements Cancell
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.cancelled = cancel;
     }
 
diff --git a/src/main/java/io/papermc/paper/event/entity/EntityDamageItemEvent.java b/src/main/java/io/papermc/paper/event/entity/EntityDamageItemEvent.java
index f9610d812fb7a092f3f2b6fc596badca7ab6277e..61eab32705e8501767f59ba2881a76ea4d4afec3 100644
--- a/src/main/java/io/papermc/paper/event/entity/EntityDamageItemEvent.java
+++ b/src/main/java/io/papermc/paper/event/entity/EntityDamageItemEvent.java
@@ -20,7 +20,7 @@ public class EntityDamageItemEvent extends EntityEvent implements Cancellable {
     private int damage;
     private boolean cancelled;
 
-    public EntityDamageItemEvent(@NotNull Entity entity, @NotNull ItemStack item, int damage) {
+    public EntityDamageItemEvent(@NotNull final Entity entity, @NotNull final ItemStack item, final int damage) {
         super(entity);
         this.item = item;
         this.damage = damage;
@@ -50,7 +50,7 @@ public class EntityDamageItemEvent extends EntityEvent implements Cancellable {
      *
      * @param damage the damage amount to cause
      */
-    public void setDamage(int damage) {
+    public void setDamage(final int damage) {
         this.damage = damage;
     }
 
@@ -60,7 +60,7 @@ public class EntityDamageItemEvent extends EntityEvent implements Cancellable {
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         cancelled = cancel;
     }
 
diff --git a/src/main/java/io/papermc/paper/event/entity/EntityDyeEvent.java b/src/main/java/io/papermc/paper/event/entity/EntityDyeEvent.java
index b121ec4764525c143d459980b255e569f15f824f..68179eae95f4bc6ad5abaa5d35ea94533438d684 100644
--- a/src/main/java/io/papermc/paper/event/entity/EntityDyeEvent.java
+++ b/src/main/java/io/papermc/paper/event/entity/EntityDyeEvent.java
@@ -21,7 +21,7 @@ public class EntityDyeEvent extends EntityEvent implements Cancellable {
     private final @Nullable Player player;
     private boolean cancel;
 
-    public EntityDyeEvent(@NotNull Entity entity, @NotNull DyeColor dyeColor, @Nullable Player player) {
+    public EntityDyeEvent(@NotNull final Entity entity, @NotNull final DyeColor dyeColor, @Nullable final Player player) {
         super(entity);
         this.dyeColor = dyeColor;
         this.player = player;
@@ -41,7 +41,7 @@ public class EntityDyeEvent extends EntityEvent implements Cancellable {
      *
      * @param dyeColor the DyeColor the entity will be dyed
      */
-    public void setColor(@NotNull DyeColor dyeColor) {
+    public void setColor(@NotNull final DyeColor dyeColor) {
         this.dyeColor = dyeColor;
     }
 
@@ -60,7 +60,7 @@ public class EntityDyeEvent extends EntityEvent implements Cancellable {
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.cancel = cancel;
     }
 
diff --git a/src/main/java/io/papermc/paper/event/entity/EntityInsideBlockEvent.java b/src/main/java/io/papermc/paper/event/entity/EntityInsideBlockEvent.java
index 68616f056b4942e11a1d40a9d84a9fbbb4010150..f7069158f98c8916b02074ffde39d2a3127ab2e0 100644
--- a/src/main/java/io/papermc/paper/event/entity/EntityInsideBlockEvent.java
+++ b/src/main/java/io/papermc/paper/event/entity/EntityInsideBlockEvent.java
@@ -45,7 +45,7 @@ public class EntityInsideBlockEvent extends EntityEvent implements Cancellable {
     private final @NotNull Block block;
     private boolean cancelled;
 
-    public EntityInsideBlockEvent(@NotNull Entity entity, @NotNull Block block) {
+    public EntityInsideBlockEvent(@NotNull final Entity entity, @NotNull final Block block) {
         super(entity);
         this.block = block;
     }
@@ -66,7 +66,7 @@ public class EntityInsideBlockEvent extends EntityEvent implements Cancellable {
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.cancelled = cancel;
     }
 
diff --git a/src/main/java/io/papermc/paper/event/entity/EntityLoadCrossbowEvent.java b/src/main/java/io/papermc/paper/event/entity/EntityLoadCrossbowEvent.java
index 8fcb6d8f6da847a28c9d87a7c8bc575532f99810..0ecd14d0db1adee887f591dceb2751d78dd770bb 100644
--- a/src/main/java/io/papermc/paper/event/entity/EntityLoadCrossbowEvent.java
+++ b/src/main/java/io/papermc/paper/event/entity/EntityLoadCrossbowEvent.java
@@ -19,7 +19,7 @@ public class EntityLoadCrossbowEvent extends EntityEvent implements Cancellable
     private boolean cancelled;
     private boolean consumeItem = true;
 
-    public EntityLoadCrossbowEvent(@NotNull LivingEntity entity, @Nullable ItemStack crossbow, @NotNull EquipmentSlot hand) {
+    public EntityLoadCrossbowEvent(@NotNull final LivingEntity entity, @Nullable final ItemStack crossbow, @NotNull final EquipmentSlot hand) {
         super(entity);
         this.crossbow = crossbow;
         this.hand = hand;
@@ -63,7 +63,7 @@ public class EntityLoadCrossbowEvent extends EntityEvent implements Cancellable
      *
      * @param consume should the item be consumed
      */
-    public void setConsumeItem(boolean consume) {
+    public void setConsumeItem(final boolean consume) {
         this.consumeItem = consume;
     }
 
@@ -79,7 +79,7 @@ public class EntityLoadCrossbowEvent extends EntityEvent implements Cancellable
      * @param cancel true if you wish to cancel this event
      */
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.cancelled = cancel;
     }
 
diff --git a/src/main/java/io/papermc/paper/event/entity/EntityMoveEvent.java b/src/main/java/io/papermc/paper/event/entity/EntityMoveEvent.java
index 245d56ba7e8e37e3555b606f5e85fc663897f62b..2c850eda585f0ecfa46abac77f8b8709121a9ee1 100644
--- a/src/main/java/io/papermc/paper/event/entity/EntityMoveEvent.java
+++ b/src/main/java/io/papermc/paper/event/entity/EntityMoveEvent.java
@@ -20,7 +20,7 @@ public class EntityMoveEvent extends EntityEvent implements Cancellable {
     private Location from;
     private Location to;
 
-    public EntityMoveEvent(@NotNull LivingEntity entity, @NotNull Location from, @NotNull Location to) {
+    public EntityMoveEvent(@NotNull final LivingEntity entity, @NotNull final Location from, @NotNull final Location to) {
         super(entity);
         this.from = from;
         this.to = to;
@@ -36,7 +36,7 @@ public class EntityMoveEvent extends EntityEvent implements Cancellable {
         return canceled;
     }
 
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         canceled = cancel;
     }
 
@@ -55,7 +55,7 @@ public class EntityMoveEvent extends EntityEvent implements Cancellable {
      *
      * @param from New location to mark as the entity's previous location
      */
-    public void setFrom(@NotNull Location from) {
+    public void setFrom(@NotNull final Location from) {
         validateLocation(from);
         this.from = from;
     }
@@ -75,7 +75,7 @@ public class EntityMoveEvent extends EntityEvent implements Cancellable {
      *
      * @param to New Location this entity will move to
      */
-    public void setTo(@NotNull Location to) {
+    public void setTo(@NotNull final Location to) {
         validateLocation(to);
         this.to = to;
     }
@@ -125,7 +125,7 @@ public class EntityMoveEvent extends EntityEvent implements Cancellable {
         return from.getPitch() != to.getPitch() || from.getYaw() != to.getYaw();
     }
 
-    private void validateLocation(@NotNull Location loc) {
+    private void validateLocation(@NotNull final Location loc) {
         Preconditions.checkArgument(loc != null, "Cannot use null location!");
         Preconditions.checkArgument(loc.getWorld() != null, "Cannot use null location with null world!");
     }
diff --git a/src/main/java/io/papermc/paper/event/entity/EntityToggleSitEvent.java b/src/main/java/io/papermc/paper/event/entity/EntityToggleSitEvent.java
index b53e9eb7df916721ad79925d711624b3da5619bb..4ae8d1fe3d4c51c824f67c413a33d77b36b64c55 100644
--- a/src/main/java/io/papermc/paper/event/entity/EntityToggleSitEvent.java
+++ b/src/main/java/io/papermc/paper/event/entity/EntityToggleSitEvent.java
@@ -16,7 +16,7 @@ public class EntityToggleSitEvent extends EntityEvent implements Cancellable {
     private boolean cancelled;
     private final boolean isSitting;
 
-    public EntityToggleSitEvent(@NotNull Entity entity, boolean isSitting) {
+    public EntityToggleSitEvent(@NotNull final Entity entity, final boolean isSitting) {
         super(entity);
         this.isSitting = isSitting;
     }
@@ -36,7 +36,7 @@ public class EntityToggleSitEvent extends EntityEvent implements Cancellable {
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.cancelled = cancel;
     }
 
diff --git a/src/main/java/io/papermc/paper/event/entity/PufferFishStateChangeEvent.java b/src/main/java/io/papermc/paper/event/entity/PufferFishStateChangeEvent.java
index 9585be7d2009904e3633604e45ae0ebc5f6190d3..3aa9cbe355f5a2d5e90d0b03029cacc7b82093b7 100644
--- a/src/main/java/io/papermc/paper/event/entity/PufferFishStateChangeEvent.java
+++ b/src/main/java/io/papermc/paper/event/entity/PufferFishStateChangeEvent.java
@@ -14,7 +14,7 @@ public class PufferFishStateChangeEvent extends EntityEvent implements Cancellab
     private boolean cancelled;
     private final int newPuffState;
 
-    public PufferFishStateChangeEvent(@NotNull PufferFish entity, int newPuffState) {
+    public PufferFishStateChangeEvent(@NotNull final PufferFish entity, final int newPuffState) {
         super(entity);
         this.newPuffState = newPuffState;
     }
@@ -58,7 +58,7 @@ public class PufferFishStateChangeEvent extends EntityEvent implements Cancellab
      * @param cancel true if you wish to cancel the (in/de)flation
      */
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.cancelled = cancel;
     }
 
diff --git a/src/main/java/io/papermc/paper/event/entity/TameableDeathMessageEvent.java b/src/main/java/io/papermc/paper/event/entity/TameableDeathMessageEvent.java
index 70cd37aefbd5d64c798ab2fc3b6d502134690348..52715351ce3998b69c84f8261fc343627a29425a 100644
--- a/src/main/java/io/papermc/paper/event/entity/TameableDeathMessageEvent.java
+++ b/src/main/java/io/papermc/paper/event/entity/TameableDeathMessageEvent.java
@@ -16,7 +16,7 @@ public class TameableDeathMessageEvent extends EntityEvent implements Cancellabl
     private boolean cancelled;
     private Component deathMessage;
 
-    public TameableDeathMessageEvent(@NotNull Tameable what, @NotNull Component deathMessage) {
+    public TameableDeathMessageEvent(@NotNull final Tameable what, @NotNull final Component deathMessage) {
         super(what);
         this.deathMessage = deathMessage;
     }
@@ -26,7 +26,7 @@ public class TameableDeathMessageEvent extends EntityEvent implements Cancellabl
      *
      * @param deathMessage Death message to appear
      */
-    public void deathMessage(@NotNull Component deathMessage) {
+    public void deathMessage(@NotNull final Component deathMessage) {
         this.deathMessage = deathMessage;
     }
 
@@ -46,7 +46,7 @@ public class TameableDeathMessageEvent extends EntityEvent implements Cancellabl
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.cancelled = cancel;
     }
 
diff --git a/src/main/java/io/papermc/paper/event/entity/WardenAngerChangeEvent.java b/src/main/java/io/papermc/paper/event/entity/WardenAngerChangeEvent.java
index 4a528364b3706b1b462705c530f087a280a9aaea..cb3fc075edf9fd38ce1415f17c888ba7d1bf1aa2 100644
--- a/src/main/java/io/papermc/paper/event/entity/WardenAngerChangeEvent.java
+++ b/src/main/java/io/papermc/paper/event/entity/WardenAngerChangeEvent.java
@@ -67,7 +67,7 @@ public class WardenAngerChangeEvent extends EntityEvent implements Cancellable {
      * @see Warden#setAnger(Entity, int)
      * @throws IllegalArgumentException if newAnger is greater than 150
      */
-    public void setNewAnger(int newAnger) {
+    public void setNewAnger(final int newAnger) {
         if (newAnger > 150)
             throw new IllegalArgumentException("newAnger must not be greater than 150");
 
@@ -86,7 +86,7 @@ public class WardenAngerChangeEvent extends EntityEvent implements Cancellable {
     }
 
     @Override
-    public void setCancelled(boolean cancelled) {
+    public void setCancelled(final boolean cancelled) {
         this.cancelled = cancelled;
     }
 
diff --git a/src/main/java/io/papermc/paper/event/packet/PlayerChunkLoadEvent.java b/src/main/java/io/papermc/paper/event/packet/PlayerChunkLoadEvent.java
index 934c8fbd44e6a3b9f1d4b4ea76c962b760a379c6..f1c86c530568df7005f523815165d731bd756bd5 100644
--- a/src/main/java/io/papermc/paper/event/packet/PlayerChunkLoadEvent.java
+++ b/src/main/java/io/papermc/paper/event/packet/PlayerChunkLoadEvent.java
@@ -19,7 +19,7 @@ public class PlayerChunkLoadEvent extends ChunkEvent {
     private static final HandlerList handlers = new HandlerList();
     private final @NotNull Player player;
 
-    public PlayerChunkLoadEvent(@NotNull Chunk chunk, @NotNull Player player) {
+    public PlayerChunkLoadEvent(@NotNull final Chunk chunk, @NotNull final Player player) {
         super(chunk);
         this.player = player;
     }
diff --git a/src/main/java/io/papermc/paper/event/packet/PlayerChunkUnloadEvent.java b/src/main/java/io/papermc/paper/event/packet/PlayerChunkUnloadEvent.java
index d19ef7eb03751d081601c3db9735636539e2f15c..ac83b33a88a78f5a63d41126a93d3a6f77a3902a 100644
--- a/src/main/java/io/papermc/paper/event/packet/PlayerChunkUnloadEvent.java
+++ b/src/main/java/io/papermc/paper/event/packet/PlayerChunkUnloadEvent.java
@@ -17,7 +17,7 @@ public class PlayerChunkUnloadEvent extends ChunkEvent {
     private static final HandlerList handlers = new HandlerList();
     private final @NotNull Player player;
 
-    public PlayerChunkUnloadEvent(@NotNull Chunk chunk, @NotNull Player player) {
+    public PlayerChunkUnloadEvent(@NotNull final Chunk chunk, @NotNull final Player player) {
         super(chunk);
         this.player = player;
     }
diff --git a/src/main/java/io/papermc/paper/event/player/AsyncChatCommandDecorateEvent.java b/src/main/java/io/papermc/paper/event/player/AsyncChatCommandDecorateEvent.java
index feece00981ebf932e64760e7a10a04ad080d0228..c882bc833028edca8770aa84752159f10f87f2b2 100644
--- a/src/main/java/io/papermc/paper/event/player/AsyncChatCommandDecorateEvent.java
+++ b/src/main/java/io/papermc/paper/event/player/AsyncChatCommandDecorateEvent.java
@@ -13,7 +13,7 @@ public class AsyncChatCommandDecorateEvent extends AsyncChatDecorateEvent {
     private static final HandlerList HANDLER_LIST = new HandlerList();
 
     @ApiStatus.Internal
-    public AsyncChatCommandDecorateEvent(boolean async, @Nullable Player player, @NotNull Component originalMessage, @NotNull Component result) {
+    public AsyncChatCommandDecorateEvent(final boolean async, @Nullable final Player player, @NotNull final Component originalMessage, @NotNull final Component result) {
         super(async, player, originalMessage, result);
     }
 
diff --git a/src/main/java/io/papermc/paper/event/player/AsyncChatDecorateEvent.java b/src/main/java/io/papermc/paper/event/player/AsyncChatDecorateEvent.java
index bd800f6640b9920d371e505be7aa6cb7705966f3..778361a6a7910246fbcb3bb0156b65edb23139c8 100644
--- a/src/main/java/io/papermc/paper/event/player/AsyncChatDecorateEvent.java
+++ b/src/main/java/io/papermc/paper/event/player/AsyncChatDecorateEvent.java
@@ -74,7 +74,7 @@ public class AsyncChatDecorateEvent extends ServerEvent implements Cancellable {
      *
      * @param result the result
      */
-    public void result(@NotNull Component result) {
+    public void result(@NotNull final Component result) {
         this.result = result;
     }
 
@@ -101,7 +101,7 @@ public class AsyncChatDecorateEvent extends ServerEvent implements Cancellable {
      * component.
      */
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.cancelled = cancel;
     }
 
diff --git a/src/main/java/io/papermc/paper/event/player/PlayerArmSwingEvent.java b/src/main/java/io/papermc/paper/event/player/PlayerArmSwingEvent.java
index 5d1b76dc091e91dc8d82f4a5721594d9969ef3d4..e78dbfbaba6a173b89aa9ca509655135ca3142bc 100644
--- a/src/main/java/io/papermc/paper/event/player/PlayerArmSwingEvent.java
+++ b/src/main/java/io/papermc/paper/event/player/PlayerArmSwingEvent.java
@@ -10,7 +10,7 @@ public class PlayerArmSwingEvent extends PlayerAnimationEvent {
 
     private final @NotNull EquipmentSlot equipmentSlot;
 
-    public PlayerArmSwingEvent(@NotNull Player player, @NotNull EquipmentSlot equipmentSlot) {
+    public PlayerArmSwingEvent(@NotNull final Player player, @NotNull final EquipmentSlot equipmentSlot) {
         super(player, equipmentSlot == EquipmentSlot.HAND ? PlayerAnimationType.ARM_SWING : PlayerAnimationType.OFF_ARM_SWING);
         this.equipmentSlot = equipmentSlot;
     }
diff --git a/src/main/java/io/papermc/paper/event/player/PlayerBedFailEnterEvent.java b/src/main/java/io/papermc/paper/event/player/PlayerBedFailEnterEvent.java
index 3d8b598c61fba3fdbe97bca025c188109f39f830..e224a7783079248060c053a400f25ae53de086ee 100644
--- a/src/main/java/io/papermc/paper/event/player/PlayerBedFailEnterEvent.java
+++ b/src/main/java/io/papermc/paper/event/player/PlayerBedFailEnterEvent.java
@@ -19,7 +19,7 @@ public class PlayerBedFailEnterEvent extends PlayerEvent implements Cancellable
     private @Nullable Component message;
     private boolean cancelled;
 
-    public PlayerBedFailEnterEvent(@NotNull Player player, @NotNull FailReason failReason, @NotNull Block bed, boolean willExplode, @Nullable Component message) {
+    public PlayerBedFailEnterEvent(@NotNull final Player player, @NotNull final FailReason failReason, @NotNull final Block bed, final boolean willExplode, @Nullable final Component message) {
         super(player);
         this.failReason = failReason;
         this.bed = bed;
@@ -41,7 +41,7 @@ public class PlayerBedFailEnterEvent extends PlayerEvent implements Cancellable
         return willExplode;
     }
 
-    public void setWillExplode(boolean willExplode) {
+    public void setWillExplode(final boolean willExplode) {
         this.willExplode = willExplode;
     }
 
@@ -50,7 +50,7 @@ public class PlayerBedFailEnterEvent extends PlayerEvent implements Cancellable
         return message;
     }
 
-    public void setMessage(@Nullable Component message) {
+    public void setMessage(@Nullable final Component message) {
         this.message = message;
     }
 
@@ -67,7 +67,7 @@ public class PlayerBedFailEnterEvent extends PlayerEvent implements Cancellable
      * @param cancel true if you wish to cancel this event
      */
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         cancelled = cancel;
     }
 
diff --git a/src/main/java/io/papermc/paper/event/player/PlayerChangeBeaconEffectEvent.java b/src/main/java/io/papermc/paper/event/player/PlayerChangeBeaconEffectEvent.java
index 187a28792b6a91720c3741bb816a1a29223b244b..a3d20b3483fd19bafaf4419b384bb227084a0f0f 100644
--- a/src/main/java/io/papermc/paper/event/player/PlayerChangeBeaconEffectEvent.java
+++ b/src/main/java/io/papermc/paper/event/player/PlayerChangeBeaconEffectEvent.java
@@ -22,7 +22,7 @@ public class PlayerChangeBeaconEffectEvent extends PlayerEvent implements Cancel
 
     private boolean isCancelled;
 
-    public PlayerChangeBeaconEffectEvent(@NotNull Player player, @Nullable PotionEffectType primary, @Nullable PotionEffectType secondary, @Nullable Block beacon) {
+    public PlayerChangeBeaconEffectEvent(@NotNull final Player player, @Nullable final PotionEffectType primary, @Nullable final PotionEffectType secondary, @Nullable final Block beacon) {
         super(player);
         this.primary = primary;
         this.secondary = secondary;
@@ -44,7 +44,7 @@ public class PlayerChangeBeaconEffectEvent extends PlayerEvent implements Cancel
      *
      * @param primary the primary effect
      */
-    public void setPrimary(@Nullable PotionEffectType primary) {
+    public void setPrimary(@Nullable final PotionEffectType primary) {
         this.primary = primary;
     }
 
@@ -63,7 +63,7 @@ public class PlayerChangeBeaconEffectEvent extends PlayerEvent implements Cancel
      *
      * @param secondary the secondary effect
      */
-    public void setSecondary(@Nullable PotionEffectType secondary) {
+    public void setSecondary(@Nullable final PotionEffectType secondary) {
         this.secondary = secondary;
     }
 
@@ -95,7 +95,7 @@ public class PlayerChangeBeaconEffectEvent extends PlayerEvent implements Cancel
      *
      * @param consumeItem true if item should be consumed
      */
-    public void setConsumeItem(boolean consumeItem) {
+    public void setConsumeItem(final boolean consumeItem) {
         this.consumeItem = consumeItem;
     }
 
@@ -125,7 +125,7 @@ public class PlayerChangeBeaconEffectEvent extends PlayerEvent implements Cancel
      * @param cancel true if you wish to cancel this event
      */
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.isCancelled = cancel;
     }
 
diff --git a/src/main/java/io/papermc/paper/event/player/PlayerDeepSleepEvent.java b/src/main/java/io/papermc/paper/event/player/PlayerDeepSleepEvent.java
index e3ee540bb0a5bc578b148fbcf8b5e39ab9c8575c..44ec028f3bd3de39bfd9565bbb66de34ab5b8d34 100644
--- a/src/main/java/io/papermc/paper/event/player/PlayerDeepSleepEvent.java
+++ b/src/main/java/io/papermc/paper/event/player/PlayerDeepSleepEvent.java
@@ -19,7 +19,7 @@ public class PlayerDeepSleepEvent extends PlayerEvent implements Cancellable {
 
     private boolean cancelled;
 
-    public PlayerDeepSleepEvent(@NotNull Player player) {
+    public PlayerDeepSleepEvent(@NotNull final Player player) {
         super(player);
     }
 
@@ -29,7 +29,7 @@ public class PlayerDeepSleepEvent extends PlayerEvent implements Cancellable {
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.cancelled = cancel;
     }
 
diff --git a/src/main/java/io/papermc/paper/event/player/PlayerFlowerPotManipulateEvent.java b/src/main/java/io/papermc/paper/event/player/PlayerFlowerPotManipulateEvent.java
index 4c141f3d8f668cdf9c75865a8e3ecbd012d9e521..7d42814ab26a45abaa052bb4ffea2d1abc2cd6ec 100644
--- a/src/main/java/io/papermc/paper/event/player/PlayerFlowerPotManipulateEvent.java
+++ b/src/main/java/io/papermc/paper/event/player/PlayerFlowerPotManipulateEvent.java
@@ -35,7 +35,7 @@ public class PlayerFlowerPotManipulateEvent extends PlayerEvent implements Cance
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.cancel = cancel;
     }
 
diff --git a/src/main/java/io/papermc/paper/event/player/PlayerInventorySlotChangeEvent.java b/src/main/java/io/papermc/paper/event/player/PlayerInventorySlotChangeEvent.java
index e6f78f6d717c7880329dfbc315174edefea6c789..965049f69a1063947355ae8656349add9cc1783c 100644
--- a/src/main/java/io/papermc/paper/event/player/PlayerInventorySlotChangeEvent.java
+++ b/src/main/java/io/papermc/paper/event/player/PlayerInventorySlotChangeEvent.java
@@ -18,7 +18,7 @@ public class PlayerInventorySlotChangeEvent extends PlayerEvent {
     private final @NotNull ItemStack newItemStack;
     private boolean triggerAdvancements = true;
 
-    public PlayerInventorySlotChangeEvent(@NotNull Player player, int rawSlot, @NotNull ItemStack oldItemStack, @NotNull ItemStack newItemStack) {
+    public PlayerInventorySlotChangeEvent(@NotNull final Player player, final int rawSlot, @NotNull final ItemStack oldItemStack, @NotNull final ItemStack newItemStack) {
         super(player);
         this.rawSlot = rawSlot;
         this.slot = player.getOpenInventory().convertSlot(rawSlot);
@@ -82,7 +82,7 @@ public class PlayerInventorySlotChangeEvent extends PlayerEvent {
      *
      * @param triggerAdvancements Whether the slot change advancements will be triggered.
      */
-    public void setShouldTriggerAdvancements(boolean triggerAdvancements) {
+    public void setShouldTriggerAdvancements(final boolean triggerAdvancements) {
         this.triggerAdvancements = triggerAdvancements;
     }
 
diff --git a/src/main/java/io/papermc/paper/event/player/PlayerItemCooldownEvent.java b/src/main/java/io/papermc/paper/event/player/PlayerItemCooldownEvent.java
index 58d18f05af13d836ddc62fcd30befcb06f07c57c..9fa51d3f0485f938282c2e3ed028cee1b7b0fca2 100644
--- a/src/main/java/io/papermc/paper/event/player/PlayerItemCooldownEvent.java
+++ b/src/main/java/io/papermc/paper/event/player/PlayerItemCooldownEvent.java
@@ -18,7 +18,7 @@ public class PlayerItemCooldownEvent extends PlayerEvent implements Cancellable
     private boolean cancelled;
     private int cooldown;
 
-    public PlayerItemCooldownEvent(@NotNull Player player, @NotNull Material type, int cooldown) {
+    public PlayerItemCooldownEvent(@NotNull final Player player, @NotNull final Material type, final int cooldown) {
         super(player);
         this.type = type;
         this.cooldown = cooldown;
@@ -49,7 +49,7 @@ public class PlayerItemCooldownEvent extends PlayerEvent implements Cancellable
      *
      * @param cooldown cooldown in ticks, has to be a positive number
      */
-    public void setCooldown(int cooldown) {
+    public void setCooldown(final int cooldown) {
         Preconditions.checkArgument(cooldown >= 0, "The cooldown has to be equal to or greater than 0!");
         this.cooldown = cooldown;
     }
@@ -60,7 +60,7 @@ public class PlayerItemCooldownEvent extends PlayerEvent implements Cancellable
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.cancelled = cancel;
     }
 
diff --git a/src/main/java/io/papermc/paper/event/player/PlayerItemFrameChangeEvent.java b/src/main/java/io/papermc/paper/event/player/PlayerItemFrameChangeEvent.java
index 4c102cd6b2b228c1389670b1fba147e4c32da928..9f8ade75867a1c7c76a92f71cf2b7843721083cb 100644
--- a/src/main/java/io/papermc/paper/event/player/PlayerItemFrameChangeEvent.java
+++ b/src/main/java/io/papermc/paper/event/player/PlayerItemFrameChangeEvent.java
@@ -21,8 +21,8 @@ public class PlayerItemFrameChangeEvent extends PlayerEvent implements Cancellab
     private ItemStack itemStack;
     private final @NotNull ItemFrameChangeAction action;
 
-    public PlayerItemFrameChangeEvent(@NotNull Player player, @NotNull ItemFrame itemFrame,
-                                      @NotNull ItemStack itemStack, @NotNull ItemFrameChangeAction action) {
+    public PlayerItemFrameChangeEvent(@NotNull final Player player, @NotNull final ItemFrame itemFrame,
+                                      @NotNull final ItemStack itemStack, @NotNull final ItemFrameChangeAction action) {
         super(player);
         this.itemFrame = itemFrame;
         this.itemStack = itemStack;
@@ -54,7 +54,7 @@ public class PlayerItemFrameChangeEvent extends PlayerEvent implements Cancellab
      * If null is provided, the ItemStack will become air and the result in the ItemFrame will be empty.
      * @param itemStack {@link ItemFrame} item
      */
-    public void setItemStack(@Nullable ItemStack itemStack) {
+    public void setItemStack(@Nullable final ItemStack itemStack) {
         this.itemStack = itemStack == null ? new ItemStack(Material.AIR) : itemStack;
     }
 
@@ -74,7 +74,7 @@ public class PlayerItemFrameChangeEvent extends PlayerEvent implements Cancellab
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.cancelled = cancel;
     }
 
diff --git a/src/main/java/io/papermc/paper/event/player/PlayerLecternPageChangeEvent.java b/src/main/java/io/papermc/paper/event/player/PlayerLecternPageChangeEvent.java
index 7032879f0fceeda5a6b2bebd2051fc2ff25cc9ab..885b84e2903fc7239032c30dc4afea5eed852879 100644
--- a/src/main/java/io/papermc/paper/event/player/PlayerLecternPageChangeEvent.java
+++ b/src/main/java/io/papermc/paper/event/player/PlayerLecternPageChangeEvent.java
@@ -20,7 +20,7 @@ public class PlayerLecternPageChangeEvent extends PlayerEvent implements Cancell
     private final int oldPage;
     private int newPage;
 
-    public PlayerLecternPageChangeEvent(@NotNull Player player, @NotNull Lectern lectern, @NotNull ItemStack book, @NotNull PageChangeDirection pageChangeDirection, int oldPage, int newPage) {
+    public PlayerLecternPageChangeEvent(@NotNull final Player player, @NotNull final Lectern lectern, @NotNull final ItemStack book, @NotNull final PageChangeDirection pageChangeDirection, final int oldPage, final int newPage) {
         super(player);
         this.lectern = lectern;
         this.book = book;
@@ -83,7 +83,7 @@ public class PlayerLecternPageChangeEvent extends PlayerEvent implements Cancell
      *
      * @param newPage the new paged changed to
      */
-    public void setNewPage(int newPage) {
+    public void setNewPage(final int newPage) {
         this.newPage = newPage;
     }
 
@@ -93,7 +93,7 @@ public class PlayerLecternPageChangeEvent extends PlayerEvent implements Cancell
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.cancelled = cancel;
     }
 
diff --git a/src/main/java/io/papermc/paper/event/player/PlayerLoomPatternSelectEvent.java b/src/main/java/io/papermc/paper/event/player/PlayerLoomPatternSelectEvent.java
index 316ef9970f1a89df3d14a0cc896ad645a361b59b..47ecd8bf9581e69c1728ccbaf876727f08a602ad 100644
--- a/src/main/java/io/papermc/paper/event/player/PlayerLoomPatternSelectEvent.java
+++ b/src/main/java/io/papermc/paper/event/player/PlayerLoomPatternSelectEvent.java
@@ -19,7 +19,7 @@ public class PlayerLoomPatternSelectEvent extends PlayerEvent implements Cancell
     private final @NotNull LoomInventory loomInventory;
     private PatternType patternType;
 
-    public PlayerLoomPatternSelectEvent(@NotNull Player player, @NotNull LoomInventory loomInventory, @NotNull PatternType patternType) {
+    public PlayerLoomPatternSelectEvent(@NotNull final Player player, @NotNull final LoomInventory loomInventory, @NotNull final PatternType patternType) {
         super(player);
         this.loomInventory = loomInventory;
         this.patternType = patternType;
@@ -50,7 +50,7 @@ public class PlayerLoomPatternSelectEvent extends PlayerEvent implements Cancell
      *
      * @param patternType the pattern type
      */
-    public void setPatternType(@NotNull PatternType patternType) {
+    public void setPatternType(@NotNull final PatternType patternType) {
         this.patternType = patternType;
     }
 
@@ -60,7 +60,7 @@ public class PlayerLoomPatternSelectEvent extends PlayerEvent implements Cancell
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.cancelled = cancel;
     }
 
diff --git a/src/main/java/io/papermc/paper/event/player/PlayerNameEntityEvent.java b/src/main/java/io/papermc/paper/event/player/PlayerNameEntityEvent.java
index 8254a3e92682ac28bc8415474b331b55dcb2370e..383345d9787aecbe636ead867b2bf51e71bba5dc 100755
--- a/src/main/java/io/papermc/paper/event/player/PlayerNameEntityEvent.java
+++ b/src/main/java/io/papermc/paper/event/player/PlayerNameEntityEvent.java
@@ -19,7 +19,7 @@ public class PlayerNameEntityEvent extends PlayerEvent implements Cancellable {
     private boolean persistent;
     private boolean cancelled;
 
-    public PlayerNameEntityEvent(@NotNull Player player, @NotNull LivingEntity entity, @NotNull Component name, boolean persistent) {
+    public PlayerNameEntityEvent(@NotNull final Player player, @NotNull final LivingEntity entity, @NotNull final Component name, final boolean persistent) {
         super(player);
         this.entity = entity;
         this.name = name;
@@ -40,7 +40,7 @@ public class PlayerNameEntityEvent extends PlayerEvent implements Cancellable {
      *
      * @param name the name
      */
-    public void setName(@Nullable Component name) {
+    public void setName(@Nullable final Component name) {
         this.name = name;
     }
 
@@ -59,7 +59,7 @@ public class PlayerNameEntityEvent extends PlayerEvent implements Cancellable {
      *
      * @param entity the entity
      */
-    public void setEntity(@NotNull LivingEntity entity) {
+    public void setEntity(@NotNull final LivingEntity entity) {
         this.entity = entity;
     }
 
@@ -77,7 +77,7 @@ public class PlayerNameEntityEvent extends PlayerEvent implements Cancellable {
      *
      * @param persistent persistent
      */
-    public void setPersistent(boolean persistent) {
+    public void setPersistent(final boolean persistent) {
         this.persistent = persistent;
     }
 
@@ -99,7 +99,7 @@ public class PlayerNameEntityEvent extends PlayerEvent implements Cancellable {
      * @param cancel true if you wish to cancel this event
      */
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.cancelled = cancel;
     }
 
diff --git a/src/main/java/io/papermc/paper/event/player/PlayerPurchaseEvent.java b/src/main/java/io/papermc/paper/event/player/PlayerPurchaseEvent.java
index c5648055c5e815474bf1e564a5c192ff5c0624fb..dc23bc884666d4c8337f322f129a01c968d654d6 100644
--- a/src/main/java/io/papermc/paper/event/player/PlayerPurchaseEvent.java
+++ b/src/main/java/io/papermc/paper/event/player/PlayerPurchaseEvent.java
@@ -19,10 +19,10 @@ public class PlayerPurchaseEvent extends PlayerEvent implements Cancellable {
     private boolean rewardExp;
     private MerchantRecipe trade;
 
-    public PlayerPurchaseEvent(@NotNull Player player,
-                               @NotNull MerchantRecipe trade,
-                               boolean rewardExp,
-                               boolean increaseTradeUses) {
+    public PlayerPurchaseEvent(@NotNull final Player player,
+                               @NotNull final MerchantRecipe trade,
+                               final boolean rewardExp,
+                               final boolean increaseTradeUses) {
         super(Objects.requireNonNull(player, "Player cannot be null!"));
         setTrade(trade);
         this.rewardExp = rewardExp;
@@ -42,7 +42,7 @@ public class PlayerPurchaseEvent extends PlayerEvent implements Cancellable {
      * Sets the trade. This is then used to determine the next prices
      * @param trade the trade to use
      */
-    public void setTrade(@NotNull MerchantRecipe trade) {
+    public void setTrade(@NotNull final MerchantRecipe trade) {
         this.trade = Objects.requireNonNull(trade, "Trade cannot be null!");
     }
 
@@ -57,7 +57,7 @@ public class PlayerPurchaseEvent extends PlayerEvent implements Cancellable {
      * Sets whether the trade will try to reward exp
      * @param rewardExp try to reward exp
      */
-    public void setRewardExp(boolean rewardExp) {
+    public void setRewardExp(final boolean rewardExp) {
         this.rewardExp = rewardExp;
     }
 
@@ -72,7 +72,7 @@ public class PlayerPurchaseEvent extends PlayerEvent implements Cancellable {
      * Sets whether or not the trade will count as a use
      * @param increaseTradeUses true to count/false to not count
      */
-    public void setIncreaseTradeUses(boolean increaseTradeUses) {
+    public void setIncreaseTradeUses(final boolean increaseTradeUses) {
         this.increaseTradeUses = increaseTradeUses;
     }
 
@@ -94,7 +94,7 @@ public class PlayerPurchaseEvent extends PlayerEvent implements Cancellable {
      * @param cancel true if you wish to cancel this event
      */
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.cancelled = cancel;
     }
 
diff --git a/src/main/java/io/papermc/paper/event/player/PlayerSignCommandPreprocessEvent.java b/src/main/java/io/papermc/paper/event/player/PlayerSignCommandPreprocessEvent.java
index 5772fe16f7c7cb3c13b43275290d0dff5c1e476a..099bba7b4e435815a427b3117612ba9bb57e61c2 100644
--- a/src/main/java/io/papermc/paper/event/player/PlayerSignCommandPreprocessEvent.java
+++ b/src/main/java/io/papermc/paper/event/player/PlayerSignCommandPreprocessEvent.java
@@ -17,7 +17,7 @@ public class PlayerSignCommandPreprocessEvent extends PlayerCommandPreprocessEve
 
     private final @NotNull Sign sign;
 
-    public PlayerSignCommandPreprocessEvent(@NotNull Player player, @NotNull String message, @NotNull Set<Player> recipients, @NotNull Sign sign) {
+    public PlayerSignCommandPreprocessEvent(@NotNull final Player player, @NotNull final String message, @NotNull final Set<Player> recipients, @NotNull final Sign sign) {
         super(player, message, recipients);
         this.sign = sign;
     }
diff --git a/src/main/java/io/papermc/paper/event/player/PlayerStonecutterRecipeSelectEvent.java b/src/main/java/io/papermc/paper/event/player/PlayerStonecutterRecipeSelectEvent.java
index 667226d79645c67c689b5eae491e5c2562b75252..ad3fd70a3350f56cd1b40d8de3d6b4743399c394 100644
--- a/src/main/java/io/papermc/paper/event/player/PlayerStonecutterRecipeSelectEvent.java
+++ b/src/main/java/io/papermc/paper/event/player/PlayerStonecutterRecipeSelectEvent.java
@@ -16,7 +16,7 @@ public class PlayerStonecutterRecipeSelectEvent extends PlayerEvent implements C
     private final @NotNull StonecutterInventory stonecutterInventory;
     private StonecuttingRecipe stonecuttingRecipe;
 
-    public PlayerStonecutterRecipeSelectEvent(@NotNull Player player, @NotNull StonecutterInventory stonecutterInventory, @NotNull StonecuttingRecipe stonecuttingRecipe) {
+    public PlayerStonecutterRecipeSelectEvent(@NotNull final Player player, @NotNull final StonecutterInventory stonecutterInventory, @NotNull final StonecuttingRecipe stonecuttingRecipe) {
         super(player);
         this.stonecutterInventory = stonecutterInventory;
         this.stonecuttingRecipe = stonecuttingRecipe;
@@ -32,7 +32,7 @@ public class PlayerStonecutterRecipeSelectEvent extends PlayerEvent implements C
         return stonecuttingRecipe;
     }
 
-    public void setStonecuttingRecipe(@NotNull StonecuttingRecipe stonecuttingRecipe) {
+    public void setStonecuttingRecipe(@NotNull final StonecuttingRecipe stonecuttingRecipe) {
         this.stonecuttingRecipe = stonecuttingRecipe;
     }
 
@@ -42,7 +42,7 @@ public class PlayerStonecutterRecipeSelectEvent extends PlayerEvent implements C
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.cancelled = cancel;
     }
 
diff --git a/src/main/java/io/papermc/paper/event/player/PlayerTradeEvent.java b/src/main/java/io/papermc/paper/event/player/PlayerTradeEvent.java
index 4ae99bc597ba63f80b11354ed47b937043ec37d4..48caef1f9a6b88c97b828c97b9f0ca6b95f51aa8 100755
--- a/src/main/java/io/papermc/paper/event/player/PlayerTradeEvent.java
+++ b/src/main/java/io/papermc/paper/event/player/PlayerTradeEvent.java
@@ -12,7 +12,7 @@ public class PlayerTradeEvent extends PlayerPurchaseEvent {
 
     private final @NotNull AbstractVillager villager;
 
-    public PlayerTradeEvent(@NotNull Player player, @NotNull AbstractVillager villager, @NotNull MerchantRecipe trade, boolean rewardExp, boolean increaseTradeUses) {
+    public PlayerTradeEvent(@NotNull final Player player, @NotNull final AbstractVillager villager, @NotNull final MerchantRecipe trade, final boolean rewardExp, final boolean increaseTradeUses) {
         super(player, trade, rewardExp, increaseTradeUses);
         this.villager = villager;
     }
diff --git a/src/main/java/io/papermc/paper/event/player/PrePlayerAttackEntityEvent.java b/src/main/java/io/papermc/paper/event/player/PrePlayerAttackEntityEvent.java
index d49999ea597ef247bbf2298e6bf5600bfe003c3e..f1f6ed1dba26e6d4a92a82c8a45f3ab0932f1a6e 100644
--- a/src/main/java/io/papermc/paper/event/player/PrePlayerAttackEntityEvent.java
+++ b/src/main/java/io/papermc/paper/event/player/PrePlayerAttackEntityEvent.java
@@ -27,7 +27,7 @@ public class PrePlayerAttackEntityEvent extends PlayerEvent implements Cancellab
     private boolean cancelled;
     private final boolean willAttack;
 
-    public PrePlayerAttackEntityEvent(@NotNull Player who, @NotNull Entity attacked, boolean willAttack) {
+    public PrePlayerAttackEntityEvent(@NotNull final Player who, @NotNull final Entity attacked, final boolean willAttack) {
         super(who);
         this.attacked = attacked;
         this.willAttack = willAttack;
@@ -77,7 +77,7 @@ public class PrePlayerAttackEntityEvent extends PlayerEvent implements Cancellab
      * @param cancel true if you wish to cancel this event
      */
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         if (!this.willAttack) {
             return;
         }
diff --git a/src/main/java/io/papermc/paper/event/server/ServerResourcesReloadedEvent.java b/src/main/java/io/papermc/paper/event/server/ServerResourcesReloadedEvent.java
index b04222a1c567658a5c343d5b027903252c3f0cee..6fd2b75cd42a280982504b1d4f433abd162230b4 100644
--- a/src/main/java/io/papermc/paper/event/server/ServerResourcesReloadedEvent.java
+++ b/src/main/java/io/papermc/paper/event/server/ServerResourcesReloadedEvent.java
@@ -16,7 +16,7 @@ public class ServerResourcesReloadedEvent extends ServerEvent {
 
     private final @NotNull Cause cause;
 
-    public ServerResourcesReloadedEvent(@NotNull Cause cause) {
+    public ServerResourcesReloadedEvent(@NotNull final Cause cause) {
         this.cause = cause;
     }
 
diff --git a/src/main/java/io/papermc/paper/event/world/StructureLocateEvent.java b/src/main/java/io/papermc/paper/event/world/StructureLocateEvent.java
index bb396652f170e82f17128661dfb35acbaaf314d4..ffff30c550184a4f4688656360bff3f201fde167 100644
--- a/src/main/java/io/papermc/paper/event/world/StructureLocateEvent.java
+++ b/src/main/java/io/papermc/paper/event/world/StructureLocateEvent.java
@@ -30,7 +30,7 @@ public class StructureLocateEvent extends WorldEvent implements Cancellable {
     private boolean findUnexplored;
     private boolean cancelled = false;
 
-    public StructureLocateEvent(@NotNull World world, @NotNull Location origin, @NotNull StructureType structureType, int radius, boolean findUnexplored) {
+    public StructureLocateEvent(@NotNull final World world, @NotNull final Location origin, @NotNull final StructureType structureType, final int radius, final boolean findUnexplored) {
         super(world);
         this.origin = origin;
         this.type = structureType;
@@ -68,7 +68,7 @@ public class StructureLocateEvent extends WorldEvent implements Cancellable {
      *
      * @param result the {@link Location} of the structure.
      */
-    public void setResult(@Nullable Location result) {
+    public void setResult(@Nullable final Location result) {
         this.result = result;
     }
 
@@ -87,7 +87,7 @@ public class StructureLocateEvent extends WorldEvent implements Cancellable {
      *
      * @param type the structure type.
      */
-    public void setType(@NotNull StructureType type) {
+    public void setType(@NotNull final StructureType type) {
         this.type = type;
     }
 
@@ -119,7 +119,7 @@ public class StructureLocateEvent extends WorldEvent implements Cancellable {
      *
      * @param radius the search radius.
      */
-    public void setRadius(int radius) {
+    public void setRadius(final int radius) {
         this.radius = radius;
     }
 
@@ -141,7 +141,7 @@ public class StructureLocateEvent extends WorldEvent implements Cancellable {
      *
      * @param findUnexplored Whether to search for only unexplored structures.
      */
-    public void setFindUnexplored(boolean findUnexplored) {
+    public void setFindUnexplored(final boolean findUnexplored) {
         this.findUnexplored = findUnexplored;
     }
 
@@ -151,7 +151,7 @@ public class StructureLocateEvent extends WorldEvent implements Cancellable {
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.cancelled = cancel;
     }
 }
diff --git a/src/main/java/io/papermc/paper/event/world/StructuresLocateEvent.java b/src/main/java/io/papermc/paper/event/world/StructuresLocateEvent.java
index fd75bd0b12d98c065eb068bd7273553f78bb6941..9e6a33cfb1bb0f8fc17c7ea60a24e615735f7967 100644
--- a/src/main/java/io/papermc/paper/event/world/StructuresLocateEvent.java
+++ b/src/main/java/io/papermc/paper/event/world/StructuresLocateEvent.java
@@ -35,7 +35,7 @@ public class StructuresLocateEvent extends WorldEvent implements Cancellable {
     private boolean findUnexplored;
     private boolean cancelled;
 
-    public StructuresLocateEvent(@NotNull World world, @NotNull Location origin, @NotNull List<ConfiguredStructure> configuredStructures, int radius, boolean findUnexplored) {
+    public StructuresLocateEvent(@NotNull final World world, @NotNull final Location origin, @NotNull final List<ConfiguredStructure> configuredStructures, final int radius, final boolean findUnexplored) {
         super(world);
         this.origin = origin;
         this.configuredStructures = configuredStructures;
@@ -71,7 +71,7 @@ public class StructuresLocateEvent extends WorldEvent implements Cancellable {
      *
      * @param result the {@link Location} and {@link ConfiguredStructure} of the search.
      */
-    public void setResult(@Nullable Result result) {
+    public void setResult(@Nullable final Result result) {
         this.result = result;
     }
 
@@ -89,7 +89,7 @@ public class StructuresLocateEvent extends WorldEvent implements Cancellable {
      *
      * @param configuredStructures a list of ConfiguredStructure targets
      */
-    public void setConfiguredStructures(@NotNull List<ConfiguredStructure> configuredStructures) {
+    public void setConfiguredStructures(@NotNull final List<ConfiguredStructure> configuredStructures) {
         this.configuredStructures = new ArrayList<>(configuredStructures);
     }
 
@@ -111,7 +111,7 @@ public class StructuresLocateEvent extends WorldEvent implements Cancellable {
      *
      * @param radius the search radius.
      */
-    public void setRadius(int radius) {
+    public void setRadius(final int radius) {
         this.radius = radius;
     }
 
@@ -133,7 +133,7 @@ public class StructuresLocateEvent extends WorldEvent implements Cancellable {
      *
      * @param findUnexplored Whether to search for only unexplored structures.
      */
-    public void setFindUnexplored(boolean findUnexplored) {
+    public void setFindUnexplored(final boolean findUnexplored) {
         this.findUnexplored = findUnexplored;
     }
 
@@ -143,7 +143,7 @@ public class StructuresLocateEvent extends WorldEvent implements Cancellable {
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.cancelled = cancel;
     }
 
diff --git a/src/main/java/io/papermc/paper/event/world/WorldGameRuleChangeEvent.java b/src/main/java/io/papermc/paper/event/world/WorldGameRuleChangeEvent.java
index 1eb6e9afe5ff7ea3687587649c8881e260f0493b..fd955c35b04b1f3e5926ea2c9a020e7f446124b6 100644
--- a/src/main/java/io/papermc/paper/event/world/WorldGameRuleChangeEvent.java
+++ b/src/main/java/io/papermc/paper/event/world/WorldGameRuleChangeEvent.java
@@ -21,7 +21,7 @@ public class WorldGameRuleChangeEvent extends WorldEvent implements Cancellable
     private String value;
     private boolean cancelled;
 
-    public WorldGameRuleChangeEvent(@NotNull World world, @Nullable CommandSender commandSender, @NotNull GameRule<?> gameRule, @NotNull String value) {
+    public WorldGameRuleChangeEvent(@NotNull final World world, @Nullable final CommandSender commandSender, @NotNull final GameRule<?> gameRule, @NotNull final String value) {
         super(world);
         this.commandSender = commandSender;
         this.gameRule = gameRule;
@@ -63,7 +63,7 @@ public class WorldGameRuleChangeEvent extends WorldEvent implements Cancellable
      *
      * @param value the new value of the gamerule.
      */
-    public void setValue(@NotNull String value) {
+    public void setValue(@NotNull final String value) {
         this.value = value;
     }
 
@@ -73,7 +73,7 @@ public class WorldGameRuleChangeEvent extends WorldEvent implements Cancellable
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.cancelled = cancel;
     }
 
diff --git a/src/main/java/io/papermc/paper/event/world/border/WorldBorderBoundsChangeEvent.java b/src/main/java/io/papermc/paper/event/world/border/WorldBorderBoundsChangeEvent.java
index 126fe50b519a8d7cd158f799058cb235f9c4cbdb..470c9228a2f3f24f4cdc5288894625654425a2e0 100644
--- a/src/main/java/io/papermc/paper/event/world/border/WorldBorderBoundsChangeEvent.java
+++ b/src/main/java/io/papermc/paper/event/world/border/WorldBorderBoundsChangeEvent.java
@@ -19,7 +19,7 @@ public class WorldBorderBoundsChangeEvent extends WorldBorderEvent implements Ca
     private long duration;
     private boolean cancelled;
 
-    public WorldBorderBoundsChangeEvent(@NotNull World world, @NotNull WorldBorder worldBorder, @NotNull Type type, double oldSize, double newSize, long duration) {
+    public WorldBorderBoundsChangeEvent(@NotNull final World world, @NotNull final WorldBorder worldBorder, @NotNull final Type type, final double oldSize, final double newSize, final long duration) {
         super(world, worldBorder);
         this.type = type;
         this.oldSize = oldSize;
@@ -60,7 +60,7 @@ public class WorldBorderBoundsChangeEvent extends WorldBorderEvent implements Ca
      *
      * @param newSize the new size
      */
-    public void setNewSize(double newSize) {
+    public void setNewSize(final double newSize) {
         // PAIL: TODO: Magic Values
         this.newSize = Math.min(6.0E7D, Math.max(1.0D, newSize));
     }
@@ -80,7 +80,7 @@ public class WorldBorderBoundsChangeEvent extends WorldBorderEvent implements Ca
      *
      * @param duration the time in milliseconds for the change
      */
-    public void setDuration(long duration) {
+    public void setDuration(final long duration) {
         // PAIL: TODO: Magic Values
         this.duration = Math.min(9223372036854775L, Math.max(0L, duration));
         if (duration >= 0 && type == Type.INSTANT_MOVE) type = Type.STARTED_MOVE;
@@ -92,7 +92,7 @@ public class WorldBorderBoundsChangeEvent extends WorldBorderEvent implements Ca
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.cancelled = cancel;
     }
 
diff --git a/src/main/java/io/papermc/paper/event/world/border/WorldBorderBoundsChangeFinishEvent.java b/src/main/java/io/papermc/paper/event/world/border/WorldBorderBoundsChangeFinishEvent.java
index c3d578ae2c5615b0ebace99d9bacf100b086c971..959a949a80d70ea8d1733161296aa590661150b1 100644
--- a/src/main/java/io/papermc/paper/event/world/border/WorldBorderBoundsChangeFinishEvent.java
+++ b/src/main/java/io/papermc/paper/event/world/border/WorldBorderBoundsChangeFinishEvent.java
@@ -16,7 +16,7 @@ public class WorldBorderBoundsChangeFinishEvent extends WorldBorderEvent {
     private final double newSize;
     private final double duration;
 
-    public WorldBorderBoundsChangeFinishEvent(@NotNull World world, @NotNull WorldBorder worldBorder, double oldSize, double newSize, double duration) {
+    public WorldBorderBoundsChangeFinishEvent(@NotNull final World world, @NotNull final WorldBorder worldBorder, final double oldSize, final double newSize, final double duration) {
         super(world, worldBorder);
         this.oldSize = oldSize;
         this.newSize = newSize;
diff --git a/src/main/java/io/papermc/paper/event/world/border/WorldBorderCenterChangeEvent.java b/src/main/java/io/papermc/paper/event/world/border/WorldBorderCenterChangeEvent.java
index 4f6732ceeeea88b58db0abb21a5648f7c6330a8c..a9767fe178e5f23479981f2826076e58da1cda42 100644
--- a/src/main/java/io/papermc/paper/event/world/border/WorldBorderCenterChangeEvent.java
+++ b/src/main/java/io/papermc/paper/event/world/border/WorldBorderCenterChangeEvent.java
@@ -18,7 +18,7 @@ public class WorldBorderCenterChangeEvent extends WorldBorderEvent implements Ca
     private Location newCenter;
     private boolean cancelled;
 
-    public WorldBorderCenterChangeEvent(@NotNull World world, @NotNull WorldBorder worldBorder, @NotNull Location oldCenter, @NotNull Location newCenter) {
+    public WorldBorderCenterChangeEvent(@NotNull final World world, @NotNull final WorldBorder worldBorder, @NotNull final Location oldCenter, @NotNull final Location newCenter) {
         super(world, worldBorder);
         this.oldCenter = oldCenter;
         this.newCenter = newCenter;
@@ -49,7 +49,7 @@ public class WorldBorderCenterChangeEvent extends WorldBorderEvent implements Ca
      *
      * @param newCenter the new center
      */
-    public void setNewCenter(@NotNull Location newCenter) {
+    public void setNewCenter(@NotNull final Location newCenter) {
         this.newCenter = newCenter;
     }
 
@@ -59,7 +59,7 @@ public class WorldBorderCenterChangeEvent extends WorldBorderEvent implements Ca
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.cancelled = cancel;
     }
 
diff --git a/src/main/java/io/papermc/paper/event/world/border/WorldBorderEvent.java b/src/main/java/io/papermc/paper/event/world/border/WorldBorderEvent.java
index 30db0192a907995702695940e9ee083aa291f58f..e1ffe4044b55eda5b2bd49cd089e7eeef744bb88 100644
--- a/src/main/java/io/papermc/paper/event/world/border/WorldBorderEvent.java
+++ b/src/main/java/io/papermc/paper/event/world/border/WorldBorderEvent.java
@@ -9,7 +9,7 @@ public abstract class WorldBorderEvent extends WorldEvent {
 
     private final @NotNull WorldBorder worldBorder;
 
-    public WorldBorderEvent(@NotNull World world, @NotNull WorldBorder worldBorder) {
+    public WorldBorderEvent(@NotNull final World world, @NotNull final WorldBorder worldBorder) {
         super(world);
         this.worldBorder = worldBorder;
     }
diff --git a/src/main/java/io/papermc/paper/inventory/ItemRarity.java b/src/main/java/io/papermc/paper/inventory/ItemRarity.java
index 74ef8395cc040ce488c2acaa416db20272cc2734..8d9ba14e8f9080f97bd5fa64f023c9b9df264c78 100644
--- a/src/main/java/io/papermc/paper/inventory/ItemRarity.java
+++ b/src/main/java/io/papermc/paper/inventory/ItemRarity.java
@@ -13,7 +13,7 @@ public enum ItemRarity {
 
     TextColor color;
 
-    ItemRarity(TextColor color) {
+    ItemRarity(final TextColor color) {
         this.color = color;
     }
 
diff --git a/src/main/java/io/papermc/paper/potion/PotionMix.java b/src/main/java/io/papermc/paper/potion/PotionMix.java
index db8ff61686a2975ce9acd9130d659d3b90ea0cbc..492806ef01514f0a007af477f2ccbf4f8a0afa90 100644
--- a/src/main/java/io/papermc/paper/potion/PotionMix.java
+++ b/src/main/java/io/papermc/paper/potion/PotionMix.java
@@ -29,7 +29,7 @@ public class PotionMix implements Keyed {
      * @param input the input placed into the bottom 3 slots
      * @param ingredient the ingredient placed into the top slot
      */
-    public PotionMix(@NotNull NamespacedKey key, @NotNull ItemStack result, @NotNull RecipeChoice input, @NotNull RecipeChoice ingredient) {
+    public PotionMix(@NotNull final NamespacedKey key, @NotNull final ItemStack result, @NotNull final RecipeChoice input, @NotNull final RecipeChoice ingredient) {
         this.key = key;
         this.result = result;
         this.input = input;
@@ -78,10 +78,10 @@ public class PotionMix implements Keyed {
     }
 
     @Override
-    public boolean equals(@Nullable Object o) {
+    public boolean equals(@Nullable final Object o) {
         if (this == o) return true;
         if (o == null || getClass() != o.getClass()) return false;
-        PotionMix potionMix = (PotionMix) o;
+        final PotionMix potionMix = (PotionMix) o;
         return this.key.equals(potionMix.key) && this.result.equals(potionMix.result) && this.input.equals(potionMix.input) && this.ingredient.equals(potionMix.ingredient);
     }
 
diff --git a/src/main/java/io/papermc/paper/registry/Reference.java b/src/main/java/io/papermc/paper/registry/Reference.java
index d880810cbf05bc45051fe29515054211572e33b4..0200ae44fe5d03c9ec62c9c4f27a8fd6765b62c4 100644
--- a/src/main/java/io/papermc/paper/registry/Reference.java
+++ b/src/main/java/io/papermc/paper/registry/Reference.java
@@ -37,7 +37,7 @@ public interface Reference<T extends Keyed> extends Keyed {
      * @param <T> the type of the value
      * @return a reference
      */
-    static <T extends Keyed> @NotNull Reference<T> create(@NotNull Registry<T> registry, @NotNull NamespacedKey key) {
+    static <T extends Keyed> @NotNull Reference<T> create(@NotNull final Registry<T> registry, @NotNull final NamespacedKey key) {
         return new ReferenceImpl<>(registry, key);
     }
 }
diff --git a/src/main/java/io/papermc/paper/tag/BaseTag.java b/src/main/java/io/papermc/paper/tag/BaseTag.java
index 256600ce5b345d43bfdbe1f2a726e3512f874580..b8ca9f180587e5d2a1a4e522ae080401309ae70d 100644
--- a/src/main/java/io/papermc/paper/tag/BaseTag.java
+++ b/src/main/java/io/papermc/paper/tag/BaseTag.java
@@ -22,27 +22,27 @@ public abstract class BaseTag<T extends Keyed, C extends BaseTag<T, C>> implemen
     private final @NotNull List<Predicate<T>> globalPredicates;
     private boolean locked = false;
 
-    public BaseTag(@NotNull Class<T> clazz, @NotNull NamespacedKey key, @NotNull Predicate<T> filter) {
+    public BaseTag(@NotNull final Class<T> clazz, @NotNull final NamespacedKey key, @NotNull final Predicate<T> filter) {
         this(clazz, key);
         add(filter);
     }
 
-    public BaseTag(@NotNull Class<T> clazz, @NotNull NamespacedKey key, @NotNull T...values) {
+    public BaseTag(@NotNull final Class<T> clazz, @NotNull final NamespacedKey key, @NotNull final T...values) {
         this(clazz, key, Lists.newArrayList(values));
     }
 
-    public BaseTag(@NotNull Class<T> clazz, @NotNull NamespacedKey key, @NotNull Collection<T> values) {
+    public BaseTag(@NotNull final Class<T> clazz, @NotNull final NamespacedKey key, @NotNull final Collection<T> values) {
         this(clazz, key, values, o -> true);
     }
 
-    public BaseTag(@NotNull Class<T> clazz, @NotNull NamespacedKey key, @NotNull Collection<T> values, @NotNull Predicate<T>... globalPredicates) {
+    public BaseTag(@NotNull final Class<T> clazz, @NotNull final NamespacedKey key, @NotNull final Collection<T> values, @NotNull final Predicate<T>... globalPredicates) {
         this.key = key != null ? key : NamespacedKey.randomKey();
         this.tagged = clazz.isEnum() ? createEnumSet(clazz) : new HashSet<>();
         this.tagged.addAll(values);
         this.globalPredicates = Lists.newArrayList(globalPredicates);
     }
 
-    private <E> @NotNull Set<E> createEnumSet(@NotNull Class<E> enumClass) {
+    private <E> @NotNull Set<E> createEnumSet(@NotNull final Class<E> enumClass) {
         assert enumClass.isEnum();
         return (Set<E>) EnumSet.noneOf((Class<Enum>) enumClass);
     }
@@ -75,98 +75,98 @@ public abstract class BaseTag<T extends Keyed, C extends BaseTag<T, C>> implemen
     }
 
     @Override
-    public boolean isTagged(@NotNull T item) {
+    public boolean isTagged(@NotNull final T item) {
         return tagged.contains(item);
     }
 
     @NotNull
-    public C add(@NotNull Tag<T> @NotNull ...tags) {
-        for (Tag<T> tag : tags) {
+    public C add(@NotNull final Tag<T> @NotNull ...tags) {
+        for (final Tag<T> tag : tags) {
             add(tag.getValues());
         }
         return (C) this;
     }
 
     @NotNull
-    public C add(@NotNull T...values) {
+    public C add(@NotNull final T...values) {
         this.checkLock();
         this.tagged.addAll(Lists.newArrayList(values));
         return (C) this;
     }
 
     @NotNull
-    public C add(@NotNull Collection<T> collection) {
+    public C add(@NotNull final Collection<T> collection) {
         this.checkLock();
         this.tagged.addAll(collection);
         return (C) this;
     }
 
     @NotNull
-    public C add(@NotNull Predicate<T> filter) {
+    public C add(@NotNull final Predicate<T> filter) {
         return add(getAllPossibleValues().stream().filter(globalPredicates.stream().reduce(Predicate::or).orElse(t -> true)).filter(filter).collect(Collectors.toSet()));
     }
 
     @NotNull
-    public C contains(@NotNull String with) {
+    public C contains(@NotNull final String with) {
         return add(value -> getName(value).contains(with));
     }
 
     @NotNull
-    public C endsWith(@NotNull String with) {
+    public C endsWith(@NotNull final String with) {
         return add(value -> getName(value).endsWith(with));
     }
 
     @NotNull
-    public C startsWith(@NotNull String with) {
+    public C startsWith(@NotNull final String with) {
         return add(value -> getName(value).startsWith(with));
     }
 
     @NotNull
-    public C not(@NotNull Tag<T> @NotNull ...tags) {
-        for (Tag<T> tag : tags) {
+    public C not(@NotNull final Tag<T> @NotNull ...tags) {
+        for (final Tag<T> tag : tags) {
             not(tag.getValues());
         }
         return (C) this;
     }
 
     @NotNull
-    public C not(@NotNull T...values) {
+    public C not(@NotNull final T...values) {
         this.checkLock();
         Lists.newArrayList(values).forEach(this.tagged::remove);
         return (C) this;
     }
 
     @NotNull
-    public C not(@NotNull Collection<T> values) {
+    public C not(@NotNull final Collection<T> values) {
         this.checkLock();
         this.tagged.removeAll(values);
         return (C) this;
     }
 
     @NotNull
-    public C not(@NotNull Predicate<T> filter) {
+    public C not(@NotNull final Predicate<T> filter) {
         not(getAllPossibleValues().stream().filter(globalPredicates.stream().reduce(Predicate::or).orElse(t -> true)).filter(filter).collect(Collectors.toSet()));
         return (C) this;
     }
 
     @NotNull
-    public C notContains(@NotNull String with) {
+    public C notContains(@NotNull final String with) {
         return not(value -> getName(value).contains(with));
     }
 
     @NotNull
-    public C notEndsWith(@NotNull String with) {
+    public C notEndsWith(@NotNull final String with) {
         return not(value -> getName(value).endsWith(with));
     }
 
     @NotNull
-    public C notStartsWith(@NotNull String with) {
+    public C notStartsWith(@NotNull final String with) {
         return not(value -> getName(value).startsWith(with));
     }
 
     @NotNull
-    public C ensureSize(@NotNull String label, int size) {
-        long actual = this.tagged.stream().filter(globalPredicates.stream().reduce(Predicate::or).orElse(t -> true)).count();
+    public C ensureSize(@NotNull final String label, final int size) {
+        final long actual = this.tagged.stream().filter(globalPredicates.stream().reduce(Predicate::or).orElse(t -> true)).count();
         if (size != actual) {
             throw new IllegalStateException(key.toString() + ": " + label + " - Expected " + size + " values, got " + actual);
         }
diff --git a/src/main/java/io/papermc/paper/tag/EntitySetTag.java b/src/main/java/io/papermc/paper/tag/EntitySetTag.java
index c89c4619aaf388197834d98eb95af2f1e93db871..dfa777ba028c9fea39b0950ccd9bb49b5867da36 100644
--- a/src/main/java/io/papermc/paper/tag/EntitySetTag.java
+++ b/src/main/java/io/papermc/paper/tag/EntitySetTag.java
@@ -12,19 +12,19 @@ import java.util.stream.Stream;
 
 public class EntitySetTag extends BaseTag<EntityType, EntitySetTag> {
 
-    public EntitySetTag(@NotNull NamespacedKey key, @NotNull Predicate<EntityType> filter) {
+    public EntitySetTag(@NotNull final NamespacedKey key, @NotNull final Predicate<EntityType> filter) {
         super(EntityType.class, key, filter);
     }
 
-    public EntitySetTag(@NotNull NamespacedKey key, @NotNull EntityType... values) {
+    public EntitySetTag(@NotNull final NamespacedKey key, @NotNull final EntityType... values) {
         super(EntityType.class, key, values);
     }
 
-    public EntitySetTag(@NotNull NamespacedKey key, @NotNull Collection<EntityType> values) {
+    public EntitySetTag(@NotNull final NamespacedKey key, @NotNull final Collection<EntityType> values) {
         super(EntityType.class, key, values);
     }
 
-    public EntitySetTag(@NotNull NamespacedKey key, @NotNull Collection<EntityType> values, @NotNull Predicate<EntityType>... globalPredicates) {
+    public EntitySetTag(@NotNull final NamespacedKey key, @NotNull final Collection<EntityType> values, @NotNull final Predicate<EntityType>... globalPredicates) {
         super(EntityType.class, key, values, globalPredicates);
     }
 
@@ -36,7 +36,7 @@ public class EntitySetTag extends BaseTag<EntityType, EntitySetTag> {
 
     @NotNull
     @Override
-    protected String getName(@NotNull EntityType value) {
+    protected String getName(@NotNull final EntityType value) {
         return value.name();
     }
 }
diff --git a/src/main/java/io/papermc/paper/tag/EntityTags.java b/src/main/java/io/papermc/paper/tag/EntityTags.java
index 8c8a2e483dd8938ef5d368d5e8e3d11e3f1ee73e..b96d4f27e0c93d11396ab1521574fcf091e176bc 100644
--- a/src/main/java/io/papermc/paper/tag/EntityTags.java
+++ b/src/main/java/io/papermc/paper/tag/EntityTags.java
@@ -11,7 +11,7 @@ import static org.bukkit.entity.EntityType.*;
  */
 public class EntityTags {
 
-    private static @NotNull NamespacedKey keyFor(String key) {
+    private static @NotNull NamespacedKey keyFor(final String key) {
         //noinspection deprecation
         return new NamespacedKey("paper", key + "_settag");
     }
diff --git a/src/main/java/io/papermc/paper/util/TransformingRandomAccessList.java b/src/main/java/io/papermc/paper/util/TransformingRandomAccessList.java
index 65b6e0ab6a45a745dacb519393035d1b30da0f89..56360a3df70b2f40f4e6277b1a2ab632b49dee55 100644
--- a/src/main/java/io/papermc/paper/util/TransformingRandomAccessList.java
+++ b/src/main/java/io/papermc/paper/util/TransformingRandomAccessList.java
@@ -47,7 +47,7 @@ public final class TransformingRandomAccessList<F, T> extends AbstractList<T> im
     }
 
     @Override
-    public T get(int index) {
+    public T get(final int index) {
         return this.toFunction.apply(this.fromList.get(index));
     }
 
@@ -57,15 +57,15 @@ public final class TransformingRandomAccessList<F, T> extends AbstractList<T> im
     }
 
     @Override
-    public @NotNull ListIterator<T> listIterator(int index) {
+    public @NotNull ListIterator<T> listIterator(final int index) {
         return new TransformedListIterator<F, T>(this.fromList.listIterator(index)) {
             @Override
-            T transform(F from) {
+            T transform(final F from) {
                 return TransformingRandomAccessList.this.toFunction.apply(from);
             }
 
             @Override
-            F transformBack(T from) {
+            F transformBack(final T from) {
                 return TransformingRandomAccessList.this.fromFunction.apply(from);
             }
         };
@@ -77,13 +77,13 @@ public final class TransformingRandomAccessList<F, T> extends AbstractList<T> im
     }
 
     @Override
-    public boolean removeIf(@NotNull Predicate<? super T> filter) {
+    public boolean removeIf(@NotNull final Predicate<? super T> filter) {
         checkNotNull(filter);
         return this.fromList.removeIf(element -> filter.test(this.toFunction.apply(element)));
     }
 
     @Override
-    public T remove(int index) {
+    public T remove(final int index) {
         return this.toFunction.apply(this.fromList.remove(index));
     }
 
@@ -93,19 +93,19 @@ public final class TransformingRandomAccessList<F, T> extends AbstractList<T> im
     }
 
     @Override
-    public T set(int i, T t) {
+    public T set(final int i, final T t) {
         return this.toFunction.apply(this.fromList.set(i, this.fromFunction.apply(t)));
     }
 
     @Override
-    public void add(int i, T t) {
+    public void add(final int i, final T t) {
         this.fromList.add(i, this.fromFunction.apply(t));
     }
 
     static abstract class TransformedListIterator<F, T> implements ListIterator<T>, Iterator<T> {
         final @NotNull Iterator<F> backingIterator;
 
-        TransformedListIterator(ListIterator<F> backingIterator) {
+        TransformedListIterator(final ListIterator<F> backingIterator) {
             this.backingIterator = checkNotNull((Iterator<F>) backingIterator);
         }
 
@@ -113,7 +113,7 @@ public final class TransformingRandomAccessList<F, T> extends AbstractList<T> im
             return cast(this.backingIterator);
         }
 
-        static <A> ListIterator<A> cast(Iterator<A> iterator) {
+        static <A> ListIterator<A> cast(final Iterator<A> iterator) {
             return (ListIterator<A>) iterator;
         }
 
@@ -138,12 +138,12 @@ public final class TransformingRandomAccessList<F, T> extends AbstractList<T> im
         }
 
         @Override
-        public void set(T element) {
+        public void set(final T element) {
             this.backingIterator().set(this.transformBack(element));
         }
 
         @Override
-        public void add(T element) {
+        public void add(final T element) {
             this.backingIterator().add(this.transformBack(element));
         }
 
diff --git a/src/main/java/io/papermc/paper/world/MoonPhase.java b/src/main/java/io/papermc/paper/world/MoonPhase.java
index 7b22ce4c81c66886388efdc2494e150a1540581b..ee76dc710d74982d23a3af20e9c39199f7ca1d5a 100644
--- a/src/main/java/io/papermc/paper/world/MoonPhase.java
+++ b/src/main/java/io/papermc/paper/world/MoonPhase.java
@@ -17,20 +17,20 @@ public enum MoonPhase {
 
     private final long day;
 
-    MoonPhase(long day) {
+    MoonPhase(final long day) {
         this.day = day;
     }
 
     private static final Map<Long, MoonPhase> BY_DAY = new HashMap<>();
 
     static {
-        for (MoonPhase phase : values()) {
+        for (final MoonPhase phase : values()) {
             BY_DAY.put(Long.valueOf(phase.day), phase);
         }
     }
 
     @NotNull
-    public static MoonPhase getPhase(long day) {
+    public static MoonPhase getPhase(final long day) {
         return BY_DAY.get(Long.valueOf(day % 8L));
     }
 }
diff --git a/src/main/java/io/papermc/paper/world/structure/ConfiguredStructure.java b/src/main/java/io/papermc/paper/world/structure/ConfiguredStructure.java
index e98fa3f3ccaba77e4fb8249e66772c41bf55628e..10ff61db95a6e71b7047c91a18c4462ccac37b4f 100644
--- a/src/main/java/io/papermc/paper/world/structure/ConfiguredStructure.java
+++ b/src/main/java/io/papermc/paper/world/structure/ConfiguredStructure.java
@@ -53,7 +53,7 @@ public final class ConfiguredStructure implements Keyed {
     private final @NotNull NamespacedKey key;
     private final @NotNull StructureType structureType;
 
-    ConfiguredStructure(@NotNull NamespacedKey key, @NotNull StructureType structureType) {
+    ConfiguredStructure(@NotNull final NamespacedKey key, @NotNull final StructureType structureType) {
         this.key = key;
         this.structureType = structureType;
     }
@@ -73,10 +73,10 @@ public final class ConfiguredStructure implements Keyed {
     }
 
     @Override
-    public boolean equals(@Nullable Object o) {
+    public boolean equals(@Nullable final Object o) {
         if (this == o) return true;
         if (o == null || getClass() != o.getClass()) return false;
-        ConfiguredStructure structure = (ConfiguredStructure) o;
+        final ConfiguredStructure structure = (ConfiguredStructure) o;
         return this.key.equals(structure.key) && this.structureType.equals(structure.structureType);
     }
 
@@ -93,7 +93,7 @@ public final class ConfiguredStructure implements Keyed {
             '}';
     }
 
-    private static @NotNull Reference<ConfiguredStructure> create(@NotNull String name) {
+    private static @NotNull Reference<ConfiguredStructure> create(@NotNull final String name) {
         return Reference.create(Registry.CONFIGURED_STRUCTURE, NamespacedKey.minecraft(name));
     }
 }
diff --git a/src/main/java/org/bukkit/Art.java b/src/main/java/org/bukkit/Art.java
index a5daea2daf79a3207e1dbf84ca182912157badad..463d8787a9eeec684750d01dc2329abde0b62bcf 100644
--- a/src/main/java/org/bukkit/Art.java
+++ b/src/main/java/org/bukkit/Art.java
@@ -46,7 +46,7 @@ public enum Art implements Keyed {
     private static final HashMap<String, Art> BY_NAME = Maps.newHashMap();
     private static final HashMap<Integer, Art> BY_ID = Maps.newHashMap();
 
-    private Art(int id, int width, int height) {
+    private Art(final int id, final int width, final int height) {
         this.id = id;
         this.width = width;
         this.height = height;
@@ -97,7 +97,7 @@ public enum Art implements Keyed {
      */
     @Deprecated
     @Nullable
-    public static Art getById(int id) {
+    public static Art getById(final int id) {
         return BY_ID.get(Integer.valueOf(id));
     }
 
@@ -110,14 +110,14 @@ public enum Art implements Keyed {
      * @return The painting
      */
     @Nullable
-    public static Art getByName(@NotNull String name) {
+    public static Art getByName(@NotNull final String name) {
         Preconditions.checkArgument(name != null, "Name cannot be null");
 
         return BY_NAME.get(name.toLowerCase(java.util.Locale.ENGLISH));
     }
 
     static {
-        for (Art art : values()) {
+        for (final Art art : values()) {
             BY_ID.put(Integer.valueOf(art.id), art);
             BY_NAME.put(art.toString().toLowerCase(java.util.Locale.ENGLISH), art);
         }
diff --git a/src/main/java/org/bukkit/Bukkit.java b/src/main/java/org/bukkit/Bukkit.java
index ac9b690fcccb60b587e5345f12f1383afd0a73a1..055492f291c430defc979f6d7de784c7378ecbbf 100644
--- a/src/main/java/org/bukkit/Bukkit.java
+++ b/src/main/java/org/bukkit/Bukkit.java
@@ -98,7 +98,7 @@ public final class Bukkit {
      *
      * @param server Server instance
      */
-    public static void setServer(@NotNull Server server) {
+    public static void setServer(@NotNull final Server server) {
         if (Bukkit.server != null) {
             throw new UnsupportedOperationException("Cannot redefine singleton Server");
         }
@@ -214,7 +214,7 @@ public final class Bukkit {
      *
      * @param maxPlayers the amount of players this server allows
      */
-    public static void setMaxPlayers(int maxPlayers) {
+    public static void setMaxPlayers(final int maxPlayers) {
         server.setMaxPlayers(maxPlayers);
     }
     // Paper end
@@ -361,7 +361,7 @@ public final class Bukkit {
      *
      * @param value true for whitelist on, false for off
      */
-    public static void setWhitelist(boolean value) {
+    public static void setWhitelist(final boolean value) {
         server.setWhitelist(value);
     }
 
@@ -385,7 +385,7 @@ public final class Bukkit {
      *
      * @param value true for enforced, false for not
      */
-    public static void setWhitelistEnforced(boolean value) {
+    public static void setWhitelistEnforced(final boolean value) {
         server.setWhitelistEnforced(value);
     }
 
@@ -417,7 +417,7 @@ public final class Bukkit {
      * @deprecated in favour of {@link Server#broadcast(net.kyori.adventure.text.Component)}
      */
     @Deprecated // Paper
-    public static int broadcastMessage(@NotNull String message) {
+    public static int broadcastMessage(@NotNull final String message) {
         return server.broadcastMessage(message);
     }
 
@@ -429,7 +429,7 @@ public final class Bukkit {
      * @deprecated use {@code sendMessage} methods on {@link #getServer()} that accept {@link net.kyori.adventure.text.Component}
      */
     @Deprecated
-    public static void broadcast(@NotNull net.md_5.bungee.api.chat.BaseComponent component) {
+    public static void broadcast(@NotNull final net.md_5.bungee.api.chat.BaseComponent component) {
         server.broadcast(component);
     }
 
@@ -440,7 +440,7 @@ public final class Bukkit {
      * @deprecated use {@code sendMessage} methods on {@link #getServer()} that accept {@link net.kyori.adventure.text.Component}
      */
     @Deprecated
-    public static void broadcast(@NotNull net.md_5.bungee.api.chat.BaseComponent... components) {
+    public static void broadcast(@NotNull final net.md_5.bungee.api.chat.BaseComponent... components) {
         server.broadcast(components);
     }
     // Paper end
@@ -645,7 +645,7 @@ public final class Bukkit {
      * @param spawnCategory the category of spawn
      * @return the default ticks per {@link SpawnCategory} mobs spawn value
      */
-    public static int getTicksPerSpawns(@NotNull SpawnCategory spawnCategory) {
+    public static int getTicksPerSpawns(@NotNull final SpawnCategory spawnCategory) {
         return server.getTicksPerSpawns(spawnCategory);
     }
 
@@ -658,7 +658,7 @@ public final class Bukkit {
      * @return a player if one was found, null otherwise
      */
     @Nullable
-    public static Player getPlayer(@NotNull String name) {
+    public static Player getPlayer(@NotNull final String name) {
         return server.getPlayer(name);
     }
 
@@ -669,7 +669,7 @@ public final class Bukkit {
      * @return a player object if one was found, null otherwise
      */
     @Nullable
-    public static Player getPlayerExact(@NotNull String name) {
+    public static Player getPlayerExact(@NotNull final String name) {
         return server.getPlayerExact(name);
     }
 
@@ -684,7 +684,7 @@ public final class Bukkit {
      * @return list of all possible players
      */
     @NotNull
-    public static List<Player> matchPlayer(@NotNull String name) {
+    public static List<Player> matchPlayer(@NotNull final String name) {
         return server.matchPlayer(name);
     }
 
@@ -695,7 +695,7 @@ public final class Bukkit {
      * @return a player object if one was found, null otherwise
      */
     @Nullable
-    public static Player getPlayer(@NotNull UUID id) {
+    public static Player getPlayer(@NotNull final UUID id) {
         return server.getPlayer(id);
     }
 
@@ -708,7 +708,7 @@ public final class Bukkit {
      * @return A UUID, or null if that player name is not registered with Minecraft and the server is in online mode
      */
     @Nullable
-    public static UUID getPlayerUniqueId(@NotNull String playerName) {
+    public static UUID getPlayerUniqueId(@NotNull final String playerName) {
         return server.getPlayerUniqueId(playerName);
     }
     // Paper end
@@ -778,7 +778,7 @@ public final class Bukkit {
      * @return newly created or loaded world
      */
     @Nullable
-    public static World createWorld(@NotNull WorldCreator creator) {
+    public static World createWorld(@NotNull final WorldCreator creator) {
         return server.createWorld(creator);
     }
 
@@ -792,7 +792,7 @@ public final class Bukkit {
      * @param save whether to save the chunks before unloading
      * @return true if successful, false otherwise
      */
-    public static boolean unloadWorld(@NotNull String name, boolean save) {
+    public static boolean unloadWorld(@NotNull final String name, final boolean save) {
         return server.unloadWorld(name, save);
     }
 
@@ -806,7 +806,7 @@ public final class Bukkit {
      * @param save whether to save the chunks before unloading
      * @return true if successful, false otherwise
      */
-    public static boolean unloadWorld(@NotNull World world, boolean save) {
+    public static boolean unloadWorld(@NotNull final World world, final boolean save) {
         return server.unloadWorld(world, save);
     }
 
@@ -817,7 +817,7 @@ public final class Bukkit {
      * @return a world with the given name, or null if none exists
      */
     @Nullable
-    public static World getWorld(@NotNull String name) {
+    public static World getWorld(@NotNull final String name) {
         return server.getWorld(name);
     }
 
@@ -828,7 +828,7 @@ public final class Bukkit {
      * @return a world with the given Unique ID, or null if none exists
      */
     @Nullable
-    public static World getWorld(@NotNull UUID uid) {
+    public static World getWorld(@NotNull final UUID uid) {
         return server.getWorld(uid);
     }
     // Paper start
@@ -839,7 +839,7 @@ public final class Bukkit {
      * @return a world with the given NamespacedKey, or null if none exists
      */
     @Nullable
-    public static World getWorld(@NotNull NamespacedKey worldKey) {
+    public static World getWorld(@NotNull final NamespacedKey worldKey) {
         return server.getWorld(worldKey);
     }
     // Paper end
@@ -865,7 +865,7 @@ public final class Bukkit {
      */
     @Deprecated
     @Nullable
-    public static MapView getMap(int id) {
+    public static MapView getMap(final int id) {
         return server.getMap(id);
     }
 
@@ -876,7 +876,7 @@ public final class Bukkit {
      * @return a newly created map view
      */
     @NotNull
-    public static MapView createMap(@NotNull World world) {
+    public static MapView createMap(@NotNull final World world) {
         return server.createMap(world);
     }
 
@@ -896,7 +896,7 @@ public final class Bukkit {
      *      org.bukkit.StructureType, int, boolean)
      */
     @NotNull
-    public static ItemStack createExplorerMap(@NotNull World world, @NotNull Location location, @NotNull StructureType structureType) {
+    public static ItemStack createExplorerMap(@NotNull final World world, @NotNull final Location location, @NotNull final StructureType structureType) {
         return server.createExplorerMap(world, location, structureType);
     }
 
@@ -919,7 +919,7 @@ public final class Bukkit {
      *      org.bukkit.StructureType, int, boolean)
      */
     @NotNull
-    public static ItemStack createExplorerMap(@NotNull World world, @NotNull Location location, @NotNull StructureType structureType, int radius, boolean findUnexplored) {
+    public static ItemStack createExplorerMap(@NotNull final World world, @NotNull final Location location, @NotNull final StructureType structureType, final int radius, final boolean findUnexplored) {
         return server.createExplorerMap(world, location, structureType, radius, findUnexplored);
     }
 
@@ -955,7 +955,7 @@ public final class Bukkit {
      * @return a plugin command if found, null otherwise
      */
     @Nullable
-    public static PluginCommand getPluginCommand(@NotNull String name) {
+    public static PluginCommand getPluginCommand(@NotNull final String name) {
         return server.getPluginCommand(name);
     }
 
@@ -976,7 +976,7 @@ public final class Bukkit {
      * @throws CommandException thrown when the executor for the given command
      *     fails with an unhandled exception
      */
-    public static boolean dispatchCommand(@NotNull CommandSender sender, @NotNull String commandLine) throws CommandException {
+    public static boolean dispatchCommand(@NotNull final CommandSender sender, @NotNull final String commandLine) throws CommandException {
         return server.dispatchCommand(sender, commandLine);
     }
 
@@ -988,7 +988,7 @@ public final class Bukkit {
      *     reason
      */
     @Contract("null -> false")
-    public static boolean addRecipe(@Nullable Recipe recipe) {
+    public static boolean addRecipe(@Nullable final Recipe recipe) {
         return server.addRecipe(recipe);
     }
 
@@ -1000,7 +1000,7 @@ public final class Bukkit {
      * @return a list of recipes with the given result
      */
     @NotNull
-    public static List<Recipe> getRecipesFor(@NotNull ItemStack result) {
+    public static List<Recipe> getRecipesFor(@NotNull final ItemStack result) {
         return server.getRecipesFor(result);
     }
 
@@ -1011,7 +1011,7 @@ public final class Bukkit {
      * @return the recipe for the given key or null.
      */
     @Nullable
-    public static Recipe getRecipe(@NotNull NamespacedKey recipeKey) {
+    public static Recipe getRecipe(@NotNull final NamespacedKey recipeKey) {
         return server.getRecipe(recipeKey);
     }
 
@@ -1036,7 +1036,7 @@ public final class Bukkit {
      * @return the {@link Recipe} resulting from the given crafting matrix.
      */
     @Nullable
-    public static Recipe getCraftingRecipe(@NotNull ItemStack[] craftingMatrix, @NotNull World world) {
+    public static Recipe getCraftingRecipe(@NotNull final ItemStack[] craftingMatrix, @NotNull final World world) {
         return server.getCraftingRecipe(craftingMatrix, world);
     }
 
@@ -1066,7 +1066,7 @@ public final class Bukkit {
      * an ItemStack of {@link Material#AIR} is returned.
      */
     @NotNull
-    public static ItemStack craftItem(@NotNull ItemStack[] craftingMatrix, @NotNull World world, @NotNull Player player) {
+    public static ItemStack craftItem(@NotNull final ItemStack[] craftingMatrix, @NotNull final World world, @NotNull final Player player) {
         return server.craftItem(craftingMatrix, world, player);
     }
 
@@ -1104,7 +1104,7 @@ public final class Bukkit {
      * @param key NamespacedKey of recipe to remove.
      * @return True if recipe was removed
      */
-    public static boolean removeRecipe(@NotNull NamespacedKey key) {
+    public static boolean removeRecipe(@NotNull final NamespacedKey key) {
         return server.removeRecipe(key);
     }
 
@@ -1132,7 +1132,7 @@ public final class Bukkit {
      *
      * @param value new spawn radius, or 0 if none
      */
-    public static void setSpawnRadius(int value) {
+    public static void setSpawnRadius(final int value) {
         server.setSpawnRadius(value);
     }
 
@@ -1211,7 +1211,7 @@ public final class Bukkit {
      * @param message the message
      * @return the number of players
      */
-    public static int broadcast(@NotNull net.kyori.adventure.text.Component message) {
+    public static int broadcast(@NotNull final net.kyori.adventure.text.Component message) {
         return server.broadcast(message);
     }
     /**
@@ -1223,7 +1223,7 @@ public final class Bukkit {
      *     permissibles} must have to receive the broadcast
      * @return number of message recipients
      */
-    public static int broadcast(@NotNull net.kyori.adventure.text.Component message, @NotNull String permission) {
+    public static int broadcast(@NotNull final net.kyori.adventure.text.Component message, @NotNull final String permission) {
         return server.broadcast(message, permission);
     }
     // Paper end
@@ -1238,7 +1238,7 @@ public final class Bukkit {
      * @deprecated in favour of {@link #broadcast(net.kyori.adventure.text.Component, String)}
      */
     @Deprecated // Paper
-    public static int broadcast(@NotNull String message, @NotNull String permission) {
+    public static int broadcast(@NotNull final String message, @NotNull final String permission) {
         return server.broadcast(message, permission);
     }
 
@@ -1258,7 +1258,7 @@ public final class Bukkit {
      */
     // @Deprecated // Paper
     @NotNull
-    public static OfflinePlayer getOfflinePlayer(@NotNull String name) {
+    public static OfflinePlayer getOfflinePlayer(@NotNull final String name) {
         return server.getOfflinePlayer(name);
     }
 
@@ -1278,7 +1278,7 @@ public final class Bukkit {
      * @see #getOfflinePlayer(java.util.UUID)
      */
     @Nullable
-    public static OfflinePlayer getOfflinePlayerIfCached(@NotNull String name) {
+    public static OfflinePlayer getOfflinePlayerIfCached(@NotNull final String name) {
         return server.getOfflinePlayerIfCached(name);
     }
     // Paper end
@@ -1294,7 +1294,7 @@ public final class Bukkit {
      * @return an offline player
      */
     @NotNull
-    public static OfflinePlayer getOfflinePlayer(@NotNull UUID id) {
+    public static OfflinePlayer getOfflinePlayer(@NotNull final UUID id) {
         return server.getOfflinePlayer(id);
     }
 
@@ -1310,7 +1310,7 @@ public final class Bukkit {
      */
     @NotNull
     @Deprecated // Paper
-    public static PlayerProfile createPlayerProfile(@Nullable UUID uniqueId, @Nullable String name) {
+    public static PlayerProfile createPlayerProfile(@Nullable final UUID uniqueId, @Nullable final String name) {
         return server.createPlayerProfile(uniqueId, name);
     }
 
@@ -1324,7 +1324,7 @@ public final class Bukkit {
      */
     @NotNull
     @Deprecated // Paper
-    public static PlayerProfile createPlayerProfile(@NotNull UUID uniqueId) {
+    public static PlayerProfile createPlayerProfile(@NotNull final UUID uniqueId) {
         return server.createPlayerProfile(uniqueId);
     }
 
@@ -1339,7 +1339,7 @@ public final class Bukkit {
      */
     @NotNull
     @Deprecated // Paper
-    public static PlayerProfile createPlayerProfile(@NotNull String name) {
+    public static PlayerProfile createPlayerProfile(@NotNull final String name) {
         return server.createPlayerProfile(name);
     }
 
@@ -1358,7 +1358,7 @@ public final class Bukkit {
      *
      * @param address the IP address to ban
      */
-    public static void banIP(@NotNull String address) {
+    public static void banIP(@NotNull final String address) {
         server.banIP(address);
     }
 
@@ -1367,7 +1367,7 @@ public final class Bukkit {
      *
      * @param address the IP address to unban
      */
-    public static void unbanIP(@NotNull String address) {
+    public static void unbanIP(@NotNull final String address) {
         server.unbanIP(address);
     }
 
@@ -1391,7 +1391,7 @@ public final class Bukkit {
      * @return a ban list of the specified type
      */
     @NotNull
-    public static BanList getBanList(@NotNull BanList.Type type) {
+    public static BanList getBanList(@NotNull final BanList.Type type) {
         return server.getBanList(type);
     }
 
@@ -1420,7 +1420,7 @@ public final class Bukkit {
      *
      * @param mode the new game mode
      */
-    public static void setDefaultGameMode(@NotNull GameMode mode) {
+    public static void setDefaultGameMode(@NotNull final GameMode mode) {
         server.setDefaultGameMode(mode);
     }
 
@@ -1513,7 +1513,7 @@ public final class Bukkit {
      * @see InventoryType#isCreatable()
      */
     @NotNull
-    public static Inventory createInventory(@Nullable InventoryHolder owner, @NotNull InventoryType type) {
+    public static Inventory createInventory(@Nullable final InventoryHolder owner, @NotNull final InventoryType type) {
         return server.createInventory(owner, type);
     }
 
@@ -1543,7 +1543,7 @@ public final class Bukkit {
      * @see InventoryType#isCreatable()
      */
     @NotNull
-    public static Inventory createInventory(@Nullable InventoryHolder owner, @NotNull InventoryType type, @NotNull net.kyori.adventure.text.Component title) {
+    public static Inventory createInventory(@Nullable final InventoryHolder owner, @NotNull final InventoryType type, @NotNull final net.kyori.adventure.text.Component title) {
         return server.createInventory(owner, type, title);
     }
     // Paper end
@@ -1575,7 +1575,7 @@ public final class Bukkit {
      */
     @Deprecated // Paper
     @NotNull
-    public static Inventory createInventory(@Nullable InventoryHolder owner, @NotNull InventoryType type, @NotNull String title) {
+    public static Inventory createInventory(@Nullable final InventoryHolder owner, @NotNull final InventoryType type, @NotNull final String title) {
         return server.createInventory(owner, type, title);
     }
 
@@ -1589,7 +1589,7 @@ public final class Bukkit {
      * @throws IllegalArgumentException if the size is not a multiple of 9
      */
     @NotNull
-    public static Inventory createInventory(@Nullable InventoryHolder owner, int size) throws IllegalArgumentException {
+    public static Inventory createInventory(@Nullable final InventoryHolder owner, final int size) throws IllegalArgumentException {
         return server.createInventory(owner, size);
     }
 
@@ -1606,7 +1606,7 @@ public final class Bukkit {
      * @throws IllegalArgumentException if the size is not a multiple of 9
      */
     @NotNull
-    public static Inventory createInventory(@Nullable InventoryHolder owner, int size, @NotNull net.kyori.adventure.text.Component title) throws IllegalArgumentException {
+    public static Inventory createInventory(@Nullable final InventoryHolder owner, final int size, @NotNull final net.kyori.adventure.text.Component title) throws IllegalArgumentException {
         return server.createInventory(owner, size, title);
     }
     // Paper end
@@ -1625,7 +1625,7 @@ public final class Bukkit {
      */
     @Deprecated // Paper
     @NotNull
-    public static Inventory createInventory(@Nullable InventoryHolder owner, int size, @NotNull String title) throws IllegalArgumentException {
+    public static Inventory createInventory(@Nullable final InventoryHolder owner, final int size, @NotNull final String title) throws IllegalArgumentException {
         return server.createInventory(owner, size, title);
     }
 
@@ -1637,7 +1637,7 @@ public final class Bukkit {
      * when the merchant inventory is viewed
      * @return a new merchant
      */
-    public static @NotNull Merchant createMerchant(@Nullable net.kyori.adventure.text.Component title) {
+    public static @NotNull Merchant createMerchant(@Nullable final net.kyori.adventure.text.Component title) {
         return server.createMerchant(title);
     }
     // Paper start
@@ -1651,7 +1651,7 @@ public final class Bukkit {
      */
     @NotNull
     @Deprecated // Paper
-    public static Merchant createMerchant(@Nullable String title) {
+    public static Merchant createMerchant(@Nullable final String title) {
         return server.createMerchant(title);
     }
 
@@ -1747,7 +1747,7 @@ public final class Bukkit {
      * @param spawnCategory the category spawn
      * @return the {@link SpawnCategory} spawn limit
      */
-    public static int getSpawnLimit(@NotNull SpawnCategory spawnCategory) {
+    public static int getSpawnLimit(@NotNull final SpawnCategory spawnCategory) {
         return server.getSpawnLimit(spawnCategory);
     }
 
@@ -1853,7 +1853,7 @@ public final class Bukkit {
      * @see Criteria Criteria for a list of constants
      */
     @NotNull
-    public static Criteria getScoreboardCriteria(@NotNull String name) {
+    public static Criteria getScoreboardCriteria(@NotNull final String name) {
         return server.getScoreboardCriteria(name);
     }
 
@@ -1884,7 +1884,7 @@ public final class Bukkit {
      *     specifications
      */
     @NotNull
-    public static CachedServerIcon loadServerIcon(@NotNull File file) throws IllegalArgumentException, Exception {
+    public static CachedServerIcon loadServerIcon(@NotNull final File file) throws IllegalArgumentException, Exception {
         return server.loadServerIcon(file);
     }
 
@@ -1902,7 +1902,7 @@ public final class Bukkit {
      *     server-icon specifications
      */
     @NotNull
-    public static CachedServerIcon loadServerIcon(@NotNull BufferedImage image) throws IllegalArgumentException, Exception {
+    public static CachedServerIcon loadServerIcon(@NotNull final BufferedImage image) throws IllegalArgumentException, Exception {
         return server.loadServerIcon(image);
     }
 
@@ -1914,7 +1914,7 @@ public final class Bukkit {
      *
      * @param threshold the idle timeout in minutes
      */
-    public static void setIdleTimeout(int threshold) {
+    public static void setIdleTimeout(final int threshold) {
         server.setIdleTimeout(threshold);
     }
 
@@ -1937,7 +1937,7 @@ public final class Bukkit {
      *
      */
     @NotNull
-    public static ChunkGenerator.ChunkData createChunkData(@NotNull World world) {
+    public static ChunkGenerator.ChunkData createChunkData(@NotNull final World world) {
         return server.createChunkData(world);
     }
 
@@ -1954,7 +1954,7 @@ public final class Bukkit {
      */
     @NotNull
     @Deprecated(forRemoval = true)
-    public static ChunkGenerator.ChunkData createVanillaChunkData(@NotNull World world, int x, int z) {
+    public static ChunkGenerator.ChunkData createVanillaChunkData(@NotNull final World world, final int x, final int z) {
         return server.createVanillaChunkData(world, x, z);
     }
     // Paper stop
@@ -1970,7 +1970,7 @@ public final class Bukkit {
      * @return the created boss bar
      */
     @NotNull
-    public static BossBar createBossBar(@Nullable String title, @NotNull BarColor color, @NotNull BarStyle style, @NotNull BarFlag... flags) {
+    public static BossBar createBossBar(@Nullable final String title, @NotNull final BarColor color, @NotNull final BarStyle style, @NotNull final BarFlag... flags) {
         return server.createBossBar(title, color, style, flags);
     }
 
@@ -1989,7 +1989,7 @@ public final class Bukkit {
      * @return the created boss bar
      */
     @NotNull
-    public static KeyedBossBar createBossBar(@NotNull NamespacedKey key, @Nullable String title, @NotNull BarColor color, @NotNull BarStyle style, @NotNull BarFlag... flags) {
+    public static KeyedBossBar createBossBar(@NotNull final NamespacedKey key, @Nullable final String title, @NotNull final BarColor color, @NotNull final BarStyle style, @NotNull final BarFlag... flags) {
         return server.createBossBar(key, title, color, style, flags);
     }
 
@@ -2028,7 +2028,7 @@ public final class Bukkit {
      * @return bossbar or null if not exists
      */
     @Nullable
-    public static KeyedBossBar getBossBar(@NotNull NamespacedKey key) {
+    public static KeyedBossBar getBossBar(@NotNull final NamespacedKey key) {
         return server.getBossBar(key);
     }
 
@@ -2047,7 +2047,7 @@ public final class Bukkit {
      * @param key unique bossbar key
      * @return true if removal succeeded or false
      */
-    public static boolean removeBossBar(@NotNull NamespacedKey key) {
+    public static boolean removeBossBar(@NotNull final NamespacedKey key) {
         return server.removeBossBar(key);
     }
 
@@ -2058,7 +2058,7 @@ public final class Bukkit {
      * @return the entity with the given UUID, or null if it isn't found
      */
     @Nullable
-    public static Entity getEntity(@NotNull UUID uuid) {
+    public static Entity getEntity(@NotNull final UUID uuid) {
         return server.getEntity(uuid);
     }
 
@@ -2099,7 +2099,7 @@ public final class Bukkit {
      * @return advancement or null if not exists
      */
     @Nullable
-    public static Advancement getAdvancement(@NotNull NamespacedKey key) {
+    public static Advancement getAdvancement(@NotNull final NamespacedKey key) {
         return server.getAdvancement(key);
     }
 
@@ -2122,7 +2122,7 @@ public final class Bukkit {
      * @return new data instance
      */
     @NotNull
-    public static BlockData createBlockData(@NotNull Material material) {
+    public static BlockData createBlockData(@NotNull final Material material) {
         return server.createBlockData(material);
     }
 
@@ -2135,7 +2135,7 @@ public final class Bukkit {
      * @return new data instance
      */
     @NotNull
-    public static BlockData createBlockData(@NotNull Material material, @Nullable Consumer<BlockData> consumer) {
+    public static BlockData createBlockData(@NotNull final Material material, @Nullable final Consumer<BlockData> consumer) {
         return server.createBlockData(material, consumer);
     }
 
@@ -2148,7 +2148,7 @@ public final class Bukkit {
      * @throws IllegalArgumentException if the specified data is not valid
      */
     @NotNull
-    public static BlockData createBlockData(@NotNull String data) throws IllegalArgumentException {
+    public static BlockData createBlockData(@NotNull final String data) throws IllegalArgumentException {
         return server.createBlockData(data);
     }
 
@@ -2164,7 +2164,7 @@ public final class Bukkit {
      */
     @NotNull
     @Contract("null, null -> fail")
-    public static BlockData createBlockData(@Nullable Material material, @Nullable String data) throws IllegalArgumentException {
+    public static BlockData createBlockData(@Nullable final Material material, @Nullable final String data) throws IllegalArgumentException {
         return server.createBlockData(material, data);
     }
 
@@ -2187,7 +2187,7 @@ public final class Bukkit {
      * @return the tag or null
      */
     @Nullable
-    public static <T extends Keyed> Tag<T> getTag(@NotNull String registry, @NotNull NamespacedKey tag, @NotNull Class<T> clazz) {
+    public static <T extends Keyed> Tag<T> getTag(@NotNull final String registry, @NotNull final NamespacedKey tag, @NotNull final Class<T> clazz) {
         return server.getTag(registry, tag, clazz);
     }
 
@@ -2205,7 +2205,7 @@ public final class Bukkit {
      * @return all defined tags
      */
     @NotNull
-    public static <T extends Keyed> Iterable<Tag<T>> getTags(@NotNull String registry, @NotNull Class<T> clazz) {
+    public static <T extends Keyed> Iterable<Tag<T>> getTags(@NotNull final String registry, @NotNull final Class<T> clazz) {
         return server.getTags(registry, clazz);
     }
 
@@ -2216,7 +2216,7 @@ public final class Bukkit {
      * @return the LootTable, or null if no LootTable is found with that name
      */
     @Nullable
-    public static LootTable getLootTable(@NotNull NamespacedKey key) {
+    public static LootTable getLootTable(@NotNull final NamespacedKey key) {
         return server.getLootTable(key);
     }
 
@@ -2241,7 +2241,7 @@ public final class Bukkit {
      * or a parameter is null
      */
     @NotNull
-    public static List<Entity> selectEntities(@NotNull CommandSender sender, @NotNull String selector) throws IllegalArgumentException {
+    public static List<Entity> selectEntities(@NotNull final CommandSender sender, @NotNull final String selector) throws IllegalArgumentException {
         return server.selectEntities(sender, selector);
     }
 
@@ -2268,7 +2268,7 @@ public final class Bukkit {
      * @return the corresponding registry or null if not present
      */
     @Nullable
-    public static <T extends Keyed> Registry<T> getRegistry(@NotNull Class<T> tClass) {
+    public static <T extends Keyed> Registry<T> getRegistry(@NotNull final Class<T> tClass) {
         return server.getRegistry(tClass);
     }
 
@@ -2352,7 +2352,7 @@ public final class Bukkit {
      * @return A PlayerProfile object
      */
     @NotNull
-    public static com.destroystokyo.paper.profile.PlayerProfile createProfile(@NotNull UUID uuid) {
+    public static com.destroystokyo.paper.profile.PlayerProfile createProfile(@NotNull final UUID uuid) {
         return server.createProfile(uuid);
     }
 
@@ -2371,7 +2371,7 @@ public final class Bukkit {
      * @return A PlayerProfile object
      */
     @NotNull
-    public static com.destroystokyo.paper.profile.PlayerProfile createProfile(@NotNull String name) {
+    public static com.destroystokyo.paper.profile.PlayerProfile createProfile(@NotNull final String name) {
         return server.createProfile(name);
     }
 
@@ -2395,7 +2395,7 @@ public final class Bukkit {
      * @return A PlayerProfile object
      */
     @NotNull
-    public static com.destroystokyo.paper.profile.PlayerProfile createProfile(@Nullable UUID uuid, @Nullable String name) {
+    public static com.destroystokyo.paper.profile.PlayerProfile createProfile(@Nullable final UUID uuid, @Nullable final String name) {
         return server.createProfile(uuid, name);
     }
 
@@ -2415,7 +2415,7 @@ public final class Bukkit {
      * @return A PlayerProfile object
      */
     @NotNull
-    public static com.destroystokyo.paper.profile.PlayerProfile createProfileExact(@Nullable UUID uuid, @Nullable String name) {
+    public static com.destroystokyo.paper.profile.PlayerProfile createProfileExact(@Nullable final UUID uuid, @Nullable final String name) {
         return server.createProfileExact(uuid, name);
     }
 
diff --git a/src/main/java/org/bukkit/ChatColor.java b/src/main/java/org/bukkit/ChatColor.java
index f80644af2be594f69ef7aee9253a2a9e8a92c1ce..6254d207f399dc09bcbd54418b83fc1a4fcd3d42 100644
--- a/src/main/java/org/bukkit/ChatColor.java
+++ b/src/main/java/org/bukkit/ChatColor.java
@@ -247,11 +247,11 @@ public enum ChatColor {
     private static final Map<Integer, ChatColor> BY_ID = Maps.newHashMap();
     private static final Map<Character, ChatColor> BY_CHAR = Maps.newHashMap();
 
-    private ChatColor(char code, int intCode) {
+    private ChatColor(final char code, final int intCode) {
         this(code, intCode, false);
     }
 
-    private ChatColor(char code, int intCode, boolean isFormat) {
+    private ChatColor(final char code, final int intCode, final boolean isFormat) {
         this.code = code;
         this.intCode = intCode;
         this.isFormat = isFormat;
@@ -304,7 +304,7 @@ public enum ChatColor {
      *     or null if it doesn't exist
      */
     @Nullable
-    public static ChatColor getByChar(char code) {
+    public static ChatColor getByChar(final char code) {
         return BY_CHAR.get(Character.valueOf(code));
     }
 
@@ -316,7 +316,7 @@ public enum ChatColor {
      *     or null if it doesn't exist
      */
     @Nullable
-    public static ChatColor getByChar(@NotNull String code) {
+    public static ChatColor getByChar(@NotNull final String code) {
         Preconditions.checkArgument(code != null, "Code cannot be null");
         Preconditions.checkArgument(code.length() > 0, "Code must have at least one char");
 
@@ -350,10 +350,10 @@ public enum ChatColor {
      * @return Text containing the ChatColor.COLOR_CODE color code character.
      */
     @NotNull
-    public static String translateAlternateColorCodes(char altColorChar, @NotNull String textToTranslate) {
+    public static String translateAlternateColorCodes(final char altColorChar, @NotNull final String textToTranslate) {
         Preconditions.checkArgument(textToTranslate != null, "Cannot translate null text");
 
-        char[] b = textToTranslate.toCharArray();
+        final char[] b = textToTranslate.toCharArray();
         for (int i = 0; i < b.length - 1; i++) {
             if (b[i] == altColorChar && "0123456789AaBbCcDdEeFfKkLlMmNnOoRrXx".indexOf(b[i + 1]) > -1) {
                 b[i] = ChatColor.COLOR_CHAR;
@@ -371,27 +371,27 @@ public enum ChatColor {
      * @return Any remaining ChatColors to pass onto the next line.
      */
     @NotNull
-    public static String getLastColors(@NotNull String input) {
+    public static String getLastColors(@NotNull final String input) {
         Preconditions.checkArgument(input != null, "Cannot get last colors from null text");
 
-        StringBuilder result = new StringBuilder();
-        int length = input.length();
+        final StringBuilder result = new StringBuilder();
+        final int length = input.length();
 
         // Search backwards from the end as it is faster
         for (int index = length - 1; index > -1; index--) {
-            char section = input.charAt(index);
+            final char section = input.charAt(index);
             if (section == COLOR_CHAR && index < length - 1) {
                 // Paper start - Support hex colors
                 if (index > 11 && input.charAt(index - 12) == COLOR_CHAR && (input.charAt(index - 11) == 'x' || input.charAt(index - 11) == 'X')) {
-                    String color = input.substring(index - 12, index + 2);
+                    final String color = input.substring(index - 12, index + 2);
                     if (HEX_COLOR_PATTERN.matcher(color).matches()) {
                         result.insert(0, color);
                         break;
                     }
                 }
                 // Paper end
-                char c = input.charAt(index + 1);
-                ChatColor color = getByChar(c);
+                final char c = input.charAt(index + 1);
+                final ChatColor color = getByChar(c);
 
                 if (color != null) {
                     result.insert(0, color);
@@ -408,7 +408,7 @@ public enum ChatColor {
     }
 
     static {
-        for (ChatColor color : values()) {
+        for (final ChatColor color : values()) {
             BY_ID.put(Integer.valueOf(color.intCode), color);
             BY_CHAR.put(Character.valueOf(color.code), color);
         }
diff --git a/src/main/java/org/bukkit/Chunk.java b/src/main/java/org/bukkit/Chunk.java
index e1e1bc868019f715370490719ef887e0eee3ddec..2b745e3a7229ca8dfeae9ba113a7982e127ad2cb 100644
--- a/src/main/java/org/bukkit/Chunk.java
+++ b/src/main/java/org/bukkit/Chunk.java
@@ -42,7 +42,7 @@ public interface Chunk extends PersistentDataHolder {
      * @param loc Location to get chunk key
      * @return Location's chunk coordinates packed into a long
      */
-    static long getChunkKey(@NotNull Location loc) {
+    static long getChunkKey(@NotNull final Location loc) {
         return getChunkKey((int) Math.floor(loc.getX()) >> 4, (int) Math.floor(loc.getZ()) >> 4);
     }
 
@@ -51,7 +51,7 @@ public interface Chunk extends PersistentDataHolder {
      * @param z Z Coordinate
      * @return Chunk coordinates packed into a long
      */
-    static long getChunkKey(int x, int z) {
+    static long getChunkKey(final int x, final int z) {
         return (long) x & 0xffffffffL | ((long) z & 0xffffffffL) << 32;
     }
     // Paper end
diff --git a/src/main/java/org/bukkit/CoalType.java b/src/main/java/org/bukkit/CoalType.java
index ce7e4ba40cef270628d5535fc7bab947214ea4b5..0f42b7ab99166c930642411ab52a7a7a8308c3ee 100644
--- a/src/main/java/org/bukkit/CoalType.java
+++ b/src/main/java/org/bukkit/CoalType.java
@@ -44,7 +44,7 @@ public enum CoalType {
     }
 
     static {
-        for (CoalType type : values()) {
+        for (final CoalType type : values()) {
             BY_DATA.put(Byte.valueOf(type.data), type);
         }
     }
diff --git a/src/main/java/org/bukkit/Color.java b/src/main/java/org/bukkit/Color.java
index 25c657412fa936ebf54bd5063455f255fa142abf..5aba00cf93cbe448f48c3373e7a8e674a68d3c50 100644
--- a/src/main/java/org/bukkit/Color.java
+++ b/src/main/java/org/bukkit/Color.java
@@ -117,7 +117,7 @@ public final class Color implements ConfigurationSerializable {
      * @throws IllegalArgumentException if any value is strictly {@literal >255 or <0}
      */
     @NotNull
-    public static Color fromRGB(int red, int green, int blue) throws IllegalArgumentException {
+    public static Color fromRGB(final int red, final int green, final int blue) throws IllegalArgumentException {
         return new Color(red, green, blue);
     }
 
@@ -131,7 +131,7 @@ public final class Color implements ConfigurationSerializable {
      * @throws IllegalArgumentException if any value is strictly {@literal >255 or <0}
      */
     @NotNull
-    public static Color fromBGR(int blue, int green, int red) throws IllegalArgumentException {
+    public static Color fromBGR(final int blue, final int green, final int red) throws IllegalArgumentException {
         return new Color(red, green, blue);
     }
 
@@ -145,7 +145,7 @@ public final class Color implements ConfigurationSerializable {
      *     bits
      */
     @NotNull
-    public static Color fromRGB(int rgb) throws IllegalArgumentException {
+    public static Color fromRGB(final int rgb) throws IllegalArgumentException {
         Preconditions.checkArgument((rgb >> 24) == 0, "Extrenuous data in: ", rgb);
         return fromRGB(rgb >> 16 & BIT_MASK, rgb >> 8 & BIT_MASK, rgb >> 0 & BIT_MASK);
     }
@@ -160,12 +160,12 @@ public final class Color implements ConfigurationSerializable {
      *     bits
      */
     @NotNull
-    public static Color fromBGR(int bgr) throws IllegalArgumentException {
+    public static Color fromBGR(final int bgr) throws IllegalArgumentException {
         Preconditions.checkArgument((bgr >> 24) == 0, "Extrenuous data in: ", bgr);
         return fromBGR(bgr >> 16 & BIT_MASK, bgr >> 8 & BIT_MASK, bgr >> 0 & BIT_MASK);
     }
 
-    private Color(int red, int green, int blue) {
+    private Color(final int red, final int green, final int blue) {
         Preconditions.checkArgument(red >= 0 && red <= BIT_MASK, "Red is not between 0-255: ", red);
         Preconditions.checkArgument(green >= 0 && green <= BIT_MASK, "Green is not between 0-255: ", green);
         Preconditions.checkArgument(blue >= 0 && blue <= BIT_MASK, "Blue is not between 0-255: ", blue);
@@ -191,7 +191,7 @@ public final class Color implements ConfigurationSerializable {
      * @return a new color object with the red component
      */
     @NotNull
-    public Color setRed(int red) {
+    public Color setRed(final int red) {
         return fromRGB(red, getGreen(), getBlue());
     }
 
@@ -211,7 +211,7 @@ public final class Color implements ConfigurationSerializable {
      * @return a new color object with the red component
      */
     @NotNull
-    public Color setGreen(int green) {
+    public Color setGreen(final int green) {
         return fromRGB(getRed(), green, getBlue());
     }
 
@@ -231,7 +231,7 @@ public final class Color implements ConfigurationSerializable {
      * @return a new color object with the red component
      */
     @NotNull
-    public Color setBlue(int blue) {
+    public Color setBlue(final int blue) {
         return fromRGB(getRed(), getGreen(), blue);
     }
 
@@ -262,10 +262,10 @@ public final class Color implements ConfigurationSerializable {
      */
     // TODO: Javadoc what this method does, not what it mimics. API != Implementation
     @NotNull
-    public Color mixDyes(@NotNull DyeColor @NotNull ... colors) {
+    public Color mixDyes(@NotNull final DyeColor @NotNull ... colors) {
         Preconditions.checkArgument(colors != null && Arrays.stream(colors).allMatch(Objects::nonNull), "Colors cannot be null");
 
-        Color[] toPass = new Color[colors.length];
+        final Color[] toPass = new Color[colors.length];
         for (int i = 0; i < colors.length; i++) {
             toPass[i] = colors[i].getColor();
         }
@@ -282,33 +282,33 @@ public final class Color implements ConfigurationSerializable {
      */
     // TODO: Javadoc what this method does, not what it mimics. API != Implementation
     @NotNull
-    public Color mixColors(@NotNull Color @NotNull ... colors) {
+    public Color mixColors(@NotNull final Color @NotNull ... colors) {
         Preconditions.checkArgument(colors != null && Arrays.stream(colors).allMatch(Objects::nonNull), "Colors cannot be null");
 
         int totalRed = this.getRed();
         int totalGreen = this.getGreen();
         int totalBlue = this.getBlue();
         int totalMax = Math.max(Math.max(totalRed, totalGreen), totalBlue);
-        for (Color color : colors) {
+        for (final Color color : colors) {
             totalRed += color.getRed();
             totalGreen += color.getGreen();
             totalBlue += color.getBlue();
             totalMax += Math.max(Math.max(color.getRed(), color.getGreen()), color.getBlue());
         }
 
-        float averageRed = totalRed / (colors.length + 1);
-        float averageGreen = totalGreen / (colors.length + 1);
-        float averageBlue = totalBlue / (colors.length + 1);
-        float averageMax = totalMax / (colors.length + 1);
+        final float averageRed = totalRed / (colors.length + 1);
+        final float averageGreen = totalGreen / (colors.length + 1);
+        final float averageBlue = totalBlue / (colors.length + 1);
+        final float averageMax = totalMax / (colors.length + 1);
 
-        float maximumOfAverages = Math.max(Math.max(averageRed, averageGreen), averageBlue);
-        float gainFactor = averageMax / maximumOfAverages;
+        final float maximumOfAverages = Math.max(Math.max(averageRed, averageGreen), averageBlue);
+        final float gainFactor = averageMax / maximumOfAverages;
 
         return Color.fromRGB((int) (averageRed * gainFactor), (int) (averageGreen * gainFactor), (int) (averageBlue * gainFactor));
     }
 
     @Override
-    public boolean equals(Object o) {
+    public boolean equals(final Object o) {
         if (!(o instanceof Color)) {
             return false;
         }
@@ -333,7 +333,7 @@ public final class Color implements ConfigurationSerializable {
 
     @SuppressWarnings("javadoc")
     @NotNull
-    public static Color deserialize(@NotNull Map<String, Object> map) {
+    public static Color deserialize(@NotNull final Map<String, Object> map) {
         return fromRGB(
             asInt("RED", map),
             asInt("GREEN", map),
@@ -341,8 +341,8 @@ public final class Color implements ConfigurationSerializable {
         );
     }
 
-    private static int asInt(@NotNull String string, @NotNull Map<String, Object> map) {
-        Object value = map.get(string);
+    private static int asInt(@NotNull final String string, @NotNull final Map<String, Object> map) {
+        final Object value = map.get(string);
         if (value == null) {
             throw new IllegalArgumentException(string + " not in map " + map);
         }
diff --git a/src/main/java/org/bukkit/CropState.java b/src/main/java/org/bukkit/CropState.java
index 219edb8deafcc49a8f89b53bbdab91411a5ba1a0..7b633c21a76bf1370a9be0766be62f6645f7585d 100644
--- a/src/main/java/org/bukkit/CropState.java
+++ b/src/main/java/org/bukkit/CropState.java
@@ -75,7 +75,7 @@ public enum CropState {
     }
 
     static {
-        for (CropState cropState : values()) {
+        for (final CropState cropState : values()) {
             BY_DATA.put(Byte.valueOf(cropState.getData()), cropState);
         }
     }
diff --git a/src/main/java/org/bukkit/Difficulty.java b/src/main/java/org/bukkit/Difficulty.java
index f03199c2d21b692550b74574edd1300f2eba10cc..ccfc4df6d3461ba93894dfe66fda1819f158f114 100644
--- a/src/main/java/org/bukkit/Difficulty.java
+++ b/src/main/java/org/bukkit/Difficulty.java
@@ -72,7 +72,7 @@ public enum Difficulty implements net.kyori.adventure.translation.Translatable {
     }
 
     static {
-        for (Difficulty diff : values()) {
+        for (final Difficulty diff : values()) {
             BY_ID.put(Integer.valueOf(diff.value), diff);
         }
     }
diff --git a/src/main/java/org/bukkit/DyeColor.java b/src/main/java/org/bukkit/DyeColor.java
index 11ff11d2fe4dc66df6b31ef648859079618fcc59..d68815eb5641e82b10747a317ee026f00d02b047 100644
--- a/src/main/java/org/bukkit/DyeColor.java
+++ b/src/main/java/org/bukkit/DyeColor.java
@@ -84,7 +84,7 @@ public enum DyeColor {
     private static final @NotNull Map<Color, DyeColor> BY_COLOR;
     private static final @NotNull Map<Color, DyeColor> BY_FIREWORK;
 
-    private DyeColor(final int woolData, final int dyeData, /*@NotNull*/ Color color, /*@NotNull*/ Color firework) {
+    private DyeColor(final int woolData, final int dyeData, /*@NotNull*/ final Color color, /*@NotNull*/ final Color firework) {
         this.woolData = (byte) woolData;
         this.dyeData = (byte) dyeData;
         this.color = color;
@@ -147,7 +147,7 @@ public enum DyeColor {
     @Deprecated
     @Nullable
     public static DyeColor getByWoolData(final byte data) {
-        int i = 0xff & data;
+        final int i = 0xff & data;
         if (i >= BY_WOOL_DATA.length) {
             return null;
         }
@@ -166,7 +166,7 @@ public enum DyeColor {
     @Deprecated
     @Nullable
     public static DyeColor getByDyeData(final byte data) {
-        int i = 0xff & data;
+        final int i = 0xff & data;
         if (i >= BY_DYE_DATA.length) {
             return null;
         }
@@ -206,17 +206,17 @@ public enum DyeColor {
      */
     @Deprecated
     @NotNull
-    public static DyeColor legacyValueOf(@Nullable String name) {
+    public static DyeColor legacyValueOf(@Nullable final String name) {
         return "SILVER".equals(name) ? DyeColor.LIGHT_GRAY : DyeColor.valueOf(name);
     }
 
     static {
         BY_WOOL_DATA = values();
         BY_DYE_DATA = values();
-        ImmutableMap.Builder<Color, DyeColor> byColor = ImmutableMap.builder();
-        ImmutableMap.Builder<Color, DyeColor> byFirework = ImmutableMap.builder();
+        final ImmutableMap.Builder<Color, DyeColor> byColor = ImmutableMap.builder();
+        final ImmutableMap.Builder<Color, DyeColor> byFirework = ImmutableMap.builder();
 
-        for (DyeColor color : values()) {
+        for (final DyeColor color : values()) {
             BY_WOOL_DATA[color.woolData & 0xff] = color;
             BY_DYE_DATA[color.dyeData & 0xff] = color;
             byColor.put(color.getColor(), color);
diff --git a/src/main/java/org/bukkit/Effect.java b/src/main/java/org/bukkit/Effect.java
index f5b4b1b41e67b3fab00198e3e10f508d87d92111..4d43009401c4b3337030adb27f1ebc383f33f3cd 100644
--- a/src/main/java/org/bukkit/Effect.java
+++ b/src/main/java/org/bukkit/Effect.java
@@ -437,11 +437,11 @@ public enum Effect {
     private final Class<?> data;
     private static final Map<Integer, Effect> BY_ID = Maps.newHashMap();
 
-    Effect(int id, /*@NotNull*/ Type type) {
+    Effect(final int id, /*@NotNull*/ final Type type) {
         this(id, type, null);
     }
 
-    Effect(int id, /*@NotNull*/ Type type, /*@Nullable*/ Class<?> data) {
+    Effect(final int id, /*@NotNull*/ final Type type, /*@Nullable*/ final Class<?> data) {
         this.id = id;
         this.type = type;
         this.data = data;
@@ -484,22 +484,22 @@ public enum Effect {
      */
     @Deprecated
     @Nullable
-    public static Effect getById(int id) {
+    public static Effect getById(final int id) {
         return BY_ID.get(Integer.valueOf(id));
     }
 
     static {
-        for (Effect effect : values()) {
+        for (final Effect effect : values()) {
             if (!isDeprecated(effect)) // Paper
             BY_ID.put(Integer.valueOf(effect.id), effect);
         }
     }
 
     // Paper start
-    private static boolean isDeprecated(@NotNull Effect effect) {
+    private static boolean isDeprecated(@NotNull final Effect effect) {
         try {
             return Effect.class.getDeclaredField(effect.name()).isAnnotationPresent(Deprecated.class);
-        } catch (NoSuchFieldException e) {
+        } catch (final NoSuchFieldException e) {
             LOGGER.error("Error getting effect enum field {}", effect.name(), e);
             return false;
         }
diff --git a/src/main/java/org/bukkit/EntityEffect.java b/src/main/java/org/bukkit/EntityEffect.java
index 96ab9a599a75d7e093bdbee2ee6b14ebe4b5ee14..eeb710b450ca5ee70d5da8ca91c3103ffde00c87 100644
--- a/src/main/java/org/bukkit/EntityEffect.java
+++ b/src/main/java/org/bukkit/EntityEffect.java
@@ -215,7 +215,7 @@ public enum EntityEffect {
     private final byte data;
     private final Class<? extends Entity> applicable;
 
-    EntityEffect(final int data, /*@NotNull*/ Class<? extends Entity> clazz) {
+    EntityEffect(final int data, /*@NotNull*/ final Class<? extends Entity> clazz) {
         this.data = (byte) data;
         this.applicable = clazz;
     }
diff --git a/src/main/java/org/bukkit/FireworkEffect.java b/src/main/java/org/bukkit/FireworkEffect.java
index c9db9c2bddf68f3cabca5bc7e215bc0d1063919e..8cb9b8db45c30351fc9f63c6cc6ae6409f1676aa 100644
--- a/src/main/java/org/bukkit/FireworkEffect.java
+++ b/src/main/java/org/bukkit/FireworkEffect.java
@@ -92,7 +92,7 @@ public final class FireworkEffect implements ConfigurationSerializable {
          * @throws IllegalArgumentException If type is null
          */
         @NotNull
-        public Builder with(@NotNull Type type) throws IllegalArgumentException {
+        public Builder with(@NotNull final Type type) throws IllegalArgumentException {
             Preconditions.checkArgument(type != null, "Cannot have null type");
             this.type = type;
             return this;
@@ -116,7 +116,7 @@ public final class FireworkEffect implements ConfigurationSerializable {
          * @return This object, for chaining
          */
         @NotNull
-        public Builder flicker(boolean flicker) {
+        public Builder flicker(final boolean flicker) {
             this.flicker = flicker;
             return this;
         }
@@ -139,7 +139,7 @@ public final class FireworkEffect implements ConfigurationSerializable {
          * @return This object, for chaining
          */
         @NotNull
-        public Builder trail(boolean trail) {
+        public Builder trail(final boolean trail) {
             this.trail = trail;
             return this;
         }
@@ -152,7 +152,7 @@ public final class FireworkEffect implements ConfigurationSerializable {
          * @throws IllegalArgumentException If color is null
          */
         @NotNull
-        public Builder withColor(@NotNull Color color) throws IllegalArgumentException {
+        public Builder withColor(@NotNull final Color color) throws IllegalArgumentException {
             Preconditions.checkArgument(color != null, "Cannot have null color");
 
             colors.add(color);
@@ -170,14 +170,14 @@ public final class FireworkEffect implements ConfigurationSerializable {
          *     thrown after changes have occurred)
          */
         @NotNull
-        public Builder withColor(@NotNull Color @NotNull ... colors) throws IllegalArgumentException {
+        public Builder withColor(@NotNull final Color @NotNull ... colors) throws IllegalArgumentException {
             Preconditions.checkArgument(colors != null, "Cannot have null colors");
             if (colors.length == 0) {
                 return this;
             }
 
-            ImmutableList.Builder<Color> list = this.colors;
-            for (Color color : colors) {
+            final ImmutableList.Builder<Color> list = this.colors;
+            for (final Color color : colors) {
                 Preconditions.checkArgument(color != null, "Color cannot be null");
                 list.add(color);
             }
@@ -196,11 +196,11 @@ public final class FireworkEffect implements ConfigurationSerializable {
          *     thrown after changes have occurred)
          */
         @NotNull
-        public Builder withColor(@NotNull Iterable<?> colors) throws IllegalArgumentException {
+        public Builder withColor(@NotNull final Iterable<?> colors) throws IllegalArgumentException {
             Preconditions.checkArgument(colors != null, "Cannot have null colors");
 
-            ImmutableList.Builder<Color> list = this.colors;
-            for (Object color : colors) {
+            final ImmutableList.Builder<Color> list = this.colors;
+            for (final Object color : colors) {
                 if (!(color instanceof Color)) {
                     throw new IllegalArgumentException(color + " is not a Color in " + colors);
                 }
@@ -220,7 +220,7 @@ public final class FireworkEffect implements ConfigurationSerializable {
          *     thrown after changes have occurred)
          */
         @NotNull
-        public Builder withFade(@NotNull Color color) throws IllegalArgumentException {
+        public Builder withFade(@NotNull final Color color) throws IllegalArgumentException {
             Preconditions.checkArgument(color != null, "Cannot have null color");
 
             if (fadeColors == null) {
@@ -242,7 +242,7 @@ public final class FireworkEffect implements ConfigurationSerializable {
          *     thrown after changes have occurred)
          */
         @NotNull
-        public Builder withFade(@NotNull Color @NotNull ... colors) throws IllegalArgumentException {
+        public Builder withFade(@NotNull final Color @NotNull ... colors) throws IllegalArgumentException {
             Preconditions.checkArgument(colors != null, "Cannot have null colors");
             if (colors.length == 0) {
                 return this;
@@ -253,7 +253,7 @@ public final class FireworkEffect implements ConfigurationSerializable {
                 list = this.fadeColors = ImmutableList.builder();
             }
 
-            for (Color color : colors) {
+            for (final Color color : colors) {
                 Preconditions.checkArgument(color != null, "Color cannot be null");
                 list.add(color);
             }
@@ -272,7 +272,7 @@ public final class FireworkEffect implements ConfigurationSerializable {
          *     thrown after changes have occurred)
          */
         @NotNull
-        public Builder withFade(@NotNull Iterable<?> colors) throws IllegalArgumentException {
+        public Builder withFade(@NotNull final Iterable<?> colors) throws IllegalArgumentException {
             Preconditions.checkArgument(colors != null, "Cannot have null colors");
 
             ImmutableList.Builder<Color> list = this.fadeColors;
@@ -280,7 +280,7 @@ public final class FireworkEffect implements ConfigurationSerializable {
                 list = this.fadeColors = ImmutableList.builder();
             }
 
-            for (Object color : colors) {
+            for (final Object color : colors) {
                 if (!(color instanceof Color)) {
                     throw new IllegalArgumentException(color + " is not a Color in " + colors);
                 }
@@ -323,7 +323,7 @@ public final class FireworkEffect implements ConfigurationSerializable {
     private final @NotNull Type type;
     private @Nullable String string = null;
 
-    FireworkEffect(boolean flicker, boolean trail, @NotNull ImmutableList<Color> colors, @NotNull ImmutableList<Color> fadeColors, @NotNull Type type) {
+    FireworkEffect(final boolean flicker, final boolean trail, @NotNull final ImmutableList<Color> colors, @NotNull final ImmutableList<Color> fadeColors, @NotNull final Type type) {
         if (colors.isEmpty()) {
             throw new IllegalStateException("Cannot make FireworkEffect without any color");
         }
@@ -388,8 +388,8 @@ public final class FireworkEffect implements ConfigurationSerializable {
      * @see ConfigurationSerializable
      */
     @NotNull
-    public static ConfigurationSerializable deserialize(@NotNull Map<String, Object> map) {
-        Type type = Type.valueOf((String) map.get(TYPE));
+    public static ConfigurationSerializable deserialize(@NotNull final Map<String, Object> map) {
+        final Type type = Type.valueOf((String) map.get(TYPE));
 
         return builder()
             .flicker(((Boolean) map.get(FLICKER)).booleanValue())
@@ -435,7 +435,7 @@ public final class FireworkEffect implements ConfigurationSerializable {
     }
 
     @Override
-    public boolean equals(Object obj) {
+    public boolean equals(final Object obj) {
         if (this == obj) {
             return true;
         }
@@ -444,7 +444,7 @@ public final class FireworkEffect implements ConfigurationSerializable {
             return false;
         }
 
-        FireworkEffect that = (FireworkEffect) obj;
+        final FireworkEffect that = (FireworkEffect) obj;
         return this.flicker == that.flicker
                 && this.trail == that.trail
                 && this.type == that.type
diff --git a/src/main/java/org/bukkit/GameEvent.java b/src/main/java/org/bukkit/GameEvent.java
index f71b209c4285bd9672946ef08cb8b0dfd7d49ba9..66563b1a12c4a9ed5d15f9491ab15347511b95fb 100644
--- a/src/main/java/org/bukkit/GameEvent.java
+++ b/src/main/java/org/bukkit/GameEvent.java
@@ -93,7 +93,7 @@ public final class GameEvent implements Keyed {
     //
     private final NamespacedKey key;
 
-    private GameEvent(NamespacedKey key) {
+    private GameEvent(final NamespacedKey key) {
         this.key = key;
 
         GAME_EVENTS.put(key, this);
@@ -112,7 +112,7 @@ public final class GameEvent implements Keyed {
      * @return the event or null
      */
     @Nullable
-    public static GameEvent getByKey(@NotNull NamespacedKey namespacedKey) {
+    public static GameEvent getByKey(@NotNull final NamespacedKey namespacedKey) {
         return GAME_EVENTS.get(namespacedKey);
     }
 
@@ -126,7 +126,7 @@ public final class GameEvent implements Keyed {
         return Collections.unmodifiableCollection(GAME_EVENTS.values());
     }
 
-    private static @NotNull GameEvent getEvent(@NotNull String vanilla) {
+    private static @NotNull GameEvent getEvent(@NotNull final String vanilla) {
         return new GameEvent(NamespacedKey.minecraft(vanilla));
     }
 }
diff --git a/src/main/java/org/bukkit/GameMode.java b/src/main/java/org/bukkit/GameMode.java
index a20ad2d433a9973941219a28f046ca0e07fac489..b80433461d38a198b2666092ef38bb4319163397 100644
--- a/src/main/java/org/bukkit/GameMode.java
+++ b/src/main/java/org/bukkit/GameMode.java
@@ -76,7 +76,7 @@ public enum GameMode implements net.kyori.adventure.translation.Translatable { /
     }
 
     static {
-        for (GameMode mode : values()) {
+        for (final GameMode mode : values()) {
             BY_ID.put(Integer.valueOf(mode.getValue()), mode);
         }
     }
diff --git a/src/main/java/org/bukkit/GameRule.java b/src/main/java/org/bukkit/GameRule.java
index 6cac68a60ee0b39937d6987579f2bab9b8f512de..b897bd619f19cedf009d1b2e8be7be8e5ce68422 100644
--- a/src/main/java/org/bukkit/GameRule.java
+++ b/src/main/java/org/bukkit/GameRule.java
@@ -246,7 +246,7 @@ public final class GameRule<T> implements net.kyori.adventure.translation.Transl
     private final @NotNull String name;
     private final @NotNull Class<T> type;
 
-    private GameRule(@NotNull String name, @NotNull Class<T> clazz) {
+    private GameRule(@NotNull final String name, @NotNull final Class<T> clazz) {
         Preconditions.checkNotNull(name, "GameRule name cannot be null");
         Preconditions.checkNotNull(clazz, "GameRule type cannot be null");
         Preconditions.checkArgument(clazz == Boolean.class || clazz == Integer.class, "Must be of type Boolean or Integer. Found %s ", clazz.getName());
@@ -276,14 +276,14 @@ public final class GameRule<T> implements net.kyori.adventure.translation.Transl
     }
 
     @Override
-    public boolean equals(Object obj) {
+    public boolean equals(final Object obj) {
         if (this == obj) {
             return true;
         }
         if (!(obj instanceof GameRule)) {
             return false;
         }
-        GameRule<?> other = (GameRule<?>) obj;
+        final GameRule<?> other = (GameRule<?>) obj;
         return this.getName().equals(other.getName()) && this.getType() == other.getType();
     }
 
@@ -300,7 +300,7 @@ public final class GameRule<T> implements net.kyori.adventure.translation.Transl
      * name
      */
     @Nullable
-    public static GameRule<?> getByName(@NotNull String rule) {
+    public static GameRule<?> getByName(@NotNull final String rule) {
         Preconditions.checkNotNull(rule, "Rule cannot be null");
         return gameRules.get(rule);
     }
diff --git a/src/main/java/org/bukkit/GrassSpecies.java b/src/main/java/org/bukkit/GrassSpecies.java
index 0ad046fa4ce3b89d13f9964aa9e8aca738ff112f..32c7dee71859daafc81e5bfadd7e4a1c63ffc335 100644
--- a/src/main/java/org/bukkit/GrassSpecies.java
+++ b/src/main/java/org/bukkit/GrassSpecies.java
@@ -57,7 +57,7 @@ public enum GrassSpecies {
     }
 
     static {
-        for (GrassSpecies grassSpecies : values()) {
+        for (final GrassSpecies grassSpecies : values()) {
             BY_DATA.put(Byte.valueOf(grassSpecies.getData()), grassSpecies);
         }
     }
diff --git a/src/main/java/org/bukkit/Instrument.java b/src/main/java/org/bukkit/Instrument.java
index 947669c6f42b7e06e680d50df19828c3f47f42ac..115294f070db6f15bbcba2d3e63da279b1b82fe9 100644
--- a/src/main/java/org/bukkit/Instrument.java
+++ b/src/main/java/org/bukkit/Instrument.java
@@ -141,7 +141,7 @@ public enum Instrument {
     }
 
     static {
-        for (Instrument instrument : Instrument.values()) {
+        for (final Instrument instrument : Instrument.values()) {
             BY_DATA.put(Byte.valueOf(instrument.getType()), instrument);
         }
     }
diff --git a/src/main/java/org/bukkit/Location.java b/src/main/java/org/bukkit/Location.java
index 736836c2c0cb83a76659a4a99c59416d801a4ae3..b891e5b4c0dd367d849e0845a99bfbd9228e469b 100644
--- a/src/main/java/org/bukkit/Location.java
+++ b/src/main/java/org/bukkit/Location.java
@@ -75,7 +75,7 @@ public class Location implements Cloneable, ConfigurationSerializable, io.paperm
      *
      * @param world New world that this location resides in
      */
-    public void setWorld(@Nullable World world) {
+    public void setWorld(@Nullable final World world) {
         this.world = (world == null) ? null : new WeakReference<>(world);
     }
 
@@ -89,7 +89,7 @@ public class Location implements Cloneable, ConfigurationSerializable, io.paperm
             return false;
         }
 
-        World world = this.world.get();
+        final World world = this.world.get();
         return world != null && Bukkit.getWorld(world.getUID()) != null;
     }
 
@@ -106,7 +106,7 @@ public class Location implements Cloneable, ConfigurationSerializable, io.paperm
             return null;
         }
 
-        World world = this.world.get();
+        final World world = this.world.get();
         Preconditions.checkArgument(world != null, "World unloaded");
         return world;
     }
@@ -136,7 +136,7 @@ public class Location implements Cloneable, ConfigurationSerializable, io.paperm
      *
      * @param x X-coordinate
      */
-    public void setX(double x) {
+    public void setX(final double x) {
         this.x = x;
     }
 
@@ -164,7 +164,7 @@ public class Location implements Cloneable, ConfigurationSerializable, io.paperm
      *
      * @param y y-coordinate
      */
-    public void setY(double y) {
+    public void setY(final double y) {
         this.y = y;
     }
 
@@ -192,7 +192,7 @@ public class Location implements Cloneable, ConfigurationSerializable, io.paperm
      *
      * @param z z-coordinate
      */
-    public void setZ(double z) {
+    public void setZ(final double z) {
         this.z = z;
     }
 
@@ -229,7 +229,7 @@ public class Location implements Cloneable, ConfigurationSerializable, io.paperm
      *
      * @param yaw new rotation's yaw
      */
-    public void setYaw(float yaw) {
+    public void setYaw(final float yaw) {
         this.yaw = yaw;
     }
 
@@ -263,7 +263,7 @@ public class Location implements Cloneable, ConfigurationSerializable, io.paperm
      *
      * @param pitch new incline's pitch
      */
-    public void setPitch(float pitch) {
+    public void setPitch(final float pitch) {
         this.pitch = pitch;
     }
 
@@ -292,14 +292,14 @@ public class Location implements Cloneable, ConfigurationSerializable, io.paperm
      */
     @NotNull
     public Vector getDirection() {
-        Vector vector = new Vector();
+        final Vector vector = new Vector();
 
-        double rotX = this.getYaw();
-        double rotY = this.getPitch();
+        final double rotX = this.getYaw();
+        final double rotY = this.getPitch();
 
         vector.setY(-Math.sin(Math.toRadians(rotY)));
 
-        double xz = Math.cos(Math.toRadians(rotY));
+        final double xz = Math.cos(Math.toRadians(rotY));
 
         vector.setX(-xz * Math.sin(Math.toRadians(rotX)));
         vector.setZ(xz * Math.cos(Math.toRadians(rotX)));
@@ -315,7 +315,7 @@ public class Location implements Cloneable, ConfigurationSerializable, io.paperm
      * @return the same location
      */
     @NotNull
-    public Location setDirection(@NotNull Vector vector) {
+    public Location setDirection(@NotNull final Vector vector) {
         /*
          * Sin = Opp / Hyp
          * Cos = Adj / Hyp
@@ -333,12 +333,12 @@ public class Location implements Cloneable, ConfigurationSerializable, io.paperm
             return this;
         }
 
-        double theta = Math.atan2(-x, z);
+        final double theta = Math.atan2(-x, z);
         yaw = (float) Math.toDegrees((theta + _2PI) % _2PI);
 
-        double x2 = NumberConversions.square(x);
-        double z2 = NumberConversions.square(z);
-        double xz = Math.sqrt(x2 + z2);
+        final double x2 = NumberConversions.square(x);
+        final double z2 = NumberConversions.square(z);
+        final double xz = Math.sqrt(x2 + z2);
         pitch = (float) Math.toDegrees(Math.atan(-vector.getY() / xz));
 
         return this;
@@ -353,7 +353,7 @@ public class Location implements Cloneable, ConfigurationSerializable, io.paperm
      * @see Vector
      */
     @NotNull
-    public Location add(@NotNull Location vec) {
+    public Location add(@NotNull final Location vec) {
         if (vec == null || vec.getWorld() != getWorld()) {
             throw new IllegalArgumentException("Cannot add Locations of differing worlds");
         }
@@ -372,7 +372,7 @@ public class Location implements Cloneable, ConfigurationSerializable, io.paperm
      * @see Vector
      */
     @NotNull
-    public Location add(@NotNull Vector vec) {
+    public Location add(@NotNull final Vector vec) {
         this.x += vec.getX();
         this.y += vec.getY();
         this.z += vec.getZ();
@@ -389,7 +389,7 @@ public class Location implements Cloneable, ConfigurationSerializable, io.paperm
      * @see Vector
      */
     @NotNull
-    public Location add(double x, double y, double z) {
+    public Location add(final double x, final double y, final double z) {
         this.x += x;
         this.y += y;
         this.z += z;
@@ -405,7 +405,7 @@ public class Location implements Cloneable, ConfigurationSerializable, io.paperm
      * @see Vector
      */
     @NotNull
-    public Location subtract(@NotNull Location vec) {
+    public Location subtract(@NotNull final Location vec) {
         if (vec == null || vec.getWorld() != getWorld()) {
             throw new IllegalArgumentException("Cannot add Locations of differing worlds");
         }
@@ -424,7 +424,7 @@ public class Location implements Cloneable, ConfigurationSerializable, io.paperm
      * @see Vector
      */
     @NotNull
-    public Location subtract(@NotNull Vector vec) {
+    public Location subtract(@NotNull final Vector vec) {
         this.x -= vec.getX();
         this.y -= vec.getY();
         this.z -= vec.getZ();
@@ -442,7 +442,7 @@ public class Location implements Cloneable, ConfigurationSerializable, io.paperm
      * @see Vector
      */
     @NotNull
-    public Location subtract(double x, double y, double z) {
+    public Location subtract(final double x, final double y, final double z) {
         this.x -= x;
         this.y -= y;
         this.z -= z;
@@ -487,7 +487,7 @@ public class Location implements Cloneable, ConfigurationSerializable, io.paperm
      * @throws IllegalArgumentException for differing worlds
      * @see Vector
      */
-    public double distance(@NotNull Location o) {
+    public double distance(@NotNull final Location o) {
         return Math.sqrt(distanceSquared(o));
     }
 
@@ -499,7 +499,7 @@ public class Location implements Cloneable, ConfigurationSerializable, io.paperm
      * @throws IllegalArgumentException for differing worlds
      * @see Vector
      */
-    public double distanceSquared(@NotNull Location o) {
+    public double distanceSquared(@NotNull final Location o) {
         if (o == null) {
             throw new IllegalArgumentException("Cannot measure distance to a null location");
         } else if (o.getWorld() == null || getWorld() == null) {
@@ -520,7 +520,7 @@ public class Location implements Cloneable, ConfigurationSerializable, io.paperm
      * @see Vector
      */
     @NotNull
-    public Location multiply(double m) {
+    public Location multiply(final double m) {
         x *= m;
         y *= m;
         z *= m;
@@ -550,7 +550,7 @@ public class Location implements Cloneable, ConfigurationSerializable, io.paperm
      * @return true if a chunk has been generated at this location
      */
     public boolean isGenerated() {
-        World world = this.getWorld();
+        final World world = this.getWorld();
         Preconditions.checkNotNull(world, "Location has no world!");
         return world.isChunkGenerated(locToBlock(x) >> 4, locToBlock(z) >> 4);
     }
@@ -565,7 +565,7 @@ public class Location implements Cloneable, ConfigurationSerializable, io.paperm
      * @return self (not cloned)
      */
     @NotNull
-    public Location set(double x, double y, double z) {
+    public Location set(final double x, final double y, final double z) {
         this.x = x;
         this.y = y;
         this.z = z;
@@ -583,7 +583,7 @@ public class Location implements Cloneable, ConfigurationSerializable, io.paperm
      * @return self (not cloned)
      */
     @NotNull
-    public Location add(@NotNull Location base, double x, double y, double z) {
+    public Location add(@NotNull final Location base, final double x, final double y, final double z) {
         return this.set(base.x + x, base.y + y, base.z + z);
     }
 
@@ -598,7 +598,7 @@ public class Location implements Cloneable, ConfigurationSerializable, io.paperm
      * @return self (not cloned)
      */
     @NotNull
-    public Location subtract(@NotNull Location base, double x, double y, double z) {
+    public Location subtract(@NotNull final Location base, final double x, final double y, final double z) {
         return this.set(base.x - x, base.y - y, base.z - z);
     }
 
@@ -607,7 +607,7 @@ public class Location implements Cloneable, ConfigurationSerializable, io.paperm
      */
     @NotNull
     public Location toBlockLocation() {
-        Location blockLoc = clone();
+        final Location blockLoc = clone();
         blockLoc.setX(getBlockX());
         blockLoc.setY(getBlockY());
         blockLoc.setZ(getBlockZ());
@@ -631,7 +631,7 @@ public class Location implements Cloneable, ConfigurationSerializable, io.paperm
      */
     @NotNull
     public Location toCenterLocation() {
-        Location centerLoc = clone();
+        final Location centerLoc = clone();
         centerLoc.setX(getBlockX() + 0.5);
         centerLoc.setY(getBlockY() + 0.5);
         centerLoc.setZ(getBlockZ() + 0.5);
@@ -687,7 +687,7 @@ public class Location implements Cloneable, ConfigurationSerializable, io.paperm
      * @param power The power of explosion, where 4F is TNT
      * @return false if explosion was canceled, otherwise true
      */
-    public boolean createExplosion(float power) {
+    public boolean createExplosion(final float power) {
         return this.getWorld().createExplosion(this, power);
     }
 
@@ -701,7 +701,7 @@ public class Location implements Cloneable, ConfigurationSerializable, io.paperm
      * @param setFire Whether or not to set blocks on fire
      * @return false if explosion was canceled, otherwise true
      */
-    public boolean createExplosion(float power, boolean setFire) {
+    public boolean createExplosion(final float power, final boolean setFire) {
         return this.getWorld().createExplosion(this, power, setFire);
     }
 
@@ -714,7 +714,7 @@ public class Location implements Cloneable, ConfigurationSerializable, io.paperm
      * @param breakBlocks Whether or not to have blocks be destroyed
      * @return false if explosion was canceled, otherwise true
      */
-    public boolean createExplosion(float power, boolean setFire, boolean breakBlocks) {
+    public boolean createExplosion(final float power, final boolean setFire, final boolean breakBlocks) {
         return this.getWorld().createExplosion(this, power, setFire, breakBlocks);
     }
 
@@ -727,7 +727,7 @@ public class Location implements Cloneable, ConfigurationSerializable, io.paperm
      * @param power The power of explosion, where 4F is TNT
      * @return false if explosion was canceled, otherwise true
      */
-    public boolean createExplosion(@Nullable Entity source, float power) {
+    public boolean createExplosion(@Nullable final Entity source, final float power) {
         return this.getWorld().createExplosion(source, this, power, true, true);
     }
 
@@ -742,7 +742,7 @@ public class Location implements Cloneable, ConfigurationSerializable, io.paperm
      * @param setFire Whether or not to set blocks on fire
      * @return false if explosion was canceled, otherwise true
      */
-    public boolean createExplosion(@Nullable Entity source, float power, boolean setFire) {
+    public boolean createExplosion(@Nullable final Entity source, final float power, final boolean setFire) {
         return this.getWorld().createExplosion(source, this, power, setFire, true);
     }
 
@@ -756,7 +756,7 @@ public class Location implements Cloneable, ConfigurationSerializable, io.paperm
      * @param breakBlocks Whether or not to have blocks be destroyed
      * @return false if explosion was canceled, otherwise true
      */
-    public boolean createExplosion(@NotNull Entity source, float power, boolean setFire, boolean breakBlocks) {
+    public boolean createExplosion(@NotNull final Entity source, final float power, final boolean setFire, final boolean breakBlocks) {
         return this.getWorld().createExplosion(source, this, power, setFire, breakBlocks);
     }
 
@@ -771,8 +771,8 @@ public class Location implements Cloneable, ConfigurationSerializable, io.paperm
      * @return the collection of entities near location. This will always be a non-null collection.
      */
     @NotNull
-    public Collection<Entity> getNearbyEntities(double x, double y, double z) {
-        World world = this.getWorld();
+    public Collection<Entity> getNearbyEntities(final double x, final double y, final double z) {
+        final World world = this.getWorld();
         if (world == null) {
             throw new IllegalArgumentException("Location has no world");
         }
@@ -785,7 +785,7 @@ public class Location implements Cloneable, ConfigurationSerializable, io.paperm
      * @return the collection of entities near location. This will always be a non-null collection.
      */
     @NotNull
-    public Collection<LivingEntity> getNearbyLivingEntities(double radius) {
+    public Collection<LivingEntity> getNearbyLivingEntities(final double radius) {
         return getNearbyEntitiesByType(org.bukkit.entity.LivingEntity.class, radius, radius, radius);
     }
 
@@ -796,7 +796,7 @@ public class Location implements Cloneable, ConfigurationSerializable, io.paperm
      * @return the collection of living entities near location. This will always be a non-null collection.
      */
     @NotNull
-    public Collection<LivingEntity> getNearbyLivingEntities(double xzRadius, double yRadius) {
+    public Collection<LivingEntity> getNearbyLivingEntities(final double xzRadius, final double yRadius) {
         return getNearbyEntitiesByType(org.bukkit.entity.LivingEntity.class, xzRadius, yRadius, xzRadius);
     }
 
@@ -808,7 +808,7 @@ public class Location implements Cloneable, ConfigurationSerializable, io.paperm
      * @return the collection of living entities near location. This will always be a non-null collection.
      */
     @NotNull
-    public Collection<LivingEntity> getNearbyLivingEntities(double xRadius, double yRadius, double zRadius) {
+    public Collection<LivingEntity> getNearbyLivingEntities(final double xRadius, final double yRadius, final double zRadius) {
         return getNearbyEntitiesByType(org.bukkit.entity.LivingEntity.class, xRadius, yRadius, zRadius);
     }
 
@@ -819,7 +819,7 @@ public class Location implements Cloneable, ConfigurationSerializable, io.paperm
      * @return the collection of living entities near location. This will always be a non-null collection.
      */
     @NotNull
-    public Collection<LivingEntity> getNearbyLivingEntities(double radius, @Nullable Predicate<LivingEntity> predicate) {
+    public Collection<LivingEntity> getNearbyLivingEntities(final double radius, @Nullable final Predicate<LivingEntity> predicate) {
         return getNearbyEntitiesByType(org.bukkit.entity.LivingEntity.class, radius, radius, radius, predicate);
     }
 
@@ -831,7 +831,7 @@ public class Location implements Cloneable, ConfigurationSerializable, io.paperm
      * @return the collection of living entities near location. This will always be a non-null collection.
      */
     @NotNull
-    public Collection<LivingEntity> getNearbyLivingEntities(double xzRadius, double yRadius, @Nullable Predicate<LivingEntity> predicate) {
+    public Collection<LivingEntity> getNearbyLivingEntities(final double xzRadius, final double yRadius, @Nullable final Predicate<LivingEntity> predicate) {
         return getNearbyEntitiesByType(org.bukkit.entity.LivingEntity.class, xzRadius, yRadius, xzRadius, predicate);
     }
 
@@ -844,7 +844,7 @@ public class Location implements Cloneable, ConfigurationSerializable, io.paperm
      * @return the collection of living entities near location. This will always be a non-null collection.
      */
     @NotNull
-    public Collection<LivingEntity> getNearbyLivingEntities(double xRadius, double yRadius, double zRadius, @Nullable Predicate<LivingEntity> predicate) {
+    public Collection<LivingEntity> getNearbyLivingEntities(final double xRadius, final double yRadius, final double zRadius, @Nullable final Predicate<LivingEntity> predicate) {
         return getNearbyEntitiesByType(org.bukkit.entity.LivingEntity.class, xRadius, yRadius, zRadius, predicate);
     }
 
@@ -854,7 +854,7 @@ public class Location implements Cloneable, ConfigurationSerializable, io.paperm
      * @return the collection of players near location. This will always be a non-null collection.
      */
     @NotNull
-    public Collection<Player> getNearbyPlayers(double radius) {
+    public Collection<Player> getNearbyPlayers(final double radius) {
         return getNearbyEntitiesByType(org.bukkit.entity.Player.class, radius, radius, radius);
     }
 
@@ -865,7 +865,7 @@ public class Location implements Cloneable, ConfigurationSerializable, io.paperm
      * @return the collection of players near location. This will always be a non-null collection.
      */
     @NotNull
-    public Collection<Player> getNearbyPlayers(double xzRadius, double yRadius) {
+    public Collection<Player> getNearbyPlayers(final double xzRadius, final double yRadius) {
         return getNearbyEntitiesByType(org.bukkit.entity.Player.class, xzRadius, yRadius, xzRadius);
     }
 
@@ -877,7 +877,7 @@ public class Location implements Cloneable, ConfigurationSerializable, io.paperm
      * @return the collection of players near location. This will always be a non-null collection.
      */
     @NotNull
-    public Collection<Player> getNearbyPlayers(double xRadius, double yRadius, double zRadius) {
+    public Collection<Player> getNearbyPlayers(final double xRadius, final double yRadius, final double zRadius) {
         return getNearbyEntitiesByType(org.bukkit.entity.Player.class, xRadius, yRadius, zRadius);
     }
 
@@ -888,7 +888,7 @@ public class Location implements Cloneable, ConfigurationSerializable, io.paperm
      * @return the collection of players near location. This will always be a non-null collection.
      */
     @NotNull
-    public Collection<Player> getNearbyPlayers(double radius, @Nullable Predicate<Player> predicate) {
+    public Collection<Player> getNearbyPlayers(final double radius, @Nullable final Predicate<Player> predicate) {
         return getNearbyEntitiesByType(org.bukkit.entity.Player.class, radius, radius, radius, predicate);
     }
 
@@ -900,7 +900,7 @@ public class Location implements Cloneable, ConfigurationSerializable, io.paperm
      * @return the collection of players near location. This will always be a non-null collection.
      */
     @NotNull
-    public Collection<Player> getNearbyPlayers(double xzRadius, double yRadius, @Nullable Predicate<Player> predicate) {
+    public Collection<Player> getNearbyPlayers(final double xzRadius, final double yRadius, @Nullable final Predicate<Player> predicate) {
         return getNearbyEntitiesByType(org.bukkit.entity.Player.class, xzRadius, yRadius, xzRadius, predicate);
     }
 
@@ -913,7 +913,7 @@ public class Location implements Cloneable, ConfigurationSerializable, io.paperm
      * @return the collection of players near location. This will always be a non-null collection.
      */
     @NotNull
-    public Collection<Player> getNearbyPlayers(double xRadius, double yRadius, double zRadius, @Nullable Predicate<Player> predicate) {
+    public Collection<Player> getNearbyPlayers(final double xRadius, final double yRadius, final double zRadius, @Nullable final Predicate<Player> predicate) {
         return getNearbyEntitiesByType(org.bukkit.entity.Player.class, xRadius, yRadius, zRadius, predicate);
     }
 
@@ -925,7 +925,7 @@ public class Location implements Cloneable, ConfigurationSerializable, io.paperm
      * @return the collection of entities of type clazz near location. This will always be a non-null collection.
      */
     @NotNull
-    public <T extends Entity> Collection<T> getNearbyEntitiesByType(@Nullable Class<? extends T> clazz, double radius) {
+    public <T extends Entity> Collection<T> getNearbyEntitiesByType(@Nullable final Class<? extends T> clazz, final double radius) {
         return getNearbyEntitiesByType(clazz, radius, radius, radius, null);
     }
 
@@ -938,7 +938,7 @@ public class Location implements Cloneable, ConfigurationSerializable, io.paperm
      * @return the collection of entities near location. This will always be a non-null collection.
      */
     @NotNull
-    public <T extends Entity> Collection<T> getNearbyEntitiesByType(@Nullable Class<? extends T> clazz, double xzRadius, double yRadius) {
+    public <T extends Entity> Collection<T> getNearbyEntitiesByType(@Nullable final Class<? extends T> clazz, final double xzRadius, final double yRadius) {
         return getNearbyEntitiesByType(clazz, xzRadius, yRadius, xzRadius, null);
     }
 
@@ -952,7 +952,7 @@ public class Location implements Cloneable, ConfigurationSerializable, io.paperm
      * @return the collection of entities near location. This will always be a non-null collection.
      */
     @NotNull
-    public <T extends Entity> Collection<T> getNearbyEntitiesByType(@Nullable Class<? extends T> clazz, double xRadius, double yRadius, double zRadius) {
+    public <T extends Entity> Collection<T> getNearbyEntitiesByType(@Nullable final Class<? extends T> clazz, final double xRadius, final double yRadius, final double zRadius) {
         return getNearbyEntitiesByType(clazz, xRadius, yRadius, zRadius, null);
     }
 
@@ -965,7 +965,7 @@ public class Location implements Cloneable, ConfigurationSerializable, io.paperm
      * @return the collection of entities near location. This will always be a non-null collection.
      */
     @NotNull
-    public <T extends Entity> Collection<T> getNearbyEntitiesByType(@Nullable Class<? extends T> clazz, double radius, @Nullable Predicate<T> predicate) {
+    public <T extends Entity> Collection<T> getNearbyEntitiesByType(@Nullable final Class<? extends T> clazz, final double radius, @Nullable final Predicate<T> predicate) {
         return getNearbyEntitiesByType(clazz, radius, radius, radius, predicate);
     }
 
@@ -979,7 +979,7 @@ public class Location implements Cloneable, ConfigurationSerializable, io.paperm
      * @return the collection of entities near location. This will always be a non-null collection.
      */
     @NotNull
-    public <T extends Entity> Collection<T> getNearbyEntitiesByType(@Nullable Class<? extends T> clazz, double xzRadius, double yRadius, @Nullable Predicate<T> predicate) {
+    public <T extends Entity> Collection<T> getNearbyEntitiesByType(@Nullable final Class<? extends T> clazz, final double xzRadius, final double yRadius, @Nullable final Predicate<T> predicate) {
         return getNearbyEntitiesByType(clazz, xzRadius, yRadius, xzRadius, predicate);
     }
 
@@ -994,8 +994,8 @@ public class Location implements Cloneable, ConfigurationSerializable, io.paperm
      * @return the collection of entities near location. This will always be a non-null collection.
      */
     @NotNull
-    public <T extends Entity> Collection<T> getNearbyEntitiesByType(@Nullable Class<? extends Entity> clazz, double xRadius, double yRadius, double zRadius, @Nullable Predicate<T> predicate) {
-        World world = this.getWorld();
+    public <T extends Entity> Collection<T> getNearbyEntitiesByType(@Nullable final Class<? extends Entity> clazz, final double xRadius, final double yRadius, final double zRadius, @Nullable final Predicate<T> predicate) {
+        final World world = this.getWorld();
         if (world == null) {
             throw new IllegalArgumentException("Location has no world");
         }
@@ -1003,7 +1003,7 @@ public class Location implements Cloneable, ConfigurationSerializable, io.paperm
     }
     // Paper end
     @Override
-    public boolean equals(@Nullable Object obj) {
+    public boolean equals(@Nullable final Object obj) {
         if (obj == null) {
             return false;
         }
@@ -1012,8 +1012,8 @@ public class Location implements Cloneable, ConfigurationSerializable, io.paperm
         }
         final Location other = (Location) obj;
 
-        World world = (this.world == null) ? null : this.world.get();
-        World otherWorld = (other.world == null) ? null : other.world.get();
+        final World world = (this.world == null) ? null : this.world.get();
+        final World otherWorld = (other.world == null) ? null : other.world.get();
         if (world != otherWorld && (world == null || !world.equals(otherWorld))) {
             return false;
         }
@@ -1039,7 +1039,7 @@ public class Location implements Cloneable, ConfigurationSerializable, io.paperm
     public int hashCode() {
         int hash = 3;
 
-        World world = (this.world == null) ? null : this.world.get();
+        final World world = (this.world == null) ? null : this.world.get();
         hash = 19 * hash + (world != null ? world.hashCode() : 0);
         hash = 19 * hash + (int) (Double.doubleToLongBits(this.x) ^ (Double.doubleToLongBits(this.x) >>> 32));
         hash = 19 * hash + (int) (Double.doubleToLongBits(this.y) ^ (Double.doubleToLongBits(this.y) >>> 32));
@@ -1051,7 +1051,7 @@ public class Location implements Cloneable, ConfigurationSerializable, io.paperm
 
     @Override
     public @NotNull String toString() {
-        World world = (this.world == null) ? null : this.world.get();
+        final World world = (this.world == null) ? null : this.world.get();
         return "Location{" + "world=" + world + ",x=" + x + ",y=" + y + ",z=" + z + ",pitch=" + pitch + ",yaw=" + yaw + '}';
     }
 
@@ -1071,7 +1071,7 @@ public class Location implements Cloneable, ConfigurationSerializable, io.paperm
     public Location clone() {
         try {
             return (Location) super.clone();
-        } catch (CloneNotSupportedException e) {
+        } catch (final CloneNotSupportedException e) {
             throw new Error(e);
         }
     }
@@ -1096,7 +1096,7 @@ public class Location implements Cloneable, ConfigurationSerializable, io.paperm
      * @param loc Precise coordinate
      * @return Block coordinate
      */
-    public static int locToBlock(double loc) {
+    public static int locToBlock(final double loc) {
         return NumberConversions.floor(loc);
     }
 
@@ -1104,7 +1104,7 @@ public class Location implements Cloneable, ConfigurationSerializable, io.paperm
     @Utility
     @NotNull
     public Map<String, Object> serialize() {
-        Map<String, Object> data = new HashMap<String, Object>();
+        final Map<String, Object> data = new HashMap<String, Object>();
 
         if (this.world != null) {
             data.put("world", getWorld().getName());
@@ -1129,7 +1129,7 @@ public class Location implements Cloneable, ConfigurationSerializable, io.paperm
      * @see ConfigurationSerializable
      */
     @NotNull
-    public static Location deserialize(@NotNull Map<String, Object> args) {
+    public static Location deserialize(@NotNull final Map<String, Object> args) {
         World world = null;
         if (args.containsKey("world")) {
             world = Bukkit.getWorld((String) args.get("world"));
diff --git a/src/main/java/org/bukkit/Material.java b/src/main/java/org/bukkit/Material.java
index b940edce5becab4754d0d8e1a2895a8a6e7090bb..1e991012fab9dc9a121bb7dee91ef316e0fbdafa 100644
--- a/src/main/java/org/bukkit/Material.java
+++ b/src/main/java/org/bukkit/Material.java
@@ -4311,9 +4311,9 @@ public enum Material implements Keyed, net.kyori.adventure.translation.Translata
             } else {
                 this.ctor = null;
             }
-        } catch (NoSuchMethodException ex) {
+        } catch (final NoSuchMethodException ex) {
             throw new AssertionError(ex);
-        } catch (SecurityException ex) {
+        } catch (final SecurityException ex) {
             throw new AssertionError(ex);
         }
     }
@@ -4372,7 +4372,7 @@ public enum Material implements Keyed, net.kyori.adventure.translation.Translata
      */
     @NotNull
     @Deprecated
-    public Multimap<Attribute, AttributeModifier> getItemAttributes(@NotNull EquipmentSlot equipmentSlot) {
+    public Multimap<Attribute, AttributeModifier> getItemAttributes(@NotNull final EquipmentSlot equipmentSlot) {
         return Bukkit.getUnsafe().getItemAttributes(this, equipmentSlot);
     }
 
@@ -4453,7 +4453,7 @@ public enum Material implements Keyed, net.kyori.adventure.translation.Translata
      * @return new data instance
      */
     @NotNull
-    public BlockData createBlockData(@Nullable Consumer<BlockData> consumer) {
+    public BlockData createBlockData(@Nullable final Consumer<BlockData> consumer) {
         return Bukkit.createBlockData(this, consumer);
     }
 
@@ -4467,7 +4467,7 @@ public enum Material implements Keyed, net.kyori.adventure.translation.Translata
      * @throws IllegalArgumentException if the specified data is not valid
      */
     @NotNull
-    public BlockData createBlockData(@Nullable String data) throws IllegalArgumentException {
+    public BlockData createBlockData(@Nullable final String data) throws IllegalArgumentException {
         return Bukkit.createBlockData(this, data);
     }
 
@@ -4498,7 +4498,7 @@ public enum Material implements Keyed, net.kyori.adventure.translation.Translata
         Preconditions.checkArgument(legacy, "Cannot get new data of Modern Material");
         try {
             return ctor.newInstance(this, Byte.valueOf(raw));
-        } catch (InstantiationException ex) {
+        } catch (final InstantiationException ex) {
             final Throwable t = ex.getCause();
             if (t instanceof RuntimeException) {
                 throw (RuntimeException) t;
@@ -4507,7 +4507,7 @@ public enum Material implements Keyed, net.kyori.adventure.translation.Translata
                 throw (Error) t;
             }
             throw new AssertionError(t);
-        } catch (Throwable t) {
+        } catch (final Throwable t) {
             throw new AssertionError(t);
         }
     }
@@ -5620,13 +5620,13 @@ public enum Material implements Keyed, net.kyori.adventure.translation.Translata
      * @return Material if found, or null
      */
     @Nullable
-    public static Material getMaterial(@NotNull String name, boolean legacyName) {
+    public static Material getMaterial(@NotNull String name, final boolean legacyName) {
         if (legacyName) {
             if (!name.startsWith(LEGACY_PREFIX)) {
                 name = LEGACY_PREFIX + name;
             }
 
-            Material match = BY_NAME.get(name);
+            final Material match = BY_NAME.get(name);
             return Bukkit.getUnsafe().fromLegacy(match);
         }
 
@@ -5661,7 +5661,7 @@ public enum Material implements Keyed, net.kyori.adventure.translation.Translata
      * @return Material if found, or null
      */
     @Nullable
-    public static Material matchMaterial(@NotNull final String name, boolean legacyName) {
+    public static Material matchMaterial(@NotNull final String name, final boolean legacyName) {
         Preconditions.checkArgument(name != null, "Name cannot be null");
 
         String filtered = name;
@@ -5676,7 +5676,7 @@ public enum Material implements Keyed, net.kyori.adventure.translation.Translata
     }
 
     static {
-        for (Material material : values()) {
+        for (final Material material : values()) {
             BY_NAME.put(material.name(), material);
             material.isBlock = material.isBlock0(); // Paper
         }
@@ -10672,7 +10672,7 @@ public enum Material implements Keyed, net.kyori.adventure.translation.Translata
      * Attributes and modifiers, or an empty map if no attributes are set.
      */
     @NotNull
-    public Multimap<Attribute, AttributeModifier> getDefaultAttributeModifiers(@NotNull EquipmentSlot slot) {
+    public Multimap<Attribute, AttributeModifier> getDefaultAttributeModifiers(@NotNull final EquipmentSlot slot) {
         Preconditions.checkArgument(isItem(), "The Material is not an item!");
 
         return Bukkit.getUnsafe().getDefaultAttributeModifiers(this, slot);
diff --git a/src/main/java/org/bukkit/NamespacedKey.java b/src/main/java/org/bukkit/NamespacedKey.java
index 3a74d43ba4f0a0a38ebc271e4bd40405d9e85687..6c07fc5e1c9fbdbc51ba8e789c92946d6df0c6f6 100644
--- a/src/main/java/org/bukkit/NamespacedKey.java
+++ b/src/main/java/org/bukkit/NamespacedKey.java
@@ -47,14 +47,14 @@ public final class NamespacedKey implements net.kyori.adventure.key.Key, com.des
      * @param key key
      * @see #NamespacedKey(Plugin, String)
      */
-    public NamespacedKey(@NotNull String namespace, @NotNull String key) {
+    public NamespacedKey(@NotNull final String namespace, @NotNull final String key) {
         Preconditions.checkArgument(namespace != null && VALID_NAMESPACE.matcher(namespace).matches(), "Invalid namespace. Must be [a-z0-9._-]: %s", namespace);
         Preconditions.checkArgument(key != null && VALID_KEY.matcher(key).matches(), "Invalid key. Must be [a-z0-9/._-]: %s", key);
 
         this.namespace = namespace;
         this.key = key;
 
-        String string = toString();
+        final String string = toString();
         Preconditions.checkArgument(string.length() < 256, "NamespacedKey must be less than 256 characters", string);
     }
 
@@ -70,7 +70,7 @@ public final class NamespacedKey implements net.kyori.adventure.key.Key, com.des
      * @param plugin the plugin to use for the namespace
      * @param key the key to create
      */
-    public NamespacedKey(@NotNull Plugin plugin, @NotNull String key) {
+    public NamespacedKey(@NotNull final Plugin plugin, @NotNull final String key) {
         Preconditions.checkArgument(plugin != null, "Plugin cannot be null");
         Preconditions.checkArgument(key != null, "Key cannot be null");
 
@@ -81,7 +81,7 @@ public final class NamespacedKey implements net.kyori.adventure.key.Key, com.des
         Preconditions.checkArgument(VALID_NAMESPACE.matcher(this.namespace).matches(), "Invalid namespace. Must be [a-z0-9._-]: %s", this.namespace);
         Preconditions.checkArgument(VALID_KEY.matcher(this.key).matches(), "Invalid key. Must be [a-z0-9/._-]: %s", this.key);
 
-        String string = toString();
+        final String string = toString();
         Preconditions.checkArgument(string.length() < 256, "NamespacedKey must be less than 256 characters (%s)", string);
     }
 
@@ -106,7 +106,7 @@ public final class NamespacedKey implements net.kyori.adventure.key.Key, com.des
     }
 
     @Override
-    public boolean equals(@Nullable Object obj) {
+    public boolean equals(@Nullable final Object obj) {
         if (obj == null) {
             return false;
         }
@@ -141,7 +141,7 @@ public final class NamespacedKey implements net.kyori.adventure.key.Key, com.des
      * @return new key in the Minecraft namespace
      */
     @NotNull
-    public static NamespacedKey minecraft(@NotNull String key) {
+    public static NamespacedKey minecraft(@NotNull final String key) {
         return new NamespacedKey(MINECRAFT, key);
     }
 
@@ -170,17 +170,17 @@ public final class NamespacedKey implements net.kyori.adventure.key.Key, com.des
      * @see #fromString(String)
      */
     @Nullable
-    public static NamespacedKey fromString(@NotNull String string, @Nullable Plugin defaultNamespace) {
+    public static NamespacedKey fromString(@NotNull final String string, @Nullable final Plugin defaultNamespace) {
         Preconditions.checkArgument(string != null && !string.isEmpty(), "Input string must not be empty or null");
 
-        String[] components = string.split(":", 3);
+        final String[] components = string.split(":", 3);
         if (components.length > 2) {
             return null;
         }
 
-        String key = (components.length == 2) ? components[1] : "";
+        final String key = (components.length == 2) ? components[1] : "";
         if (components.length == 1) {
-            String value = components[0];
+            final String value = components[0];
             if (value.isEmpty() || !VALID_KEY.matcher(value).matches()) {
                 return null;
             }
@@ -190,7 +190,7 @@ public final class NamespacedKey implements net.kyori.adventure.key.Key, com.des
             return null;
         }
 
-        String namespace = components[0];
+        final String namespace = components[0];
         if (namespace.isEmpty()) {
             return (defaultNamespace != null) ? new NamespacedKey(defaultNamespace, key) : minecraft(key);
         }
@@ -213,7 +213,7 @@ public final class NamespacedKey implements net.kyori.adventure.key.Key, com.des
      * @see #fromString(String, Plugin)
      */
     @Nullable
-    public static NamespacedKey fromString(@NotNull String key) {
+    public static NamespacedKey fromString(@NotNull final String key) {
         return fromString(key, null);
     }
 
diff --git a/src/main/java/org/bukkit/Note.java b/src/main/java/org/bukkit/Note.java
index 7d02ad6c002595c249fa55770d2437127c36d729..499d354eaed10b21bcc1c0207bb03c698929561f 100644
--- a/src/main/java/org/bukkit/Note.java
+++ b/src/main/java/org/bukkit/Note.java
@@ -30,7 +30,7 @@ public class Note {
         /** The number of tones including sharped tones. */
         public static final byte TONES_COUNT = 12;
 
-        private Tone(int id, boolean sharpable) {
+        private Tone(final int id, final boolean sharpable) {
             this.id = (byte) (id % TONES_COUNT);
             this.sharpable = sharpable;
         }
@@ -56,8 +56,8 @@ public class Note {
          * @deprecated Magic value
          */
         @Deprecated
-        public byte getId(boolean sharped) {
-            byte id = (byte) (sharped && sharpable ? this.id + 1 : this.id);
+        public byte getId(final boolean sharped) {
+            final byte id = (byte) (sharped && sharpable ? this.id + 1 : this.id);
 
             return (byte) (id % TONES_COUNT);
         }
@@ -81,7 +81,7 @@ public class Note {
          * @deprecated Magic value
          */
         @Deprecated
-        public boolean isSharped(byte id) {
+        public boolean isSharped(final byte id) {
             if (id == getId(false)) {
                 return false;
             } else if (id == getId(true)) {
@@ -101,12 +101,12 @@ public class Note {
          */
         @Deprecated
         @Nullable
-        public static Tone getById(byte id) {
+        public static Tone getById(final byte id) {
             return BY_DATA.get(Byte.valueOf(id));
         }
 
         static {
-            for (Tone tone : values()) {
+            for (final Tone tone : values()) {
                 int id = tone.id % TONES_COUNT;
                 BY_DATA.put(Byte.valueOf((byte) id), tone);
 
@@ -126,7 +126,7 @@ public class Note {
      * @param note Internal note id. {@link #getId()} always return this
      *     value. The value has to be in the interval [0;&nbsp;24].
      */
-    public Note(int note) {
+    public Note(final int note) {
         Preconditions.checkArgument(note >= 0 && note <= 24, "The note value has to be between 0 and 24.");
 
         this.note = (byte) note;
@@ -140,7 +140,7 @@ public class Note {
      *     to be F#.
      * @param sharped Set if the tone is sharped (e.g. for F#).
      */
-    public Note(int octave, @NotNull Tone tone, boolean sharped) {
+    public Note(final int octave, @NotNull Tone tone, boolean sharped) {
         if (sharped && !tone.isSharpable()) {
             tone = Tone.values()[tone.ordinal() + 1];
             sharped = false;
@@ -160,7 +160,7 @@ public class Note {
      * @return The new note.
      */
     @NotNull
-    public static Note flat(int octave, @NotNull Tone tone) {
+    public static Note flat(final int octave, @NotNull Tone tone) {
         Preconditions.checkArgument(octave != 2, "Octave cannot be 2 for flats");
         tone = tone == Tone.G ? Tone.F : Tone.values()[tone.ordinal() - 1];
         return new Note(octave, tone, tone.isSharpable());
@@ -175,7 +175,7 @@ public class Note {
      * @return The new note.
      */
     @NotNull
-    public static Note sharp(int octave, @NotNull Tone tone) {
+    public static Note sharp(final int octave, @NotNull final Tone tone) {
         return new Note(octave, tone, true);
     }
 
@@ -187,7 +187,7 @@ public class Note {
      * @return The new note.
      */
     @NotNull
-    public static Note natural(int octave, @NotNull Tone tone) {
+    public static Note natural(final int octave, @NotNull final Tone tone) {
         Preconditions.checkArgument(octave != 2, "Octave cannot be 2 for naturals");
         return new Note(octave, tone, false);
     }
@@ -250,7 +250,7 @@ public class Note {
      * @return if this note is sharped.
      */
     public boolean isSharped() {
-        byte note = getToneByte();
+        final byte note = getToneByte();
         return Tone.getById(note).isSharped(note);
     }
 
@@ -263,14 +263,14 @@ public class Note {
     }
 
     @Override
-    public boolean equals(@Nullable Object obj) {
+    public boolean equals(@Nullable final Object obj) {
         if (this == obj)
             return true;
         if (obj == null)
             return false;
         if (getClass() != obj.getClass())
             return false;
-        Note other = (Note) obj;
+        final Note other = (Note) obj;
         if (note != other.note)
             return false;
         return true;
diff --git a/src/main/java/org/bukkit/OfflinePlayer.java b/src/main/java/org/bukkit/OfflinePlayer.java
index 69b50eee42e8c52063033705bd23a5ef5231ed83..c588531f98869b9eff9353a75850444b5a5d11da 100644
--- a/src/main/java/org/bukkit/OfflinePlayer.java
+++ b/src/main/java/org/bukkit/OfflinePlayer.java
@@ -67,7 +67,7 @@ public interface OfflinePlayer extends ServerOperator, AnimalTamer, Configuratio
      * @return Ban Entry
      */
     @NotNull
-    public default BanEntry banPlayer(@Nullable String reason) {
+    public default BanEntry banPlayer(@Nullable final String reason) {
         return banPlayer(reason, null, null);
     }
 
@@ -78,7 +78,7 @@ public interface OfflinePlayer extends ServerOperator, AnimalTamer, Configuratio
      * @return Ban Entry
      */
     @NotNull
-    public default BanEntry banPlayer(@Nullable String reason, @Nullable String source) {
+    public default BanEntry banPlayer(@Nullable final String reason, @Nullable final String source) {
         return banPlayer(reason, null, source);
     }
 
@@ -89,7 +89,7 @@ public interface OfflinePlayer extends ServerOperator, AnimalTamer, Configuratio
      * @return Ban Entry
      */
     @NotNull
-    public default BanEntry banPlayer(@Nullable String reason, @Nullable java.util.Date expires) {
+    public default BanEntry banPlayer(@Nullable final String reason, @Nullable final java.util.Date expires) {
         return banPlayer(reason, expires, null);
     }
 
@@ -101,12 +101,12 @@ public interface OfflinePlayer extends ServerOperator, AnimalTamer, Configuratio
      * @return Ban Entry
      */
     @NotNull
-    public default BanEntry banPlayer(@Nullable String reason, @Nullable java.util.Date expires, @Nullable String source) {
+    public default BanEntry banPlayer(@Nullable final String reason, @Nullable final java.util.Date expires, @Nullable final String source) {
         return banPlayer(reason, expires, source, true);
     }
     @NotNull
-    public default BanEntry banPlayer(@Nullable String reason, @Nullable java.util.Date expires, @Nullable String source, boolean kickIfOnline) {
-        BanEntry banEntry = Bukkit.getServer().getBanList(BanList.Type.NAME).addBan(getName(), reason, expires, source);
+    public default BanEntry banPlayer(@Nullable final String reason, @Nullable final java.util.Date expires, @Nullable final String source, final boolean kickIfOnline) {
+        final BanEntry banEntry = Bukkit.getServer().getBanList(BanList.Type.NAME).addBan(getName(), reason, expires, source);
         if (kickIfOnline && isOnline()) {
             getPlayer().kickPlayer(reason);
         }
diff --git a/src/main/java/org/bukkit/Particle.java b/src/main/java/org/bukkit/Particle.java
index 64928045973bba9107f38036f44effa1e63bca09..cd792c3bb04f9eeb8638e340d8c39e3104993792 100644
--- a/src/main/java/org/bukkit/Particle.java
+++ b/src/main/java/org/bukkit/Particle.java
@@ -147,7 +147,7 @@ public enum Particle {
         dataType = Void.class;
     }
 
-    Particle(/*@NotNull*/ Class<?> data) {
+    Particle(/*@NotNull*/ final Class<?> data) {
         dataType = data;
     }
 
@@ -180,7 +180,7 @@ public enum Particle {
         private final @NotNull Color color;
         private final float size;
 
-        public DustOptions(@NotNull Color color, float size) {
+        public DustOptions(@NotNull final Color color, final float size) {
             Preconditions.checkArgument(color != null, "color");
             this.color = color;
             this.size = size;
@@ -213,7 +213,7 @@ public enum Particle {
 
         private final @NotNull Color toColor;
 
-        public DustTransition(@NotNull Color fromColor, @NotNull Color toColor, float size) {
+        public DustTransition(@NotNull final Color fromColor, @NotNull final Color toColor, final float size) {
             super(fromColor, size);
 
             Preconditions.checkArgument(toColor != null, "toColor");
diff --git a/src/main/java/org/bukkit/RegionAccessor.java b/src/main/java/org/bukkit/RegionAccessor.java
index 39fa4c65e0f61450901662ff5c08d54a5d9841b2..e46090f34c78955539dfc7d87ab6545f48222388 100644
--- a/src/main/java/org/bukkit/RegionAccessor.java
+++ b/src/main/java/org/bukkit/RegionAccessor.java
@@ -335,27 +335,27 @@ public interface RegionAccessor extends Keyed { // Paper
      */
     @NotNull
     // Paper start
-    public default <T extends Entity> T spawn(@NotNull Location location, @NotNull Class<T> clazz, @Nullable Consumer<T> function) throws IllegalArgumentException {
+    public default <T extends Entity> T spawn(@NotNull final Location location, @NotNull final Class<T> clazz, @Nullable final Consumer<T> function) throws IllegalArgumentException {
         return spawn(location, clazz, CreatureSpawnEvent.SpawnReason.CUSTOM, function);
     }
 
     @NotNull
-    public default <T extends Entity> T spawn(@NotNull Location location, @NotNull Class<T> clazz, @NotNull CreatureSpawnEvent.SpawnReason reason) throws IllegalArgumentException {
+    public default <T extends Entity> T spawn(@NotNull final Location location, @NotNull final Class<T> clazz, @NotNull final CreatureSpawnEvent.SpawnReason reason) throws IllegalArgumentException {
         return spawn(location, clazz, reason, null);
     }
 
     @NotNull
-    public default <T extends Entity> T spawn(@NotNull Location location, @NotNull Class<T> clazz, @NotNull CreatureSpawnEvent.SpawnReason reason, @Nullable Consumer<T> function) throws IllegalArgumentException {
+    public default <T extends Entity> T spawn(@NotNull final Location location, @NotNull final Class<T> clazz, @NotNull final CreatureSpawnEvent.SpawnReason reason, @Nullable final Consumer<T> function) throws IllegalArgumentException {
         return spawn(location, clazz, function, reason);
     }
 
     @NotNull
-    public default Entity spawnEntity(@NotNull Location loc, @NotNull org.bukkit.entity.EntityType type, @NotNull CreatureSpawnEvent.SpawnReason reason) {
+    public default Entity spawnEntity(@NotNull final Location loc, @NotNull final org.bukkit.entity.EntityType type, @NotNull final CreatureSpawnEvent.SpawnReason reason) {
         return spawn(loc, (Class<Entity>) type.getEntityClass(), reason, null);
     }
 
     @NotNull
-    public default Entity spawnEntity(@NotNull Location loc, @NotNull org.bukkit.entity.EntityType type, @NotNull CreatureSpawnEvent.SpawnReason reason, @Nullable Consumer<Entity> function) {
+    public default Entity spawnEntity(@NotNull final Location loc, @NotNull final org.bukkit.entity.EntityType type, @NotNull final CreatureSpawnEvent.SpawnReason reason, @Nullable final Consumer<Entity> function) {
         return spawn(loc, (Class<Entity>) type.getEntityClass(), reason, function);
     }
 
diff --git a/src/main/java/org/bukkit/Registry.java b/src/main/java/org/bukkit/Registry.java
index 752c132fb69d2e4c4ced2739600cc994e06fdd57..b25792714461e6efc09def52420b85d969fb021d 100644
--- a/src/main/java/org/bukkit/Registry.java
+++ b/src/main/java/org/bukkit/Registry.java
@@ -39,7 +39,7 @@ public interface Registry<T extends Keyed> extends Iterable<T> {
 
         @Nullable
         @Override
-        public Advancement get(@NotNull NamespacedKey key) {
+        public Advancement get(@NotNull final NamespacedKey key) {
             return Bukkit.getAdvancement(key);
         }
 
@@ -77,7 +77,7 @@ public interface Registry<T extends Keyed> extends Iterable<T> {
 
         @Nullable
         @Override
-        public KeyedBossBar get(@NotNull NamespacedKey key) {
+        public KeyedBossBar get(@NotNull final NamespacedKey key) {
             return Bukkit.getBossBar(key);
         }
 
@@ -96,7 +96,7 @@ public interface Registry<T extends Keyed> extends Iterable<T> {
 
         @Nullable
         @Override
-        public Enchantment get(@NotNull NamespacedKey key) {
+        public Enchantment get(@NotNull final NamespacedKey key) {
             return Enchantment.getByKey(key);
         }
 
@@ -175,7 +175,7 @@ public interface Registry<T extends Keyed> extends Iterable<T> {
 
         @Nullable
         @Override
-        public MemoryKey get(@NotNull NamespacedKey key) {
+        public MemoryKey get(@NotNull final NamespacedKey key) {
             return MemoryKey.getByKey(key);
         }
     };
@@ -206,7 +206,7 @@ public interface Registry<T extends Keyed> extends Iterable<T> {
 
         @Nullable
         @Override
-        public GameEvent get(@NotNull NamespacedKey key) {
+        public GameEvent get(@NotNull final NamespacedKey key) {
             return GameEvent.getByKey(key);
         }
     };
@@ -225,7 +225,7 @@ public interface Registry<T extends Keyed> extends Iterable<T> {
 
         @Nullable
         @Override
-        public org.bukkit.potion.PotionEffectType get(@NotNull NamespacedKey key) {
+        public org.bukkit.potion.PotionEffectType get(@NotNull final NamespacedKey key) {
             return org.bukkit.potion.PotionEffectType.getByKey(key);
         }
 
@@ -250,14 +250,14 @@ public interface Registry<T extends Keyed> extends Iterable<T> {
 
         private final @NotNull Map<NamespacedKey, T> map;
 
-        protected SimpleRegistry(@NotNull Class<T> type) {
+        protected SimpleRegistry(@NotNull final Class<T> type) {
             this(type, Predicates.alwaysTrue());
         }
 
-        protected SimpleRegistry(@NotNull Class<T> type, @NotNull Predicate<T> predicate) {
-            ImmutableMap.Builder<NamespacedKey, T> builder = ImmutableMap.builder();
+        protected SimpleRegistry(@NotNull final Class<T> type, @NotNull final Predicate<T> predicate) {
+            final ImmutableMap.Builder<NamespacedKey, T> builder = ImmutableMap.builder();
 
-            for (T entry : type.getEnumConstants()) {
+            for (final T entry : type.getEnumConstants()) {
                 if (predicate.test(entry)) {
                     builder.put(entry.getKey(), entry);
                 }
@@ -268,7 +268,7 @@ public interface Registry<T extends Keyed> extends Iterable<T> {
 
         @Nullable
         @Override
-        public T get(@NotNull NamespacedKey key) {
+        public T get(@NotNull final NamespacedKey key) {
             return map.get(key);
         }
 
diff --git a/src/main/java/org/bukkit/SandstoneType.java b/src/main/java/org/bukkit/SandstoneType.java
index ca7624624ca0b47120753c623f8d84b8f1dd26ea..bf48d0ca9865920ee2b30f3f09968e96f753ef78 100644
--- a/src/main/java/org/bukkit/SandstoneType.java
+++ b/src/main/java/org/bukkit/SandstoneType.java
@@ -47,7 +47,7 @@ public enum SandstoneType {
     }
 
     static {
-        for (SandstoneType type : values()) {
+        for (final SandstoneType type : values()) {
             BY_DATA.put(Byte.valueOf(type.data), type);
         }
     }
diff --git a/src/main/java/org/bukkit/Server.java b/src/main/java/org/bukkit/Server.java
index 2204336d8800311b65e894739ab1b27273e7c6f2..e93b8f743f912544af0937fa71be7f552a0db46e 100644
--- a/src/main/java/org/bukkit/Server.java
+++ b/src/main/java/org/bukkit/Server.java
@@ -339,7 +339,7 @@ public interface Server extends PluginMessageRecipient, net.kyori.adventure.audi
      * @deprecated use {@code sendMessage} methods that accept {@link net.kyori.adventure.text.Component}
      */
     @Deprecated
-    public default void broadcast(@NotNull net.md_5.bungee.api.chat.BaseComponent component) {
+    public default void broadcast(@NotNull final net.md_5.bungee.api.chat.BaseComponent component) {
         spigot().broadcast(component);
     }
 
@@ -350,7 +350,7 @@ public interface Server extends PluginMessageRecipient, net.kyori.adventure.audi
      * @deprecated use {@code sendMessage} methods that accept {@link net.kyori.adventure.text.Component}
      */
     @Deprecated
-    public default void broadcast(@NotNull net.md_5.bungee.api.chat.BaseComponent... components) {
+    public default void broadcast(@NotNull final net.md_5.bungee.api.chat.BaseComponent... components) {
         spigot().broadcast(components);
     }
     // Paper end
@@ -1978,7 +1978,7 @@ public interface Server extends PluginMessageRecipient, net.kyori.adventure.audi
          * @deprecated use {@link #broadcast(net.kyori.adventure.text.Component)}
          */
         @Deprecated // Paper
-        public void broadcast(@NotNull net.md_5.bungee.api.chat.BaseComponent component) {
+        public void broadcast(@NotNull final net.md_5.bungee.api.chat.BaseComponent component) {
             throw new UnsupportedOperationException("Not supported yet.");
         }
 
@@ -1989,7 +1989,7 @@ public interface Server extends PluginMessageRecipient, net.kyori.adventure.audi
          * @deprecated use {@link #broadcast(net.kyori.adventure.text.Component)}
          */
         @Deprecated // Paper
-        public void broadcast(@NotNull net.md_5.bungee.api.chat.BaseComponent... components) {
+        public void broadcast(@NotNull final net.md_5.bungee.api.chat.BaseComponent... components) {
             throw new UnsupportedOperationException("Not supported yet.");
         }
 
diff --git a/src/main/java/org/bukkit/Sound.java b/src/main/java/org/bukkit/Sound.java
index 060a57f469e8175ad5d1d92d604e332d7bc29b84..fd784e5d1efe80b0dd2d9674f887a8e0d1a5eead 100644
--- a/src/main/java/org/bukkit/Sound.java
+++ b/src/main/java/org/bukkit/Sound.java
@@ -1407,7 +1407,7 @@ public enum Sound implements Keyed, net.kyori.adventure.sound.Sound.Type { // Pa
 
     private final @NotNull NamespacedKey key;
 
-    private Sound(@NotNull String key) {
+    private Sound(@NotNull final String key) {
         this.key = NamespacedKey.minecraft(key);
     }
 
diff --git a/src/main/java/org/bukkit/Statistic.java b/src/main/java/org/bukkit/Statistic.java
index d1a9398a75cd6b3bbb6ca3ff54be03c024489516..e0279bc540482044342cd6f6d090a923b10000cb 100644
--- a/src/main/java/org/bukkit/Statistic.java
+++ b/src/main/java/org/bukkit/Statistic.java
@@ -101,7 +101,7 @@ public enum Statistic implements Keyed {
         this(Type.UNTYPED);
     }
 
-    private Statistic(/*@NotNull*/ Type type) {
+    private Statistic(/*@NotNull*/ final Type type) {
         this.type = type;
         this.key = NamespacedKey.minecraft(name().toLowerCase(Locale.ROOT));
     }
diff --git a/src/main/java/org/bukkit/StructureType.java b/src/main/java/org/bukkit/StructureType.java
index 92a789748f81af4dca654993b784e2a3c05bcfa9..9f06a187f4af50305fe07f9847bdecd3f672c6e2 100644
--- a/src/main/java/org/bukkit/StructureType.java
+++ b/src/main/java/org/bukkit/StructureType.java
@@ -179,7 +179,7 @@ public final class StructureType implements Keyed {
      * when creating explorer maps. Use null to indicate this structure should
      * not be compatible with explorer maps.
      */
-    private StructureType(@NotNull String name, @Nullable MapCursor.Type mapIcon) {
+    private StructureType(@NotNull final String name, @Nullable final MapCursor.Type mapIcon) {
         Preconditions.checkArgument(!Strings.isNullOrEmpty(name), "Structure name cannot be empty");
         this.key = NamespacedKey.minecraft(name);
         this.mapCursor = mapIcon;
@@ -208,14 +208,14 @@ public final class StructureType implements Keyed {
     }
 
     @Override
-    public boolean equals(Object other) {
+    public boolean equals(final Object other) {
         if (this == other) {
             return true;
         }
         if (!(other instanceof StructureType)) {
             return false;
         }
-        StructureType that = (StructureType) other;
+        final StructureType that = (StructureType) other;
         return this.key.equals(that.key) && this.mapCursor == that.mapCursor;
     }
 
@@ -233,7 +233,7 @@ public final class StructureType implements Keyed {
     }
 
     @NotNull
-    private static <T extends StructureType> T register(@NotNull T type) {
+    private static <T extends StructureType> T register(@NotNull final T type) {
         Preconditions.checkNotNull(type, "Cannot register null StructureType.");
         Preconditions.checkArgument(!structureTypeMap.containsKey(type.getName()), "Cannot register same StructureType twice. %s", type.getName());
         StructureType.structureTypeMap.put(type.getName(), type);
diff --git a/src/main/java/org/bukkit/TreeSpecies.java b/src/main/java/org/bukkit/TreeSpecies.java
index 4899a84d77e92b339dd8b26d972a1ef9d9923836..0f557cfeddb1dac1c2a378ff36abadb426d7580d 100644
--- a/src/main/java/org/bukkit/TreeSpecies.java
+++ b/src/main/java/org/bukkit/TreeSpecies.java
@@ -71,7 +71,7 @@ public enum TreeSpecies {
     }
 
     static {
-        for (TreeSpecies species : values()) {
+        for (final TreeSpecies species : values()) {
             BY_DATA.put(Byte.valueOf(species.data), species);
         }
     }
diff --git a/src/main/java/org/bukkit/UnsafeValues.java b/src/main/java/org/bukkit/UnsafeValues.java
index c4c0d8f4a06b23e0c75ce81124a330bfe7ad7bf6..eab60f2aa59947135555f769829910ae2f5b1568 100644
--- a/src/main/java/org/bukkit/UnsafeValues.java
+++ b/src/main/java/org/bukkit/UnsafeValues.java
@@ -108,7 +108,7 @@ public interface UnsafeValues {
 
     boolean isSupportedApiVersion(String apiVersion);
 
-    static boolean isLegacyPlugin(org.bukkit.plugin.@NotNull Plugin plugin) {
+    static boolean isLegacyPlugin(final org.bukkit.plugin.@NotNull Plugin plugin) {
         return !Bukkit.getUnsafe().isSupportedApiVersion(plugin.getDescription().getAPIVersion());
     }
 
@@ -118,7 +118,7 @@ public interface UnsafeValues {
 
     byte[] serializeEntity(org.bukkit.entity.Entity entity);
 
-    default org.bukkit.entity.Entity deserializeEntity(byte[] data, World world) {
+    default org.bukkit.entity.Entity deserializeEntity(final byte[] data, final World world) {
         return deserializeEntity(data, world, false);
     }
 
diff --git a/src/main/java/org/bukkit/Vibration.java b/src/main/java/org/bukkit/Vibration.java
index 9b1143afb0553f618d7c115b0f18e91fb67277dc..bb3a8a78361df371d2b675bee24f91385f42089d 100644
--- a/src/main/java/org/bukkit/Vibration.java
+++ b/src/main/java/org/bukkit/Vibration.java
@@ -14,14 +14,14 @@ public class Vibration {
     private final int arrivalTime;
 
     // Paper start
-    public Vibration(@NotNull Destination destination, @NotNull int arrivalTime) {
+    public Vibration(@NotNull final Destination destination, @NotNull final int arrivalTime) {
         this.destination = destination;
         this.arrivalTime = arrivalTime;
         this.origin = new Location(null, 0, 0, 0); // Dummy origin because getter expects null
     }
 
     @Deprecated(forRemoval = true) // Paper end
-    public Vibration(@NotNull Location origin, @NotNull Destination destination, int arrivalTime) {
+    public Vibration(@NotNull final Location origin, @NotNull final Destination destination, final int arrivalTime) {
         this.origin = origin;
         this.destination = destination;
         this.arrivalTime = arrivalTime;
@@ -64,7 +64,7 @@ public class Vibration {
 
             private final @NotNull Entity entity;
 
-            public EntityDestination(@NotNull Entity entity) {
+            public EntityDestination(@NotNull final Entity entity) {
                 this.entity = entity;
             }
 
@@ -78,11 +78,11 @@ public class Vibration {
 
             private final @NotNull Location block;
 
-            public BlockDestination(@NotNull Location block) {
+            public BlockDestination(@NotNull final Location block) {
                 this.block = block;
             }
 
-            public BlockDestination(@NotNull Block block) {
+            public BlockDestination(@NotNull final Block block) {
                 this(block.getLocation());
             }
 
diff --git a/src/main/java/org/bukkit/Warning.java b/src/main/java/org/bukkit/Warning.java
index 3024468af4c073324e536c1cb26beffb1e09f3f4..1fbcc3abc3013681da7b0b04959904ee25187c39 100644
--- a/src/main/java/org/bukkit/Warning.java
+++ b/src/main/java/org/bukkit/Warning.java
@@ -66,7 +66,7 @@ public @interface Warning {
          *     specifies false for {@link Warning#value()}, true otherwise.
          *     </ul>
          */
-        public boolean printFor(@Nullable Warning warning) {
+        public boolean printFor(@Nullable final Warning warning) {
             if (Boolean.getBoolean("paper.alwaysPrintWarningState")) return true; // Paper
             if (this == DEFAULT) {
                 return warning == null || warning.value();
@@ -87,7 +87,7 @@ public @interface Warning {
             if (value == null) {
                 return DEFAULT;
             }
-            WarningState state = values.get(value.toLowerCase());
+            final WarningState state = values.get(value.toLowerCase());
             if (state == null) {
                 return DEFAULT;
             }
diff --git a/src/main/java/org/bukkit/World.java b/src/main/java/org/bukkit/World.java
index fb8a9fb965386b610d5c70742b17e77785df191f..8a4203822ba8f04c0fe48ddb709e3cd25c248663 100644
--- a/src/main/java/org/bukkit/World.java
+++ b/src/main/java/org/bukkit/World.java
@@ -105,10 +105,10 @@ public interface World extends RegionAccessor, WorldInfo, PluginMessageRecipient
      */
     @NotNull
     @Deprecated
-    public default Block getBlockAtKey(long key) {
-        int x = Block.getBlockKeyX(key);
-        int y = Block.getBlockKeyY(key);
-        int z = Block.getBlockKeyZ(key);
+    public default Block getBlockAtKey(final long key) {
+        final int x = Block.getBlockKeyX(key);
+        final int y = Block.getBlockKeyY(key);
+        final int z = Block.getBlockKeyZ(key);
         return getBlockAt(x, y, z);
     }
 
@@ -120,10 +120,10 @@ public interface World extends RegionAccessor, WorldInfo, PluginMessageRecipient
      * @see Block#getBlockKey(int, int, int)
      */
     @NotNull
-    public default Location getLocationAtKey(long key) {
-        int x = Block.getBlockKeyX(key);
-        int y = Block.getBlockKeyY(key);
-        int z = Block.getBlockKeyZ(key);
+    public default Location getLocationAtKey(final long key) {
+        final int x = Block.getBlockKeyX(key);
+        final int y = Block.getBlockKeyY(key);
+        final int z = Block.getBlockKeyZ(key);
         return new Location(this, x, y, z);
     }
     // Paper end
@@ -202,7 +202,7 @@ public interface World extends RegionAccessor, WorldInfo, PluginMessageRecipient
      * @see com.destroystokyo.paper.HeightmapType
      */
     @Deprecated
-    default int getHighestBlockYAt(@NotNull Location location, @NotNull com.destroystokyo.paper.HeightmapType heightmap) throws UnsupportedOperationException {
+    default int getHighestBlockYAt(@NotNull final Location location, @NotNull final com.destroystokyo.paper.HeightmapType heightmap) throws UnsupportedOperationException {
         return this.getHighestBlockYAt(location.getBlockX(), location.getBlockZ(), heightmap);
     }
 
@@ -222,7 +222,7 @@ public interface World extends RegionAccessor, WorldInfo, PluginMessageRecipient
      */
     @Deprecated
     @NotNull
-    default Block getHighestBlockAt(int x, int z, @NotNull com.destroystokyo.paper.HeightmapType heightmap) throws UnsupportedOperationException {
+    default Block getHighestBlockAt(final int x, final int z, @NotNull final com.destroystokyo.paper.HeightmapType heightmap) throws UnsupportedOperationException {
         return this.getBlockAt(x, this.getHighestBlockYAt(x, z, heightmap), z);
     }
 
@@ -242,7 +242,7 @@ public interface World extends RegionAccessor, WorldInfo, PluginMessageRecipient
      */
     @Deprecated
     @NotNull
-    default Block getHighestBlockAt(@NotNull Location location, @NotNull com.destroystokyo.paper.HeightmapType heightmap) throws UnsupportedOperationException {
+    default Block getHighestBlockAt(@NotNull final Location location, @NotNull final com.destroystokyo.paper.HeightmapType heightmap) throws UnsupportedOperationException {
         return this.getHighestBlockAt(location.getBlockX(), location.getBlockZ(), heightmap);
     }
     // Paper end
@@ -337,7 +337,7 @@ public interface World extends RegionAccessor, WorldInfo, PluginMessageRecipient
      * @return The chunk at the specified key
      */
     @NotNull
-    public default Chunk getChunkAt(long chunkKey) {
+    public default Chunk getChunkAt(final long chunkKey) {
         return getChunkAt((int) chunkKey, (int) (chunkKey >> 32));
     }
 
@@ -348,7 +348,7 @@ public interface World extends RegionAccessor, WorldInfo, PluginMessageRecipient
      * @param chunkKey The Chunk Key to look up the chunk by
      * @return true if the chunk has been generated, otherwise false
      */
-    public default boolean isChunkGenerated(long chunkKey) {
+    public default boolean isChunkGenerated(final long chunkKey) {
         return isChunkGenerated((int) chunkKey, (int) (chunkKey >> 32));
     }
     // Paper end
@@ -839,7 +839,7 @@ public interface World extends RegionAccessor, WorldInfo, PluginMessageRecipient
      * @return the collection of entities near location. This will always be a non-null collection.
      */
     @NotNull
-    public default Collection<LivingEntity> getNearbyLivingEntities(@NotNull Location loc, double radius) {
+    public default Collection<LivingEntity> getNearbyLivingEntities(@NotNull final Location loc, final double radius) {
         return getNearbyEntitiesByType(org.bukkit.entity.LivingEntity.class, loc, radius, radius, radius);
     }
 
@@ -851,7 +851,7 @@ public interface World extends RegionAccessor, WorldInfo, PluginMessageRecipient
      * @return the collection of entities near location. This will always be a non-null collection.
      */
     @NotNull
-    public default Collection<LivingEntity> getNearbyLivingEntities(@NotNull Location loc, double xzRadius, double yRadius) {
+    public default Collection<LivingEntity> getNearbyLivingEntities(@NotNull final Location loc, final double xzRadius, final double yRadius) {
         return getNearbyEntitiesByType(org.bukkit.entity.LivingEntity.class, loc, xzRadius, yRadius, xzRadius);
     }
 
@@ -864,7 +864,7 @@ public interface World extends RegionAccessor, WorldInfo, PluginMessageRecipient
      * @return the collection of entities near location. This will always be a non-null collection.
      */
     @NotNull
-    public default Collection<LivingEntity> getNearbyLivingEntities(@NotNull Location loc, double xRadius, double yRadius, double zRadius) {
+    public default Collection<LivingEntity> getNearbyLivingEntities(@NotNull final Location loc, final double xRadius, final double yRadius, final double zRadius) {
         return getNearbyEntitiesByType(org.bukkit.entity.LivingEntity.class, loc, xRadius, yRadius, zRadius);
     }
 
@@ -876,7 +876,7 @@ public interface World extends RegionAccessor, WorldInfo, PluginMessageRecipient
      * @return the collection of living entities near location. This will always be a non-null collection
      */
     @NotNull
-    public default Collection<LivingEntity> getNearbyLivingEntities(@NotNull Location loc, double radius, @Nullable Predicate<LivingEntity> predicate) {
+    public default Collection<LivingEntity> getNearbyLivingEntities(@NotNull final Location loc, final double radius, @Nullable final Predicate<LivingEntity> predicate) {
         return getNearbyEntitiesByType(org.bukkit.entity.LivingEntity.class, loc, radius, radius, radius, predicate);
     }
 
@@ -889,7 +889,7 @@ public interface World extends RegionAccessor, WorldInfo, PluginMessageRecipient
      * @return the collection of living entities near location. This will always be a non-null collection
      */
     @NotNull
-    public default Collection<LivingEntity> getNearbyLivingEntities(@NotNull Location loc, double xzRadius, double yRadius, @Nullable Predicate<LivingEntity> predicate) {
+    public default Collection<LivingEntity> getNearbyLivingEntities(@NotNull final Location loc, final double xzRadius, final double yRadius, @Nullable final Predicate<LivingEntity> predicate) {
         return getNearbyEntitiesByType(org.bukkit.entity.LivingEntity.class, loc, xzRadius, yRadius, xzRadius, predicate);
     }
 
@@ -903,7 +903,7 @@ public interface World extends RegionAccessor, WorldInfo, PluginMessageRecipient
      * @return the collection of living entities near location. This will always be a non-null collection.
      */
     @NotNull
-    public default Collection<LivingEntity> getNearbyLivingEntities(@NotNull Location loc, double xRadius, double yRadius, double zRadius, @Nullable Predicate<LivingEntity> predicate) {
+    public default Collection<LivingEntity> getNearbyLivingEntities(@NotNull final Location loc, final double xRadius, final double yRadius, final double zRadius, @Nullable final Predicate<LivingEntity> predicate) {
         return getNearbyEntitiesByType(org.bukkit.entity.LivingEntity.class, loc, xRadius, yRadius, zRadius, predicate);
     }
 
@@ -914,7 +914,7 @@ public interface World extends RegionAccessor, WorldInfo, PluginMessageRecipient
      * @return the collection of living entities near location. This will always be a non-null collection.
      */
     @NotNull
-    public default Collection<Player> getNearbyPlayers(@NotNull Location loc, double radius) {
+    public default Collection<Player> getNearbyPlayers(@NotNull final Location loc, final double radius) {
         return getNearbyEntitiesByType(org.bukkit.entity.Player.class, loc, radius, radius, radius);
     }
 
@@ -926,7 +926,7 @@ public interface World extends RegionAccessor, WorldInfo, PluginMessageRecipient
      * @return the collection of living entities near location. This will always be a non-null collection.
      */
     @NotNull
-    public default Collection<Player> getNearbyPlayers(@NotNull Location loc, double xzRadius, double yRadius) {
+    public default Collection<Player> getNearbyPlayers(@NotNull final Location loc, final double xzRadius, final double yRadius) {
         return getNearbyEntitiesByType(org.bukkit.entity.Player.class, loc, xzRadius, yRadius, xzRadius);
     }
 
@@ -939,7 +939,7 @@ public interface World extends RegionAccessor, WorldInfo, PluginMessageRecipient
      * @return the collection of players near location. This will always be a non-null collection.
      */
     @NotNull
-    public default Collection<Player> getNearbyPlayers(@NotNull Location loc, double xRadius, double yRadius, double zRadius) {
+    public default Collection<Player> getNearbyPlayers(@NotNull final Location loc, final double xRadius, final double yRadius, final double zRadius) {
         return getNearbyEntitiesByType(org.bukkit.entity.Player.class, loc, xRadius, yRadius, zRadius);
     }
 
@@ -951,7 +951,7 @@ public interface World extends RegionAccessor, WorldInfo, PluginMessageRecipient
      * @return the collection of players near location. This will always be a non-null collection.
      */
     @NotNull
-    public default Collection<Player> getNearbyPlayers(@NotNull Location loc, double radius, @Nullable Predicate<Player> predicate) {
+    public default Collection<Player> getNearbyPlayers(@NotNull final Location loc, final double radius, @Nullable final Predicate<Player> predicate) {
         return getNearbyEntitiesByType(org.bukkit.entity.Player.class, loc, radius, radius, radius, predicate);
     }
 
@@ -964,7 +964,7 @@ public interface World extends RegionAccessor, WorldInfo, PluginMessageRecipient
      * @return the collection of players near location. This will always be a non-null collection.
      */
     @NotNull
-    public default Collection<Player> getNearbyPlayers(@NotNull Location loc, double xzRadius, double yRadius, @Nullable Predicate<Player> predicate) {
+    public default Collection<Player> getNearbyPlayers(@NotNull final Location loc, final double xzRadius, final double yRadius, @Nullable final Predicate<Player> predicate) {
         return getNearbyEntitiesByType(org.bukkit.entity.Player.class, loc, xzRadius, yRadius, xzRadius, predicate);
     }
 
@@ -978,7 +978,7 @@ public interface World extends RegionAccessor, WorldInfo, PluginMessageRecipient
      * @return the collection of players near location. This will always be a non-null collection.
      */
     @NotNull
-    public default Collection<Player> getNearbyPlayers(@NotNull Location loc, double xRadius, double yRadius, double zRadius, @Nullable Predicate<Player> predicate) {
+    public default Collection<Player> getNearbyPlayers(@NotNull final Location loc, final double xRadius, final double yRadius, final double zRadius, @Nullable final Predicate<Player> predicate) {
         return getNearbyEntitiesByType(org.bukkit.entity.Player.class, loc, xRadius, yRadius, zRadius, predicate);
     }
 
@@ -991,7 +991,7 @@ public interface World extends RegionAccessor, WorldInfo, PluginMessageRecipient
      * @return the collection of entities near location. This will always be a non-null collection.
      */
     @NotNull
-    public default <T extends Entity> Collection<T> getNearbyEntitiesByType(@Nullable Class<? extends T> clazz, @NotNull Location loc, double radius) {
+    public default <T extends Entity> Collection<T> getNearbyEntitiesByType(@Nullable final Class<? extends T> clazz, @NotNull final Location loc, final double radius) {
         return getNearbyEntitiesByType(clazz, loc, radius, radius, radius, null);
     }
 
@@ -1005,7 +1005,7 @@ public interface World extends RegionAccessor, WorldInfo, PluginMessageRecipient
      * @return the collection of entities near location. This will always be a non-null collection.
      */
     @NotNull
-    public default <T extends Entity> Collection<T> getNearbyEntitiesByType(@Nullable Class<? extends T> clazz, @NotNull Location loc, double xzRadius, double yRadius) {
+    public default <T extends Entity> Collection<T> getNearbyEntitiesByType(@Nullable final Class<? extends T> clazz, @NotNull final Location loc, final double xzRadius, final double yRadius) {
         return getNearbyEntitiesByType(clazz, loc, xzRadius, yRadius, xzRadius, null);
     }
 
@@ -1020,7 +1020,7 @@ public interface World extends RegionAccessor, WorldInfo, PluginMessageRecipient
      * @return the collection of entities near location. This will always be a non-null collection.
      */
     @NotNull
-    public default <T extends Entity> Collection<T> getNearbyEntitiesByType(@Nullable Class<? extends T> clazz, @NotNull Location loc, double xRadius, double yRadius, double zRadius) {
+    public default <T extends Entity> Collection<T> getNearbyEntitiesByType(@Nullable final Class<? extends T> clazz, @NotNull final Location loc, final double xRadius, final double yRadius, final double zRadius) {
         return getNearbyEntitiesByType(clazz, loc, xRadius, yRadius, zRadius, null);
     }
 
@@ -1034,7 +1034,7 @@ public interface World extends RegionAccessor, WorldInfo, PluginMessageRecipient
      * @return the collection of entities near location. This will always be a non-null collection.
      */
     @NotNull
-    public default <T extends Entity> Collection<T> getNearbyEntitiesByType(@Nullable Class<? extends T> clazz, @NotNull Location loc, double radius, @Nullable Predicate<T> predicate) {
+    public default <T extends Entity> Collection<T> getNearbyEntitiesByType(@Nullable final Class<? extends T> clazz, @NotNull final Location loc, final double radius, @Nullable final Predicate<T> predicate) {
         return getNearbyEntitiesByType(clazz, loc, radius, radius, radius, predicate);
     }
 
@@ -1049,7 +1049,7 @@ public interface World extends RegionAccessor, WorldInfo, PluginMessageRecipient
      * @return the collection of entities near location. This will always be a non-null collection.
      */
     @NotNull
-    public default <T extends Entity> Collection<T> getNearbyEntitiesByType(@Nullable Class<? extends T> clazz, @NotNull Location loc, double xzRadius, double yRadius, @Nullable Predicate<T> predicate) {
+    public default <T extends Entity> Collection<T> getNearbyEntitiesByType(@Nullable final Class<? extends T> clazz, @NotNull final Location loc, final double xzRadius, final double yRadius, @Nullable final Predicate<T> predicate) {
         return getNearbyEntitiesByType(clazz, loc, xzRadius, yRadius, xzRadius, predicate);
     }
 
@@ -1065,12 +1065,12 @@ public interface World extends RegionAccessor, WorldInfo, PluginMessageRecipient
       * @return the collection of entities near location. This will always be a non-null collection.
       */
      @NotNull
-    public default <T extends Entity> Collection<T> getNearbyEntitiesByType(@Nullable Class<? extends Entity> clazz, @NotNull Location loc, double xRadius, double yRadius, double zRadius, @Nullable Predicate<T> predicate) {
+    public default <T extends Entity> Collection<T> getNearbyEntitiesByType(@Nullable Class<? extends Entity> clazz, @NotNull final Location loc, final double xRadius, final double yRadius, final double zRadius, @Nullable final Predicate<T> predicate) {
         if (clazz == null) {
             clazz = Entity.class;
         }
-        List<T> nearby = new ArrayList<>();
-        for (Entity bukkitEntity : getNearbyEntities(loc, xRadius, yRadius, zRadius)) {
+        final List<T> nearby = new ArrayList<>();
+        for (final Entity bukkitEntity : getNearbyEntities(loc, xRadius, yRadius, zRadius)) {
             //noinspection unchecked
             if (clazz.isAssignableFrom(bukkitEntity.getClass()) && (predicate == null || predicate.test((T) bukkitEntity))) {
                 //noinspection unchecked
@@ -1101,7 +1101,7 @@ public interface World extends RegionAccessor, WorldInfo, PluginMessageRecipient
 
         // backwards compat to old api
         @Override
-        default void accept(@NotNull Chunk chunk) {
+        default void accept(@NotNull final Chunk chunk) {
             onLoad(chunk);
         }
     }
@@ -1126,7 +1126,7 @@ public interface World extends RegionAccessor, WorldInfo, PluginMessageRecipient
      *           will be executed synchronously
      */
     @Deprecated
-    public default void getChunkAtAsync(int x, int z, @NotNull ChunkLoadCallback cb) {
+    public default void getChunkAtAsync(final int x, final int z, @NotNull final ChunkLoadCallback cb) {
         getChunkAtAsync(x, z, true).thenAccept(cb::onLoad).exceptionally((ex) -> {
             Bukkit.getLogger().log(java.util.logging.Level.WARNING, "Exception in chunk load callback", ex);
             return null;
@@ -1152,7 +1152,7 @@ public interface World extends RegionAccessor, WorldInfo, PluginMessageRecipient
      *           will be executed synchronously
      */
     @Deprecated
-    public default void getChunkAtAsync(@NotNull Location loc, @NotNull ChunkLoadCallback cb) {
+    public default void getChunkAtAsync(@NotNull final Location loc, @NotNull final ChunkLoadCallback cb) {
         getChunkAtAsync(loc, true).thenAccept(cb::onLoad).exceptionally((ex) -> {
             Bukkit.getLogger().log(java.util.logging.Level.WARNING, "Exception in chunk load callback", ex);
             return null;
@@ -1178,7 +1178,7 @@ public interface World extends RegionAccessor, WorldInfo, PluginMessageRecipient
      *           will be executed synchronously
      */
     @Deprecated
-    public default void getChunkAtAsync(@NotNull Block block, @NotNull ChunkLoadCallback cb) {
+    public default void getChunkAtAsync(@NotNull final Block block, @NotNull final ChunkLoadCallback cb) {
         getChunkAtAsync(block, true).thenAccept(cb::onLoad).exceptionally((ex) -> {
             Bukkit.getLogger().log(java.util.logging.Level.WARNING, "Exception in chunk load callback", ex);
             return null;
@@ -1203,7 +1203,7 @@ public interface World extends RegionAccessor, WorldInfo, PluginMessageRecipient
      * @param cb Callback to receive the chunk when it is loaded.
      *           will be executed synchronously
      */
-    public default void getChunkAtAsync(int x, int z, @NotNull java.util.function.Consumer<Chunk> cb) {
+    public default void getChunkAtAsync(final int x, final int z, @NotNull final java.util.function.Consumer<Chunk> cb) {
         getChunkAtAsync(x, z, true).thenAccept(cb).exceptionally((ex) -> {
             Bukkit.getLogger().log(java.util.logging.Level.WARNING, "Exception in chunk load callback", ex);
             return null;
@@ -1229,7 +1229,7 @@ public interface World extends RegionAccessor, WorldInfo, PluginMessageRecipient
      * @param cb Callback to receive the chunk when it is loaded.
      *           will be executed synchronously
      */
-    public default void getChunkAtAsync(int x, int z, boolean gen, @NotNull java.util.function.Consumer<Chunk> cb) {
+    public default void getChunkAtAsync(final int x, final int z, final boolean gen, @NotNull final java.util.function.Consumer<Chunk> cb) {
         getChunkAtAsync(x, z, gen).thenAccept(cb).exceptionally((ex) -> {
             Bukkit.getLogger().log(java.util.logging.Level.WARNING, "Exception in chunk load callback", ex);
             return null;
@@ -1253,7 +1253,7 @@ public interface World extends RegionAccessor, WorldInfo, PluginMessageRecipient
      * @param cb Callback to receive the chunk when it is loaded.
      *           will be executed synchronously
      */
-    public default void getChunkAtAsync(@NotNull Location loc, @NotNull java.util.function.Consumer<Chunk> cb) {
+    public default void getChunkAtAsync(@NotNull final Location loc, @NotNull final java.util.function.Consumer<Chunk> cb) {
         getChunkAtAsync((int)Math.floor(loc.getX()) >> 4, (int)Math.floor(loc.getZ()) >> 4, true, cb);
     }
 
@@ -1275,7 +1275,7 @@ public interface World extends RegionAccessor, WorldInfo, PluginMessageRecipient
      * @param cb Callback to receive the chunk when it is loaded.
      *           will be executed synchronously
      */
-    public default void getChunkAtAsync(@NotNull Location loc, boolean gen, @NotNull java.util.function.Consumer<Chunk> cb) {
+    public default void getChunkAtAsync(@NotNull final Location loc, final boolean gen, @NotNull final java.util.function.Consumer<Chunk> cb) {
         getChunkAtAsync((int)Math.floor(loc.getX()) >> 4, (int)Math.floor(loc.getZ()) >> 4, gen, cb);
     }
 
@@ -1296,7 +1296,7 @@ public interface World extends RegionAccessor, WorldInfo, PluginMessageRecipient
      * @param cb Callback to receive the chunk when it is loaded.
      *           will be executed synchronously
      */
-    public default void getChunkAtAsync(@NotNull Block block, @NotNull java.util.function.Consumer<Chunk> cb) {
+    public default void getChunkAtAsync(@NotNull final Block block, @NotNull final java.util.function.Consumer<Chunk> cb) {
         getChunkAtAsync(block.getX() >> 4, block.getZ() >> 4, true, cb);
     }
 
@@ -1318,7 +1318,7 @@ public interface World extends RegionAccessor, WorldInfo, PluginMessageRecipient
      * @param cb Callback to receive the chunk when it is loaded.
      *           will be executed synchronously
      */
-    public default void getChunkAtAsync(@NotNull Block block, boolean gen, @NotNull java.util.function.Consumer<Chunk> cb) {
+    public default void getChunkAtAsync(@NotNull final Block block, final boolean gen, @NotNull final java.util.function.Consumer<Chunk> cb) {
         getChunkAtAsync(block.getX() >> 4, block.getZ() >> 4, gen, cb);
     }
 
@@ -1338,7 +1338,7 @@ public interface World extends RegionAccessor, WorldInfo, PluginMessageRecipient
      * @return Future that will resolve when the chunk is loaded
      */
     @NotNull
-    public default java.util.concurrent.CompletableFuture<Chunk> getChunkAtAsync(@NotNull Location loc) {
+    public default java.util.concurrent.CompletableFuture<Chunk> getChunkAtAsync(@NotNull final Location loc) {
         return getChunkAtAsync((int)Math.floor(loc.getX()) >> 4, (int)Math.floor(loc.getZ()) >> 4, true);
     }
 
@@ -1359,7 +1359,7 @@ public interface World extends RegionAccessor, WorldInfo, PluginMessageRecipient
      * @return Future that will resolve when the chunk is loaded
      */
     @NotNull
-    public default java.util.concurrent.CompletableFuture<Chunk> getChunkAtAsync(@NotNull Location loc, boolean gen) {
+    public default java.util.concurrent.CompletableFuture<Chunk> getChunkAtAsync(@NotNull final Location loc, final boolean gen) {
         return getChunkAtAsync((int)Math.floor(loc.getX()) >> 4, (int)Math.floor(loc.getZ()) >> 4, gen);
     }
 
@@ -1379,7 +1379,7 @@ public interface World extends RegionAccessor, WorldInfo, PluginMessageRecipient
      * @return Future that will resolve when the chunk is loaded
      */
     @NotNull
-    public default java.util.concurrent.CompletableFuture<Chunk> getChunkAtAsync(@NotNull Block block) {
+    public default java.util.concurrent.CompletableFuture<Chunk> getChunkAtAsync(@NotNull final Block block) {
         return getChunkAtAsync(block.getX() >> 4, block.getZ() >> 4, true);
     }
 
@@ -1400,7 +1400,7 @@ public interface World extends RegionAccessor, WorldInfo, PluginMessageRecipient
      * @return Future that will resolve when the chunk is loaded
      */
     @NotNull
-    public default java.util.concurrent.CompletableFuture<Chunk> getChunkAtAsync(@NotNull Block block, boolean gen) {
+    public default java.util.concurrent.CompletableFuture<Chunk> getChunkAtAsync(@NotNull final Block block, final boolean gen) {
         return getChunkAtAsync(block.getX() >> 4, block.getZ() >> 4, gen);
     }
 
@@ -1422,7 +1422,7 @@ public interface World extends RegionAccessor, WorldInfo, PluginMessageRecipient
      * @return Future that will resolve when the chunk is loaded
      */
     @NotNull
-    public default java.util.concurrent.CompletableFuture<Chunk> getChunkAtAsync(int x, int z) {
+    public default java.util.concurrent.CompletableFuture<Chunk> getChunkAtAsync(final int x, final int z) {
         return getChunkAtAsync(x, z, true);
     }
 
@@ -1445,7 +1445,7 @@ public interface World extends RegionAccessor, WorldInfo, PluginMessageRecipient
      * @return Future that will resolve when the chunk is loaded
      */
     @NotNull
-    public default java.util.concurrent.CompletableFuture<Chunk> getChunkAtAsync(int x, int z, boolean gen) {
+    public default java.util.concurrent.CompletableFuture<Chunk> getChunkAtAsync(final int x, final int z, final boolean gen) {
         return getChunkAtAsync(x, z, gen, false);
     }
 
@@ -1465,7 +1465,7 @@ public interface World extends RegionAccessor, WorldInfo, PluginMessageRecipient
      * @return Future that will resolve when the chunk is loaded
      */
     @NotNull
-    public default java.util.concurrent.CompletableFuture<Chunk> getChunkAtAsyncUrgently(@NotNull Location loc) {
+    public default java.util.concurrent.CompletableFuture<Chunk> getChunkAtAsyncUrgently(@NotNull final Location loc) {
         return getChunkAtAsync((int)Math.floor(loc.getX()) >> 4, (int)Math.floor(loc.getZ()) >> 4, true, true);
     }
 
@@ -1486,7 +1486,7 @@ public interface World extends RegionAccessor, WorldInfo, PluginMessageRecipient
      * @return Future that will resolve when the chunk is loaded
      */
     @NotNull
-    public default java.util.concurrent.CompletableFuture<Chunk> getChunkAtAsyncUrgently(@NotNull Location loc, boolean gen) {
+    public default java.util.concurrent.CompletableFuture<Chunk> getChunkAtAsyncUrgently(@NotNull final Location loc, final boolean gen) {
         return getChunkAtAsync((int)Math.floor(loc.getX()) >> 4, (int)Math.floor(loc.getZ()) >> 4, gen, true);
     }
 
@@ -1506,7 +1506,7 @@ public interface World extends RegionAccessor, WorldInfo, PluginMessageRecipient
      * @return Future that will resolve when the chunk is loaded
      */
     @NotNull
-    public default java.util.concurrent.CompletableFuture<Chunk> getChunkAtAsyncUrgently(@NotNull Block block) {
+    public default java.util.concurrent.CompletableFuture<Chunk> getChunkAtAsyncUrgently(@NotNull final Block block) {
         return getChunkAtAsync(block.getX() >> 4, block.getZ() >> 4, true, true);
     }
 
@@ -1527,7 +1527,7 @@ public interface World extends RegionAccessor, WorldInfo, PluginMessageRecipient
      * @return Future that will resolve when the chunk is loaded
      */
     @NotNull
-    public default java.util.concurrent.CompletableFuture<Chunk> getChunkAtAsyncUrgently(@NotNull Block block, boolean gen) {
+    public default java.util.concurrent.CompletableFuture<Chunk> getChunkAtAsyncUrgently(@NotNull final Block block, final boolean gen) {
         return getChunkAtAsync(block.getX() >> 4, block.getZ() >> 4, gen, true);
     }
 
@@ -1549,7 +1549,7 @@ public interface World extends RegionAccessor, WorldInfo, PluginMessageRecipient
      * @return Future that will resolve when the chunk is loaded
      */
     @NotNull
-    public default java.util.concurrent.CompletableFuture<Chunk> getChunkAtAsyncUrgently(int x, int z) {
+    public default java.util.concurrent.CompletableFuture<Chunk> getChunkAtAsyncUrgently(final int x, final int z) {
         return getChunkAtAsync(x, z, true, true);
     }
 
@@ -2118,7 +2118,7 @@ public interface World extends RegionAccessor, WorldInfo, PluginMessageRecipient
      * @param setFire Whether or not to set blocks on fire
      * @return false if explosion was canceled, otherwise true
      */
-    public default boolean createExplosion(@Nullable Entity source, @NotNull Location loc, float power, boolean setFire) {
+    public default boolean createExplosion(@Nullable final Entity source, @NotNull final Location loc, final float power, final boolean setFire) {
         return createExplosion(source, loc, power, setFire, true);
     }
     /**
@@ -2130,7 +2130,7 @@ public interface World extends RegionAccessor, WorldInfo, PluginMessageRecipient
      * @param power The power of explosion, where 4F is TNT
      * @return false if explosion was canceled, otherwise true
      */
-    public default boolean createExplosion(@Nullable Entity source, @NotNull Location loc, float power) {
+    public default boolean createExplosion(@Nullable final Entity source, @NotNull final Location loc, final float power) {
         return createExplosion(source, loc, power, true, true);
     }
     /**
@@ -2143,7 +2143,7 @@ public interface World extends RegionAccessor, WorldInfo, PluginMessageRecipient
      * @param breakBlocks Whether or not to have blocks be destroyed
      * @return false if explosion was canceled, otherwise true
      */
-    public default boolean createExplosion(@NotNull Entity source, float power, boolean setFire, boolean breakBlocks) {
+    public default boolean createExplosion(@NotNull final Entity source, final float power, final boolean setFire, final boolean breakBlocks) {
         return createExplosion(source, source.getLocation(), power, setFire, breakBlocks);
     }
     /**
@@ -2157,7 +2157,7 @@ public interface World extends RegionAccessor, WorldInfo, PluginMessageRecipient
      * @param setFire Whether or not to set blocks on fire
      * @return false if explosion was canceled, otherwise true
      */
-    public default boolean createExplosion(@NotNull Entity source, float power, boolean setFire) {
+    public default boolean createExplosion(@NotNull final Entity source, final float power, final boolean setFire) {
         return createExplosion(source, source.getLocation(), power, setFire, true);
     }
 
@@ -2169,7 +2169,7 @@ public interface World extends RegionAccessor, WorldInfo, PluginMessageRecipient
      * @param power The power of explosion, where 4F is TNT
      * @return false if explosion was canceled, otherwise true
      */
-    public default boolean createExplosion(@NotNull Entity source, float power) {
+    public default boolean createExplosion(@NotNull final Entity source, final float power) {
         return createExplosion(source, source.getLocation(), power, true, true);
     }
     // Paper end
@@ -3539,7 +3539,7 @@ public interface World extends RegionAccessor, WorldInfo, PluginMessageRecipient
      * @param data the data to use for the particle or null,
      *             the type of this depends on {@link Particle#getDataType()}
      */
-    public default <T> void spawnParticle(@NotNull Particle particle, double x, double y, double z, int count, double offsetX, double offsetY, double offsetZ, double extra, @Nullable T data) { spawnParticle(particle, null, null, x, y, z, count, offsetX, offsetY, offsetZ, extra, data, true); }// Paper start - Expand Particle API
+    public default <T> void spawnParticle(@NotNull final Particle particle, final double x, final double y, final double z, final int count, final double offsetX, final double offsetY, final double offsetZ, final double extra, @Nullable final T data) { spawnParticle(particle, null, null, x, y, z, count, offsetX, offsetY, offsetZ, extra, data, true); }// Paper start - Expand Particle API
     /**
      * Spawns the particle (the number of times specified by count)
      * at the target location. The position of each particle will be
@@ -3562,7 +3562,7 @@ public interface World extends RegionAccessor, WorldInfo, PluginMessageRecipient
      *             the type of this depends on {@link Particle#getDataType()}
      * @param <T> Type
      */
-    public default <T> void spawnParticle(@NotNull Particle particle, @Nullable List<Player> receivers, @NotNull Player source, double x, double y, double z, int count, double offsetX, double offsetY, double offsetZ, double extra, @Nullable T data) { spawnParticle(particle, receivers, source, x, y, z, count, offsetX, offsetY, offsetZ, extra, data, true); }
+    public default <T> void spawnParticle(@NotNull final Particle particle, @Nullable final List<Player> receivers, @NotNull final Player source, final double x, final double y, final double z, final int count, final double offsetX, final double offsetY, final double offsetZ, final double extra, @Nullable final T data) { spawnParticle(particle, receivers, source, x, y, z, count, offsetX, offsetY, offsetZ, extra, data, true); }
     /**
      * Spawns the particle (the number of times specified by count)
      * at the target location. The position of each particle will be
@@ -3930,7 +3930,7 @@ public interface World extends RegionAccessor, WorldInfo, PluginMessageRecipient
          * @return The lightning entity.
          */
         @NotNull
-        public LightningStrike strikeLightning(@NotNull Location loc, boolean isSilent) {
+        public LightningStrike strikeLightning(@NotNull final Location loc, final boolean isSilent) {
             throw new UnsupportedOperationException("Not supported yet.");
         }
 
@@ -3942,7 +3942,7 @@ public interface World extends RegionAccessor, WorldInfo, PluginMessageRecipient
          * @return The lightning entity.
          */
         @NotNull
-        public LightningStrike strikeLightningEffect(@NotNull Location loc, boolean isSilent) {
+        public LightningStrike strikeLightningEffect(@NotNull final Location loc, final boolean isSilent) {
             throw new UnsupportedOperationException("Not supported yet.");
         }
     }
@@ -4009,7 +4009,7 @@ public interface World extends RegionAccessor, WorldInfo, PluginMessageRecipient
         private final int id;
         private static final Map<Integer, Environment> lookup = new HashMap<Integer, Environment>();
 
-        private Environment(int id) {
+        private Environment(final int id) {
             this.id = id;
         }
 
@@ -4033,12 +4033,12 @@ public interface World extends RegionAccessor, WorldInfo, PluginMessageRecipient
          */
         @Deprecated
         @Nullable
-        public static Environment getEnvironment(int id) {
+        public static Environment getEnvironment(final int id) {
             return lookup.get(Integer.valueOf(id));
         }
 
         static {
-            for (Environment env : values()) {
+            for (final Environment env : values()) {
                 lookup.put(Integer.valueOf(env.getId()), env);
             }
         }
diff --git a/src/main/java/org/bukkit/WorldBorder.java b/src/main/java/org/bukkit/WorldBorder.java
index 0f2f17f0a443ec5087b3373293b23f663be9dbe1..32909ad817b35d51c75ed9bb468d7353da4ab915 100644
--- a/src/main/java/org/bukkit/WorldBorder.java
+++ b/src/main/java/org/bukkit/WorldBorder.java
@@ -172,7 +172,7 @@ public interface WorldBorder {
      * @deprecated use {@link #isInside(Location)} for an upstream compatible replacement
      */
     @Deprecated
-    public default boolean isInBounds(@NotNull Location location) {
+    public default boolean isInBounds(@NotNull final Location location) {
         return this.isInside(location);
     }
     // Paper end
diff --git a/src/main/java/org/bukkit/WorldCreator.java b/src/main/java/org/bukkit/WorldCreator.java
index b575a1fd5f346b43b98afa9e53f865332877f803..7b26a9dab1a13d221e35619ea115cbb3db083249 100644
--- a/src/main/java/org/bukkit/WorldCreator.java
+++ b/src/main/java/org/bukkit/WorldCreator.java
@@ -29,12 +29,12 @@ public class WorldCreator {
      *
      * @param name Name of the world that will be created
      */
-    public WorldCreator(@NotNull String name) {
+    public WorldCreator(@NotNull final String name) {
         // Paper start
         this(name, getWorldKey(name));
     }
 
-    private static @NotNull NamespacedKey getWorldKey(@NotNull String name) {
+    private static @NotNull NamespacedKey getWorldKey(@NotNull final String name) {
         final String mainLevelName = Bukkit.getUnsafe().getMainLevelName();
         if (name.equals(mainLevelName)) {
             return NamespacedKey.minecraft("overworld");
@@ -53,7 +53,7 @@ public class WorldCreator {
      * @param levelName LevelName of the world that will be created
      * @param worldKey NamespacedKey of the world that will be created
      */
-    public WorldCreator(@NotNull String levelName, @NotNull NamespacedKey worldKey) {
+    public WorldCreator(@NotNull final String levelName, @NotNull final NamespacedKey worldKey) {
         if (levelName == null || worldKey == null) {
             throw new IllegalArgumentException("World name and key cannot be null");
         }
@@ -68,7 +68,7 @@ public class WorldCreator {
      *
      * @param worldKey NamespacedKey of the world that will be created
      */
-    public WorldCreator(@NotNull NamespacedKey worldKey) {
+    public WorldCreator(@NotNull final NamespacedKey worldKey) {
         this(worldKey.getKey(), worldKey);
     }
 
@@ -89,7 +89,7 @@ public class WorldCreator {
      * @param worldKey NamespacedKey of the world that will be created
      */
     @NotNull
-    public static WorldCreator ofNameAndKey(@NotNull String levelName, @NotNull NamespacedKey worldKey) {
+    public static WorldCreator ofNameAndKey(@NotNull final String levelName, @NotNull final NamespacedKey worldKey) {
         return new WorldCreator(levelName, worldKey);
     }
 
@@ -100,7 +100,7 @@ public class WorldCreator {
      * @param worldKey NamespacedKey of the world that will be created
      */
     @NotNull
-    public static WorldCreator ofKey(@NotNull NamespacedKey worldKey) {
+    public static WorldCreator ofKey(@NotNull final NamespacedKey worldKey) {
         return new WorldCreator(worldKey);
     }
     // Paper end
@@ -112,7 +112,7 @@ public class WorldCreator {
      * @return This object, for chaining
      */
     @NotNull
-    public WorldCreator copy(@NotNull World world) {
+    public WorldCreator copy(@NotNull final World world) {
         if (world == null) {
             throw new IllegalArgumentException("World cannot be null");
         }
@@ -135,7 +135,7 @@ public class WorldCreator {
      * @return This object, for chaining
      */
     @NotNull
-    public WorldCreator copy(@NotNull WorldCreator creator) {
+    public WorldCreator copy(@NotNull final WorldCreator creator) {
         if (creator == null) {
             throw new IllegalArgumentException("Creator cannot be null");
         }
@@ -178,7 +178,7 @@ public class WorldCreator {
      * @return This object, for chaining
      */
     @NotNull
-    public WorldCreator seed(long seed) {
+    public WorldCreator seed(final long seed) {
         this.seed = seed;
 
         return this;
@@ -201,7 +201,7 @@ public class WorldCreator {
      * @return This object, for chaining
      */
     @NotNull
-    public WorldCreator environment(@NotNull World.Environment env) {
+    public WorldCreator environment(@NotNull final World.Environment env) {
         this.environment = env;
 
         return this;
@@ -224,7 +224,7 @@ public class WorldCreator {
      * @return This object, for chaining
      */
     @NotNull
-    public WorldCreator type(@NotNull WorldType type) {
+    public WorldCreator type(@NotNull final WorldType type) {
         this.type = type;
 
         return this;
@@ -253,7 +253,7 @@ public class WorldCreator {
      * @return This object, for chaining
      */
     @NotNull
-    public WorldCreator generator(@Nullable ChunkGenerator generator) {
+    public WorldCreator generator(@Nullable final ChunkGenerator generator) {
         this.generator = generator;
 
         return this;
@@ -273,7 +273,7 @@ public class WorldCreator {
      * @return This object, for chaining
      */
     @NotNull
-    public WorldCreator generator(@Nullable String generator) {
+    public WorldCreator generator(@Nullable final String generator) {
         this.generator = getGeneratorForName(name, generator, Bukkit.getConsoleSender());
 
         return this;
@@ -295,7 +295,7 @@ public class WorldCreator {
      * @return This object, for chaining
      */
     @NotNull
-    public WorldCreator generator(@Nullable String generator, @Nullable CommandSender output) {
+    public WorldCreator generator(@Nullable final String generator, @Nullable final CommandSender output) {
         this.generator = getGeneratorForName(name, generator, output);
 
         return this;
@@ -326,7 +326,7 @@ public class WorldCreator {
      * @return This object, for chaining
      */
     @NotNull
-    public WorldCreator biomeProvider(@Nullable BiomeProvider biomeProvider) {
+    public WorldCreator biomeProvider(@Nullable final BiomeProvider biomeProvider) {
         this.biomeProvider = biomeProvider;
 
         return this;
@@ -349,7 +349,7 @@ public class WorldCreator {
      * @return This object, for chaining
      */
     @NotNull
-    public WorldCreator biomeProvider(@Nullable String biomeProvider) {
+    public WorldCreator biomeProvider(@Nullable final String biomeProvider) {
         this.biomeProvider = getBiomeProviderForName(name, biomeProvider, Bukkit.getConsoleSender());
 
         return this;
@@ -373,7 +373,7 @@ public class WorldCreator {
      * @return This object, for chaining
      */
     @NotNull
-    public WorldCreator biomeProvider(@Nullable String biomeProvider, @Nullable CommandSender output) {
+    public WorldCreator biomeProvider(@Nullable final String biomeProvider, @Nullable final CommandSender output) {
         this.biomeProvider = getBiomeProviderForName(name, biomeProvider, output);
 
         return this;
@@ -395,7 +395,7 @@ public class WorldCreator {
      * <code>minecraft:flat</code>)"
      */
     @NotNull
-    public WorldCreator generatorSettings(@NotNull String generatorSettings) {
+    public WorldCreator generatorSettings(@NotNull final String generatorSettings) {
         this.generatorSettings = generatorSettings;
 
         return this;
@@ -420,7 +420,7 @@ public class WorldCreator {
      * @return This object, for chaining
      */
     @NotNull
-    public WorldCreator generateStructures(boolean generate) {
+    public WorldCreator generateStructures(final boolean generate) {
         this.generateStructures = generate;
 
         return this;
@@ -444,7 +444,7 @@ public class WorldCreator {
      * @return This object, for chaining
      */
     @NotNull
-    public WorldCreator hardcore(boolean hardcore) {
+    public WorldCreator hardcore(final boolean hardcore) {
         this.hardcore = hardcore;
 
         return this;
@@ -481,7 +481,7 @@ public class WorldCreator {
      * @return Resulting WorldCreator
      */
     @NotNull
-    public static WorldCreator name(@NotNull String name) {
+    public static WorldCreator name(@NotNull final String name) {
         return new WorldCreator(name);
     }
 
@@ -502,7 +502,7 @@ public class WorldCreator {
      * @return Resulting generator, or null
      */
     @Nullable
-    public static ChunkGenerator getGeneratorForName(@NotNull String world, @Nullable String name, @Nullable CommandSender output) {
+    public static ChunkGenerator getGeneratorForName(@NotNull final String world, @Nullable final String name, @Nullable CommandSender output) {
         ChunkGenerator result = null;
 
         if (world == null) {
@@ -514,9 +514,9 @@ public class WorldCreator {
         }
 
         if (name != null) {
-            String[] split = name.split(":", 2);
-            String id = (split.length > 1) ? split[1] : null;
-            Plugin plugin = Bukkit.getPluginManager().getPlugin(split[0]);
+            final String[] split = name.split(":", 2);
+            final String id = (split.length > 1) ? split[1] : null;
+            final Plugin plugin = Bukkit.getPluginManager().getPlugin(split[0]);
 
             if (plugin == null) {
                 output.sendMessage("Could not set generator for world '" + world + "': Plugin '" + split[0] + "' does not exist");
@@ -547,7 +547,7 @@ public class WorldCreator {
      * @return Resulting biome provider, or null
      */
     @Nullable
-    public static BiomeProvider getBiomeProviderForName(@NotNull String world, @Nullable String name, @Nullable CommandSender output) {
+    public static BiomeProvider getBiomeProviderForName(@NotNull final String world, @Nullable final String name, @Nullable CommandSender output) {
         BiomeProvider result = null;
 
         if (world == null) {
@@ -559,9 +559,9 @@ public class WorldCreator {
         }
 
         if (name != null) {
-            String[] split = name.split(":", 2);
-            String id = (split.length > 1) ? split[1] : null;
-            Plugin plugin = Bukkit.getPluginManager().getPlugin(split[0]);
+            final String[] split = name.split(":", 2);
+            final String id = (split.length > 1) ? split[1] : null;
+            final Plugin plugin = Bukkit.getPluginManager().getPlugin(split[0]);
 
             if (plugin == null) {
                 output.sendMessage("Could not set biome provider for world '" + world + "': Plugin '" + split[0] + "' does not exist");
@@ -595,7 +595,7 @@ public class WorldCreator {
      * @return This object, for chaining
      */
     @NotNull
-    public WorldCreator keepSpawnLoaded(@NotNull net.kyori.adventure.util.TriState keepSpawnLoaded) {
+    public WorldCreator keepSpawnLoaded(@NotNull final net.kyori.adventure.util.TriState keepSpawnLoaded) {
         java.util.Objects.requireNonNull(keepSpawnLoaded, "keepSpawnLoaded");
         this.keepSpawnLoaded = keepSpawnLoaded;
         return this;
diff --git a/src/main/java/org/bukkit/WorldType.java b/src/main/java/org/bukkit/WorldType.java
index c48b5579f78760e93dc0ca71223ea5a5ce394873..5d89ae240fa0c4202b830a0d4a0de42393031750 100644
--- a/src/main/java/org/bukkit/WorldType.java
+++ b/src/main/java/org/bukkit/WorldType.java
@@ -17,7 +17,7 @@ public enum WorldType {
     private static final Map<String, WorldType> BY_NAME = Maps.newHashMap();
     private final String name;
 
-    private WorldType(/*@NotNull*/ String name) {
+    private WorldType(/*@NotNull*/ final String name) {
         this.name = name;
     }
 
@@ -38,12 +38,12 @@ public enum WorldType {
      * @return Requested WorldType, or null if not found
      */
     @Nullable
-    public static WorldType getByName(@NotNull String name) {
+    public static WorldType getByName(@NotNull final String name) {
         return BY_NAME.get(name.toUpperCase(java.util.Locale.ENGLISH));
     }
 
     static {
-        for (WorldType type : values()) {
+        for (final WorldType type : values()) {
             BY_NAME.put(type.name, type);
         }
     }
diff --git a/src/main/java/org/bukkit/advancement/AdvancementDisplayType.java b/src/main/java/org/bukkit/advancement/AdvancementDisplayType.java
index b0ca529b01fda655957d92291f444e6e77e5764b..bc60f67b2b54f95b33d8adc7e9a53bbb0bb9165a 100644
--- a/src/main/java/org/bukkit/advancement/AdvancementDisplayType.java
+++ b/src/main/java/org/bukkit/advancement/AdvancementDisplayType.java
@@ -27,7 +27,7 @@ public enum AdvancementDisplayType {
     GOAL(ChatColor.GREEN);
     private final @NotNull ChatColor color;
 
-    private AdvancementDisplayType(@NotNull ChatColor color) {
+    private AdvancementDisplayType(@NotNull final ChatColor color) {
         this.color = color;
     }
 
diff --git a/src/main/java/org/bukkit/attribute/Attribute.java b/src/main/java/org/bukkit/attribute/Attribute.java
index 28de1410c03f2c891dfd6ee2fc1e54fa4ee4daa5..17fbd18b4a64dd3830225e24cbc45be28df86193 100644
--- a/src/main/java/org/bukkit/attribute/Attribute.java
+++ b/src/main/java/org/bukkit/attribute/Attribute.java
@@ -64,7 +64,7 @@ public enum Attribute implements Keyed, net.kyori.adventure.translation.Translat
 
     private final @NotNull NamespacedKey key;
 
-    private Attribute(@NotNull String key) {
+    private Attribute(@NotNull final String key) {
         this.key = NamespacedKey.minecraft(key);
     }
 
diff --git a/src/main/java/org/bukkit/attribute/AttributeModifier.java b/src/main/java/org/bukkit/attribute/AttributeModifier.java
index cab8b50f1dbc31511be6bdda404126ad0832d0e4..b3ee36308458b1dd2041757d8b74e8ffa1c8b940 100644
--- a/src/main/java/org/bukkit/attribute/AttributeModifier.java
+++ b/src/main/java/org/bukkit/attribute/AttributeModifier.java
@@ -22,15 +22,15 @@ public class AttributeModifier implements ConfigurationSerializable {
     private final @NotNull Operation operation;
     private final @Nullable EquipmentSlot slot;
 
-    public AttributeModifier(@NotNull String name, double amount, @NotNull Operation operation) {
+    public AttributeModifier(@NotNull final String name, final double amount, @NotNull final Operation operation) {
         this(UUID.randomUUID(), name, amount, operation);
     }
 
-    public AttributeModifier(@NotNull UUID uuid, @NotNull String name, double amount, @NotNull Operation operation) {
+    public AttributeModifier(@NotNull final UUID uuid, @NotNull final String name, final double amount, @NotNull final Operation operation) {
         this(uuid, name, amount, operation, null);
     }
 
-    public AttributeModifier(@NotNull UUID uuid, @NotNull String name, double amount, @NotNull Operation operation, @Nullable EquipmentSlot slot) {
+    public AttributeModifier(@NotNull final UUID uuid, @NotNull final String name, final double amount, @NotNull final Operation operation, @Nullable final EquipmentSlot slot) {
         Preconditions.checkArgument(uuid != null, "UUID cannot be null");
         Preconditions.checkArgument(name != null, "Name cannot be null");
         Preconditions.checkArgument(operation != null, "Operation cannot be null");
@@ -94,7 +94,7 @@ public class AttributeModifier implements ConfigurationSerializable {
     @NotNull
     @Override
     public Map<String, Object> serialize() {
-        Map<String, Object> data = new HashMap<String, Object>();
+        final Map<String, Object> data = new HashMap<String, Object>();
         data.put("uuid", uuid.toString());
         data.put("name", name);
         data.put("operation", Integer.valueOf(operation.ordinal()));
@@ -106,12 +106,12 @@ public class AttributeModifier implements ConfigurationSerializable {
     }
 
     @Override
-    public boolean equals(Object other) {
+    public boolean equals(final Object other) {
         if (!(other instanceof AttributeModifier)) {
             return false;
         }
-        AttributeModifier mod = (AttributeModifier) other;
-        boolean slots = (this.slot != null ? (this.slot == mod.slot) : mod.slot == null);
+        final AttributeModifier mod = (AttributeModifier) other;
+        final boolean slots = (this.slot != null ? (this.slot == mod.slot) : mod.slot == null);
         return this.uuid.equals(mod.uuid) && this.name.equals(mod.name) && this.amount == mod.amount && this.operation == mod.operation && slots;
     }
 
@@ -138,7 +138,7 @@ public class AttributeModifier implements ConfigurationSerializable {
     }
 
     @NotNull
-    public static AttributeModifier deserialize(@NotNull Map<String, Object> args) {
+    public static AttributeModifier deserialize(@NotNull final Map<String, Object> args) {
         if (args.containsKey("slot")) {
             return new AttributeModifier(UUID.fromString((String) args.get("uuid")), (String) args.get("name"), NumberConversions.toDouble(args.get("amount")), Operation.values()[NumberConversions.toInt(args.get("operation"))], EquipmentSlot.valueOf((args.get("slot").toString().toUpperCase())));
         }
diff --git a/src/main/java/org/bukkit/block/Block.java b/src/main/java/org/bukkit/block/Block.java
index aba40431c5a1ae43106a678445483e0653e130d1..91813465436a6d9072bd99189df151d235c95e96 100644
--- a/src/main/java/org/bukkit/block/Block.java
+++ b/src/main/java/org/bukkit/block/Block.java
@@ -190,7 +190,7 @@ public interface Block extends Metadatable, net.kyori.adventure.translation.Tran
      * @deprecated only encodes y block ranges from -512 to 511 and represents an already changed implementation detail
      */
     @Deprecated
-    public static long getBlockKey(int x, int y, int z) {
+    public static long getBlockKey(final int x, final int y, final int z) {
         return ((long)x & 0x7FFFFFF) | (((long)z & 0x7FFFFFF) << 27) | ((long)y << 54);
     }
 
@@ -202,7 +202,7 @@ public interface Block extends Metadatable, net.kyori.adventure.translation.Tran
      * @deprecated see {@link #getBlockKey(int, int, int)}
      */
     @Deprecated
-    public static int getBlockKeyX(long packed) {
+    public static int getBlockKeyX(final long packed) {
         return (int) ((packed << 37) >> 37);
     }
 
@@ -214,7 +214,7 @@ public interface Block extends Metadatable, net.kyori.adventure.translation.Tran
      * @deprecated see {@link #getBlockKey(int, int, int)}
      */
     @Deprecated
-    public static int getBlockKeyY(long packed) {
+    public static int getBlockKeyY(final long packed) {
         return (int) (packed >> 54);
     }
 
@@ -226,7 +226,7 @@ public interface Block extends Metadatable, net.kyori.adventure.translation.Tran
      * @deprecated see {@link #getBlockKey(int, int, int)}
      */
     @Deprecated
-    public static int getBlockKeyZ(long packed) {
+    public static int getBlockKeyZ(final long packed) {
         return (int) ((packed << 10) >> 37);
     }
 
@@ -771,7 +771,7 @@ public interface Block extends Metadatable, net.kyori.adventure.translation.Tran
      * @return the speed that this Block will be mined by the given {@link ItemStack}
      */
     @NotNull
-    public default float getDestroySpeed(@NotNull ItemStack itemStack) {
+    public default float getDestroySpeed(@NotNull final ItemStack itemStack) {
         return getDestroySpeed(itemStack, false);
     }
 
diff --git a/src/main/java/org/bukkit/block/BlockFace.java b/src/main/java/org/bukkit/block/BlockFace.java
index 65140b80da08f2e70467790bac13e7defaa4e275..7285dff86eda2a9a4d19f421c5f542740337e2e3 100644
--- a/src/main/java/org/bukkit/block/BlockFace.java
+++ b/src/main/java/org/bukkit/block/BlockFace.java
@@ -77,7 +77,7 @@ public enum BlockFace {
      */
     @NotNull
     public Vector getDirection() {
-        Vector direction = new Vector(modX, modY, modZ);
+        final Vector direction = new Vector(modX, modY, modZ);
         if (modX != 0 || modY != 0 || modZ != 0) {
             direction.normalize();
         }
diff --git a/src/main/java/org/bukkit/block/DoubleChest.java b/src/main/java/org/bukkit/block/DoubleChest.java
index 78f6969e50db87cae7b54ee3631122330206251f..470028bc19b6b9c1b22577a943783ac8b12e73fb 100644
--- a/src/main/java/org/bukkit/block/DoubleChest.java
+++ b/src/main/java/org/bukkit/block/DoubleChest.java
@@ -14,7 +14,7 @@ import org.jetbrains.annotations.Nullable;
 public class DoubleChest implements InventoryHolder {
     private final DoubleChestInventory inventory;
 
-    public DoubleChest(@NotNull DoubleChestInventory chest) {
+    public DoubleChest(@NotNull final DoubleChestInventory chest) {
         inventory = chest;
     }
 
@@ -36,12 +36,12 @@ public class DoubleChest implements InventoryHolder {
 
     // Paper start - getHolder without snapshot
     @Nullable
-    public InventoryHolder getLeftSide(boolean useSnapshot) {
+    public InventoryHolder getLeftSide(final boolean useSnapshot) {
         return inventory.getLeftSide().getHolder(useSnapshot);
     }
 
     @Nullable
-    public InventoryHolder getRightSide(boolean useSnapshot) {
+    public InventoryHolder getRightSide(final boolean useSnapshot) {
         return inventory.getRightSide().getHolder(useSnapshot);
     }
     // Paper end
diff --git a/src/main/java/org/bukkit/block/PistonMoveReaction.java b/src/main/java/org/bukkit/block/PistonMoveReaction.java
index ed86ed085e5a3d98582bc214485f6621f3a24697..c304f2c10fdd635c8eff55320ac67825be853fb9 100644
--- a/src/main/java/org/bukkit/block/PistonMoveReaction.java
+++ b/src/main/java/org/bukkit/block/PistonMoveReaction.java
@@ -39,12 +39,12 @@ public enum PistonMoveReaction {
     private final int id;
     private static final @NotNull Map<Integer, PistonMoveReaction> byId = new HashMap<Integer, PistonMoveReaction>();
     static {
-        for (PistonMoveReaction reaction : PistonMoveReaction.values()) {
+        for (final PistonMoveReaction reaction : PistonMoveReaction.values()) {
             byId.put(Integer.valueOf(reaction.id), reaction);
         }
     }
 
-    private PistonMoveReaction(int id) {
+    private PistonMoveReaction(final int id) {
         this.id = id;
     }
 
@@ -64,7 +64,7 @@ public enum PistonMoveReaction {
      */
     @Deprecated
     @Nullable
-    public static PistonMoveReaction getById(int id) {
+    public static PistonMoveReaction getById(final int id) {
         return byId.get(Integer.valueOf(id));
     }
 }
diff --git a/src/main/java/org/bukkit/block/banner/Pattern.java b/src/main/java/org/bukkit/block/banner/Pattern.java
index 14a41a82df77d08e64980bc0088402dc005f6fa2..57c545726ca490129b1d5e76bc59db4b960e3fca 100644
--- a/src/main/java/org/bukkit/block/banner/Pattern.java
+++ b/src/main/java/org/bukkit/block/banner/Pattern.java
@@ -26,7 +26,7 @@ public class Pattern implements ConfigurationSerializable {
      * @param color   the pattern color
      * @param pattern the pattern type
      */
-    public Pattern(@NotNull DyeColor color, @NotNull PatternType pattern) {
+    public Pattern(@NotNull final DyeColor color, @NotNull final PatternType pattern) {
         this.color = color;
         this.pattern = pattern;
     }
@@ -36,13 +36,13 @@ public class Pattern implements ConfigurationSerializable {
      *
      * @param map the map to deserialize from
      */
-    public Pattern(@NotNull Map<String, Object> map) {
+    public Pattern(@NotNull final Map<String, Object> map) {
         color = DyeColor.legacyValueOf(getString(map, COLOR));
         pattern = PatternType.getByIdentifier(getString(map, PATTERN));
     }
 
-    private static @NotNull String getString(@NotNull Map<?, ?> map, @NotNull Object key) {
-        Object str = map.get(key);
+    private static @NotNull String getString(@NotNull final Map<?, ?> map, @NotNull final Object key) {
+        final Object str = map.get(key);
         if (str instanceof String) {
             return (String) str;
         }
@@ -87,7 +87,7 @@ public class Pattern implements ConfigurationSerializable {
     }
 
     @Override
-    public boolean equals(@Nullable Object obj) {
+    public boolean equals(@Nullable final Object obj) {
         if (obj == null) {
             return false;
         }
diff --git a/src/main/java/org/bukkit/block/banner/PatternType.java b/src/main/java/org/bukkit/block/banner/PatternType.java
index e6ce94ed2a4d64204aac60c4b2dc138f258e4720..dcc94f2bc9d7ad913c131f9261cdb92c3f93c4b7 100644
--- a/src/main/java/org/bukkit/block/banner/PatternType.java
+++ b/src/main/java/org/bukkit/block/banner/PatternType.java
@@ -53,12 +53,12 @@ public enum PatternType {
     private static final Map<String, PatternType> byString = new HashMap<String, PatternType>();
 
     static {
-        for (PatternType p : values()) {
+        for (final PatternType p : values()) {
             byString.put(p.identifier, p);
         }
     }
 
-    private PatternType(/*@NotNull*/ String key) {
+    private PatternType(/*@NotNull*/ final String key) {
         this.identifier = key;
     }
 
@@ -82,7 +82,7 @@ public enum PatternType {
      */
     @Contract("null -> null")
     @Nullable
-    public static PatternType getByIdentifier(@Nullable String identifier) {
+    public static PatternType getByIdentifier(@Nullable final String identifier) {
         return byString.get(identifier);
     }
 }
diff --git a/src/main/java/org/bukkit/command/BufferedCommandSender.java b/src/main/java/org/bukkit/command/BufferedCommandSender.java
index f9a00aecca5ec41b460bf41dfe1c69694768cf98..139c48f6fd41bf7633ddc40a28f22c9914e01d5e 100644
--- a/src/main/java/org/bukkit/command/BufferedCommandSender.java
+++ b/src/main/java/org/bukkit/command/BufferedCommandSender.java
@@ -5,7 +5,7 @@ import org.jetbrains.annotations.NotNull;
 public class BufferedCommandSender implements MessageCommandSender {
     private final StringBuffer buffer = new StringBuffer();
     @Override
-    public void sendMessage(@NotNull String message) {
+    public void sendMessage(@NotNull final String message) {
         buffer.append(message);
         buffer.append("\n");
     }
diff --git a/src/main/java/org/bukkit/command/Command.java b/src/main/java/org/bukkit/command/Command.java
index fa272d950b3f5febad2d4c687323e17afc612f80..0f135a4cf192bcba315aaecdcc90658b6ed4044b 100644
--- a/src/main/java/org/bukkit/command/Command.java
+++ b/src/main/java/org/bukkit/command/Command.java
@@ -36,11 +36,11 @@ public abstract class Command {
     public co.aikar.timings.Timing timings; // Paper
     @NotNull public String getTimingName() {return getName();} // Paper
 
-    protected Command(@NotNull String name) {
+    protected Command(@NotNull final String name) {
         this(name, "", "/" + name, new ArrayList<String>());
     }
 
-    protected Command(@NotNull String name, @NotNull String description, @NotNull String usageMessage, @NotNull List<String> aliases) {
+    protected Command(@NotNull final String name, @NotNull final String description, @NotNull final String usageMessage, @NotNull final List<String> aliases) {
         this.name = name;
         this.nextLabel = name;
         this.label = name;
@@ -72,7 +72,7 @@ public abstract class Command {
      * @throws IllegalArgumentException if sender, alias, or args is null
      */
     @NotNull
-    public List<String> tabComplete(@NotNull CommandSender sender, @NotNull String alias, @NotNull String @NotNull [] args) throws IllegalArgumentException {
+    public List<String> tabComplete(@NotNull final CommandSender sender, @NotNull final String alias, @NotNull final String @NotNull [] args) throws IllegalArgumentException {
         return tabComplete0(sender, alias, args, null);
     }
 
@@ -89,12 +89,12 @@ public abstract class Command {
      * @throws IllegalArgumentException if sender, alias, or args is null
      */
     @NotNull
-    public List<String> tabComplete(@NotNull CommandSender sender, @NotNull String alias, @NotNull String @NotNull [] args, @Nullable Location location) throws IllegalArgumentException {
+    public List<String> tabComplete(@NotNull final CommandSender sender, @NotNull final String alias, @NotNull final String @NotNull [] args, @Nullable final Location location) throws IllegalArgumentException {
         return tabComplete(sender, alias, args);
     }
 
     @NotNull
-    private List<String> tabComplete0(@NotNull CommandSender sender, @NotNull String alias, @NotNull String @NotNull [] args, @Nullable Location location) throws IllegalArgumentException {
+    private List<String> tabComplete0(@NotNull final CommandSender sender, @NotNull final String alias, @NotNull final String @NotNull [] args, @Nullable final Location location) throws IllegalArgumentException {
         Preconditions.checkArgument(sender != null, "Sender cannot be null");
         Preconditions.checkArgument(args != null, "Arguments cannot be null");
         Preconditions.checkArgument(alias != null, "Alias cannot be null");
@@ -103,13 +103,13 @@ public abstract class Command {
             return ImmutableList.of();
         }
 
-        String lastWord = args[args.length - 1];
+        final String lastWord = args[args.length - 1];
 
-        Player senderPlayer = sender instanceof Player ? (Player) sender : null;
+        final Player senderPlayer = sender instanceof Player ? (Player) sender : null;
 
-        ArrayList<String> matchedPlayers = new ArrayList<String>();
-        for (Player player : sender.getServer().getOnlinePlayers()) {
-            String name = player.getName();
+        final ArrayList<String> matchedPlayers = new ArrayList<String>();
+        for (final Player player : sender.getServer().getOnlinePlayers()) {
+            final String name = player.getName();
             if ((senderPlayer == null || senderPlayer.canSee(player)) && StringUtil.startsWithIgnoreCase(name, lastWord)) {
                 matchedPlayers.add(name);
             }
@@ -140,7 +140,7 @@ public abstract class Command {
      * @return returns true if the name change happened instantly or false if
      *     the command was already registered
      */
-    public boolean setName(@NotNull String name) {
+    public boolean setName(@NotNull final String name) {
         if (!isRegistered()) {
             this.name = (name == null) ? "" : name;
             return true;
@@ -165,7 +165,7 @@ public abstract class Command {
      *
      * @param permission Permission name or null
      */
-    public void setPermission(@Nullable String permission) {
+    public void setPermission(@Nullable final String permission) {
         this.permission = permission;
     }
 
@@ -179,13 +179,13 @@ public abstract class Command {
      * @param target User to test
      * @return true if they can use it, otherwise false
      */
-    public boolean testPermission(@NotNull CommandSender target) {
+    public boolean testPermission(@NotNull final CommandSender target) {
         if (testPermissionSilent(target)) {
             return true;
         }
 
             // Paper start - use components for permissionMessage
-        net.kyori.adventure.text.Component permissionMessage = this.permissionMessage != null ? this.permissionMessage : Bukkit.permissionMessage();
+        final net.kyori.adventure.text.Component permissionMessage = this.permissionMessage != null ? this.permissionMessage : Bukkit.permissionMessage();
         if (!permissionMessage.equals(net.kyori.adventure.text.Component.empty())) {
             target.sendMessage(permissionMessage.replaceText(net.kyori.adventure.text.TextReplacementConfig.builder().matchLiteral("<permission>").replacement(permission).build()));
             // Paper end
@@ -203,12 +203,12 @@ public abstract class Command {
      * @param target User to test
      * @return true if they can use it, otherwise false
      */
-    public boolean testPermissionSilent(@NotNull CommandSender target) {
+    public boolean testPermissionSilent(@NotNull final CommandSender target) {
         if ((permission == null) || (permission.length() == 0)) {
             return true;
         }
 
-        for (String p : permission.split(";")) {
+        for (final String p : permission.split(";")) {
             if (target.hasPermission(p)) {
                 return true;
             }
@@ -258,7 +258,7 @@ public abstract class Command {
      * @return true if the registration was successful (the current registered
      *     CommandMap was the passed CommandMap or null) false otherwise
      */
-    public boolean register(@NotNull CommandMap commandMap) {
+    public boolean register(@NotNull final CommandMap commandMap) {
         if (allowChangesFrom(commandMap)) {
             this.commandMap = commandMap;
             return true;
@@ -276,7 +276,7 @@ public abstract class Command {
      *     registered CommandMap was the passed CommandMap or null) false
      *     otherwise
      */
-    public boolean unregister(@NotNull CommandMap commandMap) {
+    public boolean unregister(@NotNull final CommandMap commandMap) {
         if (allowChangesFrom(commandMap)) {
             this.commandMap = null;
             this.activeAliases = new ArrayList<String>(this.aliases);
@@ -287,7 +287,7 @@ public abstract class Command {
         return false;
     }
 
-    private boolean allowChangesFrom(@NotNull CommandMap commandMap) {
+    private boolean allowChangesFrom(@NotNull final CommandMap commandMap) {
         return (null == this.commandMap || this.commandMap == commandMap);
     }
 
@@ -353,7 +353,7 @@ public abstract class Command {
      * @return this command object, for chaining
      */
     @NotNull
-    public Command setAliases(@NotNull List<String> aliases) {
+    public Command setAliases(@NotNull final List<String> aliases) {
         this.aliases = aliases;
         if (!isRegistered()) {
             this.activeAliases = new ArrayList<String>(aliases);
@@ -370,7 +370,7 @@ public abstract class Command {
      * @return this command object, for chaining
      */
     @NotNull
-    public Command setDescription(@NotNull String description) {
+    public Command setDescription(@NotNull final String description) {
         this.description = (description == null) ? "" : description;
         return this;
     }
@@ -385,7 +385,7 @@ public abstract class Command {
      */
     @NotNull
     @Deprecated // Paper
-    public Command setPermissionMessage(@Nullable String permissionMessage) {
+    public Command setPermissionMessage(@Nullable final String permissionMessage) {
         this.permissionMessage = net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().deserializeOrNull(permissionMessage); // Paper
         return this;
     }
@@ -397,7 +397,7 @@ public abstract class Command {
      * @return this command object, for chaining
      */
     @NotNull
-    public Command setUsage(@NotNull String usage) {
+    public Command setUsage(@NotNull final String usage) {
         this.usageMessage = (usage == null) ? "" : usage;
         return this;
     }
@@ -416,26 +416,26 @@ public abstract class Command {
      *
      * @param permissionMessage the permission message
      */
-    public void permissionMessage(@Nullable net.kyori.adventure.text.Component permissionMessage) {
+    public void permissionMessage(@Nullable final net.kyori.adventure.text.Component permissionMessage) {
         this.permissionMessage = permissionMessage;
     }
     // Paper end
 
-    public static void broadcastCommandMessage(@NotNull CommandSender source, @NotNull String message) {
+    public static void broadcastCommandMessage(@NotNull final CommandSender source, @NotNull final String message) {
         broadcastCommandMessage(source, message, true);
     }
 
-    public static void broadcastCommandMessage(@NotNull CommandSender source, @NotNull String message, boolean sendToSource) {
+    public static void broadcastCommandMessage(@NotNull final CommandSender source, @NotNull final String message, final boolean sendToSource) {
         // Paper start
         broadcastCommandMessage(source, net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().deserialize(message), sendToSource);
     }
 
-    public static void broadcastCommandMessage(@NotNull CommandSender source, @NotNull net.kyori.adventure.text.Component message) {
+    public static void broadcastCommandMessage(@NotNull final CommandSender source, @NotNull final net.kyori.adventure.text.Component message) {
         broadcastCommandMessage(source, message, true);
     }
 
-    public static void broadcastCommandMessage(@NotNull CommandSender source, @NotNull net.kyori.adventure.text.Component message, boolean sendToSource) {
-        net.kyori.adventure.text.TextComponent.Builder result = net.kyori.adventure.text.Component.text()
+    public static void broadcastCommandMessage(@NotNull final CommandSender source, @NotNull final net.kyori.adventure.text.Component message, final boolean sendToSource) {
+        final net.kyori.adventure.text.TextComponent.Builder result = net.kyori.adventure.text.Component.text()
             .color(net.kyori.adventure.text.format.NamedTextColor.WHITE)
             .decoration(net.kyori.adventure.text.format.TextDecoration.ITALIC, false)
             .append(source.name())
@@ -444,14 +444,14 @@ public abstract class Command {
         // Paper end
 
         if (source instanceof BlockCommandSender) {
-            BlockCommandSender blockCommandSender = (BlockCommandSender) source;
+            final BlockCommandSender blockCommandSender = (BlockCommandSender) source;
 
             if (!blockCommandSender.getBlock().getWorld().<Boolean>getGameRuleValue(GameRule.COMMAND_BLOCK_OUTPUT).booleanValue()) {
                 Bukkit.getConsoleSender().sendMessage(result);
                 return;
             }
         } else if (source instanceof CommandMinecart) {
-            CommandMinecart commandMinecart = (CommandMinecart) source;
+            final CommandMinecart commandMinecart = (CommandMinecart) source;
 
             if (!commandMinecart.getWorld().<Boolean>getGameRuleValue(GameRule.COMMAND_BLOCK_OUTPUT).booleanValue()) {
                 Bukkit.getConsoleSender().sendMessage(result);
@@ -459,9 +459,9 @@ public abstract class Command {
             }
         }
 
-        Set<Permissible> users = Bukkit.getPluginManager().getPermissionSubscriptions(Server.BROADCAST_CHANNEL_ADMINISTRATIVE);
+        final Set<Permissible> users = Bukkit.getPluginManager().getPermissionSubscriptions(Server.BROADCAST_CHANNEL_ADMINISTRATIVE);
         // Paper start
-        net.kyori.adventure.text.TextComponent.Builder colored = net.kyori.adventure.text.Component.text()
+        final net.kyori.adventure.text.TextComponent.Builder colored = net.kyori.adventure.text.Component.text()
             .color(net.kyori.adventure.text.format.NamedTextColor.GRAY)
             .decorate(net.kyori.adventure.text.format.TextDecoration.ITALIC)
             .append(net.kyori.adventure.text.Component.text("["), result, net.kyori.adventure.text.Component.text("]"));
@@ -471,9 +471,9 @@ public abstract class Command {
             source.sendMessage(message);
         }
 
-        for (Permissible user : users) {
+        for (final Permissible user : users) {
             if (user instanceof CommandSender && user.hasPermission(Server.BROADCAST_CHANNEL_ADMINISTRATIVE)) {
-                CommandSender target = (CommandSender) user;
+                final CommandSender target = (CommandSender) user;
 
                 if (target instanceof ConsoleCommandSender) {
                     target.sendMessage(result);
diff --git a/src/main/java/org/bukkit/command/CommandException.java b/src/main/java/org/bukkit/command/CommandException.java
index b63015f40282b0f9e441b63276ccab3d81daa19d..4e3fbb5b6b9ac826f7cf63bc0d968f2b328d08b2 100644
--- a/src/main/java/org/bukkit/command/CommandException.java
+++ b/src/main/java/org/bukkit/command/CommandException.java
@@ -18,11 +18,11 @@ public class CommandException extends RuntimeException {
      *
      * @param msg the detail message.
      */
-    public CommandException(String msg) {
+    public CommandException(final String msg) {
         super(msg);
     }
 
-    public CommandException(String msg, Throwable cause) {
+    public CommandException(final String msg, final Throwable cause) {
         super(msg, cause);
     }
 }
diff --git a/src/main/java/org/bukkit/command/CommandSender.java b/src/main/java/org/bukkit/command/CommandSender.java
index f3cf27e075ea01d9d825aead3782db66cd4f2c3b..a4200733f403cf3edc7093ef64e961188c54a0f2 100644
--- a/src/main/java/org/bukkit/command/CommandSender.java
+++ b/src/main/java/org/bukkit/command/CommandSender.java
@@ -71,7 +71,7 @@ public interface CommandSender extends net.kyori.adventure.audience.Audience, Pe
          * @deprecated use {@code sendMessage} methods that accept {@link net.kyori.adventure.text.Component}
          */
         @Deprecated // Paper
-        public void sendMessage(@NotNull net.md_5.bungee.api.chat.BaseComponent component) {
+        public void sendMessage(@NotNull final net.md_5.bungee.api.chat.BaseComponent component) {
             throw new UnsupportedOperationException("Not supported yet.");
         }
 
@@ -82,7 +82,7 @@ public interface CommandSender extends net.kyori.adventure.audience.Audience, Pe
          * @deprecated use {@code sendMessage} methods that accept {@link net.kyori.adventure.text.Component}
          */
         @Deprecated // Paper
-        public void sendMessage(@NotNull net.md_5.bungee.api.chat.BaseComponent... components) {
+        public void sendMessage(@NotNull final net.md_5.bungee.api.chat.BaseComponent... components) {
             throw new UnsupportedOperationException("Not supported yet.");
         }
 
@@ -94,7 +94,7 @@ public interface CommandSender extends net.kyori.adventure.audience.Audience, Pe
          * @deprecated use {@code sendMessage} methods that accept {@link net.kyori.adventure.text.Component}
          */
         @Deprecated // Paper
-        public void sendMessage(@Nullable UUID sender, @NotNull net.md_5.bungee.api.chat.BaseComponent component) {
+        public void sendMessage(@Nullable final UUID sender, @NotNull final net.md_5.bungee.api.chat.BaseComponent component) {
             throw new UnsupportedOperationException("Not supported yet.");
         }
 
@@ -106,7 +106,7 @@ public interface CommandSender extends net.kyori.adventure.audience.Audience, Pe
          * @deprecated use {@code sendMessage} methods that accept {@link net.kyori.adventure.text.Component}
          */
         @Deprecated // Paper
-        public void sendMessage(@Nullable UUID sender, @NotNull net.md_5.bungee.api.chat.BaseComponent... components) {
+        public void sendMessage(@Nullable final UUID sender, @NotNull final net.md_5.bungee.api.chat.BaseComponent... components) {
             throw new UnsupportedOperationException("Not supported yet.");
         }
     }
@@ -159,7 +159,7 @@ public interface CommandSender extends net.kyori.adventure.audience.Audience, Pe
      * @deprecated use {@link #sendMessage(Identity, Component, MessageType)} instead
      */
     @Deprecated
-    default void sendMessage(@NotNull net.md_5.bungee.api.chat.BaseComponent component) {
+    default void sendMessage(@NotNull final net.md_5.bungee.api.chat.BaseComponent component) {
         this.sendMessage(component.toLegacyText());
     }
 
@@ -173,7 +173,7 @@ public interface CommandSender extends net.kyori.adventure.audience.Audience, Pe
      * @deprecated use {@link #sendMessage(Identity, Component, MessageType)} instead
      */
     @Deprecated
-    default void sendMessage(@NotNull net.md_5.bungee.api.chat.BaseComponent... components) {
+    default void sendMessage(@NotNull final net.md_5.bungee.api.chat.BaseComponent... components) {
         this.sendMessage(new net.md_5.bungee.api.chat.TextComponent(components).toLegacyText());
     }
     // Paper end
diff --git a/src/main/java/org/bukkit/command/FormattedCommandAlias.java b/src/main/java/org/bukkit/command/FormattedCommandAlias.java
index 9aa1ce63c4c07c26bff9e51cdd43d956ccd45932..f0f3ec62294518c0eaa40957f04d711648ea6e3a 100644
--- a/src/main/java/org/bukkit/command/FormattedCommandAlias.java
+++ b/src/main/java/org/bukkit/command/FormattedCommandAlias.java
@@ -10,20 +10,20 @@ import org.jetbrains.annotations.NotNull;
 public class FormattedCommandAlias extends Command {
     private final String[] formatStrings;
 
-    public FormattedCommandAlias(@NotNull String alias, @NotNull String[] formatStrings) {
+    public FormattedCommandAlias(@NotNull final String alias, @NotNull final String[] formatStrings) {
         super(alias);
         timings = co.aikar.timings.TimingsManager.getCommandTiming("minecraft", this); // Spigot
         this.formatStrings = formatStrings;
     }
 
     @Override
-    public boolean execute(@NotNull CommandSender sender, @NotNull String commandLabel, @NotNull String @NotNull [] args) {
+    public boolean execute(@NotNull final CommandSender sender, @NotNull final String commandLabel, @NotNull final String @NotNull [] args) {
         boolean result = false;
-        ArrayList<String> commands = new ArrayList<String>();
-        for (String formatString : formatStrings) {
+        final ArrayList<String> commands = new ArrayList<String>();
+        for (final String formatString : formatStrings) {
             try {
                 commands.add(buildCommand(sender, formatString, args)); // Paper
-            } catch (Throwable throwable) {
+            } catch (final Throwable throwable) {
                 if (throwable instanceof IllegalArgumentException) {
                     sender.sendMessage(throwable.getMessage());
                 } else {
@@ -33,20 +33,20 @@ public class FormattedCommandAlias extends Command {
             }
         }
 
-        for (String command : commands) {
+        for (final String command : commands) {
             result |= Bukkit.dispatchCommand(sender, command);
         }
 
         return result;
     }
 
-    private @NotNull String buildCommand(@NotNull CommandSender sender, @NotNull String formatString, @NotNull String @NotNull [] args) { // Paper
+    private @NotNull String buildCommand(@NotNull final CommandSender sender, @NotNull String formatString, @NotNull final String @NotNull [] args) { // Paper
         if (formatString.contains("$sender")) { // Paper
             formatString = formatString.replaceAll(Pattern.quote("$sender"), Matcher.quoteReplacement(sender.getName())); // Paper
         } // Paper
         int index = formatString.indexOf('$');
         while (index != -1) {
-            int start = index;
+            final int start = index;
 
             if (index > 0 && formatString.charAt(start - 1) == '\\') {
                 formatString = formatString.substring(0, start - 1) + formatString.substring(start);
@@ -63,7 +63,7 @@ public class FormattedCommandAlias extends Command {
 
             // Move index past the $
             index++;
-            int argStart = index;
+            final int argStart = index;
             while (index < formatString.length() && inRange(((int) formatString.charAt(index)) - 48, 0, 9)) {
                 // Move index past current digit
                 index++;
@@ -91,13 +91,13 @@ public class FormattedCommandAlias extends Command {
                 index++;
             }
 
-            int end = index;
+            final int end = index;
 
             if (required && position >= args.length) {
                 throw new IllegalArgumentException("Missing required argument " + (position + 1));
             }
 
-            StringBuilder replacement = new StringBuilder();
+            final StringBuilder replacement = new StringBuilder();
             if (rest && position < args.length) {
                 for (int i = position; i < args.length; i++) {
                     if (i != position) {
@@ -124,7 +124,7 @@ public class FormattedCommandAlias extends Command {
     @Override // Paper
     public String getTimingName() {return "Command Forwarder - " + super.getTimingName();} // Paper
 
-    private static boolean inRange(int i, int j, int k) {
+    private static boolean inRange(final int i, final int j, final int k) {
         return i >= j && i <= k;
     }
 }
diff --git a/src/main/java/org/bukkit/command/MessageCommandSender.java b/src/main/java/org/bukkit/command/MessageCommandSender.java
index 66b3932439759b2502affc07061e68b6c84e0dd2..38914bcca5b8eba9fb096e1235e325b46dfb4f9a 100644
--- a/src/main/java/org/bukkit/command/MessageCommandSender.java
+++ b/src/main/java/org/bukkit/command/MessageCommandSender.java
@@ -19,20 +19,20 @@ import org.jetbrains.annotations.Nullable;
 public interface MessageCommandSender extends CommandSender {
 
     @Override
-    default void sendMessage(@NotNull String @NotNull [] messages) {
-        for (String message : messages) {
+    default void sendMessage(@NotNull final String @NotNull [] messages) {
+        for (final String message : messages) {
             sendMessage(message);
         }
     }
 
     @Override
-    default void sendMessage(@Nullable UUID sender, @NotNull String message) {
+    default void sendMessage(@Nullable final UUID sender, @NotNull final String message) {
         sendMessage(message);
     }
 
     @Override
-    default void sendMessage(@Nullable UUID sender, @NotNull String @NotNull [] messages) {
-        for (String message : messages) {
+    default void sendMessage(@Nullable final UUID sender, @NotNull final String @NotNull [] messages) {
+        for (final String message : messages) {
             sendMessage(message);
         }
     }
@@ -62,56 +62,56 @@ public interface MessageCommandSender extends CommandSender {
     }
 
     @Override
-    default void setOp(boolean value) {
+    default void setOp(final boolean value) {
         throw new UnsupportedOperationException();
     }
 
     @Override
-    default boolean isPermissionSet(@NotNull String name) {
+    default boolean isPermissionSet(@NotNull final String name) {
         throw new UnsupportedOperationException();
     }
 
     @Override
-    default boolean isPermissionSet(@NotNull Permission perm) {
+    default boolean isPermissionSet(@NotNull final Permission perm) {
         throw new UnsupportedOperationException();
     }
 
     @Override
-    default boolean hasPermission(@NotNull String name) {
+    default boolean hasPermission(@NotNull final String name) {
         throw new UnsupportedOperationException();
     }
 
     @Override
-    default boolean hasPermission(@NotNull Permission perm) {
+    default boolean hasPermission(@NotNull final Permission perm) {
         throw new UnsupportedOperationException();
     }
 
     @NotNull
     @Override
-    default PermissionAttachment addAttachment(@NotNull Plugin plugin, @NotNull String name, boolean value) {
+    default PermissionAttachment addAttachment(@NotNull final Plugin plugin, @NotNull final String name, final boolean value) {
         throw new UnsupportedOperationException();
     }
 
     @NotNull
     @Override
-    default PermissionAttachment addAttachment(@NotNull Plugin plugin) {
+    default PermissionAttachment addAttachment(@NotNull final Plugin plugin) {
         throw new UnsupportedOperationException();
     }
 
     @NotNull
     @Override
-    default PermissionAttachment addAttachment(@NotNull Plugin plugin, @NotNull String name, boolean value, int ticks) {
+    default PermissionAttachment addAttachment(@NotNull final Plugin plugin, @NotNull final String name, final boolean value, final int ticks) {
         throw new UnsupportedOperationException();
     }
 
     @NotNull
     @Override
-    default PermissionAttachment addAttachment(@NotNull Plugin plugin, int ticks) {
+    default PermissionAttachment addAttachment(@NotNull final Plugin plugin, final int ticks) {
         throw new UnsupportedOperationException();
     }
 
     @Override
-    default void removeAttachment(@NotNull PermissionAttachment attachment) {
+    default void removeAttachment(@NotNull final PermissionAttachment attachment) {
         throw new UnsupportedOperationException();
     }
 
diff --git a/src/main/java/org/bukkit/command/MultipleCommandAlias.java b/src/main/java/org/bukkit/command/MultipleCommandAlias.java
index d07f28ac39426456dfa743832eebee42dcca883d..6bfa4ba3471e99cd9912dec5eab7285af5ff1956 100644
--- a/src/main/java/org/bukkit/command/MultipleCommandAlias.java
+++ b/src/main/java/org/bukkit/command/MultipleCommandAlias.java
@@ -8,7 +8,7 @@ import org.jetbrains.annotations.NotNull;
 public class MultipleCommandAlias extends Command {
     private final Command[] commands;
 
-    public MultipleCommandAlias(@NotNull String name, @NotNull Command[] commands) {
+    public MultipleCommandAlias(@NotNull final String name, @NotNull final Command[] commands) {
         super(name);
         this.commands = commands;
     }
@@ -24,10 +24,10 @@ public class MultipleCommandAlias extends Command {
     }
 
     @Override
-    public boolean execute(@NotNull CommandSender sender, @NotNull String commandLabel, @NotNull String[] args) {
+    public boolean execute(@NotNull final CommandSender sender, @NotNull final String commandLabel, @NotNull final String[] args) {
         boolean result = false;
 
-        for (Command command : commands) {
+        for (final Command command : commands) {
             result |= command.execute(sender, commandLabel, args);
         }
 
diff --git a/src/main/java/org/bukkit/command/PluginCommand.java b/src/main/java/org/bukkit/command/PluginCommand.java
index d4d5fd7563500606e8d7447e9a0431aa1224fb47..50ac021eaf3f85aed4be0c068188296ac1630cca 100644
--- a/src/main/java/org/bukkit/command/PluginCommand.java
+++ b/src/main/java/org/bukkit/command/PluginCommand.java
@@ -14,7 +14,7 @@ public final class PluginCommand extends Command implements PluginIdentifiableCo
     private CommandExecutor executor;
     private @Nullable TabCompleter completer;
 
-    protected PluginCommand(@NotNull String name, @NotNull Plugin owner) {
+    protected PluginCommand(@NotNull final String name, @NotNull final Plugin owner) {
         super(name);
         this.executor = owner;
         this.owningPlugin = owner;
@@ -30,7 +30,7 @@ public final class PluginCommand extends Command implements PluginIdentifiableCo
      * @return true if the command was successful, otherwise false
      */
     @Override
-    public boolean execute(@NotNull CommandSender sender, @NotNull String commandLabel, @NotNull String[] args) {
+    public boolean execute(@NotNull final CommandSender sender, @NotNull final String commandLabel, @NotNull final String[] args) {
         boolean success = false;
 
         if (!owningPlugin.isEnabled()) {
@@ -43,12 +43,12 @@ public final class PluginCommand extends Command implements PluginIdentifiableCo
 
         try {
             success = executor.onCommand(sender, this, commandLabel, args);
-        } catch (Throwable ex) {
+        } catch (final Throwable ex) {
             throw new CommandException("Unhandled exception executing command '" + commandLabel + "' in plugin " + owningPlugin.getDescription().getFullName(), ex);
         }
 
         if (!success && usageMessage.length() > 0) {
-            for (String line : usageMessage.replace("<command>", commandLabel).split("\n")) {
+            for (final String line : usageMessage.replace("<command>", commandLabel).split("\n")) {
                 sender.sendMessage(line);
             }
         }
@@ -61,7 +61,7 @@ public final class PluginCommand extends Command implements PluginIdentifiableCo
      *
      * @param executor New executor to run
      */
-    public void setExecutor(@Nullable CommandExecutor executor) {
+    public void setExecutor(@Nullable final CommandExecutor executor) {
         this.executor = executor == null ? owningPlugin : executor;
     }
 
@@ -83,7 +83,7 @@ public final class PluginCommand extends Command implements PluginIdentifiableCo
      *
      * @param completer New tab completer
      */
-    public void setTabCompleter(@Nullable TabCompleter completer) {
+    public void setTabCompleter(@Nullable final TabCompleter completer) {
         this.completer = completer;
     }
 
@@ -127,7 +127,7 @@ public final class PluginCommand extends Command implements PluginIdentifiableCo
      */
     @NotNull
     @Override
-    public java.util.List<String> tabComplete(@NotNull CommandSender sender, @NotNull String alias, String @Nullable [] args) throws CommandException, IllegalArgumentException {
+    public java.util.List<String> tabComplete(@NotNull final CommandSender sender, @NotNull final String alias, final String @Nullable [] args) throws CommandException, IllegalArgumentException {
         Preconditions.checkArgument(sender != null, "Sender cannot be null");
         Preconditions.checkArgument(args != null, "Arguments cannot be null");
         Preconditions.checkArgument(alias != null, "Alias cannot be null");
@@ -140,10 +140,10 @@ public final class PluginCommand extends Command implements PluginIdentifiableCo
             if (completions == null && executor instanceof TabCompleter) {
                 completions = ((TabCompleter) executor).onTabComplete(sender, this, alias, args);
             }
-        } catch (Throwable ex) {
-            StringBuilder message = new StringBuilder();
+        } catch (final Throwable ex) {
+            final StringBuilder message = new StringBuilder();
             message.append("Unhandled exception during tab completion for command '/").append(alias).append(' ');
-            for (String arg : args) {
+            for (final String arg : args) {
                 message.append(arg).append(' ');
             }
             message.deleteCharAt(message.length() - 1).append("' in plugin ").append(owningPlugin.getDescription().getFullName());
@@ -158,7 +158,7 @@ public final class PluginCommand extends Command implements PluginIdentifiableCo
 
     @Override
     public @NotNull String toString() {
-        StringBuilder stringBuilder = new StringBuilder(super.toString());
+        final StringBuilder stringBuilder = new StringBuilder(super.toString());
         stringBuilder.deleteCharAt(stringBuilder.length() - 1);
         stringBuilder.append(", ").append(owningPlugin.getDescription().getFullName()).append(')');
         return stringBuilder.toString();
diff --git a/src/main/java/org/bukkit/command/PluginCommandYamlParser.java b/src/main/java/org/bukkit/command/PluginCommandYamlParser.java
index 5c2eb532607f4886d9a3e121ba8b7b0696da5463..8e1e7b0774b87e68d768875660b22215864d71e9 100644
--- a/src/main/java/org/bukkit/command/PluginCommandYamlParser.java
+++ b/src/main/java/org/bukkit/command/PluginCommandYamlParser.java
@@ -11,26 +11,26 @@ import org.jetbrains.annotations.NotNull;
 public class PluginCommandYamlParser {
 
     @NotNull
-    public static List<Command> parse(@NotNull Plugin plugin) {
-        List<Command> pluginCmds = new ArrayList<Command>();
+    public static List<Command> parse(@NotNull final Plugin plugin) {
+        final List<Command> pluginCmds = new ArrayList<Command>();
 
-        Map<String, Map<String, Object>> map = plugin.getDescription().getCommands();
+        final Map<String, Map<String, Object>> map = plugin.getDescription().getCommands();
 
         if (map == null) {
             return pluginCmds;
         }
 
-        for (Entry<String, Map<String, Object>> entry : map.entrySet()) {
+        for (final Entry<String, Map<String, Object>> entry : map.entrySet()) {
             if (entry.getKey().contains(":")) {
                 Bukkit.getServer().getLogger().severe("Could not load command " + entry.getKey() + " for plugin " + plugin.getName() + ": Illegal Characters");
                 continue;
             }
-            Command newCmd = new PluginCommand(entry.getKey(), plugin);
-            Object description = entry.getValue().get("description");
-            Object usage = entry.getValue().get("usage");
-            Object aliases = entry.getValue().get("aliases");
-            Object permission = entry.getValue().get("permission");
-            Object permissionMessage = entry.getValue().get("permission-message");
+            final Command newCmd = new PluginCommand(entry.getKey(), plugin);
+            final Object description = entry.getValue().get("description");
+            final Object usage = entry.getValue().get("usage");
+            final Object aliases = entry.getValue().get("aliases");
+            final Object permission = entry.getValue().get("permission");
+            final Object permissionMessage = entry.getValue().get("permission-message");
 
             if (description != null) {
                 newCmd.setDescription(description.toString());
@@ -41,10 +41,10 @@ public class PluginCommandYamlParser {
             }
 
             if (aliases != null) {
-                List<String> aliasList = new ArrayList<String>();
+                final List<String> aliasList = new ArrayList<String>();
 
                 if (aliases instanceof List) {
-                    for (Object o : (List<?>) aliases) {
+                    for (final Object o : (List<?>) aliases) {
                         if (o.toString().contains(":")) {
                             Bukkit.getServer().getLogger().severe("Could not load alias " + o + " for plugin " + plugin.getName() + ": Illegal Characters");
                             continue;
diff --git a/src/main/java/org/bukkit/command/SimpleCommandMap.java b/src/main/java/org/bukkit/command/SimpleCommandMap.java
index 4bab1bebcea140408c21040a49eafc6d9f19f0e9..20e496b7cb585276cfff36d535a83d680193a066 100644
--- a/src/main/java/org/bukkit/command/SimpleCommandMap.java
+++ b/src/main/java/org/bukkit/command/SimpleCommandMap.java
@@ -45,9 +45,9 @@ public class SimpleCommandMap implements CommandMap {
      * {@inheritDoc}
      */
     @Override
-    public void registerAll(@NotNull String fallbackPrefix, @NotNull List<Command> commands) {
+    public void registerAll(@NotNull final String fallbackPrefix, @NotNull final List<Command> commands) {
         if (commands != null) {
-            for (Command c : commands) {
+            for (final Command c : commands) {
                 register(fallbackPrefix, c);
             }
         }
@@ -57,7 +57,7 @@ public class SimpleCommandMap implements CommandMap {
      * {@inheritDoc}
      */
     @Override
-    public boolean register(@NotNull String fallbackPrefix, @NotNull Command command) {
+    public boolean register(@NotNull final String fallbackPrefix, @NotNull final Command command) {
         return register(command.getName(), fallbackPrefix, command);
     }
 
@@ -65,13 +65,13 @@ public class SimpleCommandMap implements CommandMap {
      * {@inheritDoc}
      */
     @Override
-    public boolean register(@NotNull String label, @NotNull String fallbackPrefix, @NotNull Command command) {
+    public boolean register(@NotNull String label, @NotNull String fallbackPrefix, @NotNull final Command command) {
         command.timings = co.aikar.timings.TimingsManager.getCommandTiming(fallbackPrefix, command); // Paper
         label = label.toLowerCase(java.util.Locale.ENGLISH).trim();
         fallbackPrefix = fallbackPrefix.toLowerCase(java.util.Locale.ENGLISH).trim();
-        boolean registered = register(label, command, false, fallbackPrefix);
+        final boolean registered = register(label, command, false, fallbackPrefix);
 
-        Iterator<String> iterator = command.getAliases().iterator();
+        final Iterator<String> iterator = command.getAliases().iterator();
         while (iterator.hasNext()) {
             if (!register(iterator.next(), command, true, fallbackPrefix)) {
                 iterator.remove();
@@ -100,7 +100,7 @@ public class SimpleCommandMap implements CommandMap {
      *     unique address
      * @return true if command was registered, false otherwise.
      */
-    private synchronized boolean register(@NotNull String label, @NotNull Command command, boolean isAlias, @NotNull String fallbackPrefix) {
+    private synchronized boolean register(@NotNull final String label, @NotNull final Command command, final boolean isAlias, @NotNull final String fallbackPrefix) {
         knownCommands.put(fallbackPrefix + ":" + label, command);
         if ((command instanceof BukkitCommand || isAlias) && knownCommands.containsKey(label)) {
             // Request is for an alias/fallback command and it conflicts with
@@ -109,10 +109,10 @@ public class SimpleCommandMap implements CommandMap {
             return false;
         }
 
-        boolean registered = true;
+        final boolean registered = true;
 
         // If the command exists but is an alias we overwrite it, otherwise we return
-        Command conflict = knownCommands.get(label);
+        final Command conflict = knownCommands.get(label);
         if (conflict != null && conflict.getLabel().equals(label)) {
             return false;
         }
@@ -129,15 +129,15 @@ public class SimpleCommandMap implements CommandMap {
      * {@inheritDoc}
      */
     @Override
-    public boolean dispatch(@NotNull CommandSender sender, @NotNull String commandLine) throws CommandException {
-        String[] args = org.apache.commons.lang3.StringUtils.split(commandLine, ' '); // Paper - fix adjacent spaces (from console/plugins) causing empty array elements
+    public boolean dispatch(@NotNull final CommandSender sender, @NotNull final String commandLine) throws CommandException {
+        final String[] args = org.apache.commons.lang3.StringUtils.split(commandLine, ' '); // Paper - fix adjacent spaces (from console/plugins) causing empty array elements
 
         if (args.length == 0) {
             return false;
         }
 
-        String sentCommandLabel = args[0].toLowerCase(java.util.Locale.ENGLISH);
-        Command target = getCommand(sentCommandLabel);
+        final String sentCommandLabel = args[0].toLowerCase(java.util.Locale.ENGLISH);
+        final Command target = getCommand(sentCommandLabel);
 
         if (target == null) {
             return false;
@@ -150,17 +150,17 @@ public class SimpleCommandMap implements CommandMap {
         // Paper end
 
         try {
-            try (co.aikar.timings.Timing ignored = target.timings.startTiming()) { // Paper - use try with resources
+            try (final co.aikar.timings.Timing ignored = target.timings.startTiming()) { // Paper - use try with resources
             // Note: we don't return the result of target.execute as thats success / failure, we return handled (true) or not handled (false)
             target.execute(sender, sentCommandLabel, Arrays.copyOfRange(args, 1, args.length));
             } // target.timings.stopTiming(); // Spigot // Paper
-        } catch (CommandException ex) {
+        } catch (final CommandException ex) {
             server.getPluginManager().callEvent(new com.destroystokyo.paper.event.server.ServerExceptionEvent(new com.destroystokyo.paper.exception.ServerCommandException(ex, target, sender, args))); // Paper
             //target.timings.stopTiming(); // Spigot // Paper
             throw ex;
-        } catch (Throwable ex) {
+        } catch (final Throwable ex) {
             //target.timings.stopTiming(); // Spigot // Paper
-            String msg = "Unhandled exception executing '" + commandLine + "' in " + target;
+            final String msg = "Unhandled exception executing '" + commandLine + "' in " + target;
             server.getPluginManager().callEvent(new com.destroystokyo.paper.event.server.ServerExceptionEvent(new com.destroystokyo.paper.exception.ServerCommandException(ex, target, sender, args))); // Paper
             throw new CommandException(msg, ex);
         }
@@ -171,7 +171,7 @@ public class SimpleCommandMap implements CommandMap {
 
     @Override
     public synchronized void clearCommands() {
-        for (Map.Entry<String, Command> entry : knownCommands.entrySet()) {
+        for (final Map.Entry<String, Command> entry : knownCommands.entrySet()) {
             entry.getValue().unregister(this);
         }
         knownCommands.clear();
@@ -180,39 +180,39 @@ public class SimpleCommandMap implements CommandMap {
 
     @Override
     @Nullable
-    public Command getCommand(@NotNull String name) {
-        Command target = knownCommands.get(name.toLowerCase(java.util.Locale.ENGLISH));
+    public Command getCommand(@NotNull final String name) {
+        final Command target = knownCommands.get(name.toLowerCase(java.util.Locale.ENGLISH));
         return target;
     }
 
     @Override
     @Nullable
-    public List<String> tabComplete(@NotNull CommandSender sender, @NotNull String cmdLine) {
+    public List<String> tabComplete(@NotNull final CommandSender sender, @NotNull final String cmdLine) {
         return tabComplete(sender, cmdLine, null);
     }
 
     @Override
     @Nullable
-    public List<String> tabComplete(@NotNull CommandSender sender, @NotNull String cmdLine, @Nullable Location location) {
+    public List<String> tabComplete(@NotNull final CommandSender sender, @NotNull final String cmdLine, @Nullable final Location location) {
         Preconditions.checkArgument(sender != null, "Sender cannot be null");
         Preconditions.checkArgument(cmdLine != null, "Command line cannot null");
 
-        int spaceIndex = cmdLine.indexOf(' ');
+        final int spaceIndex = cmdLine.indexOf(' ');
 
         if (spaceIndex == -1) {
-            ArrayList<String> completions = new ArrayList<String>();
-            Map<String, Command> knownCommands = this.knownCommands;
+            final ArrayList<String> completions = new ArrayList<String>();
+            final Map<String, Command> knownCommands = this.knownCommands;
 
             final String prefix = (sender instanceof Player ? "/" : "");
 
-            for (Map.Entry<String, Command> commandEntry : knownCommands.entrySet()) {
-                Command command = commandEntry.getValue();
+            for (final Map.Entry<String, Command> commandEntry : knownCommands.entrySet()) {
+                final Command command = commandEntry.getValue();
 
                 if (!command.testPermissionSilent(sender)) {
                     continue;
                 }
 
-                String name = commandEntry.getKey(); // Use the alias, not command name
+                final String name = commandEntry.getKey(); // Use the alias, not command name
 
                 if (StringUtil.startsWithIgnoreCase(name, cmdLine)) {
                     completions.add(prefix + name);
@@ -223,8 +223,8 @@ public class SimpleCommandMap implements CommandMap {
             return completions;
         }
 
-        String commandName = cmdLine.substring(0, spaceIndex);
-        Command target = getCommand(commandName);
+        final String commandName = cmdLine.substring(0, spaceIndex);
+        final Command target = getCommand(commandName);
 
         if (target == null) {
             return null;
@@ -234,14 +234,14 @@ public class SimpleCommandMap implements CommandMap {
             return null;
         }
 
-        String[] args = cmdLine.substring(spaceIndex + 1).split(" ", -1);
+        final String[] args = cmdLine.substring(spaceIndex + 1).split(" ", -1);
 
         try {
             return target.tabComplete(sender, commandName, args, location);
-        } catch (CommandException ex) {
+        } catch (final CommandException ex) {
             throw ex;
-        } catch (Throwable ex) {
-            String msg = "Unhandled exception executing tab-completer for '" + cmdLine + "' in " + target;
+        } catch (final Throwable ex) {
+            final String msg = "Unhandled exception executing tab-completer for '" + cmdLine + "' in " + target;
             server.getPluginManager().callEvent(new com.destroystokyo.paper.event.server.ServerExceptionEvent(new com.destroystokyo.paper.exception.ServerTabCompleteException(msg, ex, target, sender, args))); // Paper
             throw new CommandException(msg, ex);
         }
@@ -253,22 +253,22 @@ public class SimpleCommandMap implements CommandMap {
     }
 
     public void registerServerAliases() {
-        Map<String, String[]> values = server.getCommandAliases();
+        final Map<String, String[]> values = server.getCommandAliases();
 
-        for (Map.Entry<String, String[]> entry : values.entrySet()) {
-            String alias = entry.getKey();
+        for (final Map.Entry<String, String[]> entry : values.entrySet()) {
+            final String alias = entry.getKey();
             if (alias.contains(" ")) {
                 server.getLogger().warning("Could not register alias " + alias + " because it contains illegal characters");
                 continue;
             }
 
-            String[] commandStrings = entry.getValue();
-            List<String> targets = new ArrayList<String>();
-            StringBuilder bad = new StringBuilder();
+            final String[] commandStrings = entry.getValue();
+            final List<String> targets = new ArrayList<String>();
+            final StringBuilder bad = new StringBuilder();
 
-            for (String commandString : commandStrings) {
-                String[] commandArgs = commandString.split(" ");
-                Command command = getCommand(commandArgs[0]);
+            for (final String commandString : commandStrings) {
+                final String[] commandArgs = commandString.split(" ");
+                final Command command = getCommand(commandArgs[0]);
 
                 if (command == null) {
                     if (bad.length() > 0) {
diff --git a/src/main/java/org/bukkit/command/defaults/BukkitCommand.java b/src/main/java/org/bukkit/command/defaults/BukkitCommand.java
index cb032d038f52e6b9cf51c203cfc01cc4a7622772..4e985663f7922da7fe412898d12f2408cb1b1928 100644
--- a/src/main/java/org/bukkit/command/defaults/BukkitCommand.java
+++ b/src/main/java/org/bukkit/command/defaults/BukkitCommand.java
@@ -5,11 +5,11 @@ import org.bukkit.command.Command;
 import org.jetbrains.annotations.NotNull;
 
 public abstract class BukkitCommand extends Command {
-    protected BukkitCommand(@NotNull String name) {
+    protected BukkitCommand(@NotNull final String name) {
         super(name);
     }
 
-    protected BukkitCommand(@NotNull String name, @NotNull String description, @NotNull String usageMessage, @NotNull List<String> aliases) {
+    protected BukkitCommand(@NotNull final String name, @NotNull final String description, @NotNull final String usageMessage, @NotNull final List<String> aliases) {
         super(name, description, usageMessage, aliases);
     }
 }
diff --git a/src/main/java/org/bukkit/command/defaults/HelpCommand.java b/src/main/java/org/bukkit/command/defaults/HelpCommand.java
index 7c5e83b5dc56d2f0a9aeff8934e13c43f3d02507..eefcd0ebe7822952b4bd4f0f0dc65840df93c838 100644
--- a/src/main/java/org/bukkit/command/defaults/HelpCommand.java
+++ b/src/main/java/org/bukkit/command/defaults/HelpCommand.java
@@ -32,13 +32,13 @@ public class HelpCommand extends BukkitCommand {
     }
 
     @Override
-    public boolean execute(@NotNull CommandSender sender, @NotNull String currentAlias, @NotNull String @NotNull [] args) {
+    public boolean execute(@NotNull final CommandSender sender, @NotNull final String currentAlias, @NotNull final String @NotNull [] args) {
         if (!testPermission(sender)) return true;
 
-        String command;
+        final String command;
         int pageNumber;
-        int pageHeight;
-        int pageWidth;
+        final int pageHeight;
+        final int pageWidth;
 
         if (args.length == 0) {
             command = "";
@@ -47,7 +47,7 @@ public class HelpCommand extends BukkitCommand {
             command = Joiner.on(" ").join(Arrays.copyOfRange(args, 0, args.length - 1));
             try {
                 pageNumber = Integer.decode(args[args.length - 1]).intValue();
-            } catch (NumberFormatException exception) {
+            } catch (final NumberFormatException exception) {
                 pageNumber = 1;
             }
             if (pageNumber <= 0) {
@@ -66,7 +66,7 @@ public class HelpCommand extends BukkitCommand {
             pageWidth = ChatPaginator.GUARANTEED_NO_WRAP_CHAT_PAGE_WIDTH;
         }
 
-        HelpMap helpMap = Bukkit.getServer().getHelpMap();
+        final HelpMap helpMap = Bukkit.getServer().getHelpMap();
         HelpTopic topic = helpMap.getHelpTopic(command);
 
         if (topic == null) {
@@ -82,9 +82,9 @@ public class HelpCommand extends BukkitCommand {
             return true;
         }
 
-        ChatPaginator.ChatPage page = ChatPaginator.paginate(topic.getFullText(sender), pageNumber, pageWidth, pageHeight);
+        final ChatPaginator.ChatPage page = ChatPaginator.paginate(topic.getFullText(sender), pageNumber, pageWidth, pageHeight);
 
-        StringBuilder header = new StringBuilder();
+        final StringBuilder header = new StringBuilder();
         header.append(ChatColor.YELLOW);
         header.append("--------- ");
         header.append(ChatColor.WHITE);
@@ -111,19 +111,19 @@ public class HelpCommand extends BukkitCommand {
 
     @NotNull
     @Override
-    public List<String> tabComplete(@NotNull CommandSender sender, @NotNull String alias, @NotNull String @NotNull [] args) {
+    public List<String> tabComplete(@NotNull final CommandSender sender, @NotNull final String alias, @NotNull final String @NotNull [] args) {
         Preconditions.checkArgument(sender != null, "Sender cannot be null");
         Preconditions.checkArgument(args != null, "Arguments cannot be null");
         Preconditions.checkArgument(alias != null, "Alias cannot be null");
 
         if (args.length == 1) {
-            List<String> matchedTopics = new ArrayList<String>();
-            String searchString = args[0];
-            for (HelpTopic topic : Bukkit.getServer().getHelpMap().getHelpTopics()) {
+            final List<String> matchedTopics = new ArrayList<String>();
+            final String searchString = args[0];
+            for (final HelpTopic topic : Bukkit.getServer().getHelpMap().getHelpTopics()) {
                 if (!topic.canSee(sender)) {
                     continue;
                 }
-                String trimmedTopic = topic.getName().startsWith("/") ? topic.getName().substring(1) : topic.getName();
+                final String trimmedTopic = topic.getName().startsWith("/") ? topic.getName().substring(1) : topic.getName();
 
                 if (trimmedTopic.startsWith(searchString)) {
                     matchedTopics.add(trimmedTopic);
@@ -136,15 +136,15 @@ public class HelpCommand extends BukkitCommand {
 
     @Nullable
     protected HelpTopic findPossibleMatches(@NotNull String searchString) {
-        int maxDistance = (searchString.length() / 5) + 3;
-        Set<HelpTopic> possibleMatches = new TreeSet<HelpTopic>(HelpTopicComparator.helpTopicComparatorInstance());
+        final int maxDistance = (searchString.length() / 5) + 3;
+        final Set<HelpTopic> possibleMatches = new TreeSet<HelpTopic>(HelpTopicComparator.helpTopicComparatorInstance());
 
         if (searchString.startsWith("/")) {
             searchString = searchString.substring(1);
         }
 
-        for (HelpTopic topic : Bukkit.getServer().getHelpMap().getHelpTopics()) {
-            String trimmedTopic = topic.getName().startsWith("/") ? topic.getName().substring(1) : topic.getName();
+        for (final HelpTopic topic : Bukkit.getServer().getHelpMap().getHelpTopics()) {
+            final String trimmedTopic = topic.getName().startsWith("/") ? topic.getName().substring(1) : topic.getName();
 
             if (trimmedTopic.length() < searchString.length()) {
                 continue;
@@ -175,7 +175,7 @@ public class HelpCommand extends BukkitCommand {
      * @return The number of substitutions, deletions, insertions, and
      * transpositions required to get from s1 to s2.
      */
-    protected static int damerauLevenshteinDistance(@Nullable String s1, @Nullable String s2) {
+    protected static int damerauLevenshteinDistance(@Nullable final String s1, @Nullable final String s2) {
         if (s1 == null && s2 == null) {
             return 0;
         }
@@ -186,11 +186,11 @@ public class HelpCommand extends BukkitCommand {
             return s2.length();
         }
 
-        int s1Len = s1.length();
-        int s2Len = s2.length();
-        int[][] H = new int[s1Len + 2][s2Len + 2];
+        final int s1Len = s1.length();
+        final int s2Len = s2.length();
+        final int[][] H = new int[s1Len + 2][s2Len + 2];
 
-        int INF = s1Len + s2Len;
+        final int INF = s1Len + s2Len;
         H[0][0] = INF;
         for (int i = 0; i <= s1Len; i++) {
             H[i + 1][1] = i;
@@ -201,8 +201,8 @@ public class HelpCommand extends BukkitCommand {
             H[0][j + 1] = INF;
         }
 
-        Map<Character, Integer> sd = new HashMap<Character, Integer>();
-        for (char Letter : (s1 + s2).toCharArray()) {
+        final Map<Character, Integer> sd = new HashMap<Character, Integer>();
+        for (final char Letter : (s1 + s2).toCharArray()) {
             if (!sd.containsKey(Character.valueOf(Letter))) {
                 sd.put(Character.valueOf(Letter), Integer.valueOf(0));
             }
@@ -211,8 +211,8 @@ public class HelpCommand extends BukkitCommand {
         for (int i = 1; i <= s1Len; i++) {
             int DB = 0;
             for (int j = 1; j <= s2Len; j++) {
-                int i1 = sd.get(Character.valueOf(s2.charAt(j - 1))).intValue();
-                int j1 = DB;
+                final int i1 = sd.get(Character.valueOf(s2.charAt(j - 1))).intValue();
+                final int j1 = DB;
 
                 if (s1.charAt(i - 1) == s2.charAt(j - 1)) {
                     H[i + 1][j + 1] = H[i][j];
diff --git a/src/main/java/org/bukkit/command/defaults/PluginsCommand.java b/src/main/java/org/bukkit/command/defaults/PluginsCommand.java
index 1473b4c0c883edeac0d85ee0acf8a28f7e6d208a..7444656f4d339089c90bc04848ddd5adac4a8158 100644
--- a/src/main/java/org/bukkit/command/defaults/PluginsCommand.java
+++ b/src/main/java/org/bukkit/command/defaults/PluginsCommand.java
@@ -13,7 +13,7 @@ import org.bukkit.plugin.Plugin;
 import org.jetbrains.annotations.NotNull;
 
 public class PluginsCommand extends BukkitCommand {
-    public PluginsCommand(@NotNull String name) {
+    public PluginsCommand(@NotNull final String name) {
         super(name);
         this.description = "Gets a list of plugins running on the server";
         this.usageMessage = "/plugins";
@@ -22,7 +22,7 @@ public class PluginsCommand extends BukkitCommand {
     }
 
     @Override
-    public boolean execute(@NotNull CommandSender sender, @NotNull String currentAlias, @NotNull String[] args) {
+    public boolean execute(@NotNull final CommandSender sender, @NotNull final String currentAlias, @NotNull final String[] args) {
         if (!testPermission(sender)) return true;
 
         sender.sendMessage("Plugins " + getPluginList());
@@ -31,27 +31,27 @@ public class PluginsCommand extends BukkitCommand {
 
     @NotNull
     @Override
-    public List<String> tabComplete(@NotNull CommandSender sender, @NotNull String alias, @NotNull String[] args) throws IllegalArgumentException {
+    public List<String> tabComplete(@NotNull final CommandSender sender, @NotNull final String alias, @NotNull final String[] args) throws IllegalArgumentException {
         return Collections.emptyList();
     }
 
     @NotNull
     private String getPluginList() {
         // Paper start
-        TreeMap<String, Plugin> plugins = new TreeMap<>(String.CASE_INSENSITIVE_ORDER);
+        final TreeMap<String, Plugin> plugins = new TreeMap<>(String.CASE_INSENSITIVE_ORDER);
 
-        for (Plugin plugin : Bukkit.getPluginManager().getPlugins()) {
+        for (final Plugin plugin : Bukkit.getPluginManager().getPlugins()) {
             plugins.put(plugin.getDescription().getName(), plugin);
         }
 
-        StringBuilder pluginList = new StringBuilder();
-        for (Map.Entry<String, Plugin> entry : plugins.entrySet()) {
+        final StringBuilder pluginList = new StringBuilder();
+        for (final Map.Entry<String, Plugin> entry : plugins.entrySet()) {
             if (pluginList.length() > 0) {
                 pluginList.append(ChatColor.WHITE);
                 pluginList.append(", ");
             }
 
-            Plugin plugin = entry.getValue();
+            final Plugin plugin = entry.getValue();
 
             pluginList.append(plugin.isEnabled() ? ChatColor.GREEN : ChatColor.RED);
             // Paper start - Add an asterisk to legacy plugins (so admins are aware)
diff --git a/src/main/java/org/bukkit/command/defaults/ReloadCommand.java b/src/main/java/org/bukkit/command/defaults/ReloadCommand.java
index 050c3c9b170ca400cb59417349ed4cb627bd120b..bd999f4887409bd3474f3775330e0081002a077d 100644
--- a/src/main/java/org/bukkit/command/defaults/ReloadCommand.java
+++ b/src/main/java/org/bukkit/command/defaults/ReloadCommand.java
@@ -8,7 +8,7 @@ import org.bukkit.command.CommandSender;
 import org.jetbrains.annotations.NotNull;
 
 public class ReloadCommand extends BukkitCommand {
-    public ReloadCommand(@NotNull String name) {
+    public ReloadCommand(@NotNull final String name) {
         super(name);
         this.description = "Reloads the server configuration and plugins";
         this.usageMessage = "/reload [permissions|commands|confirm]"; // Paper
@@ -17,7 +17,7 @@ public class ReloadCommand extends BukkitCommand {
     }
 
     @Override
-    public boolean execute(@NotNull CommandSender sender, @NotNull String currentAlias, @NotNull String @NotNull [] args) { // Paper
+    public boolean execute(@NotNull final CommandSender sender, @NotNull final String currentAlias, @NotNull final String @NotNull [] args) { // Paper
         if (!testPermission(sender)) return true;
 
         // Paper start - Reload permissions.yml & require confirm
@@ -57,7 +57,7 @@ public class ReloadCommand extends BukkitCommand {
 
     @NotNull
     @Override
-    public List<String> tabComplete(@NotNull CommandSender sender, @NotNull String alias, @NotNull String[] args) throws IllegalArgumentException {
+    public List<String> tabComplete(@NotNull final CommandSender sender, @NotNull final String alias, @NotNull final String[] args) throws IllegalArgumentException {
         return com.google.common.collect.Lists.newArrayList("permissions", "commands"); // Paper
     }
 }
diff --git a/src/main/java/org/bukkit/command/defaults/VersionCommand.java b/src/main/java/org/bukkit/command/defaults/VersionCommand.java
index 694495b753ffbc1d4750d02852f18ded359b6e0b..6e90504fa3e7912cd1b3687616a9db951dbc1909 100644
--- a/src/main/java/org/bukkit/command/defaults/VersionCommand.java
+++ b/src/main/java/org/bukkit/command/defaults/VersionCommand.java
@@ -38,7 +38,7 @@ public class VersionCommand extends BukkitCommand {
         return versionFetcher;
     }
 
-    public VersionCommand(@NotNull String name) {
+    public VersionCommand(@NotNull final String name) {
         super(name);
 
         this.description = "Gets the version of this server including any plugins in use";
@@ -48,16 +48,16 @@ public class VersionCommand extends BukkitCommand {
     }
 
     @Override
-    public boolean execute(@NotNull CommandSender sender, @NotNull String currentAlias, @NotNull String @NotNull [] args) {
+    public boolean execute(@NotNull final CommandSender sender, @NotNull final String currentAlias, @NotNull final String @NotNull [] args) {
         if (!testPermission(sender)) return true;
 
         if (args.length == 0) {
             //sender.sendMessage("This server is running " + Bukkit.getName() + " version " + Bukkit.getVersion() + " (Implementing API version " + Bukkit.getBukkitVersion() + ")"); // Paper - moved to setVersionMessage
             sendVersion(sender);
         } else {
-            StringBuilder name = new StringBuilder();
+            final StringBuilder name = new StringBuilder();
 
-            for (String arg : args) {
+            for (final String arg : args) {
                 if (name.length() > 0) {
                     name.append(' ');
                 }
@@ -66,7 +66,7 @@ public class VersionCommand extends BukkitCommand {
             }
 
             String pluginName = name.toString();
-            Plugin exactPlugin = Bukkit.getPluginManager().getPlugin(pluginName);
+            final Plugin exactPlugin = Bukkit.getPluginManager().getPlugin(pluginName);
             if (exactPlugin != null) {
                 describeToSender(exactPlugin, sender);
                 return true;
@@ -74,7 +74,7 @@ public class VersionCommand extends BukkitCommand {
 
             boolean found = false;
             pluginName = pluginName.toLowerCase(java.util.Locale.ENGLISH);
-            for (Plugin plugin : Bukkit.getPluginManager().getPlugins()) {
+            for (final Plugin plugin : Bukkit.getPluginManager().getPlugins()) {
                 if (plugin.getName().toLowerCase(java.util.Locale.ENGLISH).contains(pluginName)) {
                     describeToSender(plugin, sender);
                     found = true;
@@ -89,8 +89,8 @@ public class VersionCommand extends BukkitCommand {
         return true;
     }
 
-    private void describeToSender(@NotNull Plugin plugin, @NotNull CommandSender sender) {
-        PluginDescriptionFile desc = plugin.getDescription();
+    private void describeToSender(@NotNull final Plugin plugin, @NotNull final CommandSender sender) {
+        final PluginDescriptionFile desc = plugin.getDescription();
         sender.sendMessage(ChatColor.GREEN + desc.getName() + ChatColor.WHITE + " version " + ChatColor.GREEN + desc.getVersion());
 
         if (desc.getDescription() != null) {
@@ -116,7 +116,7 @@ public class VersionCommand extends BukkitCommand {
 
     @NotNull
     private String getNameList(@NotNull final List<String> names) {
-        StringBuilder result = new StringBuilder();
+        final StringBuilder result = new StringBuilder();
 
         for (int i = 0; i < names.size(); i++) {
             if (result.length() > 0) {
@@ -138,15 +138,15 @@ public class VersionCommand extends BukkitCommand {
 
     @NotNull
     @Override
-    public List<String> tabComplete(@NotNull CommandSender sender, @NotNull String alias, @NotNull String @NotNull [] args) {
+    public List<String> tabComplete(@NotNull final CommandSender sender, @NotNull final String alias, @NotNull final String @NotNull [] args) {
         Preconditions.checkArgument(sender != null, "Sender cannot be null");
         Preconditions.checkArgument(args != null, "Arguments cannot be null");
         Preconditions.checkArgument(alias != null, "Alias cannot be null");
 
         if (args.length == 1) {
-            List<String> completions = new ArrayList<String>();
-            String toComplete = args[0].toLowerCase(java.util.Locale.ENGLISH);
-            for (Plugin plugin : Bukkit.getPluginManager().getPlugins()) {
+            final List<String> completions = new ArrayList<String>();
+            final String toComplete = args[0].toLowerCase(java.util.Locale.ENGLISH);
+            for (final Plugin plugin : Bukkit.getPluginManager().getPlugins()) {
                 if (StringUtil.startsWithIgnoreCase(plugin.getName(), toComplete)) {
                     completions.add(plugin.getName());
                 }
@@ -163,7 +163,7 @@ public class VersionCommand extends BukkitCommand {
     private boolean versionTaskStarted = false;
     private long lastCheck = 0;
 
-    private void sendVersion(@NotNull CommandSender sender) {
+    private void sendVersion(@NotNull final CommandSender sender) {
         if (hasVersion) {
             if (System.currentTimeMillis() - lastCheck > getVersionFetcher().getCacheTime()) { // Paper - use version supplier
                 lastCheck = System.currentTimeMillis();
@@ -197,7 +197,7 @@ public class VersionCommand extends BukkitCommand {
     }
 
     private void obtainVersion() {
-        String version = Bukkit.getVersion();
+        final String version = Bukkit.getVersion();
         // Paper start
         if (version.startsWith("null")) { // running from ide?
             setVersionMessage(net.kyori.adventure.text.Component.text("Unknown version, custom build?", net.kyori.adventure.text.format.NamedTextColor.YELLOW));
@@ -256,7 +256,7 @@ public class VersionCommand extends BukkitCommand {
         try {
             hasVersion = true;
             versionTaskStarted = false;
-            for (CommandSender sender : versionWaiters) {
+            for (final CommandSender sender : versionWaiters) {
                 sender.sendMessage(versionMessage);
             }
             versionWaiters.clear();
@@ -265,22 +265,22 @@ public class VersionCommand extends BukkitCommand {
         }
     }
 
-    private static int getDistance(@NotNull String repo, @NotNull String hash) {
+    private static int getDistance(@NotNull final String repo, @NotNull final String hash) {
         try {
-            BufferedReader reader = Resources.asCharSource(
+            final BufferedReader reader = Resources.asCharSource(
                     new URL("https://hub.spigotmc.org/stash/rest/api/1.0/projects/SPIGOT/repos/" + repo + "/commits?since=" + URLEncoder.encode(hash, "UTF-8") + "&withCounts=true"),
                     Charsets.UTF_8
             ).openBufferedStream();
             try {
-                JsonObject obj = new Gson().fromJson(reader, JsonObject.class);
+                final JsonObject obj = new Gson().fromJson(reader, JsonObject.class);
                 return obj.get("totalCount").getAsInt();
-            } catch (JsonSyntaxException ex) {
+            } catch (final JsonSyntaxException ex) {
                 ex.printStackTrace();
                 return -1;
             } finally {
                 reader.close();
             }
-        } catch (IOException e) {
+        } catch (final IOException e) {
             e.printStackTrace();
             return -1;
         }
diff --git a/src/main/java/org/bukkit/configuration/ConfigurationOptions.java b/src/main/java/org/bukkit/configuration/ConfigurationOptions.java
index faf443bcd34845490fde2971a2992edb5d9828da..791d4fad24b6f2b401c19484d587152d04bfd03b 100644
--- a/src/main/java/org/bukkit/configuration/ConfigurationOptions.java
+++ b/src/main/java/org/bukkit/configuration/ConfigurationOptions.java
@@ -11,7 +11,7 @@ public class ConfigurationOptions {
     private boolean copyDefaults = false;
     private final @NotNull Configuration configuration;
 
-    protected ConfigurationOptions(@NotNull Configuration configuration) {
+    protected ConfigurationOptions(@NotNull final Configuration configuration) {
         this.configuration = configuration;
     }
 
@@ -49,7 +49,7 @@ public class ConfigurationOptions {
      * @return This object, for chaining
      */
     @NotNull
-    public ConfigurationOptions pathSeparator(char value) {
+    public ConfigurationOptions pathSeparator(final char value) {
         this.pathSeparator = value;
         return this;
     }
@@ -88,7 +88,7 @@ public class ConfigurationOptions {
      * @return This object, for chaining
      */
     @NotNull
-    public ConfigurationOptions copyDefaults(boolean value) {
+    public ConfigurationOptions copyDefaults(final boolean value) {
         this.copyDefaults = value;
         return this;
     }
diff --git a/src/main/java/org/bukkit/configuration/InvalidConfigurationException.java b/src/main/java/org/bukkit/configuration/InvalidConfigurationException.java
index d23480e59f8f34d6a88e915bc368ecc8e434d281..76d47e1aecbf01d9b600eaa5f9eaf5f6b4d91ee8 100644
--- a/src/main/java/org/bukkit/configuration/InvalidConfigurationException.java
+++ b/src/main/java/org/bukkit/configuration/InvalidConfigurationException.java
@@ -18,7 +18,7 @@ public class InvalidConfigurationException extends Exception {
      *
      * @param msg The details of the exception.
      */
-    public InvalidConfigurationException(String msg) {
+    public InvalidConfigurationException(final String msg) {
         super(msg);
     }
 
@@ -28,7 +28,7 @@ public class InvalidConfigurationException extends Exception {
      *
      * @param cause The cause of the exception.
      */
-    public InvalidConfigurationException(Throwable cause) {
+    public InvalidConfigurationException(final Throwable cause) {
         super(cause);
     }
 
@@ -39,7 +39,7 @@ public class InvalidConfigurationException extends Exception {
      * @param cause The cause of the exception.
      * @param msg The details of the exception.
      */
-    public InvalidConfigurationException(String msg, Throwable cause) {
+    public InvalidConfigurationException(final String msg, final Throwable cause) {
         super(msg, cause);
     }
 }
diff --git a/src/main/java/org/bukkit/configuration/MemoryConfiguration.java b/src/main/java/org/bukkit/configuration/MemoryConfiguration.java
index ce5bcffba0ef2e63832f5f3f7d42a5595ab7ddd9..dd2e6e61702907d886a7a178d78fb37b13bec3c3 100644
--- a/src/main/java/org/bukkit/configuration/MemoryConfiguration.java
+++ b/src/main/java/org/bukkit/configuration/MemoryConfiguration.java
@@ -26,12 +26,12 @@ public class MemoryConfiguration extends MemorySection implements Configuration
      * @param defaults Default value provider
      * @throws IllegalArgumentException Thrown if defaults is null
      */
-    public MemoryConfiguration(@Nullable Configuration defaults) {
+    public MemoryConfiguration(@Nullable final Configuration defaults) {
         this.defaults = defaults;
     }
 
     @Override
-    public void addDefault(@NotNull String path, @Nullable Object value) {
+    public void addDefault(@NotNull final String path, @Nullable final Object value) {
         Preconditions.checkArgument(path != null, "Path may not be null");
 
         if (defaults == null) {
@@ -42,19 +42,19 @@ public class MemoryConfiguration extends MemorySection implements Configuration
     }
 
     @Override
-    public void addDefaults(@NotNull Map<String, Object> defaults) {
+    public void addDefaults(@NotNull final Map<String, Object> defaults) {
         Preconditions.checkArgument(defaults != null, "Defaults may not be null");
 
-        for (Map.Entry<String, Object> entry : defaults.entrySet()) {
+        for (final Map.Entry<String, Object> entry : defaults.entrySet()) {
             addDefault(entry.getKey(), entry.getValue());
         }
     }
 
     @Override
-    public void addDefaults(@NotNull Configuration defaults) {
+    public void addDefaults(@NotNull final Configuration defaults) {
         Preconditions.checkArgument(defaults != null, "Defaults may not be null");
 
-        for (String key : defaults.getKeys(true)) {
+        for (final String key : defaults.getKeys(true)) {
             if (!defaults.isConfigurationSection(key)) {
                 addDefault(key, defaults.get(key));
             }
@@ -62,7 +62,7 @@ public class MemoryConfiguration extends MemorySection implements Configuration
     }
 
     @Override
-    public void setDefaults(@NotNull Configuration defaults) {
+    public void setDefaults(@NotNull final Configuration defaults) {
         Preconditions.checkArgument(defaults != null, "Defaults may not be null");
 
         this.defaults = defaults;
diff --git a/src/main/java/org/bukkit/configuration/MemoryConfigurationOptions.java b/src/main/java/org/bukkit/configuration/MemoryConfigurationOptions.java
index ead85f6faee840404f4eaeba635a82df7796cb28..6afe09b5c7f22946f7b9be3a2cc46b440f635956 100644
--- a/src/main/java/org/bukkit/configuration/MemoryConfigurationOptions.java
+++ b/src/main/java/org/bukkit/configuration/MemoryConfigurationOptions.java
@@ -7,7 +7,7 @@ import org.jetbrains.annotations.NotNull;
  * MemoryConfiguration}
  */
 public class MemoryConfigurationOptions extends ConfigurationOptions {
-    protected MemoryConfigurationOptions(@NotNull MemoryConfiguration configuration) {
+    protected MemoryConfigurationOptions(@NotNull final MemoryConfiguration configuration) {
         super(configuration);
     }
 
@@ -19,14 +19,14 @@ public class MemoryConfigurationOptions extends ConfigurationOptions {
 
     @NotNull
     @Override
-    public MemoryConfigurationOptions copyDefaults(boolean value) {
+    public MemoryConfigurationOptions copyDefaults(final boolean value) {
         super.copyDefaults(value);
         return this;
     }
 
     @NotNull
     @Override
-    public MemoryConfigurationOptions pathSeparator(char value) {
+    public MemoryConfigurationOptions pathSeparator(final char value) {
         super.pathSeparator(value);
         return this;
     }
diff --git a/src/main/java/org/bukkit/configuration/MemorySection.java b/src/main/java/org/bukkit/configuration/MemorySection.java
index d24e9305139417f457cf2ab552fd9545cbbbd964..4844299a489d1d11d90d38fe3e271e7e8a9ea933 100644
--- a/src/main/java/org/bukkit/configuration/MemorySection.java
+++ b/src/main/java/org/bukkit/configuration/MemorySection.java
@@ -60,7 +60,7 @@ public class MemorySection implements ConfigurationSection {
      * @throws IllegalArgumentException Thrown is parent or path is null, or
      *     if parent contains no root Configuration.
      */
-    protected MemorySection(@NotNull ConfigurationSection parent, @NotNull String path) {
+    protected MemorySection(@NotNull final ConfigurationSection parent, @NotNull final String path) {
         Preconditions.checkArgument(parent != null, "Parent cannot be null");
         Preconditions.checkArgument(path != null, "Path cannot be null");
 
@@ -75,12 +75,12 @@ public class MemorySection implements ConfigurationSection {
 
     @Override
     @NotNull
-    public Set<String> getKeys(boolean deep) {
-        Set<String> result = new LinkedHashSet<String>();
+    public Set<String> getKeys(final boolean deep) {
+        final Set<String> result = new LinkedHashSet<String>();
 
-        Configuration root = getRoot();
+        final Configuration root = getRoot();
         if (root != null && root.options().copyDefaults()) {
-            ConfigurationSection defaults = getDefaultSection();
+            final ConfigurationSection defaults = getDefaultSection();
 
             if (defaults != null) {
                 result.addAll(defaults.getKeys(deep));
@@ -94,12 +94,12 @@ public class MemorySection implements ConfigurationSection {
 
     @Override
     @NotNull
-    public Map<String, Object> getValues(boolean deep) {
-        Map<String, Object> result = new LinkedHashMap<String, Object>();
+    public Map<String, Object> getValues(final boolean deep) {
+        final Map<String, Object> result = new LinkedHashMap<String, Object>();
 
-        Configuration root = getRoot();
+        final Configuration root = getRoot();
         if (root != null && root.options().copyDefaults()) {
-            ConfigurationSection defaults = getDefaultSection();
+            final ConfigurationSection defaults = getDefaultSection();
 
             if (defaults != null) {
                 result.putAll(defaults.getValues(deep));
@@ -112,18 +112,18 @@ public class MemorySection implements ConfigurationSection {
     }
 
     @Override
-    public boolean contains(@NotNull String path) {
+    public boolean contains(@NotNull final String path) {
         return contains(path, false);
     }
 
     @Override
-    public boolean contains(@NotNull String path, boolean ignoreDefault) {
+    public boolean contains(@NotNull final String path, final boolean ignoreDefault) {
         return ((ignoreDefault) ? get(path, null) : get(path)) != null;
     }
 
     @Override
-    public boolean isSet(@NotNull String path) {
-        Configuration root = getRoot();
+    public boolean isSet(@NotNull final String path) {
+        final Configuration root = getRoot();
         if (root == null) {
             return false;
         }
@@ -158,10 +158,10 @@ public class MemorySection implements ConfigurationSection {
     }
 
     @Override
-    public void addDefault(@NotNull String path, @Nullable Object value) {
+    public void addDefault(@NotNull final String path, @Nullable final Object value) {
         Preconditions.checkArgument(path != null, "Path cannot be null");
 
-        Configuration root = getRoot();
+        final Configuration root = getRoot();
         if (root == null) {
             throw new IllegalStateException("Cannot add default without root");
         }
@@ -174,8 +174,8 @@ public class MemorySection implements ConfigurationSection {
     @Override
     @Nullable
     public ConfigurationSection getDefaultSection() {
-        Configuration root = getRoot();
-        Configuration defaults = root == null ? null : root.getDefaults();
+        final Configuration root = getRoot();
+        final Configuration defaults = root == null ? null : root.getDefaults();
 
         if (defaults != null) {
             if (defaults.isConfigurationSection(getCurrentPath())) {
@@ -187,10 +187,10 @@ public class MemorySection implements ConfigurationSection {
     }
 
     @Override
-    public void set(@NotNull String path, @Nullable Object value) {
+    public void set(@NotNull final String path, @Nullable final Object value) {
         Preconditions.checkArgument(!Strings.isNullOrEmpty(path), "Cannot set to an empty path");
 
-        Configuration root = getRoot();
+        final Configuration root = getRoot();
         if (root == null) {
             throw new IllegalStateException("Cannot use section without a root");
         }
@@ -201,8 +201,8 @@ public class MemorySection implements ConfigurationSection {
         int i1 = -1, i2;
         ConfigurationSection section = this;
         while ((i1 = path.indexOf(separator, i2 = i1 + 1)) != -1) {
-            String node = path.substring(i2, i1);
-            ConfigurationSection subSection = section.getConfigurationSection(node);
+            final String node = path.substring(i2, i1);
+            final ConfigurationSection subSection = section.getConfigurationSection(node);
             if (subSection == null) {
                 if (value == null) {
                     // no need to create missing sub-sections if we want to remove the value:
@@ -214,12 +214,12 @@ public class MemorySection implements ConfigurationSection {
             }
         }
 
-        String key = path.substring(i2);
+        final String key = path.substring(i2);
         if (section == this) {
             if (value == null) {
                 map.remove(key);
             } else {
-                SectionPathData entry = map.get(key);
+                final SectionPathData entry = map.get(key);
                 if (entry == null) {
                     map.put(key, new SectionPathData(value));
                 } else {
@@ -233,21 +233,21 @@ public class MemorySection implements ConfigurationSection {
 
     @Override
     @Nullable
-    public Object get(@NotNull String path) {
+    public Object get(@NotNull final String path) {
         return get(path, getDefault(path));
     }
 
     @Override
     @Contract("_, !null -> !null")
     @Nullable
-    public Object get(@NotNull String path, @Nullable Object def) {
+    public Object get(@NotNull final String path, @Nullable final Object def) {
         Preconditions.checkArgument(path != null, "Path cannot be null");
 
         if (path.length() == 0) {
             return this;
         }
 
-        Configuration root = getRoot();
+        final Configuration root = getRoot();
         if (root == null) {
             throw new IllegalStateException("Cannot access section without a root");
         }
@@ -268,9 +268,9 @@ public class MemorySection implements ConfigurationSection {
             }
         }
 
-        String key = path.substring(i2);
+        final String key = path.substring(i2);
         if (section == this) {
-            SectionPathData result = map.get(key);
+            final SectionPathData result = map.get(key);
             return (result == null) ? def : result.getData();
         }
         return section.get(key, def);
@@ -278,9 +278,9 @@ public class MemorySection implements ConfigurationSection {
 
     @Override
     @NotNull
-    public ConfigurationSection createSection(@NotNull String path) {
+    public ConfigurationSection createSection(@NotNull final String path) {
         Preconditions.checkArgument(!Strings.isNullOrEmpty(path), "Cannot create section at empty path");
-        Configuration root = getRoot();
+        final Configuration root = getRoot();
         if (root == null) {
             throw new IllegalStateException("Cannot create section without a root");
         }
@@ -291,8 +291,8 @@ public class MemorySection implements ConfigurationSection {
         int i1 = -1, i2;
         ConfigurationSection section = this;
         while ((i1 = path.indexOf(separator, i2 = i1 + 1)) != -1) {
-            String node = path.substring(i2, i1);
-            ConfigurationSection subSection = section.getConfigurationSection(node);
+            final String node = path.substring(i2, i1);
+            final ConfigurationSection subSection = section.getConfigurationSection(node);
             if (subSection == null) {
                 section = section.createSection(node);
             } else {
@@ -300,9 +300,9 @@ public class MemorySection implements ConfigurationSection {
             }
         }
 
-        String key = path.substring(i2);
+        final String key = path.substring(i2);
         if (section == this) {
-            ConfigurationSection result = new MemorySection(this, key);
+            final ConfigurationSection result = new MemorySection(this, key);
             map.put(key, new SectionPathData(result));
             return result;
         }
@@ -311,10 +311,10 @@ public class MemorySection implements ConfigurationSection {
 
     @Override
     @NotNull
-    public ConfigurationSection createSection(@NotNull String path, @NotNull Map<?, ?> map) {
-        ConfigurationSection section = createSection(path);
+    public ConfigurationSection createSection(@NotNull final String path, @NotNull final Map<?, ?> map) {
+        final ConfigurationSection section = createSection(path);
 
-        for (Map.Entry<?, ?> entry : map.entrySet()) {
+        for (final Map.Entry<?, ?> entry : map.entrySet()) {
             if (entry.getValue() instanceof Map) {
                 section.createSection(entry.getKey().toString(), (Map<?, ?>) entry.getValue());
             } else {
@@ -328,131 +328,131 @@ public class MemorySection implements ConfigurationSection {
     // Primitives
     @Override
     @Nullable
-    public String getString(@NotNull String path) {
-        Object def = getDefault(path);
+    public String getString(@NotNull final String path) {
+        final Object def = getDefault(path);
         return getString(path, def != null ? def.toString() : null);
     }
 
     @Override
     @Contract("_, !null -> !null")
     @Nullable
-    public String getString(@NotNull String path, @Nullable String def) {
-        Object val = get(path, def);
+    public String getString(@NotNull final String path, @Nullable final String def) {
+        final Object val = get(path, def);
         return (val != null) ? val.toString() : def;
     }
 
     @Override
-    public boolean isString(@NotNull String path) {
-        Object val = get(path);
+    public boolean isString(@NotNull final String path) {
+        final Object val = get(path);
         return val instanceof String;
     }
 
     @Override
-    public int getInt(@NotNull String path) {
-        Object def = getDefault(path);
+    public int getInt(@NotNull final String path) {
+        final Object def = getDefault(path);
         return getInt(path, (def instanceof Number) ? toInt(def) : 0);
     }
 
     @Override
-    public int getInt(@NotNull String path, int def) {
-        Object val = get(path, Integer.valueOf(def));
+    public int getInt(@NotNull final String path, final int def) {
+        final Object val = get(path, Integer.valueOf(def));
         return (val instanceof Number) ? toInt(val) : def;
     }
 
     @Override
-    public boolean isInt(@NotNull String path) {
-        Object val = get(path);
+    public boolean isInt(@NotNull final String path) {
+        final Object val = get(path);
         return val instanceof Integer;
     }
 
     @Override
-    public boolean getBoolean(@NotNull String path) {
-        Object def = getDefault(path);
+    public boolean getBoolean(@NotNull final String path) {
+        final Object def = getDefault(path);
         return getBoolean(path, (def instanceof Boolean) ? ((Boolean) def).booleanValue() : false);
     }
 
     @Override
-    public boolean getBoolean(@NotNull String path, boolean def) {
-        Object val = get(path, Boolean.valueOf(def));
+    public boolean getBoolean(@NotNull final String path, final boolean def) {
+        final Object val = get(path, Boolean.valueOf(def));
         return (val instanceof Boolean) ? ((Boolean) val).booleanValue() : def;
     }
 
     @Override
-    public boolean isBoolean(@NotNull String path) {
-        Object val = get(path);
+    public boolean isBoolean(@NotNull final String path) {
+        final Object val = get(path);
         return val instanceof Boolean;
     }
 
     @Override
-    public double getDouble(@NotNull String path) {
-        Object def = getDefault(path);
+    public double getDouble(@NotNull final String path) {
+        final Object def = getDefault(path);
         return getDouble(path, (def instanceof Number) ? toDouble(def) : 0);
     }
 
     @Override
-    public double getDouble(@NotNull String path, double def) {
-        Object val = get(path, Double.valueOf(def));
+    public double getDouble(@NotNull final String path, final double def) {
+        final Object val = get(path, Double.valueOf(def));
         return (val instanceof Number) ? toDouble(val) : def;
     }
 
     @Override
-    public boolean isDouble(@NotNull String path) {
-        Object val = get(path);
+    public boolean isDouble(@NotNull final String path) {
+        final Object val = get(path);
         return val instanceof Double;
     }
 
     @Override
-    public long getLong(@NotNull String path) {
-        Object def = getDefault(path);
+    public long getLong(@NotNull final String path) {
+        final Object def = getDefault(path);
         return getLong(path, (def instanceof Number) ? toLong(def) : 0);
     }
 
     @Override
-    public long getLong(@NotNull String path, long def) {
-        Object val = get(path, Long.valueOf(def));
+    public long getLong(@NotNull final String path, final long def) {
+        final Object val = get(path, Long.valueOf(def));
         return (val instanceof Number) ? toLong(val) : def;
     }
 
     @Override
-    public boolean isLong(@NotNull String path) {
-        Object val = get(path);
+    public boolean isLong(@NotNull final String path) {
+        final Object val = get(path);
         return val instanceof Long;
     }
 
     // Java
     @Override
     @Nullable
-    public List<?> getList(@NotNull String path) {
-        Object def = getDefault(path);
+    public List<?> getList(@NotNull final String path) {
+        final Object def = getDefault(path);
         return getList(path, (def instanceof List) ? (List<?>) def : null);
     }
 
     @Override
     @Contract("_, !null -> !null")
     @Nullable
-    public List<?> getList(@NotNull String path, @Nullable List<?> def) {
-        Object val = get(path, def);
+    public List<?> getList(@NotNull final String path, @Nullable final List<?> def) {
+        final Object val = get(path, def);
         return (List<?>) ((val instanceof List) ? val : def);
     }
 
     @Override
-    public boolean isList(@NotNull String path) {
-        Object val = get(path);
+    public boolean isList(@NotNull final String path) {
+        final Object val = get(path);
         return val instanceof List;
     }
 
     @Override
     @NotNull
-    public List<String> getStringList(@NotNull String path) {
-        List<?> list = getList(path);
+    public List<String> getStringList(@NotNull final String path) {
+        final List<?> list = getList(path);
 
         if (list == null) {
             return new ArrayList<String>(0);
         }
 
-        List<String> result = new ArrayList<String>();
+        final List<String> result = new ArrayList<String>();
 
-        for (Object object : list) {
+        for (final Object object : list) {
             if ((object instanceof String) || (isPrimitiveWrapper(object))) {
                 result.add(String.valueOf(object));
             }
@@ -463,22 +463,22 @@ public class MemorySection implements ConfigurationSection {
 
     @Override
     @NotNull
-    public List<Integer> getIntegerList(@NotNull String path) {
-        List<?> list = getList(path);
+    public List<Integer> getIntegerList(@NotNull final String path) {
+        final List<?> list = getList(path);
 
         if (list == null) {
             return new ArrayList<Integer>(0);
         }
 
-        List<Integer> result = new ArrayList<Integer>();
+        final List<Integer> result = new ArrayList<Integer>();
 
-        for (Object object : list) {
+        for (final Object object : list) {
             if (object instanceof Integer) {
                 result.add((Integer) object);
             } else if (object instanceof String) {
                 try {
                     result.add(Integer.valueOf((String) object));
-                } catch (Exception ex) {
+                } catch (final Exception ex) {
                 }
             } else if (object instanceof Character) {
                 result.add(Integer.valueOf(((Character) object).charValue()));
@@ -492,16 +492,16 @@ public class MemorySection implements ConfigurationSection {
 
     @Override
     @NotNull
-    public List<Boolean> getBooleanList(@NotNull String path) {
-        List<?> list = getList(path);
+    public List<Boolean> getBooleanList(@NotNull final String path) {
+        final List<?> list = getList(path);
 
         if (list == null) {
             return new ArrayList<Boolean>(0);
         }
 
-        List<Boolean> result = new ArrayList<Boolean>();
+        final List<Boolean> result = new ArrayList<Boolean>();
 
-        for (Object object : list) {
+        for (final Object object : list) {
             if (object instanceof Boolean) {
                 result.add((Boolean) object);
             } else if (object instanceof String) {
@@ -518,22 +518,22 @@ public class MemorySection implements ConfigurationSection {
 
     @Override
     @NotNull
-    public List<Double> getDoubleList(@NotNull String path) {
-        List<?> list = getList(path);
+    public List<Double> getDoubleList(@NotNull final String path) {
+        final List<?> list = getList(path);
 
         if (list == null) {
             return new ArrayList<Double>(0);
         }
 
-        List<Double> result = new ArrayList<Double>();
+        final List<Double> result = new ArrayList<Double>();
 
-        for (Object object : list) {
+        for (final Object object : list) {
             if (object instanceof Double) {
                 result.add((Double) object);
             } else if (object instanceof String) {
                 try {
                     result.add(Double.valueOf((String) object));
-                } catch (Exception ex) {
+                } catch (final Exception ex) {
                 }
             } else if (object instanceof Character) {
                 result.add(Double.valueOf(((Character) object).charValue()));
@@ -547,22 +547,22 @@ public class MemorySection implements ConfigurationSection {
 
     @Override
     @NotNull
-    public List<Float> getFloatList(@NotNull String path) {
-        List<?> list = getList(path);
+    public List<Float> getFloatList(@NotNull final String path) {
+        final List<?> list = getList(path);
 
         if (list == null) {
             return new ArrayList<Float>(0);
         }
 
-        List<Float> result = new ArrayList<Float>();
+        final List<Float> result = new ArrayList<Float>();
 
-        for (Object object : list) {
+        for (final Object object : list) {
             if (object instanceof Float) {
                 result.add((Float) object);
             } else if (object instanceof String) {
                 try {
                     result.add(Float.valueOf((String) object));
-                } catch (Exception ex) {
+                } catch (final Exception ex) {
                 }
             } else if (object instanceof Character) {
                 result.add(Float.valueOf(((Character) object).charValue()));
@@ -576,22 +576,22 @@ public class MemorySection implements ConfigurationSection {
 
     @Override
     @NotNull
-    public List<Long> getLongList(@NotNull String path) {
-        List<?> list = getList(path);
+    public List<Long> getLongList(@NotNull final String path) {
+        final List<?> list = getList(path);
 
         if (list == null) {
             return new ArrayList<Long>(0);
         }
 
-        List<Long> result = new ArrayList<Long>();
+        final List<Long> result = new ArrayList<Long>();
 
-        for (Object object : list) {
+        for (final Object object : list) {
             if (object instanceof Long) {
                 result.add((Long) object);
             } else if (object instanceof String) {
                 try {
                     result.add(Long.valueOf((String) object));
-                } catch (Exception ex) {
+                } catch (final Exception ex) {
                 }
             } else if (object instanceof Character) {
                 result.add(Long.valueOf(((Character) object).charValue()));
@@ -605,22 +605,22 @@ public class MemorySection implements ConfigurationSection {
 
     @Override
     @NotNull
-    public List<Byte> getByteList(@NotNull String path) {
-        List<?> list = getList(path);
+    public List<Byte> getByteList(@NotNull final String path) {
+        final List<?> list = getList(path);
 
         if (list == null) {
             return new ArrayList<Byte>(0);
         }
 
-        List<Byte> result = new ArrayList<Byte>();
+        final List<Byte> result = new ArrayList<Byte>();
 
-        for (Object object : list) {
+        for (final Object object : list) {
             if (object instanceof Byte) {
                 result.add((Byte) object);
             } else if (object instanceof String) {
                 try {
                     result.add(Byte.valueOf((String) object));
-                } catch (Exception ex) {
+                } catch (final Exception ex) {
                 }
             } else if (object instanceof Character) {
                 result.add(Byte.valueOf((byte) ((Character) object).charValue()));
@@ -634,20 +634,20 @@ public class MemorySection implements ConfigurationSection {
 
     @Override
     @NotNull
-    public List<Character> getCharacterList(@NotNull String path) {
-        List<?> list = getList(path);
+    public List<Character> getCharacterList(@NotNull final String path) {
+        final List<?> list = getList(path);
 
         if (list == null) {
             return new ArrayList<Character>(0);
         }
 
-        List<Character> result = new ArrayList<Character>();
+        final List<Character> result = new ArrayList<Character>();
 
-        for (Object object : list) {
+        for (final Object object : list) {
             if (object instanceof Character) {
                 result.add((Character) object);
             } else if (object instanceof String) {
-                String str = (String) object;
+                final String str = (String) object;
 
                 if (str.length() == 1) {
                     result.add(Character.valueOf(str.charAt(0)));
@@ -662,22 +662,22 @@ public class MemorySection implements ConfigurationSection {
 
     @Override
     @NotNull
-    public List<Short> getShortList(@NotNull String path) {
-        List<?> list = getList(path);
+    public List<Short> getShortList(@NotNull final String path) {
+        final List<?> list = getList(path);
 
         if (list == null) {
             return new ArrayList<Short>(0);
         }
 
-        List<Short> result = new ArrayList<Short>();
+        final List<Short> result = new ArrayList<Short>();
 
-        for (Object object : list) {
+        for (final Object object : list) {
             if (object instanceof Short) {
                 result.add((Short) object);
             } else if (object instanceof String) {
                 try {
                     result.add(Short.valueOf((String) object));
-                } catch (Exception ex) {
+                } catch (final Exception ex) {
                 }
             } else if (object instanceof Character) {
                 result.add(Short.valueOf((short) ((Character) object).charValue()));
@@ -691,15 +691,15 @@ public class MemorySection implements ConfigurationSection {
 
     @Override
     @NotNull
-    public List<Map<?, ?>> getMapList(@NotNull String path) {
-        List<?> list = getList(path);
-        List<Map<?, ?>> result = new ArrayList<Map<?, ?>>();
+    public List<Map<?, ?>> getMapList(@NotNull final String path) {
+        final List<?> list = getList(path);
+        final List<Map<?, ?>> result = new ArrayList<Map<?, ?>>();
 
         if (list == null) {
             return result;
         }
 
-        for (Object object : list) {
+        for (final Object object : list) {
             if (object instanceof Map) {
                 result.add((Map<?, ?>) object);
             }
@@ -711,127 +711,127 @@ public class MemorySection implements ConfigurationSection {
     // Bukkit
     @Nullable
     @Override
-    public <T extends Object> T getObject(@NotNull String path, @NotNull Class<T> clazz) {
+    public <T extends Object> T getObject(@NotNull final String path, @NotNull final Class<T> clazz) {
         Preconditions.checkArgument(clazz != null, "Class cannot be null");
-        Object def = getDefault(path);
+        final Object def = getDefault(path);
         return getObject(path, clazz, (def != null && clazz.isInstance(def)) ? clazz.cast(def) : null);
     }
 
     @Contract("_, _, !null -> !null")
     @Nullable
     @Override
-    public <T extends Object> T getObject(@NotNull String path, @NotNull Class<T> clazz, @Nullable T def) {
+    public <T extends Object> T getObject(@NotNull final String path, @NotNull final Class<T> clazz, @Nullable final T def) {
         Preconditions.checkArgument(clazz != null, "Class cannot be null");
-        Object val = get(path, def);
+        final Object val = get(path, def);
         return (val != null && clazz.isInstance(val)) ? clazz.cast(val) : def;
     }
 
     @Nullable
     @Override
-    public <T extends ConfigurationSerializable> T getSerializable(@NotNull String path, @NotNull Class<T> clazz) {
+    public <T extends ConfigurationSerializable> T getSerializable(@NotNull final String path, @NotNull final Class<T> clazz) {
         return getObject(path, clazz);
     }
 
     @Contract("_, _, !null -> !null")
     @Nullable
     @Override
-    public <T extends ConfigurationSerializable> T getSerializable(@NotNull String path, @NotNull Class<T> clazz, @Nullable T def) {
+    public <T extends ConfigurationSerializable> T getSerializable(@NotNull final String path, @NotNull final Class<T> clazz, @Nullable final T def) {
         return getObject(path, clazz, def);
     }
 
     @Override
     @Nullable
-    public Vector getVector(@NotNull String path) {
+    public Vector getVector(@NotNull final String path) {
         return getSerializable(path, Vector.class);
     }
 
     @Override
     @Contract("_, !null -> !null")
     @Nullable
-    public Vector getVector(@NotNull String path, @Nullable Vector def) {
+    public Vector getVector(@NotNull final String path, @Nullable final Vector def) {
         return getSerializable(path, Vector.class, def);
     }
 
     @Override
-    public boolean isVector(@NotNull String path) {
+    public boolean isVector(@NotNull final String path) {
         return getSerializable(path, Vector.class) != null;
     }
 
     @Override
     @Nullable
-    public OfflinePlayer getOfflinePlayer(@NotNull String path) {
+    public OfflinePlayer getOfflinePlayer(@NotNull final String path) {
         return getSerializable(path, OfflinePlayer.class);
     }
 
     @Override
     @Contract("_, !null -> !null")
     @Nullable
-    public OfflinePlayer getOfflinePlayer(@NotNull String path, @Nullable OfflinePlayer def) {
+    public OfflinePlayer getOfflinePlayer(@NotNull final String path, @Nullable final OfflinePlayer def) {
         return getSerializable(path, OfflinePlayer.class, def);
     }
 
     @Override
-    public boolean isOfflinePlayer(@NotNull String path) {
+    public boolean isOfflinePlayer(@NotNull final String path) {
         return getSerializable(path, OfflinePlayer.class) != null;
     }
 
     @Override
     @Nullable
-    public ItemStack getItemStack(@NotNull String path) {
+    public ItemStack getItemStack(@NotNull final String path) {
         return getSerializable(path, ItemStack.class);
     }
 
     @Override
     @Contract("_, !null -> !null")
     @Nullable
-    public ItemStack getItemStack(@NotNull String path, @Nullable ItemStack def) {
+    public ItemStack getItemStack(@NotNull final String path, @Nullable final ItemStack def) {
         return getSerializable(path, ItemStack.class, def);
     }
 
     @Override
-    public boolean isItemStack(@NotNull String path) {
+    public boolean isItemStack(@NotNull final String path) {
         return getSerializable(path, ItemStack.class) != null;
     }
 
     @Override
     @Nullable
-    public Color getColor(@NotNull String path) {
+    public Color getColor(@NotNull final String path) {
         return getSerializable(path, Color.class);
     }
 
     @Override
     @Contract("_, !null -> !null")
     @Nullable
-    public Color getColor(@NotNull String path, @Nullable Color def) {
+    public Color getColor(@NotNull final String path, @Nullable final Color def) {
         return getSerializable(path, Color.class, def);
     }
 
     @Override
-    public boolean isColor(@NotNull String path) {
+    public boolean isColor(@NotNull final String path) {
         return getSerializable(path, Color.class) != null;
     }
 
     @Override
     @Nullable
-    public Location getLocation(@NotNull String path) {
+    public Location getLocation(@NotNull final String path) {
         return getSerializable(path, Location.class);
     }
 
     @Override
     @Contract("_, !null -> !null")
     @Nullable
-    public Location getLocation(@NotNull String path, @Nullable Location def) {
+    public Location getLocation(@NotNull final String path, @Nullable final Location def) {
         return getSerializable(path, Location.class, def);
     }
 
     @Override
-    public boolean isLocation(@NotNull String path) {
+    public boolean isLocation(@NotNull final String path) {
         return getSerializable(path, Location.class) != null;
     }
 
     @Override
     @Nullable
-    public ConfigurationSection getConfigurationSection(@NotNull String path) {
+    public ConfigurationSection getConfigurationSection(@NotNull final String path) {
         Object val = get(path, null);
         if (val != null) {
             return (val instanceof ConfigurationSection) ? (ConfigurationSection) val : null;
@@ -842,12 +842,12 @@ public class MemorySection implements ConfigurationSection {
     }
 
     @Override
-    public boolean isConfigurationSection(@NotNull String path) {
-        Object val = get(path);
+    public boolean isConfigurationSection(@NotNull final String path) {
+        final Object val = get(path);
         return val instanceof ConfigurationSection;
     }
 
-    protected boolean isPrimitiveWrapper(@Nullable Object input) {
+    protected boolean isPrimitiveWrapper(@Nullable final Object input) {
         return input instanceof Integer || input instanceof Boolean
                 || input instanceof Character || input instanceof Byte
                 || input instanceof Short || input instanceof Double
@@ -855,44 +855,44 @@ public class MemorySection implements ConfigurationSection {
     }
 
     @Nullable
-    protected Object getDefault(@NotNull String path) {
+    protected Object getDefault(@NotNull final String path) {
         Preconditions.checkArgument(path != null, "Path cannot be null");
 
-        Configuration root = getRoot();
-        Configuration defaults = root == null ? null : root.getDefaults();
+        final Configuration root = getRoot();
+        final Configuration defaults = root == null ? null : root.getDefaults();
         return (defaults == null) ? null : defaults.get(createPath(this, path));
     }
 
-    protected void mapChildrenKeys(@NotNull Set<String> output, @NotNull ConfigurationSection section, boolean deep) {
+    protected void mapChildrenKeys(@NotNull final Set<String> output, @NotNull final ConfigurationSection section, final boolean deep) {
         if (section instanceof MemorySection) {
-            MemorySection sec = (MemorySection) section;
+            final MemorySection sec = (MemorySection) section;
 
-            for (Map.Entry<String, SectionPathData> entry : sec.map.entrySet()) {
+            for (final Map.Entry<String, SectionPathData> entry : sec.map.entrySet()) {
                 output.add(createPath(section, entry.getKey(), this));
 
                 if ((deep) && (entry.getValue().getData() instanceof ConfigurationSection)) {
-                    ConfigurationSection subsection = (ConfigurationSection) entry.getValue().getData();
+                    final ConfigurationSection subsection = (ConfigurationSection) entry.getValue().getData();
                     mapChildrenKeys(output, subsection, deep);
                 }
             }
         } else {
-            Set<String> keys = section.getKeys(deep);
+            final Set<String> keys = section.getKeys(deep);
 
-            for (String key : keys) {
+            for (final String key : keys) {
                 output.add(createPath(section, key, this));
             }
         }
     }
 
-    protected void mapChildrenValues(@NotNull Map<String, Object> output, @NotNull ConfigurationSection section, boolean deep) {
+    protected void mapChildrenValues(@NotNull final Map<String, Object> output, @NotNull final ConfigurationSection section, final boolean deep) {
         if (section instanceof MemorySection) {
-            MemorySection sec = (MemorySection) section;
+            final MemorySection sec = (MemorySection) section;
 
-            for (Map.Entry<String, SectionPathData> entry : sec.map.entrySet()) {
+            for (final Map.Entry<String, SectionPathData> entry : sec.map.entrySet()) {
                 // Because of the copyDefaults call potentially copying out of order, we must remove and then add in our saved order
                 // This means that default values we haven't set end up getting placed first
                 // See SPIGOT-4558 for an example using spigot.yml - watch subsections move around to default order
-                String childPath = createPath(section, entry.getKey(), this);
+                final String childPath = createPath(section, entry.getKey(), this);
                 output.remove(childPath);
                 output.put(childPath, entry.getValue().getData());
 
@@ -903,9 +903,9 @@ public class MemorySection implements ConfigurationSection {
                 }
             }
         } else {
-            Map<String, Object> values = section.getValues(deep);
+            final Map<String, Object> values = section.getValues(deep);
 
-            for (Map.Entry<String, Object> entry : values.entrySet()) {
+            for (final Map.Entry<String, Object> entry : values.entrySet()) {
                 output.put(createPath(section, entry.getKey(), this), entry.getValue());
             }
         }
@@ -923,7 +923,7 @@ public class MemorySection implements ConfigurationSection {
      * @return Full path of the section from its root.
      */
     @NotNull
-    public static String createPath(@NotNull ConfigurationSection section, @Nullable String key) {
+    public static String createPath(@NotNull final ConfigurationSection section, @Nullable final String key) {
         return createPath(section, key, (section == null) ? null : section.getRoot());
     }
 
@@ -940,15 +940,15 @@ public class MemorySection implements ConfigurationSection {
      * @return Full path of the section from its root.
      */
     @NotNull
-    public static String createPath(@NotNull ConfigurationSection section, @Nullable String key, @Nullable ConfigurationSection relativeTo) {
+    public static String createPath(@NotNull final ConfigurationSection section, @Nullable final String key, @Nullable final ConfigurationSection relativeTo) {
         Preconditions.checkArgument(section != null, "Cannot create path without a section");
-        Configuration root = section.getRoot();
+        final Configuration root = section.getRoot();
         if (root == null) {
             throw new IllegalStateException("Cannot create path without a root");
         }
-        char separator = root.options().pathSeparator();
+        final char separator = root.options().pathSeparator();
 
-        StringBuilder builder = new StringBuilder();
+        final StringBuilder builder = new StringBuilder();
         for (ConfigurationSection parent = section; (parent != null) && (parent != relativeTo); parent = parent.getParent()) {
             if (builder.length() > 0) {
                 builder.insert(0, separator);
@@ -998,10 +998,10 @@ public class MemorySection implements ConfigurationSection {
     }
 
     @Nullable
-    private SectionPathData getSectionPathData(@NotNull String path) {
+    private SectionPathData getSectionPathData(@NotNull final String path) {
         Preconditions.checkArgument(path != null, "Path cannot be null");
 
-        Configuration root = getRoot();
+        final Configuration root = getRoot();
         if (root == null) {
             throw new IllegalStateException("Cannot access section without a root");
         }
@@ -1018,9 +1018,9 @@ public class MemorySection implements ConfigurationSection {
             }
         }
 
-        String key = path.substring(i2);
+        final String key = path.substring(i2);
         if (section == this) {
-            SectionPathData entry = map.get(key);
+            final SectionPathData entry = map.get(key);
             if (entry != null) {
                 return entry;
             }
@@ -1032,7 +1032,7 @@ public class MemorySection implements ConfigurationSection {
 
     @Override
     public @NotNull String toString() {
-        Configuration root = getRoot();
+        final Configuration root = getRoot();
         return getClass().getSimpleName() +
             "[path='" +
             getCurrentPath() +
diff --git a/src/main/java/org/bukkit/configuration/SectionPathData.java b/src/main/java/org/bukkit/configuration/SectionPathData.java
index 82e4c7d5268602e2e6be14f1b3ee06f760161568..c513b4ae10be6433d4eb86c154d943fc94c20c96 100644
--- a/src/main/java/org/bukkit/configuration/SectionPathData.java
+++ b/src/main/java/org/bukkit/configuration/SectionPathData.java
@@ -11,7 +11,7 @@ final class SectionPathData {
     private List<String> comments;
     private List<String> inlineComments;
 
-    public SectionPathData(@Nullable Object data) {
+    public SectionPathData(@Nullable final Object data) {
         this.data = data;
         comments = Collections.emptyList();
         inlineComments = Collections.emptyList();
diff --git a/src/main/java/org/bukkit/configuration/file/FileConfiguration.java b/src/main/java/org/bukkit/configuration/file/FileConfiguration.java
index 70284de18dfe3f72ef2f84029f2dfb68c6568d5e..a6ae49e1d0bfdc41af32beb1266d54105d80c9a3 100644
--- a/src/main/java/org/bukkit/configuration/file/FileConfiguration.java
+++ b/src/main/java/org/bukkit/configuration/file/FileConfiguration.java
@@ -38,7 +38,7 @@ public abstract class FileConfiguration extends MemoryConfiguration {
      *
      * @param defaults Default value provider
      */
-    public FileConfiguration(@Nullable Configuration defaults) {
+    public FileConfiguration(@Nullable final Configuration defaults) {
         super(defaults);
     }
 
@@ -57,14 +57,14 @@ public abstract class FileConfiguration extends MemoryConfiguration {
      *     any reason.
      * @throws IllegalArgumentException Thrown when file is null.
      */
-    public void save(@NotNull File file) throws IOException {
+    public void save(@NotNull final File file) throws IOException {
         Preconditions.checkArgument(file != null, "File cannot be null");
 
         Files.createParentDirs(file);
 
-        String data = saveToString();
+        final String data = saveToString();
 
-        Writer writer = new OutputStreamWriter(new FileOutputStream(file), Charsets.UTF_8);
+        final Writer writer = new OutputStreamWriter(new FileOutputStream(file), Charsets.UTF_8);
 
         try {
             writer.write(data);
@@ -88,7 +88,7 @@ public abstract class FileConfiguration extends MemoryConfiguration {
      *     any reason.
      * @throws IllegalArgumentException Thrown when file is null.
      */
-    public void save(@NotNull String file) throws IOException {
+    public void save(@NotNull final String file) throws IOException {
         Preconditions.checkArgument(file != null, "File cannot be null");
 
         save(new File(file));
@@ -120,7 +120,7 @@ public abstract class FileConfiguration extends MemoryConfiguration {
      *     a valid Configuration.
      * @throws IllegalArgumentException Thrown when file is null.
      */
-    public void load(@NotNull File file) throws FileNotFoundException, IOException, InvalidConfigurationException {
+    public void load(@NotNull final File file) throws FileNotFoundException, IOException, InvalidConfigurationException {
         Preconditions.checkArgument(file != null, "File cannot be null");
 
         final FileInputStream stream = new FileInputStream(file);
@@ -141,10 +141,10 @@ public abstract class FileConfiguration extends MemoryConfiguration {
      *      represent a valid Configuration
      * @throws IllegalArgumentException thrown when reader is null
      */
-    public void load(@NotNull Reader reader) throws IOException, InvalidConfigurationException {
-        BufferedReader input = reader instanceof BufferedReader ? (BufferedReader) reader : new BufferedReader(reader);
+    public void load(@NotNull final Reader reader) throws IOException, InvalidConfigurationException {
+        final BufferedReader input = reader instanceof BufferedReader ? (BufferedReader) reader : new BufferedReader(reader);
 
-        StringBuilder builder = new StringBuilder();
+        final StringBuilder builder = new StringBuilder();
 
         try {
             String line;
@@ -178,7 +178,7 @@ public abstract class FileConfiguration extends MemoryConfiguration {
      *     a valid Configuration.
      * @throws IllegalArgumentException Thrown when file is null.
      */
-    public void load(@NotNull String file) throws FileNotFoundException, IOException, InvalidConfigurationException {
+    public void load(@NotNull final String file) throws FileNotFoundException, IOException, InvalidConfigurationException {
         Preconditions.checkArgument(file != null, "File cannot be null");
 
         load(new File(file));
diff --git a/src/main/java/org/bukkit/configuration/file/FileConfigurationOptions.java b/src/main/java/org/bukkit/configuration/file/FileConfigurationOptions.java
index d96985148f8ab8ec1cd88fc528624761058f3afe..548d54ddaf2e14077396f08f1c914273f39ff25c 100644
--- a/src/main/java/org/bukkit/configuration/file/FileConfigurationOptions.java
+++ b/src/main/java/org/bukkit/configuration/file/FileConfigurationOptions.java
@@ -20,7 +20,7 @@ public class FileConfigurationOptions extends MemoryConfigurationOptions {
     private boolean parseComments = PAPER_PARSE_COMMENTS_BY_DEFAULT;
     // Paper end
 
-    protected FileConfigurationOptions(@NotNull MemoryConfiguration configuration) {
+    protected FileConfigurationOptions(@NotNull final MemoryConfiguration configuration) {
         super(configuration);
     }
 
@@ -32,14 +32,14 @@ public class FileConfigurationOptions extends MemoryConfigurationOptions {
 
     @NotNull
     @Override
-    public FileConfigurationOptions copyDefaults(boolean value) {
+    public FileConfigurationOptions copyDefaults(final boolean value) {
         super.copyDefaults(value);
         return this;
     }
 
     @NotNull
     @Override
-    public FileConfigurationOptions pathSeparator(char value) {
+    public FileConfigurationOptions pathSeparator(final char value) {
         super.pathSeparator(value);
         return this;
     }
@@ -72,8 +72,8 @@ public class FileConfigurationOptions extends MemoryConfigurationOptions {
     @NotNull
     @Deprecated
     public String header() {
-        StringBuilder stringHeader = new StringBuilder();
-        for (String line : header) {
+        final StringBuilder stringHeader = new StringBuilder();
+        for (final String line : header) {
             stringHeader.append(line == null ? "\n" : line + "\n");
         }
         return stringHeader.toString();
@@ -96,7 +96,7 @@ public class FileConfigurationOptions extends MemoryConfigurationOptions {
      * @return This object, for chaining
      */
     @NotNull
-    public FileConfigurationOptions setHeader(@Nullable List<String> value) {
+    public FileConfigurationOptions setHeader(@Nullable final List<String> value) {
         this.header = (value == null) ? Collections.emptyList() : Collections.unmodifiableList(value);
         return this;
     }
@@ -109,7 +109,7 @@ public class FileConfigurationOptions extends MemoryConfigurationOptions {
      */
     @NotNull
     @Deprecated
-    public FileConfigurationOptions header(@Nullable String value) {
+    public FileConfigurationOptions header(@Nullable final String value) {
         this.header = (value == null) ? Collections.emptyList() : Collections.unmodifiableList(Arrays.asList(value.split("\\n")));
         return this;
     }
@@ -151,7 +151,7 @@ public class FileConfigurationOptions extends MemoryConfigurationOptions {
      * @return This object, for chaining
      */
     @NotNull
-    public FileConfigurationOptions setFooter(@Nullable List<String> value) {
+    public FileConfigurationOptions setFooter(@Nullable final List<String> value) {
         this.footer = (value == null) ? Collections.emptyList() : Collections.unmodifiableList(value);
         return this;
     }
@@ -176,7 +176,7 @@ public class FileConfigurationOptions extends MemoryConfigurationOptions {
      * @return This object, for chaining
      */
     @NotNull
-    public MemoryConfigurationOptions parseComments(boolean value) {
+    public MemoryConfigurationOptions parseComments(final boolean value) {
         parseComments = value;
         return this;
     }
@@ -199,7 +199,7 @@ public class FileConfigurationOptions extends MemoryConfigurationOptions {
      */
     @NotNull
     @Deprecated
-    public FileConfigurationOptions copyHeader(boolean value) {
+    public FileConfigurationOptions copyHeader(final boolean value) {
         parseComments = value;
         return this;
     }
diff --git a/src/main/java/org/bukkit/configuration/file/YamlConfiguration.java b/src/main/java/org/bukkit/configuration/file/YamlConfiguration.java
index 5178612d563dba1f8f77d605ee11ab6e765b18c9..f85bf2eed133c854ee0e3d7ac8df8ae2d5cf8d29 100644
--- a/src/main/java/org/bukkit/configuration/file/YamlConfiguration.java
+++ b/src/main/java/org/bukkit/configuration/file/YamlConfiguration.java
@@ -77,12 +77,12 @@ public class YamlConfiguration extends FileConfiguration {
         yamlDumperOptions.setWidth(options().width());
         yamlDumperOptions.setProcessComments(options().parseComments());
 
-        MappingNode node = toNodeTree(this);
+        final MappingNode node = toNodeTree(this);
 
         node.setBlockComments(getCommentLines(saveHeader(options().getHeader()), CommentType.BLOCK));
         node.setEndComments(getCommentLines(options().getFooter(), CommentType.BLOCK));
 
-        StringWriter writer = new StringWriter();
+        final StringWriter writer = new StringWriter();
         if (node.getBlockComments().isEmpty() && node.getEndComments().isEmpty() && node.getValue().isEmpty()) {
             writer.write("");
         } else {
@@ -95,17 +95,17 @@ public class YamlConfiguration extends FileConfiguration {
     }
 
     @Override
-    public void loadFromString(@NotNull String contents) throws InvalidConfigurationException {
+    public void loadFromString(@NotNull final String contents) throws InvalidConfigurationException {
         Preconditions.checkArgument(contents != null, "Contents cannot be null");
         yamlLoaderOptions.setProcessComments(options().parseComments());
         yamlLoaderOptions.setCodePointLimit(options().codePointLimit()); // Paper
 
-        MappingNode node;
-        try (Reader reader = new UnicodeReader(new ByteArrayInputStream(contents.getBytes(StandardCharsets.UTF_8)))) {
+        final MappingNode node;
+        try (final Reader reader = new UnicodeReader(new ByteArrayInputStream(contents.getBytes(StandardCharsets.UTF_8)))) {
             node = (MappingNode) yaml.compose(reader);
-        } catch (YAMLException | IOException e) {
+        } catch (final YAMLException | IOException e) {
             throw new InvalidConfigurationException(e);
-        } catch (ClassCastException e) {
+        } catch (final ClassCastException e) {
             throw new InvalidConfigurationException("Top level is not a Map.");
         }
 
@@ -127,8 +127,8 @@ public class YamlConfiguration extends FileConfiguration {
      */
     private void adjustNodeComments(final @NotNull MappingNode node) {
         if (node.getBlockComments() == null && !node.getValue().isEmpty()) {
-            Node firstNode = node.getValue().get(0).getKeyNode();
-            List<CommentLine> lines = firstNode.getBlockComments();
+            final Node firstNode = node.getValue().get(0).getKeyNode();
+            final List<CommentLine> lines = firstNode.getBlockComments();
             if (lines != null) {
                 int index = -1;
                 for (int i = 0; i < lines.size(); i++) {
@@ -144,11 +144,11 @@ public class YamlConfiguration extends FileConfiguration {
         }
     }
 
-    private void fromNodeTree(@NotNull MappingNode input, @NotNull ConfigurationSection section) {
+    private void fromNodeTree(@NotNull final MappingNode input, @NotNull final ConfigurationSection section) {
         constructor.flattenMapping(input);
-        for (NodeTuple nodeTuple : input.getValue()) {
-            Node key = nodeTuple.getKeyNode();
-            String keyString = String.valueOf(constructor.construct(key));
+        for (final NodeTuple nodeTuple : input.getValue()) {
+            final Node key = nodeTuple.getKeyNode();
+            final String keyString = String.valueOf(constructor.construct(key));
             Node value = nodeTuple.getValueNode();
 
             while (value instanceof AnchorNode) {
@@ -170,11 +170,11 @@ public class YamlConfiguration extends FileConfiguration {
         }
     }
 
-    private boolean hasSerializedTypeKey(@NotNull MappingNode node) {
-        for (NodeTuple nodeTuple : node.getValue()) {
-            Node keyNode = nodeTuple.getKeyNode();
+    private boolean hasSerializedTypeKey(@NotNull final MappingNode node) {
+        for (final NodeTuple nodeTuple : node.getValue()) {
+            final Node keyNode = nodeTuple.getKeyNode();
             if (!(keyNode instanceof ScalarNode)) continue;
-            String key = ((ScalarNode) keyNode).getValue();
+            final String key = ((ScalarNode) keyNode).getValue();
             if (key.equals(ConfigurationSerialization.SERIALIZED_TYPE_KEY)) {
                 return true;
             }
@@ -182,11 +182,11 @@ public class YamlConfiguration extends FileConfiguration {
         return false;
     }
 
-    private @NotNull MappingNode toNodeTree(@NotNull ConfigurationSection section) {
-        List<NodeTuple> nodeTuples = new ArrayList<>();
-        for (Map.Entry<String, Object> entry : section.getValues(false).entrySet()) {
-            Node key = representer.represent(entry.getKey());
-            Node value;
+    private @NotNull MappingNode toNodeTree(@NotNull final ConfigurationSection section) {
+        final List<NodeTuple> nodeTuples = new ArrayList<>();
+        for (final Map.Entry<String, Object> entry : section.getValues(false).entrySet()) {
+            final Node key = representer.represent(entry.getKey());
+            final Node value;
             if (entry.getValue() instanceof ConfigurationSection) {
                 value = toNodeTree((ConfigurationSection) entry.getValue());
             } else {
@@ -205,10 +205,10 @@ public class YamlConfiguration extends FileConfiguration {
         return new MappingNode(Tag.MAP, nodeTuples, DumperOptions.FlowStyle.BLOCK);
     }
 
-    private @NotNull List<String> getCommentLines(@Nullable List<CommentLine> comments) {
-        List<String> lines = new ArrayList<>();
+    private @NotNull List<String> getCommentLines(@Nullable final List<CommentLine> comments) {
+        final List<String> lines = new ArrayList<>();
         if (comments != null) {
-            for (CommentLine comment : comments) {
+            for (final CommentLine comment : comments) {
                 if (comment.getCommentType() == CommentType.BLANK_LINE) {
                     lines.add(null);
                 } else {
@@ -221,9 +221,9 @@ public class YamlConfiguration extends FileConfiguration {
         return lines;
     }
 
-    private @NotNull List<CommentLine> getCommentLines(@NotNull List<String> comments, CommentType commentType) {
-        List<CommentLine> lines = new ArrayList<CommentLine>();
-        for (String comment : comments) {
+    private @NotNull List<CommentLine> getCommentLines(@NotNull final List<String> comments, final CommentType commentType) {
+        final List<CommentLine> lines = new ArrayList<CommentLine>();
+        for (final String comment : comments) {
             if (comment == null) {
                 lines.add(new CommentLine(null, null, "", CommentType.BLANK_LINE));
             } else {
@@ -243,8 +243,8 @@ public class YamlConfiguration extends FileConfiguration {
      * @param header The list of heading comments
      * @return The modified list
      */
-    private @NotNull List<String> loadHeader(@NotNull List<String> header) {
-        LinkedList<String> list = new LinkedList<>(header);
+    private @NotNull List<String> loadHeader(@NotNull final List<String> header) {
+        final LinkedList<String> list = new LinkedList<>(header);
 
         if (!list.isEmpty()) {
             list.removeLast();
@@ -264,8 +264,8 @@ public class YamlConfiguration extends FileConfiguration {
      * @param header The list of heading comments
      * @return The modified list
      */
-    private @NotNull List<String> saveHeader(@NotNull List<String> header) {
-        LinkedList<String> list = new LinkedList<>(header);
+    private @NotNull List<String> saveHeader(@NotNull final List<String> header) {
+        final LinkedList<String> list = new LinkedList<>(header);
 
         if (!list.isEmpty()) {
             list.add(null);
@@ -298,17 +298,17 @@ public class YamlConfiguration extends FileConfiguration {
      * @throws IllegalArgumentException Thrown if file is null
      */
     @NotNull
-    public static YamlConfiguration loadConfiguration(@NotNull File file) {
+    public static YamlConfiguration loadConfiguration(@NotNull final File file) {
         Preconditions.checkArgument(file != null, "File cannot be null");
 
-        YamlConfiguration config = new YamlConfiguration();
+        final YamlConfiguration config = new YamlConfiguration();
 
         try {
             config.load(file);
-        } catch (FileNotFoundException ex) {
-        } catch (IOException ex) {
+        } catch (final FileNotFoundException ex) {
+        } catch (final IOException ex) {
             Bukkit.getLogger().log(Level.SEVERE, "Cannot load " + file, ex);
-        } catch (InvalidConfigurationException ex) {
+        } catch (final InvalidConfigurationException ex) {
             Bukkit.getLogger().log(Level.SEVERE, "Cannot load " + file, ex);
         }
 
@@ -327,16 +327,16 @@ public class YamlConfiguration extends FileConfiguration {
      * @throws IllegalArgumentException Thrown if stream is null
      */
     @NotNull
-    public static YamlConfiguration loadConfiguration(@NotNull Reader reader) {
+    public static YamlConfiguration loadConfiguration(@NotNull final Reader reader) {
         Preconditions.checkArgument(reader != null, "Stream cannot be null");
 
-        YamlConfiguration config = new YamlConfiguration();
+        final YamlConfiguration config = new YamlConfiguration();
 
         try {
             config.load(reader);
-        } catch (IOException ex) {
+        } catch (final IOException ex) {
             Bukkit.getLogger().log(Level.SEVERE, "Cannot load configuration from stream", ex);
-        } catch (InvalidConfigurationException ex) {
+        } catch (final InvalidConfigurationException ex) {
             Bukkit.getLogger().log(Level.SEVERE, "Cannot load configuration from stream", ex);
         }
 
diff --git a/src/main/java/org/bukkit/configuration/file/YamlConfigurationOptions.java b/src/main/java/org/bukkit/configuration/file/YamlConfigurationOptions.java
index 5d0ec7436f4487c686473248f332689224156fd5..ad9f4d6397c3835b5137639188fe826d5bfe8e8b 100644
--- a/src/main/java/org/bukkit/configuration/file/YamlConfigurationOptions.java
+++ b/src/main/java/org/bukkit/configuration/file/YamlConfigurationOptions.java
@@ -14,7 +14,7 @@ public class YamlConfigurationOptions extends FileConfigurationOptions {
     private int width = 80;
     private int codePointLimit = Integer.MAX_VALUE; // Paper - use upstream's default from YamlConfiguration
 
-    protected YamlConfigurationOptions(@NotNull YamlConfiguration configuration) {
+    protected YamlConfigurationOptions(@NotNull final YamlConfiguration configuration) {
         super(configuration);
     }
 
@@ -26,21 +26,21 @@ public class YamlConfigurationOptions extends FileConfigurationOptions {
 
     @NotNull
     @Override
-    public YamlConfigurationOptions copyDefaults(boolean value) {
+    public YamlConfigurationOptions copyDefaults(final boolean value) {
         super.copyDefaults(value);
         return this;
     }
 
     @NotNull
     @Override
-    public YamlConfigurationOptions pathSeparator(char value) {
+    public YamlConfigurationOptions pathSeparator(final char value) {
         super.pathSeparator(value);
         return this;
     }
 
     @NotNull
     @Override
-    public YamlConfigurationOptions setHeader(@Nullable List<String> value) {
+    public YamlConfigurationOptions setHeader(@Nullable final List<String> value) {
         super.setHeader(value);
         return this;
     }
@@ -48,21 +48,21 @@ public class YamlConfigurationOptions extends FileConfigurationOptions {
     @NotNull
     @Override
     @Deprecated
-    public YamlConfigurationOptions header(@Nullable String value) {
+    public YamlConfigurationOptions header(@Nullable final String value) {
         super.header(value);
         return this;
     }
 
     @NotNull
     @Override
-    public YamlConfigurationOptions setFooter(@Nullable List<String> value) {
+    public YamlConfigurationOptions setFooter(@Nullable final List<String> value) {
         super.setFooter(value);
         return this;
     }
 
     @NotNull
     @Override
-    public YamlConfigurationOptions parseComments(boolean value) {
+    public YamlConfigurationOptions parseComments(final boolean value) {
         super.parseComments(value);
         return this;
     }
@@ -70,7 +70,7 @@ public class YamlConfigurationOptions extends FileConfigurationOptions {
     @NotNull
     @Override
     @Deprecated
-    public YamlConfigurationOptions copyHeader(boolean value) {
+    public YamlConfigurationOptions copyHeader(final boolean value) {
         super.copyHeader(value);
         return this;
     }
@@ -95,7 +95,7 @@ public class YamlConfigurationOptions extends FileConfigurationOptions {
      * @return This object, for chaining
      */
     @NotNull
-    public YamlConfigurationOptions indent(int value) {
+    public YamlConfigurationOptions indent(final int value) {
         Preconditions.checkArgument(value >= 2, "Indent must be at least 2 characters");
         Preconditions.checkArgument(value <= 9, "Indent cannot be greater than 9 characters");
 
@@ -119,7 +119,7 @@ public class YamlConfigurationOptions extends FileConfigurationOptions {
      * @return This object, for chaining
      */
     @NotNull
-    public YamlConfigurationOptions width(int value) {
+    public YamlConfigurationOptions width(final int value) {
         this.width = value;
         return this;
     }
@@ -143,7 +143,7 @@ public class YamlConfigurationOptions extends FileConfigurationOptions {
      * @return This object, for chaining
      */
     @NotNull
-    public YamlConfigurationOptions codePointLimit(int codePointLimit) {
+    public YamlConfigurationOptions codePointLimit(final int codePointLimit) {
         this.codePointLimit = codePointLimit;
         return this;
     }
diff --git a/src/main/java/org/bukkit/configuration/file/YamlConstructor.java b/src/main/java/org/bukkit/configuration/file/YamlConstructor.java
index 092599425808df891e8753cf5441c5b48080c7e5..3e1c560a85bb247b7d5067043c0b9d193fc97076 100644
--- a/src/main/java/org/bukkit/configuration/file/YamlConstructor.java
+++ b/src/main/java/org/bukkit/configuration/file/YamlConstructor.java
@@ -23,7 +23,7 @@ public class YamlConstructor extends SafeConstructor {
     }
 
     @Nullable
-    public Object construct(@NotNull Node node) {
+    public Object construct(@NotNull final Node node) {
         return constructObject(node);
     }
 
@@ -31,22 +31,22 @@ public class YamlConstructor extends SafeConstructor {
 
         @Nullable
         @Override
-        public Object construct(@NotNull Node node) {
+        public Object construct(@NotNull final Node node) {
             if (node.isTwoStepsConstruction()) {
                 throw new YAMLException("Unexpected referential mapping structure. Node: " + node);
             }
 
-            Map<?, ?> raw = (Map<?, ?>) super.construct(node);
+            final Map<?, ?> raw = (Map<?, ?>) super.construct(node);
 
             if (raw.containsKey(ConfigurationSerialization.SERIALIZED_TYPE_KEY)) {
-                Map<String, Object> typed = new LinkedHashMap<String, Object>(raw.size());
-                for (Map.Entry<?, ?> entry : raw.entrySet()) {
+                final Map<String, Object> typed = new LinkedHashMap<String, Object>(raw.size());
+                for (final Map.Entry<?, ?> entry : raw.entrySet()) {
                     typed.put(entry.getKey().toString(), entry.getValue());
                 }
 
                 try {
                     return ConfigurationSerialization.deserializeObject(typed);
-                } catch (IllegalArgumentException ex) {
+                } catch (final IllegalArgumentException ex) {
                     throw new YAMLException("Could not deserialize object", ex);
                 }
             }
@@ -55,7 +55,7 @@ public class YamlConstructor extends SafeConstructor {
         }
 
         @Override
-        public void construct2ndStep(@NotNull Node node, @NotNull Object object) {
+        public void construct2ndStep(@NotNull final Node node, @NotNull final Object object) {
             throw new YAMLException("Unexpected referential mapping structure. Node: " + node);
         }
     }
diff --git a/src/main/java/org/bukkit/configuration/file/YamlRepresenter.java b/src/main/java/org/bukkit/configuration/file/YamlRepresenter.java
index 4670f866812c2a79c632f396c72a4b28783e58dd..e5bb05293179cd462cd36e0ee318aac6957e8d0f 100644
--- a/src/main/java/org/bukkit/configuration/file/YamlRepresenter.java
+++ b/src/main/java/org/bukkit/configuration/file/YamlRepresenter.java
@@ -24,7 +24,7 @@ public class YamlRepresenter extends Representer {
 
         @NotNull
         @Override
-        public Node representData(@NotNull Object data) {
+        public Node representData(@NotNull final Object data) {
             return super.representData(((ConfigurationSection) data).getValues(false));
         }
     }
@@ -33,9 +33,9 @@ public class YamlRepresenter extends Representer {
 
         @NotNull
         @Override
-        public Node representData(@NotNull Object data) {
-            ConfigurationSerializable serializable = (ConfigurationSerializable) data;
-            Map<String, Object> values = new LinkedHashMap<String, Object>();
+        public Node representData(@NotNull final Object data) {
+            final ConfigurationSerializable serializable = (ConfigurationSerializable) data;
+            final Map<String, Object> values = new LinkedHashMap<String, Object>();
             values.put(ConfigurationSerialization.SERIALIZED_TYPE_KEY, ConfigurationSerialization.getAlias(serializable.getClass()));
             values.putAll(serializable.serialize());
 
diff --git a/src/main/java/org/bukkit/configuration/serialization/ConfigurationSerialization.java b/src/main/java/org/bukkit/configuration/serialization/ConfigurationSerialization.java
index abcdb3f998aadb7838f4df2d50b6ec7293162ad1..0a1537927814457f5fe8c013b0c047c8e5a1307a 100644
--- a/src/main/java/org/bukkit/configuration/serialization/ConfigurationSerialization.java
+++ b/src/main/java/org/bukkit/configuration/serialization/ConfigurationSerialization.java
@@ -44,14 +44,14 @@ public class ConfigurationSerialization {
         registerClass(BoundingBox.class);
     }
 
-    protected ConfigurationSerialization(@NotNull Class<? extends ConfigurationSerializable> clazz) {
+    protected ConfigurationSerialization(@NotNull final Class<? extends ConfigurationSerializable> clazz) {
         this.clazz = clazz;
     }
 
     @Nullable
-    protected Method getMethod(@NotNull String name, boolean isStatic) {
+    protected Method getMethod(@NotNull final String name, final boolean isStatic) {
         try {
-            Method method = clazz.getDeclaredMethod(name, Map.class);
+            final Method method = clazz.getDeclaredMethod(name, Map.class);
 
             if (!ConfigurationSerializable.class.isAssignableFrom(method.getReturnType())) {
                 return null;
@@ -61,9 +61,9 @@ public class ConfigurationSerialization {
             }
 
             return method;
-        } catch (NoSuchMethodException ex) {
+        } catch (final NoSuchMethodException ex) {
             return null;
-        } catch (SecurityException ex) {
+        } catch (final SecurityException ex) {
             return null;
         }
     }
@@ -72,24 +72,24 @@ public class ConfigurationSerialization {
     protected Constructor<? extends ConfigurationSerializable> getConstructor() {
         try {
             return clazz.getConstructor(Map.class);
-        } catch (NoSuchMethodException ex) {
+        } catch (final NoSuchMethodException ex) {
             return null;
-        } catch (SecurityException ex) {
+        } catch (final SecurityException ex) {
             return null;
         }
     }
 
     @Nullable
-    protected ConfigurationSerializable deserializeViaMethod(@NotNull Method method, @NotNull Map<String, ?> args) {
+    protected ConfigurationSerializable deserializeViaMethod(@NotNull final Method method, @NotNull final Map<String, ?> args) {
         try {
-            ConfigurationSerializable result = (ConfigurationSerializable) method.invoke(null, args);
+            final ConfigurationSerializable result = (ConfigurationSerializable) method.invoke(null, args);
 
             if (result == null) {
                 Logger.getLogger(ConfigurationSerialization.class.getName()).log(Level.SEVERE, "Could not call method '" + method + "' of " + clazz + " for deserialization: method returned null");
             } else {
                 return result;
             }
-        } catch (Throwable ex) {
+        } catch (final Throwable ex) {
             Logger.getLogger(ConfigurationSerialization.class.getName()).log(
                     Level.SEVERE,
                     "Could not call method '" + method + "' of " + clazz + " for deserialization",
@@ -100,10 +100,10 @@ public class ConfigurationSerialization {
     }
 
     @Nullable
-    protected ConfigurationSerializable deserializeViaCtor(@NotNull Constructor<? extends ConfigurationSerializable> ctor, @NotNull Map<String, ?> args) {
+    protected ConfigurationSerializable deserializeViaCtor(@NotNull final Constructor<? extends ConfigurationSerializable> ctor, @NotNull final Map<String, ?> args) {
         try {
             return ctor.newInstance(args);
-        } catch (Throwable ex) {
+        } catch (final Throwable ex) {
             Logger.getLogger(ConfigurationSerialization.class.getName()).log(
                     Level.SEVERE,
                     "Could not call constructor '" + ctor + "' of " + clazz + " for deserialization",
@@ -114,7 +114,7 @@ public class ConfigurationSerialization {
     }
 
     @Nullable
-    public ConfigurationSerializable deserialize(@NotNull Map<String, ?> args) {
+    public ConfigurationSerializable deserialize(@NotNull final Map<String, ?> args) {
         Preconditions.checkArgument(args != null, "Args must not be null");
 
         ConfigurationSerializable result = null;
@@ -137,7 +137,7 @@ public class ConfigurationSerialization {
         }
 
         if (result == null) {
-            Constructor<? extends ConfigurationSerializable> constructor = getConstructor();
+            final Constructor<? extends ConfigurationSerializable> constructor = getConstructor();
 
             if (constructor != null) {
                 result = deserializeViaCtor(constructor, args);
@@ -163,7 +163,7 @@ public class ConfigurationSerialization {
      * @return New instance of the specified class
      */
     @Nullable
-    public static ConfigurationSerializable deserializeObject(@NotNull Map<String, ?> args, @NotNull Class<? extends ConfigurationSerializable> clazz) {
+    public static ConfigurationSerializable deserializeObject(@NotNull final Map<String, ?> args, @NotNull final Class<? extends ConfigurationSerializable> clazz) {
         return new ConfigurationSerialization(clazz).deserialize(args);
     }
 
@@ -182,12 +182,12 @@ public class ConfigurationSerialization {
      * @return New instance of the specified class
      */
     @Nullable
-    public static ConfigurationSerializable deserializeObject(@NotNull Map<String, ?> args) {
+    public static ConfigurationSerializable deserializeObject(@NotNull final Map<String, ?> args) {
         Class<? extends ConfigurationSerializable> clazz = null;
 
         if (args.containsKey(SERIALIZED_TYPE_KEY)) {
             try {
-                String alias = (String) args.get(SERIALIZED_TYPE_KEY);
+                final String alias = (String) args.get(SERIALIZED_TYPE_KEY);
 
                 if (alias == null) {
                     throw new IllegalArgumentException("Cannot have null alias");
@@ -196,7 +196,7 @@ public class ConfigurationSerialization {
                 if (clazz == null) {
                     throw new IllegalArgumentException("Specified class does not exist ('" + alias + "')");
                 }
-            } catch (ClassCastException ex) {
+            } catch (final ClassCastException ex) {
                 ex.fillInStackTrace();
                 throw ex;
             }
@@ -213,8 +213,8 @@ public class ConfigurationSerialization {
      *
      * @param clazz Class to register
      */
-    public static void registerClass(@NotNull Class<? extends ConfigurationSerializable> clazz) {
-        DelegateDeserialization delegate = clazz.getAnnotation(DelegateDeserialization.class);
+    public static void registerClass(@NotNull final Class<? extends ConfigurationSerializable> clazz) {
+        final DelegateDeserialization delegate = clazz.getAnnotation(DelegateDeserialization.class);
 
         if (delegate == null) {
             registerClass(clazz, getAlias(clazz));
@@ -230,7 +230,7 @@ public class ConfigurationSerialization {
      * @param alias Alias to register as
      * @see SerializableAs
      */
-    public static void registerClass(@NotNull Class<? extends ConfigurationSerializable> clazz, @NotNull String alias) {
+    public static void registerClass(@NotNull final Class<? extends ConfigurationSerializable> clazz, @NotNull final String alias) {
         aliases.put(alias, clazz);
     }
 
@@ -239,7 +239,7 @@ public class ConfigurationSerialization {
      *
      * @param alias Alias to unregister
      */
-    public static void unregisterClass(@NotNull String alias) {
+    public static void unregisterClass(@NotNull final String alias) {
         aliases.remove(alias);
     }
 
@@ -249,7 +249,7 @@ public class ConfigurationSerialization {
      *
      * @param clazz Class to unregister
      */
-    public static void unregisterClass(@NotNull Class<? extends ConfigurationSerializable> clazz) {
+    public static void unregisterClass(@NotNull final Class<? extends ConfigurationSerializable> clazz) {
         while (aliases.values().remove(clazz)) {
             ;
         }
@@ -263,7 +263,7 @@ public class ConfigurationSerialization {
      * @return Registered class, or null if not found
      */
     @Nullable
-    public static Class<? extends ConfigurationSerializable> getClassByAlias(@NotNull String alias) {
+    public static Class<? extends ConfigurationSerializable> getClassByAlias(@NotNull final String alias) {
         return aliases.get(alias);
     }
 
@@ -275,7 +275,7 @@ public class ConfigurationSerialization {
      * @return Alias to use for the class
      */
     @NotNull
-    public static String getAlias(@NotNull Class<? extends ConfigurationSerializable> clazz) {
+    public static String getAlias(@NotNull final Class<? extends ConfigurationSerializable> clazz) {
         DelegateDeserialization delegate = clazz.getAnnotation(DelegateDeserialization.class);
 
         if (delegate != null) {
@@ -287,7 +287,7 @@ public class ConfigurationSerialization {
         }
 
         if (delegate == null) {
-            SerializableAs alias = clazz.getAnnotation(SerializableAs.class);
+            final SerializableAs alias = clazz.getAnnotation(SerializableAs.class);
 
             if ((alias != null) && (alias.value() != null)) {
                 return alias.value();
diff --git a/src/main/java/org/bukkit/conversations/BooleanPrompt.java b/src/main/java/org/bukkit/conversations/BooleanPrompt.java
index 38ed0d4580ab2ae1af4b0f84e2526bbeb1a2bc7e..3749d368991afb209111d0d916ae7a64044bafde 100644
--- a/src/main/java/org/bukkit/conversations/BooleanPrompt.java
+++ b/src/main/java/org/bukkit/conversations/BooleanPrompt.java
@@ -21,13 +21,13 @@ public abstract class BooleanPrompt extends ValidatingPrompt {
     }
 
     @Override
-    protected boolean isInputValid(@NotNull ConversationContext context, @NotNull String input) {
+    protected boolean isInputValid(@NotNull final ConversationContext context, @NotNull final String input) {
         return VALID_INPUTS.contains(input.toLowerCase(Locale.ROOT));
     }
 
     @Nullable
     @Override
-    protected Prompt acceptValidatedInput(@NotNull ConversationContext context, @NotNull String input) {
+    protected Prompt acceptValidatedInput(@NotNull final ConversationContext context, @NotNull final String input) {
         return acceptValidatedInput(context, TRUE_INPUTS.contains(input.toLowerCase(Locale.ROOT)));
     }
 
diff --git a/src/main/java/org/bukkit/conversations/Conversation.java b/src/main/java/org/bukkit/conversations/Conversation.java
index bcffe5fd6bc759061507287aa856bcef685d5a08..e50bc5253b10c1d47b64d64a92516b31fbfe8845 100644
--- a/src/main/java/org/bukkit/conversations/Conversation.java
+++ b/src/main/java/org/bukkit/conversations/Conversation.java
@@ -52,7 +52,7 @@ public class Conversation {
      * @param forWhom The entity for whom this conversation is mediating.
      * @param firstPrompt The first prompt in the conversation graph.
      */
-    public Conversation(@Nullable Plugin plugin, @NotNull Conversable forWhom, @Nullable Prompt firstPrompt) {
+    public Conversation(@Nullable final Plugin plugin, @NotNull final Conversable forWhom, @Nullable final Prompt firstPrompt) {
         this(plugin, forWhom, firstPrompt, new HashMap<Object, Object>());
     }
 
@@ -65,7 +65,7 @@ public class Conversation {
      * @param initialSessionData Any initial values to put in the conversation
      *     context sessionData map.
      */
-    public Conversation(@Nullable Plugin plugin, @NotNull Conversable forWhom, @Nullable Prompt firstPrompt, @NotNull Map<Object, Object> initialSessionData) {
+    public Conversation(@Nullable final Plugin plugin, @NotNull final Conversable forWhom, @Nullable final Prompt firstPrompt, @NotNull final Map<Object, Object> initialSessionData) {
         this.firstPrompt = firstPrompt;
         this.context = new ConversationContext(plugin, forWhom, initialSessionData);
         this.modal = true;
@@ -103,7 +103,7 @@ public class Conversation {
      *
      * @param modal The new conversation modality.
      */
-    void setModal(boolean modal) {
+    void setModal(final boolean modal) {
         this.modal = modal;
     }
 
@@ -125,7 +125,7 @@ public class Conversation {
      *
      * @param localEchoEnabled The status of local echo.
      */
-    public void setLocalEchoEnabled(boolean localEchoEnabled) {
+    public void setLocalEchoEnabled(final boolean localEchoEnabled) {
         this.localEchoEnabled = localEchoEnabled;
     }
 
@@ -146,7 +146,7 @@ public class Conversation {
      *
      * @param prefix The ConversationPrefix to use.
      */
-    void setPrefix(@NotNull ConversationPrefix prefix) {
+    void setPrefix(@NotNull final ConversationPrefix prefix) {
         this.prefix = prefix;
     }
 
@@ -155,7 +155,7 @@ public class Conversation {
      *
      * @param canceller The {@link ConversationCanceller} to add.
      */
-    void addConversationCanceller(@NotNull ConversationCanceller canceller) {
+    void addConversationCanceller(@NotNull final ConversationCanceller canceller) {
         canceller.setConversation(this);
         this.cancellers.add(canceller);
     }
@@ -214,7 +214,7 @@ public class Conversation {
      *
      * @param input The user's chat text.
      */
-    public void acceptInput(@NotNull String input) {
+    public void acceptInput(@NotNull final String input) {
         if (currentPrompt != null) {
 
             // Echo the user's input
@@ -223,7 +223,7 @@ public class Conversation {
             }
 
             // Test for conversation abandonment based on input
-            for (ConversationCanceller canceller : cancellers) {
+            for (final ConversationCanceller canceller : cancellers) {
                 if (canceller.cancelBasedOnInput(context, input)) {
                     abandon(new ConversationAbandonedEvent(this, canceller));
                     return;
@@ -241,7 +241,7 @@ public class Conversation {
      *
      * @param listener The listener to add.
      */
-    public synchronized void addConversationAbandonedListener(@NotNull ConversationAbandonedListener listener) {
+    public synchronized void addConversationAbandonedListener(@NotNull final ConversationAbandonedListener listener) {
         abandonedListeners.add(listener);
     }
 
@@ -250,7 +250,7 @@ public class Conversation {
      *
      * @param listener The listener to remove.
      */
-    public synchronized void removeConversationAbandonedListener(@NotNull ConversationAbandonedListener listener) {
+    public synchronized void removeConversationAbandonedListener(@NotNull final ConversationAbandonedListener listener) {
         abandonedListeners.remove(listener);
     }
 
@@ -268,12 +268,12 @@ public class Conversation {
      *
      * @param details Details about why the conversation was abandoned
      */
-    public synchronized void abandon(@NotNull ConversationAbandonedEvent details) {
+    public synchronized void abandon(@NotNull final ConversationAbandonedEvent details) {
         if (!abandoned) {
             abandoned = true;
             currentPrompt = null;
             context.getForWhom().abandonConversation(this);
-            for (ConversationAbandonedListener listener : abandonedListeners) {
+            for (final ConversationAbandonedListener listener : abandonedListeners) {
                 listener.conversationAbandoned(details);
             }
         }
diff --git a/src/main/java/org/bukkit/conversations/ConversationAbandonedEvent.java b/src/main/java/org/bukkit/conversations/ConversationAbandonedEvent.java
index 20afc034c4f3af5c0c6f4af63a1161000e5cb4b4..ceaebed1efd7a1b69bb6102b4c7ca1791cbd202e 100644
--- a/src/main/java/org/bukkit/conversations/ConversationAbandonedEvent.java
+++ b/src/main/java/org/bukkit/conversations/ConversationAbandonedEvent.java
@@ -13,11 +13,11 @@ public class ConversationAbandonedEvent extends EventObject {
     private final ConversationContext context;
     private final @Nullable ConversationCanceller canceller;
 
-    public ConversationAbandonedEvent(@NotNull Conversation conversation) {
+    public ConversationAbandonedEvent(@NotNull final Conversation conversation) {
         this(conversation, null);
     }
 
-    public ConversationAbandonedEvent(@NotNull Conversation conversation, @Nullable ConversationCanceller canceller) {
+    public ConversationAbandonedEvent(@NotNull final Conversation conversation, @Nullable final ConversationCanceller canceller) {
         super(conversation);
         this.context = conversation.getContext();
         this.canceller = canceller;
diff --git a/src/main/java/org/bukkit/conversations/ConversationContext.java b/src/main/java/org/bukkit/conversations/ConversationContext.java
index d05d1474241ed6fd2dfdf130b4482a5eb7f13696..747839c5bb1878bc42ad562a80b45b048f5456b8 100644
--- a/src/main/java/org/bukkit/conversations/ConversationContext.java
+++ b/src/main/java/org/bukkit/conversations/ConversationContext.java
@@ -22,7 +22,7 @@ public class ConversationContext {
      * @param initialSessionData Any initial values to put in the sessionData
      *     map.
      */
-    public ConversationContext(@Nullable Plugin plugin, @NotNull Conversable forWhom, @NotNull Map<Object, Object> initialSessionData) {
+    public ConversationContext(@Nullable final Plugin plugin, @NotNull final Conversable forWhom, @NotNull final Map<Object, Object> initialSessionData) {
         this.plugin = plugin;
         this.forWhom = forWhom;
         this.sessionData = initialSessionData;
@@ -69,7 +69,7 @@ public class ConversationContext {
      * @return The requested session data.
      */
     @Nullable
-    public Object getSessionData(@NotNull Object key) {
+    public Object getSessionData(@NotNull final Object key) {
         return sessionData.get(key);
     }
 
@@ -81,7 +81,7 @@ public class ConversationContext {
      * @param key The session data key.
      * @param value The session data value.
      */
-    public void setSessionData(@NotNull Object key, @Nullable Object value) {
+    public void setSessionData(@NotNull final Object key, @Nullable final Object value) {
         sessionData.put(key, value);
     }
 }
diff --git a/src/main/java/org/bukkit/conversations/ConversationFactory.java b/src/main/java/org/bukkit/conversations/ConversationFactory.java
index f6e095b929756d5bc5e2f0c67dfe2de9d8f7d23b..e830c7febb65b6514246db05c73fcc67a4786f47 100644
--- a/src/main/java/org/bukkit/conversations/ConversationFactory.java
+++ b/src/main/java/org/bukkit/conversations/ConversationFactory.java
@@ -36,7 +36,7 @@ public class ConversationFactory {
      *
      * @param plugin The plugin that owns the factory.
      */
-    public ConversationFactory(@NotNull Plugin plugin) {
+    public ConversationFactory(@NotNull final Plugin plugin) {
         this.plugin = plugin;
         isModal = true;
         localEchoEnabled = true;
@@ -59,7 +59,7 @@ public class ConversationFactory {
      * @return This object.
      */
     @NotNull
-    public ConversationFactory withModality(boolean modal) {
+    public ConversationFactory withModality(final boolean modal) {
         isModal = modal;
         return this;
     }
@@ -73,7 +73,7 @@ public class ConversationFactory {
      * @return This object.
      */
     @NotNull
-    public ConversationFactory withLocalEcho(boolean localEchoEnabled) {
+    public ConversationFactory withLocalEcho(final boolean localEchoEnabled) {
         this.localEchoEnabled = localEchoEnabled;
         return this;
     }
@@ -88,7 +88,7 @@ public class ConversationFactory {
      * @return This object.
      */
     @NotNull
-    public ConversationFactory withPrefix(@NotNull ConversationPrefix prefix) {
+    public ConversationFactory withPrefix(@NotNull final ConversationPrefix prefix) {
         this.prefix = prefix;
         return this;
     }
@@ -103,7 +103,7 @@ public class ConversationFactory {
      * @return This object.
      */
     @NotNull
-    public ConversationFactory withTimeout(int timeoutSeconds) {
+    public ConversationFactory withTimeout(final int timeoutSeconds) {
         return withConversationCanceller(new InactivityConversationCanceller(plugin, timeoutSeconds));
     }
 
@@ -116,7 +116,7 @@ public class ConversationFactory {
      * @return This object.
      */
     @NotNull
-    public ConversationFactory withFirstPrompt(@Nullable Prompt firstPrompt) {
+    public ConversationFactory withFirstPrompt(@Nullable final Prompt firstPrompt) {
         this.firstPrompt = firstPrompt;
         return this;
     }
@@ -130,7 +130,7 @@ public class ConversationFactory {
      * @return This object.
      */
     @NotNull
-    public ConversationFactory withInitialSessionData(@NotNull Map<Object, Object> initialSessionData) {
+    public ConversationFactory withInitialSessionData(@NotNull final Map<Object, Object> initialSessionData) {
         this.initialSessionData = initialSessionData;
         return this;
     }
@@ -143,7 +143,7 @@ public class ConversationFactory {
      * @return This object.
      */
     @NotNull
-    public ConversationFactory withEscapeSequence(@NotNull String escapeSequence) {
+    public ConversationFactory withEscapeSequence(@NotNull final String escapeSequence) {
         return withConversationCanceller(new ExactMatchConversationCanceller(escapeSequence));
     }
 
@@ -154,7 +154,7 @@ public class ConversationFactory {
      * @return This object.
      */
     @NotNull
-    public ConversationFactory withConversationCanceller(@NotNull ConversationCanceller canceller) {
+    public ConversationFactory withConversationCanceller(@NotNull final ConversationCanceller canceller) {
         cancellers.add(canceller);
         return this;
     }
@@ -168,7 +168,7 @@ public class ConversationFactory {
      * @return This object.
      */
     @NotNull
-    public ConversationFactory thatExcludesNonPlayersWithMessage(@Nullable String playerOnlyMessage) {
+    public ConversationFactory thatExcludesNonPlayersWithMessage(@Nullable final String playerOnlyMessage) {
         this.playerOnlyMessage = playerOnlyMessage;
         return this;
     }
@@ -181,7 +181,7 @@ public class ConversationFactory {
      * @return This object.
      */
     @NotNull
-    public ConversationFactory addConversationAbandonedListener(@NotNull ConversationAbandonedListener listener) {
+    public ConversationFactory addConversationAbandonedListener(@NotNull final ConversationAbandonedListener listener) {
         abandonedListeners.add(listener);
         return this;
     }
@@ -194,28 +194,28 @@ public class ConversationFactory {
      * @return A new conversation.
      */
     @NotNull
-    public Conversation buildConversation(@NotNull Conversable forWhom) {
+    public Conversation buildConversation(@NotNull final Conversable forWhom) {
         //Abort conversation construction if we aren't supposed to talk to non-players
         if (playerOnlyMessage != null && !(forWhom instanceof Player)) {
             return new Conversation(plugin, forWhom, new NotPlayerMessagePrompt());
         }
 
         //Clone any initial session data
-        Map<Object, Object> copiedInitialSessionData = new HashMap<Object, Object>(initialSessionData);
+        final Map<Object, Object> copiedInitialSessionData = new HashMap<Object, Object>(initialSessionData);
 
         //Build and return a conversation
-        Conversation conversation = new Conversation(plugin, forWhom, firstPrompt, copiedInitialSessionData);
+        final Conversation conversation = new Conversation(plugin, forWhom, firstPrompt, copiedInitialSessionData);
         conversation.setModal(isModal);
         conversation.setLocalEchoEnabled(localEchoEnabled);
         conversation.setPrefix(prefix);
 
         //Clone the conversation cancellers
-        for (ConversationCanceller canceller : cancellers) {
+        for (final ConversationCanceller canceller : cancellers) {
             conversation.addConversationCanceller(canceller.clone());
         }
 
         //Add the ConversationAbandonedListeners
-        for (ConversationAbandonedListener listener : abandonedListeners) {
+        for (final ConversationAbandonedListener listener : abandonedListeners) {
             conversation.addConversationAbandonedListener(listener);
         }
 
@@ -226,13 +226,13 @@ public class ConversationFactory {
 
         @Override
         @NotNull
-        public String getPromptText(@NotNull ConversationContext context) {
+        public String getPromptText(@NotNull final ConversationContext context) {
             return playerOnlyMessage;
         }
 
         @Nullable
         @Override
-        protected Prompt getNextPrompt(@NotNull ConversationContext context) {
+        protected Prompt getNextPrompt(@NotNull final ConversationContext context) {
             return Prompt.END_OF_CONVERSATION;
         }
     }
diff --git a/src/main/java/org/bukkit/conversations/ExactMatchConversationCanceller.java b/src/main/java/org/bukkit/conversations/ExactMatchConversationCanceller.java
index 384dad0b65f9ee744613c853498f4fe099d9e72e..31ab993922f11c5c6701121397392fd123d9100e 100644
--- a/src/main/java/org/bukkit/conversations/ExactMatchConversationCanceller.java
+++ b/src/main/java/org/bukkit/conversations/ExactMatchConversationCanceller.java
@@ -15,15 +15,15 @@ public class ExactMatchConversationCanceller implements ConversationCanceller {
      * @param escapeSequence The string that, if entered by the user, will
      *     cancel the conversation.
      */
-    public ExactMatchConversationCanceller(@NotNull String escapeSequence) {
+    public ExactMatchConversationCanceller(@NotNull final String escapeSequence) {
         this.escapeSequence = escapeSequence;
     }
 
     @Override
-    public void setConversation(@NotNull Conversation conversation) {}
+    public void setConversation(@NotNull final Conversation conversation) {}
 
     @Override
-    public boolean cancelBasedOnInput(@NotNull ConversationContext context, @NotNull String input) {
+    public boolean cancelBasedOnInput(@NotNull final ConversationContext context, @NotNull final String input) {
         return input.equals(escapeSequence);
     }
 
diff --git a/src/main/java/org/bukkit/conversations/FixedSetPrompt.java b/src/main/java/org/bukkit/conversations/FixedSetPrompt.java
index df92081ad2fe171ce0e2d70f388fb1ab786fcb6a..e57adc65f722d085240a5c45743a0da22f051b99 100644
--- a/src/main/java/org/bukkit/conversations/FixedSetPrompt.java
+++ b/src/main/java/org/bukkit/conversations/FixedSetPrompt.java
@@ -21,7 +21,7 @@ public abstract class FixedSetPrompt extends ValidatingPrompt {
      * @param fixedSet A fixed set of strings, one of which the user must
      *     type.
      */
-    public FixedSetPrompt(@NotNull String... fixedSet) {
+    public FixedSetPrompt(@NotNull final String... fixedSet) {
         super();
         this.fixedSet = Arrays.asList(fixedSet);
     }
@@ -29,7 +29,7 @@ public abstract class FixedSetPrompt extends ValidatingPrompt {
     private FixedSetPrompt() {}
 
     @Override
-    protected boolean isInputValid(@NotNull ConversationContext context, @NotNull String input) {
+    protected boolean isInputValid(@NotNull final ConversationContext context, @NotNull final String input) {
         return fixedSet.contains(input);
     }
 
diff --git a/src/main/java/org/bukkit/conversations/InactivityConversationCanceller.java b/src/main/java/org/bukkit/conversations/InactivityConversationCanceller.java
index fd8daa02063833a7457fec7a714ca37048487d94..1ecd41c2fd2e4b63abaef2aa39e2954417a02262 100644
--- a/src/main/java/org/bukkit/conversations/InactivityConversationCanceller.java
+++ b/src/main/java/org/bukkit/conversations/InactivityConversationCanceller.java
@@ -19,19 +19,19 @@ public class InactivityConversationCanceller implements ConversationCanceller {
      * @param plugin The owning plugin.
      * @param timeoutSeconds The number of seconds of inactivity to wait.
      */
-    public InactivityConversationCanceller(@NotNull Plugin plugin, int timeoutSeconds) {
+    public InactivityConversationCanceller(@NotNull final Plugin plugin, final int timeoutSeconds) {
         this.plugin = plugin;
         this.timeoutSeconds = timeoutSeconds;
     }
 
     @Override
-    public void setConversation(@NotNull Conversation conversation) {
+    public void setConversation(@NotNull final Conversation conversation) {
         this.conversation = conversation;
         startTimer();
     }
 
     @Override
-    public boolean cancelBasedOnInput(@NotNull ConversationContext context, @NotNull String input) {
+    public boolean cancelBasedOnInput(@NotNull final ConversationContext context, @NotNull final String input) {
         // Reset the inactivity timer
         stopTimer();
         startTimer();
@@ -78,7 +78,7 @@ public class InactivityConversationCanceller implements ConversationCanceller {
      *
      * @param conversation The conversation being abandoned.
      */
-    protected void cancelling(@NotNull Conversation conversation) {
+    protected void cancelling(@NotNull final Conversation conversation) {
 
     }
 }
diff --git a/src/main/java/org/bukkit/conversations/ManuallyAbandonedConversationCanceller.java b/src/main/java/org/bukkit/conversations/ManuallyAbandonedConversationCanceller.java
index 0a289564a57d9b871a57d3611a228861fa1e91f4..98b5fa1c9eaed77307dfb0350e14bc0f0044709b 100644
--- a/src/main/java/org/bukkit/conversations/ManuallyAbandonedConversationCanceller.java
+++ b/src/main/java/org/bukkit/conversations/ManuallyAbandonedConversationCanceller.java
@@ -9,12 +9,12 @@ import org.jetbrains.annotations.NotNull;
  */
 public class ManuallyAbandonedConversationCanceller implements ConversationCanceller {
     @Override
-    public void setConversation(@NotNull Conversation conversation) {
+    public void setConversation(@NotNull final Conversation conversation) {
         throw new UnsupportedOperationException();
     }
 
     @Override
-    public boolean cancelBasedOnInput(@NotNull ConversationContext context, @NotNull String input) {
+    public boolean cancelBasedOnInput(@NotNull final ConversationContext context, @NotNull final String input) {
         throw new UnsupportedOperationException();
     }
 
diff --git a/src/main/java/org/bukkit/conversations/MessagePrompt.java b/src/main/java/org/bukkit/conversations/MessagePrompt.java
index e066166e5d8a43676c675d7fe369c94dde22df6e..bc65f60c9617401613058c4f15d62aa5ac65bf1e 100644
--- a/src/main/java/org/bukkit/conversations/MessagePrompt.java
+++ b/src/main/java/org/bukkit/conversations/MessagePrompt.java
@@ -20,7 +20,7 @@ public abstract class MessagePrompt implements Prompt {
      * @return Always false.
      */
     @Override
-    public boolean blocksForInput(@NotNull ConversationContext context) {
+    public boolean blocksForInput(@NotNull final ConversationContext context) {
         return false;
     }
 
@@ -34,7 +34,7 @@ public abstract class MessagePrompt implements Prompt {
      */
     @Override
     @Nullable
-    public Prompt acceptInput(@NotNull ConversationContext context, @Nullable String input) {
+    public Prompt acceptInput(@NotNull final ConversationContext context, @Nullable final String input) {
         return getNextPrompt(context);
     }
 
diff --git a/src/main/java/org/bukkit/conversations/NullConversationPrefix.java b/src/main/java/org/bukkit/conversations/NullConversationPrefix.java
index 6ee8ebb1e56080ee91fcdaa49a5b8fcbef675be7..0307abef0b30d30903f5d2feb1d442ca708a2d0d 100644
--- a/src/main/java/org/bukkit/conversations/NullConversationPrefix.java
+++ b/src/main/java/org/bukkit/conversations/NullConversationPrefix.java
@@ -16,7 +16,7 @@ public class NullConversationPrefix implements ConversationPrefix {
      */
     @Override
     @NotNull
-    public String getPrefix(@NotNull ConversationContext context) {
+    public String getPrefix(@NotNull final ConversationContext context) {
         return "";
     }
 }
diff --git a/src/main/java/org/bukkit/conversations/NumericPrompt.java b/src/main/java/org/bukkit/conversations/NumericPrompt.java
index 67134fa384d8f2d45c7f9a4d1d9045c14ec803ee..8450b0801eabb217632a66aa6f8879ffd6ce3111 100644
--- a/src/main/java/org/bukkit/conversations/NumericPrompt.java
+++ b/src/main/java/org/bukkit/conversations/NumericPrompt.java
@@ -14,7 +14,7 @@ public abstract class NumericPrompt extends ValidatingPrompt {
     }
 
     @Override
-    protected boolean isInputValid(@NotNull ConversationContext context, @NotNull String input) {
+    protected boolean isInputValid(@NotNull final ConversationContext context, @NotNull final String input) {
         return NumberUtils.isNumber(input) && isNumberValid(context, NumberUtils.createNumber(input));
     }
 
@@ -26,16 +26,16 @@ public abstract class NumericPrompt extends ValidatingPrompt {
      * @param input The number the player provided.
      * @return The validity of the player's input.
      */
-    protected boolean isNumberValid(@NotNull ConversationContext context, @NotNull Number input) {
+    protected boolean isNumberValid(@NotNull final ConversationContext context, @NotNull final Number input) {
         return true;
     }
 
     @Nullable
     @Override
-    protected Prompt acceptValidatedInput(@NotNull ConversationContext context, @NotNull String input) {
+    protected Prompt acceptValidatedInput(@NotNull final ConversationContext context, @NotNull final String input) {
         try {
             return acceptValidatedInput(context, NumberUtils.createNumber(input));
-        } catch (NumberFormatException e) {
+        } catch (final NumberFormatException e) {
             return acceptValidatedInput(context, NumberUtils.INTEGER_ZERO);
         }
     }
@@ -53,7 +53,7 @@ public abstract class NumericPrompt extends ValidatingPrompt {
 
     @Nullable
     @Override
-    protected String getFailedValidationText(@NotNull ConversationContext context, @NotNull String invalidInput) {
+    protected String getFailedValidationText(@NotNull final ConversationContext context, @NotNull final String invalidInput) {
         if (NumberUtils.isNumber(invalidInput)) {
             return getFailedValidationText(context, NumberUtils.createNumber(invalidInput));
         } else {
@@ -70,7 +70,7 @@ public abstract class NumericPrompt extends ValidatingPrompt {
      * @return A message explaining how to correct the input.
      */
     @Nullable
-    protected String getInputNotNumericText(@NotNull ConversationContext context, @NotNull String invalidInput) {
+    protected String getInputNotNumericText(@NotNull final ConversationContext context, @NotNull final String invalidInput) {
         return null;
     }
 
@@ -83,7 +83,7 @@ public abstract class NumericPrompt extends ValidatingPrompt {
      * @return A message explaining how to correct the input.
      */
     @Nullable
-    protected String getFailedValidationText(@NotNull ConversationContext context, @NotNull Number invalidInput) {
+    protected String getFailedValidationText(@NotNull final ConversationContext context, @NotNull final Number invalidInput) {
         return null;
     }
 }
diff --git a/src/main/java/org/bukkit/conversations/PlayerNamePrompt.java b/src/main/java/org/bukkit/conversations/PlayerNamePrompt.java
index 4078c49d2d6288fd29f6d35efadbb0cae7f801d5..03b8d58d1053fe1e7325eaa0f5af6454e0fe906d 100644
--- a/src/main/java/org/bukkit/conversations/PlayerNamePrompt.java
+++ b/src/main/java/org/bukkit/conversations/PlayerNamePrompt.java
@@ -12,19 +12,19 @@ import org.jetbrains.annotations.Nullable;
 public abstract class PlayerNamePrompt extends ValidatingPrompt {
     private final Plugin plugin;
 
-    public PlayerNamePrompt(@NotNull Plugin plugin) {
+    public PlayerNamePrompt(@NotNull final Plugin plugin) {
         super();
         this.plugin = plugin;
     }
 
     @Override
-    protected boolean isInputValid(@NotNull ConversationContext context, @NotNull String input) {
+    protected boolean isInputValid(@NotNull final ConversationContext context, @NotNull final String input) {
         return plugin.getServer().getPlayer(input) != null;
     }
 
     @Nullable
     @Override
-    protected Prompt acceptValidatedInput(@NotNull ConversationContext context, @NotNull String input) {
+    protected Prompt acceptValidatedInput(@NotNull final ConversationContext context, @NotNull final String input) {
         return acceptValidatedInput(context, plugin.getServer().getPlayer(input));
     }
 
diff --git a/src/main/java/org/bukkit/conversations/PluginNameConversationPrefix.java b/src/main/java/org/bukkit/conversations/PluginNameConversationPrefix.java
index 2af7e7b9718be2ffad10104fec0604f69c195308..5ada2f1843b1287e9c9d403a4e0b0b0bea4dccac 100644
--- a/src/main/java/org/bukkit/conversations/PluginNameConversationPrefix.java
+++ b/src/main/java/org/bukkit/conversations/PluginNameConversationPrefix.java
@@ -16,11 +16,11 @@ public class PluginNameConversationPrefix implements ConversationPrefix {
 
     private final String cachedPrefix;
 
-    public PluginNameConversationPrefix(@NotNull Plugin plugin) {
+    public PluginNameConversationPrefix(@NotNull final Plugin plugin) {
         this(plugin, " > ", ChatColor.LIGHT_PURPLE);
     }
 
-    public PluginNameConversationPrefix(@NotNull Plugin plugin, @NotNull String separator, @NotNull ChatColor prefixColor) {
+    public PluginNameConversationPrefix(@NotNull final Plugin plugin, @NotNull final String separator, @NotNull final ChatColor prefixColor) {
         this.separator = separator;
         this.prefixColor = prefixColor;
         this.plugin = plugin;
@@ -36,7 +36,7 @@ public class PluginNameConversationPrefix implements ConversationPrefix {
      */
     @Override
     @NotNull
-    public String getPrefix(@NotNull ConversationContext context) {
+    public String getPrefix(@NotNull final ConversationContext context) {
         return cachedPrefix;
     }
 }
diff --git a/src/main/java/org/bukkit/conversations/RegexPrompt.java b/src/main/java/org/bukkit/conversations/RegexPrompt.java
index 6b3f1e4591d68fe6698cd960b97b04c82f67366d..d3207940467a36041462b92e616da5d819673da0 100644
--- a/src/main/java/org/bukkit/conversations/RegexPrompt.java
+++ b/src/main/java/org/bukkit/conversations/RegexPrompt.java
@@ -11,11 +11,11 @@ public abstract class RegexPrompt extends ValidatingPrompt {
 
     private Pattern pattern;
 
-    public RegexPrompt(@NotNull String regex) {
+    public RegexPrompt(@NotNull final String regex) {
         this(Pattern.compile(regex));
     }
 
-    public RegexPrompt(@NotNull Pattern pattern) {
+    public RegexPrompt(@NotNull final Pattern pattern) {
         super();
         this.pattern = pattern;
     }
@@ -23,7 +23,7 @@ public abstract class RegexPrompt extends ValidatingPrompt {
     private RegexPrompt() {}
 
     @Override
-    protected boolean isInputValid(@NotNull ConversationContext context, @NotNull String input) {
+    protected boolean isInputValid(@NotNull final ConversationContext context, @NotNull final String input) {
         return pattern.matcher(input).matches();
     }
 }
diff --git a/src/main/java/org/bukkit/conversations/StringPrompt.java b/src/main/java/org/bukkit/conversations/StringPrompt.java
index f9b86d6d5bd1263c0bcf419a9d2923b8a4c35916..9919090f1f191f3b82e6949ea5a70a65c470edad 100644
--- a/src/main/java/org/bukkit/conversations/StringPrompt.java
+++ b/src/main/java/org/bukkit/conversations/StringPrompt.java
@@ -15,7 +15,7 @@ public abstract class StringPrompt implements Prompt {
      * @return True.
      */
     @Override
-    public boolean blocksForInput(@NotNull ConversationContext context) {
+    public boolean blocksForInput(@NotNull final ConversationContext context) {
         return true;
     }
 }
diff --git a/src/main/java/org/bukkit/conversations/ValidatingPrompt.java b/src/main/java/org/bukkit/conversations/ValidatingPrompt.java
index c57b6cb479fdaf135d8153605268b615b31325d7..5d3f0cc96427f4fd4b96874ad924cc072ffe1d13 100644
--- a/src/main/java/org/bukkit/conversations/ValidatingPrompt.java
+++ b/src/main/java/org/bukkit/conversations/ValidatingPrompt.java
@@ -25,11 +25,11 @@ public abstract class ValidatingPrompt implements Prompt {
      */
     @Override
     @Nullable
-    public Prompt acceptInput(@NotNull ConversationContext context, @Nullable String input) {
+    public Prompt acceptInput(@NotNull final ConversationContext context, @Nullable final String input) {
         if (isInputValid(context, input)) {
             return acceptValidatedInput(context, input);
         } else {
-            String failPrompt = getFailedValidationText(context, input);
+            final String failPrompt = getFailedValidationText(context, input);
             if (failPrompt != null) {
                 context.getForWhom().sendRawMessage(ChatColor.RED + failPrompt);
             }
@@ -45,7 +45,7 @@ public abstract class ValidatingPrompt implements Prompt {
      * @return True.
      */
     @Override
-    public boolean blocksForInput(@NotNull ConversationContext context) {
+    public boolean blocksForInput(@NotNull final ConversationContext context) {
         return true;
     }
 
@@ -79,7 +79,7 @@ public abstract class ValidatingPrompt implements Prompt {
      * @return A message explaining how to correct the input.
      */
     @Nullable
-    protected String getFailedValidationText(@NotNull ConversationContext context, @NotNull String invalidInput) {
+    protected String getFailedValidationText(@NotNull final ConversationContext context, @NotNull final String invalidInput) {
         return null;
     }
 }
diff --git a/src/main/java/org/bukkit/enchantments/Enchantment.java b/src/main/java/org/bukkit/enchantments/Enchantment.java
index e9425309bcfb352c242702634858ab718bd80548..90e3ca3c4f5b9280bc301243e41011c43c311af7 100644
--- a/src/main/java/org/bukkit/enchantments/Enchantment.java
+++ b/src/main/java/org/bukkit/enchantments/Enchantment.java
@@ -215,7 +215,7 @@ public abstract class Enchantment implements Keyed, net.kyori.adventure.translat
     private static boolean acceptingNew = true;
     private final @NotNull NamespacedKey key;
 
-    public Enchantment(@NotNull NamespacedKey key) {
+    public Enchantment(@NotNull final NamespacedKey key) {
         this.key = key;
     }
 
@@ -350,7 +350,7 @@ public abstract class Enchantment implements Keyed, net.kyori.adventure.translat
     // Paper end
 
     @Override
-    public boolean equals(@Nullable Object obj) {
+    public boolean equals(@Nullable final Object obj) {
         if (obj == null) {
             return false;
         }
@@ -381,7 +381,7 @@ public abstract class Enchantment implements Keyed, net.kyori.adventure.translat
      *
      * @param enchantment Enchantment to register
      */
-    public static void registerEnchantment(@NotNull Enchantment enchantment) {
+    public static void registerEnchantment(@NotNull final Enchantment enchantment) {
         if (byKey.containsKey(enchantment.key) || byName.containsKey(enchantment.getName())) {
             throw new IllegalArgumentException("Cannot set already-set enchantment");
         } else if (!isAcceptingRegistrations()) {
@@ -416,7 +416,7 @@ public abstract class Enchantment implements Keyed, net.kyori.adventure.translat
      */
     @Contract("null -> null")
     @Nullable
-    public static Enchantment getByKey(@Nullable NamespacedKey key) {
+    public static Enchantment getByKey(@Nullable final NamespacedKey key) {
         return byKey.get(key);
     }
 
@@ -430,7 +430,7 @@ public abstract class Enchantment implements Keyed, net.kyori.adventure.translat
     @Deprecated
     @Contract("null -> null")
     @Nullable
-    public static Enchantment getByName(@Nullable String name) {
+    public static Enchantment getByName(@Nullable final String name) {
         return byName.get(name);
     }
 
diff --git a/src/main/java/org/bukkit/enchantments/EnchantmentOffer.java b/src/main/java/org/bukkit/enchantments/EnchantmentOffer.java
index 8111acaa1af53c53fd66b734c403afb8adfadb24..dedfeba0c5041329f8b0edf6d9067f40d28f9f19 100644
--- a/src/main/java/org/bukkit/enchantments/EnchantmentOffer.java
+++ b/src/main/java/org/bukkit/enchantments/EnchantmentOffer.java
@@ -12,7 +12,7 @@ public class EnchantmentOffer {
     private int enchantmentLevel;
     private int cost;
 
-    public EnchantmentOffer(@NotNull Enchantment enchantment, int enchantmentLevel, int cost) {
+    public EnchantmentOffer(@NotNull final Enchantment enchantment, final int enchantmentLevel, final int cost) {
         this.enchantment = enchantment;
         this.enchantmentLevel = enchantmentLevel;
         this.cost = cost;
@@ -33,7 +33,7 @@ public class EnchantmentOffer {
      *
      * @param enchantment type of the enchantment
      */
-    public void setEnchantment(@NotNull Enchantment enchantment) {
+    public void setEnchantment(@NotNull final Enchantment enchantment) {
         Preconditions.checkArgument(enchantment != null, "The enchantment may not be null!");
 
         this.enchantment = enchantment;
@@ -53,7 +53,7 @@ public class EnchantmentOffer {
      *
      * @param enchantmentLevel level of the enchantment
      */
-    public void setEnchantmentLevel(int enchantmentLevel) {
+    public void setEnchantmentLevel(final int enchantmentLevel) {
         Preconditions.checkArgument(enchantmentLevel > 0, "The enchantment level must be greater than 0!");
 
         this.enchantmentLevel = enchantmentLevel;
@@ -75,7 +75,7 @@ public class EnchantmentOffer {
      *
      * @param cost cost for this enchantment
      */
-    public void setCost(int cost) {
+    public void setCost(final int cost) {
         Preconditions.checkArgument(cost > 0, "The cost must be greater than 0!");
 
         this.cost = cost;
diff --git a/src/main/java/org/bukkit/enchantments/EnchantmentTarget.java b/src/main/java/org/bukkit/enchantments/EnchantmentTarget.java
index cb9e8b53da300a911f84e15ee9be2261cf1cc340..843107cfad60725cd7d47c660576a8bf7729021b 100644
--- a/src/main/java/org/bukkit/enchantments/EnchantmentTarget.java
+++ b/src/main/java/org/bukkit/enchantments/EnchantmentTarget.java
@@ -16,8 +16,8 @@ public enum EnchantmentTarget {
     @Deprecated
     ALL {
         @Override
-        public boolean includes(@NotNull Material item) {
-            for (EnchantmentTarget target : EnchantmentTarget.values()) {
+        public boolean includes(@NotNull final Material item) {
+            for (final EnchantmentTarget target : EnchantmentTarget.values()) {
                 if (target != this && target.includes(item)) {
                     return true;
                 }
@@ -32,7 +32,7 @@ public enum EnchantmentTarget {
      */
     ARMOR {
         @Override
-        public boolean includes(@NotNull Material item) {
+        public boolean includes(@NotNull final Material item) {
             return ARMOR_FEET.includes(item)
                 || ARMOR_LEGS.includes(item)
                 || ARMOR_HEAD.includes(item)
@@ -45,7 +45,7 @@ public enum EnchantmentTarget {
      */
     ARMOR_FEET {
         @Override
-        public boolean includes(@NotNull Material item) {
+        public boolean includes(@NotNull final Material item) {
             return item.equals(Material.LEATHER_BOOTS)
                 || item.equals(Material.CHAINMAIL_BOOTS)
                 || item.equals(Material.IRON_BOOTS)
@@ -60,7 +60,7 @@ public enum EnchantmentTarget {
      */
     ARMOR_LEGS {
         @Override
-        public boolean includes(@NotNull Material item) {
+        public boolean includes(@NotNull final Material item) {
             return item.equals(Material.LEATHER_LEGGINGS)
                 || item.equals(Material.CHAINMAIL_LEGGINGS)
                 || item.equals(Material.IRON_LEGGINGS)
@@ -75,7 +75,7 @@ public enum EnchantmentTarget {
      */
     ARMOR_TORSO {
         @Override
-        public boolean includes(@NotNull Material item) {
+        public boolean includes(@NotNull final Material item) {
             return item.equals(Material.LEATHER_CHESTPLATE)
                 || item.equals(Material.CHAINMAIL_CHESTPLATE)
                 || item.equals(Material.IRON_CHESTPLATE)
@@ -90,7 +90,7 @@ public enum EnchantmentTarget {
      */
     ARMOR_HEAD {
         @Override
-        public boolean includes(@NotNull Material item) {
+        public boolean includes(@NotNull final Material item) {
             return item.equals(Material.LEATHER_HELMET)
                 || item.equals(Material.CHAINMAIL_HELMET)
                 || item.equals(Material.DIAMOND_HELMET)
@@ -106,7 +106,7 @@ public enum EnchantmentTarget {
      */
     WEAPON {
         @Override
-        public boolean includes(@NotNull Material item) {
+        public boolean includes(@NotNull final Material item) {
             return item.equals(Material.WOODEN_SWORD)
                 || item.equals(Material.STONE_SWORD)
                 || item.equals(Material.IRON_SWORD)
@@ -121,7 +121,7 @@ public enum EnchantmentTarget {
      */
     TOOL {
         @Override
-        public boolean includes(@NotNull Material item) {
+        public boolean includes(@NotNull final Material item) {
             return item.equals(Material.WOODEN_SHOVEL)
                 || item.equals(Material.STONE_SHOVEL)
                 || item.equals(Material.IRON_SHOVEL)
@@ -154,7 +154,7 @@ public enum EnchantmentTarget {
      */
     BOW {
         @Override
-        public boolean includes(@NotNull Material item) {
+        public boolean includes(@NotNull final Material item) {
             return item.equals(Material.BOW);
         }
     },
@@ -164,7 +164,7 @@ public enum EnchantmentTarget {
      */
     FISHING_ROD {
         @Override
-        public boolean includes(@NotNull Material item) {
+        public boolean includes(@NotNull final Material item) {
             return item.equals(Material.FISHING_ROD);
         }
     },
@@ -174,7 +174,7 @@ public enum EnchantmentTarget {
      */
     BREAKABLE {
         @Override
-        public boolean includes(@NotNull Material item) {
+        public boolean includes(@NotNull final Material item) {
             return item.getMaxDurability() > 0 && item.getMaxStackSize() == 1;
         }
     },
@@ -184,7 +184,7 @@ public enum EnchantmentTarget {
      */
     WEARABLE {
         @Override
-        public boolean includes(@NotNull Material item) {
+        public boolean includes(@NotNull final Material item) {
             return ARMOR.includes(item)
                     || item.equals(Material.ELYTRA)
                     || item.equals(Material.CARVED_PUMPKIN)
@@ -204,7 +204,7 @@ public enum EnchantmentTarget {
      */
     TRIDENT {
         @Override
-        public boolean includes(@NotNull Material item) {
+        public boolean includes(@NotNull final Material item) {
             return item.equals(Material.TRIDENT);
         }
     },
@@ -214,7 +214,7 @@ public enum EnchantmentTarget {
      */
     CROSSBOW {
         @Override
-        public boolean includes(@NotNull Material item) {
+        public boolean includes(@NotNull final Material item) {
             return item.equals(Material.CROSSBOW);
         }
     },
@@ -224,7 +224,7 @@ public enum EnchantmentTarget {
      */
     VANISHABLE {
         @Override
-        public boolean includes(@NotNull Material item) {
+        public boolean includes(@NotNull final Material item) {
             return BREAKABLE.includes(item) || (WEARABLE.includes(item) && !item.equals(Material.ELYTRA)) || item.equals(Material.COMPASS);
         }
     };
@@ -243,7 +243,7 @@ public enum EnchantmentTarget {
      * @param item The item to check
      * @return True if the target includes the item
      */
-    public boolean includes(@NotNull ItemStack item) {
+    public boolean includes(@NotNull final ItemStack item) {
         return includes(item.getType());
     }
 }
diff --git a/src/main/java/org/bukkit/enchantments/EnchantmentWrapper.java b/src/main/java/org/bukkit/enchantments/EnchantmentWrapper.java
index 5f42a9c0c43ced10b754170d7c83793a99fce81b..7b35bf0f544b660c2215158000cb1a2fa30395cd 100644
--- a/src/main/java/org/bukkit/enchantments/EnchantmentWrapper.java
+++ b/src/main/java/org/bukkit/enchantments/EnchantmentWrapper.java
@@ -8,7 +8,7 @@ import org.jetbrains.annotations.NotNull;
  * A simple wrapper for ease of selecting {@link Enchantment}s
  */
 public class EnchantmentWrapper extends Enchantment {
-    public EnchantmentWrapper(@NotNull String name) {
+    public EnchantmentWrapper(@NotNull final String name) {
         super(NamespacedKey.minecraft(name));
     }
 
@@ -39,7 +39,7 @@ public class EnchantmentWrapper extends Enchantment {
     }
 
     @Override
-    public boolean canEnchantItem(@NotNull ItemStack item) {
+    public boolean canEnchantItem(@NotNull final ItemStack item) {
         return getEnchantment().canEnchantItem(item);
     }
 
@@ -60,13 +60,13 @@ public class EnchantmentWrapper extends Enchantment {
     }
 
     @Override
-    public boolean conflictsWith(@NotNull Enchantment other) {
+    public boolean conflictsWith(@NotNull final Enchantment other) {
         return getEnchantment().conflictsWith(other);
     }
     // Paper start
     @NotNull
     @Override
-    public net.kyori.adventure.text.Component displayName(int level) {
+    public net.kyori.adventure.text.Component displayName(final int level) {
         return getEnchantment().displayName(level);
     }
 
@@ -92,7 +92,7 @@ public class EnchantmentWrapper extends Enchantment {
     }
 
     @Override
-    public float getDamageIncrease(int level, @NotNull org.bukkit.entity.EntityCategory entityCategory) {
+    public float getDamageIncrease(final int level, @NotNull final org.bukkit.entity.EntityCategory entityCategory) {
         return getEnchantment().getDamageIncrease(level, entityCategory);
     }
 
diff --git a/src/main/java/org/bukkit/entity/AbstractArrow.java b/src/main/java/org/bukkit/entity/AbstractArrow.java
index bfcb013504b5010073f59c0636a7dfec16b5ea3a..8c11a6a43aecb3fe7ba8fd8dce793e0f8a4602dd 100644
--- a/src/main/java/org/bukkit/entity/AbstractArrow.java
+++ b/src/main/java/org/bukkit/entity/AbstractArrow.java
@@ -216,7 +216,7 @@ public interface AbstractArrow extends Projectile {
      * @deprecated Use {@link Arrow#setPickupStatus(PickupStatus)} with {@link PickupStatus} as an upstream compatible replacement for this function
      */
     @Deprecated
-    default void setPickupRule(@NotNull PickupRule rule) {
+    default void setPickupRule(@NotNull final PickupRule rule) {
         this.setPickupStatus(PickupStatus.valueOf(rule.name()));
     }
 
diff --git a/src/main/java/org/bukkit/entity/Boat.java b/src/main/java/org/bukkit/entity/Boat.java
index f54136f7f1ed11bd8e49cc48f8f50ebde694c327..35e0e5c36a3aba90dbbaf19b2ea4afddc4547775 100644
--- a/src/main/java/org/bukkit/entity/Boat.java
+++ b/src/main/java/org/bukkit/entity/Boat.java
@@ -149,7 +149,7 @@ public interface Boat extends Vehicle {
 
         private final Material materialBlock;
 
-        private Type(Material materialBlock) {
+        private Type(final Material materialBlock) {
             this.materialBlock = materialBlock;
         }
 
diff --git a/src/main/java/org/bukkit/entity/Entity.java b/src/main/java/org/bukkit/entity/Entity.java
index 008ef0402b23402ecf3cc3f93b8d29cb5e61ed11..443804116a9903ad57d920dbe789ed535eb66432 100644
--- a/src/main/java/org/bukkit/entity/Entity.java
+++ b/src/main/java/org/bukkit/entity/Entity.java
@@ -137,7 +137,7 @@ public interface Entity extends Metadatable, CommandSender, Nameable, Persistent
      * @return <code>true</code> if the teleport was successful
      */
     @org.jetbrains.annotations.ApiStatus.Experimental
-    default boolean teleport(@NotNull Location location, boolean ignorePassengers) {
+    default boolean teleport(@NotNull final Location location, final boolean ignorePassengers) {
         return this.teleport(location, TeleportCause.PLUGIN, ignorePassengers);
     }
 
@@ -153,7 +153,7 @@ public interface Entity extends Metadatable, CommandSender, Nameable, Persistent
      * @return <code>true</code> if the teleport was successful
      */
     @org.jetbrains.annotations.ApiStatus.Experimental
-    default boolean teleport(@NotNull Location location, @NotNull TeleportCause cause, boolean ignorePassengers) {
+    default boolean teleport(@NotNull final Location location, @NotNull final TeleportCause cause, final boolean ignorePassengers) {
         return this.teleport(location, cause, ignorePassengers, true);
     }
 
@@ -171,7 +171,7 @@ public interface Entity extends Metadatable, CommandSender, Nameable, Persistent
      * @return <code>true</code> if the teleport was successful
      */
     @org.jetbrains.annotations.ApiStatus.Experimental
-    default boolean teleport(@NotNull Location location, boolean ignorePassengers, boolean dismount) {
+    default boolean teleport(@NotNull final Location location, final boolean ignorePassengers, final boolean dismount) {
         return this.teleport(location, TeleportCause.PLUGIN, ignorePassengers, dismount);
     }
 
@@ -238,7 +238,7 @@ public interface Entity extends Metadatable, CommandSender, Nameable, Persistent
      * @return A future that will be completed with the result of the teleport
      */
     @NotNull
-    public default java.util.concurrent.CompletableFuture<Boolean> teleportAsync(@NotNull Location loc) {
+    public default java.util.concurrent.CompletableFuture<Boolean> teleportAsync(@NotNull final Location loc) {
         return teleportAsync(loc, TeleportCause.PLUGIN);
     }
     /**
@@ -248,8 +248,8 @@ public interface Entity extends Metadatable, CommandSender, Nameable, Persistent
      * @return A future that will be completed with the result of the teleport
      */
     @NotNull
-    public default java.util.concurrent.CompletableFuture<Boolean> teleportAsync(@NotNull Location loc, @NotNull TeleportCause cause) {
-        java.util.concurrent.CompletableFuture<Boolean> future = new java.util.concurrent.CompletableFuture<>();
+    public default java.util.concurrent.CompletableFuture<Boolean> teleportAsync(@NotNull final Location loc, @NotNull final TeleportCause cause) {
+        final java.util.concurrent.CompletableFuture<Boolean> future = new java.util.concurrent.CompletableFuture<>();
         loc.getWorld().getChunkAtAsyncUrgently(loc).thenAccept((chunk) -> future.complete(Boolean.valueOf(teleport(loc, cause)))).exceptionally(ex -> {
             future.completeExceptionally(ex);
             return null;
@@ -924,7 +924,7 @@ public interface Entity extends Metadatable, CommandSender, Nameable, Persistent
      * @param location The location to spawn the entity at.
      * @return Whether the entity was successfully spawned.
      */
-    public default boolean spawnAt(@NotNull Location location) {
+    public default boolean spawnAt(@NotNull final Location location) {
         return spawnAt(location, org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason.DEFAULT);
     }
 
diff --git a/src/main/java/org/bukkit/entity/EntityType.java b/src/main/java/org/bukkit/entity/EntityType.java
index 882d699f781160765db4a5eb3a71ab3732c07f9a..bb8b43f261cdde208c4614f0c0f56013aa5be270 100644
--- a/src/main/java/org/bukkit/entity/EntityType.java
+++ b/src/main/java/org/bukkit/entity/EntityType.java
@@ -304,7 +304,7 @@ public enum EntityType implements Keyed, net.kyori.adventure.translation.Transla
     private static final Map<Short, EntityType> ID_MAP = new HashMap<Short, EntityType>();
 
     static {
-        for (EntityType type : values()) {
+        for (final EntityType type : values()) {
             if (type.name != null) {
                 NAME_MAP.put(type.name.toLowerCase(java.util.Locale.ENGLISH), type);
             }
@@ -329,11 +329,11 @@ public enum EntityType implements Keyed, net.kyori.adventure.translation.Transla
         NAME_MAP.put("zombie_pigman", ZOMBIFIED_PIGLIN);
     }
 
-    private EntityType(/*@Nullable*/ String name, /*@Nullable*/ Class<? extends Entity> clazz, int typeId) {
+    private EntityType(/*@Nullable*/ final String name, /*@Nullable*/ final Class<? extends Entity> clazz, final int typeId) {
         this(name, clazz, typeId, true);
     }
 
-    private EntityType(/*@Nullable*/ @Nullable String name, /*@Nullable*/ @Nullable Class<? extends Entity> clazz, int typeId, boolean independent) {
+    private EntityType(/*@Nullable*/ @Nullable final String name, /*@Nullable*/ @Nullable final Class<? extends Entity> clazz, final int typeId, final boolean independent) {
         this.name = name;
         this.clazz = clazz;
         this.typeId = (short) typeId;
@@ -388,7 +388,7 @@ public enum EntityType implements Keyed, net.kyori.adventure.translation.Transla
     @Deprecated
     @Contract("null -> null")
     @Nullable
-    public static EntityType fromName(@Nullable String name) {
+    public static EntityType fromName(@Nullable final String name) {
         if (name == null) {
             return null;
         }
@@ -404,7 +404,7 @@ public enum EntityType implements Keyed, net.kyori.adventure.translation.Transla
      */
     @Deprecated
     @Nullable
-    public static EntityType fromId(int id) {
+    public static EntityType fromId(final int id) {
         if (id > Short.MAX_VALUE) {
             return null;
         }
diff --git a/src/main/java/org/bukkit/entity/LivingEntity.java b/src/main/java/org/bukkit/entity/LivingEntity.java
index ead90b002034c463983af948a4fb882109b8d3a2..399e73fb41ad3f4b26b65484aee39dba73b0b083 100644
--- a/src/main/java/org/bukkit/entity/LivingEntity.java
+++ b/src/main/java/org/bukkit/entity/LivingEntity.java
@@ -94,7 +94,7 @@ public interface LivingEntity extends Attributable, Damageable, ProjectileSource
      */
     @Deprecated(forRemoval = true)
     @Nullable
-    public default Block getTargetBlock(int maxDistance) {
+    public default Block getTargetBlock(final int maxDistance) {
         return getTargetBlock(maxDistance, com.destroystokyo.paper.block.TargetBlockInfo.FluidMode.NEVER);
     }
 
@@ -119,7 +119,7 @@ public interface LivingEntity extends Attributable, Damageable, ProjectileSource
      *     or null if no block is targeted
      */
     @Nullable
-    public default org.bukkit.block.BlockFace getTargetBlockFace(int maxDistance) {
+    public default org.bukkit.block.BlockFace getTargetBlockFace(final int maxDistance) {
         return getTargetBlockFace(maxDistance, org.bukkit.FluidCollisionMode.NEVER);
     }
 
@@ -157,7 +157,7 @@ public interface LivingEntity extends Attributable, Damageable, ProjectileSource
      */
     @Deprecated(forRemoval = true)
     @Nullable
-    public default com.destroystokyo.paper.block.TargetBlockInfo getTargetBlockInfo(int maxDistance) {
+    public default com.destroystokyo.paper.block.TargetBlockInfo getTargetBlockInfo(final int maxDistance) {
         return getTargetBlockInfo(maxDistance, com.destroystokyo.paper.block.TargetBlockInfo.FluidMode.NEVER);
     }
 
@@ -181,7 +181,7 @@ public interface LivingEntity extends Attributable, Damageable, ProjectileSource
      * @return entity being targeted, or null if no entity is targeted
      */
     @Nullable
-    public default Entity getTargetEntity(int maxDistance) {
+    public default Entity getTargetEntity(final int maxDistance) {
         return getTargetEntity(maxDistance, false);
     }
 
@@ -205,7 +205,7 @@ public interface LivingEntity extends Attributable, Damageable, ProjectileSource
      */
     @Deprecated(forRemoval = true)
     @Nullable
-    public default com.destroystokyo.paper.entity.TargetEntityInfo getTargetEntityInfo(int maxDistance) {
+    public default com.destroystokyo.paper.entity.TargetEntityInfo getTargetEntityInfo(final int maxDistance) {
         return getTargetEntityInfo(maxDistance, false);
     }
 
@@ -1006,7 +1006,7 @@ public interface LivingEntity extends Attributable, Damageable, ProjectileSource
      *
      * @param item item to pickup
      */
-    default void playPickupItemAnimation(@NotNull Item item) {
+    default void playPickupItemAnimation(@NotNull final Item item) {
         playPickupItemAnimation(item, item.getItemStack().getAmount());
     }
 
@@ -1043,7 +1043,7 @@ public interface LivingEntity extends Attributable, Damageable, ProjectileSource
      * @param hand hand to be swung, either {@link org.bukkit.inventory.EquipmentSlot#HAND} or {@link org.bukkit.inventory.EquipmentSlot#OFF_HAND}
      * @throws IllegalArgumentException if invalid hand is passed
      */
-    default void swingHand(@NotNull org.bukkit.inventory.EquipmentSlot hand) {
+    default void swingHand(@NotNull final org.bukkit.inventory.EquipmentSlot hand) {
         com.google.common.base.Preconditions.checkArgument(hand != null && hand.isHand(), String.format("Expected a valid hand, got \"%s\" instead!", hand));
         if (hand == org.bukkit.inventory.EquipmentSlot.HAND) {
             this.swingMainHand();
diff --git a/src/main/java/org/bukkit/entity/Ocelot.java b/src/main/java/org/bukkit/entity/Ocelot.java
index 62a701f35af46ccb9d03fe7dca32afa92e494de5..3ba44ed2ef655e42650bfee3c06c3ed0d2d183f9 100644
--- a/src/main/java/org/bukkit/entity/Ocelot.java
+++ b/src/main/java/org/bukkit/entity/Ocelot.java
@@ -54,12 +54,12 @@ public interface Ocelot extends Animals {
         private final int id;
 
         static {
-            for (Type type : values()) {
+            for (final Type type : values()) {
                 types[type.getId()] = type;
             }
         }
 
-        private Type(int id) {
+        private Type(final int id) {
             this.id = id;
         }
 
@@ -83,7 +83,7 @@ public interface Ocelot extends Animals {
          */
         @Deprecated
         @Nullable
-        public static Type getType(int id) {
+        public static Type getType(final int id) {
             return (id >= types.length) ? null : types[id];
         }
     }
diff --git a/src/main/java/org/bukkit/entity/Panda.java b/src/main/java/org/bukkit/entity/Panda.java
index 57cf24cfd15a541f60aafc8507c189344aead0f7..69fca1772a19f31c05c3907a13050b309238b8d7 100644
--- a/src/main/java/org/bukkit/entity/Panda.java
+++ b/src/main/java/org/bukkit/entity/Panda.java
@@ -156,7 +156,7 @@ public interface Panda extends Animals, Sittable {
      * @deprecated use {@link #setOnBack(boolean)}
      */
     @Deprecated(forRemoval = true)
-    default void setIsOnBack(boolean onBack) {
+    default void setIsOnBack(final boolean onBack) {
         this.setOnBack(onBack);
     }
 
@@ -167,7 +167,7 @@ public interface Panda extends Animals, Sittable {
      * @deprecated use {@link #setSitting(boolean)}
      */
     @Deprecated(forRemoval = true)
-    default void setIsSitting(boolean sitting) {
+    default void setIsSitting(final boolean sitting) {
         this.setSitting(sitting);
     }
 
@@ -200,7 +200,7 @@ public interface Panda extends Animals, Sittable {
 
         private final boolean recessive;
 
-        private Gene(boolean recessive) {
+        private Gene(final boolean recessive) {
             this.recessive = recessive;
         }
 
diff --git a/src/main/java/org/bukkit/entity/Player.java b/src/main/java/org/bukkit/entity/Player.java
index 2c9feecc77c92762b822453617f37eb6a739220a..4e22f761ed4e02c805422d172aaf2073cddf6903 100644
--- a/src/main/java/org/bukkit/entity/Player.java
+++ b/src/main/java/org/bukkit/entity/Player.java
@@ -643,7 +643,7 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      *
      * @param blockChanges A map of the locations you want to change to their new block data
      */
-    public default void sendMultiBlockChange(@NotNull java.util.Map<Location, BlockData> blockChanges) {
+    public default void sendMultiBlockChange(@NotNull final java.util.Map<Location, BlockData> blockChanges) {
         sendMultiBlockChange(blockChanges, false);
     }
 
@@ -684,7 +684,7 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      * @throws IllegalArgumentException if location is null
      * @throws IllegalArgumentException if lines is non-null and has a length less than 4
      */
-    default void sendSignChange(@NotNull Location loc, @Nullable java.util.List<net.kyori.adventure.text.Component> lines) throws IllegalArgumentException {
+    default void sendSignChange(@NotNull final Location loc, @Nullable final java.util.List<net.kyori.adventure.text.Component> lines) throws IllegalArgumentException {
         this.sendSignChange(loc, lines, DyeColor.BLACK);
     }
 
@@ -705,7 +705,7 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      * @throws IllegalArgumentException if dyeColor is null
      * @throws IllegalArgumentException if lines is non-null and has a length less than 4
      */
-    default void sendSignChange(@NotNull Location loc, @Nullable java.util.List<net.kyori.adventure.text.Component> lines, @NotNull DyeColor dyeColor) throws IllegalArgumentException {
+    default void sendSignChange(@NotNull final Location loc, @Nullable final java.util.List<net.kyori.adventure.text.Component> lines, @NotNull final DyeColor dyeColor) throws IllegalArgumentException {
         this.sendSignChange(loc, lines, dyeColor, false);
     }
 
@@ -726,7 +726,7 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      * @throws IllegalArgumentException if dyeColor is null
      * @throws IllegalArgumentException if lines is non-null and has a length less than 4
      */
-    default void sendSignChange(@NotNull Location loc, @Nullable java.util.List<net.kyori.adventure.text.Component> lines, boolean hasGlowingText) throws IllegalArgumentException {
+    default void sendSignChange(@NotNull final Location loc, @Nullable final java.util.List<net.kyori.adventure.text.Component> lines, final boolean hasGlowingText) throws IllegalArgumentException {
         this.sendSignChange(loc, lines, DyeColor.BLACK, hasGlowingText);
     }
 
@@ -831,7 +831,7 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      */
     // For reference, Bukkit defines this as nullable, while they impl isn't, we'll follow API.
     @Nullable
-    public default org.bukkit.BanEntry banPlayerFull(@Nullable String reason) {
+    public default org.bukkit.BanEntry banPlayerFull(@Nullable final String reason) {
         return banPlayerFull(reason, null, null);
     }
 
@@ -843,7 +843,7 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      * @return Ban Entry
      */
     @Nullable
-    public default org.bukkit.BanEntry banPlayerFull(@Nullable String reason, @Nullable String source) {
+    public default org.bukkit.BanEntry banPlayerFull(@Nullable final String reason, @Nullable final String source) {
         return banPlayerFull(reason, null, source);
     }
 
@@ -855,7 +855,7 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      * @return Ban Entry
      */
     @Nullable
-    public default org.bukkit.BanEntry banPlayerFull(@Nullable String reason, @Nullable java.util.Date expires) {
+    public default org.bukkit.BanEntry banPlayerFull(@Nullable final String reason, @Nullable final java.util.Date expires) {
         return banPlayerFull(reason, expires, null);
     }
 
@@ -868,7 +868,7 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      * @return Ban Entry
      */
     @Nullable
-    public default org.bukkit.BanEntry banPlayerFull(@Nullable String reason, @Nullable java.util.Date expires, @Nullable String source) {
+    public default org.bukkit.BanEntry banPlayerFull(@Nullable final String reason, @Nullable final java.util.Date expires, @Nullable final String source) {
         banPlayer(reason, expires, source);
         return banPlayerIP(reason, expires, source, true);
     }
@@ -882,7 +882,7 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      * @return Ban Entry
      */
     @Nullable
-    public default org.bukkit.BanEntry banPlayerIP(@Nullable String reason, boolean kickPlayer) {
+    public default org.bukkit.BanEntry banPlayerIP(@Nullable final String reason, final boolean kickPlayer) {
         return banPlayerIP(reason, null, null, kickPlayer);
     }
 
@@ -895,7 +895,7 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      * @return Ban Entry
      */
     @Nullable
-    public default org.bukkit.BanEntry banPlayerIP(@Nullable String reason, @Nullable String source, boolean kickPlayer) {
+    public default org.bukkit.BanEntry banPlayerIP(@Nullable final String reason, @Nullable final String source, final boolean kickPlayer) {
         return banPlayerIP(reason, null, source, kickPlayer);
     }
 
@@ -908,7 +908,7 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      * @return Ban Entry
      */
     @Nullable
-    public default org.bukkit.BanEntry banPlayerIP(@Nullable String reason, @Nullable java.util.Date expires, boolean kickPlayer) {
+    public default org.bukkit.BanEntry banPlayerIP(@Nullable final String reason, @Nullable final java.util.Date expires, final boolean kickPlayer) {
         return banPlayerIP(reason, expires, null, kickPlayer);
     }
 
@@ -920,7 +920,7 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      * @return Ban Entry
      */
     @Nullable
-    public default org.bukkit.BanEntry banPlayerIP(@Nullable String reason) {
+    public default org.bukkit.BanEntry banPlayerIP(@Nullable final String reason) {
         return banPlayerIP(reason, null, null);
     }
 
@@ -932,7 +932,7 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      * @return Ban Entry
      */
     @Nullable
-    public default org.bukkit.BanEntry banPlayerIP(@Nullable String reason, @Nullable String source) {
+    public default org.bukkit.BanEntry banPlayerIP(@Nullable final String reason, @Nullable final String source) {
         return banPlayerIP(reason, null, source);
     }
 
@@ -944,7 +944,7 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      * @return Ban Entry
      */
     @Nullable
-    public default org.bukkit.BanEntry banPlayerIP(@Nullable String reason, @Nullable java.util.Date expires) {
+    public default org.bukkit.BanEntry banPlayerIP(@Nullable final String reason, @Nullable final java.util.Date expires) {
         return banPlayerIP(reason, expires, null);
     }
 
@@ -957,7 +957,7 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      * @return Ban Entry
      */
     @Nullable
-    public default org.bukkit.BanEntry banPlayerIP(@Nullable String reason, @Nullable java.util.Date expires, @Nullable String source) {
+    public default org.bukkit.BanEntry banPlayerIP(@Nullable final String reason, @Nullable final java.util.Date expires, @Nullable final String source) {
         return banPlayerIP(reason, expires, source, true);
     }
 
@@ -971,8 +971,8 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      * @return Ban Entry
      */
     @Nullable
-    public default org.bukkit.BanEntry banPlayerIP(@Nullable String reason, @Nullable java.util.Date expires, @Nullable String source, boolean kickPlayer) {
-        org.bukkit.BanEntry banEntry = org.bukkit.Bukkit.getServer().getBanList(org.bukkit.BanList.Type.IP).addBan(getAddress().getAddress().getHostAddress(), reason, expires, source);
+    public default org.bukkit.BanEntry banPlayerIP(@Nullable final String reason, @Nullable final java.util.Date expires, @Nullable final String source, final boolean kickPlayer) {
+        final org.bukkit.BanEntry banEntry = org.bukkit.Bukkit.getServer().getBanList(org.bukkit.BanList.Type.IP).addBan(getAddress().getAddress().getHostAddress(), reason, expires, source);
         if (kickPlayer && isOnline()) {
             getPlayer().kickPlayer(reason);
         }
@@ -1020,7 +1020,7 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      */
     @Override
     @Deprecated
-    public default void sendMessage(@NotNull net.md_5.bungee.api.chat.BaseComponent component) {
+    public default void sendMessage(@NotNull final net.md_5.bungee.api.chat.BaseComponent component) {
         spigot().sendMessage(component);
     }
 
@@ -1032,7 +1032,7 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      */
     @Override
     @Deprecated
-    public default void sendMessage(@NotNull net.md_5.bungee.api.chat.BaseComponent... components) {
+    public default void sendMessage(@NotNull final net.md_5.bungee.api.chat.BaseComponent... components) {
         spigot().sendMessage(components);
     }
 
@@ -1044,7 +1044,7 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      * @param components the components to send
      */
     @Deprecated
-    public default void sendMessage(net.md_5.bungee.api.@NotNull ChatMessageType position, net.md_5.bungee.api.chat.BaseComponent... components) {
+    public default void sendMessage(final net.md_5.bungee.api.@NotNull ChatMessageType position, final net.md_5.bungee.api.chat.BaseComponent... components) {
         spigot().sendMessage(position, components);
     }
 
@@ -1268,7 +1268,7 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      *
      * @param amount Exp amount to give
      */
-    public default void giveExp(int amount) {
+    public default void giveExp(final int amount) {
         giveExp(amount, false);
     }
     /**
@@ -1735,7 +1735,7 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      * @throws IllegalArgumentException Thrown if the hash is not 20 bytes
      *     long.
      */
-    default void setResourcePack(@NotNull String url, byte @Nullable [] hash, net.kyori.adventure.text.@Nullable Component prompt) {
+    default void setResourcePack(@NotNull final String url, final byte @Nullable [] hash, final net.kyori.adventure.text.@Nullable Component prompt) {
         this.setResourcePack(url, hash, prompt, false);
     }
     // Paper end
@@ -2677,7 +2677,7 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
          * @deprecated {@link LivingEntity#setCollidable(boolean)}
          */
         @Deprecated
-        public void setCollidesWithEntities(boolean collides) {
+        public void setCollidesWithEntities(final boolean collides) {
             throw new UnsupportedOperationException("Not supported yet.");
         }
 
@@ -2700,13 +2700,13 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
 
         @Deprecated // Paper
         @Override
-        public void sendMessage(@NotNull net.md_5.bungee.api.chat.BaseComponent component) {
+        public void sendMessage(@NotNull final net.md_5.bungee.api.chat.BaseComponent component) {
             throw new UnsupportedOperationException("Not supported yet.");
         }
 
         @Deprecated // Paper
         @Override
-        public void sendMessage(@NotNull net.md_5.bungee.api.chat.BaseComponent... components) {
+        public void sendMessage(@NotNull final net.md_5.bungee.api.chat.BaseComponent... components) {
             throw new UnsupportedOperationException("Not supported yet.");
         }
 
@@ -2719,7 +2719,7 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
          * @deprecated use {@code sendMessage} methods that accept {@link net.kyori.adventure.text.Component}
          */
         @Deprecated // Paper
-        public void sendMessage(@NotNull net.md_5.bungee.api.ChatMessageType position, @NotNull net.md_5.bungee.api.chat.BaseComponent component) {
+        public void sendMessage(@NotNull final net.md_5.bungee.api.ChatMessageType position, @NotNull final net.md_5.bungee.api.chat.BaseComponent component) {
             throw new UnsupportedOperationException("Not supported yet.");
         }
 
@@ -2732,7 +2732,7 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
          * @deprecated use {@code sendMessage} methods that accept {@link net.kyori.adventure.text.Component}
          */
         @Deprecated // Paper
-        public void sendMessage(@NotNull net.md_5.bungee.api.ChatMessageType position, @NotNull net.md_5.bungee.api.chat.BaseComponent... components) {
+        public void sendMessage(@NotNull final net.md_5.bungee.api.ChatMessageType position, @NotNull final net.md_5.bungee.api.chat.BaseComponent... components) {
             throw new UnsupportedOperationException("Not supported yet.");
         }
 
@@ -2745,7 +2745,7 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
          * @deprecated use {@code sendMessage} methods that accept {@link net.kyori.adventure.text.Component}
          */
         @Deprecated // Paper
-        public void sendMessage(@NotNull net.md_5.bungee.api.ChatMessageType position, @Nullable UUID sender, @NotNull net.md_5.bungee.api.chat.BaseComponent component) {
+        public void sendMessage(@NotNull final net.md_5.bungee.api.ChatMessageType position, @Nullable final UUID sender, @NotNull final net.md_5.bungee.api.chat.BaseComponent component) {
             throw new UnsupportedOperationException("Not supported yet.");
         }
 
@@ -2758,7 +2758,7 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
          * @deprecated use {@code sendMessage} methods that accept {@link net.kyori.adventure.text.Component}
          */
         @Deprecated // Paper
-        public void sendMessage(@NotNull net.md_5.bungee.api.ChatMessageType position, @Nullable UUID sender, @NotNull net.md_5.bungee.api.chat.BaseComponent... components) {
+        public void sendMessage(@NotNull final net.md_5.bungee.api.ChatMessageType position, @Nullable final UUID sender, @NotNull final net.md_5.bungee.api.chat.BaseComponent... components) {
             throw new UnsupportedOperationException("Not supported yet.");
 
         }
@@ -2830,7 +2830,7 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      * @param playerAnchor What part of player should face the location
      */
     @org.jetbrains.annotations.ApiStatus.Experimental
-    default void lookAt(@NotNull Location location, @NotNull io.papermc.paper.entity.LookAnchor playerAnchor) {
+    default void lookAt(@NotNull final Location location, @NotNull final io.papermc.paper.entity.LookAnchor playerAnchor) {
         this.lookAt(location.getX(), location.getY(), location.getZ(), playerAnchor);
     }
 
diff --git a/src/main/java/org/bukkit/entity/memory/MemoryKey.java b/src/main/java/org/bukkit/entity/memory/MemoryKey.java
index 147714f3a22c41933bd0daabfe99272e5185367f..0d02e9f911afa9c5022394444a190085259a7564 100644
--- a/src/main/java/org/bukkit/entity/memory/MemoryKey.java
+++ b/src/main/java/org/bukkit/entity/memory/MemoryKey.java
@@ -22,7 +22,7 @@ public final class MemoryKey<T> implements Keyed {
     private final NamespacedKey namespacedKey;
     private final Class<T> tClass;
 
-    private MemoryKey(NamespacedKey namespacedKey, Class<T> tClass) {
+    private MemoryKey(final NamespacedKey namespacedKey, final Class<T> tClass) {
         this.namespacedKey = namespacedKey;
         this.tClass = tClass;
         MEMORY_KEYS.put(namespacedKey, this);
@@ -79,7 +79,7 @@ public final class MemoryKey<T> implements Keyed {
      * available under that key
      */
     @Nullable
-    public static MemoryKey getByKey(@NotNull NamespacedKey namespacedKey) {
+    public static MemoryKey getByKey(@NotNull final NamespacedKey namespacedKey) {
         return MEMORY_KEYS.get(namespacedKey);
     }
 
diff --git a/src/main/java/org/bukkit/event/Event.java b/src/main/java/org/bukkit/event/Event.java
index 2db882a227e8b0c018c7842fad36f24bcb055293..5a64e3e64e1e352d4e19ecbb84369a225cc42d1a 100644
--- a/src/main/java/org/bukkit/event/Event.java
+++ b/src/main/java/org/bukkit/event/Event.java
@@ -33,7 +33,7 @@ public abstract class Event {
      * @param isAsync true indicates the event will fire asynchronously, false
      *     by default from default constructor
      */
-    public Event(boolean isAsync) {
+    public Event(final boolean isAsync) {
         this.async = isAsync;
     }
 
diff --git a/src/main/java/org/bukkit/event/EventException.java b/src/main/java/org/bukkit/event/EventException.java
index 72c4efeec9deb6636d168a7d6dd6cbf71962b37b..286dc6365a35f74e9c0f460ed8f2e6933c1a5b6e 100644
--- a/src/main/java/org/bukkit/event/EventException.java
+++ b/src/main/java/org/bukkit/event/EventException.java
@@ -12,7 +12,7 @@ public class EventException extends Exception {
      *
      * @param throwable Exception that triggered this Exception
      */
-    public EventException(Throwable throwable) {
+    public EventException(final Throwable throwable) {
         cause = throwable;
     }
 
@@ -29,7 +29,7 @@ public class EventException extends Exception {
      * @param cause The exception that caused this
      * @param message The message
      */
-    public EventException(Throwable cause, String message) {
+    public EventException(final Throwable cause, final String message) {
         super(message);
         this.cause = cause;
     }
@@ -39,7 +39,7 @@ public class EventException extends Exception {
      *
      * @param message The message
      */
-    public EventException(String message) {
+    public EventException(final String message) {
         super(message);
         cause = null;
     }
diff --git a/src/main/java/org/bukkit/event/EventPriority.java b/src/main/java/org/bukkit/event/EventPriority.java
index 376c5375df21d59c520c99eb3bc64e9ddae007a6..25408d57f94ed24ed4d819546cebaa2bb0d6fdbc 100644
--- a/src/main/java/org/bukkit/event/EventPriority.java
+++ b/src/main/java/org/bukkit/event/EventPriority.java
@@ -43,7 +43,7 @@ public enum EventPriority {
 
     private final int slot;
 
-    private EventPriority(int slot) {
+    private EventPriority(final int slot) {
         this.slot = slot;
     }
 
diff --git a/src/main/java/org/bukkit/event/HandlerList.java b/src/main/java/org/bukkit/event/HandlerList.java
index 3eef84ae13f9dff828bc1d9411575b8b3bf77703..b1efa3ffa0e21968ada70da3d95b9e8a13b86d00 100644
--- a/src/main/java/org/bukkit/event/HandlerList.java
+++ b/src/main/java/org/bukkit/event/HandlerList.java
@@ -49,7 +49,7 @@ public class HandlerList {
      */
     public static void bakeAll() {
         synchronized (allLists) {
-            for (HandlerList h : allLists) {
+            for (final HandlerList h : allLists) {
                 h.bake();
             }
         }
@@ -60,9 +60,9 @@ public class HandlerList {
      */
     public static void unregisterAll() {
         synchronized (allLists) {
-            for (HandlerList h : allLists) {
+            for (final HandlerList h : allLists) {
                 synchronized (h) {
-                    for (List<RegisteredListener> list : h.handlerslots.values()) {
+                    for (final List<RegisteredListener> list : h.handlerslots.values()) {
                         list.clear();
                     }
                     h.handlers = null;
@@ -76,9 +76,9 @@ public class HandlerList {
      *
      * @param plugin plugin to unregister
      */
-    public static void unregisterAll(@NotNull Plugin plugin) {
+    public static void unregisterAll(@NotNull final Plugin plugin) {
         synchronized (allLists) {
-            for (HandlerList h : allLists) {
+            for (final HandlerList h : allLists) {
                 h.unregister(plugin);
             }
         }
@@ -89,9 +89,9 @@ public class HandlerList {
      *
      * @param listener listener to unregister
      */
-    public static void unregisterAll(@NotNull Listener listener) {
+    public static void unregisterAll(@NotNull final Listener listener) {
         synchronized (allLists) {
-            for (HandlerList h : allLists) {
+            for (final HandlerList h : allLists) {
                 h.unregister(listener);
             }
         }
@@ -110,7 +110,7 @@ public class HandlerList {
             .ifPresent(EVENT_TYPES::add);
         // Paper end
         handlerslots = new EnumMap<EventPriority, ArrayList<RegisteredListener>>(EventPriority.class);
-        for (EventPriority o : EventPriority.values()) {
+        for (final EventPriority o : EventPriority.values()) {
             handlerslots.put(o, new ArrayList<RegisteredListener>());
         }
         synchronized (allLists) {
@@ -123,7 +123,7 @@ public class HandlerList {
      *
      * @param listener listener to register
      */
-    public synchronized void register(@NotNull RegisteredListener listener) {
+    public synchronized void register(@NotNull final RegisteredListener listener) {
         if (handlerslots.get(listener.getPriority()).contains(listener))
             throw new IllegalStateException("This listener is already registered to priority " + listener.getPriority());
         handlers = null;
@@ -135,8 +135,8 @@ public class HandlerList {
      *
      * @param listeners listeners to register
      */
-    public void registerAll(@NotNull Collection<RegisteredListener> listeners) {
-        for (RegisteredListener listener : listeners) {
+    public void registerAll(@NotNull final Collection<RegisteredListener> listeners) {
+        for (final RegisteredListener listener : listeners) {
             register(listener);
         }
     }
@@ -146,7 +146,7 @@ public class HandlerList {
      *
      * @param listener listener to remove
      */
-    public synchronized void unregister(@NotNull RegisteredListener listener) {
+    public synchronized void unregister(@NotNull final RegisteredListener listener) {
         if (handlerslots.get(listener.getPriority()).remove(listener)) {
             handlers = null;
         }
@@ -157,10 +157,10 @@ public class HandlerList {
      *
      * @param plugin plugin to remove
      */
-    public synchronized void unregister(@NotNull Plugin plugin) {
+    public synchronized void unregister(@NotNull final Plugin plugin) {
         boolean changed = false;
-        for (List<RegisteredListener> list : handlerslots.values()) {
-            for (ListIterator<RegisteredListener> i = list.listIterator(); i.hasNext();) {
+        for (final List<RegisteredListener> list : handlerslots.values()) {
+            for (final ListIterator<RegisteredListener> i = list.listIterator(); i.hasNext();) {
                 if (i.next().getPlugin().equals(plugin)) {
                     i.remove();
                     changed = true;
@@ -175,10 +175,10 @@ public class HandlerList {
      *
      * @param listener listener to remove
      */
-    public synchronized void unregister(@NotNull Listener listener) {
+    public synchronized void unregister(@NotNull final Listener listener) {
         boolean changed = false;
-        for (List<RegisteredListener> list : handlerslots.values()) {
-            for (ListIterator<RegisteredListener> i = list.listIterator(); i.hasNext();) {
+        for (final List<RegisteredListener> list : handlerslots.values()) {
+            for (final ListIterator<RegisteredListener> i = list.listIterator(); i.hasNext();) {
                 if (i.next().getListener().equals(listener)) {
                     i.remove();
                     changed = true;
@@ -193,8 +193,8 @@ public class HandlerList {
      */
     public synchronized void bake() {
         if (handlers != null) return; // don't re-bake when still valid
-        List<RegisteredListener> entries = new ArrayList<RegisteredListener>();
-        for (Entry<EventPriority, ArrayList<RegisteredListener>> entry : handlerslots.entrySet()) {
+        final List<RegisteredListener> entries = new ArrayList<RegisteredListener>();
+        for (final Entry<EventPriority, ArrayList<RegisteredListener>> entry : handlerslots.entrySet()) {
             entries.addAll(entry.getValue());
         }
         handlers = entries.toArray(new RegisteredListener[0]);
@@ -220,13 +220,13 @@ public class HandlerList {
      * @return the list of registered listeners
      */
     @NotNull
-    public static ArrayList<RegisteredListener> getRegisteredListeners(@NotNull Plugin plugin) {
-        ArrayList<RegisteredListener> listeners = new ArrayList<RegisteredListener>();
+    public static ArrayList<RegisteredListener> getRegisteredListeners(@NotNull final Plugin plugin) {
+        final ArrayList<RegisteredListener> listeners = new ArrayList<RegisteredListener>();
         synchronized (allLists) {
-            for (HandlerList h : allLists) {
+            for (final HandlerList h : allLists) {
                 synchronized (h) {
-                    for (List<RegisteredListener> list : h.handlerslots.values()) {
-                        for (RegisteredListener listener : list) {
+                    for (final List<RegisteredListener> list : h.handlerslots.values()) {
+                        for (final RegisteredListener listener : list) {
                             if (listener.getPlugin().equals(plugin)) {
                                 listeners.add(listener);
                             }
diff --git a/src/main/java/org/bukkit/event/block/BlockBreakEvent.java b/src/main/java/org/bukkit/event/block/BlockBreakEvent.java
index 76a7a42e3dc640cf0b499409c659026a994039f2..d802a6a728ce28d2a0cac9b55ccee63d307ea8f4 100644
--- a/src/main/java/org/bukkit/event/block/BlockBreakEvent.java
+++ b/src/main/java/org/bukkit/event/block/BlockBreakEvent.java
@@ -57,7 +57,7 @@ public class BlockBreakEvent extends BlockExpEvent implements Cancellable {
      *
      * @param dropItems Whether or not the block will attempt to drop items
      */
-    public void setDropItems(boolean dropItems) {
+    public void setDropItems(final boolean dropItems) {
         this.dropItems = dropItems;
     }
 
@@ -79,7 +79,7 @@ public class BlockBreakEvent extends BlockExpEvent implements Cancellable {
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.cancel = cancel;
     }
 }
diff --git a/src/main/java/org/bukkit/event/block/BlockBurnEvent.java b/src/main/java/org/bukkit/event/block/BlockBurnEvent.java
index febc103224d855fb10c3827de35c123d59c21946..a7d10c740ce2f2e990d97a96570bc75807b06ed1 100644
--- a/src/main/java/org/bukkit/event/block/BlockBurnEvent.java
+++ b/src/main/java/org/bukkit/event/block/BlockBurnEvent.java
@@ -44,7 +44,7 @@ public class BlockBurnEvent extends BlockEvent implements Cancellable {
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.cancelled = cancel;
     }
 
diff --git a/src/main/java/org/bukkit/event/block/BlockCanBuildEvent.java b/src/main/java/org/bukkit/event/block/BlockCanBuildEvent.java
index 221169184b32eea6a403eaef1c1c863cffcea59e..3336cf59fd3bc0b258c8dfe5b84e0a52375b6064 100644
--- a/src/main/java/org/bukkit/event/block/BlockCanBuildEvent.java
+++ b/src/main/java/org/bukkit/event/block/BlockCanBuildEvent.java
@@ -62,7 +62,7 @@ public class BlockCanBuildEvent extends BlockEvent {
      * @param cancel true if you want to allow the block to be built here
      *     despite Minecraft's default behaviour
      */
-    public void setBuildable(boolean cancel) {
+    public void setBuildable(final boolean cancel) {
         this.buildable = cancel;
     }
 
diff --git a/src/main/java/org/bukkit/event/block/BlockCookEvent.java b/src/main/java/org/bukkit/event/block/BlockCookEvent.java
index b448b3ed02607de5429cb22190dce6da50e57c98..2f4166b8b31a157198ff894c915ab5811e388156 100644
--- a/src/main/java/org/bukkit/event/block/BlockCookEvent.java
+++ b/src/main/java/org/bukkit/event/block/BlockCookEvent.java
@@ -24,7 +24,7 @@ public class BlockCookEvent extends BlockEvent implements Cancellable {
         this(block, source, result, null);
     }
 
-    public BlockCookEvent(@NotNull final Block block, @NotNull final ItemStack source, @NotNull final ItemStack result, @org.jetbrains.annotations.Nullable org.bukkit.inventory.CookingRecipe<?> recipe) {
+    public BlockCookEvent(@NotNull final Block block, @NotNull final ItemStack source, @NotNull final ItemStack result, @org.jetbrains.annotations.Nullable final org.bukkit.inventory.CookingRecipe<?> recipe) {
         // Paper end
         super(block);
         this.source = source;
@@ -58,7 +58,7 @@ public class BlockCookEvent extends BlockEvent implements Cancellable {
      *
      * @param result new result ItemStack
      */
-    public void setResult(@NotNull ItemStack result) {
+    public void setResult(@NotNull final ItemStack result) {
         this.result = result;
     }
 
@@ -68,7 +68,7 @@ public class BlockCookEvent extends BlockEvent implements Cancellable {
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.cancelled = cancel;
     }
 
diff --git a/src/main/java/org/bukkit/event/block/BlockDamageEvent.java b/src/main/java/org/bukkit/event/block/BlockDamageEvent.java
index 03c634dc148b94f93f18fbfcc033bf6552c577d9..c34d9c9d0c3473498ec0c29a4516e1886a9f279d 100644
--- a/src/main/java/org/bukkit/event/block/BlockDamageEvent.java
+++ b/src/main/java/org/bukkit/event/block/BlockDamageEvent.java
@@ -54,7 +54,7 @@ public class BlockDamageEvent extends BlockEvent implements Cancellable {
      * @param bool true if you want the block to instantly break when damaged
      *     by the player
      */
-    public void setInstaBreak(boolean bool) {
+    public void setInstaBreak(final boolean bool) {
         this.instaBreak = bool;
     }
 
@@ -74,7 +74,7 @@ public class BlockDamageEvent extends BlockEvent implements Cancellable {
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.cancel = cancel;
     }
 
diff --git a/src/main/java/org/bukkit/event/block/BlockDispenseArmorEvent.java b/src/main/java/org/bukkit/event/block/BlockDispenseArmorEvent.java
index 22a660e67a2ecbdbbd67c55b59555b419b4ce29a..e62f08918dcf8978c34645e701f2326b22d10f4a 100644
--- a/src/main/java/org/bukkit/event/block/BlockDispenseArmorEvent.java
+++ b/src/main/java/org/bukkit/event/block/BlockDispenseArmorEvent.java
@@ -17,7 +17,7 @@ public class BlockDispenseArmorEvent extends BlockDispenseEvent {
 
     private final @NotNull LivingEntity target;
 
-    public BlockDispenseArmorEvent(@NotNull Block block, @NotNull ItemStack dispensed, @NotNull LivingEntity target) {
+    public BlockDispenseArmorEvent(@NotNull final Block block, @NotNull final ItemStack dispensed, @NotNull final LivingEntity target) {
         super(block, dispensed, new Vector(0, 0, 0));
         this.target = target;
     }
diff --git a/src/main/java/org/bukkit/event/block/BlockDispenseEvent.java b/src/main/java/org/bukkit/event/block/BlockDispenseEvent.java
index 14d1eb5d93fd5a87473a0b8df240cf09f1752360..4d937776718aba5ce36bb7c51b4bd85804ac4642 100644
--- a/src/main/java/org/bukkit/event/block/BlockDispenseEvent.java
+++ b/src/main/java/org/bukkit/event/block/BlockDispenseEvent.java
@@ -42,7 +42,7 @@ public class BlockDispenseEvent extends BlockEvent implements Cancellable {
      *
      * @param item the item being dispensed
      */
-    public void setItem(@NotNull ItemStack item) {
+    public void setItem(@NotNull final ItemStack item) {
         this.item = item;
     }
 
@@ -64,7 +64,7 @@ public class BlockDispenseEvent extends BlockEvent implements Cancellable {
      *
      * @param vel the velocity of the item being dispensed
      */
-    public void setVelocity(@NotNull Vector vel) {
+    public void setVelocity(@NotNull final Vector vel) {
         velocity = vel;
     }
 
@@ -74,7 +74,7 @@ public class BlockDispenseEvent extends BlockEvent implements Cancellable {
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         cancelled = cancel;
     }
 
diff --git a/src/main/java/org/bukkit/event/block/BlockDropItemEvent.java b/src/main/java/org/bukkit/event/block/BlockDropItemEvent.java
index 49f9a41dffb0eb993d4d5d28f2adb6219ea44e7a..6c267b29a96371156d6d2c1978a6cf6d884727b2 100644
--- a/src/main/java/org/bukkit/event/block/BlockDropItemEvent.java
+++ b/src/main/java/org/bukkit/event/block/BlockDropItemEvent.java
@@ -32,7 +32,7 @@ public class BlockDropItemEvent extends BlockEvent implements Cancellable {
     private final @NotNull BlockState blockState;
     private final @NotNull List<Item> items;
 
-    public BlockDropItemEvent(@NotNull Block block, @NotNull BlockState blockState, @NotNull Player player, @NotNull List<Item> items) {
+    public BlockDropItemEvent(@NotNull final Block block, @NotNull final BlockState blockState, @NotNull final Player player, @NotNull final List<Item> items) {
         super(block);
         this.blockState = blockState;
         this.player = player;
@@ -79,7 +79,7 @@ public class BlockDropItemEvent extends BlockEvent implements Cancellable {
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.cancel = cancel;
     }
 
diff --git a/src/main/java/org/bukkit/event/block/BlockExpEvent.java b/src/main/java/org/bukkit/event/block/BlockExpEvent.java
index 21b9026552fd135ef2c49dd011b17f5679ac3fc1..1514ff8376f14605a8a21f63dc2972052abb8b0d 100644
--- a/src/main/java/org/bukkit/event/block/BlockExpEvent.java
+++ b/src/main/java/org/bukkit/event/block/BlockExpEvent.java
@@ -11,7 +11,7 @@ public class BlockExpEvent extends BlockEvent {
     private static final HandlerList handlers = new HandlerList();
     private int exp;
 
-    public BlockExpEvent(@NotNull Block block, int exp) {
+    public BlockExpEvent(@NotNull final Block block, final int exp) {
         super(block);
 
         this.exp = exp;
@@ -32,7 +32,7 @@ public class BlockExpEvent extends BlockEvent {
      *
      * @param exp 1 or higher to drop experience, else nothing will drop
      */
-    public void setExpToDrop(int exp) {
+    public void setExpToDrop(final int exp) {
         this.exp = exp;
     }
 
diff --git a/src/main/java/org/bukkit/event/block/BlockExplodeEvent.java b/src/main/java/org/bukkit/event/block/BlockExplodeEvent.java
index 29cb1322c2a516e9750d4f76e0552d660572d171..2e7e32e10eb83bfc38a8f85e945c8920c9793676 100644
--- a/src/main/java/org/bukkit/event/block/BlockExplodeEvent.java
+++ b/src/main/java/org/bukkit/event/block/BlockExplodeEvent.java
@@ -39,7 +39,7 @@ public class BlockExplodeEvent extends BlockEvent implements Cancellable {
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.cancel = cancel;
     }
 
@@ -84,7 +84,7 @@ public class BlockExplodeEvent extends BlockEvent implements Cancellable {
      *
      * @param yield The new yield percentage
      */
-    public void setYield(float yield) {
+    public void setYield(final float yield) {
         this.yield = yield;
     }
 
diff --git a/src/main/java/org/bukkit/event/block/BlockFadeEvent.java b/src/main/java/org/bukkit/event/block/BlockFadeEvent.java
index 89e1e761e2ee2f552037d3f97d7e7730a131701e..4c7cfa3cddcd0f9690d92712f9945deddafb6b8d 100644
--- a/src/main/java/org/bukkit/event/block/BlockFadeEvent.java
+++ b/src/main/java/org/bukkit/event/block/BlockFadeEvent.java
@@ -50,7 +50,7 @@ public class BlockFadeEvent extends BlockEvent implements Cancellable {
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.cancelled = cancel;
     }
 
diff --git a/src/main/java/org/bukkit/event/block/BlockFertilizeEvent.java b/src/main/java/org/bukkit/event/block/BlockFertilizeEvent.java
index fdf27806e5f24d97c5a261441c4eff6b7d790ce6..b403b90da732a77ba4b769151172978b408b58af 100644
--- a/src/main/java/org/bukkit/event/block/BlockFertilizeEvent.java
+++ b/src/main/java/org/bukkit/event/block/BlockFertilizeEvent.java
@@ -23,7 +23,7 @@ public class BlockFertilizeEvent extends BlockEvent implements Cancellable {
     private final @Nullable Player player;
     private final @NotNull List<BlockState> blocks;
 
-    public BlockFertilizeEvent(@NotNull Block theBlock, @Nullable Player player, @NotNull List<BlockState> blocks) {
+    public BlockFertilizeEvent(@NotNull final Block theBlock, @Nullable final Player player, @NotNull final List<BlockState> blocks) {
         super(theBlock);
         this.player = player;
         this.blocks = blocks;
@@ -55,7 +55,7 @@ public class BlockFertilizeEvent extends BlockEvent implements Cancellable {
     }
 
     @Override
-    public void setCancelled(boolean cancelled) {
+    public void setCancelled(final boolean cancelled) {
         this.cancelled = cancelled;
     }
 
diff --git a/src/main/java/org/bukkit/event/block/BlockFromToEvent.java b/src/main/java/org/bukkit/event/block/BlockFromToEvent.java
index 1af39280568e8da784ea8d584b7e3fcca2ee60b5..055079ffeb2d953c8722fb5edd585942a6495b94 100644
--- a/src/main/java/org/bukkit/event/block/BlockFromToEvent.java
+++ b/src/main/java/org/bukkit/event/block/BlockFromToEvent.java
@@ -61,7 +61,7 @@ public class BlockFromToEvent extends BlockEvent implements Cancellable {
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.cancel = cancel;
     }
 
diff --git a/src/main/java/org/bukkit/event/block/BlockGrowEvent.java b/src/main/java/org/bukkit/event/block/BlockGrowEvent.java
index 13f8b117db5685a42996f7fdc603042bdd1a0361..51aaab3cb7282d0fdbb3277b4eadfaeeb2b8c59c 100644
--- a/src/main/java/org/bukkit/event/block/BlockGrowEvent.java
+++ b/src/main/java/org/bukkit/event/block/BlockGrowEvent.java
@@ -47,7 +47,7 @@ public class BlockGrowEvent extends BlockEvent implements Cancellable {
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.cancelled = cancel;
     }
 
diff --git a/src/main/java/org/bukkit/event/block/BlockIgniteEvent.java b/src/main/java/org/bukkit/event/block/BlockIgniteEvent.java
index 4b27be9418669daff224ff2c2c9a53f0ff1f97a2..c5c189297a94c8a6c6fad4a68cdfad9f5736f29b 100644
--- a/src/main/java/org/bukkit/event/block/BlockIgniteEvent.java
+++ b/src/main/java/org/bukkit/event/block/BlockIgniteEvent.java
@@ -43,7 +43,7 @@ public class BlockIgniteEvent extends BlockEvent implements Cancellable {
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.cancel = cancel;
     }
 
diff --git a/src/main/java/org/bukkit/event/block/BlockMultiPlaceEvent.java b/src/main/java/org/bukkit/event/block/BlockMultiPlaceEvent.java
index ecf21c079e881b99590291bd997baa55c0643df6..1368d1a2788c82e314e48990000c66cacab6e166 100644
--- a/src/main/java/org/bukkit/event/block/BlockMultiPlaceEvent.java
+++ b/src/main/java/org/bukkit/event/block/BlockMultiPlaceEvent.java
@@ -19,13 +19,13 @@ public class BlockMultiPlaceEvent extends BlockPlaceEvent {
     private final @NotNull List<BlockState> states;
 
     @Deprecated // Paper
-    public BlockMultiPlaceEvent(@NotNull List<BlockState> states, @NotNull Block clicked, @NotNull ItemStack itemInHand, @NotNull Player thePlayer, boolean canBuild) {
+    public BlockMultiPlaceEvent(@NotNull final List<BlockState> states, @NotNull final Block clicked, @NotNull final ItemStack itemInHand, @NotNull final Player thePlayer, final boolean canBuild) {
         // Paper start - add hand to BlockMultiPlaceEvent
         this(states, clicked, itemInHand, thePlayer, canBuild, org.bukkit.inventory.EquipmentSlot.HAND);
     }
 
 
-    public BlockMultiPlaceEvent(@NotNull List<BlockState> states, @NotNull Block clicked, @NotNull ItemStack itemInHand, @NotNull Player thePlayer, boolean canBuild, @NotNull org.bukkit.inventory.EquipmentSlot hand) {
+    public BlockMultiPlaceEvent(@NotNull final List<BlockState> states, @NotNull final Block clicked, @NotNull final ItemStack itemInHand, @NotNull final Player thePlayer, final boolean canBuild, @NotNull final org.bukkit.inventory.EquipmentSlot hand) {
         super(states.get(0).getBlock(), states.get(0), clicked, itemInHand, thePlayer, canBuild, hand);
         this.states = ImmutableList.copyOf(states);
         // Paper end
diff --git a/src/main/java/org/bukkit/event/block/BlockPhysicsEvent.java b/src/main/java/org/bukkit/event/block/BlockPhysicsEvent.java
index 89d0eb198b887aff7e7701779f8bdc930256401c..7f1b5c9765f9f909d1450b9e6cc8f62ba7867c4c 100644
--- a/src/main/java/org/bukkit/event/block/BlockPhysicsEvent.java
+++ b/src/main/java/org/bukkit/event/block/BlockPhysicsEvent.java
@@ -91,7 +91,7 @@ public class BlockPhysicsEvent extends BlockEvent implements Cancellable {
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.cancel = cancel;
     }
 
diff --git a/src/main/java/org/bukkit/event/block/BlockPistonEvent.java b/src/main/java/org/bukkit/event/block/BlockPistonEvent.java
index 3e6e5e467aea54607474afaff41ba60705f4a3de..cbc1b8b94c4b44f9337f1a8c5c0ae3690c86ad2e 100644
--- a/src/main/java/org/bukkit/event/block/BlockPistonEvent.java
+++ b/src/main/java/org/bukkit/event/block/BlockPistonEvent.java
@@ -24,7 +24,7 @@ public abstract class BlockPistonEvent extends BlockEvent implements Cancellable
     }
 
     @Override
-    public void setCancelled(boolean cancelled) {
+    public void setCancelled(final boolean cancelled) {
         this.cancelled = cancelled;
     }
 
diff --git a/src/main/java/org/bukkit/event/block/BlockPistonExtendEvent.java b/src/main/java/org/bukkit/event/block/BlockPistonExtendEvent.java
index 40ddc364971af1f266ee367f4d09d83a8e914e23..cbee78ed638763fe468d5f57a2098fa21b0a3318 100644
--- a/src/main/java/org/bukkit/event/block/BlockPistonExtendEvent.java
+++ b/src/main/java/org/bukkit/event/block/BlockPistonExtendEvent.java
@@ -51,7 +51,7 @@ public class BlockPistonExtendEvent extends BlockPistonEvent {
     @NotNull
     public List<Block> getBlocks() {
         if (blocks == null) {
-            ArrayList<Block> tmp = new ArrayList<Block>();
+            final ArrayList<Block> tmp = new ArrayList<Block>();
             for (int i = 0; i < this.getLength(); i++) {
                 tmp.add(block.getRelative(getDirection(), i + 1));
             }
diff --git a/src/main/java/org/bukkit/event/block/BlockPlaceEvent.java b/src/main/java/org/bukkit/event/block/BlockPlaceEvent.java
index be0a2d1f234d8265d98e54e518a994957b1f3ab7..99f1016073e6df86fabf4d842ec1c022e45dbd2f 100644
--- a/src/main/java/org/bukkit/event/block/BlockPlaceEvent.java
+++ b/src/main/java/org/bukkit/event/block/BlockPlaceEvent.java
@@ -46,7 +46,7 @@ public class BlockPlaceEvent extends BlockEvent implements Cancellable {
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.cancel = cancel;
     }
 
@@ -131,7 +131,7 @@ public class BlockPlaceEvent extends BlockEvent implements Cancellable {
      *
      * @param canBuild true if you want the player to be able to build
      */
-    public void setBuild(boolean canBuild) {
+    public void setBuild(final boolean canBuild) {
         this.canBuild = canBuild;
     }
 
diff --git a/src/main/java/org/bukkit/event/block/BlockReceiveGameEvent.java b/src/main/java/org/bukkit/event/block/BlockReceiveGameEvent.java
index 27174fcc967295b2727c8bf5a4de7695037769f4..75a5bf095e5536b45e3408de4de4bdabbc3a6b15 100644
--- a/src/main/java/org/bukkit/event/block/BlockReceiveGameEvent.java
+++ b/src/main/java/org/bukkit/event/block/BlockReceiveGameEvent.java
@@ -21,7 +21,7 @@ public class BlockReceiveGameEvent extends BlockEvent implements Cancellable {
     private final @Nullable Entity entity;
     private boolean cancelled;
 
-    public BlockReceiveGameEvent(@NotNull GameEvent event, @NotNull Block block, @Nullable Entity entity) {
+    public BlockReceiveGameEvent(@NotNull final GameEvent event, @NotNull final Block block, @Nullable final Entity entity) {
         super(block);
         this.event = event;
         this.entity = entity;
@@ -48,7 +48,7 @@ public class BlockReceiveGameEvent extends BlockEvent implements Cancellable {
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.cancelled = cancel;
     }
 
diff --git a/src/main/java/org/bukkit/event/block/BlockRedstoneEvent.java b/src/main/java/org/bukkit/event/block/BlockRedstoneEvent.java
index e46419b8c7c691bdf7b512f479ae2b8a2b0f14bc..45a61ae34ef1847f80d0ef8f510834233dc382c3 100644
--- a/src/main/java/org/bukkit/event/block/BlockRedstoneEvent.java
+++ b/src/main/java/org/bukkit/event/block/BlockRedstoneEvent.java
@@ -41,7 +41,7 @@ public class BlockRedstoneEvent extends BlockEvent {
      *
      * @param newCurrent The new current to set
      */
-    public void setNewCurrent(int newCurrent) {
+    public void setNewCurrent(final int newCurrent) {
         this.newCurrent = newCurrent;
     }
 
diff --git a/src/main/java/org/bukkit/event/block/BlockShearEntityEvent.java b/src/main/java/org/bukkit/event/block/BlockShearEntityEvent.java
index d6a0a3e344ab71b985e8e928cdcdfe973504c5d2..57bbb4f8283074d6c6a850e3122bfd95c5cb73de 100644
--- a/src/main/java/org/bukkit/event/block/BlockShearEntityEvent.java
+++ b/src/main/java/org/bukkit/event/block/BlockShearEntityEvent.java
@@ -18,7 +18,7 @@ public class BlockShearEntityEvent extends BlockEvent implements Cancellable {
     private final @NotNull ItemStack tool;
     private boolean cancelled;
 
-    public BlockShearEntityEvent(@NotNull Block dispenser, @NotNull Entity sheared, @NotNull ItemStack tool) {
+    public BlockShearEntityEvent(@NotNull final Block dispenser, @NotNull final Entity sheared, @NotNull final ItemStack tool) {
         super(dispenser);
         this.sheared = sheared;
         this.tool = tool;
@@ -50,7 +50,7 @@ public class BlockShearEntityEvent extends BlockEvent implements Cancellable {
     }
 
     @Override
-    public void setCancelled(boolean cancelled) {
+    public void setCancelled(final boolean cancelled) {
         this.cancelled = cancelled;
     }
 
diff --git a/src/main/java/org/bukkit/event/block/CauldronLevelChangeEvent.java b/src/main/java/org/bukkit/event/block/CauldronLevelChangeEvent.java
index a3397fbaebce21d62b20a967915ba86c2c3c124f..7214bc921390e21a64b7024338ce7e0f0fcf4abd 100644
--- a/src/main/java/org/bukkit/event/block/CauldronLevelChangeEvent.java
+++ b/src/main/java/org/bukkit/event/block/CauldronLevelChangeEvent.java
@@ -21,7 +21,7 @@ public class CauldronLevelChangeEvent extends BlockEvent implements Cancellable
     private final @NotNull ChangeReason reason;
     private final @NotNull BlockState newState;
 
-    public CauldronLevelChangeEvent(@NotNull Block block, @Nullable Entity entity, @NotNull ChangeReason reason, @NotNull BlockState newBlock) {
+    public CauldronLevelChangeEvent(@NotNull final Block block, @Nullable final Entity entity, @NotNull final ChangeReason reason, @NotNull final BlockState newBlock) {
         super(block);
         this.entity = entity;
         this.reason = reason;
@@ -62,7 +62,7 @@ public class CauldronLevelChangeEvent extends BlockEvent implements Cancellable
      */
     @Deprecated
     public int getOldLevel() {
-        BlockData oldBlock = getBlock().getBlockData();
+        final BlockData oldBlock = getBlock().getBlockData();
         return (oldBlock instanceof Levelled) ? ((Levelled) oldBlock).getLevel() : ((oldBlock.getMaterial() == Material.CAULDRON) ? 0 : 3);
     }
 
@@ -75,7 +75,7 @@ public class CauldronLevelChangeEvent extends BlockEvent implements Cancellable
      */
     @Deprecated
     public int getNewLevel() {
-        BlockData newBlock = newState.getBlockData();
+        final BlockData newBlock = newState.getBlockData();
         return (newBlock instanceof Levelled) ? ((Levelled) newBlock).getLevel() : ((newBlock.getMaterial() == Material.CAULDRON) ? 0 : 3);
     }
 
@@ -87,7 +87,7 @@ public class CauldronLevelChangeEvent extends BlockEvent implements Cancellable
      * @deprecated not all cauldron contents are Levelled
      */
     @Deprecated
-    public void setNewLevel(int newLevel) {
+    public void setNewLevel(final int newLevel) {
         Preconditions.checkArgument(0 <= newLevel && newLevel <= 3, "Cauldron level out of bounds 0 <= %s <= 3", newLevel);
         if (newLevel == 0) {
             newState.setType(Material.CAULDRON);
@@ -104,7 +104,7 @@ public class CauldronLevelChangeEvent extends BlockEvent implements Cancellable
     }
 
     @Override
-    public void setCancelled(boolean cancelled) {
+    public void setCancelled(final boolean cancelled) {
         this.cancelled = cancelled;
     }
 
diff --git a/src/main/java/org/bukkit/event/block/FluidLevelChangeEvent.java b/src/main/java/org/bukkit/event/block/FluidLevelChangeEvent.java
index 9bd0440c3776c0b73c6eb11274070b11d0ade856..6ee23883e932cf863fb796d753edbcd1fa3cb1b1 100644
--- a/src/main/java/org/bukkit/event/block/FluidLevelChangeEvent.java
+++ b/src/main/java/org/bukkit/event/block/FluidLevelChangeEvent.java
@@ -18,7 +18,7 @@ public class FluidLevelChangeEvent extends BlockEvent implements Cancellable {
     //
     private BlockData newData;
 
-    public FluidLevelChangeEvent(@NotNull Block theBlock, @NotNull BlockData newData) {
+    public FluidLevelChangeEvent(@NotNull final Block theBlock, @NotNull final BlockData newData) {
         super(theBlock);
         this.newData = newData;
     }
@@ -39,7 +39,7 @@ public class FluidLevelChangeEvent extends BlockEvent implements Cancellable {
      *
      * @param newData the new data
      */
-    public void setNewData(@NotNull BlockData newData) {
+    public void setNewData(@NotNull final BlockData newData) {
         Preconditions.checkArgument(newData != null, "newData null");
         Preconditions.checkArgument(this.newData.getMaterial().equals(newData.getMaterial()), "Cannot change fluid type");
 
@@ -52,7 +52,7 @@ public class FluidLevelChangeEvent extends BlockEvent implements Cancellable {
     }
 
     @Override
-    public void setCancelled(boolean cancelled) {
+    public void setCancelled(final boolean cancelled) {
         this.cancelled = cancelled;
     }
 
diff --git a/src/main/java/org/bukkit/event/block/LeavesDecayEvent.java b/src/main/java/org/bukkit/event/block/LeavesDecayEvent.java
index c33f9cb80300a31abb52bc5798fb98f22550d352..223006c95b7da749ecda97318a7cf589f7a97203 100644
--- a/src/main/java/org/bukkit/event/block/LeavesDecayEvent.java
+++ b/src/main/java/org/bukkit/event/block/LeavesDecayEvent.java
@@ -24,7 +24,7 @@ public class LeavesDecayEvent extends BlockEvent implements Cancellable {
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.cancel = cancel;
     }
 
diff --git a/src/main/java/org/bukkit/event/block/MoistureChangeEvent.java b/src/main/java/org/bukkit/event/block/MoistureChangeEvent.java
index aaf970f92c9925958985001665afb4b300e063e3..38d7ecacfb240890c95551eb6ff11278dc59819f 100644
--- a/src/main/java/org/bukkit/event/block/MoistureChangeEvent.java
+++ b/src/main/java/org/bukkit/event/block/MoistureChangeEvent.java
@@ -37,7 +37,7 @@ public class MoistureChangeEvent extends BlockEvent implements Cancellable {
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.cancelled = cancel;
     }
 
diff --git a/src/main/java/org/bukkit/event/block/NotePlayEvent.java b/src/main/java/org/bukkit/event/block/NotePlayEvent.java
index 49811e0316e5dda587cc8f6036255d6124f0d6d4..fd239290b2f9c5c7462cc7c7e803988ce3c19e93 100644
--- a/src/main/java/org/bukkit/event/block/NotePlayEvent.java
+++ b/src/main/java/org/bukkit/event/block/NotePlayEvent.java
@@ -18,7 +18,7 @@ public class NotePlayEvent extends BlockEvent implements Cancellable {
     private Note note;
     private boolean cancelled = false;
 
-    public NotePlayEvent(@NotNull Block block, @NotNull Instrument instrument, @NotNull Note note) {
+    public NotePlayEvent(@NotNull final Block block, @NotNull final Instrument instrument, @NotNull final Note note) {
         super(block);
         this.instrument = instrument;
         this.note = note;
@@ -30,7 +30,7 @@ public class NotePlayEvent extends BlockEvent implements Cancellable {
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.cancelled = cancel;
     }
 
@@ -59,7 +59,7 @@ public class NotePlayEvent extends BlockEvent implements Cancellable {
      *
      * @param instrument the Instrument. Has no effect if null.
      */
-    public void setInstrument(@NotNull Instrument instrument) {
+    public void setInstrument(@NotNull final Instrument instrument) {
         if (instrument != null) {
             this.instrument = instrument;
         }
@@ -70,7 +70,7 @@ public class NotePlayEvent extends BlockEvent implements Cancellable {
      *
      * @param note the Note. Has no effect if null.
      */
-    public void setNote(@NotNull Note note) {
+    public void setNote(@NotNull final Note note) {
         if (note != null) {
             this.note = note;
         }
diff --git a/src/main/java/org/bukkit/event/block/SignChangeEvent.java b/src/main/java/org/bukkit/event/block/SignChangeEvent.java
index 85a05389ec4d142299fc31d2a9b301bc4e299a34..1e7b8958bb81d33881f0db453ce5a770407a1037 100644
--- a/src/main/java/org/bukkit/event/block/SignChangeEvent.java
+++ b/src/main/java/org/bukkit/event/block/SignChangeEvent.java
@@ -31,7 +31,7 @@ public class SignChangeEvent extends BlockEvent implements Cancellable {
         this.player = thePlayer;
         // Paper start
         this.adventure$lines = new java.util.ArrayList<>();
-        for (String theLine : theLines) {
+        for (final String theLine : theLines) {
             this.adventure$lines.add(net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().deserialize(theLine));
         }
         // Paper end
@@ -66,7 +66,7 @@ public class SignChangeEvent extends BlockEvent implements Cancellable {
      * @throws IndexOutOfBoundsException thrown when the provided index is {@literal > 3
      *     or < 0}
      */
-    public @Nullable net.kyori.adventure.text.Component line(int index) throws IndexOutOfBoundsException {
+    public @Nullable net.kyori.adventure.text.Component line(final int index) throws IndexOutOfBoundsException {
         return this.adventure$lines.get(index);
     }
 
@@ -78,7 +78,7 @@ public class SignChangeEvent extends BlockEvent implements Cancellable {
      * @throws IndexOutOfBoundsException thrown when the provided index is {@literal > 3
      *     or < 0}
      */
-    public void line(int index, @Nullable net.kyori.adventure.text.Component line) throws IndexOutOfBoundsException {
+    public void line(final int index, @Nullable final net.kyori.adventure.text.Component line) throws IndexOutOfBoundsException {
         this.adventure$lines.set(index, line);
     }
     // Paper end
@@ -107,7 +107,7 @@ public class SignChangeEvent extends BlockEvent implements Cancellable {
      */
     @Nullable
     @Deprecated // Paper
-    public String getLine(int index) throws IndexOutOfBoundsException {
+    public String getLine(final int index) throws IndexOutOfBoundsException {
         return net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().serialize(this.adventure$lines.get(index)); // Paper
     }
 
@@ -121,7 +121,7 @@ public class SignChangeEvent extends BlockEvent implements Cancellable {
      * @deprecated in favour of {@link #line(int, net.kyori.adventure.text.Component)}
      */
     @Deprecated // Paper
-    public void setLine(int index, @Nullable String line) throws IndexOutOfBoundsException {
+    public void setLine(final int index, @Nullable final String line) throws IndexOutOfBoundsException {
         adventure$lines.set(index, line != null ? net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().deserialize(line) : null); // Paper
     }
 
@@ -131,7 +131,7 @@ public class SignChangeEvent extends BlockEvent implements Cancellable {
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.cancel = cancel;
     }
 
diff --git a/src/main/java/org/bukkit/event/block/SpongeAbsorbEvent.java b/src/main/java/org/bukkit/event/block/SpongeAbsorbEvent.java
index 43e02e5b6a91c0352272015cbf57a7768a53e462..63146cedc087b493032f47f39a081ce36bb8a7e0 100644
--- a/src/main/java/org/bukkit/event/block/SpongeAbsorbEvent.java
+++ b/src/main/java/org/bukkit/event/block/SpongeAbsorbEvent.java
@@ -23,7 +23,7 @@ public class SpongeAbsorbEvent extends BlockEvent implements Cancellable {
     private boolean cancelled;
     private final @NotNull List<BlockState> blocks;
 
-    public SpongeAbsorbEvent(@NotNull Block block, @NotNull List<BlockState> waterblocks) {
+    public SpongeAbsorbEvent(@NotNull final Block block, @NotNull final List<BlockState> waterblocks) {
         super(block);
         this.blocks = waterblocks;
     }
@@ -47,7 +47,7 @@ public class SpongeAbsorbEvent extends BlockEvent implements Cancellable {
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.cancelled = cancel;
     }
 
diff --git a/src/main/java/org/bukkit/event/command/UnknownCommandEvent.java b/src/main/java/org/bukkit/event/command/UnknownCommandEvent.java
index 4d0a8738bbb358bc3a8bfba59fc2def38d31662a..f937cc36b7e139a05895fa6b777832a9dad7f53d 100644
--- a/src/main/java/org/bukkit/event/command/UnknownCommandEvent.java
+++ b/src/main/java/org/bukkit/event/command/UnknownCommandEvent.java
@@ -73,7 +73,7 @@ public class UnknownCommandEvent extends Event {
      * @deprecated use {@link #message(Component)}
      */
     @Deprecated
-    public void setMessage(@Nullable String message) {
+    public void setMessage(@Nullable final String message) {
         this.message(message == null ? null : LegacyComponentSerializer.legacySection().deserialize(message));
     }
 
@@ -95,7 +95,7 @@ public class UnknownCommandEvent extends Event {
      *
      * @param message the message to be returned, or null
      */
-    public void message(@Nullable Component message) {
+    public void message(@Nullable final Component message) {
         this.message = message;
     }
 
diff --git a/src/main/java/org/bukkit/event/enchantment/EnchantItemEvent.java b/src/main/java/org/bukkit/event/enchantment/EnchantItemEvent.java
index e0008fdace3ac8805d219881616db1d1dbe7b675..c01909fb102c27ad61b46b766859683745705f36 100644
--- a/src/main/java/org/bukkit/event/enchantment/EnchantItemEvent.java
+++ b/src/main/java/org/bukkit/event/enchantment/EnchantItemEvent.java
@@ -84,7 +84,7 @@ public class EnchantItemEvent extends InventoryEvent implements Cancellable {
      *
      * @param level - cost in levels
      */
-    public void setExpLevelCost(int level) {
+    public void setExpLevelCost(final int level) {
         Preconditions.checkArgument(level > 0, "The cost must be greater than 0!");
 
         this.level = level;
@@ -117,7 +117,7 @@ public class EnchantItemEvent extends InventoryEvent implements Cancellable {
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.cancelled = cancel;
     }
 
diff --git a/src/main/java/org/bukkit/event/enchantment/PrepareItemEnchantEvent.java b/src/main/java/org/bukkit/event/enchantment/PrepareItemEnchantEvent.java
index 9d6f1c9fcc1fb23fbf3f57974bf257a7b4fa5467..9be67630304f3f3d8afe998596b7c00a8dcdd1b9 100644
--- a/src/main/java/org/bukkit/event/enchantment/PrepareItemEnchantEvent.java
+++ b/src/main/java/org/bukkit/event/enchantment/PrepareItemEnchantEvent.java
@@ -23,7 +23,7 @@ public class PrepareItemEnchantEvent extends InventoryEvent implements Cancellab
     private boolean cancelled;
     private final @NotNull Player enchanter;
 
-    public PrepareItemEnchantEvent(@NotNull final Player enchanter, @NotNull InventoryView view, @NotNull final Block table, @NotNull final ItemStack item, @org.jetbrains.annotations.Nullable final EnchantmentOffer @NotNull [] offers, final int bonus) { // Paper - offers can contain null values
+    public PrepareItemEnchantEvent(@NotNull final Player enchanter, @NotNull final InventoryView view, @NotNull final Block table, @NotNull final ItemStack item, @org.jetbrains.annotations.Nullable final EnchantmentOffer @NotNull [] offers, final int bonus) { // Paper - offers can contain null values
         super(view);
         this.enchanter = enchanter;
         this.table = table;
@@ -71,7 +71,7 @@ public class PrepareItemEnchantEvent extends InventoryEvent implements Cancellab
     @Deprecated // Paper
     @NotNull
     public int[] getExpLevelCostsOffered() {
-        int[] levelOffers = new int[offers.length];
+        final int[] levelOffers = new int[offers.length];
         for (int i = 0; i < offers.length; i++) {
             levelOffers[i] = offers[i] != null ? offers[i].getCost() : 0;
         }
@@ -105,7 +105,7 @@ public class PrepareItemEnchantEvent extends InventoryEvent implements Cancellab
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.cancelled = cancel;
     }
 
diff --git a/src/main/java/org/bukkit/event/entity/AreaEffectCloudApplyEvent.java b/src/main/java/org/bukkit/event/entity/AreaEffectCloudApplyEvent.java
index f3c8265899d374dd90953f146404799200c6899c..8961713bc8f606d31a02898e2e736156d527acbd 100644
--- a/src/main/java/org/bukkit/event/entity/AreaEffectCloudApplyEvent.java
+++ b/src/main/java/org/bukkit/event/entity/AreaEffectCloudApplyEvent.java
@@ -27,7 +27,7 @@ public class AreaEffectCloudApplyEvent extends EntityEvent implements Cancellabl
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.cancelled = cancel;
     }
 
diff --git a/src/main/java/org/bukkit/event/entity/ArrowBodyCountChangeEvent.java b/src/main/java/org/bukkit/event/entity/ArrowBodyCountChangeEvent.java
index caed284b31d20c80245f41a6976c7da3199e8b9c..36321bd71521c72b2f98d5055cda86a2cea87813 100644
--- a/src/main/java/org/bukkit/event/entity/ArrowBodyCountChangeEvent.java
+++ b/src/main/java/org/bukkit/event/entity/ArrowBodyCountChangeEvent.java
@@ -18,7 +18,7 @@ public class ArrowBodyCountChangeEvent extends EntityEvent implements Cancellabl
     private final int oldAmount;
     private int newAmount;
 
-    public ArrowBodyCountChangeEvent(@NotNull LivingEntity entity, int oldAmount, int newAmount, boolean isReset) {
+    public ArrowBodyCountChangeEvent(@NotNull final LivingEntity entity, final int oldAmount, final int newAmount, final boolean isReset) {
         super(entity);
 
         this.oldAmount = oldAmount;
@@ -58,7 +58,7 @@ public class ArrowBodyCountChangeEvent extends EntityEvent implements Cancellabl
      *
      * @param newAmount amount of arrows
      */
-    public void setNewAmount(int newAmount) {
+    public void setNewAmount(final int newAmount) {
         Preconditions.checkArgument(newAmount >= 0, "New arrow amount must be >= 0");
         this.newAmount = newAmount;
     }
@@ -75,7 +75,7 @@ public class ArrowBodyCountChangeEvent extends EntityEvent implements Cancellabl
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.cancelled = cancel;
     }
 
diff --git a/src/main/java/org/bukkit/event/entity/BatToggleSleepEvent.java b/src/main/java/org/bukkit/event/entity/BatToggleSleepEvent.java
index 5a5615d1720b83fb975ed4d00078fdd327098012..5da39570f757841b7d43edfcda1557a330ee485d 100644
--- a/src/main/java/org/bukkit/event/entity/BatToggleSleepEvent.java
+++ b/src/main/java/org/bukkit/event/entity/BatToggleSleepEvent.java
@@ -18,7 +18,7 @@ public class BatToggleSleepEvent extends EntityEvent implements Cancellable {
     private boolean cancel = false;
     private final boolean awake;
 
-    public BatToggleSleepEvent(@NotNull Bat what, boolean awake) {
+    public BatToggleSleepEvent(@NotNull final Bat what, final boolean awake) {
         super(what);
         this.awake = awake;
     }
@@ -33,7 +33,7 @@ public class BatToggleSleepEvent extends EntityEvent implements Cancellable {
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.cancel = cancel;
     }
 
diff --git a/src/main/java/org/bukkit/event/entity/CreeperPowerEvent.java b/src/main/java/org/bukkit/event/entity/CreeperPowerEvent.java
index 4d3354ebde39dbcd0b184a942926397712e8a7be..0cd44ab1c9614d0f3fefe701a8e8b84ac6741a80 100644
--- a/src/main/java/org/bukkit/event/entity/CreeperPowerEvent.java
+++ b/src/main/java/org/bukkit/event/entity/CreeperPowerEvent.java
@@ -34,7 +34,7 @@ public class CreeperPowerEvent extends EntityEvent implements Cancellable {
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         canceled = cancel;
     }
 
diff --git a/src/main/java/org/bukkit/event/entity/EnderDragonChangePhaseEvent.java b/src/main/java/org/bukkit/event/entity/EnderDragonChangePhaseEvent.java
index 2955858c79b2eb347bca5f34aa3b44e369a82ca9..6b8324db05bb0ee09b597be6354e5ec785cb7f85 100644
--- a/src/main/java/org/bukkit/event/entity/EnderDragonChangePhaseEvent.java
+++ b/src/main/java/org/bukkit/event/entity/EnderDragonChangePhaseEvent.java
@@ -17,7 +17,7 @@ public class EnderDragonChangePhaseEvent extends EntityEvent implements Cancella
     private final EnderDragon.@Nullable Phase currentPhase;
     private EnderDragon.Phase newPhase;
 
-    public EnderDragonChangePhaseEvent(@NotNull EnderDragon enderDragon, @Nullable EnderDragon.Phase currentPhase, @NotNull EnderDragon.Phase newPhase) {
+    public EnderDragonChangePhaseEvent(@NotNull final EnderDragon enderDragon, @Nullable final EnderDragon.Phase currentPhase, @NotNull final EnderDragon.Phase newPhase) {
         super(enderDragon);
         this.currentPhase = currentPhase;
         this.setNewPhase(newPhase);
@@ -55,7 +55,7 @@ public class EnderDragonChangePhaseEvent extends EntityEvent implements Cancella
      *
      * @param newPhase the new dragon phase
      */
-    public void setNewPhase(@NotNull EnderDragon.Phase newPhase) {
+    public void setNewPhase(@NotNull final EnderDragon.Phase newPhase) {
         Preconditions.checkArgument(newPhase != null, "New dragon phase cannot be null");
         this.newPhase = newPhase;
     }
@@ -66,7 +66,7 @@ public class EnderDragonChangePhaseEvent extends EntityEvent implements Cancella
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.cancel = cancel;
     }
 
diff --git a/src/main/java/org/bukkit/event/entity/EntityAirChangeEvent.java b/src/main/java/org/bukkit/event/entity/EntityAirChangeEvent.java
index cd20a4aa4a04704d9aa70f0f4ef393f2b6f9ad23..e1b08d68b30ef30648b9986efcb4743b617b2d2e 100644
--- a/src/main/java/org/bukkit/event/entity/EntityAirChangeEvent.java
+++ b/src/main/java/org/bukkit/event/entity/EntityAirChangeEvent.java
@@ -16,7 +16,7 @@ public class EntityAirChangeEvent extends EntityEvent implements Cancellable {
     //
     private boolean cancelled;
 
-    public EntityAirChangeEvent(@NotNull Entity what, int amount) {
+    public EntityAirChangeEvent(@NotNull final Entity what, final int amount) {
         super(what);
         this.amount = amount;
     }
@@ -35,7 +35,7 @@ public class EntityAirChangeEvent extends EntityEvent implements Cancellable {
      *
      * @param amount amount of air remaining
      */
-    public void setAmount(int amount) {
+    public void setAmount(final int amount) {
         this.amount = amount;
     }
 
@@ -45,7 +45,7 @@ public class EntityAirChangeEvent extends EntityEvent implements Cancellable {
     }
 
     @Override
-    public void setCancelled(boolean cancelled) {
+    public void setCancelled(final boolean cancelled) {
         this.cancelled = cancelled;
     }
 
diff --git a/src/main/java/org/bukkit/event/entity/EntityBreedEvent.java b/src/main/java/org/bukkit/event/entity/EntityBreedEvent.java
index ec986f8721ca36e961c42b8e2d6d31bb1bb6146e..d5160568e72817863f7dc89273ec3ec7213efd5e 100644
--- a/src/main/java/org/bukkit/event/entity/EntityBreedEvent.java
+++ b/src/main/java/org/bukkit/event/entity/EntityBreedEvent.java
@@ -23,7 +23,7 @@ public class EntityBreedEvent extends EntityEvent implements Cancellable {
     //
     private boolean cancel;
 
-    public EntityBreedEvent(@NotNull LivingEntity child, @NotNull LivingEntity mother, @NotNull LivingEntity father, @Nullable LivingEntity breeder, @Nullable ItemStack bredWith, int experience) {
+    public EntityBreedEvent(@NotNull final LivingEntity child, @NotNull final LivingEntity mother, @NotNull final LivingEntity father, @Nullable final LivingEntity breeder, @Nullable final ItemStack bredWith, final int experience) {
         super(child);
 
         Preconditions.checkArgument(child != null, "Cannot have null child");
@@ -100,7 +100,7 @@ public class EntityBreedEvent extends EntityEvent implements Cancellable {
      *
      * @param experience experience amount
      */
-    public void setExperience(int experience) {
+    public void setExperience(final int experience) {
         Preconditions.checkArgument(experience >= 0, "Experience cannot be negative");
         this.experience = experience;
     }
@@ -111,7 +111,7 @@ public class EntityBreedEvent extends EntityEvent implements Cancellable {
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.cancel = cancel;
     }
 
diff --git a/src/main/java/org/bukkit/event/entity/EntityChangeBlockEvent.java b/src/main/java/org/bukkit/event/entity/EntityChangeBlockEvent.java
index f21198c100271b0aa4cdb191e620f392a0b6db74..cac2f94beb12c20e0a044bbf2f2e832e3f024a46 100644
--- a/src/main/java/org/bukkit/event/entity/EntityChangeBlockEvent.java
+++ b/src/main/java/org/bukkit/event/entity/EntityChangeBlockEvent.java
@@ -40,7 +40,7 @@ public class EntityChangeBlockEvent extends EntityEvent implements Cancellable {
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.cancel = cancel;
     }
 
diff --git a/src/main/java/org/bukkit/event/entity/EntityCombustEvent.java b/src/main/java/org/bukkit/event/entity/EntityCombustEvent.java
index eea9aa7bf1f770bbb47c11c74ab88152877faa84..1f5d3bf657e777dc08c6c5986f8b1eb84c2f22dc 100644
--- a/src/main/java/org/bukkit/event/entity/EntityCombustEvent.java
+++ b/src/main/java/org/bukkit/event/entity/EntityCombustEvent.java
@@ -27,7 +27,7 @@ public class EntityCombustEvent extends EntityEvent implements Cancellable {
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.cancel = cancel;
     }
 
@@ -47,7 +47,7 @@ public class EntityCombustEvent extends EntityEvent implements Cancellable {
      *
      * @param duration the time in seconds to be alight for.
      */
-    public void setDuration(int duration) {
+    public void setDuration(final int duration) {
         this.duration = duration;
     }
 
diff --git a/src/main/java/org/bukkit/event/entity/EntityCreatePortalEvent.java b/src/main/java/org/bukkit/event/entity/EntityCreatePortalEvent.java
index f0fbea8cdc16512ca010c01dd15cac46f7312a53..50a43e79bf442e0e6b856108dd96f7acb5bdbd63 100644
--- a/src/main/java/org/bukkit/event/entity/EntityCreatePortalEvent.java
+++ b/src/main/java/org/bukkit/event/entity/EntityCreatePortalEvent.java
@@ -50,7 +50,7 @@ public class EntityCreatePortalEvent extends EntityEvent implements Cancellable
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.cancelled = cancel;
     }
 
diff --git a/src/main/java/org/bukkit/event/entity/EntityDamageByEntityEvent.java b/src/main/java/org/bukkit/event/entity/EntityDamageByEntityEvent.java
index f5424399ba130428a98190aac434b7f988d25d8f..a54f9db6e23169ccc2436029a9e3e8d4f2234538 100644
--- a/src/main/java/org/bukkit/event/entity/EntityDamageByEntityEvent.java
+++ b/src/main/java/org/bukkit/event/entity/EntityDamageByEntityEvent.java
@@ -25,7 +25,7 @@ public class EntityDamageByEntityEvent extends EntityDamageEvent {
     }
 
     private final boolean critical;
-    public EntityDamageByEntityEvent(@NotNull final Entity damager, @NotNull final Entity damagee, @NotNull final DamageCause cause, @NotNull final Map<DamageModifier, Double> modifiers, @NotNull final Map<DamageModifier, ? extends Function<? super Double, Double>> modifierFunctions, boolean critical) {
+    public EntityDamageByEntityEvent(@NotNull final Entity damager, @NotNull final Entity damagee, @NotNull final DamageCause cause, @NotNull final Map<DamageModifier, Double> modifiers, @NotNull final Map<DamageModifier, ? extends Function<? super Double, Double>> modifierFunctions, final boolean critical) {
         // Paper end
         super(damagee, cause, modifiers, modifierFunctions);
         this.damager = damager;
diff --git a/src/main/java/org/bukkit/event/entity/EntityDamageEvent.java b/src/main/java/org/bukkit/event/entity/EntityDamageEvent.java
index 7553dcf655ccab55563847e2ef6cee79b8429191..e0bb3fa02d4ee7bf1b74b1759cf036942e225aeb 100644
--- a/src/main/java/org/bukkit/event/entity/EntityDamageEvent.java
+++ b/src/main/java/org/bukkit/event/entity/EntityDamageEvent.java
@@ -50,7 +50,7 @@ public class EntityDamageEvent extends EntityEvent implements Cancellable {
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         cancelled = cancel;
     }
 
@@ -62,7 +62,7 @@ public class EntityDamageEvent extends EntityEvent implements Cancellable {
      * @return the original damage
      * @throws IllegalArgumentException if type is null
      */
-    public double getOriginalDamage(@NotNull DamageModifier type) throws IllegalArgumentException {
+    public double getOriginalDamage(@NotNull final DamageModifier type) throws IllegalArgumentException {
         final Double damage = originals.get(type);
         if (damage != null) {
             return damage.doubleValue();
@@ -84,7 +84,7 @@ public class EntityDamageEvent extends EntityEvent implements Cancellable {
      *     #isApplicable(DamageModifier)} returns false
      * @see #getFinalDamage()
      */
-    public void setDamage(@NotNull DamageModifier type, double damage) throws IllegalArgumentException, UnsupportedOperationException {
+    public void setDamage(@NotNull final DamageModifier type, final double damage) throws IllegalArgumentException, UnsupportedOperationException {
         if (!modifiers.containsKey(type)) {
             throw type == null ? new IllegalArgumentException("Cannot have null DamageModifier") : new UnsupportedOperationException(type + " is not applicable to " + getEntity());
         }
@@ -99,7 +99,7 @@ public class EntityDamageEvent extends EntityEvent implements Cancellable {
      * @throws IllegalArgumentException if type is null
      * @see DamageModifier#BASE
      */
-    public double getDamage(@NotNull DamageModifier type) throws IllegalArgumentException {
+    public double getDamage(@NotNull final DamageModifier type) throws IllegalArgumentException {
         Preconditions.checkArgument(type != null, "Cannot have null DamageModifier");
         final Double damage = modifiers.get(type);
         return damage == null ? 0 : damage.doubleValue();
@@ -116,7 +116,7 @@ public class EntityDamageEvent extends EntityEvent implements Cancellable {
      * @return true if the modifier is supported by the caller, false otherwise
      * @throws IllegalArgumentException if type is null
      */
-    public boolean isApplicable(@NotNull DamageModifier type) throws IllegalArgumentException {
+    public boolean isApplicable(@NotNull final DamageModifier type) throws IllegalArgumentException {
         Preconditions.checkArgument(type != null, "Cannot have null DamageModifier");
         return modifiers.containsKey(type);
     }
@@ -139,7 +139,7 @@ public class EntityDamageEvent extends EntityEvent implements Cancellable {
      */
     public final double getFinalDamage() {
         double damage = 0;
-        for (DamageModifier modifier : MODIFIERS) {
+        for (final DamageModifier modifier : MODIFIERS) {
             damage += getDamage(modifier);
         }
         return damage;
@@ -154,22 +154,22 @@ public class EntityDamageEvent extends EntityEvent implements Cancellable {
      *
      * @param damage The raw amount of damage caused by the event
      */
-    public void setDamage(double damage) {
+    public void setDamage(final double damage) {
         // These have to happen in the same order as the server calculates them, keep the enum sorted
         double remaining = damage;
         double oldRemaining = getDamage(DamageModifier.BASE);
-        for (DamageModifier modifier : MODIFIERS) {
+        for (final DamageModifier modifier : MODIFIERS) {
             if (!isApplicable(modifier)) {
                 continue;
             }
 
-            Function<? super Double, Double> modifierFunction = modifierFunctions.get(modifier);
-            double newVanilla = modifierFunction.apply(Double.valueOf(remaining)).doubleValue();
-            double oldVanilla = modifierFunction.apply(Double.valueOf(oldRemaining)).doubleValue();
-            double difference = oldVanilla - newVanilla;
+            final Function<? super Double, Double> modifierFunction = modifierFunctions.get(modifier);
+            final double newVanilla = modifierFunction.apply(Double.valueOf(remaining)).doubleValue();
+            final double oldVanilla = modifierFunction.apply(Double.valueOf(oldRemaining)).doubleValue();
+            final double difference = oldVanilla - newVanilla;
 
             // Don't allow value to cross zero, assume zero values should be negative
-            double old = getDamage(modifier);
+            final double old = getDamage(modifier);
             if (old > 0) {
                 setDamage(modifier, Math.max(0, old - difference));
             } else {
diff --git a/src/main/java/org/bukkit/event/entity/EntityDeathEvent.java b/src/main/java/org/bukkit/event/entity/EntityDeathEvent.java
index 0d32a44f8f864684474845264dac7acb346d6f1e..de88e9350837004161e998a82bc8705d3fb06c52 100644
--- a/src/main/java/org/bukkit/event/entity/EntityDeathEvent.java
+++ b/src/main/java/org/bukkit/event/entity/EntityDeathEvent.java
@@ -60,7 +60,7 @@ public class EntityDeathEvent extends EntityEvent implements org.bukkit.event.Ca
      *
      * @param exp Amount of EXP to drop.
      */
-    public void setDroppedExp(int exp) {
+    public void setDroppedExp(final int exp) {
         this.dropExp = exp;
     }
 
@@ -92,7 +92,7 @@ public class EntityDeathEvent extends EntityEvent implements org.bukkit.event.Ca
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         cancelled = cancel;
     }
 
@@ -113,8 +113,8 @@ public class EntityDeathEvent extends EntityEvent implements org.bukkit.event.Ca
      * @param reviveHealth The amount of health
      * @throws IllegalArgumentException Thrown if the health is {@literal <= 0 or >} max health
      */
-    public void setReviveHealth(double reviveHealth) throws IllegalArgumentException {
-        double maxHealth = ((LivingEntity) entity).getAttribute(org.bukkit.attribute.Attribute.GENERIC_MAX_HEALTH).getValue();
+    public void setReviveHealth(final double reviveHealth) throws IllegalArgumentException {
+        final double maxHealth = ((LivingEntity) entity).getAttribute(org.bukkit.attribute.Attribute.GENERIC_MAX_HEALTH).getValue();
         if ((maxHealth != 0 && reviveHealth <= 0) || (reviveHealth > maxHealth)) {
             throw new IllegalArgumentException("Health must be between 0 (exclusive) and " + maxHealth + " (inclusive), but was " + reviveHealth);
         }
@@ -136,7 +136,7 @@ public class EntityDeathEvent extends EntityEvent implements org.bukkit.event.Ca
      *
      * @param playDeathSound Enable or disable the death sound
      */
-    public void setShouldPlayDeathSound(boolean playDeathSound) {
+    public void setShouldPlayDeathSound(final boolean playDeathSound) {
         this.shouldPlayDeathSound = playDeathSound;
     }
 
@@ -155,7 +155,7 @@ public class EntityDeathEvent extends EntityEvent implements org.bukkit.event.Ca
      *
      * @param sound The sound that the entity should make when dying
      */
-    public void setDeathSound(@Nullable org.bukkit.Sound sound) {
+    public void setDeathSound(@Nullable final org.bukkit.Sound sound) {
         deathSound = sound;
     }
 
@@ -174,7 +174,7 @@ public class EntityDeathEvent extends EntityEvent implements org.bukkit.event.Ca
      *
      * @param soundCategory The sound category
      */
-    public void setDeathSoundCategory(@Nullable org.bukkit.SoundCategory soundCategory) {
+    public void setDeathSoundCategory(@Nullable final org.bukkit.SoundCategory soundCategory) {
         this.deathSoundCategory = soundCategory;
     }
 
@@ -192,7 +192,7 @@ public class EntityDeathEvent extends EntityEvent implements org.bukkit.event.Ca
      *
      * @param volume The volume the death sound should play at
      */
-    public void setDeathSoundVolume(float volume) {
+    public void setDeathSoundVolume(final float volume) {
         this.deathSoundVolume = volume;
     }
 
@@ -210,7 +210,7 @@ public class EntityDeathEvent extends EntityEvent implements org.bukkit.event.Ca
      *
      * @param pitch The pitch the death sound should play with
      */
-    public void setDeathSoundPitch(float pitch) {
+    public void setDeathSoundPitch(final float pitch) {
         this.deathSoundPitch = pitch;
     }
     // Paper end
diff --git a/src/main/java/org/bukkit/event/entity/EntityDropItemEvent.java b/src/main/java/org/bukkit/event/entity/EntityDropItemEvent.java
index f850e20e81bd69ec9a2d577170f2ddb8353785c7..03d5a0e9461b675a019966517a87f0cf771d0ee9 100644
--- a/src/main/java/org/bukkit/event/entity/EntityDropItemEvent.java
+++ b/src/main/java/org/bukkit/event/entity/EntityDropItemEvent.java
@@ -36,7 +36,7 @@ public class EntityDropItemEvent extends EntityEvent implements Cancellable {
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.cancel = cancel;
     }
 
diff --git a/src/main/java/org/bukkit/event/entity/EntityEnterBlockEvent.java b/src/main/java/org/bukkit/event/entity/EntityEnterBlockEvent.java
index 850e4342353d41f8b394e2a5ba9b1ed29b7f01f0..664ea9b900c74ae7e07db083f76d58ce375bb40b 100644
--- a/src/main/java/org/bukkit/event/entity/EntityEnterBlockEvent.java
+++ b/src/main/java/org/bukkit/event/entity/EntityEnterBlockEvent.java
@@ -42,7 +42,7 @@ public class EntityEnterBlockEvent extends EntityEvent implements Cancellable {
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.cancel = cancel;
     }
 
diff --git a/src/main/java/org/bukkit/event/entity/EntityEnterLoveModeEvent.java b/src/main/java/org/bukkit/event/entity/EntityEnterLoveModeEvent.java
index 8cc4c6a78c2467515e52eaea33cca77bf098bc40..6211ed31d459b3bf5bc05e2ed9c3137be77cec3f 100644
--- a/src/main/java/org/bukkit/event/entity/EntityEnterLoveModeEvent.java
+++ b/src/main/java/org/bukkit/event/entity/EntityEnterLoveModeEvent.java
@@ -20,7 +20,7 @@ public class EntityEnterLoveModeEvent extends EntityEvent implements Cancellable
     private final @Nullable HumanEntity humanEntity;
     private int ticksInLove;
 
-    public EntityEnterLoveModeEvent(@NotNull Animals animalInLove, @Nullable HumanEntity humanEntity, int ticksInLove) {
+    public EntityEnterLoveModeEvent(@NotNull final Animals animalInLove, @Nullable final HumanEntity humanEntity, final int ticksInLove) {
         super(animalInLove);
         this.humanEntity = humanEntity;
         this.ticksInLove = ticksInLove;
@@ -63,7 +63,7 @@ public class EntityEnterLoveModeEvent extends EntityEvent implements Cancellable
      * @param ticksInLove The amount of ticks that the animal will fall in love
      * for
      */
-    public void setTicksInLove(int ticksInLove) {
+    public void setTicksInLove(final int ticksInLove) {
         this.ticksInLove = ticksInLove;
     }
 
@@ -73,7 +73,7 @@ public class EntityEnterLoveModeEvent extends EntityEvent implements Cancellable
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.cancel = cancel;
     }
 
diff --git a/src/main/java/org/bukkit/event/entity/EntityExhaustionEvent.java b/src/main/java/org/bukkit/event/entity/EntityExhaustionEvent.java
index 7e6c8756bd73ffe96c409fd258f86539f52b6bcd..888414a1457b6e20fcbfe07676259c2bc604a80b 100644
--- a/src/main/java/org/bukkit/event/entity/EntityExhaustionEvent.java
+++ b/src/main/java/org/bukkit/event/entity/EntityExhaustionEvent.java
@@ -17,7 +17,7 @@ public class EntityExhaustionEvent extends EntityEvent implements Cancellable {
     private float exhaustion;
     private boolean cancel;
 
-    public EntityExhaustionEvent(@NotNull HumanEntity who, @NotNull ExhaustionReason exhaustionReason, float exhaustion) {
+    public EntityExhaustionEvent(@NotNull final HumanEntity who, @NotNull final ExhaustionReason exhaustionReason, final float exhaustion) {
         super(who);
         this.exhaustionReason = exhaustionReason;
         this.exhaustion = exhaustion;
@@ -51,7 +51,7 @@ public class EntityExhaustionEvent extends EntityEvent implements Cancellable {
      *
      * @param exhaustion new exhaustion to add
      */
-    public void setExhaustion(float exhaustion) {
+    public void setExhaustion(final float exhaustion) {
         this.exhaustion = exhaustion;
     }
 
@@ -67,7 +67,7 @@ public class EntityExhaustionEvent extends EntityEvent implements Cancellable {
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.cancel = cancel;
     }
 
diff --git a/src/main/java/org/bukkit/event/entity/EntityExplodeEvent.java b/src/main/java/org/bukkit/event/entity/EntityExplodeEvent.java
index 787f2a11300b5f374be1339b62c8f4284df17915..1063b2d95a647fe5fd697d3db301f05c8e0e6aa1 100644
--- a/src/main/java/org/bukkit/event/entity/EntityExplodeEvent.java
+++ b/src/main/java/org/bukkit/event/entity/EntityExplodeEvent.java
@@ -32,7 +32,7 @@ public class EntityExplodeEvent extends EntityEvent implements Cancellable {
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.cancel = cancel;
     }
 
@@ -74,7 +74,7 @@ public class EntityExplodeEvent extends EntityEvent implements Cancellable {
      *
      * @param yield The new yield percentage
      */
-    public void setYield(float yield) {
+    public void setYield(final float yield) {
         this.yield = yield;
     }
 
diff --git a/src/main/java/org/bukkit/event/entity/EntityInteractEvent.java b/src/main/java/org/bukkit/event/entity/EntityInteractEvent.java
index e2c0cb33938c67bab58341ec2d7a172e9ddb4d38..1f185c8ce8b1f741c9fb2512a0d62758651e4a2c 100644
--- a/src/main/java/org/bukkit/event/entity/EntityInteractEvent.java
+++ b/src/main/java/org/bukkit/event/entity/EntityInteractEvent.java
@@ -25,7 +25,7 @@ public class EntityInteractEvent extends EntityEvent implements Cancellable {
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         cancelled = cancel;
     }
 
diff --git a/src/main/java/org/bukkit/event/entity/EntityPickupItemEvent.java b/src/main/java/org/bukkit/event/entity/EntityPickupItemEvent.java
index 4986ca4a11da109e131d19ab58eaf66d868c7065..60ae30598f11efcc0efcdced2cfc7ab5bab4ffd9 100644
--- a/src/main/java/org/bukkit/event/entity/EntityPickupItemEvent.java
+++ b/src/main/java/org/bukkit/event/entity/EntityPickupItemEvent.java
@@ -52,7 +52,7 @@ public class EntityPickupItemEvent extends EntityEvent implements Cancellable {
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.cancel = cancel;
     }
 
diff --git a/src/main/java/org/bukkit/event/entity/EntityPlaceEvent.java b/src/main/java/org/bukkit/event/entity/EntityPlaceEvent.java
index 2ca958ada7afe32ba5c547d01e80f7b238da1023..777bc9b8dbf2034f5fd5f640e88f842103767b78 100644
--- a/src/main/java/org/bukkit/event/entity/EntityPlaceEvent.java
+++ b/src/main/java/org/bukkit/event/entity/EntityPlaceEvent.java
@@ -85,7 +85,7 @@ public class EntityPlaceEvent extends EntityEvent implements Cancellable {
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.cancelled = cancel;
     }
 
diff --git a/src/main/java/org/bukkit/event/entity/EntityPortalEvent.java b/src/main/java/org/bukkit/event/entity/EntityPortalEvent.java
index 97e36c7f6e09276fbae20eaeee0965566332ca46..78f3ccc2c5457bbe5e12801673cf709e7224e8b1 100644
--- a/src/main/java/org/bukkit/event/entity/EntityPortalEvent.java
+++ b/src/main/java/org/bukkit/event/entity/EntityPortalEvent.java
@@ -21,7 +21,7 @@ public class EntityPortalEvent extends EntityTeleportEvent {
         this(entity, from, to, 128); // Paper
     }
 
-    public EntityPortalEvent(@NotNull Entity entity, @NotNull Location from, @Nullable Location to, int searchRadius) {
+    public EntityPortalEvent(@NotNull final Entity entity, @NotNull final Location from, @Nullable final Location to, final int searchRadius) {
         super(entity, from, to);
         this.searchRadius = searchRadius;
         this.type = org.bukkit.PortalType.CUSTOM; // Paper
@@ -74,7 +74,7 @@ public class EntityPortalEvent extends EntityTeleportEvent {
      * @param searchRadius the radius in which to search for a portal from the
      * location
      */
-    public void setSearchRadius(int searchRadius) {
+    public void setSearchRadius(final int searchRadius) {
         this.searchRadius = searchRadius;
     }
 
diff --git a/src/main/java/org/bukkit/event/entity/EntityPortalExitEvent.java b/src/main/java/org/bukkit/event/entity/EntityPortalExitEvent.java
index ae6ff96f9edf65d590b6fc012b0e83c239cefc09..6d28c39785aa02039772a5967c041b81b240c468 100644
--- a/src/main/java/org/bukkit/event/entity/EntityPortalExitEvent.java
+++ b/src/main/java/org/bukkit/event/entity/EntityPortalExitEvent.java
@@ -53,7 +53,7 @@ public class EntityPortalExitEvent extends EntityTeleportEvent {
      *
      * @param after the velocity after exiting the portal
      */
-    public void setAfter(@NotNull Vector after) {
+    public void setAfter(@NotNull final Vector after) {
         this.after = after.clone();
     }
 
diff --git a/src/main/java/org/bukkit/event/entity/EntityPoseChangeEvent.java b/src/main/java/org/bukkit/event/entity/EntityPoseChangeEvent.java
index b6371eeb15c0b26be9aa166545d0dd5ed1d21ced..72a7088da6ee4d58f2f29dda61cc2620563c3194 100644
--- a/src/main/java/org/bukkit/event/entity/EntityPoseChangeEvent.java
+++ b/src/main/java/org/bukkit/event/entity/EntityPoseChangeEvent.java
@@ -16,7 +16,7 @@ public class EntityPoseChangeEvent extends EntityEvent {
     //
     private final @NotNull Pose pose;
 
-    public EntityPoseChangeEvent(@NotNull Entity who, @NotNull Pose pose) {
+    public EntityPoseChangeEvent(@NotNull final Entity who, @NotNull final Pose pose) {
         super(who);
         this.pose = pose;
     }
diff --git a/src/main/java/org/bukkit/event/entity/EntityPotionEffectEvent.java b/src/main/java/org/bukkit/event/entity/EntityPotionEffectEvent.java
index 303bf48334b5d53022ee30d980de370921622fe9..1d75ce3ba9cff133032d3855020ca47f25cc7b62 100644
--- a/src/main/java/org/bukkit/event/entity/EntityPotionEffectEvent.java
+++ b/src/main/java/org/bukkit/event/entity/EntityPotionEffectEvent.java
@@ -25,7 +25,7 @@ public class EntityPotionEffectEvent extends EntityEvent implements Cancellable
     private boolean override;
 
     @Contract("_, null, null, _, _, _ -> fail")
-    public EntityPotionEffectEvent(@NotNull LivingEntity livingEntity, @Nullable PotionEffect oldEffect, @Nullable PotionEffect newEffect, @NotNull Cause cause, @NotNull Action action, boolean override) {
+    public EntityPotionEffectEvent(@NotNull final LivingEntity livingEntity, @Nullable final PotionEffect oldEffect, @Nullable final PotionEffect newEffect, @NotNull final Cause cause, @NotNull final Action action, final boolean override) {
         super(livingEntity);
         this.oldEffect = oldEffect;
         this.newEffect = newEffect;
@@ -102,7 +102,7 @@ public class EntityPotionEffectEvent extends EntityEvent implements Cancellable
      *
      * @param override If the new effect will override the old one.
      */
-    public void setOverride(boolean override) {
+    public void setOverride(final boolean override) {
         this.override = override;
     }
 
@@ -112,7 +112,7 @@ public class EntityPotionEffectEvent extends EntityEvent implements Cancellable
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.cancel = cancel;
     }
 
diff --git a/src/main/java/org/bukkit/event/entity/EntityRegainHealthEvent.java b/src/main/java/org/bukkit/event/entity/EntityRegainHealthEvent.java
index a374a839d1b120a3b47962a581a9ca03671a4483..e94a97c34a947bb4064ccf4a258f2201f78909a3 100644
--- a/src/main/java/org/bukkit/event/entity/EntityRegainHealthEvent.java
+++ b/src/main/java/org/bukkit/event/entity/EntityRegainHealthEvent.java
@@ -20,7 +20,7 @@ public class EntityRegainHealthEvent extends EntityEvent implements Cancellable
         this(entity, amount, regainReason, false);
     }
 
-    public EntityRegainHealthEvent(@NotNull final Entity entity, final double amount, @NotNull final RegainReason regainReason, boolean isFastRegen) {
+    public EntityRegainHealthEvent(@NotNull final Entity entity, final double amount, @NotNull final RegainReason regainReason, final boolean isFastRegen) {
         // Paper end
         super(entity);
         this.amount = amount;
@@ -53,7 +53,7 @@ public class EntityRegainHealthEvent extends EntityEvent implements Cancellable
      *
      * @param amount the amount of health the entity will regain
      */
-    public void setAmount(double amount) {
+    public void setAmount(final double amount) {
         this.amount = amount;
     }
 
@@ -63,7 +63,7 @@ public class EntityRegainHealthEvent extends EntityEvent implements Cancellable
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         cancelled = cancel;
     }
 
diff --git a/src/main/java/org/bukkit/event/entity/EntityResurrectEvent.java b/src/main/java/org/bukkit/event/entity/EntityResurrectEvent.java
index 79efd9a1bb609b5d828cb1c741830e531475baf0..89279293a13f8a7c56dc23d5873bc131bbbc1aac 100644
--- a/src/main/java/org/bukkit/event/entity/EntityResurrectEvent.java
+++ b/src/main/java/org/bukkit/event/entity/EntityResurrectEvent.java
@@ -20,13 +20,13 @@ public class EntityResurrectEvent extends EntityEvent implements Cancellable {
 
     private final @Nullable EquipmentSlot hand;
 
-    public EntityResurrectEvent(@NotNull LivingEntity what, @Nullable EquipmentSlot hand) {
+    public EntityResurrectEvent(@NotNull final LivingEntity what, @Nullable final EquipmentSlot hand) {
         super(what);
         this.hand = hand;
     }
 
     @Deprecated
-    public EntityResurrectEvent(@NotNull LivingEntity what) {
+    public EntityResurrectEvent(@NotNull final LivingEntity what) {
         this(what, null);
     }
 
@@ -53,7 +53,7 @@ public class EntityResurrectEvent extends EntityEvent implements Cancellable {
     }
 
     @Override
-    public void setCancelled(boolean cancelled) {
+    public void setCancelled(final boolean cancelled) {
         this.cancelled = cancelled;
     }
 
diff --git a/src/main/java/org/bukkit/event/entity/EntityShootBowEvent.java b/src/main/java/org/bukkit/event/entity/EntityShootBowEvent.java
index 401b95c308bcd24c2a4cf46dbd5674f5a75a9844..9f740e75b9ce89af7619a699c476de168114b0da 100644
--- a/src/main/java/org/bukkit/event/entity/EntityShootBowEvent.java
+++ b/src/main/java/org/bukkit/event/entity/EntityShootBowEvent.java
@@ -24,7 +24,7 @@ public class EntityShootBowEvent extends EntityEvent implements Cancellable {
     private boolean cancelled;
     // Paper start
     @Deprecated
-    public void setConsumeArrow(boolean consumeArrow) {
+    public void setConsumeArrow(final boolean consumeArrow) {
         this.setConsumeItem(consumeArrow);
     }
 
@@ -44,7 +44,7 @@ public class EntityShootBowEvent extends EntityEvent implements Cancellable {
     }
 
     @Deprecated
-    public EntityShootBowEvent(@NotNull final LivingEntity shooter, @Nullable final ItemStack bow, @NotNull ItemStack arrowItem, @NotNull final Entity projectile, final float force) {
+    public EntityShootBowEvent(@NotNull final LivingEntity shooter, @Nullable final ItemStack bow, @NotNull final ItemStack arrowItem, @NotNull final Entity projectile, final float force) {
         this(shooter, bow, arrowItem, projectile, EquipmentSlot.HAND, force, true);
     }
     // Paper end
@@ -102,7 +102,7 @@ public class EntityShootBowEvent extends EntityEvent implements Cancellable {
      *
      * @param projectile the new projectile
      */
-    public void setProjectile(@NotNull Entity projectile) {
+    public void setProjectile(@NotNull final Entity projectile) {
         this.projectile = projectile;
     }
 
@@ -138,7 +138,7 @@ public class EntityShootBowEvent extends EntityEvent implements Cancellable {
      *
      * @param consumeItem whether or not to consume the item
      */
-    public void setConsumeItem(boolean consumeItem) {
+    public void setConsumeItem(final boolean consumeItem) {
         this.consumeItem = consumeItem;
     }
 
@@ -157,7 +157,7 @@ public class EntityShootBowEvent extends EntityEvent implements Cancellable {
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         cancelled = cancel;
     }
 
diff --git a/src/main/java/org/bukkit/event/entity/EntitySpawnEvent.java b/src/main/java/org/bukkit/event/entity/EntitySpawnEvent.java
index 961ee511342cd3a12ff2ff74d7b4683c6753123d..d52ff4818de3ff4df23719945759d3dae4b5b375 100644
--- a/src/main/java/org/bukkit/event/entity/EntitySpawnEvent.java
+++ b/src/main/java/org/bukkit/event/entity/EntitySpawnEvent.java
@@ -26,7 +26,7 @@ public class EntitySpawnEvent extends EntityEvent implements Cancellable {
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         canceled = cancel;
     }
 
diff --git a/src/main/java/org/bukkit/event/entity/EntitySpellCastEvent.java b/src/main/java/org/bukkit/event/entity/EntitySpellCastEvent.java
index eec6aa4958d0f77707c2c6d53581c5bb70ca23bb..2f791ed426266aee69981f2ff1927991324004da 100644
--- a/src/main/java/org/bukkit/event/entity/EntitySpellCastEvent.java
+++ b/src/main/java/org/bukkit/event/entity/EntitySpellCastEvent.java
@@ -15,7 +15,7 @@ public class EntitySpellCastEvent extends EntityEvent implements Cancellable {
     private boolean cancelled = false;
     private final Spellcaster.@NotNull Spell spell;
 
-    public EntitySpellCastEvent(@NotNull Spellcaster what, @NotNull Spellcaster.Spell spell) {
+    public EntitySpellCastEvent(@NotNull final Spellcaster what, @NotNull final Spellcaster.Spell spell) {
         super(what);
         this.spell = spell;
     }
@@ -40,7 +40,7 @@ public class EntitySpellCastEvent extends EntityEvent implements Cancellable {
     }
 
     @Override
-    public void setCancelled(boolean cancelled) {
+    public void setCancelled(final boolean cancelled) {
         this.cancelled = cancelled;
     }
 
diff --git a/src/main/java/org/bukkit/event/entity/EntityTameEvent.java b/src/main/java/org/bukkit/event/entity/EntityTameEvent.java
index 7c6d751de25a0f012c82e03e3e279e3e5bac6b3d..adf5b2c5e266aaef37d2f635cb34bf6e1bedc121 100644
--- a/src/main/java/org/bukkit/event/entity/EntityTameEvent.java
+++ b/src/main/java/org/bukkit/event/entity/EntityTameEvent.java
@@ -31,7 +31,7 @@ public class EntityTameEvent extends EntityEvent implements Cancellable {
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         cancelled = cancel;
     }
 
diff --git a/src/main/java/org/bukkit/event/entity/EntityTargetEvent.java b/src/main/java/org/bukkit/event/entity/EntityTargetEvent.java
index 6c4d20894d3e3eb8f337ddbdf191dc667bdbb626..9263b163e5bdb7cd0e59941db69ac292d1b4f6c6 100644
--- a/src/main/java/org/bukkit/event/entity/EntityTargetEvent.java
+++ b/src/main/java/org/bukkit/event/entity/EntityTargetEvent.java
@@ -27,7 +27,7 @@ public class EntityTargetEvent extends EntityEvent implements Cancellable {
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.cancel = cancel;
     }
 
@@ -66,7 +66,7 @@ public class EntityTargetEvent extends EntityEvent implements Cancellable {
      *
      * @param target The entity to target
      */
-    public void setTarget(@Nullable Entity target) {
+    public void setTarget(@Nullable final Entity target) {
         this.target = target;
     }
 
diff --git a/src/main/java/org/bukkit/event/entity/EntityTargetLivingEntityEvent.java b/src/main/java/org/bukkit/event/entity/EntityTargetLivingEntityEvent.java
index 090ec6f96ca9b7f760389994da988c44c32b9976..e80f30ffebbfe146d32ac11887c3b3b2478ee23a 100644
--- a/src/main/java/org/bukkit/event/entity/EntityTargetLivingEntityEvent.java
+++ b/src/main/java/org/bukkit/event/entity/EntityTargetLivingEntityEvent.java
@@ -31,7 +31,7 @@ public class EntityTargetLivingEntityEvent extends EntityTargetEvent {
      * @param target The entity to target
      */
     @Override
-    public void setTarget(@Nullable Entity target) {
+    public void setTarget(@Nullable final Entity target) {
         if (target == null || target instanceof LivingEntity) {
             super.setTarget(target);
         }
diff --git a/src/main/java/org/bukkit/event/entity/EntityTeleportEvent.java b/src/main/java/org/bukkit/event/entity/EntityTeleportEvent.java
index e5c080a2c42a563f0621d231d6a630a8da60f27e..52ec732f8f5075c36b978e34545b1f1af8b8169c 100644
--- a/src/main/java/org/bukkit/event/entity/EntityTeleportEvent.java
+++ b/src/main/java/org/bukkit/event/entity/EntityTeleportEvent.java
@@ -19,7 +19,7 @@ public class EntityTeleportEvent extends EntityEvent implements Cancellable {
     private Location from;
     private @Nullable Location to;
 
-    public EntityTeleportEvent(@NotNull Entity what, @NotNull Location from, @Nullable Location to) {
+    public EntityTeleportEvent(@NotNull final Entity what, @NotNull final Location from, @Nullable final Location to) {
         super(what);
         this.from = from;
         this.to = to;
@@ -32,7 +32,7 @@ public class EntityTeleportEvent extends EntityEvent implements Cancellable {
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.cancel = cancel;
     }
 
@@ -51,7 +51,7 @@ public class EntityTeleportEvent extends EntityEvent implements Cancellable {
      *
      * @param from New location this entity moved from
      */
-    public void setFrom(@NotNull Location from) {
+    public void setFrom(@NotNull final Location from) {
         this.from = from;
     }
 
@@ -70,7 +70,7 @@ public class EntityTeleportEvent extends EntityEvent implements Cancellable {
      *
      * @param to New Location this entity moved to
      */
-    public void setTo(@Nullable Location to) {
+    public void setTo(@Nullable final Location to) {
         this.to = to;
     }
 
diff --git a/src/main/java/org/bukkit/event/entity/EntityToggleGlideEvent.java b/src/main/java/org/bukkit/event/entity/EntityToggleGlideEvent.java
index de24f3f61dfd20da9a399b9da3f16d6aaa629503..d17e3b99f63f3c546d3162a06792e814eb5dc7c4 100644
--- a/src/main/java/org/bukkit/event/entity/EntityToggleGlideEvent.java
+++ b/src/main/java/org/bukkit/event/entity/EntityToggleGlideEvent.java
@@ -20,7 +20,7 @@ public class EntityToggleGlideEvent extends EntityEvent implements Cancellable {
     private boolean cancel = false;
     private final boolean isGliding;
 
-    public EntityToggleGlideEvent(@NotNull LivingEntity who, final boolean isGliding) {
+    public EntityToggleGlideEvent(@NotNull final LivingEntity who, final boolean isGliding) {
         super(who);
         this.isGliding = isGliding;
     }
@@ -31,7 +31,7 @@ public class EntityToggleGlideEvent extends EntityEvent implements Cancellable {
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.cancel = cancel;
     }
 
diff --git a/src/main/java/org/bukkit/event/entity/EntityToggleSwimEvent.java b/src/main/java/org/bukkit/event/entity/EntityToggleSwimEvent.java
index e1123295b9511a2c610a1baf7195638f7f3e64c4..b017079681666cd5fbd51c28455810f26352e76b 100644
--- a/src/main/java/org/bukkit/event/entity/EntityToggleSwimEvent.java
+++ b/src/main/java/org/bukkit/event/entity/EntityToggleSwimEvent.java
@@ -14,7 +14,7 @@ public class EntityToggleSwimEvent extends EntityEvent implements Cancellable {
     private boolean cancel = false;
     private final boolean isSwimming;
 
-    public EntityToggleSwimEvent(@NotNull LivingEntity who, final boolean isSwimming) {
+    public EntityToggleSwimEvent(@NotNull final LivingEntity who, final boolean isSwimming) {
         super(who);
         this.isSwimming = isSwimming;
     }
@@ -25,7 +25,7 @@ public class EntityToggleSwimEvent extends EntityEvent implements Cancellable {
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.cancel = cancel;
     }
 
diff --git a/src/main/java/org/bukkit/event/entity/EntityTransformEvent.java b/src/main/java/org/bukkit/event/entity/EntityTransformEvent.java
index 90bc9ad896dfc8e78d9118648b8039eb153d8a07..8b939b371fb4378a3fe226aa605c416b33c308ff 100644
--- a/src/main/java/org/bukkit/event/entity/EntityTransformEvent.java
+++ b/src/main/java/org/bukkit/event/entity/EntityTransformEvent.java
@@ -18,7 +18,7 @@ public class EntityTransformEvent extends EntityEvent implements Cancellable {
     private final @NotNull List<Entity> convertedList;
     private final @NotNull TransformReason transformReason;
 
-    public EntityTransformEvent(@NotNull Entity original, @NotNull List<Entity> convertedList, @NotNull TransformReason transformReason) {
+    public EntityTransformEvent(@NotNull final Entity original, @NotNull final List<Entity> convertedList, @NotNull final TransformReason transformReason) {
         super(original);
         this.convertedList = Collections.unmodifiableList(convertedList);
         this.converted = convertedList.get(0);
@@ -64,7 +64,7 @@ public class EntityTransformEvent extends EntityEvent implements Cancellable {
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         cancelled = cancel;
     }
 
diff --git a/src/main/java/org/bukkit/event/entity/EntityUnleashEvent.java b/src/main/java/org/bukkit/event/entity/EntityUnleashEvent.java
index bfcdbd2c82fa595d825d69c2da57b4b0dc238f3c..8a84e115f248cc304f2a11987d9e5d8bb1ae7111 100644
--- a/src/main/java/org/bukkit/event/entity/EntityUnleashEvent.java
+++ b/src/main/java/org/bukkit/event/entity/EntityUnleashEvent.java
@@ -23,11 +23,11 @@ public class EntityUnleashEvent extends EntityEvent implements org.bukkit.event.
 
     // Paper start - drop leash variable
     @Deprecated
-    public EntityUnleashEvent(@NotNull Entity entity, @NotNull UnleashReason reason) {
+    public EntityUnleashEvent(@NotNull final Entity entity, @NotNull final UnleashReason reason) {
         this(entity, reason, false);
     }
 
-    public EntityUnleashEvent(@NotNull Entity entity, @NotNull UnleashReason reason, boolean dropLeash) {
+    public EntityUnleashEvent(@NotNull final Entity entity, @NotNull final UnleashReason reason, final boolean dropLeash) {
         super(entity);
         // Paper end
         this.reason = reason;
@@ -59,7 +59,7 @@ public class EntityUnleashEvent extends EntityEvent implements org.bukkit.event.
      *
      * @param dropLeash Whether the leash item should be dropped
      */
-    public void setDropLeash(boolean dropLeash) {
+    public void setDropLeash(final boolean dropLeash) {
         this.dropLeash = dropLeash;
     }
 
@@ -69,7 +69,7 @@ public class EntityUnleashEvent extends EntityEvent implements org.bukkit.event.
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.cancelled = cancel;
     }
     // Paper end
diff --git a/src/main/java/org/bukkit/event/entity/ExplosionPrimeEvent.java b/src/main/java/org/bukkit/event/entity/ExplosionPrimeEvent.java
index 6db5dad719de5566f3b27666ff6006c1dbb189e9..db1ea3a25b5e54cb1cdf645148145c1debf7dabe 100644
--- a/src/main/java/org/bukkit/event/entity/ExplosionPrimeEvent.java
+++ b/src/main/java/org/bukkit/event/entity/ExplosionPrimeEvent.java
@@ -32,7 +32,7 @@ public class ExplosionPrimeEvent extends EntityEvent implements Cancellable {
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.cancel = cancel;
     }
 
@@ -50,7 +50,7 @@ public class ExplosionPrimeEvent extends EntityEvent implements Cancellable {
      *
      * @param radius the radius of the explosion
      */
-    public void setRadius(float radius) {
+    public void setRadius(final float radius) {
         this.radius = radius;
     }
 
@@ -68,7 +68,7 @@ public class ExplosionPrimeEvent extends EntityEvent implements Cancellable {
      *
      * @param fire true if you want this explosion to create fire
      */
-    public void setFire(boolean fire) {
+    public void setFire(final boolean fire) {
         this.fire = fire;
     }
 
diff --git a/src/main/java/org/bukkit/event/entity/FireworkExplodeEvent.java b/src/main/java/org/bukkit/event/entity/FireworkExplodeEvent.java
index 51ad0e6bfc0336193b481406e3ae268793ebe700..d7d4956002973bdedd50fd849e72a60ab921c64e 100644
--- a/src/main/java/org/bukkit/event/entity/FireworkExplodeEvent.java
+++ b/src/main/java/org/bukkit/event/entity/FireworkExplodeEvent.java
@@ -30,7 +30,7 @@ public class FireworkExplodeEvent extends EntityEvent implements Cancellable {
      * @param cancel whether to cancel or not.
      */
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.cancel = cancel;
     }
 
diff --git a/src/main/java/org/bukkit/event/entity/FoodLevelChangeEvent.java b/src/main/java/org/bukkit/event/entity/FoodLevelChangeEvent.java
index 18b2c73f41a4e4f8d5c20df19b7dbb16f55a3d38..3843029fd629dcf738dd397dff320825ab0dff48 100644
--- a/src/main/java/org/bukkit/event/entity/FoodLevelChangeEvent.java
+++ b/src/main/java/org/bukkit/event/entity/FoodLevelChangeEvent.java
@@ -73,7 +73,7 @@ public class FoodLevelChangeEvent extends EntityEvent implements Cancellable {
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.cancel = cancel;
     }
 
diff --git a/src/main/java/org/bukkit/event/entity/HorseJumpEvent.java b/src/main/java/org/bukkit/event/entity/HorseJumpEvent.java
index 65b1ddb2b2b7bb75a69ed807ca83e9acc4c674c2..82d39df2b43f364b977a98edca37d231b1e79727 100644
--- a/src/main/java/org/bukkit/event/entity/HorseJumpEvent.java
+++ b/src/main/java/org/bukkit/event/entity/HorseJumpEvent.java
@@ -28,7 +28,7 @@ public class HorseJumpEvent extends EntityEvent implements Cancellable {
      */
     @Override
     @Deprecated
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         cancelled = cancel;
     }
 
@@ -73,7 +73,7 @@ public class HorseJumpEvent extends EntityEvent implements Cancellable {
      * @deprecated horse jumping was moved client side.
      */
     @Deprecated
-    public void setPower(float power) {
+    public void setPower(final float power) {
         this.power = power;
     }
 
diff --git a/src/main/java/org/bukkit/event/entity/ItemDespawnEvent.java b/src/main/java/org/bukkit/event/entity/ItemDespawnEvent.java
index d9a911d749950766b0629acfeded3800abd7f98f..8565ee4daae1ca6753d8316328722791c9b6068e 100644
--- a/src/main/java/org/bukkit/event/entity/ItemDespawnEvent.java
+++ b/src/main/java/org/bukkit/event/entity/ItemDespawnEvent.java
@@ -29,7 +29,7 @@ public class ItemDespawnEvent extends EntityEvent implements Cancellable {
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         canceled = cancel;
     }
 
diff --git a/src/main/java/org/bukkit/event/entity/ItemMergeEvent.java b/src/main/java/org/bukkit/event/entity/ItemMergeEvent.java
index 7443e4b90f4d184f6e1754d0ff9bd569164e54d2..483e09f32412e5ee7aca735623fa6a52ae6db9f3 100644
--- a/src/main/java/org/bukkit/event/entity/ItemMergeEvent.java
+++ b/src/main/java/org/bukkit/event/entity/ItemMergeEvent.java
@@ -11,7 +11,7 @@ public class ItemMergeEvent extends EntityEvent implements Cancellable {
     private boolean cancelled;
     private final @NotNull Item target;
 
-    public ItemMergeEvent(@NotNull Item item, @NotNull Item target) {
+    public ItemMergeEvent(@NotNull final Item item, @NotNull final Item target) {
         super(item);
         this.target = target;
     }
@@ -22,7 +22,7 @@ public class ItemMergeEvent extends EntityEvent implements Cancellable {
     }
 
     @Override
-    public void setCancelled(boolean cancelled) {
+    public void setCancelled(final boolean cancelled) {
         this.cancelled = cancelled;
     }
 
diff --git a/src/main/java/org/bukkit/event/entity/LingeringPotionSplashEvent.java b/src/main/java/org/bukkit/event/entity/LingeringPotionSplashEvent.java
index 4e0a5aa1d6697e52159c0dc3e9bd375a1a36d81d..d047490548e27356530cf41682dc65b1254e241d 100644
--- a/src/main/java/org/bukkit/event/entity/LingeringPotionSplashEvent.java
+++ b/src/main/java/org/bukkit/event/entity/LingeringPotionSplashEvent.java
@@ -41,7 +41,7 @@ public class LingeringPotionSplashEvent extends ProjectileHitEvent implements Ca
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         cancelled = cancel;
     }
 
diff --git a/src/main/java/org/bukkit/event/entity/PigZapEvent.java b/src/main/java/org/bukkit/event/entity/PigZapEvent.java
index 84ea9e297a54e352ecdbd3993aa3a11cc29b86c3..75869a9d4ed124b2b9190d660da4d95428bcc29b 100644
--- a/src/main/java/org/bukkit/event/entity/PigZapEvent.java
+++ b/src/main/java/org/bukkit/event/entity/PigZapEvent.java
@@ -28,7 +28,7 @@ public class PigZapEvent extends EntityZapEvent implements Cancellable {
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         canceled = cancel;
     }
 
diff --git a/src/main/java/org/bukkit/event/entity/PigZombieAngerEvent.java b/src/main/java/org/bukkit/event/entity/PigZombieAngerEvent.java
index 70b9423f4ebe8fe5876a30f36caa5f8489ecb312..21ba3a4f2dde3cae39ccdf15d6abdc1074466670 100644
--- a/src/main/java/org/bukkit/event/entity/PigZombieAngerEvent.java
+++ b/src/main/java/org/bukkit/event/entity/PigZombieAngerEvent.java
@@ -51,7 +51,7 @@ public class PigZombieAngerEvent extends EntityEvent implements Cancellable {
      * @param newAnger the new anger
      * @see PigZombie#setAnger(int)
      */
-    public void setNewAnger(int newAnger) {
+    public void setNewAnger(final int newAnger) {
         this.newAnger = newAnger;
     }
 
@@ -67,7 +67,7 @@ public class PigZombieAngerEvent extends EntityEvent implements Cancellable {
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         canceled = cancel;
     }
 
diff --git a/src/main/java/org/bukkit/event/entity/PiglinBarterEvent.java b/src/main/java/org/bukkit/event/entity/PiglinBarterEvent.java
index 05e96d239e1dbbc770c014514bcb05582e91edaa..860a01cb02dbb0fb26ff9b170c96ebe6545fe21f 100644
--- a/src/main/java/org/bukkit/event/entity/PiglinBarterEvent.java
+++ b/src/main/java/org/bukkit/event/entity/PiglinBarterEvent.java
@@ -20,7 +20,7 @@ public class PiglinBarterEvent extends EntityEvent implements Cancellable {
     private final @NotNull List<ItemStack> outcome;
     private final @NotNull ItemStack input;
 
-    public PiglinBarterEvent(@NotNull Piglin what, @NotNull ItemStack input, @NotNull List<ItemStack> outcome) {
+    public PiglinBarterEvent(@NotNull final Piglin what, @NotNull final ItemStack input, @NotNull final List<ItemStack> outcome) {
         super(what);
 
         this.input = input;
@@ -59,7 +59,7 @@ public class PiglinBarterEvent extends EntityEvent implements Cancellable {
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         cancelled = cancel;
     }
 
diff --git a/src/main/java/org/bukkit/event/entity/PlayerDeathEvent.java b/src/main/java/org/bukkit/event/entity/PlayerDeathEvent.java
index a7f3c4f820b4ba619269ccb358506eb2b12707f7..18d73094dded379dee5ed794024a3cd11245559a 100644
--- a/src/main/java/org/bukkit/event/entity/PlayerDeathEvent.java
+++ b/src/main/java/org/bukkit/event/entity/PlayerDeathEvent.java
@@ -25,15 +25,15 @@ public class PlayerDeathEvent extends EntityDeathEvent {
         this(player, drops, droppedExp, 0, adventure$deathMessage, null);
     }
 
-    public PlayerDeathEvent(@NotNull final Player player, @NotNull final List<ItemStack> drops, final int droppedExp, final int newExp, @Nullable final net.kyori.adventure.text.Component adventure$deathMessage, @Nullable String deathMessage) {
+    public PlayerDeathEvent(@NotNull final Player player, @NotNull final List<ItemStack> drops, final int droppedExp, final int newExp, @Nullable final net.kyori.adventure.text.Component adventure$deathMessage, @Nullable final String deathMessage) {
         this(player, drops, droppedExp, newExp, 0, 0, adventure$deathMessage, deathMessage);
     }
 
-    public PlayerDeathEvent(@NotNull final Player player, @NotNull final List<ItemStack> drops, final int droppedExp, final int newExp, final int newTotalExp, final int newLevel, @Nullable final net.kyori.adventure.text.Component adventure$deathMessage, @Nullable String deathMessage) {
+    public PlayerDeathEvent(@NotNull final Player player, @NotNull final List<ItemStack> drops, final int droppedExp, final int newExp, final int newTotalExp, final int newLevel, @Nullable final net.kyori.adventure.text.Component adventure$deathMessage, @Nullable final String deathMessage) {
         this(player, drops, droppedExp, newExp, newTotalExp, newLevel, adventure$deathMessage, deathMessage, true);
     }
 
-    public PlayerDeathEvent(@NotNull final Player player, @NotNull final List<ItemStack> drops, final int droppedExp, final int newExp, final int newTotalExp, final int newLevel, @Nullable final net.kyori.adventure.text.Component adventure$deathMessage, @Nullable String deathMessage, boolean doExpDrop) {
+    public PlayerDeathEvent(@NotNull final Player player, @NotNull final List<ItemStack> drops, final int droppedExp, final int newExp, final int newTotalExp, final int newLevel, @Nullable final net.kyori.adventure.text.Component adventure$deathMessage, @Nullable final String deathMessage, final boolean doExpDrop) {
         super(player, drops, droppedExp);
         this.newExp = newExp;
         this.newTotalExp = newTotalExp;
@@ -59,7 +59,7 @@ public class PlayerDeathEvent extends EntityDeathEvent {
     }
 
     @Deprecated // Paper
-    public PlayerDeathEvent(@NotNull final Player player, @NotNull final List<ItemStack> drops, final int droppedExp, final int newExp, final int newTotalExp, final int newLevel, @Nullable final String deathMessage, boolean doExpDrop) {
+    public PlayerDeathEvent(@NotNull final Player player, @NotNull final List<ItemStack> drops, final int droppedExp, final int newExp, final int newTotalExp, final int newLevel, @Nullable final String deathMessage, final boolean doExpDrop) {
         super(player, drops, droppedExp);
         this.newExp = newExp;
         this.newTotalExp = newTotalExp;
@@ -112,7 +112,7 @@ public class PlayerDeathEvent extends EntityDeathEvent {
     /**
      * @param doExpDrop sets if experience should be dropped from this death
      */
-    public void setShouldDropExperience(boolean doExpDrop) {
+    public void setShouldDropExperience(final boolean doExpDrop) {
         this.doExpDrop = doExpDrop;
     }
     // Paper end
@@ -140,7 +140,7 @@ public class PlayerDeathEvent extends EntityDeathEvent {
      *
      * @param deathMessage Message to appear to other players on the server.
      */
-    public void deathMessage(@Nullable net.kyori.adventure.text.Component deathMessage) {
+    public void deathMessage(@Nullable final net.kyori.adventure.text.Component deathMessage) {
         this.deathMessage = null;
         this.adventure$deathMessage = deathMessage;
     }
@@ -162,7 +162,7 @@ public class PlayerDeathEvent extends EntityDeathEvent {
      * @deprecated in favour of {@link #deathMessage(net.kyori.adventure.text.Component)}
      */
     @Deprecated // Paper
-    public void setDeathMessage(@Nullable String deathMessage) {
+    public void setDeathMessage(@Nullable final String deathMessage) {
         this.deathMessage = deathMessage;
         this.adventure$deathMessage = deathMessage != null ? net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().deserialize(deathMessage) : null; // Paper
     }
@@ -179,7 +179,7 @@ public class PlayerDeathEvent extends EntityDeathEvent {
         return this.deathMessage != null ? this.deathMessage : (this.adventure$deathMessage != null ? getDeathMessageString(this.adventure$deathMessage) : null); // Paper
     }
     // Paper start //TODO: add translation API to drop String deathMessage in favor of just Adventure
-    private static @NotNull String getDeathMessageString(net.kyori.adventure.text.@NotNull Component component) {
+    private static @NotNull String getDeathMessageString(final net.kyori.adventure.text.@NotNull Component component) {
         return net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().serialize(component);
     }
     // Paper end
@@ -203,7 +203,7 @@ public class PlayerDeathEvent extends EntityDeathEvent {
      *
      * @param exp New EXP of the respawned player
      */
-    public void setNewExp(int exp) {
+    public void setNewExp(final int exp) {
         newExp = exp;
     }
 
@@ -221,7 +221,7 @@ public class PlayerDeathEvent extends EntityDeathEvent {
      *
      * @param level New Level of the respawned player
      */
-    public void setNewLevel(int level) {
+    public void setNewLevel(final int level) {
         newLevel = level;
     }
 
@@ -239,7 +239,7 @@ public class PlayerDeathEvent extends EntityDeathEvent {
      *
      * @param totalExp New Total EXP of the respawned player
      */
-    public void setNewTotalExp(int totalExp) {
+    public void setNewTotalExp(final int totalExp) {
         newTotalExp = totalExp;
     }
 
@@ -265,7 +265,7 @@ public class PlayerDeathEvent extends EntityDeathEvent {
      *
      * @param keepLevel True to keep all current value levels
      */
-    public void setKeepLevel(boolean keepLevel) {
+    public void setKeepLevel(final boolean keepLevel) {
         this.keepLevel = keepLevel;
     }
 
@@ -278,7 +278,7 @@ public class PlayerDeathEvent extends EntityDeathEvent {
      *
      * @param keepInventory True to keep the inventory
      */
-    public void setKeepInventory(boolean keepInventory) {
+    public void setKeepInventory(final boolean keepInventory) {
         this.keepInventory = keepInventory;
     }
 
diff --git a/src/main/java/org/bukkit/event/entity/PlayerLeashEntityEvent.java b/src/main/java/org/bukkit/event/entity/PlayerLeashEntityEvent.java
index e3d77dd9973512e58863504c08e939482cd282f2..b6779ac65921bd3908623b03d26f75e5cf278b06 100644
--- a/src/main/java/org/bukkit/event/entity/PlayerLeashEntityEvent.java
+++ b/src/main/java/org/bukkit/event/entity/PlayerLeashEntityEvent.java
@@ -19,7 +19,7 @@ public class PlayerLeashEntityEvent extends Event implements Cancellable {
     private final @NotNull Player player;
     private final @NotNull EquipmentSlot hand;
 
-    public PlayerLeashEntityEvent(@NotNull Entity what, @NotNull Entity leashHolder, @NotNull Player leasher, @NotNull EquipmentSlot hand) {
+    public PlayerLeashEntityEvent(@NotNull final Entity what, @NotNull final Entity leashHolder, @NotNull final Player leasher, @NotNull final EquipmentSlot hand) {
         this.leashHolder = leashHolder;
         this.entity = what;
         this.player = leasher;
@@ -27,7 +27,7 @@ public class PlayerLeashEntityEvent extends Event implements Cancellable {
     }
 
     @Deprecated
-    public PlayerLeashEntityEvent(@NotNull Entity what, @NotNull Entity leashHolder, @NotNull Player leasher) {
+    public PlayerLeashEntityEvent(@NotNull final Entity what, @NotNull final Entity leashHolder, @NotNull final Player leasher) {
         this(what, leashHolder, leasher, EquipmentSlot.HAND);
     }
 
@@ -88,7 +88,7 @@ public class PlayerLeashEntityEvent extends Event implements Cancellable {
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.cancelled = cancel;
     }
 }
diff --git a/src/main/java/org/bukkit/event/entity/PotionSplashEvent.java b/src/main/java/org/bukkit/event/entity/PotionSplashEvent.java
index 9343a7f5f2d8bc1ddd8aad02f91a5794a6fe23c8..9b9b951bb254a9df92fa34056f92277ac379d99a 100644
--- a/src/main/java/org/bukkit/event/entity/PotionSplashEvent.java
+++ b/src/main/java/org/bukkit/event/entity/PotionSplashEvent.java
@@ -58,8 +58,8 @@ public class PotionSplashEvent extends ProjectileHitEvent implements Cancellable
      * @return intensity relative to maximum effect; 0.0: not affected; 1.0:
      *     fully hit by potion effects
      */
-    public double getIntensity(@NotNull LivingEntity entity) {
-        Double intensity = affectedEntities.get(entity);
+    public double getIntensity(@NotNull final LivingEntity entity) {
+        final Double intensity = affectedEntities.get(entity);
         return intensity != null ? intensity.doubleValue() : 0.0;
     }
 
@@ -69,7 +69,7 @@ public class PotionSplashEvent extends ProjectileHitEvent implements Cancellable
      * @param entity For which entity to define a new intensity
      * @param intensity relative to maximum effect
      */
-    public void setIntensity(@NotNull LivingEntity entity, double intensity) {
+    public void setIntensity(@NotNull final LivingEntity entity, final double intensity) {
         Preconditions.checkArgument(entity != null, "You must specify a valid entity.");
         if (intensity <= 0.0) {
             affectedEntities.remove(entity);
@@ -84,7 +84,7 @@ public class PotionSplashEvent extends ProjectileHitEvent implements Cancellable
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         cancelled = cancel;
     }
 
diff --git a/src/main/java/org/bukkit/event/entity/ProjectileHitEvent.java b/src/main/java/org/bukkit/event/entity/ProjectileHitEvent.java
index c9c815ffb5548b39bd5dd47a7dda73ef3de5183c..808a5fabce01b3232eb8d6c73eaf535a629abcfe 100644
--- a/src/main/java/org/bukkit/event/entity/ProjectileHitEvent.java
+++ b/src/main/java/org/bukkit/event/entity/ProjectileHitEvent.java
@@ -23,19 +23,19 @@ public class ProjectileHitEvent extends EntityEvent implements Cancellable {
         this(projectile, null, null);
     }
 
-    public ProjectileHitEvent(@NotNull final Projectile projectile, @Nullable Entity hitEntity) {
+    public ProjectileHitEvent(@NotNull final Projectile projectile, @Nullable final Entity hitEntity) {
         this(projectile, hitEntity, null);
     }
 
-    public ProjectileHitEvent(@NotNull final Projectile projectile, @Nullable Block hitBlock) {
+    public ProjectileHitEvent(@NotNull final Projectile projectile, @Nullable final Block hitBlock) {
         this(projectile, null, hitBlock);
     }
 
-    public ProjectileHitEvent(@NotNull final Projectile projectile, @Nullable Entity hitEntity, @Nullable Block hitBlock) {
+    public ProjectileHitEvent(@NotNull final Projectile projectile, @Nullable final Entity hitEntity, @Nullable final Block hitBlock) {
         this(projectile, hitEntity, hitBlock, null);
     }
 
-    public ProjectileHitEvent(@NotNull final Projectile projectile, @Nullable Entity hitEntity, @Nullable Block hitBlock, @Nullable BlockFace hitFace) {
+    public ProjectileHitEvent(@NotNull final Projectile projectile, @Nullable final Entity hitEntity, @Nullable final Block hitBlock, @Nullable final BlockFace hitFace) {
         super(projectile);
         this.hitEntity = hitEntity;
         this.hitBlock = hitBlock;
@@ -99,7 +99,7 @@ public class ProjectileHitEvent extends EntityEvent implements Cancellable {
      * @param cancel true if you wish to cancel this event
      */
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.cancel = cancel;
     }
 
diff --git a/src/main/java/org/bukkit/event/entity/ProjectileLaunchEvent.java b/src/main/java/org/bukkit/event/entity/ProjectileLaunchEvent.java
index c5fc3c55843dc64fc706f69a90ca411ef781a3b6..986976e0e4ea96567a5b6c48c66d3a1976f1af89 100644
--- a/src/main/java/org/bukkit/event/entity/ProjectileLaunchEvent.java
+++ b/src/main/java/org/bukkit/event/entity/ProjectileLaunchEvent.java
@@ -11,7 +11,7 @@ import org.jetbrains.annotations.NotNull;
 public class ProjectileLaunchEvent extends EntitySpawnEvent implements Cancellable {
     private boolean cancelled;
 
-    public ProjectileLaunchEvent(@NotNull Entity what) {
+    public ProjectileLaunchEvent(@NotNull final Entity what) {
         super(what);
     }
 
@@ -21,7 +21,7 @@ public class ProjectileLaunchEvent extends EntitySpawnEvent implements Cancellab
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         cancelled = cancel;
     }
 
diff --git a/src/main/java/org/bukkit/event/entity/SheepDyeWoolEvent.java b/src/main/java/org/bukkit/event/entity/SheepDyeWoolEvent.java
index 156580d66e3f5a6b281b4763492be15d7b24b4d6..3862582c9ca7b81b12d71da7fdea537342a7efe1 100644
--- a/src/main/java/org/bukkit/event/entity/SheepDyeWoolEvent.java
+++ b/src/main/java/org/bukkit/event/entity/SheepDyeWoolEvent.java
@@ -18,7 +18,7 @@ public class SheepDyeWoolEvent extends io.papermc.paper.event.entity.EntityDyeEv
         this(sheep, color, null);
     }
 
-    public SheepDyeWoolEvent(@NotNull final Sheep sheep, @NotNull final DyeColor color, @Nullable Player player) {
+    public SheepDyeWoolEvent(@NotNull final Sheep sheep, @NotNull final DyeColor color, @Nullable final Player player) {
         super(sheep, color, player); // Paper
     }
 
diff --git a/src/main/java/org/bukkit/event/entity/SheepRegrowWoolEvent.java b/src/main/java/org/bukkit/event/entity/SheepRegrowWoolEvent.java
index 05264b31ad574cef52ad7621ecddc723e65287b0..2569c55b9b1555b334865d8d7e9cf60228f62ebc 100644
--- a/src/main/java/org/bukkit/event/entity/SheepRegrowWoolEvent.java
+++ b/src/main/java/org/bukkit/event/entity/SheepRegrowWoolEvent.java
@@ -23,7 +23,7 @@ public class SheepRegrowWoolEvent extends EntityEvent implements Cancellable {
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.cancel = cancel;
     }
 
diff --git a/src/main/java/org/bukkit/event/entity/SlimeSplitEvent.java b/src/main/java/org/bukkit/event/entity/SlimeSplitEvent.java
index 02b659847c69ab99023aaa44c50a704ea18acedb..5146653684424d6d4032a3e8a6aa62aa8c5c2158 100644
--- a/src/main/java/org/bukkit/event/entity/SlimeSplitEvent.java
+++ b/src/main/java/org/bukkit/event/entity/SlimeSplitEvent.java
@@ -24,7 +24,7 @@ public class SlimeSplitEvent extends EntityEvent implements Cancellable {
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.cancel = cancel;
     }
 
@@ -48,7 +48,7 @@ public class SlimeSplitEvent extends EntityEvent implements Cancellable {
      *
      * @param count the amount of slimes to spawn
      */
-    public void setCount(int count) {
+    public void setCount(final int count) {
         this.count = count;
     }
 
diff --git a/src/main/java/org/bukkit/event/entity/StriderTemperatureChangeEvent.java b/src/main/java/org/bukkit/event/entity/StriderTemperatureChangeEvent.java
index 26a4f88a3b3c757ac18504b2fcf683da01b3f34f..56a4c9f16ae373eee07712eecb54351dc4dd48d0 100644
--- a/src/main/java/org/bukkit/event/entity/StriderTemperatureChangeEvent.java
+++ b/src/main/java/org/bukkit/event/entity/StriderTemperatureChangeEvent.java
@@ -15,7 +15,7 @@ public class StriderTemperatureChangeEvent extends EntityEvent implements Cancel
     private final boolean shivering;
     private boolean cancelled;
 
-    public StriderTemperatureChangeEvent(@NotNull Strider what, boolean shivering) {
+    public StriderTemperatureChangeEvent(@NotNull final Strider what, final boolean shivering) {
         super(what);
         this.shivering = shivering;
     }
@@ -41,7 +41,7 @@ public class StriderTemperatureChangeEvent extends EntityEvent implements Cancel
     }
 
     @Override
-    public void setCancelled(boolean cancelled) {
+    public void setCancelled(final boolean cancelled) {
         this.cancelled = cancelled;
     }
 
diff --git a/src/main/java/org/bukkit/event/entity/VillagerAcquireTradeEvent.java b/src/main/java/org/bukkit/event/entity/VillagerAcquireTradeEvent.java
index 58155105dc1c6ec15a58f80eaf5c0e6419c6ad32..7f5e7d829ac8cb1cce97fb72ff098a161c4270fe 100644
--- a/src/main/java/org/bukkit/event/entity/VillagerAcquireTradeEvent.java
+++ b/src/main/java/org/bukkit/event/entity/VillagerAcquireTradeEvent.java
@@ -16,7 +16,7 @@ public class VillagerAcquireTradeEvent extends EntityEvent implements Cancellabl
     //
     private MerchantRecipe recipe;
 
-    public VillagerAcquireTradeEvent(@NotNull AbstractVillager what, @NotNull MerchantRecipe recipe) {
+    public VillagerAcquireTradeEvent(@NotNull final AbstractVillager what, @NotNull final MerchantRecipe recipe) {
         super(what);
         this.recipe = recipe;
     }
@@ -36,7 +36,7 @@ public class VillagerAcquireTradeEvent extends EntityEvent implements Cancellabl
      *
      * @param recipe the new recipe
      */
-    public void setRecipe(@NotNull MerchantRecipe recipe) {
+    public void setRecipe(@NotNull final MerchantRecipe recipe) {
         this.recipe = recipe;
     }
 
@@ -46,7 +46,7 @@ public class VillagerAcquireTradeEvent extends EntityEvent implements Cancellabl
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.cancelled = cancel;
     }
 
diff --git a/src/main/java/org/bukkit/event/entity/VillagerCareerChangeEvent.java b/src/main/java/org/bukkit/event/entity/VillagerCareerChangeEvent.java
index e4b9d608438842b24a38c324221239eac26f722b..578ac54c9ce744b8a1eff36ebb305a7362073a51 100644
--- a/src/main/java/org/bukkit/event/entity/VillagerCareerChangeEvent.java
+++ b/src/main/java/org/bukkit/event/entity/VillagerCareerChangeEvent.java
@@ -13,7 +13,7 @@ public class VillagerCareerChangeEvent extends EntityEvent implements Cancellabl
     private Profession profession;
     private final @NotNull ChangeReason reason;
 
-    public VillagerCareerChangeEvent(@NotNull Villager what, @NotNull Profession profession, @NotNull ChangeReason reason) {
+    public VillagerCareerChangeEvent(@NotNull final Villager what, @NotNull final Profession profession, @NotNull final ChangeReason reason) {
         super(what);
         this.profession = profession;
         this.reason = reason;
@@ -40,7 +40,7 @@ public class VillagerCareerChangeEvent extends EntityEvent implements Cancellabl
      *
      * @param profession new profession
      */
-    public void setProfession(@NotNull Profession profession) {
+    public void setProfession(@NotNull final Profession profession) {
         this.profession = profession;
     }
 
@@ -60,7 +60,7 @@ public class VillagerCareerChangeEvent extends EntityEvent implements Cancellabl
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         cancelled = cancel;
     }
 
diff --git a/src/main/java/org/bukkit/event/entity/VillagerReplenishTradeEvent.java b/src/main/java/org/bukkit/event/entity/VillagerReplenishTradeEvent.java
index c6d849af00e1d92ba2b11dac418e76fa19950bc5..a9c8a564ac10a892d9c87c6958aaad443a4a97d6 100644
--- a/src/main/java/org/bukkit/event/entity/VillagerReplenishTradeEvent.java
+++ b/src/main/java/org/bukkit/event/entity/VillagerReplenishTradeEvent.java
@@ -21,7 +21,7 @@ public class VillagerReplenishTradeEvent extends EntityEvent implements Cancella
     //
     private MerchantRecipe recipe;
 
-    public VillagerReplenishTradeEvent(@NotNull AbstractVillager what, @NotNull MerchantRecipe recipe) {
+    public VillagerReplenishTradeEvent(@NotNull final AbstractVillager what, @NotNull final MerchantRecipe recipe) {
         super(what);
         this.recipe = recipe;
     }
@@ -41,7 +41,7 @@ public class VillagerReplenishTradeEvent extends EntityEvent implements Cancella
      *
      * @param recipe the replenished recipe
      */
-    public void setRecipe(@NotNull MerchantRecipe recipe) {
+    public void setRecipe(@NotNull final MerchantRecipe recipe) {
         this.recipe = recipe;
     }
 
@@ -65,7 +65,7 @@ public class VillagerReplenishTradeEvent extends EntityEvent implements Cancella
      * has no effect anymore.
      */
     @Deprecated
-    public void setBonus(int bonus) {
+    public void setBonus(final int bonus) {
     }
 
     @Override
@@ -74,7 +74,7 @@ public class VillagerReplenishTradeEvent extends EntityEvent implements Cancella
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.cancelled = cancel;
     }
 
diff --git a/src/main/java/org/bukkit/event/hanging/HangingBreakEvent.java b/src/main/java/org/bukkit/event/hanging/HangingBreakEvent.java
index 17b6a140eadb7d5c745a12d9499e17245973b044..a6524fdf5f1be8e809aa3b76fe0598984e022488 100644
--- a/src/main/java/org/bukkit/event/hanging/HangingBreakEvent.java
+++ b/src/main/java/org/bukkit/event/hanging/HangingBreakEvent.java
@@ -34,7 +34,7 @@ public class HangingBreakEvent extends HangingEvent implements Cancellable {
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.cancelled = cancel;
     }
 
diff --git a/src/main/java/org/bukkit/event/hanging/HangingPlaceEvent.java b/src/main/java/org/bukkit/event/hanging/HangingPlaceEvent.java
index def033382ecf3f0a11c9195a71525998e3cbf4a4..2bc56d1e7adcc472ebf6c0eabf5d50b19c19bfbd 100644
--- a/src/main/java/org/bukkit/event/hanging/HangingPlaceEvent.java
+++ b/src/main/java/org/bukkit/event/hanging/HangingPlaceEvent.java
@@ -28,7 +28,7 @@ public class HangingPlaceEvent extends HangingEvent implements Cancellable {
         this(hanging, player, block, blockFace, hand, null);
     }
 
-    public HangingPlaceEvent(@NotNull final Hanging hanging, @Nullable final Player player, @NotNull final Block block, @NotNull final BlockFace blockFace, @Nullable final EquipmentSlot hand, @Nullable ItemStack itemStack) {
+    public HangingPlaceEvent(@NotNull final Hanging hanging, @Nullable final Player player, @NotNull final Block block, @NotNull final BlockFace blockFace, @Nullable final EquipmentSlot hand, @Nullable final ItemStack itemStack) {
         super(hanging);
         this.player = player;
         this.block = block;
@@ -94,7 +94,7 @@ public class HangingPlaceEvent extends HangingEvent implements Cancellable {
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.cancelled = cancel;
     }
 
diff --git a/src/main/java/org/bukkit/event/inventory/BrewEvent.java b/src/main/java/org/bukkit/event/inventory/BrewEvent.java
index 6b290bd5f33e7b096a9dbca37bdf33a1f5457eb4..16325bc1113fca4beace4573528d3577978ef957 100644
--- a/src/main/java/org/bukkit/event/inventory/BrewEvent.java
+++ b/src/main/java/org/bukkit/event/inventory/BrewEvent.java
@@ -20,7 +20,7 @@ public class BrewEvent extends BlockEvent implements Cancellable {
     private final int fuelLevel;
     private boolean cancelled;
 
-    public BrewEvent(@NotNull Block brewer, @NotNull BrewerInventory contents, @NotNull List<ItemStack> results, int fuelLevel) {
+    public BrewEvent(@NotNull final Block brewer, @NotNull final BrewerInventory contents, @NotNull final List<ItemStack> results, final int fuelLevel) {
         super(brewer);
         this.contents = contents;
         this.results = results;
@@ -70,7 +70,7 @@ public class BrewEvent extends BlockEvent implements Cancellable {
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         cancelled = cancel;
     }
 
diff --git a/src/main/java/org/bukkit/event/inventory/BrewingStandFuelEvent.java b/src/main/java/org/bukkit/event/inventory/BrewingStandFuelEvent.java
index 37802648299b00ee643d1d130005426a2977ec35..a35442847722cee2734c4a42dfa916222636edfe 100644
--- a/src/main/java/org/bukkit/event/inventory/BrewingStandFuelEvent.java
+++ b/src/main/java/org/bukkit/event/inventory/BrewingStandFuelEvent.java
@@ -19,7 +19,7 @@ public class BrewingStandFuelEvent extends BlockEvent implements Cancellable {
     private boolean cancelled;
     private boolean consuming = true;
 
-    public BrewingStandFuelEvent(@NotNull Block brewingStand, @NotNull ItemStack fuel, int fuelPower) {
+    public BrewingStandFuelEvent(@NotNull final Block brewingStand, @NotNull final ItemStack fuel, final int fuelPower) {
         super(brewingStand);
         this.fuel = fuel;
         this.fuelPower = fuelPower;
@@ -51,7 +51,7 @@ public class BrewingStandFuelEvent extends BlockEvent implements Cancellable {
      *
      * @param fuelPower the fuel power for this fuel
      */
-    public void setFuelPower(int fuelPower) {
+    public void setFuelPower(final int fuelPower) {
         this.fuelPower = fuelPower;
     }
 
@@ -69,7 +69,7 @@ public class BrewingStandFuelEvent extends BlockEvent implements Cancellable {
      *
      * @param consuming whether the fuel will be reduced or not
      */
-    public void setConsuming(boolean consuming) {
+    public void setConsuming(final boolean consuming) {
         this.consuming = consuming;
     }
 
@@ -79,7 +79,7 @@ public class BrewingStandFuelEvent extends BlockEvent implements Cancellable {
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.cancelled = cancel;
     }
 
diff --git a/src/main/java/org/bukkit/event/inventory/CraftItemEvent.java b/src/main/java/org/bukkit/event/inventory/CraftItemEvent.java
index 395f8a6eb09c3904659c0eb366e817ae7028b49e..bae0272981ac1c5a5cff1b987ca995b5c95050b5 100644
--- a/src/main/java/org/bukkit/event/inventory/CraftItemEvent.java
+++ b/src/main/java/org/bukkit/event/inventory/CraftItemEvent.java
@@ -12,12 +12,12 @@ import org.jetbrains.annotations.NotNull;
 public class CraftItemEvent extends InventoryClickEvent {
     private final Recipe recipe;
 
-    public CraftItemEvent(@NotNull Recipe recipe, @NotNull InventoryView what, @NotNull SlotType type, int slot, @NotNull ClickType click, @NotNull InventoryAction action) {
+    public CraftItemEvent(@NotNull final Recipe recipe, @NotNull final InventoryView what, @NotNull final SlotType type, final int slot, @NotNull final ClickType click, @NotNull final InventoryAction action) {
         super(what, type, slot, click, action);
         this.recipe = recipe;
     }
 
-    public CraftItemEvent(@NotNull Recipe recipe, @NotNull InventoryView what, @NotNull SlotType type, int slot, @NotNull ClickType click, @NotNull InventoryAction action, int key) {
+    public CraftItemEvent(@NotNull final Recipe recipe, @NotNull final InventoryView what, @NotNull final SlotType type, final int slot, @NotNull final ClickType click, @NotNull final InventoryAction action, final int key) {
         super(what, type, slot, click, action, key);
         this.recipe = recipe;
     }
diff --git a/src/main/java/org/bukkit/event/inventory/FurnaceBurnEvent.java b/src/main/java/org/bukkit/event/inventory/FurnaceBurnEvent.java
index 20660ef464920be31f7742871b64c890d9bba955..7f8542de0bff28aeaa5e5b0dcb1b8dde34d6d71a 100644
--- a/src/main/java/org/bukkit/event/inventory/FurnaceBurnEvent.java
+++ b/src/main/java/org/bukkit/event/inventory/FurnaceBurnEvent.java
@@ -50,7 +50,7 @@ public class FurnaceBurnEvent extends BlockEvent implements Cancellable {
      *
      * @param burnTime the burn time for this fuel
      */
-    public void setBurnTime(int burnTime) {
+    public void setBurnTime(final int burnTime) {
         this.burnTime = burnTime;
     }
 
@@ -68,7 +68,7 @@ public class FurnaceBurnEvent extends BlockEvent implements Cancellable {
      *
      * @param burning true if the furnace's fuel is burning
      */
-    public void setBurning(boolean burning) {
+    public void setBurning(final boolean burning) {
         this.burning = burning;
     }
     // Paper start
@@ -86,7 +86,7 @@ public class FurnaceBurnEvent extends BlockEvent implements Cancellable {
      *
      * @param consumeFuel true to consume the fuel
      */
-    public void setConsumeFuel(boolean consumeFuel) {
+    public void setConsumeFuel(final boolean consumeFuel) {
         this.consumeFuel = consumeFuel;
     }
     // Paper end
@@ -97,7 +97,7 @@ public class FurnaceBurnEvent extends BlockEvent implements Cancellable {
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.cancelled = cancel;
     }
 
diff --git a/src/main/java/org/bukkit/event/inventory/FurnaceExtractEvent.java b/src/main/java/org/bukkit/event/inventory/FurnaceExtractEvent.java
index 5b049b9dc15b185e60cbf91ab366140081868cbe..d33eeb54a43fe4683e6df679c39c25c942242e05 100644
--- a/src/main/java/org/bukkit/event/inventory/FurnaceExtractEvent.java
+++ b/src/main/java/org/bukkit/event/inventory/FurnaceExtractEvent.java
@@ -14,7 +14,7 @@ public class FurnaceExtractEvent extends BlockExpEvent {
     private final @NotNull Material itemType;
     private final int itemAmount;
 
-    public FurnaceExtractEvent(@NotNull Player player, @NotNull Block block, @NotNull Material itemType, int itemAmount, int exp) {
+    public FurnaceExtractEvent(@NotNull final Player player, @NotNull final Block block, @NotNull final Material itemType, final int itemAmount, final int exp) {
         super(block, exp);
         this.player = player;
         this.itemType = itemType;
diff --git a/src/main/java/org/bukkit/event/inventory/FurnaceSmeltEvent.java b/src/main/java/org/bukkit/event/inventory/FurnaceSmeltEvent.java
index 16b3ab8f525c4e863f804cc8460a330407d85478..abc6bfed0624257b651244cef1592b381167c09a 100644
--- a/src/main/java/org/bukkit/event/inventory/FurnaceSmeltEvent.java
+++ b/src/main/java/org/bukkit/event/inventory/FurnaceSmeltEvent.java
@@ -15,7 +15,7 @@ public class FurnaceSmeltEvent extends BlockCookEvent {
         super(furnace, source, result);
     }
     // Paper start
-    public FurnaceSmeltEvent(@NotNull final Block furnace, @NotNull final ItemStack source, @NotNull final ItemStack result, @org.jetbrains.annotations.Nullable org.bukkit.inventory.CookingRecipe<?> recipe) {
+    public FurnaceSmeltEvent(@NotNull final Block furnace, @NotNull final ItemStack source, @NotNull final ItemStack result, @org.jetbrains.annotations.Nullable final org.bukkit.inventory.CookingRecipe<?> recipe) {
         super(furnace, source, result, recipe);
     }
     // Paper end
diff --git a/src/main/java/org/bukkit/event/inventory/FurnaceStartSmeltEvent.java b/src/main/java/org/bukkit/event/inventory/FurnaceStartSmeltEvent.java
index e3c9d58e79ca2f4ee1d978d71583e51873dcf70d..07c6fa1a9eb1330fa0985b171a9a0c326e66e982 100644
--- a/src/main/java/org/bukkit/event/inventory/FurnaceStartSmeltEvent.java
+++ b/src/main/java/org/bukkit/event/inventory/FurnaceStartSmeltEvent.java
@@ -14,12 +14,12 @@ public class FurnaceStartSmeltEvent extends BlockEvent {
     private int totalCookTime;
 
     @Deprecated // Paper - furnace cook speed multiplier
-    public FurnaceStartSmeltEvent(@NotNull final Block furnace, @NotNull ItemStack source, @NotNull final CookingRecipe<?> recipe) {
+    public FurnaceStartSmeltEvent(@NotNull final Block furnace, @NotNull final ItemStack source, @NotNull final CookingRecipe<?> recipe) {
         // Paper start - furnace cook speed multiplier
         this(furnace, source, recipe, recipe.getCookingTime());
     }
 
-    public FurnaceStartSmeltEvent(@NotNull final Block furnace, @NotNull ItemStack source, @NotNull CookingRecipe<?> recipe, int cookingTime) {
+    public FurnaceStartSmeltEvent(@NotNull final Block furnace, @NotNull final ItemStack source, @NotNull final CookingRecipe<?> recipe, final int cookingTime) {
         // Paper end
         super(furnace);
         this.source = source;
@@ -61,7 +61,7 @@ public class FurnaceStartSmeltEvent extends BlockEvent {
      *
      * @param cookTime the new total cook time
      */
-    public void setTotalCookTime(int cookTime) {
+    public void setTotalCookTime(final int cookTime) {
         this.totalCookTime = cookTime;
     }
 
diff --git a/src/main/java/org/bukkit/event/inventory/InventoryClickEvent.java b/src/main/java/org/bukkit/event/inventory/InventoryClickEvent.java
index d9313b6bc0b9e2d998400d44f5cebff78382c616..3b05b6917bf3fb58eadcc30d52dfdcaba3f9e305 100644
--- a/src/main/java/org/bukkit/event/inventory/InventoryClickEvent.java
+++ b/src/main/java/org/bukkit/event/inventory/InventoryClickEvent.java
@@ -55,7 +55,7 @@ public class InventoryClickEvent extends InventoryInteractEvent {
     private @Nullable ItemStack current = null;
     private int hotbarKey = -1;
 
-    public InventoryClickEvent(@NotNull InventoryView view, @NotNull SlotType type, int slot, @NotNull ClickType click, @NotNull InventoryAction action) {
+    public InventoryClickEvent(@NotNull final InventoryView view, @NotNull final SlotType type, final int slot, @NotNull final ClickType click, @NotNull final InventoryAction action) {
         super(view);
         this.slot_type = type;
         this.rawSlot = slot;
@@ -64,7 +64,7 @@ public class InventoryClickEvent extends InventoryInteractEvent {
         this.action = action;
     }
 
-    public InventoryClickEvent(@NotNull InventoryView view, @NotNull SlotType type, int slot, @NotNull ClickType click, @NotNull InventoryAction action, int key) {
+    public InventoryClickEvent(@NotNull final InventoryView view, @NotNull final SlotType type, final int slot, @NotNull final ClickType click, @NotNull final InventoryAction action, final int key) {
         this(view, type, slot, click, action);
         this.hotbarKey = key;
     }
@@ -145,7 +145,7 @@ public class InventoryClickEvent extends InventoryInteractEvent {
      *     make unexpected changes in the behavior of the clicked Inventory.
      */
     @Deprecated
-    public void setCursor(@Nullable ItemStack stack) {
+    public void setCursor(@Nullable final ItemStack stack) {
         getView().setCursor(stack);
     }
 
@@ -154,7 +154,7 @@ public class InventoryClickEvent extends InventoryInteractEvent {
      *
      * @param stack the item to be placed in the current slot
      */
-    public void setCurrentItem(@Nullable ItemStack stack) {
+    public void setCurrentItem(@Nullable final ItemStack stack) {
         if (slot_type == SlotType.OUTSIDE) {
             current = stack;
         } else {
diff --git a/src/main/java/org/bukkit/event/inventory/InventoryCloseEvent.java b/src/main/java/org/bukkit/event/inventory/InventoryCloseEvent.java
index 148ed12fb84231da6da88ac0303f5c39b5e55b5c..e6f8554c43a746bd633bca78605d17a94b54540e 100644
--- a/src/main/java/org/bukkit/event/inventory/InventoryCloseEvent.java
+++ b/src/main/java/org/bukkit/event/inventory/InventoryCloseEvent.java
@@ -57,11 +57,11 @@ public class InventoryCloseEvent extends InventoryEvent {
         PLUGIN,
     }
 
-    public InventoryCloseEvent(@NotNull InventoryView transaction) {
+    public InventoryCloseEvent(@NotNull final InventoryView transaction) {
         this(transaction, Reason.UNKNOWN);
     }
 
-    public InventoryCloseEvent(@NotNull InventoryView transaction, @NotNull Reason reason) {
+    public InventoryCloseEvent(@NotNull final InventoryView transaction, @NotNull final Reason reason) {
         super(transaction);
         this.reason = reason;
         // Paper end
diff --git a/src/main/java/org/bukkit/event/inventory/InventoryCreativeEvent.java b/src/main/java/org/bukkit/event/inventory/InventoryCreativeEvent.java
index 9c6db8be4642b9704213b392011f56dbfc95cfb2..3c289aefdc19ed7eb50770ead022d08f82aed29d 100644
--- a/src/main/java/org/bukkit/event/inventory/InventoryCreativeEvent.java
+++ b/src/main/java/org/bukkit/event/inventory/InventoryCreativeEvent.java
@@ -13,7 +13,7 @@ import org.jetbrains.annotations.NotNull;
 public class InventoryCreativeEvent extends InventoryClickEvent {
     private ItemStack item;
 
-    public InventoryCreativeEvent(@NotNull InventoryView what, @NotNull SlotType type, int slot, @NotNull ItemStack newItem) {
+    public InventoryCreativeEvent(@NotNull final InventoryView what, @NotNull final SlotType type, final int slot, @NotNull final ItemStack newItem) {
         super(what, type, slot, ClickType.CREATIVE, InventoryAction.PLACE_ALL);
         this.item = newItem;
     }
@@ -25,7 +25,7 @@ public class InventoryCreativeEvent extends InventoryClickEvent {
     }
 
     @Override
-    public void setCursor(@NotNull ItemStack item) {
+    public void setCursor(@NotNull final ItemStack item) {
         this.item = item;
     }
 }
diff --git a/src/main/java/org/bukkit/event/inventory/InventoryDragEvent.java b/src/main/java/org/bukkit/event/inventory/InventoryDragEvent.java
index beb05575bc540ed4b921c9179a507dddae0d3922..f208c95293dd2dfb98a7639028a1114d2704a150 100644
--- a/src/main/java/org/bukkit/event/inventory/InventoryDragEvent.java
+++ b/src/main/java/org/bukkit/event/inventory/InventoryDragEvent.java
@@ -62,7 +62,7 @@ public class InventoryDragEvent extends InventoryInteractEvent {
     private final @NotNull ItemStack oldCursor;
     private @Nullable ItemStack newCursor;
 
-    public InventoryDragEvent(@NotNull InventoryView what, @Nullable ItemStack newCursor, @NotNull ItemStack oldCursor, boolean right, @NotNull Map<Integer, ItemStack> slots) {
+    public InventoryDragEvent(@NotNull final InventoryView what, @Nullable final ItemStack newCursor, @NotNull final ItemStack oldCursor, final boolean right, @NotNull final Map<Integer, ItemStack> slots) {
         super(what);
 
         Preconditions.checkArgument(oldCursor != null);
@@ -72,8 +72,8 @@ public class InventoryDragEvent extends InventoryInteractEvent {
         this.newCursor = newCursor;
         this.oldCursor = oldCursor;
         this.addedItems = slots;
-        ImmutableSet.Builder<Integer> b = ImmutableSet.builder();
-        for (Integer slot : slots.keySet()) {
+        final ImmutableSet.Builder<Integer> b = ImmutableSet.builder();
+        for (final Integer slot : slots.keySet()) {
             b.add(Integer.valueOf(what.convertSlot(slot)));
         }
         this.containerSlots = b.build();
@@ -130,7 +130,7 @@ public class InventoryDragEvent extends InventoryInteractEvent {
      *
      * @param newCursor the new cursor ItemStack
      */
-    public void setCursor(@Nullable ItemStack newCursor) {
+    public void setCursor(@Nullable final ItemStack newCursor) {
         this.newCursor = newCursor;
     }
 
diff --git a/src/main/java/org/bukkit/event/inventory/InventoryEvent.java b/src/main/java/org/bukkit/event/inventory/InventoryEvent.java
index 5d3fe64ab9c5d6a9d0525495c52b77cedcb880b0..ed92533972bb37529948474406101c4d2ae0d079 100644
--- a/src/main/java/org/bukkit/event/inventory/InventoryEvent.java
+++ b/src/main/java/org/bukkit/event/inventory/InventoryEvent.java
@@ -16,7 +16,7 @@ public class InventoryEvent extends Event {
     private static final HandlerList handlers = new HandlerList();
     protected InventoryView transaction;
 
-    public InventoryEvent(@NotNull InventoryView transaction) {
+    public InventoryEvent(@NotNull final InventoryView transaction) {
         this.transaction = transaction;
     }
 
diff --git a/src/main/java/org/bukkit/event/inventory/InventoryInteractEvent.java b/src/main/java/org/bukkit/event/inventory/InventoryInteractEvent.java
index dee4f5f7e35ae4f68f9f435a51f301818a2b9a2e..fe419390aef6468961ba52b4b9f53e6b3308d62c 100644
--- a/src/main/java/org/bukkit/event/inventory/InventoryInteractEvent.java
+++ b/src/main/java/org/bukkit/event/inventory/InventoryInteractEvent.java
@@ -12,7 +12,7 @@ import org.jetbrains.annotations.NotNull;
 public abstract class InventoryInteractEvent extends InventoryEvent implements Cancellable {
     private @NotNull Result result = Result.DEFAULT;
 
-    public InventoryInteractEvent(@NotNull InventoryView transaction) {
+    public InventoryInteractEvent(@NotNull final InventoryView transaction) {
         super(transaction);
     }
 
@@ -33,7 +33,7 @@ public abstract class InventoryInteractEvent extends InventoryEvent implements C
      * @param newResult the new {@link org.bukkit.event.Event.Result} for this event
      * @see #isCancelled()
      */
-    public void setResult(@NotNull Result newResult) {
+    public void setResult(@NotNull final Result newResult) {
         result = newResult;
     }
 
@@ -74,7 +74,7 @@ public abstract class InventoryInteractEvent extends InventoryEvent implements C
      * @param toCancel result becomes DENY if true, ALLOW if false
      */
     @Override
-    public void setCancelled(boolean toCancel) {
+    public void setCancelled(final boolean toCancel) {
         setResult(toCancel ? Result.DENY : Result.ALLOW);
     }
 
diff --git a/src/main/java/org/bukkit/event/inventory/InventoryMoveItemEvent.java b/src/main/java/org/bukkit/event/inventory/InventoryMoveItemEvent.java
index 308e664b42d413b38da72c6b9cd8f397a59cdd0c..e97b276d9feb630b2ba89504defb51c92ed21b41 100644
--- a/src/main/java/org/bukkit/event/inventory/InventoryMoveItemEvent.java
+++ b/src/main/java/org/bukkit/event/inventory/InventoryMoveItemEvent.java
@@ -71,7 +71,7 @@ public class InventoryMoveItemEvent extends Event implements Cancellable {
      *
      * @param itemStack The ItemStack
      */
-    public void setItem(@NotNull ItemStack itemStack) {
+    public void setItem(@NotNull final ItemStack itemStack) {
         Preconditions.checkArgument(itemStack != null, "ItemStack cannot be null.  Cancel the event if you want nothing to be transferred.");
         calledSetItem = true; // Paper - record this method was used for auto detection of mode
         this.itemStack = itemStack.clone();
@@ -104,7 +104,7 @@ public class InventoryMoveItemEvent extends Event implements Cancellable {
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.cancelled = cancel;
     }
 
diff --git a/src/main/java/org/bukkit/event/inventory/InventoryOpenEvent.java b/src/main/java/org/bukkit/event/inventory/InventoryOpenEvent.java
index 9013d043503d175004ad276799e5935b7fa59dc4..cac8ae52e1c0a732cf0c1ab3425ec2bc13ab2100 100644
--- a/src/main/java/org/bukkit/event/inventory/InventoryOpenEvent.java
+++ b/src/main/java/org/bukkit/event/inventory/InventoryOpenEvent.java
@@ -13,7 +13,7 @@ public class InventoryOpenEvent extends InventoryEvent implements Cancellable {
     private static final HandlerList handlers = new HandlerList();
     private boolean cancelled;
 
-    public InventoryOpenEvent(@NotNull InventoryView transaction) {
+    public InventoryOpenEvent(@NotNull final InventoryView transaction) {
         super(transaction);
         this.cancelled = false;
     }
@@ -52,7 +52,7 @@ public class InventoryOpenEvent extends InventoryEvent implements Cancellable {
      * @param cancel true if you wish to cancel this event
      */
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         cancelled = cancel;
     }
 
diff --git a/src/main/java/org/bukkit/event/inventory/InventoryPickupItemEvent.java b/src/main/java/org/bukkit/event/inventory/InventoryPickupItemEvent.java
index cd10a36b4d018760e7a0728ae7fba6016cedf39e..a2fa02a3d0a517037550559c0ccca13f25696536 100644
--- a/src/main/java/org/bukkit/event/inventory/InventoryPickupItemEvent.java
+++ b/src/main/java/org/bukkit/event/inventory/InventoryPickupItemEvent.java
@@ -48,7 +48,7 @@ public class InventoryPickupItemEvent extends Event implements Cancellable {
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.cancelled = cancel;
     }
 
diff --git a/src/main/java/org/bukkit/event/inventory/InventoryType.java b/src/main/java/org/bukkit/event/inventory/InventoryType.java
index 6ae5e2c7f0197400c333c514122d92c8d0d2cf56..5dca0d2b0419e2a72679336f0bc1b3b3c1934be6 100644
--- a/src/main/java/org/bukkit/event/inventory/InventoryType.java
+++ b/src/main/java/org/bukkit/event/inventory/InventoryType.java
@@ -157,11 +157,11 @@ public enum InventoryType {
         return defaultTitleComponent;
     }
     // Paper end
-    private InventoryType(int defaultSize, /*@NotNull*/ @NotNull String defaultTitle) {
+    private InventoryType(final int defaultSize, /*@NotNull*/ @NotNull final String defaultTitle) {
         this(defaultSize, defaultTitle, true);
     }
 
-    private InventoryType(int defaultSize, /*@NotNull*/ @NotNull String defaultTitle, boolean isCreatable) {
+    private InventoryType(final int defaultSize, /*@NotNull*/ @NotNull final String defaultTitle, final boolean isCreatable) {
         size = defaultSize;
         title = defaultTitle;
         this.isCreatable = isCreatable;
diff --git a/src/main/java/org/bukkit/event/inventory/PrepareAnvilEvent.java b/src/main/java/org/bukkit/event/inventory/PrepareAnvilEvent.java
index d2f7d0631d8001d4a7783946497e8c5b598bb408..67d8213e38ab0c9e5f8dc7ec9287e8529fd83130 100644
--- a/src/main/java/org/bukkit/event/inventory/PrepareAnvilEvent.java
+++ b/src/main/java/org/bukkit/event/inventory/PrepareAnvilEvent.java
@@ -13,7 +13,7 @@ public class PrepareAnvilEvent extends com.destroystokyo.paper.event.inventory.P
 
     // Paper - move HandlerList to PrepareInventoryResultEvent
 
-    public PrepareAnvilEvent(@NotNull InventoryView inventory, @Nullable ItemStack result) {
+    public PrepareAnvilEvent(@NotNull final InventoryView inventory, @Nullable final ItemStack result) {
         super(inventory, result);
     }
 
diff --git a/src/main/java/org/bukkit/event/inventory/PrepareItemCraftEvent.java b/src/main/java/org/bukkit/event/inventory/PrepareItemCraftEvent.java
index 82a8dda53ff613b1fd171d91d693749bb88c8d09..d8a17c63cfd0a3abbe9f39e526b73ce237ed3ed7 100644
--- a/src/main/java/org/bukkit/event/inventory/PrepareItemCraftEvent.java
+++ b/src/main/java/org/bukkit/event/inventory/PrepareItemCraftEvent.java
@@ -12,7 +12,7 @@ public class PrepareItemCraftEvent extends InventoryEvent {
     private final boolean repair;
     private final CraftingInventory matrix;
 
-    public PrepareItemCraftEvent(@NotNull CraftingInventory what, @NotNull InventoryView view, boolean isRepair) {
+    public PrepareItemCraftEvent(@NotNull final CraftingInventory what, @NotNull final InventoryView view, final boolean isRepair) {
         super(view);
         this.matrix = what;
         this.repair = isRepair;
diff --git a/src/main/java/org/bukkit/event/inventory/PrepareSmithingEvent.java b/src/main/java/org/bukkit/event/inventory/PrepareSmithingEvent.java
index 8d7924fa81e9b53514fa534f0572fd7effef73c4..ba2193924d2b865df07e37f31d866ae1e3a8d553 100644
--- a/src/main/java/org/bukkit/event/inventory/PrepareSmithingEvent.java
+++ b/src/main/java/org/bukkit/event/inventory/PrepareSmithingEvent.java
@@ -1,6 +1,5 @@
 package org.bukkit.event.inventory;
 
-import org.bukkit.event.HandlerList;
 import org.bukkit.inventory.InventoryView;
 import org.bukkit.inventory.ItemStack;
 import org.bukkit.inventory.SmithingInventory;
@@ -14,7 +13,7 @@ public class PrepareSmithingEvent extends com.destroystokyo.paper.event.inventor
 
     // Paper - move HandlerList ot PrepareInventoryResultEvent
 
-    public PrepareSmithingEvent(@NotNull InventoryView inventory, @Nullable ItemStack result) {
+    public PrepareSmithingEvent(@NotNull final InventoryView inventory, @Nullable final ItemStack result) {
         super(inventory, result);
     }
 
diff --git a/src/main/java/org/bukkit/event/inventory/SmithItemEvent.java b/src/main/java/org/bukkit/event/inventory/SmithItemEvent.java
index f8e45134cac800703062e1ac5779ec535cb95fed..ef7f73e28a255edfc122e9dc93561f3ede7c300c 100644
--- a/src/main/java/org/bukkit/event/inventory/SmithItemEvent.java
+++ b/src/main/java/org/bukkit/event/inventory/SmithItemEvent.java
@@ -9,11 +9,11 @@ import org.jetbrains.annotations.NotNull;
  */
 public class SmithItemEvent extends InventoryClickEvent {
 
-    public SmithItemEvent(@NotNull InventoryView view, @NotNull InventoryType.SlotType type, int slot, @NotNull ClickType click, @NotNull InventoryAction action) {
+    public SmithItemEvent(@NotNull final InventoryView view, @NotNull final InventoryType.SlotType type, final int slot, @NotNull final ClickType click, @NotNull final InventoryAction action) {
         super(view, type, slot, click, action);
     }
 
-    public SmithItemEvent(@NotNull InventoryView view, @NotNull InventoryType.SlotType type, int slot, @NotNull ClickType click, @NotNull InventoryAction action, int key) {
+    public SmithItemEvent(@NotNull final InventoryView view, @NotNull final InventoryType.SlotType type, final int slot, @NotNull final ClickType click, @NotNull final InventoryAction action, final int key) {
         super(view, type, slot, click, action, key);
     }
 
diff --git a/src/main/java/org/bukkit/event/inventory/TradeSelectEvent.java b/src/main/java/org/bukkit/event/inventory/TradeSelectEvent.java
index 3bddf946d52f88f281fa5da4e2b6014e5201f212..9740a5be38254bdb8599cf376a5eb6db703d43a9 100644
--- a/src/main/java/org/bukkit/event/inventory/TradeSelectEvent.java
+++ b/src/main/java/org/bukkit/event/inventory/TradeSelectEvent.java
@@ -19,7 +19,7 @@ public class TradeSelectEvent extends InventoryInteractEvent {
     //
     private final int index;
 
-    public TradeSelectEvent(@NotNull InventoryView transaction, int newIndex) {
+    public TradeSelectEvent(@NotNull final InventoryView transaction, final int newIndex) {
         super(transaction);
         this.index = newIndex;
     }
diff --git a/src/main/java/org/bukkit/event/player/AsyncPlayerChatEvent.java b/src/main/java/org/bukkit/event/player/AsyncPlayerChatEvent.java
index 8817cedbcf85bf6e428d0d9747dcaf63136dc600..aaf6ee758eff55d47409455bd88604991f19a391 100644
--- a/src/main/java/org/bukkit/event/player/AsyncPlayerChatEvent.java
+++ b/src/main/java/org/bukkit/event/player/AsyncPlayerChatEvent.java
@@ -64,7 +64,7 @@ public class AsyncPlayerChatEvent extends PlayerEvent implements Cancellable {
      *
      * @param message New message that the player will send
      */
-    public void setMessage(@NotNull String message) {
+    public void setMessage(@NotNull final String message) {
         this.message = message;
     }
 
@@ -101,7 +101,7 @@ public class AsyncPlayerChatEvent extends PlayerEvent implements Cancellable {
         // Oh for a better way to do this!
         try {
             String.format(format, player, message);
-        } catch (RuntimeException ex) {
+        } catch (final RuntimeException ex) {
             ex.fillInStackTrace();
             throw ex;
         }
@@ -133,7 +133,7 @@ public class AsyncPlayerChatEvent extends PlayerEvent implements Cancellable {
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.cancel = cancel;
     }
 
diff --git a/src/main/java/org/bukkit/event/player/AsyncPlayerPreLoginEvent.java b/src/main/java/org/bukkit/event/player/AsyncPlayerPreLoginEvent.java
index 57e0d6b737cd89414c32f5fd2f8c8bf0f0a1b647..14f752c3a72ae888b883e2709592cf9eec719d9c 100644
--- a/src/main/java/org/bukkit/event/player/AsyncPlayerPreLoginEvent.java
+++ b/src/main/java/org/bukkit/event/player/AsyncPlayerPreLoginEvent.java
@@ -47,7 +47,7 @@ public class AsyncPlayerPreLoginEvent extends Event {
     /*    * Changes the PlayerProfile the player will login as
      * @param profile The profile to use
      */
-    public void setPlayerProfile(@NotNull PlayerProfile profile) {
+    public void setPlayerProfile(@NotNull final PlayerProfile profile) {
         this.profile = profile;
     }
 
@@ -63,17 +63,17 @@ public class AsyncPlayerPreLoginEvent extends Event {
     // Paper end
 
     @Deprecated
-    public AsyncPlayerPreLoginEvent(@NotNull final String name, @NotNull final InetAddress ipAddress, @NotNull final UUID uniqueId, @NotNull PlayerProfile profile) {
+    public AsyncPlayerPreLoginEvent(@NotNull final String name, @NotNull final InetAddress ipAddress, @NotNull final UUID uniqueId, @NotNull final PlayerProfile profile) {
         this(name, ipAddress, ipAddress, uniqueId, profile);
     }
 
     @Deprecated // Paper - Add hostname
-    public AsyncPlayerPreLoginEvent(@NotNull final String name, @NotNull final InetAddress ipAddress, @NotNull final InetAddress rawAddress, @NotNull final UUID uniqueId, @NotNull PlayerProfile profile) {
+    public AsyncPlayerPreLoginEvent(@NotNull final String name, @NotNull final InetAddress ipAddress, @NotNull final InetAddress rawAddress, @NotNull final UUID uniqueId, @NotNull final PlayerProfile profile) {
         // Paper start - Add hostname
         this(name, ipAddress, rawAddress, uniqueId, profile, "");
     }
 
-    public AsyncPlayerPreLoginEvent(@NotNull final String name, @NotNull final InetAddress ipAddress, @NotNull final InetAddress rawAddress, @NotNull final UUID uniqueId, @NotNull PlayerProfile profile, @NotNull String hostname) {
+    public AsyncPlayerPreLoginEvent(@NotNull final String name, @NotNull final InetAddress ipAddress, @NotNull final InetAddress rawAddress, @NotNull final UUID uniqueId, @NotNull final PlayerProfile profile, @NotNull final String hostname) {
         // Paper end - Add hostname
         super(true);
         this.profile = profile;
diff --git a/src/main/java/org/bukkit/event/player/PlayerAdvancementDoneEvent.java b/src/main/java/org/bukkit/event/player/PlayerAdvancementDoneEvent.java
index cc7945ce671e312b0dae7f816f36b37f2dbfb55e..494f29752e9b858e29217becd5b69fa3816ea698 100644
--- a/src/main/java/org/bukkit/event/player/PlayerAdvancementDoneEvent.java
+++ b/src/main/java/org/bukkit/event/player/PlayerAdvancementDoneEvent.java
@@ -19,11 +19,11 @@ public class PlayerAdvancementDoneEvent extends PlayerEvent {
     private final @NotNull Advancement advancement;
     private @Nullable Component message; // Paper - Add Adventure message
 
-    public PlayerAdvancementDoneEvent(@NotNull Player who, @NotNull Advancement advancement) {
+    public PlayerAdvancementDoneEvent(@NotNull final Player who, @NotNull final Advancement advancement) {
         // Paper start - Add Adventure message
         this(who, advancement, null);
     }
-    public PlayerAdvancementDoneEvent(@NotNull Player who, @NotNull Advancement advancement, @Nullable Component message) {
+    public PlayerAdvancementDoneEvent(@NotNull final Player who, @NotNull final Advancement advancement, @Nullable final Component message) {
         // Paper end
         super(who);
         this.advancement = advancement;
@@ -61,7 +61,7 @@ public class PlayerAdvancementDoneEvent extends PlayerEvent {
      *
      * @param message The new message
      */
-    public void message(@Nullable Component message) {
+    public void message(@Nullable final Component message) {
         this.message = message;
     }
     // Paper end
diff --git a/src/main/java/org/bukkit/event/player/PlayerAnimationEvent.java b/src/main/java/org/bukkit/event/player/PlayerAnimationEvent.java
index 68bba0c1ab79275bdfa34d6fc95e4a6347798c9a..a3fd8976ce6ccfc166a4b0833b5ae7d122a32a24 100644
--- a/src/main/java/org/bukkit/event/player/PlayerAnimationEvent.java
+++ b/src/main/java/org/bukkit/event/player/PlayerAnimationEvent.java
@@ -46,7 +46,7 @@ public class PlayerAnimationEvent extends PlayerEvent implements Cancellable {
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.isCancelled = cancel;
     }
 
diff --git a/src/main/java/org/bukkit/event/player/PlayerArmorStandManipulateEvent.java b/src/main/java/org/bukkit/event/player/PlayerArmorStandManipulateEvent.java
index 5399293412fb419a6681821c4ae5e87f6cfd42b5..a6581f855feabc25aac1c70af88191e2425cbaf8 100644
--- a/src/main/java/org/bukkit/event/player/PlayerArmorStandManipulateEvent.java
+++ b/src/main/java/org/bukkit/event/player/PlayerArmorStandManipulateEvent.java
@@ -19,7 +19,7 @@ public class PlayerArmorStandManipulateEvent extends PlayerInteractEntityEvent {
     private final @NotNull ItemStack armorStandItem;
     private final @NotNull EquipmentSlot slot;
 
-    public PlayerArmorStandManipulateEvent(@NotNull final Player who, @NotNull final ArmorStand clickedEntity, @NotNull final ItemStack playerItem, @NotNull final ItemStack armorStandItem, @NotNull final EquipmentSlot slot, @NotNull EquipmentSlot hand) {
+    public PlayerArmorStandManipulateEvent(@NotNull final Player who, @NotNull final ArmorStand clickedEntity, @NotNull final ItemStack playerItem, @NotNull final ItemStack armorStandItem, @NotNull final EquipmentSlot slot, @NotNull final EquipmentSlot hand) {
         super(who, clickedEntity, hand);
         this.playerItem = playerItem;
         this.armorStandItem = armorStandItem;
diff --git a/src/main/java/org/bukkit/event/player/PlayerAttemptPickupItemEvent.java b/src/main/java/org/bukkit/event/player/PlayerAttemptPickupItemEvent.java
index 0788153a9641e75da565d2e6eee37eeee1cbc61e..b01efc2eb4acbd4fbed653062fb59ee1c2847ba7 100644
--- a/src/main/java/org/bukkit/event/player/PlayerAttemptPickupItemEvent.java
+++ b/src/main/java/org/bukkit/event/player/PlayerAttemptPickupItemEvent.java
@@ -52,7 +52,7 @@ public class PlayerAttemptPickupItemEvent extends PlayerEvent implements Cancell
      *
      * @param flyAtPlayer True for item to fly at player
      */
-    public void setFlyAtPlayer(boolean flyAtPlayer) {
+    public void setFlyAtPlayer(final boolean flyAtPlayer) {
         this.flyAtPlayer = flyAtPlayer;
     }
 
@@ -72,7 +72,7 @@ public class PlayerAttemptPickupItemEvent extends PlayerEvent implements Cancell
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.isCancelled = cancel;
         this.flyAtPlayer = !cancel;
     }
diff --git a/src/main/java/org/bukkit/event/player/PlayerBedEnterEvent.java b/src/main/java/org/bukkit/event/player/PlayerBedEnterEvent.java
index cef5772e0c25dce6b6a020ada1b301ed0e58936c..5141ddc0ab5b0280f541e9d2c1f89342ed835ac6 100644
--- a/src/main/java/org/bukkit/event/player/PlayerBedEnterEvent.java
+++ b/src/main/java/org/bukkit/event/player/PlayerBedEnterEvent.java
@@ -63,14 +63,14 @@ public class PlayerBedEnterEvent extends PlayerEvent implements Cancellable {
     private final @NotNull BedEnterResult bedEnterResult;
     private @NotNull Result useBed = Result.DEFAULT;
 
-    public PlayerBedEnterEvent(@NotNull Player who, @NotNull Block bed, @NotNull BedEnterResult bedEnterResult) {
+    public PlayerBedEnterEvent(@NotNull final Player who, @NotNull final Block bed, @NotNull final BedEnterResult bedEnterResult) {
         super(who);
         this.bed = bed;
         this.bedEnterResult = bedEnterResult;
     }
 
     @Deprecated
-    public PlayerBedEnterEvent(@NotNull Player who, @NotNull Block bed) {
+    public PlayerBedEnterEvent(@NotNull final Player who, @NotNull final Block bed) {
         this(who, bed, BedEnterResult.OK);
     }
 
@@ -113,7 +113,7 @@ public class PlayerBedEnterEvent extends PlayerEvent implements Cancellable {
      * @param useBed the action to take with the interacted bed
      * @see #useBed()
      */
-    public void setUseBed(@NotNull Result useBed) {
+    public void setUseBed(@NotNull final Result useBed) {
         this.useBed = useBed;
     }
 
@@ -144,7 +144,7 @@ public class PlayerBedEnterEvent extends PlayerEvent implements Cancellable {
      * @param cancel true if you wish to cancel this event
      */
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         setUseBed(cancel ? Result.DENY : useBed() == Result.DENY ? Result.DEFAULT : useBed());
     }
 
diff --git a/src/main/java/org/bukkit/event/player/PlayerBedLeaveEvent.java b/src/main/java/org/bukkit/event/player/PlayerBedLeaveEvent.java
index 8c955a0a74bcc8c67f9ac807b0a2f4c8a8135b3f..8631e92299d64c21312b86d3328c369e4e9bd27d 100644
--- a/src/main/java/org/bukkit/event/player/PlayerBedLeaveEvent.java
+++ b/src/main/java/org/bukkit/event/player/PlayerBedLeaveEvent.java
@@ -16,7 +16,7 @@ public class PlayerBedLeaveEvent extends PlayerEvent implements Cancellable {
     private boolean setBedSpawn;
     private boolean cancelled;
 
-    public PlayerBedLeaveEvent(@NotNull final Player who, @NotNull final Block bed, boolean setBedSpawn) {
+    public PlayerBedLeaveEvent(@NotNull final Player who, @NotNull final Block bed, final boolean setBedSpawn) {
         super(who);
         this.bed = bed;
         this.setBedSpawn = setBedSpawn;
@@ -60,7 +60,7 @@ public class PlayerBedLeaveEvent extends PlayerEvent implements Cancellable {
      *
      * @param setBedSpawn true to change the new spawn location
      */
-    public void setSpawnLocation(boolean setBedSpawn) {
+    public void setSpawnLocation(final boolean setBedSpawn) {
         this.setBedSpawn = setBedSpawn;
     }
 
@@ -70,7 +70,7 @@ public class PlayerBedLeaveEvent extends PlayerEvent implements Cancellable {
     }
 
     @Override
-    public void setCancelled(boolean cancelled) {
+    public void setCancelled(final boolean cancelled) {
         this.cancelled = cancelled;
     }
 
diff --git a/src/main/java/org/bukkit/event/player/PlayerBucketEntityEvent.java b/src/main/java/org/bukkit/event/player/PlayerBucketEntityEvent.java
index 7d13f37713433cf22c3ddf227db91d65c2de9b71..41e1a9adab8900f8a7731f0fa8705cc0f7e7371d 100644
--- a/src/main/java/org/bukkit/event/player/PlayerBucketEntityEvent.java
+++ b/src/main/java/org/bukkit/event/player/PlayerBucketEntityEvent.java
@@ -21,7 +21,7 @@ public class PlayerBucketEntityEvent extends PlayerEvent implements Cancellable
     private final @NotNull ItemStack entityBucket;
     private final @NotNull EquipmentSlot hand;
 
-    public PlayerBucketEntityEvent(@NotNull Player player, @NotNull Entity entity, @NotNull ItemStack originalBucket, @NotNull ItemStack entityBucket, @NotNull EquipmentSlot hand) {
+    public PlayerBucketEntityEvent(@NotNull final Player player, @NotNull final Entity entity, @NotNull final ItemStack originalBucket, @NotNull final ItemStack entityBucket, @NotNull final EquipmentSlot hand) {
         super(player);
         this.entity = entity;
         this.originalBucket = originalBucket;
@@ -80,7 +80,7 @@ public class PlayerBucketEntityEvent extends PlayerEvent implements Cancellable
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.cancelled = cancel;
     }
 
diff --git a/src/main/java/org/bukkit/event/player/PlayerBucketEvent.java b/src/main/java/org/bukkit/event/player/PlayerBucketEvent.java
index 971863637a7ded4ce91822c1d5c415f96a353b44..4cc9e5a7117a418edb455d37d8821a51d478bf8a 100644
--- a/src/main/java/org/bukkit/event/player/PlayerBucketEvent.java
+++ b/src/main/java/org/bukkit/event/player/PlayerBucketEvent.java
@@ -67,7 +67,7 @@ public abstract class PlayerBucketEvent extends PlayerEvent implements Cancellab
      *
      * @param itemStack the new held ItemStack after the bucket event.
      */
-    public void setItemStack(@Nullable ItemStack itemStack) {
+    public void setItemStack(@Nullable final ItemStack itemStack) {
         this.itemStack = itemStack;
     }
 
@@ -117,7 +117,7 @@ public abstract class PlayerBucketEvent extends PlayerEvent implements Cancellab
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.cancelled = cancel;
     }
 }
diff --git a/src/main/java/org/bukkit/event/player/PlayerBucketFishEvent.java b/src/main/java/org/bukkit/event/player/PlayerBucketFishEvent.java
index 5f1fbb82d41714b6cb1b8c1bdee3ae44ebfa9094..455a9f74f71d539ec3fc06fd0e79ad57d850f64d 100644
--- a/src/main/java/org/bukkit/event/player/PlayerBucketFishEvent.java
+++ b/src/main/java/org/bukkit/event/player/PlayerBucketFishEvent.java
@@ -17,7 +17,7 @@ import org.jetbrains.annotations.NotNull;
 @Warning(false)
 public class PlayerBucketFishEvent extends PlayerBucketEntityEvent {
 
-    public PlayerBucketFishEvent(@NotNull Player player, @NotNull Fish fish, @NotNull ItemStack waterBucket, @NotNull ItemStack fishBucket, @NotNull EquipmentSlot hand) {
+    public PlayerBucketFishEvent(@NotNull final Player player, @NotNull final Fish fish, @NotNull final ItemStack waterBucket, @NotNull final ItemStack fishBucket, @NotNull final EquipmentSlot hand) {
         super(player, fish, waterBucket, fishBucket, hand);
     }
 
diff --git a/src/main/java/org/bukkit/event/player/PlayerChangedMainHandEvent.java b/src/main/java/org/bukkit/event/player/PlayerChangedMainHandEvent.java
index 3bf0963aeea1e19f922804dd7573c948d0c93517..d56b74bcd6dd4633cda96ca8ba8b1aa270d4e6a7 100644
--- a/src/main/java/org/bukkit/event/player/PlayerChangedMainHandEvent.java
+++ b/src/main/java/org/bukkit/event/player/PlayerChangedMainHandEvent.java
@@ -14,7 +14,7 @@ public class PlayerChangedMainHandEvent extends PlayerEvent {
     //
     private final @NotNull MainHand mainHand;
 
-    public PlayerChangedMainHandEvent(@NotNull Player who, @NotNull MainHand mainHand) {
+    public PlayerChangedMainHandEvent(@NotNull final Player who, @NotNull final MainHand mainHand) {
         super(who);
         this.mainHand = mainHand;
     }
diff --git a/src/main/java/org/bukkit/event/player/PlayerChatEvent.java b/src/main/java/org/bukkit/event/player/PlayerChatEvent.java
index 379660a677a55b4dbc014641f6554f20e59fce7f..316dd5bf03bb0e24dc364be3a21ea4cf54257349 100644
--- a/src/main/java/org/bukkit/event/player/PlayerChatEvent.java
+++ b/src/main/java/org/bukkit/event/player/PlayerChatEvent.java
@@ -49,7 +49,7 @@ public class PlayerChatEvent extends PlayerEvent implements Cancellable {
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.cancel = cancel;
     }
 
@@ -68,7 +68,7 @@ public class PlayerChatEvent extends PlayerEvent implements Cancellable {
      *
      * @param message New message that the player will send
      */
-    public void setMessage(@NotNull String message) {
+    public void setMessage(@NotNull final String message) {
         this.message = message;
     }
 
@@ -102,7 +102,7 @@ public class PlayerChatEvent extends PlayerEvent implements Cancellable {
         // Oh for a better way to do this!
         try {
             String.format(format, player, message);
-        } catch (RuntimeException ex) {
+        } catch (final RuntimeException ex) {
             ex.fillInStackTrace();
             throw ex;
         }
diff --git a/src/main/java/org/bukkit/event/player/PlayerChatTabCompleteEvent.java b/src/main/java/org/bukkit/event/player/PlayerChatTabCompleteEvent.java
index 9c6a4d2a9d36df9352e4de0afb039dc5560eb111..da81401b1439fb52fd805e34b9b20af74542e5db 100644
--- a/src/main/java/org/bukkit/event/player/PlayerChatTabCompleteEvent.java
+++ b/src/main/java/org/bukkit/event/player/PlayerChatTabCompleteEvent.java
@@ -25,7 +25,7 @@ public class PlayerChatTabCompleteEvent extends PlayerEvent {
         Preconditions.checkArgument(message != null, "Message cannot be null");
         Preconditions.checkArgument(completions != null, "Completions cannot be null");
         this.message = message;
-        int i = message.lastIndexOf(' ');
+        final int i = message.lastIndexOf(' ');
         if (i < 0) {
             this.lastToken = message;
         } else {
diff --git a/src/main/java/org/bukkit/event/player/PlayerCommandPreprocessEvent.java b/src/main/java/org/bukkit/event/player/PlayerCommandPreprocessEvent.java
index 5c138d73d077e7bedf611947a003d93e3db9fbf9..4355066e2c97479a7776a549550892fe0ba10cc3 100644
--- a/src/main/java/org/bukkit/event/player/PlayerCommandPreprocessEvent.java
+++ b/src/main/java/org/bukkit/event/player/PlayerCommandPreprocessEvent.java
@@ -69,7 +69,7 @@ public class PlayerCommandPreprocessEvent extends PlayerEvent implements Cancell
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.cancel = cancel;
     }
 
@@ -95,7 +95,7 @@ public class PlayerCommandPreprocessEvent extends PlayerEvent implements Cancell
      * @param command New message that the player will send
      * @throws IllegalArgumentException if command is null or empty
      */
-    public void setMessage(@NotNull String command) throws IllegalArgumentException {
+    public void setMessage(@NotNull final String command) throws IllegalArgumentException {
         Preconditions.checkArgument(command != null, "Command cannot be null");
         Preconditions.checkArgument(!command.isEmpty(), "Command cannot be empty");
         this.message = command;
diff --git a/src/main/java/org/bukkit/event/player/PlayerDropItemEvent.java b/src/main/java/org/bukkit/event/player/PlayerDropItemEvent.java
index 2d92f923732d78df89219c90a63645da9386b173..a448c613407fe5cf6b0c23ef7d88651ef1e1ea60 100644
--- a/src/main/java/org/bukkit/event/player/PlayerDropItemEvent.java
+++ b/src/main/java/org/bukkit/event/player/PlayerDropItemEvent.java
@@ -35,7 +35,7 @@ public class PlayerDropItemEvent extends PlayerEvent implements Cancellable {
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.cancel = cancel;
     }
 
diff --git a/src/main/java/org/bukkit/event/player/PlayerEditBookEvent.java b/src/main/java/org/bukkit/event/player/PlayerEditBookEvent.java
index 6fd6d6382ee4af1aa5db30521fab1de027dbcaa1..1049e9bc8ab76d9f42a847526e32da2c63effe8a 100644
--- a/src/main/java/org/bukkit/event/player/PlayerEditBookEvent.java
+++ b/src/main/java/org/bukkit/event/player/PlayerEditBookEvent.java
@@ -21,7 +21,7 @@ public class PlayerEditBookEvent extends PlayerEvent implements Cancellable {
     private boolean isSigning;
     private boolean cancel;
 
-    public PlayerEditBookEvent(@NotNull Player who, int slot, @NotNull BookMeta previousBookMeta, @NotNull BookMeta newBookMeta, boolean isSigning) {
+    public PlayerEditBookEvent(@NotNull final Player who, final int slot, @NotNull final BookMeta previousBookMeta, @NotNull final BookMeta newBookMeta, final boolean isSigning) {
         super(who);
 
         Preconditions.checkArgument(slot >= -1 && slot <= 8, "Slot must be in range (-1)-8 inclusive");
@@ -85,7 +85,7 @@ public class PlayerEditBookEvent extends PlayerEvent implements Cancellable {
      * @param newBookMeta new book meta
      * @throws IllegalArgumentException if the new book meta is null
      */
-    public void setNewBookMeta(@NotNull BookMeta newBookMeta) throws IllegalArgumentException {
+    public void setNewBookMeta(@NotNull final BookMeta newBookMeta) throws IllegalArgumentException {
         Preconditions.checkArgument(newBookMeta != null, "New book meta must not be null");
         Bukkit.getItemFactory().equals(newBookMeta, null);
         this.newBookMeta = newBookMeta.clone();
@@ -107,7 +107,7 @@ public class PlayerEditBookEvent extends PlayerEvent implements Cancellable {
      *
      * @param signing whether or not the book is being signed.
      */
-    public void setSigning(boolean signing) {
+    public void setSigning(final boolean signing) {
         isSigning = signing;
     }
 
@@ -128,7 +128,7 @@ public class PlayerEditBookEvent extends PlayerEvent implements Cancellable {
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.cancel = cancel;
     }
 }
diff --git a/src/main/java/org/bukkit/event/player/PlayerEggThrowEvent.java b/src/main/java/org/bukkit/event/player/PlayerEggThrowEvent.java
index 974ec7d921cac4934d30f59a8f88d79ab113f757..4f1343c2470f75e10f47af1cfaaf8704a0389d5c 100644
--- a/src/main/java/org/bukkit/event/player/PlayerEggThrowEvent.java
+++ b/src/main/java/org/bukkit/event/player/PlayerEggThrowEvent.java
@@ -50,7 +50,7 @@ public class PlayerEggThrowEvent extends PlayerEvent {
      * @param hatching true if you want the egg to hatch, false if you want it
      *     not to
      */
-    public void setHatching(boolean hatching) {
+    public void setHatching(final boolean hatching) {
         this.hatching = hatching;
     }
 
@@ -69,7 +69,7 @@ public class PlayerEggThrowEvent extends PlayerEvent {
      *
      * @param hatchType The type of the mob being hatched by the egg
      */
-    public void setHatchingType(@NotNull EntityType hatchType) {
+    public void setHatchingType(@NotNull final EntityType hatchType) {
         if (!hatchType.isSpawnable()) throw new IllegalArgumentException("Can't spawn that entity type from an egg!");
         this.hatchType = hatchType;
     }
@@ -97,7 +97,7 @@ public class PlayerEggThrowEvent extends PlayerEvent {
      *
      * @param numHatches The number of mobs coming out of the egg
      */
-    public void setNumHatches(byte numHatches) {
+    public void setNumHatches(final byte numHatches) {
         this.numHatches = numHatches;
     }
 
diff --git a/src/main/java/org/bukkit/event/player/PlayerEvent.java b/src/main/java/org/bukkit/event/player/PlayerEvent.java
index f6d3b817de3001f04ea4554c7c39a1290af3fd6d..61f09b76748060b439cfe91aca5da9fa3c784e33 100644
--- a/src/main/java/org/bukkit/event/player/PlayerEvent.java
+++ b/src/main/java/org/bukkit/event/player/PlayerEvent.java
@@ -14,7 +14,7 @@ public abstract class PlayerEvent extends Event {
         player = who;
     }
 
-    public PlayerEvent(@NotNull final Player who, boolean async) { // Paper - public
+    public PlayerEvent(@NotNull final Player who, final boolean async) { // Paper - public
         super(async);
         player = who;
 
diff --git a/src/main/java/org/bukkit/event/player/PlayerExpChangeEvent.java b/src/main/java/org/bukkit/event/player/PlayerExpChangeEvent.java
index 7c340f539c31a431d7d9204a8135e0bfc31863a8..fbc65f0354e32d9d29ed48bcc2ff3b174659e708 100644
--- a/src/main/java/org/bukkit/event/player/PlayerExpChangeEvent.java
+++ b/src/main/java/org/bukkit/event/player/PlayerExpChangeEvent.java
@@ -52,7 +52,7 @@ public class PlayerExpChangeEvent extends PlayerEvent {
      *
      * @param amount The amount of experience to set
      */
-    public void setAmount(int amount) {
+    public void setAmount(final int amount) {
         exp = amount;
     }
 
diff --git a/src/main/java/org/bukkit/event/player/PlayerFishEvent.java b/src/main/java/org/bukkit/event/player/PlayerFishEvent.java
index d64ec1283923dd4de8fda2b2dbf1c9e815acbf63..51806853b2891809a9ee4a2805f13d90e34cc4d4 100644
--- a/src/main/java/org/bukkit/event/player/PlayerFishEvent.java
+++ b/src/main/java/org/bukkit/event/player/PlayerFishEvent.java
@@ -21,7 +21,7 @@ public class PlayerFishEvent extends PlayerEvent implements Cancellable {
     private final @NotNull FishHook hookEntity;
     private final @Nullable EquipmentSlot hand;
 
-    public PlayerFishEvent(@NotNull final Player player, @Nullable final Entity entity, @NotNull final FishHook hookEntity, @Nullable EquipmentSlot hand, @NotNull final State state) {
+    public PlayerFishEvent(@NotNull final Player player, @Nullable final Entity entity, @NotNull final FishHook hookEntity, @Nullable final EquipmentSlot hand, @NotNull final State state) {
         super(player);
         this.entity = entity;
         this.hookEntity = hookEntity;
@@ -63,7 +63,7 @@ public class PlayerFishEvent extends PlayerEvent implements Cancellable {
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.cancel = cancel;
     }
 
@@ -87,7 +87,7 @@ public class PlayerFishEvent extends PlayerEvent implements Cancellable {
      *
      * @param amount the amount of experience to drop
      */
-    public void setExpToDrop(int amount) {
+    public void setExpToDrop(final int amount) {
         exp = amount;
     }
 
diff --git a/src/main/java/org/bukkit/event/player/PlayerGameModeChangeEvent.java b/src/main/java/org/bukkit/event/player/PlayerGameModeChangeEvent.java
index 7ead401151856744fbfa622441167836412cfd53..aba9b7cad834699fccac208e6c239cb975eb207f 100644
--- a/src/main/java/org/bukkit/event/player/PlayerGameModeChangeEvent.java
+++ b/src/main/java/org/bukkit/event/player/PlayerGameModeChangeEvent.java
@@ -30,7 +30,7 @@ public class PlayerGameModeChangeEvent extends PlayerEvent implements Cancellabl
         this(player, newGameMode, Cause.UNKNOWN, null);
     }
 
-    public PlayerGameModeChangeEvent(@NotNull final Player player, @NotNull final GameMode newGameMode, @NotNull Cause cause, @org.jetbrains.annotations.Nullable net.kyori.adventure.text.Component cancelMessage) {
+    public PlayerGameModeChangeEvent(@NotNull final Player player, @NotNull final GameMode newGameMode, @NotNull final Cause cause, @org.jetbrains.annotations.Nullable final net.kyori.adventure.text.Component cancelMessage) {
         // Paper end
         super(player);
         this.newGameMode = newGameMode;
@@ -44,7 +44,7 @@ public class PlayerGameModeChangeEvent extends PlayerEvent implements Cancellabl
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.cancelled = cancel;
     }
 
@@ -102,7 +102,7 @@ public class PlayerGameModeChangeEvent extends PlayerEvent implements Cancellabl
      *
      * @param message the error message shown to the command user, null to show no message.
      */
-    public void cancelMessage(@org.jetbrains.annotations.Nullable net.kyori.adventure.text.Component message) {
+    public void cancelMessage(@org.jetbrains.annotations.Nullable final net.kyori.adventure.text.Component message) {
         this.cancelMessage = message;
     }
 
diff --git a/src/main/java/org/bukkit/event/player/PlayerHarvestBlockEvent.java b/src/main/java/org/bukkit/event/player/PlayerHarvestBlockEvent.java
index 77bbe79ba674e43ed2dbb31d55cc0ece9d3810af..68f42cdd64669df3b10503f260d4a985ba1c36ec 100644
--- a/src/main/java/org/bukkit/event/player/PlayerHarvestBlockEvent.java
+++ b/src/main/java/org/bukkit/event/player/PlayerHarvestBlockEvent.java
@@ -27,7 +27,7 @@ public class PlayerHarvestBlockEvent extends PlayerEvent implements Cancellable
     private final @NotNull EquipmentSlot hand;
     private final @NotNull List<ItemStack> itemsHarvested;
 
-    public PlayerHarvestBlockEvent(@NotNull Player player, @NotNull Block harvestedBlock, @NotNull EquipmentSlot hand, @NotNull List<ItemStack> itemsHarvested) {
+    public PlayerHarvestBlockEvent(@NotNull final Player player, @NotNull final Block harvestedBlock, @NotNull final EquipmentSlot hand, @NotNull final List<ItemStack> itemsHarvested) {
         super(player);
         this.harvestedBlock = harvestedBlock;
         this.hand = hand;
@@ -35,7 +35,7 @@ public class PlayerHarvestBlockEvent extends PlayerEvent implements Cancellable
     }
 
     @Deprecated
-    public PlayerHarvestBlockEvent(@NotNull Player player, @NotNull Block harvestedBlock, @NotNull List<ItemStack> itemsHarvested) {
+    public PlayerHarvestBlockEvent(@NotNull final Player player, @NotNull final Block harvestedBlock, @NotNull final List<ItemStack> itemsHarvested) {
         this(player, harvestedBlock, EquipmentSlot.HAND, itemsHarvested);
     }
 
@@ -75,7 +75,7 @@ public class PlayerHarvestBlockEvent extends PlayerEvent implements Cancellable
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.cancel = cancel;
     }
 
diff --git a/src/main/java/org/bukkit/event/player/PlayerHideEntityEvent.java b/src/main/java/org/bukkit/event/player/PlayerHideEntityEvent.java
index e702a6811ec9e7fa2a5b7a1d0139b2173a4c9944..e3277fcb4ee50314334a618fa5b97c884107e800 100644
--- a/src/main/java/org/bukkit/event/player/PlayerHideEntityEvent.java
+++ b/src/main/java/org/bukkit/event/player/PlayerHideEntityEvent.java
@@ -23,7 +23,7 @@ public class PlayerHideEntityEvent extends PlayerEvent {
     private static final HandlerList handlers = new HandlerList();
     private final @NotNull Entity entity;
 
-    public PlayerHideEntityEvent(@NotNull Player who, @NotNull Entity entity) {
+    public PlayerHideEntityEvent(@NotNull final Player who, @NotNull final Entity entity) {
         super(who);
         this.entity = entity;
     }
diff --git a/src/main/java/org/bukkit/event/player/PlayerInteractAtEntityEvent.java b/src/main/java/org/bukkit/event/player/PlayerInteractAtEntityEvent.java
index 7726278490291418d37b67ee4ad65df2e9b3d436..63c76f821f9ffebd7283b664ccfa320ba2734ace 100644
--- a/src/main/java/org/bukkit/event/player/PlayerInteractAtEntityEvent.java
+++ b/src/main/java/org/bukkit/event/player/PlayerInteractAtEntityEvent.java
@@ -21,11 +21,11 @@ public class PlayerInteractAtEntityEvent extends PlayerInteractEntityEvent {
     private static final HandlerList handlers = new HandlerList();
     private final @NotNull Vector position;
 
-    public PlayerInteractAtEntityEvent(@NotNull Player who, @NotNull Entity clickedEntity, @NotNull Vector position) {
+    public PlayerInteractAtEntityEvent(@NotNull final Player who, @NotNull final Entity clickedEntity, @NotNull final Vector position) {
         this(who, clickedEntity, position, EquipmentSlot.HAND);
     }
 
-    public PlayerInteractAtEntityEvent(@NotNull Player who, @NotNull Entity clickedEntity, @NotNull Vector position, @NotNull EquipmentSlot hand) {
+    public PlayerInteractAtEntityEvent(@NotNull final Player who, @NotNull final Entity clickedEntity, @NotNull final Vector position, @NotNull final EquipmentSlot hand) {
         super(who, clickedEntity, hand);
         this.position = position;
     }
diff --git a/src/main/java/org/bukkit/event/player/PlayerInteractEntityEvent.java b/src/main/java/org/bukkit/event/player/PlayerInteractEntityEvent.java
index b3809f051ae86816440fec353b54b72c78b09ab8..0dbb745486aef7fe659e122b99e3b0a6c520533c 100644
--- a/src/main/java/org/bukkit/event/player/PlayerInteractEntityEvent.java
+++ b/src/main/java/org/bukkit/event/player/PlayerInteractEntityEvent.java
@@ -32,7 +32,7 @@ public class PlayerInteractEntityEvent extends PlayerEvent implements Cancellabl
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.cancelled = cancel;
     }
 
diff --git a/src/main/java/org/bukkit/event/player/PlayerInteractEvent.java b/src/main/java/org/bukkit/event/player/PlayerInteractEvent.java
index ffcd0a013b0c9fe129b7064c5869f017ae0e7c1b..30f01ba485d7b7cf8d3442f98f3c62ca71966abe 100644
--- a/src/main/java/org/bukkit/event/player/PlayerInteractEvent.java
+++ b/src/main/java/org/bukkit/event/player/PlayerInteractEvent.java
@@ -98,7 +98,7 @@ public class PlayerInteractEvent extends PlayerEvent implements Cancellable {
      * @param cancel true if you wish to cancel this event
      */
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         setUseInteractedBlock(cancel ? Result.DENY : useInteractedBlock() == Result.DENY ? Result.DEFAULT : useInteractedBlock());
         setUseItemInHand(cancel ? Result.DENY : useItemInHand() == Result.DENY ? Result.DEFAULT : useItemInHand());
     }
@@ -195,7 +195,7 @@ public class PlayerInteractEvent extends PlayerEvent implements Cancellable {
     /**
      * @param useInteractedBlock the action to take with the interacted block
      */
-    public void setUseInteractedBlock(@NotNull Result useInteractedBlock) {
+    public void setUseInteractedBlock(@NotNull final Result useInteractedBlock) {
         this.useClickedBlock = useInteractedBlock;
     }
 
@@ -215,7 +215,7 @@ public class PlayerInteractEvent extends PlayerEvent implements Cancellable {
     /**
      * @param useItemInHand the action to take with the item in hand
      */
-    public void setUseItemInHand(@NotNull Result useItemInHand) {
+    public void setUseItemInHand(@NotNull final Result useItemInHand) {
         this.useItemInHand = useItemInHand;
     }
 
diff --git a/src/main/java/org/bukkit/event/player/PlayerItemConsumeEvent.java b/src/main/java/org/bukkit/event/player/PlayerItemConsumeEvent.java
index eb0934fe02c7974b5cd339e98c2ae0d7bc81b945..5ca9d884038f2942bdf595614fee92cb741eb528 100644
--- a/src/main/java/org/bukkit/event/player/PlayerItemConsumeEvent.java
+++ b/src/main/java/org/bukkit/event/player/PlayerItemConsumeEvent.java
@@ -65,7 +65,7 @@ public class PlayerItemConsumeEvent extends PlayerEvent implements Cancellable {
      *
      * @param item the item being consumed
      */
-    public void setItem(@Nullable ItemStack item) {
+    public void setItem(@Nullable final ItemStack item) {
         if (item == null) {
             this.item = new ItemStack(Material.AIR);
         } else {
@@ -101,7 +101,7 @@ public class PlayerItemConsumeEvent extends PlayerEvent implements Cancellable {
      *
      * @param replacement Replacement item to set, null to clear any custom stack and use default
      */
-    public void setReplacement(@Nullable ItemStack replacement) {
+    public void setReplacement(@Nullable final ItemStack replacement) {
         this.replacement = replacement;
     }
     // Paper end
@@ -112,7 +112,7 @@ public class PlayerItemConsumeEvent extends PlayerEvent implements Cancellable {
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.isCancelled = cancel;
     }
 
diff --git a/src/main/java/org/bukkit/event/player/PlayerItemDamageEvent.java b/src/main/java/org/bukkit/event/player/PlayerItemDamageEvent.java
index ee3cbe6e0aed67958c77a418c5157f268acdd64b..cd15b8aafdeb58a534e5e9ffa7b3068a21f07077 100644
--- a/src/main/java/org/bukkit/event/player/PlayerItemDamageEvent.java
+++ b/src/main/java/org/bukkit/event/player/PlayerItemDamageEvent.java
@@ -19,12 +19,12 @@ public class PlayerItemDamageEvent extends PlayerEvent implements Cancellable {
     private boolean cancelled = false;
 
     @Deprecated // Paper - Add pre-reduction damage
-    public PlayerItemDamageEvent(@NotNull Player player, @NotNull ItemStack what, int damage) {
+    public PlayerItemDamageEvent(@NotNull final Player player, @NotNull final ItemStack what, final int damage) {
         // Paper start - Add pre-reduction damage
         this(player, what, damage, damage);
     }
 
-    public PlayerItemDamageEvent(@NotNull Player player, @NotNull ItemStack what, int damage, int originalDamage) {
+    public PlayerItemDamageEvent(@NotNull final Player player, @NotNull final ItemStack what, final int damage, final int originalDamage) {
         super(player);
         this.item = what;
         this.damage = damage;
@@ -64,7 +64,7 @@ public class PlayerItemDamageEvent extends PlayerEvent implements Cancellable {
     }
     // Paper end
 
-    public void setDamage(int damage) {
+    public void setDamage(final int damage) {
         this.damage = damage;
     }
 
@@ -74,7 +74,7 @@ public class PlayerItemDamageEvent extends PlayerEvent implements Cancellable {
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.cancelled = cancel;
     }
 
diff --git a/src/main/java/org/bukkit/event/player/PlayerItemHeldEvent.java b/src/main/java/org/bukkit/event/player/PlayerItemHeldEvent.java
index 39048573a532e09faa28e223000fd2fec4d41138..496ca948d5f390e017a61f31d93de6bc1d5d365e 100644
--- a/src/main/java/org/bukkit/event/player/PlayerItemHeldEvent.java
+++ b/src/main/java/org/bukkit/event/player/PlayerItemHeldEvent.java
@@ -44,7 +44,7 @@ public class PlayerItemHeldEvent extends PlayerEvent implements Cancellable {
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.cancel = cancel;
     }
 
diff --git a/src/main/java/org/bukkit/event/player/PlayerItemMendEvent.java b/src/main/java/org/bukkit/event/player/PlayerItemMendEvent.java
index 1f3b1b2a62bacee40b6970b72f653b01102a4792..b60d83bcad2193d74d7b35d85478c818fe94fb48 100644
--- a/src/main/java/org/bukkit/event/player/PlayerItemMendEvent.java
+++ b/src/main/java/org/bukkit/event/player/PlayerItemMendEvent.java
@@ -24,7 +24,7 @@ public class PlayerItemMendEvent extends PlayerEvent implements Cancellable {
     private int repairAmount;
     private boolean cancelled;
 
-    public PlayerItemMendEvent(@NotNull Player who, @NotNull ItemStack item, @NotNull EquipmentSlot slot, @NotNull ExperienceOrb experienceOrb, int repairAmount) {
+    public PlayerItemMendEvent(@NotNull final Player who, @NotNull final ItemStack item, @NotNull final EquipmentSlot slot, @NotNull final ExperienceOrb experienceOrb, final int repairAmount) {
         super(who);
         this.item = item;
         this.slot = slot;
@@ -33,7 +33,7 @@ public class PlayerItemMendEvent extends PlayerEvent implements Cancellable {
     }
 
     @Deprecated
-    public PlayerItemMendEvent(@NotNull Player who, @NotNull ItemStack item, @NotNull ExperienceOrb experienceOrb, int repairAmount) {
+    public PlayerItemMendEvent(@NotNull final Player who, @NotNull final ItemStack item, @NotNull final ExperienceOrb experienceOrb, final int repairAmount) {
         this(who, item, null, experienceOrb, repairAmount);
     }
 
@@ -89,7 +89,7 @@ public class PlayerItemMendEvent extends PlayerEvent implements Cancellable {
      *
      * @param amount how much damage will be repaired on the item
      */
-    public void setRepairAmount(int amount) {
+    public void setRepairAmount(final int amount) {
         this.repairAmount = amount;
     }
 
@@ -99,7 +99,7 @@ public class PlayerItemMendEvent extends PlayerEvent implements Cancellable {
     }
 
     @Override
-    public void setCancelled(boolean cancelled) {
+    public void setCancelled(final boolean cancelled) {
         this.cancelled = cancelled;
     }
 
diff --git a/src/main/java/org/bukkit/event/player/PlayerJoinEvent.java b/src/main/java/org/bukkit/event/player/PlayerJoinEvent.java
index 81e0f2127787fab3318c8751a6ac198d1e764fad..aad03552c93796a81217e9c66eb45732f969ee0c 100644
--- a/src/main/java/org/bukkit/event/player/PlayerJoinEvent.java
+++ b/src/main/java/org/bukkit/event/player/PlayerJoinEvent.java
@@ -38,7 +38,7 @@ public class PlayerJoinEvent extends PlayerEvent {
      *
      * @param joinMessage join message. If null, no message will be sent
      */
-    public void joinMessage(@Nullable net.kyori.adventure.text.Component joinMessage) {
+    public void joinMessage(@Nullable final net.kyori.adventure.text.Component joinMessage) {
         this.joinMessage = joinMessage;
     }
     // Paper end
@@ -62,7 +62,7 @@ public class PlayerJoinEvent extends PlayerEvent {
      * @deprecated in favour of {@link #joinMessage(net.kyori.adventure.text.Component)}
      */
     @Deprecated // Paper
-    public void setJoinMessage(@Nullable String joinMessage) {
+    public void setJoinMessage(@Nullable final String joinMessage) {
         this.joinMessage = joinMessage != null ? net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().deserialize(joinMessage) : null; // Paper
     }
 
diff --git a/src/main/java/org/bukkit/event/player/PlayerKickEvent.java b/src/main/java/org/bukkit/event/player/PlayerKickEvent.java
index c1ce175905986c2a978a9ef406d718cd388a311e..1ef4207798a4b88a1ec20d054aed0c79f9cecab6 100644
--- a/src/main/java/org/bukkit/event/player/PlayerKickEvent.java
+++ b/src/main/java/org/bukkit/event/player/PlayerKickEvent.java
@@ -55,7 +55,7 @@ public class PlayerKickEvent extends PlayerEvent implements Cancellable {
      *
      * @param leaveMessage leave message
      */
-    public void leaveMessage(@NotNull net.kyori.adventure.text.Component leaveMessage) {
+    public void leaveMessage(@NotNull final net.kyori.adventure.text.Component leaveMessage) {
         this.leaveMessage = leaveMessage;
     }
 
@@ -73,7 +73,7 @@ public class PlayerKickEvent extends PlayerEvent implements Cancellable {
      *
      * @param kickReason kick reason
      */
-    public void reason(@NotNull net.kyori.adventure.text.Component kickReason) {
+    public void reason(@NotNull final net.kyori.adventure.text.Component kickReason) {
         this.kickReason = kickReason;
     }
     // Paper end
@@ -108,7 +108,7 @@ public class PlayerKickEvent extends PlayerEvent implements Cancellable {
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.cancel = cancel;
     }
 
@@ -119,7 +119,7 @@ public class PlayerKickEvent extends PlayerEvent implements Cancellable {
      * @deprecated in favour of {@link #reason(net.kyori.adventure.text.Component)}
      */
     @Deprecated // Paper
-    public void setReason(@NotNull String kickReason) {
+    public void setReason(@NotNull final String kickReason) {
         this.kickReason = net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().deserialize(kickReason); // Paper
     }
 
@@ -130,7 +130,7 @@ public class PlayerKickEvent extends PlayerEvent implements Cancellable {
      * @deprecated in favour of {@link #leaveMessage(net.kyori.adventure.text.Component)}
      */
     @Deprecated // Paper
-    public void setLeaveMessage(@NotNull String leaveMessage) {
+    public void setLeaveMessage(@NotNull final String leaveMessage) {
         this.leaveMessage = net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().deserialize(leaveMessage); // Paper
     }
 
diff --git a/src/main/java/org/bukkit/event/player/PlayerLocaleChangeEvent.java b/src/main/java/org/bukkit/event/player/PlayerLocaleChangeEvent.java
index b65c7eb44c176c88469cc44831a5892523061f68..49285ed60ae4239310abd7112c1ab63b1536dd46 100644
--- a/src/main/java/org/bukkit/event/player/PlayerLocaleChangeEvent.java
+++ b/src/main/java/org/bukkit/event/player/PlayerLocaleChangeEvent.java
@@ -26,7 +26,7 @@ public class PlayerLocaleChangeEvent extends PlayerEvent {
     }
     // Paper end
 
-    public PlayerLocaleChangeEvent(@NotNull Player who, @NotNull String locale) {
+    public PlayerLocaleChangeEvent(@NotNull final Player who, @NotNull final String locale) {
         super(who);
         this.locale = locale;
         this.adventure$locale = net.kyori.adventure.translation.Translator.parseLocale(locale); // Paper
diff --git a/src/main/java/org/bukkit/event/player/PlayerLoginEvent.java b/src/main/java/org/bukkit/event/player/PlayerLoginEvent.java
index 0d7385239de649ec00c74f73107d0bc2f9633aa2..b6f7e12a171529d196e1e8d3798c600483e9822c 100644
--- a/src/main/java/org/bukkit/event/player/PlayerLoginEvent.java
+++ b/src/main/java/org/bukkit/event/player/PlayerLoginEvent.java
@@ -56,7 +56,7 @@ public class PlayerLoginEvent extends PlayerEvent {
      * @deprecated in favour of {@link #PlayerLoginEvent(Player, String, InetAddress, Result, net.kyori.adventure.text.Component, InetAddress)}
      */
     @Deprecated // Paper
-    public PlayerLoginEvent(@NotNull final Player player, @NotNull String hostname, @NotNull final InetAddress address, @NotNull final Result result, @NotNull final String message, @NotNull final InetAddress realAddress) { // Spigot
+    public PlayerLoginEvent(@NotNull final Player player, @NotNull final String hostname, @NotNull final InetAddress address, @NotNull final Result result, @NotNull final String message, @NotNull final InetAddress realAddress) { // Spigot
         this(player, hostname, address, realAddress); // Spigot
         this.result = result;
         this.message = net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().deserialize(message); // Paper
@@ -74,7 +74,7 @@ public class PlayerLoginEvent extends PlayerEvent {
      * @param message The message to be displayed if result denies login
      * @param realAddress the actual, unspoofed connecting address
      */
-    public PlayerLoginEvent(@NotNull final Player player, @NotNull String hostname, @NotNull final InetAddress address, @NotNull final Result result, @NotNull final net.kyori.adventure.text.Component message, @NotNull final InetAddress realAddress) { // Spigot
+    public PlayerLoginEvent(@NotNull final Player player, @NotNull final String hostname, @NotNull final InetAddress address, @NotNull final Result result, @NotNull final net.kyori.adventure.text.Component message, @NotNull final InetAddress realAddress) { // Spigot
         this(player, hostname, address, realAddress); // Spigot
         this.result = result;
         this.message = message;
@@ -95,7 +95,7 @@ public class PlayerLoginEvent extends PlayerEvent {
      *
      * @param message New kick message
      */
-    public void kickMessage(@NotNull net.kyori.adventure.text.Component message) {
+    public void kickMessage(@NotNull final net.kyori.adventure.text.Component message) {
         this.message = message;
     }
     // Paper end
diff --git a/src/main/java/org/bukkit/event/player/PlayerMoveEvent.java b/src/main/java/org/bukkit/event/player/PlayerMoveEvent.java
index 5f328b4f82655a064715f0386ca79d201615a273..866339bacfa1f04f69612cdc3a6ba9e9ed558360 100644
--- a/src/main/java/org/bukkit/event/player/PlayerMoveEvent.java
+++ b/src/main/java/org/bukkit/event/player/PlayerMoveEvent.java
@@ -49,7 +49,7 @@ public class PlayerMoveEvent extends PlayerEvent implements Cancellable {
      * @param cancel true if you wish to cancel this event
      */
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.cancel = cancel;
     }
 
@@ -68,7 +68,7 @@ public class PlayerMoveEvent extends PlayerEvent implements Cancellable {
      *
      * @param from New location to mark as the players previous location
      */
-    public void setFrom(@NotNull Location from) {
+    public void setFrom(@NotNull final Location from) {
         validateLocation(from);
         this.from = from;
     }
@@ -88,7 +88,7 @@ public class PlayerMoveEvent extends PlayerEvent implements Cancellable {
      *
      * @param to New Location this player will move to
      */
-    public void setTo(@NotNull Location to) {
+    public void setTo(@NotNull final Location to) {
         validateLocation(to);
         this.to = to;
     }
@@ -140,7 +140,7 @@ public class PlayerMoveEvent extends PlayerEvent implements Cancellable {
     }
     // Paper end
 
-    private void validateLocation(@NotNull Location loc) {
+    private void validateLocation(@NotNull final Location loc) {
         Preconditions.checkArgument(loc != null, "Cannot use null location!");
         Preconditions.checkArgument(loc.getWorld() != null, "Cannot use null location with null world!");
     }
diff --git a/src/main/java/org/bukkit/event/player/PlayerPickupItemEvent.java b/src/main/java/org/bukkit/event/player/PlayerPickupItemEvent.java
index 51ffd54ab9ee226e7abbd7eddf95928c730f067c..64770af0841d2f0abb494c17d5509c9174b64643 100644
--- a/src/main/java/org/bukkit/event/player/PlayerPickupItemEvent.java
+++ b/src/main/java/org/bukkit/event/player/PlayerPickupItemEvent.java
@@ -53,7 +53,7 @@ public class PlayerPickupItemEvent extends PlayerEvent implements Cancellable {
      *
      * @param flyAtPlayer True for item to fly at player
      */
-    public void setFlyAtPlayer(boolean flyAtPlayer) {
+    public void setFlyAtPlayer(final boolean flyAtPlayer) {
         this.flyAtPlayer = flyAtPlayer;
     }
 
@@ -73,7 +73,7 @@ public class PlayerPickupItemEvent extends PlayerEvent implements Cancellable {
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.cancel = cancel;
         this.flyAtPlayer = !cancel; // Paper
     }
diff --git a/src/main/java/org/bukkit/event/player/PlayerPortalEvent.java b/src/main/java/org/bukkit/event/player/PlayerPortalEvent.java
index da753259e3c461d9fd40b7eb7d0abf7965497a47..21bb500b161eac64e59d12665f563141bce592f2 100644
--- a/src/main/java/org/bukkit/event/player/PlayerPortalEvent.java
+++ b/src/main/java/org/bukkit/event/player/PlayerPortalEvent.java
@@ -22,11 +22,11 @@ public class PlayerPortalEvent extends PlayerTeleportEvent {
         super(player, from, to);
     }
 
-    public PlayerPortalEvent(@NotNull Player player, @NotNull Location from, @Nullable Location to, @NotNull TeleportCause cause) {
+    public PlayerPortalEvent(@NotNull final Player player, @NotNull final Location from, @Nullable final Location to, @NotNull final TeleportCause cause) {
         super(player, from, to, cause);
     }
 
-    public PlayerPortalEvent(@NotNull Player player, @NotNull Location from, @Nullable Location to, @NotNull TeleportCause cause, int getSearchRadius, boolean canCreatePortal, int creationRadius) {
+    public PlayerPortalEvent(@NotNull final Player player, @NotNull final Location from, @Nullable final Location to, @NotNull final TeleportCause cause, final int getSearchRadius, final boolean canCreatePortal, final int creationRadius) {
         super(player, from, to, cause);
         this.getSearchRadius = getSearchRadius;
         this.canCreatePortal = canCreatePortal;
@@ -86,7 +86,7 @@ public class PlayerPortalEvent extends PlayerTeleportEvent {
      * @param searchRadius the radius in which to search for a portal from the
      * location
      */
-    public void setSearchRadius(int searchRadius) {
+    public void setSearchRadius(final int searchRadius) {
         this.getSearchRadius = searchRadius;
     }
 
@@ -116,7 +116,7 @@ public class PlayerPortalEvent extends PlayerTeleportEvent {
      * @param canCreatePortal Sets whether there should be a destination portal
      * created
      */
-    public void setCanCreatePortal(boolean canCreatePortal) {
+    public void setCanCreatePortal(final boolean canCreatePortal) {
         this.canCreatePortal = canCreatePortal;
     }
 
@@ -133,7 +133,7 @@ public class PlayerPortalEvent extends PlayerTeleportEvent {
      * @param creationRadius the radius in which to create a portal from the
      * location
      */
-    public void setCreationRadius(int creationRadius) {
+    public void setCreationRadius(final int creationRadius) {
         this.creationRadius = creationRadius;
     }
 
diff --git a/src/main/java/org/bukkit/event/player/PlayerQuitEvent.java b/src/main/java/org/bukkit/event/player/PlayerQuitEvent.java
index 4964f75aea37c9d9936643e9e8a78c35def7b2f9..dc3a45e5e64107663750da3acc2c9047c91fbb9b 100644
--- a/src/main/java/org/bukkit/event/player/PlayerQuitEvent.java
+++ b/src/main/java/org/bukkit/event/player/PlayerQuitEvent.java
@@ -19,7 +19,7 @@ public class PlayerQuitEvent extends PlayerEvent {
         this(who, quitMessage, null);
     }
     @Deprecated // Paper
-    public PlayerQuitEvent(@NotNull final Player who, @Nullable final String quitMessage, @Nullable QuitReason quitReason) {
+    public PlayerQuitEvent(@NotNull final Player who, @Nullable final String quitMessage, @Nullable final QuitReason quitReason) {
         super(who);
         this.quitMessage = quitMessage != null ? net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().deserialize(quitMessage) : null; // Paper
         this.reason = quitReason == null ? QuitReason.DISCONNECTED : quitReason;
@@ -29,7 +29,7 @@ public class PlayerQuitEvent extends PlayerEvent {
     public PlayerQuitEvent(@NotNull final Player who, @Nullable final net.kyori.adventure.text.Component quitMessage) {
         this(who, quitMessage, null);
     }
-    public PlayerQuitEvent(@NotNull final Player who, @Nullable final net.kyori.adventure.text.Component quitMessage, @Nullable QuitReason quitReason) {
+    public PlayerQuitEvent(@NotNull final Player who, @Nullable final net.kyori.adventure.text.Component quitMessage, @Nullable final QuitReason quitReason) {
         super(who);
         this.quitMessage = quitMessage;
         this.reason = quitReason == null ? QuitReason.DISCONNECTED : quitReason;
@@ -49,7 +49,7 @@ public class PlayerQuitEvent extends PlayerEvent {
      *
      * @param quitMessage quit message
      */
-    public void quitMessage(@Nullable net.kyori.adventure.text.Component quitMessage) {
+    public void quitMessage(@Nullable final net.kyori.adventure.text.Component quitMessage) {
         this.quitMessage = quitMessage;
     }
     // Paper end
@@ -73,7 +73,7 @@ public class PlayerQuitEvent extends PlayerEvent {
      * @deprecated in favour of {@link #quitMessage(net.kyori.adventure.text.Component)}
      */
     @Deprecated // Paper
-    public void setQuitMessage(@Nullable String quitMessage) {
+    public void setQuitMessage(@Nullable final String quitMessage) {
         this.quitMessage = quitMessage != null ? net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().deserialize(quitMessage) : null; // Paper
     }
 
diff --git a/src/main/java/org/bukkit/event/player/PlayerRecipeDiscoverEvent.java b/src/main/java/org/bukkit/event/player/PlayerRecipeDiscoverEvent.java
index 8850b73394b6af4ce9ec2e3278cbeaae9ae0ff05..9e98ccaeae52760f6f96bc304d83cdb873e40570 100644
--- a/src/main/java/org/bukkit/event/player/PlayerRecipeDiscoverEvent.java
+++ b/src/main/java/org/bukkit/event/player/PlayerRecipeDiscoverEvent.java
@@ -16,7 +16,7 @@ public class PlayerRecipeDiscoverEvent extends PlayerEvent implements Cancellabl
     private boolean cancel = false;
     private final @NotNull NamespacedKey recipe;
 
-    public PlayerRecipeDiscoverEvent(@NotNull Player who, @NotNull NamespacedKey recipe) {
+    public PlayerRecipeDiscoverEvent(@NotNull final Player who, @NotNull final NamespacedKey recipe) {
         super(who);
         this.recipe = recipe;
     }
@@ -37,7 +37,7 @@ public class PlayerRecipeDiscoverEvent extends PlayerEvent implements Cancellabl
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.cancel = cancel;
     }
 
diff --git a/src/main/java/org/bukkit/event/player/PlayerResourcePackStatusEvent.java b/src/main/java/org/bukkit/event/player/PlayerResourcePackStatusEvent.java
index 88eca326425ef1eeab68d73ceb192a159203d3a8..1eacc6d1b19280bfc6d7af4253e2f8d397349652 100644
--- a/src/main/java/org/bukkit/event/player/PlayerResourcePackStatusEvent.java
+++ b/src/main/java/org/bukkit/event/player/PlayerResourcePackStatusEvent.java
@@ -17,14 +17,14 @@ public class PlayerResourcePackStatusEvent extends PlayerEvent {
     private final @Nullable String hash; // Paper
     private final Status status;
 
-    public PlayerResourcePackStatusEvent(@NotNull final Player who, @NotNull Status resourcePackStatus) {
+    public PlayerResourcePackStatusEvent(@NotNull final Player who, @NotNull final Status resourcePackStatus) {
         super(who);
         this.hash = null; // Paper
         this.status = resourcePackStatus;
     }
 
     @Deprecated // Paper
-    public PlayerResourcePackStatusEvent(final @NotNull Player who, Status resourcePackStatus, String hash) {
+    public PlayerResourcePackStatusEvent(final @NotNull Player who, final Status resourcePackStatus, final String hash) {
         super(who);
         this.hash = hash; // Paper
         this.status = resourcePackStatus;
diff --git a/src/main/java/org/bukkit/event/player/PlayerRespawnEvent.java b/src/main/java/org/bukkit/event/player/PlayerRespawnEvent.java
index 4c455cc2f385616d278d92bc85f9f6b5c35ca217..0ea8b94714da2e89d56ff5bc4baf58d632d1d4c3 100644
--- a/src/main/java/org/bukkit/event/player/PlayerRespawnEvent.java
+++ b/src/main/java/org/bukkit/event/player/PlayerRespawnEvent.java
@@ -58,7 +58,7 @@ public class PlayerRespawnEvent extends PlayerEvent {
      *
      * @param respawnLocation new location for the respawn
      */
-    public void setRespawnLocation(@NotNull Location respawnLocation) {
+    public void setRespawnLocation(@NotNull final Location respawnLocation) {
         Preconditions.checkArgument(respawnLocation != null, "Respawn location can not be null");
         Preconditions.checkArgument(respawnLocation.getWorld() != null, "Respawn world can not be null");
 
diff --git a/src/main/java/org/bukkit/event/player/PlayerShearEntityEvent.java b/src/main/java/org/bukkit/event/player/PlayerShearEntityEvent.java
index 4231833d91485003f9be2ed92e75bae99832f446..0f04fc0ad955622249d97123ebe20312c997c9b4 100644
--- a/src/main/java/org/bukkit/event/player/PlayerShearEntityEvent.java
+++ b/src/main/java/org/bukkit/event/player/PlayerShearEntityEvent.java
@@ -19,7 +19,7 @@ public class PlayerShearEntityEvent extends PlayerEvent implements Cancellable {
     private final @NotNull ItemStack item;
     private final @NotNull EquipmentSlot hand;
 
-    public PlayerShearEntityEvent(@NotNull Player who, @NotNull Entity what, @NotNull ItemStack item, @NotNull EquipmentSlot hand) {
+    public PlayerShearEntityEvent(@NotNull final Player who, @NotNull final Entity what, @NotNull final ItemStack item, @NotNull final EquipmentSlot hand) {
         super(who);
         this.what = what;
         this.item = item;
@@ -37,7 +37,7 @@ public class PlayerShearEntityEvent extends PlayerEvent implements Cancellable {
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.cancel = cancel;
     }
 
diff --git a/src/main/java/org/bukkit/event/player/PlayerShowEntityEvent.java b/src/main/java/org/bukkit/event/player/PlayerShowEntityEvent.java
index 9783c2bbb98cc2bdc3713414d5845929804e989f..3cff15b58690519e0b78ac195af6dd4cfaf33c73 100644
--- a/src/main/java/org/bukkit/event/player/PlayerShowEntityEvent.java
+++ b/src/main/java/org/bukkit/event/player/PlayerShowEntityEvent.java
@@ -24,7 +24,7 @@ public class PlayerShowEntityEvent extends PlayerEvent {
     private static final HandlerList handlers = new HandlerList();
     private final @NotNull Entity entity;
 
-    public PlayerShowEntityEvent(@NotNull Player who, @NotNull Entity entity) {
+    public PlayerShowEntityEvent(@NotNull final Player who, @NotNull final Entity entity) {
         super(who);
         this.entity = entity;
     }
diff --git a/src/main/java/org/bukkit/event/player/PlayerStatisticIncrementEvent.java b/src/main/java/org/bukkit/event/player/PlayerStatisticIncrementEvent.java
index 6f9b39c76134d291e31b794ff454db9d687cb76a..5346eb552af147a5152a7f292e6c2039e2cafb35 100644
--- a/src/main/java/org/bukkit/event/player/PlayerStatisticIncrementEvent.java
+++ b/src/main/java/org/bukkit/event/player/PlayerStatisticIncrementEvent.java
@@ -25,7 +25,7 @@ public class PlayerStatisticIncrementEvent extends PlayerEvent implements Cancel
     private final @Nullable EntityType entityType;
     private final @Nullable Material material;
 
-    public PlayerStatisticIncrementEvent(@NotNull Player player, @NotNull Statistic statistic, int initialValue, int newValue) {
+    public PlayerStatisticIncrementEvent(@NotNull final Player player, @NotNull final Statistic statistic, final int initialValue, final int newValue) {
         super(player);
         this.statistic = statistic;
         this.initialValue = initialValue;
@@ -34,7 +34,7 @@ public class PlayerStatisticIncrementEvent extends PlayerEvent implements Cancel
         this.material = null;
     }
 
-    public PlayerStatisticIncrementEvent(@NotNull Player player, @NotNull Statistic statistic, int initialValue, int newValue, @NotNull EntityType entityType) {
+    public PlayerStatisticIncrementEvent(@NotNull final Player player, @NotNull final Statistic statistic, final int initialValue, final int newValue, @NotNull final EntityType entityType) {
         super(player);
         this.statistic = statistic;
         this.initialValue = initialValue;
@@ -43,7 +43,7 @@ public class PlayerStatisticIncrementEvent extends PlayerEvent implements Cancel
         this.material = null;
     }
 
-    public PlayerStatisticIncrementEvent(@NotNull Player player, @NotNull Statistic statistic, int initialValue, int newValue, @NotNull Material material) {
+    public PlayerStatisticIncrementEvent(@NotNull final Player player, @NotNull final Statistic statistic, final int initialValue, final int newValue, @NotNull final Material material) {
         super(player);
         this.statistic = statistic;
         this.initialValue = initialValue;
@@ -108,7 +108,7 @@ public class PlayerStatisticIncrementEvent extends PlayerEvent implements Cancel
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.isCancelled = cancel;
     }
 
diff --git a/src/main/java/org/bukkit/event/player/PlayerSwapHandItemsEvent.java b/src/main/java/org/bukkit/event/player/PlayerSwapHandItemsEvent.java
index a237bd5968685fe1ed38ea6f4a11262d28a7aad1..5a3c6c746b00bc150b9790f92e75f7762b7cb283 100644
--- a/src/main/java/org/bukkit/event/player/PlayerSwapHandItemsEvent.java
+++ b/src/main/java/org/bukkit/event/player/PlayerSwapHandItemsEvent.java
@@ -19,7 +19,7 @@ public class PlayerSwapHandItemsEvent extends PlayerEvent implements Cancellable
     private @Nullable ItemStack offHandItem;
     private boolean cancelled;
 
-    public PlayerSwapHandItemsEvent(@NotNull Player player, @NotNull ItemStack mainHandItem, @NotNull ItemStack offHandItem) {
+    public PlayerSwapHandItemsEvent(@NotNull final Player player, @NotNull final ItemStack mainHandItem, @NotNull final ItemStack offHandItem) {
         super(player);
 
         this.mainHandItem = mainHandItem;
@@ -41,7 +41,7 @@ public class PlayerSwapHandItemsEvent extends PlayerEvent implements Cancellable
      *
      * @param mainHandItem new item in the main hand
      */
-    public void setMainHandItem(@Nullable ItemStack mainHandItem) {
+    public void setMainHandItem(@Nullable final ItemStack mainHandItem) {
         this.mainHandItem = mainHandItem;
     }
 
@@ -60,7 +60,7 @@ public class PlayerSwapHandItemsEvent extends PlayerEvent implements Cancellable
      *
      * @param offHandItem new item in the off hand
      */
-    public void setOffHandItem(@Nullable ItemStack offHandItem) {
+    public void setOffHandItem(@Nullable final ItemStack offHandItem) {
         this.offHandItem = offHandItem;
     }
 
@@ -70,7 +70,7 @@ public class PlayerSwapHandItemsEvent extends PlayerEvent implements Cancellable
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.cancelled = cancel;
     }
 
diff --git a/src/main/java/org/bukkit/event/player/PlayerTakeLecternBookEvent.java b/src/main/java/org/bukkit/event/player/PlayerTakeLecternBookEvent.java
index 0a61c7e0ea2886b4aec97f981266cf04e7182a1d..e5816db0c13282abd6ea6068d1e9a3ef7c71657f 100644
--- a/src/main/java/org/bukkit/event/player/PlayerTakeLecternBookEvent.java
+++ b/src/main/java/org/bukkit/event/player/PlayerTakeLecternBookEvent.java
@@ -19,7 +19,7 @@ public class PlayerTakeLecternBookEvent extends PlayerEvent implements Cancellab
     private boolean cancelled;
     private final @NotNull Lectern lectern;
 
-    public PlayerTakeLecternBookEvent(@NotNull Player who, @NotNull Lectern lectern) {
+    public PlayerTakeLecternBookEvent(@NotNull final Player who, @NotNull final Lectern lectern) {
         super(who);
         this.lectern = lectern;
     }
@@ -50,7 +50,7 @@ public class PlayerTakeLecternBookEvent extends PlayerEvent implements Cancellab
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.cancelled = cancel;
     }
 
diff --git a/src/main/java/org/bukkit/event/player/PlayerTeleportEvent.java b/src/main/java/org/bukkit/event/player/PlayerTeleportEvent.java
index a1e70269162f7a1af3a8c90778e72bdda0322784..ca3891cd9220bcf7e8a9b1e694b95ffe1221986f 100644
--- a/src/main/java/org/bukkit/event/player/PlayerTeleportEvent.java
+++ b/src/main/java/org/bukkit/event/player/PlayerTeleportEvent.java
@@ -31,7 +31,7 @@ public class PlayerTeleportEvent extends PlayerMoveEvent {
 
     // Paper start - Teleport API
     @org.jetbrains.annotations.ApiStatus.Experimental
-    public PlayerTeleportEvent(@NotNull final Player player, @NotNull final Location from, @Nullable final Location to, @NotNull final TeleportCause cause, boolean dismounted, @NotNull java.util.Set<io.papermc.paper.entity.@NotNull RelativeTeleportFlag> teleportFlagSet) {
+    public PlayerTeleportEvent(@NotNull final Player player, @NotNull final Location from, @Nullable final Location to, @NotNull final TeleportCause cause, final boolean dismounted, @NotNull final java.util.Set<io.papermc.paper.entity.@NotNull RelativeTeleportFlag> teleportFlagSet) {
         super(player, from, to);
 
         this.dismounted = dismounted;
diff --git a/src/main/java/org/bukkit/event/player/PlayerToggleFlightEvent.java b/src/main/java/org/bukkit/event/player/PlayerToggleFlightEvent.java
index 9c200f8aca7b45536247a0899a1631542038fccc..1e8b1c80711fa93a3237e5476fcdb6b99a0be632 100644
--- a/src/main/java/org/bukkit/event/player/PlayerToggleFlightEvent.java
+++ b/src/main/java/org/bukkit/event/player/PlayerToggleFlightEvent.java
@@ -33,7 +33,7 @@ public class PlayerToggleFlightEvent extends PlayerEvent implements Cancellable
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.cancel = cancel;
     }
 
diff --git a/src/main/java/org/bukkit/event/player/PlayerToggleSneakEvent.java b/src/main/java/org/bukkit/event/player/PlayerToggleSneakEvent.java
index 348e5b5e50dcd5595d54543ca6380bf6316a1679..f702456a2a29b28054b90474aed95853aa604b13 100644
--- a/src/main/java/org/bukkit/event/player/PlayerToggleSneakEvent.java
+++ b/src/main/java/org/bukkit/event/player/PlayerToggleSneakEvent.java
@@ -33,7 +33,7 @@ public class PlayerToggleSneakEvent extends PlayerEvent implements Cancellable {
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.cancel = cancel;
     }
 
diff --git a/src/main/java/org/bukkit/event/player/PlayerToggleSprintEvent.java b/src/main/java/org/bukkit/event/player/PlayerToggleSprintEvent.java
index dc8cf2197ca62dd1970ccb56c1800e07966b1a1d..3fe8a357d4d974281d1b45224cfad3a312c86a10 100644
--- a/src/main/java/org/bukkit/event/player/PlayerToggleSprintEvent.java
+++ b/src/main/java/org/bukkit/event/player/PlayerToggleSprintEvent.java
@@ -33,7 +33,7 @@ public class PlayerToggleSprintEvent extends PlayerEvent implements Cancellable
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.cancel = cancel;
     }
 
diff --git a/src/main/java/org/bukkit/event/player/PlayerUnleashEntityEvent.java b/src/main/java/org/bukkit/event/player/PlayerUnleashEntityEvent.java
index 8c4a97ca50aee9c78f61817bf964eff6934afde9..8490eb879240f6b64d0851659a60c165ef0b60cc 100644
--- a/src/main/java/org/bukkit/event/player/PlayerUnleashEntityEvent.java
+++ b/src/main/java/org/bukkit/event/player/PlayerUnleashEntityEvent.java
@@ -19,11 +19,11 @@ public class PlayerUnleashEntityEvent extends EntityUnleashEvent implements Canc
 
     // Paper start - drop leash variable
     @Deprecated
-    public PlayerUnleashEntityEvent(@NotNull Entity entity, @NotNull Player player, @NotNull EquipmentSlot hand) {
+    public PlayerUnleashEntityEvent(@NotNull final Entity entity, @NotNull final Player player, @NotNull final EquipmentSlot hand) {
         this(entity, player, hand, false);
     }
 
-    public PlayerUnleashEntityEvent(@NotNull Entity entity, @NotNull Player player, @NotNull EquipmentSlot hand, boolean dropLeash) {
+    public PlayerUnleashEntityEvent(@NotNull final Entity entity, @NotNull final Player player, @NotNull final EquipmentSlot hand, final boolean dropLeash) {
         super(entity, UnleashReason.PLAYER_UNLEASH, dropLeash);
         // Paper end
         this.player = player;
@@ -31,7 +31,7 @@ public class PlayerUnleashEntityEvent extends EntityUnleashEvent implements Canc
     }
 
     @Deprecated
-    public PlayerUnleashEntityEvent(@NotNull Entity entity, @NotNull Player player) {
+    public PlayerUnleashEntityEvent(@NotNull final Entity entity, @NotNull final Player player) {
         this(entity, player, EquipmentSlot.HAND);
     }
 
@@ -61,7 +61,7 @@ public class PlayerUnleashEntityEvent extends EntityUnleashEvent implements Canc
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.cancelled = cancel;
     }
 }
diff --git a/src/main/java/org/bukkit/event/player/PlayerVelocityEvent.java b/src/main/java/org/bukkit/event/player/PlayerVelocityEvent.java
index 61e098d94af9261de1755e743a49657f79427995..98e8d8275947eed3a386dbb6c6db8d3147e85960 100644
--- a/src/main/java/org/bukkit/event/player/PlayerVelocityEvent.java
+++ b/src/main/java/org/bukkit/event/player/PlayerVelocityEvent.java
@@ -25,7 +25,7 @@ public class PlayerVelocityEvent extends PlayerEvent implements Cancellable {
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.cancel = cancel;
     }
 
@@ -44,7 +44,7 @@ public class PlayerVelocityEvent extends PlayerEvent implements Cancellable {
      *
      * @param velocity The velocity vector that will be sent to the player
      */
-    public void setVelocity(@NotNull Vector velocity) {
+    public void setVelocity(@NotNull final Vector velocity) {
         this.velocity = velocity;
     }
 
diff --git a/src/main/java/org/bukkit/event/raid/RaidEvent.java b/src/main/java/org/bukkit/event/raid/RaidEvent.java
index 00068d714591654b0098af6a7adb394157f2b411..31ba16db1706b6f1667218ad5812fe0d85fa409c 100644
--- a/src/main/java/org/bukkit/event/raid/RaidEvent.java
+++ b/src/main/java/org/bukkit/event/raid/RaidEvent.java
@@ -12,7 +12,7 @@ public abstract class RaidEvent extends WorldEvent {
 
     private final @NotNull Raid raid;
 
-    protected RaidEvent(@NotNull Raid raid, @NotNull World world) {
+    protected RaidEvent(@NotNull final Raid raid, @NotNull final World world) {
         super(world);
         this.raid = raid;
     }
diff --git a/src/main/java/org/bukkit/event/raid/RaidFinishEvent.java b/src/main/java/org/bukkit/event/raid/RaidFinishEvent.java
index 711b7c6dceff6e64ffcff65c3f446d425e23097b..89d068ef678d67cc73204ce07b0bee79263afe65 100644
--- a/src/main/java/org/bukkit/event/raid/RaidFinishEvent.java
+++ b/src/main/java/org/bukkit/event/raid/RaidFinishEvent.java
@@ -17,7 +17,7 @@ public class RaidFinishEvent extends RaidEvent {
     //
     private final @NotNull List<Player> winners;
 
-    public RaidFinishEvent(@NotNull Raid raid, @NotNull World world, @NotNull List<Player> winners) {
+    public RaidFinishEvent(@NotNull final Raid raid, @NotNull final World world, @NotNull final List<Player> winners) {
         super(raid, world);
         this.winners = winners;
     }
diff --git a/src/main/java/org/bukkit/event/raid/RaidSpawnWaveEvent.java b/src/main/java/org/bukkit/event/raid/RaidSpawnWaveEvent.java
index 9bff2ad374a640f32406a4a85d1415bb68468f5c..c7ef1850ba58e7f2850a3b9181312c6948879a43 100644
--- a/src/main/java/org/bukkit/event/raid/RaidSpawnWaveEvent.java
+++ b/src/main/java/org/bukkit/event/raid/RaidSpawnWaveEvent.java
@@ -19,7 +19,7 @@ public class RaidSpawnWaveEvent extends RaidEvent {
     private final @NotNull List<Raider> raiders;
     private final @Nullable Raider leader;
 
-    public RaidSpawnWaveEvent(@NotNull Raid raid, @NotNull World world, @Nullable Raider leader, @NotNull List<Raider> raiders) {
+    public RaidSpawnWaveEvent(@NotNull final Raid raid, @NotNull final World world, @Nullable final Raider leader, @NotNull final List<Raider> raiders) {
         super(raid, world);
         this.raiders = raiders;
         this.leader = leader;
diff --git a/src/main/java/org/bukkit/event/raid/RaidStopEvent.java b/src/main/java/org/bukkit/event/raid/RaidStopEvent.java
index 1eb0c33b7476a7a6b6b19efab3ae0da62c392a8d..1095d840f53cb87269ca33b9e45dbee77724c072 100644
--- a/src/main/java/org/bukkit/event/raid/RaidStopEvent.java
+++ b/src/main/java/org/bukkit/event/raid/RaidStopEvent.java
@@ -14,7 +14,7 @@ public class RaidStopEvent extends RaidEvent {
     //
     private final @NotNull Reason reason;
 
-    public RaidStopEvent(@NotNull Raid raid, @NotNull World world, @NotNull Reason reason) {
+    public RaidStopEvent(@NotNull final Raid raid, @NotNull final World world, @NotNull final Reason reason) {
         super(raid, world);
         this.reason = reason;
     }
diff --git a/src/main/java/org/bukkit/event/raid/RaidTriggerEvent.java b/src/main/java/org/bukkit/event/raid/RaidTriggerEvent.java
index dc3b8357491eea1c6a958e4deacfa415b3cc3f4d..2e1c405e7691113a5a6aadab675aa3addfe9562d 100644
--- a/src/main/java/org/bukkit/event/raid/RaidTriggerEvent.java
+++ b/src/main/java/org/bukkit/event/raid/RaidTriggerEvent.java
@@ -18,7 +18,7 @@ public class RaidTriggerEvent extends RaidEvent implements Cancellable {
     private final @NotNull Player player;
     private boolean cancel;
 
-    public RaidTriggerEvent(@NotNull Raid raid, @NotNull World world, @NotNull Player player) {
+    public RaidTriggerEvent(@NotNull final Raid raid, @NotNull final World world, @NotNull final Player player) {
         super(raid, world);
         this.player = player;
     }
@@ -39,7 +39,7 @@ public class RaidTriggerEvent extends RaidEvent implements Cancellable {
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.cancel = cancel;
     }
 
diff --git a/src/main/java/org/bukkit/event/server/BroadcastMessageEvent.java b/src/main/java/org/bukkit/event/server/BroadcastMessageEvent.java
index 4becd85bd41d7a351e2d689d0415ae7ecbd5376c..002c36b89908484651b620c600a5b4b5454c99c7 100644
--- a/src/main/java/org/bukkit/event/server/BroadcastMessageEvent.java
+++ b/src/main/java/org/bukkit/event/server/BroadcastMessageEvent.java
@@ -23,12 +23,12 @@ public class BroadcastMessageEvent extends ServerEvent implements Cancellable {
     private boolean cancelled = false;
 
     @Deprecated
-    public BroadcastMessageEvent(@NotNull String message, @NotNull Set<CommandSender> recipients) {
+    public BroadcastMessageEvent(@NotNull final String message, @NotNull final Set<CommandSender> recipients) {
         this(false, message, recipients);
     }
 
     @Deprecated // Paper
-    public BroadcastMessageEvent(boolean isAsync, @NotNull String message, @NotNull Set<CommandSender> recipients) {
+    public BroadcastMessageEvent(final boolean isAsync, @NotNull final String message, @NotNull final Set<CommandSender> recipients) {
         // Paper start
         super(isAsync);
         this.message = net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().deserialize(message);
@@ -36,11 +36,11 @@ public class BroadcastMessageEvent extends ServerEvent implements Cancellable {
     }
 
     @Deprecated
-    public BroadcastMessageEvent(@NotNull net.kyori.adventure.text.Component message, @NotNull Set<CommandSender> recipients) {
+    public BroadcastMessageEvent(@NotNull final net.kyori.adventure.text.Component message, @NotNull final Set<CommandSender> recipients) {
         this(false, message, recipients);
     }
 
-    public BroadcastMessageEvent(boolean isAsync, @NotNull net.kyori.adventure.text.Component message, @NotNull Set<CommandSender> recipients) {
+    public BroadcastMessageEvent(final boolean isAsync, @NotNull final net.kyori.adventure.text.Component message, @NotNull final Set<CommandSender> recipients) {
         // Paper end
         super(isAsync);
         this.message = message;
@@ -61,7 +61,7 @@ public class BroadcastMessageEvent extends ServerEvent implements Cancellable {
      *
      * @param message New message to broadcast
      */
-    public void message(@NotNull net.kyori.adventure.text.Component message) {
+    public void message(@NotNull final net.kyori.adventure.text.Component message) {
         this.message = message;
     }
     // Paper end
@@ -85,7 +85,7 @@ public class BroadcastMessageEvent extends ServerEvent implements Cancellable {
      * @deprecated in favour of {@link #message(net.kyori.adventure.text.Component)}
      */
     @Deprecated // Paper
-    public void setMessage(@NotNull String message) {
+    public void setMessage(@NotNull final String message) {
         this.message = net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().deserialize(message); // Paper
     }
 
@@ -113,7 +113,7 @@ public class BroadcastMessageEvent extends ServerEvent implements Cancellable {
     }
 
     @Override
-    public void setCancelled(boolean cancelled) {
+    public void setCancelled(final boolean cancelled) {
         this.cancelled = cancelled;
     }
 
diff --git a/src/main/java/org/bukkit/event/server/ServerCommandEvent.java b/src/main/java/org/bukkit/event/server/ServerCommandEvent.java
index 79bc6ded4f0ead623ef966f361cbe722935710e6..0045b42d381c7e62eb2e533138d18cbf13eb58d1 100644
--- a/src/main/java/org/bukkit/event/server/ServerCommandEvent.java
+++ b/src/main/java/org/bukkit/event/server/ServerCommandEvent.java
@@ -66,7 +66,7 @@ public class ServerCommandEvent extends ServerEvent implements Cancellable {
      *
      * @param message New message that the server will execute
      */
-    public void setCommand(@NotNull String message) {
+    public void setCommand(@NotNull final String message) {
         this.command = message;
     }
 
@@ -97,7 +97,7 @@ public class ServerCommandEvent extends ServerEvent implements Cancellable {
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.cancel = cancel;
     }
 }
diff --git a/src/main/java/org/bukkit/event/server/ServerEvent.java b/src/main/java/org/bukkit/event/server/ServerEvent.java
index 05167fb34e4c42edc67af6e6700a2a3cc0f92769..6b9903e2072c676e3a1767a1a2d3d0c469a89c29 100644
--- a/src/main/java/org/bukkit/event/server/ServerEvent.java
+++ b/src/main/java/org/bukkit/event/server/ServerEvent.java
@@ -12,7 +12,7 @@ public abstract class ServerEvent extends Event {
         super(!Bukkit.isPrimaryThread()); // Paper
     }
 
-    public ServerEvent(boolean isAsync) {
+    public ServerEvent(final boolean isAsync) {
         super(isAsync);
     }
 }
diff --git a/src/main/java/org/bukkit/event/server/ServerListPingEvent.java b/src/main/java/org/bukkit/event/server/ServerListPingEvent.java
index c854f0347dce51dc75105fef2dd69ef71bcc43c3..cca19dd4827721f9763cd1a03d15c1a5df26010c 100644
--- a/src/main/java/org/bukkit/event/server/ServerListPingEvent.java
+++ b/src/main/java/org/bukkit/event/server/ServerListPingEvent.java
@@ -115,7 +115,7 @@ public class ServerListPingEvent extends ServerEvent implements Iterable<Player>
      *
      * @param motd the message of the day
      */
-    public void motd(@NotNull net.kyori.adventure.text.Component motd) {
+    public void motd(@NotNull final net.kyori.adventure.text.Component motd) {
         this.motd = motd;
     }
     // Paper end
@@ -160,7 +160,7 @@ public class ServerListPingEvent extends ServerEvent implements Iterable<Player>
      * @deprecated in favour of {@link #motd(net.kyori.adventure.text.Component)}
      */
     @Deprecated // Paper
-    public void setMotd(@NotNull String motd) {
+    public void setMotd(@NotNull final String motd) {
         this.motd = net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().deserialize(motd); // Paper
     }
 
@@ -206,7 +206,7 @@ public class ServerListPingEvent extends ServerEvent implements Iterable<Player>
      *
      * @param maxPlayers the maximum number of player
      */
-    public void setMaxPlayers(int maxPlayers) {
+    public void setMaxPlayers(final int maxPlayers) {
         this.maxPlayers = maxPlayers;
     }
 
@@ -220,7 +220,7 @@ public class ServerListPingEvent extends ServerEvent implements Iterable<Player>
      * @throws UnsupportedOperationException if the caller of this event does
      *     not support setting the server icon
      */
-    public void setServerIcon(@UndefinedNullability("implementation dependent") CachedServerIcon icon) throws IllegalArgumentException, UnsupportedOperationException {
+    public void setServerIcon(@UndefinedNullability("implementation dependent") final CachedServerIcon icon) throws IllegalArgumentException, UnsupportedOperationException {
         throw new UnsupportedOperationException();
     }
 
diff --git a/src/main/java/org/bukkit/event/server/ServerLoadEvent.java b/src/main/java/org/bukkit/event/server/ServerLoadEvent.java
index cc4745d8f69a7841616903366f1bad75d4395cf6..627cd359722c9977411be54d28a67caa83b8a47f 100644
--- a/src/main/java/org/bukkit/event/server/ServerLoadEvent.java
+++ b/src/main/java/org/bukkit/event/server/ServerLoadEvent.java
@@ -23,7 +23,7 @@ public class ServerLoadEvent extends ServerEvent {
      *
      * @param type the context in which the server was loaded
      */
-    public ServerLoadEvent(@NotNull LoadType type) {
+    public ServerLoadEvent(@NotNull final LoadType type) {
         this.type = type;
     }
 
diff --git a/src/main/java/org/bukkit/event/server/ServiceRegisterEvent.java b/src/main/java/org/bukkit/event/server/ServiceRegisterEvent.java
index d7f9227ef50ebc97710a532c5370eb8e6ffa3857..e85b965d65c9d12a3cfec8c7f3b15a13c078ae70 100644
--- a/src/main/java/org/bukkit/event/server/ServiceRegisterEvent.java
+++ b/src/main/java/org/bukkit/event/server/ServiceRegisterEvent.java
@@ -13,7 +13,7 @@ import org.jetbrains.annotations.NotNull;
 public class ServiceRegisterEvent extends ServiceEvent {
     private static final HandlerList handlers = new HandlerList();
 
-    public ServiceRegisterEvent(@NotNull RegisteredServiceProvider<?> registeredProvider) {
+    public ServiceRegisterEvent(@NotNull final RegisteredServiceProvider<?> registeredProvider) {
         super(registeredProvider);
     }
 
diff --git a/src/main/java/org/bukkit/event/server/ServiceUnregisterEvent.java b/src/main/java/org/bukkit/event/server/ServiceUnregisterEvent.java
index f286799eeb28c64e9e07800316a95ebddce44615..966e8a7976e5251731e88179f12779754c958d2d 100644
--- a/src/main/java/org/bukkit/event/server/ServiceUnregisterEvent.java
+++ b/src/main/java/org/bukkit/event/server/ServiceUnregisterEvent.java
@@ -13,7 +13,7 @@ import org.jetbrains.annotations.NotNull;
 public class ServiceUnregisterEvent extends ServiceEvent {
     private static final HandlerList handlers = new HandlerList();
 
-    public ServiceUnregisterEvent(@NotNull RegisteredServiceProvider<?> serviceProvider) {
+    public ServiceUnregisterEvent(@NotNull final RegisteredServiceProvider<?> serviceProvider) {
         super(serviceProvider);
     }
 
diff --git a/src/main/java/org/bukkit/event/server/TabCompleteEvent.java b/src/main/java/org/bukkit/event/server/TabCompleteEvent.java
index 99ec0ae158224f0b17e887cd5d68e71cbb5da4e3..93043d27f160c73486ddae9423af5697cc5410df 100644
--- a/src/main/java/org/bukkit/event/server/TabCompleteEvent.java
+++ b/src/main/java/org/bukkit/event/server/TabCompleteEvent.java
@@ -30,11 +30,11 @@ public class TabCompleteEvent extends Event implements Cancellable {
     private List<String> completions;
     private boolean cancelled;
 
-    public TabCompleteEvent(@NotNull CommandSender sender, @NotNull String buffer, @NotNull List<String> completions) {
+    public TabCompleteEvent(@NotNull final CommandSender sender, @NotNull final String buffer, @NotNull final List<String> completions) {
         // Paper start
         this(sender, buffer, completions, sender instanceof org.bukkit.command.ConsoleCommandSender || buffer.startsWith("/"), null);
     }
-    public TabCompleteEvent(@NotNull CommandSender sender, @NotNull String buffer, @NotNull List<String> completions, boolean isCommand, @org.jetbrains.annotations.Nullable org.bukkit.Location location) {
+    public TabCompleteEvent(@NotNull final CommandSender sender, @NotNull final String buffer, @NotNull final List<String> completions, final boolean isCommand, @org.jetbrains.annotations.Nullable final org.bukkit.Location location) {
         this.isCommand = isCommand;
         this.loc = location;
         // Paper end
@@ -104,7 +104,7 @@ public class TabCompleteEvent extends Event implements Cancellable {
      *
      * @param completions the new completions
      */
-    public void setCompletions(@NotNull List<String> completions) {
+    public void setCompletions(@NotNull final List<String> completions) {
         Preconditions.checkArgument(completions != null);
         this.completions = new java.util.ArrayList<>(completions); // Paper
     }
@@ -115,7 +115,7 @@ public class TabCompleteEvent extends Event implements Cancellable {
     }
 
     @Override
-    public void setCancelled(boolean cancelled) {
+    public void setCancelled(final boolean cancelled) {
         this.cancelled = cancelled;
     }
 
diff --git a/src/main/java/org/bukkit/event/vehicle/VehicleCreateEvent.java b/src/main/java/org/bukkit/event/vehicle/VehicleCreateEvent.java
index c1f107db9eda33dcb311d041562bd5f7b2b6ba0c..de52ed3ffae2065a990cb080a6e09713138ddfe6 100644
--- a/src/main/java/org/bukkit/event/vehicle/VehicleCreateEvent.java
+++ b/src/main/java/org/bukkit/event/vehicle/VehicleCreateEvent.java
@@ -22,7 +22,7 @@ public class VehicleCreateEvent extends VehicleEvent implements Cancellable {
     }
 
     @Override
-    public void setCancelled(boolean cancelled) {
+    public void setCancelled(final boolean cancelled) {
         this.cancelled = cancelled;
     }
 
diff --git a/src/main/java/org/bukkit/event/vehicle/VehicleDamageEvent.java b/src/main/java/org/bukkit/event/vehicle/VehicleDamageEvent.java
index 5a06af005427fb29c3f333cc000343806b86fb29..4fcba9367ab9bdc29953ab56b9c0137de29a3f35 100644
--- a/src/main/java/org/bukkit/event/vehicle/VehicleDamageEvent.java
+++ b/src/main/java/org/bukkit/event/vehicle/VehicleDamageEvent.java
@@ -46,7 +46,7 @@ public class VehicleDamageEvent extends VehicleEvent implements Cancellable {
      *
      * @param damage The damage
      */
-    public void setDamage(double damage) {
+    public void setDamage(final double damage) {
         this.damage = damage;
     }
 
@@ -56,7 +56,7 @@ public class VehicleDamageEvent extends VehicleEvent implements Cancellable {
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.cancelled = cancel;
     }
 
diff --git a/src/main/java/org/bukkit/event/vehicle/VehicleDestroyEvent.java b/src/main/java/org/bukkit/event/vehicle/VehicleDestroyEvent.java
index d0776aaa4a4b2e427ffa4e449b0e9f90c9a5630a..11026da35ea9f2fc7e879c7b0eb772eaa41f92c7 100644
--- a/src/main/java/org/bukkit/event/vehicle/VehicleDestroyEvent.java
+++ b/src/main/java/org/bukkit/event/vehicle/VehicleDestroyEvent.java
@@ -38,7 +38,7 @@ public class VehicleDestroyEvent extends VehicleEvent implements Cancellable {
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.cancelled = cancel;
     }
 
diff --git a/src/main/java/org/bukkit/event/vehicle/VehicleEnterEvent.java b/src/main/java/org/bukkit/event/vehicle/VehicleEnterEvent.java
index 83679875fdc7dbc1dc79c0e29e2b8595ac8a429b..c6e5f58f9b06e543f4c052dc7d4bb1267de6afc5 100644
--- a/src/main/java/org/bukkit/event/vehicle/VehicleEnterEvent.java
+++ b/src/main/java/org/bukkit/event/vehicle/VehicleEnterEvent.java
@@ -35,7 +35,7 @@ public class VehicleEnterEvent extends VehicleEvent implements Cancellable {
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.cancelled = cancel;
     }
 
diff --git a/src/main/java/org/bukkit/event/vehicle/VehicleEntityCollisionEvent.java b/src/main/java/org/bukkit/event/vehicle/VehicleEntityCollisionEvent.java
index 838d5b7474d98af8a5408ceb9c89df547a5de742..4f071a910b589922ce9bd4c203457f874b7ad1ca 100644
--- a/src/main/java/org/bukkit/event/vehicle/VehicleEntityCollisionEvent.java
+++ b/src/main/java/org/bukkit/event/vehicle/VehicleEntityCollisionEvent.java
@@ -31,7 +31,7 @@ public class VehicleEntityCollisionEvent extends VehicleCollisionEvent implement
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.cancelled = cancel;
     }
 
@@ -41,7 +41,7 @@ public class VehicleEntityCollisionEvent extends VehicleCollisionEvent implement
     }
 
     @Deprecated(forRemoval = true) // Paper - Unused
-    public void setPickupCancelled(boolean cancel) {
+    public void setPickupCancelled(final boolean cancel) {
         cancelledPickup = cancel;
     }
 
@@ -51,7 +51,7 @@ public class VehicleEntityCollisionEvent extends VehicleCollisionEvent implement
     }
 
     @Deprecated(forRemoval = true) // Paper - Unused
-    public void setCollisionCancelled(boolean cancel) {
+    public void setCollisionCancelled(final boolean cancel) {
         cancelledCollision = cancel;
     }
 }
diff --git a/src/main/java/org/bukkit/event/vehicle/VehicleExitEvent.java b/src/main/java/org/bukkit/event/vehicle/VehicleExitEvent.java
index e7cbd608fab81701ac2f873b8da5e2321a3b7bc8..d7c737fd4183dd568f8afac5210bdd7e045ed19e 100644
--- a/src/main/java/org/bukkit/event/vehicle/VehicleExitEvent.java
+++ b/src/main/java/org/bukkit/event/vehicle/VehicleExitEvent.java
@@ -15,7 +15,7 @@ public class VehicleExitEvent extends VehicleEvent implements Cancellable {
     private final @NotNull LivingEntity exited;
     private final boolean isCancellable; // Paper
 
-    public VehicleExitEvent(@NotNull final Vehicle vehicle, @NotNull final LivingEntity exited, boolean isCancellable) { // Paper
+    public VehicleExitEvent(@NotNull final Vehicle vehicle, @NotNull final LivingEntity exited, final boolean isCancellable) { // Paper
         super(vehicle);
         this.exited = exited;
         // Paper start
@@ -43,7 +43,7 @@ public class VehicleExitEvent extends VehicleEvent implements Cancellable {
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         // Paper start
         if (cancel && !isCancellable) {
             return;
diff --git a/src/main/java/org/bukkit/event/weather/LightningStrikeEvent.java b/src/main/java/org/bukkit/event/weather/LightningStrikeEvent.java
index b46e502d22bda31d972d984e9e355086f0f72c56..10df5827d6347c679be5fcfa8a12c4b84ac5d59b 100644
--- a/src/main/java/org/bukkit/event/weather/LightningStrikeEvent.java
+++ b/src/main/java/org/bukkit/event/weather/LightningStrikeEvent.java
@@ -32,7 +32,7 @@ public class LightningStrikeEvent extends WeatherEvent implements Cancellable {
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         canceled = cancel;
     }
 
diff --git a/src/main/java/org/bukkit/event/weather/ThunderChangeEvent.java b/src/main/java/org/bukkit/event/weather/ThunderChangeEvent.java
index b7246cab71f60156203c13d71ab1e869ffd901ce..f69f34839a9921414029dba8d4ea51a2c37cc042 100644
--- a/src/main/java/org/bukkit/event/weather/ThunderChangeEvent.java
+++ b/src/main/java/org/bukkit/event/weather/ThunderChangeEvent.java
@@ -34,7 +34,7 @@ public class ThunderChangeEvent extends WeatherEvent implements Cancellable {
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         canceled = cancel;
     }
 
diff --git a/src/main/java/org/bukkit/event/weather/WeatherChangeEvent.java b/src/main/java/org/bukkit/event/weather/WeatherChangeEvent.java
index e4976b197e1fb8938775346b3292fe9cc23ed4c6..2f990d583bc8d64f666e65c1d38cd8e3f49f25c2 100644
--- a/src/main/java/org/bukkit/event/weather/WeatherChangeEvent.java
+++ b/src/main/java/org/bukkit/event/weather/WeatherChangeEvent.java
@@ -15,7 +15,7 @@ public class WeatherChangeEvent extends WeatherEvent implements Cancellable {
     // Paper start
     private final @NotNull Cause cause;
 
-    public WeatherChangeEvent(@NotNull final World world, final boolean to, @NotNull Cause cause) {
+    public WeatherChangeEvent(@NotNull final World world, final boolean to, @NotNull final Cause cause) {
         super(world);
         this.to = to;
         this.cause = cause;
@@ -34,7 +34,7 @@ public class WeatherChangeEvent extends WeatherEvent implements Cancellable {
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         canceled = cancel;
     }
 
diff --git a/src/main/java/org/bukkit/event/world/ChunkUnloadEvent.java b/src/main/java/org/bukkit/event/world/ChunkUnloadEvent.java
index 5d8271626f2c5f649ee1b2ef1dbbde38c76cc340..804946e822b6ee592be9e1c3e08ae5eb311992a6 100644
--- a/src/main/java/org/bukkit/event/world/ChunkUnloadEvent.java
+++ b/src/main/java/org/bukkit/event/world/ChunkUnloadEvent.java
@@ -15,7 +15,7 @@ public class ChunkUnloadEvent extends ChunkEvent {
         this(chunk, true);
     }
 
-    public ChunkUnloadEvent(@NotNull Chunk chunk, boolean save) {
+    public ChunkUnloadEvent(@NotNull final Chunk chunk, final boolean save) {
         super(chunk);
         this.saveChunk = save;
     }
@@ -34,7 +34,7 @@ public class ChunkUnloadEvent extends ChunkEvent {
      *
      * @param saveChunk chunk save status
      */
-    public void setSaveChunk(boolean saveChunk) {
+    public void setSaveChunk(final boolean saveChunk) {
         this.saveChunk = saveChunk;
     }
 
diff --git a/src/main/java/org/bukkit/event/world/EntitiesLoadEvent.java b/src/main/java/org/bukkit/event/world/EntitiesLoadEvent.java
index 07f92b4ecf644c3f8d9d5e01fb8d4147af9fc7f4..c9b983c91cccca684f233841ecda19e80a6c0ec8 100644
--- a/src/main/java/org/bukkit/event/world/EntitiesLoadEvent.java
+++ b/src/main/java/org/bukkit/event/world/EntitiesLoadEvent.java
@@ -16,7 +16,7 @@ public class EntitiesLoadEvent extends ChunkEvent {
     private static final HandlerList handlers = new HandlerList();
     private final @NotNull List<Entity> entities;
 
-    public EntitiesLoadEvent(@NotNull Chunk chunk, @NotNull List<Entity> entities) {
+    public EntitiesLoadEvent(@NotNull final Chunk chunk, @NotNull final List<Entity> entities) {
         super(chunk);
         this.entities = entities;
     }
diff --git a/src/main/java/org/bukkit/event/world/EntitiesUnloadEvent.java b/src/main/java/org/bukkit/event/world/EntitiesUnloadEvent.java
index 053a5e88780e1f3d833a87a5c23d499c7de0219a..854ad5fbfa484389e387aa5ca91bce86d955780a 100644
--- a/src/main/java/org/bukkit/event/world/EntitiesUnloadEvent.java
+++ b/src/main/java/org/bukkit/event/world/EntitiesUnloadEvent.java
@@ -16,7 +16,7 @@ public class EntitiesUnloadEvent extends ChunkEvent {
     private static final HandlerList handlers = new HandlerList();
     private final @NotNull List<Entity> entities;
 
-    public EntitiesUnloadEvent(@NotNull Chunk chunk, @NotNull List<Entity> entities) {
+    public EntitiesUnloadEvent(@NotNull final Chunk chunk, @NotNull final List<Entity> entities) {
         super(chunk);
         this.entities = entities;
     }
diff --git a/src/main/java/org/bukkit/event/world/GenericGameEvent.java b/src/main/java/org/bukkit/event/world/GenericGameEvent.java
index 44374ba7a1a1711c6ecbc1ba8b543bc4065d50c9..762d0c1b78c547f9bb60625b56151ab5f8be7769 100644
--- a/src/main/java/org/bukkit/event/world/GenericGameEvent.java
+++ b/src/main/java/org/bukkit/event/world/GenericGameEvent.java
@@ -24,7 +24,7 @@ public class GenericGameEvent extends WorldEvent implements Cancellable {
     private int radius;
     private boolean cancelled;
 
-    public GenericGameEvent(@NotNull GameEvent event, @NotNull Location location, @Nullable Entity entity, int radius, boolean isAsync) {
+    public GenericGameEvent(@NotNull final GameEvent event, @NotNull final Location location, @Nullable final Entity entity, final int radius, final boolean isAsync) {
         super(location.getWorld(), isAsync);
         this.event = event;
         this.location = location;
@@ -76,13 +76,13 @@ public class GenericGameEvent extends WorldEvent implements Cancellable {
      *
      * @param radius radius, must be greater than or equal to 0
      */
-    public void setRadius(int radius) {
+    public void setRadius(final int radius) {
         Preconditions.checkArgument(radius >= 0, "Radius must be >= 0");
         this.radius = radius;
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.cancelled = cancel;
     }
 
diff --git a/src/main/java/org/bukkit/event/world/LootGenerateEvent.java b/src/main/java/org/bukkit/event/world/LootGenerateEvent.java
index 87b469114b1f79e25428d0316727593767d1b670..f2fe6d8e6b667849acd9c7506f7cb178b59d6740 100644
--- a/src/main/java/org/bukkit/event/world/LootGenerateEvent.java
+++ b/src/main/java/org/bukkit/event/world/LootGenerateEvent.java
@@ -34,7 +34,7 @@ public class LootGenerateEvent extends WorldEvent implements Cancellable {
     private final @NotNull List<ItemStack> loot;
     private final boolean plugin;
 
-    public LootGenerateEvent(@NotNull World world, @Nullable Entity entity, @Nullable InventoryHolder inventoryHolder, @NotNull LootTable lootTable, @NotNull LootContext lootContext, @NotNull List<ItemStack> items, boolean plugin) {
+    public LootGenerateEvent(@NotNull final World world, @Nullable final Entity entity, @Nullable final InventoryHolder inventoryHolder, @NotNull final LootTable lootTable, @NotNull final LootContext lootContext, @NotNull final List<ItemStack> items, final boolean plugin) {
         super(world);
         this.entity = entity;
         this.inventoryHolder = inventoryHolder;
@@ -102,7 +102,7 @@ public class LootGenerateEvent extends WorldEvent implements Cancellable {
      *
      * @param loot the loot to generate, null to clear all loot
      */
-    public void setLoot(@Nullable Collection<ItemStack> loot) {
+    public void setLoot(@Nullable final Collection<ItemStack> loot) {
         this.loot.clear();
         if (loot != null) {
             this.loot.addAll(loot);
@@ -134,7 +134,7 @@ public class LootGenerateEvent extends WorldEvent implements Cancellable {
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.cancelled = cancel;
     }
 
diff --git a/src/main/java/org/bukkit/event/world/PortalCreateEvent.java b/src/main/java/org/bukkit/event/world/PortalCreateEvent.java
index 5ee629ba6d3505cdab66b899cf84b4cd3403b3b9..796604742a0bbb533f47e2eb7dd3aea1aaf064cb 100644
--- a/src/main/java/org/bukkit/event/world/PortalCreateEvent.java
+++ b/src/main/java/org/bukkit/event/world/PortalCreateEvent.java
@@ -20,11 +20,11 @@ public class PortalCreateEvent extends WorldEvent implements Cancellable {
     private final @NotNull CreateReason reason;
 
     @Deprecated
-    public PortalCreateEvent(@NotNull final List<BlockState> blocks, @NotNull final World world, @NotNull CreateReason reason) {
+    public PortalCreateEvent(@NotNull final List<BlockState> blocks, @NotNull final World world, @NotNull final CreateReason reason) {
         this(blocks, world, null, reason);
     }
 
-    public PortalCreateEvent(@NotNull final List<BlockState> blocks, @NotNull final World world, @Nullable Entity entity, @NotNull CreateReason reason) {
+    public PortalCreateEvent(@NotNull final List<BlockState> blocks, @NotNull final World world, @Nullable final Entity entity, @NotNull final CreateReason reason) {
         super(world);
 
         this.blocks = blocks;
@@ -58,7 +58,7 @@ public class PortalCreateEvent extends WorldEvent implements Cancellable {
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.cancel = cancel;
     }
 
diff --git a/src/main/java/org/bukkit/event/world/StructureGrowEvent.java b/src/main/java/org/bukkit/event/world/StructureGrowEvent.java
index a355356d1e6b5b276f5b32774db0d606de613478..e8124ebdd70719619193f7ef9ec368ac8a227d01 100644
--- a/src/main/java/org/bukkit/event/world/StructureGrowEvent.java
+++ b/src/main/java/org/bukkit/event/world/StructureGrowEvent.java
@@ -89,7 +89,7 @@ public class StructureGrowEvent extends WorldEvent implements Cancellable {
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         cancelled = cancel;
     }
 
diff --git a/src/main/java/org/bukkit/event/world/TimeSkipEvent.java b/src/main/java/org/bukkit/event/world/TimeSkipEvent.java
index 30e604e9bfbe7f11b135b14a677ed28ce0f61f8b..c9de0605d11156840389e3d631c80bb9676fff42 100644
--- a/src/main/java/org/bukkit/event/world/TimeSkipEvent.java
+++ b/src/main/java/org/bukkit/event/world/TimeSkipEvent.java
@@ -18,7 +18,7 @@ public class TimeSkipEvent extends WorldEvent implements Cancellable {
     private final @NotNull SkipReason skipReason;
     private long skipAmount;
 
-    public TimeSkipEvent(@NotNull World world, @NotNull SkipReason skipReason, long skipAmount) {
+    public TimeSkipEvent(@NotNull final World world, @NotNull final SkipReason skipReason, final long skipAmount) {
         super(world);
         this.skipReason = skipReason;
         this.skipAmount = skipAmount;
@@ -48,7 +48,7 @@ public class TimeSkipEvent extends WorldEvent implements Cancellable {
      *
      * @param skipAmount Amount of time to skip
      */
-    public void setSkipAmount(long skipAmount) {
+    public void setSkipAmount(final long skipAmount) {
         this.skipAmount = skipAmount;
     }
 
@@ -58,7 +58,7 @@ public class TimeSkipEvent extends WorldEvent implements Cancellable {
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.cancelled = cancel;
     }
 
diff --git a/src/main/java/org/bukkit/event/world/WorldEvent.java b/src/main/java/org/bukkit/event/world/WorldEvent.java
index 210023d9c7199444d51d75033ea5d1f0f9e0c4d4..744dea88f676b58644c43655bdbcfce33cf96636 100644
--- a/src/main/java/org/bukkit/event/world/WorldEvent.java
+++ b/src/main/java/org/bukkit/event/world/WorldEvent.java
@@ -14,7 +14,7 @@ public abstract class WorldEvent extends Event {
         this(world, false);
     }
 
-    public WorldEvent(@NotNull World world, boolean isAsync) {
+    public WorldEvent(@NotNull final World world, final boolean isAsync) {
         super(isAsync);
         this.world = world;
     }
diff --git a/src/main/java/org/bukkit/event/world/WorldUnloadEvent.java b/src/main/java/org/bukkit/event/world/WorldUnloadEvent.java
index 8eeeada8709b4c9c4ae10ea65b90b82f69aaaeaa..096b239f44b3946120a84eb8aed99a5b4242f366 100644
--- a/src/main/java/org/bukkit/event/world/WorldUnloadEvent.java
+++ b/src/main/java/org/bukkit/event/world/WorldUnloadEvent.java
@@ -22,7 +22,7 @@ public class WorldUnloadEvent extends WorldEvent implements Cancellable {
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.isCancelled = cancel;
     }
 
diff --git a/src/main/java/org/bukkit/generator/BlockPopulator.java b/src/main/java/org/bukkit/generator/BlockPopulator.java
index 4704ea919b0cf4dbdf0e02c335ff483f7d3508b9..a57fcf72865b643490fb18f37fd479544b207573 100644
--- a/src/main/java/org/bukkit/generator/BlockPopulator.java
+++ b/src/main/java/org/bukkit/generator/BlockPopulator.java
@@ -36,7 +36,7 @@ public abstract class BlockPopulator {
      * @deprecated Use {@link #populate(WorldInfo, Random, int, int, LimitedRegion)}
      */
     @Deprecated
-    public void populate(@NotNull World world, @NotNull Random random, @NotNull Chunk source) {
+    public void populate(@NotNull final World world, @NotNull final Random random, @NotNull final Chunk source) {
     }
 
     /**
@@ -66,6 +66,6 @@ public abstract class BlockPopulator {
      * @param chunkZ The Z-coordinate of the chunk
      * @param limitedRegion The chunk region to populate
      */
-    public void populate(@NotNull WorldInfo worldInfo, @NotNull Random random, int chunkX, int chunkZ, @NotNull LimitedRegion limitedRegion) {
+    public void populate(@NotNull final WorldInfo worldInfo, @NotNull final Random random, final int chunkX, final int chunkZ, @NotNull final LimitedRegion limitedRegion) {
     }
 }
diff --git a/src/main/java/org/bukkit/generator/ChunkGenerator.java b/src/main/java/org/bukkit/generator/ChunkGenerator.java
index f1f60710ea44a078aa071dbf2d5c0ed3724e31b3..86f562ade3c6adbd1152beecab7bd223cdce8139 100644
--- a/src/main/java/org/bukkit/generator/ChunkGenerator.java
+++ b/src/main/java/org/bukkit/generator/ChunkGenerator.java
@@ -76,7 +76,7 @@ public abstract class ChunkGenerator {
      * @param chunkZ The Z-coordinate of the chunk
      * @param chunkData To modify
      */
-    public void generateNoise(@NotNull WorldInfo worldInfo, @NotNull Random random, int chunkX, int chunkZ, @NotNull ChunkData chunkData) {
+    public void generateNoise(@NotNull final WorldInfo worldInfo, @NotNull final Random random, final int chunkX, final int chunkZ, @NotNull final ChunkData chunkData) {
     }
 
     /**
@@ -103,7 +103,7 @@ public abstract class ChunkGenerator {
      * @param chunkZ The Z-coordinate of the chunk
      * @param chunkData To modify
      */
-    public void generateSurface(@NotNull WorldInfo worldInfo, @NotNull Random random, int chunkX, int chunkZ, @NotNull ChunkData chunkData) {
+    public void generateSurface(@NotNull final WorldInfo worldInfo, @NotNull final Random random, final int chunkX, final int chunkZ, @NotNull final ChunkData chunkData) {
     }
 
     /**
@@ -128,7 +128,7 @@ public abstract class ChunkGenerator {
      * @param chunkZ The Z-coordinate of the chunk
      * @param chunkData To modify
      */
-    public void generateBedrock(@NotNull WorldInfo worldInfo, @NotNull Random random, int chunkX, int chunkZ, @NotNull ChunkData chunkData) {
+    public void generateBedrock(@NotNull final WorldInfo worldInfo, @NotNull final Random random, final int chunkX, final int chunkZ, @NotNull final ChunkData chunkData) {
     }
 
     /**
@@ -155,7 +155,7 @@ public abstract class ChunkGenerator {
      * @param chunkZ The Z-coordinate of the chunk
      * @param chunkData To modify
      */
-    public void generateCaves(@NotNull WorldInfo worldInfo, @NotNull Random random, int chunkX, int chunkZ, @NotNull ChunkData chunkData) {
+    public void generateCaves(@NotNull final WorldInfo worldInfo, @NotNull final Random random, final int chunkX, final int chunkZ, @NotNull final ChunkData chunkData) {
     }
 
     /**
@@ -176,7 +176,7 @@ public abstract class ChunkGenerator {
      * @return BiomeProvider to use to fill the biomes of a chunk
      */
     @Nullable
-    public BiomeProvider getDefaultBiomeProvider(@NotNull WorldInfo worldInfo) {
+    public BiomeProvider getDefaultBiomeProvider(@NotNull final WorldInfo worldInfo) {
         return null;
     }
 
@@ -203,7 +203,7 @@ public abstract class ChunkGenerator {
      * @param heightMap From the highest block should be get
      * @return The y coordinate of the highest block at the given location
      */
-    public int getBaseHeight(@NotNull WorldInfo worldInfo, @NotNull Random random, int x, int z, @NotNull HeightMap heightMap) {
+    public int getBaseHeight(@NotNull final WorldInfo worldInfo, @NotNull final Random random, final int x, final int z, @NotNull final HeightMap heightMap) {
         throw new UnsupportedOperationException("Not implemented");
     }
 
@@ -290,7 +290,7 @@ public abstract class ChunkGenerator {
      */
     @NotNull
     @Deprecated
-    public ChunkData generateChunkData(@NotNull World world, @NotNull Random random, int x, int z, @NotNull BiomeGrid biome) {
+    public ChunkData generateChunkData(@NotNull final World world, @NotNull final Random random, final int x, final int z, @NotNull final BiomeGrid biome) {
         throw new UnsupportedOperationException("Not implemented, no longer needed");
     }
 
@@ -302,7 +302,7 @@ public abstract class ChunkGenerator {
      */
     @NotNull
     @Deprecated
-    protected final ChunkData createChunkData(@NotNull World world) {
+    protected final ChunkData createChunkData(@NotNull final World world) {
         return Bukkit.getServer().createChunkData(world);
     }
 
@@ -314,8 +314,8 @@ public abstract class ChunkGenerator {
      * @param z Z-coordinate of the block to test
      * @return true if the location is valid, otherwise false
      */
-    public boolean canSpawn(@NotNull World world, int x, int z) {
-        Block highest = world.getBlockAt(x, world.getHighestBlockYAt(x, z), z);
+    public boolean canSpawn(@NotNull final World world, final int x, final int z) {
+        final Block highest = world.getBlockAt(x, world.getHighestBlockYAt(x, z), z);
 
         switch (world.getEnvironment()) {
         case NETHER:
@@ -336,7 +336,7 @@ public abstract class ChunkGenerator {
      * @return List containing any amount of BlockPopulators
      */
     @NotNull
-    public List<BlockPopulator> getDefaultPopulators(@NotNull World world) {
+    public List<BlockPopulator> getDefaultPopulators(@NotNull final World world) {
         return new ArrayList<BlockPopulator>();
     }
 
@@ -351,7 +351,7 @@ public abstract class ChunkGenerator {
      * @return Location containing a new spawn point, otherwise null
      */
     @Nullable
-    public Location getFixedSpawnLocation(@NotNull World world, @NotNull Random random) {
+    public Location getFixedSpawnLocation(@NotNull final World world, @NotNull final Random random) {
         return null;
     }
 
@@ -588,7 +588,7 @@ public abstract class ChunkGenerator {
      *
      */
     @NotNull
-    public ChunkData createVanillaChunkData(@NotNull World world, int x, int z) {
+    public ChunkData createVanillaChunkData(@NotNull final World world, final int x, final int z) {
         return Bukkit.getServer().createVanillaChunkData(world, x, z);
     }
     // Paper end
diff --git a/src/main/java/org/bukkit/generator/LimitedRegion.java b/src/main/java/org/bukkit/generator/LimitedRegion.java
index 5e9640d4b49492d3e119e13703ef7fa1c401edeb..351a65255e2ef5877324ddbaaf726ac8f5e7c684 100644
--- a/src/main/java/org/bukkit/generator/LimitedRegion.java
+++ b/src/main/java/org/bukkit/generator/LimitedRegion.java
@@ -67,7 +67,7 @@ public interface LimitedRegion extends RegionAccessor {
      * @param vector {@link Vector} representing the position of the block to set.
      * @param data   {@link BlockData} to set the block at the provided coordinates to.
      */
-    default void setBlockData(@NotNull Vector vector, @NotNull BlockData data) {
+    default void setBlockData(@NotNull final Vector vector, @NotNull final BlockData data) {
         setBlockData(vector.getBlockX(), vector.getBlockY(), vector.getBlockZ(), data);
     }
 
@@ -87,7 +87,7 @@ public interface LimitedRegion extends RegionAccessor {
      * @param location Location to set block state.
      * @param state The block state.
      */
-    default void setBlockState(@NotNull Vector location, @NotNull BlockState state) {
+    default void setBlockState(@NotNull final Vector location, @NotNull final BlockState state) {
         setBlockState(location.getBlockX(), location.getBlockY(), location.getBlockZ(), state);
     }
 
@@ -98,7 +98,7 @@ public interface LimitedRegion extends RegionAccessor {
      * @return The block state.
      */
     @NotNull
-    default BlockState getBlockState(@NotNull Vector location) {
+    default BlockState getBlockState(@NotNull final Vector location) {
         return getBlockState(location.getBlockX(), location.getBlockY(), location.getBlockZ());
     }
 
@@ -116,7 +116,7 @@ public interface LimitedRegion extends RegionAccessor {
      *
      * @param location {@link Vector} representing the position of the block to update.
      */
-    default void scheduleBlockUpdate(@NotNull Vector location) {
+    default void scheduleBlockUpdate(@NotNull final Vector location) {
         scheduleBlockUpdate(location.getBlockX(), location.getBlockY(), location.getBlockZ());
     }
 
@@ -134,7 +134,7 @@ public interface LimitedRegion extends RegionAccessor {
      *
      * @param location {@link Vector} representing the position of the block to update.
      */
-    default void scheduleFluidUpdate(@NotNull Vector location) {
+    default void scheduleFluidUpdate(@NotNull final Vector location) {
         scheduleFluidUpdate(location.getBlockX(), location.getBlockY(), location.getBlockZ());
     }
 
@@ -155,7 +155,7 @@ public interface LimitedRegion extends RegionAccessor {
      * @return {@link BlockData} at the coordinates
      */
     @NotNull
-    default BlockData getBlockData(@NotNull Vector vector) {
+    default BlockData getBlockData(@NotNull final Vector vector) {
         return getBlockData(vector.getBlockX(), vector.getBlockY(), vector.getBlockZ());
     }
 
diff --git a/src/main/java/org/bukkit/generator/structure/Structure.java b/src/main/java/org/bukkit/generator/structure/Structure.java
index c3e02105ea231bba109d783624c55a9949a07876..611f54d8d86ac9caad2f5540255db7aa38be9707 100644
--- a/src/main/java/org/bukkit/generator/structure/Structure.java
+++ b/src/main/java/org/bukkit/generator/structure/Structure.java
@@ -49,7 +49,7 @@ public abstract class Structure implements Keyed {
     public static final @Nullable Structure RUINED_PORTAL_NETHER = getStructure("ruined_portal_nether");
     public static final @Nullable Structure ANCIENT_CITY = getStructure("ancient_city");
 
-    private static @Nullable Structure getStructure(@NotNull String name) {
+    private static @Nullable Structure getStructure(@NotNull final String name) {
         return Registry.STRUCTURE.get(NamespacedKey.minecraft(name));
     }
 
diff --git a/src/main/java/org/bukkit/generator/structure/StructureType.java b/src/main/java/org/bukkit/generator/structure/StructureType.java
index e9eb5c1eb01b0eebc3dd5de8ad01870d79305bec..ed5986c96e4615ed00f73e0351dc6b963d10e616 100644
--- a/src/main/java/org/bukkit/generator/structure/StructureType.java
+++ b/src/main/java/org/bukkit/generator/structure/StructureType.java
@@ -34,7 +34,7 @@ public abstract class StructureType implements Keyed {
     public static final @Nullable StructureType SWAMP_HUT = getStructureType("swamp_hut");
     public static final @Nullable StructureType WOODLAND_MANSION = getStructureType("woodland_mansion");
 
-    private static @Nullable StructureType getStructureType(@NotNull String name) {
+    private static @Nullable StructureType getStructureType(@NotNull final String name) {
         return Registry.STRUCTURE_TYPE.get(NamespacedKey.minecraft(name));
     }
 }
diff --git a/src/main/java/org/bukkit/help/GenericCommandHelpTopic.java b/src/main/java/org/bukkit/help/GenericCommandHelpTopic.java
index 8d0196a0644f3eaa311aca5b3fd53a28538e0a64..14cdd1e8ee288344fe18cf668368153a5e3e9c18 100644
--- a/src/main/java/org/bukkit/help/GenericCommandHelpTopic.java
+++ b/src/main/java/org/bukkit/help/GenericCommandHelpTopic.java
@@ -17,7 +17,7 @@ public class GenericCommandHelpTopic extends HelpTopic {
 
     protected Command command;
 
-    public GenericCommandHelpTopic(@NotNull Command command) {
+    public GenericCommandHelpTopic(@NotNull final Command command) {
         this.command = command;
 
         if (command.getLabel().startsWith("/")) {
@@ -27,7 +27,7 @@ public class GenericCommandHelpTopic extends HelpTopic {
         }
 
         // The short text is the first line of the description
-        int i = command.getDescription().indexOf('\n');
+        final int i = command.getDescription().indexOf('\n');
         if (i > 1) {
             shortText = command.getDescription().substring(0, i - 1);
         } else {
@@ -35,7 +35,7 @@ public class GenericCommandHelpTopic extends HelpTopic {
         }
 
         // Build full text
-        StringBuilder sb = new StringBuilder();
+        final StringBuilder sb = new StringBuilder();
 
         sb.append(ChatColor.GOLD);
         sb.append("Description: ");
@@ -60,7 +60,7 @@ public class GenericCommandHelpTopic extends HelpTopic {
     }
 
     @Override
-    public boolean canSee(@NotNull CommandSender sender) {
+    public boolean canSee(@NotNull final CommandSender sender) {
         if (!command.isRegistered()) {
             // Unregistered commands should not show up in the help
             return false;
diff --git a/src/main/java/org/bukkit/help/HelpTopic.java b/src/main/java/org/bukkit/help/HelpTopic.java
index a3d57946346de4b27c733b33c02887a8ebee9ff6..0554fc09087d0a9e64a5f9402d4f1bc37bf4c4eb 100644
--- a/src/main/java/org/bukkit/help/HelpTopic.java
+++ b/src/main/java/org/bukkit/help/HelpTopic.java
@@ -45,7 +45,7 @@ public abstract class HelpTopic {
      * @param amendedPermission The permission node the server administrator
      *     wishes to apply to this topic.
      */
-    public void amendCanSee(@Nullable String amendedPermission) {
+    public void amendCanSee(@Nullable final String amendedPermission) {
         this.amendedPermission = amendedPermission;
     }
 
@@ -82,7 +82,7 @@ public abstract class HelpTopic {
      * @return A full topic description.
      */
     @NotNull
-    public String getFullText(@NotNull CommandSender forWho) {
+    public String getFullText(@NotNull final CommandSender forWho) {
         return fullText;
     }
 
@@ -100,7 +100,7 @@ public abstract class HelpTopic {
      * @param amendedFullText The new topic full text to use, or null to leave
      *     alone.
      */
-    public void amendTopic(@Nullable String amendedShortText, @Nullable String amendedFullText) {
+    public void amendTopic(@Nullable final String amendedShortText, @Nullable final String amendedFullText) {
         shortText = applyAmendment(shortText, amendedShortText);
         fullText = applyAmendment(fullText, amendedFullText);
     }
@@ -117,7 +117,7 @@ public abstract class HelpTopic {
      *     according to the expected rules of amendTopic().
      */
     @NotNull
-    protected String applyAmendment(@NotNull String baseText, @Nullable String amendment) {
+    protected String applyAmendment(@NotNull final String baseText, @Nullable final String amendment) {
         if (amendment == null) {
             return baseText;
         } else {
diff --git a/src/main/java/org/bukkit/help/HelpTopicComparator.java b/src/main/java/org/bukkit/help/HelpTopicComparator.java
index e1f4930f4d7cf657a75282b4c3480cabaaee2765..6c80c392ad5b15dfce6ac456b506f693097de823 100644
--- a/src/main/java/org/bukkit/help/HelpTopicComparator.java
+++ b/src/main/java/org/bukkit/help/HelpTopicComparator.java
@@ -27,7 +27,7 @@ public final class HelpTopicComparator implements Comparator<HelpTopic> {
     private HelpTopicComparator() {}
 
     @Override
-    public int compare(@NotNull HelpTopic lhs, @NotNull HelpTopic rhs) {
+    public int compare(@NotNull final HelpTopic lhs, @NotNull final HelpTopic rhs) {
         return tnc.compare(lhs.getName(), rhs.getName());
     }
 
@@ -35,9 +35,9 @@ public final class HelpTopicComparator implements Comparator<HelpTopic> {
         private TopicNameComparator() {}
 
         @Override
-        public int compare(@NotNull String lhs, @NotNull String rhs) {
-            boolean lhsStartSlash = lhs.startsWith("/");
-            boolean rhsStartSlash = rhs.startsWith("/");
+        public int compare(@NotNull final String lhs, @NotNull final String rhs) {
+            final boolean lhsStartSlash = lhs.startsWith("/");
+            final boolean rhsStartSlash = rhs.startsWith("/");
 
             if (lhsStartSlash && !rhsStartSlash) {
                 return 1;
diff --git a/src/main/java/org/bukkit/help/IndexHelpTopic.java b/src/main/java/org/bukkit/help/IndexHelpTopic.java
index 7c5d72fb554717049b44b470f77a40b0f805b50c..25c4d78c981b4c72909f523617baa6d22161a4e2 100644
--- a/src/main/java/org/bukkit/help/IndexHelpTopic.java
+++ b/src/main/java/org/bukkit/help/IndexHelpTopic.java
@@ -23,11 +23,11 @@ public class IndexHelpTopic extends HelpTopic {
     protected String preamble;
     protected Collection<HelpTopic> allTopics;
 
-    public IndexHelpTopic(@NotNull String name, @Nullable String shortText, @Nullable String permission, @NotNull Collection<HelpTopic> topics) {
+    public IndexHelpTopic(@NotNull final String name, @Nullable final String shortText, @Nullable final String permission, @NotNull final Collection<HelpTopic> topics) {
         this(name, shortText, permission, topics, null);
     }
 
-    public IndexHelpTopic(@NotNull String name, @Nullable String shortText, @Nullable String permission, @NotNull Collection<HelpTopic> topics, @Nullable String preamble) {
+    public IndexHelpTopic(@NotNull final String name, @Nullable final String shortText, @Nullable final String permission, @NotNull final Collection<HelpTopic> topics, @Nullable final String preamble) {
         this.name = name;
         this.shortText = (shortText == null) ? "" : shortText;
         this.permission = permission;
@@ -40,12 +40,12 @@ public class IndexHelpTopic extends HelpTopic {
      *
      * @param topics The topics to set.
      */
-    protected void setTopicsCollection(@NotNull Collection<HelpTopic> topics) {
+    protected void setTopicsCollection(@NotNull final Collection<HelpTopic> topics) {
         this.allTopics = topics;
     }
 
     @Override
-    public boolean canSee(@NotNull CommandSender sender) {
+    public boolean canSee(@NotNull final CommandSender sender) {
         if (sender instanceof ConsoleCommandSender) {
             return true;
         }
@@ -56,23 +56,23 @@ public class IndexHelpTopic extends HelpTopic {
     }
 
     @Override
-    public void amendCanSee(@Nullable String amendedPermission) {
+    public void amendCanSee(@Nullable final String amendedPermission) {
         permission = amendedPermission;
     }
 
     @Override
     @NotNull
-    public String getFullText(@NotNull CommandSender sender) {
-        StringBuilder sb = new StringBuilder();
+    public String getFullText(@NotNull final CommandSender sender) {
+        final StringBuilder sb = new StringBuilder();
 
         if (preamble != null) {
             sb.append(buildPreamble(sender));
             sb.append("\n");
         }
 
-        for (HelpTopic topic : allTopics) {
+        for (final HelpTopic topic : allTopics) {
             if (topic.canSee(sender)) {
-                String lineStr = buildIndexLine(sender, topic).replace("\n", ". ");
+                final String lineStr = buildIndexLine(sender, topic).replace("\n", ". ");
                 if (sender instanceof Player && lineStr.length() > ChatPaginator.GUARANTEED_NO_WRAP_CHAT_PAGE_WIDTH) {
                     sb.append(lineStr, 0, ChatPaginator.GUARANTEED_NO_WRAP_CHAT_PAGE_WIDTH - 3);
                     sb.append("...");
@@ -93,7 +93,7 @@ public class IndexHelpTopic extends HelpTopic {
      * @return The topic preamble.
      */
     @NotNull
-    protected String buildPreamble(@NotNull CommandSender sender) {
+    protected String buildPreamble(@NotNull final CommandSender sender) {
         return ChatColor.GRAY + preamble;
     }
 
@@ -106,7 +106,7 @@ public class IndexHelpTopic extends HelpTopic {
      * @return The rendered index line.
      */
     @NotNull
-    protected String buildIndexLine(@NotNull CommandSender sender, @NotNull HelpTopic topic) {
+    protected String buildIndexLine(@NotNull final CommandSender sender, @NotNull final HelpTopic topic) {
 	    final String line = ChatColor.GOLD +
 		    topic.getName() +
 		    ": " +
diff --git a/src/main/java/org/bukkit/inventory/AnvilInventory.java b/src/main/java/org/bukkit/inventory/AnvilInventory.java
index c60be4fd24c7fdf65251dd6169e5e1ac3b588d95..e847964e55d260f1487604cc2d3221eb2b706b6e 100644
--- a/src/main/java/org/bukkit/inventory/AnvilInventory.java
+++ b/src/main/java/org/bukkit/inventory/AnvilInventory.java
@@ -80,7 +80,7 @@ public interface AnvilInventory extends Inventory {
      *
      * @param firstItem item to set
      */
-    default void setFirstItem(@Nullable ItemStack firstItem) {
+    default void setFirstItem(@Nullable final ItemStack firstItem) {
         setItem(0, firstItem);
     }
 
@@ -99,7 +99,7 @@ public interface AnvilInventory extends Inventory {
      *
      * @param secondItem item to set
      */
-    default void setSecondItem(@Nullable ItemStack secondItem) {
+    default void setSecondItem(@Nullable final ItemStack secondItem) {
         setItem(1, secondItem);
     }
 
@@ -119,7 +119,7 @@ public interface AnvilInventory extends Inventory {
      *
      * @param result item to set
      */
-    default void setResult(@Nullable ItemStack result) {
+    default void setResult(@Nullable final ItemStack result) {
         setItem(2, result);
     }
     // Paper end
diff --git a/src/main/java/org/bukkit/inventory/BlastingRecipe.java b/src/main/java/org/bukkit/inventory/BlastingRecipe.java
index 74a025a90c9f4cd4bb3c42a53f54fe53a39e656a..1eddd95ce08eca605d92054c66c8786cabdb1aad 100644
--- a/src/main/java/org/bukkit/inventory/BlastingRecipe.java
+++ b/src/main/java/org/bukkit/inventory/BlastingRecipe.java
@@ -9,11 +9,11 @@ import org.jetbrains.annotations.NotNull;
  */
 public class BlastingRecipe extends CookingRecipe<BlastingRecipe> {
 
-    public BlastingRecipe(@NotNull NamespacedKey key, @NotNull ItemStack result, @NotNull Material source, float experience, int cookingTime) {
+    public BlastingRecipe(@NotNull final NamespacedKey key, @NotNull final ItemStack result, @NotNull final Material source, final float experience, final int cookingTime) {
         super(key, result, source, experience, cookingTime);
     }
 
-    public BlastingRecipe(@NotNull NamespacedKey key, @NotNull ItemStack result, @NotNull RecipeChoice input, float experience, int cookingTime) {
+    public BlastingRecipe(@NotNull final NamespacedKey key, @NotNull final ItemStack result, @NotNull final RecipeChoice input, final float experience, final int cookingTime) {
         super(key, result, input, experience, cookingTime);
     }
 }
diff --git a/src/main/java/org/bukkit/inventory/CampfireRecipe.java b/src/main/java/org/bukkit/inventory/CampfireRecipe.java
index a1bd3a68d004c19b162dd1ce6b951eaa533f295e..313ddb57d9928a6e09ea2616334f260e9e47d31e 100644
--- a/src/main/java/org/bukkit/inventory/CampfireRecipe.java
+++ b/src/main/java/org/bukkit/inventory/CampfireRecipe.java
@@ -9,11 +9,11 @@ import org.jetbrains.annotations.NotNull;
  */
 public class CampfireRecipe extends CookingRecipe<CampfireRecipe> {
 
-    public CampfireRecipe(@NotNull NamespacedKey key, @NotNull ItemStack result, @NotNull Material source, float experience, int cookingTime) {
+    public CampfireRecipe(@NotNull final NamespacedKey key, @NotNull final ItemStack result, @NotNull final Material source, final float experience, final int cookingTime) {
         super(key, result, source, experience, cookingTime);
     }
 
-    public CampfireRecipe(@NotNull NamespacedKey key, @NotNull ItemStack result, @NotNull RecipeChoice input, float experience, int cookingTime) {
+    public CampfireRecipe(@NotNull final NamespacedKey key, @NotNull final ItemStack result, @NotNull final RecipeChoice input, final float experience, final int cookingTime) {
         super(key, result, input, experience, cookingTime);
     }
 }
diff --git a/src/main/java/org/bukkit/inventory/CookingRecipe.java b/src/main/java/org/bukkit/inventory/CookingRecipe.java
index 1ea8ef6debb15fea9184ce325385d641360dea13..5a929ce3e40dbde3b3971539a4378dbd7d4bb6fb 100644
--- a/src/main/java/org/bukkit/inventory/CookingRecipe.java
+++ b/src/main/java/org/bukkit/inventory/CookingRecipe.java
@@ -30,7 +30,7 @@ public abstract class CookingRecipe<T extends CookingRecipe> implements Recipe,
      * @param experience The experience given by this recipe
      * @param cookingTime The cooking time (in ticks)
      */
-    public CookingRecipe(@NotNull NamespacedKey key, @NotNull ItemStack result, @NotNull Material source, float experience, int cookingTime) {
+    public CookingRecipe(@NotNull final NamespacedKey key, @NotNull final ItemStack result, @NotNull final Material source, final float experience, final int cookingTime) {
         this(key, result, new RecipeChoice.MaterialChoice(Collections.singletonList(source)), experience, cookingTime);
     }
 
@@ -43,7 +43,7 @@ public abstract class CookingRecipe<T extends CookingRecipe> implements Recipe,
      * @param experience The experience given by this recipe
      * @param cookingTime The cooking time (in ticks)
      */
-    public CookingRecipe(@NotNull NamespacedKey key, @NotNull ItemStack result, @NotNull RecipeChoice input, float experience, int cookingTime) {
+    public CookingRecipe(@NotNull final NamespacedKey key, @NotNull final ItemStack result, @NotNull final RecipeChoice input, final float experience, final int cookingTime) {
         Preconditions.checkArgument(result.getType() != Material.AIR, "Recipe must have non-AIR result.");
         this.key = key;
         this.output = new ItemStack(result);
@@ -59,7 +59,7 @@ public abstract class CookingRecipe<T extends CookingRecipe> implements Recipe,
      * @return The changed recipe, so you can chain calls.
      */
     @NotNull
-    public CookingRecipe setInput(@NotNull Material input) {
+    public CookingRecipe setInput(@NotNull final Material input) {
         this.ingredient = new RecipeChoice.MaterialChoice(Collections.singletonList(input));
         return this;
     }
@@ -83,7 +83,7 @@ public abstract class CookingRecipe<T extends CookingRecipe> implements Recipe,
      * @return The changed recipe, so you can chain calls.
      */
     @NotNull
-    public T setInputChoice(@NotNull RecipeChoice input) {
+    public T setInputChoice(@NotNull final RecipeChoice input) {
         this.ingredient = input;
         return (T) this;
     }
@@ -114,7 +114,7 @@ public abstract class CookingRecipe<T extends CookingRecipe> implements Recipe,
      *
      * @param experience the experience level
      */
-    public void setExperience(float experience) {
+    public void setExperience(final float experience) {
         this.experience = experience;
     }
 
@@ -132,7 +132,7 @@ public abstract class CookingRecipe<T extends CookingRecipe> implements Recipe,
      *
      * @param cookingTime new cooking time
      */
-    public void setCookingTime(int cookingTime) {
+    public void setCookingTime(final int cookingTime) {
         Preconditions.checkArgument(cookingTime >= 0, "cookingTime must be >= 0");
         this.cookingTime = cookingTime;
     }
@@ -170,7 +170,7 @@ public abstract class CookingRecipe<T extends CookingRecipe> implements Recipe,
      * @param group recipe group. An empty string denotes no group. May not be
      * null.
      */
-    public void setGroup(@NotNull String group) {
+    public void setGroup(@NotNull final String group) {
         Preconditions.checkArgument(group != null, "group cannot be null");
         this.group = group;
     }
diff --git a/src/main/java/org/bukkit/inventory/CreativeCategory.java b/src/main/java/org/bukkit/inventory/CreativeCategory.java
index 7f2c6882d36ee9e3409de1714813022b97e3f096..5416d3b2077bcfc2a2cd191892c9f071b3a21613 100644
--- a/src/main/java/org/bukkit/inventory/CreativeCategory.java
+++ b/src/main/java/org/bukkit/inventory/CreativeCategory.java
@@ -56,7 +56,7 @@ public enum CreativeCategory implements net.kyori.adventure.translation.Translat
     // Paper start
     private final @NotNull String translationKey;
 
-    CreativeCategory(String translationKey) {
+    CreativeCategory(final String translationKey) {
         this.translationKey = "itemGroup." + translationKey;
     }
 
diff --git a/src/main/java/org/bukkit/inventory/FurnaceRecipe.java b/src/main/java/org/bukkit/inventory/FurnaceRecipe.java
index bfdb87d1dd148c0599cb0613c1aee4debbfdca72..295387c9cb949f563e6c24f84eed2162e839178c 100644
--- a/src/main/java/org/bukkit/inventory/FurnaceRecipe.java
+++ b/src/main/java/org/bukkit/inventory/FurnaceRecipe.java
@@ -12,22 +12,22 @@ import org.jetbrains.annotations.NotNull;
 public class FurnaceRecipe extends CookingRecipe<FurnaceRecipe> {
 
     @Deprecated
-    public FurnaceRecipe(@NotNull ItemStack result, @NotNull Material source) {
+    public FurnaceRecipe(@NotNull final ItemStack result, @NotNull final Material source) {
         this(NamespacedKey.randomKey(), result, source, 0, 0, 200);
     }
 
     @Deprecated
-    public FurnaceRecipe(@NotNull ItemStack result, @NotNull MaterialData source) {
+    public FurnaceRecipe(@NotNull final ItemStack result, @NotNull final MaterialData source) {
         this(NamespacedKey.randomKey(), result, source.getItemType(), source.getData(), 0, 200);
     }
 
     @Deprecated
-    public FurnaceRecipe(@NotNull ItemStack result, @NotNull MaterialData source, float experience) {
+    public FurnaceRecipe(@NotNull final ItemStack result, @NotNull final MaterialData source, final float experience) {
         this(NamespacedKey.randomKey(), result, source.getItemType(), source.getData(), experience, 200);
     }
 
     @Deprecated
-    public FurnaceRecipe(@NotNull ItemStack result, @NotNull Material source, int data) {
+    public FurnaceRecipe(@NotNull final ItemStack result, @NotNull final Material source, final int data) {
         this(NamespacedKey.randomKey(), result, source, data, 0, 200);
     }
 
@@ -40,12 +40,12 @@ public class FurnaceRecipe extends CookingRecipe<FurnaceRecipe> {
      * @param experience The experience given by this recipe
      * @param cookingTime The cooking time (in ticks)
      */
-    public FurnaceRecipe(@NotNull NamespacedKey key, @NotNull ItemStack result, @NotNull Material source, float experience, int cookingTime) {
+    public FurnaceRecipe(@NotNull final NamespacedKey key, @NotNull final ItemStack result, @NotNull final Material source, final float experience, final int cookingTime) {
         this(key, result, source, 0, experience, cookingTime);
     }
 
     @Deprecated
-    public FurnaceRecipe(@NotNull NamespacedKey key, @NotNull ItemStack result, @NotNull Material source, int data, float experience, int cookingTime) {
+    public FurnaceRecipe(@NotNull final NamespacedKey key, @NotNull final ItemStack result, @NotNull final Material source, final int data, final float experience, final int cookingTime) {
         this(key, result, new RecipeChoice.MaterialChoice(Collections.singletonList(source)), experience, cookingTime);
     }
 
@@ -58,7 +58,7 @@ public class FurnaceRecipe extends CookingRecipe<FurnaceRecipe> {
      * @param experience The experience given by this recipe
      * @param cookingTime The cooking time (in ticks)
      */
-    public FurnaceRecipe(@NotNull NamespacedKey key, @NotNull ItemStack result, @NotNull RecipeChoice input, float experience, int cookingTime) {
+    public FurnaceRecipe(@NotNull final NamespacedKey key, @NotNull final ItemStack result, @NotNull final RecipeChoice input, final float experience, final int cookingTime) {
         super(key, result, input, experience, cookingTime);
     }
 
@@ -71,13 +71,13 @@ public class FurnaceRecipe extends CookingRecipe<FurnaceRecipe> {
      */
     @NotNull
     @Deprecated
-    public FurnaceRecipe setInput(@NotNull MaterialData input) {
+    public FurnaceRecipe setInput(@NotNull final MaterialData input) {
         return setInput(input.getItemType(), input.getData());
     }
 
     @NotNull
     @Override
-    public FurnaceRecipe setInput(@NotNull Material input) {
+    public FurnaceRecipe setInput(@NotNull final Material input) {
         return (FurnaceRecipe) super.setInput(input);
     }
 
@@ -91,13 +91,13 @@ public class FurnaceRecipe extends CookingRecipe<FurnaceRecipe> {
      * @deprecated Magic value
      */
     @Deprecated
-    public @NotNull FurnaceRecipe setInput(@NotNull Material input, int data) {
+    public @NotNull FurnaceRecipe setInput(@NotNull final Material input, final int data) {
         return setInputChoice(new RecipeChoice.MaterialChoice(Collections.singletonList(input)));
     }
 
     @NotNull
     @Override
-    public FurnaceRecipe setInputChoice(@NotNull RecipeChoice input) {
+    public FurnaceRecipe setInputChoice(@NotNull final RecipeChoice input) {
         return super.setInputChoice(input);
     }
 }
diff --git a/src/main/java/org/bukkit/inventory/GrindstoneInventory.java b/src/main/java/org/bukkit/inventory/GrindstoneInventory.java
index 1c750108f55a0a31ad23433b333e0ea486a63ff2..4e2851676fb10c1a11cb0cd692c25655ffbd866a 100644
--- a/src/main/java/org/bukkit/inventory/GrindstoneInventory.java
+++ b/src/main/java/org/bukkit/inventory/GrindstoneInventory.java
@@ -23,7 +23,7 @@ public interface GrindstoneInventory extends Inventory {
      *
      * @param upperItem item to set
      */
-    default void setUpperItem(@Nullable ItemStack upperItem) {
+    default void setUpperItem(@Nullable final ItemStack upperItem) {
         setItem(0, upperItem);
     }
 
@@ -42,7 +42,7 @@ public interface GrindstoneInventory extends Inventory {
      *
      * @param lowerItem item to set
      */
-    default void setLowerItem(@Nullable ItemStack lowerItem) {
+    default void setLowerItem(@Nullable final ItemStack lowerItem) {
         setItem(1, lowerItem);
     }
 
@@ -61,7 +61,7 @@ public interface GrindstoneInventory extends Inventory {
      *
      * @param result item to set
      */
-    default void setResult(@Nullable ItemStack result) {
+    default void setResult(@Nullable final ItemStack result) {
         setItem(2, result);
     }
     // Paper end
diff --git a/src/main/java/org/bukkit/inventory/InventoryView.java b/src/main/java/org/bukkit/inventory/InventoryView.java
index 2448e70d75ae7a678c6befac4506c103edb78875..00912c571d84b72a7a6cb8f452892502e4ecf3a6 100644
--- a/src/main/java/org/bukkit/inventory/InventoryView.java
+++ b/src/main/java/org/bukkit/inventory/InventoryView.java
@@ -112,7 +112,7 @@ public abstract class InventoryView {
         BOOK_PAGE(0, InventoryType.LECTERN);
         int id;
         InventoryType style;
-        private Property(int id, /*@NotNull*/ InventoryType appliesTo) {
+        private Property(final int id, /*@NotNull*/ final InventoryType appliesTo) {
             this.id = id;
             style = appliesTo;
         }
@@ -176,8 +176,8 @@ public abstract class InventoryView {
      * @param slot The ID as returned by InventoryClickEvent.getRawSlot()
      * @param item The new item to put in the slot, or null to clear it.
      */
-    public void setItem(int slot, @Nullable ItemStack item) {
-        Inventory inventory = getInventory(slot);
+    public void setItem(final int slot, @Nullable final ItemStack item) {
+        final Inventory inventory = getInventory(slot);
         if (inventory != null) {
             inventory.setItem(convertSlot(slot), item);
         } else if (item != null) {
@@ -192,8 +192,8 @@ public abstract class InventoryView {
      * @return The item currently in the slot.
      */
     @Nullable
-    public ItemStack getItem(int slot) {
-        Inventory inventory = getInventory(slot);
+    public ItemStack getItem(final int slot) {
+        final Inventory inventory = getInventory(slot);
         return (inventory == null) ? null : inventory.getItem(convertSlot(slot));
     }
 
@@ -203,7 +203,7 @@ public abstract class InventoryView {
      * @param item The item to put on the cursor, or null to remove the item
      *     on their cursor.
      */
-    public final void setCursor(@Nullable ItemStack item) {
+    public final void setCursor(@Nullable final ItemStack item) {
         getPlayer().setItemOnCursor(item);
     }
 
@@ -231,7 +231,7 @@ public abstract class InventoryView {
      * @return corresponding inventory, or null
      */
     @Nullable
-    public final Inventory getInventory(int rawSlot) {
+    public final Inventory getInventory(final int rawSlot) {
         // Slot may be -1 if not properly detected due to client bug
         // e.g. dropping an item into part of the enchantment list section of an enchanting table
         if (rawSlot == OUTSIDE || rawSlot == -1) {
@@ -259,8 +259,8 @@ public abstract class InventoryView {
      * @param rawSlot The raw slot ID.
      * @return The converted slot ID.
      */
-    public final int convertSlot(int rawSlot) {
-        int numInTop = getTopInventory().getSize();
+    public final int convertSlot(final int rawSlot) {
+        final int numInTop = getTopInventory().getSize();
         // Index from the top inventory as having slots from [0,size]
         if (rawSlot < numInTop) {
             return rawSlot;
@@ -333,7 +333,7 @@ public abstract class InventoryView {
      * @return the slot type
      */
     @NotNull
-    public final InventoryType.SlotType getSlotType(int slot) {
+    public final InventoryType.SlotType getSlotType(final int slot) {
         InventoryType.SlotType type = InventoryType.SlotType.CONTAINER;
         if (slot >= 0 && slot < this.getTopInventory().getSize()) {
             switch (this.getType()) {
@@ -442,7 +442,7 @@ public abstract class InventoryView {
      * @return true if the property was updated successfully, false if the
      *     property is not supported by that inventory
      */
-    public final boolean setProperty(@NotNull Property prop, int value) {
+    public final boolean setProperty(@NotNull final Property prop, final int value) {
         return getPlayer().setWindowProperty(prop, value);
     }
 
diff --git a/src/main/java/org/bukkit/inventory/ItemStack.java b/src/main/java/org/bukkit/inventory/ItemStack.java
index 761b5c0336802ff421f798cf7788cb4ecb171b45..a86bf2a27dd66c6f8abb91d9498992800d632697 100644
--- a/src/main/java/org/bukkit/inventory/ItemStack.java
+++ b/src/main/java/org/bukkit/inventory/ItemStack.java
@@ -135,7 +135,7 @@ public class ItemStack implements Cloneable, ConfigurationSerializable, net.kyor
      * @param type New type to set the items in this stack to
      */
     @Utility
-    public void setType(@NotNull Material type) {
+    public void setType(@NotNull final Material type) {
         Preconditions.checkArgument(type != null, "Material cannot be null");
         this.type = type;
         if (this.meta != null) {
@@ -162,7 +162,7 @@ public class ItemStack implements Cloneable, ConfigurationSerializable, net.kyor
      *
      * @param amount New amount of items in this stack
      */
-    public void setAmount(int amount) {
+    public void setAmount(final int amount) {
         this.amount = amount;
     }
 
@@ -175,7 +175,7 @@ public class ItemStack implements Cloneable, ConfigurationSerializable, net.kyor
     @Nullable
     @Deprecated // Paper
     public MaterialData getData() {
-        Material mat = Bukkit.getUnsafe().toLegacy(getType());
+        final Material mat = Bukkit.getUnsafe().toLegacy(getType());
         if (data == null && mat != null && mat.getData() != null) {
             data = mat.getNewData((byte) this.getDurability());
         }
@@ -190,11 +190,11 @@ public class ItemStack implements Cloneable, ConfigurationSerializable, net.kyor
      * @deprecated cast to {@link org.bukkit.inventory.meta.BlockDataMeta} and use {@link org.bukkit.inventory.meta.BlockDataMeta#setBlockData(org.bukkit.block.data.BlockData)}
      */
     @Deprecated // Paper
-    public void setData(@Nullable MaterialData data) {
+    public void setData(@Nullable final MaterialData data) {
         if (data == null) {
             this.data = data;
         } else {
-            Material mat = Bukkit.getUnsafe().toLegacy(getType());
+            final Material mat = Bukkit.getUnsafe().toLegacy(getType());
 
             if ((data.getClass() == mat.getData()) || (data.getClass() == MaterialData.class)) {
                 this.data = data;
@@ -216,7 +216,7 @@ public class ItemStack implements Cloneable, ConfigurationSerializable, net.kyor
      */
     @Deprecated
     public void setDurability(final short durability) {
-        ItemMeta meta = getItemMeta();
+        final ItemMeta meta = getItemMeta();
         if (meta != null) {
             ((Damageable) meta).setDamage(durability);
             setItemMeta(meta);
@@ -231,7 +231,7 @@ public class ItemStack implements Cloneable, ConfigurationSerializable, net.kyor
      */
     @Deprecated
     public short getDurability() {
-        ItemMeta meta = getItemMeta();
+        final ItemMeta meta = getItemMeta();
         return (meta == null) ? 0 : (short) ((Damageable) meta).getDamage();
     }
 
@@ -243,7 +243,7 @@ public class ItemStack implements Cloneable, ConfigurationSerializable, net.kyor
      */
     @Utility
     public int getMaxStackSize() {
-        Material material = getType();
+        final Material material = getType();
         if (material != null) {
             return material.getMaxStackSize();
         }
@@ -257,7 +257,7 @@ public class ItemStack implements Cloneable, ConfigurationSerializable, net.kyor
     @Override
     @Utility
     public @NotNull String toString() {
-        StringBuilder toString = new StringBuilder("ItemStack{").append(getType().name()).append(" x ").append(getAmount());
+        final StringBuilder toString = new StringBuilder("ItemStack{").append(getType().name()).append(" x ").append(getAmount());
         if (hasItemMeta()) {
             toString.append(", ").append(getItemMeta());
         }
@@ -266,7 +266,7 @@ public class ItemStack implements Cloneable, ConfigurationSerializable, net.kyor
 
     @Override
     @Utility
-    public boolean equals(Object obj) {
+    public boolean equals(final Object obj) {
         if (this == obj) {
             return true;
         }
@@ -274,7 +274,7 @@ public class ItemStack implements Cloneable, ConfigurationSerializable, net.kyor
             return false;
         }
 
-        ItemStack stack = (ItemStack) obj;
+        final ItemStack stack = (ItemStack) obj;
         return getAmount() == stack.getAmount() && isSimilar(stack);
     }
 
@@ -286,14 +286,14 @@ public class ItemStack implements Cloneable, ConfigurationSerializable, net.kyor
      * @return true if the two stacks are equal, ignoring the amount
      */
     @Utility
-    public boolean isSimilar(@Nullable ItemStack stack) {
+    public boolean isSimilar(@Nullable final ItemStack stack) {
         if (stack == null) {
             return false;
         }
         if (stack == this) {
             return true;
         }
-        Material comparisonType = (this.type.isLegacy()) ? Bukkit.getUnsafe().fromLegacy(this.getData(), true) : this.type; // This may be called from legacy item stacks, try to get the right material
+        final Material comparisonType = (this.type.isLegacy()) ? Bukkit.getUnsafe().fromLegacy(this.getData(), true) : this.type; // This may be called from legacy item stacks, try to get the right material
         return comparisonType == stack.getType() && getDurability() == stack.getDurability() && hasItemMeta() == stack.hasItemMeta() && (hasItemMeta() ? Bukkit.getItemFactory().equals(getItemMeta(), stack.getItemMeta()) : true);
     }
 
@@ -301,7 +301,7 @@ public class ItemStack implements Cloneable, ConfigurationSerializable, net.kyor
     @Override
     public ItemStack clone() {
         try {
-            ItemStack itemStack = (ItemStack) super.clone();
+            final ItemStack itemStack = (ItemStack) super.clone();
 
             if (this.meta != null) {
                 itemStack.meta = this.meta.clone();
@@ -312,7 +312,7 @@ public class ItemStack implements Cloneable, ConfigurationSerializable, net.kyor
             }
 
             return itemStack;
-        } catch (CloneNotSupportedException e) {
+        } catch (final CloneNotSupportedException e) {
             throw new Error(e);
         }
     }
@@ -336,7 +336,7 @@ public class ItemStack implements Cloneable, ConfigurationSerializable, net.kyor
      * @param ench Enchantment to test
      * @return True if this has the given enchantment
      */
-    public boolean containsEnchantment(@NotNull Enchantment ench) {
+    public boolean containsEnchantment(@NotNull final Enchantment ench) {
         return meta == null ? false : meta.hasEnchant(ench);
     }
 
@@ -346,7 +346,7 @@ public class ItemStack implements Cloneable, ConfigurationSerializable, net.kyor
      * @param ench Enchantment to check
      * @return Level of the enchantment, or 0
      */
-    public int getEnchantmentLevel(@NotNull Enchantment ench) {
+    public int getEnchantmentLevel(@NotNull final Enchantment ench) {
         return meta == null ? 0 : meta.getEnchantLevel(ench);
     }
 
@@ -374,9 +374,9 @@ public class ItemStack implements Cloneable, ConfigurationSerializable, net.kyor
      *     exception is thrown.
      */
     @Utility
-    public void addEnchantments(@NotNull Map<Enchantment, Integer> enchantments) {
+    public void addEnchantments(@NotNull final Map<Enchantment, Integer> enchantments) {
         Preconditions.checkArgument(enchantments != null, "Enchantments cannot be null");
-        for (Map.Entry<Enchantment, Integer> entry : enchantments.entrySet()) {
+        for (final Map.Entry<Enchantment, Integer> entry : enchantments.entrySet()) {
             addEnchantment(entry.getKey(), entry.getValue().intValue());
         }
     }
@@ -393,7 +393,7 @@ public class ItemStack implements Cloneable, ConfigurationSerializable, net.kyor
      *     not applicable
      */
     @Utility
-    public void addEnchantment(@NotNull Enchantment ench, int level) {
+    public void addEnchantment(@NotNull final Enchantment ench, final int level) {
         Preconditions.checkArgument(ench != null, "Enchantment cannot be null");
         if ((level < ench.getStartLevel()) || (level > ench.getMaxLevel())) {
             throw new IllegalArgumentException("Enchantment level is either too low or too high (given " + level + ", bounds are " + ench.getStartLevel() + " to " + ench.getMaxLevel() + ")");
@@ -414,8 +414,8 @@ public class ItemStack implements Cloneable, ConfigurationSerializable, net.kyor
      * @param enchantments Enchantments to add
      */
     @Utility
-    public void addUnsafeEnchantments(@NotNull Map<Enchantment, Integer> enchantments) {
-        for (Map.Entry<Enchantment, Integer> entry : enchantments.entrySet()) {
+    public void addUnsafeEnchantments(@NotNull final Map<Enchantment, Integer> enchantments) {
+        for (final Map.Entry<Enchantment, Integer> entry : enchantments.entrySet()) {
             addUnsafeEnchantment(entry.getKey(), entry.getValue().intValue());
         }
     }
@@ -432,8 +432,8 @@ public class ItemStack implements Cloneable, ConfigurationSerializable, net.kyor
      * @param ench Enchantment to add
      * @param level Level of the enchantment
      */
-    public void addUnsafeEnchantment(@NotNull Enchantment ench, int level) {
-        ItemMeta itemMeta = (meta == null ? meta = Bukkit.getItemFactory().getItemMeta(type) : meta);
+    public void addUnsafeEnchantment(@NotNull final Enchantment ench, final int level) {
+        final ItemMeta itemMeta = (meta == null ? meta = Bukkit.getItemFactory().getItemMeta(type) : meta);
         if (itemMeta != null) {
             itemMeta.addEnchant(ench, level, true);
         }
@@ -446,8 +446,8 @@ public class ItemStack implements Cloneable, ConfigurationSerializable, net.kyor
      * @param ench Enchantment to remove
      * @return Previous level, or 0
      */
-    public int removeEnchantment(@NotNull Enchantment ench) {
-        int level = getEnchantmentLevel(ench);
+    public int removeEnchantment(@NotNull final Enchantment ench) {
+        final int level = getEnchantmentLevel(ench);
         if (level == 0 || meta == null) {
             return level;
         }
@@ -459,7 +459,7 @@ public class ItemStack implements Cloneable, ConfigurationSerializable, net.kyor
     @NotNull
     @Utility
     public Map<String, Object> serialize() {
-        Map<String, Object> result = new LinkedHashMap<String, Object>();
+        final Map<String, Object> result = new LinkedHashMap<String, Object>();
 
         result.put("v", Integer.valueOf(Bukkit.getUnsafe().getDataVersion())); // Include version to indicate we are using modern material names (or LEGACY prefix)
         result.put("type", getType().name());
@@ -468,7 +468,7 @@ public class ItemStack implements Cloneable, ConfigurationSerializable, net.kyor
             result.put("amount", Integer.valueOf(getAmount()));
         }
 
-        ItemMeta meta = getItemMeta();
+        final ItemMeta meta = getItemMeta();
         if (!Bukkit.getItemFactory().equals(meta, null)) {
             result.put("meta", meta);
         }
@@ -484,8 +484,8 @@ public class ItemStack implements Cloneable, ConfigurationSerializable, net.kyor
      * @see ConfigurationSerializable
      */
     @NotNull
-    public static ItemStack deserialize(@NotNull Map<String, Object> args) {
-        int version = (args.containsKey("v")) ? ((Number) args.get("v")).intValue() : -1;
+    public static ItemStack deserialize(@NotNull final Map<String, Object> args) {
+        final int version = (args.containsKey("v")) ? ((Number) args.get("v")).intValue() : -1;
         short damage = 0;
         int amount = 1;
 
@@ -497,7 +497,7 @@ public class ItemStack implements Cloneable, ConfigurationSerializable, net.kyor
         if (version < 0) {
             type = Material.getMaterial(Material.LEGACY_PREFIX + args.get("type"));
 
-            byte dataVal = (type != null && type.getMaxDurability() == 0) ? (byte) damage : 0; // Actually durable items get a 0 passed into conversion
+            final byte dataVal = (type != null && type.getMaxDurability() == 0) ? (byte) damage : 0; // Actually durable items get a 0 passed into conversion
             type = Bukkit.getUnsafe().fromLegacy(new MaterialData(type, dataVal), true);
 
             // We've converted now so the data val isn't a thing and can be reset
@@ -512,16 +512,16 @@ public class ItemStack implements Cloneable, ConfigurationSerializable, net.kyor
             amount = ((Number) args.get("amount")).intValue();
         }
 
-        ItemStack result = new ItemStack(type, amount, damage);
+        final ItemStack result = new ItemStack(type, amount, damage);
 
         if (args.containsKey("enchantments")) { // Backward compatiblity, @deprecated
-            Object raw = args.get("enchantments");
+            final Object raw = args.get("enchantments");
 
             if (raw instanceof Map) {
-                Map<?, ?> map = (Map<?, ?>) raw;
+                final Map<?, ?> map = (Map<?, ?>) raw;
 
-                for (Map.Entry<?, ?> entry : map.entrySet()) {
-                    Enchantment enchantment = Enchantment.getByName(entry.getKey().toString());
+                for (final Map.Entry<?, ?> entry : map.entrySet()) {
+                    final Enchantment enchantment = Enchantment.getByName(entry.getKey().toString());
 
                     if ((enchantment != null) && (entry.getValue() instanceof Integer)) {
                         result.addUnsafeEnchantment(enchantment, ((Integer) entry.getValue()).intValue());
@@ -529,7 +529,7 @@ public class ItemStack implements Cloneable, ConfigurationSerializable, net.kyor
                 }
             }
         } else if (args.containsKey("meta")) { // We cannot and will not have meta when enchantments (pre-ItemMeta) exist
-            Object raw = args.get("meta");
+            final Object raw = args.get("meta");
             if (raw instanceof ItemMeta) {
                 ((ItemMeta) raw).setVersion(version);
                 result.setItemMeta((ItemMeta) raw);
@@ -618,14 +618,14 @@ public class ItemStack implements Cloneable, ConfigurationSerializable, net.kyor
      * @throws IllegalArgumentException if the item meta was not created by
      *     the {@link ItemFactory}
      */
-    public boolean setItemMeta(@Nullable ItemMeta itemMeta) {
+    public boolean setItemMeta(@Nullable final ItemMeta itemMeta) {
         return setItemMeta0(itemMeta, type);
     }
 
     /*
      * Cannot be overridden, so it's safe for constructor call
      */
-    private boolean setItemMeta0(@Nullable ItemMeta itemMeta, @NotNull Material material) {
+    private boolean setItemMeta0(@Nullable final ItemMeta itemMeta, @NotNull final Material material) {
         if (itemMeta == null) {
             this.meta = null;
             return true;
@@ -635,7 +635,7 @@ public class ItemStack implements Cloneable, ConfigurationSerializable, net.kyor
         }
         this.meta = Bukkit.getItemFactory().asMetaFor(itemMeta, material);
 
-        Material newType = Bukkit.getItemFactory().updateMaterial(meta, material);
+        final Material newType = Bukkit.getItemFactory().updateMaterial(meta, material);
         if (this.type != newType) {
             this.type = newType;
         }
@@ -704,7 +704,7 @@ public class ItemStack implements Cloneable, ConfigurationSerializable, net.kyor
      * @return ItemStack migrated to this version of Minecraft if needed.
      */
     @NotNull
-    public static ItemStack deserializeBytes(@NotNull byte[] bytes) {
+    public static ItemStack deserializeBytes(@NotNull final byte[] bytes) {
         return org.bukkit.Bukkit.getUnsafe().deserializeItem(bytes);
     }
 
@@ -756,8 +756,8 @@ public class ItemStack implements Cloneable, ConfigurationSerializable, net.kyor
      * @return The new itemstack with specified quantity
      */
     @NotNull
-    public ItemStack asQuantity(int qty) {
-        ItemStack clone = clone();
+    public ItemStack asQuantity(final int qty) {
+        final ItemStack clone = clone();
         clone.setAmount(qty);
         return clone;
     }
@@ -778,7 +778,7 @@ public class ItemStack implements Cloneable, ConfigurationSerializable, net.kyor
      * @return The same item (not a clone)
      */
     @NotNull
-    public ItemStack add(int qty) {
+    public ItemStack add(final int qty) {
         setAmount(Math.min(getMaxStackSize(), getAmount() + qty));
         return this;
     }
@@ -799,7 +799,7 @@ public class ItemStack implements Cloneable, ConfigurationSerializable, net.kyor
      * @return The same item (not a clone)
      */
     @NotNull
-    public ItemStack subtract(int qty) {
+    public ItemStack subtract(final int qty) {
         setAmount(Math.max(0, getAmount() - qty));
         return this;
     }
@@ -814,7 +814,7 @@ public class ItemStack implements Cloneable, ConfigurationSerializable, net.kyor
         if (!hasItemMeta()) {
             return null;
         }
-        ItemMeta itemMeta = getItemMeta();
+        final ItemMeta itemMeta = getItemMeta();
         if (!itemMeta.hasLore()) {
             return null;
         }
@@ -844,8 +844,8 @@ public class ItemStack implements Cloneable, ConfigurationSerializable, net.kyor
      * @deprecated in favour of {@link #lore(List)}
      */
     @Deprecated
-    public void setLore(@Nullable List<String> lore) {
-        ItemMeta itemMeta = getItemMeta();
+    public void setLore(@Nullable final List<String> lore) {
+        final ItemMeta itemMeta = getItemMeta();
         if (itemMeta == null) {
             throw new IllegalStateException("Cannot set lore on " + getType());
         }
@@ -859,8 +859,8 @@ public class ItemStack implements Cloneable, ConfigurationSerializable, net.kyor
      *
      * @param lore the lore that will be set
      */
-    public void lore(@Nullable List<net.kyori.adventure.text.Component> lore) {
-        ItemMeta itemMeta = getItemMeta();
+    public void lore(@Nullable final List<net.kyori.adventure.text.Component> lore) {
+        final ItemMeta itemMeta = getItemMeta();
         if (itemMeta == null) {
             throw new IllegalStateException("Cannot set lore on " + getType());
         }
@@ -873,8 +873,8 @@ public class ItemStack implements Cloneable, ConfigurationSerializable, net.kyor
      *
      * @param itemFlags The hideflags which shouldn't be rendered
      */
-    public void addItemFlags(@NotNull ItemFlag... itemFlags) {
-        ItemMeta itemMeta = getItemMeta();
+    public void addItemFlags(@NotNull final ItemFlag... itemFlags) {
+        final ItemMeta itemMeta = getItemMeta();
         if (itemMeta == null) {
             throw new IllegalStateException("Cannot add flags on " + getType());
         }
@@ -887,8 +887,8 @@ public class ItemStack implements Cloneable, ConfigurationSerializable, net.kyor
      *
      * @param itemFlags Hideflags which should be removed
      */
-    public void removeItemFlags(@NotNull ItemFlag... itemFlags) {
-        ItemMeta itemMeta = getItemMeta();
+    public void removeItemFlags(@NotNull final ItemFlag... itemFlags) {
+        final ItemMeta itemMeta = getItemMeta();
         if (itemMeta == null) {
             throw new IllegalStateException("Cannot remove flags on " + getType());
         }
@@ -903,7 +903,7 @@ public class ItemStack implements Cloneable, ConfigurationSerializable, net.kyor
      */
     @NotNull
     public java.util.Set<ItemFlag> getItemFlags() {
-        ItemMeta itemMeta = getItemMeta();
+        final ItemMeta itemMeta = getItemMeta();
         if (itemMeta == null) {
             return java.util.Collections.emptySet();
         }
@@ -916,8 +916,8 @@ public class ItemStack implements Cloneable, ConfigurationSerializable, net.kyor
      * @param flag the flag to check
      * @return if it is present
      */
-    public boolean hasItemFlag(@NotNull ItemFlag flag) {
-        ItemMeta itemMeta = getItemMeta();
+    public boolean hasItemFlag(@NotNull final ItemFlag flag) {
+        final ItemMeta itemMeta = getItemMeta();
         return itemMeta != null && itemMeta.hasItemFlag(flag);
     }
 
@@ -963,7 +963,7 @@ public class ItemStack implements Cloneable, ConfigurationSerializable, net.kyor
      * @param repairMaterial the repair material
      * @return true if it is repairable by, false if not
      */
-    public boolean isRepairableBy(@NotNull ItemStack repairMaterial) {
+    public boolean isRepairableBy(@NotNull final ItemStack repairMaterial) {
         return Bukkit.getUnsafe().isValidRepairItemStack(this, repairMaterial);
     }
 
@@ -974,7 +974,7 @@ public class ItemStack implements Cloneable, ConfigurationSerializable, net.kyor
      * @param toBeRepaired the itemstack to be repaired
      * @return true if it can repair, false if not
      */
-    public boolean canRepair(@NotNull ItemStack toBeRepaired) {
+    public boolean canRepair(@NotNull final ItemStack toBeRepaired) {
         return Bukkit.getUnsafe().isValidRepairItemStack(toBeRepaired, this);
     }
 
diff --git a/src/main/java/org/bukkit/inventory/LecternInventory.java b/src/main/java/org/bukkit/inventory/LecternInventory.java
index acf2244f77133df53eb5f862c8e713c85192f13d..8cdafb96729ec2c3a07ea049972498f54c198954 100644
--- a/src/main/java/org/bukkit/inventory/LecternInventory.java
+++ b/src/main/java/org/bukkit/inventory/LecternInventory.java
@@ -28,7 +28,7 @@ public interface LecternInventory extends Inventory {
      *
      * @param book the new book
      */
-    default void setBook(@Nullable ItemStack book) {
+    default void setBook(@Nullable final ItemStack book) {
         setItem(0, book);
     }
     // Paper end
diff --git a/src/main/java/org/bukkit/inventory/MerchantRecipe.java b/src/main/java/org/bukkit/inventory/MerchantRecipe.java
index 5ed1fee2590a4dd4004fb072c4e5d6e9432c82ee..09bfe91078396720a7ceba3b1c969263f075aaf2 100644
--- a/src/main/java/org/bukkit/inventory/MerchantRecipe.java
+++ b/src/main/java/org/bukkit/inventory/MerchantRecipe.java
@@ -59,26 +59,26 @@ public class MerchantRecipe implements Recipe {
     private float priceMultiplier;
     private boolean ignoreDiscounts; // Paper
 
-    public MerchantRecipe(@NotNull ItemStack result, int maxUses) {
+    public MerchantRecipe(@NotNull final ItemStack result, final int maxUses) {
         this(result, 0, maxUses, false);
     }
 
-    public MerchantRecipe(@NotNull ItemStack result, int uses, int maxUses, boolean experienceReward) {
+    public MerchantRecipe(@NotNull final ItemStack result, final int uses, final int maxUses, final boolean experienceReward) {
         this(result, uses, maxUses, experienceReward, 0, 0.0F, 0, 0);
     }
 
-    public MerchantRecipe(@NotNull ItemStack result, int uses, int maxUses, boolean experienceReward, int villagerExperience, float priceMultiplier) {
+    public MerchantRecipe(@NotNull final ItemStack result, final int uses, final int maxUses, final boolean experienceReward, final int villagerExperience, final float priceMultiplier) {
         this(result, uses, maxUses, experienceReward, villagerExperience, priceMultiplier, 0, 0);
     }
 
-    public MerchantRecipe(@NotNull ItemStack result, int uses, int maxUses, boolean experienceReward, int villagerExperience, float priceMultiplier, int demand, int specialPrice) {
+    public MerchantRecipe(@NotNull final ItemStack result, final int uses, final int maxUses, final boolean experienceReward, final int villagerExperience, final float priceMultiplier, final int demand, final int specialPrice) {
         // Paper start - add ignoreDiscounts param
         this(result, uses, maxUses, experienceReward, villagerExperience, priceMultiplier, demand, specialPrice, false);
     }
-    public MerchantRecipe(@NotNull ItemStack result, int uses, int maxUses, boolean experienceReward, int villagerExperience, float priceMultiplier, boolean ignoreDiscounts) {
+    public MerchantRecipe(@NotNull final ItemStack result, final int uses, final int maxUses, final boolean experienceReward, final int villagerExperience, final float priceMultiplier, final boolean ignoreDiscounts) {
         this(result, uses, maxUses, experienceReward, villagerExperience, priceMultiplier, 0, 0, ignoreDiscounts);
     }
-    public MerchantRecipe(@NotNull ItemStack result, int uses, int maxUses, boolean experienceReward, int villagerExperience, float priceMultiplier, int demand, int specialPrice, boolean ignoreDiscounts) {
+    public MerchantRecipe(@NotNull final ItemStack result, final int uses, final int maxUses, final boolean experienceReward, final int villagerExperience, final float priceMultiplier, final int demand, final int specialPrice, final boolean ignoreDiscounts) {
         this.ignoreDiscounts = ignoreDiscounts;
         // Paper end
         this.result = result;
@@ -97,27 +97,27 @@ public class MerchantRecipe implements Recipe {
         return result;
     }
 
-    public void addIngredient(@NotNull ItemStack item) {
+    public void addIngredient(@NotNull final ItemStack item) {
         Preconditions.checkState(ingredients.size() < 2, "MerchantRecipe can only have maximum 2 ingredients");
         ingredients.add(item.clone());
     }
 
-    public void removeIngredient(int index) {
+    public void removeIngredient(final int index) {
         ingredients.remove(index);
     }
 
-    public void setIngredients(@NotNull List<ItemStack> ingredients) {
+    public void setIngredients(@NotNull final List<ItemStack> ingredients) {
         Preconditions.checkState(ingredients.size() <= 2, "MerchantRecipe can only have maximum 2 ingredients");
         this.ingredients = new ArrayList<ItemStack>();
-        for (ItemStack item : ingredients) {
+        for (final ItemStack item : ingredients) {
             this.ingredients.add(item.clone());
         }
     }
 
     @NotNull
     public List<ItemStack> getIngredients() {
-        List<ItemStack> copy = new ArrayList<ItemStack>();
-        for (ItemStack item : ingredients) {
+        final List<ItemStack> copy = new ArrayList<ItemStack>();
+        for (final ItemStack item : ingredients) {
             copy.add(item.clone());
         }
         return copy;
@@ -136,7 +136,7 @@ public class MerchantRecipe implements Recipe {
             return null;
         }
 
-        ItemStack firstIngredient = this.ingredients.get(0).clone();
+        final ItemStack firstIngredient = this.ingredients.get(0).clone();
         adjust(firstIngredient);
         return firstIngredient;
     }
@@ -156,13 +156,13 @@ public class MerchantRecipe implements Recipe {
      *
      * @param itemStack the item to adjust
      */
-    public void adjust(@Nullable ItemStack itemStack) {
+    public void adjust(@Nullable final ItemStack itemStack) {
         if (itemStack == null || itemStack.getType() == Material.AIR || itemStack.getAmount() <= 0) {
             return;
         }
 
-        int amount = itemStack.getAmount();
-        int demandAdjustment = Math.max(0, NumberConversions.floor((float) (amount * getDemand()) * getPriceMultiplier()));
+        final int amount = itemStack.getAmount();
+        final int demandAdjustment = Math.max(0, NumberConversions.floor((float) (amount * getDemand()) * getPriceMultiplier()));
         itemStack.setAmount(Math.max(1, Math.min(itemStack.getMaxStackSize(), amount + demandAdjustment + getSpecialPrice())));
     }
 
@@ -180,7 +180,7 @@ public class MerchantRecipe implements Recipe {
      *
      * @param demand the new demand
      */
-    public void setDemand(int demand) {
+    public void setDemand(final int demand) {
         this.demand = demand;
     }
 
@@ -198,7 +198,7 @@ public class MerchantRecipe implements Recipe {
      *
      * @param specialPrice special price value
      */
-    public void setSpecialPrice(int specialPrice) {
+    public void setSpecialPrice(final int specialPrice) {
         this.specialPrice = specialPrice;
     }
 
@@ -216,7 +216,7 @@ public class MerchantRecipe implements Recipe {
      *
      * @param uses the number of uses
      */
-    public void setUses(int uses) {
+    public void setUses(final int uses) {
         this.uses = uses;
     }
 
@@ -234,7 +234,7 @@ public class MerchantRecipe implements Recipe {
      *
      * @param maxUses the maximum number of time this trade can be used
      */
-    public void setMaxUses(int maxUses) {
+    public void setMaxUses(final int maxUses) {
         this.maxUses = maxUses;
     }
 
@@ -254,7 +254,7 @@ public class MerchantRecipe implements Recipe {
      * @param flag whether to reward experience to the player for completing
      * this trade
      */
-    public void setExperienceReward(boolean flag) {
+    public void setExperienceReward(final boolean flag) {
         this.experienceReward = flag;
     }
 
@@ -272,7 +272,7 @@ public class MerchantRecipe implements Recipe {
      *
      * @param villagerExperience new experience amount
      */
-    public void setVillagerExperience(int villagerExperience) {
+    public void setVillagerExperience(final int villagerExperience) {
         this.villagerExperience = villagerExperience;
     }
 
@@ -290,7 +290,7 @@ public class MerchantRecipe implements Recipe {
      *
      * @param priceMultiplier new price multiplier
      */
-    public void setPriceMultiplier(float priceMultiplier) {
+    public void setPriceMultiplier(final float priceMultiplier) {
         this.priceMultiplier = priceMultiplier;
     }
 
@@ -305,7 +305,7 @@ public class MerchantRecipe implements Recipe {
     /**
      * @param ignoreDiscounts Whether all discounts on this trade should be ignored.
      */
-    public void setIgnoreDiscounts(boolean ignoreDiscounts) {
+    public void setIgnoreDiscounts(final boolean ignoreDiscounts) {
         this.ignoreDiscounts = ignoreDiscounts;
     }
     // Paper end
diff --git a/src/main/java/org/bukkit/inventory/RecipeChoice.java b/src/main/java/org/bukkit/inventory/RecipeChoice.java
index ad7b2c50d70950592f69e19116b103d208c3a265..0dbda042d2aece5eb50aeb963707d9fd22cc06a9 100644
--- a/src/main/java/org/bukkit/inventory/RecipeChoice.java
+++ b/src/main/java/org/bukkit/inventory/RecipeChoice.java
@@ -44,11 +44,11 @@ public interface RecipeChoice extends Predicate<ItemStack>, Cloneable {
 
         private List<Material> choices;
 
-        public MaterialChoice(@NotNull Material choice) {
+        public MaterialChoice(@NotNull final Material choice) {
             this(List.of(choice));
         }
 
-        public MaterialChoice(@NotNull Material... choices) {
+        public MaterialChoice(@NotNull final Material... choices) {
             this(Arrays.asList(choices));
         }
 
@@ -58,15 +58,15 @@ public interface RecipeChoice extends Predicate<ItemStack>, Cloneable {
          *
          * @param choices the tag
          */
-        public MaterialChoice(@NotNull Tag<Material> choices) {
+        public MaterialChoice(@NotNull final Tag<Material> choices) {
             Preconditions.checkArgument(choices != null, "choices");
             this.choices = new ArrayList<>(choices.getValues());
         }
 
-        public MaterialChoice(@NotNull List<Material> choices) {
+        public MaterialChoice(@NotNull final List<Material> choices) {
             Preconditions.checkArgument(choices != null, "choices");
             Preconditions.checkArgument(!choices.isEmpty(), "Must have at least one choice");
-            for (Material choice : choices) {
+            for (final Material choice : choices) {
                 Preconditions.checkArgument(choice != null, "Cannot have null choice");
             }
 
@@ -74,8 +74,8 @@ public interface RecipeChoice extends Predicate<ItemStack>, Cloneable {
         }
 
         @Override
-        public boolean test(@NotNull ItemStack t) {
-            for (Material match : choices) {
+        public boolean test(@NotNull final ItemStack t) {
+            for (final Material match : choices) {
                 if (t.getType() == match) {
                     return true;
                 }
@@ -87,7 +87,7 @@ public interface RecipeChoice extends Predicate<ItemStack>, Cloneable {
         @NotNull
         @Override
         public ItemStack getItemStack() {
-            ItemStack stack = new ItemStack(choices.get(0));
+            final ItemStack stack = new ItemStack(choices.get(0));
 
             // For compat
             if (choices.size() > 1) {
@@ -106,10 +106,10 @@ public interface RecipeChoice extends Predicate<ItemStack>, Cloneable {
         @Override
         public MaterialChoice clone() {
             try {
-                MaterialChoice clone = (MaterialChoice) super.clone();
+                final MaterialChoice clone = (MaterialChoice) super.clone();
                 clone.choices = new ArrayList<>(choices);
                 return clone;
-            } catch (CloneNotSupportedException ex) {
+            } catch (final CloneNotSupportedException ex) {
                 throw new AssertionError(ex);
             }
         }
@@ -122,7 +122,7 @@ public interface RecipeChoice extends Predicate<ItemStack>, Cloneable {
         }
 
         @Override
-        public boolean equals(@Nullable Object obj) {
+        public boolean equals(@Nullable final Object obj) {
             if (this == obj) {
                 return true;
             }
@@ -155,18 +155,18 @@ public interface RecipeChoice extends Predicate<ItemStack>, Cloneable {
 
         private List<ItemStack> choices;
 
-        public ExactChoice(@NotNull ItemStack stack) {
+        public ExactChoice(@NotNull final ItemStack stack) {
             this(List.of(stack));
         }
 
-        public ExactChoice(@NotNull ItemStack... stacks) {
+        public ExactChoice(@NotNull final ItemStack... stacks) {
             this(Arrays.asList(stacks));
         }
 
-        public ExactChoice(@NotNull List<ItemStack> choices) {
+        public ExactChoice(@NotNull final List<ItemStack> choices) {
             Preconditions.checkArgument(choices != null, "choices");
             Preconditions.checkArgument(!choices.isEmpty(), "Must have at least one choice");
-            for (ItemStack choice : choices) {
+            for (final ItemStack choice : choices) {
                 Preconditions.checkArgument(choice != null, "Cannot have null choice");
             }
 
@@ -188,17 +188,17 @@ public interface RecipeChoice extends Predicate<ItemStack>, Cloneable {
         @Override
         public ExactChoice clone() {
             try {
-                ExactChoice clone = (ExactChoice) super.clone();
+                final ExactChoice clone = (ExactChoice) super.clone();
                 clone.choices = new ArrayList<>(choices);
                 return clone;
-            } catch (CloneNotSupportedException ex) {
+            } catch (final CloneNotSupportedException ex) {
                 throw new AssertionError(ex);
             }
         }
 
         @Override
-        public boolean test(@NotNull ItemStack t) {
-            for (ItemStack match : choices) {
+        public boolean test(@NotNull final ItemStack t) {
+            for (final ItemStack match : choices) {
                 if (t.isSimilar(match)) {
                     return true;
                 }
@@ -215,7 +215,7 @@ public interface RecipeChoice extends Predicate<ItemStack>, Cloneable {
         }
 
         @Override
-        public boolean equals(@Nullable Object obj) {
+        public boolean equals(@Nullable final Object obj) {
             if (this == obj) {
                 return true;
             }
diff --git a/src/main/java/org/bukkit/inventory/ShapedRecipe.java b/src/main/java/org/bukkit/inventory/ShapedRecipe.java
index 0819a4886fb77215645e56aa75e9821381f4b6d9..e136f00d2516b0243817f1996252fc4127b32003 100644
--- a/src/main/java/org/bukkit/inventory/ShapedRecipe.java
+++ b/src/main/java/org/bukkit/inventory/ShapedRecipe.java
@@ -23,7 +23,7 @@ public class ShapedRecipe implements Recipe, Keyed {
     private CraftingBookCategory category = CraftingBookCategory.MISC;
 
     @Deprecated
-    public ShapedRecipe(@NotNull ItemStack result) {
+    public ShapedRecipe(@NotNull final ItemStack result) {
         Preconditions.checkArgument(result.getType() != Material.AIR, "Recipe must have non-AIR result.");
         this.key = NamespacedKey.randomKey();
         new Throwable("Warning: A plugin is creating a recipe using a Deprecated method. This will cause you to receive warnings stating 'Tried to load unrecognized recipe: bukkit:<ID>'. Please ask the author to give their recipe a static key using NamespacedKey.").printStackTrace();
@@ -42,7 +42,7 @@ public class ShapedRecipe implements Recipe, Keyed {
      * @see ShapedRecipe#setIngredient(char, Material, int)
      * @see ShapedRecipe#setIngredient(char, MaterialData)
      */
-    public ShapedRecipe(@NotNull NamespacedKey key, @NotNull ItemStack result) {
+    public ShapedRecipe(@NotNull final NamespacedKey key, @NotNull final ItemStack result) {
         Preconditions.checkArgument(key != null, "key");
         Preconditions.checkArgument(result.getType() != Material.AIR, "Recipe must have non-AIR result.");
 
@@ -67,7 +67,7 @@ public class ShapedRecipe implements Recipe, Keyed {
         Preconditions.checkArgument(shape.length > 0 && shape.length < 4, "Crafting recipes should be 1, 2 or 3 rows, not ", shape.length);
 
         int lastLen = -1;
-        for (String row : shape) {
+        for (final String row : shape) {
             Preconditions.checkArgument(row != null, "Shape cannot have null rows");
             Preconditions.checkArgument(row.length() > 0 && row.length() < 4, "Crafting rows should be 1, 2, or 3 characters, not ", row.length());
 
@@ -78,9 +78,9 @@ public class ShapedRecipe implements Recipe, Keyed {
         System.arraycopy(shape, 0, this.rows, 0, shape.length);
 
         // Remove character mappings for characters that no longer exist in the shape
-        HashMap<Character, RecipeChoice> newIngredients = new HashMap<>();
-        for (String row : shape) {
-            for (Character c : row.toCharArray()) {
+        final HashMap<Character, RecipeChoice> newIngredients = new HashMap<>();
+        for (final String row : shape) {
+            for (final Character c : row.toCharArray()) {
                 newIngredients.put(c, ingredients.get(c));
             }
         }
@@ -99,7 +99,7 @@ public class ShapedRecipe implements Recipe, Keyed {
      */
     @NotNull
     @Deprecated // Paper
-    public ShapedRecipe setIngredient(char key, @NotNull MaterialData ingredient) {
+    public ShapedRecipe setIngredient(final char key, @NotNull final MaterialData ingredient) {
         return setIngredient(key, ingredient.getItemType(), ingredient.getData());
     }
 
@@ -111,7 +111,7 @@ public class ShapedRecipe implements Recipe, Keyed {
      * @return The changed recipe, so you can chain calls.
      */
     @NotNull
-    public ShapedRecipe setIngredient(char key, @NotNull Material ingredient) {
+    public ShapedRecipe setIngredient(final char key, @NotNull final Material ingredient) {
         return setIngredient(key, ingredient, 0);
     }
 
@@ -126,7 +126,7 @@ public class ShapedRecipe implements Recipe, Keyed {
      */
     @Deprecated
     @NotNull
-    public ShapedRecipe setIngredient(char key, @NotNull Material ingredient, int raw) {
+    public ShapedRecipe setIngredient(final char key, @NotNull final Material ingredient, int raw) {
         Preconditions.checkArgument(ingredients.containsKey(Character.valueOf(key)), "Symbol does not appear in the shape:", key);
 
         // -1 is the old wildcard, map to Short.MAX_VALUE as the new one
@@ -139,7 +139,7 @@ public class ShapedRecipe implements Recipe, Keyed {
     }
 
     @NotNull
-    public ShapedRecipe setIngredient(char key, @NotNull RecipeChoice ingredient) {
+    public ShapedRecipe setIngredient(final char key, @NotNull final RecipeChoice ingredient) {
         Preconditions.checkArgument(ingredients.containsKey(Character.valueOf(key)), "Symbol does not appear in the shape:", key);
 
         ingredients.put(Character.valueOf(key), ingredient);
@@ -148,7 +148,7 @@ public class ShapedRecipe implements Recipe, Keyed {
 
     // Paper start
     @NotNull
-    public ShapedRecipe setIngredient(char key, @NotNull ItemStack item) {
+    public ShapedRecipe setIngredient(final char key, @NotNull final ItemStack item) {
         return setIngredient(key, new RecipeChoice.ExactChoice(item));
     }
     // Paper end
@@ -162,8 +162,8 @@ public class ShapedRecipe implements Recipe, Keyed {
     @Deprecated // Paper
     @NotNull
     public Map<Character, ItemStack> getIngredientMap() {
-        HashMap<Character, ItemStack> result = new HashMap<Character, ItemStack>();
-        for (Map.Entry<Character, RecipeChoice> ingredient : ingredients.entrySet()) {
+        final HashMap<Character, ItemStack> result = new HashMap<Character, ItemStack>();
+        for (final Map.Entry<Character, RecipeChoice> ingredient : ingredients.entrySet()) {
             if (ingredient.getValue() == null) {
                 result.put(ingredient.getKey(), null);
             } else {
@@ -175,8 +175,8 @@ public class ShapedRecipe implements Recipe, Keyed {
 
     @NotNull
     public Map<Character, RecipeChoice> getChoiceMap() {
-        Map<Character, RecipeChoice> result = new HashMap<>();
-        for (Map.Entry<Character, RecipeChoice> ingredient : ingredients.entrySet()) {
+        final Map<Character, RecipeChoice> result = new HashMap<>();
+        for (final Map.Entry<Character, RecipeChoice> ingredient : ingredients.entrySet()) {
             if (ingredient.getValue() == null) {
                 result.put(ingredient.getKey(), null);
             } else {
@@ -232,7 +232,7 @@ public class ShapedRecipe implements Recipe, Keyed {
      * @param group recipe group. An empty string denotes no group. May not be
      * null.
      */
-    public void setGroup(@NotNull String group) {
+    public void setGroup(@NotNull final String group) {
         Preconditions.checkArgument(group != null, "group cannot be null");
         this.group = group;
     }
diff --git a/src/main/java/org/bukkit/inventory/ShapelessRecipe.java b/src/main/java/org/bukkit/inventory/ShapelessRecipe.java
index b065a8a487ed9d5c88e8fb46a3ba180310df54a2..ec358535cdf5d9ed7a059182f354b5ad14beed72 100644
--- a/src/main/java/org/bukkit/inventory/ShapelessRecipe.java
+++ b/src/main/java/org/bukkit/inventory/ShapelessRecipe.java
@@ -24,7 +24,7 @@ public class ShapelessRecipe implements Recipe, Keyed {
     private CraftingBookCategory category = CraftingBookCategory.MISC;
 
     @Deprecated
-    public ShapelessRecipe(@NotNull ItemStack result) {
+    public ShapelessRecipe(@NotNull final ItemStack result) {
         Preconditions.checkArgument(result.getType() != Material.AIR, "Recipe must have non-AIR result.");
         this.key = NamespacedKey.randomKey();
         new Throwable("Warning: A plugin is creating a recipe using a Deprecated method. This will cause you to receive warnings stating 'Tried to load unrecognized recipe: bukkit:<ID>'. Please ask the author to give their recipe a static key using NamespacedKey.").printStackTrace();
@@ -45,7 +45,7 @@ public class ShapelessRecipe implements Recipe, Keyed {
      * @see ShapelessRecipe#addIngredient(int,MaterialData)
      * @see ShapelessRecipe#addIngredient(int,Material,int)
      */
-    public ShapelessRecipe(@NotNull NamespacedKey key, @NotNull ItemStack result) {
+    public ShapelessRecipe(@NotNull final NamespacedKey key, @NotNull final ItemStack result) {
         Preconditions.checkArgument(result.getType() != Material.AIR, "Recipe must have non-AIR result.");
         this.key = key;
         this.output = new ItemStack(result);
@@ -60,7 +60,7 @@ public class ShapelessRecipe implements Recipe, Keyed {
      */
     @NotNull
     @Deprecated
-    public ShapelessRecipe addIngredient(@NotNull MaterialData ingredient) {
+    public ShapelessRecipe addIngredient(@NotNull final MaterialData ingredient) {
         return addIngredient(1, ingredient);
     }
 
@@ -71,7 +71,7 @@ public class ShapelessRecipe implements Recipe, Keyed {
      * @return The changed recipe, so you can chain calls.
      */
     @NotNull
-    public ShapelessRecipe addIngredient(@NotNull Material ingredient) {
+    public ShapelessRecipe addIngredient(@NotNull final Material ingredient) {
         return addIngredient(1, ingredient, 0);
     }
 
@@ -85,7 +85,7 @@ public class ShapelessRecipe implements Recipe, Keyed {
      */
     @Deprecated
     @NotNull
-    public ShapelessRecipe addIngredient(@NotNull Material ingredient, int rawdata) {
+    public ShapelessRecipe addIngredient(@NotNull final Material ingredient, final int rawdata) {
         return addIngredient(1, ingredient, rawdata);
     }
 
@@ -99,7 +99,7 @@ public class ShapelessRecipe implements Recipe, Keyed {
      */
     @NotNull
     @Deprecated // Paper
-    public ShapelessRecipe addIngredient(int count, @NotNull MaterialData ingredient) {
+    public ShapelessRecipe addIngredient(final int count, @NotNull final MaterialData ingredient) {
         return addIngredient(count, ingredient.getItemType(), ingredient.getData());
     }
 
@@ -111,7 +111,7 @@ public class ShapelessRecipe implements Recipe, Keyed {
      * @return The changed recipe, so you can chain calls.
      */
     @NotNull
-    public ShapelessRecipe addIngredient(int count, @NotNull Material ingredient) {
+    public ShapelessRecipe addIngredient(final int count, @NotNull final Material ingredient) {
         return addIngredient(count, ingredient, 0);
     }
 
@@ -126,7 +126,7 @@ public class ShapelessRecipe implements Recipe, Keyed {
      */
     @Deprecated
     @NotNull
-    public ShapelessRecipe addIngredient(int count, @NotNull Material ingredient, int rawdata) {
+    public ShapelessRecipe addIngredient(int count, @NotNull final Material ingredient, int rawdata) {
         Preconditions.checkArgument(ingredients.size() + count <= 9, "Shapeless recipes cannot have more than 9 ingredients");
 
         // -1 is the old wildcard, map to Short.MAX_VALUE as the new one
@@ -141,7 +141,7 @@ public class ShapelessRecipe implements Recipe, Keyed {
     }
 
     @NotNull
-    public ShapelessRecipe addIngredient(@NotNull RecipeChoice ingredient) {
+    public ShapelessRecipe addIngredient(@NotNull final RecipeChoice ingredient) {
         Preconditions.checkArgument(ingredients.size() + 1 <= 9, "Shapeless recipes cannot have more than 9 ingredients");
 
         ingredients.add(ingredient);
@@ -150,12 +150,12 @@ public class ShapelessRecipe implements Recipe, Keyed {
 
     // Paper start
     @NotNull
-    public ShapelessRecipe addIngredient(@NotNull ItemStack item) {
+    public ShapelessRecipe addIngredient(@NotNull final ItemStack item) {
         return addIngredient(item.getAmount(), item);
     }
 
     @NotNull
-    public ShapelessRecipe addIngredient(int count, @NotNull ItemStack item) {
+    public ShapelessRecipe addIngredient(int count, @NotNull final ItemStack item) {
         Preconditions.checkArgument(ingredients.size() + count <= 9, "Shapeless recipes cannot have more than 9 ingredients");
         while (count-- > 0) {
             ingredients.add(new RecipeChoice.ExactChoice(item));
@@ -164,15 +164,15 @@ public class ShapelessRecipe implements Recipe, Keyed {
     }
 
     @NotNull
-    public ShapelessRecipe removeIngredient(@NotNull ItemStack item) {
+    public ShapelessRecipe removeIngredient(@NotNull final ItemStack item) {
         return removeIngredient(1, item);
     }
 
     @NotNull
-    public ShapelessRecipe removeIngredient(int count, @NotNull ItemStack item) {
-        Iterator<RecipeChoice> iterator = ingredients.iterator();
+    public ShapelessRecipe removeIngredient(int count, @NotNull final ItemStack item) {
+        final Iterator<RecipeChoice> iterator = ingredients.iterator();
         while (count > 0 && iterator.hasNext()) {
-            RecipeChoice choice = iterator.next();
+            final RecipeChoice choice = iterator.next();
             if (choice.test(item)) {
                 iterator.remove();
                 count--;
@@ -189,7 +189,7 @@ public class ShapelessRecipe implements Recipe, Keyed {
      * @return The changed recipe.
      */
     @NotNull
-    public ShapelessRecipe removeIngredient(@NotNull RecipeChoice ingredient) {
+    public ShapelessRecipe removeIngredient(@NotNull final RecipeChoice ingredient) {
         ingredients.remove(ingredient);
 
         return this;
@@ -204,7 +204,7 @@ public class ShapelessRecipe implements Recipe, Keyed {
      * @return The changed recipe.
      */
     @NotNull
-    public ShapelessRecipe removeIngredient(@NotNull Material ingredient) {
+    public ShapelessRecipe removeIngredient(@NotNull final Material ingredient) {
         return removeIngredient(new ItemStack(ingredient)); // Paper - avoid using deprecated methods (magic values; RecipeChoice#getItemStack)
     }
 
@@ -219,7 +219,7 @@ public class ShapelessRecipe implements Recipe, Keyed {
      */
     @NotNull
     @Deprecated // Paper
-    public ShapelessRecipe removeIngredient(@NotNull MaterialData ingredient) {
+    public ShapelessRecipe removeIngredient(@NotNull final MaterialData ingredient) {
         return removeIngredient(ingredient.getItemType(), ingredient.getData());
     }
 
@@ -233,7 +233,7 @@ public class ShapelessRecipe implements Recipe, Keyed {
      * @return The changed recipe.
      */
     @NotNull
-    public ShapelessRecipe removeIngredient(int count, @NotNull Material ingredient) {
+    public ShapelessRecipe removeIngredient(final int count, @NotNull final Material ingredient) {
         return removeIngredient(count, new ItemStack(ingredient)); // Paper - avoid using deprecated methods (magic values; RecipeChoice#getItemStack)
     }
 
@@ -249,7 +249,7 @@ public class ShapelessRecipe implements Recipe, Keyed {
      */
     @NotNull
     @Deprecated // Paper
-    public ShapelessRecipe removeIngredient(int count, @NotNull MaterialData ingredient) {
+    public ShapelessRecipe removeIngredient(final int count, @NotNull final MaterialData ingredient) {
         return removeIngredient(count, ingredient.getItemType(), ingredient.getData());
     }
 
@@ -265,7 +265,7 @@ public class ShapelessRecipe implements Recipe, Keyed {
      */
     @Deprecated
     @NotNull
-    public ShapelessRecipe removeIngredient(@NotNull Material ingredient, int rawdata) {
+    public ShapelessRecipe removeIngredient(@NotNull final Material ingredient, final int rawdata) {
         return removeIngredient(1, ingredient, rawdata);
     }
 
@@ -282,10 +282,10 @@ public class ShapelessRecipe implements Recipe, Keyed {
      */
     @Deprecated
     @NotNull
-    public ShapelessRecipe removeIngredient(int count, @NotNull Material ingredient, int rawdata) {
-        Iterator<RecipeChoice> iterator = ingredients.iterator();
+    public ShapelessRecipe removeIngredient(int count, @NotNull final Material ingredient, final int rawdata) {
+        final Iterator<RecipeChoice> iterator = ingredients.iterator();
         while (count > 0 && iterator.hasNext()) {
-            ItemStack stack = iterator.next().getItemStack();
+            final ItemStack stack = iterator.next().getItemStack();
             if (stack.getType() == ingredient && stack.getDurability() == rawdata) {
                 iterator.remove();
                 count--;
@@ -314,8 +314,8 @@ public class ShapelessRecipe implements Recipe, Keyed {
     @Deprecated // Paper
     @NotNull
     public List<ItemStack> getIngredientList() {
-        ArrayList<ItemStack> result = new ArrayList<ItemStack>(ingredients.size());
-        for (RecipeChoice ingredient : ingredients) {
+        final ArrayList<ItemStack> result = new ArrayList<ItemStack>(ingredients.size());
+        for (final RecipeChoice ingredient : ingredients) {
             result.add(ingredient.getItemStack().clone());
         }
         return result;
@@ -323,8 +323,8 @@ public class ShapelessRecipe implements Recipe, Keyed {
 
     @NotNull
     public List<RecipeChoice> getChoiceList() {
-        List<RecipeChoice> result = new ArrayList<>(ingredients.size());
-        for (RecipeChoice ingredient : ingredients) {
+        final List<RecipeChoice> result = new ArrayList<>(ingredients.size());
+        for (final RecipeChoice ingredient : ingredients) {
             result.add(ingredient.clone());
         }
         return result;
@@ -354,7 +354,7 @@ public class ShapelessRecipe implements Recipe, Keyed {
      * @param group recipe group. An empty string denotes no group. May not be
      * null.
      */
-    public void setGroup(@NotNull String group) {
+    public void setGroup(@NotNull final String group) {
         Preconditions.checkArgument(group != null, "group cannot be null");
         this.group = group;
     }
diff --git a/src/main/java/org/bukkit/inventory/SmithingInventory.java b/src/main/java/org/bukkit/inventory/SmithingInventory.java
index a41ca6bd2672db2810dd70c4925b84a4f081af05..55be67993a91eb55f92d6b34bf559ccdfcf8c753 100644
--- a/src/main/java/org/bukkit/inventory/SmithingInventory.java
+++ b/src/main/java/org/bukkit/inventory/SmithingInventory.java
@@ -47,7 +47,7 @@ public interface SmithingInventory extends Inventory {
      *
      * @param itemStack item to set
      */
-    default void setInputEquipment(@Nullable ItemStack itemStack) {
+    default void setInputEquipment(@Nullable final ItemStack itemStack) {
         setItem(0, itemStack);
     }
 
@@ -66,7 +66,7 @@ public interface SmithingInventory extends Inventory {
      *
      * @param itemStack item to set
      */
-    default void setInputMineral(@Nullable ItemStack itemStack) {
+    default void setInputMineral(@Nullable final ItemStack itemStack) {
         setItem(1, itemStack);
     }
     // Paper end
diff --git a/src/main/java/org/bukkit/inventory/SmithingRecipe.java b/src/main/java/org/bukkit/inventory/SmithingRecipe.java
index ea001505d50055530127e47ae1ef4c923a60b7b8..5d8cccd2d037bf3bd78e879743fef3a7852be7c3 100644
--- a/src/main/java/org/bukkit/inventory/SmithingRecipe.java
+++ b/src/main/java/org/bukkit/inventory/SmithingRecipe.java
@@ -23,7 +23,7 @@ public class SmithingRecipe implements Recipe, Keyed {
      * @param base The base ingredient
      * @param addition The addition ingredient
      */
-    public SmithingRecipe(@NotNull NamespacedKey key, @NotNull ItemStack result, @NotNull RecipeChoice base, @NotNull RecipeChoice addition) {
+    public SmithingRecipe(@NotNull final NamespacedKey key, @NotNull final ItemStack result, @NotNull final RecipeChoice base, @NotNull final RecipeChoice addition) {
         // Paper start
         this(key, result, base, addition, true);
     }
@@ -36,7 +36,7 @@ public class SmithingRecipe implements Recipe, Keyed {
      * @param addition The addition ingredient
      * @param copyNbt whether to copy the nbt from the input base item to the output
      */
-    public SmithingRecipe(@NotNull NamespacedKey key, @NotNull ItemStack result, @NotNull RecipeChoice base, @NotNull RecipeChoice addition, boolean copyNbt) {
+    public SmithingRecipe(@NotNull final NamespacedKey key, @NotNull final ItemStack result, @NotNull final RecipeChoice base, @NotNull final RecipeChoice addition, final boolean copyNbt) {
         this.copyNbt = copyNbt;
         // Paper end
         this.key = key;
diff --git a/src/main/java/org/bukkit/inventory/SmokingRecipe.java b/src/main/java/org/bukkit/inventory/SmokingRecipe.java
index 1073d9aec335c6484471027d217c9cefb1ff8c0b..ad32c45ae376499b45ed7345f1a9e663b6ae6a57 100644
--- a/src/main/java/org/bukkit/inventory/SmokingRecipe.java
+++ b/src/main/java/org/bukkit/inventory/SmokingRecipe.java
@@ -9,11 +9,11 @@ import org.jetbrains.annotations.NotNull;
  */
 public class SmokingRecipe extends CookingRecipe<SmokingRecipe> {
 
-    public SmokingRecipe(@NotNull NamespacedKey key, @NotNull ItemStack result, @NotNull Material source, float experience, int cookingTime) {
+    public SmokingRecipe(@NotNull final NamespacedKey key, @NotNull final ItemStack result, @NotNull final Material source, final float experience, final int cookingTime) {
         super(key, result, source, experience, cookingTime);
     }
 
-    public SmokingRecipe(@NotNull NamespacedKey key, @NotNull ItemStack result, @NotNull RecipeChoice input, float experience, int cookingTime) {
+    public SmokingRecipe(@NotNull final NamespacedKey key, @NotNull final ItemStack result, @NotNull final RecipeChoice input, final float experience, final int cookingTime) {
         super(key, result, input, experience, cookingTime);
     }
 }
diff --git a/src/main/java/org/bukkit/inventory/StonecutterInventory.java b/src/main/java/org/bukkit/inventory/StonecutterInventory.java
index e7a8e7188bf8b9840de56dc80c2b79d64a9389cb..a9a121c986b083b8de02caaaf7f8d6913b2fc026 100644
--- a/src/main/java/org/bukkit/inventory/StonecutterInventory.java
+++ b/src/main/java/org/bukkit/inventory/StonecutterInventory.java
@@ -23,7 +23,7 @@ public interface StonecutterInventory extends Inventory {
      *
      * @param itemStack item to set
      */
-    default void setInputItem(@Nullable ItemStack itemStack) {
+    default void setInputItem(@Nullable final ItemStack itemStack) {
         setItem(0, itemStack);
     }
 
@@ -42,7 +42,7 @@ public interface StonecutterInventory extends Inventory {
      *
      * @param itemStack item to set
      */
-    default void setResult(@Nullable ItemStack itemStack) {
+    default void setResult(@Nullable final ItemStack itemStack) {
         setItem(1, itemStack);
     }
     // Paper end
diff --git a/src/main/java/org/bukkit/inventory/StonecuttingRecipe.java b/src/main/java/org/bukkit/inventory/StonecuttingRecipe.java
index c971c18bb8b8ac78133f3d5624320f9d565b7763..8e9be1fed2f78a08d1805f4799fda2708fad9b9f 100644
--- a/src/main/java/org/bukkit/inventory/StonecuttingRecipe.java
+++ b/src/main/java/org/bukkit/inventory/StonecuttingRecipe.java
@@ -23,7 +23,7 @@ public class StonecuttingRecipe implements Recipe, Keyed {
      * @param result The item you want the recipe to create.
      * @param source The input material.
      */
-    public StonecuttingRecipe(@NotNull NamespacedKey key, @NotNull ItemStack result, @NotNull Material source) {
+    public StonecuttingRecipe(@NotNull final NamespacedKey key, @NotNull final ItemStack result, @NotNull final Material source) {
         this(key, result, new RecipeChoice.MaterialChoice(Collections.singletonList(source)));
     }
 
@@ -34,7 +34,7 @@ public class StonecuttingRecipe implements Recipe, Keyed {
      * @param result The item you want the recipe to create.
      * @param input The input choices.
      */
-    public StonecuttingRecipe(@NotNull NamespacedKey key, @NotNull ItemStack result, @NotNull RecipeChoice input) {
+    public StonecuttingRecipe(@NotNull final NamespacedKey key, @NotNull final ItemStack result, @NotNull final RecipeChoice input) {
         Preconditions.checkArgument(result.getType() != Material.AIR, "Recipe must have non-AIR result.");
         this.key = key;
         this.output = new ItemStack(result);
@@ -48,7 +48,7 @@ public class StonecuttingRecipe implements Recipe, Keyed {
      * @return The changed recipe, so you can chain calls.
      */
     @NotNull
-    public StonecuttingRecipe setInput(@NotNull Material input) {
+    public StonecuttingRecipe setInput(@NotNull final Material input) {
         this.ingredient = new RecipeChoice.MaterialChoice(Collections.singletonList(input));
         return this;
     }
@@ -72,7 +72,7 @@ public class StonecuttingRecipe implements Recipe, Keyed {
      * @return The changed recipe, so you can chain calls.
      */
     @NotNull
-    public StonecuttingRecipe setInputChoice(@NotNull RecipeChoice input) {
+    public StonecuttingRecipe setInputChoice(@NotNull final RecipeChoice input) {
         this.ingredient = input;
         return this;
     }
@@ -122,7 +122,7 @@ public class StonecuttingRecipe implements Recipe, Keyed {
      * @param group recipe group. An empty string denotes no group. May not be
      * null.
      */
-    public void setGroup(@NotNull String group) {
+    public void setGroup(@NotNull final String group) {
         Preconditions.checkArgument(group != null, "group cannot be null");
         this.group = group;
     }
diff --git a/src/main/java/org/bukkit/inventory/meta/BookMeta.java b/src/main/java/org/bukkit/inventory/meta/BookMeta.java
index 36bcbb3f3acedf7ebecbf6f6b358cf64af0edfb2..2c5e778f69b603a3621cfdb000c61097481513d0 100644
--- a/src/main/java/org/bukkit/inventory/meta/BookMeta.java
+++ b/src/main/java/org/bukkit/inventory/meta/BookMeta.java
@@ -323,7 +323,7 @@ public interface BookMeta extends ItemMeta, net.kyori.adventure.inventory.Book {
          */
         @NotNull
         @Deprecated // Paper
-        public BaseComponent[] getPage(int page) {
+        public BaseComponent[] getPage(final int page) {
             throw new UnsupportedOperationException("Not supported yet.");
         }
 
@@ -339,7 +339,7 @@ public interface BookMeta extends ItemMeta, net.kyori.adventure.inventory.Book {
          * @deprecated in favour of {@link #page(int, net.kyori.adventure.text.Component)}
          */
         @Deprecated // Paper
-        public void setPage(int page, @Nullable BaseComponent... data) {
+        public void setPage(final int page, @Nullable final BaseComponent... data) {
             throw new UnsupportedOperationException("Not supported yet.");
         }
 
@@ -363,7 +363,7 @@ public interface BookMeta extends ItemMeta, net.kyori.adventure.inventory.Book {
          * @deprecated in favour of {@link #pages(java.util.List)}
          */
         @Deprecated // Paper
-        public void setPages(@NotNull List<BaseComponent[]> pages) {
+        public void setPages(@NotNull final List<BaseComponent[]> pages) {
             throw new UnsupportedOperationException("Not supported yet.");
         }
 
@@ -375,7 +375,7 @@ public interface BookMeta extends ItemMeta, net.kyori.adventure.inventory.Book {
          * @deprecated in favour of {@link #pages(net.kyori.adventure.text.Component...)}
          */
         @Deprecated // Paper
-        public void setPages(@NotNull BaseComponent[]... pages) {
+        public void setPages(@NotNull final BaseComponent[]... pages) {
             throw new UnsupportedOperationException("Not supported yet.");
         }
 
@@ -387,7 +387,7 @@ public interface BookMeta extends ItemMeta, net.kyori.adventure.inventory.Book {
          * @deprecated in favour of {@link #addPages(net.kyori.adventure.text.Component...)}
          */
         @Deprecated // Paper
-        public void addPage(@NotNull BaseComponent[]... pages) {
+        public void addPage(@NotNull final BaseComponent[]... pages) {
             throw new UnsupportedOperationException("Not supported yet.");
         }
     }
diff --git a/src/main/java/org/bukkit/inventory/meta/tags/ItemTagType.java b/src/main/java/org/bukkit/inventory/meta/tags/ItemTagType.java
index 32d31d3ecb9f28deb21e731fe5bbff0e9724c3a2..b85c6039af812fb9a4f0afd42b76b498ecb9fb96 100644
--- a/src/main/java/org/bukkit/inventory/meta/tags/ItemTagType.java
+++ b/src/main/java/org/bukkit/inventory/meta/tags/ItemTagType.java
@@ -126,7 +126,7 @@ public interface ItemTagType<T, Z> {
 
         private final @NotNull Class<T> primitiveType;
 
-        PrimitiveTagType(@NotNull Class<T> primitiveType) {
+        PrimitiveTagType(@NotNull final Class<T> primitiveType) {
             this.primitiveType = primitiveType;
         }
 
@@ -144,13 +144,13 @@ public interface ItemTagType<T, Z> {
 
         @NotNull
         @Override
-        public T toPrimitive(@NotNull T complex, @NotNull ItemTagAdapterContext context) {
+        public T toPrimitive(@NotNull final T complex, @NotNull final ItemTagAdapterContext context) {
             return complex;
         }
 
         @NotNull
         @Override
-        public T fromPrimitive(@NotNull T primitive, @NotNull ItemTagAdapterContext context) {
+        public T fromPrimitive(@NotNull final T primitive, @NotNull final ItemTagAdapterContext context) {
             return primitive;
         }
     }
diff --git a/src/main/java/org/bukkit/loot/LootContext.java b/src/main/java/org/bukkit/loot/LootContext.java
index ad379615e1a7a2b4e418ed5a6b23595d08b9f993..35ff62fe441b102843f58addab1b182edf15b570 100644
--- a/src/main/java/org/bukkit/loot/LootContext.java
+++ b/src/main/java/org/bukkit/loot/LootContext.java
@@ -21,7 +21,7 @@ public final class LootContext {
     private final @Nullable Entity lootedEntity;
     private final @Nullable HumanEntity killer;
 
-    private LootContext(@NotNull Location location, float luck, int lootingModifier, @Nullable Entity lootedEntity, @Nullable HumanEntity killer) {
+    private LootContext(@NotNull final Location location, final float luck, final int lootingModifier, @Nullable final Entity lootedEntity, @Nullable final HumanEntity killer) {
         Preconditions.checkArgument(location != null, "LootContext location cannot be null");
         Preconditions.checkArgument(location.getWorld() != null, "LootContext World cannot be null");
         this.location = location;
@@ -107,7 +107,7 @@ public final class LootContext {
          *
          * @param location the location the LootContext should use
          */
-        public Builder(@NotNull Location location) {
+        public Builder(@NotNull final Location location) {
             this.location = location;
         }
 
@@ -118,7 +118,7 @@ public final class LootContext {
          * @return the Builder
          */
         @NotNull
-        public Builder luck(float luck) {
+        public Builder luck(final float luck) {
             this.luck = luck;
             return this;
         }
@@ -133,7 +133,7 @@ public final class LootContext {
          * @return the Builder
          */
         @NotNull
-        public Builder lootingModifier(int modifier) {
+        public Builder lootingModifier(final int modifier) {
             this.lootingModifier = modifier;
             return this;
         }
@@ -145,7 +145,7 @@ public final class LootContext {
          * @return the Builder
          */
         @NotNull
-        public Builder lootedEntity(@Nullable Entity lootedEntity) {
+        public Builder lootedEntity(@Nullable final Entity lootedEntity) {
             this.lootedEntity = lootedEntity;
             return this;
         }
@@ -159,7 +159,7 @@ public final class LootContext {
          * @return the Builder
          */
         @NotNull
-        public Builder killer(@Nullable HumanEntity killer) {
+        public Builder killer(@Nullable final HumanEntity killer) {
             this.killer = killer;
             return this;
         }
diff --git a/src/main/java/org/bukkit/loot/LootTables.java b/src/main/java/org/bukkit/loot/LootTables.java
index b76a5b28ac2ed877a4522ce1db8d800d3ca01abc..ce716bec178ce49c755452352f2dd7311abcc941 100644
--- a/src/main/java/org/bukkit/loot/LootTables.java
+++ b/src/main/java/org/bukkit/loot/LootTables.java
@@ -178,7 +178,7 @@ public enum LootTables implements Keyed {
 
     private final String location;
 
-    private LootTables(/*@NotNull*/ String location) {
+    private LootTables(/*@NotNull*/ final String location) {
         this.location = location;
     }
 
diff --git a/src/main/java/org/bukkit/loot/Lootable.java b/src/main/java/org/bukkit/loot/Lootable.java
index 901db852498e0658c79a57582508dab29bf0a798..126a8552b54ee11bd367bc09304b00ef24a3cf25 100644
--- a/src/main/java/org/bukkit/loot/Lootable.java
+++ b/src/main/java/org/bukkit/loot/Lootable.java
@@ -43,7 +43,7 @@ public interface Lootable {
      * @param table the Loot Table this {@link org.bukkit.block.Container} or {@link org.bukkit.entity.Mob} will have.
      * @param seed the seed to used to generate loot. Default is 0.
      */
-    default void setLootTable(@Nullable LootTable table, long seed) {
+    default void setLootTable(@Nullable final LootTable table, final long seed) {
         setLootTable(table);
         setSeed(seed);
     }
diff --git a/src/main/java/org/bukkit/map/MapCursor.java b/src/main/java/org/bukkit/map/MapCursor.java
index a465dd40a695261ec954a8e2cdf8ca2af7c7f1dc..a0968853622f4d96c8f8c6404e5eea0510785eb9 100644
--- a/src/main/java/org/bukkit/map/MapCursor.java
+++ b/src/main/java/org/bukkit/map/MapCursor.java
@@ -23,7 +23,7 @@ public final class MapCursor {
      * @deprecated Magic value
      */
     @Deprecated
-    public MapCursor(byte x, byte y, byte direction, byte type, boolean visible) {
+    public MapCursor(final byte x, final byte y, final byte direction, final byte type, final boolean visible) {
         this(x, y, direction, type, visible, (String) null); // Paper
     }
 
@@ -36,7 +36,7 @@ public final class MapCursor {
      * @param type The type (color/style) of the map cursor.
      * @param visible Whether the cursor is visible by default.
      */
-    public MapCursor(byte x, byte y, byte direction, @NotNull Type type, boolean visible) {
+    public MapCursor(final byte x, final byte y, final byte direction, @NotNull final Type type, final boolean visible) {
         this(x, y, direction, type, visible, (String) null); // Paper
     }
 
@@ -52,7 +52,7 @@ public final class MapCursor {
      * @deprecated Magic value. Use {@link #MapCursor(byte, byte, byte, byte, boolean, net.kyori.adventure.text.Component)}
      */
     @Deprecated
-    public MapCursor(byte x, byte y, byte direction, byte type, boolean visible, @Nullable String caption) {
+    public MapCursor(final byte x, final byte y, final byte direction, final byte type, final boolean visible, @Nullable final String caption) {
         this.x = x;
         this.y = y;
         setDirection(direction);
@@ -73,7 +73,7 @@ public final class MapCursor {
      * @deprecated Magic value
      */
     @Deprecated
-    public MapCursor(byte x, byte y, byte direction, byte type, boolean visible, @Nullable net.kyori.adventure.text.Component caption) {
+    public MapCursor(final byte x, final byte y, final byte direction, final byte type, final boolean visible, @Nullable final net.kyori.adventure.text.Component caption) {
         this.x = x; this.y = y; this.visible = visible; this.caption = caption;
         setDirection(direction);
         setRawType(type);
@@ -88,7 +88,7 @@ public final class MapCursor {
      * @param visible Whether the cursor is visible by default.
      * @param caption cursor caption
      */
-    public MapCursor(byte x, byte y, byte direction, @NotNull Type type, boolean visible, @Nullable net.kyori.adventure.text.Component caption) {
+    public MapCursor(final byte x, final byte y, final byte direction, @NotNull final Type type, final boolean visible, @Nullable final net.kyori.adventure.text.Component caption) {
         this.x = x; this.y = y; this.visible = visible; this.caption = caption;
         setDirection(direction);
         setType(type);
@@ -105,7 +105,7 @@ public final class MapCursor {
      * @param visible Whether the cursor is visible by default.
      * @param caption cursor caption
      */
-    public MapCursor(byte x, byte y, byte direction, @NotNull Type type, boolean visible, @Nullable String caption) {
+    public MapCursor(final byte x, final byte y, final byte direction, @NotNull final Type type, final boolean visible, @Nullable final String caption) {
         this.x = x;
         this.y = y;
         setDirection(direction);
@@ -177,7 +177,7 @@ public final class MapCursor {
      *
      * @param x The X coordinate.
      */
-    public void setX(byte x) {
+    public void setX(final byte x) {
         this.x = x;
     }
 
@@ -186,7 +186,7 @@ public final class MapCursor {
      *
      * @param y The Y coordinate.
      */
-    public void setY(byte y) {
+    public void setY(final byte y) {
         this.y = y;
     }
 
@@ -195,7 +195,7 @@ public final class MapCursor {
      *
      * @param direction The facing of the cursor, from 0 to 15.
      */
-    public void setDirection(byte direction) {
+    public void setDirection(final byte direction) {
         if (direction < 0 || direction > 15) {
             throw new IllegalArgumentException("Direction must be in the range 0-15");
         }
@@ -207,7 +207,7 @@ public final class MapCursor {
      *
      * @param type The type (color/style) of the map cursor.
      */
-    public void setType(@NotNull Type type) {
+    public void setType(@NotNull final Type type) {
         setRawType(type.value);
     }
 
@@ -218,7 +218,7 @@ public final class MapCursor {
      * @deprecated Magic value
      */
     @Deprecated
-    public void setRawType(byte type) {
+    public void setRawType(final byte type) {
         if (type < 0 || type > 26) {
             throw new IllegalArgumentException("Type must be in the range 0-26");
         }
@@ -230,7 +230,7 @@ public final class MapCursor {
      *
      * @param visible True if visible.
      */
-    public void setVisible(boolean visible) {
+    public void setVisible(final boolean visible) {
         this.visible = visible;
     }
 
@@ -248,7 +248,7 @@ public final class MapCursor {
      *
      * @param caption new caption
      */
-    public void caption(@Nullable net.kyori.adventure.text.Component caption) {
+    public void caption(@Nullable final net.kyori.adventure.text.Component caption) {
         this.caption = caption;
     }
     // Paper end
@@ -271,7 +271,7 @@ public final class MapCursor {
      * @deprecated in favour of {@link #caption(net.kyori.adventure.text.Component)}
      */
     @Deprecated // Paper
-    public void setCaption(@Nullable String caption) {
+    public void setCaption(@Nullable final String caption) {
         this.caption = caption == null ? null : net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().deserialize(caption); // Paper
     }
 
@@ -312,7 +312,7 @@ public final class MapCursor {
 
         private final byte value;
 
-        private Type(int value) {
+        private Type(final int value) {
             this.value = (byte) value;
         }
 
@@ -336,8 +336,8 @@ public final class MapCursor {
          */
         @Deprecated
         @Nullable
-        public static Type byValue(byte value) {
-            for (Type t : values()) {
+        public static Type byValue(final byte value) {
+            for (final Type t : values()) {
                 if (t.value == value) return t;
             }
             return null;
diff --git a/src/main/java/org/bukkit/map/MapCursorCollection.java b/src/main/java/org/bukkit/map/MapCursorCollection.java
index 2a7b83af02e735bd110115a38ea4ab79b8c19d4b..cca6a128fa5780a9b889324f736a7f11dac95a64 100644
--- a/src/main/java/org/bukkit/map/MapCursorCollection.java
+++ b/src/main/java/org/bukkit/map/MapCursorCollection.java
@@ -28,7 +28,7 @@ public final class MapCursorCollection {
      * @return The MapCursor.
      */
     @NotNull
-    public MapCursor getCursor(int index) {
+    public MapCursor getCursor(final int index) {
         return cursors.get(index);
     }
 
@@ -38,7 +38,7 @@ public final class MapCursorCollection {
      * @param cursor The MapCursor to remove.
      * @return Whether the cursor was removed successfully.
      */
-    public boolean removeCursor(@NotNull MapCursor cursor) {
+    public boolean removeCursor(@NotNull final MapCursor cursor) {
         return cursors.remove(cursor);
     }
 
@@ -49,7 +49,7 @@ public final class MapCursorCollection {
      * @return The MapCursor that was passed.
      */
     @NotNull
-    public MapCursor addCursor(@NotNull MapCursor cursor) {
+    public MapCursor addCursor(@NotNull final MapCursor cursor) {
         cursors.add(cursor);
         return cursor;
     }
@@ -63,7 +63,7 @@ public final class MapCursorCollection {
      * @return The newly added MapCursor.
      */
     @NotNull
-    public MapCursor addCursor(int x, int y, byte direction) {
+    public MapCursor addCursor(final int x, final int y, final byte direction) {
         return addCursor(x, y, direction, (byte) 0, true);
     }
 
@@ -79,7 +79,7 @@ public final class MapCursorCollection {
      */
     @Deprecated
     @NotNull
-    public MapCursor addCursor(int x, int y, byte direction, byte type) {
+    public MapCursor addCursor(final int x, final int y, final byte direction, final byte type) {
         return addCursor(x, y, direction, type, true);
     }
 
@@ -96,7 +96,7 @@ public final class MapCursorCollection {
      */
     @Deprecated
     @NotNull
-    public MapCursor addCursor(int x, int y, byte direction, byte type, boolean visible) {
+    public MapCursor addCursor(final int x, final int y, final byte direction, final byte type, final boolean visible) {
         return addCursor(new MapCursor((byte) x, (byte) y, direction, type, visible));
     }
 
@@ -114,7 +114,7 @@ public final class MapCursorCollection {
      */
     @Deprecated
     @NotNull
-    public MapCursor addCursor(int x, int y, byte direction, byte type, boolean visible, @Nullable String caption) {
+    public MapCursor addCursor(final int x, final int y, final byte direction, final byte type, final boolean visible, @Nullable final String caption) {
         return addCursor(new MapCursor((byte) x, (byte) y, direction, type, visible, caption));
     }
     // Paper start
@@ -131,7 +131,7 @@ public final class MapCursorCollection {
      * @deprecated Magic value
      */
     @Deprecated
-    public @NotNull MapCursor addCursor(int x, int y, byte direction, byte type, boolean visible, @Nullable net.kyori.adventure.text.Component caption) {
+    public @NotNull MapCursor addCursor(final int x, final int y, final byte direction, final byte type, final boolean visible, @Nullable final net.kyori.adventure.text.Component caption) {
         return addCursor(new MapCursor((byte) x, (byte) y, direction, type, visible, caption));
     }
     // Paper end
diff --git a/src/main/java/org/bukkit/map/MapFont.java b/src/main/java/org/bukkit/map/MapFont.java
index 4fab8d47f80b6bfc0a2289755be27611f2fdd745..46b688afec32cb9a874033d00f174dfbbc210f47 100644
--- a/src/main/java/org/bukkit/map/MapFont.java
+++ b/src/main/java/org/bukkit/map/MapFont.java
@@ -21,7 +21,7 @@ public class MapFont {
      * @param sprite The CharacterSprite to set.
      * @throws IllegalStateException if this font is static.
      */
-    public void setChar(char ch, @NotNull CharacterSprite sprite) {
+    public void setChar(final char ch, @NotNull final CharacterSprite sprite) {
         if (!malleable) {
             throw new IllegalStateException("this font is not malleable");
         }
@@ -40,7 +40,7 @@ public class MapFont {
      *     there is none.
      */
     @Nullable
-    public CharacterSprite getChar(char ch) {
+    public CharacterSprite getChar(final char ch) {
         return chars.get(Character.valueOf(ch));
     }
 
@@ -51,7 +51,7 @@ public class MapFont {
      * @param text The text.
      * @return The width in pixels.
      */
-    public int getWidth(@NotNull String text) {
+    public int getWidth(@NotNull final String text) {
         if (!isValid(text)) {
             throw new IllegalArgumentException("text contains invalid characters");
         }
@@ -62,9 +62,9 @@ public class MapFont {
 
         int result = 0;
         for (int i = 0; i < text.length(); ++i) {
-            char ch = text.charAt(i);
+            final char ch = text.charAt(i);
             if (ch == ChatColor.COLOR_CHAR) {
-                int j = text.indexOf(';', i);
+                final int j = text.indexOf(';', i);
                 if (j >= 0) {
                     i = j;
                     continue;
@@ -94,9 +94,9 @@ public class MapFont {
      * @return True if the string contains only defined characters, false
      *     otherwise.
      */
-    public boolean isValid(@NotNull String text) {
+    public boolean isValid(@NotNull final String text) {
         for (int i = 0; i < text.length(); ++i) {
-            char ch = text.charAt(i);
+            final char ch = text.charAt(i);
             if (ch == ChatColor.COLOR_CHAR || ch == '\n') continue;
             if (chars.get(Character.valueOf(ch)) == null) return false;
         }
@@ -112,7 +112,7 @@ public class MapFont {
         private final int height;
         private final boolean[] data;
 
-        public CharacterSprite(int width, int height, @NotNull boolean @NotNull [] data) {
+        public CharacterSprite(final int width, final int height, @NotNull final boolean @NotNull [] data) {
             this.width = width;
             this.height = height;
             this.data = data;
@@ -129,7 +129,7 @@ public class MapFont {
          * @param col The column, in the range [0,8).
          * @return True if the pixel is solid, false if transparent.
          */
-        public boolean get(int row, int col) {
+        public boolean get(final int row, final int col) {
             if (row < 0 || col < 0 || row >= height || col >= width) return false;
             return data[row * width + col];
         }
diff --git a/src/main/java/org/bukkit/map/MapPalette.java b/src/main/java/org/bukkit/map/MapPalette.java
index 3a9aaca2e76411a9c27f9f5e0f22d060d5a66d06..a1f38cc8c2e74613fedd981eae919941f5827607 100644
--- a/src/main/java/org/bukkit/map/MapPalette.java
+++ b/src/main/java/org/bukkit/map/MapPalette.java
@@ -19,23 +19,23 @@ public final class MapPalette {
     private MapPalette() {}
 
     @NotNull
-    private static Color c(int r, int g, int b) {
+    private static Color c(final int r, final int g, final int b) {
         return new Color(r, g, b);
     }
 
     @NotNull
-    private static Color c(int r, int g, int b, int a) {
+    private static Color c(final int r, final int g, final int b, final int a) {
         return new Color(r, g, b, a);
     }
 
-    private static double getDistance(@NotNull Color c1, @NotNull Color c2) {
-        double rmean = (c1.getRed() + c2.getRed()) / 2.0;
-        double r = c1.getRed() - c2.getRed();
-        double g = c1.getGreen() - c2.getGreen();
-        int b = c1.getBlue() - c2.getBlue();
-        double weightR = 2 + rmean / 256.0;
-        double weightG = 4.0;
-        double weightB = 2 + (255 - rmean) / 256.0;
+    private static double getDistance(@NotNull final Color c1, @NotNull final Color c2) {
+        final double rmean = (c1.getRed() + c2.getRed()) / 2.0;
+        final double r = c1.getRed() - c2.getRed();
+        final double g = c1.getGreen() - c2.getGreen();
+        final int b = c1.getBlue() - c2.getBlue();
+        final double weightR = 2 + rmean / 256.0;
+        final double weightG = 4.0;
+        final double weightB = 2 + (255 - rmean) / 256.0;
         return weightR * r * r + weightG * g * g + weightB * b * b;
     }
 
@@ -184,9 +184,9 @@ public final class MapPalette {
      * @return The resized image.
      */
     @NotNull
-    public static BufferedImage resizeImage(@Nullable Image image) {
-        BufferedImage result = new BufferedImage(128, 128, BufferedImage.TYPE_INT_ARGB);
-        Graphics2D graphics = result.createGraphics();
+    public static BufferedImage resizeImage(@Nullable final Image image) {
+        final BufferedImage result = new BufferedImage(128, 128, BufferedImage.TYPE_INT_ARGB);
+        final Graphics2D graphics = result.createGraphics();
         graphics.drawImage(image, 0, 0, 128, 128, null);
         graphics.dispose();
         return result;
@@ -201,16 +201,16 @@ public final class MapPalette {
      */
     @Deprecated
     @NotNull
-    public static byte[] imageToBytes(@NotNull Image image) {
-        BufferedImage temp = new BufferedImage(image.getWidth(null), image.getHeight(null), BufferedImage.TYPE_INT_ARGB);
-        Graphics2D graphics = temp.createGraphics();
+    public static byte[] imageToBytes(@NotNull final Image image) {
+        final BufferedImage temp = new BufferedImage(image.getWidth(null), image.getHeight(null), BufferedImage.TYPE_INT_ARGB);
+        final Graphics2D graphics = temp.createGraphics();
         graphics.drawImage(image, 0, 0, null);
         graphics.dispose();
 
-        int[] pixels = new int[temp.getWidth() * temp.getHeight()];
+        final int[] pixels = new int[temp.getWidth() * temp.getHeight()];
         temp.getRGB(0, 0, temp.getWidth(), temp.getHeight(), pixels, 0, temp.getWidth());
 
-        byte[] result = new byte[temp.getWidth() * temp.getHeight()];
+        final byte[] result = new byte[temp.getWidth() * temp.getHeight()];
         for (int i = 0; i < pixels.length; i++) {
             result[i] = matchColor(new Color(pixels[i], true));
         }
@@ -228,7 +228,7 @@ public final class MapPalette {
      * @deprecated Magic value
      */
     @Deprecated
-    public static byte matchColor(int r, int g, int b) {
+    public static byte matchColor(final int r, final int g, final int b) {
         return matchColor(new Color(r, g, b));
     }
 
@@ -241,7 +241,7 @@ public final class MapPalette {
      * @deprecated Magic value
      */
     @Deprecated
-    public static byte matchColor(@NotNull Color color) {
+    public static byte matchColor(@NotNull final Color color) {
         if (color.getAlpha() < 128) return 0;
 
         if (mapColorCache != null && mapColorCache.isCached()) {
@@ -252,7 +252,7 @@ public final class MapPalette {
         double best = -1;
 
         for (int i = 4; i < colors.length; i++) {
-            double distance = getDistance(color, colors[i]);
+            final double distance = getDistance(color, colors[i]);
             if (distance < best || best == -1) {
                 best = distance;
                 index = i;
@@ -272,7 +272,7 @@ public final class MapPalette {
      */
     @Deprecated
     @NotNull
-    public static Color getColor(byte index) {
+    public static Color getColor(final byte index) {
         // Minecraft has 143 colors, some of which have negative byte representations
         return colors[index >= 0 ? index : index + 256];
     }
@@ -284,7 +284,7 @@ public final class MapPalette {
      *
      * @param mapColorCache The map color cache to set
      */
-    public static void setMapColorCache(@NotNull MapColorCache mapColorCache) {
+    public static void setMapColorCache(@NotNull final MapColorCache mapColorCache) {
         Preconditions.checkState(MapPalette.mapColorCache == null, "Map color cache already set");
 
         MapPalette.mapColorCache = mapColorCache;
diff --git a/src/main/java/org/bukkit/map/MapRenderer.java b/src/main/java/org/bukkit/map/MapRenderer.java
index 9273d5766281e411098db84cc05676054fadd0a4..96b8fec3f11b4bbce362506ac48724ce74e176f6 100644
--- a/src/main/java/org/bukkit/map/MapRenderer.java
+++ b/src/main/java/org/bukkit/map/MapRenderer.java
@@ -24,7 +24,7 @@ public abstract class MapRenderer {
      * @param contextual Whether the renderer is contextual. See {@link
      *     #isContextual()}.
      */
-    public MapRenderer(boolean contextual) {
+    public MapRenderer(final boolean contextual) {
         this.contextual = contextual;
     }
 
@@ -43,7 +43,7 @@ public abstract class MapRenderer {
      *
      * @param map The MapView being initialized.
      */
-    public void initialize(@NotNull MapView map) {}
+    public void initialize(@NotNull final MapView map) {}
 
     /**
      * Render to the given map.
diff --git a/src/main/java/org/bukkit/map/MapView.java b/src/main/java/org/bukkit/map/MapView.java
index ff7c20575fcf47eb59da6424f81f035622d48c8a..5de1e204be30da9fa9268909390dd88e6b1d0bf7 100644
--- a/src/main/java/org/bukkit/map/MapView.java
+++ b/src/main/java/org/bukkit/map/MapView.java
@@ -23,7 +23,7 @@ public interface MapView {
 
         private final byte value;
 
-        private Scale(int value) {
+        private Scale(final int value) {
             this.value = (byte) value;
         }
 
@@ -36,7 +36,7 @@ public interface MapView {
          */
         @Deprecated
         @Nullable
-        public static Scale valueOf(byte value) {
+        public static Scale valueOf(final byte value) {
             switch (value) {
             case 0: return CLOSEST;
             case 1: return CLOSE;
diff --git a/src/main/java/org/bukkit/map/MinecraftFont.java b/src/main/java/org/bukkit/map/MinecraftFont.java
index 1c81e287e6249a56c0cfd2a78c6246662cd3d99e..ac1e09809461c49998b736147657ba9330accac3 100644
--- a/src/main/java/org/bukkit/map/MinecraftFont.java
+++ b/src/main/java/org/bukkit/map/MinecraftFont.java
@@ -294,7 +294,7 @@ public class MinecraftFont extends MapFont {
         this(true);
     }
 
-    private MinecraftFont(boolean malleable) {
+    private MinecraftFont(final boolean malleable) {
         for (int i = 1; i < fontData.length; ++i) {
             char ch = (char) i;
             if (i >= 32 && i < 32 + fontChars.length()) {
@@ -306,7 +306,7 @@ public class MinecraftFont extends MapFont {
                 continue;
             }
 
-            int[] rows = fontData[i];
+            final int[] rows = fontData[i];
             int width = 0;
             for (int r = 0; r < 8; ++r) {
                 for (int c = 0; c < 8; ++c) {
@@ -317,7 +317,7 @@ public class MinecraftFont extends MapFont {
             }
             ++width;
 
-            boolean[] data = new boolean[width * 8];
+            final boolean[] data = new boolean[width * 8];
             for (int r = 0; r < 8; ++r) {
                 for (int c = 0; c < width; ++c) {
                     data[r * width + c] = (rows[r] & (1 << c)) != 0;
diff --git a/src/main/java/org/bukkit/material/Banner.java b/src/main/java/org/bukkit/material/Banner.java
index 2dec14f4727558189eeeb67289967fb3d0ee5707..0028361d5ba78f5e027ade72ee9a1d3a3bb2f494 100644
--- a/src/main/java/org/bukkit/material/Banner.java
+++ b/src/main/java/org/bukkit/material/Banner.java
@@ -16,7 +16,7 @@ public class Banner extends MaterialData implements Attachable {
         super(Material.LEGACY_BANNER);
     }
 
-    public Banner(Material type) {
+    public Banner(final Material type) {
         super(type);
     }
 
@@ -26,7 +26,7 @@ public class Banner extends MaterialData implements Attachable {
      * @deprecated Magic value
      */
     @Deprecated
-    public Banner(Material type, byte data) {
+    public Banner(final Material type, final byte data) {
         super(type, data);
     }
 
@@ -37,7 +37,7 @@ public class Banner extends MaterialData implements Attachable {
     @Override
     public @NotNull BlockFace getAttachedFace() {
         if (isWallBanner()) {
-            byte data = getData();
+            final byte data = getData();
 
             switch (data) {
                 case 0x2:
@@ -61,7 +61,7 @@ public class Banner extends MaterialData implements Attachable {
 
     @Override
     public @NotNull BlockFace getFacing() {
-        byte data = getData();
+        final byte data = getData();
 
         if (!isWallBanner()) {
             switch (data) {
@@ -121,8 +121,8 @@ public class Banner extends MaterialData implements Attachable {
     }
 
     @Override
-    public void setFacingDirection(@NotNull BlockFace face) {
-        byte data;
+    public void setFacingDirection(@NotNull final BlockFace face) {
+        final byte data;
 
         if (isWallBanner()) {
             switch (face) {
diff --git a/src/main/java/org/bukkit/material/Bed.java b/src/main/java/org/bukkit/material/Bed.java
index 5d865a5e8808781a2f45af5497d218cdc4a900cf..606b9f8df04fa58d33a3ac8b5825a96697f82515 100644
--- a/src/main/java/org/bukkit/material/Bed.java
+++ b/src/main/java/org/bukkit/material/Bed.java
@@ -26,7 +26,7 @@ public class Bed extends MaterialData implements Directional {
      *
      * @param direction the direction the bed's head is facing
      */
-    public Bed(@NotNull BlockFace direction) {
+    public Bed(@NotNull final BlockFace direction) {
         this();
         setFacingDirection(direction);
     }
@@ -59,7 +59,7 @@ public class Bed extends MaterialData implements Directional {
      *
      * @param isHeadOfBed True to make it the head.
      */
-    public void setHeadOfBed(boolean isHeadOfBed) {
+    public void setHeadOfBed(final boolean isHeadOfBed) {
         setData((byte) (isHeadOfBed ? (getData() | 0x8) : (getData() & ~0x8)));
     }
 
@@ -68,7 +68,7 @@ public class Bed extends MaterialData implements Directional {
      * only affect one of the two blocks the bed is made of.
      */
     @Override
-    public void setFacingDirection(@NotNull BlockFace face) {
+    public void setFacingDirection(@NotNull final BlockFace face) {
         byte data;
 
         switch (face) {
@@ -103,7 +103,7 @@ public class Bed extends MaterialData implements Directional {
      */
     @Override
     public @NotNull BlockFace getFacing() {
-        byte data = (byte) (getData() & 0x7);
+        final byte data = (byte) (getData() & 0x7);
 
         switch (data) {
         case 0x0:
diff --git a/src/main/java/org/bukkit/material/Button.java b/src/main/java/org/bukkit/material/Button.java
index 6a4568530ae0a51d6a02e6a46b8e267ce291c210..16cc7614f7e4a475cd09c7f41447aea0c3388ab3 100644
--- a/src/main/java/org/bukkit/material/Button.java
+++ b/src/main/java/org/bukkit/material/Button.java
@@ -48,7 +48,7 @@ public class Button extends SimpleAttachableMaterialData implements Redstone {
      * @param bool
      *            whether or not the button is powered
      */
-    public void setPowered(boolean bool) {
+    public void setPowered(final boolean bool) {
         setData((byte) (bool ? (getData() | 0x8) : (getData() & ~0x8)));
     }
 
@@ -59,7 +59,7 @@ public class Button extends SimpleAttachableMaterialData implements Redstone {
      */
     @Override
     public @NotNull BlockFace getAttachedFace() {
-        byte data = (byte) (getData() & 0x7);
+        final byte data = (byte) (getData() & 0x7);
 
         switch (data) {
         case 0x0:
@@ -88,7 +88,7 @@ public class Button extends SimpleAttachableMaterialData implements Redstone {
      * Sets the direction this button is pointing toward
      */
     @Override
-    public void setFacingDirection(@NotNull BlockFace face) {
+    public void setFacingDirection(@NotNull final BlockFace face) {
         byte data = (byte) (getData() & 0x8);
 
         switch (face) {
diff --git a/src/main/java/org/bukkit/material/Cake.java b/src/main/java/org/bukkit/material/Cake.java
index 2035f7614780670af1f71dcdefd1293ac3d2848a..59208f4fe4aa2b09d0bdfc03e1a6d9ca51a9c47f 100644
--- a/src/main/java/org/bukkit/material/Cake.java
+++ b/src/main/java/org/bukkit/material/Cake.java
@@ -14,7 +14,7 @@ public class Cake extends MaterialData {
         super(Material.LEGACY_CAKE_BLOCK);
     }
 
-    public Cake(Material type) {
+    public Cake(final Material type) {
         super(type);
     }
 
@@ -24,7 +24,7 @@ public class Cake extends MaterialData {
      * @deprecated Magic value
      */
     @Deprecated
-    public Cake(Material type, byte data) {
+    public Cake(final Material type, final byte data) {
         super(type, data);
     }
 
@@ -51,7 +51,7 @@ public class Cake extends MaterialData {
      *
      * @param n The number of slices eaten
      */
-    public void setSlicesEaten(int n) {
+    public void setSlicesEaten(final int n) {
         if (n < 6) {
             setData((byte) n);
         } // TODO: else destroy the block? Probably not possible though
diff --git a/src/main/java/org/bukkit/material/Cauldron.java b/src/main/java/org/bukkit/material/Cauldron.java
index cb3fe78720ad0e8e27610b888a868dc3c4040d5b..f1d291a192cfb84aaaff3497dcb621cd87901ab2 100644
--- a/src/main/java/org/bukkit/material/Cauldron.java
+++ b/src/main/java/org/bukkit/material/Cauldron.java
@@ -34,7 +34,7 @@ public class Cauldron extends MaterialData {
      * @deprecated Magic value
      */
     @Deprecated
-    public Cauldron(byte data) {
+    public Cauldron(final byte data) {
         super(Material.LEGACY_CAULDRON, data);
     }
 
diff --git a/src/main/java/org/bukkit/material/Chest.java b/src/main/java/org/bukkit/material/Chest.java
index d974453e4f7a0fd6d31963f65ed1375627073421..f56aa918d9ce155d667ea04c3258904ac08cfa70 100644
--- a/src/main/java/org/bukkit/material/Chest.java
+++ b/src/main/java/org/bukkit/material/Chest.java
@@ -23,7 +23,7 @@ public class Chest extends DirectionalContainer {
      *
      * @param direction the direction the chest's lit opens towards
      */
-    public Chest(@NotNull BlockFace direction) {
+    public Chest(@NotNull final BlockFace direction) {
         this();
         setFacingDirection(direction);
     }
diff --git a/src/main/java/org/bukkit/material/Coal.java b/src/main/java/org/bukkit/material/Coal.java
index c8d88ff721e574534532d4fd4b1010b5c9a85d34..e99a7cd2411526412c1a80e601d637053bbfad09 100644
--- a/src/main/java/org/bukkit/material/Coal.java
+++ b/src/main/java/org/bukkit/material/Coal.java
@@ -18,7 +18,7 @@ public class Coal extends MaterialData {
         super(Material.LEGACY_COAL);
     }
 
-    public Coal(@NotNull CoalType type) {
+    public Coal(@NotNull final CoalType type) {
         this();
         setType(type);
     }
@@ -51,7 +51,7 @@ public class Coal extends MaterialData {
      *
      * @param type New type of this coal
      */
-    public void setType(@NotNull CoalType type) {
+    public void setType(@NotNull final CoalType type) {
         setData(type.getData());
     }
 
diff --git a/src/main/java/org/bukkit/material/CocoaPlant.java b/src/main/java/org/bukkit/material/CocoaPlant.java
index ec795074cdcf2175c70e562a9b2e6f3a1d8cab33..87fd2f321c420549234878d1b9cc23d88181efcf 100644
--- a/src/main/java/org/bukkit/material/CocoaPlant.java
+++ b/src/main/java/org/bukkit/material/CocoaPlant.java
@@ -34,12 +34,12 @@ public class CocoaPlant extends MaterialData implements Directional, Attachable
         super(type, data);
     }
 
-    public CocoaPlant(@NotNull CocoaPlantSize sz) {
+    public CocoaPlant(@NotNull final CocoaPlantSize sz) {
         this();
         setSize(sz);
     }
 
-    public CocoaPlant(@NotNull CocoaPlantSize sz, @NotNull BlockFace dir) {
+    public CocoaPlant(@NotNull final CocoaPlantSize sz, @NotNull final BlockFace dir) {
         this();
         setSize(sz);
         setFacingDirection(dir);
@@ -66,7 +66,7 @@ public class CocoaPlant extends MaterialData implements Directional, Attachable
      *
      * @param sz - size of plant
      */
-    public void setSize(@NotNull CocoaPlantSize sz) {
+    public void setSize(@NotNull final CocoaPlantSize sz) {
         int dat = getData() & 0x3;
         switch (sz) {
             case SMALL:
@@ -87,7 +87,7 @@ public class CocoaPlant extends MaterialData implements Directional, Attachable
     }
 
     @Override
-    public void setFacingDirection(@NotNull BlockFace face) {
+    public void setFacingDirection(@NotNull final BlockFace face) {
         int dat = getData() & 0xC;
         switch (face) {
             default:
diff --git a/src/main/java/org/bukkit/material/Command.java b/src/main/java/org/bukkit/material/Command.java
index 014dfb03f4670a354b851ee76bc36ca0ca80bfbc..fdcbbe965b0b5c9348e13040cd06bdb31b37128a 100644
--- a/src/main/java/org/bukkit/material/Command.java
+++ b/src/main/java/org/bukkit/material/Command.java
@@ -47,7 +47,7 @@ public class Command extends MaterialData implements Redstone {
      * @param bool
      *            whether or not the command block is powered
      */
-    public void setPowered(boolean bool) {
+    public void setPowered(final boolean bool) {
         setData((byte) (bool ? (getData() | 1) : (getData() & -2)));
     }
 
diff --git a/src/main/java/org/bukkit/material/Comparator.java b/src/main/java/org/bukkit/material/Comparator.java
index 9aa56f29fd4b59ec9eee07482800db990301cd91..ff24ad153012e1efd3f0da3632b0035ce12a5f3b 100644
--- a/src/main/java/org/bukkit/material/Comparator.java
+++ b/src/main/java/org/bukkit/material/Comparator.java
@@ -34,7 +34,7 @@ public class Comparator extends MaterialData implements Directional, Redstone {
      *
      * @see BlockFace
      */
-    public Comparator(@NotNull BlockFace facingDirection) {
+    public Comparator(@NotNull final BlockFace facingDirection) {
         this(facingDirection, DEFAULT_SUBTRACTION_MODE, DEFAULT_STATE);
     }
 
@@ -46,7 +46,7 @@ public class Comparator extends MaterialData implements Directional, Redstone {
      *
      * @see BlockFace
      */
-    public Comparator(@NotNull BlockFace facingDirection, boolean isSubtraction) {
+    public Comparator(@NotNull final BlockFace facingDirection, final boolean isSubtraction) {
         this(facingDirection, isSubtraction, DEFAULT_STATE);
     }
 
@@ -59,13 +59,13 @@ public class Comparator extends MaterialData implements Directional, Redstone {
      *
      * @see BlockFace
      */
-    public Comparator(@NotNull BlockFace facingDirection, boolean isSubtraction, boolean state) {
+    public Comparator(@NotNull final BlockFace facingDirection, final boolean isSubtraction, final boolean state) {
         super(state ? Material.LEGACY_REDSTONE_COMPARATOR_ON : Material.LEGACY_REDSTONE_COMPARATOR_OFF);
         setFacingDirection(facingDirection);
         setSubtractionMode(isSubtraction);
     }
 
-    public Comparator(Material type) {
+    public Comparator(final Material type) {
         super(type);
     }
 
@@ -75,7 +75,7 @@ public class Comparator extends MaterialData implements Directional, Redstone {
      * @deprecated Magic value
      */
     @Deprecated
-    public Comparator(Material type, byte data) {
+    public Comparator(final Material type, final byte data) {
         super(type, data);
     }
 
@@ -84,7 +84,7 @@ public class Comparator extends MaterialData implements Directional, Redstone {
      *
      * @param isSubtraction True if the comparator is in subtraction mode, false for normal comparator operation
      */
-    public void setSubtractionMode(boolean isSubtraction) {
+    public void setSubtractionMode(final boolean isSubtraction) {
         setData((byte) (getData() & 0xB | (isSubtraction ? 0x4 : 0x0)));
     }
 
@@ -105,7 +105,7 @@ public class Comparator extends MaterialData implements Directional, Redstone {
      * @see BlockFace
      */
     @Override
-    public void setFacingDirection(@NotNull BlockFace face) {
+    public void setFacingDirection(@NotNull final BlockFace face) {
         int data = getData() & 0xC;
 
         switch (face) {
@@ -138,7 +138,7 @@ public class Comparator extends MaterialData implements Directional, Redstone {
      */
     @Override
     public @NotNull BlockFace getFacing() {
-        byte data = (byte) (getData() & 0x3);
+        final byte data = (byte) (getData() & 0x3);
 
         switch (data) {
         case 0x0:
diff --git a/src/main/java/org/bukkit/material/Crops.java b/src/main/java/org/bukkit/material/Crops.java
index 6274eba6c33d4bc6b7ce98a65b81a34756ec6237..7da8b89cc2c8748cb164b471e7dc13f2ee14b235 100644
--- a/src/main/java/org/bukkit/material/Crops.java
+++ b/src/main/java/org/bukkit/material/Crops.java
@@ -35,7 +35,7 @@ public class Crops extends MaterialData {
      *
      * @param state The growth state of the crops
      */
-    public Crops(@NotNull CropState state) {
+    public Crops(@NotNull final CropState state) {
         this(DEFAULT_TYPE, state);
         setState(state);
     }
@@ -109,7 +109,7 @@ public class Crops extends MaterialData {
      *
      * @param state New growth state of this crop
      */
-    public void setState(@NotNull CropState state) {
+    public void setState(@NotNull final CropState state) {
         switch (getItemType()) {
             case LEGACY_CROPS:
             case LEGACY_CARROT:
diff --git a/src/main/java/org/bukkit/material/DetectorRail.java b/src/main/java/org/bukkit/material/DetectorRail.java
index e8ab2904214f160c56aa01bc106d96f59042e706..0bb0306f4f52b70d5df93b96fd06fcbc3e3a3e61 100644
--- a/src/main/java/org/bukkit/material/DetectorRail.java
+++ b/src/main/java/org/bukkit/material/DetectorRail.java
@@ -33,7 +33,7 @@ public class DetectorRail extends ExtendedRails implements PressureSensor {
         return (getData() & 0x8) == 0x8;
     }
 
-    public void setPressed(boolean isPressed) {
+    public void setPressed(final boolean isPressed) {
         setData((byte) (isPressed ? (getData() | 0x8) : (getData() & ~0x8)));
     }
 
diff --git a/src/main/java/org/bukkit/material/Diode.java b/src/main/java/org/bukkit/material/Diode.java
index b27f3d40ac903a9150b9bab5f5da9316b94875d5..b02d42779bbe49ab89f945def596bf3f47089402 100644
--- a/src/main/java/org/bukkit/material/Diode.java
+++ b/src/main/java/org/bukkit/material/Diode.java
@@ -41,7 +41,7 @@ public class Diode extends MaterialData implements Directional, Redstone {
      *
      * @see BlockFace
      */
-    public Diode(@NotNull BlockFace facingDirection) {
+    public Diode(@NotNull final BlockFace facingDirection) {
         this(facingDirection, DEFAULT_DELAY, DEFAULT_STATE);
     }
 
@@ -55,7 +55,7 @@ public class Diode extends MaterialData implements Directional, Redstone {
      *
      * @see BlockFace
      */
-    public Diode(@NotNull BlockFace facingDirection, int delay) {
+    public Diode(@NotNull final BlockFace facingDirection, final int delay) {
         this(facingDirection, delay, DEFAULT_STATE);
     }
 
@@ -70,13 +70,13 @@ public class Diode extends MaterialData implements Directional, Redstone {
      *
      * @see BlockFace
      */
-    public Diode(@NotNull BlockFace facingDirection, int delay, boolean state) {
+    public Diode(@NotNull final BlockFace facingDirection, final int delay, final boolean state) {
         super(state ? Material.LEGACY_DIODE_BLOCK_ON : Material.LEGACY_DIODE_BLOCK_OFF);
         setFacingDirection(facingDirection);
         setDelay(delay);
     }
 
-    public Diode(Material type) {
+    public Diode(final Material type) {
         super(type);
     }
 
@@ -86,7 +86,7 @@ public class Diode extends MaterialData implements Directional, Redstone {
      * @deprecated Magic value
      */
     @Deprecated
-    public Diode(Material type, byte data) {
+    public Diode(final Material type, final byte data) {
         super(type, data);
     }
 
@@ -102,7 +102,7 @@ public class Diode extends MaterialData implements Directional, Redstone {
         if (delay < 1) {
             delay = 1;
         }
-        byte newData = (byte) (getData() & 0x3);
+        final byte newData = (byte) (getData() & 0x3);
 
         setData((byte) (newData | ((delay - 1) << 2)));
     }
@@ -124,9 +124,9 @@ public class Diode extends MaterialData implements Directional, Redstone {
      * @see BlockFace
      */
     @Override
-    public void setFacingDirection(@NotNull BlockFace face) {
-        int delay = getDelay();
-        byte data;
+    public void setFacingDirection(@NotNull final BlockFace face) {
+        final int delay = getDelay();
+        final byte data;
 
         switch (face) {
             case EAST:
@@ -156,7 +156,7 @@ public class Diode extends MaterialData implements Directional, Redstone {
      */
     @Override
     public @NotNull BlockFace getFacing() {
-        byte data = (byte) (getData() & 0x3);
+        final byte data = (byte) (getData() & 0x3);
 
         switch (data) {
             case 0x0:
diff --git a/src/main/java/org/bukkit/material/DirectionalContainer.java b/src/main/java/org/bukkit/material/DirectionalContainer.java
index f19c01a58b99d15416a466c9272864f636d2ae46..3ca3280ed9fe67aa9a3df26c2abec4ab43bb75d6 100644
--- a/src/main/java/org/bukkit/material/DirectionalContainer.java
+++ b/src/main/java/org/bukkit/material/DirectionalContainer.java
@@ -29,8 +29,8 @@ public class DirectionalContainer extends MaterialData implements Directional {
     }
 
     @Override
-    public void setFacingDirection(@NotNull BlockFace face) {
-        byte data;
+    public void setFacingDirection(@NotNull final BlockFace face) {
+        final byte data;
 
         switch (face) {
         case NORTH:
@@ -55,7 +55,7 @@ public class DirectionalContainer extends MaterialData implements Directional {
 
     @Override
     public @NotNull BlockFace getFacing() {
-        byte data = getData();
+        final byte data = getData();
 
         switch (data) {
         case 0x2:
diff --git a/src/main/java/org/bukkit/material/Dispenser.java b/src/main/java/org/bukkit/material/Dispenser.java
index ae53c45735cba6f110971ab045fe8cb517d46833..0b867a51a1de9e97083aa6c8a5c001dba0f1d4bf 100644
--- a/src/main/java/org/bukkit/material/Dispenser.java
+++ b/src/main/java/org/bukkit/material/Dispenser.java
@@ -18,7 +18,7 @@ public class Dispenser extends FurnaceAndDispenser {
         super(Material.LEGACY_DISPENSER);
     }
 
-    public Dispenser(@NotNull BlockFace direction) {
+    public Dispenser(@NotNull final BlockFace direction) {
         this();
         setFacingDirection(direction);
     }
@@ -38,8 +38,8 @@ public class Dispenser extends FurnaceAndDispenser {
     }
 
     @Override
-    public void setFacingDirection(@NotNull BlockFace face) {
-        byte data;
+    public void setFacingDirection(@NotNull final BlockFace face) {
+        final byte data;
 
         switch (face) {
             case DOWN:
@@ -72,7 +72,7 @@ public class Dispenser extends FurnaceAndDispenser {
 
     @Override
     public @NotNull BlockFace getFacing() {
-        int data = getData() & 0x7;
+        final int data = getData() & 0x7;
 
         switch (data) {
             case 0x0:
diff --git a/src/main/java/org/bukkit/material/Door.java b/src/main/java/org/bukkit/material/Door.java
index ef5b77f7f1b2bfa741e204e836cd4d3549ff5268..ae3daa78436fbd55d3ea2468b55157c49ddf0052 100644
--- a/src/main/java/org/bukkit/material/Door.java
+++ b/src/main/java/org/bukkit/material/Door.java
@@ -61,7 +61,7 @@ public class Door extends MaterialData implements Directional, Openable {
      * @see BlockFace#EAST
      * @see BlockFace#SOUTH
      */
-    public Door(final Material type, @NotNull BlockFace face) {
+    public Door(final Material type, @NotNull final BlockFace face) {
         this(type, face, false);
     }
 
@@ -86,7 +86,7 @@ public class Door extends MaterialData implements Directional, Openable {
      * @see BlockFace#EAST
      * @see BlockFace#SOUTH
      */
-    public Door(final Material type, @NotNull BlockFace face, boolean isOpen) {
+    public Door(final Material type, @NotNull final BlockFace face, final boolean isOpen) {
         super(type);
         setTopHalf(false);
         setFacingDirection(face);
@@ -107,7 +107,7 @@ public class Door extends MaterialData implements Directional, Openable {
      * @see Material#LEGACY_ACACIA_DOOR
      * @see Material#LEGACY_DARK_OAK_DOOR
      */
-    public Door(final Material type, boolean isHingeRight) {
+    public Door(final Material type, final boolean isHingeRight) {
         super(type);
         setTopHalf(true);
         setHinge(isHingeRight);
@@ -127,7 +127,7 @@ public class Door extends MaterialData implements Directional, Openable {
      * @see BlockFace#EAST
      * @see BlockFace#SOUTH
      */
-    public Door(final @NotNull TreeSpecies species, @NotNull BlockFace face) {
+    public Door(final @NotNull TreeSpecies species, @NotNull final BlockFace face) {
         this(getWoodDoorOfSpecies(species), face, false);
     }
 
@@ -146,7 +146,7 @@ public class Door extends MaterialData implements Directional, Openable {
      * @see BlockFace#EAST
      * @see BlockFace#SOUTH
      */
-    public Door(final @NotNull TreeSpecies species, @NotNull BlockFace face, boolean isOpen) {
+    public Door(final @NotNull TreeSpecies species, @NotNull final BlockFace face, final boolean isOpen) {
         this(getWoodDoorOfSpecies(species), face, isOpen);
     }
 
@@ -158,7 +158,7 @@ public class Door extends MaterialData implements Directional, Openable {
      *
      * @see TreeSpecies
      */
-    public Door(final @NotNull TreeSpecies species, boolean isHingeRight) {
+    public Door(final @NotNull TreeSpecies species, final boolean isHingeRight) {
         this(getWoodDoorOfSpecies(species), isHingeRight);
     }
 
@@ -185,7 +185,7 @@ public class Door extends MaterialData implements Directional, Openable {
      * @see Material#LEGACY_ACACIA_DOOR
      * @see Material#LEGACY_DARK_OAK_DOOR
      */
-    public static @NotNull Material getWoodDoorOfSpecies(@NotNull TreeSpecies species) {
+    public static @NotNull Material getWoodDoorOfSpecies(@NotNull final TreeSpecies species) {
         switch (species) {
             default:
             case GENERIC:
@@ -215,7 +215,7 @@ public class Door extends MaterialData implements Directional, Openable {
      * Set whether the door is open. Undefined if <code>isTopHalf()</code> is true.
      */
     @Override
-    public void setOpen(boolean isOpen) {
+    public void setOpen(final boolean isOpen) {
         setData((byte) (isOpen ? (getData() | 0x4) : (getData() & ~0x4)));
     }
 
@@ -231,7 +231,7 @@ public class Door extends MaterialData implements Directional, Openable {
      *
      * @param isTopHalf True to make it the top half.
      */
-    public void setTopHalf(boolean isTopHalf) {
+    public void setTopHalf(final boolean isTopHalf) {
         setData((byte) (isTopHalf ? (getData() | 0x8) : (getData() & ~0x8)));
     }
 
@@ -257,7 +257,7 @@ public class Door extends MaterialData implements Directional, Openable {
      * @param face the direction
      */
     @Override
-    public void setFacingDirection(@NotNull BlockFace face) {
+    public void setFacingDirection(@NotNull final BlockFace face) {
         byte data = (byte) (getData() & 0xC);
         switch (face) {
             case WEST:
@@ -285,7 +285,7 @@ public class Door extends MaterialData implements Directional, Openable {
      */
     @Override
     public @NotNull BlockFace getFacing() {
-        byte data = (byte) (getData() & 0x3);
+        final byte data = (byte) (getData() & 0x3);
         switch (data) {
             case 0:
                 return BlockFace.WEST;
@@ -318,7 +318,7 @@ public class Door extends MaterialData implements Directional, Openable {
      *
      * @param isHingeRight True if the hinge is on the right hand side, false if the hinge is on the left hand side.
      */
-    public void setHinge(boolean isHingeRight) {
+    public void setHinge(final boolean isHingeRight) {
         setData((byte) (isHingeRight ? (getData() | 0x1) : (getData() & ~0x1)));
     }
 
diff --git a/src/main/java/org/bukkit/material/Dye.java b/src/main/java/org/bukkit/material/Dye.java
index 79defe9e1421383933bc58c711978746c4b4a954..0ef75fb10aaed4e2a0ddcc214d01241d54d17131 100644
--- a/src/main/java/org/bukkit/material/Dye.java
+++ b/src/main/java/org/bukkit/material/Dye.java
@@ -54,7 +54,7 @@ public class Dye extends MaterialData implements Colorable {
      * @param color New color of this dye
      */
     @Override
-    public void setColor(@NotNull DyeColor color) {
+    public void setColor(@NotNull final DyeColor color) {
         setData(color.getDyeData());
     }
 
diff --git a/src/main/java/org/bukkit/material/EnderChest.java b/src/main/java/org/bukkit/material/EnderChest.java
index 04aebc4a2b3843a66ced66aabf9c08671e90f669..1ddcff5d3c81102c45228b2a26ad5075e7cea20b 100644
--- a/src/main/java/org/bukkit/material/EnderChest.java
+++ b/src/main/java/org/bukkit/material/EnderChest.java
@@ -23,7 +23,7 @@ public class EnderChest extends DirectionalContainer {
      *
      * @param direction the direction the ender chest's lid opens towards
      */
-    public EnderChest(@NotNull BlockFace direction) {
+    public EnderChest(@NotNull final BlockFace direction) {
         this();
         setFacingDirection(direction);
     }
diff --git a/src/main/java/org/bukkit/material/ExtendedRails.java b/src/main/java/org/bukkit/material/ExtendedRails.java
index 17001b5c919fae61555d257061f1f8fed4ceae27..66301d03a530bdbab5774ca45066fc083b9a6a5d 100644
--- a/src/main/java/org/bukkit/material/ExtendedRails.java
+++ b/src/main/java/org/bukkit/material/ExtendedRails.java
@@ -46,8 +46,8 @@ public class ExtendedRails extends Rails {
     }
 
     @Override
-    public void setDirection(@NotNull BlockFace face, boolean isOnSlope) {
-        boolean extraBitSet = (getData() & 0x8) == 0x8;
+    public void setDirection(@NotNull final BlockFace face, final boolean isOnSlope) {
+        final boolean extraBitSet = (getData() & 0x8) == 0x8;
 
         if (face != BlockFace.WEST && face != BlockFace.EAST && face != BlockFace.NORTH && face != BlockFace.SOUTH) {
             throw new IllegalArgumentException("Detector rails and powered rails cannot be set on a curve!");
diff --git a/src/main/java/org/bukkit/material/FlowerPot.java b/src/main/java/org/bukkit/material/FlowerPot.java
index 199dcd0a713612152b34ddf0ffa64b6db1857c38..cbae68e4e0f695f5dd1610f9e4a07c0dfe76ab59 100644
--- a/src/main/java/org/bukkit/material/FlowerPot.java
+++ b/src/main/java/org/bukkit/material/FlowerPot.java
@@ -77,8 +77,8 @@ public class FlowerPot extends MaterialData {
      *
      * @param materialData MaterialData of the block to put in the flower pot.
      */
-    public void setContents(@NotNull MaterialData materialData) {
-        Material mat = materialData.getItemType();
+    public void setContents(@NotNull final MaterialData materialData) {
+        final Material mat = materialData.getItemType();
 
         if (mat == Material.LEGACY_RED_ROSE) {
             setData((byte) 1);
@@ -93,7 +93,7 @@ public class FlowerPot extends MaterialData {
         } else if (mat == Material.LEGACY_DEAD_BUSH) {
             setData((byte) 10);
         } else if (mat == Material.LEGACY_SAPLING) {
-            TreeSpecies species = ((Tree) materialData).getSpecies();
+            final TreeSpecies species = ((Tree) materialData).getSpecies();
 
             if (species == TreeSpecies.GENERIC) {
                 setData((byte) 3);
@@ -105,7 +105,7 @@ public class FlowerPot extends MaterialData {
                 setData((byte) 6);
             }
         } else if (mat == Material.LEGACY_LONG_GRASS) {
-            GrassSpecies species = ((LongGrass) materialData).getSpecies();
+            final GrassSpecies species = ((LongGrass) materialData).getSpecies();
 
             if (species == GrassSpecies.FERN_LIKE) {
                 setData((byte) 11);
diff --git a/src/main/java/org/bukkit/material/Furnace.java b/src/main/java/org/bukkit/material/Furnace.java
index db7810cacc3099c60978d71b179614306780719c..85a306b922dc5ee872fa63d8395de7deff37c8f3 100644
--- a/src/main/java/org/bukkit/material/Furnace.java
+++ b/src/main/java/org/bukkit/material/Furnace.java
@@ -23,7 +23,7 @@ public class Furnace extends FurnaceAndDispenser {
      *
      * @param direction the direction the furnace's "opening" is facing
      */
-    public Furnace(@NotNull BlockFace direction) {
+    public Furnace(@NotNull final BlockFace direction) {
         this();
         setFacingDirection(direction);
     }
diff --git a/src/main/java/org/bukkit/material/Gate.java b/src/main/java/org/bukkit/material/Gate.java
index 84b3f0e3c617b811223c5a28c8cdbdcf722ca820..70fc0ec769f64a3cb7e94a1b0de1b333b411c524 100644
--- a/src/main/java/org/bukkit/material/Gate.java
+++ b/src/main/java/org/bukkit/material/Gate.java
@@ -34,12 +34,12 @@ public class Gate extends MaterialData implements Directional, Openable {
         super(type, data);
     }
 
-    public Gate(byte data) {
+    public Gate(final byte data) {
         super(Material.LEGACY_FENCE_GATE, data);
     }
 
     @Override
-    public void setFacingDirection(@NotNull BlockFace face) {
+    public void setFacingDirection(@NotNull final BlockFace face) {
         byte data = (byte) (getData() & ~DIR_BIT);
 
         switch (face) {
@@ -83,7 +83,7 @@ public class Gate extends MaterialData implements Directional, Openable {
     }
 
     @Override
-    public void setOpen(boolean isOpen) {
+    public void setOpen(final boolean isOpen) {
         byte data = getData();
 
         if (isOpen) {
diff --git a/src/main/java/org/bukkit/material/Hopper.java b/src/main/java/org/bukkit/material/Hopper.java
index 2074846a8343a8bbfd76a0ad1fb9f42b072a5cbc..ff590061f63c3afdad5f4f5cbcb79f7cc10e0512 100644
--- a/src/main/java/org/bukkit/material/Hopper.java
+++ b/src/main/java/org/bukkit/material/Hopper.java
@@ -35,7 +35,7 @@ public class Hopper extends MaterialData implements Directional, Redstone {
      *
      * @see BlockFace
      */
-    public Hopper(@NotNull BlockFace facingDirection) {
+    public Hopper(@NotNull final BlockFace facingDirection) {
         this(facingDirection, DEFAULT_ACTIVE);
     }
 
@@ -49,13 +49,13 @@ public class Hopper extends MaterialData implements Directional, Redstone {
      *
      * @see BlockFace
      */
-    public Hopper(@NotNull BlockFace facingDirection, boolean isActive) {
+    public Hopper(@NotNull final BlockFace facingDirection, final boolean isActive) {
         super(Material.LEGACY_HOPPER);
         setFacingDirection(facingDirection);
         setActive(isActive);
     }
 
-    public Hopper(Material type) {
+    public Hopper(final Material type) {
         super(type);
     }
 
@@ -65,7 +65,7 @@ public class Hopper extends MaterialData implements Directional, Redstone {
      * @deprecated Magic value
      */
     @Deprecated
-    public Hopper(Material type, byte data) {
+    public Hopper(final Material type, final byte data) {
         super(type, data);
     }
 
@@ -75,7 +75,7 @@ public class Hopper extends MaterialData implements Directional, Redstone {
      * @param isActive True if the hopper is active, false if deactivated as if
      * powered by redstone
      */
-    public void setActive(boolean isActive) {
+    public void setActive(final boolean isActive) {
         setData((byte) (getData() & 0x7 | (isActive ? 0x0 : 0x8)));
     }
 
@@ -96,7 +96,7 @@ public class Hopper extends MaterialData implements Directional, Redstone {
      * @see BlockFace
      */
     @Override
-    public void setFacingDirection(@NotNull BlockFace face) {
+    public void setFacingDirection(@NotNull final BlockFace face) {
         int data = getData() & 0x8;
 
         switch (face) {
@@ -129,7 +129,7 @@ public class Hopper extends MaterialData implements Directional, Redstone {
      */
     @Override
     public @NotNull BlockFace getFacing() {
-        byte data = (byte) (getData() & 0x7);
+        final byte data = (byte) (getData() & 0x7);
 
         switch (data) {
             default:
diff --git a/src/main/java/org/bukkit/material/Ladder.java b/src/main/java/org/bukkit/material/Ladder.java
index 3243147f53b1d2ddbdaa49c5379bb251cb0d70af..6e11375ca15670ae779d6f2fd1f03768dc0acd77 100644
--- a/src/main/java/org/bukkit/material/Ladder.java
+++ b/src/main/java/org/bukkit/material/Ladder.java
@@ -38,7 +38,7 @@ public class Ladder extends SimpleAttachableMaterialData {
      */
     @Override
     public @NotNull BlockFace getAttachedFace() {
-        byte data = getData();
+        final byte data = getData();
 
         switch (data) {
         case 0x2:
@@ -61,7 +61,7 @@ public class Ladder extends SimpleAttachableMaterialData {
      * Sets the direction this ladder is facing
      */
     @Override
-    public void setFacingDirection(@NotNull BlockFace face) {
+    public void setFacingDirection(@NotNull final BlockFace face) {
         byte data = (byte) 0x0;
 
         switch (face) {
diff --git a/src/main/java/org/bukkit/material/Leaves.java b/src/main/java/org/bukkit/material/Leaves.java
index 9d8d307e6f43ad89a0074aeec2d183e11d4f0c84..0009362df13cda393c722aa2b182b6322bef6d7e 100644
--- a/src/main/java/org/bukkit/material/Leaves.java
+++ b/src/main/java/org/bukkit/material/Leaves.java
@@ -32,7 +32,7 @@ public class Leaves extends Wood {
      *
      * @param species the species of the wood block
      */
-    public Leaves(@NotNull TreeSpecies species) {
+    public Leaves(@NotNull final TreeSpecies species) {
         this(DEFAULT_TYPE, species, DEFAULT_DECAYABLE);
     }
 
@@ -43,7 +43,7 @@ public class Leaves extends Wood {
      * @param species the species of the wood block
      * @param isDecayable whether the block is permanent or can disappear
      */
-    public Leaves(@NotNull TreeSpecies species, boolean isDecayable) {
+    public Leaves(@NotNull final TreeSpecies species, final boolean isDecayable) {
         this(DEFAULT_TYPE, species, isDecayable);
     }
 
@@ -62,7 +62,7 @@ public class Leaves extends Wood {
      * @param type the type of leaf block
      * @param species the species of the wood block
      */
-    public Leaves(final @NotNull Material type, @NotNull TreeSpecies species) {
+    public Leaves(final @NotNull Material type, @NotNull final TreeSpecies species) {
         this(type, species, DEFAULT_DECAYABLE);
     }
 
@@ -74,7 +74,7 @@ public class Leaves extends Wood {
      * @param species the species of the wood block
      * @param isDecayable whether the block is permanent or can disappear
      */
-    public Leaves(final @NotNull Material type, @NotNull TreeSpecies species, boolean isDecayable) {
+    public Leaves(final @NotNull Material type, @NotNull final TreeSpecies species, final boolean isDecayable) {
         super(type, species);
         setDecayable(isDecayable);
     }
@@ -103,7 +103,7 @@ public class Leaves extends Wood {
      *
      * @param isDecaying whether the block is decaying or not
      */
-    public void setDecaying(boolean isDecaying) {
+    public void setDecaying(final boolean isDecaying) {
         setData((byte) ((getData() & 0x3) | (isDecaying
                 ? 0x8 // Clear the permanent flag to make this a decayable flag and set the decaying flag
                 : (getData() & 0x4)))); // Only persist the decayable flag if this is not a decaying block
@@ -125,7 +125,7 @@ public class Leaves extends Wood {
      *
      * @param isDecayable whether the block is permanent or can disappear
      */
-    public void setDecayable(boolean isDecayable) {
+    public void setDecayable(final boolean isDecayable) {
         setData((byte) ((getData() & 0x3) | (isDecayable
                 ? (getData() & 0x8) // Only persist the decaying flag if this is a decayable block
                 : 0x4)));
diff --git a/src/main/java/org/bukkit/material/Lever.java b/src/main/java/org/bukkit/material/Lever.java
index d3ac88e77f8f32f88d824974e996b73510b4148b..fc7ce540358f2b2c4543952fc539ba8f89f800b6 100644
--- a/src/main/java/org/bukkit/material/Lever.java
+++ b/src/main/java/org/bukkit/material/Lever.java
@@ -47,7 +47,7 @@ public class Lever extends SimpleAttachableMaterialData implements Redstone {
      *
      * @param isPowered whether the lever should be powered or not
      */
-    public void setPowered(boolean isPowered) {
+    public void setPowered(final boolean isPowered) {
         setData((byte) (isPowered ? (getData() | 0x8) : (getData() & ~0x8)));
     }
 
@@ -58,7 +58,7 @@ public class Lever extends SimpleAttachableMaterialData implements Redstone {
      */
     @Override
     public @NotNull BlockFace getAttachedFace() {
-        byte data = (byte) (getData() & 0x7);
+        final byte data = (byte) (getData() & 0x7);
 
         switch (data) {
         case 0x1:
@@ -90,9 +90,9 @@ public class Lever extends SimpleAttachableMaterialData implements Redstone {
      * Sets the direction this lever is pointing in
      */
     @Override
-    public void setFacingDirection(@NotNull BlockFace face) {
+    public void setFacingDirection(@NotNull final BlockFace face) {
         byte data = (byte) (getData() & 0x8);
-        BlockFace attach = getAttachedFace();
+        final BlockFace attach = getAttachedFace();
 
         if (attach == BlockFace.DOWN) {
             switch (face) {
diff --git a/src/main/java/org/bukkit/material/LongGrass.java b/src/main/java/org/bukkit/material/LongGrass.java
index d95504b9ba4b12af60185a8061b7f43f5f541a02..b3b8fba1ead3065e445cc212e3e6dbef2d395318 100644
--- a/src/main/java/org/bukkit/material/LongGrass.java
+++ b/src/main/java/org/bukkit/material/LongGrass.java
@@ -18,7 +18,7 @@ public class LongGrass extends MaterialData {
         super(Material.LEGACY_LONG_GRASS);
     }
 
-    public LongGrass(@NotNull GrassSpecies species) {
+    public LongGrass(@NotNull final GrassSpecies species) {
         this();
         setSpecies(species);
     }
@@ -51,7 +51,7 @@ public class LongGrass extends MaterialData {
      *
      * @param species New species of this grass
      */
-    public void setSpecies(@NotNull GrassSpecies species) {
+    public void setSpecies(@NotNull final GrassSpecies species) {
         setData(species.getData());
     }
 
diff --git a/src/main/java/org/bukkit/material/MaterialData.java b/src/main/java/org/bukkit/material/MaterialData.java
index 5f294024b958a4c32937f343ef1bb5b6c5003308..4f551e765f137caaf1bbd164fa2dce36734c63bf 100644
--- a/src/main/java/org/bukkit/material/MaterialData.java
+++ b/src/main/java/org/bukkit/material/MaterialData.java
@@ -50,7 +50,7 @@ public class MaterialData implements Cloneable {
      * @deprecated Magic value
      */
     @Deprecated
-    public void setData(byte data) {
+    public void setData(final byte data) {
         this.data = data;
     }
 
@@ -81,7 +81,7 @@ public class MaterialData implements Cloneable {
      * @param amount The stack size of the new stack
      * @return New ItemStack containing a copy of this MaterialData
      */
-    public @NotNull ItemStack toItemStack(int amount) {
+    public @NotNull ItemStack toItemStack(final int amount) {
         return new ItemStack(type, amount, data);
     }
 
@@ -96,9 +96,9 @@ public class MaterialData implements Cloneable {
     }
 
     @Override
-    public boolean equals(@Nullable Object obj) {
+    public boolean equals(@Nullable final Object obj) {
         if (obj instanceof MaterialData) {
-            MaterialData md = (MaterialData) obj;
+            final MaterialData md = (MaterialData) obj;
 
             return (md.getItemType() == getItemType() && md.getData() == getData());
         } else {
@@ -110,7 +110,7 @@ public class MaterialData implements Cloneable {
     public MaterialData clone() {
         try {
             return (MaterialData) super.clone();
-        } catch (CloneNotSupportedException e) {
+        } catch (final CloneNotSupportedException e) {
             throw new Error(e);
         }
     }
diff --git a/src/main/java/org/bukkit/material/Mushroom.java b/src/main/java/org/bukkit/material/Mushroom.java
index ff01df08895621de67f9611bafad647b1f9dc67e..f38197cb6527cb881188c171b4e7bbb22528519a 100644
--- a/src/main/java/org/bukkit/material/Mushroom.java
+++ b/src/main/java/org/bukkit/material/Mushroom.java
@@ -38,7 +38,7 @@ public class Mushroom extends MaterialData {
      * @see Material#LEGACY_HUGE_MUSHROOM_1
      * @see Material#LEGACY_HUGE_MUSHROOM_2
      */
-    public Mushroom(Material shroom) {
+    public Mushroom(final Material shroom) {
         super(shroom);
         Preconditions.checkArgument(shroom == Material.LEGACY_HUGE_MUSHROOM_1 || shroom == Material.LEGACY_HUGE_MUSHROOM_2, "Not a mushroom!");
     }
@@ -60,7 +60,7 @@ public class Mushroom extends MaterialData {
      * @see Material#LEGACY_HUGE_MUSHROOM_2
      * @see BlockFace
      */
-    public Mushroom(Material shroom, BlockFace capFace) {
+    public Mushroom(final Material shroom, final BlockFace capFace) {
         this(shroom, MushroomBlockTexture.getCapByFace(capFace));
     }
 
@@ -73,7 +73,7 @@ public class Mushroom extends MaterialData {
      * @see Material#LEGACY_HUGE_MUSHROOM_1
      * @see Material#LEGACY_HUGE_MUSHROOM_2
      */
-    public Mushroom(Material shroom, @NotNull MushroomBlockTexture texture) {
+    public Mushroom(final Material shroom, @NotNull final MushroomBlockTexture texture) {
         this(shroom, texture.getData());
     }
 
@@ -83,7 +83,7 @@ public class Mushroom extends MaterialData {
      * @deprecated Magic value
      */
     @Deprecated
-    public Mushroom(Material shroom, byte data) {
+    public Mushroom(final Material shroom, final byte data) {
         super(shroom, data);
         Preconditions.checkArgument(shroom == Material.LEGACY_HUGE_MUSHROOM_1 || shroom == Material.LEGACY_HUGE_MUSHROOM_2, "Not a mushroom!");
     }
@@ -125,7 +125,7 @@ public class Mushroom extends MaterialData {
      *
      * @param texture The mushroom texture to set
      */
-    public void setBlockTexture(@NotNull MushroomBlockTexture texture) {
+    public void setBlockTexture(@NotNull final MushroomBlockTexture texture) {
         setData(texture.getData());
     }
 
@@ -135,8 +135,8 @@ public class Mushroom extends MaterialData {
      * @param face The face to check.
      * @return True if it is painted.
      */
-    public boolean isFacePainted(@NotNull BlockFace face) {
-        byte data = getData();
+    public boolean isFacePainted(@NotNull final BlockFace face) {
+        final byte data = getData();
 
         if (data == MushroomBlockTexture.ALL_PORES.getData() || data == MushroomBlockTexture.STEM_SIDES.getData()
                 || data == MushroomBlockTexture.ALL_STEM.getData()) {
@@ -248,7 +248,7 @@ public class Mushroom extends MaterialData {
      *     it is a stem)
      */
     public @NotNull Set<BlockFace> getPaintedFaces() {
-        EnumSet<BlockFace> faces = EnumSet.noneOf(BlockFace.class);
+        final EnumSet<BlockFace> faces = EnumSet.noneOf(BlockFace.class);
 
         if (isFacePainted(BlockFace.WEST)) {
             faces.add(BlockFace.WEST);
diff --git a/src/main/java/org/bukkit/material/NetherWarts.java b/src/main/java/org/bukkit/material/NetherWarts.java
index f42fb15031aca71097df455abe16808a7a96b8bd..2aa18bb1aa4413c96be8db6aa1311c6a8f3d961f 100644
--- a/src/main/java/org/bukkit/material/NetherWarts.java
+++ b/src/main/java/org/bukkit/material/NetherWarts.java
@@ -17,7 +17,7 @@ public class NetherWarts extends MaterialData {
         super(Material.LEGACY_NETHER_WARTS);
     }
 
-    public NetherWarts(@NotNull NetherWartsState state) {
+    public NetherWarts(@NotNull final NetherWartsState state) {
         this();
         setState(state);
     }
@@ -59,7 +59,7 @@ public class NetherWarts extends MaterialData {
      *
      * @param state New growth state of this nether wart
      */
-    public void setState(@NotNull NetherWartsState state) {
+    public void setState(@NotNull final NetherWartsState state) {
         switch (state) {
             case SEEDED:
                 setData((byte) 0x0);
diff --git a/src/main/java/org/bukkit/material/Observer.java b/src/main/java/org/bukkit/material/Observer.java
index bce83b36f85335998bdac5066ad61711e9641424..6922488c77972211503fe2f86dc334b6e361e1f9 100644
--- a/src/main/java/org/bukkit/material/Observer.java
+++ b/src/main/java/org/bukkit/material/Observer.java
@@ -18,7 +18,7 @@ public class Observer extends MaterialData implements Directional, Redstone {
         super(Material.LEGACY_OBSERVER);
     }
 
-    public Observer(@NotNull BlockFace direction) {
+    public Observer(@NotNull final BlockFace direction) {
         this();
         setFacingDirection(direction);
     }
@@ -43,7 +43,7 @@ public class Observer extends MaterialData implements Directional, Redstone {
     }
 
     @Override
-    public void setFacingDirection(@NotNull BlockFace face) {
+    public void setFacingDirection(@NotNull final BlockFace face) {
         byte data = (byte) (getData() & 0x8);
 
         switch (face) {
@@ -72,7 +72,7 @@ public class Observer extends MaterialData implements Directional, Redstone {
 
     @Override
     public @NotNull BlockFace getFacing() {
-        int data = getData() & 0x7;
+        final int data = getData() & 0x7;
 
         switch (data) {
             case 0x0:
diff --git a/src/main/java/org/bukkit/material/PistonBaseMaterial.java b/src/main/java/org/bukkit/material/PistonBaseMaterial.java
index ae35d30149a441fd16637eb3d1b3c931cc148151..bc27b205d89d312d2cda5003b1741c30fabe2145 100644
--- a/src/main/java/org/bukkit/material/PistonBaseMaterial.java
+++ b/src/main/java/org/bukkit/material/PistonBaseMaterial.java
@@ -31,7 +31,7 @@ public class PistonBaseMaterial extends MaterialData implements Directional, Red
     }
 
     @Override
-    public void setFacingDirection(@NotNull BlockFace face) {
+    public void setFacingDirection(@NotNull final BlockFace face) {
         byte data = (byte) (getData() & 0x8);
 
         switch (face) {
@@ -56,7 +56,7 @@ public class PistonBaseMaterial extends MaterialData implements Directional, Red
 
     @Override
     public @NotNull BlockFace getFacing() {
-        byte dir = (byte) (getData() & 7);
+        final byte dir = (byte) (getData() & 7);
 
         switch (dir) {
         case 0:
@@ -86,7 +86,7 @@ public class PistonBaseMaterial extends MaterialData implements Directional, Red
      *
      * @param powered true if the piston is extended {@literal &} powered, or false
      */
-    public void setPowered(boolean powered) {
+    public void setPowered(final boolean powered) {
         setData((byte) (powered ? (getData() | 0x8) : (getData() & ~0x8)));
     }
 
diff --git a/src/main/java/org/bukkit/material/PistonExtensionMaterial.java b/src/main/java/org/bukkit/material/PistonExtensionMaterial.java
index b7208e2f1a50612cf729abe74d983a33e9f3942e..4cc9c39f18ff463b777f8614aa6d4b2c896864f4 100644
--- a/src/main/java/org/bukkit/material/PistonExtensionMaterial.java
+++ b/src/main/java/org/bukkit/material/PistonExtensionMaterial.java
@@ -29,7 +29,7 @@ public class PistonExtensionMaterial extends MaterialData implements Attachable
     }
 
     @Override
-    public void setFacingDirection(@NotNull BlockFace face) {
+    public void setFacingDirection(@NotNull final BlockFace face) {
         byte data = (byte) (getData() & 0x8);
 
         switch (face) {
@@ -54,7 +54,7 @@ public class PistonExtensionMaterial extends MaterialData implements Attachable
 
     @Override
     public @NotNull BlockFace getFacing() {
-        byte dir = (byte) (getData() & 7);
+        final byte dir = (byte) (getData() & 7);
 
         switch (dir) {
         case 0:
@@ -88,7 +88,7 @@ public class PistonExtensionMaterial extends MaterialData implements Attachable
      *
      * @param sticky true if sticky, otherwise false
      */
-    public void setSticky(boolean sticky) {
+    public void setSticky(final boolean sticky) {
         setData((byte) (sticky ? (getData() | 0x8) : (getData() & ~0x8)));
     }
 
diff --git a/src/main/java/org/bukkit/material/PoweredRail.java b/src/main/java/org/bukkit/material/PoweredRail.java
index feebc5c7359098d41abcccb1f1d8afe2a54a9130..5fefa3ceb72e25c0cd76edbe5232e441c315e9da 100644
--- a/src/main/java/org/bukkit/material/PoweredRail.java
+++ b/src/main/java/org/bukkit/material/PoweredRail.java
@@ -38,7 +38,7 @@ public class PoweredRail extends ExtendedRails implements Redstone {
      *
      * @param isPowered whether or not the rail is powered
      */
-    public void setPowered(boolean isPowered) {
+    public void setPowered(final boolean isPowered) {
         setData((byte) (isPowered ? (getData() | 0x8) : (getData() & ~0x8)));
     }
 
diff --git a/src/main/java/org/bukkit/material/PressurePlate.java b/src/main/java/org/bukkit/material/PressurePlate.java
index 3e3fb20aa64c4ad3601eb90b84d000db76a63b72..6dd5802f7b15a1784aa5f805c2d61b001781a4db 100644
--- a/src/main/java/org/bukkit/material/PressurePlate.java
+++ b/src/main/java/org/bukkit/material/PressurePlate.java
@@ -16,7 +16,7 @@ public class PressurePlate extends MaterialData implements PressureSensor {
         super(Material.LEGACY_WOOD_PLATE);
     }
 
-    public PressurePlate(Material type) {
+    public PressurePlate(final Material type) {
         super(type);
     }
 
@@ -26,7 +26,7 @@ public class PressurePlate extends MaterialData implements PressureSensor {
      * @deprecated Magic value
      */
     @Deprecated
-    public PressurePlate(Material type, byte data) {
+    public PressurePlate(final Material type, final byte data) {
         super(type, data);
     }
 
diff --git a/src/main/java/org/bukkit/material/Pumpkin.java b/src/main/java/org/bukkit/material/Pumpkin.java
index 8e9537d32e8ae5d0b8c9e34c44b877a3419d7518..07cd127174d1efb85359f7f06408062a41f59085 100644
--- a/src/main/java/org/bukkit/material/Pumpkin.java
+++ b/src/main/java/org/bukkit/material/Pumpkin.java
@@ -23,7 +23,7 @@ public class Pumpkin extends MaterialData implements Directional {
      *
      * @param direction the direction the pumkin's face is facing
      */
-    public Pumpkin(@NotNull BlockFace direction) {
+    public Pumpkin(@NotNull final BlockFace direction) {
         this();
         setFacingDirection(direction);
     }
@@ -47,8 +47,8 @@ public class Pumpkin extends MaterialData implements Directional {
     }
 
     @Override
-    public void setFacingDirection(@NotNull BlockFace face) {
-        byte data;
+    public void setFacingDirection(@NotNull final BlockFace face) {
+        final byte data;
 
         switch (face) {
         case NORTH:
@@ -73,7 +73,7 @@ public class Pumpkin extends MaterialData implements Directional {
 
     @Override
     public @NotNull BlockFace getFacing() {
-        byte data = getData();
+        final byte data = getData();
 
         switch (data) {
         case 0x0:
diff --git a/src/main/java/org/bukkit/material/Rails.java b/src/main/java/org/bukkit/material/Rails.java
index 80d15cda01e9c15fda8ecff2cc946ae377214a34..02f05fdcb693aed0a64ce7ecc4e72161ae309d3e 100644
--- a/src/main/java/org/bukkit/material/Rails.java
+++ b/src/main/java/org/bukkit/material/Rails.java
@@ -36,7 +36,7 @@ public class Rails extends MaterialData {
      * @return the whether this track is set on a slope
      */
     public boolean isOnSlope() {
-        byte d = getConvertedData();
+        final byte d = getConvertedData();
 
         return (d == 0x2 || d == 0x3 || d == 0x4 || d == 0x5);
     }
@@ -45,7 +45,7 @@ public class Rails extends MaterialData {
      * @return the whether this track is set as a curve
      */
     public boolean isCurve() {
-        byte d = getConvertedData();
+        final byte d = getConvertedData();
 
         return (d == 0x6 || d == 0x7 || d == 0x8 || d == 0x9);
     }
@@ -58,7 +58,7 @@ public class Rails extends MaterialData {
      *     set as a curve, the corner of the track is returned.
      */
     public @NotNull BlockFace getDirection() {
-        byte d = getConvertedData();
+        final byte d = getConvertedData();
 
         switch (d) {
         case 0x0:
@@ -122,7 +122,7 @@ public class Rails extends MaterialData {
      * @param face the direction the track should be facing
      * @param isOnSlope whether or not the track should be on a slope
      */
-    public void setDirection(@NotNull BlockFace face, boolean isOnSlope) {
+    public void setDirection(@NotNull final BlockFace face, final boolean isOnSlope) {
         switch (face) {
         case EAST:
             setData((byte) (isOnSlope ? 0x2 : 0x1));
diff --git a/src/main/java/org/bukkit/material/Sandstone.java b/src/main/java/org/bukkit/material/Sandstone.java
index fbe67690c63c46cad8afcefcbaf17fbe32570ebe..f4677af687199f01f2c4b9d06bac15af6ba719f2 100644
--- a/src/main/java/org/bukkit/material/Sandstone.java
+++ b/src/main/java/org/bukkit/material/Sandstone.java
@@ -18,7 +18,7 @@ public class Sandstone extends MaterialData {
         super(Material.LEGACY_SANDSTONE);
     }
 
-    public Sandstone(@NotNull SandstoneType type) {
+    public Sandstone(@NotNull final SandstoneType type) {
         this();
         setType(type);
     }
@@ -51,7 +51,7 @@ public class Sandstone extends MaterialData {
      *
      * @param type New type of this sandstone
      */
-    public void setType(@NotNull SandstoneType type) {
+    public void setType(@NotNull final SandstoneType type) {
         setData(type.getData());
     }
 
diff --git a/src/main/java/org/bukkit/material/Sapling.java b/src/main/java/org/bukkit/material/Sapling.java
index b687e6df4a134009a703f8ef4b130d46c7316dd5..5c41937cffd77dad062d97792b20b3f4c175aee8 100644
--- a/src/main/java/org/bukkit/material/Sapling.java
+++ b/src/main/java/org/bukkit/material/Sapling.java
@@ -28,7 +28,7 @@ public class Sapling extends Wood {
      *
      * @param species the species of the sapling
      */
-    public Sapling(@NotNull TreeSpecies species) {
+    public Sapling(@NotNull final TreeSpecies species) {
         this(species, false);
     }
 
@@ -39,7 +39,7 @@ public class Sapling extends Wood {
      * @param species the species of the tree block
      * @param isInstantGrowable true if the Sapling should grow when next ticked with bonemeal
      */
-    public Sapling(@NotNull TreeSpecies species, boolean isInstantGrowable) {
+    public Sapling(@NotNull final TreeSpecies species, final boolean isInstantGrowable) {
         this(Material.LEGACY_SAPLING, species, isInstantGrowable);
     }
 
@@ -58,7 +58,7 @@ public class Sapling extends Wood {
      * @param type the type of sapling
      * @param species the species of the sapling
      */
-    public Sapling(final @NotNull Material type, @NotNull TreeSpecies species) {
+    public Sapling(final @NotNull Material type, @NotNull final TreeSpecies species) {
         this(type, species, false);
     }
 
@@ -71,7 +71,7 @@ public class Sapling extends Wood {
      * @param isInstantGrowable true if the Sapling should grow when next ticked
      * with bonemeal
      */
-    public Sapling(final @NotNull Material type, @NotNull TreeSpecies species, boolean isInstantGrowable) {
+    public Sapling(final @NotNull Material type, @NotNull final TreeSpecies species, final boolean isInstantGrowable) {
         super(type, species);
         setIsInstantGrowable(isInstantGrowable);
     }
@@ -101,7 +101,7 @@ public class Sapling extends Wood {
      * @param isInstantGrowable true if the Sapling should grow when next ticked
      * with bonemeal
      */
-    public void setIsInstantGrowable(boolean isInstantGrowable) {
+    public void setIsInstantGrowable(final boolean isInstantGrowable) {
         setData(isInstantGrowable ? (byte) ((getData() & 0x7) | 0x8) : (byte) (getData() & 0x7));
     }
 
diff --git a/src/main/java/org/bukkit/material/Sign.java b/src/main/java/org/bukkit/material/Sign.java
index 13662e4558c7e15d1cde6d07d279c6aababc88bc..fe50097d652cc040b3f872a0251ec9e0f199875d 100644
--- a/src/main/java/org/bukkit/material/Sign.java
+++ b/src/main/java/org/bukkit/material/Sign.java
@@ -49,7 +49,7 @@ public class Sign extends MaterialData implements Attachable {
     @Override
     public @NotNull BlockFace getAttachedFace() {
         if (isWallSign()) {
-            byte data = getData();
+            final byte data = getData();
 
             switch (data) {
             case 0x2:
@@ -78,7 +78,7 @@ public class Sign extends MaterialData implements Attachable {
      */
     @Override
     public @NotNull BlockFace getFacing() {
-        byte data = getData();
+        final byte data = getData();
 
         if (!isWallSign()) {
             switch (data) {
@@ -138,8 +138,8 @@ public class Sign extends MaterialData implements Attachable {
     }
 
     @Override
-    public void setFacingDirection(@NotNull BlockFace face) {
-        byte data;
+    public void setFacingDirection(@NotNull final BlockFace face) {
+        final byte data;
 
         if (isWallSign()) {
             switch (face) {
diff --git a/src/main/java/org/bukkit/material/SimpleAttachableMaterialData.java b/src/main/java/org/bukkit/material/SimpleAttachableMaterialData.java
index 4ddd4204c45649d1393db81719cca7c23c252819..7e3e21bc50b81a03fe7fc23134ba142bc9e2b743 100644
--- a/src/main/java/org/bukkit/material/SimpleAttachableMaterialData.java
+++ b/src/main/java/org/bukkit/material/SimpleAttachableMaterialData.java
@@ -14,12 +14,12 @@ import org.jetbrains.annotations.NotNull;
 @Deprecated
 public abstract class SimpleAttachableMaterialData extends MaterialData implements Attachable {
 
-    public SimpleAttachableMaterialData(Material type, @NotNull BlockFace direction) {
+    public SimpleAttachableMaterialData(final Material type, @NotNull final BlockFace direction) {
         this(type);
         setFacingDirection(direction);
     }
 
-    public SimpleAttachableMaterialData(Material type) {
+    public SimpleAttachableMaterialData(final Material type) {
         super(type);
     }
 
@@ -29,13 +29,13 @@ public abstract class SimpleAttachableMaterialData extends MaterialData implemen
      * @deprecated Magic value
      */
     @Deprecated
-    public SimpleAttachableMaterialData(Material type, byte data) {
+    public SimpleAttachableMaterialData(final Material type, final byte data) {
         super(type, data);
     }
 
     @Override
     public @NotNull BlockFace getFacing() {
-        BlockFace attachedFace = getAttachedFace();
+        final BlockFace attachedFace = getAttachedFace();
         return attachedFace == null ? null : attachedFace.getOppositeFace();
     }
 
diff --git a/src/main/java/org/bukkit/material/Skull.java b/src/main/java/org/bukkit/material/Skull.java
index 11083a0d65e70040a2f863abc8bceecf29eca462..26055a9b21c429b57f371bd0fb75955cfe866b9f 100644
--- a/src/main/java/org/bukkit/material/Skull.java
+++ b/src/main/java/org/bukkit/material/Skull.java
@@ -22,7 +22,7 @@ public class Skull extends MaterialData implements Directional {
      *
      * @param direction the direction the skull's face is facing
      */
-    public Skull(@NotNull BlockFace direction) {
+    public Skull(@NotNull final BlockFace direction) {
         this();
         setFacingDirection(direction);
     }
@@ -42,8 +42,8 @@ public class Skull extends MaterialData implements Directional {
     }
 
     @Override
-    public void setFacingDirection(@NotNull BlockFace face) {
-        int data;
+    public void setFacingDirection(@NotNull final BlockFace face) {
+        final int data;
 
         switch (face) {
             case SELF:
@@ -72,7 +72,7 @@ public class Skull extends MaterialData implements Directional {
 
     @Override
     public @NotNull BlockFace getFacing() {
-        int data = getData();
+        final int data = getData();
 
         switch (data) {
             case 0x1:
diff --git a/src/main/java/org/bukkit/material/SpawnEgg.java b/src/main/java/org/bukkit/material/SpawnEgg.java
index 370ded6309e3d65911ff370a32777a11083bebda..a9f4d4d0651d97dd65fbc0031d871edca737a3a2 100644
--- a/src/main/java/org/bukkit/material/SpawnEgg.java
+++ b/src/main/java/org/bukkit/material/SpawnEgg.java
@@ -33,11 +33,11 @@ public class SpawnEgg extends MaterialData {
      * @deprecated Magic value
      */
     @Deprecated
-    public SpawnEgg(byte data) {
+    public SpawnEgg(final byte data) {
         super(Material.LEGACY_MONSTER_EGG, data);
     }
 
-    public SpawnEgg(@NotNull EntityType type) {
+    public SpawnEgg(@NotNull final EntityType type) {
         this();
         setSpawnedType(type);
     }
@@ -60,7 +60,7 @@ public class SpawnEgg extends MaterialData {
      * @deprecated This is now stored in {@link SpawnEggMeta}.
      */
     @Deprecated
-    public void setSpawnedType(@NotNull EntityType type) {
+    public void setSpawnedType(@NotNull final EntityType type) {
         setData((byte) type.getTypeId());
     }
 
diff --git a/src/main/java/org/bukkit/material/Stairs.java b/src/main/java/org/bukkit/material/Stairs.java
index 2ece5cb973bbbf292c7517768b0e7ed582381a03..3cc44740515ab5fe15ef6eda4f9c13f93f96e8ef 100644
--- a/src/main/java/org/bukkit/material/Stairs.java
+++ b/src/main/java/org/bukkit/material/Stairs.java
@@ -32,7 +32,7 @@ public class Stairs extends MaterialData implements Directional {
      * @return the direction the stairs ascend towards
      */
     public @NotNull BlockFace getAscendingDirection() {
-        byte data = getData();
+        final byte data = getData();
 
         switch (data & 0x3) {
         case 0x0:
@@ -61,8 +61,8 @@ public class Stairs extends MaterialData implements Directional {
      * Set the direction the stair part of the block is facing
      */
     @Override
-    public void setFacingDirection(@NotNull BlockFace face) {
-        byte data;
+    public void setFacingDirection(@NotNull final BlockFace face) {
+        final byte data;
 
         switch (face) {
         case NORTH:
@@ -109,7 +109,7 @@ public class Stairs extends MaterialData implements Directional {
      * @param inv - true if step is inverted (top half), false if step is
      *     normal (bottom half)
      */
-    public void setInverted(boolean inv) {
+    public void setInverted(final boolean inv) {
         int dat = getData() & 0x3;
         if (inv) {
             dat |= 0x4;
diff --git a/src/main/java/org/bukkit/material/Step.java b/src/main/java/org/bukkit/material/Step.java
index 6f360105880ce5d9c4f5e5152f28393f7d0dcbae..767f36ade1a21fc285873d626f01a3f07bd6979b 100644
--- a/src/main/java/org/bukkit/material/Step.java
+++ b/src/main/java/org/bukkit/material/Step.java
@@ -67,7 +67,7 @@ public class Step extends TexturedMaterial {
      * @param inv - true if step is inverted (top half), false if step is
      *     normal (bottom half)
      */
-    public void setInverted(boolean inv) {
+    public void setInverted(final boolean inv) {
         int dat = getData() & 0x7;
         if (inv) {
             dat |= 0x8;
@@ -93,7 +93,7 @@ public class Step extends TexturedMaterial {
      */
     @Deprecated
     @Override
-    protected void setTextureIndex(int idx) {
+    protected void setTextureIndex(final int idx) {
         setData((byte) ((getData() & 0x8) | idx));
     }
 
diff --git a/src/main/java/org/bukkit/material/TexturedMaterial.java b/src/main/java/org/bukkit/material/TexturedMaterial.java
index 108d0d0d6e4716a1814a4ca8e9cacaf9129f02e8..9509293aa86043fe1cd99e92d6ee7f404909e9b9 100644
--- a/src/main/java/org/bukkit/material/TexturedMaterial.java
+++ b/src/main/java/org/bukkit/material/TexturedMaterial.java
@@ -14,7 +14,7 @@ import org.jetbrains.annotations.NotNull;
 @Deprecated
 public abstract class TexturedMaterial extends MaterialData {
 
-    public TexturedMaterial(Material m) {
+    public TexturedMaterial(final Material m) {
         super(m);
     }
 
@@ -56,7 +56,7 @@ public abstract class TexturedMaterial extends MaterialData {
      * @param material
      *            New material of this block
      */
-    public void setMaterial(Material material) {
+    public void setMaterial(final Material material) {
         if (getTextures().contains(material)) {
             setTextureIndex(getTextures().indexOf(material));
         } else {
@@ -82,7 +82,7 @@ public abstract class TexturedMaterial extends MaterialData {
      * @deprecated Magic value
      */
     @Deprecated
-    protected void setTextureIndex(int idx) {
+    protected void setTextureIndex(final int idx) {
         setData((byte) idx); // Default to using all bits - override for other mappings
     }
 
diff --git a/src/main/java/org/bukkit/material/Torch.java b/src/main/java/org/bukkit/material/Torch.java
index e52f1dff5065c4a18beecaa92f6e07d5e04dd0b6..744b7426c9dc88000b96ccf91765bd23361a6b4c 100644
--- a/src/main/java/org/bukkit/material/Torch.java
+++ b/src/main/java/org/bukkit/material/Torch.java
@@ -38,7 +38,7 @@ public class Torch extends SimpleAttachableMaterialData {
      */
     @Override
     public @NotNull BlockFace getAttachedFace() {
-        byte data = getData();
+        final byte data = getData();
 
         switch (data) {
         case 0x1:
@@ -60,8 +60,8 @@ public class Torch extends SimpleAttachableMaterialData {
     }
 
     @Override
-    public void setFacingDirection(@NotNull BlockFace face) {
-        byte data;
+    public void setFacingDirection(@NotNull final BlockFace face) {
+        final byte data;
 
         switch (face) {
         case EAST:
diff --git a/src/main/java/org/bukkit/material/TrapDoor.java b/src/main/java/org/bukkit/material/TrapDoor.java
index e11df2c3df448b60e4e6575bce55e5b416fb19c3..35d77e50df67a5202e4c61292155e64f146c8a80 100644
--- a/src/main/java/org/bukkit/material/TrapDoor.java
+++ b/src/main/java/org/bukkit/material/TrapDoor.java
@@ -37,7 +37,7 @@ public class TrapDoor extends SimpleAttachableMaterialData implements Openable {
     }
 
     @Override
-    public void setOpen(boolean isOpen) {
+    public void setOpen(final boolean isOpen) {
         byte data = getData();
 
         if (isOpen) {
@@ -63,7 +63,7 @@ public class TrapDoor extends SimpleAttachableMaterialData implements Openable {
      *
      * @param inv - true if inverted (top half), false if normal (bottom half)
      */
-    public void setInverted(boolean inv) {
+    public void setInverted(final boolean inv) {
         int dat = getData() & 0x7;
         if (inv) {
             dat |= 0x8;
@@ -73,7 +73,7 @@ public class TrapDoor extends SimpleAttachableMaterialData implements Openable {
 
     @Override
     public @NotNull BlockFace getAttachedFace() {
-        byte data = (byte) (getData() & 0x3);
+        final byte data = (byte) (getData() & 0x3);
 
         switch (data) {
             case 0x0:
@@ -94,7 +94,7 @@ public class TrapDoor extends SimpleAttachableMaterialData implements Openable {
     }
 
     @Override
-    public void setFacingDirection(@NotNull BlockFace face) {
+    public void setFacingDirection(@NotNull final BlockFace face) {
         byte data = (byte) (getData() & 0xC);
 
         switch (face) {
diff --git a/src/main/java/org/bukkit/material/Tree.java b/src/main/java/org/bukkit/material/Tree.java
index 75cb1760a2d05513b8b6585149c4287fdf7a3466..db3e75be40f24a5fc1b2e3a25200ebea9f69f619 100644
--- a/src/main/java/org/bukkit/material/Tree.java
+++ b/src/main/java/org/bukkit/material/Tree.java
@@ -32,7 +32,7 @@ public class Tree extends Wood {
      *
      * @param species the species of the tree block
      */
-    public Tree(TreeSpecies species) {
+    public Tree(final TreeSpecies species) {
         this(DEFAULT_TYPE, species, DEFAULT_DIRECTION);
     }
 
@@ -43,7 +43,7 @@ public class Tree extends Wood {
      * @param species the species of the tree block
      * @param dir the direction the tree block is facing
      */
-    public Tree(TreeSpecies species, @NotNull BlockFace dir) {
+    public Tree(final TreeSpecies species, @NotNull final BlockFace dir) {
         this(DEFAULT_TYPE, species, dir);
     }
 
@@ -62,7 +62,7 @@ public class Tree extends Wood {
      * @param type the type of tree block
      * @param species the species of the tree block
      */
-    public Tree(final Material type, TreeSpecies species) {
+    public Tree(final Material type, final TreeSpecies species) {
         this(type, species, DEFAULT_DIRECTION);
     }
 
@@ -74,7 +74,7 @@ public class Tree extends Wood {
      * @param species the species of the tree block
      * @param dir the direction the tree block is facing
      */
-    public Tree(final Material type, TreeSpecies species, @NotNull BlockFace dir) {
+    public Tree(final Material type, final TreeSpecies species, @NotNull final BlockFace dir) {
         super(type, species);
         setDirection(dir);
     }
@@ -121,8 +121,8 @@ public class Tree extends Wood {
      * @param dir - direction of end of log (BlockFace.SELF for no direction)
      */
     @SuppressWarnings("deprecation")
-    public void setDirection(@NotNull BlockFace dir) {
-        int dat;
+    public void setDirection(@NotNull final BlockFace dir) {
+        final int dat;
         switch (dir) {
             case UP:
             case DOWN:
diff --git a/src/main/java/org/bukkit/material/Tripwire.java b/src/main/java/org/bukkit/material/Tripwire.java
index f2c50111b112090606859fe4c7ce50f3970ed649..4f9d8a815caef98949e4108312c6e7d53fdbcc72 100644
--- a/src/main/java/org/bukkit/material/Tripwire.java
+++ b/src/main/java/org/bukkit/material/Tripwire.java
@@ -41,7 +41,7 @@ public class Tripwire extends MaterialData {
      *
      * @param act - true if activated, false if not
      */
-    public void setActivated(boolean act) {
+    public void setActivated(final boolean act) {
         int dat = getData() & (0x8 | 0x3);
         if (act) {
             dat |= 0x4;
@@ -63,7 +63,7 @@ public class Tripwire extends MaterialData {
      *
      * @param trig - true if object activating tripwire, false if not
      */
-    public void setObjectTriggering(boolean trig) {
+    public void setObjectTriggering(final boolean trig) {
         int dat = getData() & 0xE;
         if (trig) {
             dat |= 0x1;
diff --git a/src/main/java/org/bukkit/material/TripwireHook.java b/src/main/java/org/bukkit/material/TripwireHook.java
index 38dcb6d9cdf9f9e53dde677034922fd269619f30..ef2cda9430bbd72f79e4f7175440a809ee4c30c5 100644
--- a/src/main/java/org/bukkit/material/TripwireHook.java
+++ b/src/main/java/org/bukkit/material/TripwireHook.java
@@ -28,7 +28,7 @@ public class TripwireHook extends SimpleAttachableMaterialData implements Redsto
         super(type, data);
     }
 
-    public TripwireHook(@NotNull BlockFace dir) {
+    public TripwireHook(@NotNull final BlockFace dir) {
         this();
         setFacingDirection(dir);
     }
@@ -47,7 +47,7 @@ public class TripwireHook extends SimpleAttachableMaterialData implements Redsto
      *
      * @param connected - true if connected, false if not
      */
-    public void setConnected(boolean connected) {
+    public void setConnected(final boolean connected) {
         int dat = getData() & (0x8 | 0x3);
         if (connected) {
             dat |= 0x4;
@@ -69,7 +69,7 @@ public class TripwireHook extends SimpleAttachableMaterialData implements Redsto
      *
      * @param act - true if activated, false if not
      */
-    public void setActivated(boolean act) {
+    public void setActivated(final boolean act) {
         int dat = getData() & (0x4 | 0x3);
         if (act) {
             dat |= 0x8;
@@ -78,7 +78,7 @@ public class TripwireHook extends SimpleAttachableMaterialData implements Redsto
     }
 
     @Override
-    public void setFacingDirection(@NotNull BlockFace face) {
+    public void setFacingDirection(@NotNull final BlockFace face) {
         int dat = getData() & 0xC;
         switch (face) {
         case WEST:
diff --git a/src/main/java/org/bukkit/material/Vine.java b/src/main/java/org/bukkit/material/Vine.java
index 2936af2a17bca15ffd2d34e074f1258cb2d76cd2..b79954eb722e216b001d53d22089880333b2090d 100644
--- a/src/main/java/org/bukkit/material/Vine.java
+++ b/src/main/java/org/bukkit/material/Vine.java
@@ -40,15 +40,15 @@ public class Vine extends MaterialData {
      * @deprecated Magic value
      */
     @Deprecated
-    public Vine(byte data) {
+    public Vine(final byte data) {
         super(Material.LEGACY_VINE, data);
     }
 
-    public Vine(BlockFace... faces) {
+    public Vine(final BlockFace... faces) {
         this(EnumSet.copyOf(Arrays.asList(faces)));
     }
 
-    public Vine(@NotNull EnumSet<BlockFace> faces) {
+    public Vine(@NotNull final EnumSet<BlockFace> faces) {
         this((byte) 0);
         faces.retainAll(possibleFaces);
 
@@ -81,7 +81,7 @@ public class Vine extends MaterialData {
      * @param face The face to check.
      * @return Whether it is attached to that face.
      */
-    public boolean isOnFace(@NotNull BlockFace face) {
+    public boolean isOnFace(@NotNull final BlockFace face) {
         switch (face) {
             case WEST:
                 return (getData() & VINE_WEST) == VINE_WEST;
@@ -111,7 +111,7 @@ public class Vine extends MaterialData {
      *
      * @param face The face to attach.
      */
-    public void putOnFace(@NotNull BlockFace face) {
+    public void putOnFace(@NotNull final BlockFace face) {
         switch (face) {
             case WEST:
                 setData((byte) (getData() | VINE_WEST));
@@ -153,7 +153,7 @@ public class Vine extends MaterialData {
      *
      * @param face The face to detach.
      */
-    public void removeFromFace(@NotNull BlockFace face) {
+    public void removeFromFace(@NotNull final BlockFace face) {
         switch (face) {
             case WEST:
                 setData((byte) (getData() & ~VINE_WEST));
diff --git a/src/main/java/org/bukkit/material/Wood.java b/src/main/java/org/bukkit/material/Wood.java
index 603a935dcf25f15a427afe381aeb1e1b0708b9ee..a1631c9ccff841cbddf3ca6bb623529ce975182f 100644
--- a/src/main/java/org/bukkit/material/Wood.java
+++ b/src/main/java/org/bukkit/material/Wood.java
@@ -33,7 +33,7 @@ public class Wood extends MaterialData {
      *
      * @param species the species of the wood block
      */
-    public Wood(@NotNull TreeSpecies species) {
+    public Wood(@NotNull final TreeSpecies species) {
         this(DEFAULT_TYPE, species);
     }
 
@@ -99,7 +99,7 @@ public class Wood extends MaterialData {
      * @param species The required species
      * @return The actual type for this species given the desired type
      */
-    private static Material getSpeciesType(@NotNull Material type, @NotNull TreeSpecies species) {
+    private static Material getSpeciesType(@NotNull final Material type, @NotNull final TreeSpecies species) {
         switch (species) {
             case GENERIC:
             case REDWOOD:
diff --git a/src/main/java/org/bukkit/material/WoodenStep.java b/src/main/java/org/bukkit/material/WoodenStep.java
index d246994c47540b442a73b3de269ec4612b2bb84f..1025e025a85a6ec1af2b48ba401bc6ef4b4185ec 100644
--- a/src/main/java/org/bukkit/material/WoodenStep.java
+++ b/src/main/java/org/bukkit/material/WoodenStep.java
@@ -30,7 +30,7 @@ public class WoodenStep extends Wood {
      *
      * @param species the species of the wooden step
      */
-    public WoodenStep(@NotNull TreeSpecies species) {
+    public WoodenStep(@NotNull final TreeSpecies species) {
         this(species, DEFAULT_INVERTED);
     }
 
@@ -41,7 +41,7 @@ public class WoodenStep extends Wood {
      * @param species the species of the wooden step
      * @param inv true the step is at the top of the block
      */
-    public WoodenStep(final @NotNull TreeSpecies species, boolean inv) {
+    public WoodenStep(final @NotNull TreeSpecies species, final boolean inv) {
         super(DEFAULT_TYPE, species);
         setInverted(inv);
     }
@@ -73,7 +73,7 @@ public class WoodenStep extends Wood {
      * (bottom half)
      */
     @SuppressWarnings("deprecation")
-    public void setInverted(boolean inv) {
+    public void setInverted(final boolean inv) {
         int dat = getData() & 0x7;
         if (inv) {
             dat |= 0x8;
diff --git a/src/main/java/org/bukkit/material/Wool.java b/src/main/java/org/bukkit/material/Wool.java
index 89984e213c3353b7cb4fddbadb4d6efec7a011bf..669ef2b65ba31efac474186844adc4c958f079e3 100644
--- a/src/main/java/org/bukkit/material/Wool.java
+++ b/src/main/java/org/bukkit/material/Wool.java
@@ -16,7 +16,7 @@ public class Wool extends MaterialData implements Colorable {
         super(Material.LEGACY_WOOL);
     }
 
-    public Wool(@NotNull DyeColor color) {
+    public Wool(@NotNull final DyeColor color) {
         this();
         setColor(color);
     }
@@ -51,7 +51,7 @@ public class Wool extends MaterialData implements Colorable {
      * @param color New color of this dye
      */
     @Override
-    public void setColor(@NotNull DyeColor color) {
+    public void setColor(@NotNull final DyeColor color) {
         setData(color.getWoolData());
     }
 
diff --git a/src/main/java/org/bukkit/material/types/MushroomBlockTexture.java b/src/main/java/org/bukkit/material/types/MushroomBlockTexture.java
index 66a13aa5e3b00bea772fddd8b3ea26c0ab95404b..7b63d3aa14e2f331197f2e960534900e012bcb6a 100644
--- a/src/main/java/org/bukkit/material/types/MushroomBlockTexture.java
+++ b/src/main/java/org/bukkit/material/types/MushroomBlockTexture.java
@@ -127,7 +127,7 @@ public enum MushroomBlockTexture {
     }
 
     static {
-        for (MushroomBlockTexture type : values()) {
+        for (final MushroomBlockTexture type : values()) {
             BY_DATA.put(type.data, type);
             BY_BLOCKFACE.put(type.capFace, type);
         }
diff --git a/src/main/java/org/bukkit/metadata/FixedMetadataValue.java b/src/main/java/org/bukkit/metadata/FixedMetadataValue.java
index 3f792a0baeb216536e07bef16265b3dd6f171b44..05b6eb959ce8cf8a63e798ab7b8fd297a6c47885 100644
--- a/src/main/java/org/bukkit/metadata/FixedMetadataValue.java
+++ b/src/main/java/org/bukkit/metadata/FixedMetadataValue.java
@@ -26,7 +26,7 @@ public class FixedMetadataValue extends LazyMetadataValue {
      * @param owningPlugin the {@link Plugin} that created this metadata value
      * @param value the value assigned to this metadata value
      */
-    public FixedMetadataValue(@NotNull Plugin owningPlugin, @Nullable final Object value) {
+    public FixedMetadataValue(@NotNull final Plugin owningPlugin, @Nullable final Object value) {
         super(owningPlugin);
         this.internalValue = value;
     }
diff --git a/src/main/java/org/bukkit/metadata/LazyMetadataValue.java b/src/main/java/org/bukkit/metadata/LazyMetadataValue.java
index 12ba7489fa9d79905aae6e2f93b6ba79650902b8..4194ca0f26e33168be8db98442cc5e5bdb66526e 100644
--- a/src/main/java/org/bukkit/metadata/LazyMetadataValue.java
+++ b/src/main/java/org/bukkit/metadata/LazyMetadataValue.java
@@ -32,7 +32,7 @@ public class LazyMetadataValue extends MetadataValueAdapter {
      *     value.
      * @param lazyValue the lazy value assigned to this metadata value.
      */
-    public LazyMetadataValue(@NotNull Plugin owningPlugin, @NotNull Callable<Object> lazyValue) {
+    public LazyMetadataValue(@NotNull final Plugin owningPlugin, @NotNull final Callable<Object> lazyValue) {
         this(owningPlugin, CacheStrategy.CACHE_AFTER_FIRST_EVAL, lazyValue);
     }
 
@@ -45,7 +45,7 @@ public class LazyMetadataValue extends MetadataValueAdapter {
      *     value.
      * @param lazyValue the lazy value assigned to this metadata value.
      */
-    public LazyMetadataValue(@NotNull Plugin owningPlugin, @NotNull CacheStrategy cacheStrategy, @NotNull Callable<Object> lazyValue) {
+    public LazyMetadataValue(@NotNull final Plugin owningPlugin, @NotNull final CacheStrategy cacheStrategy, @NotNull final Callable<Object> lazyValue) {
         super(owningPlugin);
         Preconditions.checkArgument(cacheStrategy != null, "cacheStrategy cannot be null");
         Preconditions.checkArgument(lazyValue != null, "lazyValue cannot be null");
@@ -60,7 +60,7 @@ public class LazyMetadataValue extends MetadataValueAdapter {
      *
      * @param owningPlugin the owning plugin
      */
-    protected LazyMetadataValue(@NotNull Plugin owningPlugin) {
+    protected LazyMetadataValue(@NotNull final Plugin owningPlugin) {
         super(owningPlugin);
     }
 
@@ -68,7 +68,7 @@ public class LazyMetadataValue extends MetadataValueAdapter {
     @Nullable
     public Object value() {
         eval();
-        Object value = internalValue.get();
+        final Object value = internalValue.get();
         if (value == ACTUALLY_NULL) {
             return null;
         }
@@ -89,7 +89,7 @@ public class LazyMetadataValue extends MetadataValueAdapter {
                     value = ACTUALLY_NULL;
                 }
                 internalValue = new SoftReference<Object>(value);
-            } catch (Exception e) {
+            } catch (final Exception e) {
                 throw new MetadataEvaluationException(e);
             }
         }
diff --git a/src/main/java/org/bukkit/metadata/MetadataConversionException.java b/src/main/java/org/bukkit/metadata/MetadataConversionException.java
index a3def46a473e56a84ce648c1d21f5487eb721547..88260fde92719dc0f0389150c6b6a94bf0ac11c6 100644
--- a/src/main/java/org/bukkit/metadata/MetadataConversionException.java
+++ b/src/main/java/org/bukkit/metadata/MetadataConversionException.java
@@ -7,7 +7,7 @@ package org.bukkit.metadata;
  */
 @SuppressWarnings("serial")
 public class MetadataConversionException extends RuntimeException {
-    MetadataConversionException(String message) {
+    MetadataConversionException(final String message) {
         super(message);
     }
 }
diff --git a/src/main/java/org/bukkit/metadata/MetadataEvaluationException.java b/src/main/java/org/bukkit/metadata/MetadataEvaluationException.java
index 918e7c83933edd1ba4182286618f39883e00de56..7f208e074fadba587d9289e0256c2818589b7110 100644
--- a/src/main/java/org/bukkit/metadata/MetadataEvaluationException.java
+++ b/src/main/java/org/bukkit/metadata/MetadataEvaluationException.java
@@ -7,7 +7,7 @@ package org.bukkit.metadata;
  */
 @SuppressWarnings("serial")
 public class MetadataEvaluationException extends RuntimeException {
-    MetadataEvaluationException(Throwable cause) {
+    MetadataEvaluationException(final Throwable cause) {
         super(cause);
     }
 }
diff --git a/src/main/java/org/bukkit/metadata/MetadataStoreBase.java b/src/main/java/org/bukkit/metadata/MetadataStoreBase.java
index eeafc46045088cf158b166624decfb6e04619b21..ab79f5aa15747f415cb1676dbe0f869232c7d9da 100644
--- a/src/main/java/org/bukkit/metadata/MetadataStoreBase.java
+++ b/src/main/java/org/bukkit/metadata/MetadataStoreBase.java
@@ -36,11 +36,11 @@ public abstract class MetadataStoreBase<T> {
      *     is null
      * @see MetadataStore#setMetadata(Object, String, MetadataValue)
      */
-    public synchronized void setMetadata(@NotNull T subject, @NotNull String metadataKey, @NotNull MetadataValue newMetadataValue) {
+    public synchronized void setMetadata(@NotNull final T subject, @NotNull final String metadataKey, @NotNull final MetadataValue newMetadataValue) {
         Preconditions.checkArgument(newMetadataValue != null, "Value cannot be null");
-        Plugin owningPlugin = newMetadataValue.getOwningPlugin();
+        final Plugin owningPlugin = newMetadataValue.getOwningPlugin();
         Preconditions.checkArgument(owningPlugin != null, "Plugin cannot be null");
-        String key = disambiguate(subject, metadataKey);
+        final String key = disambiguate(subject, metadataKey);
         Map<Plugin, MetadataValue> entry = metadataMap.get(key);
         if (entry == null) {
             entry = new WeakHashMap<Plugin, MetadataValue>(1);
@@ -62,11 +62,11 @@ public abstract class MetadataStoreBase<T> {
      * @see MetadataStore#getMetadata(Object, String)
      */
     @NotNull
-    public List<MetadataValue> getMetadata(@NotNull T subject, @NotNull String metadataKey) { // Paper
-        String key = disambiguate(subject, metadataKey);
-        Map<Plugin, MetadataValue> entry = metadataMap.get(key);
+    public List<MetadataValue> getMetadata(@NotNull final T subject, @NotNull final String metadataKey) { // Paper
+        final String key = disambiguate(subject, metadataKey);
+        final Map<Plugin, MetadataValue> entry = metadataMap.get(key);
         if (entry != null) {
-            Collection<MetadataValue> values = entry.values();
+            final Collection<MetadataValue> values = entry.values();
             return Collections.unmodifiableList(new ArrayList<MetadataValue>(values));
         } else {
             return Collections.emptyList();
@@ -81,8 +81,8 @@ public abstract class MetadataStoreBase<T> {
      * @param metadataKey the unique metadata key being queried.
      * @return the existence of the metadataKey within subject.
      */
-    public boolean hasMetadata(@NotNull T subject, @NotNull String metadataKey) { // Paper
-        String key = disambiguate(subject, metadataKey);
+    public boolean hasMetadata(@NotNull final T subject, @NotNull final String metadataKey) { // Paper
+        final String key = disambiguate(subject, metadataKey);
         return metadataMap.containsKey(key);
     }
 
@@ -97,10 +97,10 @@ public abstract class MetadataStoreBase<T> {
      * @see MetadataStore#removeMetadata(Object, String,
      *     org.bukkit.plugin.Plugin)
      */
-    public void removeMetadata(@NotNull T subject, @NotNull String metadataKey, @NotNull Plugin owningPlugin) { // Paper
+    public void removeMetadata(@NotNull final T subject, @NotNull final String metadataKey, @NotNull final Plugin owningPlugin) { // Paper
         Preconditions.checkArgument(owningPlugin != null, "Plugin cannot be null");
-        String key = disambiguate(subject, metadataKey);
-        Map<Plugin, MetadataValue> entry = metadataMap.get(key);
+        final String key = disambiguate(subject, metadataKey);
+        final Map<Plugin, MetadataValue> entry = metadataMap.get(key);
         if (entry == null) {
             return;
         }
@@ -121,9 +121,9 @@ public abstract class MetadataStoreBase<T> {
      * @throws IllegalArgumentException If plugin is null
      * @see MetadataStore#invalidateAll(org.bukkit.plugin.Plugin)
      */
-    public void invalidateAll(@NotNull Plugin owningPlugin) { // Paper
+    public void invalidateAll(@NotNull final Plugin owningPlugin) { // Paper
         Preconditions.checkArgument(owningPlugin != null, "Plugin cannot be null");
-        for (Map<Plugin, MetadataValue> values : metadataMap.values()) {
+        for (final Map<Plugin, MetadataValue> values : metadataMap.values()) {
             if (values.containsKey(owningPlugin)) {
                 values.get(owningPlugin).invalidate();
             }
@@ -137,10 +137,10 @@ public abstract class MetadataStoreBase<T> {
      * @param owningPlugin the plugin requesting the invalidation.
      * @throws IllegalArgumentException If plugin is null
      */
-    public void removeAll(@NotNull Plugin owningPlugin) {
+    public void removeAll(@NotNull final Plugin owningPlugin) {
         Preconditions.checkNotNull(owningPlugin, "Plugin cannot be null");
-        for (Iterator<Map<Plugin, MetadataValue>> iterator = metadataMap.values().iterator(); iterator.hasNext(); ) {
-            Map<Plugin, MetadataValue> values = iterator.next();
+        for (final Iterator<Map<Plugin, MetadataValue>> iterator = metadataMap.values().iterator(); iterator.hasNext(); ) {
+            final Map<Plugin, MetadataValue> values = iterator.next();
 	        values.remove(owningPlugin);
             if (values.isEmpty()) {
                 iterator.remove();
diff --git a/src/main/java/org/bukkit/metadata/MetadataValueAdapter.java b/src/main/java/org/bukkit/metadata/MetadataValueAdapter.java
index 69f2fcb28b24ac64a3a5b3e5df3d1074a9afbf94..7efa9f6f7b3bccf6b4c2ed14b1000461b5cd9609 100644
--- a/src/main/java/org/bukkit/metadata/MetadataValueAdapter.java
+++ b/src/main/java/org/bukkit/metadata/MetadataValueAdapter.java
@@ -17,7 +17,7 @@ import org.jetbrains.annotations.Nullable;
 public abstract class MetadataValueAdapter implements MetadataValue {
     protected final @NotNull WeakReference<Plugin> owningPlugin;
 
-    protected MetadataValueAdapter(@NotNull Plugin owningPlugin) {
+    protected MetadataValueAdapter(@NotNull final Plugin owningPlugin) {
         Preconditions.checkArgument(owningPlugin != null, "owningPlugin cannot be null");
         this.owningPlugin = new WeakReference<Plugin>(owningPlugin);
     }
@@ -60,7 +60,7 @@ public abstract class MetadataValueAdapter implements MetadataValue {
 
     @Override
     public boolean asBoolean() {
-        Object value = value();
+        final Object value = value();
         if (value instanceof Boolean) {
             return ((Boolean) value).booleanValue();
         }
@@ -79,7 +79,7 @@ public abstract class MetadataValueAdapter implements MetadataValue {
     @Override
     @NotNull
     public String asString() {
-        Object value = value();
+        final Object value = value();
 
         if (value == null) {
             return "";
diff --git a/src/main/java/org/bukkit/permissions/PermissibleBase.java b/src/main/java/org/bukkit/permissions/PermissibleBase.java
index 4b37788e744ff361681e54eca24970771998e58f..e5df30d18378941d53e140b11ea8b36ea11c8920 100644
--- a/src/main/java/org/bukkit/permissions/PermissibleBase.java
+++ b/src/main/java/org/bukkit/permissions/PermissibleBase.java
@@ -21,7 +21,7 @@ public class PermissibleBase implements Permissible {
     private final List<PermissionAttachment> attachments = new LinkedList<PermissionAttachment>();
     private final Map<String, PermissionAttachmentInfo> permissions = new HashMap<String, PermissionAttachmentInfo>();
 
-    public PermissibleBase(@Nullable ServerOperator opable) {
+    public PermissibleBase(@Nullable final ServerOperator opable) {
         this.opable = opable;
         this.parent = (opable instanceof Permissible) ? (Permissible) opable : this;
 
@@ -38,7 +38,7 @@ public class PermissibleBase implements Permissible {
     }
 
     @Override
-    public void setOp(boolean value) {
+    public void setOp(final boolean value) {
         if (opable == null) {
             throw new UnsupportedOperationException("Cannot change op value as no ServerOperator is set");
         } else {
@@ -47,7 +47,7 @@ public class PermissibleBase implements Permissible {
     }
 
     @Override
-    public boolean isPermissionSet(@NotNull String name) {
+    public boolean isPermissionSet(@NotNull final String name) {
         if (name == null) {
             throw new IllegalArgumentException("Permission name cannot be null");
         }
@@ -56,7 +56,7 @@ public class PermissibleBase implements Permissible {
     }
 
     @Override
-    public boolean isPermissionSet(@NotNull Permission perm) {
+    public boolean isPermissionSet(@NotNull final Permission perm) {
         if (perm == null) {
             throw new IllegalArgumentException("Permission cannot be null");
         }
@@ -65,20 +65,20 @@ public class PermissibleBase implements Permissible {
     }
 
     @Override
-    public boolean hasPermission(@NotNull String inName) {
+    public boolean hasPermission(@NotNull final String inName) {
         if (inName == null) {
             throw new IllegalArgumentException("Permission name cannot be null");
         }
 
-        String name = inName.toLowerCase(java.util.Locale.ENGLISH);
+        final String name = inName.toLowerCase(java.util.Locale.ENGLISH);
 
         // Paper start
-        PermissionAttachmentInfo info = permissions.get(name);
+        final PermissionAttachmentInfo info = permissions.get(name);
         if (info != null) {
             return info.getValue();
             // Paper end
         } else {
-            Permission perm = Bukkit.getServer().getPluginManager().getPermission(name);
+            final Permission perm = Bukkit.getServer().getPluginManager().getPermission(name);
 
             if (perm != null) {
                 return perm.getDefault().getValue(isOp());
@@ -89,15 +89,15 @@ public class PermissibleBase implements Permissible {
     }
 
     @Override
-    public boolean hasPermission(@NotNull Permission perm) {
+    public boolean hasPermission(@NotNull final Permission perm) {
         if (perm == null) {
             throw new IllegalArgumentException("Permission cannot be null");
         }
 
-        String name = perm.getName().toLowerCase(java.util.Locale.ENGLISH);
+        final String name = perm.getName().toLowerCase(java.util.Locale.ENGLISH);
 
         // Paper start
-        PermissionAttachmentInfo info = permissions.get(name);
+        final PermissionAttachmentInfo info = permissions.get(name);
         if (info != null) {
             return info.getValue();
         }
@@ -107,7 +107,7 @@ public class PermissibleBase implements Permissible {
 
     @Override
     @NotNull
-    public synchronized PermissionAttachment addAttachment(@NotNull Plugin plugin, @NotNull String name, boolean value) { // Paper - synchronized
+    public synchronized PermissionAttachment addAttachment(@NotNull final Plugin plugin, @NotNull final String name, final boolean value) { // Paper - synchronized
         if (name == null) {
             throw new IllegalArgumentException("Permission name cannot be null");
         } else if (plugin == null) {
@@ -116,7 +116,7 @@ public class PermissibleBase implements Permissible {
             throw new IllegalArgumentException("Plugin " + plugin.getDescription().getFullName() + " is disabled");
         }
 
-        PermissionAttachment result = addAttachment(plugin);
+        final PermissionAttachment result = addAttachment(plugin);
         result.setPermission(name, value);
 
         recalculatePermissions();
@@ -126,14 +126,14 @@ public class PermissibleBase implements Permissible {
 
     @Override
     @NotNull
-    public synchronized PermissionAttachment addAttachment(@NotNull Plugin plugin) { // Paper - synchronized
+    public synchronized PermissionAttachment addAttachment(@NotNull final Plugin plugin) { // Paper - synchronized
         if (plugin == null) {
             throw new IllegalArgumentException("Plugin cannot be null");
         } else if (!plugin.isEnabled()) {
             throw new IllegalArgumentException("Plugin " + plugin.getDescription().getFullName() + " is disabled");
         }
 
-        PermissionAttachment result = new PermissionAttachment(plugin, parent);
+        final PermissionAttachment result = new PermissionAttachment(plugin, parent);
 
         attachments.add(result);
         recalculatePermissions();
@@ -142,13 +142,13 @@ public class PermissibleBase implements Permissible {
     }
 
     @Override
-    public synchronized void removeAttachment(@NotNull PermissionAttachment attachment) { // Paper - synchronized
+    public synchronized void removeAttachment(@NotNull final PermissionAttachment attachment) { // Paper - synchronized
         if (attachment == null) {
             throw new IllegalArgumentException("Attachment cannot be null");
         }
 
         if (attachments.remove(attachment)) {
-            PermissionRemovedExecutor ex = attachment.getRemovalCallback();
+            final PermissionRemovedExecutor ex = attachment.getRemovalCallback();
 
             if (ex != null) {
                 ex.attachmentRemoved(attachment);
@@ -163,25 +163,25 @@ public class PermissibleBase implements Permissible {
     @Override
     public synchronized void recalculatePermissions() { // Paper - synchronized
         clearPermissions();
-        Set<Permission> defaults = Bukkit.getServer().getPluginManager().getDefaultPermissions(isOp());
+        final Set<Permission> defaults = Bukkit.getServer().getPluginManager().getDefaultPermissions(isOp());
         Bukkit.getServer().getPluginManager().subscribeToDefaultPerms(isOp(), parent);
 
-        for (Permission perm : defaults) {
-            String name = perm.getName().toLowerCase(java.util.Locale.ENGLISH);
+        for (final Permission perm : defaults) {
+            final String name = perm.getName().toLowerCase(java.util.Locale.ENGLISH);
             permissions.put(name, new PermissionAttachmentInfo(parent, name, null, true));
             Bukkit.getServer().getPluginManager().subscribeToPermission(name, parent);
             calculateChildPermissions(perm.getChildren(), false, null);
         }
 
-        for (PermissionAttachment attachment : attachments) {
+        for (final PermissionAttachment attachment : attachments) {
             calculateChildPermissions(attachment.getPermissions(), false, attachment);
         }
     }
 
     public synchronized void clearPermissions() {
-        Set<String> perms = permissions.keySet();
+        final Set<String> perms = permissions.keySet();
 
-        for (String name : perms) {
+        for (final String name : perms) {
             Bukkit.getServer().getPluginManager().unsubscribeFromPermission(name, parent);
         }
 
@@ -191,13 +191,13 @@ public class PermissibleBase implements Permissible {
         permissions.clear();
     }
 
-    private void calculateChildPermissions(@NotNull Map<String, Boolean> children, boolean invert, @Nullable PermissionAttachment attachment) {
-        for (Map.Entry<String, Boolean> entry : children.entrySet()) {
-            String name = entry.getKey();
+    private void calculateChildPermissions(@NotNull final Map<String, Boolean> children, final boolean invert, @Nullable final PermissionAttachment attachment) {
+        for (final Map.Entry<String, Boolean> entry : children.entrySet()) {
+            final String name = entry.getKey();
 
-            Permission perm = Bukkit.getServer().getPluginManager().getPermission(name);
-            boolean value = entry.getValue().booleanValue() ^ invert;
-            String lname = name.toLowerCase(java.util.Locale.ENGLISH);
+            final Permission perm = Bukkit.getServer().getPluginManager().getPermission(name);
+            final boolean value = entry.getValue().booleanValue() ^ invert;
+            final String lname = name.toLowerCase(java.util.Locale.ENGLISH);
 
             permissions.put(lname, new PermissionAttachmentInfo(parent, lname, attachment, value));
             Bukkit.getServer().getPluginManager().subscribeToPermission(name, parent);
@@ -210,7 +210,7 @@ public class PermissibleBase implements Permissible {
 
     @Override
     @Nullable
-    public synchronized PermissionAttachment addAttachment(@NotNull Plugin plugin, @NotNull String name, boolean value, int ticks) { // Paper
+    public synchronized PermissionAttachment addAttachment(@NotNull final Plugin plugin, @NotNull final String name, final boolean value, final int ticks) { // Paper
         if (name == null) {
             throw new IllegalArgumentException("Permission name cannot be null");
         } else if (plugin == null) {
@@ -219,7 +219,7 @@ public class PermissibleBase implements Permissible {
             throw new IllegalArgumentException("Plugin " + plugin.getDescription().getFullName() + " is disabled");
         }
 
-        PermissionAttachment result = addAttachment(plugin, ticks);
+        final PermissionAttachment result = addAttachment(plugin, ticks);
 
         if (result != null) {
             result.setPermission(name, value);
@@ -230,14 +230,14 @@ public class PermissibleBase implements Permissible {
 
     @Override
     @Nullable
-    public synchronized PermissionAttachment addAttachment(@NotNull Plugin plugin, int ticks) { // Paper - synchronized
+    public synchronized PermissionAttachment addAttachment(@NotNull final Plugin plugin, final int ticks) { // Paper - synchronized
         if (plugin == null) {
             throw new IllegalArgumentException("Plugin cannot be null");
         } else if (!plugin.isEnabled()) {
             throw new IllegalArgumentException("Plugin " + plugin.getDescription().getFullName() + " is disabled");
         }
 
-        PermissionAttachment result = addAttachment(plugin);
+        final PermissionAttachment result = addAttachment(plugin);
 
         if (Bukkit.getServer().getScheduler().scheduleSyncDelayedTask(plugin, new RemoveAttachmentRunnable(result), ticks) == -1) {
             Bukkit.getServer().getLogger().log(Level.WARNING, "Could not add PermissionAttachment to " + parent + " for plugin " + plugin.getDescription().getFullName() + ": Scheduler returned -1");
@@ -257,7 +257,7 @@ public class PermissibleBase implements Permissible {
     private static class RemoveAttachmentRunnable implements Runnable {
         private final @NotNull PermissionAttachment attachment;
 
-        public RemoveAttachmentRunnable(@NotNull PermissionAttachment attachment) {
+        public RemoveAttachmentRunnable(@NotNull final PermissionAttachment attachment) {
             this.attachment = attachment;
         }
 
diff --git a/src/main/java/org/bukkit/permissions/Permission.java b/src/main/java/org/bukkit/permissions/Permission.java
index 6c54c76892e356528c4c22905cfd58702cd62a9b..6b9d945547be35bf41faedcafd14450d1fba798e 100644
--- a/src/main/java/org/bukkit/permissions/Permission.java
+++ b/src/main/java/org/bukkit/permissions/Permission.java
@@ -24,35 +24,35 @@ public class Permission {
     private PermissionDefault defaultValue = DEFAULT_PERMISSION;
     private String description;
 
-    public Permission(@NotNull String name) {
+    public Permission(@NotNull final String name) {
         this(name, null, null, null);
     }
 
-    public Permission(@NotNull String name, @Nullable String description) {
+    public Permission(@NotNull final String name, @Nullable final String description) {
         this(name, description, null, null);
     }
 
-    public Permission(@NotNull String name, @Nullable PermissionDefault defaultValue) {
+    public Permission(@NotNull final String name, @Nullable final PermissionDefault defaultValue) {
         this(name, null, defaultValue, null);
     }
 
-    public Permission(@NotNull String name, @Nullable String description, @Nullable PermissionDefault defaultValue) {
+    public Permission(@NotNull final String name, @Nullable final String description, @Nullable final PermissionDefault defaultValue) {
         this(name, description, defaultValue, null);
     }
 
-    public Permission(@NotNull String name, @Nullable Map<String, Boolean> children) {
+    public Permission(@NotNull final String name, @Nullable final Map<String, Boolean> children) {
         this(name, null, null, children);
     }
 
-    public Permission(@NotNull String name, @Nullable String description, @Nullable Map<String, Boolean> children) {
+    public Permission(@NotNull final String name, @Nullable final String description, @Nullable final Map<String, Boolean> children) {
         this(name, description, null, children);
     }
 
-    public Permission(@NotNull String name, @Nullable PermissionDefault defaultValue, @Nullable Map<String, Boolean> children) {
+    public Permission(@NotNull final String name, @Nullable final PermissionDefault defaultValue, @Nullable final Map<String, Boolean> children) {
         this(name, null, defaultValue, children);
     }
 
-    public Permission(@NotNull String name, @Nullable String description, @Nullable PermissionDefault defaultValue, @Nullable Map<String, Boolean> children) {
+    public Permission(@NotNull final String name, @Nullable final String description, @Nullable final PermissionDefault defaultValue, @Nullable final Map<String, Boolean> children) {
         Preconditions.checkArgument(name != null, "Name cannot be null");
         this.name = name;
         this.description = (description == null) ? "" : description;
@@ -109,7 +109,7 @@ public class Permission {
      *
      * @param value The new default to set
      */
-    public void setDefault(@NotNull PermissionDefault value) {
+    public void setDefault(@NotNull final PermissionDefault value) {
         if (defaultValue == null) {
             throw new IllegalArgumentException("Default value cannot be null");
         }
@@ -136,7 +136,7 @@ public class Permission {
      *
      * @param value The new description to set
      */
-    public void setDescription(@Nullable String value) {
+    public void setDescription(@Nullable final String value) {
         if (value == null) {
             description = "";
         } else {
@@ -164,11 +164,11 @@ public class Permission {
      * automatically called after modifying the default value
      */
     public void recalculatePermissibles() {
-        Set<Permissible> perms = getPermissibles();
+        final Set<Permissible> perms = getPermissibles();
 
         Bukkit.getServer().getPluginManager().recalculatePermissionDefaults(this);
 
-        for (Permissible p : perms) {
+        for (final Permissible p : perms) {
             p.recalculatePermissions();
         }
     }
@@ -184,9 +184,9 @@ public class Permission {
      * @return Parent permission it created or loaded
      */
     @NotNull
-    public Permission addParent(@NotNull String name, boolean value) {
-        PluginManager pm = Bukkit.getServer().getPluginManager();
-        String lname = name.toLowerCase(java.util.Locale.ENGLISH);
+    public Permission addParent(@NotNull final String name, final boolean value) {
+        final PluginManager pm = Bukkit.getServer().getPluginManager();
+        final String lname = name.toLowerCase(java.util.Locale.ENGLISH);
 
         Permission perm = pm.getPermission(lname);
 
@@ -206,7 +206,7 @@ public class Permission {
      * @param perm Parent permission to register with
      * @param value The value to set this permission to
      */
-    public void addParent(@NotNull Permission perm, boolean value) {
+    public void addParent(@NotNull final Permission perm, final boolean value) {
         perm.getChildren().put(getName(), Boolean.valueOf(value));
         perm.recalculatePermissibles();
     }
@@ -231,13 +231,13 @@ public class Permission {
      * @return Permission object
      */
     @NotNull
-    public static List<Permission> loadPermissions(@NotNull Map<?, ?> data, @NotNull String error, @Nullable PermissionDefault def) {
-        List<Permission> result = new ArrayList<Permission>();
+    public static List<Permission> loadPermissions(@NotNull final Map<?, ?> data, @NotNull final String error, @Nullable final PermissionDefault def) {
+        final List<Permission> result = new ArrayList<Permission>();
 
-        for (Map.Entry<?, ?> entry : data.entrySet()) {
+        for (final Map.Entry<?, ?> entry : data.entrySet()) {
             try {
                 result.add(Permission.loadPermission(entry.getKey().toString(), (Map<?, ?>) entry.getValue(), def, result));
-            } catch (Throwable ex) {
+            } catch (final Throwable ex) {
                 Bukkit.getServer().getLogger().log(Level.SEVERE, String.format(error, entry.getKey()), ex);
             }
         }
@@ -263,7 +263,7 @@ public class Permission {
      * @return Permission object
      */
     @NotNull
-    public static Permission loadPermission(@NotNull String name, @NotNull Map<String, Object> data) {
+    public static Permission loadPermission(@NotNull final String name, @NotNull final Map<String, Object> data) {
         return loadPermission(name, data, DEFAULT_PERMISSION, null);
     }
 
@@ -287,7 +287,7 @@ public class Permission {
      * @return Permission object
      */
     @NotNull
-    public static Permission loadPermission(@NotNull String name, @NotNull Map<?, ?> data, @Nullable PermissionDefault def, @Nullable List<Permission> output) {
+    public static Permission loadPermission(@NotNull final String name, @NotNull final Map<?, ?> data, @Nullable PermissionDefault def, @Nullable final List<Permission> output) {
         Preconditions.checkArgument(name != null, "Name cannot be null");
         Preconditions.checkArgument(data != null, "Data cannot be null");
 
@@ -295,7 +295,7 @@ public class Permission {
         Map<String, Boolean> children = null;
 
         if (data.get("default") != null) {
-            PermissionDefault value = PermissionDefault.getByName(data.get("default").toString());
+            final PermissionDefault value = PermissionDefault.getByName(data.get("default").toString());
             if (value != null) {
                 def = value;
             } else {
@@ -304,10 +304,10 @@ public class Permission {
         }
 
         if (data.get("children") != null) {
-            Object childrenNode = data.get("children");
+            final Object childrenNode = data.get("children");
             if (childrenNode instanceof Iterable) {
                 children = new LinkedHashMap<String, Boolean>();
-                for (Object child : (Iterable<?>) childrenNode) {
+                for (final Object child : (Iterable<?>) childrenNode) {
                     if (child != null) {
                         children.put(child.toString(), Boolean.TRUE);
                     }
@@ -327,21 +327,21 @@ public class Permission {
     }
 
     @NotNull
-    private static Map<String, Boolean> extractChildren(@NotNull Map<?, ?> input, @NotNull String name, @Nullable PermissionDefault def, @Nullable List<Permission> output) {
-        Map<String, Boolean> children = new LinkedHashMap<String, Boolean>();
+    private static Map<String, Boolean> extractChildren(@NotNull final Map<?, ?> input, @NotNull final String name, @Nullable final PermissionDefault def, @Nullable final List<Permission> output) {
+        final Map<String, Boolean> children = new LinkedHashMap<String, Boolean>();
 
-        for (Map.Entry<?, ?> entry : input.entrySet()) {
+        for (final Map.Entry<?, ?> entry : input.entrySet()) {
             if ((entry.getValue() instanceof Boolean)) {
                 children.put(entry.getKey().toString(), (Boolean) entry.getValue());
             } else if ((entry.getValue() instanceof Map)) {
                 try {
-                    Permission perm = loadPermission(entry.getKey().toString(), (Map<?, ?>) entry.getValue(), def, output);
+                    final Permission perm = loadPermission(entry.getKey().toString(), (Map<?, ?>) entry.getValue(), def, output);
                     children.put(perm.getName(), Boolean.TRUE);
 
                     if (output != null) {
                         output.add(perm);
                     }
-                } catch (Throwable ex) {
+                } catch (final Throwable ex) {
                     throw new IllegalArgumentException("Permission node '" + entry.getKey().toString() + "' in child of " + name + " is invalid", ex);
                 }
             } else {
diff --git a/src/main/java/org/bukkit/permissions/PermissionAttachment.java b/src/main/java/org/bukkit/permissions/PermissionAttachment.java
index 35e9eda170eddaffafba159304087f7461bac63f..34585d4de0274754048e6da36a7d04b786eb0eb0 100644
--- a/src/main/java/org/bukkit/permissions/PermissionAttachment.java
+++ b/src/main/java/org/bukkit/permissions/PermissionAttachment.java
@@ -16,7 +16,7 @@ public class PermissionAttachment {
     private final @NotNull Permissible permissible;
     private final @NotNull Plugin plugin;
 
-    public PermissionAttachment(@NotNull Plugin plugin, @NotNull Permissible permissible) {
+    public PermissionAttachment(@NotNull final Plugin plugin, @NotNull final Permissible permissible) {
         if (plugin == null) {
             throw new IllegalArgumentException("Plugin cannot be null");
         } else if (!plugin.isEnabled()) {
@@ -43,7 +43,7 @@ public class PermissionAttachment {
      *
      * @param ex Object to be called when this is removed
      */
-    public void setRemovalCallback(@Nullable PermissionRemovedExecutor ex) {
+    public void setRemovalCallback(@Nullable final PermissionRemovedExecutor ex) {
         removed = ex;
     }
 
@@ -88,7 +88,7 @@ public class PermissionAttachment {
      * @param name Name of the permission
      * @param value New value of the permission
      */
-    public void setPermission(@NotNull String name, boolean value) {
+    public void setPermission(@NotNull final String name, final boolean value) {
         permissions.put(name.toLowerCase(java.util.Locale.ENGLISH), Boolean.valueOf(value));
         permissible.recalculatePermissions();
     }
@@ -99,7 +99,7 @@ public class PermissionAttachment {
      * @param perm Permission to set
      * @param value New value of the permission
      */
-    public void setPermission(@NotNull Permission perm, boolean value) {
+    public void setPermission(@NotNull final Permission perm, final boolean value) {
         setPermission(perm.getName(), value);
     }
 
@@ -111,7 +111,7 @@ public class PermissionAttachment {
      *
      * @param name Name of the permission to remove
      */
-    public void unsetPermission(@NotNull String name) {
+    public void unsetPermission(@NotNull final String name) {
         permissions.remove(name.toLowerCase(java.util.Locale.ENGLISH));
         permissible.recalculatePermissions();
     }
@@ -124,7 +124,7 @@ public class PermissionAttachment {
      *
      * @param perm Permission to remove
      */
-    public void unsetPermission(@NotNull Permission perm) {
+    public void unsetPermission(@NotNull final Permission perm) {
         unsetPermission(perm.getName());
     }
 
@@ -138,7 +138,7 @@ public class PermissionAttachment {
         try {
             permissible.removeAttachment(this);
             return true;
-        } catch (IllegalArgumentException ex) {
+        } catch (final IllegalArgumentException ex) {
             return false;
         }
     }
diff --git a/src/main/java/org/bukkit/permissions/PermissionAttachmentInfo.java b/src/main/java/org/bukkit/permissions/PermissionAttachmentInfo.java
index f8b3357864569c72d39359510190797e157c3129..ca9eeb9c70eef44a025c33c14e07c7672edda032 100644
--- a/src/main/java/org/bukkit/permissions/PermissionAttachmentInfo.java
+++ b/src/main/java/org/bukkit/permissions/PermissionAttachmentInfo.java
@@ -13,7 +13,7 @@ public class PermissionAttachmentInfo {
     private final @Nullable PermissionAttachment attachment;
     private final boolean value;
 
-    public PermissionAttachmentInfo(@NotNull Permissible permissible, @NotNull String permission, @Nullable PermissionAttachment attachment, boolean value) {
+    public PermissionAttachmentInfo(@NotNull final Permissible permissible, @NotNull final String permission, @Nullable final PermissionAttachment attachment, final boolean value) {
         if (permissible == null) {
             throw new IllegalArgumentException("Permissible may not be null");
         } else if (permission == null) {
diff --git a/src/main/java/org/bukkit/permissions/PermissionDefault.java b/src/main/java/org/bukkit/permissions/PermissionDefault.java
index 449df7c798084669c1f39cbeb5c72c4b17a67162..448929c933e9679515a82e96c997ec42fc922414 100644
--- a/src/main/java/org/bukkit/permissions/PermissionDefault.java
+++ b/src/main/java/org/bukkit/permissions/PermissionDefault.java
@@ -17,7 +17,7 @@ public enum PermissionDefault {
     private final String[] names;
     private static final Map<String, PermissionDefault> lookup = new HashMap<String, PermissionDefault>();
 
-    private PermissionDefault(/*@NotNull*/ String... names) {
+    private PermissionDefault(/*@NotNull*/ final String... names) {
         this.names = names;
     }
 
@@ -28,7 +28,7 @@ public enum PermissionDefault {
      * @param op If the target is op
      * @return True if the default should be true, or false
      */
-    public boolean getValue(boolean op) {
+    public boolean getValue(final boolean op) {
         switch (this) {
         case TRUE:
             return true;
@@ -50,7 +50,7 @@ public enum PermissionDefault {
      * @return Specified value, or null if not found
      */
     @Nullable
-    public static PermissionDefault getByName(@NotNull String name) {
+    public static PermissionDefault getByName(@NotNull final String name) {
         return lookup.get(name.toLowerCase(java.util.Locale.ENGLISH).replaceAll("[^a-z!]", ""));
     }
 
@@ -60,8 +60,8 @@ public enum PermissionDefault {
     }
 
     static {
-        for (PermissionDefault value : values()) {
-            for (String name : value.names) {
+        for (final PermissionDefault value : values()) {
+            for (final String name : value.names) {
                 lookup.put(name, value);
             }
         }
diff --git a/src/main/java/org/bukkit/persistence/PersistentDataContainer.java b/src/main/java/org/bukkit/persistence/PersistentDataContainer.java
index d30ad7cae1dfbb47ab1a6e3e2fcd6fb76163fe78..65c6645693e0c91be3f936ae3b154dc818fd9b83 100644
--- a/src/main/java/org/bukkit/persistence/PersistentDataContainer.java
+++ b/src/main/java/org/bukkit/persistence/PersistentDataContainer.java
@@ -194,7 +194,7 @@ public interface PersistentDataContainer {
      * @param bytes the byte array to read from
      * @throws java.io.IOException if the byte array has an invalid format
      */
-    default void readFromBytes(byte @NotNull [] bytes) throws java.io.IOException {
+    default void readFromBytes(final byte @NotNull [] bytes) throws java.io.IOException {
         this.readFromBytes(bytes, true);
     }
     // Paper end
diff --git a/src/main/java/org/bukkit/persistence/PersistentDataType.java b/src/main/java/org/bukkit/persistence/PersistentDataType.java
index f0838860b1bb9c1f16b10dfdc5445817f48854f9..9a98d6ea2c6277fe814af1751e6a5fd5b8b78291 100644
--- a/src/main/java/org/bukkit/persistence/PersistentDataType.java
+++ b/src/main/java/org/bukkit/persistence/PersistentDataType.java
@@ -127,7 +127,7 @@ public interface PersistentDataType<T, Z> {
 
         private final @NotNull Class<T> primitiveType;
 
-        PrimitivePersistentDataType(@NotNull Class<T> primitiveType) {
+        PrimitivePersistentDataType(@NotNull final Class<T> primitiveType) {
             this.primitiveType = primitiveType;
         }
 
@@ -145,13 +145,13 @@ public interface PersistentDataType<T, Z> {
 
         @NotNull
         @Override
-        public T toPrimitive(@NotNull T complex, @NotNull PersistentDataAdapterContext context) {
+        public T toPrimitive(@NotNull final T complex, @NotNull final PersistentDataAdapterContext context) {
             return complex;
         }
 
         @NotNull
         @Override
-        public T fromPrimitive(@NotNull T primitive, @NotNull PersistentDataAdapterContext context) {
+        public T fromPrimitive(@NotNull final T primitive, @NotNull final PersistentDataAdapterContext context) {
             return primitive;
         }
     }
diff --git a/src/main/java/org/bukkit/plugin/EventExecutor.java b/src/main/java/org/bukkit/plugin/EventExecutor.java
index bdfa3b5f4ab5023d3e1b5c50bed885b6aa118a02..f1ac654b5aa4889babf47d34e9e2c56da2fa5cde 100644
--- a/src/main/java/org/bukkit/plugin/EventExecutor.java
+++ b/src/main/java/org/bukkit/plugin/EventExecutor.java
@@ -29,7 +29,7 @@ public interface EventExecutor {
     ConcurrentMap<Method, Class<? extends EventExecutor>> eventExecutorMap = new ConcurrentHashMap<Method, Class<? extends EventExecutor>>() {
         @NotNull
         @Override
-        public Class<? extends EventExecutor> computeIfAbsent(@NotNull Method key, @NotNull Function<? super Method, ? extends Class<? extends EventExecutor>> mappingFunction) {
+        public Class<? extends EventExecutor> computeIfAbsent(@NotNull final Method key, @NotNull final Function<? super Method, ? extends Class<? extends EventExecutor>> mappingFunction) {
             Class<? extends EventExecutor> executorClass = get(key);
             if (executorClass != null)
                 return executorClass;
@@ -46,11 +46,11 @@ public interface EventExecutor {
     };
 
     @NotNull
-    public static EventExecutor create(@NotNull Method m, @NotNull Class<? extends Event> eventClass) {
+    public static EventExecutor create(@NotNull final Method m, @NotNull final Class<? extends Event> eventClass) {
         Preconditions.checkNotNull(m, "Null method");
         Preconditions.checkArgument(m.getParameterCount() != 0, "Incorrect number of arguments %s", m.getParameterCount());
         Preconditions.checkArgument(m.getParameterTypes()[0] == eventClass, "First parameter %s doesn't match event class %s", m.getParameterTypes()[0], eventClass);
-        ClassDefiner definer = ClassDefiner.getInstance();
+        final ClassDefiner definer = ClassDefiner.getInstance();
         if (m.getReturnType() != Void.TYPE) {
             final org.bukkit.plugin.java.JavaPlugin plugin = org.bukkit.plugin.java.JavaPlugin.getProvidingPlugin(m.getDeclaringClass());
             org.bukkit.Bukkit.getLogger().warning("@EventHandler method " + m.getDeclaringClass().getName() + (Modifier.isStatic(m.getModifiers()) ? '.' : '#') + m.getName()
@@ -61,14 +61,14 @@ public interface EventExecutor {
             return new StaticMethodHandleEventExecutor(eventClass, m);
         } else if (definer.isBypassAccessChecks() || Modifier.isPublic(m.getDeclaringClass().getModifiers()) && Modifier.isPublic(m.getModifiers())) {
             // get the existing generated EventExecutor class for the Method or generate one
-            Class<? extends EventExecutor> executorClass = eventExecutorMap.computeIfAbsent(m, (__) -> {
-                String name = ASMEventExecutorGenerator.generateName();
-                byte[] classData = ASMEventExecutorGenerator.generateEventExecutor(m, name);
+            final Class<? extends EventExecutor> executorClass = eventExecutorMap.computeIfAbsent(m, (__) -> {
+                final String name = ASMEventExecutorGenerator.generateName();
+                final byte[] classData = ASMEventExecutorGenerator.generateEventExecutor(m, name);
                 return definer.defineClass(m.getDeclaringClass().getClassLoader(), name, classData).asSubclass(EventExecutor.class);
             });
 
             try {
-                EventExecutor asmExecutor = executorClass.newInstance();
+                final EventExecutor asmExecutor = executorClass.newInstance();
                 // Define a wrapper to conform to bukkit stupidity (passing in events that don't match and wrapper exception)
                 return new EventExecutor() {
                     @Override
@@ -83,7 +83,7 @@ public interface EventExecutor {
                         return "ASMEventExecutor['" + m + "']";
                     }
                 };
-            } catch (InstantiationException | IllegalAccessException e) {
+            } catch (final InstantiationException | IllegalAccessException e) {
                 throw new AssertionError("Unable to initialize generated event executor", e);
             }
         } else {
diff --git a/src/main/java/org/bukkit/plugin/IllegalPluginAccessException.java b/src/main/java/org/bukkit/plugin/IllegalPluginAccessException.java
index b25447dcfdb0edbcd63799658df221b3a8529238..7a3d25274e98645fc24e2ce8496dd61ba3f51a38 100644
--- a/src/main/java/org/bukkit/plugin/IllegalPluginAccessException.java
+++ b/src/main/java/org/bukkit/plugin/IllegalPluginAccessException.java
@@ -19,7 +19,7 @@ public class IllegalPluginAccessException extends RuntimeException {
      *
      * @param msg the detail message.
      */
-    public IllegalPluginAccessException(String msg) {
+    public IllegalPluginAccessException(final String msg) {
         super(msg);
     }
 }
diff --git a/src/main/java/org/bukkit/plugin/PluginBase.java b/src/main/java/org/bukkit/plugin/PluginBase.java
index ff14c63f3d6ac99f9cba7609bf060e7e4eafa0ad..e4de5d57f9cfb4c91221b6058b4d666c850c1838 100644
--- a/src/main/java/org/bukkit/plugin/PluginBase.java
+++ b/src/main/java/org/bukkit/plugin/PluginBase.java
@@ -17,7 +17,7 @@ public abstract class PluginBase implements Plugin {
     }
 
     @Override
-    public final boolean equals(@Nullable Object obj) {
+    public final boolean equals(@Nullable final Object obj) {
         if (this == obj) {
             return true;
         }
diff --git a/src/main/java/org/bukkit/plugin/PluginDescriptionFile.java b/src/main/java/org/bukkit/plugin/PluginDescriptionFile.java
index 53fcd44b978aaac1ecc78552c101b42eeca7330a..92053f0465dec37d5d0312a8c743cf7f9b23e548 100644
--- a/src/main/java/org/bukkit/plugin/PluginDescriptionFile.java
+++ b/src/main/java/org/bukkit/plugin/PluginDescriptionFile.java
@@ -995,11 +995,11 @@ public final class PluginDescriptionFile {
      *
      * @param writer Writer to output this file to
      */
-    public void save(@NotNull Writer writer) {
+    public void save(@NotNull final Writer writer) {
         YAML.get().dump(saveMap(), writer);
     }
 
-    private void loadMap(@NotNull Map<?, ?> map) throws InvalidDescriptionException {
+    private void loadMap(@NotNull final Map<?, ?> map) throws InvalidDescriptionException {
         try {
             name = rawName = map.get("name").toString();
 
@@ -1007,9 +1007,9 @@ public final class PluginDescriptionFile {
                 throw new InvalidDescriptionException("name '" + name + "' contains invalid characters.");
             }
             name = name.replace(' ', '_');
-        } catch (NullPointerException ex) {
+        } catch (final NullPointerException ex) {
             throw new InvalidDescriptionException(ex, "name is not defined");
-        } catch (ClassCastException ex) {
+        } catch (final ClassCastException ex) {
             throw new InvalidDescriptionException(ex, "name is of wrong type");
         }
 
@@ -1017,9 +1017,9 @@ public final class PluginDescriptionFile {
 
         try {
             version = map.get("version").toString();
-        } catch (NullPointerException ex) {
+        } catch (final NullPointerException ex) {
             throw new InvalidDescriptionException(ex, "version is not defined");
-        } catch (ClassCastException ex) {
+        } catch (final ClassCastException ex) {
             throw new InvalidDescriptionException(ex, "version is of wrong type");
         }
 
@@ -1028,23 +1028,23 @@ public final class PluginDescriptionFile {
             if (main.startsWith("org.bukkit.")) {
                 throw new InvalidDescriptionException("main may not be within the org.bukkit namespace");
             }
-        } catch (NullPointerException ex) {
+        } catch (final NullPointerException ex) {
             throw new InvalidDescriptionException(ex, "main is not defined");
-        } catch (ClassCastException ex) {
+        } catch (final ClassCastException ex) {
             throw new InvalidDescriptionException(ex, "main is of wrong type");
         }
 
         if (map.get("commands") != null) {
-            ImmutableMap.Builder<String, Map<String, Object>> commandsBuilder = ImmutableMap.builder();
+            final ImmutableMap.Builder<String, Map<String, Object>> commandsBuilder = ImmutableMap.builder();
             try {
-                for (Map.Entry<?, ?> command : ((Map<?, ?>) map.get("commands")).entrySet()) {
-                    ImmutableMap.Builder<String, Object> commandBuilder = ImmutableMap.builder();
+                for (final Map.Entry<?, ?> command : ((Map<?, ?>) map.get("commands")).entrySet()) {
+                    final ImmutableMap.Builder<String, Object> commandBuilder = ImmutableMap.builder();
                     if (command.getValue() != null) {
-                        for (Map.Entry<?, ?> commandEntry : ((Map<?, ?>) command.getValue()).entrySet()) {
+                        for (final Map.Entry<?, ?> commandEntry : ((Map<?, ?>) command.getValue()).entrySet()) {
                             if (commandEntry.getValue() instanceof Iterable) {
                                 // This prevents internal alias list changes
-                                ImmutableList.Builder<Object> commandSubList = ImmutableList.builder();
-                                for (Object commandSubListItem : (Iterable<?>) commandEntry.getValue()) {
+                                final ImmutableList.Builder<Object> commandSubList = ImmutableList.builder();
+                                for (final Object commandSubListItem : (Iterable<?>) commandEntry.getValue()) {
                                     if (commandSubListItem != null) {
                                         commandSubList.add(commandSubListItem);
                                     }
@@ -1057,7 +1057,7 @@ public final class PluginDescriptionFile {
                     }
                     commandsBuilder.put(command.getKey().toString(), commandBuilder.build());
                 }
-            } catch (ClassCastException ex) {
+            } catch (final ClassCastException ex) {
                 throw new InvalidDescriptionException(ex, "commands are of wrong type");
             }
             commands = commandsBuilder.build();
@@ -1082,25 +1082,25 @@ public final class PluginDescriptionFile {
         if (map.get("load") != null) {
             try {
                 order = PluginLoadOrder.valueOf(((String) map.get("load")).toUpperCase(java.util.Locale.ENGLISH).replaceAll("\\W", ""));
-            } catch (ClassCastException ex) {
+            } catch (final ClassCastException ex) {
                 throw new InvalidDescriptionException(ex, "load is of wrong type");
-            } catch (IllegalArgumentException ex) {
+            } catch (final IllegalArgumentException ex) {
                 throw new InvalidDescriptionException(ex, "load is not a valid choice");
             }
         }
 
         if (map.get("authors") != null) {
-            ImmutableList.Builder<String> authorsBuilder = ImmutableList.builder();
+            final ImmutableList.Builder<String> authorsBuilder = ImmutableList.builder();
             if (map.get("author") != null) {
                 authorsBuilder.add(map.get("author").toString());
             }
             try {
-                for (Object o : (Iterable<?>) map.get("authors")) {
+                for (final Object o : (Iterable<?>) map.get("authors")) {
                     authorsBuilder.add(o.toString());
                 }
-            } catch (ClassCastException ex) {
+            } catch (final ClassCastException ex) {
                 throw new InvalidDescriptionException(ex, "authors are of wrong type");
-            } catch (NullPointerException ex) {
+            } catch (final NullPointerException ex) {
                 throw new InvalidDescriptionException(ex, "authors are improperly defined");
             }
             authors = authorsBuilder.build();
@@ -1111,12 +1111,12 @@ public final class PluginDescriptionFile {
         }
 
         if (map.get("contributors") != null) {
-            ImmutableList.Builder<String> contributorsBuilder = ImmutableList.builder();
+            final ImmutableList.Builder<String> contributorsBuilder = ImmutableList.builder();
             try {
-                for (Object o : (Iterable<?>) map.get("contributors")) {
+                for (final Object o : (Iterable<?>) map.get("contributors")) {
                     contributorsBuilder.add(o.toString());
                 }
-            } catch (ClassCastException ex) {
+            } catch (final ClassCastException ex) {
                 throw new InvalidDescriptionException(ex, "contributors are of wrong type");
             }
             contributors = contributorsBuilder.build();
@@ -1127,20 +1127,20 @@ public final class PluginDescriptionFile {
         if (map.get("default-permission") != null) {
             try {
                 defaultPerm = PermissionDefault.getByName(map.get("default-permission").toString());
-            } catch (ClassCastException ex) {
+            } catch (final ClassCastException ex) {
                 throw new InvalidDescriptionException(ex, "default-permission is of wrong type");
-            } catch (IllegalArgumentException ex) {
+            } catch (final IllegalArgumentException ex) {
                 throw new InvalidDescriptionException(ex, "default-permission is not a valid choice");
             }
         }
 
         if (map.get("awareness") instanceof Iterable) {
-            Set<PluginAwareness> awareness = new HashSet<PluginAwareness>();
+            final Set<PluginAwareness> awareness = new HashSet<PluginAwareness>();
             try {
-                for (Object o : (Iterable<?>) map.get("awareness")) {
+                for (final Object o : (Iterable<?>) map.get("awareness")) {
                     awareness.add((PluginAwareness) o);
                 }
-            } catch (ClassCastException ex) {
+            } catch (final ClassCastException ex) {
                 throw new InvalidDescriptionException(ex, "awareness has wrong type");
             }
             this.awareness = ImmutableSet.copyOf(awareness);
@@ -1151,12 +1151,12 @@ public final class PluginDescriptionFile {
         }
 
         if (map.get("libraries") != null) {
-            ImmutableList.Builder<String> contributorsBuilder = ImmutableList.builder();
+            final ImmutableList.Builder<String> contributorsBuilder = ImmutableList.builder();
             try {
-                for (Object o : (Iterable<?>) map.get("libraries")) {
+                for (final Object o : (Iterable<?>) map.get("libraries")) {
                     contributorsBuilder.add(o.toString());
                 }
-            } catch (ClassCastException ex) {
+            } catch (final ClassCastException ex) {
                 throw new InvalidDescriptionException(ex, "libraries are of wrong type");
             }
             libraries = contributorsBuilder.build();
@@ -1166,7 +1166,7 @@ public final class PluginDescriptionFile {
 
         try {
             lazyPermissions = (Map<?, ?>) map.get("permissions");
-        } catch (ClassCastException ex) {
+        } catch (final ClassCastException ex) {
             throw new InvalidDescriptionException(ex, "permissions are of the wrong type");
         }
 
@@ -1187,9 +1187,9 @@ public final class PluginDescriptionFile {
             for (final Object entry : (Iterable<?>) value) {
                 builder.add(entry.toString().replace(' ', '_'));
             }
-        } catch (ClassCastException ex) {
+        } catch (final ClassCastException ex) {
             throw new InvalidDescriptionException(ex, key + " is of wrong type");
-        } catch (NullPointerException ex) {
+        } catch (final NullPointerException ex) {
             throw new InvalidDescriptionException(ex, "invalid " + key + " format");
         }
         return builder.build();
@@ -1197,7 +1197,7 @@ public final class PluginDescriptionFile {
 
     @NotNull
     private Map<String, Object> saveMap() {
-        Map<String, Object> map = new HashMap<String, Object>();
+        final Map<String, Object> map = new HashMap<String, Object>();
 
         map.put("name", name);
         if (provides != null) {
@@ -1254,7 +1254,7 @@ public final class PluginDescriptionFile {
     }
 
     @NotNull
-    private Map<?, ?> asMap(@NotNull Object object) throws InvalidDescriptionException {
+    private Map<?, ?> asMap(@NotNull final Object object) throws InvalidDescriptionException {
         if (object instanceof Map) {
             return (Map<?, ?>) object;
         }
diff --git a/src/main/java/org/bukkit/plugin/PluginLoader.java b/src/main/java/org/bukkit/plugin/PluginLoader.java
index a11515b81575fc42c771a218a81fea8f05d2289d..8d70b2bfa83bd91834047a6cf2f3f5ec0756d310 100644
--- a/src/main/java/org/bukkit/plugin/PluginLoader.java
+++ b/src/main/java/org/bukkit/plugin/PluginLoader.java
@@ -91,7 +91,7 @@ public interface PluginLoader {
      */
     @Deprecated(forRemoval = true)
     // provide default to allow other PluginLoader implementations to work
-    default public void disablePlugin(@NotNull Plugin plugin, boolean closeClassloader) {
+    default public void disablePlugin(@NotNull final Plugin plugin, final boolean closeClassloader) {
         disablePlugin(plugin);
     }
     // Paper end - close Classloader on disable
diff --git a/src/main/java/org/bukkit/plugin/PluginLogger.java b/src/main/java/org/bukkit/plugin/PluginLogger.java
index 1e0eed8dcb9cce410aad02472e5f1adfa70f6586..07c7955736c6ca50ed291d197049eaa4680ebd9c 100644
--- a/src/main/java/org/bukkit/plugin/PluginLogger.java
+++ b/src/main/java/org/bukkit/plugin/PluginLogger.java
@@ -20,16 +20,16 @@ public class PluginLogger extends Logger {
      *
      * @param context A reference to the plugin
      */
-    public PluginLogger(@NotNull Plugin context) {
+    public PluginLogger(@NotNull final Plugin context) {
         super(context.getClass().getCanonicalName(), null);
-        String prefix = context.getDescription().getPrefix();
+        final String prefix = context.getDescription().getPrefix();
         pluginName = prefix != null ? "[" + prefix + "] " : "[" + context.getDescription().getName() + "] ";
         setParent(context.getServer().getLogger());
         setLevel(Level.ALL);
     }
 
     @Override
-    public void log(@NotNull LogRecord logRecord) {
+    public void log(@NotNull final LogRecord logRecord) {
         logRecord.setMessage(pluginName + logRecord.getMessage());
         super.log(logRecord);
     }
diff --git a/src/main/java/org/bukkit/plugin/PluginManager.java b/src/main/java/org/bukkit/plugin/PluginManager.java
index efc04803a1eab01053a1f003d6feb2b712165d69..5ecdba5f7f33271dbed975d4c124b2774aec48c0 100644
--- a/src/main/java/org/bukkit/plugin/PluginManager.java
+++ b/src/main/java/org/bukkit/plugin/PluginManager.java
@@ -173,7 +173,7 @@ public interface PluginManager {
      * @deprecated Classloader is always closed by upstream now.
      */
     @Deprecated(forRemoval = true)
-    public default void disablePlugin(@NotNull Plugin plugin, boolean closeClassloader) {
+    public default void disablePlugin(@NotNull final Plugin plugin, final boolean closeClassloader) {
         this.disablePlugin(plugin);
     }
     // Paper end - close Classloader on disable
diff --git a/src/main/java/org/bukkit/plugin/RegisteredServiceProvider.java b/src/main/java/org/bukkit/plugin/RegisteredServiceProvider.java
index e92458d4f3c9abe9dc55c693f03216f880284db1..a4863ca2ee6f852ebb3f7369d71fc61060c81b23 100644
--- a/src/main/java/org/bukkit/plugin/RegisteredServiceProvider.java
+++ b/src/main/java/org/bukkit/plugin/RegisteredServiceProvider.java
@@ -14,7 +14,7 @@ public class RegisteredServiceProvider<T> implements Comparable<RegisteredServic
     private final T provider;
     private final ServicePriority priority;
 
-    public RegisteredServiceProvider(@NotNull Class<T> service, @NotNull T provider, @NotNull ServicePriority priority, @NotNull Plugin plugin) {
+    public RegisteredServiceProvider(@NotNull final Class<T> service, @NotNull final T provider, @NotNull final ServicePriority priority, @NotNull final Plugin plugin) {
         this.service = service;
         this.plugin = plugin;
         this.provider = provider;
@@ -42,7 +42,7 @@ public class RegisteredServiceProvider<T> implements Comparable<RegisteredServic
     }
 
     @Override
-    public int compareTo(@NotNull RegisteredServiceProvider<?> other) {
+    public int compareTo(@NotNull final RegisteredServiceProvider<?> other) {
         if (priority.ordinal() == other.getPriority().ordinal()) {
             return 0;
         } else {
diff --git a/src/main/java/org/bukkit/plugin/SimplePluginManager.java b/src/main/java/org/bukkit/plugin/SimplePluginManager.java
index 9d826cae3b1bc5848c584ba062c91ddd8a7a3bbc..627b645521bafa81f76d738e583aae472c9d8f2e 100644
--- a/src/main/java/org/bukkit/plugin/SimplePluginManager.java
+++ b/src/main/java/org/bukkit/plugin/SimplePluginManager.java
@@ -59,7 +59,7 @@ public final class SimplePluginManager implements PluginManager {
     private final Map<Boolean, Map<Permissible, Boolean>> defSubs = new HashMap<Boolean, Map<Permissible, Boolean>>();
     private final boolean useTimings = false;
 
-    public SimplePluginManager(@NotNull Server instance, @NotNull SimpleCommandMap commandMap) {
+    public SimplePluginManager(@NotNull final Server instance, @NotNull final SimpleCommandMap commandMap) {
         server = instance;
         this.commandMap = commandMap;
 
@@ -75,30 +75,30 @@ public final class SimplePluginManager implements PluginManager {
      *     valid PluginLoader
      */
     @Override
-    public void registerInterface(@NotNull Class<? extends PluginLoader> loader) throws IllegalArgumentException {
-        PluginLoader instance;
+    public void registerInterface(@NotNull final Class<? extends PluginLoader> loader) throws IllegalArgumentException {
+        final PluginLoader instance;
 
         if (PluginLoader.class.isAssignableFrom(loader)) {
-            Constructor<? extends PluginLoader> constructor;
+            final Constructor<? extends PluginLoader> constructor;
 
             try {
                 constructor = loader.getConstructor(Server.class);
                 instance = constructor.newInstance(server);
-            } catch (NoSuchMethodException ex) {
-                String className = loader.getName();
+            } catch (final NoSuchMethodException ex) {
+                final String className = loader.getName();
 
                 throw new IllegalArgumentException(String.format("Class %s does not have a public %s(Server) constructor", className, className), ex);
-            } catch (Exception ex) {
+            } catch (final Exception ex) {
                 throw new IllegalArgumentException(String.format("Unexpected exception %s while attempting to construct a new instance of %s", ex.getClass().getName(), loader.getName()), ex);
             }
         } else {
             throw new IllegalArgumentException(String.format("Class %s does not implement interface PluginLoader", loader.getName()));
         }
 
-        Pattern[] patterns = instance.getPluginFileFilters();
+        final Pattern[] patterns = instance.getPluginFileFilters();
 
         synchronized (this) {
-            for (Pattern pattern : patterns) {
+            for (final Pattern pattern : patterns) {
                 fileAssociations.put(pattern, instance);
             }
         }
@@ -112,7 +112,7 @@ public final class SimplePluginManager implements PluginManager {
      */
     @Override
     @NotNull
-    public Plugin[] loadPlugins(@NotNull File directory) {
+    public Plugin[] loadPlugins(@NotNull final File directory) {
         // Paper start - extra jars
         return this.loadPlugins(directory, java.util.Collections.emptyList());
     }
@@ -122,28 +122,28 @@ public final class SimplePluginManager implements PluginManager {
         Preconditions.checkArgument(directory != null, "Directory cannot be null");
         Preconditions.checkArgument(directory.isDirectory(), "Directory must be a directory");
 
-        List<Plugin> result = new ArrayList<Plugin>();
+        final List<Plugin> result = new ArrayList<Plugin>();
 
         if (!(server.getUpdateFolder().isEmpty())) {
             updateDirectory = new File(directory, server.getUpdateFolder());
         }
 
-        Map<String, File> plugins = new HashMap<String, File>();
-        Set<String> loadedPlugins = new HashSet<String>();
-        Map<String, String> pluginsProvided = new HashMap<>();
-        Map<String, Collection<String>> dependencies = new HashMap<String, Collection<String>>();
-        Map<String, Collection<String>> softDependencies = new HashMap<String, Collection<String>>();
+        final Map<String, File> plugins = new HashMap<String, File>();
+        final Set<String> loadedPlugins = new HashSet<String>();
+        final Map<String, String> pluginsProvided = new HashMap<>();
+        final Map<String, Collection<String>> dependencies = new HashMap<String, Collection<String>>();
+        final Map<String, Collection<String>> softDependencies = new HashMap<String, Collection<String>>();
 
         // This is where it figures out all possible plugins
         // Paper start - extra jars
         final List<File> pluginJars = new ArrayList<>(java.util.Arrays.asList(directory.listFiles()));
         pluginJars.addAll(extraPluginJars);
-        for (File file : pluginJars) {
+        for (final File file : pluginJars) {
             if (file.getName().startsWith(".") && !extraPluginJars.contains(file)) continue; // Don't load plugin if the file name starts with a dot, except if it's a extra plugin jar.
             // Paper end
             PluginLoader loader = null;
             for (final Map.Entry<Pattern, PluginLoader> entry : fileAssociations.entrySet()) {
-                Matcher match = entry.getKey().matcher(file.getName());
+                final Matcher match = entry.getKey().matcher(file.getName());
                 if (match.find()) {
                     loader = entry.getValue();
                 }
@@ -154,7 +154,7 @@ public final class SimplePluginManager implements PluginManager {
             PluginDescriptionFile description = null;
             try {
                 description = loader.getPluginDescription(file);
-                String name = description.getName();
+                final String name = description.getName();
                 if (name.equalsIgnoreCase("bukkit") || name.equalsIgnoreCase("minecraft") || name.equalsIgnoreCase("mojang")) {
                     server.getLogger().log(Level.SEVERE, "Could not load '" + file.getPath() + "' in folder '" + file.getParentFile().getPath() + "': Restricted Name"); // Paper
                     continue;
@@ -162,12 +162,12 @@ public final class SimplePluginManager implements PluginManager {
                     server.getLogger().log(Level.SEVERE, "Could not load '" + file.getPath() + "' in folder '" + file.getParentFile().getPath() + "': uses the space-character (0x20) in its name"); // Paper
                     continue;
                 }
-            } catch (InvalidDescriptionException ex) {
+            } catch (final InvalidDescriptionException ex) {
                 server.getLogger().log(Level.SEVERE, "Could not load '" + file.getPath() + "' in folder '" + file.getParentFile().getPath() + "'", ex); // Paper
                 continue;
             }
 
-            File replacedFile = plugins.put(description.getName(), file);
+            final File replacedFile = plugins.put(description.getName(), file);
             if (replacedFile != null) {
                 server.getLogger().severe(String.format(
                     "Ambiguous plugin name `%s' for files `%s' and `%s' in `%s'",
@@ -178,7 +178,7 @@ public final class SimplePluginManager implements PluginManager {
                 ));
             }
 
-            String removedProvided = pluginsProvided.remove(description.getName());
+            final String removedProvided = pluginsProvided.remove(description.getName());
             if (removedProvided != null) {
                 server.getLogger().warning(String.format(
                         "Ambiguous plugin name `%s'. It is also provided by `%s'",
@@ -187,8 +187,8 @@ public final class SimplePluginManager implements PluginManager {
                 ));
             }
 
-            for (String provided : description.getProvides()) {
-                File pluginFile = plugins.get(provided);
+            for (final String provided : description.getProvides()) {
+                final File pluginFile = plugins.get(provided);
                 if (pluginFile != null) {
                     server.getLogger().warning(String.format(
                             "`%s provides `%s' while this is also the name of `%s' in `%s'",
@@ -198,7 +198,7 @@ public final class SimplePluginManager implements PluginManager {
                             file.getParentFile().getPath() // Paper
                     ));
                 } else {
-                    String replacedPlugin = pluginsProvided.put(provided, description.getName());
+                    final String replacedPlugin = pluginsProvided.put(provided, description.getName());
                     if (replacedPlugin != null) {
                         server.getLogger().warning(String.format(
                                 "`%s' is provided by both `%s' and `%s'",
@@ -210,7 +210,7 @@ public final class SimplePluginManager implements PluginManager {
                 }
             }
 
-            Collection<String> softDependencySet = description.getSoftDepend();
+            final Collection<String> softDependencySet = description.getSoftDepend();
             if (softDependencySet != null && !softDependencySet.isEmpty()) {
                 if (softDependencies.containsKey(description.getName())) {
                     // Duplicates do not matter, they will be removed together if applicable
@@ -219,28 +219,28 @@ public final class SimplePluginManager implements PluginManager {
                     softDependencies.put(description.getName(), new LinkedList<String>(softDependencySet));
                 }
 
-                for (String depend : softDependencySet) {
+                for (final String depend : softDependencySet) {
                     dependencyGraph.putEdge(description.getName(), depend);
                 }
             }
 
-            Collection<String> dependencySet = description.getDepend();
+            final Collection<String> dependencySet = description.getDepend();
             if (dependencySet != null && !dependencySet.isEmpty()) {
                 dependencies.put(description.getName(), new LinkedList<String>(dependencySet));
 
-                for (String depend : dependencySet) {
+                for (final String depend : dependencySet) {
                     dependencyGraph.putEdge(description.getName(), depend);
                 }
             }
 
-            Collection<String> loadBeforeSet = description.getLoadBefore();
+            final Collection<String> loadBeforeSet = description.getLoadBefore();
             if (loadBeforeSet != null && !loadBeforeSet.isEmpty()) {
-                for (String loadBeforeTarget : loadBeforeSet) {
+                for (final String loadBeforeTarget : loadBeforeSet) {
                     if (softDependencies.containsKey(loadBeforeTarget)) {
                         softDependencies.get(loadBeforeTarget).add(description.getName());
                     } else {
                         // softDependencies is never iterated, so 'ghost' plugins aren't an issue
-                        Collection<String> shortSoftDependency = new LinkedList<String>();
+                        final Collection<String> shortSoftDependency = new LinkedList<String>();
                         shortSoftDependency.add(description.getName());
                         softDependencies.put(loadBeforeTarget, shortSoftDependency);
                     }
@@ -255,15 +255,15 @@ public final class SimplePluginManager implements PluginManager {
             Iterator<Map.Entry<String, File>> pluginIterator = plugins.entrySet().iterator();
 
             while (pluginIterator.hasNext()) {
-                Map.Entry<String, File> entry = pluginIterator.next();
-                String plugin = entry.getKey();
+                final Map.Entry<String, File> entry = pluginIterator.next();
+                final String plugin = entry.getKey();
 
                 if (dependencies.containsKey(plugin)) {
-                    Iterator<String> dependencyIterator = dependencies.get(plugin).iterator();
+                    final Iterator<String> dependencyIterator = dependencies.get(plugin).iterator();
                     final Set<String> missingHardDependencies = new HashSet<>(dependencies.get(plugin).size()); // Paper - list all missing hard depends
 
                     while (dependencyIterator.hasNext()) {
-                        String dependency = dependencyIterator.next();
+                        final String dependency = dependencyIterator.next();
 
                         // Dependency loaded
                         if (loadedPlugins.contains(dependency)) {
@@ -294,10 +294,10 @@ public final class SimplePluginManager implements PluginManager {
                     }
                 }
                 if (softDependencies.containsKey(plugin)) {
-                    Iterator<String> softDependencyIterator = softDependencies.get(plugin).iterator();
+                    final Iterator<String> softDependencyIterator = softDependencies.get(plugin).iterator();
 
                     while (softDependencyIterator.hasNext()) {
-                        String softDependency = softDependencyIterator.next();
+                        final String softDependency = softDependencyIterator.next();
 
                         // Soft depend is no longer around
                         if (!plugins.containsKey(softDependency) && !pluginsProvided.containsKey(softDependency)) {
@@ -311,13 +311,13 @@ public final class SimplePluginManager implements PluginManager {
                 }
                 if (!(dependencies.containsKey(plugin) || softDependencies.containsKey(plugin)) && plugins.containsKey(plugin)) {
                     // We're clear to load, no more soft or hard dependencies left
-                    File file = plugins.get(plugin);
+                    final File file = plugins.get(plugin);
                     pluginIterator.remove();
                     pluginsProvided.values().removeIf(s -> s.equals(plugin)); // Paper - remove provided plugins
                     missingDependency = false;
 
                     try {
-                        Plugin loadedPlugin = loadPlugin(file);
+                        final Plugin loadedPlugin = loadPlugin(file);
                         if (loadedPlugin != null) {
                             result.add(loadedPlugin);
                             loadedPlugins.add(loadedPlugin.getName());
@@ -326,7 +326,7 @@ public final class SimplePluginManager implements PluginManager {
                             server.getLogger().log(Level.SEVERE, "Could not load '" + file.getPath() + "' in folder '" + file.getParentFile().getPath() + "'"); // Paper
                         }
                         continue;
-                    } catch (InvalidPluginException ex) {
+                    } catch (final InvalidPluginException ex) {
                         server.getLogger().log(Level.SEVERE, "Could not load '" + file.getPath() + "' in folder '" + file.getParentFile().getPath() + "'", ex); // Paper
                     }
                 }
@@ -338,17 +338,17 @@ public final class SimplePluginManager implements PluginManager {
                 pluginIterator = plugins.entrySet().iterator();
 
                 while (pluginIterator.hasNext()) {
-                    Map.Entry<String, File> entry = pluginIterator.next();
-                    String plugin = entry.getKey();
+                    final Map.Entry<String, File> entry = pluginIterator.next();
+                    final String plugin = entry.getKey();
 
                     if (!dependencies.containsKey(plugin)) {
                         softDependencies.remove(plugin);
                         missingDependency = false;
-                        File file = entry.getValue();
+                        final File file = entry.getValue();
                         pluginIterator.remove();
 
                         try {
-                            Plugin loadedPlugin = loadPlugin(file);
+                            final Plugin loadedPlugin = loadPlugin(file);
                             if (loadedPlugin != null) {
                                 result.add(loadedPlugin);
                                 loadedPlugins.add(loadedPlugin.getName());
@@ -357,7 +357,7 @@ public final class SimplePluginManager implements PluginManager {
                                 server.getLogger().log(Level.SEVERE, "Could not load '" + file.getPath() + "' in folder '" + file.getParentFile().getPath() + "'"); // Paper
                             }
                             break;
-                        } catch (InvalidPluginException ex) {
+                        } catch (final InvalidPluginException ex) {
                             server.getLogger().log(Level.SEVERE, "Could not load '" + file.getPath() + "' in folder '" + file.getParentFile().getPath() + "'", ex); // Paper
                         }
                     }
@@ -366,10 +366,10 @@ public final class SimplePluginManager implements PluginManager {
                 if (missingDependency) {
                     softDependencies.clear();
                     dependencies.clear();
-                    Iterator<File> failedPluginIterator = plugins.values().iterator();
+                    final Iterator<File> failedPluginIterator = plugins.values().iterator();
 
                     while (failedPluginIterator.hasNext()) {
-                        File file = failedPluginIterator.next();
+                        final File file = failedPluginIterator.next();
                         failedPluginIterator.remove();
                         server.getLogger().log(Level.SEVERE, "Could not load '" + file.getPath() + "' in folder '" + file.getParentFile().getPath() + "': circular dependency detected"); // Paper
                     }
@@ -402,11 +402,11 @@ public final class SimplePluginManager implements PluginManager {
         Plugin result = null;
 
         for (final Map.Entry<Pattern, PluginLoader> entry : fileAssociations.entrySet()) {
-            String name = file.getName();
-            Matcher match = entry.getKey().matcher(name);
+            final String name = file.getName();
+            final Matcher match = entry.getKey().matcher(name);
 
             if (match.find()) {
-                PluginLoader loader = entry.getValue();
+                final PluginLoader loader = entry.getValue();
 
                 result = loader.loadPlugin(file);
             }
@@ -415,7 +415,7 @@ public final class SimplePluginManager implements PluginManager {
         if (result != null) {
             plugins.add(result);
             lookupNames.put(result.getDescription().getName().toLowerCase(java.util.Locale.ENGLISH), result); // Paper
-            for (String provided : result.getDescription().getProvides()) {
+            for (final String provided : result.getDescription().getProvides()) {
                 lookupNames.putIfAbsent(provided.toLowerCase(java.util.Locale.ENGLISH), result); // Paper
             }
         }
@@ -429,47 +429,47 @@ public final class SimplePluginManager implements PluginManager {
      * @param file
      * @throws InvalidPluginException
      */
-    private @NotNull File checkUpdate(@NotNull File file) throws InvalidPluginException {
+    private @NotNull File checkUpdate(@NotNull final File file) throws InvalidPluginException {
         if (updateDirectory == null || !updateDirectory.isDirectory()) {
             return file;
         }
-        PluginLoader pluginLoader = getPluginLoader(file);
+        final PluginLoader pluginLoader = getPluginLoader(file);
         try {
-            String pluginName = pluginLoader.getPluginDescription(file).getName();
-            for (File updateFile : updateDirectory.listFiles()) {
+            final String pluginName = pluginLoader.getPluginDescription(file).getName();
+            for (final File updateFile : updateDirectory.listFiles()) {
                 if (!updateFile.isFile()) continue;
-                PluginLoader updatePluginLoader = getPluginLoader(updateFile);
+                final PluginLoader updatePluginLoader = getPluginLoader(updateFile);
                 if (updatePluginLoader == null) continue;
-                String updatePluginName;
+                final String updatePluginName;
                 try {
                      updatePluginName = updatePluginLoader.getPluginDescription(updateFile).getName();
                      // We failed to load this data for some reason, so, we'll skip over this
-                } catch (InvalidDescriptionException ex) {
+                } catch (final InvalidDescriptionException ex) {
                     continue;
                 }
                 if (!pluginName.equals(updatePluginName)) continue;
                 try {
                     java.nio.file.Files.copy(updateFile.toPath(), file.toPath(), java.nio.file.StandardCopyOption.REPLACE_EXISTING);
-                } catch (java.io.IOException exception) {
+                } catch (final java.io.IOException exception) {
                     server.getLogger().log(Level.SEVERE, "Could not copy '" + updateFile.getPath() + "' to '" + file.getPath() + "' in update plugin process", exception);
                     continue;
                 }
-                File newName = new File(file.getParentFile(), updateFile.getName());
+                final File newName = new File(file.getParentFile(), updateFile.getName());
                 file.renameTo(newName);
                 updateFile.delete();
                 return newName;
             }
         }
-        catch (InvalidDescriptionException e) {
+        catch (final InvalidDescriptionException e) {
             throw new InvalidPluginException(e);
         }
         return file;
     }
 
     @Nullable
-    private PluginLoader getPluginLoader(@NotNull File file) {
+    private PluginLoader getPluginLoader(@NotNull final File file) {
         for (final Map.Entry<Pattern, PluginLoader> entry : fileAssociations.entrySet()) {
-            Matcher match = entry.getKey().matcher(file.getName());
+            final Matcher match = entry.getKey().matcher(file.getName());
             if (match.find()) {
                 return entry.getValue();
             }
@@ -488,7 +488,7 @@ public final class SimplePluginManager implements PluginManager {
      */
     @Override
     @Nullable
-    public synchronized Plugin getPlugin(@NotNull String name) {
+    public synchronized Plugin getPlugin(@NotNull final String name) {
         return lookupNames.get(name.replace(' ', '_').toLowerCase(java.util.Locale.ENGLISH)); // Paper
     }
 
@@ -507,8 +507,8 @@ public final class SimplePluginManager implements PluginManager {
      * @return true if the plugin is enabled, otherwise false
      */
     @Override
-    public boolean isPluginEnabled(@NotNull String name) {
-        Plugin plugin = getPlugin(name);
+    public boolean isPluginEnabled(@NotNull final String name) {
+        final Plugin plugin = getPlugin(name);
 
         return isPluginEnabled(plugin);
     }
@@ -520,7 +520,7 @@ public final class SimplePluginManager implements PluginManager {
      * @return true if the plugin is enabled, otherwise false
      */
     @Override
-    public synchronized boolean isPluginEnabled(@Nullable Plugin plugin) { // Paper - synchronize
+    public synchronized boolean isPluginEnabled(@Nullable final Plugin plugin) { // Paper - synchronize
         if ((plugin != null) && (plugins.contains(plugin))) {
             return plugin.isEnabled();
         } else {
@@ -531,7 +531,7 @@ public final class SimplePluginManager implements PluginManager {
     @Override
     public synchronized void enablePlugin(@NotNull final Plugin plugin) { // Paper - synchronize
         if (!plugin.isEnabled()) {
-            List<Command> pluginCommands = PluginCommandYamlParser.parse(plugin);
+            final List<Command> pluginCommands = PluginCommandYamlParser.parse(plugin);
 
             if (!pluginCommands.isEmpty()) {
                 commandMap.registerAll(plugin.getDescription().getName(), pluginCommands);
@@ -539,7 +539,7 @@ public final class SimplePluginManager implements PluginManager {
 
             try {
                 plugin.getPluginLoader().enablePlugin(plugin);
-            } catch (Throwable ex) {
+            } catch (final Throwable ex) {
                 handlePluginException("Error occurred (in the plugin loader) while enabling "
                         + plugin.getDescription().getFullName() + " (Is it up to date?)", ex, plugin);
             }
@@ -550,7 +550,7 @@ public final class SimplePluginManager implements PluginManager {
 
     @Override
     public void disablePlugins() {
-        Plugin[] plugins = getPlugins();
+        final Plugin[] plugins = getPlugins();
         for (int i = plugins.length - 1; i >= 0; i--) {
             disablePlugin(plugins[i]);
         }
@@ -566,7 +566,7 @@ public final class SimplePluginManager implements PluginManager {
      * @deprecated Classloader is always closed by upstream now.
      */
     @Deprecated(forRemoval = true)
-    public void disablePlugins(boolean closeClassloaders) {
+    public void disablePlugins(final boolean closeClassloaders) {
         this.disablePlugins();
     }
     // Paper end
@@ -576,28 +576,28 @@ public final class SimplePluginManager implements PluginManager {
         if (plugin.isEnabled()) {
             try {
                 plugin.getPluginLoader().disablePlugin(plugin);
-            } catch (Throwable ex) {
+            } catch (final Throwable ex) {
                 handlePluginException("Error occurred (in the plugin loader) while disabling "
                         + plugin.getDescription().getFullName() + " (Is it up to date?)", ex, plugin); // Paper
             }
 
             try {
                 server.getScheduler().cancelTasks(plugin);
-            } catch (Throwable ex) {
+            } catch (final Throwable ex) {
                 handlePluginException("Error occurred (in the plugin loader) while cancelling tasks for "
                         + plugin.getDescription().getFullName() + " (Is it up to date?)", ex, plugin); // Paper
             }
 
             try {
                 server.getServicesManager().unregisterAll(plugin);
-            } catch (Throwable ex) {
+            } catch (final Throwable ex) {
                 handlePluginException("Error occurred (in the plugin loader) while unregistering services for "
                         + plugin.getDescription().getFullName() + " (Is it up to date?)", ex, plugin); // Paper
             }
 
             try {
                 HandlerList.unregisterAll(plugin);
-            } catch (Throwable ex) {
+            } catch (final Throwable ex) {
                 handlePluginException("Error occurred (in the plugin loader) while unregistering events for "
                         + plugin.getDescription().getFullName() + " (Is it up to date?)", ex, plugin); // Paper
             }
@@ -605,23 +605,23 @@ public final class SimplePluginManager implements PluginManager {
             try {
                 server.getMessenger().unregisterIncomingPluginChannel(plugin);
                 server.getMessenger().unregisterOutgoingPluginChannel(plugin);
-            } catch (Throwable ex) {
+            } catch (final Throwable ex) {
                 handlePluginException("Error occurred (in the plugin loader) while unregistering plugin channels for "
                         + plugin.getDescription().getFullName() + " (Is it up to date?)", ex, plugin); // Paper
             }
 
             try {
-                for (World world : server.getWorlds()) {
+                for (final World world : server.getWorlds()) {
                     world.removePluginChunkTickets(plugin);
                 }
-            } catch (Throwable ex) {
+            } catch (final Throwable ex) {
                 server.getLogger().log(Level.SEVERE, "Error occurred (in the plugin loader) while removing chunk tickets for " + plugin.getDescription().getFullName() + " (Is it up to date?)", ex);
             }
         }
     }
 
     // Paper start
-    private void handlePluginException(String msg, Throwable ex, Plugin plugin) {
+    private void handlePluginException(final String msg, final Throwable ex, final Plugin plugin) {
         server.getLogger().log(Level.SEVERE, msg, ex);
         callEvent(new com.destroystokyo.paper.event.server.ServerExceptionEvent(new com.destroystokyo.paper.exception.ServerPluginEnableDisableException(msg, ex, plugin)));
     }
@@ -641,7 +641,7 @@ public final class SimplePluginManager implements PluginManager {
             defaultPerms.get(Boolean.FALSE).clear();
         }
     }
-    private void fireEvent(@NotNull Event event) { callEvent(event); } // Paper - support old method incase plugin uses reflection
+    private void fireEvent(@NotNull final Event event) { callEvent(event); } // Paper - support old method incase plugin uses reflection
 
     /**
      * Calls an event with the given details.
@@ -649,7 +649,7 @@ public final class SimplePluginManager implements PluginManager {
      * @param event Event details
      */
     @Override
-    public void callEvent(@NotNull Event event) {
+    public void callEvent(@NotNull final Event event) {
         // Paper - replace callEvent by merging to below method
         if (event.isAsynchronous() && server.isPrimaryThread()) {
             throw new IllegalStateException(event.getEventName() + " may only be triggered asynchronously.");
@@ -657,18 +657,18 @@ public final class SimplePluginManager implements PluginManager {
             throw new IllegalStateException(event.getEventName() + " may only be triggered synchronously.");
         }
 
-        HandlerList handlers = event.getHandlers();
-        RegisteredListener[] listeners = handlers.getRegisteredListeners();
+        final HandlerList handlers = event.getHandlers();
+        final RegisteredListener[] listeners = handlers.getRegisteredListeners();
 
-        for (RegisteredListener registration : listeners) {
+        for (final RegisteredListener registration : listeners) {
             if (!registration.getPlugin().isEnabled()) {
                 continue;
             }
 
             try {
                 registration.callEvent(event);
-            } catch (AuthorNagException ex) {
-                Plugin plugin = registration.getPlugin();
+            } catch (final AuthorNagException ex) {
+                final Plugin plugin = registration.getPlugin();
 
                 if (plugin.isNaggable()) {
                     plugin.setNaggable(false);
@@ -680,9 +680,9 @@ public final class SimplePluginManager implements PluginManager {
                             ex.getMessage()
                             ));
                 }
-            } catch (Throwable ex) {
+            } catch (final Throwable ex) {
                 // Paper start - error reporting
-                String msg = "Could not pass event " + event.getEventName() + " to " + registration.getPlugin().getDescription().getFullName();
+                final String msg = "Could not pass event " + event.getEventName() + " to " + registration.getPlugin().getDescription().getFullName();
                 server.getLogger().log(Level.SEVERE, msg, ex);
                 if (!(event instanceof com.destroystokyo.paper.event.server.ServerExceptionEvent)) { // We don't want to cause an endless event loop
                     callEvent(new com.destroystokyo.paper.event.server.ServerExceptionEvent(new com.destroystokyo.paper.exception.ServerEventException(msg, ex, registration.getPlugin(), registration.getListener(), event)));
@@ -693,19 +693,19 @@ public final class SimplePluginManager implements PluginManager {
     }
 
     @Override
-    public void registerEvents(@NotNull Listener listener, @NotNull Plugin plugin) {
+    public void registerEvents(@NotNull final Listener listener, @NotNull final Plugin plugin) {
         if (!plugin.isEnabled()) {
             throw new IllegalPluginAccessException("Plugin attempted to register " + listener + " while not enabled");
         }
 
-        for (Map.Entry<Class<? extends Event>, Set<RegisteredListener>> entry : plugin.getPluginLoader().createRegisteredListeners(listener, plugin).entrySet()) {
+        for (final Map.Entry<Class<? extends Event>, Set<RegisteredListener>> entry : plugin.getPluginLoader().createRegisteredListeners(listener, plugin).entrySet()) {
             getEventListeners(getRegistrationClass(entry.getKey())).registerAll(entry.getValue());
         }
 
     }
 
     @Override
-    public void registerEvent(@NotNull Class<? extends Event> event, @NotNull Listener listener, @NotNull EventPriority priority, @NotNull EventExecutor executor, @NotNull Plugin plugin) {
+    public void registerEvent(@NotNull final Class<? extends Event> event, @NotNull final Listener listener, @NotNull final EventPriority priority, @NotNull final EventExecutor executor, @NotNull final Plugin plugin) {
         registerEvent(event, listener, priority, executor, plugin, false);
     }
 
@@ -722,7 +722,7 @@ public final class SimplePluginManager implements PluginManager {
      *     cancelled
      */
     @Override
-    public void registerEvent(@NotNull Class<? extends Event> event, @NotNull Listener listener, @NotNull EventPriority priority, @NotNull EventExecutor executor, @NotNull Plugin plugin, boolean ignoreCancelled) {
+    public void registerEvent(@NotNull final Class<? extends Event> event, @NotNull final Listener listener, @NotNull final EventPriority priority, @NotNull EventExecutor executor, @NotNull final Plugin plugin, final boolean ignoreCancelled) {
         Preconditions.checkArgument(listener != null, "Listener cannot be null");
         Preconditions.checkArgument(priority != null, "Priority cannot be null");
         Preconditions.checkArgument(executor != null, "Executor cannot be null");
@@ -741,9 +741,9 @@ public final class SimplePluginManager implements PluginManager {
     }
 
     @NotNull
-    private HandlerList getEventListeners(@NotNull Class<? extends Event> type) {
+    private HandlerList getEventListeners(@NotNull final Class<? extends Event> type) {
         try {
-            Method method = getRegistrationClass(type).getDeclaredMethod("getHandlerList");
+            final Method method = getRegistrationClass(type).getDeclaredMethod("getHandlerList");
             method.setAccessible(true);
 
             if (!Modifier.isStatic(method.getModifiers())) {
@@ -751,17 +751,17 @@ public final class SimplePluginManager implements PluginManager {
             }
 
             return (HandlerList) method.invoke(null);
-        } catch (Exception e) {
+        } catch (final Exception e) {
             throw new IllegalPluginAccessException("Error while registering listener for event type " + type + ": " + e);
         }
     }
 
     @NotNull
-    private Class<? extends Event> getRegistrationClass(@NotNull Class<? extends Event> clazz) {
+    private Class<? extends Event> getRegistrationClass(@NotNull final Class<? extends Event> clazz) {
         try {
             clazz.getDeclaredMethod("getHandlerList");
             return clazz;
-        } catch (NoSuchMethodException e) {
+        } catch (final NoSuchMethodException e) {
             if (clazz.getSuperclass() != null
                     && !clazz.getSuperclass().equals(Event.class)
                     && Event.class.isAssignableFrom(clazz.getSuperclass())) {
@@ -774,18 +774,18 @@ public final class SimplePluginManager implements PluginManager {
 
     @Override
     @Nullable
-    public Permission getPermission(@NotNull String name) {
+    public Permission getPermission(@NotNull final String name) {
         return permissions.get(name.toLowerCase(java.util.Locale.ENGLISH));
     }
 
     @Override
-    public void addPermission(@NotNull Permission perm) {
+    public void addPermission(@NotNull final Permission perm) {
         addPermission(perm, true);
     }
 
     @Deprecated
-    public void addPermission(@NotNull Permission perm, boolean dirty) {
-        String name = perm.getName().toLowerCase(java.util.Locale.ENGLISH);
+    public void addPermission(@NotNull final Permission perm, final boolean dirty) {
+        final String name = perm.getName().toLowerCase(java.util.Locale.ENGLISH);
 
         if (permissions.containsKey(name)) {
             throw new IllegalArgumentException("The permission " + name + " is already defined!");
@@ -797,22 +797,22 @@ public final class SimplePluginManager implements PluginManager {
 
     @Override
     @NotNull
-    public Set<Permission> getDefaultPermissions(boolean op) {
+    public Set<Permission> getDefaultPermissions(final boolean op) {
         return ImmutableSet.copyOf(defaultPerms.get(Boolean.valueOf(op)));
     }
 
     @Override
-    public void removePermission(@NotNull Permission perm) {
+    public void removePermission(@NotNull final Permission perm) {
         removePermission(perm.getName());
     }
 
     @Override
-    public void removePermission(@NotNull String name) {
+    public void removePermission(@NotNull final String name) {
         permissions.remove(name.toLowerCase(java.util.Locale.ENGLISH));
     }
 
     @Override
-    public void recalculatePermissionDefaults(@NotNull Permission perm) {
+    public void recalculatePermissionDefaults(@NotNull final Permission perm) {
         if (perm != null && permissions.containsKey(perm.getName().toLowerCase(java.util.Locale.ENGLISH))) {
             defaultPerms.get(Boolean.TRUE).remove(perm);
             defaultPerms.get(Boolean.FALSE).remove(perm);
@@ -821,7 +821,7 @@ public final class SimplePluginManager implements PluginManager {
         }
     }
 
-    private void calculatePermissionDefault(@NotNull Permission perm, boolean dirty) {
+    private void calculatePermissionDefault(@NotNull final Permission perm, final boolean dirty) {
         if ((perm.getDefault() == PermissionDefault.OP) || (perm.getDefault() == PermissionDefault.TRUE)) {
             defaultPerms.get(Boolean.TRUE).add(perm);
             if (dirty) {
@@ -842,17 +842,17 @@ public final class SimplePluginManager implements PluginManager {
         dirtyPermissibles(false);
     }
 
-    private void dirtyPermissibles(boolean op) {
-        Set<Permissible> permissibles = getDefaultPermSubscriptions(op);
+    private void dirtyPermissibles(final boolean op) {
+        final Set<Permissible> permissibles = getDefaultPermSubscriptions(op);
 
-        for (Permissible p : permissibles) {
+        for (final Permissible p : permissibles) {
             p.recalculatePermissions();
         }
     }
 
     @Override
-    public void subscribeToPermission(@NotNull String permission, @NotNull Permissible permissible) {
-        String name = permission.toLowerCase(java.util.Locale.ENGLISH);
+    public void subscribeToPermission(@NotNull final String permission, @NotNull final Permissible permissible) {
+        final String name = permission.toLowerCase(java.util.Locale.ENGLISH);
         Map<Permissible, Boolean> map = permSubs.get(name);
 
         if (map == null) {
@@ -864,9 +864,9 @@ public final class SimplePluginManager implements PluginManager {
     }
 
     @Override
-    public void unsubscribeFromPermission(@NotNull String permission, @NotNull Permissible permissible) {
-        String name = permission.toLowerCase(java.util.Locale.ENGLISH);
-        Map<Permissible, Boolean> map = permSubs.get(name);
+    public void unsubscribeFromPermission(@NotNull final String permission, @NotNull final Permissible permissible) {
+        final String name = permission.toLowerCase(java.util.Locale.ENGLISH);
+        final Map<Permissible, Boolean> map = permSubs.get(name);
 
         if (map != null) {
             map.remove(permissible);
@@ -879,9 +879,9 @@ public final class SimplePluginManager implements PluginManager {
 
     @Override
     @NotNull
-    public Set<Permissible> getPermissionSubscriptions(@NotNull String permission) {
-        String name = permission.toLowerCase(java.util.Locale.ENGLISH);
-        Map<Permissible, Boolean> map = permSubs.get(name);
+    public Set<Permissible> getPermissionSubscriptions(@NotNull final String permission) {
+        final String name = permission.toLowerCase(java.util.Locale.ENGLISH);
+        final Map<Permissible, Boolean> map = permSubs.get(name);
 
         if (map == null) {
             return ImmutableSet.of();
@@ -891,7 +891,7 @@ public final class SimplePluginManager implements PluginManager {
     }
 
     @Override
-    public void subscribeToDefaultPerms(boolean op, @NotNull Permissible permissible) {
+    public void subscribeToDefaultPerms(final boolean op, @NotNull final Permissible permissible) {
         Map<Permissible, Boolean> map = defSubs.get(Boolean.valueOf(op));
 
         if (map == null) {
@@ -903,8 +903,8 @@ public final class SimplePluginManager implements PluginManager {
     }
 
     @Override
-    public void unsubscribeFromDefaultPerms(boolean op, @NotNull Permissible permissible) {
-        Map<Permissible, Boolean> map = defSubs.get(Boolean.valueOf(op));
+    public void unsubscribeFromDefaultPerms(final boolean op, @NotNull final Permissible permissible) {
+        final Map<Permissible, Boolean> map = defSubs.get(Boolean.valueOf(op));
 
         if (map != null) {
             map.remove(permissible);
@@ -917,8 +917,8 @@ public final class SimplePluginManager implements PluginManager {
 
     @Override
     @NotNull
-    public Set<Permissible> getDefaultPermSubscriptions(boolean op) {
-        Map<Permissible, Boolean> map = defSubs.get(Boolean.valueOf(op));
+    public Set<Permissible> getDefaultPermSubscriptions(final boolean op) {
+        final Map<Permissible, Boolean> map = defSubs.get(Boolean.valueOf(op));
 
         if (map == null) {
             return ImmutableSet.of();
@@ -933,16 +933,16 @@ public final class SimplePluginManager implements PluginManager {
         return new HashSet<Permission>(permissions.values());
     }
 
-    public boolean isTransitiveDepend(@NotNull PluginDescriptionFile plugin, @NotNull PluginDescriptionFile depend) {
+    public boolean isTransitiveDepend(@NotNull final PluginDescriptionFile plugin, @NotNull final PluginDescriptionFile depend) {
         Preconditions.checkArgument(plugin != null, "plugin");
         Preconditions.checkArgument(depend != null, "depend");
 
         if (dependencyGraph.nodes().contains(plugin.getName())) {
-            Set<String> reachableNodes = Graphs.reachableNodes(dependencyGraph, plugin.getName());
+            final Set<String> reachableNodes = Graphs.reachableNodes(dependencyGraph, plugin.getName());
             if (reachableNodes.contains(depend.getName())) {
                 return true;
             }
-            for (String provided : depend.getProvides()) {
+            for (final String provided : depend.getProvides()) {
                 if (reachableNodes.contains(provided)) {
                     return true;
                 }
@@ -961,7 +961,7 @@ public final class SimplePluginManager implements PluginManager {
      *
      * @param use True if per event timing code should be used
      */
-    public void useTimings(boolean use) {
+    public void useTimings(final boolean use) {
         co.aikar.timings.Timings.setTimingsEnabled(use); // Paper
     }
 
diff --git a/src/main/java/org/bukkit/plugin/SimpleServicesManager.java b/src/main/java/org/bukkit/plugin/SimpleServicesManager.java
index 2cc7ea23460575d573cba412c049e510338b5fed..a220501c07787755b5aaab71b80036a02ab50cca 100644
--- a/src/main/java/org/bukkit/plugin/SimpleServicesManager.java
+++ b/src/main/java/org/bukkit/plugin/SimpleServicesManager.java
@@ -36,7 +36,7 @@ public class SimpleServicesManager implements ServicesManager {
      * @param priority priority of the provider
      */
     @Override
-    public <T> void register(@NotNull Class<T> service, @NotNull T provider, @NotNull Plugin plugin, @NotNull ServicePriority priority) {
+    public <T> void register(@NotNull final Class<T> service, @NotNull final T provider, @NotNull final Plugin plugin, @NotNull final ServicePriority priority) {
         RegisteredServiceProvider<T> registeredProvider = null;
         synchronized (providers) {
             List<RegisteredServiceProvider<?>> registered = providers.get(service);
@@ -48,7 +48,7 @@ public class SimpleServicesManager implements ServicesManager {
             registeredProvider = new RegisteredServiceProvider<T>(service, provider, priority, plugin);
 
             // Insert the provider into the collection, much more efficient big O than sort
-            int position = Collections.binarySearch(registered, registeredProvider);
+            final int position = Collections.binarySearch(registered, registeredProvider);
             if (position < 0) {
                 registered.add(-(position + 1), registeredProvider);
             } else {
@@ -65,28 +65,28 @@ public class SimpleServicesManager implements ServicesManager {
      * @param plugin The plugin
      */
     @Override
-    public void unregisterAll(@NotNull Plugin plugin) {
-        ArrayList<ServiceUnregisterEvent> unregisteredEvents = new ArrayList<ServiceUnregisterEvent>();
+    public void unregisterAll(@NotNull final Plugin plugin) {
+        final ArrayList<ServiceUnregisterEvent> unregisteredEvents = new ArrayList<ServiceUnregisterEvent>();
         synchronized (providers) {
-            Iterator<Map.Entry<Class<?>, List<RegisteredServiceProvider<?>>>> it = providers.entrySet().iterator();
+            final Iterator<Map.Entry<Class<?>, List<RegisteredServiceProvider<?>>>> it = providers.entrySet().iterator();
 
             try {
                 while (it.hasNext()) {
-                    Map.Entry<Class<?>, List<RegisteredServiceProvider<?>>> entry = it.next();
-                    Iterator<RegisteredServiceProvider<?>> it2 = entry.getValue().iterator();
+                    final Map.Entry<Class<?>, List<RegisteredServiceProvider<?>>> entry = it.next();
+                    final Iterator<RegisteredServiceProvider<?>> it2 = entry.getValue().iterator();
 
                     try {
                         // Removed entries that are from this plugin
 
                         while (it2.hasNext()) {
-                            RegisteredServiceProvider<?> registered = it2.next();
+                            final RegisteredServiceProvider<?> registered = it2.next();
 
                             if (registered.getPlugin().equals(plugin)) {
                                 it2.remove();
                                 unregisteredEvents.add(new ServiceUnregisterEvent(registered));
                             }
                         }
-                    } catch (NoSuchElementException e) { // Why does Java suck
+                    } catch (final NoSuchElementException e) { // Why does Java suck
                     }
 
                     // Get rid of the empty list
@@ -94,9 +94,9 @@ public class SimpleServicesManager implements ServicesManager {
                         it.remove();
                     }
                 }
-            } catch (NoSuchElementException e) {}
+            } catch (final NoSuchElementException e) {}
         }
-        for (ServiceUnregisterEvent event : unregisteredEvents) {
+        for (final ServiceUnregisterEvent event : unregisteredEvents) {
             Bukkit.getServer().getPluginManager().callEvent(event);
         }
     }
@@ -108,34 +108,34 @@ public class SimpleServicesManager implements ServicesManager {
      * @param provider The service provider implementation
      */
     @Override
-    public void unregister(@NotNull Class<?> service, @NotNull Object provider) {
-        ArrayList<ServiceUnregisterEvent> unregisteredEvents = new ArrayList<ServiceUnregisterEvent>();
+    public void unregister(@NotNull final Class<?> service, @NotNull final Object provider) {
+        final ArrayList<ServiceUnregisterEvent> unregisteredEvents = new ArrayList<ServiceUnregisterEvent>();
         synchronized (providers) {
-            Iterator<Map.Entry<Class<?>, List<RegisteredServiceProvider<?>>>> it = providers.entrySet().iterator();
+            final Iterator<Map.Entry<Class<?>, List<RegisteredServiceProvider<?>>>> it = providers.entrySet().iterator();
 
             try {
                 while (it.hasNext()) {
-                    Map.Entry<Class<?>, List<RegisteredServiceProvider<?>>> entry = it.next();
+                    final Map.Entry<Class<?>, List<RegisteredServiceProvider<?>>> entry = it.next();
 
                     // We want a particular service
                     if (entry.getKey() != service) {
                         continue;
                     }
 
-                    Iterator<RegisteredServiceProvider<?>> it2 = entry.getValue().iterator();
+                    final Iterator<RegisteredServiceProvider<?>> it2 = entry.getValue().iterator();
 
                     try {
                         // Removed entries that are from this plugin
 
                         while (it2.hasNext()) {
-                            RegisteredServiceProvider<?> registered = it2.next();
+                            final RegisteredServiceProvider<?> registered = it2.next();
 
                             if (registered.getProvider() == provider) {
                                 it2.remove();
                                 unregisteredEvents.add(new ServiceUnregisterEvent(registered));
                             }
                         }
-                    } catch (NoSuchElementException e) { // Why does Java suck
+                    } catch (final NoSuchElementException e) { // Why does Java suck
                     }
 
                     // Get rid of the empty list
@@ -143,9 +143,9 @@ public class SimpleServicesManager implements ServicesManager {
                         it.remove();
                     }
                 }
-            } catch (NoSuchElementException e) {}
+            } catch (final NoSuchElementException e) {}
         }
-        for (ServiceUnregisterEvent event : unregisteredEvents) {
+        for (final ServiceUnregisterEvent event : unregisteredEvents) {
             Bukkit.getServer().getPluginManager().callEvent(event);
         }
     }
@@ -156,28 +156,28 @@ public class SimpleServicesManager implements ServicesManager {
      * @param provider The service provider implementation
      */
     @Override
-    public void unregister(@NotNull Object provider) {
-        ArrayList<ServiceUnregisterEvent> unregisteredEvents = new ArrayList<ServiceUnregisterEvent>();
+    public void unregister(@NotNull final Object provider) {
+        final ArrayList<ServiceUnregisterEvent> unregisteredEvents = new ArrayList<ServiceUnregisterEvent>();
         synchronized (providers) {
-            Iterator<Map.Entry<Class<?>, List<RegisteredServiceProvider<?>>>> it = providers.entrySet().iterator();
+            final Iterator<Map.Entry<Class<?>, List<RegisteredServiceProvider<?>>>> it = providers.entrySet().iterator();
 
             try {
                 while (it.hasNext()) {
-                    Map.Entry<Class<?>, List<RegisteredServiceProvider<?>>> entry = it.next();
-                    Iterator<RegisteredServiceProvider<?>> it2 = entry.getValue().iterator();
+                    final Map.Entry<Class<?>, List<RegisteredServiceProvider<?>>> entry = it.next();
+                    final Iterator<RegisteredServiceProvider<?>> it2 = entry.getValue().iterator();
 
                     try {
                         // Removed entries that are from this plugin
 
                         while (it2.hasNext()) {
-                            RegisteredServiceProvider<?> registered = it2.next();
+                            final RegisteredServiceProvider<?> registered = it2.next();
 
                             if (registered.getProvider().equals(provider)) {
                                 it2.remove();
                                 unregisteredEvents.add(new ServiceUnregisterEvent(registered));
                             }
                         }
-                    } catch (NoSuchElementException e) { // Why does Java suck
+                    } catch (final NoSuchElementException e) { // Why does Java suck
                     }
 
                     // Get rid of the empty list
@@ -185,9 +185,9 @@ public class SimpleServicesManager implements ServicesManager {
                         it.remove();
                     }
                 }
-            } catch (NoSuchElementException e) {}
+            } catch (final NoSuchElementException e) {}
         }
-        for (ServiceUnregisterEvent event : unregisteredEvents) {
+        for (final ServiceUnregisterEvent event : unregisteredEvents) {
             Bukkit.getServer().getPluginManager().callEvent(event);
         }
     }
@@ -202,9 +202,9 @@ public class SimpleServicesManager implements ServicesManager {
      */
     @Override
     @Nullable
-    public <T> T load(@NotNull Class<T> service) {
+    public <T> T load(@NotNull final Class<T> service) {
         synchronized (providers) {
-            List<RegisteredServiceProvider<?>> registered = providers.get(service);
+            final List<RegisteredServiceProvider<?>> registered = providers.get(service);
 
             if (registered == null) {
                 return null;
@@ -226,9 +226,9 @@ public class SimpleServicesManager implements ServicesManager {
     @Override
     @Nullable
     @SuppressWarnings("unchecked")
-    public <T> RegisteredServiceProvider<T> getRegistration(@NotNull Class<T> service) {
+    public <T> RegisteredServiceProvider<T> getRegistration(@NotNull final Class<T> service) {
         synchronized (providers) {
-            List<RegisteredServiceProvider<?>> registered = providers.get(service);
+            final List<RegisteredServiceProvider<?>> registered = providers.get(service);
 
             if (registered == null) {
                 return null;
@@ -247,11 +247,11 @@ public class SimpleServicesManager implements ServicesManager {
      */
     @Override
     @NotNull
-    public List<RegisteredServiceProvider<?>> getRegistrations(@NotNull Plugin plugin) {
-        ImmutableList.Builder<RegisteredServiceProvider<?>> ret = ImmutableList.builder();
+    public List<RegisteredServiceProvider<?>> getRegistrations(@NotNull final Plugin plugin) {
+        final ImmutableList.Builder<RegisteredServiceProvider<?>> ret = ImmutableList.builder();
         synchronized (providers) {
-            for (List<RegisteredServiceProvider<?>> registered : providers.values()) {
-                for (RegisteredServiceProvider<?> provider : registered) {
+            for (final List<RegisteredServiceProvider<?>> registered : providers.values()) {
+                for (final RegisteredServiceProvider<?> provider : registered) {
                     if (provider.getPlugin().equals(plugin)) {
                         ret.add(provider);
                     }
@@ -272,10 +272,10 @@ public class SimpleServicesManager implements ServicesManager {
     @Override
     @NotNull
     @SuppressWarnings("unchecked")
-    public <T> List<RegisteredServiceProvider<T>> getRegistrations(@NotNull Class<T> service) {
-        ImmutableList.Builder<RegisteredServiceProvider<T>> ret;
+    public <T> List<RegisteredServiceProvider<T>> getRegistrations(@NotNull final Class<T> service) {
+        final ImmutableList.Builder<RegisteredServiceProvider<T>> ret;
         synchronized (providers) {
-            List<RegisteredServiceProvider<?>> registered = providers.get(service);
+            final List<RegisteredServiceProvider<?>> registered = providers.get(service);
 
             if (registered == null) {
                 return ImmutableList.of();
@@ -283,7 +283,7 @@ public class SimpleServicesManager implements ServicesManager {
 
             ret = ImmutableList.builder();
 
-            for (RegisteredServiceProvider<?> provider : registered) {
+            for (final RegisteredServiceProvider<?> provider : registered) {
                 ret.add((RegisteredServiceProvider<T>) provider);
             }
 
@@ -313,7 +313,7 @@ public class SimpleServicesManager implements ServicesManager {
      * @return true if and only if there are registered providers
      */
     @Override
-    public <T> boolean isProvidedFor(@NotNull Class<T> service) {
+    public <T> boolean isProvidedFor(@NotNull final Class<T> service) {
         synchronized (providers) {
             return providers.containsKey(service);
         }
diff --git a/src/main/java/org/bukkit/plugin/TimedRegisteredListener.java b/src/main/java/org/bukkit/plugin/TimedRegisteredListener.java
index 1d76e30b82ca56bb4cf3b9a33f5a129ab829e3f0..085810a130700a58eaaca04c2768928af6caff19 100644
--- a/src/main/java/org/bukkit/plugin/TimedRegisteredListener.java
+++ b/src/main/java/org/bukkit/plugin/TimedRegisteredListener.java
@@ -21,26 +21,26 @@ public class TimedRegisteredListener extends RegisteredListener {
     }
 
     @Override
-    public void callEvent(@NotNull Event event) throws EventException {
+    public void callEvent(@NotNull final Event event) throws EventException {
         if (event.isAsynchronous()) {
             super.callEvent(event);
             return;
         }
         count++;
-        Class<? extends Event> newEventClass = event.getClass();
+        final Class<? extends Event> newEventClass = event.getClass();
         if (this.eventClass == null) {
             this.eventClass = newEventClass;
         } else if (!this.eventClass.equals(newEventClass)) {
             multiple = true;
             this.eventClass = getCommonSuperclass(newEventClass, this.eventClass).asSubclass(Event.class);
         }
-        long start = System.nanoTime();
+        final long start = System.nanoTime();
         super.callEvent(event);
         totalTime += System.nanoTime() - start;
     }
 
     @NotNull
-    private static Class<?> getCommonSuperclass(@NotNull Class<?> class1, @NotNull Class<?> class2) {
+    private static Class<?> getCommonSuperclass(@NotNull Class<?> class1, @NotNull final Class<?> class2) {
         while (!class1.isAssignableFrom(class2)) {
             class1 = class1.getSuperclass();
         }
diff --git a/src/main/java/org/bukkit/plugin/java/JavaPlugin.java b/src/main/java/org/bukkit/plugin/java/JavaPlugin.java
index 371b32f6371d637c8ac0d47a172eed191f0452b4..4a15c2fddf7bde7551ba6b6548d934ddfe3e8840 100644
--- a/src/main/java/org/bukkit/plugin/java/JavaPlugin.java
+++ b/src/main/java/org/bukkit/plugin/java/JavaPlugin.java
@@ -146,7 +146,7 @@ public abstract class JavaPlugin extends PluginBase {
      * @see ClassLoader#getResourceAsStream(String)
      */
     @Nullable
-    protected final Reader getTextResource(@NotNull String file) {
+    protected final Reader getTextResource(@NotNull final String file) {
         final InputStream in = getResource(file);
 
         return in == null ? null : new InputStreamReader(in, Charsets.UTF_8);
@@ -168,7 +168,7 @@ public abstract class JavaPlugin extends PluginBase {
     public void saveConfig() {
         try {
             getConfig().save(configFile);
-        } catch (IOException ex) {
+        } catch (final IOException ex) {
             logger.log(Level.SEVERE, "Could not save config to " + configFile, ex);
         }
     }
@@ -181,20 +181,20 @@ public abstract class JavaPlugin extends PluginBase {
     }
 
     @Override
-    public void saveResource(@NotNull String resourcePath, boolean replace) {
+    public void saveResource(@NotNull String resourcePath, final boolean replace) {
         if (resourcePath == null || resourcePath.isEmpty()) {
             throw new IllegalArgumentException("ResourcePath cannot be null or empty");
         }
 
         resourcePath = resourcePath.replace('\\', '/');
-        InputStream in = getResource(resourcePath);
+        final InputStream in = getResource(resourcePath);
         if (in == null) {
             throw new IllegalArgumentException("The embedded resource '" + resourcePath + "' cannot be found in " + file);
         }
 
-        File outFile = new File(dataFolder, resourcePath);
-        int lastIndex = resourcePath.lastIndexOf('/');
-        File outDir = new File(dataFolder, resourcePath.substring(0, Math.max(lastIndex, 0)));
+        final File outFile = new File(dataFolder, resourcePath);
+        final int lastIndex = resourcePath.lastIndexOf('/');
+        final File outDir = new File(dataFolder, resourcePath.substring(0, Math.max(lastIndex, 0)));
 
         if (!outDir.exists()) {
             outDir.mkdirs();
@@ -202,8 +202,8 @@ public abstract class JavaPlugin extends PluginBase {
 
         try {
             if (!outFile.exists() || replace) {
-                OutputStream out = new FileOutputStream(outFile);
-                byte[] buf = new byte[1024];
+                final OutputStream out = new FileOutputStream(outFile);
+                final byte[] buf = new byte[1024];
                 int len;
                 while ((len = in.read(buf)) > 0) {
                     out.write(buf, 0, len);
@@ -213,29 +213,29 @@ public abstract class JavaPlugin extends PluginBase {
             } else {
                 logger.log(Level.WARNING, "Could not save " + outFile.getName() + " to " + outFile + " because " + outFile.getName() + " already exists.");
             }
-        } catch (IOException ex) {
+        } catch (final IOException ex) {
             logger.log(Level.SEVERE, "Could not save " + outFile.getName() + " to " + outFile, ex);
         }
     }
 
     @Nullable
     @Override
-    public InputStream getResource(@NotNull String filename) {
+    public InputStream getResource(@NotNull final String filename) {
         if (filename == null) {
             throw new IllegalArgumentException("Filename cannot be null");
         }
 
         try {
-            URL url = getClassLoader().getResource(filename);
+            final URL url = getClassLoader().getResource(filename);
 
             if (url == null) {
                 return null;
             }
 
-            URLConnection connection = url.openConnection();
+            final URLConnection connection = url.openConnection();
             connection.setUseCaches(false);
             return connection.getInputStream();
-        } catch (IOException ex) {
+        } catch (final IOException ex) {
             return null;
         }
     }
@@ -268,7 +268,7 @@ public abstract class JavaPlugin extends PluginBase {
     }
 
 
-    final void init(@NotNull PluginLoader loader, @NotNull Server server, @NotNull PluginDescriptionFile description, @NotNull File dataFolder, @NotNull File file, @NotNull ClassLoader classLoader) {
+    final void init(@NotNull final PluginLoader loader, @NotNull final Server server, @NotNull final PluginDescriptionFile description, @NotNull final File dataFolder, @NotNull final File file, @NotNull final ClassLoader classLoader) {
         this.loader = loader;
         this.server = server;
         this.file = file;
@@ -287,7 +287,7 @@ public abstract class JavaPlugin extends PluginBase {
      * {@inheritDoc}
      */
     @Override
-    public boolean onCommand(@NotNull CommandSender sender, @NotNull Command command, @NotNull String label, @NotNull String[] args) {
+    public boolean onCommand(@NotNull final CommandSender sender, @NotNull final Command command, @NotNull final String label, @NotNull final String[] args) {
         return false;
     }
 
@@ -296,7 +296,7 @@ public abstract class JavaPlugin extends PluginBase {
      */
     @Override
     @Nullable
-    public List<String> onTabComplete(@NotNull CommandSender sender, @NotNull Command command, @NotNull String alias, @NotNull String[] args) {
+    public List<String> onTabComplete(@NotNull final CommandSender sender, @NotNull final Command command, @NotNull final String alias, @NotNull final String[] args) {
         return null;
     }
 
@@ -309,8 +309,8 @@ public abstract class JavaPlugin extends PluginBase {
      * @return the plugin command if found, otherwise null
      */
     @Nullable
-    public PluginCommand getCommand(@NotNull String name) {
-        String alias = name.toLowerCase(java.util.Locale.ENGLISH);
+    public PluginCommand getCommand(@NotNull final String name) {
+        final String alias = name.toLowerCase(java.util.Locale.ENGLISH);
         PluginCommand command = getServer().getPluginCommand(alias);
 
         if (command == null || command.getPlugin() != this) {
@@ -335,13 +335,13 @@ public abstract class JavaPlugin extends PluginBase {
 
     @Nullable
     @Override
-    public ChunkGenerator getDefaultWorldGenerator(@NotNull String worldName, @Nullable String id) {
+    public ChunkGenerator getDefaultWorldGenerator(@NotNull final String worldName, @Nullable final String id) {
         return null;
     }
 
     @Nullable
     @Override
-    public BiomeProvider getDefaultBiomeProvider(@NotNull String worldName, @Nullable String id) {
+    public BiomeProvider getDefaultBiomeProvider(@NotNull final String worldName, @Nullable final String id) {
         return null;
     }
 
@@ -351,7 +351,7 @@ public abstract class JavaPlugin extends PluginBase {
     }
 
     @Override
-    public final void setNaggable(boolean canNag) {
+    public final void setNaggable(final boolean canNag) {
         this.naggable = canNag;
     }
 
@@ -391,7 +391,7 @@ public abstract class JavaPlugin extends PluginBase {
      *     extend the class
      */
     @NotNull
-    public static <T extends JavaPlugin> T getPlugin(@NotNull Class<T> clazz) {
+    public static <T extends JavaPlugin> T getPlugin(@NotNull final Class<T> clazz) {
         Preconditions.checkArgument(clazz != null, "Null class cannot have a plugin");
         if (!JavaPlugin.class.isAssignableFrom(clazz)) {
             throw new IllegalArgumentException(clazz + " does not extend " + JavaPlugin.class);
@@ -400,7 +400,7 @@ public abstract class JavaPlugin extends PluginBase {
         if (!(cl instanceof PluginClassLoader)) {
             throw new IllegalArgumentException(clazz + " is not initialized by " + PluginClassLoader.class);
         }
-        JavaPlugin plugin = ((PluginClassLoader) cl).plugin;
+        final JavaPlugin plugin = ((PluginClassLoader) cl).plugin;
         if (plugin == null) {
             throw new IllegalStateException("Cannot get plugin for " + clazz + " from a static initializer");
         }
@@ -420,13 +420,13 @@ public abstract class JavaPlugin extends PluginBase {
      *     given JavaPlugin
      */
     @NotNull
-    public static JavaPlugin getProvidingPlugin(@NotNull Class<?> clazz) {
+    public static JavaPlugin getProvidingPlugin(@NotNull final Class<?> clazz) {
         Preconditions.checkArgument(clazz != null, "Null class cannot have a plugin");
         final ClassLoader cl = clazz.getClassLoader();
         if (!(cl instanceof PluginClassLoader)) {
             throw new IllegalArgumentException(clazz + " is not provided by " + PluginClassLoader.class);
         }
-        JavaPlugin plugin = ((PluginClassLoader) cl).plugin;
+        final JavaPlugin plugin = ((PluginClassLoader) cl).plugin;
         if (plugin == null) {
             throw new IllegalStateException("Cannot get plugin for " + clazz + " from a static initializer");
         }
diff --git a/src/main/java/org/bukkit/plugin/java/JavaPluginLoader.java b/src/main/java/org/bukkit/plugin/java/JavaPluginLoader.java
index 5c23d0b1e4ec778d860e35b8834bea417b766fdb..e59dd098b8d8d13848f3d1f33391c4234dde7ddc 100644
--- a/src/main/java/org/bukkit/plugin/java/JavaPluginLoader.java
+++ b/src/main/java/org/bukkit/plugin/java/JavaPluginLoader.java
@@ -65,14 +65,14 @@ public final class JavaPluginLoader implements PluginLoader {
      * @param instance the server instance
      */
     @Deprecated
-    public JavaPluginLoader(@NotNull Server instance) {
+    public JavaPluginLoader(@NotNull final Server instance) {
         Preconditions.checkArgument(instance != null, "Server cannot be null");
         server = instance;
 
         LibraryLoader libraryLoader = null;
         try {
             libraryLoader = new LibraryLoader(server.getLogger());
-        } catch (NoClassDefFoundError ex) {
+        } catch (final NoClassDefFoundError ex) {
             // Provided depends were not added back
             server.getLogger().warning("Could not initialize LibraryLoader (missing dependencies?)");
         }
@@ -91,7 +91,7 @@ public final class JavaPluginLoader implements PluginLoader {
         final PluginDescriptionFile description;
         try {
             description = getPluginDescription(file);
-        } catch (InvalidDescriptionException ex) {
+        } catch (final InvalidDescriptionException ex) {
             throw new InvalidPluginException(ex);
         }
 
@@ -133,9 +133,9 @@ public final class JavaPluginLoader implements PluginLoader {
             ));
         }
 
-        Set<String> missingHardDependencies = new HashSet<>(description.getDepend().size()); // Paper - list all missing hard depends
+        final Set<String> missingHardDependencies = new HashSet<>(description.getDepend().size()); // Paper - list all missing hard depends
         for (final String pluginName : description.getDepend()) {
-            Plugin current = server.getPluginManager().getPlugin(pluginName);
+            final Plugin current = server.getPluginManager().getPlugin(pluginName);
 
             if (current == null) {
                 missingHardDependencies.add(pluginName); // Paper - list all missing hard depends
@@ -152,9 +152,9 @@ public final class JavaPluginLoader implements PluginLoader {
         final PluginClassLoader loader;
         try {
             loader = new PluginClassLoader(this, getClass().getClassLoader(), description, dataFolder, file, (libraryLoader != null) ? libraryLoader.createLoader(description) : null);
-        } catch (InvalidPluginException ex) {
+        } catch (final InvalidPluginException ex) {
             throw ex;
-        } catch (Throwable ex) {
+        } catch (final Throwable ex) {
             throw new InvalidPluginException(ex);
         }
 
@@ -165,7 +165,7 @@ public final class JavaPluginLoader implements PluginLoader {
 
     @Override
     @NotNull
-    public PluginDescriptionFile getPluginDescription(@NotNull File file) throws InvalidDescriptionException {
+    public PluginDescriptionFile getPluginDescription(@NotNull final File file) throws InvalidDescriptionException {
         Preconditions.checkArgument(file != null, "File cannot be null");
 
         JarFile jar = null;
@@ -173,7 +173,7 @@ public final class JavaPluginLoader implements PluginLoader {
 
         try {
             jar = new JarFile(file);
-            JarEntry entry = jar.getJarEntry("plugin.yml");
+            final JarEntry entry = jar.getJarEntry("plugin.yml");
 
             if (entry == null) {
                 throw new InvalidDescriptionException(new FileNotFoundException("Jar does not contain plugin.yml"));
@@ -183,21 +183,21 @@ public final class JavaPluginLoader implements PluginLoader {
 
             return new PluginDescriptionFile(stream);
 
-        } catch (IOException ex) {
+        } catch (final IOException ex) {
             throw new InvalidDescriptionException(ex);
-        } catch (YAMLException ex) {
+        } catch (final YAMLException ex) {
             throw new InvalidDescriptionException(ex);
         } finally {
             if (jar != null) {
                 try {
                     jar.close();
-                } catch (IOException e) {
+                } catch (final IOException e) {
                 }
             }
             if (stream != null) {
                 try {
                     stream.close();
-                } catch (IOException e) {
+                } catch (final IOException e) {
                 }
             }
         }
@@ -210,14 +210,14 @@ public final class JavaPluginLoader implements PluginLoader {
     }
 
     @Nullable
-    Class<?> getClassByName(final @NotNull String name, boolean resolve, @NotNull PluginDescriptionFile description) {
+    Class<?> getClassByName(final @NotNull String name, final boolean resolve, @NotNull final PluginDescriptionFile description) {
         // Paper start - prioritize self
         return getClassByName(name, resolve, description, null);
     }
-    @Nullable Class<?> getClassByName(final @NotNull String name, boolean resolve, @NotNull PluginDescriptionFile description, @Nullable PluginClassLoader requester) {
+    @Nullable Class<?> getClassByName(final @NotNull String name, final boolean resolve, @NotNull final PluginDescriptionFile description, @Nullable final PluginClassLoader requester) {
         // Paper end
         // Paper start - make MT safe
-        java.util.concurrent.locks.ReentrantReadWriteLock lock;
+        final java.util.concurrent.locks.ReentrantReadWriteLock lock;
         synchronized (classLoadLock) {
             lock = classLoadLock.computeIfAbsent(name, (x) -> new java.util.concurrent.locks.ReentrantReadWriteLock());
             classLoadLockCount.compute(name, (x, prev) -> Integer.valueOf(prev != null ? prev + 1 : 1));
@@ -227,14 +227,14 @@ public final class JavaPluginLoader implements PluginLoader {
             if (!DISABLE_CLASS_PRIORITIZATION && requester != null) {
                 try {
                 return requester.loadClass0(name, false, false, ((SimplePluginManager) server.getPluginManager()).isTransitiveDepend(description, requester.getDescription()));
-                } catch (ClassNotFoundException cnfe) {}
+                } catch (final ClassNotFoundException cnfe) {}
             }
             // Paper end
         // Paper end
-        for (PluginClassLoader loader : loaders) {
+        for (final PluginClassLoader loader : loaders) {
             try {
                 return loader.loadClass0(name, resolve, false, ((SimplePluginManager) server.getPluginManager()).isTransitiveDepend(description, loader.plugin.getDescription()));
-            } catch (ClassNotFoundException cnfe) {
+            } catch (final ClassNotFoundException cnfe) {
             }
         }
         // Paper start - make MT safe
@@ -255,34 +255,34 @@ public final class JavaPluginLoader implements PluginLoader {
 
     void setClass(@NotNull final String name, @NotNull final Class<?> clazz) {
         if (ConfigurationSerializable.class.isAssignableFrom(clazz)) {
-            Class<? extends ConfigurationSerializable> serializable = clazz.asSubclass(ConfigurationSerializable.class);
+            final Class<? extends ConfigurationSerializable> serializable = clazz.asSubclass(ConfigurationSerializable.class);
             ConfigurationSerialization.registerClass(serializable);
         }
     }
 
-    private void removeClass(@NotNull Class<?> clazz) {
+    private void removeClass(@NotNull final Class<?> clazz) {
         if (ConfigurationSerializable.class.isAssignableFrom(clazz)) {
-            Class<? extends ConfigurationSerializable> serializable = clazz.asSubclass(ConfigurationSerializable.class);
+            final Class<? extends ConfigurationSerializable> serializable = clazz.asSubclass(ConfigurationSerializable.class);
             ConfigurationSerialization.unregisterClass(serializable);
         }
     }
 
     @Override
     @NotNull
-    public Map<Class<? extends Event>, Set<RegisteredListener>> createRegisteredListeners(@NotNull Listener listener, @NotNull final Plugin plugin) {
+    public Map<Class<? extends Event>, Set<RegisteredListener>> createRegisteredListeners(@NotNull final Listener listener, @NotNull final Plugin plugin) {
         Preconditions.checkArgument(plugin != null, "Plugin can not be null");
         Preconditions.checkArgument(listener != null, "Listener can not be null");
 
-        boolean useTimings = server.getPluginManager().useTimings();
-        Map<Class<? extends Event>, Set<RegisteredListener>> ret = new HashMap<Class<? extends Event>, Set<RegisteredListener>>();
-        Set<Method> methods;
+        final boolean useTimings = server.getPluginManager().useTimings();
+        final Map<Class<? extends Event>, Set<RegisteredListener>> ret = new HashMap<Class<? extends Event>, Set<RegisteredListener>>();
+        final Set<Method> methods;
         try {
-            Method[] publicMethods = listener.getClass().getMethods();
-            Method[] privateMethods = listener.getClass().getDeclaredMethods();
+            final Method[] publicMethods = listener.getClass().getMethods();
+            final Method[] privateMethods = listener.getClass().getDeclaredMethods();
             methods = new HashSet<Method>(publicMethods.length + privateMethods.length, 1.0f);
             methods.addAll(Arrays.asList(publicMethods));
             methods.addAll(Arrays.asList(privateMethods));
-        } catch (NoClassDefFoundError e) {
+        } catch (final NoClassDefFoundError e) {
             plugin.getLogger().severe("Plugin " + plugin.getDescription().getFullName() + " has failed to register events for " + listener.getClass() + " because " + e.getMessage() + " does not exist.");
             return ret;
         }
@@ -311,8 +311,8 @@ public final class JavaPluginLoader implements PluginLoader {
             for (Class<?> clazz = eventClass; Event.class.isAssignableFrom(clazz); clazz = clazz.getSuperclass()) {
                 // This loop checks for extending deprecated events
                 if (clazz.getAnnotation(Deprecated.class) != null) {
-                    Warning warning = clazz.getAnnotation(Warning.class);
-                    WarningState warningState = server.getWarningState();
+                    final Warning warning = clazz.getAnnotation(Warning.class);
+                    final WarningState warningState = server.getWarningState();
                     if (!warningState.printFor(warning)) {
                         break;
                     }
@@ -330,7 +330,7 @@ public final class JavaPluginLoader implements PluginLoader {
                 }
             }
 
-            EventExecutor executor = new co.aikar.timings.TimedEventExecutor(EventExecutor.create(method, eventClass), plugin, method, eventClass); // Paper // Paper (Yes.) - Use factory method `EventExecutor.create()`
+            final EventExecutor executor = new co.aikar.timings.TimedEventExecutor(EventExecutor.create(method, eventClass), plugin, method, eventClass); // Paper // Paper (Yes.) - Use factory method `EventExecutor.create()`
             if (false) { // Spigot - RL handles useTimings check now
                 eventSet.add(new TimedRegisteredListener(listener, executor, eh.priority(), plugin, eh.ignoreCancelled()));
             } else {
@@ -354,9 +354,9 @@ public final class JavaPluginLoader implements PluginLoader {
             plugin.getLogger().info(enableMsg);
             // Paper end
 
-            JavaPlugin jPlugin = (JavaPlugin) plugin;
+            final JavaPlugin jPlugin = (JavaPlugin) plugin;
 
-            PluginClassLoader pluginLoader = (PluginClassLoader) jPlugin.getClassLoader();
+            final PluginClassLoader pluginLoader = (PluginClassLoader) jPlugin.getClassLoader();
 
             if (!loaders.contains(pluginLoader)) {
                 loaders.add(pluginLoader);
@@ -365,7 +365,7 @@ public final class JavaPluginLoader implements PluginLoader {
 
             try {
                 jPlugin.setEnabled(true);
-            } catch (Throwable ex) {
+            } catch (final Throwable ex) {
                 server.getLogger().log(Level.SEVERE, "Error occurred while enabling " + plugin.getDescription().getFullName() + " (Is it up to date?)", ex);
                 // Paper start - Disable plugins that fail to load
                 this.server.getPluginManager().disablePlugin(jPlugin);
@@ -380,37 +380,37 @@ public final class JavaPluginLoader implements PluginLoader {
     }
 
     @Override
-    public void disablePlugin(@NotNull Plugin plugin) {
+    public void disablePlugin(@NotNull final Plugin plugin) {
         Preconditions.checkArgument(plugin instanceof JavaPlugin, "Plugin is not associated with this PluginLoader");
 
         if (plugin.isEnabled()) {
-            String message = String.format("Disabling %s", plugin.getDescription().getFullName());
+            final String message = String.format("Disabling %s", plugin.getDescription().getFullName());
             plugin.getLogger().info(message);
 
             server.getPluginManager().callEvent(new PluginDisableEvent(plugin));
 
-            JavaPlugin jPlugin = (JavaPlugin) plugin;
-            ClassLoader cloader = jPlugin.getClassLoader();
+            final JavaPlugin jPlugin = (JavaPlugin) plugin;
+            final ClassLoader cloader = jPlugin.getClassLoader();
 
             try {
                 jPlugin.setEnabled(false);
-            } catch (Throwable ex) {
+            } catch (final Throwable ex) {
                 server.getLogger().log(Level.SEVERE, "Error occurred while disabling " + plugin.getDescription().getFullName() + " (Is it up to date?)", ex);
             }
 
             if (cloader instanceof PluginClassLoader) {
-                PluginClassLoader loader = (PluginClassLoader) cloader;
+                final PluginClassLoader loader = (PluginClassLoader) cloader;
                 loaders.remove(loader);
 
-                Collection<Class<?>> classes = loader.getClasses();
+                final Collection<Class<?>> classes = loader.getClasses();
 
-                for (Class<?> clazz : classes) {
+                for (final Class<?> clazz : classes) {
                     removeClass(clazz);
                 }
 
                 try {
                     loader.close();
-                } catch (IOException ex) {
+                } catch (final IOException ex) {
                     //
                     this.server.getLogger().log(Level.WARNING, "Error closing the PluginClassLoader for '" + plugin.getDescription().getFullName() + "'", ex); // Paper - log exception
                 }
diff --git a/src/main/java/org/bukkit/plugin/java/LibraryLoader.java b/src/main/java/org/bukkit/plugin/java/LibraryLoader.java
index b6159a10b0fb0b85d118e565d04f2d4163f39a82..3b5e547c706098fed89db84655296b5857b3e5fb 100644
--- a/src/main/java/org/bukkit/plugin/java/LibraryLoader.java
+++ b/src/main/java/org/bukkit/plugin/java/LibraryLoader.java
@@ -44,11 +44,11 @@ class LibraryLoader
     private final @NotNull DefaultRepositorySystemSession session;
     private final List<RemoteRepository> repositories;
 
-    public LibraryLoader(@NotNull Logger logger)
+    public LibraryLoader(@NotNull final Logger logger)
     {
         this.logger = logger;
 
-        DefaultServiceLocator locator = MavenRepositorySystemUtils.newServiceLocator();
+        final DefaultServiceLocator locator = MavenRepositorySystemUtils.newServiceLocator();
         locator.addService( RepositoryConnectorFactory.class, BasicRepositoryConnectorFactory.class );
         locator.addService( TransporterFactory.class, HttpTransporterFactory.class );
 
@@ -60,7 +60,7 @@ class LibraryLoader
         session.setTransferListener( new AbstractTransferListener()
         {
             @Override
-            public void transferStarted(@NotNull TransferEvent event) throws TransferCancelledException
+            public void transferStarted(@NotNull final TransferEvent event) throws TransferCancelledException
             {
                 logger.log( Level.INFO, "Downloading {0}", event.getResource().getRepositoryUrl() + event.getResource().getResourceName() );
             }
@@ -71,7 +71,7 @@ class LibraryLoader
     }
 
     @Nullable
-    public ClassLoader createLoader(@NotNull PluginDescriptionFile desc)
+    public ClassLoader createLoader(@NotNull final PluginDescriptionFile desc)
     {
         if ( desc.getLibraries().isEmpty() )
         {
@@ -82,34 +82,34 @@ class LibraryLoader
             desc.getName(), Integer.valueOf(desc.getLibraries().size())
         } );
 
-        List<Dependency> dependencies = new ArrayList<>();
-        for ( String library : desc.getLibraries() )
+        final List<Dependency> dependencies = new ArrayList<>();
+        for ( final String library : desc.getLibraries() )
         {
-            Artifact artifact = new DefaultArtifact( library );
-            Dependency dependency = new Dependency( artifact, null );
+            final Artifact artifact = new DefaultArtifact( library );
+            final Dependency dependency = new Dependency( artifact, null );
 
             dependencies.add( dependency );
         }
 
-        DependencyResult result;
+        final DependencyResult result;
         try
         {
             result = repository.resolveDependencies( session, new DependencyRequest( new CollectRequest( (Dependency) null, dependencies, repositories ), null ) );
-        } catch ( DependencyResolutionException ex )
+        } catch ( final DependencyResolutionException ex )
         {
             throw new RuntimeException( "Error resolving libraries", ex );
         }
 
-        List<URL> jarFiles = new ArrayList<>();
-        for ( ArtifactResult artifact : result.getArtifactResults() )
+        final List<URL> jarFiles = new ArrayList<>();
+        for ( final ArtifactResult artifact : result.getArtifactResults() )
         {
-            File file = artifact.getArtifact().getFile();
+            final File file = artifact.getArtifact().getFile();
 
-            URL url;
+            final URL url;
             try
             {
                 url = file.toURI().toURL();
-            } catch ( MalformedURLException ex )
+            } catch ( final MalformedURLException ex )
             {
                 throw new AssertionError( ex );
             }
@@ -121,7 +121,7 @@ class LibraryLoader
             } );
         }
 
-        URLClassLoader loader = new URLClassLoader( jarFiles.toArray(new URL[0]), getClass().getClassLoader() );
+        final URLClassLoader loader = new URLClassLoader( jarFiles.toArray(new URL[0]), getClass().getClassLoader() );
 
         return loader;
     }
diff --git a/src/main/java/org/bukkit/plugin/java/PluginClassLoader.java b/src/main/java/org/bukkit/plugin/java/PluginClassLoader.java
index 1d5a19af3191aaa774c94f52ba945954d3c18fbd..2e2c44e416ac450663fb7dc696b81cfe791afba6 100644
--- a/src/main/java/org/bukkit/plugin/java/PluginClassLoader.java
+++ b/src/main/java/org/bukkit/plugin/java/PluginClassLoader.java
@@ -50,7 +50,7 @@ public final class PluginClassLoader extends URLClassLoader { // Spigot
         ClassLoader.registerAsParallelCapable();
     }
 
-    PluginClassLoader(@NotNull final JavaPluginLoader loader, @Nullable final ClassLoader parent, @NotNull final PluginDescriptionFile description, @NotNull final File dataFolder, @NotNull final File file, @Nullable ClassLoader libraryLoader) throws IOException, InvalidPluginException, MalformedURLException {
+    PluginClassLoader(@NotNull final JavaPluginLoader loader, @Nullable final ClassLoader parent, @NotNull final PluginDescriptionFile description, @NotNull final File dataFolder, @NotNull final File file, @Nullable final ClassLoader libraryLoader) throws IOException, InvalidPluginException, MalformedURLException {
         super(file.getName(), new URL[] {file.toURI().toURL()}, parent); // Paper - rewrite LogEvents to contain source jar info
         Preconditions.checkArgument(loader != null, "Loader cannot be null");
 
@@ -66,32 +66,32 @@ public final class PluginClassLoader extends URLClassLoader { // Spigot
         this.logger = com.destroystokyo.paper.utils.PaperPluginLogger.getLogger(description); // Paper - Register logger early
 
         try {
-            Class<?> jarClass;
+            final Class<?> jarClass;
             try {
                 jarClass = Class.forName(description.getMain(), true, this);
-            } catch (ClassNotFoundException ex) {
+            } catch (final ClassNotFoundException ex) {
                 throw new InvalidPluginException("Cannot find main class `" + description.getMain() + "'", ex);
             }
 
-            Class<? extends JavaPlugin> pluginClass;
+            final Class<? extends JavaPlugin> pluginClass;
             try {
                 pluginClass = jarClass.asSubclass(JavaPlugin.class);
-            } catch (ClassCastException ex) {
+            } catch (final ClassCastException ex) {
                 throw new InvalidPluginException("main class `" + description.getMain() + "' does not extend JavaPlugin", ex);
             }
 
             plugin = pluginClass.newInstance();
-        } catch (IllegalAccessException ex) {
+        } catch (final IllegalAccessException ex) {
             throw new InvalidPluginException("No public constructor", ex);
-        } catch (InstantiationException ex) {
+        } catch (final InstantiationException ex) {
             throw new InvalidPluginException("Abnormal plugin type", ex);
         }
     }
 
     @Override
-    public URL getResource(String name) {
+    public URL getResource(final String name) {
         // Paper start
-        URL resource = findResource(name);
+        final URL resource = findResource(name);
         if (resource == null && libraryLoader != null) {
             return libraryLoader.getResource(name);
         }
@@ -100,9 +100,9 @@ public final class PluginClassLoader extends URLClassLoader { // Spigot
     }
 
     @Override
-    public @NotNull Enumeration<URL> getResources(String name) throws IOException {
+    public @NotNull Enumeration<URL> getResources(final String name) throws IOException {
         // Paper start
-        java.util.ArrayList<URL> resources = new java.util.ArrayList<>();
+        final java.util.ArrayList<URL> resources = new java.util.ArrayList<>();
         addEnumeration(resources, findResources(name));
         if (libraryLoader != null) {
             addEnumeration(resources, libraryLoader.getResources(name));
@@ -112,7 +112,7 @@ public final class PluginClassLoader extends URLClassLoader { // Spigot
     }
 
     // Paper start
-    private <T> void addEnumeration(java.util.@NotNull ArrayList<T> list, @NotNull Enumeration<T> enumeration) {
+    private <T> void addEnumeration(final java.util.@NotNull ArrayList<T> list, @NotNull final Enumeration<T> enumeration) {
         while (enumeration.hasMoreElements()) {
             list.add(enumeration.nextElement());
         }
@@ -120,36 +120,36 @@ public final class PluginClassLoader extends URLClassLoader { // Spigot
     // Paper end
 
     @Override
-    protected Class<?> loadClass(@NotNull String name, boolean resolve) throws ClassNotFoundException {
+    protected Class<?> loadClass(@NotNull final String name, final boolean resolve) throws ClassNotFoundException {
         return loadClass0(name, resolve, true, true);
     }
 
-    Class<?> loadClass0(@NotNull String name, boolean resolve, boolean checkGlobal, boolean checkLibraries) throws ClassNotFoundException {
+    Class<?> loadClass0(@NotNull final String name, final boolean resolve, final boolean checkGlobal, final boolean checkLibraries) throws ClassNotFoundException {
         try {
-            Class<?> result = super.loadClass(name, resolve);
+            final Class<?> result = super.loadClass(name, resolve);
 
             // SPIGOT-6749: Library classes will appear in the above, but we don't want to return them to other plugins
             if (checkGlobal || result.getClassLoader() == this) {
                 return result;
             }
-        } catch (ClassNotFoundException ex) {
+        } catch (final ClassNotFoundException ex) {
         }
 
         if (checkLibraries && libraryLoader != null) {
             try {
                 return libraryLoader.loadClass(name);
-            } catch (ClassNotFoundException ex) {
+            } catch (final ClassNotFoundException ex) {
             }
         }
 
         if (checkGlobal) {
             // This ignores the libraries of other plugins, unless they are transitive dependencies.
-            Class<?> result = loader.getClassByName(name, resolve, description, this);  // Paper - prioritize self
+            final Class<?> result = loader.getClassByName(name, resolve, description, this);  // Paper - prioritize self
 
             if (result != null) {
                 // If the class was loaded from a library instead of a PluginClassLoader, we can assume that its associated plugin is a transitive dependency and can therefore skip this check.
                 if (result.getClassLoader() instanceof PluginClassLoader) {
-                    PluginDescriptionFile provider = ((PluginClassLoader) result.getClassLoader()).description;
+                    final PluginDescriptionFile provider = ((PluginClassLoader) result.getClassLoader()).description;
 
                     if (provider != description
                             && !seenIllegalAccess.contains(provider.getName())
@@ -178,30 +178,30 @@ public final class PluginClassLoader extends URLClassLoader { // Spigot
     }
 
     @Override
-    protected @NotNull Class<?> findClass(@NotNull String name) throws ClassNotFoundException {
+    protected @NotNull Class<?> findClass(@NotNull final String name) throws ClassNotFoundException {
         if (name.startsWith("org.bukkit.") || name.startsWith("net.minecraft.")) {
             throw new ClassNotFoundException(name);
         }
         Class<?> result = classes.get(name);
 
         if (result == null) {
-            String path = name.replace('.', '/').concat(".class");
-            JarEntry entry = jar.getJarEntry(path);
+            final String path = name.replace('.', '/').concat(".class");
+            final JarEntry entry = jar.getJarEntry(path);
 
             if (entry != null) {
                 byte[] classBytes;
 
-                try (InputStream is = jar.getInputStream(entry)) {
+                try (final InputStream is = jar.getInputStream(entry)) {
                     classBytes = ByteStreams.toByteArray(is);
-                } catch (IOException ex) {
+                } catch (final IOException ex) {
                     throw new ClassNotFoundException(name, ex);
                 }
 
                 classBytes = loader.server.getUnsafe().processClass(description, path, classBytes);
 
-                int dot = name.lastIndexOf('.');
+                final int dot = name.lastIndexOf('.');
                 if (dot != -1) {
-                    String pkgName = name.substring(0, dot);
+                    final String pkgName = name.substring(0, dot);
                     if (getPackage(pkgName) == null) {
                         try {
                             if (manifest != null) {
@@ -209,7 +209,7 @@ public final class PluginClassLoader extends URLClassLoader { // Spigot
                             } else {
                                 definePackage(pkgName, null, null, null, null, null, null, null);
                             }
-                        } catch (IllegalArgumentException ex) {
+                        } catch (final IllegalArgumentException ex) {
                             if (getPackage(pkgName) == null) {
                                 throw new IllegalStateException("Cannot find package " + pkgName);
                             }
@@ -217,8 +217,8 @@ public final class PluginClassLoader extends URLClassLoader { // Spigot
                     }
                 }
 
-                CodeSigner[] signers = entry.getCodeSigners();
-                CodeSource source = new CodeSource(url, signers);
+                final CodeSigner[] signers = entry.getCodeSigners();
+                final CodeSource source = new CodeSource(url, signers);
 
                 result = defineClass(name, classBytes, 0, classBytes.length, source);
             }
@@ -248,7 +248,7 @@ public final class PluginClassLoader extends URLClassLoader { // Spigot
         return classes.values();
     }
 
-    synchronized void initialize(@NotNull JavaPlugin javaPlugin) {
+    synchronized void initialize(@NotNull final JavaPlugin javaPlugin) {
         Preconditions.checkArgument(javaPlugin != null, "Initializing plugin cannot be null");
         Preconditions.checkArgument(javaPlugin.getClass().getClassLoader() == this, "Cannot initialize plugin outside of this class loader");
         if (this.plugin != null || this.pluginInit != null) {
@@ -265,7 +265,7 @@ public final class PluginClassLoader extends URLClassLoader { // Spigot
     // Paper start
     @Override
     public @NotNull String toString() {
-        JavaPlugin currPlugin = plugin != null ? plugin : pluginInit;
+        final JavaPlugin currPlugin = plugin != null ? plugin : pluginInit;
         return "PluginClassLoader{" +
                    "plugin=" + currPlugin +
                    ", pluginEnabled=" + (currPlugin == null ? "uninitialized" : Boolean.valueOf(currPlugin.isEnabled())) +
diff --git a/src/main/java/org/bukkit/plugin/messaging/ChannelNameTooLongException.java b/src/main/java/org/bukkit/plugin/messaging/ChannelNameTooLongException.java
index e27dd8a96f0d99ede219303abfa6d0431a3ad976..414f7131a1342c834cf3198dd888e4b5de90d54c 100644
--- a/src/main/java/org/bukkit/plugin/messaging/ChannelNameTooLongException.java
+++ b/src/main/java/org/bukkit/plugin/messaging/ChannelNameTooLongException.java
@@ -12,7 +12,7 @@ public class ChannelNameTooLongException extends RuntimeException {
         super("Attempted to send a Plugin Message to a channel that was too large. The maximum length a channel may be is " + Messenger.MAX_CHANNEL_SIZE + " chars.");
     }
 
-    public ChannelNameTooLongException(@NotNull String channel) {
+    public ChannelNameTooLongException(@NotNull final String channel) {
         super("Attempted to send a Plugin Message to a channel that was too large. The maximum length a channel may be is " + Messenger.MAX_CHANNEL_SIZE + " chars (attempted " + channel.length() + " - '" + channel + ".");
     }
 }
diff --git a/src/main/java/org/bukkit/plugin/messaging/ChannelNotRegisteredException.java b/src/main/java/org/bukkit/plugin/messaging/ChannelNotRegisteredException.java
index 2266f17645e77beefc38a2ea9d588a1a9476dc55..5e5d3a4a079e17dd3454c8726added5c76f03ab7 100644
--- a/src/main/java/org/bukkit/plugin/messaging/ChannelNotRegisteredException.java
+++ b/src/main/java/org/bukkit/plugin/messaging/ChannelNotRegisteredException.java
@@ -9,7 +9,7 @@ public class ChannelNotRegisteredException extends RuntimeException {
         this("Attempted to send a plugin message through an unregistered channel.");
     }
 
-    public ChannelNotRegisteredException(String channel) {
+    public ChannelNotRegisteredException(final String channel) {
         super("Attempted to send a plugin message through the unregistered channel `" + channel + "'.");
     }
 }
diff --git a/src/main/java/org/bukkit/plugin/messaging/MessageTooLargeException.java b/src/main/java/org/bukkit/plugin/messaging/MessageTooLargeException.java
index 195ed8c695b9026f65735ede9ac6f6b20772df76..2d1833867b2006ed793566868e25bd0d8ca5256c 100644
--- a/src/main/java/org/bukkit/plugin/messaging/MessageTooLargeException.java
+++ b/src/main/java/org/bukkit/plugin/messaging/MessageTooLargeException.java
@@ -12,15 +12,15 @@ public class MessageTooLargeException extends RuntimeException {
         this("Attempted to send a plugin message that was too large. The maximum length a plugin message may be is " + Messenger.MAX_MESSAGE_SIZE + " bytes.");
     }
 
-    public MessageTooLargeException(byte @NotNull [] message) {
+    public MessageTooLargeException(final byte @NotNull [] message) {
         this(message.length);
     }
 
-    public MessageTooLargeException(int length) {
+    public MessageTooLargeException(final int length) {
         this("Attempted to send a plugin message that was too large. The maximum length a plugin message may be is " + Messenger.MAX_MESSAGE_SIZE + " bytes (tried to send one that is " + length + " bytes long).");
     }
 
-    public MessageTooLargeException(String msg) {
+    public MessageTooLargeException(final String msg) {
         super(msg);
     }
 }
diff --git a/src/main/java/org/bukkit/plugin/messaging/PluginMessageListenerRegistration.java b/src/main/java/org/bukkit/plugin/messaging/PluginMessageListenerRegistration.java
index 556bda7ffa8a4e1d50515cbc9e99cee4ccc185a6..8f37fc39aa769d49342db21be5421662513f1521 100644
--- a/src/main/java/org/bukkit/plugin/messaging/PluginMessageListenerRegistration.java
+++ b/src/main/java/org/bukkit/plugin/messaging/PluginMessageListenerRegistration.java
@@ -15,7 +15,7 @@ public final class PluginMessageListenerRegistration {
     private final @NotNull String channel;
     private final @NotNull PluginMessageListener listener;
 
-    public PluginMessageListenerRegistration(@NotNull Messenger messenger, @NotNull Plugin plugin, @NotNull String channel, @NotNull PluginMessageListener listener) {
+    public PluginMessageListenerRegistration(@NotNull final Messenger messenger, @NotNull final Plugin plugin, @NotNull final String channel, @NotNull final PluginMessageListener listener) {
         if (messenger == null) {
             throw new IllegalArgumentException("Messenger cannot be null!");
         }
@@ -75,7 +75,7 @@ public final class PluginMessageListenerRegistration {
     }
 
     @Override
-    public boolean equals(@Nullable Object obj) {
+    public boolean equals(@Nullable final Object obj) {
         if (obj == null) {
             return false;
         }
diff --git a/src/main/java/org/bukkit/plugin/messaging/ReservedChannelException.java b/src/main/java/org/bukkit/plugin/messaging/ReservedChannelException.java
index 0221f049a10dbac3103129020b5472eb209df17f..7dc0236fc0b399d5ab40507cdfb50c2c78188204 100644
--- a/src/main/java/org/bukkit/plugin/messaging/ReservedChannelException.java
+++ b/src/main/java/org/bukkit/plugin/messaging/ReservedChannelException.java
@@ -10,7 +10,7 @@ public class ReservedChannelException extends RuntimeException {
         this("Attempted to register for a reserved channel name.");
     }
 
-    public ReservedChannelException(String name) {
+    public ReservedChannelException(final String name) {
         super("Attempted to register for a reserved channel name ('" + name + "')");
     }
 }
diff --git a/src/main/java/org/bukkit/plugin/messaging/StandardMessenger.java b/src/main/java/org/bukkit/plugin/messaging/StandardMessenger.java
index 7a5da262c58c6439de8f1fac40739b161ff31f16..c848638da49f3c3e1ed57c172688522ab83126d3 100644
--- a/src/main/java/org/bukkit/plugin/messaging/StandardMessenger.java
+++ b/src/main/java/org/bukkit/plugin/messaging/StandardMessenger.java
@@ -25,7 +25,7 @@ public class StandardMessenger implements Messenger {
     private final Object incomingLock = new Object();
     private final Object outgoingLock = new Object();
 
-    private void addToOutgoing(@NotNull Plugin plugin, @NotNull String channel) {
+    private void addToOutgoing(@NotNull final Plugin plugin, @NotNull final String channel) {
         synchronized (outgoingLock) {
             Set<Plugin> plugins = outgoingByChannel.get(channel);
             Set<String> channels = outgoingByPlugin.get(plugin);
@@ -45,10 +45,10 @@ public class StandardMessenger implements Messenger {
         }
     }
 
-    private void removeFromOutgoing(@NotNull Plugin plugin, @NotNull String channel) {
+    private void removeFromOutgoing(@NotNull final Plugin plugin, @NotNull final String channel) {
         synchronized (outgoingLock) {
-            Set<Plugin> plugins = outgoingByChannel.get(channel);
-            Set<String> channels = outgoingByPlugin.get(plugin);
+            final Set<Plugin> plugins = outgoingByChannel.get(channel);
+            final Set<String> channels = outgoingByPlugin.get(plugin);
 
             if (plugins != null) {
                 plugins.remove(plugin);
@@ -68,23 +68,23 @@ public class StandardMessenger implements Messenger {
         }
     }
 
-    private void removeFromOutgoing(@NotNull Plugin plugin) {
+    private void removeFromOutgoing(@NotNull final Plugin plugin) {
         synchronized (outgoingLock) {
-            Set<String> channels = outgoingByPlugin.get(plugin);
+            final Set<String> channels = outgoingByPlugin.get(plugin);
 
             if (channels != null) {
-                String[] toRemove = channels.toArray(new String[0]);
+                final String[] toRemove = channels.toArray(new String[0]);
 
                 outgoingByPlugin.remove(plugin);
 
-                for (String channel : toRemove) {
+                for (final String channel : toRemove) {
                     removeFromOutgoing(plugin, channel);
                 }
             }
         }
     }
 
-    private void addToIncoming(@NotNull PluginMessageListenerRegistration registration) {
+    private void addToIncoming(@NotNull final PluginMessageListenerRegistration registration) {
         synchronized (incomingLock) {
             Set<PluginMessageListenerRegistration> registrations = incomingByChannel.get(registration.getChannel());
 
@@ -114,7 +114,7 @@ public class StandardMessenger implements Messenger {
         }
     }
 
-    private void removeFromIncoming(@NotNull PluginMessageListenerRegistration registration) {
+    private void removeFromIncoming(@NotNull final PluginMessageListenerRegistration registration) {
         synchronized (incomingLock) {
             Set<PluginMessageListenerRegistration> registrations = incomingByChannel.get(registration.getChannel());
 
@@ -138,14 +138,14 @@ public class StandardMessenger implements Messenger {
         }
     }
 
-    private void removeFromIncoming(@NotNull Plugin plugin, @NotNull String channel) {
+    private void removeFromIncoming(@NotNull final Plugin plugin, @NotNull final String channel) {
         synchronized (incomingLock) {
-            Set<PluginMessageListenerRegistration> registrations = incomingByPlugin.get(plugin);
+            final Set<PluginMessageListenerRegistration> registrations = incomingByPlugin.get(plugin);
 
             if (registrations != null) {
-                PluginMessageListenerRegistration[] toRemove = registrations.toArray(new PluginMessageListenerRegistration[0]);
+                final PluginMessageListenerRegistration[] toRemove = registrations.toArray(new PluginMessageListenerRegistration[0]);
 
-                for (PluginMessageListenerRegistration registration : toRemove) {
+                for (final PluginMessageListenerRegistration registration : toRemove) {
                     if (registration.getChannel().equals(channel)) {
                         removeFromIncoming(registration);
                     }
@@ -154,16 +154,16 @@ public class StandardMessenger implements Messenger {
         }
     }
 
-    private void removeFromIncoming(@NotNull Plugin plugin) {
+    private void removeFromIncoming(@NotNull final Plugin plugin) {
         synchronized (incomingLock) {
-            Set<PluginMessageListenerRegistration> registrations = incomingByPlugin.get(plugin);
+            final Set<PluginMessageListenerRegistration> registrations = incomingByPlugin.get(plugin);
 
             if (registrations != null) {
-                PluginMessageListenerRegistration[] toRemove = registrations.toArray(new PluginMessageListenerRegistration[0]);
+                final PluginMessageListenerRegistration[] toRemove = registrations.toArray(new PluginMessageListenerRegistration[0]);
 
                 incomingByPlugin.remove(plugin);
 
-                for (PluginMessageListenerRegistration registration : toRemove) {
+                for (final PluginMessageListenerRegistration registration : toRemove) {
                     removeFromIncoming(registration);
                 }
             }
@@ -178,7 +178,7 @@ public class StandardMessenger implements Messenger {
     }
 
     @Override
-    public void registerOutgoingPluginChannel(@NotNull Plugin plugin, @NotNull String channel) {
+    public void registerOutgoingPluginChannel(@NotNull final Plugin plugin, @NotNull String channel) {
         if (plugin == null) {
             throw new IllegalArgumentException("Plugin cannot be null");
         }
@@ -191,7 +191,7 @@ public class StandardMessenger implements Messenger {
     }
 
     @Override
-    public void unregisterOutgoingPluginChannel(@NotNull Plugin plugin, @NotNull String channel) {
+    public void unregisterOutgoingPluginChannel(@NotNull final Plugin plugin, @NotNull String channel) {
         if (plugin == null) {
             throw new IllegalArgumentException("Plugin cannot be null");
         }
@@ -201,7 +201,7 @@ public class StandardMessenger implements Messenger {
     }
 
     @Override
-    public void unregisterOutgoingPluginChannel(@NotNull Plugin plugin) {
+    public void unregisterOutgoingPluginChannel(@NotNull final Plugin plugin) {
         if (plugin == null) {
             throw new IllegalArgumentException("Plugin cannot be null");
         }
@@ -211,7 +211,7 @@ public class StandardMessenger implements Messenger {
 
     @Override
     @NotNull
-    public PluginMessageListenerRegistration registerIncomingPluginChannel(@NotNull Plugin plugin, @NotNull String channel, @NotNull PluginMessageListener listener) {
+    public PluginMessageListenerRegistration registerIncomingPluginChannel(@NotNull final Plugin plugin, @NotNull String channel, @NotNull final PluginMessageListener listener) {
         if (plugin == null) {
             throw new IllegalArgumentException("Plugin cannot be null");
         }
@@ -223,7 +223,7 @@ public class StandardMessenger implements Messenger {
             throw new IllegalArgumentException("Listener cannot be null");
         }
 
-        PluginMessageListenerRegistration result = new PluginMessageListenerRegistration(this, plugin, channel, listener);
+        final PluginMessageListenerRegistration result = new PluginMessageListenerRegistration(this, plugin, channel, listener);
 
         addToIncoming(result);
 
@@ -231,7 +231,7 @@ public class StandardMessenger implements Messenger {
     }
 
     @Override
-    public void unregisterIncomingPluginChannel(@NotNull Plugin plugin, @NotNull String channel, @NotNull PluginMessageListener listener) {
+    public void unregisterIncomingPluginChannel(@NotNull final Plugin plugin, @NotNull String channel, @NotNull final PluginMessageListener listener) {
         if (plugin == null) {
             throw new IllegalArgumentException("Plugin cannot be null");
         }
@@ -244,7 +244,7 @@ public class StandardMessenger implements Messenger {
     }
 
     @Override
-    public void unregisterIncomingPluginChannel(@NotNull Plugin plugin, @NotNull String channel) {
+    public void unregisterIncomingPluginChannel(@NotNull final Plugin plugin, @NotNull String channel) {
         if (plugin == null) {
             throw new IllegalArgumentException("Plugin cannot be null");
         }
@@ -254,7 +254,7 @@ public class StandardMessenger implements Messenger {
     }
 
     @Override
-    public void unregisterIncomingPluginChannel(@NotNull Plugin plugin) {
+    public void unregisterIncomingPluginChannel(@NotNull final Plugin plugin) {
         if (plugin == null) {
             throw new IllegalArgumentException("Plugin cannot be null");
         }
@@ -266,20 +266,20 @@ public class StandardMessenger implements Messenger {
     @NotNull
     public Set<String> getOutgoingChannels() {
         synchronized (outgoingLock) {
-            Set<String> keys = outgoingByChannel.keySet();
+            final Set<String> keys = outgoingByChannel.keySet();
             return ImmutableSet.copyOf(keys);
         }
     }
 
     @Override
     @NotNull
-    public Set<String> getOutgoingChannels(@NotNull Plugin plugin) {
+    public Set<String> getOutgoingChannels(@NotNull final Plugin plugin) {
         if (plugin == null) {
             throw new IllegalArgumentException("Plugin cannot be null");
         }
 
         synchronized (outgoingLock) {
-            Set<String> channels = outgoingByPlugin.get(plugin);
+            final Set<String> channels = outgoingByPlugin.get(plugin);
 
             if (channels != null) {
                 return ImmutableSet.copyOf(channels);
@@ -293,25 +293,25 @@ public class StandardMessenger implements Messenger {
     @NotNull
     public Set<String> getIncomingChannels() {
         synchronized (incomingLock) {
-            Set<String> keys = incomingByChannel.keySet();
+            final Set<String> keys = incomingByChannel.keySet();
             return ImmutableSet.copyOf(keys);
         }
     }
 
     @Override
     @NotNull
-    public Set<String> getIncomingChannels(@NotNull Plugin plugin) {
+    public Set<String> getIncomingChannels(@NotNull final Plugin plugin) {
         if (plugin == null) {
             throw new IllegalArgumentException("Plugin cannot be null");
         }
 
         synchronized (incomingLock) {
-            Set<PluginMessageListenerRegistration> registrations = incomingByPlugin.get(plugin);
+            final Set<PluginMessageListenerRegistration> registrations = incomingByPlugin.get(plugin);
 
             if (registrations != null) {
-                Builder<String> builder = ImmutableSet.builder();
+                final Builder<String> builder = ImmutableSet.builder();
 
-                for (PluginMessageListenerRegistration registration : registrations) {
+                for (final PluginMessageListenerRegistration registration : registrations) {
                     builder.add(registration.getChannel());
                 }
 
@@ -324,13 +324,13 @@ public class StandardMessenger implements Messenger {
 
     @Override
     @NotNull
-    public Set<PluginMessageListenerRegistration> getIncomingChannelRegistrations(@NotNull Plugin plugin) {
+    public Set<PluginMessageListenerRegistration> getIncomingChannelRegistrations(@NotNull final Plugin plugin) {
         if (plugin == null) {
             throw new IllegalArgumentException("Plugin cannot be null");
         }
 
         synchronized (incomingLock) {
-            Set<PluginMessageListenerRegistration> registrations = incomingByPlugin.get(plugin);
+            final Set<PluginMessageListenerRegistration> registrations = incomingByPlugin.get(plugin);
 
             if (registrations != null) {
                 return ImmutableSet.copyOf(registrations);
@@ -346,7 +346,7 @@ public class StandardMessenger implements Messenger {
         channel = validateAndCorrectChannel(channel);
 
         synchronized (incomingLock) {
-            Set<PluginMessageListenerRegistration> registrations = incomingByChannel.get(channel);
+            final Set<PluginMessageListenerRegistration> registrations = incomingByChannel.get(channel);
 
             if (registrations != null) {
                 return ImmutableSet.copyOf(registrations);
@@ -358,19 +358,19 @@ public class StandardMessenger implements Messenger {
 
     @Override
     @NotNull
-    public Set<PluginMessageListenerRegistration> getIncomingChannelRegistrations(@NotNull Plugin plugin, @NotNull String channel) {
+    public Set<PluginMessageListenerRegistration> getIncomingChannelRegistrations(@NotNull final Plugin plugin, @NotNull String channel) {
         if (plugin == null) {
             throw new IllegalArgumentException("Plugin cannot be null");
         }
         channel = validateAndCorrectChannel(channel);
 
         synchronized (incomingLock) {
-            Set<PluginMessageListenerRegistration> registrations = incomingByPlugin.get(plugin);
+            final Set<PluginMessageListenerRegistration> registrations = incomingByPlugin.get(plugin);
 
             if (registrations != null) {
-                Builder<PluginMessageListenerRegistration> builder = ImmutableSet.builder();
+                final Builder<PluginMessageListenerRegistration> builder = ImmutableSet.builder();
 
-                for (PluginMessageListenerRegistration registration : registrations) {
+                for (final PluginMessageListenerRegistration registration : registrations) {
                     if (registration.getChannel().equals(channel)) {
                         builder.add(registration);
                     }
@@ -384,13 +384,13 @@ public class StandardMessenger implements Messenger {
     }
 
     @Override
-    public boolean isRegistrationValid(@NotNull PluginMessageListenerRegistration registration) {
+    public boolean isRegistrationValid(@NotNull final PluginMessageListenerRegistration registration) {
         if (registration == null) {
             throw new IllegalArgumentException("Registration cannot be null");
         }
 
         synchronized (incomingLock) {
-            Set<PluginMessageListenerRegistration> registrations = incomingByPlugin.get(registration.getPlugin());
+            final Set<PluginMessageListenerRegistration> registrations = incomingByPlugin.get(registration.getPlugin());
 
             if (registrations != null) {
                 return registrations.contains(registration);
@@ -401,17 +401,17 @@ public class StandardMessenger implements Messenger {
     }
 
     @Override
-    public boolean isIncomingChannelRegistered(@NotNull Plugin plugin, @NotNull String channel) {
+    public boolean isIncomingChannelRegistered(@NotNull final Plugin plugin, @NotNull String channel) {
         if (plugin == null) {
             throw new IllegalArgumentException("Plugin cannot be null");
         }
         channel = validateAndCorrectChannel(channel);
 
         synchronized (incomingLock) {
-            Set<PluginMessageListenerRegistration> registrations = incomingByPlugin.get(plugin);
+            final Set<PluginMessageListenerRegistration> registrations = incomingByPlugin.get(plugin);
 
             if (registrations != null) {
-                for (PluginMessageListenerRegistration registration : registrations) {
+                for (final PluginMessageListenerRegistration registration : registrations) {
                     if (registration.getChannel().equals(channel)) {
                         return true;
                     }
@@ -423,14 +423,14 @@ public class StandardMessenger implements Messenger {
     }
 
     @Override
-    public boolean isOutgoingChannelRegistered(@NotNull Plugin plugin, @NotNull String channel) {
+    public boolean isOutgoingChannelRegistered(@NotNull final Plugin plugin, @NotNull String channel) {
         if (plugin == null) {
             throw new IllegalArgumentException("Plugin cannot be null");
         }
         channel = validateAndCorrectChannel(channel);
 
         synchronized (outgoingLock) {
-            Set<String> channels = outgoingByPlugin.get(plugin);
+            final Set<String> channels = outgoingByPlugin.get(plugin);
 
             if (channels != null) {
                 return channels.contains(channel);
@@ -441,7 +441,7 @@ public class StandardMessenger implements Messenger {
     }
 
     @Override
-    public void dispatchIncomingMessage(@NotNull Player source, @NotNull String channel, byte @Nullable [] message) {
+    public void dispatchIncomingMessage(@NotNull final Player source, @NotNull String channel, final byte @Nullable [] message) {
         if (source == null) {
             throw new IllegalArgumentException("Player source cannot be null");
         }
@@ -450,12 +450,12 @@ public class StandardMessenger implements Messenger {
         }
         channel = validateAndCorrectChannel(channel);
 
-        Set<PluginMessageListenerRegistration> registrations = getIncomingChannelRegistrations(channel);
+        final Set<PluginMessageListenerRegistration> registrations = getIncomingChannelRegistrations(channel);
 
-        for (PluginMessageListenerRegistration registration : registrations) {
+        for (final PluginMessageListenerRegistration registration : registrations) {
             try {
                 registration.getListener().onPluginMessageReceived(channel, source, message);
-            } catch (Throwable t) {
+            } catch (final Throwable t) {
                 registration.getPlugin().getLogger().log(Level.WARNING,
                     String.format("Plugin %s generated an exception whilst handling plugin message",
                         registration.getPlugin().getDescription().getFullName()
@@ -471,7 +471,7 @@ public class StandardMessenger implements Messenger {
      * @deprecated not an API method
      */
     @Deprecated
-    public static void validateChannel(@NotNull String channel) {
+    public static void validateChannel(@NotNull final String channel) {
         validateAndCorrectChannel(channel);
     }
 
@@ -484,7 +484,7 @@ public class StandardMessenger implements Messenger {
      */
     @Deprecated
     @NotNull
-    public static String validateAndCorrectChannel(@NotNull String channel) {
+    public static String validateAndCorrectChannel(@NotNull final String channel) {
         if (channel == null) {
             throw new IllegalArgumentException("Channel cannot be null");
         }
@@ -529,7 +529,7 @@ public class StandardMessenger implements Messenger {
      * @throws ChannelNotRegisteredException Thrown if the channel is not
      *     registered for this plugin.
      */
-    public static void validatePluginMessage(@NotNull Messenger messenger, @NotNull Plugin source, @NotNull String channel, byte @Nullable [] message) {
+    public static void validatePluginMessage(@NotNull final Messenger messenger, @NotNull final Plugin source, @NotNull final String channel, final byte @Nullable [] message) {
         if (messenger == null) {
             throw new IllegalArgumentException("Messenger cannot be null");
         }
diff --git a/src/main/java/org/bukkit/potion/Potion.java b/src/main/java/org/bukkit/potion/Potion.java
index 19e3e61c4d0c3de8af4e94ef3fd00886f32043b1..d2efd5b266ebf834043ec0cc98dc626e81fe834a 100644
--- a/src/main/java/org/bukkit/potion/Potion.java
+++ b/src/main/java/org/bukkit/potion/Potion.java
@@ -29,7 +29,7 @@ public class Potion {
      *
      * @param type The potion type
      */
-    public Potion(@NotNull PotionType type) {
+    public Potion(@NotNull final PotionType type) {
         Preconditions.checkArgument(type != null, "Null PotionType");
         this.type = type;
     }
@@ -40,7 +40,7 @@ public class Potion {
      * @param type The type of potion.
      * @param level The potion's level.
      */
-    public Potion(@NotNull PotionType type, int level) {
+    public Potion(@NotNull final PotionType type, final int level) {
         this(type);
         Preconditions.checkArgument(type != null, "Type cannot be null");
         Preconditions.checkArgument(level > 0 && level < 3, "Level must be 1 or 2");
@@ -57,7 +57,7 @@ public class Potion {
      *     #splash()}.
      */
     @Deprecated
-    public Potion(@NotNull PotionType type, int level, boolean splash) {
+    public Potion(@NotNull final PotionType type, final int level, final boolean splash) {
         this(type, level);
         this.splash = splash;
     }
@@ -73,7 +73,7 @@ public class Potion {
      *     #extend()} and possibly {@link #splash()}.
      */
     @Deprecated
-    public Potion(@NotNull PotionType type, int level, boolean splash, boolean extended) {
+    public Potion(@NotNull final PotionType type, final int level, final boolean splash, final boolean extended) {
         this(type, level, splash);
         this.extended = extended;
     }
@@ -106,11 +106,11 @@ public class Potion {
      *
      * @param to The itemstack to apply to
      */
-    public void apply(@NotNull ItemStack to) {
+    public void apply(@NotNull final ItemStack to) {
         Preconditions.checkArgument(to != null, "itemstack cannot be null");
         Preconditions.checkArgument(to.hasItemMeta(), "given itemstack is not a potion");
         Preconditions.checkArgument(to.getItemMeta() instanceof PotionMeta, "given itemstack is not a potion");
-        PotionMeta meta = (PotionMeta) to.getItemMeta();
+        final PotionMeta meta = (PotionMeta) to.getItemMeta();
         meta.setBasePotionData(new PotionData(type, extended, level == 2));
         to.setItemMeta(meta);
     }
@@ -122,20 +122,20 @@ public class Potion {
      * @param to The entity to apply the effects to
      * @see LivingEntity#addPotionEffects(Collection)
      */
-    public void apply(@NotNull LivingEntity to) {
+    public void apply(@NotNull final LivingEntity to) {
         Preconditions.checkArgument(to != null, "entity cannot be null");
         to.addPotionEffects(getEffects());
     }
 
     @Override
-    public boolean equals(@Nullable Object obj) {
+    public boolean equals(@Nullable final Object obj) {
         if (this == obj) {
             return true;
         }
         if (obj == null || getClass() != obj.getClass()) {
             return false;
         }
-        Potion other = (Potion) obj;
+        final Potion other = (Potion) obj;
         return extended == other.extended && splash == other.splash && level == other.level && type == other.type;
     }
 
@@ -205,7 +205,7 @@ public class Potion {
      *
      * @param isExtended Whether the potion should have extended duration
      */
-    public void setHasExtendedDuration(boolean isExtended) {
+    public void setHasExtendedDuration(final boolean isExtended) {
         Preconditions.checkArgument(type == null || !type.isInstant(), "Instant potions cannot be extended");
         extended = isExtended;
     }
@@ -216,7 +216,7 @@ public class Potion {
      *
      * @param isSplash Whether this is a splash potion
      */
-    public void setSplash(boolean isSplash) {
+    public void setSplash(final boolean isSplash) {
         splash = isSplash;
     }
 
@@ -225,7 +225,7 @@ public class Potion {
      *
      * @param type The new type of this potion
      */
-    public void setType(@NotNull PotionType type) {
+    public void setType(@NotNull final PotionType type) {
         this.type = type;
     }
 
@@ -234,7 +234,7 @@ public class Potion {
      *
      * @param level The new level of this potion
      */
-    public void setLevel(int level) {
+    public void setLevel(final int level) {
         Preconditions.checkArgument(this.type != null, "No-effect potions don't have a level.");
         Preconditions.checkArgument(level > 0 && level <= 2, "Level must be between 1 and 2 for this potion");
         this.level = level;
@@ -260,15 +260,15 @@ public class Potion {
      * @return The created ItemStack
      */
     @NotNull
-    public ItemStack toItemStack(int amount) {
-        Material material;
+    public ItemStack toItemStack(final int amount) {
+        final Material material;
         if (isSplash()) {
             material = Material.SPLASH_POTION;
         } else {
             material = Material.POTION;
         }
-        ItemStack itemStack = new ItemStack(material, amount);
-        PotionMeta meta = (PotionMeta) itemStack.getItemMeta();
+        final ItemStack itemStack = new ItemStack(material, amount);
+        final PotionMeta meta = (PotionMeta) itemStack.getItemMeta();
         meta.setBasePotionData(new PotionData(type, extended, level == 2)); // Paper - fix swapped values
         itemStack.setItemMeta(meta);
         return itemStack;
@@ -289,8 +289,8 @@ public class Potion {
      * @return the produced potion
      */
     @NotNull
-    public static Potion fromDamage(int damage) {
-        PotionType type;
+    public static Potion fromDamage(final int damage) {
+        final PotionType type;
         switch (damage & POTION_BIT) {
             case 0:
                 type = PotionType.WATER;
@@ -355,7 +355,7 @@ public class Potion {
     }
 
     @NotNull
-    public static Potion fromItemStack(@NotNull ItemStack item) {
+    public static Potion fromItemStack(@NotNull final ItemStack item) {
         Preconditions.checkArgument(item != null, "item cannot be null");
         if (item.getType() != Material.POTION)
             throw new IllegalArgumentException("item is not a potion");
@@ -378,7 +378,7 @@ public class Potion {
      *
      * @param other The new PotionBrewer
      */
-    public static void setPotionBrewer(@NotNull PotionBrewer other) {
+    public static void setPotionBrewer(@NotNull final PotionBrewer other) {
         if (brewer != null)
             throw new IllegalArgumentException("brewer can only be set internally");
         brewer = other;
diff --git a/src/main/java/org/bukkit/potion/PotionData.java b/src/main/java/org/bukkit/potion/PotionData.java
index 1ffb8df32c54b780176fd5d504989ea3b5d1ecb1..7be0abebd01acf42da507ebe1a5a67fd8fb2e391 100644
--- a/src/main/java/org/bukkit/potion/PotionData.java
+++ b/src/main/java/org/bukkit/potion/PotionData.java
@@ -21,7 +21,7 @@ public final class PotionData {
      * @param upgraded whether the potion is upgraded PotionType#isUpgradable()
      * must be true
      */
-    public PotionData(@NotNull PotionType type, boolean extended, boolean upgraded) {
+    public PotionData(@NotNull final PotionType type, final boolean extended, final boolean upgraded) {
         Preconditions.checkArgument(type != null, "Potion Type must not be null");
         Preconditions.checkArgument(!upgraded || type.isUpgradeable(), "Potion Type is not upgradable");
         Preconditions.checkArgument(!extended || type.isExtendable(), "Potion Type is not extendable");
@@ -31,7 +31,7 @@ public final class PotionData {
         this.upgraded = upgraded;
     }
 
-    public PotionData(@NotNull PotionType type) {
+    public PotionData(@NotNull final PotionType type) {
         this(type, false, false);
     }
 
@@ -76,14 +76,14 @@ public final class PotionData {
     }
 
     @Override
-    public boolean equals(@Nullable Object obj) {
+    public boolean equals(@Nullable final Object obj) {
         if (this == obj) {
             return true;
         }
         if (obj == null || getClass() != obj.getClass()) {
             return false;
         }
-        PotionData other = (PotionData) obj;
+        final PotionData other = (PotionData) obj;
         return (this.upgraded == other.upgraded) && (this.extended == other.extended) && (this.type == other.type);
     }
 }
diff --git a/src/main/java/org/bukkit/potion/PotionEffect.java b/src/main/java/org/bukkit/potion/PotionEffect.java
index c46ef748a84a72b5aff4572a16611a5aa45e4b9a..7d9ee4b7b49729a9b68d89689de092361dd1cfb3 100644
--- a/src/main/java/org/bukkit/potion/PotionEffect.java
+++ b/src/main/java/org/bukkit/potion/PotionEffect.java
@@ -43,7 +43,7 @@ public class PotionEffect implements ConfigurationSerializable {
      * @param particles the particle status, see {@link PotionEffect#hasParticles()}
      * @param icon the icon status, see {@link PotionEffect#hasIcon()}
      */
-    public PotionEffect(@NotNull PotionEffectType type, int duration, int amplifier, boolean ambient, boolean particles, boolean icon) {
+    public PotionEffect(@NotNull final PotionEffectType type, final int duration, final int amplifier, final boolean ambient, final boolean particles, final boolean icon) {
         Preconditions.checkArgument(type != null, "effect type cannot be null");
         this.type = type;
         this.duration = duration;
@@ -63,7 +63,7 @@ public class PotionEffect implements ConfigurationSerializable {
      * @param ambient the ambient status, see {@link PotionEffect#isAmbient()}
      * @param particles the particle status, see {@link PotionEffect#hasParticles()}
      */
-    public PotionEffect(@NotNull PotionEffectType type, int duration, int amplifier, boolean ambient, boolean particles) {
+    public PotionEffect(@NotNull final PotionEffectType type, final int duration, final int amplifier, final boolean ambient, final boolean particles) {
         this(type, duration, amplifier, ambient, particles, particles);
     }
 
@@ -76,7 +76,7 @@ public class PotionEffect implements ConfigurationSerializable {
      * @param amplifier the amplifier, see {@link PotionEffect#getAmplifier()}
      * @param ambient the ambient status, see {@link PotionEffect#isAmbient()}
      */
-    public PotionEffect(@NotNull PotionEffectType type, int duration, int amplifier, boolean ambient) {
+    public PotionEffect(@NotNull final PotionEffectType type, final int duration, final int amplifier, final boolean ambient) {
         this(type, duration, amplifier, ambient, true);
     }
 
@@ -88,7 +88,7 @@ public class PotionEffect implements ConfigurationSerializable {
      * @param amplifier the amplifier for the effect
      * @see PotionEffect#PotionEffect(PotionEffectType, int, int, boolean)
      */
-    public PotionEffect(@NotNull PotionEffectType type, int duration, int amplifier) {
+    public PotionEffect(@NotNull final PotionEffectType type, final int duration, final int amplifier) {
         this(type, duration, amplifier, true);
     }
 
@@ -97,57 +97,57 @@ public class PotionEffect implements ConfigurationSerializable {
      *
      * @param map the map to deserialize from
      */
-    public PotionEffect(@NotNull Map<String, Object> map) {
+    public PotionEffect(@NotNull final Map<String, Object> map) {
         this(getEffectType(map), getInt(map, DURATION), getInt(map, AMPLIFIER), getBool(map, AMBIENT, false), getBool(map, PARTICLES, true), getBool(map, ICON, getBool(map, PARTICLES, true)));
     }
 
     // Paper start
     @NotNull
-    public PotionEffect withType(@NotNull PotionEffectType type) {
+    public PotionEffect withType(@NotNull final PotionEffectType type) {
         return new PotionEffect(type, duration, amplifier, ambient, particles, icon);
     }
     @NotNull
-    public PotionEffect withDuration(int duration) {
+    public PotionEffect withDuration(final int duration) {
         return new PotionEffect(this.type, duration, amplifier, ambient, particles, icon);
     }
     @NotNull
-    public PotionEffect withAmplifier(int amplifier) {
+    public PotionEffect withAmplifier(final int amplifier) {
         return new PotionEffect(this.type, duration, amplifier, ambient, particles, icon);
     }
     @NotNull
-    public PotionEffect withAmbient(boolean ambient) {
+    public PotionEffect withAmbient(final boolean ambient) {
         return new PotionEffect(this.type, duration, amplifier, ambient, particles, icon);
     }
     @NotNull
-    public PotionEffect withParticles(boolean particles) {
+    public PotionEffect withParticles(final boolean particles) {
         return new PotionEffect(this.type, duration, amplifier, ambient, particles, icon);
     }
     @NotNull
-    public PotionEffect withIcon(boolean icon) {
+    public PotionEffect withIcon(final boolean icon) {
         return new PotionEffect(this.type, duration, amplifier, ambient, particles, icon);
     }
     // Paper end
 
     @NotNull
-    private static PotionEffectType getEffectType(@NotNull Map<?, ?> map) {
-        int type = getInt(map, TYPE);
-        PotionEffectType effect = PotionEffectType.getById(type);
+    private static PotionEffectType getEffectType(@NotNull final Map<?, ?> map) {
+        final int type = getInt(map, TYPE);
+        final PotionEffectType effect = PotionEffectType.getById(type);
         if (effect != null) {
             return effect;
         }
         throw new NoSuchElementException(map + " does not contain " + TYPE);
     }
 
-    private static int getInt(@NotNull Map<?, ?> map, @NotNull Object key) {
-        Object num = map.get(key);
+    private static int getInt(@NotNull final Map<?, ?> map, @NotNull final Object key) {
+        final Object num = map.get(key);
         if (num instanceof Integer) {
             return ((Integer) num).intValue();
         }
         throw new NoSuchElementException(map + " does not contain " + key);
     }
 
-    private static boolean getBool(@NotNull Map<?, ?> map, @NotNull Object key, boolean def) {
-        Object bool = map.get(key);
+    private static boolean getBool(@NotNull final Map<?, ?> map, @NotNull final Object key, final boolean def) {
+        final Object bool = map.get(key);
         if (bool instanceof Boolean) {
             return ((Boolean) bool).booleanValue();
         }
@@ -175,19 +175,19 @@ public class PotionEffect implements ConfigurationSerializable {
      * @return Whether the effect could be added
      * @see LivingEntity#addPotionEffect(PotionEffect)
      */
-    public boolean apply(@NotNull LivingEntity entity) {
+    public boolean apply(@NotNull final LivingEntity entity) {
         return entity.addPotionEffect(this);
     }
 
     @Override
-    public boolean equals(Object obj) {
+    public boolean equals(final Object obj) {
         if (this == obj) {
             return true;
         }
         if (!(obj instanceof PotionEffect)) {
             return false;
         }
-        PotionEffect that = (PotionEffect) obj;
+        final PotionEffect that = (PotionEffect) obj;
         return this.type.equals(that.type) && this.ambient == that.ambient && this.amplifier == that.amplifier && this.duration == that.duration && this.particles == that.particles && this.icon == that.icon;
     }
 
diff --git a/src/main/java/org/bukkit/potion/PotionEffectType.java b/src/main/java/org/bukkit/potion/PotionEffectType.java
index c50dadfe97b938641a22565fd25635ea6e74400d..934ff67dc624e9e22ef13c76be2b2e5ad9e471ab 100644
--- a/src/main/java/org/bukkit/potion/PotionEffectType.java
+++ b/src/main/java/org/bukkit/potion/PotionEffectType.java
@@ -188,7 +188,7 @@ public abstract class PotionEffectType implements Keyed, net.kyori.adventure.tra
     private final int id;
     private final @NotNull NamespacedKey key;
 
-    protected PotionEffectType(int id, @NotNull NamespacedKey key) {
+    protected PotionEffectType(final int id, @NotNull final NamespacedKey key) {
         this.id = id;
         this.key = key;
     }
@@ -203,7 +203,7 @@ public abstract class PotionEffectType implements Keyed, net.kyori.adventure.tra
      * @see PotionBrewer#createEffect(PotionEffectType, int, int)
      */
     @NotNull
-    public PotionEffect createEffect(int duration, int amplifier) {
+    public PotionEffect createEffect(final int duration, final int amplifier) {
         return new PotionEffect(this, isInstant() ? 1 : (int) (duration * getDurationModifier()), amplifier);
     }
 
@@ -257,7 +257,7 @@ public abstract class PotionEffectType implements Keyed, net.kyori.adventure.tra
     public abstract Color getColor();
 
     @Override
-    public boolean equals(@Nullable Object obj) {
+    public boolean equals(@Nullable final Object obj) {
         if (obj == null) {
             return false;
         }
@@ -295,7 +295,7 @@ public abstract class PotionEffectType implements Keyed, net.kyori.adventure.tra
      */
     @Contract("null -> null")
     @Nullable
-    public static PotionEffectType getByKey(@Nullable NamespacedKey key) {
+    public static PotionEffectType getByKey(@Nullable final NamespacedKey key) {
         return byKey.get(key);
     }
 
@@ -308,7 +308,7 @@ public abstract class PotionEffectType implements Keyed, net.kyori.adventure.tra
      */
     @Deprecated
     @Nullable
-    public static PotionEffectType getById(int id) {
+    public static PotionEffectType getById(final int id) {
         if (id >= byId.length || id < 0)
             return null;
         return byId[id];
@@ -321,7 +321,7 @@ public abstract class PotionEffectType implements Keyed, net.kyori.adventure.tra
      * @return Resulting PotionEffectType, or null if not found.
      */
     @Nullable
-    public static PotionEffectType getByName(@NotNull String name) {
+    public static PotionEffectType getByName(@NotNull final String name) {
         Preconditions.checkArgument(name != null, "name cannot be null");
         return byName.get(name.toLowerCase(java.util.Locale.ENGLISH));
     }
@@ -333,7 +333,7 @@ public abstract class PotionEffectType implements Keyed, net.kyori.adventure.tra
      *
      * @param type PotionType to register
      */
-    public static void registerPotionEffectType(@NotNull PotionEffectType type) {
+    public static void registerPotionEffectType(@NotNull final PotionEffectType type) {
         if (byId[type.id] != null || byName.containsKey(type.getName().toLowerCase(java.util.Locale.ENGLISH)) || byKey.containsKey(type.key)) {
             throw new IllegalArgumentException("Cannot set already-set type");
         } else if (!acceptingNew) {
@@ -399,7 +399,7 @@ public abstract class PotionEffectType implements Keyed, net.kyori.adventure.tra
 
         private final net.kyori.adventure.text.format.TextColor color;
 
-        Category(net.kyori.adventure.text.format.TextColor color) {
+        Category(final net.kyori.adventure.text.format.TextColor color) {
             this.color = color;
         }
 
diff --git a/src/main/java/org/bukkit/potion/PotionEffectTypeWrapper.java b/src/main/java/org/bukkit/potion/PotionEffectTypeWrapper.java
index a7653806c0fa76f4b3342ea199fe892c514a4c27..f9e39a4f163fb3a308e5b93eb547134ffc852bd3 100644
--- a/src/main/java/org/bukkit/potion/PotionEffectTypeWrapper.java
+++ b/src/main/java/org/bukkit/potion/PotionEffectTypeWrapper.java
@@ -5,7 +5,7 @@ import org.bukkit.NamespacedKey;
 import org.jetbrains.annotations.NotNull;
 
 public class PotionEffectTypeWrapper extends PotionEffectType {
-    protected PotionEffectTypeWrapper(int id, @NotNull String name) {
+    protected PotionEffectTypeWrapper(final int id, @NotNull final String name) {
         super(id, NamespacedKey.minecraft(name));
     }
 
@@ -52,7 +52,7 @@ public class PotionEffectTypeWrapper extends PotionEffectType {
     }
 
     @Override
-    public double getAttributeModifierAmount(@NotNull org.bukkit.attribute.Attribute attribute, int effectAmplifier) {
+    public double getAttributeModifierAmount(@NotNull final org.bukkit.attribute.Attribute attribute, final int effectAmplifier) {
         return this.getType().getAttributeModifierAmount(attribute, effectAmplifier);
     }
 
diff --git a/src/main/java/org/bukkit/potion/PotionType.java b/src/main/java/org/bukkit/potion/PotionType.java
index af7dea669cd394db2498e8d9dc88bbd8eac4b83b..e3e9227c12fdb518bc88cb3229ad6da3e9766df5 100644
--- a/src/main/java/org/bukkit/potion/PotionType.java
+++ b/src/main/java/org/bukkit/potion/PotionType.java
@@ -34,7 +34,7 @@ public enum PotionType {
     private final boolean upgradeable;
     private final boolean extendable;
 
-    PotionType(/*@Nullable*/ PotionEffectType effect, boolean upgradeable, boolean extendable) {
+    PotionType(/*@Nullable*/ final PotionEffectType effect, final boolean upgradeable, final boolean extendable) {
         this.effect = effect;
         this.upgradeable = upgradeable;
         this.extendable = extendable;
@@ -81,10 +81,10 @@ public enum PotionType {
      */
     @Deprecated
     @Nullable
-    public static PotionType getByEffect(@Nullable PotionEffectType effectType) {
+    public static PotionType getByEffect(@Nullable final PotionEffectType effectType) {
         if (effectType == null)
             return WATER;
-        for (PotionType type : PotionType.values()) {
+        for (final PotionType type : PotionType.values()) {
             if (effectType.equals(type.effect))
                 return type;
         }
diff --git a/src/main/java/org/bukkit/scheduler/BukkitRunnable.java b/src/main/java/org/bukkit/scheduler/BukkitRunnable.java
index 35599aac72c50273abb9efe35bcb6406d9b1aba6..d0e3be215f1471c3e0b106795dc030da66ed6e53 100644
--- a/src/main/java/org/bukkit/scheduler/BukkitRunnable.java
+++ b/src/main/java/org/bukkit/scheduler/BukkitRunnable.java
@@ -40,7 +40,7 @@ public abstract class BukkitRunnable implements Runnable {
      * @see BukkitScheduler#runTask(Plugin, Runnable)
      */
     @NotNull
-    public synchronized BukkitTask runTask(@NotNull Plugin plugin) throws IllegalArgumentException, IllegalStateException {
+    public synchronized BukkitTask runTask(@NotNull final Plugin plugin) throws IllegalArgumentException, IllegalStateException {
         checkNotYetScheduled();
         return setupTask(Bukkit.getScheduler().runTask(plugin, (Runnable) this));
     }
@@ -58,7 +58,7 @@ public abstract class BukkitRunnable implements Runnable {
      * @see BukkitScheduler#runTaskAsynchronously(Plugin, Runnable)
      */
     @NotNull
-    public synchronized BukkitTask runTaskAsynchronously(@NotNull Plugin plugin) throws IllegalArgumentException, IllegalStateException {
+    public synchronized BukkitTask runTaskAsynchronously(@NotNull final Plugin plugin) throws IllegalArgumentException, IllegalStateException {
         checkNotYetScheduled();
         return setupTask(Bukkit.getScheduler().runTaskAsynchronously(plugin, (Runnable) this));
     }
@@ -74,7 +74,7 @@ public abstract class BukkitRunnable implements Runnable {
      * @see BukkitScheduler#runTaskLater(Plugin, Runnable, long)
      */
     @NotNull
-    public synchronized BukkitTask runTaskLater(@NotNull Plugin plugin, long delay) throws IllegalArgumentException, IllegalStateException {
+    public synchronized BukkitTask runTaskLater(@NotNull final Plugin plugin, final long delay) throws IllegalArgumentException, IllegalStateException {
         checkNotYetScheduled();
         return setupTask(Bukkit.getScheduler().runTaskLater(plugin, (Runnable) this, delay));
     }
@@ -94,7 +94,7 @@ public abstract class BukkitRunnable implements Runnable {
      * @see BukkitScheduler#runTaskLaterAsynchronously(Plugin, Runnable, long)
      */
     @NotNull
-    public synchronized BukkitTask runTaskLaterAsynchronously(@NotNull Plugin plugin, long delay) throws IllegalArgumentException, IllegalStateException {
+    public synchronized BukkitTask runTaskLaterAsynchronously(@NotNull final Plugin plugin, final long delay) throws IllegalArgumentException, IllegalStateException {
         checkNotYetScheduled();
         return setupTask(Bukkit.getScheduler().runTaskLaterAsynchronously(plugin, (Runnable) this, delay));
     }
@@ -112,7 +112,7 @@ public abstract class BukkitRunnable implements Runnable {
      * @see BukkitScheduler#runTaskTimer(Plugin, Runnable, long, long)
      */
     @NotNull
-    public synchronized BukkitTask runTaskTimer(@NotNull Plugin plugin, long delay, long period) throws IllegalArgumentException, IllegalStateException {
+    public synchronized BukkitTask runTaskTimer(@NotNull final Plugin plugin, final long delay, final long period) throws IllegalArgumentException, IllegalStateException {
         checkNotYetScheduled();
         return setupTask(Bukkit.getScheduler().runTaskTimer(plugin, (Runnable) this, delay, period));
     }
@@ -135,7 +135,7 @@ public abstract class BukkitRunnable implements Runnable {
      *     long)
      */
     @NotNull
-    public synchronized BukkitTask runTaskTimerAsynchronously(@NotNull Plugin plugin, long delay, long period) throws IllegalArgumentException, IllegalStateException {
+    public synchronized BukkitTask runTaskTimerAsynchronously(@NotNull final Plugin plugin, final long delay, final long period) throws IllegalArgumentException, IllegalStateException {
         checkNotYetScheduled();
         return setupTask(Bukkit.getScheduler().runTaskTimerAsynchronously(plugin, (Runnable) this, delay, period));
     }
diff --git a/src/main/java/org/bukkit/scoreboard/Criteria.java b/src/main/java/org/bukkit/scoreboard/Criteria.java
index fd1ec403cb9022b5f0790498b30768ad73fa9265..25bfa9cb411d4ea5ba3ea31301aec2a666b3581b 100644
--- a/src/main/java/org/bukkit/scoreboard/Criteria.java
+++ b/src/main/java/org/bukkit/scoreboard/Criteria.java
@@ -245,11 +245,11 @@ public interface Criteria {
      * {@link Material#isItem()} is false
      */
     @NotNull
-    public static Criteria statistic(@NotNull Statistic statistic, @NotNull Material material) {
+    public static Criteria statistic(@NotNull final Statistic statistic, @NotNull final Material material) {
         Preconditions.checkArgument(statistic != null, "statistic must not be null");
         Preconditions.checkArgument(material != null, "material must not be null");
 
-        Type type = statistic.getType();
+        final Type type = statistic.getType();
         Preconditions.checkArgument(type == Type.BLOCK || type == Type.ITEM, "statistic type must be either BLOCK or ITEM, given %s", type);
         Preconditions.checkArgument(type != Type.BLOCK || material.isBlock(), "statistic type is BLOCK but got non-block Material, %s", material);
         Preconditions.checkArgument(type != Type.ITEM || material.isItem(), "statistic type is ITEM but got non-item Material, %s", material);
@@ -304,7 +304,7 @@ public interface Criteria {
      * @throws IllegalArgumentException if {@link Statistic#getType()} is not {@link Type#ENTITY}
      */
     @NotNull
-    public static Criteria statistic(@NotNull Statistic statistic, @NotNull EntityType entityType) {
+    public static Criteria statistic(@NotNull final Statistic statistic, @NotNull final EntityType entityType) {
         Preconditions.checkArgument(statistic != null, "statistic must not be null");
         Preconditions.checkArgument(entityType != null, "entityType must not be null");
         Preconditions.checkArgument(statistic.getType() == Type.ENTITY, "statistic type must be ENTITY, given %s", statistic.getType());
@@ -338,7 +338,7 @@ public interface Criteria {
      * @return the criteria
      */
     @NotNull
-    public static Criteria statistic(@NotNull Statistic statistic) {
+    public static Criteria statistic(@NotNull final Statistic statistic) {
         Preconditions.checkArgument(statistic != null, "statistic must not be null");
         return Bukkit.getScoreboardCriteria("minecraft.custom:minecraft." + statistic.getKey().getKey());
     }
@@ -351,7 +351,7 @@ public interface Criteria {
      * @return the created criteria
      */
     @NotNull
-    public static Criteria create(@NotNull String name) {
+    public static Criteria create(@NotNull final String name) {
         return Bukkit.getScoreboardCriteria(name);
     }
 
diff --git a/src/main/java/org/bukkit/scoreboard/DisplaySlot.java b/src/main/java/org/bukkit/scoreboard/DisplaySlot.java
index 93ae483486fad4322040221271cbb28671e5e8fe..a00f944887e304951f628d0e797c6415c3a9d2f3 100644
--- a/src/main/java/org/bukkit/scoreboard/DisplaySlot.java
+++ b/src/main/java/org/bukkit/scoreboard/DisplaySlot.java
@@ -33,11 +33,11 @@ public enum DisplaySlot {
 
     private final @NotNull String id;
 
-    DisplaySlot(@org.jetbrains.annotations.NotNull String id) {
+    DisplaySlot(@org.jetbrains.annotations.NotNull final String id) {
         this.id = id;
     }
 
-    DisplaySlot(@org.jetbrains.annotations.NotNull NamedTextColor color) {
+    DisplaySlot(@org.jetbrains.annotations.NotNull final NamedTextColor color) {
         this.id = "sidebar.team." + color;
     }
 
diff --git a/src/main/java/org/bukkit/scoreboard/Team.java b/src/main/java/org/bukkit/scoreboard/Team.java
index 06a5d3177ca7ab90c3fd9d2053b2ec5e887c7c62..99bb53d87fa73499b6a6b72101021aeaea5b83ce 100644
--- a/src/main/java/org/bukkit/scoreboard/Team.java
+++ b/src/main/java/org/bukkit/scoreboard/Team.java
@@ -334,7 +334,7 @@ public interface Team {
      * @throws IllegalArgumentException if entities are null
      * @throws IllegalStateException if this team has been unregistered
      */
-    default void addEntities(@NotNull org.bukkit.entity.Entity @NotNull ...entities) {
+    default void addEntities(@NotNull final org.bukkit.entity.Entity @NotNull ...entities) {
         this.addEntities(java.util.List.of(entities));
     }
 
@@ -360,7 +360,7 @@ public interface Team {
      * @throws IllegalArgumentException if entries are null
      * @throws IllegalStateException if this team has been unregistered
      */
-    default void addEntries(@NotNull String... entries) throws IllegalStateException, IllegalArgumentException {
+    default void addEntries(@NotNull final String... entries) throws IllegalStateException, IllegalArgumentException {
         this.addEntries(java.util.List.of(entries));
     }
 
@@ -409,7 +409,7 @@ public interface Team {
      * @throws IllegalArgumentException if entities is null
      * @throws IllegalStateException if this team has been unregistered
      */
-    default boolean removeEntities(@NotNull org.bukkit.entity.Entity @NotNull ... entities) throws IllegalStateException, IllegalArgumentException {
+    default boolean removeEntities(@NotNull final org.bukkit.entity.Entity @NotNull ... entities) throws IllegalStateException, IllegalArgumentException {
         return this.removeEntities(java.util.List.of(entities));
     }
 
@@ -433,7 +433,7 @@ public interface Team {
      * @throws IllegalArgumentException if entries is null
      * @throws IllegalStateException if this team has been unregistered
      */
-    default boolean removeEntries(@NotNull String... entries) throws IllegalStateException, IllegalArgumentException {
+    default boolean removeEntries(@NotNull final String... entries) throws IllegalStateException, IllegalArgumentException {
         return this.removeEntries(java.util.List.of(entries));
     }
 
diff --git a/src/main/java/org/bukkit/util/BlockIterator.java b/src/main/java/org/bukkit/util/BlockIterator.java
index 47c801f214f8255c98d8ff97d25e3cd031649669..5fac5f76b472a5125f3440811425944b57371fba 100644
--- a/src/main/java/org/bukkit/util/BlockIterator.java
+++ b/src/main/java/org/bukkit/util/BlockIterator.java
@@ -52,11 +52,11 @@ public class BlockIterator implements Iterator<Block> {
      *     unloaded chunks. A value of 0 indicates no limit
      *
      */
-    public BlockIterator(@NotNull World world, @NotNull Vector start, @NotNull Vector direction, double yOffset, int maxDistance) {
+    public BlockIterator(@NotNull final World world, @NotNull final Vector start, @NotNull final Vector direction, final double yOffset, final int maxDistance) {
         this.world = world;
         this.maxDistance = maxDistance;
 
-        Vector startClone = start.clone();
+        final Vector startClone = start.clone();
 
         startClone.setY(startClone.getY() + yOffset);
 
@@ -70,7 +70,7 @@ public class BlockIterator implements Iterator<Block> {
         double secondPosition = 0;
         double thirdPosition = 0;
 
-        Block startBlock = this.world.getBlockAt(floor(startClone.getX()), floor(startClone.getY()), floor(startClone.getZ()));
+        final Block startBlock = this.world.getBlockAt(floor(startClone.getX()), floor(startClone.getY()), floor(startClone.getZ()));
 
         if (getXLength(direction) > mainDirection) {
             mainFace = getXFace(direction);
@@ -114,9 +114,9 @@ public class BlockIterator implements Iterator<Block> {
 
         // trace line backwards to find intercept with plane perpendicular to the main axis
 
-        double d = mainPosition / mainDirection; // how far to hit face behind
-        double secondd = secondPosition - secondDirection * d;
-        double thirdd = thirdPosition - thirdDirection * d;
+        final double d = mainPosition / mainDirection; // how far to hit face behind
+        final double secondd = secondPosition - secondDirection * d;
+        final double thirdd = thirdPosition - thirdDirection * d;
 
         // Guarantee that the ray will pass though the start block.
         // It is possible that it would miss due to rounding
@@ -176,47 +176,47 @@ public class BlockIterator implements Iterator<Block> {
 
     }
 
-    private boolean blockEquals(@NotNull Block a, @NotNull Block b) {
+    private boolean blockEquals(@NotNull final Block a, @NotNull final Block b) {
         return a.getX() == b.getX() && a.getY() == b.getY() && a.getZ() == b.getZ();
     }
 
-    private @NotNull BlockFace getXFace(@NotNull Vector direction) {
+    private @NotNull BlockFace getXFace(@NotNull final Vector direction) {
         return ((direction.getX() > 0) ? BlockFace.EAST : BlockFace.WEST);
     }
 
-    private @NotNull BlockFace getYFace(@NotNull Vector direction) {
+    private @NotNull BlockFace getYFace(@NotNull final Vector direction) {
         return ((direction.getY() > 0) ? BlockFace.UP : BlockFace.DOWN);
     }
 
-    private @NotNull BlockFace getZFace(@NotNull Vector direction) {
+    private @NotNull BlockFace getZFace(@NotNull final Vector direction) {
         return ((direction.getZ() > 0) ? BlockFace.SOUTH : BlockFace.NORTH);
     }
 
-    private double getXLength(@NotNull Vector direction) {
+    private double getXLength(@NotNull final Vector direction) {
         return Math.abs(direction.getX());
     }
 
-    private double getYLength(@NotNull Vector direction) {
+    private double getYLength(@NotNull final Vector direction) {
         return Math.abs(direction.getY());
     }
 
-    private double getZLength(@NotNull Vector direction) {
+    private double getZLength(@NotNull final Vector direction) {
         return Math.abs(direction.getZ());
     }
 
-    private double getPosition(double direction, double position, int blockPosition) {
+    private double getPosition(final double direction, final double position, final int blockPosition) {
         return direction > 0 ? (position - blockPosition) : (blockPosition + 1 - position);
     }
 
-    private double getXPosition(@NotNull Vector direction, @NotNull Vector position, @NotNull Block block) {
+    private double getXPosition(@NotNull final Vector direction, @NotNull final Vector position, @NotNull final Block block) {
         return getPosition(direction.getX(), position.getX(), block.getX());
     }
 
-    private double getYPosition(@NotNull Vector direction, @NotNull Vector position, @NotNull Block block) {
+    private double getYPosition(@NotNull final Vector direction, @NotNull final Vector position, @NotNull final Block block) {
         return getPosition(direction.getY(), position.getY(), block.getY());
     }
 
-    private double getZPosition(@NotNull Vector direction, @NotNull Vector position, @NotNull Block block) {
+    private double getZPosition(@NotNull final Vector direction, @NotNull final Vector position, @NotNull final Block block) {
         return getPosition(direction.getZ(), position.getZ(), block.getZ());
     }
 
@@ -232,7 +232,7 @@ public class BlockIterator implements Iterator<Block> {
      *     trace. Setting this value above 140 may lead to problems with
      *     unloaded chunks. A value of 0 indicates no limit
      */
-    public BlockIterator(@NotNull Location loc, double yOffset, int maxDistance) {
+    public BlockIterator(@NotNull final Location loc, final double yOffset, final int maxDistance) {
         this(loc.getWorld(), loc.toVector(), loc.getDirection(), yOffset, maxDistance);
     }
 
@@ -246,7 +246,7 @@ public class BlockIterator implements Iterator<Block> {
      *     by this value
      */
 
-    public BlockIterator(@NotNull Location loc, double yOffset) {
+    public BlockIterator(@NotNull final Location loc, final double yOffset) {
         this(loc.getWorld(), loc.toVector(), loc.getDirection(), yOffset, 0);
     }
 
@@ -258,7 +258,7 @@ public class BlockIterator implements Iterator<Block> {
      * @param loc The location for the start of the ray trace
      */
 
-    public BlockIterator(@NotNull Location loc) {
+    public BlockIterator(@NotNull final Location loc) {
         this(loc, 0D);
     }
 
@@ -273,7 +273,7 @@ public class BlockIterator implements Iterator<Block> {
      *     unloaded chunks. A value of 0 indicates no limit
      */
 
-    public BlockIterator(@NotNull LivingEntity entity, int maxDistance) {
+    public BlockIterator(@NotNull final LivingEntity entity, final int maxDistance) {
         this(entity.getLocation(), entity.getEyeHeight(), maxDistance);
     }
 
@@ -285,7 +285,7 @@ public class BlockIterator implements Iterator<Block> {
      * @param entity Information from the entity is used to set up the trace
      */
 
-    public BlockIterator(@NotNull LivingEntity entity) {
+    public BlockIterator(@NotNull final LivingEntity entity) {
         this(entity, 0);
     }
 
diff --git a/src/main/java/org/bukkit/util/BlockVector.java b/src/main/java/org/bukkit/util/BlockVector.java
index e0feeb33cb6a934598bcac58899aa6a69f29403a..7151d12434182fbbd5b0bcc65d9e13205d21b6e4 100644
--- a/src/main/java/org/bukkit/util/BlockVector.java
+++ b/src/main/java/org/bukkit/util/BlockVector.java
@@ -27,7 +27,7 @@ public class BlockVector extends Vector {
      *
      * @param vec The other vector.
      */
-    public BlockVector(@NotNull Vector vec) {
+    public BlockVector(@NotNull final Vector vec) {
         this.x = vec.getX();
         this.y = vec.getY();
         this.z = vec.getZ();
@@ -40,7 +40,7 @@ public class BlockVector extends Vector {
      * @param y Y component
      * @param z Z component
      */
-    public BlockVector(int x, int y, int z) {
+    public BlockVector(final int x, final int y, final int z) {
         this.x = x;
         this.y = y;
         this.z = z;
@@ -53,7 +53,7 @@ public class BlockVector extends Vector {
      * @param y Y component
      * @param z Z component
      */
-    public BlockVector(double x, double y, double z) {
+    public BlockVector(final double x, final double y, final double z) {
         this.x = x;
         this.y = y;
         this.z = z;
@@ -66,7 +66,7 @@ public class BlockVector extends Vector {
      * @param y Y component
      * @param z Z component
      */
-    public BlockVector(float x, float y, float z) {
+    public BlockVector(final float x, final float y, final float z) {
         this.x = x;
         this.y = y;
         this.z = z;
@@ -79,11 +79,11 @@ public class BlockVector extends Vector {
      * @return whether the other object is equivalent
      */
     @Override
-    public boolean equals(Object obj) {
+    public boolean equals(final Object obj) {
         if (!(obj instanceof BlockVector)) {
             return false;
         }
-        BlockVector other = (BlockVector) obj;
+        final BlockVector other = (BlockVector) obj;
 
         return (int) other.getX() == (int) this.x && (int) other.getY() == (int) this.y && (int) other.getZ() == (int) this.z;
 
@@ -110,7 +110,7 @@ public class BlockVector extends Vector {
     }
 
     @NotNull
-    public static BlockVector deserialize(@NotNull Map<String, Object> args) {
+    public static BlockVector deserialize(@NotNull final Map<String, Object> args) {
         double x = 0;
         double y = 0;
         double z = 0;
diff --git a/src/main/java/org/bukkit/util/BoundingBox.java b/src/main/java/org/bukkit/util/BoundingBox.java
index 5ee6e4b323085b8635b255ee7ca3ffc50c539de3..52f195fd0fc9f249df3c86a7526f898d7924f09e 100644
--- a/src/main/java/org/bukkit/util/BoundingBox.java
+++ b/src/main/java/org/bukkit/util/BoundingBox.java
@@ -38,7 +38,7 @@ public class BoundingBox implements Cloneable, ConfigurationSerializable {
      * @return the bounding box
      */
     @NotNull
-    public static BoundingBox of(@NotNull Vector corner1, @NotNull Vector corner2) {
+    public static BoundingBox of(@NotNull final Vector corner1, @NotNull final Vector corner2) {
         Preconditions.checkArgument(corner1 != null, "Corner1 is null!");
         Preconditions.checkArgument(corner2 != null, "Corner2 is null!");
         return new BoundingBox(corner1.getX(), corner1.getY(), corner1.getZ(), corner2.getX(), corner2.getY(), corner2.getZ());
@@ -53,7 +53,7 @@ public class BoundingBox implements Cloneable, ConfigurationSerializable {
      * @return the bounding box
      */
     @NotNull
-    public static BoundingBox of(@NotNull Location corner1, @NotNull Location corner2) {
+    public static BoundingBox of(@NotNull final Location corner1, @NotNull final Location corner2) {
         Preconditions.checkArgument(corner1 != null, "Corner1 is null!");
         Preconditions.checkArgument(corner2 != null, "Corner2 is null!");
         Preconditions.checkArgument(Objects.equals(corner1.getWorld(), corner2.getWorld()), "Locations from different worlds!");
@@ -71,24 +71,24 @@ public class BoundingBox implements Cloneable, ConfigurationSerializable {
      * @return the bounding box
      */
     @NotNull
-    public static BoundingBox of(@NotNull Block corner1, @NotNull Block corner2) {
+    public static BoundingBox of(@NotNull final Block corner1, @NotNull final Block corner2) {
         Preconditions.checkArgument(corner1 != null, "Corner1 is null!");
         Preconditions.checkArgument(corner2 != null, "Corner2 is null!");
         Preconditions.checkArgument(Objects.equals(corner1.getWorld(), corner2.getWorld()), "Blocks from different worlds!");
 
-        int x1 = corner1.getX();
-        int y1 = corner1.getY();
-        int z1 = corner1.getZ();
-        int x2 = corner2.getX();
-        int y2 = corner2.getY();
-        int z2 = corner2.getZ();
+        final int x1 = corner1.getX();
+        final int y1 = corner1.getY();
+        final int z1 = corner1.getZ();
+        final int x2 = corner2.getX();
+        final int y2 = corner2.getY();
+        final int z2 = corner2.getZ();
 
-        int minX = Math.min(x1, x2);
-        int minY = Math.min(y1, y2);
-        int minZ = Math.min(z1, z2);
-        int maxX = Math.max(x1, x2) + 1;
-        int maxY = Math.max(y1, y2) + 1;
-        int maxZ = Math.max(z1, z2) + 1;
+        final int minX = Math.min(x1, x2);
+        final int minY = Math.min(y1, y2);
+        final int minZ = Math.min(z1, z2);
+        final int maxX = Math.max(x1, x2) + 1;
+        final int maxY = Math.max(y1, y2) + 1;
+        final int maxZ = Math.max(z1, z2) + 1;
 
         return new BoundingBox(minX, minY, minZ, maxX, maxY, maxZ);
     }
@@ -100,7 +100,7 @@ public class BoundingBox implements Cloneable, ConfigurationSerializable {
      * @return the bounding box
      */
     @NotNull
-    public static BoundingBox of(@NotNull Block block) {
+    public static BoundingBox of(@NotNull final Block block) {
         Preconditions.checkArgument(block != null, "Block is null!");
         return new BoundingBox(block.getX(), block.getY(), block.getZ(), block.getX() + 1, block.getY() + 1, block.getZ() + 1);
     }
@@ -115,7 +115,7 @@ public class BoundingBox implements Cloneable, ConfigurationSerializable {
      * @return the bounding box
      */
     @NotNull
-    public static BoundingBox of(@NotNull Vector center, double x, double y, double z) {
+    public static BoundingBox of(@NotNull final Vector center, final double x, final double y, final double z) {
         Preconditions.checkArgument(center != null, "Center is null!");
         return new BoundingBox(center.getX() - x, center.getY() - y, center.getZ() - z, center.getX() + x, center.getY() + y, center.getZ() + z);
     }
@@ -130,7 +130,7 @@ public class BoundingBox implements Cloneable, ConfigurationSerializable {
      * @return the bounding box
      */
     @NotNull
-    public static BoundingBox of(@NotNull Location center, double x, double y, double z) {
+    public static BoundingBox of(@NotNull final Location center, final double x, final double y, final double z) {
         Preconditions.checkArgument(center != null, "Center is null!");
         return new BoundingBox(center.getX() - x, center.getY() - y, center.getZ() - z, center.getX() + x, center.getY() + y, center.getZ() + z);
     }
@@ -160,7 +160,7 @@ public class BoundingBox implements Cloneable, ConfigurationSerializable {
      * @param y2 the second corner's y value
      * @param z2 the second corner's z value
      */
-    public BoundingBox(double x1, double y1, double z1, double x2, double y2, double z2) {
+    public BoundingBox(final double x1, final double y1, final double z1, final double x2, final double y2, final double z2) {
         this.resize(x1, y1, z1, x2, y2, z2);
     }
 
@@ -176,7 +176,7 @@ public class BoundingBox implements Cloneable, ConfigurationSerializable {
      * @return this bounding box (resized)
      */
     @NotNull
-    public BoundingBox resize(double x1, double y1, double z1, double x2, double y2, double z2) {
+    public BoundingBox resize(final double x1, final double y1, final double z1, final double x2, final double y2, final double z2) {
         NumberConversions.checkFinite(x1, "x1 not finite");
         NumberConversions.checkFinite(y1, "y1 not finite");
         NumberConversions.checkFinite(z1, "z1 not finite");
@@ -347,7 +347,7 @@ public class BoundingBox implements Cloneable, ConfigurationSerializable {
      * @return this bounding box
      */
     @NotNull
-    public BoundingBox copy(@NotNull BoundingBox other) {
+    public BoundingBox copy(@NotNull final BoundingBox other) {
         Preconditions.checkArgument(other != null, "Other bounding box is null!");
         return this.resize(other.getMinX(), other.getMinY(), other.getMinZ(), other.getMaxX(), other.getMaxY(), other.getMaxZ());
     }
@@ -369,7 +369,7 @@ public class BoundingBox implements Cloneable, ConfigurationSerializable {
      * @return this bounding box (now expanded)
      */
     @NotNull
-    public BoundingBox expand(double negativeX, double negativeY, double negativeZ, double positiveX, double positiveY, double positiveZ) {
+    public BoundingBox expand(final double negativeX, final double negativeY, final double negativeZ, final double positiveX, final double positiveY, final double positiveZ) {
         if (negativeX == 0.0D && negativeY == 0.0D && negativeZ == 0.0D && positiveX == 0.0D && positiveY == 0.0D && positiveZ == 0.0D) {
             return this;
         }
@@ -382,7 +382,7 @@ public class BoundingBox implements Cloneable, ConfigurationSerializable {
 
         // limit shrinking:
         if (newMinX > newMaxX) {
-            double centerX = this.getCenterX();
+            final double centerX = this.getCenterX();
             if (newMaxX >= centerX) {
                 newMinX = newMaxX;
             } else if (newMinX <= centerX) {
@@ -393,7 +393,7 @@ public class BoundingBox implements Cloneable, ConfigurationSerializable {
             }
         }
         if (newMinY > newMaxY) {
-            double centerY = this.getCenterY();
+            final double centerY = this.getCenterY();
             if (newMaxY >= centerY) {
                 newMinY = newMaxY;
             } else if (newMinY <= centerY) {
@@ -404,7 +404,7 @@ public class BoundingBox implements Cloneable, ConfigurationSerializable {
             }
         }
         if (newMinZ > newMaxZ) {
-            double centerZ = this.getCenterZ();
+            final double centerZ = this.getCenterZ();
             if (newMaxZ >= centerZ) {
                 newMinZ = newMaxZ;
             } else if (newMinZ <= centerZ) {
@@ -433,7 +433,7 @@ public class BoundingBox implements Cloneable, ConfigurationSerializable {
      * @return this bounding box (now expanded)
      */
     @NotNull
-    public BoundingBox expand(double x, double y, double z) {
+    public BoundingBox expand(final double x, final double y, final double z) {
         return this.expand(x, y, z, x, y, z);
     }
 
@@ -448,11 +448,11 @@ public class BoundingBox implements Cloneable, ConfigurationSerializable {
      * @return this bounding box (now expanded)
      */
     @NotNull
-    public BoundingBox expand(@NotNull Vector expansion) {
+    public BoundingBox expand(@NotNull final Vector expansion) {
         Preconditions.checkArgument(expansion != null, "Expansion is null!");
-        double x = expansion.getX();
-        double y = expansion.getY();
-        double z = expansion.getZ();
+        final double x = expansion.getX();
+        final double y = expansion.getY();
+        final double z = expansion.getZ();
         return this.expand(x, y, z, x, y, z);
     }
 
@@ -466,7 +466,7 @@ public class BoundingBox implements Cloneable, ConfigurationSerializable {
      * @return this bounding box (now expanded)
      */
     @NotNull
-    public BoundingBox expand(double expansion) {
+    public BoundingBox expand(final double expansion) {
         return this.expand(expansion, expansion, expansion, expansion, expansion, expansion);
     }
 
@@ -484,16 +484,16 @@ public class BoundingBox implements Cloneable, ConfigurationSerializable {
      * @return this bounding box (now expanded)
      */
     @NotNull
-    public BoundingBox expand(double dirX, double dirY, double dirZ, double expansion) {
+    public BoundingBox expand(final double dirX, final double dirY, final double dirZ, final double expansion) {
         if (expansion == 0.0D) return this;
         if (dirX == 0.0D && dirY == 0.0D && dirZ == 0.0D) return this;
 
-        double negativeX = (dirX < 0.0D ? (-dirX * expansion) : 0.0D);
-        double negativeY = (dirY < 0.0D ? (-dirY * expansion) : 0.0D);
-        double negativeZ = (dirZ < 0.0D ? (-dirZ * expansion) : 0.0D);
-        double positiveX = (dirX > 0.0D ? (dirX * expansion) : 0.0D);
-        double positiveY = (dirY > 0.0D ? (dirY * expansion) : 0.0D);
-        double positiveZ = (dirZ > 0.0D ? (dirZ * expansion) : 0.0D);
+        final double negativeX = (dirX < 0.0D ? (-dirX * expansion) : 0.0D);
+        final double negativeY = (dirY < 0.0D ? (-dirY * expansion) : 0.0D);
+        final double negativeZ = (dirZ < 0.0D ? (-dirZ * expansion) : 0.0D);
+        final double positiveX = (dirX > 0.0D ? (dirX * expansion) : 0.0D);
+        final double positiveY = (dirY > 0.0D ? (dirY * expansion) : 0.0D);
+        final double positiveZ = (dirZ > 0.0D ? (dirZ * expansion) : 0.0D);
         return this.expand(negativeX, negativeY, negativeZ, positiveX, positiveY, positiveZ);
     }
 
@@ -509,7 +509,7 @@ public class BoundingBox implements Cloneable, ConfigurationSerializable {
      * @return this bounding box (now expanded)
      */
     @NotNull
-    public BoundingBox expand(@NotNull Vector direction, double expansion) {
+    public BoundingBox expand(@NotNull final Vector direction, final double expansion) {
         Preconditions.checkArgument(direction != null, "Direction is null!");
         return this.expand(direction.getX(), direction.getY(), direction.getZ(), expansion);
     }
@@ -526,7 +526,7 @@ public class BoundingBox implements Cloneable, ConfigurationSerializable {
      * @return this bounding box (now expanded)
      */
     @NotNull
-    public BoundingBox expand(@NotNull BlockFace blockFace, double expansion) {
+    public BoundingBox expand(@NotNull final BlockFace blockFace, final double expansion) {
         Preconditions.checkArgument(blockFace != null, "Block face is null!");
         if (blockFace == BlockFace.SELF) return this;
 
@@ -547,7 +547,7 @@ public class BoundingBox implements Cloneable, ConfigurationSerializable {
      * @return this bounding box (now expanded)
      */
     @NotNull
-    public BoundingBox expandDirectional(double dirX, double dirY, double dirZ) {
+    public BoundingBox expandDirectional(final double dirX, final double dirY, final double dirZ) {
         return this.expand(dirX, dirY, dirZ, 1.0D);
     }
 
@@ -562,7 +562,7 @@ public class BoundingBox implements Cloneable, ConfigurationSerializable {
      * @return this bounding box (now expanded)
      */
     @NotNull
-    public BoundingBox expandDirectional(@NotNull Vector direction) {
+    public BoundingBox expandDirectional(@NotNull final Vector direction) {
         Preconditions.checkArgument(direction != null, "Expansion is null!");
         return this.expand(direction.getX(), direction.getY(), direction.getZ(), 1.0D);
     }
@@ -577,13 +577,13 @@ public class BoundingBox implements Cloneable, ConfigurationSerializable {
      * @see #contains(double, double, double)
      */
     @NotNull
-    public BoundingBox union(double posX, double posY, double posZ) {
-        double newMinX = Math.min(this.minX, posX);
-        double newMinY = Math.min(this.minY, posY);
-        double newMinZ = Math.min(this.minZ, posZ);
-        double newMaxX = Math.max(this.maxX, posX);
-        double newMaxY = Math.max(this.maxY, posY);
-        double newMaxZ = Math.max(this.maxZ, posZ);
+    public BoundingBox union(final double posX, final double posY, final double posZ) {
+        final double newMinX = Math.min(this.minX, posX);
+        final double newMinY = Math.min(this.minY, posY);
+        final double newMinZ = Math.min(this.minZ, posZ);
+        final double newMaxX = Math.max(this.maxX, posX);
+        final double newMaxY = Math.max(this.maxY, posY);
+        final double newMaxZ = Math.max(this.maxZ, posZ);
         if (newMinX == this.minX && newMinY == this.minY && newMinZ == this.minZ && newMaxX == this.maxX && newMaxY == this.maxY && newMaxZ == this.maxZ) {
             return this;
         }
@@ -598,7 +598,7 @@ public class BoundingBox implements Cloneable, ConfigurationSerializable {
      * @see #contains(double, double, double)
      */
     @NotNull
-    public BoundingBox union(@NotNull Vector position) {
+    public BoundingBox union(@NotNull final Vector position) {
         Preconditions.checkArgument(position != null, "Position is null!");
         return this.union(position.getX(), position.getY(), position.getZ());
     }
@@ -611,7 +611,7 @@ public class BoundingBox implements Cloneable, ConfigurationSerializable {
      * @see #contains(double, double, double)
      */
     @NotNull
-    public BoundingBox union(@NotNull Location position) {
+    public BoundingBox union(@NotNull final Location position) {
         Preconditions.checkArgument(position != null, "Position is null!");
         return this.union(position.getX(), position.getY(), position.getZ());
     }
@@ -624,15 +624,15 @@ public class BoundingBox implements Cloneable, ConfigurationSerializable {
      * @return this bounding box (now expanded)
      */
     @NotNull
-    public BoundingBox union(@NotNull BoundingBox other) {
+    public BoundingBox union(@NotNull final BoundingBox other) {
         Preconditions.checkArgument(other != null, "Other bounding box is null!");
         if (this.contains(other)) return this;
-        double newMinX = Math.min(this.minX, other.minX);
-        double newMinY = Math.min(this.minY, other.minY);
-        double newMinZ = Math.min(this.minZ, other.minZ);
-        double newMaxX = Math.max(this.maxX, other.maxX);
-        double newMaxY = Math.max(this.maxY, other.maxY);
-        double newMaxZ = Math.max(this.maxZ, other.maxZ);
+        final double newMinX = Math.min(this.minX, other.minX);
+        final double newMinY = Math.min(this.minY, other.minY);
+        final double newMinZ = Math.min(this.minZ, other.minZ);
+        final double newMaxX = Math.max(this.maxX, other.maxX);
+        final double newMaxY = Math.max(this.maxY, other.maxY);
+        final double newMaxZ = Math.max(this.maxZ, other.maxZ);
         return this.resize(newMinX, newMinY, newMinZ, newMaxX, newMaxY, newMaxZ);
     }
 
@@ -645,15 +645,15 @@ public class BoundingBox implements Cloneable, ConfigurationSerializable {
      * @throws IllegalArgumentException if the bounding boxes don't overlap
      */
     @NotNull
-    public BoundingBox intersection(@NotNull BoundingBox other) {
+    public BoundingBox intersection(@NotNull final BoundingBox other) {
         Preconditions.checkArgument(other != null, "Other bounding box is null!");
         Preconditions.checkArgument(this.overlaps(other), "The bounding boxes do not overlap!");
-        double newMinX = Math.max(this.minX, other.minX);
-        double newMinY = Math.max(this.minY, other.minY);
-        double newMinZ = Math.max(this.minZ, other.minZ);
-        double newMaxX = Math.min(this.maxX, other.maxX);
-        double newMaxY = Math.min(this.maxY, other.maxY);
-        double newMaxZ = Math.min(this.maxZ, other.maxZ);
+        final double newMinX = Math.max(this.minX, other.minX);
+        final double newMinY = Math.max(this.minY, other.minY);
+        final double newMinZ = Math.max(this.minZ, other.minZ);
+        final double newMaxX = Math.min(this.maxX, other.maxX);
+        final double newMaxY = Math.min(this.maxY, other.maxY);
+        final double newMaxZ = Math.min(this.maxZ, other.maxZ);
         return this.resize(newMinX, newMinY, newMinZ, newMaxX, newMaxY, newMaxZ);
     }
 
@@ -666,7 +666,7 @@ public class BoundingBox implements Cloneable, ConfigurationSerializable {
      * @return this bounding box (now shifted)
      */
     @NotNull
-    public BoundingBox shift(double shiftX, double shiftY, double shiftZ) {
+    public BoundingBox shift(final double shiftX, final double shiftY, final double shiftZ) {
         if (shiftX == 0.0D && shiftY == 0.0D && shiftZ == 0.0D) return this;
         return this.resize(this.minX + shiftX, this.minY + shiftY, this.minZ + shiftZ,
                 this.maxX + shiftX, this.maxY + shiftY, this.maxZ + shiftZ);
@@ -679,7 +679,7 @@ public class BoundingBox implements Cloneable, ConfigurationSerializable {
      * @return this bounding box (now shifted)
      */
     @NotNull
-    public BoundingBox shift(@NotNull Vector shift) {
+    public BoundingBox shift(@NotNull final Vector shift) {
         Preconditions.checkArgument(shift != null, "Shift is null!");
         return this.shift(shift.getX(), shift.getY(), shift.getZ());
     }
@@ -691,12 +691,12 @@ public class BoundingBox implements Cloneable, ConfigurationSerializable {
      * @return this bounding box (now shifted)
      */
     @NotNull
-    public BoundingBox shift(@NotNull Location shift) {
+    public BoundingBox shift(@NotNull final Location shift) {
         Preconditions.checkArgument(shift != null, "Shift is null!");
         return this.shift(shift.getX(), shift.getY(), shift.getZ());
     }
 
-    private boolean overlaps(double minX, double minY, double minZ, double maxX, double maxY, double maxZ) {
+    private boolean overlaps(final double minX, final double minY, final double minZ, final double maxX, final double maxY, final double maxZ) {
         return this.minX < maxX && this.maxX > minX
                 && this.minY < maxY && this.maxY > minY
                 && this.minZ < maxZ && this.maxZ > minZ;
@@ -711,7 +711,7 @@ public class BoundingBox implements Cloneable, ConfigurationSerializable {
      * @param other the other bounding box
      * @return <code>true</code> if overlapping
      */
-    public boolean overlaps(@NotNull BoundingBox other) {
+    public boolean overlaps(@NotNull final BoundingBox other) {
         Preconditions.checkArgument(other != null, "Other bounding box is null!");
         return this.overlaps(other.minX, other.minY, other.minZ, other.maxX, other.maxY, other.maxZ);
     }
@@ -727,15 +727,15 @@ public class BoundingBox implements Cloneable, ConfigurationSerializable {
      * @param max the second corner
      * @return <code>true</code> if overlapping
      */
-    public boolean overlaps(@NotNull Vector min, @NotNull Vector max) {
+    public boolean overlaps(@NotNull final Vector min, @NotNull final Vector max) {
         Preconditions.checkArgument(min != null, "Min is null!");
         Preconditions.checkArgument(max != null, "Max is null!");
-        double x1 = min.getX();
-        double y1 = min.getY();
-        double z1 = min.getZ();
-        double x2 = max.getX();
-        double y2 = max.getY();
-        double z2 = max.getZ();
+        final double x1 = min.getX();
+        final double y1 = min.getY();
+        final double z1 = min.getZ();
+        final double x2 = max.getX();
+        final double y2 = max.getY();
+        final double z2 = max.getZ();
         return this.overlaps(Math.min(x1, x2), Math.min(y1, y2), Math.min(z1, z2),
                 Math.max(x1, x2), Math.max(y1, y2), Math.max(z1, z2));
     }
@@ -754,7 +754,7 @@ public class BoundingBox implements Cloneable, ConfigurationSerializable {
      * @param z the position's z coordinates
      * @return <code>true</code> if the bounding box contains the position
      */
-    public boolean contains(double x, double y, double z) {
+    public boolean contains(final double x, final double y, final double z) {
         return x >= this.minX && x < this.maxX
                 && y >= this.minY && y < this.maxY
                 && z >= this.minZ && z < this.maxZ;
@@ -772,12 +772,12 @@ public class BoundingBox implements Cloneable, ConfigurationSerializable {
      * @param position the position
      * @return <code>true</code> if the bounding box contains the position
      */
-    public boolean contains(@NotNull Vector position) {
+    public boolean contains(@NotNull final Vector position) {
         Preconditions.checkArgument(position != null, "Position is null!");
         return this.contains(position.getX(), position.getY(), position.getZ());
     }
 
-    private boolean contains(double minX, double minY, double minZ, double maxX, double maxY, double maxZ) {
+    private boolean contains(final double minX, final double minY, final double minZ, final double maxX, final double maxY, final double maxZ) {
         return this.minX <= minX && this.maxX >= maxX
                 && this.minY <= minY && this.maxY >= maxY
                 && this.minZ <= minZ && this.maxZ >= maxZ;
@@ -790,7 +790,7 @@ public class BoundingBox implements Cloneable, ConfigurationSerializable {
      * @return <code>true</code> if the bounding box contains the given bounding
      * box
      */
-    public boolean contains(@NotNull BoundingBox other) {
+    public boolean contains(@NotNull final BoundingBox other) {
         Preconditions.checkArgument(other != null, "Other bounding box is null!");
         return this.contains(other.minX, other.minY, other.minZ, other.maxX, other.maxY, other.maxZ);
     }
@@ -804,15 +804,15 @@ public class BoundingBox implements Cloneable, ConfigurationSerializable {
      * @return <code>true</code> if the bounding box contains the specified
      *     bounding box
      */
-    public boolean contains(@NotNull Vector min, @NotNull Vector max) {
+    public boolean contains(@NotNull final Vector min, @NotNull final Vector max) {
         Preconditions.checkArgument(min != null, "Min is null!");
         Preconditions.checkArgument(max != null, "Max is null!");
-        double x1 = min.getX();
-        double y1 = min.getY();
-        double z1 = min.getZ();
-        double x2 = max.getX();
-        double y2 = max.getY();
-        double z2 = max.getZ();
+        final double x1 = min.getX();
+        final double y1 = min.getY();
+        final double z1 = min.getZ();
+        final double x2 = max.getX();
+        final double y2 = max.getY();
+        final double z2 = max.getZ();
         return this.contains(Math.min(x1, x2), Math.min(y1, y2), Math.min(z1, z2),
                 Math.max(x1, x2), Math.max(y1, y2), Math.max(z1, z2));
     }
@@ -830,7 +830,7 @@ public class BoundingBox implements Cloneable, ConfigurationSerializable {
      * @return the ray trace hit result, or <code>null</code> if there is no hit
      */
     @Nullable
-    public RayTraceResult rayTrace(@NotNull Vector start, @NotNull Vector direction, double maxDistance) {
+    public RayTraceResult rayTrace(@NotNull final Vector start, @NotNull final Vector direction, final double maxDistance) {
         Preconditions.checkArgument(start != null, "Start is null!");
         start.checkFinite();
         Preconditions.checkArgument(direction != null, "Direction is null!");
@@ -839,22 +839,22 @@ public class BoundingBox implements Cloneable, ConfigurationSerializable {
         if (maxDistance < 0.0D) return null;
 
         // ray start:
-        double startX = start.getX();
-        double startY = start.getY();
-        double startZ = start.getZ();
+        final double startX = start.getX();
+        final double startY = start.getY();
+        final double startZ = start.getZ();
 
         // ray direction:
-        Vector dir = direction.clone().normalizeZeros().normalize();
-        double dirX = dir.getX();
-        double dirY = dir.getY();
-        double dirZ = dir.getZ();
+        final Vector dir = direction.clone().normalizeZeros().normalize();
+        final double dirX = dir.getX();
+        final double dirY = dir.getY();
+        final double dirZ = dir.getZ();
 
         // saving a few divisions below:
         // Note: If one of the direction vector components is 0.0, these
         // divisions result in infinity. But this is not a problem.
-        double divX = 1.0D / dirX;
-        double divY = 1.0D / dirY;
-        double divZ = 1.0D / dirZ;
+        final double divX = 1.0D / dirX;
+        final double divY = 1.0D / dirY;
+        final double divZ = 1.0D / dirZ;
 
         double tMin;
         double tMax;
@@ -875,10 +875,10 @@ public class BoundingBox implements Cloneable, ConfigurationSerializable {
         }
 
         // intersections with y planes:
-        double tyMin;
-        double tyMax;
-        BlockFace hitBlockFaceYMin;
-        BlockFace hitBlockFaceYMax;
+        final double tyMin;
+        final double tyMax;
+        final BlockFace hitBlockFaceYMin;
+        final BlockFace hitBlockFaceYMax;
         if (dirY >= 0.0D) {
             tyMin = (this.minY - startY) * divY;
             tyMax = (this.maxY - startY) * divY;
@@ -903,10 +903,10 @@ public class BoundingBox implements Cloneable, ConfigurationSerializable {
         }
 
         // intersections with z planes:
-        double tzMin;
-        double tzMax;
-        BlockFace hitBlockFaceZMin;
-        BlockFace hitBlockFaceZMax;
+        final double tzMin;
+        final double tzMax;
+        final BlockFace hitBlockFaceZMin;
+        final BlockFace hitBlockFaceZMax;
         if (dirZ >= 0.0D) {
             tzMin = (this.minZ - startZ) * divZ;
             tzMax = (this.maxZ - startZ) * divZ;
@@ -938,8 +938,8 @@ public class BoundingBox implements Cloneable, ConfigurationSerializable {
         }
 
         // find the closest intersection:
-        double t;
-        BlockFace hitBlockFace;
+        final double t;
+        final BlockFace hitBlockFace;
         if (tMin < 0.0D) {
             t = tMax;
             hitBlockFace = hitBlockFaceMax;
@@ -948,7 +948,7 @@ public class BoundingBox implements Cloneable, ConfigurationSerializable {
             hitBlockFace = hitBlockFaceMin;
         }
         // reusing the newly created direction vector for the hit position:
-        Vector hitPosition = dir.multiply(t).add(start);
+        final Vector hitPosition = dir.multiply(t).add(start);
         return new RayTraceResult(hitPosition, hitBlockFace);
     }
 
@@ -973,10 +973,10 @@ public class BoundingBox implements Cloneable, ConfigurationSerializable {
     }
 
     @Override
-    public boolean equals(Object obj) {
+    public boolean equals(final Object obj) {
         if (this == obj) return true;
         if (!(obj instanceof BoundingBox)) return false;
-        BoundingBox other = (BoundingBox) obj;
+        final BoundingBox other = (BoundingBox) obj;
         if (Double.doubleToLongBits(maxX) != Double.doubleToLongBits(other.maxX)) return false;
         if (Double.doubleToLongBits(maxY) != Double.doubleToLongBits(other.maxY)) return false;
         if (Double.doubleToLongBits(maxZ) != Double.doubleToLongBits(other.maxZ)) return false;
@@ -1014,7 +1014,7 @@ public class BoundingBox implements Cloneable, ConfigurationSerializable {
     public BoundingBox clone() {
         try {
             return (BoundingBox) super.clone();
-        } catch (CloneNotSupportedException e) {
+        } catch (final CloneNotSupportedException e) {
             throw new Error(e);
         }
     }
@@ -1022,7 +1022,7 @@ public class BoundingBox implements Cloneable, ConfigurationSerializable {
     @NotNull
     @Override
     public Map<String, Object> serialize() {
-        Map<String, Object> result = new LinkedHashMap<String, Object>();
+        final Map<String, Object> result = new LinkedHashMap<String, Object>();
         result.put("minX", Double.valueOf(minX));
         result.put("minY", Double.valueOf(minY));
         result.put("minZ", Double.valueOf(minZ));
@@ -1033,7 +1033,7 @@ public class BoundingBox implements Cloneable, ConfigurationSerializable {
     }
 
     @NotNull
-    public static BoundingBox deserialize(@NotNull Map<String, Object> args) {
+    public static BoundingBox deserialize(@NotNull final Map<String, Object> args) {
         double minX = 0.0D;
         double minY = 0.0D;
         double minZ = 0.0D;
diff --git a/src/main/java/org/bukkit/util/ChatPaginator.java b/src/main/java/org/bukkit/util/ChatPaginator.java
index 7a9560f736c94aa97abc125f4cb81f8308078dce..ede674b4f6fd11e81092ae13cbfd0a48e265e9fe 100644
--- a/src/main/java/org/bukkit/util/ChatPaginator.java
+++ b/src/main/java/org/bukkit/util/ChatPaginator.java
@@ -28,7 +28,7 @@ public class ChatPaginator {
      * @return A single chat page.
      */
     @NotNull
-    public static ChatPage paginate(@Nullable String unpaginatedString, int pageNumber) {
+    public static ChatPage paginate(@Nullable final String unpaginatedString, final int pageNumber) {
         return paginate(unpaginatedString, pageNumber, GUARANTEED_NO_WRAP_CHAT_PAGE_WIDTH, CLOSED_CHAT_PAGE_HEIGHT);
     }
 
@@ -42,15 +42,15 @@ public class ChatPaginator {
      * @return A single chat page.
      */
     @NotNull
-    public static ChatPage paginate(@Nullable String unpaginatedString, int pageNumber, int lineLength, int pageHeight) {
-        String[] lines = wordWrap(unpaginatedString, lineLength);
+    public static ChatPage paginate(@Nullable final String unpaginatedString, final int pageNumber, final int lineLength, final int pageHeight) {
+        final String[] lines = wordWrap(unpaginatedString, lineLength);
 
-        int totalPages = lines.length / pageHeight + (lines.length % pageHeight == 0 ? 0 : 1);
-        int actualPageNumber = Math.min(pageNumber, totalPages);
+        final int totalPages = lines.length / pageHeight + (lines.length % pageHeight == 0 ? 0 : 1);
+        final int actualPageNumber = Math.min(pageNumber, totalPages);
 
-        int from = (actualPageNumber - 1) * pageHeight;
-        int to = Math.min(from + pageHeight, lines.length);
-        String[] selectedLines = Arrays.copyOfRange(lines, from, to);
+        final int from = (actualPageNumber - 1) * pageHeight;
+        final int to = Math.min(from + pageHeight, lines.length);
+        final String[] selectedLines = Arrays.copyOfRange(lines, from, to);
 
         return new ChatPage(selectedLines, actualPageNumber, totalPages);
     }
@@ -64,7 +64,7 @@ public class ChatPaginator {
      * @return An array of word-wrapped lines.
      */
     @NotNull
-    public static String @NotNull [] wordWrap(@Nullable String rawString, int lineLength) {
+    public static String @NotNull [] wordWrap(@Nullable final String rawString, final int lineLength) {
         // A null string is a single line
         if (rawString == null) {
             return new String[] {""};
@@ -75,14 +75,14 @@ public class ChatPaginator {
             return new String[] {rawString};
         }
 
-        char[] rawChars = (rawString + ' ').toCharArray(); // add a trailing space to trigger pagination
+        final char[] rawChars = (rawString + ' ').toCharArray(); // add a trailing space to trigger pagination
         StringBuilder word = new StringBuilder();
         StringBuilder line = new StringBuilder();
-        List<String> lines = new LinkedList<String>();
+        final List<String> lines = new LinkedList<String>();
         int lineColorChars = 0;
 
         for (int i = 0; i < rawChars.length; i++) {
-            char c = rawChars[i];
+            final char c = rawChars[i];
 
             // skip chat color modifiers
             if (c == ChatColor.COLOR_CHAR) {
@@ -104,7 +104,7 @@ public class ChatPaginator {
                     line = new StringBuilder();
                     lineColorChars = 0;
                 } else if (line.length() + 1 + word.length() - lineColorChars > lineLength) { // Line too long...break the line
-                    for (String partialWord : word.toString().split("(?<=\\G.{" + lineLength + "})")) {
+                    for (final String partialWord : word.toString().split("(?<=\\G.{" + lineLength + "})")) {
                         lines.add(line.toString());
                         line = new StringBuilder(partialWord);
                     }
@@ -135,7 +135,7 @@ public class ChatPaginator {
             final String pLine = lines.get(i - 1);
             final String subLine = lines.get(i);
 
-            String color = ChatColor.getLastColors(pLine);
+            final String color = ChatColor.getLastColors(pLine);
             lines.set(i, color + subLine);
         }
 
@@ -148,7 +148,7 @@ public class ChatPaginator {
         private final int pageNumber;
         private final int totalPages;
 
-        public ChatPage(@NotNull String[] lines, int pageNumber, int totalPages) {
+        public ChatPage(@NotNull final String[] lines, final int pageNumber, final int totalPages) {
             this.lines = lines;
             this.pageNumber = pageNumber;
             this.totalPages = totalPages;
diff --git a/src/main/java/org/bukkit/util/EulerAngle.java b/src/main/java/org/bukkit/util/EulerAngle.java
index 56ba1a70ce6311c3727d005ea9a78249248fb2a4..20471fd0aab0faa304d2a4c38b4836a60cb7e0d2 100644
--- a/src/main/java/org/bukkit/util/EulerAngle.java
+++ b/src/main/java/org/bukkit/util/EulerAngle.java
@@ -27,7 +27,7 @@ public class EulerAngle {
      * @param y the angle for the y axis in radians
      * @param z the angle for the z axis in radians
      */
-    public EulerAngle(double x, double y, double z) {
+    public EulerAngle(final double x, final double y, final double z) {
         this.x = x;
         this.y = y;
         this.z = z;
@@ -68,7 +68,7 @@ public class EulerAngle {
      * @return the resultant EulerAngle
      */
     @NotNull
-    public EulerAngle setX(double x) {
+    public EulerAngle setX(final double x) {
         return new EulerAngle(x, y, z);
     }
 
@@ -80,7 +80,7 @@ public class EulerAngle {
      * @return the resultant EulerAngle
      */
     @NotNull
-    public EulerAngle setY(double y) {
+    public EulerAngle setY(final double y) {
         return new EulerAngle(x, y, z);
     }
 
@@ -92,7 +92,7 @@ public class EulerAngle {
      * @return the resultant EulerAngle
      */
     @NotNull
-    public EulerAngle setZ(double z) {
+    public EulerAngle setZ(final double z) {
         return new EulerAngle(x, y, z);
     }
 
@@ -106,7 +106,7 @@ public class EulerAngle {
      * @return the resultant EulerAngle
      */
     @NotNull
-    public EulerAngle add(double x, double y, double z) {
+    public EulerAngle add(final double x, final double y, final double z) {
         return new EulerAngle(
                 this.x + x,
                 this.y + y,
@@ -124,16 +124,16 @@ public class EulerAngle {
      * @return the resultant EulerAngle
      */
     @NotNull
-    public EulerAngle subtract(double x, double y, double z) {
+    public EulerAngle subtract(final double x, final double y, final double z) {
         return add(-x, -y, -z);
     }
 
     @Override
-    public boolean equals(@Nullable Object o) {
+    public boolean equals(@Nullable final Object o) {
         if (this == o) return true;
         if (o == null || getClass() != o.getClass()) return false;
 
-        EulerAngle that = (EulerAngle) o;
+        final EulerAngle that = (EulerAngle) o;
 
         return Double.compare(that.x, x) == 0
                 && Double.compare(that.y, y) == 0
diff --git a/src/main/java/org/bukkit/util/FileUtil.java b/src/main/java/org/bukkit/util/FileUtil.java
index 6e2352a3084daf05c16cc5ca86b4fa9e8b1c1e4d..2a0e5ebf18e5519ba93ec632aec3703fc84815da 100644
--- a/src/main/java/org/bukkit/util/FileUtil.java
+++ b/src/main/java/org/bukkit/util/FileUtil.java
@@ -19,7 +19,7 @@ public class FileUtil {
      * @param outFile the target filename
      * @return true on success
      */
-    public static boolean copy(@NotNull File inFile, @NotNull File outFile) {
+    public static boolean copy(@NotNull final File inFile, @NotNull final File outFile) {
         if (!inFile.exists()) {
             return false;
         }
@@ -32,12 +32,12 @@ public class FileUtil {
             out = new FileOutputStream(outFile).getChannel();
 
             long pos = 0;
-            long size = in.size();
+            final long size = in.size();
 
             while (pos < size) {
                 pos += in.transferTo(pos, 10 * 1024 * 1024, out);
             }
-        } catch (IOException ioe) {
+        } catch (final IOException ioe) {
             return false;
         } finally {
             try {
@@ -47,7 +47,7 @@ public class FileUtil {
                 if (out != null) {
                     out.close();
                 }
-            } catch (IOException ioe) {
+            } catch (final IOException ioe) {
                 return false;
             }
         }
diff --git a/src/main/java/org/bukkit/util/NumberConversions.java b/src/main/java/org/bukkit/util/NumberConversions.java
index e10b9a4e534384187e09489581f310ab3101b0f4..39e83d88637ae678aa4dfa973888f12556435d08 100644
--- a/src/main/java/org/bukkit/util/NumberConversions.java
+++ b/src/main/java/org/bukkit/util/NumberConversions.java
@@ -9,7 +9,7 @@ import org.jetbrains.annotations.Nullable;
 public final class NumberConversions {
     private NumberConversions() {}
 
-    public static int floor(double num) {
+    public static int floor(final double num) {
         final int floor = (int) num;
         return floor == num ? floor : floor - (int) (Double.doubleToRawLongBits(num) >>> 63);
     }
@@ -19,107 +19,107 @@ public final class NumberConversions {
         return floor == num ? floor : floor + (int) (~Double.doubleToRawLongBits(num) >>> 63);
     }
 
-    public static int round(double num) {
+    public static int round(final double num) {
         return floor(num + 0.5d);
     }
 
-    public static double square(double num) {
+    public static double square(final double num) {
         return num * num;
     }
 
-    public static int toInt(@Nullable Object object) {
+    public static int toInt(@Nullable final Object object) {
         if (object instanceof Number) {
             return ((Number) object).intValue();
         }
 
         try {
             return Integer.parseInt(object.toString());
-        } catch (NumberFormatException e) {
-        } catch (NullPointerException e) {
+        } catch (final NumberFormatException e) {
+        } catch (final NullPointerException e) {
         }
         return 0;
     }
 
-    public static float toFloat(@Nullable Object object) {
+    public static float toFloat(@Nullable final Object object) {
         if (object instanceof Number) {
             return ((Number) object).floatValue();
         }
 
         try {
             return Float.parseFloat(object.toString());
-        } catch (NumberFormatException e) {
-        } catch (NullPointerException e) {
+        } catch (final NumberFormatException e) {
+        } catch (final NullPointerException e) {
         }
         return 0;
     }
 
-    public static double toDouble(@Nullable Object object) {
+    public static double toDouble(@Nullable final Object object) {
         if (object instanceof Number) {
             return ((Number) object).doubleValue();
         }
 
         try {
             return Double.parseDouble(object.toString());
-        } catch (NumberFormatException e) {
-        } catch (NullPointerException e) {
+        } catch (final NumberFormatException e) {
+        } catch (final NullPointerException e) {
         }
         return 0;
     }
 
-    public static long toLong(@Nullable Object object) {
+    public static long toLong(@Nullable final Object object) {
         if (object instanceof Number) {
             return ((Number) object).longValue();
         }
 
         try {
             return Long.parseLong(object.toString());
-        } catch (NumberFormatException e) {
-        } catch (NullPointerException e) {
+        } catch (final NumberFormatException e) {
+        } catch (final NullPointerException e) {
         }
         return 0;
     }
 
-    public static short toShort(@Nullable Object object) {
+    public static short toShort(@Nullable final Object object) {
         if (object instanceof Number) {
             return ((Number) object).shortValue();
         }
 
         try {
             return Short.parseShort(object.toString());
-        } catch (NumberFormatException e) {
-        } catch (NullPointerException e) {
+        } catch (final NumberFormatException e) {
+        } catch (final NullPointerException e) {
         }
         return 0;
     }
 
-    public static byte toByte(@Nullable Object object) {
+    public static byte toByte(@Nullable final Object object) {
         if (object instanceof Number) {
             return ((Number) object).byteValue();
         }
 
         try {
             return Byte.parseByte(object.toString());
-        } catch (NumberFormatException e) {
-        } catch (NullPointerException e) {
+        } catch (final NumberFormatException e) {
+        } catch (final NullPointerException e) {
         }
         return 0;
     }
 
-    public static boolean isFinite(double d) {
+    public static boolean isFinite(final double d) {
         return Math.abs(d) <= Double.MAX_VALUE;
     }
 
-    public static boolean isFinite(float f) {
+    public static boolean isFinite(final float f) {
         return Math.abs(f) <= Float.MAX_VALUE;
     }
 
-    public static void checkFinite(double d, @NotNull String message) {
+    public static void checkFinite(final double d, @NotNull final String message) {
         if (!isFinite(d)) {
             throw new IllegalArgumentException(message);
         }
     }
 
-    public static void checkFinite(float d, @NotNull String message) {
+    public static void checkFinite(final float d, @NotNull final String message) {
         if (!isFinite(d)) {
             throw new IllegalArgumentException(message);
         }
diff --git a/src/main/java/org/bukkit/util/RayTraceResult.java b/src/main/java/org/bukkit/util/RayTraceResult.java
index 7feafd3885b20faae52cf55b007a7c555bbff120..926f80e69e010bdebfcf5e8409dc81ebfc47192c 100644
--- a/src/main/java/org/bukkit/util/RayTraceResult.java
+++ b/src/main/java/org/bukkit/util/RayTraceResult.java
@@ -23,7 +23,7 @@ public class RayTraceResult {
     private final @Nullable BlockFace hitBlockFace;
     private final @Nullable Entity hitEntity;
 
-    private RayTraceResult(@NotNull Vector hitPosition, @Nullable Block hitBlock, @Nullable BlockFace hitBlockFace, @Nullable Entity hitEntity) {
+    private RayTraceResult(@NotNull final Vector hitPosition, @Nullable final Block hitBlock, @Nullable final BlockFace hitBlockFace, @Nullable final Entity hitEntity) {
         Preconditions.checkArgument(hitPosition != null, "Hit position is null!");
         this.hitPosition = hitPosition.clone();
         this.hitBlock = hitBlock;
@@ -36,7 +36,7 @@ public class RayTraceResult {
      *
      * @param hitPosition the hit position
      */
-    public RayTraceResult(@NotNull Vector hitPosition) {
+    public RayTraceResult(@NotNull final Vector hitPosition) {
         this(hitPosition, null, null, null);
     }
 
@@ -46,7 +46,7 @@ public class RayTraceResult {
      * @param hitPosition the hit position
      * @param hitBlockFace the hit block face
      */
-    public RayTraceResult(@NotNull Vector hitPosition, @Nullable BlockFace hitBlockFace) {
+    public RayTraceResult(@NotNull final Vector hitPosition, @Nullable final BlockFace hitBlockFace) {
         this(hitPosition, null, hitBlockFace, null);
     }
 
@@ -57,7 +57,7 @@ public class RayTraceResult {
      * @param hitBlock the hit block
      * @param hitBlockFace the hit block face
      */
-    public RayTraceResult(@NotNull Vector hitPosition, @Nullable Block hitBlock, @Nullable BlockFace hitBlockFace) {
+    public RayTraceResult(@NotNull final Vector hitPosition, @Nullable final Block hitBlock, @Nullable final BlockFace hitBlockFace) {
         this(hitPosition, hitBlock, hitBlockFace, null);
     }
 
@@ -67,7 +67,7 @@ public class RayTraceResult {
      * @param hitPosition the hit position
      * @param hitEntity the hit entity
      */
-    public RayTraceResult(@NotNull Vector hitPosition, @Nullable Entity hitEntity) {
+    public RayTraceResult(@NotNull final Vector hitPosition, @Nullable final Entity hitEntity) {
         this(hitPosition, null, null, hitEntity);
     }
 
@@ -78,7 +78,7 @@ public class RayTraceResult {
      * @param hitEntity the hit entity
      * @param hitBlockFace the hit block face
      */
-    public RayTraceResult(@NotNull Vector hitPosition, @Nullable Entity hitEntity, @Nullable BlockFace hitBlockFace) {
+    public RayTraceResult(@NotNull final Vector hitPosition, @Nullable final Entity hitEntity, @Nullable final BlockFace hitBlockFace) {
         this(hitPosition, null, hitBlockFace, hitEntity);
     }
 
@@ -134,10 +134,10 @@ public class RayTraceResult {
     }
 
     @Override
-    public boolean equals(Object obj) {
+    public boolean equals(final Object obj) {
         if (this == obj) return true;
         if (!(obj instanceof RayTraceResult)) return false;
-        RayTraceResult other = (RayTraceResult) obj;
+        final RayTraceResult other = (RayTraceResult) obj;
         if (!hitPosition.equals(other.hitPosition)) return false;
         if (!Objects.equals(hitBlock, other.hitBlock)) return false;
         if (!Objects.equals(hitBlockFace, other.hitBlockFace)) return false;
diff --git a/src/main/java/org/bukkit/util/StringUtil.java b/src/main/java/org/bukkit/util/StringUtil.java
index adac718562da454068919efe5f4364e622fa2c88..1cb373cade900e0a063de870c943af155ae00e78 100644
--- a/src/main/java/org/bukkit/util/StringUtil.java
+++ b/src/main/java/org/bukkit/util/StringUtil.java
@@ -29,7 +29,7 @@ public class StringUtil {
         Preconditions.checkArgument(collection != null, "Collection cannot be null");
         Preconditions.checkArgument(originals != null, "Originals cannot be null");
 
-        for (String string : originals) {
+        for (final String string : originals) {
             if (startsWithIgnoreCase(string, token)) {
                 collection.add(string);
             }
diff --git a/src/main/java/org/bukkit/util/Vector.java b/src/main/java/org/bukkit/util/Vector.java
index c8a68a5db6958e4eb601421d1492c21426d3e4dc..9ed1ffcab11aa6514371c4136ace5607066f439d 100644
--- a/src/main/java/org/bukkit/util/Vector.java
+++ b/src/main/java/org/bukkit/util/Vector.java
@@ -48,7 +48,7 @@ public class Vector implements Cloneable, ConfigurationSerializable {
      * @param y Y component
      * @param z Z component
      */
-    public Vector(int x, int y, int z) {
+    public Vector(final int x, final int y, final int z) {
         this.x = x;
         this.y = y;
         this.z = z;
@@ -61,7 +61,7 @@ public class Vector implements Cloneable, ConfigurationSerializable {
      * @param y Y component
      * @param z Z component
      */
-    public Vector(double x, double y, double z) {
+    public Vector(final double x, final double y, final double z) {
         this.x = x;
         this.y = y;
         this.z = z;
@@ -74,7 +74,7 @@ public class Vector implements Cloneable, ConfigurationSerializable {
      * @param y Y component
      * @param z Z component
      */
-    public Vector(float x, float y, float z) {
+    public Vector(final float x, final float y, final float z) {
         this.x = x;
         this.y = y;
         this.z = z;
@@ -87,7 +87,7 @@ public class Vector implements Cloneable, ConfigurationSerializable {
      * @return the same vector
      */
     @NotNull
-    public Vector add(@NotNull Vector vec) {
+    public Vector add(@NotNull final Vector vec) {
         x += vec.x;
         y += vec.y;
         z += vec.z;
@@ -101,7 +101,7 @@ public class Vector implements Cloneable, ConfigurationSerializable {
      * @return the same vector
      */
     @NotNull
-    public Vector subtract(@NotNull Vector vec) {
+    public Vector subtract(@NotNull final Vector vec) {
         x -= vec.x;
         y -= vec.y;
         z -= vec.z;
@@ -115,7 +115,7 @@ public class Vector implements Cloneable, ConfigurationSerializable {
      * @return the same vector
      */
     @NotNull
-    public Vector multiply(@NotNull Vector vec) {
+    public Vector multiply(@NotNull final Vector vec) {
         x *= vec.x;
         y *= vec.y;
         z *= vec.z;
@@ -129,7 +129,7 @@ public class Vector implements Cloneable, ConfigurationSerializable {
      * @return the same vector
      */
     @NotNull
-    public Vector divide(@NotNull Vector vec) {
+    public Vector divide(@NotNull final Vector vec) {
         x /= vec.x;
         y /= vec.y;
         z /= vec.z;
@@ -143,7 +143,7 @@ public class Vector implements Cloneable, ConfigurationSerializable {
      * @return the same vector
      */
     @NotNull
-    public Vector copy(@NotNull Vector vec) {
+    public Vector copy(@NotNull final Vector vec) {
         x = vec.x;
         y = vec.y;
         z = vec.z;
@@ -182,7 +182,7 @@ public class Vector implements Cloneable, ConfigurationSerializable {
      * @param o The other vector
      * @return the distance
      */
-    public double distance(@NotNull Vector o) {
+    public double distance(@NotNull final Vector o) {
         return Math.sqrt(NumberConversions.square(x - o.x) + NumberConversions.square(y - o.y) + NumberConversions.square(z - o.z));
     }
 
@@ -192,7 +192,7 @@ public class Vector implements Cloneable, ConfigurationSerializable {
      * @param o The other vector
      * @return the distance
      */
-    public double distanceSquared(@NotNull Vector o) {
+    public double distanceSquared(@NotNull final Vector o) {
         return NumberConversions.square(x - o.x) + NumberConversions.square(y - o.y) + NumberConversions.square(z - o.z);
     }
 
@@ -202,8 +202,8 @@ public class Vector implements Cloneable, ConfigurationSerializable {
      * @param other The other vector
      * @return angle in radians
      */
-    public float angle(@NotNull Vector other) {
-        double dot = Doubles.constrainToRange(dot(other) / (length() * other.length()), -1.0, 1.0);
+    public float angle(@NotNull final Vector other) {
+        final double dot = Doubles.constrainToRange(dot(other) / (length() * other.length()), -1.0, 1.0);
 
         return (float) Math.acos(dot);
     }
@@ -215,7 +215,7 @@ public class Vector implements Cloneable, ConfigurationSerializable {
      * @return this same vector (now a midpoint)
      */
     @NotNull
-    public Vector midpoint(@NotNull Vector other) {
+    public Vector midpoint(@NotNull final Vector other) {
         x = (x + other.x) / 2;
         y = (y + other.y) / 2;
         z = (z + other.z) / 2;
@@ -229,10 +229,10 @@ public class Vector implements Cloneable, ConfigurationSerializable {
      * @return a new midpoint vector
      */
     @NotNull
-    public Vector getMidpoint(@NotNull Vector other) {
-        double x = (this.x + other.x) / 2;
-        double y = (this.y + other.y) / 2;
-        double z = (this.z + other.z) / 2;
+    public Vector getMidpoint(@NotNull final Vector other) {
+        final double x = (this.x + other.x) / 2;
+        final double y = (this.y + other.y) / 2;
+        final double z = (this.z + other.z) / 2;
         return new Vector(x, y, z);
     }
 
@@ -244,7 +244,7 @@ public class Vector implements Cloneable, ConfigurationSerializable {
      * @return the same vector
      */
     @NotNull
-    public Vector multiply(int m) {
+    public Vector multiply(final int m) {
         x *= m;
         y *= m;
         z *= m;
@@ -259,7 +259,7 @@ public class Vector implements Cloneable, ConfigurationSerializable {
      * @return the same vector
      */
     @NotNull
-    public Vector multiply(double m) {
+    public Vector multiply(final double m) {
         x *= m;
         y *= m;
         z *= m;
@@ -274,7 +274,7 @@ public class Vector implements Cloneable, ConfigurationSerializable {
      * @return the same vector
      */
     @NotNull
-    public Vector multiply(float m) {
+    public Vector multiply(final float m) {
         x *= m;
         y *= m;
         z *= m;
@@ -288,7 +288,7 @@ public class Vector implements Cloneable, ConfigurationSerializable {
      * @param other The other vector
      * @return dot product
      */
-    public double dot(@NotNull Vector other) {
+    public double dot(@NotNull final Vector other) {
         return x * other.x + y * other.y + z * other.z;
     }
 
@@ -305,10 +305,10 @@ public class Vector implements Cloneable, ConfigurationSerializable {
      * @return the same vector
      */
     @NotNull
-    public Vector crossProduct(@NotNull Vector o) {
-        double newX = y * o.z - o.y * z;
-        double newY = z * o.x - o.z * x;
-        double newZ = x * o.y - o.x * y;
+    public Vector crossProduct(@NotNull final Vector o) {
+        final double newX = y * o.z - o.y * z;
+        final double newY = z * o.x - o.z * x;
+        final double newZ = x * o.y - o.x * y;
 
         x = newX;
         y = newY;
@@ -329,10 +329,10 @@ public class Vector implements Cloneable, ConfigurationSerializable {
      * @return a new vector
      */
     @NotNull
-    public Vector getCrossProduct(@NotNull Vector o) {
-        double x = this.y * o.z - o.y * this.z;
-        double y = this.z * o.x - o.z * this.x;
-        double z = this.x * o.y - o.x * this.y;
+    public Vector getCrossProduct(@NotNull final Vector o) {
+        final double x = this.y * o.z - o.y * this.z;
+        final double y = this.z * o.x - o.z * this.x;
+        final double z = this.x * o.y - o.x * this.y;
         return new Vector(x, y, z);
     }
 
@@ -343,7 +343,7 @@ public class Vector implements Cloneable, ConfigurationSerializable {
      */
     @NotNull
     public Vector normalize() {
-        double length = length();
+        final double length = length();
 
         x /= length;
         y /= length;
@@ -388,7 +388,7 @@ public class Vector implements Cloneable, ConfigurationSerializable {
      * @param max Maximum vector
      * @return whether this vector is in the AABB
      */
-    public boolean isInAABB(@NotNull Vector min, @NotNull Vector max) {
+    public boolean isInAABB(@NotNull final Vector min, @NotNull final Vector max) {
         return x >= min.x && x <= max.x && y >= min.y && y <= max.y && z >= min.z && z <= max.z;
     }
 
@@ -399,7 +399,7 @@ public class Vector implements Cloneable, ConfigurationSerializable {
      * @param radius Sphere radius
      * @return whether this vector is in the sphere
      */
-    public boolean isInSphere(@NotNull Vector origin, double radius) {
+    public boolean isInSphere(@NotNull final Vector origin, final double radius) {
         return (NumberConversions.square(origin.x - x) + NumberConversions.square(origin.y - y) + NumberConversions.square(origin.z - z)) <= NumberConversions.square(radius);
     }
 
@@ -425,12 +425,12 @@ public class Vector implements Cloneable, ConfigurationSerializable {
      * @return the same vector
      */
     @NotNull
-    public Vector rotateAroundX(double angle) {
-        double angleCos = Math.cos(angle);
-        double angleSin = Math.sin(angle);
+    public Vector rotateAroundX(final double angle) {
+        final double angleCos = Math.cos(angle);
+        final double angleSin = Math.sin(angle);
 
-        double y = angleCos * getY() - angleSin * getZ();
-        double z = angleSin * getY() + angleCos * getZ();
+        final double y = angleCos * getY() - angleSin * getZ();
+        final double z = angleSin * getY() + angleCos * getZ();
         return setY(y).setZ(z);
     }
 
@@ -447,12 +447,12 @@ public class Vector implements Cloneable, ConfigurationSerializable {
      * @return the same vector
      */
     @NotNull
-    public Vector rotateAroundY(double angle) {
-        double angleCos = Math.cos(angle);
-        double angleSin = Math.sin(angle);
+    public Vector rotateAroundY(final double angle) {
+        final double angleCos = Math.cos(angle);
+        final double angleSin = Math.sin(angle);
 
-        double x = angleCos * getX() + angleSin * getZ();
-        double z = -angleSin * getX() + angleCos * getZ();
+        final double x = angleCos * getX() + angleSin * getZ();
+        final double z = -angleSin * getX() + angleCos * getZ();
         return setX(x).setZ(z);
     }
 
@@ -469,12 +469,12 @@ public class Vector implements Cloneable, ConfigurationSerializable {
      * @return the same vector
      */
     @NotNull
-    public Vector rotateAroundZ(double angle) {
-        double angleCos = Math.cos(angle);
-        double angleSin = Math.sin(angle);
+    public Vector rotateAroundZ(final double angle) {
+        final double angleCos = Math.cos(angle);
+        final double angleSin = Math.sin(angle);
 
-        double x = angleCos * getX() - angleSin * getY();
-        double y = angleSin * getX() + angleCos * getY();
+        final double x = angleCos * getX() - angleSin * getY();
+        final double y = angleSin * getX() + angleCos * getY();
         return setX(x).setY(y);
     }
 
@@ -500,7 +500,7 @@ public class Vector implements Cloneable, ConfigurationSerializable {
      * null
      */
     @NotNull
-    public Vector rotateAroundAxis(@NotNull Vector axis, double angle) throws IllegalArgumentException {
+    public Vector rotateAroundAxis(@NotNull final Vector axis, final double angle) throws IllegalArgumentException {
         Preconditions.checkArgument(axis != null, "The provided axis vector was null");
 
         return rotateAroundNonUnitAxis(axis.isNormalized() ? axis : axis.clone().normalize(), angle);
@@ -527,23 +527,27 @@ public class Vector implements Cloneable, ConfigurationSerializable {
      * null
      */
     @NotNull
-    public Vector rotateAroundNonUnitAxis(@NotNull Vector axis, double angle) throws IllegalArgumentException {
+    public Vector rotateAroundNonUnitAxis(@NotNull final Vector axis, final double angle) throws IllegalArgumentException {
         Preconditions.checkArgument(axis != null, "The provided axis vector was null");
 
-        double x = getX(), y = getY(), z = getZ();
-        double x2 = axis.getX(), y2 = axis.getY(), z2 = axis.getZ();
+        final double x = getX();
+	    final double y = getY();
+	    final double z = getZ();
+	    final double x2 = axis.getX();
+	    final double y2 = axis.getY();
+	    final double z2 = axis.getZ();
 
-        double cosTheta = Math.cos(angle);
-        double sinTheta = Math.sin(angle);
-        double dotProduct = this.dot(axis);
+	    final double cosTheta = Math.cos(angle);
+        final double sinTheta = Math.sin(angle);
+        final double dotProduct = this.dot(axis);
 
-        double xPrime = x2 * dotProduct * (1d - cosTheta)
+        final double xPrime = x2 * dotProduct * (1d - cosTheta)
                 + x * cosTheta
                 + (-z2 * y + y2 * z) * sinTheta;
-        double yPrime = y2 * dotProduct * (1d - cosTheta)
+        final double yPrime = y2 * dotProduct * (1d - cosTheta)
                 + y * cosTheta
                 + (z2 * x - x2 * z) * sinTheta;
-        double zPrime = z2 * dotProduct * (1d - cosTheta)
+        final double zPrime = z2 * dotProduct * (1d - cosTheta)
                 + z * cosTheta
                 + (-y2 * x + x2 * y) * sinTheta;
 
@@ -614,7 +618,7 @@ public class Vector implements Cloneable, ConfigurationSerializable {
      * @return This vector.
      */
     @NotNull
-    public Vector setX(int x) {
+    public Vector setX(final int x) {
         this.x = x;
         return this;
     }
@@ -626,7 +630,7 @@ public class Vector implements Cloneable, ConfigurationSerializable {
      * @return This vector.
      */
     @NotNull
-    public Vector setX(double x) {
+    public Vector setX(final double x) {
         this.x = x;
         return this;
     }
@@ -638,7 +642,7 @@ public class Vector implements Cloneable, ConfigurationSerializable {
      * @return This vector.
      */
     @NotNull
-    public Vector setX(float x) {
+    public Vector setX(final float x) {
         this.x = x;
         return this;
     }
@@ -650,7 +654,7 @@ public class Vector implements Cloneable, ConfigurationSerializable {
      * @return This vector.
      */
     @NotNull
-    public Vector setY(int y) {
+    public Vector setY(final int y) {
         this.y = y;
         return this;
     }
@@ -662,7 +666,7 @@ public class Vector implements Cloneable, ConfigurationSerializable {
      * @return This vector.
      */
     @NotNull
-    public Vector setY(double y) {
+    public Vector setY(final double y) {
         this.y = y;
         return this;
     }
@@ -674,7 +678,7 @@ public class Vector implements Cloneable, ConfigurationSerializable {
      * @return This vector.
      */
     @NotNull
-    public Vector setY(float y) {
+    public Vector setY(final float y) {
         this.y = y;
         return this;
     }
@@ -686,7 +690,7 @@ public class Vector implements Cloneable, ConfigurationSerializable {
      * @return This vector.
      */
     @NotNull
-    public Vector setZ(int z) {
+    public Vector setZ(final int z) {
         this.z = z;
         return this;
     }
@@ -698,7 +702,7 @@ public class Vector implements Cloneable, ConfigurationSerializable {
      * @return This vector.
      */
     @NotNull
-    public Vector setZ(double z) {
+    public Vector setZ(final double z) {
         this.z = z;
         return this;
     }
@@ -710,7 +714,7 @@ public class Vector implements Cloneable, ConfigurationSerializable {
      * @return This vector.
      */
     @NotNull
-    public Vector setZ(float z) {
+    public Vector setZ(final float z) {
         this.z = z;
         return this;
     }
@@ -723,12 +727,12 @@ public class Vector implements Cloneable, ConfigurationSerializable {
      * with epsilon.
      */
     @Override
-    public boolean equals(Object obj) {
+    public boolean equals(final Object obj) {
         if (!(obj instanceof Vector)) {
             return false;
         }
 
-        Vector other = (Vector) obj;
+        final Vector other = (Vector) obj;
 
         return Math.abs(x - other.x) < epsilon && Math.abs(y - other.y) < epsilon && Math.abs(z - other.z) < epsilon && (this.getClass().equals(obj.getClass()));
     }
@@ -758,7 +762,7 @@ public class Vector implements Cloneable, ConfigurationSerializable {
     public Vector clone() {
         try {
             return (Vector) super.clone();
-        } catch (CloneNotSupportedException e) {
+        } catch (final CloneNotSupportedException e) {
             throw new Error(e);
         }
     }
@@ -778,7 +782,7 @@ public class Vector implements Cloneable, ConfigurationSerializable {
      * @return the location
      */
     @NotNull
-    public Location toLocation(@NotNull World world) {
+    public Location toLocation(@NotNull final World world) {
         return new Location(world, x, y, z);
     }
 
@@ -791,7 +795,7 @@ public class Vector implements Cloneable, ConfigurationSerializable {
      * @return the location
      */
     @NotNull
-    public Location toLocation(@NotNull World world, float yaw, float pitch) {
+    public Location toLocation(@NotNull final World world, final float yaw, final float pitch) {
         return new Location(world, x, y, z, yaw, pitch);
     }
 
@@ -833,7 +837,7 @@ public class Vector implements Cloneable, ConfigurationSerializable {
      * @return minimum
      */
     @NotNull
-    public static Vector getMinimum(@NotNull Vector v1, @NotNull Vector v2) {
+    public static Vector getMinimum(@NotNull final Vector v1, @NotNull final Vector v2) {
         return new Vector(Math.min(v1.x, v2.x), Math.min(v1.y, v2.y), Math.min(v1.z, v2.z));
     }
 
@@ -845,7 +849,7 @@ public class Vector implements Cloneable, ConfigurationSerializable {
      * @return maximum
      */
     @NotNull
-    public static Vector getMaximum(@NotNull Vector v1, @NotNull Vector v2) {
+    public static Vector getMaximum(@NotNull final Vector v1, @NotNull final Vector v2) {
         return new Vector(Math.max(v1.x, v2.x), Math.max(v1.y, v2.y), Math.max(v1.z, v2.z));
     }
 
@@ -863,7 +867,7 @@ public class Vector implements Cloneable, ConfigurationSerializable {
     @Override
     @NotNull
     public Map<String, Object> serialize() {
-        Map<String, Object> result = new LinkedHashMap<String, Object>();
+        final Map<String, Object> result = new LinkedHashMap<String, Object>();
 
         result.put("x", Double.valueOf(getX()));
         result.put("y", Double.valueOf(getY()));
@@ -873,7 +877,7 @@ public class Vector implements Cloneable, ConfigurationSerializable {
     }
 
     @NotNull
-    public static Vector deserialize(@NotNull Map<String, Object> args) {
+    public static Vector deserialize(@NotNull final Map<String, Object> args) {
         double x = 0;
         double y = 0;
         double z = 0;
diff --git a/src/main/java/org/bukkit/util/io/BukkitObjectInputStream.java b/src/main/java/org/bukkit/util/io/BukkitObjectInputStream.java
index 65b7c5867977a60d23bbc06f2fcd924ea2f159dd..ce97426315f138a772a90380b95cf75b24670ff4 100644
--- a/src/main/java/org/bukkit/util/io/BukkitObjectInputStream.java
+++ b/src/main/java/org/bukkit/util/io/BukkitObjectInputStream.java
@@ -39,7 +39,7 @@ public class BukkitObjectInputStream extends ObjectInputStream {
      * @throws IOException if an I/O error occurs while reading stream header
      * @see ObjectInputStream#ObjectInputStream(InputStream)
      */
-    public BukkitObjectInputStream(InputStream in) throws IOException {
+    public BukkitObjectInputStream(final InputStream in) throws IOException {
         super(in);
         super.enableResolveObject(true);
     }
@@ -49,7 +49,7 @@ public class BukkitObjectInputStream extends ObjectInputStream {
         if (obj instanceof Wrapper) {
             try {
                 (obj = ConfigurationSerialization.deserializeObject(((Wrapper<?>) obj).map)).getClass(); // NPE
-            } catch (Throwable ex) {
+            } catch (final Throwable ex) {
                 throw newIOException("Failed to deserialize object", ex);
             }
         }
@@ -57,8 +57,8 @@ public class BukkitObjectInputStream extends ObjectInputStream {
         return super.resolveObject(obj);
     }
 
-    private static @NotNull IOException newIOException(String string, Throwable cause) {
-        IOException exception = new IOException(string);
+    private static @NotNull IOException newIOException(final String string, final Throwable cause) {
+        final IOException exception = new IOException(string);
         exception.initCause(cause);
         return exception;
     }
diff --git a/src/main/java/org/bukkit/util/io/BukkitObjectOutputStream.java b/src/main/java/org/bukkit/util/io/BukkitObjectOutputStream.java
index dd1b9ee5f57773f07924aa311823fd8d63195cb2..39bbcb80a48d0da123d73969d6ac7e83d45a7193 100644
--- a/src/main/java/org/bukkit/util/io/BukkitObjectOutputStream.java
+++ b/src/main/java/org/bukkit/util/io/BukkitObjectOutputStream.java
@@ -37,7 +37,7 @@ public class BukkitObjectOutputStream extends ObjectOutputStream {
      * @throws IOException if an I/O error occurs while writing stream header
      * @see ObjectOutputStream#ObjectOutputStream(OutputStream)
      */
-    public BukkitObjectOutputStream(OutputStream out) throws IOException {
+    public BukkitObjectOutputStream(final OutputStream out) throws IOException {
         super(out);
         super.enableReplaceObject(true);
     }
diff --git a/src/main/java/org/bukkit/util/io/Wrapper.java b/src/main/java/org/bukkit/util/io/Wrapper.java
index 58aff8a145b23852cac0420e8233fd0c39769c21..c2083783f447310a2a804862c02d95b10266cabe 100644
--- a/src/main/java/org/bukkit/util/io/Wrapper.java
+++ b/src/main/java/org/bukkit/util/io/Wrapper.java
@@ -12,11 +12,11 @@ final class Wrapper<T extends Map<String, ?> & Serializable> implements Serializ
 
     final @NotNull T map;
 
-    static @NotNull Wrapper<ImmutableMap<String, ?>> newWrapper(@NotNull ConfigurationSerializable obj) {
+    static @NotNull Wrapper<ImmutableMap<String, ?>> newWrapper(@NotNull final ConfigurationSerializable obj) {
         return new Wrapper<ImmutableMap<String, ?>>(ImmutableMap.<String, Object>builder().put(ConfigurationSerialization.SERIALIZED_TYPE_KEY, ConfigurationSerialization.getAlias(obj.getClass())).putAll(obj.serialize()).build());
     }
 
-    private Wrapper(@NotNull T map) {
+    private Wrapper(@NotNull final T map) {
         this.map = map;
     }
 }
diff --git a/src/main/java/org/bukkit/util/noise/NoiseGenerator.java b/src/main/java/org/bukkit/util/noise/NoiseGenerator.java
index 16f753258731d0d36d6eae3b1273c760941958a3..fdadfc6777d30972f0e0410dbc533f8e82f9116b 100644
--- a/src/main/java/org/bukkit/util/noise/NoiseGenerator.java
+++ b/src/main/java/org/bukkit/util/noise/NoiseGenerator.java
@@ -15,22 +15,22 @@ public abstract class NoiseGenerator {
      * @param x Value to floor
      * @return Floored value
      */
-    public static int floor(double x) {
+    public static int floor(final double x) {
         return x >= 0 ? (int) x : (int) x - 1;
     }
 
-    protected static double fade(double x) {
+    protected static double fade(final double x) {
         return x * x * x * (x * (x * 6 - 15) + 10);
     }
 
-    protected static double lerp(double x, double y, double z) {
+    protected static double lerp(final double x, final double y, final double z) {
         return y + x * (z - y);
     }
 
-    protected static double grad(int hash, double x, double y, double z) {
+    protected static double grad(int hash, final double x, final double y, final double z) {
         hash &= 15;
-        double u = hash < 8 ? x : y;
-        double v = hash < 4 ? y : hash == 12 || hash == 14 ? x : z;
+        final double u = hash < 8 ? x : y;
+        final double v = hash < 4 ? y : hash == 12 || hash == 14 ? x : z;
         return ((hash & 1) == 0 ? u : -u) + ((hash & 2) == 0 ? v : -v);
     }
 
@@ -40,7 +40,7 @@ public abstract class NoiseGenerator {
      * @param x X coordinate
      * @return Noise at given location, from range -1 to 1
      */
-    public double noise(double x) {
+    public double noise(final double x) {
         return noise(x, 0, 0);
     }
 
@@ -51,7 +51,7 @@ public abstract class NoiseGenerator {
      * @param y Y coordinate
      * @return Noise at given location, from range -1 to 1
      */
-    public double noise(double x, double y) {
+    public double noise(final double x, final double y) {
         return noise(x, y, 0);
     }
 
@@ -75,7 +75,7 @@ public abstract class NoiseGenerator {
      * @param amplitude How much to alter the amplitude by each octave
      * @return Resulting noise
      */
-    public double noise(double x, int octaves, double frequency, double amplitude) {
+    public double noise(final double x, final int octaves, final double frequency, final double amplitude) {
         return noise(x, 0, 0, octaves, frequency, amplitude);
     }
 
@@ -90,7 +90,7 @@ public abstract class NoiseGenerator {
      * @param normalized If true, normalize the value to [-1, 1]
      * @return Resulting noise
      */
-    public double noise(double x, int octaves, double frequency, double amplitude, boolean normalized) {
+    public double noise(final double x, final int octaves, final double frequency, final double amplitude, final boolean normalized) {
         return noise(x, 0, 0, octaves, frequency, amplitude, normalized);
     }
 
@@ -105,7 +105,7 @@ public abstract class NoiseGenerator {
      * @param amplitude How much to alter the amplitude by each octave
      * @return Resulting noise
      */
-    public double noise(double x, double y, int octaves, double frequency, double amplitude) {
+    public double noise(final double x, final double y, final int octaves, final double frequency, final double amplitude) {
         return noise(x, y, 0, octaves, frequency, amplitude);
     }
 
@@ -121,7 +121,7 @@ public abstract class NoiseGenerator {
      * @param normalized If true, normalize the value to [-1, 1]
      * @return Resulting noise
      */
-    public double noise(double x, double y, int octaves, double frequency, double amplitude, boolean normalized) {
+    public double noise(final double x, final double y, final int octaves, final double frequency, final double amplitude, final boolean normalized) {
         return noise(x, y, 0, octaves, frequency, amplitude, normalized);
     }
 
@@ -137,7 +137,7 @@ public abstract class NoiseGenerator {
      * @param amplitude How much to alter the amplitude by each octave
      * @return Resulting noise
      */
-    public double noise(double x, double y, double z, int octaves, double frequency, double amplitude) {
+    public double noise(final double x, final double y, final double z, final int octaves, final double frequency, final double amplitude) {
         return noise(x, y, z, octaves, frequency, amplitude, false);
     }
 
@@ -154,7 +154,7 @@ public abstract class NoiseGenerator {
      * @param normalized If true, normalize the value to [-1, 1]
      * @return Resulting noise
      */
-    public double noise(double x, double y, double z, int octaves, double frequency, double amplitude, boolean normalized) {
+    public double noise(final double x, final double y, final double z, final int octaves, final double frequency, final double amplitude, final boolean normalized) {
         double result = 0;
         double amp = 1;
         double freq = 1;
diff --git a/src/main/java/org/bukkit/util/noise/OctaveGenerator.java b/src/main/java/org/bukkit/util/noise/OctaveGenerator.java
index 618ed706e2fdc4855a9ce4fe55e092a052c911d0..14513058d712b443d02f63ca97a2e01a58ca59f8 100644
--- a/src/main/java/org/bukkit/util/noise/OctaveGenerator.java
+++ b/src/main/java/org/bukkit/util/noise/OctaveGenerator.java
@@ -12,7 +12,7 @@ public abstract class OctaveGenerator {
     protected double yScale = 1;
     protected double zScale = 1;
 
-    protected OctaveGenerator(@NotNull NoiseGenerator[] octaves) {
+    protected OctaveGenerator(@NotNull final NoiseGenerator[] octaves) {
         this.octaves = octaves;
     }
 
@@ -24,7 +24,7 @@ public abstract class OctaveGenerator {
      *
      * @param scale New value to scale each coordinate by
      */
-    public void setScale(double scale) {
+    public void setScale(final double scale) {
         setXScale(scale);
         setYScale(scale);
         setZScale(scale);
@@ -44,7 +44,7 @@ public abstract class OctaveGenerator {
      *
      * @param scale New X scale
      */
-    public void setXScale(double scale) {
+    public void setXScale(final double scale) {
         xScale = scale;
     }
 
@@ -62,7 +62,7 @@ public abstract class OctaveGenerator {
      *
      * @param scale New Y scale
      */
-    public void setYScale(double scale) {
+    public void setYScale(final double scale) {
         yScale = scale;
     }
 
@@ -80,7 +80,7 @@ public abstract class OctaveGenerator {
      *
      * @param scale New Z scale
      */
-    public void setZScale(double scale) {
+    public void setZScale(final double scale) {
         zScale = scale;
     }
 
@@ -103,7 +103,7 @@ public abstract class OctaveGenerator {
      * @param amplitude How much to alter the amplitude by each octave
      * @return Resulting noise
      */
-    public double noise(double x, double frequency, double amplitude) {
+    public double noise(final double x, final double frequency, final double amplitude) {
         return noise(x, 0, 0, frequency, amplitude);
     }
 
@@ -117,7 +117,7 @@ public abstract class OctaveGenerator {
      * @param normalized If true, normalize the value to [-1, 1]
      * @return Resulting noise
      */
-    public double noise(double x, double frequency, double amplitude, boolean normalized) {
+    public double noise(final double x, final double frequency, final double amplitude, final boolean normalized) {
         return noise(x, 0, 0, frequency, amplitude, normalized);
     }
 
@@ -131,7 +131,7 @@ public abstract class OctaveGenerator {
      * @param amplitude How much to alter the amplitude by each octave
      * @return Resulting noise
      */
-    public double noise(double x, double y, double frequency, double amplitude) {
+    public double noise(final double x, final double y, final double frequency, final double amplitude) {
         return noise(x, y, 0, frequency, amplitude);
     }
 
@@ -146,7 +146,7 @@ public abstract class OctaveGenerator {
      * @param normalized If true, normalize the value to [-1, 1]
      * @return Resulting noise
      */
-    public double noise(double x, double y, double frequency, double amplitude, boolean normalized) {
+    public double noise(final double x, final double y, final double frequency, final double amplitude, final boolean normalized) {
         return noise(x, y, 0, frequency, amplitude, normalized);
     }
 
@@ -161,7 +161,7 @@ public abstract class OctaveGenerator {
      * @param amplitude How much to alter the amplitude by each octave
      * @return Resulting noise
      */
-    public double noise(double x, double y, double z, double frequency, double amplitude) {
+    public double noise(final double x, final double y, final double z, final double frequency, final double amplitude) {
         return noise(x, y, z, frequency, amplitude, false);
     }
 
@@ -177,7 +177,7 @@ public abstract class OctaveGenerator {
      * @param normalized If true, normalize the value to [-1, 1]
      * @return Resulting noise
      */
-    public double noise(double x, double y, double z, double frequency, double amplitude, boolean normalized) {
+    public double noise(double x, double y, double z, final double frequency, final double amplitude, final boolean normalized) {
         double result = 0;
         double amp = 1;
         double freq = 1;
@@ -187,7 +187,7 @@ public abstract class OctaveGenerator {
         y *= yScale;
         z *= zScale;
 
-        for (NoiseGenerator octave : octaves) {
+        for (final NoiseGenerator octave : octaves) {
             result += octave.noise(x * freq, y * freq, z * freq) * amp;
             max += amp;
             freq *= frequency;
diff --git a/src/main/java/org/bukkit/util/noise/PerlinNoiseGenerator.java b/src/main/java/org/bukkit/util/noise/PerlinNoiseGenerator.java
index 520b65f9e6774f2fb8307311e5144128353cf777..597647ba302693c9f57b76d2ed9f3d90c6276b9b 100644
--- a/src/main/java/org/bukkit/util/noise/PerlinNoiseGenerator.java
+++ b/src/main/java/org/bukkit/util/noise/PerlinNoiseGenerator.java
@@ -17,7 +17,7 @@ public class PerlinNoiseGenerator extends NoiseGenerator {
     private static final PerlinNoiseGenerator instance = new PerlinNoiseGenerator();
 
     protected PerlinNoiseGenerator() {
-        int[] p = {151, 160, 137, 91, 90, 15, 131, 13, 201,
+        final int[] p = {151, 160, 137, 91, 90, 15, 131, 13, 201,
             95, 96, 53, 194, 233, 7, 225, 140, 36, 103, 30, 69, 142, 8, 99, 37,
             240, 21, 10, 23, 190, 6, 148, 247, 120, 234, 75, 0, 26, 197, 62,
             94, 252, 219, 203, 117, 35, 11, 32, 57, 177, 33, 88, 237, 149, 56,
@@ -46,7 +46,7 @@ public class PerlinNoiseGenerator extends NoiseGenerator {
      *
      * @param world World to construct this generator for
      */
-    public PerlinNoiseGenerator(@NotNull World world) {
+    public PerlinNoiseGenerator(@NotNull final World world) {
         this(new Random(world.getSeed()));
     }
 
@@ -55,7 +55,7 @@ public class PerlinNoiseGenerator extends NoiseGenerator {
      *
      * @param seed Seed to construct this generator for
      */
-    public PerlinNoiseGenerator(long seed) {
+    public PerlinNoiseGenerator(final long seed) {
         this(new Random(seed));
     }
 
@@ -64,7 +64,7 @@ public class PerlinNoiseGenerator extends NoiseGenerator {
      *
      * @param rand Random to construct with
      */
-    public PerlinNoiseGenerator(@NotNull Random rand) {
+    public PerlinNoiseGenerator(@NotNull final Random rand) {
         offsetX = rand.nextDouble() * 256;
         offsetY = rand.nextDouble() * 256;
         offsetZ = rand.nextDouble() * 256;
@@ -74,8 +74,8 @@ public class PerlinNoiseGenerator extends NoiseGenerator {
         }
 
         for (int i = 0; i < 256; i++) {
-            int pos = rand.nextInt(256 - i) + i;
-            int old = perm[i];
+            final int pos = rand.nextInt(256 - i) + i;
+            final int old = perm[i];
 
             perm[i] = perm[pos];
             perm[pos] = old;
@@ -90,7 +90,7 @@ public class PerlinNoiseGenerator extends NoiseGenerator {
      * @param x X coordinate
      * @return Noise at given location, from range -1 to 1
      */
-    public static double getNoise(double x) {
+    public static double getNoise(final double x) {
         return instance.noise(x);
     }
 
@@ -102,7 +102,7 @@ public class PerlinNoiseGenerator extends NoiseGenerator {
      * @param y Y coordinate
      * @return Noise at given location, from range -1 to 1
      */
-    public static double getNoise(double x, double y) {
+    public static double getNoise(final double x, final double y) {
         return instance.noise(x, y);
     }
 
@@ -115,7 +115,7 @@ public class PerlinNoiseGenerator extends NoiseGenerator {
      * @param z Z coordinate
      * @return Noise at given location, from range -1 to 1
      */
-    public static double getNoise(double x, double y, double z) {
+    public static double getNoise(final double x, final double y, final double z) {
         return instance.noise(x, y, z);
     }
 
@@ -135,14 +135,14 @@ public class PerlinNoiseGenerator extends NoiseGenerator {
         y += offsetY;
         z += offsetZ;
 
-        int floorX = floor(x);
-        int floorY = floor(y);
-        int floorZ = floor(z);
+        final int floorX = floor(x);
+        final int floorY = floor(y);
+        final int floorZ = floor(z);
 
         // Find unit cube containing the point
-        int X = floorX & 255;
-        int Y = floorY & 255;
-        int Z = floorZ & 255;
+        final int X = floorX & 255;
+        final int Y = floorY & 255;
+        final int Z = floorZ & 255;
 
         // Get relative xyz coordinates of the point within the cube
         x -= floorX;
@@ -150,17 +150,17 @@ public class PerlinNoiseGenerator extends NoiseGenerator {
         z -= floorZ;
 
         // Compute fade curves for xyz
-        double fX = fade(x);
-        double fY = fade(y);
-        double fZ = fade(z);
+        final double fX = fade(x);
+        final double fY = fade(y);
+        final double fZ = fade(z);
 
         // Hash coordinates of the cube corners
-        int A = perm[X] + Y;
-        int AA = perm[A] + Z;
-        int AB = perm[A + 1] + Z;
-        int B = perm[X + 1] + Y;
-        int BA = perm[B] + Z;
-        int BB = perm[B + 1] + Z;
+        final int A = perm[X] + Y;
+        final int AA = perm[A] + Z;
+        final int AB = perm[A + 1] + Z;
+        final int B = perm[X + 1] + Y;
+        final int BA = perm[B] + Z;
+        final int BB = perm[B + 1] + Z;
 
         return lerp(fZ, lerp(fY, lerp(fX, grad(perm[AA], x, y, z),
                         grad(perm[BA], x - 1, y, z)),
@@ -182,7 +182,7 @@ public class PerlinNoiseGenerator extends NoiseGenerator {
      * @param amplitude How much to alter the amplitude by each octave
      * @return Resulting noise
      */
-    public static double getNoise(double x, int octaves, double frequency, double amplitude) {
+    public static double getNoise(final double x, final int octaves, final double frequency, final double amplitude) {
         return instance.noise(x, octaves, frequency, amplitude);
     }
 
@@ -197,7 +197,7 @@ public class PerlinNoiseGenerator extends NoiseGenerator {
      * @param amplitude How much to alter the amplitude by each octave
      * @return Resulting noise
      */
-    public static double getNoise(double x, double y, int octaves, double frequency, double amplitude) {
+    public static double getNoise(final double x, final double y, final int octaves, final double frequency, final double amplitude) {
         return instance.noise(x, y, octaves, frequency, amplitude);
     }
 
@@ -213,7 +213,7 @@ public class PerlinNoiseGenerator extends NoiseGenerator {
      * @param amplitude How much to alter the amplitude by each octave
      * @return Resulting noise
      */
-    public static double getNoise(double x, double y, double z, int octaves, double frequency, double amplitude) {
+    public static double getNoise(final double x, final double y, final double z, final int octaves, final double frequency, final double amplitude) {
         return instance.noise(x, y, z, octaves, frequency, amplitude);
     }
 }
diff --git a/src/main/java/org/bukkit/util/noise/PerlinOctaveGenerator.java b/src/main/java/org/bukkit/util/noise/PerlinOctaveGenerator.java
index a518f27d469dbc3f45e5f6d8a5b2ffc6c038eba0..71ad0fe93ddb60c773b23affae3b2f40bf3dae54 100644
--- a/src/main/java/org/bukkit/util/noise/PerlinOctaveGenerator.java
+++ b/src/main/java/org/bukkit/util/noise/PerlinOctaveGenerator.java
@@ -15,7 +15,7 @@ public class PerlinOctaveGenerator extends OctaveGenerator {
      * @param world World to construct this generator for
      * @param octaves Amount of octaves to create
      */
-    public PerlinOctaveGenerator(@NotNull World world, int octaves) {
+    public PerlinOctaveGenerator(@NotNull final World world, final int octaves) {
         this(new Random(world.getSeed()), octaves);
     }
 
@@ -25,7 +25,7 @@ public class PerlinOctaveGenerator extends OctaveGenerator {
      * @param seed Seed to construct this generator for
      * @param octaves Amount of octaves to create
      */
-    public PerlinOctaveGenerator(long seed, int octaves) {
+    public PerlinOctaveGenerator(final long seed, final int octaves) {
         this(new Random(seed), octaves);
     }
 
@@ -35,13 +35,13 @@ public class PerlinOctaveGenerator extends OctaveGenerator {
      * @param rand Random object to construct this generator for
      * @param octaves Amount of octaves to create
      */
-    public PerlinOctaveGenerator(@NotNull Random rand, int octaves) {
+    public PerlinOctaveGenerator(@NotNull final Random rand, final int octaves) {
         super(createOctaves(rand, octaves));
     }
 
     @NotNull
-    private static NoiseGenerator @NotNull [] createOctaves(@NotNull Random rand, int octaves) {
-        NoiseGenerator[] result = new NoiseGenerator[octaves];
+    private static NoiseGenerator @NotNull [] createOctaves(@NotNull final Random rand, final int octaves) {
+        final NoiseGenerator[] result = new NoiseGenerator[octaves];
 
         for (int i = 0; i < octaves; i++) {
             result[i] = new PerlinNoiseGenerator(rand);
diff --git a/src/main/java/org/bukkit/util/noise/SimplexNoiseGenerator.java b/src/main/java/org/bukkit/util/noise/SimplexNoiseGenerator.java
index 93741d777d0f8f93e5be73683238b29e8d483686..771ea1b0646c6df802944b385daeeb4b98ac18f2 100644
--- a/src/main/java/org/bukkit/util/noise/SimplexNoiseGenerator.java
+++ b/src/main/java/org/bukkit/util/noise/SimplexNoiseGenerator.java
@@ -55,7 +55,7 @@ public class SimplexNoiseGenerator extends PerlinNoiseGenerator {
      *
      * @param world World to construct this generator for
      */
-    public SimplexNoiseGenerator(@NotNull World world) {
+    public SimplexNoiseGenerator(@NotNull final World world) {
         this(new Random(world.getSeed()));
     }
 
@@ -64,7 +64,7 @@ public class SimplexNoiseGenerator extends PerlinNoiseGenerator {
      *
      * @param seed Seed to construct this generator for
      */
-    public SimplexNoiseGenerator(long seed) {
+    public SimplexNoiseGenerator(final long seed) {
         this(new Random(seed));
     }
 
@@ -73,20 +73,20 @@ public class SimplexNoiseGenerator extends PerlinNoiseGenerator {
      *
      * @param rand Random to construct with
      */
-    public SimplexNoiseGenerator(@NotNull Random rand) {
+    public SimplexNoiseGenerator(@NotNull final Random rand) {
         super(rand);
         offsetW = rand.nextDouble() * 256;
     }
 
-    protected static double dot(@NotNull int @NotNull [] g, double x, double y) {
+    protected static double dot(@NotNull final int @NotNull [] g, final double x, final double y) {
         return g[0] * x + g[1] * y;
     }
 
-    protected static double dot(@NotNull int @NotNull [] g, double x, double y, double z) {
+    protected static double dot(@NotNull final int @NotNull [] g, final double x, final double y, final double z) {
         return g[0] * x + g[1] * y + g[2] * z;
     }
 
-    protected static double dot(@NotNull int @NotNull [] g, double x, double y, double z, double w) {
+    protected static double dot(@NotNull final int @NotNull [] g, final double x, final double y, final double z, final double w) {
         return g[0] * x + g[1] * y + g[2] * z + g[3] * w;
     }
 
@@ -97,7 +97,7 @@ public class SimplexNoiseGenerator extends PerlinNoiseGenerator {
      * @param xin X coordinate
      * @return Noise at given location, from range -1 to 1
      */
-    public static double getNoise(double xin) {
+    public static double getNoise(final double xin) {
         return instance.noise(xin);
     }
 
@@ -109,7 +109,7 @@ public class SimplexNoiseGenerator extends PerlinNoiseGenerator {
      * @param yin Y coordinate
      * @return Noise at given location, from range -1 to 1
      */
-    public static double getNoise(double xin, double yin) {
+    public static double getNoise(final double xin, final double yin) {
         return instance.noise(xin, yin);
     }
 
@@ -122,7 +122,7 @@ public class SimplexNoiseGenerator extends PerlinNoiseGenerator {
      * @param zin Z coordinate
      * @return Noise at given location, from range -1 to 1
      */
-    public static double getNoise(double xin, double yin, double zin) {
+    public static double getNoise(final double xin, final double yin, final double zin) {
         return instance.noise(xin, yin, zin);
     }
 
@@ -136,7 +136,7 @@ public class SimplexNoiseGenerator extends PerlinNoiseGenerator {
      * @param w W coordinate
      * @return Noise at given location, from range -1 to 1
      */
-    public static double getNoise(double x, double y, double z, double w) {
+    public static double getNoise(final double x, final double y, final double z, final double w) {
         return instance.noise(x, y, z, w);
     }
 
@@ -146,27 +146,34 @@ public class SimplexNoiseGenerator extends PerlinNoiseGenerator {
         yin += offsetY;
         zin += offsetZ;
 
-        double n0, n1, n2, n3; // Noise contributions from the four corners
-
-        // Skew the input space to determine which simplex cell we're in
-        double s = (xin + yin + zin) * F3; // Very nice and simple skew factor for 3D
-        int i = floor(xin + s);
-        int j = floor(yin + s);
-        int k = floor(zin + s);
-        double t = (i + j + k) * G3;
-        double X0 = i - t; // Unskew the cell origin back to (x,y,z) space
-        double Y0 = j - t;
-        double Z0 = k - t;
-        double x0 = xin - X0; // The x,y,z distances from the cell origin
-        double y0 = yin - Y0;
-        double z0 = zin - Z0;
+        final double n0;  // Noise contributions from the four corners
+	    final double n1;
+	    final double n2;
+	    final double n3;
+
+	    // Skew the input space to determine which simplex cell we're in
+        final double s = (xin + yin + zin) * F3; // Very nice and simple skew factor for 3D
+        final int i = floor(xin + s);
+        final int j = floor(yin + s);
+        final int k = floor(zin + s);
+        final double t = (i + j + k) * G3;
+        final double X0 = i - t; // Unskew the cell origin back to (x,y,z) space
+        final double Y0 = j - t;
+        final double Z0 = k - t;
+        final double x0 = xin - X0; // The x,y,z distances from the cell origin
+        final double y0 = yin - Y0;
+        final double z0 = zin - Z0;
 
         // For the 3D case, the simplex shape is a slightly irregular tetrahedron.
 
         // Determine which simplex we are in.
-        int i1, j1, k1; // Offsets for second corner of simplex in (i,j,k) coords
-        int i2, j2, k2; // Offsets for third corner of simplex in (i,j,k) coords
-        if (x0 >= y0) {
+        final int i1;  // Offsets for second corner of simplex in (i,j,k) coords
+	    final int j1;
+	    final int k1;
+	    final int i2;  // Offsets for third corner of simplex in (i,j,k) coords
+	    final int j2;
+	    final int k2;
+	    if (x0 >= y0) {
             if (y0 >= z0) {
                 i1 = 1;
                 j1 = 0;
@@ -222,24 +229,24 @@ public class SimplexNoiseGenerator extends PerlinNoiseGenerator {
         // a step of (0,1,0) in (i,j,k) means a step of (-c,1-c,-c) in (x,y,z), and
         // a step of (0,0,1) in (i,j,k) means a step of (-c,-c,1-c) in (x,y,z), where
         // c = 1/6.
-        double x1 = x0 - i1 + G3; // Offsets for second corner in (x,y,z) coords
-        double y1 = y0 - j1 + G3;
-        double z1 = z0 - k1 + G3;
-        double x2 = x0 - i2 + 2.0 * G3; // Offsets for third corner in (x,y,z) coords
-        double y2 = y0 - j2 + 2.0 * G3;
-        double z2 = z0 - k2 + 2.0 * G3;
-        double x3 = x0 - 1.0 + 3.0 * G3; // Offsets for last corner in (x,y,z) coords
-        double y3 = y0 - 1.0 + 3.0 * G3;
-        double z3 = z0 - 1.0 + 3.0 * G3;
+        final double x1 = x0 - i1 + G3; // Offsets for second corner in (x,y,z) coords
+        final double y1 = y0 - j1 + G3;
+        final double z1 = z0 - k1 + G3;
+        final double x2 = x0 - i2 + 2.0 * G3; // Offsets for third corner in (x,y,z) coords
+        final double y2 = y0 - j2 + 2.0 * G3;
+        final double z2 = z0 - k2 + 2.0 * G3;
+        final double x3 = x0 - 1.0 + 3.0 * G3; // Offsets for last corner in (x,y,z) coords
+        final double y3 = y0 - 1.0 + 3.0 * G3;
+        final double z3 = z0 - 1.0 + 3.0 * G3;
 
         // Work out the hashed gradient indices of the four simplex corners
-        int ii = i & 255;
-        int jj = j & 255;
-        int kk = k & 255;
-        int gi0 = perm[ii + perm[jj + perm[kk]]] % 12;
-        int gi1 = perm[ii + i1 + perm[jj + j1 + perm[kk + k1]]] % 12;
-        int gi2 = perm[ii + i2 + perm[jj + j2 + perm[kk + k2]]] % 12;
-        int gi3 = perm[ii + 1 + perm[jj + 1 + perm[kk + 1]]] % 12;
+        final int ii = i & 255;
+        final int jj = j & 255;
+        final int kk = k & 255;
+        final int gi0 = perm[ii + perm[jj + perm[kk]]] % 12;
+        final int gi1 = perm[ii + i1 + perm[jj + j1 + perm[kk + k1]]] % 12;
+        final int gi2 = perm[ii + i2 + perm[jj + j2 + perm[kk + k2]]] % 12;
+        final int gi3 = perm[ii + 1 + perm[jj + 1 + perm[kk + 1]]] % 12;
 
         // Calculate the contribution from the four corners
         double t0 = 0.6 - x0 * x0 - y0 * y0 - z0 * z0;
@@ -284,23 +291,26 @@ public class SimplexNoiseGenerator extends PerlinNoiseGenerator {
         xin += offsetX;
         yin += offsetY;
 
-        double n0, n1, n2; // Noise contributions from the three corners
+        final double n0;  // Noise contributions from the three corners
+	    final double n1;
+	    final double n2;
 
-        // Skew the input space to determine which simplex cell we're in
-        double s = (xin + yin) * F2; // Hairy factor for 2D
-        int i = floor(xin + s);
-        int j = floor(yin + s);
-        double t = (i + j) * G2;
-        double X0 = i - t; // Unskew the cell origin back to (x,y) space
-        double Y0 = j - t;
-        double x0 = xin - X0; // The x,y distances from the cell origin
-        double y0 = yin - Y0;
+	    // Skew the input space to determine which simplex cell we're in
+        final double s = (xin + yin) * F2; // Hairy factor for 2D
+        final int i = floor(xin + s);
+        final int j = floor(yin + s);
+        final double t = (i + j) * G2;
+        final double X0 = i - t; // Unskew the cell origin back to (x,y) space
+        final double Y0 = j - t;
+        final double x0 = xin - X0; // The x,y distances from the cell origin
+        final double y0 = yin - Y0;
 
         // For the 2D case, the simplex shape is an equilateral triangle.
 
         // Determine which simplex we are in.
-        int i1, j1; // Offsets for second (middle) corner of simplex in (i,j) coords
-        if (x0 > y0) {
+        final int i1;  // Offsets for second (middle) corner of simplex in (i,j) coords
+	    final int j1;
+	    if (x0 > y0) {
             i1 = 1;
             j1 = 0;
         } // lower triangle, XY order: (0,0)->(1,0)->(1,1)
@@ -313,17 +323,17 @@ public class SimplexNoiseGenerator extends PerlinNoiseGenerator {
         // a step of (0,1) in (i,j) means a step of (-c,1-c) in (x,y), where
         // c = (3-sqrt(3))/6
 
-        double x1 = x0 - i1 + G2; // Offsets for middle corner in (x,y) unskewed coords
-        double y1 = y0 - j1 + G2;
-        double x2 = x0 + G22; // Offsets for last corner in (x,y) unskewed coords
-        double y2 = y0 + G22;
+        final double x1 = x0 - i1 + G2; // Offsets for middle corner in (x,y) unskewed coords
+        final double y1 = y0 - j1 + G2;
+        final double x2 = x0 + G22; // Offsets for last corner in (x,y) unskewed coords
+        final double y2 = y0 + G22;
 
         // Work out the hashed gradient indices of the three simplex corners
-        int ii = i & 255;
-        int jj = j & 255;
-        int gi0 = perm[ii + perm[jj]] % 12;
-        int gi1 = perm[ii + i1 + perm[jj + j1]] % 12;
-        int gi2 = perm[ii + 1 + perm[jj + 1]] % 12;
+        final int ii = i & 255;
+        final int jj = j & 255;
+        final int gi0 = perm[ii + perm[jj]] % 12;
+        final int gi1 = perm[ii + i1 + perm[jj + j1]] % 12;
+        final int gi2 = perm[ii + 1 + perm[jj + 1]] % 12;
 
         // Calculate the contribution from the three corners
         double t0 = 0.5 - x0 * x0 - y0 * y0;
@@ -371,24 +381,28 @@ public class SimplexNoiseGenerator extends PerlinNoiseGenerator {
         z += offsetZ;
         w += offsetW;
 
-        double n0, n1, n2, n3, n4; // Noise contributions from the five corners
-
-        // Skew the (x,y,z,w) space to determine which cell of 24 simplices we're in
-        double s = (x + y + z + w) * F4; // Factor for 4D skewing
-        int i = floor(x + s);
-        int j = floor(y + s);
-        int k = floor(z + s);
-        int l = floor(w + s);
-
-        double t = (i + j + k + l) * G4; // Factor for 4D unskewing
-        double X0 = i - t; // Unskew the cell origin back to (x,y,z,w) space
-        double Y0 = j - t;
-        double Z0 = k - t;
-        double W0 = l - t;
-        double x0 = x - X0; // The x,y,z,w distances from the cell origin
-        double y0 = y - Y0;
-        double z0 = z - Z0;
-        double w0 = w - W0;
+        final double n0;  // Noise contributions from the five corners
+	    final double n1;
+	    final double n2;
+	    final double n3;
+	    final double n4;
+
+	    // Skew the (x,y,z,w) space to determine which cell of 24 simplices we're in
+        final double s = (x + y + z + w) * F4; // Factor for 4D skewing
+        final int i = floor(x + s);
+        final int j = floor(y + s);
+        final int k = floor(z + s);
+        final int l = floor(w + s);
+
+        final double t = (i + j + k + l) * G4; // Factor for 4D unskewing
+        final double X0 = i - t; // Unskew the cell origin back to (x,y,z,w) space
+        final double Y0 = j - t;
+        final double Z0 = k - t;
+        final double W0 = l - t;
+        final double x0 = x - X0; // The x,y,z,w distances from the cell origin
+        final double y0 = y - Y0;
+        final double z0 = z - Z0;
+        final double w0 = w - W0;
 
         // For the 4D case, the simplex is a 4D shape I won't even try to describe.
         // To find out which of the 24 possible simplices we're in, we need to
@@ -398,18 +412,27 @@ public class SimplexNoiseGenerator extends PerlinNoiseGenerator {
         // First, six pair-wise comparisons are performed between each possible pair
         // of the four coordinates, and the results are used to add up binary bits
         // for an integer index.
-        int c1 = (x0 > y0) ? 32 : 0;
-        int c2 = (x0 > z0) ? 16 : 0;
-        int c3 = (y0 > z0) ? 8 : 0;
-        int c4 = (x0 > w0) ? 4 : 0;
-        int c5 = (y0 > w0) ? 2 : 0;
-        int c6 = (z0 > w0) ? 1 : 0;
-        int c = c1 + c2 + c3 + c4 + c5 + c6;
-        int i1, j1, k1, l1; // The integer offsets for the second simplex corner
-        int i2, j2, k2, l2; // The integer offsets for the third simplex corner
-        int i3, j3, k3, l3; // The integer offsets for the fourth simplex corner
-
-        // simplex[c] is a 4-vector with the numbers 0, 1, 2 and 3 in some order.
+        final int c1 = (x0 > y0) ? 32 : 0;
+        final int c2 = (x0 > z0) ? 16 : 0;
+        final int c3 = (y0 > z0) ? 8 : 0;
+        final int c4 = (x0 > w0) ? 4 : 0;
+        final int c5 = (y0 > w0) ? 2 : 0;
+        final int c6 = (z0 > w0) ? 1 : 0;
+        final int c = c1 + c2 + c3 + c4 + c5 + c6;
+        final int i1;  // The integer offsets for the second simplex corner
+	    final int j1;
+	    final int k1;
+	    final int l1;
+	    final int i2;  // The integer offsets for the third simplex corner
+	    final int j2;
+	    final int k2;
+	    final int l2;
+	    final int i3;  // The integer offsets for the fourth simplex corner
+	    final int j3;
+	    final int k3;
+	    final int l3;
+
+	    // simplex[c] is a 4-vector with the numbers 0, 1, 2 and 3 in some order.
         // Many values of c will never occur, since e.g. x>y>z>w makes x<z, y<w and x<w
         // impossible. Only the 24 indices which have non-zero entries make any sense.
         // We use a thresholding to set the coordinates in turn from the largest magnitude.
@@ -434,37 +457,37 @@ public class SimplexNoiseGenerator extends PerlinNoiseGenerator {
 
         // The fifth corner has all coordinate offsets = 1, so no need to look that up.
 
-        double x1 = x0 - i1 + G4; // Offsets for second corner in (x,y,z,w) coords
-        double y1 = y0 - j1 + G4;
-        double z1 = z0 - k1 + G4;
-        double w1 = w0 - l1 + G4;
+        final double x1 = x0 - i1 + G4; // Offsets for second corner in (x,y,z,w) coords
+        final double y1 = y0 - j1 + G4;
+        final double z1 = z0 - k1 + G4;
+        final double w1 = w0 - l1 + G4;
 
-        double x2 = x0 - i2 + G42; // Offsets for third corner in (x,y,z,w) coords
-        double y2 = y0 - j2 + G42;
-        double z2 = z0 - k2 + G42;
-        double w2 = w0 - l2 + G42;
+        final double x2 = x0 - i2 + G42; // Offsets for third corner in (x,y,z,w) coords
+        final double y2 = y0 - j2 + G42;
+        final double z2 = z0 - k2 + G42;
+        final double w2 = w0 - l2 + G42;
 
-        double x3 = x0 - i3 + G43; // Offsets for fourth corner in (x,y,z,w) coords
-        double y3 = y0 - j3 + G43;
-        double z3 = z0 - k3 + G43;
-        double w3 = w0 - l3 + G43;
+        final double x3 = x0 - i3 + G43; // Offsets for fourth corner in (x,y,z,w) coords
+        final double y3 = y0 - j3 + G43;
+        final double z3 = z0 - k3 + G43;
+        final double w3 = w0 - l3 + G43;
 
-        double x4 = x0 + G44; // Offsets for last corner in (x,y,z,w) coords
-        double y4 = y0 + G44;
-        double z4 = z0 + G44;
-        double w4 = w0 + G44;
+        final double x4 = x0 + G44; // Offsets for last corner in (x,y,z,w) coords
+        final double y4 = y0 + G44;
+        final double z4 = z0 + G44;
+        final double w4 = w0 + G44;
 
         // Work out the hashed gradient indices of the five simplex corners
-        int ii = i & 255;
-        int jj = j & 255;
-        int kk = k & 255;
-        int ll = l & 255;
-
-        int gi0 = perm[ii + perm[jj + perm[kk + perm[ll]]]] % 32;
-        int gi1 = perm[ii + i1 + perm[jj + j1 + perm[kk + k1 + perm[ll + l1]]]] % 32;
-        int gi2 = perm[ii + i2 + perm[jj + j2 + perm[kk + k2 + perm[ll + l2]]]] % 32;
-        int gi3 = perm[ii + i3 + perm[jj + j3 + perm[kk + k3 + perm[ll + l3]]]] % 32;
-        int gi4 = perm[ii + 1 + perm[jj + 1 + perm[kk + 1 + perm[ll + 1]]]] % 32;
+        final int ii = i & 255;
+        final int jj = j & 255;
+        final int kk = k & 255;
+        final int ll = l & 255;
+
+        final int gi0 = perm[ii + perm[jj + perm[kk + perm[ll]]]] % 32;
+        final int gi1 = perm[ii + i1 + perm[jj + j1 + perm[kk + k1 + perm[ll + l1]]]] % 32;
+        final int gi2 = perm[ii + i2 + perm[jj + j2 + perm[kk + k2 + perm[ll + l2]]]] % 32;
+        final int gi3 = perm[ii + i3 + perm[jj + j3 + perm[kk + k3 + perm[ll + l3]]]] % 32;
+        final int gi4 = perm[ii + 1 + perm[jj + 1 + perm[kk + 1 + perm[ll + 1]]]] % 32;
 
         // Calculate the contribution from the five corners
         double t0 = 0.6 - x0 * x0 - y0 * y0 - z0 * z0 - w0 * w0;
diff --git a/src/main/java/org/bukkit/util/noise/SimplexOctaveGenerator.java b/src/main/java/org/bukkit/util/noise/SimplexOctaveGenerator.java
index 39dbd57b7963235b5d139eb9f0233ee5bcfad4f6..cf8fafb50380dcea580c4b0d89257e61d7bcd769 100644
--- a/src/main/java/org/bukkit/util/noise/SimplexOctaveGenerator.java
+++ b/src/main/java/org/bukkit/util/noise/SimplexOctaveGenerator.java
@@ -16,7 +16,7 @@ public class SimplexOctaveGenerator extends OctaveGenerator {
      * @param world World to construct this generator for
      * @param octaves Amount of octaves to create
      */
-    public SimplexOctaveGenerator(@NotNull World world, int octaves) {
+    public SimplexOctaveGenerator(@NotNull final World world, final int octaves) {
         this(new Random(world.getSeed()), octaves);
     }
 
@@ -26,7 +26,7 @@ public class SimplexOctaveGenerator extends OctaveGenerator {
      * @param seed Seed to construct this generator for
      * @param octaves Amount of octaves to create
      */
-    public SimplexOctaveGenerator(long seed, int octaves) {
+    public SimplexOctaveGenerator(final long seed, final int octaves) {
         this(new Random(seed), octaves);
     }
 
@@ -36,12 +36,12 @@ public class SimplexOctaveGenerator extends OctaveGenerator {
      * @param rand Random object to construct this generator for
      * @param octaves Amount of octaves to create
      */
-    public SimplexOctaveGenerator(@NotNull Random rand, int octaves) {
+    public SimplexOctaveGenerator(@NotNull final Random rand, final int octaves) {
         super(createOctaves(rand, octaves));
     }
 
     @Override
-    public void setScale(double scale) {
+    public void setScale(final double scale) {
         super.setScale(scale);
         setWScale(scale);
     }
@@ -60,7 +60,7 @@ public class SimplexOctaveGenerator extends OctaveGenerator {
      *
      * @param scale New W scale
      */
-    public void setWScale(double scale) {
+    public void setWScale(final double scale) {
         wScale = scale;
     }
 
@@ -76,7 +76,7 @@ public class SimplexOctaveGenerator extends OctaveGenerator {
      * @param amplitude How much to alter the amplitude by each octave
      * @return Resulting noise
      */
-    public double noise(double x, double y, double z, double w, double frequency, double amplitude) {
+    public double noise(final double x, final double y, final double z, final double w, final double frequency, final double amplitude) {
         return noise(x, y, z, w, frequency, amplitude, false);
     }
 
@@ -93,7 +93,7 @@ public class SimplexOctaveGenerator extends OctaveGenerator {
      * @param normalized If true, normalize the value to [-1, 1]
      * @return Resulting noise
      */
-    public double noise(double x, double y, double z, double w, double frequency, double amplitude, boolean normalized) {
+    public double noise(double x, double y, double z, double w, final double frequency, final double amplitude, final boolean normalized) {
         double result = 0;
         double amp = 1;
         double freq = 1;
@@ -104,7 +104,7 @@ public class SimplexOctaveGenerator extends OctaveGenerator {
         z *= zScale;
         w *= wScale;
 
-        for (NoiseGenerator octave : octaves) {
+        for (final NoiseGenerator octave : octaves) {
             result += ((SimplexNoiseGenerator) octave).noise(x * freq, y * freq, z * freq, w * freq) * amp;
             max += amp;
             freq *= frequency;
@@ -119,8 +119,8 @@ public class SimplexOctaveGenerator extends OctaveGenerator {
     }
 
     @NotNull
-    private static NoiseGenerator @NotNull [] createOctaves(@NotNull Random rand, int octaves) {
-        NoiseGenerator[] result = new NoiseGenerator[octaves];
+    private static NoiseGenerator @NotNull [] createOctaves(@NotNull final Random rand, final int octaves) {
+        final NoiseGenerator[] result = new NoiseGenerator[octaves];
 
         for (int i = 0; i < octaves; i++) {
             result[i] = new SimplexNoiseGenerator(rand);
diff --git a/src/main/java/org/bukkit/util/permissions/BroadcastPermissions.java b/src/main/java/org/bukkit/util/permissions/BroadcastPermissions.java
index 54bc413700e6e76e8ca44c94837e12a97c144e84..adadfb2e4f12353f3e8534813d6fecdfe99e6809 100644
--- a/src/main/java/org/bukkit/util/permissions/BroadcastPermissions.java
+++ b/src/main/java/org/bukkit/util/permissions/BroadcastPermissions.java
@@ -11,8 +11,8 @@ public final class BroadcastPermissions {
     private BroadcastPermissions() {}
 
     @NotNull
-    public static Permission registerPermissions(@NotNull Permission parent) {
-        Permission broadcasts = DefaultPermissions.registerPermission(ROOT, "Allows the user to receive all broadcast messages", parent);
+    public static Permission registerPermissions(@NotNull final Permission parent) {
+        final Permission broadcasts = DefaultPermissions.registerPermission(ROOT, "Allows the user to receive all broadcast messages", parent);
 
         DefaultPermissions.registerPermission(PREFIX + "admin", "Allows the user to receive administrative broadcasts", PermissionDefault.OP, broadcasts);
         DefaultPermissions.registerPermission(PREFIX + "user", "Allows the user to receive user broadcasts", PermissionDefault.TRUE, broadcasts);
diff --git a/src/main/java/org/bukkit/util/permissions/CommandPermissions.java b/src/main/java/org/bukkit/util/permissions/CommandPermissions.java
index 7763d6101ac61900db1e2310966b99584539fd0e..e82dff680d70083bf7aa3d18bbbfe696cbd8edf7 100644
--- a/src/main/java/org/bukkit/util/permissions/CommandPermissions.java
+++ b/src/main/java/org/bukkit/util/permissions/CommandPermissions.java
@@ -11,8 +11,8 @@ public final class CommandPermissions {
     private CommandPermissions() {}
 
     @NotNull
-    public static Permission registerPermissions(@NotNull Permission parent) {
-        Permission commands = DefaultPermissions.registerPermission(ROOT, "Gives the user the ability to use all CraftBukkit commands", parent);
+    public static Permission registerPermissions(@NotNull final Permission parent) {
+        final Permission commands = DefaultPermissions.registerPermission(ROOT, "Gives the user the ability to use all CraftBukkit commands", parent);
 
         DefaultPermissions.registerPermission(PREFIX + "help", "Allows the user to view the vanilla help menu", PermissionDefault.TRUE, commands);
         DefaultPermissions.registerPermission(PREFIX + "plugins", "Allows the user to view the list of plugins running on this server", PermissionDefault.TRUE, commands);
diff --git a/src/main/java/org/bukkit/util/permissions/DefaultPermissions.java b/src/main/java/org/bukkit/util/permissions/DefaultPermissions.java
index 9e0326cf85324223ab543a352f87bef7bc2008ae..3e1777f7931b0bb1183c2f83d3519ab0d79e228c 100644
--- a/src/main/java/org/bukkit/util/permissions/DefaultPermissions.java
+++ b/src/main/java/org/bukkit/util/permissions/DefaultPermissions.java
@@ -14,23 +14,23 @@ public final class DefaultPermissions {
     private DefaultPermissions() {}
 
     @NotNull
-    public static Permission registerPermission(@NotNull Permission perm) {
+    public static Permission registerPermission(@NotNull final Permission perm) {
         return registerPermission(perm, true);
     }
 
     @NotNull
-    public static Permission registerPermission(@NotNull Permission perm, boolean withLegacy) {
+    public static Permission registerPermission(@NotNull final Permission perm, final boolean withLegacy) {
         Permission result = perm;
 
         try {
             Bukkit.getPluginManager().addPermission(perm);
-        } catch (IllegalArgumentException ex) {
+        } catch (final IllegalArgumentException ex) {
             result = Bukkit.getPluginManager().getPermission(perm.getName());
             assert result != null;
         }
 
         if (withLegacy) {
-            Permission legacy = new Permission(LEGACY_PREFIX + result.getName(), result.getDescription(), PermissionDefault.FALSE);
+            final Permission legacy = new Permission(LEGACY_PREFIX + result.getName(), result.getDescription(), PermissionDefault.FALSE);
             legacy.getChildren().put(result.getName(), Boolean.TRUE);
             registerPermission(perm, false);
         }
@@ -39,52 +39,52 @@ public final class DefaultPermissions {
     }
 
     @NotNull
-    public static Permission registerPermission(@NotNull Permission perm, @NotNull Permission parent) {
+    public static Permission registerPermission(@NotNull final Permission perm, @NotNull final Permission parent) {
         parent.getChildren().put(perm.getName(), Boolean.TRUE);
         return registerPermission(perm);
     }
 
     @NotNull
-    public static Permission registerPermission(@NotNull String name, @Nullable String desc) {
-        Permission perm = registerPermission(new Permission(name, desc));
+    public static Permission registerPermission(@NotNull final String name, @Nullable final String desc) {
+        final Permission perm = registerPermission(new Permission(name, desc));
         return perm;
     }
 
     @NotNull
-    public static Permission registerPermission(@NotNull String name, @Nullable String desc, @NotNull Permission parent) {
-        Permission perm = registerPermission(name, desc);
+    public static Permission registerPermission(@NotNull final String name, @Nullable final String desc, @NotNull final Permission parent) {
+        final Permission perm = registerPermission(name, desc);
         parent.getChildren().put(perm.getName(), Boolean.TRUE);
         return perm;
     }
 
     @NotNull
-    public static Permission registerPermission(@NotNull String name, @Nullable String desc, @Nullable PermissionDefault def) {
-        Permission perm = registerPermission(new Permission(name, desc, def));
+    public static Permission registerPermission(@NotNull final String name, @Nullable final String desc, @Nullable final PermissionDefault def) {
+        final Permission perm = registerPermission(new Permission(name, desc, def));
         return perm;
     }
 
     @NotNull
-    public static Permission registerPermission(@NotNull String name, @Nullable String desc, @Nullable PermissionDefault def, @NotNull Permission parent) {
-        Permission perm = registerPermission(name, desc, def);
+    public static Permission registerPermission(@NotNull final String name, @Nullable final String desc, @Nullable final PermissionDefault def, @NotNull final Permission parent) {
+        final Permission perm = registerPermission(name, desc, def);
         parent.getChildren().put(perm.getName(), Boolean.TRUE);
         return perm;
     }
 
     @NotNull
-    public static Permission registerPermission(@NotNull String name, @Nullable String desc, @Nullable PermissionDefault def, @Nullable Map<String, Boolean> children) {
-        Permission perm = registerPermission(new Permission(name, desc, def, children));
+    public static Permission registerPermission(@NotNull final String name, @Nullable final String desc, @Nullable final PermissionDefault def, @Nullable final Map<String, Boolean> children) {
+        final Permission perm = registerPermission(new Permission(name, desc, def, children));
         return perm;
     }
 
     @NotNull
-    public static Permission registerPermission(@NotNull String name, @Nullable String desc, @Nullable PermissionDefault def, @Nullable Map<String, Boolean> children, @NotNull Permission parent) {
-        Permission perm = registerPermission(name, desc, def, children);
+    public static Permission registerPermission(@NotNull final String name, @Nullable final String desc, @Nullable final PermissionDefault def, @Nullable final Map<String, Boolean> children, @NotNull final Permission parent) {
+        final Permission perm = registerPermission(name, desc, def, children);
         parent.getChildren().put(perm.getName(), Boolean.TRUE);
         return perm;
     }
 
     public static void registerCorePermissions() {
-        Permission parent = registerPermission(ROOT, "Gives the user the ability to use all CraftBukkit utilities and commands");
+        final Permission parent = registerPermission(ROOT, "Gives the user the ability to use all CraftBukkit utilities and commands");
 
         CommandPermissions.registerPermissions(parent);
         BroadcastPermissions.registerPermissions(parent);
diff --git a/src/main/java/org/spigotmc/CustomTimingsHandler.java b/src/main/java/org/spigotmc/CustomTimingsHandler.java
index 123647bb10fc89508437d7a0bd3fd31d58ee7c82..a259fbdc94579c5dcd3a747350dcdf2650e410e0 100644
--- a/src/main/java/org/spigotmc/CustomTimingsHandler.java
+++ b/src/main/java/org/spigotmc/CustomTimingsHandler.java
@@ -45,7 +45,7 @@ import java.util.logging.Level;
 public final class CustomTimingsHandler {
     private final Timing handler;
 
-    public CustomTimingsHandler(@NotNull String name) {
+    public CustomTimingsHandler(@NotNull final String name) {
         Timing timing;
 
         new AuthorNagException("Deprecated use of CustomTimingsHandler. Please Switch to Timings.of ASAP").printStackTrace();
@@ -53,7 +53,7 @@ public final class CustomTimingsHandler {
             final Method ofSafe = TimingsManager.class.getDeclaredMethod("getHandler", String.class, String.class, Timing.class);
             ofSafe.setAccessible(true);
             timing = (Timing) ofSafe.invoke(null,"Minecraft", "(Deprecated API) " + name, null);
-        } catch (Exception e) {
+        } catch (final Exception e) {
             e.printStackTrace();
             Bukkit.getLogger().log(Level.SEVERE, "This handler could not be registered");
             timing = Timings.NULL_HANDLER;
diff --git a/src/main/java/org/spigotmc/event/entity/EntityDismountEvent.java b/src/main/java/org/spigotmc/event/entity/EntityDismountEvent.java
index 91b4c31676cfae6aa39a2e1129064c48b5a0eb25..7df4f821aa82d4bcbf09afa0179fbd02ea49f59f 100644
--- a/src/main/java/org/spigotmc/event/entity/EntityDismountEvent.java
+++ b/src/main/java/org/spigotmc/event/entity/EntityDismountEvent.java
@@ -16,13 +16,13 @@ public class EntityDismountEvent extends EntityEvent implements Cancellable {
     private final @NotNull Entity dismounted;
     private final boolean isCancellable; // Paper
 
-    public EntityDismountEvent(@NotNull Entity what, @NotNull Entity dismounted) {
+    public EntityDismountEvent(@NotNull final Entity what, @NotNull final Entity dismounted) {
         // Paper start
         this(what, dismounted, true);
     }
 
 
-    public EntityDismountEvent(@NotNull Entity what, @NotNull Entity dismounted, boolean isCancellable) {
+    public EntityDismountEvent(@NotNull final Entity what, @NotNull final Entity dismounted, final boolean isCancellable) {
         // Paper end
         super( what );
         this.dismounted = dismounted;
@@ -40,7 +40,7 @@ public class EntityDismountEvent extends EntityEvent implements Cancellable {
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         // Paper start
         if (cancel && !isCancellable) {
             return;
diff --git a/src/main/java/org/spigotmc/event/entity/EntityMountEvent.java b/src/main/java/org/spigotmc/event/entity/EntityMountEvent.java
index 64689de5b53367bf53a400014329e10d9be3a387..3b9b2245e71e90fb511c4ddb202e2a4dbebbc4e5 100644
--- a/src/main/java/org/spigotmc/event/entity/EntityMountEvent.java
+++ b/src/main/java/org/spigotmc/event/entity/EntityMountEvent.java
@@ -15,7 +15,7 @@ public class EntityMountEvent extends EntityEvent implements Cancellable {
     private boolean cancelled;
     private final @NotNull Entity mount;
 
-    public EntityMountEvent(@NotNull Entity what, @NotNull Entity mount) {
+    public EntityMountEvent(@NotNull final Entity what, @NotNull final Entity mount) {
         super(what);
         this.mount = mount;
     }
@@ -31,7 +31,7 @@ public class EntityMountEvent extends EntityEvent implements Cancellable {
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.cancelled = cancel;
     }
 
diff --git a/src/main/java/org/spigotmc/event/player/PlayerSpawnLocationEvent.java b/src/main/java/org/spigotmc/event/player/PlayerSpawnLocationEvent.java
index 2515887c20738b5add74eff02d2e9672080623d2..07a6e5325ad027268901ecf5a952ae364f6a0175 100644
--- a/src/main/java/org/spigotmc/event/player/PlayerSpawnLocationEvent.java
+++ b/src/main/java/org/spigotmc/event/player/PlayerSpawnLocationEvent.java
@@ -13,7 +13,7 @@ public class PlayerSpawnLocationEvent extends PlayerEvent {
     private static final HandlerList handlers = new HandlerList();
     private Location spawnLocation;
 
-    public PlayerSpawnLocationEvent(@NotNull final Player who, @NotNull Location spawnLocation) {
+    public PlayerSpawnLocationEvent(@NotNull final Player who, @NotNull final Location spawnLocation) {
         super(who);
         this.spawnLocation = spawnLocation;
     }
@@ -36,7 +36,7 @@ public class PlayerSpawnLocationEvent extends PlayerEvent {
      *
      * @param location the spawn location
      */
-    public void setSpawnLocation(@NotNull Location location) {
+    public void setSpawnLocation(@NotNull final Location location) {
         this.spawnLocation = location;
     }
 
