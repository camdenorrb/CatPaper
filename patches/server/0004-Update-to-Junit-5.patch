From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: camdenorrb <me@12oclock.dev>
Date: Fri, 21 Oct 2022 21:42:04 -0500
Subject: [PATCH] Update to Junit 5


diff --git a/build.gradle.kts b/build.gradle.kts
index e25b23a7174cc7a3cfbbb59353292bfb97206529..2862cc4d3a6efdee6bd98be0b8984f2471c66d87 100644
--- a/build.gradle.kts
+++ b/build.gradle.kts
@@ -53,7 +53,9 @@ dependencies {
     runtimeOnly("org.apache.maven.resolver:maven-resolver-transport-http:1.8.2")
 
     testImplementation("io.github.classgraph:classgraph:4.8.149") // Paper - mob goal test
-    testImplementation("junit:junit:4.13.2")
+    testImplementation("org.junit.jupiter:junit-jupiter-api:5.9.0")
+    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:5.9.0")
+    testImplementation("org.junit.jupiter:junit-jupiter-params:5.9.0")
     testImplementation("org.hamcrest:hamcrest-library:2.2")
 
     implementation("io.netty:netty-all:4.1.87.Final"); // Paper - Bump netty
@@ -137,6 +139,7 @@ tasks.reobfJar {
 // Paper end - include reobf mappings in jar for stacktrace deobfuscation
 
 tasks.test {
+    useJUnitPlatform()
     exclude("org/bukkit/craftbukkit/inventory/ItemStack*Test.class")
 }
 
diff --git a/src/test/java/com/destroystokyo/paper/entity/ai/VanillaMobGoalTest.java b/src/test/java/com/destroystokyo/paper/entity/ai/VanillaMobGoalTest.java
index b2d510459bcf90a3611f3d91dae4ccc3d29b4079..085242f3e998782ba0cc13b04787de4fe43282e5 100644
--- a/src/test/java/com/destroystokyo/paper/entity/ai/VanillaMobGoalTest.java
+++ b/src/test/java/com/destroystokyo/paper/entity/ai/VanillaMobGoalTest.java
@@ -1,7 +1,6 @@
 package com.destroystokyo.paper.entity.ai;
 
-import org.junit.Assert;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import java.lang.reflect.Field;
 import java.lang.reflect.Modifier;
@@ -15,6 +14,10 @@ import org.bukkit.entity.Mob;
 import io.github.classgraph.ClassGraph;
 import io.github.classgraph.ScanResult;
 
+import static org.junit.jupiter.api.Assertions.assertNotEquals;
+import static org.junit.jupiter.api.Assertions.fail;
+
+
 public class VanillaMobGoalTest {
 
     @Test
@@ -74,20 +77,20 @@ public class VanillaMobGoalTest {
             deprecated.forEach(System.out::println);
         }
 
-        if (shouldFail) Assert.fail("See above");
+        if (shouldFail) fail("See above");
     }
 
     private static boolean hasNoEnclosingClass(Class<?> clazz) {
         return clazz.getEnclosingClass() == null || hasNoEnclosingClass(clazz.getSuperclass());
     }
 
-    @Test
+    @org.junit.jupiter.api.Test
     public void testBukkitMap() {
         List<Class<?>> classes;
         try (ScanResult scanResult = new ClassGraph().enableAllInfo().whitelistPackages("net.minecraft.world.entity").scan()) {
             classes = scanResult.getSubclasses("net.minecraft.world.entity.Mob").loadClasses();
         }
-        Assert.assertNotEquals("There are supposed to be more than 0 entity types!", Collections.emptyList(), classes);
+        assertNotEquals(Collections.emptyList(), classes, "There are supposed to be more than 0 entity types!");
 
         boolean shouldFail = false;
         for (Class<?> nmsClass : classes) {
@@ -98,6 +101,6 @@ public class VanillaMobGoalTest {
             }
         }
 
-        if (shouldFail) Assert.fail("See above");
+        if (shouldFail) fail("See above");
     }
 }
diff --git a/src/test/java/io/papermc/paper/advancement/AdvancementFrameTest.java b/src/test/java/io/papermc/paper/advancement/AdvancementFrameTest.java
index 4d043e0e43ef8bb75788e195f95b5a50a51a2a48..ac8b84731e20ea28c46b6cbbeddb47c6f84902dc 100644
--- a/src/test/java/io/papermc/paper/advancement/AdvancementFrameTest.java
+++ b/src/test/java/io/papermc/paper/advancement/AdvancementFrameTest.java
@@ -4,9 +4,10 @@ import io.papermc.paper.adventure.PaperAdventure;
 import net.kyori.adventure.text.format.TextColor;
 import net.minecraft.advancements.FrameType;
 import net.minecraft.network.chat.contents.TranslatableContents;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
+
+import static org.junit.jupiter.api.Assertions.assertEquals;
 
-import static org.junit.Assert.assertEquals;
 
 public class AdvancementFrameTest {
 
@@ -16,8 +17,8 @@ public class AdvancementFrameTest {
             final TextColor expectedColor = PaperAdventure.asAdventure(nmsFrameType.getChatColor());
             final String expectedTranslationKey = ((TranslatableContents) nmsFrameType.getDisplayName().getContents()).getKey();
             final var frame = PaperAdvancementDisplay.asPaperFrame(nmsFrameType);
-            assertEquals("The translation keys should be the same", expectedTranslationKey, frame.translationKey());
-            assertEquals("The frame colors should be the same", expectedColor, frame.color());
+            assertEquals(expectedTranslationKey, frame.translationKey(), "The translation keys should be the same");
+            assertEquals(expectedColor, frame.color(), "The frame colors should be the same");
             assertEquals(nmsFrameType.getName(), AdvancementDisplay.Frame.NAMES.key(frame));
         }
     }
diff --git a/src/test/java/io/papermc/paper/adventure/ComponentServicesTest.java b/src/test/java/io/papermc/paper/adventure/ComponentServicesTest.java
index b6c4f8e2d375396a0ef3300a8bc324d77f23a768..21f025996f8d49d8586d08df0e2bbc55c5ee60e4 100644
--- a/src/test/java/io/papermc/paper/adventure/ComponentServicesTest.java
+++ b/src/test/java/io/papermc/paper/adventure/ComponentServicesTest.java
@@ -4,9 +4,10 @@ import net.kyori.adventure.text.Component;
 import net.kyori.adventure.text.format.NamedTextColor;
 import net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer;
 import net.kyori.adventure.text.serializer.plain.PlainTextComponentSerializer;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
+
+import static org.junit.jupiter.api.Assertions.assertEquals;
 
-import static org.junit.Assert.assertEquals;
 
 public class ComponentServicesTest {
 
@@ -15,7 +16,7 @@ public class ComponentServicesTest {
         assertEquals("Done", PlainTextComponentSerializer.plainText().serialize(Component.translatable("narrator.loading.done")));
     }
 
-    @Test
+    @org.junit.jupiter.api.Test
     public void testLegacyComponentSerializerProvider() {
         assertEquals("Â§cDone", LegacyComponentSerializer.legacySection().serialize(Component.translatable("narrator.loading.done", NamedTextColor.RED)));
         assertEquals("&cDone", LegacyComponentSerializer.legacyAmpersand().serialize(Component.translatable("narrator.loading.done", NamedTextColor.RED)));
diff --git a/src/test/java/io/papermc/paper/attribute/EntityTypeAttributesTest.java b/src/test/java/io/papermc/paper/attribute/EntityTypeAttributesTest.java
index 7b999deba66aa6d22cd7520f6c13550a44ca327d..5e9f8096faa5bf935207f03d22f821f3f12eb018 100644
--- a/src/test/java/io/papermc/paper/attribute/EntityTypeAttributesTest.java
+++ b/src/test/java/io/papermc/paper/attribute/EntityTypeAttributesTest.java
@@ -6,22 +6,20 @@ import org.bukkit.attribute.AttributeInstance;
 import org.bukkit.attribute.AttributeModifier;
 import org.bukkit.entity.EntityType;
 import org.bukkit.support.AbstractTestingBase;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
+
+import static org.junit.jupiter.api.Assertions.*;
 
-import static org.junit.Assert.assertFalse;
-import static org.junit.Assert.assertNotNull;
-import static org.junit.Assert.assertThrows;
-import static org.junit.Assert.assertTrue;
 
 public class EntityTypeAttributesTest extends AbstractTestingBase {
 
-    @Test
+    @org.junit.jupiter.api.Test
     public void testIllegalEntity() {
         assertFalse(EntityType.EGG.hasDefaultAttributes());
         assertThrows(IllegalArgumentException.class, () -> EntityType.EGG.getDefaultAttributes());
     }
 
-    @Test
+    @org.junit.jupiter.api.Test
     public void testLegalEntity() {
         assertTrue(EntityType.ZOMBIE.hasDefaultAttributes());
         EntityType.ZOMBIE.getDefaultAttributes();
diff --git a/src/test/java/io/papermc/paper/command/subcommands/MobcapsCommandTest.java b/src/test/java/io/papermc/paper/command/subcommands/MobcapsCommandTest.java
index f1dd3bca7fa0df8b6ed177bb435877229af1c0c5..a73bd2bf30440e81788075f06ea2ff822f1d14e5 100644
--- a/src/test/java/io/papermc/paper/command/subcommands/MobcapsCommandTest.java
+++ b/src/test/java/io/papermc/paper/command/subcommands/MobcapsCommandTest.java
@@ -3,8 +3,10 @@ package io.papermc.paper.command.subcommands;
 import java.util.HashSet;
 import java.util.Set;
 import net.minecraft.world.entity.MobCategory;
-import org.junit.Assert;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
+
+import static org.junit.jupiter.api.Assertions.assertTrue;
+
 
 public class MobcapsCommandTest {
     @Test
@@ -15,6 +17,6 @@ public class MobcapsCommandTest {
                 missing.add(value.getName());
             }
         }
-        Assert.assertTrue("MobcapsCommand.MOB_CATEGORY_COLORS map missing TextColors for [" + String.join(", ", missing + "]"), missing.isEmpty());
+        assertTrue(missing.isEmpty(), "MobcapsCommand.MOB_CATEGORY_COLORS map missing TextColors for [" + String.join(", ", missing + "]"));
     }
 }
diff --git a/src/test/java/io/papermc/paper/effects/EffectCategoryTest.java b/src/test/java/io/papermc/paper/effects/EffectCategoryTest.java
index a5012bc0469ba03cde66749a11f4e7d93206bfd7..a3404d93babce3c331b6f068ae37af662726a434 100644
--- a/src/test/java/io/papermc/paper/effects/EffectCategoryTest.java
+++ b/src/test/java/io/papermc/paper/effects/EffectCategoryTest.java
@@ -4,17 +4,18 @@ import io.papermc.paper.adventure.PaperAdventure;
 import net.minecraft.world.effect.MobEffectCategory;
 import org.bukkit.craftbukkit.potion.CraftPotionEffectType;
 import org.bukkit.potion.PotionEffectType;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
+
+import static org.junit.jupiter.api.Assertions.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertNotNull;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertNotNull;
 
 public class EffectCategoryTest {
 
     @Test
     public void testEffectCategoriesExist() {
         for (MobEffectCategory mobEffectInfo : MobEffectCategory.values()) {
-            assertNotNull(mobEffectInfo + " is missing a bukkit equivalent", CraftPotionEffectType.fromNMS(mobEffectInfo));
+            assertNotNull(CraftPotionEffectType.fromNMS(mobEffectInfo), (mobEffectInfo + " is missing a bukkit equivalent"));
         }
     }
 
@@ -22,7 +23,7 @@ public class EffectCategoryTest {
     public void testCategoryHasEquivalentColors() {
         for (MobEffectCategory mobEffectInfo : MobEffectCategory.values()) {
             PotionEffectType.Category bukkitEffectCategory = CraftPotionEffectType.fromNMS(mobEffectInfo);
-            assertEquals(mobEffectInfo.getTooltipFormatting().name() + " doesn't equal " + bukkitEffectCategory.getColor(), bukkitEffectCategory.getColor(), PaperAdventure.asAdventure(mobEffectInfo.getTooltipFormatting()));
+            assertEquals(bukkitEffectCategory.getColor(), PaperAdventure.asAdventure(mobEffectInfo.getTooltipFormatting()), mobEffectInfo.getTooltipFormatting().name() + " doesn't equal " + bukkitEffectCategory.getColor());
         }
     }
 }
diff --git a/src/test/java/io/papermc/paper/enchantments/EnchantmentRarityTest.java b/src/test/java/io/papermc/paper/enchantments/EnchantmentRarityTest.java
index 62b56b5b43696b03fc72cac59f986d006edc3f76..fad71516788a7657bca5f5ec9c5c266e2eac04e9 100644
--- a/src/test/java/io/papermc/paper/enchantments/EnchantmentRarityTest.java
+++ b/src/test/java/io/papermc/paper/enchantments/EnchantmentRarityTest.java
@@ -2,9 +2,8 @@ package io.papermc.paper.enchantments;
 
 import net.minecraft.world.item.enchantment.Enchantment.Rarity;
 import org.bukkit.craftbukkit.enchantments.CraftEnchantment;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
-import static org.junit.Assert.assertNotNull;
 
 public class EnchantmentRarityTest {
 
diff --git a/src/test/java/io/papermc/paper/entity/EntityCategoryTest.java b/src/test/java/io/papermc/paper/entity/EntityCategoryTest.java
index b9824b1f9491304ceb91be18f4f3b3068526bb33..af18cfa08fe68f10ec0030d5d97c63480c07ab17 100644
--- a/src/test/java/io/papermc/paper/entity/EntityCategoryTest.java
+++ b/src/test/java/io/papermc/paper/entity/EntityCategoryTest.java
@@ -2,17 +2,17 @@ package io.papermc.paper.entity;
 
 import com.google.common.base.Joiner;
 import com.google.common.collect.Maps;
-import com.google.common.collect.Sets;
 import net.minecraft.world.entity.MobType;
 import org.bukkit.craftbukkit.entity.CraftLivingEntity;
 import org.bukkit.entity.EntityCategory;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 import java.lang.reflect.Field;
 import java.util.Map;
-import java.util.Set;
 
-import static org.junit.Assert.assertTrue;
+import static org.junit.jupiter.api.Assertions.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertTrue;
+
 
 public class EntityCategoryTest {
 
@@ -29,6 +29,6 @@ public class EntityCategoryTest {
         for (EntityCategory entityCategory : EntityCategory.values()) {
             enumMonsterTypeFieldMap.remove(CraftLivingEntity.fromBukkitEntityCategory(entityCategory));
         }
-        assertTrue(MobType.class.getName() + " instance(s): " + Joiner.on(", ").join(enumMonsterTypeFieldMap.values()) + " do not have bukkit equivalents", enumMonsterTypeFieldMap.size() == 0);
+        assertEquals(0, enumMonsterTypeFieldMap.size(), MobType.class.getName() + " instance(s): " + Joiner.on(", ").join(enumMonsterTypeFieldMap.values()) + " do not have bukkit equivalents");
     }
 }
diff --git a/src/test/java/io/papermc/paper/inventory/CraftMetaTropicalFishBucketTest.java b/src/test/java/io/papermc/paper/inventory/CraftMetaTropicalFishBucketTest.java
index 2e7f8ef88ae74c7cbfdb7f397951cbc8479a995f..4007b948c292b501a31d702e3c96dde03a0fe02a 100644
--- a/src/test/java/io/papermc/paper/inventory/CraftMetaTropicalFishBucketTest.java
+++ b/src/test/java/io/papermc/paper/inventory/CraftMetaTropicalFishBucketTest.java
@@ -6,15 +6,18 @@ import org.bukkit.entity.TropicalFish;
 import org.bukkit.inventory.ItemStack;
 import org.bukkit.inventory.meta.TropicalFishBucketMeta;
 import org.bukkit.support.AbstractTestingBase;
-import org.junit.Assert;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
+
+import static org.junit.jupiter.api.Assertions.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertTrue;
+
 
 public class CraftMetaTropicalFishBucketTest extends AbstractTestingBase {
 
     @Test
     public void testAllCombinations() {
         final var rawMeta = new ItemStack(Material.TROPICAL_FISH_BUCKET).getItemMeta();
-        Assert.assertTrue("Meta was not a tropical fish bucket", rawMeta instanceof TropicalFishBucketMeta);
+        assertTrue(rawMeta instanceof TropicalFishBucketMeta, "Meta was not a tropical fish bucket");
 
         final var meta = (TropicalFishBucketMeta) rawMeta;
 
@@ -22,16 +25,16 @@ public class CraftMetaTropicalFishBucketTest extends AbstractTestingBase {
             for (final var pattern : TropicalFish.Pattern.values()) {
                 for (final var patternColor : DyeColor.values()) {
                     meta.setBodyColor(bodyColor);
-                    Assert.assertEquals("Body color did not match post body color!", bodyColor, meta.getBodyColor());
+                    assertEquals(bodyColor, meta.getBodyColor(), "Body color did not match post body color!");
 
                     meta.setPattern(pattern);
-                    Assert.assertEquals("Pattern did not match post pattern!", pattern, meta.getPattern());
-                    Assert.assertEquals("Body color did not match post pattern!", bodyColor, meta.getBodyColor());
+                    assertEquals(pattern, meta.getPattern(), "Pattern did not match post pattern!");
+                    assertEquals(bodyColor, meta.getBodyColor(), "Body color did not match post pattern!");
 
                     meta.setPatternColor(patternColor);
-                    Assert.assertEquals("Pattern did not match post pattern color!", pattern, meta.getPattern());
-                    Assert.assertEquals("Body color did not match post pattern color!", bodyColor, meta.getBodyColor());
-                    Assert.assertEquals("Pattern color did not match post pattern color!", patternColor, meta.getPatternColor());
+                    assertEquals(pattern, meta.getPattern(), "Pattern did not match post pattern color!");
+                    assertEquals(bodyColor, meta.getBodyColor(), "Body color did not match post pattern color!");
+                    assertEquals(patternColor, meta.getPatternColor(), "Pattern color did not match post pattern color!");
                 }
             }
         }
diff --git a/src/test/java/io/papermc/paper/inventory/ItemRarityTest.java b/src/test/java/io/papermc/paper/inventory/ItemRarityTest.java
index 38e6d42098f216b1d24f50386e7be98181122d8d..fc1a0703caf1204439bf9a90afe921894b962504 100644
--- a/src/test/java/io/papermc/paper/inventory/ItemRarityTest.java
+++ b/src/test/java/io/papermc/paper/inventory/ItemRarityTest.java
@@ -2,23 +2,24 @@ package io.papermc.paper.inventory;
 
 import io.papermc.paper.adventure.PaperAdventure;
 import net.minecraft.world.item.Rarity;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
+
+import static org.junit.jupiter.api.Assertions.assertEquals;
 
-import static org.junit.Assert.assertEquals;
 
 public class ItemRarityTest {
 
-    @Test
+    @org.junit.jupiter.api.Test
     public void testConvertFromNmsToBukkit() {
         for (Rarity nmsRarity : Rarity.values()) {
-            assertEquals("rarity names are mis-matched", ItemRarity.values()[nmsRarity.ordinal()].name(), nmsRarity.name());
+            assertEquals(ItemRarity.values()[nmsRarity.ordinal()].name(), nmsRarity.name(), "rarity names are mis-matched");
         }
     }
 
     @Test
     public void testRarityFormatting() {
         for (Rarity nmsRarity : Rarity.values()) {
-            assertEquals("rarity formatting is mis-matched", nmsRarity.color, PaperAdventure.asVanilla(ItemRarity.values()[nmsRarity.ordinal()].color));
+            assertEquals(nmsRarity.color, PaperAdventure.asVanilla(ItemRarity.values()[nmsRarity.ordinal()].color), "rarity formatting is mis-matched");
         }
     }
 }
diff --git a/src/test/java/io/papermc/paper/permissions/MinecraftCommandPermissionsTest.java b/src/test/java/io/papermc/paper/permissions/MinecraftCommandPermissionsTest.java
index 8665e2740aedcc2895b0e2c44ebaba53d2a40568..707592749e17077e7197acf1a8d69d735ce4f735 100644
--- a/src/test/java/io/papermc/paper/permissions/MinecraftCommandPermissionsTest.java
+++ b/src/test/java/io/papermc/paper/permissions/MinecraftCommandPermissionsTest.java
@@ -12,9 +12,9 @@ import org.bukkit.craftbukkit.command.VanillaCommandWrapper;
 import org.bukkit.craftbukkit.util.permissions.CraftDefaultPermissions;
 import org.bukkit.permissions.Permission;
 import org.bukkit.support.AbstractTestingBase;
-import org.junit.AfterClass;
-import org.junit.BeforeClass;
-import org.junit.Test;
+import org.junit.jupiter.api.AfterAll;
+import org.junit.jupiter.api.BeforeAll;
+import org.junit.jupiter.api.Test;
 
 import java.io.PrintStream;
 import java.util.HashSet;
@@ -23,12 +23,13 @@ import java.util.List;
 import java.util.Set;
 import java.util.TreeSet;
 
-import static org.junit.Assert.assertTrue;
+import static org.junit.jupiter.api.Assertions.assertTrue;
+
 
 public class MinecraftCommandPermissionsTest extends AbstractTestingBase {
 
     private static PrintStream old;
-    @BeforeClass
+    @BeforeAll
     public static void before() {
         old = System.out;
         System.setOut(Bootstrap.STDOUT);
@@ -51,9 +52,9 @@ public class MinecraftCommandPermissionsTest extends AbstractTestingBase {
                 foundPerms.add(vanillaPerm);
             }
         }
-        assertTrue("Commands missing permissions: \n" + String.join("\n", missing), missing.isEmpty());
+        assertTrue(missing.isEmpty(), "Commands missing permissions: \n" + String.join("\n", missing));
         perms.removeAll(foundPerms);
-        assertTrue("Extra permissions not associated with a command: \n" + String.join("\n", perms), perms.isEmpty());
+        assertTrue(perms.isEmpty(), "Extra permissions not associated with a command: \n" + String.join("\n", perms));
     }
 
     private static final List<String> TO_SKIP = List.of(
@@ -77,7 +78,7 @@ public class MinecraftCommandPermissionsTest extends AbstractTestingBase {
         return perms;
     }
 
-    @AfterClass
+    @AfterAll
     public static void after() {
         if (old != null) {
             System.setOut(old);
diff --git a/src/test/java/io/papermc/paper/scoreboard/DisplaySlotTest.java b/src/test/java/io/papermc/paper/scoreboard/DisplaySlotTest.java
index bb41a2f2c0a5e3b4cb3fe1b584e0ceb7a7116afb..26ef2d95ea1828ce892494c6042dc9363e4c34bb 100644
--- a/src/test/java/io/papermc/paper/scoreboard/DisplaySlotTest.java
+++ b/src/test/java/io/papermc/paper/scoreboard/DisplaySlotTest.java
@@ -3,14 +3,15 @@ package io.papermc.paper.scoreboard;
 import net.minecraft.world.scores.Scoreboard;
 import org.bukkit.craftbukkit.scoreboard.CraftScoreboardTranslations;
 import org.bukkit.scoreboard.DisplaySlot;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
+
+import static org.junit.jupiter.api.Assertions.assertNotEquals;
+import static org.junit.jupiter.api.Assertions.assertNotNull;
 
-import static org.junit.Assert.assertNotEquals;
-import static org.junit.Assert.assertNotNull;
 
 public class DisplaySlotTest {
 
-    @Test
+    @org.junit.jupiter.api.Test
     public void testBukkitToMinecraftDisplaySlots() {
         for (DisplaySlot value : DisplaySlot.values()) {
             assertNotEquals(-1, CraftScoreboardTranslations.fromBukkitSlot(value));
diff --git a/src/test/java/io/papermc/paper/util/ItemStackRepairCheckTest.java b/src/test/java/io/papermc/paper/util/ItemStackRepairCheckTest.java
index 8d9c9b3bd53d407391d4fcb7fc773153d1a7b402..1441eea91ae7a6136521a3c649aaba048cb334fd 100644
--- a/src/test/java/io/papermc/paper/util/ItemStackRepairCheckTest.java
+++ b/src/test/java/io/papermc/paper/util/ItemStackRepairCheckTest.java
@@ -3,46 +3,46 @@ package io.papermc.paper.util;
 import org.bukkit.Material;
 import org.bukkit.inventory.ItemStack;
 import org.bukkit.support.AbstractTestingBase;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
+
+import static org.junit.jupiter.api.Assertions.assertFalse;
+import static org.junit.jupiter.api.Assertions.assertTrue;
 
-import static org.junit.Assert.assertFalse;
-import static org.junit.Assert.assertThrows;
-import static org.junit.Assert.assertTrue;
 
 public class ItemStackRepairCheckTest extends AbstractTestingBase {
 
-    @Test
+    @org.junit.jupiter.api.Test
     public void testIsRepariableBy() {
         ItemStack diamondPick = new ItemStack(Material.DIAMOND_PICKAXE);
 
-        assertTrue("diamond pick isn't repairable by a diamond", diamondPick.isRepairableBy(new ItemStack(Material.DIAMOND)));
+        assertTrue(diamondPick.isRepairableBy(new ItemStack(Material.DIAMOND)), "diamond pick isn't repairable by a diamond");
     }
 
     @Test
     public void testCanRepair() {
         ItemStack diamond = new ItemStack(Material.DIAMOND);
 
-        assertTrue("diamond can't repair a diamond axe", diamond.canRepair(new ItemStack(Material.DIAMOND_AXE)));
+        assertTrue(diamond.canRepair(new ItemStack(Material.DIAMOND_AXE)), "diamond can't repair a diamond axe");
     }
 
-    @Test
+    @org.junit.jupiter.api.Test
     public void testIsNotRepairableBy() {
         ItemStack notDiamondPick = new ItemStack(Material.ACACIA_SAPLING);
 
-        assertFalse("acacia sapling is repairable by a diamond", notDiamondPick.isRepairableBy(new ItemStack(Material.DIAMOND)));
+        assertFalse(notDiamondPick.isRepairableBy(new ItemStack(Material.DIAMOND)), "acacia sapling is repairable by a diamond");
     }
 
     @Test
     public void testCanNotRepair() {
         ItemStack diamond = new ItemStack(Material.DIAMOND);
 
-        assertFalse("diamond can repair oak button", diamond.canRepair(new ItemStack(Material.OAK_BUTTON)));
+        assertFalse(diamond.canRepair(new ItemStack(Material.OAK_BUTTON)), "diamond can repair oak button");
     }
 
     @Test
     public void testInvalidItem() {
         ItemStack badItemStack = new ItemStack(Material.ACACIA_WALL_SIGN);
 
-        assertFalse("acacia wall sign is repairable by diamond", badItemStack.isRepairableBy(new ItemStack(Material.DIAMOND)));
+        assertFalse(badItemStack.isRepairableBy(new ItemStack(Material.DIAMOND)), "acacia wall sign is repairable by diamond");
     }
 }
diff --git a/src/test/java/io/papermc/paper/world/TranslationKeyTest.java b/src/test/java/io/papermc/paper/world/TranslationKeyTest.java
index 4cc8ca5dd95e9cccd08ada057a9592a1421f434a..364b7b1cc6f72560bcf6dac9cfecc9011213e226 100644
--- a/src/test/java/io/papermc/paper/world/TranslationKeyTest.java
+++ b/src/test/java/io/papermc/paper/world/TranslationKeyTest.java
@@ -13,45 +13,53 @@ import org.bukkit.GameMode;
 import org.bukkit.GameRule;
 import org.bukkit.attribute.Attribute;
 import org.bukkit.support.AbstractTestingBase;
+import org.junit.jupiter.api.Test;
 import org.junit.Assert;
 import org.junit.Ignore;
 import org.junit.Test;
 
+import java.util.Map;
+import java.util.Objects;
+
+import static org.junit.jupiter.api.Assertions.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertNotNull;
+
+
 public class TranslationKeyTest extends AbstractTestingBase {
 
     @Test
     public void testChatVisibilityKeys() {
         for (ClientOption.ChatVisibility chatVisibility : ClientOption.ChatVisibility.values()) {
             if (chatVisibility == ClientOption.ChatVisibility.UNKNOWN) continue;
-            Assert.assertEquals(chatVisibility + "'s translation key doesn't match", ChatVisiblity.valueOf(chatVisibility.name()).getKey(), chatVisibility.translationKey());
+            assertEquals(ChatVisiblity.valueOf(chatVisibility.name()).getKey(), chatVisibility.translationKey(), chatVisibility + "'s translation key doesn't match");
         }
     }
 
-    @Test
+    @org.junit.jupiter.api.Test
     public void testDifficultyKeys() {
         for (Difficulty bukkitDifficulty : Difficulty.values()) {
-            Assert.assertEquals(bukkitDifficulty + "'s translation key doesn't match", ((TranslatableContents) net.minecraft.world.Difficulty.byId(bukkitDifficulty.ordinal()).getDisplayName().getContents()).getKey(), bukkitDifficulty.translationKey());
+            assertEquals(((TranslatableContents) net.minecraft.world.Difficulty.byId(bukkitDifficulty.ordinal()).getDisplayName().getContents()).getKey(), bukkitDifficulty.translationKey(), bukkitDifficulty + "'s translation key doesn't match");
         }
     }
 
     @Test
     public void testGameruleKeys() {
         for (GameRule<?> rule : GameRule.values()) {
-            Assert.assertEquals(rule.getName() + "'s translation doesn't match", org.bukkit.craftbukkit.CraftWorld.getGameRulesNMS().get(rule.getName()).getDescriptionId(), rule.translationKey());
+            assertEquals(org.bukkit.craftbukkit.CraftWorld.getGameRulesNMS().get(rule.getName()).getDescriptionId(), rule.translationKey(), rule.getName() + "'s translation doesn't match");
         }
     }
 
-    @Test
+    @org.junit.jupiter.api.Test
     public void testAttributeKeys() {
         for (Attribute attribute : Attribute.values()) {
-            Assert.assertEquals("translation key mismatch for " + attribute, org.bukkit.craftbukkit.attribute.CraftAttributeMap.toMinecraft(attribute).getDescriptionId(), attribute.translationKey());
+            assertEquals(org.bukkit.craftbukkit.attribute.CraftAttributeMap.toMinecraft(attribute).getDescriptionId(), attribute.translationKey(), "translation key mismatch for " + attribute);
         }
     }
 
     @Test
     public void testFireworkEffectType() {
         for (FireworkEffect.Type type : FireworkEffect.Type.values()) {
-            Assert.assertEquals("translation key mismatch for " + type, net.minecraft.world.item.FireworkRocketItem.Shape.byId(org.bukkit.craftbukkit.inventory.CraftMetaFirework.getNBT(type)).getName(), org.bukkit.FireworkEffect.Type.NAMES.key(type));
+            assertEquals(net.minecraft.world.item.FireworkRocketItem.Shape.byId(org.bukkit.craftbukkit.inventory.CraftMetaFirework.getNBT(type)).getName(), org.bukkit.FireworkEffect.Type.NAMES.key(type), "translation key mismatch for " + type);
         }
     }
 
@@ -68,8 +76,8 @@ public class TranslationKeyTest extends AbstractTestingBase {
     public void testGameMode() {
         for (GameType nms : GameType.values()) {
             GameMode bukkit = GameMode.getByValue(nms.getId());
-            Assert.assertNotNull(bukkit);
-            Assert.assertEquals("translation key mismatch for " + bukkit, ((TranslatableContents) nms.getLongDisplayName().getContents()).getKey(), bukkit.translationKey());
+            assertNotNull(bukkit);
+            assertEquals(((TranslatableContents) nms.getLongDisplayName().getContents()).getKey(), bukkit.translationKey(), "translation key mismatch for " + bukkit);
         }
     }
 
@@ -77,7 +85,7 @@ public class TranslationKeyTest extends AbstractTestingBase {
     public void testBiome() {
         for (Map.Entry<ResourceKey<Biome>, Biome> nms : AbstractTestingBase.BIOMES.entrySet()) {
             org.bukkit.block.Biome bukkit = org.bukkit.block.Biome.valueOf(nms.getKey().location().getPath().toUpperCase());
-            Assert.assertEquals("translation key mismatch for " + bukkit, nms.getKey().location().toLanguageKey("biome"), bukkit.translationKey());
+            assertEquals(nms.getKey().location().toLanguageKey("biome"), bukkit.translationKey(), "translation key mismatch for " + bukkit);
         }
     }
 }
diff --git a/src/test/java/io/papermc/paper/world/structure/ConfiguredStructureTest.java b/src/test/java/io/papermc/paper/world/structure/ConfiguredStructureTest.java
index cb077ac5e24d6632c46927fef8ecd20f150d3596..21f2a33b0ce40e0afc4c47fab5d26a708166260f 100644
--- a/src/test/java/io/papermc/paper/world/structure/ConfiguredStructureTest.java
+++ b/src/test/java/io/papermc/paper/world/structure/ConfiguredStructureTest.java
@@ -6,14 +6,14 @@ import net.minecraft.core.registries.Registries;
 import net.minecraft.resources.ResourceKey;
 import net.minecraft.resources.ResourceLocation;
 import net.minecraft.server.Bootstrap;
-import net.minecraft.world.level.levelgen.structure.Structure;
 import net.minecraft.world.level.levelgen.structure.BuiltinStructures;
+import net.minecraft.world.level.levelgen.structure.Structure;
 import org.bukkit.NamespacedKey;
 import org.bukkit.craftbukkit.util.CraftNamespacedKey;
 import org.bukkit.support.AbstractTestingBase;
-import org.junit.AfterClass;
-import org.junit.BeforeClass;
-import org.junit.Test;
+import org.junit.jupiter.api.AfterAll;
+import org.junit.jupiter.api.BeforeAll;
+import org.junit.jupiter.api.Test;
 
 import java.io.PrintStream;
 import java.lang.reflect.Field;
@@ -22,9 +22,8 @@ import java.util.LinkedHashMap;
 import java.util.Map;
 import java.util.StringJoiner;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertNotNull;
-import static org.junit.Assert.assertTrue;
+import static org.junit.jupiter.api.Assertions.*;
+
 
 public class ConfiguredStructureTest extends AbstractTestingBase {
 
@@ -33,7 +32,7 @@ public class ConfiguredStructureTest extends AbstractTestingBase {
 
     private static PrintStream out;
 
-    @BeforeClass
+    @BeforeAll
     public static void collectStructures() throws ReflectiveOperationException {
         out = System.out;
         System.setOut(Bootstrap.STDOUT);
@@ -58,7 +57,7 @@ public class ConfiguredStructureTest extends AbstractTestingBase {
         Map<ResourceLocation, Structure> missing = new LinkedHashMap<>();
         for (Structure feature : structureRegistry) {
             final ResourceLocation key = structureRegistry.getKey(feature);
-            assertNotNull("Missing built-in registry key", key);
+            assertNotNull(key, "Missing built-in registry key");
             if (key.equals(BuiltinStructures.ANCIENT_CITY.location())) {
                 continue; // TODO remove when upstream adds "jigsaw" StructureType
             }
@@ -67,7 +66,7 @@ public class ConfiguredStructureTest extends AbstractTestingBase {
             }
         }
 
-        assertTrue(printMissing(missing), missing.isEmpty());
+        assertTrue(missing.isEmpty(), printMissing(missing));
     }
 
     @Test
@@ -88,7 +87,7 @@ public class ConfiguredStructureTest extends AbstractTestingBase {
         return joiner.toString();
     }
 
-    @AfterClass
+    @AfterAll
     public static void after() {
         System.setOut(out);
     }
diff --git a/src/test/java/org/bukkit/ArtTest.java b/src/test/java/org/bukkit/ArtTest.java
index d73df478f3e736cf6555b6cdfd42228cca2eb5c5..a2a1b8403e34f04a010e77db75c4e516682dae5f 100644
--- a/src/test/java/org/bukkit/ArtTest.java
+++ b/src/test/java/org/bukkit/ArtTest.java
@@ -1,7 +1,8 @@
 package org.bukkit;
 
+import static org.hamcrest.MatcherAssert.assertThat;
 import static org.hamcrest.Matchers.*;
-import static org.junit.Assert.*;
+import static org.junit.jupiter.api.Assertions.*;
 import com.google.common.collect.Lists;
 import java.util.Collections;
 import java.util.EnumMap;
@@ -14,12 +15,12 @@ import net.minecraft.resources.ResourceKey;
 import net.minecraft.world.entity.decoration.PaintingVariant;
 import org.bukkit.craftbukkit.CraftArt;
 import org.bukkit.support.AbstractTestingBase;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 public class ArtTest extends AbstractTestingBase {
     private static final int UNIT_MULTIPLIER = 16;
 
-    @Test
+    @org.junit.jupiter.api.Test
     public void verifyMapping() {
         List<Art> arts = Lists.newArrayList(Art.values());
 
@@ -32,7 +33,7 @@ public class ArtTest extends AbstractTestingBase {
             Art subject = CraftArt.NotchToBukkit(enumArt);
 
             String message = String.format("org.bukkit.Art is missing '%s'", name);
-            assertNotNull(message, subject);
+            assertNotNull(subject, message);
 
             assertThat(Art.getByName(name), is(subject));
             assertThat("Art." + subject + "'s width", subject.getBlockWidth(), is(width));
@@ -49,7 +50,7 @@ public class ArtTest extends AbstractTestingBase {
         Map<Holder<PaintingVariant>, Art> cache = new HashMap<>();
         for (Art art : Art.values()) {
             Holder<PaintingVariant> enumArt = CraftArt.BukkitToNotch(art);
-            assertNotNull(art.name(), enumArt);
+            assertNotNull(enumArt, art.name());
             assertThat(art.name(), cache.put(enumArt, art), is(nullValue()));
         }
     }
@@ -59,7 +60,7 @@ public class ArtTest extends AbstractTestingBase {
         Map<Art, Holder<PaintingVariant>> cache = new EnumMap(Art.class);
         for (Holder<PaintingVariant> enumArt : BuiltInRegistries.PAINTING_VARIANT.asHolderIdMap()) {
             Art art = CraftArt.NotchToBukkit(enumArt);
-            assertNotNull("Could not CraftArt.NotchToBukkit " + enumArt, art);
+            assertNotNull(art, "Could not CraftArt.NotchToBukkit " + enumArt);
             assertThat("Duplicate artwork " + enumArt, cache.put(art, enumArt), is(nullValue()));
         }
     }
diff --git a/src/test/java/org/bukkit/BiomeTest.java b/src/test/java/org/bukkit/BiomeTest.java
index 4392dc2d855c1b2ec2f40720929c8a84160d02e0..5ae3d64d3fa7b566fd459d855bcb1b50fb00de2e 100644
--- a/src/test/java/org/bukkit/BiomeTest.java
+++ b/src/test/java/org/bukkit/BiomeTest.java
@@ -3,19 +3,22 @@ package org.bukkit;
 import org.bukkit.block.Biome;
 import org.bukkit.craftbukkit.block.CraftBlock;
 import org.bukkit.support.AbstractTestingBase;
-import org.junit.Assert;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
+
+import static org.junit.jupiter.api.Assertions.assertNotNull;
+import static org.junit.jupiter.api.Assertions.assertTrue;
+
 
 public class BiomeTest extends AbstractTestingBase {
 
-    @Test
+    @org.junit.jupiter.api.Test
     public void testBukkitToMinecraft() {
         for (Biome biome : Biome.values()) {
             if (biome == Biome.CUSTOM) {
                 continue;
             }
 
-            Assert.assertNotNull("No NMS mapping for " + biome, CraftBlock.biomeToBiomeBase(BIOMES, biome));
+            assertNotNull(CraftBlock.biomeToBiomeBase(BIOMES, biome), "No NMS mapping for " + biome);
         }
     }
 
@@ -23,7 +26,7 @@ public class BiomeTest extends AbstractTestingBase {
     public void testMinecraftToBukkit() {
         for (net.minecraft.world.level.biome.Biome biomeBase : BIOMES) {
             Biome biome = CraftBlock.biomeBaseToBiome(BIOMES, biomeBase);
-            Assert.assertTrue("No Bukkit mapping for " + biomeBase, biome != null && biome != Biome.CUSTOM);
+            assertTrue(biome != null && biome != Biome.CUSTOM, "No Bukkit mapping for " + biomeBase);
         }
     }
 }
diff --git a/src/test/java/org/bukkit/BlockDataConversionTest.java b/src/test/java/org/bukkit/BlockDataConversionTest.java
index 4055eec441aa38da3f802900d05c387f5a4409e2..9627446536b00b50010c82967af1ab489c9c8178 100644
--- a/src/test/java/org/bukkit/BlockDataConversionTest.java
+++ b/src/test/java/org/bukkit/BlockDataConversionTest.java
@@ -1,38 +1,32 @@
 package org.bukkit;
 
-import java.util.ArrayList;
-import java.util.List;
 import net.minecraft.core.registries.BuiltInRegistries;
-import net.minecraft.world.level.block.Block;
 import net.minecraft.world.level.block.state.BlockState;
 import org.bukkit.craftbukkit.block.data.CraftBlockData;
 import org.bukkit.support.AbstractTestingBase;
-import org.junit.Assert;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.junit.runners.Parameterized;
+import org.junit.jupiter.params.ParameterizedTest;
+import org.junit.jupiter.params.provider.MethodSource;
+
+import java.util.stream.Stream;
+
+import static org.junit.jupiter.api.Assertions.assertNotNull;
+
 
 /**
  * This test class ensures that all Blocks (as registered in BuiltInRegistries.BLOCK)
  * can be converted into their CraftBlockData equivalent.
  */
-@RunWith(Parameterized.class)
 public class BlockDataConversionTest extends AbstractTestingBase {
 
-    @Parameterized.Parameters(name = "{index}: {0}")
-    public static List<Object[]> args() {
-        List<Object[]> list = new ArrayList<>();
-        for (Block block : (Iterable<Block>) BuiltInRegistries.BLOCK) {
-            list.add(new Object[]{block.defaultBlockState()});
-        }
-        return list;
+    @ParameterizedTest(name = "{index}: {0}")
+    public static Stream<Object[]> data() {
+        return BuiltInRegistries.BLOCK.stream().map(block -> new Object[]{block.defaultBlockState()});
     }
 
-    @Parameterized.Parameter(0) public BlockState data;
-
-    @Test
-    public void testNotNull() {
-        Assert.assertNotNull(data);
-        Assert.assertNotNull(CraftBlockData.fromData(data));
+    @ParameterizedTest
+    @MethodSource("data")
+    public void testNotNull(BlockState data) {
+        assertNotNull(data);
+        assertNotNull(CraftBlockData.fromData(data));
     }
 }
diff --git a/src/test/java/org/bukkit/BlockDataTest.java b/src/test/java/org/bukkit/BlockDataTest.java
index 72e283cd517946e513f044cebf2f4dd2dee05f6b..dee727132bfe44a09f43df87c7e07a0c43bed7e3 100644
--- a/src/test/java/org/bukkit/BlockDataTest.java
+++ b/src/test/java/org/bukkit/BlockDataTest.java
@@ -1,6 +1,9 @@
 package org.bukkit;
 
+import static org.hamcrest.MatcherAssert.assertThat;
 import static org.hamcrest.Matchers.*;
+import static org.junit.jupiter.api.Assertions.*;
+import static org.junit.jupiter.api.Assertions.assertThrows;
 
 import net.minecraft.core.Direction;
 import net.minecraft.world.level.block.Blocks;
@@ -12,8 +15,7 @@ import org.bukkit.block.data.type.Cake;
 import org.bukkit.block.data.type.Chest;
 import org.bukkit.craftbukkit.block.data.CraftBlockData;
 import org.bukkit.support.AbstractTestingBase;
-import org.junit.Assert;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 public class BlockDataTest extends AbstractTestingBase {
 
@@ -22,48 +24,48 @@ public class BlockDataTest extends AbstractTestingBase {
         BlockData cakeTest = CraftBlockData.fromData(Blocks.CAKE.defaultBlockState().setValue(CakeBlock.BITES, 3));
 
         BlockData materialString = CraftBlockData.newData(Material.CAKE, "[bites=3]");
-        Assert.assertThat(materialString, is(cakeTest));
+        assertThat(materialString, is(cakeTest));
 
         BlockData combined = CraftBlockData.newData(null, "cake[bites=3]");
-        Assert.assertThat(combined, is(cakeTest));
+        assertThat(combined, is(cakeTest));
 
         BlockData combinedMinecraft = CraftBlockData.newData(null, "minecraft:cake[bites=3]");
-        Assert.assertThat(combinedMinecraft, is(cakeTest));
+        assertThat(combinedMinecraft, is(cakeTest));
 
         BlockData inverted = CraftBlockData.newData(null, cakeTest.getAsString());
-        Assert.assertThat(inverted, is(cakeTest));
+        assertThat(inverted, is(cakeTest));
     }
 
-    @Test(expected = IllegalArgumentException.class)
+    @Test
     public void testBadMaterial() {
-        CraftBlockData.newData(null, "invalid");
+        assertThrows(IllegalArgumentException.class, () -> CraftBlockData.newData(null, "invalid"));
     }
 
-    @Test(expected = IllegalArgumentException.class)
+    @Test
     public void testBadSyntax() {
-        CraftBlockData.newData(null, "minecraft:cake[bites=3");
+        assertThrows(IllegalArgumentException.class, () -> CraftBlockData.newData(null, "minecraft:cake[bites=3"));
     }
 
-    @Test(expected = IllegalArgumentException.class)
+    @Test
     public void testDoubleMaterial() {
-        CraftBlockData.newData(Material.CAKE, "minecraft:cake[bites=3]");
+        assertThrows(IllegalArgumentException.class, () -> CraftBlockData.newData(Material.CAKE, "minecraft:cake[bites=3]"));
     }
 
-    @Test(expected = IllegalArgumentException.class)
+    @Test
     public void testMistake() {
         BlockData cakeTest = CraftBlockData.fromData(Blocks.CAKE.defaultBlockState().setValue(CakeBlock.BITES, 3));
 
-        CraftBlockData.newData(Material.CAKE, cakeTest.toString());
+        assertThrows(IllegalArgumentException.class, () -> CraftBlockData.newData(Material.CAKE, cakeTest.toString()));
     }
 
-    @Test(expected = IllegalArgumentException.class)
+    @Test
     public void testItem() {
-        CraftBlockData.newData(Material.DIAMOND_AXE, null);
+        assertThrows(IllegalArgumentException.class, () -> CraftBlockData.newData(Material.DIAMOND_AXE, null));
     }
 
-    @Test(expected = IllegalArgumentException.class)
+    @Test
     public void testItemParse() {
-        CraftBlockData.newData(null, "minecraft:diamond_axe");
+        assertThrows(IllegalArgumentException.class, () -> CraftBlockData.newData(null, "minecraft:diamond_axe"));
     }
 
     @Test
@@ -71,11 +73,11 @@ public class BlockDataTest extends AbstractTestingBase {
         Cake cakeTest = (Cake) CraftBlockData.fromData(Blocks.CAKE.defaultBlockState().setValue(CakeBlock.BITES, 3));
         Cake clone = (Cake) cakeTest.clone();
 
-        Assert.assertFalse("Clone did not return new object", cakeTest == clone);
-        Assert.assertThat("Clone is not equal", clone, is(cakeTest));
+        assertNotSame(cakeTest, clone, "Clone did not return new object");
+        assertThat("Clone is not equal", clone, is(cakeTest));
 
         clone.setBites(1);
-        Assert.assertThat("Clone is not actually clone", clone, is(not(cakeTest)));
+        assertThat("Clone is not actually clone", clone, is(not(cakeTest)));
     }
 
     @Test
@@ -86,16 +88,16 @@ public class BlockDataTest extends AbstractTestingBase {
 
         BlockData candidate;
 
-        Assert.assertFalse("Target and match are not yet equal", trueTarget.equals(waterlogged));
+        assertNotEquals(trueTarget, waterlogged, "Target and match are not yet equal");
         candidate = trueTarget.merge(waterlogged);
-        Assert.assertTrue("Target and candidate are now equal", trueTarget.equals(candidate));
+        assertEquals(trueTarget, candidate, "Target and candidate are now equal");
 
-        Assert.assertFalse("Target and match are not yet equal", falseTarget.equals(waterlogged));
+        assertNotEquals(falseTarget, waterlogged, "Target and match are not yet equal");
         candidate = falseTarget.merge(waterlogged);
-        Assert.assertFalse("Target and candidate are still not equal", falseTarget.equals(candidate));
+        assertNotEquals(falseTarget, candidate, "Target and candidate are still not equal");
     }
 
-    @Test
+    @org.junit.jupiter.api.Test
     public void testMergeAny() {
         Chest trueTarget = (Chest) CraftBlockData.newData(null, "minecraft:chest[facing=east,waterlogged=true]");
         Chest falseTarget = (Chest) CraftBlockData.newData(null, "minecraft:chest[facing=east,waterlogged=false]");
@@ -103,24 +105,24 @@ public class BlockDataTest extends AbstractTestingBase {
 
         BlockData candidate;
 
-        Assert.assertFalse("Target and match are not yet equal", trueTarget.equals(any));
+        assertNotEquals(trueTarget, any, "Target and match are not yet equal");
         candidate = trueTarget.merge(any);
-        Assert.assertTrue("Target and candidate are now equal", trueTarget.equals(candidate));
+        assertEquals(trueTarget, candidate, "Target and candidate are now equal");
 
-        Assert.assertFalse("Target and match are not yet equal", falseTarget.equals(any));
+        assertNotEquals(falseTarget, any, "Target and match are not yet equal");
         candidate = falseTarget.merge(any);
-        Assert.assertTrue("Target and candidate are now equal", falseTarget.equals(candidate));
+        assertEquals(falseTarget, candidate, "Target and candidate are now equal");
     }
 
-    @Test(expected = IllegalArgumentException.class)
+    @Test
     public void testCannotMerge1() {
         Chest one = (Chest) CraftBlockData.newData(null, "minecraft:chest[facing=east,waterlogged=true]");
         Chest two = (Chest) CraftBlockData.fromData(Blocks.CHEST.defaultBlockState());
 
-        one.merge(two);
+        assertThrows(IllegalArgumentException.class, () -> one.merge(two));
     }
 
-    @Test(expected = IllegalArgumentException.class)
+    @Test
     public void testCannotMerge2() {
         Chest one = (Chest) CraftBlockData.newData(null, "minecraft:chest[waterlogged=true]");
         Chest two = (Chest) CraftBlockData.newData(null, "minecraft:chest[waterlogged=true]");
@@ -128,30 +130,30 @@ public class BlockDataTest extends AbstractTestingBase {
         one.merge(two);
 
         two.setFacing(BlockFace.NORTH);
-        one.merge(two);
+        assertThrows(IllegalArgumentException.class, () -> one.merge(two));
     }
 
-    @Test(expected = IllegalArgumentException.class)
+    @org.junit.jupiter.api.Test
     public void testCannotMerge3() {
         Chest one = (Chest) CraftBlockData.newData(null, "minecraft:chest[waterlogged=true]");
         Chest two = (Chest) CraftBlockData.newData(null, "minecraft:trapped_chest[waterlogged=true]");
 
-        one.merge(two);
+        assertThrows(IllegalArgumentException.class, () -> one.merge(two));
     }
 
     @Test
     public void testMatch() {
-        Assert.assertTrue(CraftBlockData.newData(null, "minecraft:chest[facing=east,waterlogged=true]").matches(CraftBlockData.newData(null, "minecraft:chest[waterlogged=true]")));
-        Assert.assertFalse(CraftBlockData.newData(null, "minecraft:chest[facing=east,waterlogged=false]").matches(CraftBlockData.newData(null, "minecraft:chest[waterlogged=true]")));
-        Assert.assertTrue(CraftBlockData.newData(null, "minecraft:chest[facing=east,waterlogged=true]").matches(CraftBlockData.newData(null, "minecraft:chest")));
-        Assert.assertFalse(CraftBlockData.newData(null, "minecraft:trapped_chest[facing=east,waterlogged=false]").matches(CraftBlockData.newData(null, "minecraft:chest[waterlogged=true]")));
-        Assert.assertTrue(CraftBlockData.newData(null, "minecraft:chest[facing=east,waterlogged=true]").matches(CraftBlockData.newData(null, "minecraft:chest[waterlogged=true,facing=east]")));
+        assertTrue(CraftBlockData.newData(null, "minecraft:chest[facing=east,waterlogged=true]").matches(CraftBlockData.newData(null, "minecraft:chest[waterlogged=true]")));
+        assertFalse(CraftBlockData.newData(null, "minecraft:chest[facing=east,waterlogged=false]").matches(CraftBlockData.newData(null, "minecraft:chest[waterlogged=true]")));
+        assertTrue(CraftBlockData.newData(null, "minecraft:chest[facing=east,waterlogged=true]").matches(CraftBlockData.newData(null, "minecraft:chest")));
+        assertFalse(CraftBlockData.newData(null, "minecraft:trapped_chest[facing=east,waterlogged=false]").matches(CraftBlockData.newData(null, "minecraft:chest[waterlogged=true]")));
+        assertTrue(CraftBlockData.newData(null, "minecraft:chest[facing=east,waterlogged=true]").matches(CraftBlockData.newData(null, "minecraft:chest[waterlogged=true,facing=east]")));
 
         Chest one = (Chest) CraftBlockData.fromData(Blocks.CHEST.defaultBlockState().setValue(ChestBlock.FACING, Direction.EAST));
         Chest two = (Chest) CraftBlockData.newData(null, "minecraft:chest[waterlogged=false]");
 
-        Assert.assertTrue(one.matches(two));
-        Assert.assertFalse(two.matches(one));
+        assertTrue(one.matches(two));
+        assertFalse(two.matches(one));
     }
 
     @Test
@@ -159,15 +161,15 @@ public class BlockDataTest extends AbstractTestingBase {
         String dataString = "minecraft:chest[facing=east,waterlogged=true]";
         BlockData data = CraftBlockData.newData(null, dataString);
 
-        Assert.assertThat(data.getAsString(true), is(dataString));
-        Assert.assertThat(data.getAsString(false), is("minecraft:chest[facing=east,type=single,waterlogged=true]"));
+        assertThat(data.getAsString(true), is(dataString));
+        assertThat(data.getAsString(false), is("minecraft:chest[facing=east,type=single,waterlogged=true]"));
     }
 
     @Test
     public void testGetAsString2() {
         Chest data = (Chest) CraftBlockData.fromData(Blocks.CHEST.defaultBlockState().setValue(ChestBlock.FACING, Direction.EAST));
 
-        Assert.assertThat(data.getAsString(true), is("minecraft:chest[facing=east,type=single,waterlogged=false]"));
-        Assert.assertThat(data.getAsString(false), is("minecraft:chest[facing=east,type=single,waterlogged=false]"));
+        assertThat(data.getAsString(true), is("minecraft:chest[facing=east,type=single,waterlogged=false]"));
+        assertThat(data.getAsString(false), is("minecraft:chest[facing=east,type=single,waterlogged=false]"));
     }
 }
diff --git a/src/test/java/org/bukkit/ChatTest.java b/src/test/java/org/bukkit/ChatTest.java
index ce44f747b16a96447286fab6f1d753703e0ff554..255d35889f9b9ec91672d9bc2be0d657c4f534a7 100644
--- a/src/test/java/org/bukkit/ChatTest.java
+++ b/src/test/java/org/bukkit/ChatTest.java
@@ -1,29 +1,28 @@
 package org.bukkit;
 
-import static org.junit.Assert.*;
+import static org.junit.jupiter.api.Assertions.*;
 
 import net.minecraft.ChatFormatting;
 import net.minecraft.network.chat.Component;
 import org.bukkit.craftbukkit.util.CraftChatMessage;
-import org.junit.Assert;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 public class ChatTest {
 
     @Test
     public void testColors() {
         for (ChatColor color : ChatColor.values()) {
-            Assert.assertNotNull(CraftChatMessage.getColor(color));
-            Assert.assertEquals(color, CraftChatMessage.getColor(CraftChatMessage.getColor(color)));
+            assertNotNull(CraftChatMessage.getColor(color));
+            assertEquals(color, CraftChatMessage.getColor(CraftChatMessage.getColor(color)));
         }
 
         for (ChatFormatting format : ChatFormatting.values()) {
-            Assert.assertNotNull(CraftChatMessage.getColor(format));
-            Assert.assertEquals(format, CraftChatMessage.getColor(CraftChatMessage.getColor(format)));
+            assertNotNull(CraftChatMessage.getColor(format));
+            assertEquals(format, CraftChatMessage.getColor(CraftChatMessage.getColor(format)));
         }
     }
 
-    @Test
+    @org.junit.jupiter.api.Test
     public void testURLJsonConversion() {
         Component[] components;
         components = CraftChatMessage.fromString("https://spigotmc.org/test Test Message");
diff --git a/src/test/java/org/bukkit/DyeColorsTest.java b/src/test/java/org/bukkit/DyeColorsTest.java
index 6b7dd01778f0a5d3a96d2d04af4b525d17efbfba..92520a21f4f9e7bc51750f695d986dcb75fe6d0d 100644
--- a/src/test/java/org/bukkit/DyeColorsTest.java
+++ b/src/test/java/org/bukkit/DyeColorsTest.java
@@ -1,42 +1,35 @@
 package org.bukkit;
 
-import static org.hamcrest.Matchers.*;
-import static org.junit.Assert.*;
-import java.util.ArrayList;
-import java.util.List;
 import org.bukkit.support.AbstractTestingBase;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.junit.runners.Parameterized;
-import org.junit.runners.Parameterized.Parameter;
-import org.junit.runners.Parameterized.Parameters;
+import org.junit.jupiter.params.ParameterizedTest;
+import org.junit.jupiter.params.provider.MethodSource;
+
+import java.util.stream.Stream;
+
+import static org.hamcrest.MatcherAssert.assertThat;
+import static org.hamcrest.Matchers.is;
 
-@RunWith(Parameterized.class)
 public class DyeColorsTest extends AbstractTestingBase {
 
-    @Parameters(name = "{index}: {0}")
-    public static List<Object[]> data() {
-        List<Object[]> list = new ArrayList<Object[]>();
-        for (DyeColor dye : DyeColor.values()) {
-            list.add(new Object[] {dye});
-        }
-        return list;
+    @ParameterizedTest(name = "{index}: {0}")
+    public static Stream<Object[]> data() {
+        return Stream.of(DyeColor.values()).map(input -> new Object[]{input});
     }
 
-    @Parameter public DyeColor dye;
-
-    @Test
-    public void checkColor() {
-        Color color = this.dye.getColor();
-        float[] nmsColorArray = net.minecraft.world.item.DyeColor.byId(this.dye.getWoolData()).getTextureDiffuseColors(); // Paper - remap fix
+    @ParameterizedTest
+    @MethodSource("data")
+    public void checkColor(DyeColor dye) {
+        Color color = dye.getColor();
+        float[] nmsColorArray = net.minecraft.world.item.DyeColor.byId(dye.getWoolData()).getTextureDiffuseColors(); // Paper - remap fix
         Color nmsColor = Color.fromRGB((int) (nmsColorArray[0] * 255), (int) (nmsColorArray[1] * 255), (int) (nmsColorArray[2] * 255));
         assertThat(color, is(nmsColor));
     }
 
-    @Test
-    public void checkFireworkColor() {
-        Color color = this.dye.getFireworkColor();
-        int nmsColor = net.minecraft.world.item.DyeColor.byId(this.dye.getWoolData()).getFireworkColor(); // Paper - remap fix
+    @ParameterizedTest
+    @MethodSource("data")
+    public void checkFireworkColor(DyeColor dye) {
+        Color color = dye.getFireworkColor();
+        int nmsColor = net.minecraft.world.item.DyeColor.byId(dye.getWoolData()).getFireworkColor(); // Paper - remap fix
         assertThat(color, is(Color.fromRGB(nmsColor)));
     }
 }
diff --git a/src/test/java/org/bukkit/EnchantmentTest.java b/src/test/java/org/bukkit/EnchantmentTest.java
index 579c05750f1461bfd14bf383559e22fd1eb1074e..91caf915db46d490cbb3575d220bceeed2549860 100644
--- a/src/test/java/org/bukkit/EnchantmentTest.java
+++ b/src/test/java/org/bukkit/EnchantmentTest.java
@@ -5,8 +5,11 @@ import net.minecraft.resources.ResourceLocation;
 import org.bukkit.craftbukkit.util.CraftNamespacedKey;
 import org.bukkit.enchantments.Enchantment;
 import org.bukkit.support.AbstractTestingBase;
-import org.junit.Assert;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
+
+import static org.junit.jupiter.api.Assertions.assertFalse;
+import static org.junit.jupiter.api.Assertions.assertNotNull;
+
 
 public class EnchantmentTest extends AbstractTestingBase {
 
@@ -17,9 +20,9 @@ public class EnchantmentTest extends AbstractTestingBase {
 
             Enchantment bukkitById = Enchantment.getByKey(CraftNamespacedKey.fromMinecraft(key));
 
-            Assert.assertFalse("Unknown enchant name for " + key, bukkitById.getName().startsWith("UNKNOWN"));
+            assertFalse(bukkitById.getName().startsWith("UNKNOWN"), "Unknown enchant name for " + key);
 
-            Assert.assertNotNull("Unknown target for " + key, bukkitById.getItemTarget());
+            assertNotNull(bukkitById.getItemTarget(), "Unknown target for " + key);
         }
     }
 }
diff --git a/src/test/java/org/bukkit/GameEventTest.java b/src/test/java/org/bukkit/GameEventTest.java
index bb25e9e0ecf25c31c57f8af5ed8cccc24e72c025..293b468b5636b709b036e54639f6fecf8579087b 100644
--- a/src/test/java/org/bukkit/GameEventTest.java
+++ b/src/test/java/org/bukkit/GameEventTest.java
@@ -3,8 +3,10 @@ package org.bukkit;
 import net.minecraft.core.registries.BuiltInRegistries;
 import org.bukkit.craftbukkit.util.CraftNamespacedKey;
 import org.bukkit.support.AbstractTestingBase;
-import org.junit.Assert;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
+
+import static org.junit.jupiter.api.Assertions.assertNotNull;
+
 
 public class GameEventTest extends AbstractTestingBase {
 
@@ -13,7 +15,7 @@ public class GameEventTest extends AbstractTestingBase {
         for (net.minecraft.world.level.gameevent.GameEvent nms : BuiltInRegistries.GAME_EVENT) {
             GameEvent bukkit = GameEvent.getByKey(CraftNamespacedKey.fromMinecraft(BuiltInRegistries.GAME_EVENT.getKey(nms)));
 
-            Assert.assertNotNull("Bukkit should not be null " + nms, bukkit);
+            assertNotNull(bukkit, "Bukkit should not be null " + nms);
         }
     }
 }
diff --git a/src/test/java/org/bukkit/GameRuleTest.java b/src/test/java/org/bukkit/GameRuleTest.java
index aa3b2e29530110b44500f2134513c9c3879efe99..1ee9d8311ba341fdb16241d9cf81d0c5a1208f0a 100644
--- a/src/test/java/org/bukkit/GameRuleTest.java
+++ b/src/test/java/org/bukkit/GameRuleTest.java
@@ -3,54 +3,56 @@ package org.bukkit;
 import java.util.Map;
 import net.minecraft.world.level.GameRules;
 import org.bukkit.craftbukkit.CraftWorld;
-import org.junit.Assert;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
+
+import static org.junit.jupiter.api.Assertions.*;
+
 
 public class GameRuleTest {
 
-    @Test
+    @org.junit.jupiter.api.Test
     public void testBukkitRules() {
         GameRule<?>[] rules = GameRule.values();
 
         for (GameRule<?> rule : rules) {
             GameRule<?> registeredRule = GameRule.getByName(rule.getName());
-            Assert.assertNotNull("Null GameRule", registeredRule);
-            Assert.assertEquals("Invalid GameRule equality", rule, registeredRule);
+            assertNotNull(registeredRule, "Null GameRule");
+            assertEquals(rule, registeredRule, "Invalid GameRule equality");
         }
     }
 
-    @Test
+    @org.junit.jupiter.api.Test
     public void testMinecraftRules() {
         Map<String, GameRules.Key<?>> minecraftRules = CraftWorld.getGameRulesNMS();
 
         for (Map.Entry<String, GameRules.Key<?>> entry : minecraftRules.entrySet()) {
             GameRule<?> bukkitRule = GameRule.getByName(entry.getKey());
 
-            Assert.assertNotNull("Missing " + entry.getKey(), bukkitRule);
-            Assert.assertEquals("Invalid GameRule Name", bukkitRule.getName(), entry.getKey());
+            assertNotNull(bukkitRule, "Missing " + entry.getKey());
+            assertEquals(bukkitRule.getName(), entry.getKey(), "Invalid GameRule Name");
         }
     }
 
-    @Test(expected = NullPointerException.class)
+    @org.junit.jupiter.api.Test
     public void nullGameRuleName() {
-        GameRule.getByName(null);
+        assertThrows(NullPointerException.class, () -> GameRule.getByName(null));
     }
 
     @Test
     public void emptyGameRuleName() {
-        Assert.assertNull(GameRule.getByName(""));
+        assertNull(GameRule.getByName(""));
     }
 
-    @Test
+    @org.junit.jupiter.api.Test
     public void incorrectGameRuleName() {
-        Assert.assertNull(GameRule.getByName("doAnnounceAdvancements"));
-        Assert.assertNull(GameRule.getByName("sendCommandBlockFeedback"));
+        assertNull(GameRule.getByName("doAnnounceAdvancements"));
+        assertNull(GameRule.getByName("sendCommandBlockFeedback"));
     }
 
-    @Test
+    @org.junit.jupiter.api.Test
     public void invalidCasing() {
-        Assert.assertNull(GameRule.getByName("CommandBlockOutput"));
-        Assert.assertNull(GameRule.getByName("spAwnRadius"));
-        Assert.assertNull(GameRule.getByName("rand0mTickSpeEd"));
+        assertNull(GameRule.getByName("CommandBlockOutput"));
+        assertNull(GameRule.getByName("spAwnRadius"));
+        assertNull(GameRule.getByName("rand0mTickSpeEd"));
     }
 }
diff --git a/src/test/java/org/bukkit/LootTablesTest.java b/src/test/java/org/bukkit/LootTablesTest.java
index 86861da255279076f0b53da31f6caa5c70515669..337ffefed37765862db5dbc97602a4d34005acb3 100644
--- a/src/test/java/org/bukkit/LootTablesTest.java
+++ b/src/test/java/org/bukkit/LootTablesTest.java
@@ -5,8 +5,11 @@ import org.bukkit.craftbukkit.util.CraftNamespacedKey;
 import org.bukkit.loot.LootTable;
 import org.bukkit.loot.LootTables;
 import org.bukkit.support.AbstractTestingBase;
-import org.junit.Assert;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
+
+import static org.junit.jupiter.api.Assertions.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertNotNull;
+
 
 public class LootTablesTest extends AbstractTestingBase {
 
@@ -17,8 +20,8 @@ public class LootTablesTest extends AbstractTestingBase {
         for (LootTables table : tables) {
             LootTable lootTable = Bukkit.getLootTable(table.getKey());
 
-            Assert.assertNotNull("Unknown LootTable " + table.getKey(), lootTable);
-            Assert.assertEquals(lootTable.getKey(), table.getKey());
+            assertNotNull(lootTable, "Unknown LootTable " + table.getKey());
+            assertEquals(lootTable.getKey(), table.getKey());
         }
     }
 
@@ -28,8 +31,8 @@ public class LootTablesTest extends AbstractTestingBase {
             NamespacedKey bukkitKey = CraftNamespacedKey.fromMinecraft(key);
             LootTables lootTable = Registry.LOOT_TABLES.get(bukkitKey);
 
-            Assert.assertNotNull("Unknown LootTable " + key, lootTable);
-            Assert.assertEquals(lootTable.getKey(), bukkitKey);
+            assertNotNull(lootTable, "Unknown LootTable " + key);
+            assertEquals(lootTable.getKey(), bukkitKey);
         }
     }
 }
diff --git a/src/test/java/org/bukkit/MaterialTest.java b/src/test/java/org/bukkit/MaterialTest.java
index 55e80159d81046ab800057af271b1dfbfa0e2ccf..9399e08df16a150ae31d7ce10dbb2ccb6e58a481 100644
--- a/src/test/java/org/bukkit/MaterialTest.java
+++ b/src/test/java/org/bukkit/MaterialTest.java
@@ -1,7 +1,8 @@
 package org.bukkit;
 
+import static org.hamcrest.MatcherAssert.assertThat;
 import static org.hamcrest.Matchers.*;
-import static org.junit.Assert.*;
+import static org.junit.jupiter.api.Assertions.*;
 import com.google.common.collect.Maps;
 import java.util.ArrayList;
 import java.util.Arrays;
@@ -16,11 +17,12 @@ import net.minecraft.resources.ResourceLocation;
 import net.minecraft.world.item.Item;
 import org.bukkit.craftbukkit.util.CraftMagicNumbers;
 import org.bukkit.support.AbstractTestingBase;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
+
 
 public class MaterialTest extends AbstractTestingBase {
 
-    @Test
+    @org.junit.jupiter.api.Test
     public void verifyMapping() {
         Map<ResourceLocation, Material> materials = Maps.newHashMap();
         for (Material material : Material.values()) {
@@ -43,7 +45,7 @@ public class MaterialTest extends AbstractTestingBase {
             Material material = materials.remove(id);
 
             assertThat("Missing " + name + "(" + id + ")", material, is(not(nullValue())));
-            assertNotNull("No item mapping for " + name, CraftMagicNumbers.getMaterial(item));
+            assertNotNull(CraftMagicNumbers.getMaterial(item), "No item mapping for " + name);
         }
 
         assertThat(materials, is(Collections.EMPTY_MAP));
diff --git a/src/test/java/org/bukkit/ParticleTest.java b/src/test/java/org/bukkit/ParticleTest.java
index 33806139c7f0cc4710b88dfb9b71fea95779d37c..cc767d53201bc34653f088e639ef4de9a3dba51c 100644
--- a/src/test/java/org/bukkit/ParticleTest.java
+++ b/src/test/java/org/bukkit/ParticleTest.java
@@ -7,8 +7,10 @@ import org.bukkit.craftbukkit.block.data.CraftBlockData;
 import org.bukkit.inventory.ItemStack;
 import org.bukkit.material.MaterialData;
 import org.bukkit.support.AbstractTestingBase;
-import org.junit.Assert;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
+
+import static org.junit.jupiter.api.Assertions.assertNotNull;
+
 
 public class ParticleTest extends AbstractTestingBase {
 
@@ -25,6 +27,7 @@ public class ParticleTest extends AbstractTestingBase {
             } else if (bukkit.getDataType() == Particle.DustTransition.class) {
                 data = new Particle.DustTransition(Color.BLACK, Color.WHITE, 0);
             } else if (bukkit.getDataType() == Vibration.class) {
+                //noinspection removal
                 data = new Vibration(new Location(null, 0, 0, 0), new Vibration.Destination.BlockDestination(new Location(null, 0, 0, 0)), 0);
             } else if (bukkit.getDataType() == BlockData.class) {
                 data = CraftBlockData.newData(Material.STONE, "");
@@ -34,10 +37,10 @@ public class ParticleTest extends AbstractTestingBase {
                 data = 0;
             }
 
-            Assert.assertNotNull("Missing Bukkit->NMS particle mapping for " + bukkit, CraftParticle.toNMS(bukkit, data));
+            assertNotNull(CraftParticle.toNMS(bukkit, data), "Missing Bukkit->NMS particle mapping for " + bukkit);
         }
         for (net.minecraft.core.particles.ParticleType nms : BuiltInRegistries.PARTICLE_TYPE) {
-            Assert.assertNotNull("Missing NMS->Bukkit particle mapping for " + BuiltInRegistries.PARTICLE_TYPE.getKey(nms), CraftParticle.toBukkit(nms));
+            assertNotNull(CraftParticle.toBukkit(nms), "Missing NMS->Bukkit particle mapping for " + BuiltInRegistries.PARTICLE_TYPE.getKey(nms));
         }
     }
 }
diff --git a/src/test/java/org/bukkit/PerMaterialTest.java b/src/test/java/org/bukkit/PerMaterialTest.java
index e63a221d81ca7285a0d66b1015d0a61c54a0615b..1b436cd85f4a9124431285d9c7e501bc637e3ef6 100644
--- a/src/test/java/org/bukkit/PerMaterialTest.java
+++ b/src/test/java/org/bukkit/PerMaterialTest.java
@@ -1,10 +1,5 @@
 package org.bukkit;
 
-import static org.hamcrest.Matchers.*;
-import static org.junit.Assert.*;
-import com.google.common.collect.Lists;
-import java.util.List;
-import java.util.Map;
 import net.minecraft.core.BlockPos;
 import net.minecraft.world.InteractionHand;
 import net.minecraft.world.entity.Mob;
@@ -29,268 +24,290 @@ import org.bukkit.inventory.EquipmentSlot;
 import org.bukkit.inventory.ItemStack;
 import org.bukkit.material.MaterialData;
 import org.bukkit.support.AbstractTestingBase;
-import org.junit.BeforeClass;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.junit.runners.Parameterized;
-import org.junit.runners.Parameterized.Parameter;
-import org.junit.runners.Parameterized.Parameters;
-
-@RunWith(Parameterized.class)
+import org.junit.jupiter.api.BeforeAll;
+import org.junit.jupiter.params.ParameterizedTest;
+import org.junit.jupiter.params.provider.MethodSource;
+
+import java.util.Map;
+import java.util.stream.Stream;
+
+import static org.hamcrest.MatcherAssert.assertThat;
+import static org.hamcrest.Matchers.*;
+import static org.junit.jupiter.api.Assertions.*;
+
+
 public class PerMaterialTest extends AbstractTestingBase {
     private static Map<Block, Integer> fireValues;
 
-    @BeforeClass
+    @BeforeAll
     public static void getFireValues() {
         PerMaterialTest.fireValues = ((FireBlock) Blocks.FIRE).igniteOdds;
     }
 
-    @Parameters(name = "{index}: {0}")
-    public static List<Object[]> data() {
-        List<Object[]> list = Lists.newArrayList();
-        for (Material material : Material.values()) {
-            if (!material.isLegacy()) {
-                list.add(new Object[] {material});
-            }
-        }
-        return list;
+    @ParameterizedTest(name = "{index}: {0}")
+    public static Stream<Object[]> data() {
+        return Stream.of(Material.values()).filter(it -> !it.isLegacy()).map(input -> new Object[]{input});
     }
 
-    @Parameter public Material material;
-
-    @Test
-    public void isBlock() {
-        if (this.material != Material.AIR && this.material != Material.CAVE_AIR && this.material != Material.VOID_AIR) {
-            assertThat(this.material.isBlock(), is(not(CraftMagicNumbers.getBlock(material) == null)));
+    @ParameterizedTest
+    @MethodSource("data")
+    public void isBlock(Material material) {
+        if (material != Material.AIR && material != Material.CAVE_AIR && material != Material.VOID_AIR) {
+            assertThat(material.isBlock(), is(not(CraftMagicNumbers.getBlock(material) == null)));
         }
     }
 
-    @Test
-    public void isSolid() {
-        if (this.material == Material.AIR) {
-            assertFalse(this.material.isSolid());
-        } else if (this.material.isBlock()) {
-            assertThat(this.material.isSolid(), is(CraftMagicNumbers.getBlock(material).defaultBlockState().getMaterial().blocksMotion()));
+    @ParameterizedTest
+    @MethodSource("data")
+    public void isSolid(Material material) {
+        if (material == Material.AIR) {
+            assertFalse(material.isSolid());
+        } else if (material.isBlock()) {
+            assertThat(material.isSolid(), is(CraftMagicNumbers.getBlock(material).defaultBlockState().getMaterial().blocksMotion()));
         } else {
-            assertFalse(this.material.isSolid());
+            assertFalse(material.isSolid());
         }
     }
 
-    @Test
-    public void isEdible() {
-        if (this.material.isBlock()) {
-            assertFalse(this.material.isEdible());
+    @ParameterizedTest
+    @MethodSource("data")
+    public void isEdible(Material material) {
+        if (material.isBlock()) {
+            assertFalse(material.isEdible());
         } else {
-            assertThat(this.material.isEdible(), is(CraftMagicNumbers.getItem(material).isEdible()));
+            assertThat(material.isEdible(), is(CraftMagicNumbers.getItem(material).isEdible()));
         }
     }
 
-    @Test
-    public void isRecord() {
-        assertThat(this.material.isRecord(), is(CraftMagicNumbers.getItem(material) instanceof RecordItem));
+    @ParameterizedTest
+    @MethodSource("data")
+    public void isRecord(Material material) {
+        assertThat(material.isRecord(), is(CraftMagicNumbers.getItem(material) instanceof RecordItem));
     }
 
-    @Test
-    public void maxDurability() {
+    @ParameterizedTest
+    @MethodSource("data")
+    public void maxDurability(Material material) {
         if (INVALIDATED_MATERIALS.contains(material)) return;
 
-        if (this.material == Material.AIR) {
-            assertThat((int) this.material.getMaxDurability(), is(0));
-        } else if (this.material.isBlock()) {
+        if (material == Material.AIR) {
+            assertThat((int) material.getMaxDurability(), is(0));
+        } else if (material.isBlock()) {
             Item item = CraftMagicNumbers.getItem(material);
-            assertThat((int) this.material.getMaxDurability(), is(item.getMaxDamage()));
+            assertThat((int) material.getMaxDurability(), is(item.getMaxDamage()));
         }
     }
 
-    @Test
-    public void maxStackSize() {
+    @ParameterizedTest
+    @MethodSource("data")
+    public void maxStackSize(Material material) {
         if (INVALIDATED_MATERIALS.contains(material)) return;
 
-        final ItemStack bukkit = new ItemStack(this.material);
+        final ItemStack bukkit = new ItemStack(material);
         final CraftItemStack craft = CraftItemStack.asCraftCopy(bukkit);
-        if (this.material == Material.AIR) {
+        if (material == Material.AIR) {
             final int MAX_AIR_STACK = 0 /* Why can't I hold all of these AIR? */;
-            assertThat(this.material.getMaxStackSize(), is(MAX_AIR_STACK));
+            assertThat(material.getMaxStackSize(), is(MAX_AIR_STACK));
             assertThat(bukkit.getMaxStackSize(), is(MAX_AIR_STACK));
             assertThat(craft.getMaxStackSize(), is(MAX_AIR_STACK));
         } else {
-            assertThat(this.material.getMaxStackSize(), is(CraftMagicNumbers.getItem(material).getMaxStackSize()));
-            assertThat(bukkit.getMaxStackSize(), is(this.material.getMaxStackSize()));
-            assertThat(craft.getMaxStackSize(), is(this.material.getMaxStackSize()));
+            assertThat(material.getMaxStackSize(), is(CraftMagicNumbers.getItem(material).getMaxStackSize()));
+            assertThat(bukkit.getMaxStackSize(), is(material.getMaxStackSize()));
+            assertThat(craft.getMaxStackSize(), is(material.getMaxStackSize()));
         }
     }
 
-    @Test
-    public void isTransparent() {
-        if (this.material == Material.AIR) {
-            assertTrue(this.material.isTransparent());
-        } else if (this.material.isBlock()) {
+    @ParameterizedTest
+    @MethodSource("data")
+    public void isTransparent(Material material) {
+        if (material == Material.AIR) {
+            assertTrue(material.isTransparent());
+        } else if (material.isBlock()) {
             // assertThat(material.isTransparent(), is(not(CraftMagicNumbers.getBlock(material).getBlockData().getMaterial().blocksLight()))); // PAIL: not unit testable anymore (17w50a)
         } else {
-            assertFalse(this.material.isTransparent());
+            assertFalse(material.isTransparent());
         }
     }
 
-    @Test
-    public void isFlammable() {
-        if (this.material != Material.AIR && this.material.isBlock()) {
-            assertThat(this.material.isFlammable(), is(CraftMagicNumbers.getBlock(material).defaultBlockState().getMaterial().isFlammable()));
+    @ParameterizedTest
+    @MethodSource("data")
+    public void isFlammable(Material material) {
+        if (material != Material.AIR && material.isBlock()) {
+            assertThat(material.isFlammable(), is(CraftMagicNumbers.getBlock(material).defaultBlockState().getMaterial().isFlammable()));
         } else {
-            assertFalse(this.material.isFlammable());
+            assertFalse(material.isFlammable());
         }
     }
 
-    @Test
-    public void isBurnable() {
-        if (this.material.isBlock()) {
+    @ParameterizedTest
+    @MethodSource("data")
+    public void isBurnable(Material material) {
+        if (material.isBlock()) {
             Block block = CraftMagicNumbers.getBlock(material);
-            assertThat(this.material.isBurnable(), is(PerMaterialTest.fireValues.containsKey(block) && PerMaterialTest.fireValues.get(block) > 0));
+            assertThat(material.isBurnable(), is(PerMaterialTest.fireValues.containsKey(block) && PerMaterialTest.fireValues.get(block) > 0));
         } else {
-            assertFalse(this.material.isBurnable());
+            assertFalse(material.isBurnable());
         }
     }
 
-    @Test
-    public void isFuel() {
-        assertThat(this.material.isFuel(), is(AbstractFurnaceBlockEntity.isFuel(new net.minecraft.world.item.ItemStack(CraftMagicNumbers.getItem(material)))));
+    @ParameterizedTest
+    @MethodSource("data")
+    public void isFuel(Material material) {
+        assertThat(material.isFuel(), is(AbstractFurnaceBlockEntity.isFuel(new net.minecraft.world.item.ItemStack(CraftMagicNumbers.getItem(material)))));
     }
 
-    @Test
-    public void isOccluding() {
-        if (this.material.isBlock()) {
-            assertThat(this.material.isOccluding(), is(CraftMagicNumbers.getBlock(material).defaultBlockState().isRedstoneConductor(EmptyBlockGetter.INSTANCE, BlockPos.ZERO)));
+    @ParameterizedTest
+    @MethodSource("data")
+    public void isOccluding(Material material) {
+        if (material.isBlock()) {
+            assertThat(material.isOccluding(), is(CraftMagicNumbers.getBlock(material).defaultBlockState().isRedstoneConductor(EmptyBlockGetter.INSTANCE, BlockPos.ZERO)));
         } else {
-            assertFalse(this.material.isOccluding());
+            assertFalse(material.isOccluding());
         }
     }
 
-    @Test
-    public void hasGravity() {
-        if (this.material.isBlock()) {
-            assertThat(this.material.hasGravity(), is(CraftMagicNumbers.getBlock(material) instanceof FallingBlock));
+    @ParameterizedTest
+    @MethodSource("data")
+    public void hasGravity(Material material) {
+        if (material.isBlock()) {
+            assertThat(material.hasGravity(), is(CraftMagicNumbers.getBlock(material) instanceof FallingBlock));
         } else {
-            assertFalse(this.material.hasGravity());
+            assertFalse(material.hasGravity());
         }
     }
 
-    @Test
-    public void usesDurability() {
-        if (!this.material.isBlock()) {
+    @ParameterizedTest
+    @MethodSource("data")
+    public void usesDurability(Material material) {
+        if (!material.isBlock()) {
             assertThat(EnchantmentTarget.BREAKABLE.includes(material), is(CraftMagicNumbers.getItem(material).canBeDepleted()));
         } else {
             assertFalse(EnchantmentTarget.BREAKABLE.includes(material));
         }
     }
 
-    @Test
-    public void testDurability() {
-        if (!this.material.isBlock()) {
-            assertThat(this.material.getMaxDurability(), is((short) CraftMagicNumbers.getItem(material).getMaxDamage()));
+    @ParameterizedTest
+    @MethodSource("data")
+    public void testDurability(Material material) {
+        if (!material.isBlock()) {
+            assertThat(material.getMaxDurability(), is((short) CraftMagicNumbers.getItem(material).getMaxDamage()));
         } else {
-            assertThat(this.material.getMaxDurability(), is((short) 0));
+            assertThat(material.getMaxDurability(), is((short) 0));
         }
     }
 
-    @Test
-    public void testBlock() {
-        if (this.material == Material.AIR) {
-            assertTrue(this.material.isBlock());
+    @ParameterizedTest
+    @MethodSource("data")
+    public void testBlock(Material material) {
+        if (material == Material.AIR) {
+            assertTrue(material.isBlock());
         } else {
-            assertThat(this.material.isBlock(), is(equalTo(CraftMagicNumbers.getBlock(material) != null)));
+            assertThat(material.isBlock(), is(equalTo(CraftMagicNumbers.getBlock(material) != null)));
         }
     }
 
-    @Test
-    public void testAir() {
-        if (this.material.isBlock()) {
-            assertThat(this.material.isAir(), is(equalTo(CraftMagicNumbers.getBlock(material).defaultBlockState().isAir())));
+    @ParameterizedTest
+    @MethodSource("data")
+    public void testAir(Material material) {
+        if (material.isBlock()) {
+            assertThat(material.isAir(), is(equalTo(CraftMagicNumbers.getBlock(material).defaultBlockState().isAir())));
         } else {
-            assertThat(this.material.isAir(), is(equalTo(false)));
+            assertThat(material.isAir(), is(equalTo(false)));
         }
     }
 
-    @Test
-    public void testItem() {
-        if (this.material == Material.AIR) {
-            assertTrue(this.material.isItem());
+    @ParameterizedTest
+    @MethodSource("data")
+    public void testItem(Material material) {
+        if (material == Material.AIR) {
+            assertTrue(material.isItem());
         } else {
-            assertThat(this.material.isItem(), is(equalTo(CraftMagicNumbers.getItem(material) != null)));
+            assertThat(material.isItem(), is(equalTo(CraftMagicNumbers.getItem(material) != null)));
         }
     }
 
-    @Test
-    public void testInteractable() throws ReflectiveOperationException {
-        if (this.material.isBlock()) {
-            assertThat(this.material.isInteractable(),
+    @ParameterizedTest
+    @MethodSource("data")
+    public void testInteractable(Material material) throws ReflectiveOperationException {
+        if (material.isBlock()) {
+            assertThat(material.isInteractable(),
                     is(!CraftMagicNumbers.getBlock(material).getClass()
                             .getMethod("use", BlockState.class, net.minecraft.world.level.Level.class, BlockPos.class, Player.class, InteractionHand.class, BlockHitResult.class)
                             .getDeclaringClass().equals(BlockBehaviour.class)));
         } else {
-            assertFalse(this.material.isInteractable());
+            assertFalse(material.isInteractable());
         }
     }
 
-    @Test
-    public void testBlockHardness() {
-        if (this.material.isBlock()) {
-            assertThat(this.material.getHardness(), is(CraftMagicNumbers.getBlock(material).defaultBlockState().destroySpeed));
+    @ParameterizedTest
+    @MethodSource("data")
+    public void testBlockHardness(Material material) {
+        if (material.isBlock()) {
+            assertThat(material.getHardness(), is(CraftMagicNumbers.getBlock(material).defaultBlockState().destroySpeed));
         }
     }
 
-    @Test
-    public void testBlastResistance() {
-        if (this.material.isBlock()) {
-            assertThat(this.material.getBlastResistance(), is(CraftMagicNumbers.getBlock(material).getExplosionResistance()));
+    @ParameterizedTest
+    @MethodSource("data")
+    public void testBlastResistance(Material material) {
+        if (material.isBlock()) {
+            assertThat(material.getBlastResistance(), is(CraftMagicNumbers.getBlock(material).getExplosionResistance()));
         }
     }
 
-    @Test
-    public void testSlipperiness() {
-        if (this.material.isBlock()) {
-            assertThat(this.material.getSlipperiness(), is(CraftMagicNumbers.getBlock(material).getFriction()));
+    @ParameterizedTest
+    @MethodSource("data")
+    public void testSlipperiness(Material material) {
+        if (material.isBlock()) {
+            assertThat(material.getSlipperiness(), is(CraftMagicNumbers.getBlock(material).getFriction()));
         }
     }
 
-    @Test
-    public void testBlockDataCreation() {
-        if (this.material.isBlock()) {
-            assertNotNull(this.material.createBlockData());
+    @ParameterizedTest
+    @MethodSource("data")
+    public void testBlockDataCreation(Material material) {
+        if (material.isBlock()) {
+            assertNotNull(material.createBlockData());
         }
     }
 
-    @Test
-    public void testCraftingRemainingItem() {
-        if (this.material.isItem()) {
+    @ParameterizedTest
+    @MethodSource("data")
+    public void testCraftingRemainingItem(Material material) {
+        if (material.isItem()) {
             Item expectedItem = CraftMagicNumbers.getItem(material).getCraftingRemainingItem();
             Material expected = expectedItem == null ? null : CraftMagicNumbers.getMaterial(expectedItem);
 
-            assertThat(this.material.getCraftingRemainingItem(), is(expected));
+            assertThat(material.getCraftingRemainingItem(), is(expected));
         }
     }
 
-    @Test
-    public void testEquipmentSlot() {
-        if (this.material.isItem()) {
-            EquipmentSlot expected = CraftEquipmentSlot.getSlot(Mob.getEquipmentSlotForItem(CraftItemStack.asNMSCopy(new ItemStack(this.material))));
-            assertThat(this.material.getEquipmentSlot(), is(expected));
+    @ParameterizedTest
+    @MethodSource("data")
+    public void testEquipmentSlot(Material material) {
+        if (material.isItem()) {
+            EquipmentSlot expected = CraftEquipmentSlot.getSlot(Mob.getEquipmentSlotForItem(CraftItemStack.asNMSCopy(new ItemStack(material))));
+            assertThat(material.getEquipmentSlot(), is(expected));
         }
     }
 
-    @Test
-    public void testBlockDataClass() {
-        if (this.material.isBlock()) {
+    @ParameterizedTest
+    @MethodSource("data")
+    public void testBlockDataClass(Material material) {
+        if (material.isBlock()) {
             Class<?> expectedClass = material.data;
             if (expectedClass != MaterialData.class) {
                 BlockData blockData = Bukkit.createBlockData(material);
-                assertTrue(expectedClass + " <> " + blockData.getClass(), expectedClass.isInstance(blockData));
+                assertTrue(expectedClass.isInstance(blockData), expectedClass + " <> " + blockData.getClass());
             }
         }
     }
 
-    @Test
-    public void testCreativeCategory() {
-        if (this.material.isItem()) {
-            this.material.getCreativeCategory();
+    @ParameterizedTest
+    @MethodSource("data")
+    public void testCreativeCategory(Material material) {
+        if (material.isItem()) {
+            material.getCreativeCategory();
         }
     }
 }
diff --git a/src/test/java/org/bukkit/PotionEffectTypeTest.java b/src/test/java/org/bukkit/PotionEffectTypeTest.java
index 005ece87fc1dc22f3cdbbe46e7a4f09323fc0a5e..0132ab9377599ba9f3f904547f7a0b5280999ad1 100644
--- a/src/test/java/org/bukkit/PotionEffectTypeTest.java
+++ b/src/test/java/org/bukkit/PotionEffectTypeTest.java
@@ -1,7 +1,8 @@
 package org.bukkit;
 
+import static org.hamcrest.MatcherAssert.assertThat;
 import static org.hamcrest.Matchers.*;
-import static org.junit.Assert.*;
+import static org.junit.jupiter.api.Assertions.*;
 import com.google.common.collect.Lists;
 import java.util.Collections;
 import java.util.List;
@@ -10,7 +11,7 @@ import net.minecraft.resources.ResourceLocation;
 import org.bukkit.craftbukkit.util.CraftNamespacedKey;
 import org.bukkit.potion.PotionEffectType;
 import org.bukkit.support.AbstractTestingBase;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 public class PotionEffectTypeTest extends AbstractTestingBase {
 
@@ -23,7 +24,7 @@ public class PotionEffectTypeTest extends AbstractTestingBase {
             PotionEffectType effect = PotionEffectType.getByKey(CraftNamespacedKey.fromMinecraft(key));
 
             String message = String.format("org.bukkit.PotionEffectType is missing '%s'", name);
-            assertNotNull(message, effect);
+            assertNotNull(effect, message);
 
             effects.remove(effect);
         }
diff --git a/src/test/java/org/bukkit/SoundTest.java b/src/test/java/org/bukkit/SoundTest.java
index 8b0d195373d4b7899b39ec98792d83a5b6508997..895037be56d8a13a3a499d9f06a255229ebb1d1d 100644
--- a/src/test/java/org/bukkit/SoundTest.java
+++ b/src/test/java/org/bukkit/SoundTest.java
@@ -1,12 +1,13 @@
 package org.bukkit;
 
+import static org.hamcrest.MatcherAssert.assertThat;
 import static org.hamcrest.Matchers.*;
-import static org.junit.Assert.*;
+import static org.junit.jupiter.api.Assertions.*;
 import net.minecraft.core.registries.BuiltInRegistries;
 import net.minecraft.resources.ResourceLocation;
 import org.bukkit.craftbukkit.CraftSound;
 import org.bukkit.support.AbstractTestingBase;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 public class SoundTest extends AbstractTestingBase {
 
@@ -20,21 +21,21 @@ public class SoundTest extends AbstractTestingBase {
     @Test
     public void testReverse() {
         for (ResourceLocation effect : BuiltInRegistries.SOUND_EVENT.keySet()) {
-            assertNotNull(effect + "", Sound.valueOf(effect.getPath().replace('.', '_').toUpperCase(java.util.Locale.ENGLISH)));
+            assertNotNull(Sound.valueOf(effect.getPath().replace('.', '_').toUpperCase(java.util.Locale.ENGLISH)), effect + "");
         }
     }
 
     @Test
     public void testCategory() {
         for (SoundCategory category : SoundCategory.values()) {
-            assertNotNull(category + "", net.minecraft.sounds.SoundSource.valueOf(category.name()));
+            assertNotNull(net.minecraft.sounds.SoundSource.valueOf(category.name()), category + "");
         }
     }
 
-    @Test
+    @org.junit.jupiter.api.Test
     public void testCategoryReverse() {
         for (net.minecraft.sounds.SoundSource category : net.minecraft.sounds.SoundSource.values()) {
-            assertNotNull(category + "", SoundCategory.valueOf(category.name()));
+            assertNotNull(SoundCategory.valueOf(category.name()), category + "");
         }
     }
 }
diff --git a/src/test/java/org/bukkit/StatisticsAndAchievementsTest.java b/src/test/java/org/bukkit/StatisticsAndAchievementsTest.java
index c00bceb80232686169fcd15dd004ed41124bd78a..8c1be4be3810ad8f7536c034191e901b09520335 100644
--- a/src/test/java/org/bukkit/StatisticsAndAchievementsTest.java
+++ b/src/test/java/org/bukkit/StatisticsAndAchievementsTest.java
@@ -1,14 +1,16 @@
 package org.bukkit;
 
+import static org.hamcrest.MatcherAssert.assertThat;
 import static org.hamcrest.Matchers.*;
-import static org.junit.Assert.*;
+import static org.junit.jupiter.api.Assertions.*;
 import com.google.common.collect.HashMultiset;
 import net.minecraft.core.registries.BuiltInRegistries;
+import net.minecraft.stats.Stat;
 import net.minecraft.stats.StatType;
 import org.bukkit.craftbukkit.CraftStatistic;
 import org.bukkit.entity.EntityType;
 import org.bukkit.support.AbstractTestingBase;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 public class StatisticsAndAchievementsTest extends AbstractTestingBase {
 
@@ -19,7 +21,7 @@ public class StatisticsAndAchievementsTest extends AbstractTestingBase {
             if (statistic.getType() == Statistic.Type.ENTITY) {
                 for (EntityType entity : EntityType.values()) {
                     if (entity.getName() != null) {
-                        assertNotNull(statistic + " missing for " + entity, CraftStatistic.getEntityStatistic(statistic, entity));
+                        assertNotNull(CraftStatistic.getEntityStatistic(statistic, entity), statistic + " missing for " + entity);
                     }
                 }
             }
@@ -32,16 +34,16 @@ public class StatisticsAndAchievementsTest extends AbstractTestingBase {
         HashMultiset<Statistic> statistics = HashMultiset.create();
         for (StatType wrapper : BuiltInRegistries.STAT_TYPE) {
             for (Object child : wrapper.getRegistry()) {
-                net.minecraft.stats.Stat<?> statistic = wrapper.get(child);
+                Stat<net.minecraft.world.entity.EntityType<?>> statistic = wrapper.get(child);
                 String message = String.format("org.bukkit.Statistic is missing: '%s'", statistic);
 
                 Statistic subject = CraftStatistic.getBukkitStatistic(statistic);
                 assertThat(message, subject, is(not(nullValue())));
 
                 if (wrapper.getRegistry() == BuiltInRegistries.BLOCK || wrapper.getRegistry() == BuiltInRegistries.ITEM) {
-                    assertNotNull("Material type map missing for " + wrapper.getRegistry().getKey(child), CraftStatistic.getMaterialFromStatistic(statistic));
+                    assertNotNull(CraftStatistic.getMaterialFromStatistic(statistic), "Material type map missing for " + wrapper.getRegistry().getKey(child));
                 } else if (wrapper.getRegistry() == BuiltInRegistries.ENTITY_TYPE) {
-                    assertNotNull("Entity type map missing for " + net.minecraft.world.entity.EntityType.getKey((net.minecraft.world.entity.EntityType<?>) child), CraftStatistic.getEntityTypeFromStatistic((net.minecraft.stats.Stat<net.minecraft.world.entity.EntityType<?>>) statistic));
+                    assertNotNull(CraftStatistic.getEntityTypeFromStatistic(statistic), "Entity type map missing for " + net.minecraft.world.entity.EntityType.getKey((net.minecraft.world.entity.EntityType<?>) child));
                 }
 
                 statistics.add(subject);
diff --git a/src/test/java/org/bukkit/block/banner/PatternTypeTest.java b/src/test/java/org/bukkit/block/banner/PatternTypeTest.java
index 2a63bff7244a383b762a174093989252112a4998..114dcdfbcc4a490625345a2006bab9877695df7d 100644
--- a/src/test/java/org/bukkit/block/banner/PatternTypeTest.java
+++ b/src/test/java/org/bukkit/block/banner/PatternTypeTest.java
@@ -1,10 +1,12 @@
 package org.bukkit.block.banner;
 
-import junit.framework.Assert;
 import net.minecraft.core.registries.BuiltInRegistries;
 import net.minecraft.world.level.block.entity.BannerPattern;
 import org.bukkit.support.AbstractTestingBase;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
+
+import static org.junit.jupiter.api.Assertions.assertNotNull;
+
 
 public class PatternTypeTest extends AbstractTestingBase {
 
@@ -13,7 +15,7 @@ public class PatternTypeTest extends AbstractTestingBase {
         for (BannerPattern nms : BuiltInRegistries.BANNER_PATTERN) {
             PatternType bukkit = PatternType.getByIdentifier(nms.getHashname());
 
-            Assert.assertNotNull("No Bukkit banner for " + nms + " " + nms.getHashname(), bukkit);
+            assertNotNull(bukkit, "No Bukkit banner for " + nms + " " + nms.getHashname());
         }
     }
 
@@ -28,7 +30,7 @@ public class PatternTypeTest extends AbstractTestingBase {
                 }
             }
 
-            Assert.assertNotNull("No NMS banner for " + bukkit + " " + bukkit.getIdentifier(), found);
+            assertNotNull(found, "No NMS banner for " + bukkit + " " + bukkit.getIdentifier());
         }
     }
 }
diff --git a/src/test/java/org/bukkit/craftbukkit/HeightMapTest.java b/src/test/java/org/bukkit/craftbukkit/HeightMapTest.java
index e9d7d83cf13781a442bae5b7f306275dd114faaf..e490df6c2f8a1c971152ad83afa239dbd5bda232 100644
--- a/src/test/java/org/bukkit/craftbukkit/HeightMapTest.java
+++ b/src/test/java/org/bukkit/craftbukkit/HeightMapTest.java
@@ -1,22 +1,24 @@
 package org.bukkit.craftbukkit;
 
 import org.bukkit.HeightMap;
-import org.junit.Assert;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
+
+import static org.junit.jupiter.api.Assertions.assertNotNull;
+
 
 public class HeightMapTest {
 
-    @Test
+    @org.junit.jupiter.api.Test
     public void heightMapConversionFromNMSToBukkitShouldNotThrowExceptio() {
         for (net.minecraft.world.level.levelgen.Heightmap.Types nmsHeightMapType : net.minecraft.world.level.levelgen.Heightmap.Types.values()) {
-            Assert.assertNotNull("fromNMS", CraftHeightMap.fromNMS(nmsHeightMapType));
+            assertNotNull(CraftHeightMap.fromNMS(nmsHeightMapType), "fromNMS");
         }
     }
 
     @Test
     public void heightMapConversionFromBukkitToNMSShouldNotThrowExceptio() {
         for (HeightMap bukkitHeightMap : HeightMap.values()) {
-            Assert.assertNotNull("toNMS", CraftHeightMap.toNMS(bukkitHeightMap));
+            assertNotNull(CraftHeightMap.toNMS(bukkitHeightMap), "toNMS");
         }
     }
 }
diff --git a/src/test/java/org/bukkit/craftbukkit/attribute/AttributeTest.java b/src/test/java/org/bukkit/craftbukkit/attribute/AttributeTest.java
index 34ad98bc61ad051b05b44d7f4540281576573ba6..ab003f186dacbfd125d9d2b9e2affc23d4621226 100644
--- a/src/test/java/org/bukkit/craftbukkit/attribute/AttributeTest.java
+++ b/src/test/java/org/bukkit/craftbukkit/attribute/AttributeTest.java
@@ -4,8 +4,10 @@ import net.minecraft.core.registries.BuiltInRegistries;
 import net.minecraft.resources.ResourceLocation;
 import org.bukkit.attribute.Attribute;
 import org.bukkit.support.AbstractTestingBase;
-import org.junit.Assert;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
+
+import static org.junit.jupiter.api.Assertions.assertNotNull;
+
 
 public class AttributeTest extends AbstractTestingBase {
 
@@ -14,7 +16,7 @@ public class AttributeTest extends AbstractTestingBase {
         for (ResourceLocation nms : BuiltInRegistries.ATTRIBUTE.keySet()) {
             Attribute bukkit = CraftAttributeMap.fromMinecraft(nms.toString());
 
-            Assert.assertNotNull(nms.toString(), bukkit);
+            assertNotNull(bukkit, nms.toString());
         }
     }
 
@@ -23,7 +25,7 @@ public class AttributeTest extends AbstractTestingBase {
         for (Attribute attribute : Attribute.values()) {
             net.minecraft.world.entity.ai.attributes.Attribute nms = CraftAttributeMap.toMinecraft(attribute);
 
-            Assert.assertNotNull(attribute.name(), nms);
+            assertNotNull(nms, attribute.name());
         }
     }
 }
diff --git a/src/test/java/org/bukkit/craftbukkit/block/BlockStateTest.java b/src/test/java/org/bukkit/craftbukkit/block/BlockStateTest.java
index 04710abbfb50eaa6e3e4d96fca5f0355f940a452..12964fb9929546c8b5cfc29101ed51ea16183e50 100644
--- a/src/test/java/org/bukkit/craftbukkit/block/BlockStateTest.java
+++ b/src/test/java/org/bukkit/craftbukkit/block/BlockStateTest.java
@@ -1,10 +1,5 @@
 package org.bukkit.craftbukkit.block;
 
-import static org.junit.Assert.assertNotNull;
-import static org.junit.Assert.assertSame;
-import static org.junit.Assert.assertTrue;
-import static org.junit.Assert.fail;
-
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.registries.BuiltInRegistries;
 import net.minecraft.world.level.block.Block;
@@ -13,7 +8,10 @@ import net.minecraft.world.level.block.entity.BlockEntity;
 import org.bukkit.Material;
 import org.bukkit.craftbukkit.util.CraftMagicNumbers;
 import org.bukkit.support.AbstractTestingBase;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
+
+import static org.junit.jupiter.api.Assertions.*;
+
 
 public class BlockStateTest extends AbstractTestingBase {
 
@@ -25,7 +23,7 @@ public class BlockStateTest extends AbstractTestingBase {
             boolean isCraftBlockEntityState = CraftBlockEntityState.class.isAssignableFrom(blockStateType);
 
             if (block instanceof EntityBlock) {
-                assertTrue(material + " has BlockState of type " + blockStateType.getName() + ", but expected subtype of CraftBlockEntityState", isCraftBlockEntityState);
+                assertTrue(isCraftBlockEntityState, material + " has BlockState of type " + blockStateType.getName() + ", but expected subtype of CraftBlockEntityState");
 
                 // check tile entity type
                 BlockEntity tileEntity = ((EntityBlock) block).newBlockEntity(BlockPos.ZERO, block.defaultBlockState());
@@ -38,18 +36,18 @@ public class BlockStateTest extends AbstractTestingBase {
                     fail(material + " has no tile entity, it be added to CraftBlockStates#isTileEntityOptional");
                 }
 
-                assertNotNull(material + " has no tile entity expected tile entity of type " + tileEntity.getClass(), materialTileEntity);
-                assertSame(material + " has unexpected tile entity type, expected " + tileEntity.getClass() + " but got " + tileEntity.getClass(), materialTileEntity.getClass(), tileEntity.getClass());
+                assertNotNull(materialTileEntity, material + " has no tile entity expected tile entity of type " + tileEntity.getClass());
+                assertSame(materialTileEntity.getClass(), tileEntity.getClass(), material + " has unexpected tile entity type, expected " + tileEntity.getClass() + " but got " + tileEntity.getClass());
             } else {
-                assertTrue(material + " has unexpected CraftBlockEntityState subytype " + blockStateType.getName() + " (but is not a tile)", !isCraftBlockEntityState);
+                assertFalse(isCraftBlockEntityState, material + " has unexpected CraftBlockEntityState subytype " + blockStateType.getName() + " (but is not a tile)");
             }
         }
     }
 
-    @Test
+    @org.junit.jupiter.api.Test
     public void testBlockEntityTypes() {
         for (var blockEntityType : BuiltInRegistries.BLOCK_ENTITY_TYPE) {
-            org.junit.Assert.assertNotNull(CraftBlockStates.getBlockStateType(blockEntityType));
+            assertNotNull(CraftBlockStates.getBlockStateType(blockEntityType));
         }
     }
 }
diff --git a/src/test/java/org/bukkit/craftbukkit/generator/ChunkDataTest.java b/src/test/java/org/bukkit/craftbukkit/generator/ChunkDataTest.java
index 872ebc6b049a39e5e89e6580366b424228865682..c9c16f51324bdaef9fea37b303738fba823a9e67 100644
--- a/src/test/java/org/bukkit/craftbukkit/generator/ChunkDataTest.java
+++ b/src/test/java/org/bukkit/craftbukkit/generator/ChunkDataTest.java
@@ -1,10 +1,10 @@
 package org.bukkit.craftbukkit.generator;
 
-import static org.junit.Assert.*;
+import static org.junit.jupiter.api.Assertions.*;
 import org.bukkit.Material;
 import org.bukkit.block.data.BlockData;
 import org.bukkit.support.AbstractTestingBase;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 public class ChunkDataTest extends AbstractTestingBase {
 
@@ -32,34 +32,34 @@ public class ChunkDataTest extends AbstractTestingBase {
         }
     }
 
-    @Test
+    @org.junit.jupiter.api.Test
     public void testMinHeight() {
         OldCraftChunkData data = new OldCraftChunkData(-128, 128, BIOMES);
-        assertTrue("Could not set block below min height", this.testSetBlock(data, 0, -256, 0, ChunkDataTest.RED_WOOL, ChunkDataTest.AIR));
-        assertTrue("Could set block above min height", this.testSetBlock(data, 0, -64, 0, ChunkDataTest.RED_WOOL, ChunkDataTest.RED_WOOL));
+        assertTrue(this.testSetBlock(data, 0, -256, 0, ChunkDataTest.RED_WOOL, ChunkDataTest.AIR), "Could not set block below min height");
+        assertTrue(this.testSetBlock(data, 0, -64, 0, ChunkDataTest.RED_WOOL, ChunkDataTest.RED_WOOL), "Could set block above min height");
     }
 
     @Test
     public void testMaxHeight() {
         OldCraftChunkData data = new OldCraftChunkData(0, 128, BIOMES);
-        assertTrue("Could not set block above max height", this.testSetBlock(data, 0, 128, 0, ChunkDataTest.RED_WOOL, ChunkDataTest.AIR));
-        assertTrue("Could set block below max height", this.testSetBlock(data, 0, 127, 0, ChunkDataTest.RED_WOOL, ChunkDataTest.RED_WOOL));
+        assertTrue(this.testSetBlock(data, 0, 128, 0, ChunkDataTest.RED_WOOL, ChunkDataTest.AIR), "Could not set block above max height");
+        assertTrue(this.testSetBlock(data, 0, 127, 0, ChunkDataTest.RED_WOOL, ChunkDataTest.RED_WOOL), "Could set block below max height");
     }
 
-    @Test
+    @org.junit.jupiter.api.Test
     public void testBoundsCheckingSingle() {
         OldCraftChunkData data = new OldCraftChunkData(0, 256, BIOMES);
-        assertTrue("Can set block inside chunk bounds", this.testSetBlock(data, 0, 0, 0, ChunkDataTest.RED_WOOL, ChunkDataTest.RED_WOOL));
-        assertTrue("Can set block inside chunk bounds", this.testSetBlock(data, 15, 255, 15, ChunkDataTest.RED_WOOL, ChunkDataTest.RED_WOOL));
-        assertTrue("Can no set block outside chunk bounds", this.testSetBlock(data, -1, 0, 0, ChunkDataTest.RED_WOOL, ChunkDataTest.AIR));
-        assertTrue("Can no set block outside chunk bounds", this.testSetBlock(data, 0, -1, 0, ChunkDataTest.RED_WOOL, ChunkDataTest.AIR));
-        assertTrue("Can no set block outside chunk bounds", this.testSetBlock(data, 0, 0, -1, ChunkDataTest.RED_WOOL, ChunkDataTest.AIR));
-        assertTrue("Can no set block outside chunk bounds", this.testSetBlock(data, 16, 0, 0, ChunkDataTest.RED_WOOL, ChunkDataTest.AIR));
-        assertTrue("Can no set block outside chunk bounds", this.testSetBlock(data, 0, 256, 0, ChunkDataTest.RED_WOOL, ChunkDataTest.AIR));
-        assertTrue("Can no set block outside chunk bounds", this.testSetBlock(data, 0, 0, 16, ChunkDataTest.RED_WOOL, ChunkDataTest.AIR));
+        assertTrue(this.testSetBlock(data, 0, 0, 0, ChunkDataTest.RED_WOOL, ChunkDataTest.RED_WOOL), "Can set block inside chunk bounds");
+        assertTrue(this.testSetBlock(data, 15, 255, 15, ChunkDataTest.RED_WOOL, ChunkDataTest.RED_WOOL), "Can set block inside chunk bounds");
+        assertTrue(this.testSetBlock(data, -1, 0, 0, ChunkDataTest.RED_WOOL, ChunkDataTest.AIR), "Can no set block outside chunk bounds");
+        assertTrue(this.testSetBlock(data, 0, -1, 0, ChunkDataTest.RED_WOOL, ChunkDataTest.AIR), "Can no set block outside chunk bounds");
+        assertTrue(this.testSetBlock(data, 0, 0, -1, ChunkDataTest.RED_WOOL, ChunkDataTest.AIR), "Can no set block outside chunk bounds");
+        assertTrue(this.testSetBlock(data, 16, 0, 0, ChunkDataTest.RED_WOOL, ChunkDataTest.AIR), "Can no set block outside chunk bounds");
+        assertTrue(this.testSetBlock(data, 0, 256, 0, ChunkDataTest.RED_WOOL, ChunkDataTest.AIR), "Can no set block outside chunk bounds");
+        assertTrue(this.testSetBlock(data, 0, 0, 16, ChunkDataTest.RED_WOOL, ChunkDataTest.AIR), "Can no set block outside chunk bounds");
     }
 
-    @Test
+    @org.junit.jupiter.api.Test
     public void testSetRegion() {
         OldCraftChunkData data = new OldCraftChunkData(0, 256, BIOMES);
         this.testSetRegion(data, -100, 0, -100, 0, 256, 0, ChunkDataTest.RED_WOOL); // exclusively outside
diff --git a/src/test/java/org/bukkit/craftbukkit/inventory/CompositeSerialization.java b/src/test/java/org/bukkit/craftbukkit/inventory/CompositeSerialization.java
index a5d188acc000d4a2d10b4af995730a8698e22f04..70d307e51889715707e9a04dac500d720a94038d 100644
--- a/src/test/java/org/bukkit/craftbukkit/inventory/CompositeSerialization.java
+++ b/src/test/java/org/bukkit/craftbukkit/inventory/CompositeSerialization.java
@@ -1,7 +1,8 @@
 package org.bukkit.craftbukkit.inventory;
 
+import static org.hamcrest.MatcherAssert.assertThat;
 import static org.hamcrest.Matchers.*;
-import static org.junit.Assert.*;
+import static org.junit.jupiter.api.Assertions.*;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.List;
@@ -13,7 +14,8 @@ import org.bukkit.enchantments.Enchantment;
 import org.bukkit.inventory.ItemStack;
 import org.bukkit.inventory.meta.ItemMeta;
 import org.bukkit.support.AbstractTestingBase;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
+
 
 public class CompositeSerialization extends AbstractTestingBase {
 
diff --git a/src/test/java/org/bukkit/craftbukkit/inventory/DeprecatedItemMetaCustomValueTest.java b/src/test/java/org/bukkit/craftbukkit/inventory/DeprecatedItemMetaCustomValueTest.java
index 13025119b32388f3e50503a355ef7d03837fd232..ce8be2ef445f73b661bbf721977cfa52d436d193 100644
--- a/src/test/java/org/bukkit/craftbukkit/inventory/DeprecatedItemMetaCustomValueTest.java
+++ b/src/test/java/org/bukkit/craftbukkit/inventory/DeprecatedItemMetaCustomValueTest.java
@@ -1,6 +1,8 @@
 package org.bukkit.craftbukkit.inventory;
 
-import static org.junit.Assert.*;
+import static org.junit.jupiter.api.Assertions.*;
+import static org.junit.jupiter.api.Assertions.assertThrows;
+
 import java.io.StringReader;
 import java.lang.reflect.Array;
 import java.nio.ByteBuffer;
@@ -18,14 +20,15 @@ import org.bukkit.inventory.meta.tags.CustomItemTagContainer;
 import org.bukkit.inventory.meta.tags.ItemTagAdapterContext;
 import org.bukkit.inventory.meta.tags.ItemTagType;
 import org.bukkit.support.AbstractTestingBase;
-import org.junit.Before;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
+import org.junit.jupiter.api.BeforeEach;
+
 
 public class DeprecatedItemMetaCustomValueTest extends AbstractTestingBase {
 
     private static NamespacedKey VALID_KEY;
 
-    @Before
+    @BeforeEach
     public void setup() {
         DeprecatedItemMetaCustomValueTest.VALID_KEY = new NamespacedKey("test", "validkey");
     }
@@ -33,40 +36,40 @@ public class DeprecatedItemMetaCustomValueTest extends AbstractTestingBase {
     /*
         Sets a test
      */
-    @Test(expected = IllegalArgumentException.class)
+    @org.junit.jupiter.api.Test
     public void testSetNoAdapter() {
         ItemMeta itemMeta = this.createNewItemMeta();
-        itemMeta.getCustomTagContainer().setCustomTag(VALID_KEY, new PrimitiveTagType<>(boolean.class), true);
+        assertThrows(IllegalArgumentException.class, () -> itemMeta.getCustomTagContainer().setCustomTag(VALID_KEY, new PrimitiveTagType<>(boolean.class), true));
     }
 
     /*
         Contains a tag
      */
-    @Test(expected = IllegalArgumentException.class)
+    @org.junit.jupiter.api.Test
     public void testHasNoAdapter() {
         ItemMeta itemMeta = this.createNewItemMeta();
         itemMeta.getCustomTagContainer().setCustomTag(VALID_KEY, ItemTagType.INTEGER, 1); // We gotta set this so we at least try to compare it
-        itemMeta.getCustomTagContainer().hasCustomTag(VALID_KEY, new PrimitiveTagType<>(boolean.class));
+        assertThrows(IllegalArgumentException.class, () -> itemMeta.getCustomTagContainer().hasCustomTag(VALID_KEY, new PrimitiveTagType<>(boolean.class)));
     }
 
     /*
         Getting a tag
      */
-    @Test(expected = IllegalArgumentException.class)
+    @org.junit.jupiter.api.Test
     public void testGetNoAdapter() {
         ItemMeta itemMeta = this.createNewItemMeta();
         itemMeta.getCustomTagContainer().setCustomTag(VALID_KEY, ItemTagType.INTEGER, 1); //We gotta set this so we at least try to compare it
-        itemMeta.getCustomTagContainer().getCustomTag(VALID_KEY, new PrimitiveTagType<>(boolean.class));
+        assertThrows(IllegalArgumentException.class, () -> itemMeta.getCustomTagContainer().getCustomTag(VALID_KEY, new PrimitiveTagType<>(boolean.class)));
     }
 
-    @Test(expected = IllegalArgumentException.class)
+    @org.junit.jupiter.api.Test
     public void testGetWrongType() {
         ItemMeta itemMeta = this.createNewItemMeta();
         itemMeta.getCustomTagContainer().setCustomTag(VALID_KEY, ItemTagType.INTEGER, 1);
-        itemMeta.getCustomTagContainer().getCustomTag(VALID_KEY, ItemTagType.STRING);
+        assertThrows(IllegalArgumentException.class, () -> itemMeta.getCustomTagContainer().getCustomTag(VALID_KEY, ItemTagType.STRING));
     }
 
-    @Test
+    @org.junit.jupiter.api.Test
     public void testDifferentNamespace() {
         NamespacedKey namespacedKeyA = new NamespacedKey("plugin-a", "damage");
         NamespacedKey namespacedKeyB = new NamespacedKey("plugin-b", "damage");
@@ -108,7 +111,7 @@ public class DeprecatedItemMetaCustomValueTest extends AbstractTestingBase {
         assertEquals(itemMeta, new CraftMetaItem(serialize));
     }
 
-    @Test
+    @org.junit.jupiter.api.Test
     public void testYAMLStoring() {
         ItemStack stack = new ItemStack(Material.DIAMOND);
         CraftMetaItem meta = this.createComplexItemMeta();
@@ -169,7 +172,7 @@ public class DeprecatedItemMetaCustomValueTest extends AbstractTestingBase {
     /*
         Test complex object storage
      */
-    @Test
+    @org.junit.jupiter.api.Test
     public void storeUUIDOnItemTest() {
         ItemMeta itemMeta = this.createNewItemMeta();
         UUIDItemTagType uuidItemTagType = new UUIDItemTagType();
@@ -180,7 +183,7 @@ public class DeprecatedItemMetaCustomValueTest extends AbstractTestingBase {
         assertEquals(uuid, itemMeta.getCustomTagContainer().getCustomTag(VALID_KEY, uuidItemTagType));
     }
 
-    @Test
+    @org.junit.jupiter.api.Test
     public void encapsulatedContainers() {
         NamespacedKey innerKey = new NamespacedKey("plugin-a", "inner");
 
diff --git a/src/test/java/org/bukkit/craftbukkit/inventory/FactoryItemMaterialTest.java b/src/test/java/org/bukkit/craftbukkit/inventory/FactoryItemMaterialTest.java
index e706d547c03f3e07d56fdc7327fadd98f98ccc20..a6c6f50dcd39af6a29ac61e760b7d3e501cb724b 100644
--- a/src/test/java/org/bukkit/craftbukkit/inventory/FactoryItemMaterialTest.java
+++ b/src/test/java/org/bukkit/craftbukkit/inventory/FactoryItemMaterialTest.java
@@ -1,21 +1,23 @@
 package org.bukkit.craftbukkit.inventory;
 
-import static org.hamcrest.Matchers.*;
-import static org.junit.Assert.*;
-import java.util.ArrayList;
-import java.util.List;
 import org.bukkit.Material;
 import org.bukkit.inventory.ItemFactory;
 import org.bukkit.inventory.ItemStack;
 import org.bukkit.inventory.meta.ItemMeta;
 import org.bukkit.support.AbstractTestingBase;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.junit.runners.Parameterized;
-import org.junit.runners.Parameterized.Parameter;
-import org.junit.runners.Parameterized.Parameters;
+import org.junit.jupiter.params.ParameterizedTest;
+import org.junit.jupiter.params.provider.MethodSource;
+
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.List;
+import java.util.stream.Stream;
+
+import static org.hamcrest.MatcherAssert.assertThat;
+import static org.hamcrest.Matchers.*;
+import static org.junit.jupiter.api.Assertions.assertTrue;
+
 
-@RunWith(Parameterized.class)
 public class FactoryItemMaterialTest extends AbstractTestingBase {
     static final ItemFactory factory = CraftItemFactory.instance();
     static final StringBuilder buffer = new StringBuilder();
@@ -41,35 +43,33 @@ public class FactoryItemMaterialTest extends AbstractTestingBase {
         return FactoryItemMaterialTest.buffer.delete(0, Integer.MAX_VALUE).append(from.getClass().getName()).append('(').append(from.name()).append(") to ").append(to.getClass().getName()).append('(').append(to.name()).append(')').toString();
     }
 
-    @Parameters(name = "Material[{index}]:{0}")
-    public static List<Object[]> data() {
-        List<Object[]> list = new ArrayList<Object[]>();
-        for (Material material : FactoryItemMaterialTest.materials) {
-            list.add(new Object[] {material});
-        }
-        return list;
+    @ParameterizedTest(name = "Material[{index}]:{0}")
+    public static Stream<Object[]> data() {
+        return Arrays.stream(FactoryItemMaterialTest.materials).map(input -> new Object[]{input});
     }
 
-    @Parameter(0) public Material material;
+    //@Parameter(0) public Material material;
 
-    @Test
-    public void itemStack() {
-        ItemStack bukkitStack = new ItemStack(this.material);
+    @ParameterizedTest
+    @MethodSource("data")
+    public void itemStack(Material material) {
+        ItemStack bukkitStack = new ItemStack(material);
         CraftItemStack craftStack = CraftItemStack.asCraftCopy(bukkitStack);
         ItemMeta meta = FactoryItemMaterialTest.factory.getItemMeta(material);
         if (meta == null) {
-            assertThat(this.material, is(Material.AIR));
+            assertThat(material, is(Material.AIR));
         } else {
             assertTrue(FactoryItemMaterialTest.factory.isApplicable(meta, bukkitStack));
             assertTrue(FactoryItemMaterialTest.factory.isApplicable(meta, craftStack));
         }
     }
 
-    @Test
-    public void generalCase() {
+    @ParameterizedTest
+    @MethodSource("data")
+    public void generalCase(Material material) {
         CraftMetaItem meta = (CraftMetaItem) FactoryItemMaterialTest.factory.getItemMeta(material);
         if (meta == null) {
-            assertThat(this.material, is(Material.AIR));
+            assertThat(material, is(Material.AIR));
         } else {
             assertTrue(FactoryItemMaterialTest.factory.isApplicable(meta, material));
             assertTrue(meta.applicableTo(material));
@@ -80,11 +80,12 @@ public class FactoryItemMaterialTest extends AbstractTestingBase {
         }
     }
 
-    @Test
-    public void asMetaFor() {
+    @ParameterizedTest
+    @MethodSource("data")
+    public void asMetaFor(Material material) {
         final CraftMetaItem baseMeta = (CraftMetaItem) FactoryItemMaterialTest.factory.getItemMeta(material);
         if (baseMeta == null) {
-            assertThat(this.material, is(Material.AIR));
+            assertThat(material, is(Material.AIR));
             return;
         }
 
@@ -93,29 +94,30 @@ public class FactoryItemMaterialTest extends AbstractTestingBase {
             final CraftItemStack craftStack = CraftItemStack.asCraftCopy(bukkitStack);
             final CraftMetaItem otherMeta = (CraftMetaItem) FactoryItemMaterialTest.factory.asMetaFor(baseMeta, other);
 
-            final String testName = FactoryItemMaterialTest.name(this.material, other);
+            final String testName = FactoryItemMaterialTest.name(material, other);
 
             if (otherMeta == null) {
                 assertThat(testName, other, is(Material.AIR));
                 continue;
             }
 
-            assertTrue(testName, FactoryItemMaterialTest.factory.isApplicable(otherMeta, craftStack));
-            assertTrue(testName, FactoryItemMaterialTest.factory.isApplicable(otherMeta, bukkitStack));
-            assertTrue(testName, FactoryItemMaterialTest.factory.isApplicable(otherMeta, other));
-            assertTrue(testName, otherMeta.applicableTo(other));
+            assertTrue(FactoryItemMaterialTest.factory.isApplicable(otherMeta, craftStack), testName);
+            assertTrue(FactoryItemMaterialTest.factory.isApplicable(otherMeta, bukkitStack), testName);
+            assertTrue(FactoryItemMaterialTest.factory.isApplicable(otherMeta, other), testName);
+            assertTrue(otherMeta.applicableTo(other), testName);
         }
     }
 
-    @Test
-    public void blankEqualities() {
-        if (this.material == Material.AIR) {
+    @ParameterizedTest
+    @MethodSource("data")
+    public void blankEqualities(Material material) {
+        if (material == Material.AIR) {
             return;
         }
         final CraftMetaItem baseMeta = (CraftMetaItem) FactoryItemMaterialTest.factory.getItemMeta(material);
         final CraftMetaItem baseMetaClone = baseMeta.clone();
 
-        final ItemStack baseMetaStack = new ItemStack(this.material);
+        final ItemStack baseMetaStack = new ItemStack(material);
         baseMetaStack.setItemMeta(baseMeta);
 
         assertThat(baseMeta, is(not(sameInstance(baseMetaStack.getItemMeta()))));
@@ -132,7 +134,7 @@ public class FactoryItemMaterialTest extends AbstractTestingBase {
         assertThat(baseMetaClone, is(baseMeta));
 
         for (Material other : FactoryItemMaterialTest.materials) {
-            final String testName = FactoryItemMaterialTest.name(this.material, other);
+            final String testName = FactoryItemMaterialTest.name(material, other);
 
             final CraftMetaItem otherMeta = (CraftMetaItem) FactoryItemMaterialTest.factory.asMetaFor(baseMetaClone, other);
 
@@ -141,8 +143,8 @@ public class FactoryItemMaterialTest extends AbstractTestingBase {
                 continue;
             }
 
-            assertTrue(testName, FactoryItemMaterialTest.factory.equals(baseMeta, otherMeta));
-            assertTrue(testName, FactoryItemMaterialTest.factory.equals(otherMeta, baseMeta));
+            assertTrue(FactoryItemMaterialTest.factory.equals(baseMeta, otherMeta), testName);
+            assertTrue(FactoryItemMaterialTest.factory.equals(otherMeta, baseMeta), testName);
 
             assertThat(testName, baseMeta, is(otherMeta));
             assertThat(testName, otherMeta, is(baseMeta));
diff --git a/src/test/java/org/bukkit/craftbukkit/inventory/ItemMetaCloneTest.java b/src/test/java/org/bukkit/craftbukkit/inventory/ItemMetaCloneTest.java
index cefedd7d1e568d046b2e6f2ee75ffcf13754c5bb..2195ac5dc7bc56e83199bb8af0ab07fb3630798d 100644
--- a/src/test/java/org/bukkit/craftbukkit/inventory/ItemMetaCloneTest.java
+++ b/src/test/java/org/bukkit/craftbukkit/inventory/ItemMetaCloneTest.java
@@ -1,10 +1,11 @@
 package org.bukkit.craftbukkit.inventory;
 
+import static org.hamcrest.MatcherAssert.assertThat;
 import static org.hamcrest.Matchers.*;
-import static org.junit.Assert.*;
+import static org.junit.jupiter.api.Assertions.*;
 import java.lang.reflect.Method;
 import org.bukkit.Material;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 public class ItemMetaCloneTest {
 
@@ -14,7 +15,7 @@ public class ItemMetaCloneTest {
             Class<?> clazz = CraftItemFactory.instance().getItemMeta(material).getClass();
 
             Method clone = clazz.getDeclaredMethod("clone");
-            assertNotNull("Class " + clazz + " does not override clone()", clone);
+            assertNotNull(clone, "Class " + clazz + " does not override clone()");
             assertThat("Class " + clazz + " clone return type does not match", clone.getReturnType(), is(equalTo(clazz)));
         }
     }
diff --git a/src/test/java/org/bukkit/craftbukkit/inventory/ItemMetaImplementationOverrideTest.java b/src/test/java/org/bukkit/craftbukkit/inventory/ItemMetaImplementationOverrideTest.java
index 2cab00db9881b69714f1c250348b622c8092ab8f..fb8f9c0eb3b6cce6d1a58063756180f068f350e3 100644
--- a/src/test/java/org/bukkit/craftbukkit/inventory/ItemMetaImplementationOverrideTest.java
+++ b/src/test/java/org/bukkit/craftbukkit/inventory/ItemMetaImplementationOverrideTest.java
@@ -1,25 +1,23 @@
 package org.bukkit.craftbukkit.inventory;
 
-import static org.hamcrest.Matchers.*;
-import static org.junit.Assert.*;
+import org.bukkit.Material;
+import org.bukkit.configuration.serialization.DelegateDeserialization;
+import org.bukkit.craftbukkit.Overridden;
+import org.junit.jupiter.params.ParameterizedTest;
+import org.junit.jupiter.params.provider.MethodSource;
+
 import java.lang.reflect.Method;
 import java.util.ArrayList;
 import java.util.List;
 import java.util.concurrent.Callable;
-import org.bukkit.Material;
-import org.bukkit.configuration.serialization.DelegateDeserialization;
-import org.bukkit.craftbukkit.Overridden;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.junit.runners.Parameterized;
-import org.junit.runners.Parameterized.Parameter;
-import org.junit.runners.Parameterized.Parameters;
 
-@RunWith(Parameterized.class)
+import static org.hamcrest.MatcherAssert.assertThat;
+import static org.hamcrest.Matchers.*;
+
 public class ItemMetaImplementationOverrideTest {
     static final Class<CraftMetaItem> parent = CraftMetaItem.class;
 
-    @Parameters(name = "[{index}]:{1}")
+    @ParameterizedTest(name = "[{index}]:{1}")
     public static List<Object[]> data() {
         final List<Object[]> testData = new ArrayList<Object[]>();
         List<Class<? extends CraftMetaItem>> classes = new ArrayList<Class<? extends CraftMetaItem>>();
@@ -70,11 +68,9 @@ public class ItemMetaImplementationOverrideTest {
         return testData;
     }
 
-    @Parameter(0) public Callable<?> test;
-    @Parameter(1) public String name;
-
-    @Test
-    public void testClass() throws Throwable {
-        assertThat(this.name, this.test.call(), is(not(nullValue())));
+    @ParameterizedTest
+    @MethodSource("data")
+    public void testClass(Callable<?> test, String name) throws Throwable {
+        assertThat(name, test.call(), is(not(nullValue())));
     }
 }
diff --git a/src/test/java/org/bukkit/craftbukkit/inventory/ItemMetaTest.java b/src/test/java/org/bukkit/craftbukkit/inventory/ItemMetaTest.java
index bc5427e6e7221245330723c290dd15abf45ffdda..14720dab2b304723da8650e08b17f6d4810f252a 100644
--- a/src/test/java/org/bukkit/craftbukkit/inventory/ItemMetaTest.java
+++ b/src/test/java/org/bukkit/craftbukkit/inventory/ItemMetaTest.java
@@ -1,7 +1,10 @@
 package org.bukkit.craftbukkit.inventory;
 
+import static org.hamcrest.MatcherAssert.assertThat;
 import static org.hamcrest.Matchers.*;
-import static org.junit.Assert.*;
+import static org.junit.jupiter.api.Assertions.*;
+import static org.junit.jupiter.api.Assertions.assertThrows;
+
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.List;
@@ -56,30 +59,30 @@ import org.bukkit.potion.PotionData;
 import org.bukkit.potion.PotionEffectType;
 import org.bukkit.potion.PotionType;
 import org.bukkit.support.AbstractTestingBase;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 public class ItemMetaTest extends AbstractTestingBase {
 
     static final int MAX_FIREWORK_POWER = 127; // Please update ItemStackFireworkTest if/when this gets changed.
 
-    @Test(expected = IllegalArgumentException.class)
+    @org.junit.jupiter.api.Test
     public void testPowerLimitExact() {
-        ItemMetaTest.newFireworkMeta().setPower(ItemMetaTest.MAX_FIREWORK_POWER + 1);
+        assertThrows(IllegalArgumentException.class, () -> ItemMetaTest.newFireworkMeta().setPower(ItemMetaTest.MAX_FIREWORK_POWER + 1));
     }
 
-    @Test(expected = IllegalArgumentException.class)
+    @org.junit.jupiter.api.Test
     public void testPowerLimitMax() {
-        ItemMetaTest.newFireworkMeta().setPower(Integer.MAX_VALUE);
+        assertThrows(IllegalArgumentException.class, () -> ItemMetaTest.newFireworkMeta().setPower(Integer.MAX_VALUE));
     }
 
-    @Test(expected = IllegalArgumentException.class)
+    @org.junit.jupiter.api.Test
     public void testPowerLimitMin() {
-        ItemMetaTest.newFireworkMeta().setPower(Integer.MIN_VALUE);
+        assertThrows(IllegalArgumentException.class, () -> ItemMetaTest.newFireworkMeta().setPower(Integer.MIN_VALUE));
     }
 
-    @Test(expected = IllegalArgumentException.class)
+    @org.junit.jupiter.api.Test
     public void testPowerLimitNegative() {
-        ItemMetaTest.newFireworkMeta().setPower(-1);
+        assertThrows(IllegalArgumentException.class, () -> ItemMetaTest.newFireworkMeta().setPower(-1));
     }
 
     @Test
@@ -91,7 +94,7 @@ public class ItemMetaTest extends AbstractTestingBase {
         }
     }
 
-    @Test
+    @org.junit.jupiter.api.Test
     public void testConflictingEnchantment() {
         ItemMeta itemMeta = Bukkit.getItemFactory().getItemMeta(Material.DIAMOND_PICKAXE);
         assertThat(itemMeta.hasConflictingEnchant(Enchantment.DURABILITY), is(false));
@@ -121,7 +124,7 @@ public class ItemMetaTest extends AbstractTestingBase {
         stack.setLore(null);
     }
 
-    @Test
+    @org.junit.jupiter.api.Test
     public void testHasItemMeta() {
         ItemStack itemStack = new ItemStack(Material.SHEARS);
 
@@ -130,7 +133,7 @@ public class ItemMetaTest extends AbstractTestingBase {
     }
     // Paper end
 
-    @Test
+    @org.junit.jupiter.api.Test
     public void testConflictingStoredEnchantment() {
         EnchantmentStorageMeta itemMeta = (EnchantmentStorageMeta) Bukkit.getItemFactory().getItemMeta(Material.ENCHANTED_BOOK);
         assertThat(itemMeta.hasConflictingStoredEnchant(Enchantment.DURABILITY), is(false));
@@ -141,7 +144,7 @@ public class ItemMetaTest extends AbstractTestingBase {
         assertThat(itemMeta.hasConflictingStoredEnchant(null), is(false));
     }
 
-    @Test
+    @org.junit.jupiter.api.Test
     public void testConflictingEnchantments() {
         ItemMeta itemMeta = Bukkit.getItemFactory().getItemMeta(Material.DIAMOND_PICKAXE);
         itemMeta.addEnchant(Enchantment.DURABILITY, 6, true);
@@ -153,7 +156,7 @@ public class ItemMetaTest extends AbstractTestingBase {
         assertThat(itemMeta.hasConflictingEnchant(null), is(false));
     }
 
-    @Test
+    @org.junit.jupiter.api.Test
     public void testConflictingStoredEnchantments() {
         EnchantmentStorageMeta itemMeta = (EnchantmentStorageMeta) Bukkit.getItemFactory().getItemMeta(Material.ENCHANTED_BOOK);
         itemMeta.addStoredEnchant(Enchantment.DURABILITY, 6, true);
@@ -169,7 +172,7 @@ public class ItemMetaTest extends AbstractTestingBase {
         return ((FireworkMeta) Bukkit.getItemFactory().getItemMeta(Material.FIREWORK_ROCKET));
     }
 
-    @Test
+    @org.junit.jupiter.api.Test
     public void testCrazyEquality() {
         CraftItemStack craft = CraftItemStack.asCraftCopy(new ItemStack(Material.STONE));
         craft.setItemMeta(craft.getItemMeta());
@@ -178,7 +181,7 @@ public class ItemMetaTest extends AbstractTestingBase {
         assertThat(bukkit, is((ItemStack) craft));
     }
 
-    @Test
+    @org.junit.jupiter.api.Test
     public void testBlockStateMeta() {
         List<Block> queue = new ArrayList<>();
 
@@ -202,20 +205,20 @@ public class ItemMetaTest extends AbstractTestingBase {
 
                 ItemMeta meta = stack.getItemMeta();
                 if (block instanceof EntityBlock) {
-                    assertTrue(stack + " has meta of type " + meta + " expected BlockStateMeta", meta instanceof BlockStateMeta);
+                    assertTrue(meta instanceof BlockStateMeta, stack + " has meta of type " + meta + " expected BlockStateMeta");
 
                     BlockStateMeta blockState = (BlockStateMeta) meta;
-                    assertNotNull(stack + " has null block state", blockState.getBlockState());
+                    assertNotNull(blockState.getBlockState(), stack + " has null block state");
 
                     blockState.setBlockState(blockState.getBlockState());
                 } else {
-                    assertTrue(stack + " has unexpected meta of type BlockStateMeta (but is not a tile)", !(meta instanceof BlockStateMeta));
+                    assertFalse(meta instanceof BlockStateMeta, stack + " has unexpected meta of type BlockStateMeta (but is not a tile)");
                 }
             }
         }
     }
 
-    @Test
+    @org.junit.jupiter.api.Test
     public void testSpawnEggsHasMeta() {
         for (Item item : BuiltInRegistries.ITEM) {
             if (item instanceof net.minecraft.world.item.SpawnEggItem) {
@@ -426,7 +429,7 @@ public class ItemMetaTest extends AbstractTestingBase {
         }
     }
 
-    @Test
+    @org.junit.jupiter.api.Test
     public void testAttributeModifiers() {
         UUID sameUUID = UUID.randomUUID();
         ItemMeta itemMeta = Bukkit.getItemFactory().getItemMeta(Material.DIAMOND_PICKAXE);
@@ -446,7 +449,7 @@ public class ItemMetaTest extends AbstractTestingBase {
         assertThat(itemMeta2.equals(notEqualMeta2), is(false));
     }
 
-    @Test
+    @org.junit.jupiter.api.Test
     public void testBlockData() {
         BlockDataMeta itemMeta = (BlockDataMeta) Bukkit.getItemFactory().getItemMeta(Material.CHEST);
         itemMeta.setBlockData(CraftBlockData.newData(null, "minecraft:chest[waterlogged=true]"));
diff --git a/src/test/java/org/bukkit/craftbukkit/inventory/ItemStackBookTest.java b/src/test/java/org/bukkit/craftbukkit/inventory/ItemStackBookTest.java
index 4c8ce94617abf73ccce8613a3f5cb5c67d1f9077..d9061c7ad9a8864cf0948567bb2681fb3ede6878 100644
--- a/src/test/java/org/bukkit/craftbukkit/inventory/ItemStackBookTest.java
+++ b/src/test/java/org/bukkit/craftbukkit/inventory/ItemStackBookTest.java
@@ -1,24 +1,20 @@
 package org.bukkit.craftbukkit.inventory;
 
 import com.google.common.base.Joiner;
-import java.util.Arrays;
-import java.util.List;
 import org.bukkit.Material;
-import org.bukkit.craftbukkit.inventory.ItemStackTest.CompoundOperator;
-import org.bukkit.craftbukkit.inventory.ItemStackTest.Operator;
-import org.bukkit.craftbukkit.inventory.ItemStackTest.StackProvider;
 import org.bukkit.inventory.ItemStack;
 import org.bukkit.inventory.meta.BookMeta;
-import org.junit.runner.RunWith;
-import org.junit.runners.Parameterized;
-import org.junit.runners.Parameterized.Parameters;
+import org.junit.jupiter.params.ParameterizedTest;
+
+import java.util.Arrays;
+import java.util.List;
+import java.util.stream.Stream;
 
-@RunWith(Parameterized.class)
 public class ItemStackBookTest extends ItemStackTest {
 
-    @Parameters(name = "[{index}]:{" + NAME_PARAMETER + "}")
-    public static List<Object[]> data() {
-        return StackProvider.compound(ItemStackBookTest.operators(), "%s %s", NAME_PARAMETER, Material.WRITTEN_BOOK, Material.WRITABLE_BOOK);
+    @ParameterizedTest(name = "[{index}]:{" + NAME_PARAMETER + "}")
+    public static Stream<Object[]> data() {
+        return StackProvider.compound(ItemStackBookTest.operators(), "%s %s", NAME_PARAMETER, Material.WRITTEN_BOOK, Material.WRITABLE_BOOK).stream();
     }
 
     @SuppressWarnings("unchecked")
diff --git a/src/test/java/org/bukkit/craftbukkit/inventory/ItemStackEnchantStorageTest.java b/src/test/java/org/bukkit/craftbukkit/inventory/ItemStackEnchantStorageTest.java
index fefd636b7a01d981c72689811bfad1ab90dea6df..0130c964fb00e44ee491758beca9e9bd7f78c29e 100644
--- a/src/test/java/org/bukkit/craftbukkit/inventory/ItemStackEnchantStorageTest.java
+++ b/src/test/java/org/bukkit/craftbukkit/inventory/ItemStackEnchantStorageTest.java
@@ -1,25 +1,21 @@
 package org.bukkit.craftbukkit.inventory;
 
 import com.google.common.base.Joiner;
-import java.util.Arrays;
-import java.util.List;
 import org.bukkit.Material;
-import org.bukkit.craftbukkit.inventory.ItemStackTest.CompoundOperator;
-import org.bukkit.craftbukkit.inventory.ItemStackTest.Operator;
-import org.bukkit.craftbukkit.inventory.ItemStackTest.StackProvider;
 import org.bukkit.enchantments.Enchantment;
 import org.bukkit.inventory.ItemStack;
 import org.bukkit.inventory.meta.EnchantmentStorageMeta;
-import org.junit.runner.RunWith;
-import org.junit.runners.Parameterized;
-import org.junit.runners.Parameterized.Parameters;
+import org.junit.jupiter.params.ParameterizedTest;
+
+import java.util.Arrays;
+import java.util.List;
+import java.util.stream.Stream;
 
-@RunWith(Parameterized.class)
 public class ItemStackEnchantStorageTest extends ItemStackTest {
 
-    @Parameters(name = "[{index}]:{" + NAME_PARAMETER + "}")
-    public static List<Object[]> data() {
-        return StackProvider.compound(ItemStackEnchantStorageTest.operators(), "%s %s", NAME_PARAMETER, Material.ENCHANTED_BOOK);
+    @ParameterizedTest(name = "[{index}]:{" + NAME_PARAMETER + "}")
+    public static Stream<Object[]> data() {
+        return StackProvider.compound(ItemStackEnchantStorageTest.operators(), "%s %s", NAME_PARAMETER, Material.ENCHANTED_BOOK).stream();
     }
 
     @SuppressWarnings("unchecked")
diff --git a/src/test/java/org/bukkit/craftbukkit/inventory/ItemStackFireworkChargeTest.java b/src/test/java/org/bukkit/craftbukkit/inventory/ItemStackFireworkChargeTest.java
index a1aca36450963427d76dce7dadb16bcf85acd8f1..5d6230f81ee6ad91a4cb1c4d31b4c5f5c2025996 100644
--- a/src/test/java/org/bukkit/craftbukkit/inventory/ItemStackFireworkChargeTest.java
+++ b/src/test/java/org/bukkit/craftbukkit/inventory/ItemStackFireworkChargeTest.java
@@ -1,27 +1,23 @@
 package org.bukkit.craftbukkit.inventory;
 
 import com.google.common.base.Joiner;
-import java.util.Arrays;
-import java.util.List;
 import org.bukkit.Color;
 import org.bukkit.FireworkEffect;
 import org.bukkit.FireworkEffect.Type;
 import org.bukkit.Material;
-import org.bukkit.craftbukkit.inventory.ItemStackTest.CompoundOperator;
-import org.bukkit.craftbukkit.inventory.ItemStackTest.Operator;
-import org.bukkit.craftbukkit.inventory.ItemStackTest.StackProvider;
 import org.bukkit.inventory.ItemStack;
 import org.bukkit.inventory.meta.FireworkEffectMeta;
-import org.junit.runner.RunWith;
-import org.junit.runners.Parameterized;
-import org.junit.runners.Parameterized.Parameters;
+import org.junit.jupiter.params.ParameterizedTest;
+
+import java.util.Arrays;
+import java.util.List;
+import java.util.stream.Stream;
 
-@RunWith(Parameterized.class)
 public class ItemStackFireworkChargeTest extends ItemStackTest {
 
-    @Parameters(name = "[{index}]:{" + NAME_PARAMETER + "}")
-    public static List<Object[]> data() {
-        return StackProvider.compound(ItemStackFireworkChargeTest.operators(), "%s %s", NAME_PARAMETER, Material.FIREWORK_STAR);
+    @ParameterizedTest(name = "[{index}]:{" + NAME_PARAMETER + "}")
+    public static Stream<Object[]> data() {
+        return StackProvider.compound(ItemStackFireworkChargeTest.operators(), "%s %s", NAME_PARAMETER, Material.FIREWORK_STAR).stream();
     }
 
     @SuppressWarnings("unchecked")
diff --git a/src/test/java/org/bukkit/craftbukkit/inventory/ItemStackFireworkTest.java b/src/test/java/org/bukkit/craftbukkit/inventory/ItemStackFireworkTest.java
index 08be07eb87b4fb4e35222f67567ce79ee5f070a6..3b303a5906e3d74613dc62cb6b6bdd7918e528b5 100644
--- a/src/test/java/org/bukkit/craftbukkit/inventory/ItemStackFireworkTest.java
+++ b/src/test/java/org/bukkit/craftbukkit/inventory/ItemStackFireworkTest.java
@@ -1,27 +1,23 @@
 package org.bukkit.craftbukkit.inventory;
 
 import com.google.common.base.Joiner;
-import java.util.Arrays;
-import java.util.List;
 import org.bukkit.Color;
 import org.bukkit.FireworkEffect;
 import org.bukkit.FireworkEffect.Type;
 import org.bukkit.Material;
-import org.bukkit.craftbukkit.inventory.ItemStackTest.CompoundOperator;
-import org.bukkit.craftbukkit.inventory.ItemStackTest.Operator;
-import org.bukkit.craftbukkit.inventory.ItemStackTest.StackProvider;
 import org.bukkit.inventory.ItemStack;
 import org.bukkit.inventory.meta.FireworkMeta;
-import org.junit.runner.RunWith;
-import org.junit.runners.Parameterized;
-import org.junit.runners.Parameterized.Parameters;
+import org.junit.jupiter.params.ParameterizedTest;
+
+import java.util.Arrays;
+import java.util.List;
+import java.util.stream.Stream;
 
-@RunWith(Parameterized.class)
 public class ItemStackFireworkTest extends ItemStackTest {
 
-    @Parameters(name = "[{index}]:{" + NAME_PARAMETER + "}")
-    public static List<Object[]> data() {
-        return StackProvider.compound(ItemStackFireworkTest.operators(), "%s %s", NAME_PARAMETER, Material.FIREWORK_ROCKET);
+    @ParameterizedTest(name = "[{index}]:{" + NAME_PARAMETER + "}")
+    public static Stream<Object[]> data() {
+        return StackProvider.compound(ItemStackFireworkTest.operators(), "%s %s", NAME_PARAMETER, Material.FIREWORK_ROCKET).stream();
     }
 
     @SuppressWarnings("unchecked")
diff --git a/src/test/java/org/bukkit/craftbukkit/inventory/ItemStackLeatherTest.java b/src/test/java/org/bukkit/craftbukkit/inventory/ItemStackLeatherTest.java
index f314a213f156f32b4f2731ff5421441ca4e1c991..90cf3927db93963949f28c461a1548b7d91cd287 100644
--- a/src/test/java/org/bukkit/craftbukkit/inventory/ItemStackLeatherTest.java
+++ b/src/test/java/org/bukkit/craftbukkit/inventory/ItemStackLeatherTest.java
@@ -1,25 +1,21 @@
 package org.bukkit.craftbukkit.inventory;
 
 import com.google.common.base.Joiner;
-import java.util.Arrays;
-import java.util.List;
 import org.bukkit.Color;
 import org.bukkit.Material;
-import org.bukkit.craftbukkit.inventory.ItemStackTest.CompoundOperator;
-import org.bukkit.craftbukkit.inventory.ItemStackTest.Operator;
-import org.bukkit.craftbukkit.inventory.ItemStackTest.StackProvider;
 import org.bukkit.inventory.ItemStack;
 import org.bukkit.inventory.meta.LeatherArmorMeta;
-import org.junit.runner.RunWith;
-import org.junit.runners.Parameterized;
-import org.junit.runners.Parameterized.Parameters;
+import org.junit.jupiter.params.ParameterizedTest;
+
+import java.util.Arrays;
+import java.util.List;
+import java.util.stream.Stream;
 
-@RunWith(Parameterized.class)
 public class ItemStackLeatherTest extends ItemStackTest {
 
-    @Parameters(name = "[{index}]:{" + NAME_PARAMETER + "}")
-    public static List<Object[]> data() {
-        return StackProvider.compound(ItemStackLeatherTest.operators(), "%s %s", NAME_PARAMETER, Material.LEATHER_BOOTS, Material.LEATHER_CHESTPLATE, Material.LEATHER_HELMET, Material.LEATHER_LEGGINGS);
+    @ParameterizedTest(name = "[{index}]:{" + NAME_PARAMETER + "}")
+    public static Stream<Object[]> data() {
+        return StackProvider.compound(ItemStackLeatherTest.operators(), "%s %s", NAME_PARAMETER, Material.LEATHER_BOOTS, Material.LEATHER_CHESTPLATE, Material.LEATHER_HELMET, Material.LEATHER_LEGGINGS).stream();
     }
 
     @SuppressWarnings("unchecked")
diff --git a/src/test/java/org/bukkit/craftbukkit/inventory/ItemStackLoreEnchantmentTest.java b/src/test/java/org/bukkit/craftbukkit/inventory/ItemStackLoreEnchantmentTest.java
index ae27e890d703b82af8282fc3eb46fcac25ee5f54..a2dc8fd068a8cb9f2060cecbc123a0800bc3d305 100644
--- a/src/test/java/org/bukkit/craftbukkit/inventory/ItemStackLoreEnchantmentTest.java
+++ b/src/test/java/org/bukkit/craftbukkit/inventory/ItemStackLoreEnchantmentTest.java
@@ -1,25 +1,21 @@
 package org.bukkit.craftbukkit.inventory;
 
 import com.google.common.base.Joiner;
-import java.util.Arrays;
-import java.util.List;
-import org.bukkit.craftbukkit.inventory.ItemStackTest.CompoundOperator;
-import org.bukkit.craftbukkit.inventory.ItemStackTest.Operator;
-import org.bukkit.craftbukkit.inventory.ItemStackTest.StackProvider;
 import org.bukkit.enchantments.Enchantment;
 import org.bukkit.inventory.ItemStack;
 import org.bukkit.inventory.meta.ItemMeta;
 import org.bukkit.inventory.meta.Repairable;
-import org.junit.runner.RunWith;
-import org.junit.runners.Parameterized;
-import org.junit.runners.Parameterized.Parameters;
+import org.junit.jupiter.params.ParameterizedTest;
+
+import java.util.Arrays;
+import java.util.List;
+import java.util.stream.Stream;
 
-@RunWith(Parameterized.class)
 public class ItemStackLoreEnchantmentTest extends ItemStackTest {
 
-    @Parameters(name = "[{index}]:{" + NAME_PARAMETER + "}")
-    public static List<Object[]> data() {
-        return StackProvider.compound(ItemStackLoreEnchantmentTest.operators(), "%s %s", NAME_PARAMETER, ItemStackTest.COMPOUND_MATERIALS);
+    @ParameterizedTest(name = "[{index}]:{" + NAME_PARAMETER + "}")
+    public static Stream<Object[]> data() {
+        return StackProvider.compound(ItemStackLoreEnchantmentTest.operators(), "%s %s", NAME_PARAMETER, ItemStackTest.COMPOUND_MATERIALS).stream();
     }
 
     @SuppressWarnings("unchecked")
diff --git a/src/test/java/org/bukkit/craftbukkit/inventory/ItemStackMapTest.java b/src/test/java/org/bukkit/craftbukkit/inventory/ItemStackMapTest.java
index 3ed670bd01afe7a59a1f3d7780a1b4bdc40f8654..5537267e0ff80c2530eb1cc00fb5c2ee9ca41892 100644
--- a/src/test/java/org/bukkit/craftbukkit/inventory/ItemStackMapTest.java
+++ b/src/test/java/org/bukkit/craftbukkit/inventory/ItemStackMapTest.java
@@ -1,24 +1,20 @@
 package org.bukkit.craftbukkit.inventory;
 
 import com.google.common.base.Joiner;
-import java.util.Arrays;
-import java.util.List;
 import org.bukkit.Material;
-import org.bukkit.craftbukkit.inventory.ItemStackTest.CompoundOperator;
-import org.bukkit.craftbukkit.inventory.ItemStackTest.Operator;
-import org.bukkit.craftbukkit.inventory.ItemStackTest.StackProvider;
 import org.bukkit.inventory.ItemStack;
 import org.bukkit.inventory.meta.MapMeta;
-import org.junit.runner.RunWith;
-import org.junit.runners.Parameterized;
-import org.junit.runners.Parameterized.Parameters;
+import org.junit.jupiter.params.ParameterizedTest;
+
+import java.util.Arrays;
+import java.util.List;
+import java.util.stream.Stream;
 
-@RunWith(Parameterized.class)
 public class ItemStackMapTest extends ItemStackTest {
 
-    @Parameters(name = "[{index}]:{" + NAME_PARAMETER + "}")
-    public static List<Object[]> data() {
-        return StackProvider.compound(ItemStackMapTest.operators(), "%s %s", NAME_PARAMETER, Material.FILLED_MAP);
+    @ParameterizedTest(name = "[{index}]:{" + NAME_PARAMETER + "}")
+    public static Stream<Object[]> data() {
+        return StackProvider.compound(ItemStackMapTest.operators(), "%s %s", NAME_PARAMETER, Material.FILLED_MAP).stream();
     }
 
     @SuppressWarnings("unchecked")
diff --git a/src/test/java/org/bukkit/craftbukkit/inventory/ItemStackPotionsTest.java b/src/test/java/org/bukkit/craftbukkit/inventory/ItemStackPotionsTest.java
index 9a67aa702b85aa3779c913dab54642cacffd1aee..445252fec9e5bc8ffb994a788e1ab4cbd1e88041 100644
--- a/src/test/java/org/bukkit/craftbukkit/inventory/ItemStackPotionsTest.java
+++ b/src/test/java/org/bukkit/craftbukkit/inventory/ItemStackPotionsTest.java
@@ -1,25 +1,21 @@
 package org.bukkit.craftbukkit.inventory;
 
 import com.google.common.base.Joiner;
-import java.util.Arrays;
-import java.util.List;
 import org.bukkit.Material;
-import org.bukkit.craftbukkit.inventory.ItemStackTest.CompoundOperator;
-import org.bukkit.craftbukkit.inventory.ItemStackTest.Operator;
-import org.bukkit.craftbukkit.inventory.ItemStackTest.StackProvider;
 import org.bukkit.inventory.ItemStack;
 import org.bukkit.inventory.meta.PotionMeta;
 import org.bukkit.potion.PotionEffectType;
-import org.junit.runner.RunWith;
-import org.junit.runners.Parameterized;
-import org.junit.runners.Parameterized.Parameters;
+import org.junit.jupiter.params.ParameterizedTest;
+
+import java.util.Arrays;
+import java.util.List;
+import java.util.stream.Stream;
 
-@RunWith(Parameterized.class)
 public class ItemStackPotionsTest extends ItemStackTest {
 
-    @Parameters(name = "[{index}]:{" + NAME_PARAMETER + "}")
-    public static List<Object[]> data() {
-        return StackProvider.compound(ItemStackPotionsTest.operators(), "%s %s", NAME_PARAMETER, Material.POTION);
+    @ParameterizedTest(name = "[{index}]:{" + NAME_PARAMETER + "}")
+    public static Stream<Object[]> data() {
+        return StackProvider.compound(ItemStackPotionsTest.operators(), "%s %s", NAME_PARAMETER, Material.POTION).stream();
     }
 
     @SuppressWarnings("unchecked")
diff --git a/src/test/java/org/bukkit/craftbukkit/inventory/ItemStackSkullTest.java b/src/test/java/org/bukkit/craftbukkit/inventory/ItemStackSkullTest.java
index 79682cd7cf9bbb489e9359b6739e4f6bd943f47b..a2e6b61ef3a737faeb2ef505a98144ba8f9487a9 100644
--- a/src/test/java/org/bukkit/craftbukkit/inventory/ItemStackSkullTest.java
+++ b/src/test/java/org/bukkit/craftbukkit/inventory/ItemStackSkullTest.java
@@ -1,24 +1,20 @@
 package org.bukkit.craftbukkit.inventory;
 
 import com.google.common.base.Joiner;
-import java.util.Arrays;
-import java.util.List;
 import org.bukkit.Material;
-import org.bukkit.craftbukkit.inventory.ItemStackTest.CompoundOperator;
-import org.bukkit.craftbukkit.inventory.ItemStackTest.Operator;
-import org.bukkit.craftbukkit.inventory.ItemStackTest.StackProvider;
 import org.bukkit.inventory.ItemStack;
 import org.bukkit.inventory.meta.SkullMeta;
-import org.junit.runner.RunWith;
-import org.junit.runners.Parameterized;
-import org.junit.runners.Parameterized.Parameters;
+import org.junit.jupiter.params.ParameterizedTest;
+
+import java.util.Arrays;
+import java.util.List;
+import java.util.stream.Stream;
 
-@RunWith(Parameterized.class)
 public class ItemStackSkullTest extends ItemStackTest {
 
-    @Parameters(name = "[{index}]:{" + NAME_PARAMETER + "}")
-    public static List<Object[]> data() {
-        return StackProvider.compound(ItemStackSkullTest.operators(), "%s %s", NAME_PARAMETER, Material.PLAYER_HEAD);
+    @ParameterizedTest(name = "[{index}]:{" + NAME_PARAMETER + "}")
+    public static Stream<Object[]> data() {
+        return StackProvider.compound(ItemStackSkullTest.operators(), "%s %s", NAME_PARAMETER, Material.PLAYER_HEAD).stream();
     }
 
     @SuppressWarnings("unchecked")
diff --git a/src/test/java/org/bukkit/craftbukkit/inventory/ItemStackTest.java b/src/test/java/org/bukkit/craftbukkit/inventory/ItemStackTest.java
index bf4c622735bf1f4ae190329465426dac6d178c0d..78d5cd653a7311c09c1b9c84d6135c4be21667cc 100644
--- a/src/test/java/org/bukkit/craftbukkit/inventory/ItemStackTest.java
+++ b/src/test/java/org/bukkit/craftbukkit/inventory/ItemStackTest.java
@@ -1,20 +1,6 @@
 package org.bukkit.craftbukkit.inventory;
 
-import static org.bukkit.support.Matchers.*;
-import static org.hamcrest.Matchers.*;
-import static org.junit.Assert.*;
 import com.google.common.base.Joiner;
-import com.google.common.collect.ImmutableList;
-import java.io.ByteArrayInputStream;
-import java.io.ByteArrayOutputStream;
-import java.io.IOException;
-import java.io.ObjectInputStream;
-import java.io.ObjectOutputStream;
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.HashMap;
-import java.util.List;
-import java.util.Map;
 import org.bukkit.Material;
 import org.bukkit.configuration.InvalidConfigurationException;
 import org.bukkit.configuration.file.YamlConfiguration;
@@ -24,14 +10,18 @@ import org.bukkit.inventory.meta.ItemMeta;
 import org.bukkit.support.AbstractTestingBase;
 import org.bukkit.util.io.BukkitObjectInputStream;
 import org.bukkit.util.io.BukkitObjectOutputStream;
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.junit.runners.Parameterized;
-import org.junit.runners.Parameterized.Parameter;
-import org.junit.runners.Parameterized.Parameters;
+import org.junit.jupiter.params.ParameterizedTest;
+import org.junit.jupiter.params.provider.MethodSource;
 import org.yaml.snakeyaml.external.biz.base64Coder.Base64Coder;
 
-@RunWith(Parameterized.class)
+import java.io.*;
+import java.util.*;
+import java.util.stream.Stream;
+
+import static org.bukkit.support.Matchers.sameHash;
+import static org.hamcrest.MatcherAssert.assertThat;
+import static org.hamcrest.Matchers.*;
+
 public class ItemStackTest extends AbstractTestingBase {
     abstract static class StackProvider {
         final Material material;
@@ -305,9 +295,9 @@ public class ItemStackTest extends AbstractTestingBase {
         }
     }
 
-    @Parameters(name = "[{index}]:{" + ItemStackTest.NAME_PARAMETER + "}")
-    public static List<Object[]> data() {
-        return ImmutableList.of(); // TODO, test basic durability issues
+    @ParameterizedTest(name = "[{index}]:{" + ItemStackTest.NAME_PARAMETER + "}")
+    public static Stream<Object[]> data() {
+        return Stream.of(); // TODO, test basic durability issues
     }
 
     static final Object[][] EMPTY_ARRAY = new Object[0][];
@@ -330,32 +320,37 @@ public class ItemStackTest extends AbstractTestingBase {
         COMPOUND_MATERIALS = possibleMaterials.values().toArray(new Material[possibleMaterials.size()]);
     }
 
+    /*
     @Parameter(0) public StackProvider provider;
     @Parameter(1) public StackProvider unequalProvider;
     @Parameter(ItemStackTest.NAME_PARAMETER) public String name;
+    */
 
-    @Test
-    public void testBukkitInequality() {
-        final StackWrapper bukkitWrapper = new CraftWrapper(this.provider);
-        ItemStackTest.testInequality(bukkitWrapper, new BukkitWrapper(this.unequalProvider));
+    @ParameterizedTest
+    @MethodSource("data")
+    public void testBukkitInequality(StackProvider provider, StackProvider unequalProvider, String name) {
+        final StackWrapper bukkitWrapper = new CraftWrapper(provider);
+        ItemStackTest.testInequality(bukkitWrapper, new BukkitWrapper(unequalProvider));
         ItemStackTest.testInequality(bukkitWrapper, new BukkitWrapper(new NoOpProvider(provider.material)));
     }
 
-    @Test
-    public void testCraftInequality() {
-        final StackWrapper craftWrapper = new CraftWrapper(this.provider);
-        ItemStackTest.testInequality(craftWrapper, new CraftWrapper(this.unequalProvider));
+    @ParameterizedTest
+    @MethodSource("data")
+    public void testCraftInequality(StackProvider provider, StackProvider unequalProvider, String name) {
+        final StackWrapper craftWrapper = new CraftWrapper(provider);
+        ItemStackTest.testInequality(craftWrapper, new CraftWrapper(unequalProvider));
         ItemStackTest.testInequality(craftWrapper, new CraftWrapper(new NoOpProvider(provider.material)));
     }
 
-    @Test
-    public void testMixedInequality() {
-        final StackWrapper craftWrapper = new CraftWrapper(this.provider);
-        ItemStackTest.testInequality(craftWrapper, new BukkitWrapper(this.unequalProvider));
+    @ParameterizedTest
+    @MethodSource("data")
+    public void testMixedInequality(StackProvider provider, StackProvider unequalProvider, String name) {
+        final StackWrapper craftWrapper = new CraftWrapper(provider);
+        ItemStackTest.testInequality(craftWrapper, new BukkitWrapper(unequalProvider));
         ItemStackTest.testInequality(craftWrapper, new BukkitWrapper(new NoOpProvider(provider.material)));
 
-        final StackWrapper bukkitWrapper = new CraftWrapper(this.provider);
-        ItemStackTest.testInequality(bukkitWrapper, new CraftWrapper(this.unequalProvider));
+        final StackWrapper bukkitWrapper = new CraftWrapper(provider);
+        ItemStackTest.testInequality(bukkitWrapper, new CraftWrapper(unequalProvider));
         ItemStackTest.testInequality(bukkitWrapper, new CraftWrapper(new NoOpProvider(provider.material)));
     }
 
@@ -400,24 +395,28 @@ public class ItemStackTest extends AbstractTestingBase {
         assertThat(newUnequalCraftStack.getItemMeta(), is(not(stack.getItemMeta())));
     }
 
-    @Test
-    public void testBukkitYamlDeserialize() throws Throwable {
-        ItemStackTest.testYamlDeserialize(new BukkitWrapper(this.provider), new BukkitWrapper(this.unequalProvider));
+    @ParameterizedTest
+    @MethodSource("data")
+    public void testBukkitYamlDeserialize(StackProvider provider, StackProvider unequalProvider, String name) throws Throwable {
+        ItemStackTest.testYamlDeserialize(new BukkitWrapper(provider), new BukkitWrapper(unequalProvider));
     }
 
-    @Test
-    public void testCraftYamlDeserialize() throws Throwable {
-        ItemStackTest.testYamlDeserialize(new CraftWrapper(this.provider), new CraftWrapper(this.unequalProvider));
+    @ParameterizedTest
+    @MethodSource("data")
+    public void testCraftYamlDeserialize(StackProvider provider, StackProvider unequalProvider, String name) throws Throwable {
+        ItemStackTest.testYamlDeserialize(new CraftWrapper(provider), new CraftWrapper(unequalProvider));
     }
 
-    @Test
-    public void testBukkitStreamDeserialize() throws Throwable {
-        ItemStackTest.testStreamDeserialize(new BukkitWrapper(this.provider), new BukkitWrapper(this.unequalProvider));
+    @ParameterizedTest
+    @MethodSource("data")
+    public void testBukkitStreamDeserialize(StackProvider provider, StackProvider unequalProvider, String name) throws Throwable {
+        ItemStackTest.testStreamDeserialize(new BukkitWrapper(provider), new BukkitWrapper(unequalProvider));
     }
 
-    @Test
-    public void testCraftStreamDeserialize() throws Throwable {
-        ItemStackTest.testStreamDeserialize(new CraftWrapper(this.provider), new CraftWrapper(this.unequalProvider));
+    @ParameterizedTest
+    @MethodSource("data")
+    public void testCraftStreamDeserialize(StackProvider provider, StackProvider unequalProvider, String name) throws Throwable {
+        ItemStackTest.testStreamDeserialize(new CraftWrapper(provider), new CraftWrapper(unequalProvider));
     }
 
     static void testStreamDeserialize(StackWrapper provider, StackWrapper unequalProvider) throws Throwable {
diff --git a/src/test/java/org/bukkit/craftbukkit/inventory/NMSCraftItemStackTest.java b/src/test/java/org/bukkit/craftbukkit/inventory/NMSCraftItemStackTest.java
index bed586fe7c9caffaf863e7978fa44a5f2f73e3d2..a8ef39bcb7670e26a3748949e65fc7cf28689da0 100644
--- a/src/test/java/org/bukkit/craftbukkit/inventory/NMSCraftItemStackTest.java
+++ b/src/test/java/org/bukkit/craftbukkit/inventory/NMSCraftItemStackTest.java
@@ -1,11 +1,12 @@
 package org.bukkit.craftbukkit.inventory;
 
+import static org.hamcrest.MatcherAssert.assertThat;
 import static org.hamcrest.Matchers.*;
-import static org.junit.Assert.*;
+import static org.junit.jupiter.api.Assertions.*;
 import net.minecraft.world.item.enchantment.Enchantments;
 import org.bukkit.inventory.ItemStack;
 import org.bukkit.support.AbstractTestingBase;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 public class NMSCraftItemStackTest extends AbstractTestingBase {
 
diff --git a/src/test/java/org/bukkit/craftbukkit/inventory/PersistentDataContainerTest.java b/src/test/java/org/bukkit/craftbukkit/inventory/PersistentDataContainerTest.java
index 9e84a0bddd7dc168d62be05675e73bfd49000125..e0aa4586af877c8ad7aff2f6cc68cdc6a3708e07 100644
--- a/src/test/java/org/bukkit/craftbukkit/inventory/PersistentDataContainerTest.java
+++ b/src/test/java/org/bukkit/craftbukkit/inventory/PersistentDataContainerTest.java
@@ -1,6 +1,8 @@
 package org.bukkit.craftbukkit.inventory;
 
-import static org.junit.Assert.*;
+import static org.junit.jupiter.api.Assertions.*;
+import static org.junit.jupiter.api.Assertions.assertThrows;
+
 import java.io.StringReader;
 import java.lang.reflect.Array;
 import java.nio.ByteBuffer;
@@ -17,14 +19,14 @@ import org.bukkit.persistence.PersistentDataAdapterContext;
 import org.bukkit.persistence.PersistentDataContainer;
 import org.bukkit.persistence.PersistentDataType;
 import org.bukkit.support.AbstractTestingBase;
-import org.junit.Before;
-import org.junit.Test;
+import org.junit.jupiter.api.BeforeEach;
+import org.junit.jupiter.api.Test;
 
 public class PersistentDataContainerTest extends AbstractTestingBase {
 
     private static NamespacedKey VALID_KEY;
 
-    @Before
+    @BeforeEach
     public void setup() {
         PersistentDataContainerTest.VALID_KEY = new NamespacedKey("test", "validkey");
     }
@@ -32,40 +34,40 @@ public class PersistentDataContainerTest extends AbstractTestingBase {
     /*
         Sets a test
      */
-    @Test(expected = IllegalArgumentException.class)
+    @Test
     public void testSetNoAdapter() {
         ItemMeta itemMeta = this.createNewItemMeta();
-        itemMeta.getPersistentDataContainer().set(VALID_KEY, new PrimitiveTagType<>(boolean.class), true);
+        assertThrows(IllegalArgumentException.class, () -> itemMeta.getPersistentDataContainer().set(VALID_KEY, new PrimitiveTagType<>(boolean.class), true));
     }
 
     /*
         Contains a tag
      */
-    @Test(expected = IllegalArgumentException.class)
+    @Test
     public void testHasNoAdapter() {
         ItemMeta itemMeta = this.createNewItemMeta();
         itemMeta.getPersistentDataContainer().set(VALID_KEY, PersistentDataType.INTEGER, 1); // We gotta set this so we at least try to compare it
-        itemMeta.getPersistentDataContainer().has(VALID_KEY, new PrimitiveTagType<>(boolean.class));
+        assertThrows(IllegalArgumentException.class, () -> itemMeta.getPersistentDataContainer().has(VALID_KEY, new PrimitiveTagType<>(boolean.class)));
     }
 
     /*
         Getting a tag
      */
-    @Test(expected = IllegalArgumentException.class)
+    @org.junit.jupiter.api.Test
     public void testGetNoAdapter() {
         ItemMeta itemMeta = this.createNewItemMeta();
         itemMeta.getPersistentDataContainer().set(VALID_KEY, PersistentDataType.INTEGER, 1); //We gotta set this so we at least try to compare it
-        itemMeta.getPersistentDataContainer().get(VALID_KEY, new PrimitiveTagType<>(boolean.class));
+        assertThrows(IllegalArgumentException.class, () -> itemMeta.getPersistentDataContainer().get(VALID_KEY, new PrimitiveTagType<>(boolean.class)));
     }
 
-    @Test(expected = IllegalArgumentException.class)
+    @Test
     public void testGetWrongType() {
         ItemMeta itemMeta = this.createNewItemMeta();
         itemMeta.getPersistentDataContainer().set(VALID_KEY, PersistentDataType.INTEGER, 1);
-        itemMeta.getPersistentDataContainer().get(VALID_KEY, PersistentDataType.STRING);
+        assertThrows(IllegalArgumentException.class, () -> itemMeta.getPersistentDataContainer().get(VALID_KEY, PersistentDataType.STRING));
     }
 
-    @Test
+    @org.junit.jupiter.api.Test
     public void testDifferentNamespace() {
         NamespacedKey namespacedKeyA = new NamespacedKey("plugin-a", "damage");
         NamespacedKey namespacedKeyB = new NamespacedKey("plugin-b", "damage");
@@ -123,7 +125,7 @@ public class PersistentDataContainerTest extends AbstractTestingBase {
         assertNotEquals(new ItemStack(Material.DIAMOND), loadedConfig.getSerializable("testpath", ItemStack.class));
     }
 
-    @Test
+    @org.junit.jupiter.api.Test
     public void testCorrectType() {
         ItemStack stack = new ItemStack(Material.DIAMOND);
         CraftMetaItem meta = this.createComplexItemMeta();
@@ -167,7 +169,7 @@ public class PersistentDataContainerTest extends AbstractTestingBase {
     /*
         Test complex object storage
      */
-    @Test
+    @org.junit.jupiter.api.Test
     public void storeUUIDOnItemTest() {
         ItemMeta itemMeta = this.createNewItemMeta();
         UUIDPersistentDataType uuidPersistentDataType = new UUIDPersistentDataType();
@@ -311,7 +313,7 @@ public class PersistentDataContainerTest extends AbstractTestingBase {
         }
     }
 
-    @Test
+    @org.junit.jupiter.api.Test
     public void testItemMetaClone() {
         ItemMeta itemMeta = this.createNewItemMeta();
         PersistentDataContainer container = itemMeta.getPersistentDataContainer();
diff --git a/src/test/java/org/bukkit/craftbukkit/inventory/PlayerInventoryTest.java b/src/test/java/org/bukkit/craftbukkit/inventory/PlayerInventoryTest.java
index 4b2c482bdcf799b540cba8bd0f09fc4b508110aa..b2fae1327f795ecb43dfcaf042add04ba8f2a6f3 100644
--- a/src/test/java/org/bukkit/craftbukkit/inventory/PlayerInventoryTest.java
+++ b/src/test/java/org/bukkit/craftbukkit/inventory/PlayerInventoryTest.java
@@ -1,12 +1,13 @@
 package org.bukkit.craftbukkit.inventory;
 
-import static org.junit.Assert.*;
+import static org.junit.jupiter.api.Assertions.*;
 
 import net.minecraft.world.entity.player.Inventory;
 import net.minecraft.world.item.ItemStack;
 import net.minecraft.world.item.Items;
 import org.bukkit.support.AbstractTestingBase;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
+
 
 public class PlayerInventoryTest extends AbstractTestingBase {
 
diff --git a/src/test/java/org/bukkit/craftbukkit/legacy/EvilTest.java b/src/test/java/org/bukkit/craftbukkit/legacy/EvilTest.java
index 23e5d98cf72d8bccd56087d71507036046cd1104..265b66d8901ef9e44635b5fb0ed97aff787d74b4 100644
--- a/src/test/java/org/bukkit/craftbukkit/legacy/EvilTest.java
+++ b/src/test/java/org/bukkit/craftbukkit/legacy/EvilTest.java
@@ -1,23 +1,26 @@
 package org.bukkit.craftbukkit.legacy;
 
 import org.bukkit.Material;
-import org.junit.Assert;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
+
+import static org.junit.jupiter.api.Assertions.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertThrows;
+
 
 public class EvilTest {
 
     @Test
     public void testFrom() {
-        Assert.assertEquals(Material.LEGACY_STONE, CraftEvil.getMaterial(1));
+        assertEquals(Material.LEGACY_STONE, CraftEvil.getMaterial(1));
     }
 
-    @Test
+    @org.junit.jupiter.api.Test
     public void testTo() {
-        Assert.assertEquals(1, CraftEvil.getId(Material.LEGACY_STONE));
+        assertEquals(1, CraftEvil.getId(Material.LEGACY_STONE));
     }
 
-    @Test(expected = IllegalArgumentException.class)
+    @Test
     public void testIllegal() {
-        Material.STONE.getId();
+        assertThrows(IllegalArgumentException.class, Material.STONE::getId);
     }
 }
diff --git a/src/test/java/org/bukkit/craftbukkit/legacy/LegacyTest.java b/src/test/java/org/bukkit/craftbukkit/legacy/LegacyTest.java
index 5db56256e862ec58c9aebd4e647927c7679d1ef5..083d097d7ed124bffa3619fec825f86806888376 100644
--- a/src/test/java/org/bukkit/craftbukkit/legacy/LegacyTest.java
+++ b/src/test/java/org/bukkit/craftbukkit/legacy/LegacyTest.java
@@ -7,8 +7,10 @@ import org.bukkit.Material;
 import org.bukkit.craftbukkit.util.CraftMagicNumbers;
 import org.bukkit.material.MaterialData;
 import org.bukkit.support.AbstractTestingBase;
-import org.junit.Assert;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
+
+import static org.junit.jupiter.api.Assertions.*;
+
 
 public class LegacyTest extends AbstractTestingBase {
 
@@ -107,57 +109,57 @@ public class LegacyTest extends AbstractTestingBase {
             Material.LEGACY_CAKE, Material.LEGACY_BED, Material.LEGACY_DIODE, Material.LEGACY_NETHER_STALK, Material.LEGACY_BREWING_STAND_ITEM, Material.LEGACY_CAULDRON_ITEM, Material.LEGACY_REDSTONE_COMPARATOR, Material.LEGACY_SPRUCE_DOOR_ITEM,
             Material.LEGACY_BIRCH_DOOR_ITEM, Material.LEGACY_JUNGLE_DOOR_ITEM, Material.LEGACY_ACACIA_DOOR_ITEM, Material.LEGACY_DARK_OAK_DOOR_ITEM, Material.LEGACY_STATIONARY_LAVA, Material.LEGACY_STATIONARY_WATER));
 
-    @Test
+    @org.junit.jupiter.api.Test
     public void toLegacyMaterial() {
         for (Material material : Material.values()) {
             if (!this.INVALIDATED_MATERIALS.contains(material) && !material.isLegacy()) {
                 MaterialData converted = CraftLegacy.toLegacyData(material);
 
-                Assert.assertNotEquals("Could not toLegacy " + material, Material.LEGACY_AIR, converted.getItemType());
+                assertNotEquals(Material.LEGACY_AIR, converted.getItemType(), "Could not toLegacy " + material);
 
                 if (!this.INVALIDATED_MATERIALS.contains(converted.getItemType())) {
-                    Assert.assertNotEquals("Could not fromLegacy(toLegacy) " + converted + "(" + material + ")", Material.AIR, CraftLegacy.fromLegacy(converted));
+                    assertNotEquals(Material.AIR, CraftLegacy.fromLegacy(converted), "Could not fromLegacy(toLegacy) " + converted + "(" + material + ")");
                 }
                 if (!this.INVERSION_FAILS.contains(material)) {
-                    Assert.assertEquals("Could not fromLegacy(toLegacy) " + converted + "(" + material + ")", material, CraftLegacy.fromLegacy(converted));
+                    assertEquals(material, CraftLegacy.fromLegacy(converted), "Could not fromLegacy(toLegacy) " + converted + "(" + material + ")");
                 }
             }
         }
 
-        Assert.assertEquals("Could not toLegacy Air", Material.LEGACY_AIR, CraftLegacy.toLegacy(Material.AIR));
+        assertEquals(Material.LEGACY_AIR, CraftLegacy.toLegacy(Material.AIR), "Could not toLegacy Air");
     }
 
-    @Test
+    @org.junit.jupiter.api.Test
     public void fromLegacyMaterial() {
         for (Material material : Material.values()) {
             if (!this.INVALIDATED_MATERIALS.contains(material) && material.isLegacy()) {
                 Material converted = CraftLegacy.fromLegacy(material);
-                Assert.assertNotEquals("Could not fromLegacy " + material, Material.AIR, converted);
+                assertNotEquals(Material.AIR, converted, "Could not fromLegacy " + material);
 
-                Assert.assertNotEquals("Could not toLegacy(fromLegacy) " + converted + "(" + material + ")", Material.AIR, CraftLegacy.toLegacy(converted));
+                assertNotEquals(Material.AIR, CraftLegacy.toLegacy(converted), "Could not toLegacy(fromLegacy) " + converted + "(" + material + ")");
                 if (!this.INVERSION_FAILS.contains(material)) {
-                    Assert.assertEquals("Could not toLegacy(fromLegacy) " + converted + "(" + material + ")", material, CraftLegacy.toLegacy(converted));
+                    assertEquals(material, CraftLegacy.toLegacy(converted), "Could not toLegacy(fromLegacy) " + converted + "(" + material + ")");
                 }
             }
         }
 
-        Assert.assertEquals("Could not fromLegacy Air", Material.AIR, CraftLegacy.fromLegacy(Material.LEGACY_AIR));
+        assertEquals(Material.AIR, CraftLegacy.fromLegacy(Material.LEGACY_AIR), "Could not fromLegacy Air");
     }
 
-    @Test
+    @org.junit.jupiter.api.Test
     public void testRestricted() {
         for (Material material : CraftLegacy.values()) {
-            Assert.assertTrue("Must iterate only legacy materials", material.isLegacy());
+            assertTrue(material.isLegacy(), "Must iterate only legacy materials");
         }
 
         for (Material material : org.bukkit.craftbukkit.util.CraftLegacy.modern_values()) {
-            Assert.assertFalse("Must iterate only modern materials", material.isLegacy());
+            assertFalse(material.isLegacy(), "Must iterate only modern materials");
         }
     }
 
     @Test
     public void testManual() {
-        Assert.assertEquals(Material.YELLOW_DYE, CraftMagicNumbers.INSTANCE.getMaterial("dandelion_yellow", 1631));
-        Assert.assertEquals(Material.OAK_WALL_SIGN, CraftMagicNumbers.INSTANCE.getMaterial("wall_sign", 1631));
+        assertEquals(Material.YELLOW_DYE, CraftMagicNumbers.INSTANCE.getMaterial("dandelion_yellow", 1631));
+        assertEquals(Material.OAK_WALL_SIGN, CraftMagicNumbers.INSTANCE.getMaterial("wall_sign", 1631));
     }
 }
diff --git a/src/test/java/org/bukkit/craftbukkit/profile/PlayerProfileTest.java b/src/test/java/org/bukkit/craftbukkit/profile/PlayerProfileTest.java
index aba3fe69ac93cce81febb9af6343b58175534574..736071fa1932129d80808ca9211bd9240f597f5a 100644
--- a/src/test/java/org/bukkit/craftbukkit/profile/PlayerProfileTest.java
+++ b/src/test/java/org/bukkit/craftbukkit/profile/PlayerProfileTest.java
@@ -2,16 +2,19 @@ package org.bukkit.craftbukkit.profile;
 
 import com.mojang.authlib.GameProfile;
 import com.mojang.authlib.properties.Property;
-import java.net.MalformedURLException;
-import java.net.URL;
-import java.util.UUID;
 import org.bukkit.configuration.InvalidConfigurationException;
 import org.bukkit.configuration.file.YamlConfiguration;
 import org.bukkit.configuration.serialization.ConfigurationSerialization;
 import org.bukkit.profile.PlayerProfile;
 import org.bukkit.profile.PlayerTextures;
-import org.junit.Assert;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
+
+import java.net.MalformedURLException;
+import java.net.URL;
+import java.util.UUID;
+
+import static org.junit.jupiter.api.Assertions.*;
+
 
 public class PlayerProfileTest {
 
@@ -61,21 +64,15 @@ public class PlayerProfileTest {
     @Test
     public void testProvidedValues() {
         Property property = new Property(CraftPlayerTextures.PROPERTY_NAME, PlayerProfileTest.VALUE, PlayerProfileTest.SIGNATURE);
-        Assert.assertTrue("Invalid test property signature, has the public key changed?", CraftProfileProperty.hasValidSignature(property));
+        assertTrue(CraftProfileProperty.hasValidSignature(property), "Invalid test property signature, has the public key changed?");
     }
 
     @Test
     public void testProfileCreation() {
         // Invalid profiles:
-        Assert.assertThrows(IllegalArgumentException.class, () -> {
-            new CraftPlayerProfile(null, null);
-        });
-        Assert.assertThrows(IllegalArgumentException.class, () -> {
-            new CraftPlayerProfile(null, "");
-        });
-        Assert.assertThrows(IllegalArgumentException.class, () -> {
-            new CraftPlayerProfile(null, " ");
-        });
+        assertThrows(IllegalArgumentException.class, () -> new CraftPlayerProfile(null, null));
+        assertThrows(IllegalArgumentException.class, () -> new CraftPlayerProfile(null, ""));
+        assertThrows(IllegalArgumentException.class, () -> new CraftPlayerProfile(null, " "));
 
         // Valid profiles:
         new CraftPlayerProfile(PlayerProfileTest.UNIQUE_ID, null);
@@ -86,48 +83,46 @@ public class PlayerProfileTest {
     @Test
     public void testGameProfileWrapping() {
         // Invalid profiles:
-        Assert.assertThrows(NullPointerException.class, () -> {
-            new CraftPlayerProfile(null);
-        });
+        assertThrows(NullPointerException.class, () -> new CraftPlayerProfile(null));
 
         // Valid profiles:
         CraftPlayerProfile profile1 = new CraftPlayerProfile(new GameProfile(PlayerProfileTest.UNIQUE_ID, PlayerProfileTest.NAME));
-        Assert.assertEquals("Unique id is not the same", UNIQUE_ID, profile1.getUniqueId());
-        Assert.assertEquals("Name is not the same", NAME, profile1.getName());
+        assertEquals(UNIQUE_ID, profile1.getUniqueId(), "Unique id is not the same");
+        assertEquals(NAME, profile1.getName(), "Name is not the same");
 
         CraftPlayerProfile profile2 = new CraftPlayerProfile(new GameProfile(PlayerProfileTest.UNIQUE_ID, null));
-        Assert.assertEquals("Unique id is not the same", UNIQUE_ID, profile2.getUniqueId());
-        Assert.assertEquals("Name is not null", null, profile2.getName());
+        assertEquals(UNIQUE_ID, profile2.getUniqueId(), "Unique id is not the same");
+        assertNull(profile2.getName(), "Name is not null");
 
         CraftPlayerProfile profile3 = new CraftPlayerProfile(new GameProfile(null, PlayerProfileTest.NAME));
-        Assert.assertEquals("Unique id is not null", null, profile3.getUniqueId());
-        Assert.assertEquals("Name is not the same", NAME, profile3.getName());
+        assertNull(profile3.getUniqueId(), "Unique id is not null");
+        assertEquals(NAME, profile3.getName(), "Name is not the same");
     }
 
     @Test
     public void testTexturesLoading() {
         CraftPlayerProfile profile = PlayerProfileTest.buildPlayerProfile();
-        Assert.assertEquals("Unique id is not the same", UNIQUE_ID, profile.getUniqueId());
-        Assert.assertEquals("Name is not the same", NAME, profile.getName());
-        Assert.assertEquals("Skin url is not the same", SKIN, profile.getTextures().getSkin());
-        Assert.assertEquals("Skin model is not the same", PlayerTextures.SkinModel.SLIM, profile.getTextures().getSkinModel());
-        Assert.assertEquals("Cape url is not the same", CAPE, profile.getTextures().getCape());
-        Assert.assertEquals("Timestamp is not the same", TIMESTAMP, profile.getTextures().getTimestamp());
+        assertEquals(UNIQUE_ID, profile.getUniqueId(), "Unique id is not the same");
+        assertEquals(NAME, profile.getName(), "Name is not the same");
+        assertEquals(SKIN, profile.getTextures().getSkin(), "Skin url is not the same");
+        assertEquals(PlayerTextures.SkinModel.SLIM, profile.getTextures().getSkinModel(), "Skin model is not the same");
+        assertEquals(CAPE, profile.getTextures().getCape(), "Cape url is not the same");
+        assertEquals(TIMESTAMP, profile.getTextures().getTimestamp(), "Timestamp is not the same");
     }
 
     @Test
     public void testBuildGameProfile() {
         CraftPlayerProfile profile = PlayerProfileTest.buildPlayerProfile();
         GameProfile gameProfile = profile.buildGameProfile();
-        Assert.assertNotNull("GameProfile is null", gameProfile);
+        assertNotNull(gameProfile, "GameProfile is null");
 
         Property property = CraftPlayerProfile.getProperty(gameProfile, CraftPlayerTextures.PROPERTY_NAME);
-        Assert.assertNotNull("Textures property is null", property);
-        Assert.assertEquals("Property values are not the same", VALUE, property.getValue());
-        Assert.assertEquals("Names are not the same", NAME, gameProfile.getName());
-        Assert.assertEquals("Unique ids are not the same", UNIQUE_ID, gameProfile.getId());
-        Assert.assertTrue("Signature is missing", property.hasSignature());
-        Assert.assertTrue("Signature is not valid", CraftProfileProperty.hasValidSignature(property));
+        assertNotNull(property, "Textures property is null");
+        assertEquals(VALUE, property.getValue(), "Property values are not the same");
+        assertEquals(NAME, gameProfile.getName(), "Names are not the same");
+        assertEquals(UNIQUE_ID, gameProfile.getId(), "Unique ids are not the same");
+        assertTrue(property.hasSignature(), "Signature is missing");
+        assertTrue(CraftProfileProperty.hasValidSignature(property), "Signature is not valid");
     }
 
     @Test
@@ -135,34 +130,34 @@ public class PlayerProfileTest {
         CraftPlayerProfile profile = PlayerProfileTest.buildPlayerProfile();
         GameProfile gameProfile1 = profile.buildGameProfile();
         GameProfile gameProfile2 = profile.buildGameProfile();
-        Assert.assertTrue("CraftPlayerProfile#buildGameProfile() does not produce a new instance", gameProfile1 != gameProfile2);
+        assertNotSame(gameProfile1, gameProfile2, "CraftPlayerProfile#buildGameProfile() does not produce a new instance");
     }
 
     @Test
     public void testSignatureValidation() {
         CraftPlayerProfile profile = PlayerProfileTest.buildPlayerProfile();
-        Assert.assertTrue("Signature is not valid", profile.getTextures().isSigned());
+        assertTrue(profile.getTextures().isSigned(), "Signature is not valid");
     }
 
-    @Test
+    @org.junit.jupiter.api.Test
     public void testSignatureInvalidation() {
         CraftPlayerProfile profile = PlayerProfileTest.buildPlayerProfile();
         profile.getTextures().setSkin(null);
-        Assert.assertTrue("Textures has a timestamp", profile.getTextures().getTimestamp() == 0L);
-        Assert.assertTrue("Textures signature is valid", !profile.getTextures().isSigned());
+        assertEquals(0L, profile.getTextures().getTimestamp(), "Textures has a timestamp");
+        assertFalse(profile.getTextures().isSigned(), "Textures signature is valid");
 
         // Ensure that the invalidation is preserved when the property is rebuilt:
         profile.rebuildDirtyProperties();
-        Assert.assertTrue("Rebuilt textures has a timestamp", profile.getTextures().getTimestamp() == 0L);
-        Assert.assertTrue("Rebuilt textures signature is valid", !profile.getTextures().isSigned());
+        assertEquals(0L, profile.getTextures().getTimestamp(), "Rebuilt textures has a timestamp");
+        assertFalse(profile.getTextures().isSigned(), "Rebuilt textures signature is valid");
     }
 
     @Test
     public void testSetSkinResetsSkinModel() {
         CraftPlayerProfile profile = PlayerProfileTest.buildPlayerProfile();
-        Assert.assertEquals("Skin model is not the same", PlayerTextures.SkinModel.SLIM, profile.getTextures().getSkinModel());
+        assertEquals(PlayerTextures.SkinModel.SLIM, profile.getTextures().getSkinModel(), "Skin model is not the same");
         profile.getTextures().setSkin(SKIN);
-        Assert.assertEquals("Skin model was not reset by skin change", PlayerTextures.SkinModel.CLASSIC, profile.getTextures().getSkinModel());
+        assertEquals(PlayerTextures.SkinModel.CLASSIC, profile.getTextures().getSkinModel(), "Skin model was not reset by skin change");
     }
 
     @Test
@@ -170,35 +165,35 @@ public class PlayerProfileTest {
         CraftPlayerProfile profile = PlayerProfileTest.buildPlayerProfile();
         CraftPlayerProfile profile2 = new CraftPlayerProfile(new GameProfile(PlayerProfileTest.UNIQUE_ID, PlayerProfileTest.NAME));
 
-        Assert.assertTrue("profile has no textures", !profile.getTextures().isEmpty());
-        Assert.assertTrue("profile2 has textures", profile2.getTextures().isEmpty());
+        assertFalse(profile.getTextures().isEmpty(), "profile has no textures");
+        assertTrue(profile2.getTextures().isEmpty(), "profile2 has textures");
 
         profile2.setTextures(profile.getTextures());
-        Assert.assertTrue("profile2 has no textures", !profile2.getTextures().isEmpty());
-        Assert.assertEquals("copied profile textures are not the same", profile.getTextures(), profile2.getTextures());
+        assertFalse(profile2.getTextures().isEmpty(), "profile2 has no textures");
+        assertEquals(profile.getTextures(), profile2.getTextures(), "copied profile textures are not the same");
 
         profile2.setTextures(null);
-        Assert.assertTrue("cleared profile2 has textures", profile2.getTextures().isEmpty());
-        Assert.assertTrue("cleared profile2 has textures timestamp", profile2.getTextures().getTimestamp() == 0L);
-        Assert.assertTrue("cleared profile2 has signed textures", !profile2.getTextures().isSigned());
+        assertTrue(profile2.getTextures().isEmpty(), "cleared profile2 has textures");
+        assertEquals(0L, profile2.getTextures().getTimestamp(), "cleared profile2 has textures timestamp");
+        assertFalse(profile2.getTextures().isSigned(), "cleared profile2 has signed textures");
     }
 
     @Test
     public void testClearTextures() {
         CraftPlayerProfile profile = PlayerProfileTest.buildPlayerProfile();
-        Assert.assertTrue("profile has no textures", !profile.getTextures().isEmpty());
+        assertFalse(profile.getTextures().isEmpty(), "profile has no textures");
 
         profile.getTextures().clear();
-        Assert.assertTrue("cleared profile has textures", profile.getTextures().isEmpty());
-        Assert.assertTrue("cleared profile has textures timestamp", profile.getTextures().getTimestamp() == 0L);
-        Assert.assertTrue("cleared profile has signed textures", !profile.getTextures().isSigned());
+        assertTrue(profile.getTextures().isEmpty(), "cleared profile has textures");
+        assertEquals(0L, profile.getTextures().getTimestamp(), "cleared profile has textures timestamp");
+        assertFalse(profile.getTextures().isSigned(), "cleared profile has signed textures");
     }
 
     @Test
     public void testCustomSkin() {
         CraftPlayerProfile profile = new CraftPlayerProfile(PlayerProfileTest.UNIQUE_ID, PlayerProfileTest.NAME);
         profile.getTextures().setSkin(SKIN);
-        Assert.assertEquals("profile with custom skin does not match expected value", COMPACT_VALUE, profile.getTextures().getProperty().getValue());
+        assertEquals(COMPACT_VALUE, profile.getTextures().getProperty().getValue(), "profile with custom skin does not match expected value");
     }
 
     @Test
@@ -210,35 +205,35 @@ public class PlayerProfileTest {
         CraftPlayerProfile profile5 = new CraftPlayerProfile(new GameProfile(PlayerProfileTest.UNIQUE_ID, null));
         CraftPlayerProfile profile6 = new CraftPlayerProfile(new GameProfile(null, PlayerProfileTest.NAME));
 
-        Assert.assertEquals("profile1 and profile2 are not equal", profile1, profile2);
-        Assert.assertEquals("profile3 and profile4 are not equal", profile3, profile4);
-        Assert.assertNotEquals("profile1 and profile3 are equal", profile1, profile3);
-        Assert.assertNotEquals("profile4 and profile5 are equal", profile4, profile5);
-        Assert.assertNotEquals("profile4 and profile6 are equal", profile4, profile6);
+        assertEquals(profile1, profile2, "profile1 and profile2 are not equal");
+        assertEquals(profile3, profile4, "profile3 and profile4 are not equal");
+        assertNotEquals(profile1, profile3, "profile1 and profile3 are equal");
+        assertNotEquals(profile4, profile5, "profile4 and profile5 are equal");
+        assertNotEquals(profile4, profile6, "profile4 and profile6 are equal");
     }
 
     @Test
     public void testTexturesEquals() {
         CraftPlayerProfile profile1 = PlayerProfileTest.buildPlayerProfile();
         CraftPlayerProfile profile2 = PlayerProfileTest.buildPlayerProfile();
-        Assert.assertEquals("Profile textures are not equal", profile1.getTextures(), profile2.getTextures());
+        assertEquals(profile1.getTextures(), profile2.getTextures(), "Profile textures are not equal");
 
         profile1.getTextures().setCape(null);
-        Assert.assertNotEquals("Modified profile textures are still equal", profile1.getTextures(), profile2.getTextures());
+        assertNotEquals(profile1.getTextures(), profile2.getTextures(), "Modified profile textures are still equal");
 
         profile2.getTextures().setCape(null);
-        Assert.assertEquals("Modified profile textures are not equal", profile1.getTextures(), profile2.getTextures());
+        assertEquals(profile1.getTextures(), profile2.getTextures(), "Modified profile textures are not equal");
     }
 
     @Test
     public void testClone() {
         PlayerProfile profile = PlayerProfileTest.buildPlayerProfile();
         PlayerProfile copy = profile.clone();
-        Assert.assertEquals("profile and copy are not equal", profile, copy);
+        assertEquals(profile, copy, "profile and copy are not equal");
 
         // New copies are independent (don't affect the original profile):
         copy.getTextures().setSkin(null);
-        Assert.assertEquals("copy is not independent", SKIN, profile.getTextures().getSkin());
+        assertEquals(SKIN, profile.getTextures().getSkin(), "copy is not independent");
     }
 
     @Test
@@ -254,7 +249,7 @@ public class PlayerProfileTest {
         configuration = new YamlConfiguration();
         configuration.loadFromString(saved);
 
-        Assert.assertTrue(configuration.contains("test"));
-        Assert.assertEquals("Profiles are not equal", playerProfile, configuration.get("test"));
+        assertTrue(configuration.contains("test"));
+        assertEquals(playerProfile, configuration.get("test"), "Profiles are not equal");
     }
 }
diff --git a/src/test/java/org/bukkit/craftbukkit/util/CraftChatMessageTest.java b/src/test/java/org/bukkit/craftbukkit/util/CraftChatMessageTest.java
index 7dc4c42252179b75e6b57dc762ffaca6b9ed93dd..8121d464844782f8c3f9b7cb65a69b4a0e036813 100644
--- a/src/test/java/org/bukkit/craftbukkit/util/CraftChatMessageTest.java
+++ b/src/test/java/org/bukkit/craftbukkit/util/CraftChatMessageTest.java
@@ -1,12 +1,12 @@
 package org.bukkit.craftbukkit.util;
 
-import static org.junit.Assert.*;
+import static org.junit.jupiter.api.Assertions.*;
 
 import net.minecraft.network.chat.Component;
 import net.minecraft.network.chat.ComponentContents;
 import net.minecraft.network.chat.MutableComponent;
 import net.minecraft.network.chat.contents.LiteralContents;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 public class CraftChatMessageTest {
 
@@ -36,7 +36,7 @@ public class CraftChatMessageTest {
 
         // dont retain line returns multiple components
         Component[] components = CraftChatMessage.fromString("HelloÂ§0\nÂ§rFoo\nÂ§5Test");
-        assertEquals("Has 3 components", 3, components.length);
+        assertEquals(3, components.length, "Has 3 components");
         assertEquals("HelloÂ§0", CraftChatMessage.fromComponent(components[0]));
         assertEquals(/*Â§r*/"Foo", CraftChatMessage.fromComponent(components[1]));
         assertEquals("Â§5Test", CraftChatMessage.fromComponent(components[2]));
@@ -86,14 +86,14 @@ public class CraftChatMessageTest {
     private void testString(String input, String expected, boolean keepNewLines) {
         Component cmp = CraftChatMessage.fromString(input, keepNewLines)[0];
         String actual = CraftChatMessage.fromComponent(cmp);
-        assertEquals("\nComponent: " + cmp + "\n", expected, actual);
+        assertEquals(expected, actual, "\nComponent: " + cmp + "\n");
     }
 
     private void testPlainString(String expected) {
         Component component = CraftChatMessage.fromString(expected, false, true)[0];
         String actual = CraftChatMessage.fromComponent(component);
-        assertEquals("fromComponent does not match input: " + component, expected, actual);
-        assertTrue("Non-plain component: " + component, !this.containsNonPlainComponent(component));
+        assertEquals(expected, actual, "fromComponent does not match input: " + component);
+        assertFalse(this.containsNonPlainComponent(component), "Non-plain component: " + component);
     }
 
     private boolean containsNonPlainComponent(Component component) {
@@ -107,10 +107,10 @@ public class CraftChatMessageTest {
 
     private void testComponent(String expected, Component cmp) {
         String actual = CraftChatMessage.fromComponent(cmp);
-        assertEquals("\nComponent: " + cmp + "\n", expected, actual);
+        assertEquals(expected, actual, "\nComponent: " + cmp + "\n");
 
         Component expectedCmp = CraftChatMessage.fromString(expected, true)[0];
         String actualExpectedCmp = CraftChatMessage.fromComponent(expectedCmp);
-        assertEquals("\nComponent: " + expectedCmp + "\n", expected, actualExpectedCmp);
+        assertEquals(expected, actualExpectedCmp, "\nComponent: " + expectedCmp + "\n");
     }
 }
diff --git a/src/test/java/org/bukkit/enchantments/EnchantmentTargetTest.java b/src/test/java/org/bukkit/enchantments/EnchantmentTargetTest.java
index 5d3b8ba99d0fe966b7329540d61825aa266c7e64..a9f883a5cdec7109d29355d7b9900b5b523c443c 100644
--- a/src/test/java/org/bukkit/enchantments/EnchantmentTargetTest.java
+++ b/src/test/java/org/bukkit/enchantments/EnchantmentTargetTest.java
@@ -6,8 +6,11 @@ import net.minecraft.world.item.enchantment.EnchantmentCategory;
 import org.bukkit.Material;
 import org.bukkit.craftbukkit.util.CraftMagicNumbers;
 import org.bukkit.support.AbstractTestingBase;
-import org.junit.Assert;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
+
+import static org.junit.jupiter.api.Assertions.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertNotNull;
+
 
 public class EnchantmentTargetTest extends AbstractTestingBase { // Paper
 
@@ -27,7 +30,7 @@ public class EnchantmentTargetTest extends AbstractTestingBase { // Paper
                     break;
             }
 
-            Assert.assertNotNull("No bukkit target for slot " + nmsSlot, bukkitTarget);
+            assertNotNull(bukkitTarget, "No bukkit target for slot " + nmsSlot);
 
             for (Item item : BuiltInRegistries.ITEM) {
                 Material material = CraftMagicNumbers.getMaterial(item);
@@ -35,7 +38,7 @@ public class EnchantmentTargetTest extends AbstractTestingBase { // Paper
                 boolean nms = nmsSlot.canEnchant(item);
                 boolean bukkit = bukkitTarget.includes(material);
 
-                Assert.assertEquals("Slot mismatch for " + bukkitTarget + " and " + material, nms, bukkit);
+                assertEquals(nms, bukkit, "Slot mismatch for " + bukkitTarget + " and " + material);
             }
         }
     }
diff --git a/src/test/java/org/bukkit/entity/BoatTest.java b/src/test/java/org/bukkit/entity/BoatTest.java
index 6c077700db539210559c1c433a15bf393688ac01..b68a350fd7ec13dae25d13829450f53ae7d1d433 100644
--- a/src/test/java/org/bukkit/entity/BoatTest.java
+++ b/src/test/java/org/bukkit/entity/BoatTest.java
@@ -2,11 +2,12 @@ package org.bukkit.entity;
 
 import net.minecraft.world.entity.vehicle.Boat;
 import org.bukkit.craftbukkit.entity.CraftBoat;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
+
 
 public class BoatTest {
 
-    @Test
+    @org.junit.jupiter.api.Test
     public void testTypes() {
         for (Boat.Type enumBoatType : Boat.Type.values()) {
             CraftBoat.boatTypeFromNms(enumBoatType);
diff --git a/src/test/java/org/bukkit/entity/EnderDragonPhaseTest.java b/src/test/java/org/bukkit/entity/EnderDragonPhaseTest.java
index 36134e133923c480a1d1a4567d6c140af95cb28e..5ffd6443eaea5f33bf98d4ef9748768991ef0df6 100644
--- a/src/test/java/org/bukkit/entity/EnderDragonPhaseTest.java
+++ b/src/test/java/org/bukkit/entity/EnderDragonPhaseTest.java
@@ -2,8 +2,11 @@ package org.bukkit.entity;
 
 import net.minecraft.world.entity.boss.enderdragon.phases.EnderDragonPhase;
 import org.bukkit.craftbukkit.entity.CraftEnderDragon;
-import org.junit.Assert;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
+
+import static org.junit.jupiter.api.Assertions.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertNotNull;
+
 
 public class EnderDragonPhaseTest {
 
@@ -11,38 +14,38 @@ public class EnderDragonPhaseTest {
     public void testNotNull() {
         for (EnderDragon.Phase phase : EnderDragon.Phase.values()) {
             EnderDragonPhase dragonControllerPhase = CraftEnderDragon.getMinecraftPhase(phase);
-            Assert.assertNotNull(phase.name(), dragonControllerPhase);
-            Assert.assertNotNull(phase.name(), CraftEnderDragon.getBukkitPhase(dragonControllerPhase));
+            assertNotNull(dragonControllerPhase, phase.name());
+            assertNotNull(CraftEnderDragon.getBukkitPhase(dragonControllerPhase), phase.name());
         }
     }
 
     @Test
     public void testBukkitToMinecraft() {
-        Assert.assertEquals("CIRCLING", CraftEnderDragon.getMinecraftPhase(EnderDragon.Phase.CIRCLING), EnderDragonPhase.HOLDING_PATTERN);
-        Assert.assertEquals("STRAFING", CraftEnderDragon.getMinecraftPhase(EnderDragon.Phase.STRAFING), EnderDragonPhase.STRAFE_PLAYER);
-        Assert.assertEquals("FLY_TO_PORTAL", CraftEnderDragon.getMinecraftPhase(EnderDragon.Phase.FLY_TO_PORTAL), EnderDragonPhase.LANDING_APPROACH);
-        Assert.assertEquals("LAND_ON_PORTAL", CraftEnderDragon.getMinecraftPhase(EnderDragon.Phase.LAND_ON_PORTAL), EnderDragonPhase.LANDING);
-        Assert.assertEquals("LEAVE_PORTAL", CraftEnderDragon.getMinecraftPhase(EnderDragon.Phase.LEAVE_PORTAL), EnderDragonPhase.TAKEOFF);
-        Assert.assertEquals("BREATH_ATTACK", CraftEnderDragon.getMinecraftPhase(EnderDragon.Phase.BREATH_ATTACK), EnderDragonPhase.SITTING_FLAMING);
-        Assert.assertEquals("SEARCH_FOR_BREATH_ATTACK_TARGET", CraftEnderDragon.getMinecraftPhase(EnderDragon.Phase.SEARCH_FOR_BREATH_ATTACK_TARGET), EnderDragonPhase.SITTING_SCANNING);
-        Assert.assertEquals("ROAR_BEFORE_ATTACK", CraftEnderDragon.getMinecraftPhase(EnderDragon.Phase.ROAR_BEFORE_ATTACK), EnderDragonPhase.SITTING_ATTACKING);
-        Assert.assertEquals("CHARGE_PLAYER", CraftEnderDragon.getMinecraftPhase(EnderDragon.Phase.CHARGE_PLAYER), EnderDragonPhase.CHARGING_PLAYER);
-        Assert.assertEquals("DYING", CraftEnderDragon.getMinecraftPhase(EnderDragon.Phase.DYING), EnderDragonPhase.DYING);
-        Assert.assertEquals("HOVER", CraftEnderDragon.getMinecraftPhase(EnderDragon.Phase.HOVER), EnderDragonPhase.HOVERING);
+        assertEquals(CraftEnderDragon.getMinecraftPhase(EnderDragon.Phase.CIRCLING), EnderDragonPhase.HOLDING_PATTERN, "CIRCLING");
+        assertEquals(CraftEnderDragon.getMinecraftPhase(EnderDragon.Phase.STRAFING), EnderDragonPhase.STRAFE_PLAYER, "STRAFING");
+        assertEquals(CraftEnderDragon.getMinecraftPhase(EnderDragon.Phase.FLY_TO_PORTAL), EnderDragonPhase.LANDING_APPROACH, "FLY_TO_PORTAL");
+        assertEquals(CraftEnderDragon.getMinecraftPhase(EnderDragon.Phase.LAND_ON_PORTAL), EnderDragonPhase.LANDING, "LAND_ON_PORTAL");
+        assertEquals(CraftEnderDragon.getMinecraftPhase(EnderDragon.Phase.LEAVE_PORTAL), EnderDragonPhase.TAKEOFF, "LEAVE_PORTAL");
+        assertEquals(CraftEnderDragon.getMinecraftPhase(EnderDragon.Phase.BREATH_ATTACK), EnderDragonPhase.SITTING_FLAMING, "BREATH_ATTACK");
+        assertEquals(CraftEnderDragon.getMinecraftPhase(EnderDragon.Phase.SEARCH_FOR_BREATH_ATTACK_TARGET), EnderDragonPhase.SITTING_SCANNING, "SEARCH_FOR_BREATH_ATTACK_TARGET");
+        assertEquals(CraftEnderDragon.getMinecraftPhase(EnderDragon.Phase.ROAR_BEFORE_ATTACK), EnderDragonPhase.SITTING_ATTACKING, "ROAR_BEFORE_ATTACK");
+        assertEquals(CraftEnderDragon.getMinecraftPhase(EnderDragon.Phase.CHARGE_PLAYER), EnderDragonPhase.CHARGING_PLAYER, "CHARGE_PLAYER");
+        assertEquals(CraftEnderDragon.getMinecraftPhase(EnderDragon.Phase.DYING), EnderDragonPhase.DYING, "DYING");
+        assertEquals(CraftEnderDragon.getMinecraftPhase(EnderDragon.Phase.HOVER), EnderDragonPhase.HOVERING, "HOVER");
     }
 
     @Test
     public void testMinecraftToBukkit() {
-        Assert.assertEquals("CIRCLING", CraftEnderDragon.getBukkitPhase(EnderDragonPhase.HOLDING_PATTERN), EnderDragon.Phase.CIRCLING);
-        Assert.assertEquals("STRAFING", CraftEnderDragon.getBukkitPhase(EnderDragonPhase.STRAFE_PLAYER), EnderDragon.Phase.STRAFING);
-        Assert.assertEquals("FLY_TO_PORTAL", CraftEnderDragon.getBukkitPhase(EnderDragonPhase.LANDING_APPROACH), EnderDragon.Phase.FLY_TO_PORTAL);
-        Assert.assertEquals("LAND_ON_PORTAL", CraftEnderDragon.getBukkitPhase(EnderDragonPhase.LANDING), EnderDragon.Phase.LAND_ON_PORTAL);
-        Assert.assertEquals("LEAVE_PORTAL", CraftEnderDragon.getBukkitPhase(EnderDragonPhase.TAKEOFF), EnderDragon.Phase.LEAVE_PORTAL);
-        Assert.assertEquals("BREATH_ATTACK", CraftEnderDragon.getBukkitPhase(EnderDragonPhase.SITTING_FLAMING), EnderDragon.Phase.BREATH_ATTACK);
-        Assert.assertEquals("SEARCH_FOR_BREATH_ATTACK_TARGET", CraftEnderDragon.getBukkitPhase(EnderDragonPhase.SITTING_SCANNING), EnderDragon.Phase.SEARCH_FOR_BREATH_ATTACK_TARGET);
-        Assert.assertEquals("ROAR_BEFORE_ATTACK", CraftEnderDragon.getBukkitPhase(EnderDragonPhase.SITTING_ATTACKING), EnderDragon.Phase.ROAR_BEFORE_ATTACK);
-        Assert.assertEquals("CHARGE_PLAYER", CraftEnderDragon.getBukkitPhase(EnderDragonPhase.CHARGING_PLAYER), EnderDragon.Phase.CHARGE_PLAYER);
-        Assert.assertEquals("DYING", CraftEnderDragon.getBukkitPhase(EnderDragonPhase.DYING), EnderDragon.Phase.DYING);
-        Assert.assertEquals("HOVER", CraftEnderDragon.getBukkitPhase(EnderDragonPhase.HOVERING), EnderDragon.Phase.HOVER);
+        assertEquals(CraftEnderDragon.getBukkitPhase(EnderDragonPhase.HOLDING_PATTERN), EnderDragon.Phase.CIRCLING, "CIRCLING");
+        assertEquals(CraftEnderDragon.getBukkitPhase(EnderDragonPhase.STRAFE_PLAYER), EnderDragon.Phase.STRAFING, "STRAFING");
+        assertEquals(CraftEnderDragon.getBukkitPhase(EnderDragonPhase.LANDING_APPROACH), EnderDragon.Phase.FLY_TO_PORTAL, "FLY_TO_PORTAL");
+        assertEquals(CraftEnderDragon.getBukkitPhase(EnderDragonPhase.LANDING), EnderDragon.Phase.LAND_ON_PORTAL, "LAND_ON_PORTAL");
+        assertEquals(CraftEnderDragon.getBukkitPhase(EnderDragonPhase.TAKEOFF), EnderDragon.Phase.LEAVE_PORTAL, "LEAVE_PORTAL");
+        assertEquals(CraftEnderDragon.getBukkitPhase(EnderDragonPhase.SITTING_FLAMING), EnderDragon.Phase.BREATH_ATTACK, "BREATH_ATTACK");
+        assertEquals(CraftEnderDragon.getBukkitPhase(EnderDragonPhase.SITTING_SCANNING), EnderDragon.Phase.SEARCH_FOR_BREATH_ATTACK_TARGET, "SEARCH_FOR_BREATH_ATTACK_TARGET");
+        assertEquals(CraftEnderDragon.getBukkitPhase(EnderDragonPhase.SITTING_ATTACKING), EnderDragon.Phase.ROAR_BEFORE_ATTACK, "ROAR_BEFORE_ATTACK");
+        assertEquals(CraftEnderDragon.getBukkitPhase(EnderDragonPhase.CHARGING_PLAYER), EnderDragon.Phase.CHARGE_PLAYER, "CHARGE_PLAYER");
+        assertEquals(CraftEnderDragon.getBukkitPhase(EnderDragonPhase.DYING), EnderDragon.Phase.DYING, "DYING");
+        assertEquals(CraftEnderDragon.getBukkitPhase(EnderDragonPhase.HOVERING), EnderDragon.Phase.HOVER, "HOVER");
     }
 }
diff --git a/src/test/java/org/bukkit/entity/EntityTypesTest.java b/src/test/java/org/bukkit/entity/EntityTypesTest.java
index b2efb294822c53768bde38e7a78c7b8f093481e9..2d77f71ef9b0aa0a5cacf96072cb0f5ffc842243 100644
--- a/src/test/java/org/bukkit/entity/EntityTypesTest.java
+++ b/src/test/java/org/bukkit/entity/EntityTypesTest.java
@@ -6,8 +6,11 @@ import java.util.stream.Collectors;
 import net.minecraft.core.registries.BuiltInRegistries;
 import net.minecraft.resources.ResourceLocation;
 import org.bukkit.support.AbstractTestingBase;
-import org.junit.Assert;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
+
+import static org.junit.jupiter.api.Assertions.assertNotNull;
+import static org.junit.jupiter.api.Assertions.assertTrue;
+
 
 public class EntityTypesTest extends AbstractTestingBase {
 
@@ -19,11 +22,11 @@ public class EntityTypesTest extends AbstractTestingBase {
             ResourceLocation key = net.minecraft.world.entity.EntityType.getKey(nms); // Paper - remap fix
 
             org.bukkit.entity.EntityType bukkit = org.bukkit.entity.EntityType.fromName(key.getPath());
-            Assert.assertNotNull("Missing nms->bukkit " + key, bukkit);
+            assertNotNull(bukkit, "Missing nms->bukkit " + key);
 
-            Assert.assertTrue("Duplicate entity nms->" + bukkit, allBukkit.remove(bukkit));
+            assertTrue(allBukkit.remove(bukkit), "Duplicate entity nms->" + bukkit);
         }
 
-        Assert.assertTrue("Unmapped bukkit entities " + allBukkit, allBukkit.isEmpty());
+        assertTrue(allBukkit.isEmpty(), "Unmapped bukkit entities " + allBukkit);
     }
 }
diff --git a/src/test/java/org/bukkit/entity/PandaGeneTest.java b/src/test/java/org/bukkit/entity/PandaGeneTest.java
index feee17192bca55a9cf1b2fc5b9609b888db77763..eb3ecfc0b1a0b75037e5904cc77faab019ec30c7 100644
--- a/src/test/java/org/bukkit/entity/PandaGeneTest.java
+++ b/src/test/java/org/bukkit/entity/PandaGeneTest.java
@@ -1,8 +1,11 @@
 package org.bukkit.entity;
 
 import org.bukkit.craftbukkit.entity.CraftPanda;
-import org.junit.Assert;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
+
+import static org.junit.jupiter.api.Assertions.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertNotNull;
+
 
 public class PandaGeneTest {
 
@@ -11,9 +14,9 @@ public class PandaGeneTest {
         for (Panda.Gene gene : Panda.Gene.values()) {
             net.minecraft.world.entity.animal.Panda.Gene nms = CraftPanda.toNms(gene); // Paper - remap fix
 
-            Assert.assertNotNull("NMS gene null for " + gene, nms);
-            Assert.assertEquals("Recessive status did not match " + gene, gene.isRecessive(), nms.isRecessive());
-            Assert.assertEquals("Gene did not convert back " + gene, gene, CraftPanda.fromNms(nms));
+            assertNotNull(nms, "NMS gene null for " + gene);
+            assertEquals(gene.isRecessive(), nms.isRecessive(), "Recessive status did not match " + gene);
+            assertEquals(gene, CraftPanda.fromNms(nms), "Gene did not convert back " + gene);
         }
     }
 
@@ -22,9 +25,9 @@ public class PandaGeneTest {
         for (net.minecraft.world.entity.animal.Panda.Gene gene : net.minecraft.world.entity.animal.Panda.Gene.values()) { // Paper - remap fix
             org.bukkit.entity.Panda.Gene bukkit = CraftPanda.fromNms(gene);
 
-            Assert.assertNotNull("Bukkit gene null for " + gene, bukkit);
-            Assert.assertEquals("Recessive status did not match " + gene, gene.isRecessive(), bukkit.isRecessive());
-            Assert.assertEquals("Gene did not convert back " + gene, gene, CraftPanda.toNms(bukkit));
+            assertNotNull(bukkit, "Bukkit gene null for " + gene);
+            assertEquals(gene.isRecessive(), bukkit.isRecessive(), "Recessive status did not match " + gene);
+            assertEquals(gene, CraftPanda.toNms(bukkit), "Gene did not convert back " + gene);
         }
     }
 }
diff --git a/src/test/java/org/bukkit/entity/SpawnCategoryTest.java b/src/test/java/org/bukkit/entity/SpawnCategoryTest.java
index 3f5387478d26a6f8084f8ffdd585119fd9114547..b940ff88a3aca679fcfee370fabc749958e4b16c 100644
--- a/src/test/java/org/bukkit/entity/SpawnCategoryTest.java
+++ b/src/test/java/org/bukkit/entity/SpawnCategoryTest.java
@@ -2,7 +2,8 @@ package org.bukkit.entity;
 
 import net.minecraft.world.entity.MobCategory;
 import org.bukkit.craftbukkit.util.CraftSpawnCategory;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
+
 
 public class SpawnCategoryTest {
 
diff --git a/src/test/java/org/bukkit/entity/TropicalFishTest.java b/src/test/java/org/bukkit/entity/TropicalFishTest.java
index 79c298345833538c778087f293e39bd5fe973f9e..78c2e1a28aa20751a7e772af25f55cb4986a5ca3 100644
--- a/src/test/java/org/bukkit/entity/TropicalFishTest.java
+++ b/src/test/java/org/bukkit/entity/TropicalFishTest.java
@@ -1,11 +1,12 @@
 package org.bukkit.entity;
 
+import static org.hamcrest.MatcherAssert.assertThat;
 import static org.hamcrest.Matchers.*;
-import static org.junit.Assert.*;
+import static org.junit.jupiter.api.Assertions.*;
 import org.bukkit.DyeColor;
 import org.bukkit.craftbukkit.entity.CraftTropicalFish;
 import org.bukkit.entity.TropicalFish.Pattern;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
 
 public class TropicalFishTest {
 
diff --git a/src/test/java/org/bukkit/entity/memory/CraftMemoryKeyTest.java b/src/test/java/org/bukkit/entity/memory/CraftMemoryKeyTest.java
index 4131128e6c5e1c2e96548b61e638b1faa07dd537..c7893522e43808b6264b56665435055dc5a34818 100644
--- a/src/test/java/org/bukkit/entity/memory/CraftMemoryKeyTest.java
+++ b/src/test/java/org/bukkit/entity/memory/CraftMemoryKeyTest.java
@@ -6,71 +6,73 @@ import net.minecraft.world.entity.ai.memory.MemoryModuleType;
 import org.bukkit.Location;
 import org.bukkit.craftbukkit.entity.memory.CraftMemoryKey;
 import org.bukkit.support.AbstractTestingBase;
-import org.junit.Assert;
-import org.junit.Ignore;
-import org.junit.Test;
+import org.junit.jupiter.api.Disabled;
+import org.junit.jupiter.api.Test;
+
+import static org.junit.jupiter.api.Assertions.*;
+
 
 public class CraftMemoryKeyTest extends AbstractTestingBase {
 
-    @Test
+    @org.junit.jupiter.api.Test
     public void shouldConvertBukkitHomeKeyToNMSRepresentation() {
         MemoryModuleType<GlobalPos> nmsHomeKey = CraftMemoryKey.fromMemoryKey(MemoryKey.HOME);
-        Assert.assertEquals("MemoryModuleType should be HOME", MemoryModuleType.HOME, nmsHomeKey);
+        assertEquals(MemoryModuleType.HOME, nmsHomeKey, "MemoryModuleType should be HOME");
     }
 
-    @Test
+    @org.junit.jupiter.api.Test
     public void shouldConvertBukkitJobSiteKeyToNMSRepresentation() {
         MemoryModuleType<GlobalPos> nmsHomeKey = CraftMemoryKey.fromMemoryKey(MemoryKey.JOB_SITE);
-        Assert.assertEquals("MemoryModuleType should be JOB_SITE", MemoryModuleType.JOB_SITE, nmsHomeKey);
+        assertEquals(MemoryModuleType.JOB_SITE, nmsHomeKey, "MemoryModuleType should be JOB_SITE");
     }
 
-    @Test
+    @org.junit.jupiter.api.Test
     public void shouldConvertBukkitMeetingPointKeyToNMSRepresentation() {
         MemoryModuleType<GlobalPos> nmsHomeKey = CraftMemoryKey.fromMemoryKey(MemoryKey.MEETING_POINT);
-        Assert.assertEquals("MemoryModuleType should be MEETING_POINT", MemoryModuleType.MEETING_POINT, nmsHomeKey);
+        assertEquals(MemoryModuleType.MEETING_POINT, nmsHomeKey, "MemoryModuleType should be MEETING_POINT");
     }
 
-    @Test
+    @org.junit.jupiter.api.Test
     public void shouldConvertNMSHomeKeyToBukkitRepresentation() {
         MemoryKey<Location> bukkitHomeKey = CraftMemoryKey.toMemoryKey(MemoryModuleType.HOME);
-        Assert.assertEquals("MemoryModuleType should be HOME", MemoryKey.HOME, bukkitHomeKey);
+        assertEquals(MemoryKey.HOME, bukkitHomeKey, "MemoryModuleType should be HOME");
     }
 
-    @Test
+    @org.junit.jupiter.api.Test
     public void shouldConvertNMSJobSiteKeyToBukkitRepresentation() {
         MemoryKey<Location> bukkitJobSiteKey = CraftMemoryKey.toMemoryKey(MemoryModuleType.JOB_SITE);
-        Assert.assertEquals("MemoryKey should be JOB_SITE", MemoryKey.JOB_SITE, bukkitJobSiteKey);
+        assertEquals(MemoryKey.JOB_SITE, bukkitJobSiteKey, "MemoryKey should be JOB_SITE");
     }
 
-    @Test
+    @org.junit.jupiter.api.Test
     public void shouldConvertNMSMeetingPointKeyToBukkitRepresentation() {
         MemoryKey<Location> bukkitHomeKey = CraftMemoryKey.toMemoryKey(MemoryModuleType.MEETING_POINT);
-        Assert.assertEquals("MemoryKey should be MEETING_POINT", MemoryKey.MEETING_POINT, bukkitHomeKey);
+        assertEquals(MemoryKey.MEETING_POINT, bukkitHomeKey, "MemoryKey should be MEETING_POINT");
     }
 
     @Test
     public void shouldReturnNullWhenBukkitRepresentationOfKeyisNotAvailable() {
         MemoryKey bukkitNoKey = CraftMemoryKey.toMemoryKey(MemoryModuleType.NEAREST_LIVING_ENTITIES);
-        Assert.assertNull("MemoryModuleType should be null", bukkitNoKey);
+        assertNull(bukkitNoKey, "MemoryModuleType should be null");
     }
 
-    @Test
+    @org.junit.jupiter.api.Test
     public void shouldReturnNullWhenBukkitRepresentationOfKeyisNotAvailableAndSerializerIsNotPresent() {
         for (MemoryModuleType<?> memoryModuleType : BuiltInRegistries.MEMORY_MODULE_TYPE) {
             if (!memoryModuleType.getCodec().isPresent()) {
                 MemoryKey bukkitNoKey = CraftMemoryKey.toMemoryKey(memoryModuleType);
-                Assert.assertNull("MemoryModuleType should be null", bukkitNoKey);
+                assertNull(bukkitNoKey, "MemoryModuleType should be null");
             }
         }
     }
 
-    @Test
-    @Ignore("Unit type not yet implemented")
+    @org.junit.jupiter.api.Test
+    @Disabled("Unit type not yet implemented")
     public void shouldReturnAnInstanceOfMemoryKeyWhenBukkitRepresentationOfKeyisAvailableAndSerializerIsPresent() {
         for (MemoryModuleType<?> memoryModuleType : BuiltInRegistries.MEMORY_MODULE_TYPE) {
             if (memoryModuleType.getCodec().isPresent()) {
                 MemoryKey bukkitNoKey = CraftMemoryKey.toMemoryKey(memoryModuleType);
-                Assert.assertNotNull("MemoryModuleType should not be null " + BuiltInRegistries.MEMORY_MODULE_TYPE.getKey(memoryModuleType), bukkitNoKey);
+                assertNotNull(bukkitNoKey, "MemoryModuleType should not be null " + BuiltInRegistries.MEMORY_MODULE_TYPE.getKey(memoryModuleType));
             }
         }
     }
diff --git a/src/test/java/org/bukkit/generator/structure/StructureTest.java b/src/test/java/org/bukkit/generator/structure/StructureTest.java
index fedee1c9025129862fa00e84c2f4d1a2feb561f4..b3a9a1898c04e55289ee10a9e74e197d7be8db1f 100644
--- a/src/test/java/org/bukkit/generator/structure/StructureTest.java
+++ b/src/test/java/org/bukkit/generator/structure/StructureTest.java
@@ -3,13 +3,17 @@ package org.bukkit.generator.structure;
 import java.lang.reflect.Field;
 import java.lang.reflect.Modifier;
 import net.minecraft.core.registries.Registries;
+import java.util.Objects;
+
 import net.minecraft.resources.ResourceLocation;
 import org.bukkit.NamespacedKey;
 import org.bukkit.Registry;
 import org.bukkit.craftbukkit.util.CraftNamespacedKey;
 import org.bukkit.support.AbstractTestingBase;
-import org.junit.Assert;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
+
+import static org.junit.jupiter.api.Assertions.*;
+
 
 public class StructureTest extends AbstractTestingBase {
 
@@ -24,11 +28,12 @@ public class StructureTest extends AbstractTestingBase {
             }
 
             String name = field.getName();
-            Assert.assertNotNull("No structure for field name " + name, Registry.STRUCTURE.get(NamespacedKey.fromString(name.toLowerCase())));
+            assert Registry.STRUCTURE != null;
+            assertNotNull(Registry.STRUCTURE.get(Objects.requireNonNull(NamespacedKey.fromString(name.toLowerCase()))), "No structure for field name " + name);
         }
     }
 
-    @Test
+    @org.junit.jupiter.api.Test
     public void testMinecraftToBukkitFieldName() {
         net.minecraft.core.Registry<net.minecraft.world.level.levelgen.structure.Structure> structureBuiltInRegistries = AbstractTestingBase.REGISTRY_CUSTOM.registryOrThrow(Registries.STRUCTURE);
         for (net.minecraft.world.level.levelgen.structure.Structure structure : structureBuiltInRegistries) {
@@ -37,13 +42,13 @@ public class StructureTest extends AbstractTestingBase {
             try {
                 Structure bukkit = (Structure) Structure.class.getField(minecraftKey.getPath().toUpperCase()).get(null);
 
-                Assert.assertEquals("Keys are not the same for " + minecraftKey, minecraftKey, CraftNamespacedKey.toMinecraft(bukkit.getKey()));
+                assertEquals(minecraftKey, CraftNamespacedKey.toMinecraft(bukkit.getKey()), "Keys are not the same for " + minecraftKey);
             } catch (NoSuchFieldException e) {
-                Assert.fail("No Bukkit default structure for " + minecraftKey);
+                fail("No Bukkit default structure for " + minecraftKey);
             } catch (IllegalAccessException e) {
-                Assert.fail("Bukkit field is not access able for " + minecraftKey);
+                fail("Bukkit field is not access able for " + minecraftKey);
             } catch (ClassCastException e) {
-                Assert.fail("Bukkit field is not of type structure for" + minecraftKey);
+                fail("Bukkit field is not of type structure for" + minecraftKey);
             }
         }
     }
diff --git a/src/test/java/org/bukkit/generator/structure/StructureTypeTest.java b/src/test/java/org/bukkit/generator/structure/StructureTypeTest.java
index b5b7e598d7a36e0fa884e0b66bc194859de5caad..ae56dd4a8d85acc52e00e8f9efc6ba79e3e2c6ce 100644
--- a/src/test/java/org/bukkit/generator/structure/StructureTypeTest.java
+++ b/src/test/java/org/bukkit/generator/structure/StructureTypeTest.java
@@ -2,14 +2,18 @@ package org.bukkit.generator.structure;
 
 import java.lang.reflect.Field;
 import java.lang.reflect.Modifier;
+import java.util.Objects;
+
 import net.minecraft.core.registries.BuiltInRegistries;
 import net.minecraft.resources.ResourceLocation;
 import org.bukkit.NamespacedKey;
 import org.bukkit.Registry;
 import org.bukkit.craftbukkit.util.CraftNamespacedKey;
 import org.bukkit.support.AbstractTestingBase;
-import org.junit.Assert;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
+
+import static org.junit.jupiter.api.Assertions.*;
+
 
 public class StructureTypeTest extends AbstractTestingBase {
 
@@ -24,7 +28,8 @@ public class StructureTypeTest extends AbstractTestingBase {
             }
 
             String name = field.getName();
-            Assert.assertNotNull("No structure type for field name " + name, Registry.STRUCTURE_TYPE.get(NamespacedKey.fromString(name.toLowerCase())));
+            assert Registry.STRUCTURE_TYPE != null;
+            assertNotNull(Registry.STRUCTURE_TYPE.get(Objects.requireNonNull(NamespacedKey.fromString(name.toLowerCase()))), "No structure type for field name " + name);
         }
     }
 
@@ -34,15 +39,16 @@ public class StructureTypeTest extends AbstractTestingBase {
             ResourceLocation minecraftKey = BuiltInRegistries.STRUCTURE_TYPE.getKey(structureType);
 
             try {
+                assert minecraftKey != null;
                 StructureType bukkit = (StructureType) StructureType.class.getField(minecraftKey.getPath().toUpperCase()).get(null);
 
-                Assert.assertEquals("Keys are not the same for " + minecraftKey, minecraftKey, CraftNamespacedKey.toMinecraft(bukkit.getKey()));
+                assertEquals(minecraftKey, CraftNamespacedKey.toMinecraft(bukkit.getKey()), "Keys are not the same for " + minecraftKey);
             } catch (NoSuchFieldException e) {
-                Assert.fail("No Bukkit default structure type for " + minecraftKey);
+                fail("No Bukkit default structure type for " + minecraftKey);
             } catch (IllegalAccessException e) {
-                Assert.fail("Bukkit field is not access able for " + minecraftKey);
+                fail("Bukkit field is not access able for " + minecraftKey);
             } catch (ClassCastException e) {
-                Assert.fail("Bukkit field is not of type structure type for" + minecraftKey);
+                fail("Bukkit field is not of type structure type for" + minecraftKey);
             }
         }
     }
diff --git a/src/test/java/org/bukkit/map/MapTest.java b/src/test/java/org/bukkit/map/MapTest.java
index 32133dc1065772c5160678b04159e94ec3c374d7..4b8904b00eeaa8b6948849e0e28ff4e9e935cc99 100644
--- a/src/test/java/org/bukkit/map/MapTest.java
+++ b/src/test/java/org/bukkit/map/MapTest.java
@@ -6,9 +6,12 @@ import java.util.logging.Level;
 import java.util.logging.Logger;
 import net.minecraft.world.level.material.MaterialColor;
 import org.bukkit.craftbukkit.map.CraftMapColorCache;
-import org.junit.Assert;
-import org.junit.Ignore;
-import org.junit.Test;
+import org.junit.jupiter.api.Disabled;
+import org.junit.jupiter.api.Test;
+
+import static org.junit.jupiter.api.Assertions.assertEquals;
+import static org.junit.jupiter.api.Assertions.assertFalse;
+
 
 public class MapTest {
 
@@ -59,10 +62,10 @@ public class MapTest {
                 }
             }
         }
-        Assert.assertFalse(fail);
+        assertFalse(fail);
     }
 
-    @Ignore("Test takes around 25 seconds, should be run by changes to the map color conversion")
+    @Disabled("Test takes around 25 seconds, should be run by changes to the map color conversion")
     @Test
     public void testMapColorCacheBuilding() throws ExecutionException, InterruptedException {
         CraftMapColorCache craftMapColorCache = new CraftMapColorCache(MapTest.logger);
@@ -72,7 +75,7 @@ public class MapTest {
             for (int g = 0; g < 256; g++) {
                 for (int b = 0; b < 256; b++) {
                     Color color = new Color(r, g, b);
-                    Assert.assertEquals(String.format("Incorrect matched color c(%s, %s, %s)", color.getRed(), color.getGreen(), color.getBlue()), MapPalette.matchColor(color), craftMapColorCache.matchColor(color));
+                    assertEquals(MapPalette.matchColor(color), craftMapColorCache.matchColor(color), String.format("Incorrect matched color c(%s, %s, %s)", color.getRed(), color.getGreen(), color.getBlue()));
                 }
             }
         }
diff --git a/src/test/java/org/bukkit/potion/PotionTest.java b/src/test/java/org/bukkit/potion/PotionTest.java
index 83226ec2fa977819e12a499eb3765232543c17b3..b75af7d08c1aac850193e675a24a2f2d40a7c1a9 100644
--- a/src/test/java/org/bukkit/potion/PotionTest.java
+++ b/src/test/java/org/bukkit/potion/PotionTest.java
@@ -1,6 +1,6 @@
 package org.bukkit.potion;
 
-import static org.junit.Assert.*;
+import static org.junit.jupiter.api.Assertions.*;
 import java.util.EnumMap;
 import java.util.List;
 import java.util.Map;
@@ -10,7 +10,8 @@ import net.minecraft.world.effect.MobEffect;
 import net.minecraft.world.effect.MobEffectInstance;
 import net.minecraft.world.item.alchemy.Potion;
 import org.bukkit.support.AbstractTestingBase;
-import org.junit.Test;
+import org.junit.jupiter.api.Test;
+
 
 public class PotionTest extends AbstractTestingBase {
     @Test
@@ -21,10 +22,10 @@ public class PotionTest extends AbstractTestingBase {
             if (eff.size() != 1) continue;
             int id = MobEffect.getId(eff.get(0).getEffect());
             PotionEffectType type = PotionEffectType.getById(id);
-            assertNotNull(String.valueOf(id), PotionEffectType.getById(id));
+            assertNotNull(PotionEffectType.getById(id), String.valueOf(id));
 
             PotionType enumType = PotionType.getByEffect(type);
-            assertNotNull(type.getName(), enumType);
+            assertNotNull(enumType, type.getName());
 
             effects.put(enumType, enumType.name());
         }
@@ -32,7 +33,7 @@ public class PotionTest extends AbstractTestingBase {
         assertEquals(effects.entrySet().size(), PotionType.values().length - /* PotionTypes with no/shared Effects */ 6);
     }
 
-    @Test
+    @org.junit.jupiter.api.Test
     public void testEffectType() {
         for (MobEffect nms : BuiltInRegistries.MOB_EFFECT) {
             ResourceLocation key = BuiltInRegistries.MOB_EFFECT.getKey(nms);
@@ -40,11 +41,11 @@ public class PotionTest extends AbstractTestingBase {
             int id = MobEffect.getId(nms);
             PotionEffectType bukkit = PotionEffectType.getById(id);
 
-            assertNotNull("No Bukkit type for " + key, bukkit);
-            assertFalse("No name for " + key, bukkit.getName().contains("UNKNOWN"));
+            assertNotNull(bukkit, "No Bukkit type for " + key);
+            assertFalse(bukkit.getName().contains("UNKNOWN"), "No name for " + key);
 
             PotionEffectType byName = PotionEffectType.getByName(bukkit.getName());
-            assertEquals("Same type not returned by name " + key, bukkit, byName);
+            assertEquals(bukkit, byName, "Same type not returned by name " + key);
         }
     }
 }
diff --git a/src/test/java/org/bukkit/support/AbstractTestingBase.java b/src/test/java/org/bukkit/support/AbstractTestingBase.java
index 084c48ffabac2cd753609add745203e8a55bc09e..91b0507cb8a59c3c81a7e74ab16dfc3169236cb6 100644
--- a/src/test/java/org/bukkit/support/AbstractTestingBase.java
+++ b/src/test/java/org/bukkit/support/AbstractTestingBase.java
@@ -22,7 +22,9 @@ import net.minecraft.world.flag.FeatureFlags;
 import net.minecraft.world.level.biome.Biome;
 import org.bukkit.Material;
 import org.bukkit.craftbukkit.util.CraftMagicNumbers;
-import org.junit.Assert;
+
+import static org.junit.jupiter.api.Assertions.assertEquals;
+
 
 /**
  *  If you are getting: java.lang.ExceptionInInitializerError
@@ -76,6 +78,6 @@ public abstract class AbstractTestingBase {
             }
         }
         INVALIDATED_MATERIALS = builder.build();
-        Assert.assertEquals("Expected 604 invalidated materials (got " + INVALIDATED_MATERIALS.size() + ")", 604, INVALIDATED_MATERIALS.size());
+        assertEquals(604, INVALIDATED_MATERIALS.size(), "Expected 592 invalidated materials (got " + INVALIDATED_MATERIALS.size() + ")");
     }
 }
