From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: camdenorrb <me@12oclock.dev>
Date: Sat, 22 Oct 2022 02:19:57 -0500
Subject: [PATCH] Use nullable and notnull annotations


diff --git a/src/main/java/alternate/current/wire/LevelHelper.java b/src/main/java/alternate/current/wire/LevelHelper.java
index f55c5c67b8461e9ef5614ea1a37f6e2866f39be3..24d68d725d29602609c4984ae7d5f553274d1b0c 100644
--- a/src/main/java/alternate/current/wire/LevelHelper.java
+++ b/src/main/java/alternate/current/wire/LevelHelper.java
@@ -9,10 +9,12 @@ import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.world.level.chunk.ChunkAccess;
 import net.minecraft.world.level.chunk.ChunkStatus;
 import net.minecraft.world.level.chunk.LevelChunkSection;
+import org.jetbrains.annotations.NotNull;
+
 
 public class LevelHelper {
 
-    static int doRedstoneEvent(ServerLevel level, BlockPos pos, int prevPower, int newPower) {
+    static int doRedstoneEvent(@NotNull ServerLevel level, @NotNull BlockPos pos, int prevPower, int newPower) {
         BlockRedstoneEvent event = new BlockRedstoneEvent(level.getWorld().getBlockAt(pos.getX(), pos.getY(), pos.getZ()), prevPower, newPower);
         level.getCraftServer().getPluginManager().callEvent(event);
 
@@ -25,7 +27,7 @@ public class LevelHelper {
      * states, lighting checks, height map updates, and block entity updates are
      * omitted.
      */
-    static boolean setWireState(ServerLevel level, BlockPos pos, BlockState state, boolean updateNeighborShapes) {
+    static boolean setWireState(@NotNull ServerLevel level, @NotNull BlockPos pos, @NotNull BlockState state, boolean updateNeighborShapes) {
         int y = pos.getY();
 
         if (y < level.getMinBuildHeight() || y >= level.getMaxBuildHeight()) {
diff --git a/src/main/java/alternate/current/wire/Node.java b/src/main/java/alternate/current/wire/Node.java
index 8af6c69098e64945361d116b5fd6ac21e97fcd8d..d23631b8dd7701fa9184e934e0058516863088d8 100644
--- a/src/main/java/alternate/current/wire/Node.java
+++ b/src/main/java/alternate/current/wire/Node.java
@@ -8,6 +8,9 @@ import net.minecraft.core.BlockPos;
 import net.minecraft.server.level.ServerLevel;
 import net.minecraft.world.level.block.Blocks;
 import net.minecraft.world.level.block.state.BlockState;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 /**
  * A Node represents a block in the world. It also holds a few other pieces of
@@ -22,7 +25,7 @@ public class Node {
     private static final int SOURCE    = 0b10;
 
     final ServerLevel level;
-    final Node[] neighbors;
+    final Node @NotNull [] neighbors;
 
     BlockPos pos;
     BlockState state;
@@ -31,9 +34,9 @@ public class Node {
     private int flags;
 
     /** The previous node in the priority queue. */
-    Node prev_node;
+    @Nullable Node prev_node;
     /** The next node in the priority queue. */
-    Node next_node;
+    @Nullable Node next_node;
     /** The priority with which this node was queued. */
     int priority;
     /** The wire that queued this node for an update. */
@@ -63,7 +66,7 @@ public class Node {
         return pos.hashCode();
     }
 
-    Node set(BlockPos pos, BlockState state, boolean clearNeighbors) {
+    Node set(@NotNull BlockPos pos, @NotNull BlockState state, boolean clearNeighbors) {
         if (state.is(Blocks.REDSTONE_WIRE)) {
             throw new IllegalStateException("Cannot update a regular Node to a WireNode!");
         }
diff --git a/src/main/java/alternate/current/wire/PriorityQueue.java b/src/main/java/alternate/current/wire/PriorityQueue.java
index d71b4d0e4c44a2620b41b89475412db53bea20ed..6f96df81274109777e2e7679adef9ec5fc0fd002 100644
--- a/src/main/java/alternate/current/wire/PriorityQueue.java
+++ b/src/main/java/alternate/current/wire/PriorityQueue.java
@@ -5,16 +5,19 @@ import java.util.Arrays;
 import java.util.Iterator;
 
 import net.minecraft.world.level.redstone.Redstone;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 public class PriorityQueue extends AbstractQueue<Node> {
 
     private static final int OFFSET = -Redstone.SIGNAL_MIN;
 
     /** The last node for each priority value. */
-    private final Node[] tails;
+    private final Node @NotNull [] tails;
 
-    private Node head;
-    private Node tail;
+    private @Nullable Node head;
+    private @Nullable Node tail;
 
     private int size;
 
@@ -23,7 +26,7 @@ public class PriorityQueue extends AbstractQueue<Node> {
     }
 
     @Override
-    public boolean offer(Node node) {
+    public boolean offer(@Nullable Node node) {
         if (node == null) {
             throw new NullPointerException();
         }
@@ -46,7 +49,7 @@ public class PriorityQueue extends AbstractQueue<Node> {
     }
 
     @Override
-    public Node poll() {
+    public @Nullable Node poll() {
         if (head == null) {
             return null;
         }
@@ -98,7 +101,7 @@ public class PriorityQueue extends AbstractQueue<Node> {
     }
 
     @Override
-    public Iterator<Node> iterator() {
+    public @NotNull Iterator<Node> iterator() {
         throw new UnsupportedOperationException();
     }
 
@@ -107,16 +110,16 @@ public class PriorityQueue extends AbstractQueue<Node> {
         return size;
     }
 
-    public boolean contains(Node node) {
+    public boolean contains(@NotNull Node node) {
         return node == head || node.prev_node != null;
     }
 
-    private void move(Node node, int priority) {
+    private void move(@NotNull Node node, int priority) {
         remove(node);
         insert(node, priority);
     }
 
-    private void remove(Node node) {
+    private void remove(@NotNull Node node) {
         Node prev = node.prev_node;
         Node next = node.next_node;
 
@@ -148,7 +151,7 @@ public class PriorityQueue extends AbstractQueue<Node> {
         size--;
     }
 
-    private void insert(Node node, int priority) {
+    private void insert(@NotNull Node node, int priority) {
         node.priority = priority;
 
         // nodes are sorted by priority (highest to lowest)
@@ -171,23 +174,23 @@ public class PriorityQueue extends AbstractQueue<Node> {
         size++;
     }
 
-    private void linkHead(Node node) {
+    private void linkHead(@NotNull Node node) {
         node.next_node = head;
         head.prev_node = node;
         head = node;
     }
 
-    private void linkTail(Node node) {
+    private void linkTail(@NotNull Node node) {
         tail.next_node = node;
         node.prev_node = tail;
         tail = node;
     }
 
-    private void linkAfter(Node prev, Node node) {
+    private void linkAfter(@NotNull Node prev, @NotNull Node node) {
         linkBetween(prev, node, prev.next_node);
     }
 
-    private void linkBetween(Node prev, Node node, Node next) {
+    private void linkBetween(@NotNull Node prev, @NotNull Node node, @NotNull Node next) {
         prev.next_node = node;
         node.prev_node = prev;
 
@@ -195,7 +198,7 @@ public class PriorityQueue extends AbstractQueue<Node> {
         next.prev_node = node;
     }
 
-    private Node findPrev(Node node) {
+    private @Nullable Node findPrev(@NotNull Node node) {
         Node prev = null;
 
         for (int i = node.priority + OFFSET; i < tails.length; i++) {
diff --git a/src/main/java/alternate/current/wire/SimpleQueue.java b/src/main/java/alternate/current/wire/SimpleQueue.java
index 2b30074252551e1dc55d5be17d26fb4a2d8eb2e4..dedffef793c983d31b77416a8458f82f7e77b637 100644
--- a/src/main/java/alternate/current/wire/SimpleQueue.java
+++ b/src/main/java/alternate/current/wire/SimpleQueue.java
@@ -1,12 +1,15 @@
 package alternate.current.wire;
 
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 import java.util.AbstractQueue;
 import java.util.Iterator;
 
 public class SimpleQueue extends AbstractQueue<WireNode> {
 
-    private WireNode head;
-    private WireNode tail;
+    private @Nullable WireNode head;
+    private @Nullable WireNode tail;
 
     private int size;
 
@@ -15,7 +18,7 @@ public class SimpleQueue extends AbstractQueue<WireNode> {
     }
 
     @Override
-    public boolean offer(WireNode node) {
+    public boolean offer(@Nullable WireNode node) {
         if (node == null) {
             throw new NullPointerException();
         }
@@ -33,7 +36,7 @@ public class SimpleQueue extends AbstractQueue<WireNode> {
     }
 
     @Override
-    public WireNode poll() {
+    public @Nullable WireNode poll() {
         if (head == null) {
             return null;
         }
@@ -74,7 +77,7 @@ public class SimpleQueue extends AbstractQueue<WireNode> {
     }
 
     @Override
-    public Iterator<WireNode> iterator() {
+    public @NotNull Iterator<WireNode> iterator() {
         return new SimpleIterator();
     }
 
@@ -102,7 +105,7 @@ public class SimpleQueue extends AbstractQueue<WireNode> {
         }
 
         @Override
-        public WireNode next() {
+        public @NotNull WireNode next() {
             curr = next;
             next = curr.next_wire;
 
diff --git a/src/main/java/alternate/current/wire/WireConnectionManager.java b/src/main/java/alternate/current/wire/WireConnectionManager.java
index 5a7209f05b549c222f6c9bc2af2a35790964947e..9888a91d0b95dc65de2f0b30c57655d202eadd56 100644
--- a/src/main/java/alternate/current/wire/WireConnectionManager.java
+++ b/src/main/java/alternate/current/wire/WireConnectionManager.java
@@ -5,6 +5,9 @@ import java.util.function.Consumer;
 
 import alternate.current.wire.WireHandler.Directions;
 import alternate.current.wire.WireHandler.NodeProvider;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 public class WireConnectionManager {
 
@@ -12,10 +15,10 @@ public class WireConnectionManager {
     final WireNode owner;
 
     /** The first connection for each cardinal direction. */
-    private final WireConnection[] heads;
+    private final WireConnection @NotNull [] heads;
 
-    private WireConnection head;
-    private WireConnection tail;
+    private @Nullable WireConnection head;
+    private @Nullable WireConnection tail;
 
     /** The total number of connections. */
     int total;
@@ -39,7 +42,7 @@ public class WireConnectionManager {
         this.iFlowDir = -1;
     }
 
-    void set(NodeProvider nodes) {
+    void set(@NotNull NodeProvider nodes) {
         if (total > 0) {
             clear();
         }
@@ -95,7 +98,7 @@ public class WireConnectionManager {
         add(new WireConnection(wire, iDir, offer, accept));
     }
 
-    private void add(WireConnection connection) {
+    private void add(@NotNull WireConnection connection) {
         if (head == null) {
             head = connection;
             tail = connection;
@@ -116,7 +119,7 @@ public class WireConnectionManager {
      * Iterate over all connections. Use this method if the iteration order is not
      * important.
      */
-    void forEach(Consumer<WireConnection> consumer) {
+    void forEach(@NotNull Consumer<WireConnection> consumer) {
         for (WireConnection c = head; c != null; c = c.next) {
             consumer.accept(c);
         }
@@ -126,7 +129,7 @@ public class WireConnectionManager {
      * Iterate over all connections. Use this method if the iteration order is
      * important.
      */
-    void forEach(Consumer<WireConnection> consumer, int iFlowDir) {
+    void forEach(@NotNull Consumer<WireConnection> consumer, int iFlowDir) {
         for (int iDir : WireHandler.CARDINAL_UPDATE_ORDERS[iFlowDir]) {
             for (WireConnection c = heads[iDir]; c != null && c.iDir == iDir; c = c.next) {
                 consumer.accept(c);
diff --git a/src/main/java/alternate/current/wire/WireHandler.java b/src/main/java/alternate/current/wire/WireHandler.java
index 35d9017c21ce77290d8e86cceb0676666e6e0eff..1e306b872ad28be1c6fc5110a55786f47284a3c3 100644
--- a/src/main/java/alternate/current/wire/WireHandler.java
+++ b/src/main/java/alternate/current/wire/WireHandler.java
@@ -16,6 +16,8 @@ import net.minecraft.world.level.block.Block;
 import net.minecraft.world.level.block.Blocks;
 import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.world.level.redstone.Redstone;
+import org.jetbrains.annotations.NotNull;
+
 
 /**
  * This class handles power changes for redstone wire. The algorithm was
@@ -270,11 +272,11 @@ public class WireHandler {
     private final ServerLevel level;
 
     /** Map of wires and neighboring blocks. */
-    private final Long2ObjectMap<Node> nodes;
+    private final @NotNull Long2ObjectMap<Node> nodes;
     /** Queue for the breadth-first search through the network. */
-    private final Queue<WireNode> search;
+    private final @NotNull Queue<WireNode> search;
     /** Queue of updates to wires and neighboring blocks. */
-    private final Queue<Node> updates;
+    private final @NotNull Queue<Node> updates;
 
     // Rather than creating new nodes every time a network is updated we keep
     // a cache of nodes that can be re-used.
@@ -299,7 +301,7 @@ public class WireHandler {
      * Retrieve the {@link alternate.current.wire.Node Node} that represents the
      * block at the given position in the level.
      */
-    private Node getOrAddNode(BlockPos pos) {
+    private Node getOrAddNode(@NotNull BlockPos pos) {
         return nodes.compute(pos.asLong(), (key, node) -> {
             if (node == null) {
                 // If there is not yet a node at this position, retrieve and
@@ -318,7 +320,7 @@ public class WireHandler {
      * Remove and return the {@link alternate.current.wire.Node Node} at the given
      * position.
      */
-    private Node removeNode(BlockPos pos) {
+    private Node removeNode(@NotNull BlockPos pos) {
         return nodes.remove(pos.asLong());
     }
 
@@ -326,7 +328,7 @@ public class WireHandler {
      * Return a {@link alternate.current.wire.Node Node} that represents the block
      * at the given position.
      */
-    private Node getNextNode(BlockPos pos) {
+    private Node getNextNode(@NotNull BlockPos pos) {
         return getNextNode(pos, level.getBlockState(pos));
     }
 
@@ -336,7 +338,7 @@ public class WireHandler {
      * Otherwise, grab the next {@link alternate.current.wire.Node Node} from the
      * cache and update it.
      */
-    private Node getNextNode(BlockPos pos, BlockState state) {
+    private Node getNextNode(@NotNull BlockPos pos, @NotNull BlockState state) {
         return state.is(Blocks.REDSTONE_WIRE) ? new WireNode(level, pos, state) : getNextNode().set(pos, state, true);
     }
 
@@ -375,7 +377,7 @@ public class WireHandler {
      * not, or vice versa, a new node must be created/grabbed from the cache.
      * Otherwise, the node can be quickly revalidated with the new block state.
      */
-    private Node revalidateNode(Node node) {
+    private Node revalidateNode(@NotNull Node node) {
         BlockPos pos = node.pos;
         BlockState state = level.getBlockState(pos);
 
@@ -408,7 +410,7 @@ public class WireHandler {
      * between the two nodes if they are not yet linked. This link makes accessing
      * neighbors of a node signficantly faster.
      */
-    private Node getNeighbor(Node node, int iDir) {
+    private Node getNeighbor(@NotNull Node node, int iDir) {
         Node neighbor = node.neighbors[iDir];
 
         if (neighbor == null || neighbor.invalid) {
@@ -457,7 +459,7 @@ public class WireHandler {
      * be 'forward': { west, east, north, south, down, up } - this is the order of
      * shape updates.
      */
-    private void forEachNeighbor(WireNode wire, Consumer<Node> consumer) {
+    private void forEachNeighbor(@NotNull WireNode wire, @NotNull Consumer<Node> consumer) {
         int forward   = wire.iFlowDir;
         int rightward = (forward + 1) & 0b11;
         int backward  = (forward + 2) & 0b11;
@@ -506,7 +508,7 @@ public class WireHandler {
     /**
      * This method should be called whenever a wire receives a block update.
      */
-    public void onWireUpdated(BlockPos pos) {
+    public void onWireUpdated(@NotNull BlockPos pos) {
         invalidate();
         findRoots(pos);
         tryUpdate();
@@ -515,7 +517,7 @@ public class WireHandler {
     /**
      * This method should be called whenever a wire is placed.
      */
-    public void onWireAdded(BlockPos pos) {
+    public void onWireAdded(@NotNull BlockPos pos) {
         Node node = getOrAddNode(pos);
 
         if (!node.isWire()) {
@@ -534,7 +536,7 @@ public class WireHandler {
     /**
      * This method should be called whenever a wire is removed.
      */
-    public void onWireRemoved(BlockPos pos, BlockState state) {
+    public void onWireRemoved(@NotNull BlockPos pos, BlockState state) {
         Node node = removeNode(pos);
         WireNode wire;
 
@@ -606,7 +608,7 @@ public class WireHandler {
      * from multiple points at once, checking for common cases like the one
      * described above is relatively straight-forward.
      */
-    private void findRoots(BlockPos pos) {
+    private void findRoots(@NotNull BlockPos pos) {
         Node node = getOrAddNode(pos);
 
         if (!node.isWire()) {
@@ -634,7 +636,7 @@ public class WireHandler {
     /**
      * Look for wires around the given node that require power changes.
      */
-    private void findRootsAround(Node node, int except) {
+    private void findRootsAround(@NotNull Node node, int except) {
         for (int iDir : Directions.I_EXCEPT_CARDINAL[except]) {
             Node neighbor = getNeighbor(node, iDir);
 
@@ -648,7 +650,7 @@ public class WireHandler {
      * Check if the given wire requires power changes. If it does, queue it for the
      * breadth-first search as a root.
      */
-    private void findRoot(WireNode wire) {
+    private void findRoot(@NotNull WireNode wire) {
         // Each wire only needs to be checked once.
         if (wire.discovered) {
             return;
@@ -673,7 +675,7 @@ public class WireHandler {
      * <br>
      * - Find connections to neighboring wires.
      */
-    private void discover(WireNode wire) {
+    private void discover(@NotNull WireNode wire) {
         if (wire.discovered) {
             return;
         }
@@ -697,7 +699,7 @@ public class WireHandler {
      * neighboring wires has decreased, so as to determine how low the power of the
      * wire can fall.
      */
-    private void findPower(WireNode wire, boolean ignoreSearched) {
+    private void findPower(@NotNull WireNode wire, boolean ignoreSearched) {
         // As wire power is (re-)computed, flow information must be reset.
         wire.virtualPower = wire.externalPower;
         wire.flowIn = 0;
@@ -721,7 +723,7 @@ public class WireHandler {
      * Determine the power the given wire receives from connected neighboring wires
      * and update the virtual power accordingly.
      */
-    private void findWirePower(WireNode wire, boolean ignoreSearched) {
+    private void findWirePower(@NotNull WireNode wire, boolean ignoreSearched) {
         wire.connections.forEach(connection -> {
             if (!connection.accept) {
                 return;
@@ -742,7 +744,7 @@ public class WireHandler {
      * Determine the redstone signal the given wire receives from non-wire
      * components and update the virtual power accordingly.
      */
-    private void findExternalPower(WireNode wire) {
+    private void findExternalPower(@NotNull WireNode wire) {
         // If the wire is removed or going to break, its power level should always be
         // the minimum value. Thus external power need not be computed.
         // In other cases external power need only be computed once.
@@ -761,7 +763,7 @@ public class WireHandler {
      * Determine the redstone signal the given wire receives from non-wire
      * components.
      */
-    private int getExternalPower(WireNode wire) {
+    private int getExternalPower(@NotNull WireNode wire) {
         int power = POWER_MIN;
 
         for (int iDir = 0; iDir < Directions.ALL.length; iDir++) {
@@ -793,7 +795,7 @@ public class WireHandler {
      * Determine the direct signal the given wire receives from neighboring blocks
      * through the given conductor node.
      */
-    private int getDirectSignalTo(WireNode wire, Node node, int except) {
+    private int getDirectSignalTo(WireNode wire, @NotNull Node node, int except) {
         int power = POWER_MIN;
 
         for (int iDir : Directions.I_EXCEPT[except]) {
@@ -814,14 +816,14 @@ public class WireHandler {
     /**
      * Check if the given wire needs to update its state in the world.
      */
-    private boolean needsUpdate(WireNode wire) {
+    private boolean needsUpdate(@NotNull WireNode wire) {
         return wire.removed || wire.shouldBreak || wire.virtualPower != wire.currentPower;
     }
 
     /**
      * Queue the given wire for the breadth-first search as a root.
      */
-    private void searchRoot(WireNode wire) {
+    private void searchRoot(@NotNull WireNode wire) {
         int iBackupFlowDir;
 
         if (wire.connections.iFlowDir < 0) {
@@ -837,7 +839,7 @@ public class WireHandler {
      * Queue the given wire for the breadth-first search and set a backup flow
      * direction.
      */
-    private void search(WireNode wire, boolean root, int iBackupFlowDir) {
+    private void search(@NotNull WireNode wire, boolean root, int iBackupFlowDir) {
         search.offer(wire);
 
         wire.root = root;
@@ -1024,7 +1026,7 @@ public class WireHandler {
      * ambiguous, use the backup value that was set when the wire was first added to
      * the network.
      */
-    private void findPowerFlow(WireNode wire) {
+    private void findPowerFlow(@NotNull WireNode wire) {
         int flow = FLOW_IN_TO_FLOW_OUT[wire.flowIn];
 
         if (flow >= 0) {
@@ -1038,7 +1040,7 @@ public class WireHandler {
      * Transmit power from the given wire to neighboring wires and queue updates to
      * those wires.
      */
-    private void transmitPower(WireNode wire) {
+    private void transmitPower(@NotNull WireNode wire) {
         wire.connections.forEach(connection -> {
             if (!connection.offer) {
                 return;
@@ -1058,7 +1060,7 @@ public class WireHandler {
     /**
      * Emit shape updates around the given wire.
      */
-    private void updateNeighborShapes(WireNode wire) {
+    private void updateNeighborShapes(@NotNull WireNode wire) {
         BlockPos wirePos = wire.pos;
         BlockState wireState = wire.state;
 
@@ -1074,7 +1076,7 @@ public class WireHandler {
         }
     }
 
-    private void updateShape(Node node, Direction dir, BlockPos neighborPos, BlockState neighborState) {
+    private void updateShape(@NotNull Node node, @NotNull Direction dir, @NotNull BlockPos neighborPos, @NotNull BlockState neighborState) {
         BlockPos pos = node.pos;
         BlockState state = level.getBlockState(pos);
 
@@ -1089,7 +1091,7 @@ public class WireHandler {
     /**
      * Queue block updates to nodes around the given wire.
      */
-    private void queueNeighbors(WireNode wire) {
+    private void queueNeighbors(@NotNull WireNode wire) {
         forEachNeighbor(wire, neighbor -> {
             queueNeighbor(neighbor, wire);
         });
@@ -1098,7 +1100,7 @@ public class WireHandler {
     /**
      * Queue the given node for an update from the given neighboring wire.
      */
-    private void queueNeighbor(Node node, WireNode neighborWire) {
+    private void queueNeighbor(@NotNull Node node, WireNode neighborWire) {
         // Updates to wires are queued when power is transmitted.
         if (!node.isWire()) {
             node.neighborWire = neighborWire;
@@ -1111,7 +1113,7 @@ public class WireHandler {
      * change (perhaps because its power has already changed), transmit power to
      * neighboring wires.
      */
-    private void queueWire(WireNode wire) {
+    private void queueWire(@NotNull WireNode wire) {
         if (needsUpdate(wire)) {
             updates.offer(wire);
         } else {
@@ -1123,7 +1125,7 @@ public class WireHandler {
     /**
      * Emit a block update to the given node.
      */
-    private void updateBlock(Node node, BlockPos neighborPos, Block neighborBlock) {
+    private void updateBlock(@NotNull Node node, @NotNull BlockPos neighborPos, @NotNull Block neighborBlock) {
         BlockPos pos = node.pos;
         BlockState state = level.getBlockState(pos);
 
diff --git a/src/main/java/alternate/current/wire/WireNode.java b/src/main/java/alternate/current/wire/WireNode.java
index 33cd90c30c22200a4e1ae64f40a0bf7864546b33..f3e6470e78b2dea1d9f356ff94a27148d4facd26 100644
--- a/src/main/java/alternate/current/wire/WireNode.java
+++ b/src/main/java/alternate/current/wire/WireNode.java
@@ -8,6 +8,9 @@ import net.minecraft.world.level.block.Blocks;
 import net.minecraft.world.level.block.RedStoneWireBlock;
 import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.world.level.redstone.Redstone;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 /**
  * A WireNode is a Node that represents a wire in the world. It stores all the
@@ -18,7 +21,7 @@ import net.minecraft.world.level.redstone.Redstone;
  */
 public class WireNode extends Node {
 
-    final WireConnectionManager connections;
+    final @NotNull WireConnectionManager connections;
 
     /** The power level this wire currently holds in the world. */
     int currentPower;
@@ -44,9 +47,9 @@ public class WireNode extends Node {
     boolean searched;
 
     /** The next wire in the simple queue. */
-    WireNode next_wire;
+    @Nullable WireNode next_wire;
 
-    WireNode(ServerLevel level, BlockPos pos, BlockState state) {
+    WireNode(ServerLevel level, @NotNull BlockPos pos, BlockState state) {
         super(level);
 
         this.pos = pos.immutable();
@@ -74,7 +77,7 @@ public class WireNode extends Node {
     }
 
     @Override
-    public WireNode asWire() {
+    public @NotNull WireNode asWire() {
         return this;
     }
 
diff --git a/src/main/java/ca/spottedleaf/concurrentutil/collection/MultiThreadedQueue.java b/src/main/java/ca/spottedleaf/concurrentutil/collection/MultiThreadedQueue.java
index f4415f782b32fed25da98e44b172f717c4d46e34..f90032d4d4ba05b36102db3dddbe12bb7af97805 100644
--- a/src/main/java/ca/spottedleaf/concurrentutil/collection/MultiThreadedQueue.java
+++ b/src/main/java/ca/spottedleaf/concurrentutil/collection/MultiThreadedQueue.java
@@ -2,6 +2,9 @@ package ca.spottedleaf.concurrentutil.collection;
 
 import ca.spottedleaf.concurrentutil.util.ConcurrentUtil;
 import ca.spottedleaf.concurrentutil.util.Validate;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 import java.lang.invoke.VarHandle;
 import java.util.ArrayList;
 import java.util.Collection;
@@ -107,7 +110,7 @@ public class MultiThreadedQueue<E> implements Queue<E> {
      * @param collection The specified collection.
      * @throws NullPointerException If {@code collection} is {@code null} or contains {@code null} elements.
      */
-    public MultiThreadedQueue(final Iterable<? extends E> collection) {
+    public MultiThreadedQueue(final @NotNull Iterable<? extends E> collection) {
         final Iterator<? extends E> elements = collection.iterator();
 
         if (!elements.hasNext()) {
@@ -134,7 +137,7 @@ public class MultiThreadedQueue<E> implements Queue<E> {
      * {@inheritDoc}
      */
     @Override
-    public E remove() throws NoSuchElementException {
+    public @NotNull E remove() throws NoSuchElementException {
         final E ret = this.poll();
 
         if (ret == null) {
@@ -173,7 +176,7 @@ public class MultiThreadedQueue<E> implements Queue<E> {
      * {@inheritDoc}
      */
     @Override
-    public E element() throws NoSuchElementException {
+    public @NotNull E element() throws NoSuchElementException {
         final E ret = this.peek();
 
         if (ret == null) {
@@ -202,7 +205,7 @@ public class MultiThreadedQueue<E> implements Queue<E> {
      * {@inheritDoc}
      */
     @Override
-    public E peek() {
+    public @Nullable E peek() {
         for (LinkedNode<E> head = this.getHeadOpaque(), curr = head;;) {
             final LinkedNode<E> next = curr.getNextVolatile();
             final E element = curr.getElementPlain(); /* Likely in sync */
@@ -225,7 +228,7 @@ public class MultiThreadedQueue<E> implements Queue<E> {
      * {@inheritDoc}
      */
     @Override
-    public E poll() {
+    public @Nullable E poll() {
         return this.removeHead();
     }
 
@@ -238,7 +241,7 @@ public class MultiThreadedQueue<E> implements Queue<E> {
      * @param predicate The specified predicate.
      * @return The head if it matches the predicate, or {@code null} if it did not or this queue is empty.
      */
-    public E pollIf(final Predicate<E> predicate) {
+    public @Nullable E pollIf(final Predicate<E> predicate) {
         return this.removeHead(Validate.notNull(predicate, "Null predicate"));
     }
 
@@ -402,7 +405,7 @@ public class MultiThreadedQueue<E> implements Queue<E> {
      * @return {@code null} if the queue is now add-blocked or was previously add-blocked, else returns
      * an non-null value which was the previous head of queue.
      */
-    public E pollOrBlockAdds() {
+    public @Nullable E pollOrBlockAdds() {
         int failures = 0;
         for (LinkedNode<E> head = this.getHeadOpaque(), curr = head;;) {
             final E currentVal = curr.getElementVolatile();
@@ -492,7 +495,7 @@ public class MultiThreadedQueue<E> implements Queue<E> {
      * {@inheritDoc}
      */
     @Override
-    public boolean removeIf(final Predicate<? super E> filter) {
+    public boolean removeIf(final @NotNull Predicate<? super E> filter) {
         Validate.notNull(filter, "Null filter");
 
         boolean ret = false;
@@ -518,7 +521,7 @@ public class MultiThreadedQueue<E> implements Queue<E> {
      * {@inheritDoc}
      */
     @Override
-    public boolean removeAll(final Collection<?> collection) {
+    public boolean removeAll(final @NotNull Collection<?> collection) {
         Validate.notNull(collection, "Null collection");
 
         boolean ret = false;
@@ -545,7 +548,7 @@ public class MultiThreadedQueue<E> implements Queue<E> {
      * {@inheritDoc}
      */
     @Override
-    public boolean retainAll(final Collection<?> collection) {
+    public boolean retainAll(final @NotNull Collection<?> collection) {
         Validate.notNull(collection, "Null collection");
 
         boolean ret = false;
@@ -571,7 +574,7 @@ public class MultiThreadedQueue<E> implements Queue<E> {
      * {@inheritDoc}
      */
     @Override
-    public Object[] toArray() {
+    public Object @NotNull [] toArray() {
         final List<E> ret = new ArrayList<>();
 
         for (LinkedNode<E> curr = this.getHeadOpaque();;) {
@@ -595,7 +598,7 @@ public class MultiThreadedQueue<E> implements Queue<E> {
      * {@inheritDoc}
      */
     @Override
-    public <T> T[] toArray(final T[] array) {
+    public <T> T @NotNull [] toArray(final T @NotNull [] array) {
         final List<T> ret = new ArrayList<>();
 
         for (LinkedNode<E> curr = this.getHeadOpaque();;) {
@@ -647,7 +650,7 @@ public class MultiThreadedQueue<E> implements Queue<E> {
      * {@inheritDoc}
      */
     @Override
-    public String toString() {
+    public @NotNull String toString() {
         final StringBuilder builder = new StringBuilder();
 
         builder.append("MultiThreadedQueue: {elements: {");
@@ -708,7 +711,7 @@ public class MultiThreadedQueue<E> implements Queue<E> {
      * @return {@code true} if all elements were added successfully, or {@code false} if this queue is add-blocked, or
      * {@code false} if the specified iterable contains no elements.
      */
-    public boolean addAll(final Iterable<? extends E> iterable) {
+    public boolean addAll(final @NotNull Iterable<? extends E> iterable) {
         Validate.notNull(iterable, "Null iterable");
 
         final Iterator<? extends E> elements = iterable.iterator();
@@ -737,7 +740,7 @@ public class MultiThreadedQueue<E> implements Queue<E> {
      * @return {@code true} if all elements were added successfully, or {@code false} if this queue is add-blocked, or
      * {@code false} if the specified array has a length of 0.
      */
-    public boolean addAll(final E[] items) {
+    public boolean addAll(final E @NotNull [] items) {
         return this.addAll(items, 0, items.length);
     }
 
@@ -749,7 +752,7 @@ public class MultiThreadedQueue<E> implements Queue<E> {
      * @return {@code true} if all elements were added successfully, or {@code false} if this queue is add-blocked, or
      * {@code false} if the specified array has a length of 0.
      */
-    public boolean addAll(final E[] items, final int off, final int len) {
+    public boolean addAll(final E @NotNull [] items, final int off, final int len) {
         Validate.notNull(items, "Items may not be null");
         Validate.arrayBounds(off, len, items.length, "Items array indices out of bounds");
 
@@ -773,7 +776,7 @@ public class MultiThreadedQueue<E> implements Queue<E> {
      * {@inheritDoc}
      */
     @Override
-    public boolean containsAll(final Collection<?> collection) {
+    public boolean containsAll(final @NotNull Collection<?> collection) {
         Validate.notNull(collection, "Null collection");
 
         for (final Object element : collection) {
@@ -788,7 +791,7 @@ public class MultiThreadedQueue<E> implements Queue<E> {
      * {@inheritDoc}
      */
     @Override
-    public Iterator<E> iterator() {
+    public @NotNull Iterator<E> iterator() {
         return new LinkedIterator<>(this.getHeadOpaque());
     }
 
@@ -858,7 +861,7 @@ public class MultiThreadedQueue<E> implements Queue<E> {
      * @param predicate The predicate to test elements against.
      * @return The first element that matched the predicate, {@code null} if none matched.
      */
-    public E find(final Predicate<E> predicate) {
+    public @Nullable E find(final @NotNull Predicate<E> predicate) {
         Validate.notNull(predicate, "Null predicate");
 
         for (LinkedNode<E> curr = this.getHeadOpaque();;) {
@@ -882,7 +885,7 @@ public class MultiThreadedQueue<E> implements Queue<E> {
      * {@inheritDoc}
      */
     @Override
-    public void forEach(final Consumer<? super E> action) {
+    public void forEach(final @NotNull Consumer<? super E> action) {
         Validate.notNull(action, "Null action");
 
         for (LinkedNode<E> curr = this.getHeadOpaque();;) {
@@ -995,7 +998,7 @@ public class MultiThreadedQueue<E> implements Queue<E> {
         }
     }
 
-    protected final E removeHead(final Predicate<E> predicate) {
+    protected final @Nullable E removeHead(final @NotNull Predicate<E> predicate) {
         int failures = 0;
         for (LinkedNode<E> head = this.getHeadOpaque(), curr = head;;) {
             // volatile here synchronizes-with writes to element
@@ -1053,7 +1056,7 @@ public class MultiThreadedQueue<E> implements Queue<E> {
         }
     }
 
-    protected final E removeHead() {
+    protected final @Nullable E removeHead() {
         int failures = 0;
         for (LinkedNode<E> head = this.getHeadOpaque(), curr = head;;) {
             final LinkedNode<E> next = curr.getNextVolatile();
@@ -1114,7 +1117,7 @@ public class MultiThreadedQueue<E> implements Queue<E> {
      * @param consumer The consumer to accept the elements.
      * @return The total number of elements drained.
      */
-    public int drain(final Consumer<E> consumer) {
+    public int drain(final @NotNull Consumer<E> consumer) {
         return this.drain(consumer, false, ConcurrentUtil::rethrow);
     }
 
@@ -1134,7 +1137,7 @@ public class MultiThreadedQueue<E> implements Queue<E> {
      * @param preventAdds Whether to prevent additions to this queue after draining.
      * @return The total number of elements drained.
      */
-    public int drain(final Consumer<E> consumer, final boolean preventAdds) {
+    public int drain(final @NotNull Consumer<E> consumer, final boolean preventAdds) {
         return this.drain(consumer, preventAdds, ConcurrentUtil::rethrow);
     }
 
@@ -1155,7 +1158,7 @@ public class MultiThreadedQueue<E> implements Queue<E> {
      * @param exceptionHandler Invoked when the consumer raises an exception.
      * @return The total number of elements drained.
      */
-    public int drain(final Consumer<E> consumer, final boolean preventAdds, final Consumer<Throwable> exceptionHandler) {
+    public int drain(final @NotNull Consumer<E> consumer, final boolean preventAdds, final @NotNull Consumer<Throwable> exceptionHandler) {
         Validate.notNull(consumer, "Null consumer");
         Validate.notNull(exceptionHandler, "Null exception handler");
 
@@ -1222,7 +1225,7 @@ public class MultiThreadedQueue<E> implements Queue<E> {
     }
 
     @Override
-    public Spliterator<E> spliterator() { // TODO implement
+    public @NotNull Spliterator<E> spliterator() { // TODO implement
         return Spliterators.spliterator(this, Spliterator.CONCURRENT |
             Spliterator.NONNULL | Spliterator.ORDERED);
     }
@@ -1312,9 +1315,9 @@ public class MultiThreadedQueue<E> implements Queue<E> {
 
     protected static final class LinkedIterator<E> implements Iterator<E> {
 
-        protected LinkedNode<E> curr; /* last returned by next() */
-        protected LinkedNode<E> next; /* next to return from next() */
-        protected E nextElement; /* cached to avoid a race condition with removing or polling */
+        protected @Nullable LinkedNode<E> curr; /* last returned by next() */
+        protected @Nullable LinkedNode<E> next; /* next to return from next() */
+        protected @Nullable E nextElement; /* cached to avoid a race condition with removing or polling */
 
         protected LinkedIterator(final LinkedNode<E> start) {
             /* setup nextElement and next */
@@ -1374,7 +1377,7 @@ public class MultiThreadedQueue<E> implements Queue<E> {
          * {@inheritDoc}
          */
         @Override
-        public E next() {
+        public @NotNull E next() {
             final E element = this.nextElement;
 
             if (element == null) {
diff --git a/src/main/java/ca/spottedleaf/concurrentutil/collection/SRSWLinkedQueue.java b/src/main/java/ca/spottedleaf/concurrentutil/collection/SRSWLinkedQueue.java
index 597659f38aa816646dcda4ca39c002b6d9f9a792..e3cab879d1091dd2f02b3bc28bd15f74625c3aeb 100644
--- a/src/main/java/ca/spottedleaf/concurrentutil/collection/SRSWLinkedQueue.java
+++ b/src/main/java/ca/spottedleaf/concurrentutil/collection/SRSWLinkedQueue.java
@@ -2,6 +2,8 @@ package ca.spottedleaf.concurrentutil.collection;
 
 import ca.spottedleaf.concurrentutil.util.ConcurrentUtil;
 import ca.spottedleaf.concurrentutil.util.Validate;
+import org.jetbrains.annotations.Nullable;
+
 import java.lang.invoke.VarHandle;
 import java.util.ConcurrentModificationException;
 
@@ -33,7 +35,7 @@ public class SRSWLinkedQueue<E> {
      * </p>
      * @return Returns, without removing, the first element of this queue.
      */
-    public E peekFirst() {
+    public @Nullable E peekFirst() {
         LinkedNode<E> head = this.head;
         E ret = head.getElementPlain();
         if (ret == null) {
@@ -62,7 +64,7 @@ public class SRSWLinkedQueue<E> {
      * </p>
      * @return Returns and removes the first element of this queue.
      */
-    public E poll() {
+    public @Nullable E poll() {
         LinkedNode<E> head = this.head;
         E ret = head.getElementPlain();
         if (ret == null) {
diff --git a/src/main/java/ca/spottedleaf/concurrentutil/completable/Completable.java b/src/main/java/ca/spottedleaf/concurrentutil/completable/Completable.java
index a1ad3308f9c3545a604b635896259a1cd3382b2a..78eaabed51205f25b2fe86d6fc2fae83f9489eec 100644
--- a/src/main/java/ca/spottedleaf/concurrentutil/completable/Completable.java
+++ b/src/main/java/ca/spottedleaf/concurrentutil/completable/Completable.java
@@ -4,6 +4,8 @@ import ca.spottedleaf.concurrentutil.collection.MultiThreadedQueue;
 import ca.spottedleaf.concurrentutil.executor.Cancellable;
 import ca.spottedleaf.concurrentutil.util.ConcurrentUtil;
 import com.mojang.logging.LogUtils;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
 import org.slf4j.Logger;
 import java.util.function.BiConsumer;
 
@@ -36,7 +38,7 @@ public final class Completable<T> {
         return this.throwable;
     }
 
-    public Cancellable addAsynchronousWaiter(final BiConsumer<T, Throwable> consumer) {
+    public @Nullable Cancellable addAsynchronousWaiter(final BiConsumer<T, Throwable> consumer) {
         if (this.waiters.add(consumer)) {
             return new CancellableImpl(consumer);
         }
@@ -51,7 +53,7 @@ public final class Completable<T> {
         }
     }
 
-    private void completeWaiter(final BiConsumer<T, Throwable> consumer, final T result, final Throwable throwable) {
+    private void completeWaiter(final @NotNull BiConsumer<T, Throwable> consumer, final T result, final Throwable throwable) {
         try {
             consumer.accept(result, throwable);
         } catch (final ThreadDeath death) {
@@ -61,7 +63,7 @@ public final class Completable<T> {
         }
     }
 
-    public Cancellable addWaiter(final BiConsumer<T, Throwable> consumer) {
+    public @NotNull Cancellable addWaiter(final @NotNull BiConsumer<T, Throwable> consumer) {
         if (this.waiters.add(consumer)) {
             return new CancellableImpl(consumer);
         }
@@ -74,7 +76,7 @@ public final class Completable<T> {
         this.completeAllWaiters(result, null);
     }
 
-    public void completeWithThrowable(final Throwable throwable) {
+    public void completeWithThrowable(final @Nullable Throwable throwable) {
         if (throwable == null) {
             throw new NullPointerException("Throwable cannot be null");
         }
diff --git a/src/main/java/ca/spottedleaf/concurrentutil/executor/BaseExecutor.java b/src/main/java/ca/spottedleaf/concurrentutil/executor/BaseExecutor.java
index 8c452b0988da4725762d543f6bee09915c328ae6..e111f1120f95c69a71dd6c11b0526084352c26e3 100644
--- a/src/main/java/ca/spottedleaf/concurrentutil/executor/BaseExecutor.java
+++ b/src/main/java/ca/spottedleaf/concurrentutil/executor/BaseExecutor.java
@@ -2,6 +2,8 @@ package ca.spottedleaf.concurrentutil.executor;
 
 import ca.spottedleaf.concurrentutil.executor.standard.PrioritisedExecutor;
 import ca.spottedleaf.concurrentutil.util.ConcurrentUtil;
+import org.jetbrains.annotations.NotNull;
+
 import java.util.function.BooleanSupplier;
 
 public interface BaseExecutor {
@@ -101,7 +103,7 @@ public interface BaseExecutor {
      *     Use {@link #executeUntil(long)} or {@link #executeConditionally(BooleanSupplier, long)} instead.
      * </p>
      */
-    public default void executeConditionally(final BooleanSupplier condition) {
+    public default void executeConditionally(final @NotNull BooleanSupplier condition) {
         long failures = 0;
         while (!condition.getAsBoolean()) {
             if (this.executeTask()) {
@@ -115,7 +117,7 @@ public interface BaseExecutor {
     /**
      * Waits and executes tasks until the condition returns {@code true} or {@code System.nanoTime() >= deadline}.
      */
-    public default void executeConditionally(final BooleanSupplier condition, final long deadline) {
+    public default void executeConditionally(final @NotNull BooleanSupplier condition, final long deadline) {
         long failures = 0;
         // double check deadline; we don't know how expensive the condition is
         while ((System.nanoTime() < deadline) && !condition.getAsBoolean() && (System.nanoTime() < deadline)) {
diff --git a/src/main/java/ca/spottedleaf/concurrentutil/executor/standard/DelayedPrioritisedTask.java b/src/main/java/ca/spottedleaf/concurrentutil/executor/standard/DelayedPrioritisedTask.java
index 3ce10053d4ec51855ad7012abb5d97df1c0e557a..af91c171703af50baa3301127de4b15d69a697ca 100644
--- a/src/main/java/ca/spottedleaf/concurrentutil/executor/standard/DelayedPrioritisedTask.java
+++ b/src/main/java/ca/spottedleaf/concurrentutil/executor/standard/DelayedPrioritisedTask.java
@@ -1,6 +1,8 @@
 package ca.spottedleaf.concurrentutil.executor.standard;
 
 import ca.spottedleaf.concurrentutil.util.ConcurrentUtil;
+import org.jetbrains.annotations.NotNull;
+
 import java.lang.invoke.VarHandle;
 
 public class DelayedPrioritisedTask {
@@ -41,7 +43,7 @@ public class DelayedPrioritisedTask {
         return (PrioritisedExecutor.PrioritisedTask)TASK_HANDLE.compareAndExchange((DelayedPrioritisedTask)this, (PrioritisedExecutor.PrioritisedTask)expect, (PrioritisedExecutor.PrioritisedTask)update);
     }
 
-    public DelayedPrioritisedTask(final PrioritisedExecutor.Priority priority) {
+    public DelayedPrioritisedTask(final PrioritisedExecutor.@NotNull Priority priority) {
         this.setPriorityPlain(priority.priority);
     }
 
@@ -54,7 +56,7 @@ public class DelayedPrioritisedTask {
         return this.getTaskVolatile();
     }
 
-    public void setTask(final PrioritisedExecutor.PrioritisedTask task) {
+    public void setTask(final PrioritisedExecutor.@NotNull PrioritisedTask task) {
         int priority = this.getPriorityVolatile();
 
         if (this.compareAndExchangeTaskVolatile(null, task) != null) {
@@ -85,7 +87,7 @@ public class DelayedPrioritisedTask {
         return PrioritisedExecutor.Priority.getPriority(priority);
     }
 
-    public void raisePriority(final PrioritisedExecutor.Priority priority) {
+    public void raisePriority(final PrioritisedExecutor.@NotNull Priority priority) {
         if (!PrioritisedExecutor.Priority.isValidPriority(priority)) {
             throw new IllegalArgumentException("Invalid priority " + priority);
         }
@@ -114,7 +116,7 @@ public class DelayedPrioritisedTask {
         }
     }
 
-    public void setPriority(final PrioritisedExecutor.Priority priority) {
+    public void setPriority(final PrioritisedExecutor.@NotNull Priority priority) {
         if (!PrioritisedExecutor.Priority.isValidPriority(priority)) {
             throw new IllegalArgumentException("Invalid priority " + priority);
         }
@@ -139,7 +141,7 @@ public class DelayedPrioritisedTask {
         }
     }
 
-    public void lowerPriority(final PrioritisedExecutor.Priority priority) {
+    public void lowerPriority(final PrioritisedExecutor.@NotNull Priority priority) {
         if (!PrioritisedExecutor.Priority.isValidPriority(priority)) {
             throw new IllegalArgumentException("Invalid priority " + priority);
         }
diff --git a/src/main/java/ca/spottedleaf/concurrentutil/executor/standard/PrioritisedExecutor.java b/src/main/java/ca/spottedleaf/concurrentutil/executor/standard/PrioritisedExecutor.java
index e5d8ff730ba9d83efc2d80782de313a718bf55b3..4d4a322ffdc8611737d4582890457ef113fc6afc 100644
--- a/src/main/java/ca/spottedleaf/concurrentutil/executor/standard/PrioritisedExecutor.java
+++ b/src/main/java/ca/spottedleaf/concurrentutil/executor/standard/PrioritisedExecutor.java
@@ -1,6 +1,9 @@
 package ca.spottedleaf.concurrentutil.executor.standard;
 
 import ca.spottedleaf.concurrentutil.executor.BaseExecutor;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 public interface PrioritisedExecutor extends BaseExecutor {
 
@@ -58,33 +61,33 @@ public interface PrioritisedExecutor extends BaseExecutor {
         IDLE();
 
         // returns whether the priority can be scheduled
-        public static boolean isValidPriority(final Priority priority) {
+        public static boolean isValidPriority(final @Nullable Priority priority) {
             return priority != null && priority != Priority.COMPLETING;
         }
 
         // returns the higher priority of the two
-        public static PrioritisedExecutor.Priority max(final Priority p1, final Priority p2) {
+        public static PrioritisedExecutor.@NotNull Priority max(final @NotNull Priority p1, final @NotNull Priority p2) {
             return p1.isHigherOrEqualPriority(p2) ? p1 : p2;
         }
 
         // returns the lower priroity of the two
-        public static PrioritisedExecutor.Priority min(final Priority p1, final Priority p2) {
+        public static PrioritisedExecutor.@NotNull Priority min(final @NotNull Priority p1, final @NotNull Priority p2) {
             return p1.isLowerOrEqualPriority(p2) ? p1 : p2;
         }
 
-        public boolean isHigherOrEqualPriority(final Priority than) {
+        public boolean isHigherOrEqualPriority(final @NotNull Priority than) {
             return this.priority <= than.priority;
         }
 
-        public boolean isHigherPriority(final Priority than) {
+        public boolean isHigherPriority(final @NotNull Priority than) {
             return this.priority < than.priority;
         }
 
-        public boolean isLowerOrEqualPriority(final Priority than) {
+        public boolean isLowerOrEqualPriority(final @NotNull Priority than) {
             return this.priority >= than.priority;
         }
 
-        public boolean isLowerPriority(final Priority than) {
+        public boolean isLowerPriority(final @NotNull Priority than) {
             return this.priority > than.priority;
         }
 
diff --git a/src/main/java/ca/spottedleaf/concurrentutil/executor/standard/PrioritisedQueueExecutorThread.java b/src/main/java/ca/spottedleaf/concurrentutil/executor/standard/PrioritisedQueueExecutorThread.java
index 91fe0f7049122f62f05ba09c24cba5d758340cff..678766a2cc600537578c99e92ba1f910b0792924 100644
--- a/src/main/java/ca/spottedleaf/concurrentutil/executor/standard/PrioritisedQueueExecutorThread.java
+++ b/src/main/java/ca/spottedleaf/concurrentutil/executor/standard/PrioritisedQueueExecutorThread.java
@@ -2,6 +2,7 @@ package ca.spottedleaf.concurrentutil.executor.standard;
 
 import ca.spottedleaf.concurrentutil.util.ConcurrentUtil;
 import com.mojang.logging.LogUtils;
+import org.jetbrains.annotations.NotNull;
 import org.slf4j.Logger;
 import java.lang.invoke.VarHandle;
 import java.util.concurrent.locks.LockSupport;
@@ -142,7 +143,7 @@ public class PrioritisedQueueExecutorThread extends Thread implements Prioritise
     }
 
     @Override
-    public PrioritisedTask createTask(final Runnable task, final Priority priority) {
+    public @NotNull PrioritisedTask createTask(final Runnable task, final Priority priority) {
         final PrioritisedExecutor.PrioritisedTask queueTask = this.queue.createTask(task, priority);
 
         // need to override queue() to notify us of tasks
diff --git a/src/main/java/ca/spottedleaf/concurrentutil/executor/standard/PrioritisedThreadPool.java b/src/main/java/ca/spottedleaf/concurrentutil/executor/standard/PrioritisedThreadPool.java
index 26fa2caa18a9194e57574a4a7fa9f7a4265740e0..2bf15e54237a2e201405aaa990fdd2572fb30adb 100644
--- a/src/main/java/ca/spottedleaf/concurrentutil/executor/standard/PrioritisedThreadPool.java
+++ b/src/main/java/ca/spottedleaf/concurrentutil/executor/standard/PrioritisedThreadPool.java
@@ -2,6 +2,8 @@ package ca.spottedleaf.concurrentutil.executor.standard;
 
 import com.mojang.logging.LogUtils;
 import it.unimi.dsi.fastutil.objects.ReferenceOpenHashSet;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
 import org.slf4j.Logger;
 import java.util.ArrayList;
 import java.util.Arrays;
@@ -14,9 +16,9 @@ public final class PrioritisedThreadPool {
 
     private static final Logger LOGGER = LogUtils.getLogger();
 
-    protected final PrioritisedThread[] threads;
+    protected final PrioritisedThread @NotNull [] threads;
     protected final TreeSet<PrioritisedPoolExecutorImpl> queues = new TreeSet<>(PrioritisedPoolExecutorImpl.comparator());
-    protected final String name;
+    protected final @NotNull String name;
     protected final long queueMaxHoldTime;
 
     protected final ReferenceOpenHashSet<PrioritisedPoolExecutorImpl> nonShutdownQueues = new ReferenceOpenHashSet<>();
@@ -36,7 +38,7 @@ public final class PrioritisedThreadPool {
         this(name, threads, threadModifier, DEFAULT_QUEUE_HOLD_TIME); // 5ms
     }
 
-    public PrioritisedThreadPool(final String name, final int threads, final BiConsumer<Thread, Integer> threadModifier,
+    public PrioritisedThreadPool(final @Nullable String name, final int threads, final @Nullable BiConsumer<Thread, Integer> threadModifier,
                                  final long queueHoldTime) { // in ns
         if (threads <= 0) {
             throw new IllegalArgumentException("Thread count must be > 0, not " + threads);
@@ -53,7 +55,7 @@ public final class PrioritisedThreadPool {
 
             // set default attributes
             this.threads[i].setName("Prioritised thread for pool '" + name + "' #" + i);
-            this.threads[i].setUncaughtExceptionHandler((final Thread thread, final Throwable throwable) -> {
+            this.threads[i].setUncaughtExceptionHandler((final @NotNull Thread thread, final @NotNull Throwable throwable) -> {
                 LOGGER.error("Uncaught exception in thread " + thread.getName(), throwable);
             });
 
@@ -67,11 +69,11 @@ public final class PrioritisedThreadPool {
         }
     }
 
-    public Thread[] getThreads() {
+    public Thread @NotNull [] getThreads() {
         return Arrays.copyOf(this.threads, this.threads.length, Thread[].class);
     }
 
-    public PrioritisedPoolExecutor createExecutor(final String name, final int parallelism) {
+    public @NotNull PrioritisedPoolExecutor createExecutor(final String name, final int parallelism) {
         synchronized (this.nonShutdownQueues) {
             if (this.shutdown) {
                 throw new IllegalStateException("Queue is shutdown: " + this.toString());
@@ -328,7 +330,7 @@ public final class PrioritisedThreadPool {
         protected final long[] priorityCounts = new long[Priority.TOTAL_SCHEDULABLE_PRIORITIES];
         protected long schedulingId;
         protected int concurrentExecutors;
-        protected Priority scheduledPriority;
+        protected @Nullable Priority scheduledPriority;
 
         protected final String name;
         protected final int maximumExecutors;
@@ -340,8 +342,8 @@ public final class PrioritisedThreadPool {
             this.maximumExecutors = maximumExecutors;
         }
 
-        public static Comparator<PrioritisedPoolExecutorImpl> comparator() {
-            return (final PrioritisedPoolExecutorImpl p1, final PrioritisedPoolExecutorImpl p2) -> {
+        public static @NotNull Comparator<PrioritisedPoolExecutorImpl> comparator() {
+            return (final @NotNull PrioritisedPoolExecutorImpl p1, final @NotNull PrioritisedPoolExecutorImpl p2) -> {
                 if (p1 == p2) {
                     return 0;
                 }
@@ -409,7 +411,7 @@ public final class PrioritisedThreadPool {
         private long totalQueuedTasks = 0L;
 
         @Override
-        protected void priorityChange(final PrioritisedThreadedTaskQueue.PrioritisedTask task, final Priority from, final Priority to) {
+        protected void priorityChange(final PrioritisedThreadedTaskQueue.PrioritisedTask task, final @Nullable Priority from, final @NotNull Priority to) {
             // Note: The superclass' queue lock is ALWAYS held when inside this method. So we do NOT need to do any additional synchronisation
             // for accessing this queue's state.
             final long[] priorityCounts = this.priorityCounts;
diff --git a/src/main/java/ca/spottedleaf/concurrentutil/executor/standard/PrioritisedThreadedTaskQueue.java b/src/main/java/ca/spottedleaf/concurrentutil/executor/standard/PrioritisedThreadedTaskQueue.java
index b71404be2c82f7db35272b367af861e94d6c73d3..d65a15478f6e95b0d67ec6a140b56f7c1460fa2d 100644
--- a/src/main/java/ca/spottedleaf/concurrentutil/executor/standard/PrioritisedThreadedTaskQueue.java
+++ b/src/main/java/ca/spottedleaf/concurrentutil/executor/standard/PrioritisedThreadedTaskQueue.java
@@ -1,5 +1,8 @@
 package ca.spottedleaf.concurrentutil.executor.standard;
 
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 import java.util.ArrayDeque;
 import java.util.concurrent.atomic.AtomicLong;
 
@@ -21,7 +24,7 @@ public class PrioritisedThreadedTaskQueue implements PrioritisedExecutor {
     protected long taskIdGenerator = 0;
 
     @Override
-    public PrioritisedExecutor.PrioritisedTask queueRunnable(final Runnable task, final PrioritisedExecutor.Priority priority) throws IllegalStateException, IllegalArgumentException {
+    public PrioritisedExecutor.@NotNull PrioritisedTask queueRunnable(final @Nullable Runnable task, final PrioritisedExecutor.Priority priority) throws IllegalStateException, IllegalArgumentException {
         if (!PrioritisedExecutor.Priority.isValidPriority(priority)) {
             throw new IllegalArgumentException("Priority " + priority + " is invalid");
         }
@@ -54,7 +57,7 @@ public class PrioritisedThreadedTaskQueue implements PrioritisedExecutor {
     }
 
     @Override
-    public PrioritisedExecutor.PrioritisedTask createTask(final Runnable task, final Priority priority) {
+    public PrioritisedExecutor.@NotNull PrioritisedTask createTask(final @Nullable Runnable task, final Priority priority) {
         if (!PrioritisedExecutor.Priority.isValidPriority(priority)) {
             throw new IllegalArgumentException("Priority " + priority + " is invalid");
         }
@@ -87,7 +90,7 @@ public class PrioritisedThreadedTaskQueue implements PrioritisedExecutor {
         return this.poll(Priority.IDLE);
     }
 
-    protected PrioritisedTask poll(final PrioritisedExecutor.Priority minPriority) {
+    protected @Nullable PrioritisedTask poll(final PrioritisedExecutor.@NotNull Priority minPriority) {
         final ArrayDeque<PrioritisedTask>[] queues = this.queues;
         synchronized (queues) {
             final int max = minPriority.priority;
@@ -163,7 +166,7 @@ public class PrioritisedThreadedTaskQueue implements PrioritisedExecutor {
         protected long id;
         protected static final long NOT_SCHEDULED_ID = -1L;
 
-        protected Runnable runnable;
+        protected @Nullable Runnable runnable;
         protected volatile PrioritisedExecutor.Priority priority;
 
         protected PrioritisedTask(final long id, final Runnable runnable, final PrioritisedExecutor.Priority priority, final PrioritisedThreadedTaskQueue queue) {
@@ -237,7 +240,7 @@ public class PrioritisedThreadedTaskQueue implements PrioritisedExecutor {
         }
 
         @Override
-        public boolean setPriority(final PrioritisedExecutor.Priority priority) {
+        public boolean setPriority(final PrioritisedExecutor.@NotNull Priority priority) {
             if (!PrioritisedExecutor.Priority.isValidPriority(priority)) {
                 throw new IllegalArgumentException("Invalid priority " + priority);
             }
@@ -265,7 +268,7 @@ public class PrioritisedThreadedTaskQueue implements PrioritisedExecutor {
         }
 
         @Override
-        public boolean raisePriority(final PrioritisedExecutor.Priority priority) {
+        public boolean raisePriority(final PrioritisedExecutor.@NotNull Priority priority) {
             if (!PrioritisedExecutor.Priority.isValidPriority(priority)) {
                 throw new IllegalArgumentException("Invalid priority " + priority);
             }
@@ -294,7 +297,7 @@ public class PrioritisedThreadedTaskQueue implements PrioritisedExecutor {
         }
 
         @Override
-        public boolean lowerPriority(final PrioritisedExecutor.Priority priority) {
+        public boolean lowerPriority(final PrioritisedExecutor.@NotNull Priority priority) {
             if (!PrioritisedExecutor.Priority.isValidPriority(priority)) {
                 throw new IllegalArgumentException("Invalid priority " + priority);
             }
diff --git a/src/main/java/ca/spottedleaf/concurrentutil/map/SWMRHashTable.java b/src/main/java/ca/spottedleaf/concurrentutil/map/SWMRHashTable.java
index a037bb57bedc0cde6b979f5c1f9669678fa7bd16..58caff48752ef72ccc35fb32b53c630ba3990b9c 100644
--- a/src/main/java/ca/spottedleaf/concurrentutil/map/SWMRHashTable.java
+++ b/src/main/java/ca/spottedleaf/concurrentutil/map/SWMRHashTable.java
@@ -5,6 +5,9 @@ import ca.spottedleaf.concurrentutil.util.CollectionUtil;
 import ca.spottedleaf.concurrentutil.util.ConcurrentUtil;
 import ca.spottedleaf.concurrentutil.util.Validate;
 import io.papermc.paper.util.IntegerUtil;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 import java.lang.invoke.VarHandle;
 import java.util.ArrayList;
 import java.util.Arrays;
@@ -150,7 +153,7 @@ public class SWMRHashTable<K, V> implements Map<K, V>, Iterable<Map.Entry<K, V>>
      * All of the specified map's entries are copied into this map.
      * @param other The specified map.
      */
-    public SWMRHashTable(final Map<K, V> other) {
+    public SWMRHashTable(final @NotNull Map<K, V> other) {
         this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, other);
     }
 
@@ -161,7 +164,7 @@ public class SWMRHashTable<K, V> implements Map<K, V>, Iterable<Map.Entry<K, V>>
      * @param capacity specified capacity, > 0
      * @param other The specified map.
      */
-    public SWMRHashTable(final int capacity, final Map<K, V> other) {
+    public SWMRHashTable(final int capacity, final @NotNull Map<K, V> other) {
         this(capacity, DEFAULT_LOAD_FACTOR, other);
     }
 
@@ -173,7 +176,7 @@ public class SWMRHashTable<K, V> implements Map<K, V>, Iterable<Map.Entry<K, V>>
      * @param loadFactor specified load factor, > 0 && finite
      * @param other The specified map.
      */
-    public SWMRHashTable(final int capacity, final float loadFactor, final Map<K, V> other) {
+    public SWMRHashTable(final int capacity, final float loadFactor, final @NotNull Map<K, V> other) {
         this(Math.max(Validate.notNull(other, "Null map").size(), capacity), loadFactor);
         this.putAll(other);
     }
@@ -193,7 +196,7 @@ public class SWMRHashTable<K, V> implements Map<K, V>, Iterable<Map.Entry<K, V>>
     }
 
     /** Callers must still use acquire when reading the value of the entry. */
-    protected final TableEntry<K, V> getEntryForOpaque(final K key) {
+    protected final @Nullable TableEntry<K, V> getEntryForOpaque(final K key) {
         final int hash = SWMRHashTable.getHash(key);
         final TableEntry<K, V>[] table = this.getTableAcquire();
 
@@ -206,7 +209,7 @@ public class SWMRHashTable<K, V> implements Map<K, V>, Iterable<Map.Entry<K, V>>
         return null;
     }
 
-    protected final TableEntry<K, V> getEntryForPlain(final K key) {
+    protected final @Nullable TableEntry<K, V> getEntryForPlain(final K key) {
         final int hash = SWMRHashTable.getHash(key);
         final TableEntry<K, V>[] table = this.getTablePlain();
 
@@ -222,7 +225,7 @@ public class SWMRHashTable<K, V> implements Map<K, V>, Iterable<Map.Entry<K, V>>
     /* MT-Safe */
 
     /** must be deterministic given a key */
-    private static int getHash(final Object key) {
+    private static int getHash(final @Nullable Object key) {
         int hash = key == null ? 0 : key.hashCode();
         // inlined IntegerUtil#hash0
         hash *= 0x36935555;
@@ -301,11 +304,11 @@ public class SWMRHashTable<K, V> implements Map<K, V>, Iterable<Map.Entry<K, V>>
      * {@inheritDoc}
      */
     @Override
-    public String toString() {
+    public @NotNull String toString() {
         final StringBuilder builder = new StringBuilder(64);
         builder.append("SingleWriterMultiReaderHashMap:{");
 
-        this.forEach((final K key, final V value) -> {
+        this.forEach((final @NotNull K key, final @NotNull V value) -> {
             builder.append("{key: \"").append(key).append("\", value: \"").append(value).append("\"}");
         });
 
@@ -316,7 +319,7 @@ public class SWMRHashTable<K, V> implements Map<K, V>, Iterable<Map.Entry<K, V>>
      * {@inheritDoc}
      */
     @Override
-    public SWMRHashTable<K, V> clone() {
+    public @NotNull SWMRHashTable<K, V> clone() {
         return new SWMRHashTable<>(this.getTableAcquire().length, this.loadFactor, this);
     }
 
@@ -324,7 +327,7 @@ public class SWMRHashTable<K, V> implements Map<K, V>, Iterable<Map.Entry<K, V>>
      * {@inheritDoc}
      */
     @Override
-    public Iterator<Entry<K, V>> iterator() {
+    public @NotNull Iterator<Entry<K, V>> iterator() {
         return new EntryIterator<>(this.getTableAcquire(), this);
     }
 
@@ -332,7 +335,7 @@ public class SWMRHashTable<K, V> implements Map<K, V>, Iterable<Map.Entry<K, V>>
      * {@inheritDoc}
      */
     @Override
-    public void forEach(final Consumer<? super Entry<K, V>> action) {
+    public void forEach(final @NotNull Consumer<? super Entry<K, V>> action) {
         Validate.notNull(action, "Null action");
 
         final TableEntry<K, V>[] table = this.getTableAcquire();
@@ -347,7 +350,7 @@ public class SWMRHashTable<K, V> implements Map<K, V>, Iterable<Map.Entry<K, V>>
      * {@inheritDoc}
      */
     @Override
-    public void forEach(final BiConsumer<? super K, ? super V> action) {
+    public void forEach(final @NotNull BiConsumer<? super K, ? super V> action) {
         Validate.notNull(action, "Null action");
 
         final TableEntry<K, V>[] table = this.getTableAcquire();
@@ -364,7 +367,7 @@ public class SWMRHashTable<K, V> implements Map<K, V>, Iterable<Map.Entry<K, V>>
      * Provides the specified consumer with all keys contained within this map.
      * @param action The specified consumer.
      */
-    public void forEachKey(final Consumer<? super K> action) {
+    public void forEachKey(final @NotNull Consumer<? super K> action) {
         Validate.notNull(action, "Null action");
 
         final TableEntry<K, V>[] table = this.getTableAcquire();
@@ -379,7 +382,7 @@ public class SWMRHashTable<K, V> implements Map<K, V>, Iterable<Map.Entry<K, V>>
      * Provides the specified consumer with all values contained within this map. Equivalent to {@code map.values().forEach(Consumer)}.
      * @param action The specified consumer.
      */
-    public void forEachValue(final Consumer<? super V> action) {
+    public void forEachValue(final @NotNull Consumer<? super V> action) {
         Validate.notNull(action, "Null action");
 
         final TableEntry<K, V>[] table = this.getTableAcquire();
@@ -396,7 +399,7 @@ public class SWMRHashTable<K, V> implements Map<K, V>, Iterable<Map.Entry<K, V>>
      * {@inheritDoc}
      */
     @Override
-    public V get(final Object key) {
+    public @Nullable V get(final Object key) {
         Validate.notNull(key, "Null key");
 
         //noinspection unchecked
@@ -489,17 +492,17 @@ public class SWMRHashTable<K, V> implements Map<K, V>, Iterable<Map.Entry<K, V>>
     protected Set<Map.Entry<K, V>> entrySet;
 
     @Override
-    public Set<K> keySet() {
+    public @NotNull Set<K> keySet() {
         return this.keyset == null ? this.keyset = new KeySet<>(this) : this.keyset;
     }
 
     @Override
-    public Collection<V> values() {
+    public @NotNull Collection<V> values() {
         return this.values == null ? this.values = new ValueCollection<>(this) : this.values;
     }
 
     @Override
-    public Set<Map.Entry<K, V>> entrySet() {
+    public @NotNull Set<Map.Entry<K, V>> entrySet() {
         return this.entrySet == null ? this.entrySet = new EntrySet<>(this) : this.entrySet;
     }
 
@@ -577,7 +580,7 @@ public class SWMRHashTable<K, V> implements Map<K, V>, Iterable<Map.Entry<K, V>>
         return newSize;
     }
 
-    protected final V put(final K key, final V value, final boolean onlyIfAbsent) {
+    protected final @Nullable V put(final K key, final V value, final boolean onlyIfAbsent) {
         final TableEntry<K, V>[] table = this.getTablePlain();
         final int hash = SWMRHashTable.getHash(key);
         final int index = hash & (table.length - 1);
@@ -621,7 +624,7 @@ public class SWMRHashTable<K, V> implements Map<K, V>, Iterable<Map.Entry<K, V>>
      * @param predicate The predicate to test key-value pairs against.
      * @return The total number of key-value pairs removed from this map.
      */
-    public int removeIf(final BiPredicate<K, V> predicate) {
+    public int removeIf(final @NotNull BiPredicate<K, V> predicate) {
         Validate.notNull(predicate, "Null predicate");
 
         int removed = 0;
@@ -674,7 +677,7 @@ public class SWMRHashTable<K, V> implements Map<K, V>, Iterable<Map.Entry<K, V>>
      * @param predicate The predicate to test key-value pairs against.
      * @return The total number of key-value pairs removed from this map.
      */
-    public int removeEntryIf(final Predicate<? super Entry<K, V>> predicate) {
+    public int removeEntryIf(final @NotNull Predicate<? super Entry<K, V>> predicate) {
         Validate.notNull(predicate, "Null predicate");
 
         int removed = 0;
@@ -791,7 +794,7 @@ public class SWMRHashTable<K, V> implements Map<K, V>, Iterable<Map.Entry<K, V>>
         return false;
     }
 
-    protected final V remove(final Object key, final int hash) {
+    protected final @Nullable V remove(final Object key, final int hash) {
         final TableEntry<K, V>[] table = this.getTablePlain();
         final int index = (table.length - 1) & hash;
 
@@ -823,7 +826,7 @@ public class SWMRHashTable<K, V> implements Map<K, V>, Iterable<Map.Entry<K, V>>
      * {@inheritDoc}
      */
     @Override
-    public V remove(final Object key) {
+    public @Nullable V remove(final Object key) {
         Validate.notNull(key, "Null key");
 
         return this.remove(key, SWMRHashTable.getHash(key));
@@ -874,7 +877,7 @@ public class SWMRHashTable<K, V> implements Map<K, V>, Iterable<Map.Entry<K, V>>
      * {@inheritDoc}
      */
     @Override
-    public void replaceAll(final BiFunction<? super K, ? super V, ? extends V> function) {
+    public void replaceAll(final @NotNull BiFunction<? super K, ? super V, ? extends V> function) {
         Validate.notNull(function, "Null function");
 
         final TableEntry<K, V>[] table = this.getTablePlain();
@@ -896,7 +899,7 @@ public class SWMRHashTable<K, V> implements Map<K, V>, Iterable<Map.Entry<K, V>>
      * {@inheritDoc}
      */
     @Override
-    public void putAll(final Map<? extends K, ? extends V> map) {
+    public void putAll(final @NotNull Map<? extends K, ? extends V> map) {
         Validate.notNull(map, "Null map");
 
         final int size = map.size();
@@ -921,7 +924,7 @@ public class SWMRHashTable<K, V> implements Map<K, V>, Iterable<Map.Entry<K, V>>
      * {@inheritDoc}
      */
     @Override
-    public V compute(final K key, final BiFunction<? super K, ? super V, ? extends V> remappingFunction) {
+    public @Nullable V compute(final K key, final @NotNull BiFunction<? super K, ? super V, ? extends V> remappingFunction) {
         Validate.notNull(key, "Null key");
         Validate.notNull(remappingFunction, "Null remappingFunction");
 
@@ -974,7 +977,7 @@ public class SWMRHashTable<K, V> implements Map<K, V>, Iterable<Map.Entry<K, V>>
      * {@inheritDoc}
      */
     @Override
-    public V computeIfPresent(final K key, final BiFunction<? super K, ? super V, ? extends V> remappingFunction) {
+    public @Nullable V computeIfPresent(final K key, final @NotNull BiFunction<? super K, ? super V, ? extends V> remappingFunction) {
         Validate.notNull(key, "Null key");
         Validate.notNull(remappingFunction, "Null remappingFunction");
 
@@ -1011,7 +1014,7 @@ public class SWMRHashTable<K, V> implements Map<K, V>, Iterable<Map.Entry<K, V>>
      * {@inheritDoc}
      */
     @Override
-    public V computeIfAbsent(final K key, final Function<? super K, ? extends V> mappingFunction) {
+    public @Nullable V computeIfAbsent(final K key, final @NotNull Function<? super K, ? extends V> mappingFunction) {
         Validate.notNull(key, "Null key");
         Validate.notNull(mappingFunction, "Null mappingFunction");
 
@@ -1050,7 +1053,7 @@ public class SWMRHashTable<K, V> implements Map<K, V>, Iterable<Map.Entry<K, V>>
      * {@inheritDoc}
      */
     @Override
-    public V merge(final K key, final V value, final BiFunction<? super V, ? super V, ? extends V> remappingFunction) {
+    public @Nullable V merge(final K key, final V value, final @NotNull BiFunction<? super V, ? super V, ? extends V> remappingFunction) {
         Validate.notNull(key, "Null key");
         Validate.notNull(value, "Null value");
         Validate.notNull(remappingFunction, "Null remappingFunction");
@@ -1167,7 +1170,7 @@ public class SWMRHashTable<K, V> implements Map<K, V>, Iterable<Map.Entry<K, V>>
          * {@inheritDoc}
          */
         @Override
-        public V setValue(final V value) {
+        public V setValue(final @Nullable V value) {
             if (value == null) {
                 throw new NullPointerException();
             }
@@ -1178,7 +1181,7 @@ public class SWMRHashTable<K, V> implements Map<K, V>, Iterable<Map.Entry<K, V>>
             return curr;
         }
 
-        protected static int hash(final Object key, final Object value) {
+        protected static int hash(final @NotNull Object key, final @Nullable Object value) {
             return key.hashCode() ^ (value == null ? 0 : value.hashCode());
         }
 
@@ -1222,10 +1225,10 @@ public class SWMRHashTable<K, V> implements Map<K, V>, Iterable<Map.Entry<K, V>>
         /* bin which our current element resides on */
         protected int tableIndex;
 
-        protected TableEntry<K, V> currEntry; /* curr entry, null if no more to iterate or if curr was removed or if we've just init'd */
-        protected TableEntry<K, V> nextEntry; /* may not be on the same bin as currEntry */
+        protected @Nullable TableEntry<K, V> currEntry; /* curr entry, null if no more to iterate or if curr was removed or if we've just init'd */
+        protected @Nullable TableEntry<K, V> nextEntry; /* may not be on the same bin as currEntry */
 
-        protected TableEntryIterator(final TableEntry<K, V>[] table, final SWMRHashTable<K, V> map) {
+        protected TableEntryIterator(final TableEntry<K, V> @NotNull [] table, final SWMRHashTable<K, V> map) {
             this.table = table;
             this.map = map;
             int tableIndex = 0;
@@ -1245,7 +1248,7 @@ public class SWMRHashTable<K, V> implements Map<K, V>, Iterable<Map.Entry<K, V>>
             return this.nextEntry != null;
         }
 
-        protected final TableEntry<K, V> advanceEntry() {
+        protected final @Nullable TableEntry<K, V> advanceEntry() {
             final TableEntry<K, V>[] table = this.table;
             final int tableLength = table.length;
             int tableIndex = this.tableIndex;
@@ -1296,7 +1299,7 @@ public class SWMRHashTable<K, V> implements Map<K, V>, Iterable<Map.Entry<K, V>>
 
     protected static final class ValueIterator<K, V> extends TableEntryIterator<K, V, V> {
 
-        protected ValueIterator(final TableEntry<K, V>[] table, final SWMRHashTable<K, V> map) {
+        protected ValueIterator(final TableEntry<K, V> @NotNull [] table, final SWMRHashTable<K, V> map) {
             super(table, map);
         }
 
@@ -1314,7 +1317,7 @@ public class SWMRHashTable<K, V> implements Map<K, V>, Iterable<Map.Entry<K, V>>
 
     protected static final class KeyIterator<K, V> extends TableEntryIterator<K, V, K> {
 
-        protected KeyIterator(final TableEntry<K, V>[] table, final SWMRHashTable<K, V> map) {
+        protected KeyIterator(final TableEntry<K, V> @NotNull [] table, final SWMRHashTable<K, V> map) {
             super(table, map);
         }
 
@@ -1332,12 +1335,12 @@ public class SWMRHashTable<K, V> implements Map<K, V>, Iterable<Map.Entry<K, V>>
 
     protected static final class EntryIterator<K, V> extends TableEntryIterator<K, V, Map.Entry<K, V>> {
 
-        protected EntryIterator(final TableEntry<K, V>[] table, final SWMRHashTable<K, V> map) {
+        protected EntryIterator(final TableEntry<K, V> @NotNull [] table, final SWMRHashTable<K, V> map) {
             super(table, map);
         }
 
         @Override
-        public Map.Entry<K, V> next() {
+        public Map.@NotNull Entry<K, V> next() {
             final TableEntry<K, V> curr = this.advanceEntry();
 
             if (curr == null) {
@@ -1367,7 +1370,7 @@ public class SWMRHashTable<K, V> implements Map<K, V>, Iterable<Map.Entry<K, V>>
         }
 
         @Override
-        public boolean removeAll(final Collection<?> collection) {
+        public boolean removeAll(final @NotNull Collection<?> collection) {
             Validate.notNull(collection, "Null collection");
 
             boolean modified = false;
@@ -1393,7 +1396,7 @@ public class SWMRHashTable<K, V> implements Map<K, V>, Iterable<Map.Entry<K, V>>
         }
 
         @Override
-        public boolean containsAll(final Collection<?> collection) {
+        public boolean containsAll(final @NotNull Collection<?> collection) {
             Validate.notNull(collection, "Null collection");
 
             for (final Object element : collection) {
@@ -1406,7 +1409,7 @@ public class SWMRHashTable<K, V> implements Map<K, V>, Iterable<Map.Entry<K, V>>
         }
 
         @Override
-        public Object[] toArray() {
+        public Object @NotNull [] toArray() {
             final List<T> list = new ArrayList<>(this.size());
 
             this.forEach(list::add);
@@ -1415,7 +1418,7 @@ public class SWMRHashTable<K, V> implements Map<K, V>, Iterable<Map.Entry<K, V>>
         }
 
         @Override
-        public <E> E[] toArray(final E[] array) {
+        public <E> E @NotNull [] toArray(final E @NotNull [] array) {
             final List<T> list = new ArrayList<>(this.size());
 
             this.forEach(list::add);
@@ -1442,7 +1445,7 @@ public class SWMRHashTable<K, V> implements Map<K, V>, Iterable<Map.Entry<K, V>>
         }
 
         @Override
-        public Spliterator<T> spliterator() { // TODO implement
+        public @NotNull Spliterator<T> spliterator() { // TODO implement
             return Spliterators.spliterator(this, Spliterator.NONNULL);
         }
     }
@@ -1499,28 +1502,28 @@ public class SWMRHashTable<K, V> implements Map<K, V>, Iterable<Map.Entry<K, V>>
         }
 
         @Override
-        public boolean removeIf(final Predicate<? super Map.Entry<K, V>> filter) {
+        public boolean removeIf(final @NotNull Predicate<? super Map.Entry<K, V>> filter) {
             Validate.notNull(filter, "Null filter");
 
             return this.map.removeEntryIf(filter) != 0;
         }
 
         @Override
-        public boolean retainAll(final Collection<?> collection) {
+        public boolean retainAll(final @NotNull Collection<?> collection) {
             Validate.notNull(collection, "Null collection");
 
-            return this.map.removeEntryIf((final Map.Entry<K, V> entry) -> {
+            return this.map.removeEntryIf((final Map.@NotNull Entry<K, V> entry) -> {
                 return !collection.contains(entry);
             }) != 0;
         }
 
         @Override
-        public Iterator<Entry<K, V>> iterator() {
+        public @NotNull Iterator<Entry<K, V>> iterator() {
             return new EntryIterator<>(this.map.getTableAcquire(), this.map);
         }
 
         @Override
-        public void forEach(final Consumer<? super Entry<K, V>> action) {
+        public void forEach(final @NotNull Consumer<? super Entry<K, V>> action) {
             this.map.forEach(action);
         }
 
@@ -1545,7 +1548,7 @@ public class SWMRHashTable<K, V> implements Map<K, V>, Iterable<Map.Entry<K, V>>
         }
 
         @Override
-        public String toString() {
+        public @NotNull String toString() {
             return CollectionUtil.toString(this, "SWMRHashTableEntrySet");
         }
     }
@@ -1557,12 +1560,12 @@ public class SWMRHashTable<K, V> implements Map<K, V>, Iterable<Map.Entry<K, V>>
         }
 
         @Override
-        public Iterator<K> iterator() {
+        public @NotNull Iterator<K> iterator() {
             return new KeyIterator<>(this.map.getTableAcquire(), this.map);
         }
 
         @Override
-        public void forEach(final Consumer<? super K> action) {
+        public void forEach(final @NotNull Consumer<? super K> action) {
             Validate.notNull(action, "Null action");
 
             this.map.forEachKey(action);
@@ -1583,25 +1586,25 @@ public class SWMRHashTable<K, V> implements Map<K, V>, Iterable<Map.Entry<K, V>>
         }
 
         @Override
-        public boolean retainAll(final Collection<?> collection) {
+        public boolean retainAll(final @NotNull Collection<?> collection) {
             Validate.notNull(collection, "Null collection");
 
-            return this.map.removeIf((final K key, final V value) -> {
+            return this.map.removeIf((final @NotNull K key, final @NotNull V value) -> {
                 return !collection.contains(key);
             }) != 0;
         }
 
         @Override
-        public boolean removeIf(final Predicate<? super K> filter) {
+        public boolean removeIf(final @NotNull Predicate<? super K> filter) {
             Validate.notNull(filter, "Null filter");
 
-            return this.map.removeIf((final K key, final V value) -> {
+            return this.map.removeIf((final @NotNull K key, final @NotNull V value) -> {
                 return filter.test(key);
             }) != 0;
         }
 
         @Override
-        public String toString() {
+        public @NotNull String toString() {
             return CollectionUtil.toString(this, "SWMRHashTableKeySet");
         }
     }
@@ -1613,12 +1616,12 @@ public class SWMRHashTable<K, V> implements Map<K, V>, Iterable<Map.Entry<K, V>>
         }
 
         @Override
-        public Iterator<V> iterator() {
+        public @NotNull Iterator<V> iterator() {
             return new ValueIterator<>(this.map.getTableAcquire(), this.map);
         }
 
         @Override
-        public void forEach(final Consumer<? super V> action) {
+        public void forEach(final @NotNull Consumer<? super V> action) {
             Validate.notNull(action, "Null action");
 
             this.map.forEachValue(action);
@@ -1648,25 +1651,25 @@ public class SWMRHashTable<K, V> implements Map<K, V>, Iterable<Map.Entry<K, V>>
         }
 
         @Override
-        public boolean removeIf(final Predicate<? super V> filter) {
+        public boolean removeIf(final @NotNull Predicate<? super V> filter) {
             Validate.notNull(filter, "Null filter");
 
-            return this.map.removeIf((final K key, final V value) -> {
+            return this.map.removeIf((final @NotNull K key, final @NotNull V value) -> {
                 return filter.test(value);
             }) != 0;
         }
 
         @Override
-        public boolean retainAll(final Collection<?> collection) {
+        public boolean retainAll(final @NotNull Collection<?> collection) {
             Validate.notNull(collection, "Null collection");
 
-            return this.map.removeIf((final K key, final V value) -> {
+            return this.map.removeIf((final @NotNull K key, final @NotNull V value) -> {
                 return !collection.contains(value);
             }) != 0;
         }
 
         @Override
-        public String toString() {
+        public @NotNull String toString() {
             return CollectionUtil.toString(this, "SWMRHashTableValues");
         }
     }
diff --git a/src/main/java/ca/spottedleaf/concurrentutil/map/SWMRLong2ObjectHashTable.java b/src/main/java/ca/spottedleaf/concurrentutil/map/SWMRLong2ObjectHashTable.java
index 1e98f778ffa0a7bb00ebccaaa8bde075183e41f0..26d91fbfe84aeac5d0d579c1b9ea7823d2f44e7b 100644
--- a/src/main/java/ca/spottedleaf/concurrentutil/map/SWMRLong2ObjectHashTable.java
+++ b/src/main/java/ca/spottedleaf/concurrentutil/map/SWMRLong2ObjectHashTable.java
@@ -4,6 +4,9 @@ import ca.spottedleaf.concurrentutil.util.ArrayUtil;
 import ca.spottedleaf.concurrentutil.util.ConcurrentUtil;
 import ca.spottedleaf.concurrentutil.util.Validate;
 import io.papermc.paper.util.IntegerUtil;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 import java.lang.invoke.VarHandle;
 import java.util.Arrays;
 import java.util.function.Consumer;
@@ -117,7 +120,7 @@ public class SWMRLong2ObjectHashTable<V> {
      * All of the specified map's entries are copied into this map.
      * @param other The specified map.
      */
-    public SWMRLong2ObjectHashTable(final SWMRLong2ObjectHashTable<V> other) {
+    public SWMRLong2ObjectHashTable(final @NotNull SWMRLong2ObjectHashTable<V> other) {
         this(DEFAULT_CAPACITY, DEFAULT_LOAD_FACTOR, other);
     }
 
@@ -128,7 +131,7 @@ public class SWMRLong2ObjectHashTable<V> {
      * @param capacity specified capacity, > 0
      * @param other The specified map.
      */
-    public SWMRLong2ObjectHashTable(final int capacity, final SWMRLong2ObjectHashTable<V> other) {
+    public SWMRLong2ObjectHashTable(final int capacity, final @NotNull SWMRLong2ObjectHashTable<V> other) {
         this(capacity, DEFAULT_LOAD_FACTOR, other);
     }
 
@@ -140,7 +143,7 @@ public class SWMRLong2ObjectHashTable<V> {
      * @param loadFactor specified load factor, > 0 && finite
      * @param other The specified map.
      */
-    public SWMRLong2ObjectHashTable(final int capacity, final float loadFactor, final SWMRLong2ObjectHashTable<V> other) {
+    public SWMRLong2ObjectHashTable(final int capacity, final float loadFactor, final @NotNull SWMRLong2ObjectHashTable<V> other) {
         this(Math.max(Validate.notNull(other, "Null map").size(), capacity), loadFactor);
         this.putAll(other);
     }
@@ -160,7 +163,7 @@ public class SWMRLong2ObjectHashTable<V> {
     }
 
     /** Callers must still use acquire when reading the value of the entry. */
-    protected final TableEntry<V> getEntryForOpaque(final long key) {
+    protected final @Nullable TableEntry<V> getEntryForOpaque(final long key) {
         final int hash = SWMRLong2ObjectHashTable.getHash(key);
         final TableEntry<V>[] table = this.getTableAcquire();
 
@@ -173,7 +176,7 @@ public class SWMRLong2ObjectHashTable<V> {
         return null;
     }
 
-    protected final TableEntry<V> getEntryForPlain(final long key) {
+    protected final @Nullable TableEntry<V> getEntryForPlain(final long key) {
         final int hash = SWMRLong2ObjectHashTable.getHash(key);
         final TableEntry<V>[] table = this.getTablePlain();
 
@@ -259,11 +262,11 @@ public class SWMRLong2ObjectHashTable<V> {
      * {@inheritDoc}
      */
     @Override
-    public String toString() {
+    public @NotNull String toString() {
         final StringBuilder builder = new StringBuilder(64);
         builder.append("SingleWriterMultiReaderHashMap:{");
 
-        this.forEach((final long key, final V value) -> {
+        this.forEach((final long key, final @NotNull V value) -> {
             builder.append("{key: \"").append(key).append("\", value: \"").append(value).append("\"}");
         });
 
@@ -274,14 +277,14 @@ public class SWMRLong2ObjectHashTable<V> {
      * {@inheritDoc}
      */
     @Override
-    public SWMRLong2ObjectHashTable<V> clone() {
+    public @NotNull SWMRLong2ObjectHashTable<V> clone() {
         return new SWMRLong2ObjectHashTable<>(this.getTableAcquire().length, this.loadFactor, this);
     }
 
     /**
      * {@inheritDoc}
      */
-    public void forEach(final Consumer<? super SWMRLong2ObjectHashTable.TableEntry<V>> action) {
+    public void forEach(final @NotNull Consumer<? super SWMRLong2ObjectHashTable.TableEntry<V>> action) {
         Validate.notNull(action, "Null action");
 
         final TableEntry<V>[] table = this.getTableAcquire();
@@ -300,7 +303,7 @@ public class SWMRLong2ObjectHashTable<V> {
     /**
      * {@inheritDoc}
      */
-    public void forEach(final BiLongObjectConsumer<? super V> action) {
+    public void forEach(final @NotNull BiLongObjectConsumer<? super V> action) {
         Validate.notNull(action, "Null action");
 
         final TableEntry<V>[] table = this.getTableAcquire();
@@ -317,7 +320,7 @@ public class SWMRLong2ObjectHashTable<V> {
      * Provides the specified consumer with all keys contained within this map.
      * @param action The specified consumer.
      */
-    public void forEachKey(final LongConsumer action) {
+    public void forEachKey(final @NotNull LongConsumer action) {
         Validate.notNull(action, "Null action");
 
         final TableEntry<V>[] table = this.getTableAcquire();
@@ -332,7 +335,7 @@ public class SWMRLong2ObjectHashTable<V> {
      * Provides the specified consumer with all values contained within this map. Equivalent to {@code map.values().forEach(Consumer)}.
      * @param action The specified consumer.
      */
-    public void forEachValue(final Consumer<? super V> action) {
+    public void forEachValue(final @NotNull Consumer<? super V> action) {
         Validate.notNull(action, "Null action");
 
         final TableEntry<V>[] table = this.getTableAcquire();
@@ -348,7 +351,7 @@ public class SWMRLong2ObjectHashTable<V> {
     /**
      * {@inheritDoc}
      */
-    public V get(final long key) {
+    public @Nullable V get(final long key) {
         final TableEntry<V> entry = this.getEntryForOpaque(key);
         return entry == null ? null : entry.getValueAcquire();
     }
@@ -450,7 +453,7 @@ public class SWMRLong2ObjectHashTable<V> {
         return newSize;
     }
 
-    protected final V put(final long key, final V value, final boolean onlyIfAbsent) {
+    protected final @Nullable V put(final long key, final V value, final boolean onlyIfAbsent) {
         final TableEntry<V>[] table = this.getTablePlain();
         final int hash = SWMRLong2ObjectHashTable.getHash(key);
         final int index = hash & (table.length - 1);
@@ -491,7 +494,7 @@ public class SWMRLong2ObjectHashTable<V> {
     /**
      * {@inheritDoc}
      */
-    public V put(final long key, final V value) {
+    public @Nullable V put(final long key, final V value) {
         Validate.notNull(value, "Null value");
 
         return this.put(key, value, false);
@@ -500,13 +503,13 @@ public class SWMRLong2ObjectHashTable<V> {
     /**
      * {@inheritDoc}
      */
-    public V putIfAbsent(final long key, final V value) {
+    public @Nullable V putIfAbsent(final long key, final V value) {
         Validate.notNull(value, "Null value");
 
         return this.put(key, value, true);
     }
 
-    protected final V remove(final long key, final int hash) {
+    protected final @Nullable V remove(final long key, final int hash) {
         final TableEntry<V>[] table = this.getTablePlain();
         final int index = (table.length - 1) & hash;
 
@@ -537,14 +540,14 @@ public class SWMRLong2ObjectHashTable<V> {
     /**
      * {@inheritDoc}
      */
-    public V remove(final long key) {
+    public @Nullable V remove(final long key) {
         return this.remove(key, SWMRLong2ObjectHashTable.getHash(key));
     }
 
     /**
      * {@inheritDoc}
      */
-    public void putAll(final SWMRLong2ObjectHashTable<? extends V> map) {
+    public void putAll(final @NotNull SWMRLong2ObjectHashTable<? extends V> map) {
         Validate.notNull(map, "Null map");
 
         final int size = map.size();
@@ -626,7 +629,7 @@ public class SWMRLong2ObjectHashTable<V> {
         /**
          * {@inheritDoc}
          */
-        public V setValue(final V value) {
+        public V setValue(final @Nullable V value) {
             if (value == null) {
                 throw new NullPointerException();
             }
@@ -637,7 +640,7 @@ public class SWMRLong2ObjectHashTable<V> {
             return curr;
         }
 
-        protected static int hash(final long key, final Object value) {
+        protected static int hash(final long key, final @Nullable Object value) {
             return SWMRLong2ObjectHashTable.getHash(key) ^ (value == null ? 0 : value.hashCode());
         }
 
diff --git a/src/main/java/ca/spottedleaf/concurrentutil/util/CollectionUtil.java b/src/main/java/ca/spottedleaf/concurrentutil/util/CollectionUtil.java
index 9420b9822de99d3a31224642452835b0c986f7b4..80f4c312b60e83daf624a52ebfd73b46e8c80bc5 100644
--- a/src/main/java/ca/spottedleaf/concurrentutil/util/CollectionUtil.java
+++ b/src/main/java/ca/spottedleaf/concurrentutil/util/CollectionUtil.java
@@ -1,14 +1,16 @@
 package ca.spottedleaf.concurrentutil.util;
 
+import org.jetbrains.annotations.NotNull;
+
 import java.util.Collection;
 
 public final class CollectionUtil {
 
-    public static String toString(final Collection<?> collection, final String name) {
+    public static @NotNull String toString(final @NotNull Collection<?> collection, final @NotNull String name) {
         return CollectionUtil.toString(collection, name, new StringBuilder(name.length() + 128)).toString();
     }
 
-    public static StringBuilder toString(final Collection<?> collection, final String name, final StringBuilder builder) {
+    public static @NotNull StringBuilder toString(final @NotNull Collection<?> collection, final String name, final @NotNull StringBuilder builder) {
         builder.append(name).append("{elements={");
 
         boolean first = true;
diff --git a/src/main/java/ca/spottedleaf/concurrentutil/util/ConcurrentUtil.java b/src/main/java/ca/spottedleaf/concurrentutil/util/ConcurrentUtil.java
index 23ae82e55696a7e2ff0e0f9609c0df6a48bb8d1d..06ae16fde9bbe8686ad00c8cd489955be7953417 100644
--- a/src/main/java/ca/spottedleaf/concurrentutil/util/ConcurrentUtil.java
+++ b/src/main/java/ca/spottedleaf/concurrentutil/util/ConcurrentUtil.java
@@ -1,12 +1,15 @@
 package ca.spottedleaf.concurrentutil.util;
 
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 import java.lang.invoke.MethodHandles;
 import java.lang.invoke.VarHandle;
 import java.util.concurrent.locks.LockSupport;
 
 public final class ConcurrentUtil {
 
-    public static String genericToString(final Object object) {
+    public static @NotNull String genericToString(final @Nullable Object object) {
         return object == null ? "null" : object.getClass().getName() + ":" + object.hashCode() + ":" + object.toString();
     }
 
@@ -18,7 +21,7 @@ public final class ConcurrentUtil {
         throw (T)thr;
     }
 
-    public static VarHandle getVarHandle(final Class<?> lookIn, final String fieldName, final Class<?> fieldType) {
+    public static VarHandle getVarHandle(final @NotNull Class<?> lookIn, final @NotNull String fieldName, final @NotNull Class<?> fieldType) {
         try {
             return MethodHandles.privateLookupIn(lookIn, MethodHandles.lookup()).findVarHandle(lookIn, fieldName, fieldType);
         } catch (final Exception ex) {
@@ -26,7 +29,7 @@ public final class ConcurrentUtil {
         }
     }
 
-    public static VarHandle getStaticVarHandle(final Class<?> lookIn, final String fieldName, final Class<?> fieldType) {
+    public static VarHandle getStaticVarHandle(final @NotNull Class<?> lookIn, final @NotNull String fieldName, final @NotNull Class<?> fieldType) {
         try {
             return MethodHandles.privateLookupIn(lookIn, MethodHandles.lookup()).findStaticVarHandle(lookIn, fieldName, fieldType);
         } catch (final Exception ex) {
@@ -160,7 +163,7 @@ public final class ConcurrentUtil {
         return counter;
     }
 
-    public static VarHandle getArrayHandle(final Class<?> type) {
+    public static VarHandle getArrayHandle(final @NotNull Class<?> type) {
         return MethodHandles.arrayElementVarHandle(type);
     }
 }
diff --git a/src/main/java/ca/spottedleaf/concurrentutil/util/Validate.java b/src/main/java/ca/spottedleaf/concurrentutil/util/Validate.java
index 382177d0d162fa3139c9078a873ce2504a2b17b2..0f007e5c8971ab1829f7ffde7e848f3fce66428a 100644
--- a/src/main/java/ca/spottedleaf/concurrentutil/util/Validate.java
+++ b/src/main/java/ca/spottedleaf/concurrentutil/util/Validate.java
@@ -1,15 +1,19 @@
 package ca.spottedleaf.concurrentutil.util;
 
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
+
 public final class Validate {
 
-    public static <T> T notNull(final T obj) {
+    public static <T> @NotNull T notNull(final @Nullable T obj) {
         if (obj == null) {
             throw new NullPointerException();
         }
         return obj;
     }
 
-    public static <T> T notNull(final T obj, final String msgIfNull) {
+    public static <T> @NotNull T notNull(final @Nullable T obj, final String msgIfNull) {
         if (obj == null) {
             throw new NullPointerException(msgIfNull);
         }
diff --git a/src/main/java/ca/spottedleaf/dataconverter/converters/DataConverter.java b/src/main/java/ca/spottedleaf/dataconverter/converters/DataConverter.java
index 1863c606be715683d53863a0c9293525d199c9cf..b7ad9ac668b868232608a6b378902aef0107f17f 100644
--- a/src/main/java/ca/spottedleaf/dataconverter/converters/DataConverter.java
+++ b/src/main/java/ca/spottedleaf/dataconverter/converters/DataConverter.java
@@ -1,5 +1,8 @@
 package ca.spottedleaf.dataconverter.converters;
 
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 import java.util.Comparator;
 
 public abstract class DataConverter<T, R> {
@@ -33,7 +36,7 @@ public abstract class DataConverter<T, R> {
         return encodeVersions(this.toVersion, this.versionStep);
     }
 
-    public abstract R convert(final T data, final long sourceVersion, final long toVersion);
+    public abstract @Nullable R convert(final T data, final long sourceVersion, final long toVersion);
 
     // step must be in the lower bits, so that encodeVersions(version, step) < encodeVersions(version, step + 1)
     public static long encodeVersions(final int version, final int step) {
@@ -48,7 +51,7 @@ public abstract class DataConverter<T, R> {
         return (int)encoded;
     }
 
-    public static String encodedToString(final long encoded) {
+    public static @NotNull String encodedToString(final long encoded) {
         return getVersion(encoded) + "." + getStep(encoded);
     }
 }
diff --git a/src/main/java/ca/spottedleaf/dataconverter/converters/datatypes/DataHook.java b/src/main/java/ca/spottedleaf/dataconverter/converters/datatypes/DataHook.java
index 0b92c5c66ad3a5198873f98287a5ced71c231d09..7efe4fb82bffeaba1718398b5838e7f2de6d3224 100644
--- a/src/main/java/ca/spottedleaf/dataconverter/converters/datatypes/DataHook.java
+++ b/src/main/java/ca/spottedleaf/dataconverter/converters/datatypes/DataHook.java
@@ -1,9 +1,12 @@
 package ca.spottedleaf.dataconverter.converters.datatypes;
 
+import org.jetbrains.annotations.Nullable;
+
+
 public interface DataHook<T, R> {
 
-    public R preHook(final T data, final long fromVersion, final long toVersion);
+    public @Nullable R preHook(final T data, final long fromVersion, final long toVersion);
 
-    public R postHook(final T data, final long fromVersion, final long toVersion);
+    public @Nullable R postHook(final T data, final long fromVersion, final long toVersion);
 
 }
diff --git a/src/main/java/ca/spottedleaf/dataconverter/converters/datatypes/DataType.java b/src/main/java/ca/spottedleaf/dataconverter/converters/datatypes/DataType.java
index b56a7f9ace3b947fed49101b6e9936721fb99ea5..6e573ddcef8fb0723324e35c1616fb8826c5ef62 100644
--- a/src/main/java/ca/spottedleaf/dataconverter/converters/datatypes/DataType.java
+++ b/src/main/java/ca/spottedleaf/dataconverter/converters/datatypes/DataType.java
@@ -1,7 +1,10 @@
 package ca.spottedleaf.dataconverter.converters.datatypes;
 
+import org.jetbrains.annotations.Nullable;
+
+
 public abstract class DataType<T, R> {
 
-    public abstract R convert(final T data, final long fromVersion, final long toVersion);
+    public abstract @Nullable R convert(final T data, final long fromVersion, final long toVersion);
 
 }
diff --git a/src/main/java/ca/spottedleaf/dataconverter/converters/datatypes/DataWalker.java b/src/main/java/ca/spottedleaf/dataconverter/converters/datatypes/DataWalker.java
index cf9fae4451ead4860343b915fb70e3a7cdf0de31..e8a02c5f4770d139fb6d88af843d45730e21e684 100644
--- a/src/main/java/ca/spottedleaf/dataconverter/converters/datatypes/DataWalker.java
+++ b/src/main/java/ca/spottedleaf/dataconverter/converters/datatypes/DataWalker.java
@@ -1,9 +1,11 @@
 package ca.spottedleaf.dataconverter.converters.datatypes;
 
 import ca.spottedleaf.dataconverter.types.MapType;
+import org.jetbrains.annotations.Nullable;
+
 
 public interface DataWalker<K> {
 
-    public MapType<String> walk(final MapType<K> data, final long fromVersion, final long toVersion);
+    public @Nullable MapType<String> walk(final MapType<K> data, final long fromVersion, final long toVersion);
 
 }
diff --git a/src/main/java/ca/spottedleaf/dataconverter/minecraft/MCDataConverter.java b/src/main/java/ca/spottedleaf/dataconverter/minecraft/MCDataConverter.java
index dde9d36bf6212196caa18f3c9c535aec330a33ed..5a8ebb403e65afd3c7eafd5ce9944978a60231d0 100644
--- a/src/main/java/ca/spottedleaf/dataconverter/minecraft/MCDataConverter.java
+++ b/src/main/java/ca/spottedleaf/dataconverter/minecraft/MCDataConverter.java
@@ -8,6 +8,8 @@ import ca.spottedleaf.dataconverter.types.nbt.NBTMapType;
 import com.google.gson.JsonObject;
 import it.unimi.dsi.fastutil.longs.LongArrayList;
 import net.minecraft.nbt.CompoundTag;
+import org.jetbrains.annotations.NotNull;
+
 
 public final class MCDataConverter {
 
@@ -23,7 +25,7 @@ public final class MCDataConverter {
         return type;
     }
 
-    public static CompoundTag convertTag(final MCDataType type, final CompoundTag data, final int fromVersion, final int toVersion) {
+    public static CompoundTag convertTag(final @NotNull MCDataType type, final CompoundTag data, final int fromVersion, final int toVersion) {
         final NBTMapType wrapped = new NBTMapType(data);
 
         final NBTMapType replaced = (NBTMapType)convert(type, wrapped, fromVersion, toVersion);
@@ -31,7 +33,7 @@ public final class MCDataConverter {
         return replaced == null ? wrapped.getTag() : replaced.getTag();
     }
 
-    public static JsonObject convertJson(final MCDataType type, final JsonObject data, final boolean compressed, final int fromVersion, final int toVersion) {
+    public static JsonObject convertJson(final @NotNull MCDataType type, final JsonObject data, final boolean compressed, final int fromVersion, final int toVersion) {
         final JsonMapType wrapped = new JsonMapType(data, compressed);
 
         final JsonMapType replaced = (JsonMapType)convert(type, wrapped, fromVersion, toVersion);
@@ -39,7 +41,7 @@ public final class MCDataConverter {
         return replaced == null ? wrapped.getJson() : replaced.getJson();
     }
 
-    public static <T, R> R convert(final DataType<T, R> type, final T data, int fromVersion, final int toVersion) {
+    public static <T, R> R convert(final @NotNull DataType<T, R> type, final T data, int fromVersion, final int toVersion) {
         Object ret = data;
 
         long currentVersion = DataConverter.encodeVersions(fromVersion < 99 ? 99 : fromVersion, Integer.MAX_VALUE);
diff --git a/src/main/java/ca/spottedleaf/dataconverter/minecraft/MCVersionRegistry.java b/src/main/java/ca/spottedleaf/dataconverter/minecraft/MCVersionRegistry.java
index 5ec18e5890541a9570cd08059ef3d8ec9a1aa6f9..cb9fecc3b94b085b7de0d4bfc4ab063c97bf3d61 100644
--- a/src/main/java/ca/spottedleaf/dataconverter/minecraft/MCVersionRegistry.java
+++ b/src/main/java/ca/spottedleaf/dataconverter/minecraft/MCVersionRegistry.java
@@ -9,6 +9,7 @@ import it.unimi.dsi.fastutil.ints.IntRBTreeSet;
 import it.unimi.dsi.fastutil.longs.LongArrayList;
 import it.unimi.dsi.fastutil.longs.LongComparator;
 import it.unimi.dsi.fastutil.longs.LongLinkedOpenHashSet;
+import org.jetbrains.annotations.NotNull;
 import org.slf4j.Logger;
 import java.lang.reflect.Field;
 import java.util.Arrays;
@@ -19,10 +20,10 @@ public final class MCVersionRegistry {
     private static final Logger LOGGER = LogUtils.getLogger();
 
     protected static final Int2ObjectLinkedOpenHashMap<String> VERSION_NAMES = new Int2ObjectLinkedOpenHashMap<>();
-    protected static final IntArrayList VERSION_LIST;
-    protected static final LongArrayList DATA_VERSION_LIST;
+    protected static final @NotNull IntArrayList VERSION_LIST;
+    protected static final @NotNull LongArrayList DATA_VERSION_LIST;
 
-    protected static final IntArrayList DATACONVERTER_VERSIONS_LIST;
+    protected static final @NotNull IntArrayList DATACONVERTER_VERSIONS_LIST;
     protected static final IntLinkedOpenHashSet DATACONVERTER_VERSIONS_MAJOR = new IntLinkedOpenHashSet();
     protected static final LongLinkedOpenHashSet DATACONVERTER_VERSIONS = new LongLinkedOpenHashSet();
     protected static final Int2ObjectLinkedOpenHashMap<IntArrayList> SUBVERSIONS = new Int2ObjectLinkedOpenHashMap<>();
@@ -354,7 +355,7 @@ public final class MCVersionRegistry {
         return VERSION_LIST.getInt(VERSION_LIST.size() - 1);
     }
 
-    public static LongArrayList getBreakpoints() {
+    public static @NotNull LongArrayList getBreakpoints() {
         return BREAKPOINTS;
     }
 
diff --git a/src/main/java/ca/spottedleaf/dataconverter/minecraft/converters/advancements/ConverterAbstractAdvancementsRename.java b/src/main/java/ca/spottedleaf/dataconverter/minecraft/converters/advancements/ConverterAbstractAdvancementsRename.java
index ae3aed21c1fccb688e9a1665e2d317a77508d157..0e7ba3276d1fe32c4f4eaacff98f39f3aa9e0c36 100644
--- a/src/main/java/ca/spottedleaf/dataconverter/minecraft/converters/advancements/ConverterAbstractAdvancementsRename.java
+++ b/src/main/java/ca/spottedleaf/dataconverter/minecraft/converters/advancements/ConverterAbstractAdvancementsRename.java
@@ -4,6 +4,9 @@ import ca.spottedleaf.dataconverter.converters.DataConverter;
 import ca.spottedleaf.dataconverter.minecraft.converters.helpers.RenameHelper;
 import ca.spottedleaf.dataconverter.minecraft.datatypes.MCTypeRegistry;
 import ca.spottedleaf.dataconverter.types.MapType;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 import java.util.ArrayList;
 import java.util.function.Function;
 
@@ -11,14 +14,14 @@ public final class ConverterAbstractAdvancementsRename {
 
     private ConverterAbstractAdvancementsRename() {}
 
-    public static void register(final int version, final Function<String, String> renamer) {
+    public static void register(final int version, final @NotNull Function<String, String> renamer) {
         register(version, 0, renamer);
     }
 
-    public static void register(final int version, final int subVersion, final Function<String, String> renamer) {
+    public static void register(final int version, final int subVersion, final @NotNull Function<String, String> renamer) {
         MCTypeRegistry.ADVANCEMENTS.addStructureConverter(new DataConverter<>(version, subVersion) {
             @Override
-            public MapType<String> convert(final MapType<String> data, final long sourceVersion, final long toVersion) {
+            public @Nullable MapType<String> convert(final @NotNull MapType<String> data, final long sourceVersion, final long toVersion) {
                 RenameHelper.renameKeys(data, renamer);
                 return null;
             }
diff --git a/src/main/java/ca/spottedleaf/dataconverter/minecraft/converters/advancements/ConverterCriteriaRename.java b/src/main/java/ca/spottedleaf/dataconverter/minecraft/converters/advancements/ConverterCriteriaRename.java
index b2a4d16e6a2f9d71dbfa692922671581c2bec136..aa1c2aa7189f60d9d31f0fbbb51c2e15fd272b5a 100644
--- a/src/main/java/ca/spottedleaf/dataconverter/minecraft/converters/advancements/ConverterCriteriaRename.java
+++ b/src/main/java/ca/spottedleaf/dataconverter/minecraft/converters/advancements/ConverterCriteriaRename.java
@@ -3,6 +3,9 @@ package ca.spottedleaf.dataconverter.minecraft.converters.advancements;
 import ca.spottedleaf.dataconverter.converters.DataConverter;
 import ca.spottedleaf.dataconverter.minecraft.converters.helpers.RenameHelper;
 import ca.spottedleaf.dataconverter.types.MapType;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 import java.util.function.Function;
 
 public final class ConverterCriteriaRename extends DataConverter<MapType<String>, MapType<String>> {
@@ -23,7 +26,7 @@ public final class ConverterCriteriaRename extends DataConverter<MapType<String>
     }
 
     @Override
-    public MapType<String> convert(final MapType<String> data, final long sourceVersion, final long toVersion) {
+    public @Nullable MapType<String> convert(final @NotNull MapType<String> data, final long sourceVersion, final long toVersion) {
         final MapType<String> advancement = data.getMap(this.path);
         if (advancement == null) {
             return null;
diff --git a/src/main/java/ca/spottedleaf/dataconverter/minecraft/converters/blockname/ConverterAbstractBlockRename.java b/src/main/java/ca/spottedleaf/dataconverter/minecraft/converters/blockname/ConverterAbstractBlockRename.java
index ba9daaab1abd53a3fbdebd78e05ba363251188c6..bf4df0b87c8437f53dae8460b0dfc6ee5aadeb95 100644
--- a/src/main/java/ca/spottedleaf/dataconverter/minecraft/converters/blockname/ConverterAbstractBlockRename.java
+++ b/src/main/java/ca/spottedleaf/dataconverter/minecraft/converters/blockname/ConverterAbstractBlockRename.java
@@ -4,21 +4,24 @@ import ca.spottedleaf.dataconverter.converters.DataConverter;
 import ca.spottedleaf.dataconverter.minecraft.converters.helpers.ConverterAbstractStringValueTypeRename;
 import ca.spottedleaf.dataconverter.minecraft.datatypes.MCTypeRegistry;
 import ca.spottedleaf.dataconverter.types.MapType;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 import java.util.function.Function;
 
 public final class ConverterAbstractBlockRename {
 
     private ConverterAbstractBlockRename() {}
 
-    public static void register(final int version, final Function<String, String> renamer) {
+    public static void register(final int version, final @NotNull Function<String, String> renamer) {
         register(version, 0, renamer);
     }
 
-    public static void register(final int version, final int subVersion, final Function<String, String> renamer) {
+    public static void register(final int version, final int subVersion, final @NotNull Function<String, String> renamer) {
         ConverterAbstractStringValueTypeRename.register(version, subVersion, MCTypeRegistry.BLOCK_NAME, renamer);
         MCTypeRegistry.BLOCK_STATE.addStructureConverter(new DataConverter<>(version, subVersion) {
             @Override
-            public MapType<String> convert(final MapType<String> data, final long sourceVersion, final long toVersion) {
+            public @Nullable MapType<String> convert(final @NotNull MapType<String> data, final long sourceVersion, final long toVersion) {
                 final String name = data.getString("Name");
                 if (name != null) {
                     final String converted = renamer.apply(name);
@@ -31,16 +34,16 @@ public final class ConverterAbstractBlockRename {
         });
     }
 
-    public static void registerAndFixJigsaw(final int version, final Function<String, String> renamer) {
+    public static void registerAndFixJigsaw(final int version, final @NotNull Function<String, String> renamer) {
         registerAndFixJigsaw(version, 0, renamer);
     }
 
-    public static void registerAndFixJigsaw(final int version, final int subVersion, final Function<String, String> renamer) {
+    public static void registerAndFixJigsaw(final int version, final int subVersion, final @NotNull Function<String, String> renamer) {
         register(version, subVersion, renamer);
         // TODO check on update, minecraft:jigsaw can change
         MCTypeRegistry.TILE_ENTITY.addConverterForId("minecraft:jigsaw", new DataConverter<>(version, subVersion) {
             @Override
-            public MapType<String> convert(final MapType<String> data, final long sourceVersion, final long toVersion) {
+            public @Nullable MapType<String> convert(final @NotNull MapType<String> data, final long sourceVersion, final long toVersion) {
                 final String finalState = data.getString("final_state");
                 if (finalState == null || finalState.isEmpty()) {
                     return null;
diff --git a/src/main/java/ca/spottedleaf/dataconverter/minecraft/converters/chunk/ConverterFlattenChunk.java b/src/main/java/ca/spottedleaf/dataconverter/minecraft/converters/chunk/ConverterFlattenChunk.java
index 300c2d14818b1e0cfe7341aba573ec75d0581b26..bb934e8afd4c131751d92d8797cdc6517c5ea9cb 100644
--- a/src/main/java/ca/spottedleaf/dataconverter/minecraft/converters/chunk/ConverterFlattenChunk.java
+++ b/src/main/java/ca/spottedleaf/dataconverter/minecraft/converters/chunk/ConverterFlattenChunk.java
@@ -17,6 +17,8 @@ import it.unimi.dsi.fastutil.ints.IntArrayList;
 import it.unimi.dsi.fastutil.ints.IntIterator;
 import it.unimi.dsi.fastutil.objects.Reference2IntOpenHashMap;
 import net.minecraft.util.datafix.PackedBitStorage;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
 import org.slf4j.Logger;
 import java.util.Arrays;
 import java.util.BitSet;
@@ -101,7 +103,7 @@ public final class ConverterFlattenChunk extends DataConverter<MapType<String>,
     static final boolean[] VIRTUAL = toBooleanArray(VIRTUAL_SET);
     static final boolean[] IDS_NEEDING_FIX = toBooleanArray(IDS_NEEDING_FIX_SET);
 
-    private static boolean[] toBooleanArray(final BitSet set) {
+    private static boolean[] toBooleanArray(final @NotNull BitSet set) {
         final boolean[] ret = new boolean[4096];
         for (int i = 0; i < 4096; ++i) {
             ret[i] = set.get(i);
@@ -157,7 +159,7 @@ public final class ConverterFlattenChunk extends DataConverter<MapType<String>,
         mapSkull(SKULL_MAP, 5, "dragon", "head");
     };
 
-    private static void mapSkull(final Map<String, MapType<String>> into, final int oldId, final String newId, final String skullType) {
+    private static void mapSkull(final @NotNull Map<String, MapType<String>> into, final int oldId, final String newId, final String skullType) {
         into.put(oldId + "north", HelperBlockFlatteningV1450.parseTag("{Name:'minecraft:" + newId + "_wall_" + skullType + "',Properties:{facing:'north'}}"));
         into.put(oldId + "east",  HelperBlockFlatteningV1450.parseTag("{Name:'minecraft:" + newId + "_wall_" + skullType + "',Properties:{facing:'east'}}"));
         into.put(oldId + "south", HelperBlockFlatteningV1450.parseTag("{Name:'minecraft:" + newId + "_wall_" + skullType + "',Properties:{facing:'south'}}"));
@@ -180,7 +182,7 @@ public final class ConverterFlattenChunk extends DataConverter<MapType<String>,
         mapDoor(DOOR_MAP, "dark_oak_door", 3152);
     };
 
-    private static void mapDoor(final Map<String, MapType<String>> into, final String type, final int oldId) {
+    private static void mapDoor(final @NotNull Map<String, MapType<String>> into, final String type, final int oldId) {
         into.put("minecraft:" + type + "eastlowerleftfalsefalse",   HelperBlockFlatteningV1450.parseTag("{Name:'minecraft:" + type + "',Properties:{facing:'east',half:'lower',hinge:'left',open:'false',powered:'false'}}"));
         into.put("minecraft:" + type + "eastlowerleftfalsetrue",    HelperBlockFlatteningV1450.parseTag("{Name:'minecraft:" + type + "',Properties:{facing:'east',half:'lower',hinge:'left',open:'false',powered:'true'}}"));
         into.put("minecraft:" + type + "eastlowerlefttruefalse",    HelperBlockFlatteningV1450.parseTag("{Name:'minecraft:" + type + "',Properties:{facing:'east',half:'lower',hinge:'left',open:'true',powered:'false'}}"));
@@ -285,7 +287,7 @@ public final class ConverterFlattenChunk extends DataConverter<MapType<String>,
         }
     }
 
-    private static void addBeds(final Map<String, MapType<String>> into, final int colourId, final String colourName) {
+    private static void addBeds(final @NotNull Map<String, MapType<String>> into, final int colourId, final String colourName) {
         into.put("southfalsefoot" + colourId, HelperBlockFlatteningV1450.parseTag("{Name:'minecraft:" + colourName + "_bed',Properties:{facing:'south',occupied:'false',part:'foot'}}"));
         into.put("westfalsefoot" + colourId,  HelperBlockFlatteningV1450.parseTag("{Name:'minecraft:" + colourName + "_bed',Properties:{facing:'west',occupied:'false',part:'foot'}}"));
         into.put("northfalsefoot" + colourId, HelperBlockFlatteningV1450.parseTag("{Name:'minecraft:" + colourName + "_bed',Properties:{facing:'north',occupied:'false',part:'foot'}}"));
@@ -310,7 +312,7 @@ public final class ConverterFlattenChunk extends DataConverter<MapType<String>,
         }
     }
 
-    private static void addBanners(final Map<String, MapType<String>> into, final int colourId, final String colourName) {
+    private static void addBanners(final @NotNull Map<String, MapType<String>> into, final int colourId, final String colourName) {
         for(int rotation = 0; rotation < 16; ++rotation) {
             into.put("" + rotation + "_" + colourId, HelperBlockFlatteningV1450.parseTag("{Name:'minecraft:" + colourName + "_banner',Properties:{rotation:'" + rotation + "'}}"));
         }
@@ -327,11 +329,11 @@ public final class ConverterFlattenChunk extends DataConverter<MapType<String>,
         super(MCVersions.V17W47A, 1);
     }
 
-    static String getName(final MapType<String> blockState) {
+    static String getName(final @NotNull MapType<String> blockState) {
         return blockState.getString("Name");
     }
 
-    static String getProperty(final MapType<String> blockState, final String propertyName) {
+    static String getProperty(final @NotNull MapType<String> blockState, final String propertyName) {
         final MapType<String> properties = blockState.getMap("Properties");
         if (properties == null) {
             return "";
@@ -367,7 +369,7 @@ public final class ConverterFlattenChunk extends DataConverter<MapType<String>,
     }
 
     @Override
-    public MapType<String> convert(final MapType<String> data, final long sourceVersion, final long toVersion) {
+    public @Nullable MapType<String> convert(final @NotNull MapType<String> data, final long sourceVersion, final long toVersion) {
         final MapType<String> level = data.getMap("Level");
         if (level == null) {
             return null;
@@ -433,18 +435,18 @@ public final class ConverterFlattenChunk extends DataConverter<MapType<String>,
             this.data = new byte[2048];
         }
 
-        public DataLayer(final byte[] data) {
+        public DataLayer(final byte @NotNull [] data) {
             this.data = data;
             if (data.length != 2048) {
                 throw new IllegalArgumentException("ChunkNibbleArrays should be 2048 bytes not: " + data.length);
             }
         }
 
-        public static DataLayer getOrNull(final byte[] data) {
+        public static DataLayer getOrNull(final byte @Nullable [] data) {
             return data == null ? null : new DataLayer(data);
         }
 
-        public static DataLayer getOrCreate(final byte[] data) {
+        public static @NotNull DataLayer getOrCreate(final byte @Nullable [] data) {
             return data == null ? new DataLayer() : new DataLayer(data);
         }
 
@@ -475,7 +477,7 @@ public final class ConverterFlattenChunk extends DataConverter<MapType<String>,
         final int blockZ;
         final Int2ObjectLinkedOpenHashMap<MapType<String>> tileEntities = new Int2ObjectLinkedOpenHashMap<>(16);
 
-        public UpgradeChunk(final MapType<String> level) {
+        public UpgradeChunk(final @NotNull MapType<String> level) {
             this.level = level;
             this.blockX = level.getInt("xPos") << 4;
             this.blockZ = level.getInt("zPos") << 4;
@@ -773,7 +775,7 @@ public final class ConverterFlattenChunk extends DataConverter<MapType<String>,
             return this.tileEntities.remove(index);
         }
 
-        public static int relative(final int index, final Direction direction) {
+        public static int relative(final int index, final @NotNull Direction direction) {
             switch (direction.getAxis()) {
             case X:
                 int j = (index & 15) + direction.getAxisDirection().getStep();
@@ -789,7 +791,7 @@ public final class ConverterFlattenChunk extends DataConverter<MapType<String>,
             }
         }
 
-        private void setBlock(final int index, final MapType<String> blockState) {
+        private void setBlock(final int index, final @NotNull MapType<String> blockState) {
             if (index >= 0 && index <= 65535) {
                 final Section section = this.getSection(index);
                 if (section != null) {
@@ -798,7 +800,7 @@ public final class ConverterFlattenChunk extends DataConverter<MapType<String>,
             }
         }
 
-        private Section getSection(final int index) {
+        private @Nullable Section getSection(final int index) {
             final int y = index >> 12;
             return y < this.sections.length ? this.sections[y] : null;
         }
@@ -812,7 +814,7 @@ public final class ConverterFlattenChunk extends DataConverter<MapType<String>,
             }
         }
 
-        public MapType<String> writeBackToLevel() {
+        public @NotNull MapType<String> writeBackToLevel() {
             if (this.tileEntities.isEmpty()) {
                 this.level.remove("TileEntities");
             } else {
@@ -880,10 +882,10 @@ public final class ConverterFlattenChunk extends DataConverter<MapType<String>,
                     rehash(arraySize(size + 1, f));
             }
 
-            private MapType<String>[] byId = new MapType[4];
-            private MapType<String> last = null;
+            private MapType<String> @NotNull [] byId = new MapType[4];
+            private @Nullable MapType<String> last = null;
 
-            public int getOrCreateId(final MapType<String> k) {
+            public int getOrCreateId(final @NotNull MapType<String> k) {
                 if (k == this.last) {
                     return this.size - 1;
                 }
@@ -923,7 +925,7 @@ public final class ConverterFlattenChunk extends DataConverter<MapType<String>,
         final int y;
         final int[] buffer = new int[4096];
 
-        public Section(final MapType<String> section) {
+        public Section(final @NotNull MapType<String> section) {
             this.section = section;
             this.y = section.getInt("Y");
             this.hasData = section.hasKey("Blocks", ObjectType.BYTE_ARRAY);
@@ -938,7 +940,7 @@ public final class ConverterFlattenChunk extends DataConverter<MapType<String>,
             }
         }
 
-        public void setBlock(final int index, final MapType<String> blockState) {
+        public void setBlock(final int index, final @NotNull MapType<String> blockState) {
             this.buffer[index] = this.palette.getOrCreateId(blockState);
         }
 
diff --git a/src/main/java/ca/spottedleaf/dataconverter/minecraft/converters/entity/ConverterAbstractEntityRename.java b/src/main/java/ca/spottedleaf/dataconverter/minecraft/converters/entity/ConverterAbstractEntityRename.java
index 06c075e643415d98b73734b749d9043091ebf9e5..a6a88742be408c3a918399f97663b62a1c02de6c 100644
--- a/src/main/java/ca/spottedleaf/dataconverter/minecraft/converters/entity/ConverterAbstractEntityRename.java
+++ b/src/main/java/ca/spottedleaf/dataconverter/minecraft/converters/entity/ConverterAbstractEntityRename.java
@@ -4,20 +4,23 @@ import ca.spottedleaf.dataconverter.converters.DataConverter;
 import ca.spottedleaf.dataconverter.minecraft.converters.helpers.ConverterAbstractStringValueTypeRename;
 import ca.spottedleaf.dataconverter.minecraft.datatypes.MCTypeRegistry;
 import ca.spottedleaf.dataconverter.types.MapType;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 import java.util.function.Function;
 
 public final class ConverterAbstractEntityRename {
 
     private ConverterAbstractEntityRename() {}
 
-    public static void register(final int version, final Function<String, String> renamer) {
+    public static void register(final int version, final @NotNull Function<String, String> renamer) {
         register(version, 0, renamer);
     }
 
-    public static void register(final int version, final int subVersion, final Function<String, String> renamer) {
+    public static void register(final int version, final int subVersion, final @NotNull Function<String, String> renamer) {
         MCTypeRegistry.ENTITY.addStructureConverter(new DataConverter<>(version) {
             @Override
-            public MapType<String> convert(final MapType<String> data, final long sourceVersion, final long toVersion) {
+            public @Nullable MapType<String> convert(final @NotNull MapType<String> data, final long sourceVersion, final long toVersion) {
                 final String id = data.getString("id");
                 if (id == null) {
                     return null;
diff --git a/src/main/java/ca/spottedleaf/dataconverter/minecraft/converters/entity/ConverterEntityToVariant.java b/src/main/java/ca/spottedleaf/dataconverter/minecraft/converters/entity/ConverterEntityToVariant.java
index 985af815e3c23ad7c8b774eac46a7202d3020234..1850abc8eb4666d7262ae0a54ea28cbb788f490e 100644
--- a/src/main/java/ca/spottedleaf/dataconverter/minecraft/converters/entity/ConverterEntityToVariant.java
+++ b/src/main/java/ca/spottedleaf/dataconverter/minecraft/converters/entity/ConverterEntityToVariant.java
@@ -2,6 +2,9 @@ package ca.spottedleaf.dataconverter.minecraft.converters.entity;
 
 import ca.spottedleaf.dataconverter.converters.DataConverter;
 import ca.spottedleaf.dataconverter.types.MapType;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 import java.util.function.IntFunction;
 
 public final class ConverterEntityToVariant extends DataConverter<MapType<String>, MapType<String>> {
@@ -22,7 +25,7 @@ public final class ConverterEntityToVariant extends DataConverter<MapType<String
     }
 
     @Override
-    public MapType<String> convert(final MapType<String> data, final long sourceVersion, final long toVersion) {
+    public @Nullable MapType<String> convert(final @NotNull MapType<String> data, final long sourceVersion, final long toVersion) {
         final Number value = data.getNumber(this.path);
         if (value == null) {
             // nothing to do, DFU does the same
diff --git a/src/main/java/ca/spottedleaf/dataconverter/minecraft/converters/entity/ConverterEntityVariantRename.java b/src/main/java/ca/spottedleaf/dataconverter/minecraft/converters/entity/ConverterEntityVariantRename.java
index ed5dcf6f8160742c07e23e98c85409209350a7d4..767c657d9d9cc8addcfef125d89b10379103ac21 100644
--- a/src/main/java/ca/spottedleaf/dataconverter/minecraft/converters/entity/ConverterEntityVariantRename.java
+++ b/src/main/java/ca/spottedleaf/dataconverter/minecraft/converters/entity/ConverterEntityVariantRename.java
@@ -2,6 +2,9 @@ package ca.spottedleaf.dataconverter.minecraft.converters.entity;
 
 import ca.spottedleaf.dataconverter.converters.DataConverter;
 import ca.spottedleaf.dataconverter.types.MapType;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 import java.util.function.Function;
 
 public final class ConverterEntityVariantRename extends DataConverter<MapType<String>, MapType<String>> {
@@ -19,7 +22,7 @@ public final class ConverterEntityVariantRename extends DataConverter<MapType<St
     }
 
     @Override
-    public MapType<String> convert(final MapType<String> data, final long sourceVersion, final long toVersion) {
+    public @Nullable MapType<String> convert(final @NotNull MapType<String> data, final long sourceVersion, final long toVersion) {
         final String variant = data.getString("variant");
 
         if (variant == null) {
diff --git a/src/main/java/ca/spottedleaf/dataconverter/minecraft/converters/entity/ConverterFlattenEntity.java b/src/main/java/ca/spottedleaf/dataconverter/minecraft/converters/entity/ConverterFlattenEntity.java
index afad2d92f78d4727ff4440ad2778f018d5a2a609..3955ffb4715071c371d4cccb6b035f9b76787f4d 100644
--- a/src/main/java/ca/spottedleaf/dataconverter/minecraft/converters/entity/ConverterFlattenEntity.java
+++ b/src/main/java/ca/spottedleaf/dataconverter/minecraft/converters/entity/ConverterFlattenEntity.java
@@ -6,6 +6,8 @@ import ca.spottedleaf.dataconverter.minecraft.converters.helpers.HelperBlockFlat
 import ca.spottedleaf.dataconverter.minecraft.datatypes.MCTypeRegistry;
 import ca.spottedleaf.dataconverter.types.MapType;
 import ca.spottedleaf.dataconverter.types.ObjectType;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
 
 import java.util.HashMap;
 import java.util.Map;
@@ -279,14 +281,14 @@ public final class ConverterFlattenEntity extends DataConverter<MapType<String>,
         this.paths = paths;
     }
 
-    private static void register(final String id, final String... paths) {
+    private static void register(final @NotNull String id, final String... paths) {
         MCTypeRegistry.ENTITY.addConverterForId(id, new ConverterFlattenEntity(paths));
     }
 
     public static void register() {
         MCTypeRegistry.ENTITY.addConverterForId("minecraft:falling_block", new DataConverter<>(VERSION, 3) {
             @Override
-            public MapType<String> convert(final MapType<String> data, final long sourceVersion, final long toVersion) {
+            public @Nullable MapType<String> convert(final @NotNull MapType<String> data, final long sourceVersion, final long toVersion) {
                 final int blockId;
                 if (data.hasKey("Block")) {
                     final Number id = data.getNumber("Block");
@@ -343,7 +345,7 @@ public final class ConverterFlattenEntity extends DataConverter<MapType<String>,
     }
 
     @Override
-    public MapType<String> convert(final MapType<String> data, final long sourceVersion, final long toVersion) {
+    public @Nullable MapType<String> convert(final @NotNull MapType<String> data, final long sourceVersion, final long toVersion) {
         if (this.paths.length == 1) {
             data.remove(this.paths[0]);
             return null;
diff --git a/src/main/java/ca/spottedleaf/dataconverter/minecraft/converters/helpers/AddFlagIfAbsent.java b/src/main/java/ca/spottedleaf/dataconverter/minecraft/converters/helpers/AddFlagIfAbsent.java
index 4ab607f946782cc483535564e86fa9753dd7897a..65fe8123ed94c4e292fe216c10343b9da933f68c 100644
--- a/src/main/java/ca/spottedleaf/dataconverter/minecraft/converters/helpers/AddFlagIfAbsent.java
+++ b/src/main/java/ca/spottedleaf/dataconverter/minecraft/converters/helpers/AddFlagIfAbsent.java
@@ -2,6 +2,9 @@ package ca.spottedleaf.dataconverter.minecraft.converters.helpers;
 
 import ca.spottedleaf.dataconverter.converters.DataConverter;
 import ca.spottedleaf.dataconverter.types.MapType;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 public final class AddFlagIfAbsent extends DataConverter<MapType<String>, MapType<String>> {
 
@@ -21,7 +24,7 @@ public final class AddFlagIfAbsent extends DataConverter<MapType<String>, MapTyp
     }
 
     @Override
-    public MapType<String> convert(final MapType<String> data, final long sourceVersion, final long toVersion) {
+    public @Nullable MapType<String> convert(final @NotNull MapType<String> data, final long sourceVersion, final long toVersion) {
         if (!data.hasKey(this.path)) {
             data.setBoolean(this.path, this.dfl);
         }
diff --git a/src/main/java/ca/spottedleaf/dataconverter/minecraft/converters/helpers/ConverterAbstractStringValueTypeRename.java b/src/main/java/ca/spottedleaf/dataconverter/minecraft/converters/helpers/ConverterAbstractStringValueTypeRename.java
index bc79670f47aaa413ea3e96ef6a32e14099ad8a58..5542341bff3cde4b6fa4cb7874ee1f5820142473 100644
--- a/src/main/java/ca/spottedleaf/dataconverter/minecraft/converters/helpers/ConverterAbstractStringValueTypeRename.java
+++ b/src/main/java/ca/spottedleaf/dataconverter/minecraft/converters/helpers/ConverterAbstractStringValueTypeRename.java
@@ -2,19 +2,22 @@ package ca.spottedleaf.dataconverter.minecraft.converters.helpers;
 
 import ca.spottedleaf.dataconverter.converters.DataConverter;
 import ca.spottedleaf.dataconverter.minecraft.datatypes.MCValueType;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 import java.util.function.Function;
 
 public final class ConverterAbstractStringValueTypeRename {
 
     private ConverterAbstractStringValueTypeRename() {}
 
-    public static void register(final int version, final MCValueType type, final Function<String, String> renamer) {
+    public static void register(final int version, final @NotNull MCValueType type, final @NotNull Function<String, String> renamer) {
         register(version, 0, type, renamer);
     }
-    public static void register(final int version, final int subVersion, final MCValueType type, final Function<String, String> renamer) {
+    public static void register(final int version, final int subVersion, final @NotNull MCValueType type, final @NotNull Function<String, String> renamer) {
         type.addConverter(new DataConverter<>(version, subVersion) {
             @Override
-            public Object convert(final Object data, final long sourceVersion, final long toVersion) {
+            public @Nullable Object convert(final Object data, final long sourceVersion, final long toVersion) {
                 final String ret = (data instanceof String) ? renamer.apply((String)data) : null;
                 return ret == data ? null : ret;
             }
diff --git a/src/main/java/ca/spottedleaf/dataconverter/minecraft/converters/helpers/HelperBlockFlatteningV1450.java b/src/main/java/ca/spottedleaf/dataconverter/minecraft/converters/helpers/HelperBlockFlatteningV1450.java
index 02ee521dc0f61f3f01d443c46c1066d1ecbeea7f..ad56973181aed215f30da94bc6557492d21a09d9 100644
--- a/src/main/java/ca/spottedleaf/dataconverter/minecraft/converters/helpers/HelperBlockFlatteningV1450.java
+++ b/src/main/java/ca/spottedleaf/dataconverter/minecraft/converters/helpers/HelperBlockFlatteningV1450.java
@@ -4,6 +4,9 @@ import ca.spottedleaf.dataconverter.types.MapType;
 import ca.spottedleaf.dataconverter.types.nbt.NBTMapType;
 import it.unimi.dsi.fastutil.objects.Object2IntOpenHashMap;
 import net.minecraft.nbt.TagParser;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 import java.util.HashMap;
 import java.util.Map;
 
@@ -43,7 +46,7 @@ public final class HelperBlockFlatteningV1450 {
     // map used to ensure that each parsed block state contains no duplicates
     protected static final Map<MapType<String>, MapType<String>> IDENTITY_ENSURE = new HashMap<>();
 
-    public static MapType<String> parseTag(final String blockstate) {
+    public static @NotNull MapType<String> parseTag(final @NotNull String blockstate) {
         try {
             final MapType<String> ret = new NBTMapType(TagParser.parseTag(blockstate.replace('\'', '"')));
 
@@ -58,7 +61,7 @@ public final class HelperBlockFlatteningV1450 {
         }
     }
 
-    private static void register(final int id, final String flattened, final String... preFlattenings) {
+    private static void register(final int id, final @NotNull String flattened, final String @NotNull ... preFlattenings) {
         final MapType<String> flattenedNBT = parseTag(flattened);
         if (FLATTENED_BY_ID[id] != null) {
             throw new RuntimeException("Mapping already exists for id " + id);
@@ -111,7 +114,7 @@ public final class HelperBlockFlatteningV1450 {
         return nbt == null ? "minecraft:air" : nbt.getString("Name");
     }
 
-    protected static MapType<String> getNBTForIdRaw(final int block) {
+    protected static @Nullable MapType<String> getNBTForIdRaw(final int block) {
         return block >= 0 && block < FLATTENED_BY_ID.length ? FLATTENED_BY_ID[block] : null;
     }
 
diff --git a/src/main/java/ca/spottedleaf/dataconverter/minecraft/converters/helpers/HelperItemNameV102.java b/src/main/java/ca/spottedleaf/dataconverter/minecraft/converters/helpers/HelperItemNameV102.java
index 7ce9cf645ccb2dc796b87858915dba1c3efc3d5b..2c6ef4dddfddb3915ae2a9c8b7e3a190330e84e6 100644
--- a/src/main/java/ca/spottedleaf/dataconverter/minecraft/converters/helpers/HelperItemNameV102.java
+++ b/src/main/java/ca/spottedleaf/dataconverter/minecraft/converters/helpers/HelperItemNameV102.java
@@ -1,6 +1,8 @@
 package ca.spottedleaf.dataconverter.minecraft.converters.helpers;
 
 import it.unimi.dsi.fastutil.ints.Int2ObjectOpenHashMap;
+import org.jetbrains.annotations.Nullable;
+
 
 public final class HelperItemNameV102 {
 
@@ -8,7 +10,7 @@ public final class HelperItemNameV102 {
 
     private static final Int2ObjectOpenHashMap<String> ITEM_NAMES = new Int2ObjectOpenHashMap<String>() {
         @Override
-        public String put(final int k, final String o) {
+        public @Nullable String put(final int k, final String o) {
             final String ret =  super.put(k, o);
 
             if (ret != null) {
diff --git a/src/main/java/ca/spottedleaf/dataconverter/minecraft/converters/helpers/RenameHelper.java b/src/main/java/ca/spottedleaf/dataconverter/minecraft/converters/helpers/RenameHelper.java
index d1d99bec73595d49eadf0fdeb8d3999ced38762a..caffe26d0ec04bb416e96218d4fe734b306bfb78 100644
--- a/src/main/java/ca/spottedleaf/dataconverter/minecraft/converters/helpers/RenameHelper.java
+++ b/src/main/java/ca/spottedleaf/dataconverter/minecraft/converters/helpers/RenameHelper.java
@@ -1,6 +1,8 @@
 package ca.spottedleaf.dataconverter.minecraft.converters.helpers;
 
 import ca.spottedleaf.dataconverter.types.MapType;
+import org.jetbrains.annotations.NotNull;
+
 import java.util.ArrayList;
 import java.util.List;
 import java.util.function.Function;
@@ -9,7 +11,7 @@ public final class RenameHelper {
 
     // assumes no two or more entries are renamed to a single value, otherwise result will be only one of them will win
     // and there is no defined winner in such a case
-    public static void renameKeys(final MapType<String> data, final Function<String, String> renamer) {
+    public static void renameKeys(final @NotNull MapType<String> data, final @NotNull Function<String, String> renamer) {
         List<String> newKeys = null;
         List<Object> newValues = null;
         boolean needsRename = false;
@@ -50,7 +52,7 @@ public final class RenameHelper {
     }
 
     // Clobbers anything in toKey if fromKey exists
-    public static void renameSingle(final MapType<String> data, final String fromKey, final String toKey) {
+    public static void renameSingle(final @NotNull MapType<String> data, final String fromKey, final String toKey) {
         final Object value = data.getGeneric(fromKey);
         if (value != null) {
             data.remove(fromKey);
diff --git a/src/main/java/ca/spottedleaf/dataconverter/minecraft/converters/itemname/ConverterAbstractItemRename.java b/src/main/java/ca/spottedleaf/dataconverter/minecraft/converters/itemname/ConverterAbstractItemRename.java
index 94569f0ccff0d3a09eafd4ba73572d9db0a0ac5b..e1375e4543766ecb9d58fa2c52a74b441a6d1963 100644
--- a/src/main/java/ca/spottedleaf/dataconverter/minecraft/converters/itemname/ConverterAbstractItemRename.java
+++ b/src/main/java/ca/spottedleaf/dataconverter/minecraft/converters/itemname/ConverterAbstractItemRename.java
@@ -2,16 +2,18 @@ package ca.spottedleaf.dataconverter.minecraft.converters.itemname;
 
 import ca.spottedleaf.dataconverter.minecraft.converters.helpers.ConverterAbstractStringValueTypeRename;
 import ca.spottedleaf.dataconverter.minecraft.datatypes.MCTypeRegistry;
+import org.jetbrains.annotations.NotNull;
+
 import java.util.function.Function;
 
 public final class ConverterAbstractItemRename {
 
     private ConverterAbstractItemRename() {}
 
-    public static void register(final int version, final Function<String, String> renamer) {
+    public static void register(final int version, final @NotNull Function<String, String> renamer) {
         register(version, 0, renamer);
     }
-    public static void register(final int version, final int subVersion, final Function<String, String> renamer) {
+    public static void register(final int version, final int subVersion, final @NotNull Function<String, String> renamer) {
         ConverterAbstractStringValueTypeRename.register(version, subVersion, MCTypeRegistry.ITEM_NAME, renamer);
     }
 
diff --git a/src/main/java/ca/spottedleaf/dataconverter/minecraft/converters/itemstack/ConverterFlattenItemStack.java b/src/main/java/ca/spottedleaf/dataconverter/minecraft/converters/itemstack/ConverterFlattenItemStack.java
index 21176b8b96be6cb93d3dc1a74ae9f53f1ad4740c..d6a31956c440f06e2fe45ab6c4412772551e4943 100644
--- a/src/main/java/ca/spottedleaf/dataconverter/minecraft/converters/itemstack/ConverterFlattenItemStack.java
+++ b/src/main/java/ca/spottedleaf/dataconverter/minecraft/converters/itemstack/ConverterFlattenItemStack.java
@@ -5,6 +5,8 @@ import ca.spottedleaf.dataconverter.minecraft.MCVersions;
 import ca.spottedleaf.dataconverter.types.MapType;
 import ca.spottedleaf.dataconverter.types.Types;
 import com.mojang.logging.LogUtils;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
 import org.slf4j.Logger;
 import java.util.Arrays;
 import java.util.HashMap;
@@ -412,7 +414,7 @@ public final class ConverterFlattenItemStack extends DataConverter<MapType<Strin
         super(MCVersions.V17W47A, 4);
     }
 
-    public static String flattenItem(final String oldName, final int data) {
+    public static @Nullable String flattenItem(final @NotNull String oldName, final int data) {
         if (IDS_REQUIRING_FLATTENING.contains(oldName)) {
             final String flattened = FLATTEN_MAP.get(oldName + '.' + data);
             return flattened == null ? FLATTEN_MAP.get(oldName.concat(".0")) : flattened;
@@ -422,7 +424,7 @@ public final class ConverterFlattenItemStack extends DataConverter<MapType<Strin
     }
 
     @Override
-    public MapType<String> convert(final MapType<String> data, final long sourceVersion, final long toVersion) {
+    public @Nullable MapType<String> convert(final @NotNull MapType<String> data, final long sourceVersion, final long toVersion) {
         final String id = data.getString("id");
 
         if (id == null) {
diff --git a/src/main/java/ca/spottedleaf/dataconverter/minecraft/converters/itemstack/ConverterFlattenSpawnEgg.java b/src/main/java/ca/spottedleaf/dataconverter/minecraft/converters/itemstack/ConverterFlattenSpawnEgg.java
index 4fa31e40b0a6f571a853299b4e242de921ccbda0..372bcb98a9e4f5514b20a7b51c09eda9107df97a 100644
--- a/src/main/java/ca/spottedleaf/dataconverter/minecraft/converters/itemstack/ConverterFlattenSpawnEgg.java
+++ b/src/main/java/ca/spottedleaf/dataconverter/minecraft/converters/itemstack/ConverterFlattenSpawnEgg.java
@@ -3,6 +3,9 @@ package ca.spottedleaf.dataconverter.minecraft.converters.itemstack;
 import ca.spottedleaf.dataconverter.converters.DataConverter;
 import ca.spottedleaf.dataconverter.minecraft.MCVersions;
 import ca.spottedleaf.dataconverter.types.MapType;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 import java.util.HashMap;
 import java.util.Map;
 
@@ -66,7 +69,7 @@ public final class ConverterFlattenSpawnEgg extends DataConverter<MapType<String
     }
 
     @Override
-    public MapType<String> convert(final MapType<String> data, final long sourceVersion, final long toVersion) {
+    public @Nullable MapType<String> convert(final @NotNull MapType<String> data, final long sourceVersion, final long toVersion) {
         final MapType<String> tag = data.getMap("tag");
         if (tag == null) {
             return null;
diff --git a/src/main/java/ca/spottedleaf/dataconverter/minecraft/converters/options/ConverterAbstractOptionsRename.java b/src/main/java/ca/spottedleaf/dataconverter/minecraft/converters/options/ConverterAbstractOptionsRename.java
index 769dd8447976b66dcfc36283ede4ae16f1e4206d..b0cbf966a32d69cff356648107ccaefc14cad001 100644
--- a/src/main/java/ca/spottedleaf/dataconverter/minecraft/converters/options/ConverterAbstractOptionsRename.java
+++ b/src/main/java/ca/spottedleaf/dataconverter/minecraft/converters/options/ConverterAbstractOptionsRename.java
@@ -4,6 +4,9 @@ import ca.spottedleaf.dataconverter.converters.DataConverter;
 import ca.spottedleaf.dataconverter.minecraft.converters.helpers.RenameHelper;
 import ca.spottedleaf.dataconverter.minecraft.datatypes.MCTypeRegistry;
 import ca.spottedleaf.dataconverter.types.MapType;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 import java.util.ArrayList;
 import java.util.function.Function;
 
@@ -11,14 +14,14 @@ public final class ConverterAbstractOptionsRename {
 
     private ConverterAbstractOptionsRename() {}
 
-    public static void register(final int version, final Function<String, String> renamer) {
+    public static void register(final int version, final @NotNull Function<String, String> renamer) {
         register(version, 0, renamer);
     }
 
-    public static void register(final int version, final int subVersion, final Function<String, String> renamer) {
+    public static void register(final int version, final int subVersion, final @NotNull Function<String, String> renamer) {
         MCTypeRegistry.OPTIONS.addStructureConverter(new DataConverter<>(version, subVersion) {
             @Override
-            public MapType<String> convert(final MapType<String> data, final long sourceVersion, final long toVersion) {
+            public @Nullable MapType<String> convert(final @NotNull MapType<String> data, final long sourceVersion, final long toVersion) {
                 RenameHelper.renameKeys(data, renamer);
                 return null;
             }
diff --git a/src/main/java/ca/spottedleaf/dataconverter/minecraft/converters/poi/ConverterAbstractPOIRename.java b/src/main/java/ca/spottedleaf/dataconverter/minecraft/converters/poi/ConverterAbstractPOIRename.java
index 57e210bf2bb189b15a32899011c4800b19668a5e..a8a93bee5c8686ae997748cc38e894490418de6b 100644
--- a/src/main/java/ca/spottedleaf/dataconverter/minecraft/converters/poi/ConverterAbstractPOIRename.java
+++ b/src/main/java/ca/spottedleaf/dataconverter/minecraft/converters/poi/ConverterAbstractPOIRename.java
@@ -5,20 +5,23 @@ import ca.spottedleaf.dataconverter.minecraft.datatypes.MCTypeRegistry;
 import ca.spottedleaf.dataconverter.types.ListType;
 import ca.spottedleaf.dataconverter.types.MapType;
 import ca.spottedleaf.dataconverter.types.ObjectType;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 import java.util.function.Function;
 
 public final class ConverterAbstractPOIRename {
 
     private ConverterAbstractPOIRename() {}
 
-    public static void register(final int version, final Function<String, String> renamer) {
+    public static void register(final int version, final @NotNull Function<String, String> renamer) {
         register(version, 0, renamer);
     }
 
-    public static void register(final int version, final int subVersion, final Function<String, String> renamer) {
+    public static void register(final int version, final int subVersion, final @NotNull Function<String, String> renamer) {
         MCTypeRegistry.POI_CHUNK.addStructureConverter(new DataConverter<>(version, subVersion) {
             @Override
-            public MapType<String> convert(final MapType<String> data, final long sourceVersion, final long toVersion) {
+            public @Nullable MapType<String> convert(final @NotNull MapType<String> data, final long sourceVersion, final long toVersion) {
                 final MapType<String> sections = data.getMap("Sections");
                 if (sections == null) {
                     return null;
diff --git a/src/main/java/ca/spottedleaf/dataconverter/minecraft/converters/poi/ConverterPoiDelete.java b/src/main/java/ca/spottedleaf/dataconverter/minecraft/converters/poi/ConverterPoiDelete.java
index 36aa9c3eedb3f2e2f577efed3622fed74268bce1..679049d0205c8a594f1274fbf84c3ebaa2d1282a 100644
--- a/src/main/java/ca/spottedleaf/dataconverter/minecraft/converters/poi/ConverterPoiDelete.java
+++ b/src/main/java/ca/spottedleaf/dataconverter/minecraft/converters/poi/ConverterPoiDelete.java
@@ -4,6 +4,9 @@ import ca.spottedleaf.dataconverter.converters.DataConverter;
 import ca.spottedleaf.dataconverter.types.ListType;
 import ca.spottedleaf.dataconverter.types.MapType;
 import ca.spottedleaf.dataconverter.types.ObjectType;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 import java.util.function.Predicate;
 
 public final class ConverterPoiDelete extends DataConverter<MapType<String>, MapType<String>> {
@@ -21,7 +24,7 @@ public final class ConverterPoiDelete extends DataConverter<MapType<String>, Map
     }
 
     @Override
-    public MapType<String> convert(final MapType<String> data, final long sourceVersion, final long toVersion) {
+    public @Nullable MapType<String> convert(final @NotNull MapType<String> data, final long sourceVersion, final long toVersion) {
         final MapType<String> sections = data.getMap("Sections");
         if (sections == null) {
             return null;
diff --git a/src/main/java/ca/spottedleaf/dataconverter/minecraft/converters/stats/ConverterAbstractStatsRename.java b/src/main/java/ca/spottedleaf/dataconverter/minecraft/converters/stats/ConverterAbstractStatsRename.java
index a1985c85aa9193699d7d20e6f4f11b6e9744ee70..6f567e0453354d6f14b4aeb6c7ca5b5a64f0ced9 100644
--- a/src/main/java/ca/spottedleaf/dataconverter/minecraft/converters/stats/ConverterAbstractStatsRename.java
+++ b/src/main/java/ca/spottedleaf/dataconverter/minecraft/converters/stats/ConverterAbstractStatsRename.java
@@ -4,6 +4,9 @@ import ca.spottedleaf.dataconverter.converters.DataConverter;
 import ca.spottedleaf.dataconverter.minecraft.converters.helpers.RenameHelper;
 import ca.spottedleaf.dataconverter.minecraft.datatypes.MCTypeRegistry;
 import ca.spottedleaf.dataconverter.types.MapType;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 import java.util.ArrayList;
 import java.util.function.Function;
 
@@ -11,14 +14,14 @@ public final class ConverterAbstractStatsRename  {
 
     private ConverterAbstractStatsRename() {}
 
-    public static void register(final int version, final Function<String, String> renamer) {
+    public static void register(final int version, final @NotNull Function<String, String> renamer) {
         register(version, 0, renamer);
     }
 
-    public static void register(final int version, final int subVersion, final Function<String, String> renamer) {
+    public static void register(final int version, final int subVersion, final @NotNull Function<String, String> renamer) {
         MCTypeRegistry.OBJECTIVE.addStructureConverter(new DataConverter<>(version, subVersion) {
             @Override
-            public MapType<String> convert(final MapType<String> data, final long sourceVersion, final long toVersion) {
+            public @Nullable MapType<String> convert(final @NotNull MapType<String> data, final long sourceVersion, final long toVersion) {
                 final MapType<String> criteriaType = data.getMap("CriteriaType");
                 if (criteriaType == null) {
                     return null;
@@ -45,7 +48,7 @@ public final class ConverterAbstractStatsRename  {
 
         MCTypeRegistry.STATS.addStructureConverter(new DataConverter<>(version, subVersion) {
             @Override
-            public MapType<String> convert(final MapType<String> data, final long sourceVersion, final long toVersion) {
+            public @Nullable MapType<String> convert(final @NotNull MapType<String> data, final long sourceVersion, final long toVersion) {
                 final MapType<String> stats = data.getMap("stats");
 
                 if (stats == null) {
diff --git a/src/main/java/ca/spottedleaf/dataconverter/minecraft/converters/stats/ConverterFlattenStats.java b/src/main/java/ca/spottedleaf/dataconverter/minecraft/converters/stats/ConverterFlattenStats.java
index 99d2c2c84820295be1f8bb0b43784e58f51a46dd..549f1e30773d1d2abc753fdde5ab7e75e3eecf8b 100644
--- a/src/main/java/ca/spottedleaf/dataconverter/minecraft/converters/stats/ConverterFlattenStats.java
+++ b/src/main/java/ca/spottedleaf/dataconverter/minecraft/converters/stats/ConverterFlattenStats.java
@@ -9,6 +9,9 @@ import ca.spottedleaf.dataconverter.types.Types;
 import com.google.common.collect.ImmutableMap;
 import com.google.common.collect.ImmutableSet;
 import org.apache.commons.lang3.StringUtils;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 import java.util.Map;
 import java.util.Set;
 
@@ -24,7 +27,7 @@ public final class ConverterFlattenStats extends DataConverter<MapType<String>,
         super(MCVersions.V17W47A, 6);
     }
 
-    private static String upgradeItem(final String itemName) {
+    private static @Nullable String upgradeItem(final String itemName) {
         return ConverterFlattenItemStack.flattenItem(itemName, 0);
     }
 
@@ -33,7 +36,7 @@ public final class ConverterFlattenStats extends DataConverter<MapType<String>,
     }
 
     @Override
-    public MapType<String> convert(final MapType<String> data, final long sourceVersion, final long toVersion) {
+    public @Nullable MapType<String> convert(final @NotNull MapType<String> data, final long sourceVersion, final long toVersion) {
         final MapType<String> stats = Types.NBT.createEmptyMap();
 
         for (final String statKey : data.keys()) {
diff --git a/src/main/java/ca/spottedleaf/dataconverter/minecraft/datatypes/IDDataType.java b/src/main/java/ca/spottedleaf/dataconverter/minecraft/datatypes/IDDataType.java
index b2c2b4c4ae83f14639fa53e38f2c75ccd284c2d2..763b139d571fc769c8541684310d5b55a6b178fe 100644
--- a/src/main/java/ca/spottedleaf/dataconverter/minecraft/datatypes/IDDataType.java
+++ b/src/main/java/ca/spottedleaf/dataconverter/minecraft/datatypes/IDDataType.java
@@ -6,6 +6,8 @@ import ca.spottedleaf.dataconverter.converters.datatypes.DataWalker;
 import ca.spottedleaf.dataconverter.minecraft.MCVersionRegistry;
 import ca.spottedleaf.dataconverter.types.MapType;
 import ca.spottedleaf.dataconverter.util.Long2ObjectArraySortedMap;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
 
 import java.util.ArrayList;
 import java.util.HashMap;
@@ -20,10 +22,10 @@ public class IDDataType extends MCDataType {
         super(name);
     }
 
-    public void addConverterForId(final String id, final DataConverter<MapType<String>, MapType<String>> converter) {
+    public void addConverterForId(final @NotNull String id, final @NotNull DataConverter<MapType<String>, MapType<String>> converter) {
         this.addStructureConverter(new DataConverter<>(converter.getToVersion(), converter.getVersionStep()) {
             @Override
-            public MapType<String> convert(final MapType<String> data, final long sourceVersion, final long toVersion) {
+            public @Nullable MapType<String> convert(final @NotNull MapType<String> data, final long sourceVersion, final long toVersion) {
                 if (!id.equals(data.getString("id"))) {
                     return null;
                 }
@@ -37,7 +39,7 @@ public class IDDataType extends MCDataType {
     }
 
     public void addWalker(final int minVersion, final int versionStep, final String id, final DataWalker<String> walker) {
-        this.walkersById.computeIfAbsent(id, (final String keyInMap) -> {
+        this.walkersById.computeIfAbsent(id, (final @NotNull String keyInMap) -> {
             return new Long2ObjectArraySortedMap<>();
         }).computeIfAbsent(DataConverter.encodeVersions(minVersion, versionStep), (final long keyInMap) -> {
             return new ArrayList<>();
@@ -67,7 +69,7 @@ public class IDDataType extends MCDataType {
     }
 
     @Override
-    public MapType<String> convert(MapType<String> data, final long fromVersion, final long toVersion) {
+    public @Nullable MapType<String> convert(MapType<String> data, final long fromVersion, final long toVersion) {
         MapType<String> ret = null;
 
         final List<DataConverter<MapType<String>, MapType<String>>> converters = this.structureConverters;
diff --git a/src/main/java/ca/spottedleaf/dataconverter/minecraft/datatypes/MCDataType.java b/src/main/java/ca/spottedleaf/dataconverter/minecraft/datatypes/MCDataType.java
index 76a6e3efa5c69150e8f5e0063cb6357bed1bffae..7a82849d2d4c30a997b2f9ec47d96f4ce6ce8ea6 100644
--- a/src/main/java/ca/spottedleaf/dataconverter/minecraft/datatypes/MCDataType.java
+++ b/src/main/java/ca/spottedleaf/dataconverter/minecraft/datatypes/MCDataType.java
@@ -7,6 +7,9 @@ import ca.spottedleaf.dataconverter.converters.datatypes.DataWalker;
 import ca.spottedleaf.dataconverter.minecraft.MCVersionRegistry;
 import ca.spottedleaf.dataconverter.types.MapType;
 import ca.spottedleaf.dataconverter.util.Long2ObjectArraySortedMap;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 import java.util.ArrayList;
 import java.util.List;
 
@@ -22,7 +25,7 @@ public class MCDataType extends DataType<MapType<String>, MapType<String>> {
         this.name = name;
     }
 
-    public void addStructureConverter(final DataConverter<MapType<String>, MapType<String>> converter) {
+    public void addStructureConverter(final @NotNull DataConverter<MapType<String>, MapType<String>> converter) {
         MCVersionRegistry.checkVersion(converter.getEncodedVersion());
         this.structureConverters.add(converter);
         this.structureConverters.sort(DataConverter.LOWEST_VERSION_COMPARATOR);
@@ -49,7 +52,7 @@ public class MCDataType extends DataType<MapType<String>, MapType<String>> {
     }
 
     @Override
-    public MapType<String> convert(MapType<String> data, final long fromVersion, final long toVersion) {
+    public @Nullable MapType<String> convert(MapType<String> data, final long fromVersion, final long toVersion) {
         MapType<String> ret = null;
 
         final List<DataConverter<MapType<String>, MapType<String>>> converters = this.structureConverters;
diff --git a/src/main/java/ca/spottedleaf/dataconverter/minecraft/datatypes/MCValueType.java b/src/main/java/ca/spottedleaf/dataconverter/minecraft/datatypes/MCValueType.java
index 13c1381261909ef672fbeb665907f01f2d5c1ced..92711bb8dc47685b855cd2993a5453e41002b8c7 100644
--- a/src/main/java/ca/spottedleaf/dataconverter/minecraft/datatypes/MCValueType.java
+++ b/src/main/java/ca/spottedleaf/dataconverter/minecraft/datatypes/MCValueType.java
@@ -5,6 +5,9 @@ import ca.spottedleaf.dataconverter.converters.datatypes.DataHook;
 import ca.spottedleaf.dataconverter.converters.datatypes.DataType;
 import ca.spottedleaf.dataconverter.minecraft.MCVersionRegistry;
 import ca.spottedleaf.dataconverter.util.Long2ObjectArraySortedMap;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 import java.util.ArrayList;
 import java.util.List;
 
@@ -29,14 +32,14 @@ public class MCValueType extends DataType<Object, Object> {
         }).add(hook);
     }
 
-    public void addConverter(final DataConverter<Object, Object> converter) {
+    public void addConverter(final @NotNull DataConverter<Object, Object> converter) {
         MCVersionRegistry.checkVersion(converter.getEncodedVersion());
         this.converters.add(converter);
         this.converters.sort(DataConverter.LOWEST_VERSION_COMPARATOR);
     }
 
     @Override
-    public Object convert(final Object data, final long fromVersion, final long toVersion) {
+    public @Nullable Object convert(final Object data, final long fromVersion, final long toVersion) {
         Object ret = null;
         final List<DataConverter<Object, Object>> converters = this.converters;
 
diff --git a/src/main/java/ca/spottedleaf/dataconverter/minecraft/hooks/DataHookEnforceNamespacedID.java b/src/main/java/ca/spottedleaf/dataconverter/minecraft/hooks/DataHookEnforceNamespacedID.java
index 26a03007a4386ff037a1ae50045d0c44dd438235..86b1c5bab0f54ac8ba826296586fcfe0294ff1b4 100644
--- a/src/main/java/ca/spottedleaf/dataconverter/minecraft/hooks/DataHookEnforceNamespacedID.java
+++ b/src/main/java/ca/spottedleaf/dataconverter/minecraft/hooks/DataHookEnforceNamespacedID.java
@@ -3,6 +3,9 @@ package ca.spottedleaf.dataconverter.minecraft.hooks;
 import ca.spottedleaf.dataconverter.converters.datatypes.DataHook;
 import ca.spottedleaf.dataconverter.types.MapType;
 import ca.spottedleaf.dataconverter.util.NamespaceUtil;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 public class DataHookEnforceNamespacedID implements DataHook<MapType<String>, MapType<String>> {
 
@@ -17,7 +20,7 @@ public class DataHookEnforceNamespacedID implements DataHook<MapType<String>, Ma
     }
 
     @Override
-    public MapType<String> preHook(final MapType<String> data, final long fromVersion, final long toVersion) {
+    public @Nullable MapType<String> preHook(final @NotNull MapType<String> data, final long fromVersion, final long toVersion) {
         final String id = data.getString(this.path);
         if (id != null) {
             final String replace = NamespaceUtil.correctNamespaceOrNull(id);
@@ -29,7 +32,7 @@ public class DataHookEnforceNamespacedID implements DataHook<MapType<String>, Ma
     }
 
     @Override
-    public MapType<String> postHook(final MapType<String> data, final long fromVersion, final long toVersion) {
+    public @Nullable MapType<String> postHook(final MapType<String> data, final long fromVersion, final long toVersion) {
         return null;
     }
 }
diff --git a/src/main/java/ca/spottedleaf/dataconverter/minecraft/hooks/DataHookValueTypeEnforceNamespaced.java b/src/main/java/ca/spottedleaf/dataconverter/minecraft/hooks/DataHookValueTypeEnforceNamespaced.java
index 7f88487e7db589070512fafef1eb243ae29a379a..0a2cd97a64457c9ed2a037515d0ede65e91bdd92 100644
--- a/src/main/java/ca/spottedleaf/dataconverter/minecraft/hooks/DataHookValueTypeEnforceNamespaced.java
+++ b/src/main/java/ca/spottedleaf/dataconverter/minecraft/hooks/DataHookValueTypeEnforceNamespaced.java
@@ -2,11 +2,13 @@ package ca.spottedleaf.dataconverter.minecraft.hooks;
 
 import ca.spottedleaf.dataconverter.converters.datatypes.DataHook;
 import ca.spottedleaf.dataconverter.util.NamespaceUtil;
+import org.jetbrains.annotations.Nullable;
+
 
 public class DataHookValueTypeEnforceNamespaced implements DataHook<Object, Object> {
 
     @Override
-    public Object preHook(final Object data, final long fromVersion, final long toVersion) {
+    public @Nullable Object preHook(final Object data, final long fromVersion, final long toVersion) {
         if (data instanceof String) {
             return NamespaceUtil.correctNamespaceOrNull((String)data);
         }
@@ -14,7 +16,7 @@ public class DataHookValueTypeEnforceNamespaced implements DataHook<Object, Obje
     }
 
     @Override
-    public Object postHook(final Object data, final long fromVersion, final long toVersion) {
+    public @Nullable Object postHook(final Object data, final long fromVersion, final long toVersion) {
         return null;
     }
 }
diff --git a/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V100.java b/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V100.java
index 7e8f42eb57c12c885a1c17eafab1c9d9be4d8963..451bf74939f322a60aad016ef4a209d75e528941 100644
--- a/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V100.java
+++ b/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V100.java
@@ -11,6 +11,9 @@ import ca.spottedleaf.dataconverter.types.ObjectType;
 import ca.spottedleaf.dataconverter.types.ListType;
 import ca.spottedleaf.dataconverter.types.MapType;
 import ca.spottedleaf.dataconverter.types.Types;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 public final class V100 {
 
@@ -23,7 +26,7 @@ public final class V100 {
     public static void register() {
         MCTypeRegistry.ENTITY.addStructureConverter(new DataConverter<>(VERSION) {
             @Override
-            public MapType<String> convert(final MapType<String> data, final long sourceVersion, final long toVersion) {
+            public @Nullable MapType<String> convert(final @NotNull MapType<String> data, final long sourceVersion, final long toVersion) {
                 final ListType equipment = data.getList("Equipment", ObjectType.MAP);
                 data.remove("Equipment");
 
@@ -110,7 +113,7 @@ public final class V100 {
         MCTypeRegistry.ENTITY.addWalker(VERSION, "EntityHorse", new DataWalkerItemLists("Items", "ArmorItems", "HandItems"));
         MCTypeRegistry.ENTITY.addWalker(VERSION, "EntityHorse", new DataWalkerItems("ArmorItem", "SaddleItem"));
         registerMob("Rabbit");
-        MCTypeRegistry.ENTITY.addWalker(VERSION, "Villager", (final MapType<String> data, final long fromVersion, final long toVersion) -> {
+        MCTypeRegistry.ENTITY.addWalker(VERSION, "Villager", (final @NotNull MapType<String> data, final long fromVersion, final long toVersion) -> {
             WalkerUtils.convertList(MCTypeRegistry.ITEM_STACK, data, "Inventory", fromVersion, toVersion);
 
             final MapType<String> offers = data.getMap("Offers");
@@ -133,7 +136,7 @@ public final class V100 {
         });
         registerMob("Shulker");
 
-        MCTypeRegistry.STRUCTURE.addStructureWalker(VERSION, (final MapType<String> data, final long fromVersion, final long toVersion) -> {
+        MCTypeRegistry.STRUCTURE.addStructureWalker(VERSION, (final @NotNull MapType<String> data, final long fromVersion, final long toVersion) -> {
             final ListType entities = data.getList("entities", ObjectType.MAP);
             if (entities != null) {
                 for (int i = 0, len = entities.size(); i < len; ++i) {
diff --git a/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V101.java b/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V101.java
index 98fbbf59ca00dbf58982d93f561f7d5f5b81951f..f5750887ff81e5d13466cc736f62378796ddbe1e 100644
--- a/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V101.java
+++ b/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V101.java
@@ -9,12 +9,15 @@ import net.minecraft.network.chat.CommonComponents;
 import net.minecraft.network.chat.Component;
 import net.minecraft.util.GsonHelper;
 import net.minecraft.util.datafix.fixes.BlockEntitySignTextStrictJsonFix;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 public final class V101 {
 
     protected static final int VERSION = MCVersions.V15W32A + 1;
 
-    protected static void updateLine(final MapType<String> data, final String path) {
+    protected static void updateLine(final @NotNull MapType<String> data, final String path) {
         final String textString = data.getString(path);
         if (textString == null || textString.isEmpty() || "null".equals(textString)) {
             data.setString(path, Component.Serializer.toJson(CommonComponents.EMPTY));
@@ -58,7 +61,7 @@ public final class V101 {
         MCTypeRegistry.TILE_ENTITY.addConverterForId("Sign", new DataConverter<>(VERSION) {
 
             @Override
-            public MapType<String> convert(final MapType<String> data, final long sourceVersion, final long toVersion) {
+            public @Nullable MapType<String> convert(final @NotNull MapType<String> data, final long sourceVersion, final long toVersion) {
                 updateLine(data, "Text1");
                 updateLine(data, "Text2");
                 updateLine(data, "Text3");
diff --git a/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V102.java b/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V102.java
index 76374ca99efdf898dee0829fd8eb5fac26dc9a22..3665d5d1764157383ce30e57afbc550f0e075374 100644
--- a/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V102.java
+++ b/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V102.java
@@ -8,6 +8,8 @@ import ca.spottedleaf.dataconverter.types.ObjectType;
 import ca.spottedleaf.dataconverter.types.MapType;
 import ca.spottedleaf.dataconverter.types.Types;
 import com.mojang.logging.LogUtils;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
 import org.slf4j.Logger;
 
 public final class V102 {
@@ -23,7 +25,7 @@ public final class V102 {
 
         MCTypeRegistry.ITEM_NAME.addConverter(new DataConverter<>(VERSION) {
             @Override
-            public Object convert(final Object data, final long sourceVersion, final long toVersion) {
+            public @Nullable Object convert(final Object data, final long sourceVersion, final long toVersion) {
                 if (!(data instanceof Number)) {
                     return null;
                 }
@@ -38,7 +40,7 @@ public final class V102 {
 
         MCTypeRegistry.ITEM_STACK.addStructureConverter(new DataConverter<>(VERSION) {
             @Override
-            public MapType<String> convert(final MapType<String> data, final long sourceVersion, final long toVersion) {
+            public @Nullable MapType<String> convert(final @NotNull MapType<String> data, final long sourceVersion, final long toVersion) {
                 if (!data.hasKey("id", ObjectType.NUMBER)) {
                     return null;
                 }
@@ -58,7 +60,7 @@ public final class V102 {
         });
         MCTypeRegistry.ITEM_STACK.addConverterForId("minecraft:potion", new DataConverter<>(VERSION) {
             @Override
-            public MapType<String> convert(final MapType<String> data, final long sourceVersion, final long toVersion) {
+            public @Nullable MapType<String> convert(final @NotNull MapType<String> data, final long sourceVersion, final long toVersion) {
                 final short damage = data.getShort("Damage");
                 if (damage != 0) {
                     data.setShort("Damage", (short)0);
diff --git a/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V1022.java b/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V1022.java
index e251ead28d7d90937ae5871ffac489c1161e6e87..768a722188c5adc4f3186084704cd7325c418875 100644
--- a/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V1022.java
+++ b/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V1022.java
@@ -4,13 +4,15 @@ import ca.spottedleaf.dataconverter.minecraft.MCVersions;
 import ca.spottedleaf.dataconverter.minecraft.datatypes.MCTypeRegistry;
 import ca.spottedleaf.dataconverter.minecraft.walkers.generic.WalkerUtils;
 import ca.spottedleaf.dataconverter.types.MapType;
+import org.jetbrains.annotations.NotNull;
+
 
 public final class V1022 {
 
     protected static final int VERSION = MCVersions.V17W06A;
 
     public static void register() {
-        MCTypeRegistry.PLAYER.addStructureWalker(VERSION, (final MapType<String> data, final long fromVersion, final long toVersion) -> {
+        MCTypeRegistry.PLAYER.addStructureWalker(VERSION, (final @NotNull MapType<String> data, final long fromVersion, final long toVersion) -> {
             final MapType<String> rootVehicle = data.getMap("RootVehicle");
             if (rootVehicle != null) {
                 WalkerUtils.convert(MCTypeRegistry.ENTITY, rootVehicle, "Entity", fromVersion, toVersion);
@@ -31,7 +33,7 @@ public final class V1022 {
             return null;
         });
 
-        MCTypeRegistry.HOTBAR.addStructureWalker(VERSION, (final MapType<String> data, final long fromVersion, final long toVersion) -> {
+        MCTypeRegistry.HOTBAR.addStructureWalker(VERSION, (final @NotNull MapType<String> data, final long fromVersion, final long toVersion) -> {
             for (final String key : data.keys()) {
                 WalkerUtils.convertList(MCTypeRegistry.ITEM_STACK, data, key, fromVersion, toVersion);
             }
diff --git a/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V105.java b/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V105.java
index 544f6a54041147a8c9ee3ff52c31c480a3696924..9facdc87cdb5d5871cc9bdd2068c7cdaeec7cce1 100644
--- a/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V105.java
+++ b/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V105.java
@@ -7,6 +7,9 @@ import ca.spottedleaf.dataconverter.minecraft.datatypes.MCTypeRegistry;
 import ca.spottedleaf.dataconverter.types.ObjectType;
 import ca.spottedleaf.dataconverter.types.MapType;
 import ca.spottedleaf.dataconverter.types.Types;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 public final class V105 {
 
@@ -15,7 +18,7 @@ public final class V105 {
     public static void register() {
         MCTypeRegistry.ITEM_STACK.addConverterForId("minecraft:spawn_egg", new DataConverter<>(VERSION) {
             @Override
-            public MapType<String> convert(final MapType<String> data, final long sourceVersion, final long toVersion) {
+            public @Nullable MapType<String> convert(final @NotNull MapType<String> data, final long sourceVersion, final long toVersion) {
                 MapType<String> tag = data.getMap("tag");
                 if (tag == null) {
                     tag = Types.NBT.createEmptyMap();
diff --git a/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V106.java b/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V106.java
index 951838b0f4f2b4ed82d707706ef15d779f3f41eb..929e90af3e954b66787c0763f7986b3309d7bd80 100644
--- a/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V106.java
+++ b/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V106.java
@@ -8,6 +8,9 @@ import ca.spottedleaf.dataconverter.types.ObjectType;
 import ca.spottedleaf.dataconverter.types.ListType;
 import ca.spottedleaf.dataconverter.types.MapType;
 import ca.spottedleaf.dataconverter.types.Types;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 public final class V106 {
 
@@ -18,7 +21,7 @@ public final class V106 {
 
         MCTypeRegistry.UNTAGGED_SPAWNER.addStructureConverter(new DataConverter<>(VERSION) {
             @Override
-            public MapType<String> convert(final MapType<String> data, final long sourceVersion, final long toVersion) {
+            public @Nullable MapType<String> convert(final @NotNull MapType<String> data, final long sourceVersion, final long toVersion) {
                 // While all converters for spawners check the id for this version, we don't because spawners exist in minecarts. ooops! Loading a chunk
                 // with a minecart spawner from 1.7.10 in 1.16.5 vanilla will fail to convert! Clearly there was a mistake in how they
                 // used and applied spawner converters. In anycase, do not check the id - we are not guaranteed to be a tile
@@ -64,7 +67,7 @@ public final class V106 {
             }
         });
 
-        MCTypeRegistry.UNTAGGED_SPAWNER.addStructureWalker(VERSION, (final MapType<String> data, final long fromVersion, final long toVersion) -> {
+        MCTypeRegistry.UNTAGGED_SPAWNER.addStructureWalker(VERSION, (final @NotNull MapType<String> data, final long fromVersion, final long toVersion) -> {
             final ListType spawnPotentials = data.getList("SpawnPotentials", ObjectType.MAP);
             if (spawnPotentials != null) {
                 for (int i = 0, len = spawnPotentials.size(); i < len; ++i) {
diff --git a/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V107.java b/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V107.java
index aa8c8d22ee2a77604d923b62f5a93ede9b3f333f..aeea8b001fcfb3453baa8852c91d244f4298d2d8 100644
--- a/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V107.java
+++ b/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V107.java
@@ -4,6 +4,9 @@ import ca.spottedleaf.dataconverter.converters.DataConverter;
 import ca.spottedleaf.dataconverter.minecraft.MCVersions;
 import ca.spottedleaf.dataconverter.minecraft.datatypes.MCTypeRegistry;
 import ca.spottedleaf.dataconverter.types.MapType;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 public final class V107 {
 
@@ -24,7 +27,7 @@ public final class V107 {
             // No harm in catching more cases here.
 
             @Override
-            public MapType<String> convert(final MapType<String> data, final long sourceVersion, final long toVersion) {
+            public @Nullable MapType<String> convert(final @NotNull MapType<String> data, final long sourceVersion, final long toVersion) {
                 String newId = "MinecartRideable"; // dfl
                 final int type = data.getInt("Type");
                 data.remove("Type");
diff --git a/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V108.java b/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V108.java
index 6bc4e2939bd26538492a7b94b743957d56ddc575..ec65d7bb674cfe0382187ac81897a2d881d04fce 100644
--- a/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V108.java
+++ b/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V108.java
@@ -5,6 +5,8 @@ import ca.spottedleaf.dataconverter.minecraft.MCVersions;
 import ca.spottedleaf.dataconverter.minecraft.datatypes.MCTypeRegistry;
 import ca.spottedleaf.dataconverter.types.MapType;
 import com.mojang.logging.LogUtils;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
 import org.slf4j.Logger;
 
 import java.util.UUID;
@@ -19,7 +21,7 @@ public final class V108 {
         // Convert String UUID into UUIDMost and UUIDLeast
         MCTypeRegistry.ENTITY.addStructureConverter(new DataConverter<>(VERSION) {
             @Override
-            public MapType<String> convert(final MapType<String> data, final long sourceVersion, final long toVersion) {
+            public @Nullable MapType<String> convert(final @NotNull MapType<String> data, final long sourceVersion, final long toVersion) {
                 final String uuidString = data.getString("UUID");
 
                 if (uuidString == null) {
diff --git a/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V109.java b/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V109.java
index 5e0e52fa2d8988ca973f8a97b2374a8c3d4ef80c..7307f8337b87dd5aa9c6d4a25388781277fd2f79 100644
--- a/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V109.java
+++ b/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V109.java
@@ -5,6 +5,9 @@ import ca.spottedleaf.dataconverter.minecraft.MCVersions;
 import ca.spottedleaf.dataconverter.minecraft.datatypes.MCTypeRegistry;
 import ca.spottedleaf.dataconverter.types.MapType;
 import com.google.common.collect.Sets;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 import java.util.Set;
 
 public final class V109 {
@@ -54,7 +57,7 @@ public final class V109 {
         // Converts health to be in float, and cleans up whatever the hell was going on with HealF and Health...
         MCTypeRegistry.ENTITY.addStructureConverter(new DataConverter<>(VERSION) {
             @Override
-            public MapType<String> convert(final MapType<String> data, final long sourceVersion, final long toVersion) {
+            public @Nullable MapType<String> convert(final @NotNull MapType<String> data, final long sourceVersion, final long toVersion) {
                 final Number healF = data.getNumber("HealF");
                 final Number heal = data.getNumber("Health");
 
diff --git a/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V110.java b/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V110.java
index 9771810a1f1cbf760fd9a8a5fd575f6052f40ea9..7257d38ea63880aea3210fda45cbdfe70ec440f7 100644
--- a/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V110.java
+++ b/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V110.java
@@ -6,6 +6,9 @@ import ca.spottedleaf.dataconverter.minecraft.datatypes.MCTypeRegistry;
 import ca.spottedleaf.dataconverter.types.ObjectType;
 import ca.spottedleaf.dataconverter.types.MapType;
 import ca.spottedleaf.dataconverter.types.Types;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 public final class V110 {
 
@@ -16,7 +19,7 @@ public final class V110 {
         // in V99, it doesn't need to be added here.
         MCTypeRegistry.ENTITY.addConverterForId("EntityHorse", new DataConverter<>(VERSION) {
             @Override
-            public MapType<String> convert(final MapType<String> data, final long sourceVersion, final long toVersion) {
+            public @Nullable MapType<String> convert(final @NotNull MapType<String> data, final long sourceVersion, final long toVersion) {
                 if (!data.getBoolean("Saddle") || data.hasKey("SaddleItem", ObjectType.MAP)) {
                     return null;
                 }
diff --git a/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V111.java b/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V111.java
index 5bae7effda7761a3f2a0a2ce550d867cb2c18b99..d7c84aabec78d91c47dd3807a430f868830eedb8 100644
--- a/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V111.java
+++ b/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V111.java
@@ -4,6 +4,9 @@ import ca.spottedleaf.dataconverter.converters.DataConverter;
 import ca.spottedleaf.dataconverter.minecraft.MCVersions;
 import ca.spottedleaf.dataconverter.minecraft.datatypes.MCTypeRegistry;
 import ca.spottedleaf.dataconverter.types.MapType;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 public final class V111 {
 
@@ -33,7 +36,7 @@ public final class V111 {
         }
 
         @Override
-        public MapType<String> convert(final MapType<String> data, final long sourceVersion, final long toVersion) {
+        public @Nullable MapType<String> convert(final @NotNull MapType<String> data, final long sourceVersion, final long toVersion) {
             if (data.getNumber("Facing") != null) {
                 return null;
             }
diff --git a/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V1125.java b/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V1125.java
index a6d3c28e8c97b53f388c03ccad3449390937d3b2..5b80c2fd414ead5b233fced1f2a12b5fe7e2eff7 100644
--- a/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V1125.java
+++ b/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V1125.java
@@ -9,6 +9,9 @@ import ca.spottedleaf.dataconverter.types.ObjectType;
 import ca.spottedleaf.dataconverter.types.ListType;
 import ca.spottedleaf.dataconverter.types.MapType;
 import ca.spottedleaf.dataconverter.types.Types;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 public final class V1125 {
 
@@ -18,7 +21,7 @@ public final class V1125 {
     public static void register() {
         MCTypeRegistry.CHUNK.addStructureConverter(new DataConverter<>(VERSION) {
             @Override
-            public MapType<String> convert(final MapType<String> data, final long sourceVersion, final long toVersion) {
+            public @Nullable MapType<String> convert(final @NotNull MapType<String> data, final long sourceVersion, final long toVersion) {
                 final MapType<String> level = data.getMap("Level");
                 if (level == null) {
                     return null;
@@ -74,7 +77,7 @@ public final class V1125 {
 
         MCTypeRegistry.ITEM_STACK.addConverterForId("minecraft:bed", new DataConverter<>(VERSION) {
             @Override
-            public MapType<String> convert(final MapType<String> data, final long sourceVersion, final long toVersion) {
+            public @Nullable MapType<String> convert(final @NotNull MapType<String> data, final long sourceVersion, final long toVersion) {
                 if (data.getShort("Damage") == 0) {
                     data.setShort("Damage", (short)14); // Red
                 }
@@ -84,7 +87,7 @@ public final class V1125 {
         });
 
 
-        MCTypeRegistry.ADVANCEMENTS.addStructureWalker(VERSION, (final MapType<String> data, final long fromVersion, final long toVersion) -> {
+        MCTypeRegistry.ADVANCEMENTS.addStructureWalker(VERSION, (final @NotNull MapType<String> data, final long fromVersion, final long toVersion) -> {
             WalkerUtils.convertKeys(MCTypeRegistry.BIOME, data.getMap("minecraft:adventure/adventuring_time"), "criteria", fromVersion, toVersion);
             WalkerUtils.convertKeys(MCTypeRegistry.ENTITY_NAME, data.getMap("minecraft:adventure/kill_a_mob"), "criteria", fromVersion, toVersion);
             WalkerUtils.convertKeys(MCTypeRegistry.ENTITY_NAME, data.getMap("minecraft:adventure/kill_all_mobs"), "criteria", fromVersion, toVersion);
diff --git a/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V113.java b/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V113.java
index 8b93bba2b084e20d346461f53d2f7662c3d6238b..4ca7f46f89d9bbdbf0ff8608b1cb07bc5ba60451 100644
--- a/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V113.java
+++ b/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V113.java
@@ -6,12 +6,15 @@ import ca.spottedleaf.dataconverter.minecraft.datatypes.MCTypeRegistry;
 import ca.spottedleaf.dataconverter.types.ObjectType;
 import ca.spottedleaf.dataconverter.types.ListType;
 import ca.spottedleaf.dataconverter.types.MapType;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 public final class V113 {
 
     protected static final int VERSION = MCVersions.V15W33C + 1;
 
-    protected static void checkList(final MapType<String> data, final String id, final int requiredLength) {
+    protected static void checkList(final @NotNull MapType<String> data, final String id, final int requiredLength) {
         final ListType list = data.getList(id, ObjectType.FLOAT);
         if (list != null && list.size() == requiredLength) {
             for (int i = 0; i < requiredLength; ++i) {
@@ -28,7 +31,7 @@ public final class V113 {
         // Removes "HandDropChances" and "ArmorDropChances" if they're empty.
         MCTypeRegistry.ENTITY.addStructureConverter(new DataConverter<>(VERSION) {
             @Override
-            public MapType<String> convert(final MapType<String> data, final long sourceVersion, final long toVersion) {
+            public @Nullable MapType<String> convert(final @NotNull MapType<String> data, final long sourceVersion, final long toVersion) {
                 checkList(data, "HandDropChances", 2);
                 checkList(data, "ArmorDropChances", 4);
                 return null;
diff --git a/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V1344.java b/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V1344.java
index ac390a6111ba1a4aae3d5726747f60f4929fa254..3b7f3adc081897af5b0068e8fe494bae964f40df 100644
--- a/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V1344.java
+++ b/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V1344.java
@@ -5,6 +5,9 @@ import ca.spottedleaf.dataconverter.minecraft.MCVersions;
 import ca.spottedleaf.dataconverter.minecraft.datatypes.MCTypeRegistry;
 import ca.spottedleaf.dataconverter.types.MapType;
 import it.unimi.dsi.fastutil.ints.Int2ObjectOpenHashMap;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 public final class V1344 {
 
@@ -129,7 +132,7 @@ public final class V1344 {
     public static void register() {
         MCTypeRegistry.OPTIONS.addStructureConverter(new DataConverter<>(VERSION) {
             @Override
-            public MapType<String> convert(final MapType<String> data, final long sourceVersion, final long toVersion) {
+            public @Nullable MapType<String> convert(final @NotNull MapType<String> data, final long sourceVersion, final long toVersion) {
                 for (final String key : data.keys()) {
                     if (!key.startsWith("key_")) {
                         continue;
diff --git a/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V135.java b/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V135.java
index 764a56fda5ee909ac47a0c1b3b581c8c26deb591..e4ba3b0c5d26aad353c5e3498337ce1856e74099 100644
--- a/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V135.java
+++ b/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V135.java
@@ -9,6 +9,9 @@ import ca.spottedleaf.dataconverter.types.ObjectType;
 import ca.spottedleaf.dataconverter.types.ListType;
 import ca.spottedleaf.dataconverter.types.MapType;
 import ca.spottedleaf.dataconverter.types.Types;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 public final class V135 {
 
@@ -20,7 +23,7 @@ public final class V135 {
         // switch the data layout to be from highest rider to lowest rider, in terms of depth.
         MCTypeRegistry.ENTITY.addStructureConverter(new DataConverter<>(VERSION) {
             @Override
-            public MapType<String> convert(MapType<String> data, final long sourceVersion, final long toVersion) {
+            public @Nullable MapType<String> convert(@NotNull MapType<String> data, final long sourceVersion, final long toVersion) {
                 MapType<String> ret = null;
                 while (data.hasKey("Riding", ObjectType.MAP)) {
                     final MapType<String> riding = data.getMap("Riding");
@@ -39,7 +42,7 @@ public final class V135 {
 
 
         MCTypeRegistry.PLAYER.addStructureWalker(VERSION, new DataWalkerItemLists("Inventory", "EnderItems"));
-        MCTypeRegistry.PLAYER.addStructureWalker(VERSION, (final MapType<String> data, final long fromVersion, final long toVersion) -> {
+        MCTypeRegistry.PLAYER.addStructureWalker(VERSION, (final @NotNull MapType<String> data, final long fromVersion, final long toVersion) -> {
             final MapType<String> rootVehicle = data.getMap("RootVehicle");
             if (rootVehicle != null) {
                 WalkerUtils.convert(MCTypeRegistry.ENTITY, rootVehicle, "Entity", fromVersion, toVersion);
@@ -48,7 +51,7 @@ public final class V135 {
             return null;
         });
 
-        MCTypeRegistry.ENTITY.addStructureWalker(VERSION, (final MapType<String> data, final long fromVersion, final long toVersion) -> {
+        MCTypeRegistry.ENTITY.addStructureWalker(VERSION, (final @NotNull MapType<String> data, final long fromVersion, final long toVersion) -> {
             WalkerUtils.convertList(MCTypeRegistry.ENTITY, data, "Passengers", fromVersion, toVersion);
 
             return null;
diff --git a/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V143.java b/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V143.java
index 451e837349e10f1e76ac7d9f5d49cbe0ff630f4d..e679478aff882fae8a5a576e755e06e356269367 100644
--- a/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V143.java
+++ b/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V143.java
@@ -2,13 +2,15 @@ package ca.spottedleaf.dataconverter.minecraft.versions;
 
 import ca.spottedleaf.dataconverter.minecraft.MCVersions;
 import ca.spottedleaf.dataconverter.minecraft.converters.entity.ConverterAbstractEntityRename;
+import org.jetbrains.annotations.NotNull;
+
 
 public final class V143 {
 
     protected static final int VERSION = MCVersions.V15W44B;
 
     public static void register() {
-        ConverterAbstractEntityRename.register(VERSION, (final String input) -> {
+        ConverterAbstractEntityRename.register(VERSION, (final @NotNull String input) -> {
             return "TippedArrow".equals(input) ? "Arrow" : null;
         });
     }
diff --git a/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V1446.java b/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V1446.java
index fc0ece569baed94bbf3cbbaa21a397fdc37e51e8..eb0244c89fa55099e0d00f7cfa1d51c1baaea68c 100644
--- a/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V1446.java
+++ b/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V1446.java
@@ -4,6 +4,9 @@ import ca.spottedleaf.dataconverter.converters.DataConverter;
 import ca.spottedleaf.dataconverter.minecraft.MCVersions;
 import ca.spottedleaf.dataconverter.minecraft.datatypes.MCTypeRegistry;
 import ca.spottedleaf.dataconverter.types.MapType;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 public final class V1446 {
 
@@ -12,7 +15,7 @@ public final class V1446 {
     public static void register() {
         MCTypeRegistry.OPTIONS.addStructureConverter(new DataConverter<>(VERSION) {
             @Override
-            public MapType<String> convert(final MapType<String> data, final long sourceVersion, final long toVersion) {
+            public @Nullable MapType<String> convert(final @NotNull MapType<String> data, final long sourceVersion, final long toVersion) {
                 for (final String key : data.keys()) {
                     if (!key.startsWith("key_")) {
                         continue;
diff --git a/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V1450.java b/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V1450.java
index 711222cd33ee557b7f3d1f6ae73ad45d1caf6768..dea4cc835af0ec0491f0d5f413374e2cf265fd15 100644
--- a/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V1450.java
+++ b/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V1450.java
@@ -5,6 +5,8 @@ import ca.spottedleaf.dataconverter.minecraft.MCVersions;
 import ca.spottedleaf.dataconverter.minecraft.converters.helpers.HelperBlockFlatteningV1450;
 import ca.spottedleaf.dataconverter.minecraft.datatypes.MCTypeRegistry;
 import ca.spottedleaf.dataconverter.types.MapType;
+import org.jetbrains.annotations.Nullable;
+
 
 public final class V1450 {
 
@@ -13,7 +15,7 @@ public final class V1450 {
     public static void register() {
         MCTypeRegistry.BLOCK_STATE.addStructureConverter(new DataConverter<>(VERSION) {
             @Override
-            public MapType<String> convert(final MapType<String> data, final long sourceVersion, final long toVersion) {
+            public @Nullable MapType<String> convert(final MapType<String> data, final long sourceVersion, final long toVersion) {
                 final MapType<String> ret = HelperBlockFlatteningV1450.flattenNBT(data);
                 return ret == data ? null : ret.copy(); // copy to avoid problems with later state datafixers
             }
diff --git a/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V1451.java b/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V1451.java
index b88616e5af3b9f213bd7ee514ab191a468c61be7..9f42f4f6215ad7974f4daf51c9e5de7202858e2b 100644
--- a/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V1451.java
+++ b/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V1451.java
@@ -25,6 +25,9 @@ import net.minecraft.resources.ResourceLocation;
 import net.minecraft.util.datafix.fixes.BlockStateData;
 import net.minecraft.util.datafix.fixes.EntityBlockStateFix;
 import org.apache.commons.lang3.math.NumberUtils;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 import java.util.Iterator;
 import java.util.List;
 import java.util.stream.Collectors;
@@ -41,7 +44,7 @@ public final class V1451 {
         // V1
         MCTypeRegistry.CHUNK.addStructureConverter(new ConverterFlattenChunk());
 
-        MCTypeRegistry.CHUNK.addStructureWalker(VERSION, 1, (final MapType<String> data, final long fromVersion, final long toVersion) -> {
+        MCTypeRegistry.CHUNK.addStructureWalker(VERSION, 1, (final @NotNull MapType<String> data, final long fromVersion, final long toVersion) -> {
             final MapType<String> level = data.getMap("Level");
             if (level == null) {
                 return null;
@@ -72,7 +75,7 @@ public final class V1451 {
         // V2
         MCTypeRegistry.TILE_ENTITY.addConverterForId("minecraft:piston", new DataConverter<>(VERSION, 2) {
             @Override
-            public MapType<String> convert(final MapType<String> data, final long sourceVersion, final long toVersion) {
+            public @Nullable MapType<String> convert(final @NotNull MapType<String> data, final long sourceVersion, final long toVersion) {
                 final int blockId = data.getInt("blockId");
                 final int blockData = data.getInt("blockData") & 15;
 
@@ -91,7 +94,7 @@ public final class V1451 {
         ConverterFlattenEntity.register();
         MCTypeRegistry.ITEM_STACK.addConverterForId("minecraft:filled_map", new DataConverter<>(VERSION, 3) {
             @Override
-            public MapType<String> convert(final MapType<String> data, final long sourceVersion, final long toVersion) {
+            public @Nullable MapType<String> convert(final @NotNull MapType<String> data, final long sourceVersion, final long toVersion) {
                 MapType<String> tag = data.getMap("tag");
                 if (tag == null) {
                     tag = Types.NBT.createEmptyMap();
@@ -121,7 +124,7 @@ public final class V1451 {
         MCTypeRegistry.ENTITY.addWalker(VERSION, 3, "minecraft:hopper_minecart", new DataWalkerItemLists("Items"));
         MCTypeRegistry.ENTITY.addWalker(VERSION, 3, "minecraft:minecart", new DataWalkerTypePaths<>(MCTypeRegistry.BLOCK_STATE, "DisplayState"));
         MCTypeRegistry.ENTITY.addWalker(VERSION, 3, "minecraft:spawner_minecart", new DataWalkerTypePaths<>(MCTypeRegistry.BLOCK_STATE, "DisplayState"));
-        MCTypeRegistry.ENTITY.addWalker(VERSION, 3, "minecraft:spawner_minecart", (final MapType<String> data, final long fromVersion, final long toVersion) -> {
+        MCTypeRegistry.ENTITY.addWalker(VERSION, 3, "minecraft:spawner_minecart", (final @NotNull MapType<String> data, final long fromVersion, final long toVersion) -> {
             MCTypeRegistry.UNTAGGED_SPAWNER.convert(data, fromVersion, toVersion);
             return null;
         });
@@ -130,7 +133,7 @@ public final class V1451 {
         // V4
         MCTypeRegistry.BLOCK_NAME.addConverter(new DataConverter<>(VERSION, 4) {
             @Override
-            public Object convert(final Object data, final long sourceVersion, final long toVersion) {
+            public @Nullable Object convert(final Object data, final long sourceVersion, final long toVersion) {
                 if (data instanceof Number) {
                     return HelperBlockFlatteningV1450.getNameForId(((Number)data).intValue());
                 } else if (data instanceof String) {
@@ -160,7 +163,7 @@ public final class V1451 {
          */
         MCTypeRegistry.TILE_ENTITY.addConverterForId("minecraft:banner", new DataConverter<>(VERSION, 5) {
             @Override
-            public MapType<String> convert(final MapType<String> data, final long sourceVersion, final long toVersion) {
+            public @Nullable MapType<String> convert(final @NotNull MapType<String> data, final long sourceVersion, final long toVersion) {
                 final Number base = data.getNumber("Base");
                 if (base != null) {
                     data.setInt("Base", 15 - base.intValue());
@@ -188,7 +191,7 @@ public final class V1451 {
             private final Splitter BLOCK_SPLITTER = Splitter.on(':').limit(3);
 
             // idk man i just copy and pasted this one
-            private String fixGeneratorSettings(final String generatorSettings) {
+            private @NotNull String fixGeneratorSettings(final @NotNull String generatorSettings) {
                 if (generatorSettings.isEmpty()) {
                     return "minecraft:bedrock,2*minecraft:dirt,minecraft:grass_block;1;village";
                 } else {
@@ -240,7 +243,7 @@ public final class V1451 {
             }
 
             @Override
-            public MapType<String> convert(final MapType<String> data, final long sourceVersion, final long toVersion) {
+            public @Nullable MapType<String> convert(final @NotNull MapType<String> data, final long sourceVersion, final long toVersion) {
                 if (!"flat".equalsIgnoreCase(data.getString("generatorName"))) {
                     return null;
                 }
@@ -260,7 +263,7 @@ public final class V1451 {
         MCTypeRegistry.STATS.addStructureConverter(new ConverterFlattenStats());
         MCTypeRegistry.TILE_ENTITY.addConverterForId("minecraft:jukebox", new DataConverter<>(VERSION, 6) {
             @Override
-            public MapType<String> convert(final MapType<String> data, final long sourceVersion, final long toVersion) {
+            public @Nullable MapType<String> convert(final @NotNull MapType<String> data, final long sourceVersion, final long toVersion) {
                 final int record = data.getInt("Record");
                 if (record <= 0) {
                     return null;
@@ -283,7 +286,7 @@ public final class V1451 {
             }
         });
 
-        MCTypeRegistry.STATS.addStructureWalker(VERSION, 6, (final MapType<String> data, final long fromVersion, final long toVersion) -> {
+        MCTypeRegistry.STATS.addStructureWalker(VERSION, 6, (final @NotNull MapType<String> data, final long fromVersion, final long toVersion) -> {
             final MapType<String> stats = data.getMap("stats");
             if (stats == null) {
                 return null;
@@ -304,13 +307,13 @@ public final class V1451 {
         });
 
         MCTypeRegistry.OBJECTIVE.addStructureHook(VERSION, 6, new DataHook<>() {
-            private static String packWithDot(final String string) {
+            private static @NotNull String packWithDot(final @NotNull String string) {
                 final ResourceLocation resourceLocation = ResourceLocation.tryParse(string);
                 return resourceLocation != null ? resourceLocation.getNamespace() + "." + resourceLocation.getPath() : string;
             }
 
             @Override
-            public MapType<String> preHook(final MapType<String> data, final long fromVersion, final long toVersion) {
+            public @Nullable MapType<String> preHook(final @NotNull MapType<String> data, final long fromVersion, final long toVersion) {
                 // unpack
                 final String criteriaName = data.getString("CriteriaName");
                 String type;
@@ -347,7 +350,7 @@ public final class V1451 {
             }
 
             @Override
-            public MapType<String> postHook(final MapType<String> data, final long fromVersion, final long toVersion) {
+            public @Nullable MapType<String> postHook(final @NotNull MapType<String> data, final long fromVersion, final long toVersion) {
                 // repack
                 final MapType<String> criteriaType = data.getMap("CriteriaType");
 
@@ -377,7 +380,7 @@ public final class V1451 {
             }
         });
 
-        MCTypeRegistry.OBJECTIVE.addStructureWalker(VERSION, 6, (final MapType<String> data, final long fromVersion, final long toVersion) -> {
+        MCTypeRegistry.OBJECTIVE.addStructureWalker(VERSION, 6, (final @NotNull MapType<String> data, final long fromVersion, final long toVersion) -> {
             final MapType<String> criteriaType = data.getMap("CriteriaType");
             if (criteriaType == null) {
                 return null;
@@ -417,7 +420,7 @@ public final class V1451 {
 
         // V7
         MCTypeRegistry.STRUCTURE_FEATURE.addStructureConverter(new DataConverter<>(VERSION, 7) {
-            private static void convertToBlockState(final MapType<String> data, final String path) {
+            private static void convertToBlockState(final @NotNull MapType<String> data, final String path) {
                 final Number number = data.getNumber(path);
                 if (number == null) {
                     return;
@@ -427,7 +430,7 @@ public final class V1451 {
             }
 
             @Override
-            public MapType<String> convert(final MapType<String> data, final long sourceVersion, final long toVersion) {
+            public @Nullable MapType<String> convert(final @NotNull MapType<String> data, final long sourceVersion, final long toVersion) {
                 final ListType children = data.getList("Children", ObjectType.MAP);
                 if (children == null) {
                     return null;
@@ -458,7 +461,7 @@ public final class V1451 {
 
         // convert villagers to trade with pumpkins and not the carved pumpkin
         MCTypeRegistry.ENTITY.addConverterForId("minecraft:villager", new DataConverter<>(VERSION, 7) {
-            private static void convertPumpkin(final MapType<String> data, final String path) {
+            private static void convertPumpkin(final @NotNull MapType<String> data, final String path) {
                 final MapType<String> item = data.getMap(path);
                 if (item == null) {
                     return;
@@ -472,7 +475,7 @@ public final class V1451 {
             }
 
             @Override
-            public MapType<String> convert(final MapType<String> data, final long sourceVersion, final long toVersion) {
+            public @Nullable MapType<String> convert(final @NotNull MapType<String> data, final long sourceVersion, final long toVersion) {
                 final MapType<String> offers = data.getMap("Offers");
                 if (offers != null) {
                     final ListType recipes = offers.getList("Recipes", ObjectType.MAP);
@@ -490,7 +493,7 @@ public final class V1451 {
             }
         });
 
-        MCTypeRegistry.STRUCTURE_FEATURE.addStructureWalker(VERSION, 7, (final MapType<String> data, final long fromVersion, final long toVersion) -> {
+        MCTypeRegistry.STRUCTURE_FEATURE.addStructureWalker(VERSION, 7, (final @NotNull MapType<String> data, final long fromVersion, final long toVersion) -> {
             final ListType list = data.getList("Children", ObjectType.MAP);
             if (list == null) {
                 return null;
diff --git a/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V1456.java b/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V1456.java
index 8ca5b9d7292ba9c81f7f0fdfb6ca8fd17f796990..a16b9e2bb54b63d232a60b745cc1a4646a89c5c2 100644
--- a/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V1456.java
+++ b/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V1456.java
@@ -4,6 +4,9 @@ import ca.spottedleaf.dataconverter.converters.DataConverter;
 import ca.spottedleaf.dataconverter.minecraft.MCVersions;
 import ca.spottedleaf.dataconverter.minecraft.datatypes.MCTypeRegistry;
 import ca.spottedleaf.dataconverter.types.MapType;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 public final class V1456 {
 
@@ -26,7 +29,7 @@ public final class V1456 {
     public static void register() {
         MCTypeRegistry.ENTITY.addConverterForId("minecraft:item_frame", new DataConverter<>(VERSION) {
             @Override
-            public MapType<String> convert(final MapType<String> data, final long sourceVersion, final long toVersion) {
+            public @Nullable MapType<String> convert(final @NotNull MapType<String> data, final long sourceVersion, final long toVersion) {
                 data.setByte("Facing", direction2dTo3d(data.getByte("Facing")));
                 return null;
             }
diff --git a/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V1458.java b/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V1458.java
index 1de3a47887f29134e3e0ae6467afb54c8ab7ef68..277c2984910bfeb7c0d0af93fc343a6ff854accc 100644
--- a/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V1458.java
+++ b/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V1458.java
@@ -5,12 +5,15 @@ import ca.spottedleaf.dataconverter.minecraft.MCVersions;
 import ca.spottedleaf.dataconverter.minecraft.datatypes.MCTypeRegistry;
 import ca.spottedleaf.dataconverter.types.MapType;
 import net.minecraft.network.chat.Component;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 public final class V1458 {
 
     protected static final int VERSION = MCVersions.V17W50A + 1;
 
-    public static MapType<String> updateCustomName(final MapType<String> data) {
+    public static @Nullable MapType<String> updateCustomName(final @NotNull MapType<String> data) {
         final String customName = data.getString("CustomName", "");
 
         if (customName.isEmpty()) {
@@ -26,14 +29,14 @@ public final class V1458 {
         // From CB
         MCTypeRegistry.PLAYER.addStructureConverter(new DataConverter<>(VERSION) {
             @Override
-            public MapType<String> convert(final MapType<String> data, final long sourceVersion, final long toVersion) {
+            public @Nullable MapType<String> convert(final @NotNull MapType<String> data, final long sourceVersion, final long toVersion) {
                 return updateCustomName(data);
             }
         });
 
         MCTypeRegistry.ENTITY.addStructureConverter(new DataConverter<>(VERSION) {
             @Override
-            public MapType<String> convert(final MapType<String> data, final long sourceVersion, final long toVersion) {
+            public @Nullable MapType<String> convert(final @NotNull MapType<String> data, final long sourceVersion, final long toVersion) {
                 if ("minecraft:commandblock_minecart".equals(data.getString("id"))) {
                     return null;
                 }
@@ -44,7 +47,7 @@ public final class V1458 {
 
         MCTypeRegistry.ITEM_STACK.addStructureConverter(new DataConverter<>(VERSION) {
             @Override
-            public MapType<String> convert(final MapType<String> data, final long sourceVersion, final long toVersion) {
+            public @Nullable MapType<String> convert(final @NotNull MapType<String> data, final long sourceVersion, final long toVersion) {
                 final MapType<String> tag = data.getMap("tag");
                 if (tag == null) {
                     return null;
@@ -72,7 +75,7 @@ public final class V1458 {
 
         MCTypeRegistry.TILE_ENTITY.addStructureConverter(new DataConverter<>(VERSION) {
             @Override
-            public MapType<String> convert(final MapType<String> data, final long sourceVersion, final long toVersion) {
+            public @Nullable MapType<String> convert(final @NotNull MapType<String> data, final long sourceVersion, final long toVersion) {
                 if ("minecraft:command_block".equals(data.getString("id"))) {
                     return null;
                 }
diff --git a/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V1460.java b/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V1460.java
index f68b561b2bb750d5f632f17e538337fa38108472..2333d51bf57e0fed523b4670254019ac26aa1d71 100644
--- a/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V1460.java
+++ b/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V1460.java
@@ -7,6 +7,9 @@ import ca.spottedleaf.dataconverter.minecraft.walkers.block_name.DataWalkerBlock
 import ca.spottedleaf.dataconverter.minecraft.walkers.itemstack.DataWalkerItemLists;
 import ca.spottedleaf.dataconverter.types.MapType;
 import net.minecraft.resources.ResourceLocation;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 import java.util.HashMap;
 import java.util.Locale;
 import java.util.Map;
@@ -34,7 +37,7 @@ public final class V1460 {
     public static void register() {
         MCTypeRegistry.ENTITY.addConverterForId("minecraft:painting", new DataConverter<>(VERSION) {
             @Override
-            public MapType<String> convert(final MapType<String> data, final long sourceVersion, final long toVersion) {
+            public @Nullable MapType<String> convert(final @NotNull MapType<String> data, final long sourceVersion, final long toVersion) {
                 String motive = data.getString("Motive");
                 if (motive != null) {
                     motive = motive.toLowerCase(Locale.ROOT);
diff --git a/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V1466.java b/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V1466.java
index c4fa8e36fb68a610106cee8bae1af243e51fae2e..0e890477656987fa6a301043e4e5fd948b929951 100644
--- a/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V1466.java
+++ b/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V1466.java
@@ -8,6 +8,9 @@ import ca.spottedleaf.dataconverter.types.ListType;
 import ca.spottedleaf.dataconverter.types.MapType;
 import ca.spottedleaf.dataconverter.types.ObjectType;
 import ca.spottedleaf.dataconverter.types.Types;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 public final class V1466 {
 
@@ -40,7 +43,7 @@ public final class V1466 {
 
         MCTypeRegistry.CHUNK.addStructureConverter(new DataConverter<>(VERSION) {
             @Override
-            public MapType<String> convert(final MapType<String> data, final long sourceVersion, final long toVersion) {
+            public @Nullable MapType<String> convert(final @NotNull MapType<String> data, final long sourceVersion, final long toVersion) {
                 final MapType<String> level = data.getMap("Level");
                 if (level == null) {
                     return null;
@@ -90,7 +93,7 @@ public final class V1466 {
         });
 
 
-        MCTypeRegistry.CHUNK.addStructureWalker(VERSION, (final MapType<String> data, final long fromVersion, final long toVersion) -> {
+        MCTypeRegistry.CHUNK.addStructureWalker(VERSION, (final @NotNull MapType<String> data, final long fromVersion, final long toVersion) -> {
             final MapType<String> level = data.getMap("Level");
             if (level == null) {
                 return null;
@@ -119,7 +122,7 @@ public final class V1466 {
 
             return null;
         });
-        MCTypeRegistry.STRUCTURE_FEATURE.addStructureWalker(VERSION, (final MapType<String> data, final long fromVersion, final long toVersion) -> {
+        MCTypeRegistry.STRUCTURE_FEATURE.addStructureWalker(VERSION, (final @NotNull MapType<String> data, final long fromVersion, final long toVersion) -> {
             final ListType list = data.getList("Children", ObjectType.MAP);
             if (list != null) {
                 for (int i = 0, len = list.size(); i < len; ++i) {
diff --git a/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V147.java b/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V147.java
index 68dd3ce7709a998bc50a5080fe9c805b71a88365..82d06528bc0462f03dd8a2c958539809165bcbe2 100644
--- a/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V147.java
+++ b/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V147.java
@@ -4,6 +4,9 @@ import ca.spottedleaf.dataconverter.converters.DataConverter;
 import ca.spottedleaf.dataconverter.minecraft.MCVersions;
 import ca.spottedleaf.dataconverter.minecraft.datatypes.MCTypeRegistry;
 import ca.spottedleaf.dataconverter.types.MapType;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 public final class V147 {
 
@@ -12,7 +15,7 @@ public final class V147 {
     public static void register() {
         MCTypeRegistry.ENTITY.addConverterForId("ArmorStand", new DataConverter<>(VERSION) {
             @Override
-            public MapType<String> convert(final MapType<String> data, final long sourceVersion, final long toVersion) {
+            public @Nullable MapType<String> convert(final @NotNull MapType<String> data, final long sourceVersion, final long toVersion) {
                 if (data.getBoolean("Silent") && !data.getBoolean("Marker")) {
                     data.remove("Silent");
                 }
diff --git a/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V1474.java b/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V1474.java
index 4cf1085b4392c9b348ebe65590cdbf287a908a38..4bd26ff5d31f5d22ccb04d09ea09c1d3e1183879 100644
--- a/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V1474.java
+++ b/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V1474.java
@@ -6,6 +6,9 @@ import ca.spottedleaf.dataconverter.minecraft.converters.blockname.ConverterAbst
 import ca.spottedleaf.dataconverter.minecraft.converters.itemname.ConverterAbstractItemRename;
 import ca.spottedleaf.dataconverter.minecraft.datatypes.MCTypeRegistry;
 import ca.spottedleaf.dataconverter.types.MapType;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 public final class V1474 {
 
@@ -14,7 +17,7 @@ public final class V1474 {
     public static void register() {
         MCTypeRegistry.ENTITY.addConverterForId("minecraft:shulker", new DataConverter<>(VERSION) {
             @Override
-            public MapType<String> convert(final MapType<String> data, final long sourceVersion, final long toVersion) {
+            public @Nullable MapType<String> convert(final @NotNull MapType<String> data, final long sourceVersion, final long toVersion) {
                 if (data.getInt("Color") == 10) {
                     data.setByte("Color", (byte)16);
                 }
@@ -22,10 +25,10 @@ public final class V1474 {
             }
         });
         // data hooks ensure the inputs are namespaced
-        ConverterAbstractBlockRename.register(VERSION, (final String old) -> {
+        ConverterAbstractBlockRename.register(VERSION, (final @NotNull String old) -> {
             return "minecraft:purple_shulker_box".equals(old) ? "minecraft:shulker_box" : null;
         });
-        ConverterAbstractItemRename.register(VERSION, (final String old) -> {
+        ConverterAbstractItemRename.register(VERSION, (final @NotNull String old) -> {
             return "minecraft:purple_shulker_box".equals(old) ? "minecraft:shulker_box" : null;
         });
 
diff --git a/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V1484.java b/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V1484.java
index f5b9c166304930e095bfc00e8f6b93edb706df48..b9d519303bd23ea9d2a550d26fcf83ca358d6757 100644
--- a/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V1484.java
+++ b/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V1484.java
@@ -7,6 +7,9 @@ import ca.spottedleaf.dataconverter.minecraft.converters.itemname.ConverterAbstr
 import ca.spottedleaf.dataconverter.minecraft.datatypes.MCTypeRegistry;
 import ca.spottedleaf.dataconverter.types.MapType;
 import com.google.common.collect.ImmutableMap;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 import java.util.Map;
 
 public final class V1484 {
@@ -24,7 +27,7 @@ public final class V1484 {
 
         MCTypeRegistry.CHUNK.addStructureConverter(new DataConverter<>(VERSION) {
             @Override
-            public MapType<String> convert(final MapType<String> data, final long sourceVersion, final long toVersion) {
+            public @Nullable MapType<String> convert(final @NotNull MapType<String> data, final long sourceVersion, final long toVersion) {
                 final MapType<String> level = data.getMap("Level");
 
                 if (level == null) {
diff --git a/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V1488.java b/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V1488.java
index cf3579524a9ba96f2065d98bca928bf920da081c..ceb52aca2506851059d5a61339f451494ef4afa5 100644
--- a/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V1488.java
+++ b/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V1488.java
@@ -9,12 +9,15 @@ import ca.spottedleaf.dataconverter.types.ListType;
 import ca.spottedleaf.dataconverter.types.MapType;
 import ca.spottedleaf.dataconverter.types.ObjectType;
 import com.google.common.collect.ImmutableMap;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 public final class V1488 {
 
     protected static final int VERSION = MCVersions.V18W19B + 3;
 
-    protected static boolean isIglooPiece(final MapType<String> piece) {
+    protected static boolean isIglooPiece(final @NotNull MapType<String> piece) {
         return "Iglu".equals(piece.getString("id"));
     }
 
@@ -32,21 +35,21 @@ public final class V1488 {
 
         MCTypeRegistry.TILE_ENTITY.addConverterForId("minecraft:command_block", new DataConverter<>(VERSION) {
             @Override
-            public MapType<String> convert(final MapType<String> data, final long sourceVersion, final long toVersion) {
+            public @Nullable MapType<String> convert(final @NotNull MapType<String> data, final long sourceVersion, final long toVersion) {
                 return V1458.updateCustomName(data);
             }
         });
 
         MCTypeRegistry.ENTITY.addConverterForId("minecraft:commandblock_minecart", new DataConverter<>(VERSION) {
             @Override
-            public MapType<String> convert(final MapType<String> data, final long sourceVersion, final long toVersion) {
+            public @Nullable MapType<String> convert(final @NotNull MapType<String> data, final long sourceVersion, final long toVersion) {
                 return V1458.updateCustomName(data);
             }
         });
 
         MCTypeRegistry.STRUCTURE_FEATURE.addStructureConverter(new DataConverter<>(VERSION) {
             @Override
-            public MapType<String> convert(final MapType<String> data, final long sourceVersion, final long toVersion) {
+            public @Nullable MapType<String> convert(final @NotNull MapType<String> data, final long sourceVersion, final long toVersion) {
                 final ListType children = data.getList("Children", ObjectType.MAP);
                 boolean isIgloo;
                 if (children != null) {
diff --git a/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V1492.java b/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V1492.java
index b8732c2035ee0659173a8299cc2b0a5f86ace7b0..cdb53d7aead420bdbc6376ff9b1530bdfb1221cd 100644
--- a/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V1492.java
+++ b/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V1492.java
@@ -8,6 +8,9 @@ import ca.spottedleaf.dataconverter.types.MapType;
 import ca.spottedleaf.dataconverter.types.ObjectType;
 import com.google.common.collect.ImmutableMap;
 import com.mojang.datafixers.util.Pair;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 public final class V1492 {
 
@@ -120,7 +123,7 @@ public final class V1492 {
     public static void register() {
         MCTypeRegistry.STRUCTURE_FEATURE.addStructureConverter(new DataConverter<>(VERSION) {
             @Override
-            public MapType<String> convert(final MapType<String> data, final long sourceVersion, final long toVersion) {
+            public @Nullable MapType<String> convert(final @NotNull MapType<String> data, final long sourceVersion, final long toVersion) {
                 final ListType children = data.getList("Children", ObjectType.MAP);
                 if (children == null) {
                     return null;
diff --git a/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V1494.java b/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V1494.java
index 50411042a83d58c4c36768a8f5196b4b41b4d095..aa725074f6e6229d50606030ad6057ecc8666c81 100644
--- a/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V1494.java
+++ b/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V1494.java
@@ -7,6 +7,9 @@ import ca.spottedleaf.dataconverter.types.ListType;
 import ca.spottedleaf.dataconverter.types.MapType;
 import ca.spottedleaf.dataconverter.types.ObjectType;
 import it.unimi.dsi.fastutil.ints.Int2ObjectOpenHashMap;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 public final class V1494 {
 
@@ -53,7 +56,7 @@ public final class V1494 {
     public static void register() {
         MCTypeRegistry.ITEM_STACK.addStructureConverter(new DataConverter<>(VERSION) {
             @Override
-            public MapType<String> convert(final MapType<String> data, final long sourceVersion, final long toVersion) {
+            public @Nullable MapType<String> convert(final @NotNull MapType<String> data, final long sourceVersion, final long toVersion) {
                 final MapType<String> tag = data.getMap("tag");
                 if (tag == null) {
                     return null;
diff --git a/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V1496.java b/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V1496.java
index c56d50c552d4609474f5b3b6b0b8be8b575764ea..12886845e3335d4134c1d8b504b6eee3fd494fca 100644
--- a/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V1496.java
+++ b/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V1496.java
@@ -13,6 +13,9 @@ import it.unimi.dsi.fastutil.ints.IntIterator;
 import it.unimi.dsi.fastutil.ints.IntOpenHashSet;
 import it.unimi.dsi.fastutil.objects.Object2IntOpenHashMap;
 import net.minecraft.util.datafix.PackedBitStorage;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 import java.util.Arrays;
 import java.util.HashSet;
 import java.util.Set;
@@ -68,7 +71,7 @@ public final class V1496 {
     public static void register() {
         MCTypeRegistry.CHUNK.addStructureConverter(new DataConverter<>(VERSION) {
             @Override
-            public MapType<String> convert(final MapType<String> data, final long sourceVersion, final long toVersion) {
+            public @Nullable MapType<String> convert(final @NotNull MapType<String> data, final long sourceVersion, final long toVersion) {
                 final MapType<String> level = data.getMap("Level");
                 if (level == null) {
                     return null;
@@ -228,15 +231,15 @@ public final class V1496 {
     public abstract static class Section {
         protected final ListType palette;
         protected final int sectionY;
-        protected PackedBitStorage storage;
+        protected @Nullable PackedBitStorage storage;
 
-        public Section(final MapType<String> section) {
+        public Section(final @NotNull MapType<String> section) {
             this.palette = section.getList("Palette", ObjectType.MAP);
             this.sectionY = section.getInt("Y");
             this.readStorage(section);
         }
 
-        protected void readStorage(final MapType<String> section) {
+        protected void readStorage(final @NotNull MapType<String> section) {
             if (this.initSkippable()) {
                 this.storage = null;
             } else {
@@ -246,7 +249,7 @@ public final class V1496 {
             }
         }
 
-        public void writeInto(final MapType<String> section) {
+        public void writeInto(final @NotNull MapType<String> section) {
             if (this.isSkippable()) {
                 return;
             }
@@ -279,7 +282,7 @@ public final class V1496 {
         private IntOpenHashSet logIds;
         private Int2IntOpenHashMap stateToIdMap;
 
-        public LeavesSection(final MapType<String> section) {
+        public LeavesSection(final @NotNull MapType<String> section) {
             super(section);
         }
 
@@ -310,7 +313,7 @@ public final class V1496 {
             return this.leaveIds.isEmpty() && this.logIds.isEmpty();
         }
 
-        private MapType<String> makeNewLeafTag(final String name, final boolean notDecayable, final int distance) {
+        private @NotNull MapType<String> makeNewLeafTag(final String name, final boolean notDecayable, final int distance) {
             final MapType<String> properties = Types.NBT.createEmptyMap();
             final MapType<String> ret = Types.NBT.createEmptyMap();
 
diff --git a/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V1500.java b/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V1500.java
index 9208152e2a158470f37b0eb022478e8e5287c12b..3d7484f80164a3f276f167779f0c680b813651b3 100644
--- a/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V1500.java
+++ b/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V1500.java
@@ -4,6 +4,9 @@ import ca.spottedleaf.dataconverter.converters.DataConverter;
 import ca.spottedleaf.dataconverter.minecraft.MCVersions;
 import ca.spottedleaf.dataconverter.minecraft.datatypes.MCTypeRegistry;
 import ca.spottedleaf.dataconverter.types.MapType;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 public final class V1500 {
 
@@ -14,7 +17,7 @@ public final class V1500 {
     public static void register() {
         MCTypeRegistry.TILE_ENTITY.addConverterForId("DUMMY", new DataConverter<>(VERSION) {
             @Override
-            public MapType<String> convert(final MapType<String> data, final long sourceVersion, final long toVersion) {
+            public @Nullable MapType<String> convert(final @NotNull MapType<String> data, final long sourceVersion, final long toVersion) {
                 data.setBoolean("keepPacked", true);
                 return null;
             }
diff --git a/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V1506.java b/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V1506.java
index ef679762aec326e5e1310390bca46971b548e7cd..065ee82c4a5f225c6f46c10c25497222ab410621 100644
--- a/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V1506.java
+++ b/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V1506.java
@@ -18,6 +18,9 @@ import net.minecraft.nbt.CompoundTag;
 import net.minecraft.nbt.NbtOps;
 import net.minecraft.nbt.Tag;
 import net.minecraft.util.GsonHelper;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.HashMap;
@@ -113,7 +116,7 @@ public final class V1506 {
     public static void register() {
         MCTypeRegistry.LEVEL.addStructureConverter(new DataConverter<>(VERSION) {
             @Override
-            public MapType<String> convert(final MapType<String> data, final long sourceVersion, final long toVersion) {
+            public @Nullable MapType<String> convert(final @NotNull MapType<String> data, final long sourceVersion, final long toVersion) {
                 final String generatorOptions = data.getString("generatorOptions");
                 final String generatorName = data.getString("generatorName");
                 if ("flat".equalsIgnoreCase(generatorName)) {
@@ -126,14 +129,14 @@ public final class V1506 {
         });
     }
 
-    private static MapType<String> convert(final String param0) {
+    private static @NotNull MapType<String> convert(final @NotNull String param0) {
         final Dynamic<Tag> dynamic = convert(param0, NbtOps.INSTANCE);
 
         return new NBTMapType((CompoundTag)dynamic.getValue());
     }
 
     // Yeah I ain't touching that. This is basically magic value hell.
-    private static <T> Dynamic<T> convert(final String generatorSettings, final DynamicOps<T> ops) {
+    private static <T> @NotNull Dynamic<T> convert(final @NotNull String generatorSettings, final @NotNull DynamicOps<T> ops) {
         final Iterator<String> splitSettings = Splitter.on(';').split(generatorSettings).iterator();
         String biome = "minecraft:plains";
         final Map<String, Map<String, String>> structures = Maps.newHashMap();
@@ -184,7 +187,7 @@ public final class V1506 {
         return new Dynamic<>(ops, ops.createMap(ImmutableMap.of(ops.createString("layers"), layerTag, ops.createString("biome"), ops.createString(biome), ops.createString("structures"), structuresTag)));
     }
 
-    private static Pair<Integer, String> getLayerInfoFromString(final String layerString) {
+    private static @Nullable Pair<Integer, String> getLayerInfoFromString(final @NotNull String layerString) {
         final String[] split = layerString.split("\\*", 2);
         int layerCount;
         if (split.length == 2) {
@@ -201,7 +204,7 @@ public final class V1506 {
         return Pair.of(layerCount, blockName);
     }
 
-    private static List<Pair<Integer, String>> getLayersInfoFromString(final String layersString) {
+    private static @NotNull List<Pair<Integer, String>> getLayersInfoFromString(final @NotNull String layersString) {
         final List<Pair<Integer, String>> ret = new ArrayList<>();
         final String[] layers = layersString.split(",");
 
diff --git a/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V1514.java b/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V1514.java
index 952598369cb8e5fd567544853bae4f4f7778f6d5..1f74f7a7678c22006f1678b977182c453e795b79 100644
--- a/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V1514.java
+++ b/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V1514.java
@@ -5,6 +5,9 @@ import ca.spottedleaf.dataconverter.minecraft.MCVersions;
 import ca.spottedleaf.dataconverter.minecraft.datatypes.MCTypeRegistry;
 import ca.spottedleaf.dataconverter.types.MapType;
 import net.minecraft.network.chat.Component;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 public final class V1514 {
 
@@ -15,7 +18,7 @@ public final class V1514 {
     public static void register() {
         MCTypeRegistry.OBJECTIVE.addStructureConverter(new DataConverter<>(VERSION) {
             @Override
-            public MapType<String> convert(final MapType<String> data, final long sourceVersion, final long toVersion) {
+            public @Nullable MapType<String> convert(final @NotNull MapType<String> data, final long sourceVersion, final long toVersion) {
                 final String displayName = data.getString("DisplayName");
                 if (displayName == null) {
                     return null;
@@ -31,7 +34,7 @@ public final class V1514 {
 
         MCTypeRegistry.TEAM.addStructureConverter(new DataConverter<>(VERSION) {
             @Override
-            public MapType<String> convert(final MapType<String> data, final long sourceVersion, final long toVersion) {
+            public @Nullable MapType<String> convert(final @NotNull MapType<String> data, final long sourceVersion, final long toVersion) {
                 final String displayName = data.getString("DisplayName");
                 if (displayName == null) {
                     return null;
@@ -46,12 +49,12 @@ public final class V1514 {
         });
 
         MCTypeRegistry.OBJECTIVE.addStructureConverter(new DataConverter<>(VERSION) {
-            private static String getRenderType(String string) {
+            private static String getRenderType(@NotNull String string) {
                 return string.equals("health") ? "hearts" : "integer";
             }
 
             @Override
-            public MapType<String> convert(final MapType<String> data, final long sourceVersion, final long toVersion) {
+            public @Nullable MapType<String> convert(final @NotNull MapType<String> data, final long sourceVersion, final long toVersion) {
                 final String renderType = data.getString("RenderType");
                 if (renderType != null) {
                     return null;
diff --git a/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V1624.java b/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V1624.java
index 7b304031e1e8af120c6535e599c2ee4fdbce1682..2a6b268108186066b82f0bf3566fdefa1de5e3e1 100644
--- a/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V1624.java
+++ b/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V1624.java
@@ -8,6 +8,8 @@ import ca.spottedleaf.dataconverter.types.MapType;
 import ca.spottedleaf.dataconverter.types.ObjectType;
 import com.mojang.logging.LogUtils;
 import it.unimi.dsi.fastutil.ints.IntOpenHashSet;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
 import org.slf4j.Logger;
 
 public final class V1624 {
@@ -21,7 +23,7 @@ public final class V1624 {
     public static void register() {
         MCTypeRegistry.CHUNK.addStructureConverter(new DataConverter<>(VERSION) {
             @Override
-            public MapType<String> convert(final MapType<String> data, final long sourceVersion, final long toVersion) {
+            public @Nullable MapType<String> convert(final @NotNull MapType<String> data, final long sourceVersion, final long toVersion) {
                 final MapType<String> level = data.getMap("Level");
 
                 if (level == null) {
@@ -84,7 +86,7 @@ public final class V1624 {
 
         private IntOpenHashSet chestIds;
 
-        public TrappedChestSection(final MapType<String> section) {
+        public TrappedChestSection(final @NotNull MapType<String> section) {
             super(section);
         }
 
diff --git a/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V165.java b/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V165.java
index 20eebfbbf913c92886a21fa4790c64cca8d8ba88..a45a001424a76b6336124963d4f488ff0df97bc1 100644
--- a/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V165.java
+++ b/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V165.java
@@ -12,6 +12,9 @@ import net.minecraft.network.chat.Component;
 import net.minecraft.util.GsonHelper;
 import net.minecraft.util.datafix.fixes.BlockEntitySignTextStrictJsonFix;
 import org.apache.commons.lang3.StringUtils;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 public final class V165 {
 
@@ -20,7 +23,7 @@ public final class V165 {
     public static void register() {
         MCTypeRegistry.ITEM_STACK.addStructureConverter(new DataConverter<>(VERSION) {
             @Override
-            public MapType<String> convert(final MapType<String> data, final long sourceVersion, final long toVersion) {
+            public @Nullable MapType<String> convert(final @NotNull MapType<String> data, final long sourceVersion, final long toVersion) {
                 final MapType<String> tag = data.getMap("tag");
                 if (tag == null) {
                     return null;
diff --git a/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V1803.java b/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V1803.java
index 5f22419287400399dfb31653a9208a54e0811f94..73b6015f498fdbb848aa9d13400a4cb66deb5bc5 100644
--- a/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V1803.java
+++ b/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V1803.java
@@ -7,6 +7,9 @@ import ca.spottedleaf.dataconverter.types.ListType;
 import ca.spottedleaf.dataconverter.types.MapType;
 import ca.spottedleaf.dataconverter.types.ObjectType;
 import net.minecraft.network.chat.Component;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 public final class V1803 {
 
@@ -17,7 +20,7 @@ public final class V1803 {
     public static void register() {
         MCTypeRegistry.ITEM_STACK.addStructureConverter(new DataConverter<>(VERSION) {
             @Override
-            public MapType<String> convert(final MapType<String> data, final long sourceVersion, final long toVersion) {
+            public @Nullable MapType<String> convert(final @NotNull MapType<String> data, final long sourceVersion, final long toVersion) {
                 final MapType<String> tag = data.getMap("tag");
 
                 if (tag == null) {
diff --git a/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V1904.java b/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V1904.java
index 09955e0c2245d8d42ce6ae664ae81e97db8a85f2..f81363baf825c4bd680c2023793a5d20ec30beaa 100644
--- a/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V1904.java
+++ b/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V1904.java
@@ -5,6 +5,9 @@ import ca.spottedleaf.dataconverter.minecraft.MCVersions;
 import ca.spottedleaf.dataconverter.minecraft.datatypes.MCTypeRegistry;
 import ca.spottedleaf.dataconverter.minecraft.walkers.itemstack.DataWalkerItemLists;
 import ca.spottedleaf.dataconverter.types.MapType;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 public final class V1904 {
 
@@ -19,7 +22,7 @@ public final class V1904 {
     public static void register() {
         MCTypeRegistry.ENTITY.addConverterForId("minecraft:ocelot", new DataConverter<>(VERSION) {
             @Override
-            public MapType<String> convert(final MapType<String> data, final long sourceVersion, final long toVersion) {
+            public @Nullable MapType<String> convert(final @NotNull MapType<String> data, final long sourceVersion, final long toVersion) {
                 final int catType = data.getInt("CatType");
 
                 if (catType == 0) {
diff --git a/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V1905.java b/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V1905.java
index 2eeec0d9cbd35ff20ba239ea7fd9c2f52f7e4f9e..d0cd8b60a8348912e021ab6f9d75d7fcdaf375b6 100644
--- a/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V1905.java
+++ b/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V1905.java
@@ -4,6 +4,9 @@ import ca.spottedleaf.dataconverter.converters.DataConverter;
 import ca.spottedleaf.dataconverter.minecraft.MCVersions;
 import ca.spottedleaf.dataconverter.minecraft.datatypes.MCTypeRegistry;
 import ca.spottedleaf.dataconverter.types.MapType;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 public final class V1905 {
 
@@ -14,7 +17,7 @@ public final class V1905 {
     public static void register() {
         MCTypeRegistry.CHUNK.addStructureConverter(new DataConverter<>(VERSION) {
             @Override
-            public MapType<String> convert(final MapType<String> data, final long sourceVersion, final long toVersion) {
+            public @Nullable MapType<String> convert(final @NotNull MapType<String> data, final long sourceVersion, final long toVersion) {
                 final MapType<String> level = data.getMap("Level");
 
                 if (level == null) {
diff --git a/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V1911.java b/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V1911.java
index b9cc2e4a2ae42e12ccf4e0b634fd74d3aad317ab..871b491bf87d9b5e0b641e381e92a766efc52cb8 100644
--- a/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V1911.java
+++ b/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V1911.java
@@ -5,6 +5,9 @@ import ca.spottedleaf.dataconverter.minecraft.MCVersions;
 import ca.spottedleaf.dataconverter.minecraft.datatypes.MCTypeRegistry;
 import ca.spottedleaf.dataconverter.types.MapType;
 import com.google.common.collect.ImmutableMap;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 import java.util.Map;
 
 public final class V1911 {
@@ -30,7 +33,7 @@ public final class V1911 {
     public static void register() {
         MCTypeRegistry.CHUNK.addStructureConverter(new DataConverter<>(VERSION) {
             @Override
-            public MapType<String> convert(final MapType<String> data, final long sourceVersion, final long toVersion) {
+            public @Nullable MapType<String> convert(final @NotNull MapType<String> data, final long sourceVersion, final long toVersion) {
                 final MapType<String> level = data.getMap("Level");
 
                 if (level == null) {
diff --git a/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V1914.java b/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V1914.java
index 8f5a48c4824080827d2dad057ae70dfd7a11818f..2a0bf5e9dfd03473f478c19f61bc9a2e398a0049 100644
--- a/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V1914.java
+++ b/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V1914.java
@@ -4,6 +4,9 @@ import ca.spottedleaf.dataconverter.converters.DataConverter;
 import ca.spottedleaf.dataconverter.minecraft.MCVersions;
 import ca.spottedleaf.dataconverter.minecraft.datatypes.MCTypeRegistry;
 import ca.spottedleaf.dataconverter.types.MapType;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 public final class V1914 {
 
@@ -12,7 +15,7 @@ public final class V1914 {
     public static void register() {
         MCTypeRegistry.TILE_ENTITY.addConverterForId("minecraft:chest", new DataConverter<>(VERSION) {
             @Override
-            public MapType<String> convert(final MapType<String> data, final long sourceVersion, final long toVersion) {
+            public @Nullable MapType<String> convert(final @NotNull MapType<String> data, final long sourceVersion, final long toVersion) {
                 final String lootTable = data.getString("LootTable");
 
                 if ("minecraft:chests/village_blacksmith".equals(lootTable)) {
diff --git a/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V1917.java b/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V1917.java
index 71538d858a681c91f7193003e0808cdb4fd1f847..122edca9d9328905e8a48cee1c4d43896b6d4fe2 100644
--- a/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V1917.java
+++ b/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V1917.java
@@ -4,6 +4,9 @@ import ca.spottedleaf.dataconverter.converters.DataConverter;
 import ca.spottedleaf.dataconverter.minecraft.MCVersions;
 import ca.spottedleaf.dataconverter.minecraft.datatypes.MCTypeRegistry;
 import ca.spottedleaf.dataconverter.types.MapType;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 public final class V1917 {
 
@@ -14,7 +17,7 @@ public final class V1917 {
     public static void register() {
         MCTypeRegistry.ENTITY.addConverterForId("minecraft:cat", new DataConverter<>(VERSION) {
             @Override
-            public MapType<String> convert(final MapType<String> data, final long sourceVersion, final long toVersion) {
+            public @Nullable MapType<String> convert(final @NotNull MapType<String> data, final long sourceVersion, final long toVersion) {
                 if (data.getInt("CatType") == 9) {
                     data.setInt("CatType", 10);
                 }
diff --git a/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V1918.java b/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V1918.java
index 28fc06da723792e9abc4999376c0941f9a835aff..7a9d13db33b9e0479bb4000ddbeb0c8e501dfb7c 100644
--- a/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V1918.java
+++ b/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V1918.java
@@ -5,6 +5,9 @@ import ca.spottedleaf.dataconverter.minecraft.MCVersions;
 import ca.spottedleaf.dataconverter.minecraft.datatypes.MCTypeRegistry;
 import ca.spottedleaf.dataconverter.types.MapType;
 import ca.spottedleaf.dataconverter.types.Types;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 public final class V1918 {
 
@@ -12,7 +15,7 @@ public final class V1918 {
 
     private V1918() {}
 
-    private static String getProfessionString(final int professionId, final int careerId) {
+    private static @NotNull String getProfessionString(final int professionId, final int careerId) {
         if (professionId == 0) {
             if (careerId == 2) {
                 return "minecraft:fisherman";
@@ -41,7 +44,7 @@ public final class V1918 {
     public static void register() {
         final DataConverter<MapType<String>, MapType<String>> converter = new DataConverter<>(VERSION) {
             @Override
-            public MapType<String> convert(final MapType<String> data, final long sourceVersion, final long toVersion) {
+            public @Nullable MapType<String> convert(final @NotNull MapType<String> data, final long sourceVersion, final long toVersion) {
                 final int profession = data.getInt("Profession");
                 final int career = data.getInt("Career");
                 final int careerLevel = data.getInt("CareerLevel", 1);
diff --git a/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V1920.java b/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V1920.java
index 224d35620e9d9e65f0642fdb13f80fcb2667a2ee..e4b1c30cce6becf4bc6c0127674ec65bf48e60a1 100644
--- a/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V1920.java
+++ b/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V1920.java
@@ -6,6 +6,9 @@ import ca.spottedleaf.dataconverter.minecraft.datatypes.MCTypeRegistry;
 import ca.spottedleaf.dataconverter.minecraft.walkers.itemstack.DataWalkerItemLists;
 import ca.spottedleaf.dataconverter.types.MapType;
 import ca.spottedleaf.dataconverter.util.NamespaceUtil;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 public final class V1920 {
 
@@ -16,7 +19,7 @@ public final class V1920 {
     public static void register() {
         MCTypeRegistry.CHUNK.addStructureConverter(new DataConverter<>(VERSION) {
             @Override
-            public MapType<String> convert(final MapType<String> data, final long sourceVersion, final long toVersion) {
+            public @Nullable MapType<String> convert(final @NotNull MapType<String> data, final long sourceVersion, final long toVersion) {
                 final MapType<String> level = data.getMap("Level");
                 if (level == null) {
                     return null;
@@ -59,7 +62,7 @@ public final class V1920 {
 
         MCTypeRegistry.STRUCTURE_FEATURE.addStructureConverter(new DataConverter<>(VERSION) {
             @Override
-            public MapType<String> convert(final MapType<String> data, final long sourceVersion, final long toVersion) {
+            public @Nullable MapType<String> convert(final @NotNull MapType<String> data, final long sourceVersion, final long toVersion) {
                 final String id = data.getString("id");
 
                 if ("minecraft:new_village".equals(NamespaceUtil.correctNamespace(id))) {
diff --git a/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V1925.java b/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V1925.java
index 19dc3d9b18d95d5f0e898d4c52c77a527066adf1..3cbd695e232e0b5dc437411be8a009753007d0e6 100644
--- a/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V1925.java
+++ b/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V1925.java
@@ -5,6 +5,9 @@ import ca.spottedleaf.dataconverter.minecraft.MCVersions;
 import ca.spottedleaf.dataconverter.minecraft.datatypes.MCTypeRegistry;
 import ca.spottedleaf.dataconverter.types.MapType;
 import ca.spottedleaf.dataconverter.types.Types;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 public final class V1925 {
 
@@ -13,7 +16,7 @@ public final class V1925 {
     public static void register() {
         MCTypeRegistry.SAVED_DATA.addStructureConverter(new DataConverter<>(VERSION) {
             @Override
-            public MapType<String> convert(final MapType<String> root, final long sourceVersion, final long toVersion) {
+            public @Nullable MapType<String> convert(final @NotNull MapType<String> root, final long sourceVersion, final long toVersion) {
                 final MapType<String> data = root.getMap("data");
                 if (data == null) {
                     final MapType<String> ret = Types.NBT.createEmptyMap();
diff --git a/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V1929.java b/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V1929.java
index d58c32aa89e416e40cfef7c5840b772dd4991173..6aba05fb02f801f4a61e711feb286dc93c2ac2f8 100644
--- a/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V1929.java
+++ b/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V1929.java
@@ -6,6 +6,8 @@ import ca.spottedleaf.dataconverter.minecraft.walkers.generic.WalkerUtils;
 import ca.spottedleaf.dataconverter.types.ListType;
 import ca.spottedleaf.dataconverter.types.MapType;
 import ca.spottedleaf.dataconverter.types.ObjectType;
+import org.jetbrains.annotations.NotNull;
+
 
 public final class V1929 {
 
@@ -14,7 +16,7 @@ public final class V1929 {
     private V1929() {}
 
     public static void register() {
-        MCTypeRegistry.ENTITY.addWalker(VERSION, "minecraft:wandering_trader", (final MapType<String> data, final long fromVersion, final long toVersion) -> {
+        MCTypeRegistry.ENTITY.addWalker(VERSION, "minecraft:wandering_trader", (final @NotNull MapType<String> data, final long fromVersion, final long toVersion) -> {
             WalkerUtils.convertList(MCTypeRegistry.ITEM_STACK, data, "Inventory", fromVersion, toVersion);
 
             final MapType<String> offers = data.getMap("Offers");
@@ -35,7 +37,7 @@ public final class V1929 {
 
             return null;
         });
-        MCTypeRegistry.ENTITY.addWalker(VERSION, "minecraft:trader_llama", (final MapType<String> data, final long fromVersion, final long toVersion) -> {
+        MCTypeRegistry.ENTITY.addWalker(VERSION, "minecraft:trader_llama", (final @NotNull MapType<String> data, final long fromVersion, final long toVersion) -> {
             WalkerUtils.convert(MCTypeRegistry.ITEM_STACK, data, "SaddleItem", fromVersion, toVersion);
             WalkerUtils.convert(MCTypeRegistry.ITEM_STACK, data, "DecorItem", fromVersion, toVersion);
 
diff --git a/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V1936.java b/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V1936.java
index 4e7b22874f17f531b583146db3aa4e57bdd5f27c..7f929775b9e73298054ce7dc8c7d9ecf23c0a3cf 100644
--- a/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V1936.java
+++ b/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V1936.java
@@ -4,6 +4,9 @@ import ca.spottedleaf.dataconverter.converters.DataConverter;
 import ca.spottedleaf.dataconverter.minecraft.MCVersions;
 import ca.spottedleaf.dataconverter.minecraft.datatypes.MCTypeRegistry;
 import ca.spottedleaf.dataconverter.types.MapType;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 public final class V1936 {
 
@@ -14,7 +17,7 @@ public final class V1936 {
     public static void register() {
         MCTypeRegistry.OPTIONS.addStructureConverter(new DataConverter<>(VERSION) {
             @Override
-            public MapType<String> convert(final MapType<String> data, final long sourceVersion, final long toVersion) {
+            public @Nullable MapType<String> convert(final @NotNull MapType<String> data, final long sourceVersion, final long toVersion) {
                 final String chatOpacity = data.getString("chatOpacity");
                 if (chatOpacity != null) {
                     // Vanilla uses createDouble here, but options is always string -> string. I presume they made
@@ -26,7 +29,7 @@ public final class V1936 {
         });
     }
 
-    private static double calculateBackground(final String opacity) {
+    private static double calculateBackground(final @NotNull String opacity) {
         try {
             final double d = 0.9D * Double.parseDouble(opacity) + 0.1D;
             return d / 2.0D;
diff --git a/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V1946.java b/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V1946.java
index 00e4bd45b04feee990d9d3414c34c0966e65e4ea..7931956e5ccd687752c297540ecb040a537ce2f9 100644
--- a/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V1946.java
+++ b/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V1946.java
@@ -5,6 +5,9 @@ import ca.spottedleaf.dataconverter.minecraft.MCVersions;
 import ca.spottedleaf.dataconverter.minecraft.datatypes.MCTypeRegistry;
 import ca.spottedleaf.dataconverter.types.MapType;
 import ca.spottedleaf.dataconverter.types.Types;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 public final class V1946 {
 
@@ -15,7 +18,7 @@ public final class V1946 {
     public static void register() {
         MCTypeRegistry.POI_CHUNK.addStructureConverter(new DataConverter<>(VERSION) {
             @Override
-            public MapType<String> convert(final MapType<String> data, final long sourceVersion, final long toVersion) {
+            public @Nullable MapType<String> convert(final @NotNull MapType<String> data, final long sourceVersion, final long toVersion) {
                 final MapType<String> sections = Types.NBT.createEmptyMap();
                 data.setMap("Sections", sections);
 
diff --git a/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V1948.java b/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V1948.java
index 6b4af1fe7c53e6122d7db952770d14a753f8cab3..9645576f2adeffa7a6c4dcd7324d61dfb30a2f71 100644
--- a/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V1948.java
+++ b/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V1948.java
@@ -4,6 +4,9 @@ import ca.spottedleaf.dataconverter.converters.DataConverter;
 import ca.spottedleaf.dataconverter.minecraft.MCVersions;
 import ca.spottedleaf.dataconverter.minecraft.datatypes.MCTypeRegistry;
 import ca.spottedleaf.dataconverter.types.MapType;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 public final class V1948 {
 
@@ -14,7 +17,7 @@ public final class V1948 {
     public static void register() {
         MCTypeRegistry.ITEM_STACK.addConverterForId("minecraft:white_banner", new DataConverter<>(VERSION) {
             @Override
-            public MapType<String> convert(final MapType<String> data, final long sourceVersion, final long toVersion) {
+            public @Nullable MapType<String> convert(final @NotNull MapType<String> data, final long sourceVersion, final long toVersion) {
                 final MapType<String> tag = data.getMap("tag");
                 if (tag == null) {
                     return null;
diff --git a/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V1953.java b/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V1953.java
index a73471e8f3df3b22349b2f842c3e98c2ff8bb5e1..859a609fa3e1ea036f154c160c3ad4cdc79bea85 100644
--- a/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V1953.java
+++ b/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V1953.java
@@ -4,6 +4,9 @@ import ca.spottedleaf.dataconverter.converters.DataConverter;
 import ca.spottedleaf.dataconverter.minecraft.MCVersions;
 import ca.spottedleaf.dataconverter.minecraft.datatypes.MCTypeRegistry;
 import ca.spottedleaf.dataconverter.types.MapType;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 public final class V1953 {
 
@@ -14,7 +17,7 @@ public final class V1953 {
     public static void register() {
         MCTypeRegistry.TILE_ENTITY.addConverterForId("minecraft:banner", new DataConverter<>(VERSION) {
             @Override
-            public MapType<String> convert(final MapType<String> data, final long sourceVersion, final long toVersion) {
+            public @Nullable MapType<String> convert(final @NotNull MapType<String> data, final long sourceVersion, final long toVersion) {
                 final String name = data.getString("CustomName");
                 if (name != null) {
                     data.setString("CustomName", name.replace("\"translate\":\"block.minecraft.illager_banner\"", "\"translate\":\"block.minecraft.ominous_banner\""));
diff --git a/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V1955.java b/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V1955.java
index 33bfe82709b507c4fd57199f5d8a44d131718d7f..c5ce2065717d5a1ed8dfb3781c1492b8ec7a69b7 100644
--- a/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V1955.java
+++ b/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V1955.java
@@ -8,6 +8,9 @@ import ca.spottedleaf.dataconverter.types.MapType;
 import ca.spottedleaf.dataconverter.types.ObjectType;
 import ca.spottedleaf.dataconverter.types.Types;
 import net.minecraft.util.Mth;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 public final class V1955 {
 
@@ -27,7 +30,7 @@ public final class V1955 {
         return LEVEL_XP_THRESHOLDS[Mth.clamp(level - 1, 0, LEVEL_XP_THRESHOLDS.length - 1)];
     }
 
-    static void addLevel(final MapType<String> data, final int level) {
+    static void addLevel(final @NotNull MapType<String> data, final int level) {
         MapType<String> villagerData = data.getMap("VillagerData");
         if (villagerData == null) {
             villagerData = Types.NBT.createEmptyMap();
@@ -36,14 +39,14 @@ public final class V1955 {
         villagerData.setInt("level", level);
     }
 
-    static void addXpFromLevel(final MapType<String> data, final int level) {
+    static void addXpFromLevel(final @NotNull MapType<String> data, final int level) {
         data.setInt("Xp", getMinXpPerLevel(level));
     }
 
     public static void register() {
         MCTypeRegistry.ENTITY.addConverterForId("minecraft:villager", new DataConverter<>(VERSION) {
             @Override
-            public MapType<String> convert(final MapType<String> data, final long sourceVersion, final long toVersion) {
+            public @Nullable MapType<String> convert(final @NotNull MapType<String> data, final long sourceVersion, final long toVersion) {
                 final MapType<String> villagerData = data.getMap("VillagerData");
                 int level = villagerData == null ? 0 : villagerData.getInt("level");
                 if (level == 0 || level == 1) {
@@ -73,7 +76,7 @@ public final class V1955 {
 
         MCTypeRegistry.ENTITY.addConverterForId("minecraft:zombie_villager", new DataConverter<>(VERSION) {
             @Override
-            public MapType<String> convert(final MapType<String> data, final long sourceVersion, final long toVersion) {
+            public @Nullable MapType<String> convert(final @NotNull MapType<String> data, final long sourceVersion, final long toVersion) {
                 final Number xp = data.getNumber("Xp");
                 if (xp == null) {
                     final int level;
diff --git a/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V1961.java b/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V1961.java
index 8bc6a8734034942a81b282b8766b21fddbe2b304..672a6be7924fdd214b18070cce04e8d14da4c3bf 100644
--- a/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V1961.java
+++ b/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V1961.java
@@ -4,6 +4,9 @@ import ca.spottedleaf.dataconverter.converters.DataConverter;
 import ca.spottedleaf.dataconverter.minecraft.MCVersions;
 import ca.spottedleaf.dataconverter.minecraft.datatypes.MCTypeRegistry;
 import ca.spottedleaf.dataconverter.types.MapType;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 public final class V1961 {
 
@@ -14,7 +17,7 @@ public final class V1961 {
     public static void register() {
         MCTypeRegistry.CHUNK.addStructureConverter(new DataConverter<>(VERSION) {
             @Override
-            public MapType<String> convert(final MapType<String> data, final long sourceVersion, final long toVersion) {
+            public @Nullable MapType<String> convert(final @NotNull MapType<String> data, final long sourceVersion, final long toVersion) {
                 final MapType<String> level = data.getMap("Level");
                 if (level == null) {
                     return null;
diff --git a/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V1963.java b/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V1963.java
index 5e4e7299cec1d3809d1b55ae460e64ec6d2bb477..456896c4a4017bdb362edd1121a4ec113ceb0415 100644
--- a/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V1963.java
+++ b/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V1963.java
@@ -6,6 +6,9 @@ import ca.spottedleaf.dataconverter.minecraft.datatypes.MCTypeRegistry;
 import ca.spottedleaf.dataconverter.types.ListType;
 import ca.spottedleaf.dataconverter.types.MapType;
 import ca.spottedleaf.dataconverter.types.ObjectType;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 public final class V1963 {
 
@@ -16,7 +19,7 @@ public final class V1963 {
     public static void register() {
         MCTypeRegistry.ENTITY.addConverterForId("minecraft:villager", new DataConverter<>(VERSION) {
             @Override
-            public MapType<String> convert(final MapType<String> data, final long sourceVersion, final long toVersion) {
+            public @Nullable MapType<String> convert(final @NotNull MapType<String> data, final long sourceVersion, final long toVersion) {
                 final ListType gossips = data.getList("Gossips", ObjectType.MAP);
                 if (gossips == null) {
                     return null;
diff --git a/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V2202.java b/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V2202.java
index 0bb378ac8e8d0a087359361281644a7f39cecfbe..fc499fa38097c1228251833b6c6b46f77460d2c4 100644
--- a/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V2202.java
+++ b/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V2202.java
@@ -4,6 +4,9 @@ import ca.spottedleaf.dataconverter.converters.DataConverter;
 import ca.spottedleaf.dataconverter.minecraft.MCVersions;
 import ca.spottedleaf.dataconverter.minecraft.datatypes.MCTypeRegistry;
 import ca.spottedleaf.dataconverter.types.MapType;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 public final class V2202 {
 
@@ -14,7 +17,7 @@ public final class V2202 {
     public static void register() {
         MCTypeRegistry.CHUNK.addStructureConverter(new DataConverter<>(VERSION) {
             @Override
-            public MapType<String> convert(final MapType<String> data, final long sourceVersion, final long toVersion) {
+            public @Nullable MapType<String> convert(final @NotNull MapType<String> data, final long sourceVersion, final long toVersion) {
                 final MapType<String> level = data.getMap("Level");
                 if (level == null) {
                     return null;
diff --git a/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V2211.java b/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V2211.java
index 6cff6d723616e0a38811872f7b5d28799240ddfe..71147f0f6a9d6028829a4d0a0bf11aaf6ae5ee01 100644
--- a/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V2211.java
+++ b/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V2211.java
@@ -5,6 +5,9 @@ import ca.spottedleaf.dataconverter.minecraft.MCVersions;
 import ca.spottedleaf.dataconverter.minecraft.datatypes.MCTypeRegistry;
 import ca.spottedleaf.dataconverter.types.MapType;
 import ca.spottedleaf.dataconverter.types.ObjectType;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 public final class V2211 {
 
@@ -15,7 +18,7 @@ public final class V2211 {
     public static void register() {
         MCTypeRegistry.STRUCTURE_FEATURE.addStructureConverter(new DataConverter<>(VERSION) {
             @Override
-            public MapType<String> convert(final MapType<String> data, final long sourceVersion, final long toVersion) {
+            public @Nullable MapType<String> convert(final @NotNull MapType<String> data, final long sourceVersion, final long toVersion) {
                 if (!data.hasKey("references", ObjectType.NUMBER)) {
                     return null;
                 }
diff --git a/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V2218.java b/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V2218.java
index e06a98a01086c9d6eb9fc80a151f0403247b0033..27e7bf7d72a65148bc51036af1987e5aa8f16c20 100644
--- a/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V2218.java
+++ b/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V2218.java
@@ -4,6 +4,9 @@ import ca.spottedleaf.dataconverter.converters.DataConverter;
 import ca.spottedleaf.dataconverter.minecraft.MCVersions;
 import ca.spottedleaf.dataconverter.minecraft.datatypes.MCTypeRegistry;
 import ca.spottedleaf.dataconverter.types.MapType;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 public final class V2218 {
 
@@ -14,7 +17,7 @@ public final class V2218 {
     public static void register() {
         MCTypeRegistry.POI_CHUNK.addStructureConverter(new DataConverter<>(VERSION) {
             @Override
-            public MapType<String> convert(final MapType<String> data, final long sourceVersion, final long toVersion) {
+            public @Nullable MapType<String> convert(final @NotNull MapType<String> data, final long sourceVersion, final long toVersion) {
                 final MapType<String> sections = data.getMap("Sections");
                 if (sections == null) {
                     return null;
diff --git a/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V2501.java b/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V2501.java
index c8901f95e1076ae8be220c03efd83ce9bd18d2a8..e070de655a734ddea122bc44fcc7406737f0f5a5 100644
--- a/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V2501.java
+++ b/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V2501.java
@@ -6,6 +6,9 @@ import ca.spottedleaf.dataconverter.minecraft.datatypes.MCTypeRegistry;
 import ca.spottedleaf.dataconverter.minecraft.walkers.generic.WalkerUtils;
 import ca.spottedleaf.dataconverter.types.MapType;
 import ca.spottedleaf.dataconverter.types.Types;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 public final class V2501 {
 
@@ -26,7 +29,7 @@ public final class V2501 {
     public static void register() {
         final DataConverter<MapType<String>, MapType<String>> converter = new DataConverter<>(VERSION) {
             @Override
-            public MapType<String> convert(final MapType<String> data, final long sourceVersion, final long toVersion) {
+            public @Nullable MapType<String> convert(final @NotNull MapType<String> data, final long sourceVersion, final long toVersion) {
                 final int recipesUsedSize = data.getInt("RecipesUsedSize");
                 data.remove("RecipesUsedSize");
 
diff --git a/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V2503.java b/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V2503.java
index cd1bca807236b917244bbacd8df6f25fd3c42407..2ef66893028cbd4cec49bfef1a8b26c1c5528251 100644
--- a/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V2503.java
+++ b/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V2503.java
@@ -7,6 +7,9 @@ import ca.spottedleaf.dataconverter.minecraft.datatypes.MCTypeRegistry;
 import ca.spottedleaf.dataconverter.types.MapType;
 import com.google.common.collect.ImmutableMap;
 import com.google.common.collect.ImmutableSet;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 import java.util.Set;
 
 public final class V2503 {
@@ -32,7 +35,7 @@ public final class V2503 {
 
     private V2503() {}
 
-    private static void changeWallProperty(final MapType<String> properties, final String path) {
+    private static void changeWallProperty(final @NotNull MapType<String> properties, final String path) {
         final String property = properties.getString(path);
         if (property != null) {
             properties.setString(path, "true".equals(property) ? "low" : "none");
@@ -42,7 +45,7 @@ public final class V2503 {
     public static void register() {
         MCTypeRegistry.BLOCK_STATE.addStructureConverter(new DataConverter<>(VERSION) {
             @Override
-            public MapType<String> convert(final MapType<String> data, final long sourceVersion, final long toVersion) {
+            public @Nullable MapType<String> convert(final @NotNull MapType<String> data, final long sourceVersion, final long toVersion) {
                 if (!WALL_BLOCKS.contains(data.getString("Name"))) {
                     return null;
                 }
diff --git a/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V2505.java b/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V2505.java
index 350f5cca06d2a864b5a3cc028753fd6489a28ad5..f95e66d272fe312ec3f50a16e437e0cdc7c6e87d 100644
--- a/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V2505.java
+++ b/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V2505.java
@@ -6,6 +6,9 @@ import ca.spottedleaf.dataconverter.minecraft.datatypes.MCTypeRegistry;
 import ca.spottedleaf.dataconverter.minecraft.walkers.itemstack.DataWalkerItemLists;
 import ca.spottedleaf.dataconverter.types.MapType;
 import ca.spottedleaf.dataconverter.types.Types;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 public final class V2505 {
 
@@ -20,7 +23,7 @@ public final class V2505 {
     public static void register() {
         MCTypeRegistry.ENTITY.addConverterForId("minecraft:villager", new DataConverter<>(VERSION) {
             @Override
-            public MapType<String> convert(final MapType<String> data, final long sourceVersion, final long toVersion) {
+            public @Nullable MapType<String> convert(final @NotNull MapType<String> data, final long sourceVersion, final long toVersion) {
                 final MapType<String> brain = data.getMap("Brain");
                 if (brain == null) {
                     return null;
diff --git a/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V2511.java b/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V2511.java
index 183ab7ed77e30bf87e71e5f682a59fc3a64a7672..e7faf115543f8aff22d132931559548c672de4e6 100644
--- a/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V2511.java
+++ b/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V2511.java
@@ -6,6 +6,9 @@ import ca.spottedleaf.dataconverter.minecraft.datatypes.MCTypeRegistry;
 import ca.spottedleaf.dataconverter.minecraft.walkers.itemstack.DataWalkerItems;
 import ca.spottedleaf.dataconverter.types.MapType;
 import ca.spottedleaf.dataconverter.types.Types;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 public final class V2511 {
 
@@ -22,7 +25,7 @@ public final class V2511 {
         };
     }
 
-    private static void setUUID(final MapType<String> data, final long most, final long least) {
+    private static void setUUID(final @NotNull MapType<String> data, final long most, final long least) {
         if (most != 0L && least != 0L) {
             data.setInts("OwnerUUID", createUUIDArray(most, least));
         }
@@ -31,7 +34,7 @@ public final class V2511 {
     public static void register() {
         final DataConverter<MapType<String>, MapType<String>> throwableConverter = new DataConverter<>(VERSION) {
             @Override
-            public MapType<String> convert(final MapType<String> data, final long sourceVersion, final long toVersion) {
+            public @Nullable MapType<String> convert(final @NotNull MapType<String> data, final long sourceVersion, final long toVersion) {
                 final MapType<String> owner = data.getMap("owner");
                 data.remove("owner");
                 if (owner == null) {
@@ -45,7 +48,7 @@ public final class V2511 {
         };
         final DataConverter<MapType<String>, MapType<String>> potionConverter = new DataConverter<>(VERSION) {
             @Override
-            public MapType<String> convert(final MapType<String> data, final long sourceVersion, final long toVersion) {
+            public @Nullable MapType<String> convert(final @NotNull MapType<String> data, final long sourceVersion, final long toVersion) {
                 final MapType<String> potion = data.getMap("Potion");
                 data.remove("Potion");
 
@@ -56,7 +59,7 @@ public final class V2511 {
         };
         final DataConverter<MapType<String>, MapType<String>> llamaSpitConverter = new DataConverter<>(VERSION) {
             @Override
-            public MapType<String> convert(final MapType<String> data, final long sourceVersion, final long toVersion) {
+            public @Nullable MapType<String> convert(final @NotNull MapType<String> data, final long sourceVersion, final long toVersion) {
                 final MapType<String> owner = data.getMap("Owner");
                 data.remove("Owner");
                 if (owner == null) {
@@ -70,7 +73,7 @@ public final class V2511 {
         };
         final DataConverter<MapType<String>, MapType<String>> arrowConverter = new DataConverter<>(VERSION) {
             @Override
-            public MapType<String> convert(final MapType<String> data, final long sourceVersion, final long toVersion) {
+            public @Nullable MapType<String> convert(final @NotNull MapType<String> data, final long sourceVersion, final long toVersion) {
                 setUUID(data, data.getLong("OwnerUUIDMost"), data.getLong("OwnerUUIDLeast"));
 
                 data.remove("OwnerUUIDMost");
diff --git a/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V2514.java b/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V2514.java
index d494fac0900f61e60c01617e631a0431bbda9438..035317abc2bf1b17ab05bed2eb156070f1c4faf2 100644
--- a/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V2514.java
+++ b/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V2514.java
@@ -8,6 +8,9 @@ import ca.spottedleaf.dataconverter.types.MapType;
 import ca.spottedleaf.dataconverter.types.ObjectType;
 import ca.spottedleaf.dataconverter.types.Types;
 import com.google.common.collect.Sets;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 import java.util.Set;
 import java.util.UUID;
 
@@ -120,7 +123,7 @@ public final class V2514 {
         };
     }
 
-    static int[] createUUIDFromString(final MapType<String> data, final String path) {
+    static int[] createUUIDFromString(final @Nullable MapType<String> data, final String path) {
         if (data == null) {
             return null;
         }
@@ -138,7 +141,7 @@ public final class V2514 {
         }
     }
 
-    static int[] createUUIDFromLongs(final MapType<String> data, final String most, final String least) {
+    static int[] createUUIDFromLongs(final @Nullable MapType<String> data, final String most, final String least) {
         if (data == null) {
             return null;
         }
@@ -149,7 +152,7 @@ public final class V2514 {
         return (mostBits != 0 || leastBits != 0) ? createUUIDArray(mostBits, leastBits) : null;
     }
 
-    static void replaceUUIDString(final MapType<String> data, final String oldPath, final String newPath) {
+    static void replaceUUIDString(final @NotNull MapType<String> data, final String oldPath, final String newPath) {
         final int[] newUUID = createUUIDFromString(data, oldPath);
         if (newUUID != null) {
             data.remove(oldPath);
@@ -157,7 +160,7 @@ public final class V2514 {
         }
     }
 
-    static void replaceUUIDMLTag(final MapType<String> data, final String oldPath, final String newPath) {
+    static void replaceUUIDMLTag(final @NotNull MapType<String> data, final String oldPath, final String newPath) {
         final int[] uuid = createUUIDFromLongs(data.getMap(oldPath), "M", "L");
         if (uuid != null) {
             data.remove(oldPath);
@@ -165,7 +168,7 @@ public final class V2514 {
         }
     }
 
-    static void replaceUUIDLeastMost(final MapType<String> data, final String prefix, final String newPath) {
+    static void replaceUUIDLeastMost(final @NotNull MapType<String> data, final @NotNull String prefix, final String newPath) {
         final String mostPath = prefix.concat("Most");
         final String leastPath = prefix.concat("Least");
 
@@ -179,7 +182,7 @@ public final class V2514 {
 
     private V2514() {}
 
-    private static void updatePiglin(final MapType<String> data) {
+    private static void updatePiglin(final @NotNull MapType<String> data) {
         final MapType<String> brain = data.getMap("Brain");
         if (brain == null) {
             return;
@@ -195,29 +198,29 @@ public final class V2514 {
         replaceUUIDString(angryAt, "value", "value");
     }
 
-    private static void updateEvokerFangs(final MapType<String> data) {
+    private static void updateEvokerFangs(final @NotNull MapType<String> data) {
         replaceUUIDLeastMost(data, "OwnerUUID", "Owner");
     }
 
-    private static void updateZombieVillager(final MapType<String> data) {
+    private static void updateZombieVillager(final @NotNull MapType<String> data) {
         replaceUUIDLeastMost(data, "ConversionPlayer", "ConversionPlayer");
     }
 
-    private static void updateAreaEffectCloud(final MapType<String> data) {
+    private static void updateAreaEffectCloud(final @NotNull MapType<String> data) {
         replaceUUIDLeastMost(data, "OwnerUUID", "Owner");
     }
 
-    private static void updateShulkerBullet(final MapType<String> data) {
+    private static void updateShulkerBullet(final @NotNull MapType<String> data) {
         replaceUUIDMLTag(data, "Owner", "Owner");
         replaceUUIDMLTag(data, "Target", "Target");
     }
 
-    private static void updateItem(final MapType<String> data) {
+    private static void updateItem(final @NotNull MapType<String> data) {
         replaceUUIDMLTag(data, "Owner", "Owner");
         replaceUUIDMLTag(data, "Thrower", "Thrower");
     }
 
-    private static void updateFox(final MapType<String> data) {
+    private static void updateFox(final @NotNull MapType<String> data) {
         final ListType trustedUUIDS = data.getList("TrustedUUIDs", ObjectType.MAP);
         if (trustedUUIDS == null) {
             return;
@@ -236,23 +239,23 @@ public final class V2514 {
         }
     }
 
-    private static void updateHurtBy(final MapType<String> data) {
+    private static void updateHurtBy(final @NotNull MapType<String> data) {
         replaceUUIDString(data, "HurtBy", "HurtBy");
     }
 
-    private static void updateAnimalOwner(final MapType<String> data) {
+    private static void updateAnimalOwner(final @NotNull MapType<String> data) {
         updateAnimal(data);
 
         replaceUUIDString(data, "OwnerUUID", "Owner");
     }
 
-    private static void updateAnimal(final MapType<String> data) {
+    private static void updateAnimal(final @NotNull MapType<String> data) {
         updateMob(data);
 
         replaceUUIDLeastMost(data, "LoveCause", "LoveCause");
     }
 
-    private static void updateMob(final MapType<String> data) {
+    private static void updateMob(final @NotNull MapType<String> data) {
         updateLivingEntity(data);
 
         final MapType<String> leash = data.getMap("Leash");
@@ -263,7 +266,7 @@ public final class V2514 {
         replaceUUIDLeastMost(leash, "UUID", "UUID");
     }
 
-    private static void updateLivingEntity(final MapType<String> data) {
+    private static void updateLivingEntity(final @NotNull MapType<String> data) {
         final ListType attributes = data.getList("Attributes", ObjectType.MAP);
         if (attributes == null) {
             return;
@@ -283,7 +286,7 @@ public final class V2514 {
         }
     }
 
-    private static void updateProjectile(final MapType<String> data) {
+    private static void updateProjectile(final @NotNull MapType<String> data) {
         final Object ownerUUID = data.getGeneric("OwnerUUID");
         if (ownerUUID != null) {
             data.remove("OwnerUUID");
@@ -291,7 +294,7 @@ public final class V2514 {
         }
     }
 
-    private static void updateEntityUUID(final MapType<String> data) {
+    private static void updateEntityUUID(final @NotNull MapType<String> data) {
         replaceUUIDLeastMost(data, "UUID", "UUID");
     }
 
@@ -300,7 +303,7 @@ public final class V2514 {
 
         MCTypeRegistry.ENTITY.addStructureConverter(new DataConverter<>(VERSION) {
             @Override
-            public MapType<String> convert(final MapType<String> data, final long sourceVersion, final long toVersion) {
+            public @Nullable MapType<String> convert(final @NotNull MapType<String> data, final long sourceVersion, final long toVersion) {
                 updateEntityUUID(data);
                 return null;
             }
@@ -308,35 +311,35 @@ public final class V2514 {
 
         final DataConverter<MapType<String>, MapType<String>> animalOwnerConverter = new DataConverter<>(VERSION) {
             @Override
-            public MapType<String> convert(final MapType<String> data, final long sourceVersion, final long toVersion) {
+            public @Nullable MapType<String> convert(final @NotNull MapType<String> data, final long sourceVersion, final long toVersion) {
                 updateAnimalOwner(data);
                 return null;
             }
         };
         final DataConverter<MapType<String>, MapType<String>> animalConverter = new DataConverter<>(VERSION) {
             @Override
-            public MapType<String> convert(final MapType<String> data, final long sourceVersion, final long toVersion) {
+            public @Nullable MapType<String> convert(final @NotNull MapType<String> data, final long sourceVersion, final long toVersion) {
                 updateAnimal(data);
                 return null;
             }
         };
         final DataConverter<MapType<String>, MapType<String>> mobConverter = new DataConverter<>(VERSION) {
             @Override
-            public MapType<String> convert(final MapType<String> data, final long sourceVersion, final long toVersion) {
+            public @Nullable MapType<String> convert(final @NotNull MapType<String> data, final long sourceVersion, final long toVersion) {
                 updateMob(data);
                 return null;
             }
         };
         final DataConverter<MapType<String>, MapType<String>> livingEntityConverter = new DataConverter<>(VERSION) {
             @Override
-            public MapType<String> convert(final MapType<String> data, final long sourceVersion, final long toVersion) {
+            public @Nullable MapType<String> convert(final @NotNull MapType<String> data, final long sourceVersion, final long toVersion) {
                 updateLivingEntity(data);
                 return null;
             }
         };
         final DataConverter<MapType<String>, MapType<String>> projectileConverter = new DataConverter<>(VERSION) {
             @Override
-            public MapType<String> convert(final MapType<String> data, final long sourceVersion, final long toVersion) {
+            public @Nullable MapType<String> convert(final @NotNull MapType<String> data, final long sourceVersion, final long toVersion) {
                 updateProjectile(data);
                 return null;
             }
@@ -363,63 +366,63 @@ public final class V2514 {
 
         MCTypeRegistry.ENTITY.addConverterForId("minecraft:bee", new DataConverter<>(VERSION) {
             @Override
-            public MapType<String> convert(final MapType<String> data, final long sourceVersion, final long toVersion) {
+            public @Nullable MapType<String> convert(final @NotNull MapType<String> data, final long sourceVersion, final long toVersion) {
                 updateHurtBy(data);
                 return null;
             }
         });
         MCTypeRegistry.ENTITY.addConverterForId("minecraft:zombified_piglin", new DataConverter<>(VERSION) {
             @Override
-            public MapType<String> convert(final MapType<String> data, final long sourceVersion, final long toVersion) {
+            public @Nullable MapType<String> convert(final @NotNull MapType<String> data, final long sourceVersion, final long toVersion) {
                 updateHurtBy(data);
                 return null;
             }
         });
         MCTypeRegistry.ENTITY.addConverterForId("minecraft:fox", new DataConverter<>(VERSION) {
             @Override
-            public MapType<String> convert(final MapType<String> data, final long sourceVersion, final long toVersion) {
+            public @Nullable MapType<String> convert(final @NotNull MapType<String> data, final long sourceVersion, final long toVersion) {
                 updateFox(data);
                 return null;
             }
         });
         MCTypeRegistry.ENTITY.addConverterForId("minecraft:item", new DataConverter<>(VERSION) {
             @Override
-            public MapType<String> convert(final MapType<String> data, final long sourceVersion, final long toVersion) {
+            public @Nullable MapType<String> convert(final @NotNull MapType<String> data, final long sourceVersion, final long toVersion) {
                 updateItem(data);
                 return null;
             }
         });
         MCTypeRegistry.ENTITY.addConverterForId("minecraft:shulker_bullet", new DataConverter<>(VERSION) {
             @Override
-            public MapType<String> convert(final MapType<String> data, final long sourceVersion, final long toVersion) {
+            public @Nullable MapType<String> convert(final @NotNull MapType<String> data, final long sourceVersion, final long toVersion) {
                 updateShulkerBullet(data);
                 return null;
             }
         });
         MCTypeRegistry.ENTITY.addConverterForId("minecraft:area_effect_cloud", new DataConverter<>(VERSION) {
             @Override
-            public MapType<String> convert(final MapType<String> data, final long sourceVersion, final long toVersion) {
+            public @Nullable MapType<String> convert(final @NotNull MapType<String> data, final long sourceVersion, final long toVersion) {
                 updateAreaEffectCloud(data);
                 return null;
             }
         });
         MCTypeRegistry.ENTITY.addConverterForId("minecraft:zombie_villager", new DataConverter<>(VERSION) {
             @Override
-            public MapType<String> convert(final MapType<String> data, final long sourceVersion, final long toVersion) {
+            public @Nullable MapType<String> convert(final @NotNull MapType<String> data, final long sourceVersion, final long toVersion) {
                 updateZombieVillager(data);
                 return null;
             }
         });
         MCTypeRegistry.ENTITY.addConverterForId("minecraft:evoker_fangs", new DataConverter<>(VERSION) {
             @Override
-            public MapType<String> convert(final MapType<String> data, final long sourceVersion, final long toVersion) {
+            public @Nullable MapType<String> convert(final @NotNull MapType<String> data, final long sourceVersion, final long toVersion) {
                 updateEvokerFangs(data);
                 return null;
             }
         });
         MCTypeRegistry.ENTITY.addConverterForId("minecraft:piglin", new DataConverter<>(VERSION) {
             @Override
-            public MapType<String> convert(final MapType<String> data, final long sourceVersion, final long toVersion) {
+            public @Nullable MapType<String> convert(final @NotNull MapType<String> data, final long sourceVersion, final long toVersion) {
                 updatePiglin(data);
                 return null;
             }
@@ -429,14 +432,14 @@ public final class V2514 {
         // Update TE
         MCTypeRegistry.TILE_ENTITY.addConverterForId("minecraft:conduit", new DataConverter<>(VERSION) {
             @Override
-            public MapType<String> convert(final MapType<String> data, final long sourceVersion, final long toVersion) {
+            public @Nullable MapType<String> convert(final @NotNull MapType<String> data, final long sourceVersion, final long toVersion) {
                 replaceUUIDMLTag(data, "target_uuid", "Target");
                 return null;
             }
         });
         MCTypeRegistry.TILE_ENTITY.addConverterForId("minecraft:skull", new DataConverter<>(VERSION) {
             @Override
-            public MapType<String> convert(final MapType<String> data, final long sourceVersion, final long toVersion) {
+            public @Nullable MapType<String> convert(final @NotNull MapType<String> data, final long sourceVersion, final long toVersion) {
                 final MapType<String> owner = data.getMap("Owner");
                 if (owner == null) {
                     return null;
@@ -455,7 +458,7 @@ public final class V2514 {
         // Player UUID
         MCTypeRegistry.PLAYER.addStructureConverter(new DataConverter<>(VERSION) {
             @Override
-            public MapType<String> convert(final MapType<String> data, final long sourceVersion, final long toVersion) {
+            public @Nullable MapType<String> convert(final @NotNull MapType<String> data, final long sourceVersion, final long toVersion) {
                 updateLivingEntity(data);
                 updateEntityUUID(data);
 
@@ -473,7 +476,7 @@ public final class V2514 {
         // Level.dat
         MCTypeRegistry.LEVEL.addStructureConverter(new DataConverter<>(VERSION) {
             @Override
-            public MapType<String> convert(final MapType<String> data, final long sourceVersion, final long toVersion) {
+            public @Nullable MapType<String> convert(final @NotNull MapType<String> data, final long sourceVersion, final long toVersion) {
                 replaceUUIDString(data, "WanderingTraderId", "WanderingTraderId");
 
                 final MapType<String> dimensionData = data.getMap("DimensionData");
@@ -518,7 +521,7 @@ public final class V2514 {
 
         MCTypeRegistry.SAVED_DATA.addStructureConverter(new DataConverter<>(VERSION) {
             @Override
-            public MapType<String> convert(final MapType<String> root, final long sourceVersion, final long toVersion) {
+            public @Nullable MapType<String> convert(final @NotNull MapType<String> root, final long sourceVersion, final long toVersion) {
                 final MapType<String> data = root.getMap("data");
                 if (data == null) {
                     return null;
@@ -556,7 +559,7 @@ public final class V2514 {
 
         MCTypeRegistry.ITEM_STACK.addStructureConverter(new DataConverter<>(VERSION) {
             @Override
-            public MapType<String> convert(final MapType<String> data, final long sourceVersion, final long toVersion) {
+            public @Nullable MapType<String> convert(final @NotNull MapType<String> data, final long sourceVersion, final long toVersion) {
                 final MapType<String> tag = data.getMap("tag");
                 if (tag == null) {
                     return null;
@@ -573,7 +576,7 @@ public final class V2514 {
         });
     }
 
-    private static void updateAttributeModifiers(final MapType<String> tag) {
+    private static void updateAttributeModifiers(final @NotNull MapType<String> tag) {
         final ListType attributes = tag.getList("AttributeModifiers", ObjectType.MAP);
         if (attributes == null) {
             return;
@@ -584,7 +587,7 @@ public final class V2514 {
         }
     }
 
-    private static void updateSkullOwner(final MapType<String> tag) {
+    private static void updateSkullOwner(final @NotNull MapType<String> tag) {
         replaceUUIDString(tag.getMap("SkullOwner"), "Id", "Id");
     }
 }
diff --git a/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V2516.java b/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V2516.java
index 40bf0a1788520bbf1d66da53b6532bdd8af246f4..e2625430812ec171b0d7701b177dbbb97f2d805f 100644
--- a/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V2516.java
+++ b/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V2516.java
@@ -6,6 +6,9 @@ import ca.spottedleaf.dataconverter.minecraft.datatypes.MCTypeRegistry;
 import ca.spottedleaf.dataconverter.types.ListType;
 import ca.spottedleaf.dataconverter.types.MapType;
 import ca.spottedleaf.dataconverter.types.ObjectType;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 public final class V2516 {
 
@@ -16,7 +19,7 @@ public final class V2516 {
     public static void register() {
         final DataConverter<MapType<String>, MapType<String>> gossipUUIDConverter = new DataConverter<>(VERSION) {
             @Override
-            public MapType<String> convert(final MapType<String> data, final long sourceVersion, final long toVersion) {
+            public @Nullable MapType<String> convert(final @NotNull MapType<String> data, final long sourceVersion, final long toVersion) {
                 final ListType gossips = data.getList("Gossips", ObjectType.MAP);
 
                 if (gossips == null) {
diff --git a/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V2518.java b/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V2518.java
index e7a55eeb02fb99289e4c8bfe2d28fc4a0c716719..8bf967478a125748aef927162633be09d14beeb7 100644
--- a/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V2518.java
+++ b/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V2518.java
@@ -5,6 +5,9 @@ import ca.spottedleaf.dataconverter.minecraft.MCVersions;
 import ca.spottedleaf.dataconverter.minecraft.datatypes.MCTypeRegistry;
 import ca.spottedleaf.dataconverter.types.MapType;
 import com.google.common.collect.ImmutableMap;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 import java.util.Map;
 
 public final class V2518 {
@@ -26,7 +29,7 @@ public final class V2518 {
     public static void register() {
         MCTypeRegistry.TILE_ENTITY.addConverterForId("minecraft:jigsaw", new DataConverter<>(VERSION) {
             @Override
-            public MapType<String> convert(final MapType<String> data, final long sourceVersion, final long toVersion) {
+            public @Nullable MapType<String> convert(final @NotNull MapType<String> data, final long sourceVersion, final long toVersion) {
                 final String type = data.getString("attachement_type", "minecraft:empty");
                 final String pool = data.getString("target_pool", "minecraft:empty");
                 data.remove("attachement_type");
@@ -42,7 +45,7 @@ public final class V2518 {
 
         MCTypeRegistry.BLOCK_STATE.addStructureConverter(new DataConverter<>(VERSION) {
             @Override
-            public MapType<String> convert(final MapType<String> data, final long sourceVersion, final long toVersion) {
+            public @Nullable MapType<String> convert(final @NotNull MapType<String> data, final long sourceVersion, final long toVersion) {
                 if (!"minecraft:jigsaw".equals(data.getString("Name"))) {
                     return null;
                 }
diff --git a/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V2523.java b/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V2523.java
index 5d3726bb7670bc89feb8ebeed5c097a77e909f5a..1377c67357b01fd80ef5c3e59dd7b7a9b7327f3c 100644
--- a/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V2523.java
+++ b/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V2523.java
@@ -7,6 +7,9 @@ import ca.spottedleaf.dataconverter.types.ListType;
 import ca.spottedleaf.dataconverter.types.MapType;
 import ca.spottedleaf.dataconverter.types.ObjectType;
 import com.google.common.collect.ImmutableMap;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 import java.util.Map;
 
 public final class V2523 {
@@ -36,7 +39,7 @@ public final class V2523 {
 
     private V2523() {}
 
-    private static void updateName(final MapType<String> data, final String path) {
+    private static void updateName(final @Nullable MapType<String> data, final String path) {
         if (data == null) {
             return;
         }
@@ -53,7 +56,7 @@ public final class V2523 {
     public static void register() {
         final DataConverter<MapType<String>, MapType<String>> entityConverter = new DataConverter<>(VERSION) {
             @Override
-            public MapType<String> convert(final MapType<String> data, final long sourceVersion, final long toVersion) {
+            public @Nullable MapType<String> convert(final @NotNull MapType<String> data, final long sourceVersion, final long toVersion) {
                 final ListType attributes = data.getList("Attributes", ObjectType.MAP);
 
                 if (attributes == null) {
@@ -73,7 +76,7 @@ public final class V2523 {
 
         MCTypeRegistry.ITEM_STACK.addStructureConverter(new DataConverter<>(VERSION) {
             @Override
-            public MapType<String> convert(final MapType<String> data, final long sourceVersion, final long toVersion) {
+            public @Nullable MapType<String> convert(final @NotNull MapType<String> data, final long sourceVersion, final long toVersion) {
                 final ListType attributes = data.getList("AttributeModifiers", ObjectType.MAP);
 
                 if (attributes == null) {
diff --git a/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V2527.java b/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V2527.java
index 5e951f91d03f95ed671bb7403592960690c65879..e74de6dc0bb49e8ba496f4718942e6274b1c65fb 100644
--- a/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V2527.java
+++ b/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V2527.java
@@ -8,6 +8,9 @@ import ca.spottedleaf.dataconverter.types.MapType;
 import ca.spottedleaf.dataconverter.types.ObjectType;
 import com.mojang.datafixers.DataFixUtils;
 import net.minecraft.util.Mth;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 public final class V2527 {
 
@@ -18,7 +21,7 @@ public final class V2527 {
     public static void register() {
         MCTypeRegistry.CHUNK.addStructureConverter(new DataConverter<>(VERSION) {
             @Override
-            public MapType<String> convert(final MapType<String> data, final long sourceVersion, final long toVersion) {
+            public @Nullable MapType<String> convert(final @NotNull MapType<String> data, final long sourceVersion, final long toVersion) {
                 final MapType<String> level = data.getMap("Level");
 
                 if (level == null) {
@@ -66,7 +69,7 @@ public final class V2527 {
         });
     }
 
-    public static long[] addPadding(final int indices, final int bits, final long[] old) {
+    public static long[] addPadding(final int indices, final int bits, final long @NotNull [] old) {
         int k = old.length;
         if (k == 0) {
             return old;
diff --git a/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V2529.java b/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V2529.java
index f239dbf4beb87efd1fff4e5d8d6f041fa8687f01..582ef8e9c017821dec5bd084a37f83c9f85c5cef 100644
--- a/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V2529.java
+++ b/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V2529.java
@@ -4,6 +4,9 @@ import ca.spottedleaf.dataconverter.converters.DataConverter;
 import ca.spottedleaf.dataconverter.minecraft.MCVersions;
 import ca.spottedleaf.dataconverter.minecraft.datatypes.MCTypeRegistry;
 import ca.spottedleaf.dataconverter.types.MapType;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 public final class V2529 {
 
@@ -14,7 +17,7 @@ public final class V2529 {
     public static void register() {
         MCTypeRegistry.ENTITY.addConverterForId("minecraft:strider", new DataConverter<>(VERSION) {
             @Override
-            public MapType<String> convert(final MapType<String> data, final long sourceVersion, final long toVersion) {
+            public @Nullable MapType<String> convert(final @NotNull MapType<String> data, final long sourceVersion, final long toVersion) {
                 if (data.getBoolean("NoGravity")) {
                     data.setBoolean("NoGravity", false);
                 }
diff --git a/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V2531.java b/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V2531.java
index 7783d75578d29e09029b26c8c8c0b053c5526eb9..3f7e3b427107a5fcadc4971eb0f5b2bd5c692ca9 100644
--- a/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V2531.java
+++ b/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V2531.java
@@ -4,6 +4,9 @@ import ca.spottedleaf.dataconverter.converters.DataConverter;
 import ca.spottedleaf.dataconverter.minecraft.MCVersions;
 import ca.spottedleaf.dataconverter.minecraft.datatypes.MCTypeRegistry;
 import ca.spottedleaf.dataconverter.types.MapType;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 public final class V2531 {
 
@@ -18,7 +21,7 @@ public final class V2531 {
     public static void register() {
         MCTypeRegistry.BLOCK_STATE.addStructureConverter(new DataConverter<>(VERSION) {
             @Override
-            public MapType<String> convert(final MapType<String> data, final long sourceVersion, final long toVersion) {
+            public @Nullable MapType<String> convert(final @NotNull MapType<String> data, final long sourceVersion, final long toVersion) {
                 if (!"minecraft:redstone_wire".equals(data.getString("Name"))) {
                     return null;
                 }
diff --git a/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V2533.java b/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V2533.java
index ece1cd5afab80a8271b2ebac95dcc0a6239cd42c..00ae1fa412fd8c7d13c9efcb8902ed2459e74a39 100644
--- a/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V2533.java
+++ b/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V2533.java
@@ -6,6 +6,9 @@ import ca.spottedleaf.dataconverter.minecraft.datatypes.MCTypeRegistry;
 import ca.spottedleaf.dataconverter.types.ListType;
 import ca.spottedleaf.dataconverter.types.MapType;
 import ca.spottedleaf.dataconverter.types.ObjectType;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 public final class V2533 {
 
@@ -16,7 +19,7 @@ public final class V2533 {
     public static void register() {
         MCTypeRegistry.ENTITY.addConverterForId("minecraft:villager", new DataConverter<>(VERSION) {
             @Override
-            public MapType<String> convert(final MapType<String> data, final long sourceVersion, final long toVersion) {
+            public @Nullable MapType<String> convert(final @NotNull MapType<String> data, final long sourceVersion, final long toVersion) {
                 final ListType attributes = data.getList("Attributes", ObjectType.MAP);
 
                 if (attributes == null) {
diff --git a/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V2535.java b/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V2535.java
index 9648299bb96c20c783bb7c7010173a0f007584e0..d75730ab50d130c00f837029f1be4b191b62f398 100644
--- a/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V2535.java
+++ b/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V2535.java
@@ -6,6 +6,9 @@ import ca.spottedleaf.dataconverter.minecraft.datatypes.MCTypeRegistry;
 import ca.spottedleaf.dataconverter.types.ListType;
 import ca.spottedleaf.dataconverter.types.MapType;
 import ca.spottedleaf.dataconverter.types.ObjectType;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 public final class V2535 {
 
@@ -16,7 +19,7 @@ public final class V2535 {
     public static void register() {
         MCTypeRegistry.ENTITY.addConverterForId("minecraft:shulker", new DataConverter<>(VERSION) {
             @Override
-            public MapType<String> convert(final MapType<String> data, final long sourceVersion, final long toVersion) {
+            public @Nullable MapType<String> convert(final @NotNull MapType<String> data, final long sourceVersion, final long toVersion) {
                 // Mojang uses doubles for whatever reason... rotation is in FLOAT. by using double here
                 // the entity load will just ignore rotation and set it to 0...
                 final ListType rotation = data.getList("Rotation", ObjectType.FLOAT);
diff --git a/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V2550.java b/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V2550.java
index b9a50d44982abe228c5e7d58a4b917d0fbfda6b9..3a3f3fa5e26c073e38cf8a7f163adb93c604b7d6 100644
--- a/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V2550.java
+++ b/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V2550.java
@@ -9,6 +9,9 @@ import ca.spottedleaf.dataconverter.types.ObjectType;
 import ca.spottedleaf.dataconverter.types.Types;
 import com.google.common.collect.ImmutableMap;
 import org.apache.commons.lang3.math.NumberUtils;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 import java.util.HashMap;
 import java.util.Locale;
 import java.util.Map;
@@ -31,7 +34,7 @@ public final class V2550 {
 
     record StructureFeatureConfiguration(int spacing, int separation, int salt) {
 
-        public MapType<String> serialize() {
+        public @NotNull MapType<String> serialize() {
             final MapType<String> ret = Types.NBT.createEmptyMap();
 
             ret.setInt("spacing", this.spacing);
@@ -45,7 +48,7 @@ public final class V2550 {
     public static void register() {
         MCTypeRegistry.WORLD_GEN_SETTINGS.addStructureConverter(new DataConverter<>(VERSION) {
             @Override
-            public MapType<String> convert(final MapType<String> data, final long sourceVersion, final long toVersion) {
+            public @NotNull MapType<String> convert(final @NotNull MapType<String> data, final long sourceVersion, final long toVersion) {
                 final long seed = data.getLong("RandomSeed");
                 String generatorName = data.getString("generatorName");
                 if (generatorName != null) {
@@ -164,7 +167,7 @@ public final class V2550 {
         });
     }
 
-    public static MapType<String> noise(final long seed, final String worldType, final MapType<String> biomeSource) {
+    public static @NotNull MapType<String> noise(final long seed, final String worldType, final MapType<String> biomeSource) {
         final MapType<String> ret = Types.NBT.createEmptyMap();
 
         ret.setString("type", "minecraft:noise");
@@ -175,7 +178,7 @@ public final class V2550 {
         return ret;
     }
 
-    public static MapType<String> vanillaBiomeSource(final long seed, final boolean default11Gen, final boolean largeBiomes) {
+    public static @NotNull MapType<String> vanillaBiomeSource(final long seed, final boolean default11Gen, final boolean largeBiomes) {
         final MapType<String> ret = Types.NBT.createEmptyMap();
 
         ret.setString("type", "minecraft:vanilla_layered");
@@ -188,7 +191,7 @@ public final class V2550 {
         return ret;
     }
 
-    public static MapType<String> fixFlatStructures(final MapType<String> generatorOptions) {
+    public static @NotNull MapType<String> fixFlatStructures(final @Nullable MapType<String> generatorOptions) {
         int distance = 32;
         int spread = 3;
         int count = 128;
@@ -286,7 +289,7 @@ public final class V2550 {
         return ret;
     }
 
-    public static MapType<String> vanillaLevels(final long seed, final MapType<String> generator, final boolean caves) {
+    public static @NotNull MapType<String> vanillaLevels(final long seed, final MapType<String> generator, final boolean caves) {
         final MapType<String> ret = Types.NBT.createEmptyMap();
 
         final MapType<String> overworld = Types.NBT.createEmptyMap();
@@ -320,7 +323,7 @@ public final class V2550 {
         return ret;
     }
 
-    public static MapType<String> defaultOverworld(final long seed) {
+    public static @NotNull MapType<String> defaultOverworld(final long seed) {
         return noise(seed, "minecraft:overworld", vanillaBiomeSource(seed, false, false));
     }
 
@@ -332,7 +335,7 @@ public final class V2550 {
         return Math.max(minVal, getInt(value, dfl));
     }
 
-    private static void setSpacing(final Map<String, StructureFeatureConfiguration> structures, final String structureName,
+    private static void setSpacing(final @NotNull Map<String, StructureFeatureConfiguration> structures, final String structureName,
                                    final String value, final int minVal) {
         final StructureFeatureConfiguration structure = structures.getOrDefault(structureName, DEFAULTS.get(structureName));
         final int newSpacing = getInt(value, structure.spacing, minVal);
diff --git a/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V2551.java b/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V2551.java
index ac0c4475556fe5202a6aa5724cb47b35c0cc9c00..f3c28e3efc9a82cd119507f6516481d69ff04899 100644
--- a/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V2551.java
+++ b/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V2551.java
@@ -6,13 +6,15 @@ import ca.spottedleaf.dataconverter.minecraft.walkers.generic.WalkerUtils;
 import ca.spottedleaf.dataconverter.types.ListType;
 import ca.spottedleaf.dataconverter.types.MapType;
 import ca.spottedleaf.dataconverter.types.ObjectType;
+import org.jetbrains.annotations.NotNull;
+
 
 public final class V2551 {
 
     protected static final int VERSION = MCVersions.V20W20B + 14;
 
     public static void register() {
-        MCTypeRegistry.WORLD_GEN_SETTINGS.addStructureWalker(VERSION, (final MapType<String> data, final long fromVersion, final long toVersion) -> {
+        MCTypeRegistry.WORLD_GEN_SETTINGS.addStructureWalker(VERSION, (final @NotNull MapType<String> data, final long fromVersion, final long toVersion) -> {
             final MapType<String> dimensions = data.getMap("dimensions");
 
             if (dimensions == null) {
diff --git a/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V2558.java b/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V2558.java
index 0e228fd642cbca13e8682950b5f0ec4e3e8a4da7..e753f96c16f4717d9cdd5c0b979c0a0ff39bf73f 100644
--- a/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V2558.java
+++ b/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V2558.java
@@ -7,6 +7,9 @@ import ca.spottedleaf.dataconverter.minecraft.datatypes.MCTypeRegistry;
 import ca.spottedleaf.dataconverter.types.MapType;
 import ca.spottedleaf.dataconverter.types.Types;
 import com.google.common.collect.ImmutableMap;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 public final class V2558 {
 
@@ -21,7 +24,7 @@ public final class V2558 {
 
         MCTypeRegistry.WORLD_GEN_SETTINGS.addStructureConverter(new DataConverter<>(VERSION) {
             @Override
-            public MapType<String> convert(final MapType<String> data, final long sourceVersion, final long toVersion) {
+            public @Nullable MapType<String> convert(final @NotNull MapType<String> data, final long sourceVersion, final long toVersion) {
                 MapType<String> dimensions = data.getMap("dimensions");
                 if (dimensions == null) {
                     dimensions = Types.NBT.createEmptyMap();
@@ -37,7 +40,7 @@ public final class V2558 {
         });
     }
 
-    private static MapType<String> recreateSettings(final MapType<String> data) {
+    private static @NotNull MapType<String> recreateSettings(final @NotNull MapType<String> data) {
         final long seed = data.getLong("seed");
 
         return V2550.vanillaLevels(seed, V2550.defaultOverworld(seed), false);
diff --git a/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V2679.java b/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V2679.java
index 6c788f51be0439797bf9fc8711d4cf8e382f5c11..a7add8fddf0c9ae907fd5b51fba7ccb3427c729d 100644
--- a/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V2679.java
+++ b/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V2679.java
@@ -4,6 +4,9 @@ import ca.spottedleaf.dataconverter.converters.DataConverter;
 import ca.spottedleaf.dataconverter.minecraft.MCVersions;
 import ca.spottedleaf.dataconverter.minecraft.datatypes.MCTypeRegistry;
 import ca.spottedleaf.dataconverter.types.MapType;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 public final class V2679 {
 
@@ -12,7 +15,7 @@ public final class V2679 {
     public static void register() {
         MCTypeRegistry.BLOCK_STATE.addStructureConverter(new DataConverter<>(VERSION) {
             @Override
-            public MapType<String> convert(final MapType<String> data, final long sourceVersion, final long toVersion) {
+            public @Nullable MapType<String> convert(final @NotNull MapType<String> data, final long sourceVersion, final long toVersion) {
                 if (!"minecraft:cauldron".equals(data.getString("Name"))) {
                     return null;
                 }
diff --git a/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V2701.java b/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V2701.java
index 9d6b03410c4665e19a2a35226d11f77b2cae3bbf..499174fde2a55164e4a597bdfe94f30cb5d15324 100644
--- a/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V2701.java
+++ b/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V2701.java
@@ -7,6 +7,9 @@ import ca.spottedleaf.dataconverter.types.ListType;
 import ca.spottedleaf.dataconverter.types.MapType;
 import ca.spottedleaf.dataconverter.types.ObjectType;
 import com.google.common.collect.Sets;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 import java.util.Set;
 import java.util.regex.Matcher;
 import java.util.regex.Pattern;
@@ -34,7 +37,7 @@ public final class V2701 {
     public static void register() {
         MCTypeRegistry.STRUCTURE_FEATURE.addStructureConverter(new DataConverter<>(VERSION) {
             @Override
-            public MapType<String> convert(final MapType<String> data, final long sourceVersion, final long toVersion) {
+            public @Nullable MapType<String> convert(final @NotNull MapType<String> data, final long sourceVersion, final long toVersion) {
                 final ListType children = data.getList("Children", ObjectType.MAP);
 
                 if (children == null) {
@@ -70,7 +73,7 @@ public final class V2701 {
         });
     }
 
-    private static String getNestedString(final MapType<String> root, final String... paths) {
+    private static @NotNull String getNestedString(final @NotNull MapType<String> root, final String @NotNull ... paths) {
         if (paths.length == 0) {
             throw new IllegalArgumentException("Missing path");
         }
@@ -107,7 +110,7 @@ public final class V2701 {
         return current instanceof String ? (String)current : "";
     }
 
-    protected static String convertToString(final MapType<String> feature) {
+    protected static @Nullable String convertToString(final @NotNull MapType<String> feature) {
         return getReplacement(
                 getNestedString(feature, "type"),
                 getNestedString(feature, "name"),
@@ -119,8 +122,8 @@ public final class V2701 {
         );
     }
 
-    private static String getReplacement(final String type, final String name, final String stateType, final String stateName,
-                                         final String firstEntryName, final String foliageName, final String leavesName) {
+    private static @Nullable String getReplacement(final @NotNull String type, final @NotNull String name, final String stateType, final String stateName,
+                                                   final String firstEntryName, final String foliageName, final String leavesName) {
         final String actualType;
         if (!type.isEmpty()) {
             actualType = type;
diff --git a/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V2702.java b/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V2702.java
index 53e45b14c05dab35cd5725998458d47e28718075..527738f75659f1e9db5b0b3238b211be21ea6baf 100644
--- a/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V2702.java
+++ b/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V2702.java
@@ -4,6 +4,9 @@ import ca.spottedleaf.dataconverter.converters.DataConverter;
 import ca.spottedleaf.dataconverter.minecraft.MCVersions;
 import ca.spottedleaf.dataconverter.minecraft.datatypes.MCTypeRegistry;
 import ca.spottedleaf.dataconverter.types.MapType;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 public final class V2702 {
 
@@ -12,7 +15,7 @@ public final class V2702 {
     public static void register() {
         final DataConverter<MapType<String>, MapType<String>> arrowConverter = new DataConverter<>(VERSION) {
             @Override
-            public MapType<String> convert(final MapType<String> data, final long sourceVersion, final long toVersion) {
+            public @Nullable MapType<String> convert(final @NotNull MapType<String> data, final long sourceVersion, final long toVersion) {
                 if (data.hasKey("pickup")) {
                     return null;
                 }
diff --git a/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V2831.java b/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V2831.java
index d28ade80499dce882a9a84309a2a0da527fe01a0..08a7dd3e18ecd32810e72bdf54b77523071815d9 100644
--- a/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V2831.java
+++ b/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V2831.java
@@ -8,13 +8,16 @@ import ca.spottedleaf.dataconverter.types.ListType;
 import ca.spottedleaf.dataconverter.types.MapType;
 import ca.spottedleaf.dataconverter.types.ObjectType;
 import ca.spottedleaf.dataconverter.types.Types;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 public final class V2831 {
 
     protected static final int VERSION = MCVersions.V1_17_1 + 101;
 
     public static void register() {
-        MCTypeRegistry.UNTAGGED_SPAWNER.addStructureWalker(VERSION, (final MapType<String> root, final long fromVersion, final long toVersion) -> {
+        MCTypeRegistry.UNTAGGED_SPAWNER.addStructureWalker(VERSION, (final @NotNull MapType<String> root, final long fromVersion, final long toVersion) -> {
             final ListType spawnPotentials = root.getList("SpawnPotentials", ObjectType.MAP);
             if (spawnPotentials != null) {
                 for (int i = 0, len = spawnPotentials.size(); i < len; ++i) {
@@ -31,7 +34,7 @@ public final class V2831 {
 
         MCTypeRegistry.UNTAGGED_SPAWNER.addStructureConverter(new DataConverter<>(VERSION) {
             @Override
-            public MapType<String> convert(final MapType<String> root, final long sourceVersion, final long toVersion) {
+            public @Nullable MapType<String> convert(final @NotNull MapType<String> root, final long sourceVersion, final long toVersion) {
                 final MapType<String> spawnData = root.getMap("SpawnData");
                 if (spawnData != null) {
                     final MapType<String> wrapped = Types.NBT.createEmptyMap();
diff --git a/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V2832.java b/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V2832.java
index 95a306d6cc5b4ac8161d5bed80b6a7073b3e914e..9cb1677d0d25319edae45ab4e58a6bd1adaa3f1e 100644
--- a/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V2832.java
+++ b/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V2832.java
@@ -14,6 +14,8 @@ import it.unimi.dsi.fastutil.ints.Int2IntLinkedOpenHashMap;
 import it.unimi.dsi.fastutil.ints.IntIterator;
 import it.unimi.dsi.fastutil.ints.IntOpenHashSet;
 import org.apache.commons.lang3.mutable.MutableBoolean;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
 import org.slf4j.Logger;
 import java.util.Arrays;
 import java.util.BitSet;
@@ -185,11 +187,11 @@ public final class V2832 {
             "minecraft:white_terracotta"
     ));
 
-    private static int getObjectsPerValue(final long[] val) {
+    private static int getObjectsPerValue(final long @NotNull [] val) {
         return (4096 + val.length - 1) / (val.length); // expression is invalid if it returns > 64
     }
 
-    private static long[] resize(final long[] val, final int oldBitsPerObject, final int newBitsPerObject) {
+    private static long[] resize(final long @NotNull [] val, final int oldBitsPerObject, final int newBitsPerObject) {
         final long oldMask = (1L << oldBitsPerObject) - 1; // works even if bitsPerObject == 64
         final long newMask = (1L << newBitsPerObject) - 1;
         final int oldObjectsPerValue = 64 / oldBitsPerObject;
@@ -243,7 +245,7 @@ public final class V2832 {
         return ret;
     }
 
-    private static void fixLithiumChunks(final MapType<String> data) {
+    private static void fixLithiumChunks(final @NotNull MapType<String> data) {
         // See https://github.com/CaffeineMC/lithium-fabric/issues/279
         final MapType<String> level = data.getMap("Level");
         if (level == null) {
@@ -294,7 +296,7 @@ public final class V2832 {
         // See V2551 for the layout of world gen settings
         MCTypeRegistry.WORLD_GEN_SETTINGS.addStructureConverter(new DataConverter<>(VERSION) {
             @Override
-            public MapType<String> convert(final MapType<String> data, final long sourceVersion, final long toVersion) {
+            public @Nullable MapType<String> convert(final @NotNull MapType<String> data, final long sourceVersion, final long toVersion) {
                 // converters were added to older versions note whether the world has increased height already or not
                 final boolean noHeightFlag = !data.hasKey("has_increased_height_already");
                 final boolean hasIncreasedHeight = data.getBoolean("has_increased_height_already", true);
@@ -370,7 +372,7 @@ public final class V2832 {
         // and by not supported I mean it will just treat it as the old format... maybe at least throw in that case?
         MCTypeRegistry.CHUNK.addStructureConverter(new DataConverter<>(VERSION) {
             @Override
-            public MapType<String> convert(final MapType<String> data, final long sourceVersion, final long toVersion) {
+            public @Nullable MapType<String> convert(final @NotNull MapType<String> data, final long sourceVersion, final long toVersion) {
                 // The below covers padPaletteEntries - this was written BEFORE that code was added to the datafixer -
                 // and this still works, so I'm keeping it. Don't fix what isn't broken.
                 fixLithiumChunks(data); // See https://github.com/CaffeineMC/lithium-fabric/issues/279
@@ -471,7 +473,7 @@ public final class V2832 {
             }
         });
 
-        MCTypeRegistry.WORLD_GEN_SETTINGS.addStructureWalker(VERSION, (final MapType<String> data, final long fromVersion, final long toVersion) -> {
+        MCTypeRegistry.WORLD_GEN_SETTINGS.addStructureWalker(VERSION, (final @NotNull MapType<String> data, final long fromVersion, final long toVersion) -> {
             final MapType<String> dimensions = data.getMap("dimensions");
 
             if (dimensions == null) {
@@ -559,7 +561,7 @@ public final class V2832 {
             return null;
         });
 
-        MCTypeRegistry.CHUNK.addStructureWalker(VERSION, (final MapType<String> data, final long fromVersion, final long toVersion) -> {
+        MCTypeRegistry.CHUNK.addStructureWalker(VERSION, (final @NotNull MapType<String> data, final long fromVersion, final long toVersion) -> {
             final MapType<String> level = data.getMap("Level");
             if (level == null) {
                 return null;
@@ -592,7 +594,7 @@ public final class V2832 {
         });
     }
 
-    private static void predictChunkStatusBeforeSurface(final MapType<String> level, final Set<String> chunkBlocks) {
+    private static void predictChunkStatusBeforeSurface(final @NotNull MapType<String> level, final @NotNull Set<String> chunkBlocks) {
         final String status = level.getString("Status", "empty");
         if (STATUS_IS_OR_AFTER_SURFACE.contains(status)) {
             return;
@@ -615,7 +617,7 @@ public final class V2832 {
         level.setString("Status", update);
     }
 
-    private static MapType<String> getEmptyBlockPalette() {
+    private static @NotNull MapType<String> getEmptyBlockPalette() {
         final MapType<String> airBlockState = Types.NBT.createEmptyMap();
         airBlockState.setString("Name", "minecraft:air");
 
@@ -625,7 +627,7 @@ public final class V2832 {
         return V2832.wrapPalette(emptyBlockPalette);
     }
 
-    private static void shiftUpgradeData(final MapType<String> upgradeData, final int shift) {
+    private static void shiftUpgradeData(final @Nullable MapType<String> upgradeData, final int shift) {
         if (upgradeData == null) {
             return;
         }
@@ -635,13 +637,13 @@ public final class V2832 {
             return;
         }
 
-        RenameHelper.renameKeys(indices, (final String input) -> {
+        RenameHelper.renameKeys(indices, (final @NotNull String input) -> {
             return Integer.toString(Integer.parseInt(input) + shift);
         });
     }
 
-    private static void updateChunkData(final MapType<String> level, final boolean wantExtendedHeight, final boolean isAlreadyExtended,
-                                        final boolean onNoiseGenerator, final V2841.SimplePaletteReader bottomSection) {
+    private static void updateChunkData(final @NotNull MapType<String> level, final boolean wantExtendedHeight, final boolean isAlreadyExtended,
+                                        final boolean onNoiseGenerator, final V2841.@Nullable SimplePaletteReader bottomSection) {
         level.remove("Biomes");
         if (!wantExtendedHeight) {
             padCarvingMasks(level, 16, 0);
@@ -711,7 +713,7 @@ public final class V2832 {
         level.setBoolean("isLightOn", false);
     }
 
-    private static void padCarvingMasks(final MapType<String> level, final int newSize, final int offset) {
+    private static void padCarvingMasks(final @NotNull MapType<String> level, final int newSize, final int offset) {
         final MapType<String> carvingMasks = level.getMap("CarvingMasks");
         if (carvingMasks == null) {
             // if empty, DFU still writes
@@ -729,7 +731,7 @@ public final class V2832 {
         }
     }
 
-    private static void addEmptyListPadding(final MapType<String> level, final String path) {
+    private static void addEmptyListPadding(final @NotNull MapType<String> level, final String path) {
         ListType list = level.getListUnchecked(path);
         if (list != null && list.size() == 24) {
             return;
@@ -749,7 +751,7 @@ public final class V2832 {
         }
     }
 
-    private static void offsetHeightmaps(final MapType<String> level) {
+    private static void offsetHeightmaps(final @NotNull MapType<String> level) {
         final MapType<String> heightmaps = level.getMap("Heightmaps");
         if (heightmaps == null) {
             return;
@@ -760,7 +762,7 @@ public final class V2832 {
         }
     }
 
-    private static void offsetHeightmap(final long[] heightmap) {
+    private static void offsetHeightmap(final long @Nullable [] heightmap) {
         if (heightmap == null) {
             return;
         }
@@ -784,8 +786,8 @@ public final class V2832 {
         }
     }
 
-    private static MapType<String>[] createBiomeSections(final MapType<String> level, final boolean wantExtendedHeight,
-                                                         final int minSection, final MutableBoolean isAlreadyExtended) {
+    private static MapType<String> @NotNull [] createBiomeSections(final @NotNull MapType<String> level, final boolean wantExtendedHeight,
+                                                                   final int minSection, final @NotNull MutableBoolean isAlreadyExtended) {
         final MapType<String>[] ret = new MapType[wantExtendedHeight ? 24 : 16];
 
         final int[] biomes = level.getInts("Biomes");
@@ -825,7 +827,7 @@ public final class V2832 {
         return ret;
     }
 
-    private static MapType<String> createBiomeSection(final int[] biomes, final int offset, final int mask) {
+    private static @NotNull MapType<String> createBiomeSection(final int[] biomes, final int offset, final int mask) {
         final Int2IntLinkedOpenHashMap paletteId = new Int2IntLinkedOpenHashMap();
 
         for (int idx = 0; idx < 64; ++idx) {
@@ -876,11 +878,11 @@ public final class V2832 {
         return wrapPalette(paletteString, packed);
     }
 
-    private static MapType<String> wrapPalette(final ListType palette) {
+    private static @NotNull MapType<String> wrapPalette(final ListType palette) {
         return wrapPalette(palette, null);
     }
 
-    private static MapType<String> wrapPalette(final ListType palette, final long[] blockStates) {
+    private static @NotNull MapType<String> wrapPalette(final ListType palette, final long @Nullable [] blockStates) {
         final MapType<String> ret = Types.NBT.createEmptyMap();
         ret.setList("palette", palette);
         if (blockStates != null) {
@@ -890,7 +892,7 @@ public final class V2832 {
         return ret;
     }
 
-    private static MapType<String> wrapPaletteOptimised(final ListType palette, final long[] blockStates) {
+    private static @NotNull MapType<String> wrapPaletteOptimised(final @NotNull ListType palette, final long[] blockStates) {
         if (palette.size() == 1) {
             return wrapPalette(palette);
         }
@@ -902,7 +904,7 @@ public final class V2832 {
         return value == 0 ? 0 : Integer.SIZE - Integer.numberOfLeadingZeros(value - 1); // see doc of numberOfLeadingZeros
     }
 
-    private static void updateLayers(final ListType layers) {
+    private static void updateLayers(final @Nullable ListType layers) {
         if (layers == null) {
             return;
         }
@@ -910,7 +912,7 @@ public final class V2832 {
         layers.addMap(0, createEmptyLayer()); // add at the bottom
     }
 
-    private static MapType<String> createEmptyLayer() {
+    private static @NotNull MapType<String> createEmptyLayer() {
         final MapType<String> ret = Types.NBT.createEmptyMap();
         ret.setInt("height", 64);
         ret.setString("block", "minecraft:air");
diff --git a/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V2833.java b/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V2833.java
index 4bdac86810c51e9f87ea82ba9f6c6d8ae8ce2bdf..661e103a3d4b184d3c0517d809acaf8d24c8a364 100644
--- a/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V2833.java
+++ b/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V2833.java
@@ -4,6 +4,9 @@ import ca.spottedleaf.dataconverter.converters.DataConverter;
 import ca.spottedleaf.dataconverter.minecraft.MCVersions;
 import ca.spottedleaf.dataconverter.minecraft.datatypes.MCTypeRegistry;
 import ca.spottedleaf.dataconverter.types.MapType;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 public final class V2833 {
 
@@ -12,7 +15,7 @@ public final class V2833 {
     public static void register() {
         MCTypeRegistry.WORLD_GEN_SETTINGS.addStructureConverter(new DataConverter<>(VERSION) {
             @Override
-            public MapType<String> convert(final MapType<String> data, final long sourceVersion, final long toVersion) {
+            public @Nullable MapType<String> convert(final @NotNull MapType<String> data, final long sourceVersion, final long toVersion) {
                 final MapType<String> dimensions = data.getMap("dimensions");
 
                 for (final String dimensionKey : dimensions.keys()) {
diff --git a/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V2841.java b/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V2841.java
index 41b41ff084662bbc2e323713473e4e13b8e50cd7..25ba1fa705be3e446efd15e6d3ab2754fb0570de 100644
--- a/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V2841.java
+++ b/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V2841.java
@@ -9,6 +9,9 @@ import ca.spottedleaf.dataconverter.types.ObjectType;
 import ca.spottedleaf.dataconverter.types.Types;
 import ca.spottedleaf.dataconverter.util.IntegerUtil;
 import it.unimi.dsi.fastutil.ints.Int2ObjectOpenHashMap;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 import java.util.Arrays;
 import java.util.HashSet;
 import java.util.Set;
@@ -28,7 +31,7 @@ public final class V2841 {
     public static void register() {
         MCTypeRegistry.CHUNK.addStructureConverter(new DataConverter<>(VERSION) {
             @Override
-            public MapType<String> convert(final MapType<String> root, final long sourceVersion, final long toVersion) {
+            public @Nullable MapType<String> convert(final @NotNull MapType<String> root, final long sourceVersion, final long toVersion) {
                 final MapType<String> level = root.getMap("Level");
                 if (level == null) {
                     return null;
@@ -86,7 +89,7 @@ public final class V2841 {
         });
     }
 
-    public static ListType migrateTickList(final ListType ticks, final boolean blockTicks, final Int2ObjectOpenHashMap<SimplePaletteReader> sectionBlocks,
+    public static ListType migrateTickList(final @Nullable ListType ticks, final boolean blockTicks, final @NotNull Int2ObjectOpenHashMap<SimplePaletteReader> sectionBlocks,
                                            final int sectionX, final int minSection, final int sectionZ) {
         final ListType ret = Types.NBT.createEmptyList();
 
@@ -111,7 +114,7 @@ public final class V2841 {
         return ret;
     }
 
-    public static MapType<String> createNewTick(final String subjectId, final int localIndex, final int sectionX, final int sectionY, final int sectionZ) {
+    public static @NotNull MapType<String> createNewTick(final String subjectId, final int localIndex, final int sectionX, final int sectionY, final int sectionZ) {
         final int newX = (localIndex & 15) + (sectionX << 4);
         final int newZ = ((localIndex >> 4) & 15) + (sectionZ << 4);
         final int newY = ((localIndex >> 8) & 15) + (sectionY << 4);
@@ -128,11 +131,11 @@ public final class V2841 {
         return ret;
     }
 
-    public static String getBlockId(final MapType<String> blockState) {
+    public static String getBlockId(final @Nullable MapType<String> blockState) {
         return blockState == null ? "minecraft:air" : blockState.getString("Name", "minecraft:air");
     }
 
-    private static String getLiquidId(final MapType<String> blockState) {
+    private static @NotNull String getLiquidId(final @Nullable MapType<String> blockState) {
         if (blockState == null) {
             return "minecraft:empty";
         }
@@ -154,13 +157,13 @@ public final class V2841 {
 
     public static final class SimplePaletteReader {
 
-        public final ListType palette;
+        public final @Nullable ListType palette;
         public final long[] data;
         private final int bitsPerValue;
         private final long mask;
         private final int valuesPerLong;
 
-        public SimplePaletteReader(final ListType palette, final long[] data) {
+        public SimplePaletteReader(final @Nullable ListType palette, final long[] data) {
             this.palette = palette == null ? null : (palette.size() == 0 ? null : palette);
             this.data = data;
             this.bitsPerValue = Math.max(4, IntegerUtil.ceilLog2(this.palette == null ? 0 : this.palette.size()));
@@ -168,12 +171,12 @@ public final class V2841 {
             this.valuesPerLong = (int)(64L / this.bitsPerValue);
         }
 
-        public MapType<String> getState(final int x, final int y, final int z) {
+        public @Nullable MapType<String> getState(final int x, final int y, final int z) {
             final int index = x | (z << 4) | (y << 8);
             return this.getState(index);
         }
 
-        public MapType<String> getState(final int index) {
+        public @Nullable MapType<String> getState(final int index) {
             final ListType palette = this.palette;
             if (palette == null) {
                 return null;
diff --git a/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V2842.java b/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V2842.java
index f06e24bb87baf01b1386fb7a6af1ea04f4d6f2ef..f926620868b77b5b33dcb7ed66dea299fd5d4e6f 100644
--- a/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V2842.java
+++ b/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V2842.java
@@ -8,6 +8,8 @@ import ca.spottedleaf.dataconverter.minecraft.walkers.generic.WalkerUtils;
 import ca.spottedleaf.dataconverter.types.ListType;
 import ca.spottedleaf.dataconverter.types.MapType;
 import ca.spottedleaf.dataconverter.types.ObjectType;
+import org.jetbrains.annotations.NotNull;
+
 
 public final class V2842 {
 
@@ -16,7 +18,7 @@ public final class V2842 {
     public static void register() {
         MCTypeRegistry.CHUNK.addStructureConverter(new DataConverter<>(VERSION) {
             @Override
-            public MapType<String> convert(final MapType<String> root, final long sourceVersion, final long toVersion) {
+            public @NotNull MapType<String> convert(final @NotNull MapType<String> root, final long sourceVersion, final long toVersion) {
                 final MapType<String> level = root.getMap("Level");
                 root.remove("Level");
 
@@ -47,7 +49,7 @@ public final class V2842 {
             }
         });
 
-        MCTypeRegistry.CHUNK.addStructureWalker(VERSION, (final MapType<String> data, final long fromVersion, final long toVersion) -> {
+        MCTypeRegistry.CHUNK.addStructureWalker(VERSION, (final @NotNull MapType<String> data, final long fromVersion, final long toVersion) -> {
             WalkerUtils.convertList(MCTypeRegistry.ENTITY, data, "entities", fromVersion, toVersion);
             WalkerUtils.convertList(MCTypeRegistry.TILE_ENTITY, data, "block_entities", fromVersion, toVersion);
 
diff --git a/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V2843.java b/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V2843.java
index 6333eabb123f13495f7a828fe79c204aff9dcedd..e268d21d9aa44390a5db71cfe666de15ea58976c 100644
--- a/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V2843.java
+++ b/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V2843.java
@@ -9,6 +9,9 @@ import ca.spottedleaf.dataconverter.types.ListType;
 import ca.spottedleaf.dataconverter.types.MapType;
 import ca.spottedleaf.dataconverter.types.ObjectType;
 import ca.spottedleaf.dataconverter.types.Types;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 import java.util.Map;
 
 public final class V2843 {
@@ -19,7 +22,7 @@ public final class V2843 {
         ConverterAbstractStringValueTypeRename.register(VERSION, MCTypeRegistry.BIOME, Map.of("minecraft:deep_warm_ocean", "minecraft:warm_ocean")::get);
 
         MCTypeRegistry.CHUNK.addStructureConverter(new DataConverter<>(VERSION) {
-            private static void moveOutOfBoundTicks(final ListType ticks, final MapType<String> chunkRoot, final int chunkX, final int chunkZ, final String intoKey) {
+            private static void moveOutOfBoundTicks(final @Nullable ListType ticks, final @NotNull MapType<String> chunkRoot, final int chunkX, final int chunkZ, final String intoKey) {
                 if (ticks == null) {
                     return;
                 }
@@ -49,7 +52,7 @@ public final class V2843 {
             }
 
             @Override
-            public MapType<String> convert(final MapType<String> data, final long sourceVersion, final long toVersion) {
+            public @Nullable MapType<String> convert(final @NotNull MapType<String> data, final long sourceVersion, final long toVersion) {
                 // After renames, so use new names
                 final int x = data.getInt("xPos");
                 final int z = data.getInt("zPos");
@@ -62,7 +65,7 @@ public final class V2843 {
         });
 
         // DFU is missing schema for UpgradeData block names
-        MCTypeRegistry.CHUNK.addStructureWalker(VERSION, (final MapType<String> data, final long fromVersion, final long toVersion) -> {
+        MCTypeRegistry.CHUNK.addStructureWalker(VERSION, (final @NotNull MapType<String> data, final long fromVersion, final long toVersion) -> {
             WalkerUtils.convertList(MCTypeRegistry.ENTITY, data, "entities", fromVersion, toVersion);
             WalkerUtils.convertList(MCTypeRegistry.TILE_ENTITY, data, "block_entities", fromVersion, toVersion);
 
diff --git a/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V2852.java b/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V2852.java
index 94ab7be8c34d2ebb557df5a0864130f7f12c2185..533c00d64fcd58f1b17674c86518f3cf868b6092 100644
--- a/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V2852.java
+++ b/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V2852.java
@@ -4,6 +4,9 @@ import ca.spottedleaf.dataconverter.converters.DataConverter;
 import ca.spottedleaf.dataconverter.minecraft.MCVersions;
 import ca.spottedleaf.dataconverter.minecraft.datatypes.MCTypeRegistry;
 import ca.spottedleaf.dataconverter.types.MapType;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 public final class V2852 {
 
@@ -12,7 +15,7 @@ public final class V2852 {
     public static void register() {
         MCTypeRegistry.WORLD_GEN_SETTINGS.addStructureConverter(new DataConverter<>(VERSION) {
             @Override
-            public MapType<String> convert(final MapType<String> data, final long sourceVersion, final long toVersion) {
+            public @Nullable MapType<String> convert(final @NotNull MapType<String> data, final long sourceVersion, final long toVersion) {
                 final MapType<String> dimensions = data.getMap("dimensions");
 
                 for (final String dimensionKey : dimensions.keys()) {
diff --git a/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V2967.java b/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V2967.java
index 7af7bf450080f65b8b7d7a8d2f941846c029e504..a38cae7cd540569012526778512aaee8eedca7f6 100644
--- a/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V2967.java
+++ b/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V2967.java
@@ -4,6 +4,9 @@ import ca.spottedleaf.dataconverter.converters.DataConverter;
 import ca.spottedleaf.dataconverter.minecraft.MCVersions;
 import ca.spottedleaf.dataconverter.minecraft.datatypes.MCTypeRegistry;
 import ca.spottedleaf.dataconverter.types.MapType;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 public final class V2967 {
 
@@ -12,7 +15,7 @@ public final class V2967 {
     public static void register() {
         MCTypeRegistry.WORLD_GEN_SETTINGS.addStructureConverter(new DataConverter<>(VERSION) {
             @Override
-            public MapType<String> convert(final MapType<String> data, final long sourceVersion, final long toVersion) {
+            public @Nullable MapType<String> convert(final @NotNull MapType<String> data, final long sourceVersion, final long toVersion) {
                 final MapType<String> dimensions = data.getMap("dimensions");
 
                 if (dimensions == null) {
diff --git a/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V2970.java b/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V2970.java
index fa824cdf629caec745eff7c09eb4570c62263752..09940a62240a98f4126be4375ad51daed4332eb6 100644
--- a/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V2970.java
+++ b/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V2970.java
@@ -10,6 +10,9 @@ import ca.spottedleaf.dataconverter.types.Types;
 import com.google.common.collect.ImmutableMap;
 import it.unimi.dsi.fastutil.objects.Object2IntMap;
 import it.unimi.dsi.fastutil.objects.Object2IntOpenHashMap;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 import java.util.HashMap;
 import java.util.Iterator;
 import java.util.List;
@@ -44,7 +47,7 @@ public final class V2970 {
 
     public static void register() {
         MCTypeRegistry.CHUNK.addStructureConverter(new DataConverter<>(VERSION) {
-            private static Object2IntOpenHashMap<String> countBiomes(final MapType<String> chunk) {
+            private static @Nullable Object2IntOpenHashMap<String> countBiomes(final @NotNull MapType<String> chunk) {
                 final ListType sections = chunk.getList("sections", ObjectType.MAP);
                 if (sections == null) {
                     return null;
@@ -75,7 +78,7 @@ public final class V2970 {
                 return ret;
             }
 
-            private static String getStructureConverted(String id, final Object2IntOpenHashMap<String> biomeCount) {
+            private static String getStructureConverted(String id, final @Nullable Object2IntOpenHashMap<String> biomeCount) {
                 id = id.toLowerCase(Locale.ROOT);
                 final BiomeRemap remap = CONVERSION_MAP.get(id);
                 if (remap == null) {
@@ -111,7 +114,7 @@ public final class V2970 {
             }
 
             @Override
-            public MapType<String> convert(final MapType<String> data, final long sourceVersion, final long toVersion) {
+            public @Nullable MapType<String> convert(final @NotNull MapType<String> data, final long sourceVersion, final long toVersion) {
                 final MapType<String> structures = data.getMap("structures");
                 if (structures == null || structures.isEmpty()) {
                     return null;
@@ -167,11 +170,11 @@ public final class V2970 {
             this.dfl = dfl;
         }
 
-        public static BiomeRemap create(final String newId) {
+        public static @NotNull BiomeRemap create(final String newId) {
             return new BiomeRemap(null, newId);
         }
 
-        public static BiomeRemap create(final Map<List<String>, String> biomeMap, final String newId) {
+        public static @NotNull BiomeRemap create(final @NotNull Map<List<String>, String> biomeMap, final String newId) {
             final Map<String, String> biomeToNewStructure = new HashMap<>();
 
             for (final Map.Entry<List<String>, String> entry : biomeMap.entrySet()) {
diff --git a/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V3077.java b/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V3077.java
index 97da66165f3e3788af0dfe667509ca7edb15b0a8..e0710bb651a12075f512108da84c623acd62db00 100644
--- a/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V3077.java
+++ b/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V3077.java
@@ -6,6 +6,9 @@ import ca.spottedleaf.dataconverter.minecraft.datatypes.MCTypeRegistry;
 import ca.spottedleaf.dataconverter.types.ListType;
 import ca.spottedleaf.dataconverter.types.MapType;
 import ca.spottedleaf.dataconverter.types.ObjectType;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 public final class V3077 {
 
@@ -14,7 +17,7 @@ public final class V3077 {
     public static void register() {
         MCTypeRegistry.CHUNK.addStructureConverter(new DataConverter<>(VERSION) {
             @Override
-            public MapType<String> convert(final MapType<String> data, final long sourceVersion, final long toVersion) {
+            public @Nullable MapType<String> convert(final @NotNull MapType<String> data, final long sourceVersion, final long toVersion) {
                 final boolean isLightOn = data.getBoolean("isLightOn");
                 if (isLightOn) {
                     return null;
diff --git a/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V3084.java b/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V3084.java
index 52d8510e00d2373226f35e77db6fc7a893ec0764..1e77e33bb39c3a02b92e0a0c6aa4651df12ff306 100644
--- a/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V3084.java
+++ b/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V3084.java
@@ -5,6 +5,8 @@ import ca.spottedleaf.dataconverter.minecraft.converters.helpers.ConverterAbstra
 import ca.spottedleaf.dataconverter.minecraft.datatypes.MCTypeRegistry;
 import ca.spottedleaf.dataconverter.util.NamespaceUtil;
 import com.google.common.collect.ImmutableMap;
+import org.jetbrains.annotations.NotNull;
+
 import java.util.HashMap;
 import java.util.Map;
 
@@ -32,7 +34,7 @@ public final class V3084 {
     );
 
     public static void register() {
-        ConverterAbstractStringValueTypeRename.register(VERSION, MCTypeRegistry.GAME_EVENT_NAME, (final String name) -> {
+        ConverterAbstractStringValueTypeRename.register(VERSION, MCTypeRegistry.GAME_EVENT_NAME, (final @NotNull String name) -> {
             return GAME_EVENT_RENAMES.get(NamespaceUtil.correctNamespace(name));
         });
     }
diff --git a/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V3087.java b/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V3087.java
index 8cc7cadb921d52ebb5b8ed25078145536db5e7b5..1b3fd599b3c1f462d5bc58360cc3286b57c516d0 100644
--- a/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V3087.java
+++ b/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V3087.java
@@ -4,12 +4,14 @@ import ca.spottedleaf.dataconverter.minecraft.MCVersions;
 import ca.spottedleaf.dataconverter.minecraft.converters.entity.ConverterEntityToVariant;
 import ca.spottedleaf.dataconverter.minecraft.datatypes.MCTypeRegistry;
 import it.unimi.dsi.fastutil.ints.Int2ObjectOpenHashMap;
+import org.jetbrains.annotations.NotNull;
+
 
 public final class V3087 {
 
     protected static final int VERSION = MCVersions.V22W13A + 2;
 
-    protected static Int2ObjectOpenHashMap<String> FROG_ID_CONVERSION = new Int2ObjectOpenHashMap<>();
+    protected static @NotNull Int2ObjectOpenHashMap<String> FROG_ID_CONVERSION = new Int2ObjectOpenHashMap<>();
     static {
         FROG_ID_CONVERSION.put(0, "minecraft:temperate");
         FROG_ID_CONVERSION.put(1, "minecraft:warm");
diff --git a/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V3088.java b/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V3088.java
index d21124f6e70c887b9ca67305c8b0c1f4668af8e2..66f1701798ed6f5bca88108364c4cecd9b20af92 100644
--- a/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V3088.java
+++ b/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V3088.java
@@ -6,6 +6,9 @@ import ca.spottedleaf.dataconverter.minecraft.datatypes.MCTypeRegistry;
 import ca.spottedleaf.dataconverter.types.MapType;
 import ca.spottedleaf.dataconverter.types.Types;
 import ca.spottedleaf.dataconverter.util.NamespaceUtil;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 import java.util.Arrays;
 import java.util.HashSet;
 import java.util.Set;
@@ -27,7 +30,7 @@ public final class V3088 {
     public static void register() {
         MCTypeRegistry.CHUNK.addStructureConverter(new DataConverter<>(VERSION) {
 
-            private static MapType<String> createBlendingData(final int height, final int minY) {
+            private static @NotNull MapType<String> createBlendingData(final int height, final int minY) {
                 final MapType<String> ret = Types.NBT.createEmptyMap();
 
                 ret.setInt("min_section", minY >> 4);
@@ -37,7 +40,7 @@ public final class V3088 {
             }
 
             @Override
-            public MapType<String> convert(final MapType<String> data, final long sourceVersion, final long toVersion) {
+            public @Nullable MapType<String> convert(final @NotNull MapType<String> data, final long sourceVersion, final long toVersion) {
                 data.remove("blending_data");
                 final MapType<String> context = data.getMap("__context");
                 if (!"minecraft:overworld".equals(context == null ? null : context.getString("dimension"))) {
diff --git a/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V3090.java b/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V3090.java
index b3250a0b5ae2ab0aa5fffaace882052388861fd8..130edd9087b09a1bd6e4e0e036c449b306b61e3b 100644
--- a/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V3090.java
+++ b/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V3090.java
@@ -5,6 +5,9 @@ import ca.spottedleaf.dataconverter.minecraft.MCVersions;
 import ca.spottedleaf.dataconverter.minecraft.converters.helpers.RenameHelper;
 import ca.spottedleaf.dataconverter.minecraft.datatypes.MCTypeRegistry;
 import ca.spottedleaf.dataconverter.types.MapType;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 public final class V3090 {
 
@@ -13,7 +16,7 @@ public final class V3090 {
     public static void register() {
         MCTypeRegistry.ENTITY.addConverterForId("minecraft:painting", new DataConverter<>(VERSION) {
             @Override
-            public MapType<String> convert(final MapType<String> data, final long sourceVersion, final long toVersion) {
+            public @Nullable MapType<String> convert(final @NotNull MapType<String> data, final long sourceVersion, final long toVersion) {
                 RenameHelper.renameSingle(data, "Motive", "variant");
                 RenameHelper.renameSingle(data, "Facing", "facing");
                 return null;
diff --git a/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V3093.java b/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V3093.java
index 8354c85fc4d92f36555c7de9dc0dffd1da05529a..09e17ca10377e90445683792c265c3b2d39ae419 100644
--- a/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V3093.java
+++ b/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V3093.java
@@ -4,6 +4,9 @@ import ca.spottedleaf.dataconverter.converters.DataConverter;
 import ca.spottedleaf.dataconverter.minecraft.MCVersions;
 import ca.spottedleaf.dataconverter.minecraft.datatypes.MCTypeRegistry;
 import ca.spottedleaf.dataconverter.types.MapType;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 public final class V3093 {
 
@@ -12,7 +15,7 @@ public final class V3093 {
     public static void register() {
         MCTypeRegistry.ENTITY.addConverterForId("minecraft:goat", new DataConverter<>(VERSION) {
             @Override
-            public MapType<String> convert(final MapType<String> data, final long sourceVersion, final long toVersion) {
+            public @Nullable MapType<String> convert(final @NotNull MapType<String> data, final long sourceVersion, final long toVersion) {
                 data.setBoolean("HasLeftHorn", true);
                 data.setBoolean("HasRightHorn", true);
                 return null;
diff --git a/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V3094.java b/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V3094.java
index 39540b5f76af1c7d51a51db9d711f32a3c7f624c..f7f3bf755ff3e35958c05fdffce35ea659604705 100644
--- a/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V3094.java
+++ b/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V3094.java
@@ -4,6 +4,9 @@ import ca.spottedleaf.dataconverter.converters.DataConverter;
 import ca.spottedleaf.dataconverter.minecraft.MCVersions;
 import ca.spottedleaf.dataconverter.minecraft.datatypes.MCTypeRegistry;
 import ca.spottedleaf.dataconverter.types.MapType;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 public final class V3094 {
 
@@ -23,7 +26,7 @@ public final class V3094 {
     public static void register() {
         MCTypeRegistry.ITEM_STACK.addConverterForId("minecraft:goat_horn", new DataConverter<>(VERSION) {
             @Override
-            public MapType<String> convert(final MapType<String> data, final long sourceVersion, final long toVersion) {
+            public @Nullable MapType<String> convert(final @NotNull MapType<String> data, final long sourceVersion, final long toVersion) {
                 final MapType<String> tag = data.getMap("tag");
 
                 if (tag == null) {
diff --git a/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V3097.java b/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V3097.java
index d5ac17b59c0dcc9baaeff022ecbf827c237cf9d6..d5e8cd76bfbf45e66b1ec18e6f6dbb71e035eea0 100644
--- a/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V3097.java
+++ b/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V3097.java
@@ -7,6 +7,9 @@ import ca.spottedleaf.dataconverter.minecraft.converters.entity.ConverterEntityV
 import ca.spottedleaf.dataconverter.minecraft.converters.poi.ConverterPoiDelete;
 import ca.spottedleaf.dataconverter.minecraft.datatypes.MCTypeRegistry;
 import ca.spottedleaf.dataconverter.types.MapType;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 import java.util.HashMap;
 import java.util.HashSet;
 import java.util.Map;
@@ -19,7 +22,7 @@ public final class V3097 {
     public static void register() {
         final DataConverter<MapType<String>, MapType<String>> removeFilteredBookText = new DataConverter<>(VERSION) {
             @Override
-            public MapType<String> convert(final MapType<String> data, final long sourceVersion, final long toVersion) {
+            public @Nullable MapType<String> convert(final @NotNull MapType<String> data, final long sourceVersion, final long toVersion) {
                 final MapType<String> tag = data.getMap("tag");
                 if (tag == null) {
                     return null;
@@ -36,7 +39,7 @@ public final class V3097 {
 
         MCTypeRegistry.TILE_ENTITY.addConverterForId("minecraft:sign", new DataConverter<>(VERSION) {
             @Override
-            public MapType<String> convert(final MapType<String> data, final long sourceVersion, final long toVersion) {
+            public @Nullable MapType<String> convert(final @NotNull MapType<String> data, final long sourceVersion, final long toVersion) {
                 data.remove("FilteredText1");
                 data.remove("FilteredText2");
                 data.remove("FilteredText3");
diff --git a/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V3108.java b/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V3108.java
index 381b49f2c50d46e52f7f9c8f6baede4e72eb343d..2473e5605ca1b724f00189d3943400e72a6f0468 100644
--- a/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V3108.java
+++ b/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V3108.java
@@ -4,6 +4,9 @@ import ca.spottedleaf.dataconverter.converters.DataConverter;
 import ca.spottedleaf.dataconverter.minecraft.MCVersions;
 import ca.spottedleaf.dataconverter.minecraft.datatypes.MCTypeRegistry;
 import ca.spottedleaf.dataconverter.types.MapType;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 public final class V3108 {
 
@@ -12,7 +15,7 @@ public final class V3108 {
     public static void register() {
         MCTypeRegistry.CHUNK.addStructureConverter(new DataConverter<>(VERSION) {
             @Override
-            public MapType<String> convert(final MapType<String> data, final long sourceVersion, final long toVersion) {
+            public @Nullable MapType<String> convert(final @NotNull MapType<String> data, final long sourceVersion, final long toVersion) {
                 final MapType<String> context = data.getMap("__context");
                 if ("minecraft:overworld".equals(context == null ? null : context.getString("dimension"))) {
                     return null;
diff --git a/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V502.java b/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V502.java
index febeab68a5eec229ecca4f9e7b82c9ca99b3dbe1..82bf53ad74c738ba6706b3aaf8dc35fad7ddb9a3 100644
--- a/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V502.java
+++ b/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V502.java
@@ -5,6 +5,9 @@ import ca.spottedleaf.dataconverter.minecraft.MCVersions;
 import ca.spottedleaf.dataconverter.minecraft.converters.itemname.ConverterAbstractItemRename;
 import ca.spottedleaf.dataconverter.minecraft.datatypes.MCTypeRegistry;
 import ca.spottedleaf.dataconverter.types.MapType;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 import java.util.concurrent.ThreadLocalRandom;
 
 public final class V502 {
@@ -12,12 +15,12 @@ public final class V502 {
     protected static final int VERSION = MCVersions.V16W20A + 1;
 
     public static void register() {
-        ConverterAbstractItemRename.register(VERSION, (final String name) -> {
+        ConverterAbstractItemRename.register(VERSION, (final @NotNull String name) -> {
             return "minecraft:cooked_fished".equals(name) ? "minecraft:cooked_fish" : null;
         });
         MCTypeRegistry.ENTITY.addConverterForId("Zombie", new DataConverter<>(VERSION) {
             @Override
-            public MapType<String> convert(final MapType<String> data, final long sourceVersion, final long toVersion) {
+            public @Nullable MapType<String> convert(final @NotNull MapType<String> data, final long sourceVersion, final long toVersion) {
                 if (!data.getBoolean("IsVillager")) {
                     return null;
                 }
diff --git a/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V505.java b/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V505.java
index 30769f902c7d694bce41ab319d0b9a87c6103f11..db6410d54671f324a7bfbd642902532dc9036781 100644
--- a/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V505.java
+++ b/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V505.java
@@ -4,6 +4,9 @@ import ca.spottedleaf.dataconverter.converters.DataConverter;
 import ca.spottedleaf.dataconverter.minecraft.MCVersions;
 import ca.spottedleaf.dataconverter.minecraft.datatypes.MCTypeRegistry;
 import ca.spottedleaf.dataconverter.types.MapType;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 public final class V505 {
 
@@ -12,7 +15,7 @@ public final class V505 {
     public static void register() {
         MCTypeRegistry.OPTIONS.addStructureConverter(new DataConverter<>(VERSION) {
             @Override
-            public MapType<String> convert(final MapType<String> data, final long sourceVersion, final long toVersion) {
+            public @Nullable MapType<String> convert(final @NotNull MapType<String> data, final long sourceVersion, final long toVersion) {
                 data.setString("useVbo", "true");
                 return null;
             }
diff --git a/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V700.java b/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V700.java
index f46b1a0c4bc96d638853cc61e5703798dbf6b886..09efc834b33538cbe71bd0feeee0318013faa787 100644
--- a/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V700.java
+++ b/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V700.java
@@ -5,6 +5,9 @@ import ca.spottedleaf.dataconverter.minecraft.MCVersions;
 import ca.spottedleaf.dataconverter.minecraft.datatypes.MCTypeRegistry;
 import ca.spottedleaf.dataconverter.minecraft.walkers.itemstack.DataWalkerItemLists;
 import ca.spottedleaf.dataconverter.types.MapType;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 public final class V700 {
 
@@ -17,7 +20,7 @@ public final class V700 {
     public static void register() {
         MCTypeRegistry.ENTITY.addConverterForId("Guardian", new DataConverter<>(VERSION) {
             @Override
-            public MapType<String> convert(final MapType<String> data, final long sourceVersion, final long toVersion) {
+            public @Nullable MapType<String> convert(final @NotNull MapType<String> data, final long sourceVersion, final long toVersion) {
                 if (data.getBoolean("Elder")) {
                     data.setString("id", "ElderGuardian");
                 }
diff --git a/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V701.java b/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V701.java
index 42f173f426fb7d26e5ddb5a1c92c63b2e6a4930c..055319bdd7e32d7d5414f7276a88886dbdcc90d0 100644
--- a/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V701.java
+++ b/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V701.java
@@ -5,6 +5,9 @@ import ca.spottedleaf.dataconverter.minecraft.MCVersions;
 import ca.spottedleaf.dataconverter.minecraft.datatypes.MCTypeRegistry;
 import ca.spottedleaf.dataconverter.minecraft.walkers.itemstack.DataWalkerItemLists;
 import ca.spottedleaf.dataconverter.types.MapType;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 public final class V701 {
 
@@ -17,7 +20,7 @@ public final class V701 {
     public static void register() {
         MCTypeRegistry.ENTITY.addConverterForId("Skeleton", new DataConverter<>(VERSION) {
             @Override
-            public MapType<String> convert(final MapType<String> data, final long sourceVersion, final long toVersion) {
+            public @Nullable MapType<String> convert(final @NotNull MapType<String> data, final long sourceVersion, final long toVersion) {
                 final int type = data.getInt("SkeletonType");
                 data.remove("SkeletonType");
 
diff --git a/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V702.java b/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V702.java
index 5cc91edde9c8160f75165bcef554023246e0a224..3d846c452d027d091bb0b2815547ff4f01439a1e 100644
--- a/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V702.java
+++ b/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V702.java
@@ -5,6 +5,9 @@ import ca.spottedleaf.dataconverter.minecraft.MCVersions;
 import ca.spottedleaf.dataconverter.minecraft.datatypes.MCTypeRegistry;
 import ca.spottedleaf.dataconverter.minecraft.walkers.itemstack.DataWalkerItemLists;
 import ca.spottedleaf.dataconverter.types.MapType;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 public final class V702 {
 
@@ -17,7 +20,7 @@ public final class V702 {
     public static void register() {
         MCTypeRegistry.ENTITY.addConverterForId("Zombie", new DataConverter<>(VERSION) {
             @Override
-            public MapType<String> convert(final MapType<String> data, final long sourceVersion, final long toVersion) {
+            public @Nullable MapType<String> convert(final @NotNull MapType<String> data, final long sourceVersion, final long toVersion) {
                 final int zombieType = data.getInt("ZombieType");
                 data.remove("ZombieType");
 
diff --git a/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V703.java b/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V703.java
index 88d9c0fcd88ccfd6d6b46ae050914079c816fa3f..2f9ee5ecb5c56244aa5ae30615a6139018ed7721 100644
--- a/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V703.java
+++ b/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V703.java
@@ -6,6 +6,9 @@ import ca.spottedleaf.dataconverter.minecraft.datatypes.MCTypeRegistry;
 import ca.spottedleaf.dataconverter.minecraft.walkers.itemstack.DataWalkerItemLists;
 import ca.spottedleaf.dataconverter.minecraft.walkers.itemstack.DataWalkerItems;
 import ca.spottedleaf.dataconverter.types.MapType;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 public final class V703 {
 
@@ -14,7 +17,7 @@ public final class V703 {
     public static void register() {
         MCTypeRegistry.ENTITY.addConverterForId("EntityHorse", new DataConverter<>(VERSION) {
             @Override
-            public MapType<String> convert(final MapType<String> data, final long sourceVersion, final long toVersion) {
+            public @Nullable MapType<String> convert(final @NotNull MapType<String> data, final long sourceVersion, final long toVersion) {
                 final int type = data.getInt("Type");
                 data.remove("Type");
 
diff --git a/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V704.java b/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V704.java
index 1b7e01593952390fcbe86e672050a4c37a73e44e..183d19a60708073e78aa2355c1e2225d3da003f5 100644
--- a/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V704.java
+++ b/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V704.java
@@ -18,6 +18,8 @@ import net.minecraft.world.item.BlockItem;
 import net.minecraft.world.item.Item;
 import net.minecraft.world.level.block.Block;
 import net.minecraft.world.level.block.EntityBlock;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
 import net.minecraft.world.level.block.entity.BlockEntity;
 import net.minecraft.world.level.block.entity.BlockEntityType;
 import net.minecraft.world.level.block.state.BlockState;
@@ -254,7 +256,7 @@ public final class V704 {
     public static void register() {
         MCTypeRegistry.TILE_ENTITY.addStructureConverter(new DataConverter<>(VERSION) {
             @Override
-            public MapType<String> convert(final MapType<String> data, final long sourceVersion, final long toVersion) {
+            public @Nullable MapType<String> convert(final @NotNull MapType<String> data, final long sourceVersion, final long toVersion) {
                 final String id = data.getString("id");
                 if (id == null) {
                     return null;
@@ -272,7 +274,7 @@ public final class V704 {
         MCTypeRegistry.TILE_ENTITY.addWalker(VERSION, "minecraft:jukebox", new DataWalkerItems("RecordItem"));
         registerInventory("minecraft:dispenser");
         registerInventory("minecraft:dropper");
-        MCTypeRegistry.TILE_ENTITY.addWalker(VERSION, "minecraft:mob_spawner", (final MapType<String> data, final long fromVersion, final long toVersion) -> {
+        MCTypeRegistry.TILE_ENTITY.addWalker(VERSION, "minecraft:mob_spawner", (final @NotNull MapType<String> data, final long fromVersion, final long toVersion) -> {
             MCTypeRegistry.UNTAGGED_SPAWNER.convert(data, fromVersion, toVersion);
             return null;
         });
@@ -280,7 +282,7 @@ public final class V704 {
         registerInventory("minecraft:hopper");
         MCTypeRegistry.TILE_ENTITY.addWalker(VERSION, "minecraft:flower_pot", new DataWalkerItemNames("Item"));
 
-        MCTypeRegistry.ITEM_STACK.addStructureWalker(VERSION, (final MapType<String> data, final long fromVersion, final long toVersion) -> {
+        MCTypeRegistry.ITEM_STACK.addStructureWalker(VERSION, (final @NotNull MapType<String> data, final long fromVersion, final long toVersion) -> {
             WalkerUtils.convert(MCTypeRegistry.ITEM_NAME, data, "id", fromVersion, toVersion);
 
             final MapType<String> tag = data.getMap("tag");
diff --git a/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V705.java b/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V705.java
index e1d7013e49904dacc5e33d9c0b3f3ddb10e3d07a..8a8b93cb140d406966509681a50fcc67fec143cf 100644
--- a/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V705.java
+++ b/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V705.java
@@ -14,6 +14,7 @@ import ca.spottedleaf.dataconverter.types.ObjectType;
 import ca.spottedleaf.dataconverter.types.ListType;
 import ca.spottedleaf.dataconverter.types.MapType;
 import com.mojang.logging.LogUtils;
+import org.jetbrains.annotations.NotNull;
 import org.slf4j.Logger;
 import java.util.HashMap;
 import java.util.Map;
@@ -171,7 +172,7 @@ public final class V705 {
         registerThrowableProjectile("minecraft:snowball");
         registerMob("minecraft:snowman");
         MCTypeRegistry.ENTITY.addWalker(VERSION, "minecraft:spawner_minecart", new DataWalkerBlockNames("DisplayTile"));
-        MCTypeRegistry.ENTITY.addWalker(VERSION, "minecraft:spawner_minecart", (final MapType<String> data, final long fromVersion, final long toVersion) -> {
+        MCTypeRegistry.ENTITY.addWalker(VERSION, "minecraft:spawner_minecart", (final @NotNull MapType<String> data, final long fromVersion, final long toVersion) -> {
             MCTypeRegistry.UNTAGGED_SPAWNER.convert(data, fromVersion, toVersion);
             return null;
         });
@@ -180,7 +181,7 @@ public final class V705 {
         registerMob("minecraft:squid");
         registerMob("minecraft:stray");
         MCTypeRegistry.ENTITY.addWalker(VERSION, "minecraft:tnt_minecart", new DataWalkerBlockNames("DisplayTile"));
-        MCTypeRegistry.ENTITY.addWalker(VERSION, "minecraft:villager", (final MapType<String> data, final long fromVersion, final long toVersion) -> {
+        MCTypeRegistry.ENTITY.addWalker(VERSION, "minecraft:villager", (final @NotNull MapType<String> data, final long fromVersion, final long toVersion) -> {
             WalkerUtils.convertList(MCTypeRegistry.ITEM_STACK, data, "Inventory", fromVersion, toVersion);
 
             final MapType<String> offers = data.getMap("Offers");
diff --git a/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V804.java b/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V804.java
index 0070a3d02a87b0f08cd5e74d4f106f3e97f6b4f8..628afe3e7b0bc1faafccc96b6d3a6828d77f3b95 100644
--- a/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V804.java
+++ b/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V804.java
@@ -6,6 +6,9 @@ import ca.spottedleaf.dataconverter.minecraft.datatypes.MCTypeRegistry;
 import ca.spottedleaf.dataconverter.types.ObjectType;
 import ca.spottedleaf.dataconverter.types.ListType;
 import ca.spottedleaf.dataconverter.types.MapType;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 public final class V804 {
 
@@ -14,7 +17,7 @@ public final class V804 {
     public static void register() {
         MCTypeRegistry.ITEM_STACK.addConverterForId("minecraft:banner", new DataConverter<>(VERSION) {
             @Override
-            public MapType<String> convert(final MapType<String> data, final long sourceVersion, final long toVersion) {
+            public @Nullable MapType<String> convert(final @NotNull MapType<String> data, final long sourceVersion, final long toVersion) {
                 final MapType<String> tag = data.getMap("tag");
                 if (tag == null) {
                     return null;
diff --git a/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V806.java b/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V806.java
index a2717b9d936872ec07141b0f3ae2a6eec81f2dbf..9296d4d22e4116553384bac2c928bf62a06858df 100644
--- a/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V806.java
+++ b/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V806.java
@@ -6,6 +6,9 @@ import ca.spottedleaf.dataconverter.minecraft.datatypes.MCTypeRegistry;
 import ca.spottedleaf.dataconverter.types.ObjectType;
 import ca.spottedleaf.dataconverter.types.MapType;
 import ca.spottedleaf.dataconverter.types.Types;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 public final class V806 {
 
@@ -14,7 +17,7 @@ public final class V806 {
     public static void register() {
         final DataConverter<MapType<String>, MapType<String>> potionWaterUpdater = new DataConverter<>(VERSION) {
             @Override
-            public MapType<String> convert(final MapType<String> data, final long sourceVersion, final long toVersion) {
+            public @Nullable MapType<String> convert(final @NotNull MapType<String> data, final long sourceVersion, final long toVersion) {
                 MapType<String> tag = data.getMap("tag");
                 if (tag == null) {
                     tag = Types.NBT.createEmptyMap();
diff --git a/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V808.java b/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V808.java
index b058e5e9b34a9dd134ef93e7a397b5f1e4e11fbd..06137310a0004d345e1741b9d4a599171338ce13 100644
--- a/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V808.java
+++ b/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V808.java
@@ -6,6 +6,9 @@ import ca.spottedleaf.dataconverter.minecraft.datatypes.MCTypeRegistry;
 import ca.spottedleaf.dataconverter.minecraft.walkers.itemstack.DataWalkerItemLists;
 import ca.spottedleaf.dataconverter.types.ObjectType;
 import ca.spottedleaf.dataconverter.types.MapType;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 public final class V808 {
 
@@ -14,7 +17,7 @@ public final class V808 {
     public static void register() {
         MCTypeRegistry.ENTITY.addConverterForId("minecraft:shulker", new DataConverter<>(VERSION, 1) {
             @Override
-            public MapType<String> convert(final MapType<String> data, final long sourceVersion, final long toVersion) {
+            public @Nullable MapType<String> convert(final @NotNull MapType<String> data, final long sourceVersion, final long toVersion) {
                 if (!data.hasKey("Color", ObjectType.NUMBER)) {
                     data.setByte("Color", (byte)10);
                 }
diff --git a/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V813.java b/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V813.java
index b6de7c32acd0adf78812edbbd184117661599c80..cca6bde22b161b554f9591f98926f3dc8ff0f41f 100644
--- a/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V813.java
+++ b/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V813.java
@@ -4,6 +4,9 @@ import ca.spottedleaf.dataconverter.converters.DataConverter;
 import ca.spottedleaf.dataconverter.minecraft.MCVersions;
 import ca.spottedleaf.dataconverter.minecraft.datatypes.MCTypeRegistry;
 import ca.spottedleaf.dataconverter.types.MapType;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 public final class V813 {
 
@@ -31,7 +34,7 @@ public final class V813 {
     public static void register() {
         MCTypeRegistry.ITEM_STACK.addConverterForId("minecraft:shulker_box", new DataConverter<>(VERSION) {
             @Override
-            public MapType<String> convert(final MapType<String> data, final long sourceVersion, final long toVersion) {
+            public @Nullable MapType<String> convert(final @NotNull MapType<String> data, final long sourceVersion, final long toVersion) {
                 final MapType<String> tag = data.getMap("tag");
                 if (tag == null) {
                     return null;
@@ -53,7 +56,7 @@ public final class V813 {
 
         MCTypeRegistry.TILE_ENTITY.addConverterForId("minecraft:shulker_box", new DataConverter<>(VERSION) {
             @Override
-            public MapType<String> convert(final MapType<String> data, final long sourceVersion, final long toVersion) {
+            public @Nullable MapType<String> convert(final @NotNull MapType<String> data, final long sourceVersion, final long toVersion) {
                 data.remove("Color");
                 return null;
             }
diff --git a/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V816.java b/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V816.java
index 4b427c128bd75d2dc8b36f0c377454385c029467..560793463d55081ae72450d9e0ea1f7fa5f4c738 100644
--- a/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V816.java
+++ b/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V816.java
@@ -4,6 +4,9 @@ import ca.spottedleaf.dataconverter.converters.DataConverter;
 import ca.spottedleaf.dataconverter.minecraft.MCVersions;
 import ca.spottedleaf.dataconverter.minecraft.datatypes.MCTypeRegistry;
 import ca.spottedleaf.dataconverter.types.MapType;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 import java.util.Locale;
 
 public final class V816 {
@@ -13,7 +16,7 @@ public final class V816 {
     public static void register() {
         MCTypeRegistry.OPTIONS.addStructureConverter(new DataConverter<>(VERSION) {
             @Override
-            public MapType<String> convert(final MapType<String> data, final long sourceVersion, final long toVersion) {
+            public @Nullable MapType<String> convert(final @NotNull MapType<String> data, final long sourceVersion, final long toVersion) {
                 final String lang = data.getString("lang");
                 if (lang != null) {
                     data.setString("lang", lang.toLowerCase(Locale.ROOT));
diff --git a/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V99.java b/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V99.java
index d95f8af7bd9bcedbb30be1b59e3dc749551e8cbe..7e9b93f68eaaa8a6ceeb4b5ad7e6cf0c7bdc03e1 100644
--- a/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V99.java
+++ b/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V99.java
@@ -15,6 +15,7 @@ import ca.spottedleaf.dataconverter.types.ObjectType;
 import ca.spottedleaf.dataconverter.types.ListType;
 import ca.spottedleaf.dataconverter.types.MapType;
 import com.mojang.logging.LogUtils;
+import org.jetbrains.annotations.NotNull;
 import org.slf4j.Logger;
 import java.util.HashMap;
 import java.util.Map;
@@ -80,7 +81,7 @@ public final class V99 {
 
     public static void register() {
         // entities
-        MCTypeRegistry.ENTITY.addStructureWalker(VERSION, (final MapType<String> data, final long fromVersion, final long toVersion) -> {
+        MCTypeRegistry.ENTITY.addStructureWalker(VERSION, (final @NotNull MapType<String> data, final long fromVersion, final long toVersion) -> {
             WalkerUtils.convert(MCTypeRegistry.ENTITY, data, "Riding", fromVersion, toVersion);
 
             return null;
@@ -108,7 +109,7 @@ public final class V99 {
         // Vanilla does not make the generic minecart convert spawners, but we do.
         MCTypeRegistry.ENTITY.addWalker(VERSION, "Minecart", new DataWalkerBlockNames("DisplayTile")); // for all minecart types
         MCTypeRegistry.ENTITY.addWalker(VERSION, "Minecart", new DataWalkerItemLists("Items")); // for chest types
-        MCTypeRegistry.ENTITY.addWalker(VERSION, "Minecart", (final MapType<String> data, final long fromVersion, final long toVersion) -> {
+        MCTypeRegistry.ENTITY.addWalker(VERSION, "Minecart", (final @NotNull MapType<String> data, final long fromVersion, final long toVersion) -> {
             MCTypeRegistry.UNTAGGED_SPAWNER.convert(data, fromVersion, toVersion);
             return null;
         }); // for spawner type
@@ -118,7 +119,7 @@ public final class V99 {
         MCTypeRegistry.ENTITY.addWalker(VERSION, "MinecartFurnace", new DataWalkerBlockNames("DisplayTile"));
         MCTypeRegistry.ENTITY.addWalker(VERSION, "MinecartTNT", new DataWalkerBlockNames("DisplayTile"));
         MCTypeRegistry.ENTITY.addWalker(VERSION, "MinecartSpawner", new DataWalkerBlockNames("DisplayTile"));
-        MCTypeRegistry.ENTITY.addWalker(VERSION, "MinecartSpawner", (final MapType<String> data, final long fromVersion, final long toVersion) -> {
+        MCTypeRegistry.ENTITY.addWalker(VERSION, "MinecartSpawner", (final @NotNull MapType<String> data, final long fromVersion, final long toVersion) -> {
             MCTypeRegistry.UNTAGGED_SPAWNER.convert(data, fromVersion, toVersion);
             return null;
         });
@@ -160,7 +161,7 @@ public final class V99 {
         MCTypeRegistry.ENTITY.addWalker(VERSION, "EntityHorse", new DataWalkerItems("ArmorItem", "SaddleItem"));
         registerMob("Rabbit");
         MCTypeRegistry.ENTITY.addWalker(VERSION, "Villager", new DataWalkerItemLists("Inventory", "Equipment"));
-        MCTypeRegistry.ENTITY.addWalker(VERSION, "Villager", (final MapType<String> data, final long fromVersion, final long toVersion) -> {
+        MCTypeRegistry.ENTITY.addWalker(VERSION, "Villager", (final @NotNull MapType<String> data, final long fromVersion, final long toVersion) -> {
             final MapType<String> offers = data.getMap("Offers");
             if (offers != null) {
                 final ListType recipes = offers.getList("Recipes", ObjectType.MAP);
@@ -187,7 +188,7 @@ public final class V99 {
         MCTypeRegistry.TILE_ENTITY.addWalker(VERSION, "RecordPlayer", new DataWalkerItems("RecordItem"));
         registerInventory("Trap");
         registerInventory("Dropper");
-        MCTypeRegistry.TILE_ENTITY.addWalker(VERSION, "MobSpawner", (final MapType<String> data, final long fromVersion, final long toVersion) -> {
+        MCTypeRegistry.TILE_ENTITY.addWalker(VERSION, "MobSpawner", (final @NotNull MapType<String> data, final long fromVersion, final long toVersion) -> {
             MCTypeRegistry.UNTAGGED_SPAWNER.convert(data, fromVersion, toVersion);
             return null;
         });
@@ -198,7 +199,7 @@ public final class V99 {
 
         // rest
 
-        MCTypeRegistry.ITEM_STACK.addStructureWalker(VERSION, (final MapType<String> data, final long fromVersion, final long toVersion) -> {
+        MCTypeRegistry.ITEM_STACK.addStructureWalker(VERSION, (final @NotNull MapType<String> data, final long fromVersion, final long toVersion) -> {
             WalkerUtils.convert(MCTypeRegistry.ITEM_NAME, data, "id", fromVersion, toVersion);
 
             final MapType<String> tag = data.getMap("tag");
@@ -284,7 +285,7 @@ public final class V99 {
 
         MCTypeRegistry.PLAYER.addStructureWalker(VERSION, new DataWalkerItemLists("Inventory", "EnderItems"));
 
-        MCTypeRegistry.CHUNK.addStructureWalker(VERSION, (final MapType<String> data, final long fromVersion, final long toVersion) -> {
+        MCTypeRegistry.CHUNK.addStructureWalker(VERSION, (final @NotNull MapType<String> data, final long fromVersion, final long toVersion) -> {
             final MapType<String> level = data.getMap("Level");
             if (level == null) {
                 return null;
@@ -304,13 +305,13 @@ public final class V99 {
             return null;
         });
 
-        MCTypeRegistry.ENTITY_CHUNK.addStructureWalker(VERSION, (final MapType<String> data, final long fromVersion, final long toVersion) -> {
+        MCTypeRegistry.ENTITY_CHUNK.addStructureWalker(VERSION, (final @NotNull MapType<String> data, final long fromVersion, final long toVersion) -> {
             WalkerUtils.convertList(MCTypeRegistry.ENTITY, data, "Entities", fromVersion, toVersion);
 
             return null;
         });
 
-        MCTypeRegistry.SAVED_DATA.addStructureWalker(VERSION, (final MapType<String> root, final long fromVersion, final long toVersion) -> {
+        MCTypeRegistry.SAVED_DATA.addStructureWalker(VERSION, (final @NotNull MapType<String> root, final long fromVersion, final long toVersion) -> {
             final MapType<String> data = root.getMap("data");
             if (data == null) {
                 return null;
diff --git a/src/main/java/ca/spottedleaf/dataconverter/minecraft/walkers/game_event/GameEventListenerWalker.java b/src/main/java/ca/spottedleaf/dataconverter/minecraft/walkers/game_event/GameEventListenerWalker.java
index e7655645f5d32026a609a8c7517827653c5c5e8b..ef177071a56eed7238164124bc3526d09462e0ed 100644
--- a/src/main/java/ca/spottedleaf/dataconverter/minecraft/walkers/game_event/GameEventListenerWalker.java
+++ b/src/main/java/ca/spottedleaf/dataconverter/minecraft/walkers/game_event/GameEventListenerWalker.java
@@ -4,11 +4,14 @@ import ca.spottedleaf.dataconverter.converters.datatypes.DataWalker;
 import ca.spottedleaf.dataconverter.minecraft.datatypes.MCTypeRegistry;
 import ca.spottedleaf.dataconverter.minecraft.walkers.generic.WalkerUtils;
 import ca.spottedleaf.dataconverter.types.MapType;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 public final class GameEventListenerWalker implements DataWalker<String> {
 
     @Override
-    public MapType<String> walk(final MapType<String> data, final long fromVersion, final long toVersion) {
+    public @Nullable MapType<String> walk(final @NotNull MapType<String> data, final long fromVersion, final long toVersion) {
         final MapType<String> listener = data.getMap("listener");
         if (listener == null) {
             return null;
diff --git a/src/main/java/ca/spottedleaf/dataconverter/minecraft/walkers/generic/DataWalkerListPaths.java b/src/main/java/ca/spottedleaf/dataconverter/minecraft/walkers/generic/DataWalkerListPaths.java
index 7c8f6a5034b48e1ec2c5925211f491115ca735aa..be7b24316153726ffcb2f8b05ad23605518411fc 100644
--- a/src/main/java/ca/spottedleaf/dataconverter/minecraft/walkers/generic/DataWalkerListPaths.java
+++ b/src/main/java/ca/spottedleaf/dataconverter/minecraft/walkers/generic/DataWalkerListPaths.java
@@ -4,6 +4,9 @@ import ca.spottedleaf.dataconverter.converters.datatypes.DataType;
 import ca.spottedleaf.dataconverter.converters.datatypes.DataWalker;
 import ca.spottedleaf.dataconverter.types.ListType;
 import ca.spottedleaf.dataconverter.types.MapType;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 public class DataWalkerListPaths<T, R> implements DataWalker<String> {
 
@@ -16,7 +19,7 @@ public class DataWalkerListPaths<T, R> implements DataWalker<String> {
     }
 
     @Override
-    public final MapType<String> walk(final MapType<String> data, final long fromVersion, final long toVersion) {
+    public final @Nullable MapType<String> walk(final @NotNull MapType<String> data, final long fromVersion, final long toVersion) {
         final DataType<T, R> type = this.type;
         for (final String path : this.paths) {
             final ListType list = data.getListUnchecked(path);
diff --git a/src/main/java/ca/spottedleaf/dataconverter/minecraft/walkers/generic/DataWalkerTypePaths.java b/src/main/java/ca/spottedleaf/dataconverter/minecraft/walkers/generic/DataWalkerTypePaths.java
index e66b4e0f7cdb032b545ace7ba852ad7979f3c96a..4209276b71c4ee7f49c8dc975df6c1e300e08396 100644
--- a/src/main/java/ca/spottedleaf/dataconverter/minecraft/walkers/generic/DataWalkerTypePaths.java
+++ b/src/main/java/ca/spottedleaf/dataconverter/minecraft/walkers/generic/DataWalkerTypePaths.java
@@ -3,6 +3,9 @@ package ca.spottedleaf.dataconverter.minecraft.walkers.generic;
 import ca.spottedleaf.dataconverter.converters.datatypes.DataType;
 import ca.spottedleaf.dataconverter.converters.datatypes.DataWalker;
 import ca.spottedleaf.dataconverter.types.MapType;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 public class DataWalkerTypePaths<T, R> implements DataWalker<String> {
 
@@ -15,7 +18,7 @@ public class DataWalkerTypePaths<T, R> implements DataWalker<String> {
     }
 
     @Override
-    public final MapType<String> walk(final MapType<String> data, final long fromVersion, final long toVersion) {
+    public final @Nullable MapType<String> walk(final @NotNull MapType<String> data, final long fromVersion, final long toVersion) {
         for (final String path : this.paths) {
             final Object current = data.getGeneric(path);
             if (current == null) {
diff --git a/src/main/java/ca/spottedleaf/dataconverter/minecraft/walkers/generic/WalkerUtils.java b/src/main/java/ca/spottedleaf/dataconverter/minecraft/walkers/generic/WalkerUtils.java
index 1e81a1e46a9c0ffceb564a7b1fc4d1b51009f3f7..d90d47e4e86a792fdb7d08e09a432ee441f5f312 100644
--- a/src/main/java/ca/spottedleaf/dataconverter/minecraft/walkers/generic/WalkerUtils.java
+++ b/src/main/java/ca/spottedleaf/dataconverter/minecraft/walkers/generic/WalkerUtils.java
@@ -6,11 +6,14 @@ import ca.spottedleaf.dataconverter.minecraft.datatypes.MCValueType;
 import ca.spottedleaf.dataconverter.types.ObjectType;
 import ca.spottedleaf.dataconverter.types.ListType;
 import ca.spottedleaf.dataconverter.types.MapType;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 import java.util.ArrayList;
 
 public final class WalkerUtils {
 
-    public static void convert(final MCDataType type, final MapType<String> data, final String path, final long fromVersion, final long toVersion) {
+    public static void convert(final @NotNull MCDataType type, final @Nullable MapType<String> data, final String path, final long fromVersion, final long toVersion) {
         if (data == null) {
             return;
         }
@@ -24,7 +27,7 @@ public final class WalkerUtils {
         }
     }
 
-    public static void convertList(final MCDataType type, final MapType<String> data, final String path, final long fromVersion, final long toVersion) {
+    public static void convertList(final @NotNull MCDataType type, final @Nullable MapType<String> data, final String path, final long fromVersion, final long toVersion) {
         if (data == null) {
             return;
         }
@@ -40,7 +43,7 @@ public final class WalkerUtils {
         }
     }
 
-    public static void convert(final MCValueType type, final MapType<String> data, final String path, final long fromVersion, final long toVersion) {
+    public static void convert(final @NotNull MCValueType type, final @Nullable MapType<String> data, final String path, final long fromVersion, final long toVersion) {
         if (data == null) {
             return;
         }
@@ -54,7 +57,7 @@ public final class WalkerUtils {
         }
     }
 
-    public static void convert(final MCValueType type, final ListType data, final long fromVersion, final long toVersion) {
+    public static void convert(final @NotNull MCValueType type, final @Nullable ListType data, final long fromVersion, final long toVersion) {
         if (data == null) {
             return;
         }
@@ -68,7 +71,7 @@ public final class WalkerUtils {
         }
     }
 
-    public static void convertList(final MCValueType type, final MapType<String> data, final String path, final long fromVersion, final long toVersion) {
+    public static void convertList(final @NotNull MCValueType type, final @Nullable MapType<String> data, final String path, final long fromVersion, final long toVersion) {
         if (data == null) {
             return;
         }
@@ -79,7 +82,7 @@ public final class WalkerUtils {
         }
     }
 
-    public static void convertKeys(final MCValueType type, final MapType<String> data, final String path, final long fromVersion, final long toVersion) {
+    public static void convertKeys(final @NotNull MCValueType type, final @Nullable MapType<String> data, final String path, final long fromVersion, final long toVersion) {
         if (data == null) {
             return;
         }
@@ -90,17 +93,17 @@ public final class WalkerUtils {
         }
     }
 
-    public static void convertKeys(final MCValueType type, final MapType<String> data, final long fromVersion, final long toVersion) {
+    public static void convertKeys(final @NotNull MCValueType type, final @Nullable MapType<String> data, final long fromVersion, final long toVersion) {
         if (data == null) {
             return;
         }
 
-        RenameHelper.renameKeys(data, (final String input) -> {
+        RenameHelper.renameKeys(data, (final @NotNull String input) -> {
             return (String)type.convert(input, fromVersion, toVersion);
         });
     }
 
-    public static void convertValues(final MCDataType type, final MapType<String> data, final String path, final long fromVersion, final long toVersion) {
+    public static void convertValues(final @NotNull MCDataType type, final @Nullable MapType<String> data, final String path, final long fromVersion, final long toVersion) {
         if (data == null) {
             return;
         }
@@ -108,7 +111,7 @@ public final class WalkerUtils {
         convertValues(type, data.getMap(path), fromVersion, toVersion);
     }
 
-    public static void convertValues(final MCDataType type, final MapType<String> data, final long fromVersion, final long toVersion) {
+    public static void convertValues(final @NotNull MCDataType type, final @Nullable MapType<String> data, final long fromVersion, final long toVersion) {
         if (data == null) {
             return;
         }
diff --git a/src/main/java/ca/spottedleaf/dataconverter/types/ListType.java b/src/main/java/ca/spottedleaf/dataconverter/types/ListType.java
index 19f7e95f754e8385bbe60fd2fb7fc95b6a4ebd7c..26c069c422a49ec0640d0d4cfc0afc1eda76a6bf 100644
--- a/src/main/java/ca/spottedleaf/dataconverter/types/ListType.java
+++ b/src/main/java/ca/spottedleaf/dataconverter/types/ListType.java
@@ -1,5 +1,8 @@
 package ca.spottedleaf.dataconverter.types;
 
+import org.jetbrains.annotations.Nullable;
+
+
 public interface ListType {
 
     public TypeUtil getTypeUtil();
@@ -108,7 +111,7 @@ public interface ListType {
 
     // types here are strict. if the type on get does not match the underlying type, will throw.
 
-    public Number getNumber(final int index);
+    public @Nullable Number getNumber(final int index);
 
     // if the value at index is a Number but not a byte, then returns the number casted to byte. If the value at the index is not a number, then throws
     public byte getByte(final int index);
@@ -156,15 +159,15 @@ public interface ListType {
 
     public void setLongs(final int index, final long[] to);
 
-    public ListType getList(final int index);
+    public @Nullable ListType getList(final int index);
 
     public void setList(final int index, final ListType list);
 
-    public <T> MapType<T> getMap(final int index);
+    public <T> @Nullable MapType<T> getMap(final int index);
 
     public void setMap(final int index, final MapType<?> to);
 
-    public String getString(final int index);
+    public @Nullable String getString(final int index);
 
     public void setString(final int index, final String to);
 
diff --git a/src/main/java/ca/spottedleaf/dataconverter/types/MapType.java b/src/main/java/ca/spottedleaf/dataconverter/types/MapType.java
index 1bd7809b7ee198d1ceeb2756b44105e1b0de956e..d7c385f1a61dd1138480ea0b77fd666c450f7e6c 100644
--- a/src/main/java/ca/spottedleaf/dataconverter/types/MapType.java
+++ b/src/main/java/ca/spottedleaf/dataconverter/types/MapType.java
@@ -1,5 +1,7 @@
 package ca.spottedleaf.dataconverter.types;
 
+import org.jetbrains.annotations.Nullable;
+
 import java.util.Set;
 
 public interface MapType<K> {
@@ -29,14 +31,14 @@ public interface MapType<K> {
 
     public void remove(final K key);
 
-    public Object getGeneric(final K key);
+    public @Nullable Object getGeneric(final K key);
 
     // types here are not strict. if the key maps to a different type, default is always returned
     // if default is not a parameter, then default is always null
 
-    public Number getNumber(final K key);
+    public @Nullable Number getNumber(final K key);
 
-    public Number getNumber(final K key, final Number dfl);
+    public @Nullable Number getNumber(final K key, final Number dfl);
 
     public boolean getBoolean(final K key);
 
diff --git a/src/main/java/ca/spottedleaf/dataconverter/types/ObjectType.java b/src/main/java/ca/spottedleaf/dataconverter/types/ObjectType.java
index 1aab91233ddb98c3af5d424bac120891f1ee16c7..14d759e9ee443c34f8836f57a4b818b81ae4b741 100644
--- a/src/main/java/ca/spottedleaf/dataconverter/types/ObjectType.java
+++ b/src/main/java/ca/spottedleaf/dataconverter/types/ObjectType.java
@@ -1,5 +1,8 @@
 package ca.spottedleaf.dataconverter.types;
 
+import org.jetbrains.annotations.Nullable;
+
+
 public enum ObjectType {
     NONE(null),
     BYTE(Byte.class),
@@ -21,7 +24,7 @@ public enum ObjectType {
     private final Class<?> clazz;
     private final boolean isNumber;
 
-    private ObjectType(final Class<?> clazz) {
+    private ObjectType(final @Nullable Class<?> clazz) {
         this.clazz = clazz;
         this.isNumber = clazz != null && Number.class.isAssignableFrom(clazz);
     }
@@ -34,7 +37,7 @@ public enum ObjectType {
         return this.clazz;
     }
 
-    public static ObjectType getType(final Object object) {
+    public static @Nullable ObjectType getType(final Object object) {
         if (object instanceof Number) {
             if (object instanceof Byte) {
                 return BYTE;
diff --git a/src/main/java/ca/spottedleaf/dataconverter/types/json/JsonListType.java b/src/main/java/ca/spottedleaf/dataconverter/types/json/JsonListType.java
index f6f57cb3a215876976b5eecae810b8b20925f2e2..f1f2cdcc48f62027b392d40c00bbeb0d40324e99 100644
--- a/src/main/java/ca/spottedleaf/dataconverter/types/json/JsonListType.java
+++ b/src/main/java/ca/spottedleaf/dataconverter/types/json/JsonListType.java
@@ -9,6 +9,9 @@ import com.google.gson.JsonArray;
 import com.google.gson.JsonElement;
 import com.google.gson.JsonObject;
 import com.google.gson.JsonPrimitive;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 public final class JsonListType implements ListType {
 
@@ -26,12 +29,12 @@ public final class JsonListType implements ListType {
     }
 
     @Override
-    public TypeUtil getTypeUtil() {
+    public @NotNull TypeUtil getTypeUtil() {
         return this.compressed ? Types.JSON_COMPRESSED : Types.JSON;
     }
 
     @Override
-    public boolean equals(final Object obj) {
+    public boolean equals(final @Nullable Object obj) {
         if (this == obj) {
             return true;
         }
@@ -49,7 +52,7 @@ public final class JsonListType implements ListType {
     }
 
     @Override
-    public String toString() {
+    public @NotNull String toString() {
         return "JsonListType{" +
                 "array=" + this.array +
                 ", compressed=" + this.compressed +
@@ -61,12 +64,12 @@ public final class JsonListType implements ListType {
     }
 
     @Override
-    public ListType copy() {
+    public @NotNull ListType copy() {
         return new JsonListType(JsonTypeUtil.copyJson(this.array), this.compressed);
     }
 
     @Override
-    public ObjectType getType() {
+    public @NotNull ObjectType getType() {
         return ObjectType.UNDEFINED;
     }
 
@@ -81,7 +84,7 @@ public final class JsonListType implements ListType {
     }
 
     @Override
-    public Number getNumber(final int index) {
+    public @Nullable Number getNumber(final int index) {
         final JsonElement element = this.array.get(index);
         if (element instanceof JsonPrimitive) {
             final JsonPrimitive primitive = (JsonPrimitive)element;
@@ -221,7 +224,7 @@ public final class JsonListType implements ListType {
     }
 
     @Override
-    public ListType getList(final int index) {
+    public @Nullable ListType getList(final int index) {
         final JsonElement element = this.array.get(index);
         if (element instanceof JsonArray) {
             return new JsonListType((JsonArray)element, this.compressed);
@@ -230,12 +233,12 @@ public final class JsonListType implements ListType {
     }
 
     @Override
-    public void setList(final int index, final ListType list) {
+    public void setList(final int index, final @NotNull ListType list) {
         this.array.set(index, ((JsonListType)list).array);
     }
 
     @Override
-    public MapType<String> getMap(final int index) {
+    public @Nullable MapType<String> getMap(final int index) {
         final JsonElement element = this.array.get(index);
         if (element instanceof JsonObject) {
             return new JsonMapType((JsonObject)element, this.compressed);
@@ -244,12 +247,12 @@ public final class JsonListType implements ListType {
     }
 
     @Override
-    public void setMap(final int index, final MapType<?> to) {
+    public void setMap(final int index, final @NotNull MapType<?> to) {
         this.array.set(index, ((JsonMapType)to).map);
     }
 
     @Override
-    public String getString(final int index) {
+    public @Nullable String getString(final int index) {
         final JsonElement element = this.array.get(index);
         if (element instanceof JsonPrimitive) {
             final JsonPrimitive primitive = (JsonPrimitive)element;
@@ -262,7 +265,7 @@ public final class JsonListType implements ListType {
     }
 
     @Override
-    public void setString(final int index, final String to) {
+    public void setString(final int index, final @NotNull String to) {
         this.array.set(index, new JsonPrimitive(to));
     }
 
@@ -381,7 +384,7 @@ public final class JsonListType implements ListType {
     }
 
     @Override
-    public void addList(final ListType list) {
+    public void addList(final @NotNull ListType list) {
         this.array.add(((JsonListType)list).array);
     }
 
@@ -392,7 +395,7 @@ public final class JsonListType implements ListType {
     }
 
     @Override
-    public void addMap(final MapType<?> map) {
+    public void addMap(final @NotNull MapType<?> map) {
         this.array.add(((JsonMapType)map).map);
     }
 
diff --git a/src/main/java/ca/spottedleaf/dataconverter/types/json/JsonMapType.java b/src/main/java/ca/spottedleaf/dataconverter/types/json/JsonMapType.java
index c89bcc4b9974dd65bad9b096cccf8a4369d47f4f..57aa882206f7f5b27903c5373b030f9355724474 100644
--- a/src/main/java/ca/spottedleaf/dataconverter/types/json/JsonMapType.java
+++ b/src/main/java/ca/spottedleaf/dataconverter/types/json/JsonMapType.java
@@ -9,6 +9,9 @@ import com.google.gson.JsonArray;
 import com.google.gson.JsonElement;
 import com.google.gson.JsonObject;
 import com.google.gson.JsonPrimitive;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 import java.util.LinkedHashSet;
 import java.util.Map;
 import java.util.Set;
@@ -29,12 +32,12 @@ public final class JsonMapType implements MapType<String> {
     }
 
     @Override
-    public TypeUtil getTypeUtil() {
+    public @NotNull TypeUtil getTypeUtil() {
         return this.compressed ? Types.JSON_COMPRESSED : Types.JSON;
     }
 
     @Override
-    public boolean equals(final Object obj) {
+    public boolean equals(final @Nullable Object obj) {
         if (this == obj) {
             return true;
         }
@@ -52,7 +55,7 @@ public final class JsonMapType implements MapType<String> {
     }
 
     @Override
-    public String toString() {
+    public @NotNull String toString() {
         return "JsonMapType{" +
                 "map=" + this.map +
                 ", compressed=" + this.compressed +
@@ -79,7 +82,7 @@ public final class JsonMapType implements MapType<String> {
     }
 
     @Override
-    public Set<String> keys() {
+    public @NotNull Set<String> keys() {
         // ah shit. no keyset method
         final Set<String> keys = new LinkedHashSet<>();
 
@@ -91,7 +94,7 @@ public final class JsonMapType implements MapType<String> {
     }
 
     @Override
-    public MapType<String> copy() {
+    public @NotNull MapType<String> copy() {
         return new JsonMapType(JsonTypeUtil.copyJson(this.map), this.compressed);
     }
 
@@ -101,7 +104,7 @@ public final class JsonMapType implements MapType<String> {
     }
 
     @Override
-    public boolean hasKey(final String key, final ObjectType type) {
+    public boolean hasKey(final String key, final @NotNull ObjectType type) {
         final JsonElement element = this.map.get(key);
         if (element == null) {
             return false;
@@ -149,7 +152,7 @@ public final class JsonMapType implements MapType<String> {
     }
 
     @Override
-    public Object getGeneric(final String key) {
+    public @Nullable Object getGeneric(final String key) {
         final JsonElement element = this.map.get(key);
         if (element == null || element.isJsonNull()) {
             return null;
@@ -173,12 +176,12 @@ public final class JsonMapType implements MapType<String> {
     }
 
     @Override
-    public Number getNumber(final String key) {
+    public @Nullable Number getNumber(final String key) {
         return this.getNumber(key, null);
     }
 
     @Override
-    public Number getNumber(final String key, final Number dfl) {
+    public @Nullable Number getNumber(final String key, final Number dfl) {
         final JsonElement element = this.map.get(key);
         if (element instanceof JsonPrimitive) {
             final JsonPrimitive primitive = (JsonPrimitive)element;
@@ -219,7 +222,7 @@ public final class JsonMapType implements MapType<String> {
     }
 
     @Override
-    public void setBoolean(final String key, final boolean val) {
+    public void setBoolean(final @NotNull String key, final boolean val) {
         this.map.addProperty(key, Boolean.valueOf(val));
     }
 
@@ -235,7 +238,7 @@ public final class JsonMapType implements MapType<String> {
     }
 
     @Override
-    public void setByte(final String key, final byte val) {
+    public void setByte(final @NotNull String key, final byte val) {
         this.map.addProperty(key, Byte.valueOf(val));
     }
 
@@ -251,7 +254,7 @@ public final class JsonMapType implements MapType<String> {
     }
 
     @Override
-    public void setShort(final String key, final short val) {
+    public void setShort(final @NotNull String key, final short val) {
         this.map.addProperty(key, Short.valueOf(val));
     }
 
@@ -267,7 +270,7 @@ public final class JsonMapType implements MapType<String> {
     }
 
     @Override
-    public void setInt(final String key, final int val) {
+    public void setInt(final @NotNull String key, final int val) {
         this.map.addProperty(key, Integer.valueOf(val));
     }
 
@@ -283,7 +286,7 @@ public final class JsonMapType implements MapType<String> {
     }
 
     @Override
-    public void setLong(final String key, final long val) {
+    public void setLong(final @NotNull String key, final long val) {
         this.map.addProperty(key, Long.valueOf(val));
     }
 
@@ -299,7 +302,7 @@ public final class JsonMapType implements MapType<String> {
     }
 
     @Override
-    public void setFloat(final String key, final float val) {
+    public void setFloat(final @NotNull String key, final float val) {
         this.map.addProperty(key, Float.valueOf(val));
     }
 
@@ -315,7 +318,7 @@ public final class JsonMapType implements MapType<String> {
     }
 
     @Override
-    public void setDouble(final String key, final double val) {
+    public void setDouble(final @NotNull String key, final double val) {
         this.map.addProperty(key, Double.valueOf(val));
     }
 
@@ -399,7 +402,7 @@ public final class JsonMapType implements MapType<String> {
     }
 
     @Override
-    public void setList(final String key, final ListType val) {
+    public void setList(final @NotNull String key, final @NotNull ListType val) {
         this.map.add(key, ((JsonListType)val).getJson());
     }
 
@@ -419,7 +422,7 @@ public final class JsonMapType implements MapType<String> {
     }
 
     @Override
-    public void setMap(final String key, final MapType<?> val) {
+    public void setMap(final @NotNull String key, final @NotNull MapType<?> val) {
         this.map.add(key, ((JsonMapType)val).map);
     }
 
@@ -444,7 +447,7 @@ public final class JsonMapType implements MapType<String> {
     }
 
     @Override
-    public void setString(final String key, final String val) {
+    public void setString(final @NotNull String key, final String val) {
         this.map.addProperty(key, val);
     }
 }
diff --git a/src/main/java/ca/spottedleaf/dataconverter/types/json/JsonTypeCompressedUtil.java b/src/main/java/ca/spottedleaf/dataconverter/types/json/JsonTypeCompressedUtil.java
index 9c3093b66b847b5248bde923243fce78842bf67f..c58f8b4eed65961fc42c6320f2ee9dc67f6a9b34 100644
--- a/src/main/java/ca/spottedleaf/dataconverter/types/json/JsonTypeCompressedUtil.java
+++ b/src/main/java/ca/spottedleaf/dataconverter/types/json/JsonTypeCompressedUtil.java
@@ -3,16 +3,18 @@ package ca.spottedleaf.dataconverter.types.json;
 import ca.spottedleaf.dataconverter.types.ListType;
 import ca.spottedleaf.dataconverter.types.MapType;
 import ca.spottedleaf.dataconverter.types.TypeUtil;
+import org.jetbrains.annotations.NotNull;
+
 
 public final class JsonTypeCompressedUtil implements TypeUtil {
 
     @Override
-    public ListType createEmptyList() {
+    public @NotNull ListType createEmptyList() {
         return new JsonListType(true);
     }
 
     @Override
-    public MapType<String> createEmptyMap() {
+    public @NotNull MapType<String> createEmptyMap() {
         return new JsonMapType(true);
     }
 }
diff --git a/src/main/java/ca/spottedleaf/dataconverter/types/json/JsonTypeUtil.java b/src/main/java/ca/spottedleaf/dataconverter/types/json/JsonTypeUtil.java
index 9410ae68395a09c7710bdbb2ccc6acf6633cad23..991261948a2cbbc38f5e6962e29a49d0c89bada8 100644
--- a/src/main/java/ca/spottedleaf/dataconverter/types/json/JsonTypeUtil.java
+++ b/src/main/java/ca/spottedleaf/dataconverter/types/json/JsonTypeUtil.java
@@ -12,29 +12,32 @@ import com.google.gson.JsonObject;
 import com.google.gson.JsonPrimitive;
 import com.google.gson.internal.Streams;
 import com.google.gson.stream.JsonReader;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 import java.io.StringReader;
 import java.util.Map;
 
 public final class JsonTypeUtil implements TypeUtil {
 
     @Override
-    public ListType createEmptyList() {
+    public @NotNull ListType createEmptyList() {
         return new JsonListType(false);
     }
 
     @Override
-    public MapType<String> createEmptyMap() {
+    public @NotNull MapType<String> createEmptyMap() {
         return new JsonMapType(false);
     }
 
-    public static <T extends JsonElement> T copyJson(final T from) {
+    public static <T extends JsonElement> T copyJson(final @NotNull T from) {
         // This is stupidly inefficient. However, deepCopy() is not exposed in this gson version.
         final String out = from.toString();
 
         return (T)Streams.parse(new JsonReader(new StringReader(out)));
     }
 
-    private static Object convertToGenericNBT(final JsonElement element, final boolean compressed) {
+    private static @Nullable Object convertToGenericNBT(final JsonElement element, final boolean compressed) {
         if (element instanceof JsonObject) {
             return convertJsonToNBT(new JsonMapType((JsonObject)element, compressed));
         } else if (element instanceof JsonArray) {
@@ -55,7 +58,7 @@ public final class JsonTypeUtil implements TypeUtil {
         throw new IllegalStateException("Unrecognized type " + element);
     }
 
-    public static NBTMapType convertJsonToNBT(final JsonMapType json) {
+    public static @NotNull NBTMapType convertJsonToNBT(final @NotNull JsonMapType json) {
         final NBTMapType ret = new NBTMapType();
         for (final Map.Entry<String, JsonElement> entry : json.map.entrySet()) {
             final Object obj = convertToGenericNBT(entry.getValue(), json.compressed);
@@ -69,7 +72,7 @@ public final class JsonTypeUtil implements TypeUtil {
         return ret;
     }
 
-    public static NBTListType convertJsonToNBT(final JsonListType json) {
+    public static @NotNull NBTListType convertJsonToNBT(final @NotNull JsonListType json) {
         final NBTListType ret = new NBTListType();
 
         for (int i = 0, len = json.size(); i < len; ++i) {
diff --git a/src/main/java/ca/spottedleaf/dataconverter/types/nbt/NBTListType.java b/src/main/java/ca/spottedleaf/dataconverter/types/nbt/NBTListType.java
index bf4e9ea17222cfa8f7cee9e46775302c9c2e6328..1e7dad15259178ebce21e1fbfa5bde8311cb787e 100644
--- a/src/main/java/ca/spottedleaf/dataconverter/types/nbt/NBTListType.java
+++ b/src/main/java/ca/spottedleaf/dataconverter/types/nbt/NBTListType.java
@@ -19,6 +19,9 @@ import net.minecraft.nbt.NumericTag;
 import net.minecraft.nbt.ShortTag;
 import net.minecraft.nbt.StringTag;
 import net.minecraft.nbt.Tag;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 public final class NBTListType implements ListType {
 
@@ -33,12 +36,12 @@ public final class NBTListType implements ListType {
     }
 
     @Override
-    public TypeUtil getTypeUtil() {
+    public @NotNull TypeUtil getTypeUtil() {
         return Types.NBT;
     }
 
     @Override
-    public boolean equals(final Object obj) {
+    public boolean equals(final @Nullable Object obj) {
         if (this == obj) {
             return true;
         }
@@ -55,7 +58,7 @@ public final class NBTListType implements ListType {
     }
 
     @Override
-    public String toString() {
+    public @NotNull String toString() {
         return "NBTListType{" +
                 "list=" + this.list +
                 '}';
@@ -66,11 +69,11 @@ public final class NBTListType implements ListType {
     }
 
     @Override
-    public ListType copy() {
+    public @NotNull ListType copy() {
         return new NBTListType(this.list.copy());
     }
 
-    protected static ObjectType getType(final byte id) {
+    protected static @NotNull ObjectType getType(final byte id) {
         switch (id) {
             case 0: // END
                 return ObjectType.NONE;
@@ -119,7 +122,7 @@ public final class NBTListType implements ListType {
     }
 
     @Override
-    public Number getNumber(final int index) {
+    public @NotNull Number getNumber(final int index) {
         final Tag tag = this.list.get(index); // does bound checking for us
         if (!(tag instanceof NumericTag)) {
             throw new IllegalStateException();
@@ -221,7 +224,7 @@ public final class NBTListType implements ListType {
     }
 
     @Override
-    public void setBytes(final int index, final byte[] to) {
+    public void setBytes(final int index, final byte @NotNull [] to) {
         this.list.set(index, new ByteArrayTag(to));
     }
 
@@ -246,7 +249,7 @@ public final class NBTListType implements ListType {
     }
 
     @Override
-    public void setInts(final int index, final int[] to) {
+    public void setInts(final int index, final int @NotNull [] to) {
         this.list.set(index, new IntArrayTag(to));
     }
 
@@ -260,12 +263,12 @@ public final class NBTListType implements ListType {
     }
 
     @Override
-    public void setLongs(final int index, final long[] to) {
+    public void setLongs(final int index, final long @NotNull [] to) {
         this.list.set(index, new LongArrayTag(to));
     }
 
     @Override
-    public ListType getList(final int index) {
+    public @NotNull ListType getList(final int index) {
         final Tag tag = this.list.get(index); // does bound checking for us
         if (!(tag instanceof ListTag)) {
             throw new IllegalStateException();
@@ -274,12 +277,12 @@ public final class NBTListType implements ListType {
     }
 
     @Override
-    public void setList(final int index, final ListType list) {
+    public void setList(final int index, final @NotNull ListType list) {
         this.list.set(index, ((NBTListType)list).getTag());
     }
 
     @Override
-    public MapType<String> getMap(final int index) {
+    public @NotNull MapType<String> getMap(final int index) {
         final Tag tag = this.list.get(index); // does bound checking for us
         if (!(tag instanceof CompoundTag)) {
             throw new IllegalStateException();
@@ -288,12 +291,12 @@ public final class NBTListType implements ListType {
     }
 
     @Override
-    public void setMap(final int index, final MapType<?> to) {
+    public void setMap(final int index, final @NotNull MapType<?> to) {
         this.list.set(index, ((NBTMapType)to).getTag());
     }
 
     @Override
-    public String getString(final int index) {
+    public @NotNull String getString(final int index) {
         final Tag tag = this.list.get(index); // does bound checking for us
         if (!(tag instanceof StringTag)) {
             throw new IllegalStateException();
@@ -302,7 +305,7 @@ public final class NBTListType implements ListType {
     }
 
     @Override
-    public void setString(final int index, final String to) {
+    public void setString(final int index, final @NotNull String to) {
         this.list.set(index, StringTag.valueOf(to));
     }
 
@@ -367,12 +370,12 @@ public final class NBTListType implements ListType {
     }
 
     @Override
-    public void addByteArray(final byte[] arr) {
+    public void addByteArray(final byte @NotNull [] arr) {
         this.list.add(new ByteArrayTag(arr));
     }
 
     @Override
-    public void addByteArray(final int index, final byte[] arr) {
+    public void addByteArray(final int index, final byte @NotNull [] arr) {
         this.list.add(index, new ByteArrayTag(arr));
     }
 
@@ -389,52 +392,52 @@ public final class NBTListType implements ListType {
     }
 
     @Override
-    public void addIntArray(final int[] arr) {
+    public void addIntArray(final int @NotNull [] arr) {
         this.list.add(new IntArrayTag(arr));
     }
 
     @Override
-    public void addIntArray(final int index, final int[] arr) {
+    public void addIntArray(final int index, final int @NotNull [] arr) {
         this.list.add(index, new IntArrayTag(arr));
     }
 
     @Override
-    public void addLongArray(final long[] arr) {
+    public void addLongArray(final long @NotNull [] arr) {
         this.list.add(new LongArrayTag(arr));
     }
 
     @Override
-    public void addLongArray(final int index, final long[] arr) {
+    public void addLongArray(final int index, final long @NotNull [] arr) {
         this.list.add(index, new LongArrayTag(arr));
     }
 
     @Override
-    public void addList(final ListType list) {
+    public void addList(final @NotNull ListType list) {
         this.list.add(((NBTListType)list).getTag());
     }
 
     @Override
-    public void addList(final int index, final ListType list) {
+    public void addList(final int index, final @NotNull ListType list) {
         this.list.add(index, ((NBTListType)list).getTag());
     }
 
     @Override
-    public void addMap(final MapType<?> map) {
+    public void addMap(final @NotNull MapType<?> map) {
         this.list.add(((NBTMapType)map).getTag());
     }
 
     @Override
-    public void addMap(final int index, final MapType<?> map) {
+    public void addMap(final int index, final @NotNull MapType<?> map) {
         this.list.add(index, ((NBTMapType)map).getTag());
     }
 
     @Override
-    public void addString(final String string) {
+    public void addString(final @NotNull String string) {
         this.list.add(StringTag.valueOf(string));
     }
 
     @Override
-    public void addString(final int index, final String string) {
+    public void addString(final int index, final @NotNull String string) {
         this.list.add(index, StringTag.valueOf(string));
     }
 }
diff --git a/src/main/java/ca/spottedleaf/dataconverter/types/nbt/NBTMapType.java b/src/main/java/ca/spottedleaf/dataconverter/types/nbt/NBTMapType.java
index 12880f93b53db1e60cbf13805e2eb08fee5fd203..5fbf7ea31911992db164abf52634c4b415435bd7 100644
--- a/src/main/java/ca/spottedleaf/dataconverter/types/nbt/NBTMapType.java
+++ b/src/main/java/ca/spottedleaf/dataconverter/types/nbt/NBTMapType.java
@@ -13,6 +13,8 @@ import net.minecraft.nbt.LongArrayTag;
 import net.minecraft.nbt.NumericTag;
 import net.minecraft.nbt.StringTag;
 import net.minecraft.nbt.Tag;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
 
 import java.util.Set;
 
@@ -29,7 +31,7 @@ public final class NBTMapType implements MapType<String> {
     }
 
     @Override
-    public boolean equals(final Object obj) {
+    public boolean equals(final @Nullable Object obj) {
         if (this == obj) {
             return true;
         }
@@ -41,7 +43,7 @@ public final class NBTMapType implements MapType<String> {
     }
 
     @Override
-    public TypeUtil getTypeUtil() {
+    public @NotNull TypeUtil getTypeUtil() {
         return Types.NBT;
     }
 
@@ -51,7 +53,7 @@ public final class NBTMapType implements MapType<String> {
     }
 
     @Override
-    public String toString() {
+    public @NotNull String toString() {
         return "NBTMapType{" +
                 "map=" + this.map +
                 '}';
@@ -73,7 +75,7 @@ public final class NBTMapType implements MapType<String> {
     }
 
     @Override
-    public Set<String> keys() {
+    public @NotNull Set<String> keys() {
         return this.map.getAllKeys();
     }
 
@@ -82,17 +84,17 @@ public final class NBTMapType implements MapType<String> {
     }
 
     @Override
-    public MapType<String> copy() {
+    public @NotNull MapType<String> copy() {
         return new NBTMapType(this.map.copy());
     }
 
     @Override
-    public boolean hasKey(final String key) {
+    public boolean hasKey(final @NotNull String key) {
         return this.map.get(key) != null;
     }
 
     @Override
-    public boolean hasKey(final String key, final ObjectType type) {
+    public boolean hasKey(final @NotNull String key, final ObjectType type) {
         final Tag tag = this.map.get(key);
         if (tag == null) {
             return false;
@@ -104,12 +106,12 @@ public final class NBTMapType implements MapType<String> {
     }
 
     @Override
-    public void remove(final String key) {
+    public void remove(final @NotNull String key) {
         this.map.remove(key);
     }
 
     @Override
-    public Object getGeneric(final String key) {
+    public @Nullable Object getGeneric(final @NotNull String key) {
         final Tag tag = this.map.get(key);
         if (tag == null) {
             return null;
@@ -142,12 +144,12 @@ public final class NBTMapType implements MapType<String> {
     }
 
     @Override
-    public Number getNumber(final String key) {
+    public Number getNumber(final @NotNull String key) {
         return this.getNumber(key, null);
     }
 
     @Override
-    public Number getNumber(final String key, final Number dfl) {
+    public Number getNumber(final @NotNull String key, final Number dfl) {
         final Tag tag = this.map.get(key);
         if (tag instanceof NumericTag) {
             return ((NumericTag)tag).getAsNumber();
@@ -156,22 +158,22 @@ public final class NBTMapType implements MapType<String> {
     }
 
     @Override
-    public boolean getBoolean(final String key) {
+    public boolean getBoolean(final @NotNull String key) {
         return this.getByte(key) != 0;
     }
 
     @Override
-    public boolean getBoolean(final String key, final boolean dfl) {
+    public boolean getBoolean(final @NotNull String key, final boolean dfl) {
         return this.getByte(key, dfl ? (byte)1 : (byte)0) != 0;
     }
 
     @Override
-    public void setBoolean(final String key, final boolean val) {
+    public void setBoolean(final @NotNull String key, final boolean val) {
         this.setByte(key, val ? (byte)1 : (byte)0);
     }
 
     @Override
-    public byte getByte(final String key) {
+    public byte getByte(final @NotNull String key) {
         final Tag tag = this.map.get(key);
         if (tag instanceof NumericTag) {
             return ((NumericTag)tag).getAsByte();
@@ -180,7 +182,7 @@ public final class NBTMapType implements MapType<String> {
     }
 
     @Override
-    public byte getByte(final String key, final byte dfl) {
+    public byte getByte(final @NotNull String key, final byte dfl) {
         final Tag tag = this.map.get(key);
         if (tag instanceof NumericTag) {
             return ((NumericTag)tag).getAsByte();
@@ -189,12 +191,12 @@ public final class NBTMapType implements MapType<String> {
     }
 
     @Override
-    public void setByte(final String key, final byte val) {
+    public void setByte(final @NotNull String key, final byte val) {
         this.map.putByte(key, val);
     }
 
     @Override
-    public short getShort(final String key) {
+    public short getShort(final @NotNull String key) {
         final Tag tag = this.map.get(key);
         if (tag instanceof NumericTag) {
             return ((NumericTag)tag).getAsShort();
@@ -203,7 +205,7 @@ public final class NBTMapType implements MapType<String> {
     }
 
     @Override
-    public short getShort(final String key, final short dfl) {
+    public short getShort(final @NotNull String key, final short dfl) {
         final Tag tag = this.map.get(key);
         if (tag instanceof NumericTag) {
             return ((NumericTag)tag).getAsShort();
@@ -212,12 +214,12 @@ public final class NBTMapType implements MapType<String> {
     }
 
     @Override
-    public void setShort(final String key, final short val) {
+    public void setShort(final @NotNull String key, final short val) {
         this.map.putShort(key, val);
     }
 
     @Override
-    public int getInt(final String key) {
+    public int getInt(final @NotNull String key) {
         final Tag tag = this.map.get(key);
         if (tag instanceof NumericTag) {
             return ((NumericTag)tag).getAsInt();
@@ -226,7 +228,7 @@ public final class NBTMapType implements MapType<String> {
     }
 
     @Override
-    public int getInt(final String key, final int dfl) {
+    public int getInt(final @NotNull String key, final int dfl) {
         final Tag tag = this.map.get(key);
         if (tag instanceof NumericTag) {
             return ((NumericTag)tag).getAsInt();
@@ -235,12 +237,12 @@ public final class NBTMapType implements MapType<String> {
     }
 
     @Override
-    public void setInt(final String key, final int val) {
+    public void setInt(final @NotNull String key, final int val) {
         this.map.putInt(key, val);
     }
 
     @Override
-    public long getLong(final String key) {
+    public long getLong(final @NotNull String key) {
         final Tag tag = this.map.get(key);
         if (tag instanceof NumericTag) {
             return ((NumericTag)tag).getAsLong();
@@ -249,7 +251,7 @@ public final class NBTMapType implements MapType<String> {
     }
 
     @Override
-    public long getLong(final String key, final long dfl) {
+    public long getLong(final @NotNull String key, final long dfl) {
         final Tag tag = this.map.get(key);
         if (tag instanceof NumericTag) {
             return ((NumericTag)tag).getAsLong();
@@ -258,12 +260,12 @@ public final class NBTMapType implements MapType<String> {
     }
 
     @Override
-    public void setLong(final String key, final long val) {
+    public void setLong(final @NotNull String key, final long val) {
         this.map.putLong(key, val);
     }
 
     @Override
-    public float getFloat(final String key) {
+    public float getFloat(final @NotNull String key) {
         final Tag tag = this.map.get(key);
         if (tag instanceof NumericTag) {
             return ((NumericTag)tag).getAsFloat();
@@ -272,7 +274,7 @@ public final class NBTMapType implements MapType<String> {
     }
 
     @Override
-    public float getFloat(final String key, final float dfl) {
+    public float getFloat(final @NotNull String key, final float dfl) {
         final Tag tag = this.map.get(key);
         if (tag instanceof NumericTag) {
             return ((NumericTag)tag).getAsFloat();
@@ -281,12 +283,12 @@ public final class NBTMapType implements MapType<String> {
     }
 
     @Override
-    public void setFloat(final String key, final float val) {
+    public void setFloat(final @NotNull String key, final float val) {
         this.map.putFloat(key, val);
     }
 
     @Override
-    public double getDouble(final String key) {
+    public double getDouble(final @NotNull String key) {
         final Tag tag = this.map.get(key);
         if (tag instanceof NumericTag) {
             return ((NumericTag)tag).getAsDouble();
@@ -295,7 +297,7 @@ public final class NBTMapType implements MapType<String> {
     }
 
     @Override
-    public double getDouble(final String key, final double dfl) {
+    public double getDouble(final @NotNull String key, final double dfl) {
         final Tag tag = this.map.get(key);
         if (tag instanceof NumericTag) {
             return ((NumericTag)tag).getAsDouble();
@@ -304,17 +306,17 @@ public final class NBTMapType implements MapType<String> {
     }
 
     @Override
-    public void setDouble(final String key, final double val) {
+    public void setDouble(final @NotNull String key, final double val) {
         this.map.putDouble(key, val);
     }
 
     @Override
-    public byte[] getBytes(final String key) {
+    public byte[] getBytes(final @NotNull String key) {
         return this.getBytes(key, null);
     }
 
     @Override
-    public byte[] getBytes(final String key, final byte[] dfl) {
+    public byte[] getBytes(final @NotNull String key, final byte[] dfl) {
         final Tag tag = this.map.get(key);
         if (tag instanceof ByteArrayTag) {
             return ((ByteArrayTag)tag).getAsByteArray();
@@ -323,7 +325,7 @@ public final class NBTMapType implements MapType<String> {
     }
 
     @Override
-    public void setBytes(final String key, final byte[] val) {
+    public void setBytes(final @NotNull String key, final byte @NotNull [] val) {
         this.map.putByteArray(key, val);
     }
 
@@ -344,12 +346,12 @@ public final class NBTMapType implements MapType<String> {
     }
 
     @Override
-    public int[] getInts(final String key) {
+    public int[] getInts(final @NotNull String key) {
         return this.getInts(key, null);
     }
 
     @Override
-    public int[] getInts(final String key, final int[] dfl) {
+    public int[] getInts(final @NotNull String key, final int[] dfl) {
         final Tag tag = this.map.get(key);
         if (tag instanceof IntArrayTag) {
             return ((IntArrayTag)tag).getAsIntArray();
@@ -358,17 +360,17 @@ public final class NBTMapType implements MapType<String> {
     }
 
     @Override
-    public void setInts(final String key, final int[] val) {
+    public void setInts(final @NotNull String key, final int @NotNull [] val) {
         this.map.putIntArray(key, val);
     }
 
     @Override
-    public long[] getLongs(final String key) {
+    public long[] getLongs(final @NotNull String key) {
         return this.getLongs(key, null);
     }
 
     @Override
-    public long[] getLongs(final String key, final long[] dfl) {
+    public long[] getLongs(final @NotNull String key, final long[] dfl) {
         final Tag tag = this.map.get(key);
         if (tag instanceof LongArrayTag) {
             return ((LongArrayTag)tag).getAsLongArray();
@@ -377,17 +379,17 @@ public final class NBTMapType implements MapType<String> {
     }
 
     @Override
-    public void setLongs(final String key, final long[] val) {
+    public void setLongs(final @NotNull String key, final long @NotNull [] val) {
         this.map.putLongArray(key, val);
     }
 
     @Override
-    public ListType getListUnchecked(final String key) {
+    public ListType getListUnchecked(final @NotNull String key) {
         return this.getListUnchecked(key, null);
     }
 
     @Override
-    public ListType getListUnchecked(final String key, final ListType dfl) {
+    public ListType getListUnchecked(final @NotNull String key, final ListType dfl) {
         final Tag tag = this.map.get(key);
         if (tag instanceof ListTag) {
             return new NBTListType((ListTag)tag);
@@ -396,17 +398,17 @@ public final class NBTMapType implements MapType<String> {
     }
 
     @Override
-    public void setList(final String key, final ListType val) {
+    public void setList(final @NotNull String key, final @NotNull ListType val) {
         this.map.put(key, ((NBTListType)val).getTag());
     }
 
     @Override
-    public MapType<String> getMap(final String key) {
+    public MapType<String> getMap(final @NotNull String key) {
         return this.getMap(key, null);
     }
 
     @Override
-    public MapType<String> getMap(final String key, final MapType dfl) {
+    public MapType<String> getMap(final @NotNull String key, final MapType dfl) {
         final Tag tag = this.map.get(key);
         if (tag instanceof CompoundTag) {
             return new NBTMapType((CompoundTag)tag);
@@ -415,17 +417,17 @@ public final class NBTMapType implements MapType<String> {
     }
 
     @Override
-    public void setMap(final String key, final MapType<?> val) {
+    public void setMap(final @NotNull String key, final @NotNull MapType<?> val) {
         this.map.put(key, ((NBTMapType)val).getTag());
     }
 
     @Override
-    public String getString(final String key) {
+    public String getString(final @NotNull String key) {
         return this.getString(key, null);
     }
 
     @Override
-    public String getString(final String key, final String dfl) {
+    public String getString(final @NotNull String key, final String dfl) {
         final Tag tag = this.map.get(key);
         if (tag instanceof StringTag) {
             return ((StringTag)tag).getAsString();
@@ -434,7 +436,7 @@ public final class NBTMapType implements MapType<String> {
     }
 
     @Override
-    public void setString(final String key, final String val) {
+    public void setString(final @NotNull String key, final @NotNull String val) {
         this.map.putString(key, val);
     }
 }
diff --git a/src/main/java/ca/spottedleaf/dataconverter/types/nbt/NBTTypeUtil.java b/src/main/java/ca/spottedleaf/dataconverter/types/nbt/NBTTypeUtil.java
index 62c0f4073aff301bf5b3187e0d4446fd8d0ac475..810612565cd12a6c479785679c2c264175d78457 100644
--- a/src/main/java/ca/spottedleaf/dataconverter/types/nbt/NBTTypeUtil.java
+++ b/src/main/java/ca/spottedleaf/dataconverter/types/nbt/NBTTypeUtil.java
@@ -3,16 +3,18 @@ package ca.spottedleaf.dataconverter.types.nbt;
 import ca.spottedleaf.dataconverter.types.ListType;
 import ca.spottedleaf.dataconverter.types.MapType;
 import ca.spottedleaf.dataconverter.types.TypeUtil;
+import org.jetbrains.annotations.NotNull;
+
 
 public final class NBTTypeUtil implements TypeUtil {
 
     @Override
-    public ListType createEmptyList() {
+    public @NotNull ListType createEmptyList() {
         return new NBTListType();
     }
 
     @Override
-    public MapType<String> createEmptyMap() {
+    public @NotNull MapType<String> createEmptyMap() {
         return new NBTMapType();
     }
 }
diff --git a/src/main/java/ca/spottedleaf/dataconverter/util/Int2IntArraySortedMap.java b/src/main/java/ca/spottedleaf/dataconverter/util/Int2IntArraySortedMap.java
index 6596de3d9ebae583c252aa061f0cfdf8778ea1a5..feb36df38fdc8e1eabdc7f06d0dfd1ebc573497c 100644
--- a/src/main/java/ca/spottedleaf/dataconverter/util/Int2IntArraySortedMap.java
+++ b/src/main/java/ca/spottedleaf/dataconverter/util/Int2IntArraySortedMap.java
@@ -1,6 +1,7 @@
 package ca.spottedleaf.dataconverter.util;
 
 import it.unimi.dsi.fastutil.ints.Int2IntFunction;
+import org.jetbrains.annotations.NotNull;
 
 import java.util.Arrays;
 
@@ -38,7 +39,7 @@ public class Int2IntArraySortedMap {
         return 0;
     }
 
-    public int computeIfAbsent(final int key, final Int2IntFunction producer) {
+    public int computeIfAbsent(final int key, final @NotNull Int2IntFunction producer) {
         final int index = Arrays.binarySearch(this.key, 0, this.size, key);
         if (index >= 0) {
             return this.val[index];
diff --git a/src/main/java/ca/spottedleaf/dataconverter/util/Int2ObjectArraySortedMap.java b/src/main/java/ca/spottedleaf/dataconverter/util/Int2ObjectArraySortedMap.java
index de9d632489609136c712a9adaee941fd38fad440..98e4ba5191533f1ad415d33ad5de6404adc5fb71 100644
--- a/src/main/java/ca/spottedleaf/dataconverter/util/Int2ObjectArraySortedMap.java
+++ b/src/main/java/ca/spottedleaf/dataconverter/util/Int2ObjectArraySortedMap.java
@@ -1,5 +1,8 @@
 package ca.spottedleaf.dataconverter.util;
 
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 import java.util.Arrays;
 import java.util.function.IntFunction;
 
@@ -14,7 +17,7 @@ public class Int2ObjectArraySortedMap<V> {
         this.val = (V[])new Object[8];
     }
 
-    public V put(final int key, final V value) {
+    public @Nullable V put(final int key, final V value) {
         final int index = Arrays.binarySearch(this.key, 0, this.size, key);
         if (index >= 0) {
             final V current = this.val[index];
@@ -36,7 +39,7 @@ public class Int2ObjectArraySortedMap<V> {
         return null;
     }
 
-    public V computeIfAbsent(final int key, final IntFunction<V> producer) {
+    public V computeIfAbsent(final int key, final @NotNull IntFunction<V> producer) {
         final int index = Arrays.binarySearch(this.key, 0, this.size, key);
         if (index >= 0) {
             return this.val[index];
@@ -55,7 +58,7 @@ public class Int2ObjectArraySortedMap<V> {
         return this.val[insert] = producer.apply(key);
     }
 
-    public V get(final int key) {
+    public @Nullable V get(final int key) {
         final int index = Arrays.binarySearch(this.key, 0, this.size, key);
         if (index < 0) {
             return null;
diff --git a/src/main/java/ca/spottedleaf/dataconverter/util/Long2IntArraySortedMap.java b/src/main/java/ca/spottedleaf/dataconverter/util/Long2IntArraySortedMap.java
index 94705bb141b550589faa9a0408402d8636c61907..a32fd390ead963647818906e77300c3e1800f997 100644
--- a/src/main/java/ca/spottedleaf/dataconverter/util/Long2IntArraySortedMap.java
+++ b/src/main/java/ca/spottedleaf/dataconverter/util/Long2IntArraySortedMap.java
@@ -1,6 +1,8 @@
 package ca.spottedleaf.dataconverter.util;
 
 import it.unimi.dsi.fastutil.longs.Long2IntFunction;
+import org.jetbrains.annotations.NotNull;
+
 import java.util.Arrays;
 
 public class Long2IntArraySortedMap {
@@ -37,7 +39,7 @@ public class Long2IntArraySortedMap {
         return 0;
     }
 
-    public int computeIfAbsent(final long key, final Long2IntFunction producer) {
+    public int computeIfAbsent(final long key, final @NotNull Long2IntFunction producer) {
         final int index = Arrays.binarySearch(this.key, 0, this.size, key);
         if (index >= 0) {
             return this.val[index];
diff --git a/src/main/java/ca/spottedleaf/dataconverter/util/Long2ObjectArraySortedMap.java b/src/main/java/ca/spottedleaf/dataconverter/util/Long2ObjectArraySortedMap.java
index 6f634c8825589a23f46ad7b54354475c9a95bd1b..78f3d33d14f9e01a9ecaca03f5ff27cf7fbae1e8 100644
--- a/src/main/java/ca/spottedleaf/dataconverter/util/Long2ObjectArraySortedMap.java
+++ b/src/main/java/ca/spottedleaf/dataconverter/util/Long2ObjectArraySortedMap.java
@@ -1,5 +1,8 @@
 package ca.spottedleaf.dataconverter.util;
 
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 import java.util.Arrays;
 import java.util.function.LongFunction;
 
@@ -14,7 +17,7 @@ public class Long2ObjectArraySortedMap<V> {
         this.val = (V[])new Object[8];
     }
 
-    public V put(final long key, final V value) {
+    public @Nullable V put(final long key, final V value) {
         final int index = Arrays.binarySearch(this.key, 0, this.size, key);
         if (index >= 0) {
             final V current = this.val[index];
@@ -37,7 +40,7 @@ public class Long2ObjectArraySortedMap<V> {
         return null;
     }
 
-    public V computeIfAbsent(final long key, final LongFunction<V> producer) {
+    public V computeIfAbsent(final long key, final @NotNull LongFunction<V> producer) {
         final int index = Arrays.binarySearch(this.key, 0, this.size, key);
         if (index >= 0) {
             return this.val[index];
@@ -57,7 +60,7 @@ public class Long2ObjectArraySortedMap<V> {
         return this.val[insert] = producer.apply(key);
     }
 
-    public V get(final long key) {
+    public @Nullable V get(final long key) {
         final int index = Arrays.binarySearch(this.key, 0, this.size, key);
         if (index < 0) {
             return null;
@@ -65,7 +68,7 @@ public class Long2ObjectArraySortedMap<V> {
         return this.val[index];
     }
 
-    public V getFloor(final long key) {
+    public @Nullable V getFloor(final long key) {
         final int index = Arrays.binarySearch(this.key, 0, this.size, key);
         if (index < 0) {
             final int insert = -(index + 1) - 1;
diff --git a/src/main/java/ca/spottedleaf/dataconverter/util/NamespaceUtil.java b/src/main/java/ca/spottedleaf/dataconverter/util/NamespaceUtil.java
index 967ad1186cbc81a76a4958ea99d4eff37c15b48f..6ee30417fb6c2c209f57b5f0d69a122800419f63 100644
--- a/src/main/java/ca/spottedleaf/dataconverter/util/NamespaceUtil.java
+++ b/src/main/java/ca/spottedleaf/dataconverter/util/NamespaceUtil.java
@@ -1,12 +1,14 @@
 package ca.spottedleaf.dataconverter.util;
 
 import net.minecraft.resources.ResourceLocation;
+import org.jetbrains.annotations.Nullable;
+
 
 public final class NamespaceUtil {
 
     private NamespaceUtil() {}
 
-    public static String correctNamespace(final String value) {
+    public static String correctNamespace(final @Nullable String value) {
         if (value == null) {
             return null;
         }
@@ -14,7 +16,7 @@ public final class NamespaceUtil {
         return resourceLocation != null ? resourceLocation.toString() : value;
     }
 
-    public static String correctNamespaceOrNull(final String value) {
+    public static String correctNamespaceOrNull(final @Nullable String value) {
         if (value == null) {
             return null;
         }
diff --git a/src/main/java/ca/spottedleaf/starlight/common/light/BlockStarLightEngine.java b/src/main/java/ca/spottedleaf/starlight/common/light/BlockStarLightEngine.java
index 4a04eb6449d33d3f15c354b2ac98198f4ac12758..e6e91ef20e78a213a377bf3d2bb8b2c3e02c611a 100644
--- a/src/main/java/ca/spottedleaf/starlight/common/light/BlockStarLightEngine.java
+++ b/src/main/java/ca/spottedleaf/starlight/common/light/BlockStarLightEngine.java
@@ -12,6 +12,8 @@ import net.minecraft.world.level.chunk.LightChunkGetter;
 import net.minecraft.world.level.chunk.PalettedContainer;
 import net.minecraft.world.phys.shapes.Shapes;
 import net.minecraft.world.phys.shapes.VoxelShape;
+import org.jetbrains.annotations.NotNull;
+
 import java.util.ArrayList;
 import java.util.Iterator;
 import java.util.List;
@@ -20,32 +22,32 @@ import java.util.stream.Collectors;
 
 public final class BlockStarLightEngine extends StarLightEngine {
 
-    public BlockStarLightEngine(final Level world) {
+    public BlockStarLightEngine(final @NotNull Level world) {
         super(false, world);
     }
 
     @Override
-    protected boolean[] getEmptinessMap(final ChunkAccess chunk) {
+    protected boolean[] getEmptinessMap(final @NotNull ChunkAccess chunk) {
         return chunk.getBlockEmptinessMap();
     }
 
     @Override
-    protected void setEmptinessMap(final ChunkAccess chunk, final boolean[] to) {
+    protected void setEmptinessMap(final @NotNull ChunkAccess chunk, final boolean @NotNull [] to) {
         chunk.setBlockEmptinessMap(to);
     }
 
     @Override
-    protected SWMRNibbleArray[] getNibblesOnChunk(final ChunkAccess chunk) {
+    protected SWMRNibbleArray @NotNull [] getNibblesOnChunk(final @NotNull ChunkAccess chunk) {
         return chunk.getBlockNibbles();
     }
 
     @Override
-    protected void setNibbles(final ChunkAccess chunk, final SWMRNibbleArray[] to) {
+    protected void setNibbles(final @NotNull ChunkAccess chunk, final SWMRNibbleArray @NotNull [] to) {
         chunk.setBlockNibbles(to);
     }
 
     @Override
-    protected boolean canUseChunk(final ChunkAccess chunk) {
+    protected boolean canUseChunk(final @NotNull ChunkAccess chunk) {
         return chunk.getStatus().isOrAfter(ChunkStatus.LIGHT) && (this.isClientSide || chunk.isLightCorrect());
     }
 
@@ -124,7 +126,7 @@ public final class BlockStarLightEngine extends StarLightEngine {
     protected final BlockPos.MutableBlockPos recalcNeighbourPos = new BlockPos.MutableBlockPos();
 
     @Override
-    protected int calculateLightValue(final LightChunkGetter lightAccess, final int worldX, final int worldY, final int worldZ,
+    protected int calculateLightValue(final @NotNull LightChunkGetter lightAccess, final int worldX, final int worldY, final int worldZ,
                                       final int expect) {
         final BlockState centerState = this.getBlockState(worldX, worldY, worldZ);
         int level = centerState.getLightEmission() & 0xF;
@@ -193,7 +195,7 @@ public final class BlockStarLightEngine extends StarLightEngine {
     }
 
     @Override
-    protected void propagateBlockChanges(final LightChunkGetter lightAccess, final ChunkAccess atChunk, final Set<BlockPos> positions) {
+    protected void propagateBlockChanges(final @NotNull LightChunkGetter lightAccess, final ChunkAccess atChunk, final @NotNull Set<BlockPos> positions) {
         for (final BlockPos pos : positions) {
             this.checkBlock(lightAccess, pos.getX(), pos.getY(), pos.getZ());
         }
@@ -201,7 +203,7 @@ public final class BlockStarLightEngine extends StarLightEngine {
         this.performLightDecrease(lightAccess);
     }
 
-    protected Iterator<BlockPos> getSources(final LightChunkGetter lightAccess, final ChunkAccess chunk) {
+    protected @NotNull Iterator<BlockPos> getSources(final LightChunkGetter lightAccess, final ChunkAccess chunk) {
         if (chunk instanceof ImposterProtoChunk || chunk instanceof LevelChunk) {
             // implementation on Chunk is pretty awful, so write our own here. The big optimisation is
             // skipping empty sections, and the far more optimised reading of types.
@@ -248,7 +250,7 @@ public final class BlockStarLightEngine extends StarLightEngine {
     }
 
     @Override
-    public void lightChunk(final LightChunkGetter lightAccess, final ChunkAccess chunk, final boolean needsEdgeChecks) {
+    public void lightChunk(final @NotNull LightChunkGetter lightAccess, final @NotNull ChunkAccess chunk, final boolean needsEdgeChecks) {
         // setup sources
         final int emittedMask = this.emittedLightMask;
         for (final Iterator<BlockPos> positions = this.getSources(lightAccess, chunk); positions.hasNext();) {
diff --git a/src/main/java/ca/spottedleaf/starlight/common/light/SWMRNibbleArray.java b/src/main/java/ca/spottedleaf/starlight/common/light/SWMRNibbleArray.java
index 4ffb4ffe01c4628d52742c5c0bbd35220eea6294..9d0386209255bf121b00fee3091ecea051eaef8a 100644
--- a/src/main/java/ca/spottedleaf/starlight/common/light/SWMRNibbleArray.java
+++ b/src/main/java/ca/spottedleaf/starlight/common/light/SWMRNibbleArray.java
@@ -1,6 +1,9 @@
 package ca.spottedleaf.starlight.common.light;
 
 import net.minecraft.world.level.chunk.DataLayer;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 import java.util.ArrayDeque;
 import java.util.Arrays;
 
@@ -35,11 +38,11 @@ public final class SWMRNibbleArray {
         return new byte[ARRAY_SIZE];
     }
 
-    private static void freeBytes(final byte[] bytes) {
+    private static void freeBytes(final byte @NotNull [] bytes) {
         WORKING_BYTES_POOL.get().addFirst(bytes);
     }
 
-    public static SWMRNibbleArray fromVanilla(final DataLayer nibble) {
+    public static @NotNull SWMRNibbleArray fromVanilla(final @Nullable DataLayer nibble) {
         if (nibble == null) {
             return new SWMRNibbleArray(null, true);
         } else if (nibble.isEmpty()) {
@@ -52,9 +55,9 @@ public final class SWMRNibbleArray {
     protected int stateUpdating;
     protected volatile int stateVisible;
 
-    protected byte[] storageUpdating;
+    protected byte @Nullable [] storageUpdating;
     protected boolean updatingDirty; // only returns whether storageUpdating is dirty
-    protected volatile byte[] storageVisible;
+    protected volatile byte @Nullable [] storageVisible;
 
     public SWMRNibbleArray() {
         this(null, false); // lazy init
@@ -64,7 +67,7 @@ public final class SWMRNibbleArray {
         this(bytes, false);
     }
 
-    public SWMRNibbleArray(final byte[] bytes, final boolean isNullNibble) {
+    public SWMRNibbleArray(final byte @Nullable [] bytes, final boolean isNullNibble) {
         if (bytes != null && bytes.length != ARRAY_SIZE) {
             throw new IllegalArgumentException("Data of wrong length: " + bytes.length);
         }
@@ -72,7 +75,7 @@ public final class SWMRNibbleArray {
         this.storageUpdating = this.storageVisible = bytes;
     }
 
-    public SWMRNibbleArray(final byte[] bytes, final int state) {
+    public SWMRNibbleArray(final byte @Nullable [] bytes, final int state) {
         if (bytes != null && bytes.length != ARRAY_SIZE) {
             throw new IllegalArgumentException("Data of wrong length: " + bytes.length);
         }
@@ -84,7 +87,7 @@ public final class SWMRNibbleArray {
     }
 
     @Override
-    public String toString() {
+    public @NotNull String toString() {
         StringBuilder stringBuilder = new StringBuilder();
         stringBuilder.append("State: ");
         switch (this.stateVisible) {
@@ -128,7 +131,7 @@ public final class SWMRNibbleArray {
         return stringBuilder.toString();
     }
 
-    public SaveState getSaveState() {
+    public @Nullable SaveState getSaveState() {
         synchronized (this) {
             final int state = this.stateVisible;
             final byte[] data = this.storageVisible;
@@ -164,7 +167,7 @@ public final class SWMRNibbleArray {
     }
 
     // operation type: updating on src, updating on other
-    public void extrudeLower(final SWMRNibbleArray other) {
+    public void extrudeLower(final @NotNull SWMRNibbleArray other) {
         if (other.stateUpdating == INIT_STATE_NULL) {
             throw new IllegalArgumentException();
         }
@@ -355,7 +358,7 @@ public final class SWMRNibbleArray {
     }
 
     // operation type: visible
-    public DataLayer toVanillaNibble() {
+    public @Nullable DataLayer toVanillaNibble() {
         synchronized (this) {
             switch (this.stateVisible) {
                 case INIT_STATE_HIDDEN:
diff --git a/src/main/java/ca/spottedleaf/starlight/common/light/SkyStarLightEngine.java b/src/main/java/ca/spottedleaf/starlight/common/light/SkyStarLightEngine.java
index 5f771962afb44175d446f138c8e7453230f48c6c..b4978a0ec443070d89e9f81883af4af19388fc73 100644
--- a/src/main/java/ca/spottedleaf/starlight/common/light/SkyStarLightEngine.java
+++ b/src/main/java/ca/spottedleaf/starlight/common/light/SkyStarLightEngine.java
@@ -14,6 +14,8 @@ import net.minecraft.world.level.chunk.LevelChunkSection;
 import net.minecraft.world.level.chunk.LightChunkGetter;
 import net.minecraft.world.phys.shapes.Shapes;
 import net.minecraft.world.phys.shapes.VoxelShape;
+import org.jetbrains.annotations.NotNull;
+
 import java.util.Arrays;
 import java.util.Set;
 
@@ -48,9 +50,9 @@ public final class SkyStarLightEngine extends StarLightEngine {
         Arrays.fill(this.heightMapBlockChange, Integer.MIN_VALUE); // clear heightmap
     }
 
-    protected final boolean[] nullPropagationCheckCache;
+    protected final boolean @NotNull [] nullPropagationCheckCache;
 
-    public SkyStarLightEngine(final Level world) {
+    public SkyStarLightEngine(final @NotNull Level world) {
         super(true, world);
         this.nullPropagationCheckCache = new boolean[WorldUtil.getTotalLightSections(world)];
     }
@@ -79,7 +81,7 @@ public final class SkyStarLightEngine extends StarLightEngine {
         }
     }
 
-    protected final void initNibble(final SWMRNibbleArray currNibble, final int chunkX, final int chunkY, final int chunkZ, final boolean extrude) {
+    protected final void initNibble(final @NotNull SWMRNibbleArray currNibble, final int chunkX, final int chunkY, final int chunkZ, final boolean extrude) {
         if (!currNibble.isNullNibbleUpdating()) {
             // already initialised
             return;
@@ -205,33 +207,33 @@ public final class SkyStarLightEngine extends StarLightEngine {
     }
 
     @Override
-    protected boolean[] getEmptinessMap(final ChunkAccess chunk) {
+    protected boolean[] getEmptinessMap(final @NotNull ChunkAccess chunk) {
         return chunk.getSkyEmptinessMap();
     }
 
     @Override
-    protected void setEmptinessMap(final ChunkAccess chunk, final boolean[] to) {
+    protected void setEmptinessMap(final @NotNull ChunkAccess chunk, final boolean @NotNull [] to) {
         chunk.setSkyEmptinessMap(to);
     }
 
     @Override
-    protected SWMRNibbleArray[] getNibblesOnChunk(final ChunkAccess chunk) {
+    protected SWMRNibbleArray @NotNull [] getNibblesOnChunk(final @NotNull ChunkAccess chunk) {
         return chunk.getSkyNibbles();
     }
 
     @Override
-    protected void setNibbles(final ChunkAccess chunk, final SWMRNibbleArray[] to) {
+    protected void setNibbles(final @NotNull ChunkAccess chunk, final SWMRNibbleArray @NotNull [] to) {
         chunk.setSkyNibbles(to);
     }
 
     @Override
-    protected boolean canUseChunk(final ChunkAccess chunk) {
+    protected boolean canUseChunk(final @NotNull ChunkAccess chunk) {
         // can only use chunks for sky stuff if their sections have been init'd
         return chunk.getStatus().isOrAfter(ChunkStatus.LIGHT) && (this.isClientSide || chunk.isLightCorrect());
     }
 
     @Override
-    protected void checkChunkEdges(final LightChunkGetter lightAccess, final ChunkAccess chunk, final int fromSection,
+    protected void checkChunkEdges(final @NotNull LightChunkGetter lightAccess, final @NotNull ChunkAccess chunk, final int fromSection,
                                    final int toSection) {
         Arrays.fill(this.nullPropagationCheckCache, false);
         this.rewriteNibbleCacheForSkylight(chunk);
@@ -245,7 +247,7 @@ public final class SkyStarLightEngine extends StarLightEngine {
     }
 
     @Override
-    protected void checkChunkEdges(final LightChunkGetter lightAccess, final ChunkAccess chunk, final ShortCollection sections) {
+    protected void checkChunkEdges(final @NotNull LightChunkGetter lightAccess, final @NotNull ChunkAccess chunk, final @NotNull ShortCollection sections) {
         Arrays.fill(this.nullPropagationCheckCache, false);
         this.rewriteNibbleCacheForSkylight(chunk);
         final int chunkX = chunk.getPos().x;
@@ -292,7 +294,7 @@ public final class SkyStarLightEngine extends StarLightEngine {
     protected final BlockPos.MutableBlockPos recalcNeighbourPos = new BlockPos.MutableBlockPos();
 
     @Override
-    protected int calculateLightValue(final LightChunkGetter lightAccess, final int worldX, final int worldY, final int worldZ,
+    protected int calculateLightValue(final @NotNull LightChunkGetter lightAccess, final int worldX, final int worldY, final int worldZ,
                                       final int expect) {
         if (expect == 15) {
             return expect;
@@ -358,7 +360,7 @@ public final class SkyStarLightEngine extends StarLightEngine {
     }
 
     @Override
-    protected void propagateBlockChanges(final LightChunkGetter lightAccess, final ChunkAccess atChunk, final Set<BlockPos> positions) {
+    protected void propagateBlockChanges(final @NotNull LightChunkGetter lightAccess, final @NotNull ChunkAccess atChunk, final @NotNull Set<BlockPos> positions) {
         this.rewriteNibbleCacheForSkylight(atChunk);
         Arrays.fill(this.nullPropagationCheckCache, false);
 
@@ -452,7 +454,7 @@ public final class SkyStarLightEngine extends StarLightEngine {
     protected final int[] heightMapGen = new int[32 * 32];
 
     @Override
-    protected void lightChunk(final LightChunkGetter lightAccess, final ChunkAccess chunk, final boolean needsEdgeChecks) {
+    protected void lightChunk(final @NotNull LightChunkGetter lightAccess, final @NotNull ChunkAccess chunk, final boolean needsEdgeChecks) {
         this.rewriteNibbleCacheForSkylight(chunk);
         Arrays.fill(this.nullPropagationCheckCache, false);
 
@@ -606,7 +608,7 @@ public final class SkyStarLightEngine extends StarLightEngine {
     // delaying the light set is useful for block changes since they need to worry about initialising nibblearrays
     // while also queueing light at the same time (initialising nibblearrays might depend on nibbles above, so
     // clobbering the light values will result in broken propagation)
-    protected final int tryPropagateSkylight(final BlockGetter world, final int worldX, int startY, final int worldZ,
+    protected final int tryPropagateSkylight(final @NotNull BlockGetter world, final int worldX, int startY, final int worldZ,
                                              final boolean extrudeInitialised, final boolean delayLightSet) {
         final BlockPos.MutableBlockPos mutablePos = this.mutablePos3;
         final int encodeOffset = this.coordinateOffset;
diff --git a/src/main/java/ca/spottedleaf/starlight/common/light/StarLightEngine.java b/src/main/java/ca/spottedleaf/starlight/common/light/StarLightEngine.java
index 1b0d92c68407cdb09ed8aac271b625d92db87017..01b8afce9fca47e676677cc82569f2a5d6c321cc 100644
--- a/src/main/java/ca/spottedleaf/starlight/common/light/StarLightEngine.java
+++ b/src/main/java/ca/spottedleaf/starlight/common/light/StarLightEngine.java
@@ -21,6 +21,9 @@ import net.minecraft.world.level.chunk.LevelChunkSection;
 import net.minecraft.world.level.chunk.LightChunkGetter;
 import net.minecraft.world.phys.shapes.Shapes;
 import net.minecraft.world.phys.shapes.VoxelShape;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.List;
@@ -57,7 +60,7 @@ public abstract class StarLightEngine {
         public final int x;
         public final int y;
         public final int z;
-        public final Direction nms;
+        public final @Nullable Direction nms;
         public final long everythingButThisDirection;
         public final long everythingButTheOppositeDirection;
 
@@ -86,17 +89,17 @@ public abstract class StarLightEngine {
     // for the y chunk section it's from [minLightSection, maxLightSection] or [0, maxLightSection - minLightSection]
     // index = x + (z * 5) + (y * 25)
     // null index indicates the chunk section doesn't exist (empty or out of bounds)
-    protected final LevelChunkSection[] sectionCache;
+    protected final LevelChunkSection @NotNull [] sectionCache;
 
     // the exact same as above, except for storing fast access to SWMRNibbleArray
     // for the y chunk section it's from [minLightSection, maxLightSection] or [0, maxLightSection - minLightSection]
     // index = x + (z * 5) + (y * 25)
-    protected final SWMRNibbleArray[] nibbleCache;
+    protected final SWMRNibbleArray @NotNull [] nibbleCache;
 
     // the exact same as above, except for storing fast access to nibbles to call change callbacks for
     // for the y chunk section it's from [minLightSection, maxLightSection] or [0, maxLightSection - minLightSection]
     // index = x + (z * 5) + (y * 25)
-    protected final boolean[] notifyUpdateCache;
+    protected final boolean @NotNull [] notifyUpdateCache;
 
     // always initialsed during start of lighting.
     // index = x + (z * 5)
@@ -126,13 +129,13 @@ public abstract class StarLightEngine {
     protected final int emittedLightMask;
     protected final boolean isClientSide;
 
-    protected final Level world;
+    protected final @NotNull Level world;
     protected final int minLightSection;
     protected final int maxLightSection;
     protected final int minSection;
     protected final int maxSection;
 
-    protected StarLightEngine(final boolean skylightPropagator, final Level world) {
+    protected StarLightEngine(final boolean skylightPropagator, final @NotNull Level world) {
         this.skylightPropagator = skylightPropagator;
         this.emittedLightMask = skylightPropagator ? 0 : 0xF;
         this.isClientSide = world.isClientSide;
@@ -168,7 +171,7 @@ public abstract class StarLightEngine {
         this.chunkSectionIndexOffset = this.chunkIndexOffset + ((5 * 5) * this.chunkOffsetY);
     }
 
-    protected final void setupCaches(final LightChunkGetter chunkProvider, final int centerX, final int centerY, final int centerZ,
+    protected final void setupCaches(final @NotNull LightChunkGetter chunkProvider, final int centerX, final int centerY, final int centerZ,
                                      final boolean relaxed, final boolean tryToLoadChunksFor2Radius) {
         final int centerChunkX = centerX >> 4;
         final int centerChunkY = centerY >> 4;
@@ -222,7 +225,7 @@ public abstract class StarLightEngine {
         this.sectionCache[chunkX + 5*chunkZ + 5*5*chunkY + this.chunkSectionIndexOffset] = section;
     }
 
-    protected final void setBlocksForChunkInCache(final int chunkX, final int chunkZ, final LevelChunkSection[] sections) {
+    protected final void setBlocksForChunkInCache(final int chunkX, final int chunkZ, final LevelChunkSection @Nullable [] sections) {
         for (int cy = this.minLightSection; cy <= this.maxLightSection; ++cy) {
             this.setChunkSectionInCache(chunkX, cy, chunkZ,
                     sections == null ? null : (cy >= this.minSection && cy <= this.maxSection ? sections[cy - this.minSection] : null));
@@ -233,7 +236,7 @@ public abstract class StarLightEngine {
         return this.nibbleCache[chunkX + 5*chunkZ + (5 * 5) * chunkY + this.chunkSectionIndexOffset];
     }
 
-    protected final SWMRNibbleArray[] getNibblesForChunkFromCache(final int chunkX, final int chunkZ) {
+    protected final SWMRNibbleArray @NotNull [] getNibblesForChunkFromCache(final int chunkX, final int chunkZ) {
         final SWMRNibbleArray[] ret = new SWMRNibbleArray[this.maxLightSection - this.minLightSection + 1];
 
         for (int cy = this.minLightSection; cy <= this.maxLightSection; ++cy) {
@@ -247,13 +250,13 @@ public abstract class StarLightEngine {
         this.nibbleCache[chunkX + 5*chunkZ + (5 * 5) * chunkY + this.chunkSectionIndexOffset] = nibble;
     }
 
-    protected final void setNibblesForChunkInCache(final int chunkX, final int chunkZ, final SWMRNibbleArray[] nibbles) {
+    protected final void setNibblesForChunkInCache(final int chunkX, final int chunkZ, final SWMRNibbleArray @Nullable [] nibbles) {
         for (int cy = this.minLightSection; cy <= this.maxLightSection; ++cy) {
             this.setNibbleInCache(chunkX, cy, chunkZ, nibbles == null ? null : nibbles[cy - this.minLightSection]);
         }
     }
 
-    protected final void updateVisible(final LightChunkGetter lightAccess) {
+    protected final void updateVisible(final @NotNull LightChunkGetter lightAccess) {
         for (int index = 0, max = this.nibbleCache.length; index < max; ++index) {
             final SWMRNibbleArray nibble = this.nibbleCache[index];
             if (!this.notifyUpdateCache[index] && (nibble == null || !nibble.isDirty())) {
@@ -280,7 +283,7 @@ public abstract class StarLightEngine {
         }
     }
 
-    protected final BlockState getBlockState(final int worldX, final int worldY, final int worldZ) {
+    protected final @NotNull BlockState getBlockState(final int worldX, final int worldY, final int worldZ) {
         final LevelChunkSection section = this.sectionCache[(worldX >> 4) + 5 * (worldZ >> 4) + (5 * 5) * (worldY >> 4) + this.chunkSectionIndexOffset];
 
         if (section != null) {
@@ -290,7 +293,7 @@ public abstract class StarLightEngine {
         return AIR_BLOCK_STATE;
     }
 
-    protected final BlockState getBlockState(final int sectionIndex, final int localIndex) {
+    protected final @NotNull BlockState getBlockState(final int sectionIndex, final int localIndex) {
         final LevelChunkSection section = this.sectionCache[sectionIndex];
 
         if (section != null) {
@@ -385,11 +388,11 @@ public abstract class StarLightEngine {
         this.emptinessMapCache[chunkX + 5*chunkZ + this.chunkIndexOffset] = emptinessMap;
     }
 
-    public static SWMRNibbleArray[] getFilledEmptyLight(final LevelHeightAccessor world) {
+    public static SWMRNibbleArray @NotNull [] getFilledEmptyLight(final @NotNull LevelHeightAccessor world) {
         return getFilledEmptyLight(WorldUtil.getTotalLightSections(world));
     }
 
-    private static SWMRNibbleArray[] getFilledEmptyLight(final int totalLightSections) {
+    private static SWMRNibbleArray @NotNull [] getFilledEmptyLight(final int totalLightSections) {
         final SWMRNibbleArray[] ret = new SWMRNibbleArray[totalLightSections];
 
         for (int i = 0, len = ret.length; i < len; ++i) {
@@ -409,8 +412,8 @@ public abstract class StarLightEngine {
 
     protected abstract boolean canUseChunk(final ChunkAccess chunk);
 
-    public final void blocksChangedInChunk(final LightChunkGetter lightAccess, final int chunkX, final int chunkZ,
-                                           final Set<BlockPos> positions, final Boolean[] changedSections) {
+    public final void blocksChangedInChunk(final @NotNull LightChunkGetter lightAccess, final int chunkX, final int chunkZ,
+                                           final @NotNull Set<BlockPos> positions, final Boolean @Nullable [] changedSections) {
         this.setupCaches(lightAccess, chunkX * 16 + 7, 128, chunkZ * 16 + 7, true, true);
         try {
             final ChunkAccess chunk = this.getChunkInCache(chunkX, chunkZ);
@@ -558,7 +561,7 @@ public abstract class StarLightEngine {
         }
     }
 
-    protected void checkChunkEdges(final LightChunkGetter lightAccess, final ChunkAccess chunk, final ShortCollection sections) {
+    protected void checkChunkEdges(final @NotNull LightChunkGetter lightAccess, final @NotNull ChunkAccess chunk, final @NotNull ShortCollection sections) {
         final ChunkPos chunkPos = chunk.getPos();
         final int chunkX = chunkPos.x;
         final int chunkZ = chunkPos.z;
@@ -575,7 +578,7 @@ public abstract class StarLightEngine {
     // verifies that light levels on this chunks edges are consistent with this chunk's neighbours
     // edges. if they are not, they are decreased (effectively performing the logic in checkBlock).
     // This does not resolve skylight source problems.
-    protected void checkChunkEdges(final LightChunkGetter lightAccess, final ChunkAccess chunk, final int fromSection, final int toSection) {
+    protected void checkChunkEdges(final @NotNull LightChunkGetter lightAccess, final @NotNull ChunkAccess chunk, final int fromSection, final int toSection) {
         final ChunkPos chunkPos = chunk.getPos();
         final int chunkX = chunkPos.x;
         final int chunkZ = chunkPos.z;
@@ -588,7 +591,7 @@ public abstract class StarLightEngine {
     }
 
     // pulls light from neighbours, and adds them into the increase queue. does not actually propagate.
-    protected final void propagateNeighbourLevels(final LightChunkGetter lightAccess, final ChunkAccess chunk, final int fromSection, final int toSection) {
+    protected final void propagateNeighbourLevels(final LightChunkGetter lightAccess, final @NotNull ChunkAccess chunk, final int fromSection, final int toSection) {
         final ChunkPos chunkPos = chunk.getPos();
         final int chunkX = chunkPos.x;
         final int chunkZ = chunkPos.z;
@@ -670,7 +673,7 @@ public abstract class StarLightEngine {
         }
     }
 
-    public static Boolean[] getEmptySectionsForChunk(final ChunkAccess chunk) {
+    public static Boolean @NotNull [] getEmptySectionsForChunk(final @NotNull ChunkAccess chunk) {
         final LevelChunkSection[] sections = chunk.getSections();
         final Boolean[] ret = new Boolean[sections.length];
 
@@ -685,7 +688,7 @@ public abstract class StarLightEngine {
         return ret;
     }
 
-    public final void forceHandleEmptySectionChanges(final LightChunkGetter lightAccess, final ChunkAccess chunk, final Boolean[] emptinessChanges) {
+    public final void forceHandleEmptySectionChanges(final @NotNull LightChunkGetter lightAccess, final @NotNull ChunkAccess chunk, final Boolean @NotNull [] emptinessChanges) {
         final int chunkX = chunk.getPos().x;
         final int chunkZ = chunk.getPos().z;
         this.setupCaches(lightAccess, chunkX * 16 + 7, 128, chunkZ * 16 + 7, true, true);
@@ -706,8 +709,8 @@ public abstract class StarLightEngine {
         }
     }
 
-    public final void handleEmptySectionChanges(final LightChunkGetter lightAccess, final int chunkX, final int chunkZ,
-                                                final Boolean[] emptinessChanges) {
+    public final void handleEmptySectionChanges(final @NotNull LightChunkGetter lightAccess, final int chunkX, final int chunkZ,
+                                                final Boolean @NotNull [] emptinessChanges) {
         this.setupCaches(lightAccess, chunkX * 16 + 7, 128, chunkZ * 16 + 7, true, true);
         try {
             final ChunkAccess chunk = this.getChunkInCache(chunkX, chunkZ);
@@ -733,8 +736,8 @@ public abstract class StarLightEngine {
     // subclasses are guaranteed that this is always called before a changed block set
     // newChunk specifies whether the changes describe a "first load" of a chunk or changes to existing, already loaded chunks
     // rets non-null when the emptiness map changed and needs to be updated
-    protected final boolean[] handleEmptySectionChanges(final LightChunkGetter lightAccess, final ChunkAccess chunk,
-                                                        final Boolean[] emptinessChanges, final boolean unlit) {
+    protected final boolean[] handleEmptySectionChanges(final @NotNull LightChunkGetter lightAccess, final @NotNull ChunkAccess chunk,
+                                                        final Boolean @NotNull [] emptinessChanges, final boolean unlit) {
         final Level world = (Level)lightAccess.getLevel();
         final int chunkX = chunk.getPos().x;
         final int chunkZ = chunk.getPos().z;
@@ -850,7 +853,7 @@ public abstract class StarLightEngine {
         return ret;
     }
 
-    public final void checkChunkEdges(final LightChunkGetter lightAccess, final int chunkX, final int chunkZ) {
+    public final void checkChunkEdges(final @NotNull LightChunkGetter lightAccess, final int chunkX, final int chunkZ) {
         this.setupCaches(lightAccess, chunkX * 16 + 7, 128, chunkZ * 16 + 7, true, false);
         try {
             final ChunkAccess chunk = this.getChunkInCache(chunkX, chunkZ);
@@ -864,7 +867,7 @@ public abstract class StarLightEngine {
         }
     }
 
-    public final void checkChunkEdges(final LightChunkGetter lightAccess, final int chunkX, final int chunkZ, final ShortCollection sections) {
+    public final void checkChunkEdges(final @NotNull LightChunkGetter lightAccess, final int chunkX, final int chunkZ, final @NotNull ShortCollection sections) {
         this.setupCaches(lightAccess, chunkX * 16 + 7, 128, chunkZ * 16 + 7, true, false);
         try {
             final ChunkAccess chunk = this.getChunkInCache(chunkX, chunkZ);
@@ -886,7 +889,7 @@ public abstract class StarLightEngine {
     // does not need to detect empty chunks itself (and it should do no handling for them either!)
     protected abstract void lightChunk(final LightChunkGetter lightAccess, final ChunkAccess chunk, final boolean needsEdgeChecks);
 
-    public final void light(final LightChunkGetter lightAccess, final ChunkAccess chunk, final Boolean[] emptySections) {
+    public final void light(final @NotNull LightChunkGetter lightAccess, final @NotNull ChunkAccess chunk, final Boolean @NotNull [] emptySections) {
         final int chunkX = chunk.getPos().x;
         final int chunkZ = chunk.getPos().z;
         this.setupCaches(lightAccess, chunkX * 16 + 7, 128, chunkZ * 16 + 7, true, true);
@@ -911,8 +914,8 @@ public abstract class StarLightEngine {
         }
     }
 
-    public final void relightChunks(final LightChunkGetter lightAccess, final Set<ChunkPos> chunks,
-                                    final Consumer<ChunkPos> chunkLightCallback, final IntConsumer onComplete) {
+    public final void relightChunks(final @NotNull LightChunkGetter lightAccess, final @NotNull Set<ChunkPos> chunks,
+                                    final @Nullable Consumer<ChunkPos> chunkLightCallback, final @Nullable IntConsumer onComplete) {
         // it's recommended for maximum performance that the set is ordered according to a BFS from the center of
         // the region of chunks to relight
         // it's required that tickets are added for each chunk to keep them loaded
@@ -1051,9 +1054,9 @@ public abstract class StarLightEngine {
     // whether the propagation needs to consider if its block is conditionally transparent
     protected static final long FLAG_HAS_SIDED_TRANSPARENT_BLOCKS = Long.MIN_VALUE;
 
-    protected long[] increaseQueue = new long[16 * 16 * 16];
+    protected long @NotNull [] increaseQueue = new long[16 * 16 * 16];
     protected int increaseQueueInitialLength;
-    protected long[] decreaseQueue = new long[16 * 16 * 16];
+    protected long @NotNull [] decreaseQueue = new long[16 * 16 * 16];
     protected int decreaseQueueInitialLength;
 
     protected final long[] resizeIncreaseQueue() {
@@ -1098,7 +1101,7 @@ public abstract class StarLightEngine {
         }
     }
 
-    protected final void performLightIncrease(final LightChunkGetter lightAccess) {
+    protected final void performLightIncrease(final @NotNull LightChunkGetter lightAccess) {
         final BlockGetter world = lightAccess.getLevel();
         long[] queue = this.increaseQueue;
         int queueReadIndex = 0;
@@ -1288,7 +1291,7 @@ public abstract class StarLightEngine {
         }
     }
 
-    protected final void performLightDecrease(final LightChunkGetter lightAccess) {
+    protected final void performLightDecrease(final @NotNull LightChunkGetter lightAccess) {
         final BlockGetter world = lightAccess.getLevel();
         long[] queue = this.decreaseQueue;
         long[] increaseQueue = this.increaseQueue;
diff --git a/src/main/java/ca/spottedleaf/starlight/common/light/StarLightInterface.java b/src/main/java/ca/spottedleaf/starlight/common/light/StarLightInterface.java
index 0f7d36933e34e1d1b9dd27d8b0c35ff883818526..f70c77c2447d0f645ea91c9bc79ffad7644c2ea1 100644
--- a/src/main/java/ca/spottedleaf/starlight/common/light/StarLightInterface.java
+++ b/src/main/java/ca/spottedleaf/starlight/common/light/StarLightInterface.java
@@ -20,6 +20,9 @@ import net.minecraft.world.level.chunk.LevelChunk;
 import net.minecraft.world.level.chunk.LightChunkGetter;
 import net.minecraft.world.level.lighting.LayerLightEventListener;
 import net.minecraft.world.level.lighting.LevelLightEngine;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 import java.util.ArrayDeque;
 import java.util.ArrayList;
 import java.util.List;
@@ -35,16 +38,16 @@ public final class StarLightInterface {
     /**
      * Can be {@code null}, indicating the light is all empty.
      */
-    protected final Level world;
+    protected final @Nullable Level world;
     protected final LightChunkGetter lightAccess;
 
-    protected final ArrayDeque<SkyStarLightEngine> cachedSkyPropagators;
-    protected final ArrayDeque<BlockStarLightEngine> cachedBlockPropagators;
+    protected final @Nullable ArrayDeque<SkyStarLightEngine> cachedSkyPropagators;
+    protected final @Nullable ArrayDeque<BlockStarLightEngine> cachedBlockPropagators;
 
-    public final io.papermc.paper.chunk.system.light.LightQueue lightQueue; // Paper - replace light queue
+    public final io.papermc.paper.chunk.system.light.@NotNull LightQueue lightQueue; // Paper - replace light queue
 
-    protected final LayerLightEventListener skyReader;
-    protected final LayerLightEventListener blockReader;
+    protected final @NotNull LayerLightEventListener skyReader;
+    protected final @NotNull LayerLightEventListener blockReader;
     protected final boolean isClientSide;
 
     public final int minSection; // Paper - public
@@ -57,7 +60,7 @@ public final class StarLightInterface {
     private final boolean hasBlockLight;
     private final boolean hasSkyLight;
 
-    public StarLightInterface(final LightChunkGetter lightAccess, final boolean hasSkyLight, final boolean hasBlockLight, final LevelLightEngine lightEngine) {
+    public StarLightInterface(final @Nullable LightChunkGetter lightAccess, final boolean hasSkyLight, final boolean hasBlockLight, final LevelLightEngine lightEngine) {
         this.lightAccess = lightAccess;
         this.world = lightAccess == null ? null : (Level)lightAccess.getLevel();
         this.cachedSkyPropagators = hasSkyLight && lightAccess != null ? new ArrayDeque<>() : null;
@@ -136,7 +139,7 @@ public final class StarLightInterface {
         };
         this.blockReader = !hasBlockLight ? LayerLightEventListener.DummyLightLayerEventListener.INSTANCE : new LayerLightEventListener() {
             @Override
-            public void checkBlock(final BlockPos blockPos) {
+            public void checkBlock(final @NotNull BlockPos blockPos) {
                 StarLightInterface.this.lightEngine.checkBlock(blockPos.immutable());
             }
 
@@ -185,7 +188,7 @@ public final class StarLightInterface {
         this.lightQueue = new io.papermc.paper.chunk.system.light.LightQueue(this); // Paper - replace light queue
     }
 
-    protected int getSkyLightValue(final BlockPos blockPos, final ChunkAccess chunk) {
+    protected int getSkyLightValue(final @NotNull BlockPos blockPos, final @Nullable ChunkAccess chunk) {
         if (!this.hasSkyLight) {
             return 0;
         }
@@ -255,7 +258,7 @@ public final class StarLightInterface {
         return 15;
     }
 
-    protected int getBlockLightValue(final BlockPos blockPos, final ChunkAccess chunk) {
+    protected int getBlockLightValue(final @NotNull BlockPos blockPos, final @Nullable ChunkAccess chunk) {
         if (!this.hasBlockLight) {
             return 0;
         }
@@ -277,7 +280,7 @@ public final class StarLightInterface {
         return nibble.getVisible(blockPos.getX(), y, blockPos.getZ());
     }
 
-    public int getRawBrightness(final BlockPos pos, final int ambientDarkness) {
+    public int getRawBrightness(final @NotNull BlockPos pos, final int ambientDarkness) {
         final ChunkAccess chunk = this.getAnyChunkNow(pos.getX() >> 4, pos.getZ() >> 4);
 
         final int sky = this.getSkyLightValue(pos, chunk) - ambientDarkness;
@@ -299,7 +302,7 @@ public final class StarLightInterface {
         return this.isClientSide;
     }
 
-    public ChunkAccess getAnyChunkNow(final int chunkX, final int chunkZ) {
+    public @Nullable ChunkAccess getAnyChunkNow(final int chunkX, final int chunkZ) {
         if (this.world == null) {
             // empty world
             return null;
@@ -326,7 +329,7 @@ public final class StarLightInterface {
         return this.lightAccess;
     }
 
-    public final SkyStarLightEngine getSkyLightEngine() { // Paper - public
+    public final @Nullable SkyStarLightEngine getSkyLightEngine() { // Paper - public
         if (this.cachedSkyPropagators == null) {
             return null;
         }
@@ -341,7 +344,7 @@ public final class StarLightInterface {
         return ret;
     }
 
-    public final void releaseSkyLightEngine(final SkyStarLightEngine engine) { // Paper - public
+    public final void releaseSkyLightEngine(final @NotNull SkyStarLightEngine engine) { // Paper - public
         if (this.cachedSkyPropagators == null) {
             return;
         }
@@ -350,7 +353,7 @@ public final class StarLightInterface {
         }
     }
 
-    public final BlockStarLightEngine getBlockLightEngine() { // Paper - public
+    public final @Nullable BlockStarLightEngine getBlockLightEngine() { // Paper - public
         if (this.cachedBlockPropagators == null) {
             return null;
         }
@@ -365,7 +368,7 @@ public final class StarLightInterface {
         return ret;
     }
 
-    public final void releaseBlockLightEngine(final BlockStarLightEngine engine) { // Paper - public
+    public final void releaseBlockLightEngine(final @NotNull BlockStarLightEngine engine) { // Paper - public
         if (this.cachedBlockPropagators == null) {
             return;
         }
@@ -374,7 +377,7 @@ public final class StarLightInterface {
         }
     }
 
-    public CompletableFuture<Void> blockChange(final BlockPos pos) {
+    public @Nullable CompletableFuture<Void> blockChange(final @NotNull BlockPos pos) {
         if (this.world == null || pos.getY() < WorldUtil.getMinBlockY(this.world) || pos.getY() > WorldUtil.getMaxBlockY(this.world)) { // empty world
             return null;
         }
@@ -382,7 +385,7 @@ public final class StarLightInterface {
         return this.lightQueue.queueBlockChange(pos);
     }
 
-    public CompletableFuture<Void> sectionChange(final SectionPos pos, final boolean newEmptyValue) {
+    public @Nullable CompletableFuture<Void> sectionChange(final SectionPos pos, final boolean newEmptyValue) {
         if (this.world == null) { // empty world
             return null;
         }
@@ -390,7 +393,7 @@ public final class StarLightInterface {
         return this.lightQueue.queueSectionChange(pos, newEmptyValue);
     }
 
-    public void forceLoadInChunk(final ChunkAccess chunk, final Boolean[] emptySections) {
+    public void forceLoadInChunk(final @NotNull ChunkAccess chunk, final Boolean @NotNull [] emptySections) {
         final SkyStarLightEngine skyEngine = this.getSkyLightEngine();
         final BlockStarLightEngine blockEngine = this.getBlockLightEngine();
 
@@ -407,7 +410,7 @@ public final class StarLightInterface {
         }
     }
 
-    public void loadInChunk(final int chunkX, final int chunkZ, final Boolean[] emptySections) {
+    public void loadInChunk(final int chunkX, final int chunkZ, final Boolean @NotNull [] emptySections) {
         final SkyStarLightEngine skyEngine = this.getSkyLightEngine();
         final BlockStarLightEngine blockEngine = this.getBlockLightEngine();
 
@@ -424,7 +427,7 @@ public final class StarLightInterface {
         }
     }
 
-    public void lightChunk(final ChunkAccess chunk, final Boolean[] emptySections) {
+    public void lightChunk(final @NotNull ChunkAccess chunk, final Boolean @NotNull [] emptySections) {
         final SkyStarLightEngine skyEngine = this.getSkyLightEngine();
         final BlockStarLightEngine blockEngine = this.getBlockLightEngine();
 
@@ -441,7 +444,7 @@ public final class StarLightInterface {
         }
     }
 
-    public void relightChunks(final Set<ChunkPos> chunks, final Consumer<ChunkPos> chunkLightCallback,
+    public void relightChunks(final @NotNull Set<ChunkPos> chunks, final Consumer<ChunkPos> chunkLightCallback,
                               final IntConsumer onComplete) {
         final SkyStarLightEngine skyEngine = this.getSkyLightEngine();
         final BlockStarLightEngine blockEngine = this.getBlockLightEngine();
@@ -488,7 +491,7 @@ public final class StarLightInterface {
         }
     }
 
-    public void checkSkyEdges(final int chunkX, final int chunkZ, final ShortCollection sections) {
+    public void checkSkyEdges(final int chunkX, final int chunkZ, final @NotNull ShortCollection sections) {
         final SkyStarLightEngine skyEngine = this.getSkyLightEngine();
 
         try {
@@ -500,7 +503,7 @@ public final class StarLightInterface {
         }
     }
 
-    public void checkBlockEdges(final int chunkX, final int chunkZ, final ShortCollection sections) {
+    public void checkBlockEdges(final int chunkX, final int chunkZ, final @NotNull ShortCollection sections) {
         final BlockStarLightEngine blockEngine = this.getBlockLightEngine();
         try {
             if (blockEngine != null) {
@@ -536,13 +539,13 @@ public final class StarLightInterface {
             return this.chunkTasks.isEmpty();
         }
 
-        public synchronized CompletableFuture<Void> queueBlockChange(final BlockPos pos) {
+        public synchronized @NotNull CompletableFuture<Void> queueBlockChange(final @NotNull BlockPos pos) {
             final ChunkTasks tasks = this.chunkTasks.computeIfAbsent(CoordinateUtils.getChunkKey(pos), ChunkTasks::new);
             tasks.changedPositions.add(pos.immutable());
             return tasks.onComplete;
         }
 
-        public synchronized CompletableFuture<Void> queueSectionChange(final SectionPos pos, final boolean newEmptyValue) {
+        public synchronized @NotNull CompletableFuture<Void> queueSectionChange(final @NotNull SectionPos pos, final boolean newEmptyValue) {
             final ChunkTasks tasks = this.chunkTasks.computeIfAbsent(CoordinateUtils.getChunkKey(pos), ChunkTasks::new);
 
             if (tasks.changedSectionSet == null) {
@@ -553,7 +556,7 @@ public final class StarLightInterface {
             return tasks.onComplete;
         }
 
-        public synchronized CompletableFuture<Void> queueChunkLighting(final ChunkPos pos, final Runnable lightTask) {
+        public synchronized @NotNull CompletableFuture<Void> queueChunkLighting(final @NotNull ChunkPos pos, final Runnable lightTask) {
             final ChunkTasks tasks = this.chunkTasks.computeIfAbsent(CoordinateUtils.getChunkKey(pos), ChunkTasks::new);
             if (tasks.lightTasks == null) {
                 tasks.lightTasks = new ArrayList<>();
@@ -563,7 +566,7 @@ public final class StarLightInterface {
             return tasks.onComplete;
         }
 
-        public synchronized CompletableFuture<Void> queueChunkSkylightEdgeCheck(final SectionPos pos, final ShortCollection sections) {
+        public synchronized @NotNull CompletableFuture<Void> queueChunkSkylightEdgeCheck(final @NotNull SectionPos pos, final ShortCollection sections) {
             final ChunkTasks tasks = this.chunkTasks.computeIfAbsent(CoordinateUtils.getChunkKey(pos), ChunkTasks::new);
 
             ShortOpenHashSet queuedEdges = tasks.queuedEdgeChecksSky;
@@ -575,7 +578,7 @@ public final class StarLightInterface {
             return tasks.onComplete;
         }
 
-        public synchronized CompletableFuture<Void> queueChunkBlocklightEdgeCheck(final SectionPos pos, final ShortCollection sections) {
+        public synchronized @NotNull CompletableFuture<Void> queueChunkBlocklightEdgeCheck(final @NotNull SectionPos pos, final ShortCollection sections) {
             final ChunkTasks tasks = this.chunkTasks.computeIfAbsent(CoordinateUtils.getChunkKey(pos), ChunkTasks::new);
 
             ShortOpenHashSet queuedEdges = tasks.queuedEdgeChecksBlock;
@@ -587,7 +590,7 @@ public final class StarLightInterface {
             return tasks.onComplete;
         }
 
-        public void removeChunk(final ChunkPos pos) {
+        public void removeChunk(final @NotNull ChunkPos pos) {
             final ChunkTasks tasks;
             synchronized (this) {
                 tasks = this.chunkTasks.remove(CoordinateUtils.getChunkKey(pos));
@@ -597,7 +600,7 @@ public final class StarLightInterface {
             }
         }
 
-        public synchronized ChunkTasks removeFirstTask() {
+        public synchronized @Nullable ChunkTasks removeFirstTask() {
             if (this.chunkTasks.isEmpty()) {
                 return null;
             }
diff --git a/src/main/java/ca/spottedleaf/starlight/common/util/CoordinateUtils.java b/src/main/java/ca/spottedleaf/starlight/common/util/CoordinateUtils.java
index 16a4a14e7ccf9e4d7fdf1166674fe8f529c06d39..0a47fbceab7dbe45f117ae1b964beb60d47215a7 100644
--- a/src/main/java/ca/spottedleaf/starlight/common/util/CoordinateUtils.java
+++ b/src/main/java/ca/spottedleaf/starlight/common/util/CoordinateUtils.java
@@ -5,6 +5,8 @@ import net.minecraft.core.SectionPos;
 import net.minecraft.util.Mth;
 import net.minecraft.world.entity.Entity;
 import net.minecraft.world.level.ChunkPos;
+import org.jetbrains.annotations.NotNull;
+
 
 public final class CoordinateUtils {
 
@@ -16,19 +18,19 @@ public final class CoordinateUtils {
 
     // the chunk keys are compatible with vanilla
 
-    public static long getChunkKey(final BlockPos pos) {
+    public static long getChunkKey(final @NotNull BlockPos pos) {
         return ((long)(pos.getZ() >> 4) << 32) | ((pos.getX() >> 4) & 0xFFFFFFFFL);
     }
 
-    public static long getChunkKey(final Entity entity) {
+    public static long getChunkKey(final @NotNull Entity entity) {
         return ((long)(Mth.floor(entity.getZ()) >> 4) << 32) | ((Mth.floor(entity.getX()) >> 4) & 0xFFFFFFFFL);
     }
 
-    public static long getChunkKey(final ChunkPos pos) {
+    public static long getChunkKey(final @NotNull ChunkPos pos) {
         return ((long)pos.z << 32) | (pos.x & 0xFFFFFFFFL);
     }
 
-    public static long getChunkKey(final SectionPos pos) {
+    public static long getChunkKey(final @NotNull SectionPos pos) {
         return ((long)pos.getZ() << 32) | (pos.getX() & 0xFFFFFFFFL);
     }
 
@@ -68,25 +70,25 @@ public final class CoordinateUtils {
                 | ((z & SECTION_Z_MASK) << SECTION_Z_SHIFT);
     }
 
-    public static long getChunkSectionKey(final SectionPos pos) {
+    public static long getChunkSectionKey(final @NotNull SectionPos pos) {
         return ((pos.getX() & SECTION_X_MASK) << SECTION_X_SHIFT)
                 | ((pos.getY() & SECTION_Y_MASK) << SECTION_Y_SHIFT)
                 | ((pos.getZ() & SECTION_Z_MASK) << SECTION_Z_SHIFT);
     }
 
-    public static long getChunkSectionKey(final ChunkPos pos, final int y) {
+    public static long getChunkSectionKey(final @NotNull ChunkPos pos, final int y) {
         return ((pos.x & SECTION_X_MASK) << SECTION_X_SHIFT)
                 | ((y & SECTION_Y_MASK) << SECTION_Y_SHIFT)
                 | ((pos.z & SECTION_Z_MASK) << SECTION_Z_SHIFT);
     }
 
-    public static long getChunkSectionKey(final BlockPos pos) {
+    public static long getChunkSectionKey(final @NotNull BlockPos pos) {
         return (((long)pos.getX() << (SECTION_X_SHIFT - SECTION_TO_BLOCK_SHIFT)) & (SECTION_X_MASK << SECTION_X_SHIFT)) |
                 ((pos.getY() >> SECTION_TO_BLOCK_SHIFT) & (SECTION_Y_MASK << SECTION_Y_SHIFT)) |
                 (((long)pos.getZ() << (SECTION_Z_SHIFT - SECTION_TO_BLOCK_SHIFT)) & (SECTION_Z_MASK << SECTION_Z_SHIFT));
     }
 
-    public static long getChunkSectionKey(final Entity entity) {
+    public static long getChunkSectionKey(final @NotNull Entity entity) {
         return ((Mth.lfloor(entity.getX()) << (SECTION_X_SHIFT - SECTION_TO_BLOCK_SHIFT)) & (SECTION_X_MASK << SECTION_X_SHIFT)) |
                 ((Mth.lfloor(entity.getY()) >> SECTION_TO_BLOCK_SHIFT) & (SECTION_Y_MASK << SECTION_Y_SHIFT)) |
                 ((Mth.lfloor(entity.getZ()) << (SECTION_Z_SHIFT - SECTION_TO_BLOCK_SHIFT)) & (SECTION_Z_MASK << SECTION_Z_SHIFT));
@@ -114,11 +116,11 @@ public final class CoordinateUtils {
         return ((long)x & 0x7FFFFFF) | (((long)z & 0x7FFFFFF) << 27) | ((long)y << 54);
     }
 
-    public static long getBlockKey(final BlockPos pos) {
+    public static long getBlockKey(final @NotNull BlockPos pos) {
         return ((long)pos.getX() & 0x7FFFFFF) | (((long)pos.getZ() & 0x7FFFFFF) << 27) | ((long)pos.getY() << 54);
     }
 
-    public static long getBlockKey(final Entity entity) {
+    public static long getBlockKey(final @NotNull Entity entity) {
         return ((long)entity.getX() & 0x7FFFFFF) | (((long)entity.getZ() & 0x7FFFFFF) << 27) | ((long)entity.getY() << 54);
     }
 
diff --git a/src/main/java/ca/spottedleaf/starlight/common/util/SaveUtil.java b/src/main/java/ca/spottedleaf/starlight/common/util/SaveUtil.java
index 6df9e01731d7fcbe279736b8fc18396595b95574..46902aeea22292170411f94502a87eae133f3afd 100644
--- a/src/main/java/ca/spottedleaf/starlight/common/util/SaveUtil.java
+++ b/src/main/java/ca/spottedleaf/starlight/common/util/SaveUtil.java
@@ -10,6 +10,8 @@ import net.minecraft.world.level.ChunkPos;
 import net.minecraft.world.level.Level;
 import net.minecraft.world.level.chunk.ChunkAccess;
 import net.minecraft.world.level.chunk.ChunkStatus;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
 import org.slf4j.Logger;
 
 public final class SaveUtil {
@@ -26,7 +28,7 @@ public final class SaveUtil {
     private static final String SKYLIGHT_STATE_TAG = "starlight.skylight_state";
     private static final String STARLIGHT_VERSION_TAG = "starlight.light_version";
 
-    public static void saveLightHook(final Level world, final ChunkAccess chunk, final CompoundTag nbt) {
+    public static void saveLightHook(final Level world, final @NotNull ChunkAccess chunk, final CompoundTag nbt) {
         try {
             saveLightHookReal(world, chunk, nbt);
         } catch (final Throwable ex) {
@@ -39,7 +41,7 @@ public final class SaveUtil {
         }
     }
 
-    private static void saveLightHookReal(final Level world, final ChunkAccess chunk, final CompoundTag tag) {
+    private static void saveLightHookReal(final Level world, final @NotNull ChunkAccess chunk, final @Nullable CompoundTag tag) {
         if (tag == null) {
             return;
         }
@@ -123,7 +125,7 @@ public final class SaveUtil {
         }
     }
 
-    public static void loadLightHook(final Level world, final ChunkPos pos, final CompoundTag tag, final ChunkAccess into) {
+    public static void loadLightHook(final @NotNull Level world, final ChunkPos pos, final @NotNull CompoundTag tag, final ChunkAccess into) {
         try {
             loadLightHookReal(world, pos, tag, into);
         } catch (final Throwable ex) {
@@ -136,7 +138,7 @@ public final class SaveUtil {
         }
     }
 
-    private static void loadLightHookReal(final Level world, final ChunkPos pos, final CompoundTag tag, final ChunkAccess into) {
+    private static void loadLightHookReal(final @NotNull Level world, final ChunkPos pos, final @NotNull CompoundTag tag, final @Nullable ChunkAccess into) {
         if (into == null) {
             return;
         }
diff --git a/src/main/java/ca/spottedleaf/starlight/common/util/WorldUtil.java b/src/main/java/ca/spottedleaf/starlight/common/util/WorldUtil.java
index dd995e25ae620ae36cd5eecb2fe10ad034ba50d2..cb5b6b6d6a6fe61880ab94446275f88c0d0e9afc 100644
--- a/src/main/java/ca/spottedleaf/starlight/common/util/WorldUtil.java
+++ b/src/main/java/ca/spottedleaf/starlight/common/util/WorldUtil.java
@@ -1,42 +1,44 @@
 package ca.spottedleaf.starlight.common.util;
 
 import net.minecraft.world.level.LevelHeightAccessor;
+import org.jetbrains.annotations.NotNull;
+
 
 public final class WorldUtil {
 
     // min, max are inclusive
 
-    public static int getMaxSection(final LevelHeightAccessor world) {
+    public static int getMaxSection(final @NotNull LevelHeightAccessor world) {
         return world.getMaxSection() - 1; // getMaxSection() is exclusive
     }
 
-    public static int getMinSection(final LevelHeightAccessor world) {
+    public static int getMinSection(final @NotNull LevelHeightAccessor world) {
         return world.getMinSection();
     }
 
-    public static int getMaxLightSection(final LevelHeightAccessor world) {
+    public static int getMaxLightSection(final @NotNull LevelHeightAccessor world) {
         return getMaxSection(world) + 1;
     }
 
-    public static int getMinLightSection(final LevelHeightAccessor world) {
+    public static int getMinLightSection(final @NotNull LevelHeightAccessor world) {
         return getMinSection(world) - 1;
     }
 
 
 
-    public static int getTotalSections(final LevelHeightAccessor world) {
+    public static int getTotalSections(final @NotNull LevelHeightAccessor world) {
         return getMaxSection(world) - getMinSection(world) + 1;
     }
 
-    public static int getTotalLightSections(final LevelHeightAccessor world) {
+    public static int getTotalLightSections(final @NotNull LevelHeightAccessor world) {
         return getMaxLightSection(world) - getMinLightSection(world) + 1;
     }
 
-    public static int getMinBlockY(final LevelHeightAccessor world) {
+    public static int getMinBlockY(final @NotNull LevelHeightAccessor world) {
         return getMinSection(world) << 4;
     }
 
-    public static int getMaxBlockY(final LevelHeightAccessor world) {
+    public static int getMaxBlockY(final @NotNull LevelHeightAccessor world) {
         return (getMaxSection(world) << 4) | 15;
     }
 
diff --git a/src/main/java/co/aikar/timings/MinecraftTimings.java b/src/main/java/co/aikar/timings/MinecraftTimings.java
index 9da5a6086323ff4c4fd62a035fa8f7efc3d92e38..66c587782fd439889278f48bd22926277c41e016 100644
--- a/src/main/java/co/aikar/timings/MinecraftTimings.java
+++ b/src/main/java/co/aikar/timings/MinecraftTimings.java
@@ -10,6 +10,7 @@ import org.bukkit.plugin.Plugin;
 import org.bukkit.scheduler.BukkitTask;
 
 import org.bukkit.craftbukkit.scheduler.CraftTask;
+import org.jetbrains.annotations.NotNull;
 
 import java.util.Map;
 
@@ -54,7 +55,7 @@ public final class MinecraftTimings {
 
     private MinecraftTimings() {}
 
-    public static Timing getInternalTaskName(String taskName) {
+    public static @NotNull Timing getInternalTaskName(@NotNull String taskName) {
         return Timings.ofSafe(taskName);
     }
 
@@ -64,7 +65,7 @@ public final class MinecraftTimings {
      * @param period
      * @return
      */
-    public static Timing getPluginTaskTimings(BukkitTask bukkitTask, long period) {
+    public static @NotNull Timing getPluginTaskTimings(@NotNull BukkitTask bukkitTask, long period) {
         if (!bukkitTask.isSync()) {
             return NullTimingHandler.NULL;
         }
@@ -114,15 +115,15 @@ public final class MinecraftTimings {
      * @param entityType
      * @return
      */
-    public static Timing getEntityTimings(String entityType, String type) {
+    public static @NotNull Timing getEntityTimings(String entityType, String type) {
         return Timings.ofSafe("Minecraft", "## tickEntity - " + entityType + " - " + type, tickEntityTimer);
     }
 
-    public static Timing getBehaviorTimings(String type) {
+    public static @NotNull Timing getBehaviorTimings(String type) {
         return Timings.ofSafe("## Behavior - " + type);
     }
 
-    public static Timing getSensorTimings(String type, int rate) {
+    public static @NotNull Timing getSensorTimings(String type, int rate) {
         return Timings.ofSafe("## Sensor - " + type + " (Default rate: " + rate + ")");
     }
 
@@ -131,14 +132,14 @@ public final class MinecraftTimings {
      * @param entity
      * @return
      */
-    public static Timing getTileEntityTimings(BlockEntity entity) {
+    public static @NotNull Timing getTileEntityTimings(@NotNull BlockEntity entity) {
         String entityType = entity.getClass().getName();
         return Timings.ofSafe("Minecraft", "## tickTileEntity - " + entityType, tickTileEntityTimer);
     }
-    public static Timing getCancelTasksTimer() {
+    public static @NotNull Timing getCancelTasksTimer() {
         return Timings.ofSafe("Cancel Tasks");
     }
-    public static Timing getCancelTasksTimer(Plugin plugin) {
+    public static @NotNull Timing getCancelTasksTimer(Plugin plugin) {
         return Timings.ofSafe(plugin, "Cancel Tasks");
     }
 
@@ -146,7 +147,7 @@ public final class MinecraftTimings {
         TimingsManager.stopServer();
     }
 
-    public static Timing getBlockTiming(Block block) {
+    public static @NotNull Timing getBlockTiming(@NotNull Block block) {
         return Timings.ofSafe("## Scheduled Block: " + block.toString(), scheduledBlocksTimer);
     }
 /*
@@ -154,15 +155,15 @@ public final class MinecraftTimings {
         return Timings.ofSafe("Structure Generator - " + structureGenerator.getName(), structureGenerationTimer);
     }*/
 
-    public static Timing getPacketTiming(Packet packet) {
+    public static @NotNull Timing getPacketTiming(@NotNull Packet packet) {
         return Timings.ofSafe("## Packet - " + packet.getClass().getName(), packetProcessTimer);
     }
 
-    public static Timing getCommandFunctionTiming(CommandFunction function) {
+    public static @NotNull Timing getCommandFunctionTiming(@NotNull CommandFunction function) {
         return Timings.ofSafe("Command Function - " + function.getId());
     }
 
-    public static void processConfig(GlobalConfiguration.Timings config) {
+    public static void processConfig(GlobalConfiguration.@NotNull Timings config) {
         TimingsManager.url = config.url;
         if (!TimingsManager.url.endsWith("/")) {
             TimingsManager.url += "/";
diff --git a/src/main/java/co/aikar/timings/TimingsExport.java b/src/main/java/co/aikar/timings/TimingsExport.java
index 06bff37e4c1fddd3be6343049a66787c63fb420c..cccde07d866c1623ce814820dad1f1999f0a8541 100644
--- a/src/main/java/co/aikar/timings/TimingsExport.java
+++ b/src/main/java/co/aikar/timings/TimingsExport.java
@@ -35,6 +35,8 @@ import org.bukkit.Material;
 import org.bukkit.configuration.ConfigurationSection;
 import org.bukkit.configuration.MemorySection;
 import org.bukkit.entity.EntityType;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
 import org.json.simple.JSONObject;
 import org.json.simple.JSONValue;
 import oshi.SystemInfo;
@@ -282,7 +284,7 @@ public class TimingsExport extends Thread {
         return timingsCost;
     }
 
-    private static JSONObject mapAsJSON(ConfigurationSection config, String parentKey) {
+    private static @NotNull JSONObject mapAsJSON(@NotNull ConfigurationSection config, @Nullable String parentKey) {
 
         JSONObject object = new JSONObject();
         for (String key : config.getKeys(false)) {
@@ -363,7 +365,7 @@ public class TimingsExport extends Thread {
         }
     }
 
-    private String getResponse(HttpURLConnection con) throws IOException {
+    private @Nullable String getResponse(@NotNull HttpURLConnection con) throws IOException {
         InputStream is = null;
         try {
             is = con.getInputStream();
diff --git a/src/main/java/co/aikar/timings/WorldTimingsHandler.java b/src/main/java/co/aikar/timings/WorldTimingsHandler.java
index fe79c0add4f7cb18d487c5bb9415c40c5b551ea2..5382caf93cca3d53c210fd92b21e2b63679fe581 100644
--- a/src/main/java/co/aikar/timings/WorldTimingsHandler.java
+++ b/src/main/java/co/aikar/timings/WorldTimingsHandler.java
@@ -3,72 +3,74 @@ package co.aikar.timings;
 import net.minecraft.server.level.ServerLevel;
 import net.minecraft.world.level.Level;
 import net.minecraft.world.level.storage.PrimaryLevelData;
+import org.jetbrains.annotations.NotNull;
+
 
 /**
  * Set of timers per world, to track world specific timings.
  */
 // TODO: Re-implement missing timers
 public class WorldTimingsHandler {
-    public final Timing mobSpawn;
-    public final Timing doChunkUnload;
-    public final Timing doPortalForcer;
-    public final Timing scheduledBlocks;
-    public final Timing scheduledBlocksCleanup;
-    public final Timing scheduledBlocksTicking;
-    public final Timing chunkTicks;
-    public final Timing lightChunk;
-    public final Timing chunkTicksBlocks;
-    public final Timing doVillages;
-    public final Timing doChunkMap;
-    public final Timing doChunkMapUpdate;
-    public final Timing doChunkMapToUpdate;
-    public final Timing doChunkMapSortMissing;
-    public final Timing doChunkMapSortSendToPlayers;
-    public final Timing doChunkMapPlayersNeedingChunks;
-    public final Timing doChunkMapPendingSendToPlayers;
-    public final Timing doChunkMapUnloadChunks;
-    public final Timing doChunkGC;
-    public final Timing doSounds;
-    public final Timing entityRemoval;
-    public final Timing entityTick;
-    public final Timing tileEntityTick;
-    public final Timing tileEntityPending;
-    public final Timing tracker1;
-    public final Timing tracker2;
-    public final Timing doTick;
-    public final Timing tickEntities;
-    public final Timing chunks;
-    public final Timing newEntities;
-    public final Timing raids;
-    public final Timing chunkProviderTick;
-    public final Timing broadcastChunkUpdates;
-    public final Timing countNaturalMobs;
-
-    public final Timing chunkLoad;
-    public final Timing chunkLoadPopulate;
-    public final Timing syncChunkLoad;
-    public final Timing chunkLoadLevelTimer;
-    public final Timing chunkIO;
-    public final Timing chunkPostLoad;
-    public final Timing worldSave;
-    public final Timing worldSaveChunks;
-    public final Timing worldSaveLevel;
-    public final Timing chunkSaveData;
-
-
-    public final Timing miscMobSpawning;
-
-    public final Timing poiUnload;
-    public final Timing chunkUnload;
-    public final Timing poiSaveDataSerialization;
-    public final Timing chunkSave;
-    public final Timing chunkSaveDataSerialization;
-    public final Timing chunkSaveIOWait;
-    public final Timing chunkUnloadPrepareSave;
-    public final Timing chunkUnloadPOISerialization;
-    public final Timing chunkUnloadDataSave;
-
-    public WorldTimingsHandler(Level server) {
+    public final @NotNull Timing mobSpawn;
+    public final @NotNull Timing doChunkUnload;
+    public final @NotNull Timing doPortalForcer;
+    public final @NotNull Timing scheduledBlocks;
+    public final @NotNull Timing scheduledBlocksCleanup;
+    public final @NotNull Timing scheduledBlocksTicking;
+    public final @NotNull Timing chunkTicks;
+    public final @NotNull Timing lightChunk;
+    public final @NotNull Timing chunkTicksBlocks;
+    public final @NotNull Timing doVillages;
+    public final @NotNull Timing doChunkMap;
+    public final @NotNull Timing doChunkMapUpdate;
+    public final @NotNull Timing doChunkMapToUpdate;
+    public final @NotNull Timing doChunkMapSortMissing;
+    public final @NotNull Timing doChunkMapSortSendToPlayers;
+    public final @NotNull Timing doChunkMapPlayersNeedingChunks;
+    public final @NotNull Timing doChunkMapPendingSendToPlayers;
+    public final @NotNull Timing doChunkMapUnloadChunks;
+    public final @NotNull Timing doChunkGC;
+    public final @NotNull Timing doSounds;
+    public final @NotNull Timing entityRemoval;
+    public final @NotNull Timing entityTick;
+    public final @NotNull Timing tileEntityTick;
+    public final @NotNull Timing tileEntityPending;
+    public final @NotNull Timing tracker1;
+    public final @NotNull Timing tracker2;
+    public final @NotNull Timing doTick;
+    public final @NotNull Timing tickEntities;
+    public final @NotNull Timing chunks;
+    public final @NotNull Timing newEntities;
+    public final @NotNull Timing raids;
+    public final @NotNull Timing chunkProviderTick;
+    public final @NotNull Timing broadcastChunkUpdates;
+    public final @NotNull Timing countNaturalMobs;
+
+    public final @NotNull Timing chunkLoad;
+    public final @NotNull Timing chunkLoadPopulate;
+    public final @NotNull Timing syncChunkLoad;
+    public final @NotNull Timing chunkLoadLevelTimer;
+    public final @NotNull Timing chunkIO;
+    public final @NotNull Timing chunkPostLoad;
+    public final @NotNull Timing worldSave;
+    public final @NotNull Timing worldSaveChunks;
+    public final @NotNull Timing worldSaveLevel;
+    public final @NotNull Timing chunkSaveData;
+
+
+    public final @NotNull Timing miscMobSpawning;
+
+    public final @NotNull Timing poiUnload;
+    public final @NotNull Timing chunkUnload;
+    public final @NotNull Timing poiSaveDataSerialization;
+    public final @NotNull Timing chunkSave;
+    public final @NotNull Timing chunkSaveDataSerialization;
+    public final @NotNull Timing chunkSaveIOWait;
+    public final @NotNull Timing chunkUnloadPrepareSave;
+    public final @NotNull Timing chunkUnloadPOISerialization;
+    public final @NotNull Timing chunkUnloadDataSave;
+
+    public WorldTimingsHandler(@NotNull Level server) {
         String name = ((PrimaryLevelData) server.getLevelData()).getLevelName() + " - ";
 
         mobSpawn = Timings.ofSafe(name + "mobSpawn");
@@ -133,7 +135,7 @@ public class WorldTimingsHandler {
         chunkUnloadDataSave = Timings.ofSafe(name + "Chunk unload - Data Serialization");
     }
 
-    public static Timing getTickList(ServerLevel worldserver, String timingsType) {
+    public static @NotNull Timing getTickList(@NotNull ServerLevel worldserver, String timingsType) {
         return Timings.ofSafe(((PrimaryLevelData) worldserver.getLevelData()).getLevelName() + " - Scheduled " + timingsType);
     }
 }
diff --git a/src/main/java/com/destroystokyo/paper/Metrics.java b/src/main/java/com/destroystokyo/paper/Metrics.java
index 4b002e8b75d117b726b0de274a76d3596fce015b..19d7677aacb7737face003c69cb7bd681ea101c1 100644
--- a/src/main/java/com/destroystokyo/paper/Metrics.java
+++ b/src/main/java/com/destroystokyo/paper/Metrics.java
@@ -6,6 +6,8 @@ import org.bukkit.configuration.file.YamlConfiguration;
 import org.bukkit.craftbukkit.util.CraftMagicNumbers;
 import org.bukkit.plugin.Plugin;
 
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
 import org.json.simple.JSONArray;
 import org.json.simple.JSONObject;
 
@@ -81,7 +83,7 @@ public class Metrics {
      *
      * @param chart The chart to add.
      */
-    public void addCustomChart(CustomChart chart) {
+    public void addCustomChart(@Nullable CustomChart chart) {
         if (chart == null) {
             throw new IllegalArgumentException("Chart cannot be null!");
         }
@@ -114,7 +116,7 @@ public class Metrics {
      *
      * @return The plugin specific data.
      */
-    private JSONObject getPluginData() {
+    private @NotNull JSONObject getPluginData() {
         JSONObject data = new JSONObject();
 
         data.put("pluginName", name); // Append the name of the server software
@@ -137,7 +139,7 @@ public class Metrics {
      *
      * @return The server specific data.
      */
-    private JSONObject getServerData() {
+    private @NotNull JSONObject getServerData() {
         // OS specific data
         String osName = System.getProperty("os.name");
         String osArch = System.getProperty("os.arch");
@@ -183,7 +185,7 @@ public class Metrics {
      * @param data The data to send.
      * @throws Exception If the request failed.
      */
-    private static void sendData(JSONObject data) throws Exception {
+    private static void sendData(@Nullable JSONObject data) throws Exception {
         if (data == null) {
             throw new IllegalArgumentException("Data cannot be null!");
         }
@@ -218,7 +220,7 @@ public class Metrics {
      * @return The gzipped String.
      * @throws IOException If the compression failed.
      */
-    private static byte[] compress(final String str) throws IOException {
+    private static byte[] compress(final @Nullable String str) throws IOException {
         if (str == null) {
             return null;
         }
@@ -235,21 +237,21 @@ public class Metrics {
     public static abstract class CustomChart {
 
         // The id of the chart
-        final String chartId;
+        final @NotNull String chartId;
 
         /**
          * Class constructor.
          *
          * @param chartId The id of the chart.
          */
-        CustomChart(String chartId) {
+        CustomChart(@Nullable String chartId) {
             if (chartId == null || chartId.isEmpty()) {
                 throw new IllegalArgumentException("ChartId cannot be null or empty!");
             }
             this.chartId = chartId;
         }
 
-        private JSONObject getRequestJsonObject() {
+        private @Nullable JSONObject getRequestJsonObject() {
             JSONObject chart = new JSONObject();
             chart.put("chartId", chartId);
             try {
@@ -268,7 +270,7 @@ public class Metrics {
             return chart;
         }
 
-        protected abstract JSONObject getChartData() throws Exception;
+        protected abstract @Nullable JSONObject getChartData() throws Exception;
 
     }
 
@@ -291,7 +293,7 @@ public class Metrics {
         }
 
         @Override
-        protected JSONObject getChartData() throws Exception {
+        protected @Nullable JSONObject getChartData() throws Exception {
             JSONObject data = new JSONObject();
             String value = callable.call();
             if (value == null || value.isEmpty()) {
@@ -322,7 +324,7 @@ public class Metrics {
         }
 
         @Override
-        protected JSONObject getChartData() throws Exception {
+        protected @Nullable JSONObject getChartData() throws Exception {
             JSONObject data = new JSONObject();
             JSONObject values = new JSONObject();
             Map<String, Integer> map = callable.call();
@@ -366,7 +368,7 @@ public class Metrics {
         }
 
         @Override
-        public JSONObject getChartData() throws Exception {
+        public @Nullable JSONObject getChartData() throws Exception {
             JSONObject data = new JSONObject();
             JSONObject values = new JSONObject();
             Map<String, Map<String, Integer>> map = callable.call();
@@ -415,7 +417,7 @@ public class Metrics {
         }
 
         @Override
-        protected JSONObject getChartData() throws Exception {
+        protected @Nullable JSONObject getChartData() throws Exception {
             JSONObject data = new JSONObject();
             int value = callable.call();
             if (value == 0) {
@@ -447,7 +449,7 @@ public class Metrics {
         }
 
         @Override
-        protected JSONObject getChartData() throws Exception {
+        protected @Nullable JSONObject getChartData() throws Exception {
             JSONObject data = new JSONObject();
             JSONObject values = new JSONObject();
             Map<String, Integer> map = callable.call();
@@ -492,7 +494,7 @@ public class Metrics {
         }
 
         @Override
-        protected JSONObject getChartData() throws Exception {
+        protected @Nullable JSONObject getChartData() throws Exception {
             JSONObject data = new JSONObject();
             JSONObject values = new JSONObject();
             Map<String, Integer> map = callable.call();
@@ -530,7 +532,7 @@ public class Metrics {
         }
 
         @Override
-        protected JSONObject getChartData() throws Exception {
+        protected @Nullable JSONObject getChartData() throws Exception {
             JSONObject data = new JSONObject();
             JSONObject values = new JSONObject();
             Map<String, int[]> map = callable.call();
diff --git a/src/main/java/com/destroystokyo/paper/PaperSkinParts.java b/src/main/java/com/destroystokyo/paper/PaperSkinParts.java
index b6f4400df3d8ec7e06a996de54f8cabba57885e1..13ed1f19c13d01afbad586d9c4160beef25534dd 100644
--- a/src/main/java/com/destroystokyo/paper/PaperSkinParts.java
+++ b/src/main/java/com/destroystokyo/paper/PaperSkinParts.java
@@ -1,6 +1,7 @@
 package com.destroystokyo.paper;
 
 import com.google.common.base.Objects;
+import org.jetbrains.annotations.Nullable;
 
 import java.util.StringJoiner;
 
@@ -46,7 +47,7 @@ public class PaperSkinParts implements SkinParts {
     }
 
     @Override
-    public boolean equals(Object o) {
+    public boolean equals(@Nullable Object o) {
         if (this == o) return true;
         if (o == null || getClass() != o.getClass()) return false;
         PaperSkinParts that = (PaperSkinParts) o;
diff --git a/src/main/java/com/destroystokyo/paper/PaperVersionFetcher.java b/src/main/java/com/destroystokyo/paper/PaperVersionFetcher.java
index bf42969859545a8a520923ef1836ffa4a5cc24a0..26bb9a45d4ab571c6c14e02bb7e2b359f9dd6583 100644
--- a/src/main/java/com/destroystokyo/paper/PaperVersionFetcher.java
+++ b/src/main/java/com/destroystokyo/paper/PaperVersionFetcher.java
@@ -9,6 +9,7 @@ import net.kyori.adventure.text.event.ClickEvent;
 import net.kyori.adventure.text.format.NamedTextColor;
 import net.kyori.adventure.text.format.TextDecoration;
 import net.kyori.adventure.text.TextComponent;
+import org.jetbrains.annotations.NotNull;
 
 import javax.annotation.Nonnull;
 import javax.annotation.Nullable;
@@ -54,7 +55,7 @@ public class PaperVersionFetcher implements VersionFetcher {
         return mcVer;
     }
 
-    private static Component getUpdateStatusMessage(@Nonnull String repo, @Nonnull String branch, @Nonnull String versionInfo) {
+    private static @NotNull Component getUpdateStatusMessage(@Nonnull String repo, @Nonnull String branch, @Nonnull String versionInfo) {
         int distance;
         try {
             int jenkinsBuild = Integer.parseInt(versionInfo);
diff --git a/src/main/java/com/destroystokyo/paper/ServerSchedulerReportingWrapper.java b/src/main/java/com/destroystokyo/paper/ServerSchedulerReportingWrapper.java
index f699ce18ca044f813e194ef2786b7ea853ea86e7..542ad0292293ac9d2edd03fbc58edc2d0c99ec23 100644
--- a/src/main/java/com/destroystokyo/paper/ServerSchedulerReportingWrapper.java
+++ b/src/main/java/com/destroystokyo/paper/ServerSchedulerReportingWrapper.java
@@ -4,13 +4,15 @@ import com.google.common.base.Preconditions;
 import org.bukkit.craftbukkit.scheduler.CraftTask;
 import com.destroystokyo.paper.event.server.ServerExceptionEvent;
 import com.destroystokyo.paper.exception.ServerSchedulerException;
+import org.jetbrains.annotations.NotNull;
+
 
 /**
  * Reporting wrapper to catch exceptions not natively
  */
 public class ServerSchedulerReportingWrapper implements Runnable {
 
-    private final CraftTask internalTask;
+    private final @NotNull CraftTask internalTask;
 
     public ServerSchedulerReportingWrapper(CraftTask internalTask) {
         this.internalTask = Preconditions.checkNotNull(internalTask, "internalTask");
diff --git a/src/main/java/com/destroystokyo/paper/VersionHistoryManager.java b/src/main/java/com/destroystokyo/paper/VersionHistoryManager.java
index aac3f66cb23d260729c2a48d8710a9de2346aa22..92bf643a5795fabf462790af6fb459794d62046a 100644
--- a/src/main/java/com/destroystokyo/paper/VersionHistoryManager.java
+++ b/src/main/java/com/destroystokyo/paper/VersionHistoryManager.java
@@ -15,6 +15,7 @@ import java.util.Objects;
 import java.util.logging.Level;
 import java.util.logging.Logger;
 import org.bukkit.Bukkit;
+import org.jetbrains.annotations.NotNull;
 
 import javax.annotation.Nonnull;
 import javax.annotation.Nullable;
@@ -26,7 +27,7 @@ public enum VersionHistoryManager {
 
     private final Logger logger = Bukkit.getLogger();
 
-    private VersionData currentData = null;
+    private @org.jetbrains.annotations.Nullable VersionData currentData = null;
 
     VersionHistoryManager() {
         final Path path = Paths.get("version_history.json");
@@ -94,9 +95,9 @@ public enum VersionHistoryManager {
     }
 
     public static class VersionData {
-        private String oldVersion;
+        private @org.jetbrains.annotations.Nullable String oldVersion;
 
-        private String currentVersion;
+        private @org.jetbrains.annotations.Nullable String currentVersion;
 
         @Nullable
         public String getOldVersion() {
@@ -117,7 +118,7 @@ public enum VersionHistoryManager {
         }
 
         @Override
-        public String toString() {
+        public @NotNull String toString() {
             return MoreObjects.toStringHelper(this)
                 .add("oldVersion", oldVersion)
                 .add("currentVersion", currentVersion)
diff --git a/src/main/java/com/destroystokyo/paper/antixray/ChunkPacketBlockController.java b/src/main/java/com/destroystokyo/paper/antixray/ChunkPacketBlockController.java
index bd86dc2ad2f87969da4add06de2a629f69d4b5de..f8d566fa6458b57243cefdc69a271b4187e235f5 100644
--- a/src/main/java/com/destroystokyo/paper/antixray/ChunkPacketBlockController.java
+++ b/src/main/java/com/destroystokyo/paper/antixray/ChunkPacketBlockController.java
@@ -10,6 +10,9 @@ import net.minecraft.world.level.ChunkPos;
 import net.minecraft.world.level.Level;
 import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.world.level.chunk.LevelChunk;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 public class ChunkPacketBlockController {
 
@@ -19,7 +22,7 @@ public class ChunkPacketBlockController {
 
     }
 
-    public BlockState[] getPresetBlockStates(Level level, ChunkPos chunkPos, int bottomBlockY) {
+    public BlockState @Nullable [] getPresetBlockStates(Level level, ChunkPos chunkPos, int bottomBlockY) {
         return null;
     }
 
@@ -27,11 +30,11 @@ public class ChunkPacketBlockController {
         return false;
     }
 
-    public ChunkPacketInfo<BlockState> getChunkPacketInfo(ClientboundLevelChunkWithLightPacket chunkPacket, LevelChunk chunk) {
+    public @Nullable ChunkPacketInfo<BlockState> getChunkPacketInfo(ClientboundLevelChunkWithLightPacket chunkPacket, LevelChunk chunk) {
         return null;
     }
 
-    public void modifyBlocks(ClientboundLevelChunkWithLightPacket chunkPacket, ChunkPacketInfo<BlockState> chunkPacketInfo) {
+    public void modifyBlocks(@NotNull ClientboundLevelChunkWithLightPacket chunkPacket, ChunkPacketInfo<BlockState> chunkPacketInfo) {
         chunkPacket.setReady(true);
     }
 
diff --git a/src/main/java/com/destroystokyo/paper/antixray/ChunkPacketBlockControllerAntiXray.java b/src/main/java/com/destroystokyo/paper/antixray/ChunkPacketBlockControllerAntiXray.java
index 4f3670b2bdb8b1b252e9f074a6af56a018a8c465..3a164408b8d87915e360a88deda373c801bd29f0 100644
--- a/src/main/java/com/destroystokyo/paper/antixray/ChunkPacketBlockControllerAntiXray.java
+++ b/src/main/java/com/destroystokyo/paper/antixray/ChunkPacketBlockControllerAntiXray.java
@@ -22,6 +22,8 @@ import net.minecraft.world.level.block.EntityBlock;
 import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.world.level.chunk.*;
 import org.bukkit.Bukkit;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
 
 import java.util.*;
 import java.util.concurrent.Executor;
@@ -31,29 +33,29 @@ import java.util.function.IntSupplier;
 public final class ChunkPacketBlockControllerAntiXray extends ChunkPacketBlockController {
 
     private static final Palette<BlockState> GLOBAL_BLOCKSTATE_PALETTE = new GlobalPalette<>(Block.BLOCK_STATE_REGISTRY);
-    private static final LevelChunkSection EMPTY_SECTION = null;
+    private static final @Nullable LevelChunkSection EMPTY_SECTION = null;
     private final Executor executor;
-    private final EngineMode engineMode;
+    private final @NotNull EngineMode engineMode;
     private final int maxBlockHeight;
     private final int updateRadius;
     private final boolean usePermission;
-    private final BlockState[] presetBlockStates;
-    private final BlockState[] presetBlockStatesFull;
-    private final BlockState[] presetBlockStatesStone;
-    private final BlockState[] presetBlockStatesDeepslate;
-    private final BlockState[] presetBlockStatesNetherrack;
-    private final BlockState[] presetBlockStatesEndStone;
-    private final int[] presetBlockStateBitsGlobal;
-    private final int[] presetBlockStateBitsStoneGlobal;
-    private final int[] presetBlockStateBitsDeepslateGlobal;
-    private final int[] presetBlockStateBitsNetherrackGlobal;
-    private final int[] presetBlockStateBitsEndStoneGlobal;
+    private final BlockState @Nullable [] presetBlockStates;
+    private final BlockState @Nullable [] presetBlockStatesFull;
+    private final BlockState @Nullable [] presetBlockStatesStone;
+    private final BlockState @Nullable [] presetBlockStatesDeepslate;
+    private final BlockState @Nullable [] presetBlockStatesNetherrack;
+    private final BlockState @Nullable [] presetBlockStatesEndStone;
+    private final int @Nullable [] presetBlockStateBitsGlobal;
+    private final int @Nullable [] presetBlockStateBitsStoneGlobal;
+    private final int @Nullable [] presetBlockStateBitsDeepslateGlobal;
+    private final int @Nullable [] presetBlockStateBitsNetherrackGlobal;
+    private final int @Nullable [] presetBlockStateBitsEndStoneGlobal;
     private final boolean[] solidGlobal = new boolean[Block.BLOCK_STATE_REGISTRY.size()];
     private final boolean[] obfuscateGlobal = new boolean[Block.BLOCK_STATE_REGISTRY.size()];
     private final LevelChunkSection[] emptyNearbyChunkSections = {EMPTY_SECTION, EMPTY_SECTION, EMPTY_SECTION, EMPTY_SECTION};
     private final int maxBlockHeightUpdatePosition;
 
-    public ChunkPacketBlockControllerAntiXray(Level level, Executor executor) {
+    public ChunkPacketBlockControllerAntiXray(@NotNull Level level, Executor executor) {
         this.executor = executor;
         WorldConfiguration.Anticheat.AntiXray paperWorldConfig = level.paperConfig().anticheat.antiXray;
         engineMode = paperWorldConfig.engineMode;
@@ -144,7 +146,7 @@ public final class ChunkPacketBlockControllerAntiXray extends ChunkPacketBlockCo
     }
 
     @Override
-    public BlockState[] getPresetBlockStates(Level level, ChunkPos chunkPos, int bottomBlockY) {
+    public BlockState @Nullable [] getPresetBlockStates(@NotNull Level level, ChunkPos chunkPos, int bottomBlockY) {
         // Return the block states to be added to the paletted containers so that they can be used for obfuscation
         if (bottomBlockY < maxBlockHeight) {
             if (engineMode == EngineMode.HIDE) {
@@ -162,18 +164,18 @@ public final class ChunkPacketBlockControllerAntiXray extends ChunkPacketBlockCo
     }
 
     @Override
-    public boolean shouldModify(ServerPlayer player, LevelChunk chunk) {
+    public boolean shouldModify(@NotNull ServerPlayer player, LevelChunk chunk) {
         return !usePermission || !player.getBukkitEntity().hasPermission("paper.antixray.bypass");
     }
 
     @Override
-    public ChunkPacketInfoAntiXray getChunkPacketInfo(ClientboundLevelChunkWithLightPacket chunkPacket, LevelChunk chunk) {
+    public @NotNull ChunkPacketInfoAntiXray getChunkPacketInfo(ClientboundLevelChunkWithLightPacket chunkPacket, @NotNull LevelChunk chunk) {
         // Return a new instance to collect data and objects in the right state while creating the chunk packet for thread safe access later
         return new ChunkPacketInfoAntiXray(chunkPacket, chunk, this);
     }
 
     @Override
-    public void modifyBlocks(ClientboundLevelChunkWithLightPacket chunkPacket, ChunkPacketInfo<BlockState> chunkPacketInfo) {
+    public void modifyBlocks(@NotNull ClientboundLevelChunkWithLightPacket chunkPacket, ChunkPacketInfo<BlockState> chunkPacketInfo) {
         if (!(chunkPacketInfo instanceof ChunkPacketInfoAntiXray)) {
             chunkPacket.setReady(true);
             return;
@@ -203,7 +205,7 @@ public final class ChunkPacketBlockControllerAntiXray extends ChunkPacketBlockCo
     private static final ThreadLocal<boolean[][]> NEXT = ThreadLocal.withInitial(() -> new boolean[16][16]);
     private static final ThreadLocal<boolean[][]> NEXT_NEXT = ThreadLocal.withInitial(() -> new boolean[16][16]);
 
-    public void obfuscate(ChunkPacketInfoAntiXray chunkPacketInfoAntiXray) {
+    public void obfuscate(@NotNull ChunkPacketInfoAntiXray chunkPacketInfoAntiXray) {
         int[] presetBlockStateBits = this.presetBlockStateBits.get();
         boolean[] solid = SOLID.get();
         boolean[] obfuscate = OBFUSCATE.get();
@@ -351,7 +353,7 @@ public final class ChunkPacketBlockControllerAntiXray extends ChunkPacketBlockCo
         chunkPacketInfoAntiXray.getChunkPacket().setReady(true);
     }
 
-    private void obfuscateLayer(int y, BitStorageReader bitStorageReader, BitStorageWriter bitStorageWriter, boolean[] solid, boolean[] obfuscate, int[] presetBlockStateBits, boolean[][] current, boolean[][] next, boolean[][] nextNext, LevelChunkSection[] nearbyChunkSections, IntSupplier random) {
+    private void obfuscateLayer(int y, @NotNull BitStorageReader bitStorageReader, @NotNull BitStorageWriter bitStorageWriter, boolean @NotNull [] solid, boolean[] obfuscate, int[] presetBlockStateBits, boolean[][] current, boolean[][] next, boolean[] @NotNull [] nextNext, LevelChunkSection[] nearbyChunkSections, @NotNull IntSupplier random) {
         // First block of first line
         int bits = bitStorageReader.read();
 
@@ -539,7 +541,7 @@ public final class ChunkPacketBlockControllerAntiXray extends ChunkPacketBlockCo
         }
     }
 
-    private boolean isTransparent(LevelChunkSection chunkSection, int x, int y, int z) {
+    private boolean isTransparent(@NotNull LevelChunkSection chunkSection, int x, int y, int z) {
         if (chunkSection == EMPTY_SECTION) {
             return true;
         }
@@ -574,20 +576,20 @@ public final class ChunkPacketBlockControllerAntiXray extends ChunkPacketBlockCo
     }
 
     @Override
-    public void onBlockChange(Level level, BlockPos blockPos, BlockState newBlockState, BlockState oldBlockState, int flags, int maxUpdateDepth) {
+    public void onBlockChange(@NotNull Level level, @NotNull BlockPos blockPos, @NotNull BlockState newBlockState, @Nullable BlockState oldBlockState, int flags, int maxUpdateDepth) {
         if (oldBlockState != null && solidGlobal[GLOBAL_BLOCKSTATE_PALETTE.idFor(oldBlockState)] && !solidGlobal[GLOBAL_BLOCKSTATE_PALETTE.idFor(newBlockState)] && blockPos.getY() <= maxBlockHeightUpdatePosition) {
             updateNearbyBlocks(level, blockPos);
         }
     }
 
     @Override
-    public void onPlayerLeftClickBlock(ServerPlayerGameMode serverPlayerGameMode, BlockPos blockPos, ServerboundPlayerActionPacket.Action action, Direction direction, int worldHeight, int sequence) {
+    public void onPlayerLeftClickBlock(@NotNull ServerPlayerGameMode serverPlayerGameMode, @NotNull BlockPos blockPos, ServerboundPlayerActionPacket.Action action, Direction direction, int worldHeight, int sequence) {
         if (blockPos.getY() <= maxBlockHeightUpdatePosition) {
             updateNearbyBlocks(serverPlayerGameMode.level, blockPos);
         }
     }
 
-    private void updateNearbyBlocks(Level level, BlockPos blockPos) {
+    private void updateNearbyBlocks(@NotNull Level level, @NotNull BlockPos blockPos) {
         if (updateRadius >= 2) {
             BlockPos temp = blockPos.west();
             updateBlock(level, temp);
@@ -626,7 +628,7 @@ public final class ChunkPacketBlockControllerAntiXray extends ChunkPacketBlockCo
         }
     }
 
-    private void updateBlock(Level level, BlockPos blockPos) {
+    private void updateBlock(@NotNull Level level, @NotNull BlockPos blockPos) {
         BlockState blockState = level.getBlockStateIfLoaded(blockPos);
 
         if (blockState != null && obfuscateGlobal[GLOBAL_BLOCKSTATE_PALETTE.idFor(blockState)]) {
diff --git a/src/main/java/com/destroystokyo/paper/antixray/ChunkPacketInfo.java b/src/main/java/com/destroystokyo/paper/antixray/ChunkPacketInfo.java
index d98a3f5c54c67a673eb7dc456dd039cd78f9c34d..408604e794243d483eed3867eca7a327d44a0f92 100644
--- a/src/main/java/com/destroystokyo/paper/antixray/ChunkPacketInfo.java
+++ b/src/main/java/com/destroystokyo/paper/antixray/ChunkPacketInfo.java
@@ -3,18 +3,20 @@ package com.destroystokyo.paper.antixray;
 import net.minecraft.network.protocol.game.ClientboundLevelChunkWithLightPacket;
 import net.minecraft.world.level.chunk.LevelChunk;
 import net.minecraft.world.level.chunk.Palette;
+import org.jetbrains.annotations.NotNull;
+
 
 public class ChunkPacketInfo<T> {
 
     private final ClientboundLevelChunkWithLightPacket chunkPacket;
     private final LevelChunk chunk;
-    private final int[] bits;
-    private final Object[] palettes;
-    private final int[] indexes;
-    private final Object[][] presetValues;
+    private final int @NotNull [] bits;
+    private final Object @NotNull [] palettes;
+    private final int @NotNull [] indexes;
+    private final Object[] @NotNull [] presetValues;
     private byte[] buffer;
 
-    public ChunkPacketInfo(ClientboundLevelChunkWithLightPacket chunkPacket, LevelChunk chunk) {
+    public ChunkPacketInfo(ClientboundLevelChunkWithLightPacket chunkPacket, @NotNull LevelChunk chunk) {
         this.chunkPacket = chunkPacket;
         this.chunk = chunk;
         int sections = chunk.getSectionsCount();
diff --git a/src/main/java/com/destroystokyo/paper/antixray/ChunkPacketInfoAntiXray.java b/src/main/java/com/destroystokyo/paper/antixray/ChunkPacketInfoAntiXray.java
index 80a2dfb266ae1221680a7b24fee2f7e2a8330b7d..726f99f2cb657b1c25dbff8e2e0a4bfe6e890e5a 100644
--- a/src/main/java/com/destroystokyo/paper/antixray/ChunkPacketInfoAntiXray.java
+++ b/src/main/java/com/destroystokyo/paper/antixray/ChunkPacketInfoAntiXray.java
@@ -3,13 +3,15 @@ package com.destroystokyo.paper.antixray;
 import net.minecraft.network.protocol.game.ClientboundLevelChunkWithLightPacket;
 import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.world.level.chunk.LevelChunk;
+import org.jetbrains.annotations.NotNull;
+
 
 public final class ChunkPacketInfoAntiXray extends ChunkPacketInfo<BlockState> implements Runnable {
 
     private final ChunkPacketBlockControllerAntiXray chunkPacketBlockControllerAntiXray;
     private LevelChunk[] nearbyChunks;
 
-    public ChunkPacketInfoAntiXray(ClientboundLevelChunkWithLightPacket chunkPacket, LevelChunk chunk, ChunkPacketBlockControllerAntiXray chunkPacketBlockControllerAntiXray) {
+    public ChunkPacketInfoAntiXray(ClientboundLevelChunkWithLightPacket chunkPacket, @NotNull LevelChunk chunk, ChunkPacketBlockControllerAntiXray chunkPacketBlockControllerAntiXray) {
         super(chunkPacket, chunk);
         this.chunkPacketBlockControllerAntiXray = chunkPacketBlockControllerAntiXray;
     }
diff --git a/src/main/java/com/destroystokyo/paper/block/CraftBlockSoundGroup.java b/src/main/java/com/destroystokyo/paper/block/CraftBlockSoundGroup.java
index c5b07ec346105d1b95c1c938ffca12a21642040c..18c5bf37c9be5e18b7a8152cd31f914e6706240f 100644
--- a/src/main/java/com/destroystokyo/paper/block/CraftBlockSoundGroup.java
+++ b/src/main/java/com/destroystokyo/paper/block/CraftBlockSoundGroup.java
@@ -3,6 +3,8 @@ package com.destroystokyo.paper.block;
 import net.minecraft.world.level.block.SoundType;
 import org.bukkit.Sound;
 import org.bukkit.craftbukkit.CraftSound;
+import org.jetbrains.annotations.NotNull;
+
 
 @Deprecated(forRemoval = true)
 public class CraftBlockSoundGroup implements BlockSoundGroup {
@@ -13,27 +15,27 @@ public class CraftBlockSoundGroup implements BlockSoundGroup {
     }
 
     @Override
-    public Sound getBreakSound() {
+    public @NotNull Sound getBreakSound() {
         return CraftSound.getBukkit(soundEffectType.getBreakSound());
     }
 
     @Override
-    public Sound getStepSound() {
+    public @NotNull Sound getStepSound() {
         return CraftSound.getBukkit(soundEffectType.getStepSound());
     }
 
     @Override
-    public Sound getPlaceSound() {
+    public @NotNull Sound getPlaceSound() {
         return CraftSound.getBukkit(soundEffectType.getPlaceSound());
     }
 
     @Override
-    public Sound getHitSound() {
+    public @NotNull Sound getHitSound() {
         return CraftSound.getBukkit(soundEffectType.getHitSound());
     }
 
     @Override
-    public Sound getFallSound() {
+    public @NotNull Sound getFallSound() {
         return CraftSound.getBukkit(soundEffectType.getFallSound());
     }
 }
diff --git a/src/main/java/com/destroystokyo/paper/console/PaperConsole.java b/src/main/java/com/destroystokyo/paper/console/PaperConsole.java
index c5d5648f4ca603ef2b1df723b58f9caf4dd3c722..0b28a828fb0cb5ca2de9f5248ac413f578295602 100644
--- a/src/main/java/com/destroystokyo/paper/console/PaperConsole.java
+++ b/src/main/java/com/destroystokyo/paper/console/PaperConsole.java
@@ -3,6 +3,7 @@ package com.destroystokyo.paper.console;
 import net.minecraft.server.dedicated.DedicatedServer;
 import net.minecrell.terminalconsole.SimpleTerminalConsole;
 import org.bukkit.craftbukkit.command.ConsoleCommandCompleter;
+import org.jetbrains.annotations.NotNull;
 import org.jline.reader.LineReader;
 import org.jline.reader.LineReaderBuilder;
 
@@ -15,7 +16,7 @@ public final class PaperConsole extends SimpleTerminalConsole {
     }
 
     @Override
-    protected LineReader buildReader(LineReaderBuilder builder) {
+    protected LineReader buildReader(@NotNull LineReaderBuilder builder) {
         builder
                 .appName("Paper")
                 .variable(LineReader.HISTORY_FILE, java.nio.file.Paths.get(".console_history"))
@@ -33,7 +34,7 @@ public final class PaperConsole extends SimpleTerminalConsole {
     }
 
     @Override
-    protected void runCommand(String command) {
+    protected void runCommand(@NotNull String command) {
         this.server.handleConsoleInput(command, this.server.createCommandSourceStack());
     }
 
diff --git a/src/main/java/com/destroystokyo/paper/console/TerminalConsoleCommandSender.java b/src/main/java/com/destroystokyo/paper/console/TerminalConsoleCommandSender.java
index 8f07539a82f449ad217e316a7513a1708781fb63..ce6262f8accda27bf18353c8b8737be60ecd3b16 100644
--- a/src/main/java/com/destroystokyo/paper/console/TerminalConsoleCommandSender.java
+++ b/src/main/java/com/destroystokyo/paper/console/TerminalConsoleCommandSender.java
@@ -7,19 +7,21 @@ import net.kyori.adventure.text.logger.slf4j.ComponentLogger;
 import net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer;
 import org.apache.logging.log4j.LogManager;
 import org.bukkit.craftbukkit.command.CraftConsoleCommandSender;
+import org.jetbrains.annotations.NotNull;
+
 
 public class TerminalConsoleCommandSender extends CraftConsoleCommandSender {
 
     private static final ComponentLogger LOGGER = ComponentLogger.logger(LogManager.getRootLogger().getName());
 
     @Override
-    public void sendRawMessage(String message) {
+    public void sendRawMessage(@NotNull String message) {
         final Component msg = LegacyComponentSerializer.legacySection().deserialize(message);
         this.sendMessage(Identity.nil(), msg, MessageType.SYSTEM);
     }
 
     @Override
-    public void sendMessage(Identity identity, Component message, MessageType type) {
+    public void sendMessage(Identity identity, @NotNull Component message, MessageType type) {
         LOGGER.info(message);
     }
 
diff --git a/src/main/java/com/destroystokyo/paper/entity/CraftRangedEntity.java b/src/main/java/com/destroystokyo/paper/entity/CraftRangedEntity.java
index d7a8eb1b8f24ed2741ae9dae62d3f6146f273e1d..9c35391a1c07ac4d317e6907087cc420d354cf6f 100644
--- a/src/main/java/com/destroystokyo/paper/entity/CraftRangedEntity.java
+++ b/src/main/java/com/destroystokyo/paper/entity/CraftRangedEntity.java
@@ -4,12 +4,14 @@ import net.minecraft.world.entity.Mob;
 import net.minecraft.world.entity.monster.RangedAttackMob;
 import org.bukkit.craftbukkit.entity.CraftLivingEntity;
 import org.bukkit.entity.LivingEntity;
+import org.jetbrains.annotations.NotNull;
+
 
 public interface CraftRangedEntity<T extends Mob & RangedAttackMob> extends RangedEntity {
     T getHandle();
 
     @Override
-    default void rangedAttack(LivingEntity target, float charge) {
+    default void rangedAttack(@NotNull LivingEntity target, float charge) {
         getHandle().performRangedAttack(((CraftLivingEntity) target).getHandle(), charge);
     }
 
diff --git a/src/main/java/com/destroystokyo/paper/entity/PaperPathfinder.java b/src/main/java/com/destroystokyo/paper/entity/PaperPathfinder.java
index 2d799fec40afe7dade649a294761d272c83157f0..61d97ba9c2b70f98971803635a5eafa824720ae0 100644
--- a/src/main/java/com/destroystokyo/paper/entity/PaperPathfinder.java
+++ b/src/main/java/com/destroystokyo/paper/entity/PaperPathfinder.java
@@ -9,6 +9,8 @@ import javax.annotation.Nonnull;
 import javax.annotation.Nullable;
 import net.minecraft.world.level.pathfinder.Node;
 import net.minecraft.world.level.pathfinder.Path;
+import org.jetbrains.annotations.NotNull;
+
 import java.util.ArrayList;
 import java.util.List;
 
@@ -21,7 +23,7 @@ public class PaperPathfinder implements com.destroystokyo.paper.entity.Pathfinde
     }
 
     @Override
-    public Mob getEntity() {
+    public @NotNull Mob getEntity() {
         return entity.getBukkitMob();
     }
 
@@ -48,7 +50,7 @@ public class PaperPathfinder implements com.destroystokyo.paper.entity.Pathfinde
 
     @Nullable
     @Override
-    public PathResult findPath(Location loc) {
+    public PathResult findPath(@NotNull Location loc) {
         Validate.notNull(loc, "Location can not be null");
         Path path = entity.getNavigation().createPath(loc.getX(), loc.getY(), loc.getZ(), 0);
         return path != null ? new PaperPathResult(path) : null;
@@ -56,7 +58,7 @@ public class PaperPathfinder implements com.destroystokyo.paper.entity.Pathfinde
 
     @Nullable
     @Override
-    public PathResult findPath(LivingEntity target) {
+    public PathResult findPath(@NotNull LivingEntity target) {
         Validate.notNull(target, "Target can not be null");
         Path path = entity.getNavigation().createPath(((CraftLivingEntity) target).getHandle(), 0);
         return path != null ? new PaperPathResult(path) : null;
@@ -114,7 +116,7 @@ public class PaperPathfinder implements com.destroystokyo.paper.entity.Pathfinde
         }
 
         @Override
-        public List<Location> getPoints() {
+        public @NotNull List<Location> getPoints() {
             List<Location> points = new ArrayList<>();
             for (Node point : path.nodes) {
                 points.add(toLoc(point));
@@ -137,7 +139,7 @@ public class PaperPathfinder implements com.destroystokyo.paper.entity.Pathfinde
         }
     }
 
-    private Location toLoc(Node point) {
+    private @NotNull Location toLoc(@NotNull Node point) {
         return new Location(entity.level.getWorld(), point.x, point.y, point.z);
     }
 }
diff --git a/src/main/java/com/destroystokyo/paper/entity/ai/MobGoalHelper.java b/src/main/java/com/destroystokyo/paper/entity/ai/MobGoalHelper.java
index ed74f2b90afaa43ae66fbd4797d23cfac9ea9e88..a66c25aefc8cc2b5dae120982f2ea52449228bf6 100644
--- a/src/main/java/com/destroystokyo/paper/entity/ai/MobGoalHelper.java
+++ b/src/main/java/com/destroystokyo/paper/entity/ai/MobGoalHelper.java
@@ -124,6 +124,8 @@ import org.bukkit.entity.Zoglin;
 import org.bukkit.entity.Zombie;
 import org.bukkit.entity.ZombieHorse;
 import org.bukkit.entity.ZombieVillager;
+import org.jetbrains.annotations.NotNull;
+
 
 public class MobGoalHelper {
 
@@ -245,7 +247,7 @@ public class MobGoalHelper {
         bukkitMap.put(net.minecraft.world.entity.animal.allay.Allay.class, org.bukkit.entity.Allay.class);
     }
 
-    public static String getUsableName(Class<?> clazz) {
+    public static String getUsableName(@NotNull Class<?> clazz) {
         String name = ObfHelper.INSTANCE.deobfClassName(clazz.getName());
         name = name.substring(name.lastIndexOf(".") + 1);
         boolean flag = false;
@@ -284,7 +286,7 @@ public class MobGoalHelper {
         return deobfuscationMap.getOrDefault(name, name);
     }
 
-    public static EnumSet<GoalType> vanillaToPaper(OptimizedSmallEnumSet<Goal.Flag> types) {
+    public static @NotNull EnumSet<GoalType> vanillaToPaper(@NotNull OptimizedSmallEnumSet<Goal.Flag> types) {
         EnumSet<GoalType> goals = EnumSet.noneOf(GoalType.class);
         for (GoalType type : GoalType.values()) {
             if (types.hasElement(paperToVanilla(type))) {
@@ -294,7 +296,7 @@ public class MobGoalHelper {
         return goals;
     }
 
-    public static GoalType vanillaToPaper(Goal.Flag type) {
+    public static @NotNull GoalType vanillaToPaper(Goal.@NotNull Flag type) {
         switch (type) {
             case MOVE:
                 return GoalType.MOVE;
@@ -311,7 +313,7 @@ public class MobGoalHelper {
         }
     }
 
-    public static EnumSet<Goal.Flag> paperToVanilla(EnumSet<GoalType> types) {
+    public static @NotNull EnumSet<Goal.Flag> paperToVanilla(@NotNull EnumSet<GoalType> types) {
         EnumSet<Goal.Flag> goals = EnumSet.noneOf(Goal.Flag.class);
         for (GoalType type : types) {
             goals.add(paperToVanilla(type));
@@ -319,7 +321,7 @@ public class MobGoalHelper {
         return goals;
     }
 
-    public static Goal.Flag paperToVanilla(GoalType type) {
+    public static Goal.@NotNull Flag paperToVanilla(@NotNull GoalType type) {
         switch (type) {
             case MOVE:
                 return Goal.Flag.MOVE;
@@ -336,7 +338,7 @@ public class MobGoalHelper {
         }
     }
 
-    public static <T extends Mob> GoalKey<T> getKey(Class<? extends Goal> goalClass) {
+    public static <T extends Mob> @NotNull GoalKey<T> getKey(@NotNull Class<? extends Goal> goalClass) {
         String name = getUsableName(goalClass);
         if (ignored.contains(name)) {
             //noinspection unchecked
@@ -345,7 +347,7 @@ public class MobGoalHelper {
         return GoalKey.of(getEntity(goalClass), NamespacedKey.minecraft(name));
     }
 
-    public static <T extends Mob> Class<T> getEntity(Class<? extends Goal> goalClass) {
+    public static <T extends Mob> @NotNull Class<T> getEntity(Class<? extends Goal> goalClass) {
         //noinspection unchecked
         return (Class<T>) entityClassCache.computeIfAbsent(goalClass, key -> {
             for (Constructor<?> ctor : key.getDeclaredConstructors()) {
@@ -363,7 +365,7 @@ public class MobGoalHelper {
         });
     }
 
-    public static Class<? extends Mob> toBukkitClass(Class<? extends net.minecraft.world.entity.Mob> nmsClass) {
+    public static @NotNull Class<? extends Mob> toBukkitClass(Class<? extends net.minecraft.world.entity.Mob> nmsClass) {
         Class<? extends Mob> bukkitClass = bukkitMap.get(nmsClass);
         if (bukkitClass == null) {
             throw new RuntimeException("Can't figure out applicable bukkit entity for nms entity " + nmsClass); // maybe just return Mob?
diff --git a/src/main/java/com/destroystokyo/paper/entity/ai/PaperCustomGoal.java b/src/main/java/com/destroystokyo/paper/entity/ai/PaperCustomGoal.java
index 26c745dd9ccdfdd5c5039f2acc5201b9b91fb274..6826c2ab35baf623aa28aa21cf66da54e4345597 100644
--- a/src/main/java/com/destroystokyo/paper/entity/ai/PaperCustomGoal.java
+++ b/src/main/java/com/destroystokyo/paper/entity/ai/PaperCustomGoal.java
@@ -1,6 +1,8 @@
 package com.destroystokyo.paper.entity.ai;
 
 import org.bukkit.entity.Mob;
+import org.jetbrains.annotations.NotNull;
+
 
 /**
  * Wraps api in vanilla
@@ -9,7 +11,7 @@ public class PaperCustomGoal<T extends Mob> extends net.minecraft.world.entity.a
 
     private final Goal<T> handle;
 
-    public PaperCustomGoal(Goal<T> handle) {
+    public PaperCustomGoal(@NotNull Goal<T> handle) {
         this.handle = handle;
 
         this.setFlags(MobGoalHelper.paperToVanilla(handle.getTypes()));
@@ -47,7 +49,7 @@ public class PaperCustomGoal<T extends Mob> extends net.minecraft.world.entity.a
         return handle;
     }
 
-    public GoalKey<T> getKey() {
+    public @NotNull GoalKey<T> getKey() {
         return handle.getKey();
     }
 }
diff --git a/src/main/java/com/destroystokyo/paper/entity/ai/PaperMobGoals.java b/src/main/java/com/destroystokyo/paper/entity/ai/PaperMobGoals.java
index 5e7b4a8698a00f72d6e817cc7c6716e7605a3484..6b1344578e41ee496d66cb31223fef3e4e66b5bb 100644
--- a/src/main/java/com/destroystokyo/paper/entity/ai/PaperMobGoals.java
+++ b/src/main/java/com/destroystokyo/paper/entity/ai/PaperMobGoals.java
@@ -10,11 +10,13 @@ import net.minecraft.world.entity.ai.goal.GoalSelector;
 import net.minecraft.world.entity.ai.goal.WrappedGoal;
 import org.bukkit.craftbukkit.entity.CraftMob;
 import org.bukkit.entity.Mob;
+import org.jetbrains.annotations.NotNull;
+
 
 public class PaperMobGoals implements MobGoals {
 
     @Override
-    public <T extends Mob> void addGoal(T mob, int priority, Goal<T> goal) {
+    public <T extends Mob> void addGoal(T mob, int priority, @NotNull Goal<T> goal) {
         CraftMob craftMob = (CraftMob) mob;
         getHandle(craftMob, goal.getTypes()).addGoal(priority, new PaperCustomGoal<>(goal));
     }
@@ -51,7 +53,7 @@ public class PaperMobGoals implements MobGoals {
     }
 
     @Override
-    public <T extends Mob> void removeAllGoals(T mob, GoalType type) {
+    public <T extends Mob> void removeAllGoals(T mob, @NotNull GoalType type) {
         for (Goal<T> goal : getAllGoals(mob, type)) {
             removeGoal(mob, goal);
         }
@@ -85,7 +87,7 @@ public class PaperMobGoals implements MobGoals {
     }
 
     @Override
-    public <T extends Mob> Collection<Goal<T>> getGoals(T mob, GoalKey<T> key) {
+    public <T extends Mob> @NotNull Collection<Goal<T>> getGoals(T mob, GoalKey<T> key) {
         Set<Goal<T>> goals = new HashSet<>();
         for (Goal<T> g : getAllGoals(mob)) {
             if (g.getKey().equals(key)) {
@@ -96,7 +98,7 @@ public class PaperMobGoals implements MobGoals {
     }
 
     @Override
-    public <T extends Mob> Collection<Goal<T>> getAllGoals(T mob) {
+    public <T extends Mob> @NotNull Collection<Goal<T>> getAllGoals(T mob) {
         Set<Goal<T>> goals = new HashSet<>();
         for (GoalType type : GoalType.values()) {
             goals.addAll(getAllGoals(mob, type));
@@ -105,7 +107,7 @@ public class PaperMobGoals implements MobGoals {
     }
 
     @Override
-    public <T extends Mob> Collection<Goal<T>> getAllGoals(T mob, GoalType type) {
+    public <T extends Mob> @NotNull Collection<Goal<T>> getAllGoals(T mob, @NotNull GoalType type) {
         CraftMob craftMob = (CraftMob) mob;
         Set<Goal<T>> goals = new HashSet<>();
         for (WrappedGoal item : getHandle(craftMob, type).getAvailableGoals()) {
@@ -124,7 +126,7 @@ public class PaperMobGoals implements MobGoals {
     }
 
     @Override
-    public <T extends Mob> Collection<Goal<T>> getAllGoalsWithout(T mob, GoalType type) {
+    public <T extends Mob> @NotNull Collection<Goal<T>> getAllGoalsWithout(T mob, @NotNull GoalType type) {
         CraftMob craftMob = (CraftMob) mob;
         Set<Goal<T>> goals = new HashSet<>();
         for (GoalType internalType : GoalType.values()) {
@@ -148,7 +150,7 @@ public class PaperMobGoals implements MobGoals {
     }
 
     @Override
-    public <T extends Mob> Collection<Goal<T>> getRunningGoals(T mob) {
+    public <T extends Mob> @NotNull Collection<Goal<T>> getRunningGoals(T mob) {
         Set<Goal<T>> goals = new HashSet<>();
         for (GoalType type : GoalType.values()) {
             goals.addAll(getRunningGoals(mob, type));
@@ -157,7 +159,7 @@ public class PaperMobGoals implements MobGoals {
     }
 
     @Override
-    public <T extends Mob> Collection<Goal<T>> getRunningGoals(T mob, GoalType type) {
+    public <T extends Mob> @NotNull Collection<Goal<T>> getRunningGoals(T mob, @NotNull GoalType type) {
         CraftMob craftMob = (CraftMob) mob;
         Set<Goal<T>> goals = new HashSet<>();
         getHandle(craftMob, type).getRunningGoals()
@@ -174,7 +176,7 @@ public class PaperMobGoals implements MobGoals {
     }
 
     @Override
-    public <T extends Mob> Collection<Goal<T>> getRunningGoalsWithout(T mob, GoalType type) {
+    public <T extends Mob> @NotNull Collection<Goal<T>> getRunningGoalsWithout(T mob, @NotNull GoalType type) {
         CraftMob craftMob = (CraftMob) mob;
         Set<Goal<T>> goals = new HashSet<>();
         for (GoalType internalType : GoalType.values()) {
@@ -195,7 +197,7 @@ public class PaperMobGoals implements MobGoals {
         return goals;
     }
 
-    private GoalSelector getHandle(CraftMob mob, EnumSet<GoalType> types) {
+    private @NotNull GoalSelector getHandle(@NotNull CraftMob mob, @NotNull EnumSet<GoalType> types) {
         if (types.contains(GoalType.TARGET)) {
             return mob.getHandle().targetSelector;
         } else {
@@ -203,7 +205,7 @@ public class PaperMobGoals implements MobGoals {
         }
     }
 
-    private GoalSelector getHandle(CraftMob mob, GoalType type) {
+    private @NotNull GoalSelector getHandle(@NotNull CraftMob mob, GoalType type) {
         if (type == GoalType.TARGET) {
             return mob.getHandle().targetSelector;
         } else {
diff --git a/src/main/java/com/destroystokyo/paper/entity/ai/PaperVanillaGoal.java b/src/main/java/com/destroystokyo/paper/entity/ai/PaperVanillaGoal.java
index 0d30e0b21b9024df939a9d070bd4a99b217e7c12..aded99dc535d1e52883be665767a1f3ed0b696d6 100644
--- a/src/main/java/com/destroystokyo/paper/entity/ai/PaperVanillaGoal.java
+++ b/src/main/java/com/destroystokyo/paper/entity/ai/PaperVanillaGoal.java
@@ -3,6 +3,8 @@ package com.destroystokyo.paper.entity.ai;
 import java.util.EnumSet;
 import net.minecraft.world.entity.ai.goal.Goal;
 import org.bukkit.entity.Mob;
+import org.jetbrains.annotations.NotNull;
+
 
 /**
  * Wraps vanilla in api
@@ -10,11 +12,11 @@ import org.bukkit.entity.Mob;
 public class PaperVanillaGoal<T extends Mob> implements VanillaGoal<T> {
 
     private final Goal handle;
-    private final GoalKey<T> key;
+    private final @NotNull GoalKey<T> key;
 
-    private final EnumSet<GoalType> types;
+    private final @NotNull EnumSet<GoalType> types;
 
-    public PaperVanillaGoal(Goal handle) {
+    public PaperVanillaGoal(@NotNull Goal handle) {
         this.handle = handle;
         this.key = MobGoalHelper.getKey(handle.getClass());
         this.types = MobGoalHelper.vanillaToPaper(handle.getFlags());
@@ -50,12 +52,12 @@ public class PaperVanillaGoal<T extends Mob> implements VanillaGoal<T> {
     }
 
     @Override
-    public GoalKey<T> getKey() {
+    public @NotNull GoalKey<T> getKey() {
         return key;
     }
 
     @Override
-    public EnumSet<GoalType> getTypes() {
+    public @NotNull EnumSet<GoalType> getTypes() {
         return types;
     }
 }
diff --git a/src/main/java/com/destroystokyo/paper/gui/GraphColor.java b/src/main/java/com/destroystokyo/paper/gui/GraphColor.java
index a4e641fdcccd3efcd1a2865dc6dc28d50671b995..7b86ef2d58e2534309ab4c33d1e26407bbef2ad3 100644
--- a/src/main/java/com/destroystokyo/paper/gui/GraphColor.java
+++ b/src/main/java/com/destroystokyo/paper/gui/GraphColor.java
@@ -1,5 +1,7 @@
 package com.destroystokyo.paper.gui;
 
+import org.jetbrains.annotations.NotNull;
+
 import java.awt.Color;
 
 public class GraphColor {
@@ -22,7 +24,7 @@ public class GraphColor {
         return colorFill[percent];
     }
 
-    private static Color createColor(int percent) {
+    private static @NotNull Color createColor(int percent) {
         if (percent <= 50) {
             return new Color(0X00FF00);
         }
diff --git a/src/main/java/com/destroystokyo/paper/gui/GuiStatsComponent.java b/src/main/java/com/destroystokyo/paper/gui/GuiStatsComponent.java
index 537bc6213545e8ff1b7b51bc4b27fd5b2a740883..82b7d2b91bd1c46aef427c7f4e049ab2bb9b15e9 100644
--- a/src/main/java/com/destroystokyo/paper/gui/GuiStatsComponent.java
+++ b/src/main/java/com/destroystokyo/paper/gui/GuiStatsComponent.java
@@ -1,6 +1,7 @@
 package com.destroystokyo.paper.gui;
 
 import net.minecraft.server.MinecraftServer;
+import org.jetbrains.annotations.NotNull;
 
 import javax.swing.JPanel;
 import javax.swing.Timer;
@@ -8,8 +9,8 @@ import java.awt.BorderLayout;
 import java.awt.Dimension;
 
 public class GuiStatsComponent extends JPanel {
-    private final Timer timer;
-    private final RAMGraph ramGraph;
+    private final @NotNull Timer timer;
+    private final @NotNull RAMGraph ramGraph;
 
     public GuiStatsComponent(MinecraftServer server) {
         super(new BorderLayout());
@@ -30,7 +31,7 @@ public class GuiStatsComponent extends JPanel {
     }
 
     @Override
-    public Dimension getPreferredSize() {
+    public @NotNull Dimension getPreferredSize() {
         return new Dimension(350, 200);
     }
 
diff --git a/src/main/java/com/destroystokyo/paper/gui/RAMDetails.java b/src/main/java/com/destroystokyo/paper/gui/RAMDetails.java
index fa56cd09102a89692b42f1d14257990508c5c720..3df549e4c45b889553ded2ac9bf8a176339626c2 100644
--- a/src/main/java/com/destroystokyo/paper/gui/RAMDetails.java
+++ b/src/main/java/com/destroystokyo/paper/gui/RAMDetails.java
@@ -2,6 +2,7 @@ package com.destroystokyo.paper.gui;
 
 import net.minecraft.Util;
 import net.minecraft.server.MinecraftServer;
+import org.jetbrains.annotations.NotNull;
 
 import javax.swing.DefaultListCellRenderer;
 import javax.swing.DefaultListSelectionModel;
@@ -50,7 +51,7 @@ public class RAMDetails extends JList<String> {
     }
 
     @Override
-    public Dimension getPreferredSize() {
+    public @NotNull Dimension getPreferredSize() {
         return new Dimension(350, 100);
     }
 
@@ -72,7 +73,7 @@ public class RAMDetails extends JList<String> {
         setListData(vector);
     }
 
-    public double getAverage(long[] tickTimes) {
+    public double getAverage(long @NotNull [] tickTimes) {
         long total = 0L;
         for (long value : tickTimes) {
             total += value;
@@ -80,7 +81,7 @@ public class RAMDetails extends JList<String> {
         return ((double) total / (double) tickTimes.length) * 1.0E-6D;
     }
 
-    private static String format(double tps) {
+    private static @NotNull String format(double tps) {
         return ( ( tps > 21.0 ) ? "*" : "" ) + Math.min( Math.round( tps * 100.0 ) / 100.0, 20.0 );
     }
 }
diff --git a/src/main/java/com/destroystokyo/paper/gui/RAMGraph.java b/src/main/java/com/destroystokyo/paper/gui/RAMGraph.java
index c3e54da4ab6440811aab2f9dd1e218802ac13285..acf90999c0d63f2dbc2a1eed3bd8d06f252acae2 100644
--- a/src/main/java/com/destroystokyo/paper/gui/RAMGraph.java
+++ b/src/main/java/com/destroystokyo/paper/gui/RAMGraph.java
@@ -1,5 +1,7 @@
 package com.destroystokyo.paper.gui;
 
+import org.jetbrains.annotations.NotNull;
+
 import javax.swing.JComponent;
 import javax.swing.SwingUtilities;
 import javax.swing.Timer;
@@ -35,7 +37,7 @@ public class RAMGraph extends JComponent {
         }
     }
 
-    private final Timer timer;
+    private final @NotNull Timer timer;
     private final SimpleDateFormat TIME_FORMAT = new SimpleDateFormat("HH:mm:ss");
 
     private int currentTick;
@@ -63,7 +65,7 @@ public class RAMGraph extends JComponent {
     }
 
     @Override
-    public Dimension getPreferredSize() {
+    public @NotNull Dimension getPreferredSize() {
         return new Dimension(350, 110);
     }
 
@@ -89,7 +91,7 @@ public class RAMGraph extends JComponent {
     }
 
     @Override
-    public void paint(Graphics graphics) {
+    public void paint(@NotNull Graphics graphics) {
         graphics.setColor(new Color(0xFFFFFFFF));
         graphics.fillRect(0, 0, 350, 100);
 
@@ -133,7 +135,7 @@ public class RAMGraph extends JComponent {
         }
     }
 
-    public String getTime(int halfSeconds) {
+    public @NotNull String getTime(int halfSeconds) {
         int millis = (348 - halfSeconds) / 2 * 1000;
         return TIME_FORMAT.format(new Date((System.currentTimeMillis() - millis)));
     }
diff --git a/src/main/java/com/destroystokyo/paper/io/IOUtil.java b/src/main/java/com/destroystokyo/paper/io/IOUtil.java
index e064f96c90afd1a4890060baa055cfd0469b6a6f..2354797f04c8208719ae0dcdc254ec693800ec2d 100644
--- a/src/main/java/com/destroystokyo/paper/io/IOUtil.java
+++ b/src/main/java/com/destroystokyo/paper/io/IOUtil.java
@@ -1,6 +1,9 @@
 package com.destroystokyo.paper.io;
 
 import org.bukkit.Bukkit;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 @Deprecated(forRemoval = true)
 public final class IOUtil {
@@ -27,18 +30,18 @@ public final class IOUtil {
         return chunkCoordinate & 31;
     }
 
-    public static String genericToString(final Object object) {
+    public static @NotNull String genericToString(final @Nullable Object object) {
         return object == null ? "null" : object.getClass().getName() + ":" + object.toString();
     }
 
-    public static <T> T notNull(final T obj) {
+    public static <T> @NotNull T notNull(final @Nullable T obj) {
         if (obj == null) {
             throw new NullPointerException();
         }
         return obj;
     }
 
-    public static <T> T notNull(final T obj, final String msgIfNull) {
+    public static <T> @NotNull T notNull(final @Nullable T obj, final String msgIfNull) {
         if (obj == null) {
             throw new NullPointerException(msgIfNull);
         }
diff --git a/src/main/java/com/destroystokyo/paper/io/PaperFileIOThread.java b/src/main/java/com/destroystokyo/paper/io/PaperFileIOThread.java
index f2c27e0ac65be4b75c1d86ef6fd45fdb538d96ac..e36b6b841773de81aa3511180ea8aa5b04b6398e 100644
--- a/src/main/java/com/destroystokyo/paper/io/PaperFileIOThread.java
+++ b/src/main/java/com/destroystokyo/paper/io/PaperFileIOThread.java
@@ -5,6 +5,7 @@ import net.minecraft.nbt.CompoundTag;
 import net.minecraft.server.level.ServerLevel;
 import net.minecraft.world.level.ChunkPos;
 import net.minecraft.world.level.chunk.storage.RegionFile;
+import org.jetbrains.annotations.NotNull;
 import org.slf4j.Logger;
 
 import java.io.IOException;
@@ -57,7 +58,7 @@ public final class PaperFileIOThread extends QueueExecutorThread {
         super(new PrioritizedTaskQueue<>(), (int)(1.0e6)); // 1.0ms spinwait time
         this.setName("Paper RegionFile IO Thread");
         this.setPriority(Thread.NORM_PRIORITY - 1); // we keep priority close to normal because threads can wait on us
-        this.setUncaughtExceptionHandler((final Thread unused, final Throwable thr) -> {
+        this.setUncaughtExceptionHandler((final @NotNull Thread unused, final @NotNull Throwable thr) -> {
             LOGGER.error("Uncaught exception thrown from IO thread, report this!", thr);
         });
     }
@@ -94,7 +95,7 @@ public final class PaperFileIOThread extends QueueExecutorThread {
         throw new IllegalStateException("Shouldn't get here, use RegionFileIOThread"); // Paper - rewrite chunk system, fail hard on usage
     }
 
-    public CompoundTag getPendingWrite(final ServerLevel world, final int chunkX, final int chunkZ, final boolean poiData) {
+    public CompoundTag getPendingWrite(final @NotNull ServerLevel world, final int chunkX, final int chunkZ, final boolean poiData) {
         // Paper start - rewrite chunk system
         return io.papermc.paper.chunk.system.io.RegionFileIOThread.getPendingWrite(
             world, chunkX, chunkZ, poiData ? io.papermc.paper.chunk.system.io.RegionFileIOThread.RegionFileType.POI_DATA :
@@ -154,9 +155,9 @@ public final class PaperFileIOThread extends QueueExecutorThread {
      *     Note that if the chunk fails to load the returned future is completed with {@code null}.
      * </p>
      */
-    public CompletableFuture<ChunkData> loadChunkDataAsyncFuture(final ServerLevel world, final int chunkX, final int chunkZ,
-                                                                 final int priority, final boolean readPoiData, final boolean readChunkData,
-                                                                 final boolean intendingToBlock) {
+    public @NotNull CompletableFuture<ChunkData> loadChunkDataAsyncFuture(final @NotNull ServerLevel world, final int chunkX, final int chunkZ,
+                                                                          final int priority, final boolean readPoiData, final boolean readChunkData,
+                                                                          final boolean intendingToBlock) {
         final CompletableFuture<ChunkData> future = new CompletableFuture<>();
         this.loadChunkDataAsync(world, chunkX, chunkZ, priority, future::complete, readPoiData, readChunkData, intendingToBlock);
         return future;
@@ -189,8 +190,8 @@ public final class PaperFileIOThread extends QueueExecutorThread {
      * @return The {@link PrioritizedTaskQueue.PrioritizedTask} associated with this task. Note that this task does not support
      *                                                          cancellation.
      */
-    public void loadChunkDataAsync(final ServerLevel world, final int chunkX, final int chunkZ,
-                                   final int priority, final Consumer<ChunkData> onComplete,
+    public void loadChunkDataAsync(final @NotNull ServerLevel world, final int chunkX, final int chunkZ,
+                                   final int priority, final @NotNull Consumer<ChunkData> onComplete,
                                    final boolean readPoiData, final boolean readChunkData,
                                    final boolean intendingToBlock) {
         if (!PrioritizedTaskQueue.validPriority(priority)) {
@@ -256,7 +257,7 @@ public final class PaperFileIOThread extends QueueExecutorThread {
      * the {@link ChunkData} associated with the specified chunk when the task is complete.
      * @return The chunk data, or {@code null} if the chunk failed to load.
      */
-    public ChunkData loadChunkData(final ServerLevel world, final int chunkX, final int chunkZ, final int priority,
+    public ChunkData loadChunkData(final @NotNull ServerLevel world, final int chunkX, final int chunkZ, final int priority,
                                    final boolean readPoiData, final boolean readChunkData) {
         return this.loadChunkDataAsyncFuture(world, chunkX, chunkZ, priority, readPoiData, readChunkData, true).join();
     }
@@ -273,7 +274,7 @@ public final class PaperFileIOThread extends QueueExecutorThread {
 
     static final class GeneralTask extends PrioritizedTaskQueue.PrioritizedTask implements Runnable {
 
-        private final Runnable run;
+        private final @NotNull Runnable run;
 
         public GeneralTask(final int priority, final Runnable run) {
             super(priority);
@@ -346,7 +347,7 @@ public final class PaperFileIOThread extends QueueExecutorThread {
         }
 
         @Override
-        public String toString() {
+        public @NotNull String toString() {
             return "Task for world: '" + this.world.getWorld().getName() + "' at " + this.x + "," + this.z +
                 " poi: " + (this.taskController == null) + ", hash: " + this.hashCode(); // Paper - TODO rewrite chunk system
         }
@@ -400,7 +401,7 @@ public final class PaperFileIOThread extends QueueExecutorThread {
 
             if (write == null) {
                 // IntelliJ warns this is invalid, however it does not consider that writes to the task map & the inProgress field can occur concurrently.
-                ChunkDataTask inMap = this.taskController.tasks.compute(chunkKey, (final Long keyInMap, final ChunkDataTask valueInMap) -> {
+                ChunkDataTask inMap = this.taskController.tasks.compute(chunkKey, (final @NotNull Long keyInMap, final @NotNull ChunkDataTask valueInMap) -> {
                     if (valueInMap == null) {
                         throw new IllegalStateException("Write completed concurrently, expected this task: " + ChunkDataTask.this.toString() + ", report this!");
                     }
@@ -442,7 +443,7 @@ public final class PaperFileIOThread extends QueueExecutorThread {
 
                 boolean finalFailWrite = failedWrite;
 
-                ChunkDataTask inMap = this.taskController.tasks.compute(chunkKey, (final Long keyInMap, final ChunkDataTask valueInMap) -> {
+                ChunkDataTask inMap = this.taskController.tasks.compute(chunkKey, (final @NotNull Long keyInMap, final @NotNull ChunkDataTask valueInMap) -> {
                     if (valueInMap == null) {
                         throw new IllegalStateException("Write completed concurrently, expected this task: " + ChunkDataTask.this.toString() + ", report this!");
                     }
diff --git a/src/main/java/com/destroystokyo/paper/io/PrioritizedTaskQueue.java b/src/main/java/com/destroystokyo/paper/io/PrioritizedTaskQueue.java
index 7844a3515430472bd829ff246396bceb0797de1b..c9c31da9a47f0ebaa818e215f927bda0dbd401b0 100644
--- a/src/main/java/com/destroystokyo/paper/io/PrioritizedTaskQueue.java
+++ b/src/main/java/com/destroystokyo/paper/io/PrioritizedTaskQueue.java
@@ -1,5 +1,8 @@
 package com.destroystokyo.paper.io;
 
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 import java.util.concurrent.ConcurrentLinkedQueue;
 import java.util.concurrent.atomic.AtomicBoolean;
 import java.util.concurrent.atomic.AtomicInteger;
@@ -72,7 +75,7 @@ public class PrioritizedTaskQueue<T extends PrioritizedTaskQueue.PrioritizedTask
      *                               raise a task's priority.
      *                               This can also be thrown if the queue has shutdown.
      */
-    public void add(final T task) throws IllegalStateException {
+    public void add(final @NotNull T task) throws IllegalStateException {
         int priority = task.getPriority();
         if (priority != COMPLETING_PRIORITY) {
             task.setQueue(this);
@@ -87,7 +90,7 @@ public class PrioritizedTaskQueue<T extends PrioritizedTaskQueue.PrioritizedTask
     /**
      * Polls the highest priority task currently available. {@code null} if none.
      */
-    public T poll() {
+    public @Nullable T poll() {
         T task;
         for (int i = 0; i < TOTAL_PRIORITIES; ++i) {
             final ConcurrentLinkedQueue<T> queue = this.queues[i];
@@ -107,7 +110,7 @@ public class PrioritizedTaskQueue<T extends PrioritizedTaskQueue.PrioritizedTask
     /**
      * Polls the highest priority task currently available. {@code null} if none.
      */
-    public T poll(final int lowestPriority) {
+    public @Nullable T poll(final int lowestPriority) {
         T task;
         final int max = Math.min(LOWEST_PRIORITY, lowestPriority);
         for (int i = 0; i <= max; ++i) {
@@ -162,7 +165,7 @@ public class PrioritizedTaskQueue<T extends PrioritizedTaskQueue.PrioritizedTask
 
         protected final AtomicReference<PrioritizedTaskQueue> queue = new AtomicReference<>();
 
-        protected final AtomicInteger priority;
+        protected final @NotNull AtomicInteger priority;
 
         protected PrioritizedTask() {
             this(PrioritizedTaskQueue.NORMAL_PRIORITY);
diff --git a/src/main/java/com/destroystokyo/paper/io/QueueExecutorThread.java b/src/main/java/com/destroystokyo/paper/io/QueueExecutorThread.java
index 99f49b5625cf51d6c97640553cf5c420bb6fdd36..00901bf8dd3c05a2c51997a66e8959ac6582ef2d 100644
--- a/src/main/java/com/destroystokyo/paper/io/QueueExecutorThread.java
+++ b/src/main/java/com/destroystokyo/paper/io/QueueExecutorThread.java
@@ -1,6 +1,8 @@
 package com.destroystokyo.paper.io;
 
 import com.mojang.logging.LogUtils;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
 import org.slf4j.Logger;
 
 import java.util.concurrent.ConcurrentLinkedQueue;
@@ -19,7 +21,7 @@ public class QueueExecutorThread<T extends PrioritizedTaskQueue.PrioritizedTask
 
     protected final AtomicBoolean parked = new AtomicBoolean();
 
-    protected volatile ConcurrentLinkedQueue<Thread> flushQueue = new ConcurrentLinkedQueue<>();
+    protected volatile @Nullable ConcurrentLinkedQueue<Thread> flushQueue = new ConcurrentLinkedQueue<>();
     protected volatile long flushCycles;
 
     protected int lowestPriorityToPoll = PrioritizedTaskQueue.LOWEST_PRIORITY;
@@ -164,7 +166,7 @@ public class QueueExecutorThread<T extends PrioritizedTaskQueue.PrioritizedTask
         return false;
     }
 
-    protected void queueTask(final T task) {
+    protected void queueTask(final @NotNull T task) {
         this.queue.add(task);
         this.notifyTasks();
     }
diff --git a/src/main/java/com/destroystokyo/paper/io/SyncLoadFinder.java b/src/main/java/com/destroystokyo/paper/io/SyncLoadFinder.java
index d3e619655382e50e9ac9323ed942502d85c9599c..f7d4ffbdf1b04155a052a389fea4347affaf7f1e 100644
--- a/src/main/java/com/destroystokyo/paper/io/SyncLoadFinder.java
+++ b/src/main/java/com/destroystokyo/paper/io/SyncLoadFinder.java
@@ -12,6 +12,9 @@ import java.util.List;
 import java.util.Map;
 import java.util.WeakHashMap;
 import net.minecraft.world.level.Level;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 public class SyncLoadFinder {
 
@@ -37,7 +40,7 @@ public class SyncLoadFinder {
 
         final ThrowableWithEquals stacktrace = new ThrowableWithEquals(Thread.currentThread().getStackTrace());
 
-        SYNC_LOADS.compute(world, (final Level keyInMap, Object2ObjectOpenHashMap<ThrowableWithEquals, SyncLoadInformation> map) -> {
+        SYNC_LOADS.compute(world, (final @NotNull Level keyInMap, Object2ObjectOpenHashMap<ThrowableWithEquals, SyncLoadInformation> map) -> {
             if (map == null) {
                 map = new Object2ObjectOpenHashMap<>();
             }
@@ -60,7 +63,7 @@ public class SyncLoadFinder {
         });
     }
 
-    public static JsonObject serialize() {
+    public static @NotNull JsonObject serialize() {
         final JsonObject ret = new JsonObject();
 
         final JsonArray worldsData = new JsonArray();
@@ -125,12 +128,12 @@ public class SyncLoadFinder {
         private final StackTraceElement[] stacktrace;
         private final int hash;
 
-        public ThrowableWithEquals(final StackTraceElement[] stacktrace) {
+        public ThrowableWithEquals(final StackTraceElement @NotNull [] stacktrace) {
             this.stacktrace = stacktrace;
             this.hash = ThrowableWithEquals.hash(stacktrace);
         }
 
-        public static int hash(final StackTraceElement[] stacktrace) {
+        public static int hash(final StackTraceElement @NotNull [] stacktrace) {
             int hash = 0;
 
             for (int i = 0; i < stacktrace.length; ++i) {
@@ -147,7 +150,7 @@ public class SyncLoadFinder {
         }
 
         @Override
-        public boolean equals(final Object obj) {
+        public boolean equals(final @Nullable Object obj) {
             if (obj == null || obj.getClass() != this.getClass()) {
                 return false;
             }
diff --git a/src/main/java/com/destroystokyo/paper/loottable/PaperContainerEntityLootableInventory.java b/src/main/java/com/destroystokyo/paper/loottable/PaperContainerEntityLootableInventory.java
index d4a8c1bbb8fef27ac42bdf27dde495b4c649e6cb..bbfddd7aa30b3167e8fc28d48f62920bd082284e 100644
--- a/src/main/java/com/destroystokyo/paper/loottable/PaperContainerEntityLootableInventory.java
+++ b/src/main/java/com/destroystokyo/paper/loottable/PaperContainerEntityLootableInventory.java
@@ -6,6 +6,9 @@ import net.minecraft.world.entity.vehicle.ContainerEntity;
 import net.minecraft.world.level.Level;
 import org.bukkit.Bukkit;
 import org.bukkit.craftbukkit.util.CraftNamespacedKey;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 public class PaperContainerEntityLootableInventory implements PaperLootableEntityInventory {
 
@@ -37,27 +40,27 @@ public class PaperContainerEntityLootableInventory implements PaperLootableEntit
     }
 
     @Override
-    public void setLootTable(org.bukkit.loot.LootTable table) {
+    public void setLootTable(org.bukkit.loot.@Nullable LootTable table) {
         entity.setLootTable((table == null) ? null : CraftNamespacedKey.toMinecraft(table.getKey()));
     }
 
     @Override
-    public PaperLootableInventoryData getLootableData() {
+    public @NotNull PaperLootableInventoryData getLootableData() {
         return entity.getLootableData();
     }
 
     @Override
-    public Entity getHandle() {
+    public @NotNull Entity getHandle() {
         return entity.getEntity();
     }
 
     @Override
-    public LootableInventory getAPILootableInventory() {
+    public @NotNull LootableInventory getAPILootableInventory() {
         return (LootableInventory) entity.getEntity().getBukkitEntity();
     }
 
     @Override
-    public Level getNMSWorld() {
+    public @NotNull Level getNMSWorld() {
         return entity.getLevel();
     }
 }
diff --git a/src/main/java/com/destroystokyo/paper/loottable/PaperLootableBlockInventory.java b/src/main/java/com/destroystokyo/paper/loottable/PaperLootableBlockInventory.java
index 70ca5625ff5d13a8e9cd64953066a7e1547ff223..d6b2f66cbd474a6e6675fa4dca4344ccfca6563b 100644
--- a/src/main/java/com/destroystokyo/paper/loottable/PaperLootableBlockInventory.java
+++ b/src/main/java/com/destroystokyo/paper/loottable/PaperLootableBlockInventory.java
@@ -5,6 +5,9 @@ import net.minecraft.world.level.Level;
 import net.minecraft.world.level.block.entity.RandomizableContainerBlockEntity;
 import org.bukkit.Chunk;
 import org.bukkit.block.Block;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 public interface PaperLootableBlockInventory extends LootableBlockInventory, PaperLootableInventory {
 
@@ -16,11 +19,11 @@ public interface PaperLootableBlockInventory extends LootableBlockInventory, Pap
     }
 
     @Override
-    default Level getNMSWorld() {
+    default @Nullable Level getNMSWorld() {
         return getTileEntity().getLevel();
     }
 
-    default Block getBlock() {
+    default @NotNull Block getBlock() {
         final BlockPos position = getTileEntity().getBlockPos();
         final Chunk bukkitChunk = getTileEntity().getLevel().getChunkAt(position).bukkitChunk;
         return bukkitChunk.getBlock(position.getX(), position.getY(), position.getZ());
diff --git a/src/main/java/com/destroystokyo/paper/loottable/PaperLootableEntityInventory.java b/src/main/java/com/destroystokyo/paper/loottable/PaperLootableEntityInventory.java
index 2fba5bc0f982e143ad5f5bda55d768edc5f847df..4f18e1a129fd5f8214de81674c11ffc51af6ee45 100644
--- a/src/main/java/com/destroystokyo/paper/loottable/PaperLootableEntityInventory.java
+++ b/src/main/java/com/destroystokyo/paper/loottable/PaperLootableEntityInventory.java
@@ -2,6 +2,8 @@ package com.destroystokyo.paper.loottable;
 
 import net.minecraft.world.level.Level;
 import org.bukkit.entity.Entity;
+import org.jetbrains.annotations.NotNull;
+
 
 public interface PaperLootableEntityInventory extends LootableEntityInventory, PaperLootableInventory {
 
@@ -12,7 +14,7 @@ public interface PaperLootableEntityInventory extends LootableEntityInventory, P
         return this;
     }
 
-    default Entity getEntity() {
+    default @NotNull Entity getEntity() {
         return getHandle().getBukkitEntity();
     }
 
diff --git a/src/main/java/com/destroystokyo/paper/loottable/PaperLootableInventory.java b/src/main/java/com/destroystokyo/paper/loottable/PaperLootableInventory.java
index ce135d990c785b02df468391ea622aa236290f07..a960d71cf26a0aa59d15155a4dd717680a942cca 100644
--- a/src/main/java/com/destroystokyo/paper/loottable/PaperLootableInventory.java
+++ b/src/main/java/com/destroystokyo/paper/loottable/PaperLootableInventory.java
@@ -3,6 +3,8 @@ package com.destroystokyo.paper.loottable;
 import org.bukkit.loot.Lootable;
 import java.util.UUID;
 import net.minecraft.world.level.Level;
+import org.jetbrains.annotations.NotNull;
+
 
 public interface PaperLootableInventory extends LootableInventory, Lootable {
 
@@ -11,7 +13,7 @@ public interface PaperLootableInventory extends LootableInventory, Lootable {
 
     Level getNMSWorld();
 
-    default org.bukkit.World getBukkitWorld() {
+    default org.bukkit.@NotNull World getBukkitWorld() {
         return getNMSWorld().getWorld();
     }
 
diff --git a/src/main/java/com/destroystokyo/paper/loottable/PaperLootableInventoryData.java b/src/main/java/com/destroystokyo/paper/loottable/PaperLootableInventoryData.java
index e5ea9f27a1936ed9e329e74317c91c5df89b9fbd..36ce68947a359a8f3a914577789c8895733f6098 100644
--- a/src/main/java/com/destroystokyo/paper/loottable/PaperLootableInventoryData.java
+++ b/src/main/java/com/destroystokyo/paper/loottable/PaperLootableInventoryData.java
@@ -6,6 +6,8 @@ import org.bukkit.loot.LootTable;
 import javax.annotation.Nullable;
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.nbt.ListTag;
+import org.jetbrains.annotations.NotNull;
+
 import java.util.HashMap;
 import java.util.Map;
 import java.util.Random;
@@ -102,7 +104,7 @@ public class PaperLootableInventoryData {
     }
 
 
-    public void loadNbt(CompoundTag base) {
+    public void loadNbt(@NotNull CompoundTag base) {
         if (!base.contains("Paper.LootableData", 10)) { // 10 = compound
             return;
         }
@@ -129,7 +131,7 @@ public class PaperLootableInventoryData {
             }
         }
     }
-    public void saveNbt(CompoundTag base) {
+    public void saveNbt(@NotNull CompoundTag base) {
         CompoundTag comp = new CompoundTag();
         if (this.nextRefill != -1) {
             comp.putLong("nextRefill", this.nextRefill);
@@ -173,7 +175,7 @@ public class PaperLootableInventoryData {
         return this.lootedPlayers != null && this.lootedPlayers.containsKey(player);
     }
 
-    Long getLastLooted(UUID player) {
+    @org.jetbrains.annotations.Nullable Long getLastLooted(UUID player) {
         return lootedPlayers != null ? lootedPlayers.get(player) : null;
     }
 }
diff --git a/src/main/java/com/destroystokyo/paper/loottable/PaperTileEntityLootableInventory.java b/src/main/java/com/destroystokyo/paper/loottable/PaperTileEntityLootableInventory.java
index 2ee4ee14ab3345486dad6b24fd9a4fcc6c746b99..281ed982657222dc767e3ae977e35148a1b1c478 100644
--- a/src/main/java/com/destroystokyo/paper/loottable/PaperTileEntityLootableInventory.java
+++ b/src/main/java/com/destroystokyo/paper/loottable/PaperTileEntityLootableInventory.java
@@ -5,6 +5,9 @@ import net.minecraft.world.level.Level;
 import net.minecraft.world.level.block.entity.RandomizableContainerBlockEntity;
 import org.bukkit.Bukkit;
 import org.bukkit.craftbukkit.util.CraftNamespacedKey;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 public class PaperTileEntityLootableInventory implements PaperLootableBlockInventory {
     private RandomizableContainerBlockEntity tileEntityLootable;
@@ -25,7 +28,7 @@ public class PaperTileEntityLootableInventory implements PaperLootableBlockInven
     }
 
     @Override
-    public void setLootTable(org.bukkit.loot.LootTable table) {
+    public void setLootTable(org.bukkit.loot.@Nullable LootTable table) {
         tileEntityLootable.lootTable = (table == null) ? null : CraftNamespacedKey.toMinecraft(table.getKey());
     }
 
@@ -40,7 +43,7 @@ public class PaperTileEntityLootableInventory implements PaperLootableBlockInven
     }
 
     @Override
-    public PaperLootableInventoryData getLootableData() {
+    public @NotNull PaperLootableInventoryData getLootableData() {
         return tileEntityLootable.lootableData;
     }
 
@@ -50,7 +53,7 @@ public class PaperTileEntityLootableInventory implements PaperLootableBlockInven
     }
 
     @Override
-    public LootableInventory getAPILootableInventory() {
+    public @Nullable LootableInventory getAPILootableInventory() {
         Level world = tileEntityLootable.getLevel();
         if (world == null) {
             return null;
@@ -59,7 +62,7 @@ public class PaperTileEntityLootableInventory implements PaperLootableBlockInven
     }
 
     @Override
-    public Level getNMSWorld() {
+    public @Nullable Level getNMSWorld() {
         return tileEntityLootable.getLevel();
     }
 }
diff --git a/src/main/java/com/destroystokyo/paper/network/PaperLegacyStatusClient.java b/src/main/java/com/destroystokyo/paper/network/PaperLegacyStatusClient.java
index 74c012fd40491f1d870fbc1aa8c318a2197eb106..ab890fe6ab93af80a0bd7a0a69bd93986ed2a5fa 100644
--- a/src/main/java/com/destroystokyo/paper/network/PaperLegacyStatusClient.java
+++ b/src/main/java/com/destroystokyo/paper/network/PaperLegacyStatusClient.java
@@ -4,6 +4,7 @@ import com.destroystokyo.paper.event.server.PaperServerListPingEvent;
 import net.minecraft.server.MinecraftServer;
 import org.apache.commons.lang3.StringUtils;
 import org.bukkit.ChatColor;
+import org.jetbrains.annotations.NotNull;
 
 import java.net.InetSocketAddress;
 
@@ -22,7 +23,7 @@ public final class PaperLegacyStatusClient implements StatusClient {
     }
 
     @Override
-    public InetSocketAddress getAddress() {
+    public @NotNull InetSocketAddress getAddress() {
         return this.address;
     }
 
@@ -42,8 +43,8 @@ public final class PaperLegacyStatusClient implements StatusClient {
         return true;
     }
 
-    public static PaperServerListPingEvent processRequest(MinecraftServer server,
-            InetSocketAddress address, int protocolVersion, @Nullable InetSocketAddress virtualHost) {
+    public static @org.jetbrains.annotations.Nullable PaperServerListPingEvent processRequest(@NotNull MinecraftServer server,
+                                                                                              InetSocketAddress address, int protocolVersion, @Nullable InetSocketAddress virtualHost) {
 
         PaperServerListPingEvent event =  new PaperServerListPingEventImpl(server,
                 new PaperLegacyStatusClient(address, protocolVersion, virtualHost), Byte.MAX_VALUE, null);
@@ -56,16 +57,16 @@ public final class PaperLegacyStatusClient implements StatusClient {
         return event;
     }
 
-    public static String getMotd(PaperServerListPingEvent event) {
+    public static @NotNull String getMotd(@NotNull PaperServerListPingEvent event) {
         return getFirstLine(event.getMotd());
     }
 
-    public static String getUnformattedMotd(PaperServerListPingEvent event) {
+    public static @NotNull String getUnformattedMotd(@NotNull PaperServerListPingEvent event) {
         // Strip color codes and all other occurrences of the color char (because it's used as delimiter)
         return getFirstLine(StringUtils.remove(ChatColor.stripColor(event.getMotd()), ChatColor.COLOR_CHAR));
     }
 
-    private static String getFirstLine(String s) {
+    private static @NotNull String getFirstLine(@NotNull String s) {
         int pos = s.indexOf('\n');
         return pos >= 0 ? s.substring(0, pos) : s;
     }
diff --git a/src/main/java/com/destroystokyo/paper/network/PaperNetworkClient.java b/src/main/java/com/destroystokyo/paper/network/PaperNetworkClient.java
index a5a7624f1f372a26b982836cd31cff15e2589e9b..2953503ac736d1ae6bb32f15393f3bc70d5c1ec8 100644
--- a/src/main/java/com/destroystokyo/paper/network/PaperNetworkClient.java
+++ b/src/main/java/com/destroystokyo/paper/network/PaperNetworkClient.java
@@ -4,6 +4,8 @@ import java.net.InetSocketAddress;
 
 import javax.annotation.Nullable;
 import net.minecraft.network.Connection;
+import org.jetbrains.annotations.NotNull;
+
 
 public class PaperNetworkClient implements NetworkClient {
 
@@ -14,7 +16,7 @@ public class PaperNetworkClient implements NetworkClient {
     }
 
     @Override
-    public InetSocketAddress getAddress() {
+    public @NotNull InetSocketAddress getAddress() {
         return (InetSocketAddress) this.networkManager.getRemoteAddress();
     }
 
@@ -29,7 +31,7 @@ public class PaperNetworkClient implements NetworkClient {
         return this.networkManager.virtualHost;
     }
 
-    public static InetSocketAddress prepareVirtualHost(String host, int port) {
+    public static @NotNull InetSocketAddress prepareVirtualHost(@NotNull String host, int port) {
         int len = host.length();
 
         // FML appends a marker to the host to recognize FML clients (\0FML\0)
diff --git a/src/main/java/com/destroystokyo/paper/network/PaperServerListPingEventImpl.java b/src/main/java/com/destroystokyo/paper/network/PaperServerListPingEventImpl.java
index 5d7110a33957a597592cacb864c947eb053e8563..7f102fdd1d72ec03b92b314d41d097205d047a73 100644
--- a/src/main/java/com/destroystokyo/paper/network/PaperServerListPingEventImpl.java
+++ b/src/main/java/com/destroystokyo/paper/network/PaperServerListPingEventImpl.java
@@ -5,26 +5,27 @@ import net.minecraft.server.MinecraftServer;
 import net.minecraft.server.level.ServerPlayer;
 import org.bukkit.entity.Player;
 import org.bukkit.util.CachedServerIcon;
+import org.jetbrains.annotations.NotNull;
 
 import javax.annotation.Nullable;
 
 class PaperServerListPingEventImpl extends PaperServerListPingEvent {
 
-    private final MinecraftServer server;
+    private final @NotNull MinecraftServer server;
 
-    PaperServerListPingEventImpl(MinecraftServer server, StatusClient client, int protocolVersion, @Nullable CachedServerIcon icon) {
+    PaperServerListPingEventImpl(@NotNull MinecraftServer server, @NotNull StatusClient client, int protocolVersion, @Nullable CachedServerIcon icon) {
         super(client, server.server.motd(), server.getPlayerCount(), server.getMaxPlayers(),
                 server.getServerModName() + ' ' + server.getServerVersion(), protocolVersion, icon);
         this.server = server;
     }
 
     @Override
-    protected final Object[] getOnlinePlayers() {
+    protected final Object @NotNull [] getOnlinePlayers() {
         return this.server.getPlayerList().players.toArray();
     }
 
     @Override
-    protected final Player getBukkitPlayer(Object player) {
+    protected final @NotNull Player getBukkitPlayer(@NotNull Object player) {
         return ((ServerPlayer) player).getBukkitEntity();
     }
 
diff --git a/src/main/java/com/destroystokyo/paper/network/StandardPaperServerListPingEventImpl.java b/src/main/java/com/destroystokyo/paper/network/StandardPaperServerListPingEventImpl.java
index 4c2351b03b58511b80017b58ee9b20ab5193adc9..6c95ac2a55bf0d59b69ac3fb49b6a27f1c95b119 100644
--- a/src/main/java/com/destroystokyo/paper/network/StandardPaperServerListPingEventImpl.java
+++ b/src/main/java/com/destroystokyo/paper/network/StandardPaperServerListPingEventImpl.java
@@ -13,15 +13,18 @@ import net.minecraft.network.Connection;
 import net.minecraft.network.protocol.status.ClientboundStatusResponsePacket;
 import net.minecraft.network.protocol.status.ServerStatus;
 import net.minecraft.server.MinecraftServer;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 public final class StandardPaperServerListPingEventImpl extends PaperServerListPingEventImpl {
 
     private static final GameProfile[] EMPTY_PROFILES = new GameProfile[0];
     private static final UUID FAKE_UUID = new UUID(0, 0);
 
-    private GameProfile[] originalSample;
+    private GameProfile @Nullable [] originalSample;
 
-    private StandardPaperServerListPingEventImpl(MinecraftServer server, Connection networkManager, ServerStatus ping) {
+    private StandardPaperServerListPingEventImpl(@NotNull MinecraftServer server, Connection networkManager, @NotNull ServerStatus ping) {
         super(server, new PaperStatusClient(networkManager), ping.getVersion() != null ? ping.getVersion().getProtocol() : -1, server.server.getServerIcon());
         this.originalSample = ping.getPlayers() == null ? null : ping.getPlayers().getSample(); // GH-1473 - pre-tick race condition NPE
     }
@@ -73,7 +76,7 @@ public final class StandardPaperServerListPingEventImpl extends PaperServerListP
     }
 
     @SuppressWarnings("deprecation")
-    public static void processRequest(MinecraftServer server, Connection networkManager) {
+    public static void processRequest(@NotNull MinecraftServer server, @NotNull Connection networkManager) {
         StandardPaperServerListPingEventImpl event = new StandardPaperServerListPingEventImpl(server, networkManager, server.getStatus());
         server.server.getPluginManager().callEvent(event);
 
diff --git a/src/main/java/com/destroystokyo/paper/profile/CraftPlayerProfile.java b/src/main/java/com/destroystokyo/paper/profile/CraftPlayerProfile.java
index 3ff790cec1ad89caec4be64421dd7d51652be598..c2e2217af82d5ae172326164d5ba35fbc21b8543 100644
--- a/src/main/java/com/destroystokyo/paper/profile/CraftPlayerProfile.java
+++ b/src/main/java/com/destroystokyo/paper/profile/CraftPlayerProfile.java
@@ -29,7 +29,7 @@ public class CraftPlayerProfile implements PlayerProfile, SharedPlayerProfile {
     private GameProfile profile;
     private final PropertySet properties = new PropertySet();
 
-    public CraftPlayerProfile(CraftPlayer player) {
+    public CraftPlayerProfile(@NotNull CraftPlayer player) {
         this.profile = player.getHandle().getGameProfile();
     }
 
@@ -48,7 +48,7 @@ public class CraftPlayerProfile implements PlayerProfile, SharedPlayerProfile {
     }
 
     @Override
-    public void setProperty(ProfileProperty property) {
+    public void setProperty(@NotNull ProfileProperty property) {
         String name = property.getName();
         PropertyMap properties = profile.getProperties();
         properties.removeAll(name);
@@ -56,7 +56,7 @@ public class CraftPlayerProfile implements PlayerProfile, SharedPlayerProfile {
     }
 
     @Override
-    public CraftPlayerTextures getTextures() {
+    public @NotNull CraftPlayerTextures getTextures() {
         return new CraftPlayerTextures(this);
     }
 
@@ -103,7 +103,7 @@ public class CraftPlayerProfile implements PlayerProfile, SharedPlayerProfile {
 
     @Override
     @Deprecated(forRemoval = true)
-    public String setName(@Nullable String name) {
+    public @NotNull String setName(@Nullable String name) {
         GameProfile prev = this.profile;
         this.profile = new GameProfile(prev.getId(), name);
         copyProfileProperties(prev, this.profile);
@@ -117,7 +117,7 @@ public class CraftPlayerProfile implements PlayerProfile, SharedPlayerProfile {
     }
 
     @Override
-    public void setProperties(Collection<ProfileProperty> properties) {
+    public void setProperties(@NotNull Collection<ProfileProperty> properties) {
         properties.forEach(this::setProperty);
     }
 
@@ -155,7 +155,7 @@ public class CraftPlayerProfile implements PlayerProfile, SharedPlayerProfile {
     }
 
     @Override
-    public CraftPlayerProfile clone() {
+    public @NotNull CraftPlayerProfile clone() {
         CraftPlayerProfile clone = new CraftPlayerProfile(this.getId(), this.getName());
         clone.setProperties(getProperties());
         return clone;
@@ -237,11 +237,11 @@ public class CraftPlayerProfile implements PlayerProfile, SharedPlayerProfile {
         return profile.isComplete() && (!onlineMode || !textures || hasTextures());
     }
 
-    private static void copyProfileProperties(GameProfile source, GameProfile target) {
+    private static void copyProfileProperties(@NotNull GameProfile source, @NotNull GameProfile target) {
         copyProfileProperties(source, target, false);
     }
 
-    private static void copyProfileProperties(GameProfile source, GameProfile target, boolean clearTarget) {
+    private static void copyProfileProperties(@NotNull GameProfile source, @NotNull GameProfile target, boolean clearTarget) {
         PropertyMap sourceProperties = source.getProperties();
         PropertyMap targetProperties = target.getProperties();
         if (clearTarget) targetProperties.clear();
@@ -255,21 +255,21 @@ public class CraftPlayerProfile implements PlayerProfile, SharedPlayerProfile {
         }
     }
 
-    private static ProfileProperty toBukkit(Property property) {
+    private static @NotNull ProfileProperty toBukkit(@NotNull Property property) {
         return new ProfileProperty(property.getName(), property.getValue(), property.getSignature());
     }
 
-    public static PlayerProfile asBukkitCopy(GameProfile gameProfile) {
+    public static @NotNull PlayerProfile asBukkitCopy(@NotNull GameProfile gameProfile) {
         CraftPlayerProfile profile = new CraftPlayerProfile(gameProfile.getId(), gameProfile.getName());
         copyProfileProperties(gameProfile, profile.profile);
         return profile;
     }
 
-    public static PlayerProfile asBukkitMirror(GameProfile profile) {
+    public static @NotNull PlayerProfile asBukkitMirror(GameProfile profile) {
         return new CraftPlayerProfile(profile);
     }
 
-    public static Property asAuthlib(ProfileProperty property) {
+    public static @NotNull Property asAuthlib(@NotNull ProfileProperty property) {
         return new Property(property.getName(), property.getValue(), property.getSignature());
     }
 
@@ -302,7 +302,7 @@ public class CraftPlayerProfile implements PlayerProfile, SharedPlayerProfile {
         return map;
     }
 
-    public static CraftPlayerProfile deserialize(Map<String, Object> map) {
+    public static @NotNull CraftPlayerProfile deserialize(@NotNull Map<String, Object> map) {
         UUID uniqueId = ConfigSerializationUtil.getUuid(map, "uniqueId", true);
         String name = ConfigSerializationUtil.getString(map, "name", true);
 
@@ -330,7 +330,7 @@ public class CraftPlayerProfile implements PlayerProfile, SharedPlayerProfile {
     }
 
     @Override
-    public String toString() {
+    public @NotNull String toString() {
         return "CraftPlayerProfile [uniqueId=" + getId() +
             ", name=" + getName() +
             ", properties=" + org.bukkit.craftbukkit.profile.CraftPlayerProfile.toString(this.profile.getProperties()) +
@@ -356,7 +356,7 @@ public class CraftPlayerProfile implements PlayerProfile, SharedPlayerProfile {
         }
 
         @Override
-        public boolean add(ProfileProperty property) {
+        public boolean add(@NotNull ProfileProperty property) {
             setProperty(property);
             return true;
         }
@@ -386,7 +386,7 @@ public class CraftPlayerProfile implements PlayerProfile, SharedPlayerProfile {
             }
 
             @Override
-            public ProfileProperty next() {
+            public @NotNull ProfileProperty next() {
                 return toBukkit(iterator.next());
             }
 
diff --git a/src/main/java/com/destroystokyo/paper/profile/PaperAuthenticationService.java b/src/main/java/com/destroystokyo/paper/profile/PaperAuthenticationService.java
index 1459a1f99fe614d072a087cda18788cf13102645..da9ab6010d808052cbdda599388a4439d4551b5f 100644
--- a/src/main/java/com/destroystokyo/paper/profile/PaperAuthenticationService.java
+++ b/src/main/java/com/destroystokyo/paper/profile/PaperAuthenticationService.java
@@ -4,28 +4,29 @@ import com.mojang.authlib.*;
 import com.mojang.authlib.minecraft.MinecraftSessionService;
 import com.mojang.authlib.yggdrasil.YggdrasilAuthenticationService;
 import com.mojang.authlib.yggdrasil.YggdrasilEnvironment;
+import org.jetbrains.annotations.NotNull;
 
 import java.net.Proxy;
 
 public class PaperAuthenticationService extends YggdrasilAuthenticationService {
     private final Environment environment;
-    public PaperAuthenticationService(Proxy proxy) {
+    public PaperAuthenticationService(@NotNull Proxy proxy) {
         super(proxy);
         this.environment = EnvironmentParser.getEnvironmentFromProperties().orElse(YggdrasilEnvironment.PROD.getEnvironment());
     }
 
     @Override
-    public UserAuthentication createUserAuthentication(Agent agent) {
+    public @NotNull UserAuthentication createUserAuthentication(Agent agent) {
         return new PaperUserAuthentication(this, agent);
     }
 
     @Override
-    public MinecraftSessionService createMinecraftSessionService() {
+    public @NotNull MinecraftSessionService createMinecraftSessionService() {
         return new PaperMinecraftSessionService(this, this.environment);
     }
 
     @Override
-    public GameProfileRepository createProfileRepository() {
+    public @NotNull GameProfileRepository createProfileRepository() {
         return new PaperGameProfileRepository(this, this.environment);
     }
 }
diff --git a/src/main/java/com/destroystokyo/paper/profile/PaperGameProfileRepository.java b/src/main/java/com/destroystokyo/paper/profile/PaperGameProfileRepository.java
index 08fdb681a68e8be6e4062af0630957ce3e524806..66e4d57e84fede46e6b893d3bbd9ded871f1ed3c 100644
--- a/src/main/java/com/destroystokyo/paper/profile/PaperGameProfileRepository.java
+++ b/src/main/java/com/destroystokyo/paper/profile/PaperGameProfileRepository.java
@@ -9,15 +9,16 @@ import com.mojang.authlib.GameProfile;
 import com.mojang.authlib.ProfileLookupCallback;
 import com.mojang.authlib.yggdrasil.YggdrasilAuthenticationService;
 import com.mojang.authlib.yggdrasil.YggdrasilGameProfileRepository;
+import org.jetbrains.annotations.NotNull;
 
 import java.util.Set;
 public class PaperGameProfileRepository extends YggdrasilGameProfileRepository {
-    public PaperGameProfileRepository(YggdrasilAuthenticationService authenticationService, Environment environment) {
+    public PaperGameProfileRepository(YggdrasilAuthenticationService authenticationService, @NotNull Environment environment) {
         super(authenticationService, environment);
     }
 
     @Override
-    public void findProfilesByNames(String[] names, Agent agent, ProfileLookupCallback callback) {
+    public void findProfilesByNames(String @NotNull [] names, @NotNull Agent agent, @NotNull ProfileLookupCallback callback) {
         Set<String> unfoundNames = Sets.newHashSet();
         for (String name : names) {
             PreLookupProfileEvent event = new PreLookupProfileEvent(name);
diff --git a/src/main/java/com/destroystokyo/paper/profile/PaperMinecraftSessionService.java b/src/main/java/com/destroystokyo/paper/profile/PaperMinecraftSessionService.java
index 5c7d2ee19243d0911a3a00af3ae42078a2ccba94..77dcd5578ef3a0037b75673cb9df60bf37b7c6de 100644
--- a/src/main/java/com/destroystokyo/paper/profile/PaperMinecraftSessionService.java
+++ b/src/main/java/com/destroystokyo/paper/profile/PaperMinecraftSessionService.java
@@ -7,11 +7,12 @@ import com.mojang.authlib.GameProfile;
 import com.mojang.authlib.minecraft.MinecraftProfileTexture;
 import com.mojang.authlib.yggdrasil.YggdrasilAuthenticationService;
 import com.mojang.authlib.yggdrasil.YggdrasilMinecraftSessionService;
+import org.jetbrains.annotations.NotNull;
 
 import java.util.Map;
 
 public class PaperMinecraftSessionService extends YggdrasilMinecraftSessionService {
-    protected PaperMinecraftSessionService(YggdrasilAuthenticationService authenticationService, Environment environment) {
+    protected PaperMinecraftSessionService(YggdrasilAuthenticationService authenticationService, @NotNull Environment environment) {
         super(authenticationService, environment);
     }
 
diff --git a/src/main/java/com/destroystokyo/paper/profile/PaperUserAuthentication.java b/src/main/java/com/destroystokyo/paper/profile/PaperUserAuthentication.java
index 3cdd06d3af7ff94f1fe1a11b9a9275e17c695a38..5562888a2f582edd94b9d2e7b0277f30982b2f04 100644
--- a/src/main/java/com/destroystokyo/paper/profile/PaperUserAuthentication.java
+++ b/src/main/java/com/destroystokyo/paper/profile/PaperUserAuthentication.java
@@ -3,10 +3,12 @@ package com.destroystokyo.paper.profile;
 import com.mojang.authlib.Agent;
 import com.mojang.authlib.yggdrasil.YggdrasilAuthenticationService;
 import com.mojang.authlib.yggdrasil.YggdrasilUserAuthentication;
+import org.jetbrains.annotations.NotNull;
+
 import java.util.UUID;
 
 public class PaperUserAuthentication extends YggdrasilUserAuthentication {
-    public PaperUserAuthentication(YggdrasilAuthenticationService authenticationService, Agent agent) {
+    public PaperUserAuthentication(@NotNull YggdrasilAuthenticationService authenticationService, Agent agent) {
         super(authenticationService, UUID.randomUUID().toString(), agent);
     }
 }
diff --git a/src/main/java/com/destroystokyo/paper/proxy/VelocityProxy.java b/src/main/java/com/destroystokyo/paper/proxy/VelocityProxy.java
index c4934979b1ed85bfc4f8d9e6f8848b2beaad95c3..d76a497b3eff97f241c1257a61b75d672b34714d 100644
--- a/src/main/java/com/destroystokyo/paper/proxy/VelocityProxy.java
+++ b/src/main/java/com/destroystokyo/paper/proxy/VelocityProxy.java
@@ -15,6 +15,8 @@ import javax.crypto.spec.SecretKeySpec;
 import net.minecraft.network.FriendlyByteBuf;
 import net.minecraft.resources.ResourceLocation;
 import net.minecraft.world.entity.player.ProfilePublicKey;
+import org.jetbrains.annotations.NotNull;
+
 
 public class VelocityProxy {
     private static final int SUPPORTED_FORWARDING_VERSION = 1;
@@ -24,7 +26,7 @@ public class VelocityProxy {
     public static final byte MAX_SUPPORTED_FORWARDING_VERSION = MODERN_LAZY_SESSION;
     public static final ResourceLocation PLAYER_INFO_CHANNEL = new ResourceLocation("velocity", "player_info");
 
-    public static boolean checkIntegrity(final FriendlyByteBuf buf) {
+    public static boolean checkIntegrity(final @NotNull FriendlyByteBuf buf) {
         final byte[] signature = new byte[32];
         buf.readBytes(signature);
 
@@ -45,17 +47,17 @@ public class VelocityProxy {
         return true;
     }
 
-    public static InetAddress readAddress(final FriendlyByteBuf buf) {
+    public static @NotNull InetAddress readAddress(final @NotNull FriendlyByteBuf buf) {
         return InetAddresses.forString(buf.readUtf(Short.MAX_VALUE));
     }
 
-    public static GameProfile createProfile(final FriendlyByteBuf buf) {
+    public static @NotNull GameProfile createProfile(final @NotNull FriendlyByteBuf buf) {
         final GameProfile profile = new GameProfile(buf.readUUID(), buf.readUtf(16));
         readProperties(buf, profile);
         return profile;
     }
 
-    private static void readProperties(final FriendlyByteBuf buf, final GameProfile profile) {
+    private static void readProperties(final @NotNull FriendlyByteBuf buf, final @NotNull GameProfile profile) {
         final int properties = buf.readVarInt();
         for (int i1 = 0; i1 < properties; i1++) {
             final String name = buf.readUtf(Short.MAX_VALUE);
@@ -65,11 +67,11 @@ public class VelocityProxy {
         }
     }
 
-    public static ProfilePublicKey.Data readForwardedKey(FriendlyByteBuf buf) {
+    public static ProfilePublicKey.@NotNull Data readForwardedKey(@NotNull FriendlyByteBuf buf) {
         return new ProfilePublicKey.Data(buf);
     }
 
-    public static UUID readSignerUuidOrElse(FriendlyByteBuf buf, UUID orElse) {
+    public static UUID readSignerUuidOrElse(@NotNull FriendlyByteBuf buf, UUID orElse) {
         return buf.readBoolean() ? buf.readUUID() : orElse;
     }
 }
diff --git a/src/main/java/com/destroystokyo/paper/util/PooledHashSets.java b/src/main/java/com/destroystokyo/paper/util/PooledHashSets.java
index 11de56afaf059b00fa5bec293516bcdce7c4b2b9..7280c57aaee9856988b739b6ef6f82604ad90e96 100644
--- a/src/main/java/com/destroystokyo/paper/util/PooledHashSets.java
+++ b/src/main/java/com/destroystokyo/paper/util/PooledHashSets.java
@@ -2,6 +2,9 @@ package com.destroystokyo.paper.util;
 
 import it.unimi.dsi.fastutil.objects.Object2ObjectOpenHashMap;
 import it.unimi.dsi.fastutil.objects.ObjectLinkedOpenHashSet;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 import java.lang.ref.WeakReference;
 import java.util.Iterator;
 
@@ -11,7 +14,7 @@ public class PooledHashSets<E> {
     // we really want to avoid that equals() check as much as possible...
     protected final Object2ObjectOpenHashMap<PooledObjectLinkedOpenHashSet<E>, PooledObjectLinkedOpenHashSet<E>> mapPool = new Object2ObjectOpenHashMap<>(64, 0.25f);
 
-    protected void decrementReferenceCount(final PooledObjectLinkedOpenHashSet<E> current) {
+    protected void decrementReferenceCount(final @NotNull PooledObjectLinkedOpenHashSet<E> current) {
         if (current.referenceCount == 0) {
             throw new IllegalStateException("Cannot decrement reference count for " + current);
         }
@@ -23,7 +26,7 @@ public class PooledHashSets<E> {
         return;
     }
 
-    public PooledObjectLinkedOpenHashSet<E> findMapWith(final PooledObjectLinkedOpenHashSet<E> current, final E object) {
+    public @NotNull PooledObjectLinkedOpenHashSet<E> findMapWith(final @NotNull PooledObjectLinkedOpenHashSet<E> current, final @NotNull E object) {
         final PooledObjectLinkedOpenHashSet<E> cached = current.getAddCache(object);
 
         if (cached != null) {
@@ -62,7 +65,7 @@ public class PooledHashSets<E> {
     }
 
     // rets null if current.size() == 1
-    public PooledObjectLinkedOpenHashSet<E> findMapWithout(final PooledObjectLinkedOpenHashSet<E> current, final E object) {
+    public @Nullable PooledObjectLinkedOpenHashSet<E> findMapWithout(final @NotNull PooledObjectLinkedOpenHashSet<E> current, final @NotNull E object) {
         if (current.set.size() == 1) {
             decrementReferenceCount(current);
             return null;
@@ -125,13 +128,13 @@ public class PooledHashSets<E> {
             this.set = new ObjectLinkedOpenHashSet<>(2, 0.6f);
         }
 
-        public PooledObjectLinkedOpenHashSet(final E single) {
+        public PooledObjectLinkedOpenHashSet(final @NotNull E single) {
             this();
             this.referenceCount = -1;
             this.add(single);
         }
 
-        public PooledObjectLinkedOpenHashSet(final PooledObjectLinkedOpenHashSet<E> other) {
+        public PooledObjectLinkedOpenHashSet(final @NotNull PooledObjectLinkedOpenHashSet<E> other) {
             this.set = other.set.clone();
             this.hash = other.hash;
         }
@@ -144,7 +147,7 @@ public class PooledHashSets<E> {
             return x;
         }
 
-        public PooledObjectLinkedOpenHashSet<E> getAddCache(final E element) {
+        public @Nullable PooledObjectLinkedOpenHashSet<E> getAddCache(final E element) {
             final E currentAdd = this.lastAddObject.get();
 
             if (currentAdd == null || !(currentAdd == element || currentAdd.equals(element))) {
@@ -160,7 +163,7 @@ public class PooledHashSets<E> {
             return map;
         }
 
-        public PooledObjectLinkedOpenHashSet<E> getRemoveCache(final E element) {
+        public @Nullable PooledObjectLinkedOpenHashSet<E> getRemoveCache(final E element) {
             final E currentRemove = this.lastRemoveObject.get();
 
             if (currentRemove == null || !(currentRemove == element || currentRemove.equals(element))) {
@@ -186,7 +189,7 @@ public class PooledHashSets<E> {
             this.lastRemoveMap = new WeakReference<>(map);
         }
 
-        boolean add(final E element) {
+        boolean add(final @NotNull E element) {
             boolean added =  this.set.add(element);
 
             if (added) {
@@ -196,7 +199,7 @@ public class PooledHashSets<E> {
             return added;
         }
 
-        boolean remove(Object element) {
+        boolean remove(@NotNull Object element) {
             boolean removed = this.set.remove(element);
 
             if (removed) {
@@ -207,7 +210,7 @@ public class PooledHashSets<E> {
         }
 
         @Override
-        public Iterator<E> iterator() {
+        public @NotNull Iterator<E> iterator() {
             return this.set.iterator();
         }
 
@@ -233,7 +236,7 @@ public class PooledHashSets<E> {
         }
 
         @Override
-        public String toString() {
+        public @NotNull String toString() {
             return "PooledHashSet: size: " + this.set.size() + ", reference count: " + this.referenceCount + ", hash: " +
                 this.hashCode() + ", identity: " + System.identityHashCode(this) + " map: " + this.set.toString();
         }
diff --git a/src/main/java/com/destroystokyo/paper/util/RedstoneWireTurbo.java b/src/main/java/com/destroystokyo/paper/util/RedstoneWireTurbo.java
index 22a2547810d0c029f29685faddf7ac21cde2df0b..ddc53b2ec1bf4a5c1545d25679dfd1f7a79961ef 100644
--- a/src/main/java/com/destroystokyo/paper/util/RedstoneWireTurbo.java
+++ b/src/main/java/com/destroystokyo/paper/util/RedstoneWireTurbo.java
@@ -15,6 +15,9 @@ import org.bukkit.event.block.BlockRedstoneEvent;
 
 import com.google.common.collect.Lists;
 import com.google.common.collect.Maps;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 /**
  * Used for the faster redstone algorithm.
@@ -116,7 +119,7 @@ public class RedstoneWireTurbo {
      */
     private List<UpdateNode> updateQueue0 = Lists.newArrayList();
     private List<UpdateNode> updateQueue1 = Lists.newArrayList();
-    private List<UpdateNode> updateQueue2 = Lists.newArrayList();
+    private @NotNull List<UpdateNode> updateQueue2 = Lists.newArrayList();
 
     public RedstoneWireTurbo(RedStoneWireBlock wire) {
         this.wire = wire;
@@ -133,7 +136,7 @@ public class RedstoneWireTurbo {
      * the direction of signal flow is identified, the ordering of updates is completely
      * reorganized.
     */
-    public static BlockPos[] computeAllNeighbors(final BlockPos pos) {
+    public static BlockPos @NotNull [] computeAllNeighbors(final @NotNull BlockPos pos) {
         final int x = pos.getX();
         final int y = pos.getY();
         final int z = pos.getZ();
@@ -273,11 +276,11 @@ public class RedstoneWireTurbo {
             UNKNOWN, REDSTONE, OTHER
         }
 
-        BlockState currentState;        // Keep track of redstone wire value
+        @Nullable BlockState currentState;        // Keep track of redstone wire value
         UpdateNode[] neighbor_nodes;    // References to neighbors (directed graph edges)
         BlockPos self;             // UpdateNode's own position
         BlockPos parent;           // Which block pos spawned/updated this node
-        Type type = Type.UNKNOWN;       // unknown, redstone wire, other type of block
+        @NotNull Type type = Type.UNKNOWN;       // unknown, redstone wire, other type of block
         int layer;                      // Highest layer this node is scheduled in
         boolean visited;                // To keep track of information flow direction, visited restone wire is marked
         int xbias, zbias;               // Remembers directionality of ancestor nodes; helps eliminate directional ambiguities.
@@ -292,7 +295,7 @@ public class RedstoneWireTurbo {
     /*
      * For a newly created UpdateNode object, determine what type of block it is.
      */
-    private void identifyNode(final Level worldIn, final UpdateNode upd1) {
+    private void identifyNode(final @NotNull Level worldIn, final @NotNull UpdateNode upd1) {
         final BlockPos pos = upd1.self;
         final BlockState oldState = worldIn.getBlockState(pos);
         upd1.currentState = oldState;
@@ -414,7 +417,7 @@ public class RedstoneWireTurbo {
     /*
      * Process a node whose neighboring redstone wire has experienced value changes.
      */
-    private void updateNode(final Level worldIn, final UpdateNode upd1, final int layer) {
+    private void updateNode(final @NotNull Level worldIn, final @NotNull UpdateNode upd1, final int layer) {
         final BlockPos pos = upd1.self;
 
         // Mark this redstone wire as having been visited so that it can be used
@@ -459,7 +462,7 @@ public class RedstoneWireTurbo {
      * what nodes in the redstone wire graph have been visited, the neighbors
      * are reordered left-to-right relative to the direction of information flow.
      */
-    private void findNeighbors(final Level worldIn, final UpdateNode upd1) {
+    private void findNeighbors(final @NotNull Level worldIn, final @NotNull UpdateNode upd1) {
         final BlockPos pos = upd1.self;
 
         // Get the list of neighbor coordinates
@@ -550,7 +553,7 @@ public class RedstoneWireTurbo {
      * For any redstone wire block in layer N, inform neighbors to recompute their states
      * in layers N+1 and N+2;
      */
-    private void propagateChanges(final Level worldIn, final UpdateNode upd1, final int layer) {
+    private void propagateChanges(final @NotNull Level worldIn, final @NotNull UpdateNode upd1, final int layer) {
         if (upd1.neighbor_nodes == null) {
             // If this node has not been expanded yet, find its neighbors
             findNeighbors(worldIn, upd1);
@@ -617,7 +620,7 @@ public class RedstoneWireTurbo {
      * that is a function of distance from the initial call to
      * this.neighborChanged.
      */
-    private void breadthFirstWalk(final Level worldIn) {
+    private void breadthFirstWalk(final @NotNull Level worldIn) {
         shiftQueue();
         currentWalkLayer = 1;
 
@@ -697,7 +700,7 @@ public class RedstoneWireTurbo {
      * order to continue processing both the first and second wire in the order of distance from the initial
      * trigger.
      */
-    private BlockState scheduleReentrantNeighborChanged(final Level worldIn, final BlockPos pos, final BlockState newState, final BlockPos source) {
+    private BlockState scheduleReentrantNeighborChanged(final @NotNull Level worldIn, final BlockPos pos, final BlockState newState, final @Nullable BlockPos source) {
         if (source != null) {
             // If the cause of the redstone wire update is known, we can use that to help determine
             // direction of information flow.
@@ -757,7 +760,7 @@ public class RedstoneWireTurbo {
      * few other methods in BlockRedstoneWire.  This sets off the breadth-first
      * walk through all redstone dust connected to the initial position triggered.
      */
-    public BlockState updateSurroundingRedstone(final Level worldIn, final BlockPos pos, final BlockState state, final BlockPos source) {
+    public @NotNull BlockState updateSurroundingRedstone(final @NotNull Level worldIn, final @NotNull BlockPos pos, final @NotNull BlockState state, final @Nullable BlockPos source) {
         // Check this block's neighbors and see if its power level needs to change
         // Use the calculateCurrentChanges method in BlockRedstoneWire since we have no
         // cached block states at this point.
@@ -825,7 +828,7 @@ public class RedstoneWireTurbo {
      * the UpdateNode's neighbor array to find the redstone states of neighbors
      * that might power it.
      */
-    private BlockState calculateCurrentChanges(final Level worldIn, final UpdateNode upd) {
+    private @NotNull BlockState calculateCurrentChanges(final @NotNull Level worldIn, final @NotNull UpdateNode upd) {
         BlockState state = upd.currentState;
         final int i = state.getValue(RedStoneWireBlock.POWER).intValue();
         int j = 0;
@@ -932,7 +935,7 @@ public class RedstoneWireTurbo {
      * where earlier shape updates have been suppressed to keep a
      * redstone wire in an invalid state.
      */
-    public void updateNeighborShapes(Level level, BlockPos pos, BlockState state) {
+    public void updateNeighborShapes(@NotNull Level level, @NotNull BlockPos pos, @NotNull BlockState state) {
         // these updates will be added to the stack and processed after the entire network has updated
         state.updateIndirectNeighbourShapes(level, pos, Block.UPDATE_KNOWN_SHAPE | Block.UPDATE_CLIENTS);
 
@@ -949,7 +952,7 @@ public class RedstoneWireTurbo {
      * Optimized function to compute a redstone wire's power level based on cached
      * state.
      */
-    private static int getMaxCurrentStrength(final UpdateNode upd, final int strength) {
+    private static int getMaxCurrentStrength(final @NotNull UpdateNode upd, final int strength) {
         if (upd.type != UpdateNode.Type.REDSTONE) return strength;
         final int i = upd.currentState.getValue(RedStoneWireBlock.POWER).intValue();
         return i > strength ? i : strength;
diff --git a/src/main/java/com/destroystokyo/paper/util/map/QueuedChangesMapLong2Int.java b/src/main/java/com/destroystokyo/paper/util/map/QueuedChangesMapLong2Int.java
index 59868f37d14bbc0ece0836095cdad148778995e6..fc0eaae44b113f16fe625f6309edca51ffc00b9a 100644
--- a/src/main/java/com/destroystokyo/paper/util/map/QueuedChangesMapLong2Int.java
+++ b/src/main/java/com/destroystokyo/paper/util/map/QueuedChangesMapLong2Int.java
@@ -6,16 +6,18 @@ import it.unimi.dsi.fastutil.longs.Long2IntOpenHashMap;
 import it.unimi.dsi.fastutil.longs.LongIterator;
 import it.unimi.dsi.fastutil.longs.LongOpenHashSet;
 import it.unimi.dsi.fastutil.objects.ObjectIterator;
+import org.jetbrains.annotations.NotNull;
+
 
 /**
  * @author Spottedleaf
  */
 public class QueuedChangesMapLong2Int {
 
-    protected final Long2IntOpenHashMap updatingMap;
-    protected final Long2IntOpenHashMap visibleMap;
-    protected final Long2IntOpenHashMap queuedPuts;
-    protected final LongOpenHashSet queuedRemove;
+    protected final @NotNull Long2IntOpenHashMap updatingMap;
+    protected final @NotNull Long2IntOpenHashMap visibleMap;
+    protected final @NotNull Long2IntOpenHashMap queuedPuts;
+    protected final @NotNull LongOpenHashSet queuedRemove;
 
     protected int queuedDefaultReturnValue;
 
diff --git a/src/main/java/com/destroystokyo/paper/util/map/QueuedChangesMapLong2Object.java b/src/main/java/com/destroystokyo/paper/util/map/QueuedChangesMapLong2Object.java
index 7bab31a312463cc963d9621cdc543a281459bd32..166ffba1badeaf360eb3ee2f36487169cb973f05 100644
--- a/src/main/java/com/destroystokyo/paper/util/map/QueuedChangesMapLong2Object.java
+++ b/src/main/java/com/destroystokyo/paper/util/map/QueuedChangesMapLong2Object.java
@@ -4,6 +4,9 @@ import com.destroystokyo.paper.util.concurrent.WeakSeqLock;
 import it.unimi.dsi.fastutil.longs.Long2ObjectLinkedOpenHashMap;
 import it.unimi.dsi.fastutil.longs.Long2ObjectMap;
 import it.unimi.dsi.fastutil.objects.ObjectBidirectionalIterator;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 import java.util.ArrayList;
 import java.util.Collection;
 import java.util.List;
@@ -15,9 +18,9 @@ public class QueuedChangesMapLong2Object<V> {
 
     protected static final Object REMOVED = new Object();
 
-    protected final Long2ObjectLinkedOpenHashMap<V> updatingMap;
-    protected final Long2ObjectLinkedOpenHashMap<V> visibleMap;
-    protected final Long2ObjectLinkedOpenHashMap<Object> queuedChanges;
+    protected final @NotNull Long2ObjectLinkedOpenHashMap<V> updatingMap;
+    protected final @NotNull Long2ObjectLinkedOpenHashMap<V> visibleMap;
+    protected final @NotNull Long2ObjectLinkedOpenHashMap<Object> queuedChanges;
 
     // we use a seqlock as writes are not common.
     protected final WeakSeqLock updatingMapSeqLock = new WeakSeqLock();
@@ -58,7 +61,7 @@ public class QueuedChangesMapLong2Object<V> {
         return this.visibleMap.containsKey(k);
     }
 
-    public V getVisibleAsync(final long k) {
+    public @Nullable V getVisibleAsync(final long k) {
         long readlock;
         V ret = null;
 
@@ -127,20 +130,20 @@ public class QueuedChangesMapLong2Object<V> {
     }
 
     // unlike mojang's impl this cannot be used async since it's not a view of an immutable map
-    public Collection<V> getUpdatingValues() {
+    public @NotNull Collection<V> getUpdatingValues() {
         return this.updatingMap.values();
     }
 
-    public List<V> getUpdatingValuesCopy() {
+    public @NotNull List<V> getUpdatingValuesCopy() {
         return new ArrayList<>(this.updatingMap.values());
     }
 
     // unlike mojang's impl this cannot be used async since it's not a view of an immutable map
-    public Collection<V> getVisibleValues() {
+    public @NotNull Collection<V> getVisibleValues() {
         return this.visibleMap.values();
     }
 
-    public List<V> getVisibleValuesCopy() {
+    public @NotNull List<V> getVisibleValuesCopy() {
         return new ArrayList<>(this.visibleMap.values());
     }
 
diff --git a/src/main/java/com/destroystokyo/paper/util/maplist/ChunkList.java b/src/main/java/com/destroystokyo/paper/util/maplist/ChunkList.java
index 554f4d4e63c1431721989e6f502a32ccc53a8807..3c9a1e94703ba52e8365366eb4117148ac679f17 100644
--- a/src/main/java/com/destroystokyo/paper/util/maplist/ChunkList.java
+++ b/src/main/java/com/destroystokyo/paper/util/maplist/ChunkList.java
@@ -5,6 +5,8 @@ import java.util.Arrays;
 import java.util.Iterator;
 import java.util.NoSuchElementException;
 import net.minecraft.world.level.chunk.LevelChunk;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
 
 // list with O(1) remove & contains
 /**
@@ -26,11 +28,11 @@ public final class ChunkList implements Iterable<LevelChunk> {
         return this.count;
     }
 
-    public boolean contains(final LevelChunk chunk) {
+    public boolean contains(final @NotNull LevelChunk chunk) {
         return this.chunkToIndex.containsKey(chunk.coordinateKey);
     }
 
-    public boolean remove(final LevelChunk chunk) {
+    public boolean remove(final @NotNull LevelChunk chunk) {
         final int index = this.chunkToIndex.remove(chunk.coordinateKey);
         if (index == Integer.MIN_VALUE) {
             return false;
@@ -49,7 +51,7 @@ public final class ChunkList implements Iterable<LevelChunk> {
         return true;
     }
 
-    public boolean add(final LevelChunk chunk) {
+    public boolean add(final @NotNull LevelChunk chunk) {
         final int count = this.count;
         final int currIndex = this.chunkToIndex.putIfAbsent(chunk.coordinateKey, count);
 
@@ -92,10 +94,10 @@ public final class ChunkList implements Iterable<LevelChunk> {
     }
 
     @Override
-    public Iterator<LevelChunk> iterator() {
+    public @NotNull Iterator<LevelChunk> iterator() {
         return new Iterator<LevelChunk>() {
 
-            LevelChunk lastRet;
+            @Nullable LevelChunk lastRet;
             int current;
 
             @Override
diff --git a/src/main/java/com/destroystokyo/paper/util/maplist/EntityList.java b/src/main/java/com/destroystokyo/paper/util/maplist/EntityList.java
index 0133ea6feb1ab88f021f66855669f58367e7420b..032c0fb9cd09dc4e353120d0679bc2ae9b80370f 100644
--- a/src/main/java/com/destroystokyo/paper/util/maplist/EntityList.java
+++ b/src/main/java/com/destroystokyo/paper/util/maplist/EntityList.java
@@ -2,6 +2,9 @@ package com.destroystokyo.paper.util.maplist;
 
 import it.unimi.dsi.fastutil.ints.Int2IntOpenHashMap;
 import net.minecraft.world.entity.Entity;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 import java.util.Arrays;
 import java.util.Iterator;
 import java.util.NoSuchElementException;
@@ -26,11 +29,11 @@ public final class EntityList implements Iterable<Entity> {
         return this.count;
     }
 
-    public boolean contains(final Entity entity) {
+    public boolean contains(final @NotNull Entity entity) {
         return this.entityToIndex.containsKey(entity.getId());
     }
 
-    public boolean remove(final Entity entity) {
+    public boolean remove(final @NotNull Entity entity) {
         final int index = this.entityToIndex.remove(entity.getId());
         if (index == Integer.MIN_VALUE) {
             return false;
@@ -49,7 +52,7 @@ public final class EntityList implements Iterable<Entity> {
         return true;
     }
 
-    public boolean add(final Entity entity) {
+    public boolean add(final @NotNull Entity entity) {
         final int count = this.count;
         final int currIndex = this.entityToIndex.putIfAbsent(entity.getId(), count);
 
@@ -92,10 +95,10 @@ public final class EntityList implements Iterable<Entity> {
     }
 
     @Override
-    public Iterator<Entity> iterator() {
+    public @NotNull Iterator<Entity> iterator() {
         return new Iterator<Entity>() {
 
-            Entity lastRet;
+            @Nullable Entity lastRet;
             int current;
 
             @Override
diff --git a/src/main/java/com/destroystokyo/paper/util/maplist/IBlockDataList.java b/src/main/java/com/destroystokyo/paper/util/maplist/IBlockDataList.java
index 277cfd9d1e8fff5d9b5e534b75c3c5162d58b0b7..b4ac4f7b8a513c1c9591f2b4e25051aa499b85f2 100644
--- a/src/main/java/com/destroystokyo/paper/util/maplist/IBlockDataList.java
+++ b/src/main/java/com/destroystokyo/paper/util/maplist/IBlockDataList.java
@@ -6,6 +6,8 @@ import java.util.Arrays;
 import net.minecraft.world.level.block.Block;
 import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.world.level.chunk.GlobalPalette;
+import org.jetbrains.annotations.NotNull;
+
 
 /**
  * @author Spottedleaf
@@ -29,7 +31,7 @@ public final class IBlockDataList {
         return (x & 15) | (((z & 15) << 4)) | ((y & 255) << (4 + 4));
     }
 
-    public static BlockState getBlockDataFromRaw(final long raw) {
+    public static @NotNull BlockState getBlockDataFromRaw(final long raw) {
         return GLOBAL_PALETTE.valueFor((int)(raw >>> 32));
     }
 
@@ -41,7 +43,7 @@ public final class IBlockDataList {
         return (int)((raw >>> 16) & 0xFFFF);
     }
 
-    public static long getRawFromValues(final int index, final int location, final BlockState data) {
+    public static long getRawFromValues(final int index, final int location, final @NotNull BlockState data) {
         return (long)index | ((long)location << 16) | (((long)GLOBAL_PALETTE.idFor(data)) << 32);
     }
 
@@ -49,11 +51,11 @@ public final class IBlockDataList {
         return value & ~(0xFFFF) | (index);
     }
 
-    public long add(final int x, final int y, final int z, final BlockState data) {
+    public long add(final int x, final int y, final int z, final @NotNull BlockState data) {
         return this.add(getLocationKey(x, y, z), data);
     }
 
-    public long add(final int location, final BlockState data) {
+    public long add(final int location, final @NotNull BlockState data) {
         final long curr = this.map.get((short)location);
 
         if (curr == Long.MAX_VALUE) {
@@ -113,7 +115,7 @@ public final class IBlockDataList {
         return getLocationFromRaw(this.getRaw(index));
     }
 
-    public BlockState getData(final int index) {
+    public @NotNull BlockState getData(final int index) {
         return getBlockDataFromRaw(this.getRaw(index));
     }
 
@@ -122,7 +124,7 @@ public final class IBlockDataList {
         this.map.clear();
     }
 
-    public LongIterator getRawIterator() {
+    public @NotNull LongIterator getRawIterator() {
         return this.map.values().iterator();
     }
 }
diff --git a/src/main/java/com/destroystokyo/paper/util/maplist/ReferenceList.java b/src/main/java/com/destroystokyo/paper/util/maplist/ReferenceList.java
index 190c5f0b02a3d99054704ae1afbffb3498ddffe1..92c2ecfa2bcc6eb6ac1790cfd5a38bef408f8504 100644
--- a/src/main/java/com/destroystokyo/paper/util/maplist/ReferenceList.java
+++ b/src/main/java/com/destroystokyo/paper/util/maplist/ReferenceList.java
@@ -1,6 +1,9 @@
 package com.destroystokyo.paper.util.maplist;
 
 import it.unimi.dsi.fastutil.objects.Reference2IntOpenHashMap;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 import java.util.Arrays;
 import java.util.Iterator;
 import java.util.NoSuchElementException;
@@ -90,9 +93,9 @@ public final class ReferenceList<E> implements Iterable<E> {
     }
 
     @Override
-    public Iterator<E> iterator() {
+    public @NotNull Iterator<E> iterator() {
         return new Iterator<>() {
-            private E lastRet;
+            private @Nullable E lastRet;
             private int current;
 
             @Override
diff --git a/src/main/java/com/destroystokyo/paper/util/misc/AreaMap.java b/src/main/java/com/destroystokyo/paper/util/misc/AreaMap.java
index 41b9405d6759d865e0d14dd4f95163e9690e967d..0b0cff6b205c238386ecc624b2cc9e5dfa9c7fa9 100644
--- a/src/main/java/com/destroystokyo/paper/util/misc/AreaMap.java
+++ b/src/main/java/com/destroystokyo/paper/util/misc/AreaMap.java
@@ -8,6 +8,8 @@ import it.unimi.dsi.fastutil.objects.Object2LongOpenHashMap;
 import io.papermc.paper.util.MCUtil;
 import net.minecraft.server.MinecraftServer;
 import net.minecraft.world.level.ChunkPos;
+import org.jetbrains.annotations.NotNull;
+
 import javax.annotation.Nullable;
 import java.util.Iterator;
 
@@ -58,7 +60,7 @@ public abstract class AreaMap<E> {
     }
 
     @Nullable
-    public final PooledLinkedHashSets.PooledObjectLinkedOpenHashSet<E> getObjectsInRange(final ChunkPos chunkPos) {
+    public final PooledLinkedHashSets.PooledObjectLinkedOpenHashSet<E> getObjectsInRange(final @NotNull ChunkPos chunkPos) {
         return this.areaMap.get(MCUtil.getCoordinateKey(chunkPos));
     }
 
diff --git a/src/main/java/com/destroystokyo/paper/util/misc/DistanceTrackingAreaMap.java b/src/main/java/com/destroystokyo/paper/util/misc/DistanceTrackingAreaMap.java
index 896c3ff7ddb07f1f6f05f90e1e3fe7fb615071d4..9ebe457595bb221b5c7c15ff31a77c4f416e48d3 100644
--- a/src/main/java/com/destroystokyo/paper/util/misc/DistanceTrackingAreaMap.java
+++ b/src/main/java/com/destroystokyo/paper/util/misc/DistanceTrackingAreaMap.java
@@ -4,6 +4,8 @@ import io.papermc.paper.util.IntegerUtil;
 import it.unimi.dsi.fastutil.longs.Long2IntOpenHashMap;
 import io.papermc.paper.util.MCUtil;
 import net.minecraft.world.level.ChunkPos;
+import org.jetbrains.annotations.NotNull;
+
 
 /** @author Spottedleaf */
 public abstract class DistanceTrackingAreaMap<E> extends AreaMap<E> {
@@ -38,7 +40,7 @@ public abstract class DistanceTrackingAreaMap<E> extends AreaMap<E> {
     }
 
     // ret -1 if there is nothing mapped
-    public final int getNearestObjectDistance(final ChunkPos chunkPos) {
+    public final int getNearestObjectDistance(final @NotNull ChunkPos chunkPos) {
         return this.chunkToNearestDistance.get(MCUtil.getCoordinateKey(chunkPos));
     }
 
diff --git a/src/main/java/com/destroystokyo/paper/util/misc/PlayerAreaMap.java b/src/main/java/com/destroystokyo/paper/util/misc/PlayerAreaMap.java
index 46954db7ecd35ac4018fdf476df7c8020d7ce6c8..3cda9d36822e28680ccf74a076e77e6a0cc40678 100644
--- a/src/main/java/com/destroystokyo/paper/util/misc/PlayerAreaMap.java
+++ b/src/main/java/com/destroystokyo/paper/util/misc/PlayerAreaMap.java
@@ -1,6 +1,8 @@
 package com.destroystokyo.paper.util.misc;
 
 import net.minecraft.server.level.ServerPlayer;
+import org.jetbrains.annotations.NotNull;
+
 
 /**
  * @author Spottedleaf
@@ -26,7 +28,7 @@ public final class PlayerAreaMap extends AreaMap<ServerPlayer> {
     }
 
     @Override
-    protected PooledLinkedHashSets.PooledObjectLinkedOpenHashSet<ServerPlayer> getEmptySetFor(final ServerPlayer player) {
+    protected PooledLinkedHashSets.@NotNull PooledObjectLinkedOpenHashSet<ServerPlayer> getEmptySetFor(final @NotNull ServerPlayer player) {
         return player.cachedSingleHashSet;
     }
 }
diff --git a/src/main/java/com/destroystokyo/paper/util/misc/PlayerDistanceTrackingAreaMap.java b/src/main/java/com/destroystokyo/paper/util/misc/PlayerDistanceTrackingAreaMap.java
index d05dcea15f7047b58736c7c0e07920a04d6c5abe..48e22b9f254c31bb8eef717b2294469f0feb507a 100644
--- a/src/main/java/com/destroystokyo/paper/util/misc/PlayerDistanceTrackingAreaMap.java
+++ b/src/main/java/com/destroystokyo/paper/util/misc/PlayerDistanceTrackingAreaMap.java
@@ -1,6 +1,8 @@
 package com.destroystokyo.paper.util.misc;
 
 import net.minecraft.server.level.ServerPlayer;
+import org.jetbrains.annotations.NotNull;
+
 
 public class PlayerDistanceTrackingAreaMap extends DistanceTrackingAreaMap<ServerPlayer> {
 
@@ -18,7 +20,7 @@ public class PlayerDistanceTrackingAreaMap extends DistanceTrackingAreaMap<Serve
     }
 
     @Override
-    protected PooledLinkedHashSets.PooledObjectLinkedOpenHashSet<ServerPlayer> getEmptySetFor(final ServerPlayer player) {
+    protected PooledLinkedHashSets.@NotNull PooledObjectLinkedOpenHashSet<ServerPlayer> getEmptySetFor(final @NotNull ServerPlayer player) {
         return player.cachedSingleHashSet;
     }
 }
diff --git a/src/main/java/com/destroystokyo/paper/util/misc/PooledLinkedHashSets.java b/src/main/java/com/destroystokyo/paper/util/misc/PooledLinkedHashSets.java
index e51104e65a07b6ea7bbbcbb6afb066ef6401cc5b..5d60a88196e0a23c3fdaad19f84254f274005f7b 100644
--- a/src/main/java/com/destroystokyo/paper/util/misc/PooledLinkedHashSets.java
+++ b/src/main/java/com/destroystokyo/paper/util/misc/PooledLinkedHashSets.java
@@ -2,6 +2,9 @@ package com.destroystokyo.paper.util.misc;
 
 import it.unimi.dsi.fastutil.objects.Object2ObjectOpenHashMap;
 import it.unimi.dsi.fastutil.objects.ObjectOpenHashSet;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 import java.lang.ref.WeakReference;
 
 /** @author Spottedleaf */
@@ -12,7 +15,7 @@ public class PooledLinkedHashSets<E> {
     // we really want to avoid that equals() check as much as possible...
     protected final Object2ObjectOpenHashMap<PooledObjectLinkedOpenHashSet<E>, PooledObjectLinkedOpenHashSet<E>> mapPool = new Object2ObjectOpenHashMap<>(128, 0.25f);
 
-    protected void decrementReferenceCount(final PooledObjectLinkedOpenHashSet<E> current) {
+    protected void decrementReferenceCount(final @NotNull PooledObjectLinkedOpenHashSet<E> current) {
         if (current.referenceCount == 0) {
             throw new IllegalStateException("Cannot decrement reference count for " + current);
         }
@@ -24,7 +27,7 @@ public class PooledLinkedHashSets<E> {
         return;
     }
 
-    public PooledObjectLinkedOpenHashSet<E> findMapWith(final PooledObjectLinkedOpenHashSet<E> current, final E object) {
+    public @NotNull PooledObjectLinkedOpenHashSet<E> findMapWith(final @NotNull PooledObjectLinkedOpenHashSet<E> current, final @NotNull E object) {
         final PooledObjectLinkedOpenHashSet<E> cached = current.getAddCache(object);
 
         if (cached != null) {
@@ -76,7 +79,7 @@ public class PooledLinkedHashSets<E> {
     }
 
     // rets null if current.size() == 1
-    public PooledObjectLinkedOpenHashSet<E> findMapWithout(final PooledObjectLinkedOpenHashSet<E> current, final E object) {
+    public @Nullable PooledObjectLinkedOpenHashSet<E> findMapWithout(final @NotNull PooledObjectLinkedOpenHashSet<E> current, final @NotNull E object) {
         if (current.set.size() == 1) {
             decrementReferenceCount(current);
             return null;
@@ -176,13 +179,13 @@ public class PooledLinkedHashSets<E> {
             this.set = new RawSetObjectLinkedOpenHashSet<>(2, 0.8f);
         }
 
-        public PooledObjectLinkedOpenHashSet(final E single) {
+        public PooledObjectLinkedOpenHashSet(final @NotNull E single) {
             this((PooledLinkedHashSets<E>)null);
             this.referenceCount = -1;
             this.add(single);
         }
 
-        public PooledObjectLinkedOpenHashSet(final PooledObjectLinkedOpenHashSet<E> other) {
+        public PooledObjectLinkedOpenHashSet(final @NotNull PooledObjectLinkedOpenHashSet<E> other) {
             this.set = other.set.clone();
             this.hash = other.hash;
         }
@@ -195,7 +198,7 @@ public class PooledLinkedHashSets<E> {
             return x;
         }
 
-        PooledObjectLinkedOpenHashSet<E> getAddCache(final E element) {
+        @Nullable PooledObjectLinkedOpenHashSet<E> getAddCache(final E element) {
             final E currentAdd = this.lastAddObject.get();
 
             if (currentAdd == null || !(currentAdd == element || currentAdd.equals(element))) {
@@ -205,7 +208,7 @@ public class PooledLinkedHashSets<E> {
             return this.lastAddMap.get();
         }
 
-        PooledObjectLinkedOpenHashSet<E> getRemoveCache(final E element) {
+        @Nullable PooledObjectLinkedOpenHashSet<E> getRemoveCache(final E element) {
             final E currentRemove = this.lastRemoveObject.get();
 
             if (currentRemove == null || !(currentRemove == element || currentRemove.equals(element))) {
@@ -225,7 +228,7 @@ public class PooledLinkedHashSets<E> {
             this.lastRemoveMap = new WeakReference<>(map);
         }
 
-        boolean add(final E element) {
+        boolean add(final @NotNull E element) {
             boolean added =  this.set.add(element);
 
             if (added) {
@@ -235,7 +238,7 @@ public class PooledLinkedHashSets<E> {
             return added;
         }
 
-        boolean remove(Object element) {
+        boolean remove(@NotNull Object element) {
             boolean removed = this.set.remove(element);
 
             if (removed) {
@@ -279,7 +282,7 @@ public class PooledLinkedHashSets<E> {
         }
 
         @Override
-        public String toString() {
+        public @NotNull String toString() {
             return "PooledHashSet: size: " + this.set.size() + ", reference count: " + this.referenceCount + ", hash: " +
                 this.hashCode() + ", identity: " + System.identityHashCode(this) + " map: " + this.set.toString();
         }
diff --git a/src/main/java/com/destroystokyo/paper/util/pooled/PooledObjects.java b/src/main/java/com/destroystokyo/paper/util/pooled/PooledObjects.java
index a743703502cea333bd4231b6557de50e8eaf81eb..3f3f1ba1f55f8555621bdd272a4a7efc31077e5f 100644
--- a/src/main/java/com/destroystokyo/paper/util/pooled/PooledObjects.java
+++ b/src/main/java/com/destroystokyo/paper/util/pooled/PooledObjects.java
@@ -2,6 +2,8 @@ package com.destroystokyo.paper.util.pooled;
 
 import io.papermc.paper.util.MCUtil;
 import org.apache.commons.lang3.mutable.MutableInt;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
 
 import java.util.ArrayDeque;
 import java.util.function.Consumer;
@@ -32,15 +34,15 @@ public final class PooledObjects<E> {
 
     public static final PooledObjects<MutableInt> POOLED_MUTABLE_INTEGERS = new PooledObjects<>(MutableInt::new, 1024);
 
-    private final Supplier<E> creator;
+    private final @NotNull Supplier<E> creator;
     private final Consumer<E> releaser;
     private final int maxPoolSize;
-    private final ArrayDeque<E> queue;
+    private final @NotNull ArrayDeque<E> queue;
 
     public PooledObjects(final Supplier<E> creator, int maxPoolSize) {
         this(creator, maxPoolSize, null);
     }
-    public PooledObjects(final Supplier<E> creator, int maxPoolSize, Consumer<E> releaser) {
+    public PooledObjects(final @Nullable Supplier<E> creator, int maxPoolSize, Consumer<E> releaser) {
         if (creator == null) {
             throw new NullPointerException("Creator must not be null");
         }
@@ -54,11 +56,11 @@ public final class PooledObjects<E> {
         this.releaser = releaser;
     }
 
-    public AutoReleased acquireCleaner(Object holder) {
+    public @NotNull AutoReleased acquireCleaner(@NotNull Object holder) {
         return acquireCleaner(holder, this::release);
     }
 
-    public AutoReleased acquireCleaner(Object holder, Consumer<E> releaser) {
+    public @NotNull AutoReleased acquireCleaner(@NotNull Object holder, @NotNull Consumer<E> releaser) {
         E resource = acquire();
         Runnable cleaner = MCUtil.registerCleaner(holder, resource, releaser);
         return new AutoReleased(resource, cleaner);
@@ -72,7 +74,7 @@ public final class PooledObjects<E> {
         return value != null ? value : this.creator.get();
     }
 
-    public final void release(final E value) {
+    public final void release(final @NotNull E value) {
         if (this.releaser != null) {
             this.releaser.accept(value);
         }
diff --git a/src/main/java/com/destroystokyo/paper/util/set/OptimizedSmallEnumSet.java b/src/main/java/com/destroystokyo/paper/util/set/OptimizedSmallEnumSet.java
index b3329c6fcd6758a781a51f5ba8f5052ac1c77b49..33ed28a71f738b5f4cbae75c8bafdb4a456d74df 100644
--- a/src/main/java/com/destroystokyo/paper/util/set/OptimizedSmallEnumSet.java
+++ b/src/main/java/com/destroystokyo/paper/util/set/OptimizedSmallEnumSet.java
@@ -1,5 +1,8 @@
 package com.destroystokyo.paper.util.set;
 
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 import java.util.Collection;
 
 /**
@@ -7,10 +10,10 @@ import java.util.Collection;
  */
 public final class OptimizedSmallEnumSet<E extends Enum<E>> {
 
-    private final Class<E> enumClass;
+    private final @NotNull Class<E> enumClass;
     private long backingSet;
 
-    public OptimizedSmallEnumSet(final Class<E> clazz) {
+    public OptimizedSmallEnumSet(final @Nullable Class<E> clazz) {
         if (clazz == null) {
             throw new IllegalArgumentException("Null class");
         }
@@ -20,7 +23,7 @@ public final class OptimizedSmallEnumSet<E extends Enum<E>> {
         this.enumClass = clazz;
     }
 
-    public boolean addUnchecked(final E element) {
+    public boolean addUnchecked(final @NotNull E element) {
         final int ordinal = element.ordinal();
         final long key = 1L << ordinal;
 
@@ -30,7 +33,7 @@ public final class OptimizedSmallEnumSet<E extends Enum<E>> {
         return (prev & key) == 0;
     }
 
-    public boolean removeUnchecked(final E element) {
+    public boolean removeUnchecked(final @NotNull E element) {
         final int ordinal = element.ordinal();
         final long key = 1L << ordinal;
 
@@ -48,7 +51,7 @@ public final class OptimizedSmallEnumSet<E extends Enum<E>> {
         return Long.bitCount(this.backingSet);
     }
 
-    public void addAllUnchecked(final Collection<E> enums) {
+    public void addAllUnchecked(final @NotNull Collection<E> enums) {
         for (final E element : enums) {
             if (element == null) {
                 throw new NullPointerException("Null element");
@@ -61,11 +64,11 @@ public final class OptimizedSmallEnumSet<E extends Enum<E>> {
         return this.backingSet;
     }
 
-    public boolean hasCommonElements(final OptimizedSmallEnumSet<E> other) {
+    public boolean hasCommonElements(final @NotNull OptimizedSmallEnumSet<E> other) {
         return (other.backingSet & this.backingSet) != 0;
     }
 
-    public boolean hasElement(final E element) {
+    public boolean hasElement(final @NotNull E element) {
         return (this.backingSet & (1L << element.ordinal())) != 0;
     }
 }
diff --git a/src/main/java/com/mojang/authlib/yggdrasil/YggdrasilGameProfileRepository.java b/src/main/java/com/mojang/authlib/yggdrasil/YggdrasilGameProfileRepository.java
index c48a40155108b6bae18073638a0ba12649344261..f4a351fde8d90d27ee397e71b02f8b0f58f453ee 100644
--- a/src/main/java/com/mojang/authlib/yggdrasil/YggdrasilGameProfileRepository.java
+++ b/src/main/java/com/mojang/authlib/yggdrasil/YggdrasilGameProfileRepository.java
@@ -11,6 +11,7 @@ import com.mojang.authlib.HttpAuthenticationService;
 import com.mojang.authlib.ProfileLookupCallback;
 import com.mojang.authlib.exceptions.AuthenticationException;
 import com.mojang.authlib.yggdrasil.response.ProfileSearchResultsResponse;
+import org.jetbrains.annotations.NotNull;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -19,7 +20,7 @@ import java.util.Set;
 
 public class YggdrasilGameProfileRepository implements GameProfileRepository {
     private static final Logger LOGGER = LoggerFactory.getLogger(YggdrasilGameProfileRepository.class);
-    private final String searchPageUrl;
+    private final @NotNull String searchPageUrl;
     private static final int ENTRIES_PER_PAGE = 2;
     private static final int MAX_FAIL_COUNT = 3;
     private static final int DELAY_BETWEEN_PAGES = 100;
@@ -27,13 +28,13 @@ public class YggdrasilGameProfileRepository implements GameProfileRepository {
 
     private final YggdrasilAuthenticationService authenticationService;
 
-    public YggdrasilGameProfileRepository(final YggdrasilAuthenticationService authenticationService, final Environment environment) {
+    public YggdrasilGameProfileRepository(final YggdrasilAuthenticationService authenticationService, final @NotNull Environment environment) {
         this.authenticationService = authenticationService;
         searchPageUrl = environment.getAccountsHost() + "/profiles/";
     }
 
     @Override
-    public void findProfilesByNames(final String[] names, final Agent agent, final ProfileLookupCallback callback) {
+    public void findProfilesByNames(final String @NotNull [] names, final @NotNull Agent agent, final @NotNull ProfileLookupCallback callback) {
         final Set<String> criteria = Sets.newHashSet();
 
         for (final String name : names) {
diff --git a/src/main/java/com/mojang/brigadier/CommandDispatcher.java b/src/main/java/com/mojang/brigadier/CommandDispatcher.java
index b64c98c173e25055f4ff9d7124d0a3cb7ff6ab1d..ca0d191d51a2f5afe4bf913a384b45cbc6868aea 100644
--- a/src/main/java/com/mojang/brigadier/CommandDispatcher.java
+++ b/src/main/java/com/mojang/brigadier/CommandDispatcher.java
@@ -14,6 +14,8 @@ import com.mojang.brigadier.suggestion.SuggestionsBuilder;
 import com.mojang.brigadier.tree.CommandNode;
 import com.mojang.brigadier.tree.LiteralCommandNode;
 import com.mojang.brigadier.tree.RootCommandNode;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
 
 import java.util.ArrayList;
 import java.util.Collection;
@@ -59,7 +61,7 @@ public class CommandDispatcher<S> {
 
     private final Predicate<CommandNode<S>> hasCommand = new Predicate<CommandNode<S>>() {
         @Override
-        public boolean test(final CommandNode<S> input) {
+        public boolean test(final @Nullable CommandNode<S> input) {
             return input != null && (input.getCommand() != null || input.getChildren().stream().anyMatch(hasCommand));
         }
     };
@@ -94,7 +96,7 @@ public class CommandDispatcher<S> {
      * @param command a literal argument builder to add to this command tree
      * @return the node added to this tree
      */
-    public LiteralCommandNode<S> register(final LiteralArgumentBuilder<S> command) {
+    public LiteralCommandNode<S> register(final @NotNull LiteralArgumentBuilder<S> command) {
         final LiteralCommandNode<S> build = command.build();
         this.root.addChild(build);
         return build;
@@ -173,7 +175,7 @@ public class CommandDispatcher<S> {
      * @see #execute(ParseResults)
      * @see #execute(String, Object)
      */
-    public int execute(final StringReader input, final S source) throws CommandSyntaxException {
+    public int execute(final @NotNull StringReader input, final S source) throws CommandSyntaxException {
         final ParseResults<S> parse = this.parse(input, source);
         return this.execute(parse);
     }
@@ -204,7 +206,7 @@ public class CommandDispatcher<S> {
      * @see #execute(String, Object)
      * @see #execute(StringReader, Object)
      */
-    public int execute(final ParseResults<S> parse) throws CommandSyntaxException {
+    public int execute(final @NotNull ParseResults<S> parse) throws CommandSyntaxException {
         if (parse.getReader().canRead()) {
             if (parse.getExceptions().size() == 1) {
                 throw parse.getExceptions().values().iterator().next();
@@ -344,12 +346,12 @@ public class CommandDispatcher<S> {
      * @see #execute(ParseResults)
      * @see #execute(String, Object)
      */
-    public ParseResults<S> parse(final StringReader command, final S source) {
+    public ParseResults<S> parse(final @NotNull StringReader command, final S source) {
         final CommandContextBuilder<S> context = new CommandContextBuilder<>(this, source, this.root, command.getCursor());
         return this.parseNodes(this.root, command, context);
     }
 
-    private ParseResults<S> parseNodes(final CommandNode<S> node, final StringReader originalReader, final CommandContextBuilder<S> contextSoFar) {
+    private ParseResults<S> parseNodes(final @NotNull CommandNode<S> node, final @NotNull StringReader originalReader, final @NotNull CommandContextBuilder<S> contextSoFar) {
         final S source = contextSoFar.getSource();
         Map<CommandNode<S>, CommandSyntaxException> errors = null;
         List<ParseResults<S>> potentials = null;
@@ -449,13 +451,13 @@ public class CommandDispatcher<S> {
      * @param restricted if true, commands that the {@code source} cannot access will not be mentioned
      * @return array of full usage strings under the target node
      */
-    public String[] getAllUsage(final CommandNode<S> node, final S source, final boolean restricted) {
+    public String @NotNull [] getAllUsage(final @NotNull CommandNode<S> node, final S source, final boolean restricted) {
         final ArrayList<String> result = new ArrayList<>();
         this.getAllUsage(node, source, result, "", restricted);
         return result.toArray(new String[result.size()]);
     }
 
-    private void getAllUsage(final CommandNode<S> node, final S source, final ArrayList<String> result, final String prefix, final boolean restricted) {
+    private void getAllUsage(final @NotNull CommandNode<S> node, final S source, final @NotNull ArrayList<String> result, final @NotNull String prefix, final boolean restricted) {
         if (restricted && !node.canUse(source)) {
             return;
         }
@@ -495,7 +497,7 @@ public class CommandDispatcher<S> {
      * @param source a custom "source" object, usually representing the originator of this command
      * @return array of full usage strings under the target node
      */
-    public Map<CommandNode<S>, String> getSmartUsage(final CommandNode<S> node, final S source) {
+    public @NotNull Map<CommandNode<S>, String> getSmartUsage(final @NotNull CommandNode<S> node, final S source) {
         final Map<CommandNode<S>, String> result = new LinkedHashMap<>();
 
         final boolean optional = node.getCommand() != null;
@@ -508,7 +510,7 @@ public class CommandDispatcher<S> {
         return result;
     }
 
-    private String getSmartUsage(final CommandNode<S> node, final S source, final boolean optional, final boolean deep) {
+    private @Nullable String getSmartUsage(final @NotNull CommandNode<S> node, final S source, final boolean optional, final boolean deep) {
         if (!node.canUse(source)) {
             return null;
         }
@@ -577,11 +579,11 @@ public class CommandDispatcher<S> {
      * @param parse the result of a {@link #parse(StringReader, Object)}
      * @return a future that will eventually resolve into a {@link Suggestions} object
      */
-    public CompletableFuture<Suggestions> getCompletionSuggestions(final ParseResults<S> parse) {
+    public CompletableFuture<Suggestions> getCompletionSuggestions(final @NotNull ParseResults<S> parse) {
         return this.getCompletionSuggestions(parse, parse.getReader().getTotalLength());
     }
 
-    public CompletableFuture<Suggestions> getCompletionSuggestions(final ParseResults<S> parse, int cursor) {
+    public @NotNull CompletableFuture<Suggestions> getCompletionSuggestions(final @NotNull ParseResults<S> parse, int cursor) {
         final CommandContextBuilder<S> context = parse.getContext();
 
         final SuggestionContext<S> nodeBeforeCursor = context.findSuggestionContext(cursor);
@@ -645,7 +647,7 @@ public class CommandDispatcher<S> {
      * @param target the target node you are finding a path for
      * @return a path to the resulting node, or an empty list if it was not found
      */
-    public Collection<String> getPath(final CommandNode<S> target) {
+    public @NotNull Collection<String> getPath(final CommandNode<S> target) {
         final List<List<CommandNode<S>>> nodes = new ArrayList<>();
         this.addPaths(this.root, nodes, new ArrayList<>());
 
@@ -675,7 +677,7 @@ public class CommandDispatcher<S> {
      * @param path a generated path to a node
      * @return the node at the given path, or null if not found
      */
-    public CommandNode<S> findNode(final Collection<String> path) {
+    public @Nullable CommandNode<S> findNode(final @NotNull Collection<String> path) {
         CommandNode<S> node = this.root;
         for (final String name : path) {
             node = node.getChild(name);
@@ -696,11 +698,11 @@ public class CommandDispatcher<S> {
      *
      * @param consumer a callback to be notified of potential ambiguities
      */
-    public void findAmbiguities(final AmbiguityConsumer<S> consumer) {
+    public void findAmbiguities(final @NotNull AmbiguityConsumer<S> consumer) {
         this.root.findAmbiguities(consumer);
     }
 
-    private void addPaths(final CommandNode<S> node, final List<List<CommandNode<S>>> result, final List<CommandNode<S>> parents) {
+    private void addPaths(final @NotNull CommandNode<S> node, final @NotNull List<List<CommandNode<S>>> result, final @NotNull List<CommandNode<S>> parents) {
         final List<CommandNode<S>> current = new ArrayList<>(parents);
         current.add(node);
         result.add(current);
diff --git a/src/main/java/com/mojang/brigadier/builder/ArgumentBuilder.java b/src/main/java/com/mojang/brigadier/builder/ArgumentBuilder.java
index f875507241ac6769545e91cd3285232b75b892f0..34184a8adb47c2f93440f14e28098a19bef72f36 100644
--- a/src/main/java/com/mojang/brigadier/builder/ArgumentBuilder.java
+++ b/src/main/java/com/mojang/brigadier/builder/ArgumentBuilder.java
@@ -8,6 +8,8 @@ import com.mojang.brigadier.RedirectModifier;
 import com.mojang.brigadier.SingleRedirectModifier;
 import com.mojang.brigadier.tree.CommandNode;
 import com.mojang.brigadier.tree.RootCommandNode;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
 
 import java.util.Collection;
 import java.util.Collections;
@@ -18,7 +20,7 @@ public abstract class ArgumentBuilder<S, T extends ArgumentBuilder<S, T>> {
     private static final Predicate<Object> DEFAULT_REQUIREMENT = s -> true;
 
     @SuppressWarnings("unchecked")
-    public static <S> Predicate<S> defaultRequirement() {
+    public static <S> @NotNull Predicate<S> defaultRequirement() {
         return (Predicate<S>) DEFAULT_REQUIREMENT;
     }
     // Paper end
@@ -26,12 +28,12 @@ public abstract class ArgumentBuilder<S, T extends ArgumentBuilder<S, T>> {
     private Command<S> command;
     private Predicate<S> requirement = defaultRequirement(); // Paper
     private CommandNode<S> target;
-    private RedirectModifier<S> modifier = null;
+    private @Nullable RedirectModifier<S> modifier = null;
     private boolean forks;
 
     protected abstract T getThis();
 
-    public T then(final ArgumentBuilder<S, ?> argument) {
+    public T then(final @NotNull ArgumentBuilder<S, ?> argument) {
         if (target != null) {
             throw new IllegalStateException("Cannot add children to a redirected node");
         }
@@ -73,7 +75,7 @@ public abstract class ArgumentBuilder<S, T extends ArgumentBuilder<S, T>> {
         return forward(target, null, false);
     }
 
-    public T redirect(final CommandNode<S> target, final SingleRedirectModifier<S> modifier) {
+    public T redirect(final CommandNode<S> target, final @Nullable SingleRedirectModifier<S> modifier) {
         return forward(target, modifier == null ? null : o -> Collections.singleton(modifier.apply(o)), false);
     }
 
diff --git a/src/main/java/com/mojang/brigadier/tree/CommandNode.java b/src/main/java/com/mojang/brigadier/tree/CommandNode.java
index 39844531b03eb8a6c70700b4ecbf0ff1a557424d..ce45c49e6da2aedf89d6faaecd8e73a3af3b378c 100644
--- a/src/main/java/com/mojang/brigadier/tree/CommandNode.java
+++ b/src/main/java/com/mojang/brigadier/tree/CommandNode.java
@@ -24,9 +24,12 @@ import java.util.Set;
 import java.util.concurrent.CompletableFuture;
 import java.util.function.Predicate;
 import net.minecraft.commands.CommandSourceStack;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 public abstract class CommandNode<S> implements Comparable<CommandNode<S>> {
-    private Map<String, CommandNode<S>> children = com.google.common.collect.Maps.newTreeMap(); // Paper - Switch to tree map for automatic sorting
+    private @NotNull Map<String, CommandNode<S>> children = com.google.common.collect.Maps.newTreeMap(); // Paper - Switch to tree map for automatic sorting
     private final Map<String, LiteralCommandNode<S>> literals = new LinkedHashMap<>();
     private final Map<String, ArgumentCommandNode<S, ?>> arguments = new LinkedHashMap<>();
     public Predicate<S> requirement;
@@ -34,7 +37,7 @@ public abstract class CommandNode<S> implements Comparable<CommandNode<S>> {
     private final RedirectModifier<S> modifier;
     private final boolean forks;
     private Command<S> command;
-    public LiteralCommandNode<CommandSourceStack> clientNode = null; // Paper
+    public @Nullable LiteralCommandNode<CommandSourceStack> clientNode = null; // Paper
     // CraftBukkit start
     public void removeCommand(String name) {
         this.children.remove(name);
@@ -55,7 +58,7 @@ public abstract class CommandNode<S> implements Comparable<CommandNode<S>> {
         return this.command;
     }
 
-    public Collection<CommandNode<S>> getChildren() {
+    public @NotNull Collection<CommandNode<S>> getChildren() {
         return this.children.values();
     }
 
@@ -111,7 +114,7 @@ public abstract class CommandNode<S> implements Comparable<CommandNode<S>> {
         // Paper - Remove manual sorting, it is no longer needed
     }
 
-    public void findAmbiguities(final AmbiguityConsumer<S> consumer) {
+    public void findAmbiguities(final @NotNull AmbiguityConsumer<S> consumer) {
         Set<String> matches = new HashSet<>();
 
         for (final CommandNode<S> child : this.children.values()) {
@@ -172,7 +175,7 @@ public abstract class CommandNode<S> implements Comparable<CommandNode<S>> {
 
     protected abstract String getSortedKey();
 
-    public Collection<? extends CommandNode<S>> getRelevantNodes(final StringReader input) {
+    public @NotNull Collection<? extends CommandNode<S>> getRelevantNodes(final @NotNull StringReader input) {
         if (this.literals.size() > 0) {
             final int cursor = input.getCursor();
             while (input.canRead() && input.peek() != ' ') {
diff --git a/src/main/java/com/mojang/datafixers/DataFixerBuilder.java b/src/main/java/com/mojang/datafixers/DataFixerBuilder.java
index 3d5e52d997a8e7d7f3b000e3737d30762aae2ca1..d33314372bfb6594c3a9da3ec4462423bbef1f9e 100644
--- a/src/main/java/com/mojang/datafixers/DataFixerBuilder.java
+++ b/src/main/java/com/mojang/datafixers/DataFixerBuilder.java
@@ -10,6 +10,7 @@ import it.unimi.dsi.fastutil.ints.Int2ObjectSortedMap;
 import it.unimi.dsi.fastutil.ints.IntAVLTreeSet;
 import it.unimi.dsi.fastutil.ints.IntBidirectionalIterator;
 import it.unimi.dsi.fastutil.ints.IntSortedSet;
+import org.jetbrains.annotations.NotNull;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -35,11 +36,11 @@ public class DataFixerBuilder {
         this.dataVersion = dataVersion;
     }
 
-    public Schema addSchema(final int version, final BiFunction<Integer, Schema, Schema> factory) {
+    public Schema addSchema(final int version, final @NotNull BiFunction<Integer, Schema, Schema> factory) {
         return addSchema(version, 0, factory);
     }
 
-    public Schema addSchema(final int version, final int subVersion, final BiFunction<Integer, Schema, Schema> factory) {
+    public Schema addSchema(final int version, final int subVersion, final @NotNull BiFunction<Integer, Schema, Schema> factory) {
         final int key = DataFixUtils.makeKey(version, subVersion);
         final Schema parent = schemas.isEmpty() ? null : schemas.get(DataFixerUpper.getLowestSchemaSameVersion(schemas, key - 1));
         final Schema schema = factory.apply(DataFixUtils.makeKey(version, subVersion), parent);
@@ -47,11 +48,11 @@ public class DataFixerBuilder {
         return schema;
     }
 
-    public void addSchema(final Schema schema) {
+    public void addSchema(final @NotNull Schema schema) {
         schemas.put(schema.getVersionKey(), schema);
     }
 
-    public void addFixer(final DataFix fix) {
+    public void addFixer(final @NotNull DataFix fix) {
         final int version = DataFixUtils.getVersion(fix.getVersionKey());
 
         if (version > dataVersion) {
@@ -63,11 +64,11 @@ public class DataFixerBuilder {
         fixerVersions.add(fix.getVersionKey());
     }
 
-    public DataFixer buildUnoptimized() {
+    public @NotNull DataFixer buildUnoptimized() {
         return build();
     }
 
-    public DataFixer buildOptimized(final Executor executor) {
+    public @NotNull DataFixer buildOptimized(final Executor executor) {
         final DataFixerUpper fixerUpper = build();
 
         final Instant started = Instant.now();
@@ -99,7 +100,7 @@ public class DataFixerBuilder {
         return fixerUpper;
     }
 
-    private DataFixerUpper build() {
+    private @NotNull DataFixerUpper build() {
         return new DataFixerUpper(new Int2ObjectAVLTreeMap<>(schemas), new ArrayList<>(globalList), new IntAVLTreeSet(fixerVersions));
     }
 }
diff --git a/src/main/java/com/mojang/datafixers/util/Either.java b/src/main/java/com/mojang/datafixers/util/Either.java
index 3f65fe71024928e35111fc6719a290aab9a6859e..8025b5b40de7a4be2358011633b21922f4668734 100644
--- a/src/main/java/com/mojang/datafixers/util/Either.java
+++ b/src/main/java/com/mojang/datafixers/util/Either.java
@@ -7,6 +7,8 @@ import com.mojang.datafixers.kinds.Applicative;
 import com.mojang.datafixers.kinds.CocartesianLike;
 import com.mojang.datafixers.kinds.K1;
 import com.mojang.datafixers.kinds.Traversable;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
 
 import java.util.Objects;
 import java.util.Optional;
@@ -29,43 +31,43 @@ public abstract class Either<L, R> implements App<Either.Mu<R>, L> {
         }
 
         @Override
-        public <C, D> Either<C, D> mapBoth(final Function<? super L, ? extends C> f1, final Function<? super R, ? extends D> f2) {
+        public <C, D> @NotNull Either<C, D> mapBoth(final @NotNull Function<? super L, ? extends C> f1, final Function<? super R, ? extends D> f2) {
             return new Left<>(f1.apply(value));
         }
 
         @Override
-        public <T> T map(final Function<? super L, ? extends T> l, final Function<? super R, ? extends T> r) {
+        public <T> T map(final @NotNull Function<? super L, ? extends T> l, final Function<? super R, ? extends T> r) {
             return l.apply(value);
         }
 
         @Override
-        public Either<L, R> ifLeft(Consumer<? super L> consumer) {
+        public @NotNull Either<L, R> ifLeft(@NotNull Consumer<? super L> consumer) {
             consumer.accept(value);
             return this;
         }
 
         @Override
-        public Either<L, R> ifRight(Consumer<? super R> consumer) {
+        public @NotNull Either<L, R> ifRight(Consumer<? super R> consumer) {
             return this;
         }
 
         @Override
-        public Optional<L> left() {
+        public @NotNull Optional<L> left() {
             return this.valueOptional == null ? this.valueOptional = Optional.of(this.value) : this.valueOptional; // Paper - reduce the optional allocation...
         }
 
         @Override
-        public Optional<R> right() {
+        public @NotNull Optional<R> right() {
             return Optional.empty();
         }
 
         @Override
-        public String toString() {
+        public @NotNull String toString() {
             return "Left[" + value + "]";
         }
 
         @Override
-        public boolean equals(final Object o) {
+        public boolean equals(final @Nullable Object o) {
             if (this == o) {
                 return true;
             }
@@ -90,43 +92,43 @@ public abstract class Either<L, R> implements App<Either.Mu<R>, L> {
         }
 
         @Override
-        public <C, D> Either<C, D> mapBoth(final Function<? super L, ? extends C> f1, final Function<? super R, ? extends D> f2) {
+        public <C, D> @NotNull Either<C, D> mapBoth(final Function<? super L, ? extends C> f1, final @NotNull Function<? super R, ? extends D> f2) {
             return new Right<>(f2.apply(value));
         }
 
         @Override
-        public <T> T map(final Function<? super L, ? extends T> l, final Function<? super R, ? extends T> r) {
+        public <T> T map(final Function<? super L, ? extends T> l, final @NotNull Function<? super R, ? extends T> r) {
             return r.apply(value);
         }
 
         @Override
-        public Either<L, R> ifLeft(Consumer<? super L> consumer) {
+        public @NotNull Either<L, R> ifLeft(Consumer<? super L> consumer) {
             return this;
         }
 
         @Override
-        public Either<L, R> ifRight(Consumer<? super R> consumer) {
+        public @NotNull Either<L, R> ifRight(@NotNull Consumer<? super R> consumer) {
             consumer.accept(value);
             return this;
         }
 
         @Override
-        public Optional<L> left() {
+        public @NotNull Optional<L> left() {
             return Optional.empty();
         }
 
         @Override
-        public Optional<R> right() {
+        public @NotNull Optional<R> right() {
             return this.valueOptional == null ? this.valueOptional = Optional.of(this.value) : this.valueOptional; // Paper - reduce the optional allocation...
         }
 
         @Override
-        public String toString() {
+        public @NotNull String toString() {
             return "Right[" + value + "]";
         }
 
         @Override
-        public boolean equals(final Object o) {
+        public boolean equals(final @Nullable Object o) {
             if (this == o) {
                 return true;
             }
@@ -158,19 +160,19 @@ public abstract class Either<L, R> implements App<Either.Mu<R>, L> {
 
     public abstract Optional<R> right();
 
-    public <T> Either<T, R> mapLeft(final Function<? super L, ? extends T> l) {
+    public <T> Either<T, R> mapLeft(final @NotNull Function<? super L, ? extends T> l) {
         return map(t -> left(l.apply(t)), Either::right);
     }
 
-    public <T> Either<L, T> mapRight(final Function<? super R, ? extends T> l) {
+    public <T> Either<L, T> mapRight(final @NotNull Function<? super R, ? extends T> l) {
         return map(Either::left, t -> right(l.apply(t)));
     }
 
-    public static <L, R> Either<L, R> left(final L value) {
+    public static <L, R> @NotNull Either<L, R> left(final L value) {
         return new Left<>(value);
     }
 
-    public static <L, R> Either<L, R> right(final R value) {
+    public static <L, R> @NotNull Either<L, R> right(final R value) {
         return new Right<>(value);
     }
 
@@ -195,22 +197,22 @@ public abstract class Either<L, R> implements App<Either.Mu<R>, L> {
         public static final class Mu<R2> implements Applicative.Mu, Traversable.Mu, CocartesianLike.Mu {}
 
         @Override
-        public <T, R> App<Either.Mu<R2>, R> map(final Function<? super T, ? extends R> func, final App<Either.Mu<R2>, T> ts) {
+        public <T, R> App<Either.Mu<R2>, R> map(final @NotNull Function<? super T, ? extends R> func, final App<Either.Mu<R2>, T> ts) {
             return Either.unbox(ts).mapLeft(func);
         }
 
         @Override
-        public <A> App<Either.Mu<R2>, A> point(final A a) {
+        public <A> @NotNull App<Either.Mu<R2>, A> point(final A a) {
             return left(a);
         }
 
         @Override
-        public <A, R> Function<App<Either.Mu<R2>, A>, App<Either.Mu<R2>, R>> lift1(final App<Either.Mu<R2>, Function<A, R>> function) {
+        public <A, R> @NotNull Function<App<Either.Mu<R2>, A>, App<Either.Mu<R2>, R>> lift1(final App<Either.Mu<R2>, Function<A, R>> function) {
             return a -> Either.unbox(function).flatMap(f -> Either.unbox(a).mapLeft(f));
         }
 
         @Override
-        public <A, B, R> BiFunction<App<Either.Mu<R2>, A>, App<Either.Mu<R2>, B>, App<Either.Mu<R2>, R>> lift2(final App<Either.Mu<R2>, BiFunction<A, B, R>> function) {
+        public <A, B, R> @NotNull BiFunction<App<Either.Mu<R2>, A>, App<Either.Mu<R2>, B>, App<Either.Mu<R2>, R>> lift2(final App<Either.Mu<R2>, BiFunction<A, B, R>> function) {
             return (a, b) -> Either.unbox(function).flatMap(
                 f -> Either.unbox(a).flatMap(
                     av -> Either.unbox(b).mapLeft(
@@ -221,7 +223,7 @@ public abstract class Either<L, R> implements App<Either.Mu<R>, L> {
         }
 
         @Override
-        public <F extends K1, A, B> App<F, App<Either.Mu<R2>, B>> traverse(final Applicative<F, ?> applicative, final Function<A, App<F, B>> function, final App<Either.Mu<R2>, A> input) {
+        public <F extends K1, A, B> App<F, App<Either.Mu<R2>, B>> traverse(final @NotNull Applicative<F, ?> applicative, final @NotNull Function<A, App<F, B>> function, final App<Either.Mu<R2>, A> input) {
             return Either.unbox(input).map(
                 l -> {
                     final App<F, B> b = function.apply(l);
diff --git a/src/main/java/com/mojang/serialization/Dynamic.java b/src/main/java/com/mojang/serialization/Dynamic.java
index 044facc9de9e8e582d7953d681c0c051578979c3..ca7c7f0e9215cef59499ae46c7f2785d061118c5 100644
--- a/src/main/java/com/mojang/serialization/Dynamic.java
+++ b/src/main/java/com/mojang/serialization/Dynamic.java
@@ -5,6 +5,7 @@ package com.mojang.serialization;
 import com.google.common.collect.ImmutableMap;
 import com.mojang.datafixers.DataFixUtils;
 import com.mojang.datafixers.util.Pair;
+import org.jetbrains.annotations.NotNull;
 
 import javax.annotation.Nullable;
 import java.nio.ByteBuffer;
@@ -20,11 +21,11 @@ public class Dynamic<T> extends DynamicLike<T> {
     private static final boolean DEBUG_MISSING_KEYS = Boolean.getBoolean("Paper.debugDynamicMissingKeys"); // Paper
     private final T value;
 
-    public Dynamic(final DynamicOps<T> ops) {
+    public Dynamic(final @NotNull DynamicOps<T> ops) {
         this(ops, ops.empty());
     }
 
-    public Dynamic(final DynamicOps<T> ops, @Nullable final T value) {
+    public Dynamic(final @NotNull DynamicOps<T> ops, @Nullable final T value) {
         super(ops);
         this.value = value == null ? ops.empty() : value;
     }
@@ -33,12 +34,12 @@ public class Dynamic<T> extends DynamicLike<T> {
         return value;
     }
 
-    public Dynamic<T> map(final Function<? super T, ? extends T> function) {
+    public @NotNull Dynamic<T> map(final @NotNull Function<? super T, ? extends T> function) {
         return new Dynamic<>(ops, function.apply(value));
     }
 
     @SuppressWarnings("unchecked")
-    public <U> Dynamic<U> castTyped(final DynamicOps<U> ops) {
+    public <U> @NotNull Dynamic<U> castTyped(final DynamicOps<U> ops) {
         if (!Objects.equals(this.ops, ops)) {
             throw new IllegalStateException("Dynamic type doesn't match");
         }
@@ -49,12 +50,12 @@ public class Dynamic<T> extends DynamicLike<T> {
         return castTyped(ops).getValue();
     }
 
-    public OptionalDynamic<T> merge(final Dynamic<?> value) {
+    public @NotNull OptionalDynamic<T> merge(final @NotNull Dynamic<?> value) {
         final DataResult<T> merged = ops.mergeToList(this.value, value.cast(ops));
         return new OptionalDynamic<>(ops, merged.map(m -> new Dynamic<>(ops, m)));
     }
 
-    public OptionalDynamic<T> merge(final Dynamic<?> key, final Dynamic<?> value) {
+    public @NotNull OptionalDynamic<T> merge(final @NotNull Dynamic<?> key, final @NotNull Dynamic<?> value) {
         final DataResult<T> merged = ops.mergeToMap(this.value, key.cast(ops), value.cast(ops));
         return new OptionalDynamic<>(ops, merged.map(m -> new Dynamic<>(ops, m)));
     }
@@ -67,7 +68,7 @@ public class Dynamic<T> extends DynamicLike<T> {
         });
     }
 
-    public Dynamic<T> updateMapValues(final Function<Pair<Dynamic<?>, Dynamic<?>>, Pair<Dynamic<?>, Dynamic<?>>> updater) {
+    public Dynamic<T> updateMapValues(final @NotNull Function<Pair<Dynamic<?>, Dynamic<?>>, Pair<Dynamic<?>, Dynamic<?>>> updater) {
         return DataFixUtils.orElse(getMapValues().map(map -> map.entrySet().stream().map(e -> {
             final Pair<Dynamic<?>, Dynamic<?>> pair = updater.apply(Pair.of(e.getKey(), e.getValue()));
             return Pair.of(pair.getFirst().castTyped(ops), pair.getSecond().castTyped(ops));
@@ -110,7 +111,7 @@ public class Dynamic<T> extends DynamicLike<T> {
     }
 
     @Override
-    public OptionalDynamic<T> get(final String key) {
+    public @NotNull OptionalDynamic<T> get(final String key) {
         return new OptionalDynamic<>(ops, ops.getMap(value).flatMap(m -> {
             final T value = m.get(key);
             if (value == null) {
@@ -129,11 +130,11 @@ public class Dynamic<T> extends DynamicLike<T> {
         return map(v -> ops.remove(v, key));
     }
 
-    public Dynamic<T> set(final String key, final Dynamic<?> value) {
+    public Dynamic<T> set(final String key, final @NotNull Dynamic<?> value) {
         return map(v -> ops.set(v, key, value.cast(ops)));
     }
 
-    public Dynamic<T> update(final String key, final Function<Dynamic<?>, Dynamic<?>> function) {
+    public Dynamic<T> update(final String key, final @NotNull Function<Dynamic<?>, Dynamic<?>> function) {
         return map(v -> ops.update(v, key, value -> function.apply(new Dynamic<>(ops, value)).cast(ops)));
     }
 
@@ -152,7 +153,7 @@ public class Dynamic<T> extends DynamicLike<T> {
     }
 
     @Override
-    public boolean equals(final Object o) {
+    public boolean equals(final @org.jetbrains.annotations.Nullable Object o) {
         if (this == o) {
             return true;
         }
@@ -173,21 +174,21 @@ public class Dynamic<T> extends DynamicLike<T> {
         return String.format("%s[%s]", ops, value);
     }
 
-    public <R> Dynamic<R> convert(final DynamicOps<R> outOps) {
+    public <R> @NotNull Dynamic<R> convert(final @NotNull DynamicOps<R> outOps) {
         return new Dynamic<>(outOps, convert(ops, outOps, value));
     }
 
-    public <V> V into(final Function<? super Dynamic<T>, ? extends V> action) {
+    public <V> V into(final @NotNull Function<? super Dynamic<T>, ? extends V> action) {
         return action.apply(this);
     }
 
     @Override
-    public <A> DataResult<Pair<A, T>> decode(final Decoder<? extends A> decoder) {
+    public <A> DataResult<Pair<A, T>> decode(final @NotNull Decoder<? extends A> decoder) {
         return decoder.decode(ops, value).map(p -> p.mapFirst(Function.identity()));
     }
 
     @SuppressWarnings("unchecked")
-    public static <S, T> T convert(final DynamicOps<S> inOps, final DynamicOps<T> outOps, final S input) {
+    public static <S, T> T convert(final @NotNull DynamicOps<S> inOps, final DynamicOps<T> outOps, final S input) {
         if (Objects.equals(inOps, outOps)) {
             return (T) input;
         }
diff --git a/src/main/java/io/papermc/paper/CraftGameEventTag.java b/src/main/java/io/papermc/paper/CraftGameEventTag.java
index e7d9fd2702a1ce96596580fff8f5ee4fd3d22b5b..1b80599939544792fc2a6f784eaef02603c57e2a 100644
--- a/src/main/java/io/papermc/paper/CraftGameEventTag.java
+++ b/src/main/java/io/papermc/paper/CraftGameEventTag.java
@@ -18,7 +18,7 @@ import java.util.stream.Collectors;
 
 public class CraftGameEventTag extends CraftTag<net.minecraft.world.level.gameevent.GameEvent, GameEvent> {
 
-    public CraftGameEventTag(net.minecraft.core.Registry<net.minecraft.world.level.gameevent.GameEvent> registry, TagKey<net.minecraft.world.level.gameevent.GameEvent> tag) {
+    public CraftGameEventTag(net.minecraft.core.@NotNull Registry<net.minecraft.world.level.gameevent.GameEvent> registry, TagKey<net.minecraft.world.level.gameevent.GameEvent> tag) {
         super(registry, tag);
     }
 
diff --git a/src/main/java/io/papermc/paper/adventure/AdventureComponent.java b/src/main/java/io/papermc/paper/adventure/AdventureComponent.java
index 07cd02c6f9df00844b808218be2afd793c24b69a..346a02769361ec17e5639dfb98ca8e1a68bf9e75 100644
--- a/src/main/java/io/papermc/paper/adventure/AdventureComponent.java
+++ b/src/main/java/io/papermc/paper/adventure/AdventureComponent.java
@@ -15,6 +15,7 @@ import net.minecraft.network.chat.Style;
 import net.minecraft.network.chat.contents.LiteralContents;
 import net.minecraft.util.FormattedCharSequence;
 import org.checkerframework.checker.nullness.qual.MonotonicNonNull;
+import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
 public final class AdventureComponent implements net.minecraft.network.chat.Component {
@@ -25,7 +26,7 @@ public final class AdventureComponent implements net.minecraft.network.chat.Comp
         this.adventure = adventure;
     }
 
-    public net.minecraft.network.chat.Component deepConverted() {
+    public net.minecraft.network.chat.@NotNull Component deepConverted() {
         net.minecraft.network.chat.Component vanilla = this.vanilla;
         if (vanilla == null) {
             vanilla = PaperAdventure.WRAPPER_AWARE_SERIALIZER.serialize(this.adventure);
@@ -39,12 +40,12 @@ public final class AdventureComponent implements net.minecraft.network.chat.Comp
     }
 
     @Override
-    public Style getStyle() {
+    public @NotNull Style getStyle() {
         return this.deepConverted().getStyle();
     }
 
     @Override
-    public ComponentContents getContents() {
+    public @NotNull ComponentContents getContents() {
         if (this.adventure instanceof TextComponent) {
             return new LiteralContents(((TextComponent) this.adventure).content());
         } else {
@@ -53,33 +54,33 @@ public final class AdventureComponent implements net.minecraft.network.chat.Comp
     }
 
     @Override
-    public String getString() {
+    public @NotNull String getString() {
         return PlainTextComponentSerializer.plainText().serialize(this.adventure);
     }
 
     @Override
-    public List<net.minecraft.network.chat.Component> getSiblings() {
+    public @NotNull List<net.minecraft.network.chat.Component> getSiblings() {
         return this.deepConverted().getSiblings();
     }
 
     @Override
-    public MutableComponent plainCopy() {
+    public @NotNull MutableComponent plainCopy() {
         return this.deepConverted().plainCopy();
     }
 
     @Override
-    public MutableComponent copy() {
+    public @NotNull MutableComponent copy() {
         return this.deepConverted().copy();
     }
 
     @Override
-    public FormattedCharSequence getVisualOrderText() {
+    public @NotNull FormattedCharSequence getVisualOrderText() {
         return this.deepConverted().getVisualOrderText();
     }
 
     public static class Serializer implements JsonSerializer<AdventureComponent> {
         @Override
-        public JsonElement serialize(final AdventureComponent src, final Type type, final JsonSerializationContext context) {
+        public JsonElement serialize(final @NotNull AdventureComponent src, final Type type, final JsonSerializationContext context) {
             return GsonComponentSerializer.gson().serializer().toJsonTree(src.adventure, Component.class);
         }
     }
diff --git a/src/main/java/io/papermc/paper/adventure/DisplayNames.java b/src/main/java/io/papermc/paper/adventure/DisplayNames.java
index 3957f68182e8f7a773613a687f1d9a0cfa4f066c..172f46acd51e31d54a3faa0697a3b11b7566e264 100644
--- a/src/main/java/io/papermc/paper/adventure/DisplayNames.java
+++ b/src/main/java/io/papermc/paper/adventure/DisplayNames.java
@@ -4,16 +4,18 @@ import net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer;
 import net.minecraft.server.level.ServerPlayer;
 import org.bukkit.ChatColor;
 import org.bukkit.craftbukkit.entity.CraftPlayer;
+import org.jetbrains.annotations.NotNull;
+
 
 public final class DisplayNames {
     private DisplayNames() {
     }
 
-    public static String getLegacy(final CraftPlayer player) {
+    public static @NotNull String getLegacy(final @NotNull CraftPlayer player) {
         return getLegacy(player.getHandle());
     }
 
-    public static String getLegacy(final ServerPlayer player) {
+    public static @NotNull String getLegacy(final @NotNull ServerPlayer player) {
         final String legacy = player.displayName;
         if (legacy != null) {
             // thank you for being worse than wet socks, Bukkit
diff --git a/src/main/java/io/papermc/paper/adventure/LazyChatAudienceSet.java b/src/main/java/io/papermc/paper/adventure/LazyChatAudienceSet.java
index 2fd6c3e65354071af71c7d8ebb97b559b6e105ce..7d0f5bb67ebaf8b21075038a7b7eb69c5f907def 100644
--- a/src/main/java/io/papermc/paper/adventure/LazyChatAudienceSet.java
+++ b/src/main/java/io/papermc/paper/adventure/LazyChatAudienceSet.java
@@ -8,6 +8,8 @@ import org.bukkit.Bukkit;
 import org.bukkit.craftbukkit.util.LazyHashSet;
 import org.bukkit.craftbukkit.util.LazyPlayerSet;
 import org.bukkit.entity.Player;
+import org.jetbrains.annotations.NotNull;
+
 
 final class LazyChatAudienceSet extends LazyHashSet<Audience> {
     private final MinecraftServer server;
@@ -17,7 +19,7 @@ final class LazyChatAudienceSet extends LazyHashSet<Audience> {
     }
 
     @Override
-    protected Set<Audience> makeReference() {
+    protected @NotNull Set<Audience> makeReference() {
         final Set<Player> playerSet = LazyPlayerSet.makePlayerSet(this.server);
         final HashSet<Audience> audiences = new HashSet<>(playerSet);
         audiences.add(Bukkit.getConsoleSender());
diff --git a/src/main/java/io/papermc/paper/adventure/PaperAdventure.java b/src/main/java/io/papermc/paper/adventure/PaperAdventure.java
index 01e424792f68bac73ec41726031ebbb53df13da7..147d049c472bf1f8caf9f91ba7c217b9ff06d01f 100644
--- a/src/main/java/io/papermc/paper/adventure/PaperAdventure.java
+++ b/src/main/java/io/papermc/paper/adventure/PaperAdventure.java
@@ -119,11 +119,11 @@ public final class PaperAdventure {
 
     // Key
 
-    public static ResourceLocation asVanilla(final Key key) {
+    public static @NotNull ResourceLocation asVanilla(final @NotNull Key key) {
         return new ResourceLocation(key.namespace(), key.value());
     }
 
-    public static ResourceLocation asVanillaNullable(final Key key) {
+    public static ResourceLocation asVanillaNullable(final @Nullable Key key) {
         if (key == null) {
             return null;
         }
@@ -132,11 +132,11 @@ public final class PaperAdventure {
 
     // Component
 
-    public static Component asAdventure(final net.minecraft.network.chat.Component component) {
+    public static Component asAdventure(final net.minecraft.network.chat.@Nullable Component component) {
         return component == null ? Component.empty() : GsonComponentSerializer.gson().serializer().fromJson(net.minecraft.network.chat.Component.Serializer.toJsonTree(component), Component.class);
     }
 
-    public static ArrayList<Component> asAdventure(final List<net.minecraft.network.chat.Component> vanillas) {
+    public static @NotNull ArrayList<Component> asAdventure(final @NotNull List<net.minecraft.network.chat.Component> vanillas) {
         final ArrayList<Component> adventures = new ArrayList<>(vanillas.size());
         for (final net.minecraft.network.chat.Component vanilla : vanillas) {
             adventures.add(asAdventure(vanilla));
@@ -144,7 +144,7 @@ public final class PaperAdventure {
         return adventures;
     }
 
-    public static ArrayList<Component> asAdventureFromJson(final List<String> jsonStrings) {
+    public static @NotNull ArrayList<Component> asAdventureFromJson(final @NotNull List<String> jsonStrings) {
         final ArrayList<Component> adventures = new ArrayList<>(jsonStrings.size());
         for (final String json : jsonStrings) {
             adventures.add(GsonComponentSerializer.gson().deserialize(json));
@@ -152,7 +152,7 @@ public final class PaperAdventure {
         return adventures;
     }
 
-    public static List<String> asJson(final List<Component> adventures) {
+    public static @NotNull List<String> asJson(final @NotNull List<Component> adventures) {
         final List<String> jsons = new ArrayList<>(adventures.size());
         for (final Component component : adventures) {
             jsons.add(GsonComponentSerializer.gson().serialize(component));
@@ -160,13 +160,13 @@ public final class PaperAdventure {
         return jsons;
     }
 
-    public static net.minecraft.network.chat.Component asVanilla(final Component component) {
+    public static net.minecraft.network.chat.Component asVanilla(final @Nullable Component component) {
         if (component == null) return null;
         if (true) return new AdventureComponent(component);
         return net.minecraft.network.chat.Component.Serializer.fromJson(GsonComponentSerializer.gson().serializer().toJsonTree(component));
     }
 
-    public static List<net.minecraft.network.chat.Component> asVanilla(final List<Component> adventures) {
+    public static @NotNull List<net.minecraft.network.chat.Component> asVanilla(final @NotNull List<Component> adventures) {
         final List<net.minecraft.network.chat.Component> vanillas = new ArrayList<>(adventures.size());
         for (final Component adventure : adventures) {
             vanillas.add(asVanilla(adventure));
@@ -174,22 +174,22 @@ public final class PaperAdventure {
         return vanillas;
     }
 
-    public static String asJsonString(final Component component, final Locale locale) {
+    public static @NotNull String asJsonString(final @NotNull Component component, final Locale locale) {
         return GsonComponentSerializer.gson().serialize(translated(component, locale));
     }
 
-    public static String asJsonString(final net.minecraft.network.chat.Component component, final Locale locale) {
+    public static @NotNull String asJsonString(final net.minecraft.network.chat.Component component, final Locale locale) {
         if (component instanceof AdventureComponent) {
             return asJsonString(((AdventureComponent) component).adventure, locale);
         }
         return net.minecraft.network.chat.Component.Serializer.toJson(component);
     }
 
-    public static String asPlain(final Component component, final Locale locale) {
+    public static @NotNull String asPlain(final @NotNull Component component, final Locale locale) {
         return PlainTextComponentSerializer.plainText().serialize(translated(component, locale));
     }
 
-    private static Component translated(final Component component, final Locale locale) {
+    private static @NotNull Component translated(final @NotNull Component component, final @Nullable Locale locale) {
         return GlobalTranslator.render(
             component,
             // play it safe
@@ -219,7 +219,7 @@ public final class PaperAdventure {
 
     // BossBar
 
-    public static BossEvent.BossBarColor asVanilla(final BossBar.Color color) {
+    public static BossEvent.@NotNull BossBarColor asVanilla(final BossBar.@NotNull Color color) {
         return switch (color) {
             case PINK -> BossEvent.BossBarColor.PINK;
             case BLUE -> BossEvent.BossBarColor.BLUE;
@@ -231,7 +231,7 @@ public final class PaperAdventure {
         };
     }
 
-    public static BossBar.Color asAdventure(final BossEvent.BossBarColor color) {
+    public static BossBar.@NotNull Color asAdventure(final BossEvent.@NotNull BossBarColor color) {
         return switch (color) {
             case PINK -> BossBar.Color.PINK;
             case BLUE -> BossBar.Color.BLUE;
@@ -243,7 +243,7 @@ public final class PaperAdventure {
         };
     }
 
-    public static BossEvent.BossBarOverlay asVanilla(final BossBar.Overlay overlay) {
+    public static BossEvent.@NotNull BossBarOverlay asVanilla(final BossBar.@NotNull Overlay overlay) {
         return switch (overlay) {
             case PROGRESS -> BossEvent.BossBarOverlay.PROGRESS;
             case NOTCHED_6 -> BossEvent.BossBarOverlay.NOTCHED_6;
@@ -253,7 +253,7 @@ public final class PaperAdventure {
         };
     }
 
-    public static BossBar.Overlay asAdventure(final BossEvent.BossBarOverlay overlay) {
+    public static BossBar.@NotNull Overlay asAdventure(final BossEvent.@NotNull BossBarOverlay overlay) {
         return switch (overlay) {
             case PROGRESS -> BossBar.Overlay.PROGRESS;
             case NOTCHED_6 -> BossBar.Overlay.NOTCHED_6;
@@ -263,7 +263,7 @@ public final class PaperAdventure {
         };
     }
 
-    public static void setFlag(final BossBar bar, final BossBar.Flag flag, final boolean value) {
+    public static void setFlag(final @NotNull BossBar bar, final BossBar.@NotNull Flag flag, final boolean value) {
         if (value) {
             bar.addFlag(flag);
         } else {
@@ -273,7 +273,7 @@ public final class PaperAdventure {
 
     // Book
 
-    public static ItemStack asItemStack(final Book book, final Locale locale) {
+    public static @NotNull ItemStack asItemStack(final @NotNull Book book, final Locale locale) {
         final ItemStack item = new ItemStack(net.minecraft.world.item.Items.WRITTEN_BOOK, 1);
         final CompoundTag tag = item.getOrCreateTag();
         tag.putString(WrittenBookItem.TAG_TITLE, validateField(asPlain(book.title(), locale), WrittenBookItem.TITLE_MAX_LENGTH, WrittenBookItem.TAG_TITLE));
@@ -289,7 +289,7 @@ public final class PaperAdventure {
         return item;
     }
 
-    private static String validateField(final String content, final int length, final String name) {
+    private static String validateField(final @Nullable String content, final int length, final String name) {
         if (content == null) {
             return content;
         }
@@ -303,7 +303,7 @@ public final class PaperAdventure {
 
     // Sounds
 
-    public static SoundSource asVanilla(final Sound.Source source) {
+    public static @NotNull SoundSource asVanilla(final Sound.@NotNull Source source) {
         return switch (source) {
             case MASTER -> SoundSource.MASTER;
             case MUSIC -> SoundSource.MUSIC;
@@ -340,7 +340,7 @@ public final class PaperAdventure {
 
     // Colors
 
-    public static @NotNull TextColor asAdventure(final ChatFormatting formatting) {
+    public static @NotNull TextColor asAdventure(final @NotNull ChatFormatting formatting) {
         final Integer color = formatting.getColor();
         if (color == null) {
             throw new IllegalArgumentException("Not a valid color");
@@ -348,7 +348,7 @@ public final class PaperAdventure {
         return TextColor.color(color);
     }
 
-    public static @Nullable ChatFormatting asVanilla(final TextColor color) {
+    public static @Nullable ChatFormatting asVanilla(final @NotNull TextColor color) {
         return ChatFormatting.getByHexValue(color.value());
     }
 }
diff --git a/src/main/java/io/papermc/paper/adventure/WrapperAwareSerializer.java b/src/main/java/io/papermc/paper/adventure/WrapperAwareSerializer.java
index 2a08e0461db4e699b7e6a1558a4419c848fc7f4f..4f2bb2c70c1e4f8f64032215869ca6ccc82f33dd 100644
--- a/src/main/java/io/papermc/paper/adventure/WrapperAwareSerializer.java
+++ b/src/main/java/io/papermc/paper/adventure/WrapperAwareSerializer.java
@@ -3,10 +3,12 @@ package io.papermc.paper.adventure;
 import net.kyori.adventure.text.Component;
 import net.kyori.adventure.text.serializer.ComponentSerializer;
 import net.kyori.adventure.text.serializer.gson.GsonComponentSerializer;
+import org.jetbrains.annotations.NotNull;
+
 
 final class WrapperAwareSerializer implements ComponentSerializer<Component, Component, net.minecraft.network.chat.Component> {
     @Override
-    public Component deserialize(final net.minecraft.network.chat.Component input) {
+    public @NotNull Component deserialize(final net.minecraft.network.chat.Component input) {
         if (input instanceof AdventureComponent) {
             return ((AdventureComponent) input).adventure;
         }
@@ -14,7 +16,7 @@ final class WrapperAwareSerializer implements ComponentSerializer<Component, Com
     }
 
     @Override
-    public net.minecraft.network.chat.Component serialize(final Component component) {
+    public net.minecraft.network.chat.@NotNull Component serialize(final Component component) {
         return net.minecraft.network.chat.Component.Serializer.fromJson(GsonComponentSerializer.gson().serializer().toJsonTree(component));
     }
 }
diff --git a/src/main/java/io/papermc/paper/adventure/providers/ComponentLoggerProviderImpl.java b/src/main/java/io/papermc/paper/adventure/providers/ComponentLoggerProviderImpl.java
index 9a3c1314d5a0aa20380662595359580b1a97be89..c697910217731ccebf7bb276e7624d6f0c5d2974 100644
--- a/src/main/java/io/papermc/paper/adventure/providers/ComponentLoggerProviderImpl.java
+++ b/src/main/java/io/papermc/paper/adventure/providers/ComponentLoggerProviderImpl.java
@@ -15,7 +15,7 @@ public class ComponentLoggerProviderImpl implements ComponentLoggerProvider {
         return helper.delegating(LoggerFactory.getLogger(name), this::serialize);
     }
 
-    private String serialize(final Component message) {
+    private @NotNull String serialize(final @NotNull Component message) {
         return HexFormattingConverter.SERIALIZER.serialize(GlobalTranslator.render(message, Locale.getDefault()));
     }
 }
diff --git a/src/main/java/io/papermc/paper/adventure/providers/NBTLegacyHoverEventSerializer.java b/src/main/java/io/papermc/paper/adventure/providers/NBTLegacyHoverEventSerializer.java
index b3514a3e415f3444a235f1a45f0c53741264e516..48ebe589277af18fd4d16241b23dabf5395bba5c 100644
--- a/src/main/java/io/papermc/paper/adventure/providers/NBTLegacyHoverEventSerializer.java
+++ b/src/main/java/io/papermc/paper/adventure/providers/NBTLegacyHoverEventSerializer.java
@@ -11,6 +11,7 @@ import net.kyori.adventure.util.Codec;
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.nbt.Tag;
 import net.minecraft.nbt.TagParser;
+import org.jetbrains.annotations.NotNull;
 
 import java.io.IOException;
 import java.util.UUID;
@@ -31,7 +32,7 @@ final class NBTLegacyHoverEventSerializer implements LegacyHoverEventSerializer
     }
 
     @Override
-    public HoverEvent.ShowItem deserializeShowItem(final Component input) throws IOException {
+    public HoverEvent.@NotNull ShowItem deserializeShowItem(final @NotNull Component input) throws IOException {
         final String raw = PlainTextComponentSerializer.plainText().serialize(input);
         try {
             final CompoundTag contents = SNBT_CODEC.decode(raw);
@@ -47,7 +48,7 @@ final class NBTLegacyHoverEventSerializer implements LegacyHoverEventSerializer
     }
 
     @Override
-    public HoverEvent.ShowEntity deserializeShowEntity(final Component input, final Codec.Decoder<Component, String, ? extends RuntimeException> componentCodec) throws IOException {
+    public HoverEvent.@NotNull ShowEntity deserializeShowEntity(final @NotNull Component input, final Codec.@NotNull Decoder<Component, String, ? extends RuntimeException> componentCodec) throws IOException {
         final String raw = PlainTextComponentSerializer.plainText().serialize(input);
         try {
             final CompoundTag contents = SNBT_CODEC.decode(raw);
@@ -62,7 +63,7 @@ final class NBTLegacyHoverEventSerializer implements LegacyHoverEventSerializer
     }
 
     @Override
-    public Component serializeShowItem(final HoverEvent.ShowItem input) throws IOException {
+    public @NotNull Component serializeShowItem(final HoverEvent.@NotNull ShowItem input) throws IOException {
         final CompoundTag tag = new CompoundTag();
         tag.putString(ITEM_TYPE, input.item().asString());
         tag.putByte(ITEM_COUNT, (byte) input.count());
@@ -77,7 +78,7 @@ final class NBTLegacyHoverEventSerializer implements LegacyHoverEventSerializer
     }
 
     @Override
-    public Component serializeShowEntity(final HoverEvent.ShowEntity input, final Codec.Encoder<Component, String, ? extends RuntimeException> componentCodec) throws IOException {
+    public @NotNull Component serializeShowEntity(final HoverEvent.@NotNull ShowEntity input, final Codec.@NotNull Encoder<Component, String, ? extends RuntimeException> componentCodec) throws IOException {
         final CompoundTag tag = new CompoundTag();
         tag.putString(ENTITY_ID, input.id().toString());
         tag.putString(ENTITY_TYPE, input.type().asString());
diff --git a/src/main/java/io/papermc/paper/attribute/UnmodifiableAttributeMap.java b/src/main/java/io/papermc/paper/attribute/UnmodifiableAttributeMap.java
index cf9d28ea97d93cec05c9fb768d59e283ca915565..bdfd32a768175188ff02c18b54abd98039558438 100644
--- a/src/main/java/io/papermc/paper/attribute/UnmodifiableAttributeMap.java
+++ b/src/main/java/io/papermc/paper/attribute/UnmodifiableAttributeMap.java
@@ -10,7 +10,7 @@ import org.jetbrains.annotations.Nullable;
 
 public class UnmodifiableAttributeMap implements Attributable {
 
-    private final AttributeSupplier handle;
+    private final @NotNull AttributeSupplier handle;
 
     public UnmodifiableAttributeMap(@NotNull AttributeSupplier handle) {
         this.handle = handle;
diff --git a/src/main/java/io/papermc/paper/chunk/PlayerChunkLoader.java b/src/main/java/io/papermc/paper/chunk/PlayerChunkLoader.java
index 0b060183429f4c72ec767075538477b4302bbf0d..42afe116a9f0ab2d03d64edfc5b52e8871d996b7 100644
--- a/src/main/java/io/papermc/paper/chunk/PlayerChunkLoader.java
+++ b/src/main/java/io/papermc/paper/chunk/PlayerChunkLoader.java
@@ -22,6 +22,8 @@ import net.minecraft.world.level.chunk.LevelChunk;
 import org.apache.commons.lang3.mutable.MutableObject;
 import org.bukkit.craftbukkit.entity.CraftPlayer;
 import org.bukkit.entity.Player;
+import org.jetbrains.annotations.NotNull;
+
 import java.util.ArrayDeque;
 import java.util.ArrayList;
 import java.util.List;
@@ -36,11 +38,11 @@ public final class PlayerChunkLoader {
     public static final int TICK_TICKET_LEVEL = 31;
     public static final int LOADED_TICKET_LEVEL = 33;
 
-    public static int getTickViewDistance(final Player player) {
+    public static int getTickViewDistance(final @NotNull Player player) {
         return getTickViewDistance(((CraftPlayer)player).getHandle());
     }
 
-    public static int getTickViewDistance(final ServerPlayer player) {
+    public static int getTickViewDistance(final @NotNull ServerPlayer player) {
         final ServerLevel level = (ServerLevel)player.level;
         final PlayerLoaderData data = level.chunkSource.chunkMap.playerChunkManager.getData(player);
         if (data == null) {
@@ -49,11 +51,11 @@ public final class PlayerChunkLoader {
         return data.getTargetTickViewDistance();
     }
 
-    public static int getLoadViewDistance(final Player player) {
+    public static int getLoadViewDistance(final @NotNull Player player) {
         return getLoadViewDistance(((CraftPlayer)player).getHandle());
     }
 
-    public static int getLoadViewDistance(final ServerPlayer player) {
+    public static int getLoadViewDistance(final @NotNull ServerPlayer player) {
         final ServerLevel level = (ServerLevel)player.level;
         final PlayerLoaderData data = level.chunkSource.chunkMap.playerChunkManager.getData(player);
         if (data == null) {
@@ -62,11 +64,11 @@ public final class PlayerChunkLoader {
         return data.getLoadDistance();
     }
 
-    public static int getSendViewDistance(final Player player) {
+    public static int getSendViewDistance(final @NotNull Player player) {
         return getSendViewDistance(((CraftPlayer)player).getHandle());
     }
 
-    public static int getSendViewDistance(final ServerPlayer player) {
+    public static int getSendViewDistance(final @NotNull ServerPlayer player) {
         final ServerLevel level = (ServerLevel)player.level;
         final PlayerLoaderData data = level.chunkSource.chunkMap.playerChunkManager.getData(player);
         if (data == null) {
@@ -79,7 +81,7 @@ public final class PlayerChunkLoader {
     protected final Reference2ObjectLinkedOpenHashMap<ServerPlayer, PlayerLoaderData> playerMap = new Reference2ObjectLinkedOpenHashMap<>(512, 0.7f);
     protected final ReferenceLinkedOpenHashSet<PlayerLoaderData> chunkSendQueue = new ReferenceLinkedOpenHashSet<>(512, 0.7f);
 
-    protected final TreeSet<PlayerLoaderData> chunkLoadQueue = new TreeSet<>((final PlayerLoaderData p1, final PlayerLoaderData p2) -> {
+    protected final TreeSet<PlayerLoaderData> chunkLoadQueue = new TreeSet<>((final @NotNull PlayerLoaderData p1, final @NotNull PlayerLoaderData p2) -> {
         if (p1 == p2) {
             return 0;
         }
@@ -109,7 +111,7 @@ public final class PlayerChunkLoader {
         return Integer.compare(System.identityHashCode(p1), System.identityHashCode(p2));
     });
 
-    protected final TreeSet<PlayerLoaderData> chunkSendWaitQueue = new TreeSet<>((final PlayerLoaderData p1, final PlayerLoaderData p2) -> {
+    protected final TreeSet<PlayerLoaderData> chunkSendWaitQueue = new TreeSet<>((final @NotNull PlayerLoaderData p1, final @NotNull PlayerLoaderData p2) -> {
         if (p1 == p2) {
             return 0;
         }
@@ -135,23 +137,23 @@ public final class PlayerChunkLoader {
     /**
      * The chunks to be sent to players, provided they're send-ready. Send-ready means the chunk and its 1 radius neighbours are loaded.
      */
-    public final PlayerAreaMap broadcastMap;
+    public final @NotNull PlayerAreaMap broadcastMap;
 
     /**
      * The chunks to be brought up to send-ready status. Send-ready means the chunk and its 1 radius neighbours are loaded.
      */
-    public final PlayerAreaMap loadMap;
+    public final @NotNull PlayerAreaMap loadMap;
 
     /**
      * Areamap used only to remove tickets for send-ready chunks. View distance is always + 1 of load view distance. Thus,
      * this map is always representing the chunks we are actually going to load.
      */
-    public final PlayerAreaMap loadTicketCleanup;
+    public final @NotNull PlayerAreaMap loadTicketCleanup;
 
     /**
      * The chunks to brought to ticking level. Each chunk must have 2 radius neighbours loaded before this can happen.
      */
-    public final PlayerAreaMap tickMap;
+    public final @NotNull PlayerAreaMap tickMap;
 
     /**
      * -1 if defaulting to [load distance], else always in [2, load distance]
@@ -459,7 +461,7 @@ public final class PlayerChunkLoader {
         data.unloadChunk(chunkX, chunkZ);
     }
 
-    public void addPlayer(final ServerPlayer player) {
+    public void addPlayer(final @NotNull ServerPlayer player) {
         TickThread.ensureTickThread("Cannot add player async");
         if (!player.isRealPlayer) {
             return;
@@ -470,7 +472,7 @@ public final class PlayerChunkLoader {
         }
     }
 
-    public void removePlayer(final ServerPlayer player) {
+    public void removePlayer(final @NotNull ServerPlayer player) {
         TickThread.ensureTickThread("Cannot remove player async");
         if (!player.isRealPlayer) {
             return;
@@ -492,7 +494,7 @@ public final class PlayerChunkLoader {
         }
     }
 
-    public void updatePlayer(final ServerPlayer player) {
+    public void updatePlayer(final @NotNull ServerPlayer player) {
         TickThread.ensureTickThread("Cannot update player async");
         if (!player.isRealPlayer) {
             return;
@@ -790,7 +792,7 @@ public final class PlayerChunkLoader {
         protected final LongOpenHashSet sentChunks = new LongOpenHashSet();
         protected final LongOpenHashSet chunksToBeSent = new LongOpenHashSet();
 
-        protected final TreeSet<ChunkPriorityHolder> sendQueue = new TreeSet<>((final ChunkPriorityHolder p1, final ChunkPriorityHolder p2) -> {
+        protected final TreeSet<ChunkPriorityHolder> sendQueue = new TreeSet<>((final @NotNull ChunkPriorityHolder p1, final @NotNull ChunkPriorityHolder p2) -> {
             final int distanceCompare = Integer.compare(p1.manhattanDistanceToPlayer, p2.manhattanDistanceToPlayer);
             if (distanceCompare != 0) {
                 return distanceCompare;
@@ -870,7 +872,7 @@ public final class PlayerChunkLoader {
             return this.sentChunks.contains(CoordinateUtils.getChunkKey(chunkX, chunkZ));
         }
 
-        public void sendChunk(final int chunkX, final int chunkZ, final Runnable onChunkSend) {
+        public void sendChunk(final int chunkX, final int chunkZ, final @NotNull Runnable onChunkSend) {
             if (this.sentChunks.add(CoordinateUtils.getChunkKey(chunkX, chunkZ))) {
                 this.player.getLevel().getChunkSource().chunkMap.updateChunkTracking(this.player,
                         new ChunkPos(chunkX, chunkZ), new MutableObject<>(), false, true); // unloaded, loaded
@@ -1105,7 +1107,7 @@ public final class PlayerChunkLoader {
                 }
             }
 
-            loadQueue.sort((final ChunkPriorityHolder p1, final ChunkPriorityHolder p2) -> {
+            loadQueue.sort((final @NotNull ChunkPriorityHolder p1, final @NotNull ChunkPriorityHolder p2) -> {
                 return Double.compare(p1.priority, p2.priority);
             });
 
diff --git a/src/main/java/io/papermc/paper/chunk/SingleThreadChunkRegionManager.java b/src/main/java/io/papermc/paper/chunk/SingleThreadChunkRegionManager.java
index a5f706d6f716b2a463ae58adcde69d9e665c7733..61024773ec5fdefc25bdafe76103e7ed462b5526 100644
--- a/src/main/java/io/papermc/paper/chunk/SingleThreadChunkRegionManager.java
+++ b/src/main/java/io/papermc/paper/chunk/SingleThreadChunkRegionManager.java
@@ -7,6 +7,9 @@ import it.unimi.dsi.fastutil.objects.ReferenceOpenHashSet;
 import io.papermc.paper.util.MCUtil;
 import net.minecraft.server.level.ServerLevel;
 import net.minecraft.world.level.ChunkPos;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Iterator;
@@ -74,14 +77,14 @@ public final class SingleThreadChunkRegionManager {
         return this.regionsBySection.get(MCUtil.getCoordinateKey(chunkX >> this.regionChunkShift, chunkZ >> this.regionChunkShift));
     }
 
-    public Region getRegion(final int chunkX, final int chunkZ) {
+    public @Nullable Region getRegion(final int chunkX, final int chunkZ) {
         final RegionSection section = this.regionsBySection.get(MCUtil.getCoordinateKey(chunkX >> regionChunkShift, chunkZ >> regionChunkShift));
         return section != null ? section.region : null;
     }
 
     private final List<Region> toMerge = new ArrayList<>();
 
-    protected RegionSection getOrCreateAndMergeSection(final int sectionX, final int sectionZ, final RegionSection force) {
+    protected @NotNull RegionSection getOrCreateAndMergeSection(final int sectionX, final int sectionZ, final @Nullable RegionSection force) {
         final long sectionKey = MCUtil.getCoordinateKey(sectionX, sectionZ);
 
         if (force == null) {
@@ -178,7 +181,7 @@ public final class SingleThreadChunkRegionManager {
         }
     }
 
-    protected void recalculateRegion(final Region region) {
+    protected void recalculateRegion(final @NotNull Region region) {
         region.markedForRecalc = false;
         //region.check();
         // clear unused regions
@@ -240,12 +243,12 @@ public final class SingleThreadChunkRegionManager {
         public final SingleThreadChunkRegionManager regionManager;
         public final RegionData regionData;
 
-        protected Region(final SingleThreadChunkRegionManager regionManager) {
+        protected Region(final @NotNull SingleThreadChunkRegionManager regionManager) {
             this.regionManager = regionManager;
             this.regionData = regionManager.regionDataSupplier.get();
         }
 
-        public IteratorSafeOrderedReferenceSet.Iterator<RegionSection> getSections() {
+        public IteratorSafeOrderedReferenceSet.@NotNull Iterator<RegionSection> getSections() {
             return this.sections.iterator(IteratorSafeOrderedReferenceSet.ITERATOR_FLAG_SEE_ADDITIONS);
         }
 
@@ -272,7 +275,7 @@ public final class SingleThreadChunkRegionManager {
 
         // note: it is not true that the region at this point is not in any region. use the region field on the section
         // to see if it is currently in another region.
-        protected final boolean addRegionSection(final RegionSection section) {
+        protected final boolean addRegionSection(final @NotNull RegionSection section) {
             if (!this.sections.add(section)) {
                 return false;
             }
@@ -283,7 +286,7 @@ public final class SingleThreadChunkRegionManager {
             return true;
         }
 
-        protected final boolean removeRegionSection(final RegionSection section) {
+        protected final boolean removeRegionSection(final @NotNull RegionSection section) {
             if (!this.sections.remove(section)) {
                 return false;
             }
@@ -293,7 +296,7 @@ public final class SingleThreadChunkRegionManager {
             return true;
         }
 
-        protected void mergeInto(final Region mergeTarget) {
+        protected void mergeInto(final @NotNull Region mergeTarget) {
             if (this == mergeTarget) {
                 throw new IllegalStateException("Cannot merge a region onto itself");
             }
@@ -341,7 +344,7 @@ public final class SingleThreadChunkRegionManager {
         }
 
         @Override
-        public String toString() {
+        public @NotNull String toString() {
             final StringBuilder ret = new StringBuilder(128);
 
             ret.append("Region{");
@@ -366,14 +369,14 @@ public final class SingleThreadChunkRegionManager {
 
     public static final class RegionSection {
         protected final long regionCoordinate;
-        protected final long[] chunksBitset;
+        protected final long @NotNull [] chunksBitset;
         protected int chunkCount;
         protected Region region;
 
         public final SingleThreadChunkRegionManager regionManager;
         public final RegionSectionData sectionData;
 
-        protected RegionSection(final long regionCoordinate, final SingleThreadChunkRegionManager regionManager) {
+        protected RegionSection(final long regionCoordinate, final @NotNull SingleThreadChunkRegionManager regionManager) {
             this.regionCoordinate = regionCoordinate;
             this.regionManager = regionManager;
             this.chunksBitset = new long[Math.max(1, regionManager.regionSectionChunkSize * regionManager.regionSectionChunkSize / Long.SIZE)];
@@ -427,7 +430,7 @@ public final class SingleThreadChunkRegionManager {
         }
 
         @Override
-        public String toString() {
+        public @NotNull String toString() {
             return "RegionSection{" +
                     "regionCoordinate=" + new ChunkPos(this.regionCoordinate).toString() + "," +
                     "chunkCount=" + this.chunkCount + "," +
@@ -436,7 +439,7 @@ public final class SingleThreadChunkRegionManager {
                     "}";
         }
 
-        public String toStringWithRegion() {
+        public @NotNull String toStringWithRegion() {
             return "RegionSection{" +
                     "regionCoordinate=" + new ChunkPos(this.regionCoordinate).toString() + "," +
                     "chunkCount=" + this.chunkCount + "," +
@@ -446,7 +449,7 @@ public final class SingleThreadChunkRegionManager {
                     "}";
         }
 
-        private static String toString(final long[] array) {
+        private static @NotNull String toString(final long @NotNull [] array) {
             final StringBuilder ret = new StringBuilder();
             for (final long value : array) {
                 // zero pad the hex string
diff --git a/src/main/java/io/papermc/paper/chunk/system/entity/EntityLookup.java b/src/main/java/io/papermc/paper/chunk/system/entity/EntityLookup.java
index 61c170555c8854b102c640b0b6a615f9f732edbf..178bf9ca0bcf7e5f5eb8fd7113afdc225ce660e0 100644
--- a/src/main/java/io/papermc/paper/chunk/system/entity/EntityLookup.java
+++ b/src/main/java/io/papermc/paper/chunk/system/entity/EntityLookup.java
@@ -57,14 +57,14 @@ public final class EntityLookup implements LevelEntityGetter<Entity> {
     private final Object2ReferenceOpenHashMap<UUID, Entity> entityByUUID = new Object2ReferenceOpenHashMap<>();
     private final EntityList accessibleEntities = new EntityList();
 
-    public EntityLookup(final ServerLevel world, final LevelCallback<Entity> worldCallback) {
+    public EntityLookup(final @NotNull ServerLevel world, final LevelCallback<Entity> worldCallback) {
         this.world = world;
         this.minSection = WorldUtil.getMinSection(world);
         this.maxSection = WorldUtil.getMaxSection(world);
         this.worldCallback = worldCallback;
     }
 
-    private static Entity maskNonAccessible(final Entity entity) {
+    private static Entity maskNonAccessible(final @Nullable Entity entity) {
         if (entity == null) {
             return null;
         }
@@ -124,11 +124,11 @@ public final class EntityLookup implements LevelEntityGetter<Entity> {
         }
     }
 
-    public boolean hasEntity(final UUID uuid) {
+    public boolean hasEntity(final @NotNull UUID uuid) {
         return this.get(uuid) != null;
     }
 
-    public String getDebugInfo() {
+    public @NotNull String getDebugInfo() {
         return "count_id:" + this.entityById.size() + ",count_uuid:" + this.entityByUUID.size() + ",region_count:" + this.regions.size();
     }
 
@@ -138,7 +138,7 @@ public final class EntityLookup implements LevelEntityGetter<Entity> {
         private final int off;
         private final int length;
 
-        public ArrayIterable(final T[] array, final int off, final int length) {
+        public ArrayIterable(final T @NotNull [] array, final int off, final int length) {
             this.array = array;
             this.off = off;
             this.length = length;
@@ -186,7 +186,7 @@ public final class EntityLookup implements LevelEntityGetter<Entity> {
     }
 
     @Override
-    public Iterable<Entity> getAll() {
+    public @NotNull Iterable<Entity> getAll() {
         return new ArrayIterable<>(this.accessibleEntities.getRawData(), 0, this.accessibleEntities.size());
     }
 
@@ -225,7 +225,7 @@ public final class EntityLookup implements LevelEntityGetter<Entity> {
         }
     }
 
-    public void entityStatusChange(final Entity entity, final ChunkEntitySlices slices, final Visibility oldVisibility, final Visibility newVisibility, final boolean moved,
+    public void entityStatusChange(final @NotNull Entity entity, final @Nullable ChunkEntitySlices slices, final @NotNull Visibility oldVisibility, final @NotNull Visibility newVisibility, final boolean moved,
                                    final boolean created, final boolean destroyed) {
         TickThread.ensureTickThread(entity, "Entity status change must only happen on the main thread");
 
@@ -304,29 +304,29 @@ public final class EntityLookup implements LevelEntityGetter<Entity> {
         this.getChunk(x, z).updateStatus(newStatus, this);
     }
 
-    public void addLegacyChunkEntities(final List<Entity> entities) {
+    public void addLegacyChunkEntities(final @NotNull List<Entity> entities) {
         for (int i = 0, len = entities.size(); i < len; ++i) {
             this.addEntity(entities.get(i), true);
         }
     }
 
-    public void addEntityChunkEntities(final List<Entity> entities) {
+    public void addEntityChunkEntities(final @NotNull List<Entity> entities) {
         for (int i = 0, len = entities.size(); i < len; ++i) {
             this.addEntity(entities.get(i), true);
         }
     }
 
-    public void addWorldGenChunkEntities(final List<Entity> entities) {
+    public void addWorldGenChunkEntities(final @NotNull List<Entity> entities) {
         for (int i = 0, len = entities.size(); i < len; ++i) {
             this.addEntity(entities.get(i), false);
         }
     }
 
-    public boolean addNewEntity(final Entity entity) {
+    public boolean addNewEntity(final @NotNull Entity entity) {
         return this.addEntity(entity, false);
     }
 
-    public static Visibility getEntityStatus(final Entity entity) {
+    public static @NotNull Visibility getEntityStatus(final @NotNull Entity entity) {
         if (entity.isAlwaysTicking()) {
             return Visibility.TICKING;
         }
@@ -334,7 +334,7 @@ public final class EntityLookup implements LevelEntityGetter<Entity> {
         return Visibility.fromFullChunkStatus(entityStatus == null ? ChunkHolder.FullChunkStatus.INACCESSIBLE : entityStatus);
     }
 
-    private boolean addEntity(final Entity entity, final boolean fromDisk) {
+    private boolean addEntity(final @NotNull Entity entity, final boolean fromDisk) {
         final BlockPos pos = entity.blockPosition();
         final int sectionX = pos.getX() >> 4;
         final int sectionY = Mth.clamp(pos.getY() >> 4, this.minSection, this.maxSection);
@@ -390,7 +390,7 @@ public final class EntityLookup implements LevelEntityGetter<Entity> {
         return true;
     }
 
-    private void removeEntity(final Entity entity) {
+    private void removeEntity(final @NotNull Entity entity) {
         final int sectionX = entity.sectionX;
         final int sectionY = entity.sectionY;
         final int sectionZ = entity.sectionZ;
@@ -422,7 +422,7 @@ public final class EntityLookup implements LevelEntityGetter<Entity> {
         }
     }
 
-    private ChunkEntitySlices moveEntity(final Entity entity) {
+    private @Nullable ChunkEntitySlices moveEntity(final @NotNull Entity entity) {
         // ensure we own the entity
         TickThread.ensureTickThread(entity, "Cannot move entity off-main");
 
@@ -459,7 +459,7 @@ public final class EntityLookup implements LevelEntityGetter<Entity> {
         return slices;
     }
 
-    public void getEntitiesWithoutDragonParts(final Entity except, final AABB box, final List<Entity> into, final Predicate<? super Entity> predicate) {
+    public void getEntitiesWithoutDragonParts(final Entity except, final @NotNull AABB box, final List<Entity> into, final Predicate<? super Entity> predicate) {
         final int minChunkX = (Mth.floor(box.minX) - 2) >> 4;
         final int minChunkZ = (Mth.floor(box.minZ) - 2) >> 4;
         final int maxChunkX = (Mth.floor(box.maxX) + 2) >> 4;
@@ -498,7 +498,7 @@ public final class EntityLookup implements LevelEntityGetter<Entity> {
         }
     }
 
-    public void getEntities(final Entity except, final AABB box, final List<Entity> into, final Predicate<? super Entity> predicate) {
+    public void getEntities(final Entity except, final @NotNull AABB box, final List<Entity> into, final Predicate<? super Entity> predicate) {
         final int minChunkX = (Mth.floor(box.minX) - 2) >> 4;
         final int minChunkZ = (Mth.floor(box.minZ) - 2) >> 4;
         final int maxChunkX = (Mth.floor(box.maxX) + 2) >> 4;
@@ -537,7 +537,7 @@ public final class EntityLookup implements LevelEntityGetter<Entity> {
         }
     }
 
-    public void getHardCollidingEntities(final Entity except, final AABB box, final List<Entity> into, final Predicate<? super Entity> predicate) {
+    public void getHardCollidingEntities(final Entity except, final @NotNull AABB box, final List<Entity> into, final Predicate<? super Entity> predicate) {
         final int minChunkX = (Mth.floor(box.minX) - 2) >> 4;
         final int minChunkZ = (Mth.floor(box.minZ) - 2) >> 4;
         final int maxChunkX = (Mth.floor(box.maxX) + 2) >> 4;
@@ -576,7 +576,7 @@ public final class EntityLookup implements LevelEntityGetter<Entity> {
         }
     }
 
-    public <T extends Entity> void getEntities(final EntityType<?> type, final AABB box, final List<? super T> into,
+    public <T extends Entity> void getEntities(final EntityType<?> type, final @NotNull AABB box, final List<? super T> into,
                                                final Predicate<? super T> predicate) {
         final int minChunkX = (Mth.floor(box.minX) - 2) >> 4;
         final int minChunkZ = (Mth.floor(box.minZ) - 2) >> 4;
@@ -616,7 +616,7 @@ public final class EntityLookup implements LevelEntityGetter<Entity> {
         }
     }
 
-    public <T extends Entity> void getEntities(final Class<? extends T> clazz, final Entity except, final AABB box, final List<? super T> into,
+    public <T extends Entity> void getEntities(final Class<? extends T> clazz, final Entity except, final @NotNull AABB box, final List<? super T> into,
                                                final Predicate<? super T> predicate) {
         final int minChunkX = (Mth.floor(box.minX) - 2) >> 4;
         final int minChunkZ = (Mth.floor(box.minZ) - 2) >> 4;
@@ -677,7 +677,7 @@ public final class EntityLookup implements LevelEntityGetter<Entity> {
         this.removeChunk(chunkX, chunkZ);
     }
 
-    public ChunkEntitySlices getChunk(final int chunkX, final int chunkZ) {
+    public @Nullable ChunkEntitySlices getChunk(final int chunkX, final int chunkZ) {
         final ChunkSlicesRegion region = this.getRegion(chunkX >> REGION_SHIFT, chunkZ >> REGION_SHIFT);
         if (region == null) {
             return null;
@@ -813,7 +813,7 @@ public final class EntityLookup implements LevelEntityGetter<Entity> {
         }
 
         @Override
-        public void onRemove(final Entity.RemovalReason reason) {
+        public void onRemove(final Entity.@NotNull RemovalReason reason) {
             final Entity entity = this.entity;
             TickThread.ensureTickThread(entity, "Cannot remove entity off-main"); // Paper - rewrite chunk system
             final Visibility tickingState = EntityLookup.getEntityStatus(entity);
diff --git a/src/main/java/io/papermc/paper/chunk/system/io/RegionFileIOThread.java b/src/main/java/io/papermc/paper/chunk/system/io/RegionFileIOThread.java
index a08cde4eefe879adcee7c4118bc38f98c5097ed0..9b28c8e9e5bc2dfa300f5f7a3a41cc6d6136aeb1 100644
--- a/src/main/java/io/papermc/paper/chunk/system/io/RegionFileIOThread.java
+++ b/src/main/java/io/papermc/paper/chunk/system/io/RegionFileIOThread.java
@@ -15,6 +15,8 @@ import net.minecraft.server.level.ServerLevel;
 import net.minecraft.world.level.ChunkPos;
 import net.minecraft.world.level.chunk.storage.RegionFile;
 import net.minecraft.world.level.chunk.storage.RegionFileStorage;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
 import org.slf4j.Logger;
 import java.io.IOException;
 import java.lang.invoke.VarHandle;
@@ -56,7 +58,7 @@ public final class RegionFileIOThread extends PrioritisedQueueExecutorThread {
 
     protected static final RegionFileType[] CACHED_REGIONFILE_TYPES = RegionFileType.values();
 
-    private ChunkDataController getControllerFor(final ServerLevel world, final RegionFileType type) {
+    private @NotNull ChunkDataController getControllerFor(final @NotNull ServerLevel world, final @NotNull RegionFileType type) {
         switch (type) {
             case CHUNK_DATA:
                 return world.chunkDataControllerNew;
@@ -85,7 +87,7 @@ public final class RegionFileIOThread extends PrioritisedQueueExecutorThread {
          * @param type The regionfile type.
          * @param data The result to set.
          */
-        public void setData(final RegionFileType type, final CompoundTag data) {
+        public void setData(final @NotNull RegionFileType type, final CompoundTag data) {
             final int index = type.ordinal();
 
             if (this.hasResult[index]) {
@@ -102,7 +104,7 @@ public final class RegionFileIOThread extends PrioritisedQueueExecutorThread {
          * @param type The regionfile type.
          * @param throwable The result to set.
          */
-        public void setThrowable(final RegionFileType type, final Throwable throwable) {
+        public void setThrowable(final @NotNull RegionFileType type, final Throwable throwable) {
             final int index = type.ordinal();
 
             if (this.hasResult[index]) {
@@ -119,7 +121,7 @@ public final class RegionFileIOThread extends PrioritisedQueueExecutorThread {
          *
          * @return Whether a result exists for {@code type}.
          */
-        public boolean hasResult(final RegionFileType type) {
+        public boolean hasResult(final @NotNull RegionFileType type) {
             return this.hasResult[type.ordinal()];
         }
 
@@ -132,7 +134,7 @@ public final class RegionFileIOThread extends PrioritisedQueueExecutorThread {
          * @return The data result for the specified type. If the result is a {@code Throwable},
          * then returns {@code null}.
          */
-        public CompoundTag getData(final RegionFileType type) {
+        public CompoundTag getData(final @NotNull RegionFileType type) {
             final int index = type.ordinal();
 
             if (!this.hasResult[index]) {
@@ -151,7 +153,7 @@ public final class RegionFileIOThread extends PrioritisedQueueExecutorThread {
          * @return The throwable result for the specified type. If the result is an {@code CompoundTag},
          * then returns {@code null}.
          */
-        public Throwable getThrowable(final RegionFileType type) {
+        public Throwable getThrowable(final @NotNull RegionFileType type) {
             final int index = type.ordinal();
 
             if (!this.hasResult[index]) {
@@ -167,7 +169,7 @@ public final class RegionFileIOThread extends PrioritisedQueueExecutorThread {
     static RegionFileIOThread[] threads;
 
     /* needs to be consistent given a set of parameters */
-    static RegionFileIOThread selectThread(final ServerLevel world, final int chunkX, final int chunkZ, final RegionFileType type) {
+    static RegionFileIOThread selectThread(final ServerLevel world, final int chunkX, final int chunkZ, final @NotNull RegionFileType type) {
         if (threads == null) {
             throw new IllegalStateException("Threads not initialised");
         }
@@ -261,7 +263,7 @@ public final class RegionFileIOThread extends PrioritisedQueueExecutorThread {
         super(new PrioritisedThreadedTaskQueue(), (int)(1.0e6)); // 1.0ms spinwait time
         this.setName("RegionFile I/O Thread #" + threadNumber);
         this.setPriority(Thread.NORM_PRIORITY - 2); // we keep priority close to normal because threads can wait on us
-        this.setUncaughtExceptionHandler((final Thread thread, final Throwable thr) -> {
+        this.setUncaughtExceptionHandler((final @NotNull Thread thread, final @NotNull Throwable thr) -> {
             LOGGER.error("Uncaught exception thrown from I/O thread, report this! Thread: " + thread.getName(), thr);
         });
     }
@@ -279,7 +281,7 @@ public final class RegionFileIOThread extends PrioritisedQueueExecutorThread {
      * dumb plugins from taking away priority from threads we consider crucial.
      * @return The priroity to use with blocking I/O on the current thread.
      */
-    public static PrioritisedExecutor.Priority getIOBlockingPriorityForCurrentThread() {
+    public static PrioritisedExecutor.@NotNull Priority getIOBlockingPriorityForCurrentThread() {
         if (TickThread.isTickThread()) {
             return PrioritisedExecutor.Priority.BLOCKING;
         }
@@ -297,12 +299,12 @@ public final class RegionFileIOThread extends PrioritisedQueueExecutorThread {
      *
      * @return The compound tag associated for the specified chunk. {@code null} if no write was pending, or if {@code null} is the write pending.
      */
-    public static CompoundTag getPendingWrite(final ServerLevel world, final int chunkX, final int chunkZ, final RegionFileType type) {
+    public static @Nullable CompoundTag getPendingWrite(final @NotNull ServerLevel world, final int chunkX, final int chunkZ, final @NotNull RegionFileType type) {
         final RegionFileIOThread thread = RegionFileIOThread.selectThread(world, chunkX, chunkZ, type);
         return thread.getPendingWriteInternal(world, chunkX, chunkZ, type);
     }
 
-    CompoundTag getPendingWriteInternal(final ServerLevel world, final int chunkX, final int chunkZ, final RegionFileType type) {
+    @Nullable CompoundTag getPendingWriteInternal(final @NotNull ServerLevel world, final int chunkX, final int chunkZ, final @NotNull RegionFileType type) {
         final ChunkDataController taskController = this.getControllerFor(world, type);
         final ChunkDataTask task = taskController.tasks.get(Long.valueOf(CoordinateUtils.getChunkKey(chunkX, chunkZ)));
 
@@ -323,12 +325,12 @@ public final class RegionFileIOThread extends PrioritisedQueueExecutorThread {
      * @param type Specified regionfile type.
      * @return The priority for the chunk
      */
-    public static PrioritisedExecutor.Priority getPriority(final ServerLevel world, final int chunkX, final int chunkZ, final RegionFileType type) {
+    public static PrioritisedExecutor.Priority getPriority(final @NotNull ServerLevel world, final int chunkX, final int chunkZ, final @NotNull RegionFileType type) {
         final RegionFileIOThread thread = RegionFileIOThread.selectThread(world, chunkX, chunkZ, type);
         return thread.getPriorityInternal(world, chunkX, chunkZ, type);
     }
 
-    PrioritisedExecutor.Priority getPriorityInternal(final ServerLevel world, final int chunkX, final int chunkZ, final RegionFileType type) {
+    PrioritisedExecutor.Priority getPriorityInternal(final @NotNull ServerLevel world, final int chunkX, final int chunkZ, final @NotNull RegionFileType type) {
         final ChunkDataController taskController = this.getControllerFor(world, type);
         final ChunkDataTask task = taskController.tasks.get(Long.valueOf(CoordinateUtils.getChunkKey(chunkX, chunkZ)));
 
@@ -354,7 +356,7 @@ public final class RegionFileIOThread extends PrioritisedQueueExecutorThread {
      * @see #lowerPriority(ServerLevel, int, int, Priority)
      * @see #lowerPriority(ServerLevel, int, int, RegionFileType, Priority)
      */
-    public static void setPriority(final ServerLevel world, final int chunkX, final int chunkZ,
+    public static void setPriority(final @NotNull ServerLevel world, final int chunkX, final int chunkZ,
                                    final PrioritisedExecutor.Priority priority) {
         for (final RegionFileType type : CACHED_REGIONFILE_TYPES) {
             RegionFileIOThread.setPriority(world, chunkX, chunkZ, type, priority);
@@ -377,13 +379,13 @@ public final class RegionFileIOThread extends PrioritisedQueueExecutorThread {
      * @see #lowerPriority(ServerLevel, int, int, Priority)
      * @see #lowerPriority(ServerLevel, int, int, RegionFileType, Priority)
      */
-    public static void setPriority(final ServerLevel world, final int chunkX, final int chunkZ, final RegionFileType type,
+    public static void setPriority(final @NotNull ServerLevel world, final int chunkX, final int chunkZ, final @NotNull RegionFileType type,
                                    final PrioritisedExecutor.Priority priority) {
         final RegionFileIOThread thread = RegionFileIOThread.selectThread(world, chunkX, chunkZ, type);
         thread.setPriorityInternal(world, chunkX, chunkZ, type, priority);
     }
 
-    void setPriorityInternal(final ServerLevel world, final int chunkX, final int chunkZ, final RegionFileType type,
+    void setPriorityInternal(final @NotNull ServerLevel world, final int chunkX, final int chunkZ, final @NotNull RegionFileType type,
                              final PrioritisedExecutor.Priority priority) {
         final ChunkDataController taskController = this.getControllerFor(world, type);
         final ChunkDataTask task = taskController.tasks.get(Long.valueOf(CoordinateUtils.getChunkKey(chunkX, chunkZ)));
@@ -406,7 +408,7 @@ public final class RegionFileIOThread extends PrioritisedQueueExecutorThread {
      * @see #lowerPriority(ServerLevel, int, int, Priority)
      * @see #lowerPriority(ServerLevel, int, int, RegionFileType, Priority)
      */
-    public static void raisePriority(final ServerLevel world, final int chunkX, final int chunkZ,
+    public static void raisePriority(final @NotNull ServerLevel world, final int chunkX, final int chunkZ,
                                      final PrioritisedExecutor.Priority priority) {
         for (final RegionFileType type : CACHED_REGIONFILE_TYPES) {
             RegionFileIOThread.raisePriority(world, chunkX, chunkZ, type, priority);
@@ -427,13 +429,13 @@ public final class RegionFileIOThread extends PrioritisedQueueExecutorThread {
      * @see #lowerPriority(ServerLevel, int, int, Priority)
      * @see #lowerPriority(ServerLevel, int, int, RegionFileType, Priority)
      */
-    public static void raisePriority(final ServerLevel world, final int chunkX, final int chunkZ, final RegionFileType type,
+    public static void raisePriority(final @NotNull ServerLevel world, final int chunkX, final int chunkZ, final @NotNull RegionFileType type,
                                      final PrioritisedExecutor.Priority priority) {
         final RegionFileIOThread thread = RegionFileIOThread.selectThread(world, chunkX, chunkZ, type);
         thread.raisePriorityInternal(world, chunkX, chunkZ, type, priority);
     }
 
-    void raisePriorityInternal(final ServerLevel world, final int chunkX, final int chunkZ, final RegionFileType type,
+    void raisePriorityInternal(final @NotNull ServerLevel world, final int chunkX, final int chunkZ, final @NotNull RegionFileType type,
                                final PrioritisedExecutor.Priority priority) {
         final ChunkDataController taskController = this.getControllerFor(world, type);
         final ChunkDataTask task = taskController.tasks.get(Long.valueOf(CoordinateUtils.getChunkKey(chunkX, chunkZ)));
@@ -456,7 +458,7 @@ public final class RegionFileIOThread extends PrioritisedQueueExecutorThread {
      * @see #setPriority(ServerLevel, int, int, Priority)
      * @see #setPriority(ServerLevel, int, int, RegionFileType, Priority)
      */
-    public static void lowerPriority(final ServerLevel world, final int chunkX, final int chunkZ,
+    public static void lowerPriority(final @NotNull ServerLevel world, final int chunkX, final int chunkZ,
                                      final PrioritisedExecutor.Priority priority) {
         for (final RegionFileType type : CACHED_REGIONFILE_TYPES) {
             RegionFileIOThread.lowerPriority(world, chunkX, chunkZ, type, priority);
@@ -477,13 +479,13 @@ public final class RegionFileIOThread extends PrioritisedQueueExecutorThread {
      * @see #setPriority(ServerLevel, int, int, Priority)
      * @see #setPriority(ServerLevel, int, int, RegionFileType, Priority)
      */
-    public static void lowerPriority(final ServerLevel world, final int chunkX, final int chunkZ, final RegionFileType type,
+    public static void lowerPriority(final @NotNull ServerLevel world, final int chunkX, final int chunkZ, final @NotNull RegionFileType type,
                                      final PrioritisedExecutor.Priority priority) {
         final RegionFileIOThread thread = RegionFileIOThread.selectThread(world, chunkX, chunkZ, type);
         thread.lowerPriorityInternal(world, chunkX, chunkZ, type, priority);
     }
 
-    void lowerPriorityInternal(final ServerLevel world, final int chunkX, final int chunkZ, final RegionFileType type,
+    void lowerPriorityInternal(final @NotNull ServerLevel world, final int chunkX, final int chunkZ, final @NotNull RegionFileType type,
                                final PrioritisedExecutor.Priority priority) {
         final ChunkDataController taskController = this.getControllerFor(world, type);
         final ChunkDataTask task = taskController.tasks.get(Long.valueOf(CoordinateUtils.getChunkKey(chunkX, chunkZ)));
@@ -514,8 +516,8 @@ public final class RegionFileIOThread extends PrioritisedQueueExecutorThread {
      *
      * @throws IllegalStateException If the file io thread has shutdown.
      */
-    public static void scheduleSave(final ServerLevel world, final int chunkX, final int chunkZ, final CompoundTag data,
-                                    final RegionFileType type) {
+    public static void scheduleSave(final @NotNull ServerLevel world, final int chunkX, final int chunkZ, final CompoundTag data,
+                                    final @NotNull RegionFileType type) {
         RegionFileIOThread.scheduleSave(world, chunkX, chunkZ, data, type, PrioritisedExecutor.Priority.NORMAL);
     }
 
@@ -541,19 +543,19 @@ public final class RegionFileIOThread extends PrioritisedQueueExecutorThread {
      *
      * @throws IllegalStateException If the file io thread has shutdown.
      */
-    public static void scheduleSave(final ServerLevel world, final int chunkX, final int chunkZ, final CompoundTag data,
-                                    final RegionFileType type, final PrioritisedExecutor.Priority priority) {
+    public static void scheduleSave(final @NotNull ServerLevel world, final int chunkX, final int chunkZ, final CompoundTag data,
+                                    final @NotNull RegionFileType type, final PrioritisedExecutor.Priority priority) {
         final RegionFileIOThread thread = RegionFileIOThread.selectThread(world, chunkX, chunkZ, type);
         thread.scheduleSaveInternal(world, chunkX, chunkZ, data, type, priority);
     }
 
-    void scheduleSaveInternal(final ServerLevel world, final int chunkX, final int chunkZ, final CompoundTag data,
-                              final RegionFileType type, final PrioritisedExecutor.Priority priority) {
+    void scheduleSaveInternal(final @NotNull ServerLevel world, final int chunkX, final int chunkZ, final CompoundTag data,
+                              final @NotNull RegionFileType type, final PrioritisedExecutor.Priority priority) {
         final ChunkDataController taskController = this.getControllerFor(world, type);
 
         final boolean[] created = new boolean[1];
         final ChunkCoordinate key = new ChunkCoordinate(CoordinateUtils.getChunkKey(chunkX, chunkZ));
-        final ChunkDataTask task = taskController.tasks.compute(key, (final ChunkCoordinate keyInMap, final ChunkDataTask taskRunning) -> {
+        final ChunkDataTask task = taskController.tasks.compute(key, (final @NotNull ChunkCoordinate keyInMap, final @NotNull ChunkDataTask taskRunning) -> {
             if (taskRunning == null || taskRunning.failedWrite) {
                 // no task is scheduled or the previous write failed - meaning we need to overwrite it
 
@@ -604,8 +606,8 @@ public final class RegionFileIOThread extends PrioritisedQueueExecutorThread {
      * @see #loadChunkData(ServerLevel, int, int, Consumer, boolean, RegionFileType...)
      * @see #loadChunkData(ServerLevel, int, int, Consumer, boolean, Priority, RegionFileType...)
      */
-    public static Cancellable loadAllChunkData(final ServerLevel world, final int chunkX, final int chunkZ,
-                                               final Consumer<RegionFileData> onComplete, final boolean intendingToBlock) {
+    public static @NotNull Cancellable loadAllChunkData(final @NotNull ServerLevel world, final int chunkX, final int chunkZ,
+                                                        final @NotNull Consumer<RegionFileData> onComplete, final boolean intendingToBlock) {
         return RegionFileIOThread.loadAllChunkData(world, chunkX, chunkZ, onComplete, intendingToBlock, PrioritisedExecutor.Priority.NORMAL);
     }
 
@@ -637,9 +639,9 @@ public final class RegionFileIOThread extends PrioritisedQueueExecutorThread {
      * @see #loadChunkData(ServerLevel, int, int, Consumer, boolean, RegionFileType...)
      * @see #loadChunkData(ServerLevel, int, int, Consumer, boolean, Priority, RegionFileType...)
      */
-    public static Cancellable loadAllChunkData(final ServerLevel world, final int chunkX, final int chunkZ,
-                                               final Consumer<RegionFileData> onComplete, final boolean intendingToBlock,
-                                               final PrioritisedExecutor.Priority priority) {
+    public static @NotNull Cancellable loadAllChunkData(final @NotNull ServerLevel world, final int chunkX, final int chunkZ,
+                                                        final @NotNull Consumer<RegionFileData> onComplete, final boolean intendingToBlock,
+                                                        final PrioritisedExecutor.Priority priority) {
         return RegionFileIOThread.loadChunkData(world, chunkX, chunkZ, onComplete, intendingToBlock, priority, CACHED_REGIONFILE_TYPES);
     }
 
@@ -671,9 +673,9 @@ public final class RegionFileIOThread extends PrioritisedQueueExecutorThread {
      * @see #loadAllChunkData(ServerLevel, int, int, Consumer, boolean)
      * @see #loadAllChunkData(ServerLevel, int, int, Consumer, boolean, Priority)
      */
-    public static Cancellable loadChunkData(final ServerLevel world, final int chunkX, final int chunkZ,
-                                            final Consumer<RegionFileData> onComplete, final boolean intendingToBlock,
-                                            final RegionFileType... types) {
+    public static @NotNull Cancellable loadChunkData(final @NotNull ServerLevel world, final int chunkX, final int chunkZ,
+                                                     final @NotNull Consumer<RegionFileData> onComplete, final boolean intendingToBlock,
+                                                     final RegionFileType... types) {
         return RegionFileIOThread.loadChunkData(world, chunkX, chunkZ, onComplete, intendingToBlock, PrioritisedExecutor.Priority.NORMAL, types);
     }
 
@@ -706,9 +708,9 @@ public final class RegionFileIOThread extends PrioritisedQueueExecutorThread {
      * @see #loadAllChunkData(ServerLevel, int, int, Consumer, boolean)
      * @see #loadAllChunkData(ServerLevel, int, int, Consumer, boolean, Priority)
      */
-    public static Cancellable loadChunkData(final ServerLevel world, final int chunkX, final int chunkZ,
-                                            final Consumer<RegionFileData> onComplete, final boolean intendingToBlock,
-                                            final PrioritisedExecutor.Priority priority, final RegionFileType... types) {
+    public static @NotNull Cancellable loadChunkData(final @NotNull ServerLevel world, final int chunkX, final int chunkZ,
+                                                     final @NotNull Consumer<RegionFileData> onComplete, final boolean intendingToBlock,
+                                                     final PrioritisedExecutor.Priority priority, final RegionFileType @Nullable ... types) {
         if (types == null) {
             throw new NullPointerException("Types cannot be null");
         }
@@ -725,7 +727,7 @@ public final class RegionFileIOThread extends PrioritisedQueueExecutorThread {
         for (int i = 0; i < expectedCompletions; ++i) {
             final RegionFileType type = types[i];
             reads[i] = RegionFileIOThread.loadDataAsync(world, chunkX, chunkZ, type,
-                (final CompoundTag data, final Throwable throwable) -> {
+                (final @NotNull CompoundTag data, final @NotNull Throwable throwable) -> {
                     if (throwable != null) {
                         ret.setThrowable(type, throwable);
                     } else {
@@ -767,9 +769,9 @@ public final class RegionFileIOThread extends PrioritisedQueueExecutorThread {
      * @see #loadAllChunkData(ServerLevel, int, int, Consumer, boolean)
      * @see #loadAllChunkData(ServerLevel, int, int, Consumer, boolean, Priority)
      */
-    public static Cancellable loadDataAsync(final ServerLevel world, final int chunkX, final int chunkZ,
-                                            final RegionFileType type, final BiConsumer<CompoundTag, Throwable> onComplete,
-                                            final boolean intendingToBlock) {
+    public static @NotNull Cancellable loadDataAsync(final @NotNull ServerLevel world, final int chunkX, final int chunkZ,
+                                                     final @NotNull RegionFileType type, final @NotNull BiConsumer<CompoundTag, Throwable> onComplete,
+                                                     final boolean intendingToBlock) {
         return RegionFileIOThread.loadDataAsync(world, chunkX, chunkZ, type, onComplete, intendingToBlock, PrioritisedExecutor.Priority.NORMAL);
     }
 
@@ -800,18 +802,18 @@ public final class RegionFileIOThread extends PrioritisedQueueExecutorThread {
      * @see #loadAllChunkData(ServerLevel, int, int, Consumer, boolean)
      * @see #loadAllChunkData(ServerLevel, int, int, Consumer, boolean, Priority)
      */
-    public static Cancellable loadDataAsync(final ServerLevel world, final int chunkX, final int chunkZ,
-                                            final RegionFileType type, final BiConsumer<CompoundTag, Throwable> onComplete,
-                                            final boolean intendingToBlock, final PrioritisedExecutor.Priority priority) {
+    public static @NotNull Cancellable loadDataAsync(final @NotNull ServerLevel world, final int chunkX, final int chunkZ,
+                                                     final @NotNull RegionFileType type, final @NotNull BiConsumer<CompoundTag, Throwable> onComplete,
+                                                     final boolean intendingToBlock, final PrioritisedExecutor.Priority priority) {
         final RegionFileIOThread thread = RegionFileIOThread.selectThread(world, chunkX, chunkZ, type);
         return thread.loadDataAsyncInternal(world, chunkX, chunkZ, type, onComplete, intendingToBlock, priority);
     }
 
     private static Boolean doesRegionFileExist(final int chunkX, final int chunkZ, final boolean intendingToBlock,
-                                               final ChunkDataController taskController) {
+                                               final @NotNull ChunkDataController taskController) {
         final ChunkPos chunkPos = new ChunkPos(chunkX, chunkZ);
         if (intendingToBlock) {
-            return taskController.computeForRegionFile(chunkX, chunkZ, true, (final RegionFile file) -> {
+            return taskController.computeForRegionFile(chunkX, chunkZ, true, (final @NotNull RegionFile file) -> {
                 if (file == null) { // null if no regionfile exists
                     return Boolean.FALSE;
                 }
@@ -819,7 +821,7 @@ public final class RegionFileIOThread extends PrioritisedQueueExecutorThread {
                 return file.hasChunk(chunkPos) ? Boolean.TRUE : Boolean.FALSE;
             });
         } else {
-            return taskController.computeForRegionFileIfLoaded(chunkX, chunkZ, (final RegionFile file) -> {
+            return taskController.computeForRegionFileIfLoaded(chunkX, chunkZ, (final @NotNull RegionFile file) -> {
                 if (file == null) { // null if not loaded
                     return Boolean.TRUE;
                 }
@@ -829,15 +831,15 @@ public final class RegionFileIOThread extends PrioritisedQueueExecutorThread {
         }
     }
 
-    Cancellable loadDataAsyncInternal(final ServerLevel world, final int chunkX, final int chunkZ,
-                                      final RegionFileType type, final BiConsumer<CompoundTag, Throwable> onComplete,
-                                      final boolean intendingToBlock, final PrioritisedExecutor.Priority priority) {
+    @NotNull Cancellable loadDataAsyncInternal(final @NotNull ServerLevel world, final int chunkX, final int chunkZ,
+                                               final @NotNull RegionFileType type, final @NotNull BiConsumer<CompoundTag, Throwable> onComplete,
+                                               final boolean intendingToBlock, final PrioritisedExecutor.Priority priority) {
         final ChunkDataController taskController = this.getControllerFor(world, type);
 
         final ImmediateCallbackCompletion callbackInfo = new ImmediateCallbackCompletion();
 
         final ChunkCoordinate key = new ChunkCoordinate(CoordinateUtils.getChunkKey(chunkX, chunkZ));
-        final BiFunction<ChunkCoordinate, ChunkDataTask, ChunkDataTask> compute = (final ChunkCoordinate keyInMap, final ChunkDataTask running) -> {
+        final BiFunction<ChunkCoordinate, ChunkDataTask, ChunkDataTask> compute = (final @NotNull ChunkCoordinate keyInMap, final @NotNull ChunkDataTask running) -> {
             if (running == null) {
                 // not scheduled
 
@@ -930,11 +932,11 @@ public final class RegionFileIOThread extends PrioritisedQueueExecutorThread {
      *
      * @throws IOException If the load fails for any reason
      */
-    public static CompoundTag loadData(final ServerLevel world, final int chunkX, final int chunkZ, final RegionFileType type,
+    public static CompoundTag loadData(final @NotNull ServerLevel world, final int chunkX, final int chunkZ, final @NotNull RegionFileType type,
                                        final PrioritisedExecutor.Priority priority) throws IOException {
         final CompletableFuture<CompoundTag> ret = new CompletableFuture<>();
 
-        RegionFileIOThread.loadDataAsync(world, chunkX, chunkZ, type, (final CompoundTag compound, final Throwable thr) -> {
+        RegionFileIOThread.loadDataAsync(world, chunkX, chunkZ, type, (final @NotNull CompoundTag compound, final @NotNull Throwable thr) -> {
             if (thr != null) {
                 ret.completeExceptionally(thr);
             } else {
@@ -951,8 +953,8 @@ public final class RegionFileIOThread extends PrioritisedQueueExecutorThread {
 
     private static final class ImmediateCallbackCompletion {
 
-        public CompoundTag data;
-        public Throwable throwable;
+        public @Nullable CompoundTag data;
+        public @Nullable Throwable throwable;
         public boolean completeNow;
         public boolean tasksNeedsScheduling;
         public boolean needsRegionFileTest;
@@ -962,8 +964,8 @@ public final class RegionFileIOThread extends PrioritisedQueueExecutorThread {
 
     static final class CancellableRead implements Cancellable {
 
-        private BiConsumer<CompoundTag, Throwable> callback;
-        private RegionFileIOThread.ChunkDataTask task;
+        private @Nullable BiConsumer<CompoundTag, Throwable> callback;
+        private RegionFileIOThread.@Nullable ChunkDataTask task;
 
         CancellableRead(final BiConsumer<CompoundTag, Throwable> callback, final RegionFileIOThread.ChunkDataTask task) {
             this.callback = callback;
@@ -1030,7 +1032,7 @@ public final class RegionFileIOThread extends PrioritisedQueueExecutorThread {
             return this.waiters.add(callback);
         }
 
-        void complete(final RegionFileIOThread.ChunkDataTask task, final CompoundTag value, final Throwable throwable) {
+        void complete(final RegionFileIOThread.@NotNull ChunkDataTask task, final CompoundTag value, final Throwable throwable) {
             this.value = value;
             this.throwable = throwable;
 
@@ -1085,12 +1087,12 @@ public final class RegionFileIOThread extends PrioritisedQueueExecutorThread {
         // This class is intended for HashMap/ConcurrentHashMap usage, which do treeify bin nodes if the chain
         // is too large. So we should implement compareTo to help.
         @Override
-        public int compareTo(final RegionFileIOThread.ChunkCoordinate other) {
+        public int compareTo(final RegionFileIOThread.@NotNull ChunkCoordinate other) {
             return Long.compare(this.key, other.key);
         }
 
         @Override
-        public String toString() {
+        public @NotNull String toString() {
             return new ChunkPos(this.key).toString();
         }
     }
@@ -1116,7 +1118,7 @@ public final class RegionFileIOThread extends PrioritisedQueueExecutorThread {
             return !this.tasks.isEmpty();
         }
 
-        public <T> T computeForRegionFile(final int chunkX, final int chunkZ, final boolean existingOnly, final Function<RegionFile, T> function) {
+        public <T> T computeForRegionFile(final int chunkX, final int chunkZ, final boolean existingOnly, final @NotNull Function<RegionFile, T> function) {
             final RegionFileStorage cache = this.getCache();
             final RegionFile regionFile;
             synchronized (cache) {
@@ -1136,7 +1138,7 @@ public final class RegionFileIOThread extends PrioritisedQueueExecutorThread {
             }
         }
 
-        public <T> T computeForRegionFileIfLoaded(final int chunkX, final int chunkZ, final Function<RegionFile, T> function) {
+        public <T> T computeForRegionFileIfLoaded(final int chunkX, final int chunkZ, final @NotNull Function<RegionFile, T> function) {
             final RegionFileStorage cache = this.getCache();
             final RegionFile regionFile;
 
@@ -1192,7 +1194,7 @@ public final class RegionFileIOThread extends PrioritisedQueueExecutorThread {
          */
 
         public ChunkDataTask(final ServerLevel world, final int chunkX, final int chunkZ, final RegionFileIOThread.ChunkDataController taskController,
-                             final PrioritisedExecutor executor, final PrioritisedExecutor.Priority priority) {
+                             final @NotNull PrioritisedExecutor executor, final PrioritisedExecutor.Priority priority) {
             this.world = world;
             this.chunkX = chunkX;
             this.chunkZ = chunkZ;
@@ -1201,7 +1203,7 @@ public final class RegionFileIOThread extends PrioritisedQueueExecutorThread {
         }
 
         @Override
-        public String toString() {
+        public @NotNull String toString() {
             return "Task for world: '" + this.world.getWorld().getName() + "' at (" + this.chunkX + "," + this.chunkZ +
                     ") type: " + this.taskController.type.name() + ", hash: " + this.hashCode();
         }
@@ -1216,7 +1218,7 @@ public final class RegionFileIOThread extends PrioritisedQueueExecutorThread {
 
                 if (read.waiters.isEmpty()) {
                     // cancelled read? go to task controller to confirm
-                    final ChunkDataTask inMap = this.taskController.tasks.compute(chunkKey, (final ChunkCoordinate keyInMap, final ChunkDataTask valueInMap) -> {
+                    final ChunkDataTask inMap = this.taskController.tasks.compute(chunkKey, (final @NotNull ChunkCoordinate keyInMap, final @NotNull ChunkDataTask valueInMap) -> {
                         if (valueInMap == null) {
                             throw new IllegalStateException("Write completed concurrently, expected this task: " + ChunkDataTask.this.toString() + ", report this!");
                         }
@@ -1261,7 +1263,7 @@ public final class RegionFileIOThread extends PrioritisedQueueExecutorThread {
             CompoundTag write = this.inProgressWrite;
 
             if (write == NOTHING_TO_WRITE) {
-                final ChunkDataTask inMap = this.taskController.tasks.compute(chunkKey, (final ChunkCoordinate keyInMap, final ChunkDataTask valueInMap) -> {
+                final ChunkDataTask inMap = this.taskController.tasks.compute(chunkKey, (final @NotNull ChunkCoordinate keyInMap, final @NotNull ChunkDataTask valueInMap) -> {
                     if (valueInMap == null) {
                         throw new IllegalStateException("Write completed concurrently, expected this task: " + ChunkDataTask.this.toString() + ", report this!");
                     }
@@ -1299,7 +1301,7 @@ public final class RegionFileIOThread extends PrioritisedQueueExecutorThread {
                 final boolean finalFailWrite = failedWrite;
                 final boolean[] done = new boolean[] { false };
 
-                this.taskController.tasks.compute(chunkKey, (final ChunkCoordinate keyInMap, final ChunkDataTask valueInMap) -> {
+                this.taskController.tasks.compute(chunkKey, (final @NotNull ChunkCoordinate keyInMap, final @NotNull ChunkDataTask valueInMap) -> {
                     if (valueInMap == null) {
                         throw new IllegalStateException("Write completed concurrently, expected this task: " + ChunkDataTask.this.toString() + ", report this!");
                     }
diff --git a/src/main/java/io/papermc/paper/chunk/system/light/LightQueue.java b/src/main/java/io/papermc/paper/chunk/system/light/LightQueue.java
index 0b7a2b0ead4f3bc07bfd9a38c2b7cf024bd140c6..1d50392687302cd2d4191084c136a694673a3708 100644
--- a/src/main/java/io/papermc/paper/chunk/system/light/LightQueue.java
+++ b/src/main/java/io/papermc/paper/chunk/system/light/LightQueue.java
@@ -13,6 +13,8 @@ import net.minecraft.core.BlockPos;
 import net.minecraft.core.SectionPos;
 import net.minecraft.server.level.ServerLevel;
 import net.minecraft.world.level.ChunkPos;
+import org.jetbrains.annotations.NotNull;
+
 import java.util.ArrayList;
 import java.util.HashSet;
 import java.util.List;
@@ -26,7 +28,7 @@ public final class LightQueue {
     protected final StarLightInterface manager;
     protected final ServerLevel world;
 
-    public LightQueue(final StarLightInterface manager) {
+    public LightQueue(final @NotNull StarLightInterface manager) {
         this.manager = manager;
         this.world = ((ServerLevel)manager.getWorld());
     }
@@ -79,7 +81,7 @@ public final class LightQueue {
         }
     }
 
-    public CompletableFuture<Void> queueBlockChange(final BlockPos pos) {
+    public @NotNull CompletableFuture<Void> queueBlockChange(final @NotNull BlockPos pos) {
         final ChunkTasks tasks;
         synchronized (this) {
             tasks = this.chunkTasks.computeIfAbsent(CoordinateUtils.getChunkKey(pos), (final long keyInMap) -> {
@@ -93,7 +95,7 @@ public final class LightQueue {
         return tasks.onComplete;
     }
 
-    public CompletableFuture<Void> queueSectionChange(final SectionPos pos, final boolean newEmptyValue) {
+    public @NotNull CompletableFuture<Void> queueSectionChange(final @NotNull SectionPos pos, final boolean newEmptyValue) {
         final ChunkTasks tasks;
         synchronized (this) {
             tasks = this.chunkTasks.computeIfAbsent(CoordinateUtils.getChunkKey(pos), (final long keyInMap) -> {
@@ -111,7 +113,7 @@ public final class LightQueue {
         return tasks.onComplete;
     }
 
-    public CompletableFuture<Void> queueChunkLightTask(final ChunkPos pos, final BooleanSupplier lightTask, final PrioritisedExecutor.Priority priority) {
+    public @NotNull CompletableFuture<Void> queueChunkLightTask(final @NotNull ChunkPos pos, final BooleanSupplier lightTask, final PrioritisedExecutor.Priority priority) {
         final ChunkTasks tasks;
         synchronized (this) {
             tasks = this.chunkTasks.computeIfAbsent(CoordinateUtils.getChunkKey(pos), (final long keyInMap) -> {
@@ -128,7 +130,7 @@ public final class LightQueue {
         return tasks.onComplete;
     }
 
-    public CompletableFuture<Void> queueChunkSkylightEdgeCheck(final SectionPos pos, final ShortCollection sections) {
+    public @NotNull CompletableFuture<Void> queueChunkSkylightEdgeCheck(final @NotNull SectionPos pos, final ShortCollection sections) {
         final ChunkTasks tasks;
         synchronized (this) {
             tasks = this.chunkTasks.computeIfAbsent(CoordinateUtils.getChunkKey(pos), (final long keyInMap) -> {
@@ -147,7 +149,7 @@ public final class LightQueue {
         return tasks.onComplete;
     }
 
-    public CompletableFuture<Void> queueChunkBlocklightEdgeCheck(final SectionPos pos, final ShortCollection sections) {
+    public @NotNull CompletableFuture<Void> queueChunkBlocklightEdgeCheck(final @NotNull SectionPos pos, final ShortCollection sections) {
         final ChunkTasks tasks;
 
         synchronized (this) {
@@ -167,7 +169,7 @@ public final class LightQueue {
         return tasks.onComplete;
     }
 
-    public void removeChunk(final ChunkPos pos) {
+    public void removeChunk(final @NotNull ChunkPos pos) {
         final ChunkTasks tasks;
         synchronized (this) {
             tasks = this.chunkTasks.remove(CoordinateUtils.getChunkKey(pos));
@@ -192,11 +194,11 @@ public final class LightQueue {
         private final LightQueue queue;
         private final PrioritisedExecutor.PrioritisedTask task;
 
-        public ChunkTasks(final long chunkCoordinate, final StarLightInterface lightEngine, final LightQueue queue) {
+        public ChunkTasks(final long chunkCoordinate, final StarLightInterface lightEngine, final @NotNull LightQueue queue) {
             this(chunkCoordinate, lightEngine, queue, PrioritisedExecutor.Priority.NORMAL);
         }
 
-        public ChunkTasks(final long chunkCoordinate, final StarLightInterface lightEngine, final LightQueue queue,
+        public ChunkTasks(final long chunkCoordinate, final StarLightInterface lightEngine, final @NotNull LightQueue queue,
                           final PrioritisedExecutor.Priority priority) {
             this.chunkCoordinate = chunkCoordinate;
             this.lightEngine = lightEngine;
diff --git a/src/main/java/io/papermc/paper/chunk/system/poi/PoiChunk.java b/src/main/java/io/papermc/paper/chunk/system/poi/PoiChunk.java
index dc298e61e2d479801c8469b2067a8f8bcb076b1d..414db0f5f366a429cf95b9c127df1bb7dd3c8d38 100644
--- a/src/main/java/io/papermc/paper/chunk/system/poi/PoiChunk.java
+++ b/src/main/java/io/papermc/paper/chunk/system/poi/PoiChunk.java
@@ -14,6 +14,8 @@ import net.minecraft.resources.RegistryOps;
 import net.minecraft.server.level.ServerLevel;
 import net.minecraft.world.entity.ai.village.poi.PoiManager;
 import net.minecraft.world.entity.ai.village.poi.PoiSection;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
 import org.slf4j.Logger;
 
 import java.util.Optional;
@@ -72,7 +74,7 @@ public final class PoiChunk {
         return true;
     }
 
-    public PoiSection getOrCreateSection(final int chunkY) {
+    public @NotNull PoiSection getOrCreateSection(final int chunkY) {
         if (chunkY >= this.minSection && chunkY <= this.maxSection) {
             final int idx = chunkY - this.minSection;
             final PoiSection ret = this.sections[idx];
@@ -90,14 +92,14 @@ public final class PoiChunk {
         throw new IllegalArgumentException("chunkY is out of bounds, chunkY: " + chunkY + " outside [" + this.minSection + "," + this.maxSection + "]");
     }
 
-    public PoiSection getSection(final int chunkY) {
+    public @Nullable PoiSection getSection(final int chunkY) {
         if (chunkY >= this.minSection && chunkY <= this.maxSection) {
             return this.sections[chunkY - this.minSection];
         }
         return null;
     }
 
-    public Optional<PoiSection> getSectionForVanilla(final int chunkY) {
+    public @NotNull Optional<PoiSection> getSectionForVanilla(final int chunkY) {
         if (chunkY >= this.minSection && chunkY <= this.maxSection) {
             final PoiSection ret = this.sections[chunkY - this.minSection];
             return ret == null ? Optional.empty() : ret.noAllocateOptional;
@@ -114,7 +116,7 @@ public final class PoiChunk {
     }
 
     // returns null if empty
-    public CompoundTag save() {
+    public @Nullable CompoundTag save() {
         final RegistryOps<Tag> registryOps = RegistryOps.create(NbtOps.INSTANCE, world.getPoiManager().registryAccess);
 
         final CompoundTag ret = new CompoundTag();
@@ -142,7 +144,7 @@ public final class PoiChunk {
 
             final DataResult<Tag> serializedResult = codec.encodeStart(registryOps, chunk);
             final int finalSectionY = sectionY;
-            final Tag serialized = serializedResult.resultOrPartial((final String description) -> {
+            final Tag serialized = serializedResult.resultOrPartial((final @NotNull String description) -> {
                 LOGGER.error("Failed to serialize poi chunk for world: " + world.getWorld().getName() + ", chunk: (" + chunkX + "," + finalSectionY + "," + chunkZ + "); description: " + description);
             }).orElse(null);
             if (serialized == null) {
@@ -156,13 +158,13 @@ public final class PoiChunk {
         return sections.isEmpty() ? null : ret;
     }
 
-    public static PoiChunk empty(final ServerLevel world, final int chunkX, final int chunkZ) {
+    public static @NotNull PoiChunk empty(final @NotNull ServerLevel world, final int chunkX, final int chunkZ) {
         final PoiChunk ret = new PoiChunk(world, chunkX, chunkZ, WorldUtil.getMinSection(world), WorldUtil.getMaxSection(world));
         ret.loaded = true;
         return ret;
     }
 
-    public static PoiChunk parse(final ServerLevel world, final int chunkX, final int chunkZ, final CompoundTag data) {
+    public static @NotNull PoiChunk parse(final @NotNull ServerLevel world, final int chunkX, final int chunkZ, final @NotNull CompoundTag data) {
         final PoiChunk ret = empty(world, chunkX, chunkZ);
 
         final RegistryOps<Tag> registryOps = RegistryOps.create(NbtOps.INSTANCE, world.getPoiManager().registryAccess);
@@ -193,7 +195,7 @@ public final class PoiChunk {
             final CompoundTag section = sections.getCompound(key);
             final DataResult<PoiSection> deserializeResult = codec.parse(registryOps, section);
             final int finalSectionY = sectionY;
-            final PoiSection deserialized = deserializeResult.resultOrPartial((final String description) -> {
+            final PoiSection deserialized = deserializeResult.resultOrPartial((final @NotNull String description) -> {
                 LOGGER.error("Failed to deserialize poi chunk for world: " + world.getWorld().getName() + ", chunk: (" + chunkX + "," + finalSectionY + "," + chunkZ + "); description: " + description);
             }).orElse(null);
 
diff --git a/src/main/java/io/papermc/paper/chunk/system/scheduling/ChunkFullTask.java b/src/main/java/io/papermc/paper/chunk/system/scheduling/ChunkFullTask.java
index fb42d776f15f735fb59e972e00e2b512c23a8387..612ba9f1ec80fc047a1b9ff661c6db4268b60e99 100644
--- a/src/main/java/io/papermc/paper/chunk/system/scheduling/ChunkFullTask.java
+++ b/src/main/java/io/papermc/paper/chunk/system/scheduling/ChunkFullTask.java
@@ -9,6 +9,8 @@ import net.minecraft.world.level.chunk.ChunkStatus;
 import net.minecraft.world.level.chunk.ImposterProtoChunk;
 import net.minecraft.world.level.chunk.LevelChunk;
 import net.minecraft.world.level.chunk.ProtoChunk;
+import org.jetbrains.annotations.NotNull;
+
 import java.lang.invoke.VarHandle;
 
 public final class ChunkFullTask extends ChunkProgressionTask implements Runnable {
@@ -17,7 +19,7 @@ public final class ChunkFullTask extends ChunkProgressionTask implements Runnabl
     protected final ChunkAccess fromChunk;
     protected final PrioritisedExecutor.PrioritisedTask convertToFullTask;
 
-    public ChunkFullTask(final ChunkTaskScheduler scheduler, final ServerLevel world, final int chunkX, final int chunkZ,
+    public ChunkFullTask(final @NotNull ChunkTaskScheduler scheduler, final ServerLevel world, final int chunkX, final int chunkZ,
                          final NewChunkHolder chunkHolder, final ChunkAccess fromChunk, final PrioritisedExecutor.Priority priority) {
         super(scheduler, world, chunkX, chunkZ);
         this.chunkHolder = chunkHolder;
@@ -26,7 +28,7 @@ public final class ChunkFullTask extends ChunkProgressionTask implements Runnabl
     }
 
     @Override
-    public ChunkStatus getTargetStatus() {
+    public @NotNull ChunkStatus getTargetStatus() {
         return ChunkStatus.FULL;
     }
 
diff --git a/src/main/java/io/papermc/paper/chunk/system/scheduling/ChunkHolderManager.java b/src/main/java/io/papermc/paper/chunk/system/scheduling/ChunkHolderManager.java
index e5d9c6f2cbe11c2ded6d8ad111fa6a8b2086dfba..5151c67d26cdde6608694f9ed7efc3f73ba7c89d 100644
--- a/src/main/java/io/papermc/paper/chunk/system/scheduling/ChunkHolderManager.java
+++ b/src/main/java/io/papermc/paper/chunk/system/scheduling/ChunkHolderManager.java
@@ -36,6 +36,8 @@ import net.minecraft.world.level.ChunkPos;
 import net.minecraft.world.level.chunk.ChunkAccess;
 import net.minecraft.world.level.chunk.ChunkStatus;
 import org.bukkit.plugin.Plugin;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
 import org.slf4j.Logger;
 import java.io.IOException;
 import java.text.DecimalFormat;
@@ -76,7 +78,7 @@ public final class ChunkHolderManager {
     private long currentTick;
 
     private final ArrayDeque<NewChunkHolder> pendingFullLoadUpdate = new ArrayDeque<>();
-    private final ObjectRBTreeSet<NewChunkHolder> autoSaveQueue = new ObjectRBTreeSet<>((final NewChunkHolder c1, final NewChunkHolder c2) -> {
+    private final ObjectRBTreeSet<NewChunkHolder> autoSaveQueue = new ObjectRBTreeSet<>((final @NotNull NewChunkHolder c1, final @NotNull NewChunkHolder c2) -> {
         if (c1 == c2) {
             return 0;
         }
@@ -108,7 +110,7 @@ public final class ChunkHolderManager {
         return ++this.statusUpgradeId;
     }
 
-    public List<ChunkHolder> getOldChunkHolders() {
+    public @NotNull List<ChunkHolder> getOldChunkHolders() {
         final List<NewChunkHolder> holders = this.getChunkHolders();
         final List<ChunkHolder> ret = new ArrayList<>(holders.size());
         for (final NewChunkHolder holder : holders) {
@@ -117,7 +119,7 @@ public final class ChunkHolderManager {
         return ret;
     }
 
-    public List<NewChunkHolder> getChunkHolders() {
+    public @NotNull List<NewChunkHolder> getChunkHolders() {
         final List<NewChunkHolder> ret = new ArrayList<>(this.chunkHolders.size());
         this.chunkHolders.forEachValue(ret::add);
         return ret;
@@ -164,7 +166,7 @@ public final class ChunkHolderManager {
         }
     }
 
-    void ensureInAutosave(final NewChunkHolder holder) {
+    void ensureInAutosave(final @NotNull NewChunkHolder holder) {
         if (!this.autoSaveQueue.contains(holder)) {
             holder.lastAutoSave = MinecraftServer.currentTick;
             this.autoSaveQueue.add(holder);
@@ -297,7 +299,7 @@ public final class ChunkHolderManager {
         }
     }
 
-    public String getTicketDebugString(final long coordinate) {
+    public @NotNull String getTicketDebugString(final long coordinate) {
         this.ticketLock.lock();
         try {
             final SortedArraySet<Ticket<?>> tickets = this.tickets.get(coordinate);
@@ -317,7 +319,7 @@ public final class ChunkHolderManager {
         }
     }
 
-    public Collection<Plugin> getPluginChunkTickets(int x, int z) {
+    public @NotNull Collection<Plugin> getPluginChunkTickets(int x, int z) {
         ImmutableList.Builder<Plugin> ret;
         this.ticketLock.lock();
         try {
@@ -352,23 +354,23 @@ public final class ChunkHolderManager {
         }
     }
 
-    private static int getTicketLevelAt(SortedArraySet<Ticket<?>> tickets) {
+    private static int getTicketLevelAt(@NotNull SortedArraySet<Ticket<?>> tickets) {
         return !tickets.isEmpty() ? tickets.first().getTicketLevel() : MAX_TICKET_LEVEL + 1;
     }
 
-    public <T> boolean addTicketAtLevel(final TicketType<T> type, final ChunkPos chunkPos, final int level,
-                                        final T identifier) {
+    public <T> boolean addTicketAtLevel(final @NotNull TicketType<T> type, final @NotNull ChunkPos chunkPos, final int level,
+                                        final @NotNull T identifier) {
         return this.addTicketAtLevel(type, CoordinateUtils.getChunkKey(chunkPos), level, identifier);
     }
 
-    public <T> boolean addTicketAtLevel(final TicketType<T> type, final int chunkX, final int chunkZ, final int level,
-                                        final T identifier) {
+    public <T> boolean addTicketAtLevel(final @NotNull TicketType<T> type, final int chunkX, final int chunkZ, final int level,
+                                        final @NotNull T identifier) {
         return this.addTicketAtLevel(type, CoordinateUtils.getChunkKey(chunkX, chunkZ), level, identifier);
     }
 
     // supposed to return true if the ticket was added and did not replace another
     // but, we always return false if the ticket cannot be added
-    public <T> boolean addTicketAtLevel(final TicketType<T> type, final long chunk, final int level, final T identifier) {
+    public <T> boolean addTicketAtLevel(final @NotNull TicketType<T> type, final long chunk, final int level, final @NotNull T identifier) {
         final long removeDelay = Math.max(0, type.timeout);
         if (level > MAX_TICKET_LEVEL) {
             return false;
@@ -425,15 +427,15 @@ public final class ChunkHolderManager {
         }
     }
 
-    public <T> boolean removeTicketAtLevel(final TicketType<T> type, final ChunkPos chunkPos, final int level, final T identifier) {
+    public <T> boolean removeTicketAtLevel(final @NotNull TicketType<T> type, final @NotNull ChunkPos chunkPos, final int level, final @NotNull T identifier) {
         return this.removeTicketAtLevel(type, CoordinateUtils.getChunkKey(chunkPos), level, identifier);
     }
 
-    public <T> boolean removeTicketAtLevel(final TicketType<T> type, final int chunkX, final int chunkZ, final int level, final T identifier) {
+    public <T> boolean removeTicketAtLevel(final @NotNull TicketType<T> type, final int chunkX, final int chunkZ, final int level, final @NotNull T identifier) {
         return this.removeTicketAtLevel(type, CoordinateUtils.getChunkKey(chunkX, chunkZ), level, identifier);
     }
 
-    public <T> boolean removeTicketAtLevel(final TicketType<T> type, final long chunk, final int level, final T identifier) {
+    public <T> boolean removeTicketAtLevel(final @NotNull TicketType<T> type, final long chunk, final int level, final @NotNull T identifier) {
         if (level > MAX_TICKET_LEVEL) {
             return false;
         }
@@ -482,8 +484,8 @@ public final class ChunkHolderManager {
     }
 
     // atomic with respect to all add/remove/addandremove ticket calls for the given chunk
-    public <T, V> void addAndRemoveTickets(final long chunk, final TicketType<T> addType, final int addLevel, final T addIdentifier,
-                                           final TicketType<V> removeType, final int removeLevel, final V removeIdentifier) {
+    public <T, V> void addAndRemoveTickets(final long chunk, final @NotNull TicketType<T> addType, final int addLevel, final @NotNull T addIdentifier,
+                                           final @NotNull TicketType<V> removeType, final int removeLevel, final @NotNull V removeIdentifier) {
         this.ticketLock.lock();
         try {
             this.addTicketAtLevel(addType, chunk, addLevel, addIdentifier);
@@ -493,7 +495,7 @@ public final class ChunkHolderManager {
         }
     }
 
-    public <T> void removeAllTicketsFor(final TicketType<T> ticketType, final int ticketLevel, final T ticketIdentifier) {
+    public <T> void removeAllTicketsFor(final @NotNull TicketType<T> ticketType, final int ticketLevel, final @NotNull T ticketIdentifier) {
         if (ticketLevel > MAX_TICKET_LEVEL) {
             return;
         }
@@ -523,7 +525,7 @@ public final class ChunkHolderManager {
                 return;
             }
 
-            final Predicate<Ticket<?>> expireNow = (final Ticket<?> ticket) -> {
+            final Predicate<Ticket<?>> expireNow = (final @NotNull Ticket<?> ticket) -> {
                 return ticket.removalTick == tick;
             };
 
@@ -554,7 +556,7 @@ public final class ChunkHolderManager {
         return this.chunkHolders.get(position);
     }
 
-    public void raisePriority(final int x, final int z, final PrioritisedExecutor.Priority priority) {
+    public void raisePriority(final int x, final int z, final PrioritisedExecutor.@NotNull Priority priority) {
         final NewChunkHolder chunkHolder = this.getChunkHolder(x, z);
         if (chunkHolder != null) {
             chunkHolder.raisePriority(priority);
@@ -568,14 +570,14 @@ public final class ChunkHolderManager {
         }
     }
 
-    public void lowerPriority(final int x, final int z, final PrioritisedExecutor.Priority priority) {
+    public void lowerPriority(final int x, final int z, final PrioritisedExecutor.@NotNull Priority priority) {
         final NewChunkHolder chunkHolder = this.getChunkHolder(x, z);
         if (chunkHolder != null) {
             chunkHolder.lowerPriority(priority);
         }
     }
 
-    private NewChunkHolder createChunkHolder(final long position) {
+    private @NotNull NewChunkHolder createChunkHolder(final long position) {
         final NewChunkHolder ret = new NewChunkHolder(this.world, CoordinateUtils.getChunkX(position), CoordinateUtils.getChunkZ(position), this.taskScheduler);
 
         ChunkSystem.onChunkHolderCreate(this.world, ret.vanillaChunkHolder);
@@ -587,11 +589,11 @@ public final class ChunkHolderManager {
     // because this function creates the chunk holder without a ticket, it is the caller's responsibility to ensure
     // the chunk holder eventually unloads. this should only be used to avoid using processTicketUpdates to create chunkholders,
     // as processTicketUpdates may call plugin logic; in every other case a ticket is appropriate
-    private NewChunkHolder getOrCreateChunkHolder(final int chunkX, final int chunkZ) {
+    private @NotNull NewChunkHolder getOrCreateChunkHolder(final int chunkX, final int chunkZ) {
         return this.getOrCreateChunkHolder(CoordinateUtils.getChunkKey(chunkX, chunkZ));
     }
 
-    private NewChunkHolder getOrCreateChunkHolder(final long position) {
+    private @NotNull NewChunkHolder getOrCreateChunkHolder(final long position) {
         if (!this.ticketLock.isHeldByCurrentThread()) {
             throw new IllegalStateException("Must hold ticket level update lock!");
         }
@@ -643,7 +645,7 @@ public final class ChunkHolderManager {
                 if (current.isEntityChunkNBTLoaded()) {
                     isCompleted.setPlain(true);
                 } else {
-                    loadTask = current.getOrLoadEntityData((final GenericDataLoadTask.TaskResult<CompoundTag, Throwable> result) -> {
+                    loadTask = current.getOrLoadEntityData((final GenericDataLoadTask.@NotNull TaskResult<CompoundTag, Throwable> result) -> {
                         if (!transientChunk) {
                             isCompleted.set(true);
                             LockSupport.unpark(waiter);
@@ -692,7 +694,7 @@ public final class ChunkHolderManager {
         return ret;
     }
 
-    public PoiChunk getPoiChunkIfLoaded(final int chunkX, final int chunkZ, final boolean checkLoadInCallback) {
+    public @Nullable PoiChunk getPoiChunkIfLoaded(final int chunkX, final int chunkZ, final boolean checkLoadInCallback) {
         final NewChunkHolder holder = this.getChunkHolder(chunkX, chunkZ);
         if (holder != null) {
             final PoiChunk ret = holder.getPoiChunk();
@@ -732,7 +734,7 @@ public final class ChunkHolderManager {
                     return current.getPoiChunk();
                 }
 
-                loadTask = current.getOrLoadPoiData((final GenericDataLoadTask.TaskResult<PoiChunk, Throwable> result) -> {
+                loadTask = current.getOrLoadPoiData((final GenericDataLoadTask.@NotNull TaskResult<PoiChunk, Throwable> result) -> {
                     completed.setPlain(result.left());
                     isCompleted.set(true);
                     LockSupport.unpark(waiter);
@@ -778,7 +780,7 @@ public final class ChunkHolderManager {
         return ret;
     }
 
-    void addChangedStatuses(final List<NewChunkHolder> changedFullStatus) {
+    void addChangedStatuses(final @NotNull List<NewChunkHolder> changedFullStatus) {
         if (changedFullStatus.isEmpty()) {
             return;
         }
@@ -801,7 +803,7 @@ public final class ChunkHolderManager {
 
     final ReferenceLinkedOpenHashSet<NewChunkHolder> unloadQueue = new ReferenceLinkedOpenHashSet<>();
 
-    private void removeChunkHolder(final NewChunkHolder holder) {
+    private void removeChunkHolder(final @NotNull NewChunkHolder holder) {
         holder.killed = true;
         holder.vanillaChunkHolder.onChunkRemove();
         this.autoSaveQueue.remove(holder);
@@ -926,7 +928,7 @@ public final class ChunkHolderManager {
         return CURRENT_TICKET_UPDATE_SCHEDULING.get();
     }
 
-    private boolean processTicketUpdates(final boolean checkLocks, final boolean processFullUpdates, List<ChunkProgressionTask> scheduledTasks) {
+    private boolean processTicketUpdates(final boolean checkLocks, final boolean processFullUpdates, @Nullable List<ChunkProgressionTask> scheduledTasks) {
         TickThread.ensureTickThread("Cannot process ticket levels off-main");
         if (BLOCK_TICKET_UPDATES.get() == Boolean.TRUE) {
             throw new IllegalStateException("Cannot update ticket level while unloading chunks or updating entity manager");
@@ -1060,7 +1062,7 @@ public final class ChunkHolderManager {
         return ret;
     }
 
-    public JsonObject getDebugJsonForWatchdog() {
+    public @Nullable JsonObject getDebugJsonForWatchdog() {
         // try and detect any potential deadlock that would require us to read unlocked
         try {
             if (this.ticketLock.tryLock(10, TimeUnit.SECONDS)) {
@@ -1100,7 +1102,7 @@ public final class ChunkHolderManager {
         return null;
     }
 
-    private JsonObject getDebugJsonNoLock() {
+    private @NotNull JsonObject getDebugJsonNoLock() {
         final JsonObject ret = new JsonObject();
         ret.addProperty("current_tick", Long.valueOf(this.currentTick));
 
@@ -1179,7 +1181,7 @@ public final class ChunkHolderManager {
         return ret;
     }
 
-    public JsonObject getDebugJson() {
+    public @NotNull JsonObject getDebugJson() {
         final List<ChunkProgressionTask> scheduleList = new ArrayList<>();
         try {
             final JsonObject ret;
diff --git a/src/main/java/io/papermc/paper/chunk/system/scheduling/ChunkLightTask.java b/src/main/java/io/papermc/paper/chunk/system/scheduling/ChunkLightTask.java
index 53ddd7e9ac05e6a9eb809f329796e6d4f6bb2ab1..5b43b7bedc31ff4f00b0dbb66d1e06208798b3ea 100644
--- a/src/main/java/io/papermc/paper/chunk/system/scheduling/ChunkLightTask.java
+++ b/src/main/java/io/papermc/paper/chunk/system/scheduling/ChunkLightTask.java
@@ -11,6 +11,8 @@ import net.minecraft.world.level.chunk.ChunkStatus;
 import net.minecraft.world.level.chunk.ProtoChunk;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
+import org.jetbrains.annotations.NotNull;
+
 import java.util.function.BooleanSupplier;
 
 public final class ChunkLightTask extends ChunkProgressionTask {
@@ -19,7 +21,7 @@ public final class ChunkLightTask extends ChunkProgressionTask {
 
     protected final ChunkAccess fromChunk;
 
-    private final LightTaskPriorityHolder priorityHolder;
+    private final @NotNull LightTaskPriorityHolder priorityHolder;
 
     public ChunkLightTask(final ChunkTaskScheduler scheduler, final ServerLevel world, final int chunkX, final int chunkZ,
                           final ChunkAccess chunk, final PrioritisedExecutor.Priority priority) {
@@ -37,7 +39,7 @@ public final class ChunkLightTask extends ChunkProgressionTask {
     }
 
     @Override
-    public ChunkStatus getTargetStatus() {
+    public @NotNull ChunkStatus getTargetStatus() {
         return ChunkStatus.LIGHT;
     }
 
diff --git a/src/main/java/io/papermc/paper/chunk/system/scheduling/ChunkLoadTask.java b/src/main/java/io/papermc/paper/chunk/system/scheduling/ChunkLoadTask.java
index 3df793f7e6bb67f40e7387a72fdafb912a7b1373..ae2bcb550ac901ed2f9d44b5f407b8a59cdf7682 100644
--- a/src/main/java/io/papermc/paper/chunk/system/scheduling/ChunkLoadTask.java
+++ b/src/main/java/io/papermc/paper/chunk/system/scheduling/ChunkLoadTask.java
@@ -21,6 +21,8 @@ import net.minecraft.world.level.chunk.UpgradeData;
 import net.minecraft.world.level.chunk.storage.ChunkSerializer;
 import net.minecraft.world.level.chunk.storage.EntityStorage;
 import net.minecraft.world.level.levelgen.blending.BlendingData;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
 import org.slf4j.Logger;
 import java.lang.invoke.VarHandle;
 import java.util.Map;
@@ -32,24 +34,24 @@ public final class ChunkLoadTask extends ChunkProgressionTask {
     private static final Logger LOGGER = LogUtils.getClassLogger();
 
     private final NewChunkHolder chunkHolder;
-    private final ChunkDataLoadTask loadTask;
+    private final @NotNull ChunkDataLoadTask loadTask;
 
     private boolean cancelled;
-    private NewChunkHolder.GenericDataLoadTaskCallback entityLoadTask;
-    private NewChunkHolder.GenericDataLoadTaskCallback poiLoadTask;
+    private NewChunkHolder.@Nullable GenericDataLoadTaskCallback entityLoadTask;
+    private NewChunkHolder.@Nullable GenericDataLoadTaskCallback poiLoadTask;
 
     protected ChunkLoadTask(final ChunkTaskScheduler scheduler, final ServerLevel world, final int chunkX, final int chunkZ,
                             final NewChunkHolder chunkHolder, final PrioritisedExecutor.Priority priority) {
         super(scheduler, world, chunkX, chunkZ);
         this.chunkHolder = chunkHolder;
         this.loadTask = new ChunkDataLoadTask(scheduler, world, chunkX, chunkZ, priority);
-        this.loadTask.addCallback((final GenericDataLoadTask.TaskResult<ChunkAccess, Throwable> result) -> {
+        this.loadTask.addCallback((final GenericDataLoadTask.@NotNull TaskResult<ChunkAccess, Throwable> result) -> {
             ChunkLoadTask.this.complete(result == null ? null : result.left(), result == null ? null : result.right());
         });
     }
 
     @Override
-    public ChunkStatus getTargetStatus() {
+    public @NotNull ChunkStatus getTargetStatus() {
         return ChunkStatus.EMPTY;
     }
 
@@ -66,7 +68,7 @@ public final class ChunkLoadTask extends ChunkProgressionTask {
         final NewChunkHolder.GenericDataLoadTaskCallback poiLoadTask;
 
         final AtomicInteger count = new AtomicInteger();
-        final Consumer<GenericDataLoadTask.TaskResult<?, ?>> scheduleLoadTask = (final GenericDataLoadTask.TaskResult<?, ?> result) -> {
+        final Consumer<GenericDataLoadTask.TaskResult<?, ?>> scheduleLoadTask = (final GenericDataLoadTask.@NotNull TaskResult<?, ?> result) -> {
             if (count.decrementAndGet() == 0) {
                 ChunkLoadTask.this.loadTask.schedule(false);
             }
@@ -209,7 +211,7 @@ public final class ChunkLoadTask extends ChunkProgressionTask {
             super(scheduler, world, chunkX, chunkZ, type, priority);
         }
 
-        public void addCallback(final Consumer<TaskResult<FinalCompletion, Throwable>> consumer) {
+        public void addCallback(final @NotNull Consumer<TaskResult<FinalCompletion, Throwable>> consumer) {
             if (!this.waiters.add(consumer)) {
                 try {
                     consumer.accept(this.result);
@@ -226,7 +228,7 @@ public final class ChunkLoadTask extends ChunkProgressionTask {
         }
 
         @Override
-        protected void onComplete(final TaskResult<FinalCompletion, Throwable> result) {
+        protected void onComplete(final @NotNull TaskResult<FinalCompletion, Throwable> result) {
             if ((boolean)COMPLETED_HANDLE.getAndSet((CallbackDataLoadTask)this, (boolean)true)) {
                 throw new IllegalStateException("Already completed");
             }
@@ -276,7 +278,7 @@ public final class ChunkLoadTask extends ChunkProgressionTask {
         }
 
         @Override
-        protected TaskResult<ChunkAccess, Throwable> completeOnMainOffMain(final ChunkSerializer.InProgressChunkHolder data, final Throwable throwable) {
+        protected TaskResult<ChunkAccess, Throwable> completeOnMainOffMain(final ChunkSerializer.@Nullable InProgressChunkHolder data, final Throwable throwable) {
             if (data != null) {
                 return null;
             }
@@ -293,7 +295,7 @@ public final class ChunkLoadTask extends ChunkProgressionTask {
         }
 
         @Override
-        protected TaskResult<ChunkSerializer.InProgressChunkHolder, Throwable> runOffMain(final CompoundTag data, final Throwable throwable) {
+        protected @NotNull TaskResult<ChunkSerializer.InProgressChunkHolder, Throwable> runOffMain(final @Nullable CompoundTag data, final @Nullable Throwable throwable) {
             if (throwable != null) {
                 LOGGER.error("Failed to load chunk data for task: " + this.toString() + ", chunk data will be lost", throwable);
                 return new TaskResult<>(null, null);
@@ -328,7 +330,7 @@ public final class ChunkLoadTask extends ChunkProgressionTask {
             }
         }
 
-        private ProtoChunk getEmptyChunk() {
+        private @NotNull ProtoChunk getEmptyChunk() {
             return new ProtoChunk(
                 new ChunkPos(this.chunkX, this.chunkZ), UpgradeData.EMPTY, this.world,
                 this.world.registryAccess().registryOrThrow(Registries.BIOME), (BlendingData)null
@@ -336,7 +338,7 @@ public final class ChunkLoadTask extends ChunkProgressionTask {
         }
 
         @Override
-        protected TaskResult<ChunkAccess, Throwable> runOnMain(final ChunkSerializer.InProgressChunkHolder data, final Throwable throwable) {
+        protected @NotNull TaskResult<ChunkAccess, Throwable> runOnMain(final ChunkSerializer.@Nullable InProgressChunkHolder data, final Throwable throwable) {
             final PoiChunk poiChunk = ChunkLoadTask.this.chunkHolder.getPoiChunk();
             if (poiChunk == null) {
                 LOGGER.error("Expected poi chunk to be loaded with chunk for task " + this.toString());
@@ -401,7 +403,7 @@ public final class ChunkLoadTask extends ChunkProgressionTask {
         }
 
         @Override
-        protected TaskResult<PoiChunk, Throwable> runOffMain(CompoundTag data, final Throwable throwable) {
+        protected @NotNull TaskResult<PoiChunk, Throwable> runOffMain(@Nullable CompoundTag data, final @Nullable Throwable throwable) {
             if (throwable != null) {
                 LOGGER.error("Failed to load poi data for task: " + this.toString() + ", poi data will be lost", throwable);
                 return new TaskResult<>(PoiChunk.empty(this.world, this.chunkX, this.chunkZ), null);
@@ -469,7 +471,7 @@ public final class ChunkLoadTask extends ChunkProgressionTask {
         }
 
         @Override
-        protected TaskResult<CompoundTag, Throwable> runOffMain(final CompoundTag data, final Throwable throwable) {
+        protected @NotNull TaskResult<CompoundTag, Throwable> runOffMain(final @Nullable CompoundTag data, final @Nullable Throwable throwable) {
             if (throwable != null) {
                 LOGGER.error("Failed to load entity data for task: " + this.toString() + ", entity data will be lost", throwable);
                 return new TaskResult<>(null, null);
diff --git a/src/main/java/io/papermc/paper/chunk/system/scheduling/ChunkProgressionTask.java b/src/main/java/io/papermc/paper/chunk/system/scheduling/ChunkProgressionTask.java
index 322675a470eacbf0e5452f4009c643f2d0b4ce24..9579be5aedfb09429b04f051f7a5bcb873227c02 100644
--- a/src/main/java/io/papermc/paper/chunk/system/scheduling/ChunkProgressionTask.java
+++ b/src/main/java/io/papermc/paper/chunk/system/scheduling/ChunkProgressionTask.java
@@ -6,6 +6,8 @@ import ca.spottedleaf.concurrentutil.util.ConcurrentUtil;
 import net.minecraft.server.level.ServerLevel;
 import net.minecraft.world.level.chunk.ChunkAccess;
 import net.minecraft.world.level.chunk.ChunkStatus;
+import org.jetbrains.annotations.NotNull;
+
 import java.lang.invoke.VarHandle;
 import java.util.Map;
 import java.util.function.BiConsumer;
@@ -54,7 +56,7 @@ public abstract class ChunkProgressionTask {
 
     public abstract void raisePriority(final PrioritisedExecutor.Priority priority);
 
-    public final void onComplete(final BiConsumer<ChunkAccess, Throwable> onComplete) {
+    public final void onComplete(final @NotNull BiConsumer<ChunkAccess, Throwable> onComplete) {
         if (!this.waiters.add(onComplete)) {
             try {
                 onComplete.accept(this.completedChunk, this.completedThrowable);
@@ -97,7 +99,7 @@ public abstract class ChunkProgressionTask {
     }
 
     @Override
-    public String toString() {
+    public @NotNull String toString() {
         return "ChunkProgressionTask{class: " + this.getClass().getName() + ", for world: " + this.world.getWorld().getName() +
             ", chunk: (" + this.chunkX + "," + this.chunkZ + "), hashcode: " + System.identityHashCode(this) + ", priority: " + this.getPriority() +
             ", status: " + this.getTargetStatus().toString() + ", scheduled: " + this.isScheduled() + "}";
diff --git a/src/main/java/io/papermc/paper/chunk/system/scheduling/ChunkTaskScheduler.java b/src/main/java/io/papermc/paper/chunk/system/scheduling/ChunkTaskScheduler.java
index 84cc9397237fa0c17aa1012dfb5683c90eb6d3b8..3634983f8af80da0019f2e0bc4880e781cabdbf7 100644
--- a/src/main/java/io/papermc/paper/chunk/system/scheduling/ChunkTaskScheduler.java
+++ b/src/main/java/io/papermc/paper/chunk/system/scheduling/ChunkTaskScheduler.java
@@ -22,6 +22,8 @@ import net.minecraft.world.level.chunk.ChunkAccess;
 import net.minecraft.world.level.chunk.ChunkStatus;
 import net.minecraft.world.level.chunk.LevelChunk;
 import org.bukkit.Bukkit;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
 import org.slf4j.Logger;
 import java.io.File;
 import java.util.ArrayDeque;
@@ -50,7 +52,7 @@ public final class ChunkTaskScheduler {
 
     private static boolean initialised = false;
 
-    public static void init(final GlobalConfiguration.ChunkSystem config) {
+    public static void init(final GlobalConfiguration.@NotNull ChunkSystem config) {
         if (initialised) {
             return;
         }
@@ -97,7 +99,7 @@ public final class ChunkTaskScheduler {
         io.papermc.paper.chunk.system.io.RegionFileIOThread.init(newChunkSystemIOThreads);
         workerThreads = new ca.spottedleaf.concurrentutil.executor.standard.PrioritisedThreadPool(
             "Paper Chunk System Worker Pool", newChunkSystemWorkerThreads,
-            (final Thread thread, final Integer id) -> {
+            (final @NotNull Thread thread, final @NotNull Integer id) -> {
                 thread.setPriority(Thread.NORM_PRIORITY - 2);
                 thread.setName("Tuinity Chunk System Worker #" + id.intValue());
                 thread.setUncaughtExceptionHandler(io.papermc.paper.chunk.system.scheduling.NewChunkHolder.CHUNKSYSTEM_UNCAUGHT_EXCEPTION_HANDLER);
@@ -108,15 +110,15 @@ public final class ChunkTaskScheduler {
 
     public final ServerLevel world;
     public final PrioritisedThreadPool workers;
-    public final PrioritisedThreadPool.PrioritisedPoolExecutor lightExecutor;
-    public final PrioritisedThreadPool.PrioritisedPoolExecutor genExecutor;
-    public final PrioritisedThreadPool.PrioritisedPoolExecutor parallelGenExecutor;
-    public final PrioritisedThreadPool.PrioritisedPoolExecutor loadExecutor;
+    public final PrioritisedThreadPool.@NotNull PrioritisedPoolExecutor lightExecutor;
+    public final PrioritisedThreadPool.@NotNull PrioritisedPoolExecutor genExecutor;
+    public final PrioritisedThreadPool.@NotNull PrioritisedPoolExecutor parallelGenExecutor;
+    public final PrioritisedThreadPool.@NotNull PrioritisedPoolExecutor loadExecutor;
 
     private final PrioritisedThreadedTaskQueue mainThreadExecutor = new PrioritisedThreadedTaskQueue();
 
     final ReentrantLock schedulingLock = new ReentrantLock();
-    public final ChunkHolderManager chunkHolderManager;
+    public final @NotNull ChunkHolderManager chunkHolderManager;
 
     static {
         ChunkStatus.EMPTY.writeRadius = 0;
@@ -191,7 +193,7 @@ public final class ChunkTaskScheduler {
         }
     }
 
-    public ChunkTaskScheduler(final ServerLevel world, final PrioritisedThreadPool workers) {
+    public ChunkTaskScheduler(final @NotNull ServerLevel world, final @NotNull PrioritisedThreadPool workers) {
         this.world = world;
         this.workers = workers;
 
@@ -207,11 +209,11 @@ public final class ChunkTaskScheduler {
 
     private final AtomicBoolean failedChunkSystem = new AtomicBoolean();
 
-    public static Object stringIfNull(final Object obj) {
+    public static @NotNull Object stringIfNull(final @Nullable Object obj) {
         return obj == null ? "null" : obj;
     }
 
-    public void unrecoverableChunkSystemFailure(final int chunkX, final int chunkZ, final Map<String, Object> objectsOfInterest, final Throwable thr) {
+    public void unrecoverableChunkSystemFailure(final int chunkX, final int chunkZ, final @NotNull Map<String, Object> objectsOfInterest, final Throwable thr) {
         final NewChunkHolder holder = this.chunkHolderManager.getChunkHolder(chunkX, chunkZ);
         LOGGER.error("Chunk system error at chunk (" + chunkX + "," + chunkZ + "), holder: " + holder + ", exception:", new Throwable(thr));
 
@@ -250,7 +252,7 @@ public final class ChunkTaskScheduler {
         return this.mainThreadExecutor.executeTask();
     }
 
-    public void raisePriority(final int x, final int z, final PrioritisedExecutor.Priority priority) {
+    public void raisePriority(final int x, final int z, final PrioritisedExecutor.@NotNull Priority priority) {
         this.chunkHolderManager.raisePriority(x, z, priority);
     }
 
@@ -258,15 +260,15 @@ public final class ChunkTaskScheduler {
         this.chunkHolderManager.setPriority(x, z, priority);
     }
 
-    public void lowerPriority(final int x, final int z, final PrioritisedExecutor.Priority priority) {
+    public void lowerPriority(final int x, final int z, final PrioritisedExecutor.@NotNull Priority priority) {
         this.chunkHolderManager.lowerPriority(x, z, priority);
     }
 
     private final AtomicLong chunkLoadCounter = new AtomicLong();
 
-    public void scheduleTickingState(final int chunkX, final int chunkZ, final ChunkHolder.FullChunkStatus toStatus,
-                                     final boolean addTicket, final PrioritisedExecutor.Priority priority,
-                                     final Consumer<LevelChunk> onComplete) {
+    public void scheduleTickingState(final int chunkX, final int chunkZ, final ChunkHolder.@NotNull FullChunkStatus toStatus,
+                                     final boolean addTicket, final PrioritisedExecutor.@NotNull Priority priority,
+                                     final @Nullable Consumer<LevelChunk> onComplete) {
         if (!TickThread.isTickThread()) {
             this.scheduleChunkTask(chunkX, chunkZ, () -> {
                 ChunkTaskScheduler.this.scheduleTickingState(chunkX, chunkZ, toStatus, addTicket, priority, onComplete);
@@ -293,7 +295,7 @@ public final class ChunkTaskScheduler {
             this.chunkHolderManager.processTicketUpdates();
         }
 
-        final Consumer<LevelChunk> loadCallback = (final LevelChunk chunk) -> {
+        final Consumer<LevelChunk> loadCallback = (final @NotNull LevelChunk chunk) -> {
             try {
                 if (onComplete != null) {
                     onComplete.accept(chunk);
@@ -361,13 +363,13 @@ public final class ChunkTaskScheduler {
         }
     }
 
-    public void scheduleChunkLoad(final int chunkX, final int chunkZ, final boolean gen, final ChunkStatus toStatus, final boolean addTicket,
-                                  final PrioritisedExecutor.Priority priority, final Consumer<ChunkAccess> onComplete) {
+    public void scheduleChunkLoad(final int chunkX, final int chunkZ, final boolean gen, final @NotNull ChunkStatus toStatus, final boolean addTicket,
+                                  final PrioritisedExecutor.@NotNull Priority priority, final @NotNull Consumer<ChunkAccess> onComplete) {
         if (gen) {
             this.scheduleChunkLoad(chunkX, chunkZ, toStatus, addTicket, priority, onComplete);
             return;
         }
-        this.scheduleChunkLoad(chunkX, chunkZ, ChunkStatus.EMPTY, addTicket, priority, (final ChunkAccess chunk) -> {
+        this.scheduleChunkLoad(chunkX, chunkZ, ChunkStatus.EMPTY, addTicket, priority, (final @NotNull ChunkAccess chunk) -> {
             if (chunk == null) {
                 onComplete.accept(null);
             } else {
@@ -380,8 +382,8 @@ public final class ChunkTaskScheduler {
         });
     }
 
-    public void scheduleChunkLoad(final int chunkX, final int chunkZ, final ChunkStatus toStatus, final boolean addTicket,
-                                  final PrioritisedExecutor.Priority priority, final Consumer<ChunkAccess> onComplete) {
+    public void scheduleChunkLoad(final int chunkX, final int chunkZ, final @NotNull ChunkStatus toStatus, final boolean addTicket,
+                                  final PrioritisedExecutor.@NotNull Priority priority, final @Nullable Consumer<ChunkAccess> onComplete) {
         if (!TickThread.isTickThread()) {
             this.scheduleChunkTask(chunkX, chunkZ, () -> {
                 ChunkTaskScheduler.this.scheduleChunkLoad(chunkX, chunkZ, toStatus, addTicket, priority, onComplete);
@@ -409,7 +411,7 @@ public final class ChunkTaskScheduler {
             this.chunkHolderManager.processTicketUpdates();
         }
 
-        final Consumer<ChunkAccess> loadCallback = (final ChunkAccess chunk) -> {
+        final Consumer<ChunkAccess> loadCallback = (final @NotNull ChunkAccess chunk) -> {
             try {
                 if (onComplete != null) {
                     onComplete.accept(chunk);
@@ -475,9 +477,9 @@ public final class ChunkTaskScheduler {
         }
     }
 
-    private ChunkProgressionTask createTask(final int chunkX, final int chunkZ, final ChunkAccess chunk,
-                                            final NewChunkHolder chunkHolder, final List<ChunkAccess> neighbours,
-                                            final ChunkStatus toStatus, final PrioritisedExecutor.Priority initialPriority) {
+    private @NotNull ChunkProgressionTask createTask(final int chunkX, final int chunkZ, final ChunkAccess chunk,
+                                                     final NewChunkHolder chunkHolder, final List<ChunkAccess> neighbours,
+                                                     final ChunkStatus toStatus, final PrioritisedExecutor.Priority initialPriority) {
         if (toStatus == ChunkStatus.EMPTY) {
             return new ChunkLoadTask(this, this.world, chunkX, chunkZ, chunkHolder, initialPriority);
         }
@@ -491,8 +493,8 @@ public final class ChunkTaskScheduler {
         return new ChunkUpgradeGenericStatusTask(this, this.world, chunkX, chunkZ, chunk, neighbours, toStatus, initialPriority);
     }
 
-    ChunkProgressionTask schedule(final int chunkX, final int chunkZ, final ChunkStatus targetStatus, final NewChunkHolder chunkHolder,
-                                  final List<ChunkProgressionTask> allTasks) {
+    @Nullable ChunkProgressionTask schedule(final int chunkX, final int chunkZ, final @NotNull ChunkStatus targetStatus, final @NotNull NewChunkHolder chunkHolder,
+                                            final @NotNull List<ChunkProgressionTask> allTasks) {
         return this.schedule(chunkX, chunkZ, targetStatus, chunkHolder, allTasks, chunkHolder.getEffectivePriority());
     }
 
@@ -500,9 +502,9 @@ public final class ChunkTaskScheduler {
     // note: this must hold the scheduling lock
     // minPriority is only used to pass the priority through to neighbours, as priority calculation has not yet been done
     // schedule will ignore the generation target, so it should be checked by the caller to ensure the target is not regressed!
-    private ChunkProgressionTask schedule(final int chunkX, final int chunkZ, final ChunkStatus targetStatus,
-                                          final NewChunkHolder chunkHolder, final List<ChunkProgressionTask> allTasks,
-                                          final PrioritisedExecutor.Priority minPriority) {
+    private @Nullable ChunkProgressionTask schedule(final int chunkX, final int chunkZ, final @NotNull ChunkStatus targetStatus,
+                                                    final @NotNull NewChunkHolder chunkHolder, final @NotNull List<ChunkProgressionTask> allTasks,
+                                                    final PrioritisedExecutor.@NotNull Priority minPriority) {
         if (!this.schedulingLock.isHeldByCurrentThread()) {
             throw new IllegalStateException("Not holding scheduling lock");
         }
@@ -615,8 +617,8 @@ public final class ChunkTaskScheduler {
     }
 
     // rets true if the neighbour is not at the required status, false otherwise
-    private boolean checkNeighbour(final int chunkX, final int chunkZ, final ChunkStatus requiredStatus, final NewChunkHolder center,
-                                   final List<ChunkProgressionTask> tasks, final PrioritisedExecutor.Priority minPriority) {
+    private boolean checkNeighbour(final int chunkX, final int chunkZ, final @NotNull ChunkStatus requiredStatus, final @NotNull NewChunkHolder center,
+                                   final @NotNull List<ChunkProgressionTask> tasks, final PrioritisedExecutor.@NotNull Priority minPriority) {
         final NewChunkHolder chunkHolder = this.chunkHolderManager.getChunkHolder(chunkX, chunkZ);
 
         if (chunkHolder == null) {
@@ -681,7 +683,7 @@ public final class ChunkTaskScheduler {
         return this.mainThreadExecutor.queueRunnable(run, priority);
     }
 
-    public void executeTasksUntil(final BooleanSupplier exit) {
+    public void executeTasksUntil(final @NotNull BooleanSupplier exit) {
         if (Bukkit.isPrimaryThread()) {
             this.mainThreadExecutor.executeConditionally(exit);
         } else {
@@ -732,7 +734,7 @@ public final class ChunkTaskScheduler {
         }
 
         @Override
-        public String toString() {
+        public @NotNull String toString() {
             return "[( " + this.chunkX + "," + this.chunkZ + ") in '" + this.world.getWorld().getName() + "']";
         }
     }
@@ -749,7 +751,7 @@ public final class ChunkTaskScheduler {
         }
     }
 
-    public static ChunkInfo[] getChunkInfos() {
+    public static ChunkInfo @NotNull [] getChunkInfos() {
         synchronized (WAITING_CHUNKS) {
             return WAITING_CHUNKS.toArray(new ChunkInfo[0]);
         }
diff --git a/src/main/java/io/papermc/paper/chunk/system/scheduling/ChunkUpgradeGenericStatusTask.java b/src/main/java/io/papermc/paper/chunk/system/scheduling/ChunkUpgradeGenericStatusTask.java
index 73ce0909bd89244835a0d0f2030a25871461f1e0..2108c08d899d17f512ba053433a28a17ed636113 100644
--- a/src/main/java/io/papermc/paper/chunk/system/scheduling/ChunkUpgradeGenericStatusTask.java
+++ b/src/main/java/io/papermc/paper/chunk/system/scheduling/ChunkUpgradeGenericStatusTask.java
@@ -11,6 +11,7 @@ import net.minecraft.server.level.ServerLevel;
 import net.minecraft.world.level.chunk.ChunkAccess;
 import net.minecraft.world.level.chunk.ChunkStatus;
 import net.minecraft.world.level.chunk.ProtoChunk;
+import org.jetbrains.annotations.NotNull;
 import org.slf4j.Logger;
 import java.lang.invoke.VarHandle;
 import java.util.List;
@@ -22,14 +23,14 @@ public final class ChunkUpgradeGenericStatusTask extends ChunkProgressionTask im
     private static final Logger LOGGER = LogUtils.getClassLogger();
 
     protected final ChunkAccess fromChunk;
-    protected final ChunkStatus fromStatus;
+    protected final @NotNull ChunkStatus fromStatus;
     protected final ChunkStatus toStatus;
     protected final List<ChunkAccess> neighbours;
 
     protected final PrioritisedExecutor.PrioritisedTask generateTask;
 
     public ChunkUpgradeGenericStatusTask(final ChunkTaskScheduler scheduler, final ServerLevel world, final int chunkX,
-                                         final int chunkZ, final ChunkAccess chunk, final List<ChunkAccess> neighbours,
+                                         final int chunkZ, final @NotNull ChunkAccess chunk, final List<ChunkAccess> neighbours,
                                          final ChunkStatus toStatus, final PrioritisedExecutor.Priority priority) {
         super(scheduler, world, chunkX, chunkZ);
         if (!PrioritisedExecutor.Priority.isValidPriority(priority)) {
@@ -82,7 +83,7 @@ public final class ChunkUpgradeGenericStatusTask extends ChunkProgressionTask im
                 }
                 completeFuture = this.toStatus.generate(Runnable::run, this.world, chunkMap.generator, chunkMap.structureTemplateManager,
                     serverChunkCache.getLightEngine(), null, this.neighbours, false)
-                    .whenComplete((final Either<ChunkAccess, ChunkHolder.ChunkLoadingFailure> either, final Throwable throwable) -> {
+                    .whenComplete((final @NotNull Either<ChunkAccess, ChunkHolder.ChunkLoadingFailure> either, final @NotNull Throwable throwable) -> {
                         final ChunkAccess newChunk = (either == null) ? null : either.left().orElse(null);
                         if (newChunk instanceof ProtoChunk) {
                             ((ProtoChunk)newChunk).setStatus(ChunkUpgradeGenericStatusTask.this.toStatus);
diff --git a/src/main/java/io/papermc/paper/chunk/system/scheduling/GenericDataLoadTask.java b/src/main/java/io/papermc/paper/chunk/system/scheduling/GenericDataLoadTask.java
index 396d72c00e47cf1669ae20dc839c1c961b1f262a..137c9059d3519fc86f5457d5a2f83d0db65d9307 100644
--- a/src/main/java/io/papermc/paper/chunk/system/scheduling/GenericDataLoadTask.java
+++ b/src/main/java/io/papermc/paper/chunk/system/scheduling/GenericDataLoadTask.java
@@ -9,6 +9,8 @@ import com.mojang.logging.LogUtils;
 import io.papermc.paper.chunk.system.io.RegionFileIOThread;
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.server.level.ServerLevel;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
 import org.slf4j.Logger;
 import java.lang.invoke.VarHandle;
 import java.util.Map;
@@ -33,11 +35,11 @@ public abstract class GenericDataLoadTask<OnMain,FinalCompletion> {
     protected static final long STAGE_COMPLETED   = 3L;
 
     // for loading data off disk
-    protected final LoadDataFromDiskTask loadDataFromDiskTask;
+    protected final @NotNull LoadDataFromDiskTask loadDataFromDiskTask;
     // processing off-main
-    protected final PrioritisedExecutor.PrioritisedTask processOffMain;
+    protected final PrioritisedExecutor.@Nullable PrioritisedTask processOffMain;
     // processing on-main
-    protected final PrioritisedExecutor.PrioritisedTask processOnMain;
+    protected final PrioritisedExecutor.@Nullable PrioritisedTask processOnMain;
 
     protected final ChunkTaskScheduler scheduler;
     protected final ServerLevel world;
@@ -47,7 +49,7 @@ public abstract class GenericDataLoadTask<OnMain,FinalCompletion> {
 
     public GenericDataLoadTask(final ChunkTaskScheduler scheduler, final ServerLevel world, final int chunkX,
                                final int chunkZ, final RegionFileIOThread.RegionFileType type,
-                               final PrioritisedExecutor.Priority priority) {
+                               final PrioritisedExecutor.@NotNull Priority priority) {
         this.scheduler = scheduler;
         this.world = world;
         this.chunkX = chunkX;
@@ -98,7 +100,7 @@ public abstract class GenericDataLoadTask<OnMain,FinalCompletion> {
     protected abstract TaskResult<FinalCompletion, Throwable> completeOnMainOffMain(final OnMain data, final Throwable throwable);
 
     @Override
-    public String toString() {
+    public @NotNull String toString() {
         return "GenericDataLoadTask{class: " + this.getClass().getName() + ", world: " + this.world.getWorld().getName() +
             ", chunk: (" + this.chunkX + "," + this.chunkZ + "), hashcode: " + System.identityHashCode(this) + ", priority: " + this.getPriority() +
             ", type: " + this.type.toString() + "}";
@@ -122,7 +124,7 @@ public abstract class GenericDataLoadTask<OnMain,FinalCompletion> {
         }
     }
 
-    public void setPriority(final PrioritisedExecutor.Priority priority) {
+    public void setPriority(final PrioritisedExecutor.@NotNull Priority priority) {
         // can't lower I/O tasks, we don't know what they affect
         this.loadDataFromDiskTask.raisePriority(priority);
         if (this.processOffMain != null) {
@@ -133,7 +135,7 @@ public abstract class GenericDataLoadTask<OnMain,FinalCompletion> {
         }
     }
 
-    public void raisePriority(final PrioritisedExecutor.Priority priority) {
+    public void raisePriority(final PrioritisedExecutor.@NotNull Priority priority) {
         // can't lower I/O tasks, we don't know what they affect
         this.loadDataFromDiskTask.raisePriority(priority);
         if (this.processOffMain != null) {
@@ -391,7 +393,7 @@ public abstract class GenericDataLoadTask<OnMain,FinalCompletion> {
         public LoadDataFromDiskTask(final ServerLevel world, final int chunkX, final int chunkZ,
                                     final RegionFileIOThread.RegionFileType type,
                                     final BiConsumer<CompoundTag, Throwable> onComplete,
-                                    final PrioritisedExecutor.Priority priority) {
+                                    final PrioritisedExecutor.@NotNull Priority priority) {
             if (!PrioritisedExecutor.Priority.isValidPriority(priority)) {
                 throw new IllegalArgumentException("Invalid priority " + priority);
             }
@@ -425,7 +427,7 @@ public abstract class GenericDataLoadTask<OnMain,FinalCompletion> {
             return (this.getPriorityVolatile() & PRIORITY_EXECUTED) != 0;
         }
 
-        public void lowerPriority(final PrioritisedExecutor.Priority priority) {
+        public void lowerPriority(final PrioritisedExecutor.@NotNull Priority priority) {
             if (!PrioritisedExecutor.Priority.isValidPriority(priority)) {
                 throw new IllegalArgumentException("Invalid priority " + priority);
             }
@@ -466,7 +468,7 @@ public abstract class GenericDataLoadTask<OnMain,FinalCompletion> {
             }
         }
 
-        public void setPriority(final PrioritisedExecutor.Priority priority) {
+        public void setPriority(final PrioritisedExecutor.@NotNull Priority priority) {
             if (!PrioritisedExecutor.Priority.isValidPriority(priority)) {
                 throw new IllegalArgumentException("Invalid priority " + priority);
             }
@@ -503,7 +505,7 @@ public abstract class GenericDataLoadTask<OnMain,FinalCompletion> {
             }
         }
 
-        public void raisePriority(final PrioritisedExecutor.Priority priority) {
+        public void raisePriority(final PrioritisedExecutor.@NotNull Priority priority) {
             if (!PrioritisedExecutor.Priority.isValidPriority(priority)) {
                 throw new IllegalArgumentException("Invalid priority " + priority);
             }
@@ -576,7 +578,7 @@ public abstract class GenericDataLoadTask<OnMain,FinalCompletion> {
                 return;
             }
 
-            final BiConsumer<CompoundTag, Throwable> consumer = (final CompoundTag data, final Throwable thr) -> {
+            final BiConsumer<CompoundTag, Throwable> consumer = (final @NotNull CompoundTag data, final @NotNull Throwable thr) -> {
                 // because cancelScheduled() cannot actually stop this task from executing in every case, we need
                 // to mark complete here to ensure we do not double complete
                 if (LoadDataFromDiskTask.this.markExecuting()) {
@@ -589,7 +591,7 @@ public abstract class GenericDataLoadTask<OnMain,FinalCompletion> {
 
             final NewChunkHolder holder = this.world.chunkTaskScheduler.chunkHolderManager.getChunkHolder(this.chunkX, this.chunkZ);
             if (holder != null) {
-                final BiConsumer<CompoundTag, Throwable> unloadConsumer = (final CompoundTag data, final Throwable thr) -> {
+                final BiConsumer<CompoundTag, Throwable> unloadConsumer = (final @NotNull CompoundTag data, final @NotNull Throwable thr) -> {
                     if (data != null) {
                         consumer.accept(data, null);
                     } else {
@@ -623,7 +625,7 @@ public abstract class GenericDataLoadTask<OnMain,FinalCompletion> {
             this.schedule(scheduledUnload, consumer, initialPriority);
         }
 
-        private void schedule(final boolean scheduledUnload, final BiConsumer<CompoundTag, Throwable> consumer, final PrioritisedExecutor.Priority initialPriority) {
+        private void schedule(final boolean scheduledUnload, final @NotNull BiConsumer<CompoundTag, Throwable> consumer, final PrioritisedExecutor.@NotNull Priority initialPriority) {
             int priority = this.getPriorityVolatile();
 
             if ((priority & PRIORITY_EXECUTED) != 0) {
diff --git a/src/main/java/io/papermc/paper/chunk/system/scheduling/NewChunkHolder.java b/src/main/java/io/papermc/paper/chunk/system/scheduling/NewChunkHolder.java
index 8013dd333e27aa5fd0beb431fa32491eec9f5246..9ecdaf6c3ef37f300ffc62cf44884ac1a5352b29 100644
--- a/src/main/java/io/papermc/paper/chunk/system/scheduling/NewChunkHolder.java
+++ b/src/main/java/io/papermc/paper/chunk/system/scheduling/NewChunkHolder.java
@@ -33,6 +33,8 @@ import net.minecraft.world.level.chunk.ImposterProtoChunk;
 import net.minecraft.world.level.chunk.LevelChunk;
 import net.minecraft.world.level.chunk.storage.ChunkSerializer;
 import net.minecraft.world.level.chunk.storage.EntityStorage;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
 import org.slf4j.Logger;
 import java.lang.invoke.VarHandle;
 import java.util.ArrayList;
@@ -49,7 +51,7 @@ public final class NewChunkHolder {
 
     public static final Thread.UncaughtExceptionHandler CHUNKSYSTEM_UNCAUGHT_EXCEPTION_HANDLER = new Thread.UncaughtExceptionHandler() {
         @Override
-        public void uncaughtException(final Thread thread, final Throwable throwable) {
+        public void uncaughtException(final @NotNull Thread thread, final Throwable throwable) {
             if (!(throwable instanceof ThreadDeath)) {
                 LOGGER.error("Uncaught exception in thread " + thread.getName(), throwable);
             }
@@ -66,11 +68,11 @@ public final class NewChunkHolder {
 
     // chunk data state
 
-    private ChunkEntitySlices entityChunk;
+    private @Nullable ChunkEntitySlices entityChunk;
     // entity chunk that is loaded, but not yet deserialized
-    private CompoundTag pendingEntityChunk;
+    private @Nullable CompoundTag pendingEntityChunk;
 
-    ChunkEntitySlices loadInEntityChunk(final boolean transientChunk) {
+    @NotNull ChunkEntitySlices loadInEntityChunk(final boolean transientChunk) {
         TickThread.ensureTickThread(this.world, this.chunkX, this.chunkZ, "Cannot sync load entity data off-main");
         final CompoundTag entityChunk;
         final ChunkEntitySlices ret;
@@ -124,10 +126,10 @@ public final class NewChunkHolder {
     // been read from disk
     private static final CompoundTag EMPTY_ENTITY_CHUNK = new CompoundTag();
 
-    private ChunkLoadTask.EntityDataLoadTask entityDataLoadTask;
+    private ChunkLoadTask.@Nullable EntityDataLoadTask entityDataLoadTask;
     // note: if entityDataLoadTask is cancelled, but on its completion entityDataLoadTaskWaiters.size() != 0,
     // then the task is rescheduled
-    private List<GenericDataLoadTaskCallback> entityDataLoadTaskWaiters;
+    private @Nullable List<GenericDataLoadTaskCallback> entityDataLoadTaskWaiters;
 
     public ChunkLoadTask.EntityDataLoadTask getEntityDataLoadTask() {
         return this.entityDataLoadTask;
@@ -141,7 +143,7 @@ public final class NewChunkHolder {
         return (this.entityChunk != null && !this.entityChunk.isTransient()) || this.pendingEntityChunk != null;
     }
 
-    private void completeEntityLoad(final GenericDataLoadTask.TaskResult<CompoundTag, Throwable> result) {
+    private void completeEntityLoad(final GenericDataLoadTask.@Nullable TaskResult<CompoundTag, Throwable> result) {
         final List<GenericDataLoadTaskCallback> completeWaiters;
         ChunkLoadTask.EntityDataLoadTask entityDataLoadTask = null;
         boolean scheduleEntityTask = false;
@@ -201,7 +203,7 @@ public final class NewChunkHolder {
 
     // note: it is guaranteed that the consumer cannot be called for the entirety that the schedule lock is held
     // however, when the consumer is invoked, it will hold the schedule lock
-    public GenericDataLoadTaskCallback getOrLoadEntityData(final Consumer<GenericDataLoadTask.TaskResult<CompoundTag, Throwable>> consumer) {
+    public @NotNull GenericDataLoadTaskCallback getOrLoadEntityData(final Consumer<GenericDataLoadTask.TaskResult<CompoundTag, Throwable>> consumer) {
         if (this.isEntityChunkNBTLoaded()) {
             throw new IllegalStateException("Cannot load entity data, it is already loaded");
         }
@@ -241,12 +243,12 @@ public final class NewChunkHolder {
         }
     }
 
-    private PoiChunk poiChunk;
+    private @Nullable PoiChunk poiChunk;
 
-    private ChunkLoadTask.PoiDataLoadTask poiDataLoadTask;
+    private ChunkLoadTask.@Nullable PoiDataLoadTask poiDataLoadTask;
     // note: if entityDataLoadTask is cancelled, but on its completion entityDataLoadTaskWaiters.size() != 0,
     // then the task is rescheduled
-    private List<GenericDataLoadTaskCallback> poiDataLoadTaskWaiters;
+    private @Nullable List<GenericDataLoadTaskCallback> poiDataLoadTaskWaiters;
 
     public ChunkLoadTask.PoiDataLoadTask getPoiDataLoadTask() {
         return this.poiDataLoadTask;
@@ -258,7 +260,7 @@ public final class NewChunkHolder {
         return this.poiChunk != null;
     }
 
-    private void completePoiLoad(final GenericDataLoadTask.TaskResult<PoiChunk, Throwable> result) {
+    private void completePoiLoad(final GenericDataLoadTask.@Nullable TaskResult<PoiChunk, Throwable> result) {
         final List<GenericDataLoadTaskCallback> completeWaiters;
         ChunkLoadTask.PoiDataLoadTask poiDataLoadTask = null;
         boolean schedulePoiTask = false;
@@ -317,7 +319,7 @@ public final class NewChunkHolder {
 
     // note: it is guaranteed that the consumer cannot be called for the entirety that the schedule lock is held
     // however, when the consumer is invoked, it will hold the schedule lock
-    public GenericDataLoadTaskCallback getOrLoadPoiData(final Consumer<GenericDataLoadTask.TaskResult<PoiChunk, Throwable>> consumer) {
+    public @NotNull GenericDataLoadTaskCallback getOrLoadPoiData(final Consumer<GenericDataLoadTask.TaskResult<PoiChunk, Throwable>> consumer) {
         if (this.isPoiChunkLoaded()) {
             throw new IllegalStateException("Cannot load poi data, it is already loaded");
         }
@@ -362,7 +364,7 @@ public final class NewChunkHolder {
         protected final Consumer<GenericDataLoadTask.TaskResult<?, Throwable>> consumer;
         protected final NewChunkHolder chunkHolder;
         protected boolean completed;
-        protected GenericDataLoadTask<?, ?> schedule;
+        protected @Nullable GenericDataLoadTask<?, ?> schedule;
         protected final AtomicBoolean scheduled = new AtomicBoolean();
 
         public GenericDataLoadTaskCallback(final Consumer<GenericDataLoadTask.TaskResult<?, Throwable>> consumer,
@@ -394,7 +396,7 @@ public final class NewChunkHolder {
         }
 
         @Override
-        public void accept(final GenericDataLoadTask.TaskResult<?, Throwable> result) {
+        public void accept(final GenericDataLoadTask.@Nullable TaskResult<?, Throwable> result) {
             if (result != null) {
                 if (this.setCompleted()) {
                     this.consumer.accept(result);
@@ -425,17 +427,17 @@ public final class NewChunkHolder {
         }
     }
 
-    private ChunkAccess currentChunk;
+    private @Nullable ChunkAccess currentChunk;
 
     // generation status state
 
     /**
      * Current status the chunk has been brought up to by the chunk system. null indicates no work at all
      */
-    private ChunkStatus currentGenStatus;
+    private @Nullable ChunkStatus currentGenStatus;
 
     // This allows unsynchronised access to the chunk and last gen status
-    private volatile ChunkCompletion lastChunkCompletion;
+    private volatile @Nullable ChunkCompletion lastChunkCompletion;
 
     public ChunkCompletion getLastChunkCompletion() {
         return this.lastChunkCompletion;
@@ -446,10 +448,10 @@ public final class NewChunkHolder {
     /**
      * The target final chunk status the chunk system will bring the chunk to.
      */
-    private ChunkStatus requestedGenStatus;
+    private @Nullable ChunkStatus requestedGenStatus;
 
-    private ChunkProgressionTask generationTask;
-    private ChunkStatus generationTaskStatus;
+    private @Nullable ChunkProgressionTask generationTask;
+    private @Nullable ChunkStatus generationTaskStatus;
 
     /**
      * contains the neighbours that this chunk generation is blocking on
@@ -481,7 +483,7 @@ public final class NewChunkHolder {
     private boolean priorityLocked;
 
     // the priority neighbouring chunks have requested this chunk generate at
-    private PrioritisedExecutor.Priority neighbourRequestedPriority = PrioritisedExecutor.Priority.IDLE;
+    private PrioritisedExecutor.@NotNull Priority neighbourRequestedPriority = PrioritisedExecutor.Priority.IDLE;
 
     public PrioritisedExecutor.Priority getEffectivePriority() {
         return PrioritisedExecutor.Priority.max(this.priority, this.neighbourRequestedPriority);
@@ -526,7 +528,7 @@ public final class NewChunkHolder {
     }
 
     // must hold scheduling lock
-    public void raisePriority(final PrioritisedExecutor.Priority priority) {
+    public void raisePriority(final PrioritisedExecutor.@NotNull Priority priority) {
         if (this.priority != null && this.priority.isHigherOrEqualPriority(priority)) {
             return;
         }
@@ -557,7 +559,7 @@ public final class NewChunkHolder {
     }
 
     // must hold scheduling lock
-    public void lowerPriority(final PrioritisedExecutor.Priority priority) {
+    public void lowerPriority(final PrioritisedExecutor.@NotNull Priority priority) {
         if (this.priority != null && this.priority.isLowerOrEqualPriority(priority)) {
             return;
         }
@@ -587,9 +589,9 @@ public final class NewChunkHolder {
         return this.currentTicketLevel;
     }
 
-    public final ChunkHolder vanillaChunkHolder;
+    public final @NotNull ChunkHolder vanillaChunkHolder;
 
-    public NewChunkHolder(final ServerLevel world, final int chunkX, final int chunkZ, final ChunkTaskScheduler scheduler) {
+    public NewChunkHolder(final @NotNull ServerLevel world, final int chunkX, final int chunkZ, final ChunkTaskScheduler scheduler) {
         this.world = world;
         this.chunkX = chunkX;
         this.chunkZ = chunkZ;
@@ -597,7 +599,7 @@ public final class NewChunkHolder {
         this.vanillaChunkHolder = new ChunkHolder(new ChunkPos(chunkX, chunkZ), world, world.getLightEngine(), world.chunkSource.chunkMap, this);
     }
 
-    protected ImposterProtoChunk wrappedChunkForNeighbour;
+    protected @Nullable ImposterProtoChunk wrappedChunkForNeighbour;
 
     // holds scheduling lock
     public ChunkAccess getChunkForNeighbourAccess() {
@@ -648,7 +650,7 @@ public final class NewChunkHolder {
 
     // must hold scheduling lock
     // returns string reason for why chunk should remain loaded, null otherwise
-    public final String isSafeToUnload() {
+    public final @Nullable String isSafeToUnload() {
         // is ticket level below threshold?
         if (this.oldTicketLevel <= ChunkHolderManager.MAX_TICKET_LEVEL) {
             return "ticket_level";
@@ -725,13 +727,13 @@ public final class NewChunkHolder {
 
     // note: these are completed with null to indicate that no write occurred
     // they are also completed with null to indicate a null write occurred
-    private UnloadTask chunkDataUnload;
-    private UnloadTask entityDataUnload;
-    private UnloadTask poiDataUnload;
+    private @Nullable UnloadTask chunkDataUnload;
+    private @Nullable UnloadTask entityDataUnload;
+    private @Nullable UnloadTask poiDataUnload;
 
     public static final record UnloadTask(Completable<CompoundTag> completable, DelayedPrioritisedTask task) {}
 
-    public UnloadTask getUnloadTask(final RegionFileIOThread.RegionFileType type) {
+    public UnloadTask getUnloadTask(final RegionFileIOThread.@NotNull RegionFileType type) {
         switch (type) {
             case CHUNK_DATA:
                 return this.chunkDataUnload;
@@ -744,10 +746,10 @@ public final class NewChunkHolder {
         }
     }
 
-    private UnloadState unloadState;
+    private @Nullable UnloadState unloadState;
 
     // holds schedule lock
-    UnloadState unloadStage1() {
+    @Nullable UnloadState unloadStage1() {
         // because we hold the scheduling lock, we cannot actually unload anything
         // so we need to null this chunk's state
         ChunkAccess chunk = this.currentChunk;
@@ -782,7 +784,7 @@ public final class NewChunkHolder {
     }
 
     // data is null if failed or does not need to be saved
-    void completeAsyncChunkDataSave(final CompoundTag data) {
+    void completeAsyncChunkDataSave(final @Nullable CompoundTag data) {
         if (data != null) {
             RegionFileIOThread.scheduleSave(this.world, this.chunkX, this.chunkZ, data, RegionFileIOThread.RegionFileType.CHUNK_DATA);
         }
@@ -797,7 +799,7 @@ public final class NewChunkHolder {
         }
     }
 
-    void unloadStage2(final UnloadState state) {
+    void unloadStage2(final @NotNull UnloadState state) {
         this.unloadState = null;
         final ChunkAccess chunk = state.chunk();
         final ChunkEntitySlices entityChunk = state.entityChunk();
@@ -894,7 +896,7 @@ public final class NewChunkHolder {
 
     // holds: ticket level update lock
     // holds: schedule lock
-    public void processTicketLevelUpdate(final List<ChunkProgressionTask> scheduledTasks, final List<NewChunkHolder> changedLoadStatus) {
+    public void processTicketLevelUpdate(final List<ChunkProgressionTask> scheduledTasks, final @NotNull List<NewChunkHolder> changedLoadStatus) {
         final int oldLevel = this.oldTicketLevel;
         final int newLevel = this.currentTicketLevel;
 
@@ -1089,7 +1091,7 @@ public final class NewChunkHolder {
         return this.getChunkStatus().isOrAfter(ChunkHolder.FullChunkStatus.BORDER);
     }
 
-    private static ChunkHolder.FullChunkStatus getStatusForBitset(final long bitset) {
+    private static ChunkHolder.@NotNull FullChunkStatus getStatusForBitset(final long bitset) {
         if (areNeighboursFullLoaded(bitset, 2)) {
             return ChunkHolder.FullChunkStatus.ENTITY_TICKING;
         } else if (areNeighboursFullLoaded(bitset, 1)) {
@@ -1102,7 +1104,7 @@ public final class NewChunkHolder {
     }
 
     // note: only while updating ticket level, so holds ticket update lock + scheduling lock
-    protected final boolean onTicketUpdate(final ChunkHolder.FullChunkStatus oldState, final ChunkHolder.FullChunkStatus newState) {
+    protected final boolean onTicketUpdate(final ChunkHolder.FullChunkStatus oldState, final ChunkHolder.@NotNull FullChunkStatus newState) {
         if (oldState == newState) {
             return false;
         }
@@ -1177,7 +1179,7 @@ public final class NewChunkHolder {
         }
     }
 
-    private boolean queueBorderFullStatus(final boolean loaded, final List<NewChunkHolder> changedFullStatus) {
+    private boolean queueBorderFullStatus(final boolean loaded, final @NotNull List<NewChunkHolder> changedFullStatus) {
         final ChunkHolder.FullChunkStatus toStatus = loaded ? ChunkHolder.FullChunkStatus.BORDER : ChunkHolder.FullChunkStatus.INACCESSIBLE;
 
         int failures = 0;
@@ -1204,7 +1206,7 @@ public final class NewChunkHolder {
     }
 
     // only call on main thread, must hold ticket level and scheduling lock
-    private void onFullChunkLoadChange(final boolean loaded, final List<NewChunkHolder> changedFullStatus) {
+    private void onFullChunkLoadChange(final boolean loaded, final @NotNull List<NewChunkHolder> changedFullStatus) {
         for (int dz = -NEIGHBOUR_RADIUS; dz <= NEIGHBOUR_RADIUS; ++dz) {
             for (int dx = -NEIGHBOUR_RADIUS; dx <= NEIGHBOUR_RADIUS; ++dx) {
                 final NewChunkHolder holder = (dx | dz) == 0 ? this : this.scheduler.chunkHolderManager.getChunkHolder(dx + this.chunkX, dz + this.chunkZ);
@@ -1221,7 +1223,7 @@ public final class NewChunkHolder {
         }
     }
 
-    private ChunkHolder.FullChunkStatus updateCurrentState(final ChunkHolder.FullChunkStatus to) {
+    private ChunkHolder.FullChunkStatus updateCurrentState(final ChunkHolder.@NotNull FullChunkStatus to) {
         int failures = 0;
         for (long curr = (long)CHUNK_STATUS_HANDLE.getVolatile((NewChunkHolder)this);;) {
             final long update = (curr & PENDING_STATUS_MASK) | (long)to.ordinal();
@@ -1243,7 +1245,7 @@ public final class NewChunkHolder {
     private boolean processingFullStatus = false;
 
     // only to be called on the main thread, no locks need to be held
-    public boolean handleFullStatusChange(final List<NewChunkHolder> changedFullStatus) {
+    public boolean handleFullStatusChange(final @NotNull List<NewChunkHolder> changedFullStatus) {
         TickThread.ensureTickThread(this.world, this.chunkX, this.chunkZ, "Cannot update full status thread off-main");
 
         boolean ret = false;
@@ -1359,7 +1361,7 @@ public final class NewChunkHolder {
 
     // note: must hold scheduling lock
     // rets true if the current requested gen status is not null (effectively, whether further scheduling is not needed)
-    boolean upgradeGenTarget(final ChunkStatus toStatus) {
+    boolean upgradeGenTarget(final @Nullable ChunkStatus toStatus) {
         if (toStatus == null) {
             throw new NullPointerException("toStatus cannot be null");
         }
@@ -1391,12 +1393,12 @@ public final class NewChunkHolder {
     private final Reference2ObjectOpenHashMap<ChunkStatus, List<Consumer<ChunkAccess>>> statusWaiters = new Reference2ObjectOpenHashMap<>();
 
     void addStatusConsumer(final ChunkStatus status, final Consumer<ChunkAccess> consumer) {
-        this.statusWaiters.computeIfAbsent(status, (final ChunkStatus keyInMap) -> {
+        this.statusWaiters.computeIfAbsent(status, (final @NotNull ChunkStatus keyInMap) -> {
             return new ArrayList<>(4);
         }).add(consumer);
     }
 
-    private void completeStatusConsumers(ChunkStatus status, final ChunkAccess chunk) {
+    private void completeStatusConsumers(ChunkStatus status, final @Nullable ChunkAccess chunk) {
         // need to tell future statuses to complete if cancelled
         do {
             this.completeStatusConsumers0(status, chunk);
@@ -1428,12 +1430,12 @@ public final class NewChunkHolder {
     private final Reference2ObjectOpenHashMap<ChunkHolder.FullChunkStatus, List<Consumer<LevelChunk>>> fullStatusWaiters = new Reference2ObjectOpenHashMap<>();
 
     void addFullStatusConsumer(final ChunkHolder.FullChunkStatus status, final Consumer<LevelChunk> consumer) {
-        this.fullStatusWaiters.computeIfAbsent(status, (final ChunkHolder.FullChunkStatus keyInMap) -> {
+        this.fullStatusWaiters.computeIfAbsent(status, (final ChunkHolder.@NotNull FullChunkStatus keyInMap) -> {
             return new ArrayList<>(4);
         }).add(consumer);
     }
 
-    private void completeFullStatusConsumers(ChunkHolder.FullChunkStatus status, final LevelChunk chunk) {
+    private void completeFullStatusConsumers(ChunkHolder.FullChunkStatus status, final @Nullable LevelChunk chunk) {
         // need to tell future statuses to complete if cancelled
         final ChunkHolder.FullChunkStatus max = CHUNK_STATUS_BY_ID[CHUNK_STATUS_BY_ID.length - 1];
 
@@ -1469,8 +1471,8 @@ public final class NewChunkHolder {
     }
 
     // note: must hold scheduling lock
-    private void onChunkGenComplete(final ChunkAccess newChunk, final ChunkStatus newStatus,
-                                    final List<ChunkProgressionTask> scheduleList, final List<NewChunkHolder> changedLoadStatus) {
+    private void onChunkGenComplete(final @Nullable ChunkAccess newChunk, final @NotNull ChunkStatus newStatus,
+                                    final List<ChunkProgressionTask> scheduleList, final @NotNull List<NewChunkHolder> changedLoadStatus) {
         if (!this.neighboursBlockingGenTask.isEmpty()) {
             throw new IllegalStateException("Cannot have neighbours blocking this gen task");
         }
@@ -1622,7 +1624,7 @@ public final class NewChunkHolder {
         }
     }
 
-    private void scheduleNeighbours(final List<NewChunkHolder> needsScheduling, final List<ChunkProgressionTask> scheduleList) {
+    private void scheduleNeighbours(final @Nullable List<NewChunkHolder> needsScheduling, final List<ChunkProgressionTask> scheduleList) {
         if (needsScheduling != null) {
             for (int i = 0, len = needsScheduling.size(); i < len; ++i) {
                 final NewChunkHolder neighbour = needsScheduling.get(i);
@@ -1634,8 +1636,8 @@ public final class NewChunkHolder {
         }
     }
 
-    public void setGenerationTask(final ChunkProgressionTask generationTask, final ChunkStatus taskStatus,
-                                  final List<NewChunkHolder> neighbours) {
+    public void setGenerationTask(final @NotNull ChunkProgressionTask generationTask, final @NotNull ChunkStatus taskStatus,
+                                  final @NotNull List<NewChunkHolder> neighbours) {
         if (this.generationTask != null || (this.currentGenStatus != null && this.currentGenStatus.isOrAfter(taskStatus))) {
             throw new IllegalStateException("Currently generating or provided task is trying to generate to a level we are already at!");
         }
@@ -1651,7 +1653,7 @@ public final class NewChunkHolder {
 
         this.checkUnload();
 
-        generationTask.onComplete((final ChunkAccess access, final Throwable thr) -> {
+        generationTask.onComplete((final @NotNull ChunkAccess access, final @NotNull Throwable thr) -> {
             if (generationTask != this.generationTask) {
                 throw new IllegalStateException(
                     "Cannot complete generation task '" + generationTask + "' because we are waiting on '" + this.generationTask + "' instead!"
@@ -1815,14 +1817,14 @@ public final class NewChunkHolder {
         }
 
         @Override
-        public String toString() {
+        public @NotNull String toString() {
             return "AsyncChunkSerializeTask{" +
                 "chunk={pos=" + this.chunk.getPos() + ",world=\"" + this.world.getWorld().getName() + "\"}" +
                 "}";
         }
     }
 
-    private boolean saveChunk(final ChunkAccess chunk, final boolean unloading) {
+    private boolean saveChunk(final @NotNull ChunkAccess chunk, final boolean unloading) {
         if (!chunk.isUnsaved()) {
             if (unloading) {
                 this.completeAsyncChunkDataSave(null);
@@ -1875,8 +1877,8 @@ public final class NewChunkHolder {
     }
 
     private boolean lastEntitySaveNull;
-    private CompoundTag lastEntityUnload;
-    private boolean saveEntities(final ChunkEntitySlices entities, final boolean unloading) {
+    private @Nullable CompoundTag lastEntityUnload;
+    private boolean saveEntities(final @NotNull ChunkEntitySlices entities, final boolean unloading) {
         try {
             CompoundTag mergeFrom = null;
             if (entities.isTransient()) {
@@ -1920,7 +1922,7 @@ public final class NewChunkHolder {
     }
 
     private boolean lastPoiSaveNull;
-    private boolean savePOI(final PoiChunk poi, final boolean unloading) {
+    private boolean savePOI(final @NotNull PoiChunk poi, final boolean unloading) {
         try {
             final CompoundTag save = poi.save();
             poi.setDirty(false);
@@ -1946,7 +1948,7 @@ public final class NewChunkHolder {
     }
 
     @Override
-    public String toString() {
+    public @NotNull String toString() {
         final ChunkCompletion lastCompletion = this.lastChunkCompletion;
         final ChunkEntitySlices entityChunk = this.entityChunk;
         final long chunkStatus = this.chunkStatus;
@@ -1980,7 +1982,7 @@ public final class NewChunkHolder {
             '}';
     }
 
-    private static JsonElement serializeCompletable(final Completable<?> completable) {
+    private static @NotNull JsonElement serializeCompletable(final @Nullable Completable<?> completable) {
         if (completable == null) {
             return new JsonPrimitive("null");
         }
@@ -1997,7 +1999,7 @@ public final class NewChunkHolder {
     }
 
     // holds ticket and scheduling lock
-    public JsonObject getDebugJson() {
+    public @NotNull JsonObject getDebugJson() {
         final JsonObject ret = new JsonObject();
 
         final ChunkCompletion lastCompletion = this.lastChunkCompletion;
diff --git a/src/main/java/io/papermc/paper/chunk/system/scheduling/PriorityHolder.java b/src/main/java/io/papermc/paper/chunk/system/scheduling/PriorityHolder.java
index b4c56bf12dc8dd17452210ece4fd67411cc6b2fd..b8e1cd0d1c308e138e6183a31781b525cc81624c 100644
--- a/src/main/java/io/papermc/paper/chunk/system/scheduling/PriorityHolder.java
+++ b/src/main/java/io/papermc/paper/chunk/system/scheduling/PriorityHolder.java
@@ -2,6 +2,8 @@ package io.papermc.paper.chunk.system.scheduling;
 
 import ca.spottedleaf.concurrentutil.executor.standard.PrioritisedExecutor;
 import ca.spottedleaf.concurrentutil.util.ConcurrentUtil;
+import org.jetbrains.annotations.NotNull;
+
 import java.lang.invoke.VarHandle;
 
 public abstract class PriorityHolder {
@@ -28,7 +30,7 @@ public abstract class PriorityHolder {
         PRIORITY_HANDLE.set((PriorityHolder)this, (int)val);
     }
 
-    protected PriorityHolder(final PrioritisedExecutor.Priority priority) {
+    protected PriorityHolder(final PrioritisedExecutor.@NotNull Priority priority) {
         if (!PrioritisedExecutor.Priority.isValidPriority(priority)) {
             throw new IllegalArgumentException("Invalid priority " + priority);
         }
@@ -106,7 +108,7 @@ public abstract class PriorityHolder {
         return PrioritisedExecutor.Priority.getPriority(ret);
     }
 
-    public final void lowerPriority(final PrioritisedExecutor.Priority priority) {
+    public final void lowerPriority(final PrioritisedExecutor.@NotNull Priority priority) {
         if (!PrioritisedExecutor.Priority.isValidPriority(priority)) {
             throw new IllegalArgumentException("Invalid priority " + priority);
         }
@@ -139,7 +141,7 @@ public abstract class PriorityHolder {
         }
     }
 
-    public final void setPriority(final PrioritisedExecutor.Priority priority) {
+    public final void setPriority(final PrioritisedExecutor.@NotNull Priority priority) {
         if (!PrioritisedExecutor.Priority.isValidPriority(priority)) {
             throw new IllegalArgumentException("Invalid priority " + priority);
         }
@@ -168,7 +170,7 @@ public abstract class PriorityHolder {
         }
     }
 
-    public final void raisePriority(final PrioritisedExecutor.Priority priority) {
+    public final void raisePriority(final PrioritisedExecutor.@NotNull Priority priority) {
         if (!PrioritisedExecutor.Priority.isValidPriority(priority)) {
             throw new IllegalArgumentException("Invalid priority " + priority);
         }
diff --git a/src/main/java/io/papermc/paper/command/MSPTCommand.java b/src/main/java/io/papermc/paper/command/MSPTCommand.java
index 8b5293b0c696ef21d0101493ffa41b60bf0bc86b..284f7e73324c3a007e7b0f885466acd84151cca4 100644
--- a/src/main/java/io/papermc/paper/command/MSPTCommand.java
+++ b/src/main/java/io/papermc/paper/command/MSPTCommand.java
@@ -13,6 +13,7 @@ import java.util.Collections;
 import java.util.List;
 import org.checkerframework.checker.nullness.qual.NonNull;
 import org.checkerframework.framework.qual.DefaultQualifier;
+import org.jetbrains.annotations.NotNull;
 
 import static net.kyori.adventure.text.Component.text;
 import static net.kyori.adventure.text.format.NamedTextColor.GOLD;
@@ -34,7 +35,7 @@ public final class MSPTCommand extends Command {
     }
 
     @Override
-    public List<String> tabComplete(CommandSender sender, String alias, String[] args, Location location) throws IllegalArgumentException {
+    public @NotNull List<String> tabComplete(CommandSender sender, String alias, String[] args, Location location) throws IllegalArgumentException {
         return Collections.emptyList();
     }
 
diff --git a/src/main/java/io/papermc/paper/command/MemCommand.java b/src/main/java/io/papermc/paper/command/MemCommand.java
index 5297fab02989ef1f79ad23b758f21a3b2c2971b4..4484e38c61c4560dfc6e82616c6d6f2f3c9c2f2b 100644
--- a/src/main/java/io/papermc/paper/command/MemCommand.java
+++ b/src/main/java/io/papermc/paper/command/MemCommand.java
@@ -5,6 +5,7 @@ import org.bukkit.command.Command;
 import org.bukkit.command.CommandSender;
 import org.checkerframework.checker.nullness.qual.NonNull;
 import org.checkerframework.framework.qual.DefaultQualifier;
+import org.jetbrains.annotations.NotNull;
 
 import java.util.Collections;
 import java.util.List;
@@ -23,7 +24,7 @@ public final class MemCommand extends Command {
     }
 
     @Override
-    public List<String> tabComplete(CommandSender sender, String alias, String[] args, Location location) throws IllegalArgumentException {
+    public @NotNull List<String> tabComplete(CommandSender sender, String alias, String[] args, Location location) throws IllegalArgumentException {
         return Collections.emptyList();
     }
 
diff --git a/src/main/java/io/papermc/paper/command/PaperCommand.java b/src/main/java/io/papermc/paper/command/PaperCommand.java
index 92154550b41b2e1d03deb1271b71bb3baa735e0a..ee970b1b4748866c3cda6e514c173292697bcd13 100644
--- a/src/main/java/io/papermc/paper/command/PaperCommand.java
+++ b/src/main/java/io/papermc/paper/command/PaperCommand.java
@@ -31,6 +31,7 @@ import org.bukkit.plugin.PluginManager;
 import org.checkerframework.checker.nullness.qual.NonNull;
 import org.checkerframework.checker.nullness.qual.Nullable;
 import org.checkerframework.framework.qual.DefaultQualifier;
+import org.jetbrains.annotations.NotNull;
 
 import static net.kyori.adventure.text.Component.text;
 import static net.kyori.adventure.text.format.NamedTextColor.RED;
@@ -91,7 +92,7 @@ public final class PaperCommand extends Command {
     }
 
     @Override
-    public List<String> tabComplete(
+    public @NotNull List<String> tabComplete(
         final CommandSender sender,
         final String alias,
         final String[] args,
diff --git a/src/main/java/io/papermc/paper/command/subcommands/FixLightCommand.java b/src/main/java/io/papermc/paper/command/subcommands/FixLightCommand.java
index 7784d72ddd6db00c674e22759c00c430222c4b85..b0240fccb37fc4011c06a62ce80ed39c4f6d257c 100644
--- a/src/main/java/io/papermc/paper/command/subcommands/FixLightCommand.java
+++ b/src/main/java/io/papermc/paper/command/subcommands/FixLightCommand.java
@@ -18,6 +18,7 @@ import org.bukkit.entity.Player;
 import org.checkerframework.checker.nullness.qual.NonNull;
 import org.checkerframework.checker.nullness.qual.Nullable;
 import org.checkerframework.framework.qual.DefaultQualifier;
+import org.jetbrains.annotations.NotNull;
 
 import static net.kyori.adventure.text.Component.text;
 import static net.kyori.adventure.text.format.NamedTextColor.BLUE;
@@ -91,7 +92,7 @@ public final class FixLightCommand implements PaperSubcommand {
 
         final int[] relitChunks = new int[1];
         lightengine.relight(chunks,
-            (final ChunkPos chunkPos) -> {
+            (final @NotNull ChunkPos chunkPos) -> {
                 ++relitChunks[0];
                 sender.getBukkitEntity().sendMessage(text().color(DARK_AQUA).append(
                     text("Relit chunk ", BLUE), text(chunkPos.toString()),
diff --git a/src/main/java/io/papermc/paper/commands/DelegatingCommandSource.java b/src/main/java/io/papermc/paper/commands/DelegatingCommandSource.java
index 01a2bc1feec808790bb93618ce46adb9bea5a9c8..88e2c590bc3fe67618bce119f8d9a30ff84efa84 100644
--- a/src/main/java/io/papermc/paper/commands/DelegatingCommandSource.java
+++ b/src/main/java/io/papermc/paper/commands/DelegatingCommandSource.java
@@ -4,6 +4,7 @@ import net.minecraft.commands.CommandSource;
 import net.minecraft.commands.CommandSourceStack;
 import net.minecraft.network.chat.Component;
 import org.bukkit.command.CommandSender;
+import org.jetbrains.annotations.NotNull;
 
 import java.util.UUID;
 
@@ -36,7 +37,7 @@ public class DelegatingCommandSource implements CommandSource {
     }
 
     @Override
-    public CommandSender getBukkitSender(CommandSourceStack wrapper) {
+    public @NotNull CommandSender getBukkitSender(CommandSourceStack wrapper) {
         return delegate.getBukkitSender(wrapper);
     }
 }
diff --git a/src/main/java/io/papermc/paper/commands/FeedbackForwardingSender.java b/src/main/java/io/papermc/paper/commands/FeedbackForwardingSender.java
index e3a5f1ec376319bdfda87fa27ae217bff3914292..1e3adb9a2695e6700807dec35633d7856797f445 100644
--- a/src/main/java/io/papermc/paper/commands/FeedbackForwardingSender.java
+++ b/src/main/java/io/papermc/paper/commands/FeedbackForwardingSender.java
@@ -18,6 +18,8 @@ import org.bukkit.craftbukkit.command.ServerCommandSender;
 import org.checkerframework.checker.nullness.qual.NonNull;
 import org.checkerframework.checker.nullness.qual.Nullable;
 import org.checkerframework.framework.qual.DefaultQualifier;
+import org.jetbrains.annotations.NotNull;
+
 
 @DefaultQualifier(NonNull.class)
 public final class FeedbackForwardingSender extends ServerCommandSender {
@@ -48,12 +50,12 @@ public final class FeedbackForwardingSender extends ServerCommandSender {
     }
 
     @Override
-    public String getName() {
+    public @NotNull String getName() {
         return "FeedbackForwardingSender";
     }
 
     @Override
-    public Component name() {
+    public @NotNull Component name() {
         return Component.text(this.getName());
     }
 
diff --git a/src/main/java/io/papermc/paper/configuration/Configurations.java b/src/main/java/io/papermc/paper/configuration/Configurations.java
index c2dca89291361d60cbf160cab77749cb0130035a..1e5c36cc2aea4acf7edccb6935754ab8ac5ced21 100644
--- a/src/main/java/io/papermc/paper/configuration/Configurations.java
+++ b/src/main/java/io/papermc/paper/configuration/Configurations.java
@@ -8,6 +8,7 @@ import net.minecraft.resources.ResourceLocation;
 import net.minecraft.server.level.ServerLevel;
 import org.checkerframework.checker.nullness.qual.Nullable;
 import org.jetbrains.annotations.MustBeInvokedByOverriders;
+import org.jetbrains.annotations.NotNull;
 import org.slf4j.Logger;
 import org.spongepowered.configurate.CommentedConfigurationNode;
 import org.spongepowered.configurate.ConfigurateException;
@@ -88,7 +89,7 @@ public abstract class Configurations<G, W> {
         };
     }
 
-    static <T> CheckedFunction<ConfigurationNode, T, SerializationException> reloader(Class<T> type, T instance) {
+    static <T> CheckedFunction<ConfigurationNode, T, SerializationException> reloader(Class<T> type, @NotNull T instance) {
         return node -> {
             ObjectMapper.Factory factory = (ObjectMapper.Factory) Objects.requireNonNull(node.options().serializers().get(type));
             ObjectMapper.Mutable<T> mutable = (ObjectMapper.Mutable<T>) factory.get(type);
@@ -97,7 +98,7 @@ public abstract class Configurations<G, W> {
         };
     }
 
-    public G initializeGlobalConfiguration() throws ConfigurateException {
+    public @NotNull G initializeGlobalConfiguration() throws ConfigurateException {
         return this.initializeGlobalConfiguration(creator(this.globalConfigClass, true));
     }
 
@@ -111,7 +112,7 @@ public abstract class Configurations<G, W> {
         }
     }
 
-    protected G initializeGlobalConfiguration(final CheckedFunction<ConfigurationNode, G, SerializationException> creator) throws ConfigurateException {
+    protected @NotNull G initializeGlobalConfiguration(final CheckedFunction<ConfigurationNode, G, SerializationException> creator) throws ConfigurateException {
         final Path configFile = this.globalFolder.resolve(this.globalConfigFileName);
         final YamlConfigurationLoader loader = this.createGlobalLoaderBuilder()
             .defaultOptions(this.applyObjectMapperFactory(this.createGlobalObjectMapperFactoryBuilder().build()))
@@ -183,11 +184,11 @@ public abstract class Configurations<G, W> {
     }
 
     // Make sure to run version transforms on the default world config first via #setupWorldDefaultsConfig
-    public W createWorldConfig(final ContextMap contextMap) throws IOException {
+    public @NotNull W createWorldConfig(final ContextMap contextMap) throws IOException {
         return this.createWorldConfig(contextMap, creator(this.worldConfigClass, false));
     }
 
-    protected W createWorldConfig(final ContextMap contextMap, final CheckedFunction<ConfigurationNode, W, SerializationException> creator) throws IOException {
+    protected @NotNull W createWorldConfig(final ContextMap contextMap, final CheckedFunction<ConfigurationNode, W, SerializationException> creator) throws IOException {
         final Path defaultsConfigFile = this.globalFolder.resolve(this.defaultWorldConfigFileName);
         final YamlConfigurationLoader defaultsLoader = this.createDefaultWorldLoader(true, this.createDefaultContextMap().build(), defaultsConfigFile).loader();
         final ConfigurationNode defaultsNode = defaultsLoader.load();
@@ -246,7 +247,7 @@ public abstract class Configurations<G, W> {
         }
 
         @SuppressWarnings("unchecked")
-        public <T> T require(ContextKey<T> key) {
+        public <T> @NotNull T require(ContextKey<T> key) {
             final @Nullable Object value = this.backingMap.get(key);
             if (value == null) {
                 throw new NoSuchElementException("No element found for " + key + " with type " + key.type());
diff --git a/src/main/java/io/papermc/paper/configuration/serializer/FastutilMapSerializer.java b/src/main/java/io/papermc/paper/configuration/serializer/FastutilMapSerializer.java
index f2f362883d1825084c277608c791f82165828ebe..88796b9b3f281cfdab2caf1ce4c2877b3d82a436 100644
--- a/src/main/java/io/papermc/paper/configuration/serializer/FastutilMapSerializer.java
+++ b/src/main/java/io/papermc/paper/configuration/serializer/FastutilMapSerializer.java
@@ -3,6 +3,7 @@ package io.papermc.paper.configuration.serializer;
 import io.leangen.geantyref.GenericTypeReflector;
 import io.leangen.geantyref.TypeFactory;
 import org.checkerframework.checker.nullness.qual.Nullable;
+import org.jetbrains.annotations.NotNull;
 import org.spongepowered.configurate.ConfigurationNode;
 import org.spongepowered.configurate.serialize.SerializationException;
 import org.spongepowered.configurate.serialize.TypeSerializer;
@@ -22,7 +23,7 @@ public abstract class FastutilMapSerializer<M extends Map<?, ?>> implements Type
     }
 
     @Override
-    public M deserialize(final Type type, final ConfigurationNode node) throws SerializationException {
+    public @NotNull M deserialize(final Type type, final ConfigurationNode node) throws SerializationException {
         @Nullable final Map map = (Map) node.get(this.createBaseMapType((ParameterizedType) type));
         return this.factory.apply(map == null ? Collections.emptyMap() : map);
     }
diff --git a/src/main/java/io/papermc/paper/configuration/serializer/registry/RegistryEntrySerializer.java b/src/main/java/io/papermc/paper/configuration/serializer/registry/RegistryEntrySerializer.java
index 0e4e0f1788cf67312cb52bd572784c2f27db71b6..0eac6f7f16470846e2c175d146acda19bba7f3a6 100644
--- a/src/main/java/io/papermc/paper/configuration/serializer/registry/RegistryEntrySerializer.java
+++ b/src/main/java/io/papermc/paper/configuration/serializer/registry/RegistryEntrySerializer.java
@@ -6,6 +6,7 @@ import net.minecraft.resources.ResourceKey;
 import net.minecraft.resources.ResourceLocation;
 import net.minecraft.server.MinecraftServer;
 import org.checkerframework.checker.nullness.qual.Nullable;
+import org.jetbrains.annotations.NotNull;
 import org.spongepowered.configurate.serialize.ScalarSerializer;
 import org.spongepowered.configurate.serialize.SerializationException;
 
@@ -36,7 +37,7 @@ abstract class RegistryEntrySerializer<T, R> extends ScalarSerializer<T> {
     protected abstract T convertFromResourceKey(ResourceKey<R> key) throws SerializationException;
 
     @Override
-    public final T deserialize(Type type, Object obj) throws SerializationException {
+    public final @NotNull T deserialize(Type type, Object obj) throws SerializationException {
         return this.convertFromResourceKey(this.deserializeKey(obj));
     }
 
diff --git a/src/main/java/io/papermc/paper/configuration/serializer/registry/RegistryValueSerializer.java b/src/main/java/io/papermc/paper/configuration/serializer/registry/RegistryValueSerializer.java
index 10d3dd361cd26dc849ebd53c1235aa8e4f7af04d..3945a87d625e9f994645d177f3cd252dc91f9bb7 100644
--- a/src/main/java/io/papermc/paper/configuration/serializer/registry/RegistryValueSerializer.java
+++ b/src/main/java/io/papermc/paper/configuration/serializer/registry/RegistryValueSerializer.java
@@ -3,6 +3,7 @@ package io.papermc.paper.configuration.serializer.registry;
 import io.leangen.geantyref.TypeToken;
 import net.minecraft.core.Registry;
 import net.minecraft.resources.ResourceKey;
+import org.jetbrains.annotations.NotNull;
 import org.spongepowered.configurate.serialize.SerializationException;
 
 /**
@@ -19,7 +20,7 @@ public final class RegistryValueSerializer<T> extends RegistryEntrySerializer<T,
     }
 
     @Override
-    protected T convertFromResourceKey(ResourceKey<T> key) throws SerializationException {
+    protected @NotNull T convertFromResourceKey(ResourceKey<T> key) throws SerializationException {
         final T value = this.registry().get(key);
         if (value == null) {
             throw new SerializationException("Missing value in " + this.registry() + " with key " + key.location());
@@ -28,7 +29,7 @@ public final class RegistryValueSerializer<T> extends RegistryEntrySerializer<T,
     }
 
     @Override
-    protected ResourceKey<T> convertToResourceKey(T value) {
+    protected ResourceKey<T> convertToResourceKey(@NotNull T value) {
         return this.registry().getResourceKey(value).orElseThrow();
     }
 }
diff --git a/src/main/java/io/papermc/paper/configuration/type/IntOr.java b/src/main/java/io/papermc/paper/configuration/type/IntOr.java
index a03e82fa80a548e18634ac2f536a995c3f518498..405f003466cdf024d249c376f107ee00bc156710 100644
--- a/src/main/java/io/papermc/paper/configuration/type/IntOr.java
+++ b/src/main/java/io/papermc/paper/configuration/type/IntOr.java
@@ -7,6 +7,7 @@ import java.util.function.Function;
 import java.util.function.IntPredicate;
 import java.util.function.Predicate;
 import org.apache.commons.lang3.math.NumberUtils;
+import org.jetbrains.annotations.NotNull;
 import org.slf4j.Logger;
 import org.spongepowered.configurate.serialize.ScalarSerializer;
 import org.spongepowered.configurate.serialize.SerializationException;
@@ -49,9 +50,9 @@ public interface IntOr {
 
         private final Function<OptionalInt, T> creator;
         private final String otherSerializedValue;
-        private final T otherValue;
+        private final @NotNull T otherValue;
 
-        public Serializer(Class<T> classOfT, Function<OptionalInt, T> creator, String otherSerializedValue, T otherValue) {
+        public Serializer(Class<T> classOfT, Function<OptionalInt, T> creator, String otherSerializedValue, @NotNull T otherValue) {
             super(classOfT);
             this.creator = creator;
             this.otherSerializedValue = otherSerializedValue;
@@ -59,7 +60,7 @@ public interface IntOr {
         }
 
         @Override
-        public T deserialize(Type type, Object obj) throws SerializationException {
+        public @NotNull T deserialize(Type type, Object obj) throws SerializationException {
             if (obj instanceof String string) {
                 if (this.otherSerializedValue.equalsIgnoreCase(string)) {
                     return this.otherValue;
@@ -77,7 +78,7 @@ public interface IntOr {
         }
 
         @Override
-        protected Object serialize(T item, Predicate<Class<?>> typeSupported) {
+        protected Object serialize(@NotNull T item, Predicate<Class<?>> typeSupported) {
             final OptionalInt value = item.value();
             if (value.isPresent()) {
                 return value.getAsInt();
diff --git a/src/main/java/io/papermc/paper/configuration/type/fallback/FallbackValue.java b/src/main/java/io/papermc/paper/configuration/type/fallback/FallbackValue.java
index a3a1d398d783c37914fb6d646e11361afee687b8..da4db0dacbf7079f665eb133752df485d72617a3 100644
--- a/src/main/java/io/papermc/paper/configuration/type/fallback/FallbackValue.java
+++ b/src/main/java/io/papermc/paper/configuration/type/fallback/FallbackValue.java
@@ -3,6 +3,7 @@ package io.papermc.paper.configuration.type.fallback;
 import com.google.common.base.Preconditions;
 import net.minecraft.server.MinecraftServer;
 import org.apache.commons.lang3.math.NumberUtils;
+import org.jetbrains.annotations.NotNull;
 import org.spigotmc.SpigotWorldConfig;
 import org.spongepowered.configurate.serialize.SerializationException;
 
@@ -33,7 +34,7 @@ public sealed abstract class FallbackValue permits FallbackValue.Int {
     protected abstract Set<ContextKey<?>> required();
 
     @SuppressWarnings("unchecked")
-    protected <T> T get(ContextKey<T> contextKey) {
+    protected <T> @NotNull T get(ContextKey<T> contextKey) {
         return (T) Objects.requireNonNull(this.contextMap.get(contextKey), "Missing " + contextKey);
     }
 
@@ -95,7 +96,7 @@ public sealed abstract class FallbackValue permits FallbackValue.Int {
             return this.name;
         }
 
-        Map<ContextKey<?>, Object> singleton(T value) {
+        Map<ContextKey<?>, Object> singleton(@NotNull T value) {
             return Map.of(this, value);
         }
     }
diff --git a/src/main/java/io/papermc/paper/console/BrigadierCommandCompleter.java b/src/main/java/io/papermc/paper/console/BrigadierCommandCompleter.java
index 0627c98cae0b5ebdd71a849ae1299d7d3d581850..f0a77fd63f31e891c9c02f0e3b4024b5918a56a5 100644
--- a/src/main/java/io/papermc/paper/console/BrigadierCommandCompleter.java
+++ b/src/main/java/io/papermc/paper/console/BrigadierCommandCompleter.java
@@ -15,6 +15,7 @@ import net.minecraft.commands.CommandSourceStack;
 import net.minecraft.network.chat.ComponentUtils;
 import net.minecraft.server.dedicated.DedicatedServer;
 import org.checkerframework.checker.nullness.qual.NonNull;
+import org.jetbrains.annotations.NotNull;
 import org.jline.reader.Candidate;
 import org.jline.reader.LineReader;
 import org.jline.reader.ParsedLine;
@@ -22,8 +23,8 @@ import org.jline.reader.ParsedLine;
 import static com.destroystokyo.paper.event.server.AsyncTabCompleteEvent.Completion.completion;
 
 public final class BrigadierCommandCompleter {
-    private final Supplier<CommandSourceStack> commandSourceStack;
-    private final DedicatedServer server;
+    private final @NotNull Supplier<CommandSourceStack> commandSourceStack;
+    private final @NotNull DedicatedServer server;
 
     public BrigadierCommandCompleter(final @NonNull DedicatedServer server) {
         this.server = server;
diff --git a/src/main/java/io/papermc/paper/console/BrigadierCommandHighlighter.java b/src/main/java/io/papermc/paper/console/BrigadierCommandHighlighter.java
index dd9d77d7c7f1a5a130a1f4c15e5b1e68ae3753e1..3d6b4d872c1861ef0ae989b9ba316163a94a2fb0 100644
--- a/src/main/java/io/papermc/paper/console/BrigadierCommandHighlighter.java
+++ b/src/main/java/io/papermc/paper/console/BrigadierCommandHighlighter.java
@@ -9,6 +9,7 @@ import java.util.regex.Pattern;
 import net.minecraft.commands.CommandSourceStack;
 import net.minecraft.server.dedicated.DedicatedServer;
 import org.checkerframework.checker.nullness.qual.NonNull;
+import org.jetbrains.annotations.NotNull;
 import org.jline.reader.Highlighter;
 import org.jline.reader.LineReader;
 import org.jline.utils.AttributedString;
@@ -17,8 +18,8 @@ import org.jline.utils.AttributedStyle;
 
 public final class BrigadierCommandHighlighter implements Highlighter {
     private static final int[] COLORS = {AttributedStyle.CYAN, AttributedStyle.YELLOW, AttributedStyle.GREEN, AttributedStyle.MAGENTA, /* Client uses GOLD here, not BLUE, however there is no GOLD AttributedStyle. */ AttributedStyle.BLUE};
-    private final Supplier<CommandSourceStack> commandSourceStack;
-    private final DedicatedServer server;
+    private final @NotNull Supplier<CommandSourceStack> commandSourceStack;
+    private final @NotNull DedicatedServer server;
 
     public BrigadierCommandHighlighter(final @NonNull DedicatedServer server) {
         this.server = server;
diff --git a/src/main/java/io/papermc/paper/console/HexFormattingConverter.java b/src/main/java/io/papermc/paper/console/HexFormattingConverter.java
index b9922b07cb105618390187d98acdf89e728e1f5a..4db662672f135a95dabb108e6334f013682a2316 100644
--- a/src/main/java/io/papermc/paper/console/HexFormattingConverter.java
+++ b/src/main/java/io/papermc/paper/console/HexFormattingConverter.java
@@ -17,6 +17,8 @@ import org.apache.logging.log4j.core.pattern.PatternFormatter;
 import org.apache.logging.log4j.core.pattern.PatternParser;
 import org.apache.logging.log4j.util.PerformanceSensitive;
 import org.apache.logging.log4j.util.PropertiesUtil;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
 
 import java.util.List;
 import java.util.regex.Matcher;
@@ -115,7 +117,7 @@ public final class HexFormattingConverter extends LogEventPatternConverter {
     }
 
     @Override
-    public void format(LogEvent event, StringBuilder toAppendTo) {
+    public void format(LogEvent event, @NotNull StringBuilder toAppendTo) {
         int start = toAppendTo.length();
         //noinspection ForLoopReplaceableByForEach
         for (int i = 0, size = formatters.size(); i < size; i++) {
@@ -133,14 +135,14 @@ public final class HexFormattingConverter extends LogEventPatternConverter {
         format(content, toAppendTo, start, useAnsi);
     }
 
-    private static String convertRGBColors(final String input) {
+    private static String convertRGBColors(final @NotNull String input) {
         return RGB_PATTERN.matcher(input).replaceAll(result -> {
             final int hex = Integer.decode(result.group().substring(1));
             return formatHexAnsi(hex);
         });
     }
 
-    private static String formatHexAnsi(final TextColor color) {
+    private static String formatHexAnsi(final @NotNull TextColor color) {
         return formatHexAnsi(color.value());
     }
 
@@ -151,11 +153,11 @@ public final class HexFormattingConverter extends LogEventPatternConverter {
         return String.format(RESET_RGB_ANSI, red, green, blue);
     }
 
-    private static String stripRGBColors(final String input) {
+    private static String stripRGBColors(final @NotNull String input) {
         return RGB_PATTERN.matcher(input).replaceAll("");
     }
 
-    static void format(String content, StringBuilder result, int start, boolean ansi) {
+    static void format(@NotNull String content, @NotNull StringBuilder result, int start, boolean ansi) {
         int next = content.indexOf(COLOR_CHAR);
         int last = content.length() - 1;
         if (next == -1 || next == last) {
@@ -194,7 +196,7 @@ public final class HexFormattingConverter extends LogEventPatternConverter {
      * @return The new instance
      * @see HexFormattingConverter
      */
-    public static HexFormattingConverter newInstance(Configuration config, String[] options) {
+    public static @Nullable HexFormattingConverter newInstance(Configuration config, String @NotNull [] options) {
         if (options.length < 1 || options.length > 2) {
             LOGGER.error("Incorrect number of options on paperMinecraftFormatting. Expected at least 1, max 2 received " + options.length);
             return null;
diff --git a/src/main/java/io/papermc/paper/datapack/PaperDatapack.java b/src/main/java/io/papermc/paper/datapack/PaperDatapack.java
index 9b7dd8a0fba4547f5268b3f99e21ddbe6b5bf566..2d4f25b652b617abad4e1fc13a067a685f01c209 100644
--- a/src/main/java/io/papermc/paper/datapack/PaperDatapack.java
+++ b/src/main/java/io/papermc/paper/datapack/PaperDatapack.java
@@ -3,15 +3,17 @@ package io.papermc.paper.datapack;
 import io.papermc.paper.event.server.ServerResourcesReloadedEvent;
 import net.minecraft.server.MinecraftServer;
 import net.minecraft.server.packs.repository.Pack;
+import org.jetbrains.annotations.NotNull;
+
 import java.util.List;
 import java.util.stream.Collectors;
 
 public class PaperDatapack implements Datapack {
-    private final String name;
-    private final Compatibility compatibility;
+    private final @NotNull String name;
+    private final @NotNull Compatibility compatibility;
     private final boolean enabled;
 
-    PaperDatapack(Pack loader, boolean enabled) {
+    PaperDatapack(@NotNull Pack loader, boolean enabled) {
         this.name = loader.getId();
         this.compatibility = Compatibility.valueOf(loader.getCompatibility().name());
         this.enabled = enabled;
diff --git a/src/main/java/io/papermc/paper/datapack/PaperDatapackManager.java b/src/main/java/io/papermc/paper/datapack/PaperDatapackManager.java
index cf4374493c11057451a62a655514415cf6b298e0..6c816407bb41370a942b5483e359b047ff9a08d8 100644
--- a/src/main/java/io/papermc/paper/datapack/PaperDatapackManager.java
+++ b/src/main/java/io/papermc/paper/datapack/PaperDatapackManager.java
@@ -4,6 +4,8 @@ import java.util.Collection;
 import java.util.stream.Collectors;
 import net.minecraft.server.packs.repository.Pack;
 import net.minecraft.server.packs.repository.PackRepository;
+import org.jetbrains.annotations.NotNull;
+
 
 public class PaperDatapackManager implements DatapackManager {
     private final PackRepository repository;
@@ -13,13 +15,13 @@ public class PaperDatapackManager implements DatapackManager {
     }
 
     @Override
-    public Collection<Datapack> getPacks() {
+    public @NotNull Collection<Datapack> getPacks() {
         Collection<Pack> enabledPacks = repository.getSelectedPacks();
         return repository.getAvailablePacks().stream().map(loader -> new PaperDatapack(loader, enabledPacks.contains(loader))).collect(Collectors.toList());
     }
 
     @Override
-    public Collection<Datapack> getEnabledPacks() {
+    public @NotNull Collection<Datapack> getEnabledPacks() {
         return repository.getSelectedPacks().stream().map(loader -> new PaperDatapack(loader, true)).collect(Collectors.toList());
     }
 }
diff --git a/src/main/java/io/papermc/paper/entity/PaperBucketable.java b/src/main/java/io/papermc/paper/entity/PaperBucketable.java
index c4eee682f5b8cd82f71f92f0549f39b76e735cd8..df5f9555a21af313abe1ec9ad4c12ef086c7b0c6 100644
--- a/src/main/java/io/papermc/paper/entity/PaperBucketable.java
+++ b/src/main/java/io/papermc/paper/entity/PaperBucketable.java
@@ -4,6 +4,8 @@ import org.bukkit.Sound;
 import org.bukkit.craftbukkit.CraftSound;
 import org.bukkit.craftbukkit.inventory.CraftItemStack;
 import org.bukkit.inventory.ItemStack;
+import org.jetbrains.annotations.NotNull;
+
 
 public interface PaperBucketable extends Bucketable {
 
@@ -20,12 +22,12 @@ public interface PaperBucketable extends Bucketable {
     }
 
     @Override
-    default ItemStack getBaseBucketItem() {
+    default @NotNull ItemStack getBaseBucketItem() {
         return CraftItemStack.asBukkitCopy(this.getHandle().getBucketItemStack());
     }
 
     @Override
-    default Sound getPickupSound() {
+    default @NotNull Sound getPickupSound() {
         return CraftSound.getBukkit(this.getHandle().getPickupSound());
     }
 }
diff --git a/src/main/java/io/papermc/paper/logging/ExtraClassInfoLogEvent.java b/src/main/java/io/papermc/paper/logging/ExtraClassInfoLogEvent.java
index 558427c65b4051923f73d15d85ee519be005060a..d55b3b80667021f6624f2ea7fe8abab96de28dc2 100644
--- a/src/main/java/io/papermc/paper/logging/ExtraClassInfoLogEvent.java
+++ b/src/main/java/io/papermc/paper/logging/ExtraClassInfoLogEvent.java
@@ -4,6 +4,8 @@ import org.apache.logging.log4j.core.LogEvent;
 import org.apache.logging.log4j.core.impl.ExtendedClassInfo;
 import org.apache.logging.log4j.core.impl.ExtendedStackTraceElement;
 import org.apache.logging.log4j.core.impl.ThrowableProxy;
+import org.jetbrains.annotations.NotNull;
+
 
 public class ExtraClassInfoLogEvent extends DelegateLogEvent {
 
@@ -23,7 +25,7 @@ public class ExtraClassInfoLogEvent extends DelegateLogEvent {
         return super.getThrownProxy();
     }
 
-    private void rewriteStackTrace(ThrowableProxy throwable) {
+    private void rewriteStackTrace(@NotNull ThrowableProxy throwable) {
         ExtendedStackTraceElement[] stackTrace = throwable.getExtendedStackTrace();
         for (int i = 0; i < stackTrace.length; i++) {
             ExtendedClassInfo classInfo = stackTrace[i].getExtraClassInfo();
diff --git a/src/main/java/io/papermc/paper/logging/ExtraClassInfoRewritePolicy.java b/src/main/java/io/papermc/paper/logging/ExtraClassInfoRewritePolicy.java
index 34734bb969a1a74c7a4f9c17d40ebf007ad5d701..cf4a6f2df545802f82f17be6d008f29d5c95f5cd 100644
--- a/src/main/java/io/papermc/paper/logging/ExtraClassInfoRewritePolicy.java
+++ b/src/main/java/io/papermc/paper/logging/ExtraClassInfoRewritePolicy.java
@@ -15,7 +15,7 @@ import org.jetbrains.annotations.NotNull;
 )
 public final class ExtraClassInfoRewritePolicy implements RewritePolicy {
     @Override
-    public LogEvent rewrite(LogEvent source) {
+    public @NotNull LogEvent rewrite(@NotNull LogEvent source) {
         if (source.getThrown() != null) {
             return new ExtraClassInfoLogEvent(source);
         }
diff --git a/src/main/java/io/papermc/paper/potion/PaperPotionMix.java b/src/main/java/io/papermc/paper/potion/PaperPotionMix.java
index 6b0bed550763f34e18c9e92f9a47ec0c945b2c8b..9fbdaab48377008553cec24ae5b665bdc9d175e0 100644
--- a/src/main/java/io/papermc/paper/potion/PaperPotionMix.java
+++ b/src/main/java/io/papermc/paper/potion/PaperPotionMix.java
@@ -4,10 +4,12 @@ import net.minecraft.world.item.ItemStack;
 import net.minecraft.world.item.crafting.Ingredient;
 import org.bukkit.craftbukkit.inventory.CraftItemStack;
 import org.bukkit.craftbukkit.inventory.CraftRecipe;
+import org.jetbrains.annotations.NotNull;
+
 
 public record PaperPotionMix(ItemStack result, Ingredient input, Ingredient ingredient) {
 
-    public PaperPotionMix(PotionMix potionMix) {
+    public PaperPotionMix(@NotNull PotionMix potionMix) {
         this(CraftItemStack.asNMSCopy(potionMix.getResult()), CraftRecipe.toIngredient(potionMix.getInput(), true), CraftRecipe.toIngredient(potionMix.getIngredient(), true));
     }
 }
diff --git a/src/main/java/io/papermc/paper/registry/PaperRegistry.java b/src/main/java/io/papermc/paper/registry/PaperRegistry.java
index 7c265d27da034986be73921d35bf08ae250b42f3..a24fdac0504509a31d126b46f42802ffb4b908fe 100644
--- a/src/main/java/io/papermc/paper/registry/PaperRegistry.java
+++ b/src/main/java/io/papermc/paper/registry/PaperRegistry.java
@@ -14,6 +14,7 @@ import org.bukkit.craftbukkit.util.CraftNamespacedKey;
 import org.checkerframework.checker.nullness.qual.NonNull;
 import org.checkerframework.checker.nullness.qual.Nullable;
 import org.checkerframework.framework.qual.DefaultQualifier;
+import org.jetbrains.annotations.NotNull;
 
 import java.util.Collections;
 import java.util.HashMap;
@@ -57,9 +58,9 @@ public abstract class PaperRegistry<API extends Keyed, MINECRAFT> implements org
         });
     }
 
-    public abstract @Nullable API convertToApi(NamespacedKey key, MINECRAFT nms);
+    public abstract @Nullable @org.jetbrains.annotations.Nullable API convertToApi(NamespacedKey key, MINECRAFT nms);
 
-    public API convertToApiOrThrow(ResourceLocation resourceLocation, MINECRAFT nms) {
+    public @NotNull API convertToApiOrThrow(ResourceLocation resourceLocation, MINECRAFT nms) {
         return Objects.requireNonNull(this.convertToApi(resourceLocation, nms), resourceLocation + " has a null api representation");
     }
 
@@ -67,7 +68,7 @@ public abstract class PaperRegistry<API extends Keyed, MINECRAFT> implements org
         return this.convertToApi(CraftNamespacedKey.fromMinecraft(resourceLocation), nms);
     }
 
-    public API convertToApiOrThrow(Holder<MINECRAFT> nmsHolder) {
+    public @NotNull API convertToApiOrThrow(Holder<MINECRAFT> nmsHolder) {
         return Objects.requireNonNull(this.convertToApi(nmsHolder), nmsHolder + " has a null api representation");
     }
 
@@ -97,16 +98,16 @@ public abstract class PaperRegistry<API extends Keyed, MINECRAFT> implements org
         }
     }
 
-    public MINECRAFT getMinecraftValue(API apiValue) {
+    public @NotNull MINECRAFT getMinecraftValue(@NotNull API apiValue) {
         return this.registry.get().getOptional(CraftNamespacedKey.toMinecraft(apiValue.getKey())).orElseThrow();
     }
 
-    public Holder<MINECRAFT> getMinecraftHolder(API apiValue) {
+    public Holder<MINECRAFT> getMinecraftHolder(@NotNull API apiValue) {
         return this.registry.get().getHolderOrThrow(this.resourceKeyCache.computeIfAbsent(apiValue.getKey(), key -> ResourceKey.create(this.registryKey.resourceKey(), CraftNamespacedKey.toMinecraft(key))));
     }
 
     @Override
-    public Iterator<API> iterator() {
+    public @NotNull Iterator<API> iterator() {
         return this.registry.get().keySet().stream().map(key -> this.get(CraftNamespacedKey.fromMinecraft(key))).iterator();
     }
 
diff --git a/src/main/java/io/papermc/paper/util/CachedLists.java b/src/main/java/io/papermc/paper/util/CachedLists.java
index e08f4e39db4ee3fed62e37364d17dcc5c5683504..facee428426fbb4b60e6e829823f4db628668a0b 100644
--- a/src/main/java/io/papermc/paper/util/CachedLists.java
+++ b/src/main/java/io/papermc/paper/util/CachedLists.java
@@ -4,6 +4,8 @@ import net.minecraft.world.entity.Entity;
 import net.minecraft.world.phys.AABB;
 import org.bukkit.Bukkit;
 import org.bukkit.craftbukkit.util.UnsafeList;
+import org.jetbrains.annotations.NotNull;
+
 import java.util.List;
 
 public final class CachedLists {
@@ -12,7 +14,7 @@ public final class CachedLists {
     static final UnsafeList<AABB> TEMP_COLLISION_LIST = new UnsafeList<>(1024);
     static boolean tempCollisionListInUse;
 
-    public static UnsafeList<AABB> getTempCollisionList() {
+    public static @NotNull UnsafeList<AABB> getTempCollisionList() {
         if (!Bukkit.isPrimaryThread() || tempCollisionListInUse) {
             return new UnsafeList<>(16);
         }
@@ -20,7 +22,7 @@ public final class CachedLists {
         return TEMP_COLLISION_LIST;
     }
 
-    public static void returnTempCollisionList(List<AABB> list) {
+    public static void returnTempCollisionList(@NotNull List<AABB> list) {
         if (list != TEMP_COLLISION_LIST) {
             return;
         }
@@ -31,7 +33,7 @@ public final class CachedLists {
     static final UnsafeList<Entity> TEMP_GET_ENTITIES_LIST = new UnsafeList<>(1024);
     static boolean tempGetEntitiesListInUse;
 
-    public static UnsafeList<Entity> getTempGetEntitiesList() {
+    public static @NotNull UnsafeList<Entity> getTempGetEntitiesList() {
         if (!Bukkit.isPrimaryThread() || tempGetEntitiesListInUse) {
             return new UnsafeList<>(16);
         }
@@ -39,7 +41,7 @@ public final class CachedLists {
         return TEMP_GET_ENTITIES_LIST;
     }
 
-    public static void returnTempGetEntitiesList(List<Entity> list) {
+    public static void returnTempGetEntitiesList(@NotNull List<Entity> list) {
         if (list != TEMP_GET_ENTITIES_LIST) {
             return;
         }
diff --git a/src/main/java/io/papermc/paper/util/CollisionUtil.java b/src/main/java/io/papermc/paper/util/CollisionUtil.java
index a87f6380b2c387fb0cdd40d5087b5c93492e3c88..88adbf5b38cbe62c7f61f74e54315af416b09b40 100644
--- a/src/main/java/io/papermc/paper/util/CollisionUtil.java
+++ b/src/main/java/io/papermc/paper/util/CollisionUtil.java
@@ -25,6 +25,9 @@ import net.minecraft.world.phys.shapes.CollisionContext;
 import net.minecraft.world.phys.shapes.EntityCollisionContext;
 import net.minecraft.world.phys.shapes.Shapes;
 import net.minecraft.world.phys.shapes.VoxelShape;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 import java.util.List;
 import java.util.function.BiPredicate;
 import java.util.function.Predicate;
@@ -38,11 +41,11 @@ public final class CollisionUtil {
     public static final long KNOWN_UNKNOWN_BLOCK = 0b10; // must read the actual block state for info
     public static final long KNOWN_SPECIAL_BLOCK = 0b11; // caller must check this block for special collisions
 
-    public static boolean isSpecialCollidingBlock(final net.minecraft.world.level.block.state.BlockBehaviour.BlockStateBase block) {
+    public static boolean isSpecialCollidingBlock(final net.minecraft.world.level.block.state.BlockBehaviour.@NotNull BlockStateBase block) {
         return block.shapeExceedsCube() || block.getBlock() == Blocks.MOVING_PISTON;
     }
 
-    public static boolean isEmpty(final AABB aabb) {
+    public static boolean isEmpty(final @NotNull AABB aabb) {
         return (aabb.maxX - aabb.minX) < COLLISION_EPSILON && (aabb.maxY - aabb.minY) < COLLISION_EPSILON && (aabb.maxZ - aabb.minZ) < COLLISION_EPSILON;
     }
 
@@ -51,7 +54,7 @@ public final class CollisionUtil {
         return (maxX - minX) < COLLISION_EPSILON && (maxY - minY) < COLLISION_EPSILON && (maxZ - minZ) < COLLISION_EPSILON;
     }
 
-    public static AABB getBoxForChunk(final int chunkX, final int chunkZ) {
+    public static @NotNull AABB getBoxForChunk(final int chunkX, final int chunkZ) {
         double x = (double)(chunkX << 4);
         double z = (double)(chunkZ << 4);
         // use a bounding box bigger than the chunk to prevent entities from entering it on move
@@ -76,20 +79,20 @@ public final class CollisionUtil {
                (minZ1 - maxZ2) < -COLLISION_EPSILON && (maxZ1 - minZ2) > COLLISION_EPSILON;
     }
 
-    public static boolean voxelShapeIntersect(final AABB box, final double minX, final double minY, final double minZ,
+    public static boolean voxelShapeIntersect(final @NotNull AABB box, final double minX, final double minY, final double minZ,
                                               final double maxX, final double maxY, final double maxZ) {
         return (box.minX - maxX) < -COLLISION_EPSILON && (box.maxX - minX) > COLLISION_EPSILON &&
                (box.minY - maxY) < -COLLISION_EPSILON && (box.maxY - minY) > COLLISION_EPSILON &&
                (box.minZ - maxZ) < -COLLISION_EPSILON && (box.maxZ - minZ) > COLLISION_EPSILON;
     }
 
-    public static boolean voxelShapeIntersect(final AABB box1, final AABB box2) {
+    public static boolean voxelShapeIntersect(final @NotNull AABB box1, final @NotNull AABB box2) {
         return (box1.minX - box2.maxX) < -COLLISION_EPSILON && (box1.maxX - box2.minX) > COLLISION_EPSILON &&
                (box1.minY - box2.maxY) < -COLLISION_EPSILON && (box1.maxY - box2.minY) > COLLISION_EPSILON &&
                (box1.minZ - box2.maxZ) < -COLLISION_EPSILON && (box1.maxZ - box2.minZ) > COLLISION_EPSILON;
     }
 
-    public static double collideX(final AABB target, final AABB source, final double source_move) {
+    public static double collideX(final @NotNull AABB target, final @NotNull AABB source, final double source_move) {
         if (source_move == 0.0) {
             return 0.0;
         }
@@ -113,7 +116,7 @@ public final class CollisionUtil {
         return source_move;
     }
 
-    public static double collideY(final AABB target, final AABB source, final double source_move) {
+    public static double collideY(final @NotNull AABB target, final @NotNull AABB source, final double source_move) {
         if (source_move == 0.0) {
             return 0.0;
         }
@@ -137,7 +140,7 @@ public final class CollisionUtil {
         return source_move;
     }
 
-    public static double collideZ(final AABB target, final AABB source, final double source_move) {
+    public static double collideZ(final @NotNull AABB target, final @NotNull AABB source, final double source_move) {
         if (source_move == 0.0) {
             return 0.0;
         }
@@ -161,67 +164,67 @@ public final class CollisionUtil {
         return source_move;
     }
 
-    public static AABB offsetX(final AABB box, final double dx) {
+    public static @NotNull AABB offsetX(final @NotNull AABB box, final double dx) {
         return new AABB(box.minX + dx, box.minY, box.minZ, box.maxX + dx, box.maxY, box.maxZ, false);
     }
 
-    public static AABB offsetY(final AABB box, final double dy) {
+    public static @NotNull AABB offsetY(final @NotNull AABB box, final double dy) {
         return new AABB(box.minX, box.minY + dy, box.minZ, box.maxX, box.maxY + dy, box.maxZ, false);
     }
 
-    public static AABB offsetZ(final AABB box, final double dz) {
+    public static @NotNull AABB offsetZ(final @NotNull AABB box, final double dz) {
         return new AABB(box.minX, box.minY, box.minZ + dz, box.maxX, box.maxY, box.maxZ + dz, false);
     }
 
-    public static AABB expandRight(final AABB box, final double dx) { // dx > 0.0
+    public static @NotNull AABB expandRight(final @NotNull AABB box, final double dx) { // dx > 0.0
         return new AABB(box.minX, box.minY, box.minZ, box.maxX + dx, box.maxY, box.maxZ, false);
     }
 
-    public static AABB expandLeft(final AABB box, final double dx) { // dx < 0.0
+    public static @NotNull AABB expandLeft(final @NotNull AABB box, final double dx) { // dx < 0.0
         return new AABB(box.minX - dx, box.minY, box.minZ, box.maxX, box.maxY, box.maxZ, false);
     }
 
-    public static AABB expandUpwards(final AABB box, final double dy) { // dy > 0.0
+    public static @NotNull AABB expandUpwards(final @NotNull AABB box, final double dy) { // dy > 0.0
         return new AABB(box.minX, box.minY, box.minZ, box.maxX, box.maxY + dy, box.maxZ, false);
     }
 
-    public static AABB expandDownwards(final AABB box, final double dy) { // dy < 0.0
+    public static @NotNull AABB expandDownwards(final @NotNull AABB box, final double dy) { // dy < 0.0
         return new AABB(box.minX, box.minY - dy, box.minZ, box.maxX, box.maxY, box.maxZ, false);
     }
 
-    public static AABB expandForwards(final AABB box, final double dz) { // dz > 0.0
+    public static @NotNull AABB expandForwards(final @NotNull AABB box, final double dz) { // dz > 0.0
         return new AABB(box.minX, box.minY, box.minZ, box.maxX, box.maxY, box.maxZ + dz, false);
     }
 
-    public static AABB expandBackwards(final AABB box, final double dz) { // dz < 0.0
+    public static @NotNull AABB expandBackwards(final @NotNull AABB box, final double dz) { // dz < 0.0
         return new AABB(box.minX, box.minY, box.minZ - dz, box.maxX, box.maxY, box.maxZ, false);
     }
 
-    public static AABB cutRight(final AABB box, final double dx) { // dx > 0.0
+    public static @NotNull AABB cutRight(final @NotNull AABB box, final double dx) { // dx > 0.0
         return new AABB(box.maxX, box.minY, box.minZ, box.maxX + dx, box.maxY, box.maxZ, false);
     }
 
-    public static AABB cutLeft(final AABB box, final double dx) { // dx < 0.0
+    public static @NotNull AABB cutLeft(final @NotNull AABB box, final double dx) { // dx < 0.0
         return new AABB(box.minX + dx, box.minY, box.minZ, box.minX, box.maxY, box.maxZ, false);
     }
 
-    public static AABB cutUpwards(final AABB box, final double dy) { // dy > 0.0
+    public static @NotNull AABB cutUpwards(final @NotNull AABB box, final double dy) { // dy > 0.0
         return new AABB(box.minX, box.maxY, box.minZ, box.maxX, box.maxY + dy, box.maxZ, false);
     }
 
-    public static AABB cutDownwards(final AABB box, final double dy) { // dy < 0.0
+    public static @NotNull AABB cutDownwards(final @NotNull AABB box, final double dy) { // dy < 0.0
         return new AABB(box.minX, box.minY + dy, box.minZ, box.maxX, box.minY, box.maxZ, false);
     }
 
-    public static AABB cutForwards(final AABB box, final double dz) { // dz > 0.0
+    public static @NotNull AABB cutForwards(final @NotNull AABB box, final double dz) { // dz > 0.0
         return new AABB(box.minX, box.minY, box.maxZ, box.maxX, box.maxY, box.maxZ + dz, false);
     }
 
-    public static AABB cutBackwards(final AABB box, final double dz) { // dz < 0.0
+    public static @NotNull AABB cutBackwards(final @NotNull AABB box, final double dz) { // dz < 0.0
         return new AABB(box.minX, box.minY, box.minZ + dz, box.maxX, box.maxY, box.minZ, false);
     }
 
-    public static double performCollisionsX(final AABB currentBoundingBox, double value, final List<AABB> potentialCollisions) {
+    public static double performCollisionsX(final @NotNull AABB currentBoundingBox, double value, final @NotNull List<AABB> potentialCollisions) {
         for (int i = 0, len = potentialCollisions.size(); i < len; ++i) {
             final AABB target = potentialCollisions.get(i);
             value = collideX(target, currentBoundingBox, value);
@@ -230,7 +233,7 @@ public final class CollisionUtil {
         return value;
     }
 
-    public static double performCollisionsY(final AABB currentBoundingBox, double value, final List<AABB> potentialCollisions) {
+    public static double performCollisionsY(final @NotNull AABB currentBoundingBox, double value, final @NotNull List<AABB> potentialCollisions) {
         for (int i = 0, len = potentialCollisions.size(); i < len; ++i) {
             final AABB target = potentialCollisions.get(i);
             value = collideY(target, currentBoundingBox, value);
@@ -239,7 +242,7 @@ public final class CollisionUtil {
         return value;
     }
 
-    public static double performCollisionsZ(final AABB currentBoundingBox, double value, final List<AABB> potentialCollisions) {
+    public static double performCollisionsZ(final @NotNull AABB currentBoundingBox, double value, final @NotNull List<AABB> potentialCollisions) {
         for (int i = 0, len = potentialCollisions.size(); i < len; ++i) {
             final AABB target = potentialCollisions.get(i);
             value = collideZ(target, currentBoundingBox, value);
@@ -248,7 +251,7 @@ public final class CollisionUtil {
         return value;
     }
 
-    public static Vec3 performCollisions(final Vec3 moveVector, AABB axisalignedbb, final List<AABB> potentialCollisions) {
+    public static @NotNull Vec3 performCollisions(final @NotNull Vec3 moveVector, @NotNull AABB axisalignedbb, final @NotNull List<AABB> potentialCollisions) {
         double x = moveVector.x;
         double y = moveVector.y;
         double z = moveVector.z;
@@ -283,7 +286,7 @@ public final class CollisionUtil {
         return new Vec3(x, y, z);
     }
 
-    public static boolean addBoxesToIfIntersects(final VoxelShape shape, final AABB aabb, final List<AABB> list) {
+    public static boolean addBoxesToIfIntersects(final VoxelShape shape, final @NotNull AABB aabb, final @NotNull List<AABB> list) {
         if (shape instanceof AABBVoxelShape) {
             final AABBVoxelShape shapeCasted = (AABBVoxelShape)shape;
             if (voxelShapeIntersect(shapeCasted.aabb, aabb) && !isEmpty(shapeCasted.aabb)) {
@@ -329,7 +332,7 @@ public final class CollisionUtil {
         }
     }
 
-    public static void addBoxesTo(final VoxelShape shape, final List<AABB> list) {
+    public static void addBoxesTo(final VoxelShape shape, final @NotNull List<AABB> list) {
         if (shape instanceof AABBVoxelShape) {
             final AABBVoxelShape shapeCasted = (AABBVoxelShape)shape;
             if (!isEmpty(shapeCasted.aabb)) {
@@ -359,11 +362,11 @@ public final class CollisionUtil {
         }
     }
 
-    public static boolean isAlmostCollidingOnBorder(final WorldBorder worldborder, final AABB boundingBox) {
+    public static boolean isAlmostCollidingOnBorder(final @NotNull WorldBorder worldborder, final @NotNull AABB boundingBox) {
         return isAlmostCollidingOnBorder(worldborder, boundingBox.minX, boundingBox.maxX, boundingBox.minZ, boundingBox.maxZ);
     }
 
-    public static boolean isAlmostCollidingOnBorder(final WorldBorder worldborder, final double boxMinX, final double boxMaxX,
+    public static boolean isAlmostCollidingOnBorder(final @NotNull WorldBorder worldborder, final double boxMinX, final double boxMaxX,
                                                     final double boxMinZ, final double boxMaxZ) {
         final double borderMinX = worldborder.getMinX(); // -X
         final double borderMaxX = worldborder.getMaxX(); // +X
@@ -388,11 +391,11 @@ public final class CollisionUtil {
             );
     }
 
-    public static boolean isCollidingWithBorderEdge(final WorldBorder worldborder, final AABB boundingBox) {
+    public static boolean isCollidingWithBorderEdge(final @NotNull WorldBorder worldborder, final @NotNull AABB boundingBox) {
         return isCollidingWithBorderEdge(worldborder, boundingBox.minX, boundingBox.maxX, boundingBox.minZ, boundingBox.maxZ);
     }
 
-    public static boolean isCollidingWithBorderEdge(final WorldBorder worldborder, final double boxMinX, final double boxMaxX,
+    public static boolean isCollidingWithBorderEdge(final @NotNull WorldBorder worldborder, final double boxMinX, final double boxMaxX,
                                                     final double boxMinZ, final double boxMaxZ) {
         final double borderMinX = worldborder.getMinX() + COLLISION_EPSILON; // -X
         final double borderMaxX = worldborder.getMaxX() - COLLISION_EPSILON; // +X
@@ -403,9 +406,9 @@ public final class CollisionUtil {
         return boxMinX < borderMinX || boxMaxX > borderMaxX || boxMinZ < borderMinZ || boxMaxZ > borderMaxZ;
     }
 
-    public static boolean getCollisionsForBlocksOrWorldBorder(final CollisionGetter getter, final Entity entity, final AABB aabb,
-                                                                  final List<AABB> into, final boolean loadChunks, final boolean collidesWithUnloaded,
-                                                                  final boolean checkBorder, final boolean checkOnly, final BiPredicate<BlockState, BlockPos> predicate) {
+    public static boolean getCollisionsForBlocksOrWorldBorder(final @NotNull CollisionGetter getter, final Entity entity, final @NotNull AABB aabb,
+                                                              final @NotNull List<AABB> into, final boolean loadChunks, final boolean collidesWithUnloaded,
+                                                              final boolean checkBorder, final boolean checkOnly, final @Nullable BiPredicate<BlockState, BlockPos> predicate) {
         boolean ret = false;
 
         if (checkBorder) {
@@ -648,9 +651,9 @@ public final class CollisionUtil {
         return ret;
     }
 
-    public static boolean getCollisionsForBlocksOrWorldBorderReference(final CollisionGetter getter, final Entity entity, final AABB aabb,
-                                                                       final List<AABB> into, final boolean loadChunks, final boolean collidesWithUnloaded,
-                                                                       final boolean checkBorder, final boolean checkOnly, final BiPredicate<BlockState, BlockPos> predicate) {
+    public static boolean getCollisionsForBlocksOrWorldBorderReference(final @NotNull CollisionGetter getter, final Entity entity, final @NotNull AABB aabb,
+                                                                       final @NotNull List<AABB> into, final boolean loadChunks, final boolean collidesWithUnloaded,
+                                                                       final boolean checkBorder, final boolean checkOnly, final @Nullable BiPredicate<BlockState, BlockPos> predicate) {
         boolean ret = false;
 
         if (checkBorder) {
@@ -807,8 +810,8 @@ public final class CollisionUtil {
         return ret;
     }
 
-    public static boolean getEntityHardCollisions(final CollisionGetter getter, final Entity entity, AABB aabb,
-                                                  final List<AABB> into, final boolean checkOnly, final Predicate<Entity> predicate) {
+    public static boolean getEntityHardCollisions(final CollisionGetter getter, final @Nullable Entity entity, @NotNull AABB aabb,
+                                                  final @NotNull List<AABB> into, final boolean checkOnly, final @NotNull Predicate<Entity> predicate) {
         if (isEmpty(aabb) || !(getter instanceof EntityGetter entityGetter)) {
             return false;
         }
@@ -846,10 +849,10 @@ public final class CollisionUtil {
         return ret;
     }
 
-    public static boolean getCollisions(final CollisionGetter view, final Entity entity, final AABB aabb,
-                                        final List<AABB> into, final boolean loadChunks, final boolean collidesWithUnloadedChunks,
+    public static boolean getCollisions(final @NotNull CollisionGetter view, final Entity entity, final @NotNull AABB aabb,
+                                        final @NotNull List<AABB> into, final boolean loadChunks, final boolean collidesWithUnloadedChunks,
                                         final boolean checkBorder, final boolean checkOnly, final BiPredicate<BlockState, BlockPos> blockPredicate,
-                                        final Predicate<Entity> entityPredicate) {
+                                        final @NotNull Predicate<Entity> entityPredicate) {
         if (checkOnly) {
             return getCollisionsForBlocksOrWorldBorder(view, entity, aabb, into, loadChunks, collidesWithUnloadedChunks, checkBorder, checkOnly, blockPredicate)
                 || getEntityHardCollisions(view, entity, aabb, into, checkOnly, entityPredicate);
@@ -867,7 +870,7 @@ public final class CollisionUtil {
             super(false, 0.0, null, null, entity);
         }
 
-        public CollisionContext getDelegate() {
+        public @NotNull CollisionContext getDelegate() {
             final Entity entity = this.getEntity();
             return this.delegate == null ? this.delegate = (entity == null ? CollisionContext.empty() : CollisionContext.of(entity)) : this.delegate;
         }
diff --git a/src/main/java/io/papermc/paper/util/CoordinateUtils.java b/src/main/java/io/papermc/paper/util/CoordinateUtils.java
index 413e4b6da027876dbbe8eb78f2568a440f431547..1f524e363a91054fd85af34c1d70d821a7e8cab8 100644
--- a/src/main/java/io/papermc/paper/util/CoordinateUtils.java
+++ b/src/main/java/io/papermc/paper/util/CoordinateUtils.java
@@ -5,6 +5,8 @@ import net.minecraft.core.SectionPos;
 import net.minecraft.util.Mth;
 import net.minecraft.world.entity.Entity;
 import net.minecraft.world.level.ChunkPos;
+import org.jetbrains.annotations.NotNull;
+
 
 public final class CoordinateUtils {
 
@@ -16,19 +18,19 @@ public final class CoordinateUtils {
 
     // the chunk keys are compatible with vanilla
 
-    public static long getChunkKey(final BlockPos pos) {
+    public static long getChunkKey(final @NotNull BlockPos pos) {
         return ((long)(pos.getZ() >> 4) << 32) | ((pos.getX() >> 4) & 0xFFFFFFFFL);
     }
 
-    public static long getChunkKey(final Entity entity) {
+    public static long getChunkKey(final @NotNull Entity entity) {
         return ((Mth.lfloor(entity.getZ()) >> 4) << 32) | ((Mth.lfloor(entity.getX()) >> 4) & 0xFFFFFFFFL);
     }
 
-    public static long getChunkKey(final ChunkPos pos) {
+    public static long getChunkKey(final @NotNull ChunkPos pos) {
         return ((long)pos.z << 32) | (pos.x & 0xFFFFFFFFL);
     }
 
-    public static long getChunkKey(final SectionPos pos) {
+    public static long getChunkKey(final @NotNull SectionPos pos) {
         return ((long)pos.getZ() << 32) | (pos.getX() & 0xFFFFFFFFL);
     }
 
@@ -68,25 +70,25 @@ public final class CoordinateUtils {
                 | ((z & SECTION_Z_MASK) << SECTION_Z_SHIFT);
     }
 
-    public static long getChunkSectionKey(final SectionPos pos) {
+    public static long getChunkSectionKey(final @NotNull SectionPos pos) {
         return ((pos.getX() & SECTION_X_MASK) << SECTION_X_SHIFT)
                 | ((pos.getY() & SECTION_Y_MASK) << SECTION_Y_SHIFT)
                 | ((pos.getZ() & SECTION_Z_MASK) << SECTION_Z_SHIFT);
     }
 
-    public static long getChunkSectionKey(final ChunkPos pos, final int y) {
+    public static long getChunkSectionKey(final @NotNull ChunkPos pos, final int y) {
         return ((pos.x & SECTION_X_MASK) << SECTION_X_SHIFT)
                 | ((y & SECTION_Y_MASK) << SECTION_Y_SHIFT)
                 | ((pos.z & SECTION_Z_MASK) << SECTION_Z_SHIFT);
     }
 
-    public static long getChunkSectionKey(final BlockPos pos) {
+    public static long getChunkSectionKey(final @NotNull BlockPos pos) {
         return (((long)pos.getX() << (SECTION_X_SHIFT - SECTION_TO_BLOCK_SHIFT)) & (SECTION_X_MASK << SECTION_X_SHIFT)) |
                 ((pos.getY() >> SECTION_TO_BLOCK_SHIFT) & (SECTION_Y_MASK << SECTION_Y_SHIFT)) |
                 (((long)pos.getZ() << (SECTION_Z_SHIFT - SECTION_TO_BLOCK_SHIFT)) & (SECTION_Z_MASK << SECTION_Z_SHIFT));
     }
 
-    public static long getChunkSectionKey(final Entity entity) {
+    public static long getChunkSectionKey(final @NotNull Entity entity) {
         return ((Mth.lfloor(entity.getX()) << (SECTION_X_SHIFT - SECTION_TO_BLOCK_SHIFT)) & (SECTION_X_MASK << SECTION_X_SHIFT)) |
                 ((Mth.lfloor(entity.getY()) >> SECTION_TO_BLOCK_SHIFT) & (SECTION_Y_MASK << SECTION_Y_SHIFT)) |
                 ((Mth.lfloor(entity.getZ()) << (SECTION_Z_SHIFT - SECTION_TO_BLOCK_SHIFT)) & (SECTION_Z_MASK << SECTION_Z_SHIFT));
@@ -114,11 +116,11 @@ public final class CoordinateUtils {
         return ((long)x & 0x7FFFFFF) | (((long)z & 0x7FFFFFF) << 27) | ((long)y << 54);
     }
 
-    public static long getBlockKey(final BlockPos pos) {
+    public static long getBlockKey(final @NotNull BlockPos pos) {
         return ((long)pos.getX() & 0x7FFFFFF) | (((long)pos.getZ() & 0x7FFFFFF) << 27) | ((long)pos.getY() << 54);
     }
 
-    public static long getBlockKey(final Entity entity) {
+    public static long getBlockKey(final @NotNull Entity entity) {
         return ((long)entity.getX() & 0x7FFFFFF) | (((long)entity.getZ() & 0x7FFFFFF) << 27) | ((long)entity.getY() << 54);
     }
 
diff --git a/src/main/java/io/papermc/paper/util/PoiAccess.java b/src/main/java/io/papermc/paper/util/PoiAccess.java
index 05640f5f70e81833530e8098d30c400fed7ba6e1..07f40187f326a0d8d053be3070d1b39856546cbe 100644
--- a/src/main/java/io/papermc/paper/util/PoiAccess.java
+++ b/src/main/java/io/papermc/paper/util/PoiAccess.java
@@ -13,6 +13,9 @@ import net.minecraft.world.entity.ai.village.poi.PoiManager;
 import net.minecraft.world.entity.ai.village.poi.PoiRecord;
 import net.minecraft.world.entity.ai.village.poi.PoiSection;
 import net.minecraft.world.entity.ai.village.poi.PoiType;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 import java.util.ArrayList;
 import java.util.HashSet;
 import java.util.Iterator;
@@ -78,15 +81,15 @@ public final class PoiAccess {
 
     // only includes x/z axis
     // finds the closest poi data by distance.
-    public static BlockPos findClosestPoiDataPosition(final PoiManager poiStorage,
-                                                      final Predicate<Holder<PoiType>> villagePlaceType,
-                                                      // position predicate must not modify chunk POI
-                                                      final Predicate<BlockPos> positionPredicate,
-                                                      final BlockPos sourcePosition,
-                                                      final int range, // distance on x y z axis
-                                                      final double maxDistanceSquared,
-                                                      final PoiManager.Occupancy occupancy,
-                                                      final boolean load) {
+    public static @Nullable BlockPos findClosestPoiDataPosition(final @NotNull PoiManager poiStorage,
+                                                                final @NotNull Predicate<Holder<PoiType>> villagePlaceType,
+                                                                // position predicate must not modify chunk POI
+                                                                final Predicate<BlockPos> positionPredicate,
+                                                                final @NotNull BlockPos sourcePosition,
+                                                                final int range, // distance on x y z axis
+                                                                final double maxDistanceSquared,
+                                                                final PoiManager.@NotNull Occupancy occupancy,
+                                                                final boolean load) {
         final PoiRecord ret = findClosestPoiDataRecord(
                 poiStorage, villagePlaceType, positionPredicate, sourcePosition, range, maxDistanceSquared, occupancy, load
         );
@@ -96,15 +99,15 @@ public final class PoiAccess {
 
     // only includes x/z axis
     // finds the closest poi data by distance.
-    public static Pair<Holder<PoiType>, BlockPos> findClosestPoiDataTypeAndPosition(final PoiManager poiStorage,
-                                                                             final Predicate<Holder<PoiType>> villagePlaceType,
-                                                                             // position predicate must not modify chunk POI
-                                                                             final Predicate<BlockPos> positionPredicate,
-                                                                             final BlockPos sourcePosition,
-                                                                             final int range, // distance on x y z axis
-                                                                             final double maxDistanceSquared,
-                                                                             final PoiManager.Occupancy occupancy,
-                                                                             final boolean load) {
+    public static @Nullable Pair<Holder<PoiType>, BlockPos> findClosestPoiDataTypeAndPosition(final @NotNull PoiManager poiStorage,
+                                                                                              final @NotNull Predicate<Holder<PoiType>> villagePlaceType,
+                                                                                              // position predicate must not modify chunk POI
+                                                                                              final Predicate<BlockPos> positionPredicate,
+                                                                                              final @NotNull BlockPos sourcePosition,
+                                                                                              final int range, // distance on x y z axis
+                                                                                              final double maxDistanceSquared,
+                                                                                              final PoiManager.@NotNull Occupancy occupancy,
+                                                                                              final boolean load) {
         final PoiRecord ret = findClosestPoiDataRecord(
             poiStorage, villagePlaceType, positionPredicate, sourcePosition, range, maxDistanceSquared, occupancy, load
         );
@@ -114,19 +117,19 @@ public final class PoiAccess {
 
     // only includes x/z axis
     // finds the closest poi data by distance. if multiple match the same distance, then they all are returned.
-    public static void findClosestPoiDataPositions(final PoiManager poiStorage,
-                                                   final Predicate<Holder<PoiType>> villagePlaceType,
+    public static void findClosestPoiDataPositions(final @NotNull PoiManager poiStorage,
+                                                   final @NotNull Predicate<Holder<PoiType>> villagePlaceType,
                                                    // position predicate must not modify chunk POI
-                                                   final Predicate<BlockPos> positionPredicate,
-                                                   final BlockPos sourcePosition,
+                                                   final @Nullable Predicate<BlockPos> positionPredicate,
+                                                   final @NotNull BlockPos sourcePosition,
                                                    final int range, // distance on x y z axis
                                                    final double maxDistanceSquared,
-                                                   final PoiManager.Occupancy occupancy,
+                                                   final PoiManager.@NotNull Occupancy occupancy,
                                                    final boolean load,
-                                                   final Set<BlockPos> ret) {
+                                                   final @NotNull Set<BlockPos> ret) {
         final Set<BlockPos> positions = new HashSet<>();
         // pos predicate is last thing that runs before adding to ret.
-        final Predicate<BlockPos> newPredicate = (final BlockPos pos) -> {
+        final Predicate<BlockPos> newPredicate = (final @NotNull BlockPos pos) -> {
             if (positionPredicate != null && !positionPredicate.test(pos)) {
                 return false;
             }
@@ -145,15 +148,15 @@ public final class PoiAccess {
 
     // only includes x/z axis
     // finds the closest poi data by distance.
-    public static PoiRecord findClosestPoiDataRecord(final PoiManager poiStorage,
-                                                     final Predicate<Holder<PoiType>> villagePlaceType,
-                                                     // position predicate must not modify chunk POI
-                                                     final Predicate<BlockPos> positionPredicate,
-                                                     final BlockPos sourcePosition,
-                                                     final int range, // distance on x y z axis
-                                                     final double maxDistanceSquared,
-                                                     final PoiManager.Occupancy occupancy,
-                                                     final boolean load) {
+    public static @Nullable PoiRecord findClosestPoiDataRecord(final @NotNull PoiManager poiStorage,
+                                                               final @NotNull Predicate<Holder<PoiType>> villagePlaceType,
+                                                               // position predicate must not modify chunk POI
+                                                               final Predicate<BlockPos> positionPredicate,
+                                                               final @NotNull BlockPos sourcePosition,
+                                                               final int range, // distance on x y z axis
+                                                               final double maxDistanceSquared,
+                                                               final PoiManager.@NotNull Occupancy occupancy,
+                                                               final boolean load) {
         final List<PoiRecord> ret = new ArrayList<>();
         findClosestPoiDataRecords(
             poiStorage, villagePlaceType, positionPredicate, sourcePosition, range, maxDistanceSquared, occupancy, load, ret
@@ -163,15 +166,15 @@ public final class PoiAccess {
 
     // only includes x/z axis
     // finds the closest poi data by distance.
-    public static PoiRecord findClosestPoiDataRecord(final PoiManager poiStorage,
-                                                     final Predicate<Holder<PoiType>> villagePlaceType,
-                                                     // position predicate must not modify chunk POI
-                                                     final BiPredicate<Holder<PoiType>, BlockPos> predicate,
-                                                     final BlockPos sourcePosition,
-                                                     final int range, // distance on x y z axis
-                                                     final double maxDistanceSquared,
-                                                     final PoiManager.Occupancy occupancy,
-                                                     final boolean load) {
+    public static @Nullable PoiRecord findClosestPoiDataRecord(final @NotNull PoiManager poiStorage,
+                                                               final @NotNull Predicate<Holder<PoiType>> villagePlaceType,
+                                                               // position predicate must not modify chunk POI
+                                                               final BiPredicate<Holder<PoiType>, BlockPos> predicate,
+                                                               final @NotNull BlockPos sourcePosition,
+                                                               final int range, // distance on x y z axis
+                                                               final double maxDistanceSquared,
+                                                               final PoiManager.@NotNull Occupancy occupancy,
+                                                               final boolean load) {
         final List<PoiRecord> ret = new ArrayList<>();
         findClosestPoiDataRecords(
                 poiStorage, villagePlaceType, predicate, sourcePosition, range, maxDistanceSquared, occupancy, load, ret
@@ -181,30 +184,30 @@ public final class PoiAccess {
 
     // only includes x/z axis
     // finds the closest poi data by distance. if multiple match the same distance, then they all are returned.
-    public static void findClosestPoiDataRecords(final PoiManager poiStorage,
-                                                 final Predicate<Holder<PoiType>> villagePlaceType,
+    public static void findClosestPoiDataRecords(final @NotNull PoiManager poiStorage,
+                                                 final @NotNull Predicate<Holder<PoiType>> villagePlaceType,
                                                  // position predicate must not modify chunk POI
-                                                 final Predicate<BlockPos> positionPredicate,
-                                                 final BlockPos sourcePosition,
+                                                 final @Nullable Predicate<BlockPos> positionPredicate,
+                                                 final @NotNull BlockPos sourcePosition,
                                                  final int range, // distance on x y z axis
                                                  final double maxDistanceSquared,
-                                                 final PoiManager.Occupancy occupancy,
+                                                 final PoiManager.@NotNull Occupancy occupancy,
                                                  final boolean load,
-                                                 final List<PoiRecord> ret) {
+                                                 final @NotNull List<PoiRecord> ret) {
         final BiPredicate<Holder<PoiType>, BlockPos> predicate = positionPredicate != null ? (type, pos) -> positionPredicate.test(pos) : null;
         findClosestPoiDataRecords(poiStorage, villagePlaceType, predicate, sourcePosition, range, maxDistanceSquared, occupancy, load, ret);
     }
 
-    public static void findClosestPoiDataRecords(final PoiManager poiStorage,
-                                                 final Predicate<Holder<PoiType>> villagePlaceType,
+    public static void findClosestPoiDataRecords(final @NotNull PoiManager poiStorage,
+                                                 final @NotNull Predicate<Holder<PoiType>> villagePlaceType,
                                                  // position predicate must not modify chunk POI
-                                                 final BiPredicate<Holder<PoiType>, BlockPos> predicate,
-                                                 final BlockPos sourcePosition,
+                                                 final @Nullable BiPredicate<Holder<PoiType>, BlockPos> predicate,
+                                                 final @NotNull BlockPos sourcePosition,
                                                  final int range, // distance on x y z axis
                                                  final double maxDistanceSquared,
-                                                 final PoiManager.Occupancy occupancy,
+                                                 final PoiManager.@NotNull Occupancy occupancy,
                                                  final boolean load,
-                                                 final List<PoiRecord> ret) {
+                                                 final @NotNull List<PoiRecord> ret) {
         final Predicate<? super PoiRecord> occupancyFilter = occupancy.getTest();
 
         final List<PoiRecord> closestRecords = new ArrayList<>();
@@ -369,15 +372,15 @@ public final class PoiAccess {
     }
 
     // finds the closest poi entry pos.
-    public static BlockPos findNearestPoiPosition(final PoiManager poiStorage,
-                                                  final Predicate<Holder<PoiType>> villagePlaceType,
-                                                  // position predicate must not modify chunk POI
-                                                  final Predicate<BlockPos> positionPredicate,
-                                                  final BlockPos sourcePosition,
-                                                  final int range, // distance on x y z axis
-                                                  final double maxDistanceSquared,
-                                                  final PoiManager.Occupancy occupancy,
-                                                  final boolean load) {
+    public static @Nullable BlockPos findNearestPoiPosition(final @NotNull PoiManager poiStorage,
+                                                            final @NotNull Predicate<Holder<PoiType>> villagePlaceType,
+                                                            // position predicate must not modify chunk POI
+                                                            final Predicate<BlockPos> positionPredicate,
+                                                            final @NotNull BlockPos sourcePosition,
+                                                            final int range, // distance on x y z axis
+                                                            final double maxDistanceSquared,
+                                                            final PoiManager.@NotNull Occupancy occupancy,
+                                                            final boolean load) {
         final PoiRecord ret = findNearestPoiRecord(
                 poiStorage, villagePlaceType, positionPredicate, sourcePosition, range, maxDistanceSquared, occupancy, load
         );
@@ -385,20 +388,20 @@ public final class PoiAccess {
     }
 
     // finds the closest `max` poi entry positions.
-    public static void findNearestPoiPositions(final PoiManager poiStorage,
-                                               final Predicate<Holder<PoiType>> villagePlaceType,
+    public static void findNearestPoiPositions(final @NotNull PoiManager poiStorage,
+                                               final @NotNull Predicate<Holder<PoiType>> villagePlaceType,
                                                // position predicate must not modify chunk POI
-                                               final Predicate<BlockPos> positionPredicate,
-                                               final BlockPos sourcePosition,
+                                               final @Nullable Predicate<BlockPos> positionPredicate,
+                                               final @NotNull BlockPos sourcePosition,
                                                final int range, // distance on x y z axis
                                                final double maxDistanceSquared,
-                                               final PoiManager.Occupancy occupancy,
+                                               final PoiManager.@NotNull Occupancy occupancy,
                                                final boolean load,
                                                final int max,
-                                               final List<Pair<Holder<PoiType>, BlockPos>> ret) {
+                                               final @NotNull List<Pair<Holder<PoiType>, BlockPos>> ret) {
         final Set<BlockPos> positions = new HashSet<>();
         // pos predicate is last thing that runs before adding to ret.
-        final Predicate<BlockPos> newPredicate = (final BlockPos pos) -> {
+        final Predicate<BlockPos> newPredicate = (final @NotNull BlockPos pos) -> {
             if (positionPredicate != null && !positionPredicate.test(pos)) {
                 return false;
             }
@@ -416,15 +419,15 @@ public final class PoiAccess {
     }
 
     // finds the closest poi entry.
-    public static PoiRecord findNearestPoiRecord(final PoiManager poiStorage,
-                                                 final Predicate<Holder<PoiType>> villagePlaceType,
-                                                 // position predicate must not modify chunk POI
-                                                 final Predicate<BlockPos> positionPredicate,
-                                                 final BlockPos sourcePosition,
-                                                 final int range, // distance on x y z axis
-                                                 final double maxDistanceSquared,
-                                                 final PoiManager.Occupancy occupancy,
-                                                 final boolean load) {
+    public static @Nullable PoiRecord findNearestPoiRecord(final @NotNull PoiManager poiStorage,
+                                                           final @NotNull Predicate<Holder<PoiType>> villagePlaceType,
+                                                           // position predicate must not modify chunk POI
+                                                           final Predicate<BlockPos> positionPredicate,
+                                                           final @NotNull BlockPos sourcePosition,
+                                                           final int range, // distance on x y z axis
+                                                           final double maxDistanceSquared,
+                                                           final PoiManager.@NotNull Occupancy occupancy,
+                                                           final boolean load) {
         final List<PoiRecord> ret = new ArrayList<>();
         findNearestPoiRecords(
                 poiStorage, villagePlaceType, positionPredicate, sourcePosition, range, maxDistanceSquared, occupancy, load,
@@ -434,17 +437,17 @@ public final class PoiAccess {
     }
 
     // finds the closest `max` poi entries.
-    public static void findNearestPoiRecords(final PoiManager poiStorage,
-                                             final Predicate<Holder<PoiType>> villagePlaceType,
+    public static void findNearestPoiRecords(final @NotNull PoiManager poiStorage,
+                                             final @NotNull Predicate<Holder<PoiType>> villagePlaceType,
                                              // position predicate must not modify chunk POI
-                                             final Predicate<BlockPos> positionPredicate,
-                                             final BlockPos sourcePosition,
+                                             final @Nullable Predicate<BlockPos> positionPredicate,
+                                             final @NotNull BlockPos sourcePosition,
                                              final int range, // distance on x y z axis
                                              final double maxDistanceSquared,
-                                             final PoiManager.Occupancy occupancy,
+                                             final PoiManager.@NotNull Occupancy occupancy,
                                              final boolean load,
                                              final int max,
-                                             final List<PoiRecord> ret) {
+                                             final @NotNull List<PoiRecord> ret) {
         final Predicate<? super PoiRecord> occupancyFilter = occupancy.getTest();
 
         final Double2ObjectRBTreeMap<List<PoiRecord>> closestRecords = new Double2ObjectRBTreeMap<>();
@@ -654,13 +657,13 @@ public final class PoiAccess {
         ret.addAll(closestRecordsUnsorted);
     }
 
-    public static BlockPos findAnyPoiPosition(final PoiManager poiStorage,
-                                              final Predicate<Holder<PoiType>> villagePlaceType,
-                                              final Predicate<BlockPos> positionPredicate,
-                                              final BlockPos sourcePosition,
-                                              final int range, // distance on x y z axis
-                                              final PoiManager.Occupancy occupancy,
-                                              final boolean load) {
+    public static @Nullable BlockPos findAnyPoiPosition(final @NotNull PoiManager poiStorage,
+                                                        final @NotNull Predicate<Holder<PoiType>> villagePlaceType,
+                                                        final Predicate<BlockPos> positionPredicate,
+                                                        final @NotNull BlockPos sourcePosition,
+                                                        final int range, // distance on x y z axis
+                                                        final PoiManager.@NotNull Occupancy occupancy,
+                                                        final boolean load) {
         final PoiRecord ret = findAnyPoiRecord(
                 poiStorage, villagePlaceType, positionPredicate, sourcePosition, range, occupancy, load
         );
@@ -668,18 +671,18 @@ public final class PoiAccess {
         return ret == null ? null : ret.getPos();
     }
 
-    public static void findAnyPoiPositions(final PoiManager poiStorage,
-                                           final Predicate<Holder<PoiType>> villagePlaceType,
-                                           final Predicate<BlockPos> positionPredicate,
-                                           final BlockPos sourcePosition,
+    public static void findAnyPoiPositions(final @NotNull PoiManager poiStorage,
+                                           final @NotNull Predicate<Holder<PoiType>> villagePlaceType,
+                                           final @Nullable Predicate<BlockPos> positionPredicate,
+                                           final @NotNull BlockPos sourcePosition,
                                            final int range, // distance on x y z axis
-                                           final PoiManager.Occupancy occupancy,
+                                           final PoiManager.@NotNull Occupancy occupancy,
                                            final boolean load,
                                            final int max,
-                                           final List<Pair<Holder<PoiType>, BlockPos>> ret) {
+                                           final @NotNull List<Pair<Holder<PoiType>, BlockPos>> ret) {
         final Set<BlockPos> positions = new HashSet<>();
         // pos predicate is last thing that runs before adding to ret.
-        final Predicate<BlockPos> newPredicate = (final BlockPos pos) -> {
+        final Predicate<BlockPos> newPredicate = (final @NotNull BlockPos pos) -> {
             if (positionPredicate != null && !positionPredicate.test(pos)) {
                 return false;
             }
@@ -696,27 +699,27 @@ public final class PoiAccess {
         }
     }
 
-    public static PoiRecord findAnyPoiRecord(final PoiManager poiStorage,
-                                             final Predicate<Holder<PoiType>> villagePlaceType,
-                                             final Predicate<BlockPos> positionPredicate,
-                                             final BlockPos sourcePosition,
-                                             final int range, // distance on x y z axis
-                                             final PoiManager.Occupancy occupancy,
-                                             final boolean load) {
+    public static @Nullable PoiRecord findAnyPoiRecord(final @NotNull PoiManager poiStorage,
+                                                       final @NotNull Predicate<Holder<PoiType>> villagePlaceType,
+                                                       final Predicate<BlockPos> positionPredicate,
+                                                       final @NotNull BlockPos sourcePosition,
+                                                       final int range, // distance on x y z axis
+                                                       final PoiManager.@NotNull Occupancy occupancy,
+                                                       final boolean load) {
         final List<PoiRecord> ret = new ArrayList<>();
         findAnyPoiRecords(poiStorage, villagePlaceType, positionPredicate, sourcePosition, range, occupancy, load, 1, ret);
         return ret.isEmpty() ? null : ret.get(0);
     }
 
-    public static void findAnyPoiRecords(final PoiManager poiStorage,
-                                         final Predicate<Holder<PoiType>> villagePlaceType,
-                                         final Predicate<BlockPos> positionPredicate,
-                                         final BlockPos sourcePosition,
+    public static void findAnyPoiRecords(final @NotNull PoiManager poiStorage,
+                                         final @NotNull Predicate<Holder<PoiType>> villagePlaceType,
+                                         final @Nullable Predicate<BlockPos> positionPredicate,
+                                         final @NotNull BlockPos sourcePosition,
                                          final int range, // distance on x y z axis
-                                         final PoiManager.Occupancy occupancy,
+                                         final PoiManager.@NotNull Occupancy occupancy,
                                          final boolean load,
                                          final int max,
-                                         final List<PoiRecord> ret) {
+                                         final @NotNull List<PoiRecord> ret) {
         // the biggest issue with the original mojang implementation is that they chain so many streams together
         // the amount of streams chained just rolls performance, even if nothing is iterated over
         final Predicate<? super PoiRecord> occupancyFilter = occupancy.getTest();
diff --git a/src/main/java/io/papermc/paper/util/TickThread.java b/src/main/java/io/papermc/paper/util/TickThread.java
index fc57850b80303fcade89ca95794f63910404a407..d8b7c903237f8c557135d516fd28d4b21630805e 100644
--- a/src/main/java/io/papermc/paper/util/TickThread.java
+++ b/src/main/java/io/papermc/paper/util/TickThread.java
@@ -4,6 +4,8 @@ import net.minecraft.server.MinecraftServer;
 import net.minecraft.server.level.ServerLevel;
 import net.minecraft.world.entity.Entity;
 import org.bukkit.Bukkit;
+import org.jetbrains.annotations.NotNull;
+
 import java.util.concurrent.atomic.AtomicInteger;
 
 public class TickThread extends Thread {
@@ -56,20 +58,20 @@ public class TickThread extends Thread {
 
     private static final AtomicInteger ID_GENERATOR = new AtomicInteger();
 
-    public TickThread(final String name) {
+    public TickThread(final @NotNull String name) {
         this(null, name);
     }
 
-    public TickThread(final Runnable run, final String name) {
+    public TickThread(final Runnable run, final @NotNull String name) {
         this(run, name, ID_GENERATOR.incrementAndGet());
     }
 
-    private TickThread(final Runnable run, final String name, final int id) {
+    private TickThread(final Runnable run, final @NotNull String name, final int id) {
         super(run, name);
         this.id = id;
     }
 
-    public static TickThread getCurrentTickThread() {
+    public static @NotNull TickThread getCurrentTickThread() {
         return (TickThread)Thread.currentThread();
     }
 
diff --git a/src/main/java/io/papermc/paper/util/TraceUtil.java b/src/main/java/io/papermc/paper/util/TraceUtil.java
index 0b210bdf7c1f5962afbd44195af6f84f625635e3..238a74afe828a00340e0e817ae7b174cdb4779b6 100644
--- a/src/main/java/io/papermc/paper/util/TraceUtil.java
+++ b/src/main/java/io/papermc/paper/util/TraceUtil.java
@@ -1,10 +1,12 @@
 package io.papermc.paper.util;
 
 import org.bukkit.Bukkit;
+import org.jetbrains.annotations.NotNull;
+
 
 public final class TraceUtil {
 
-    public static void dumpTraceForThread(Thread thread, String reason) {
+    public static void dumpTraceForThread(@NotNull Thread thread, String reason) {
         Bukkit.getLogger().warning(thread.getName() + ": " + reason);
         StackTraceElement[] trace = StacktraceDeobfuscator.INSTANCE.deobfuscateStacktrace(thread.getStackTrace());
         for (StackTraceElement traceElement : trace) {
@@ -18,7 +20,7 @@ public final class TraceUtil {
         throwable.printStackTrace();
     }
 
-    public static void printStackTrace(Throwable thr) {
+    public static void printStackTrace(@NotNull Throwable thr) {
         StacktraceDeobfuscator.INSTANCE.deobfuscateThrowable(thr);
         thr.printStackTrace();
     }
diff --git a/src/main/java/io/papermc/paper/util/WorldUtil.java b/src/main/java/io/papermc/paper/util/WorldUtil.java
index 67bb91fcfb532a919954cd9d7733d09a6c3fec35..8d45e1d631348dc7bc40d57e3b37fe90ecb93a64 100644
--- a/src/main/java/io/papermc/paper/util/WorldUtil.java
+++ b/src/main/java/io/papermc/paper/util/WorldUtil.java
@@ -1,42 +1,44 @@
 package io.papermc.paper.util;
 
 import net.minecraft.world.level.LevelHeightAccessor;
+import org.jetbrains.annotations.NotNull;
+
 
 public final class WorldUtil {
 
     // min, max are inclusive
 
-    public static int getMaxSection(final LevelHeightAccessor world) {
+    public static int getMaxSection(final @NotNull LevelHeightAccessor world) {
         return world.getMaxSection() - 1; // getMaxSection() is exclusive
     }
 
-    public static int getMinSection(final LevelHeightAccessor world) {
+    public static int getMinSection(final @NotNull LevelHeightAccessor world) {
         return world.getMinSection();
     }
 
-    public static int getMaxLightSection(final LevelHeightAccessor world) {
+    public static int getMaxLightSection(final @NotNull LevelHeightAccessor world) {
         return getMaxSection(world) + 1;
     }
 
-    public static int getMinLightSection(final LevelHeightAccessor world) {
+    public static int getMinLightSection(final @NotNull LevelHeightAccessor world) {
         return getMinSection(world) - 1;
     }
 
 
 
-    public static int getTotalSections(final LevelHeightAccessor world) {
+    public static int getTotalSections(final @NotNull LevelHeightAccessor world) {
         return getMaxSection(world) - getMinSection(world) + 1;
     }
 
-    public static int getTotalLightSections(final LevelHeightAccessor world) {
+    public static int getTotalLightSections(final @NotNull LevelHeightAccessor world) {
         return getMaxLightSection(world) - getMinLightSection(world) + 1;
     }
 
-    public static int getMinBlockY(final LevelHeightAccessor world) {
+    public static int getMinBlockY(final @NotNull LevelHeightAccessor world) {
         return getMinSection(world) << 4;
     }
 
-    public static int getMaxBlockY(final LevelHeightAccessor world) {
+    public static int getMaxBlockY(final @NotNull LevelHeightAccessor world) {
         return (getMaxSection(world) << 4) | 15;
     }
 
diff --git a/src/main/java/io/papermc/paper/util/maplist/IteratorSafeOrderedReferenceSet.java b/src/main/java/io/papermc/paper/util/maplist/IteratorSafeOrderedReferenceSet.java
index 0fd814f1d65c111266a2b20f86561839a4cef755..bedffdcc5751e2242aebae016bcc223f43f93296 100644
--- a/src/main/java/io/papermc/paper/util/maplist/IteratorSafeOrderedReferenceSet.java
+++ b/src/main/java/io/papermc/paper/util/maplist/IteratorSafeOrderedReferenceSet.java
@@ -3,6 +3,9 @@ package io.papermc.paper.util.maplist;
 import it.unimi.dsi.fastutil.objects.Reference2IntLinkedOpenHashMap;
 import it.unimi.dsi.fastutil.objects.Reference2IntMap;
 import org.bukkit.Bukkit;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 import java.util.Arrays;
 import java.util.NoSuchElementException;
 
@@ -10,7 +13,7 @@ public final class IteratorSafeOrderedReferenceSet<E> {
 
     public static final int ITERATOR_FLAG_SEE_ADDITIONS = 1 << 0;
 
-    protected final Reference2IntLinkedOpenHashMap<E> indexMap;
+    protected final @NotNull Reference2IntLinkedOpenHashMap<E> indexMap;
     protected int firstInvalidIndex = -1;
 
     /* list impl */
@@ -232,21 +235,21 @@ public final class IteratorSafeOrderedReferenceSet<E> {
         return this.indexMap.size();
     }
 
-    public IteratorSafeOrderedReferenceSet.Iterator<E> iterator() {
+    public IteratorSafeOrderedReferenceSet.@NotNull Iterator<E> iterator() {
         return this.iterator(0);
     }
 
-    public IteratorSafeOrderedReferenceSet.Iterator<E> iterator(final int flags) {
+    public IteratorSafeOrderedReferenceSet.@NotNull Iterator<E> iterator(final int flags) {
         if (this.allowSafeIteration()) {
             ++this.iteratorCount;
         }
         return new BaseIterator<>(this, true, (flags & ITERATOR_FLAG_SEE_ADDITIONS) != 0 ? Integer.MAX_VALUE : this.listSize);
     }
 
-    public java.util.Iterator<E> unsafeIterator() {
+    public java.util.@NotNull Iterator<E> unsafeIterator() {
         return this.unsafeIterator(0);
     }
-    public java.util.Iterator<E> unsafeIterator(final int flags) {
+    public java.util.@NotNull Iterator<E> unsafeIterator(final int flags) {
         return new BaseIterator<>(this, false, (flags & ITERATOR_FLAG_SEE_ADDITIONS) != 0 ? Integer.MAX_VALUE : this.listSize);
     }
 
@@ -262,9 +265,9 @@ public final class IteratorSafeOrderedReferenceSet<E> {
         protected final boolean canFinish;
         protected final int maxIndex;
         protected int nextIndex;
-        protected E pendingValue;
+        protected @Nullable E pendingValue;
         protected boolean finished;
-        protected E lastReturned;
+        protected @Nullable E lastReturned;
 
         protected BaseIterator(final IteratorSafeOrderedReferenceSet<E> set, final boolean canFinish, final int maxIndex) {
             this.set = set;
diff --git a/src/main/java/io/papermc/paper/util/table/ZeroCollidingReferenceStateTable.java b/src/main/java/io/papermc/paper/util/table/ZeroCollidingReferenceStateTable.java
index 57d0cd3ad6f972e986c72a57f1a6e36003f190c2..dbf51c3180c926561265afc89ce03f5f75d6c348 100644
--- a/src/main/java/io/papermc/paper/util/table/ZeroCollidingReferenceStateTable.java
+++ b/src/main/java/io/papermc/paper/util/table/ZeroCollidingReferenceStateTable.java
@@ -3,6 +3,9 @@ package io.papermc.paper.util.table;
 import com.google.common.collect.Table;
 import net.minecraft.world.level.block.state.StateHolder;
 import net.minecraft.world.level.block.state.properties.Property;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 import java.util.Collection;
 import java.util.HashSet;
 import java.util.Map;
@@ -12,14 +15,14 @@ public final class ZeroCollidingReferenceStateTable {
 
     // upper 32 bits: starting index
     // lower 32 bits: bitset for contained ids
-    protected final long[] this_index_table;
-    protected final Comparable<?>[] this_table;
+    protected final long @NotNull [] this_index_table;
+    protected final Comparable<?> @NotNull [] this_table;
     protected final StateHolder<?, ?> this_state;
 
     protected long[] index_table;
     protected StateHolder<?, ?>[][] value_table;
 
-    public ZeroCollidingReferenceStateTable(final StateHolder<?, ?> state, final Map<Property<?>, Comparable<?>> this_map) {
+    public ZeroCollidingReferenceStateTable(final StateHolder<?, ?> state, final @NotNull Map<Property<?>, Comparable<?>> this_map) {
         this.this_state = state;
         this.this_index_table = this.create_table(this_map.keySet());
 
@@ -37,8 +40,8 @@ public final class ZeroCollidingReferenceStateTable {
         }
     }
 
-    public void loadInTable(final Table<Property<?>, Comparable<?>, StateHolder<?, ?>> table,
-                            final Map<Property<?>, Comparable<?>> this_map) {
+    public void loadInTable(final @NotNull Table<Property<?>, Comparable<?>, StateHolder<?, ?>> table,
+                            final @NotNull Map<Property<?>, Comparable<?>> this_map) {
         final Set<Property<?>> combined = new HashSet<>(table.rowKeySet());
         combined.addAll(this_map.keySet());
 
@@ -85,7 +88,7 @@ public final class ZeroCollidingReferenceStateTable {
     }
 
 
-    protected long[] create_table(final Collection<Property<?>> collection) {
+    protected long[] create_table(final @NotNull Collection<Property<?>> collection) {
         int max_id = -1;
         for (final Property<?> property : collection) {
             final int id = property.getId();
@@ -110,7 +113,7 @@ public final class ZeroCollidingReferenceStateTable {
         return ret;
     }
 
-    public Comparable<?> get(final Property<?> state) {
+    public @Nullable Comparable<?> get(final @NotNull Property<?> state) {
         final Comparable<?>[] table = this.this_table;
         final int index = lookup_vindex(state, this.this_index_table);
 
@@ -120,7 +123,7 @@ public final class ZeroCollidingReferenceStateTable {
         return table[index];
     }
 
-    public StateHolder<?, ?> get(final Property<?> property, final Comparable<?> with) {
+    public @Nullable StateHolder<?, ?> get(final @NotNull Property<?> property, final @NotNull Comparable<?> with) {
         final int withId = ((Property)property).getIdFor(with);
         if (withId < 0) {
             return null;
@@ -141,7 +144,7 @@ public final class ZeroCollidingReferenceStateTable {
         return values[withId];
     }
 
-    protected static int lookup_vindex(final Property<?> property, final long[] index_table) {
+    protected static int lookup_vindex(final @NotNull Property<?> property, final long @NotNull [] index_table) {
         final int id = property.getId();
         final long bitset_mask = (1L << (id & 31));
         final long lower_mask = bitset_mask - 1;
diff --git a/src/main/java/io/papermc/paper/voxel/AABBVoxelShape.java b/src/main/java/io/papermc/paper/voxel/AABBVoxelShape.java
index d67a40e7be030142443680c89e1763fc9ecdfe0a..2831cc7e31b052ca88f2b76f6941d78b309722a9 100644
--- a/src/main/java/io/papermc/paper/voxel/AABBVoxelShape.java
+++ b/src/main/java/io/papermc/paper/voxel/AABBVoxelShape.java
@@ -7,6 +7,8 @@ import net.minecraft.core.Direction;
 import net.minecraft.world.phys.AABB;
 import net.minecraft.world.phys.shapes.Shapes;
 import net.minecraft.world.phys.shapes.VoxelShape;
+import org.jetbrains.annotations.NotNull;
+
 import java.util.ArrayList;
 import java.util.List;
 
@@ -25,7 +27,7 @@ public final class AABBVoxelShape extends VoxelShape {
     }
 
     @Override
-    public double min(Direction.Axis enumdirection_enumaxis) {
+    public double min(Direction.@NotNull Axis enumdirection_enumaxis) {
         switch (enumdirection_enumaxis.ordinal()) {
             case 0:
                 return this.aabb.minX;
@@ -39,7 +41,7 @@ public final class AABBVoxelShape extends VoxelShape {
     }
 
     @Override
-    public double max(Direction.Axis enumdirection_enumaxis) {
+    public double max(Direction.@NotNull Axis enumdirection_enumaxis) {
         switch (enumdirection_enumaxis.ordinal()) {
             case 0:
                 return this.aabb.maxX;
@@ -59,7 +61,7 @@ public final class AABBVoxelShape extends VoxelShape {
 
     // enum direction axis is from 0 -> 2, so we keep the lower bits for direction axis.
     @Override
-    protected double get(Direction.Axis enumdirection_enumaxis, int i) {
+    protected double get(Direction.@NotNull Axis enumdirection_enumaxis, int i) {
         switch (enumdirection_enumaxis.ordinal() | (i << 2)) {
             case (0 | (0 << 2)):
                 return this.aabb.minX;
@@ -83,7 +85,7 @@ public final class AABBVoxelShape extends VoxelShape {
     private DoubleList cachedListZ;
 
     @Override
-    protected DoubleList getCoords(Direction.Axis enumdirection_enumaxis) {
+    protected @NotNull DoubleList getCoords(Direction.@NotNull Axis enumdirection_enumaxis) {
         switch (enumdirection_enumaxis.ordinal()) {
             case 0:
                 return this.cachedListX == null ? this.cachedListX = DoubleArrayList.wrap(new double[] { this.aabb.minX, this.aabb.maxX }) : this.cachedListX;
@@ -97,12 +99,12 @@ public final class AABBVoxelShape extends VoxelShape {
     }
 
     @Override
-    public VoxelShape move(double d0, double d1, double d2) {
+    public @NotNull VoxelShape move(double d0, double d1, double d2) {
         return new AABBVoxelShape(this.aabb.move(d0, d1, d2));
     }
 
     @Override
-    public VoxelShape optimize() {
+    public @NotNull VoxelShape optimize() {
         if (this.isEmpty()) {
             return Shapes.empty();
         } else if (this == Shapes.BLOCK_OPTIMISED || this.aabb.equals(Shapes.BLOCK_OPTIMISED.aabb)) {
@@ -112,19 +114,19 @@ public final class AABBVoxelShape extends VoxelShape {
     }
 
     @Override
-    public void forAllBoxes(Shapes.DoubleLineConsumer voxelshapes_a) {
+    public void forAllBoxes(Shapes.@NotNull DoubleLineConsumer voxelshapes_a) {
         voxelshapes_a.consume(this.aabb.minX, this.aabb.minY, this.aabb.minZ, this.aabb.maxX, this.aabb.maxY, this.aabb.maxZ);
     }
 
     @Override
-    public List<AABB> toAabbs() { // getAABBs
+    public @NotNull List<AABB> toAabbs() { // getAABBs
         List<AABB> ret = new ArrayList<>(1);
         ret.add(this.aabb);
         return ret;
     }
 
     @Override
-    protected int findIndex(Direction.Axis enumdirection_enumaxis, double d0) { // findPointIndexAfterOffset
+    protected int findIndex(Direction.@NotNull Axis enumdirection_enumaxis, double d0) { // findPointIndexAfterOffset
         switch (enumdirection_enumaxis.ordinal()) {
             case 0:
                 return d0 < this.aabb.maxX ? (d0 < this.aabb.minX ? -1 : 0) : 1;
diff --git a/src/main/java/io/papermc/paper/world/ChunkEntitySlices.java b/src/main/java/io/papermc/paper/world/ChunkEntitySlices.java
index f597d65d56964297eeeed6c7e77703764178fee0..054be338052ba05a18bc5ebaa4c4dad592a7ba26 100644
--- a/src/main/java/io/papermc/paper/world/ChunkEntitySlices.java
+++ b/src/main/java/io/papermc/paper/world/ChunkEntitySlices.java
@@ -18,6 +18,9 @@ import net.minecraft.world.level.chunk.storage.EntityStorage;
 import net.minecraft.world.level.entity.Visibility;
 import net.minecraft.world.phys.AABB;
 import org.bukkit.craftbukkit.event.CraftEventFactory;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Iterator;
@@ -32,9 +35,9 @@ public final class ChunkEntitySlices {
     public final int chunkZ;
     protected final ServerLevel world;
 
-    protected final EntityCollectionBySection allEntities;
-    protected final EntityCollectionBySection hardCollidingEntities;
-    protected final Reference2ObjectOpenHashMap<Class<? extends Entity>, EntityCollectionBySection> entitiesByClass;
+    protected final @NotNull EntityCollectionBySection allEntities;
+    protected final @NotNull EntityCollectionBySection hardCollidingEntities;
+    protected final @NotNull Reference2ObjectOpenHashMap<Class<? extends Entity>, EntityCollectionBySection> entitiesByClass;
     protected final EntityList entities = new EntityList();
 
     public ChunkHolder.FullChunkStatus status;
@@ -67,7 +70,7 @@ public final class ChunkEntitySlices {
     }
 
     // Paper start - optimise CraftChunk#getEntities
-    public org.bukkit.entity.Entity[] getChunkEntities() {
+    public org.bukkit.entity.Entity @NotNull [] getChunkEntities() {
         List<org.bukkit.entity.Entity> ret = new java.util.ArrayList<>();
         final Entity[] entities = this.entities.getRawData();
         for (int i = 0, size = Math.min(entities.length, this.entities.size()); i < size; ++i) {
@@ -84,7 +87,7 @@ public final class ChunkEntitySlices {
         return ret.toArray(new org.bukkit.entity.Entity[0]);
     }
 
-    public CompoundTag save() {
+    public @Nullable CompoundTag save() {
         final int len = this.entities.size();
         if (len == 0) {
             return null;
@@ -132,7 +135,7 @@ public final class ChunkEntitySlices {
         return this.entities.size() != 0;
     }
 
-    private List<Entity> getAllEntities() {
+    private @NotNull List<Entity> getAllEntities() {
         final int len = this.entities.size();
         if (len == 0) {
             return new ArrayList<>();
@@ -160,7 +163,7 @@ public final class ChunkEntitySlices {
         return this.entities.size() == 0;
     }
 
-    public void mergeInto(final ChunkEntitySlices slices) {
+    public void mergeInto(final @NotNull ChunkEntitySlices slices) {
         final Entity[] entities = this.entities.getRawData();
         for (int i = 0, size = Math.min(entities.length, this.entities.size()); i < size; ++i) {
             final Entity entity = entities[i];
@@ -179,7 +182,7 @@ public final class ChunkEntitySlices {
         this.preventStatusUpdates = prev;
     }
 
-    public void updateStatus(final ChunkHolder.FullChunkStatus status, final EntityLookup lookup) {
+    public void updateStatus(final ChunkHolder.@NotNull FullChunkStatus status, final @NotNull EntityLookup lookup) {
         this.status = status;
 
         final Entity[] entities = this.entities.getRawData();
@@ -195,7 +198,7 @@ public final class ChunkEntitySlices {
         }
     }
 
-    public boolean addEntity(final Entity entity, final int chunkSection) {
+    public boolean addEntity(final @NotNull Entity entity, final int chunkSection) {
         if (!this.entities.add(entity)) {
             return false;
         }
@@ -220,7 +223,7 @@ public final class ChunkEntitySlices {
         return true;
     }
 
-    public boolean removeEntity(final Entity entity, final int chunkSection) {
+    public boolean removeEntity(final @NotNull Entity entity, final int chunkSection) {
         if (!this.entities.remove(entity)) {
             return false;
         }
@@ -245,24 +248,24 @@ public final class ChunkEntitySlices {
         return true;
     }
 
-    public void getHardCollidingEntities(final Entity except, final AABB box, final List<Entity> into, final Predicate<? super Entity> predicate) {
+    public void getHardCollidingEntities(final Entity except, final @NotNull AABB box, final @NotNull List<Entity> into, final Predicate<? super Entity> predicate) {
         this.hardCollidingEntities.getEntities(except, box, into, predicate);
     }
 
-    public void getEntities(final Entity except, final AABB box, final List<Entity> into, final Predicate<? super Entity> predicate) {
+    public void getEntities(final Entity except, final @NotNull AABB box, final @NotNull List<Entity> into, final Predicate<? super Entity> predicate) {
         this.allEntities.getEntitiesWithEnderDragonParts(except, box, into, predicate);
     }
 
-    public void getEntitiesWithoutDragonParts(final Entity except, final AABB box, final List<Entity> into, final Predicate<? super Entity> predicate) {
+    public void getEntitiesWithoutDragonParts(final Entity except, final @NotNull AABB box, final @NotNull List<Entity> into, final Predicate<? super Entity> predicate) {
         this.allEntities.getEntities(except, box, into, predicate);
     }
 
-    public <T extends Entity> void getEntities(final EntityType<?> type, final AABB box, final List<? super T> into,
+    public <T extends Entity> void getEntities(final EntityType<?> type, final @NotNull AABB box, final List<? super T> into,
                                                final Predicate<? super T> predicate) {
         this.allEntities.getEntities(type, box, (List)into, (Predicate)predicate);
     }
 
-    protected EntityCollectionBySection initClass(final Class<? extends Entity> clazz) {
+    protected @NotNull EntityCollectionBySection initClass(final @NotNull Class<? extends Entity> clazz) {
         final EntityCollectionBySection ret = new EntityCollectionBySection(this);
 
         for (int sectionIndex = 0; sectionIndex < this.allEntities.entitiesBySection.length; ++sectionIndex) {
@@ -285,7 +288,7 @@ public final class ChunkEntitySlices {
         return ret;
     }
 
-    public <T extends Entity> void getEntities(final Class<? extends T> clazz, final Entity except, final AABB box, final List<? super T> into,
+    public <T extends Entity> void getEntities(final @NotNull Class<? extends T> clazz, final Entity except, final @NotNull AABB box, final List<? super T> into,
                                                final Predicate<? super T> predicate) {
         EntityCollectionBySection collection = this.entitiesByClass.get(clazz);
         if (collection != null) {
@@ -375,11 +378,11 @@ public final class ChunkEntitySlices {
     protected static final class EntityCollectionBySection {
 
         protected final ChunkEntitySlices manager;
-        protected final long[] nonEmptyBitset;
-        protected final BasicEntityList<Entity>[] entitiesBySection;
+        protected final long @NotNull [] nonEmptyBitset;
+        protected final BasicEntityList<Entity> @NotNull [] entitiesBySection;
         protected int count;
 
-        public EntityCollectionBySection(final ChunkEntitySlices manager) {
+        public EntityCollectionBySection(final @NotNull ChunkEntitySlices manager) {
             this.manager = manager;
 
             final int sectionCount = manager.maxSection - manager.minSection + 1;
@@ -419,7 +422,7 @@ public final class ChunkEntitySlices {
             }
         }
 
-        public void getEntities(final Entity except, final AABB box, final List<Entity> into, final Predicate<? super Entity> predicate) {
+        public void getEntities(final Entity except, final @NotNull AABB box, final @NotNull List<Entity> into, final @Nullable Predicate<? super Entity> predicate) {
             if (this.count == 0) {
                 return;
             }
@@ -457,8 +460,8 @@ public final class ChunkEntitySlices {
             }
         }
 
-        public void getEntitiesWithEnderDragonParts(final Entity except, final AABB box, final List<Entity> into,
-                                                    final Predicate<? super Entity> predicate) {
+        public void getEntitiesWithEnderDragonParts(final Entity except, final @NotNull AABB box, final @NotNull List<Entity> into,
+                                                    final @Nullable Predicate<? super Entity> predicate) {
             if (this.count == 0) {
                 return;
             }
@@ -508,8 +511,8 @@ public final class ChunkEntitySlices {
             }
         }
 
-        public void getEntitiesWithEnderDragonParts(final Entity except, final Class<?> clazz, final AABB box, final List<Entity> into,
-                                                    final Predicate<? super Entity> predicate) {
+        public void getEntitiesWithEnderDragonParts(final Entity except, final @NotNull Class<?> clazz, final @NotNull AABB box, final @NotNull List<Entity> into,
+                                                    final @Nullable Predicate<? super Entity> predicate) {
             if (this.count == 0) {
                 return;
             }
@@ -559,8 +562,8 @@ public final class ChunkEntitySlices {
             }
         }
 
-        public <T extends Entity> void getEntities(final EntityType<?> type, final AABB box, final List<? super T> into,
-                                                   final Predicate<? super T> predicate) {
+        public <T extends Entity> void getEntities(final @Nullable EntityType<?> type, final @NotNull AABB box, final @NotNull List<? super T> into,
+                                                   final @Nullable Predicate<? super T> predicate) {
             if (this.count == 0) {
                 return;
             }
diff --git a/src/main/java/io/papermc/paper/world/ThreadedWorldUpgrader.java b/src/main/java/io/papermc/paper/world/ThreadedWorldUpgrader.java
index 95cac7edae8ac64811fc6a2f6b97dd4a0fceb0b0..0c4ad48f62514d1c7c5af51c5268468acb0d39f2 100644
--- a/src/main/java/io/papermc/paper/world/ThreadedWorldUpgrader.java
+++ b/src/main/java/io/papermc/paper/world/ThreadedWorldUpgrader.java
@@ -18,6 +18,8 @@ import net.minecraft.world.level.storage.DimensionDataStorage;
 import net.minecraft.world.level.storage.LevelStorageSource;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
+import org.jetbrains.annotations.NotNull;
+
 import java.io.File;
 import java.io.IOException;
 import java.text.DecimalFormat;
@@ -36,7 +38,7 @@ public class ThreadedWorldUpgrader {
     private final ResourceKey<LevelStem> dimensionType;
     private final String worldName;
     private final File worldDir;
-    private final ExecutorService threadPool;
+    private final @NotNull ExecutorService threadPool;
     private final DataFixer dataFixer;
     private final Optional<ResourceKey<Codec<? extends ChunkGenerator>>> generatorKey;
     private final boolean removeCaches;
@@ -50,7 +52,7 @@ public class ThreadedWorldUpgrader {
             private final AtomicInteger threadCounter = new AtomicInteger();
 
             @Override
-            public Thread newThread(final Runnable run) {
+            public @NotNull Thread newThread(final Runnable run) {
                 final Thread ret = new Thread(run);
 
                 ret.setName("World upgrader thread for world " + ThreadedWorldUpgrader.this.worldName + " #" + this.threadCounter.getAndIncrement());
@@ -74,7 +76,7 @@ public class ThreadedWorldUpgrader {
 
         LOGGER.info("Force upgrading " + this.worldName);
         LOGGER.info("Counting regionfiles for " + this.worldName);
-        final File[] regionFiles = regionFolder.listFiles((final File dir, final String name) -> {
+        final File[] regionFiles = regionFolder.listFiles((final @NotNull File dir, final @NotNull String name) -> {
             return WorldUpgrader.REGEX.matcher(name).matches();
         });
         if (regionFiles == null) {
diff --git a/src/main/java/net/kyori/adventure/bossbar/HackyBossBarPlatformBridge.java b/src/main/java/net/kyori/adventure/bossbar/HackyBossBarPlatformBridge.java
index 2dc92d8d2764d3e9b621d5c7d5e30c30367b3117..d868c7743cc89ba3202956e05aa9dde83bef130d 100644
--- a/src/main/java/net/kyori/adventure/bossbar/HackyBossBarPlatformBridge.java
+++ b/src/main/java/net/kyori/adventure/bossbar/HackyBossBarPlatformBridge.java
@@ -4,12 +4,15 @@ import io.papermc.paper.adventure.PaperAdventure;
 import io.papermc.paper.adventure.VanillaBossBarListener;
 import net.minecraft.server.level.ServerBossEvent;
 import org.bukkit.craftbukkit.entity.CraftPlayer;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 public abstract class HackyBossBarPlatformBridge {
-    public ServerBossEvent vanilla$bar;
+    public @Nullable ServerBossEvent vanilla$bar;
     private VanillaBossBarListener vanilla$listener;
 
-    public final void paper$playerShow(final CraftPlayer player) {
+    public final void paper$playerShow(final @NotNull CraftPlayer player) {
         if (this.vanilla$bar == null) {
             final BossBar $this = (BossBar) this;
             this.vanilla$bar = new ServerBossEvent(
@@ -24,7 +27,7 @@ public abstract class HackyBossBarPlatformBridge {
         this.vanilla$bar.addPlayer(player.getHandle());
     }
 
-    public final void paper$playerHide(final CraftPlayer player) {
+    public final void paper$playerHide(final @NotNull CraftPlayer player) {
         if (this.vanilla$bar != null) {
             this.vanilla$bar.removePlayer(player.getHandle());
             if (this.vanilla$bar.getPlayers().isEmpty()) {
diff --git a/src/main/java/net/minecraft/core/Direction.java b/src/main/java/net/minecraft/core/Direction.java
index c1172ba542bc07e0c780a50d5b4ce26ac04c1720..844bfdf376e6df833c16f0a96175a9a09fd2adc1 100644
--- a/src/main/java/net/minecraft/core/Direction.java
+++ b/src/main/java/net/minecraft/core/Direction.java
@@ -23,6 +23,8 @@ import org.joml.Matrix4f;
 import org.joml.Quaternionf;
 import org.joml.Vector3f;
 import org.joml.Vector4f;
+import org.jetbrains.annotations.NotNull;
+
 
 public enum Direction implements StringRepresentable {
     DOWN(0, 1, -1, "down", Direction.AxisDirection.NEGATIVE, Direction.Axis.Y, new Vec3i(0, -1, 0)),
@@ -655,7 +657,7 @@ public enum Direction implements StringRepresentable {
         }
 
         @Override
-        public Iterator<Direction> iterator() {
+        public @NotNull Iterator<Direction> iterator() {
             return Iterators.forArray(this.faces);
         }
 
diff --git a/src/main/java/net/minecraft/core/MappedRegistry.java b/src/main/java/net/minecraft/core/MappedRegistry.java
index 1e33434f9f361542e03da3e4812bc6d76768a202..04576acf8a4e3678d5ed514f53f1bd6d203065aa 100644
--- a/src/main/java/net/minecraft/core/MappedRegistry.java
+++ b/src/main/java/net/minecraft/core/MappedRegistry.java
@@ -30,6 +30,7 @@ import net.minecraft.server.Bootstrap;
 import net.minecraft.tags.TagKey;
 import net.minecraft.util.RandomSource;
 import org.apache.commons.lang3.Validate;
+import org.jetbrains.annotations.NotNull;
 import org.slf4j.Logger;
 
 public class MappedRegistry<T> implements WritableRegistry<T> {
@@ -248,7 +249,7 @@ public class MappedRegistry<T> implements WritableRegistry<T> {
     }
 
     @Override
-    public Iterator<T> iterator() {
+    public @NotNull Iterator<T> iterator() {
         return Iterators.transform(this.holdersInOrder().iterator(), Holder::value);
     }
 
diff --git a/src/main/java/net/minecraft/nbt/ByteArrayTag.java b/src/main/java/net/minecraft/nbt/ByteArrayTag.java
index 163b1895bcbd16e93d36cd60d03e6b21df51cba7..c2f4cec5e28567a30f35858beccb35c466a13e1a 100644
--- a/src/main/java/net/minecraft/nbt/ByteArrayTag.java
+++ b/src/main/java/net/minecraft/nbt/ByteArrayTag.java
@@ -7,6 +7,8 @@ import java.io.IOException;
 import java.util.Arrays;
 import java.util.List;
 import org.apache.commons.lang3.ArrayUtils;
+import org.jetbrains.annotations.NotNull;
+
 
 public class ByteArrayTag extends CollectionTag<ByteTag> {
 
@@ -126,7 +128,7 @@ public class ByteArrayTag extends CollectionTag<ByteTag> {
         return this.data.length;
     }
 
-    public ByteTag get(int i) {
+    public @NotNull ByteTag get(int i) {
         return ByteTag.valueOf(this.data[i]);
     }
 
@@ -162,7 +164,7 @@ public class ByteArrayTag extends CollectionTag<ByteTag> {
     }
 
     @Override
-    public ByteTag remove(int i) {
+    public @NotNull ByteTag remove(int i) {
         byte b0 = this.data[i];
 
         this.data = ArrayUtils.remove(this.data, i);
diff --git a/src/main/java/net/minecraft/nbt/IntArrayTag.java b/src/main/java/net/minecraft/nbt/IntArrayTag.java
index 25ad2c6ff968f4a6b16b4dea3f67341a4261f2a4..22c34197d268778de56cf48e1ae554dfd77926fe 100644
--- a/src/main/java/net/minecraft/nbt/IntArrayTag.java
+++ b/src/main/java/net/minecraft/nbt/IntArrayTag.java
@@ -7,6 +7,8 @@ import java.io.IOException;
 import java.util.Arrays;
 import java.util.List;
 import org.apache.commons.lang3.ArrayUtils;
+import org.jetbrains.annotations.NotNull;
+
 
 public class IntArrayTag extends CollectionTag<IntTag> {
 
@@ -140,7 +142,7 @@ public class IntArrayTag extends CollectionTag<IntTag> {
         return this.data.length;
     }
 
-    public IntTag get(int i) {
+    public @NotNull IntTag get(int i) {
         return IntTag.valueOf(this.data[i]);
     }
 
@@ -176,7 +178,7 @@ public class IntArrayTag extends CollectionTag<IntTag> {
     }
 
     @Override
-    public IntTag remove(int i) {
+    public @NotNull IntTag remove(int i) {
         int j = this.data[i];
 
         this.data = ArrayUtils.remove(this.data, i);
diff --git a/src/main/java/net/minecraft/network/FriendlyByteBuf.java b/src/main/java/net/minecraft/network/FriendlyByteBuf.java
index 32ee4ed11aefd82dca2e3e78b3108f041fdc3695..ce74104c628d858abb35c6f11a84f251d8e9c2fc 100644
--- a/src/main/java/net/minecraft/network/FriendlyByteBuf.java
+++ b/src/main/java/net/minecraft/network/FriendlyByteBuf.java
@@ -75,6 +75,8 @@ import net.minecraft.world.level.Level;
 import net.minecraft.world.phys.BlockHitResult;
 import net.minecraft.world.phys.Vec3;
 import org.bukkit.craftbukkit.inventory.CraftItemStack; // CraftBukkit
+import org.jetbrains.annotations.NotNull;
+
 
 public class FriendlyByteBuf extends ByteBuf {
 
@@ -1562,7 +1564,7 @@ public class FriendlyByteBuf extends ByteBuf {
         return this.source.toString(charset);
     }
 
-    public String toString(int i, int j, Charset charset) {
+    public @NotNull String toString(int i, int j, Charset charset) {
         return this.source.toString(i, j, charset);
     }
 
diff --git a/src/main/java/net/minecraft/network/chat/Component.java b/src/main/java/net/minecraft/network/chat/Component.java
index 3ca733528acb40354b308019a84436ea67e05751..14f6d040724e9d1b524e346443b57962a9d0e6a4 100644
--- a/src/main/java/net/minecraft/network/chat/Component.java
+++ b/src/main/java/net/minecraft/network/chat/Component.java
@@ -43,6 +43,8 @@ import net.minecraft.util.GsonHelper;
 import net.minecraft.util.LowerCaseEnumTypeAdapterFactory;
 // CraftBukkit start
 import com.google.common.collect.Streams;
+import org.jetbrains.annotations.NotNull;
+
 import java.util.stream.Stream;
 // CraftBukkit end
 
@@ -54,7 +56,7 @@ public interface Component extends Message, FormattedText, Iterable<Component> {
     }
 
     @Override
-    default Iterator<Component> iterator() {
+    default @NotNull Iterator<Component> iterator() {
         return this.stream().iterator();
     }
     // CraftBukkit end
diff --git a/src/main/java/net/minecraft/network/chat/TextColor.java b/src/main/java/net/minecraft/network/chat/TextColor.java
index 3fa282a08aee6578316fbb54f2cefb538790151c..09c3abebbca6d8d05ab766c0776da23224d74c08 100644
--- a/src/main/java/net/minecraft/network/chat/TextColor.java
+++ b/src/main/java/net/minecraft/network/chat/TextColor.java
@@ -57,7 +57,7 @@ public final class TextColor {
         return String.format(Locale.ROOT, "#%06X", this.value);
     }
 
-    public boolean equals(Object object) {
+    public boolean equals(@org.jetbrains.annotations.Nullable Object object) {
         if (this == object) {
             return true;
         } else if (object != null && this.getClass() == object.getClass()) {
diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index dbdc98d1bf132dcbb85d265f26065490e9732384..fa0ba0fa14c7797db93b3d151774e51dbeb6c071 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -2557,7 +2557,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
     }
 
     @Nullable
-    public GameType getForcedGameType() {
+    public @org.jetbrains.annotations.Nullable GameType getForcedGameType() {
         return null;
     }
 
diff --git a/src/main/java/net/minecraft/server/level/ChunkMap.java b/src/main/java/net/minecraft/server/level/ChunkMap.java
index 2212f9f48636357265d8e44aba415ea4f09f1fe7..9862da261654d3911e193487e28f609e8b391f41 100644
--- a/src/main/java/net/minecraft/server/level/ChunkMap.java
+++ b/src/main/java/net/minecraft/server/level/ChunkMap.java
@@ -108,6 +108,7 @@ import net.minecraft.world.level.storage.LevelStorageSource;
 import net.minecraft.world.phys.Vec3;
 import org.apache.commons.lang3.mutable.MutableBoolean;
 import org.apache.commons.lang3.mutable.MutableObject;
+import org.jetbrains.annotations.NotNull;
 import org.slf4j.Logger;
 import org.bukkit.craftbukkit.generator.CustomChunkGenerator;
 import org.bukkit.entity.Player;
@@ -469,7 +470,7 @@ public class ChunkMap extends ChunkStorage implements ChunkHolder.PlayerProvider
         }
         final Object[] backingSet = inRange.getBackingSet();
         for (int i = 0; i < backingSet.length; i++) {
-            if (!(backingSet[i] instanceof final ServerPlayer player)) {
+            if (!(backingSet[i] instanceof final @NotNull ServerPlayer player)) {
                 continue;
             }
             ++player.mobCounts[index];
diff --git a/src/main/java/net/minecraft/server/level/DistanceManager.java b/src/main/java/net/minecraft/server/level/DistanceManager.java
index 52cba8f68d274cce106304aef1249a95474d3238..e5ffd644f47457aee8af862854ab66666d66f48d 100644
--- a/src/main/java/net/minecraft/server/level/DistanceManager.java
+++ b/src/main/java/net/minecraft/server/level/DistanceManager.java
@@ -76,10 +76,10 @@ public abstract class DistanceManager {
     protected abstract boolean isChunkToRemove(long pos);
 
     @Nullable
-    protected abstract ChunkHolder getChunk(long pos);
+    protected abstract @org.jetbrains.annotations.Nullable ChunkHolder getChunk(long pos);
 
     @Nullable
-    protected abstract ChunkHolder updateChunkScheduling(long pos, int level, @Nullable ChunkHolder holder, int k);
+    protected abstract @org.jetbrains.annotations.Nullable ChunkHolder updateChunkScheduling(long pos, int level, @Nullable ChunkHolder holder, int k);
 
     public boolean runAllUpdates(ChunkMap chunkStorage) {
         return this.getChunkHolderManager().processTicketUpdates(); // Paper - rewrite chunk system
diff --git a/src/main/java/net/minecraft/server/level/ThreadedLevelLightEngine.java b/src/main/java/net/minecraft/server/level/ThreadedLevelLightEngine.java
index 660693c6dc0ef86f4013df980b6d0c11c03e46cd..baa22b639f7547be827c70b869ae02e499018391 100644
--- a/src/main/java/net/minecraft/server/level/ThreadedLevelLightEngine.java
+++ b/src/main/java/net/minecraft/server/level/ThreadedLevelLightEngine.java
@@ -21,6 +21,7 @@ import net.minecraft.world.level.chunk.DataLayer;
 import net.minecraft.world.level.chunk.LevelChunkSection;
 import net.minecraft.world.level.chunk.LightChunkGetter;
 import net.minecraft.world.level.lighting.LevelLightEngine;
+import org.jetbrains.annotations.NotNull;
 import org.slf4j.Logger;
 
 // Paper start
@@ -151,7 +152,7 @@ public class ThreadedLevelLightEngine extends LevelLightEngine implements AutoCl
             world.getChunkSource().addRegionTicket(ca.spottedleaf.starlight.common.light.StarLightInterface.CHUNK_WORK_TICKET, pos, 0, pos);
         }
 
-        updateFuture.thenAcceptAsync((final Void ignore) -> {
+        updateFuture.thenAcceptAsync((final @NotNull Void ignore) -> {
             final int newReferences = this.chunksBeingWorkedOn.get(key);
             if (newReferences == 1) {
                 this.chunksBeingWorkedOn.remove(key);
@@ -160,7 +161,7 @@ public class ThreadedLevelLightEngine extends LevelLightEngine implements AutoCl
             } else {
                 this.chunksBeingWorkedOn.put(key, newReferences - 1);
             }
-        }, world.getChunkSource().chunkMap.mainThreadExecutor).whenComplete((final Void ignore, final Throwable thr) -> {
+        }, world.getChunkSource().chunkMap.mainThreadExecutor).whenComplete((final @NotNull Void ignore, final @NotNull Throwable thr) -> {
             if (thr != null) {
                 LOGGER.error("Failed to remove ticket level for post chunk task " + new ChunkPos(chunkX, chunkZ), thr);
             }
@@ -323,7 +324,7 @@ public class ThreadedLevelLightEngine extends LevelLightEngine implements AutoCl
             }, (runnable) -> {
                 this.theLightEngine.scheduleChunkLight(chunkPos, runnable);
                 this.tryScheduleUpdate();
-            }).whenComplete((final ChunkAccess c, final Throwable throwable) -> {
+            }).whenComplete((final @NotNull ChunkAccess c, final @NotNull Throwable throwable) -> {
                 if (throwable != null) {
                     LOGGER.error("Failed to light chunk " + chunkPos, throwable);
                 }
diff --git a/src/main/java/net/minecraft/util/SortedArraySet.java b/src/main/java/net/minecraft/util/SortedArraySet.java
index 4f5f2c25e12ee6d977bc98d9118650cfe91e6c0e..e4a5716e2c3e5867dd52dfc848659efa3a76fbc7 100644
--- a/src/main/java/net/minecraft/util/SortedArraySet.java
+++ b/src/main/java/net/minecraft/util/SortedArraySet.java
@@ -1,6 +1,8 @@
 package net.minecraft.util;
 
 import it.unimi.dsi.fastutil.objects.ObjectArrays;
+import org.jetbrains.annotations.NotNull;
+
 import java.util.AbstractSet;
 import java.util.Arrays;
 import java.util.Comparator;
@@ -202,7 +204,7 @@ public class SortedArraySet<T> extends AbstractSet<T> {
     }
 
     @Override
-    public Iterator<T> iterator() {
+    public @NotNull Iterator<T> iterator() {
         return new SortedArraySet.ArrayIterator();
     }
 
@@ -212,12 +214,12 @@ public class SortedArraySet<T> extends AbstractSet<T> {
     }
 
     @Override
-    public Object[] toArray() {
+    public Object @NotNull [] toArray() {
         return Arrays.copyOf(this.contents, this.size, Object[].class);
     }
 
     @Override
-    public <U> U[] toArray(U[] objects) {
+    public <U> U @NotNull [] toArray(U[] objects) {
         if (objects.length < this.size) {
             return (U[])Arrays.copyOf(this.contents, this.size, objects.getClass());
         } else {
diff --git a/src/main/java/net/minecraft/world/damagesource/DamageSource.java b/src/main/java/net/minecraft/world/damagesource/DamageSource.java
index 2848cb7c76e94d8349f042dc92daf01322a6ce5a..5cb8d2ac145c5bbb3d0a3efabb70057c4859f88c 100644
--- a/src/main/java/net/minecraft/world/damagesource/DamageSource.java
+++ b/src/main/java/net/minecraft/world/damagesource/DamageSource.java
@@ -211,12 +211,12 @@ public class DamageSource {
     }
 
     @Nullable
-    public Entity getDirectEntity() {
+    public @org.jetbrains.annotations.Nullable Entity getDirectEntity() {
         return this.getEntity();
     }
 
     @Nullable
-    public Entity getEntity() {
+    public @org.jetbrains.annotations.Nullable Entity getEntity() {
         return null;
     }
 
@@ -311,7 +311,7 @@ public class DamageSource {
     }
 
     @Nullable
-    public Vec3 getSourcePosition() {
+    public @org.jetbrains.annotations.Nullable Vec3 getSourcePosition() {
         return null;
     }
 }
diff --git a/src/main/java/net/minecraft/world/entity/AgeableMob.java b/src/main/java/net/minecraft/world/entity/AgeableMob.java
index 22ba53d9f8866327752b0c33b517adb02c50b684..21a82083a6ae4a3d3c19265cd6ee374251f61726 100644
--- a/src/main/java/net/minecraft/world/entity/AgeableMob.java
+++ b/src/main/java/net/minecraft/world/entity/AgeableMob.java
@@ -51,7 +51,7 @@ public abstract class AgeableMob extends PathfinderMob {
     // Spigot end
 
     @Override
-    public SpawnGroupData finalizeSpawn(ServerLevelAccessor world, DifficultyInstance difficulty, MobSpawnType spawnReason, @Nullable SpawnGroupData entityData, @Nullable CompoundTag entityNbt) {
+    public @org.jetbrains.annotations.Nullable SpawnGroupData finalizeSpawn(ServerLevelAccessor world, DifficultyInstance difficulty, MobSpawnType spawnReason, @Nullable SpawnGroupData entityData, @Nullable CompoundTag entityNbt) {
         if (entityData == null) {
             entityData = new AgeableMob.AgeableMobGroupData(true);
         }
@@ -67,7 +67,7 @@ public abstract class AgeableMob extends PathfinderMob {
     }
 
     @Nullable
-    public abstract AgeableMob getBreedOffspring(ServerLevel world, AgeableMob entity);
+    public abstract @org.jetbrains.annotations.Nullable AgeableMob getBreedOffspring(ServerLevel world, AgeableMob entity);
 
     @Override
     protected void defineSynchedData() {
diff --git a/src/main/java/net/minecraft/world/entity/Entity.java b/src/main/java/net/minecraft/world/entity/Entity.java
index 7555b04dcf274bb624b89f2eb9ff80da0056de4e..e4c97c9aaf6655e403ee669c8dca10034038a475 100644
--- a/src/main/java/net/minecraft/world/entity/Entity.java
+++ b/src/main/java/net/minecraft/world/entity/Entity.java
@@ -2529,7 +2529,7 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource {
     }
 
     @Nullable
-    public ItemEntity spawnAtLocation(ItemStack stack, float yOffset) {
+    public @org.jetbrains.annotations.Nullable ItemEntity spawnAtLocation(ItemStack stack, float yOffset) {
         if (stack.isEmpty()) {
             return null;
         } else if (this.level.isClientSide) {
@@ -3070,7 +3070,7 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource {
     public void updateDynamicGameEventListener(BiConsumer<DynamicGameEventListener<?>, ServerLevel> callback) {}
 
     @Nullable
-    public Team getTeam() {
+    public @org.jetbrains.annotations.Nullable Team getTeam() {
         if (!this.level.paperConfig().scoreboards.allowNonPlayerEntitiesOnScoreboards && !(this instanceof Player)) { return null; } // Paper
         return this.level.getScoreboard().getPlayersTeam(this.getScoreboardName());
     }
@@ -3362,7 +3362,7 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource {
     }
 
     @Nullable
-    public Entity changeDimension(ServerLevel destination) {
+    public @org.jetbrains.annotations.Nullable Entity changeDimension(ServerLevel destination) {
         // CraftBukkit start
         return this.teleportTo(destination, null);
     }
@@ -3457,7 +3457,7 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource {
     }
 
     @Nullable
-    protected PortalInfo findDimensionEntryPoint(ServerLevel destination) {
+    protected @org.jetbrains.annotations.Nullable PortalInfo findDimensionEntryPoint(ServerLevel destination) {
         // CraftBukkit start
         if (destination == null) {
             return null;
@@ -3906,7 +3906,7 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource {
     }
 
     @Nullable
-    public Entity getControllingPassenger() {
+    public @org.jetbrains.annotations.Nullable Entity getControllingPassenger() {
         return null;
     }
 
@@ -4389,7 +4389,7 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource {
     }
 
     @Nullable
-    public ItemStack getPickResult() {
+    public @org.jetbrains.annotations.Nullable ItemStack getPickResult() {
         return null;
     }
 
diff --git a/src/main/java/net/minecraft/world/entity/EntitySelector.java b/src/main/java/net/minecraft/world/entity/EntitySelector.java
index 72abebff2018cde2922e97ad6478f93da9aed3ec..0cff406722f3d9efbc2f32d4da9707eb233d1c05 100644
--- a/src/main/java/net/minecraft/world/entity/EntitySelector.java
+++ b/src/main/java/net/minecraft/world/entity/EntitySelector.java
@@ -86,7 +86,7 @@ public final class EntitySelector {
     }
 
     public static Predicate<Entity> notRiding(Entity entity) {
-        return (entity1) -> {
+        return (@org.jetbrains.annotations.Nullable var entity1) -> {
             while (true) {
                 if (entity1.isPassenger()) {
                     entity1 = entity1.getVehicle();
diff --git a/src/main/java/net/minecraft/world/entity/LivingEntity.java b/src/main/java/net/minecraft/world/entity/LivingEntity.java
index 529ea9094c0c7b6263c13b3b7a2d1e652f7bc29e..8d0900ed5f251fbd8ad34a94aea2e6a7aea98dc0 100644
--- a/src/main/java/net/minecraft/world/entity/LivingEntity.java
+++ b/src/main/java/net/minecraft/world/entity/LivingEntity.java
@@ -121,6 +121,7 @@ import net.minecraft.world.phys.EntityHitResult;
 import net.minecraft.world.phys.HitResult;
 import net.minecraft.world.phys.Vec3;
 import net.minecraft.world.scores.PlayerTeam;
+import org.jetbrains.annotations.NotNull;
 import org.slf4j.Logger;
 
 // CraftBukkit start
@@ -1854,12 +1855,12 @@ public abstract class LivingEntity extends Entity {
     }
 
     @Nullable
-    protected SoundEvent getHurtSound(DamageSource source) {
+    protected @org.jetbrains.annotations.Nullable SoundEvent getHurtSound(DamageSource source) {
         return SoundEvents.GENERIC_HURT;
     }
 
     @Nullable
-    public SoundEvent getDeathSound() {
+    public @org.jetbrains.annotations.Nullable SoundEvent getDeathSound() {
         return SoundEvents.GENERIC_DEATH;
     }
 
@@ -2086,7 +2087,7 @@ public abstract class LivingEntity extends Entity {
             float originalDamage = f;
             Function<Double, Double> hardHat = new Function<Double, Double>() {
                 @Override
-                public Double apply(Double f) {
+                public @NotNull Double apply(Double f) {
                     if (damagesource.isDamageHelmet() && !LivingEntity.this.getItemBySlot(EquipmentSlot.HEAD).isEmpty()) {
                         return -(f - (f * 0.75F));
 
@@ -2117,7 +2118,7 @@ public abstract class LivingEntity extends Entity {
 
             Function<Double, Double> resistance = new Function<Double, Double>() {
                 @Override
-                public Double apply(Double f) {
+                public @NotNull Double apply(Double f) {
                     if (!damagesource.isBypassMagic() && LivingEntity.this.hasEffect(MobEffects.DAMAGE_RESISTANCE) && damagesource != DamageSource.OUT_OF_WORLD) {
                         int i = (LivingEntity.this.getEffect(MobEffects.DAMAGE_RESISTANCE).getAmplifier() + 1) * 5;
                         int j = 25 - i;
diff --git a/src/main/java/net/minecraft/world/entity/Mob.java b/src/main/java/net/minecraft/world/entity/Mob.java
index 49b983064ea810382b6112f5dc7f93ba4e5710bd..6de1733b39278796bfb718d3cf51c4e22b9cd243 100644
--- a/src/main/java/net/minecraft/world/entity/Mob.java
+++ b/src/main/java/net/minecraft/world/entity/Mob.java
@@ -252,7 +252,7 @@ public abstract class Mob extends LivingEntity {
     }
 
     @Nullable
-    public LivingEntity getTarget() {
+    public @org.jetbrains.annotations.Nullable LivingEntity getTarget() {
         return this.target;
     }
 
@@ -425,7 +425,7 @@ public abstract class Mob extends LivingEntity {
     }
 
     @Nullable
-    protected SoundEvent getAmbientSound() {
+    protected @org.jetbrains.annotations.Nullable SoundEvent getAmbientSound() {
         return null;
     }
 
@@ -1218,7 +1218,7 @@ public abstract class Mob extends LivingEntity {
     }
 
     @Nullable
-    public SpawnGroupData finalizeSpawn(ServerLevelAccessor world, DifficultyInstance difficulty, MobSpawnType spawnReason, @Nullable SpawnGroupData entityData, @Nullable CompoundTag entityNbt) {
+    public @org.jetbrains.annotations.Nullable SpawnGroupData finalizeSpawn(ServerLevelAccessor world, DifficultyInstance difficulty, MobSpawnType spawnReason, @Nullable SpawnGroupData entityData, @Nullable CompoundTag entityNbt) {
         RandomSource randomsource = world.getRandom();
 
         this.getAttribute(Attributes.FOLLOW_RANGE).addPermanentModifier(new AttributeModifier("Random spawn bonus", randomsource.triangle(0.0D, 0.11485000000000001D), AttributeModifier.Operation.MULTIPLY_BASE));
diff --git a/src/main/java/net/minecraft/world/entity/NeutralMob.java b/src/main/java/net/minecraft/world/entity/NeutralMob.java
index 7dac62b6370dae3ad6d098857c3136d5acf2bd74..e25df659cd2371b85e3154173271b16cd01529cf 100644
--- a/src/main/java/net/minecraft/world/entity/NeutralMob.java
+++ b/src/main/java/net/minecraft/world/entity/NeutralMob.java
@@ -19,6 +19,7 @@ public interface NeutralMob {
     void setRemainingPersistentAngerTime(int angerTime);
 
     @Nullable
+    @org.jetbrains.annotations.Nullable
     UUID getPersistentAngerTarget();
 
     void setPersistentAngerTarget(@Nullable UUID angryAt);
@@ -106,6 +107,7 @@ public interface NeutralMob {
     }
 
     @Nullable
+    @org.jetbrains.annotations.Nullable
     LivingEntity getLastHurtByMob();
 
     void setLastHurtByMob(@Nullable LivingEntity attacker);
@@ -119,6 +121,7 @@ public interface NeutralMob {
     boolean canAttack(LivingEntity target);
 
     @Nullable
+    @org.jetbrains.annotations.Nullable
     LivingEntity getTarget();
 
     // Paper start - Update last hurt when ticking
diff --git a/src/main/java/net/minecraft/world/entity/ai/navigation/GroundPathNavigation.java b/src/main/java/net/minecraft/world/entity/ai/navigation/GroundPathNavigation.java
index 80b3fd4150d749af7d584f95ee3d0b8ed664ead9..7e91aa0b2f8583f539f96121d2020812bcc99ee4 100644
--- a/src/main/java/net/minecraft/world/entity/ai/navigation/GroundPathNavigation.java
+++ b/src/main/java/net/minecraft/world/entity/ai/navigation/GroundPathNavigation.java
@@ -13,6 +13,8 @@ import net.minecraft.world.level.pathfinder.Path;
 import net.minecraft.world.level.pathfinder.PathFinder;
 import net.minecraft.world.level.pathfinder.WalkNodeEvaluator;
 import net.minecraft.world.phys.Vec3;
+import org.jetbrains.annotations.Nullable;
+
 
 public class GroundPathNavigation extends PathNavigation {
     private boolean avoidSun;
@@ -39,7 +41,7 @@ public class GroundPathNavigation extends PathNavigation {
     }
 
     @Override
-    public Path createPath(BlockPos target, @javax.annotation.Nullable Entity entity, int distance) { // Paper
+    public @Nullable Path createPath(BlockPos target, @javax.annotation.Nullable Entity entity, int distance) { // Paper
         if (this.level.getBlockState(target).isAir()) {
             BlockPos blockPos;
             for(blockPos = target.below(); blockPos.getY() > this.level.getMinBuildHeight() && this.level.getBlockState(blockPos).isAir(); blockPos = blockPos.below()) {
@@ -68,7 +70,7 @@ public class GroundPathNavigation extends PathNavigation {
     }
 
     @Override
-    public Path createPath(Entity entity, int distance) {
+    public @Nullable Path createPath(Entity entity, int distance) {
         return this.createPath(entity.blockPosition(), entity, distance); // Paper - Forward target entity
     }
 
diff --git a/src/main/java/net/minecraft/world/entity/ai/navigation/PathNavigation.java b/src/main/java/net/minecraft/world/entity/ai/navigation/PathNavigation.java
index 97257b450e848f53fdb9b5b7affa57b03ea5f459..323b54adfcc6f3300cfe188d89c233ce974caf9b 100644
--- a/src/main/java/net/minecraft/world/entity/ai/navigation/PathNavigation.java
+++ b/src/main/java/net/minecraft/world/entity/ai/navigation/PathNavigation.java
@@ -113,7 +113,7 @@ public abstract class PathNavigation {
         return this.createPath(target, null, distance);
     }
     @Nullable
-    public Path createPath(BlockPos target, @Nullable Entity entity, int distance) {
+    public @org.jetbrains.annotations.Nullable Path createPath(BlockPos target, @Nullable Entity entity, int distance) {
         return this.createPath(ImmutableSet.of(target), entity, 8, false, distance);
         // Paper end
     }
@@ -124,7 +124,7 @@ public abstract class PathNavigation {
     }
 
     @Nullable
-    public Path createPath(Entity entity, int distance) {
+    public @org.jetbrains.annotations.Nullable Path createPath(Entity entity, int distance) {
         return this.createPath(ImmutableSet.of(entity.blockPosition()), entity, 16, true, distance); // Paper
     }
 
diff --git a/src/main/java/net/minecraft/world/entity/animal/Cow.java b/src/main/java/net/minecraft/world/entity/animal/Cow.java
index abae850f5babfd75c7547e88fb7637e9775991d3..8d4ec84ea382ec89ffa753cc68a0e6fa2ba11777 100644
--- a/src/main/java/net/minecraft/world/entity/animal/Cow.java
+++ b/src/main/java/net/minecraft/world/entity/animal/Cow.java
@@ -33,6 +33,7 @@ import net.minecraft.world.level.block.state.BlockState;
 // CraftBukkit start
 import org.bukkit.craftbukkit.event.CraftEventFactory;
 import org.bukkit.craftbukkit.inventory.CraftItemStack;
+import org.jetbrains.annotations.Nullable;
 // CraftBukkit end
 
 public class Cow extends Animal {
@@ -107,7 +108,7 @@ public class Cow extends Animal {
 
     @Nullable
     @Override
-    public Cow getBreedOffspring(ServerLevel world, AgeableMob entity) {
+    public @Nullable Cow getBreedOffspring(ServerLevel world, AgeableMob entity) {
         return (Cow) EntityType.COW.create(world);
     }
 
diff --git a/src/main/java/net/minecraft/world/entity/animal/Squid.java b/src/main/java/net/minecraft/world/entity/animal/Squid.java
index a51424d29ac353cf1bec4d1484db0acb63bebba5..623de851962d3b8138590912db58bb308fd28f14 100644
--- a/src/main/java/net/minecraft/world/entity/animal/Squid.java
+++ b/src/main/java/net/minecraft/world/entity/animal/Squid.java
@@ -26,6 +26,8 @@ import net.minecraft.world.level.Level;
 import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.world.level.material.FluidState;
 import net.minecraft.world.phys.Vec3;
+import org.jetbrains.annotations.Nullable;
+
 
 public class Squid extends WaterAnimal {
 
@@ -66,17 +68,17 @@ public class Squid extends WaterAnimal {
     }
 
     @Override
-    protected SoundEvent getAmbientSound() {
+    protected @Nullable SoundEvent getAmbientSound() {
         return SoundEvents.SQUID_AMBIENT;
     }
 
     @Override
-    protected SoundEvent getHurtSound(DamageSource source) {
+    protected @Nullable SoundEvent getHurtSound(DamageSource source) {
         return SoundEvents.SQUID_HURT;
     }
 
     @Override
-    public SoundEvent getDeathSound() {
+    public @Nullable SoundEvent getDeathSound() {
         return SoundEvents.SQUID_DEATH;
     }
 
diff --git a/src/main/java/net/minecraft/world/entity/animal/horse/AbstractHorse.java b/src/main/java/net/minecraft/world/entity/animal/horse/AbstractHorse.java
index 72d660cd2ade39335024897cffb8b8a151a7cb71..c781def1e30a5e744e836899823c0b3b8ce46307 100644
--- a/src/main/java/net/minecraft/world/entity/animal/horse/AbstractHorse.java
+++ b/src/main/java/net/minecraft/world/entity/animal/horse/AbstractHorse.java
@@ -380,7 +380,7 @@ public abstract class AbstractHorse extends Animal implements ContainerListener,
     }
 
     @Nullable
-    protected SoundEvent getAngrySound() {
+    protected @org.jetbrains.annotations.Nullable SoundEvent getAngrySound() {
         return null;
     }
 
@@ -916,7 +916,7 @@ public abstract class AbstractHorse extends Animal implements ContainerListener,
 
     @Nullable
     @Override
-    public AgeableMob getBreedOffspring(ServerLevel world, AgeableMob entity) {
+    public @org.jetbrains.annotations.Nullable AgeableMob getBreedOffspring(ServerLevel world, AgeableMob entity) {
         return null;
     }
 
@@ -1121,7 +1121,7 @@ public abstract class AbstractHorse extends Animal implements ContainerListener,
 
     @Nullable
     @Override
-    public LivingEntity getControllingPassenger() {
+    public @org.jetbrains.annotations.Nullable LivingEntity getControllingPassenger() {
         if (this.isSaddled()) {
             Entity entity = this.getFirstPassenger();
 
@@ -1195,7 +1195,7 @@ public abstract class AbstractHorse extends Animal implements ContainerListener,
 
     @Nullable
     @Override
-    public SpawnGroupData finalizeSpawn(ServerLevelAccessor world, DifficultyInstance difficulty, MobSpawnType spawnReason, @Nullable SpawnGroupData entityData, @Nullable CompoundTag entityNbt) {
+    public @org.jetbrains.annotations.Nullable SpawnGroupData finalizeSpawn(ServerLevelAccessor world, DifficultyInstance difficulty, MobSpawnType spawnReason, @Nullable SpawnGroupData entityData, @Nullable CompoundTag entityNbt) {
         if (entityData == null) {
             entityData = new AgeableMob.AgeableMobGroupData(0.2F);
         }
diff --git a/src/main/java/net/minecraft/world/entity/animal/horse/Llama.java b/src/main/java/net/minecraft/world/entity/animal/horse/Llama.java
index 7ae0e4b3aa8e861500ddc7b38aa671258b532fcd..a657e0ca97d337dc884a84c10292eb61be9cdca6 100644
--- a/src/main/java/net/minecraft/world/entity/animal/horse/Llama.java
+++ b/src/main/java/net/minecraft/world/entity/animal/horse/Llama.java
@@ -255,7 +255,7 @@ public class Llama extends AbstractChestedHorse implements VariantHolder<Llama.V
 
     @Nullable
     @Override
-    public SpawnGroupData finalizeSpawn(ServerLevelAccessor world, DifficultyInstance difficulty, MobSpawnType spawnReason, @Nullable SpawnGroupData entityData, @Nullable CompoundTag entityNbt) {
+    public @org.jetbrains.annotations.Nullable SpawnGroupData finalizeSpawn(ServerLevelAccessor world, DifficultyInstance difficulty, MobSpawnType spawnReason, @Nullable SpawnGroupData entityData, @Nullable CompoundTag entityNbt) {
         RandomSource randomsource = world.getRandom();
 
         this.setRandomStrength(randomsource);
diff --git a/src/main/java/net/minecraft/world/entity/monster/AbstractSkeleton.java b/src/main/java/net/minecraft/world/entity/monster/AbstractSkeleton.java
index b8abee145fc92faddef98da913eca7715b6bfc03..afcf65c9004cd0fccf54264e1da897657ba21633 100644
--- a/src/main/java/net/minecraft/world/entity/monster/AbstractSkeleton.java
+++ b/src/main/java/net/minecraft/world/entity/monster/AbstractSkeleton.java
@@ -149,7 +149,7 @@ public abstract class AbstractSkeleton extends Monster implements RangedAttackMo
 
     @Nullable
     @Override
-    public SpawnGroupData finalizeSpawn(ServerLevelAccessor world, DifficultyInstance difficulty, MobSpawnType spawnReason, @Nullable SpawnGroupData entityData, @Nullable CompoundTag entityNbt) {
+    public @org.jetbrains.annotations.Nullable SpawnGroupData finalizeSpawn(ServerLevelAccessor world, DifficultyInstance difficulty, MobSpawnType spawnReason, @Nullable SpawnGroupData entityData, @Nullable CompoundTag entityNbt) {
         entityData = super.finalizeSpawn(world, difficulty, spawnReason, entityData, entityNbt);
         RandomSource randomsource = world.getRandom();
 
diff --git a/src/main/java/net/minecraft/world/entity/monster/Monster.java b/src/main/java/net/minecraft/world/entity/monster/Monster.java
index 55c245d0dfa369dc6de2197ae37335fba4fae4ae..50ea5234b48e0dcdc03950d49731708707cae701 100644
--- a/src/main/java/net/minecraft/world/entity/monster/Monster.java
+++ b/src/main/java/net/minecraft/world/entity/monster/Monster.java
@@ -25,6 +25,8 @@ import net.minecraft.world.level.LevelReader;
 import net.minecraft.world.level.LightLayer;
 import net.minecraft.world.level.ServerLevelAccessor;
 import net.minecraft.world.level.dimension.DimensionType;
+import org.jetbrains.annotations.Nullable;
+
 
 public abstract class Monster extends PathfinderMob implements Enemy {
     public org.bukkit.craftbukkit.entity.CraftMonster getBukkitMonster() { return (org.bukkit.craftbukkit.entity.CraftMonster) super.getBukkitEntity(); } // Paper
@@ -69,12 +71,12 @@ public abstract class Monster extends PathfinderMob implements Enemy {
     }
 
     @Override
-    protected SoundEvent getHurtSound(DamageSource source) {
+    protected @Nullable SoundEvent getHurtSound(DamageSource source) {
         return SoundEvents.HOSTILE_HURT;
     }
 
     @Override
-    public SoundEvent getDeathSound() {
+    public @Nullable SoundEvent getDeathSound() {
         return SoundEvents.HOSTILE_DEATH;
     }
 
diff --git a/src/main/java/net/minecraft/world/entity/monster/Slime.java b/src/main/java/net/minecraft/world/entity/monster/Slime.java
index 87c2e50c6f817d1a77e0cfd64366765b265f9ba0..17665c2962a668e78714e1fa3aa516bea493f0b4 100644
--- a/src/main/java/net/minecraft/world/entity/monster/Slime.java
+++ b/src/main/java/net/minecraft/world/entity/monster/Slime.java
@@ -307,12 +307,12 @@ public class Slime extends Mob implements Enemy {
     }
 
     @Override
-    protected SoundEvent getHurtSound(DamageSource source) {
+    protected @org.jetbrains.annotations.Nullable SoundEvent getHurtSound(DamageSource source) {
         return this.isTiny() ? SoundEvents.SLIME_HURT_SMALL : SoundEvents.SLIME_HURT;
     }
 
     @Override
-    public SoundEvent getDeathSound() {
+    public @org.jetbrains.annotations.Nullable SoundEvent getDeathSound() {
         return this.isTiny() ? SoundEvents.SLIME_DEATH_SMALL : SoundEvents.SLIME_DEATH;
     }
 
diff --git a/src/main/java/net/minecraft/world/entity/monster/SpellcasterIllager.java b/src/main/java/net/minecraft/world/entity/monster/SpellcasterIllager.java
index 78f1ee0d804c28292ac66641ce2ce52056d81430..b3a02c96718c7c373cf49b3c036d2b77561e856f 100644
--- a/src/main/java/net/minecraft/world/entity/monster/SpellcasterIllager.java
+++ b/src/main/java/net/minecraft/world/entity/monster/SpellcasterIllager.java
@@ -177,7 +177,7 @@ public abstract class SpellcasterIllager extends AbstractIllager {
         protected abstract int getCastingInterval();
 
         @Nullable
-        protected abstract SoundEvent getSpellPrepareSound();
+        protected abstract @org.jetbrains.annotations.Nullable SoundEvent getSpellPrepareSound();
 
         protected abstract SpellcasterIllager.IllagerSpell getSpell();
     }
diff --git a/src/main/java/net/minecraft/world/entity/monster/Spider.java b/src/main/java/net/minecraft/world/entity/monster/Spider.java
index d786b8b8c9d478504f74e65c3bc7ed3e9884d003..0c16afc64ecb04515b9ba92bd322d75972650a11 100644
--- a/src/main/java/net/minecraft/world/entity/monster/Spider.java
+++ b/src/main/java/net/minecraft/world/entity/monster/Spider.java
@@ -154,7 +154,7 @@ public class Spider extends Monster {
 
     @Nullable
     @Override
-    public SpawnGroupData finalizeSpawn(ServerLevelAccessor world, DifficultyInstance difficulty, MobSpawnType spawnReason, @Nullable SpawnGroupData entityData, @Nullable CompoundTag entityNbt) {
+    public @org.jetbrains.annotations.Nullable SpawnGroupData finalizeSpawn(ServerLevelAccessor world, DifficultyInstance difficulty, MobSpawnType spawnReason, @Nullable SpawnGroupData entityData, @Nullable CompoundTag entityNbt) {
         Object object = super.finalizeSpawn(world, difficulty, spawnReason, entityData, entityNbt);
         RandomSource randomsource = world.getRandom();
 
diff --git a/src/main/java/net/minecraft/world/entity/monster/Zombie.java b/src/main/java/net/minecraft/world/entity/monster/Zombie.java
index 9976205537cfe228735687f1e9c52c74ac025690..00607c3704157efc8a1761680d09a597bd1c471f 100644
--- a/src/main/java/net/minecraft/world/entity/monster/Zombie.java
+++ b/src/main/java/net/minecraft/world/entity/monster/Zombie.java
@@ -382,17 +382,17 @@ public class Zombie extends Monster {
     }
 
     @Override
-    protected SoundEvent getAmbientSound() {
+    protected @org.jetbrains.annotations.Nullable SoundEvent getAmbientSound() {
         return SoundEvents.ZOMBIE_AMBIENT;
     }
 
     @Override
-    protected SoundEvent getHurtSound(DamageSource source) {
+    protected @org.jetbrains.annotations.Nullable SoundEvent getHurtSound(DamageSource source) {
         return SoundEvents.ZOMBIE_HURT;
     }
 
     @Override
-    public SoundEvent getDeathSound() {
+    public @org.jetbrains.annotations.Nullable SoundEvent getDeathSound() {
         return SoundEvents.ZOMBIE_DEATH;
     }
 
@@ -514,7 +514,7 @@ public class Zombie extends Monster {
 
     @Nullable
     @Override
-    public SpawnGroupData finalizeSpawn(ServerLevelAccessor world, DifficultyInstance difficulty, MobSpawnType spawnReason, @Nullable SpawnGroupData entityData, @Nullable CompoundTag entityNbt) {
+    public @org.jetbrains.annotations.Nullable SpawnGroupData finalizeSpawn(ServerLevelAccessor world, DifficultyInstance difficulty, MobSpawnType spawnReason, @Nullable SpawnGroupData entityData, @Nullable CompoundTag entityNbt) {
         RandomSource randomsource = world.getRandom();
         Object object = super.finalizeSpawn(world, difficulty, spawnReason, entityData, entityNbt);
         float f = difficulty.getSpecialMultiplier();
diff --git a/src/main/java/net/minecraft/world/entity/npc/AbstractVillager.java b/src/main/java/net/minecraft/world/entity/npc/AbstractVillager.java
index ca96b893e22de3ae7c11d5cded51edf70bdcb6f2..f38a19d7ac5d679ac3115d84c01fc3977540e0b8 100644
--- a/src/main/java/net/minecraft/world/entity/npc/AbstractVillager.java
+++ b/src/main/java/net/minecraft/world/entity/npc/AbstractVillager.java
@@ -68,7 +68,7 @@ public abstract class AbstractVillager extends AgeableMob implements InventoryCa
     }
 
     @Override
-    public SpawnGroupData finalizeSpawn(ServerLevelAccessor world, DifficultyInstance difficulty, MobSpawnType spawnReason, @Nullable SpawnGroupData entityData, @Nullable CompoundTag entityNbt) {
+    public @org.jetbrains.annotations.Nullable SpawnGroupData finalizeSpawn(ServerLevelAccessor world, DifficultyInstance difficulty, MobSpawnType spawnReason, @Nullable SpawnGroupData entityData, @Nullable CompoundTag entityNbt) {
         if (entityData == null) {
             entityData = new AgeableMob.AgeableMobGroupData(false);
         }
diff --git a/src/main/java/net/minecraft/world/entity/npc/VillagerTrades.java b/src/main/java/net/minecraft/world/entity/npc/VillagerTrades.java
index 44a237426739fad0096b2f5108f1d25bd388ea08..a4e2a7e5d4b38b67333beaf75ff95b071cb13b26 100644
--- a/src/main/java/net/minecraft/world/entity/npc/VillagerTrades.java
+++ b/src/main/java/net/minecraft/world/entity/npc/VillagerTrades.java
@@ -233,6 +233,7 @@ public class VillagerTrades {
 
     public interface ItemListing {
         @Nullable
+        @org.jetbrains.annotations.Nullable
         MerchantOffer getOffer(Entity entity, RandomSource random);
     }
 
diff --git a/src/main/java/net/minecraft/world/entity/player/Player.java b/src/main/java/net/minecraft/world/entity/player/Player.java
index 0dcae10fd05a8fe963fdedda8199aa09dc717c9a..8f573d603eb8c2b4d73d0800584c661b76c8e2de 100644
--- a/src/main/java/net/minecraft/world/entity/player/Player.java
+++ b/src/main/java/net/minecraft/world/entity/player/Player.java
@@ -707,7 +707,7 @@ public abstract class Player extends LivingEntity {
     }
 
     @Nullable
-    public ItemEntity drop(ItemStack stack, boolean throwRandomly, boolean retainOwnership) {
+    public @org.jetbrains.annotations.Nullable ItemEntity drop(ItemStack stack, boolean throwRandomly, boolean retainOwnership) {
         // CraftBukkit start - SPIGOT-2942: Add boolean to call event
         return this.drop(stack, throwRandomly, retainOwnership, true);
     }
diff --git a/src/main/java/net/minecraft/world/entity/projectile/AbstractArrow.java b/src/main/java/net/minecraft/world/entity/projectile/AbstractArrow.java
index 9788e477ff1446ad2ea3669922cc7dfc09900ce8..dd37f956fc3582266275b1e6fabaebccefb84dcc 100644
--- a/src/main/java/net/minecraft/world/entity/projectile/AbstractArrow.java
+++ b/src/main/java/net/minecraft/world/entity/projectile/AbstractArrow.java
@@ -496,7 +496,7 @@ public abstract class AbstractArrow extends Projectile {
     protected void doPostHurtEffects(LivingEntity target) {}
 
     @Nullable
-    protected EntityHitResult findHitEntity(Vec3 currentPosition, Vec3 nextPosition) {
+    protected @org.jetbrains.annotations.Nullable EntityHitResult findHitEntity(Vec3 currentPosition, Vec3 nextPosition) {
         return ProjectileUtil.getEntityHitResult(this.level, this, currentPosition, nextPosition, this.getBoundingBox().expandTowards(this.getDeltaMovement()).inflate(1.0D), this::canHitEntity);
     }
 
diff --git a/src/main/java/net/minecraft/world/entity/raid/Raider.java b/src/main/java/net/minecraft/world/entity/raid/Raider.java
index e5ccbaf72f29731f1d1aa939b9297b644a408cd4..d149d3aee03bc07ba21a1954f8392be91185ade6 100644
--- a/src/main/java/net/minecraft/world/entity/raid/Raider.java
+++ b/src/main/java/net/minecraft/world/entity/raid/Raider.java
@@ -301,7 +301,7 @@ public abstract class Raider extends PatrollingMonster {
 
     @Nullable
     @Override
-    public SpawnGroupData finalizeSpawn(ServerLevelAccessor world, DifficultyInstance difficulty, MobSpawnType spawnReason, @Nullable SpawnGroupData entityData, @Nullable CompoundTag entityNbt) {
+    public @org.jetbrains.annotations.Nullable SpawnGroupData finalizeSpawn(ServerLevelAccessor world, DifficultyInstance difficulty, MobSpawnType spawnReason, @Nullable SpawnGroupData entityData, @Nullable CompoundTag entityNbt) {
         this.setCanJoinRaid(this.getType() != EntityType.WITCH || spawnReason != MobSpawnType.NATURAL);
         return super.finalizeSpawn(world, difficulty, spawnReason, entityData, entityNbt);
     }
diff --git a/src/main/java/net/minecraft/world/entity/vehicle/ContainerEntity.java b/src/main/java/net/minecraft/world/entity/vehicle/ContainerEntity.java
index 6ae9cccb28b2354ee47e6682082f92f3ecd56a67..3d17bf87c2679a6e6c41ed4d12e507cada2dab00 100644
--- a/src/main/java/net/minecraft/world/entity/vehicle/ContainerEntity.java
+++ b/src/main/java/net/minecraft/world/entity/vehicle/ContainerEntity.java
@@ -34,6 +34,7 @@ public interface ContainerEntity extends Container, MenuProvider {
     Vec3 position();
 
     @Nullable
+    @org.jetbrains.annotations.Nullable
     ResourceLocation getLootTable();
 
     void setLootTable(@Nullable ResourceLocation lootTableId);
diff --git a/src/main/java/net/minecraft/world/inventory/AbstractContainerMenu.java b/src/main/java/net/minecraft/world/inventory/AbstractContainerMenu.java
index 95ba37458e8154dbce6a8590508840d694fcbed1..cebc88a02476c541c646d3408fff1dee62d2248b 100644
--- a/src/main/java/net/minecraft/world/inventory/AbstractContainerMenu.java
+++ b/src/main/java/net/minecraft/world/inventory/AbstractContainerMenu.java
@@ -79,7 +79,7 @@ public abstract class AbstractContainerMenu {
 
     // CraftBukkit start
     public boolean checkReachable = true;
-    public abstract InventoryView getBukkitView();
+    public abstract @org.jetbrains.annotations.Nullable InventoryView getBukkitView();
     public void transferTo(AbstractContainerMenu other, org.bukkit.craftbukkit.entity.CraftHumanEntity player) {
         InventoryView source = this.getBukkitView(), destination = other.getBukkitView();
         ((CraftInventory) source.getTopInventory()).getInventory().onClose(player);
diff --git a/src/main/java/net/minecraft/world/item/BlockItem.java b/src/main/java/net/minecraft/world/item/BlockItem.java
index b0204af850ee182773ad458208cccd946ad148d5..42eea1213292ac29f25b139c8863ecbc5278487a 100644
--- a/src/main/java/net/minecraft/world/item/BlockItem.java
+++ b/src/main/java/net/minecraft/world/item/BlockItem.java
@@ -148,7 +148,7 @@ public class BlockItem extends Item {
     }
 
     @Nullable
-    public BlockPlaceContext updatePlacementContext(BlockPlaceContext context) {
+    public @org.jetbrains.annotations.Nullable BlockPlaceContext updatePlacementContext(BlockPlaceContext context) {
         return context;
     }
 
@@ -157,7 +157,7 @@ public class BlockItem extends Item {
     }
 
     @Nullable
-    protected BlockState getPlacementState(BlockPlaceContext context) {
+    protected @org.jetbrains.annotations.Nullable BlockState getPlacementState(BlockPlaceContext context) {
         BlockState iblockdata = this.getBlock().getStateForPlacement(context);
 
         return iblockdata != null && this.canPlace(context, iblockdata) ? iblockdata : null;
diff --git a/src/main/java/net/minecraft/world/item/trading/Merchant.java b/src/main/java/net/minecraft/world/item/trading/Merchant.java
index d3a99ba6f3085ad12b67ddc94cc4ab393ec7ecbe..eb76c0d62c9e4ab59c73cc6e48afb21b592b3e7b 100644
--- a/src/main/java/net/minecraft/world/item/trading/Merchant.java
+++ b/src/main/java/net/minecraft/world/item/trading/Merchant.java
@@ -14,6 +14,7 @@ public interface Merchant {
     void setTradingPlayer(@Nullable Player customer);
 
     @Nullable
+    @org.jetbrains.annotations.Nullable
     Player getTradingPlayer();
 
     MerchantOffers getOffers();
diff --git a/src/main/java/net/minecraft/world/level/BlockGetter.java b/src/main/java/net/minecraft/world/level/BlockGetter.java
index d1eefa6ef3e9abfe7af4d8310aa64465fa2d5463..db926512f612420a1dcd35e017e85ff839f9af5a 100644
--- a/src/main/java/net/minecraft/world/level/BlockGetter.java
+++ b/src/main/java/net/minecraft/world/level/BlockGetter.java
@@ -23,6 +23,7 @@ import net.minecraft.world.phys.shapes.VoxelShape;
 public interface BlockGetter extends LevelHeightAccessor {
 
     @Nullable
+    @org.jetbrains.annotations.Nullable
     BlockEntity getBlockEntity(BlockPos pos);
 
     default <T extends BlockEntity> Optional<T> getBlockEntity(BlockPos pos, BlockEntityType<T> type) {
@@ -33,7 +34,8 @@ public interface BlockGetter extends LevelHeightAccessor {
 
     BlockState getBlockState(BlockPos pos);
     // Paper start - if loaded util
-    @Nullable BlockState getBlockStateIfLoaded(BlockPos blockposition);
+    @Nullable
+    @org.jetbrains.annotations.Nullable BlockState getBlockStateIfLoaded(BlockPos blockposition);
     default @Nullable Material getMaterialIfLoaded(BlockPos blockposition) {
         BlockState type = this.getBlockStateIfLoaded(blockposition);
         return type == null ? null : type.getMaterial();
@@ -43,7 +45,8 @@ public interface BlockGetter extends LevelHeightAccessor {
         BlockState type = this.getBlockStateIfLoaded(blockposition);
         return type == null ? null : type.getBlock();
     }
-    @Nullable FluidState getFluidIfLoaded(BlockPos blockposition);
+    @Nullable
+    @org.jetbrains.annotations.Nullable FluidState getFluidIfLoaded(BlockPos blockposition);
     // Paper end
 
     FluidState getFluidState(BlockPos pos);
diff --git a/src/main/java/net/minecraft/world/level/CollisionGetter.java b/src/main/java/net/minecraft/world/level/CollisionGetter.java
index d7d396ad73866a97cd9f63b34ad8c587f522e713..117a6dabd888a9671b6422272eb419c8b8f88571 100644
--- a/src/main/java/net/minecraft/world/level/CollisionGetter.java
+++ b/src/main/java/net/minecraft/world/level/CollisionGetter.java
@@ -20,6 +20,7 @@ public interface CollisionGetter extends BlockGetter {
     WorldBorder getWorldBorder();
 
     @Nullable
+    @org.jetbrains.annotations.Nullable
     BlockGetter getChunkForCollisions(int chunkX, int chunkZ);
 
     default boolean isUnobstructed(@Nullable Entity except, VoxelShape shape) {
diff --git a/src/main/java/net/minecraft/world/level/EntityGetter.java b/src/main/java/net/minecraft/world/level/EntityGetter.java
index 3b959f42d958bf0f426853aee56753d6c455fcdb..75224df98bbc25c497cb3faf4ce409b51a79dddc 100644
--- a/src/main/java/net/minecraft/world/level/EntityGetter.java
+++ b/src/main/java/net/minecraft/world/level/EntityGetter.java
@@ -88,7 +88,7 @@ public interface EntityGetter {
     }
     // Paper end
     @Nullable
-    default Player getNearestPlayer(double x, double y, double z, double maxDistance, @Nullable Predicate<Entity> targetPredicate) {
+    default @org.jetbrains.annotations.Nullable Player getNearestPlayer(double x, double y, double z, double maxDistance, @Nullable Predicate<Entity> targetPredicate) {
         double d = -1.0D;
         Player player = null;
 
@@ -166,17 +166,17 @@ public interface EntityGetter {
     }
 
     @Nullable
-    default Player getNearestPlayer(TargetingConditions targetPredicate, LivingEntity entity) {
+    default @org.jetbrains.annotations.Nullable Player getNearestPlayer(TargetingConditions targetPredicate, LivingEntity entity) {
         return this.getNearestEntity(this.players(), targetPredicate, entity, entity.getX(), entity.getY(), entity.getZ());
     }
 
     @Nullable
-    default Player getNearestPlayer(TargetingConditions targetPredicate, LivingEntity entity, double x, double y, double z) {
+    default @org.jetbrains.annotations.Nullable Player getNearestPlayer(TargetingConditions targetPredicate, LivingEntity entity, double x, double y, double z) {
         return this.getNearestEntity(this.players(), targetPredicate, entity, x, y, z);
     }
 
     @Nullable
-    default Player getNearestPlayer(TargetingConditions targetPredicate, double x, double y, double z) {
+    default @org.jetbrains.annotations.Nullable Player getNearestPlayer(TargetingConditions targetPredicate, double x, double y, double z) {
         return this.getNearestEntity(this.players(), targetPredicate, (LivingEntity)null, x, y, z);
     }
 
@@ -233,7 +233,7 @@ public interface EntityGetter {
     }
 
     @Nullable
-    default Player getPlayerByUUID(UUID uuid) {
+    default @org.jetbrains.annotations.Nullable Player getPlayerByUUID(UUID uuid) {
         for(int i = 0; i < this.players().size(); ++i) {
             Player player = this.players().get(i);
             if (uuid.equals(player.getUUID())) {
diff --git a/src/main/java/net/minecraft/world/level/Explosion.java b/src/main/java/net/minecraft/world/level/Explosion.java
index f16593a99ca4089151c2247f6028b823614c78e4..d4cbd3acbcad8408048717d44887a2e5796d6971 100644
--- a/src/main/java/net/minecraft/world/level/Explosion.java
+++ b/src/main/java/net/minecraft/world/level/Explosion.java
@@ -538,7 +538,7 @@ public class Explosion {
         }
 
         @Override
-        public boolean equals(Object o) {
+        public boolean equals(@org.jetbrains.annotations.Nullable Object o) {
             if (this == o) return true;
             if (o == null || getClass() != o.getClass()) return false;
 
diff --git a/src/main/java/net/minecraft/world/level/Level.java b/src/main/java/net/minecraft/world/level/Level.java
index 3cbf801b2e5420c0e870f73788deb550e49ad54d..ee5cb41c2bb2f6742fa118002e27edb4e90d0957 100644
--- a/src/main/java/net/minecraft/world/level/Level.java
+++ b/src/main/java/net/minecraft/world/level/Level.java
@@ -483,7 +483,8 @@ public abstract class Level implements LevelAccessor, AutoCloseable {
         return getWorldBorder().isWithinBounds(blockposition) && getChunkIfLoadedImmediately(blockposition.getX() >> 4, blockposition.getZ() >> 4) != null;
     }
 
-    public @Nullable LevelChunk getChunkIfLoaded(int x, int z) { // Overridden in WorldServer for ABI compat which has final
+    public @Nullable
+    @org.jetbrains.annotations.Nullable LevelChunk getChunkIfLoaded(int x, int z) { // Overridden in WorldServer for ABI compat which has final
         return ((ServerLevel) this).getChunkSource().getChunkAtIfLoadedImmediately(x, z);
     }
     public final @Nullable LevelChunk getChunkIfLoaded(BlockPos blockposition) {
@@ -1142,7 +1143,7 @@ public abstract class Level implements LevelAccessor, AutoCloseable {
     }
 
     @Nullable
-    public abstract Entity getEntity(int id);
+    public abstract @org.jetbrains.annotations.Nullable Entity getEntity(int id);
 
     public void blockEntityChanged(BlockPos pos) {
         if (this.hasChunkAt(pos)) {
@@ -1304,7 +1305,7 @@ public abstract class Level implements LevelAccessor, AutoCloseable {
     }
 
     @Nullable
-    public abstract MapItemSavedData getMapData(String id);
+    public abstract @org.jetbrains.annotations.Nullable MapItemSavedData getMapData(String id);
 
     public abstract void setMapData(String id, MapItemSavedData state);
 
diff --git a/src/main/java/net/minecraft/world/level/LevelAccessor.java b/src/main/java/net/minecraft/world/level/LevelAccessor.java
index 73d1adc5ddf0363966eac0c77c8dfbbb20a2b6a3..4f1835494b300ef67b0290030b420210c3779298 100644
--- a/src/main/java/net/minecraft/world/level/LevelAccessor.java
+++ b/src/main/java/net/minecraft/world/level/LevelAccessor.java
@@ -66,6 +66,7 @@ public interface LevelAccessor extends CommonLevelAccessor, LevelTimeAccess {
     DifficultyInstance getCurrentDifficultyAt(BlockPos pos);
 
     @Nullable
+    @org.jetbrains.annotations.Nullable
     MinecraftServer getServer();
 
     default Difficulty getDifficulty() {
diff --git a/src/main/java/net/minecraft/world/level/LevelReader.java b/src/main/java/net/minecraft/world/level/LevelReader.java
index 7fe1b8856bf916796fa6d2a984f0a07a2331e23b..b61229e98699afe101846321bd387414df2f91fb 100644
--- a/src/main/java/net/minecraft/world/level/LevelReader.java
+++ b/src/main/java/net/minecraft/world/level/LevelReader.java
@@ -24,8 +24,10 @@ import net.minecraft.world.level.levelgen.Heightmap;
 import net.minecraft.world.phys.AABB;
 
 public interface LevelReader extends BlockAndTintGetter, CollisionGetter, BiomeManager.NoiseBiomeSource {
-    @Nullable ChunkAccess getChunkIfLoadedImmediately(int x, int z); // Paper - ifLoaded api (we need this since current impl blocks if the chunk is loading)
     @Nullable
+    @org.jetbrains.annotations.Nullable ChunkAccess getChunkIfLoadedImmediately(int x, int z); // Paper - ifLoaded api (we need this since current impl blocks if the chunk is loading)
+    @Nullable
+    @org.jetbrains.annotations.Nullable
     ChunkAccess getChunk(int chunkX, int chunkZ, ChunkStatus leastStatus, boolean create);
 
     /** @deprecated */
@@ -141,7 +143,7 @@ public interface LevelReader extends BlockAndTintGetter, CollisionGetter, BiomeM
 
     @Nullable
     @Override
-    default BlockGetter getChunkForCollisions(int chunkX, int chunkZ) {
+    default @org.jetbrains.annotations.Nullable BlockGetter getChunkForCollisions(int chunkX, int chunkZ) {
         return this.getChunk(chunkX, chunkZ, ChunkStatus.EMPTY, false);
     }
 
diff --git a/src/main/java/net/minecraft/world/level/NaturalSpawner.java b/src/main/java/net/minecraft/world/level/NaturalSpawner.java
index 01b21f520ef1c834b9bafc3de85c1fa4fcf539d6..e1aa5f589a1c55652f7b0e2b7865114bfe48e8c9 100644
--- a/src/main/java/net/minecraft/world/level/NaturalSpawner.java
+++ b/src/main/java/net/minecraft/world/level/NaturalSpawner.java
@@ -48,6 +48,7 @@ import net.minecraft.world.level.material.FluidState;
 import net.minecraft.world.level.pathfinder.PathComputationType;
 import net.minecraft.world.level.storage.LevelData;
 import net.minecraft.world.phys.Vec3;
+import org.jetbrains.annotations.NotNull;
 import org.slf4j.Logger;
 import org.bukkit.craftbukkit.util.CraftSpawnCategory;
 import org.bukkit.entity.SpawnCategory;
@@ -165,7 +166,7 @@ public final class NaturalSpawner {
                 if (inRange != null) {
                     final Object[] backingSet = inRange.getBackingSet();
                     for (int k = 0; k < backingSet.length; k++) {
-                        if (!(backingSet[k] instanceof final net.minecraft.server.level.ServerPlayer player)) {
+                        if (!(backingSet[k] instanceof final net.minecraft.server.level.@NotNull ServerPlayer player)) {
                             continue;
                         }
                         minDiff = Math.min(limit - world.getChunkSource().chunkMap.getMobCountNear(player, enumcreaturetype), minDiff);
diff --git a/src/main/java/net/minecraft/world/level/biome/MobSpawnSettings.java b/src/main/java/net/minecraft/world/level/biome/MobSpawnSettings.java
index 04c35af0431654c2a5c54113f257a0e0a42bff4f..abfa3f4185b5ef6ef1309f2d44a5290bcaaa250c 100644
--- a/src/main/java/net/minecraft/world/level/biome/MobSpawnSettings.java
+++ b/src/main/java/net/minecraft/world/level/biome/MobSpawnSettings.java
@@ -75,7 +75,7 @@ public class MobSpawnSettings {
             }
 
             @Override
-            public MobSpawnSettings.SpawnerData remove(int index) {
+            public MobSpawnSettings.@org.jetbrains.annotations.Nullable SpawnerData remove(int index) {
                 MobSpawnSettings.SpawnerData removed = super.remove(index);
                 if (removed != null) {
                     biomes.remove(removed);
diff --git a/src/main/java/net/minecraft/world/level/block/BaseFireBlock.java b/src/main/java/net/minecraft/world/level/block/BaseFireBlock.java
index 2ca656b1323f38eac419563a8306a9d86eaca29f..720bf115e84f3e5de861561359aff2b025cb98c1 100644
--- a/src/main/java/net/minecraft/world/level/block/BaseFireBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/BaseFireBlock.java
@@ -18,6 +18,8 @@ import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.world.level.portal.PortalShape;
 import net.minecraft.world.phys.shapes.CollisionContext;
 import net.minecraft.world.phys.shapes.VoxelShape;
+import org.jetbrains.annotations.Nullable;
+
 
 public abstract class BaseFireBlock extends Block {
 
@@ -32,7 +34,7 @@ public abstract class BaseFireBlock extends Block {
     }
 
     @Override
-    public BlockState getStateForPlacement(BlockPlaceContext ctx) {
+    public @Nullable BlockState getStateForPlacement(BlockPlaceContext ctx) {
         return BaseFireBlock.getState(ctx.getLevel(), ctx.getClickedPos());
     }
 
diff --git a/src/main/java/net/minecraft/world/level/block/Block.java b/src/main/java/net/minecraft/world/level/block/Block.java
index 7b71073027f4cf79736546500ededdfbb83d968e..346dc2cba5db50ddf261f322552c27953ef6ee23 100644
--- a/src/main/java/net/minecraft/world/level/block/Block.java
+++ b/src/main/java/net/minecraft/world/level/block/Block.java
@@ -428,7 +428,7 @@ public class Block extends BlockBehaviour implements ItemLike {
     public void stepOn(Level world, BlockPos pos, BlockState state, Entity entity) {}
 
     @Nullable
-    public BlockState getStateForPlacement(BlockPlaceContext ctx) {
+    public @org.jetbrains.annotations.Nullable BlockState getStateForPlacement(BlockPlaceContext ctx) {
         return this.defaultBlockState();
     }
 
diff --git a/src/main/java/net/minecraft/world/level/block/ChestBlock.java b/src/main/java/net/minecraft/world/level/block/ChestBlock.java
index c6b57d45383441aa35510e759ce3cb82bc98f305..fa162b7ebbee47fa2ac6153e585cd7f5c3cd33cb 100644
--- a/src/main/java/net/minecraft/world/level/block/ChestBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/ChestBlock.java
@@ -340,7 +340,7 @@ public class ChestBlock extends AbstractChestBlock<ChestBlockEntity> implements
     }
 
     @Override
-    public BlockEntity newBlockEntity(BlockPos pos, BlockState state) {
+    public @org.jetbrains.annotations.Nullable BlockEntity newBlockEntity(BlockPos pos, BlockState state) {
         return new ChestBlockEntity(pos, state);
     }
 
diff --git a/src/main/java/net/minecraft/world/level/block/DiodeBlock.java b/src/main/java/net/minecraft/world/level/block/DiodeBlock.java
index aa4ed127fe463fad1bf7ddadb54e93958ee970c7..70530787e16ff3c1f38979dbb2efca4b988c13c7 100644
--- a/src/main/java/net/minecraft/world/level/block/DiodeBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/DiodeBlock.java
@@ -19,6 +19,8 @@ import net.minecraft.world.phys.shapes.CollisionContext;
 import net.minecraft.world.phys.shapes.VoxelShape;
 import net.minecraft.world.ticks.TickPriority;
 import org.bukkit.craftbukkit.event.CraftEventFactory; // CraftBukkit
+import org.jetbrains.annotations.Nullable;
+
 
 public abstract class DiodeBlock extends HorizontalDirectionalBlock {
 
@@ -160,7 +162,7 @@ public abstract class DiodeBlock extends HorizontalDirectionalBlock {
     }
 
     @Override
-    public BlockState getStateForPlacement(BlockPlaceContext ctx) {
+    public @Nullable BlockState getStateForPlacement(BlockPlaceContext ctx) {
         return (BlockState) this.defaultBlockState().setValue(DiodeBlock.FACING, ctx.getHorizontalDirection().getOpposite());
     }
 
diff --git a/src/main/java/net/minecraft/world/level/block/DispenserBlock.java b/src/main/java/net/minecraft/world/level/block/DispenserBlock.java
index 8f55d0753fa26924235c943595f0d1a06a933a6f..dedefb0defcd3befe65471e8dadad691e56411aa 100644
--- a/src/main/java/net/minecraft/world/level/block/DispenserBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/DispenserBlock.java
@@ -38,6 +38,8 @@ import net.minecraft.world.level.block.state.properties.BooleanProperty;
 import net.minecraft.world.level.block.state.properties.DirectionProperty;
 import net.minecraft.world.level.gameevent.GameEvent;
 import net.minecraft.world.phys.BlockHitResult;
+import org.jetbrains.annotations.Nullable;
+
 
 public class DispenserBlock extends BaseEntityBlock {
 
@@ -125,7 +127,7 @@ public class DispenserBlock extends BaseEntityBlock {
     }
 
     @Override
-    public BlockEntity newBlockEntity(BlockPos pos, BlockState state) {
+    public @Nullable BlockEntity newBlockEntity(BlockPos pos, BlockState state) {
         return new DispenserBlockEntity(pos, state);
     }
 
diff --git a/src/main/java/net/minecraft/world/level/block/DoublePlantBlock.java b/src/main/java/net/minecraft/world/level/block/DoublePlantBlock.java
index e234ae13fe9793db237adb6f6216fa32638cfc4f..e73835e5f34bdc8cb696cd3ab04cf57d15b1e13f 100644
--- a/src/main/java/net/minecraft/world/level/block/DoublePlantBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/DoublePlantBlock.java
@@ -39,7 +39,7 @@ public class DoublePlantBlock extends BushBlock {
 
     @Nullable
     @Override
-    public BlockState getStateForPlacement(BlockPlaceContext ctx) {
+    public @org.jetbrains.annotations.Nullable BlockState getStateForPlacement(BlockPlaceContext ctx) {
         BlockPos blockposition = ctx.getClickedPos();
         Level world = ctx.getLevel();
 
diff --git a/src/main/java/net/minecraft/world/level/block/MultifaceSpreader.java b/src/main/java/net/minecraft/world/level/block/MultifaceSpreader.java
index e3a727a547db104c109fcaf4224e36fce02096e5..c8e304b8131563ba8d9b103f537abf910c049d03 100644
--- a/src/main/java/net/minecraft/world/level/block/MultifaceSpreader.java
+++ b/src/main/java/net/minecraft/world/level/block/MultifaceSpreader.java
@@ -128,6 +128,7 @@ public class MultifaceSpreader {
     public interface SpreadConfig {
 
         @Nullable
+        @org.jetbrains.annotations.Nullable
         BlockState getStateForPlacement(BlockState state, BlockGetter world, BlockPos pos, Direction direction);
 
         boolean canSpreadInto(BlockGetter world, BlockPos pos, MultifaceSpreader.SpreadPos growPos);
diff --git a/src/main/java/net/minecraft/world/level/block/entity/BaseContainerBlockEntity.java b/src/main/java/net/minecraft/world/level/block/entity/BaseContainerBlockEntity.java
index 3d37c9a57c01c5035770e20873a801bf2f591cc5..ef3cb24b75aa196b5e3f30e88e3e687714ecf310 100644
--- a/src/main/java/net/minecraft/world/level/block/entity/BaseContainerBlockEntity.java
+++ b/src/main/java/net/minecraft/world/level/block/entity/BaseContainerBlockEntity.java
@@ -111,7 +111,7 @@ public abstract class BaseContainerBlockEntity extends BlockEntity implements Co
 
     @Nullable
     @Override
-    public AbstractContainerMenu createMenu(int syncId, Inventory inv, Player player) {
+    public @org.jetbrains.annotations.Nullable AbstractContainerMenu createMenu(int syncId, Inventory inv, Player player) {
         return this.canOpen(player) ? this.createMenu(syncId, inv) : null;
     }
 
diff --git a/src/main/java/net/minecraft/world/level/block/entity/BlockEntity.java b/src/main/java/net/minecraft/world/level/block/entity/BlockEntity.java
index 58986bc0677c5ea1ad54d7d6d4efa5c2ea233aea..2305a643078b5e652b815a7d39a6505f8ce91900 100644
--- a/src/main/java/net/minecraft/world/level/block/entity/BlockEntity.java
+++ b/src/main/java/net/minecraft/world/level/block/entity/BlockEntity.java
@@ -186,7 +186,7 @@ public abstract class BlockEntity {
     }
 
     @Nullable
-    public Packet<ClientGamePacketListener> getUpdatePacket() {
+    public @org.jetbrains.annotations.Nullable Packet<ClientGamePacketListener> getUpdatePacket() {
         return null;
     }
 
diff --git a/src/main/java/net/minecraft/world/level/block/state/BlockBehaviour.java b/src/main/java/net/minecraft/world/level/block/state/BlockBehaviour.java
index 25ce337ed266be7bafeacd9eb6f53a9474775fc5..469c2bd12c7f132bea645b6bf0a9f7026d8a7dc8 100644
--- a/src/main/java/net/minecraft/world/level/block/state/BlockBehaviour.java
+++ b/src/main/java/net/minecraft/world/level/block/state/BlockBehaviour.java
@@ -299,7 +299,7 @@ public abstract class BlockBehaviour implements FeatureElement {
     /** @deprecated */
     @Nullable
     @Deprecated
-    public MenuProvider getMenuProvider(BlockState state, Level world, BlockPos pos) {
+    public @org.jetbrains.annotations.Nullable MenuProvider getMenuProvider(BlockState state, Level world, BlockPos pos) {
         return null;
     }
 
diff --git a/src/main/java/net/minecraft/world/level/chunk/ChunkAccess.java b/src/main/java/net/minecraft/world/level/chunk/ChunkAccess.java
index e254b2d04e4fc1dc76c26f61ea38aeb27755143f..0a39a19994c64f922d92a41ab5497a31a84dcc5e 100644
--- a/src/main/java/net/minecraft/world/level/chunk/ChunkAccess.java
+++ b/src/main/java/net/minecraft/world/level/chunk/ChunkAccess.java
@@ -164,7 +164,7 @@ public abstract class ChunkAccess implements BlockGetter, BiomeManager.NoiseBiom
 
     public abstract BlockState getBlockState(final int x, final int y, final int z); // Paper
     @Nullable
-    public abstract BlockState setBlockState(BlockPos pos, BlockState state, boolean moved);
+    public abstract @org.jetbrains.annotations.Nullable BlockState setBlockState(BlockPos pos, BlockState state, boolean moved);
 
     public abstract void setBlockEntity(BlockEntity blockEntity);
 
@@ -245,7 +245,7 @@ public abstract class ChunkAccess implements BlockGetter, BiomeManager.NoiseBiom
 
     @Nullable
     @Override
-    public StructureStart getStartForStructure(Structure structure) {
+    public @org.jetbrains.annotations.Nullable StructureStart getStartForStructure(Structure structure) {
         return (StructureStart) this.structureStarts.get(structure);
     }
 
@@ -338,12 +338,12 @@ public abstract class ChunkAccess implements BlockGetter, BiomeManager.NoiseBiom
     }
 
     @Nullable
-    public CompoundTag getBlockEntityNbt(BlockPos pos) {
+    public @org.jetbrains.annotations.Nullable CompoundTag getBlockEntityNbt(BlockPos pos) {
         return (CompoundTag) this.pendingBlockEntities.get(pos);
     }
 
     @Nullable
-    public abstract CompoundTag getBlockEntityNbtForSaving(BlockPos pos);
+    public abstract @org.jetbrains.annotations.Nullable CompoundTag getBlockEntityNbtForSaving(BlockPos pos);
 
     public abstract Stream<BlockPos> getLights();
 
@@ -362,7 +362,7 @@ public abstract class ChunkAccess implements BlockGetter, BiomeManager.NoiseBiom
     }
 
     @Nullable
-    public BlendingData getBlendingData() {
+    public @org.jetbrains.annotations.Nullable BlendingData getBlendingData() {
         return this.blendingData;
     }
 
@@ -487,7 +487,7 @@ public abstract class ChunkAccess implements BlockGetter, BiomeManager.NoiseBiom
     }
 
     @Nullable
-    public BelowZeroRetrogen getBelowZeroRetrogen() {
+    public @org.jetbrains.annotations.Nullable BelowZeroRetrogen getBelowZeroRetrogen() {
         return null;
     }
 
diff --git a/src/main/java/net/minecraft/world/level/chunk/LevelChunk.java b/src/main/java/net/minecraft/world/level/chunk/LevelChunk.java
index 28e4b302284f955a73e75d0f4276d55fb51826f5..b8af851d4289e6b6260e8982b4b8b0db12150a2a 100644
--- a/src/main/java/net/minecraft/world/level/chunk/LevelChunk.java
+++ b/src/main/java/net/minecraft/world/level/chunk/LevelChunk.java
@@ -548,7 +548,7 @@ public class LevelChunk extends ChunkAccess {
     // CraftBukkit start
     @Nullable
     @Override
-    public BlockState setBlockState(BlockPos pos, BlockState state, boolean moved) {
+    public @org.jetbrains.annotations.Nullable BlockState setBlockState(BlockPos pos, BlockState state, boolean moved) {
         return this.setBlockState(pos, state, moved, true);
     }
 
@@ -639,7 +639,7 @@ public class LevelChunk extends ChunkAccess {
 
     @Deprecated @Nullable public final BlockEntity getTileEntityImmediately(BlockPos pos) { return this.getBlockEntity(pos, EntityCreationType.IMMEDIATE); } // Paper - OBFHELPER
     @Nullable
-    public BlockEntity getBlockEntity(BlockPos pos, LevelChunk.EntityCreationType creationType) {
+    public @org.jetbrains.annotations.Nullable BlockEntity getBlockEntity(BlockPos pos, LevelChunk.EntityCreationType creationType) {
         // CraftBukkit start
         BlockEntity tileentity = level.capturedTileEntities.get(pos);
         if (tileentity == null) {
diff --git a/src/main/java/net/minecraft/world/level/chunk/ProtoChunk.java b/src/main/java/net/minecraft/world/level/chunk/ProtoChunk.java
index c24b4c6a560aab2df07783b3481981deb8571a50..1675fd4dbb2046b6dca806b3cd2c78221c88d940 100644
--- a/src/main/java/net/minecraft/world/level/chunk/ProtoChunk.java
+++ b/src/main/java/net/minecraft/world/level/chunk/ProtoChunk.java
@@ -143,7 +143,7 @@ public class ProtoChunk extends ChunkAccess {
 
     @Nullable
     @Override
-    public BlockState setBlockState(BlockPos pos, BlockState state, boolean moved) {
+    public @org.jetbrains.annotations.Nullable BlockState setBlockState(BlockPos pos, BlockState state, boolean moved) {
         int i = pos.getX();
         int j = pos.getY();
         int k = pos.getZ();
@@ -198,7 +198,7 @@ public class ProtoChunk extends ChunkAccess {
 
     @Nullable
     @Override
-    public BlockEntity getBlockEntity(BlockPos pos) {
+    public @org.jetbrains.annotations.Nullable BlockEntity getBlockEntity(BlockPos pos) {
         return this.blockEntities.get(pos);
     }
 
@@ -296,7 +296,7 @@ public class ProtoChunk extends ChunkAccess {
 
     @Nullable
     @Override
-    public CompoundTag getBlockEntityNbtForSaving(BlockPos pos) {
+    public @org.jetbrains.annotations.Nullable CompoundTag getBlockEntityNbtForSaving(BlockPos pos) {
         BlockEntity blockEntity = this.getBlockEntity(pos);
         return blockEntity != null ? blockEntity.saveWithFullMetadata() : this.pendingBlockEntities.get(pos);
     }
@@ -308,7 +308,7 @@ public class ProtoChunk extends ChunkAccess {
     }
 
     @Nullable
-    public CarvingMask getCarvingMask(GenerationStep.Carving step) {
+    public @org.jetbrains.annotations.Nullable CarvingMask getCarvingMask(GenerationStep.Carving step) {
         return this.carvingMasks.get(step);
     }
 
diff --git a/src/main/java/net/minecraft/world/level/chunk/storage/ChunkStorage.java b/src/main/java/net/minecraft/world/level/chunk/storage/ChunkStorage.java
index 5a425be023d77f0370d102dfb52427147849ac1a..cb9eabe97f30da8bb1ff9fec729eb5416603b877 100644
--- a/src/main/java/net/minecraft/world/level/chunk/storage/ChunkStorage.java
+++ b/src/main/java/net/minecraft/world/level/chunk/storage/ChunkStorage.java
@@ -172,7 +172,7 @@ public class ChunkStorage implements AutoCloseable {
         }
     }
     @Nullable
-    public CompoundTag readSync(ChunkPos chunkPos) throws IOException {
+    public @org.jetbrains.annotations.Nullable CompoundTag readSync(ChunkPos chunkPos) throws IOException {
         return this.regionFileCache.read(chunkPos);
     }
     // Paper end - async chunk io
diff --git a/src/main/java/net/minecraft/world/level/chunk/storage/RegionFileStorage.java b/src/main/java/net/minecraft/world/level/chunk/storage/RegionFileStorage.java
index bd502ca721de0cab438d995efa00ad0554c0d2fe..2961820f3c72abb5fc8f75135be3cc8114f15cea 100644
--- a/src/main/java/net/minecraft/world/level/chunk/storage/RegionFileStorage.java
+++ b/src/main/java/net/minecraft/world/level/chunk/storage/RegionFileStorage.java
@@ -177,7 +177,7 @@ public class RegionFileStorage implements AutoCloseable {
     // Paper End
 
     @Nullable
-    public CompoundTag read(ChunkPos pos) throws IOException {
+    public @org.jetbrains.annotations.Nullable CompoundTag read(ChunkPos pos) throws IOException {
         // CraftBukkit start - SPIGOT-5680: There's no good reason to preemptively create files on read, save that for writing
         RegionFile regionfile = this.getRegionFile(pos, true, true); // Paper
         if (regionfile == null) {
diff --git a/src/main/java/net/minecraft/world/level/chunk/storage/SectionStorage.java b/src/main/java/net/minecraft/world/level/chunk/storage/SectionStorage.java
index d783072bc964e45c308197e6f79874eb4a09f871..c89353b5e6eb0d4292c6afaebaf60492cf3c6e4c 100644
--- a/src/main/java/net/minecraft/world/level/chunk/storage/SectionStorage.java
+++ b/src/main/java/net/minecraft/world/level/chunk/storage/SectionStorage.java
@@ -71,7 +71,7 @@ public class SectionStorage<R> extends RegionFileStorage implements AutoCloseabl
     }
 
     @Nullable
-    public Optional<R> get(long pos) { // Paper - public
+    public @org.jetbrains.annotations.Nullable Optional<R> get(long pos) { // Paper - public
         return this.storage.get(pos);
     }
 
diff --git a/src/main/java/net/minecraft/world/level/levelgen/structure/templatesystem/StructureTemplate.java b/src/main/java/net/minecraft/world/level/levelgen/structure/templatesystem/StructureTemplate.java
index 1d809de3db6c6de64f938f66d81356c5b58967f8..5fe01819e39af1942857f4a1d35d6d70783c440f 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/structure/templatesystem/StructureTemplate.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/structure/templatesystem/StructureTemplate.java
@@ -54,6 +54,7 @@ import net.minecraft.world.phys.shapes.BitSetDiscreteVoxelShape;
 import net.minecraft.world.phys.shapes.DiscreteVoxelShape;
 import org.bukkit.craftbukkit.persistence.CraftPersistentDataContainer;
 import org.bukkit.craftbukkit.persistence.CraftPersistentDataTypeRegistry;
+import org.jetbrains.annotations.NotNull;
 // CraftBukkit end
 
 public class StructureTemplate {
@@ -899,7 +900,7 @@ public class StructureTemplate {
             return iblockdata == null ? SimplePalette.DEFAULT_BLOCK_STATE : iblockdata; // CraftBukkit - decompile error
         }
 
-        public Iterator<BlockState> iterator() {
+        public @NotNull Iterator<BlockState> iterator() {
             return this.ids.iterator();
         }
 
diff --git a/src/main/java/net/minecraft/world/level/pathfinder/WalkNodeEvaluator.java b/src/main/java/net/minecraft/world/level/pathfinder/WalkNodeEvaluator.java
index 894881018c659d874f28f5744f0b8247cfecb1c1..bf0b768f473acee427fb272ec8efdd8d4a86755c 100644
--- a/src/main/java/net/minecraft/world/level/pathfinder/WalkNodeEvaluator.java
+++ b/src/main/java/net/minecraft/world/level/pathfinder/WalkNodeEvaluator.java
@@ -51,7 +51,7 @@ public class WalkNodeEvaluator extends NodeEvaluator {
     }
 
     @Override
-    public Node getStart() {
+    public @org.jetbrains.annotations.Nullable Node getStart() {
         BlockPos.MutableBlockPos mutableBlockPos = new BlockPos.MutableBlockPos();
         int i = this.mob.getBlockY();
         BlockState blockState = this.level.getBlockState(mutableBlockPos.set(this.mob.getX(), (double)i, this.mob.getZ()));
@@ -108,7 +108,7 @@ public class WalkNodeEvaluator extends NodeEvaluator {
     }
 
     @Override
-    public Target getGoal(double x, double y, double z) {
+    public @org.jetbrains.annotations.Nullable Target getGoal(double x, double y, double z) {
         return this.getTargetFromNode(this.getNode(Mth.floor(x), Mth.floor(y), Mth.floor(z)));
     }
 
diff --git a/src/main/java/net/minecraft/world/level/storage/LevelStorageSource.java b/src/main/java/net/minecraft/world/level/storage/LevelStorageSource.java
index 5049e969e06f4cc1826378249548064042c28410..7210875d79f9d2a2c13405e0003f91eea1ad0565 100644
--- a/src/main/java/net/minecraft/world/level/storage/LevelStorageSource.java
+++ b/src/main/java/net/minecraft/world/level/storage/LevelStorageSource.java
@@ -67,6 +67,7 @@ import net.minecraft.world.level.dimension.LevelStem;
 import net.minecraft.world.level.levelgen.WorldDimensions;
 import net.minecraft.world.level.levelgen.WorldGenSettings;
 import org.slf4j.Logger;
+import org.jetbrains.annotations.NotNull;
 
 public class LevelStorageSource {
 
@@ -358,7 +359,7 @@ public class LevelStorageSource {
             return this.levels.isEmpty();
         }
 
-        public Iterator<LevelStorageSource.LevelDirectory> iterator() {
+        public @NotNull Iterator<LevelStorageSource.LevelDirectory> iterator() {
             return this.levels.iterator();
         }
     }
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftArt.java b/src/main/java/org/bukkit/craftbukkit/CraftArt.java
index 87917765e3c6111bff9b86394b850655d4cad9ee..35db8b99e04b8fe9df8dc405a8bb05dbbf876db4 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftArt.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftArt.java
@@ -8,9 +8,11 @@ import net.minecraft.core.registries.BuiltInRegistries;
 import net.minecraft.resources.ResourceKey;
 import net.minecraft.world.entity.decoration.PaintingVariant;
 import org.bukkit.Art;
+import org.jetbrains.annotations.NotNull;
+
 
 public class CraftArt {
-    private static final BiMap<Holder<PaintingVariant>, Art> artwork;
+    private static final @NotNull BiMap<Holder<PaintingVariant>, Art> artwork;
 
     static {
         ImmutableBiMap.Builder<Holder<PaintingVariant>, Art> artworkBuilder = ImmutableBiMap.builder();
@@ -21,13 +23,13 @@ public class CraftArt {
         artwork = artworkBuilder.build();
     }
 
-    public static Art NotchToBukkit(Holder<PaintingVariant> art) {
+    public static @NotNull Art NotchToBukkit(Holder<PaintingVariant> art) {
         Art bukkit = CraftArt.artwork.get(art);
         Preconditions.checkArgument(bukkit != null);
         return bukkit;
     }
 
-    public static Holder<PaintingVariant> BukkitToNotch(Art art) {
+    public static @NotNull Holder<PaintingVariant> BukkitToNotch(Art art) {
         Holder<PaintingVariant> nms = CraftArt.artwork.inverse().get(art);
         Preconditions.checkArgument(nms != null);
         return nms;
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftChunk.java b/src/main/java/org/bukkit/craftbukkit/CraftChunk.java
index f7e19bb7d2ff8f8aaf061cec16462913d77c10d5..c4c5087bb43703a0d4bf877122fd82b4d4448f09 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftChunk.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftChunk.java
@@ -49,6 +49,9 @@ import org.bukkit.craftbukkit.block.data.CraftBlockData;
 import org.bukkit.entity.Entity;
 import org.bukkit.persistence.PersistentDataContainer;
 import org.bukkit.plugin.Plugin;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 public class CraftChunk implements Chunk {
     private WeakReference<net.minecraft.world.level.chunk.LevelChunk> weakChunk;
@@ -74,15 +77,15 @@ public class CraftChunk implements Chunk {
     }
 
     @Override
-    public World getWorld() {
+    public @NotNull World getWorld() {
         return this.worldServer.getWorld();
     }
 
-    public CraftWorld getCraftWorld() {
+    public @NotNull CraftWorld getCraftWorld() {
         return (CraftWorld) this.getWorld();
     }
 
-    public net.minecraft.world.level.chunk.LevelChunk getHandle() {
+    public net.minecraft.world.level.chunk.@NotNull LevelChunk getHandle() {
         net.minecraft.world.level.chunk.LevelChunk c = this.weakChunk.get();
 
         if (c == null) {
@@ -109,12 +112,12 @@ public class CraftChunk implements Chunk {
     }
 
     @Override
-    public String toString() {
+    public @NotNull String toString() {
         return "CraftChunk{" + "x=" + this.getX() + "z=" + this.getZ() + '}';
     }
 
     @Override
-    public Block getBlock(int x, int y, int z) {
+    public @NotNull Block getBlock(int x, int y, int z) {
         CraftChunk.validateChunkCoordinates(this.getHandle().getMinBuildHeight(), this.getHandle().getMaxBuildHeight(), x, y, z);
 
         return new CraftBlock(this.worldServer, new BlockPos((this.x << 4) | x, y, (this.z << 4) | z));
@@ -126,7 +129,7 @@ public class CraftChunk implements Chunk {
     }
 
     @Override
-    public Entity[] getEntities() {
+    public Entity @NotNull [] getEntities() {
         if (!this.isLoaded()) {
             this.getWorld().getChunkAt(x, z); // Transient load for this tick
         }
@@ -141,7 +144,7 @@ public class CraftChunk implements Chunk {
     }
 
     @Override
-    public BlockState[] getTileEntities(boolean useSnapshot) {
+    public BlockState @NotNull [] getTileEntities(boolean useSnapshot) {
         // Paper end
         if (!this.isLoaded()) {
             this.getWorld().getChunkAt(x, z); // Transient load for this tick
@@ -165,7 +168,7 @@ public class CraftChunk implements Chunk {
     }
 
     @Override
-    public Collection<BlockState> getTileEntities(Predicate<Block> blockPredicate, boolean useSnapshot) {
+    public @NotNull Collection<BlockState> getTileEntities(@NotNull Predicate<Block> blockPredicate, boolean useSnapshot) {
         Preconditions.checkNotNull(blockPredicate, "blockPredicate");
         if (!isLoaded()) {
             getWorld().getChunkAt(x, z); // Transient load for this tick
@@ -227,17 +230,17 @@ public class CraftChunk implements Chunk {
     }
 
     @Override
-    public boolean addPluginChunkTicket(Plugin plugin) {
+    public boolean addPluginChunkTicket(@NotNull Plugin plugin) {
         return this.getWorld().addPluginChunkTicket(this.getX(), this.getZ(), plugin);
     }
 
     @Override
-    public boolean removePluginChunkTicket(Plugin plugin) {
+    public boolean removePluginChunkTicket(@NotNull Plugin plugin) {
         return this.getWorld().removePluginChunkTicket(this.getX(), this.getZ(), plugin);
     }
 
     @Override
-    public Collection<Plugin> getPluginChunkTickets() {
+    public @NotNull Collection<Plugin> getPluginChunkTickets() {
         return this.getWorld().getPluginChunkTickets(this.getX(), this.getZ());
     }
 
@@ -254,7 +257,7 @@ public class CraftChunk implements Chunk {
     }
 
     @Override
-    public boolean contains(BlockData block) {
+    public boolean contains(@Nullable BlockData block) {
         Preconditions.checkArgument(block != null, "Block cannot be null");
 
         Predicate<net.minecraft.world.level.block.state.BlockState> nms = Predicates.equalTo(((CraftBlockData) block).getState());
@@ -268,12 +271,12 @@ public class CraftChunk implements Chunk {
     }
 
     @Override
-    public ChunkSnapshot getChunkSnapshot() {
+    public @NotNull ChunkSnapshot getChunkSnapshot() {
         return this.getChunkSnapshot(true, false, false);
     }
 
     @Override
-    public ChunkSnapshot getChunkSnapshot(boolean includeMaxBlockY, boolean includeBiome, boolean includeBiomeTempRain) {
+    public @NotNull ChunkSnapshot getChunkSnapshot(boolean includeMaxBlockY, boolean includeBiome, boolean includeBiomeTempRain) {
         net.minecraft.world.level.chunk.LevelChunk chunk = this.getHandle();
 
         LevelChunkSection[] cs = chunk.getSections();
@@ -329,11 +332,11 @@ public class CraftChunk implements Chunk {
     }
 
     @Override
-    public PersistentDataContainer getPersistentDataContainer() {
+    public @NotNull PersistentDataContainer getPersistentDataContainer() {
         return this.getHandle().persistentDataContainer;
     }
 
-    public static ChunkSnapshot getEmptyChunkSnapshot(int x, int z, CraftWorld world, boolean includeBiome, boolean includeBiomeTempRain) {
+    public static @NotNull ChunkSnapshot getEmptyChunkSnapshot(int x, int z, @NotNull CraftWorld world, boolean includeBiome, boolean includeBiomeTempRain) {
         ChunkAccess actual = world.getHandle().getChunk(x, z, (includeBiome || includeBiomeTempRain) ? ChunkStatus.BIOMES : ChunkStatus.EMPTY);
 
         /* Fill with empty data */
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftChunkSnapshot.java b/src/main/java/org/bukkit/craftbukkit/CraftChunkSnapshot.java
index f39cf8e90d955c83471363e7dc5097c04894785b..75549f7b3e0fb4e28c680b3e29c737be3d2e4ec2 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftChunkSnapshot.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftChunkSnapshot.java
@@ -17,6 +17,9 @@ import org.bukkit.block.data.BlockData;
 import org.bukkit.craftbukkit.block.CraftBlock;
 import org.bukkit.craftbukkit.block.data.CraftBlockData;
 import org.bukkit.craftbukkit.util.CraftMagicNumbers;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 /**
  * Represents a static, thread-safe snapshot of chunk of blocks
@@ -62,12 +65,12 @@ public class CraftChunkSnapshot implements ChunkSnapshot {
     }
 
     @Override
-    public String getWorldName() {
+    public @NotNull String getWorldName() {
         return this.worldname;
     }
 
     @Override
-    public boolean contains(BlockData block) {
+    public boolean contains(@Nullable BlockData block) {
         Preconditions.checkArgument(block != null, "Block cannot be null");
 
         Predicate<BlockState> nms = Predicates.equalTo(((CraftBlockData) block).getState());
@@ -81,14 +84,14 @@ public class CraftChunkSnapshot implements ChunkSnapshot {
     }
 
     @Override
-    public Material getBlockType(int x, int y, int z) {
+    public @NotNull Material getBlockType(int x, int y, int z) {
         this.validateChunkCoordinates(x, y, z);
 
         return this.blockids[this.getSectionIndex(y)].get(x, y & 0xF, z).getBukkitMaterial(); // Paper - optimise getType calls
     }
 
     @Override
-    public final BlockData getBlockData(int x, int y, int z) {
+    public final @NotNull BlockData getBlockData(int x, int y, int z) {
         this.validateChunkCoordinates(x, y, z);
 
         return CraftBlockData.fromData(this.blockids[this.getSectionIndex(y)].get(x, y & 0xF, z));
@@ -126,12 +129,12 @@ public class CraftChunkSnapshot implements ChunkSnapshot {
     }
 
     @Override
-    public final Biome getBiome(int x, int z) {
+    public final @NotNull Biome getBiome(int x, int z) {
         return this.getBiome(x, 0, z);
     }
 
     @Override
-    public final Biome getBiome(int x, int y, int z) {
+    public final @NotNull Biome getBiome(int x, int y, int z) {
         Preconditions.checkState(this.biome != null, "ChunkSnapshot created without biome. Please call getSnapshot with includeBiome=true");
         this.validateChunkCoordinates(x, y, z);
 
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftEffect.java b/src/main/java/org/bukkit/craftbukkit/CraftEffect.java
index da975e636061bc30b0b5bb23a8a27af585250c2d..13a97074afe9dd03ebf8ba4c9000712fda9a9efe 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftEffect.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftEffect.java
@@ -10,9 +10,11 @@ import org.bukkit.Material;
 import org.bukkit.block.BlockFace;
 import org.bukkit.craftbukkit.util.CraftMagicNumbers;
 import org.bukkit.potion.Potion;
+import org.jetbrains.annotations.NotNull;
+
 
 public class CraftEffect {
-    public static <T> int getDataValue(Effect effect, T data) {
+    public static <T> int getDataValue(@NotNull Effect effect, @NotNull T data) {
         int datavalue;
         switch (effect) {
         case VILLAGER_PLANT_GROW:
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftEquipmentSlot.java b/src/main/java/org/bukkit/craftbukkit/CraftEquipmentSlot.java
index 402a238cf502003a232bb95473bd13e59e067fab..51b09196e72b32d9c74ee1cced5bb2b44384ae0d 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftEquipmentSlot.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftEquipmentSlot.java
@@ -2,6 +2,8 @@ package org.bukkit.craftbukkit;
 
 import net.minecraft.world.InteractionHand;
 import org.bukkit.inventory.EquipmentSlot;
+import org.jetbrains.annotations.NotNull;
+
 
 public class CraftEquipmentSlot {
 
@@ -17,24 +19,24 @@ public class CraftEquipmentSlot {
         set(EquipmentSlot.HEAD, net.minecraft.world.entity.EquipmentSlot.HEAD);
     }
 
-    private static void set(EquipmentSlot type, net.minecraft.world.entity.EquipmentSlot value) {
+    private static void set(@NotNull EquipmentSlot type, net.minecraft.world.entity.@NotNull EquipmentSlot value) {
         CraftEquipmentSlot.slots[type.ordinal()] = value;
         CraftEquipmentSlot.enums[value.ordinal()] = type;
     }
 
-    public static EquipmentSlot getSlot(net.minecraft.world.entity.EquipmentSlot nms) {
+    public static EquipmentSlot getSlot(net.minecraft.world.entity.@NotNull EquipmentSlot nms) {
         return CraftEquipmentSlot.enums[nms.ordinal()];
     }
 
-    public static net.minecraft.world.entity.EquipmentSlot getNMS(EquipmentSlot slot) {
+    public static net.minecraft.world.entity.EquipmentSlot getNMS(@NotNull EquipmentSlot slot) {
         return CraftEquipmentSlot.slots[slot.ordinal()];
     }
 
-    public static EquipmentSlot getHand(InteractionHand enumhand) {
+    public static @NotNull EquipmentSlot getHand(InteractionHand enumhand) {
         return (enumhand == InteractionHand.MAIN_HAND) ? EquipmentSlot.HAND : EquipmentSlot.OFF_HAND;
     }
 
-    public static InteractionHand getHand(EquipmentSlot hand) {
+    public static @NotNull InteractionHand getHand(EquipmentSlot hand) {
         if (hand == EquipmentSlot.HAND) {
             return InteractionHand.MAIN_HAND;
         } else if (hand == EquipmentSlot.OFF_HAND) {
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftFluidCollisionMode.java b/src/main/java/org/bukkit/craftbukkit/CraftFluidCollisionMode.java
index 2178d65faedeb5aec2a82d1ae76161e49f3537b2..1c1acd5253e4a4c7c9c8680143261d735d8396fc 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftFluidCollisionMode.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftFluidCollisionMode.java
@@ -2,12 +2,14 @@ package org.bukkit.craftbukkit;
 
 import net.minecraft.world.level.ClipContext.Fluid;
 import org.bukkit.FluidCollisionMode;
+import org.jetbrains.annotations.Nullable;
+
 
 public final class CraftFluidCollisionMode {
 
     private CraftFluidCollisionMode() {}
 
-    public static Fluid toNMS(FluidCollisionMode fluidCollisionMode) {
+    public static Fluid toNMS(@Nullable FluidCollisionMode fluidCollisionMode) {
         if (fluidCollisionMode == null) return null;
 
         switch (fluidCollisionMode) {
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftHeightMap.java b/src/main/java/org/bukkit/craftbukkit/CraftHeightMap.java
index 8032f40212bda0a7372153241b2339df3ff2b7bb..897faaa905d4bb6f2cccf644be5b13cce7dd81cb 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftHeightMap.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftHeightMap.java
@@ -1,13 +1,15 @@
 package org.bukkit.craftbukkit;
 
 import org.bukkit.HeightMap;
+import org.jetbrains.annotations.NotNull;
+
 
 public final class CraftHeightMap {
 
     private CraftHeightMap() {
     }
 
-    public static net.minecraft.world.level.levelgen.Heightmap.Types toNMS(HeightMap bukkitHeightMap) {
+    public static net.minecraft.world.level.levelgen.Heightmap.@NotNull Types toNMS(@NotNull HeightMap bukkitHeightMap) {
         switch (bukkitHeightMap) {
             case MOTION_BLOCKING_NO_LEAVES:
                 return net.minecraft.world.level.levelgen.Heightmap.Types.MOTION_BLOCKING_NO_LEAVES;
@@ -26,7 +28,7 @@ public final class CraftHeightMap {
         }
     }
 
-    public static HeightMap fromNMS(net.minecraft.world.level.levelgen.Heightmap.Types nmsHeightMapType) {
+    public static @NotNull HeightMap fromNMS(net.minecraft.world.level.levelgen.Heightmap.@NotNull Types nmsHeightMapType) {
         switch (nmsHeightMapType) {
             case WORLD_SURFACE_WG:
                 return HeightMap.WORLD_SURFACE_WG;
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftIpBanEntry.java b/src/main/java/org/bukkit/craftbukkit/CraftIpBanEntry.java
index 75293ec7657cb6fe8f1794cf112a17f484c0177a..72fc39e9b2889a53f5666efc448395eeae6f8c4c 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftIpBanEntry.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftIpBanEntry.java
@@ -6,16 +6,19 @@ import java.util.logging.Level;
 import net.minecraft.server.players.IpBanList;
 import net.minecraft.server.players.IpBanListEntry;
 import org.bukkit.Bukkit;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 public final class CraftIpBanEntry implements org.bukkit.BanEntry {
     private final IpBanList list;
     private final String target;
     private Date created;
     private String source;
-    private Date expiration;
+    private @Nullable Date expiration;
     private String reason;
 
-    public CraftIpBanEntry(String target, IpBanListEntry entry, IpBanList list) {
+    public CraftIpBanEntry(String target, @NotNull IpBanListEntry entry, IpBanList list) {
         this.list = list;
         this.target = target;
         this.created = entry.getCreated() != null ? new Date(entry.getCreated().getTime()) : null;
@@ -25,12 +28,12 @@ public final class CraftIpBanEntry implements org.bukkit.BanEntry {
     }
 
     @Override
-    public String getTarget() {
+    public @NotNull String getTarget() {
         return this.target;
     }
 
     @Override
-    public Date getCreated() {
+    public @Nullable Date getCreated() {
         return this.created == null ? null : (Date) this.created.clone();
     }
 
@@ -40,7 +43,7 @@ public final class CraftIpBanEntry implements org.bukkit.BanEntry {
     }
 
     @Override
-    public String getSource() {
+    public @NotNull String getSource() {
         return this.source;
     }
 
@@ -50,12 +53,12 @@ public final class CraftIpBanEntry implements org.bukkit.BanEntry {
     }
 
     @Override
-    public Date getExpiration() {
+    public @Nullable Date getExpiration() {
         return this.expiration == null ? null : (Date) this.expiration.clone();
     }
 
     @Override
-    public void setExpiration(Date expiration) {
+    public void setExpiration(@Nullable Date expiration) {
         if (expiration != null && expiration.getTime() == new Date(0, 0, 0, 0, 0, 0).getTime()) {
             expiration = null; // Forces "forever"
         }
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftIpBanList.java b/src/main/java/org/bukkit/craftbukkit/CraftIpBanList.java
index 61cb647b2aa590303402e6652bd37b5bca0e0b1d..2e40d5d5190bdc410918205688920968983bea22 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftIpBanList.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftIpBanList.java
@@ -11,6 +11,8 @@ import net.minecraft.server.players.IpBanListEntry;
 import org.apache.commons.lang.StringUtils;
 import org.apache.commons.lang.Validate;
 import org.bukkit.Bukkit;
+import org.jetbrains.annotations.NotNull;
+
 
 public class CraftIpBanList implements org.bukkit.BanList {
     private final IpBanList list;
@@ -20,7 +22,7 @@ public class CraftIpBanList implements org.bukkit.BanList {
     }
 
     @Override
-    public org.bukkit.BanEntry getBanEntry(String target) {
+    public org.bukkit.BanEntry getBanEntry(@NotNull String target) {
         Validate.notNull(target, "Target cannot be null");
 
         IpBanListEntry entry = (IpBanListEntry) this.list.get(target);
@@ -32,7 +34,7 @@ public class CraftIpBanList implements org.bukkit.BanList {
     }
 
     @Override
-    public org.bukkit.BanEntry addBan(String target, String reason, Date expires, String source) {
+    public org.bukkit.BanEntry addBan(@NotNull String target, String reason, Date expires, String source) {
         Validate.notNull(target, "Ban target cannot be null");
 
         IpBanListEntry entry = new IpBanListEntry(target, new Date(),
@@ -51,7 +53,7 @@ public class CraftIpBanList implements org.bukkit.BanList {
     }
 
     @Override
-    public Set<org.bukkit.BanEntry> getBanEntries() {
+    public @NotNull Set<org.bukkit.BanEntry> getBanEntries() {
         ImmutableSet.Builder<org.bukkit.BanEntry> builder = ImmutableSet.builder();
         for (String target : this.list.getUserList()) {
             builder.add(new CraftIpBanEntry(target, (IpBanListEntry) this.list.get(target), this.list));
@@ -61,14 +63,14 @@ public class CraftIpBanList implements org.bukkit.BanList {
     }
 
     @Override
-    public boolean isBanned(String target) {
+    public boolean isBanned(@NotNull String target) {
         Validate.notNull(target, "Target cannot be null");
 
         return this.list.isBanned(InetSocketAddress.createUnresolved(target, 0));
     }
 
     @Override
-    public void pardon(String target) {
+    public void pardon(@NotNull String target) {
         Validate.notNull(target, "Target cannot be null");
 
         this.list.remove(target);
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftLootTable.java b/src/main/java/org/bukkit/craftbukkit/CraftLootTable.java
index 46a7585d1a161dd598e2cdd7244874390fe821c5..42c6c1f401bdead5d8a666092830f10febc8b157 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftLootTable.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftLootTable.java
@@ -25,6 +25,9 @@ import org.bukkit.craftbukkit.util.RandomSourceWrapper;
 import org.bukkit.inventory.Inventory;
 import org.bukkit.inventory.ItemStack;
 import org.bukkit.loot.LootContext;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 public class CraftLootTable implements org.bukkit.loot.LootTable {
 
@@ -41,7 +44,7 @@ public class CraftLootTable implements org.bukkit.loot.LootTable {
     }
 
     @Override
-    public Collection<ItemStack> populateLoot(Random random, LootContext context) {
+    public @NotNull Collection<ItemStack> populateLoot(Random random, @Nullable LootContext context) {
         Preconditions.checkArgument(context != null, "LootContext cannot be null");
         net.minecraft.world.level.storage.loot.LootContext nmsContext = this.convertContext(context, random);
         List<net.minecraft.world.item.ItemStack> nmsItems = this.handle.getRandomItems(nmsContext);
@@ -58,7 +61,7 @@ public class CraftLootTable implements org.bukkit.loot.LootTable {
     }
 
     @Override
-    public void fillInventory(Inventory inventory, Random random, LootContext context) {
+    public void fillInventory(@Nullable Inventory inventory, Random random, @Nullable LootContext context) {
         Preconditions.checkArgument(inventory != null, "Inventory cannot be null");
         Preconditions.checkArgument(context != null, "LootContext cannot be null");
         net.minecraft.world.level.storage.loot.LootContext nmsContext = this.convertContext(context, random);
@@ -70,11 +73,11 @@ public class CraftLootTable implements org.bukkit.loot.LootTable {
     }
 
     @Override
-    public NamespacedKey getKey() {
+    public @NotNull NamespacedKey getKey() {
         return this.key;
     }
 
-    private net.minecraft.world.level.storage.loot.LootContext convertContext(LootContext context, Random random) {
+    private net.minecraft.world.level.storage.loot.@NotNull LootContext convertContext(@NotNull LootContext context, @Nullable Random random) {
         Preconditions.checkArgument(context != null, "LootContext cannot be null");
         Location loc = context.getLocation();
         Preconditions.checkArgument(loc.getWorld() != null, "LootContext.getLocation#getWorld cannot be null");
@@ -125,13 +128,13 @@ public class CraftLootTable implements org.bukkit.loot.LootTable {
         return builder.create(nmsBuilder.build());
     }
 
-    private <T> void setMaybe(net.minecraft.world.level.storage.loot.LootContext.Builder builder, LootContextParam<T> param, T value) {
+    private <T> void setMaybe(net.minecraft.world.level.storage.loot.LootContext.@NotNull Builder builder, @NotNull LootContextParam<T> param, @NotNull T value) {
         if (this.getHandle().getParamSet().getRequired().contains(param) || this.getHandle().getParamSet().getAllowed().contains(param)) {
             builder.withParameter(param, value);
         }
     }
 
-    public static LootContext convertContext(net.minecraft.world.level.storage.loot.LootContext info) {
+    public static @NotNull LootContext convertContext(net.minecraft.world.level.storage.loot.@NotNull LootContext info) {
         Vec3 position = info.getParamOrNull(LootContextParams.ORIGIN);
         if (position == null) {
             position = info.getParamOrNull(LootContextParams.THIS_ENTITY).position(); // Every vanilla context has origin or this_entity, see LootContextParameterSets
@@ -159,7 +162,7 @@ public class CraftLootTable implements org.bukkit.loot.LootTable {
     }
 
     @Override
-    public String toString() {
+    public @NotNull String toString() {
         return this.getKey().toString();
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftOfflinePlayer.java b/src/main/java/org/bukkit/craftbukkit/CraftOfflinePlayer.java
index 714afc98b5150907b45a00060be4e41582333204..9125a1ab3ea57d29390d710cdfc8787a2883cb9f 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftOfflinePlayer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftOfflinePlayer.java
@@ -28,15 +28,18 @@ import org.bukkit.entity.Player;
 import org.bukkit.metadata.MetadataValue;
 import org.bukkit.plugin.Plugin;
 import org.bukkit.profile.PlayerProfile;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 @SerializableAs("Player")
 public class CraftOfflinePlayer implements OfflinePlayer, ConfigurationSerializable {
     private static final org.slf4j.Logger LOGGER = com.mojang.logging.LogUtils.getLogger(); // Paper
     private final GameProfile profile;
     private final CraftServer server;
-    private final PlayerDataStorage storage;
+    private final @NotNull PlayerDataStorage storage;
 
-    protected CraftOfflinePlayer(CraftServer server, GameProfile profile) {
+    protected CraftOfflinePlayer(@NotNull CraftServer server, GameProfile profile) {
         this.server = server;
         this.profile = profile;
         this.storage = server.console.playerDataStorage;
@@ -72,16 +75,16 @@ public class CraftOfflinePlayer implements OfflinePlayer, ConfigurationSerializa
     }
 
     @Override
-    public UUID getUniqueId() {
+    public @NotNull UUID getUniqueId() {
         return this.profile.getId();
     }
 
     @Override
-    public com.destroystokyo.paper.profile.PlayerProfile getPlayerProfile() { // Paper
+    public @NotNull com.destroystokyo.paper.profile.PlayerProfile getPlayerProfile() { // Paper
         return new com.destroystokyo.paper.profile.CraftPlayerProfile(this.profile); // Paper
     }
 
-    public Server getServer() {
+    public @NotNull Server getServer() {
         return this.server;
     }
 
@@ -139,7 +142,7 @@ public class CraftOfflinePlayer implements OfflinePlayer, ConfigurationSerializa
     }
 
     @Override
-    public Map<String, Object> serialize() {
+    public @NotNull Map<String, Object> serialize() {
         Map<String, Object> result = new LinkedHashMap<String, Object>();
 
         result.put("UUID", this.profile.getId().toString());
@@ -147,7 +150,7 @@ public class CraftOfflinePlayer implements OfflinePlayer, ConfigurationSerializa
         return result;
     }
 
-    public static OfflinePlayer deserialize(Map<String, Object> args) {
+    public static @NotNull OfflinePlayer deserialize(@NotNull Map<String, Object> args) {
         // Backwards comparability
         if (args.get("name") != null) {
             return Bukkit.getServer().getOfflinePlayer((String) args.get("name"));
@@ -157,7 +160,7 @@ public class CraftOfflinePlayer implements OfflinePlayer, ConfigurationSerializa
     }
 
     @Override
-    public String toString() {
+    public @NotNull String toString() {
         return getClass().getSimpleName() + "[UUID=" + this.profile.getId() + "]";
     }
 
@@ -167,7 +170,7 @@ public class CraftOfflinePlayer implements OfflinePlayer, ConfigurationSerializa
     }
 
     @Override
-    public boolean equals(Object obj) {
+    public boolean equals(@Nullable Object obj) {
         if (obj == null || !(obj instanceof OfflinePlayer)) {
             return false;
         }
@@ -187,11 +190,11 @@ public class CraftOfflinePlayer implements OfflinePlayer, ConfigurationSerializa
         return hash;
     }
 
-    private CompoundTag getData() {
+    private @NotNull CompoundTag getData() {
         return this.storage.getPlayerData(this.getUniqueId().toString());
     }
 
-    private CompoundTag getBukkitData() {
+    private @NotNull CompoundTag getBukkitData() {
         CompoundTag result = this.getData();
 
         if (result != null) {
@@ -204,7 +207,7 @@ public class CraftOfflinePlayer implements OfflinePlayer, ConfigurationSerializa
         return result;
     }
 
-    private File getDataFile() {
+    private @NotNull File getDataFile() {
         return new File(this.storage.getPlayerDir(), this.getUniqueId() + ".dat");
     }
 
@@ -292,7 +295,7 @@ public class CraftOfflinePlayer implements OfflinePlayer, ConfigurationSerializa
         }
     }
 
-    private CompoundTag getPaperData() {
+    private @NotNull CompoundTag getPaperData() {
         CompoundTag result = getData();
 
         if (result != null) {
@@ -338,28 +341,28 @@ public class CraftOfflinePlayer implements OfflinePlayer, ConfigurationSerializa
         return null;
     }
 
-    public void setMetadata(String metadataKey, MetadataValue metadataValue) {
+    public void setMetadata(@NotNull String metadataKey, @NotNull MetadataValue metadataValue) {
         this.server.getPlayerMetadata().setMetadata(this, metadataKey, metadataValue);
     }
 
-    public List<MetadataValue> getMetadata(String metadataKey) {
+    public @NotNull List<MetadataValue> getMetadata(@NotNull String metadataKey) {
         return this.server.getPlayerMetadata().getMetadata(this, metadataKey);
     }
 
-    public boolean hasMetadata(String metadataKey) {
+    public boolean hasMetadata(@NotNull String metadataKey) {
         return this.server.getPlayerMetadata().hasMetadata(this, metadataKey);
     }
 
-    public void removeMetadata(String metadataKey, Plugin plugin) {
+    public void removeMetadata(@NotNull String metadataKey, @NotNull Plugin plugin) {
         this.server.getPlayerMetadata().removeMetadata(this, metadataKey, plugin);
     }
 
-    private ServerStatsCounter getStatisticManager() {
+    private @NotNull ServerStatsCounter getStatisticManager() {
         return this.server.getHandle().getPlayerStats(this.getUniqueId(), this.getName());
     }
 
     @Override
-    public void incrementStatistic(Statistic statistic) {
+    public void incrementStatistic(@NotNull Statistic statistic) {
         if (this.isOnline()) {
             this.getPlayer().incrementStatistic(statistic);
         } else {
@@ -370,7 +373,7 @@ public class CraftOfflinePlayer implements OfflinePlayer, ConfigurationSerializa
     }
 
     @Override
-    public void decrementStatistic(Statistic statistic) {
+    public void decrementStatistic(@NotNull Statistic statistic) {
         if (this.isOnline()) {
             this.getPlayer().decrementStatistic(statistic);
         } else {
@@ -381,7 +384,7 @@ public class CraftOfflinePlayer implements OfflinePlayer, ConfigurationSerializa
     }
 
     @Override
-    public int getStatistic(Statistic statistic) {
+    public int getStatistic(@NotNull Statistic statistic) {
         if (this.isOnline()) {
             return this.getPlayer().getStatistic(statistic);
         } else {
@@ -390,7 +393,7 @@ public class CraftOfflinePlayer implements OfflinePlayer, ConfigurationSerializa
     }
 
     @Override
-    public void incrementStatistic(Statistic statistic, int amount) {
+    public void incrementStatistic(@NotNull Statistic statistic, int amount) {
         if (this.isOnline()) {
             this.getPlayer().incrementStatistic(statistic, amount);
         } else {
@@ -401,7 +404,7 @@ public class CraftOfflinePlayer implements OfflinePlayer, ConfigurationSerializa
     }
 
     @Override
-    public void decrementStatistic(Statistic statistic, int amount) {
+    public void decrementStatistic(@NotNull Statistic statistic, int amount) {
         if (this.isOnline()) {
             this.getPlayer().decrementStatistic(statistic, amount);
         } else {
@@ -412,7 +415,7 @@ public class CraftOfflinePlayer implements OfflinePlayer, ConfigurationSerializa
     }
 
     @Override
-    public void setStatistic(Statistic statistic, int newValue) {
+    public void setStatistic(@NotNull Statistic statistic, int newValue) {
         if (this.isOnline()) {
             this.getPlayer().setStatistic(statistic, newValue);
         } else {
@@ -423,7 +426,7 @@ public class CraftOfflinePlayer implements OfflinePlayer, ConfigurationSerializa
     }
 
     @Override
-    public void incrementStatistic(Statistic statistic, Material material) {
+    public void incrementStatistic(@NotNull Statistic statistic, @NotNull Material material) {
         if (this.isOnline()) {
             this.getPlayer().incrementStatistic(statistic, material);
         } else {
@@ -434,7 +437,7 @@ public class CraftOfflinePlayer implements OfflinePlayer, ConfigurationSerializa
     }
 
     @Override
-    public void decrementStatistic(Statistic statistic, Material material) {
+    public void decrementStatistic(@NotNull Statistic statistic, @NotNull Material material) {
         if (this.isOnline()) {
             this.getPlayer().decrementStatistic(statistic, material);
         } else {
@@ -445,7 +448,7 @@ public class CraftOfflinePlayer implements OfflinePlayer, ConfigurationSerializa
     }
 
     @Override
-    public int getStatistic(Statistic statistic, Material material) {
+    public int getStatistic(@NotNull Statistic statistic, @NotNull Material material) {
         if (this.isOnline()) {
             return this.getPlayer().getStatistic(statistic, material);
         } else {
@@ -454,7 +457,7 @@ public class CraftOfflinePlayer implements OfflinePlayer, ConfigurationSerializa
     }
 
     @Override
-    public void incrementStatistic(Statistic statistic, Material material, int amount) {
+    public void incrementStatistic(@NotNull Statistic statistic, @NotNull Material material, int amount) {
         if (this.isOnline()) {
             this.getPlayer().incrementStatistic(statistic, material, amount);
         } else {
@@ -465,7 +468,7 @@ public class CraftOfflinePlayer implements OfflinePlayer, ConfigurationSerializa
     }
 
     @Override
-    public void decrementStatistic(Statistic statistic, Material material, int amount) {
+    public void decrementStatistic(@NotNull Statistic statistic, @NotNull Material material, int amount) {
         if (this.isOnline()) {
             this.getPlayer().decrementStatistic(statistic, material, amount);
         } else {
@@ -476,7 +479,7 @@ public class CraftOfflinePlayer implements OfflinePlayer, ConfigurationSerializa
     }
 
     @Override
-    public void setStatistic(Statistic statistic, Material material, int newValue) {
+    public void setStatistic(@NotNull Statistic statistic, @NotNull Material material, int newValue) {
         if (this.isOnline()) {
             this.getPlayer().setStatistic(statistic, material, newValue);
         } else {
@@ -487,7 +490,7 @@ public class CraftOfflinePlayer implements OfflinePlayer, ConfigurationSerializa
     }
 
     @Override
-    public void incrementStatistic(Statistic statistic, EntityType entityType) {
+    public void incrementStatistic(@NotNull Statistic statistic, @NotNull EntityType entityType) {
         if (this.isOnline()) {
             this.getPlayer().incrementStatistic(statistic, entityType);
         } else {
@@ -498,7 +501,7 @@ public class CraftOfflinePlayer implements OfflinePlayer, ConfigurationSerializa
     }
 
     @Override
-    public void decrementStatistic(Statistic statistic, EntityType entityType) {
+    public void decrementStatistic(@NotNull Statistic statistic, @NotNull EntityType entityType) {
         if (this.isOnline()) {
             this.getPlayer().decrementStatistic(statistic, entityType);
         } else {
@@ -509,7 +512,7 @@ public class CraftOfflinePlayer implements OfflinePlayer, ConfigurationSerializa
     }
 
     @Override
-    public int getStatistic(Statistic statistic, EntityType entityType) {
+    public int getStatistic(@NotNull Statistic statistic, @NotNull EntityType entityType) {
         if (this.isOnline()) {
             return this.getPlayer().getStatistic(statistic, entityType);
         } else {
@@ -518,7 +521,7 @@ public class CraftOfflinePlayer implements OfflinePlayer, ConfigurationSerializa
     }
 
     @Override
-    public void incrementStatistic(Statistic statistic, EntityType entityType, int amount) {
+    public void incrementStatistic(@NotNull Statistic statistic, @NotNull EntityType entityType, int amount) {
         if (this.isOnline()) {
             this.getPlayer().incrementStatistic(statistic, entityType, amount);
         } else {
@@ -529,7 +532,7 @@ public class CraftOfflinePlayer implements OfflinePlayer, ConfigurationSerializa
     }
 
     @Override
-    public void decrementStatistic(Statistic statistic, EntityType entityType, int amount) {
+    public void decrementStatistic(@NotNull Statistic statistic, @NotNull EntityType entityType, int amount) {
         if (this.isOnline()) {
             this.getPlayer().decrementStatistic(statistic, entityType, amount);
         } else {
@@ -540,7 +543,7 @@ public class CraftOfflinePlayer implements OfflinePlayer, ConfigurationSerializa
     }
 
     @Override
-    public void setStatistic(Statistic statistic, EntityType entityType, int newValue) {
+    public void setStatistic(@NotNull Statistic statistic, @NotNull EntityType entityType, int newValue) {
         if (this.isOnline()) {
             this.getPlayer().setStatistic(statistic, entityType, newValue);
         } else {
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftParticle.java b/src/main/java/org/bukkit/craftbukkit/CraftParticle.java
index aa5bd2da859222ff89f7296603b905eb65c41c49..5d4a30bfd5f3ef22e73bce82e7e94332c1c90b69 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftParticle.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftParticle.java
@@ -33,6 +33,9 @@ import org.bukkit.craftbukkit.util.CraftMagicNumbers;
 import org.bukkit.inventory.ItemStack;
 import org.bukkit.material.MaterialData;
 import org.joml.Vector3f;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 public enum CraftParticle {
 
@@ -136,10 +139,10 @@ public enum CraftParticle {
     LEGACY_BLOCK_CRACK("block"),
     LEGACY_BLOCK_DUST("block"),
     LEGACY_FALLING_DUST("falling_dust");
-    private final ResourceLocation minecraftKey;
-    private final Particle bukkit;
-    private static final BiMap<Particle, ResourceLocation> particles;
-    private static final Map<Particle, Particle> aliases;
+    private final @NotNull ResourceLocation minecraftKey;
+    private final @NotNull Particle bukkit;
+    private static final @NotNull BiMap<Particle, ResourceLocation> particles;
+    private static final @NotNull Map<Particle, Particle> aliases;
 
     static {
         particles = HashBiMap.create();
@@ -154,18 +157,18 @@ public enum CraftParticle {
         }
     }
 
-    private CraftParticle(String minecraftKey) {
+    private CraftParticle(@NotNull String minecraftKey) {
         this.minecraftKey = new ResourceLocation(minecraftKey);
 
         this.bukkit = Particle.valueOf(this.name());
         Preconditions.checkState(this.bukkit != null, "Bukkit particle %s does not exist", this.name());
     }
 
-    public static ParticleOptions toNMS(Particle bukkit) {
+    public static ParticleOptions toNMS(@NotNull Particle bukkit) {
         return toNMS(bukkit, null);
     }
 
-    public static <T> ParticleOptions toNMS(Particle particle, T obj) {
+    public static <T> @NotNull ParticleOptions toNMS(@NotNull Particle particle, @Nullable T obj) {
         Particle canonical = particle;
         if (aliases.containsKey(particle)) {
             canonical = aliases.get(particle);
@@ -227,11 +230,11 @@ public enum CraftParticle {
         throw new IllegalArgumentException(particle.getDataType().toString());
     }
 
-    public static Particle toBukkit(net.minecraft.core.particles.ParticleOptions nms) {
+    public static Particle toBukkit(net.minecraft.core.particles.@NotNull ParticleOptions nms) {
         return toBukkit(nms.getType());
     }
 
-    public static Particle toBukkit(net.minecraft.core.particles.ParticleType nms) {
+    public static Particle toBukkit(net.minecraft.core.particles.@NotNull ParticleType nms) {
         return particles.inverse().get(BuiltInRegistries.PARTICLE_TYPE.getKey(nms));
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftProfileBanEntry.java b/src/main/java/org/bukkit/craftbukkit/CraftProfileBanEntry.java
index 126968d557263b3efddc9d53d0f8f436a401cf78..427a5346e30ed61aac5c222c2ca3591bd1e0d95f 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftProfileBanEntry.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftProfileBanEntry.java
@@ -7,16 +7,19 @@ import java.util.logging.Level;
 import net.minecraft.server.players.UserBanList;
 import net.minecraft.server.players.UserBanListEntry;
 import org.bukkit.Bukkit;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 public final class CraftProfileBanEntry implements org.bukkit.BanEntry {
     private final UserBanList list;
     private final GameProfile profile;
     private Date created;
     private String source;
-    private Date expiration;
+    private @Nullable Date expiration;
     private String reason;
 
-    public CraftProfileBanEntry(GameProfile profile, UserBanListEntry entry, UserBanList list) {
+    public CraftProfileBanEntry(GameProfile profile, @NotNull UserBanListEntry entry, UserBanList list) {
         this.list = list;
         this.profile = profile;
         this.created = entry.getCreated() != null ? new Date(entry.getCreated().getTime()) : null;
@@ -26,12 +29,12 @@ public final class CraftProfileBanEntry implements org.bukkit.BanEntry {
     }
 
     @Override
-    public String getTarget() {
+    public @NotNull String getTarget() {
         return this.profile.getName();
     }
 
     @Override
-    public Date getCreated() {
+    public @Nullable Date getCreated() {
         return this.created == null ? null : (Date) this.created.clone();
     }
 
@@ -41,7 +44,7 @@ public final class CraftProfileBanEntry implements org.bukkit.BanEntry {
     }
 
     @Override
-    public String getSource() {
+    public @NotNull String getSource() {
         return this.source;
     }
 
@@ -51,12 +54,12 @@ public final class CraftProfileBanEntry implements org.bukkit.BanEntry {
     }
 
     @Override
-    public Date getExpiration() {
+    public @Nullable Date getExpiration() {
         return this.expiration == null ? null : (Date) this.expiration.clone();
     }
 
     @Override
-    public void setExpiration(Date expiration) {
+    public void setExpiration(@Nullable Date expiration) {
         if (expiration != null && expiration.getTime() == new Date(0, 0, 0, 0, 0, 0).getTime()) {
             expiration = null; // Forces "forever"
         }
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftProfileBanList.java b/src/main/java/org/bukkit/craftbukkit/CraftProfileBanList.java
index 6e2047f1b45799c7a1ddfdcd24d76e6e12f91e4b..ed2f27061fe220122458e16733e9ed1dc175a6b9 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftProfileBanList.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftProfileBanList.java
@@ -14,6 +14,9 @@ import net.minecraft.server.players.UserBanListEntry;
 import org.apache.commons.lang.StringUtils;
 import org.apache.commons.lang.Validate;
 import org.bukkit.Bukkit;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 public class CraftProfileBanList implements org.bukkit.BanList {
     private final UserBanList list;
@@ -23,7 +26,7 @@ public class CraftProfileBanList implements org.bukkit.BanList {
     }
 
     @Override
-    public org.bukkit.BanEntry getBanEntry(String target) {
+    public org.bukkit.BanEntry getBanEntry(@NotNull String target) {
         Validate.notNull(target, "Target cannot be null");
 
         GameProfile profile = this.getProfile(target);
@@ -40,7 +43,7 @@ public class CraftProfileBanList implements org.bukkit.BanList {
     }
 
     @Override
-    public org.bukkit.BanEntry addBan(String target, String reason, Date expires, String source) {
+    public org.bukkit.BanEntry addBan(@NotNull String target, String reason, Date expires, String source) {
         Validate.notNull(target, "Ban target cannot be null");
 
         GameProfile profile = this.getProfile(target);
@@ -64,7 +67,7 @@ public class CraftProfileBanList implements org.bukkit.BanList {
     }
 
     @Override
-    public Set<org.bukkit.BanEntry> getBanEntries() {
+    public @NotNull Set<org.bukkit.BanEntry> getBanEntries() {
         ImmutableSet.Builder<org.bukkit.BanEntry> builder = ImmutableSet.builder();
 
         for (StoredUserEntry entry : this.list.getValues()) {
@@ -76,7 +79,7 @@ public class CraftProfileBanList implements org.bukkit.BanList {
     }
 
     @Override
-    public boolean isBanned(String target) {
+    public boolean isBanned(@NotNull String target) {
         Validate.notNull(target, "Target cannot be null");
 
         GameProfile profile = this.getProfile(target);
@@ -88,14 +91,14 @@ public class CraftProfileBanList implements org.bukkit.BanList {
     }
 
     @Override
-    public void pardon(String target) {
+    public void pardon(@NotNull String target) {
         Validate.notNull(target, "Target cannot be null");
 
         GameProfile profile = this.getProfile(target);
         this.list.remove(profile);
     }
 
-    private GameProfile getProfile(String target) {
+    private @Nullable GameProfile getProfile(@NotNull String target) {
         UUID uuid = null;
 
         try {
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftRaid.java b/src/main/java/org/bukkit/craftbukkit/CraftRaid.java
index 7a5bfc724e42100b7582836ab8c30feed1a3d221..7c88fe218c98d0fa5395fbb3189cea09d72df5d6 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftRaid.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftRaid.java
@@ -13,6 +13,8 @@ import org.bukkit.Location;
 import org.bukkit.Raid;
 import org.bukkit.Raid.RaidStatus;
 import org.bukkit.entity.Raider;
+import org.jetbrains.annotations.NotNull;
+
 
 public final class CraftRaid implements Raid {
 
@@ -45,14 +47,14 @@ public final class CraftRaid implements Raid {
     }
 
     @Override
-    public Location getLocation() {
+    public @NotNull Location getLocation() {
         BlockPos pos = this.handle.getCenter();
         Level world = this.handle.getLevel();
         return new Location(world.getWorld(), pos.getX(), pos.getY(), pos.getZ());
     }
 
     @Override
-    public RaidStatus getStatus() {
+    public @NotNull RaidStatus getStatus() {
         if (this.handle.isStopped()) {
             return RaidStatus.STOPPED;
         } else if (this.handle.isVictory()) {
@@ -85,15 +87,15 @@ public final class CraftRaid implements Raid {
     }
 
     @Override
-    public Set<UUID> getHeroes() {
+    public @NotNull Set<UUID> getHeroes() {
         return Collections.unmodifiableSet(handle.heroesOfTheVillage);
     }
 
     @Override
-    public List<Raider> getRaiders() {
+    public @NotNull List<Raider> getRaiders() {
         return this.handle.getRaiders().stream().map(new Function<net.minecraft.world.entity.raid.Raider, Raider>() {
             @Override
-            public Raider apply(net.minecraft.world.entity.raid.Raider entityRaider) {
+            public @NotNull Raider apply(net.minecraft.world.entity.raid.@NotNull Raider entityRaider) {
                 return (Raider) entityRaider.getBukkitEntity();
             }
         }).collect(ImmutableList.toImmutableList());
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftRegionAccessor.java b/src/main/java/org/bukkit/craftbukkit/CraftRegionAccessor.java
index 09be3f188f9710fa71c5db67023e654739721f21..4a63332a743cbaff8359007dbfff7e9cdc6920d9 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftRegionAccessor.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftRegionAccessor.java
@@ -195,6 +195,9 @@ import org.bukkit.potion.PotionData;
 import org.bukkit.potion.PotionType;
 import org.bukkit.util.Consumer;
 import org.bukkit.util.Vector;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 public abstract class CraftRegionAccessor implements RegionAccessor {
 
@@ -205,24 +208,24 @@ public abstract class CraftRegionAccessor implements RegionAccessor {
     }
 
     @Override
-    public Biome getBiome(Location location) {
+    public @NotNull Biome getBiome(@NotNull Location location) {
         return this.getBiome(location.getBlockX(), location.getBlockY(), location.getBlockZ());
     }
 
     @Override
-    public Biome getBiome(int x, int y, int z) {
+    public @NotNull Biome getBiome(int x, int y, int z) {
         return CraftBlock.biomeBaseToBiome(this.getHandle().registryAccess().registryOrThrow(Registries.BIOME), this.getHandle().getNoiseBiome(x >> 2, y >> 2, z >> 2));
     }
 
     // Paper start
     @Override
-    public Biome getComputedBiome(int x, int y, int z) {
+    public @NotNull Biome getComputedBiome(int x, int y, int z) {
         return CraftBlock.biomeBaseToBiome(this.getHandle().registryAccess().registryOrThrow(Registries.BIOME), this.getHandle().getBiome(new BlockPos(x, y, z)));
     }
     // Paper end
 
     @Override
-    public void setBiome(Location location, Biome biome) {
+    public void setBiome(@NotNull Location location, Biome biome) {
         this.setBiome(location.getBlockX(), location.getBlockY(), location.getBlockZ(), biome);
     }
 
@@ -236,46 +239,46 @@ public abstract class CraftRegionAccessor implements RegionAccessor {
     public abstract void setBiome(int x, int y, int z, Holder<net.minecraft.world.level.biome.Biome> biomeBase);
 
     @Override
-    public BlockState getBlockState(Location location) {
+    public @NotNull BlockState getBlockState(@NotNull Location location) {
         return this.getBlockState(location.getBlockX(), location.getBlockY(), location.getBlockZ());
     }
 
     @Override
-    public BlockState getBlockState(int x, int y, int z) {
+    public @NotNull BlockState getBlockState(int x, int y, int z) {
         return CraftBlock.at(this.getHandle(), new BlockPos(x, y, z)).getState();
     }
 
     @Override
-    public BlockData getBlockData(Location location) {
+    public @NotNull BlockData getBlockData(@NotNull Location location) {
         return this.getBlockData(location.getBlockX(), location.getBlockY(), location.getBlockZ());
     }
 
     @Override
-    public BlockData getBlockData(int x, int y, int z) {
+    public @NotNull BlockData getBlockData(int x, int y, int z) {
         return CraftBlockData.fromData(this.getData(x, y, z));
     }
 
     @Override
-    public Material getType(Location location) {
+    public @NotNull Material getType(@NotNull Location location) {
         return this.getType(location.getBlockX(), location.getBlockY(), location.getBlockZ());
     }
 
     @Override
-    public Material getType(int x, int y, int z) {
+    public @NotNull Material getType(int x, int y, int z) {
         return CraftMagicNumbers.getMaterial(this.getData(x, y, z).getBlock());
     }
 
-    private net.minecraft.world.level.block.state.BlockState getData(int x, int y, int z) {
+    private net.minecraft.world.level.block.state.@NotNull BlockState getData(int x, int y, int z) {
         return this.getHandle().getBlockState(new BlockPos(x, y, z));
     }
 
     @Override
-    public void setBlockData(Location location, BlockData blockData) {
+    public void setBlockData(@NotNull Location location, @NotNull BlockData blockData) {
         this.setBlockData(location.getBlockX(), location.getBlockY(), location.getBlockZ(), blockData);
     }
 
     @Override
-    public void setBlockData(int x, int y, int z, BlockData blockData) {
+    public void setBlockData(int x, int y, int z, @NotNull BlockData blockData) {
         WorldGenLevel world = this.getHandle();
         BlockPos pos = new BlockPos(x, y, z);
         net.minecraft.world.level.block.state.BlockState old = this.getHandle().getBlockState(pos);
@@ -284,23 +287,23 @@ public abstract class CraftRegionAccessor implements RegionAccessor {
     }
 
     @Override
-    public void setType(Location location, Material material) {
+    public void setType(@NotNull Location location, @NotNull Material material) {
         this.setType(location.getBlockX(), location.getBlockY(), location.getBlockZ(), material);
     }
 
     @Override
-    public void setType(int x, int y, int z, Material material) {
+    public void setType(int x, int y, int z, @NotNull Material material) {
         this.setBlockData(x, y, z, material.createBlockData());
     }
 
     @Override
-    public boolean generateTree(Location location, Random random, TreeType treeType) {
+    public boolean generateTree(@NotNull Location location, Random random, @NotNull TreeType treeType) {
         BlockPos pos = new BlockPos(location.getBlockX(), location.getBlockY(), location.getBlockZ());
         return this.generateTree(this.getHandle(), this.getHandle().getMinecraftWorld().getChunkSource().getGenerator(), pos, new RandomSourceWrapper(random), treeType);
     }
 
     @Override
-    public boolean generateTree(Location location, Random random, TreeType treeType, Consumer<BlockState> consumer) {
+    public boolean generateTree(@NotNull Location location, Random random, @NotNull TreeType treeType, @Nullable Consumer<BlockState> consumer) {
         return this.generateTree(location, random, treeType, (consumer == null) ? null : (block) -> {
             consumer.accept(block);
             return true;
@@ -308,7 +311,7 @@ public abstract class CraftRegionAccessor implements RegionAccessor {
     }
 
     @Override
-    public boolean generateTree(Location location, Random random, TreeType treeType, Predicate<BlockState> predicate) {
+    public boolean generateTree(@NotNull Location location, Random random, @NotNull TreeType treeType, @Nullable Predicate<BlockState> predicate) {
         BlockPos pos = new BlockPos(location.getBlockX(), location.getBlockY(), location.getBlockZ());
         BlockStateListPopulator populator = new BlockStateListPopulator(this.getHandle());
         boolean result = this.generateTree(populator, this.getHandle().getMinecraftWorld().getChunkSource().getGenerator(), pos, new RandomSourceWrapper(random), treeType);
@@ -323,7 +326,7 @@ public abstract class CraftRegionAccessor implements RegionAccessor {
         return result;
     }
 
-    public boolean generateTree(WorldGenLevel access, ChunkGenerator chunkGenerator, BlockPos pos, RandomSource random, TreeType treeType) {
+    public boolean generateTree(@NotNull WorldGenLevel access, @NotNull ChunkGenerator chunkGenerator, @NotNull BlockPos pos, @NotNull RandomSource random, @NotNull TreeType treeType) {
         ResourceKey<ConfiguredFeature<?, ?>> gen;
         switch (treeType) {
             case BIG_TREE:
@@ -400,17 +403,17 @@ public abstract class CraftRegionAccessor implements RegionAccessor {
     }
 
     @Override
-    public Entity spawnEntity(Location location, EntityType entityType) {
+    public @NotNull Entity spawnEntity(Location location, @NotNull EntityType entityType) {
         return this.spawn(location, entityType.getEntityClass());
     }
 
     @Override
-    public Entity spawnEntity(Location loc, EntityType type, boolean randomizeData) {
+    public @NotNull Entity spawnEntity(Location loc, @NotNull EntityType type, boolean randomizeData) {
         return this.spawn(loc, type.getEntityClass(), null, CreatureSpawnEvent.SpawnReason.CUSTOM, randomizeData);
     }
 
     @Override
-    public List<Entity> getEntities() {
+    public @NotNull List<Entity> getEntities() {
         List<Entity> list = new ArrayList<Entity>();
 
         this.getNMSEntities().forEach(entity -> {
@@ -426,7 +429,7 @@ public abstract class CraftRegionAccessor implements RegionAccessor {
     }
 
     @Override
-    public List<LivingEntity> getLivingEntities() {
+    public @NotNull List<LivingEntity> getLivingEntities() {
         List<LivingEntity> list = new ArrayList<LivingEntity>();
 
         this.getNMSEntities().forEach(entity -> {
@@ -443,7 +446,7 @@ public abstract class CraftRegionAccessor implements RegionAccessor {
 
     @Override
     @SuppressWarnings("unchecked")
-    public <T extends Entity> Collection<T> getEntitiesByClass(Class<T> clazz) {
+    public <T extends Entity> @NotNull Collection<T> getEntitiesByClass(@NotNull Class<T> clazz) {
         Collection<T> list = new ArrayList<T>();
 
         this.getNMSEntities().forEach(entity -> {
@@ -464,7 +467,7 @@ public abstract class CraftRegionAccessor implements RegionAccessor {
     }
 
     @Override
-    public Collection<Entity> getEntitiesByClasses(Class<?>... classes) {
+    public @NotNull Collection<Entity> getEntitiesByClasses(Class<?> @NotNull ... classes) {
         Collection<Entity> list = new ArrayList<Entity>();
 
         this.getNMSEntities().forEach(entity -> {
@@ -492,21 +495,21 @@ public abstract class CraftRegionAccessor implements RegionAccessor {
     public abstract Iterable<net.minecraft.world.entity.Entity> getNMSEntities();
 
     @Override
-    public <T extends Entity> T spawn(Location location, Class<T> clazz) throws IllegalArgumentException {
+    public <T extends Entity> @NotNull T spawn(Location location, Class<T> clazz) throws IllegalArgumentException {
         return this.spawn(location, clazz, null, CreatureSpawnEvent.SpawnReason.CUSTOM);
     }
 
     @Override
-    public <T extends Entity> T spawn(Location location, Class<T> clazz, Consumer<T> function) throws IllegalArgumentException {
+    public <T extends Entity> @NotNull T spawn(Location location, Class<T> clazz, Consumer<T> function) throws IllegalArgumentException {
         return this.spawn(location, clazz, function, CreatureSpawnEvent.SpawnReason.CUSTOM);
     }
 
     @Override
-    public <T extends Entity> T spawn(Location location, Class<T> clazz, boolean randomizeData, Consumer<T> function) throws IllegalArgumentException {
+    public <T extends Entity> @NotNull T spawn(Location location, Class<T> clazz, boolean randomizeData, Consumer<T> function) throws IllegalArgumentException {
         return this.spawn(location, clazz, function, CreatureSpawnEvent.SpawnReason.CUSTOM, randomizeData);
     }
 
-    public <T extends Entity> T spawn(Location location, Class<T> clazz, Consumer<T> function, CreatureSpawnEvent.SpawnReason reason) throws IllegalArgumentException {
+    public <T extends Entity> @NotNull T spawn(Location location, Class<T> clazz, Consumer<T> function, CreatureSpawnEvent.SpawnReason reason) throws IllegalArgumentException {
         return this.spawn(location, clazz, function, reason, true);
     }
 
@@ -522,7 +525,7 @@ public abstract class CraftRegionAccessor implements RegionAccessor {
     }
 
     @SuppressWarnings("unchecked")
-    public <T extends Entity> T addEntity(net.minecraft.world.entity.Entity entity, CreatureSpawnEvent.SpawnReason reason, Consumer<T> function, boolean randomizeData) throws IllegalArgumentException {
+    public <T extends Entity> @NotNull T addEntity(net.minecraft.world.entity.@Nullable Entity entity, CreatureSpawnEvent.SpawnReason reason, @Nullable Consumer<T> function, boolean randomizeData) throws IllegalArgumentException {
         Preconditions.checkArgument(entity != null, "Cannot spawn null entity");
 
         if (randomizeData && entity instanceof Mob) {
@@ -549,7 +552,7 @@ public abstract class CraftRegionAccessor implements RegionAccessor {
     }
 
     @SuppressWarnings("unchecked")
-    public net.minecraft.world.entity.Entity createEntity(Location location, Class<? extends Entity> clazz, boolean randomizeData) throws IllegalArgumentException {
+    public net.minecraft.world.entity.@NotNull Entity createEntity(@Nullable Location location, @Nullable Class<? extends Entity> clazz, boolean randomizeData) throws IllegalArgumentException {
         if (location == null || clazz == null) {
             throw new IllegalArgumentException("Location or entity class cannot be null");
         }
@@ -954,16 +957,16 @@ public abstract class CraftRegionAccessor implements RegionAccessor {
 
     // Paper start
     @Override
-    public io.papermc.paper.world.MoonPhase getMoonPhase() {
+    public io.papermc.paper.world.@NotNull MoonPhase getMoonPhase() {
         return io.papermc.paper.world.MoonPhase.getPhase(this.getHandle().dayTime() / 24000L);
     }
 
     @Override
-    public org.bukkit.NamespacedKey getKey() {
+    public org.bukkit.@NotNull NamespacedKey getKey() {
         return org.bukkit.craftbukkit.util.CraftNamespacedKey.fromMinecraft(this.getHandle().getLevel().dimension().location());
     }
 
-    public boolean lineOfSightExists(Location from, Location to) {
+    public boolean lineOfSightExists(@NotNull Location from, @NotNull Location to) {
         Preconditions.checkArgument(from != null, "from parameter in lineOfSightExists cannot be null");
         Preconditions.checkArgument(to != null, "to parameter in lineOfSightExists cannot be null");
         if (from.getWorld() != to.getWorld()) return false;
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftRegistry.java b/src/main/java/org/bukkit/craftbukkit/CraftRegistry.java
index 763f9d4740429840e78d3462277eb577d2d9f66a..5e956a5b75d7b0a28c29c8aeabd69f5bbe9d8919 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftRegistry.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftRegistry.java
@@ -16,10 +16,13 @@ import org.bukkit.craftbukkit.generator.strucutre.CraftStructureType;
 import org.bukkit.craftbukkit.util.CraftNamespacedKey;
 import org.bukkit.generator.structure.Structure;
 import org.bukkit.generator.structure.StructureType;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 public class CraftRegistry<B extends Keyed, M> implements Registry<B> {
 
-    public static <B extends Keyed> Registry<?> createRegistry(Class<B> bukkitClass, RegistryAccess registryHolder) {
+    public static <B extends Keyed> @Nullable Registry<?> createRegistry(Class<B> bukkitClass, @NotNull RegistryAccess registryHolder) {
         if (bukkitClass == Structure.class) {
             return new CraftRegistry<>(registryHolder.registryOrThrow(Registries.STRUCTURE), CraftStructure::new);
         }
@@ -40,7 +43,7 @@ public class CraftRegistry<B extends Keyed, M> implements Registry<B> {
     }
 
     @Override
-    public B get(NamespacedKey namespacedKey) {
+    public B get(@NotNull NamespacedKey namespacedKey) {
         B cached = this.cache.get(namespacedKey);
         if (cached != null) {
             return cached;
@@ -57,11 +60,11 @@ public class CraftRegistry<B extends Keyed, M> implements Registry<B> {
     }
 
     @Override
-    public Iterator<B> iterator() {
+    public @NotNull Iterator<B> iterator() {
         return this.values().iterator();
     }
 
-    public B createBukkit(NamespacedKey namespacedKey, M minecraft) {
+    public @Nullable B createBukkit(NamespacedKey namespacedKey, @Nullable M minecraft) {
         if (minecraft == null) {
             return null;
         }
@@ -69,7 +72,7 @@ public class CraftRegistry<B extends Keyed, M> implements Registry<B> {
         return this.minecraftToBukkit.apply(namespacedKey, minecraft);
     }
 
-    public Stream<B> values() {
+    public @NotNull Stream<B> values() {
         return this.minecraftRegistry.keySet().stream().map(minecraftKey -> this.get(CraftNamespacedKey.fromMinecraft(minecraftKey)));
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index 49d718b4d03587e2be9906ffcf10541e41dd9c76..9d55213fdc003676b6908133069a1b8aa4887736 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -251,6 +251,7 @@ import org.bukkit.scoreboard.Criteria;
 import org.bukkit.structure.StructureManager;
 import org.bukkit.util.StringUtil;
 import org.bukkit.util.permissions.DefaultPermissions;
+import org.jetbrains.annotations.NotNull;
 import org.yaml.snakeyaml.Yaml;
 import org.yaml.snakeyaml.constructor.SafeConstructor;
 import org.yaml.snakeyaml.error.MarkedYAMLException;
@@ -271,7 +272,7 @@ public final class CraftServer implements Server {
     private final SimpleHelpMap helpMap = new SimpleHelpMap(this);
     private final StandardMessenger messenger = new StandardMessenger();
     private final SimplePluginManager pluginManager = new SimplePluginManager(this, this.commandMap);
-    private final StructureManager structureManager;
+    private final @NotNull StructureManager structureManager;
     protected final DedicatedServer console;
     protected final DedicatedPlayerList playerList;
     private final Map<String, World> worlds = new LinkedHashMap<String, World>();
@@ -285,17 +286,17 @@ public final class CraftServer implements Server {
     private final WorldMetadataStore worldMetadata = new WorldMetadataStore();
     private final Object2IntOpenHashMap<SpawnCategory> spawnCategoryLimit = new Object2IntOpenHashMap<>();
     private File container;
-    private WarningState warningState = WarningState.DEFAULT;
-    public String minimumAPI;
+    private @NotNull WarningState warningState = WarningState.DEFAULT;
+    public @org.jetbrains.annotations.Nullable String minimumAPI;
     public CraftScoreboardManager scoreboardManager;
     public boolean playerCommandState;
     private boolean printSaveWarning;
     private CraftIconCache icon;
     private boolean overrideAllCommandBlockCommands = false;
     public boolean ignoreVanillaPermissions = false;
-    private final List<CraftPlayer> playerView;
+    private final @NotNull List<CraftPlayer> playerView;
     public int reloadCount;
-    private final io.papermc.paper.datapack.PaperDatapackManager datapackManager; // Paper
+    private final io.papermc.paper.datapack.@NotNull PaperDatapackManager datapackManager; // Paper
     public static Exception excessiveVelEx; // Paper - Velocity warnings
     private final io.papermc.paper.logging.SysoutCatcher sysoutCatcher = new io.papermc.paper.logging.SysoutCatcher(); // Paper
     private final CraftPotionBrewer potionBrewer = new CraftPotionBrewer(); // Paper
@@ -307,12 +308,12 @@ public final class CraftServer implements Server {
         CraftItemFactory.instance();
     }
 
-    public CraftServer(DedicatedServer console, PlayerList playerList) {
+    public CraftServer(@NotNull DedicatedServer console, @NotNull PlayerList playerList) {
         this.console = console;
         this.playerList = (DedicatedPlayerList) playerList;
         this.playerView = Collections.unmodifiableList(Lists.transform(playerList.players, new Function<ServerPlayer, CraftPlayer>() {
             @Override
-            public CraftPlayer apply(ServerPlayer player) {
+            public @NotNull CraftPlayer apply(@NotNull ServerPlayer player) {
                 return player.getBukkitEntity();
             }
         }));
@@ -451,11 +452,11 @@ public final class CraftServer implements Server {
 
     // Paper start
     @Override
-    public File getPluginsFolder() {
+    public @NotNull File getPluginsFolder() {
         return (File) this.console.options.valueOf("plugins");
     }
 
-    private List<File> extraPluginJars() {
+    private @NotNull List<File> extraPluginJars() {
         @SuppressWarnings("unchecked")
         final List<File> jars = (List<File>) this.console.options.valuesOf("add-plugin");
         final List<File> list = new ArrayList<>();
@@ -562,7 +563,7 @@ public final class CraftServer implements Server {
         }
     }
 
-    private void enablePlugin(Plugin plugin) {
+    private void enablePlugin(@NotNull Plugin plugin) {
         try {
             List<Permission> perms = plugin.getDescription().getPermissions();
 
@@ -582,35 +583,35 @@ public final class CraftServer implements Server {
     }
 
     @Override
-    public String getName() {
+    public @NotNull String getName() {
         return this.serverName;
     }
 
     @Override
-    public String getVersion() {
+    public @NotNull String getVersion() {
         return this.serverVersion + " (MC: " + this.console.getServerVersion() + ")";
     }
 
     @Override
-    public String getBukkitVersion() {
+    public @NotNull String getBukkitVersion() {
         return this.bukkitVersion;
     }
 
     // Paper start - expose game version
     @Override
-    public String getMinecraftVersion() {
+    public @NotNull String getMinecraftVersion() {
         return console.getServerVersion();
     }
     // Paper end
 
     @Override
-    public List<CraftPlayer> getOnlinePlayers() {
+    public @NotNull List<CraftPlayer> getOnlinePlayers() {
         return this.playerView;
     }
 
     @Override
     @Deprecated
-    public Player getPlayer(final String name) {
+    public Player getPlayer(final @NotNull String name) {
         Validate.notNull(name, "Name cannot be null");
 
         Player found = this.getPlayerExact(name);
@@ -636,7 +637,7 @@ public final class CraftServer implements Server {
 
     @Override
     @Deprecated
-    public Player getPlayerExact(String name) {
+    public @org.jetbrains.annotations.Nullable Player getPlayerExact(@NotNull String name) {
         Validate.notNull(name, "Name cannot be null");
 
         ServerPlayer player = this.playerList.getPlayerByName(name);
@@ -644,7 +645,7 @@ public final class CraftServer implements Server {
     }
 
     @Override
-    public Player getPlayer(UUID id) {
+    public @org.jetbrains.annotations.Nullable Player getPlayer(@NotNull UUID id) {
         ServerPlayer player = this.playerList.getPlayer(id);
 
         if (player != null) {
@@ -656,14 +657,14 @@ public final class CraftServer implements Server {
 
     @Override
     @Deprecated // Paper start
-    public int broadcastMessage(String message) {
+    public int broadcastMessage(@NotNull String message) {
         return this.broadcast(message, BROADCAST_CHANNEL_USERS);
         // Paper end
     }
 
     @Override
     @Deprecated
-    public List<Player> matchPlayer(String partialName) {
+    public @NotNull List<Player> matchPlayer(@NotNull String partialName) {
         Validate.notNull(partialName, "PartialName cannot be null");
 
         List<Player> matchedPlayers = new ArrayList<Player>();
@@ -716,12 +717,12 @@ public final class CraftServer implements Server {
     }
 
     @Override
-    public String getIp() {
+    public @NotNull String getIp() {
         return this.getServer().getLocalIp();
     }
 
     @Override
-    public String getWorldType() {
+    public @NotNull String getWorldType() {
         return this.getProperties().properties.getProperty("level-type");
     }
 
@@ -754,17 +755,17 @@ public final class CraftServer implements Server {
     }
 
     @Override
-    public String getResourcePack() {
+    public @NotNull String getResourcePack() {
         return this.getServer().getServerResourcePack().map(MinecraftServer.ServerResourcePackInfo::url).orElse("");
     }
 
     @Override
-    public String getResourcePackHash() {
+    public @NotNull String getResourcePackHash() {
         return this.getServer().getServerResourcePack().map(MinecraftServer.ServerResourcePackInfo::hash).orElse("").toUpperCase(Locale.ROOT);
     }
 
     @Override
-    public String getResourcePackPrompt() {
+    public @NotNull String getResourcePackPrompt() {
         return this.getServer().getServerResourcePack().map(MinecraftServer.ServerResourcePackInfo::prompt).map(CraftChatMessage::fromComponent).orElse("");
     }
 
@@ -779,18 +780,18 @@ public final class CraftServer implements Server {
     }
 
     // NOTE: Temporary calls through to server.properies until its replaced
-    private DedicatedServerProperties getProperties() {
+    private @NotNull DedicatedServerProperties getProperties() {
         return this.console.getProperties();
     }
     // End Temporary calls
 
     @Override
-    public String getUpdateFolder() {
+    public @NotNull String getUpdateFolder() {
         return this.configuration.getString("settings.update-folder", "update");
     }
 
     @Override
-    public File getUpdateFolderFile() {
+    public @NotNull File getUpdateFolderFile() {
         return new File((File) console.options.valueOf("plugins"), this.configuration.getString("settings.update-folder", "update"));
     }
 
@@ -842,29 +843,29 @@ public final class CraftServer implements Server {
     }
 
     @Override
-    public int getTicksPerSpawns(SpawnCategory spawnCategory) {
+    public int getTicksPerSpawns(@NotNull SpawnCategory spawnCategory) {
         Validate.notNull(spawnCategory, "SpawnCategory cannot be null");
         Validate.isTrue(CraftSpawnCategory.isValidForLimits(spawnCategory), "SpawnCategory." + spawnCategory + " are not supported.");
         return this.configuration.getInt(CraftSpawnCategory.getConfigNameTicksPerSpawn(spawnCategory));
     }
 
     @Override
-    public PluginManager getPluginManager() {
+    public @NotNull PluginManager getPluginManager() {
         return this.pluginManager;
     }
 
     @Override
-    public CraftScheduler getScheduler() {
+    public @NotNull CraftScheduler getScheduler() {
         return this.scheduler;
     }
 
     @Override
-    public ServicesManager getServicesManager() {
+    public @NotNull ServicesManager getServicesManager() {
         return this.servicesManager;
     }
 
     @Override
-    public List<World> getWorlds() {
+    public @NotNull List<World> getWorlds() {
         return new ArrayList<World>(this.worlds.values());
     }
 
@@ -878,7 +879,7 @@ public final class CraftServer implements Server {
     }
 
     // NOTE: Should only be called from DedicatedServer.ah()
-    public boolean dispatchServerCommand(CommandSender sender, ConsoleInput serverCommand) {
+    public boolean dispatchServerCommand(CommandSender sender, @NotNull ConsoleInput serverCommand) {
         if (sender instanceof Conversable) {
             Conversable conversable = (Conversable) sender;
 
@@ -899,7 +900,7 @@ public final class CraftServer implements Server {
     }
 
     @Override
-    public boolean dispatchCommand(CommandSender sender, String commandLine) {
+    public boolean dispatchCommand(@NotNull CommandSender sender, @NotNull String commandLine) {
         Validate.notNull(sender, "Sender cannot be null");
         Validate.notNull(commandLine, "CommandLine cannot be null");
         org.spigotmc.AsyncCatcher.catchOp("command dispatch"); // Spigot
@@ -912,7 +913,7 @@ public final class CraftServer implements Server {
             Bukkit.getLogger().log(Level.SEVERE, "Please notify author of plugin causing this execution to fix this bug! see: http://bit.ly/1oSiM6C", new Throwable());
             org.bukkit.craftbukkit.util.Waitable<Boolean> wait = new org.bukkit.craftbukkit.util.Waitable<Boolean>() {
                 @Override
-                protected Boolean evaluate() {
+                protected @NotNull Boolean evaluate() {
                     return dispatchCommand(fSender, fCommandLine);
                 }
             };
@@ -1134,28 +1135,28 @@ public final class CraftServer implements Server {
     }
 
     @Override
-    public String toString() {
+    public @NotNull String toString() {
         return "CraftServer{" + "serverName=" + this.serverName + ",serverVersion=" + this.serverVersion + ",minecraftVersion=" + this.console.getServerVersion() + '}';
     }
 
-    public World createWorld(String name, World.Environment environment) {
+    public @org.jetbrains.annotations.Nullable World createWorld(@NotNull String name, World.@NotNull Environment environment) {
         return WorldCreator.name(name).environment(environment).createWorld();
     }
 
-    public World createWorld(String name, World.Environment environment, long seed) {
+    public @org.jetbrains.annotations.Nullable World createWorld(@NotNull String name, World.@NotNull Environment environment, long seed) {
         return WorldCreator.name(name).environment(environment).seed(seed).createWorld();
     }
 
-    public World createWorld(String name, Environment environment, ChunkGenerator generator) {
+    public @org.jetbrains.annotations.Nullable World createWorld(@NotNull String name, @NotNull Environment environment, ChunkGenerator generator) {
         return WorldCreator.name(name).environment(environment).generator(generator).createWorld();
     }
 
-    public World createWorld(String name, Environment environment, long seed, ChunkGenerator generator) {
+    public @org.jetbrains.annotations.Nullable World createWorld(@NotNull String name, @NotNull Environment environment, long seed, ChunkGenerator generator) {
         return WorldCreator.name(name).environment(environment).seed(seed).generator(generator).createWorld();
     }
 
     @Override
-    public World createWorld(WorldCreator creator) {
+    public @org.jetbrains.annotations.Nullable World createWorld(@NotNull WorldCreator creator) {
         Preconditions.checkState(this.console.getAllLevels().iterator().hasNext(), "Cannot create additional worlds on STARTUP");
         //Preconditions.checkState(!this.console.isIteratingOverLevels, "Cannot create a world while worlds are being ticked"); // Paper - Cat - Temp disable. We'll see how this goes.
         Validate.notNull(creator, "Creator may not be null");
@@ -1290,12 +1291,12 @@ public final class CraftServer implements Server {
     }
 
     @Override
-    public boolean unloadWorld(String name, boolean save) {
+    public boolean unloadWorld(@NotNull String name, boolean save) {
         return this.unloadWorld(this.getWorld(name), save);
     }
 
     @Override
-    public boolean unloadWorld(World world, boolean save) {
+    public boolean unloadWorld(@org.jetbrains.annotations.Nullable World world, boolean save) {
         //Preconditions.checkState(!this.console.isIteratingOverLevels, "Cannot unload a world while worlds are being ticked"); // Paper - Cat - Temp disable. We'll see how this goes.
         if (world == null) {
             return false;
@@ -1344,14 +1345,14 @@ public final class CraftServer implements Server {
     }
 
     @Override
-    public World getWorld(String name) {
+    public World getWorld(@NotNull String name) {
         Validate.notNull(name, "Name cannot be null");
 
         return this.worlds.get(name.toLowerCase(java.util.Locale.ENGLISH));
     }
 
     @Override
-    public World getWorld(UUID uid) {
+    public @org.jetbrains.annotations.Nullable World getWorld(UUID uid) {
         for (World world : this.worlds.values()) {
             if (world.getUID().equals(uid)) {
                 return world;
@@ -1362,14 +1363,14 @@ public final class CraftServer implements Server {
 
     // Paper start
     @Override
-    public World getWorld(NamespacedKey worldKey) {
+    public @org.jetbrains.annotations.Nullable World getWorld(@NotNull NamespacedKey worldKey) {
         ServerLevel worldServer = console.getLevel(ResourceKey.create(net.minecraft.core.registries.Registries.DIMENSION, CraftNamespacedKey.toMinecraft(worldKey)));
         if (worldServer == null) return null;
         return worldServer.getWorld();
     }
     // Paper end
 
-    public void addWorld(World world) {
+    public void addWorld(@NotNull World world) {
         // Check if a World already exists with the UID.
         if (this.getWorld(world.getUID()) != null) {
             System.out.println("World " + world.getName() + " is a duplicate of another world and has been prevented from loading. Please delete the uid.dat file from " + world.getName() + "'s world directory if you want to be able to load the duplicate world.");
@@ -1379,12 +1380,12 @@ public final class CraftServer implements Server {
     }
 
     @Override
-    public WorldBorder createWorldBorder() {
+    public @NotNull WorldBorder createWorldBorder() {
         return new CraftWorldBorder(new net.minecraft.world.level.border.WorldBorder());
     }
 
     @Override
-    public Logger getLogger() {
+    public @NotNull Logger getLogger() {
         return this.logger;
     }
 
@@ -1397,7 +1398,7 @@ public final class CraftServer implements Server {
     // Paper end
 
     @Override
-    public PluginCommand getPluginCommand(String name) {
+    public @org.jetbrains.annotations.Nullable PluginCommand getPluginCommand(@NotNull String name) {
         Command command = this.commandMap.getCommand(name);
 
         if (command instanceof PluginCommand) {
@@ -1446,7 +1447,7 @@ public final class CraftServer implements Server {
     }
 
     @Override
-    public List<Recipe> getRecipesFor(ItemStack result) {
+    public @NotNull List<Recipe> getRecipesFor(@NotNull ItemStack result) {
         Validate.notNull(result, "Result cannot be null");
 
         List<Recipe> results = new ArrayList<Recipe>();
@@ -1465,18 +1466,18 @@ public final class CraftServer implements Server {
     }
 
     @Override
-    public Recipe getRecipe(NamespacedKey recipeKey) {
+    public Recipe getRecipe(@org.jetbrains.annotations.Nullable NamespacedKey recipeKey) {
         Preconditions.checkArgument(recipeKey != null, "recipeKey == null");
 
         return this.getServer().getRecipeManager().byKey(CraftNamespacedKey.toMinecraft(recipeKey)).map(net.minecraft.world.item.crafting.Recipe::toBukkitRecipe).orElse(null);
     }
 
     @Override
-    public Recipe getCraftingRecipe(ItemStack[] craftingMatrix, World world) {
+    public Recipe getCraftingRecipe(ItemStack @NotNull [] craftingMatrix, World world) {
         // Create a players Crafting Inventory
         AbstractContainerMenu container = new AbstractContainerMenu(null, -1) {
             @Override
-            public InventoryView getBukkitView() {
+            public @org.jetbrains.annotations.Nullable InventoryView getBukkitView() {
                 return null;
             }
 
@@ -1486,7 +1487,7 @@ public final class CraftServer implements Server {
             }
 
             @Override
-            public net.minecraft.world.item.ItemStack quickMoveStack(net.minecraft.world.entity.player.Player player, int slot) {
+            public net.minecraft.world.item.@NotNull ItemStack quickMoveStack(net.minecraft.world.entity.player.Player player, int slot) {
                 return net.minecraft.world.item.ItemStack.EMPTY;
             }
         };
@@ -1496,7 +1497,7 @@ public final class CraftServer implements Server {
     }
 
     @Override
-    public ItemStack craftItem(ItemStack[] craftingMatrix, World world, Player player) {
+    public @NotNull ItemStack craftItem(ItemStack @NotNull [] craftingMatrix, @org.jetbrains.annotations.Nullable World world, @org.jetbrains.annotations.Nullable Player player) {
         Preconditions.checkArgument(world != null, "world must not be null");
         Preconditions.checkArgument(player != null, "player must not be null");
 
@@ -1532,7 +1533,7 @@ public final class CraftServer implements Server {
         return CraftItemStack.asBukkitCopy(result);
     }
 
-    private Optional<CraftingRecipe> getNMSRecipe(ItemStack[] craftingMatrix, CraftingContainer inventoryCrafting, CraftWorld world) {
+    private @NotNull Optional<CraftingRecipe> getNMSRecipe(ItemStack @NotNull [] craftingMatrix, @NotNull CraftingContainer inventoryCrafting, @org.jetbrains.annotations.Nullable CraftWorld world) {
         Preconditions.checkArgument(craftingMatrix != null, "craftingMatrix must not be null");
         Preconditions.checkArgument(craftingMatrix.length == 9, "craftingMatrix must be an array of length 9");
         Preconditions.checkArgument(world != null, "world must not be null");
@@ -1545,7 +1546,7 @@ public final class CraftServer implements Server {
     }
 
     @Override
-    public Iterator<Recipe> recipeIterator() {
+    public @NotNull Iterator<Recipe> recipeIterator() {
         return new RecipeIterator();
     }
 
@@ -1560,7 +1561,7 @@ public final class CraftServer implements Server {
     }
 
     @Override
-    public boolean removeRecipe(NamespacedKey recipeKey) {
+    public boolean removeRecipe(@org.jetbrains.annotations.Nullable NamespacedKey recipeKey) {
         Preconditions.checkArgument(recipeKey != null, "recipeKey == null");
 
         ResourceLocation mcKey = CraftNamespacedKey.toMinecraft(recipeKey);
@@ -1568,7 +1569,7 @@ public final class CraftServer implements Server {
     }
 
     @Override
-    public Map<String, String[]> getCommandAliases() {
+    public @NotNull Map<String, String[]> getCommandAliases() {
         ConfigurationSection section = this.commandsConfiguration.getConfigurationSection("aliases");
         Map<String, String[]> result = new LinkedHashMap<String, String[]>();
 
@@ -1600,7 +1601,7 @@ public final class CraftServer implements Server {
 
     // Paper start
     @Override
-    public net.kyori.adventure.text.Component shutdownMessage() {
+    public net.kyori.adventure.text.@org.jetbrains.annotations.Nullable Component shutdownMessage() {
         String msg = getShutdownMessage();
         return msg != null ? net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().deserialize(msg) : null;
     }
@@ -1652,7 +1653,7 @@ public final class CraftServer implements Server {
         return this.console.isHardcore();
     }
 
-    public ChunkGenerator getGenerator(String world) {
+    public @org.jetbrains.annotations.Nullable ChunkGenerator getGenerator(@NotNull String world) {
         ConfigurationSection section = this.configuration.getConfigurationSection("worlds");
         ChunkGenerator result = null;
 
@@ -1688,7 +1689,7 @@ public final class CraftServer implements Server {
         return result;
     }
 
-    public BiomeProvider getBiomeProvider(String world) {
+    public @org.jetbrains.annotations.Nullable BiomeProvider getBiomeProvider(@NotNull String world) {
         ConfigurationSection section = this.configuration.getConfigurationSection("worlds");
         BiomeProvider result = null;
 
@@ -1726,7 +1727,7 @@ public final class CraftServer implements Server {
 
     @Override
     @Deprecated
-    public CraftMapView getMap(int id) {
+    public @org.jetbrains.annotations.Nullable CraftMapView getMap(int id) {
         MapItemSavedData worldmap = this.console.getLevel(net.minecraft.world.level.Level.OVERWORLD).getMapData("map_" + id);
         if (worldmap == null) {
             return null;
@@ -1735,7 +1736,7 @@ public final class CraftServer implements Server {
     }
 
     @Override
-    public CraftMapView createMap(World world) {
+    public @NotNull CraftMapView createMap(@NotNull World world) {
         Validate.notNull(world, "World cannot be null");
 
         net.minecraft.world.level.Level minecraftWorld = ((CraftWorld) world).getHandle();
@@ -1745,12 +1746,12 @@ public final class CraftServer implements Server {
     }
 
     @Override
-    public ItemStack createExplorerMap(World world, Location location, StructureType structureType) {
+    public @NotNull ItemStack createExplorerMap(@NotNull World world, @NotNull Location location, @NotNull StructureType structureType) {
         return this.createExplorerMap(world, location, structureType, 100, true);
     }
 
     @Override
-    public ItemStack createExplorerMap(World world, Location location, StructureType structureType, int radius, boolean findUnexplored) {
+    public @NotNull ItemStack createExplorerMap(@NotNull World world, @NotNull Location location, @NotNull StructureType structureType, int radius, boolean findUnexplored) {
         Validate.notNull(world, "World cannot be null");
         Validate.notNull(structureType, "StructureType cannot be null");
         Validate.notNull(structureType.getMapIcon(), "Cannot create explorer maps for StructureType " + structureType.getName());
@@ -1775,18 +1776,18 @@ public final class CraftServer implements Server {
 
     @Override
     @Deprecated // Paper
-    public int broadcast(String message, String permission) {
+    public int broadcast(@NotNull String message, @NotNull String permission) {
         // Paper start - Adventure
         return this.broadcast(net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().deserialize(message), permission);
     }
 
     @Override
-    public int broadcast(net.kyori.adventure.text.Component message) {
+    public int broadcast(net.kyori.adventure.text.@NotNull Component message) {
         return this.broadcast(message, BROADCAST_CHANNEL_USERS);
     }
 
     @Override
-    public int broadcast(net.kyori.adventure.text.Component message, String permission) {
+    public int broadcast(net.kyori.adventure.text.@NotNull Component message, @NotNull String permission) {
         // Paper end
         Set<CommandSender> recipients = new HashSet<>();
         for (Permissible permissible : this.getPluginManager().getPermissionSubscriptions(permission)) {
@@ -1813,7 +1814,7 @@ public final class CraftServer implements Server {
 
     // Paper start
     @Nullable
-    public UUID getPlayerUniqueId(String name) {
+    public UUID getPlayerUniqueId(@NotNull String name) {
         Player player = Bukkit.getPlayerExact(name);
         if (player != null) {
             return player.getUniqueId();
@@ -1832,7 +1833,7 @@ public final class CraftServer implements Server {
 
     @Override
     @Deprecated
-    public OfflinePlayer getOfflinePlayer(String name) {
+    public @NotNull OfflinePlayer getOfflinePlayer(@NotNull String name) {
         Validate.notNull(name, "Name cannot be null");
         Validate.notEmpty(name, "Name cannot be empty");
 
@@ -1863,7 +1864,7 @@ public final class CraftServer implements Server {
     // Paper start
     @Override
     @Nullable
-    public OfflinePlayer getOfflinePlayerIfCached(String name) {
+    public OfflinePlayer getOfflinePlayerIfCached(@NotNull String name) {
         Validate.notNull(name, "Name cannot be null");
         Validate.notEmpty(name, "Name cannot be empty");
 
@@ -1883,7 +1884,7 @@ public final class CraftServer implements Server {
     // Paper end
 
     @Override
-    public OfflinePlayer getOfflinePlayer(UUID id) {
+    public @NotNull OfflinePlayer getOfflinePlayer(@NotNull UUID id) {
         Validate.notNull(id, "UUID cannot be null");
 
         OfflinePlayer result = this.getPlayer(id);
@@ -1901,21 +1902,21 @@ public final class CraftServer implements Server {
     }
 
     @Override
-    public PlayerProfile createPlayerProfile(UUID uniqueId, String name) {
+    public @NotNull PlayerProfile createPlayerProfile(UUID uniqueId, String name) {
         return new CraftPlayerProfile(uniqueId, name);
     }
 
     @Override
-    public PlayerProfile createPlayerProfile(UUID uniqueId) {
+    public @NotNull PlayerProfile createPlayerProfile(UUID uniqueId) {
         return new CraftPlayerProfile(uniqueId, null);
     }
 
     @Override
-    public PlayerProfile createPlayerProfile(String name) {
+    public @NotNull PlayerProfile createPlayerProfile(String name) {
         return new CraftPlayerProfile(null, name);
     }
 
-    public OfflinePlayer getOfflinePlayer(GameProfile profile) {
+    public @NotNull OfflinePlayer getOfflinePlayer(@NotNull GameProfile profile) {
         OfflinePlayer player = new CraftOfflinePlayer(this, profile);
         this.offlinePlayers.put(profile.getId(), player);
         return player;
@@ -1923,26 +1924,26 @@ public final class CraftServer implements Server {
 
     @Override
     @SuppressWarnings("unchecked")
-    public Set<String> getIPBans() {
+    public @NotNull Set<String> getIPBans() {
         return this.playerList.getIpBans().getEntries().stream().map(IpBanListEntry::getUser).collect(Collectors.toSet());
     }
 
     @Override
-    public void banIP(String address) {
+    public void banIP(@NotNull String address) {
         Validate.notNull(address, "Address cannot be null.");
 
         this.getBanList(org.bukkit.BanList.Type.IP).addBan(address, null, null, null);
     }
 
     @Override
-    public void unbanIP(String address) {
+    public void unbanIP(@NotNull String address) {
         Validate.notNull(address, "Address cannot be null.");
 
         this.getBanList(org.bukkit.BanList.Type.IP).pardon(address);
     }
 
     @Override
-    public Set<OfflinePlayer> getBannedPlayers() {
+    public @NotNull Set<OfflinePlayer> getBannedPlayers() {
         Set<OfflinePlayer> result = new HashSet<OfflinePlayer>();
 
         for (UserBanListEntry entry : this.playerList.getBans().getValues()) {
@@ -1953,7 +1954,7 @@ public final class CraftServer implements Server {
     }
 
     @Override
-    public BanList getBanList(BanList.Type type) {
+    public @NotNull BanList getBanList(BanList.@NotNull Type type) {
         Validate.notNull(type, "Type cannot be null");
 
         switch (type) {
@@ -1982,7 +1983,7 @@ public final class CraftServer implements Server {
     }
 
     @Override
-    public Set<OfflinePlayer> getWhitelistedPlayers() {
+    public @NotNull Set<OfflinePlayer> getWhitelistedPlayers() {
         Set<OfflinePlayer> result = new LinkedHashSet<OfflinePlayer>();
 
         for (UserWhiteListEntry entry : this.playerList.getWhiteList().getValues()) {
@@ -1993,7 +1994,7 @@ public final class CraftServer implements Server {
     }
 
     @Override
-    public Set<OfflinePlayer> getOperators() {
+    public @NotNull Set<OfflinePlayer> getOperators() {
         Set<OfflinePlayer> result = new HashSet<OfflinePlayer>();
 
         for (ServerOpListEntry entry : this.playerList.getOps().getValues()) {
@@ -2009,12 +2010,12 @@ public final class CraftServer implements Server {
     }
 
     @Override
-    public GameMode getDefaultGameMode() {
+    public @NotNull GameMode getDefaultGameMode() {
         return GameMode.getByValue(this.console.getLevel(net.minecraft.world.level.Level.OVERWORLD).serverLevelData.getGameType().getId());
     }
 
     @Override
-    public void setDefaultGameMode(GameMode mode) {
+    public void setDefaultGameMode(@NotNull GameMode mode) {
         Validate.notNull(mode, "Mode cannot be null");
 
         for (World world : this.getWorlds()) {
@@ -2023,36 +2024,36 @@ public final class CraftServer implements Server {
     }
 
     @Override
-    public ConsoleCommandSender getConsoleSender() {
+    public @NotNull ConsoleCommandSender getConsoleSender() {
         return console.console;
     }
 
     // Paper start
     @Override
-    public CommandSender createCommandSender(final java.util.function.Consumer<? super net.kyori.adventure.text.Component> feedback) {
+    public @NotNull CommandSender createCommandSender(final java.util.function.@NotNull Consumer<? super net.kyori.adventure.text.Component> feedback) {
         return new io.papermc.paper.commands.FeedbackForwardingSender(feedback, this);
     }
     // Paper end
 
-    public EntityMetadataStore getEntityMetadata() {
+    public @NotNull EntityMetadataStore getEntityMetadata() {
         return this.entityMetadata;
     }
 
-    public PlayerMetadataStore getPlayerMetadata() {
+    public @NotNull PlayerMetadataStore getPlayerMetadata() {
         return this.playerMetadata;
     }
 
-    public WorldMetadataStore getWorldMetadata() {
+    public @NotNull WorldMetadataStore getWorldMetadata() {
         return this.worldMetadata;
     }
 
     @Override
-    public File getWorldContainer() {
+    public @NotNull File getWorldContainer() {
         return this.getServer().storageSource.getDimensionPath(net.minecraft.world.level.Level.OVERWORLD).getParent().toFile();
     }
 
     @Override
-    public OfflinePlayer[] getOfflinePlayers() {
+    public OfflinePlayer @NotNull [] getOfflinePlayers() {
         PlayerDataStorage storage = console.playerDataStorage;
         String[] files = storage.getPlayerDir().list(new DatFileFilter());
         Set<OfflinePlayer> players = new HashSet<OfflinePlayer>();
@@ -2071,12 +2072,12 @@ public final class CraftServer implements Server {
     }
 
     @Override
-    public Messenger getMessenger() {
+    public @NotNull Messenger getMessenger() {
         return this.messenger;
     }
 
     @Override
-    public void sendPluginMessage(Plugin source, String channel, byte[] message) {
+    public void sendPluginMessage(@NotNull Plugin source, @NotNull String channel, byte[] message) {
         StandardMessenger.validatePluginMessage(this.getMessenger(), source, channel, message);
 
         for (Player player : this.getOnlinePlayers()) {
@@ -2085,7 +2086,7 @@ public final class CraftServer implements Server {
     }
 
     @Override
-    public Set<String> getListeningPluginChannels() {
+    public @NotNull Set<String> getListeningPluginChannels() {
         Set<String> result = new HashSet<String>();
 
         for (Player player : this.getOnlinePlayers()) {
@@ -2096,54 +2097,54 @@ public final class CraftServer implements Server {
     }
 
     @Override
-    public Inventory createInventory(InventoryHolder owner, InventoryType type) {
+    public @NotNull Inventory createInventory(InventoryHolder owner, @NotNull InventoryType type) {
         Validate.isTrue(type.isCreatable(), "Cannot open an inventory of type ", type);
         return CraftInventoryCreator.INSTANCE.createInventory(owner, type);
     }
 
     // Paper start
     @Override
-    public Inventory createInventory(InventoryHolder owner, InventoryType type, net.kyori.adventure.text.Component title) {
+    public @NotNull Inventory createInventory(InventoryHolder owner, @NotNull InventoryType type, net.kyori.adventure.text.Component title) {
         Validate.isTrue(type.isCreatable(), "Cannot open an inventory of type ", type);
         return CraftInventoryCreator.INSTANCE.createInventory(owner, type, title);
     }
     // Paper end
 
     @Override
-    public Inventory createInventory(InventoryHolder owner, InventoryType type, String title) {
+    public @NotNull Inventory createInventory(InventoryHolder owner, @NotNull InventoryType type, String title) {
         Validate.isTrue(type.isCreatable(), "Cannot open an inventory of type ", type);
         return CraftInventoryCreator.INSTANCE.createInventory(owner, type, title);
     }
 
     @Override
-    public Inventory createInventory(InventoryHolder owner, int size) throws IllegalArgumentException {
+    public @NotNull Inventory createInventory(InventoryHolder owner, int size) throws IllegalArgumentException {
         Validate.isTrue(9 <= size && size <= 54 && size % 9 == 0, "Size for custom inventory must be a multiple of 9 between 9 and 54 slots (got " + size + ")");
         return CraftInventoryCreator.INSTANCE.createInventory(owner, size);
     }
 
     // Paper start
     @Override
-    public Inventory createInventory(InventoryHolder owner, int size, net.kyori.adventure.text.Component title) throws IllegalArgumentException {
+    public @NotNull Inventory createInventory(InventoryHolder owner, int size, net.kyori.adventure.text.Component title) throws IllegalArgumentException {
         Validate.isTrue(9 <= size && size <= 54 && size % 9 == 0, "Size for custom inventory must be a multiple of 9 between 9 and 54 slots (got " + size + ")");
         return CraftInventoryCreator.INSTANCE.createInventory(owner, size, title);
     }
     // Paper end
 
     @Override
-    public Inventory createInventory(InventoryHolder owner, int size, String title) throws IllegalArgumentException {
+    public @NotNull Inventory createInventory(InventoryHolder owner, int size, String title) throws IllegalArgumentException {
         Validate.isTrue(9 <= size && size <= 54 && size % 9 == 0, "Size for custom inventory must be a multiple of 9 between 9 and 54 slots (got " + size + ")");
         return CraftInventoryCreator.INSTANCE.createInventory(owner, size, title);
     }
 
     // Paper start
     @Override
-    public Merchant createMerchant(net.kyori.adventure.text.Component title) {
+    public @NotNull Merchant createMerchant(net.kyori.adventure.text.@org.jetbrains.annotations.Nullable Component title) {
         return new org.bukkit.craftbukkit.inventory.CraftMerchantCustom(title == null ? InventoryType.MERCHANT.defaultTitle() : title);
     }
     // Paper end
     @Override
     @Deprecated // Paper
-    public Merchant createMerchant(String title) {
+    public @NotNull Merchant createMerchant(@org.jetbrains.annotations.Nullable String title) {
         return new CraftMerchantCustom(title == null ? InventoryType.MERCHANT.getDefaultTitle() : title);
     }
 
@@ -2153,12 +2154,12 @@ public final class CraftServer implements Server {
     }
 
     @Override
-    public HelpMap getHelpMap() {
+    public @NotNull HelpMap getHelpMap() {
         return this.helpMap;
     }
 
     @Override // Paper - add override
-    public SimpleCommandMap getCommandMap() {
+    public @NotNull SimpleCommandMap getCommandMap() {
         return this.commandMap;
     }
 
@@ -2217,21 +2218,21 @@ public final class CraftServer implements Server {
 
     // Paper start
     @Override
-    public net.kyori.adventure.text.Component motd() {
+    public net.kyori.adventure.text.@NotNull Component motd() {
         return console.getComponentMotd();
     }
     // Paper end
     @Override
-    public String getMotd() {
+    public @NotNull String getMotd() {
         return this.console.getMotd();
     }
 
     @Override
-    public WarningState getWarningState() {
+    public @NotNull WarningState getWarningState() {
         return this.warningState;
     }
 
-    public List<String> tabComplete(CommandSender sender, String message, ServerLevel world, Vec3 pos, boolean forceCommand) {
+    public @NotNull List<String> tabComplete(CommandSender sender, @NotNull String message, @NotNull ServerLevel world, @org.jetbrains.annotations.Nullable Vec3 pos, boolean forceCommand) {
         if (!(sender instanceof Player)) {
             return ImmutableList.of();
         }
@@ -2250,7 +2251,7 @@ public final class CraftServer implements Server {
         return tabEvent.isCancelled() ? Collections.EMPTY_LIST : tabEvent.getCompletions();
     }
 
-    public List<String> tabCompleteCommand(Player player, String message, ServerLevel world, Vec3 pos) {
+    public @NotNull List<String> tabCompleteCommand(@NotNull Player player, @NotNull String message, @NotNull ServerLevel world, @org.jetbrains.annotations.Nullable Vec3 pos) {
         // Spigot Start
         if ( (org.spigotmc.SpigotConfig.tabComplete < 0 || message.length() <= org.spigotmc.SpigotConfig.tabComplete) && !message.contains( " " ) )
         {
@@ -2277,7 +2278,7 @@ public final class CraftServer implements Server {
         return completions == null ? ImmutableList.<String>of() : completions;
     }
 
-    public List<String> tabCompleteChat(Player player, String message) {
+    public @NotNull List<String> tabCompleteChat(@NotNull Player player, @NotNull String message) {
         List<String> completions = new ArrayList<String>();
         PlayerChatTabCompleteEvent event = new PlayerChatTabCompleteEvent(player, message, completions);
         String token = event.getLastToken();
@@ -2301,17 +2302,17 @@ public final class CraftServer implements Server {
     }
 
     @Override
-    public CraftItemFactory getItemFactory() {
+    public @NotNull CraftItemFactory getItemFactory() {
         return CraftItemFactory.instance();
     }
 
     @Override
-    public CraftScoreboardManager getScoreboardManager() {
+    public @NotNull CraftScoreboardManager getScoreboardManager() {
         return this.scoreboardManager;
     }
 
     @Override
-    public Criteria getScoreboardCriteria(String name) {
+    public @NotNull Criteria getScoreboardCriteria(@NotNull String name) {
         return CraftCriteria.getFromBukkit(name);
     }
 
@@ -2329,7 +2330,7 @@ public final class CraftServer implements Server {
     }
 
     @Override
-    public CraftIconCache loadServerIcon(File file) throws Exception {
+    public @NotNull CraftIconCache loadServerIcon(@NotNull File file) throws Exception {
         Validate.notNull(file, "File cannot be null");
         if (!file.isFile()) {
             throw new IllegalArgumentException(file + " is not a file");
@@ -2337,17 +2338,17 @@ public final class CraftServer implements Server {
         return CraftServer.loadServerIcon0(file);
     }
 
-    static CraftIconCache loadServerIcon0(File file) throws Exception {
+    static @NotNull CraftIconCache loadServerIcon0(@NotNull File file) throws Exception {
         return CraftServer.loadServerIcon0(ImageIO.read(file));
     }
 
     @Override
-    public CraftIconCache loadServerIcon(BufferedImage image) throws Exception {
+    public @NotNull CraftIconCache loadServerIcon(@NotNull BufferedImage image) throws Exception {
         Validate.notNull(image, "Image cannot be null");
         return CraftServer.loadServerIcon0(image);
     }
 
-    static CraftIconCache loadServerIcon0(BufferedImage image) throws Exception {
+    static @NotNull CraftIconCache loadServerIcon0(@NotNull BufferedImage image) throws Exception {
         ByteBuf bytebuf = Unpooled.buffer();
 
         Validate.isTrue(image.getWidth() == 64, "Must be 64 pixels wide");
@@ -2369,7 +2370,7 @@ public final class CraftServer implements Server {
     }
 
     @Override
-    public ChunkGenerator.ChunkData createChunkData(World world) {
+    public ChunkGenerator.@NotNull ChunkData createChunkData(@NotNull World world) {
         Validate.notNull(world, "World cannot be null");
         ServerLevel handle = ((CraftWorld) world).getHandle();
         return new OldCraftChunkData(world.getMinHeight(), world.getMaxHeight(), handle.registryAccess().registryOrThrow(Registries.BIOME), world); // Paper - Anti-Xray - Add parameters
@@ -2391,7 +2392,7 @@ public final class CraftServer implements Server {
 
     @Override
     @Deprecated(forRemoval = true)
-    public ChunkGenerator.ChunkData createVanillaChunkData(World world, int x, int z) {
+    public ChunkGenerator.@NotNull ChunkData createVanillaChunkData(@NotNull World world, int x, int z) {
         // do bunch of vanilla shit
         final net.minecraft.server.level.ServerLevel serverLevel = ((CraftWorld) world).getHandle();
         final net.minecraft.core.Registry<net.minecraft.world.level.biome.Biome> biomeRegistry = serverLevel.getServer().registryAccess().registryOrThrow(net.minecraft.core.registries.Registries.BIOME);
@@ -2460,12 +2461,12 @@ public final class CraftServer implements Server {
     // Paper end
 
     @Override
-    public BossBar createBossBar(String title, BarColor color, BarStyle style, BarFlag... flags) {
+    public @NotNull BossBar createBossBar(String title, @NotNull BarColor color, @NotNull BarStyle style, BarFlag... flags) {
         return new CraftBossBar(title, color, style, flags);
     }
 
     @Override
-    public KeyedBossBar createBossBar(NamespacedKey key, String title, BarColor barColor, BarStyle barStyle, BarFlag... barFlags) {
+    public @NotNull KeyedBossBar createBossBar(@org.jetbrains.annotations.Nullable NamespacedKey key, String title, @NotNull BarColor barColor, @NotNull BarStyle barStyle, BarFlag @NotNull ... barFlags) {
         Preconditions.checkArgument(key != null, "key");
 
         CustomBossEvent bossBattleCustom = this.getServer().getCustomBossEvents().create(CraftNamespacedKey.toMinecraft(key), CraftChatMessage.fromString(title, true)[0]);
@@ -2480,17 +2481,17 @@ public final class CraftServer implements Server {
     }
 
     @Override
-    public Iterator<KeyedBossBar> getBossBars() {
+    public @NotNull Iterator<KeyedBossBar> getBossBars() {
         return Iterators.unmodifiableIterator(Iterators.transform(this.getServer().getCustomBossEvents().getEvents().iterator(), new Function<CustomBossEvent, org.bukkit.boss.KeyedBossBar>() {
             @Override
-            public org.bukkit.boss.KeyedBossBar apply(CustomBossEvent bossBattleCustom) {
+            public org.bukkit.boss.@NotNull KeyedBossBar apply(@NotNull CustomBossEvent bossBattleCustom) {
                 return bossBattleCustom.getBukkitEntity();
             }
         }));
     }
 
     @Override
-    public KeyedBossBar getBossBar(NamespacedKey key) {
+    public @org.jetbrains.annotations.Nullable KeyedBossBar getBossBar(@org.jetbrains.annotations.Nullable NamespacedKey key) {
         Preconditions.checkArgument(key != null, "key");
         net.minecraft.server.bossevents.CustomBossEvent bossBattleCustom = this.getServer().getCustomBossEvents().get(CraftNamespacedKey.toMinecraft(key));
 
@@ -2498,7 +2499,7 @@ public final class CraftServer implements Server {
     }
 
     @Override
-    public boolean removeBossBar(NamespacedKey key) {
+    public boolean removeBossBar(@org.jetbrains.annotations.Nullable NamespacedKey key) {
         Preconditions.checkArgument(key != null, "key");
         net.minecraft.server.bossevents.CustomBossEvents bossBattleCustomData = this.getServer().getCustomBossEvents();
         net.minecraft.server.bossevents.CustomBossEvent bossBattleCustom = bossBattleCustomData.get(CraftNamespacedKey.toMinecraft(key));
@@ -2512,7 +2513,7 @@ public final class CraftServer implements Server {
     }
 
     @Override
-    public Entity getEntity(UUID uuid) {
+    public @org.jetbrains.annotations.Nullable Entity getEntity(@NotNull UUID uuid) {
         Validate.notNull(uuid, "UUID cannot be null");
 
         for (ServerLevel world : this.getServer().getAllLevels()) {
@@ -2526,7 +2527,7 @@ public final class CraftServer implements Server {
     }
 
     @Override
-    public org.bukkit.advancement.Advancement getAdvancement(NamespacedKey key) {
+    public org.bukkit.advancement.@org.jetbrains.annotations.Nullable Advancement getAdvancement(@org.jetbrains.annotations.Nullable NamespacedKey key) {
         Preconditions.checkArgument(key != null, "key");
 
         Advancement advancement = this.console.getAdvancements().getAdvancement(CraftNamespacedKey.toMinecraft(key));
@@ -2534,24 +2535,24 @@ public final class CraftServer implements Server {
     }
 
     @Override
-    public Iterator<org.bukkit.advancement.Advancement> advancementIterator() {
+    public @NotNull Iterator<org.bukkit.advancement.Advancement> advancementIterator() {
         return Iterators.unmodifiableIterator(Iterators.transform(this.console.getAdvancements().getAllAdvancements().iterator(), new Function<Advancement, org.bukkit.advancement.Advancement>() {
             @Override
-            public org.bukkit.advancement.Advancement apply(Advancement advancement) {
+            public org.bukkit.advancement.@NotNull Advancement apply(@NotNull Advancement advancement) {
                 return advancement.bukkit;
             }
         }));
     }
 
     @Override
-    public BlockData createBlockData(org.bukkit.Material material) {
+    public @NotNull BlockData createBlockData(org.bukkit.@org.jetbrains.annotations.Nullable Material material) {
         Validate.isTrue(material != null, "Must provide material");
 
         return this.createBlockData(material, (String) null);
     }
 
     @Override
-    public BlockData createBlockData(org.bukkit.Material material, Consumer<BlockData> consumer) {
+    public @NotNull BlockData createBlockData(org.bukkit.Material material, @org.jetbrains.annotations.Nullable Consumer<BlockData> consumer) {
         BlockData data = this.createBlockData(material);
 
         if (consumer != null) {
@@ -2562,14 +2563,14 @@ public final class CraftServer implements Server {
     }
 
     @Override
-    public BlockData createBlockData(String data) throws IllegalArgumentException {
+    public @NotNull BlockData createBlockData(@org.jetbrains.annotations.Nullable String data) throws IllegalArgumentException {
         Validate.isTrue(data != null, "Must provide data");
 
         return this.createBlockData(null, data);
     }
 
     @Override
-    public BlockData createBlockData(org.bukkit.Material material, String data) {
+    public @NotNull BlockData createBlockData(org.bukkit.@org.jetbrains.annotations.Nullable Material material, @org.jetbrains.annotations.Nullable String data) {
         Validate.isTrue(material != null || data != null, "Must provide one of material or data");
 
         return CraftBlockData.newData(material, data);
@@ -2577,7 +2578,7 @@ public final class CraftServer implements Server {
 
     @Override
     @SuppressWarnings("unchecked")
-    public <T extends Keyed> org.bukkit.Tag<T> getTag(String registry, NamespacedKey tag, Class<T> clazz) {
+    public <T extends Keyed> org.bukkit.@org.jetbrains.annotations.Nullable Tag<T> getTag(@NotNull String registry, @NotNull NamespacedKey tag, Class<T> clazz) {
         Validate.notNull(registry, "registry cannot be null");
         Validate.notNull(tag, "NamespacedKey cannot be null");
         Validate.notNull(clazz, "Class cannot be null");
@@ -2629,7 +2630,7 @@ public final class CraftServer implements Server {
 
     @Override
     @SuppressWarnings("unchecked")
-    public <T extends Keyed> Iterable<org.bukkit.Tag<T>> getTags(String registry, Class<T> clazz) {
+    public <T extends Keyed> @NotNull Iterable<org.bukkit.Tag<T>> getTags(@NotNull String registry, Class<T> clazz) {
         Validate.notNull(registry, "registry cannot be null");
         Validate.notNull(clazz, "Class cannot be null");
         switch (registry) {
@@ -2665,7 +2666,7 @@ public final class CraftServer implements Server {
     }
 
     @Override
-    public LootTable getLootTable(NamespacedKey key) {
+    public @org.jetbrains.annotations.Nullable LootTable getLootTable(@NotNull NamespacedKey key) {
         Validate.notNull(key, "NamespacedKey cannot be null");
 
         LootTables registry = this.getServer().getLootTables();
@@ -2679,7 +2680,7 @@ public final class CraftServer implements Server {
     }
 
     @Override
-    public List<Entity> selectEntities(CommandSender sender, String selector) {
+    public @NotNull List<Entity> selectEntities(@org.jetbrains.annotations.Nullable CommandSender sender, @org.jetbrains.annotations.Nullable String selector) {
         Preconditions.checkArgument(selector != null, "Selector cannot be null");
         Preconditions.checkArgument(sender != null, "Sender cannot be null");
 
@@ -2698,7 +2699,7 @@ public final class CraftServer implements Server {
     }
 
     @Override
-    public StructureManager getStructureManager() {
+    public @NotNull StructureManager getStructureManager() {
         return this.structureManager;
     }
 
@@ -2709,7 +2710,7 @@ public final class CraftServer implements Server {
 
     @Deprecated
     @Override
-    public UnsafeValues getUnsafe() {
+    public @NotNull UnsafeValues getUnsafe() {
         return CraftMagicNumbers.INSTANCE;
     }
 
@@ -2740,25 +2741,25 @@ public final class CraftServer implements Server {
 
         @Deprecated
         @Override
-        public YamlConfiguration getConfig()
+        public @NotNull YamlConfiguration getConfig()
         {
             return org.spigotmc.SpigotConfig.config;
         }
 
         @Override
-        public YamlConfiguration getBukkitConfig()
+        public @NotNull YamlConfiguration getBukkitConfig()
         {
             return configuration;
         }
 
         @Override
-        public YamlConfiguration getSpigotConfig()
+        public @NotNull YamlConfiguration getSpigotConfig()
         {
             return org.spigotmc.SpigotConfig.config;
         }
 
         @Override
-        public YamlConfiguration getPaperConfig()
+        public @NotNull YamlConfiguration getPaperConfig()
         {
             return CraftServer.this.console.paperConfigurations.createLegacyObject(CraftServer.this.console);
         }
@@ -2769,7 +2770,7 @@ public final class CraftServer implements Server {
         }
 
         @Override
-        public void broadcast(BaseComponent component) {
+        public void broadcast(@NotNull BaseComponent component) {
             for (Player player : CraftServer.this.getOnlinePlayers()) {
                 player.spigot().sendMessage(component);
             }
@@ -2783,7 +2784,7 @@ public final class CraftServer implements Server {
         }
     };
 
-    public org.bukkit.Server.Spigot spigot()
+    public org.bukkit.Server.@NotNull Spigot spigot()
     {
         return this.spigot;
     }
@@ -2791,7 +2792,7 @@ public final class CraftServer implements Server {
 
     // Paper start
     @SuppressWarnings({"rawtypes", "unchecked"})
-    public static java.nio.file.Path dumpHeap(java.nio.file.Path dir, String name) {
+    public static java.nio.file.@org.jetbrains.annotations.Nullable Path dumpHeap(java.nio.file.@NotNull Path dir, String name) {
         try {
             java.nio.file.Files.createDirectories(dir);
 
@@ -2820,7 +2821,7 @@ public final class CraftServer implements Server {
     }
     private Iterable<? extends net.kyori.adventure.audience.Audience> adventure$audiences;
     @Override
-    public Iterable<? extends net.kyori.adventure.audience.Audience> audiences() {
+    public @NotNull Iterable<? extends net.kyori.adventure.audience.Audience> audiences() {
         if (this.adventure$audiences == null) {
             this.adventure$audiences = com.google.common.collect.Iterables.concat(java.util.Collections.singleton(this.getConsoleSender()), this.getOnlinePlayers());
         }
@@ -2870,27 +2871,27 @@ public final class CraftServer implements Server {
     }
 
     @Override
-    public String getPermissionMessage() {
+    public @NotNull String getPermissionMessage() {
         return net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacyAmpersand().serialize(io.papermc.paper.configuration.GlobalConfiguration.get().messages.noPermission);
     }
 
     @Override
-    public net.kyori.adventure.text.Component permissionMessage() {
+    public net.kyori.adventure.text.@NotNull Component permissionMessage() {
         return io.papermc.paper.configuration.GlobalConfiguration.get().messages.noPermission;
     }
 
     @Override
-    public com.destroystokyo.paper.profile.PlayerProfile createProfile(@Nonnull UUID uuid) {
+    public com.destroystokyo.paper.profile.@NotNull PlayerProfile createProfile(@Nonnull UUID uuid) {
         return createProfile(uuid, null);
     }
 
     @Override
-    public com.destroystokyo.paper.profile.PlayerProfile createProfile(@Nonnull String name) {
+    public com.destroystokyo.paper.profile.@NotNull PlayerProfile createProfile(@Nonnull String name) {
         return createProfile(null, name);
     }
 
     @Override
-    public com.destroystokyo.paper.profile.PlayerProfile createProfile(@Nullable UUID uuid, @Nullable String name) {
+    public com.destroystokyo.paper.profile.@NotNull PlayerProfile createProfile(@Nullable UUID uuid, @Nullable String name) {
         Player player = uuid != null ? Bukkit.getPlayer(uuid) : (name != null ? Bukkit.getPlayerExact(name) : null);
         if (player != null) return new com.destroystokyo.paper.profile.CraftPlayerProfile((CraftPlayer) player);
 
@@ -2898,7 +2899,7 @@ public final class CraftServer implements Server {
     }
 
     @Override
-    public com.destroystokyo.paper.profile.PlayerProfile createProfileExact(@Nullable UUID uuid, @Nullable String name) {
+    public com.destroystokyo.paper.profile.@NotNull PlayerProfile createProfileExact(@Nullable UUID uuid, @Nullable String name) {
         Player player = uuid != null ? Bukkit.getPlayer(uuid) : (name != null ? Bukkit.getPlayerExact(name) : null);
         if (player == null) return new com.destroystokyo.paper.profile.CraftPlayerProfile(uuid, name);
 
@@ -2921,19 +2922,19 @@ public final class CraftServer implements Server {
         return net.minecraft.server.MinecraftServer.getServer().hasStopped();
     }
 
-    private com.destroystokyo.paper.entity.ai.MobGoals mobGoals = new com.destroystokyo.paper.entity.ai.PaperMobGoals();
+    private com.destroystokyo.paper.entity.ai.@NotNull MobGoals mobGoals = new com.destroystokyo.paper.entity.ai.PaperMobGoals();
     @Override
-    public com.destroystokyo.paper.entity.ai.MobGoals getMobGoals() {
+    public com.destroystokyo.paper.entity.ai.@NotNull MobGoals getMobGoals() {
         return mobGoals;
     }
 
     @Override
-    public io.papermc.paper.datapack.PaperDatapackManager getDatapackManager() {
+    public io.papermc.paper.datapack.@NotNull PaperDatapackManager getDatapackManager() {
         return datapackManager;
     }
 
     @Override
-    public CraftPotionBrewer getPotionBrewer() {
+    public @NotNull CraftPotionBrewer getPotionBrewer() {
         return this.potionBrewer;
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftSound.java b/src/main/java/org/bukkit/craftbukkit/CraftSound.java
index 5b68188d1a7b5a75e2f4b61e8d415b5784e0d8c0..7696bc85e542c8370625211acd0d5a90f6110b97 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftSound.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftSound.java
@@ -7,29 +7,32 @@ import net.minecraft.sounds.SoundEvent;
 import org.bukkit.Registry;
 import org.bukkit.Sound;
 import org.bukkit.craftbukkit.util.CraftNamespacedKey;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 public class CraftSound {
 
-    public static SoundEvent getSoundEffect(String s) {
+    public static @NotNull SoundEvent getSoundEffect(@NotNull String s) {
         SoundEvent effect = BuiltInRegistries.SOUND_EVENT.get(new ResourceLocation(s));
         Preconditions.checkArgument(effect != null, "Sound effect %s does not exist", s);
 
         return effect;
     }
 
-    public static SoundEvent getSoundEffect(Sound s) {
+    public static @NotNull SoundEvent getSoundEffect(@NotNull Sound s) {
         SoundEvent effect = BuiltInRegistries.SOUND_EVENT.get(CraftNamespacedKey.toMinecraft(s.getKey()));
         Preconditions.checkArgument(effect != null, "Sound effect %s does not exist", s);
 
         return effect;
     }
 
-    public static Sound getBukkit(SoundEvent soundEffect) {
+    public static @Nullable Sound getBukkit(@NotNull SoundEvent soundEffect) {
         return Registry.SOUNDS.get(CraftNamespacedKey.fromMinecraft(BuiltInRegistries.SOUND_EVENT.getKey(soundEffect)));
     }
 
     // Paper start
-    public static String getSound(Sound sound) {
+    public static @NotNull String getSound(@NotNull Sound sound) {
         return sound.getKey().getKey();
     }
     // Paper end
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftSoundGroup.java b/src/main/java/org/bukkit/craftbukkit/CraftSoundGroup.java
index 681e33e3aa32a29e65fc593fa79ffa4e6d275a8d..940d23af3f93bc60b32cc4f86f92fb81770a8734 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftSoundGroup.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftSoundGroup.java
@@ -4,13 +4,15 @@ import java.util.HashMap;
 import net.minecraft.world.level.block.SoundType;
 import org.bukkit.Sound;
 import org.bukkit.SoundGroup;
+import org.jetbrains.annotations.NotNull;
+
 
 public class CraftSoundGroup implements SoundGroup {
 
     private final net.minecraft.world.level.block.SoundType handle;
     private static final HashMap<SoundType, CraftSoundGroup> SOUND_GROUPS = new HashMap<>();
 
-    public static SoundGroup getSoundGroup(SoundType soundEffectType) {
+    public static @NotNull SoundGroup getSoundGroup(SoundType soundEffectType) {
         return CraftSoundGroup.SOUND_GROUPS.computeIfAbsent(soundEffectType, CraftSoundGroup::new);
     }
 
@@ -33,27 +35,27 @@ public class CraftSoundGroup implements SoundGroup {
     }
 
     @Override
-    public Sound getBreakSound() {
+    public @NotNull Sound getBreakSound() {
         return CraftSound.getBukkit(this.getHandle().breakSound);
     }
 
     @Override
-    public Sound getStepSound() {
+    public @NotNull Sound getStepSound() {
         return CraftSound.getBukkit(this.getHandle().getStepSound());
     }
 
     @Override
-    public Sound getPlaceSound() {
+    public @NotNull Sound getPlaceSound() {
         return CraftSound.getBukkit(this.getHandle().getPlaceSound());
     }
 
     @Override
-    public Sound getHitSound() {
+    public @NotNull Sound getHitSound() {
         return CraftSound.getBukkit(this.getHandle().hitSound);
     }
 
     @Override
-    public Sound getFallSound() {
+    public @NotNull Sound getFallSound() {
         return CraftSound.getBukkit(this.getHandle().getFallSound());
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftStatistic.java b/src/main/java/org/bukkit/craftbukkit/CraftStatistic.java
index 64ac41008c6f4367d7a3f20ccb181605ff3cd8da..639a186a8308f7da8bd865627da7736a2a7c3cda 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftStatistic.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftStatistic.java
@@ -16,6 +16,9 @@ import org.bukkit.Statistic;
 import org.bukkit.Statistic.Type;
 import org.bukkit.craftbukkit.util.CraftMagicNumbers;
 import org.bukkit.entity.EntityType;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 public enum CraftStatistic {
     DAMAGE_DEALT(Stats.DAMAGE_DEALT),
@@ -102,8 +105,8 @@ public enum CraftStatistic {
     INTERACT_WITH_SMITHING_TABLE(Stats.INTERACT_WITH_SMITHING_TABLE),
     STRIDER_ONE_CM(Stats.STRIDER_ONE_CM);
     private final ResourceLocation minecraftKey;
-    private final org.bukkit.Statistic bukkit;
-    private static final BiMap<ResourceLocation, org.bukkit.Statistic> statistics;
+    private final org.bukkit.@NotNull Statistic bukkit;
+    private static final @NotNull BiMap<ResourceLocation, org.bukkit.Statistic> statistics;
 
     static {
         ImmutableBiMap.Builder<ResourceLocation, org.bukkit.Statistic> statisticBuilder = ImmutableBiMap.builder();
@@ -121,7 +124,7 @@ public enum CraftStatistic {
         Preconditions.checkState(this.bukkit != null, "Bukkit statistic %s does not exist", this.name());
     }
 
-    public static org.bukkit.Statistic getBukkitStatistic(net.minecraft.stats.Stat<?> statistic) {
+    public static org.bukkit.Statistic getBukkitStatistic(net.minecraft.stats.@NotNull Stat<?> statistic) {
         Registry statRegistry = statistic.getType().getRegistry();
         ResourceLocation nmsKey = BuiltInRegistries.STAT_TYPE.getKey(statistic.getType());
 
@@ -132,7 +135,7 @@ public enum CraftStatistic {
         return statistics.get(nmsKey);
     }
 
-    public static net.minecraft.stats.Stat getNMSStatistic(org.bukkit.Statistic bukkit) {
+    public static net.minecraft.stats.@NotNull Stat getNMSStatistic(org.bukkit.@NotNull Statistic bukkit) {
         Preconditions.checkArgument(bukkit.getType() == Statistic.Type.UNTYPED, "This method only accepts untyped statistics");
 
         net.minecraft.stats.Stat<ResourceLocation> nms = Stats.CUSTOM.get(statistics.inverse().get(bukkit));
@@ -141,7 +144,7 @@ public enum CraftStatistic {
         return nms;
     }
 
-    public static net.minecraft.stats.Stat getMaterialStatistic(org.bukkit.Statistic stat, Material material) {
+    public static net.minecraft.stats.@Nullable Stat getMaterialStatistic(org.bukkit.Statistic stat, Material material) {
         try {
             if (stat == Statistic.MINE_BLOCK) {
                 return Stats.BLOCK_MINED.get(CraftMagicNumbers.getBlock(material));
@@ -167,7 +170,7 @@ public enum CraftStatistic {
         return null;
     }
 
-    public static net.minecraft.stats.Stat getEntityStatistic(org.bukkit.Statistic stat, EntityType entity) {
+    public static net.minecraft.stats.@Nullable Stat getEntityStatistic(org.bukkit.Statistic stat, @NotNull EntityType entity) {
         if (entity.getName() != null) {
             net.minecraft.world.entity.EntityType<?> nmsEntity = BuiltInRegistries.ENTITY_TYPE.get(new ResourceLocation(entity.getName()));
 
@@ -181,12 +184,12 @@ public enum CraftStatistic {
         return null;
     }
 
-    public static EntityType getEntityTypeFromStatistic(net.minecraft.stats.Stat<net.minecraft.world.entity.EntityType<?>> statistic) {
+    public static @Nullable EntityType getEntityTypeFromStatistic(net.minecraft.stats.@NotNull Stat<net.minecraft.world.entity.EntityType<?>> statistic) {
         ResourceLocation name = net.minecraft.world.entity.EntityType.getKey(statistic.getValue());
         return EntityType.fromName(name.getPath());
     }
 
-    public static Material getMaterialFromStatistic(net.minecraft.stats.Stat<?> statistic) {
+    public static @Nullable Material getMaterialFromStatistic(net.minecraft.stats.@NotNull Stat<?> statistic) {
         if (statistic.getValue() instanceof Item) {
             return CraftMagicNumbers.getMaterial((Item) statistic.getValue());
         }
@@ -196,31 +199,31 @@ public enum CraftStatistic {
         return null;
     }
 
-    public static void incrementStatistic(ServerStatsCounter manager, Statistic statistic) {
+    public static void incrementStatistic(@NotNull ServerStatsCounter manager, @NotNull Statistic statistic) {
         incrementStatistic(manager, statistic, 1);
     }
 
-    public static void decrementStatistic(ServerStatsCounter manager, Statistic statistic) {
+    public static void decrementStatistic(@NotNull ServerStatsCounter manager, @NotNull Statistic statistic) {
         decrementStatistic(manager, statistic, 1);
     }
 
-    public static int getStatistic(ServerStatsCounter manager, Statistic statistic) {
+    public static int getStatistic(@NotNull ServerStatsCounter manager, @NotNull Statistic statistic) {
         Validate.notNull(statistic, "Statistic cannot be null");
         Validate.isTrue(statistic.getType() == Type.UNTYPED, "Must supply additional paramater for this statistic");
         return manager.getValue(CraftStatistic.getNMSStatistic(statistic));
     }
 
-    public static void incrementStatistic(ServerStatsCounter manager, Statistic statistic, int amount) {
+    public static void incrementStatistic(@NotNull ServerStatsCounter manager, @NotNull Statistic statistic, int amount) {
         Validate.isTrue(amount > 0, "Amount must be greater than 0");
         setStatistic(manager, statistic, getStatistic(manager, statistic) + amount);
     }
 
-    public static void decrementStatistic(ServerStatsCounter manager, Statistic statistic, int amount) {
+    public static void decrementStatistic(@NotNull ServerStatsCounter manager, @NotNull Statistic statistic, int amount) {
         Validate.isTrue(amount > 0, "Amount must be greater than 0");
         setStatistic(manager, statistic, getStatistic(manager, statistic) - amount);
     }
 
-    public static void setStatistic(ServerStatsCounter manager, Statistic statistic, int newValue) {
+    public static void setStatistic(@NotNull ServerStatsCounter manager, @NotNull Statistic statistic, int newValue) {
         Validate.notNull(statistic, "Statistic cannot be null");
         Validate.isTrue(statistic.getType() == Type.UNTYPED, "Must supply additional paramater for this statistic");
         Validate.isTrue(newValue >= 0, "Value must be greater than or equal to 0");
@@ -228,15 +231,15 @@ public enum CraftStatistic {
         manager.setValue(null, nmsStatistic, newValue);;
     }
 
-    public static void incrementStatistic(ServerStatsCounter manager, Statistic statistic, Material material) {
+    public static void incrementStatistic(@NotNull ServerStatsCounter manager, @NotNull Statistic statistic, Material material) {
         incrementStatistic(manager, statistic, material, 1);
     }
 
-    public static void decrementStatistic(ServerStatsCounter manager, Statistic statistic, Material material) {
+    public static void decrementStatistic(@NotNull ServerStatsCounter manager, @NotNull Statistic statistic, Material material) {
         decrementStatistic(manager, statistic, material, 1);
     }
 
-    public static int getStatistic(ServerStatsCounter manager, Statistic statistic, Material material) {
+    public static int getStatistic(@NotNull ServerStatsCounter manager, @NotNull Statistic statistic, Material material) {
         Validate.notNull(statistic, "Statistic cannot be null");
         Validate.notNull(material, "Material cannot be null");
         Validate.isTrue(statistic.getType() == Type.BLOCK || statistic.getType() == Type.ITEM, "This statistic does not take a Material parameter");
@@ -245,17 +248,17 @@ public enum CraftStatistic {
         return manager.getValue(nmsStatistic);
     }
 
-    public static void incrementStatistic(ServerStatsCounter manager, Statistic statistic, Material material, int amount) {
+    public static void incrementStatistic(@NotNull ServerStatsCounter manager, @NotNull Statistic statistic, Material material, int amount) {
         Validate.isTrue(amount > 0, "Amount must be greater than 0");
         setStatistic(manager, statistic, material, getStatistic(manager, statistic, material) + amount);
     }
 
-    public static void decrementStatistic(ServerStatsCounter manager, Statistic statistic, Material material, int amount) {
+    public static void decrementStatistic(@NotNull ServerStatsCounter manager, @NotNull Statistic statistic, Material material, int amount) {
         Validate.isTrue(amount > 0, "Amount must be greater than 0");
         setStatistic(manager, statistic, material, getStatistic(manager, statistic, material) - amount);
     }
 
-    public static void setStatistic(ServerStatsCounter manager, Statistic statistic, Material material, int newValue) {
+    public static void setStatistic(@NotNull ServerStatsCounter manager, @NotNull Statistic statistic, Material material, int newValue) {
         Validate.notNull(statistic, "Statistic cannot be null");
         Validate.notNull(material, "Material cannot be null");
         Validate.isTrue(newValue >= 0, "Value must be greater than or equal to 0");
@@ -265,15 +268,15 @@ public enum CraftStatistic {
         manager.setValue(null, nmsStatistic, newValue);
     }
 
-    public static void incrementStatistic(ServerStatsCounter manager, Statistic statistic, EntityType entityType) {
+    public static void incrementStatistic(@NotNull ServerStatsCounter manager, @NotNull Statistic statistic, @NotNull EntityType entityType) {
         incrementStatistic(manager, statistic, entityType, 1);
     }
 
-    public static void decrementStatistic(ServerStatsCounter manager, Statistic statistic, EntityType entityType) {
+    public static void decrementStatistic(@NotNull ServerStatsCounter manager, @NotNull Statistic statistic, @NotNull EntityType entityType) {
         decrementStatistic(manager, statistic, entityType, 1);
     }
 
-    public static int getStatistic(ServerStatsCounter manager, Statistic statistic, EntityType entityType) {
+    public static int getStatistic(@NotNull ServerStatsCounter manager, @NotNull Statistic statistic, @NotNull EntityType entityType) {
         Validate.notNull(statistic, "Statistic cannot be null");
         Validate.notNull(entityType, "EntityType cannot be null");
         Validate.isTrue(statistic.getType() == Type.ENTITY, "This statistic does not take an EntityType parameter");
@@ -282,17 +285,17 @@ public enum CraftStatistic {
         return manager.getValue(nmsStatistic);
     }
 
-    public static void incrementStatistic(ServerStatsCounter manager, Statistic statistic, EntityType entityType, int amount) {
+    public static void incrementStatistic(@NotNull ServerStatsCounter manager, @NotNull Statistic statistic, @NotNull EntityType entityType, int amount) {
         Validate.isTrue(amount > 0, "Amount must be greater than 0");
         setStatistic(manager, statistic, entityType, getStatistic(manager, statistic, entityType) + amount);
     }
 
-    public static void decrementStatistic(ServerStatsCounter manager, Statistic statistic, EntityType entityType, int amount) {
+    public static void decrementStatistic(@NotNull ServerStatsCounter manager, @NotNull Statistic statistic, @NotNull EntityType entityType, int amount) {
         Validate.isTrue(amount > 0, "Amount must be greater than 0");
         setStatistic(manager, statistic, entityType, getStatistic(manager, statistic, entityType) - amount);
     }
 
-    public static void setStatistic(ServerStatsCounter manager, Statistic statistic, EntityType entityType, int newValue) {
+    public static void setStatistic(@NotNull ServerStatsCounter manager, @NotNull Statistic statistic, @NotNull EntityType entityType, int newValue) {
         Validate.notNull(statistic, "Statistic cannot be null");
         Validate.notNull(entityType, "EntityType cannot be null");
         Validate.isTrue(newValue >= 0, "Value must be greater than or equal to 0");
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftWorld.java b/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
index f8d321e925bf2708e51590542325c1bdc67d5964..755769c6db8f7a6c85031fbe57bbfd58fd1c9882 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
@@ -134,6 +134,9 @@ import org.bukkit.util.Consumer;
 import org.bukkit.util.RayTraceResult;
 import org.bukkit.util.StructureSearchResult;
 import org.bukkit.util.Vector;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 public class CraftWorld extends CraftRegionAccessor implements World {
     public static final int CUSTOM_DIMENSION_OFFSET = 10;
@@ -202,7 +205,7 @@ public class CraftWorld extends CraftRegionAccessor implements World {
     }
 
     @Override
-    public BiomeProvider vanillaBiomeProvider() {
+    public @NotNull BiomeProvider vanillaBiomeProvider() {
         net.minecraft.server.level.ServerChunkCache serverCache = this.getHandle().chunkSource;
 
         final net.minecraft.world.level.biome.BiomeSource biomeSource = serverCache.getGenerator().getBiomeSource();
@@ -214,12 +217,12 @@ public class CraftWorld extends CraftRegionAccessor implements World {
             .toList();
         return new BiomeProvider() {
             @Override
-            public Biome getBiome(final org.bukkit.generator.WorldInfo worldInfo, final int x, final int y, final int z) {
+            public @NotNull Biome getBiome(final org.bukkit.generator.WorldInfo worldInfo, final int x, final int y, final int z) {
                 return CraftBlock.biomeBaseToBiome(biomeRegistry, biomeSource.getNoiseBiome(x >> 2, y >> 2, z >> 2, sampler));
             }
 
             @Override
-            public List<Biome> getBiomes(final org.bukkit.generator.WorldInfo worldInfo) {
+            public @NotNull List<Biome> getBiomes(final org.bukkit.generator.WorldInfo worldInfo) {
                 return possibleBiomes;
             }
         };
@@ -244,7 +247,7 @@ public class CraftWorld extends CraftRegionAccessor implements World {
     }
 
     @Override
-    public Block getBlockAt(int x, int y, int z) {
+    public @NotNull Block getBlockAt(int x, int y, int z) {
         return CraftBlock.at(world, new BlockPos(x, y, z));
     }
 
@@ -255,7 +258,7 @@ public class CraftWorld extends CraftRegionAccessor implements World {
 
     // Paper start - Implement heightmap api
     @Override
-    public int getHighestBlockYAt(final int x, final int z, final com.destroystokyo.paper.HeightmapType heightmap) throws UnsupportedOperationException {
+    public int getHighestBlockYAt(final int x, final int z, final com.destroystokyo.paper.@NotNull HeightmapType heightmap) throws UnsupportedOperationException {
         this.getChunkAt(x >> 4, z >> 4); // heightmap will ret 0 on unloaded areas
 
         switch (heightmap) {
@@ -277,14 +280,14 @@ public class CraftWorld extends CraftRegionAccessor implements World {
     // Paper end
 
     @Override
-    public Location getSpawnLocation() {
+    public @NotNull Location getSpawnLocation() {
         BlockPos spawn = this.world.getSharedSpawnPos();
         float yaw = this.world.getSharedSpawnAngle();
         return new Location(this, spawn.getX(), spawn.getY(), spawn.getZ(), yaw, 0);
     }
 
     @Override
-    public boolean setSpawnLocation(Location location) {
+    public boolean setSpawnLocation(@NotNull Location location) {
         Preconditions.checkArgument(location != null, "location");
 
         return this.equals(location.getWorld()) ? this.setSpawnLocation(location.getBlockX(), location.getBlockY(), location.getBlockZ(), location.getYaw()) : false;
@@ -328,7 +331,7 @@ public class CraftWorld extends CraftRegionAccessor implements World {
     // Paper end
 
     @Override
-    public Chunk getChunkAt(int x, int z) {
+    public @NotNull Chunk getChunkAt(int x, int z) {
         warnUnsafeChunk("getting a faraway chunk", x, z); // Paper
         // Paper start - add ticket to hold chunk for a little while longer if plugin accesses it
         net.minecraft.world.level.chunk.LevelChunk chunk = world.getChunkSource().getChunkAtIfLoadedImmediately(x, z);
@@ -347,7 +350,7 @@ public class CraftWorld extends CraftRegionAccessor implements World {
     // Paper end
 
     @Override
-    public Chunk getChunkAt(Block block) {
+    public @NotNull Chunk getChunkAt(@NotNull Block block) {
         Preconditions.checkArgument(block != null, "null block");
 
         return this.getChunkAt(block.getX() >> 4, block.getZ() >> 4);
@@ -382,7 +385,7 @@ public class CraftWorld extends CraftRegionAccessor implements World {
     }
 
     @Override
-    public Chunk[] getLoadedChunks() {
+    public Chunk @NotNull [] getLoadedChunks() {
         List<ChunkHolder> chunks = io.papermc.paper.chunk.system.ChunkSystem.getVisibleChunkHolders(this.world); // Paper
         return chunks.stream().map(ChunkHolder::getFullChunkNow).filter(Objects::nonNull).map(net.minecraft.world.level.chunk.LevelChunk::getBukkitChunk).toArray(Chunk[]::new);
     }
@@ -393,7 +396,7 @@ public class CraftWorld extends CraftRegionAccessor implements World {
     }
 
     @Override
-    public boolean unloadChunk(Chunk chunk) {
+    public boolean unloadChunk(@NotNull Chunk chunk) {
         return this.unloadChunk(chunk.getX(), chunk.getZ());
     }
 
@@ -580,14 +583,14 @@ public class CraftWorld extends CraftRegionAccessor implements World {
     }
 
     @Override
-    public boolean isChunkLoaded(Chunk chunk) {
+    public boolean isChunkLoaded(@NotNull Chunk chunk) {
         Preconditions.checkArgument(chunk != null, "null chunk");
 
         return this.isChunkLoaded(chunk.getX(), chunk.getZ());
     }
 
     @Override
-    public void loadChunk(Chunk chunk) {
+    public void loadChunk(@NotNull Chunk chunk) {
         Preconditions.checkArgument(chunk != null, "null chunk");
 
         this.loadChunk(chunk.getX(), chunk.getZ());
@@ -595,7 +598,7 @@ public class CraftWorld extends CraftRegionAccessor implements World {
     }
 
     @Override
-    public boolean addPluginChunkTicket(int x, int z, Plugin plugin) {
+    public boolean addPluginChunkTicket(int x, int z, @NotNull Plugin plugin) {
         warnUnsafeChunk("adding a faraway chunk ticket", x, z); // Paper
         Preconditions.checkArgument(plugin != null, "null plugin");
         Preconditions.checkArgument(plugin.isEnabled(), "plugin is not enabled");
@@ -611,7 +614,7 @@ public class CraftWorld extends CraftRegionAccessor implements World {
     }
 
     @Override
-    public boolean removePluginChunkTicket(int x, int z, Plugin plugin) {
+    public boolean removePluginChunkTicket(int x, int z, @NotNull Plugin plugin) {
         Preconditions.checkNotNull(plugin, "null plugin");
 
         DistanceManager chunkDistanceManager = this.world.getChunkSource().chunkMap.distanceManager;
@@ -619,7 +622,7 @@ public class CraftWorld extends CraftRegionAccessor implements World {
     }
 
     @Override
-    public void removePluginChunkTickets(Plugin plugin) {
+    public void removePluginChunkTickets(@NotNull Plugin plugin) {
         Preconditions.checkNotNull(plugin, "null plugin");
 
         DistanceManager chunkDistanceManager = this.world.getChunkSource().chunkMap.distanceManager;
@@ -627,13 +630,13 @@ public class CraftWorld extends CraftRegionAccessor implements World {
     }
 
     @Override
-    public Collection<Plugin> getPluginChunkTickets(int x, int z) {
+    public @NotNull Collection<Plugin> getPluginChunkTickets(int x, int z) {
         DistanceManager chunkDistanceManager = this.world.getChunkSource().chunkMap.distanceManager;
         return chunkDistanceManager.getChunkHolderManager().getPluginChunkTickets(x, z); // Paper - rewrite chunk system
     }
 
     @Override
-    public Map<Plugin, Collection<Chunk>> getPluginChunkTickets() {
+    public @NotNull Map<Plugin, Collection<Chunk>> getPluginChunkTickets() {
         Map<Plugin, ImmutableList.Builder<Chunk>> ret = new HashMap<>();
         DistanceManager chunkDistanceManager = this.world.getChunkSource().chunkMap.distanceManager;
 
@@ -670,7 +673,7 @@ public class CraftWorld extends CraftRegionAccessor implements World {
     }
 
     @Override
-    public Collection<Chunk> getForceLoadedChunks() {
+    public @NotNull Collection<Chunk> getForceLoadedChunks() {
         Set<Chunk> chunks = new HashSet<>();
 
         for (long coord : this.getHandle().getForcedChunks()) {
@@ -685,12 +688,12 @@ public class CraftWorld extends CraftRegionAccessor implements World {
     }
 
     @Override
-    public org.bukkit.entity.Item dropItem(Location loc, ItemStack item) {
+    public org.bukkit.entity.@NotNull Item dropItem(@NotNull Location loc, ItemStack item) {
         return this.dropItem(loc, item, null);
     }
 
     @Override
-    public org.bukkit.entity.Item dropItem(Location loc, ItemStack item, Consumer<org.bukkit.entity.Item> function) {
+    public org.bukkit.entity.@NotNull Item dropItem(@NotNull Location loc, ItemStack item, @Nullable Consumer<org.bukkit.entity.Item> function) {
         Validate.notNull(item, "Cannot drop a Null item.");
         ItemEntity entity = new ItemEntity(this.world, loc.getX(), loc.getY(), loc.getZ(), CraftItemStack.asNMSCopy(item));
         entity.pickupDelay = 10;
@@ -702,12 +705,12 @@ public class CraftWorld extends CraftRegionAccessor implements World {
     }
 
     @Override
-    public org.bukkit.entity.Item dropItemNaturally(Location loc, ItemStack item) {
+    public org.bukkit.entity.@NotNull Item dropItemNaturally(Location loc, ItemStack item) {
         return this.dropItemNaturally(loc, item, null);
     }
 
     @Override
-    public org.bukkit.entity.Item dropItemNaturally(Location loc, ItemStack item, Consumer<org.bukkit.entity.Item> function) {
+    public org.bukkit.entity.@NotNull Item dropItemNaturally(Location loc, ItemStack item, Consumer<org.bukkit.entity.Item> function) {
         double xs = (world.random.nextFloat() * 0.5F) + 0.25D;
         double ys = (world.random.nextFloat() * 0.5F) + 0.25D;
         double zs = (world.random.nextFloat() * 0.5F) + 0.25D;
@@ -719,12 +722,12 @@ public class CraftWorld extends CraftRegionAccessor implements World {
     }
 
     @Override
-    public Arrow spawnArrow(Location loc, Vector velocity, float speed, float spread) {
+    public @NotNull Arrow spawnArrow(@NotNull Location loc, @NotNull Vector velocity, float speed, float spread) {
         return this.spawnArrow(loc, velocity, speed, spread, Arrow.class);
     }
 
     @Override
-    public <T extends AbstractArrow> T spawnArrow(Location loc, Vector velocity, float speed, float spread, Class<T> clazz) {
+    public <T extends AbstractArrow> @NotNull T spawnArrow(@NotNull Location loc, @NotNull Vector velocity, float speed, float spread, @NotNull Class<T> clazz) {
         Validate.notNull(loc, "Can not spawn arrow with a null location");
         Validate.notNull(velocity, "Can not spawn arrow with a null velocity");
         Validate.notNull(clazz, "Can not spawn an arrow with no class");
@@ -748,7 +751,7 @@ public class CraftWorld extends CraftRegionAccessor implements World {
     }
 
     @Override
-    public LightningStrike strikeLightning(Location loc) {
+    public @NotNull LightningStrike strikeLightning(@NotNull Location loc) {
         LightningBolt lightning = EntityType.LIGHTNING_BOLT.create(world);
         lightning.moveTo(loc.getX(), loc.getY(), loc.getZ());
         this.world.strikeLightning(lightning, LightningStrikeEvent.Cause.CUSTOM);
@@ -756,7 +759,7 @@ public class CraftWorld extends CraftRegionAccessor implements World {
     }
 
     @Override
-    public LightningStrike strikeLightningEffect(Location loc) {
+    public @NotNull LightningStrike strikeLightningEffect(@NotNull Location loc) {
         LightningBolt lightning = EntityType.LIGHTNING_BOLT.create(world);
         lightning.moveTo(loc.getX(), loc.getY(), loc.getZ());
         lightning.setVisualOnly(true);
@@ -766,7 +769,7 @@ public class CraftWorld extends CraftRegionAccessor implements World {
 
     // Paper start
     @Override
-    public Location findLightningRod(Location location) {
+    public Location findLightningRod(@NotNull Location location) {
         return this.world.findLightningRod(io.papermc.paper.util.MCUtil.toBlockPosition(location))
             .map(blockPos -> io.papermc.paper.util.MCUtil.toLocation(this.world, blockPos)
                 // get the actual rod pos
@@ -775,19 +778,19 @@ public class CraftWorld extends CraftRegionAccessor implements World {
     }
 
     @Override
-    public Location findLightningTarget(Location location) {
+    public Location findLightningTarget(@NotNull Location location) {
         final BlockPos pos = this.world.findLightningTargetAround(io.papermc.paper.util.MCUtil.toBlockPosition(location), true);
         return pos == null ? null : io.papermc.paper.util.MCUtil.toLocation(this.world, pos);
     }
     // Paper end
 
     @Override
-    public boolean generateTree(Location loc, TreeType type) {
+    public boolean generateTree(@NotNull Location loc, TreeType type) {
         return generateTree(loc, CraftWorld.rand, type);
     }
 
     @Override
-    public boolean generateTree(Location loc, TreeType type, BlockChangeDelegate delegate) {
+    public boolean generateTree(@NotNull Location loc, TreeType type, @NotNull BlockChangeDelegate delegate) {
         world.captureTreeGeneration = true;
         world.captureBlockStates = true;
         boolean grownTree = this.generateTree(loc, type);
@@ -811,22 +814,22 @@ public class CraftWorld extends CraftRegionAccessor implements World {
     }
 
     @Override
-    public String getName() {
+    public @NotNull String getName() {
         return world.serverLevelData.getLevelName();
     }
 
     @Override
-    public UUID getUID() {
+    public @NotNull UUID getUID() {
         return world.uuid;
     }
 
     @Override
-    public NamespacedKey getKey() {
+    public @NotNull NamespacedKey getKey() {
         return CraftNamespacedKey.fromMinecraft(this.world.dimension().location());
     }
 
     @Override
-    public String toString() {
+    public @NotNull String toString() {
         return "CraftWorld{name=" + this.getName() + '}';
     }
 
@@ -897,33 +900,33 @@ public class CraftWorld extends CraftRegionAccessor implements World {
     }
 
     @Override
-    public boolean createExplosion(double x, double y, double z, float power, boolean setFire, boolean breakBlocks, Entity source) {
+    public boolean createExplosion(double x, double y, double z, float power, boolean setFire, boolean breakBlocks, @Nullable Entity source) {
         return !this.world.explode(source == null ? null : ((CraftEntity) source).getHandle(), x, y, z, power, setFire, breakBlocks ? net.minecraft.world.level.Level.ExplosionInteraction.MOB : net.minecraft.world.level.Level.ExplosionInteraction.NONE).wasCanceled;
     }
     // Paper start
     @Override
-    public boolean createExplosion(Entity source, Location loc, float power, boolean setFire, boolean breakBlocks) {
+    public boolean createExplosion(@Nullable Entity source, @NotNull Location loc, float power, boolean setFire, boolean breakBlocks) {
         return !world.explode(source != null ? ((org.bukkit.craftbukkit.entity.CraftEntity) source).getHandle() : null, loc.getX(), loc.getY(), loc.getZ(), power, setFire, breakBlocks ? net.minecraft.world.level.Level.ExplosionInteraction.MOB : net.minecraft.world.level.Level.ExplosionInteraction.NONE).wasCanceled;
     }
     // Paper end
 
     @Override
-    public boolean createExplosion(Location loc, float power) {
+    public boolean createExplosion(@NotNull Location loc, float power) {
         return this.createExplosion(loc, power, false);
     }
 
     @Override
-    public boolean createExplosion(Location loc, float power, boolean setFire) {
+    public boolean createExplosion(@NotNull Location loc, float power, boolean setFire) {
         return this.createExplosion(loc, power, setFire, true);
     }
 
     @Override
-    public boolean createExplosion(Location loc, float power, boolean setFire, boolean breakBlocks) {
+    public boolean createExplosion(@NotNull Location loc, float power, boolean setFire, boolean breakBlocks) {
         return this.createExplosion(loc, power, setFire, breakBlocks, null);
     }
 
     @Override
-    public boolean createExplosion(Location loc, float power, boolean setFire, boolean breakBlocks, Entity source) {
+    public boolean createExplosion(@NotNull Location loc, float power, boolean setFire, boolean breakBlocks, Entity source) {
         Preconditions.checkArgument(loc != null, "Location is null");
         Preconditions.checkArgument(this.equals(loc.getWorld()), "Location not in world");
 
@@ -931,22 +934,22 @@ public class CraftWorld extends CraftRegionAccessor implements World {
     }
 
     @Override
-    public Environment getEnvironment() {
+    public @NotNull Environment getEnvironment() {
         return this.environment;
     }
 
     @Override
-    public Block getBlockAt(Location location) {
+    public @NotNull Block getBlockAt(@NotNull Location location) {
         return this.getBlockAt(location.getBlockX(), location.getBlockY(), location.getBlockZ());
     }
 
     @Override
-    public int getHighestBlockYAt(Location location) {
+    public int getHighestBlockYAt(@NotNull Location location) {
         return this.getHighestBlockYAt(location.getBlockX(), location.getBlockZ());
     }
 
     @Override
-    public Chunk getChunkAt(Location location) {
+    public @NotNull Chunk getChunkAt(@NotNull Location location) {
         return this.getChunkAt(location.getBlockX() >> 4, location.getBlockZ() >> 4);
     }
 
@@ -961,44 +964,44 @@ public class CraftWorld extends CraftRegionAccessor implements World {
     }
 
     @Override
-    public List<BlockPopulator> getPopulators() {
+    public @NotNull List<BlockPopulator> getPopulators() {
         return this.populators;
     }
 
     @Override
-    public Block getHighestBlockAt(int x, int z) {
+    public @NotNull Block getHighestBlockAt(int x, int z) {
         return this.getBlockAt(x, this.getHighestBlockYAt(x, z), z);
     }
 
     @Override
-    public Block getHighestBlockAt(Location location) {
+    public @NotNull Block getHighestBlockAt(@NotNull Location location) {
         return this.getHighestBlockAt(location.getBlockX(), location.getBlockZ());
     }
 
     @Override
-    public int getHighestBlockYAt(int x, int z, org.bukkit.HeightMap heightMap) {
+    public int getHighestBlockYAt(int x, int z, org.bukkit.@NotNull HeightMap heightMap) {
         warnUnsafeChunk("getting a faraway chunk", x >> 4, z >> 4); // Paper
         // Transient load for this tick
         return this.world.getChunk(x >> 4, z >> 4).getHeight(CraftHeightMap.toNMS(heightMap), x, z);
     }
 
     @Override
-    public int getHighestBlockYAt(Location location, org.bukkit.HeightMap heightMap) {
+    public int getHighestBlockYAt(@NotNull Location location, org.bukkit.@NotNull HeightMap heightMap) {
         return this.getHighestBlockYAt(location.getBlockX(), location.getBlockZ(), heightMap);
     }
 
     @Override
-    public Block getHighestBlockAt(int x, int z, org.bukkit.HeightMap heightMap) {
+    public @NotNull Block getHighestBlockAt(int x, int z, org.bukkit.@NotNull HeightMap heightMap) {
         return this.getBlockAt(x, this.getHighestBlockYAt(x, z, heightMap), z);
     }
 
     @Override
-    public Block getHighestBlockAt(Location location, org.bukkit.HeightMap heightMap) {
+    public @NotNull Block getHighestBlockAt(@NotNull Location location, org.bukkit.@NotNull HeightMap heightMap) {
         return this.getHighestBlockAt(location.getBlockX(), location.getBlockZ(), heightMap);
     }
 
     @Override
-    public Biome getBiome(int x, int z) {
+    public @NotNull Biome getBiome(int x, int z) {
         return getBiome(x, 0, z);
     }
 
@@ -1010,7 +1013,7 @@ public class CraftWorld extends CraftRegionAccessor implements World {
     }
 
     @Override
-    public void setBiome(int x, int y, int z, Holder<net.minecraft.world.level.biome.Biome> bb) {
+    public void setBiome(int x, int y, int z, @NotNull Holder<net.minecraft.world.level.biome.Biome> bb) {
         BlockPos pos = new BlockPos(x, 0, z);
         if (this.world.hasChunkAt(pos)) {
             net.minecraft.world.level.chunk.LevelChunk chunk = this.world.getChunkAt(pos);
@@ -1047,27 +1050,27 @@ public class CraftWorld extends CraftRegionAccessor implements World {
     @Override
     @SuppressWarnings("unchecked")
     @Deprecated
-    public <T extends Entity> Collection<T> getEntitiesByClass(Class<T>... classes) {
+    public <T extends Entity> @NotNull Collection<T> getEntitiesByClass(Class<T>... classes) {
         return (Collection<T>) getEntitiesByClasses(classes);
     }
 
     @Override
-    public Iterable<net.minecraft.world.entity.Entity> getNMSEntities() {
+    public @NotNull Iterable<net.minecraft.world.entity.Entity> getNMSEntities() {
         return this.getHandle().getEntities().getAll();
     }
 
     @Override
-    public void addEntityToWorld(net.minecraft.world.entity.Entity entity, SpawnReason reason) {
+    public void addEntityToWorld(net.minecraft.world.entity.@NotNull Entity entity, @NotNull SpawnReason reason) {
         this.getHandle().addFreshEntity(entity, reason);
     }
 
     @Override
-    public Collection<Entity> getNearbyEntities(Location location, double x, double y, double z) {
+    public @NotNull Collection<Entity> getNearbyEntities(@NotNull Location location, double x, double y, double z) {
         return this.getNearbyEntities(location, x, y, z, null);
     }
 
     @Override
-    public Collection<Entity> getNearbyEntities(Location location, double x, double y, double z, Predicate<Entity> filter) {
+    public @NotNull Collection<Entity> getNearbyEntities(@NotNull Location location, double x, double y, double z, Predicate<Entity> filter) {
         Validate.notNull(location, "Location is null!");
         Validate.isTrue(this.equals(location.getWorld()), "Location is from different world!");
 
@@ -1076,12 +1079,12 @@ public class CraftWorld extends CraftRegionAccessor implements World {
     }
 
     @Override
-    public Collection<Entity> getNearbyEntities(BoundingBox boundingBox) {
+    public @NotNull Collection<Entity> getNearbyEntities(@NotNull BoundingBox boundingBox) {
         return this.getNearbyEntities(boundingBox, null);
     }
 
     @Override
-    public Collection<Entity> getNearbyEntities(BoundingBox boundingBox, Predicate<Entity> filter) {
+    public @NotNull Collection<Entity> getNearbyEntities(@NotNull BoundingBox boundingBox, @Nullable Predicate<Entity> filter) {
         org.spigotmc.AsyncCatcher.catchOp("getNearbyEntities"); // Spigot
         Validate.notNull(boundingBox, "Bounding box is null!");
 
@@ -1100,22 +1103,22 @@ public class CraftWorld extends CraftRegionAccessor implements World {
     }
 
     @Override
-    public RayTraceResult rayTraceEntities(Location start, Vector direction, double maxDistance) {
+    public RayTraceResult rayTraceEntities(@NotNull Location start, @NotNull Vector direction, double maxDistance) {
         return this.rayTraceEntities(start, direction, maxDistance, null);
     }
 
     @Override
-    public RayTraceResult rayTraceEntities(Location start, Vector direction, double maxDistance, double raySize) {
+    public RayTraceResult rayTraceEntities(@NotNull Location start, @NotNull Vector direction, double maxDistance, double raySize) {
         return this.rayTraceEntities(start, direction, maxDistance, raySize, null);
     }
 
     @Override
-    public RayTraceResult rayTraceEntities(Location start, Vector direction, double maxDistance, Predicate<Entity> filter) {
+    public RayTraceResult rayTraceEntities(@NotNull Location start, @NotNull Vector direction, double maxDistance, Predicate<Entity> filter) {
         return this.rayTraceEntities(start, direction, maxDistance, 0.0D, filter);
     }
 
     @Override
-    public RayTraceResult rayTraceEntities(Location start, Vector direction, double maxDistance, double raySize, Predicate<Entity> filter) {
+    public RayTraceResult rayTraceEntities(@NotNull Location start, @NotNull Vector direction, double maxDistance, double raySize, Predicate<Entity> filter) {
         Validate.notNull(start, "Start location is null!");
         Validate.isTrue(this.equals(start.getWorld()), "Start location is from different world!");
         start.checkFinite();
@@ -1157,17 +1160,17 @@ public class CraftWorld extends CraftRegionAccessor implements World {
     }
 
     @Override
-    public RayTraceResult rayTraceBlocks(Location start, Vector direction, double maxDistance) {
+    public RayTraceResult rayTraceBlocks(@NotNull Location start, @NotNull Vector direction, double maxDistance) {
         return this.rayTraceBlocks(start, direction, maxDistance, FluidCollisionMode.NEVER, false);
     }
 
     @Override
-    public RayTraceResult rayTraceBlocks(Location start, Vector direction, double maxDistance, FluidCollisionMode fluidCollisionMode) {
+    public RayTraceResult rayTraceBlocks(@NotNull Location start, @NotNull Vector direction, double maxDistance, FluidCollisionMode fluidCollisionMode) {
         return this.rayTraceBlocks(start, direction, maxDistance, fluidCollisionMode, false);
     }
 
     @Override
-    public RayTraceResult rayTraceBlocks(Location start, Vector direction, double maxDistance, FluidCollisionMode fluidCollisionMode, boolean ignorePassableBlocks) {
+    public RayTraceResult rayTraceBlocks(@NotNull Location start, @NotNull Vector direction, double maxDistance, FluidCollisionMode fluidCollisionMode, boolean ignorePassableBlocks) {
         Validate.notNull(start, "Start location is null!");
         Validate.isTrue(this.equals(start.getWorld()), "Start location is from different world!");
         start.checkFinite();
@@ -1191,7 +1194,7 @@ public class CraftWorld extends CraftRegionAccessor implements World {
     }
 
     @Override
-    public RayTraceResult rayTrace(Location start, Vector direction, double maxDistance, FluidCollisionMode fluidCollisionMode, boolean ignorePassableBlocks, double raySize, Predicate<Entity> filter) {
+    public RayTraceResult rayTrace(@NotNull Location start, @NotNull Vector direction, double maxDistance, FluidCollisionMode fluidCollisionMode, boolean ignorePassableBlocks, double raySize, Predicate<Entity> filter) {
         RayTraceResult blockHit = this.rayTraceBlocks(start, direction, maxDistance, fluidCollisionMode, ignorePassableBlocks);
         Vector startVec = null;
         double blockHitDistance = maxDistance;
@@ -1221,7 +1224,7 @@ public class CraftWorld extends CraftRegionAccessor implements World {
     }
 
     @Override
-    public List<Player> getPlayers() {
+    public @NotNull List<Player> getPlayers() {
         List<Player> list = new ArrayList<Player>(this.world.players().size());
 
         for (net.minecraft.world.entity.player.Player human : this.world.players()) {
@@ -1237,7 +1240,7 @@ public class CraftWorld extends CraftRegionAccessor implements World {
 
     // Paper start - getEntity by UUID API
     @Override
-    public Entity getEntity(UUID uuid) {
+    public Entity getEntity(@NotNull UUID uuid) {
         Validate.notNull(uuid, "UUID cannot be null");
         net.minecraft.world.entity.Entity entity = world.getEntity(uuid);
         return entity == null ? null : entity.getBukkitEntity();
@@ -1267,16 +1270,16 @@ public class CraftWorld extends CraftRegionAccessor implements World {
     }
 
     @Override
-    public void setDifficulty(Difficulty difficulty) {
+    public void setDifficulty(@NotNull Difficulty difficulty) {
         this.getHandle().getServer().setDifficulty(this.getHandle(), net.minecraft.world.Difficulty.byId(difficulty.getValue()), true); // Paper - don't skip other difficulty-changing logic
     }
 
     @Override
-    public Difficulty getDifficulty() {
+    public @NotNull Difficulty getDifficulty() {
         return Difficulty.getByValue(this.getHandle().getDifficulty().ordinal());
     }
 
-    public BlockMetadataStore getBlockMetadata() {
+    public @NotNull BlockMetadataStore getBlockMetadata() {
         return this.blockMetadata;
     }
 
@@ -1354,22 +1357,22 @@ public class CraftWorld extends CraftRegionAccessor implements World {
         world.pvpMode = pvp;
     }
 
-    public void playEffect(Player player, Effect effect, int data) {
+    public void playEffect(@NotNull Player player, @NotNull Effect effect, int data) {
         this.playEffect(player.getLocation(), effect, data, 0);
     }
 
     @Override
-    public void playEffect(Location location, Effect effect, int data) {
+    public void playEffect(@NotNull Location location, @NotNull Effect effect, int data) {
         this.playEffect(location, effect, data, 64);
     }
 
     @Override
-    public <T> void playEffect(Location loc, Effect effect, T data) {
+    public <T> void playEffect(@NotNull Location loc, @NotNull Effect effect, T data) {
         this.playEffect(loc, effect, data, 64);
     }
 
     @Override
-    public <T> void playEffect(Location loc, Effect effect, T data, int radius) {
+    public <T> void playEffect(@NotNull Location loc, @NotNull Effect effect, @Nullable T data, int radius) {
         if (data != null) {
             Validate.isTrue(effect.getData() != null && effect.getData().isAssignableFrom(data.getClass()), "Wrong kind of data for this effect!");
         } else {
@@ -1382,7 +1385,7 @@ public class CraftWorld extends CraftRegionAccessor implements World {
     }
 
     @Override
-    public void playEffect(Location location, Effect effect, int data, int radius) {
+    public void playEffect(@NotNull Location location, @NotNull Effect effect, int data, int radius) {
         Validate.notNull(location, "Location cannot be null");
         Validate.notNull(effect, "Effect cannot be null");
         Validate.notNull(location.getWorld(), "World cannot be null");
@@ -1403,13 +1406,13 @@ public class CraftWorld extends CraftRegionAccessor implements World {
     }
 
     @Override
-    public FallingBlock spawnFallingBlock(Location location, MaterialData data) throws IllegalArgumentException {
+    public @NotNull FallingBlock spawnFallingBlock(@NotNull Location location, @NotNull MaterialData data) throws IllegalArgumentException {
         Validate.notNull(data, "MaterialData cannot be null");
         return this.spawnFallingBlock(location, data.getItemType(), data.getData());
     }
 
     @Override
-    public FallingBlock spawnFallingBlock(Location location, org.bukkit.Material material, byte data) throws IllegalArgumentException {
+    public @NotNull FallingBlock spawnFallingBlock(@NotNull Location location, org.bukkit.@NotNull Material material, byte data) throws IllegalArgumentException {
         Validate.notNull(location, "Location cannot be null");
         Validate.notNull(material, "Material cannot be null");
         Validate.isTrue(material.isBlock(), "Material must be a block");
@@ -1424,7 +1427,7 @@ public class CraftWorld extends CraftRegionAccessor implements World {
     }
 
     @Override
-    public FallingBlock spawnFallingBlock(Location location, BlockData data) throws IllegalArgumentException {
+    public @NotNull FallingBlock spawnFallingBlock(@NotNull Location location, @NotNull BlockData data) throws IllegalArgumentException {
         Validate.notNull(location, "Location cannot be null");
         Validate.notNull(data, "BlockData cannot be null");
 
@@ -1438,7 +1441,7 @@ public class CraftWorld extends CraftRegionAccessor implements World {
     }
 
     @Override
-    public ChunkSnapshot getEmptyChunkSnapshot(int x, int z, boolean includeBiome, boolean includeBiomeTempRain) {
+    public @NotNull ChunkSnapshot getEmptyChunkSnapshot(int x, int z, boolean includeBiome, boolean includeBiomeTempRain) {
         return CraftChunk.getEmptyChunkSnapshot(x, z, this, includeBiome, includeBiomeTempRain);
     }
 
@@ -1547,7 +1550,7 @@ public class CraftWorld extends CraftRegionAccessor implements World {
     }
 
     @Override
-    public boolean equals(Object obj) {
+    public boolean equals(@Nullable Object obj) {
         if (obj == null) {
             return false;
         }
@@ -1561,12 +1564,12 @@ public class CraftWorld extends CraftRegionAccessor implements World {
     }
 
     @Override
-    public File getWorldFolder() {
+    public @NotNull File getWorldFolder() {
         return world.convertable.getLevelPath(LevelResource.ROOT).toFile().getParentFile();
     }
 
     @Override
-    public void sendPluginMessage(Plugin source, String channel, byte[] message) {
+    public void sendPluginMessage(@NotNull Plugin source, @NotNull String channel, byte[] message) {
         StandardMessenger.validatePluginMessage(this.server.getMessenger(), source, channel, message);
 
         for (Player player : this.getPlayers()) {
@@ -1575,7 +1578,7 @@ public class CraftWorld extends CraftRegionAccessor implements World {
     }
 
     @Override
-    public Set<String> getListeningPluginChannels() {
+    public @NotNull Set<String> getListeningPluginChannels() {
         Set<String> result = new HashSet<String>();
 
         for (Player player : this.getPlayers()) {
@@ -1694,22 +1697,22 @@ public class CraftWorld extends CraftRegionAccessor implements World {
     }
 
     @Override
-    public void setMetadata(String metadataKey, MetadataValue newMetadataValue) {
+    public void setMetadata(@NotNull String metadataKey, @NotNull MetadataValue newMetadataValue) {
         this.server.getWorldMetadata().setMetadata(this, metadataKey, newMetadataValue);
     }
 
     @Override
-    public List<MetadataValue> getMetadata(String metadataKey) {
+    public @NotNull List<MetadataValue> getMetadata(@NotNull String metadataKey) {
         return this.server.getWorldMetadata().getMetadata(this, metadataKey);
     }
 
     @Override
-    public boolean hasMetadata(String metadataKey) {
+    public boolean hasMetadata(@NotNull String metadataKey) {
         return this.server.getWorldMetadata().hasMetadata(this, metadataKey);
     }
 
     @Override
-    public void removeMetadata(String metadataKey, Plugin owningPlugin) {
+    public void removeMetadata(@NotNull String metadataKey, @NotNull Plugin owningPlugin) {
         this.server.getWorldMetadata().removeMetadata(this, metadataKey, owningPlugin);
     }
 
@@ -1821,7 +1824,7 @@ public class CraftWorld extends CraftRegionAccessor implements World {
     }
 
     @Override
-    public void playSound(Location loc, Sound sound, org.bukkit.SoundCategory category, float volume, float pitch) {
+    public void playSound(@Nullable Location loc, @Nullable Sound sound, org.bukkit.@Nullable SoundCategory category, float volume, float pitch) {
         if (loc == null || sound == null || category == null) return;
 
         double x = loc.getX();
@@ -1832,7 +1835,7 @@ public class CraftWorld extends CraftRegionAccessor implements World {
     }
 
     @Override
-    public void playSound(Location loc, String sound, org.bukkit.SoundCategory category, float volume, float pitch) {
+    public void playSound(@Nullable Location loc, @Nullable String sound, org.bukkit.@Nullable SoundCategory category, float volume, float pitch) {
         if (loc == null || sound == null || category == null) return;
 
         double x = loc.getX();
@@ -1849,7 +1852,7 @@ public class CraftWorld extends CraftRegionAccessor implements World {
     }
 
     @Override
-    public void playSound(Entity entity, Sound sound, org.bukkit.SoundCategory category, float volume, float pitch) {
+    public void playSound(Entity entity, @Nullable Sound sound, org.bukkit.@Nullable SoundCategory category, float volume, float pitch) {
         if (!(entity instanceof CraftEntity craftEntity) || entity.getWorld() != this || sound == null || category == null) return;
 
         ClientboundSoundEntityPacket packet = new ClientboundSoundEntityPacket(BuiltInRegistries.SOUND_EVENT.wrapAsHolder(CraftSound.getSoundEffect(sound)), net.minecraft.sounds.SoundSource.valueOf(category.name()), craftEntity.getHandle(), volume, pitch, this.getHandle().getRandom().nextLong());
@@ -1860,7 +1863,7 @@ public class CraftWorld extends CraftRegionAccessor implements World {
     }
 
     private static Map<String, GameRules.Key<?>> gamerules;
-    public static synchronized Map<String, GameRules.Key<?>> getGameRulesNMS() {
+    public static synchronized @NotNull Map<String, GameRules.Key<?>> getGameRulesNMS() {
         if (CraftWorld.gamerules != null) {
             return CraftWorld.gamerules;
         }
@@ -1877,7 +1880,7 @@ public class CraftWorld extends CraftRegionAccessor implements World {
     }
 
     private static Map<String, GameRules.Type<?>> gameruleDefinitions;
-    public static synchronized Map<String, GameRules.Type<?>> getGameRuleDefinitions() {
+    public static synchronized @NotNull Map<String, GameRules.Type<?>> getGameRuleDefinitions() {
         if (CraftWorld.gameruleDefinitions != null) {
             return CraftWorld.gameruleDefinitions;
         }
@@ -1894,7 +1897,7 @@ public class CraftWorld extends CraftRegionAccessor implements World {
     }
 
     @Override
-    public String getGameRuleValue(String rule) {
+    public String getGameRuleValue(@Nullable String rule) {
         // In method contract for some reason
         if (rule == null) {
             return null;
@@ -1905,7 +1908,7 @@ public class CraftWorld extends CraftRegionAccessor implements World {
     }
 
     @Override
-    public boolean setGameRuleValue(String rule, String value) {
+    public boolean setGameRuleValue(@Nullable String rule, @Nullable String value) {
         // No null values allowed
         if (rule == null || value == null) return false;
 
@@ -1923,30 +1926,30 @@ public class CraftWorld extends CraftRegionAccessor implements World {
     }
 
     @Override
-    public String[] getGameRules() {
+    public String @NotNull [] getGameRules() {
         return CraftWorld.getGameRulesNMS().keySet().toArray(new String[CraftWorld.getGameRulesNMS().size()]);
     }
 
     @Override
-    public boolean isGameRule(String rule) {
+    public boolean isGameRule(@Nullable String rule) {
         Validate.isTrue(rule != null && !rule.isEmpty(), "Rule cannot be null nor empty");
         return CraftWorld.getGameRulesNMS().containsKey(rule);
     }
 
     @Override
-    public <T> T getGameRuleValue(GameRule<T> rule) {
+    public <T> T getGameRuleValue(@NotNull GameRule<T> rule) {
         Validate.notNull(rule, "GameRule cannot be null");
         return this.convert(rule, this.getHandle().getGameRules().getRule(CraftWorld.getGameRulesNMS().get(rule.getName())));
     }
 
     @Override
-    public <T> T getGameRuleDefault(GameRule<T> rule) {
+    public <T> T getGameRuleDefault(@NotNull GameRule<T> rule) {
         Validate.notNull(rule, "GameRule cannot be null");
         return this.convert(rule, CraftWorld.getGameRuleDefinitions().get(rule.getName()).createRule());
     }
 
     @Override
-    public <T> boolean setGameRule(GameRule<T> rule, T newValue) {
+    public <T> boolean setGameRule(@NotNull GameRule<T> rule, T newValue) {
         Validate.notNull(rule, "GameRule cannot be null");
         Validate.notNull(newValue, "GameRule value cannot be null");
 
@@ -1962,7 +1965,7 @@ public class CraftWorld extends CraftRegionAccessor implements World {
         return true;
     }
 
-    private <T> T convert(GameRule<T> rule, GameRules.Value<?> value) {
+    private <T> T convert(@NotNull GameRule<T> rule, GameRules.@Nullable Value<?> value) {
         if (value == null) {
             return null;
         }
@@ -1977,7 +1980,7 @@ public class CraftWorld extends CraftRegionAccessor implements World {
     }
 
     @Override
-    public WorldBorder getWorldBorder() {
+    public @NotNull WorldBorder getWorldBorder() {
         if (this.worldBorder == null) {
             this.worldBorder = new CraftWorldBorder(this);
         }
@@ -1986,76 +1989,76 @@ public class CraftWorld extends CraftRegionAccessor implements World {
     }
 
     @Override
-    public void spawnParticle(Particle particle, Location location, int count) {
+    public void spawnParticle(@NotNull Particle particle, @NotNull Location location, int count) {
         this.spawnParticle(particle, location.getX(), location.getY(), location.getZ(), count);
     }
 
     @Override
-    public void spawnParticle(Particle particle, double x, double y, double z, int count) {
+    public void spawnParticle(@NotNull Particle particle, double x, double y, double z, int count) {
         this.spawnParticle(particle, x, y, z, count, null);
     }
 
     @Override
-    public <T> void spawnParticle(Particle particle, Location location, int count, T data) {
+    public <T> void spawnParticle(@NotNull Particle particle, @NotNull Location location, int count, T data) {
         this.spawnParticle(particle, location.getX(), location.getY(), location.getZ(), count, data);
     }
 
     @Override
-    public <T> void spawnParticle(Particle particle, double x, double y, double z, int count, T data) {
+    public <T> void spawnParticle(@NotNull Particle particle, double x, double y, double z, int count, T data) {
         this.spawnParticle(particle, x, y, z, count, 0, 0, 0, data);
     }
 
     @Override
-    public void spawnParticle(Particle particle, Location location, int count, double offsetX, double offsetY, double offsetZ) {
+    public void spawnParticle(@NotNull Particle particle, @NotNull Location location, int count, double offsetX, double offsetY, double offsetZ) {
         this.spawnParticle(particle, location.getX(), location.getY(), location.getZ(), count, offsetX, offsetY, offsetZ);
     }
 
     @Override
-    public void spawnParticle(Particle particle, double x, double y, double z, int count, double offsetX, double offsetY, double offsetZ) {
+    public void spawnParticle(@NotNull Particle particle, double x, double y, double z, int count, double offsetX, double offsetY, double offsetZ) {
         this.spawnParticle(particle, x, y, z, count, offsetX, offsetY, offsetZ, null);
     }
 
     @Override
-    public <T> void spawnParticle(Particle particle, Location location, int count, double offsetX, double offsetY, double offsetZ, T data) {
+    public <T> void spawnParticle(@NotNull Particle particle, @NotNull Location location, int count, double offsetX, double offsetY, double offsetZ, T data) {
         this.spawnParticle(particle, location.getX(), location.getY(), location.getZ(), count, offsetX, offsetY, offsetZ, data);
     }
 
     @Override
-    public <T> void spawnParticle(Particle particle, double x, double y, double z, int count, double offsetX, double offsetY, double offsetZ, T data) {
+    public <T> void spawnParticle(@NotNull Particle particle, double x, double y, double z, int count, double offsetX, double offsetY, double offsetZ, T data) {
         this.spawnParticle(particle, x, y, z, count, offsetX, offsetY, offsetZ, 1, data);
     }
 
     @Override
-    public void spawnParticle(Particle particle, Location location, int count, double offsetX, double offsetY, double offsetZ, double extra) {
+    public void spawnParticle(@NotNull Particle particle, @NotNull Location location, int count, double offsetX, double offsetY, double offsetZ, double extra) {
         this.spawnParticle(particle, location.getX(), location.getY(), location.getZ(), count, offsetX, offsetY, offsetZ, extra);
     }
 
     @Override
-    public void spawnParticle(Particle particle, double x, double y, double z, int count, double offsetX, double offsetY, double offsetZ, double extra) {
+    public void spawnParticle(@NotNull Particle particle, double x, double y, double z, int count, double offsetX, double offsetY, double offsetZ, double extra) {
         this.spawnParticle(particle, x, y, z, count, offsetX, offsetY, offsetZ, extra, null);
     }
 
     @Override
-    public <T> void spawnParticle(Particle particle, Location location, int count, double offsetX, double offsetY, double offsetZ, double extra, T data) {
+    public <T> void spawnParticle(@NotNull Particle particle, @NotNull Location location, int count, double offsetX, double offsetY, double offsetZ, double extra, T data) {
         this.spawnParticle(particle, location.getX(), location.getY(), location.getZ(), count, offsetX, offsetY, offsetZ, extra, data);
     }
 
     @Override
-    public <T> void spawnParticle(Particle particle, double x, double y, double z, int count, double offsetX, double offsetY, double offsetZ, double extra, T data) {
+    public <T> void spawnParticle(@NotNull Particle particle, double x, double y, double z, int count, double offsetX, double offsetY, double offsetZ, double extra, T data) {
         this.spawnParticle(particle, x, y, z, count, offsetX, offsetY, offsetZ, extra, data, false);
     }
 
     @Override
-    public <T> void spawnParticle(Particle particle, Location location, int count, double offsetX, double offsetY, double offsetZ, double extra, T data, boolean force) {
+    public <T> void spawnParticle(@NotNull Particle particle, @NotNull Location location, int count, double offsetX, double offsetY, double offsetZ, double extra, T data, boolean force) {
         this.spawnParticle(particle, location.getX(), location.getY(), location.getZ(), count, offsetX, offsetY, offsetZ, extra, data, force);
     }
 
     @Override
-    public <T> void spawnParticle(Particle particle, double x, double y, double z, int count, double offsetX, double offsetY, double offsetZ, double extra, T data, boolean force) {
+    public <T> void spawnParticle(@NotNull Particle particle, double x, double y, double z, int count, double offsetX, double offsetY, double offsetZ, double extra, T data, boolean force) {
         // Paper start - Particle API Expansion
         spawnParticle(particle, null, null, x, y, z, count, offsetX, offsetY, offsetZ, extra, data, force);
     }
-    public <T> void spawnParticle(Particle particle, List<Player> receivers, Player sender, double x, double y, double z, int count, double offsetX, double offsetY, double offsetZ, double extra, T data, boolean force) {
+    public <T> void spawnParticle(@NotNull Particle particle, @Nullable List<Player> receivers, @Nullable Player sender, double x, double y, double z, int count, double offsetX, double offsetY, double offsetZ, double extra, @Nullable T data, boolean force) {
         // Paper end
         if (data != null && !particle.getDataType().isInstance(data)) {
             throw new IllegalArgumentException("data should be " + particle.getDataType() + " got " + data.getClass());
@@ -2075,7 +2078,7 @@ public class CraftWorld extends CraftRegionAccessor implements World {
 
     @Deprecated
     @Override
-    public Location locateNearestStructure(Location origin, org.bukkit.StructureType structureType, int radius, boolean findUnexplored) {
+    public Location locateNearestStructure(@NotNull Location origin, org.bukkit.StructureType structureType, int radius, boolean findUnexplored) {
         StructureSearchResult result = null;
 
         // Manually map the mess of the old StructureType to the new StructureType and normal Structure
@@ -2121,7 +2124,7 @@ public class CraftWorld extends CraftRegionAccessor implements World {
     }
 
     @Override
-    public StructureSearchResult locateNearestStructure(Location origin, StructureType structureType, int radius, boolean findUnexplored) {
+    public StructureSearchResult locateNearestStructure(@NotNull Location origin, StructureType structureType, int radius, boolean findUnexplored) {
         List<Structure> structures = new ArrayList<>();
         for (Structure structure : Registry.STRUCTURE) {
             if (structure.getStructureType() == structureType) {
@@ -2133,11 +2136,11 @@ public class CraftWorld extends CraftRegionAccessor implements World {
     }
 
     @Override
-    public StructureSearchResult locateNearestStructure(Location origin, Structure structure, int radius, boolean findUnexplored) {
+    public StructureSearchResult locateNearestStructure(@NotNull Location origin, @NotNull Structure structure, int radius, boolean findUnexplored) {
         return this.locateNearestStructure(origin, List.of(structure), radius, findUnexplored);
     }
 
-    public StructureSearchResult locateNearestStructure(Location origin, List<Structure> structures, int radius, boolean findUnexplored) {
+    public @Nullable StructureSearchResult locateNearestStructure(@NotNull Location origin, @NotNull List<Structure> structures, int radius, boolean findUnexplored) {
         BlockPos originPos = new BlockPos(origin.getX(), origin.getY(), origin.getZ());
         List<Holder<net.minecraft.world.level.levelgen.structure.Structure>> holders = new ArrayList<>();
 
@@ -2155,12 +2158,12 @@ public class CraftWorld extends CraftRegionAccessor implements World {
 
     // Paper start
     @Override
-    public Location locateNearestBiome(Location origin, Biome biome, int radius) {
+    public Location locateNearestBiome(@NotNull Location origin, @NotNull Biome biome, int radius) {
         return this.locateNearestBiome(origin, biome, radius, 8);
     }
 
     @Override
-    public Location locateNearestBiome(Location origin, Biome biome, int radius, int step) {
+    public Location locateNearestBiome(@NotNull Location origin, @NotNull Biome biome, int radius, int step) {
         BlockPos originPos = new BlockPos(origin.getX(), origin.getY(), origin.getZ());
         Pair<BlockPos, Holder<net.minecraft.world.level.biome.Biome>> pair = getHandle().findClosestBiome3d(holder -> holder.is(CraftNamespacedKey.toMinecraft(biome.getKey())), originPos, radius, step, step);
         if (pair == null) {
@@ -2206,18 +2209,18 @@ public class CraftWorld extends CraftRegionAccessor implements World {
     }
 
     @Override
-    public Collection<org.bukkit.Material> getInfiniburn() {
+    public @NotNull Collection<org.bukkit.Material> getInfiniburn() {
         return com.google.common.collect.Sets.newHashSet(com.google.common.collect.Iterators.transform(net.minecraft.core.registries.BuiltInRegistries.BLOCK.getTagOrEmpty(this.getHandle().dimensionType().infiniburn()).iterator(), blockHolder -> CraftMagicNumbers.getMaterial(blockHolder.value())));
     }
 
     @Override
-    public void sendGameEvent(Entity sourceEntity, org.bukkit.GameEvent gameEvent, Vector position) {
+    public void sendGameEvent(@Nullable Entity sourceEntity, org.bukkit.@NotNull GameEvent gameEvent, @NotNull Vector position) {
         getHandle().gameEvent(sourceEntity != null ? ((CraftEntity) sourceEntity).getHandle(): null, net.minecraft.core.registries.BuiltInRegistries.GAME_EVENT.get(org.bukkit.craftbukkit.util.CraftNamespacedKey.toMinecraft(gameEvent.getKey())), org.bukkit.craftbukkit.util.CraftVector.toBlockPos(position));
     }
     // Paper end
 
     @Override
-    public Raid locateNearestRaid(Location location, int radius) {
+    public Raid locateNearestRaid(@NotNull Location location, int radius) {
         Validate.notNull(location, "Location cannot be null");
         Validate.isTrue(radius >= 0, "Radius cannot be negative");
 
@@ -2227,7 +2230,7 @@ public class CraftWorld extends CraftRegionAccessor implements World {
     }
 
     @Override
-    public List<Raid> getRaids() {
+    public @NotNull List<Raid> getRaids() {
         Raids persistentRaid = this.world.getRaids();
         return persistentRaid.raidMap.values().stream().map(CraftRaid::new).collect(Collectors.toList());
     }
@@ -2238,11 +2241,11 @@ public class CraftWorld extends CraftRegionAccessor implements World {
     }
 
     @Override
-    public PersistentDataContainer getPersistentDataContainer() {
+    public @NotNull PersistentDataContainer getPersistentDataContainer() {
         return this.persistentDataContainer;
     }
 
-    public void storeBukkitValues(CompoundTag c) {
+    public void storeBukkitValues(@NotNull CompoundTag c) {
         if (!this.persistentDataContainer.isEmpty()) {
             c.put("BukkitValues", this.persistentDataContainer.toTagCompound());
         }
@@ -2310,7 +2313,7 @@ public class CraftWorld extends CraftRegionAccessor implements World {
     {
 
         @Override
-        public LightningStrike strikeLightning(Location loc, boolean isSilent)
+        public @NotNull LightningStrike strikeLightning(@NotNull Location loc, boolean isSilent)
         {
             LightningBolt lightning = EntityType.LIGHTNING_BOLT.create( world );
             lightning.moveTo( loc.getX(), loc.getY(), loc.getZ() );
@@ -2320,7 +2323,7 @@ public class CraftWorld extends CraftRegionAccessor implements World {
         }
 
         @Override
-        public LightningStrike strikeLightningEffect(Location loc, boolean isSilent)
+        public @NotNull LightningStrike strikeLightningEffect(@NotNull Location loc, boolean isSilent)
         {
             LightningBolt lightning = EntityType.LIGHTNING_BOLT.create( world );
             lightning.moveTo( loc.getX(), loc.getY(), loc.getZ() );
@@ -2331,13 +2334,13 @@ public class CraftWorld extends CraftRegionAccessor implements World {
         }
     };
 
-    public org.bukkit.World.Spigot spigot()
+    public org.bukkit.World.@NotNull Spigot spigot()
     {
         return this.spigot;
     }
     // Spigot end
     // Paper start
-    public java.util.concurrent.CompletableFuture<Chunk> getChunkAtAsync(int x, int z, boolean gen, boolean urgent) {
+    public java.util.concurrent.@NotNull CompletableFuture<Chunk> getChunkAtAsync(int x, int z, boolean gen, boolean urgent) {
         warnUnsafeChunk("getting a faraway chunk async", x, z); // Paper
         if (Bukkit.isPrimaryThread()) {
             net.minecraft.world.level.chunk.LevelChunk immediate = this.world.getChunkSource().getChunkAtIfLoadedImmediately(x, z);
@@ -2368,7 +2371,7 @@ public class CraftWorld extends CraftRegionAccessor implements World {
 
     // Paper start - implement pointers
     @Override
-    public net.kyori.adventure.pointer.Pointers pointers() {
+    public net.kyori.adventure.pointer.@NotNull Pointers pointers() {
         if (this.adventure$pointers == null) {
             this.adventure$pointers = net.kyori.adventure.pointer.Pointers.builder()
                 .withDynamic(net.kyori.adventure.identity.Identity.NAME, this::getName)
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftWorldBorder.java b/src/main/java/org/bukkit/craftbukkit/CraftWorldBorder.java
index a5aba836c13d827cefbded86408ceaf89af85707..acbb284901e3692098a6abd48915a8ce748f2dc2 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftWorldBorder.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftWorldBorder.java
@@ -6,13 +6,16 @@ import net.minecraft.core.BlockPos;
 import org.bukkit.Location;
 import org.bukkit.World;
 import org.bukkit.WorldBorder;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 public class CraftWorldBorder implements WorldBorder {
 
-    private final World world;
+    private final @Nullable World world;
     private final net.minecraft.world.level.border.WorldBorder handle;
 
-    public CraftWorldBorder(CraftWorld world) {
+    public CraftWorldBorder(@NotNull CraftWorld world) {
         this.world = world;
         this.handle = world.getHandle().getWorldBorder();
     }
@@ -48,7 +51,7 @@ public class CraftWorldBorder implements WorldBorder {
     }
 
     @Override
-    public void setSize(double newSize, TimeUnit unit, long time) {
+    public void setSize(double newSize, @Nullable TimeUnit unit, long time) {
         Preconditions.checkArgument(unit != null, "TimeUnit cannot be null.");
         Preconditions.checkArgument(time >= 0, "time cannot be lower than 0");
         Preconditions.checkArgument(newSize >= 1.0D && newSize <= this.getMaxSize(), "newSize must be between 1.0D and %s", this.getMaxSize());
@@ -61,7 +64,7 @@ public class CraftWorldBorder implements WorldBorder {
     }
 
     @Override
-    public Location getCenter() {
+    public @NotNull Location getCenter() {
         double x = this.handle.getCenterX();
         double z = this.handle.getCenterZ();
 
@@ -77,7 +80,7 @@ public class CraftWorldBorder implements WorldBorder {
     }
 
     @Override
-    public void setCenter(Location location) {
+    public void setCenter(@NotNull Location location) {
         this.setCenter(location.getX(), location.getZ());
     }
 
@@ -122,7 +125,7 @@ public class CraftWorldBorder implements WorldBorder {
     }
 
     @Override
-    public boolean isInside(Location location) {
+    public boolean isInside(@Nullable Location location) {
         Preconditions.checkArgument(location != null, "location cannot be null");
 
         return (this.world == null || location.getWorld().equals(this.world)) && this.handle.isWithinBounds(new BlockPos(location.getX(), location.getY(), location.getZ()));
diff --git a/src/main/java/org/bukkit/craftbukkit/Main.java b/src/main/java/org/bukkit/craftbukkit/Main.java
index 190e17eb28d166aedee06e9578561ba402d1b6d2..69bd5ca1d957494116d21372744200978a39c827 100644
--- a/src/main/java/org/bukkit/craftbukkit/Main.java
+++ b/src/main/java/org/bukkit/craftbukkit/Main.java
@@ -15,6 +15,8 @@ import joptsimple.OptionSet;
 import net.minecraft.util.ExceptionCollector;
 import net.minecraft.world.level.lighting.LayerLightEventListener;
 import net.minecrell.terminalconsole.TerminalConsoleAppender; // Paper
+import org.jetbrains.annotations.NotNull;
+
 
 public class Main {
     public static boolean useJline = true;
@@ -362,7 +364,7 @@ public class Main {
     }
     // Paper end
 
-    private static List<String> asList(String... params) {
+    private static @NotNull List<String> asList(String... params) {
         return Arrays.asList(params);
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/advancement/CraftAdvancement.java b/src/main/java/org/bukkit/craftbukkit/advancement/CraftAdvancement.java
index 1435251a4fb721b800e6a1f07b50c5f743e04081..71e3aa8edb7b26ac9ea848676e6cbd3f468348a0 100644
--- a/src/main/java/org/bukkit/craftbukkit/advancement/CraftAdvancement.java
+++ b/src/main/java/org/bukkit/craftbukkit/advancement/CraftAdvancement.java
@@ -6,6 +6,8 @@ import net.minecraft.advancements.Advancement;
 import org.bukkit.NamespacedKey;
 import org.bukkit.advancement.AdvancementDisplay;
 import org.bukkit.craftbukkit.util.CraftNamespacedKey;
+import org.jetbrains.annotations.NotNull;
+
 
 public class CraftAdvancement implements org.bukkit.advancement.Advancement {
 
@@ -20,12 +22,12 @@ public class CraftAdvancement implements org.bukkit.advancement.Advancement {
     }
 
     @Override
-    public NamespacedKey getKey() {
+    public @NotNull NamespacedKey getKey() {
         return CraftNamespacedKey.fromMinecraft(this.handle.getId());
     }
 
     @Override
-    public Collection<String> getCriteria() {
+    public @NotNull Collection<String> getCriteria() {
         return Collections.unmodifiableCollection(this.handle.getCriteria().keySet());
     }
 
@@ -51,7 +53,7 @@ public class CraftAdvancement implements org.bukkit.advancement.Advancement {
     }
 
     @Override
-    public Collection<org.bukkit.advancement.Advancement> getChildren() {
+    public @NotNull Collection<org.bukkit.advancement.Advancement> getChildren() {
         final var children = com.google.common.collect.ImmutableList.<org.bukkit.advancement.Advancement>builder();
         for (Advancement advancement : this.handle.getChildren()) {
             children.add(advancement.bukkit);
@@ -60,7 +62,7 @@ public class CraftAdvancement implements org.bukkit.advancement.Advancement {
     }
 
     @Override
-    public org.bukkit.advancement.Advancement getRoot() {
+    public org.bukkit.advancement.@NotNull Advancement getRoot() {
         Advancement advancement = this.handle;
         while (advancement.getParent() != null) {
             advancement = advancement.getParent();
diff --git a/src/main/java/org/bukkit/craftbukkit/advancement/CraftAdvancementDisplay.java b/src/main/java/org/bukkit/craftbukkit/advancement/CraftAdvancementDisplay.java
index e29d7c6e1cef10a76c8630855fada11cee583d30..49692deef7b1b9b7903e7d9ed8c68fe6a38bb4d4 100644
--- a/src/main/java/org/bukkit/craftbukkit/advancement/CraftAdvancementDisplay.java
+++ b/src/main/java/org/bukkit/craftbukkit/advancement/CraftAdvancementDisplay.java
@@ -5,6 +5,8 @@ import org.bukkit.advancement.AdvancementDisplayType;
 import org.bukkit.craftbukkit.inventory.CraftItemStack;
 import org.bukkit.craftbukkit.util.CraftChatMessage;
 import org.bukkit.inventory.ItemStack;
+import org.jetbrains.annotations.NotNull;
+
 
 @Deprecated // Paper
 public class CraftAdvancementDisplay implements org.bukkit.advancement.AdvancementDisplay {
@@ -20,17 +22,17 @@ public class CraftAdvancementDisplay implements org.bukkit.advancement.Advanceme
     }
 
     @Override
-    public String getTitle() {
+    public @NotNull String getTitle() {
         return CraftChatMessage.fromComponent(this.handle.getTitle());
     }
 
     @Override
-    public String getDescription() {
+    public @NotNull String getDescription() {
         return CraftChatMessage.fromComponent(this.handle.getDescription());
     }
 
     @Override
-    public ItemStack getIcon() {
+    public @NotNull ItemStack getIcon() {
         return CraftItemStack.asBukkitCopy(this.handle.getIcon());
     }
 
@@ -60,7 +62,7 @@ public class CraftAdvancementDisplay implements org.bukkit.advancement.Advanceme
     }
 
     @Override
-    public AdvancementDisplayType getType() {
+    public @NotNull AdvancementDisplayType getType() {
         return AdvancementDisplayType.values()[this.handle.getFrame().ordinal()];
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/advancement/CraftAdvancementProgress.java b/src/main/java/org/bukkit/craftbukkit/advancement/CraftAdvancementProgress.java
index 101c0f738b4ea79978bca574f683654900ce2d0e..b2d3b7235eba8e1fbfdbf0411ff72f720898a950 100644
--- a/src/main/java/org/bukkit/craftbukkit/advancement/CraftAdvancementProgress.java
+++ b/src/main/java/org/bukkit/craftbukkit/advancement/CraftAdvancementProgress.java
@@ -8,6 +8,8 @@ import net.minecraft.advancements.CriterionProgress;
 import net.minecraft.server.PlayerAdvancements;
 import org.bukkit.advancement.Advancement;
 import org.bukkit.advancement.AdvancementProgress;
+import org.jetbrains.annotations.NotNull;
+
 
 public class CraftAdvancementProgress implements AdvancementProgress {
 
@@ -22,7 +24,7 @@ public class CraftAdvancementProgress implements AdvancementProgress {
     }
 
     @Override
-    public Advancement getAdvancement() {
+    public @NotNull Advancement getAdvancement() {
         return this.advancement;
     }
 
@@ -32,28 +34,28 @@ public class CraftAdvancementProgress implements AdvancementProgress {
     }
 
     @Override
-    public boolean awardCriteria(String criteria) {
+    public boolean awardCriteria(@NotNull String criteria) {
         return this.playerData.award(this.advancement.getHandle(), criteria);
     }
 
     @Override
-    public boolean revokeCriteria(String criteria) {
+    public boolean revokeCriteria(@NotNull String criteria) {
         return this.playerData.revoke(this.advancement.getHandle(), criteria);
     }
 
     @Override
-    public Date getDateAwarded(String criteria) {
+    public Date getDateAwarded(@NotNull String criteria) {
         CriterionProgress criterion = this.handle.getCriterion(criteria);
         return (criterion == null) ? null : criterion.getObtained();
     }
 
     @Override
-    public Collection<String> getRemainingCriteria() {
+    public @NotNull Collection<String> getRemainingCriteria() {
         return Collections.unmodifiableCollection(Lists.newArrayList(this.handle.getRemainingCriteria()));
     }
 
     @Override
-    public Collection<String> getAwardedCriteria() {
+    public @NotNull Collection<String> getAwardedCriteria() {
         return Collections.unmodifiableCollection(Lists.newArrayList(this.handle.getCompletedCriteria()));
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/attribute/CraftAttributeInstance.java b/src/main/java/org/bukkit/craftbukkit/attribute/CraftAttributeInstance.java
index e828ef7df04de98628e59e93c0431ea0e10199f8..6da7396ee72f41a3a46e3399874883c2a12e5045 100644
--- a/src/main/java/org/bukkit/craftbukkit/attribute/CraftAttributeInstance.java
+++ b/src/main/java/org/bukkit/craftbukkit/attribute/CraftAttributeInstance.java
@@ -8,6 +8,9 @@ import org.bukkit.attribute.Attribute;
 import org.bukkit.attribute.AttributeInstance;
 import org.bukkit.attribute.AttributeModifier;
 import org.bukkit.inventory.EquipmentSlot;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 public class CraftAttributeInstance implements AttributeInstance {
 
@@ -20,7 +23,7 @@ public class CraftAttributeInstance implements AttributeInstance {
     }
 
     @Override
-    public Attribute getAttribute() {
+    public @NotNull Attribute getAttribute() {
         return this.attribute;
     }
 
@@ -35,7 +38,7 @@ public class CraftAttributeInstance implements AttributeInstance {
     }
 
     @Override
-    public Collection<AttributeModifier> getModifiers() {
+    public @NotNull Collection<AttributeModifier> getModifiers() {
         List<AttributeModifier> result = new ArrayList<AttributeModifier>();
         for (net.minecraft.world.entity.ai.attributes.AttributeModifier nms : this.handle.getModifiers()) {
             result.add(CraftAttributeInstance.convert(nms));
@@ -45,13 +48,13 @@ public class CraftAttributeInstance implements AttributeInstance {
     }
 
     @Override
-    public void addModifier(AttributeModifier modifier) {
+    public void addModifier(@Nullable AttributeModifier modifier) {
         Preconditions.checkArgument(modifier != null, "modifier");
         this.handle.addPermanentModifier(CraftAttributeInstance.convert(modifier));
     }
 
     @Override
-    public void removeModifier(AttributeModifier modifier) {
+    public void removeModifier(@Nullable AttributeModifier modifier) {
         Preconditions.checkArgument(modifier != null, "modifier");
         this.handle.removeModifier(CraftAttributeInstance.convert(modifier));
     }
@@ -66,15 +69,15 @@ public class CraftAttributeInstance implements AttributeInstance {
        return this.handle.getAttribute().getDefaultValue();
     }
 
-    public static net.minecraft.world.entity.ai.attributes.AttributeModifier convert(AttributeModifier bukkit) {
+    public static net.minecraft.world.entity.ai.attributes.@NotNull AttributeModifier convert(@NotNull AttributeModifier bukkit) {
         return new net.minecraft.world.entity.ai.attributes.AttributeModifier(bukkit.getUniqueId(), bukkit.getName(), bukkit.getAmount(), net.minecraft.world.entity.ai.attributes.AttributeModifier.Operation.values()[bukkit.getOperation().ordinal()]);
     }
 
-    public static AttributeModifier convert(net.minecraft.world.entity.ai.attributes.AttributeModifier nms) {
+    public static @NotNull AttributeModifier convert(net.minecraft.world.entity.ai.attributes.@NotNull AttributeModifier nms) {
         return new AttributeModifier(nms.getId(), nms.getName(), nms.getAmount(), AttributeModifier.Operation.values()[nms.getOperation().ordinal()]);
     }
 
-    public static AttributeModifier convert(net.minecraft.world.entity.ai.attributes.AttributeModifier nms, EquipmentSlot slot) {
+    public static @NotNull AttributeModifier convert(net.minecraft.world.entity.ai.attributes.@NotNull AttributeModifier nms, EquipmentSlot slot) {
         return new AttributeModifier(nms.getId(), nms.getName(), nms.getAmount(), AttributeModifier.Operation.values()[nms.getOperation().ordinal()], slot);
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/attribute/CraftAttributeMap.java b/src/main/java/org/bukkit/craftbukkit/attribute/CraftAttributeMap.java
index 0e61caa5c9f21788fbeaa90ed75d23e10b816aac..50a3c04f5a15319c159b41eb04ba5d8933598e28 100644
--- a/src/main/java/org/bukkit/craftbukkit/attribute/CraftAttributeMap.java
+++ b/src/main/java/org/bukkit/craftbukkit/attribute/CraftAttributeMap.java
@@ -8,6 +8,9 @@ import org.bukkit.attribute.Attributable;
 import org.bukkit.attribute.Attribute;
 import org.bukkit.attribute.AttributeInstance;
 import org.bukkit.craftbukkit.util.CraftNamespacedKey;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 public class CraftAttributeMap implements Attributable {
 
@@ -15,7 +18,7 @@ public class CraftAttributeMap implements Attributable {
     // Paper start - convert legacy attributes
     private static final com.google.common.collect.ImmutableMap<String, String> legacyNMS = com.google.common.collect.ImmutableMap.<String, String>builder().put("generic.maxHealth", "generic.max_health").put("Max Health", "generic.max_health").put("zombie.spawnReinforcements", "zombie.spawn_reinforcements").put("Spawn Reinforcements Chance", "zombie.spawn_reinforcements").put("horse.jumpStrength", "horse.jump_strength").put("Jump Strength", "horse.jump_strength").put("generic.followRange", "generic.follow_range").put("Follow Range", "generic.follow_range").put("generic.knockbackResistance", "generic.knockback_resistance").put("Knockback Resistance", "generic.knockback_resistance").put("generic.movementSpeed", "generic.movement_speed").put("Movement Speed", "generic.movement_speed").put("generic.flyingSpeed", "generic.flying_speed").put("Flying Speed", "generic.flying_speed").put("generic.attackDamage", "generic.attack_damage").put("generic.attackKnockback", "generic.attack_knockback").put("generic.attackSpeed", "generic.attack_speed").put("generic.armorToughness", "generic.armor_toughness").build();
 
-    public static String convertIfNeeded(String nms) {
+    public static String convertIfNeeded(@Nullable String nms) {
         if (nms == null) {
             return null;
         }
@@ -32,7 +35,7 @@ public class CraftAttributeMap implements Attributable {
     }
 
     @Override
-    public AttributeInstance getAttribute(Attribute attribute) {
+    public AttributeInstance getAttribute(@Nullable Attribute attribute) {
         Preconditions.checkArgument(attribute != null, "attribute");
         net.minecraft.world.entity.ai.attributes.AttributeInstance nms = this.handle.getInstance(CraftAttributeMap.toMinecraft(attribute));
 
@@ -41,17 +44,17 @@ public class CraftAttributeMap implements Attributable {
 
     // Paper start
     @Override
-    public void registerAttribute(Attribute attribute) {
+    public void registerAttribute(@Nullable Attribute attribute) {
         Preconditions.checkArgument(attribute != null, "attribute");
         handle.registerAttribute(CraftAttributeMap.toMinecraft(attribute));
     }
     // Paper end
 
-    public static net.minecraft.world.entity.ai.attributes.Attribute toMinecraft(Attribute attribute) {
+    public static net.minecraft.world.entity.ai.attributes.@Nullable Attribute toMinecraft(@NotNull Attribute attribute) {
         return BuiltInRegistries.ATTRIBUTE.get(CraftNamespacedKey.toMinecraft(attribute.getKey()));
     }
 
-    public static Attribute fromMinecraft(String nms) {
+    public static @Nullable Attribute fromMinecraft(@NotNull String nms) {
         return Registry.ATTRIBUTE.get(CraftNamespacedKey.fromString(nms));
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/block/CapturedBlockState.java b/src/main/java/org/bukkit/craftbukkit/block/CapturedBlockState.java
index fb6454cc64ebc549f61ad7d51efb16ef15f8384d..3eb56df2a8c4648515792915b71aa26e8ea80dc5 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/CapturedBlockState.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/CapturedBlockState.java
@@ -10,12 +10,14 @@ import net.minecraft.world.level.block.entity.BeehiveBlockEntity;
 import net.minecraft.world.level.block.entity.BlockEntity;
 import org.bukkit.Material;
 import org.bukkit.block.Block;
+import org.jetbrains.annotations.NotNull;
+
 
 public final class CapturedBlockState extends CraftBlockState {
 
     private final boolean treeBlock;
 
-    public CapturedBlockState(Block block, int flag, boolean treeBlock) {
+    public CapturedBlockState(@NotNull Block block, int flag, boolean treeBlock) {
         super(block, flag);
 
         this.treeBlock = treeBlock;
@@ -50,11 +52,11 @@ public final class CapturedBlockState extends CraftBlockState {
         return result;
     }
 
-    public static CapturedBlockState getBlockState(Level world, BlockPos pos, int flag) {
+    public static @NotNull CapturedBlockState getBlockState(@NotNull Level world, @NotNull BlockPos pos, int flag) {
         return new CapturedBlockState(world.getWorld().getBlockAt(pos.getX(), pos.getY(), pos.getZ()), flag, false);
     }
 
-    public static CapturedBlockState getTreeBlockState(Level world, BlockPos pos, int flag) {
+    public static @NotNull CapturedBlockState getTreeBlockState(@NotNull Level world, @NotNull BlockPos pos, int flag) {
         return new CapturedBlockState(world.getWorld().getBlockAt(pos.getX(), pos.getY(), pos.getZ()), flag, true);
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/block/CraftBanner.java b/src/main/java/org/bukkit/craftbukkit/block/CraftBanner.java
index 31d916bc2364d0c518652b5b5868ab3d45a77ccc..4c7b95d94859e780c2522b224edb47e6a63be59f 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/CraftBanner.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/CraftBanner.java
@@ -12,18 +12,21 @@ import org.bukkit.World;
 import org.bukkit.block.Banner;
 import org.bukkit.block.banner.Pattern;
 import org.bukkit.block.banner.PatternType;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 public class CraftBanner extends CraftBlockEntityState<BannerBlockEntity> implements Banner {
 
-    private DyeColor base;
+    private @Nullable DyeColor base;
     private List<Pattern> patterns;
 
-    public CraftBanner(World world, BannerBlockEntity tileEntity) {
+    public CraftBanner(World world, @NotNull BannerBlockEntity tileEntity) {
         super(world, tileEntity);
     }
 
     @Override
-    public void load(BannerBlockEntity banner) {
+    public void load(@NotNull BannerBlockEntity banner) {
         super.load(banner);
 
         this.base = DyeColor.getByWoolData((byte) ((AbstractBannerBlock) this.data.getBlock()).getColor().getId());
@@ -38,23 +41,23 @@ public class CraftBanner extends CraftBlockEntityState<BannerBlockEntity> implem
     }
 
     @Override
-    public DyeColor getBaseColor() {
+    public @NotNull DyeColor getBaseColor() {
         return this.base;
     }
 
     @Override
-    public void setBaseColor(DyeColor color) {
+    public void setBaseColor(@Nullable DyeColor color) {
         Preconditions.checkArgument(color != null, "color");
         this.base = color;
     }
 
     @Override
-    public List<Pattern> getPatterns() {
+    public @NotNull List<Pattern> getPatterns() {
         return new ArrayList<Pattern>(this.patterns);
     }
 
     @Override
-    public void setPatterns(List<Pattern> patterns) {
+    public void setPatterns(@NotNull List<Pattern> patterns) {
         this.patterns = new ArrayList<Pattern>(patterns);
     }
 
@@ -64,12 +67,12 @@ public class CraftBanner extends CraftBlockEntityState<BannerBlockEntity> implem
     }
 
     @Override
-    public Pattern getPattern(int i) {
+    public @NotNull Pattern getPattern(int i) {
         return this.patterns.get(i);
     }
 
     @Override
-    public Pattern removePattern(int i) {
+    public @NotNull Pattern removePattern(int i) {
         return this.patterns.remove(i);
     }
 
@@ -84,7 +87,7 @@ public class CraftBanner extends CraftBlockEntityState<BannerBlockEntity> implem
     }
 
     @Override
-    public void applyTo(BannerBlockEntity banner) {
+    public void applyTo(@NotNull BannerBlockEntity banner) {
         super.applyTo(banner);
 
         banner.baseColor = net.minecraft.world.item.DyeColor.byId(this.base.getWoolData());
diff --git a/src/main/java/org/bukkit/craftbukkit/block/CraftBarrel.java b/src/main/java/org/bukkit/craftbukkit/block/CraftBarrel.java
index d5fdf4504a0ca76fb0483f4ae5861c93fb622b2d..8d90475ffe6562df058a1204a4c70c95387779cb 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/CraftBarrel.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/CraftBarrel.java
@@ -8,6 +8,8 @@ import org.bukkit.World;
 import org.bukkit.block.Barrel;
 import org.bukkit.craftbukkit.inventory.CraftInventory;
 import org.bukkit.inventory.Inventory;
+import org.jetbrains.annotations.NotNull;
+
 
 public class CraftBarrel extends CraftLootable<BarrelBlockEntity> implements Barrel {
 
@@ -16,12 +18,12 @@ public class CraftBarrel extends CraftLootable<BarrelBlockEntity> implements Bar
     }
 
     @Override
-    public Inventory getSnapshotInventory() {
+    public @NotNull Inventory getSnapshotInventory() {
         return new CraftInventory(this.getSnapshot());
     }
 
     @Override
-    public Inventory getInventory() {
+    public @NotNull Inventory getInventory() {
         if (!this.isPlaced()) {
             return this.getSnapshotInventory();
         }
diff --git a/src/main/java/org/bukkit/craftbukkit/block/CraftBeacon.java b/src/main/java/org/bukkit/craftbukkit/block/CraftBeacon.java
index c47e613cae3d9252a8364ccc4d717e410bb0fc0c..61aab6c5cacb6766f72cf9f6c991740aca355795 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/CraftBeacon.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/CraftBeacon.java
@@ -14,15 +14,18 @@ import org.bukkit.craftbukkit.util.CraftChatMessage;
 import org.bukkit.entity.LivingEntity;
 import org.bukkit.potion.PotionEffect;
 import org.bukkit.potion.PotionEffectType;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 public class CraftBeacon extends CraftBlockEntityState<BeaconBlockEntity> implements Beacon {
 
-    public CraftBeacon(World world, BeaconBlockEntity tileEntity) {
+    public CraftBeacon(World world, @NotNull BeaconBlockEntity tileEntity) {
         super(world, tileEntity);
     }
 
     @Override
-    public Collection<LivingEntity> getEntitiesInRange() {
+    public @NotNull Collection<LivingEntity> getEntitiesInRange() {
         ensureNoWorldGeneration();
 
         BlockEntity tileEntity = this.getTileEntityFromWorld();
@@ -54,7 +57,7 @@ public class CraftBeacon extends CraftBlockEntityState<BeaconBlockEntity> implem
     }
 
     @Override
-    public void setPrimaryEffect(PotionEffectType effect) {
+    public void setPrimaryEffect(@Nullable PotionEffectType effect) {
         this.getSnapshot().primaryPower = (effect != null) ? MobEffect.byId(effect.getId()) : null;
     }
 
@@ -64,7 +67,7 @@ public class CraftBeacon extends CraftBlockEntityState<BeaconBlockEntity> implem
     }
 
     @Override
-    public void setSecondaryEffect(PotionEffectType effect) {
+    public void setSecondaryEffect(@Nullable PotionEffectType effect) {
         this.getSnapshot().secondaryPower = (effect != null) ? MobEffect.byId(effect.getId()) : null;
     }
 
@@ -76,7 +79,7 @@ public class CraftBeacon extends CraftBlockEntityState<BeaconBlockEntity> implem
     }
 
     @Override
-    public void customName(final net.kyori.adventure.text.Component customName) {
+    public void customName(final net.kyori.adventure.text.@Nullable Component customName) {
         this.getSnapshot().setCustomName(customName != null ? io.papermc.paper.adventure.PaperAdventure.asVanilla(customName) : null);
     }
     // Paper end
@@ -98,12 +101,12 @@ public class CraftBeacon extends CraftBlockEntityState<BeaconBlockEntity> implem
     }
 
     @Override
-    public String getLock() {
+    public @NotNull String getLock() {
         return this.getSnapshot().lockKey.key;
     }
 
     @Override
-    public void setLock(String key) {
+    public void setLock(@Nullable String key) {
         this.getSnapshot().lockKey = (key == null) ? LockCode.NO_LOCK : new LockCode(key);
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/block/CraftBed.java b/src/main/java/org/bukkit/craftbukkit/block/CraftBed.java
index 8d812442132a2273a14dabaf0359a5df6e520613..4b20b127bfb5240c9d9f849956eb0576d197fbfb 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/CraftBed.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/CraftBed.java
@@ -4,15 +4,17 @@ import net.minecraft.world.level.block.entity.BedBlockEntity;
 import org.bukkit.DyeColor;
 import org.bukkit.World;
 import org.bukkit.block.Bed;
+import org.jetbrains.annotations.NotNull;
+
 
 public class CraftBed extends CraftBlockEntityState<BedBlockEntity> implements Bed {
 
-    public CraftBed(World world, BedBlockEntity tileEntity) {
+    public CraftBed(World world, @NotNull BedBlockEntity tileEntity) {
         super(world, tileEntity);
     }
 
     @Override
-    public DyeColor getColor() {
+    public @NotNull DyeColor getColor() {
         switch (getType()) {
             case BLACK_BED:
                 return DyeColor.BLACK;
diff --git a/src/main/java/org/bukkit/craftbukkit/block/CraftBeehive.java b/src/main/java/org/bukkit/craftbukkit/block/CraftBeehive.java
index e00210950cbf005b0e65aed68dfbb7c281aefd87..52a5541657c2fd978cd2a8f92f2fbeb0647a7707 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/CraftBeehive.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/CraftBeehive.java
@@ -12,10 +12,13 @@ import org.bukkit.World;
 import org.bukkit.block.Beehive;
 import org.bukkit.craftbukkit.entity.CraftBee;
 import org.bukkit.entity.Bee;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 public class CraftBeehive extends CraftBlockEntityState<BeehiveBlockEntity> implements Beehive {
 
-    public CraftBeehive(World world, BeehiveBlockEntity tileEntity) {
+    public CraftBeehive(World world, @NotNull BeehiveBlockEntity tileEntity) {
         super(world, tileEntity);
     }
 
@@ -26,7 +29,7 @@ public class CraftBeehive extends CraftBlockEntityState<BeehiveBlockEntity> impl
     }
 
     @Override
-    public void setFlower(Location location) {
+    public void setFlower(@Nullable Location location) {
         Preconditions.checkArgument(location == null || this.getWorld().equals(location.getWorld()), "Flower must be in same world");
         getSnapshot().savedFlowerPos = (location == null) ? null : new BlockPos(location.getBlockX(), location.getBlockY(), location.getBlockZ());
     }
@@ -59,7 +62,7 @@ public class CraftBeehive extends CraftBlockEntityState<BeehiveBlockEntity> impl
     }
 
     @Override
-    public List<Bee> releaseEntities() {
+    public @NotNull List<Bee> releaseEntities() {
         ensureNoWorldGeneration();
 
         List<Bee> bees = new ArrayList<>();
@@ -75,7 +78,7 @@ public class CraftBeehive extends CraftBlockEntityState<BeehiveBlockEntity> impl
     }
 
     @Override
-    public void addEntity(Bee entity) {
+    public void addEntity(@Nullable Bee entity) {
         Preconditions.checkArgument(entity != null, "Entity must not be null");
 
         getSnapshot().addOccupant(((CraftBee) entity).getHandle(), false);
diff --git a/src/main/java/org/bukkit/craftbukkit/block/CraftBell.java b/src/main/java/org/bukkit/craftbukkit/block/CraftBell.java
index 6c5ed0fc9f58b9ec22194074a3fd69b387e3b270..e1492c8c7d1822d3e4fff2bcec54dd258dae1b5f 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/CraftBell.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/CraftBell.java
@@ -3,10 +3,12 @@ package org.bukkit.craftbukkit.block;
 import net.minecraft.world.level.block.entity.BellBlockEntity;
 import org.bukkit.World;
 import org.bukkit.block.Bell;
+import org.jetbrains.annotations.NotNull;
+
 
 public class CraftBell extends CraftBlockEntityState<BellBlockEntity> implements Bell {
 
-    public CraftBell(World world, BellBlockEntity tileEntity) {
+    public CraftBell(World world, @NotNull BellBlockEntity tileEntity) {
         super(world, tileEntity);
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/block/CraftBlock.java b/src/main/java/org/bukkit/craftbukkit/block/CraftBlock.java
index 350cbf64c17938021002d5fd67176c44b398231e..7efdb0cf8ddb50ca04ad4b77825b9d5ba6306518 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/CraftBlock.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/CraftBlock.java
@@ -66,21 +66,24 @@ import org.bukkit.util.BlockVector;
 import org.bukkit.util.BoundingBox;
 import org.bukkit.util.RayTraceResult;
 import org.bukkit.util.Vector;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 public class CraftBlock implements Block {
     private final net.minecraft.world.level.LevelAccessor world;
-    private final BlockPos position;
+    private final @NotNull BlockPos position;
 
-    public CraftBlock(LevelAccessor world, BlockPos position) {
+    public CraftBlock(LevelAccessor world, @NotNull BlockPos position) {
         this.world = world;
         this.position = position.immutable();
     }
 
-    public static CraftBlock at(LevelAccessor world, BlockPos position) {
+    public static @NotNull CraftBlock at(LevelAccessor world, @NotNull BlockPos position) {
         return new CraftBlock(world, position);
     }
 
-    public net.minecraft.world.level.block.state.BlockState getNMS() {
+    public net.minecraft.world.level.block.state.@NotNull BlockState getNMS() {
         return this.world.getBlockState(position);
     }
 
@@ -93,21 +96,21 @@ public class CraftBlock implements Block {
     }
 
     @Override
-    public World getWorld() {
+    public @NotNull World getWorld() {
         return this.world.getMinecraftWorld().getWorld();
     }
 
-    public CraftWorld getCraftWorld() {
+    public @NotNull CraftWorld getCraftWorld() {
         return (CraftWorld) this.getWorld();
     }
 
     @Override
-    public Location getLocation() {
+    public @NotNull Location getLocation() {
         return new Location(this.getWorld(), this.position.getX(), this.position.getY(), this.position.getZ());
     }
 
     @Override
-    public Location getLocation(Location loc) {
+    public Location getLocation(@Nullable Location loc) {
         if (loc != null) {
             loc.setWorld(this.getWorld());
             loc.setX(this.position.getX());
@@ -120,7 +123,7 @@ public class CraftBlock implements Block {
         return loc;
     }
 
-    public BlockVector getVector() {
+    public @NotNull BlockVector getVector() {
         return new BlockVector(this.getX(), this.getY(), this.getZ());
     }
 
@@ -140,7 +143,7 @@ public class CraftBlock implements Block {
     }
 
     @Override
-    public Chunk getChunk() {
+    public @NotNull Chunk getChunk() {
         return this.getWorld().getChunkAt(this);
     }
 
@@ -167,17 +170,17 @@ public class CraftBlock implements Block {
     }
 
     @Override
-    public BlockData getBlockData() {
+    public @NotNull BlockData getBlockData() {
         return CraftBlockData.fromData(this.getNMS());
     }
 
     @Override
-    public void setType(final Material type) {
+    public void setType(final @NotNull Material type) {
         this.setType(type, true);
     }
 
     @Override
-    public void setType(Material type, boolean applyPhysics) {
+    public void setType(@NotNull Material type, boolean applyPhysics) {
         Preconditions.checkArgument(type != null, "Material cannot be null");
         this.setBlockData(type.createBlockData(), applyPhysics);
     }
@@ -188,16 +191,16 @@ public class CraftBlock implements Block {
     }
 
     @Override
-    public void setBlockData(BlockData data, boolean applyPhysics) {
+    public void setBlockData(@Nullable BlockData data, boolean applyPhysics) {
         Preconditions.checkArgument(data != null, "BlockData cannot be null");
         this.setTypeAndData(((CraftBlockData) data).getState(), applyPhysics);
     }
 
-    boolean setTypeAndData(final net.minecraft.world.level.block.state.BlockState blockData, final boolean applyPhysics) {
+    boolean setTypeAndData(final net.minecraft.world.level.block.state.@NotNull BlockState blockData, final boolean applyPhysics) {
         return CraftBlock.setTypeAndData(this.world, this.position, this.getNMS(), blockData, applyPhysics);
     }
 
-    public static boolean setTypeAndData(LevelAccessor world, BlockPos position, net.minecraft.world.level.block.state.BlockState old, net.minecraft.world.level.block.state.BlockState blockData, boolean applyPhysics) {
+    public static boolean setTypeAndData(LevelAccessor world, @NotNull BlockPos position, net.minecraft.world.level.block.state.@NotNull BlockState old, net.minecraft.world.level.block.state.@NotNull BlockState blockData, boolean applyPhysics) {
         // SPIGOT-611: need to do this to prevent glitchiness. Easier to handle this here (like /setblock) than to fix weirdness in tile entity cleanup
         if (old.hasBlockEntity() && blockData.getBlock() != old.getBlock()) { // SPIGOT-3725 remove old tile entity if block changes
             // SPIGOT-4612: faster - just clear tile
@@ -225,7 +228,7 @@ public class CraftBlock implements Block {
     }
 
     @Override
-    public Material getType() {
+    public @NotNull Material getType() {
         return this.world.getBlockState(this.position).getBukkitMaterial(); // Paper - optimise getType calls
     }
 
@@ -244,31 +247,31 @@ public class CraftBlock implements Block {
         return (byte) this.world.getBrightness(LightLayer.BLOCK, position);
     }
 
-    public Block getFace(final BlockFace face) {
+    public @NotNull Block getFace(final @NotNull BlockFace face) {
         return this.getRelative(face, 1);
     }
 
-    public Block getFace(final BlockFace face, final int distance) {
+    public @NotNull Block getFace(final @NotNull BlockFace face, final int distance) {
         return this.getRelative(face, distance);
     }
 
     @Override
-    public Block getRelative(final int modX, final int modY, final int modZ) {
+    public @NotNull Block getRelative(final int modX, final int modY, final int modZ) {
         return this.getWorld().getBlockAt(this.getX() + modX, this.getY() + modY, this.getZ() + modZ);
     }
 
     @Override
-    public Block getRelative(BlockFace face) {
+    public @NotNull Block getRelative(@NotNull BlockFace face) {
         return this.getRelative(face, 1);
     }
 
     @Override
-    public Block getRelative(BlockFace face, int distance) {
+    public @NotNull Block getRelative(@NotNull BlockFace face, int distance) {
         return this.getRelative(face.getModX() * distance, face.getModY() * distance, face.getModZ() * distance);
     }
 
     @Override
-    public BlockFace getFace(final Block block) {
+    public BlockFace getFace(final @NotNull Block block) {
         BlockFace[] values = BlockFace.values();
 
         for (BlockFace face : values) {
@@ -281,11 +284,11 @@ public class CraftBlock implements Block {
     }
 
     @Override
-    public String toString() {
+    public @NotNull String toString() {
         return "CraftBlock{pos=" + this.position + ",type=" + this.getType() + ",data=" + this.getNMS() + ",fluid=" + this.world.getFluidState(position) + '}';
     }
 
-    public static BlockFace notchToBlockFace(Direction notch) {
+    public static @NotNull BlockFace notchToBlockFace(@Nullable Direction notch) {
         if (notch == null) {
             return BlockFace.SELF;
         }
@@ -307,7 +310,7 @@ public class CraftBlock implements Block {
         }
     }
 
-    public static Direction blockFaceToNotch(BlockFace face) {
+    public static @Nullable Direction blockFaceToNotch(@NotNull BlockFace face) {
         switch (face) {
             case DOWN:
                 return Direction.DOWN;
@@ -327,39 +330,39 @@ public class CraftBlock implements Block {
     }
 
     @Override
-    public BlockState getState() {
+    public @NotNull BlockState getState() {
         return CraftBlockStates.getBlockState(this);
     }
 
     // Paper start
     @Override
-    public BlockState getState(boolean useSnapshot) {
+    public @NotNull BlockState getState(boolean useSnapshot) {
         return CraftBlockStates.getBlockState(this, useSnapshot);
     }
     // Paper end
 
     @Override
-    public Biome getBiome() {
+    public @NotNull Biome getBiome() {
         return this.getWorld().getBiome(this.getX(), this.getY(), this.getZ());
     }
 
     // Paper start
     @Override
-    public Biome getComputedBiome() {
+    public @NotNull Biome getComputedBiome() {
         return this.getWorld().getComputedBiome(this.getX(), this.getY(), this.getZ());
     }
     // Paper end
 
     @Override
-    public void setBiome(Biome bio) {
+    public void setBiome(@NotNull Biome bio) {
         this.getWorld().setBiome(this.getX(), this.getY(), this.getZ(), bio);
     }
 
-    public static Biome biomeBaseToBiome(net.minecraft.core.Registry<net.minecraft.world.level.biome.Biome> registry, Holder<net.minecraft.world.level.biome.Biome> base) {
+    public static Biome biomeBaseToBiome(net.minecraft.core.@NotNull Registry<net.minecraft.world.level.biome.Biome> registry, @NotNull Holder<net.minecraft.world.level.biome.Biome> base) {
         return CraftBlock.biomeBaseToBiome(registry, base.value());
     }
 
-    public static Biome biomeBaseToBiome(net.minecraft.core.Registry<net.minecraft.world.level.biome.Biome> registry, net.minecraft.world.level.biome.Biome base) {
+    public static Biome biomeBaseToBiome(net.minecraft.core.@NotNull Registry<net.minecraft.world.level.biome.Biome> registry, net.minecraft.world.level.biome.@Nullable Biome base) {
         if (base == null) {
             return null;
         }
@@ -369,7 +372,7 @@ public class CraftBlock implements Block {
     }
 
     private static final java.util.Map<org.bukkit.block.Biome, net.minecraft.resources.ResourceKey<net.minecraft.world.level.biome.Biome>> BIOME_KEY_CACHE = Collections.synchronizedMap(new java.util.EnumMap<>(Biome.class)); // Paper
-    public static Holder<net.minecraft.world.level.biome.Biome> biomeToBiomeBase(net.minecraft.core.Registry<net.minecraft.world.level.biome.Biome> registry, Biome bio) {
+    public static Holder<net.minecraft.world.level.biome.Biome> biomeToBiomeBase(net.minecraft.core.@NotNull Registry<net.minecraft.world.level.biome.Biome> registry, @Nullable Biome bio) {
         if (bio == null || bio == Biome.CUSTOM) {
             return null;
         }
@@ -416,12 +419,12 @@ public class CraftBlock implements Block {
     }
 
     @Override
-    public boolean isBlockFacePowered(BlockFace face) {
+    public boolean isBlockFacePowered(@NotNull BlockFace face) {
         return this.world.getMinecraftWorld().hasSignal(position, CraftBlock.blockFaceToNotch(face));
     }
 
     @Override
-    public boolean isBlockFaceIndirectlyPowered(BlockFace face) {
+    public boolean isBlockFaceIndirectlyPowered(@NotNull BlockFace face) {
         int power = this.world.getMinecraftWorld().getSignal(position, CraftBlock.blockFaceToNotch(face));
 
         Block relative = this.getRelative(face);
@@ -433,7 +436,7 @@ public class CraftBlock implements Block {
     }
 
     @Override
-    public int getBlockPower(BlockFace face) {
+    public int getBlockPower(@NotNull BlockFace face) {
         int power = 0;
         net.minecraft.world.level.Level world = this.world.getMinecraftWorld();
         int x = this.getX();
@@ -448,7 +451,7 @@ public class CraftBlock implements Block {
         return power > 0 ? power : (face == BlockFace.SELF ? this.isBlockIndirectlyPowered() : this.isBlockFaceIndirectlyPowered(face)) ? 15 : 0;
     }
 
-    private static int getPower(int i, net.minecraft.world.level.block.state.BlockState iblockdata) {
+    private static int getPower(int i, net.minecraft.world.level.block.state.@NotNull BlockState iblockdata) {
         if (!iblockdata.is(Blocks.REDSTONE_WIRE)) {
             return i;
         } else {
@@ -498,7 +501,7 @@ public class CraftBlock implements Block {
     // Paper end
 
     @Override
-    public PistonMoveReaction getPistonMoveReaction() {
+    public @NotNull PistonMoveReaction getPistonMoveReaction() {
         return PistonMoveReaction.getById(this.getNMS().getPistonPushReaction().ordinal());
     }
 
@@ -519,7 +522,7 @@ public class CraftBlock implements Block {
     }
 
     @Override
-    public boolean breakNaturally(ItemStack item, boolean triggerEffect, boolean dropExperience) {
+    public boolean breakNaturally(@Nullable ItemStack item, boolean triggerEffect, boolean dropExperience) {
         // Paper end
         // Order matters here, need to drop before setting to air so skulls can get their data
         net.minecraft.world.level.block.state.BlockState iblockdata = this.getNMS();
@@ -562,7 +565,7 @@ public class CraftBlock implements Block {
     }
 
     @Override
-    public boolean applyBoneMeal(BlockFace face) {
+    public boolean applyBoneMeal(@NotNull BlockFace face) {
         Direction direction = CraftBlock.blockFaceToNotch(face);
         BlockFertilizeEvent event = null;
         ServerLevel world = this.getCraftWorld().getHandle();
@@ -600,17 +603,17 @@ public class CraftBlock implements Block {
     }
 
     @Override
-    public Collection<ItemStack> getDrops() {
+    public @NotNull Collection<ItemStack> getDrops() {
         return this.getDrops(null);
     }
 
     @Override
-    public Collection<ItemStack> getDrops(ItemStack item) {
+    public @NotNull Collection<ItemStack> getDrops(ItemStack item) {
         return this.getDrops(item, null);
     }
 
     @Override
-    public Collection<ItemStack> getDrops(ItemStack item, Entity entity) {
+    public @NotNull Collection<ItemStack> getDrops(@Nullable ItemStack item, @Nullable Entity entity) {
         net.minecraft.world.level.block.state.BlockState iblockdata = this.getNMS();
         net.minecraft.world.item.ItemStack nms = CraftItemStack.asNMSCopy(item);
 
@@ -631,12 +634,12 @@ public class CraftBlock implements Block {
     }
 
     @Override
-    public float getBreakSpeed(Player player) {
+    public float getBreakSpeed(@Nullable Player player) {
         Preconditions.checkArgument(player != null, "player cannot be null");
         return this.getNMS().getDestroyProgress(((CraftPlayer) player).getHandle(), world, position);
     }
 
-    private boolean isPreferredTool(net.minecraft.world.level.block.state.BlockState iblockdata, net.minecraft.world.item.ItemStack nmsItem) {
+    private boolean isPreferredTool(net.minecraft.world.level.block.state.@NotNull BlockState iblockdata, net.minecraft.world.item.@NotNull ItemStack nmsItem) {
         return !iblockdata.requiresCorrectToolForDrops() || nmsItem.isCorrectToolForDrops(iblockdata);
     }
 
@@ -646,7 +649,7 @@ public class CraftBlock implements Block {
     }
 
     @Override
-    public List<MetadataValue> getMetadata(String metadataKey) {
+    public @NotNull List<MetadataValue> getMetadata(String metadataKey) {
         return this.getCraftWorld().getBlockMetadata().getMetadata(this, metadataKey);
     }
 
@@ -666,7 +669,7 @@ public class CraftBlock implements Block {
     }
 
     @Override
-    public RayTraceResult rayTrace(Location start, Vector direction, double maxDistance, FluidCollisionMode fluidCollisionMode) {
+    public RayTraceResult rayTrace(@NotNull Location start, @NotNull Vector direction, double maxDistance, FluidCollisionMode fluidCollisionMode) {
         Validate.notNull(start, "Start location is null!");
         Validate.isTrue(this.getWorld().equals(start.getWorld()), "Start location is from different world!");
         start.checkFinite();
@@ -689,7 +692,7 @@ public class CraftBlock implements Block {
     }
 
     @Override
-    public BoundingBox getBoundingBox() {
+    public @NotNull BoundingBox getBoundingBox() {
         VoxelShape shape = this.getNMS().getShape(world, position);
 
         if (shape.isEmpty()) {
@@ -701,13 +704,13 @@ public class CraftBlock implements Block {
     }
 
     @Override
-    public org.bukkit.util.VoxelShape getCollisionShape() {
+    public org.bukkit.util.@NotNull VoxelShape getCollisionShape() {
         VoxelShape shape = this.getNMS().getCollisionShape(world, position);
         return new CraftVoxelShape(shape);
     }
 
     @Override
-    public boolean canPlace(BlockData data) {
+    public boolean canPlace(@Nullable BlockData data) {
         Preconditions.checkArgument(data != null, "Provided block data is null!");
         net.minecraft.world.level.block.state.BlockState iblockdata = ((CraftBlockData) data).getState();
         net.minecraft.world.level.Level world = this.world.getMinecraftWorld();
@@ -717,22 +720,22 @@ public class CraftBlock implements Block {
 
     // Paper start
     @Override
-    public com.destroystokyo.paper.block.BlockSoundGroup getSoundGroup() {
+    public com.destroystokyo.paper.block.@NotNull BlockSoundGroup getSoundGroup() {
         return new com.destroystokyo.paper.block.CraftBlockSoundGroup(getNMS().getBlock().defaultBlockState().getSoundType());
     }
 
     @Override
-    public org.bukkit.SoundGroup getBlockSoundGroup() {
+    public org.bukkit.@NotNull SoundGroup getBlockSoundGroup() {
         return org.bukkit.craftbukkit.CraftSoundGroup.getSoundGroup(this.getNMS().getSoundType());
     }
 
     @Override
-    public String getTranslationKey() {
+    public @NotNull String getTranslationKey() {
         return this.translationKey();
     }
 
     @Override
-    public String translationKey() {
+    public @NotNull String translationKey() {
         return org.bukkit.Bukkit.getUnsafe().getTranslationKey(this);
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/block/CraftBlockEntityState.java b/src/main/java/org/bukkit/craftbukkit/block/CraftBlockEntityState.java
index a2894f02ceb7c58f6eafe055e1ff47b197b100f2..6fecde1416c822e2f8181b1e3d97feffd1cb1fc9 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/CraftBlockEntityState.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/CraftBlockEntityState.java
@@ -5,15 +5,18 @@ import net.minecraft.world.level.block.entity.BlockEntity;
 import org.bukkit.World;
 import org.bukkit.block.TileState;
 import org.bukkit.persistence.PersistentDataContainer;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 public abstract class CraftBlockEntityState<T extends BlockEntity> extends CraftBlockState implements TileState { // Paper - revert upstream's revert of the block state changes
 
-    private final T tileEntity;
+    private final @NotNull T tileEntity;
     private final T snapshot;
     public final boolean snapshotDisabled; // Paper
     public static boolean DISABLE_SNAPSHOT = false; // Paper
 
-    public CraftBlockEntityState(World world, T tileEntity) {
+    public CraftBlockEntityState(World world, @NotNull T tileEntity) {
         super(world, tileEntity.getBlockPos(), tileEntity.getBlockState());
 
         this.tileEntity = tileEntity;
@@ -45,7 +48,7 @@ public abstract class CraftBlockEntityState<T extends BlockEntity> extends Craft
         this.load(tileEntity);
     }
 
-    private T createSnapshot(T tileEntity) {
+    private T createSnapshot(@Nullable T tileEntity) {
         if (tileEntity == null) {
             return null;
         }
@@ -57,7 +60,7 @@ public abstract class CraftBlockEntityState<T extends BlockEntity> extends Craft
     }
 
     // copies the TileEntity-specific data, retains the position
-    private void copyData(T from, T to) {
+    private void copyData(@NotNull T from, @NotNull T to) {
         CompoundTag nbtTagCompound = from.saveWithFullMetadata();
         to.load(nbtTagCompound);
     }
@@ -73,14 +76,14 @@ public abstract class CraftBlockEntityState<T extends BlockEntity> extends Craft
     }
 
     // gets the current TileEntity from the world at this position
-    protected BlockEntity getTileEntityFromWorld() {
+    protected @Nullable BlockEntity getTileEntityFromWorld() {
         requirePlaced();
 
         return getWorldHandle().getBlockEntity(this.getPosition());
     }
 
     // gets the NBT data of the TileEntity represented by this block state
-    public CompoundTag getSnapshotNBT() {
+    public @NotNull CompoundTag getSnapshotNBT() {
         // update snapshot
         this.applyTo(this.snapshot);
 
@@ -88,20 +91,20 @@ public abstract class CraftBlockEntityState<T extends BlockEntity> extends Craft
     }
 
     // copies the data of the given tile entity to this block state
-    protected void load(T tileEntity) {
+    protected void load(@Nullable T tileEntity) {
         if (tileEntity != null && tileEntity != this.snapshot) {
             this.copyData(tileEntity, this.snapshot);
         }
     }
 
     // applies the TileEntity data of this block state to the given TileEntity
-    protected void applyTo(T tileEntity) {
+    protected void applyTo(@Nullable T tileEntity) {
         if (tileEntity != null && tileEntity != this.snapshot) {
             this.copyData(this.snapshot, tileEntity);
         }
     }
 
-    protected boolean isApplicable(BlockEntity tileEntity) {
+    protected boolean isApplicable(@Nullable BlockEntity tileEntity) {
         return tileEntity != null && this.tileEntity.getClass() == tileEntity.getClass();
     }
 
@@ -122,7 +125,7 @@ public abstract class CraftBlockEntityState<T extends BlockEntity> extends Craft
     }
 
     @Override
-    public PersistentDataContainer getPersistentDataContainer() {
+    public @NotNull PersistentDataContainer getPersistentDataContainer() {
         return this.getSnapshot().persistentDataContainer;
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/block/CraftBlockState.java b/src/main/java/org/bukkit/craftbukkit/block/CraftBlockState.java
index a8ab1d3ee81664193be39d2735d6495136e0e310..f6effc81b4b8bf4e79e1f7a933d8db69f9051088 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/CraftBlockState.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/CraftBlockState.java
@@ -20,23 +20,25 @@ import org.bukkit.material.Attachable;
 import org.bukkit.material.MaterialData;
 import org.bukkit.metadata.MetadataValue;
 import org.bukkit.plugin.Plugin;
+import org.jetbrains.annotations.NotNull;
+
 
 public class CraftBlockState implements BlockState {
 
-    protected final CraftWorld world;
+    protected final @org.jetbrains.annotations.Nullable CraftWorld world;
     private final BlockPos position;
     protected net.minecraft.world.level.block.state.BlockState data;
     protected int flag;
-    private WeakReference<LevelAccessor> weakWorld;
+    private @org.jetbrains.annotations.Nullable WeakReference<LevelAccessor> weakWorld;
 
-    protected CraftBlockState(final Block block) {
+    protected CraftBlockState(final @NotNull Block block) {
         this(block.getWorld(), ((CraftBlock) block).getPosition(), ((CraftBlock) block).getNMS());
         this.flag = 3;
 
         this.setWorldHandle(((CraftBlock) block).getHandle());
     }
 
-    protected CraftBlockState(final Block block, int flag) {
+    protected CraftBlockState(final @NotNull Block block, int flag) {
         this(block);
         this.flag = flag;
     }
@@ -58,7 +60,7 @@ public class CraftBlockState implements BlockState {
 
     // Returns null if weakWorld is not available and the BlockState is not placed.
     // If this returns a World instead of only a GeneratorAccess, this implies that this BlockState is placed.
-    public LevelAccessor getWorldHandle() {
+    public @org.jetbrains.annotations.Nullable LevelAccessor getWorldHandle() {
         if (this.weakWorld == null) {
             return this.isPlaced() ? this.world.getHandle() : null;
         }
@@ -84,7 +86,7 @@ public class CraftBlockState implements BlockState {
     }
 
     @Override
-    public World getWorld() {
+    public @NotNull World getWorld() {
         this.requirePlaced();
         return this.world;
     }
@@ -105,7 +107,7 @@ public class CraftBlockState implements BlockState {
     }
 
     @Override
-    public Chunk getChunk() {
+    public @NotNull Chunk getChunk() {
         this.requirePlaced();
         return this.world.getChunkAt(this.getX() >> 4, this.getZ() >> 4);
     }
@@ -123,18 +125,18 @@ public class CraftBlockState implements BlockState {
     }
 
     @Override
-    public BlockData getBlockData() {
+    public @NotNull BlockData getBlockData() {
         return CraftBlockData.fromData(data);
     }
 
     @Override
-    public void setBlockData(BlockData data) {
+    public void setBlockData(@org.jetbrains.annotations.Nullable BlockData data) {
         Preconditions.checkArgument(data != null, "BlockData cannot be null");
         this.data = ((CraftBlockData) data).getState();
     }
 
     @Override
-    public void setData(final MaterialData data) {
+    public void setData(final @NotNull MaterialData data) {
         Material mat = CraftMagicNumbers.getMaterial(this.data).getItemType();
 
         if ((mat == null) || (mat.getData() == null)) {
@@ -150,12 +152,12 @@ public class CraftBlockState implements BlockState {
     }
 
     @Override
-    public MaterialData getData() {
+    public @NotNull MaterialData getData() {
         return CraftMagicNumbers.getMaterial(data);
     }
 
     @Override
-    public void setType(final Material type) {
+    public void setType(final @NotNull Material type) {
         Preconditions.checkArgument(type != null, "Material cannot be null");
         Preconditions.checkArgument(type.isBlock(), "Material must be a block!");
 
@@ -165,7 +167,7 @@ public class CraftBlockState implements BlockState {
     }
 
     @Override
-    public Material getType() {
+    public @NotNull Material getType() {
         return this.data.getBukkitMaterial(); // Paper - optimise getType calls
     }
 
@@ -183,7 +185,7 @@ public class CraftBlockState implements BlockState {
     }
 
     @Override
-    public CraftBlock getBlock() {
+    public @NotNull CraftBlock getBlock() {
         this.requirePlaced();
         return CraftBlock.at(this.getWorldHandle(), position);
     }
@@ -237,12 +239,12 @@ public class CraftBlockState implements BlockState {
     }
 
     @Override
-    public Location getLocation() {
+    public @NotNull Location getLocation() {
         return new Location(this.world, this.getX(), this.getY(), this.getZ());
     }
 
     @Override
-    public Location getLocation(Location loc) {
+    public Location getLocation(@org.jetbrains.annotations.Nullable Location loc) {
         if (loc != null) {
             loc.setWorld(world);
             loc.setX(this.getX());
@@ -261,7 +263,7 @@ public class CraftBlockState implements BlockState {
     }
 
     @Override
-    public boolean equals(Object obj) {
+    public boolean equals(@org.jetbrains.annotations.Nullable Object obj) {
         if (obj == null) {
             return false;
         }
@@ -297,7 +299,7 @@ public class CraftBlockState implements BlockState {
     }
 
     @Override
-    public List<MetadataValue> getMetadata(String metadataKey) {
+    public @NotNull List<MetadataValue> getMetadata(String metadataKey) {
         this.requirePlaced();
         return this.world.getBlockMetadata().getMetadata(this.getBlock(), metadataKey);
     }
@@ -332,17 +334,17 @@ public class CraftBlockState implements BlockState {
     }
 
     @Override
-    public java.util.Collection<org.bukkit.inventory.ItemStack> getDrops() {
+    public java.util.@NotNull Collection<org.bukkit.inventory.ItemStack> getDrops() {
         return this.getDrops(null);
     }
 
     @Override
-    public java.util.Collection<org.bukkit.inventory.ItemStack> getDrops(org.bukkit.inventory.ItemStack item) {
+    public java.util.@NotNull Collection<org.bukkit.inventory.ItemStack> getDrops(org.bukkit.inventory.ItemStack item) {
         return this.getDrops(item, null);
     }
 
     @Override
-    public java.util.Collection<org.bukkit.inventory.ItemStack> getDrops(org.bukkit.inventory.ItemStack item, org.bukkit.entity.Entity entity) {
+    public java.util.@NotNull Collection<org.bukkit.inventory.ItemStack> getDrops(org.bukkit.inventory.@org.jetbrains.annotations.Nullable ItemStack item, org.bukkit.entity.@org.jetbrains.annotations.Nullable Entity entity) {
         net.minecraft.world.item.ItemStack nms = org.bukkit.craftbukkit.inventory.CraftItemStack.asNMSCopy(item);
 
         // Modelled off EntityHuman#hasBlock
diff --git a/src/main/java/org/bukkit/craftbukkit/block/CraftBlockStates.java b/src/main/java/org/bukkit/craftbukkit/block/CraftBlockStates.java
index 4d6f2b9b063b4b5accfe9fe1e6c230f114451d23..fdb02d63b2313d926341f8babddbb3f2bc6592f7 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/CraftBlockStates.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/CraftBlockStates.java
@@ -57,6 +57,8 @@ import org.bukkit.block.Block;
 import org.bukkit.block.BlockState;
 import org.bukkit.craftbukkit.CraftWorld;
 import org.bukkit.craftbukkit.util.CraftMagicNumbers;
+import org.jetbrains.annotations.NotNull;
+
 
 public final class CraftBlockStates {
 
@@ -89,7 +91,7 @@ public final class CraftBlockStates {
         }
 
         @Override
-        public final B createBlockState(World world, BlockPos blockPosition, net.minecraft.world.level.block.state.BlockState blockData, BlockEntity tileEntity) {
+        public final B createBlockState(@org.jetbrains.annotations.Nullable World world, @NotNull BlockPos blockPosition, net.minecraft.world.level.block.state.BlockState blockData, @org.jetbrains.annotations.Nullable BlockEntity tileEntity) {
             if (world != null) {
                 Preconditions.checkState(tileEntity != null, "Tile is null, asynchronous access? %s", CraftBlock.at(((CraftWorld) world).getHandle(), blockPosition));
             } else if (tileEntity == null) {
@@ -110,7 +112,7 @@ public final class CraftBlockStates {
     private static final Map<Material, BlockStateFactory<?>> FACTORIES = new HashMap<>();
     private static final BlockStateFactory<?> DEFAULT_FACTORY = new BlockStateFactory<CraftBlockState>(CraftBlockState.class) {
         @Override
-        public CraftBlockState createBlockState(World world, BlockPos blockPosition, net.minecraft.world.level.block.state.BlockState blockData, BlockEntity tileEntity) {
+        public @NotNull CraftBlockState createBlockState(World world, BlockPos blockPosition, net.minecraft.world.level.block.state.@NotNull BlockState blockData, @org.jetbrains.annotations.Nullable BlockEntity tileEntity) {
             // Paper - revert upstream's revert of the block state changes. Block entities that have already had the block type set to AIR are still valid, upstream decided to ignore them
             Preconditions.checkState(tileEntity == null, "Unexpected BlockState for %s", CraftMagicNumbers.getMaterial(blockData.getBlock()));
             return new CraftBlockState(world, blockPosition, blockData);
@@ -171,9 +173,9 @@ public final class CraftBlockStates {
     }
 
     private static <T extends BlockEntity, B extends CraftBlockEntityState<T>> void register(
-            net.minecraft.world.level.block.entity.BlockEntityType<? extends T> blockEntityType, // Paper
-            Class<B> blockStateType,
-            BiFunction<World, T, B> blockStateConstructor // Paper
+	    net.minecraft.world.level.block.entity.@NotNull BlockEntityType<? extends T> blockEntityType, // Paper
+	    Class<B> blockStateType,
+	    BiFunction<World, T, B> blockStateConstructor // Paper
     ) {
         // Paper start
         BlockStateFactory<B> factory = new BlockEntityStateFactory<>(blockStateType, blockStateConstructor, blockEntityType::create);
@@ -189,7 +191,7 @@ public final class CraftBlockStates {
     }
 
     // Paper start
-    private static BlockStateFactory<?> getFactory(Material material, BlockEntityType<?> type) {
+    private static BlockStateFactory<?> getFactory(Material material, @org.jetbrains.annotations.Nullable BlockEntityType<?> type) {
         if (type != null) {
             return CraftBlockStates.FACTORIES_BY_BLOCK_ENTITY_TYPE.getOrDefault(type, getFactory(material));
         } else {
@@ -203,7 +205,7 @@ public final class CraftBlockStates {
         return CraftBlockStates.getFactory(material).blockStateType;
     }
 
-    public static BlockEntity createNewTileEntity(Material material) {
+    public static @org.jetbrains.annotations.Nullable BlockEntity createNewTileEntity(Material material) {
         BlockStateFactory<?> factory = CraftBlockStates.getFactory(material);
 
         if (factory instanceof BlockEntityStateFactory) {
@@ -220,11 +222,11 @@ public final class CraftBlockStates {
     }
     // Paper end
 
-    public static BlockState getBlockState(Block block) {
+    public static @NotNull BlockState getBlockState(@NotNull Block block) {
         // Paper start
         return CraftBlockStates.getBlockState(block, true);
     }
-    public static BlockState getBlockState(Block block, boolean useSnapshot) {
+    public static @NotNull BlockState getBlockState(@NotNull Block block, boolean useSnapshot) {
         // Paper end
         Preconditions.checkNotNull(block, "block is null");
         CraftBlock craftBlock = (CraftBlock) block;
@@ -251,17 +253,17 @@ public final class CraftBlockStates {
         return CraftBlockStates.getBlockState(BlockPos.ZERO, material, blockEntityTag);
     }
 
-    public static BlockState getBlockState(BlockPos blockPosition, Material material, @Nullable CompoundTag blockEntityTag) {
+    public static BlockState getBlockState(@NotNull BlockPos blockPosition, Material material, @Nullable CompoundTag blockEntityTag) {
         Preconditions.checkNotNull(material, "material is null");
         net.minecraft.world.level.block.state.BlockState blockData = CraftMagicNumbers.getBlock(material).defaultBlockState();
         return CraftBlockStates.getBlockState(blockPosition, blockData, blockEntityTag);
     }
 
-    public static BlockState getBlockState(net.minecraft.world.level.block.state.BlockState blockData, @Nullable CompoundTag blockEntityTag) {
+    public static BlockState getBlockState(net.minecraft.world.level.block.state.@NotNull BlockState blockData, @Nullable CompoundTag blockEntityTag) {
         return CraftBlockStates.getBlockState(BlockPos.ZERO, blockData, blockEntityTag);
     }
 
-    public static BlockState getBlockState(BlockPos blockPosition, net.minecraft.world.level.block.state.BlockState blockData, @Nullable CompoundTag blockEntityTag) {
+    public static BlockState getBlockState(@NotNull BlockPos blockPosition, net.minecraft.world.level.block.state.@NotNull BlockState blockData, @Nullable CompoundTag blockEntityTag) {
         Preconditions.checkNotNull(blockPosition, "blockPosition is null");
         Preconditions.checkNotNull(blockData, "blockData is null");
         BlockEntity tileEntity = (blockEntityTag == null) ? null : BlockEntity.loadStatic(blockPosition, blockData, blockEntityTag);
@@ -275,7 +277,7 @@ public final class CraftBlockStates {
     // Paper end
 
     // See BlockStateFactory#createBlockState(World, BlockPosition, IBlockData, TileEntity)
-    private static CraftBlockState getBlockState(World world, BlockPos blockPosition, net.minecraft.world.level.block.state.BlockState blockData, BlockEntity tileEntity) {
+    private static CraftBlockState getBlockState(@org.jetbrains.annotations.Nullable World world, BlockPos blockPosition, net.minecraft.world.level.block.state.@NotNull BlockState blockData, @org.jetbrains.annotations.Nullable BlockEntity tileEntity) {
         Material material = CraftMagicNumbers.getMaterial(blockData.getBlock());
         BlockStateFactory<?> factory;
         // For some types of TileEntity blocks (eg. moving pistons), Minecraft may in some situations (eg. when using Block#setType or the
@@ -293,12 +295,12 @@ public final class CraftBlockStates {
     }
 
     // This ignores tile entity data.
-    public static CraftBlockState getBlockState(LevelAccessor world, BlockPos pos) {
+    public static @NotNull CraftBlockState getBlockState(LevelAccessor world, @NotNull BlockPos pos) {
         return new CraftBlockState(CraftBlock.at(world, pos));
     }
 
     // This ignores tile entity data.
-    public static CraftBlockState getBlockState(LevelAccessor world, BlockPos pos, int flag) {
+    public static @NotNull CraftBlockState getBlockState(LevelAccessor world, @NotNull BlockPos pos, int flag) {
         return new CraftBlockState(CraftBlock.at(world, pos), flag);
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/block/CraftBlockSupport.java b/src/main/java/org/bukkit/craftbukkit/block/CraftBlockSupport.java
index 5d902c1dfad70d090b31d7679643e9a06098f0b0..e2374ada85d59d2bb0112a926696771699ecf044 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/CraftBlockSupport.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/CraftBlockSupport.java
@@ -2,13 +2,15 @@ package org.bukkit.craftbukkit.block;
 
 import net.minecraft.world.level.block.SupportType;
 import org.bukkit.block.BlockSupport;
+import org.jetbrains.annotations.NotNull;
+
 
 public final class CraftBlockSupport {
 
     private CraftBlockSupport() {
     }
 
-    public static BlockSupport toBukkit(SupportType support) {
+    public static @NotNull BlockSupport toBukkit(@NotNull SupportType support) {
         return switch (support) {
             case FULL -> BlockSupport.FULL;
             case CENTER -> BlockSupport.CENTER;
@@ -17,7 +19,7 @@ public final class CraftBlockSupport {
         };
     }
 
-    public static SupportType toNMS(BlockSupport support) {
+    public static @NotNull SupportType toNMS(@NotNull BlockSupport support) {
         return switch (support) {
             case FULL -> SupportType.FULL;
             case CENTER -> SupportType.CENTER;
diff --git a/src/main/java/org/bukkit/craftbukkit/block/CraftBrewingStand.java b/src/main/java/org/bukkit/craftbukkit/block/CraftBrewingStand.java
index 7578334a1027742912139b23a42146efa0a7b0ba..666457b80a63a1e7313cc4b742bfb15463036ba3 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/CraftBrewingStand.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/CraftBrewingStand.java
@@ -5,20 +5,22 @@ import org.bukkit.World;
 import org.bukkit.block.BrewingStand;
 import org.bukkit.craftbukkit.inventory.CraftInventoryBrewer;
 import org.bukkit.inventory.BrewerInventory;
+import org.jetbrains.annotations.NotNull;
+
 
 public class CraftBrewingStand extends CraftContainer<BrewingStandBlockEntity> implements BrewingStand {
 
-    public CraftBrewingStand(World world, BrewingStandBlockEntity tileEntity) {
+    public CraftBrewingStand(World world, @NotNull BrewingStandBlockEntity tileEntity) {
         super(world, tileEntity);
     }
 
     @Override
-    public BrewerInventory getSnapshotInventory() {
+    public @NotNull BrewerInventory getSnapshotInventory() {
         return new CraftInventoryBrewer(this.getSnapshot());
     }
 
     @Override
-    public BrewerInventory getInventory() {
+    public @NotNull BrewerInventory getInventory() {
         if (!this.isPlaced()) {
             return this.getSnapshotInventory();
         }
diff --git a/src/main/java/org/bukkit/craftbukkit/block/CraftCampfire.java b/src/main/java/org/bukkit/craftbukkit/block/CraftCampfire.java
index eafba0532920a3162575dbe656e07734605590f5..319494db879e35bd9fdefb6a8dd3463784cba52d 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/CraftCampfire.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/CraftCampfire.java
@@ -5,10 +5,12 @@ import org.bukkit.World;
 import org.bukkit.block.Campfire;
 import org.bukkit.craftbukkit.inventory.CraftItemStack;
 import org.bukkit.inventory.ItemStack;
+import org.jetbrains.annotations.NotNull;
+
 
 public class CraftCampfire extends CraftBlockEntityState<CampfireBlockEntity> implements Campfire {
 
-    public CraftCampfire(World world, CampfireBlockEntity tileEntity) {
+    public CraftCampfire(World world, @NotNull CampfireBlockEntity tileEntity) {
         super(world, tileEntity);
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/block/CraftChest.java b/src/main/java/org/bukkit/craftbukkit/block/CraftChest.java
index b4bc5cbb71007b4d1a27bb841ff787a95e9ecbdc..054c801a28605db0cb87d61c2c034ae9999f4b26 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/CraftChest.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/CraftChest.java
@@ -13,6 +13,8 @@ import org.bukkit.craftbukkit.inventory.CraftInventory;
 import org.bukkit.craftbukkit.inventory.CraftInventoryDoubleChest;
 import org.bukkit.inventory.Inventory;
 import com.destroystokyo.paper.loottable.PaperLootableBlockInventory; // Paper
+import org.jetbrains.annotations.NotNull;
+
 
 public class CraftChest extends CraftLootable<ChestBlockEntity> implements Chest, PaperLootableBlockInventory { // Paper
 
@@ -21,12 +23,12 @@ public class CraftChest extends CraftLootable<ChestBlockEntity> implements Chest
     }
 
     @Override
-    public Inventory getSnapshotInventory() {
+    public @NotNull Inventory getSnapshotInventory() {
         return new CraftInventory(this.getSnapshot());
     }
 
     @Override
-    public Inventory getBlockInventory() {
+    public @NotNull Inventory getBlockInventory() {
         if (!this.isPlaced()) {
             return this.getSnapshotInventory();
         }
@@ -35,7 +37,7 @@ public class CraftChest extends CraftLootable<ChestBlockEntity> implements Chest
     }
 
     @Override
-    public Inventory getInventory() {
+    public @NotNull Inventory getInventory() {
         CraftInventory inventory = (CraftInventory) this.getBlockInventory();
         if (!isPlaced() || isWorldGeneration()) {
             return inventory;
diff --git a/src/main/java/org/bukkit/craftbukkit/block/CraftCommandBlock.java b/src/main/java/org/bukkit/craftbukkit/block/CraftCommandBlock.java
index 245a9b062a0033a39fd42f3ff94350192570aec4..dfa08e9299f204528896113e4ccbe7dedd65b3bd 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/CraftCommandBlock.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/CraftCommandBlock.java
@@ -4,46 +4,49 @@ import net.minecraft.world.level.block.entity.CommandBlockEntity;
 import org.bukkit.World;
 import org.bukkit.block.CommandBlock;
 import org.bukkit.craftbukkit.util.CraftChatMessage;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 public class CraftCommandBlock extends CraftBlockEntityState<CommandBlockEntity> implements CommandBlock, io.papermc.paper.commands.PaperCommandBlockHolder {
 
-    public CraftCommandBlock(World world, CommandBlockEntity tileEntity) {
+    public CraftCommandBlock(World world, @NotNull CommandBlockEntity tileEntity) {
         super(world, tileEntity);
     }
 
     @Override
-    public String getCommand() {
+    public @NotNull String getCommand() {
         return getSnapshot().getCommandBlock().getCommand();
     }
 
     @Override
-    public void setCommand(String command) {
+    public void setCommand(@Nullable String command) {
         getSnapshot().getCommandBlock().setCommand(command != null ? command : "");
     }
 
     @Override
-    public String getName() {
+    public @NotNull String getName() {
         return CraftChatMessage.fromComponent(getSnapshot().getCommandBlock().getName());
     }
 
     @Override
-    public void setName(String name) {
+    public void setName(@Nullable String name) {
         getSnapshot().getCommandBlock().setName(CraftChatMessage.fromStringOrNull(name != null ? name : "@"));
     }
 
     // Paper start
     @Override
-    public net.kyori.adventure.text.Component name() {
+    public net.kyori.adventure.text.@NotNull Component name() {
         return io.papermc.paper.adventure.PaperAdventure.asAdventure(getSnapshot().getCommandBlock().getName());
     }
 
     @Override
-    public void name(net.kyori.adventure.text.Component name) {
+    public void name(net.kyori.adventure.text.@Nullable Component name) {
         getSnapshot().getCommandBlock().setName(name == null ? net.minecraft.network.chat.Component.literal("@") : io.papermc.paper.adventure.PaperAdventure.asVanilla(name));
     }
 
     @Override
-    public net.minecraft.world.level.BaseCommandBlock getCommandBlockHandle() {
+    public net.minecraft.world.level.@NotNull BaseCommandBlock getCommandBlockHandle() {
         return getSnapshot().getCommandBlock();
     }
     // Paper end
diff --git a/src/main/java/org/bukkit/craftbukkit/block/CraftComparator.java b/src/main/java/org/bukkit/craftbukkit/block/CraftComparator.java
index 1933d0ac1fbebe54e750c62d51d39f9e650aaaf0..34d803821e0d29f9b846d41576d71c8911ffde15 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/CraftComparator.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/CraftComparator.java
@@ -3,10 +3,12 @@ package org.bukkit.craftbukkit.block;
 import net.minecraft.world.level.block.entity.ComparatorBlockEntity;
 import org.bukkit.World;
 import org.bukkit.block.Comparator;
+import org.jetbrains.annotations.NotNull;
+
 
 public class CraftComparator extends CraftBlockEntityState<ComparatorBlockEntity> implements Comparator {
 
-    public CraftComparator(World world, ComparatorBlockEntity tileEntity) {
+    public CraftComparator(World world, @NotNull ComparatorBlockEntity tileEntity) {
         super(world, tileEntity);
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/block/CraftConduit.java b/src/main/java/org/bukkit/craftbukkit/block/CraftConduit.java
index a0b17670750f882846954e83a85a1dd59ac09d0f..7cb3c6f418f69427da13aa9d9e6c74c6bd92e1af 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/CraftConduit.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/CraftConduit.java
@@ -3,10 +3,12 @@ package org.bukkit.craftbukkit.block;
 import net.minecraft.world.level.block.entity.ConduitBlockEntity;
 import org.bukkit.World;
 import org.bukkit.block.Conduit;
+import org.jetbrains.annotations.NotNull;
+
 
 public class CraftConduit extends CraftBlockEntityState<ConduitBlockEntity> implements Conduit {
 
-    public CraftConduit(World world, ConduitBlockEntity tileEntity) {
+    public CraftConduit(World world, @NotNull ConduitBlockEntity tileEntity) {
         super(world, tileEntity);
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/block/CraftContainer.java b/src/main/java/org/bukkit/craftbukkit/block/CraftContainer.java
index 65104a0506131373b6b33433a118c7e1cd3696dc..a7bb50ca8f05506f55802df4a789195140e3a5ea 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/CraftContainer.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/CraftContainer.java
@@ -5,10 +5,13 @@ import net.minecraft.world.level.block.entity.BaseContainerBlockEntity;
 import org.bukkit.World;
 import org.bukkit.block.Container;
 import org.bukkit.craftbukkit.util.CraftChatMessage;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 public abstract class CraftContainer<T extends BaseContainerBlockEntity> extends CraftBlockEntityState<T> implements Container {
 
-    public CraftContainer(World world, T tileEntity) {
+    public CraftContainer(World world, @NotNull T tileEntity) {
         super(world, tileEntity);
     }
 
@@ -18,12 +21,12 @@ public abstract class CraftContainer<T extends BaseContainerBlockEntity> extends
     }
 
     @Override
-    public String getLock() {
+    public @NotNull String getLock() {
         return this.getSnapshot().lockKey.key;
     }
 
     @Override
-    public void setLock(String key) {
+    public void setLock(@Nullable String key) {
         this.getSnapshot().lockKey = (key == null) ? LockCode.NO_LOCK : new LockCode(key);
     }
 
@@ -35,7 +38,7 @@ public abstract class CraftContainer<T extends BaseContainerBlockEntity> extends
     }
 
     @Override
-    public void customName(final net.kyori.adventure.text.Component customName) {
+    public void customName(final net.kyori.adventure.text.@Nullable Component customName) {
         this.getSnapshot().setCustomName(customName != null ? io.papermc.paper.adventure.PaperAdventure.asVanilla(customName) : null);
     }
     // Paper end
@@ -52,7 +55,7 @@ public abstract class CraftContainer<T extends BaseContainerBlockEntity> extends
     }
 
     @Override
-    public void applyTo(T container) {
+    public void applyTo(@NotNull T container) {
         super.applyTo(container);
 
         if (this.getSnapshot().name == null) {
diff --git a/src/main/java/org/bukkit/craftbukkit/block/CraftCreatureSpawner.java b/src/main/java/org/bukkit/craftbukkit/block/CraftCreatureSpawner.java
index 95b01ddddb1ba90da495927099147e775fb4f7aa..6560c54906d4655ce44959a3d6dae2dbbc77612d 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/CraftCreatureSpawner.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/CraftCreatureSpawner.java
@@ -8,15 +8,18 @@ import net.minecraft.world.level.block.entity.SpawnerBlockEntity;
 import org.bukkit.World;
 import org.bukkit.block.CreatureSpawner;
 import org.bukkit.entity.EntityType;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 public class CraftCreatureSpawner extends CraftBlockEntityState<SpawnerBlockEntity> implements CreatureSpawner {
 
-    public CraftCreatureSpawner(World world, SpawnerBlockEntity tileEntity) {
+    public CraftCreatureSpawner(World world, @NotNull SpawnerBlockEntity tileEntity) {
         super(world, tileEntity);
     }
 
     @Override
-    public EntityType getSpawnedType() {
+    public @NotNull EntityType getSpawnedType() {
         SpawnData spawnData = this.getSnapshot().getSpawner().nextSpawnData;
         if (spawnData == null) {
             return EntityType.PIG; // TODO: Change API contract to nullable?
@@ -27,7 +30,7 @@ public class CraftCreatureSpawner extends CraftBlockEntityState<SpawnerBlockEnti
     }
 
     @Override
-    public void setSpawnedType(EntityType entityType) {
+    public void setSpawnedType(@Nullable EntityType entityType) {
         if (entityType == null || entityType.getName() == null) {
             throw new IllegalArgumentException("Can't spawn EntityType " + entityType + " from mobspawners!");
         }
@@ -37,7 +40,7 @@ public class CraftCreatureSpawner extends CraftBlockEntityState<SpawnerBlockEnti
     }
 
     @Override
-    public String getCreatureTypeName() {
+    public @NotNull String getCreatureTypeName() {
         SpawnData spawnData = this.getSnapshot().getSpawner().nextSpawnData;
         if (spawnData == null) {
             return ""; // TODO: Change API contract to nullable?
@@ -144,7 +147,7 @@ public class CraftCreatureSpawner extends CraftBlockEntityState<SpawnerBlockEnti
     }
 
     @Override
-    public void setSpawnedItem(org.bukkit.inventory.ItemStack itemStack) {
+    public void setSpawnedItem(org.bukkit.inventory.@Nullable ItemStack itemStack) {
         Preconditions.checkArgument(itemStack != null && !itemStack.getType().isAir(), "spawners cannot spawn air");
         net.minecraft.world.item.ItemStack item = org.bukkit.craftbukkit.inventory.CraftItemStack.asNMSCopy(itemStack);
         net.minecraft.nbt.CompoundTag entity = new net.minecraft.nbt.CompoundTag();
diff --git a/src/main/java/org/bukkit/craftbukkit/block/CraftDaylightDetector.java b/src/main/java/org/bukkit/craftbukkit/block/CraftDaylightDetector.java
index f06cc660d5abc37853a28d4d3dc37cd16f923acf..42a928a756b50e953f2eebe90131ab48fcf7475a 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/CraftDaylightDetector.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/CraftDaylightDetector.java
@@ -3,10 +3,12 @@ package org.bukkit.craftbukkit.block;
 import net.minecraft.world.level.block.entity.DaylightDetectorBlockEntity;
 import org.bukkit.World;
 import org.bukkit.block.DaylightDetector;
+import org.jetbrains.annotations.NotNull;
+
 
 public class CraftDaylightDetector extends CraftBlockEntityState<DaylightDetectorBlockEntity> implements DaylightDetector {
 
-    public CraftDaylightDetector(World world, DaylightDetectorBlockEntity tileEntity) {
+    public CraftDaylightDetector(World world, @NotNull DaylightDetectorBlockEntity tileEntity) {
         super(world, tileEntity);
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/block/CraftDispenser.java b/src/main/java/org/bukkit/craftbukkit/block/CraftDispenser.java
index 9277fb68646bdbc3431463267768b9feb0164628..0cacb74c671a6ec93582025a5a3cd6306fea94b4 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/CraftDispenser.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/CraftDispenser.java
@@ -13,6 +13,8 @@ import org.bukkit.craftbukkit.inventory.CraftInventory;
 import org.bukkit.craftbukkit.projectiles.CraftBlockProjectileSource;
 import org.bukkit.inventory.Inventory;
 import org.bukkit.projectiles.BlockProjectileSource;
+import org.jetbrains.annotations.NotNull;
+
 
 public class CraftDispenser extends CraftLootable<DispenserBlockEntity> implements Dispenser {
 
@@ -21,12 +23,12 @@ public class CraftDispenser extends CraftLootable<DispenserBlockEntity> implemen
     }
 
     @Override
-    public Inventory getSnapshotInventory() {
+    public @NotNull Inventory getSnapshotInventory() {
         return new CraftInventory(this.getSnapshot());
     }
 
     @Override
-    public Inventory getInventory() {
+    public @NotNull Inventory getInventory() {
         if (!this.isPlaced()) {
             return this.getSnapshotInventory();
         }
diff --git a/src/main/java/org/bukkit/craftbukkit/block/CraftDropper.java b/src/main/java/org/bukkit/craftbukkit/block/CraftDropper.java
index 1c60122a42efb1061f55f53f58c0ce08020f3e87..954351705e6fbe5746bd51ac2565065861103c51 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/CraftDropper.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/CraftDropper.java
@@ -11,6 +11,8 @@ import org.bukkit.block.Dropper;
 import org.bukkit.craftbukkit.CraftWorld;
 import org.bukkit.craftbukkit.inventory.CraftInventory;
 import org.bukkit.inventory.Inventory;
+import org.jetbrains.annotations.NotNull;
+
 
 public class CraftDropper extends CraftLootable<DropperBlockEntity> implements Dropper {
 
@@ -19,12 +21,12 @@ public class CraftDropper extends CraftLootable<DropperBlockEntity> implements D
     }
 
     @Override
-    public Inventory getSnapshotInventory() {
+    public @NotNull Inventory getSnapshotInventory() {
         return new CraftInventory(this.getSnapshot());
     }
 
     @Override
-    public Inventory getInventory() {
+    public @NotNull Inventory getInventory() {
         if (!this.isPlaced()) {
             return this.getSnapshotInventory();
         }
diff --git a/src/main/java/org/bukkit/craftbukkit/block/CraftEnchantingTable.java b/src/main/java/org/bukkit/craftbukkit/block/CraftEnchantingTable.java
index 102eb86bad3000f258775ac06ecd1a6dad174b0a..ab5ebe905175072aac6547ea72e6d16fcf436601 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/CraftEnchantingTable.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/CraftEnchantingTable.java
@@ -4,10 +4,13 @@ import net.minecraft.world.level.block.entity.EnchantmentTableBlockEntity;
 import org.bukkit.World;
 import org.bukkit.block.EnchantingTable;
 import org.bukkit.craftbukkit.util.CraftChatMessage;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 public class CraftEnchantingTable extends CraftBlockEntityState<EnchantmentTableBlockEntity> implements EnchantingTable {
 
-    public CraftEnchantingTable(World world, EnchantmentTableBlockEntity tileEntity) {
+    public CraftEnchantingTable(World world, @NotNull EnchantmentTableBlockEntity tileEntity) {
         super(world, tileEntity);
     }
 
@@ -19,7 +22,7 @@ public class CraftEnchantingTable extends CraftBlockEntityState<EnchantmentTable
     }
 
     @Override
-    public void customName(final net.kyori.adventure.text.Component customName) {
+    public void customName(final net.kyori.adventure.text.@Nullable Component customName) {
         this.getSnapshot().setCustomName(customName != null ? io.papermc.paper.adventure.PaperAdventure.asVanilla(customName) : null);
     }
     // Paper end
@@ -36,7 +39,7 @@ public class CraftEnchantingTable extends CraftBlockEntityState<EnchantmentTable
     }
 
     @Override
-    public void applyTo(EnchantmentTableBlockEntity enchantingTable) {
+    public void applyTo(@NotNull EnchantmentTableBlockEntity enchantingTable) {
         super.applyTo(enchantingTable);
 
         if (!this.getSnapshot().hasCustomName()) {
diff --git a/src/main/java/org/bukkit/craftbukkit/block/CraftEndGateway.java b/src/main/java/org/bukkit/craftbukkit/block/CraftEndGateway.java
index 7ba116fc7780ab99f874d46469b0e646fd4e8a80..3706a25d882bae401690a55830964a96b755df5f 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/CraftEndGateway.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/CraftEndGateway.java
@@ -6,10 +6,13 @@ import net.minecraft.world.level.block.entity.TheEndGatewayBlockEntity;
 import org.bukkit.Location;
 import org.bukkit.World;
 import org.bukkit.block.EndGateway;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 public class CraftEndGateway extends CraftBlockEntityState<TheEndGatewayBlockEntity> implements EndGateway {
 
-    public CraftEndGateway(World world, TheEndGatewayBlockEntity tileEntity) {
+    public CraftEndGateway(World world, @NotNull TheEndGatewayBlockEntity tileEntity) {
         super(world, tileEntity);
     }
 
@@ -20,7 +23,7 @@ public class CraftEndGateway extends CraftBlockEntityState<TheEndGatewayBlockEnt
     }
 
     @Override
-    public void setExitLocation(Location location) {
+    public void setExitLocation(@Nullable Location location) {
         if (location == null) {
             this.getSnapshot().exitPortal = null;
         } else if (!Objects.equals(location.getWorld(), this.isPlaced() ? this.getWorld() : null)) {
@@ -51,7 +54,7 @@ public class CraftEndGateway extends CraftBlockEntityState<TheEndGatewayBlockEnt
     }
 
     @Override
-    public void applyTo(TheEndGatewayBlockEntity endGateway) {
+    public void applyTo(@NotNull TheEndGatewayBlockEntity endGateway) {
         super.applyTo(endGateway);
 
         if (this.getSnapshot().exitPortal == null) {
diff --git a/src/main/java/org/bukkit/craftbukkit/block/CraftEndPortal.java b/src/main/java/org/bukkit/craftbukkit/block/CraftEndPortal.java
index 36de8f89ef3d6ad92ab2675c293c7e4056c4e584..eae9ac799af2ec20b8d6cb7f700a390c0d96f4c4 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/CraftEndPortal.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/CraftEndPortal.java
@@ -2,10 +2,12 @@ package org.bukkit.craftbukkit.block;
 
 import net.minecraft.world.level.block.entity.TheEndPortalBlockEntity;
 import org.bukkit.World;
+import org.jetbrains.annotations.NotNull;
+
 
 public class CraftEndPortal extends CraftBlockEntityState<TheEndPortalBlockEntity> {
 
-    public CraftEndPortal(World world, TheEndPortalBlockEntity tileEntity) {
+    public CraftEndPortal(World world, @NotNull TheEndPortalBlockEntity tileEntity) {
         super(world, tileEntity);
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/block/CraftEnderChest.java b/src/main/java/org/bukkit/craftbukkit/block/CraftEnderChest.java
index b8ab67fd1820613520203f708f2f267587ace67b..3d436066dbf73cb0174d8b00d3720ac84741d55f 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/CraftEnderChest.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/CraftEnderChest.java
@@ -4,10 +4,12 @@ import net.minecraft.world.level.block.entity.EnderChestBlockEntity;
 import net.minecraft.world.level.block.state.BlockState;
 import org.bukkit.World;
 import org.bukkit.block.EnderChest;
+import org.jetbrains.annotations.NotNull;
+
 
 public class CraftEnderChest extends CraftBlockEntityState<EnderChestBlockEntity> implements EnderChest {
 
-    public CraftEnderChest(World world, EnderChestBlockEntity tileEntity) {
+    public CraftEnderChest(World world, @NotNull EnderChestBlockEntity tileEntity) {
         super(world, tileEntity);
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/block/CraftFurnace.java b/src/main/java/org/bukkit/craftbukkit/block/CraftFurnace.java
index f49bb90e6c30dd928b352c867819b687e4557893..b19561e0843b00dd5811f6e8bfc0d765a7935042 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/CraftFurnace.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/CraftFurnace.java
@@ -13,6 +13,8 @@ import org.bukkit.craftbukkit.util.CraftNamespacedKey;
 import org.bukkit.inventory.CookingRecipe;
 import org.bukkit.inventory.FurnaceInventory;
 import org.bukkit.inventory.Recipe;
+import org.jetbrains.annotations.NotNull;
+
 
 public abstract class CraftFurnace<T extends AbstractFurnaceBlockEntity> extends CraftContainer<T> implements Furnace {
 
@@ -21,12 +23,12 @@ public abstract class CraftFurnace<T extends AbstractFurnaceBlockEntity> extends
     }
 
     @Override
-    public FurnaceInventory getSnapshotInventory() {
+    public @NotNull FurnaceInventory getSnapshotInventory() {
         return new CraftInventoryFurnace(this.getSnapshot());
     }
 
     @Override
-    public FurnaceInventory getInventory() {
+    public @NotNull FurnaceInventory getInventory() {
         if (!this.isPlaced()) {
             return this.getSnapshotInventory();
         }
@@ -67,7 +69,7 @@ public abstract class CraftFurnace<T extends AbstractFurnaceBlockEntity> extends
     }
 
     @Override
-    public Map<CookingRecipe<?>, Integer> getRecipesUsed() {
+    public @NotNull Map<CookingRecipe<?>, Integer> getRecipesUsed() {
         ImmutableMap.Builder<CookingRecipe<?>, Integer> recipesUsed = ImmutableMap.builder();
         for (Map.Entry<ResourceLocation, Integer> entrySet : this.getSnapshot().getRecipesUsed().object2IntEntrySet()) {
             Recipe recipe = Bukkit.getRecipe(CraftNamespacedKey.fromMinecraft(entrySet.getKey()));
@@ -95,17 +97,17 @@ public abstract class CraftFurnace<T extends AbstractFurnaceBlockEntity> extends
     }
 
     @Override
-    public int getRecipeUsedCount(org.bukkit.NamespacedKey furnaceRecipe) {
+    public int getRecipeUsedCount(org.bukkit.@NotNull NamespacedKey furnaceRecipe) {
         return this.getSnapshot().getRecipesUsed().getInt(org.bukkit.craftbukkit.util.CraftNamespacedKey.toMinecraft(furnaceRecipe));
     }
 
     @Override
-    public boolean hasRecipeUsedCount(org.bukkit.NamespacedKey furnaceRecipe) {
+    public boolean hasRecipeUsedCount(org.bukkit.@NotNull NamespacedKey furnaceRecipe) {
         return this.getSnapshot().getRecipesUsed().containsKey(org.bukkit.craftbukkit.util.CraftNamespacedKey.toMinecraft(furnaceRecipe));
     }
 
     @Override
-    public void setRecipeUsedCount(org.bukkit.inventory.CookingRecipe<?> furnaceRecipe, int count) {
+    public void setRecipeUsedCount(org.bukkit.inventory.@NotNull CookingRecipe<?> furnaceRecipe, int count) {
         final net.minecraft.resources.ResourceLocation location = org.bukkit.craftbukkit.util.CraftNamespacedKey.toMinecraft(furnaceRecipe.getKey());
         java.util.Optional<? extends net.minecraft.world.item.crafting.Recipe<?>> nmsRecipe = (this.isPlaced() ? this.world.getHandle().getRecipeManager() : net.minecraft.server.MinecraftServer.getServer().getRecipeManager()).byKey(location);
         com.google.common.base.Preconditions.checkArgument(nmsRecipe.isPresent() && nmsRecipe.get() instanceof net.minecraft.world.item.crafting.AbstractCookingRecipe, furnaceRecipe.getKey() + " is not recognized as a valid and registered furnace recipe");
@@ -117,7 +119,7 @@ public abstract class CraftFurnace<T extends AbstractFurnaceBlockEntity> extends
     }
 
     @Override
-    public void setRecipesUsed(java.util.Map<org.bukkit.inventory.CookingRecipe<?>, Integer> recipesUsed) {
+    public void setRecipesUsed(java.util.@NotNull Map<org.bukkit.inventory.CookingRecipe<?>, Integer> recipesUsed) {
         this.getSnapshot().getRecipesUsed().clear();
         recipesUsed.forEach((recipe, integer) -> {
             if (integer != null) {
diff --git a/src/main/java/org/bukkit/craftbukkit/block/CraftHopper.java b/src/main/java/org/bukkit/craftbukkit/block/CraftHopper.java
index 15e72d2e15106cd009eb19a839af0b67a48fadfd..3c9c62eb16ec107ce1c156295b84515ae43d1d9a 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/CraftHopper.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/CraftHopper.java
@@ -5,6 +5,8 @@ import org.bukkit.World;
 import org.bukkit.block.Hopper;
 import org.bukkit.craftbukkit.inventory.CraftInventory;
 import org.bukkit.inventory.Inventory;
+import org.jetbrains.annotations.NotNull;
+
 
 public class CraftHopper extends CraftLootable<HopperBlockEntity> implements Hopper {
 
@@ -13,12 +15,12 @@ public class CraftHopper extends CraftLootable<HopperBlockEntity> implements Hop
     }
 
     @Override
-    public Inventory getSnapshotInventory() {
+    public @NotNull Inventory getSnapshotInventory() {
         return new CraftInventory(this.getSnapshot());
     }
 
     @Override
-    public Inventory getInventory() {
+    public @NotNull Inventory getInventory() {
         if (!this.isPlaced()) {
             return this.getSnapshotInventory();
         }
diff --git a/src/main/java/org/bukkit/craftbukkit/block/CraftJigsaw.java b/src/main/java/org/bukkit/craftbukkit/block/CraftJigsaw.java
index d0e761fdf52c06d41a1b53c79392023c1284b89d..197aab1f0c3aa3b1c78700f21696e6e88c278214 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/CraftJigsaw.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/CraftJigsaw.java
@@ -3,10 +3,12 @@ package org.bukkit.craftbukkit.block;
 import net.minecraft.world.level.block.entity.JigsawBlockEntity;
 import org.bukkit.World;
 import org.bukkit.block.Jigsaw;
+import org.jetbrains.annotations.NotNull;
+
 
 public class CraftJigsaw extends CraftBlockEntityState<JigsawBlockEntity> implements Jigsaw {
 
-    public CraftJigsaw(World world, JigsawBlockEntity tileEntity) {
+    public CraftJigsaw(World world, @NotNull JigsawBlockEntity tileEntity) {
         super(world, tileEntity);
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/block/CraftJukebox.java b/src/main/java/org/bukkit/craftbukkit/block/CraftJukebox.java
index f9c96c7008f8bd6d5a5fa69fdf002887c4c4c364..8a9c6cb36adc1da699f55fcaa5fc6faaee153c64 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/CraftJukebox.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/CraftJukebox.java
@@ -13,10 +13,13 @@ import org.bukkit.block.Jukebox;
 import org.bukkit.craftbukkit.CraftWorld;
 import org.bukkit.craftbukkit.inventory.CraftItemStack;
 import org.bukkit.craftbukkit.util.CraftMagicNumbers;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 public class CraftJukebox extends CraftBlockEntityState<JukeboxBlockEntity> implements Jukebox {
 
-    public CraftJukebox(World world, JukeboxBlockEntity tileEntity) {
+    public CraftJukebox(World world, @NotNull JukeboxBlockEntity tileEntity) {
         super(world, tileEntity);
     }
 
@@ -39,12 +42,12 @@ public class CraftJukebox extends CraftBlockEntityState<JukeboxBlockEntity> impl
     }
 
     @Override
-    public Material getPlaying() {
+    public @NotNull Material getPlaying() {
         return this.getRecord().getType();
     }
 
     @Override
-    public void setPlaying(Material record) {
+    public void setPlaying(@Nullable Material record) {
         if (record == null || CraftMagicNumbers.getItem(record) == null) {
             record = Material.AIR;
         }
@@ -53,7 +56,7 @@ public class CraftJukebox extends CraftBlockEntityState<JukeboxBlockEntity> impl
     }
 
     @Override
-    public org.bukkit.inventory.ItemStack getRecord() {
+    public org.bukkit.inventory.@NotNull ItemStack getRecord() {
         ItemStack record = this.getSnapshot().getRecord();
         return CraftItemStack.asBukkitCopy(record);
     }
diff --git a/src/main/java/org/bukkit/craftbukkit/block/CraftLectern.java b/src/main/java/org/bukkit/craftbukkit/block/CraftLectern.java
index 0a827e750b87bdc1f6213d84cb22a1de21d6b6a6..2978f815e4cd001d35f90af28be39f0192303eb2 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/CraftLectern.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/CraftLectern.java
@@ -7,10 +7,12 @@ import org.bukkit.World;
 import org.bukkit.block.Lectern;
 import org.bukkit.craftbukkit.inventory.CraftInventoryLectern;
 import org.bukkit.inventory.Inventory;
+import org.jetbrains.annotations.NotNull;
+
 
 public class CraftLectern extends CraftBlockEntityState<LecternBlockEntity> implements Lectern {
 
-    public CraftLectern(World world, LecternBlockEntity tileEntity) {
+    public CraftLectern(World world, @NotNull LecternBlockEntity tileEntity) {
         super(world, tileEntity);
     }
 
@@ -25,12 +27,12 @@ public class CraftLectern extends CraftBlockEntityState<LecternBlockEntity> impl
     }
 
     @Override
-    public Inventory getSnapshotInventory() {
+    public @NotNull Inventory getSnapshotInventory() {
         return new CraftInventoryLectern(this.getSnapshot().bookAccess);
     }
 
     @Override
-    public Inventory getInventory() {
+    public @NotNull Inventory getInventory() {
         if (!this.isPlaced()) {
             return this.getSnapshotInventory();
         }
diff --git a/src/main/java/org/bukkit/craftbukkit/block/CraftLootable.java b/src/main/java/org/bukkit/craftbukkit/block/CraftLootable.java
index e49eece9bff3a53469673d03a7bbf8f9cf8776b8..af3edb1742aebb5bc1ce57f8bb4fe15b66f115a2 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/CraftLootable.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/CraftLootable.java
@@ -8,6 +8,9 @@ import org.bukkit.World;
 import org.bukkit.craftbukkit.util.CraftNamespacedKey;
 import org.bukkit.loot.LootTable;
 import org.bukkit.loot.Lootable;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 public abstract class CraftLootable<T extends RandomizableContainerBlockEntity> extends CraftContainer<T> implements Nameable, Lootable, com.destroystokyo.paper.loottable.PaperLootableBlockInventory { // Paper
 
@@ -16,7 +19,7 @@ public abstract class CraftLootable<T extends RandomizableContainerBlockEntity>
     }
 
     @Override
-    public void applyTo(T lootable) {
+    public void applyTo(@NotNull T lootable) {
         super.applyTo(lootable);
 
         if (this.getSnapshot().lootTable == null) {
@@ -49,7 +52,7 @@ public abstract class CraftLootable<T extends RandomizableContainerBlockEntity>
         this.setLootTable(this.getLootTable(), seed);
     }
 
-    public void setLootTable(LootTable table, long seed) {
+    public void setLootTable(@Nullable LootTable table, long seed) {
         ResourceLocation key = (table == null) ? null : CraftNamespacedKey.toMinecraft(table.getKey());
         getSnapshot().setLootTable(key, seed);
     }
diff --git a/src/main/java/org/bukkit/craftbukkit/block/CraftMovingPiston.java b/src/main/java/org/bukkit/craftbukkit/block/CraftMovingPiston.java
index b779b4abbf3c257c2aa90697b2ed43172290bf73..24b6f7f75f20367bd0443161e392358b04ab67de 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/CraftMovingPiston.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/CraftMovingPiston.java
@@ -2,10 +2,12 @@ package org.bukkit.craftbukkit.block;
 
 import net.minecraft.world.level.block.piston.PistonMovingBlockEntity;
 import org.bukkit.World;
+import org.jetbrains.annotations.NotNull;
+
 
 public class CraftMovingPiston extends CraftBlockEntityState<PistonMovingBlockEntity> implements io.papermc.paper.block.MovingPiston { // Paper - Add Moving Piston API
 
-    public CraftMovingPiston(World world, PistonMovingBlockEntity tileEntity) {
+    public CraftMovingPiston(World world, @NotNull PistonMovingBlockEntity tileEntity) {
         super(world, tileEntity);
     }
     // Paper start - Add Moving Piston API
diff --git a/src/main/java/org/bukkit/craftbukkit/block/CraftSculkCatalyst.java b/src/main/java/org/bukkit/craftbukkit/block/CraftSculkCatalyst.java
index dc7d6c443af206f50d2b4ca260d64bb86b67553c..fdeb2361d9b5ee9eada99dbb050e3936e0ba90be 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/CraftSculkCatalyst.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/CraftSculkCatalyst.java
@@ -3,10 +3,12 @@ package org.bukkit.craftbukkit.block;
 import net.minecraft.world.level.block.entity.SculkCatalystBlockEntity;
 import org.bukkit.World;
 import org.bukkit.block.SculkCatalyst;
+import org.jetbrains.annotations.NotNull;
+
 
 public class CraftSculkCatalyst extends CraftBlockEntityState<SculkCatalystBlockEntity> implements SculkCatalyst {
 
-    public CraftSculkCatalyst(World world, SculkCatalystBlockEntity tileEntity) {
+    public CraftSculkCatalyst(World world, @NotNull SculkCatalystBlockEntity tileEntity) {
         super(world, tileEntity);
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/block/CraftSculkSensor.java b/src/main/java/org/bukkit/craftbukkit/block/CraftSculkSensor.java
index 34362768f38fb3122abcbd5e63fee38a631b9ee3..7ee0ffd460a2583c2a683e7ebef472ad7aa5324f 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/CraftSculkSensor.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/CraftSculkSensor.java
@@ -4,10 +4,12 @@ import com.google.common.base.Preconditions;
 import net.minecraft.world.level.block.entity.SculkSensorBlockEntity;
 import org.bukkit.World;
 import org.bukkit.block.SculkSensor;
+import org.jetbrains.annotations.NotNull;
+
 
 public class CraftSculkSensor extends CraftBlockEntityState<SculkSensorBlockEntity> implements SculkSensor {
 
-    public CraftSculkSensor(World world, SculkSensorBlockEntity tileEntity) {
+    public CraftSculkSensor(World world, @NotNull SculkSensorBlockEntity tileEntity) {
         super(world, tileEntity);
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/block/CraftSculkShrieker.java b/src/main/java/org/bukkit/craftbukkit/block/CraftSculkShrieker.java
index 2e7e117f6edfda29f6b1d193c23256b3b93e0083..997803c1790ef204c680467425c61254880612e9 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/CraftSculkShrieker.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/CraftSculkShrieker.java
@@ -3,10 +3,12 @@ package org.bukkit.craftbukkit.block;
 import net.minecraft.world.level.block.entity.SculkShriekerBlockEntity;
 import org.bukkit.World;
 import org.bukkit.block.SculkShrieker;
+import org.jetbrains.annotations.NotNull;
+
 
 public class CraftSculkShrieker extends CraftBlockEntityState<SculkShriekerBlockEntity> implements SculkShrieker {
 
-    public CraftSculkShrieker(World world, SculkShriekerBlockEntity tileEntity) {
+    public CraftSculkShrieker(World world, @NotNull SculkShriekerBlockEntity tileEntity) {
         super(world, tileEntity);
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/block/CraftShulkerBox.java b/src/main/java/org/bukkit/craftbukkit/block/CraftShulkerBox.java
index 72074b4c0feea8136e80589345538552ce28a2ea..75e63b5a230e147ab2a96595af934bac56649469 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/CraftShulkerBox.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/CraftShulkerBox.java
@@ -10,6 +10,8 @@ import org.bukkit.block.ShulkerBox;
 import org.bukkit.craftbukkit.inventory.CraftInventory;
 import org.bukkit.craftbukkit.util.CraftMagicNumbers;
 import org.bukkit.inventory.Inventory;
+import org.jetbrains.annotations.NotNull;
+
 
 public class CraftShulkerBox extends CraftLootable<ShulkerBoxBlockEntity> implements ShulkerBox {
 
@@ -18,12 +20,12 @@ public class CraftShulkerBox extends CraftLootable<ShulkerBoxBlockEntity> implem
     }
 
     @Override
-    public Inventory getSnapshotInventory() {
+    public @NotNull Inventory getSnapshotInventory() {
         return new CraftInventory(this.getSnapshot());
     }
 
     @Override
-    public Inventory getInventory() {
+    public @NotNull Inventory getInventory() {
         if (!this.isPlaced()) {
             return this.getSnapshotInventory();
         }
diff --git a/src/main/java/org/bukkit/craftbukkit/block/CraftSign.java b/src/main/java/org/bukkit/craftbukkit/block/CraftSign.java
index 548f0676fc42523d6b64f3186508ef004c3a7f9e..d2810357d77a129c9c8919bfc78276aac9459e99 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/CraftSign.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/CraftSign.java
@@ -6,31 +6,32 @@ import net.minecraft.world.level.block.entity.SignBlockEntity;
 import org.bukkit.DyeColor;
 import org.bukkit.World;
 import org.bukkit.block.Sign;
-import org.bukkit.craftbukkit.entity.CraftPlayer;
 import org.bukkit.craftbukkit.util.CraftChatMessage;
-import org.bukkit.entity.Player;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 public class CraftSign<T extends SignBlockEntity> extends CraftBlockEntityState<T> implements Sign {
 
     // Lazily initialized only if requested:
     // Paper start
-    private java.util.ArrayList<net.kyori.adventure.text.Component> originalLines = null; // ArrayList for RandomAccess
-    private java.util.ArrayList<net.kyori.adventure.text.Component> lines = null; // ArrayList for RandomAccess
+    private java.util.@Nullable ArrayList<net.kyori.adventure.text.Component> originalLines = null; // ArrayList for RandomAccess
+    private java.util.@Nullable ArrayList<net.kyori.adventure.text.Component> lines = null; // ArrayList for RandomAccess
     // Paper end
 
-    public CraftSign(World world, T tileEntity) {
+    public CraftSign(@NotNull World world, @NotNull T tileEntity) {
         super(world, tileEntity);
     }
 
     // Paper start
     @Override
-    public java.util.List<net.kyori.adventure.text.Component> lines() {
+    public java.util.@NotNull List<net.kyori.adventure.text.Component> lines() {
         this.loadLines();
         return this.lines;
     }
 
     @Override
-    public net.kyori.adventure.text.Component line(int index) {
+    public net.kyori.adventure.text.@NotNull Component line(int index) {
         this.loadLines();
         return this.lines.get(index);
     }
@@ -52,19 +53,19 @@ public class CraftSign<T extends SignBlockEntity> extends CraftBlockEntityState<
     }
     // Paper end
     @Override
-    public String[] getLines() {
+    public String @NotNull [] getLines() {
         this.loadLines();
         return this.lines.stream().map(net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection()::serialize).toArray(String[]::new); // Paper
     }
 
     @Override
-    public String getLine(int index) throws IndexOutOfBoundsException {
+    public @NotNull String getLine(int index) throws IndexOutOfBoundsException {
         this.loadLines();
         return net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().serialize(this.lines.get(index)); // Paper
     }
 
     @Override
-    public void setLine(int index, String line) throws IndexOutOfBoundsException {
+    public void setLine(int index, @Nullable String line) throws IndexOutOfBoundsException {
         this.loadLines();
         this.lines.set(index, line != null ? net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().deserialize(line) : net.kyori.adventure.text.Component.empty()); // Paper
     }
@@ -95,12 +96,12 @@ public class CraftSign<T extends SignBlockEntity> extends CraftBlockEntityState<
     }
 
     @Override
-    public void setColor(DyeColor color) {
+    public void setColor(@NotNull DyeColor color) {
         getSnapshot().setColor(net.minecraft.world.item.DyeColor.byId(color.getWoolData()));
     }
 
     @Override
-    public void applyTo(T sign) {
+    public void applyTo(@NotNull T sign) {
         super.applyTo(sign);
 
         if (this.lines != null) {
@@ -118,7 +119,7 @@ public class CraftSign<T extends SignBlockEntity> extends CraftBlockEntityState<
         sign.isEditable = getSnapshot().isEditable; // Paper - copy manually
     }
 
-    public static void openSign(Sign sign, org.bukkit.entity.HumanEntity player) { // Paper - change move open sign to HumanEntity
+    public static void openSign(@NotNull Sign sign, org.bukkit.entity.@NotNull HumanEntity player) { // Paper - change move open sign to HumanEntity
         Preconditions.checkArgument(sign != null, "sign == null");
         // Preconditions.checkArgument(sign.isPlaced(), "Sign must be placed"); // Paper - don't require placed
         Preconditions.checkArgument(sign.getWorld() == player.getWorld(), "Sign must be in same world as Player");
@@ -130,7 +131,7 @@ public class CraftSign<T extends SignBlockEntity> extends CraftBlockEntityState<
     }
 
     // Paper start
-    public static Component[] sanitizeLines(java.util.List<net.kyori.adventure.text.Component> lines) {
+    public static Component @NotNull [] sanitizeLines(java.util.@NotNull List<net.kyori.adventure.text.Component> lines) {
         Component[] components = new Component[4];
         for (int i = 0; i < 4; i++) {
             if (i < lines.size() && lines.get(i) != null) {
@@ -143,7 +144,7 @@ public class CraftSign<T extends SignBlockEntity> extends CraftBlockEntityState<
     }
     // Paper end
 
-    public static Component[] sanitizeLines(String[] lines) {
+    public static Component @NotNull [] sanitizeLines(String @NotNull [] lines) {
         Component[] components = new Component[4];
 
         for (int i = 0; i < 4; i++) {
@@ -157,7 +158,7 @@ public class CraftSign<T extends SignBlockEntity> extends CraftBlockEntityState<
         return components;
     }
 
-    public static String[] revertComponents(Component[] components) {
+    public static String @NotNull [] revertComponents(Component @NotNull [] components) {
         String[] lines = new String[components.length];
         for (int i = 0; i < lines.length; i++) {
             lines[i] = CraftSign.revertComponent(components[i]);
@@ -165,7 +166,7 @@ public class CraftSign<T extends SignBlockEntity> extends CraftBlockEntityState<
         return lines;
     }
 
-    private static String revertComponent(Component component) {
+    private static @NotNull String revertComponent(Component component) {
         return CraftChatMessage.fromComponent(component);
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/block/CraftSkull.java b/src/main/java/org/bukkit/craftbukkit/block/CraftSkull.java
index 1325e9140a4b568170f0bd400904fe3c9d00cd4f..de818e0e6de9d9612f66ebe1789eb3ef505e106f 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/CraftSkull.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/CraftSkull.java
@@ -19,25 +19,27 @@ import org.bukkit.craftbukkit.entity.CraftPlayer;
 import org.bukkit.craftbukkit.profile.CraftPlayerProfile;
 import org.bukkit.craftbukkit.util.CraftNamespacedKey;
 import org.bukkit.profile.PlayerProfile;
+import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
+
 public class CraftSkull extends CraftBlockEntityState<SkullBlockEntity> implements Skull {
 
     private static final int MAX_OWNER_LENGTH = 16;
-    private GameProfile profile;
+    private @Nullable GameProfile profile;
 
-    public CraftSkull(World world, SkullBlockEntity tileEntity) {
+    public CraftSkull(World world, @NotNull SkullBlockEntity tileEntity) {
         super(world, tileEntity);
     }
 
     @Override
-    public void load(SkullBlockEntity skull) {
+    public void load(@NotNull SkullBlockEntity skull) {
         super.load(skull);
 
         this.profile = skull.owner;
     }
 
-    static int getSkullType(SkullType type) {
+    static int getSkullType(@NotNull SkullType type) {
         switch (type) {
             default:
             case SKELETON:
@@ -66,7 +68,7 @@ public class CraftSkull extends CraftBlockEntityState<SkullBlockEntity> implemen
     }
 
     @Override
-    public boolean setOwner(String name) {
+    public boolean setOwner(@Nullable String name) {
         if (name == null || name.length() > CraftSkull.MAX_OWNER_LENGTH) {
             return false;
         }
@@ -132,7 +134,7 @@ public class CraftSkull extends CraftBlockEntityState<SkullBlockEntity> implemen
 
     @Override
     @Deprecated // Paper
-    public void setOwnerProfile(PlayerProfile profile) {
+    public void setOwnerProfile(@Nullable PlayerProfile profile) {
         if (profile == null) {
             this.profile = null;
         } else {
@@ -156,13 +158,13 @@ public class CraftSkull extends CraftBlockEntityState<SkullBlockEntity> implemen
     }
 
     @Override
-    public BlockFace getRotation() {
+    public @NotNull BlockFace getRotation() {
         BlockData blockData = getBlockData();
         return (blockData instanceof Rotatable) ? ((Rotatable) blockData).getRotation() : ((Directional) blockData).getFacing();
     }
 
     @Override
-    public void setRotation(BlockFace rotation) {
+    public void setRotation(@NotNull BlockFace rotation) {
         BlockData blockData = getBlockData();
         if (blockData instanceof Rotatable) {
             ((Rotatable) blockData).setRotation(rotation);
@@ -173,7 +175,7 @@ public class CraftSkull extends CraftBlockEntityState<SkullBlockEntity> implemen
     }
 
     @Override
-    public SkullType getSkullType() {
+    public @NotNull SkullType getSkullType() {
         switch (getType()) {
             case SKELETON_SKULL:
             case SKELETON_WALL_SKULL:
@@ -207,7 +209,7 @@ public class CraftSkull extends CraftBlockEntityState<SkullBlockEntity> implemen
     }
 
     @Override
-    public void applyTo(SkullBlockEntity skull) {
+    public void applyTo(@NotNull SkullBlockEntity skull) {
         super.applyTo(skull);
 
         if (this.getSkullType() == SkullType.PLAYER) {
diff --git a/src/main/java/org/bukkit/craftbukkit/block/CraftStructureBlock.java b/src/main/java/org/bukkit/craftbukkit/block/CraftStructureBlock.java
index 419b997478b2346c6c94b5c61aedc03826c2c69d..4c48c7e1d2f5d8519ea8e47c81f6343e4b0ed50e 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/CraftStructureBlock.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/CraftStructureBlock.java
@@ -14,50 +14,53 @@ import org.bukkit.block.structure.UsageMode;
 import org.bukkit.craftbukkit.entity.CraftLivingEntity;
 import org.bukkit.entity.LivingEntity;
 import org.bukkit.util.BlockVector;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 public class CraftStructureBlock extends CraftBlockEntityState<StructureBlockEntity> implements Structure {
 
     private static final int MAX_SIZE = 48;
 
-    public CraftStructureBlock(World world, StructureBlockEntity tileEntity) {
+    public CraftStructureBlock(World world, @NotNull StructureBlockEntity tileEntity) {
         super(world, tileEntity);
     }
 
     @Override
-    public String getStructureName() {
+    public @NotNull String getStructureName() {
         return getSnapshot().getStructureName();
     }
 
     @Override
-    public void setStructureName(String name) {
+    public void setStructureName(@Nullable String name) {
         Preconditions.checkArgument(name != null, "Structure Name cannot be null");
         getSnapshot().setStructureName(name);
     }
 
     @Override
-    public String getAuthor() {
+    public @NotNull String getAuthor() {
         return getSnapshot().author;
     }
 
     @Override
-    public void setAuthor(String author) {
+    public void setAuthor(@Nullable String author) {
         Preconditions.checkArgument(author != null && !author.isEmpty(), "Author name cannot be null nor empty");
         getSnapshot().author = author;
     }
 
     @Override
-    public void setAuthor(LivingEntity entity) {
+    public void setAuthor(@Nullable LivingEntity entity) {
         Preconditions.checkArgument(entity != null, "Structure Block author entity cannot be null");
         getSnapshot().createdBy(((CraftLivingEntity) entity).getHandle());
     }
 
     @Override
-    public BlockVector getRelativePosition() {
+    public @NotNull BlockVector getRelativePosition() {
         return new BlockVector(getSnapshot().structurePos.getX(), getSnapshot().structurePos.getY(), getSnapshot().structurePos.getZ());
     }
 
     @Override
-    public void setRelativePosition(BlockVector vector) {
+    public void setRelativePosition(@NotNull BlockVector vector) {
         Validate.isTrue(CraftStructureBlock.isBetween(vector.getBlockX(), -CraftStructureBlock.MAX_SIZE, CraftStructureBlock.MAX_SIZE), "Structure Size (X) must be between -" + CraftStructureBlock.MAX_SIZE + " and " + CraftStructureBlock.MAX_SIZE);
         Validate.isTrue(CraftStructureBlock.isBetween(vector.getBlockY(), -CraftStructureBlock.MAX_SIZE, CraftStructureBlock.MAX_SIZE), "Structure Size (Y) must be between -" + CraftStructureBlock.MAX_SIZE + " and " + CraftStructureBlock.MAX_SIZE);
         Validate.isTrue(CraftStructureBlock.isBetween(vector.getBlockZ(), -CraftStructureBlock.MAX_SIZE, CraftStructureBlock.MAX_SIZE), "Structure Size (Z) must be between -" + CraftStructureBlock.MAX_SIZE + " and " + CraftStructureBlock.MAX_SIZE);
@@ -65,12 +68,12 @@ public class CraftStructureBlock extends CraftBlockEntityState<StructureBlockEnt
     }
 
     @Override
-    public BlockVector getStructureSize() {
+    public @NotNull BlockVector getStructureSize() {
         return new BlockVector(getSnapshot().structureSize.getX(), getSnapshot().structureSize.getY(), getSnapshot().structureSize.getZ());
     }
 
     @Override
-    public void setStructureSize(BlockVector vector) {
+    public void setStructureSize(@NotNull BlockVector vector) {
         Validate.isTrue(CraftStructureBlock.isBetween(vector.getBlockX(), 0, CraftStructureBlock.MAX_SIZE), "Structure Size (X) must be between 0 and " + CraftStructureBlock.MAX_SIZE);
         Validate.isTrue(CraftStructureBlock.isBetween(vector.getBlockY(), 0, CraftStructureBlock.MAX_SIZE), "Structure Size (Y) must be between 0 and " + CraftStructureBlock.MAX_SIZE);
         Validate.isTrue(CraftStructureBlock.isBetween(vector.getBlockZ(), 0, CraftStructureBlock.MAX_SIZE), "Structure Size (Z) must be between 0 and " + CraftStructureBlock.MAX_SIZE);
@@ -78,32 +81,32 @@ public class CraftStructureBlock extends CraftBlockEntityState<StructureBlockEnt
     }
 
     @Override
-    public void setMirror(Mirror mirror) {
+    public void setMirror(@NotNull Mirror mirror) {
         getSnapshot().mirror = net.minecraft.world.level.block.Mirror.valueOf(mirror.name());
     }
 
     @Override
-    public Mirror getMirror() {
+    public @NotNull Mirror getMirror() {
         return Mirror.valueOf(getSnapshot().mirror.name());
     }
 
     @Override
-    public void setRotation(StructureRotation rotation) {
+    public void setRotation(@NotNull StructureRotation rotation) {
         getSnapshot().rotation = Rotation.valueOf(rotation.name());
     }
 
     @Override
-    public StructureRotation getRotation() {
+    public @NotNull StructureRotation getRotation() {
         return StructureRotation.valueOf(getSnapshot().rotation.name());
     }
 
     @Override
-    public void setUsageMode(UsageMode mode) {
+    public void setUsageMode(@NotNull UsageMode mode) {
         getSnapshot().mode = StructureMode.valueOf(mode.name());
     }
 
     @Override
-    public UsageMode getUsageMode() {
+    public @NotNull UsageMode getUsageMode() {
         return UsageMode.valueOf(getSnapshot().getMode().name());
     }
 
@@ -159,7 +162,7 @@ public class CraftStructureBlock extends CraftBlockEntityState<StructureBlockEnt
     }
 
     @Override
-    public void setMetadata(String metadata) {
+    public void setMetadata(@NotNull String metadata) {
         Validate.notNull(metadata, "Structure metadata cannot be null");
         if (this.getUsageMode() == UsageMode.DATA) {
             getSnapshot().metaData = metadata;
@@ -167,12 +170,12 @@ public class CraftStructureBlock extends CraftBlockEntityState<StructureBlockEnt
     }
 
     @Override
-    public String getMetadata() {
+    public @NotNull String getMetadata() {
         return getSnapshot().metaData;
     }
 
     @Override
-    protected void applyTo(StructureBlockEntity tileEntity) {
+    protected void applyTo(@NotNull StructureBlockEntity tileEntity) {
         super.applyTo(tileEntity);
         net.minecraft.world.level.LevelAccessor access = getWorldHandle();
 
diff --git a/src/main/java/org/bukkit/craftbukkit/block/data/CraftBisected.java b/src/main/java/org/bukkit/craftbukkit/block/data/CraftBisected.java
index b2a619fc140cd553b4ec25ce72b4b18a6e647754..ee738731f998f0708662c4121f40a54ac3c897e6 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/data/CraftBisected.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/data/CraftBisected.java
@@ -1,13 +1,15 @@
 package org.bukkit.craftbukkit.block.data;
 
 import org.bukkit.block.data.Bisected;
+import org.jetbrains.annotations.NotNull;
+
 
 public class CraftBisected extends CraftBlockData implements Bisected {
 
     private static final net.minecraft.world.level.block.state.properties.EnumProperty<?> HALF = getEnum("half");
 
     @Override
-    public org.bukkit.block.data.Bisected.Half getHalf() {
+    public org.bukkit.block.data.Bisected.@NotNull Half getHalf() {
         return get(CraftBisected.HALF, org.bukkit.block.data.Bisected.Half.class);
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/block/data/CraftBlockData.java b/src/main/java/org/bukkit/craftbukkit/block/data/CraftBlockData.java
index 1fefe185800dd48dd328697127405e0844543e5e..126b86840e9bc9f79357db50deeec50a116c7f82 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/data/CraftBlockData.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/data/CraftBlockData.java
@@ -34,11 +34,14 @@ import org.bukkit.craftbukkit.CraftWorld;
 import org.bukkit.craftbukkit.block.CraftBlock;
 import org.bukkit.craftbukkit.block.CraftBlockSupport;
 import org.bukkit.craftbukkit.util.CraftMagicNumbers;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 public class CraftBlockData implements BlockData {
 
     private BlockState state;
-    private Map<Property<?>, Comparable<?>> parsedStates;
+    private @Nullable Map<Property<?>, Comparable<?>> parsedStates;
 
     protected CraftBlockData() {
         throw new AssertionError("Template Constructor");
@@ -49,7 +52,7 @@ public class CraftBlockData implements BlockData {
     }
 
     @Override
-    public Material getMaterial() {
+    public @NotNull Material getMaterial() {
         return this.state.getBukkitMaterial(); // Paper - optimise getType calls
     }
 
@@ -65,7 +68,7 @@ public class CraftBlockData implements BlockData {
      * @param <B> the type
      * @return the matching Bukkit type
      */
-    protected <B extends Enum<B>> B get(EnumProperty<?> nms, Class<B> bukkit) {
+    protected <B extends Enum<B>> B get(@NotNull EnumProperty<?> nms, Class<B> bukkit) {
         return CraftBlockData.toBukkit(this.state.getValue(nms), bukkit);
     }
 
@@ -79,7 +82,7 @@ public class CraftBlockData implements BlockData {
      * @return an immutable Set of values in their appropriate Bukkit type
      */
     @SuppressWarnings("unchecked")
-    protected <B extends Enum<B>> Set<B> getValues(EnumProperty<?> nms, Class<B> bukkit) {
+    protected <B extends Enum<B>> @NotNull Set<B> getValues(@NotNull EnumProperty<?> nms, Class<B> bukkit) {
         ImmutableSet.Builder<B> values = ImmutableSet.builder();
 
         for (Enum<?> e : nms.getPossibleValues()) {
@@ -97,13 +100,13 @@ public class CraftBlockData implements BlockData {
      * @param <B> the Bukkit type
      * @param <N> the NMS type
      */
-    protected <B extends Enum<B>, N extends Enum<N> & StringRepresentable> void set(EnumProperty<N> nms, Enum<B> bukkit) {
+    protected <B extends Enum<B>, N extends Enum<N> & StringRepresentable> void set(@NotNull EnumProperty<N> nms, Enum<B> bukkit) {
         this.parsedStates = null;
         this.state = this.state.setValue(nms, CraftBlockData.toNMS(bukkit, nms.getValueClass()));
     }
 
     @Override
-    public BlockData merge(BlockData data) {
+    public @NotNull BlockData merge(BlockData data) {
         CraftBlockData craft = (CraftBlockData) data;
         Preconditions.checkArgument(craft.parsedStates != null, "Data not created via string parsing");
         Preconditions.checkArgument(this.state.getBlock() == craft.state.getBlock(), "States have different types (got %s, expected %s)", data, this);
@@ -119,7 +122,7 @@ public class CraftBlockData implements BlockData {
     }
 
     @Override
-    public boolean matches(BlockData data) {
+    public boolean matches(@Nullable BlockData data) {
         if (data == null) {
             return false;
         }
@@ -168,7 +171,7 @@ public class CraftBlockData implements BlockData {
      * @throws IllegalStateException if the Enum could not be converted
      */
     @SuppressWarnings("unchecked")
-    public static <N extends Enum<N> & StringRepresentable> N toNMS(Enum<?> bukkit, Class<N> nms) {
+    public static <N extends Enum<N> & StringRepresentable> @Nullable N toNMS(Enum<?> bukkit, Class<N> nms) {
         if (bukkit instanceof BlockFace) {
             return (N) CraftBlock.blockFaceToNotch((BlockFace) bukkit);
         }
@@ -182,7 +185,7 @@ public class CraftBlockData implements BlockData {
      * @param <T> the type
      * @return the current value of the given state
      */
-    protected <T extends Comparable<T>> T get(Property<T> ibs) {
+    protected <T extends Comparable<T>> @NotNull T get(@NotNull Property<T> ibs) {
         // Straight integer or boolean getter
         return this.state.getValue(ibs);
     }
@@ -195,24 +198,24 @@ public class CraftBlockData implements BlockData {
      * @param <T> the state's type
      * @param <V> the value's type. Must match the state's type.
      */
-    public <T extends Comparable<T>, V extends T> void set(Property<T> ibs, V v) {
+    public <T extends Comparable<T>, V extends T> void set(@NotNull Property<T> ibs, @NotNull V v) {
         // Straight integer or boolean setter
         this.parsedStates = null;
         this.state = this.state.setValue(ibs, v);
     }
 
     @Override
-    public String getAsString() {
+    public @NotNull String getAsString() {
         return this.toString(this.state.getValues());
     }
 
     @Override
-    public String getAsString(boolean hideUnspecified) {
+    public @NotNull String getAsString(boolean hideUnspecified) {
         return (hideUnspecified && this.parsedStates != null) ? this.toString(this.parsedStates) : this.getAsString();
     }
 
     @Override
-    public BlockData clone() {
+    public @NotNull BlockData clone() {
         try {
             return (BlockData) super.clone();
         } catch (CloneNotSupportedException ex) {
@@ -221,12 +224,12 @@ public class CraftBlockData implements BlockData {
     }
 
     @Override
-    public String toString() {
+    public @NotNull String toString() {
         return "CraftBlockData{" + this.getAsString() + "}";
     }
 
     // Mimicked from BlockDataAbstract#toString()
-    public String toString(Map<Property<?>, Comparable<?>> states) {
+    public @NotNull String toString(@NotNull Map<Property<?>, Comparable<?>> states) {
         StringBuilder stateString = new StringBuilder(BuiltInRegistries.BLOCK.getKey(this.state.getBlock()).toString());
 
         if (!states.isEmpty()) {
@@ -238,7 +241,7 @@ public class CraftBlockData implements BlockData {
         return stateString.toString();
     }
 
-    public CompoundTag toStates() {
+    public @NotNull CompoundTag toStates() {
         CompoundTag compound = new CompoundTag();
 
         for (Map.Entry<Property<?>, Comparable<?>> entry : this.state.getValues().entrySet()) {
@@ -276,19 +279,19 @@ public class CraftBlockData implements BlockData {
         throw new AssertionError("Template Method");
     }
 
-    protected static BooleanProperty getBoolean(Class<? extends Block> block, String name) {
+    protected static BooleanProperty getBoolean(Class<? extends Block> block, @NotNull String name) {
         return (BooleanProperty) CraftBlockData.getState(block, name, false);
     }
 
-    protected static BooleanProperty getBoolean(Class<? extends Block> block, String name, boolean optional) {
+    protected static BooleanProperty getBoolean(Class<? extends Block> block, @NotNull String name, boolean optional) {
         return (BooleanProperty) CraftBlockData.getState(block, name, optional);
     }
 
-    protected static EnumProperty<?> getEnum(Class<? extends Block> block, String name) {
+    protected static EnumProperty<?> getEnum(Class<? extends Block> block, @NotNull String name) {
         return (EnumProperty<?>) CraftBlockData.getState(block, name, false);
     }
 
-    protected static IntegerProperty getInteger(Class<? extends Block> block, String name) {
+    protected static IntegerProperty getInteger(Class<? extends Block> block, @NotNull String name) {
         return (IntegerProperty) CraftBlockData.getState(block, name, false);
     }
 
@@ -303,7 +306,7 @@ public class CraftBlockData implements BlockData {
      * @throws IllegalStateException if the state is null and {@code optional}
      * is false.
      */
-    private static Property<?> getState(Class<? extends Block> block, String name, boolean optional) {
+    private static @Nullable Property<?> getState(Class<? extends Block> block, @NotNull String name, boolean optional) {
         Property<?> state = null;
 
         for (Block instance : BuiltInRegistries.BLOCK) {
@@ -329,7 +332,7 @@ public class CraftBlockData implements BlockData {
      * @param state the state to check
      * @return the minimum value allowed
      */
-    protected static int getMin(IntegerProperty state) {
+    protected static int getMin(@NotNull IntegerProperty state) {
         return state.min;
     }
 
@@ -339,7 +342,7 @@ public class CraftBlockData implements BlockData {
      * @param state the state to check
      * @return the maximum value allowed
      */
-    protected static int getMax(IntegerProperty state) {
+    protected static int getMax(@NotNull IntegerProperty state) {
         return state.max;
     }
 
@@ -510,7 +513,7 @@ public class CraftBlockData implements BlockData {
     }
 
     // Paper start - cache block data strings
-    private static Map<String, CraftBlockData> stringDataCache = new java.util.concurrent.ConcurrentHashMap<>();
+    private static @NotNull Map<String, CraftBlockData> stringDataCache = new java.util.concurrent.ConcurrentHashMap<>();
 
     static {
         // cache all of the default states at startup, will not cache ones with the custom states inside of the
@@ -524,7 +527,7 @@ public class CraftBlockData implements BlockData {
     }
     // Paper end
 
-    public static CraftBlockData newData(Material material, String data) {
+    public static @NotNull CraftBlockData newData(@Nullable Material material, String data) {
         Preconditions.checkArgument(material == null || material.isBlock(), "Cannot get data for not block %s", material);
 
         // Paper start - cache block data strings
@@ -540,7 +543,7 @@ public class CraftBlockData implements BlockData {
         return (CraftBlockData) cached.clone();
     }
 
-    private static CraftBlockData createNewData(Material material, String data) {
+    private static @NotNull CraftBlockData createNewData(Material material, @Nullable String data) {
         // Paper end - cache block data strings
         BlockState blockData;
         Block block = CraftMagicNumbers.getBlock(material);
@@ -577,22 +580,22 @@ public class CraftBlockData implements BlockData {
         // Initialize cached data for all IBlockData instances after registration
         Block.BLOCK_STATE_REGISTRY.iterator().forEachRemaining(BlockState::createCraftBlockData);
     }
-    public static CraftBlockData fromData(BlockState data) {
+    public static @NotNull CraftBlockData fromData(@NotNull BlockState data) {
         return data.createCraftBlockData();
     }
 
-    public static CraftBlockData createData(BlockState data) {
+    public static CraftBlockData createData(@NotNull BlockState data) {
         // Paper end
         return CraftBlockData.MAP.getOrDefault(data.getBlock().getClass(), CraftBlockData::new).apply(data);
     }
 
     @Override
-    public SoundGroup getSoundGroup() {
+    public @NotNull SoundGroup getSoundGroup() {
         return CraftSoundGroup.getSoundGroup(this.state.getSoundType());
     }
 
     @Override
-    public boolean isSupported(org.bukkit.block.Block block) {
+    public boolean isSupported(org.bukkit.block.@Nullable Block block) {
         Preconditions.checkArgument(block != null, "block must not be null");
 
         CraftBlock craftBlock = (CraftBlock) block;
@@ -600,7 +603,7 @@ public class CraftBlockData implements BlockData {
     }
 
     @Override
-    public boolean isSupported(Location location) {
+    public boolean isSupported(@NotNull Location location) {
         Preconditions.checkArgument(location != null, "location must not be null");
 
         CraftWorld world = (CraftWorld) location.getWorld();
@@ -611,7 +614,7 @@ public class CraftBlockData implements BlockData {
     }
 
     @Override
-    public boolean isFaceSturdy(BlockFace face, BlockSupport support) {
+    public boolean isFaceSturdy(@Nullable BlockFace face, @Nullable BlockSupport support) {
         Preconditions.checkArgument(face != null, "face must not be null");
         Preconditions.checkArgument(support != null, "support must not be null");
 
diff --git a/src/main/java/org/bukkit/craftbukkit/block/data/CraftDirectional.java b/src/main/java/org/bukkit/craftbukkit/block/data/CraftDirectional.java
index 6d150f4a443977d28c3b002d2c9ae1ec6ba25c68..fdf50c5bfc69cbb3c72fd86f8c609a01e0dd7ec9 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/data/CraftDirectional.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/data/CraftDirectional.java
@@ -1,13 +1,15 @@
 package org.bukkit.craftbukkit.block.data;
 
 import org.bukkit.block.data.Directional;
+import org.jetbrains.annotations.NotNull;
+
 
 public abstract class CraftDirectional extends CraftBlockData implements Directional {
 
     private static final net.minecraft.world.level.block.state.properties.EnumProperty<?> FACING = getEnum("facing");
 
     @Override
-    public org.bukkit.block.BlockFace getFacing() {
+    public org.bukkit.block.@NotNull BlockFace getFacing() {
         return get(CraftDirectional.FACING, org.bukkit.block.BlockFace.class);
     }
 
@@ -17,7 +19,7 @@ public abstract class CraftDirectional extends CraftBlockData implements Directi
     }
 
     @Override
-    public java.util.Set<org.bukkit.block.BlockFace> getFaces() {
+    public java.util.@NotNull Set<org.bukkit.block.BlockFace> getFaces() {
         return getValues(CraftDirectional.FACING, org.bukkit.block.BlockFace.class);
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/block/data/CraftFaceAttachable.java b/src/main/java/org/bukkit/craftbukkit/block/data/CraftFaceAttachable.java
index afbf4622103197c1b0c99bbdaf0905229430fb94..bad01d12f67be584e3680a97f2383387c8b8c838 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/data/CraftFaceAttachable.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/data/CraftFaceAttachable.java
@@ -1,13 +1,15 @@
 package org.bukkit.craftbukkit.block.data;
 
 import org.bukkit.block.data.FaceAttachable;
+import org.jetbrains.annotations.NotNull;
+
 
 public abstract class CraftFaceAttachable extends CraftBlockData implements FaceAttachable {
 
     private static final net.minecraft.world.level.block.state.properties.EnumProperty<?> ATTACH_FACE = getEnum("face");
 
     @Override
-    public org.bukkit.block.data.FaceAttachable.AttachedFace getAttachedFace() {
+    public org.bukkit.block.data.FaceAttachable.@NotNull AttachedFace getAttachedFace() {
         return get(CraftFaceAttachable.ATTACH_FACE, org.bukkit.block.data.FaceAttachable.AttachedFace.class);
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/block/data/CraftMultipleFacing.java b/src/main/java/org/bukkit/craftbukkit/block/data/CraftMultipleFacing.java
index 19b48163700efc8c6d40774a6108a63504dba690..12de1ae8316402f8747e6ce4eb7a01076c1a4a1b 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/data/CraftMultipleFacing.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/data/CraftMultipleFacing.java
@@ -1,6 +1,8 @@
 package org.bukkit.craftbukkit.block.data;
 
 import org.bukkit.block.data.MultipleFacing;
+import org.jetbrains.annotations.NotNull;
+
 
 public abstract class CraftMultipleFacing extends CraftBlockData implements MultipleFacing {
 
@@ -9,7 +11,7 @@ public abstract class CraftMultipleFacing extends CraftBlockData implements Mult
     };
 
     @Override
-    public boolean hasFace(org.bukkit.block.BlockFace face) {
+    public boolean hasFace(org.bukkit.block.@NotNull BlockFace face) {
         net.minecraft.world.level.block.state.properties.BooleanProperty state = CraftMultipleFacing.FACES[face.ordinal()];
         if (state == null) {
             throw new IllegalArgumentException("Non-allowed face " + face + ". Check MultipleFacing.getAllowedFaces.");
@@ -18,7 +20,7 @@ public abstract class CraftMultipleFacing extends CraftBlockData implements Mult
     }
 
     @Override
-    public void setFace(org.bukkit.block.BlockFace face, boolean has) {
+    public void setFace(org.bukkit.block.@NotNull BlockFace face, boolean has) {
         net.minecraft.world.level.block.state.properties.BooleanProperty state = CraftMultipleFacing.FACES[face.ordinal()];
         if (state == null) {
             throw new IllegalArgumentException("Non-allowed face " + face + ". Check MultipleFacing.getAllowedFaces.");
@@ -27,7 +29,7 @@ public abstract class CraftMultipleFacing extends CraftBlockData implements Mult
     }
 
     @Override
-    public java.util.Set<org.bukkit.block.BlockFace> getFaces() {
+    public java.util.@NotNull Set<org.bukkit.block.BlockFace> getFaces() {
         com.google.common.collect.ImmutableSet.Builder<org.bukkit.block.BlockFace> faces = com.google.common.collect.ImmutableSet.builder();
 
         for (int i = 0; i < FACES.length; i++) {
@@ -40,7 +42,7 @@ public abstract class CraftMultipleFacing extends CraftBlockData implements Mult
     }
 
     @Override
-    public java.util.Set<org.bukkit.block.BlockFace> getAllowedFaces() {
+    public java.util.@NotNull Set<org.bukkit.block.BlockFace> getAllowedFaces() {
         com.google.common.collect.ImmutableSet.Builder<org.bukkit.block.BlockFace> faces = com.google.common.collect.ImmutableSet.builder();
 
         for (int i = 0; i < FACES.length; i++) {
diff --git a/src/main/java/org/bukkit/craftbukkit/block/data/CraftOrientable.java b/src/main/java/org/bukkit/craftbukkit/block/data/CraftOrientable.java
index 1341d8a2292c395de93d17c9ee97195ae2460a9a..dc3d442ba004b90fcb305b4cbbf21f0d18b99031 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/data/CraftOrientable.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/data/CraftOrientable.java
@@ -1,13 +1,15 @@
 package org.bukkit.craftbukkit.block.data;
 
 import org.bukkit.block.data.Orientable;
+import org.jetbrains.annotations.NotNull;
+
 
 public class CraftOrientable extends CraftBlockData implements Orientable {
 
     private static final net.minecraft.world.level.block.state.properties.EnumProperty<?> AXIS = getEnum("axis");
 
     @Override
-    public org.bukkit.Axis getAxis() {
+    public org.bukkit.@NotNull Axis getAxis() {
         return get(CraftOrientable.AXIS, org.bukkit.Axis.class);
     }
 
@@ -17,7 +19,7 @@ public class CraftOrientable extends CraftBlockData implements Orientable {
     }
 
     @Override
-    public java.util.Set<org.bukkit.Axis> getAxes() {
+    public java.util.@NotNull Set<org.bukkit.Axis> getAxes() {
         return getValues(CraftOrientable.AXIS, org.bukkit.Axis.class);
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/block/data/CraftRail.java b/src/main/java/org/bukkit/craftbukkit/block/data/CraftRail.java
index e0aa30e6350f2c943bd958e33731e605e89947af..d25a9a5c2ee9992fe2d0618faf73c90bae224164 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/data/CraftRail.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/data/CraftRail.java
@@ -1,13 +1,15 @@
 package org.bukkit.craftbukkit.block.data;
 
 import org.bukkit.block.data.Rail;
+import org.jetbrains.annotations.NotNull;
+
 
 public abstract class CraftRail extends CraftBlockData implements Rail {
 
     private static final net.minecraft.world.level.block.state.properties.EnumProperty<?> SHAPE = getEnum("shape");
 
     @Override
-    public org.bukkit.block.data.Rail.Shape getShape() {
+    public org.bukkit.block.data.Rail.@NotNull Shape getShape() {
         return get(CraftRail.SHAPE, org.bukkit.block.data.Rail.Shape.class);
     }
 
@@ -17,7 +19,7 @@ public abstract class CraftRail extends CraftBlockData implements Rail {
     }
 
     @Override
-    public java.util.Set<org.bukkit.block.data.Rail.Shape> getShapes() {
+    public java.util.@NotNull Set<org.bukkit.block.data.Rail.Shape> getShapes() {
         return getValues(CraftRail.SHAPE, org.bukkit.block.data.Rail.Shape.class);
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/block/data/CraftRotatable.java b/src/main/java/org/bukkit/craftbukkit/block/data/CraftRotatable.java
index 9aa1050d7a39aaa5ebc8bf5a21df1bbf5ae37a8a..e72e504221c21d4ee0f69d551e5b9c7e79b138b0 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/data/CraftRotatable.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/data/CraftRotatable.java
@@ -1,13 +1,15 @@
 package org.bukkit.craftbukkit.block.data;
 
 import org.bukkit.block.data.Rotatable;
+import org.jetbrains.annotations.NotNull;
+
 
 public abstract class CraftRotatable extends CraftBlockData implements Rotatable {
 
     private static final net.minecraft.world.level.block.state.properties.IntegerProperty ROTATION = getInteger("rotation");
 
     @Override
-    public org.bukkit.block.BlockFace getRotation() {
+    public org.bukkit.block.@NotNull BlockFace getRotation() {
         int data = get(CraftRotatable.ROTATION);
         switch (data) {
             case 0x0:
@@ -48,7 +50,7 @@ public abstract class CraftRotatable extends CraftBlockData implements Rotatable
     }
 
     @Override
-    public void setRotation(org.bukkit.block.BlockFace rotation) {
+    public void setRotation(org.bukkit.block.@NotNull BlockFace rotation) {
         int val;
         switch (rotation) {
             case SOUTH:
diff --git a/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftBamboo.java b/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftBamboo.java
index 1bed1634ab3fef8df38d02a159bf4cc85f78e467..550c0bf6f20a1cd0e8b7c17f32c330dac5820da7 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftBamboo.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftBamboo.java
@@ -2,13 +2,15 @@ package org.bukkit.craftbukkit.block.data.type;
 
 import org.bukkit.block.data.type.Bamboo;
 import org.bukkit.craftbukkit.block.data.CraftBlockData;
+import org.jetbrains.annotations.NotNull;
+
 
 public abstract class CraftBamboo extends CraftBlockData implements Bamboo {
 
     private static final net.minecraft.world.level.block.state.properties.EnumProperty<?> LEAVES = getEnum("leaves");
 
     @Override
-    public org.bukkit.block.data.type.Bamboo.Leaves getLeaves() {
+    public org.bukkit.block.data.type.Bamboo.@NotNull Leaves getLeaves() {
         return get(CraftBamboo.LEAVES, org.bukkit.block.data.type.Bamboo.Leaves.class);
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftBed.java b/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftBed.java
index 71df14b932306aa4c8ea6d4883f6ba053955ec28..8539b76e351511d4272fa540a739656996f92526 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftBed.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftBed.java
@@ -2,6 +2,8 @@ package org.bukkit.craftbukkit.block.data.type;
 
 import org.bukkit.block.data.type.Bed;
 import org.bukkit.craftbukkit.block.data.CraftBlockData;
+import org.jetbrains.annotations.NotNull;
+
 
 public abstract class CraftBed extends CraftBlockData implements Bed {
 
@@ -9,7 +11,7 @@ public abstract class CraftBed extends CraftBlockData implements Bed {
     private static final net.minecraft.world.level.block.state.properties.BooleanProperty OCCUPIED = getBoolean("occupied");
 
     @Override
-    public org.bukkit.block.data.type.Bed.Part getPart() {
+    public org.bukkit.block.data.type.Bed.@NotNull Part getPart() {
         return get(CraftBed.PART, org.bukkit.block.data.type.Bed.Part.class);
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftBell.java b/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftBell.java
index 9e83579ebbbff113436e1db44c87af96610eb3c8..fcb5d0d012f63e45f06fe62d777cc45272228238 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftBell.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftBell.java
@@ -2,13 +2,15 @@ package org.bukkit.craftbukkit.block.data.type;
 
 import org.bukkit.block.data.type.Bell;
 import org.bukkit.craftbukkit.block.data.CraftBlockData;
+import org.jetbrains.annotations.NotNull;
+
 
 public abstract class CraftBell extends CraftBlockData implements Bell {
 
     private static final net.minecraft.world.level.block.state.properties.EnumProperty<?> ATTACHMENT = getEnum("attachment");
 
     @Override
-    public org.bukkit.block.data.type.Bell.Attachment getAttachment() {
+    public org.bukkit.block.data.type.Bell.@NotNull Attachment getAttachment() {
         return get(CraftBell.ATTACHMENT, org.bukkit.block.data.type.Bell.Attachment.class);
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftBigDripleaf.java b/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftBigDripleaf.java
index e3d66a220d5a752861312abb950b1165af8a8972..48dafda15a8480c802b5e5dd23157166f03e25ca 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftBigDripleaf.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftBigDripleaf.java
@@ -2,13 +2,15 @@ package org.bukkit.craftbukkit.block.data.type;
 
 import org.bukkit.block.data.type.BigDripleaf;
 import org.bukkit.craftbukkit.block.data.CraftBlockData;
+import org.jetbrains.annotations.NotNull;
+
 
 public abstract class CraftBigDripleaf extends CraftBlockData implements BigDripleaf {
 
     private static final net.minecraft.world.level.block.state.properties.EnumProperty<?> TILT = getEnum("tilt");
 
     @Override
-    public Tilt getTilt() {
+    public @NotNull Tilt getTilt() {
         return get(CraftBigDripleaf.TILT, org.bukkit.block.data.type.BigDripleaf.Tilt.class);
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftBrewingStand.java b/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftBrewingStand.java
index 568c22d3c3373fd6ef74e57abe85e3300c351dd9..579c0d72fe47a234b60f5f49c644bffd76ea708e 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftBrewingStand.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftBrewingStand.java
@@ -2,6 +2,8 @@ package org.bukkit.craftbukkit.block.data.type;
 
 import org.bukkit.block.data.type.BrewingStand;
 import org.bukkit.craftbukkit.block.data.CraftBlockData;
+import org.jetbrains.annotations.NotNull;
+
 
 public abstract class CraftBrewingStand extends CraftBlockData implements BrewingStand {
 
@@ -20,7 +22,7 @@ public abstract class CraftBrewingStand extends CraftBlockData implements Brewin
     }
 
     @Override
-    public java.util.Set<Integer> getBottles() {
+    public java.util.@NotNull Set<Integer> getBottles() {
         com.google.common.collect.ImmutableSet.Builder<Integer> bottles = com.google.common.collect.ImmutableSet.builder();
 
         for (int index = 0; index < this.getMaximumBottles(); index++) {
diff --git a/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftChest.java b/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftChest.java
index e91cea16936ac670b257341e0f01092e7268d913..16b2a99e27dc1ea81c0775baaba48572075a0e88 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftChest.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftChest.java
@@ -2,13 +2,15 @@ package org.bukkit.craftbukkit.block.data.type;
 
 import org.bukkit.block.data.type.Chest;
 import org.bukkit.craftbukkit.block.data.CraftBlockData;
+import org.jetbrains.annotations.NotNull;
+
 
 public abstract class CraftChest extends CraftBlockData implements Chest {
 
     private static final net.minecraft.world.level.block.state.properties.EnumProperty<?> TYPE = getEnum("type");
 
     @Override
-    public org.bukkit.block.data.type.Chest.Type getType() {
+    public org.bukkit.block.data.type.Chest.@NotNull Type getType() {
         return get(CraftChest.TYPE, org.bukkit.block.data.type.Chest.Type.class);
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftComparator.java b/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftComparator.java
index 86f52725027930269acf0d9162879be58c2bcf68..eff2f48c1bd1cc7323fa240335a66ada2cbba723 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftComparator.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftComparator.java
@@ -2,13 +2,15 @@ package org.bukkit.craftbukkit.block.data.type;
 
 import org.bukkit.block.data.type.Comparator;
 import org.bukkit.craftbukkit.block.data.CraftBlockData;
+import org.jetbrains.annotations.NotNull;
+
 
 public abstract class CraftComparator extends CraftBlockData implements Comparator {
 
     private static final net.minecraft.world.level.block.state.properties.EnumProperty<?> MODE = getEnum("mode");
 
     @Override
-    public org.bukkit.block.data.type.Comparator.Mode getMode() {
+    public org.bukkit.block.data.type.Comparator.@NotNull Mode getMode() {
         return get(CraftComparator.MODE, org.bukkit.block.data.type.Comparator.Mode.class);
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftDoor.java b/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftDoor.java
index 58e3d9a824895fe7a2f9d962147c8a6ddb668da2..451be458fcca4ce9d9a0c3749dc38eecba9052a6 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftDoor.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftDoor.java
@@ -2,13 +2,15 @@ package org.bukkit.craftbukkit.block.data.type;
 
 import org.bukkit.block.data.type.Door;
 import org.bukkit.craftbukkit.block.data.CraftBlockData;
+import org.jetbrains.annotations.NotNull;
+
 
 public abstract class CraftDoor extends CraftBlockData implements Door {
 
     private static final net.minecraft.world.level.block.state.properties.EnumProperty<?> HINGE = getEnum("hinge");
 
     @Override
-    public org.bukkit.block.data.type.Door.Hinge getHinge() {
+    public org.bukkit.block.data.type.Door.@NotNull Hinge getHinge() {
         return get(CraftDoor.HINGE, org.bukkit.block.data.type.Door.Hinge.class);
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftJigsaw.java b/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftJigsaw.java
index 0c8f09bd04becec67a67806e4398e7a34b5f378d..a47624eb5d39f5596e269f15e9a2530185207666 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftJigsaw.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftJigsaw.java
@@ -2,13 +2,15 @@ package org.bukkit.craftbukkit.block.data.type;
 
 import org.bukkit.block.data.type.Jigsaw;
 import org.bukkit.craftbukkit.block.data.CraftBlockData;
+import org.jetbrains.annotations.NotNull;
+
 
 public abstract class CraftJigsaw extends CraftBlockData implements Jigsaw {
 
     private static final net.minecraft.world.level.block.state.properties.EnumProperty<?> ORIENTATION = getEnum("orientation");
 
     @Override
-    public org.bukkit.block.data.type.Jigsaw.Orientation getOrientation() {
+    public org.bukkit.block.data.type.Jigsaw.@NotNull Orientation getOrientation() {
         return get(CraftJigsaw.ORIENTATION, org.bukkit.block.data.type.Jigsaw.Orientation.class);
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftNoteBlock.java b/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftNoteBlock.java
index e64b5b9407c3526c240222b6b4b38dd87df8c972..d284090ce1df8ae6f9e9d193e7349091343b7be1 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftNoteBlock.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftNoteBlock.java
@@ -2,6 +2,8 @@ package org.bukkit.craftbukkit.block.data.type;
 
 import org.bukkit.block.data.type.NoteBlock;
 import org.bukkit.craftbukkit.block.data.CraftBlockData;
+import org.jetbrains.annotations.NotNull;
+
 
 public abstract class CraftNoteBlock extends CraftBlockData implements NoteBlock {
 
@@ -9,7 +11,7 @@ public abstract class CraftNoteBlock extends CraftBlockData implements NoteBlock
     private static final net.minecraft.world.level.block.state.properties.IntegerProperty NOTE = getInteger("note");
 
     @Override
-    public org.bukkit.Instrument getInstrument() {
+    public org.bukkit.@NotNull Instrument getInstrument() {
         return get(CraftNoteBlock.INSTRUMENT, org.bukkit.Instrument.class);
     }
 
@@ -19,12 +21,12 @@ public abstract class CraftNoteBlock extends CraftBlockData implements NoteBlock
     }
 
     @Override
-    public org.bukkit.Note getNote() {
+    public org.bukkit.@NotNull Note getNote() {
        return new org.bukkit.Note(get(CraftNoteBlock.NOTE));
     }
 
     @Override
-    public void setNote(org.bukkit.Note note) {
+    public void setNote(org.bukkit.@NotNull Note note) {
         set(CraftNoteBlock.NOTE, (int) note.getId());
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftPointedDripstone.java b/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftPointedDripstone.java
index 6b229e2f763112fb2d044a13ff3b9cf581f9c235..336905e0569e63032e291bb89e94f085c9e3ea62 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftPointedDripstone.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftPointedDripstone.java
@@ -2,6 +2,8 @@ package org.bukkit.craftbukkit.block.data.type;
 
 import org.bukkit.block.data.type.PointedDripstone;
 import org.bukkit.craftbukkit.block.data.CraftBlockData;
+import org.jetbrains.annotations.NotNull;
+
 
 public abstract class CraftPointedDripstone extends CraftBlockData implements PointedDripstone {
 
@@ -9,7 +11,7 @@ public abstract class CraftPointedDripstone extends CraftBlockData implements Po
     private static final net.minecraft.world.level.block.state.properties.EnumProperty<?> THICKNESS = getEnum("thickness");
 
     @Override
-    public org.bukkit.block.BlockFace getVerticalDirection() {
+    public org.bukkit.block.@NotNull BlockFace getVerticalDirection() {
         return get(CraftPointedDripstone.VERTICAL_DIRECTION, org.bukkit.block.BlockFace.class);
     }
 
@@ -19,12 +21,12 @@ public abstract class CraftPointedDripstone extends CraftBlockData implements Po
     }
 
     @Override
-    public java.util.Set<org.bukkit.block.BlockFace> getVerticalDirections() {
+    public java.util.@NotNull Set<org.bukkit.block.BlockFace> getVerticalDirections() {
         return getValues(CraftPointedDripstone.VERTICAL_DIRECTION, org.bukkit.block.BlockFace.class);
     }
 
     @Override
-    public org.bukkit.block.data.type.PointedDripstone.Thickness getThickness() {
+    public org.bukkit.block.data.type.PointedDripstone.@NotNull Thickness getThickness() {
         return get(CraftPointedDripstone.THICKNESS, org.bukkit.block.data.type.PointedDripstone.Thickness.class);
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftRedstoneWire.java b/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftRedstoneWire.java
index 3dfb52d9534daad528ce16ea7bac3f9cde44200b..fb0430b9ed3f5c0f97dbaeb6216d4e7ad81ff939 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftRedstoneWire.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftRedstoneWire.java
@@ -2,6 +2,8 @@ package org.bukkit.craftbukkit.block.data.type;
 
 import org.bukkit.block.data.type.RedstoneWire;
 import org.bukkit.craftbukkit.block.data.CraftBlockData;
+import org.jetbrains.annotations.NotNull;
+
 
 public abstract class CraftRedstoneWire extends CraftBlockData implements RedstoneWire {
 
@@ -11,7 +13,7 @@ public abstract class CraftRedstoneWire extends CraftBlockData implements Redsto
     private static final net.minecraft.world.level.block.state.properties.EnumProperty<?> WEST = getEnum("west");
 
     @Override
-    public org.bukkit.block.data.type.RedstoneWire.Connection getFace(org.bukkit.block.BlockFace face) {
+    public org.bukkit.block.data.type.RedstoneWire.@NotNull Connection getFace(org.bukkit.block.@NotNull BlockFace face) {
         switch (face) {
             case NORTH:
                 return get(CraftRedstoneWire.NORTH, org.bukkit.block.data.type.RedstoneWire.Connection.class);
@@ -27,7 +29,7 @@ public abstract class CraftRedstoneWire extends CraftBlockData implements Redsto
     }
 
     @Override
-    public void setFace(org.bukkit.block.BlockFace face, org.bukkit.block.data.type.RedstoneWire.Connection connection) {
+    public void setFace(org.bukkit.block.@NotNull BlockFace face, org.bukkit.block.data.type.RedstoneWire.Connection connection) {
         switch (face) {
             case NORTH:
                 set(CraftRedstoneWire.NORTH, connection);
@@ -47,7 +49,7 @@ public abstract class CraftRedstoneWire extends CraftBlockData implements Redsto
     }
 
     @Override
-    public java.util.Set<org.bukkit.block.BlockFace> getAllowedFaces() {
+    public java.util.@NotNull Set<org.bukkit.block.BlockFace> getAllowedFaces() {
         return com.google.common.collect.ImmutableSet.of(org.bukkit.block.BlockFace.NORTH, org.bukkit.block.BlockFace.EAST, org.bukkit.block.BlockFace.SOUTH, org.bukkit.block.BlockFace.WEST);
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftSculkSensor.java b/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftSculkSensor.java
index c081eed0179f941cea2bdc7f91d1601571e85f73..c7e1821db76896f789557c293b463eede0fab529 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftSculkSensor.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftSculkSensor.java
@@ -2,13 +2,15 @@ package org.bukkit.craftbukkit.block.data.type;
 
 import org.bukkit.block.data.type.SculkSensor;
 import org.bukkit.craftbukkit.block.data.CraftBlockData;
+import org.jetbrains.annotations.NotNull;
+
 
 public abstract class CraftSculkSensor extends CraftBlockData implements SculkSensor {
 
     private static final net.minecraft.world.level.block.state.properties.EnumProperty<?> PHASE = getEnum("sculk_sensor_phase");
 
     @Override
-    public org.bukkit.block.data.type.SculkSensor.Phase getPhase() {
+    public org.bukkit.block.data.type.SculkSensor.@NotNull Phase getPhase() {
         return get(CraftSculkSensor.PHASE, org.bukkit.block.data.type.SculkSensor.Phase.class);
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftSlab.java b/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftSlab.java
index 8b6aa37fa3486b354acbbb27614ad965712015a3..a51d04dcdd1c4a53b36855d0d1042dae90754f45 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftSlab.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftSlab.java
@@ -2,13 +2,15 @@ package org.bukkit.craftbukkit.block.data.type;
 
 import org.bukkit.block.data.type.Slab;
 import org.bukkit.craftbukkit.block.data.CraftBlockData;
+import org.jetbrains.annotations.NotNull;
+
 
 public abstract class CraftSlab extends CraftBlockData implements Slab {
 
     private static final net.minecraft.world.level.block.state.properties.EnumProperty<?> TYPE = getEnum("type");
 
     @Override
-    public org.bukkit.block.data.type.Slab.Type getType() {
+    public org.bukkit.block.data.type.Slab.@NotNull Type getType() {
         return get(CraftSlab.TYPE, org.bukkit.block.data.type.Slab.Type.class);
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftStairs.java b/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftStairs.java
index cbf8af9d887777e16646f1ef28af2d0df8e1bf31..fc8333628497766cdb4b836abdeb4d495de642ca 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftStairs.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftStairs.java
@@ -2,13 +2,15 @@ package org.bukkit.craftbukkit.block.data.type;
 
 import org.bukkit.block.data.type.Stairs;
 import org.bukkit.craftbukkit.block.data.CraftBlockData;
+import org.jetbrains.annotations.NotNull;
+
 
 public abstract class CraftStairs extends CraftBlockData implements Stairs {
 
     private static final net.minecraft.world.level.block.state.properties.EnumProperty<?> SHAPE = getEnum("shape");
 
     @Override
-    public org.bukkit.block.data.type.Stairs.Shape getShape() {
+    public org.bukkit.block.data.type.Stairs.@NotNull Shape getShape() {
         return get(CraftStairs.SHAPE, org.bukkit.block.data.type.Stairs.Shape.class);
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftStructureBlock.java b/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftStructureBlock.java
index b39c4c0e3b6a36438a4c5075ccf0c0537685275c..d1a7957bff762ef3eba2b98607d41d8db12831c4 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftStructureBlock.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftStructureBlock.java
@@ -2,13 +2,15 @@ package org.bukkit.craftbukkit.block.data.type;
 
 import org.bukkit.block.data.type.StructureBlock;
 import org.bukkit.craftbukkit.block.data.CraftBlockData;
+import org.jetbrains.annotations.NotNull;
+
 
 public abstract class CraftStructureBlock extends CraftBlockData implements StructureBlock {
 
     private static final net.minecraft.world.level.block.state.properties.EnumProperty<?> MODE = getEnum("mode");
 
     @Override
-    public org.bukkit.block.data.type.StructureBlock.Mode getMode() {
+    public org.bukkit.block.data.type.StructureBlock.@NotNull Mode getMode() {
         return get(CraftStructureBlock.MODE, org.bukkit.block.data.type.StructureBlock.Mode.class);
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftSwitch.java b/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftSwitch.java
index 1cf8067a3733fa5564443c036901666bfb6d12bd..d47fc5055e909c5fec6d516c5d77ade547981576 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftSwitch.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftSwitch.java
@@ -2,13 +2,15 @@ package org.bukkit.craftbukkit.block.data.type;
 
 import org.bukkit.block.data.type.Switch;
 import org.bukkit.craftbukkit.block.data.CraftBlockData;
+import org.jetbrains.annotations.NotNull;
+
 
 public abstract class CraftSwitch extends CraftBlockData implements Switch {
 
     private static final net.minecraft.world.level.block.state.properties.EnumProperty<?> FACE = getEnum("face");
 
     @Override
-    public org.bukkit.block.data.type.Switch.Face getFace() {
+    public org.bukkit.block.data.type.Switch.@NotNull Face getFace() {
         return get(CraftSwitch.FACE, org.bukkit.block.data.type.Switch.Face.class);
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftTechnicalPiston.java b/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftTechnicalPiston.java
index 6d9400f65dfb211c7cf493a7bb3e4e480ff60056..57b8a1c464be8dde8a05632ab39efabc78227b66 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftTechnicalPiston.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftTechnicalPiston.java
@@ -2,13 +2,15 @@ package org.bukkit.craftbukkit.block.data.type;
 
 import org.bukkit.block.data.type.TechnicalPiston;
 import org.bukkit.craftbukkit.block.data.CraftBlockData;
+import org.jetbrains.annotations.NotNull;
+
 
 public abstract class CraftTechnicalPiston extends CraftBlockData implements TechnicalPiston {
 
     private static final net.minecraft.world.level.block.state.properties.EnumProperty<?> TYPE = getEnum("type");
 
     @Override
-    public org.bukkit.block.data.type.TechnicalPiston.Type getType() {
+    public org.bukkit.block.data.type.TechnicalPiston.@NotNull Type getType() {
         return get(CraftTechnicalPiston.TYPE, org.bukkit.block.data.type.TechnicalPiston.Type.class);
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftWall.java b/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftWall.java
index 6c244cbde70bbdd5b0545576832933c40dfeddf6..0562b06bbb21ee5258d7218f61c46b66795806f3 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftWall.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftWall.java
@@ -2,6 +2,8 @@ package org.bukkit.craftbukkit.block.data.type;
 
 import org.bukkit.block.data.type.Wall;
 import org.bukkit.craftbukkit.block.data.CraftBlockData;
+import org.jetbrains.annotations.NotNull;
+
 
 public abstract class CraftWall extends CraftBlockData implements Wall {
 
@@ -21,12 +23,12 @@ public abstract class CraftWall extends CraftBlockData implements Wall {
     }
 
     @Override
-    public org.bukkit.block.data.type.Wall.Height getHeight(org.bukkit.block.BlockFace face) {
+    public org.bukkit.block.data.type.Wall.@NotNull Height getHeight(org.bukkit.block.@NotNull BlockFace face) {
         return get(CraftWall.HEIGHTS[face.ordinal()], org.bukkit.block.data.type.Wall.Height.class);
     }
 
     @Override
-    public void setHeight(org.bukkit.block.BlockFace face, org.bukkit.block.data.type.Wall.Height height) {
+    public void setHeight(org.bukkit.block.@NotNull BlockFace face, org.bukkit.block.data.type.Wall.Height height) {
         set(CraftWall.HEIGHTS[face.ordinal()], height);
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftAmethystCluster.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftAmethystCluster.java
index c6345286d3f4f28787eb3573b2d36d502cee3a78..df1480c9ad6f8978f0481e288fefa5aeff0e3306 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftAmethystCluster.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftAmethystCluster.java
@@ -3,6 +3,9 @@
  */
 package org.bukkit.craftbukkit.block.impl;
 
+import org.jetbrains.annotations.NotNull;
+
+
 public final class CraftAmethystCluster extends org.bukkit.craftbukkit.block.data.CraftBlockData implements org.bukkit.block.data.type.AmethystCluster, org.bukkit.block.data.Directional, org.bukkit.block.data.Waterlogged {
 
     public CraftAmethystCluster() {
@@ -18,7 +21,7 @@ public final class CraftAmethystCluster extends org.bukkit.craftbukkit.block.dat
     private static final net.minecraft.world.level.block.state.properties.EnumProperty<?> FACING = getEnum(net.minecraft.world.level.block.AmethystClusterBlock.class, "facing");
 
     @Override
-    public org.bukkit.block.BlockFace getFacing() {
+    public org.bukkit.block.@NotNull BlockFace getFacing() {
         return get(CraftAmethystCluster.FACING, org.bukkit.block.BlockFace.class);
     }
 
@@ -28,7 +31,7 @@ public final class CraftAmethystCluster extends org.bukkit.craftbukkit.block.dat
     }
 
     @Override
-    public java.util.Set<org.bukkit.block.BlockFace> getFaces() {
+    public java.util.@NotNull Set<org.bukkit.block.BlockFace> getFaces() {
         return getValues(CraftAmethystCluster.FACING, org.bukkit.block.BlockFace.class);
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftAnvil.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftAnvil.java
index 2797e017ac5b0b748c1cfbd3d0ac0529a4d9e2b1..e95f4383074f0da603a6ed4585de9ea7af8b25bc 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftAnvil.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftAnvil.java
@@ -3,6 +3,9 @@
  */
 package org.bukkit.craftbukkit.block.impl;
 
+import org.jetbrains.annotations.NotNull;
+
+
 public final class CraftAnvil extends org.bukkit.craftbukkit.block.data.CraftBlockData implements org.bukkit.block.data.Directional {
 
     public CraftAnvil() {
@@ -18,7 +21,7 @@ public final class CraftAnvil extends org.bukkit.craftbukkit.block.data.CraftBlo
     private static final net.minecraft.world.level.block.state.properties.EnumProperty<?> FACING = getEnum(net.minecraft.world.level.block.AnvilBlock.class, "facing");
 
     @Override
-    public org.bukkit.block.BlockFace getFacing() {
+    public org.bukkit.block.@NotNull BlockFace getFacing() {
         return get(CraftAnvil.FACING, org.bukkit.block.BlockFace.class);
     }
 
@@ -28,7 +31,7 @@ public final class CraftAnvil extends org.bukkit.craftbukkit.block.data.CraftBlo
     }
 
     @Override
-    public java.util.Set<org.bukkit.block.BlockFace> getFaces() {
+    public java.util.@NotNull Set<org.bukkit.block.BlockFace> getFaces() {
         return getValues(CraftAnvil.FACING, org.bukkit.block.BlockFace.class);
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftBamboo.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftBamboo.java
index 9eada663c33fee2f932910fff1d56d5f3fbcdced..e2c5ca3d268a0ad3fed750a77e537f8fcadb8804 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftBamboo.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftBamboo.java
@@ -3,6 +3,9 @@
  */
 package org.bukkit.craftbukkit.block.impl;
 
+import org.jetbrains.annotations.NotNull;
+
+
 public final class CraftBamboo extends org.bukkit.craftbukkit.block.data.CraftBlockData implements org.bukkit.block.data.type.Bamboo, org.bukkit.block.data.Ageable, org.bukkit.block.data.type.Sapling {
 
     public CraftBamboo() {
@@ -18,7 +21,7 @@ public final class CraftBamboo extends org.bukkit.craftbukkit.block.data.CraftBl
     private static final net.minecraft.world.level.block.state.properties.EnumProperty<?> LEAVES = getEnum(net.minecraft.world.level.block.BambooStalkBlock.class, "leaves");
 
     @Override
-    public org.bukkit.block.data.type.Bamboo.Leaves getLeaves() {
+    public org.bukkit.block.data.type.Bamboo.@NotNull Leaves getLeaves() {
         return get(CraftBamboo.LEAVES, org.bukkit.block.data.type.Bamboo.Leaves.class);
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftBanner.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftBanner.java
index 61453b4a86c06caed8b2a4f3fa7cd3925043ffda..42c9017a2f17d63b3ae7fc50707b903f9c3256b1 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftBanner.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftBanner.java
@@ -3,6 +3,9 @@
  */
 package org.bukkit.craftbukkit.block.impl;
 
+import org.jetbrains.annotations.NotNull;
+
+
 public final class CraftBanner extends org.bukkit.craftbukkit.block.data.CraftBlockData implements org.bukkit.block.data.Rotatable {
 
     public CraftBanner() {
@@ -18,7 +21,7 @@ public final class CraftBanner extends org.bukkit.craftbukkit.block.data.CraftBl
     private static final net.minecraft.world.level.block.state.properties.IntegerProperty ROTATION = getInteger(net.minecraft.world.level.block.BannerBlock.class, "rotation");
 
     @Override
-    public org.bukkit.block.BlockFace getRotation() {
+    public org.bukkit.block.@NotNull BlockFace getRotation() {
         int data = get(CraftBanner.ROTATION);
         switch (data) {
             case 0x0:
@@ -59,7 +62,7 @@ public final class CraftBanner extends org.bukkit.craftbukkit.block.data.CraftBl
     }
 
     @Override
-    public void setRotation(org.bukkit.block.BlockFace rotation) {
+    public void setRotation(org.bukkit.block.@NotNull BlockFace rotation) {
         int val;
         switch (rotation) {
             case SOUTH:
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftBannerWall.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftBannerWall.java
index 4f6f666f448b5e6133a12f7b17050156e2d0db6d..53bb82e351028d702b17d807ef4b5395a6bb6b5e 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftBannerWall.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftBannerWall.java
@@ -3,6 +3,9 @@
  */
 package org.bukkit.craftbukkit.block.impl;
 
+import org.jetbrains.annotations.NotNull;
+
+
 public final class CraftBannerWall extends org.bukkit.craftbukkit.block.data.CraftBlockData implements org.bukkit.block.data.Directional {
 
     public CraftBannerWall() {
@@ -18,7 +21,7 @@ public final class CraftBannerWall extends org.bukkit.craftbukkit.block.data.Cra
     private static final net.minecraft.world.level.block.state.properties.EnumProperty<?> FACING = getEnum(net.minecraft.world.level.block.WallBannerBlock.class, "facing");
 
     @Override
-    public org.bukkit.block.BlockFace getFacing() {
+    public org.bukkit.block.@NotNull BlockFace getFacing() {
         return get(CraftBannerWall.FACING, org.bukkit.block.BlockFace.class);
     }
 
@@ -28,7 +31,7 @@ public final class CraftBannerWall extends org.bukkit.craftbukkit.block.data.Cra
     }
 
     @Override
-    public java.util.Set<org.bukkit.block.BlockFace> getFaces() {
+    public java.util.@NotNull Set<org.bukkit.block.BlockFace> getFaces() {
         return getValues(CraftBannerWall.FACING, org.bukkit.block.BlockFace.class);
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftBarrel.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftBarrel.java
index 2d0b86eba141d2332ca09020c8cc5d95a54b8bdf..a3ea8d724b467585115a697bef9d69cbce61ebf1 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftBarrel.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftBarrel.java
@@ -3,6 +3,9 @@
  */
 package org.bukkit.craftbukkit.block.impl;
 
+import org.jetbrains.annotations.NotNull;
+
+
 public final class CraftBarrel extends org.bukkit.craftbukkit.block.data.CraftBlockData implements org.bukkit.block.data.type.Barrel, org.bukkit.block.data.Directional, org.bukkit.block.data.Openable {
 
     public CraftBarrel() {
@@ -18,7 +21,7 @@ public final class CraftBarrel extends org.bukkit.craftbukkit.block.data.CraftBl
     private static final net.minecraft.world.level.block.state.properties.EnumProperty<?> FACING = getEnum(net.minecraft.world.level.block.BarrelBlock.class, "facing");
 
     @Override
-    public org.bukkit.block.BlockFace getFacing() {
+    public org.bukkit.block.@NotNull BlockFace getFacing() {
         return get(CraftBarrel.FACING, org.bukkit.block.BlockFace.class);
     }
 
@@ -28,7 +31,7 @@ public final class CraftBarrel extends org.bukkit.craftbukkit.block.data.CraftBl
     }
 
     @Override
-    public java.util.Set<org.bukkit.block.BlockFace> getFaces() {
+    public java.util.@NotNull Set<org.bukkit.block.BlockFace> getFaces() {
         return getValues(CraftBarrel.FACING, org.bukkit.block.BlockFace.class);
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftBed.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftBed.java
index 108fbb8ab9142a6f779651f3562a81c6cfaa3c30..2f95c1beaf3edb16c361937c37514466d4b8c756 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftBed.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftBed.java
@@ -3,6 +3,9 @@
  */
 package org.bukkit.craftbukkit.block.impl;
 
+import org.jetbrains.annotations.NotNull;
+
+
 public final class CraftBed extends org.bukkit.craftbukkit.block.data.CraftBlockData implements org.bukkit.block.data.type.Bed, org.bukkit.block.data.Directional {
 
     public CraftBed() {
@@ -19,7 +22,7 @@ public final class CraftBed extends org.bukkit.craftbukkit.block.data.CraftBlock
     private static final net.minecraft.world.level.block.state.properties.BooleanProperty OCCUPIED = getBoolean(net.minecraft.world.level.block.BedBlock.class, "occupied");
 
     @Override
-    public org.bukkit.block.data.type.Bed.Part getPart() {
+    public org.bukkit.block.data.type.Bed.@NotNull Part getPart() {
         return get(CraftBed.PART, org.bukkit.block.data.type.Bed.Part.class);
     }
 
@@ -38,7 +41,7 @@ public final class CraftBed extends org.bukkit.craftbukkit.block.data.CraftBlock
     private static final net.minecraft.world.level.block.state.properties.EnumProperty<?> FACING = getEnum(net.minecraft.world.level.block.BedBlock.class, "facing");
 
     @Override
-    public org.bukkit.block.BlockFace getFacing() {
+    public org.bukkit.block.@NotNull BlockFace getFacing() {
         return get(CraftBed.FACING, org.bukkit.block.BlockFace.class);
     }
 
@@ -48,7 +51,7 @@ public final class CraftBed extends org.bukkit.craftbukkit.block.data.CraftBlock
     }
 
     @Override
-    public java.util.Set<org.bukkit.block.BlockFace> getFaces() {
+    public java.util.@NotNull Set<org.bukkit.block.BlockFace> getFaces() {
         return getValues(CraftBed.FACING, org.bukkit.block.BlockFace.class);
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftBeehive.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftBeehive.java
index 5569c0bd2ff3c58ebb5e620d1c70e1dfbb028cc2..7bf27cd9e9f83b27cc93b81537635ab45e8aa0fe 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftBeehive.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftBeehive.java
@@ -3,6 +3,9 @@
  */
 package org.bukkit.craftbukkit.block.impl;
 
+import org.jetbrains.annotations.NotNull;
+
+
 public final class CraftBeehive extends org.bukkit.craftbukkit.block.data.CraftBlockData implements org.bukkit.block.data.type.Beehive, org.bukkit.block.data.Directional {
 
     public CraftBeehive() {
@@ -37,7 +40,7 @@ public final class CraftBeehive extends org.bukkit.craftbukkit.block.data.CraftB
     private static final net.minecraft.world.level.block.state.properties.EnumProperty<?> FACING = getEnum(net.minecraft.world.level.block.BeehiveBlock.class, "facing");
 
     @Override
-    public org.bukkit.block.BlockFace getFacing() {
+    public org.bukkit.block.@NotNull BlockFace getFacing() {
         return get(CraftBeehive.FACING, org.bukkit.block.BlockFace.class);
     }
 
@@ -47,7 +50,7 @@ public final class CraftBeehive extends org.bukkit.craftbukkit.block.data.CraftB
     }
 
     @Override
-    public java.util.Set<org.bukkit.block.BlockFace> getFaces() {
+    public java.util.@NotNull Set<org.bukkit.block.BlockFace> getFaces() {
         return getValues(CraftBeehive.FACING, org.bukkit.block.BlockFace.class);
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftBell.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftBell.java
index 0fc2927fab848fcb1ef20bab5b50d178f512a922..cdd12aca33065e3233dffa39f6b987feb382dd9d 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftBell.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftBell.java
@@ -3,6 +3,9 @@
  */
 package org.bukkit.craftbukkit.block.impl;
 
+import org.jetbrains.annotations.NotNull;
+
+
 public final class CraftBell extends org.bukkit.craftbukkit.block.data.CraftBlockData implements org.bukkit.block.data.type.Bell, org.bukkit.block.data.Directional, org.bukkit.block.data.Powerable {
 
     public CraftBell() {
@@ -18,7 +21,7 @@ public final class CraftBell extends org.bukkit.craftbukkit.block.data.CraftBloc
     private static final net.minecraft.world.level.block.state.properties.EnumProperty<?> ATTACHMENT = getEnum(net.minecraft.world.level.block.BellBlock.class, "attachment");
 
     @Override
-    public org.bukkit.block.data.type.Bell.Attachment getAttachment() {
+    public org.bukkit.block.data.type.Bell.@NotNull Attachment getAttachment() {
         return get(CraftBell.ATTACHMENT, org.bukkit.block.data.type.Bell.Attachment.class);
     }
 
@@ -32,7 +35,7 @@ public final class CraftBell extends org.bukkit.craftbukkit.block.data.CraftBloc
     private static final net.minecraft.world.level.block.state.properties.EnumProperty<?> FACING = getEnum(net.minecraft.world.level.block.BellBlock.class, "facing");
 
     @Override
-    public org.bukkit.block.BlockFace getFacing() {
+    public org.bukkit.block.@NotNull BlockFace getFacing() {
         return get(CraftBell.FACING, org.bukkit.block.BlockFace.class);
     }
 
@@ -42,7 +45,7 @@ public final class CraftBell extends org.bukkit.craftbukkit.block.data.CraftBloc
     }
 
     @Override
-    public java.util.Set<org.bukkit.block.BlockFace> getFaces() {
+    public java.util.@NotNull Set<org.bukkit.block.BlockFace> getFaces() {
         return getValues(CraftBell.FACING, org.bukkit.block.BlockFace.class);
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftBigDripleaf.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftBigDripleaf.java
index ed2654a2aff734885d2f8b768d93dfa2e838204a..b0321f8d70d027428107669d318bdc3c2d9d09ba 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftBigDripleaf.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftBigDripleaf.java
@@ -3,6 +3,9 @@
  */
 package org.bukkit.craftbukkit.block.impl;
 
+import org.jetbrains.annotations.NotNull;
+
+
 public final class CraftBigDripleaf extends org.bukkit.craftbukkit.block.data.CraftBlockData implements org.bukkit.block.data.type.BigDripleaf, org.bukkit.block.data.type.Dripleaf, org.bukkit.block.data.Directional, org.bukkit.block.data.Waterlogged {
 
     public CraftBigDripleaf() {
@@ -18,7 +21,7 @@ public final class CraftBigDripleaf extends org.bukkit.craftbukkit.block.data.Cr
     private static final net.minecraft.world.level.block.state.properties.EnumProperty<?> TILT = getEnum(net.minecraft.world.level.block.BigDripleafBlock.class, "tilt");
 
     @Override
-    public Tilt getTilt() {
+    public @NotNull Tilt getTilt() {
         return get(CraftBigDripleaf.TILT, org.bukkit.block.data.type.BigDripleaf.Tilt.class);
     }
 
@@ -32,7 +35,7 @@ public final class CraftBigDripleaf extends org.bukkit.craftbukkit.block.data.Cr
     private static final net.minecraft.world.level.block.state.properties.EnumProperty<?> FACING = getEnum(net.minecraft.world.level.block.BigDripleafBlock.class, "facing");
 
     @Override
-    public org.bukkit.block.BlockFace getFacing() {
+    public org.bukkit.block.@NotNull BlockFace getFacing() {
         return get(CraftBigDripleaf.FACING, org.bukkit.block.BlockFace.class);
     }
 
@@ -42,7 +45,7 @@ public final class CraftBigDripleaf extends org.bukkit.craftbukkit.block.data.Cr
     }
 
     @Override
-    public java.util.Set<org.bukkit.block.BlockFace> getFaces() {
+    public java.util.@NotNull Set<org.bukkit.block.BlockFace> getFaces() {
         return getValues(CraftBigDripleaf.FACING, org.bukkit.block.BlockFace.class);
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftBigDripleafStem.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftBigDripleafStem.java
index 1db7959d600e1b4f0d705eb5c3e55ad9233258d1..e60bd64c7f609b932363055418410772c8a7e17f 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftBigDripleafStem.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftBigDripleafStem.java
@@ -3,6 +3,9 @@
  */
 package org.bukkit.craftbukkit.block.impl;
 
+import org.jetbrains.annotations.NotNull;
+
+
 public final class CraftBigDripleafStem extends org.bukkit.craftbukkit.block.data.CraftBlockData implements org.bukkit.block.data.type.Dripleaf, org.bukkit.block.data.Directional, org.bukkit.block.data.Waterlogged {
 
     public CraftBigDripleafStem() {
@@ -18,7 +21,7 @@ public final class CraftBigDripleafStem extends org.bukkit.craftbukkit.block.dat
     private static final net.minecraft.world.level.block.state.properties.EnumProperty<?> FACING = getEnum(net.minecraft.world.level.block.BigDripleafStemBlock.class, "facing");
 
     @Override
-    public org.bukkit.block.BlockFace getFacing() {
+    public org.bukkit.block.@NotNull BlockFace getFacing() {
         return get(CraftBigDripleafStem.FACING, org.bukkit.block.BlockFace.class);
     }
 
@@ -28,7 +31,7 @@ public final class CraftBigDripleafStem extends org.bukkit.craftbukkit.block.dat
     }
 
     @Override
-    public java.util.Set<org.bukkit.block.BlockFace> getFaces() {
+    public java.util.@NotNull Set<org.bukkit.block.BlockFace> getFaces() {
         return getValues(CraftBigDripleafStem.FACING, org.bukkit.block.BlockFace.class);
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftBlastFurnace.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftBlastFurnace.java
index dd154a95703a8146eaaa04ede04a1f51451e8080..a813fa669e7017af25d7af2412ee03027515ca71 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftBlastFurnace.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftBlastFurnace.java
@@ -3,6 +3,9 @@
  */
 package org.bukkit.craftbukkit.block.impl;
 
+import org.jetbrains.annotations.NotNull;
+
+
 public final class CraftBlastFurnace extends org.bukkit.craftbukkit.block.data.CraftBlockData implements org.bukkit.block.data.type.Furnace, org.bukkit.block.data.Directional, org.bukkit.block.data.Lightable {
 
     public CraftBlastFurnace() {
@@ -18,7 +21,7 @@ public final class CraftBlastFurnace extends org.bukkit.craftbukkit.block.data.C
     private static final net.minecraft.world.level.block.state.properties.EnumProperty<?> FACING = getEnum(net.minecraft.world.level.block.BlastFurnaceBlock.class, "facing");
 
     @Override
-    public org.bukkit.block.BlockFace getFacing() {
+    public org.bukkit.block.@NotNull BlockFace getFacing() {
         return get(CraftBlastFurnace.FACING, org.bukkit.block.BlockFace.class);
     }
 
@@ -28,7 +31,7 @@ public final class CraftBlastFurnace extends org.bukkit.craftbukkit.block.data.C
     }
 
     @Override
-    public java.util.Set<org.bukkit.block.BlockFace> getFaces() {
+    public java.util.@NotNull Set<org.bukkit.block.BlockFace> getFaces() {
         return getValues(CraftBlastFurnace.FACING, org.bukkit.block.BlockFace.class);
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftBrewingStand.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftBrewingStand.java
index a420b7fb2e2d5ed23cf7adf030b8510f4fefa896..e8360f79b0cc2c146474c873c91b57cce67c1009 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftBrewingStand.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftBrewingStand.java
@@ -3,6 +3,9 @@
  */
 package org.bukkit.craftbukkit.block.impl;
 
+import org.jetbrains.annotations.NotNull;
+
+
 public final class CraftBrewingStand extends org.bukkit.craftbukkit.block.data.CraftBlockData implements org.bukkit.block.data.type.BrewingStand {
 
     public CraftBrewingStand() {
@@ -30,7 +33,7 @@ public final class CraftBrewingStand extends org.bukkit.craftbukkit.block.data.C
     }
 
     @Override
-    public java.util.Set<Integer> getBottles() {
+    public java.util.@NotNull Set<Integer> getBottles() {
         com.google.common.collect.ImmutableSet.Builder<Integer> bottles = com.google.common.collect.ImmutableSet.builder();
 
         for (int index = 0; index < this.getMaximumBottles(); index++) {
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftButtonAbstract.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftButtonAbstract.java
index 8a47e5e660e971243bcb371fca495c4905898a99..4391e7a4f481b716d21fde2439c8e888a9de5f54 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftButtonAbstract.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftButtonAbstract.java
@@ -3,6 +3,9 @@
  */
 package org.bukkit.craftbukkit.block.impl;
 
+import org.jetbrains.annotations.NotNull;
+
+
 public final class CraftButtonAbstract extends org.bukkit.craftbukkit.block.data.CraftBlockData implements org.bukkit.block.data.type.Switch, org.bukkit.block.data.Directional, org.bukkit.block.data.FaceAttachable, org.bukkit.block.data.Powerable {
 
     public CraftButtonAbstract() {
@@ -18,7 +21,7 @@ public final class CraftButtonAbstract extends org.bukkit.craftbukkit.block.data
     private static final net.minecraft.world.level.block.state.properties.EnumProperty<?> FACE = getEnum(net.minecraft.world.level.block.ButtonBlock.class, "face");
 
     @Override
-    public org.bukkit.block.data.type.Switch.Face getFace() {
+    public org.bukkit.block.data.type.Switch.@NotNull Face getFace() {
         return get(CraftButtonAbstract.FACE, org.bukkit.block.data.type.Switch.Face.class);
     }
 
@@ -32,7 +35,7 @@ public final class CraftButtonAbstract extends org.bukkit.craftbukkit.block.data
     private static final net.minecraft.world.level.block.state.properties.EnumProperty<?> FACING = getEnum(net.minecraft.world.level.block.ButtonBlock.class, "facing");
 
     @Override
-    public org.bukkit.block.BlockFace getFacing() {
+    public org.bukkit.block.@NotNull BlockFace getFacing() {
         return get(CraftButtonAbstract.FACING, org.bukkit.block.BlockFace.class);
     }
 
@@ -42,7 +45,7 @@ public final class CraftButtonAbstract extends org.bukkit.craftbukkit.block.data
     }
 
     @Override
-    public java.util.Set<org.bukkit.block.BlockFace> getFaces() {
+    public java.util.@NotNull Set<org.bukkit.block.BlockFace> getFaces() {
         return getValues(CraftButtonAbstract.FACING, org.bukkit.block.BlockFace.class);
     }
 
@@ -51,7 +54,7 @@ public final class CraftButtonAbstract extends org.bukkit.craftbukkit.block.data
     private static final net.minecraft.world.level.block.state.properties.EnumProperty<?> ATTACH_FACE = getEnum(net.minecraft.world.level.block.ButtonBlock.class, "face");
 
     @Override
-    public org.bukkit.block.data.FaceAttachable.AttachedFace getAttachedFace() {
+    public org.bukkit.block.data.FaceAttachable.@NotNull AttachedFace getAttachedFace() {
         return get(CraftButtonAbstract.ATTACH_FACE, org.bukkit.block.data.FaceAttachable.AttachedFace.class);
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftCampfire.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftCampfire.java
index d519282401bda6ecfcb0c2a28f825d483bdb8dc9..42cab82602b39cf0b6d8199f41a96cb9bbed1b9e 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftCampfire.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftCampfire.java
@@ -3,6 +3,9 @@
  */
 package org.bukkit.craftbukkit.block.impl;
 
+import org.jetbrains.annotations.NotNull;
+
+
 public final class CraftCampfire extends org.bukkit.craftbukkit.block.data.CraftBlockData implements org.bukkit.block.data.type.Campfire, org.bukkit.block.data.Directional, org.bukkit.block.data.Lightable, org.bukkit.block.data.Waterlogged {
 
     public CraftCampfire() {
@@ -32,7 +35,7 @@ public final class CraftCampfire extends org.bukkit.craftbukkit.block.data.Craft
     private static final net.minecraft.world.level.block.state.properties.EnumProperty<?> FACING = getEnum(net.minecraft.world.level.block.CampfireBlock.class, "facing");
 
     @Override
-    public org.bukkit.block.BlockFace getFacing() {
+    public org.bukkit.block.@NotNull BlockFace getFacing() {
         return get(CraftCampfire.FACING, org.bukkit.block.BlockFace.class);
     }
 
@@ -42,7 +45,7 @@ public final class CraftCampfire extends org.bukkit.craftbukkit.block.data.Craft
     }
 
     @Override
-    public java.util.Set<org.bukkit.block.BlockFace> getFaces() {
+    public java.util.@NotNull Set<org.bukkit.block.BlockFace> getFaces() {
         return getValues(CraftCampfire.FACING, org.bukkit.block.BlockFace.class);
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftChain.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftChain.java
index d6d52419296106a53ae81ef889e894d52f4620f3..2d5f5c7812598ce5f622d597b4708e70b9c2d775 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftChain.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftChain.java
@@ -3,6 +3,9 @@
  */
 package org.bukkit.craftbukkit.block.impl;
 
+import org.jetbrains.annotations.NotNull;
+
+
 public final class CraftChain extends org.bukkit.craftbukkit.block.data.CraftBlockData implements org.bukkit.block.data.type.Chain, org.bukkit.block.data.Orientable, org.bukkit.block.data.Waterlogged {
 
     public CraftChain() {
@@ -18,7 +21,7 @@ public final class CraftChain extends org.bukkit.craftbukkit.block.data.CraftBlo
     private static final net.minecraft.world.level.block.state.properties.EnumProperty<?> AXIS = getEnum(net.minecraft.world.level.block.ChainBlock.class, "axis");
 
     @Override
-    public org.bukkit.Axis getAxis() {
+    public org.bukkit.@NotNull Axis getAxis() {
         return get(CraftChain.AXIS, org.bukkit.Axis.class);
     }
 
@@ -28,7 +31,7 @@ public final class CraftChain extends org.bukkit.craftbukkit.block.data.CraftBlo
     }
 
     @Override
-    public java.util.Set<org.bukkit.Axis> getAxes() {
+    public java.util.@NotNull Set<org.bukkit.Axis> getAxes() {
         return getValues(CraftChain.AXIS, org.bukkit.Axis.class);
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftChest.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftChest.java
index 4d94368b73f6b8fd53decc2d6b21bcd2dd71495e..35a797987f10354a52af7797237065571a2d437c 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftChest.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftChest.java
@@ -3,6 +3,9 @@
  */
 package org.bukkit.craftbukkit.block.impl;
 
+import org.jetbrains.annotations.NotNull;
+
+
 public final class CraftChest extends org.bukkit.craftbukkit.block.data.CraftBlockData implements org.bukkit.block.data.type.Chest, org.bukkit.block.data.Directional, org.bukkit.block.data.Waterlogged {
 
     public CraftChest() {
@@ -18,7 +21,7 @@ public final class CraftChest extends org.bukkit.craftbukkit.block.data.CraftBlo
     private static final net.minecraft.world.level.block.state.properties.EnumProperty<?> TYPE = getEnum(net.minecraft.world.level.block.ChestBlock.class, "type");
 
     @Override
-    public org.bukkit.block.data.type.Chest.Type getType() {
+    public org.bukkit.block.data.type.Chest.@NotNull Type getType() {
         return get(CraftChest.TYPE, org.bukkit.block.data.type.Chest.Type.class);
     }
 
@@ -32,7 +35,7 @@ public final class CraftChest extends org.bukkit.craftbukkit.block.data.CraftBlo
     private static final net.minecraft.world.level.block.state.properties.EnumProperty<?> FACING = getEnum(net.minecraft.world.level.block.ChestBlock.class, "facing");
 
     @Override
-    public org.bukkit.block.BlockFace getFacing() {
+    public org.bukkit.block.@NotNull BlockFace getFacing() {
         return get(CraftChest.FACING, org.bukkit.block.BlockFace.class);
     }
 
@@ -42,7 +45,7 @@ public final class CraftChest extends org.bukkit.craftbukkit.block.data.CraftBlo
     }
 
     @Override
-    public java.util.Set<org.bukkit.block.BlockFace> getFaces() {
+    public java.util.@NotNull Set<org.bukkit.block.BlockFace> getFaces() {
         return getValues(CraftChest.FACING, org.bukkit.block.BlockFace.class);
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftChestTrapped.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftChestTrapped.java
index 5d3b63e5e12d37978e93abef4fb241c890c27be1..5f3aeb5eb72ed5eda0455aa2f426b26b9875e5a7 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftChestTrapped.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftChestTrapped.java
@@ -3,6 +3,9 @@
  */
 package org.bukkit.craftbukkit.block.impl;
 
+import org.jetbrains.annotations.NotNull;
+
+
 public final class CraftChestTrapped extends org.bukkit.craftbukkit.block.data.CraftBlockData implements org.bukkit.block.data.type.Chest, org.bukkit.block.data.Directional, org.bukkit.block.data.Waterlogged {
 
     public CraftChestTrapped() {
@@ -18,7 +21,7 @@ public final class CraftChestTrapped extends org.bukkit.craftbukkit.block.data.C
     private static final net.minecraft.world.level.block.state.properties.EnumProperty<?> TYPE = getEnum(net.minecraft.world.level.block.TrappedChestBlock.class, "type");
 
     @Override
-    public org.bukkit.block.data.type.Chest.Type getType() {
+    public org.bukkit.block.data.type.Chest.@NotNull Type getType() {
         return get(CraftChestTrapped.TYPE, org.bukkit.block.data.type.Chest.Type.class);
     }
 
@@ -32,7 +35,7 @@ public final class CraftChestTrapped extends org.bukkit.craftbukkit.block.data.C
     private static final net.minecraft.world.level.block.state.properties.EnumProperty<?> FACING = getEnum(net.minecraft.world.level.block.TrappedChestBlock.class, "facing");
 
     @Override
-    public org.bukkit.block.BlockFace getFacing() {
+    public org.bukkit.block.@NotNull BlockFace getFacing() {
         return get(CraftChestTrapped.FACING, org.bukkit.block.BlockFace.class);
     }
 
@@ -42,7 +45,7 @@ public final class CraftChestTrapped extends org.bukkit.craftbukkit.block.data.C
     }
 
     @Override
-    public java.util.Set<org.bukkit.block.BlockFace> getFaces() {
+    public java.util.@NotNull Set<org.bukkit.block.BlockFace> getFaces() {
         return getValues(CraftChestTrapped.FACING, org.bukkit.block.BlockFace.class);
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftChorusFruit.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftChorusFruit.java
index 96c6f4e8fbedc4d93a90820822724c351b776ae8..1f6b845fcc587ae4881d40f5671b0d471a2f1b7b 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftChorusFruit.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftChorusFruit.java
@@ -3,6 +3,9 @@
  */
 package org.bukkit.craftbukkit.block.impl;
 
+import org.jetbrains.annotations.NotNull;
+
+
 public final class CraftChorusFruit extends org.bukkit.craftbukkit.block.data.CraftBlockData implements org.bukkit.block.data.MultipleFacing {
 
     public CraftChorusFruit() {
@@ -20,7 +23,7 @@ public final class CraftChorusFruit extends org.bukkit.craftbukkit.block.data.Cr
     };
 
     @Override
-    public boolean hasFace(org.bukkit.block.BlockFace face) {
+    public boolean hasFace(org.bukkit.block.@NotNull BlockFace face) {
         net.minecraft.world.level.block.state.properties.BooleanProperty state = CraftChorusFruit.FACES[face.ordinal()];
         if (state == null) {
             throw new IllegalArgumentException("Non-allowed face " + face + ". Check MultipleFacing.getAllowedFaces.");
@@ -29,7 +32,7 @@ public final class CraftChorusFruit extends org.bukkit.craftbukkit.block.data.Cr
     }
 
     @Override
-    public void setFace(org.bukkit.block.BlockFace face, boolean has) {
+    public void setFace(org.bukkit.block.@NotNull BlockFace face, boolean has) {
         net.minecraft.world.level.block.state.properties.BooleanProperty state = CraftChorusFruit.FACES[face.ordinal()];
         if (state == null) {
             throw new IllegalArgumentException("Non-allowed face " + face + ". Check MultipleFacing.getAllowedFaces.");
@@ -38,7 +41,7 @@ public final class CraftChorusFruit extends org.bukkit.craftbukkit.block.data.Cr
     }
 
     @Override
-    public java.util.Set<org.bukkit.block.BlockFace> getFaces() {
+    public java.util.@NotNull Set<org.bukkit.block.BlockFace> getFaces() {
         com.google.common.collect.ImmutableSet.Builder<org.bukkit.block.BlockFace> faces = com.google.common.collect.ImmutableSet.builder();
 
         for (int i = 0; i < FACES.length; i++) {
@@ -51,7 +54,7 @@ public final class CraftChorusFruit extends org.bukkit.craftbukkit.block.data.Cr
     }
 
     @Override
-    public java.util.Set<org.bukkit.block.BlockFace> getAllowedFaces() {
+    public java.util.@NotNull Set<org.bukkit.block.BlockFace> getAllowedFaces() {
         com.google.common.collect.ImmutableSet.Builder<org.bukkit.block.BlockFace> faces = com.google.common.collect.ImmutableSet.builder();
 
         for (int i = 0; i < FACES.length; i++) {
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftCobbleWall.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftCobbleWall.java
index a2bb0e374ab0187b6686b7206e9c9d72d117e580..adf3bfd75b52ad07033219bc469457809332b637 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftCobbleWall.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftCobbleWall.java
@@ -3,6 +3,9 @@
  */
 package org.bukkit.craftbukkit.block.impl;
 
+import org.jetbrains.annotations.NotNull;
+
+
 public final class CraftCobbleWall extends org.bukkit.craftbukkit.block.data.CraftBlockData implements org.bukkit.block.data.type.Wall, org.bukkit.block.data.Waterlogged {
 
     public CraftCobbleWall() {
@@ -31,12 +34,12 @@ public final class CraftCobbleWall extends org.bukkit.craftbukkit.block.data.Cra
     }
 
     @Override
-    public org.bukkit.block.data.type.Wall.Height getHeight(org.bukkit.block.BlockFace face) {
+    public org.bukkit.block.data.type.Wall.@NotNull Height getHeight(org.bukkit.block.@NotNull BlockFace face) {
         return get(CraftCobbleWall.HEIGHTS[face.ordinal()], org.bukkit.block.data.type.Wall.Height.class);
     }
 
     @Override
-    public void setHeight(org.bukkit.block.BlockFace face, org.bukkit.block.data.type.Wall.Height height) {
+    public void setHeight(org.bukkit.block.@NotNull BlockFace face, org.bukkit.block.data.type.Wall.Height height) {
         set(CraftCobbleWall.HEIGHTS[face.ordinal()], height);
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftCocoa.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftCocoa.java
index b21b996598755d99de7ab015d5edd724eb1acad9..29e4775ea9fbc558aebcb8b588111e4682322fb4 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftCocoa.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftCocoa.java
@@ -3,6 +3,9 @@
  */
 package org.bukkit.craftbukkit.block.impl;
 
+import org.jetbrains.annotations.NotNull;
+
+
 public final class CraftCocoa extends org.bukkit.craftbukkit.block.data.CraftBlockData implements org.bukkit.block.data.type.Cocoa, org.bukkit.block.data.Ageable, org.bukkit.block.data.Directional {
 
     public CraftCocoa() {
@@ -37,7 +40,7 @@ public final class CraftCocoa extends org.bukkit.craftbukkit.block.data.CraftBlo
     private static final net.minecraft.world.level.block.state.properties.EnumProperty<?> FACING = getEnum(net.minecraft.world.level.block.CocoaBlock.class, "facing");
 
     @Override
-    public org.bukkit.block.BlockFace getFacing() {
+    public org.bukkit.block.@NotNull BlockFace getFacing() {
         return get(CraftCocoa.FACING, org.bukkit.block.BlockFace.class);
     }
 
@@ -47,7 +50,7 @@ public final class CraftCocoa extends org.bukkit.craftbukkit.block.data.CraftBlo
     }
 
     @Override
-    public java.util.Set<org.bukkit.block.BlockFace> getFaces() {
+    public java.util.@NotNull Set<org.bukkit.block.BlockFace> getFaces() {
         return getValues(CraftCocoa.FACING, org.bukkit.block.BlockFace.class);
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftCommand.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftCommand.java
index fe930245d5d78b7accb6710a6c69d922ddb670f8..1dae3b2af59cef7e83f79ee5b9eb40844cead28f 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftCommand.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftCommand.java
@@ -3,6 +3,9 @@
  */
 package org.bukkit.craftbukkit.block.impl;
 
+import org.jetbrains.annotations.NotNull;
+
+
 public final class CraftCommand extends org.bukkit.craftbukkit.block.data.CraftBlockData implements org.bukkit.block.data.type.CommandBlock, org.bukkit.block.data.Directional {
 
     public CraftCommand() {
@@ -32,7 +35,7 @@ public final class CraftCommand extends org.bukkit.craftbukkit.block.data.CraftB
     private static final net.minecraft.world.level.block.state.properties.EnumProperty<?> FACING = getEnum(net.minecraft.world.level.block.CommandBlock.class, "facing");
 
     @Override
-    public org.bukkit.block.BlockFace getFacing() {
+    public org.bukkit.block.@NotNull BlockFace getFacing() {
         return get(CraftCommand.FACING, org.bukkit.block.BlockFace.class);
     }
 
@@ -42,7 +45,7 @@ public final class CraftCommand extends org.bukkit.craftbukkit.block.data.CraftB
     }
 
     @Override
-    public java.util.Set<org.bukkit.block.BlockFace> getFaces() {
+    public java.util.@NotNull Set<org.bukkit.block.BlockFace> getFaces() {
         return getValues(CraftCommand.FACING, org.bukkit.block.BlockFace.class);
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftCoralFanWall.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftCoralFanWall.java
index 7604a104e010c0cf2f941488ea087b22c4e2d41c..893a4525909c66d800c7af2c75773e7b69ca5f98 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftCoralFanWall.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftCoralFanWall.java
@@ -3,6 +3,9 @@
  */
 package org.bukkit.craftbukkit.block.impl;
 
+import org.jetbrains.annotations.NotNull;
+
+
 public final class CraftCoralFanWall extends org.bukkit.craftbukkit.block.data.CraftBlockData implements org.bukkit.block.data.type.CoralWallFan, org.bukkit.block.data.Directional, org.bukkit.block.data.Waterlogged {
 
     public CraftCoralFanWall() {
@@ -18,7 +21,7 @@ public final class CraftCoralFanWall extends org.bukkit.craftbukkit.block.data.C
     private static final net.minecraft.world.level.block.state.properties.EnumProperty<?> FACING = getEnum(net.minecraft.world.level.block.CoralWallFanBlock.class, "facing");
 
     @Override
-    public org.bukkit.block.BlockFace getFacing() {
+    public org.bukkit.block.@NotNull BlockFace getFacing() {
         return get(CraftCoralFanWall.FACING, org.bukkit.block.BlockFace.class);
     }
 
@@ -28,7 +31,7 @@ public final class CraftCoralFanWall extends org.bukkit.craftbukkit.block.data.C
     }
 
     @Override
-    public java.util.Set<org.bukkit.block.BlockFace> getFaces() {
+    public java.util.@NotNull Set<org.bukkit.block.BlockFace> getFaces() {
         return getValues(CraftCoralFanWall.FACING, org.bukkit.block.BlockFace.class);
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftCoralFanWallAbstract.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftCoralFanWallAbstract.java
index 22fd5f58348363a2f9fd2d84384a985671694935..7b5b52c296ca06c9bed4f76177074f47749f67f3 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftCoralFanWallAbstract.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftCoralFanWallAbstract.java
@@ -3,6 +3,9 @@
  */
 package org.bukkit.craftbukkit.block.impl;
 
+import org.jetbrains.annotations.NotNull;
+
+
 public final class CraftCoralFanWallAbstract extends org.bukkit.craftbukkit.block.data.CraftBlockData implements org.bukkit.block.data.type.CoralWallFan, org.bukkit.block.data.Directional, org.bukkit.block.data.Waterlogged {
 
     public CraftCoralFanWallAbstract() {
@@ -18,7 +21,7 @@ public final class CraftCoralFanWallAbstract extends org.bukkit.craftbukkit.bloc
     private static final net.minecraft.world.level.block.state.properties.EnumProperty<?> FACING = getEnum(net.minecraft.world.level.block.BaseCoralWallFanBlock.class, "facing");
 
     @Override
-    public org.bukkit.block.BlockFace getFacing() {
+    public org.bukkit.block.@NotNull BlockFace getFacing() {
         return get(CraftCoralFanWallAbstract.FACING, org.bukkit.block.BlockFace.class);
     }
 
@@ -28,7 +31,7 @@ public final class CraftCoralFanWallAbstract extends org.bukkit.craftbukkit.bloc
     }
 
     @Override
-    public java.util.Set<org.bukkit.block.BlockFace> getFaces() {
+    public java.util.@NotNull Set<org.bukkit.block.BlockFace> getFaces() {
         return getValues(CraftCoralFanWallAbstract.FACING, org.bukkit.block.BlockFace.class);
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftDispenser.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftDispenser.java
index bef5a2507af1749f2abc8d914f49bb64af408b47..c1fdf1260fe3abfe85b104400345c1883ead4047 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftDispenser.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftDispenser.java
@@ -3,6 +3,9 @@
  */
 package org.bukkit.craftbukkit.block.impl;
 
+import org.jetbrains.annotations.NotNull;
+
+
 public final class CraftDispenser extends org.bukkit.craftbukkit.block.data.CraftBlockData implements org.bukkit.block.data.type.Dispenser, org.bukkit.block.data.Directional {
 
     public CraftDispenser() {
@@ -32,7 +35,7 @@ public final class CraftDispenser extends org.bukkit.craftbukkit.block.data.Craf
     private static final net.minecraft.world.level.block.state.properties.EnumProperty<?> FACING = getEnum(net.minecraft.world.level.block.DispenserBlock.class, "facing");
 
     @Override
-    public org.bukkit.block.BlockFace getFacing() {
+    public org.bukkit.block.@NotNull BlockFace getFacing() {
         return get(CraftDispenser.FACING, org.bukkit.block.BlockFace.class);
     }
 
@@ -42,7 +45,7 @@ public final class CraftDispenser extends org.bukkit.craftbukkit.block.data.Craf
     }
 
     @Override
-    public java.util.Set<org.bukkit.block.BlockFace> getFaces() {
+    public java.util.@NotNull Set<org.bukkit.block.BlockFace> getFaces() {
         return getValues(CraftDispenser.FACING, org.bukkit.block.BlockFace.class);
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftDoor.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftDoor.java
index 0d8c88b2e2f9251490b3db6306f1c1832cf3e9f3..8042cea84bc656fffc22fc4975d9b156790eb727 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftDoor.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftDoor.java
@@ -3,6 +3,9 @@
  */
 package org.bukkit.craftbukkit.block.impl;
 
+import org.jetbrains.annotations.NotNull;
+
+
 public final class CraftDoor extends org.bukkit.craftbukkit.block.data.CraftBlockData implements org.bukkit.block.data.type.Door, org.bukkit.block.data.Bisected, org.bukkit.block.data.Directional, org.bukkit.block.data.Openable, org.bukkit.block.data.Powerable {
 
     public CraftDoor() {
@@ -18,7 +21,7 @@ public final class CraftDoor extends org.bukkit.craftbukkit.block.data.CraftBloc
     private static final net.minecraft.world.level.block.state.properties.EnumProperty<?> HINGE = getEnum(net.minecraft.world.level.block.DoorBlock.class, "hinge");
 
     @Override
-    public org.bukkit.block.data.type.Door.Hinge getHinge() {
+    public org.bukkit.block.data.type.Door.@NotNull Hinge getHinge() {
         return get(CraftDoor.HINGE, org.bukkit.block.data.type.Door.Hinge.class);
     }
 
@@ -32,7 +35,7 @@ public final class CraftDoor extends org.bukkit.craftbukkit.block.data.CraftBloc
     private static final net.minecraft.world.level.block.state.properties.EnumProperty<?> HALF = getEnum(net.minecraft.world.level.block.DoorBlock.class, "half");
 
     @Override
-    public org.bukkit.block.data.Bisected.Half getHalf() {
+    public org.bukkit.block.data.Bisected.@NotNull Half getHalf() {
         return get(CraftDoor.HALF, org.bukkit.block.data.Bisected.Half.class);
     }
 
@@ -46,7 +49,7 @@ public final class CraftDoor extends org.bukkit.craftbukkit.block.data.CraftBloc
     private static final net.minecraft.world.level.block.state.properties.EnumProperty<?> FACING = getEnum(net.minecraft.world.level.block.DoorBlock.class, "facing");
 
     @Override
-    public org.bukkit.block.BlockFace getFacing() {
+    public org.bukkit.block.@NotNull BlockFace getFacing() {
         return get(CraftDoor.FACING, org.bukkit.block.BlockFace.class);
     }
 
@@ -56,7 +59,7 @@ public final class CraftDoor extends org.bukkit.craftbukkit.block.data.CraftBloc
     }
 
     @Override
-    public java.util.Set<org.bukkit.block.BlockFace> getFaces() {
+    public java.util.@NotNull Set<org.bukkit.block.BlockFace> getFaces() {
         return getValues(CraftDoor.FACING, org.bukkit.block.BlockFace.class);
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftDropper.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftDropper.java
index 05ebb290150cfd40b4018a2da675a9e3e84bccc9..ab26eee570e48439eed776cf2cd9f282cfecfa04 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftDropper.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftDropper.java
@@ -3,6 +3,9 @@
  */
 package org.bukkit.craftbukkit.block.impl;
 
+import org.jetbrains.annotations.NotNull;
+
+
 public final class CraftDropper extends org.bukkit.craftbukkit.block.data.CraftBlockData implements org.bukkit.block.data.type.Dispenser, org.bukkit.block.data.Directional {
 
     public CraftDropper() {
@@ -32,7 +35,7 @@ public final class CraftDropper extends org.bukkit.craftbukkit.block.data.CraftB
     private static final net.minecraft.world.level.block.state.properties.EnumProperty<?> FACING = getEnum(net.minecraft.world.level.block.DropperBlock.class, "facing");
 
     @Override
-    public org.bukkit.block.BlockFace getFacing() {
+    public org.bukkit.block.@NotNull BlockFace getFacing() {
         return get(CraftDropper.FACING, org.bukkit.block.BlockFace.class);
     }
 
@@ -42,7 +45,7 @@ public final class CraftDropper extends org.bukkit.craftbukkit.block.data.CraftB
     }
 
     @Override
-    public java.util.Set<org.bukkit.block.BlockFace> getFaces() {
+    public java.util.@NotNull Set<org.bukkit.block.BlockFace> getFaces() {
         return getValues(CraftDropper.FACING, org.bukkit.block.BlockFace.class);
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftEndRod.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftEndRod.java
index e238ce57703ad338b0b9bc221041424107b3c44d..be24e7b17282aca1625eedff62b25383ae9c5f32 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftEndRod.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftEndRod.java
@@ -3,6 +3,9 @@
  */
 package org.bukkit.craftbukkit.block.impl;
 
+import org.jetbrains.annotations.NotNull;
+
+
 public final class CraftEndRod extends org.bukkit.craftbukkit.block.data.CraftBlockData implements org.bukkit.block.data.Directional {
 
     public CraftEndRod() {
@@ -18,7 +21,7 @@ public final class CraftEndRod extends org.bukkit.craftbukkit.block.data.CraftBl
     private static final net.minecraft.world.level.block.state.properties.EnumProperty<?> FACING = getEnum(net.minecraft.world.level.block.EndRodBlock.class, "facing");
 
     @Override
-    public org.bukkit.block.BlockFace getFacing() {
+    public org.bukkit.block.@NotNull BlockFace getFacing() {
         return get(CraftEndRod.FACING, org.bukkit.block.BlockFace.class);
     }
 
@@ -28,7 +31,7 @@ public final class CraftEndRod extends org.bukkit.craftbukkit.block.data.CraftBl
     }
 
     @Override
-    public java.util.Set<org.bukkit.block.BlockFace> getFaces() {
+    public java.util.@NotNull Set<org.bukkit.block.BlockFace> getFaces() {
         return getValues(CraftEndRod.FACING, org.bukkit.block.BlockFace.class);
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftEnderChest.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftEnderChest.java
index 248417ae380a74a3794bed7a9e5a00592bc8b512..6cfc765c58224d7da71b0800abf273a277e2376c 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftEnderChest.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftEnderChest.java
@@ -3,6 +3,9 @@
  */
 package org.bukkit.craftbukkit.block.impl;
 
+import org.jetbrains.annotations.NotNull;
+
+
 public final class CraftEnderChest extends org.bukkit.craftbukkit.block.data.CraftBlockData implements org.bukkit.block.data.type.EnderChest, org.bukkit.block.data.Directional, org.bukkit.block.data.Waterlogged {
 
     public CraftEnderChest() {
@@ -18,7 +21,7 @@ public final class CraftEnderChest extends org.bukkit.craftbukkit.block.data.Cra
     private static final net.minecraft.world.level.block.state.properties.EnumProperty<?> FACING = getEnum(net.minecraft.world.level.block.EnderChestBlock.class, "facing");
 
     @Override
-    public org.bukkit.block.BlockFace getFacing() {
+    public org.bukkit.block.@NotNull BlockFace getFacing() {
         return get(CraftEnderChest.FACING, org.bukkit.block.BlockFace.class);
     }
 
@@ -28,7 +31,7 @@ public final class CraftEnderChest extends org.bukkit.craftbukkit.block.data.Cra
     }
 
     @Override
-    public java.util.Set<org.bukkit.block.BlockFace> getFaces() {
+    public java.util.@NotNull Set<org.bukkit.block.BlockFace> getFaces() {
         return getValues(CraftEnderChest.FACING, org.bukkit.block.BlockFace.class);
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftEnderPortalFrame.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftEnderPortalFrame.java
index 7bebe815536dd72671c629501a02ba2b8947bf12..be21aa0d88e2b6273d1d1b8aaf8f53f370c762e2 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftEnderPortalFrame.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftEnderPortalFrame.java
@@ -3,6 +3,9 @@
  */
 package org.bukkit.craftbukkit.block.impl;
 
+import org.jetbrains.annotations.NotNull;
+
+
 public final class CraftEnderPortalFrame extends org.bukkit.craftbukkit.block.data.CraftBlockData implements org.bukkit.block.data.type.EndPortalFrame, org.bukkit.block.data.Directional {
 
     public CraftEnderPortalFrame() {
@@ -32,7 +35,7 @@ public final class CraftEnderPortalFrame extends org.bukkit.craftbukkit.block.da
     private static final net.minecraft.world.level.block.state.properties.EnumProperty<?> FACING = getEnum(net.minecraft.world.level.block.EndPortalFrameBlock.class, "facing");
 
     @Override
-    public org.bukkit.block.BlockFace getFacing() {
+    public org.bukkit.block.@NotNull BlockFace getFacing() {
         return get(CraftEnderPortalFrame.FACING, org.bukkit.block.BlockFace.class);
     }
 
@@ -42,7 +45,7 @@ public final class CraftEnderPortalFrame extends org.bukkit.craftbukkit.block.da
     }
 
     @Override
-    public java.util.Set<org.bukkit.block.BlockFace> getFaces() {
+    public java.util.@NotNull Set<org.bukkit.block.BlockFace> getFaces() {
         return getValues(CraftEnderPortalFrame.FACING, org.bukkit.block.BlockFace.class);
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftFence.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftFence.java
index 863ec4d317e05e63bbf094bcf9ed70170978edc1..b8fe3c1df047a9e8d21bee3c24823369ad9a50c9 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftFence.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftFence.java
@@ -3,6 +3,9 @@
  */
 package org.bukkit.craftbukkit.block.impl;
 
+import org.jetbrains.annotations.NotNull;
+
+
 public final class CraftFence extends org.bukkit.craftbukkit.block.data.CraftBlockData implements org.bukkit.block.data.type.Fence, org.bukkit.block.data.MultipleFacing, org.bukkit.block.data.Waterlogged {
 
     public CraftFence() {
@@ -20,7 +23,7 @@ public final class CraftFence extends org.bukkit.craftbukkit.block.data.CraftBlo
     };
 
     @Override
-    public boolean hasFace(org.bukkit.block.BlockFace face) {
+    public boolean hasFace(org.bukkit.block.@NotNull BlockFace face) {
         net.minecraft.world.level.block.state.properties.BooleanProperty state = CraftFence.FACES[face.ordinal()];
         if (state == null) {
             throw new IllegalArgumentException("Non-allowed face " + face + ". Check MultipleFacing.getAllowedFaces.");
@@ -29,7 +32,7 @@ public final class CraftFence extends org.bukkit.craftbukkit.block.data.CraftBlo
     }
 
     @Override
-    public void setFace(org.bukkit.block.BlockFace face, boolean has) {
+    public void setFace(org.bukkit.block.@NotNull BlockFace face, boolean has) {
         net.minecraft.world.level.block.state.properties.BooleanProperty state = CraftFence.FACES[face.ordinal()];
         if (state == null) {
             throw new IllegalArgumentException("Non-allowed face " + face + ". Check MultipleFacing.getAllowedFaces.");
@@ -38,7 +41,7 @@ public final class CraftFence extends org.bukkit.craftbukkit.block.data.CraftBlo
     }
 
     @Override
-    public java.util.Set<org.bukkit.block.BlockFace> getFaces() {
+    public java.util.@NotNull Set<org.bukkit.block.BlockFace> getFaces() {
         com.google.common.collect.ImmutableSet.Builder<org.bukkit.block.BlockFace> faces = com.google.common.collect.ImmutableSet.builder();
 
         for (int i = 0; i < FACES.length; i++) {
@@ -51,7 +54,7 @@ public final class CraftFence extends org.bukkit.craftbukkit.block.data.CraftBlo
     }
 
     @Override
-    public java.util.Set<org.bukkit.block.BlockFace> getAllowedFaces() {
+    public java.util.@NotNull Set<org.bukkit.block.BlockFace> getAllowedFaces() {
         com.google.common.collect.ImmutableSet.Builder<org.bukkit.block.BlockFace> faces = com.google.common.collect.ImmutableSet.builder();
 
         for (int i = 0; i < FACES.length; i++) {
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftFenceGate.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftFenceGate.java
index 6266e54516cc2fefb1e43c5b2f69f5ae3ed2797a..bca98a1ad526738078187506823e03077c778cff 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftFenceGate.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftFenceGate.java
@@ -3,6 +3,9 @@
  */
 package org.bukkit.craftbukkit.block.impl;
 
+import org.jetbrains.annotations.NotNull;
+
+
 public final class CraftFenceGate extends org.bukkit.craftbukkit.block.data.CraftBlockData implements org.bukkit.block.data.type.Gate, org.bukkit.block.data.Directional, org.bukkit.block.data.Openable, org.bukkit.block.data.Powerable {
 
     public CraftFenceGate() {
@@ -32,7 +35,7 @@ public final class CraftFenceGate extends org.bukkit.craftbukkit.block.data.Craf
     private static final net.minecraft.world.level.block.state.properties.EnumProperty<?> FACING = getEnum(net.minecraft.world.level.block.FenceGateBlock.class, "facing");
 
     @Override
-    public org.bukkit.block.BlockFace getFacing() {
+    public org.bukkit.block.@NotNull BlockFace getFacing() {
         return get(CraftFenceGate.FACING, org.bukkit.block.BlockFace.class);
     }
 
@@ -42,7 +45,7 @@ public final class CraftFenceGate extends org.bukkit.craftbukkit.block.data.Craf
     }
 
     @Override
-    public java.util.Set<org.bukkit.block.BlockFace> getFaces() {
+    public java.util.@NotNull Set<org.bukkit.block.BlockFace> getFaces() {
         return getValues(CraftFenceGate.FACING, org.bukkit.block.BlockFace.class);
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftFire.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftFire.java
index 5821aa88ffddcf78a9834a5d5e67cfb279663738..9def551fbecb0520f07f4f758989519d60ec842c 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftFire.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftFire.java
@@ -3,6 +3,9 @@
  */
 package org.bukkit.craftbukkit.block.impl;
 
+import org.jetbrains.annotations.NotNull;
+
+
 public final class CraftFire extends org.bukkit.craftbukkit.block.data.CraftBlockData implements org.bukkit.block.data.type.Fire, org.bukkit.block.data.Ageable, org.bukkit.block.data.MultipleFacing {
 
     public CraftFire() {
@@ -39,7 +42,7 @@ public final class CraftFire extends org.bukkit.craftbukkit.block.data.CraftBloc
     };
 
     @Override
-    public boolean hasFace(org.bukkit.block.BlockFace face) {
+    public boolean hasFace(org.bukkit.block.@NotNull BlockFace face) {
         net.minecraft.world.level.block.state.properties.BooleanProperty state = CraftFire.FACES[face.ordinal()];
         if (state == null) {
             throw new IllegalArgumentException("Non-allowed face " + face + ". Check MultipleFacing.getAllowedFaces.");
@@ -48,7 +51,7 @@ public final class CraftFire extends org.bukkit.craftbukkit.block.data.CraftBloc
     }
 
     @Override
-    public void setFace(org.bukkit.block.BlockFace face, boolean has) {
+    public void setFace(org.bukkit.block.@NotNull BlockFace face, boolean has) {
         net.minecraft.world.level.block.state.properties.BooleanProperty state = CraftFire.FACES[face.ordinal()];
         if (state == null) {
             throw new IllegalArgumentException("Non-allowed face " + face + ". Check MultipleFacing.getAllowedFaces.");
@@ -57,7 +60,7 @@ public final class CraftFire extends org.bukkit.craftbukkit.block.data.CraftBloc
     }
 
     @Override
-    public java.util.Set<org.bukkit.block.BlockFace> getFaces() {
+    public java.util.@NotNull Set<org.bukkit.block.BlockFace> getFaces() {
         com.google.common.collect.ImmutableSet.Builder<org.bukkit.block.BlockFace> faces = com.google.common.collect.ImmutableSet.builder();
 
         for (int i = 0; i < FACES.length; i++) {
@@ -70,7 +73,7 @@ public final class CraftFire extends org.bukkit.craftbukkit.block.data.CraftBloc
     }
 
     @Override
-    public java.util.Set<org.bukkit.block.BlockFace> getAllowedFaces() {
+    public java.util.@NotNull Set<org.bukkit.block.BlockFace> getAllowedFaces() {
         com.google.common.collect.ImmutableSet.Builder<org.bukkit.block.BlockFace> faces = com.google.common.collect.ImmutableSet.builder();
 
         for (int i = 0; i < FACES.length; i++) {
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftFloorSign.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftFloorSign.java
index 3c16fa0134d7299dfeff2c16dd5e257b4432bebc..b66e483ba4e0fd84aa2b3f7480e2da66694bbb46 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftFloorSign.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftFloorSign.java
@@ -3,6 +3,9 @@
  */
 package org.bukkit.craftbukkit.block.impl;
 
+import org.jetbrains.annotations.NotNull;
+
+
 public final class CraftFloorSign extends org.bukkit.craftbukkit.block.data.CraftBlockData implements org.bukkit.block.data.type.Sign, org.bukkit.block.data.Rotatable, org.bukkit.block.data.Waterlogged {
 
     public CraftFloorSign() {
@@ -18,7 +21,7 @@ public final class CraftFloorSign extends org.bukkit.craftbukkit.block.data.Craf
     private static final net.minecraft.world.level.block.state.properties.IntegerProperty ROTATION = getInteger(net.minecraft.world.level.block.StandingSignBlock.class, "rotation");
 
     @Override
-    public org.bukkit.block.BlockFace getRotation() {
+    public org.bukkit.block.@NotNull BlockFace getRotation() {
         int data = get(CraftFloorSign.ROTATION);
         switch (data) {
             case 0x0:
@@ -59,7 +62,7 @@ public final class CraftFloorSign extends org.bukkit.craftbukkit.block.data.Craf
     }
 
     @Override
-    public void setRotation(org.bukkit.block.BlockFace rotation) {
+    public void setRotation(org.bukkit.block.@NotNull BlockFace rotation) {
         int val;
         switch (rotation) {
             case SOUTH:
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftFurnaceFurace.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftFurnaceFurace.java
index 64c77cd83989ad9e93285451597d4dbd6a0f649b..e502c01b7ad0da043285868e4666ba82a7e67f57 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftFurnaceFurace.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftFurnaceFurace.java
@@ -3,6 +3,9 @@
  */
 package org.bukkit.craftbukkit.block.impl;
 
+import org.jetbrains.annotations.NotNull;
+
+
 public final class CraftFurnaceFurace extends org.bukkit.craftbukkit.block.data.CraftBlockData implements org.bukkit.block.data.type.Furnace, org.bukkit.block.data.Directional, org.bukkit.block.data.Lightable {
 
     public CraftFurnaceFurace() {
@@ -18,7 +21,7 @@ public final class CraftFurnaceFurace extends org.bukkit.craftbukkit.block.data.
     private static final net.minecraft.world.level.block.state.properties.EnumProperty<?> FACING = getEnum(net.minecraft.world.level.block.FurnaceBlock.class, "facing");
 
     @Override
-    public org.bukkit.block.BlockFace getFacing() {
+    public org.bukkit.block.@NotNull BlockFace getFacing() {
         return get(CraftFurnaceFurace.FACING, org.bukkit.block.BlockFace.class);
     }
 
@@ -28,7 +31,7 @@ public final class CraftFurnaceFurace extends org.bukkit.craftbukkit.block.data.
     }
 
     @Override
-    public java.util.Set<org.bukkit.block.BlockFace> getFaces() {
+    public java.util.@NotNull Set<org.bukkit.block.BlockFace> getFaces() {
         return getValues(CraftFurnaceFurace.FACING, org.bukkit.block.BlockFace.class);
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftGlazedTerracotta.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftGlazedTerracotta.java
index 70d3653907095e61f088c8fe29e1048c04fd4f3e..abcc0f35b77559957857fc28f08ea4719edd2500 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftGlazedTerracotta.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftGlazedTerracotta.java
@@ -3,6 +3,9 @@
  */
 package org.bukkit.craftbukkit.block.impl;
 
+import org.jetbrains.annotations.NotNull;
+
+
 public final class CraftGlazedTerracotta extends org.bukkit.craftbukkit.block.data.CraftBlockData implements org.bukkit.block.data.Directional {
 
     public CraftGlazedTerracotta() {
@@ -18,7 +21,7 @@ public final class CraftGlazedTerracotta extends org.bukkit.craftbukkit.block.da
     private static final net.minecraft.world.level.block.state.properties.EnumProperty<?> FACING = getEnum(net.minecraft.world.level.block.GlazedTerracottaBlock.class, "facing");
 
     @Override
-    public org.bukkit.block.BlockFace getFacing() {
+    public org.bukkit.block.@NotNull BlockFace getFacing() {
         return get(CraftGlazedTerracotta.FACING, org.bukkit.block.BlockFace.class);
     }
 
@@ -28,7 +31,7 @@ public final class CraftGlazedTerracotta extends org.bukkit.craftbukkit.block.da
     }
 
     @Override
-    public java.util.Set<org.bukkit.block.BlockFace> getFaces() {
+    public java.util.@NotNull Set<org.bukkit.block.BlockFace> getFaces() {
         return getValues(CraftGlazedTerracotta.FACING, org.bukkit.block.BlockFace.class);
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftGlowLichen.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftGlowLichen.java
index 0234605163d7dd3ed906167a6019a9a768aa36db..5247636186f8f2f08292a382eb706c74c8f4f1f2 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftGlowLichen.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftGlowLichen.java
@@ -3,6 +3,9 @@
  */
 package org.bukkit.craftbukkit.block.impl;
 
+import org.jetbrains.annotations.NotNull;
+
+
 public final class CraftGlowLichen extends org.bukkit.craftbukkit.block.data.CraftBlockData implements org.bukkit.block.data.type.GlowLichen, org.bukkit.block.data.MultipleFacing, org.bukkit.block.data.Waterlogged {
 
     public CraftGlowLichen() {
@@ -20,7 +23,7 @@ public final class CraftGlowLichen extends org.bukkit.craftbukkit.block.data.Cra
     };
 
     @Override
-    public boolean hasFace(org.bukkit.block.BlockFace face) {
+    public boolean hasFace(org.bukkit.block.@NotNull BlockFace face) {
         net.minecraft.world.level.block.state.properties.BooleanProperty state = CraftGlowLichen.FACES[face.ordinal()];
         if (state == null) {
             throw new IllegalArgumentException("Non-allowed face " + face + ". Check MultipleFacing.getAllowedFaces.");
@@ -29,7 +32,7 @@ public final class CraftGlowLichen extends org.bukkit.craftbukkit.block.data.Cra
     }
 
     @Override
-    public void setFace(org.bukkit.block.BlockFace face, boolean has) {
+    public void setFace(org.bukkit.block.@NotNull BlockFace face, boolean has) {
         net.minecraft.world.level.block.state.properties.BooleanProperty state = CraftGlowLichen.FACES[face.ordinal()];
         if (state == null) {
             throw new IllegalArgumentException("Non-allowed face " + face + ". Check MultipleFacing.getAllowedFaces.");
@@ -38,7 +41,7 @@ public final class CraftGlowLichen extends org.bukkit.craftbukkit.block.data.Cra
     }
 
     @Override
-    public java.util.Set<org.bukkit.block.BlockFace> getFaces() {
+    public java.util.@NotNull Set<org.bukkit.block.BlockFace> getFaces() {
         com.google.common.collect.ImmutableSet.Builder<org.bukkit.block.BlockFace> faces = com.google.common.collect.ImmutableSet.builder();
 
         for (int i = 0; i < FACES.length; i++) {
@@ -51,7 +54,7 @@ public final class CraftGlowLichen extends org.bukkit.craftbukkit.block.data.Cra
     }
 
     @Override
-    public java.util.Set<org.bukkit.block.BlockFace> getAllowedFaces() {
+    public java.util.@NotNull Set<org.bukkit.block.BlockFace> getAllowedFaces() {
         com.google.common.collect.ImmutableSet.Builder<org.bukkit.block.BlockFace> faces = com.google.common.collect.ImmutableSet.builder();
 
         for (int i = 0; i < FACES.length; i++) {
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftGrindstone.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftGrindstone.java
index 27d19ce6c7c44db78f685f601be775732b9d3ab9..494a6c353650979cc6d32878387f754f16157314 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftGrindstone.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftGrindstone.java
@@ -3,6 +3,9 @@
  */
 package org.bukkit.craftbukkit.block.impl;
 
+import org.jetbrains.annotations.NotNull;
+
+
 public final class CraftGrindstone extends org.bukkit.craftbukkit.block.data.CraftBlockData implements org.bukkit.block.data.type.Grindstone, org.bukkit.block.data.Directional, org.bukkit.block.data.FaceAttachable {
 
     public CraftGrindstone() {
@@ -18,7 +21,7 @@ public final class CraftGrindstone extends org.bukkit.craftbukkit.block.data.Cra
     private static final net.minecraft.world.level.block.state.properties.EnumProperty<?> FACING = getEnum(net.minecraft.world.level.block.GrindstoneBlock.class, "facing");
 
     @Override
-    public org.bukkit.block.BlockFace getFacing() {
+    public org.bukkit.block.@NotNull BlockFace getFacing() {
         return get(CraftGrindstone.FACING, org.bukkit.block.BlockFace.class);
     }
 
@@ -28,7 +31,7 @@ public final class CraftGrindstone extends org.bukkit.craftbukkit.block.data.Cra
     }
 
     @Override
-    public java.util.Set<org.bukkit.block.BlockFace> getFaces() {
+    public java.util.@NotNull Set<org.bukkit.block.BlockFace> getFaces() {
         return getValues(CraftGrindstone.FACING, org.bukkit.block.BlockFace.class);
     }
 
@@ -37,7 +40,7 @@ public final class CraftGrindstone extends org.bukkit.craftbukkit.block.data.Cra
     private static final net.minecraft.world.level.block.state.properties.EnumProperty<?> ATTACH_FACE = getEnum(net.minecraft.world.level.block.GrindstoneBlock.class, "face");
 
     @Override
-    public org.bukkit.block.data.FaceAttachable.AttachedFace getAttachedFace() {
+    public org.bukkit.block.data.FaceAttachable.@NotNull AttachedFace getAttachedFace() {
         return get(CraftGrindstone.ATTACH_FACE, org.bukkit.block.data.FaceAttachable.AttachedFace.class);
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftHay.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftHay.java
index d173fc69930ba3c176862fcb6d8909f2364ebc05..338b10da43ff4f473d852fa894fd57e76aa346e3 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftHay.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftHay.java
@@ -3,6 +3,9 @@
  */
 package org.bukkit.craftbukkit.block.impl;
 
+import org.jetbrains.annotations.NotNull;
+
+
 public final class CraftHay extends org.bukkit.craftbukkit.block.data.CraftBlockData implements org.bukkit.block.data.Orientable {
 
     public CraftHay() {
@@ -18,7 +21,7 @@ public final class CraftHay extends org.bukkit.craftbukkit.block.data.CraftBlock
     private static final net.minecraft.world.level.block.state.properties.EnumProperty<?> AXIS = getEnum(net.minecraft.world.level.block.HayBlock.class, "axis");
 
     @Override
-    public org.bukkit.Axis getAxis() {
+    public org.bukkit.@NotNull Axis getAxis() {
         return get(CraftHay.AXIS, org.bukkit.Axis.class);
     }
 
@@ -28,7 +31,7 @@ public final class CraftHay extends org.bukkit.craftbukkit.block.data.CraftBlock
     }
 
     @Override
-    public java.util.Set<org.bukkit.Axis> getAxes() {
+    public java.util.@NotNull Set<org.bukkit.Axis> getAxes() {
         return getValues(CraftHay.AXIS, org.bukkit.Axis.class);
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftHopper.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftHopper.java
index 2a9baf579338e46d4322d26a9eebd84ad48b3881..f5ac67fa566c048072163121342974a36fa88946 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftHopper.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftHopper.java
@@ -3,6 +3,9 @@
  */
 package org.bukkit.craftbukkit.block.impl;
 
+import org.jetbrains.annotations.NotNull;
+
+
 public final class CraftHopper extends org.bukkit.craftbukkit.block.data.CraftBlockData implements org.bukkit.block.data.type.Hopper, org.bukkit.block.data.Directional {
 
     public CraftHopper() {
@@ -32,7 +35,7 @@ public final class CraftHopper extends org.bukkit.craftbukkit.block.data.CraftBl
     private static final net.minecraft.world.level.block.state.properties.EnumProperty<?> FACING = getEnum(net.minecraft.world.level.block.HopperBlock.class, "facing");
 
     @Override
-    public org.bukkit.block.BlockFace getFacing() {
+    public org.bukkit.block.@NotNull BlockFace getFacing() {
         return get(CraftHopper.FACING, org.bukkit.block.BlockFace.class);
     }
 
@@ -42,7 +45,7 @@ public final class CraftHopper extends org.bukkit.craftbukkit.block.data.CraftBl
     }
 
     @Override
-    public java.util.Set<org.bukkit.block.BlockFace> getFaces() {
+    public java.util.@NotNull Set<org.bukkit.block.BlockFace> getFaces() {
         return getValues(CraftHopper.FACING, org.bukkit.block.BlockFace.class);
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftHugeMushroom.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftHugeMushroom.java
index edaaf76d96b8901626b421777354e315db9b4b94..185a3726ad278b01ce281b363c70afeaa00b48bb 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftHugeMushroom.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftHugeMushroom.java
@@ -3,6 +3,9 @@
  */
 package org.bukkit.craftbukkit.block.impl;
 
+import org.jetbrains.annotations.NotNull;
+
+
 public final class CraftHugeMushroom extends org.bukkit.craftbukkit.block.data.CraftBlockData implements org.bukkit.block.data.MultipleFacing {
 
     public CraftHugeMushroom() {
@@ -20,7 +23,7 @@ public final class CraftHugeMushroom extends org.bukkit.craftbukkit.block.data.C
     };
 
     @Override
-    public boolean hasFace(org.bukkit.block.BlockFace face) {
+    public boolean hasFace(org.bukkit.block.@NotNull BlockFace face) {
         net.minecraft.world.level.block.state.properties.BooleanProperty state = CraftHugeMushroom.FACES[face.ordinal()];
         if (state == null) {
             throw new IllegalArgumentException("Non-allowed face " + face + ". Check MultipleFacing.getAllowedFaces.");
@@ -29,7 +32,7 @@ public final class CraftHugeMushroom extends org.bukkit.craftbukkit.block.data.C
     }
 
     @Override
-    public void setFace(org.bukkit.block.BlockFace face, boolean has) {
+    public void setFace(org.bukkit.block.@NotNull BlockFace face, boolean has) {
         net.minecraft.world.level.block.state.properties.BooleanProperty state = CraftHugeMushroom.FACES[face.ordinal()];
         if (state == null) {
             throw new IllegalArgumentException("Non-allowed face " + face + ". Check MultipleFacing.getAllowedFaces.");
@@ -38,7 +41,7 @@ public final class CraftHugeMushroom extends org.bukkit.craftbukkit.block.data.C
     }
 
     @Override
-    public java.util.Set<org.bukkit.block.BlockFace> getFaces() {
+    public java.util.@NotNull Set<org.bukkit.block.BlockFace> getFaces() {
         com.google.common.collect.ImmutableSet.Builder<org.bukkit.block.BlockFace> faces = com.google.common.collect.ImmutableSet.builder();
 
         for (int i = 0; i < FACES.length; i++) {
@@ -51,7 +54,7 @@ public final class CraftHugeMushroom extends org.bukkit.craftbukkit.block.data.C
     }
 
     @Override
-    public java.util.Set<org.bukkit.block.BlockFace> getAllowedFaces() {
+    public java.util.@NotNull Set<org.bukkit.block.BlockFace> getAllowedFaces() {
         com.google.common.collect.ImmutableSet.Builder<org.bukkit.block.BlockFace> faces = com.google.common.collect.ImmutableSet.builder();
 
         for (int i = 0; i < FACES.length; i++) {
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftInfestedRotatedPillar.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftInfestedRotatedPillar.java
index 1fb1f6c81bc6fec2df5728d9e95c8ae6787d1bab..af8c8318df4c6bc41245cde139212b00498a5950 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftInfestedRotatedPillar.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftInfestedRotatedPillar.java
@@ -3,6 +3,9 @@
  */
 package org.bukkit.craftbukkit.block.impl;
 
+import org.jetbrains.annotations.NotNull;
+
+
 public final class CraftInfestedRotatedPillar extends org.bukkit.craftbukkit.block.data.CraftBlockData implements org.bukkit.block.data.Orientable {
 
     public CraftInfestedRotatedPillar() {
@@ -18,7 +21,7 @@ public final class CraftInfestedRotatedPillar extends org.bukkit.craftbukkit.blo
     private static final net.minecraft.world.level.block.state.properties.EnumProperty<?> AXIS = getEnum(net.minecraft.world.level.block.InfestedRotatedPillarBlock.class, "axis");
 
     @Override
-    public org.bukkit.Axis getAxis() {
+    public org.bukkit.@NotNull Axis getAxis() {
         return get(CraftInfestedRotatedPillar.AXIS, org.bukkit.Axis.class);
     }
 
@@ -28,7 +31,7 @@ public final class CraftInfestedRotatedPillar extends org.bukkit.craftbukkit.blo
     }
 
     @Override
-    public java.util.Set<org.bukkit.Axis> getAxes() {
+    public java.util.@NotNull Set<org.bukkit.Axis> getAxes() {
         return getValues(CraftInfestedRotatedPillar.AXIS, org.bukkit.Axis.class);
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftIronBars.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftIronBars.java
index e01de66c74aa290c420c491cd61b795953db2382..dcc448e04f7e979ff815ef460235f8508d5cb3d6 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftIronBars.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftIronBars.java
@@ -3,6 +3,9 @@
  */
 package org.bukkit.craftbukkit.block.impl;
 
+import org.jetbrains.annotations.NotNull;
+
+
 public final class CraftIronBars extends org.bukkit.craftbukkit.block.data.CraftBlockData implements org.bukkit.block.data.type.Fence, org.bukkit.block.data.MultipleFacing, org.bukkit.block.data.Waterlogged {
 
     public CraftIronBars() {
@@ -20,7 +23,7 @@ public final class CraftIronBars extends org.bukkit.craftbukkit.block.data.Craft
     };
 
     @Override
-    public boolean hasFace(org.bukkit.block.BlockFace face) {
+    public boolean hasFace(org.bukkit.block.@NotNull BlockFace face) {
         net.minecraft.world.level.block.state.properties.BooleanProperty state = CraftIronBars.FACES[face.ordinal()];
         if (state == null) {
             throw new IllegalArgumentException("Non-allowed face " + face + ". Check MultipleFacing.getAllowedFaces.");
@@ -29,7 +32,7 @@ public final class CraftIronBars extends org.bukkit.craftbukkit.block.data.Craft
     }
 
     @Override
-    public void setFace(org.bukkit.block.BlockFace face, boolean has) {
+    public void setFace(org.bukkit.block.@NotNull BlockFace face, boolean has) {
         net.minecraft.world.level.block.state.properties.BooleanProperty state = CraftIronBars.FACES[face.ordinal()];
         if (state == null) {
             throw new IllegalArgumentException("Non-allowed face " + face + ". Check MultipleFacing.getAllowedFaces.");
@@ -38,7 +41,7 @@ public final class CraftIronBars extends org.bukkit.craftbukkit.block.data.Craft
     }
 
     @Override
-    public java.util.Set<org.bukkit.block.BlockFace> getFaces() {
+    public java.util.@NotNull Set<org.bukkit.block.BlockFace> getFaces() {
         com.google.common.collect.ImmutableSet.Builder<org.bukkit.block.BlockFace> faces = com.google.common.collect.ImmutableSet.builder();
 
         for (int i = 0; i < FACES.length; i++) {
@@ -51,7 +54,7 @@ public final class CraftIronBars extends org.bukkit.craftbukkit.block.data.Craft
     }
 
     @Override
-    public java.util.Set<org.bukkit.block.BlockFace> getAllowedFaces() {
+    public java.util.@NotNull Set<org.bukkit.block.BlockFace> getAllowedFaces() {
         com.google.common.collect.ImmutableSet.Builder<org.bukkit.block.BlockFace> faces = com.google.common.collect.ImmutableSet.builder();
 
         for (int i = 0; i < FACES.length; i++) {
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftJigsaw.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftJigsaw.java
index 91e57065f22c6c616839c8d922a913c80ca04409..5a5b90fe1dd6edf08ca28e849ebe2458119d4ac5 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftJigsaw.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftJigsaw.java
@@ -3,6 +3,9 @@
  */
 package org.bukkit.craftbukkit.block.impl;
 
+import org.jetbrains.annotations.NotNull;
+
+
 public final class CraftJigsaw extends org.bukkit.craftbukkit.block.data.CraftBlockData implements org.bukkit.block.data.type.Jigsaw {
 
     public CraftJigsaw() {
@@ -18,7 +21,7 @@ public final class CraftJigsaw extends org.bukkit.craftbukkit.block.data.CraftBl
     private static final net.minecraft.world.level.block.state.properties.EnumProperty<?> ORIENTATION = getEnum(net.minecraft.world.level.block.JigsawBlock.class, "orientation");
 
     @Override
-    public org.bukkit.block.data.type.Jigsaw.Orientation getOrientation() {
+    public org.bukkit.block.data.type.Jigsaw.@NotNull Orientation getOrientation() {
         return get(CraftJigsaw.ORIENTATION, org.bukkit.block.data.type.Jigsaw.Orientation.class);
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftLadder.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftLadder.java
index cc9c79ec259398f668b26ec9e252907cf4b3de4e..fb78e24a8fec433c62c3e9cf8876b55e29f53523 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftLadder.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftLadder.java
@@ -3,6 +3,9 @@
  */
 package org.bukkit.craftbukkit.block.impl;
 
+import org.jetbrains.annotations.NotNull;
+
+
 public final class CraftLadder extends org.bukkit.craftbukkit.block.data.CraftBlockData implements org.bukkit.block.data.type.Ladder, org.bukkit.block.data.Directional, org.bukkit.block.data.Waterlogged {
 
     public CraftLadder() {
@@ -18,7 +21,7 @@ public final class CraftLadder extends org.bukkit.craftbukkit.block.data.CraftBl
     private static final net.minecraft.world.level.block.state.properties.EnumProperty<?> FACING = getEnum(net.minecraft.world.level.block.LadderBlock.class, "facing");
 
     @Override
-    public org.bukkit.block.BlockFace getFacing() {
+    public org.bukkit.block.@NotNull BlockFace getFacing() {
         return get(CraftLadder.FACING, org.bukkit.block.BlockFace.class);
     }
 
@@ -28,7 +31,7 @@ public final class CraftLadder extends org.bukkit.craftbukkit.block.data.CraftBl
     }
 
     @Override
-    public java.util.Set<org.bukkit.block.BlockFace> getFaces() {
+    public java.util.@NotNull Set<org.bukkit.block.BlockFace> getFaces() {
         return getValues(CraftLadder.FACING, org.bukkit.block.BlockFace.class);
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftLectern.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftLectern.java
index 1cb6c4fa8ceb13bd52469a1776054622f56070ef..e7c06a86327a1d4443a2ba8fbc452a63f5495021 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftLectern.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftLectern.java
@@ -3,6 +3,9 @@
  */
 package org.bukkit.craftbukkit.block.impl;
 
+import org.jetbrains.annotations.NotNull;
+
+
 public final class CraftLectern extends org.bukkit.craftbukkit.block.data.CraftBlockData implements org.bukkit.block.data.type.Lectern, org.bukkit.block.data.Directional, org.bukkit.block.data.Powerable {
 
     public CraftLectern() {
@@ -27,7 +30,7 @@ public final class CraftLectern extends org.bukkit.craftbukkit.block.data.CraftB
     private static final net.minecraft.world.level.block.state.properties.EnumProperty<?> FACING = getEnum(net.minecraft.world.level.block.LecternBlock.class, "facing");
 
     @Override
-    public org.bukkit.block.BlockFace getFacing() {
+    public org.bukkit.block.@NotNull BlockFace getFacing() {
         return get(CraftLectern.FACING, org.bukkit.block.BlockFace.class);
     }
 
@@ -37,7 +40,7 @@ public final class CraftLectern extends org.bukkit.craftbukkit.block.data.CraftB
     }
 
     @Override
-    public java.util.Set<org.bukkit.block.BlockFace> getFaces() {
+    public java.util.@NotNull Set<org.bukkit.block.BlockFace> getFaces() {
         return getValues(CraftLectern.FACING, org.bukkit.block.BlockFace.class);
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftLever.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftLever.java
index 775c50c3575ac9a6e8371c694d5369d4c52fdc00..f9b5c16cef93f142c4199702056eb7b0e25f96e0 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftLever.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftLever.java
@@ -3,6 +3,9 @@
  */
 package org.bukkit.craftbukkit.block.impl;
 
+import org.jetbrains.annotations.NotNull;
+
+
 public final class CraftLever extends org.bukkit.craftbukkit.block.data.CraftBlockData implements org.bukkit.block.data.type.Switch, org.bukkit.block.data.Directional, org.bukkit.block.data.FaceAttachable, org.bukkit.block.data.Powerable {
 
     public CraftLever() {
@@ -18,7 +21,7 @@ public final class CraftLever extends org.bukkit.craftbukkit.block.data.CraftBlo
     private static final net.minecraft.world.level.block.state.properties.EnumProperty<?> FACE = getEnum(net.minecraft.world.level.block.LeverBlock.class, "face");
 
     @Override
-    public org.bukkit.block.data.type.Switch.Face getFace() {
+    public org.bukkit.block.data.type.Switch.@NotNull Face getFace() {
         return get(CraftLever.FACE, org.bukkit.block.data.type.Switch.Face.class);
     }
 
@@ -32,7 +35,7 @@ public final class CraftLever extends org.bukkit.craftbukkit.block.data.CraftBlo
     private static final net.minecraft.world.level.block.state.properties.EnumProperty<?> FACING = getEnum(net.minecraft.world.level.block.LeverBlock.class, "facing");
 
     @Override
-    public org.bukkit.block.BlockFace getFacing() {
+    public org.bukkit.block.@NotNull BlockFace getFacing() {
         return get(CraftLever.FACING, org.bukkit.block.BlockFace.class);
     }
 
@@ -42,7 +45,7 @@ public final class CraftLever extends org.bukkit.craftbukkit.block.data.CraftBlo
     }
 
     @Override
-    public java.util.Set<org.bukkit.block.BlockFace> getFaces() {
+    public java.util.@NotNull Set<org.bukkit.block.BlockFace> getFaces() {
         return getValues(CraftLever.FACING, org.bukkit.block.BlockFace.class);
     }
 
@@ -51,7 +54,7 @@ public final class CraftLever extends org.bukkit.craftbukkit.block.data.CraftBlo
     private static final net.minecraft.world.level.block.state.properties.EnumProperty<?> ATTACH_FACE = getEnum(net.minecraft.world.level.block.LeverBlock.class, "face");
 
     @Override
-    public org.bukkit.block.data.FaceAttachable.AttachedFace getAttachedFace() {
+    public org.bukkit.block.data.FaceAttachable.@NotNull AttachedFace getAttachedFace() {
         return get(CraftLever.ATTACH_FACE, org.bukkit.block.data.FaceAttachable.AttachedFace.class);
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftLightningRod.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftLightningRod.java
index 84994fa968a1a21848c29e56f00f102e0da61535..3f3e5a16c9a6e39fb624bdcfbdf77f5b07f5119d 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftLightningRod.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftLightningRod.java
@@ -3,6 +3,9 @@
  */
 package org.bukkit.craftbukkit.block.impl;
 
+import org.jetbrains.annotations.NotNull;
+
+
 public final class CraftLightningRod extends org.bukkit.craftbukkit.block.data.CraftBlockData implements org.bukkit.block.data.type.LightningRod, org.bukkit.block.data.Directional, org.bukkit.block.data.Powerable, org.bukkit.block.data.Waterlogged {
 
     public CraftLightningRod() {
@@ -18,7 +21,7 @@ public final class CraftLightningRod extends org.bukkit.craftbukkit.block.data.C
     private static final net.minecraft.world.level.block.state.properties.EnumProperty<?> FACING = getEnum(net.minecraft.world.level.block.LightningRodBlock.class, "facing");
 
     @Override
-    public org.bukkit.block.BlockFace getFacing() {
+    public org.bukkit.block.@NotNull BlockFace getFacing() {
         return get(CraftLightningRod.FACING, org.bukkit.block.BlockFace.class);
     }
 
@@ -28,7 +31,7 @@ public final class CraftLightningRod extends org.bukkit.craftbukkit.block.data.C
     }
 
     @Override
-    public java.util.Set<org.bukkit.block.BlockFace> getFaces() {
+    public java.util.@NotNull Set<org.bukkit.block.BlockFace> getFaces() {
         return getValues(CraftLightningRod.FACING, org.bukkit.block.BlockFace.class);
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftLoom.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftLoom.java
index cc7a9e411d7f9741ca1f54ff6483e1705efeb068..1e6eeae79e6ced354e63cf2dae64ae5047677390 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftLoom.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftLoom.java
@@ -3,6 +3,9 @@
  */
 package org.bukkit.craftbukkit.block.impl;
 
+import org.jetbrains.annotations.NotNull;
+
+
 public final class CraftLoom extends org.bukkit.craftbukkit.block.data.CraftBlockData implements org.bukkit.block.data.Directional {
 
     public CraftLoom() {
@@ -18,7 +21,7 @@ public final class CraftLoom extends org.bukkit.craftbukkit.block.data.CraftBloc
     private static final net.minecraft.world.level.block.state.properties.EnumProperty<?> FACING = getEnum(net.minecraft.world.level.block.LoomBlock.class, "facing");
 
     @Override
-    public org.bukkit.block.BlockFace getFacing() {
+    public org.bukkit.block.@NotNull BlockFace getFacing() {
         return get(CraftLoom.FACING, org.bukkit.block.BlockFace.class);
     }
 
@@ -28,7 +31,7 @@ public final class CraftLoom extends org.bukkit.craftbukkit.block.data.CraftBloc
     }
 
     @Override
-    public java.util.Set<org.bukkit.block.BlockFace> getFaces() {
+    public java.util.@NotNull Set<org.bukkit.block.BlockFace> getFaces() {
         return getValues(CraftLoom.FACING, org.bukkit.block.BlockFace.class);
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftMinecartDetector.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftMinecartDetector.java
index fbdb977df303fd4a596148de451627b8b1e5072d..60434dce3f5137ee5d7943b5ed77a4fcc6baa49e 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftMinecartDetector.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftMinecartDetector.java
@@ -3,6 +3,9 @@
  */
 package org.bukkit.craftbukkit.block.impl;
 
+import org.jetbrains.annotations.NotNull;
+
+
 public final class CraftMinecartDetector extends org.bukkit.craftbukkit.block.data.CraftBlockData implements org.bukkit.block.data.type.RedstoneRail, org.bukkit.block.data.Powerable, org.bukkit.block.data.Rail, org.bukkit.block.data.Waterlogged {
 
     public CraftMinecartDetector() {
@@ -32,7 +35,7 @@ public final class CraftMinecartDetector extends org.bukkit.craftbukkit.block.da
     private static final net.minecraft.world.level.block.state.properties.EnumProperty<?> SHAPE = getEnum(net.minecraft.world.level.block.DetectorRailBlock.class, "shape");
 
     @Override
-    public org.bukkit.block.data.Rail.Shape getShape() {
+    public org.bukkit.block.data.Rail.@NotNull Shape getShape() {
         return get(CraftMinecartDetector.SHAPE, org.bukkit.block.data.Rail.Shape.class);
     }
 
@@ -42,7 +45,7 @@ public final class CraftMinecartDetector extends org.bukkit.craftbukkit.block.da
     }
 
     @Override
-    public java.util.Set<org.bukkit.block.data.Rail.Shape> getShapes() {
+    public java.util.@NotNull Set<org.bukkit.block.data.Rail.Shape> getShapes() {
         return getValues(CraftMinecartDetector.SHAPE, org.bukkit.block.data.Rail.Shape.class);
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftMinecartTrack.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftMinecartTrack.java
index d107602c382659abe8591bbd26f27816e67fc96b..fe7d6505164c0c5899ddbe42dd341141037e459f 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftMinecartTrack.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftMinecartTrack.java
@@ -3,6 +3,9 @@
  */
 package org.bukkit.craftbukkit.block.impl;
 
+import org.jetbrains.annotations.NotNull;
+
+
 public final class CraftMinecartTrack extends org.bukkit.craftbukkit.block.data.CraftBlockData implements org.bukkit.block.data.Rail, org.bukkit.block.data.Waterlogged {
 
     public CraftMinecartTrack() {
@@ -18,7 +21,7 @@ public final class CraftMinecartTrack extends org.bukkit.craftbukkit.block.data.
     private static final net.minecraft.world.level.block.state.properties.EnumProperty<?> SHAPE = getEnum(net.minecraft.world.level.block.RailBlock.class, "shape");
 
     @Override
-    public org.bukkit.block.data.Rail.Shape getShape() {
+    public org.bukkit.block.data.Rail.@NotNull Shape getShape() {
         return get(CraftMinecartTrack.SHAPE, org.bukkit.block.data.Rail.Shape.class);
     }
 
@@ -28,7 +31,7 @@ public final class CraftMinecartTrack extends org.bukkit.craftbukkit.block.data.
     }
 
     @Override
-    public java.util.Set<org.bukkit.block.data.Rail.Shape> getShapes() {
+    public java.util.@NotNull Set<org.bukkit.block.data.Rail.Shape> getShapes() {
         return getValues(CraftMinecartTrack.SHAPE, org.bukkit.block.data.Rail.Shape.class);
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftNote.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftNote.java
index 9fe2b7a3f1ee77eb7e8a39bc4be2b1c45775260f..1eb381593dbf6e5957abe140b45c427fdaeb19a7 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftNote.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftNote.java
@@ -3,6 +3,9 @@
  */
 package org.bukkit.craftbukkit.block.impl;
 
+import org.jetbrains.annotations.NotNull;
+
+
 public final class CraftNote extends org.bukkit.craftbukkit.block.data.CraftBlockData implements org.bukkit.block.data.type.NoteBlock, org.bukkit.block.data.Powerable {
 
     public CraftNote() {
@@ -19,7 +22,7 @@ public final class CraftNote extends org.bukkit.craftbukkit.block.data.CraftBloc
     private static final net.minecraft.world.level.block.state.properties.IntegerProperty NOTE = getInteger(net.minecraft.world.level.block.NoteBlock.class, "note");
 
     @Override
-    public org.bukkit.Instrument getInstrument() {
+    public org.bukkit.@NotNull Instrument getInstrument() {
         return get(CraftNote.INSTRUMENT, org.bukkit.Instrument.class);
     }
 
@@ -29,12 +32,12 @@ public final class CraftNote extends org.bukkit.craftbukkit.block.data.CraftBloc
     }
 
     @Override
-    public org.bukkit.Note getNote() {
+    public org.bukkit.@NotNull Note getNote() {
        return new org.bukkit.Note(get(CraftNote.NOTE));
     }
 
     @Override
-    public void setNote(org.bukkit.Note note) {
+    public void setNote(org.bukkit.@NotNull Note note) {
         set(CraftNote.NOTE, (int) note.getId());
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftObserver.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftObserver.java
index af4f9af46bf73b86ba69d27e7ddd4716dffcca35..32c0dc33a95d4c5ef28f76ceb84bd1ffe1e911e1 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftObserver.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftObserver.java
@@ -3,6 +3,9 @@
  */
 package org.bukkit.craftbukkit.block.impl;
 
+import org.jetbrains.annotations.NotNull;
+
+
 public final class CraftObserver extends org.bukkit.craftbukkit.block.data.CraftBlockData implements org.bukkit.block.data.type.Observer, org.bukkit.block.data.Directional, org.bukkit.block.data.Powerable {
 
     public CraftObserver() {
@@ -18,7 +21,7 @@ public final class CraftObserver extends org.bukkit.craftbukkit.block.data.Craft
     private static final net.minecraft.world.level.block.state.properties.EnumProperty<?> FACING = getEnum(net.minecraft.world.level.block.ObserverBlock.class, "facing");
 
     @Override
-    public org.bukkit.block.BlockFace getFacing() {
+    public org.bukkit.block.@NotNull BlockFace getFacing() {
         return get(CraftObserver.FACING, org.bukkit.block.BlockFace.class);
     }
 
@@ -28,7 +31,7 @@ public final class CraftObserver extends org.bukkit.craftbukkit.block.data.Craft
     }
 
     @Override
-    public java.util.Set<org.bukkit.block.BlockFace> getFaces() {
+    public java.util.@NotNull Set<org.bukkit.block.BlockFace> getFaces() {
         return getValues(CraftObserver.FACING, org.bukkit.block.BlockFace.class);
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftPiston.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftPiston.java
index 4043021da63c29677b4839fcf80b2176f82302ae..3462d56f6e40aa9d6c2305a7e0c35c4d71d288b8 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftPiston.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftPiston.java
@@ -3,6 +3,9 @@
  */
 package org.bukkit.craftbukkit.block.impl;
 
+import org.jetbrains.annotations.NotNull;
+
+
 public final class CraftPiston extends org.bukkit.craftbukkit.block.data.CraftBlockData implements org.bukkit.block.data.type.Piston, org.bukkit.block.data.Directional {
 
     public CraftPiston() {
@@ -32,7 +35,7 @@ public final class CraftPiston extends org.bukkit.craftbukkit.block.data.CraftBl
     private static final net.minecraft.world.level.block.state.properties.EnumProperty<?> FACING = getEnum(net.minecraft.world.level.block.piston.PistonBaseBlock.class, "facing");
 
     @Override
-    public org.bukkit.block.BlockFace getFacing() {
+    public org.bukkit.block.@NotNull BlockFace getFacing() {
         return get(CraftPiston.FACING, org.bukkit.block.BlockFace.class);
     }
 
@@ -42,7 +45,7 @@ public final class CraftPiston extends org.bukkit.craftbukkit.block.data.CraftBl
     }
 
     @Override
-    public java.util.Set<org.bukkit.block.BlockFace> getFaces() {
+    public java.util.@NotNull Set<org.bukkit.block.BlockFace> getFaces() {
         return getValues(CraftPiston.FACING, org.bukkit.block.BlockFace.class);
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftPistonExtension.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftPistonExtension.java
index 069146f27511ca6c5e44b14a832594fb4da3c45a..2faf6b5edb3a44b5a1e1a88181e10bb60116b32a 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftPistonExtension.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftPistonExtension.java
@@ -3,6 +3,9 @@
  */
 package org.bukkit.craftbukkit.block.impl;
 
+import org.jetbrains.annotations.NotNull;
+
+
 public final class CraftPistonExtension extends org.bukkit.craftbukkit.block.data.CraftBlockData implements org.bukkit.block.data.type.PistonHead, org.bukkit.block.data.type.TechnicalPiston, org.bukkit.block.data.Directional {
 
     public CraftPistonExtension() {
@@ -32,7 +35,7 @@ public final class CraftPistonExtension extends org.bukkit.craftbukkit.block.dat
     private static final net.minecraft.world.level.block.state.properties.EnumProperty<?> TYPE = getEnum(net.minecraft.world.level.block.piston.PistonHeadBlock.class, "type");
 
     @Override
-    public org.bukkit.block.data.type.TechnicalPiston.Type getType() {
+    public org.bukkit.block.data.type.TechnicalPiston.@NotNull Type getType() {
         return get(CraftPistonExtension.TYPE, org.bukkit.block.data.type.TechnicalPiston.Type.class);
     }
 
@@ -46,7 +49,7 @@ public final class CraftPistonExtension extends org.bukkit.craftbukkit.block.dat
     private static final net.minecraft.world.level.block.state.properties.EnumProperty<?> FACING = getEnum(net.minecraft.world.level.block.piston.PistonHeadBlock.class, "facing");
 
     @Override
-    public org.bukkit.block.BlockFace getFacing() {
+    public org.bukkit.block.@NotNull BlockFace getFacing() {
         return get(CraftPistonExtension.FACING, org.bukkit.block.BlockFace.class);
     }
 
@@ -56,7 +59,7 @@ public final class CraftPistonExtension extends org.bukkit.craftbukkit.block.dat
     }
 
     @Override
-    public java.util.Set<org.bukkit.block.BlockFace> getFaces() {
+    public java.util.@NotNull Set<org.bukkit.block.BlockFace> getFaces() {
         return getValues(CraftPistonExtension.FACING, org.bukkit.block.BlockFace.class);
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftPistonMoving.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftPistonMoving.java
index 18f8e609ad90a3a3cd1d124f49e61536fd07a398..f2eea8ff320a2846216fee445c90797eb396078b 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftPistonMoving.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftPistonMoving.java
@@ -3,6 +3,9 @@
  */
 package org.bukkit.craftbukkit.block.impl;
 
+import org.jetbrains.annotations.NotNull;
+
+
 public final class CraftPistonMoving extends org.bukkit.craftbukkit.block.data.CraftBlockData implements org.bukkit.block.data.type.TechnicalPiston, org.bukkit.block.data.Directional {
 
     public CraftPistonMoving() {
@@ -18,7 +21,7 @@ public final class CraftPistonMoving extends org.bukkit.craftbukkit.block.data.C
     private static final net.minecraft.world.level.block.state.properties.EnumProperty<?> TYPE = getEnum(net.minecraft.world.level.block.piston.MovingPistonBlock.class, "type");
 
     @Override
-    public org.bukkit.block.data.type.TechnicalPiston.Type getType() {
+    public org.bukkit.block.data.type.TechnicalPiston.@NotNull Type getType() {
         return get(CraftPistonMoving.TYPE, org.bukkit.block.data.type.TechnicalPiston.Type.class);
     }
 
@@ -32,7 +35,7 @@ public final class CraftPistonMoving extends org.bukkit.craftbukkit.block.data.C
     private static final net.minecraft.world.level.block.state.properties.EnumProperty<?> FACING = getEnum(net.minecraft.world.level.block.piston.MovingPistonBlock.class, "facing");
 
     @Override
-    public org.bukkit.block.BlockFace getFacing() {
+    public org.bukkit.block.@NotNull BlockFace getFacing() {
         return get(CraftPistonMoving.FACING, org.bukkit.block.BlockFace.class);
     }
 
@@ -42,7 +45,7 @@ public final class CraftPistonMoving extends org.bukkit.craftbukkit.block.data.C
     }
 
     @Override
-    public java.util.Set<org.bukkit.block.BlockFace> getFaces() {
+    public java.util.@NotNull Set<org.bukkit.block.BlockFace> getFaces() {
         return getValues(CraftPistonMoving.FACING, org.bukkit.block.BlockFace.class);
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftPointedDripstone.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftPointedDripstone.java
index aa0ec500d2029c8eebfea54d4d95b65ae396511a..336e2bd2559262de352bca12c8998162433b5bed 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftPointedDripstone.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftPointedDripstone.java
@@ -3,6 +3,9 @@
  */
 package org.bukkit.craftbukkit.block.impl;
 
+import org.jetbrains.annotations.NotNull;
+
+
 public final class CraftPointedDripstone extends org.bukkit.craftbukkit.block.data.CraftBlockData implements org.bukkit.block.data.type.PointedDripstone, org.bukkit.block.data.Waterlogged {
 
     public CraftPointedDripstone() {
@@ -19,7 +22,7 @@ public final class CraftPointedDripstone extends org.bukkit.craftbukkit.block.da
     private static final net.minecraft.world.level.block.state.properties.EnumProperty<?> THICKNESS = getEnum(net.minecraft.world.level.block.PointedDripstoneBlock.class, "thickness");
 
     @Override
-    public org.bukkit.block.BlockFace getVerticalDirection() {
+    public org.bukkit.block.@NotNull BlockFace getVerticalDirection() {
         return get(CraftPointedDripstone.VERTICAL_DIRECTION, org.bukkit.block.BlockFace.class);
     }
 
@@ -29,12 +32,12 @@ public final class CraftPointedDripstone extends org.bukkit.craftbukkit.block.da
     }
 
     @Override
-    public java.util.Set<org.bukkit.block.BlockFace> getVerticalDirections() {
+    public java.util.@NotNull Set<org.bukkit.block.BlockFace> getVerticalDirections() {
         return getValues(CraftPointedDripstone.VERTICAL_DIRECTION, org.bukkit.block.BlockFace.class);
     }
 
     @Override
-    public org.bukkit.block.data.type.PointedDripstone.Thickness getThickness() {
+    public org.bukkit.block.data.type.PointedDripstone.@NotNull Thickness getThickness() {
         return get(CraftPointedDripstone.THICKNESS, org.bukkit.block.data.type.PointedDripstone.Thickness.class);
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftPortal.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftPortal.java
index 468f9cc21d30dd9c91a8ae7a07f67f7f23d9ace8..f30f7bf2ab9965f63b883e671b54a8ea04ac4b6c 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftPortal.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftPortal.java
@@ -3,6 +3,9 @@
  */
 package org.bukkit.craftbukkit.block.impl;
 
+import org.jetbrains.annotations.NotNull;
+
+
 public final class CraftPortal extends org.bukkit.craftbukkit.block.data.CraftBlockData implements org.bukkit.block.data.Orientable {
 
     public CraftPortal() {
@@ -18,7 +21,7 @@ public final class CraftPortal extends org.bukkit.craftbukkit.block.data.CraftBl
     private static final net.minecraft.world.level.block.state.properties.EnumProperty<?> AXIS = getEnum(net.minecraft.world.level.block.NetherPortalBlock.class, "axis");
 
     @Override
-    public org.bukkit.Axis getAxis() {
+    public org.bukkit.@NotNull Axis getAxis() {
         return get(CraftPortal.AXIS, org.bukkit.Axis.class);
     }
 
@@ -28,7 +31,7 @@ public final class CraftPortal extends org.bukkit.craftbukkit.block.data.CraftBl
     }
 
     @Override
-    public java.util.Set<org.bukkit.Axis> getAxes() {
+    public java.util.@NotNull Set<org.bukkit.Axis> getAxes() {
         return getValues(CraftPortal.AXIS, org.bukkit.Axis.class);
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftPoweredRail.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftPoweredRail.java
index 035498f1c2efb2fcfc8e0d8af35a1d2a74b56510..a76804d7e4fd6889bbbbe8710ce10dd47fae0e5c 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftPoweredRail.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftPoweredRail.java
@@ -3,6 +3,9 @@
  */
 package org.bukkit.craftbukkit.block.impl;
 
+import org.jetbrains.annotations.NotNull;
+
+
 public final class CraftPoweredRail extends org.bukkit.craftbukkit.block.data.CraftBlockData implements org.bukkit.block.data.type.RedstoneRail, org.bukkit.block.data.Powerable, org.bukkit.block.data.Rail, org.bukkit.block.data.Waterlogged {
 
     public CraftPoweredRail() {
@@ -32,7 +35,7 @@ public final class CraftPoweredRail extends org.bukkit.craftbukkit.block.data.Cr
     private static final net.minecraft.world.level.block.state.properties.EnumProperty<?> SHAPE = getEnum(net.minecraft.world.level.block.PoweredRailBlock.class, "shape");
 
     @Override
-    public org.bukkit.block.data.Rail.Shape getShape() {
+    public org.bukkit.block.data.Rail.@NotNull Shape getShape() {
         return get(CraftPoweredRail.SHAPE, org.bukkit.block.data.Rail.Shape.class);
     }
 
@@ -42,7 +45,7 @@ public final class CraftPoweredRail extends org.bukkit.craftbukkit.block.data.Cr
     }
 
     @Override
-    public java.util.Set<org.bukkit.block.data.Rail.Shape> getShapes() {
+    public java.util.@NotNull Set<org.bukkit.block.data.Rail.Shape> getShapes() {
         return getValues(CraftPoweredRail.SHAPE, org.bukkit.block.data.Rail.Shape.class);
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftPumpkinCarved.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftPumpkinCarved.java
index 69c7613b3635b2616b2e53fd8bb39e6a9b6dc497..526ff6007fc19986d99e836b7bab926069d4c9c1 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftPumpkinCarved.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftPumpkinCarved.java
@@ -3,6 +3,9 @@
  */
 package org.bukkit.craftbukkit.block.impl;
 
+import org.jetbrains.annotations.NotNull;
+
+
 public final class CraftPumpkinCarved extends org.bukkit.craftbukkit.block.data.CraftBlockData implements org.bukkit.block.data.Directional {
 
     public CraftPumpkinCarved() {
@@ -18,7 +21,7 @@ public final class CraftPumpkinCarved extends org.bukkit.craftbukkit.block.data.
     private static final net.minecraft.world.level.block.state.properties.EnumProperty<?> FACING = getEnum(net.minecraft.world.level.block.CarvedPumpkinBlock.class, "facing");
 
     @Override
-    public org.bukkit.block.BlockFace getFacing() {
+    public org.bukkit.block.@NotNull BlockFace getFacing() {
         return get(CraftPumpkinCarved.FACING, org.bukkit.block.BlockFace.class);
     }
 
@@ -28,7 +31,7 @@ public final class CraftPumpkinCarved extends org.bukkit.craftbukkit.block.data.
     }
 
     @Override
-    public java.util.Set<org.bukkit.block.BlockFace> getFaces() {
+    public java.util.@NotNull Set<org.bukkit.block.BlockFace> getFaces() {
         return getValues(CraftPumpkinCarved.FACING, org.bukkit.block.BlockFace.class);
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftRedstoneComparator.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftRedstoneComparator.java
index c4b6e8ea70684fc9fb946a1d77e8e1fba1524f41..d21aa86187452ddd8895fdadc7c8ee4ee712cd79 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftRedstoneComparator.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftRedstoneComparator.java
@@ -3,6 +3,9 @@
  */
 package org.bukkit.craftbukkit.block.impl;
 
+import org.jetbrains.annotations.NotNull;
+
+
 public final class CraftRedstoneComparator extends org.bukkit.craftbukkit.block.data.CraftBlockData implements org.bukkit.block.data.type.Comparator, org.bukkit.block.data.Directional, org.bukkit.block.data.Powerable {
 
     public CraftRedstoneComparator() {
@@ -18,7 +21,7 @@ public final class CraftRedstoneComparator extends org.bukkit.craftbukkit.block.
     private static final net.minecraft.world.level.block.state.properties.EnumProperty<?> MODE = getEnum(net.minecraft.world.level.block.ComparatorBlock.class, "mode");
 
     @Override
-    public org.bukkit.block.data.type.Comparator.Mode getMode() {
+    public org.bukkit.block.data.type.Comparator.@NotNull Mode getMode() {
         return get(CraftRedstoneComparator.MODE, org.bukkit.block.data.type.Comparator.Mode.class);
     }
 
@@ -32,7 +35,7 @@ public final class CraftRedstoneComparator extends org.bukkit.craftbukkit.block.
     private static final net.minecraft.world.level.block.state.properties.EnumProperty<?> FACING = getEnum(net.minecraft.world.level.block.ComparatorBlock.class, "facing");
 
     @Override
-    public org.bukkit.block.BlockFace getFacing() {
+    public org.bukkit.block.@NotNull BlockFace getFacing() {
         return get(CraftRedstoneComparator.FACING, org.bukkit.block.BlockFace.class);
     }
 
@@ -42,7 +45,7 @@ public final class CraftRedstoneComparator extends org.bukkit.craftbukkit.block.
     }
 
     @Override
-    public java.util.Set<org.bukkit.block.BlockFace> getFaces() {
+    public java.util.@NotNull Set<org.bukkit.block.BlockFace> getFaces() {
         return getValues(CraftRedstoneComparator.FACING, org.bukkit.block.BlockFace.class);
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftRedstoneTorchWall.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftRedstoneTorchWall.java
index a9600823514aedff90444d0066bdab26424ed10e..31eae2d4361852428709919e5370a22b74089a57 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftRedstoneTorchWall.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftRedstoneTorchWall.java
@@ -3,6 +3,9 @@
  */
 package org.bukkit.craftbukkit.block.impl;
 
+import org.jetbrains.annotations.NotNull;
+
+
 public final class CraftRedstoneTorchWall extends org.bukkit.craftbukkit.block.data.CraftBlockData implements org.bukkit.block.data.type.RedstoneWallTorch, org.bukkit.block.data.Directional, org.bukkit.block.data.Lightable {
 
     public CraftRedstoneTorchWall() {
@@ -18,7 +21,7 @@ public final class CraftRedstoneTorchWall extends org.bukkit.craftbukkit.block.d
     private static final net.minecraft.world.level.block.state.properties.EnumProperty<?> FACING = getEnum(net.minecraft.world.level.block.RedstoneWallTorchBlock.class, "facing");
 
     @Override
-    public org.bukkit.block.BlockFace getFacing() {
+    public org.bukkit.block.@NotNull BlockFace getFacing() {
         return get(CraftRedstoneTorchWall.FACING, org.bukkit.block.BlockFace.class);
     }
 
@@ -28,7 +31,7 @@ public final class CraftRedstoneTorchWall extends org.bukkit.craftbukkit.block.d
     }
 
     @Override
-    public java.util.Set<org.bukkit.block.BlockFace> getFaces() {
+    public java.util.@NotNull Set<org.bukkit.block.BlockFace> getFaces() {
         return getValues(CraftRedstoneTorchWall.FACING, org.bukkit.block.BlockFace.class);
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftRedstoneWire.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftRedstoneWire.java
index 2de8c30d567af783b6620cb04fa3836c7577b6d9..49d281d4f9b82d4543488d477501e0c9e903f001 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftRedstoneWire.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftRedstoneWire.java
@@ -3,6 +3,9 @@
  */
 package org.bukkit.craftbukkit.block.impl;
 
+import org.jetbrains.annotations.NotNull;
+
+
 public final class CraftRedstoneWire extends org.bukkit.craftbukkit.block.data.CraftBlockData implements org.bukkit.block.data.type.RedstoneWire, org.bukkit.block.data.AnaloguePowerable {
 
     public CraftRedstoneWire() {
@@ -21,7 +24,7 @@ public final class CraftRedstoneWire extends org.bukkit.craftbukkit.block.data.C
     private static final net.minecraft.world.level.block.state.properties.EnumProperty<?> WEST = getEnum(net.minecraft.world.level.block.RedStoneWireBlock.class, "west");
 
     @Override
-    public org.bukkit.block.data.type.RedstoneWire.Connection getFace(org.bukkit.block.BlockFace face) {
+    public org.bukkit.block.data.type.RedstoneWire.@NotNull Connection getFace(org.bukkit.block.@NotNull BlockFace face) {
         switch (face) {
             case NORTH:
                 return get(CraftRedstoneWire.NORTH, org.bukkit.block.data.type.RedstoneWire.Connection.class);
@@ -37,7 +40,7 @@ public final class CraftRedstoneWire extends org.bukkit.craftbukkit.block.data.C
     }
 
     @Override
-    public void setFace(org.bukkit.block.BlockFace face, org.bukkit.block.data.type.RedstoneWire.Connection connection) {
+    public void setFace(org.bukkit.block.@NotNull BlockFace face, org.bukkit.block.data.type.RedstoneWire.Connection connection) {
         switch (face) {
             case NORTH:
                 set(CraftRedstoneWire.NORTH, connection);
@@ -57,7 +60,7 @@ public final class CraftRedstoneWire extends org.bukkit.craftbukkit.block.data.C
     }
 
     @Override
-    public java.util.Set<org.bukkit.block.BlockFace> getAllowedFaces() {
+    public java.util.@NotNull Set<org.bukkit.block.BlockFace> getAllowedFaces() {
         return com.google.common.collect.ImmutableSet.of(org.bukkit.block.BlockFace.NORTH, org.bukkit.block.BlockFace.EAST, org.bukkit.block.BlockFace.SOUTH, org.bukkit.block.BlockFace.WEST);
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftRepeater.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftRepeater.java
index 8b6b3d02f386071038b3f928d88d82285d19fbb0..11ff091a0227fcce4f70860fb5fca2973ca378f8 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftRepeater.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftRepeater.java
@@ -3,6 +3,9 @@
  */
 package org.bukkit.craftbukkit.block.impl;
 
+import org.jetbrains.annotations.NotNull;
+
+
 public final class CraftRepeater extends org.bukkit.craftbukkit.block.data.CraftBlockData implements org.bukkit.block.data.type.Repeater, org.bukkit.block.data.Directional, org.bukkit.block.data.Powerable {
 
     public CraftRepeater() {
@@ -53,7 +56,7 @@ public final class CraftRepeater extends org.bukkit.craftbukkit.block.data.Craft
     private static final net.minecraft.world.level.block.state.properties.EnumProperty<?> FACING = getEnum(net.minecraft.world.level.block.RepeaterBlock.class, "facing");
 
     @Override
-    public org.bukkit.block.BlockFace getFacing() {
+    public org.bukkit.block.@NotNull BlockFace getFacing() {
         return get(CraftRepeater.FACING, org.bukkit.block.BlockFace.class);
     }
 
@@ -63,7 +66,7 @@ public final class CraftRepeater extends org.bukkit.craftbukkit.block.data.Craft
     }
 
     @Override
-    public java.util.Set<org.bukkit.block.BlockFace> getFaces() {
+    public java.util.@NotNull Set<org.bukkit.block.BlockFace> getFaces() {
         return getValues(CraftRepeater.FACING, org.bukkit.block.BlockFace.class);
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftRotatable.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftRotatable.java
index 949f0fd452c8333fa20ca073dc1b44bebd489c28..29c34ec708760a2a2333229dd942b63a611ad7db 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftRotatable.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftRotatable.java
@@ -3,6 +3,9 @@
  */
 package org.bukkit.craftbukkit.block.impl;
 
+import org.jetbrains.annotations.NotNull;
+
+
 public final class CraftRotatable extends org.bukkit.craftbukkit.block.data.CraftBlockData implements org.bukkit.block.data.Orientable {
 
     public CraftRotatable() {
@@ -18,7 +21,7 @@ public final class CraftRotatable extends org.bukkit.craftbukkit.block.data.Craf
     private static final net.minecraft.world.level.block.state.properties.EnumProperty<?> AXIS = getEnum(net.minecraft.world.level.block.RotatedPillarBlock.class, "axis");
 
     @Override
-    public org.bukkit.Axis getAxis() {
+    public org.bukkit.@NotNull Axis getAxis() {
         return get(CraftRotatable.AXIS, org.bukkit.Axis.class);
     }
 
@@ -28,7 +31,7 @@ public final class CraftRotatable extends org.bukkit.craftbukkit.block.data.Craf
     }
 
     @Override
-    public java.util.Set<org.bukkit.Axis> getAxes() {
+    public java.util.@NotNull Set<org.bukkit.Axis> getAxes() {
         return getValues(CraftRotatable.AXIS, org.bukkit.Axis.class);
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftSculkSensor.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftSculkSensor.java
index 3bfaf4d01d3fd7ed59308e9679b2b3a75ae382a6..8e56698de056942f2787842e74d067696724f4b4 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftSculkSensor.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftSculkSensor.java
@@ -3,6 +3,9 @@
  */
 package org.bukkit.craftbukkit.block.impl;
 
+import org.jetbrains.annotations.NotNull;
+
+
 public final class CraftSculkSensor extends org.bukkit.craftbukkit.block.data.CraftBlockData implements org.bukkit.block.data.type.SculkSensor, org.bukkit.block.data.AnaloguePowerable, org.bukkit.block.data.Waterlogged {
 
     public CraftSculkSensor() {
@@ -18,7 +21,7 @@ public final class CraftSculkSensor extends org.bukkit.craftbukkit.block.data.Cr
     private static final net.minecraft.world.level.block.state.properties.EnumProperty<?> PHASE = getEnum(net.minecraft.world.level.block.SculkSensorBlock.class, "sculk_sensor_phase");
 
     @Override
-    public org.bukkit.block.data.type.SculkSensor.Phase getPhase() {
+    public org.bukkit.block.data.type.SculkSensor.@NotNull Phase getPhase() {
         return get(CraftSculkSensor.PHASE, org.bukkit.block.data.type.SculkSensor.Phase.class);
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftSculkVein.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftSculkVein.java
index 86639095e0d101e0774f7e85158319c16f971a5a..44ba6670234ed2d5b123810ddb4a394274a6637a 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftSculkVein.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftSculkVein.java
@@ -3,6 +3,9 @@
  */
 package org.bukkit.craftbukkit.block.impl;
 
+import org.jetbrains.annotations.NotNull;
+
+
 public final class CraftSculkVein extends org.bukkit.craftbukkit.block.data.CraftBlockData implements org.bukkit.block.data.type.SculkVein, org.bukkit.block.data.MultipleFacing, org.bukkit.block.data.Waterlogged {
 
     public CraftSculkVein() {
@@ -20,7 +23,7 @@ public final class CraftSculkVein extends org.bukkit.craftbukkit.block.data.Craf
     };
 
     @Override
-    public boolean hasFace(org.bukkit.block.BlockFace face) {
+    public boolean hasFace(org.bukkit.block.@NotNull BlockFace face) {
         net.minecraft.world.level.block.state.properties.BooleanProperty state = CraftSculkVein.FACES[face.ordinal()];
         if (state == null) {
             throw new IllegalArgumentException("Non-allowed face " + face + ". Check MultipleFacing.getAllowedFaces.");
@@ -29,7 +32,7 @@ public final class CraftSculkVein extends org.bukkit.craftbukkit.block.data.Craf
     }
 
     @Override
-    public void setFace(org.bukkit.block.BlockFace face, boolean has) {
+    public void setFace(org.bukkit.block.@NotNull BlockFace face, boolean has) {
         net.minecraft.world.level.block.state.properties.BooleanProperty state = CraftSculkVein.FACES[face.ordinal()];
         if (state == null) {
             throw new IllegalArgumentException("Non-allowed face " + face + ". Check MultipleFacing.getAllowedFaces.");
@@ -38,7 +41,7 @@ public final class CraftSculkVein extends org.bukkit.craftbukkit.block.data.Craf
     }
 
     @Override
-    public java.util.Set<org.bukkit.block.BlockFace> getFaces() {
+    public java.util.@NotNull Set<org.bukkit.block.BlockFace> getFaces() {
         com.google.common.collect.ImmutableSet.Builder<org.bukkit.block.BlockFace> faces = com.google.common.collect.ImmutableSet.builder();
 
         for (int i = 0; i < FACES.length; i++) {
@@ -51,7 +54,7 @@ public final class CraftSculkVein extends org.bukkit.craftbukkit.block.data.Craf
     }
 
     @Override
-    public java.util.Set<org.bukkit.block.BlockFace> getAllowedFaces() {
+    public java.util.@NotNull Set<org.bukkit.block.BlockFace> getAllowedFaces() {
         com.google.common.collect.ImmutableSet.Builder<org.bukkit.block.BlockFace> faces = com.google.common.collect.ImmutableSet.builder();
 
         for (int i = 0; i < FACES.length; i++) {
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftShulkerBox.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftShulkerBox.java
index 36d72094b749033d5a126ff8f3d9dff90309a953..956f8bc1953da2d959cab227012c801af1e1887b 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftShulkerBox.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftShulkerBox.java
@@ -3,6 +3,9 @@
  */
 package org.bukkit.craftbukkit.block.impl;
 
+import org.jetbrains.annotations.NotNull;
+
+
 public final class CraftShulkerBox extends org.bukkit.craftbukkit.block.data.CraftBlockData implements org.bukkit.block.data.Directional {
 
     public CraftShulkerBox() {
@@ -18,7 +21,7 @@ public final class CraftShulkerBox extends org.bukkit.craftbukkit.block.data.Cra
     private static final net.minecraft.world.level.block.state.properties.EnumProperty<?> FACING = getEnum(net.minecraft.world.level.block.ShulkerBoxBlock.class, "facing");
 
     @Override
-    public org.bukkit.block.BlockFace getFacing() {
+    public org.bukkit.block.@NotNull BlockFace getFacing() {
         return get(CraftShulkerBox.FACING, org.bukkit.block.BlockFace.class);
     }
 
@@ -28,7 +31,7 @@ public final class CraftShulkerBox extends org.bukkit.craftbukkit.block.data.Cra
     }
 
     @Override
-    public java.util.Set<org.bukkit.block.BlockFace> getFaces() {
+    public java.util.@NotNull Set<org.bukkit.block.BlockFace> getFaces() {
         return getValues(CraftShulkerBox.FACING, org.bukkit.block.BlockFace.class);
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftSkull.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftSkull.java
index dcbf458ac5a079d0a2eac87ed3aa887f461689bc..7c7d9936a05b92b190731370631c6e6639a2321f 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftSkull.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftSkull.java
@@ -3,6 +3,9 @@
  */
 package org.bukkit.craftbukkit.block.impl;
 
+import org.jetbrains.annotations.NotNull;
+
+
 public final class CraftSkull extends org.bukkit.craftbukkit.block.data.CraftBlockData implements org.bukkit.block.data.Rotatable {
 
     public CraftSkull() {
@@ -18,7 +21,7 @@ public final class CraftSkull extends org.bukkit.craftbukkit.block.data.CraftBlo
     private static final net.minecraft.world.level.block.state.properties.IntegerProperty ROTATION = getInteger(net.minecraft.world.level.block.SkullBlock.class, "rotation");
 
     @Override
-    public org.bukkit.block.BlockFace getRotation() {
+    public org.bukkit.block.@NotNull BlockFace getRotation() {
         int data = get(CraftSkull.ROTATION);
         switch (data) {
             case 0x0:
@@ -59,7 +62,7 @@ public final class CraftSkull extends org.bukkit.craftbukkit.block.data.CraftBlo
     }
 
     @Override
-    public void setRotation(org.bukkit.block.BlockFace rotation) {
+    public void setRotation(org.bukkit.block.@NotNull BlockFace rotation) {
         int val;
         switch (rotation) {
             case SOUTH:
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftSkullPlayer.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftSkullPlayer.java
index ddd3ca8b03642d10ddda940f65456a295bda5343..f3b57ecdd19be76afb12e51546df70edd34e5746 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftSkullPlayer.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftSkullPlayer.java
@@ -3,6 +3,9 @@
  */
 package org.bukkit.craftbukkit.block.impl;
 
+import org.jetbrains.annotations.NotNull;
+
+
 public final class CraftSkullPlayer extends org.bukkit.craftbukkit.block.data.CraftBlockData implements org.bukkit.block.data.Rotatable {
 
     public CraftSkullPlayer() {
@@ -18,7 +21,7 @@ public final class CraftSkullPlayer extends org.bukkit.craftbukkit.block.data.Cr
     private static final net.minecraft.world.level.block.state.properties.IntegerProperty ROTATION = getInteger(net.minecraft.world.level.block.PlayerHeadBlock.class, "rotation");
 
     @Override
-    public org.bukkit.block.BlockFace getRotation() {
+    public org.bukkit.block.@NotNull BlockFace getRotation() {
         int data = get(CraftSkullPlayer.ROTATION);
         switch (data) {
             case 0x0:
@@ -59,7 +62,7 @@ public final class CraftSkullPlayer extends org.bukkit.craftbukkit.block.data.Cr
     }
 
     @Override
-    public void setRotation(org.bukkit.block.BlockFace rotation) {
+    public void setRotation(org.bukkit.block.@NotNull BlockFace rotation) {
         int val;
         switch (rotation) {
             case SOUTH:
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftSkullPlayerWall.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftSkullPlayerWall.java
index 341b1e9156434678929fe644c8681bebeb862ce5..92e6c179b6e47c8d1b7b17af06422fb5e3ad3ffb 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftSkullPlayerWall.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftSkullPlayerWall.java
@@ -3,6 +3,9 @@
  */
 package org.bukkit.craftbukkit.block.impl;
 
+import org.jetbrains.annotations.NotNull;
+
+
 public final class CraftSkullPlayerWall extends org.bukkit.craftbukkit.block.data.CraftBlockData implements org.bukkit.block.data.Directional {
 
     public CraftSkullPlayerWall() {
@@ -18,7 +21,7 @@ public final class CraftSkullPlayerWall extends org.bukkit.craftbukkit.block.dat
     private static final net.minecraft.world.level.block.state.properties.EnumProperty<?> FACING = getEnum(net.minecraft.world.level.block.PlayerWallHeadBlock.class, "facing");
 
     @Override
-    public org.bukkit.block.BlockFace getFacing() {
+    public org.bukkit.block.@NotNull BlockFace getFacing() {
         return get(CraftSkullPlayerWall.FACING, org.bukkit.block.BlockFace.class);
     }
 
@@ -28,7 +31,7 @@ public final class CraftSkullPlayerWall extends org.bukkit.craftbukkit.block.dat
     }
 
     @Override
-    public java.util.Set<org.bukkit.block.BlockFace> getFaces() {
+    public java.util.@NotNull Set<org.bukkit.block.BlockFace> getFaces() {
         return getValues(CraftSkullPlayerWall.FACING, org.bukkit.block.BlockFace.class);
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftSkullWall.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftSkullWall.java
index bf4bde152403a8373edb4c3b327d0149a8fb11c0..ab394aa6da12380b85985249c8f1d9f53e307789 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftSkullWall.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftSkullWall.java
@@ -3,6 +3,9 @@
  */
 package org.bukkit.craftbukkit.block.impl;
 
+import org.jetbrains.annotations.NotNull;
+
+
 public final class CraftSkullWall extends org.bukkit.craftbukkit.block.data.CraftBlockData implements org.bukkit.block.data.Directional {
 
     public CraftSkullWall() {
@@ -18,7 +21,7 @@ public final class CraftSkullWall extends org.bukkit.craftbukkit.block.data.Craf
     private static final net.minecraft.world.level.block.state.properties.EnumProperty<?> FACING = getEnum(net.minecraft.world.level.block.WallSkullBlock.class, "facing");
 
     @Override
-    public org.bukkit.block.BlockFace getFacing() {
+    public org.bukkit.block.@NotNull BlockFace getFacing() {
         return get(CraftSkullWall.FACING, org.bukkit.block.BlockFace.class);
     }
 
@@ -28,7 +31,7 @@ public final class CraftSkullWall extends org.bukkit.craftbukkit.block.data.Craf
     }
 
     @Override
-    public java.util.Set<org.bukkit.block.BlockFace> getFaces() {
+    public java.util.@NotNull Set<org.bukkit.block.BlockFace> getFaces() {
         return getValues(CraftSkullWall.FACING, org.bukkit.block.BlockFace.class);
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftSmallDripleaf.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftSmallDripleaf.java
index 76a1243aa110613b3b61ab72f6e410ffac0ee78b..2fc85bd25dbfc8f699f13b3e09bf089c6285df02 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftSmallDripleaf.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftSmallDripleaf.java
@@ -3,6 +3,9 @@
  */
 package org.bukkit.craftbukkit.block.impl;
 
+import org.jetbrains.annotations.NotNull;
+
+
 public final class CraftSmallDripleaf extends org.bukkit.craftbukkit.block.data.CraftBlockData implements org.bukkit.block.data.type.SmallDripleaf, org.bukkit.block.data.type.Dripleaf, org.bukkit.block.data.Bisected, org.bukkit.block.data.Directional, org.bukkit.block.data.Waterlogged {
 
     public CraftSmallDripleaf() {
@@ -18,7 +21,7 @@ public final class CraftSmallDripleaf extends org.bukkit.craftbukkit.block.data.
     private static final net.minecraft.world.level.block.state.properties.EnumProperty<?> HALF = getEnum(net.minecraft.world.level.block.SmallDripleafBlock.class, "half");
 
     @Override
-    public org.bukkit.block.data.Bisected.Half getHalf() {
+    public org.bukkit.block.data.Bisected.@NotNull Half getHalf() {
         return get(CraftSmallDripleaf.HALF, org.bukkit.block.data.Bisected.Half.class);
     }
 
@@ -32,7 +35,7 @@ public final class CraftSmallDripleaf extends org.bukkit.craftbukkit.block.data.
     private static final net.minecraft.world.level.block.state.properties.EnumProperty<?> FACING = getEnum(net.minecraft.world.level.block.SmallDripleafBlock.class, "facing");
 
     @Override
-    public org.bukkit.block.BlockFace getFacing() {
+    public org.bukkit.block.@NotNull BlockFace getFacing() {
         return get(CraftSmallDripleaf.FACING, org.bukkit.block.BlockFace.class);
     }
 
@@ -42,7 +45,7 @@ public final class CraftSmallDripleaf extends org.bukkit.craftbukkit.block.data.
     }
 
     @Override
-    public java.util.Set<org.bukkit.block.BlockFace> getFaces() {
+    public java.util.@NotNull Set<org.bukkit.block.BlockFace> getFaces() {
         return getValues(CraftSmallDripleaf.FACING, org.bukkit.block.BlockFace.class);
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftSmoker.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftSmoker.java
index 0ffaa6f7caf133da13d84710da0294f5972ab6f7..05a0617c0f78cbf56e128d028f4ec7b29a1d35f7 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftSmoker.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftSmoker.java
@@ -3,6 +3,9 @@
  */
 package org.bukkit.craftbukkit.block.impl;
 
+import org.jetbrains.annotations.NotNull;
+
+
 public final class CraftSmoker extends org.bukkit.craftbukkit.block.data.CraftBlockData implements org.bukkit.block.data.type.Furnace, org.bukkit.block.data.Directional, org.bukkit.block.data.Lightable {
 
     public CraftSmoker() {
@@ -18,7 +21,7 @@ public final class CraftSmoker extends org.bukkit.craftbukkit.block.data.CraftBl
     private static final net.minecraft.world.level.block.state.properties.EnumProperty<?> FACING = getEnum(net.minecraft.world.level.block.SmokerBlock.class, "facing");
 
     @Override
-    public org.bukkit.block.BlockFace getFacing() {
+    public org.bukkit.block.@NotNull BlockFace getFacing() {
         return get(CraftSmoker.FACING, org.bukkit.block.BlockFace.class);
     }
 
@@ -28,7 +31,7 @@ public final class CraftSmoker extends org.bukkit.craftbukkit.block.data.CraftBl
     }
 
     @Override
-    public java.util.Set<org.bukkit.block.BlockFace> getFaces() {
+    public java.util.@NotNull Set<org.bukkit.block.BlockFace> getFaces() {
         return getValues(CraftSmoker.FACING, org.bukkit.block.BlockFace.class);
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftStainedGlassPane.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftStainedGlassPane.java
index 33affaf36ea7fff95b474bc6ce013b23e7b7f9ba..a76910340cde1da706f2948ac1a08fe60a7ed46f 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftStainedGlassPane.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftStainedGlassPane.java
@@ -3,6 +3,9 @@
  */
 package org.bukkit.craftbukkit.block.impl;
 
+import org.jetbrains.annotations.NotNull;
+
+
 public final class CraftStainedGlassPane extends org.bukkit.craftbukkit.block.data.CraftBlockData implements org.bukkit.block.data.type.GlassPane, org.bukkit.block.data.MultipleFacing, org.bukkit.block.data.Waterlogged {
 
     public CraftStainedGlassPane() {
@@ -20,7 +23,7 @@ public final class CraftStainedGlassPane extends org.bukkit.craftbukkit.block.da
     };
 
     @Override
-    public boolean hasFace(org.bukkit.block.BlockFace face) {
+    public boolean hasFace(org.bukkit.block.@NotNull BlockFace face) {
         net.minecraft.world.level.block.state.properties.BooleanProperty state = CraftStainedGlassPane.FACES[face.ordinal()];
         if (state == null) {
             throw new IllegalArgumentException("Non-allowed face " + face + ". Check MultipleFacing.getAllowedFaces.");
@@ -29,7 +32,7 @@ public final class CraftStainedGlassPane extends org.bukkit.craftbukkit.block.da
     }
 
     @Override
-    public void setFace(org.bukkit.block.BlockFace face, boolean has) {
+    public void setFace(org.bukkit.block.@NotNull BlockFace face, boolean has) {
         net.minecraft.world.level.block.state.properties.BooleanProperty state = CraftStainedGlassPane.FACES[face.ordinal()];
         if (state == null) {
             throw new IllegalArgumentException("Non-allowed face " + face + ". Check MultipleFacing.getAllowedFaces.");
@@ -38,7 +41,7 @@ public final class CraftStainedGlassPane extends org.bukkit.craftbukkit.block.da
     }
 
     @Override
-    public java.util.Set<org.bukkit.block.BlockFace> getFaces() {
+    public java.util.@NotNull Set<org.bukkit.block.BlockFace> getFaces() {
         com.google.common.collect.ImmutableSet.Builder<org.bukkit.block.BlockFace> faces = com.google.common.collect.ImmutableSet.builder();
 
         for (int i = 0; i < FACES.length; i++) {
@@ -51,7 +54,7 @@ public final class CraftStainedGlassPane extends org.bukkit.craftbukkit.block.da
     }
 
     @Override
-    public java.util.Set<org.bukkit.block.BlockFace> getAllowedFaces() {
+    public java.util.@NotNull Set<org.bukkit.block.BlockFace> getAllowedFaces() {
         com.google.common.collect.ImmutableSet.Builder<org.bukkit.block.BlockFace> faces = com.google.common.collect.ImmutableSet.builder();
 
         for (int i = 0; i < FACES.length; i++) {
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftStairs.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftStairs.java
index 5cc16ca1458f002d7f07831e5210a02ac3c235ed..43707c1dbc5d7add771a33c448d2333186543592 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftStairs.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftStairs.java
@@ -3,6 +3,9 @@
  */
 package org.bukkit.craftbukkit.block.impl;
 
+import org.jetbrains.annotations.NotNull;
+
+
 public final class CraftStairs extends org.bukkit.craftbukkit.block.data.CraftBlockData implements org.bukkit.block.data.type.Stairs, org.bukkit.block.data.Bisected, org.bukkit.block.data.Directional, org.bukkit.block.data.Waterlogged {
 
     public CraftStairs() {
@@ -18,7 +21,7 @@ public final class CraftStairs extends org.bukkit.craftbukkit.block.data.CraftBl
     private static final net.minecraft.world.level.block.state.properties.EnumProperty<?> SHAPE = getEnum(net.minecraft.world.level.block.StairBlock.class, "shape");
 
     @Override
-    public org.bukkit.block.data.type.Stairs.Shape getShape() {
+    public org.bukkit.block.data.type.Stairs.@NotNull Shape getShape() {
         return get(CraftStairs.SHAPE, org.bukkit.block.data.type.Stairs.Shape.class);
     }
 
@@ -32,7 +35,7 @@ public final class CraftStairs extends org.bukkit.craftbukkit.block.data.CraftBl
     private static final net.minecraft.world.level.block.state.properties.EnumProperty<?> HALF = getEnum(net.minecraft.world.level.block.StairBlock.class, "half");
 
     @Override
-    public org.bukkit.block.data.Bisected.Half getHalf() {
+    public org.bukkit.block.data.Bisected.@NotNull Half getHalf() {
         return get(CraftStairs.HALF, org.bukkit.block.data.Bisected.Half.class);
     }
 
@@ -46,7 +49,7 @@ public final class CraftStairs extends org.bukkit.craftbukkit.block.data.CraftBl
     private static final net.minecraft.world.level.block.state.properties.EnumProperty<?> FACING = getEnum(net.minecraft.world.level.block.StairBlock.class, "facing");
 
     @Override
-    public org.bukkit.block.BlockFace getFacing() {
+    public org.bukkit.block.@NotNull BlockFace getFacing() {
         return get(CraftStairs.FACING, org.bukkit.block.BlockFace.class);
     }
 
@@ -56,7 +59,7 @@ public final class CraftStairs extends org.bukkit.craftbukkit.block.data.CraftBl
     }
 
     @Override
-    public java.util.Set<org.bukkit.block.BlockFace> getFaces() {
+    public java.util.@NotNull Set<org.bukkit.block.BlockFace> getFaces() {
         return getValues(CraftStairs.FACING, org.bukkit.block.BlockFace.class);
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftStemAttached.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftStemAttached.java
index ff6635960646c3a35fc9cb9cedf772b5a7bc0cef..f2999ecd1941365cf13654078070f6dd8c2e3c82 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftStemAttached.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftStemAttached.java
@@ -3,6 +3,9 @@
  */
 package org.bukkit.craftbukkit.block.impl;
 
+import org.jetbrains.annotations.NotNull;
+
+
 public final class CraftStemAttached extends org.bukkit.craftbukkit.block.data.CraftBlockData implements org.bukkit.block.data.Directional {
 
     public CraftStemAttached() {
@@ -18,7 +21,7 @@ public final class CraftStemAttached extends org.bukkit.craftbukkit.block.data.C
     private static final net.minecraft.world.level.block.state.properties.EnumProperty<?> FACING = getEnum(net.minecraft.world.level.block.AttachedStemBlock.class, "facing");
 
     @Override
-    public org.bukkit.block.BlockFace getFacing() {
+    public org.bukkit.block.@NotNull BlockFace getFacing() {
         return get(CraftStemAttached.FACING, org.bukkit.block.BlockFace.class);
     }
 
@@ -28,7 +31,7 @@ public final class CraftStemAttached extends org.bukkit.craftbukkit.block.data.C
     }
 
     @Override
-    public java.util.Set<org.bukkit.block.BlockFace> getFaces() {
+    public java.util.@NotNull Set<org.bukkit.block.BlockFace> getFaces() {
         return getValues(CraftStemAttached.FACING, org.bukkit.block.BlockFace.class);
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftStepAbstract.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftStepAbstract.java
index b6266a6a34f9d6f7f7bdf1c722177dbba143a532..7c2274ea4fdb97be6aba38fab8ce609af21c6edd 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftStepAbstract.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftStepAbstract.java
@@ -3,6 +3,9 @@
  */
 package org.bukkit.craftbukkit.block.impl;
 
+import org.jetbrains.annotations.NotNull;
+
+
 public final class CraftStepAbstract extends org.bukkit.craftbukkit.block.data.CraftBlockData implements org.bukkit.block.data.type.Slab, org.bukkit.block.data.Waterlogged {
 
     public CraftStepAbstract() {
@@ -18,7 +21,7 @@ public final class CraftStepAbstract extends org.bukkit.craftbukkit.block.data.C
     private static final net.minecraft.world.level.block.state.properties.EnumProperty<?> TYPE = getEnum(net.minecraft.world.level.block.SlabBlock.class, "type");
 
     @Override
-    public org.bukkit.block.data.type.Slab.Type getType() {
+    public org.bukkit.block.data.type.Slab.@NotNull Type getType() {
         return get(CraftStepAbstract.TYPE, org.bukkit.block.data.type.Slab.Type.class);
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftStonecutter.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftStonecutter.java
index d7a4e687605bb3ce9ecccf4e3e494e60b7bcd0fa..e241644d6dc119712093ee5299406675c0040a19 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftStonecutter.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftStonecutter.java
@@ -3,6 +3,9 @@
  */
 package org.bukkit.craftbukkit.block.impl;
 
+import org.jetbrains.annotations.NotNull;
+
+
 public final class CraftStonecutter extends org.bukkit.craftbukkit.block.data.CraftBlockData implements org.bukkit.block.data.Directional {
 
     public CraftStonecutter() {
@@ -18,7 +21,7 @@ public final class CraftStonecutter extends org.bukkit.craftbukkit.block.data.Cr
     private static final net.minecraft.world.level.block.state.properties.EnumProperty<?> FACING = getEnum(net.minecraft.world.level.block.StonecutterBlock.class, "facing");
 
     @Override
-    public org.bukkit.block.BlockFace getFacing() {
+    public org.bukkit.block.@NotNull BlockFace getFacing() {
         return get(CraftStonecutter.FACING, org.bukkit.block.BlockFace.class);
     }
 
@@ -28,7 +31,7 @@ public final class CraftStonecutter extends org.bukkit.craftbukkit.block.data.Cr
     }
 
     @Override
-    public java.util.Set<org.bukkit.block.BlockFace> getFaces() {
+    public java.util.@NotNull Set<org.bukkit.block.BlockFace> getFaces() {
         return getValues(CraftStonecutter.FACING, org.bukkit.block.BlockFace.class);
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftStructure.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftStructure.java
index 4fe2135e5546d7b317e8959677f5eb2ca18da2a4..b0eceb72698a9b94e84ee0eb12206c6cd3103b02 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftStructure.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftStructure.java
@@ -3,6 +3,9 @@
  */
 package org.bukkit.craftbukkit.block.impl;
 
+import org.jetbrains.annotations.NotNull;
+
+
 public final class CraftStructure extends org.bukkit.craftbukkit.block.data.CraftBlockData implements org.bukkit.block.data.type.StructureBlock {
 
     public CraftStructure() {
@@ -18,7 +21,7 @@ public final class CraftStructure extends org.bukkit.craftbukkit.block.data.Craf
     private static final net.minecraft.world.level.block.state.properties.EnumProperty<?> MODE = getEnum(net.minecraft.world.level.block.StructureBlock.class, "mode");
 
     @Override
-    public org.bukkit.block.data.type.StructureBlock.Mode getMode() {
+    public org.bukkit.block.data.type.StructureBlock.@NotNull Mode getMode() {
         return get(CraftStructure.MODE, org.bukkit.block.data.type.StructureBlock.Mode.class);
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftTallPlant.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftTallPlant.java
index 66b1091e8c399d487fe54e433d552d1c53872514..aae1e3dd39076a73fd79d4bbbd15b6a8ce74933e 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftTallPlant.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftTallPlant.java
@@ -3,6 +3,9 @@
  */
 package org.bukkit.craftbukkit.block.impl;
 
+import org.jetbrains.annotations.NotNull;
+
+
 public final class CraftTallPlant extends org.bukkit.craftbukkit.block.data.CraftBlockData implements org.bukkit.block.data.Bisected {
 
     public CraftTallPlant() {
@@ -18,7 +21,7 @@ public final class CraftTallPlant extends org.bukkit.craftbukkit.block.data.Craf
     private static final net.minecraft.world.level.block.state.properties.EnumProperty<?> HALF = getEnum(net.minecraft.world.level.block.DoublePlantBlock.class, "half");
 
     @Override
-    public org.bukkit.block.data.Bisected.Half getHalf() {
+    public org.bukkit.block.data.Bisected.@NotNull Half getHalf() {
         return get(CraftTallPlant.HALF, org.bukkit.block.data.Bisected.Half.class);
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftTallPlantFlower.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftTallPlantFlower.java
index f3b0fd7f870b18d81b34b333c6d120544fd14540..fd300dee08dacdf5766d34a8c184a63197ba1688 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftTallPlantFlower.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftTallPlantFlower.java
@@ -3,6 +3,9 @@
  */
 package org.bukkit.craftbukkit.block.impl;
 
+import org.jetbrains.annotations.NotNull;
+
+
 public final class CraftTallPlantFlower extends org.bukkit.craftbukkit.block.data.CraftBlockData implements org.bukkit.block.data.Bisected {
 
     public CraftTallPlantFlower() {
@@ -18,7 +21,7 @@ public final class CraftTallPlantFlower extends org.bukkit.craftbukkit.block.dat
     private static final net.minecraft.world.level.block.state.properties.EnumProperty<?> HALF = getEnum(net.minecraft.world.level.block.TallFlowerBlock.class, "half");
 
     @Override
-    public org.bukkit.block.data.Bisected.Half getHalf() {
+    public org.bukkit.block.data.Bisected.@NotNull Half getHalf() {
         return get(CraftTallPlantFlower.HALF, org.bukkit.block.data.Bisected.Half.class);
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftTallSeagrass.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftTallSeagrass.java
index 0ae9954f9de6167676eaad56420ae6a0e67f3cb3..babf0d034a7637f215e3e93ed5258d0d3de27e66 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftTallSeagrass.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftTallSeagrass.java
@@ -3,6 +3,9 @@
  */
 package org.bukkit.craftbukkit.block.impl;
 
+import org.jetbrains.annotations.NotNull;
+
+
 public final class CraftTallSeagrass extends org.bukkit.craftbukkit.block.data.CraftBlockData implements org.bukkit.block.data.Bisected {
 
     public CraftTallSeagrass() {
@@ -18,7 +21,7 @@ public final class CraftTallSeagrass extends org.bukkit.craftbukkit.block.data.C
     private static final net.minecraft.world.level.block.state.properties.EnumProperty<?> HALF = getEnum(net.minecraft.world.level.block.TallSeagrassBlock.class, "half");
 
     @Override
-    public org.bukkit.block.data.Bisected.Half getHalf() {
+    public org.bukkit.block.data.Bisected.@NotNull Half getHalf() {
         return get(CraftTallSeagrass.HALF, org.bukkit.block.data.Bisected.Half.class);
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftTorchWall.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftTorchWall.java
index a50d0044c60892820e9ecc82184631bb3790ad34..eacfe5cb965247d65e131b40f5a6dca9d1a9c97e 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftTorchWall.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftTorchWall.java
@@ -3,6 +3,9 @@
  */
 package org.bukkit.craftbukkit.block.impl;
 
+import org.jetbrains.annotations.NotNull;
+
+
 public final class CraftTorchWall extends org.bukkit.craftbukkit.block.data.CraftBlockData implements org.bukkit.block.data.Directional {
 
     public CraftTorchWall() {
@@ -18,7 +21,7 @@ public final class CraftTorchWall extends org.bukkit.craftbukkit.block.data.Craf
     private static final net.minecraft.world.level.block.state.properties.EnumProperty<?> FACING = getEnum(net.minecraft.world.level.block.WallTorchBlock.class, "facing");
 
     @Override
-    public org.bukkit.block.BlockFace getFacing() {
+    public org.bukkit.block.@NotNull BlockFace getFacing() {
         return get(CraftTorchWall.FACING, org.bukkit.block.BlockFace.class);
     }
 
@@ -28,7 +31,7 @@ public final class CraftTorchWall extends org.bukkit.craftbukkit.block.data.Craf
     }
 
     @Override
-    public java.util.Set<org.bukkit.block.BlockFace> getFaces() {
+    public java.util.@NotNull Set<org.bukkit.block.BlockFace> getFaces() {
         return getValues(CraftTorchWall.FACING, org.bukkit.block.BlockFace.class);
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftTrapdoor.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftTrapdoor.java
index 4337ff7ff354e0ccd2a6a1379c8b8a83e1c26770..ae74244cdc7710e65c84d4af1e4806c1167d8028 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftTrapdoor.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftTrapdoor.java
@@ -3,6 +3,9 @@
  */
 package org.bukkit.craftbukkit.block.impl;
 
+import org.jetbrains.annotations.NotNull;
+
+
 public final class CraftTrapdoor extends org.bukkit.craftbukkit.block.data.CraftBlockData implements org.bukkit.block.data.type.TrapDoor, org.bukkit.block.data.Bisected, org.bukkit.block.data.Directional, org.bukkit.block.data.Openable, org.bukkit.block.data.Powerable, org.bukkit.block.data.Waterlogged {
 
     public CraftTrapdoor() {
@@ -18,7 +21,7 @@ public final class CraftTrapdoor extends org.bukkit.craftbukkit.block.data.Craft
     private static final net.minecraft.world.level.block.state.properties.EnumProperty<?> HALF = getEnum(net.minecraft.world.level.block.TrapDoorBlock.class, "half");
 
     @Override
-    public org.bukkit.block.data.Bisected.Half getHalf() {
+    public org.bukkit.block.data.Bisected.@NotNull Half getHalf() {
         return get(CraftTrapdoor.HALF, org.bukkit.block.data.Bisected.Half.class);
     }
 
@@ -32,7 +35,7 @@ public final class CraftTrapdoor extends org.bukkit.craftbukkit.block.data.Craft
     private static final net.minecraft.world.level.block.state.properties.EnumProperty<?> FACING = getEnum(net.minecraft.world.level.block.TrapDoorBlock.class, "facing");
 
     @Override
-    public org.bukkit.block.BlockFace getFacing() {
+    public org.bukkit.block.@NotNull BlockFace getFacing() {
         return get(CraftTrapdoor.FACING, org.bukkit.block.BlockFace.class);
     }
 
@@ -42,7 +45,7 @@ public final class CraftTrapdoor extends org.bukkit.craftbukkit.block.data.Craft
     }
 
     @Override
-    public java.util.Set<org.bukkit.block.BlockFace> getFaces() {
+    public java.util.@NotNull Set<org.bukkit.block.BlockFace> getFaces() {
         return getValues(CraftTrapdoor.FACING, org.bukkit.block.BlockFace.class);
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftTripwire.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftTripwire.java
index 303a56a8f5a51c6a79aa362233fba1578b76ef94..a109b1b7989510253a2c5558d763f72686fe1236 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftTripwire.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftTripwire.java
@@ -3,6 +3,9 @@
  */
 package org.bukkit.craftbukkit.block.impl;
 
+import org.jetbrains.annotations.NotNull;
+
+
 public final class CraftTripwire extends org.bukkit.craftbukkit.block.data.CraftBlockData implements org.bukkit.block.data.type.Tripwire, org.bukkit.block.data.Attachable, org.bukkit.block.data.MultipleFacing, org.bukkit.block.data.Powerable {
 
     public CraftTripwire() {
@@ -48,7 +51,7 @@ public final class CraftTripwire extends org.bukkit.craftbukkit.block.data.Craft
     };
 
     @Override
-    public boolean hasFace(org.bukkit.block.BlockFace face) {
+    public boolean hasFace(org.bukkit.block.@NotNull BlockFace face) {
         net.minecraft.world.level.block.state.properties.BooleanProperty state = CraftTripwire.FACES[face.ordinal()];
         if (state == null) {
             throw new IllegalArgumentException("Non-allowed face " + face + ". Check MultipleFacing.getAllowedFaces.");
@@ -57,7 +60,7 @@ public final class CraftTripwire extends org.bukkit.craftbukkit.block.data.Craft
     }
 
     @Override
-    public void setFace(org.bukkit.block.BlockFace face, boolean has) {
+    public void setFace(org.bukkit.block.@NotNull BlockFace face, boolean has) {
         net.minecraft.world.level.block.state.properties.BooleanProperty state = CraftTripwire.FACES[face.ordinal()];
         if (state == null) {
             throw new IllegalArgumentException("Non-allowed face " + face + ". Check MultipleFacing.getAllowedFaces.");
@@ -66,7 +69,7 @@ public final class CraftTripwire extends org.bukkit.craftbukkit.block.data.Craft
     }
 
     @Override
-    public java.util.Set<org.bukkit.block.BlockFace> getFaces() {
+    public java.util.@NotNull Set<org.bukkit.block.BlockFace> getFaces() {
         com.google.common.collect.ImmutableSet.Builder<org.bukkit.block.BlockFace> faces = com.google.common.collect.ImmutableSet.builder();
 
         for (int i = 0; i < FACES.length; i++) {
@@ -79,7 +82,7 @@ public final class CraftTripwire extends org.bukkit.craftbukkit.block.data.Craft
     }
 
     @Override
-    public java.util.Set<org.bukkit.block.BlockFace> getAllowedFaces() {
+    public java.util.@NotNull Set<org.bukkit.block.BlockFace> getAllowedFaces() {
         com.google.common.collect.ImmutableSet.Builder<org.bukkit.block.BlockFace> faces = com.google.common.collect.ImmutableSet.builder();
 
         for (int i = 0; i < FACES.length; i++) {
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftTripwireHook.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftTripwireHook.java
index 5519a63fe3832965fef2066298a2a783907dff7a..c604dd209f08a495dc2e62a6d144f2a856dfd15f 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftTripwireHook.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftTripwireHook.java
@@ -3,6 +3,9 @@
  */
 package org.bukkit.craftbukkit.block.impl;
 
+import org.jetbrains.annotations.NotNull;
+
+
 public final class CraftTripwireHook extends org.bukkit.craftbukkit.block.data.CraftBlockData implements org.bukkit.block.data.type.TripwireHook, org.bukkit.block.data.Attachable, org.bukkit.block.data.Directional, org.bukkit.block.data.Powerable {
 
     public CraftTripwireHook() {
@@ -32,7 +35,7 @@ public final class CraftTripwireHook extends org.bukkit.craftbukkit.block.data.C
     private static final net.minecraft.world.level.block.state.properties.EnumProperty<?> FACING = getEnum(net.minecraft.world.level.block.TripWireHookBlock.class, "facing");
 
     @Override
-    public org.bukkit.block.BlockFace getFacing() {
+    public org.bukkit.block.@NotNull BlockFace getFacing() {
         return get(CraftTripwireHook.FACING, org.bukkit.block.BlockFace.class);
     }
 
@@ -42,7 +45,7 @@ public final class CraftTripwireHook extends org.bukkit.craftbukkit.block.data.C
     }
 
     @Override
-    public java.util.Set<org.bukkit.block.BlockFace> getFaces() {
+    public java.util.@NotNull Set<org.bukkit.block.BlockFace> getFaces() {
         return getValues(CraftTripwireHook.FACING, org.bukkit.block.BlockFace.class);
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftVine.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftVine.java
index a5c51b3c5c6442e737a522f1b77630d853606ecf..36af8ea8650dad6e462e79d2aae1e28a4a2bb89d 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftVine.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftVine.java
@@ -3,6 +3,9 @@
  */
 package org.bukkit.craftbukkit.block.impl;
 
+import org.jetbrains.annotations.NotNull;
+
+
 public final class CraftVine extends org.bukkit.craftbukkit.block.data.CraftBlockData implements org.bukkit.block.data.MultipleFacing {
 
     public CraftVine() {
@@ -20,7 +23,7 @@ public final class CraftVine extends org.bukkit.craftbukkit.block.data.CraftBloc
     };
 
     @Override
-    public boolean hasFace(org.bukkit.block.BlockFace face) {
+    public boolean hasFace(org.bukkit.block.@NotNull BlockFace face) {
         net.minecraft.world.level.block.state.properties.BooleanProperty state = CraftVine.FACES[face.ordinal()];
         if (state == null) {
             throw new IllegalArgumentException("Non-allowed face " + face + ". Check MultipleFacing.getAllowedFaces.");
@@ -29,7 +32,7 @@ public final class CraftVine extends org.bukkit.craftbukkit.block.data.CraftBloc
     }
 
     @Override
-    public void setFace(org.bukkit.block.BlockFace face, boolean has) {
+    public void setFace(org.bukkit.block.@NotNull BlockFace face, boolean has) {
         net.minecraft.world.level.block.state.properties.BooleanProperty state = CraftVine.FACES[face.ordinal()];
         if (state == null) {
             throw new IllegalArgumentException("Non-allowed face " + face + ". Check MultipleFacing.getAllowedFaces.");
@@ -38,7 +41,7 @@ public final class CraftVine extends org.bukkit.craftbukkit.block.data.CraftBloc
     }
 
     @Override
-    public java.util.Set<org.bukkit.block.BlockFace> getFaces() {
+    public java.util.@NotNull Set<org.bukkit.block.BlockFace> getFaces() {
         com.google.common.collect.ImmutableSet.Builder<org.bukkit.block.BlockFace> faces = com.google.common.collect.ImmutableSet.builder();
 
         for (int i = 0; i < FACES.length; i++) {
@@ -51,7 +54,7 @@ public final class CraftVine extends org.bukkit.craftbukkit.block.data.CraftBloc
     }
 
     @Override
-    public java.util.Set<org.bukkit.block.BlockFace> getAllowedFaces() {
+    public java.util.@NotNull Set<org.bukkit.block.BlockFace> getAllowedFaces() {
         com.google.common.collect.ImmutableSet.Builder<org.bukkit.block.BlockFace> faces = com.google.common.collect.ImmutableSet.builder();
 
         for (int i = 0; i < FACES.length; i++) {
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftWallSign.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftWallSign.java
index 6c0141c41ee5e887b5939c36810eee5a3eb55bf9..9689d1041cc5672d0461d3c3e9f2ee23e00f844d 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftWallSign.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftWallSign.java
@@ -3,6 +3,9 @@
  */
 package org.bukkit.craftbukkit.block.impl;
 
+import org.jetbrains.annotations.NotNull;
+
+
 public final class CraftWallSign extends org.bukkit.craftbukkit.block.data.CraftBlockData implements org.bukkit.block.data.type.WallSign, org.bukkit.block.data.Directional, org.bukkit.block.data.Waterlogged {
 
     public CraftWallSign() {
@@ -18,7 +21,7 @@ public final class CraftWallSign extends org.bukkit.craftbukkit.block.data.Craft
     private static final net.minecraft.world.level.block.state.properties.EnumProperty<?> FACING = getEnum(net.minecraft.world.level.block.WallSignBlock.class, "facing");
 
     @Override
-    public org.bukkit.block.BlockFace getFacing() {
+    public org.bukkit.block.@NotNull BlockFace getFacing() {
         return get(CraftWallSign.FACING, org.bukkit.block.BlockFace.class);
     }
 
@@ -28,7 +31,7 @@ public final class CraftWallSign extends org.bukkit.craftbukkit.block.data.Craft
     }
 
     @Override
-    public java.util.Set<org.bukkit.block.BlockFace> getFaces() {
+    public java.util.@NotNull Set<org.bukkit.block.BlockFace> getFaces() {
         return getValues(CraftWallSign.FACING, org.bukkit.block.BlockFace.class);
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftWeatheringCopperSlab.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftWeatheringCopperSlab.java
index 240733f81169a3a04f02008e2561a48166206809..e2ba2981c6d6457ce239882535d28a524cd4d7a2 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftWeatheringCopperSlab.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftWeatheringCopperSlab.java
@@ -3,6 +3,9 @@
  */
 package org.bukkit.craftbukkit.block.impl;
 
+import org.jetbrains.annotations.NotNull;
+
+
 public final class CraftWeatheringCopperSlab extends org.bukkit.craftbukkit.block.data.CraftBlockData implements org.bukkit.block.data.type.Slab, org.bukkit.block.data.Waterlogged {
 
     public CraftWeatheringCopperSlab() {
@@ -18,7 +21,7 @@ public final class CraftWeatheringCopperSlab extends org.bukkit.craftbukkit.bloc
     private static final net.minecraft.world.level.block.state.properties.EnumProperty<?> TYPE = getEnum(net.minecraft.world.level.block.WeatheringCopperSlabBlock.class, "type");
 
     @Override
-    public org.bukkit.block.data.type.Slab.Type getType() {
+    public org.bukkit.block.data.type.Slab.@NotNull Type getType() {
         return get(CraftWeatheringCopperSlab.TYPE, org.bukkit.block.data.type.Slab.Type.class);
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftWeatheringCopperStair.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftWeatheringCopperStair.java
index a514710f2ad93359d5e7bc1a1f9ef85b8305a6a6..b37ccbe7acc4a24d4170fe973039aa05487c8e9a 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftWeatheringCopperStair.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftWeatheringCopperStair.java
@@ -3,6 +3,9 @@
  */
 package org.bukkit.craftbukkit.block.impl;
 
+import org.jetbrains.annotations.NotNull;
+
+
 public final class CraftWeatheringCopperStair extends org.bukkit.craftbukkit.block.data.CraftBlockData implements org.bukkit.block.data.type.Stairs, org.bukkit.block.data.Bisected, org.bukkit.block.data.Directional, org.bukkit.block.data.Waterlogged {
 
     public CraftWeatheringCopperStair() {
@@ -18,7 +21,7 @@ public final class CraftWeatheringCopperStair extends org.bukkit.craftbukkit.blo
     private static final net.minecraft.world.level.block.state.properties.EnumProperty<?> SHAPE = getEnum(net.minecraft.world.level.block.WeatheringCopperStairBlock.class, "shape");
 
     @Override
-    public org.bukkit.block.data.type.Stairs.Shape getShape() {
+    public org.bukkit.block.data.type.Stairs.@NotNull Shape getShape() {
         return get(CraftWeatheringCopperStair.SHAPE, org.bukkit.block.data.type.Stairs.Shape.class);
     }
 
@@ -32,7 +35,7 @@ public final class CraftWeatheringCopperStair extends org.bukkit.craftbukkit.blo
     private static final net.minecraft.world.level.block.state.properties.EnumProperty<?> HALF = getEnum(net.minecraft.world.level.block.WeatheringCopperStairBlock.class, "half");
 
     @Override
-    public org.bukkit.block.data.Bisected.Half getHalf() {
+    public org.bukkit.block.data.Bisected.@NotNull Half getHalf() {
         return get(CraftWeatheringCopperStair.HALF, org.bukkit.block.data.Bisected.Half.class);
     }
 
@@ -46,7 +49,7 @@ public final class CraftWeatheringCopperStair extends org.bukkit.craftbukkit.blo
     private static final net.minecraft.world.level.block.state.properties.EnumProperty<?> FACING = getEnum(net.minecraft.world.level.block.WeatheringCopperStairBlock.class, "facing");
 
     @Override
-    public org.bukkit.block.BlockFace getFacing() {
+    public org.bukkit.block.@NotNull BlockFace getFacing() {
         return get(CraftWeatheringCopperStair.FACING, org.bukkit.block.BlockFace.class);
     }
 
@@ -56,7 +59,7 @@ public final class CraftWeatheringCopperStair extends org.bukkit.craftbukkit.blo
     }
 
     @Override
-    public java.util.Set<org.bukkit.block.BlockFace> getFaces() {
+    public java.util.@NotNull Set<org.bukkit.block.BlockFace> getFaces() {
         return getValues(CraftWeatheringCopperStair.FACING, org.bukkit.block.BlockFace.class);
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftWitherSkull.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftWitherSkull.java
index 0a0ec2fd79b80fec8fe4cdc7ff72f3842e529715..efeb4be543f812c1f3108182f2768d0b83132182 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftWitherSkull.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftWitherSkull.java
@@ -3,6 +3,9 @@
  */
 package org.bukkit.craftbukkit.block.impl;
 
+import org.jetbrains.annotations.NotNull;
+
+
 public final class CraftWitherSkull extends org.bukkit.craftbukkit.block.data.CraftBlockData implements org.bukkit.block.data.Rotatable {
 
     public CraftWitherSkull() {
@@ -18,7 +21,7 @@ public final class CraftWitherSkull extends org.bukkit.craftbukkit.block.data.Cr
     private static final net.minecraft.world.level.block.state.properties.IntegerProperty ROTATION = getInteger(net.minecraft.world.level.block.WitherSkullBlock.class, "rotation");
 
     @Override
-    public org.bukkit.block.BlockFace getRotation() {
+    public org.bukkit.block.@NotNull BlockFace getRotation() {
         int data = get(CraftWitherSkull.ROTATION);
         switch (data) {
             case 0x0:
@@ -59,7 +62,7 @@ public final class CraftWitherSkull extends org.bukkit.craftbukkit.block.data.Cr
     }
 
     @Override
-    public void setRotation(org.bukkit.block.BlockFace rotation) {
+    public void setRotation(org.bukkit.block.@NotNull BlockFace rotation) {
         int val;
         switch (rotation) {
             case SOUTH:
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftWitherSkullWall.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftWitherSkullWall.java
index aed818ea0d8d2f9d0a88bbf5f0ed1b638a7498dc..e6885f5bc66345cfcba87010a20181563a7317c2 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftWitherSkullWall.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftWitherSkullWall.java
@@ -3,6 +3,9 @@
  */
 package org.bukkit.craftbukkit.block.impl;
 
+import org.jetbrains.annotations.NotNull;
+
+
 public final class CraftWitherSkullWall extends org.bukkit.craftbukkit.block.data.CraftBlockData implements org.bukkit.block.data.Directional {
 
     public CraftWitherSkullWall() {
@@ -18,7 +21,7 @@ public final class CraftWitherSkullWall extends org.bukkit.craftbukkit.block.dat
     private static final net.minecraft.world.level.block.state.properties.EnumProperty<?> FACING = getEnum(net.minecraft.world.level.block.WitherWallSkullBlock.class, "facing");
 
     @Override
-    public org.bukkit.block.BlockFace getFacing() {
+    public org.bukkit.block.@NotNull BlockFace getFacing() {
         return get(CraftWitherSkullWall.FACING, org.bukkit.block.BlockFace.class);
     }
 
@@ -28,7 +31,7 @@ public final class CraftWitherSkullWall extends org.bukkit.craftbukkit.block.dat
     }
 
     @Override
-    public java.util.Set<org.bukkit.block.BlockFace> getFaces() {
+    public java.util.@NotNull Set<org.bukkit.block.BlockFace> getFaces() {
         return getValues(CraftWitherSkullWall.FACING, org.bukkit.block.BlockFace.class);
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/bootstrap/Main.java b/src/main/java/org/bukkit/craftbukkit/bootstrap/Main.java
index 9a2ec50be757dfa3780a49ec96942fed89ed530c..b0febcae44823c8d89e1b421df6669f3f80dddfc 100644
--- a/src/main/java/org/bukkit/craftbukkit/bootstrap/Main.java
+++ b/src/main/java/org/bukkit/craftbukkit/bootstrap/Main.java
@@ -1,6 +1,8 @@
 // Based on net.minecraft.bundler.Main
 package org.bukkit.craftbukkit.bootstrap;
 
+import org.jetbrains.annotations.NotNull;
+
 import java.io.BufferedReader;
 import java.io.IOException;
 import java.io.InputStream;
@@ -71,7 +73,7 @@ public class Main {
         }
     }
 
-    private <T> T readResource(String resource, ResourceParser<T> parser) throws Exception {
+    private <T> T readResource(String resource, @NotNull ResourceParser<T> parser) throws Exception {
         String fullPath = "/META-INF/" + resource;
         try (InputStream is = getClass().getResourceAsStream(fullPath)) {
             if (is == null) {
@@ -81,7 +83,7 @@ public class Main {
         }
     }
 
-    private void readAndExtractDir(String subdir, Path outputDir, List<URL> extractedUrls, boolean readOnly) throws Exception {
+    private void readAndExtractDir(@NotNull String subdir, @NotNull Path outputDir, @NotNull List<URL> extractedUrls, boolean readOnly) throws Exception {
         List<FileEntry> entries = this.readResource(subdir + ".list", reader -> reader.lines().map(FileEntry::parseLine).toList());
         Path subdirPath = outputDir.resolve(subdir);
         for (FileEntry entry : entries) {
@@ -96,14 +98,14 @@ public class Main {
         }
     }
 
-    private void checkAndExtractJar(String subdir, FileEntry entry, Path outputFile) throws Exception {
+    private void checkAndExtractJar(String subdir, @NotNull FileEntry entry, @NotNull Path outputFile) throws Exception {
         if (!Files.exists(outputFile) || !Main.checkIntegrity(outputFile, entry.hash())) {
             System.out.printf("Unpacking %s (%s:%s) to %s%n", entry.path, subdir, entry.id, outputFile);
             this.extractJar(subdir, entry.path, outputFile);
         }
     }
 
-    private void extractJar(String subdir, String jarPath, Path outputFile) throws IOException {
+    private void extractJar(String subdir, String jarPath, @NotNull Path outputFile) throws IOException {
         Files.createDirectories(outputFile.getParent());
 
         try (InputStream input = getClass().getResourceAsStream("/META-INF/" + subdir + "/" + jarPath)) {
@@ -115,7 +117,7 @@ public class Main {
         }
     }
 
-    private static boolean checkIntegrity(Path file, String expectedHash) throws Exception {
+    private static boolean checkIntegrity(@NotNull Path file, String expectedHash) throws Exception {
         MessageDigest digest = MessageDigest.getInstance("SHA-256");
 
         try (InputStream output = Files.newInputStream(file)) {
@@ -131,7 +133,7 @@ public class Main {
         return false;
     }
 
-    private static String byteToHex(byte[] bytes) {
+    private static @NotNull String byteToHex(byte @NotNull [] bytes) {
         StringBuilder result = new StringBuilder(bytes.length * 2);
         for (byte b : bytes) {
             result.append(Character.forDigit(b >> 4 & 0xF, 16));
@@ -148,7 +150,7 @@ public class Main {
 
     private static final record FileEntry(String hash, String id, String path) {
 
-        public static FileEntry parseLine(String line) {
+        public static @NotNull FileEntry parseLine(@NotNull String line) {
             String[] fields = line.split(" ");
             if (fields.length != 2) {
                 throw new IllegalStateException("Malformed library entry: " + line);
diff --git a/src/main/java/org/bukkit/craftbukkit/boss/CraftBossBar.java b/src/main/java/org/bukkit/craftbukkit/boss/CraftBossBar.java
index c23eac5d85d7d5a4b3645c7ed68e3174e8096786..b295c96eeb66fba29148eee79b17eeeab4ad051d 100644
--- a/src/main/java/org/bukkit/craftbukkit/boss/CraftBossBar.java
+++ b/src/main/java/org/bukkit/craftbukkit/boss/CraftBossBar.java
@@ -18,13 +18,16 @@ import org.bukkit.boss.BossBar;
 import org.bukkit.craftbukkit.entity.CraftPlayer;
 import org.bukkit.craftbukkit.util.CraftChatMessage;
 import org.bukkit.entity.Player;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 public class CraftBossBar implements BossBar {
 
     private final ServerBossEvent handle;
     private Map<BarFlag, FlagContainer> flags;
 
-    public CraftBossBar(String title, BarColor color, BarStyle style, BarFlag... flags) {
+    public CraftBossBar(String title, @NotNull BarColor color, @NotNull BarStyle style, BarFlag @NotNull ... flags) {
         this.handle = new ServerBossEvent(
                 CraftChatMessage.fromString(title, true)[0],
                 this.convertColor(color),
@@ -53,17 +56,17 @@ public class CraftBossBar implements BossBar {
         this.flags.put(BarFlag.CREATE_FOG, new FlagContainer(handle::shouldCreateWorldFog, handle::setCreateWorldFog));
     }
 
-    private BarColor convertColor(BossEvent.BossBarColor color) {
+    private @NotNull BarColor convertColor(BossEvent.@NotNull BossBarColor color) {
         BarColor bukkitColor = BarColor.valueOf(color.name());
         return (bukkitColor == null) ? BarColor.WHITE : bukkitColor;
     }
 
-    private BossEvent.BossBarColor convertColor(BarColor color) {
+    private BossEvent.@NotNull BossBarColor convertColor(@NotNull BarColor color) {
         BossEvent.BossBarColor nmsColor = BossEvent.BossBarColor.valueOf(color.name());
         return (nmsColor == null) ? BossEvent.BossBarColor.WHITE : nmsColor;
     }
 
-    private BossEvent.BossBarOverlay convertStyle(BarStyle style) {
+    private BossEvent.@NotNull BossBarOverlay convertStyle(@NotNull BarStyle style) {
         switch (style) {
             default:
             case SOLID:
@@ -79,7 +82,7 @@ public class CraftBossBar implements BossBar {
         }
     }
 
-    private BarStyle convertStyle(BossEvent.BossBarOverlay style) {
+    private @NotNull BarStyle convertStyle(BossEvent.@NotNull BossBarOverlay style) {
         switch (style) {
             default:
             case PROGRESS:
@@ -96,7 +99,7 @@ public class CraftBossBar implements BossBar {
     }
 
     @Override
-    public String getTitle() {
+    public @NotNull String getTitle() {
         return CraftChatMessage.fromComponent(handle.name);
     }
 
@@ -107,23 +110,23 @@ public class CraftBossBar implements BossBar {
     }
 
     @Override
-    public BarColor getColor() {
+    public @NotNull BarColor getColor() {
         return this.convertColor(handle.color);
     }
 
     @Override
-    public void setColor(BarColor color) {
+    public void setColor(@NotNull BarColor color) {
         handle.color = this.convertColor(color);
         this.handle.broadcast(ClientboundBossEventPacket::createUpdateStylePacket);
     }
 
     @Override
-    public BarStyle getStyle() {
+    public @NotNull BarStyle getStyle() {
         return this.convertStyle(handle.overlay);
     }
 
     @Override
-    public void setStyle(BarStyle style) {
+    public void setStyle(@NotNull BarStyle style) {
         handle.overlay = this.convertStyle(style);
         this.handle.broadcast(ClientboundBossEventPacket::createUpdateStylePacket);
     }
@@ -165,7 +168,7 @@ public class CraftBossBar implements BossBar {
     }
 
     @Override
-    public void addPlayer(Player player) {
+    public void addPlayer(@Nullable Player player) {
         Preconditions.checkArgument(player != null, "player == null");
         Preconditions.checkArgument(((CraftPlayer) player).getHandle().connection != null, "player is not fully connected (wait for PlayerJoinEvent)");
 
@@ -173,14 +176,14 @@ public class CraftBossBar implements BossBar {
     }
 
     @Override
-    public void removePlayer(Player player) {
+    public void removePlayer(@Nullable Player player) {
         Preconditions.checkArgument(player != null, "player == null");
 
         this.handle.removePlayer(((CraftPlayer) player).getHandle());
     }
 
     @Override
-    public List<Player> getPlayers() {
+    public @NotNull List<Player> getPlayers() {
         ImmutableList.Builder<Player> players = ImmutableList.builder();
         for (ServerPlayer p : this.handle.getPlayers()) {
             players.add(p.getBukkitEntity());
diff --git a/src/main/java/org/bukkit/craftbukkit/boss/CraftDragonBattle.java b/src/main/java/org/bukkit/craftbukkit/boss/CraftDragonBattle.java
index 9c1dbdffa18107924cdda5f935631c1e0f652455..87e94c7b98a1e96b7ae937f78b51d0660a63b965 100644
--- a/src/main/java/org/bukkit/craftbukkit/boss/CraftDragonBattle.java
+++ b/src/main/java/org/bukkit/craftbukkit/boss/CraftDragonBattle.java
@@ -9,6 +9,9 @@ import org.bukkit.boss.BossBar;
 import org.bukkit.boss.DragonBattle;
 import org.bukkit.boss.DragonBattle.RespawnPhase;
 import org.bukkit.entity.EnderDragon;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 public class CraftDragonBattle implements DragonBattle {
 
@@ -25,7 +28,7 @@ public class CraftDragonBattle implements DragonBattle {
     }
 
     @Override
-    public BossBar getBossBar() {
+    public @NotNull BossBar getBossBar() {
         return new CraftBossBar(handle.dragonEvent);
     }
 
@@ -59,12 +62,12 @@ public class CraftDragonBattle implements DragonBattle {
     }
 
     @Override
-    public RespawnPhase getRespawnPhase() {
+    public @NotNull RespawnPhase getRespawnPhase() {
         return this.toBukkitRespawnPhase(handle.respawnStage);
     }
 
     @Override
-    public boolean setRespawnPhase(RespawnPhase phase) {
+    public boolean setRespawnPhase(@Nullable RespawnPhase phase) {
         Preconditions.checkArgument(phase != null && phase != RespawnPhase.NONE, "Invalid respawn phase provided: %s", phase);
 
         if (handle.respawnStage == null) {
@@ -90,11 +93,11 @@ public class CraftDragonBattle implements DragonBattle {
         return obj instanceof CraftDragonBattle && ((CraftDragonBattle) obj).handle == this.handle;
     }
 
-    private RespawnPhase toBukkitRespawnPhase(DragonRespawnAnimation phase) {
+    private RespawnPhase toBukkitRespawnPhase(@Nullable DragonRespawnAnimation phase) {
         return (phase != null) ? RespawnPhase.values()[phase.ordinal()] : RespawnPhase.NONE;
     }
 
-    private DragonRespawnAnimation toNMSRespawnPhase(RespawnPhase phase) {
+    private @Nullable DragonRespawnAnimation toNMSRespawnPhase(@NotNull RespawnPhase phase) {
         return (phase != RespawnPhase.NONE) ? DragonRespawnAnimation.values()[phase.ordinal()] : null;
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/boss/CraftKeyedBossbar.java b/src/main/java/org/bukkit/craftbukkit/boss/CraftKeyedBossbar.java
index e380793e3436e5d311ae600fb7fa35f9a22794b9..d6d1df383b8f868ace642eacaabb5da88dc46015 100644
--- a/src/main/java/org/bukkit/craftbukkit/boss/CraftKeyedBossbar.java
+++ b/src/main/java/org/bukkit/craftbukkit/boss/CraftKeyedBossbar.java
@@ -4,6 +4,8 @@ import net.minecraft.server.bossevents.CustomBossEvent;
 import org.bukkit.NamespacedKey;
 import org.bukkit.boss.KeyedBossBar;
 import org.bukkit.craftbukkit.util.CraftNamespacedKey;
+import org.jetbrains.annotations.NotNull;
+
 
 public class CraftKeyedBossbar extends CraftBossBar implements KeyedBossBar {
 
@@ -12,7 +14,7 @@ public class CraftKeyedBossbar extends CraftBossBar implements KeyedBossBar {
     }
 
     @Override
-    public NamespacedKey getKey() {
+    public @NotNull NamespacedKey getKey() {
         return CraftNamespacedKey.fromMinecraft(this.getHandle().getTextId());
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/command/BukkitCommandWrapper.java b/src/main/java/org/bukkit/craftbukkit/command/BukkitCommandWrapper.java
index 26f3a2799e687731d883e7733591f6934479e88d..941ba9495d7f20ce9b3e44a54e7398af8d70c5a3 100644
--- a/src/main/java/org/bukkit/craftbukkit/command/BukkitCommandWrapper.java
+++ b/src/main/java/org/bukkit/craftbukkit/command/BukkitCommandWrapper.java
@@ -19,6 +19,9 @@ import org.bukkit.command.Command;
 import org.bukkit.command.CommandException;
 import org.bukkit.command.CommandSender;
 import org.bukkit.craftbukkit.CraftServer;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 public class BukkitCommandWrapper implements com.mojang.brigadier.Command<CommandSourceStack>, Predicate<CommandSourceStack>, SuggestionProvider<CommandSourceStack>, com.destroystokyo.paper.brigadier.BukkitBrigadierCommand<CommandSourceStack> { // Paper
 
@@ -30,7 +33,7 @@ public class BukkitCommandWrapper implements com.mojang.brigadier.Command<Comman
         this.command = command;
     }
 
-    public LiteralCommandNode<CommandSourceStack> register(CommandDispatcher<CommandSourceStack> dispatcher, String label) {
+    public @Nullable LiteralCommandNode<CommandSourceStack> register(@NotNull CommandDispatcher<CommandSourceStack> dispatcher, String label) {
         // Paper start - Expose Brigadier to Paper-MojangAPI
         com.mojang.brigadier.tree.RootCommandNode<CommandSourceStack> root = dispatcher.getRoot();
         LiteralCommandNode<CommandSourceStack> literal = LiteralArgumentBuilder.<CommandSourceStack>literal(label).requires(this).executes(this).build();
@@ -52,12 +55,12 @@ public class BukkitCommandWrapper implements com.mojang.brigadier.Command<Comman
     }
 
     @Override
-    public boolean test(CommandSourceStack wrapper) {
+    public boolean test(@NotNull CommandSourceStack wrapper) {
         return this.command.testPermissionSilent(wrapper.getBukkitSender());
     }
 
     @Override
-    public int run(CommandContext<CommandSourceStack> context) throws CommandSyntaxException {
+    public int run(@NotNull CommandContext<CommandSourceStack> context) throws CommandSyntaxException {
         CommandSender sender = context.getSource().getBukkitSender();
 
         try {
@@ -70,7 +73,7 @@ public class BukkitCommandWrapper implements com.mojang.brigadier.Command<Comman
     }
 
     @Override
-    public CompletableFuture<Suggestions> getSuggestions(CommandContext<CommandSourceStack> context, SuggestionsBuilder builder) throws CommandSyntaxException {
+    public CompletableFuture<Suggestions> getSuggestions(@NotNull CommandContext<CommandSourceStack> context, @NotNull SuggestionsBuilder builder) throws CommandSyntaxException {
         List<String> results = this.server.tabComplete(context.getSource().getBukkitSender(), builder.getInput(), context.getSource().getLevel(), context.getSource().getPosition(), true);
 
         // Defaults to sub nodes, but we have just one giant args node, so offset accordingly
diff --git a/src/main/java/org/bukkit/craftbukkit/command/ConsoleCommandCompleter.java b/src/main/java/org/bukkit/craftbukkit/command/ConsoleCommandCompleter.java
index cd4ad8261e56365850068db1d83d6a8454026737..b47916c0bf3584908838962cbcf92ca016df570f 100644
--- a/src/main/java/org/bukkit/craftbukkit/command/ConsoleCommandCompleter.java
+++ b/src/main/java/org/bukkit/craftbukkit/command/ConsoleCommandCompleter.java
@@ -9,6 +9,7 @@ import org.bukkit.craftbukkit.CraftServer;
 import org.bukkit.craftbukkit.util.Waitable;
 
 // Paper start - JLine update
+import org.jetbrains.annotations.NotNull;
 import org.jline.reader.Candidate;
 import org.jline.reader.Completer;
 import org.jline.reader.LineReader;
@@ -18,7 +19,7 @@ import org.bukkit.event.server.TabCompleteEvent;
 
 public class ConsoleCommandCompleter implements Completer {
     private final DedicatedServer server; // Paper - CraftServer -> DedicatedServer
-    private final io.papermc.paper.console.BrigadierCommandCompleter brigadierCompleter; // Paper
+    private final io.papermc.paper.console.@NotNull BrigadierCommandCompleter brigadierCompleter; // Paper
 
     public ConsoleCommandCompleter(DedicatedServer server) { // Paper - CraftServer -> DedicatedServer
         this.server = server;
@@ -27,7 +28,7 @@ public class ConsoleCommandCompleter implements Completer {
 
     // Paper start - Change method signature for JLine update
     @Override
-    public void complete(LineReader reader, ParsedLine line, List<Candidate> candidates) {
+    public void complete(@NotNull LineReader reader, @NotNull ParsedLine line, @NotNull List<Candidate> candidates) {
         final CraftServer server = this.server.server;
         final String buffer = line.line();
         // Async Tab Complete
@@ -42,7 +43,7 @@ public class ConsoleCommandCompleter implements Completer {
                 List<com.destroystokyo.paper.event.server.AsyncTabCompleteEvent.Completion> finalCompletions = new java.util.ArrayList<>(completions);
                 Waitable<List<String>> syncCompletions = new Waitable<List<String>>() {
                     @Override
-                    protected List<String> evaluate() {
+                    protected @NotNull List<String> evaluate() {
                         org.bukkit.event.server.TabCompleteEvent syncEvent = new org.bukkit.event.server.TabCompleteEvent(server.getConsoleSender(), buffer,
                             finalCompletions.stream()
                                 .map(com.destroystokyo.paper.event.server.AsyncTabCompleteEvent.Completion::suggestion)
@@ -89,7 +90,7 @@ public class ConsoleCommandCompleter implements Completer {
         // Paper end
         Waitable<List<String>> waitable = new Waitable<List<String>>() {
             @Override
-            protected List<String> evaluate() {
+            protected @NotNull List<String> evaluate() {
                 List<String> offers = server.getCommandMap().tabComplete(server.getConsoleSender(), buffer); // Paper - fix remap
 
                 TabCompleteEvent tabEvent = new TabCompleteEvent(server.getConsoleSender(), buffer, (offers == null) ? Collections.EMPTY_LIST : offers); // Paper - fix remap
@@ -137,7 +138,7 @@ public class ConsoleCommandCompleter implements Completer {
     }
 
     // Paper start
-    private boolean notNewSuggestion(final List<com.destroystokyo.paper.event.server.AsyncTabCompleteEvent.Completion> completions, final String completion) {
+    private boolean notNewSuggestion(final @NotNull List<com.destroystokyo.paper.event.server.AsyncTabCompleteEvent.Completion> completions, final String completion) {
         for (final com.destroystokyo.paper.event.server.AsyncTabCompleteEvent.Completion it : completions) {
             if (it.suggestion().equals(completion)) {
                 return true;
@@ -146,7 +147,7 @@ public class ConsoleCommandCompleter implements Completer {
         return false;
     }
 
-    private void addCompletions(final LineReader reader, final ParsedLine line, final List<Candidate> candidates, final List<com.destroystokyo.paper.event.server.AsyncTabCompleteEvent.Completion> existing) {
+    private void addCompletions(final @NotNull LineReader reader, final @NotNull ParsedLine line, final @NotNull List<Candidate> candidates, final @NotNull List<com.destroystokyo.paper.event.server.AsyncTabCompleteEvent.Completion> existing) {
         this.brigadierCompleter.complete(reader, line, candidates, existing);
     }
     // Paper end
diff --git a/src/main/java/org/bukkit/craftbukkit/command/CraftBlockCommandSender.java b/src/main/java/org/bukkit/craftbukkit/command/CraftBlockCommandSender.java
index 87f2cea36d852c81fdb0a1bc21162d41377ab2e7..7b738fff93bbb8b87c3b2669dc559193d5f91c48 100644
--- a/src/main/java/org/bukkit/craftbukkit/command/CraftBlockCommandSender.java
+++ b/src/main/java/org/bukkit/craftbukkit/command/CraftBlockCommandSender.java
@@ -7,6 +7,8 @@ import org.bukkit.block.Block;
 import org.bukkit.command.BlockCommandSender;
 import org.bukkit.craftbukkit.block.CraftBlock;
 import org.bukkit.craftbukkit.util.CraftChatMessage;
+import org.jetbrains.annotations.NotNull;
+
 
 /**
  * Represents input from a command block
@@ -22,7 +24,7 @@ public class CraftBlockCommandSender extends ServerCommandSender implements Bloc
     }
 
     @Override
-    public Block getBlock() {
+    public @NotNull Block getBlock() {
         return CraftBlock.at(this.tile.getLevel(), this.tile.getBlockPos());
     }
 
@@ -34,14 +36,14 @@ public class CraftBlockCommandSender extends ServerCommandSender implements Bloc
     }
 
     @Override
-    public void sendMessage(String... messages) {
+    public void sendMessage(String @NotNull ... messages) {
         for (String message : messages) {
             this.sendMessage(message);
         }
     }
 
     @Override
-    public String getName() {
+    public @NotNull String getName() {
         return this.block.getTextName();
     }
 
@@ -52,7 +54,7 @@ public class CraftBlockCommandSender extends ServerCommandSender implements Bloc
     }
 
     @Override
-    public net.kyori.adventure.text.Component name() {
+    public net.kyori.adventure.text.@NotNull Component name() {
         return io.papermc.paper.adventure.PaperAdventure.asAdventure(this.block.getDisplayName());
     }
     // Paper end
diff --git a/src/main/java/org/bukkit/craftbukkit/command/CraftCommandMap.java b/src/main/java/org/bukkit/craftbukkit/command/CraftCommandMap.java
index 2fd69c0f915f1c3cb1c410d5dab0498f05d5c888..648eeb1c5ba0c6d85b4ef79f86525d33b31b6ae6 100644
--- a/src/main/java/org/bukkit/craftbukkit/command/CraftCommandMap.java
+++ b/src/main/java/org/bukkit/craftbukkit/command/CraftCommandMap.java
@@ -4,14 +4,16 @@ import java.util.Map;
 import org.bukkit.Server;
 import org.bukkit.command.Command;
 import org.bukkit.command.SimpleCommandMap;
+import org.jetbrains.annotations.NotNull;
+
 
 public class CraftCommandMap extends SimpleCommandMap {
 
-    public CraftCommandMap(Server server) {
+    public CraftCommandMap(@NotNull Server server) {
         super(server);
     }
 
-    public Map<String, Command> getKnownCommands() {
+    public @NotNull Map<String, Command> getKnownCommands() {
         return knownCommands;
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/command/CraftConsoleCommandSender.java b/src/main/java/org/bukkit/craftbukkit/command/CraftConsoleCommandSender.java
index 4e56018b64d11f76c8da43fd8f85c6de72204e36..1ac25b13c9536be7df84dfb57629f772d049ce09 100644
--- a/src/main/java/org/bukkit/craftbukkit/command/CraftConsoleCommandSender.java
+++ b/src/main/java/org/bukkit/craftbukkit/command/CraftConsoleCommandSender.java
@@ -7,6 +7,8 @@ import org.bukkit.conversations.Conversation;
 import org.bukkit.conversations.ConversationAbandonedEvent;
 import org.bukkit.conversations.ManuallyAbandonedConversationCanceller;
 import org.bukkit.craftbukkit.conversations.ConversationTracker;
+import org.jetbrains.annotations.NotNull;
+
 
 /**
  * Represents CLI input from a console
@@ -35,20 +37,20 @@ public class CraftConsoleCommandSender extends ServerCommandSender implements Co
     }
 
     @Override
-    public void sendMessage(String... messages) {
+    public void sendMessage(String @NotNull ... messages) {
         for (String message : messages) {
             this.sendMessage(message);
         }
     }
 
     @Override
-    public String getName() {
+    public @NotNull String getName() {
         return "CONSOLE";
     }
 
     // Paper start
     @Override
-    public net.kyori.adventure.text.Component name() {
+    public net.kyori.adventure.text.@NotNull Component name() {
         return net.kyori.adventure.text.Component.text(this.getName());
     }
     // Paper end
@@ -69,7 +71,7 @@ public class CraftConsoleCommandSender extends ServerCommandSender implements Co
     }
 
     @Override
-    public void abandonConversation(Conversation conversation) {
+    public void abandonConversation(@NotNull Conversation conversation) {
         this.conversationTracker.abandonConversation(conversation, new ConversationAbandonedEvent(conversation, new ManuallyAbandonedConversationCanceller()));
     }
 
@@ -90,17 +92,17 @@ public class CraftConsoleCommandSender extends ServerCommandSender implements Co
 
     // Paper start
     @Override
-    public void sendMessage(final net.kyori.adventure.identity.Identity identity, final net.kyori.adventure.text.Component message, final net.kyori.adventure.audience.MessageType type) {
+    public void sendMessage(final net.kyori.adventure.identity.Identity identity, final net.kyori.adventure.text.@NotNull Component message, final net.kyori.adventure.audience.MessageType type) {
         this.sendRawMessage(net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().serialize(message));
     }
 
     @Override
-    public boolean hasPermission(String name) {
+    public boolean hasPermission(@NotNull String name) {
         return io.papermc.paper.configuration.GlobalConfiguration.get().console.hasAllPermissions || super.hasPermission(name);
     }
 
     @Override
-    public boolean hasPermission(org.bukkit.permissions.Permission perm) {
+    public boolean hasPermission(org.bukkit.permissions.@NotNull Permission perm) {
         return io.papermc.paper.configuration.GlobalConfiguration.get().console.hasAllPermissions || super.hasPermission(perm);
     }
     // Paper end
diff --git a/src/main/java/org/bukkit/craftbukkit/command/CraftRemoteConsoleCommandSender.java b/src/main/java/org/bukkit/craftbukkit/command/CraftRemoteConsoleCommandSender.java
index dfc15cfd897316f64a063b8ae93a0882ab5b3993..8bc5988753ad11728e6417fa2ce129ebfb83423a 100644
--- a/src/main/java/org/bukkit/craftbukkit/command/CraftRemoteConsoleCommandSender.java
+++ b/src/main/java/org/bukkit/craftbukkit/command/CraftRemoteConsoleCommandSender.java
@@ -3,6 +3,8 @@ package org.bukkit.craftbukkit.command;
 import net.minecraft.network.chat.Component;
 import net.minecraft.server.rcon.RconConsoleSource;
 import org.bukkit.command.RemoteConsoleCommandSender;
+import org.jetbrains.annotations.NotNull;
+
 
 public class CraftRemoteConsoleCommandSender extends ServerCommandSender implements RemoteConsoleCommandSender {
 
@@ -18,20 +20,20 @@ public class CraftRemoteConsoleCommandSender extends ServerCommandSender impleme
     }
 
     @Override
-    public void sendMessage(String... messages) {
+    public void sendMessage(String @NotNull ... messages) {
         for (String message : messages) {
             this.sendMessage(message);
         }
     }
 
     @Override
-    public String getName() {
+    public @NotNull String getName() {
         return "Rcon";
     }
 
     // Paper start
     @Override
-    public net.kyori.adventure.text.Component name() {
+    public net.kyori.adventure.text.@NotNull Component name() {
         return net.kyori.adventure.text.Component.text(this.getName());
     }
     // Paper end
@@ -48,12 +50,12 @@ public class CraftRemoteConsoleCommandSender extends ServerCommandSender impleme
 
     // Paper start
     @Override
-    public boolean hasPermission(String name) {
+    public boolean hasPermission(@NotNull String name) {
         return io.papermc.paper.configuration.GlobalConfiguration.get().console.hasAllPermissions || super.hasPermission(name);
     }
 
     @Override
-    public boolean hasPermission(org.bukkit.permissions.Permission perm) {
+    public boolean hasPermission(org.bukkit.permissions.@NotNull Permission perm) {
         return io.papermc.paper.configuration.GlobalConfiguration.get().console.hasAllPermissions || super.hasPermission(perm);
     }
     // Paper end
diff --git a/src/main/java/org/bukkit/craftbukkit/command/ProxiedNativeCommandSender.java b/src/main/java/org/bukkit/craftbukkit/command/ProxiedNativeCommandSender.java
index 3e7d14564f11a3ed0b0766444e9d681804597e9a..15d1abfa895a1d34f9c6f3e9f3d733ed3d24efc1 100644
--- a/src/main/java/org/bukkit/craftbukkit/command/ProxiedNativeCommandSender.java
+++ b/src/main/java/org/bukkit/craftbukkit/command/ProxiedNativeCommandSender.java
@@ -10,6 +10,8 @@ import org.bukkit.permissions.Permission;
 import org.bukkit.permissions.PermissionAttachment;
 import org.bukkit.permissions.PermissionAttachmentInfo;
 import org.bukkit.plugin.Plugin;
+import org.jetbrains.annotations.NotNull;
+
 
 public class ProxiedNativeCommandSender implements ProxiedCommandSender {
 
@@ -28,17 +30,17 @@ public class ProxiedNativeCommandSender implements ProxiedCommandSender {
     }
 
     @Override
-    public CommandSender getCaller() {
+    public @NotNull CommandSender getCaller() {
         return this.caller;
     }
 
     @Override
-    public CommandSender getCallee() {
+    public @NotNull CommandSender getCallee() {
         return this.callee;
     }
 
     @Override
-    public void sendMessage(String message) {
+    public void sendMessage(@NotNull String message) {
         this.getCaller().sendMessage(message);
     }
 
@@ -48,7 +50,7 @@ public class ProxiedNativeCommandSender implements ProxiedCommandSender {
     }
 
     @Override
-    public void sendMessage(UUID sender, String message) {
+    public void sendMessage(UUID sender, @NotNull String message) {
         this.getCaller().sendMessage(sender, message);
     }
 
@@ -58,64 +60,64 @@ public class ProxiedNativeCommandSender implements ProxiedCommandSender {
     }
 
     @Override
-    public Server getServer() {
+    public @NotNull Server getServer() {
         return this.getCallee().getServer();
     }
 
     @Override
-    public String getName() {
+    public @NotNull String getName() {
         return this.getCallee().getName();
     }
 
     // Paper start
     @Override
-    public net.kyori.adventure.text.Component name() {
+    public net.kyori.adventure.text.@NotNull Component name() {
         return this.getCallee().name();
     }
     // Paper end
 
     @Override
-    public boolean isPermissionSet(String name) {
+    public boolean isPermissionSet(@NotNull String name) {
         return this.getCaller().isPermissionSet(name);
     }
 
     @Override
-    public boolean isPermissionSet(Permission perm) {
+    public boolean isPermissionSet(@NotNull Permission perm) {
         return this.getCaller().isPermissionSet(perm);
     }
 
     @Override
-    public boolean hasPermission(String name) {
+    public boolean hasPermission(@NotNull String name) {
         return this.getCaller().hasPermission(name);
     }
 
     @Override
-    public boolean hasPermission(Permission perm) {
+    public boolean hasPermission(@NotNull Permission perm) {
         return this.getCaller().hasPermission(perm);
     }
 
     @Override
-    public PermissionAttachment addAttachment(Plugin plugin, String name, boolean value) {
+    public @NotNull PermissionAttachment addAttachment(@NotNull Plugin plugin, @NotNull String name, boolean value) {
         return this.getCaller().addAttachment(plugin, name, value);
     }
 
     @Override
-    public PermissionAttachment addAttachment(Plugin plugin) {
+    public @NotNull PermissionAttachment addAttachment(@NotNull Plugin plugin) {
         return this.getCaller().addAttachment(plugin);
     }
 
     @Override
-    public PermissionAttachment addAttachment(Plugin plugin, String name, boolean value, int ticks) {
+    public PermissionAttachment addAttachment(@NotNull Plugin plugin, @NotNull String name, boolean value, int ticks) {
         return this.getCaller().addAttachment(plugin, name, value, ticks);
     }
 
     @Override
-    public PermissionAttachment addAttachment(Plugin plugin, int ticks) {
+    public PermissionAttachment addAttachment(@NotNull Plugin plugin, int ticks) {
         return this.getCaller().addAttachment(plugin, ticks);
     }
 
     @Override
-    public void removeAttachment(PermissionAttachment attachment) {
+    public void removeAttachment(@NotNull PermissionAttachment attachment) {
         this.getCaller().removeAttachment(attachment);
     }
 
@@ -125,7 +127,7 @@ public class ProxiedNativeCommandSender implements ProxiedCommandSender {
     }
 
     @Override
-    public Set<PermissionAttachmentInfo> getEffectivePermissions() {
+    public @NotNull Set<PermissionAttachmentInfo> getEffectivePermissions() {
         return this.getCaller().getEffectivePermissions();
     }
 
@@ -141,7 +143,7 @@ public class ProxiedNativeCommandSender implements ProxiedCommandSender {
 
     // Spigot start
     @Override
-    public org.bukkit.command.CommandSender.Spigot spigot()
+    public org.bukkit.command.CommandSender.@NotNull Spigot spigot()
     {
        return this.getCaller().spigot();
     }
diff --git a/src/main/java/org/bukkit/craftbukkit/command/ServerCommandSender.java b/src/main/java/org/bukkit/craftbukkit/command/ServerCommandSender.java
index 1c638a4b1f2c841928d8b2a7ae43e4ebb1f7eac7..5e4e91ae14abcd723348f2fa596c4a3abd8a2d6b 100644
--- a/src/main/java/org/bukkit/craftbukkit/command/ServerCommandSender.java
+++ b/src/main/java/org/bukkit/craftbukkit/command/ServerCommandSender.java
@@ -10,6 +10,8 @@ import org.bukkit.permissions.Permission;
 import org.bukkit.permissions.PermissionAttachment;
 import org.bukkit.permissions.PermissionAttachmentInfo;
 import org.bukkit.plugin.Plugin;
+import org.jetbrains.annotations.NotNull;
+
 
 public abstract class ServerCommandSender implements CommandSender {
     private static PermissibleBase blockPermInst;
@@ -34,47 +36,47 @@ public abstract class ServerCommandSender implements CommandSender {
     }
 
     @Override
-    public boolean isPermissionSet(String name) {
+    public boolean isPermissionSet(@NotNull String name) {
         return this.perm.isPermissionSet(name);
     }
 
     @Override
-    public boolean isPermissionSet(Permission perm) {
+    public boolean isPermissionSet(@NotNull Permission perm) {
         return this.perm.isPermissionSet(perm);
     }
 
     @Override
-    public boolean hasPermission(String name) {
+    public boolean hasPermission(@NotNull String name) {
         return this.perm.hasPermission(name);
     }
 
     @Override
-    public boolean hasPermission(Permission perm) {
+    public boolean hasPermission(@NotNull Permission perm) {
         return this.perm.hasPermission(perm);
     }
 
     @Override
-    public PermissionAttachment addAttachment(Plugin plugin, String name, boolean value) {
+    public @NotNull PermissionAttachment addAttachment(@NotNull Plugin plugin, @NotNull String name, boolean value) {
         return this.perm.addAttachment(plugin, name, value);
     }
 
     @Override
-    public PermissionAttachment addAttachment(Plugin plugin) {
+    public @NotNull PermissionAttachment addAttachment(@NotNull Plugin plugin) {
         return this.perm.addAttachment(plugin);
     }
 
     @Override
-    public PermissionAttachment addAttachment(Plugin plugin, String name, boolean value, int ticks) {
+    public PermissionAttachment addAttachment(@NotNull Plugin plugin, @NotNull String name, boolean value, int ticks) {
         return this.perm.addAttachment(plugin, name, value, ticks);
     }
 
     @Override
-    public PermissionAttachment addAttachment(Plugin plugin, int ticks) {
+    public PermissionAttachment addAttachment(@NotNull Plugin plugin, int ticks) {
         return this.perm.addAttachment(plugin, ticks);
     }
 
     @Override
-    public void removeAttachment(PermissionAttachment attachment) {
+    public void removeAttachment(@NotNull PermissionAttachment attachment) {
         this.perm.removeAttachment(attachment);
     }
 
@@ -84,7 +86,7 @@ public abstract class ServerCommandSender implements CommandSender {
     }
 
     @Override
-    public Set<PermissionAttachmentInfo> getEffectivePermissions() {
+    public @NotNull Set<PermissionAttachmentInfo> getEffectivePermissions() {
         return this.perm.getEffectivePermissions();
     }
 
@@ -93,12 +95,12 @@ public abstract class ServerCommandSender implements CommandSender {
     }
 
     @Override
-    public Server getServer() {
+    public @NotNull Server getServer() {
         return Bukkit.getServer();
     }
 
     @Override
-    public void sendMessage(UUID uuid, String message) {
+    public void sendMessage(UUID uuid, @NotNull String message) {
         this.sendMessage(message); // ServerCommandSenders have no use for senders
     }
 
@@ -136,7 +138,7 @@ public abstract class ServerCommandSender implements CommandSender {
     };
 
     @Override
-    public org.bukkit.command.CommandSender.Spigot spigot()
+    public org.bukkit.command.CommandSender.@NotNull Spigot spigot()
     {
         return this.spigot;
     }
@@ -144,7 +146,7 @@ public abstract class ServerCommandSender implements CommandSender {
 
     // Paper start - implement pointers
     @Override
-    public net.kyori.adventure.pointer.Pointers pointers() {
+    public net.kyori.adventure.pointer.@NotNull Pointers pointers() {
         if (this.adventure$pointers == null) {
             this.adventure$pointers = net.kyori.adventure.pointer.Pointers.builder()
                 .withDynamic(net.kyori.adventure.identity.Identity.DISPLAY_NAME, this::name)
diff --git a/src/main/java/org/bukkit/craftbukkit/command/VanillaCommandWrapper.java b/src/main/java/org/bukkit/craftbukkit/command/VanillaCommandWrapper.java
index 6035af2cf08353b3d3801220d8116d8611a0cd37..e8fe6609406ea2a44ee9847f3956f6260ceef9ac 100644
--- a/src/main/java/org/bukkit/craftbukkit/command/VanillaCommandWrapper.java
+++ b/src/main/java/org/bukkit/craftbukkit/command/VanillaCommandWrapper.java
@@ -24,13 +24,15 @@ import org.bukkit.craftbukkit.entity.CraftMinecartCommand;
 import org.bukkit.craftbukkit.entity.CraftPlayer;
 import org.bukkit.entity.Player;
 import org.bukkit.entity.minecart.CommandMinecart;
+import org.jetbrains.annotations.NotNull;
+
 
 public final class VanillaCommandWrapper extends BukkitCommand {
 
     private final Commands dispatcher;
-    public final CommandNode<CommandSourceStack> vanillaCommand;
+    public final @NotNull CommandNode<CommandSourceStack> vanillaCommand;
 
-    public VanillaCommandWrapper(Commands dispatcher, CommandNode<CommandSourceStack> vanillaCommand) {
+    public VanillaCommandWrapper(Commands dispatcher, @NotNull CommandNode<CommandSourceStack> vanillaCommand) {
         super(vanillaCommand.getName(), "A Mojang provided command.", vanillaCommand.getUsageText(), Collections.EMPTY_LIST);
         this.dispatcher = dispatcher;
         this.vanillaCommand = vanillaCommand;
@@ -38,7 +40,7 @@ public final class VanillaCommandWrapper extends BukkitCommand {
     }
 
     @Override
-    public boolean execute(CommandSender sender, String commandLabel, String[] args) {
+    public boolean execute(@NotNull CommandSender sender, String commandLabel, String @NotNull [] args) {
         if (!testPermission(sender)) return true;
 
         CommandSourceStack icommandlistener = VanillaCommandWrapper.getListener(sender);
@@ -47,7 +49,7 @@ public final class VanillaCommandWrapper extends BukkitCommand {
     }
 
     @Override
-    public List<String> tabComplete(CommandSender sender, String alias, String[] args, Location location) throws IllegalArgumentException {
+    public @NotNull List<String> tabComplete(CommandSender sender, String alias, String @NotNull [] args, Location location) throws IllegalArgumentException {
         Validate.notNull(sender, "Sender cannot be null");
         Validate.notNull(args, "Arguments cannot be null");
         Validate.notNull(alias, "Alias cannot be null");
@@ -93,7 +95,7 @@ public final class VanillaCommandWrapper extends BukkitCommand {
         throw new IllegalArgumentException("Cannot make " + sender + " a vanilla command listener");
     }
 
-    public static String getPermission(CommandNode<CommandSourceStack> vanillaCommand) {
+    public static @NotNull String getPermission(@NotNull CommandNode<CommandSourceStack> vanillaCommand) {
         // Paper start
         final String commandName;
         if (vanillaCommand.getRedirect() == null) {
@@ -104,7 +106,7 @@ public final class VanillaCommandWrapper extends BukkitCommand {
         return "minecraft.command." + stripDefaultNamespace(commandName);
     }
 
-    private static String stripDefaultNamespace(final String maybeNamespaced) {
+    private static @NotNull String stripDefaultNamespace(final @NotNull String maybeNamespaced) {
         final String prefix = "minecraft:";
         if (maybeNamespaced.startsWith(prefix)) {
             return maybeNamespaced.substring(prefix.length());
@@ -113,7 +115,7 @@ public final class VanillaCommandWrapper extends BukkitCommand {
         // Paper end
     }
 
-    private String toDispatcher(String[] args, String name) {
+    private @NotNull String toDispatcher(String @NotNull [] args, String name) {
         return name + ((args.length > 0) ? " " + Joiner.on(' ').join(args) : "");
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/configuration/ConfigSerializationUtil.java b/src/main/java/org/bukkit/craftbukkit/configuration/ConfigSerializationUtil.java
index 4bf58b0b908e8edb53ea69e4cdbf5acdf698632c..f1f0f6ad47b7c89061c31d855d11e7a16a60d742 100644
--- a/src/main/java/org/bukkit/craftbukkit/configuration/ConfigSerializationUtil.java
+++ b/src/main/java/org/bukkit/craftbukkit/configuration/ConfigSerializationUtil.java
@@ -4,23 +4,26 @@ import java.util.Map;
 import java.util.NoSuchElementException;
 import java.util.UUID;
 import org.bukkit.configuration.serialization.ConfigurationSerializable;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 /**
  * Utilities related to the serialization and deserialization of {@link ConfigurationSerializable}s.
  */
 public final class ConfigSerializationUtil {
 
-    public static String getString(Map<?, ?> map, String key, boolean nullable) {
+    public static @Nullable String getString(@NotNull Map<?, ?> map, String key, boolean nullable) {
         return ConfigSerializationUtil.getObject(String.class, map, key, nullable);
     }
 
-    public static UUID getUuid(Map<?, ?> map, String key, boolean nullable) {
+    public static @Nullable UUID getUuid(@NotNull Map<?, ?> map, String key, boolean nullable) {
         String uuidString = ConfigSerializationUtil.getString(map, key, nullable);
         if (uuidString == null) return null;
         return UUID.fromString(uuidString);
     }
 
-    public static <T> T getObject(Class<T> clazz, Map<?, ?> map, String key, boolean nullable) {
+    public static <T> @Nullable T getObject(@NotNull Class<T> clazz, @NotNull Map<?, ?> map, String key, boolean nullable) {
         final Object object = map.get(key);
         if (clazz.isInstance(object)) {
             return clazz.cast(object);
diff --git a/src/main/java/org/bukkit/craftbukkit/conversations/ConversationTracker.java b/src/main/java/org/bukkit/craftbukkit/conversations/ConversationTracker.java
index 335939ac1267489b0f4e63b447f0207327d7e36e..6e81f2e980775f25e75cce62eb98ea2734f175db 100644
--- a/src/main/java/org/bukkit/craftbukkit/conversations/ConversationTracker.java
+++ b/src/main/java/org/bukkit/craftbukkit/conversations/ConversationTracker.java
@@ -6,14 +6,16 @@ import org.bukkit.Bukkit;
 import org.bukkit.conversations.Conversation;
 import org.bukkit.conversations.ConversationAbandonedEvent;
 import org.bukkit.conversations.ManuallyAbandonedConversationCanceller;
+import org.jetbrains.annotations.NotNull;
+
 
 /**
  */
 public class ConversationTracker {
 
-    private LinkedList<Conversation> conversationQueue = new LinkedList<Conversation>();
+    private @NotNull LinkedList<Conversation> conversationQueue = new LinkedList<Conversation>();
 
-    public synchronized boolean beginConversation(Conversation conversation) {
+    public synchronized boolean beginConversation(@NotNull Conversation conversation) {
         if (!this.conversationQueue.contains(conversation)) {
             this.conversationQueue.addLast(conversation);
             if (this.conversationQueue.getFirst() == conversation) {
@@ -25,7 +27,7 @@ public class ConversationTracker {
         return true;
     }
 
-    public synchronized void abandonConversation(Conversation conversation, ConversationAbandonedEvent details) {
+    public synchronized void abandonConversation(@NotNull Conversation conversation, @NotNull ConversationAbandonedEvent details) {
         if (!this.conversationQueue.isEmpty()) {
             if (this.conversationQueue.getFirst() == conversation) {
                 conversation.abandon(details);
@@ -52,7 +54,7 @@ public class ConversationTracker {
         }
     }
 
-    public synchronized void acceptConversationInput(String input) {
+    public synchronized void acceptConversationInput(@NotNull String input) {
         if (this.isConversing()) {
             Conversation conversation = this.conversationQueue.getFirst();
             try {
diff --git a/src/main/java/org/bukkit/craftbukkit/enchantments/CraftEnchantment.java b/src/main/java/org/bukkit/craftbukkit/enchantments/CraftEnchantment.java
index 3d0ce0803e1da8a2681a3cb41096ac942ece54a1..701da6276daee88283cdcc0ca92c5aa1a767f47d 100644
--- a/src/main/java/org/bukkit/craftbukkit/enchantments/CraftEnchantment.java
+++ b/src/main/java/org/bukkit/craftbukkit/enchantments/CraftEnchantment.java
@@ -9,11 +9,13 @@ import org.bukkit.enchantments.Enchantment;
 import org.bukkit.enchantments.EnchantmentTarget;
 import org.bukkit.enchantments.EnchantmentWrapper;
 import org.bukkit.inventory.ItemStack;
+import org.jetbrains.annotations.NotNull;
+
 
 public class CraftEnchantment extends Enchantment {
-    private final net.minecraft.world.item.enchantment.Enchantment target;
+    private final net.minecraft.world.item.enchantment.@NotNull Enchantment target;
 
-    public CraftEnchantment(net.minecraft.world.item.enchantment.Enchantment target) {
+    public CraftEnchantment(net.minecraft.world.item.enchantment.@NotNull Enchantment target) {
         super(CraftNamespacedKey.fromMinecraft(BuiltInRegistries.ENCHANTMENT.getKey(target)));
         this.target = target;
     }
@@ -29,7 +31,7 @@ public class CraftEnchantment extends Enchantment {
     }
 
     @Override
-    public EnchantmentTarget getItemTarget() {
+    public @NotNull EnchantmentTarget getItemTarget() {
         switch (target.category) {
         case ARMOR:
             return EnchantmentTarget.ARMOR;
@@ -80,7 +82,7 @@ public class CraftEnchantment extends Enchantment {
     }
 
     @Override
-    public String getName() {
+    public @NotNull String getName() {
         // PAIL: migration paths
         switch (BuiltInRegistries.ENCHANTMENT.getId(target)) {
         case 0:
@@ -191,12 +193,12 @@ public class CraftEnchantment extends Enchantment {
     }
     // Paper start
     @Override
-    public net.kyori.adventure.text.Component displayName(int level) {
+    public net.kyori.adventure.text.@NotNull Component displayName(int level) {
         return io.papermc.paper.adventure.PaperAdventure.asAdventure(getHandle().getFullname(level));
     }
 
     @Override
-    public String translationKey() {
+    public @NotNull String translationKey() {
         return this.target.getDescriptionId();
     }
 
@@ -211,21 +213,21 @@ public class CraftEnchantment extends Enchantment {
     }
 
     @Override
-    public io.papermc.paper.enchantments.EnchantmentRarity getRarity() {
+    public io.papermc.paper.enchantments.@NotNull EnchantmentRarity getRarity() {
         return fromNMSRarity(target.getRarity());
     }
 
     @Override
-    public float getDamageIncrease(int level, org.bukkit.entity.EntityCategory entityCategory) {
+    public float getDamageIncrease(int level, org.bukkit.entity.@NotNull EntityCategory entityCategory) {
         return target.getDamageBonus(level, org.bukkit.craftbukkit.entity.CraftLivingEntity.fromBukkitEntityCategory(entityCategory));
     }
 
     @Override
-    public java.util.Set<org.bukkit.inventory.EquipmentSlot> getActiveSlots() {
+    public java.util.@NotNull Set<org.bukkit.inventory.EquipmentSlot> getActiveSlots() {
         return java.util.stream.Stream.of(target.slots).map(org.bukkit.craftbukkit.CraftEquipmentSlot::getSlot).collect(java.util.stream.Collectors.toSet());
     }
 
-    public static io.papermc.paper.enchantments.EnchantmentRarity fromNMSRarity(net.minecraft.world.item.enchantment.Enchantment.Rarity nmsRarity) {
+    public static io.papermc.paper.enchantments.@NotNull EnchantmentRarity fromNMSRarity(net.minecraft.world.item.enchantment.Enchantment.Rarity nmsRarity) {
         if (nmsRarity == net.minecraft.world.item.enchantment.Enchantment.Rarity.COMMON) {
             return io.papermc.paper.enchantments.EnchantmentRarity.COMMON;
         } else if (nmsRarity == net.minecraft.world.item.enchantment.Enchantment.Rarity.UNCOMMON) {
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftAbstractHorse.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftAbstractHorse.java
index 299ab868252c8f326e3a56e878c9ee230c9635dc..c491d7bce691f81e685f05bb9712ba48440df3fd 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftAbstractHorse.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftAbstractHorse.java
@@ -10,6 +10,9 @@ import org.bukkit.entity.AbstractHorse;
 import org.bukkit.entity.AnimalTamer;
 import org.bukkit.entity.Horse;
 import org.bukkit.inventory.AbstractHorseInventory;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 public abstract class CraftAbstractHorse extends CraftAnimals implements AbstractHorse {
 
@@ -78,7 +81,7 @@ public abstract class CraftAbstractHorse extends CraftAnimals implements Abstrac
     }
 
     @Override
-    public void setOwner(AnimalTamer owner) {
+    public void setOwner(@Nullable AnimalTamer owner) {
         if (owner != null) {
             this.setTamed(true);
             this.getHandle().setTarget(null, null, false);
@@ -93,7 +96,7 @@ public abstract class CraftAbstractHorse extends CraftAnimals implements Abstrac
     public UUID getOwnerUniqueId() {
         return getOwnerUUID();
     }
-    public UUID getOwnerUUID() {
+    public @Nullable UUID getOwnerUUID() {
         return this.getHandle().getOwnerUUID();
     }
 
@@ -112,7 +115,7 @@ public abstract class CraftAbstractHorse extends CraftAnimals implements Abstrac
     }
 
     @Override
-    public AbstractHorseInventory getInventory() {
+    public @NotNull AbstractHorseInventory getInventory() {
         return new CraftSaddledInventory(getHandle().inventory);
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftAbstractVillager.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftAbstractVillager.java
index 762354681315e4c74e414bf7d677b5422385161e..62696493d1022977c18ce07a9372dfda947562d9 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftAbstractVillager.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftAbstractVillager.java
@@ -10,6 +10,8 @@ import org.bukkit.entity.HumanEntity;
 import org.bukkit.inventory.Inventory;
 import org.bukkit.inventory.InventoryHolder;
 import org.bukkit.inventory.MerchantRecipe;
+import org.jetbrains.annotations.NotNull;
+
 
 public class CraftAbstractVillager extends CraftAgeable implements AbstractVillager, InventoryHolder {
 
@@ -23,31 +25,31 @@ public class CraftAbstractVillager extends CraftAgeable implements AbstractVilla
     }
 
     @Override
-    public String toString() {
+    public @NotNull String toString() {
         return "CraftAbstractVillager";
     }
 
     @Override
-    public Inventory getInventory() {
+    public @NotNull Inventory getInventory() {
         return new CraftInventory(this.getHandle().getInventory());
     }
 
-    private CraftMerchant getMerchant() {
+    private @NotNull CraftMerchant getMerchant() {
         return this.getHandle().getCraftMerchant();
     }
 
     @Override
-    public List<MerchantRecipe> getRecipes() {
+    public @NotNull List<MerchantRecipe> getRecipes() {
         return this.getMerchant().getRecipes();
     }
 
     @Override
-    public void setRecipes(List<MerchantRecipe> recipes) {
+    public void setRecipes(@NotNull List<MerchantRecipe> recipes) {
         this.getMerchant().setRecipes(recipes);
     }
 
     @Override
-    public MerchantRecipe getRecipe(int i) {
+    public @NotNull MerchantRecipe getRecipe(int i) {
         return this.getMerchant().getRecipe(i);
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftAllay.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftAllay.java
index 6dfb0b47bd77fa4584744b3a54267879521b540a..3f15532f422b50b8da609ebbd5e9943e856aeea6 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftAllay.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftAllay.java
@@ -9,6 +9,8 @@ import org.bukkit.craftbukkit.CraftServer;
 import org.bukkit.craftbukkit.inventory.CraftInventory;
 import org.bukkit.entity.EntityType;
 import org.bukkit.inventory.Inventory;
+import org.jetbrains.annotations.NotNull;
+
 
 public class CraftAllay extends CraftCreature implements org.bukkit.entity.Allay {
 
@@ -22,17 +24,17 @@ public class CraftAllay extends CraftCreature implements org.bukkit.entity.Allay
     }
 
     @Override
-    public String toString() {
+    public @NotNull String toString() {
         return "CraftAllay";
     }
 
     @Override
-    public EntityType getType() {
+    public @NotNull EntityType getType() {
         return EntityType.ALLAY;
     }
 
     @Override
-    public Inventory getInventory() {
+    public @NotNull Inventory getInventory() {
         return new CraftInventory(this.getHandle().getInventory());
     }
 
@@ -67,7 +69,7 @@ public class CraftAllay extends CraftCreature implements org.bukkit.entity.Allay
     }
 
     @Override
-    public void startDancing(Location location) {
+    public void startDancing(@NotNull Location location) {
         Preconditions.checkArgument(location != null, "Location cannot be null");
         Preconditions.checkArgument(location.getBlock().getType().equals(Material.JUKEBOX), "The Block in the Location need to be a JukeBox");
         this.getHandle().setJukeboxPlaying(new BlockPos(location.getX(), location.getY(), location.getZ()), true);
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftAmbient.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftAmbient.java
index 91573773dba9ca008d209bb4f9c11e82b9d33d26..59fcd00945dc1d0e0849ee80439baf586df3a2c8 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftAmbient.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftAmbient.java
@@ -4,6 +4,8 @@ import net.minecraft.world.entity.ambient.AmbientCreature;
 import org.bukkit.craftbukkit.CraftServer;
 import org.bukkit.entity.Ambient;
 import org.bukkit.entity.EntityType;
+import org.jetbrains.annotations.NotNull;
+
 
 public class CraftAmbient extends CraftMob implements Ambient {
     public CraftAmbient(CraftServer server, AmbientCreature entity) {
@@ -16,12 +18,12 @@ public class CraftAmbient extends CraftMob implements Ambient {
     }
 
     @Override
-    public String toString() {
+    public @NotNull String toString() {
         return "CraftAmbient";
     }
 
     @Override
-    public EntityType getType() {
+    public @NotNull EntityType getType() {
         return EntityType.UNKNOWN;
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftAnimals.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftAnimals.java
index 56bc26f227b97e8e935a20c6393d3f2eb806b285..5ae2bfcc1a6ce2be178d6672d3cced8a52d64f1a 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftAnimals.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftAnimals.java
@@ -8,6 +8,8 @@ import org.bukkit.craftbukkit.CraftServer;
 import org.bukkit.craftbukkit.inventory.CraftItemStack;
 import org.bukkit.entity.Animals;
 import org.bukkit.inventory.ItemStack;
+import org.jetbrains.annotations.NotNull;
+
 
 public class CraftAnimals extends CraftAgeable implements Animals {
 
@@ -57,7 +59,7 @@ public class CraftAnimals extends CraftAgeable implements Animals {
     }
 
     @Override
-    public boolean isBreedItem(Material material) {
+    public boolean isBreedItem(@NotNull Material material) {
         return this.isBreedItem(new ItemStack(material));
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftAreaEffectCloud.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftAreaEffectCloud.java
index fec308cbc8fb27036301fe27a1169ac7368f9732..6bc9cfde9abc7d65f3bd7f2f041a152b68d404c5 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftAreaEffectCloud.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftAreaEffectCloud.java
@@ -17,6 +17,8 @@ import org.bukkit.potion.PotionData;
 import org.bukkit.potion.PotionEffect;
 import org.bukkit.potion.PotionEffectType;
 import org.bukkit.projectiles.ProjectileSource;
+import org.jetbrains.annotations.NotNull;
+
 
 public class CraftAreaEffectCloud extends CraftEntity implements AreaEffectCloud {
 
@@ -30,12 +32,12 @@ public class CraftAreaEffectCloud extends CraftEntity implements AreaEffectCloud
     }
 
     @Override
-    public String toString() {
+    public @NotNull String toString() {
         return "CraftAreaEffectCloud";
     }
 
     @Override
-    public EntityType getType() {
+    public @NotNull EntityType getType() {
         return EntityType.AREA_EFFECT_CLOUD;
     }
 
@@ -110,7 +112,7 @@ public class CraftAreaEffectCloud extends CraftEntity implements AreaEffectCloud
     }
 
     @Override
-    public Particle getParticle() {
+    public @NotNull Particle getParticle() {
         return CraftParticle.toBukkit(this.getHandle().getParticle());
     }
 
@@ -125,17 +127,17 @@ public class CraftAreaEffectCloud extends CraftEntity implements AreaEffectCloud
     }
 
     @Override
-    public Color getColor() {
+    public @NotNull Color getColor() {
         return Color.fromRGB(this.getHandle().getColor());
     }
 
     @Override
-    public void setColor(Color color) {
+    public void setColor(@NotNull Color color) {
         this.getHandle().setFixedColor(color.asRGB());
     }
 
     @Override
-    public boolean addCustomEffect(PotionEffect effect, boolean override) {
+    public boolean addCustomEffect(@NotNull PotionEffect effect, boolean override) {
         int effectId = effect.getType().getId();
         MobEffectInstance existing = null;
         for (MobEffectInstance mobEffect : this.getHandle().effects) {
@@ -161,7 +163,7 @@ public class CraftAreaEffectCloud extends CraftEntity implements AreaEffectCloud
     }
 
     @Override
-    public List<PotionEffect> getCustomEffects() {
+    public @NotNull List<PotionEffect> getCustomEffects() {
         ImmutableList.Builder<PotionEffect> builder = ImmutableList.builder();
         for (MobEffectInstance effect : this.getHandle().effects) {
             builder.add(CraftPotionUtil.toBukkit(effect));
@@ -185,7 +187,7 @@ public class CraftAreaEffectCloud extends CraftEntity implements AreaEffectCloud
     }
 
     @Override
-    public boolean removeCustomEffect(PotionEffectType effect) {
+    public boolean removeCustomEffect(@NotNull PotionEffectType effect) {
         int effectId = effect.getId();
         MobEffectInstance existing = null;
         for (MobEffectInstance mobEffect : this.getHandle().effects) {
@@ -202,13 +204,13 @@ public class CraftAreaEffectCloud extends CraftEntity implements AreaEffectCloud
     }
 
     @Override
-    public void setBasePotionData(PotionData data) {
+    public void setBasePotionData(@NotNull PotionData data) {
         Validate.notNull(data, "PotionData cannot be null");
         this.getHandle().setPotionType(CraftPotionUtil.fromBukkit(data));
     }
 
     @Override
-    public PotionData getBasePotionData() {
+    public @NotNull PotionData getBasePotionData() {
         return CraftPotionUtil.toBukkit(this.getHandle().getPotionType());
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftArmorStand.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftArmorStand.java
index f80cafe3544c7e6c3c29073ba6539783adf6666c..29245d8537e588db3474bacfa52fdb4fcb55d297 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftArmorStand.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftArmorStand.java
@@ -9,6 +9,8 @@ import org.bukkit.entity.EntityType;
 import org.bukkit.inventory.EquipmentSlot;
 import org.bukkit.inventory.ItemStack;
 import org.bukkit.util.EulerAngle;
+import org.jetbrains.annotations.NotNull;
+
 
 public class CraftArmorStand extends CraftLivingEntity implements ArmorStand {
 
@@ -17,12 +19,12 @@ public class CraftArmorStand extends CraftLivingEntity implements ArmorStand {
     }
 
     @Override
-    public String toString() {
+    public @NotNull String toString() {
         return "CraftArmorStand";
     }
 
     @Override
-    public EntityType getType() {
+    public @NotNull EntityType getType() {
         return EntityType.ARMOR_STAND;
     }
 
@@ -32,7 +34,7 @@ public class CraftArmorStand extends CraftLivingEntity implements ArmorStand {
     }
 
     @Override
-    public ItemStack getItemInHand() {
+    public @NotNull ItemStack getItemInHand() {
         return getEquipment().getItemInHand();
     }
 
@@ -42,7 +44,7 @@ public class CraftArmorStand extends CraftLivingEntity implements ArmorStand {
     }
 
     @Override
-    public ItemStack getBoots() {
+    public @NotNull ItemStack getBoots() {
         return getEquipment().getBoots();
     }
 
@@ -52,7 +54,7 @@ public class CraftArmorStand extends CraftLivingEntity implements ArmorStand {
     }
 
     @Override
-    public ItemStack getLeggings() {
+    public @NotNull ItemStack getLeggings() {
         return getEquipment().getLeggings();
     }
 
@@ -62,7 +64,7 @@ public class CraftArmorStand extends CraftLivingEntity implements ArmorStand {
     }
 
     @Override
-    public ItemStack getChestplate() {
+    public @NotNull ItemStack getChestplate() {
         return getEquipment().getChestplate();
     }
 
@@ -72,7 +74,7 @@ public class CraftArmorStand extends CraftLivingEntity implements ArmorStand {
     }
 
     @Override
-    public ItemStack getHelmet() {
+    public @NotNull ItemStack getHelmet() {
         return getEquipment().getHelmet();
     }
 
@@ -82,62 +84,62 @@ public class CraftArmorStand extends CraftLivingEntity implements ArmorStand {
     }
 
     @Override
-    public EulerAngle getBodyPose() {
+    public @NotNull EulerAngle getBodyPose() {
         return CraftArmorStand.fromNMS(this.getHandle().bodyPose);
     }
 
     @Override
-    public void setBodyPose(EulerAngle pose) {
+    public void setBodyPose(@NotNull EulerAngle pose) {
         this.getHandle().setBodyPose(CraftArmorStand.toNMS(pose));
     }
 
     @Override
-    public EulerAngle getLeftArmPose() {
+    public @NotNull EulerAngle getLeftArmPose() {
         return CraftArmorStand.fromNMS(this.getHandle().leftArmPose);
     }
 
     @Override
-    public void setLeftArmPose(EulerAngle pose) {
+    public void setLeftArmPose(@NotNull EulerAngle pose) {
         this.getHandle().setLeftArmPose(CraftArmorStand.toNMS(pose));
     }
 
     @Override
-    public EulerAngle getRightArmPose() {
+    public @NotNull EulerAngle getRightArmPose() {
         return CraftArmorStand.fromNMS(this.getHandle().rightArmPose);
     }
 
     @Override
-    public void setRightArmPose(EulerAngle pose) {
+    public void setRightArmPose(@NotNull EulerAngle pose) {
         this.getHandle().setRightArmPose(CraftArmorStand.toNMS(pose));
     }
 
     @Override
-    public EulerAngle getLeftLegPose() {
+    public @NotNull EulerAngle getLeftLegPose() {
         return CraftArmorStand.fromNMS(this.getHandle().leftLegPose);
     }
 
     @Override
-    public void setLeftLegPose(EulerAngle pose) {
+    public void setLeftLegPose(@NotNull EulerAngle pose) {
         this.getHandle().setLeftLegPose(CraftArmorStand.toNMS(pose));
     }
 
     @Override
-    public EulerAngle getRightLegPose() {
+    public @NotNull EulerAngle getRightLegPose() {
         return CraftArmorStand.fromNMS(this.getHandle().rightLegPose);
     }
 
     @Override
-    public void setRightLegPose(EulerAngle pose) {
+    public void setRightLegPose(@NotNull EulerAngle pose) {
         this.getHandle().setRightLegPose(CraftArmorStand.toNMS(pose));
     }
 
     @Override
-    public EulerAngle getHeadPose() {
+    public @NotNull EulerAngle getHeadPose() {
         return CraftArmorStand.fromNMS(this.getHandle().headPose);
     }
 
     @Override
-    public void setHeadPose(EulerAngle pose) {
+    public void setHeadPose(@NotNull EulerAngle pose) {
         this.getHandle().setHeadPose(CraftArmorStand.toNMS(pose));
     }
 
@@ -188,7 +190,7 @@ public class CraftArmorStand extends CraftLivingEntity implements ArmorStand {
         this.getHandle().setSmall(small);
     }
 
-    private static EulerAngle fromNMS(Rotations old) {
+    private static @NotNull EulerAngle fromNMS(@NotNull Rotations old) {
         return new EulerAngle(
             Math.toRadians(old.getX()),
             Math.toRadians(old.getY()),
@@ -196,7 +198,7 @@ public class CraftArmorStand extends CraftLivingEntity implements ArmorStand {
         );
     }
 
-    private static Rotations toNMS(EulerAngle old) {
+    private static @NotNull Rotations toNMS(@NotNull EulerAngle old) {
         return new Rotations(
             (float) Math.toDegrees(old.getX()),
             (float) Math.toDegrees(old.getY()),
@@ -215,17 +217,17 @@ public class CraftArmorStand extends CraftLivingEntity implements ArmorStand {
     }
 
     @Override
-    public void addEquipmentLock(EquipmentSlot equipmentSlot, LockType lockType) {
+    public void addEquipmentLock(@NotNull EquipmentSlot equipmentSlot, @NotNull LockType lockType) {
         this.getHandle().disabledSlots |= (1 << CraftEquipmentSlot.getNMS(equipmentSlot).getFilterFlag() + lockType.ordinal() * 8);
     }
 
     @Override
-    public void removeEquipmentLock(EquipmentSlot equipmentSlot, LockType lockType) {
+    public void removeEquipmentLock(@NotNull EquipmentSlot equipmentSlot, @NotNull LockType lockType) {
         this.getHandle().disabledSlots &= ~(1 << CraftEquipmentSlot.getNMS(equipmentSlot).getFilterFlag() + lockType.ordinal() * 8);
     }
 
     @Override
-    public boolean hasEquipmentLock(EquipmentSlot equipmentSlot, LockType lockType) {
+    public boolean hasEquipmentLock(@NotNull EquipmentSlot equipmentSlot, @NotNull LockType lockType) {
         return (this.getHandle().disabledSlots & (1 << CraftEquipmentSlot.getNMS(equipmentSlot).getFilterFlag() + lockType.ordinal() * 8)) != 0;
     }
     // Paper start
@@ -240,13 +242,13 @@ public class CraftArmorStand extends CraftLivingEntity implements ArmorStand {
     }
 
     @Override
-    public ItemStack getItem(org.bukkit.inventory.EquipmentSlot slot) {
+    public @NotNull ItemStack getItem(org.bukkit.inventory.@NotNull EquipmentSlot slot) {
         com.google.common.base.Preconditions.checkNotNull(slot, "slot");
         return getHandle().getItemBySlot(org.bukkit.craftbukkit.CraftEquipmentSlot.getNMS(slot)).asBukkitMirror();
     }
 
     @Override
-    public void setItem(org.bukkit.inventory.EquipmentSlot slot, ItemStack item) {
+    public void setItem(org.bukkit.inventory.@NotNull EquipmentSlot slot, ItemStack item) {
         com.google.common.base.Preconditions.checkNotNull(slot, "slot");
         switch (slot) {
             case HAND:
@@ -272,7 +274,7 @@ public class CraftArmorStand extends CraftLivingEntity implements ArmorStand {
     }
 
     @Override
-    public java.util.Set<org.bukkit.inventory.EquipmentSlot> getDisabledSlots() {
+    public java.util.@NotNull Set<org.bukkit.inventory.EquipmentSlot> getDisabledSlots() {
         java.util.Set<org.bukkit.inventory.EquipmentSlot> disabled = new java.util.HashSet<>();
         for (org.bukkit.inventory.EquipmentSlot slot : org.bukkit.inventory.EquipmentSlot.values()) {
             if (this.isSlotDisabled(slot)) {
@@ -283,7 +285,7 @@ public class CraftArmorStand extends CraftLivingEntity implements ArmorStand {
     }
 
     @Override
-    public void setDisabledSlots(org.bukkit.inventory.EquipmentSlot... slots) {
+    public void setDisabledSlots(org.bukkit.inventory.EquipmentSlot @NotNull ... slots) {
         int disabled = 0;
         for (org.bukkit.inventory.EquipmentSlot slot : slots) {
             if (slot == org.bukkit.inventory.EquipmentSlot.OFF_HAND) continue;
@@ -301,14 +303,14 @@ public class CraftArmorStand extends CraftLivingEntity implements ArmorStand {
     }
 
     @Override
-    public void removeDisabledSlots(org.bukkit.inventory.EquipmentSlot... slots) {
+    public void removeDisabledSlots(org.bukkit.inventory.EquipmentSlot @NotNull ... slots) {
         java.util.Set<org.bukkit.inventory.EquipmentSlot> disabled = getDisabledSlots();
         for (final org.bukkit.inventory.EquipmentSlot slot : slots) disabled.remove(slot);
         setDisabledSlots(disabled.toArray(new org.bukkit.inventory.EquipmentSlot[0]));
     }
 
     @Override
-    public boolean isSlotDisabled(org.bukkit.inventory.EquipmentSlot slot) {
+    public boolean isSlotDisabled(org.bukkit.inventory.@NotNull EquipmentSlot slot) {
         return getHandle().isDisabled(org.bukkit.craftbukkit.CraftEquipmentSlot.getNMS(slot));
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftArrow.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftArrow.java
index 40ae8e43f40f9bf457d2917ac4f131b21e4f8dd2..70ae8fa3a2b52d8a9840cad4b8c7df6a16a50f69 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftArrow.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftArrow.java
@@ -10,6 +10,8 @@ import org.bukkit.entity.AbstractArrow.PickupStatus;
 import org.bukkit.entity.Entity;
 import org.bukkit.entity.EntityType;
 import org.bukkit.projectiles.ProjectileSource;
+import org.jetbrains.annotations.NotNull;
+
 
 public class CraftArrow extends AbstractProjectile implements AbstractArrow {
 
@@ -92,19 +94,19 @@ public class CraftArrow extends AbstractProjectile implements AbstractArrow {
     }
 
     @Override
-    public PickupStatus getPickupStatus() {
+    public @NotNull PickupStatus getPickupStatus() {
         return PickupStatus.values()[this.getHandle().pickup.ordinal()];
     }
 
     @Override
-    public void setPickupStatus(PickupStatus status) {
+    public void setPickupStatus(@NotNull PickupStatus status) {
         Preconditions.checkNotNull(status, "status");
         this.getHandle().pickup = net.minecraft.world.entity.projectile.AbstractArrow.Pickup.byOrdinal(status.ordinal());
     }
 
     // Paper start
     @Override
-    public org.bukkit.craftbukkit.inventory.CraftItemStack getItemStack() {
+    public org.bukkit.craftbukkit.inventory.@NotNull CraftItemStack getItemStack() {
         return org.bukkit.craftbukkit.inventory.CraftItemStack.asCraftMirror(getHandle().getPickupItem());
     }
 
@@ -169,7 +171,7 @@ public class CraftArrow extends AbstractProjectile implements AbstractArrow {
     }
 
     @Override
-    public EntityType getType() {
+    public @NotNull EntityType getType() {
         return EntityType.UNKNOWN;
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftAxolotl.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftAxolotl.java
index a82acbbe62bf6aa497e627587e2f3b9be2fbf487..25a0346e6ef73bfa80558e94174cfcf18ab5a081 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftAxolotl.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftAxolotl.java
@@ -4,6 +4,8 @@ import com.google.common.base.Preconditions;
 import org.bukkit.craftbukkit.CraftServer;
 import org.bukkit.entity.Axolotl;
 import org.bukkit.entity.EntityType;
+import org.jetbrains.annotations.NotNull;
+
 
 public class CraftAxolotl extends CraftAnimals implements Axolotl, io.papermc.paper.entity.PaperBucketable { // Paper - Bucketable API
 
@@ -17,12 +19,12 @@ public class CraftAxolotl extends CraftAnimals implements Axolotl, io.papermc.pa
     }
 
     @Override
-    public EntityType getType() {
+    public @NotNull EntityType getType() {
         return EntityType.AXOLOTL;
     }
 
     @Override
-    public String toString() {
+    public @NotNull String toString() {
         return "CraftAxolotl";
     }
 
@@ -37,12 +39,12 @@ public class CraftAxolotl extends CraftAnimals implements Axolotl, io.papermc.pa
     }
 
     @Override
-    public Variant getVariant() {
+    public @NotNull Variant getVariant() {
         return Variant.values()[this.getHandle().getVariant().ordinal()];
     }
 
     @Override
-    public void setVariant(Variant variant) {
+    public void setVariant(@NotNull Variant variant) {
         Preconditions.checkArgument(variant != null, "variant");
 
         this.getHandle().setVariant(net.minecraft.world.entity.animal.axolotl.Axolotl.Variant.byId(variant.ordinal()));
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftBat.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftBat.java
index 8f25bb253c2b22e1964afeae705901e926432ef0..abb5376bfef55937eb0649f0e916041e30ae9ef9 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftBat.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftBat.java
@@ -3,6 +3,9 @@ package org.bukkit.craftbukkit.entity;
 import org.bukkit.craftbukkit.CraftServer;
 import org.bukkit.entity.Bat;
 import org.bukkit.entity.EntityType;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 public class CraftBat extends CraftAmbient implements Bat {
     public CraftBat(CraftServer server, net.minecraft.world.entity.ambient.Bat entity) {
@@ -15,12 +18,12 @@ public class CraftBat extends CraftAmbient implements Bat {
     }
 
     @Override
-    public String toString() {
+    public @NotNull String toString() {
         return "CraftBat";
     }
 
     @Override
-    public EntityType getType() {
+    public @NotNull EntityType getType() {
         return EntityType.BAT;
     }
 
@@ -45,7 +48,7 @@ public class CraftBat extends CraftAmbient implements Bat {
     }
 
     @Override
-    public void setTargetLocation(org.bukkit.Location location) {
+    public void setTargetLocation(org.bukkit.@Nullable Location location) {
         net.minecraft.core.BlockPos pos = null;
         if (location != null) {
             pos = io.papermc.paper.util.MCUtil.toBlockPosition(location);
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftBee.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftBee.java
index 1ae8d6e819cd9d195e1bd31ccf55d2893ba00e2a..d1aae9b25310082a4576cebce965c8f9bc5dcd0e 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftBee.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftBee.java
@@ -6,6 +6,9 @@ import org.bukkit.Location;
 import org.bukkit.craftbukkit.CraftServer;
 import org.bukkit.entity.Bee;
 import org.bukkit.entity.EntityType;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 public class CraftBee extends CraftAnimals implements Bee {
 
@@ -19,12 +22,12 @@ public class CraftBee extends CraftAnimals implements Bee {
     }
 
     @Override
-    public String toString() {
+    public @NotNull String toString() {
         return "CraftBee";
     }
 
     @Override
-    public EntityType getType() {
+    public @NotNull EntityType getType() {
         return EntityType.BEE;
     }
 
@@ -35,7 +38,7 @@ public class CraftBee extends CraftAnimals implements Bee {
     }
 
     @Override
-    public void setHive(Location location) {
+    public void setHive(@Nullable Location location) {
         Preconditions.checkArgument(location == null || this.getWorld().equals(location.getWorld()), "Hive must be in same world");
         this.getHandle().hivePos = (location == null) ? null : new BlockPos(location.getBlockX(), location.getBlockY(), location.getBlockZ());
     }
@@ -47,7 +50,7 @@ public class CraftBee extends CraftAnimals implements Bee {
     }
 
     @Override
-    public void setFlower(Location location) {
+    public void setFlower(@Nullable Location location) {
         Preconditions.checkArgument(location == null || this.getWorld().equals(location.getWorld()), "Flower must be in same world");
         this.getHandle().setSavedFlowerPos(location == null ? null : new BlockPos(location.getBlockX(), location.getBlockY(), location.getBlockZ()));
     }
@@ -93,7 +96,7 @@ public class CraftBee extends CraftAnimals implements Bee {
     }
     // Paper start
     @Override
-    public void setRollingOverride(net.kyori.adventure.util.TriState rolling) {
+    public void setRollingOverride(net.kyori.adventure.util.@NotNull TriState rolling) {
         this.getHandle().rollingOverride = rolling;
 
         this.getHandle().setRolling(this.getHandle().isRolling()); // Refresh rolling state
@@ -105,7 +108,7 @@ public class CraftBee extends CraftAnimals implements Bee {
     }
 
     @Override
-    public net.kyori.adventure.util.TriState getRollingOverride() {
+    public net.kyori.adventure.util.@NotNull TriState getRollingOverride() {
         return this.getHandle().rollingOverride;
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftBlaze.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftBlaze.java
index 84cd915955188492696e5948fbb1c4eca0cca039..315db2d54b25dafc7dfc0083f061089460675c20 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftBlaze.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftBlaze.java
@@ -3,6 +3,8 @@ package org.bukkit.craftbukkit.entity;
 import org.bukkit.craftbukkit.CraftServer;
 import org.bukkit.entity.Blaze;
 import org.bukkit.entity.EntityType;
+import org.jetbrains.annotations.NotNull;
+
 
 public class CraftBlaze extends CraftMonster implements Blaze {
     public CraftBlaze(CraftServer server, net.minecraft.world.entity.monster.Blaze entity) {
@@ -15,12 +17,12 @@ public class CraftBlaze extends CraftMonster implements Blaze {
     }
 
     @Override
-    public String toString() {
+    public @NotNull String toString() {
         return "CraftBlaze";
     }
 
     @Override
-    public EntityType getType() {
+    public @NotNull EntityType getType() {
         return EntityType.BLAZE;
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftBoat.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftBoat.java
index e5b16e930e12557a9a9052866cf0f431e3a5310d..2521effce14f23868182216d3b5d5c82f5116137 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftBoat.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftBoat.java
@@ -7,6 +7,9 @@ import org.bukkit.craftbukkit.CraftServer;
 import org.bukkit.entity.Boat;
 import org.bukkit.entity.Entity;
 import org.bukkit.entity.EntityType;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 public class CraftBoat extends CraftVehicle implements Boat {
 
@@ -15,22 +18,22 @@ public class CraftBoat extends CraftVehicle implements Boat {
     }
 
     @Override
-    public TreeSpecies getWoodType() {
+    public @NotNull TreeSpecies getWoodType() {
         return CraftBoat.getTreeSpecies(this.getHandle().getVariant());
     }
 
     @Override
-    public void setWoodType(TreeSpecies species) {
+    public void setWoodType(@NotNull TreeSpecies species) {
         this.getHandle().setVariant(CraftBoat.getBoatType(species));
     }
 
     @Override
-    public Type getBoatType() {
+    public @NotNull Type getBoatType() {
         return CraftBoat.boatTypeFromNms(this.getHandle().getVariant());
     }
 
     @Override
-    public void setBoatType(Type type) {
+    public void setBoatType(@Nullable Type type) {
         Preconditions.checkArgument(type != null, "Boat.Type cannot be null");
 
         this.getHandle().setVariant(CraftBoat.boatTypeToNms(type));
@@ -82,13 +85,13 @@ public class CraftBoat extends CraftVehicle implements Boat {
 
     // Paper start
     @Override
-    public org.bukkit.Material getBoatMaterial() {
+    public org.bukkit.@NotNull Material getBoatMaterial() {
         return org.bukkit.craftbukkit.util.CraftMagicNumbers.getMaterial(this.getHandle().getDropItem());
     }
     // Paper end
 
     @Override
-    public Status getStatus() {
+    public @NotNull Status getStatus() {
         return CraftBoat.boatStatusFromNms(this.getHandle().status);
     }
 
@@ -103,11 +106,11 @@ public class CraftBoat extends CraftVehicle implements Boat {
     }
 
     @Override
-    public EntityType getType() {
+    public @NotNull EntityType getType() {
         return EntityType.BOAT;
     }
 
-    public static Boat.Type boatTypeFromNms(net.minecraft.world.entity.vehicle.Boat.Type boatType) {
+    public static Boat.@NotNull Type boatTypeFromNms(net.minecraft.world.entity.vehicle.Boat.@NotNull Type boatType) {
         return switch (boatType) {
             default -> throw new EnumConstantNotPresentException(Type.class, boatType.name());
             case OAK -> Type.OAK;
@@ -121,7 +124,7 @@ public class CraftBoat extends CraftVehicle implements Boat {
         };
     }
 
-    public static net.minecraft.world.entity.vehicle.Boat.Type boatTypeToNms(Boat.Type type) {
+    public static net.minecraft.world.entity.vehicle.Boat.@NotNull Type boatTypeToNms(Boat.@NotNull Type type) {
         return switch (type) {
             default -> throw new EnumConstantNotPresentException(net.minecraft.world.entity.vehicle.Boat.Type.class, type.name());
             case BAMBOO -> net.minecraft.world.entity.vehicle.Boat.Type.BAMBOO;
@@ -135,7 +138,7 @@ public class CraftBoat extends CraftVehicle implements Boat {
         };
     }
 
-    public static Status boatStatusFromNms(net.minecraft.world.entity.vehicle.Boat.Status enumStatus) {
+    public static @NotNull Status boatStatusFromNms(net.minecraft.world.entity.vehicle.Boat.@NotNull Status enumStatus) {
         return switch (enumStatus) {
             default -> throw new EnumConstantNotPresentException(Status.class, enumStatus.name());
             case IN_AIR -> Status.IN_AIR;
@@ -147,7 +150,7 @@ public class CraftBoat extends CraftVehicle implements Boat {
     }
 
     @Deprecated
-    public static TreeSpecies getTreeSpecies(net.minecraft.world.entity.vehicle.Boat.Type boatType) {
+    public static @NotNull TreeSpecies getTreeSpecies(net.minecraft.world.entity.vehicle.Boat.@NotNull Type boatType) {
         switch (boatType) {
             case SPRUCE:
                 return TreeSpecies.REDWOOD;
@@ -166,7 +169,7 @@ public class CraftBoat extends CraftVehicle implements Boat {
     }
 
     @Deprecated
-    public static net.minecraft.world.entity.vehicle.Boat.Type getBoatType(TreeSpecies species) {
+    public static net.minecraft.world.entity.vehicle.Boat.@NotNull Type getBoatType(@NotNull TreeSpecies species) {
         switch (species) {
             case REDWOOD:
                 return net.minecraft.world.entity.vehicle.Boat.Type.SPRUCE;
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftCat.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftCat.java
index 273a062090f4c6f6ffd5a4238623b32af497f6b6..e60433cd6f9d7d4441e0d925fe974d538ef9f378 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftCat.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftCat.java
@@ -7,6 +7,8 @@ import org.bukkit.craftbukkit.CraftServer;
 import org.bukkit.entity.Cat;
 import org.bukkit.entity.Cat.Type;
 import org.bukkit.entity.EntityType;
+import org.jetbrains.annotations.NotNull;
+
 
 public class CraftCat extends CraftTameableAnimal implements Cat {
 
@@ -20,34 +22,34 @@ public class CraftCat extends CraftTameableAnimal implements Cat {
     }
 
     @Override
-    public EntityType getType() {
+    public @NotNull EntityType getType() {
         return EntityType.CAT;
     }
 
     @Override
-    public String toString() {
+    public @NotNull String toString() {
         return "CraftCat";
     }
 
     @Override
-    public Type getCatType() {
+    public @NotNull Type getCatType() {
         return Type.values()[BuiltInRegistries.CAT_VARIANT.getId(this.getHandle().getVariant())];
     }
 
     @Override
-    public void setCatType(Type type) {
+    public void setCatType(@NotNull Type type) {
         Preconditions.checkArgument(type != null, "Cannot have null Type");
 
         this.getHandle().setVariant(BuiltInRegistries.CAT_VARIANT.byId(type.ordinal()));
     }
 
     @Override
-    public DyeColor getCollarColor() {
+    public @NotNull DyeColor getCollarColor() {
         return DyeColor.getByWoolData((byte) this.getHandle().getCollarColor().getId());
     }
 
     @Override
-    public void setCollarColor(DyeColor color) {
+    public void setCollarColor(@NotNull DyeColor color) {
         this.getHandle().setCollarColor(net.minecraft.world.item.DyeColor.byId(color.getWoolData()));
     }
     // Paper Start - More cat api
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftCaveSpider.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftCaveSpider.java
index f7e2b55ac149fa421d5733c2c6a103eb6ef45ef4..f4c81e41d097f35cfb886462abc97a484d0d8273 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftCaveSpider.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftCaveSpider.java
@@ -3,6 +3,8 @@ package org.bukkit.craftbukkit.entity;
 import org.bukkit.craftbukkit.CraftServer;
 import org.bukkit.entity.CaveSpider;
 import org.bukkit.entity.EntityType;
+import org.jetbrains.annotations.NotNull;
+
 
 public class CraftCaveSpider extends CraftSpider implements CaveSpider {
     public CraftCaveSpider(CraftServer server, net.minecraft.world.entity.monster.CaveSpider entity) {
@@ -15,12 +17,12 @@ public class CraftCaveSpider extends CraftSpider implements CaveSpider {
     }
 
     @Override
-    public String toString() {
+    public @NotNull String toString() {
         return "CraftCaveSpider";
     }
 
     @Override
-    public EntityType getType() {
+    public @NotNull EntityType getType() {
         return EntityType.CAVE_SPIDER;
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftChestBoat.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftChestBoat.java
index 06a96f027f90fd5bf05de72c8722ff5a81608b66..fc4d5f838aee878db391572ed3b0e4651be77c4b 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftChestBoat.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftChestBoat.java
@@ -10,9 +10,12 @@ import org.bukkit.craftbukkit.util.CraftNamespacedKey;
 import org.bukkit.entity.EntityType;
 import org.bukkit.inventory.Inventory;
 import org.bukkit.loot.LootTable;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 public class CraftChestBoat extends CraftBoat implements org.bukkit.entity.ChestBoat, com.destroystokyo.paper.loottable.PaperLootableEntityInventory { // Paper
-    private final Inventory inventory;
+    private final @NotNull Inventory inventory;
 
     public CraftChestBoat(CraftServer server, ChestBoat entity) {
         super(server, entity);
@@ -25,17 +28,17 @@ public class CraftChestBoat extends CraftBoat implements org.bukkit.entity.Chest
     }
 
     @Override
-    public String toString() {
+    public @NotNull String toString() {
         return "CraftChestBoat";
     }
 
     @Override
-    public EntityType getType() {
+    public @NotNull EntityType getType() {
         return EntityType.CHEST_BOAT;
     }
 
     @Override
-    public Inventory getInventory() {
+    public @NotNull Inventory getInventory() {
         return this.inventory;
     }
 
@@ -65,7 +68,7 @@ public class CraftChestBoat extends CraftBoat implements org.bukkit.entity.Chest
         return this.getHandle().getLootTableSeed();
     }
 
-    public void setLootTable(LootTable table, long seed) { // Paper - change visibility since it overrides a public method
+    public void setLootTable(@Nullable LootTable table, long seed) { // Paper - change visibility since it overrides a public method
         ResourceLocation newKey = (table == null) ? null : CraftNamespacedKey.toMinecraft(table.getKey());
         this.getHandle().setLootTable(newKey);
         this.getHandle().setLootTableSeed(seed);
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftChicken.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftChicken.java
index fd87f979ee207dac13e4028d76bdd40911509e56..6b5aa5404208059fc94469d931edc48ae440ac56 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftChicken.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftChicken.java
@@ -3,6 +3,8 @@ package org.bukkit.craftbukkit.entity;
 import org.bukkit.craftbukkit.CraftServer;
 import org.bukkit.entity.Chicken;
 import org.bukkit.entity.EntityType;
+import org.jetbrains.annotations.NotNull;
+
 
 public class CraftChicken extends CraftAnimals implements Chicken {
 
@@ -16,12 +18,12 @@ public class CraftChicken extends CraftAnimals implements Chicken {
     }
 
     @Override
-    public String toString() {
+    public @NotNull String toString() {
         return "CraftChicken";
     }
 
     @Override
-    public EntityType getType() {
+    public @NotNull EntityType getType() {
         return EntityType.CHICKEN;
     }
     // Paper start
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftCod.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftCod.java
index 801ed8241cad4ac890a6d99cd19a3dd7490d9339..48974c5d0c94e04aef5fcb9beeb552858a14abb7 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftCod.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftCod.java
@@ -3,6 +3,8 @@ package org.bukkit.craftbukkit.entity;
 import org.bukkit.craftbukkit.CraftServer;
 import org.bukkit.entity.Cod;
 import org.bukkit.entity.EntityType;
+import org.jetbrains.annotations.NotNull;
+
 
 public class CraftCod extends io.papermc.paper.entity.PaperSchoolableFish implements Cod { // Paper - School Fish API
 
@@ -16,12 +18,12 @@ public class CraftCod extends io.papermc.paper.entity.PaperSchoolableFish implem
     }
 
     @Override
-    public String toString() {
+    public @NotNull String toString() {
         return "CraftCod";
     }
 
     @Override
-    public EntityType getType() {
+    public @NotNull EntityType getType() {
         return EntityType.COD;
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftComplexPart.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftComplexPart.java
index cdc000f3fd4d39c1f2ff9dc820eeb019c57bdfa0..f31691f94cb2b02eaa4dc721a9366f108d2137bd 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftComplexPart.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftComplexPart.java
@@ -7,6 +7,8 @@ import org.bukkit.entity.ComplexEntityPart;
 import org.bukkit.entity.ComplexLivingEntity;
 import org.bukkit.entity.EntityType;
 import org.bukkit.event.entity.EntityDamageEvent;
+import org.jetbrains.annotations.NotNull;
+
 
 public class CraftComplexPart extends CraftEntity implements ComplexEntityPart {
     public CraftComplexPart(CraftServer server, EnderDragonPart entity) {
@@ -14,7 +16,7 @@ public class CraftComplexPart extends CraftEntity implements ComplexEntityPart {
     }
 
     @Override
-    public ComplexLivingEntity getParent() {
+    public @NotNull ComplexLivingEntity getParent() {
         return (ComplexLivingEntity) ((EnderDragon) this.getHandle().parentMob).getBukkitEntity();
     }
 
@@ -44,7 +46,7 @@ public class CraftComplexPart extends CraftEntity implements ComplexEntityPart {
     }
 
     @Override
-    public EntityType getType() {
+    public @NotNull EntityType getType() {
         return EntityType.UNKNOWN;
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftCow.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftCow.java
index c7545c8a7272cb28d97e23c15a31e33477a7d96e..e1c0a150ca3246157ca266fb79bf2922e839404a 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftCow.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftCow.java
@@ -3,6 +3,8 @@ package org.bukkit.craftbukkit.entity;
 import org.bukkit.craftbukkit.CraftServer;
 import org.bukkit.entity.Cow;
 import org.bukkit.entity.EntityType;
+import org.jetbrains.annotations.NotNull;
+
 
 public class CraftCow extends CraftAnimals implements Cow {
 
@@ -21,7 +23,7 @@ public class CraftCow extends CraftAnimals implements Cow {
     }
 
     @Override
-    public EntityType getType() {
+    public @NotNull EntityType getType() {
         return EntityType.COW;
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftCreeper.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftCreeper.java
index 63a8188010f045d5c17a1ecb63e8081ec86c2960..b97f30fc9303be6e6df7730f803765630bd459e1 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftCreeper.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftCreeper.java
@@ -5,6 +5,8 @@ import org.bukkit.craftbukkit.CraftServer;
 import org.bukkit.entity.Creeper;
 import org.bukkit.entity.EntityType;
 import org.bukkit.event.entity.CreeperPowerEvent;
+import org.jetbrains.annotations.NotNull;
+
 
 public class CraftCreeper extends CraftMonster implements Creeper {
 
@@ -27,7 +29,7 @@ public class CraftCreeper extends CraftMonster implements Creeper {
         }
     }
 
-    private boolean callPowerEvent(CreeperPowerEvent.PowerCause cause) {
+    private boolean callPowerEvent(CreeperPowerEvent.@NotNull PowerCause cause) {
         CreeperPowerEvent event = new CreeperPowerEvent((Creeper) this.getHandle().getBukkitEntity(), cause);
         server.getPluginManager().callEvent(event);
         return event.isCancelled();
@@ -86,12 +88,12 @@ public class CraftCreeper extends CraftMonster implements Creeper {
     }
 
     @Override
-    public String toString() {
+    public @NotNull String toString() {
         return "CraftCreeper";
     }
 
     @Override
-    public EntityType getType() {
+    public @NotNull EntityType getType() {
         return EntityType.CREEPER;
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftDolphin.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftDolphin.java
index c1db88ceb65eb81c542171fc5465224ef613ce3b..71ae9e91dbcaf4900c365c0e4a723593e142e42e 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftDolphin.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftDolphin.java
@@ -3,6 +3,8 @@ package org.bukkit.craftbukkit.entity;
 import org.bukkit.craftbukkit.CraftServer;
 import org.bukkit.entity.Dolphin;
 import org.bukkit.entity.EntityType;
+import org.jetbrains.annotations.NotNull;
+
 
 public class CraftDolphin extends CraftWaterMob implements Dolphin {
 
@@ -16,12 +18,12 @@ public class CraftDolphin extends CraftWaterMob implements Dolphin {
     }
 
     @Override
-    public String toString() {
+    public @NotNull String toString() {
         return "CraftDolphin";
     }
 
     @Override
-    public EntityType getType() {
+    public @NotNull EntityType getType() {
         return EntityType.DOLPHIN;
     }
 
@@ -46,12 +48,12 @@ public class CraftDolphin extends CraftWaterMob implements Dolphin {
     }
 
     @Override
-    public org.bukkit.Location getTreasureLocation() {
+    public org.bukkit.@NotNull Location getTreasureLocation() {
         return io.papermc.paper.util.MCUtil.toLocation(this.getHandle().level, this.getHandle().getTreasurePos());
     }
 
     @Override
-    public void setTreasureLocation(org.bukkit.Location location) {
+    public void setTreasureLocation(org.bukkit.@NotNull Location location) {
         this.getHandle().setTreasurePos(io.papermc.paper.util.MCUtil.toBlockPosition(location));
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftDonkey.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftDonkey.java
index 2960955df15324fc818ac7b1cdd1b6ebca30bcce..99a91494f9c081609512c443d7f715589753a5b7 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftDonkey.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftDonkey.java
@@ -4,6 +4,8 @@ import org.bukkit.craftbukkit.CraftServer;
 import org.bukkit.entity.Donkey;
 import org.bukkit.entity.EntityType;
 import org.bukkit.entity.Horse.Variant;
+import org.jetbrains.annotations.NotNull;
+
 
 public class CraftDonkey extends CraftChestedHorse implements Donkey {
 
@@ -12,17 +14,17 @@ public class CraftDonkey extends CraftChestedHorse implements Donkey {
     }
 
     @Override
-    public String toString() {
+    public @NotNull String toString() {
         return "CraftDonkey";
     }
 
     @Override
-    public EntityType getType() {
+    public @NotNull EntityType getType() {
         return EntityType.DONKEY;
     }
 
     @Override
-    public Variant getVariant() {
+    public @NotNull Variant getVariant() {
         return Variant.DONKEY;
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftDragonFireball.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftDragonFireball.java
index 7ef178c852baa2608b76b66a4fcd0fa2abaa2bbc..64940dfb01df7bfc21434159860a3e71565427f6 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftDragonFireball.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftDragonFireball.java
@@ -3,6 +3,8 @@ package org.bukkit.craftbukkit.entity;
 import org.bukkit.craftbukkit.CraftServer;
 import org.bukkit.entity.DragonFireball;
 import org.bukkit.entity.EntityType;
+import org.jetbrains.annotations.NotNull;
+
 
 public class CraftDragonFireball extends CraftFireball implements DragonFireball {
     public CraftDragonFireball(CraftServer server, net.minecraft.world.entity.projectile.DragonFireball entity) {
@@ -10,12 +12,12 @@ public class CraftDragonFireball extends CraftFireball implements DragonFireball
     }
 
     @Override
-    public String toString() {
+    public @NotNull String toString() {
         return "CraftDragonFireball";
     }
 
     @Override
-    public EntityType getType() {
+    public @NotNull EntityType getType() {
         return EntityType.DRAGON_FIREBALL;
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftDrowned.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftDrowned.java
index 03e2acd4829da449a471b0fa1a311e74aee114d3..a58f66b65fa0e6185b79ab3a341b77e8647a39a4 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftDrowned.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftDrowned.java
@@ -3,6 +3,8 @@ package org.bukkit.craftbukkit.entity;
 import org.bukkit.craftbukkit.CraftServer;
 import org.bukkit.entity.Drowned;
 import org.bukkit.entity.EntityType;
+import org.jetbrains.annotations.NotNull;
+
 
 public class CraftDrowned extends CraftZombie implements Drowned, com.destroystokyo.paper.entity.CraftRangedEntity<net.minecraft.world.entity.monster.Drowned> { // Paper
 
@@ -16,12 +18,12 @@ public class CraftDrowned extends CraftZombie implements Drowned, com.destroysto
     }
 
     @Override
-    public String toString() {
+    public @NotNull String toString() {
         return "CraftDrowned";
     }
 
     @Override
-    public EntityType getType() {
+    public @NotNull EntityType getType() {
         return EntityType.DROWNED;
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftEgg.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftEgg.java
index 6ac40fab0155f3b54a8ab7f492f42c952ee2377c..302f1e0a6b31a70c9d6e0c9cb6f831ccae6bbf39 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftEgg.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftEgg.java
@@ -4,6 +4,8 @@ import net.minecraft.world.entity.projectile.ThrownEgg;
 import org.bukkit.craftbukkit.CraftServer;
 import org.bukkit.entity.Egg;
 import org.bukkit.entity.EntityType;
+import org.jetbrains.annotations.NotNull;
+
 
 public class CraftEgg extends CraftThrowableProjectile implements Egg {
     public CraftEgg(CraftServer server, ThrownEgg entity) {
@@ -16,12 +18,12 @@ public class CraftEgg extends CraftThrowableProjectile implements Egg {
     }
 
     @Override
-    public String toString() {
+    public @NotNull String toString() {
         return "CraftEgg";
     }
 
     @Override
-    public EntityType getType() {
+    public @NotNull EntityType getType() {
         return EntityType.EGG;
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftElderGuardian.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftElderGuardian.java
index 0fddef32cf2b713a327244e670754d5e70aee59a..ea43b5e831c509ef0f4d8016942eea24b492933f 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftElderGuardian.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftElderGuardian.java
@@ -3,6 +3,8 @@ package org.bukkit.craftbukkit.entity;
 import org.bukkit.craftbukkit.CraftServer;
 import org.bukkit.entity.ElderGuardian;
 import org.bukkit.entity.EntityType;
+import org.jetbrains.annotations.NotNull;
+
 
 public class CraftElderGuardian extends CraftGuardian implements ElderGuardian {
 
@@ -11,12 +13,12 @@ public class CraftElderGuardian extends CraftGuardian implements ElderGuardian {
     }
 
     @Override
-    public String toString() {
+    public @NotNull String toString() {
         return "CraftElderGuardian";
     }
 
     @Override
-    public EntityType getType() {
+    public @NotNull EntityType getType() {
         return EntityType.ELDER_GUARDIAN;
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftEnderCrystal.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftEnderCrystal.java
index 2dbc6bf56f3462028dd3c9cbc4a939c53e573c76..fcda10b24cdab1a7f58573c5ffd5e357d3fc1789 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftEnderCrystal.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftEnderCrystal.java
@@ -6,6 +6,9 @@ import org.bukkit.Location;
 import org.bukkit.craftbukkit.CraftServer;
 import org.bukkit.entity.EnderCrystal;
 import org.bukkit.entity.EntityType;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 public class CraftEnderCrystal extends CraftEntity implements EnderCrystal {
     public CraftEnderCrystal(CraftServer server, EndCrystal entity) {
@@ -29,7 +32,7 @@ public class CraftEnderCrystal extends CraftEntity implements EnderCrystal {
     }
 
     @Override
-    public void setBeamTarget(Location location) {
+    public void setBeamTarget(@Nullable Location location) {
         if (location == null) {
             this.getHandle().setBeamTarget((BlockPos) null);
         } else if (location.getWorld() != getWorld()) {
@@ -45,12 +48,12 @@ public class CraftEnderCrystal extends CraftEntity implements EnderCrystal {
     }
 
     @Override
-    public String toString() {
+    public @NotNull String toString() {
         return "CraftEnderCrystal";
     }
 
     @Override
-    public EntityType getType() {
+    public @NotNull EntityType getType() {
         return EntityType.ENDER_CRYSTAL;
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftEnderDragon.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftEnderDragon.java
index eeb6d48da156602c046db891cac0ccb4fa639473..c46466931ef425644bff9d63e726f4a65525d868 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftEnderDragon.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftEnderDragon.java
@@ -13,6 +13,9 @@ import org.bukkit.entity.ComplexEntityPart;
 import org.bukkit.entity.EnderDragon;
 import org.bukkit.entity.EnderDragon.Phase;
 import org.bukkit.entity.EntityType;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 public class CraftEnderDragon extends CraftMob implements EnderDragon {
 
@@ -21,7 +24,7 @@ public class CraftEnderDragon extends CraftMob implements EnderDragon {
     }
 
     @Override
-    public Set<ComplexEntityPart> getParts() {
+    public @NotNull Set<ComplexEntityPart> getParts() {
         Builder<ComplexEntityPart> builder = ImmutableSet.builder();
 
         for (EnderDragonPart part : this.getHandle().subEntities) {
@@ -37,30 +40,30 @@ public class CraftEnderDragon extends CraftMob implements EnderDragon {
     }
 
     @Override
-    public String toString() {
+    public @NotNull String toString() {
         return "CraftEnderDragon";
     }
 
     @Override
-    public EntityType getType() {
+    public @NotNull EntityType getType() {
         return EntityType.ENDER_DRAGON;
     }
 
     @Override
-    public Phase getPhase() {
+    public @NotNull Phase getPhase() {
         return Phase.values()[this.getHandle().getEntityData().get(net.minecraft.world.entity.boss.enderdragon.EnderDragon.DATA_PHASE)];
     }
 
     @Override
-    public void setPhase(Phase phase) {
+    public void setPhase(@NotNull Phase phase) {
         this.getHandle().getPhaseManager().setPhase(CraftEnderDragon.getMinecraftPhase(phase));
     }
 
-    public static Phase getBukkitPhase(EnderDragonPhase phase) {
+    public static Phase getBukkitPhase(@NotNull EnderDragonPhase phase) {
         return Phase.values()[phase.getId()];
     }
 
-    public static EnderDragonPhase getMinecraftPhase(Phase phase) {
+    public static @NotNull EnderDragonPhase getMinecraftPhase(@NotNull Phase phase) {
         return EnderDragonPhase.getById(phase.ordinal());
     }
 
@@ -82,13 +85,13 @@ public class CraftEnderDragon extends CraftMob implements EnderDragon {
 
     // Paper start
     @Override
-    public org.bukkit.Location getPodium() {
+    public org.bukkit.@NotNull Location getPodium() {
         net.minecraft.core.BlockPos blockPosOrigin = this.getHandle().getPodium();
         return new org.bukkit.Location(getWorld(), blockPosOrigin.getX(), blockPosOrigin.getY(), blockPosOrigin.getZ());
     }
 
     @Override
-    public void setPodium(org.bukkit.Location location) {
+    public void setPodium(org.bukkit.@Nullable Location location) {
         if (location == null) {
             this.getHandle().setPodium(null);
         } else {
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftEnderDragonPart.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftEnderDragonPart.java
index a407e802164603c74ec1f4ad3c98bc50398954bc..6abefa167c7efebe45abafe3e6ade81453318ade 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftEnderDragonPart.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftEnderDragonPart.java
@@ -4,6 +4,8 @@ import org.bukkit.craftbukkit.CraftServer;
 import org.bukkit.entity.EnderDragon;
 import org.bukkit.entity.EnderDragonPart;
 import org.bukkit.entity.Entity;
+import org.jetbrains.annotations.NotNull;
+
 
 public class CraftEnderDragonPart extends CraftComplexPart implements EnderDragonPart {
     public CraftEnderDragonPart(CraftServer server, net.minecraft.world.entity.boss.EnderDragonPart entity) {
@@ -11,7 +13,7 @@ public class CraftEnderDragonPart extends CraftComplexPart implements EnderDrago
     }
 
     @Override
-    public EnderDragon getParent() {
+    public @NotNull EnderDragon getParent() {
         return (EnderDragon) super.getParent();
     }
 
@@ -21,7 +23,7 @@ public class CraftEnderDragonPart extends CraftComplexPart implements EnderDrago
     }
 
     @Override
-    public String toString() {
+    public @NotNull String toString() {
         return "CraftEnderDragonPart";
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftEnderPearl.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftEnderPearl.java
index 21d5d8d4becee2709295d45b4b4fd2d1edbd3910..2848e900d8ef15b223ae4de2c808f939eeef9fc9 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftEnderPearl.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftEnderPearl.java
@@ -4,6 +4,8 @@ import net.minecraft.world.entity.projectile.ThrownEnderpearl;
 import org.bukkit.craftbukkit.CraftServer;
 import org.bukkit.entity.EnderPearl;
 import org.bukkit.entity.EntityType;
+import org.jetbrains.annotations.NotNull;
+
 
 public class CraftEnderPearl extends CraftThrowableProjectile implements EnderPearl {
     public CraftEnderPearl(CraftServer server, ThrownEnderpearl entity) {
@@ -16,12 +18,12 @@ public class CraftEnderPearl extends CraftThrowableProjectile implements EnderPe
     }
 
     @Override
-    public String toString() {
+    public @NotNull String toString() {
         return "CraftEnderPearl";
     }
 
     @Override
-    public EntityType getType() {
+    public @NotNull EntityType getType() {
         return EntityType.ENDER_PEARL;
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftEnderSignal.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftEnderSignal.java
index 13c1188639e00cd96e00b179c4e353582bf66e64..cdc99d8ad8f1a1ec228e8d65aef2184d2c31d755 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftEnderSignal.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftEnderSignal.java
@@ -10,6 +10,9 @@ import org.bukkit.craftbukkit.inventory.CraftItemStack;
 import org.bukkit.entity.EnderSignal;
 import org.bukkit.entity.EntityType;
 import org.bukkit.inventory.ItemStack;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 public class CraftEnderSignal extends CraftEntity implements EnderSignal {
     public CraftEnderSignal(CraftServer server, EyeOfEnder entity) {
@@ -22,28 +25,28 @@ public class CraftEnderSignal extends CraftEntity implements EnderSignal {
     }
 
     @Override
-    public String toString() {
+    public @NotNull String toString() {
         return "CraftEnderSignal";
     }
 
     @Override
-    public EntityType getType() {
+    public @NotNull EntityType getType() {
         return EntityType.ENDER_SIGNAL;
     }
 
     @Override
-    public Location getTargetLocation() {
+    public @NotNull Location getTargetLocation() {
         return new Location(getWorld(), this.getHandle().tx, this.getHandle().ty, this.getHandle().tz, this.getHandle().getYRot(), this.getHandle().getXRot());
     }
 
     @Override
-    public void setTargetLocation(Location location) {
+    public void setTargetLocation(@NotNull Location location) {
         // Paper start
         this.setTargetLocation(location, true);
     }
 
     @Override
-    public void setTargetLocation(Location location, boolean update) {
+    public void setTargetLocation(@NotNull Location location, boolean update) {
         // Paper end
         Preconditions.checkArgument(getWorld().equals(location.getWorld()), "Cannot target EnderSignal across worlds");
         this.getHandle().signalTo(new BlockPos(location.getX(), location.getY(), location.getZ()), update); // Paper
@@ -60,12 +63,12 @@ public class CraftEnderSignal extends CraftEntity implements EnderSignal {
     }
 
     @Override
-    public ItemStack getItem() {
+    public @NotNull ItemStack getItem() {
         return CraftItemStack.asBukkitCopy(this.getHandle().getItem());
     }
 
     @Override
-    public void setItem(ItemStack item) {
+    public void setItem(@Nullable ItemStack item) {
         this.getHandle().setItem(item != null ? CraftItemStack.asNMSCopy(item) : Items.ENDER_EYE.getDefaultInstance());
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftEnderman.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftEnderman.java
index acdc4e578d70f8121c8c6be7682ba1ecef7687cf..7f89cf12f85b5534619795d4421c4947f57b2668 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftEnderman.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftEnderman.java
@@ -10,6 +10,9 @@ import org.bukkit.craftbukkit.util.CraftMagicNumbers;
 import org.bukkit.entity.Enderman;
 import org.bukkit.entity.EntityType;
 import org.bukkit.material.MaterialData;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 public class CraftEnderman extends CraftMonster implements Enderman {
     public CraftEnderman(CraftServer server, EnderMan entity) {
@@ -18,7 +21,7 @@ public class CraftEnderman extends CraftMonster implements Enderman {
 
     @Override public boolean teleportRandomly() { return getHandle().teleport(); } // Paper
     @Override
-    public MaterialData getCarriedMaterial() {
+    public @NotNull MaterialData getCarriedMaterial() {
         BlockState blockData = this.getHandle().getCarriedBlock();
         return (blockData == null) ? Material.AIR.getNewData((byte) 0) : CraftMagicNumbers.getMaterial(blockData);
     }
@@ -30,12 +33,12 @@ public class CraftEnderman extends CraftMonster implements Enderman {
     }
 
     @Override
-    public void setCarriedMaterial(MaterialData data) {
+    public void setCarriedMaterial(@NotNull MaterialData data) {
         this.getHandle().setCarriedBlock(CraftMagicNumbers.getBlock(data));
     }
 
     @Override
-    public void setCarriedBlock(BlockData blockData) {
+    public void setCarriedBlock(@Nullable BlockData blockData) {
         this.getHandle().setCarriedBlock(blockData == null ? null : ((CraftBlockData) blockData).getState());
     }
 
@@ -67,12 +70,12 @@ public class CraftEnderman extends CraftMonster implements Enderman {
     }
 
     @Override
-    public String toString() {
+    public @NotNull String toString() {
         return "CraftEnderman";
     }
 
     @Override
-    public EntityType getType() {
+    public @NotNull EntityType getType() {
         return EntityType.ENDERMAN;
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftEndermite.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftEndermite.java
index 75c7645fb5732c43d1da15181cf5c7ee4c3ecd6c..c39b78f23befe89119db0a6ddd4c479bead0f4e4 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftEndermite.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftEndermite.java
@@ -3,6 +3,8 @@ package org.bukkit.craftbukkit.entity;
 import org.bukkit.craftbukkit.CraftServer;
 import org.bukkit.entity.Endermite;
 import org.bukkit.entity.EntityType;
+import org.jetbrains.annotations.NotNull;
+
 
 public class CraftEndermite extends CraftMonster implements Endermite {
 
@@ -16,12 +18,12 @@ public class CraftEndermite extends CraftMonster implements Endermite {
     }
 
     @Override
-    public String toString() {
+    public @NotNull String toString() {
         return "CraftEndermite";
     }
 
     @Override
-    public EntityType getType() {
+    public @NotNull EntityType getType() {
         return EntityType.ENDERMITE;
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java
index 78f53ee557276de85f0431ebcb146445b1f4fb92..4c7d9c4b5406e32f0368bcbaf677be20c20cd58d 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java
@@ -190,6 +190,9 @@ import org.bukkit.plugin.Plugin;
 import org.bukkit.util.BoundingBox;
 import org.bukkit.util.NumberConversions;
 import org.bukkit.util.Vector;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 public abstract class CraftEntity implements org.bukkit.entity.Entity {
     private static PermissibleBase perm;
@@ -206,7 +209,7 @@ public abstract class CraftEntity implements org.bukkit.entity.Entity {
         this.entity = entity;
     }
 
-    public static CraftEntity getEntity(CraftServer server, Entity entity) {
+    public static @NotNull CraftEntity getEntity(CraftServer server, Entity entity) {
         /*
          * Order is *EXTREMELY* important -- keep it right! =D
          */
@@ -433,12 +436,12 @@ public abstract class CraftEntity implements org.bukkit.entity.Entity {
     }
 
     @Override
-    public Location getLocation() {
+    public @NotNull Location getLocation() {
         return new Location(this.getWorld(), this.entity.getX(), this.entity.getY(), this.entity.getZ(), this.entity.getBukkitYaw(), this.entity.getXRot());
     }
 
     @Override
-    public Location getLocation(Location loc) {
+    public Location getLocation(@Nullable Location loc) {
         if (loc != null) {
             loc.setWorld(this.getWorld());
             loc.setX(this.entity.getX());
@@ -452,12 +455,12 @@ public abstract class CraftEntity implements org.bukkit.entity.Entity {
     }
 
     @Override
-    public Vector getVelocity() {
+    public @NotNull Vector getVelocity() {
         return CraftVector.toBukkit(this.entity.getDeltaMovement());
     }
 
     @Override
-    public void setVelocity(Vector velocity) {
+    public void setVelocity(@NotNull Vector velocity) {
         Preconditions.checkArgument(velocity != null, "velocity");
         velocity.checkFinite();
         // Paper start - Warn server owners when plugins try to set super high velocities
@@ -481,7 +484,7 @@ public abstract class CraftEntity implements org.bukkit.entity.Entity {
      * @param vel incoming velocity to check
      * @return if the velocity has the potential to be a performance detriment
      */
-    private static boolean isUnsafeVelocity(Vector vel) {
+    private static boolean isUnsafeVelocity(@NotNull Vector vel) {
         final double x = vel.getX();
         final double y = vel.getY();
         final double z = vel.getZ();
@@ -505,7 +508,7 @@ public abstract class CraftEntity implements org.bukkit.entity.Entity {
     }
 
     @Override
-    public BoundingBox getBoundingBox() {
+    public @NotNull BoundingBox getBoundingBox() {
         AABB bb = this.getHandle().getBoundingBox();
         return new BoundingBox(bb.minX, bb.minY, bb.minZ, bb.maxX, bb.maxY, bb.maxZ);
     }
@@ -524,7 +527,7 @@ public abstract class CraftEntity implements org.bukkit.entity.Entity {
     }
 
     @Override
-    public World getWorld() {
+    public @NotNull World getWorld() {
         return entity.level.getWorld();
     }
 
@@ -544,18 +547,18 @@ public abstract class CraftEntity implements org.bukkit.entity.Entity {
     }
 
     @Override
-    public boolean teleport(Location location) {
+    public boolean teleport(@NotNull Location location) {
         return this.teleport(location, TeleportCause.PLUGIN);
     }
 
     @Override
-    public boolean teleport(Location location, TeleportCause cause) {
+    public boolean teleport(@NotNull Location location, @NotNull TeleportCause cause) {
         // Paper start - Teleport passenger API
         return teleport(location, cause, false);
     }
 
     @Override
-    public boolean teleport(Location location, TeleportCause cause, boolean ignorePassengers, boolean dismount) {
+    public boolean teleport(@NotNull Location location, TeleportCause cause, boolean ignorePassengers, boolean dismount) {
         // Paper end
         Preconditions.checkArgument(location != null, "location cannot be null");
         location.checkFinite();
@@ -595,17 +598,17 @@ public abstract class CraftEntity implements org.bukkit.entity.Entity {
     }
 
     @Override
-    public boolean teleport(org.bukkit.entity.Entity destination) {
+    public boolean teleport(org.bukkit.entity.@NotNull Entity destination) {
         return this.teleport(destination.getLocation());
     }
 
     @Override
-    public boolean teleport(org.bukkit.entity.Entity destination, TeleportCause cause) {
+    public boolean teleport(org.bukkit.entity.@NotNull Entity destination, @NotNull TeleportCause cause) {
         return this.teleport(destination.getLocation(), cause);
     }
 
     @Override
-    public List<org.bukkit.entity.Entity> getNearbyEntities(double x, double y, double z) {
+    public @NotNull List<org.bukkit.entity.Entity> getNearbyEntities(double x, double y, double z) {
         Preconditions.checkState(!entity.generation, "Cannot get nearby entities during world generation");
         org.spigotmc.AsyncCatcher.catchOp("getNearbyEntities"); // Spigot
 
@@ -697,7 +700,7 @@ public abstract class CraftEntity implements org.bukkit.entity.Entity {
     }
 
     @Override
-    public Server getServer() {
+    public @NotNull Server getServer() {
         return this.server;
     }
 
@@ -711,11 +714,11 @@ public abstract class CraftEntity implements org.bukkit.entity.Entity {
         entity.persist = persistent;
     }
 
-    public Vector getMomentum() {
+    public @NotNull Vector getMomentum() {
         return this.getVelocity();
     }
 
-    public void setMomentum(Vector value) {
+    public void setMomentum(@NotNull Vector value) {
         this.setVelocity(value);
     }
 
@@ -736,17 +739,17 @@ public abstract class CraftEntity implements org.bukkit.entity.Entity {
     }
 
     @Override
-    public List<org.bukkit.entity.Entity> getPassengers() {
+    public @NotNull List<org.bukkit.entity.Entity> getPassengers() {
         return Lists.newArrayList(Lists.transform(this.getHandle().passengers, new Function<Entity, org.bukkit.entity.Entity>() {
             @Override
-            public org.bukkit.entity.Entity apply(Entity input) {
+            public org.bukkit.entity.@NotNull Entity apply(@NotNull Entity input) {
                 return input.getBukkitEntity();
             }
         }));
     }
 
     @Override
-    public boolean addPassenger(org.bukkit.entity.Entity passenger) {
+    public boolean addPassenger(org.bukkit.entity.@Nullable Entity passenger) {
         Preconditions.checkArgument(passenger != null, "passenger == null");
         Preconditions.checkArgument(!this.equals(passenger), "Entity cannot ride itself.");
 
@@ -754,7 +757,7 @@ public abstract class CraftEntity implements org.bukkit.entity.Entity {
     }
 
     @Override
-    public boolean removePassenger(org.bukkit.entity.Entity passenger) {
+    public boolean removePassenger(org.bukkit.entity.@Nullable Entity passenger) {
         Preconditions.checkArgument(passenger != null, "passenger == null");
 
         ((CraftEntity) passenger).getHandle().stopRiding();
@@ -792,12 +795,12 @@ public abstract class CraftEntity implements org.bukkit.entity.Entity {
     }
 
     @Override
-    public EntityDamageEvent getLastDamageCause() {
+    public @Nullable EntityDamageEvent getLastDamageCause() {
         return this.lastDamageEvent;
     }
 
     @Override
-    public UUID getUniqueId() {
+    public @NotNull UUID getUniqueId() {
         return this.getHandle().getUUID();
     }
 
@@ -819,7 +822,7 @@ public abstract class CraftEntity implements org.bukkit.entity.Entity {
     }
 
     @Override
-    public void playEffect(EntityEffect type) {
+    public void playEffect(@NotNull EntityEffect type) {
         Preconditions.checkArgument(type != null, "type");
         Preconditions.checkState(!entity.generation, "Cannot play effect during world generation");
 
@@ -829,17 +832,17 @@ public abstract class CraftEntity implements org.bukkit.entity.Entity {
     }
 
     @Override
-    public Sound getSwimSound() {
+    public @NotNull Sound getSwimSound() {
         return CraftSound.getBukkit(this.getHandle().getSwimSound0());
     }
 
     @Override
-    public Sound getSwimSplashSound() {
+    public @NotNull Sound getSwimSplashSound() {
         return CraftSound.getBukkit(this.getHandle().getSwimSplashSound0());
     }
 
     @Override
-    public Sound getSwimHighSpeedSplashSound() {
+    public @NotNull Sound getSwimHighSpeedSplashSound() {
         return CraftSound.getBukkit(this.getHandle().getSwimHighSpeedSplashSound0());
     }
 
@@ -853,7 +856,7 @@ public abstract class CraftEntity implements org.bukkit.entity.Entity {
     }
 
     @Override
-    public boolean equals(Object obj) {
+    public boolean equals(@Nullable Object obj) {
         if (obj == null) {
             return false;
         }
@@ -873,22 +876,22 @@ public abstract class CraftEntity implements org.bukkit.entity.Entity {
     }
 
     @Override
-    public void setMetadata(String metadataKey, MetadataValue newMetadataValue) {
+    public void setMetadata(@NotNull String metadataKey, @NotNull MetadataValue newMetadataValue) {
         this.server.getEntityMetadata().setMetadata(this, metadataKey, newMetadataValue);
     }
 
     @Override
-    public List<MetadataValue> getMetadata(String metadataKey) {
+    public @NotNull List<MetadataValue> getMetadata(@NotNull String metadataKey) {
         return this.server.getEntityMetadata().getMetadata(this, metadataKey);
     }
 
     @Override
-    public boolean hasMetadata(String metadataKey) {
+    public boolean hasMetadata(@NotNull String metadataKey) {
         return this.server.getEntityMetadata().hasMetadata(this, metadataKey);
     }
 
     @Override
-    public void removeMetadata(String metadataKey, Plugin owningPlugin) {
+    public void removeMetadata(@NotNull String metadataKey, @NotNull Plugin owningPlugin) {
         this.server.getEntityMetadata().removeMetadata(this, metadataKey, owningPlugin);
     }
 
@@ -924,12 +927,12 @@ public abstract class CraftEntity implements org.bukkit.entity.Entity {
     }
 
     @Override
-    public void customName(final net.kyori.adventure.text.Component customName) {
+    public void customName(final net.kyori.adventure.text.@Nullable Component customName) {
         this.getHandle().setCustomName(customName != null ? io.papermc.paper.adventure.PaperAdventure.asVanilla(customName) : null);
     }
 
     @Override
-    public net.kyori.adventure.pointer.Pointers pointers() {
+    public net.kyori.adventure.pointer.@NotNull Pointers pointers() {
         if (this.adventure$pointers == null) {
             this.adventure$pointers = net.kyori.adventure.pointer.Pointers.builder()
                 .withDynamic(net.kyori.adventure.identity.Identity.DISPLAY_NAME, this::name)
@@ -943,7 +946,7 @@ public abstract class CraftEntity implements org.bukkit.entity.Entity {
     // Paper end
 
     @Override
-    public void setCustomName(String name) {
+    public void setCustomName(@Nullable String name) {
         // sane limit for name length
         if (name != null && name.length() > 256) {
             name = name.substring(0, 256);
@@ -994,7 +997,7 @@ public abstract class CraftEntity implements org.bukkit.entity.Entity {
     }
 
     @Override
-    public String getName() {
+    public @NotNull String getName() {
         return CraftChatMessage.fromComponent(this.getHandle().getName());
     }
     // Paper start
@@ -1010,47 +1013,47 @@ public abstract class CraftEntity implements org.bukkit.entity.Entity {
     // Paper end
 
     @Override
-    public boolean isPermissionSet(String name) {
+    public boolean isPermissionSet(@NotNull String name) {
         return CraftEntity.getPermissibleBase().isPermissionSet(name);
     }
 
     @Override
-    public boolean isPermissionSet(Permission perm) {
+    public boolean isPermissionSet(@NotNull Permission perm) {
         return CraftEntity.getPermissibleBase().isPermissionSet(perm);
     }
 
     @Override
-    public boolean hasPermission(String name) {
+    public boolean hasPermission(@NotNull String name) {
         return CraftEntity.getPermissibleBase().hasPermission(name);
     }
 
     @Override
-    public boolean hasPermission(Permission perm) {
+    public boolean hasPermission(@NotNull Permission perm) {
         return CraftEntity.getPermissibleBase().hasPermission(perm);
     }
 
     @Override
-    public PermissionAttachment addAttachment(Plugin plugin, String name, boolean value) {
+    public @NotNull PermissionAttachment addAttachment(@NotNull Plugin plugin, @NotNull String name, boolean value) {
         return CraftEntity.getPermissibleBase().addAttachment(plugin, name, value);
     }
 
     @Override
-    public PermissionAttachment addAttachment(Plugin plugin) {
+    public @NotNull PermissionAttachment addAttachment(@NotNull Plugin plugin) {
         return CraftEntity.getPermissibleBase().addAttachment(plugin);
     }
 
     @Override
-    public PermissionAttachment addAttachment(Plugin plugin, String name, boolean value, int ticks) {
+    public @Nullable PermissionAttachment addAttachment(@NotNull Plugin plugin, @NotNull String name, boolean value, int ticks) {
         return CraftEntity.getPermissibleBase().addAttachment(plugin, name, value, ticks);
     }
 
     @Override
-    public PermissionAttachment addAttachment(Plugin plugin, int ticks) {
+    public @Nullable PermissionAttachment addAttachment(@NotNull Plugin plugin, int ticks) {
         return CraftEntity.getPermissibleBase().addAttachment(plugin, ticks);
     }
 
     @Override
-    public void removeAttachment(PermissionAttachment attachment) {
+    public void removeAttachment(@NotNull PermissionAttachment attachment) {
         CraftEntity.getPermissibleBase().removeAttachment(attachment);
     }
 
@@ -1060,7 +1063,7 @@ public abstract class CraftEntity implements org.bukkit.entity.Entity {
     }
 
     @Override
-    public Set<PermissionAttachmentInfo> getEffectivePermissions() {
+    public @NotNull Set<PermissionAttachmentInfo> getEffectivePermissions() {
         return CraftEntity.getPermissibleBase().getEffectivePermissions();
     }
 
@@ -1125,38 +1128,38 @@ public abstract class CraftEntity implements org.bukkit.entity.Entity {
     }
 
     @Override
-    public Set<String> getScoreboardTags() {
+    public @NotNull Set<String> getScoreboardTags() {
         return this.getHandle().getTags();
     }
 
     @Override
-    public boolean addScoreboardTag(String tag) {
+    public boolean addScoreboardTag(@NotNull String tag) {
         return this.getHandle().addTag(tag);
     }
 
     @Override
-    public boolean removeScoreboardTag(String tag) {
+    public boolean removeScoreboardTag(@NotNull String tag) {
         return this.getHandle().removeTag(tag);
     }
 
     @Override
-    public PistonMoveReaction getPistonMoveReaction() {
+    public @NotNull PistonMoveReaction getPistonMoveReaction() {
         return PistonMoveReaction.getById(this.getHandle().getPistonPushReaction().ordinal());
     }
 
     @Override
-    public BlockFace getFacing() {
+    public @NotNull BlockFace getFacing() {
         // Use this method over getDirection because it handles boats and minecarts.
         return CraftBlock.notchToBlockFace(this.getHandle().getMotionDirection());
     }
 
     @Override
-    public CraftPersistentDataContainer getPersistentDataContainer() {
+    public @NotNull CraftPersistentDataContainer getPersistentDataContainer() {
         return this.persistentDataContainer;
     }
 
     @Override
-    public Pose getPose() {
+    public @NotNull Pose getPose() {
         return Pose.values()[this.getHandle().getPose().ordinal()];
     }
 
@@ -1173,24 +1176,24 @@ public abstract class CraftEntity implements org.bukkit.entity.Entity {
     // Paper end
 
     @Override
-    public SpawnCategory getSpawnCategory() {
+    public @NotNull SpawnCategory getSpawnCategory() {
         return CraftSpawnCategory.toBukkit(this.getHandle().getType().getCategory());
     }
 
-    public void storeBukkitValues(CompoundTag c) {
+    public void storeBukkitValues(@NotNull CompoundTag c) {
         if (!this.persistentDataContainer.isEmpty()) {
             c.put("BukkitValues", this.persistentDataContainer.toTagCompound());
         }
     }
 
-    public void readBukkitValues(CompoundTag c) {
+    public void readBukkitValues(@NotNull CompoundTag c) {
         Tag base = c.get("BukkitValues");
         if (base instanceof CompoundTag) {
             this.persistentDataContainer.putAll((CompoundTag) base);
         }
     }
 
-    protected CompoundTag save() {
+    protected @NotNull CompoundTag save() {
         CompoundTag nbttagcompound = new CompoundTag();
 
         nbttagcompound.putString("id", this.getHandle().getEncodeId());
@@ -1215,7 +1218,7 @@ public abstract class CraftEntity implements org.bukkit.entity.Entity {
         entityTracker.broadcast(this.getHandle().getAddEntityPacket());
     }
 
-    private static PermissibleBase getPermissibleBase() {
+    private static @NotNull PermissibleBase getPermissibleBase() {
         if (CraftEntity.perm == null) {
             CraftEntity.perm = new PermissibleBase(new ServerOperator() {
 
@@ -1258,7 +1261,7 @@ public abstract class CraftEntity implements org.bukkit.entity.Entity {
         }
     };
 
-    public org.bukkit.entity.Entity.Spigot spigot()
+    public org.bukkit.entity.Entity.@NotNull Spigot spigot()
     {
         return this.spigot;
     }
@@ -1266,7 +1269,7 @@ public abstract class CraftEntity implements org.bukkit.entity.Entity {
 
     // Paper start
     @Override
-    public java.util.concurrent.CompletableFuture<Boolean> teleportAsync(Location location, TeleportCause cause) {
+    public java.util.concurrent.@NotNull CompletableFuture<Boolean> teleportAsync(@NotNull Location location, @NotNull TeleportCause cause) {
         Preconditions.checkArgument(location != null, "location");
         location.checkFinite();
         Location locationClone = location.clone(); // clone so we don't need to worry about mutations after this call.
@@ -1317,7 +1320,7 @@ public abstract class CraftEntity implements org.bukkit.entity.Entity {
     }
 
     @Override
-    public org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason getEntitySpawnReason() {
+    public org.bukkit.event.entity.CreatureSpawnEvent.@NotNull SpawnReason getEntitySpawnReason() {
         return getHandle().spawnReason;
     }
 
@@ -1362,7 +1365,7 @@ public abstract class CraftEntity implements org.bukkit.entity.Entity {
     }
 
     @Override
-    public Set<org.bukkit.entity.Player> getTrackedPlayers() {
+    public @NotNull Set<org.bukkit.entity.Player> getTrackedPlayers() {
         if (this.entity.tracker == null) {
             return java.util.Collections.emptySet();
         }
@@ -1375,7 +1378,7 @@ public abstract class CraftEntity implements org.bukkit.entity.Entity {
     }
 
     @Override
-    public boolean spawnAt(Location location, org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason reason) {
+    public boolean spawnAt(@NotNull Location location, org.bukkit.event.entity.CreatureSpawnEvent.@NotNull SpawnReason reason) {
         Preconditions.checkNotNull(location, "location cannot be null");
         Preconditions.checkNotNull(reason, "reason cannot be null");
         entity.level = ((CraftWorld) location.getWorld()).getHandle();
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftEvoker.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftEvoker.java
index 7e861636710aa44ed36e7f20c6320dabb809c35d..03414ea19184e5e3becb6814911ef8d3ed1464f9 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftEvoker.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftEvoker.java
@@ -5,6 +5,9 @@ import net.minecraft.world.entity.monster.SpellcasterIllager;
 import org.bukkit.craftbukkit.CraftServer;
 import org.bukkit.entity.EntityType;
 import org.bukkit.entity.Evoker;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 public class CraftEvoker extends CraftSpellcaster implements Evoker {
 
@@ -18,22 +21,22 @@ public class CraftEvoker extends CraftSpellcaster implements Evoker {
     }
 
     @Override
-    public String toString() {
+    public @NotNull String toString() {
         return "CraftEvoker";
     }
 
     @Override
-    public EntityType getType() {
+    public @NotNull EntityType getType() {
         return EntityType.EVOKER;
     }
 
     @Override
-    public Evoker.Spell getCurrentSpell() {
+    public Evoker.@NotNull Spell getCurrentSpell() {
         return Evoker.Spell.values()[this.getHandle().getCurrentSpell().ordinal()];
     }
 
     @Override
-    public void setCurrentSpell(Evoker.Spell spell) {
+    public void setCurrentSpell(Evoker.@Nullable Spell spell) {
         this.getHandle().setIsCastingSpell(spell == null ? SpellcasterIllager.IllagerSpell.NONE : SpellcasterIllager.IllagerSpell.byId(spell.ordinal()));
     }
 
@@ -45,7 +48,7 @@ public class CraftEvoker extends CraftSpellcaster implements Evoker {
     }
 
     @Override
-    public void setWololoTarget(org.bukkit.entity.Sheep sheep) {
+    public void setWololoTarget(org.bukkit.entity.@Nullable Sheep sheep) {
         getHandle().setWololoTarget(sheep == null ? null : ((org.bukkit.craftbukkit.entity.CraftSheep) sheep).getHandle());
     }
     // Paper end
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftEvokerFangs.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftEvokerFangs.java
index 0d186f37987edfd380dbce96252a45bdc2e8c26b..61cd75e98bf22dd05b07706c95e77e399ab754b7 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftEvokerFangs.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftEvokerFangs.java
@@ -4,6 +4,9 @@ import org.bukkit.craftbukkit.CraftServer;
 import org.bukkit.entity.EntityType;
 import org.bukkit.entity.EvokerFangs;
 import org.bukkit.entity.LivingEntity;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 public class CraftEvokerFangs extends CraftEntity implements EvokerFangs {
 
@@ -17,12 +20,12 @@ public class CraftEvokerFangs extends CraftEntity implements EvokerFangs {
     }
 
     @Override
-    public String toString() {
+    public @NotNull String toString() {
         return "CraftEvokerFangs";
     }
 
     @Override
-    public EntityType getType() {
+    public @NotNull EntityType getType() {
         return EntityType.EVOKER_FANGS;
     }
 
@@ -34,7 +37,7 @@ public class CraftEvokerFangs extends CraftEntity implements EvokerFangs {
     }
 
     @Override
-    public void setOwner(LivingEntity owner) {
+    public void setOwner(@Nullable LivingEntity owner) {
         this.getHandle().setOwner(owner == null ? null : ((CraftLivingEntity) owner).getHandle());
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftExperienceOrb.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftExperienceOrb.java
index 84899284703baeb04bfc79251941265d52ac07e8..746717c5d43502e038f1c1fe70f865c484de2432 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftExperienceOrb.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftExperienceOrb.java
@@ -3,6 +3,8 @@ package org.bukkit.craftbukkit.entity;
 import org.bukkit.craftbukkit.CraftServer;
 import org.bukkit.entity.EntityType;
 import org.bukkit.entity.ExperienceOrb;
+import org.jetbrains.annotations.NotNull;
+
 
 public class CraftExperienceOrb extends CraftEntity implements ExperienceOrb {
     public CraftExperienceOrb(CraftServer server, net.minecraft.world.entity.ExperienceOrb entity) {
@@ -26,7 +28,7 @@ public class CraftExperienceOrb extends CraftEntity implements ExperienceOrb {
     public java.util.UUID getSourceEntityId() {
         return getHandle().sourceEntityId;
     }
-    public SpawnReason getSpawnReason() {
+    public @NotNull SpawnReason getSpawnReason() {
         return getHandle().spawnReason;
     }
     // Paper end
@@ -37,12 +39,12 @@ public class CraftExperienceOrb extends CraftEntity implements ExperienceOrb {
     }
 
     @Override
-    public String toString() {
+    public @NotNull String toString() {
         return "CraftExperienceOrb";
     }
 
     @Override
-    public EntityType getType() {
+    public @NotNull EntityType getType() {
         return EntityType.EXPERIENCE_ORB;
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftFallingBlock.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftFallingBlock.java
index 87c413c2f3b59ae9ef36e5becc10b29a81348022..3f0123a055d5963a815bb2508596704f7832abf1 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftFallingBlock.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftFallingBlock.java
@@ -7,6 +7,8 @@ import org.bukkit.craftbukkit.CraftServer;
 import org.bukkit.craftbukkit.block.data.CraftBlockData;
 import org.bukkit.entity.EntityType;
 import org.bukkit.entity.FallingBlock;
+import org.jetbrains.annotations.NotNull;
+
 
 public class CraftFallingBlock extends CraftEntity implements FallingBlock {
 
@@ -20,22 +22,22 @@ public class CraftFallingBlock extends CraftEntity implements FallingBlock {
     }
 
     @Override
-    public String toString() {
+    public @NotNull String toString() {
         return "CraftFallingBlock";
     }
 
     @Override
-    public EntityType getType() {
+    public @NotNull EntityType getType() {
         return EntityType.FALLING_BLOCK;
     }
 
     @Override
-    public Material getMaterial() {
+    public @NotNull Material getMaterial() {
         return this.getBlockData().getMaterial();
     }
 
     @Override
-    public BlockData getBlockData() {
+    public @NotNull BlockData getBlockData() {
         return CraftBlockData.fromData(this.getHandle().getBlockState());
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftFireball.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftFireball.java
index 2358e0c8a4a135d6deb47100c490a9c145f44827..f7315c2fe70acd0fb2241c0aa414a2c0f9028d4f 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftFireball.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftFireball.java
@@ -7,6 +7,8 @@ import org.bukkit.entity.EntityType;
 import org.bukkit.entity.Fireball;
 import org.bukkit.projectiles.ProjectileSource;
 import org.bukkit.util.Vector;
+import org.jetbrains.annotations.NotNull;
+
 
 public class CraftFireball extends AbstractProjectile implements Fireball {
     public CraftFireball(CraftServer server, AbstractHurtingProjectile entity) {
@@ -49,12 +51,12 @@ public class CraftFireball extends AbstractProjectile implements Fireball {
     }
 
     @Override
-    public Vector getDirection() {
+    public @NotNull Vector getDirection() {
         return new Vector(this.getHandle().xPower, this.getHandle().yPower, this.getHandle().zPower);
     }
 
     @Override
-    public void setDirection(Vector direction) {
+    public void setDirection(@NotNull Vector direction) {
         Validate.notNull(direction, "Direction can not be null");
         this.getHandle().setDirection(direction.getX(), direction.getY(), direction.getZ());
         update(); // SPIGOT-6579
@@ -71,7 +73,7 @@ public class CraftFireball extends AbstractProjectile implements Fireball {
     }
 
     @Override
-    public EntityType getType() {
+    public @NotNull EntityType getType() {
         return EntityType.UNKNOWN;
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftFirework.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftFirework.java
index d1c7ab67cba881d96b7a5e9220130d86d0514304..78de5b7f731f215a8b0b635f6a1f10f9ef3e9cbd 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftFirework.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftFirework.java
@@ -12,6 +12,9 @@ import org.bukkit.entity.EntityType;
 import org.bukkit.entity.Firework;
 import org.bukkit.entity.LivingEntity;
 import org.bukkit.inventory.meta.FireworkMeta;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 public class CraftFirework extends CraftProjectile implements Firework {
 
@@ -44,22 +47,22 @@ public class CraftFirework extends CraftProjectile implements Firework {
     }
 
     @Override
-    public String toString() {
+    public @NotNull String toString() {
         return "CraftFirework";
     }
 
     @Override
-    public EntityType getType() {
+    public @NotNull EntityType getType() {
         return EntityType.FIREWORK;
     }
 
     @Override
-    public FireworkMeta getFireworkMeta() {
+    public @NotNull FireworkMeta getFireworkMeta() {
         return (FireworkMeta) CraftItemStack.getItemMeta(this.getHandle().getEntityData().get(FireworkRocketEntity.DATA_ID_FIREWORKS_ITEM), Material.FIREWORK_ROCKET); // Paper - Expose firework item directly
     }
 
     @Override
-    public void setFireworkMeta(FireworkMeta meta) {
+    public void setFireworkMeta(@NotNull FireworkMeta meta) {
         applyFireworkEffect(meta); // Paper - Expose firework item directly
 
         // Copied from EntityFireworks constructor, update firework lifetime/power
@@ -69,7 +72,7 @@ public class CraftFirework extends CraftProjectile implements Firework {
     }
 
     @Override
-    public boolean setAttachedTo(LivingEntity entity) {
+    public boolean setAttachedTo(@Nullable LivingEntity entity) {
         if (this.isDetonated()) {
             return false;
         }
@@ -146,12 +149,12 @@ public class CraftFirework extends CraftProjectile implements Firework {
     // Paper end
     // Paper start - Expose firework item directly + manually setting flight
     @Override
-    public org.bukkit.inventory.ItemStack getItem() {
+    public org.bukkit.inventory.@NotNull ItemStack getItem() {
         return CraftItemStack.asBukkitCopy(this.getHandle().getItem());
     }
 
     @Override
-    public void setItem(org.bukkit.inventory.ItemStack itemStack) {
+    public void setItem(org.bukkit.inventory.@Nullable ItemStack itemStack) {
         FireworkMeta meta = getFireworkMeta();
         ItemStack nmsItem = itemStack == null ? ItemStack.EMPTY : CraftItemStack.asNMSCopy(itemStack);
         this.getHandle().getEntityData().set(FireworkRocketEntity.DATA_ID_FIREWORKS_ITEM, nmsItem);
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftFishHook.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftFishHook.java
index 5e0c2c5094e1578162d1a50d50701fbd25e6d961..ac22d1236f069675bbaeb40cc988751a8cc47e6a 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftFishHook.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftFishHook.java
@@ -9,6 +9,9 @@ import org.bukkit.entity.Entity;
 import org.bukkit.entity.EntityType;
 import org.bukkit.entity.FishHook;
 import org.bukkit.entity.FishHook.HookState;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 public class CraftFishHook extends CraftProjectile implements FishHook {
     private double biteChance = -1;
@@ -23,12 +26,12 @@ public class CraftFishHook extends CraftProjectile implements FishHook {
     }
 
     @Override
-    public String toString() {
+    public @NotNull String toString() {
         return "CraftFishingHook";
     }
 
     @Override
-    public EntityType getType() {
+    public @NotNull EntityType getType() {
         return EntityType.FISHING_HOOK;
     }
 
@@ -97,7 +100,7 @@ public class CraftFishHook extends CraftProjectile implements FishHook {
     }
 
     @Override
-    public void setHookedEntity(Entity entity) {
+    public void setHookedEntity(@Nullable Entity entity) {
         FishingHook hook = this.getHandle();
 
         hook.hookedIn = (entity != null) ? ((CraftEntity) entity).getHandle() : null;
@@ -116,7 +119,7 @@ public class CraftFishHook extends CraftProjectile implements FishHook {
     }
 
     @Override
-    public HookState getState() {
+    public @NotNull HookState getState() {
         return HookState.values()[this.getHandle().currentState.ordinal()];
     }
     // Paper start - More FishHook API
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftFox.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftFox.java
index 6c71be9b453fb662276869a24257969941501c0e..fdfa7251d2998ed2a2cf0999b6c145bd4ff09d0d 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftFox.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftFox.java
@@ -8,6 +8,9 @@ import org.bukkit.entity.AnimalTamer;
 import org.bukkit.entity.EntityType;
 import org.bukkit.entity.Fox;
 import org.bukkit.entity.Fox.Type;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 public class CraftFox extends CraftAnimals implements Fox {
 
@@ -21,22 +24,22 @@ public class CraftFox extends CraftAnimals implements Fox {
     }
 
     @Override
-    public EntityType getType() {
+    public @NotNull EntityType getType() {
         return EntityType.FOX;
     }
 
     @Override
-    public String toString() {
+    public @NotNull String toString() {
         return "CraftFox";
     }
 
     @Override
-    public Type getFoxType() {
+    public @NotNull Type getFoxType() {
         return Type.values()[this.getHandle().getVariant().ordinal()];
     }
 
     @Override
-    public void setFoxType(Type type) {
+    public void setFoxType(@NotNull Type type) {
         Preconditions.checkArgument(type != null, "type");
 
         this.getHandle().setVariant(net.minecraft.world.entity.animal.Fox.Type.values()[type.ordinal()]);
@@ -83,7 +86,7 @@ public class CraftFox extends CraftAnimals implements Fox {
     }
 
     @Override
-    public void setFirstTrustedPlayer(AnimalTamer player) {
+    public void setFirstTrustedPlayer(@Nullable AnimalTamer player) {
         if (player == null && this.getHandle().getEntityData().get(net.minecraft.world.entity.animal.Fox.DATA_TRUSTED_ID_1).isPresent()) {
             throw new IllegalStateException("Must remove second trusted player first");
         }
@@ -107,7 +110,7 @@ public class CraftFox extends CraftAnimals implements Fox {
     }
 
     @Override
-    public void setSecondTrustedPlayer(AnimalTamer player) {
+    public void setSecondTrustedPlayer(@Nullable AnimalTamer player) {
         if (player != null && !this.getHandle().getEntityData().get(net.minecraft.world.entity.animal.Fox.DATA_TRUSTED_ID_0).isPresent()) {
             throw new IllegalStateException("Must add first trusted player first");
         }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftFrog.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftFrog.java
index d67884a83866cdfe14d4f5025e2ff159b6e3ee5d..f578a79647d28a173779c9833c8d9e5cc6b70025 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftFrog.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftFrog.java
@@ -8,6 +8,9 @@ import org.bukkit.craftbukkit.CraftServer;
 import org.bukkit.craftbukkit.util.CraftNamespacedKey;
 import org.bukkit.entity.Entity;
 import org.bukkit.entity.EntityType;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 public class CraftFrog extends CraftAnimals implements org.bukkit.entity.Frog {
 
@@ -21,12 +24,12 @@ public class CraftFrog extends CraftAnimals implements org.bukkit.entity.Frog {
     }
 
     @Override
-    public String toString() {
+    public @NotNull String toString() {
         return "CraftFrog";
     }
 
     @Override
-    public EntityType getType() {
+    public @NotNull EntityType getType() {
         return EntityType.FROG;
     }
 
@@ -36,7 +39,7 @@ public class CraftFrog extends CraftAnimals implements org.bukkit.entity.Frog {
     }
 
     @Override
-    public void setTongueTarget(Entity target) {
+    public void setTongueTarget(@Nullable Entity target) {
         if (target == null) {
             this.getHandle().eraseTongueTarget();
         } else {
@@ -45,12 +48,12 @@ public class CraftFrog extends CraftAnimals implements org.bukkit.entity.Frog {
     }
 
     @Override
-    public Variant getVariant() {
+    public @NotNull Variant getVariant() {
         return Registry.FROG_VARIANT.get(CraftNamespacedKey.fromMinecraft(BuiltInRegistries.FROG_VARIANT.getKey(this.getHandle().getVariant())));
     }
 
     @Override
-    public void setVariant(Variant variant) {
+    public void setVariant(@NotNull Variant variant) {
         Preconditions.checkArgument(variant != null, "variant");
 
         this.getHandle().setVariant(BuiltInRegistries.FROG_VARIANT.get(CraftNamespacedKey.toMinecraft(variant.getKey())));
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftGhast.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftGhast.java
index fffaf4108b632ceabac4186d93b34ad0eb069a04..b67b108d20aa44b6e4b329a42861f0fbaf98781d 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftGhast.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftGhast.java
@@ -3,6 +3,8 @@ package org.bukkit.craftbukkit.entity;
 import org.bukkit.craftbukkit.CraftServer;
 import org.bukkit.entity.EntityType;
 import org.bukkit.entity.Ghast;
+import org.jetbrains.annotations.NotNull;
+
 
 public class CraftGhast extends CraftFlying implements Ghast {
 
@@ -16,12 +18,12 @@ public class CraftGhast extends CraftFlying implements Ghast {
     }
 
     @Override
-    public String toString() {
+    public @NotNull String toString() {
         return "CraftGhast";
     }
 
     @Override
-    public EntityType getType() {
+    public @NotNull EntityType getType() {
         return EntityType.GHAST;
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftGiant.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftGiant.java
index ae6c37627bf6b31b207e65c07c6b3f9def222d1d..acf958e6bda12cf49a9f6483d0f2afa4b5afaf11 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftGiant.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftGiant.java
@@ -3,6 +3,8 @@ package org.bukkit.craftbukkit.entity;
 import org.bukkit.craftbukkit.CraftServer;
 import org.bukkit.entity.EntityType;
 import org.bukkit.entity.Giant;
+import org.jetbrains.annotations.NotNull;
+
 
 public class CraftGiant extends CraftMonster implements Giant {
 
@@ -16,12 +18,12 @@ public class CraftGiant extends CraftMonster implements Giant {
     }
 
     @Override
-    public String toString() {
+    public @NotNull String toString() {
         return "CraftGiant";
     }
 
     @Override
-    public EntityType getType() {
+    public @NotNull EntityType getType() {
         return EntityType.GIANT;
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftGlowItemFrame.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftGlowItemFrame.java
index f507b6bd999985c26447810a59a8c73b294159ac..843d272c555c5e5101755a8123f2b74ed96c7dcd 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftGlowItemFrame.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftGlowItemFrame.java
@@ -3,6 +3,8 @@ package org.bukkit.craftbukkit.entity;
 import org.bukkit.craftbukkit.CraftServer;
 import org.bukkit.entity.EntityType;
 import org.bukkit.entity.GlowItemFrame;
+import org.jetbrains.annotations.NotNull;
+
 
 public class CraftGlowItemFrame extends CraftItemFrame implements GlowItemFrame {
 
@@ -16,12 +18,12 @@ public class CraftGlowItemFrame extends CraftItemFrame implements GlowItemFrame
     }
 
     @Override
-    public EntityType getType() {
+    public @NotNull EntityType getType() {
         return EntityType.GLOW_ITEM_FRAME;
     }
 
     @Override
-    public String toString() {
+    public @NotNull String toString() {
         return "CraftGlowItemFrame{item=" + getItem() + ", rotation=" + getRotation() + "}";
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftGlowSquid.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftGlowSquid.java
index 8d97c9d0a78c6258dd3dd6a832ee87cad283ee62..eca45eb80f55642771e0d374fadd537a1010d5c8 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftGlowSquid.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftGlowSquid.java
@@ -4,6 +4,8 @@ import com.google.common.base.Preconditions;
 import org.bukkit.craftbukkit.CraftServer;
 import org.bukkit.entity.EntityType;
 import org.bukkit.entity.GlowSquid;
+import org.jetbrains.annotations.NotNull;
+
 
 public class CraftGlowSquid extends CraftSquid implements GlowSquid {
 
@@ -17,12 +19,12 @@ public class CraftGlowSquid extends CraftSquid implements GlowSquid {
     }
 
     @Override
-    public EntityType getType() {
+    public @NotNull EntityType getType() {
         return EntityType.GLOW_SQUID;
     }
 
     @Override
-    public String toString() {
+    public @NotNull String toString() {
         return "CraftGlowSquid";
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftGoat.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftGoat.java
index e4be28b130e35ea263f85b3157898cd3a7e80561..e0e96b845a903d457aa822c94f550ae622fbc18f 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftGoat.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftGoat.java
@@ -3,6 +3,8 @@ package org.bukkit.craftbukkit.entity;
 import org.bukkit.craftbukkit.CraftServer;
 import org.bukkit.entity.EntityType;
 import org.bukkit.entity.Goat;
+import org.jetbrains.annotations.NotNull;
+
 
 public class CraftGoat extends CraftAnimals implements Goat {
 
@@ -16,12 +18,12 @@ public class CraftGoat extends CraftAnimals implements Goat {
     }
 
     @Override
-    public EntityType getType() {
+    public @NotNull EntityType getType() {
         return EntityType.GOAT;
     }
 
     @Override
-    public String toString() {
+    public @NotNull String toString() {
         return "CraftGoat";
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftGuardian.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftGuardian.java
index c3ddc2e87425f571ec38013fd8ce91e923a3b4bd..f60636ec9bab4802069efcbc1c1209a215cfddaa 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftGuardian.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftGuardian.java
@@ -4,6 +4,9 @@ import org.bukkit.craftbukkit.CraftServer;
 import org.bukkit.entity.EntityType;
 import org.bukkit.entity.Guardian;
 import org.bukkit.entity.LivingEntity;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 public class CraftGuardian extends CraftMonster implements Guardian {
 
@@ -22,12 +25,12 @@ public class CraftGuardian extends CraftMonster implements Guardian {
     }
 
     @Override
-    public EntityType getType() {
+    public @NotNull EntityType getType() {
         return EntityType.GUARDIAN;
     }
 
     @Override
-    public void setTarget(LivingEntity target) {
+    public void setTarget(@Nullable LivingEntity target) {
         super.setTarget(target);
 
         // clean up laser target, when target is removed
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftHanging.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftHanging.java
index 62e11bf104b8d39ac73883e2a5d207e5f7393253..6abb48cd6b5d3fd4e2f05a5959da7640bfdbdf50 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftHanging.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftHanging.java
@@ -7,6 +7,8 @@ import org.bukkit.craftbukkit.CraftServer;
 import org.bukkit.craftbukkit.block.CraftBlock;
 import org.bukkit.entity.EntityType;
 import org.bukkit.entity.Hanging;
+import org.jetbrains.annotations.NotNull;
+
 
 public class CraftHanging extends CraftEntity implements Hanging {
     public CraftHanging(CraftServer server, HangingEntity entity) {
@@ -14,17 +16,17 @@ public class CraftHanging extends CraftEntity implements Hanging {
     }
 
     @Override
-    public BlockFace getAttachedFace() {
+    public @NotNull BlockFace getAttachedFace() {
         return this.getFacing().getOppositeFace();
     }
 
     @Override
-    public void setFacingDirection(BlockFace face) {
+    public void setFacingDirection(@NotNull BlockFace face) {
         this.setFacingDirection(face, false);
     }
 
     @Override
-    public boolean setFacingDirection(BlockFace face, boolean force) {
+    public boolean setFacingDirection(@NotNull BlockFace face, boolean force) {
         HangingEntity hanging = this.getHandle();
         Direction dir = hanging.getDirection();
         switch (face) {
@@ -52,7 +54,7 @@ public class CraftHanging extends CraftEntity implements Hanging {
     }
 
     @Override
-    public BlockFace getFacing() {
+    public @NotNull BlockFace getFacing() {
         Direction direction = this.getHandle().getDirection();
         if (direction == null) return BlockFace.SELF;
         return CraftBlock.notchToBlockFace(direction);
@@ -69,7 +71,7 @@ public class CraftHanging extends CraftEntity implements Hanging {
     }
 
     @Override
-    public EntityType getType() {
+    public @NotNull EntityType getType() {
         return EntityType.UNKNOWN;
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftHoglin.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftHoglin.java
index d5b31e4051f22fee4b91eb0e6be25d72e0471eff..9f0853ec89b17a46fcb8ec6a8b75b234de3c20c2 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftHoglin.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftHoglin.java
@@ -4,6 +4,8 @@ import com.google.common.base.Preconditions;
 import org.bukkit.craftbukkit.CraftServer;
 import org.bukkit.entity.EntityType;
 import org.bukkit.entity.Hoglin;
+import org.jetbrains.annotations.NotNull;
+
 
 public class CraftHoglin extends CraftAnimals implements Hoglin {
 
@@ -58,12 +60,12 @@ public class CraftHoglin extends CraftAnimals implements Hoglin {
     }
 
     @Override
-    public String toString() {
+    public @NotNull String toString() {
         return "CraftHoglin";
     }
 
     @Override
-    public EntityType getType() {
+    public @NotNull EntityType getType() {
         return EntityType.HOGLIN;
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftHorse.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftHorse.java
index 1f474ef8f9e86da383206bd50ba00c7ed8352c5d..abc2c5738552ce11fe6f1bdcd669d3eb04467071 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftHorse.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftHorse.java
@@ -10,6 +10,8 @@ import org.bukkit.entity.Horse.Color;
 import org.bukkit.entity.Horse.Style;
 import org.bukkit.entity.Horse.Variant;
 import org.bukkit.inventory.HorseInventory;
+import org.jetbrains.annotations.NotNull;
+
 
 public class CraftHorse extends CraftAbstractHorse implements Horse {
 
@@ -23,28 +25,28 @@ public class CraftHorse extends CraftAbstractHorse implements Horse {
     }
 
     @Override
-    public Variant getVariant() {
+    public @NotNull Variant getVariant() {
         return Variant.HORSE;
     }
 
     @Override
-    public Color getColor() {
+    public @NotNull Color getColor() {
         return Color.values()[this.getHandle().getVariant().getId()];
     }
 
     @Override
-    public void setColor(Color color) {
+    public void setColor(@NotNull Color color) {
         Validate.notNull(color, "Color cannot be null");
         this.getHandle().setVariantAndMarkings(net.minecraft.world.entity.animal.horse.Variant.byId(color.ordinal()), this.getHandle().getMarkings());
     }
 
     @Override
-    public Style getStyle() {
+    public @NotNull Style getStyle() {
         return Style.values()[this.getHandle().getMarkings().getId()];
     }
 
     @Override
-    public void setStyle(Style style) {
+    public void setStyle(@NotNull Style style) {
         Validate.notNull(style, "Style cannot be null");
         this.getHandle().setVariantAndMarkings(this.getHandle().getVariant(), Markings.byId(style.ordinal()));
     }
@@ -60,17 +62,17 @@ public class CraftHorse extends CraftAbstractHorse implements Horse {
     }
 
     @Override
-    public HorseInventory getInventory() {
+    public @NotNull HorseInventory getInventory() {
         return new CraftInventoryHorse(this.getHandle().inventory);
     }
 
     @Override
-    public String toString() {
+    public @NotNull String toString() {
         return "CraftHorse{variant=" + this.getVariant() + ", owner=" + getOwner() + '}';
     }
 
     @Override
-    public EntityType getType() {
+    public @NotNull EntityType getType() {
         return EntityType.HORSE;
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftHumanEntity.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftHumanEntity.java
index e779dcc4982ff51e4d450265fd61bc26e8e74d3a..1b04502e9583fcaf8f42fd86d4245116d3bb6bcb 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftHumanEntity.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftHumanEntity.java
@@ -66,15 +66,18 @@ import org.bukkit.permissions.Permission;
 import org.bukkit.permissions.PermissionAttachment;
 import org.bukkit.permissions.PermissionAttachmentInfo;
 import org.bukkit.plugin.Plugin;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 public class CraftHumanEntity extends CraftLivingEntity implements HumanEntity {
     private CraftInventoryPlayer inventory;
-    private final CraftInventory enderChest;
+    private final @NotNull CraftInventory enderChest;
     protected final PermissibleBase perm = new PermissibleBase(this);
     private boolean op;
     private GameMode mode;
 
-    public CraftHumanEntity(final CraftServer server, final Player entity) {
+    public CraftHumanEntity(final @NotNull CraftServer server, final @NotNull Player entity) {
         super(server, entity);
         this.mode = server.getDefaultGameMode();
         this.inventory = new CraftInventoryPlayer(entity.getInventory());
@@ -82,7 +85,7 @@ public class CraftHumanEntity extends CraftLivingEntity implements HumanEntity {
     }
 
     @Override
-    public PlayerInventory getInventory() {
+    public @NotNull PlayerInventory getInventory() {
         return this.inventory;
     }
 
@@ -92,17 +95,17 @@ public class CraftHumanEntity extends CraftLivingEntity implements HumanEntity {
     }
 
     @Override
-    public Inventory getEnderChest() {
+    public @NotNull Inventory getEnderChest() {
         return this.enderChest;
     }
 
     @Override
-    public MainHand getMainHand() {
+    public @NotNull MainHand getMainHand() {
         return this.getHandle().getMainArm() == HumanoidArm.LEFT ? MainHand.LEFT : MainHand.RIGHT;
     }
 
     @Override
-    public ItemStack getItemInHand() {
+    public @NotNull ItemStack getItemInHand() {
         return this.getInventory().getItemInHand();
     }
 
@@ -112,7 +115,7 @@ public class CraftHumanEntity extends CraftLivingEntity implements HumanEntity {
     }
 
     @Override
-    public ItemStack getItemOnCursor() {
+    public @NotNull ItemStack getItemOnCursor() {
         return CraftItemStack.asCraftMirror(this.getHandle().containerMenu.getCarried());
     }
 
@@ -163,7 +166,7 @@ public class CraftHumanEntity extends CraftLivingEntity implements HumanEntity {
     }
     // Paper end
     @Override
-    public boolean sleep(Location location, boolean force) {
+    public boolean sleep(@NotNull Location location, boolean force) {
         Preconditions.checkArgument(location != null, "Location cannot be null");
         Preconditions.checkArgument(location.getWorld() != null, "Location needs to be in a world");
         Preconditions.checkArgument(location.getWorld().equals(getWorld()), "Cannot sleep across worlds");
@@ -193,7 +196,7 @@ public class CraftHumanEntity extends CraftLivingEntity implements HumanEntity {
     }
 
     @Override
-    public Location getBedLocation() {
+    public @NotNull Location getBedLocation() {
         Preconditions.checkState(isSleeping(), "Not sleeping");
 
         BlockPos bed = this.getHandle().getSleepingPos().get();
@@ -201,7 +204,7 @@ public class CraftHumanEntity extends CraftLivingEntity implements HumanEntity {
     }
 
     @Override
-    public String getName() {
+    public @NotNull String getName() {
         return this.getHandle().getScoreboardName();
     }
 
@@ -211,47 +214,47 @@ public class CraftHumanEntity extends CraftLivingEntity implements HumanEntity {
     }
 
     @Override
-    public boolean isPermissionSet(String name) {
+    public boolean isPermissionSet(@NotNull String name) {
         return this.perm.isPermissionSet(name);
     }
 
     @Override
-    public boolean isPermissionSet(Permission perm) {
+    public boolean isPermissionSet(@NotNull Permission perm) {
         return this.perm.isPermissionSet(perm);
     }
 
     @Override
-    public boolean hasPermission(String name) {
+    public boolean hasPermission(@NotNull String name) {
         return this.perm.hasPermission(name);
     }
 
     @Override
-    public boolean hasPermission(Permission perm) {
+    public boolean hasPermission(@NotNull Permission perm) {
         return this.perm.hasPermission(perm);
     }
 
     @Override
-    public PermissionAttachment addAttachment(Plugin plugin, String name, boolean value) {
+    public @NotNull PermissionAttachment addAttachment(@NotNull Plugin plugin, @NotNull String name, boolean value) {
         return this.perm.addAttachment(plugin, name, value);
     }
 
     @Override
-    public PermissionAttachment addAttachment(Plugin plugin) {
+    public @NotNull PermissionAttachment addAttachment(@NotNull Plugin plugin) {
         return this.perm.addAttachment(plugin);
     }
 
     @Override
-    public PermissionAttachment addAttachment(Plugin plugin, String name, boolean value, int ticks) {
+    public PermissionAttachment addAttachment(@NotNull Plugin plugin, @NotNull String name, boolean value, int ticks) {
         return this.perm.addAttachment(plugin, name, value, ticks);
     }
 
     @Override
-    public PermissionAttachment addAttachment(Plugin plugin, int ticks) {
+    public PermissionAttachment addAttachment(@NotNull Plugin plugin, int ticks) {
         return this.perm.addAttachment(plugin, ticks);
     }
 
     @Override
-    public void removeAttachment(PermissionAttachment attachment) {
+    public void removeAttachment(@NotNull PermissionAttachment attachment) {
         this.perm.removeAttachment(attachment);
     }
 
@@ -267,17 +270,17 @@ public class CraftHumanEntity extends CraftLivingEntity implements HumanEntity {
     }
 
     @Override
-    public Set<PermissionAttachmentInfo> getEffectivePermissions() {
+    public @NotNull Set<PermissionAttachmentInfo> getEffectivePermissions() {
         return this.perm.getEffectivePermissions();
     }
 
     @Override
-    public GameMode getGameMode() {
+    public @NotNull GameMode getGameMode() {
         return this.mode;
     }
 
     @Override
-    public void setGameMode(GameMode mode) {
+    public void setGameMode(@Nullable GameMode mode) {
         if (mode == null) {
             throw new IllegalArgumentException("Mode cannot be null");
         }
@@ -290,18 +293,18 @@ public class CraftHumanEntity extends CraftLivingEntity implements HumanEntity {
         return (Player) entity;
     }
 
-    public void setHandle(final Player entity) {
+    public void setHandle(final @NotNull Player entity) {
         super.setHandle(entity);
         this.inventory = new CraftInventoryPlayer(entity.getInventory());
     }
 
     @Override
-    public String toString() {
+    public @NotNull String toString() {
         return "CraftHumanEntity{" + "id=" + getEntityId() + "name=" + this.getName() + '}';
     }
 
     @Override
-    public InventoryView getOpenInventory() {
+    public @NotNull InventoryView getOpenInventory() {
         return this.getHandle().containerMenu.getBukkitView();
     }
 
@@ -346,7 +349,7 @@ public class CraftHumanEntity extends CraftLivingEntity implements HumanEntity {
         return this.getHandle().containerMenu.getBukkitView();
     }
 
-    private static void openCustomInventory(Inventory inventory, ServerPlayer player, MenuType<?> windowType) {
+    private static void openCustomInventory(Inventory inventory, @NotNull ServerPlayer player, @Nullable MenuType<?> windowType) {
         if (player.connection == null) return;
         Preconditions.checkArgument(windowType != null, "Unknown windowType");
         AbstractContainerMenu container = new CraftContainer(inventory, player, player.nextContainerCounter());
@@ -365,7 +368,7 @@ public class CraftHumanEntity extends CraftLivingEntity implements HumanEntity {
     }
 
     @Override
-    public InventoryView openWorkbench(Location location, boolean force) {
+    public InventoryView openWorkbench(@Nullable Location location, boolean force) {
         if (location == null) {
             location = getLocation();
         }
@@ -383,7 +386,7 @@ public class CraftHumanEntity extends CraftLivingEntity implements HumanEntity {
     }
 
     @Override
-    public InventoryView openEnchanting(Location location, boolean force) {
+    public InventoryView openEnchanting(@Nullable Location location, boolean force) {
         if (location == null) {
             location = getLocation();
         }
@@ -446,7 +449,7 @@ public class CraftHumanEntity extends CraftLivingEntity implements HumanEntity {
     }
 
     @Override
-    public InventoryView openMerchant(Merchant merchant, boolean force) {
+    public InventoryView openMerchant(@NotNull Merchant merchant, boolean force) {
         Preconditions.checkNotNull(merchant, "merchant cannot be null");
 
         if (!force && merchant.isTrading()) {
@@ -509,7 +512,7 @@ public class CraftHumanEntity extends CraftLivingEntity implements HumanEntity {
         return openInventory(location, force, Material.STONECUTTER);
     }
 
-    private InventoryView openInventory(Location location, boolean force, Material material) {
+    private @Nullable InventoryView openInventory(@Nullable Location location, boolean force, Material material) {
         org.spigotmc.AsyncCatcher.catchOp("open" + material);
         if (location == null) {
             location = getLocation();
@@ -548,7 +551,7 @@ public class CraftHumanEntity extends CraftLivingEntity implements HumanEntity {
         this.getHandle().closeContainer(org.bukkit.event.inventory.InventoryCloseEvent.Reason.PLUGIN);
     }
     @Override
-    public void closeInventory(org.bukkit.event.inventory.InventoryCloseEvent.Reason reason) {
+    public void closeInventory(org.bukkit.event.inventory.InventoryCloseEvent.@NotNull Reason reason) {
         getHandle().closeContainer(reason);
     }
     // Paper end
@@ -585,7 +588,7 @@ public class CraftHumanEntity extends CraftLivingEntity implements HumanEntity {
     }
 
     @Override
-    public boolean hasCooldown(Material material) {
+    public boolean hasCooldown(@Nullable Material material) {
         Preconditions.checkArgument(material != null, "Material cannot be null");
         Preconditions.checkArgument(material.isItem(), "Material %s is not an item", material);
 
@@ -593,7 +596,7 @@ public class CraftHumanEntity extends CraftLivingEntity implements HumanEntity {
     }
 
     @Override
-    public int getCooldown(Material material) {
+    public int getCooldown(@Nullable Material material) {
         Preconditions.checkArgument(material != null, "Material cannot be null");
         Preconditions.checkArgument(material.isItem(), "Material %s is not an item", material);
 
@@ -602,7 +605,7 @@ public class CraftHumanEntity extends CraftLivingEntity implements HumanEntity {
     }
 
     @Override
-    public void setCooldown(Material material, int ticks) {
+    public void setCooldown(@Nullable Material material, int ticks) {
         Preconditions.checkArgument(material != null, "Material cannot be null");
         Preconditions.checkArgument(material.isItem(), "Material %s is not an item", material);
         Preconditions.checkArgument(ticks >= 0, "Cannot have negative cooldown");
@@ -642,7 +645,7 @@ public class CraftHumanEntity extends CraftLivingEntity implements HumanEntity {
     }
 
     @Override
-    public int discoverRecipes(Collection<NamespacedKey> recipes) {
+    public int discoverRecipes(@NotNull Collection<NamespacedKey> recipes) {
         return this.getHandle().awardRecipes(this.bukkitKeysToMinecraftRecipes(recipes));
     }
 
@@ -652,7 +655,7 @@ public class CraftHumanEntity extends CraftLivingEntity implements HumanEntity {
     }
 
     @Override
-    public int undiscoverRecipes(Collection<NamespacedKey> recipes) {
+    public int undiscoverRecipes(@NotNull Collection<NamespacedKey> recipes) {
         return this.getHandle().resetRecipes(this.bukkitKeysToMinecraftRecipes(recipes));
     }
 
@@ -662,11 +665,11 @@ public class CraftHumanEntity extends CraftLivingEntity implements HumanEntity {
     }
 
     @Override
-    public Set<NamespacedKey> getDiscoveredRecipes() {
+    public @NotNull Set<NamespacedKey> getDiscoveredRecipes() {
         return ImmutableSet.of();
     }
 
-    private Collection<Recipe<?>> bukkitKeysToMinecraftRecipes(Collection<NamespacedKey> recipeKeys) {
+    private @NotNull Collection<Recipe<?>> bukkitKeysToMinecraftRecipes(@NotNull Collection<NamespacedKey> recipeKeys) {
         Collection<Recipe<?>> recipes = new ArrayList<>();
         RecipeManager manager = this.getHandle().level.getServer().getRecipeManager();
 
@@ -694,7 +697,7 @@ public class CraftHumanEntity extends CraftLivingEntity implements HumanEntity {
     }
 
     @Override
-    public void setShoulderEntityLeft(org.bukkit.entity.Entity entity) {
+    public void setShoulderEntityLeft(org.bukkit.entity.@Nullable Entity entity) {
         this.getHandle().setShoulderEntityLeft(entity == null ? new CompoundTag() : ((CraftEntity) entity).save());
         if (entity != null) {
             entity.remove();
@@ -713,7 +716,7 @@ public class CraftHumanEntity extends CraftLivingEntity implements HumanEntity {
     }
 
     @Override
-    public void setShoulderEntityRight(org.bukkit.entity.Entity entity) {
+    public void setShoulderEntityRight(org.bukkit.entity.@Nullable Entity entity) {
         this.getHandle().setShoulderEntityRight(entity == null ? new CompoundTag() : ((CraftEntity) entity).save());
         if (entity != null) {
             entity.remove();
@@ -722,7 +725,7 @@ public class CraftHumanEntity extends CraftLivingEntity implements HumanEntity {
 
     // Paper start - move open sign method to HumanEntity
     @Override
-    public void openSign(org.bukkit.block.Sign sign) {
+    public void openSign(org.bukkit.block.@NotNull Sign sign) {
         org.bukkit.craftbukkit.block.CraftSign.openSign(sign, this);
     }
     // Paper end
@@ -798,7 +801,7 @@ public class CraftHumanEntity extends CraftLivingEntity implements HumanEntity {
     }
 
     @Override
-    public void setLastDeathLocation(Location location) {
+    public void setLastDeathLocation(@Nullable Location location) {
         if (location == null) {
             this.getHandle().setLastDeathLocation(Optional.empty());
         } else {
@@ -807,7 +810,7 @@ public class CraftHumanEntity extends CraftLivingEntity implements HumanEntity {
     }
 
     @Override
-    public Firework fireworkBoost(ItemStack fireworkItemStack) {
+    public Firework fireworkBoost(@NotNull ItemStack fireworkItemStack) {
         Preconditions.checkArgument(fireworkItemStack != null, "fireworkItemStack must not be null");
         Preconditions.checkArgument(fireworkItemStack.getType() == Material.FIREWORK_ROCKET, "fireworkItemStack must be of type %s", Material.FIREWORK_ROCKET);
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftHusk.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftHusk.java
index 934c8feb00aff585485931956b34fa08c0877667..5e33c205399264873a7ab249979ca86316b2b078 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftHusk.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftHusk.java
@@ -3,6 +3,8 @@ package org.bukkit.craftbukkit.entity;
 import org.bukkit.craftbukkit.CraftServer;
 import org.bukkit.entity.EntityType;
 import org.bukkit.entity.Husk;
+import org.jetbrains.annotations.NotNull;
+
 
 public class CraftHusk extends CraftZombie implements Husk {
 
@@ -11,12 +13,12 @@ public class CraftHusk extends CraftZombie implements Husk {
     }
 
     @Override
-    public String toString() {
+    public @NotNull String toString() {
         return "CraftHusk";
     }
 
     @Override
-    public EntityType getType() {
+    public @NotNull EntityType getType() {
         return EntityType.HUSK;
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftIllusioner.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftIllusioner.java
index bbf7189a0fc9921e7a6007494f91229d9fba0846..ffa932076904500324635ceb36d0d1004587199b 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftIllusioner.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftIllusioner.java
@@ -3,6 +3,8 @@ package org.bukkit.craftbukkit.entity;
 import org.bukkit.craftbukkit.CraftServer;
 import org.bukkit.entity.EntityType;
 import org.bukkit.entity.Illusioner;
+import org.jetbrains.annotations.NotNull;
+
 
 public class CraftIllusioner extends CraftSpellcaster implements Illusioner, com.destroystokyo.paper.entity.CraftRangedEntity<net.minecraft.world.entity.monster.Illusioner> { // Paper
 
@@ -16,12 +18,12 @@ public class CraftIllusioner extends CraftSpellcaster implements Illusioner, com
     }
 
     @Override
-    public String toString() {
+    public @NotNull String toString() {
         return "CraftIllusioner";
     }
 
     @Override
-    public EntityType getType() {
+    public @NotNull EntityType getType() {
         return EntityType.ILLUSIONER;
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftIronGolem.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftIronGolem.java
index 2966d4d466f44751b2f02afda2273a708c12b251..89af1972202ffd9d87bb7cfde0c56b4afe5f1d54 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftIronGolem.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftIronGolem.java
@@ -3,6 +3,8 @@ package org.bukkit.craftbukkit.entity;
 import org.bukkit.craftbukkit.CraftServer;
 import org.bukkit.entity.EntityType;
 import org.bukkit.entity.IronGolem;
+import org.jetbrains.annotations.NotNull;
+
 
 public class CraftIronGolem extends CraftGolem implements IronGolem {
     public CraftIronGolem(CraftServer server, net.minecraft.world.entity.animal.IronGolem entity) {
@@ -15,7 +17,7 @@ public class CraftIronGolem extends CraftGolem implements IronGolem {
     }
 
     @Override
-    public String toString() {
+    public @NotNull String toString() {
         return "CraftIronGolem";
     }
 
@@ -30,7 +32,7 @@ public class CraftIronGolem extends CraftGolem implements IronGolem {
     }
 
     @Override
-    public EntityType getType() {
+    public @NotNull EntityType getType() {
         return EntityType.IRON_GOLEM;
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftItem.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftItem.java
index ecec5e17807a760769fc0ea79c2a0161cc5db1ef..d704543cd13406b716120d52711052716423a86b 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftItem.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftItem.java
@@ -8,6 +8,8 @@ import org.bukkit.craftbukkit.inventory.CraftItemStack;
 import org.bukkit.entity.EntityType;
 import org.bukkit.entity.Item;
 import org.bukkit.inventory.ItemStack;
+import org.jetbrains.annotations.NotNull;
+
 
 public class CraftItem extends CraftEntity implements Item {
 
@@ -28,7 +30,7 @@ public class CraftItem extends CraftEntity implements Item {
     }
 
     @Override
-    public ItemStack getItemStack() {
+    public @NotNull ItemStack getItemStack() {
         return CraftItemStack.asCraftMirror(this.item.getItem());
     }
 
@@ -152,12 +154,12 @@ public class CraftItem extends CraftEntity implements Item {
     }
 
     @Override
-    public String toString() {
+    public @NotNull String toString() {
         return "CraftItem";
     }
 
     @Override
-    public EntityType getType() {
+    public @NotNull EntityType getType() {
         return EntityType.DROPPED_ITEM;
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftItemFrame.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftItemFrame.java
index 2a297adc49129729751317817d959c2d2566fc3e..306f267555611e6b9cb467cf8a3d5c3bf8f1f01a 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftItemFrame.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftItemFrame.java
@@ -12,6 +12,8 @@ import org.bukkit.craftbukkit.block.CraftBlock;
 import org.bukkit.craftbukkit.inventory.CraftItemStack;
 import org.bukkit.entity.EntityType;
 import org.bukkit.entity.ItemFrame;
+import org.jetbrains.annotations.NotNull;
+
 
 public class CraftItemFrame extends CraftHanging implements ItemFrame {
     public CraftItemFrame(CraftServer server, net.minecraft.world.entity.decoration.ItemFrame entity) {
@@ -19,7 +21,7 @@ public class CraftItemFrame extends CraftHanging implements ItemFrame {
     }
 
     @Override
-    public boolean setFacingDirection(BlockFace face, boolean force) {
+    public boolean setFacingDirection(@NotNull BlockFace face, boolean force) {
         HangingEntity hanging = this.getHandle();
         Direction oldDir = hanging.getDirection();
         Direction newDir = CraftBlock.blockFaceToNotch(face);
@@ -63,7 +65,7 @@ public class CraftItemFrame extends CraftHanging implements ItemFrame {
     }
 
     @Override
-    public org.bukkit.inventory.ItemStack getItem() {
+    public org.bukkit.inventory.@NotNull ItemStack getItem() {
         return CraftItemStack.asBukkitCopy(this.getHandle().getItem());
     }
 
@@ -79,11 +81,11 @@ public class CraftItemFrame extends CraftHanging implements ItemFrame {
     }
 
     @Override
-    public Rotation getRotation() {
+    public @NotNull Rotation getRotation() {
         return this.toBukkitRotation(this.getHandle().getRotation());
     }
 
-    Rotation toBukkitRotation(int value) {
+    @NotNull Rotation toBukkitRotation(int value) {
         // Translate NMS rotation integer to Bukkit API
         switch (value) {
         case 0:
@@ -108,12 +110,12 @@ public class CraftItemFrame extends CraftHanging implements ItemFrame {
     }
 
     @Override
-    public void setRotation(Rotation rotation) {
+    public void setRotation(@NotNull Rotation rotation) {
         Validate.notNull(rotation, "Rotation cannot be null");
         this.getHandle().setRotation(CraftItemFrame.toInteger(rotation));
     }
 
-    static int toInteger(Rotation rotation) {
+    static int toInteger(@NotNull Rotation rotation) {
         // Translate Bukkit API rotation to NMS integer
         switch (rotation) {
         case NONE:
@@ -168,7 +170,7 @@ public class CraftItemFrame extends CraftHanging implements ItemFrame {
     }
 
     @Override
-    public EntityType getType() {
+    public @NotNull EntityType getType() {
         return EntityType.ITEM_FRAME;
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftLargeFireball.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftLargeFireball.java
index 4bf68ae4c7417d2b97d2da93dffe2e0c3291129f..0371c32f1b9d71a82a1d0c1367fd18db12d74fc3 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftLargeFireball.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftLargeFireball.java
@@ -3,6 +3,8 @@ package org.bukkit.craftbukkit.entity;
 import org.bukkit.craftbukkit.CraftServer;
 import org.bukkit.entity.EntityType;
 import org.bukkit.entity.LargeFireball;
+import org.jetbrains.annotations.NotNull;
+
 
 public class CraftLargeFireball extends CraftSizedFireball implements LargeFireball {
     public CraftLargeFireball(CraftServer server, net.minecraft.world.entity.projectile.LargeFireball entity) {
@@ -21,12 +23,12 @@ public class CraftLargeFireball extends CraftSizedFireball implements LargeFireb
     }
 
     @Override
-    public String toString() {
+    public @NotNull String toString() {
         return "CraftLargeFireball";
     }
 
     @Override
-    public EntityType getType() {
+    public @NotNull EntityType getType() {
         return EntityType.FIREBALL;
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftLeash.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftLeash.java
index 2fc419c0c51c6d88addd98212b198546272b2b13..838a2814679427055c03b85745a1849f6d6f89be 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftLeash.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftLeash.java
@@ -6,6 +6,8 @@ import org.bukkit.block.BlockFace;
 import org.bukkit.craftbukkit.CraftServer;
 import org.bukkit.entity.EntityType;
 import org.bukkit.entity.LeashHitch;
+import org.jetbrains.annotations.NotNull;
+
 
 public class CraftLeash extends CraftHanging implements LeashHitch {
     public CraftLeash(CraftServer server, LeashFenceKnotEntity entity) {
@@ -20,7 +22,7 @@ public class CraftLeash extends CraftHanging implements LeashHitch {
     }
 
     @Override
-    public BlockFace getFacing() {
+    public @NotNull BlockFace getFacing() {
         // Leash hitch has no facing direction, so we return self
         return BlockFace.SELF;
     }
@@ -31,12 +33,12 @@ public class CraftLeash extends CraftHanging implements LeashHitch {
     }
 
     @Override
-    public String toString() {
+    public @NotNull String toString() {
         return "CraftLeash";
     }
 
     @Override
-    public EntityType getType() {
+    public @NotNull EntityType getType() {
         return EntityType.LEASH_HITCH;
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftLightningStrike.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftLightningStrike.java
index e515e819774bfb31ec03f05a5502921e66f2b0e2..087c72968370b501943c8f9cf2dfc0860479e219 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftLightningStrike.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftLightningStrike.java
@@ -4,6 +4,8 @@ import net.minecraft.world.entity.LightningBolt;
 import org.bukkit.craftbukkit.CraftServer;
 import org.bukkit.entity.EntityType;
 import org.bukkit.entity.LightningStrike;
+import org.jetbrains.annotations.NotNull;
+
 
 public class CraftLightningStrike extends CraftEntity implements LightningStrike {
     public CraftLightningStrike(final CraftServer server, final LightningBolt entity) {
@@ -21,12 +23,12 @@ public class CraftLightningStrike extends CraftEntity implements LightningStrike
     }
 
     @Override
-    public String toString() {
+    public @NotNull String toString() {
         return "CraftLightningStrike";
     }
 
     @Override
-    public EntityType getType() {
+    public @NotNull EntityType getType() {
         return EntityType.LIGHTNING;
     }
 
@@ -41,7 +43,7 @@ public class CraftLightningStrike extends CraftEntity implements LightningStrike
     };
 
     @Override
-    public LightningStrike.Spigot spigot() {
+    public LightningStrike.@NotNull Spigot spigot() {
         return this.spigot;
     }
     // Spigot end
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftLivingEntity.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftLivingEntity.java
index 09da9d3c85e36c2a78663f58a97963dbc795a367..0680fff789a3cba9932131f6fb80692b0019a1db 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftLivingEntity.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftLivingEntity.java
@@ -85,6 +85,9 @@ import org.bukkit.potion.PotionType;
 import org.bukkit.util.BlockIterator;
 import org.bukkit.util.RayTraceResult;
 import org.bukkit.util.Vector;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 public class CraftLivingEntity extends CraftEntity implements LivingEntity {
     private CraftEntityEquipment equipment;
@@ -168,7 +171,7 @@ public class CraftLivingEntity extends CraftEntity implements LivingEntity {
         return this.getEyeHeight();
     }
 
-    private List<Block> getLineOfSight(Set<Material> transparent, int maxDistance, int maxLength) {
+    private @NotNull List<Block> getLineOfSight(@Nullable Set<Material> transparent, int maxDistance, int maxLength) {
         Preconditions.checkState(!this.getHandle().generation, "Cannot get line of sight during world generation");
 
         if (transparent == null) {
@@ -194,24 +197,24 @@ public class CraftLivingEntity extends CraftEntity implements LivingEntity {
     }
 
     @Override
-    public List<Block> getLineOfSight(Set<Material> transparent, int maxDistance) {
+    public @NotNull List<Block> getLineOfSight(Set<Material> transparent, int maxDistance) {
         return this.getLineOfSight(transparent, maxDistance, 0);
     }
 
     @Override
-    public Block getTargetBlock(Set<Material> transparent, int maxDistance) {
+    public @NotNull Block getTargetBlock(Set<Material> transparent, int maxDistance) {
         List<Block> blocks = this.getLineOfSight(transparent, maxDistance, 1);
         return blocks.get(0);
     }
 
     // Paper start
     @Override
-    public Block getTargetBlock(int maxDistance, com.destroystokyo.paper.block.TargetBlockInfo.FluidMode fluidMode) {
+    public Block getTargetBlock(int maxDistance, com.destroystokyo.paper.block.TargetBlockInfo.@NotNull FluidMode fluidMode) {
         return this.getTargetBlockExact(maxDistance, fluidMode.bukkit);
     }
 
     @Override
-    public org.bukkit.block.BlockFace getTargetBlockFace(int maxDistance, com.destroystokyo.paper.block.TargetBlockInfo.FluidMode fluidMode) {
+    public org.bukkit.block.BlockFace getTargetBlockFace(int maxDistance, com.destroystokyo.paper.block.TargetBlockInfo.@NotNull FluidMode fluidMode) {
         return this.getTargetBlockFace(maxDistance, fluidMode.bukkit);
     }
 
@@ -222,7 +225,7 @@ public class CraftLivingEntity extends CraftEntity implements LivingEntity {
     }
 
     @Override
-    public com.destroystokyo.paper.block.TargetBlockInfo getTargetBlockInfo(int maxDistance, com.destroystokyo.paper.block.TargetBlockInfo.FluidMode fluidMode) {
+    public com.destroystokyo.paper.block.TargetBlockInfo getTargetBlockInfo(int maxDistance, com.destroystokyo.paper.block.TargetBlockInfo.@NotNull FluidMode fluidMode) {
         RayTraceResult result = this.rayTraceBlocks(maxDistance, fluidMode.bukkit);
         if (result != null && result.getHitBlock() != null && result.getHitBlockFace() != null) {
             return new com.destroystokyo.paper.block.TargetBlockInfo(result.getHitBlock(), result.getHitBlockFace());
@@ -246,7 +249,7 @@ public class CraftLivingEntity extends CraftEntity implements LivingEntity {
         return rayTrace == null ? null : new org.bukkit.util.RayTraceResult(org.bukkit.craftbukkit.util.CraftVector.toBukkit(rayTrace.getLocation()), rayTrace.getEntity().getBukkitEntity());
     }
 
-    public net.minecraft.world.phys.EntityHitResult rayTraceEntity(int maxDistance, boolean ignoreBlocks) {
+    public net.minecraft.world.phys.@Nullable EntityHitResult rayTraceEntity(int maxDistance, boolean ignoreBlocks) {
         net.minecraft.world.phys.EntityHitResult rayTrace = getHandle().getTargetEntity(maxDistance);
         if (rayTrace == null) {
             return null;
@@ -265,7 +268,7 @@ public class CraftLivingEntity extends CraftEntity implements LivingEntity {
     // Paper end
 
     @Override
-    public List<Block> getLastTwoTargetBlocks(Set<Material> transparent, int maxDistance) {
+    public @NotNull List<Block> getLastTwoTargetBlocks(Set<Material> transparent, int maxDistance) {
         return this.getLineOfSight(transparent, maxDistance, 2);
     }
 
@@ -275,7 +278,7 @@ public class CraftLivingEntity extends CraftEntity implements LivingEntity {
     }
 
     @Override
-    public Block getTargetBlockExact(int maxDistance, FluidCollisionMode fluidCollisionMode) {
+    public Block getTargetBlockExact(int maxDistance, @NotNull FluidCollisionMode fluidCollisionMode) {
         RayTraceResult hitResult = this.rayTraceBlocks(maxDistance, fluidCollisionMode);
         return (hitResult != null ? hitResult.getHitBlock() : null);
     }
@@ -286,7 +289,7 @@ public class CraftLivingEntity extends CraftEntity implements LivingEntity {
     }
 
     @Override
-    public RayTraceResult rayTraceBlocks(double maxDistance, FluidCollisionMode fluidCollisionMode) {
+    public RayTraceResult rayTraceBlocks(double maxDistance, @NotNull FluidCollisionMode fluidCollisionMode) {
         Preconditions.checkState(!this.getHandle().generation, "Cannot ray tray blocks during world generation");
 
         Location eyeLocation = this.getEyeLocation();
@@ -377,7 +380,7 @@ public class CraftLivingEntity extends CraftEntity implements LivingEntity {
     }
 
     @Override
-    public Location getEyeLocation() {
+    public @NotNull Location getEyeLocation() {
         Location loc = getLocation();
         loc.setY(loc.getY() + this.getEyeHeight());
         return loc;
@@ -434,7 +437,7 @@ public class CraftLivingEntity extends CraftEntity implements LivingEntity {
 
     // Paper start
     @Override
-    public void setKiller(Player killer) {
+    public void setKiller(@Nullable Player killer) {
         net.minecraft.server.level.ServerPlayer entityPlayer = killer == null ? null : ((CraftPlayer) killer).getHandle();
         getHandle().lastHurtByPlayer = entityPlayer;
         getHandle().lastHurtByMob = entityPlayer;
@@ -443,18 +446,18 @@ public class CraftLivingEntity extends CraftEntity implements LivingEntity {
     // Paper end
 
     @Override
-    public boolean addPotionEffect(PotionEffect effect) {
+    public boolean addPotionEffect(@NotNull PotionEffect effect) {
         return this.addPotionEffect(effect, false);
     }
 
     @Override
-    public boolean addPotionEffect(PotionEffect effect, boolean force) {
+    public boolean addPotionEffect(@NotNull PotionEffect effect, boolean force) {
         this.getHandle().addEffect(new MobEffectInstance(MobEffect.byId(effect.getType().getId()), effect.getDuration(), effect.getAmplifier(), effect.isAmbient(), effect.hasParticles(), effect.hasIcon()), EntityPotionEffectEvent.Cause.PLUGIN); // Paper - Don't ignore icon
         return true;
     }
 
     @Override
-    public boolean addPotionEffects(Collection<PotionEffect> effects) {
+    public boolean addPotionEffects(@NotNull Collection<PotionEffect> effects) {
         boolean success = true;
         for (PotionEffect effect : effects) {
             success &= this.addPotionEffect(effect);
@@ -463,23 +466,23 @@ public class CraftLivingEntity extends CraftEntity implements LivingEntity {
     }
 
     @Override
-    public boolean hasPotionEffect(PotionEffectType type) {
+    public boolean hasPotionEffect(@NotNull PotionEffectType type) {
         return this.getHandle().hasEffect(MobEffect.byId(type.getId()));
     }
 
     @Override
-    public PotionEffect getPotionEffect(PotionEffectType type) {
+    public PotionEffect getPotionEffect(@NotNull PotionEffectType type) {
         MobEffectInstance handle = this.getHandle().getEffect(MobEffect.byId(type.getId()));
         return (handle == null) ? null : new PotionEffect(PotionEffectType.getById(MobEffect.getId(handle.getEffect())), handle.getDuration(), handle.getAmplifier(), handle.isAmbient(), handle.isVisible());
     }
 
     @Override
-    public void removePotionEffect(PotionEffectType type) {
+    public void removePotionEffect(@NotNull PotionEffectType type) {
         this.getHandle().removeEffect(MobEffect.byId(type.getId()), EntityPotionEffectEvent.Cause.PLUGIN);
     }
 
     @Override
-    public Collection<PotionEffect> getActivePotionEffects() {
+    public @NotNull Collection<PotionEffect> getActivePotionEffects() {
         List<PotionEffect> effects = new ArrayList<PotionEffect>();
         for (MobEffectInstance handle : this.getHandle().activeEffects.values()) {
             effects.add(new PotionEffect(PotionEffectType.getById(MobEffect.getId(handle.getEffect())), handle.getDuration(), handle.getAmplifier(), handle.isAmbient(), handle.isVisible()));
@@ -488,19 +491,19 @@ public class CraftLivingEntity extends CraftEntity implements LivingEntity {
     }
 
     @Override
-    public <T extends Projectile> T launchProjectile(Class<? extends T> projectile) {
+    public <T extends Projectile> @NotNull T launchProjectile(@NotNull Class<? extends T> projectile) {
         return this.launchProjectile(projectile, null);
     }
 
     @Override
-    public <T extends Projectile> T launchProjectile(Class<? extends T> projectile, Vector velocity) {
+    public <T extends Projectile> @NotNull T launchProjectile(@NotNull Class<? extends T> projectile, Vector velocity) {
         // Paper start - launchProjectile consumer
         return this.launchProjectile(projectile, velocity, null);
     }
 
     @Override
     @SuppressWarnings("unchecked")
-    public <T extends Projectile> T launchProjectile(Class<? extends T> projectile, Vector velocity, org.bukkit.util.Consumer<T> function) {
+    public <T extends Projectile> @NotNull T launchProjectile(@NotNull Class<? extends T> projectile, @Nullable Vector velocity, org.bukkit.util.@Nullable Consumer<T> function) {
         // Paper end - launchProjectile consumer
         Preconditions.checkState(!this.getHandle().generation, "Cannot launch projectile during world generation");
 
@@ -595,12 +598,12 @@ public class CraftLivingEntity extends CraftEntity implements LivingEntity {
     }
 
     @Override
-    public EntityType getType() {
+    public @NotNull EntityType getType() {
         return EntityType.UNKNOWN;
     }
 
     @Override
-    public boolean hasLineOfSight(Entity other) {
+    public boolean hasLineOfSight(@NotNull Entity other) {
         Preconditions.checkState(!this.getHandle().generation, "Cannot check line of sight during world generation");
 
         return this.getHandle().hasLineOfSight(((CraftEntity) other).getHandle());
@@ -608,7 +611,7 @@ public class CraftLivingEntity extends CraftEntity implements LivingEntity {
 
     // Paper start
     @Override
-    public boolean hasLineOfSight(Location loc) {
+    public boolean hasLineOfSight(@NotNull Location loc) {
         if (this.getHandle().level != ((CraftWorld) loc.getWorld()).getHandle()) return false;
         Vec3 vec3d = new Vec3(this.getHandle().getX(), this.getHandle().getEyeY(), this.getHandle().getZ());
         Vec3 vec3d1 = new Vec3(loc.getX(), loc.getY(), loc.getZ());
@@ -631,7 +634,7 @@ public class CraftLivingEntity extends CraftEntity implements LivingEntity {
     }
 
     @Override
-    public EntityEquipment getEquipment() {
+    public @Nullable EntityEquipment getEquipment() {
         return this.equipment;
     }
 
@@ -654,7 +657,7 @@ public class CraftLivingEntity extends CraftEntity implements LivingEntity {
     }
 
     @Override
-    public boolean teleport(Location location, PlayerTeleportEvent.TeleportCause cause) {
+    public boolean teleport(@NotNull Location location, PlayerTeleportEvent.@NotNull TeleportCause cause) {
         if (this.getHealth() == 0) {
             return false;
         }
@@ -671,7 +674,7 @@ public class CraftLivingEntity extends CraftEntity implements LivingEntity {
     }
 
     @Override
-    public Entity getLeashHolder() throws IllegalStateException {
+    public @NotNull Entity getLeashHolder() throws IllegalStateException {
         if (!this.isLeashed()) {
             throw new IllegalStateException("Entity not leashed");
         }
@@ -687,7 +690,7 @@ public class CraftLivingEntity extends CraftEntity implements LivingEntity {
     }
 
     @Override
-    public boolean setLeashHolder(Entity holder) {
+    public boolean setLeashHolder(@Nullable Entity holder) {
         if (this.getHandle().generation || (this.getHandle() instanceof WitherBoss) || !(this.getHandle() instanceof Mob)) {
             return false;
         }
@@ -767,7 +770,7 @@ public class CraftLivingEntity extends CraftEntity implements LivingEntity {
     }
 
     @Override
-    public void attack(Entity target) {
+    public void attack(@Nullable Entity target) {
         Preconditions.checkArgument(target != null, "target == null");
         Preconditions.checkState(!this.getHandle().generation, "Cannot attack during world generation");
 
@@ -803,17 +806,17 @@ public class CraftLivingEntity extends CraftEntity implements LivingEntity {
     }
 
     @Override
-    public Set<UUID> getCollidableExemptions() {
+    public @NotNull Set<UUID> getCollidableExemptions() {
         return this.getHandle().collidableExemptions;
     }
 
     @Override
-    public <T> T getMemory(MemoryKey<T> memoryKey) {
+    public <T> T getMemory(@NotNull MemoryKey<T> memoryKey) {
         return (T) this.getHandle().getBrain().getMemory(CraftMemoryKey.fromMemoryKey(memoryKey)).map(CraftMemoryMapper::fromNms).orElse(null);
     }
 
     @Override
-    public <T> void setMemory(MemoryKey<T> memoryKey, T t) {
+    public <T> void setMemory(@NotNull MemoryKey<T> memoryKey, T t) {
         this.getHandle().getBrain().setMemory(CraftMemoryKey.fromMemoryKey(memoryKey), CraftMemoryMapper.toNms(t));
     }
 
@@ -830,28 +833,28 @@ public class CraftLivingEntity extends CraftEntity implements LivingEntity {
     }
 
     @Override
-    public Sound getFallDamageSound(int fallHeight) {
+    public @NotNull Sound getFallDamageSound(int fallHeight) {
         return CraftSound.getBukkit(this.getHandle().getFallDamageSound0(fallHeight));
     }
 
     @Override
-    public Sound getFallDamageSoundSmall() {
+    public @NotNull Sound getFallDamageSoundSmall() {
         return CraftSound.getBukkit(this.getHandle().getFallSounds().small());
     }
 
     @Override
-    public Sound getFallDamageSoundBig() {
+    public @NotNull Sound getFallDamageSoundBig() {
         return CraftSound.getBukkit(this.getHandle().getFallSounds().big());
     }
 
     @Override
-    public Sound getDrinkingSound(ItemStack itemStack) {
+    public @NotNull Sound getDrinkingSound(@Nullable ItemStack itemStack) {
         Preconditions.checkArgument(itemStack != null, "itemStack must not be null");
         return CraftSound.getBukkit(this.getHandle().getDrinkingSound0(CraftItemStack.asNMSCopy(itemStack)));
     }
 
     @Override
-    public Sound getEatingSound(ItemStack itemStack) {
+    public @NotNull Sound getEatingSound(@Nullable ItemStack itemStack) {
         Preconditions.checkArgument(itemStack != null, "itemStack must not be null");
         return CraftSound.getBukkit(this.getHandle().getEatingSound0(CraftItemStack.asNMSCopy(itemStack)));
     }
@@ -862,7 +865,7 @@ public class CraftLivingEntity extends CraftEntity implements LivingEntity {
     }
 
     @Override
-    public EntityCategory getCategory() {
+    public @NotNull EntityCategory getCategory() {
         MobType type = this.getHandle().getMobType(); // Not actually an enum?
 
         if (type == MobType.UNDEFINED) {
@@ -913,7 +916,7 @@ public class CraftLivingEntity extends CraftEntity implements LivingEntity {
     }
 
     @Override
-    public ItemStack getActiveItem() {
+    public @NotNull ItemStack getActiveItem() {
         return getHandle().getUseItem().asBukkitMirror();
     }
 
@@ -940,7 +943,7 @@ public class CraftLivingEntity extends CraftEntity implements LivingEntity {
     }
 
     @Override
-    public org.bukkit.inventory.EquipmentSlot getHandRaised() {
+    public org.bukkit.inventory.@NotNull EquipmentSlot getHandRaised() {
         return getHandle().getUsedItemHand() == net.minecraft.world.InteractionHand.MAIN_HAND ? org.bukkit.inventory.EquipmentSlot.HAND : org.bukkit.inventory.EquipmentSlot.OFF_HAND;
     }
 
@@ -959,7 +962,7 @@ public class CraftLivingEntity extends CraftEntity implements LivingEntity {
     }
 
     @Override
-    public void playPickupItemAnimation(org.bukkit.entity.Item item, int quantity) {
+    public void playPickupItemAnimation(org.bukkit.entity.@NotNull Item item, int quantity) {
         getHandle().take(((CraftItem) item).getHandle(), quantity);
     }
 
@@ -973,7 +976,7 @@ public class CraftLivingEntity extends CraftEntity implements LivingEntity {
         getHandle().hurtDir = hurtDirection;
     }
 
-    public static MobType fromBukkitEntityCategory(EntityCategory entityCategory) {
+    public static @NotNull MobType fromBukkitEntityCategory(@NotNull EntityCategory entityCategory) {
         switch (entityCategory) {
             case NONE:
                 return MobType.UNDEFINED;
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftLlama.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftLlama.java
index 4d7a2c4c1001aefe9fcd4be8dbcb414f721bfff9..c5b01aa1cb39770335143621b531cdd03b49b80b 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftLlama.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftLlama.java
@@ -8,6 +8,8 @@ import org.bukkit.entity.Horse;
 import org.bukkit.entity.Llama;
 import org.bukkit.entity.Llama.Color;
 import org.bukkit.inventory.LlamaInventory;
+import org.jetbrains.annotations.NotNull;
+
 
 public class CraftLlama extends CraftChestedHorse implements Llama, com.destroystokyo.paper.entity.CraftRangedEntity<net.minecraft.world.entity.animal.horse.Llama> { // Paper
 
@@ -21,19 +23,19 @@ public class CraftLlama extends CraftChestedHorse implements Llama, com.destroys
     }
 
     @Override
-    public Color getColor() {
+    public @NotNull Color getColor() {
         return Color.values()[this.getHandle().getVariant().ordinal()];
     }
 
     @Override
-    public void setColor(Color color) {
+    public void setColor(@NotNull Color color) {
         Preconditions.checkArgument(color != null, "color");
 
         this.getHandle().setVariant(net.minecraft.world.entity.animal.horse.Llama.Variant.byId(color.ordinal()));
     }
 
     @Override
-    public LlamaInventory getInventory() {
+    public @NotNull LlamaInventory getInventory() {
         return new CraftInventoryLlama(this.getHandle().inventory);
     }
 
@@ -51,7 +53,7 @@ public class CraftLlama extends CraftChestedHorse implements Llama, com.destroys
     }
 
     @Override
-    public Horse.Variant getVariant() {
+    public Horse.@NotNull Variant getVariant() {
         return Horse.Variant.LLAMA;
     }
 
@@ -61,7 +63,7 @@ public class CraftLlama extends CraftChestedHorse implements Llama, com.destroys
     }
 
     @Override
-    public EntityType getType() {
+    public @NotNull EntityType getType() {
         return EntityType.LLAMA;
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftLlamaSpit.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftLlamaSpit.java
index dd4c67f42217b5e746c4b0cf5c44116cacb321f6..8e92898c158f6ee157c842303dda7c53283042c1 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftLlamaSpit.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftLlamaSpit.java
@@ -4,6 +4,9 @@ import org.bukkit.craftbukkit.CraftServer;
 import org.bukkit.entity.EntityType;
 import org.bukkit.entity.LlamaSpit;
 import org.bukkit.projectiles.ProjectileSource;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 public class CraftLlamaSpit extends AbstractProjectile implements LlamaSpit {
 
@@ -17,12 +20,12 @@ public class CraftLlamaSpit extends AbstractProjectile implements LlamaSpit {
     }
 
     @Override
-    public String toString() {
+    public @NotNull String toString() {
         return "CraftLlamaSpit";
     }
 
     @Override
-    public EntityType getType() {
+    public @NotNull EntityType getType() {
         return EntityType.LLAMA_SPIT;
     }
 
@@ -32,7 +35,7 @@ public class CraftLlamaSpit extends AbstractProjectile implements LlamaSpit {
     }
 
     @Override
-    public void setShooter(ProjectileSource source) {
+    public void setShooter(@Nullable ProjectileSource source) {
         this.getHandle().setOwner((source != null) ? ((CraftLivingEntity) source).getHandle() : null);
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftMagmaCube.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftMagmaCube.java
index b016d2c621707fe2562c560ef9e005866c087a41..4e2d9319c4d29734e25bbb5a643b7efcb76d7332 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftMagmaCube.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftMagmaCube.java
@@ -3,6 +3,8 @@ package org.bukkit.craftbukkit.entity;
 import org.bukkit.craftbukkit.CraftServer;
 import org.bukkit.entity.EntityType;
 import org.bukkit.entity.MagmaCube;
+import org.jetbrains.annotations.NotNull;
+
 
 public class CraftMagmaCube extends CraftSlime implements MagmaCube {
 
@@ -16,12 +18,12 @@ public class CraftMagmaCube extends CraftSlime implements MagmaCube {
     }
 
     @Override
-    public String toString() {
+    public @NotNull String toString() {
         return "CraftMagmaCube";
     }
 
     @Override
-    public EntityType getType() {
+    public @NotNull EntityType getType() {
         return EntityType.MAGMA_CUBE;
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftMarker.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftMarker.java
index 1e794ec9fc4f75c740c4dc263058a130f57e4475..56ed6bc5662fe913e6deacf56ed943d0199d4df9 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftMarker.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftMarker.java
@@ -3,6 +3,8 @@ package org.bukkit.craftbukkit.entity;
 import org.bukkit.craftbukkit.CraftServer;
 import org.bukkit.entity.EntityType;
 import org.bukkit.entity.Marker;
+import org.jetbrains.annotations.NotNull;
+
 
 public class CraftMarker extends CraftEntity implements Marker {
 
@@ -16,12 +18,12 @@ public class CraftMarker extends CraftEntity implements Marker {
     }
 
     @Override
-    public EntityType getType() {
+    public @NotNull EntityType getType() {
         return EntityType.MARKER;
     }
 
     @Override
-    public String toString() {
+    public @NotNull String toString() {
         return "CraftMarker";
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftMinecart.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftMinecart.java
index 067fcc1f44d59dd675a9cc5485234c87366ffe10..b91c5f2604ad300e37f12c0633d63e6c8235c947 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftMinecart.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftMinecart.java
@@ -12,6 +12,9 @@ import org.bukkit.craftbukkit.util.CraftMagicNumbers;
 import org.bukkit.entity.Minecart;
 import org.bukkit.material.MaterialData;
 import org.bukkit.util.Vector;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 public abstract class CraftMinecart extends CraftVehicle implements Minecart {
     public CraftMinecart(CraftServer server, AbstractMinecart entity) {
@@ -51,28 +54,28 @@ public abstract class CraftMinecart extends CraftVehicle implements Minecart {
     }
 
     @Override
-    public Vector getFlyingVelocityMod() {
+    public @NotNull Vector getFlyingVelocityMod() {
         return this.getHandle().getFlyingVelocityMod();
     }
 
     @Override
-    public void setFlyingVelocityMod(Vector flying) {
+    public void setFlyingVelocityMod(@NotNull Vector flying) {
         this.getHandle().setFlyingVelocityMod(flying);
     }
 
     @Override
-    public Vector getDerailedVelocityMod() {
+    public @NotNull Vector getDerailedVelocityMod() {
         return this.getHandle().getDerailedVelocityMod();
     }
 
     @Override
-    public void setDerailedVelocityMod(Vector derailed) {
+    public void setDerailedVelocityMod(@NotNull Vector derailed) {
         this.getHandle().setDerailedVelocityMod(derailed);
     }
 
     // Paper start
     @Override
-    public Material getMinecartMaterial() {
+    public @NotNull Material getMinecartMaterial() {
          net.minecraft.world.item.Item minecartItem = switch (getHandle().getMinecartType()) {
             case CHEST -> Items.CHEST_MINECART;
             case FURNACE ->  Items.FURNACE_MINECART;
@@ -92,7 +95,7 @@ public abstract class CraftMinecart extends CraftVehicle implements Minecart {
     }
 
     @Override
-    public void setDisplayBlock(MaterialData material) {
+    public void setDisplayBlock(@Nullable MaterialData material) {
         if (material != null) {
             BlockState block = CraftMagicNumbers.getBlock(material);
             this.getHandle().setDisplayBlockState(block);
@@ -104,7 +107,7 @@ public abstract class CraftMinecart extends CraftVehicle implements Minecart {
     }
 
     @Override
-    public void setDisplayBlockData(BlockData blockData) {
+    public void setDisplayBlockData(@Nullable BlockData blockData) {
         if (blockData != null) {
             BlockState block = ((CraftBlockData) blockData).getState();
             this.getHandle().setDisplayBlockState(block);
@@ -116,13 +119,13 @@ public abstract class CraftMinecart extends CraftVehicle implements Minecart {
     }
 
     @Override
-    public MaterialData getDisplayBlock() {
+    public @NotNull MaterialData getDisplayBlock() {
         BlockState blockData = this.getHandle().getDisplayBlockState();
         return CraftMagicNumbers.getMaterial(blockData);
     }
 
     @Override
-    public BlockData getDisplayBlockData() {
+    public @NotNull BlockData getDisplayBlockData() {
         BlockState blockData = this.getHandle().getDisplayBlockState();
         return CraftBlockData.fromData(blockData);
     }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftMinecartChest.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftMinecartChest.java
index abf58bef2042a9efba5a78fd7f97339deceaa780..b94e7606cef17a04a531dd2a98ab0ea4fd2e81b6 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftMinecartChest.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftMinecartChest.java
@@ -6,10 +6,12 @@ import org.bukkit.craftbukkit.inventory.CraftInventory;
 import org.bukkit.entity.EntityType;
 import org.bukkit.entity.minecart.StorageMinecart;
 import org.bukkit.inventory.Inventory;
+import org.jetbrains.annotations.NotNull;
+
 
 @SuppressWarnings("deprecation")
 public class CraftMinecartChest extends CraftMinecartContainer implements StorageMinecart, com.destroystokyo.paper.loottable.PaperLootableEntityInventory { // Paper
-    private final CraftInventory inventory;
+    private final @NotNull CraftInventory inventory;
 
     public CraftMinecartChest(CraftServer server, MinecartChest entity) {
         super(server, entity);
@@ -17,17 +19,17 @@ public class CraftMinecartChest extends CraftMinecartContainer implements Storag
     }
 
     @Override
-    public Inventory getInventory() {
+    public @NotNull Inventory getInventory() {
         return this.inventory;
     }
 
     @Override
-    public String toString() {
+    public @NotNull String toString() {
         return "CraftMinecartChest{" + "inventory=" + this.inventory + '}';
     }
 
     @Override
-    public EntityType getType() {
+    public @NotNull EntityType getType() {
         return EntityType.MINECART_CHEST;
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftMinecartCommand.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftMinecartCommand.java
index b709a1d909c189f60d0c3aa97b4b96623e7c1db0..98c00ddfd9054a88b2d19dc63dbbafce3e2cb3cf 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftMinecartCommand.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftMinecartCommand.java
@@ -13,6 +13,9 @@ import org.bukkit.permissions.Permission;
 import org.bukkit.permissions.PermissionAttachment;
 import org.bukkit.permissions.PermissionAttachmentInfo;
 import org.bukkit.plugin.Plugin;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 public class CraftMinecartCommand extends CraftMinecart implements CommandMinecart, io.papermc.paper.commands.PaperCommandBlockHolder {
     private final PermissibleBase perm = new PermissibleBase(this);
@@ -27,12 +30,12 @@ public class CraftMinecartCommand extends CraftMinecart implements CommandMineca
     }
 
     @Override
-    public String getCommand() {
+    public @NotNull String getCommand() {
         return this.getHandle().getCommandBlock().getCommand();
     }
 
     @Override
-    public void setCommand(String command) {
+    public void setCommand(@Nullable String command) {
         this.getHandle().getCommandBlock().setCommand(command != null ? command : "");
         this.getHandle().getEntityData().set(MinecartCommandBlock.DATA_ID_COMMAND_NAME, this.getHandle().getCommandBlock().getCommand());
     }
@@ -43,12 +46,12 @@ public class CraftMinecartCommand extends CraftMinecart implements CommandMineca
     }
 
     @Override
-    public String toString() {
+    public @NotNull String toString() {
         return "CraftMinecartCommand";
     }
 
     @Override
-    public EntityType getType() {
+    public @NotNull EntityType getType() {
         return EntityType.MINECART_COMMAND;
     }
 
@@ -61,7 +64,7 @@ public class CraftMinecartCommand extends CraftMinecart implements CommandMineca
     }
 
     @Override
-    public String getName() {
+    public @NotNull String getName() {
         return CraftChatMessage.fromComponent(this.getHandle().getCommandBlock().getName());
     }
 
@@ -72,7 +75,7 @@ public class CraftMinecartCommand extends CraftMinecart implements CommandMineca
     }
 
     @Override
-    public net.minecraft.world.level.BaseCommandBlock getCommandBlockHandle() {
+    public net.minecraft.world.level.@NotNull BaseCommandBlock getCommandBlockHandle() {
         return getHandle().getCommandBlock();
     }
 
@@ -94,47 +97,47 @@ public class CraftMinecartCommand extends CraftMinecart implements CommandMineca
     }
 
     @Override
-    public boolean isPermissionSet(String name) {
+    public boolean isPermissionSet(@NotNull String name) {
         return this.perm.isPermissionSet(name);
     }
 
     @Override
-    public boolean isPermissionSet(Permission perm) {
+    public boolean isPermissionSet(@NotNull Permission perm) {
         return this.perm.isPermissionSet(perm);
     }
 
     @Override
-    public boolean hasPermission(String name) {
+    public boolean hasPermission(@NotNull String name) {
         return this.perm.hasPermission(name);
     }
 
     @Override
-    public boolean hasPermission(Permission perm) {
+    public boolean hasPermission(@NotNull Permission perm) {
         return this.perm.hasPermission(perm);
     }
 
     @Override
-    public PermissionAttachment addAttachment(Plugin plugin, String name, boolean value) {
+    public @NotNull PermissionAttachment addAttachment(@NotNull Plugin plugin, @NotNull String name, boolean value) {
         return this.perm.addAttachment(plugin, name, value);
     }
 
     @Override
-    public PermissionAttachment addAttachment(Plugin plugin) {
+    public @NotNull PermissionAttachment addAttachment(@NotNull Plugin plugin) {
         return this.perm.addAttachment(plugin);
     }
 
     @Override
-    public PermissionAttachment addAttachment(Plugin plugin, String name, boolean value, int ticks) {
+    public PermissionAttachment addAttachment(@NotNull Plugin plugin, @NotNull String name, boolean value, int ticks) {
         return this.perm.addAttachment(plugin, name, value, ticks);
     }
 
     @Override
-    public PermissionAttachment addAttachment(Plugin plugin, int ticks) {
+    public PermissionAttachment addAttachment(@NotNull Plugin plugin, int ticks) {
         return this.perm.addAttachment(plugin, ticks);
     }
 
     @Override
-    public void removeAttachment(PermissionAttachment attachment) {
+    public void removeAttachment(@NotNull PermissionAttachment attachment) {
         this.perm.removeAttachment(attachment);
     }
 
@@ -144,12 +147,12 @@ public class CraftMinecartCommand extends CraftMinecart implements CommandMineca
     }
 
     @Override
-    public Set<PermissionAttachmentInfo> getEffectivePermissions() {
+    public @NotNull Set<PermissionAttachmentInfo> getEffectivePermissions() {
         return this.perm.getEffectivePermissions();
     }
 
     @Override
-    public Server getServer() {
+    public @NotNull Server getServer() {
         return Bukkit.getServer();
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftMinecartContainer.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftMinecartContainer.java
index 0dd0ce9a9b3253e87eda12354249ec2fd2a33cf2..44a6a214713f330a15704b5af466d35ff0819470 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftMinecartContainer.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftMinecartContainer.java
@@ -9,6 +9,8 @@ import org.bukkit.craftbukkit.CraftServer;
 import org.bukkit.craftbukkit.util.CraftNamespacedKey;
 import org.bukkit.loot.LootTable;
 import org.bukkit.loot.Lootable;
+import org.jetbrains.annotations.Nullable;
+
 
 public abstract class CraftMinecartContainer extends CraftMinecart implements Lootable {
 
@@ -47,7 +49,7 @@ public abstract class CraftMinecartContainer extends CraftMinecart implements Lo
         return this.getHandle().lootTableSeed;
     }
 
-    public void setLootTable(LootTable table, long seed) {
+    public void setLootTable(@Nullable LootTable table, long seed) {
         ResourceLocation newKey = (table == null) ? null : CraftNamespacedKey.toMinecraft(table.getKey());
         this.getHandle().setLootTable(newKey, seed);
     }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftMinecartFurnace.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftMinecartFurnace.java
index b8378d5f3c2a08ab565dcb8cb200822b581c7dba..76e3a65b24a15e5121e84ac97fcc07e8067140d6 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftMinecartFurnace.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftMinecartFurnace.java
@@ -5,6 +5,8 @@ import net.minecraft.world.entity.vehicle.MinecartFurnace;
 import org.bukkit.craftbukkit.CraftServer;
 import org.bukkit.entity.EntityType;
 import org.bukkit.entity.minecart.PoweredMinecart;
+import org.jetbrains.annotations.NotNull;
+
 
 @SuppressWarnings("deprecation")
 public class CraftMinecartFurnace extends CraftMinecart implements PoweredMinecart {
@@ -51,12 +53,12 @@ public class CraftMinecartFurnace extends CraftMinecart implements PoweredMineca
     // Paper end
 
     @Override
-    public String toString() {
+    public @NotNull String toString() {
         return "CraftMinecartFurnace";
     }
 
     @Override
-    public EntityType getType() {
+    public @NotNull EntityType getType() {
         return EntityType.MINECART_FURNACE;
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftMinecartHopper.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftMinecartHopper.java
index 569763b3c9e92a4071884f139fb1263201f80e43..d05e3e09d59fe88cb0b7b8d1af1de2e41722cdaa 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftMinecartHopper.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftMinecartHopper.java
@@ -6,9 +6,11 @@ import org.bukkit.craftbukkit.inventory.CraftInventory;
 import org.bukkit.entity.EntityType;
 import org.bukkit.entity.minecart.HopperMinecart;
 import org.bukkit.inventory.Inventory;
+import org.jetbrains.annotations.NotNull;
+
 
 public final class CraftMinecartHopper extends CraftMinecartContainer implements HopperMinecart, com.destroystokyo.paper.loottable.PaperLootableEntityInventory { // Paper
-    private final CraftInventory inventory;
+    private final @NotNull CraftInventory inventory;
 
     public CraftMinecartHopper(CraftServer server, MinecartHopper entity) {
         super(server, entity);
@@ -16,17 +18,17 @@ public final class CraftMinecartHopper extends CraftMinecartContainer implements
     }
 
     @Override
-    public String toString() {
+    public @NotNull String toString() {
         return "CraftMinecartHopper{" + "inventory=" + this.inventory + '}';
     }
 
     @Override
-    public EntityType getType() {
+    public @NotNull EntityType getType() {
         return EntityType.MINECART_HOPPER;
     }
 
     @Override
-    public Inventory getInventory() {
+    public @NotNull Inventory getInventory() {
         return this.inventory;
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftMinecartMobSpawner.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftMinecartMobSpawner.java
index cc55a78d899c2b1e740e6364eb4c1d08b7bdf737..7ae47e66b469141bdee124f71498c0e471a65b1d 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftMinecartMobSpawner.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftMinecartMobSpawner.java
@@ -4,6 +4,8 @@ import net.minecraft.world.entity.vehicle.MinecartSpawner;
 import org.bukkit.craftbukkit.CraftServer;
 import org.bukkit.entity.EntityType;
 import org.bukkit.entity.minecart.SpawnerMinecart;
+import org.jetbrains.annotations.NotNull;
+
 
 final class CraftMinecartMobSpawner extends CraftMinecart implements SpawnerMinecart {
     CraftMinecartMobSpawner(CraftServer server, MinecartSpawner entity) {
@@ -11,12 +13,12 @@ final class CraftMinecartMobSpawner extends CraftMinecart implements SpawnerMine
     }
 
     @Override
-    public String toString() {
+    public @NotNull String toString() {
         return "CraftMinecartMobSpawner";
     }
 
     @Override
-    public EntityType getType() {
+    public @NotNull EntityType getType() {
         return EntityType.MINECART_MOB_SPAWNER;
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftMinecartRideable.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftMinecartRideable.java
index 392bd88224c4d7b2e549944e4129012cca823187..9eb0c6cb85d3c41e7795aaa26b98881077de1947 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftMinecartRideable.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftMinecartRideable.java
@@ -4,6 +4,8 @@ import net.minecraft.world.entity.vehicle.AbstractMinecart;
 import org.bukkit.craftbukkit.CraftServer;
 import org.bukkit.entity.EntityType;
 import org.bukkit.entity.minecart.RideableMinecart;
+import org.jetbrains.annotations.NotNull;
+
 
 public class CraftMinecartRideable extends CraftMinecart implements RideableMinecart {
     public CraftMinecartRideable(CraftServer server, AbstractMinecart entity) {
@@ -11,12 +13,12 @@ public class CraftMinecartRideable extends CraftMinecart implements RideableMine
     }
 
     @Override
-    public String toString() {
+    public @NotNull String toString() {
         return "CraftMinecartRideable";
     }
 
     @Override
-    public EntityType getType() {
+    public @NotNull EntityType getType() {
         return EntityType.MINECART;
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftMinecartTNT.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftMinecartTNT.java
index dfd0b5e018194343ca40629db6f70c6020c2d567..f82a5dc50ddc3055350f63b96cd4451643941e9c 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftMinecartTNT.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftMinecartTNT.java
@@ -4,6 +4,8 @@ import net.minecraft.world.entity.vehicle.MinecartTNT;
 import org.bukkit.craftbukkit.CraftServer;
 import org.bukkit.entity.EntityType;
 import org.bukkit.entity.minecart.ExplosiveMinecart;
+import org.jetbrains.annotations.NotNull;
+
 
 public final class CraftMinecartTNT extends CraftMinecart implements ExplosiveMinecart { // Paper - getHandle -> make public
     CraftMinecartTNT(CraftServer server, MinecartTNT entity) {
@@ -11,12 +13,12 @@ public final class CraftMinecartTNT extends CraftMinecart implements ExplosiveMi
     }
 
     @Override
-    public String toString() {
+    public @NotNull String toString() {
         return "CraftMinecartTNT";
     }
 
     @Override
-    public EntityType getType() {
+    public @NotNull EntityType getType() {
         return EntityType.MINECART_TNT;
     }
     // Paper start
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftMob.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftMob.java
index 620d918e302a00d5a6640648e3096988d15535a0..32b26b8ccbea69c8ab6d5454153f8eabf65a1937 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftMob.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftMob.java
@@ -11,6 +11,9 @@ import org.bukkit.craftbukkit.util.CraftNamespacedKey;
 import org.bukkit.entity.LivingEntity;
 import org.bukkit.entity.Mob;
 import org.bukkit.loot.LootTable;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 public abstract class CraftMob extends CraftLivingEntity implements Mob {
     public CraftMob(CraftServer server, net.minecraft.world.entity.Mob entity) {
@@ -18,10 +21,10 @@ public abstract class CraftMob extends CraftLivingEntity implements Mob {
          paperPathfinder = new com.destroystokyo.paper.entity.PaperPathfinder(entity); // Paper
     }
 
-    private final com.destroystokyo.paper.entity.PaperPathfinder paperPathfinder; // Paper
-    @Override public com.destroystokyo.paper.entity.Pathfinder getPathfinder() { return paperPathfinder; } // Paper
+    private final com.destroystokyo.paper.entity.@NotNull PaperPathfinder paperPathfinder; // Paper
+    @Override public com.destroystokyo.paper.entity.@NotNull Pathfinder getPathfinder() { return paperPathfinder; } // Paper
     @Override
-    public void setTarget(LivingEntity target) {
+    public void setTarget(@Nullable LivingEntity target) {
         Preconditions.checkState(!this.getHandle().generation, "Cannot set target during world generation");
 
         net.minecraft.world.entity.Mob entity = this.getHandle();
@@ -74,7 +77,7 @@ public abstract class CraftMob extends CraftLivingEntity implements Mob {
     }
 
     @Override
-    public void setLootTable(LootTable table) {
+    public void setLootTable(@Nullable LootTable table) {
         this.getHandle().lootTable = (table == null) ? null : CraftNamespacedKey.toMinecraft(table.getKey());
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftMule.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftMule.java
index 2fe098c198fdc05b2571b56d305382564d7e4cfe..c3001f0d31a60f36c75309d1483f3951aa03dcf3 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftMule.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftMule.java
@@ -4,6 +4,8 @@ import org.bukkit.craftbukkit.CraftServer;
 import org.bukkit.entity.EntityType;
 import org.bukkit.entity.Horse.Variant;
 import org.bukkit.entity.Mule;
+import org.jetbrains.annotations.NotNull;
+
 
 public class CraftMule extends CraftChestedHorse implements Mule {
 
@@ -12,17 +14,17 @@ public class CraftMule extends CraftChestedHorse implements Mule {
     }
 
     @Override
-    public String toString() {
+    public @NotNull String toString() {
         return "CraftMule";
     }
 
     @Override
-    public EntityType getType() {
+    public @NotNull EntityType getType() {
         return EntityType.MULE;
     }
 
     @Override
-    public Variant getVariant() {
+    public @NotNull Variant getVariant() {
         return Variant.MULE;
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftMushroomCow.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftMushroomCow.java
index 20eaa3424428b8b30fd15591b660983cb7fc4375..75b7dd108606ccd79ca8f7bb407cdf752c1f16d8 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftMushroomCow.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftMushroomCow.java
@@ -5,6 +5,9 @@ import org.bukkit.craftbukkit.CraftServer;
 import org.bukkit.entity.EntityType;
 import org.bukkit.entity.MushroomCow;
 import org.bukkit.entity.MushroomCow.Variant;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 public class CraftMushroomCow extends CraftCow implements MushroomCow {
     public CraftMushroomCow(CraftServer server, net.minecraft.world.entity.animal.MushroomCow entity) {
@@ -17,12 +20,12 @@ public class CraftMushroomCow extends CraftCow implements MushroomCow {
     }
 
     @Override
-    public Variant getVariant() {
+    public @NotNull Variant getVariant() {
         return Variant.values()[this.getHandle().getVariant().ordinal()];
     }
 
     @Override
-    public void setVariant(Variant variant) {
+    public void setVariant(@NotNull Variant variant) {
         Preconditions.checkArgument(variant != null, "variant");
 
         this.getHandle().setVariant(net.minecraft.world.entity.animal.MushroomCow.MushroomType.values()[variant.ordinal()]);
@@ -50,7 +53,7 @@ public class CraftMushroomCow extends CraftCow implements MushroomCow {
     }
 
     @Override
-    public void setStewEffect(org.bukkit.potion.PotionEffectType type) {
+    public void setStewEffect(org.bukkit.potion.@Nullable PotionEffectType type) {
         net.minecraft.world.effect.MobEffect effect = null;
         if (type != null) {
             effect = net.minecraft.world.effect.MobEffect.byId(type.getId());
@@ -61,12 +64,12 @@ public class CraftMushroomCow extends CraftCow implements MushroomCow {
     // Paper end
 
     @Override
-    public String toString() {
+    public @NotNull String toString() {
         return "CraftMushroomCow";
     }
 
     @Override
-    public EntityType getType() {
+    public @NotNull EntityType getType() {
         return EntityType.MUSHROOM_COW;
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftOcelot.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftOcelot.java
index 7609c0e00b9eebcf00e21f6eb19d4175f4717179..3aee2b965c5576d0ef5d402281e2703162531776 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftOcelot.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftOcelot.java
@@ -4,6 +4,8 @@ import org.bukkit.craftbukkit.CraftServer;
 import org.bukkit.entity.EntityType;
 import org.bukkit.entity.Ocelot;
 import org.bukkit.entity.Ocelot.Type;
+import org.jetbrains.annotations.NotNull;
+
 
 public class CraftOcelot extends CraftAnimals implements Ocelot {
     public CraftOcelot(CraftServer server, net.minecraft.world.entity.animal.Ocelot ocelot) {
@@ -26,7 +28,7 @@ public class CraftOcelot extends CraftAnimals implements Ocelot {
     }
 
     @Override
-    public Type getCatType() {
+    public @NotNull Type getCatType() {
         return Type.WILD_OCELOT;
     }
 
@@ -36,12 +38,12 @@ public class CraftOcelot extends CraftAnimals implements Ocelot {
     }
 
     @Override
-    public String toString() {
+    public @NotNull String toString() {
         return "CraftOcelot";
     }
 
     @Override
-    public EntityType getType() {
+    public @NotNull EntityType getType() {
         return EntityType.OCELOT;
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftPainting.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftPainting.java
index b7610e880e857058b621228583c841b5d9338fc7..bbcd5cf4dacc23fc158accc4798eddaf8f4e3a73 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftPainting.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftPainting.java
@@ -8,6 +8,8 @@ import org.bukkit.craftbukkit.CraftArt;
 import org.bukkit.craftbukkit.CraftServer;
 import org.bukkit.entity.EntityType;
 import org.bukkit.entity.Painting;
+import org.jetbrains.annotations.NotNull;
+
 
 public class CraftPainting extends CraftHanging implements Painting {
 
@@ -16,7 +18,7 @@ public class CraftPainting extends CraftHanging implements Painting {
     }
 
     @Override
-    public Art getArt() {
+    public @NotNull Art getArt() {
         Holder<PaintingVariant> art = this.getHandle().getVariant();
         return CraftArt.NotchToBukkit(art);
     }
@@ -43,7 +45,7 @@ public class CraftPainting extends CraftHanging implements Painting {
     }
 
     @Override
-    public boolean setFacingDirection(BlockFace face, boolean force) {
+    public boolean setFacingDirection(@NotNull BlockFace face, boolean force) {
         if (super.setFacingDirection(face, force)) {
             update();
             return true;
@@ -58,12 +60,12 @@ public class CraftPainting extends CraftHanging implements Painting {
     }
 
     @Override
-    public String toString() {
+    public @NotNull String toString() {
         return "CraftPainting{art=" + this.getArt() + "}";
     }
 
     @Override
-    public EntityType getType() {
+    public @NotNull EntityType getType() {
         return EntityType.PAINTING;
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftPanda.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftPanda.java
index 1f6dcad764240e15083731d017f9bb1c5c84622f..03d9da8aaafcea172e3ef3625ac74b73b117e825 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftPanda.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftPanda.java
@@ -5,6 +5,8 @@ import org.bukkit.craftbukkit.CraftServer;
 import org.bukkit.entity.EntityType;
 import org.bukkit.entity.Panda;
 import org.bukkit.entity.Panda.Gene;
+import org.jetbrains.annotations.NotNull;
+
 
 public class CraftPanda extends CraftAnimals implements Panda {
 
@@ -18,32 +20,32 @@ public class CraftPanda extends CraftAnimals implements Panda {
     }
 
     @Override
-    public EntityType getType() {
+    public @NotNull EntityType getType() {
         return EntityType.PANDA;
     }
 
     @Override
-    public String toString() {
+    public @NotNull String toString() {
         return "CraftPanda";
     }
 
     @Override
-    public Gene getMainGene() {
+    public @NotNull Gene getMainGene() {
         return CraftPanda.fromNms(this.getHandle().getMainGene());
     }
 
     @Override
-    public void setMainGene(Gene gene) {
+    public void setMainGene(@NotNull Gene gene) {
         this.getHandle().setMainGene(CraftPanda.toNms(gene));
     }
 
     @Override
-    public Gene getHiddenGene() {
+    public @NotNull Gene getHiddenGene() {
         return CraftPanda.fromNms(this.getHandle().getHiddenGene());
     }
 
     @Override
-    public void setHiddenGene(Gene gene) {
+    public void setHiddenGene(@NotNull Gene gene) {
         this.getHandle().setHiddenGene(CraftPanda.toNms(gene));
     }
     // Paper start - Panda API
@@ -133,13 +135,13 @@ public class CraftPanda extends CraftAnimals implements Panda {
         return this.getHandle().getUnhappyCounter();
     }
 
-    public static Gene fromNms(net.minecraft.world.entity.animal.Panda.Gene gene) {
+    public static Gene fromNms(net.minecraft.world.entity.animal.Panda.@NotNull Gene gene) {
         Preconditions.checkArgument(gene != null, "Gene may not be null");
 
         return Gene.values()[gene.ordinal()];
     }
 
-    public static net.minecraft.world.entity.animal.Panda.Gene toNms(Gene gene) {
+    public static net.minecraft.world.entity.animal.Panda.Gene toNms(@NotNull Gene gene) {
         Preconditions.checkArgument(gene != null, "Gene may not be null");
 
         return net.minecraft.world.entity.animal.Panda.Gene.values()[gene.ordinal()];
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftParrot.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftParrot.java
index d7e9b1d7460c0479ff94a2cb52e6c572a464420a..a563817cab8fa465daf59103a18c80aa047d7c0b 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftParrot.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftParrot.java
@@ -5,6 +5,8 @@ import org.bukkit.craftbukkit.CraftServer;
 import org.bukkit.entity.EntityType;
 import org.bukkit.entity.Parrot;
 import org.bukkit.entity.Parrot.Variant;
+import org.jetbrains.annotations.NotNull;
+
 
 public class CraftParrot extends CraftTameableAnimal implements Parrot {
 
@@ -18,24 +20,24 @@ public class CraftParrot extends CraftTameableAnimal implements Parrot {
     }
 
     @Override
-    public Variant getVariant() {
+    public @NotNull Variant getVariant() {
         return Variant.values()[this.getHandle().getVariant().ordinal()];
     }
 
     @Override
-    public void setVariant(Variant variant) {
+    public void setVariant(@NotNull Variant variant) {
         Preconditions.checkArgument(variant != null, "variant");
 
         this.getHandle().setVariant(net.minecraft.world.entity.animal.Parrot.Variant.byId(variant.ordinal()));
     }
 
     @Override
-    public String toString() {
+    public @NotNull String toString() {
         return "CraftParrot";
     }
 
     @Override
-    public EntityType getType() {
+    public @NotNull EntityType getType() {
         return EntityType.PARROT;
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftPhantom.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftPhantom.java
index 5a8fd2910204550537c04ae8754b50f70a445bb1..7f62ad4481c40518a53cac1b5f51d46b6239338d 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftPhantom.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftPhantom.java
@@ -3,6 +3,9 @@ package org.bukkit.craftbukkit.entity;
 import org.bukkit.craftbukkit.CraftServer;
 import org.bukkit.entity.EntityType;
 import org.bukkit.entity.Phantom;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 public class CraftPhantom extends CraftFlying implements Phantom {
 
@@ -26,12 +29,12 @@ public class CraftPhantom extends CraftFlying implements Phantom {
     }
 
     @Override
-    public String toString() {
+    public @NotNull String toString() {
         return "CraftPhantom";
     }
 
     @Override
-    public EntityType getType() {
+    public @NotNull EntityType getType() {
         return EntityType.PHANTOM;
     }
 
@@ -52,7 +55,7 @@ public class CraftPhantom extends CraftFlying implements Phantom {
     }
 
     @Override
-    public org.bukkit.Location getAnchorLocation() {
+    public org.bukkit.@NotNull Location getAnchorLocation() {
         net.minecraft.core.BlockPos pos = this.getHandle().anchorPoint;
         if (pos == null) {
             return null;
@@ -62,7 +65,7 @@ public class CraftPhantom extends CraftFlying implements Phantom {
     }
 
     @Override
-    public void setAnchorLocation(org.bukkit.Location location) {
+    public void setAnchorLocation(org.bukkit.@Nullable Location location) {
         net.minecraft.core.BlockPos pos = null;
         if (location != null) {
             pos = io.papermc.paper.util.MCUtil.toBlockPosition(location);
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftPig.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftPig.java
index 377099c83a47837749589429657a82a9f92a2aa0..745d9433cc7b2cce29a6503ed9cc4b1c0fdc78ba 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftPig.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftPig.java
@@ -5,6 +5,8 @@ import org.bukkit.Material;
 import org.bukkit.craftbukkit.CraftServer;
 import org.bukkit.entity.EntityType;
 import org.bukkit.entity.Pig;
+import org.jetbrains.annotations.NotNull;
+
 
 public class CraftPig extends CraftAnimals implements Pig {
 
@@ -52,7 +54,7 @@ public class CraftPig extends CraftAnimals implements Pig {
     }
 
     @Override
-    public Material getSteerMaterial() {
+    public @NotNull Material getSteerMaterial() {
         return Material.CARROT_ON_A_STICK;
     }
 
@@ -62,12 +64,12 @@ public class CraftPig extends CraftAnimals implements Pig {
     }
 
     @Override
-    public String toString() {
+    public @NotNull String toString() {
         return "CraftPig";
     }
 
     @Override
-    public EntityType getType() {
+    public @NotNull EntityType getType() {
         return EntityType.PIG;
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftPigZombie.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftPigZombie.java
index a8a372dc15019ad720994e03f5a7109f31423f56..ae06ce3d047836db18dc58b34283773ec0f11739 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftPigZombie.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftPigZombie.java
@@ -4,6 +4,8 @@ import net.minecraft.world.entity.monster.ZombifiedPiglin;
 import org.bukkit.craftbukkit.CraftServer;
 import org.bukkit.entity.EntityType;
 import org.bukkit.entity.PigZombie;
+import org.jetbrains.annotations.NotNull;
+
 
 public class CraftPigZombie extends CraftZombie implements PigZombie {
 
@@ -37,12 +39,12 @@ public class CraftPigZombie extends CraftZombie implements PigZombie {
     }
 
     @Override
-    public String toString() {
+    public @NotNull String toString() {
         return "CraftPigZombie";
     }
 
     @Override
-    public EntityType getType() {
+    public @NotNull EntityType getType() {
         return EntityType.ZOMBIFIED_PIGLIN;
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftPiglin.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftPiglin.java
index 48d0a4e42e1b90d1323784d1284acabfe9497dd6..b3b8eb605e69051d978cd7908e4eb2fe3cafe2fb 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftPiglin.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftPiglin.java
@@ -12,6 +12,9 @@ import org.bukkit.craftbukkit.util.CraftMagicNumbers;
 import org.bukkit.entity.EntityType;
 import org.bukkit.entity.Piglin;
 import org.bukkit.inventory.Inventory;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 public class CraftPiglin extends CraftPiglinAbstract implements Piglin, com.destroystokyo.paper.entity.CraftRangedEntity<net.minecraft.world.entity.monster.piglin.Piglin> { // Paper
 
@@ -30,7 +33,7 @@ public class CraftPiglin extends CraftPiglinAbstract implements Piglin, com.dest
     }
 
     @Override
-    public boolean addBarterMaterial(Material material) {
+    public boolean addBarterMaterial(@Nullable Material material) {
         Preconditions.checkArgument(material != null, "material cannot be null");
 
         Item item = CraftMagicNumbers.getItem(material);
@@ -38,7 +41,7 @@ public class CraftPiglin extends CraftPiglinAbstract implements Piglin, com.dest
     }
 
     @Override
-    public boolean removeBarterMaterial(Material material) {
+    public boolean removeBarterMaterial(@Nullable Material material) {
         Preconditions.checkArgument(material != null, "material cannot be null");
 
         Item item = CraftMagicNumbers.getItem(material);
@@ -46,7 +49,7 @@ public class CraftPiglin extends CraftPiglinAbstract implements Piglin, com.dest
     }
 
     @Override
-    public boolean addMaterialOfInterest(Material material) {
+    public boolean addMaterialOfInterest(@Nullable Material material) {
         Preconditions.checkArgument(material != null, "material cannot be null");
 
         Item item = CraftMagicNumbers.getItem(material);
@@ -54,7 +57,7 @@ public class CraftPiglin extends CraftPiglinAbstract implements Piglin, com.dest
     }
 
     @Override
-    public boolean removeMaterialOfInterest(Material material) {
+    public boolean removeMaterialOfInterest(@Nullable Material material) {
         Preconditions.checkArgument(material != null, "material cannot be null");
 
         Item item = CraftMagicNumbers.getItem(material);
@@ -62,17 +65,17 @@ public class CraftPiglin extends CraftPiglinAbstract implements Piglin, com.dest
     }
 
     @Override
-    public Set<Material> getInterestList() {
+    public @NotNull Set<Material> getInterestList() {
         return Collections.unmodifiableSet(this.getHandle().interestItems.stream().map(CraftMagicNumbers::getMaterial).collect(Collectors.toSet()));
     }
 
     @Override
-    public Set<Material> getBarterList() {
+    public @NotNull Set<Material> getBarterList() {
         return Collections.unmodifiableSet(this.getHandle().allowedBarterItems.stream().map(CraftMagicNumbers::getMaterial).collect(Collectors.toSet()));
     }
 
     @Override
-    public Inventory getInventory() {
+    public @NotNull Inventory getInventory() {
         return new CraftInventory(this.getHandle().inventory);
     }
 
@@ -82,12 +85,12 @@ public class CraftPiglin extends CraftPiglinAbstract implements Piglin, com.dest
     }
 
     @Override
-    public EntityType getType() {
+    public @NotNull EntityType getType() {
         return EntityType.PIGLIN;
     }
 
     @Override
-    public String toString() {
+    public @NotNull String toString() {
         return "CraftPiglin";
     }
     // Paper start
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftPiglinBrute.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftPiglinBrute.java
index 689c4ce62f604d023e2f293db17f423fd10acbaf..5f8f20b39201690888c437f4cb15ccbd68538311 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftPiglinBrute.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftPiglinBrute.java
@@ -3,6 +3,8 @@ package org.bukkit.craftbukkit.entity;
 import org.bukkit.craftbukkit.CraftServer;
 import org.bukkit.entity.EntityType;
 import org.bukkit.entity.PiglinBrute;
+import org.jetbrains.annotations.NotNull;
+
 
 public class CraftPiglinBrute extends CraftPiglinAbstract implements PiglinBrute {
 
@@ -16,12 +18,12 @@ public class CraftPiglinBrute extends CraftPiglinAbstract implements PiglinBrute
     }
 
     @Override
-    public EntityType getType() {
+    public @NotNull EntityType getType() {
         return EntityType.PIGLIN_BRUTE;
     }
 
     @Override
-    public String toString() {
+    public @NotNull String toString() {
         return "CraftPiglinBrute";
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftPillager.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftPillager.java
index beea227855f0b978e655efc298024120df8f4945..6b2abd10bf40dc91f762670feac483818f607c77 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftPillager.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftPillager.java
@@ -5,6 +5,8 @@ import org.bukkit.craftbukkit.inventory.CraftInventory;
 import org.bukkit.entity.EntityType;
 import org.bukkit.entity.Pillager;
 import org.bukkit.inventory.Inventory;
+import org.jetbrains.annotations.NotNull;
+
 
 public class CraftPillager extends CraftIllager implements Pillager, com.destroystokyo.paper.entity.CraftRangedEntity<net.minecraft.world.entity.monster.Pillager> { // Paper
 
@@ -18,17 +20,17 @@ public class CraftPillager extends CraftIllager implements Pillager, com.destroy
     }
 
     @Override
-    public EntityType getType() {
+    public @NotNull EntityType getType() {
         return EntityType.PILLAGER;
     }
 
     @Override
-    public String toString() {
+    public @NotNull String toString() {
         return "CraftPillager";
     }
 
     @Override
-    public Inventory getInventory() {
+    public @NotNull Inventory getInventory() {
         return new CraftInventory(this.getHandle().inventory);
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
index 99bf1485ddecb5fc88850242e9c32850781c4b36..42b2d495dd340a6eb6b6c063675ee1ff93a11be5 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
@@ -170,8 +170,8 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
     private double health = 20;
     private boolean scaledHealth = false;
     private double healthScale = 20;
-    private CraftWorldBorder clientWorldBorder = null;
-    private BorderChangeListener clientWorldBorderListener = this.createWorldBorderListener();
+    private @org.jetbrains.annotations.Nullable CraftWorldBorder clientWorldBorder = null;
+    private @NotNull BorderChangeListener clientWorldBorderListener = this.createWorldBorderListener();
     // Paper start
     private org.bukkit.event.player.PlayerResourcePackStatusEvent.Status resourcePackStatus;
     private String resourcePackHash;
@@ -260,7 +260,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
     }
     // Paper end - implement view distances
 
-    public GameProfile getProfile() {
+    public @NotNull GameProfile getProfile() {
         return this.getHandle().getGameProfile();
     }
 
@@ -348,7 +348,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
     }
 
     @Override
-    public void sendMessage(String... messages) {
+    public void sendMessage(String @NotNull ... messages) {
         for (String message : messages) {
             this.sendMessage(message);
         }
@@ -362,7 +362,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
     }
 
     @Override
-    public void sendMessage(UUID sender, String... messages) {
+    public void sendMessage(UUID sender, String @NotNull ... messages) {
         for (String message : messages) {
             this.sendMessage(sender, message);
         }
@@ -370,7 +370,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
 
     // Paper start
     @Override
-    public void sendActionBar(BaseComponent[] message) {
+    public void sendActionBar(BaseComponent @NotNull [] message) {
         if (getHandle().connection == null) return;
         net.minecraft.network.protocol.game.ClientboundSetActionBarTextPacket packet = new net.minecraft.network.protocol.game.ClientboundSetActionBarTextPacket((net.minecraft.network.chat.Component) null);
         packet.components = message;
@@ -378,19 +378,19 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
     }
 
     @Override
-    public void sendActionBar(String message) {
+    public void sendActionBar(@org.jetbrains.annotations.Nullable String message) {
         if (getHandle().connection == null || message == null || message.isEmpty()) return;
         getHandle().connection.send(new net.minecraft.network.protocol.game.ClientboundSetActionBarTextPacket(CraftChatMessage.fromStringOrNull(message)));
     }
 
     @Override
-    public void sendActionBar(char alternateChar, String message) {
+    public void sendActionBar(char alternateChar, @org.jetbrains.annotations.Nullable String message) {
         if (message == null || message.isEmpty()) return;
         sendActionBar(org.bukkit.ChatColor.translateAlternateColorCodes(alternateChar, message));
     }
 
     @Override
-    public void setPlayerListHeaderFooter(BaseComponent[] header, BaseComponent[] footer) {
+    public void setPlayerListHeaderFooter(BaseComponent @org.jetbrains.annotations.Nullable [] header, BaseComponent @org.jetbrains.annotations.Nullable [] footer) {
          if (header != null) {
              String headerJson = net.md_5.bungee.chat.ComponentSerializer.toString(header);
              playerListHeader = net.kyori.adventure.text.serializer.gson.GsonComponentSerializer.gson().deserialize(headerJson);
@@ -409,7 +409,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
     }
 
     @Override
-    public void setPlayerListHeaderFooter(BaseComponent header, BaseComponent footer) {
+    public void setPlayerListHeaderFooter(@org.jetbrains.annotations.Nullable BaseComponent header, @org.jetbrains.annotations.Nullable BaseComponent footer) {
         this.setPlayerListHeaderFooter(header == null ? null : new BaseComponent[]{header},
                 footer == null ? null : new BaseComponent[]{footer});
     }
@@ -421,7 +421,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
     }
 
     @Override
-    public void setSubtitle(BaseComponent[] subtitle) {
+    public void setSubtitle(BaseComponent @NotNull [] subtitle) {
         final ClientboundSetSubtitleTextPacket packet = new ClientboundSetSubtitleTextPacket((net.minecraft.network.chat.Component) null);
         packet.components = subtitle;
         getHandle().connection.send(packet);
@@ -433,7 +433,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
     }
 
     @Override
-    public void showTitle(BaseComponent[] title) {
+    public void showTitle(BaseComponent @NotNull [] title) {
         final ClientboundSetTitleTextPacket packet = new ClientboundSetTitleTextPacket((net.minecraft.network.chat.Component) null);
         packet.components = title;
         getHandle().connection.send(packet);
@@ -445,7 +445,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
     }
 
     @Override
-    public void showTitle(BaseComponent[] title, BaseComponent[] subtitle, int fadeInTicks, int stayTicks, int fadeOutTicks) {
+    public void showTitle(BaseComponent @NotNull [] title, BaseComponent @NotNull [] subtitle, int fadeInTicks, int stayTicks, int fadeOutTicks) {
         setTitleTimes(fadeInTicks, stayTicks, fadeOutTicks);
         setSubtitle(subtitle);
         showTitle(title);
@@ -459,7 +459,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
     }
 
     @Override
-    public void sendTitle(Title title) {
+    public void sendTitle(@NotNull Title title) {
         Preconditions.checkNotNull(title, "Title is null");
         setTitleTimes(title.getFadeIn(), title.getStay(), title.getFadeOut());
         setSubtitle(title.getSubtitle() == null ? new BaseComponent[0] : title.getSubtitle());
@@ -467,7 +467,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
     }
 
     @Override
-    public void updateTitle(Title title) {
+    public void updateTitle(@NotNull Title title) {
         Preconditions.checkNotNull(title, "Title is null");
         setTitleTimes(title.getFadeIn(), title.getStay(), title.getFadeOut());
         if (title.getSubtitle() != null) {
@@ -483,20 +483,20 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
     // Paper end
 
     @Override
-    public String getDisplayName() {
+    public @NotNull String getDisplayName() {
         if(true) return io.papermc.paper.adventure.DisplayNames.getLegacy(this); // Paper
         return this.getHandle().displayName;
     }
 
     @Override
-    public void setDisplayName(final String name) {
+    public void setDisplayName(final @org.jetbrains.annotations.Nullable String name) {
         this.getHandle().adventure$displayName = name != null ? net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().deserialize(name) : net.kyori.adventure.text.Component.text(this.getName()); // Paper
         this.getHandle().displayName = name == null ? getName() : name;
     }
 
     // Paper start
     @Override
-    public void playerListName(net.kyori.adventure.text.Component name) {
+    public void playerListName(net.kyori.adventure.text.@org.jetbrains.annotations.Nullable Component name) {
         getHandle().listName = name == null ? null : io.papermc.paper.adventure.PaperAdventure.asVanilla(name);
         for (ServerPlayer player : server.getHandle().players) {
             if (player.getBukkitEntity().canSee(this)) {
@@ -505,7 +505,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
         }
     }
     @Override
-    public net.kyori.adventure.text.Component playerListName() {
+    public net.kyori.adventure.text.@NotNull Component playerListName() {
         return getHandle().listName == null ? net.kyori.adventure.text.Component.text(getName()) : io.papermc.paper.adventure.PaperAdventure.asAdventure(getHandle().listName);
     }
     @Override
@@ -518,12 +518,12 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
     }
     // Paper end
     @Override
-    public String getPlayerListName() {
+    public @NotNull String getPlayerListName() {
         return this.getHandle().listName == null ? getName() : CraftChatMessage.fromComponent(this.getHandle().listName);
     }
 
     @Override
-    public void setPlayerListName(String name) {
+    public void setPlayerListName(@org.jetbrains.annotations.Nullable String name) {
         if (name == null) {
             name = getName();
         }
@@ -535,8 +535,8 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
         }
     }
 
-    private net.kyori.adventure.text.Component playerListHeader; // Paper - Adventure
-    private net.kyori.adventure.text.Component playerListFooter; // Paper - Adventure
+    private net.kyori.adventure.text.@org.jetbrains.annotations.Nullable Component playerListHeader; // Paper - Adventure
+    private net.kyori.adventure.text.@org.jetbrains.annotations.Nullable Component playerListFooter; // Paper - Adventure
 
     @Override
     public String getPlayerListHeader() {
@@ -549,19 +549,19 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
     }
 
     @Override
-    public void setPlayerListHeader(String header) {
+    public void setPlayerListHeader(@org.jetbrains.annotations.Nullable String header) {
         this.playerListHeader = header == null ? null : net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().deserialize(header); // Paper - Adventure
         this.updatePlayerListHeaderFooter();
     }
 
     @Override
-    public void setPlayerListFooter(String footer) {
+    public void setPlayerListFooter(@org.jetbrains.annotations.Nullable String footer) {
         this.playerListFooter = footer == null ? null : net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().deserialize(footer); // Paper - Adventure
         this.updatePlayerListHeaderFooter();
     }
 
     @Override
-    public void setPlayerListHeaderFooter(String header, String footer) {
+    public void setPlayerListHeaderFooter(@org.jetbrains.annotations.Nullable String header, @org.jetbrains.annotations.Nullable String footer) {
         this.playerListHeader = header == null ? null : net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().deserialize(header); // Paper - Adventure
         this.playerListFooter = footer == null ? null : net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().deserialize(footer); // Paper - Adventure
         this.updatePlayerListHeaderFooter();
@@ -595,7 +595,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
     }
 
     @Override
-    public void kickPlayer(String message) {
+    public void kickPlayer(@org.jetbrains.annotations.Nullable String message) {
         org.spigotmc.AsyncCatcher.catchOp("player kick"); // Spigot
         if (this.getHandle().connection == null) return;
 
@@ -615,7 +615,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
     }
 
     @Override
-    public void kick(net.kyori.adventure.text.Component message, org.bukkit.event.player.PlayerKickEvent.Cause cause) {
+    public void kick(net.kyori.adventure.text.@org.jetbrains.annotations.Nullable Component message, org.bukkit.event.player.PlayerKickEvent.@NotNull Cause cause) {
         org.spigotmc.AsyncCatcher.catchOp("player kick");
         final ServerGamePacketListenerImpl connection = this.getHandle().connection;
         if (connection != null) {
@@ -624,7 +624,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
     }
 
     @Override
-    public <T> T getClientOption(com.destroystokyo.paper.ClientOption<T> type) {
+    public <T> @NotNull T getClientOption(com.destroystokyo.paper.@NotNull ClientOption<T> type) {
         if (com.destroystokyo.paper.ClientOption.SKIN_PARTS == type) {
             return type.getType().cast(new com.destroystokyo.paper.PaperSkinParts(getHandle().getEntityData().get(net.minecraft.world.entity.player.Player.DATA_PLAYER_MODE_CUSTOMISATION)));
         } else if (com.destroystokyo.paper.ClientOption.CHAT_COLORS_ENABLED == type) {
@@ -646,7 +646,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
     }
 
     @Override
-    public org.bukkit.entity.Firework boostElytra(ItemStack firework) {
+    public org.bukkit.entity.Firework boostElytra(@NotNull ItemStack firework) {
         Validate.isTrue(isGliding(), "Player must be gliding");
         Validate.isTrue(firework != null, "firework == null");
         Validate.isTrue(firework.getType() == Material.FIREWORK_ROCKET, "Firework must be Material.FIREWORK_ROCKET");
@@ -684,7 +684,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
     // Paper end
 
     @Override
-    public void setCompassTarget(Location loc) {
+    public void setCompassTarget(@NotNull Location loc) {
         if (this.getHandle().connection == null) return;
 
         // Do not directly assign here, from the packethandler we'll assign it.
@@ -692,12 +692,12 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
     }
 
     @Override
-    public Location getCompassTarget() {
+    public @NotNull Location getCompassTarget() {
         return this.getHandle().compassTarget;
     }
 
     @Override
-    public void chat(String msg) {
+    public void chat(@NotNull String msg) {
         if (this.getHandle().connection == null) return;
 
         // Paper start - improve chat handling
@@ -722,7 +722,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
     }
 
     @Override
-    public void playNote(Location loc, byte instrument, byte note) {
+    public void playNote(@NotNull Location loc, byte instrument, byte note) {
         if (this.getHandle().connection == null) return;
 
         String instrumentName = null;
@@ -764,7 +764,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
     }
 
     @Override
-    public void playNote(Location loc, Instrument instrument, Note note) {
+    public void playNote(@NotNull Location loc, @NotNull Instrument instrument, @NotNull Note note) {
         if (this.getHandle().connection == null) return;
 
         // Paper start - fix all this (modeled off of NoteBlock)
@@ -792,7 +792,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
     }
 
     @Override
-    public void playSound(Location loc, Sound sound, org.bukkit.SoundCategory category, float volume, float pitch) {
+    public void playSound(@org.jetbrains.annotations.Nullable Location loc, @org.jetbrains.annotations.Nullable Sound sound, org.bukkit.@org.jetbrains.annotations.Nullable SoundCategory category, float volume, float pitch) {
         if (loc == null || sound == null || category == null || this.getHandle().connection == null) return;
 
         ClientboundSoundPacket packet = new ClientboundSoundPacket(BuiltInRegistries.SOUND_EVENT.wrapAsHolder(CraftSound.getSoundEffect(sound)), net.minecraft.sounds.SoundSource.valueOf(category.name()), loc.getX(), loc.getY(), loc.getZ(), volume, pitch, this.getHandle().getRandom().nextLong());
@@ -800,7 +800,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
     }
 
     @Override
-    public void playSound(Location loc, String sound, org.bukkit.SoundCategory category, float volume, float pitch) {
+    public void playSound(@org.jetbrains.annotations.Nullable Location loc, @org.jetbrains.annotations.Nullable String sound, org.bukkit.@org.jetbrains.annotations.Nullable SoundCategory category, float volume, float pitch) {
         if (loc == null || sound == null || category == null || this.getHandle().connection == null) return;
 
         ClientboundSoundPacket packet = new ClientboundSoundPacket(Holder.direct(SoundEvent.createVariableRangeEvent(new ResourceLocation(sound))), net.minecraft.sounds.SoundSource.valueOf(category.name()), loc.getX(), loc.getY(), loc.getZ(), volume, pitch, this.getHandle().getRandom().nextLong());
@@ -813,7 +813,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
     }
 
     @Override
-    public void playSound(org.bukkit.entity.Entity entity, Sound sound, org.bukkit.SoundCategory category, float volume, float pitch) {
+    public void playSound(org.bukkit.entity.Entity entity, @org.jetbrains.annotations.Nullable Sound sound, org.bukkit.@org.jetbrains.annotations.Nullable SoundCategory category, float volume, float pitch) {
         if (!(entity instanceof CraftEntity craftEntity) || sound == null || category == null || this.getHandle().connection == null) return;
 
         ClientboundSoundEntityPacket packet = new ClientboundSoundEntityPacket(BuiltInRegistries.SOUND_EVENT.wrapAsHolder(CraftSound.getSoundEffect(sound)), net.minecraft.sounds.SoundSource.valueOf(category.name()), craftEntity.getHandle(), volume, pitch, this.getHandle().getRandom().nextLong());
@@ -821,29 +821,29 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
     }
 
     @Override
-    public void stopSound(Sound sound) {
+    public void stopSound(@NotNull Sound sound) {
         this.stopSound(sound, null);
     }
 
     @Override
-    public void stopSound(String sound) {
+    public void stopSound(@NotNull String sound) {
         this.stopSound(sound, null);
     }
 
     @Override
-    public void stopSound(Sound sound, org.bukkit.SoundCategory category) {
+    public void stopSound(@NotNull Sound sound, org.bukkit.SoundCategory category) {
         this.stopSound(sound.getKey().getKey(), category);
     }
 
     @Override
-    public void stopSound(String sound, org.bukkit.SoundCategory category) {
+    public void stopSound(@NotNull String sound, org.bukkit.@org.jetbrains.annotations.Nullable SoundCategory category) {
         if (this.getHandle().connection == null) return;
 
         this.getHandle().connection.send(new ClientboundStopSoundPacket(new ResourceLocation(sound), category == null ? net.minecraft.sounds.SoundSource.MASTER : net.minecraft.sounds.SoundSource.valueOf(category.name())));
     }
 
     @Override
-    public void stopSound(org.bukkit.SoundCategory category) {
+    public void stopSound(org.bukkit.@NotNull SoundCategory category) {
         if (this.getHandle().connection == null) return;
 
         this.getHandle().connection.send(new ClientboundStopSoundPacket(null, net.minecraft.sounds.SoundSource.valueOf(category.name())));
@@ -857,7 +857,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
     }
 
     @Override
-    public void playEffect(Location loc, Effect effect, int data) {
+    public void playEffect(@NotNull Location loc, @NotNull Effect effect, int data) {
         if (this.getHandle().connection == null) return;
 
         int packetData = effect.getId();
@@ -866,7 +866,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
     }
 
     @Override
-    public <T> void playEffect(Location loc, Effect effect, T data) {
+    public <T> void playEffect(@NotNull Location loc, @NotNull Effect effect, @org.jetbrains.annotations.Nullable T data) {
         if (data != null) {
             Validate.isTrue(effect.getData() != null && effect.getData().isAssignableFrom(data.getClass()), "Wrong kind of data for this effect!");
         } else {
@@ -879,7 +879,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
     }
 
     @Override
-    public boolean breakBlock(Block block) {
+    public boolean breakBlock(@NotNull Block block) {
         Preconditions.checkArgument(block != null, "Block cannot be null");
         Preconditions.checkArgument(block.getWorld().equals(getWorld()), "Cannot break blocks across worlds");
 
@@ -887,7 +887,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
     }
 
     @Override
-    public void sendBlockChange(Location loc, Material material, byte data) {
+    public void sendBlockChange(@NotNull Location loc, Material material, byte data) {
         if (this.getHandle().connection == null) return;
 
         ClientboundBlockUpdatePacket packet = new ClientboundBlockUpdatePacket(new BlockPos(loc.getBlockX(), loc.getBlockY(), loc.getBlockZ()), CraftMagicNumbers.getBlock(material, data));
@@ -895,7 +895,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
     }
 
     @Override
-    public void sendBlockChange(Location loc, BlockData block) {
+    public void sendBlockChange(@NotNull Location loc, @NotNull BlockData block) {
         if (this.getHandle().connection == null) return;
 
         ClientboundBlockUpdatePacket packet = new ClientboundBlockUpdatePacket(new BlockPos(loc.getBlockX(), loc.getBlockY(), loc.getBlockZ()), ((CraftBlockData) block).getState());
@@ -904,7 +904,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
 
     // Paper start
     @Override
-    public void sendMultiBlockChange(Map<Location, BlockData> blockChanges, boolean suppressLightUpdates) {
+    public void sendMultiBlockChange(@NotNull Map<Location, BlockData> blockChanges, boolean suppressLightUpdates) {
         if (this.getHandle().connection == null) return;
 
         Map<SectionPos, it.unimi.dsi.fastutil.shorts.Short2ObjectMap<net.minecraft.world.level.block.state.BlockState>> sectionMap = new HashMap<>();
@@ -932,7 +932,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
     // Paper end
 
     @Override
-    public void sendBlockChanges(Collection<BlockState> blocks, boolean suppressLightUpdates) {
+    public void sendBlockChanges(@org.jetbrains.annotations.Nullable Collection<BlockState> blocks, boolean suppressLightUpdates) {
         Preconditions.checkArgument(blocks != null, "blocks must not be null");
 
         if (this.getHandle().connection == null || blocks.isEmpty()) {
@@ -976,7 +976,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
     }
 
     @Override
-    public void sendBlockDamage(Location loc, float progress, int destroyerIdentity) {
+    public void sendBlockDamage(@org.jetbrains.annotations.Nullable Location loc, float progress, int destroyerIdentity) {
         // Paper end - customBlockDamage identity
         Preconditions.checkArgument(loc != null, "loc must not be null");
         Preconditions.checkArgument(progress >= 0.0 && progress <= 1.0, "progress must be between 0.0 and 1.0 (inclusive)");
@@ -990,7 +990,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
 
     // Paper start
     @Override
-    public void sendSignChange(Location loc, @Nullable List<net.kyori.adventure.text.Component> lines, DyeColor dyeColor, boolean hasGlowingText) {
+    public void sendSignChange(@NotNull Location loc, @Nullable List<net.kyori.adventure.text.Component> lines, @NotNull DyeColor dyeColor, boolean hasGlowingText) {
         if (getHandle().connection == null) {
             return;
         }
@@ -1006,7 +1006,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
         this.sendSignChange0(components, loc, dyeColor, hasGlowingText);
     }
 
-    private void sendSignChange0(Component[] components, Location loc, DyeColor dyeColor, boolean hasGlowingText) {
+    private void sendSignChange0(Component @NotNull [] components, @NotNull Location loc, @NotNull DyeColor dyeColor, boolean hasGlowingText) {
         SignBlockEntity sign = new SignBlockEntity(new BlockPos(loc.getBlockX(), loc.getBlockY(), loc.getBlockZ()), Blocks.OAK_SIGN.defaultBlockState());
         sign.setColor(net.minecraft.world.item.DyeColor.byId(dyeColor.getWoolData()));
         sign.setHasGlowingText(hasGlowingText);
@@ -1018,17 +1018,17 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
     }
     // Paper end
     @Override
-    public void sendSignChange(Location loc, String[] lines) {
+    public void sendSignChange(@NotNull Location loc, String[] lines) {
         this.sendSignChange(loc, lines, DyeColor.BLACK);
     }
 
     @Override
-    public void sendSignChange(Location loc, String[] lines, DyeColor dyeColor) {
+    public void sendSignChange(@NotNull Location loc, String[] lines, @NotNull DyeColor dyeColor) {
         this.sendSignChange(loc, lines, dyeColor, false);
     }
 
     @Override
-    public void sendSignChange(Location loc, String[] lines, DyeColor dyeColor, boolean hasGlowingText) {
+    public void sendSignChange(@NotNull Location loc, String @org.jetbrains.annotations.Nullable [] lines, @NotNull DyeColor dyeColor, boolean hasGlowingText) {
         if (this.getHandle().connection == null) {
             return;
         }
@@ -1056,7 +1056,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
     }
 
     @Override
-    public void sendEquipmentChange(LivingEntity entity, EquipmentSlot slot, ItemStack item) {
+    public void sendEquipmentChange(@org.jetbrains.annotations.Nullable LivingEntity entity, @org.jetbrains.annotations.Nullable EquipmentSlot slot, @org.jetbrains.annotations.Nullable ItemStack item) {
         Preconditions.checkArgument(entity != null, "entity must not be null");
         Preconditions.checkArgument(slot != null, "slot must not be null");
         Preconditions.checkArgument(item != null, "item must not be null");
@@ -1076,7 +1076,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
     }
 
     @Override
-    public void setWorldBorder(WorldBorder border) {
+    public void setWorldBorder(@org.jetbrains.annotations.Nullable WorldBorder border) {
         CraftWorldBorder craftBorder = (CraftWorldBorder) border;
 
         if (border != null && !craftBorder.isVirtual() && !craftBorder.getWorld().equals(getWorld())) {
@@ -1107,7 +1107,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
         connection.send(new ClientboundSetBorderWarningDistancePacket(newWorldBorder));
     }
 
-    private BorderChangeListener createWorldBorderListener() {
+    private @NotNull BorderChangeListener createWorldBorderListener() {
         return new BorderChangeListener() {
             @Override
             public void onBorderSizeSet(net.minecraft.world.level.border.WorldBorder border, double size) {
@@ -1147,7 +1147,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
     }
 
     @Override
-    public void sendMap(MapView map) {
+    public void sendMap(@NotNull MapView map) {
         if (this.getHandle().connection == null) return;
 
         RenderData data = ((CraftMapView) map).render(this);
@@ -1176,13 +1176,13 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
     }
 
     @Override
-    public boolean teleport(Location location, PlayerTeleportEvent.TeleportCause cause) {
+    public boolean teleport(@NotNull Location location, PlayerTeleportEvent.@NotNull TeleportCause cause) {
         // Paper start - Teleport API
         return this.teleport(location, cause, false);
     }
 
     @Override
-    public boolean teleport(Location location, PlayerTeleportEvent.TeleportCause cause, boolean ignorePassengers, boolean dismount) {
+    public boolean teleport(Location location, PlayerTeleportEvent.@NotNull TeleportCause cause, boolean ignorePassengers, boolean dismount) {
         return this.teleport(location, cause, ignorePassengers, dismount, new io.papermc.paper.entity.RelativeTeleportFlag[0]);
     }
 
@@ -1196,21 +1196,21 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
         this.getHandle().lookAt(toNmsAnchor(playerAnchor), new Vec3(x, y, z));
     }
 
-    public static net.minecraft.commands.arguments.EntityAnchorArgument.Anchor toNmsAnchor(io.papermc.paper.entity.LookAnchor nmsAnchor) {
+    public static net.minecraft.commands.arguments.EntityAnchorArgument.@NotNull Anchor toNmsAnchor(io.papermc.paper.entity.@NotNull LookAnchor nmsAnchor) {
         return switch (nmsAnchor) {
             case EYES -> net.minecraft.commands.arguments.EntityAnchorArgument.Anchor.EYES;
             case FEET -> net.minecraft.commands.arguments.EntityAnchorArgument.Anchor.FEET;
         };
     }
 
-    public static io.papermc.paper.entity.LookAnchor toApiAnchor(net.minecraft.commands.arguments.EntityAnchorArgument.Anchor playerAnchor) {
+    public static io.papermc.paper.entity.@NotNull LookAnchor toApiAnchor(net.minecraft.commands.arguments.EntityAnchorArgument.@NotNull Anchor playerAnchor) {
         return switch (playerAnchor) {
             case EYES -> io.papermc.paper.entity.LookAnchor.EYES;
             case FEET -> io.papermc.paper.entity.LookAnchor.FEET;
         };
     }
 
-    public static net.minecraft.network.protocol.game.ClientboundPlayerPositionPacket.RelativeArgument toNmsRelativeFlag(io.papermc.paper.entity.RelativeTeleportFlag apiFlag) {
+    public static net.minecraft.network.protocol.game.ClientboundPlayerPositionPacket.@NotNull RelativeArgument toNmsRelativeFlag(io.papermc.paper.entity.@NotNull RelativeTeleportFlag apiFlag) {
         return switch (apiFlag) {
             case X -> net.minecraft.network.protocol.game.ClientboundPlayerPositionPacket.RelativeArgument.X;
             case Y -> net.minecraft.network.protocol.game.ClientboundPlayerPositionPacket.RelativeArgument.Y;
@@ -1220,7 +1220,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
         };
     }
 
-    public static io.papermc.paper.entity.RelativeTeleportFlag toApiRelativeFlag(net.minecraft.network.protocol.game.ClientboundPlayerPositionPacket.RelativeArgument nmsFlag) {
+    public static io.papermc.paper.entity.@NotNull RelativeTeleportFlag toApiRelativeFlag(net.minecraft.network.protocol.game.ClientboundPlayerPositionPacket.@NotNull RelativeArgument nmsFlag) {
         return switch (nmsFlag) {
             case X -> io.papermc.paper.entity.RelativeTeleportFlag.X;
             case Y -> io.papermc.paper.entity.RelativeTeleportFlag.Y;
@@ -1231,7 +1231,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
     }
 
     @Override
-    public boolean teleport(Location location, org.bukkit.event.player.PlayerTeleportEvent.TeleportCause cause, boolean ignorePassengers, boolean dismount, io.papermc.paper.entity.RelativeTeleportFlag... flags) {
+    public boolean teleport(@org.jetbrains.annotations.Nullable Location location, org.bukkit.event.player.PlayerTeleportEvent.@NotNull TeleportCause cause, boolean ignorePassengers, boolean dismount, io.papermc.paper.entity.RelativeTeleportFlag @NotNull ... flags) {
         var relativeArguments = java.util.EnumSet.noneOf(net.minecraft.network.protocol.game.ClientboundPlayerPositionPacket.RelativeArgument.class);
         for (io.papermc.paper.entity.RelativeTeleportFlag flag : flags) {
             relativeArguments.add(toNmsRelativeFlag(flag));
@@ -1377,7 +1377,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
     }
 
     @Override
-    public void setBedSpawnLocation(Location location, boolean override) {
+    public void setBedSpawnLocation(@org.jetbrains.annotations.Nullable Location location, boolean override) {
         if (location == null) {
             this.getHandle().setRespawnPosition(null, null, 0.0F, override, false, com.destroystokyo.paper.event.player.PlayerSetSpawnEvent.Cause.PLUGIN); // Paper - PlayerSetSpawnEvent
         } else {
@@ -1386,7 +1386,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
     }
 
     @Override
-    public Location getBedLocation() {
+    public @NotNull Location getBedLocation() {
         Preconditions.checkState(isSleeping(), "Not sleeping");
 
         BlockPos bed = this.getHandle().getRespawnPosition();
@@ -1394,13 +1394,13 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
     }
 
     @Override
-    public boolean hasDiscoveredRecipe(NamespacedKey recipe) {
+    public boolean hasDiscoveredRecipe(@org.jetbrains.annotations.Nullable NamespacedKey recipe) {
         Preconditions.checkArgument(recipe != null, "recipe cannot be null");
         return this.getHandle().getRecipeBook().contains(CraftNamespacedKey.toMinecraft(recipe));
     }
 
     @Override
-    public Set<NamespacedKey> getDiscoveredRecipes() {
+    public @NotNull Set<NamespacedKey> getDiscoveredRecipes() {
         ImmutableSet.Builder<NamespacedKey> bukkitRecipeKeys = ImmutableSet.builder();
         this.getHandle().getRecipeBook().known.forEach(key -> bukkitRecipeKeys.add(CraftNamespacedKey.fromMinecraft(key)));
         return bukkitRecipeKeys.build();
@@ -1523,7 +1523,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
     }
 
     @Override
-    public void setPlayerWeather(WeatherType type) {
+    public void setPlayerWeather(@NotNull WeatherType type) {
         this.getHandle().setPlayerWeather(type, true);
     }
 
@@ -1557,7 +1557,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
     }
 
     @Override
-    public void setGameMode(GameMode mode) {
+    public void setGameMode(@org.jetbrains.annotations.Nullable GameMode mode) {
         if (this.getHandle().connection == null) return;
 
         if (mode == null) {
@@ -1568,7 +1568,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
     }
 
     @Override
-    public GameMode getGameMode() {
+    public @NotNull GameMode getGameMode() {
         return GameMode.getByValue(this.getHandle().gameMode.getGameModeForPlayer().getId());
     }
 
@@ -1679,24 +1679,24 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
 
     @Override
     @Deprecated
-    public void hidePlayer(Player player) {
+    public void hidePlayer(@NotNull Player player) {
         this.hideEntity0(null, player);
     }
 
     @Override
-    public void hidePlayer(Plugin plugin, Player player) {
+    public void hidePlayer(@NotNull Plugin plugin, @NotNull Player player) {
         this.hideEntity(plugin, player);
     }
 
     @Override
-    public void hideEntity(Plugin plugin, org.bukkit.entity.Entity entity) {
+    public void hideEntity(@NotNull Plugin plugin, org.bukkit.entity.@NotNull Entity entity) {
         Validate.notNull(plugin, "Plugin cannot be null");
         Validate.isTrue(plugin.isEnabled(), "Plugin attempted to hide player while disabled");
 
         this.hideEntity0(plugin, entity);
     }
 
-    private void hideEntity0(@Nullable Plugin plugin, org.bukkit.entity.Entity entity) {
+    private void hideEntity0(@Nullable Plugin plugin, org.bukkit.entity.@NotNull Entity entity) {
         Validate.notNull(entity, "hidden entity cannot be null");
         if (this.getHandle().connection == null) return;
         if (this.equals(entity)) return;
@@ -1719,7 +1719,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
 
         server.getPluginManager().callEvent(new PlayerHideEntityEvent(this, entity));
     }
-    private void unregisterEntity(Entity other) {
+    private void unregisterEntity(@NotNull Entity other) {
         // Paper end
         ChunkMap tracker = ((ServerLevel) this.getHandle().level).getChunkSource().chunkMap;
         ChunkMap.TrackedEntity entry = tracker.entityMap.get(other.getId());
@@ -1738,24 +1738,24 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
 
     @Override
     @Deprecated
-    public void showPlayer(Player player) {
+    public void showPlayer(@NotNull Player player) {
         this.showEntity0(null, player);
     }
 
     @Override
-    public void showPlayer(Plugin plugin, Player player) {
+    public void showPlayer(Plugin plugin, @NotNull Player player) {
         this.showEntity(plugin, player);
     }
 
     @Override
-    public void showEntity(Plugin plugin, org.bukkit.entity.Entity entity) {
+    public void showEntity(Plugin plugin, org.bukkit.entity.@NotNull Entity entity) {
         Validate.notNull(plugin, "Plugin cannot be null");
         // Don't require that plugin be enabled. A plugin must be allowed to call
         // showPlayer during its onDisable() method.
         this.showEntity0(plugin, entity);
     }
 
-    private void showEntity0(@Nullable Plugin plugin, org.bukkit.entity.Entity entity) {
+    private void showEntity0(@Nullable Plugin plugin, org.bukkit.entity.@NotNull Entity entity) {
         Validate.notNull(entity, "shown entity cannot be null");
         if (this.getHandle().connection == null) return;
         if (this.equals(entity)) return;
@@ -1791,7 +1791,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
         }
     }
     // Paper start
-    private void reregisterPlayer(ServerPlayer player) {
+    private void reregisterPlayer(@NotNull ServerPlayer player) {
         if (!hiddenEntities.containsKey(player.getUUID())) {
             unregisterEntity(player);
             registerEntity(player);
@@ -1809,7 +1809,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
         }
         refreshPlayer();
     }
-    public com.destroystokyo.paper.profile.PlayerProfile getPlayerProfile() {
+    public com.destroystokyo.paper.profile.@NotNull PlayerProfile getPlayerProfile() {
         return new com.destroystokyo.paper.profile.CraftPlayerProfile(this).clone();
     }
 
@@ -1835,7 +1835,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
     }
     // Paper end
 
-    public void onEntityRemove(Entity entity) {
+    public void onEntityRemove(@NotNull Entity entity) {
         this.hiddenEntities.remove(entity.getUUID());
     }
 
@@ -1845,12 +1845,12 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
     }
 
     @Override
-    public boolean canSee(org.bukkit.entity.Entity entity) {
+    public boolean canSee(org.bukkit.entity.@NotNull Entity entity) {
         return !this.hiddenEntities.containsKey(entity.getUniqueId());
     }
 
     @Override
-    public Map<String, Object> serialize() {
+    public @NotNull Map<String, Object> serialize() {
         Map<String, Object> result = new LinkedHashMap<String, Object>();
 
         result.put("name", getName());
@@ -1873,7 +1873,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
     }
 
     @Override
-    public String toString() {
+    public @NotNull String toString() {
         return "CraftPlayer{" + "name=" + getName() + '}';
     }
 
@@ -1916,7 +1916,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
     }
     // Paper end
 
-    public void readExtraData(CompoundTag nbttagcompound) {
+    public void readExtraData(@NotNull CompoundTag nbttagcompound) {
         this.hasPlayedBefore = true;
         if (nbttagcompound.contains("bukkit")) {
             CompoundTag data = nbttagcompound.getCompound("bukkit");
@@ -1937,7 +1937,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
         }
     }
 
-    public void setExtraData(CompoundTag nbttagcompound) {
+    public void setExtraData(@NotNull CompoundTag nbttagcompound) {
         this.lastSaveTime = System.currentTimeMillis(); // Paper
 
         if (!nbttagcompound.contains("bukkit")) {
@@ -1972,7 +1972,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
     }
 
     @Override
-    public void abandonConversation(Conversation conversation) {
+    public void abandonConversation(@NotNull Conversation conversation) {
         this.conversationTracker.abandonConversation(conversation, new ConversationAbandonedEvent(conversation, new ManuallyAbandonedConversationCanceller()));
     }
 
@@ -1992,7 +1992,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
     }
 
     @Override
-    public void sendPluginMessage(Plugin source, String channel, byte[] message) {
+    public void sendPluginMessage(@NotNull Plugin source, @NotNull String channel, byte @NotNull [] message) {
         StandardMessenger.validatePluginMessage(server.getMessenger(), source, channel, message);
         if (this.getHandle().connection == null) return;
 
@@ -2004,32 +2004,32 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
     }
 
     @Override
-    public void setTexturePack(String url) {
+    public void setTexturePack(@NotNull String url) {
         this.setResourcePack(url);
     }
 
     @Override
-    public void setResourcePack(String url) {
+    public void setResourcePack(@NotNull String url) {
         this.setResourcePack(url, (byte[]) null);
     }
 
     @Override
-    public void setResourcePack(String url, byte[] hash) {
+    public void setResourcePack(@NotNull String url, byte[] hash) {
         this.setResourcePack(url, hash, false);
     }
 
     @Override
-    public void setResourcePack(String url, byte[] hash, String prompt) {
+    public void setResourcePack(@NotNull String url, byte[] hash, String prompt) {
         this.setResourcePack(url, hash, prompt, false);
     }
 
     @Override
-    public void setResourcePack(String url, byte[] hash, boolean force) {
+    public void setResourcePack(@NotNull String url, byte[] hash, boolean force) {
         this.setResourcePack(url, hash, (String) null, force);
     }
 
     @Override
-    public void setResourcePack(String url, byte[] hash, String prompt, boolean force) {
+    public void setResourcePack(@NotNull String url, byte @org.jetbrains.annotations.Nullable [] hash, String prompt, boolean force) {
         Validate.notNull(url, "Resource pack URL cannot be null");
 
         if (hash != null) {
@@ -2043,7 +2043,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
 
     // Paper start
     @Override
-    public void setResourcePack(String url, byte[] hashBytes, net.kyori.adventure.text.Component prompt, boolean force) {
+    public void setResourcePack(@NotNull String url, byte @org.jetbrains.annotations.Nullable [] hashBytes, net.kyori.adventure.text.Component prompt, boolean force) {
         Validate.notNull(url, "Resource pack URL cannot be null");
         final String hash;
         if (hashBytes != null) {
@@ -2072,7 +2072,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
     }
 
     @Override
-    public Set<String> getListeningPluginChannels() {
+    public @NotNull Set<String> getListeningPluginChannels() {
         return ImmutableSet.copyOf(channels);
     }
 
@@ -2097,32 +2097,32 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
     }
 
     @Override
-    public EntityType getType() {
+    public @NotNull EntityType getType() {
         return EntityType.PLAYER;
     }
 
     @Override
-    public void setMetadata(String metadataKey, MetadataValue newMetadataValue) {
+    public void setMetadata(@NotNull String metadataKey, @NotNull MetadataValue newMetadataValue) {
         server.getPlayerMetadata().setMetadata(this, metadataKey, newMetadataValue);
     }
 
     @Override
-    public List<MetadataValue> getMetadata(String metadataKey) {
+    public @NotNull List<MetadataValue> getMetadata(@NotNull String metadataKey) {
         return server.getPlayerMetadata().getMetadata(this, metadataKey);
     }
 
     @Override
-    public boolean hasMetadata(String metadataKey) {
+    public boolean hasMetadata(@NotNull String metadataKey) {
         return server.getPlayerMetadata().hasMetadata(this, metadataKey);
     }
 
     @Override
-    public void removeMetadata(String metadataKey, Plugin owningPlugin) {
+    public void removeMetadata(@NotNull String metadataKey, @NotNull Plugin owningPlugin) {
         server.getPlayerMetadata().removeMetadata(this, metadataKey, owningPlugin);
     }
 
     @Override
-    public boolean setWindowProperty(Property prop, int value) {
+    public boolean setWindowProperty(@NotNull Property prop, int value) {
         AbstractContainerMenu container = this.getHandle().containerMenu;
         if (container.getBukkitView().getType() != prop.getType()) {
             return false;
@@ -2236,7 +2236,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
     }
 
     @Override
-    public CraftScoreboard getScoreboard() {
+    public @NotNull CraftScoreboard getScoreboard() {
         return this.server.getScoreboardManager().getPlayerBoard(this);
     }
 
@@ -2334,7 +2334,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
     }
     // Paper end
     
-    public void injectScaledMaxHealth(Collection<AttributeInstance> collection, boolean force) {
+    public void injectScaledMaxHealth(@NotNull Collection<AttributeInstance> collection, boolean force) {
         if (!this.scaledHealth && !force) {
             return;
         }
@@ -2364,7 +2364,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
     }
 
     @Override
-    public void setSpectatorTarget(org.bukkit.entity.Entity entity) {
+    public void setSpectatorTarget(org.bukkit.entity.@org.jetbrains.annotations.Nullable Entity entity) {
         Preconditions.checkArgument(this.getGameMode() == GameMode.SPECTATOR, "Player must be in spectator mode");
         this.getHandle().setCamera((entity == null) ? null : ((CraftEntity) entity).getHandle());
     }
@@ -2375,7 +2375,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
     }
 
     @Override
-    public void sendTitle(String title, String subtitle, int fadeIn, int stay, int fadeOut) {
+    public void sendTitle(@org.jetbrains.annotations.Nullable String title, @org.jetbrains.annotations.Nullable String subtitle, int fadeIn, int stay, int fadeOut) {
         ClientboundSetTitlesAnimationPacket times = new ClientboundSetTitlesAnimationPacket(fadeIn, stay, fadeOut);
         this.getHandle().connection.send(times);
 
@@ -2397,62 +2397,62 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
     }
 
     @Override
-    public void spawnParticle(Particle particle, Location location, int count) {
+    public void spawnParticle(@NotNull Particle particle, @NotNull Location location, int count) {
         this.spawnParticle(particle, location.getX(), location.getY(), location.getZ(), count);
     }
 
     @Override
-    public void spawnParticle(Particle particle, double x, double y, double z, int count) {
+    public void spawnParticle(@NotNull Particle particle, double x, double y, double z, int count) {
         this.spawnParticle(particle, x, y, z, count, null);
     }
 
     @Override
-    public <T> void spawnParticle(Particle particle, Location location, int count, T data) {
+    public <T> void spawnParticle(@NotNull Particle particle, @NotNull Location location, int count, T data) {
         this.spawnParticle(particle, location.getX(), location.getY(), location.getZ(), count, data);
     }
 
     @Override
-    public <T> void spawnParticle(Particle particle, double x, double y, double z, int count, T data) {
+    public <T> void spawnParticle(@NotNull Particle particle, double x, double y, double z, int count, T data) {
         this.spawnParticle(particle, x, y, z, count, 0, 0, 0, data);
     }
 
     @Override
-    public void spawnParticle(Particle particle, Location location, int count, double offsetX, double offsetY, double offsetZ) {
+    public void spawnParticle(@NotNull Particle particle, @NotNull Location location, int count, double offsetX, double offsetY, double offsetZ) {
         this.spawnParticle(particle, location.getX(), location.getY(), location.getZ(), count, offsetX, offsetY, offsetZ);
     }
 
     @Override
-    public void spawnParticle(Particle particle, double x, double y, double z, int count, double offsetX, double offsetY, double offsetZ) {
+    public void spawnParticle(@NotNull Particle particle, double x, double y, double z, int count, double offsetX, double offsetY, double offsetZ) {
         this.spawnParticle(particle, x, y, z, count, offsetX, offsetY, offsetZ, null);
     }
 
     @Override
-    public <T> void spawnParticle(Particle particle, Location location, int count, double offsetX, double offsetY, double offsetZ, T data) {
+    public <T> void spawnParticle(@NotNull Particle particle, @NotNull Location location, int count, double offsetX, double offsetY, double offsetZ, T data) {
         this.spawnParticle(particle, location.getX(), location.getY(), location.getZ(), count, offsetX, offsetY, offsetZ, data);
     }
 
     @Override
-    public <T> void spawnParticle(Particle particle, double x, double y, double z, int count, double offsetX, double offsetY, double offsetZ, T data) {
+    public <T> void spawnParticle(@NotNull Particle particle, double x, double y, double z, int count, double offsetX, double offsetY, double offsetZ, T data) {
         this.spawnParticle(particle, x, y, z, count, offsetX, offsetY, offsetZ, 1, data);
     }
 
     @Override
-    public void spawnParticle(Particle particle, Location location, int count, double offsetX, double offsetY, double offsetZ, double extra) {
+    public void spawnParticle(@NotNull Particle particle, @NotNull Location location, int count, double offsetX, double offsetY, double offsetZ, double extra) {
         this.spawnParticle(particle, location.getX(), location.getY(), location.getZ(), count, offsetX, offsetY, offsetZ, extra);
     }
 
     @Override
-    public void spawnParticle(Particle particle, double x, double y, double z, int count, double offsetX, double offsetY, double offsetZ, double extra) {
+    public void spawnParticle(@NotNull Particle particle, double x, double y, double z, int count, double offsetX, double offsetY, double offsetZ, double extra) {
         this.spawnParticle(particle, x, y, z, count, offsetX, offsetY, offsetZ, extra, null);
     }
 
     @Override
-    public <T> void spawnParticle(Particle particle, Location location, int count, double offsetX, double offsetY, double offsetZ, double extra, T data) {
+    public <T> void spawnParticle(@NotNull Particle particle, @NotNull Location location, int count, double offsetX, double offsetY, double offsetZ, double extra, T data) {
         this.spawnParticle(particle, location.getX(), location.getY(), location.getZ(), count, offsetX, offsetY, offsetZ, extra, data);
     }
 
     @Override
-    public <T> void spawnParticle(Particle particle, double x, double y, double z, int count, double offsetX, double offsetY, double offsetZ, double extra, T data) {
+    public <T> void spawnParticle(@NotNull Particle particle, double x, double y, double z, int count, double offsetX, double offsetY, double offsetZ, double extra, @org.jetbrains.annotations.Nullable T data) {
         if (data != null && !particle.getDataType().isInstance(data)) {
             throw new IllegalArgumentException("data should be " + particle.getDataType() + " got " + data.getClass());
         }
@@ -2462,7 +2462,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
     }
 
     @Override
-    public org.bukkit.advancement.AdvancementProgress getAdvancementProgress(org.bukkit.advancement.Advancement advancement) {
+    public org.bukkit.advancement.@NotNull AdvancementProgress getAdvancementProgress(org.bukkit.advancement.@org.jetbrains.annotations.Nullable Advancement advancement) {
         Preconditions.checkArgument(advancement != null, "advancement");
 
         CraftAdvancement craft = (CraftAdvancement) advancement;
@@ -2479,7 +2479,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
 
     // Paper start
     @Override
-    public java.util.Locale locale() {
+    public java.util.@NotNull Locale locale() {
         return getHandle().adventure$locale;
     }
     // Paper end
@@ -2489,7 +2489,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
     }
 
     @Override
-    public String getLocale() {
+    public @NotNull String getLocale() {
         // Paper start - Locale change event
         final String locale = this.getHandle().locale;
         return locale != null ? locale : "en_us";
@@ -2517,7 +2517,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
     }
 
     @Override
-    public void setResourcePack(@NotNull String url, @NotNull String hash, boolean required, net.kyori.adventure.text.Component resourcePackPrompt) {
+    public void setResourcePack(@NotNull String url, @NotNull String hash, boolean required, net.kyori.adventure.text.@org.jetbrains.annotations.Nullable Component resourcePackPrompt) {
         Validate.notNull(url, "Resource pack URL cannot be null");
         Validate.notNull(hash, "Hash cannot be null");
         net.minecraft.network.chat.Component promptComponent = resourcePackPrompt != null ?
@@ -2554,7 +2554,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
     }
 
     @Override
-    public void openBook(ItemStack book) {
+    public void openBook(@NotNull ItemStack book) {
         Validate.isTrue(book != null, "book == null");
         Validate.isTrue(book.getType() == Material.WRITTEN_BOOK, "Book must be Material.WRITTEN_BOOK");
 
@@ -2565,7 +2565,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
     }
 
     @Override
-    public void openSign(Sign sign) {
+    public void openSign(@NotNull Sign sign) {
         CraftSign.openSign(sign, this);
     }
 
@@ -2583,12 +2583,12 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
 
     // Paper start
     @Override
-    public net.kyori.adventure.text.Component displayName() {
+    public net.kyori.adventure.text.@NotNull Component displayName() {
         return this.getHandle().adventure$displayName;
     }
 
     @Override
-    public void displayName(final net.kyori.adventure.text.Component displayName) {
+    public void displayName(final net.kyori.adventure.text.@org.jetbrains.annotations.Nullable Component displayName) {
         this.getHandle().adventure$displayName = displayName != null ? displayName : net.kyori.adventure.text.Component.text(this.getName());
         this.getHandle().displayName = null;
     }
@@ -2646,14 +2646,14 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
 
     @Deprecated(forRemoval = true)
     @Override
-    public void sendMessage(final net.kyori.adventure.identity.Identity identity, final net.kyori.adventure.text.Component message, final net.kyori.adventure.audience.MessageType type) {
+    public void sendMessage(final net.kyori.adventure.identity.Identity identity, final net.kyori.adventure.text.@NotNull Component message, final net.kyori.adventure.audience.MessageType type) {
         if (getHandle().connection == null) return;
         final net.minecraft.core.Registry<net.minecraft.network.chat.ChatType> chatTypeRegistry = this.getHandle().level.registryAccess().registryOrThrow(net.minecraft.core.registries.Registries.CHAT_TYPE);
         this.getHandle().connection.send(new net.minecraft.network.protocol.game.ClientboundSystemChatPacket(message, false));
     }
 
     @Override
-    public void sendActionBar(final net.kyori.adventure.text.Component message) {
+    public void sendActionBar(final net.kyori.adventure.text.@NotNull Component message) {
         final net.minecraft.network.protocol.game.ClientboundSetActionBarTextPacket packet = new net.minecraft.network.protocol.game.ClientboundSetActionBarTextPacket((net.minecraft.network.chat.Component) null);
         packet.adventure$text = message;
         this.getHandle().connection.send(packet);
@@ -2688,7 +2688,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
     }
 
     @Override
-    public void showTitle(final net.kyori.adventure.title.Title title) {
+    public void showTitle(final net.kyori.adventure.title.@NotNull Title title) {
         final ServerGamePacketListenerImpl connection = this.getHandle().connection;
         final net.kyori.adventure.title.Title.Times times = title.times();
         if (times != null) {
@@ -2722,7 +2722,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
         }
     }
 
-    private static int ticks(final java.time.Duration duration) {
+    private static int ticks(final java.time.@org.jetbrains.annotations.Nullable Duration duration) {
         if (duration == null) {
             return -1;
         }
@@ -2737,23 +2737,23 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
     // resetTitle implemented above
 
     @Override
-    public void showBossBar(final net.kyori.adventure.bossbar.BossBar bar) {
+    public void showBossBar(final net.kyori.adventure.bossbar.@NotNull BossBar bar) {
         ((net.kyori.adventure.bossbar.HackyBossBarPlatformBridge) bar).paper$playerShow(this);
     }
 
     @Override
-    public void hideBossBar(final net.kyori.adventure.bossbar.BossBar bar) {
+    public void hideBossBar(final net.kyori.adventure.bossbar.@NotNull BossBar bar) {
         ((net.kyori.adventure.bossbar.HackyBossBarPlatformBridge) bar).paper$playerHide(this);
     }
 
     @Override
-    public void playSound(final net.kyori.adventure.sound.Sound sound) {
+    public void playSound(final net.kyori.adventure.sound.@NotNull Sound sound) {
         final Vec3 pos = this.getHandle().position();
         this.playSound(sound, pos.x, pos.y, pos.z);
     }
 
     @Override
-    public void playSound(final net.kyori.adventure.sound.Sound sound, final double x, final double y, final double z) {
+    public void playSound(final net.kyori.adventure.sound.@NotNull Sound sound, final double x, final double y, final double z) {
         final long seed = sound.seed().orElseGet(this.getHandle().getRandom()::nextLong);
         final ResourceLocation name = io.papermc.paper.adventure.PaperAdventure.asVanilla(sound.name());
         final java.util.Optional<net.minecraft.sounds.SoundEvent> event = BuiltInRegistries.SOUND_EVENT.getOptional(name);
@@ -2769,7 +2769,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
     }
 
     @Override
-    public void playSound(final net.kyori.adventure.sound.Sound sound, final net.kyori.adventure.sound.Sound.Emitter emitter) {
+    public void playSound(final net.kyori.adventure.sound.@NotNull Sound sound, final net.kyori.adventure.sound.Sound.Emitter emitter) {
         final Entity entity;
         if (emitter == net.kyori.adventure.sound.Sound.Emitter.self()) {
             entity = this.getHandle();
@@ -2793,7 +2793,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
     }
 
     @Override
-    public void stopSound(final net.kyori.adventure.sound.SoundStop stop) {
+    public void stopSound(final net.kyori.adventure.sound.@NotNull SoundStop stop) {
         this.getHandle().connection.send(new ClientboundStopSoundPacket(
             io.papermc.paper.adventure.PaperAdventure.asVanillaNullable(stop.sound()),
             io.papermc.paper.adventure.PaperAdventure.asVanillaNullable(stop.source())
@@ -2801,7 +2801,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
     }
 
     @Override
-    public void openBook(final net.kyori.adventure.inventory.Book book) {
+    public void openBook(final net.kyori.adventure.inventory.@NotNull Book book) {
         final java.util.Locale locale = this.getHandle().adventure$locale;
         final net.minecraft.world.item.ItemStack item = io.papermc.paper.adventure.PaperAdventure.asItemStack(book, locale);
         final ServerPlayer player = this.getHandle();
@@ -2815,7 +2815,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
     }
 
     @Override
-    public net.kyori.adventure.pointer.Pointers pointers() {
+    public net.kyori.adventure.pointer.@NotNull Pointers pointers() {
         if (this.adventure$pointers == null) {
             this.adventure$pointers = net.kyori.adventure.pointer.Pointers.builder()
                 .withDynamic(net.kyori.adventure.identity.Identity.DISPLAY_NAME, this::displayName)
@@ -2858,7 +2858,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
     {
 
         @Override
-        public InetSocketAddress getRawAddress()
+        public @NotNull InetSocketAddress getRawAddress()
         {
             return (InetSocketAddress) CraftPlayer.this.getHandle().connection.connection.getRawAddress();
         }
@@ -2883,7 +2883,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
         }
 
         @Override
-        public Set<Player> getHiddenPlayers()
+        public @NotNull Set<Player> getHiddenPlayers()
         {
             Set<Player> ret = new HashSet<Player>();
             for ( UUID u : CraftPlayer.this.hiddenEntities.keySet() )
@@ -2934,7 +2934,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
         }
 
         @Override
-        public void sendMessage(net.md_5.bungee.api.ChatMessageType position, UUID sender, BaseComponent... components) {
+        public void sendMessage(net.md_5.bungee.api.ChatMessageType position, UUID sender, BaseComponent @NotNull ... components) {
             if ( CraftPlayer.this.getHandle().connection == null ) return;
 
             CraftPlayer.this.getHandle().connection.send(new net.minecraft.network.protocol.game.ClientboundSystemChatPacket(components, position == net.md_5.bungee.api.ChatMessageType.ACTION_BAR));
@@ -2998,7 +2998,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
     }
     // Paper end
 
-    public Player.Spigot spigot()
+    public Player.@NotNull Spigot spigot()
     {
         return this.spigot;
     }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftPolarBear.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftPolarBear.java
index 30a0eac179c86b0fe94a2a40b5bfcd3eee01e53b..e786a1622ff727730dd80aa785d78d9a599a1584 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftPolarBear.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftPolarBear.java
@@ -3,6 +3,8 @@ package org.bukkit.craftbukkit.entity;
 import org.bukkit.craftbukkit.CraftServer;
 import org.bukkit.entity.EntityType;
 import org.bukkit.entity.PolarBear;
+import org.jetbrains.annotations.NotNull;
+
 
 public class CraftPolarBear extends CraftAnimals implements PolarBear {
 
@@ -15,12 +17,12 @@ public class CraftPolarBear extends CraftAnimals implements PolarBear {
     }
 
     @Override
-    public String toString() {
+    public @NotNull String toString() {
         return "CraftPolarBear";
     }
 
     @Override
-    public EntityType getType() {
+    public @NotNull EntityType getType() {
         return EntityType.POLAR_BEAR;
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftPufferFish.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftPufferFish.java
index bb9722a2cf5f05d1488f7fec2851644ea3e8b975..313d94dbb5eb54011b5e8ec938507217044293c5 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftPufferFish.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftPufferFish.java
@@ -4,6 +4,8 @@ import net.minecraft.world.entity.animal.Pufferfish;
 import org.bukkit.craftbukkit.CraftServer;
 import org.bukkit.entity.EntityType;
 import org.bukkit.entity.PufferFish;
+import org.jetbrains.annotations.NotNull;
+
 
 public class CraftPufferFish extends CraftFish implements PufferFish {
 
@@ -27,12 +29,12 @@ public class CraftPufferFish extends CraftFish implements PufferFish {
     }
 
     @Override
-    public String toString() {
+    public @NotNull String toString() {
         return "CraftPufferFish";
     }
 
     @Override
-    public EntityType getType() {
+    public @NotNull EntityType getType() {
         return EntityType.PUFFERFISH;
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftRabbit.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftRabbit.java
index 3cb4860fea30bfaf2147b4f29a34336b6e417d6c..0237f29a8533af229bc0263292016923d1a097e1 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftRabbit.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftRabbit.java
@@ -7,6 +7,9 @@ import org.bukkit.craftbukkit.CraftWorld;
 import org.bukkit.entity.EntityType;
 import org.bukkit.entity.Rabbit;
 import org.bukkit.entity.Rabbit.Type;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 public class CraftRabbit extends CraftAnimals implements Rabbit {
 
@@ -20,22 +23,22 @@ public class CraftRabbit extends CraftAnimals implements Rabbit {
     }
 
     @Override
-    public String toString() {
+    public @NotNull String toString() {
         return "CraftRabbit{RabbitType=" + this.getRabbitType() + "}";
     }
 
     @Override
-    public EntityType getType() {
+    public @NotNull EntityType getType() {
         return EntityType.RABBIT;
     }
 
     @Override
-    public Type getRabbitType() {
+    public @NotNull Type getRabbitType() {
         return Type.values()[this.getHandle().getVariant().ordinal()];
     }
 
     @Override
-    public void setRabbitType(Type type) {
+    public void setRabbitType(@NotNull Type type) {
         net.minecraft.world.entity.animal.Rabbit entity = this.getHandle();
         if (this.getRabbitType() == Type.THE_KILLER_BUNNY) {
             // Reset goals and target finders.
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftRaider.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftRaider.java
index e24eec79402843105a13de2bb8554260908057cc..6a4feb487a101bf6d1631e71dc349d5fd2a18894 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftRaider.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftRaider.java
@@ -8,6 +8,9 @@ import org.bukkit.craftbukkit.CraftServer;
 import org.bukkit.craftbukkit.CraftSound;
 import org.bukkit.craftbukkit.block.CraftBlock;
 import org.bukkit.entity.Raider;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 public abstract class CraftRaider extends CraftMonster implements Raider {
 
@@ -31,7 +34,7 @@ public abstract class CraftRaider extends CraftMonster implements Raider {
     }
 
     @Override
-    public void setPatrolTarget(Block block) {
+    public void setPatrolTarget(@Nullable Block block) {
         if (block == null) {
             this.getHandle().setPatrolTarget((BlockPos) null);
         } else {
@@ -62,7 +65,7 @@ public abstract class CraftRaider extends CraftMonster implements Raider {
     }
 
     @Override
-    public Sound getCelebrationSound() {
+    public @NotNull Sound getCelebrationSound() {
         return CraftSound.getBukkit(this.getHandle().getCelebrateSound());
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftRavager.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftRavager.java
index 84899714b96a7ed31ceee10373a62c37cab2ad2a..73d9a0220b425030f005f7b1d73953d16f6bd56a 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftRavager.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftRavager.java
@@ -3,6 +3,8 @@ package org.bukkit.craftbukkit.entity;
 import org.bukkit.craftbukkit.CraftServer;
 import org.bukkit.entity.EntityType;
 import org.bukkit.entity.Ravager;
+import org.jetbrains.annotations.NotNull;
+
 
 public class CraftRavager extends CraftRaider implements Ravager {
 
@@ -16,12 +18,12 @@ public class CraftRavager extends CraftRaider implements Ravager {
     }
 
     @Override
-    public EntityType getType() {
+    public @NotNull EntityType getType() {
         return EntityType.RAVAGER;
     }
 
     @Override
-    public String toString() {
+    public @NotNull String toString() {
         return "CraftRavager";
     }
     // Paper start - Missing Entity Behavior
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftSalmon.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftSalmon.java
index c888415f9b4f19db69667525e37279ab8be794f6..f56019a322a56bab1989e2a26ff21340ca8bb130 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftSalmon.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftSalmon.java
@@ -3,6 +3,8 @@ package org.bukkit.craftbukkit.entity;
 import org.bukkit.craftbukkit.CraftServer;
 import org.bukkit.entity.EntityType;
 import org.bukkit.entity.Salmon;
+import org.jetbrains.annotations.NotNull;
+
 
 public class CraftSalmon extends io.papermc.paper.entity.PaperSchoolableFish implements Salmon { // Paper - Schooling Fish API
 
@@ -16,12 +18,12 @@ public class CraftSalmon extends io.papermc.paper.entity.PaperSchoolableFish imp
     }
 
     @Override
-    public String toString() {
+    public @NotNull String toString() {
         return "CraftSalmon";
     }
 
     @Override
-    public EntityType getType() {
+    public @NotNull EntityType getType() {
         return EntityType.SALMON;
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftSheep.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftSheep.java
index ca8e35fbf04a54d60c3612f74be0b5fbf2ab7a56..7134f144e2b9f99054e47037e4c6716c656da22f 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftSheep.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftSheep.java
@@ -4,6 +4,8 @@ import org.bukkit.DyeColor;
 import org.bukkit.craftbukkit.CraftServer;
 import org.bukkit.entity.EntityType;
 import org.bukkit.entity.Sheep;
+import org.jetbrains.annotations.NotNull;
+
 
 public class CraftSheep extends CraftAnimals implements Sheep {
     public CraftSheep(CraftServer server, net.minecraft.world.entity.animal.Sheep entity) {
@@ -16,7 +18,7 @@ public class CraftSheep extends CraftAnimals implements Sheep {
     }
 
     @Override
-    public void setColor(DyeColor color) {
+    public void setColor(@NotNull DyeColor color) {
         this.getHandle().setColor(net.minecraft.world.item.DyeColor.byId(color.getWoolData()));
     }
 
@@ -36,12 +38,12 @@ public class CraftSheep extends CraftAnimals implements Sheep {
     }
 
     @Override
-    public String toString() {
+    public @NotNull String toString() {
         return "CraftSheep";
     }
 
     @Override
-    public EntityType getType() {
+    public @NotNull EntityType getType() {
         return EntityType.SHEEP;
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftShulker.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftShulker.java
index c68fdd093d515173e418319f89ecb6cea4eaf7ed..7ad8dbf1def31c8ed52139515992df1433e29c7d 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftShulker.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftShulker.java
@@ -7,6 +7,9 @@ import org.bukkit.craftbukkit.CraftServer;
 import org.bukkit.craftbukkit.block.CraftBlock;
 import org.bukkit.entity.EntityType;
 import org.bukkit.entity.Shulker;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 public class CraftShulker extends CraftGolem implements Shulker {
 
@@ -15,12 +18,12 @@ public class CraftShulker extends CraftGolem implements Shulker {
     }
 
     @Override
-    public String toString() {
+    public @NotNull String toString() {
         return "CraftShulker";
     }
 
     @Override
-    public EntityType getType() {
+    public @NotNull EntityType getType() {
         return EntityType.SHULKER;
     }
 
@@ -35,7 +38,7 @@ public class CraftShulker extends CraftGolem implements Shulker {
     }
 
     @Override
-    public void setColor(DyeColor color) {
+    public void setColor(@Nullable DyeColor color) {
         this.getHandle().getEntityData().set(net.minecraft.world.entity.monster.Shulker.DATA_COLOR_ID, (color == null) ? 16 : color.getWoolData());
     }
 
@@ -51,12 +54,12 @@ public class CraftShulker extends CraftGolem implements Shulker {
     }
 
     @Override
-    public BlockFace getAttachedFace() {
+    public @NotNull BlockFace getAttachedFace() {
         return CraftBlock.notchToBlockFace(this.getHandle().getAttachFace());
     }
 
     @Override
-    public void setAttachedFace(BlockFace face) {
+    public void setAttachedFace(@NotNull BlockFace face) {
         Preconditions.checkNotNull(face, "face cannot be null");
         Preconditions.checkArgument(face.isCartesian(), "%s is not a valid block face to attach a shulker to, a cartesian block face is expected", face);
         this.getHandle().setAttachFace(CraftBlock.blockFaceToNotch(face));
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftShulkerBullet.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftShulkerBullet.java
index ca8a9b2773d70a8800b2179b164ce33d7e2bdc5e..9700e5f1dc8cadd70de9404da2fe5e0838e9aad4 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftShulkerBullet.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftShulkerBullet.java
@@ -6,6 +6,9 @@ import org.bukkit.entity.Entity;
 import org.bukkit.entity.EntityType;
 import org.bukkit.entity.ShulkerBullet;
 import org.bukkit.projectiles.ProjectileSource;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 public class CraftShulkerBullet extends AbstractProjectile implements ShulkerBullet {
 
@@ -34,20 +37,20 @@ public class CraftShulkerBullet extends AbstractProjectile implements ShulkerBul
     }
 
     @Override
-    public void setTarget(org.bukkit.entity.Entity target) {
+    public void setTarget(org.bukkit.entity.@Nullable Entity target) {
         Preconditions.checkState(!this.getHandle().generation, "Cannot set target during world generation");
 
         this.getHandle().setTarget(target == null ? null : ((CraftEntity) target).getHandle());
     }
 
     @Override
-    public org.bukkit.util.Vector getTargetDelta() {
+    public org.bukkit.util.@NotNull Vector getTargetDelta() {
         net.minecraft.world.entity.projectile.ShulkerBullet bullet = this.getHandle();
         return new org.bukkit.util.Vector(bullet.targetDeltaX, bullet.targetDeltaY, bullet.targetDeltaZ);
     }
 
     @Override
-    public void setTargetDelta(org.bukkit.util.Vector vector) {
+    public void setTargetDelta(org.bukkit.util.@NotNull Vector vector) {
         net.minecraft.world.entity.projectile.ShulkerBullet bullet = this.getHandle();
         bullet.targetDeltaX = vector.getX();
         bullet.targetDeltaY = vector.getY();
@@ -60,7 +63,7 @@ public class CraftShulkerBullet extends AbstractProjectile implements ShulkerBul
     }
 
     @Override
-    public void setCurrentMovementDirection(org.bukkit.block.BlockFace movementDirection) {
+    public void setCurrentMovementDirection(org.bukkit.block.@NotNull BlockFace movementDirection) {
         this.getHandle().currentMoveDirection = org.bukkit.craftbukkit.block.CraftBlock.blockFaceToNotch(movementDirection);
     }
 
@@ -75,12 +78,12 @@ public class CraftShulkerBullet extends AbstractProjectile implements ShulkerBul
     }
 
     @Override
-    public String toString() {
+    public @NotNull String toString() {
         return "CraftShulkerBullet";
     }
 
     @Override
-    public EntityType getType() {
+    public @NotNull EntityType getType() {
         return EntityType.SHULKER_BULLET;
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftSilverfish.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftSilverfish.java
index 81624189cb533bb9de57dc985095bd497a9a068a..eb807f728c2f5e2a421c0813b27e2cad7bb5d61d 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftSilverfish.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftSilverfish.java
@@ -3,6 +3,8 @@ package org.bukkit.craftbukkit.entity;
 import org.bukkit.craftbukkit.CraftServer;
 import org.bukkit.entity.EntityType;
 import org.bukkit.entity.Silverfish;
+import org.jetbrains.annotations.NotNull;
+
 
 public class CraftSilverfish extends CraftMonster implements Silverfish {
     public CraftSilverfish(CraftServer server, net.minecraft.world.entity.monster.Silverfish entity) {
@@ -15,12 +17,12 @@ public class CraftSilverfish extends CraftMonster implements Silverfish {
     }
 
     @Override
-    public String toString() {
+    public @NotNull String toString() {
         return "CraftSilverfish";
     }
 
     @Override
-    public EntityType getType() {
+    public @NotNull EntityType getType() {
         return EntityType.SILVERFISH;
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftSizedFireball.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftSizedFireball.java
index 5d16db88c243279a581092c98d37027aa6731485..e8fc24bf5d7ed8cbcfd2ff572dbd7812256ad0e1 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftSizedFireball.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftSizedFireball.java
@@ -6,6 +6,8 @@ import org.bukkit.craftbukkit.CraftServer;
 import org.bukkit.craftbukkit.inventory.CraftItemStack;
 import org.bukkit.entity.SizedFireball;
 import org.bukkit.inventory.ItemStack;
+import org.jetbrains.annotations.NotNull;
+
 
 public class CraftSizedFireball extends CraftFireball implements SizedFireball {
 
@@ -14,7 +16,7 @@ public class CraftSizedFireball extends CraftFireball implements SizedFireball {
     }
 
     @Override
-    public ItemStack getDisplayItem() {
+    public @NotNull ItemStack getDisplayItem() {
         if (this.getHandle().getItemRaw().isEmpty()) {
             return new ItemStack(Material.FIRE_CHARGE);
         } else {
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftSkeleton.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftSkeleton.java
index 1737857424c5da885c46f39502cafd2a670d3be7..77c54298cb5f71a60a07be66a9aa378c4181d389 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftSkeleton.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftSkeleton.java
@@ -4,6 +4,8 @@ import com.google.common.base.Preconditions;
 import org.bukkit.craftbukkit.CraftServer;
 import org.bukkit.entity.EntityType;
 import org.bukkit.entity.Skeleton;
+import org.jetbrains.annotations.NotNull;
+
 
 public class CraftSkeleton extends CraftAbstractSkeleton implements Skeleton {
 
@@ -38,17 +40,17 @@ public class CraftSkeleton extends CraftAbstractSkeleton implements Skeleton {
     }
 
     @Override
-    public String toString() {
+    public @NotNull String toString() {
         return "CraftSkeleton";
     }
 
     @Override
-    public EntityType getType() {
+    public @NotNull EntityType getType() {
         return EntityType.SKELETON;
     }
 
     @Override
-    public SkeletonType getSkeletonType() {
+    public @NotNull SkeletonType getSkeletonType() {
        return SkeletonType.NORMAL;
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftSkeletonHorse.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftSkeletonHorse.java
index 78bc77d9cc5797fa8edd189167bb60b75b7f920e..97487f2ea7731aae209264f5a1b351e4b848f694 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftSkeletonHorse.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftSkeletonHorse.java
@@ -4,6 +4,8 @@ import org.bukkit.craftbukkit.CraftServer;
 import org.bukkit.entity.EntityType;
 import org.bukkit.entity.Horse.Variant;
 import org.bukkit.entity.SkeletonHorse;
+import org.jetbrains.annotations.NotNull;
+
 
 public class CraftSkeletonHorse extends CraftAbstractHorse implements SkeletonHorse {
 
@@ -12,17 +14,17 @@ public class CraftSkeletonHorse extends CraftAbstractHorse implements SkeletonHo
     }
 
     @Override
-    public String toString() {
+    public @NotNull String toString() {
         return "CraftSkeletonHorse";
     }
 
     @Override
-    public EntityType getType() {
+    public @NotNull EntityType getType() {
         return EntityType.SKELETON_HORSE;
     }
 
     @Override
-    public Variant getVariant() {
+    public @NotNull Variant getVariant() {
         return Variant.SKELETON_HORSE;
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftSlime.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftSlime.java
index 3c5326b1b4b18365e06292eca447778442201176..b7072e31e107fb41eaccdbcd94786e9250a72f18 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftSlime.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftSlime.java
@@ -3,6 +3,8 @@ package org.bukkit.craftbukkit.entity;
 import org.bukkit.craftbukkit.CraftServer;
 import org.bukkit.entity.EntityType;
 import org.bukkit.entity.Slime;
+import org.jetbrains.annotations.NotNull;
+
 
 public class CraftSlime extends CraftMob implements Slime {
 
@@ -31,7 +33,7 @@ public class CraftSlime extends CraftMob implements Slime {
     }
 
     @Override
-    public EntityType getType() {
+    public @NotNull EntityType getType() {
         return EntityType.SLIME;
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftSmallFireball.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftSmallFireball.java
index d8b4df1300791aaf310465ec1577b1b8c202901a..001881b0ecd5ec8122cfc1d77f413422e7b7cfe9 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftSmallFireball.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftSmallFireball.java
@@ -3,6 +3,8 @@ package org.bukkit.craftbukkit.entity;
 import org.bukkit.craftbukkit.CraftServer;
 import org.bukkit.entity.EntityType;
 import org.bukkit.entity.SmallFireball;
+import org.jetbrains.annotations.NotNull;
+
 
 public class CraftSmallFireball extends CraftSizedFireball implements SmallFireball {
     public CraftSmallFireball(CraftServer server, net.minecraft.world.entity.projectile.SmallFireball entity) {
@@ -15,12 +17,12 @@ public class CraftSmallFireball extends CraftSizedFireball implements SmallFireb
     }
 
     @Override
-    public String toString() {
+    public @NotNull String toString() {
         return "CraftSmallFireball";
     }
 
     @Override
-    public EntityType getType() {
+    public @NotNull EntityType getType() {
         return EntityType.SMALL_FIREBALL;
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftSnowball.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftSnowball.java
index b747aa0fb5821988ea851273559182997abf9931..2596668e0e4ee8bc0e285474ff9707522955adde 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftSnowball.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftSnowball.java
@@ -3,6 +3,8 @@ package org.bukkit.craftbukkit.entity;
 import org.bukkit.craftbukkit.CraftServer;
 import org.bukkit.entity.EntityType;
 import org.bukkit.entity.Snowball;
+import org.jetbrains.annotations.NotNull;
+
 
 public class CraftSnowball extends CraftThrowableProjectile implements Snowball {
     public CraftSnowball(CraftServer server, net.minecraft.world.entity.projectile.Snowball entity) {
@@ -15,12 +17,12 @@ public class CraftSnowball extends CraftThrowableProjectile implements Snowball
     }
 
     @Override
-    public String toString() {
+    public @NotNull String toString() {
         return "CraftSnowball";
     }
 
     @Override
-    public EntityType getType() {
+    public @NotNull EntityType getType() {
         return EntityType.SNOWBALL;
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftSnowman.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftSnowman.java
index 659e2959c5330e4764ea1edc7f8de9f464f9ff52..c1d14e5bd39b9d1dce43047b72ba63292cb7f1c7 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftSnowman.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftSnowman.java
@@ -4,6 +4,8 @@ import net.minecraft.world.entity.animal.SnowGolem;
 import org.bukkit.craftbukkit.CraftServer;
 import org.bukkit.entity.EntityType;
 import org.bukkit.entity.Snowman;
+import org.jetbrains.annotations.NotNull;
+
 
 public class CraftSnowman extends CraftGolem implements Snowman, com.destroystokyo.paper.entity.CraftRangedEntity<SnowGolem> { // Paper
     public CraftSnowman(CraftServer server, SnowGolem entity) {
@@ -26,12 +28,12 @@ public class CraftSnowman extends CraftGolem implements Snowman, com.destroystok
     }
 
     @Override
-    public String toString() {
+    public @NotNull String toString() {
         return "CraftSnowman";
     }
 
     @Override
-    public EntityType getType() {
+    public @NotNull EntityType getType() {
         return EntityType.SNOWMAN;
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftSpectralArrow.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftSpectralArrow.java
index 8aced77e9a3c1b5c24bfd9d95a651cca90fdf0e1..7c4be4be5e9a6fcdd0ee0690dd1d93265fe4ee38 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftSpectralArrow.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftSpectralArrow.java
@@ -3,6 +3,8 @@ package org.bukkit.craftbukkit.entity;
 import org.bukkit.craftbukkit.CraftServer;
 import org.bukkit.entity.EntityType;
 import org.bukkit.entity.SpectralArrow;
+import org.jetbrains.annotations.NotNull;
+
 
 public class CraftSpectralArrow extends CraftArrow implements SpectralArrow {
 
@@ -16,12 +18,12 @@ public class CraftSpectralArrow extends CraftArrow implements SpectralArrow {
     }
 
     @Override
-    public String toString() {
+    public @NotNull String toString() {
         return "CraftSpectralArrow";
     }
 
     @Override
-    public EntityType getType() {
+    public @NotNull EntityType getType() {
         return EntityType.SPECTRAL_ARROW;
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftSpellcaster.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftSpellcaster.java
index 525827f1747631fa108be7e1b7395b47d33aa397..3b01493c7be925de8a13e403766e85d26b3d7de7 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftSpellcaster.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftSpellcaster.java
@@ -5,6 +5,9 @@ import net.minecraft.world.entity.monster.SpellcasterIllager;
 import org.bukkit.craftbukkit.CraftServer;
 import org.bukkit.entity.Spellcaster;
 import org.bukkit.entity.Spellcaster.Spell;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 public class CraftSpellcaster extends CraftIllager implements Spellcaster {
 
@@ -18,27 +21,27 @@ public class CraftSpellcaster extends CraftIllager implements Spellcaster {
     }
 
     @Override
-    public String toString() {
+    public @NotNull String toString() {
         return "CraftSpellcaster";
     }
 
     @Override
-    public Spell getSpell() {
+    public @NotNull Spell getSpell() {
         return CraftSpellcaster.toBukkitSpell(this.getHandle().getCurrentSpell());
     }
 
     @Override
-    public void setSpell(Spell spell) {
+    public void setSpell(@Nullable Spell spell) {
         Preconditions.checkArgument(spell != null, "Use Spell.NONE");
 
         this.getHandle().setIsCastingSpell(CraftSpellcaster.toNMSSpell(spell));
     }
 
-    public static Spell toBukkitSpell(SpellcasterIllager.IllagerSpell spell) {
+    public static @NotNull Spell toBukkitSpell(SpellcasterIllager.@NotNull IllagerSpell spell) {
         return Spell.valueOf(spell.name());
     }
 
-    public static SpellcasterIllager.IllagerSpell toNMSSpell(Spell spell) {
+    public static SpellcasterIllager.@NotNull IllagerSpell toNMSSpell(@NotNull Spell spell) {
         return SpellcasterIllager.IllagerSpell.byId(spell.ordinal());
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftSpider.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftSpider.java
index 994d8d815aa110bd6ac9939a4ce78f1bbad2662f..1bb2ed717748019f996694ec372b44db3c47453a 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftSpider.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftSpider.java
@@ -3,6 +3,8 @@ package org.bukkit.craftbukkit.entity;
 import org.bukkit.craftbukkit.CraftServer;
 import org.bukkit.entity.EntityType;
 import org.bukkit.entity.Spider;
+import org.jetbrains.annotations.NotNull;
+
 
 public class CraftSpider extends CraftMonster implements Spider {
 
@@ -21,7 +23,7 @@ public class CraftSpider extends CraftMonster implements Spider {
     }
 
     @Override
-    public EntityType getType() {
+    public @NotNull EntityType getType() {
         return EntityType.SPIDER;
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftSquid.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftSquid.java
index 3c0faedaac8cb8d70c0c0767361ebc563a3f0581..75550de19acc03629137f6e3090abed1550fe50d 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftSquid.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftSquid.java
@@ -3,6 +3,8 @@ package org.bukkit.craftbukkit.entity;
 import org.bukkit.craftbukkit.CraftServer;
 import org.bukkit.entity.EntityType;
 import org.bukkit.entity.Squid;
+import org.jetbrains.annotations.NotNull;
+
 
 public class CraftSquid extends CraftWaterMob implements Squid {
 
@@ -21,7 +23,7 @@ public class CraftSquid extends CraftWaterMob implements Squid {
     }
 
     @Override
-    public EntityType getType() {
+    public @NotNull EntityType getType() {
         return EntityType.SQUID;
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftStray.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftStray.java
index e71314e71ea97024807b0e282d74e950d795c31f..a4cca4615948600697735a549cde2eb82d9557ab 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftStray.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftStray.java
@@ -4,6 +4,8 @@ import org.bukkit.craftbukkit.CraftServer;
 import org.bukkit.entity.EntityType;
 import org.bukkit.entity.Skeleton.SkeletonType;
 import org.bukkit.entity.Stray;
+import org.jetbrains.annotations.NotNull;
+
 
 public class CraftStray extends CraftAbstractSkeleton implements Stray {
 
@@ -12,17 +14,17 @@ public class CraftStray extends CraftAbstractSkeleton implements Stray {
     }
 
     @Override
-    public String toString() {
+    public @NotNull String toString() {
         return "CraftStray";
     }
 
     @Override
-    public EntityType getType() {
+    public @NotNull EntityType getType() {
         return EntityType.STRAY;
     }
 
     @Override
-    public SkeletonType getSkeletonType() {
+    public @NotNull SkeletonType getSkeletonType() {
         return SkeletonType.STRAY;
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftStrider.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftStrider.java
index 61bdfa1d50b228c27b7c719938a09e7715d303c3..a3f854df440c0bd2051866f92f4d76f89055fec8 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftStrider.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftStrider.java
@@ -5,6 +5,8 @@ import org.bukkit.Material;
 import org.bukkit.craftbukkit.CraftServer;
 import org.bukkit.entity.EntityType;
 import org.bukkit.entity.Strider;
+import org.jetbrains.annotations.NotNull;
+
 
 public class CraftStrider extends CraftAnimals implements Strider {
 
@@ -62,7 +64,7 @@ public class CraftStrider extends CraftAnimals implements Strider {
     }
 
     @Override
-    public Material getSteerMaterial() {
+    public @NotNull Material getSteerMaterial() {
         return Material.WARPED_FUNGUS_ON_A_STICK;
     }
 
@@ -72,12 +74,12 @@ public class CraftStrider extends CraftAnimals implements Strider {
     }
 
     @Override
-    public String toString() {
+    public @NotNull String toString() {
         return "CraftStrider";
     }
 
     @Override
-    public EntityType getType() {
+    public @NotNull EntityType getType() {
         return EntityType.STRIDER;
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftTNTPrimed.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftTNTPrimed.java
index 06540d3771949daff641e518219090559f363959..859658c86bca624d1cc68bb48731be1b9aa9b063 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftTNTPrimed.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftTNTPrimed.java
@@ -6,6 +6,8 @@ import org.bukkit.entity.Entity;
 import org.bukkit.entity.EntityType;
 import org.bukkit.entity.LivingEntity;
 import org.bukkit.entity.TNTPrimed;
+import org.jetbrains.annotations.NotNull;
+
 
 public class CraftTNTPrimed extends CraftEntity implements TNTPrimed {
 
@@ -49,12 +51,12 @@ public class CraftTNTPrimed extends CraftEntity implements TNTPrimed {
     }
 
     @Override
-    public String toString() {
+    public @NotNull String toString() {
         return "CraftTNTPrimed";
     }
 
     @Override
-    public EntityType getType() {
+    public @NotNull EntityType getType() {
         return EntityType.PRIMED_TNT;
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftTadpole.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftTadpole.java
index 43c2d820d164d36a28c4920d70aea2fe5096763a..ede32d0f40032c2d64c2c5f408cbec642bc48a88 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftTadpole.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftTadpole.java
@@ -3,6 +3,8 @@ package org.bukkit.craftbukkit.entity;
 import net.minecraft.world.entity.animal.frog.Tadpole;
 import org.bukkit.craftbukkit.CraftServer;
 import org.bukkit.entity.EntityType;
+import org.jetbrains.annotations.NotNull;
+
 
 public class CraftTadpole extends CraftFish implements org.bukkit.entity.Tadpole {
 
@@ -16,12 +18,12 @@ public class CraftTadpole extends CraftFish implements org.bukkit.entity.Tadpole
     }
 
     @Override
-    public String toString() {
+    public @NotNull String toString() {
         return "CraftTadpole";
     }
 
     @Override
-    public EntityType getType() {
+    public @NotNull EntityType getType() {
         return EntityType.TADPOLE;
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftTameableAnimal.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftTameableAnimal.java
index 428437970cac144be53cd0e30af7af0cd1ce603b..025d4214087c8a3675dc2688496a1bb70f33fab0 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftTameableAnimal.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftTameableAnimal.java
@@ -6,6 +6,9 @@ import org.bukkit.craftbukkit.CraftServer;
 import org.bukkit.entity.AnimalTamer;
 import org.bukkit.entity.Creature;
 import org.bukkit.entity.Tameable;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 public class CraftTameableAnimal extends CraftAnimals implements Tameable, Creature {
     public CraftTameableAnimal(CraftServer server, TamableAnimal entity) {
@@ -21,7 +24,7 @@ public class CraftTameableAnimal extends CraftAnimals implements Tameable, Creat
     public UUID getOwnerUniqueId() {
         return getOwnerUUID();
     }
-    public UUID getOwnerUUID() {
+    public @Nullable UUID getOwnerUUID() {
         try {
             return this.getHandle().getOwnerUUID();
         } catch (IllegalArgumentException ex) {
@@ -53,7 +56,7 @@ public class CraftTameableAnimal extends CraftAnimals implements Tameable, Creat
     }
 
     @Override
-    public void setOwner(AnimalTamer tamer) {
+    public void setOwner(@Nullable AnimalTamer tamer) {
         if (tamer != null) {
             this.setTamed(true);
             this.getHandle().setTarget(null, null, false);
@@ -82,7 +85,7 @@ public class CraftTameableAnimal extends CraftAnimals implements Tameable, Creat
     }
 
     @Override
-    public String toString() {
+    public @NotNull String toString() {
         return getClass().getSimpleName() + "{owner=" + this.getOwner() + ",tamed=" + this.isTamed() + "}";
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftThrowableProjectile.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftThrowableProjectile.java
index 989c5c499a52ad0777abecd14a1a9d5803ce1aaf..e5325cf8e620c6020f60a0937f818837de9a1431 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftThrowableProjectile.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftThrowableProjectile.java
@@ -5,6 +5,8 @@ import org.bukkit.craftbukkit.CraftServer;
 import org.bukkit.craftbukkit.inventory.CraftItemStack;
 import org.bukkit.entity.ThrowableProjectile;
 import org.bukkit.inventory.ItemStack;
+import org.jetbrains.annotations.NotNull;
+
 
 public abstract class CraftThrowableProjectile extends CraftProjectile implements ThrowableProjectile {
 
@@ -13,7 +15,7 @@ public abstract class CraftThrowableProjectile extends CraftProjectile implement
     }
 
     @Override
-    public ItemStack getItem() {
+    public @NotNull ItemStack getItem() {
         if (this.getHandle().getItemRaw().isEmpty()) {
             return CraftItemStack.asBukkitCopy(new net.minecraft.world.item.ItemStack(this.getHandle().getDefaultItemPublic()));
         } else {
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftThrownExpBottle.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftThrownExpBottle.java
index 00f8e1130620a3a167733ca3297cc90561cce1f0..5757d60c662d502b76849194282c06af4c40df05 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftThrownExpBottle.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftThrownExpBottle.java
@@ -4,6 +4,8 @@ import net.minecraft.world.entity.projectile.ThrownExperienceBottle;
 import org.bukkit.craftbukkit.CraftServer;
 import org.bukkit.entity.EntityType;
 import org.bukkit.entity.ThrownExpBottle;
+import org.jetbrains.annotations.NotNull;
+
 
 public class CraftThrownExpBottle extends CraftThrowableProjectile implements ThrownExpBottle {
     public CraftThrownExpBottle(CraftServer server, ThrownExperienceBottle entity) {
@@ -16,12 +18,12 @@ public class CraftThrownExpBottle extends CraftThrowableProjectile implements Th
     }
 
     @Override
-    public String toString() {
+    public @NotNull String toString() {
         return "EntityThrownExpBottle";
     }
 
     @Override
-    public EntityType getType() {
+    public @NotNull EntityType getType() {
         return EntityType.THROWN_EXP_BOTTLE;
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftThrownPotion.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftThrownPotion.java
index a926f4dc51821a05c28872dc90ad000fe8cb51f7..d4d08be31080d25b3adb19d77060440ae5760cea 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftThrownPotion.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftThrownPotion.java
@@ -13,6 +13,8 @@ import org.bukkit.entity.EntityType;
 import org.bukkit.entity.ThrownPotion;
 import org.bukkit.inventory.ItemStack;
 import org.bukkit.potion.PotionEffect;
+import org.jetbrains.annotations.NotNull;
+
 
 public class CraftThrownPotion extends CraftThrowableProjectile implements ThrownPotion, org.bukkit.entity.SplashPotion, org.bukkit.entity.LingeringPotion { // Paper - implement other classes to avoid violating spawn method generic contracts
     public CraftThrownPotion(CraftServer server, net.minecraft.world.entity.projectile.ThrownPotion entity) {
@@ -20,7 +22,7 @@ public class CraftThrownPotion extends CraftThrowableProjectile implements Throw
     }
 
     @Override
-    public Collection<PotionEffect> getEffects() {
+    public @NotNull Collection<PotionEffect> getEffects() {
         ImmutableList.Builder<PotionEffect> builder = ImmutableList.builder();
         for (MobEffectInstance effect : PotionUtils.getMobEffects(this.getHandle().getItemRaw())) {
             builder.add(CraftPotionUtil.toBukkit(effect));
@@ -29,12 +31,12 @@ public class CraftThrownPotion extends CraftThrowableProjectile implements Throw
     }
 
     @Override
-    public ItemStack getItem() {
+    public @NotNull ItemStack getItem() {
         return CraftItemStack.asBukkitCopy(this.getHandle().getItemRaw());
     }
 
     @Override
-    public void setItem(ItemStack item) {
+    public void setItem(@NotNull ItemStack item) {
         // The ItemStack must not be null.
         Validate.notNull(item, "ItemStack cannot be null.");
 
@@ -48,7 +50,7 @@ public class CraftThrownPotion extends CraftThrowableProjectile implements Throw
 
     // Paper start - Projectile API
     @Override
-    public org.bukkit.inventory.meta.PotionMeta getPotionMeta() {
+    public org.bukkit.inventory.meta.@NotNull PotionMeta getPotionMeta() {
         return (org.bukkit.inventory.meta.PotionMeta) CraftItemStack.getItemMeta(this.getHandle().getItemRaw(), Material.SPLASH_POTION);
     }
 
@@ -70,7 +72,7 @@ public class CraftThrownPotion extends CraftThrowableProjectile implements Throw
     }
 
     @Override
-    public EntityType getType() {
+    public @NotNull EntityType getType() {
         return EntityType.SPLASH_POTION;
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftTippedArrow.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftTippedArrow.java
index 0068f0b3a5f8d53ff91f16b3fe18a4c8cbefc9d7..d4df30df0fbaea7843a425b6d03e4a570a354d83 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftTippedArrow.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftTippedArrow.java
@@ -13,6 +13,9 @@ import org.bukkit.entity.EntityType;
 import org.bukkit.potion.PotionData;
 import org.bukkit.potion.PotionEffect;
 import org.bukkit.potion.PotionEffectType;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 public class CraftTippedArrow extends CraftArrow implements Arrow {
 
@@ -26,17 +29,17 @@ public class CraftTippedArrow extends CraftArrow implements Arrow {
     }
 
     @Override
-    public String toString() {
+    public @NotNull String toString() {
         return "CraftTippedArrow";
     }
 
     @Override
-    public EntityType getType() {
+    public @NotNull EntityType getType() {
         return EntityType.ARROW;
     }
 
     @Override
-    public boolean addCustomEffect(PotionEffect effect, boolean override) {
+    public boolean addCustomEffect(@NotNull PotionEffect effect, boolean override) {
         int effectId = effect.getType().getId();
         MobEffectInstance existing = null;
         for (MobEffectInstance mobEffect : this.getHandle().effects) {
@@ -62,7 +65,7 @@ public class CraftTippedArrow extends CraftArrow implements Arrow {
     }
 
     @Override
-    public List<PotionEffect> getCustomEffects() {
+    public @NotNull List<PotionEffect> getCustomEffects() {
         ImmutableList.Builder<PotionEffect> builder = ImmutableList.builder();
         for (MobEffectInstance effect : this.getHandle().effects) {
             builder.add(CraftPotionUtil.toBukkit(effect));
@@ -86,7 +89,7 @@ public class CraftTippedArrow extends CraftArrow implements Arrow {
     }
 
     @Override
-    public boolean removeCustomEffect(PotionEffectType effect) {
+    public boolean removeCustomEffect(@NotNull PotionEffectType effect) {
         int effectId = effect.getId();
         MobEffectInstance existing = null;
         for (MobEffectInstance mobEffect : this.getHandle().effects) {
@@ -103,18 +106,18 @@ public class CraftTippedArrow extends CraftArrow implements Arrow {
     }
 
     @Override
-    public void setBasePotionData(PotionData data) {
+    public void setBasePotionData(@NotNull PotionData data) {
         Validate.notNull(data, "PotionData cannot be null");
         this.getHandle().setPotionType(CraftPotionUtil.fromBukkit(data));
     }
 
     @Override
-    public PotionData getBasePotionData() {
+    public @NotNull PotionData getBasePotionData() {
         return CraftPotionUtil.toBukkit(this.getHandle().getPotionType());
     }
 
     @Override
-    public void setColor(Color color) {
+    public void setColor(@Nullable Color color) {
         int colorRGB = (color == null) ? -1 : color.asRGB();
         this.getHandle().setFixedColor(colorRGB);
     }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftTraderLlama.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftTraderLlama.java
index 0f07a43896e0f677fb9e4ba5080466d22eddcfcb..78865422da1478a01880f59395426b3564d72beb 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftTraderLlama.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftTraderLlama.java
@@ -3,6 +3,8 @@ package org.bukkit.craftbukkit.entity;
 import org.bukkit.craftbukkit.CraftServer;
 import org.bukkit.entity.EntityType;
 import org.bukkit.entity.TraderLlama;
+import org.jetbrains.annotations.NotNull;
+
 
 public class CraftTraderLlama extends CraftLlama implements TraderLlama {
 
@@ -16,12 +18,12 @@ public class CraftTraderLlama extends CraftLlama implements TraderLlama {
     }
 
     @Override
-    public String toString() {
+    public @NotNull String toString() {
         return "CraftTraderLlama";
     }
 
     @Override
-    public EntityType getType() {
+    public @NotNull EntityType getType() {
         return EntityType.TRADER_LLAMA;
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftTrident.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftTrident.java
index faf071201b7c1414225a33fe9641eac9477d53c7..45dbbc5c71f21a7f4167934d8552cb234254a924 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftTrident.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftTrident.java
@@ -6,6 +6,8 @@ import org.bukkit.craftbukkit.inventory.CraftItemStack;
 import org.bukkit.entity.EntityType;
 import org.bukkit.entity.Trident;
 import org.bukkit.inventory.ItemStack;
+import org.jetbrains.annotations.NotNull;
+
 
 public class CraftTrident extends CraftArrow implements Trident {
 
@@ -19,7 +21,7 @@ public class CraftTrident extends CraftArrow implements Trident {
     }
 
     @Override
-    public ItemStack getItem() {
+    public @NotNull ItemStack getItem() {
         return CraftItemStack.asBukkitCopy(this.getHandle().tridentItem);
     }
 
@@ -29,12 +31,12 @@ public class CraftTrident extends CraftArrow implements Trident {
     }
 
     @Override
-    public String toString() {
+    public @NotNull String toString() {
         return "CraftTrident";
     }
 
     @Override
-    public EntityType getType() {
+    public @NotNull EntityType getType() {
         return EntityType.TRIDENT;
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftTropicalFish.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftTropicalFish.java
index 4352af0a76ce4a4cd4afbea96f4851ef2b64ac7d..6648193b74dd6312dbc8d24bd15bb3581a734cab 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftTropicalFish.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftTropicalFish.java
@@ -7,6 +7,9 @@ import org.bukkit.craftbukkit.CraftServer;
 import org.bukkit.entity.EntityType;
 import org.bukkit.entity.TropicalFish;
 import org.bukkit.entity.TropicalFish.Pattern;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 public class CraftTropicalFish extends io.papermc.paper.entity.PaperSchoolableFish implements TropicalFish { // Paper - Schooling Fish API
 
@@ -20,42 +23,42 @@ public class CraftTropicalFish extends io.papermc.paper.entity.PaperSchoolableFi
     }
 
     @Override
-    public String toString() {
+    public @NotNull String toString() {
         return "CraftTropicalFish";
     }
 
     @Override
-    public EntityType getType() {
+    public @NotNull EntityType getType() {
         return EntityType.TROPICAL_FISH;
     }
 
     @Override
-    public DyeColor getPatternColor() {
+    public @NotNull DyeColor getPatternColor() {
         return CraftTropicalFish.getPatternColor(this.getHandle().getPackedVariant());
     }
 
     @Override
-    public void setPatternColor(DyeColor color) {
+    public void setPatternColor(@NotNull DyeColor color) {
         this.getHandle().setPackedVariant(CraftTropicalFish.getData(color, this.getBodyColor(), this.getPattern()));
     }
 
     @Override
-    public DyeColor getBodyColor() {
+    public @NotNull DyeColor getBodyColor() {
         return CraftTropicalFish.getBodyColor(this.getHandle().getPackedVariant());
     }
 
     @Override
-    public void setBodyColor(DyeColor color) {
+    public void setBodyColor(@NotNull DyeColor color) {
         this.getHandle().setPackedVariant(CraftTropicalFish.getData(this.getPatternColor(), color, this.getPattern()));
     }
 
     @Override
-    public Pattern getPattern() {
+    public @NotNull Pattern getPattern() {
         return CraftTropicalFish.getPattern(this.getHandle().getPackedVariant());
     }
 
     @Override
-    public void setPattern(Pattern pattern) {
+    public void setPattern(@NotNull Pattern pattern) {
         this.getHandle().setPackedVariant(CraftTropicalFish.getData(this.getPatternColor(), this.getBodyColor(), pattern));
     }
 
@@ -99,15 +102,15 @@ public class CraftTropicalFish extends io.papermc.paper.entity.PaperSchoolableFi
         }
     }
 
-    public static int getData(DyeColor patternColor, DyeColor bodyColor, Pattern type) {
+    public static int getData(@NotNull DyeColor patternColor, @NotNull DyeColor bodyColor, @NotNull Pattern type) {
         return patternColor.getWoolData() << 24 | bodyColor.getWoolData() << 16 | CraftPattern.values()[type.ordinal()].getDataValue();
     }
 
-    public static DyeColor getPatternColor(int data) {
+    public static @Nullable DyeColor getPatternColor(int data) {
         return DyeColor.getByWoolData((byte) ((data >> 24) & 0xFF));
     }
 
-    public static DyeColor getBodyColor(int data) {
+    public static @Nullable DyeColor getBodyColor(int data) {
         return DyeColor.getByWoolData((byte) ((data >> 16) & 0xFF));
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftTurtle.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftTurtle.java
index a14d0a688b9054988b5c86c94738e4aaca9f9cfd..c1040f7db11cd15a9659569b0e84915a1298a863 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftTurtle.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftTurtle.java
@@ -3,6 +3,8 @@ package org.bukkit.craftbukkit.entity;
 import org.bukkit.craftbukkit.CraftServer;
 import org.bukkit.entity.EntityType;
 import org.bukkit.entity.Turtle;
+import org.jetbrains.annotations.NotNull;
+
 
 public class CraftTurtle extends CraftAnimals implements Turtle {
 
@@ -16,12 +18,12 @@ public class CraftTurtle extends CraftAnimals implements Turtle {
     }
 
     @Override
-    public String toString() {
+    public @NotNull String toString() {
         return "CraftTurtle";
     }
 
     @Override
-    public EntityType getType() {
+    public @NotNull EntityType getType() {
         return EntityType.TURTLE;
     }
 
@@ -37,12 +39,12 @@ public class CraftTurtle extends CraftAnimals implements Turtle {
 
     // Paper start
     @Override
-    public org.bukkit.Location getHome() {
+    public org.bukkit.@NotNull Location getHome() {
         return io.papermc.paper.util.MCUtil.toLocation(getHandle().getLevel(), getHandle().getHomePos());
     }
 
     @Override
-    public void setHome(org.bukkit.Location location) {
+    public void setHome(org.bukkit.@NotNull Location location) {
         getHandle().setHomePos(io.papermc.paper.util.MCUtil.toBlockPosition(location));
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftVex.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftVex.java
index 634a5099fb6faea03615783f57e643ad0083fa30..4784fb926963a332a9088478b10bec7720e51e2e 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftVex.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftVex.java
@@ -6,6 +6,9 @@ import org.bukkit.Location;
 import org.bukkit.craftbukkit.CraftServer;
 import org.bukkit.entity.EntityType;
 import org.bukkit.entity.Vex;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 public class CraftVex extends CraftMonster implements Vex {
 
@@ -26,7 +29,7 @@ public class CraftVex extends CraftMonster implements Vex {
     }
 
     @Override
-    public void setSummoner(org.bukkit.entity.Mob summoner) {
+    public void setSummoner(org.bukkit.entity.@Nullable Mob summoner) {
         getHandle().setOwner(summoner == null ? null : ((CraftMob) summoner).getHandle());
     }
 
@@ -52,12 +55,12 @@ public class CraftVex extends CraftMonster implements Vex {
     // Paper end
 
     @Override
-    public String toString() {
+    public @NotNull String toString() {
         return "CraftVex";
     }
 
     @Override
-    public EntityType getType() {
+    public @NotNull EntityType getType() {
         return EntityType.VEX;
     }
 
@@ -78,7 +81,7 @@ public class CraftVex extends CraftMonster implements Vex {
     }
 
     @Override
-    public void setBound(Location location) {
+    public void setBound(@Nullable Location location) {
         if (location == null) {
             this.getHandle().setBoundOrigin(null);
         } else {
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftVillager.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftVillager.java
index a1a8ac55e572156671e47317ba061855be79e5ac..4ad4b2725be7798bd234c0912f4dd0933e962995 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftVillager.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftVillager.java
@@ -20,6 +20,8 @@ import org.bukkit.event.entity.CreatureSpawnEvent;
 // Paper start
 import com.destroystokyo.paper.entity.villager.Reputation;
 import com.google.common.collect.Maps;
+import org.jetbrains.annotations.NotNull;
+
 import java.util.Map;
 import java.util.UUID;
 // Paper end
@@ -36,12 +38,12 @@ public class CraftVillager extends CraftAbstractVillager implements Villager {
     }
 
     @Override
-    public String toString() {
+    public @NotNull String toString() {
         return "CraftVillager";
     }
 
     @Override
-    public EntityType getType() {
+    public @NotNull EntityType getType() {
         return EntityType.VILLAGER;
     }
 
@@ -53,23 +55,23 @@ public class CraftVillager extends CraftAbstractVillager implements Villager {
     }
 
     @Override
-    public Profession getProfession() {
+    public @NotNull Profession getProfession() {
         return CraftVillager.nmsToBukkitProfession(this.getHandle().getVillagerData().getProfession());
     }
 
     @Override
-    public void setProfession(Profession profession) {
+    public void setProfession(@NotNull Profession profession) {
         Validate.notNull(profession);
         this.getHandle().setVillagerData(this.getHandle().getVillagerData().setProfession(CraftVillager.bukkitToNmsProfession(profession)));
     }
 
     @Override
-    public Type getVillagerType() {
+    public @NotNull Type getVillagerType() {
         return Type.valueOf(BuiltInRegistries.VILLAGER_TYPE.getKey(this.getHandle().getVillagerData().getType()).getPath().toUpperCase(Locale.ROOT));
     }
 
     @Override
-    public void setVillagerType(Type type) {
+    public void setVillagerType(@NotNull Type type) {
         Validate.notNull(type);
         this.getHandle().setVillagerData(this.getHandle().getVillagerData().setType(BuiltInRegistries.VILLAGER_TYPE.get(CraftNamespacedKey.toMinecraft(type.getKey()))));
     }
@@ -139,7 +141,7 @@ public class CraftVillager extends CraftAbstractVillager implements Villager {
     // Paper end
 
     @Override
-    public boolean sleep(Location location) {
+    public boolean sleep(@NotNull Location location) {
         Preconditions.checkArgument(location != null, "Location cannot be null");
         Preconditions.checkArgument(location.getWorld() != null, "Location needs to be in a world");
         Preconditions.checkArgument(location.getWorld().equals(getWorld()), "Cannot sleep across worlds");
@@ -174,11 +176,11 @@ public class CraftVillager extends CraftAbstractVillager implements Villager {
         return (entityzombievillager != null) ? (ZombieVillager) entityzombievillager.getBukkitEntity() : null;
     }
 
-    public static Profession nmsToBukkitProfession(VillagerProfession nms) {
+    public static @NotNull Profession nmsToBukkitProfession(@NotNull VillagerProfession nms) {
         return Profession.valueOf(BuiltInRegistries.VILLAGER_PROFESSION.getKey(nms).getPath().toUpperCase(Locale.ROOT));
     }
 
-    public static VillagerProfession bukkitToNmsProfession(Profession bukkit) {
+    public static @NotNull VillagerProfession bukkitToNmsProfession(@NotNull Profession bukkit) {
         return BuiltInRegistries.VILLAGER_PROFESSION.get(CraftNamespacedKey.toMinecraft(bukkit.getKey()));
     }
 
@@ -194,14 +196,14 @@ public class CraftVillager extends CraftAbstractVillager implements Villager {
     }
 
     @Override
-    public Map<UUID, Reputation> getReputations() {
+    public @NotNull Map<UUID, Reputation> getReputations() {
         return getHandle().getGossips().gossips.entrySet()
             .stream()
             .collect(java.util.stream.Collectors.toMap(Map.Entry::getKey, entry -> entry.getValue().getPaperReputation()));
     }
 
     @Override
-    public void setReputation(UUID uniqueId, Reputation reputation) {
+    public void setReputation(UUID uniqueId, @NotNull Reputation reputation) {
         net.minecraft.world.entity.ai.gossip.GossipContainer.EntityGossips nmsReputation =
             getHandle().getGossips().gossips.computeIfAbsent(
                 uniqueId,
@@ -211,7 +213,7 @@ public class CraftVillager extends CraftAbstractVillager implements Villager {
     }
 
     @Override
-    public void setReputations(Map<UUID, Reputation> reputations) {
+    public void setReputations(@NotNull Map<UUID, Reputation> reputations) {
         for (Map.Entry<UUID, Reputation> entry : reputations.entrySet()) {
             setReputation(entry.getKey(), entry.getValue());
         }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftVillagerZombie.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftVillagerZombie.java
index 3954fe7e5f9ce8ea9300bfb92b7e4f4b55f0e6da..560148dffce5816dcc9885107b5a13c441aec3a8 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftVillagerZombie.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftVillagerZombie.java
@@ -14,6 +14,9 @@ import org.bukkit.craftbukkit.util.CraftNamespacedKey;
 import org.bukkit.entity.EntityType;
 import org.bukkit.entity.Villager;
 import org.bukkit.entity.ZombieVillager;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 public class CraftVillagerZombie extends CraftZombie implements ZombieVillager {
 
@@ -27,12 +30,12 @@ public class CraftVillagerZombie extends CraftZombie implements ZombieVillager {
     }
 
     @Override
-    public String toString() {
+    public @NotNull String toString() {
         return "CraftVillagerZombie";
     }
 
     @Override
-    public EntityType getType() {
+    public @NotNull EntityType getType() {
         return EntityType.ZOMBIE_VILLAGER;
     }
 
@@ -42,18 +45,18 @@ public class CraftVillagerZombie extends CraftZombie implements ZombieVillager {
     }
 
     @Override
-    public void setVillagerProfession(Villager.Profession profession) {
+    public void setVillagerProfession(Villager.@NotNull Profession profession) {
         Validate.notNull(profession);
         this.getHandle().setVillagerData(this.getHandle().getVillagerData().setProfession(BuiltInRegistries.VILLAGER_PROFESSION.get(new ResourceLocation(profession.name().toLowerCase(Locale.ROOT)))));
     }
 
     @Override
-    public Villager.Type getVillagerType() {
+    public Villager.@NotNull Type getVillagerType() {
         return Villager.Type.valueOf(BuiltInRegistries.VILLAGER_TYPE.getKey(this.getHandle().getVillagerData().getType()).getPath().toUpperCase(Locale.ROOT));
     }
 
     @Override
-    public void setVillagerType(Villager.Type type) {
+    public void setVillagerType(Villager.@NotNull Type type) {
         Validate.notNull(type);
         this.getHandle().setVillagerData(this.getHandle().getVillagerData().setType(BuiltInRegistries.VILLAGER_TYPE.get(CraftNamespacedKey.toMinecraft(type.getKey()))));
     }
@@ -95,7 +98,7 @@ public class CraftVillagerZombie extends CraftZombie implements ZombieVillager {
     }
 
     @Override
-    public void setConversionPlayer(OfflinePlayer conversionPlayer) {
+    public void setConversionPlayer(@Nullable OfflinePlayer conversionPlayer) {
         if (!this.isConverting()) return;
         this.getHandle().conversionStarter = (conversionPlayer == null) ? null : conversionPlayer.getUniqueId();
     }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftVindicator.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftVindicator.java
index bea22e002a9d41b0e364eff1109d5a67c9824a00..b543e50ce52aa842c146c10189e6c9c25e255d5e 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftVindicator.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftVindicator.java
@@ -3,6 +3,8 @@ package org.bukkit.craftbukkit.entity;
 import org.bukkit.craftbukkit.CraftServer;
 import org.bukkit.entity.EntityType;
 import org.bukkit.entity.Vindicator;
+import org.jetbrains.annotations.NotNull;
+
 
 public class CraftVindicator extends CraftIllager implements Vindicator {
 
@@ -16,12 +18,12 @@ public class CraftVindicator extends CraftIllager implements Vindicator {
     }
 
     @Override
-    public String toString() {
+    public @NotNull String toString() {
         return "CraftVindicator";
     }
 
     @Override
-    public EntityType getType() {
+    public @NotNull EntityType getType() {
         return EntityType.VINDICATOR;
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftWanderingTrader.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftWanderingTrader.java
index ecf0c4a7d1ce2b254d91b3276fa24c149329737a..bef02a63f5511e16dbaf9afe6df6ab6888845c04 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftWanderingTrader.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftWanderingTrader.java
@@ -3,6 +3,9 @@ package org.bukkit.craftbukkit.entity;
 import org.bukkit.craftbukkit.CraftServer;
 import org.bukkit.entity.EntityType;
 import org.bukkit.entity.WanderingTrader;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 public class CraftWanderingTrader extends CraftAbstractVillager implements WanderingTrader {
 
@@ -16,12 +19,12 @@ public class CraftWanderingTrader extends CraftAbstractVillager implements Wande
     }
 
     @Override
-    public String toString() {
+    public @NotNull String toString() {
         return "CraftWanderingTrader";
     }
 
     @Override
-    public EntityType getType() {
+    public @NotNull EntityType getType() {
         return EntityType.WANDERING_TRADER;
     }
 
@@ -67,7 +70,7 @@ public class CraftWanderingTrader extends CraftAbstractVillager implements Wande
     }
 
     @Override
-    public void setWanderingTowards(org.bukkit.Location location) {
+    public void setWanderingTowards(org.bukkit.@Nullable Location location) {
         net.minecraft.core.BlockPos pos = null;
         if (location != null) {
             pos = io.papermc.paper.util.MCUtil.toBlockPosition(location);
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftWarden.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftWarden.java
index 963928fc8e29b8abc2026c0b0183ebb07f0de4d1..008492e9b31a01a0a00dacdb97c535b7f3aa4473 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftWarden.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftWarden.java
@@ -9,6 +9,9 @@ import org.bukkit.craftbukkit.CraftServer;
 import org.bukkit.entity.Entity;
 import org.bukkit.entity.EntityType;
 import org.bukkit.entity.LivingEntity;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 public class CraftWarden extends CraftMonster implements org.bukkit.entity.Warden {
 
@@ -22,12 +25,12 @@ public class CraftWarden extends CraftMonster implements org.bukkit.entity.Warde
     }
 
     @Override
-    public String toString() {
+    public @NotNull String toString() {
         return "CraftWarden";
     }
 
     @Override
-    public EntityType getType() {
+    public @NotNull EntityType getType() {
         return EntityType.WARDEN;
     }
 
@@ -37,7 +40,7 @@ public class CraftWarden extends CraftMonster implements org.bukkit.entity.Warde
     }
 
     @Override
-    public int getAnger(Entity entity) {
+    public int getAnger(@Nullable Entity entity) {
         Preconditions.checkArgument(entity != null, "Entity cannot be null");
 
         return this.getHandle().getAngerManagement().getActiveAnger(((CraftEntity) entity).getHandle());
@@ -51,14 +54,14 @@ public class CraftWarden extends CraftMonster implements org.bukkit.entity.Warde
     // Paper end
 
     @Override
-    public void increaseAnger(Entity entity, int increase) {
+    public void increaseAnger(@Nullable Entity entity, int increase) {
         Preconditions.checkArgument(entity != null, "Entity cannot be null");
 
         this.getHandle().getAngerManagement().increaseAnger(((CraftEntity) entity).getHandle(), increase);
     }
 
     @Override
-    public void setAnger(Entity entity, int anger) {
+    public void setAnger(@Nullable Entity entity, int anger) {
         Preconditions.checkArgument(entity != null, "Entity cannot be null");
 
         this.getHandle().clearAnger(((CraftEntity) entity).getHandle());
@@ -66,7 +69,7 @@ public class CraftWarden extends CraftMonster implements org.bukkit.entity.Warde
     }
 
     @Override
-    public void clearAnger(Entity entity) {
+    public void clearAnger(@Nullable Entity entity) {
         Preconditions.checkArgument(entity != null, "Entity cannot be null");
 
         this.getHandle().clearAnger(((CraftEntity) entity).getHandle());
@@ -78,14 +81,14 @@ public class CraftWarden extends CraftMonster implements org.bukkit.entity.Warde
     }
 
     @Override
-    public void setDisturbanceLocation(Location location) {
+    public void setDisturbanceLocation(@NotNull Location location) {
         Preconditions.checkArgument(location != null, "Location cannot be null");
 
         WardenAi.setDisturbanceLocation(this.getHandle(), new BlockPos(location.getX(), location.getY(), location.getZ()));
     }
 
     @Override
-    public AngerLevel getAngerLevel() {
+    public @NotNull AngerLevel getAngerLevel() {
         return switch (this.getHandle().getAngerLevel()) {
             case CALM -> AngerLevel.CALM;
             case AGITATED -> AngerLevel.AGITATED;
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftWitch.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftWitch.java
index 9039db1a72009342063d4db08e18e6aee18836e8..dafea8efc1eae796b1d51ae0b393af143984a303 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftWitch.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftWitch.java
@@ -9,6 +9,8 @@ import com.google.common.base.Preconditions;
 import org.bukkit.Material;
 import org.bukkit.craftbukkit.inventory.CraftItemStack;
 import org.bukkit.inventory.ItemStack;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
 // Paper end
 
 public class CraftWitch extends CraftRaider implements Witch, com.destroystokyo.paper.entity.CraftRangedEntity<net.minecraft.world.entity.monster.Witch> { // Paper
@@ -22,12 +24,12 @@ public class CraftWitch extends CraftRaider implements Witch, com.destroystokyo.
     }
 
     @Override
-    public String toString() {
+    public @NotNull String toString() {
         return "CraftWitch";
     }
 
     @Override
-    public EntityType getType() {
+    public @NotNull EntityType getType() {
         return EntityType.WITCH;
     }
 
@@ -49,7 +51,7 @@ public class CraftWitch extends CraftRaider implements Witch, com.destroystokyo.
         return CraftItemStack.asCraftMirror(getHandle().getMainHandItem());
     }
 
-    public void setDrinkingPotion(ItemStack potion) {
+    public void setDrinkingPotion(@Nullable ItemStack potion) {
         Preconditions.checkArgument(potion == null || potion.getType().isEmpty() || potion.getType() == Material.POTION, "must be potion, air, or null");
         getHandle().setDrinkingPotion(CraftItemStack.asNMSCopy(potion));
     }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftWither.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftWither.java
index 4cf3a374c9ee7c7bcf82e778aa094eb4f8463595..8ad4704e66908f6996470464fe332cb48464d8f7 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftWither.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftWither.java
@@ -9,12 +9,15 @@ import org.bukkit.craftbukkit.boss.CraftBossBar;
 import org.bukkit.entity.EntityType;
 import org.bukkit.entity.LivingEntity;
 import org.bukkit.entity.Wither;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 public class CraftWither extends CraftMonster implements Wither, com.destroystokyo.paper.entity.CraftRangedEntity<WitherBoss> { // Paper
 
     private BossBar bossBar;
 
-    public CraftWither(CraftServer server, WitherBoss entity) {
+    public CraftWither(CraftServer server, @NotNull WitherBoss entity) {
         super(server, entity);
 
         if (entity.bossEvent != null) {
@@ -28,12 +31,12 @@ public class CraftWither extends CraftMonster implements Wither, com.destroystok
     }
 
     @Override
-    public String toString() {
+    public @NotNull String toString() {
         return "CraftWither";
     }
 
     @Override
-    public EntityType getType() {
+    public @NotNull EntityType getType() {
         return EntityType.WITHER;
     }
 
@@ -43,7 +46,7 @@ public class CraftWither extends CraftMonster implements Wither, com.destroystok
     }
 
     @Override
-    public void setTarget(Head head, LivingEntity livingEntity) {
+    public void setTarget(@NotNull Head head, @Nullable LivingEntity livingEntity) {
         Preconditions.checkArgument(head != null, "head cannot be null");
 
         int entityId = (livingEntity != null) ? livingEntity.getEntityId() : 0;
@@ -51,7 +54,7 @@ public class CraftWither extends CraftMonster implements Wither, com.destroystok
     }
 
     @Override
-    public LivingEntity getTarget(Head head) {
+    public LivingEntity getTarget(@NotNull Head head) {
         Preconditions.checkArgument(head != null, "head cannot be null");
 
         int entityId = this.getHandle().getAlternativeTarget(head.ordinal());
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftWitherSkeleton.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftWitherSkeleton.java
index 2c16890810cf5f294f6f461dcf3999e9e0b80f24..6ab9b12e5aa79f49dc2abbb2b3daeed9200fb1f7 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftWitherSkeleton.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftWitherSkeleton.java
@@ -4,6 +4,8 @@ import org.bukkit.craftbukkit.CraftServer;
 import org.bukkit.entity.EntityType;
 import org.bukkit.entity.Skeleton.SkeletonType;
 import org.bukkit.entity.WitherSkeleton;
+import org.jetbrains.annotations.NotNull;
+
 
 public class CraftWitherSkeleton extends CraftAbstractSkeleton implements WitherSkeleton {
 
@@ -12,17 +14,17 @@ public class CraftWitherSkeleton extends CraftAbstractSkeleton implements Wither
     }
 
     @Override
-    public String toString() {
+    public @NotNull String toString() {
         return "CraftWitherSkeleton";
     }
 
     @Override
-    public EntityType getType() {
+    public @NotNull EntityType getType() {
         return EntityType.WITHER_SKELETON;
     }
 
     @Override
-    public SkeletonType getSkeletonType() {
+    public @NotNull SkeletonType getSkeletonType() {
         return SkeletonType.WITHER;
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftWitherSkull.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftWitherSkull.java
index 01fb0ca4a0ecc57a1437885f96632644158c4446..0456c438ba086f8697cc127c0a278672761085f8 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftWitherSkull.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftWitherSkull.java
@@ -3,6 +3,8 @@ package org.bukkit.craftbukkit.entity;
 import org.bukkit.craftbukkit.CraftServer;
 import org.bukkit.entity.EntityType;
 import org.bukkit.entity.WitherSkull;
+import org.jetbrains.annotations.NotNull;
+
 
 public class CraftWitherSkull extends CraftFireball implements WitherSkull {
     public CraftWitherSkull(CraftServer server, net.minecraft.world.entity.projectile.WitherSkull entity) {
@@ -25,12 +27,12 @@ public class CraftWitherSkull extends CraftFireball implements WitherSkull {
     }
 
     @Override
-    public String toString() {
+    public @NotNull String toString() {
         return "CraftWitherSkull";
     }
 
     @Override
-    public EntityType getType() {
+    public @NotNull EntityType getType() {
         return EntityType.WITHER_SKULL;
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftWolf.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftWolf.java
index e43fd3e59fd8c74828ae65965fade27f56beef65..7039cd32208a42cda091302bf3a442d391b85e20 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftWolf.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftWolf.java
@@ -4,6 +4,8 @@ import org.bukkit.DyeColor;
 import org.bukkit.craftbukkit.CraftServer;
 import org.bukkit.entity.EntityType;
 import org.bukkit.entity.Wolf;
+import org.jetbrains.annotations.NotNull;
+
 
 public class CraftWolf extends CraftTameableAnimal implements Wolf {
     public CraftWolf(CraftServer server, net.minecraft.world.entity.animal.Wolf wolf) {
@@ -30,17 +32,17 @@ public class CraftWolf extends CraftTameableAnimal implements Wolf {
     }
 
     @Override
-    public EntityType getType() {
+    public @NotNull EntityType getType() {
         return EntityType.WOLF;
     }
 
     @Override
-    public DyeColor getCollarColor() {
+    public @NotNull DyeColor getCollarColor() {
         return DyeColor.getByWoolData((byte) this.getHandle().getCollarColor().getId());
     }
 
     @Override
-    public void setCollarColor(DyeColor color) {
+    public void setCollarColor(@NotNull DyeColor color) {
         this.getHandle().setCollarColor(net.minecraft.world.item.DyeColor.byId(color.getWoolData()));
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftZoglin.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftZoglin.java
index 611e794d86ff63d725de9bb843802ec868f4b1fd..2b106cf48eb7ac8bada9a2d6f4c60d59099b38e6 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftZoglin.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftZoglin.java
@@ -3,6 +3,8 @@ package org.bukkit.craftbukkit.entity;
 import org.bukkit.craftbukkit.CraftServer;
 import org.bukkit.entity.EntityType;
 import org.bukkit.entity.Zoglin;
+import org.jetbrains.annotations.NotNull;
+
 
 public class CraftZoglin extends CraftMonster implements Zoglin {
 
@@ -26,12 +28,12 @@ public class CraftZoglin extends CraftMonster implements Zoglin {
     }
 
     @Override
-    public String toString() {
+    public @NotNull String toString() {
         return "CraftZoglin";
     }
 
     @Override
-    public EntityType getType() {
+    public @NotNull EntityType getType() {
         return EntityType.ZOGLIN;
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftZombie.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftZombie.java
index 9f4da46dce54fe4207e24b49402fe0d3fa548e29..9c9618305701534568ff452dc55b1f4f19153624 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftZombie.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftZombie.java
@@ -6,6 +6,9 @@ import org.bukkit.craftbukkit.CraftServer;
 import org.bukkit.entity.EntityType;
 import org.bukkit.entity.Villager;
 import org.bukkit.entity.Zombie;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 public class CraftZombie extends CraftMonster implements Zombie {
 
@@ -24,7 +27,7 @@ public class CraftZombie extends CraftMonster implements Zombie {
     }
 
     @Override
-    public EntityType getType() {
+    public @NotNull EntityType getType() {
         return EntityType.ZOMBIE;
     }
 
@@ -54,7 +57,7 @@ public class CraftZombie extends CraftMonster implements Zombie {
     }
 
     @Override
-    public Villager.Profession getVillagerProfession() {
+    public Villager.@Nullable Profession getVillagerProfession() {
         return null;
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftZombieHorse.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftZombieHorse.java
index 0039e9bbc65207cce544fd5ebb68057c3c0f639b..ef8d113ee013f439826d30f0a7dbc5a1f13d8d05 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftZombieHorse.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftZombieHorse.java
@@ -4,6 +4,8 @@ import org.bukkit.craftbukkit.CraftServer;
 import org.bukkit.entity.EntityType;
 import org.bukkit.entity.Horse.Variant;
 import org.bukkit.entity.ZombieHorse;
+import org.jetbrains.annotations.NotNull;
+
 
 public class CraftZombieHorse extends CraftAbstractHorse implements ZombieHorse {
 
@@ -12,17 +14,17 @@ public class CraftZombieHorse extends CraftAbstractHorse implements ZombieHorse
     }
 
     @Override
-    public String toString() {
+    public @NotNull String toString() {
         return "CraftZombieHorse";
     }
 
     @Override
-    public EntityType getType() {
+    public @NotNull EntityType getType() {
         return EntityType.ZOMBIE_HORSE;
     }
 
     @Override
-    public Variant getVariant() {
+    public @NotNull Variant getVariant() {
         return Variant.UNDEAD_HORSE;
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/memory/CraftMemoryKey.java b/src/main/java/org/bukkit/craftbukkit/entity/memory/CraftMemoryKey.java
index 0307516d18dd5a3a5736167ec2335aca69aacd19..8fe37c42b5a71680ef3f13aab3df62eb9485d21f 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/memory/CraftMemoryKey.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/memory/CraftMemoryKey.java
@@ -4,16 +4,19 @@ import net.minecraft.core.registries.BuiltInRegistries;
 import net.minecraft.world.entity.ai.memory.MemoryModuleType;
 import org.bukkit.craftbukkit.util.CraftNamespacedKey;
 import org.bukkit.entity.memory.MemoryKey;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 public final class CraftMemoryKey {
 
     private CraftMemoryKey() {}
 
-    public static <T, U> MemoryModuleType<U> fromMemoryKey(MemoryKey<T> memoryKey) {
+    public static <T, U> @NotNull MemoryModuleType<U> fromMemoryKey(@NotNull MemoryKey<T> memoryKey) {
         return (MemoryModuleType<U>) BuiltInRegistries.MEMORY_MODULE_TYPE.get(CraftNamespacedKey.toMinecraft(memoryKey.getKey()));
     }
 
-    public static <T, U> MemoryKey<U> toMemoryKey(MemoryModuleType<T> memoryModuleType) {
+    public static <T, U> @Nullable MemoryKey<U> toMemoryKey(@NotNull MemoryModuleType<T> memoryModuleType) {
         return MemoryKey.getByKey(CraftNamespacedKey.fromMinecraft(BuiltInRegistries.MEMORY_MODULE_TYPE.getKey(memoryModuleType)));
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/memory/CraftMemoryMapper.java b/src/main/java/org/bukkit/craftbukkit/entity/memory/CraftMemoryMapper.java
index 6c60e6c919967f824ea5128641cbd4006bdd4d01..6515b157b87b99addc96910dd356ae827b90e368 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/memory/CraftMemoryMapper.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/memory/CraftMemoryMapper.java
@@ -7,12 +7,15 @@ import org.bukkit.Bukkit;
 import org.bukkit.Location;
 import org.bukkit.craftbukkit.CraftServer;
 import org.bukkit.craftbukkit.CraftWorld;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 public final class CraftMemoryMapper {
 
     private CraftMemoryMapper() {}
 
-    public static Object fromNms(Object object) {
+    public static @NotNull Object fromNms(Object object) {
         if (object instanceof GlobalPos) {
             return CraftMemoryMapper.fromNms((GlobalPos) object);
         } else if (object instanceof Long) {
@@ -28,7 +31,7 @@ public final class CraftMemoryMapper {
         throw new UnsupportedOperationException("Do not know how to map " + object);
     }
 
-    public static Object toNms(Object object) {
+    public static Object toNms(@Nullable Object object) {
         if (object == null) {
             return null;
         } else if (object instanceof Location) {
@@ -46,11 +49,11 @@ public final class CraftMemoryMapper {
         throw new UnsupportedOperationException("Do not know how to map " + object);
     }
 
-    public static Location fromNms(GlobalPos globalPos) {
+    public static @NotNull Location fromNms(@NotNull GlobalPos globalPos) {
         return new org.bukkit.Location(((CraftServer) Bukkit.getServer()).getServer().getLevel(globalPos.dimension()).getWorld(), globalPos.pos().getX(), globalPos.pos().getY(), globalPos.pos().getZ());
     }
 
-    public static GlobalPos toNms(Location location) {
+    public static @NotNull GlobalPos toNms(@NotNull Location location) {
         return GlobalPos.of(((CraftWorld) location.getWorld()).getHandle().dimension(), new BlockPos(location.getX(), location.getY(), location.getZ()));
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/event/CraftEventFactory.java b/src/main/java/org/bukkit/craftbukkit/event/CraftEventFactory.java
index 6a52ae70b5f7fd9953b6b2605cae722f606e7fec..5fbff0b13feb1c0fd819d3cb127c8458752b3148 100644
--- a/src/main/java/org/bukkit/craftbukkit/event/CraftEventFactory.java
+++ b/src/main/java/org/bukkit/craftbukkit/event/CraftEventFactory.java
@@ -224,15 +224,17 @@ import org.bukkit.inventory.meta.BookMeta;
 import org.bukkit.potion.PotionEffect;
 
 import org.bukkit.event.entity.SpawnerSpawnEvent; // Spigot
+import org.jetbrains.annotations.NotNull;
+
 
 public class CraftEventFactory {
     public static final DamageSource MELTING = CraftDamageSource.copyOf(DamageSource.ON_FIRE);
     public static final DamageSource POISON = CraftDamageSource.copyOf(DamageSource.MAGIC);
-    public static org.bukkit.block.Block blockDamage; // For use in EntityDamageByBlockEvent
-    public static Entity entityDamage; // For use in EntityDamageByEntityEvent
+    public static org.bukkit.block.@org.jetbrains.annotations.Nullable Block blockDamage; // For use in EntityDamageByBlockEvent
+    public static @org.jetbrains.annotations.Nullable Entity entityDamage; // For use in EntityDamageByEntityEvent
 
     // helper methods
-    private static boolean canBuild(ServerLevel world, Player player, int x, int z) {
+    private static boolean canBuild(@NotNull ServerLevel world, @NotNull Player player, int x, int z) {
         int spawnSize = Bukkit.getServer().getSpawnRadius();
 
         if (world.dimension() != Level.OVERWORLD) return true;
@@ -246,7 +248,7 @@ public class CraftEventFactory {
         return distanceFromSpawn > spawnSize;
     }
 
-    public static <T extends Event> T callEvent(T event) {
+    public static <T extends Event> @NotNull T callEvent(@NotNull T event) {
         Bukkit.getServer().getPluginManager().callEvent(event);
         return event;
     }
@@ -254,10 +256,10 @@ public class CraftEventFactory {
     /**
      * PlayerBedEnterEvent
      */
-    public static Either<net.minecraft.world.entity.player.Player.BedSleepingProblem, Unit> callPlayerBedEnterEvent(net.minecraft.world.entity.player.Player player, BlockPos bed, Either<net.minecraft.world.entity.player.Player.BedSleepingProblem, Unit> nmsBedResult) {
+    public static @NotNull Either<net.minecraft.world.entity.player.Player.BedSleepingProblem, Unit> callPlayerBedEnterEvent(net.minecraft.world.entity.player.@NotNull Player player, @NotNull BlockPos bed, @NotNull Either<net.minecraft.world.entity.player.Player.BedSleepingProblem, Unit> nmsBedResult) {
         BedEnterResult bedEnterResult = nmsBedResult.mapBoth(new Function<net.minecraft.world.entity.player.Player.BedSleepingProblem, BedEnterResult>() {
             @Override
-            public BedEnterResult apply(net.minecraft.world.entity.player.Player.BedSleepingProblem t) {
+            public @NotNull BedEnterResult apply(net.minecraft.world.entity.player.Player.@NotNull BedSleepingProblem t) {
                 switch (t) {
                     case NOT_POSSIBLE_HERE:
                         return BedEnterResult.NOT_POSSIBLE_HERE;
@@ -293,7 +295,7 @@ public class CraftEventFactory {
     /**
      * Entity Enter Love Mode Event
      */
-    public static EntityEnterLoveModeEvent callEntityEnterLoveModeEvent(net.minecraft.world.entity.player.Player entityHuman, Animal entityAnimal, int loveTicks) {
+    public static @NotNull EntityEnterLoveModeEvent callEntityEnterLoveModeEvent(net.minecraft.world.entity.player.@org.jetbrains.annotations.Nullable Player entityHuman, @NotNull Animal entityAnimal, int loveTicks) {
         EntityEnterLoveModeEvent entityEnterLoveModeEvent = new EntityEnterLoveModeEvent((Animals) entityAnimal.getBukkitEntity(), entityHuman != null ? (HumanEntity) entityHuman.getBukkitEntity() : null, loveTicks);
         Bukkit.getPluginManager().callEvent(entityEnterLoveModeEvent);
         return entityEnterLoveModeEvent;
@@ -302,7 +304,7 @@ public class CraftEventFactory {
     /**
      * Player Harvest Block Event
      */
-    public static PlayerHarvestBlockEvent callPlayerHarvestBlockEvent(Level world, BlockPos blockposition, net.minecraft.world.entity.player.Player who, InteractionHand enumhand, List<ItemStack> itemsToHarvest) {
+    public static @NotNull PlayerHarvestBlockEvent callPlayerHarvestBlockEvent(Level world, @NotNull BlockPos blockposition, net.minecraft.world.entity.player.@NotNull Player who, InteractionHand enumhand, @NotNull List<ItemStack> itemsToHarvest) {
         List<org.bukkit.inventory.ItemStack> bukkitItemsToHarvest = new ArrayList<>(itemsToHarvest.stream().map(CraftItemStack::asBukkitCopy).collect(Collectors.toList()));
         Player player = (Player) who.getBukkitEntity();
         PlayerHarvestBlockEvent playerHarvestBlockEvent = new PlayerHarvestBlockEvent(player, CraftBlock.at(world, blockposition), CraftEquipmentSlot.getHand(enumhand), bukkitItemsToHarvest);
@@ -313,7 +315,7 @@ public class CraftEventFactory {
     /**
      * Player Fish Bucket Event
      */
-    public static PlayerBucketEntityEvent callPlayerFishBucketEvent(net.minecraft.world.entity.LivingEntity fish, net.minecraft.world.entity.player.Player entityHuman, ItemStack originalBucket, ItemStack entityBucket, InteractionHand enumhand) {
+    public static @NotNull PlayerBucketEntityEvent callPlayerFishBucketEvent(net.minecraft.world.entity.LivingEntity fish, net.minecraft.world.entity.player.@NotNull Player entityHuman, @NotNull ItemStack originalBucket, @NotNull ItemStack entityBucket, InteractionHand enumhand) {
         Player player = (Player) entityHuman.getBukkitEntity();
         EquipmentSlot hand = CraftEquipmentSlot.getHand(enumhand);
 
@@ -330,7 +332,7 @@ public class CraftEventFactory {
     /**
      * Trade Index Change Event
      */
-    public static TradeSelectEvent callTradeSelectEvent(ServerPlayer player, int newIndex, MerchantMenu merchant) {
+    public static @NotNull TradeSelectEvent callTradeSelectEvent(ServerPlayer player, int newIndex, @NotNull MerchantMenu merchant) {
         TradeSelectEvent tradeSelectEvent = new TradeSelectEvent(merchant.getBukkitView(), newIndex);
         Bukkit.getPluginManager().callEvent(tradeSelectEvent);
         return tradeSelectEvent;
@@ -339,7 +341,7 @@ public class CraftEventFactory {
     /**
      * Block place methods
      */
-    public static BlockMultiPlaceEvent callBlockMultiPlaceEvent(ServerLevel world, net.minecraft.world.entity.player.Player who, InteractionHand hand, List<BlockState> blockStates, int clickedX, int clickedY, int clickedZ) {
+    public static @NotNull BlockMultiPlaceEvent callBlockMultiPlaceEvent(@NotNull ServerLevel world, net.minecraft.world.entity.player.@NotNull Player who, InteractionHand hand, @NotNull List<BlockState> blockStates, int clickedX, int clickedY, int clickedZ) {
         CraftWorld craftWorld = world.getWorld();
         CraftServer craftServer = world.getCraftServer();
         Player player = (Player) who.getBukkitEntity();
@@ -372,7 +374,7 @@ public class CraftEventFactory {
         return event;
     }
 
-    public static BlockPlaceEvent callBlockPlaceEvent(ServerLevel world, net.minecraft.world.entity.player.Player who, InteractionHand hand, BlockState replacedBlockState, int clickedX, int clickedY, int clickedZ) {
+    public static @NotNull BlockPlaceEvent callBlockPlaceEvent(@NotNull ServerLevel world, net.minecraft.world.entity.player.@NotNull Player who, InteractionHand hand, @NotNull BlockState replacedBlockState, int clickedX, int clickedY, int clickedZ) {
         CraftWorld craftWorld = world.getWorld();
         CraftServer craftServer = world.getCraftServer();
 
@@ -399,7 +401,7 @@ public class CraftEventFactory {
         return event;
     }
 
-    public static void handleBlockDropItemEvent(Block block, BlockState state, ServerPlayer player, List<ItemEntity> items) {
+    public static void handleBlockDropItemEvent(@NotNull Block block, @NotNull BlockState state, @NotNull ServerPlayer player, @NotNull List<ItemEntity> items) {
         // Paper start
         List<Item> list = new ArrayList<>();
         for (ItemEntity item : items) {
@@ -427,11 +429,11 @@ public class CraftEventFactory {
         }
     }
 
-    public static EntityPlaceEvent callEntityPlaceEvent(UseOnContext itemactioncontext, Entity entity) {
+    public static @NotNull EntityPlaceEvent callEntityPlaceEvent(@NotNull UseOnContext itemactioncontext, @NotNull Entity entity) {
         return CraftEventFactory.callEntityPlaceEvent(itemactioncontext.getLevel(), itemactioncontext.getClickedPos(), itemactioncontext.getClickedFace(), itemactioncontext.getPlayer(), entity, itemactioncontext.getHand());
     }
 
-    public static EntityPlaceEvent callEntityPlaceEvent(Level world, BlockPos clickPosition, Direction clickedFace, net.minecraft.world.entity.player.Player human, Entity entity, InteractionHand enumhand) {
+    public static @NotNull EntityPlaceEvent callEntityPlaceEvent(Level world, @NotNull BlockPos clickPosition, Direction clickedFace, net.minecraft.world.entity.player.@org.jetbrains.annotations.Nullable Player human, @NotNull Entity entity, InteractionHand enumhand) {
         Player who = (human == null) ? null : (Player) human.getBukkitEntity();
         org.bukkit.block.Block blockClicked = CraftBlock.at(world, clickPosition);
         org.bukkit.block.BlockFace blockFace = org.bukkit.craftbukkit.block.CraftBlock.notchToBlockFace(clickedFace);
@@ -445,15 +447,15 @@ public class CraftEventFactory {
     /**
      * Bucket methods
      */
-    public static PlayerBucketEmptyEvent callPlayerBucketEmptyEvent(ServerLevel world, net.minecraft.world.entity.player.Player who, BlockPos changed, BlockPos clicked, Direction clickedFace, ItemStack itemInHand, InteractionHand enumhand) {
+    public static @NotNull PlayerBucketEmptyEvent callPlayerBucketEmptyEvent(@NotNull ServerLevel world, net.minecraft.world.entity.player.@NotNull Player who, @NotNull BlockPos changed, @NotNull BlockPos clicked, Direction clickedFace, @NotNull ItemStack itemInHand, InteractionHand enumhand) {
         return (PlayerBucketEmptyEvent) CraftEventFactory.getPlayerBucketEvent(false, world, who, changed, clicked, clickedFace, itemInHand, Items.BUCKET, enumhand);
     }
 
-    public static PlayerBucketFillEvent callPlayerBucketFillEvent(ServerLevel world, net.minecraft.world.entity.player.Player who, BlockPos changed, BlockPos clicked, Direction clickedFace, ItemStack itemInHand, net.minecraft.world.item.Item bucket, InteractionHand enumhand) {
+    public static @NotNull PlayerBucketFillEvent callPlayerBucketFillEvent(@NotNull ServerLevel world, net.minecraft.world.entity.player.@NotNull Player who, @NotNull BlockPos changed, @NotNull BlockPos clicked, Direction clickedFace, @NotNull ItemStack itemInHand, net.minecraft.world.item.Item bucket, InteractionHand enumhand) {
         return (PlayerBucketFillEvent) CraftEventFactory.getPlayerBucketEvent(true, world, who, clicked, changed, clickedFace, itemInHand, bucket, enumhand);
     }
 
-    private static PlayerEvent getPlayerBucketEvent(boolean isFilling, ServerLevel world, net.minecraft.world.entity.player.Player who, BlockPos changed, BlockPos clicked, Direction clickedFace, ItemStack itemstack, net.minecraft.world.item.Item item, InteractionHand enumhand) {
+    private static @NotNull PlayerEvent getPlayerBucketEvent(boolean isFilling, @NotNull ServerLevel world, net.minecraft.world.entity.player.@NotNull Player who, @NotNull BlockPos changed, @NotNull BlockPos clicked, Direction clickedFace, @NotNull ItemStack itemstack, net.minecraft.world.item.Item item, InteractionHand enumhand) {
         Player player = (Player) who.getBukkitEntity();
         CraftItemStack itemInHand = CraftItemStack.asNewCraftStack(item);
         Material bucket = CraftMagicNumbers.getMaterial(itemstack.getItem());
@@ -482,28 +484,28 @@ public class CraftEventFactory {
     /**
      * Player Interact event
      */
-    public static PlayerInteractEvent callPlayerInteractEvent(net.minecraft.world.entity.player.Player who, Action action, ItemStack itemstack, InteractionHand hand) {
+    public static @NotNull PlayerInteractEvent callPlayerInteractEvent(net.minecraft.world.entity.player.Player who, @NotNull Action action, ItemStack itemstack, InteractionHand hand) {
         if (action != Action.LEFT_CLICK_AIR && action != Action.RIGHT_CLICK_AIR) {
             throw new AssertionError(String.format("%s performing %s with %s", who, action, itemstack));
         }
         return CraftEventFactory.callPlayerInteractEvent(who, action, null, Direction.SOUTH, itemstack, hand);
     }
 
-    public static PlayerInteractEvent callPlayerInteractEvent(net.minecraft.world.entity.player.Player who, Action action, BlockPos position, Direction direction, ItemStack itemstack, InteractionHand hand) {
+    public static @NotNull PlayerInteractEvent callPlayerInteractEvent(net.minecraft.world.entity.player.Player who, @NotNull Action action, BlockPos position, Direction direction, ItemStack itemstack, InteractionHand hand) {
         return CraftEventFactory.callPlayerInteractEvent(who, action, position, direction, itemstack, false, hand);
     }
 
     // Paper start - Add interactionPoint
-    public static PlayerInteractEvent callPlayerInteractEvent(net.minecraft.world.entity.player.Player who, Action action, BlockPos position, Direction direction, ItemStack itemstack, boolean cancelledBlock, InteractionHand hand) {
+    public static @NotNull PlayerInteractEvent callPlayerInteractEvent(net.minecraft.world.entity.player.Player who, @NotNull Action action, BlockPos position, Direction direction, ItemStack itemstack, boolean cancelledBlock, InteractionHand hand) {
         return callPlayerInteractEvent(who, action, position, direction, itemstack, cancelledBlock, hand, null);
     }
 
-    public static PlayerInteractEvent callPlayerInteractEvent(net.minecraft.world.entity.player.Player who, Action action, BlockPos position, Direction direction, ItemStack itemstack, boolean cancelledBlock, InteractionHand hand, Vec3 hitVec) {
+    public static @NotNull PlayerInteractEvent callPlayerInteractEvent(net.minecraft.world.entity.player.Player who, @NotNull Action action, BlockPos position, Direction direction, ItemStack itemstack, boolean cancelledBlock, InteractionHand hand, Vec3 hitVec) {
         // Paper start - correctly handle items on cooldown
         return callPlayerInteractEvent(who, action, position, direction, itemstack, cancelledBlock, false, hand, hitVec);
     }
 
-    public static PlayerInteractEvent callPlayerInteractEvent(net.minecraft.world.entity.player.Player who, Action action, BlockPos position, Direction direction, ItemStack itemstack, boolean cancelledBlock, boolean cancelledItem, InteractionHand hand, Vec3 hitVec) {
+    public static @NotNull PlayerInteractEvent callPlayerInteractEvent(net.minecraft.world.entity.player.@org.jetbrains.annotations.Nullable Player who, @NotNull Action action, @org.jetbrains.annotations.Nullable BlockPos position, Direction direction, ItemStack itemstack, boolean cancelledBlock, boolean cancelledItem, @org.jetbrains.annotations.Nullable InteractionHand hand, @org.jetbrains.annotations.Nullable Vec3 hitVec) {
         // Paper end - correctly handle items on cooldown
         // Paper end
         Player player = (who == null) ? null : (Player) who.getBukkitEntity();
@@ -551,14 +553,14 @@ public class CraftEventFactory {
     /**
      * EntityTransformEvent
      */
-    public static EntityTransformEvent callEntityTransformEvent(net.minecraft.world.entity.LivingEntity original, net.minecraft.world.entity.LivingEntity coverted, EntityTransformEvent.TransformReason transformReason) {
+    public static @NotNull EntityTransformEvent callEntityTransformEvent(net.minecraft.world.entity.@NotNull LivingEntity original, net.minecraft.world.entity.LivingEntity coverted, EntityTransformEvent.@NotNull TransformReason transformReason) {
         return CraftEventFactory.callEntityTransformEvent(original, Collections.singletonList(coverted), transformReason);
     }
 
     /**
      * EntityTransformEvent
      */
-    public static EntityTransformEvent callEntityTransformEvent(net.minecraft.world.entity.LivingEntity original, List<net.minecraft.world.entity.LivingEntity> convertedList, EntityTransformEvent.TransformReason convertType) {
+    public static @NotNull EntityTransformEvent callEntityTransformEvent(net.minecraft.world.entity.@NotNull LivingEntity original, @NotNull List<net.minecraft.world.entity.LivingEntity> convertedList, EntityTransformEvent.@NotNull TransformReason convertType) {
         List<org.bukkit.entity.Entity> list = new ArrayList<>();
         for (net.minecraft.world.entity.LivingEntity entityLiving : convertedList) {
             list.add(entityLiving.getBukkitEntity());
@@ -573,7 +575,7 @@ public class CraftEventFactory {
     /**
      * EntityShootBowEvent
      */
-    public static EntityShootBowEvent callEntityShootBowEvent(net.minecraft.world.entity.LivingEntity who, ItemStack bow, ItemStack consumableItem, Entity entityArrow, InteractionHand hand, float force, boolean consumeItem) {
+    public static @NotNull EntityShootBowEvent callEntityShootBowEvent(net.minecraft.world.entity.@NotNull LivingEntity who, ItemStack bow, ItemStack consumableItem, @NotNull Entity entityArrow, InteractionHand hand, float force, boolean consumeItem) {
         LivingEntity shooter = (LivingEntity) who.getBukkitEntity();
         CraftItemStack itemInHand = CraftItemStack.asCraftMirror(bow);
         CraftItemStack itemConsumable = CraftItemStack.asCraftMirror(consumableItem);
@@ -593,7 +595,7 @@ public class CraftEventFactory {
     /**
      * VillagerCareerChangeEvent
      */
-    public static VillagerCareerChangeEvent callVillagerCareerChangeEvent(net.minecraft.world.entity.npc.Villager vilager, Profession future, VillagerCareerChangeEvent.ChangeReason reason) {
+    public static @NotNull VillagerCareerChangeEvent callVillagerCareerChangeEvent(net.minecraft.world.entity.npc.@NotNull Villager vilager, @NotNull Profession future, VillagerCareerChangeEvent.@NotNull ChangeReason reason) {
         VillagerCareerChangeEvent event = new VillagerCareerChangeEvent((Villager) vilager.getBukkitEntity(), future, reason);
         Bukkit.getPluginManager().callEvent(event);
 
@@ -603,7 +605,7 @@ public class CraftEventFactory {
     /**
      * BlockDamageEvent
      */
-    public static BlockDamageEvent callBlockDamageEvent(ServerPlayer who, BlockPos pos, ItemStack itemstack, boolean instaBreak) {
+    public static @NotNull BlockDamageEvent callBlockDamageEvent(@NotNull ServerPlayer who, @NotNull BlockPos pos, ItemStack itemstack, boolean instaBreak) {
         Player player = who.getBukkitEntity();
         CraftItemStack itemInHand = CraftItemStack.asCraftMirror(itemstack);
 
@@ -615,7 +617,7 @@ public class CraftEventFactory {
         return event;
     }
 
-    public static BlockDamageAbortEvent callBlockDamageAbortEvent(ServerPlayer who, BlockPos pos, ItemStack itemstack) {
+    public static @NotNull BlockDamageAbortEvent callBlockDamageAbortEvent(@NotNull ServerPlayer who, @NotNull BlockPos pos, ItemStack itemstack) {
         Player player = who.getBukkitEntity();
         CraftItemStack itemInHand = CraftItemStack.asCraftMirror(itemstack);
 
@@ -627,7 +629,7 @@ public class CraftEventFactory {
         return event;
     }
 
-    public static boolean doEntityAddEventCalling(Level world, Entity entity, SpawnReason spawnReason) {
+    public static boolean doEntityAddEventCalling(@NotNull Level world, @org.jetbrains.annotations.Nullable Entity entity, @NotNull SpawnReason spawnReason) {
         if (entity == null) return false;
 
         org.bukkit.event.Cancellable event = null;
@@ -722,7 +724,7 @@ public class CraftEventFactory {
     /**
      * EntitySpawnEvent
      */
-    public static EntitySpawnEvent callEntitySpawnEvent(Entity entity) {
+    public static @NotNull EntitySpawnEvent callEntitySpawnEvent(@NotNull Entity entity) {
         org.bukkit.entity.Entity bukkitEntity = entity.getBukkitEntity();
 
         EntitySpawnEvent event = new EntitySpawnEvent(bukkitEntity);
@@ -733,7 +735,7 @@ public class CraftEventFactory {
     /**
      * CreatureSpawnEvent
      */
-    public static CreatureSpawnEvent callCreatureSpawnEvent(net.minecraft.world.entity.LivingEntity entityliving, SpawnReason spawnReason) {
+    public static @NotNull CreatureSpawnEvent callCreatureSpawnEvent(net.minecraft.world.entity.@NotNull LivingEntity entityliving, @NotNull SpawnReason spawnReason) {
         LivingEntity entity = (LivingEntity) entityliving.getBukkitEntity();
         CraftServer craftServer = (CraftServer) entity.getServer();
 
@@ -745,7 +747,7 @@ public class CraftEventFactory {
     /**
      * EntityTameEvent
      */
-    public static EntityTameEvent callEntityTameEvent(Mob entity, net.minecraft.world.entity.player.Player tamer) {
+    public static @NotNull EntityTameEvent callEntityTameEvent(@NotNull Mob entity, net.minecraft.world.entity.player.@org.jetbrains.annotations.Nullable Player tamer) {
         org.bukkit.entity.Entity bukkitEntity = entity.getBukkitEntity();
         org.bukkit.entity.AnimalTamer bukkitTamer = (tamer != null ? tamer.getBukkitEntity() : null);
         CraftServer craftServer = (CraftServer) bukkitEntity.getServer();
@@ -758,7 +760,7 @@ public class CraftEventFactory {
     /**
      * ItemSpawnEvent
      */
-    public static ItemSpawnEvent callItemSpawnEvent(ItemEntity entityitem) {
+    public static @NotNull ItemSpawnEvent callItemSpawnEvent(@NotNull ItemEntity entityitem) {
         org.bukkit.entity.Item entity = (org.bukkit.entity.Item) entityitem.getBukkitEntity();
         CraftServer craftServer = (CraftServer) entity.getServer();
 
@@ -771,7 +773,7 @@ public class CraftEventFactory {
     /**
      * ItemDespawnEvent
      */
-    public static ItemDespawnEvent callItemDespawnEvent(ItemEntity entityitem) {
+    public static @NotNull ItemDespawnEvent callItemDespawnEvent(@NotNull ItemEntity entityitem) {
         org.bukkit.entity.Item entity = (org.bukkit.entity.Item) entityitem.getBukkitEntity();
 
         ItemDespawnEvent event = new ItemDespawnEvent(entity, entity.getLocation());
@@ -783,7 +785,7 @@ public class CraftEventFactory {
     /**
      * ItemMergeEvent
      */
-    public static ItemMergeEvent callItemMergeEvent(ItemEntity merging, ItemEntity mergingWith) {
+    public static @NotNull ItemMergeEvent callItemMergeEvent(@NotNull ItemEntity merging, @NotNull ItemEntity mergingWith) {
         org.bukkit.entity.Item entityMerging = (org.bukkit.entity.Item) merging.getBukkitEntity();
         org.bukkit.entity.Item entityMergingWith = (org.bukkit.entity.Item) mergingWith.getBukkitEntity();
 
@@ -796,7 +798,7 @@ public class CraftEventFactory {
     /**
      * PotionSplashEvent
      */
-    public static PotionSplashEvent callPotionSplashEvent(net.minecraft.world.entity.projectile.ThrownPotion potion, Map<LivingEntity, Double> affectedEntities) {
+    public static @NotNull PotionSplashEvent callPotionSplashEvent(net.minecraft.world.entity.projectile.@NotNull ThrownPotion potion, @NotNull Map<LivingEntity, Double> affectedEntities) {
         ThrownPotion thrownPotion = (ThrownPotion) potion.getBukkitEntity();
 
         PotionSplashEvent event = new PotionSplashEvent(thrownPotion, affectedEntities);
@@ -804,7 +806,7 @@ public class CraftEventFactory {
         return event;
     }
 
-    public static LingeringPotionSplashEvent callLingeringPotionSplashEvent(net.minecraft.world.entity.projectile.ThrownPotion potion, net.minecraft.world.entity.AreaEffectCloud cloud) {
+    public static @NotNull LingeringPotionSplashEvent callLingeringPotionSplashEvent(net.minecraft.world.entity.projectile.@NotNull ThrownPotion potion, net.minecraft.world.entity.@NotNull AreaEffectCloud cloud) {
         ThrownPotion thrownPotion = (ThrownPotion) potion.getBukkitEntity();
         AreaEffectCloud effectCloud = (AreaEffectCloud) cloud.getBukkitEntity();
 
@@ -816,7 +818,7 @@ public class CraftEventFactory {
     /**
      * BlockFadeEvent
      */
-    public static BlockFadeEvent callBlockFadeEvent(LevelAccessor world, BlockPos pos, net.minecraft.world.level.block.state.BlockState newBlock) {
+    public static @NotNull BlockFadeEvent callBlockFadeEvent(LevelAccessor world, @NotNull BlockPos pos, net.minecraft.world.level.block.state.BlockState newBlock) {
         CraftBlockState state = CraftBlockStates.getBlockState(world, pos);
         state.setData(newBlock);
 
@@ -825,7 +827,7 @@ public class CraftEventFactory {
         return event;
     }
 
-    public static boolean handleMoistureChangeEvent(Level world, BlockPos pos, net.minecraft.world.level.block.state.BlockState newBlock, int flag) {
+    public static boolean handleMoistureChangeEvent(Level world, @NotNull BlockPos pos, net.minecraft.world.level.block.state.BlockState newBlock, int flag) {
         CraftBlockState state = CraftBlockStates.getBlockState(world, pos, flag);
         state.setData(newBlock);
 
@@ -838,12 +840,12 @@ public class CraftEventFactory {
         return !event.isCancelled();
     }
 
-    public static boolean handleBlockSpreadEvent(Level world, BlockPos source, BlockPos target, net.minecraft.world.level.block.state.BlockState block) {
+    public static boolean handleBlockSpreadEvent(Level world, BlockPos source, @NotNull BlockPos target, net.minecraft.world.level.block.state.@NotNull BlockState block) {
         return CraftEventFactory.handleBlockSpreadEvent(world, source, target, block, 2);
     }
 
-    public static BlockPos sourceBlockOverride = null; // SPIGOT-7068: Add source block override, not the most elegant way but better than passing down a BlockPosition up to five methods deep.
-    public static boolean handleBlockSpreadEvent(LevelAccessor world, BlockPos source, BlockPos target, net.minecraft.world.level.block.state.BlockState block, int flag) {
+    public static @org.jetbrains.annotations.Nullable BlockPos sourceBlockOverride = null; // SPIGOT-7068: Add source block override, not the most elegant way but better than passing down a BlockPosition up to five methods deep.
+    public static boolean handleBlockSpreadEvent(LevelAccessor world, BlockPos source, @NotNull BlockPos target, net.minecraft.world.level.block.state.@NotNull BlockState block, int flag) {
         // Suppress during worldgen
         if (!(world instanceof Level)) {
             world.setBlock(target, block, flag);
@@ -862,15 +864,15 @@ public class CraftEventFactory {
         return !event.isCancelled();
     }
 
-    public static EntityDeathEvent callEntityDeathEvent(net.minecraft.world.entity.LivingEntity victim) {
+    public static @NotNull EntityDeathEvent callEntityDeathEvent(net.minecraft.world.entity.@NotNull LivingEntity victim) {
         return CraftEventFactory.callEntityDeathEvent(victim, new ArrayList<org.bukkit.inventory.ItemStack>(0));
     }
 
-    public static EntityDeathEvent callEntityDeathEvent(net.minecraft.world.entity.LivingEntity victim, List<org.bukkit.inventory.ItemStack> drops) {
+    public static @NotNull EntityDeathEvent callEntityDeathEvent(net.minecraft.world.entity.@NotNull LivingEntity victim, @NotNull List<org.bukkit.inventory.ItemStack> drops) {
         // Paper start
         return CraftEventFactory.callEntityDeathEvent(victim, drops, com.google.common.util.concurrent.Runnables.doNothing());
     }
-    public static EntityDeathEvent callEntityDeathEvent(net.minecraft.world.entity.LivingEntity victim, List<org.bukkit.inventory.ItemStack> drops, Runnable lootCheck) {
+    public static @NotNull EntityDeathEvent callEntityDeathEvent(net.minecraft.world.entity.@NotNull LivingEntity victim, @NotNull List<org.bukkit.inventory.ItemStack> drops, @NotNull Runnable lootCheck) {
         // Paper end
         CraftLivingEntity entity = (CraftLivingEntity) victim.getBukkitEntity();
         EntityDeathEvent event = new EntityDeathEvent(entity, drops, victim.getExpReward());
@@ -897,7 +899,7 @@ public class CraftEventFactory {
         return event;
     }
 
-    public static PlayerDeathEvent callPlayerDeathEvent(ServerPlayer victim, List<org.bukkit.inventory.ItemStack> drops, net.kyori.adventure.text.Component deathMessage, String stringDeathMessage, boolean keepInventory) { // Paper - Adventure
+    public static @NotNull PlayerDeathEvent callPlayerDeathEvent(@NotNull ServerPlayer victim, @NotNull List<org.bukkit.inventory.ItemStack> drops, net.kyori.adventure.text.Component deathMessage, String stringDeathMessage, boolean keepInventory) { // Paper - Adventure
         CraftPlayer entity = victim.getBukkitEntity();
         PlayerDeathEvent event = new PlayerDeathEvent(entity, drops, victim.getExpReward(), 0, deathMessage, stringDeathMessage); // Paper - Adventure
         event.setKeepInventory(keepInventory);
@@ -929,7 +931,7 @@ public class CraftEventFactory {
 
     // Paper start - helper methods for making death event cancellable
     // Add information to death event
-    private static void populateFields(net.minecraft.world.entity.LivingEntity victim, EntityDeathEvent event) {
+    private static void populateFields(net.minecraft.world.entity.@NotNull LivingEntity victim, @NotNull EntityDeathEvent event) {
         event.setReviveHealth(event.getEntity().getAttribute(org.bukkit.attribute.Attribute.GENERIC_MAX_HEALTH).getValue());
         event.setShouldPlayDeathSound(!victim.silentDeath && !victim.isSilent());
         net.minecraft.sounds.SoundEvent soundEffect = victim.getDeathSound();
@@ -940,7 +942,7 @@ public class CraftEventFactory {
     }
 
     // Play death sound manually
-    private static void playDeathSound(net.minecraft.world.entity.LivingEntity victim, EntityDeathEvent event) {
+    private static void playDeathSound(net.minecraft.world.entity.LivingEntity victim, @NotNull EntityDeathEvent event) {
         if (event.shouldPlayDeathSound() && event.getDeathSound() != null && event.getDeathSoundCategory() != null) {
             net.minecraft.world.entity.player.Player source = victim instanceof net.minecraft.world.entity.player.Player ? (net.minecraft.world.entity.player.Player) victim : null;
             double x = event.getEntity().getLocation().getX();
@@ -955,17 +957,17 @@ public class CraftEventFactory {
     /**
      * Server methods
      */
-    public static ServerListPingEvent callServerListPingEvent(Server craftServer, InetAddress address, String motd, int numPlayers, int maxPlayers) {
+    public static @NotNull ServerListPingEvent callServerListPingEvent(@NotNull Server craftServer, @NotNull InetAddress address, String motd, int numPlayers, int maxPlayers) {
         ServerListPingEvent event = new ServerListPingEvent("", address, craftServer.motd(), numPlayers, maxPlayers); // Paper - Adventure
         craftServer.getPluginManager().callEvent(event);
         return event;
     }
 
-    private static EntityDamageEvent handleEntityDamageEvent(Entity entity, DamageSource source, Map<DamageModifier, Double> modifiers, Map<DamageModifier, Function<? super Double, Double>> modifierFunctions) {
+    private static @NotNull EntityDamageEvent handleEntityDamageEvent(@NotNull Entity entity, @NotNull DamageSource source, @NotNull Map<DamageModifier, Double> modifiers, @NotNull Map<DamageModifier, Function<? super Double, Double>> modifierFunctions) {
         return CraftEventFactory.handleEntityDamageEvent(entity, source, modifiers, modifierFunctions, false);
     }
 
-    private static EntityDamageEvent handleEntityDamageEvent(Entity entity, DamageSource source, Map<DamageModifier, Double> modifiers, Map<DamageModifier, Function<? super Double, Double>> modifierFunctions, boolean cancelled) {
+    private static @NotNull EntityDamageEvent handleEntityDamageEvent(@NotNull Entity entity, @NotNull DamageSource source, @NotNull Map<DamageModifier, Double> modifiers, @NotNull Map<DamageModifier, Function<? super Double, Double>> modifierFunctions, boolean cancelled) {
         if (source.isExplosion()) {
             DamageCause damageCause;
             Entity damager = CraftEventFactory.entityDamage;
@@ -1132,17 +1134,17 @@ public class CraftEventFactory {
     }
 
     @Deprecated // Paper - Add critical damage API
-    private static EntityDamageEvent callEntityDamageEvent(Entity damager, Entity damagee, DamageCause cause, Map<DamageModifier, Double> modifiers, Map<DamageModifier, Function<? super Double, Double>> modifierFunctions) {
+    private static @NotNull EntityDamageEvent callEntityDamageEvent(Entity damager, @NotNull Entity damagee, @NotNull DamageCause cause, @NotNull Map<DamageModifier, Double> modifiers, @NotNull Map<DamageModifier, Function<? super Double, Double>> modifierFunctions) {
         return CraftEventFactory.callEntityDamageEvent(damager, damagee, cause, modifiers, modifierFunctions, false);
     }
 
     // Paper start - Add critical damage API
     @Deprecated
-    private static EntityDamageEvent callEntityDamageEvent(Entity damager, Entity damagee, DamageCause cause, Map<DamageModifier, Double> modifiers, Map<DamageModifier, Function<? super Double, Double>> modifierFunctions, boolean cancelled) {
+    private static @NotNull EntityDamageEvent callEntityDamageEvent(Entity damager, @NotNull Entity damagee, @NotNull DamageCause cause, @NotNull Map<DamageModifier, Double> modifiers, @NotNull Map<DamageModifier, Function<? super Double, Double>> modifierFunctions, boolean cancelled) {
         return CraftEventFactory.callEntityDamageEvent(damager, damagee, cause, modifiers, modifierFunctions, false, false);
     }
 
-    private static EntityDamageEvent callEntityDamageEvent(Entity damager, Entity damagee, DamageCause cause, Map<DamageModifier, Double> modifiers, Map<DamageModifier, Function<? super Double, Double>> modifierFunctions, boolean cancelled, boolean critical) {
+    private static @NotNull EntityDamageEvent callEntityDamageEvent(@org.jetbrains.annotations.Nullable Entity damager, @NotNull Entity damagee, @NotNull DamageCause cause, @NotNull Map<DamageModifier, Double> modifiers, @NotNull Map<DamageModifier, Function<? super Double, Double>> modifierFunctions, boolean cancelled, boolean critical) {
         // Paper end
         EntityDamageEvent event;
         if (damager != null) {
@@ -1164,7 +1166,7 @@ public class CraftEventFactory {
 
     private static final Function<? super Double, Double> ZERO = Functions.constant(-0.0);
 
-    public static EntityDamageEvent handleLivingEntityDamageEvent(Entity damagee, DamageSource source, double rawDamage, double hardHatModifier, double blockingModifier, double armorModifier, double resistanceModifier, double magicModifier, double absorptionModifier, Function<Double, Double> hardHat, Function<Double, Double> blocking, Function<Double, Double> armor, Function<Double, Double> resistance, Function<Double, Double> magic, Function<Double, Double> absorption) {
+    public static @NotNull EntityDamageEvent handleLivingEntityDamageEvent(Entity damagee, @NotNull DamageSource source, double rawDamage, double hardHatModifier, double blockingModifier, double armorModifier, double resistanceModifier, double magicModifier, double absorptionModifier, Function<Double, Double> hardHat, Function<Double, Double> blocking, Function<Double, Double> armor, Function<Double, Double> resistance, Function<Double, Double> magic, Function<Double, Double> absorption) {
         Map<DamageModifier, Double> modifiers = new EnumMap<DamageModifier, Double>(DamageModifier.class);
         Map<DamageModifier, Function<? super Double, Double>> modifierFunctions = new EnumMap<DamageModifier, Function<? super Double, Double>>(DamageModifier.class);
         modifiers.put(DamageModifier.BASE, rawDamage);
@@ -1189,15 +1191,15 @@ public class CraftEventFactory {
     }
 
     // Non-Living Entities such as EntityEnderCrystal and EntityFireball need to call this
-    public static boolean handleNonLivingEntityDamageEvent(Entity entity, DamageSource source, double damage) {
+    public static boolean handleNonLivingEntityDamageEvent(@NotNull Entity entity, @NotNull DamageSource source, double damage) {
         return CraftEventFactory.handleNonLivingEntityDamageEvent(entity, source, damage, true);
     }
 
-    public static boolean handleNonLivingEntityDamageEvent(Entity entity, DamageSource source, double damage, boolean cancelOnZeroDamage) {
+    public static boolean handleNonLivingEntityDamageEvent(@NotNull Entity entity, @NotNull DamageSource source, double damage, boolean cancelOnZeroDamage) {
         return CraftEventFactory.handleNonLivingEntityDamageEvent(entity, source, damage, cancelOnZeroDamage, false);
     }
 
-    public static boolean handleNonLivingEntityDamageEvent(Entity entity, DamageSource source, double damage, boolean cancelOnZeroDamage, boolean cancelled) {
+    public static boolean handleNonLivingEntityDamageEvent(@NotNull Entity entity, @NotNull DamageSource source, double damage, boolean cancelOnZeroDamage, boolean cancelled) {
         final EnumMap<DamageModifier, Double> modifiers = new EnumMap<DamageModifier, Double>(DamageModifier.class);
         final EnumMap<DamageModifier, Function<? super Double, Double>> functions = new EnumMap(DamageModifier.class);
 
@@ -1212,20 +1214,20 @@ public class CraftEventFactory {
         return event.isCancelled() || (cancelOnZeroDamage && event.getDamage() == 0);
     }
 
-    public static PlayerLevelChangeEvent callPlayerLevelChangeEvent(Player player, int oldLevel, int newLevel) {
+    public static @NotNull PlayerLevelChangeEvent callPlayerLevelChangeEvent(@NotNull Player player, int oldLevel, int newLevel) {
         PlayerLevelChangeEvent event = new PlayerLevelChangeEvent(player, oldLevel, newLevel);
         Bukkit.getPluginManager().callEvent(event);
         return event;
     }
 
-    public static PlayerExpChangeEvent callPlayerExpChangeEvent(net.minecraft.world.entity.player.Player entity, int expAmount) {
+    public static @NotNull PlayerExpChangeEvent callPlayerExpChangeEvent(net.minecraft.world.entity.player.@NotNull Player entity, int expAmount) {
         Player player = (Player) entity.getBukkitEntity();
         PlayerExpChangeEvent event = new PlayerExpChangeEvent(player, expAmount);
         Bukkit.getPluginManager().callEvent(event);
         return event;
     }
 
-    public static PlayerItemMendEvent callPlayerItemMendEvent(net.minecraft.world.entity.player.Player entity, net.minecraft.world.entity.ExperienceOrb orb, net.minecraft.world.item.ItemStack nmsMendedItem, net.minecraft.world.entity.EquipmentSlot slot, int repairAmount) {
+    public static @NotNull PlayerItemMendEvent callPlayerItemMendEvent(net.minecraft.world.entity.player.@NotNull Player entity, net.minecraft.world.entity.@NotNull ExperienceOrb orb, net.minecraft.world.item.ItemStack nmsMendedItem, net.minecraft.world.entity.@NotNull EquipmentSlot slot, int repairAmount) {
         Player player = (Player) entity.getBukkitEntity();
         org.bukkit.inventory.ItemStack bukkitStack = CraftItemStack.asCraftMirror(nmsMendedItem);
         PlayerItemMendEvent event = new PlayerItemMendEvent(player, bukkitStack, CraftEquipmentSlot.getSlot(slot), (ExperienceOrb) orb.getBukkitEntity(), repairAmount);
@@ -1234,7 +1236,7 @@ public class CraftEventFactory {
     }
 
     // Paper start - Add orb
-    public static PlayerExpChangeEvent callPlayerExpChangeEvent(net.minecraft.world.entity.player.Player entity, net.minecraft.world.entity.ExperienceOrb entityOrb) {
+    public static @NotNull PlayerExpChangeEvent callPlayerExpChangeEvent(net.minecraft.world.entity.player.@NotNull Player entity, net.minecraft.world.entity.@NotNull ExperienceOrb entityOrb) {
         Player player = (Player) entity.getBukkitEntity();
         ExperienceOrb source = (ExperienceOrb) entityOrb.getBukkitEntity();
         int expAmount = source.getExperience();
@@ -1244,11 +1246,11 @@ public class CraftEventFactory {
     }
     // Paper end
 
-    public static boolean handleBlockGrowEvent(Level world, BlockPos pos, net.minecraft.world.level.block.state.BlockState block) {
+    public static boolean handleBlockGrowEvent(@NotNull Level world, @NotNull BlockPos pos, net.minecraft.world.level.block.state.BlockState block) {
         return CraftEventFactory.handleBlockGrowEvent(world, pos, block, 3);
     }
 
-    public static boolean handleBlockGrowEvent(Level world, BlockPos pos, net.minecraft.world.level.block.state.BlockState newData, int flag) {
+    public static boolean handleBlockGrowEvent(@NotNull Level world, @NotNull BlockPos pos, net.minecraft.world.level.block.state.BlockState newData, int flag) {
         Block block = world.getWorld().getBlockAt(pos.getX(), pos.getY(), pos.getZ());
         CraftBlockState state = (CraftBlockState) block.getState();
         state.setData(newData);
@@ -1263,47 +1265,47 @@ public class CraftEventFactory {
         return !event.isCancelled();
     }
 
-    public static FluidLevelChangeEvent callFluidLevelChangeEvent(Level world, BlockPos block, net.minecraft.world.level.block.state.BlockState newData) {
+    public static @NotNull FluidLevelChangeEvent callFluidLevelChangeEvent(@NotNull Level world, @NotNull BlockPos block, net.minecraft.world.level.block.state.@NotNull BlockState newData) {
         FluidLevelChangeEvent event = new FluidLevelChangeEvent(CraftBlock.at(world, block), CraftBlockData.fromData(newData));
         world.getCraftServer().getPluginManager().callEvent(event);
         return event;
     }
 
-    public static FoodLevelChangeEvent callFoodLevelChangeEvent(net.minecraft.world.entity.player.Player entity, int level) {
+    public static @NotNull FoodLevelChangeEvent callFoodLevelChangeEvent(net.minecraft.world.entity.player.@NotNull Player entity, int level) {
         return CraftEventFactory.callFoodLevelChangeEvent(entity, level, null);
     }
 
-    public static FoodLevelChangeEvent callFoodLevelChangeEvent(net.minecraft.world.entity.player.Player entity, int level, ItemStack item) {
+    public static @NotNull FoodLevelChangeEvent callFoodLevelChangeEvent(net.minecraft.world.entity.player.@NotNull Player entity, int level, @org.jetbrains.annotations.Nullable ItemStack item) {
         FoodLevelChangeEvent event = new FoodLevelChangeEvent(entity.getBukkitEntity(), level, (item == null) ? null : CraftItemStack.asBukkitCopy(item));
         entity.getBukkitEntity().getServer().getPluginManager().callEvent(event);
         return event;
     }
 
-    public static PigZapEvent callPigZapEvent(Entity pig, Entity lightning, Entity pigzombie) {
+    public static @NotNull PigZapEvent callPigZapEvent(@NotNull Entity pig, @NotNull Entity lightning, @NotNull Entity pigzombie) {
         PigZapEvent event = new PigZapEvent((Pig) pig.getBukkitEntity(), (LightningStrike) lightning.getBukkitEntity(), (PigZombie) pigzombie.getBukkitEntity());
         pig.getBukkitEntity().getServer().getPluginManager().callEvent(event);
         return event;
     }
 
     // Paper start
-    public static com.destroystokyo.paper.event.entity.EntityZapEvent callEntityZapEvent (Entity entity, Entity lightning, Entity changedEntity) {
+    public static com.destroystokyo.paper.event.entity.@NotNull EntityZapEvent callEntityZapEvent (@NotNull Entity entity, @NotNull Entity lightning, @NotNull Entity changedEntity) {
         com.destroystokyo.paper.event.entity.EntityZapEvent event = new com.destroystokyo.paper.event.entity.EntityZapEvent(entity.getBukkitEntity(), (LightningStrike) lightning.getBukkitEntity(), changedEntity.getBukkitEntity());
         entity.getBukkitEntity().getServer().getPluginManager().callEvent(event);
         return event;
     }
     // Paper end
 
-    public static HorseJumpEvent callHorseJumpEvent(Entity horse, float power) {
+    public static @NotNull HorseJumpEvent callHorseJumpEvent(@NotNull Entity horse, float power) {
         HorseJumpEvent event = new HorseJumpEvent((AbstractHorse) horse.getBukkitEntity(), power);
         horse.getBukkitEntity().getServer().getPluginManager().callEvent(event);
         return event;
     }
 
-    public static EntityChangeBlockEvent callEntityChangeBlockEvent(Entity entity, BlockPos position, net.minecraft.world.level.block.state.BlockState newBlock) {
+    public static @NotNull EntityChangeBlockEvent callEntityChangeBlockEvent(@NotNull Entity entity, @NotNull BlockPos position, net.minecraft.world.level.block.state.@NotNull BlockState newBlock) {
         return CraftEventFactory.callEntityChangeBlockEvent(entity, position, newBlock, false);
     }
 
-    public static EntityChangeBlockEvent callEntityChangeBlockEvent(Entity entity, BlockPos position, net.minecraft.world.level.block.state.BlockState newBlock, boolean cancelled) {
+    public static @NotNull EntityChangeBlockEvent callEntityChangeBlockEvent(@NotNull Entity entity, @NotNull BlockPos position, net.minecraft.world.level.block.state.@NotNull BlockState newBlock, boolean cancelled) {
         Block block = entity.level.getWorld().getBlockAt(position.getX(), position.getY(), position.getZ());
 
         EntityChangeBlockEvent event = new EntityChangeBlockEvent(entity.getBukkitEntity(), block, CraftBlockData.fromData(newBlock));
@@ -1312,25 +1314,25 @@ public class CraftEventFactory {
         return event;
     }
 
-    public static CreeperPowerEvent callCreeperPowerEvent(Entity creeper, Entity lightning, CreeperPowerEvent.PowerCause cause) {
+    public static @NotNull CreeperPowerEvent callCreeperPowerEvent(@NotNull Entity creeper, @NotNull Entity lightning, CreeperPowerEvent.@NotNull PowerCause cause) {
         CreeperPowerEvent event = new CreeperPowerEvent((Creeper) creeper.getBukkitEntity(), (LightningStrike) lightning.getBukkitEntity(), cause);
         creeper.getBukkitEntity().getServer().getPluginManager().callEvent(event);
         return event;
     }
 
-    public static EntityTargetEvent callEntityTargetEvent(Entity entity, Entity target, EntityTargetEvent.TargetReason reason) {
+    public static @NotNull EntityTargetEvent callEntityTargetEvent(@NotNull Entity entity, @org.jetbrains.annotations.Nullable Entity target, EntityTargetEvent.@NotNull TargetReason reason) {
         EntityTargetEvent event = new EntityTargetEvent(entity.getBukkitEntity(), (target == null) ? null : target.getBukkitEntity(), reason);
         entity.getBukkitEntity().getServer().getPluginManager().callEvent(event);
         return event;
     }
 
-    public static EntityTargetLivingEntityEvent callEntityTargetLivingEvent(Entity entity, net.minecraft.world.entity.LivingEntity target, EntityTargetEvent.TargetReason reason) {
+    public static @NotNull EntityTargetLivingEntityEvent callEntityTargetLivingEvent(@NotNull Entity entity, net.minecraft.world.entity.@org.jetbrains.annotations.Nullable LivingEntity target, EntityTargetEvent.TargetReason reason) {
         EntityTargetLivingEntityEvent event = new EntityTargetLivingEntityEvent(entity.getBukkitEntity(), (target == null) ? null : (LivingEntity) target.getBukkitEntity(), reason);
         entity.getBukkitEntity().getServer().getPluginManager().callEvent(event);
         return event;
     }
 
-    public static EntityBreakDoorEvent callEntityBreakDoorEvent(Entity entity, BlockPos pos) {
+    public static @NotNull EntityBreakDoorEvent callEntityBreakDoorEvent(@NotNull Entity entity, @NotNull BlockPos pos) {
         org.bukkit.entity.Entity entity1 = entity.getBukkitEntity();
         Block block = CraftBlock.at(entity.level, pos);
 
@@ -1340,11 +1342,11 @@ public class CraftEventFactory {
         return event;
     }
 
-    public static AbstractContainerMenu callInventoryOpenEvent(ServerPlayer player, AbstractContainerMenu container) {
+    public static @org.jetbrains.annotations.Nullable AbstractContainerMenu callInventoryOpenEvent(@NotNull ServerPlayer player, @NotNull AbstractContainerMenu container) {
         return CraftEventFactory.callInventoryOpenEvent(player, container, false);
     }
 
-    public static AbstractContainerMenu callInventoryOpenEvent(ServerPlayer player, AbstractContainerMenu container, boolean cancelled) {
+    public static @org.jetbrains.annotations.Nullable AbstractContainerMenu callInventoryOpenEvent(@NotNull ServerPlayer player, @NotNull AbstractContainerMenu container, boolean cancelled) {
         if (player.containerMenu != player.inventoryMenu) { // fire INVENTORY_CLOSE if one already open
             player.connection.handleContainerClose(new ServerboundContainerClosePacket(player.containerMenu.containerId), InventoryCloseEvent.Reason.OPEN_NEW); // Paper
         }
@@ -1365,7 +1367,7 @@ public class CraftEventFactory {
         return container;
     }
 
-    public static ItemStack callPreCraftEvent(Container matrix, Container resultInventory, ItemStack result, InventoryView lastCraftView, boolean isRepair) {
+    public static ItemStack callPreCraftEvent(Container matrix, Container resultInventory, ItemStack result, @NotNull InventoryView lastCraftView, boolean isRepair) {
         CraftInventoryCrafting inventory = new CraftInventoryCrafting(matrix, resultInventory);
         inventory.setResult(CraftItemStack.asCraftMirror(result));
 
@@ -1379,7 +1381,7 @@ public class CraftEventFactory {
 
     // Paper start
     @Deprecated
-    public static com.destroystokyo.paper.event.entity.ProjectileCollideEvent callProjectileCollideEvent(Entity entity, EntityHitResult position) {
+    public static com.destroystokyo.paper.event.entity.@NotNull ProjectileCollideEvent callProjectileCollideEvent(@NotNull Entity entity, @NotNull EntityHitResult position) {
         Projectile projectile = (Projectile) entity.getBukkitEntity();
         org.bukkit.entity.Entity collided = position.getEntity().getBukkitEntity();
         com.destroystokyo.paper.event.entity.ProjectileCollideEvent event = new com.destroystokyo.paper.event.entity.ProjectileCollideEvent(projectile, collided);
@@ -1396,14 +1398,14 @@ public class CraftEventFactory {
     }
     // Paper end
 
-    public static ProjectileLaunchEvent callProjectileLaunchEvent(Entity entity) {
+    public static @NotNull ProjectileLaunchEvent callProjectileLaunchEvent(@NotNull Entity entity) {
         Projectile bukkitEntity = (Projectile) entity.getBukkitEntity();
         ProjectileLaunchEvent event = new ProjectileLaunchEvent(bukkitEntity);
         Bukkit.getPluginManager().callEvent(event);
         return event;
     }
 
-    public static ProjectileHitEvent callProjectileHitEvent(Entity entity, HitResult position) {
+    public static @org.jetbrains.annotations.Nullable ProjectileHitEvent callProjectileHitEvent(@NotNull Entity entity, @NotNull HitResult position) {
         if (position.getType() == HitResult.Type.MISS) {
             return null;
         }
@@ -1433,32 +1435,32 @@ public class CraftEventFactory {
         return event;
     }
 
-    public static ExpBottleEvent callExpBottleEvent(Entity entity, int exp) {
+    public static @NotNull ExpBottleEvent callExpBottleEvent(@NotNull Entity entity, int exp) {
         ThrownExpBottle bottle = (ThrownExpBottle) entity.getBukkitEntity();
         ExpBottleEvent event = new ExpBottleEvent(bottle, exp);
         Bukkit.getPluginManager().callEvent(event);
         return event;
     }
 
-    public static BlockRedstoneEvent callRedstoneChange(Level world, BlockPos pos, int oldCurrent, int newCurrent) {
+    public static @NotNull BlockRedstoneEvent callRedstoneChange(@NotNull Level world, @NotNull BlockPos pos, int oldCurrent, int newCurrent) {
         BlockRedstoneEvent event = new BlockRedstoneEvent(world.getWorld().getBlockAt(pos.getX(), pos.getY(), pos.getZ()), oldCurrent, newCurrent);
         world.getCraftServer().getPluginManager().callEvent(event);
         return event;
     }
 
-    public static NotePlayEvent callNotePlayEvent(Level world, BlockPos pos, NoteBlockInstrument instrument, int note) {
+    public static @NotNull NotePlayEvent callNotePlayEvent(@NotNull Level world, @NotNull BlockPos pos, @NotNull NoteBlockInstrument instrument, int note) {
         NotePlayEvent event = new NotePlayEvent(world.getWorld().getBlockAt(pos.getX(), pos.getY(), pos.getZ()), org.bukkit.Instrument.getByType((byte) instrument.ordinal()), new org.bukkit.Note(note));
         world.getCraftServer().getPluginManager().callEvent(event);
         return event;
     }
 
-    public static void callPlayerItemBreakEvent(net.minecraft.world.entity.player.Player human, ItemStack brokenItem) {
+    public static void callPlayerItemBreakEvent(net.minecraft.world.entity.player.@NotNull Player human, ItemStack brokenItem) {
         CraftItemStack item = CraftItemStack.asCraftMirror(brokenItem);
         PlayerItemBreakEvent event = new PlayerItemBreakEvent((Player) human.getBukkitEntity(), item);
         Bukkit.getPluginManager().callEvent(event);
     }
 
-    public static BlockIgniteEvent callBlockIgniteEvent(Level world, BlockPos block, BlockPos source) {
+    public static @NotNull BlockIgniteEvent callBlockIgniteEvent(@NotNull Level world, @NotNull BlockPos block, @NotNull BlockPos source) {
         org.bukkit.World bukkitWorld = world.getWorld();
         Block igniter = bukkitWorld.getBlockAt(source.getX(), source.getY(), source.getZ());
         IgniteCause cause;
@@ -1479,7 +1481,7 @@ public class CraftEventFactory {
         return event;
     }
 
-    public static BlockIgniteEvent callBlockIgniteEvent(Level world, BlockPos pos, Entity igniter) {
+    public static @NotNull BlockIgniteEvent callBlockIgniteEvent(@NotNull Level world, @NotNull BlockPos pos, @NotNull Entity igniter) {
         org.bukkit.World bukkitWorld = world.getWorld();
         org.bukkit.entity.Entity bukkitIgniter = igniter.getBukkitEntity();
         IgniteCause cause;
@@ -1513,7 +1515,7 @@ public class CraftEventFactory {
         return event;
     }
 
-    public static BlockIgniteEvent callBlockIgniteEvent(Level world, int x, int y, int z, Explosion explosion) {
+    public static @NotNull BlockIgniteEvent callBlockIgniteEvent(@NotNull Level world, int x, int y, int z, @NotNull Explosion explosion) {
         org.bukkit.World bukkitWorld = world.getWorld();
         org.bukkit.entity.Entity igniter = explosion.source == null ? null : explosion.source.getBukkitEntity();
 
@@ -1522,7 +1524,7 @@ public class CraftEventFactory {
         return event;
     }
 
-    public static BlockIgniteEvent callBlockIgniteEvent(Level world, BlockPos pos, IgniteCause cause, Entity igniter) {
+    public static @NotNull BlockIgniteEvent callBlockIgniteEvent(@NotNull Level world, @NotNull BlockPos pos, @NotNull IgniteCause cause, @NotNull Entity igniter) {
         BlockIgniteEvent event = new BlockIgniteEvent(world.getWorld().getBlockAt(pos.getX(), pos.getY(), pos.getZ()), cause, igniter.getBukkitEntity());
         world.getCraftServer().getPluginManager().callEvent(event);
         return event;
@@ -1534,17 +1536,17 @@ public class CraftEventFactory {
      * @param human
      */
     @Deprecated
-    public static void handleInventoryCloseEvent(net.minecraft.world.entity.player.Player human) {
+    public static void handleInventoryCloseEvent(net.minecraft.world.entity.player.@NotNull Player human) {
         handleInventoryCloseEvent(human, org.bukkit.event.inventory.InventoryCloseEvent.Reason.UNKNOWN);
     }
-    public static void handleInventoryCloseEvent(net.minecraft.world.entity.player.Player human, org.bukkit.event.inventory.InventoryCloseEvent.Reason reason) {
+    public static void handleInventoryCloseEvent(net.minecraft.world.entity.player.@NotNull Player human, org.bukkit.event.inventory.InventoryCloseEvent.@NotNull Reason reason) {
         // Paper end
         InventoryCloseEvent event = new InventoryCloseEvent(human.containerMenu.getBukkitView(), reason); // Paper
         human.level.getCraftServer().getPluginManager().callEvent(event);
         human.containerMenu.transferTo(human.inventoryMenu, human.getBukkitEntity());
     }
 
-    public static ItemStack handleEditBookEvent(ServerPlayer player, int itemInHandIndex, ItemStack itemInHand, ItemStack newBookItem) {
+    public static @org.jetbrains.annotations.Nullable ItemStack handleEditBookEvent(@NotNull ServerPlayer player, int itemInHandIndex, @org.jetbrains.annotations.Nullable ItemStack itemInHand, @NotNull ItemStack newBookItem) {
         PlayerEditBookEvent editBookEvent = new PlayerEditBookEvent(player.getBukkitEntity(), (itemInHandIndex >= 0 && itemInHandIndex <= 8) ? itemInHandIndex : -1, (BookMeta) CraftItemStack.getItemMeta(itemInHand), (BookMeta) CraftItemStack.getItemMeta(newBookItem), newBookItem.getItem() == Items.WRITTEN_BOOK);
         player.level.getCraftServer().getPluginManager().callEvent(editBookEvent);
 
@@ -1563,26 +1565,26 @@ public class CraftEventFactory {
     }
 
     // Paper start - drop leash variable
-    public static PlayerUnleashEntityEvent callPlayerUnleashEntityEvent(Mob entity, net.minecraft.world.entity.player.Player player, InteractionHand enumhand, boolean dropLeash) {
+    public static @NotNull PlayerUnleashEntityEvent callPlayerUnleashEntityEvent(@NotNull Mob entity, net.minecraft.world.entity.player.@NotNull Player player, InteractionHand enumhand, boolean dropLeash) {
         PlayerUnleashEntityEvent event = new PlayerUnleashEntityEvent(entity.getBukkitEntity(), (Player) player.getBukkitEntity(), CraftEquipmentSlot.getHand(enumhand), dropLeash);
         // Paper end
         entity.level.getCraftServer().getPluginManager().callEvent(event);
         return event;
     }
 
-    public static PlayerLeashEntityEvent callPlayerLeashEntityEvent(Mob entity, Entity leashHolder, net.minecraft.world.entity.player.Player player, InteractionHand enumhand) {
+    public static @NotNull PlayerLeashEntityEvent callPlayerLeashEntityEvent(@NotNull Mob entity, @NotNull Entity leashHolder, net.minecraft.world.entity.player.@NotNull Player player, InteractionHand enumhand) {
         PlayerLeashEntityEvent event = new PlayerLeashEntityEvent(entity.getBukkitEntity(), leashHolder.getBukkitEntity(), (Player) player.getBukkitEntity(), CraftEquipmentSlot.getHand(enumhand));
         entity.level.getCraftServer().getPluginManager().callEvent(event);
         return event;
     }
 
-    public static BlockShearEntityEvent callBlockShearEntityEvent(Entity animal, org.bukkit.block.Block dispenser, CraftItemStack is) {
+    public static @NotNull BlockShearEntityEvent callBlockShearEntityEvent(@NotNull Entity animal, org.bukkit.block.@NotNull Block dispenser, @NotNull CraftItemStack is) {
         BlockShearEntityEvent bse = new BlockShearEntityEvent(dispenser, animal.getBukkitEntity(), is);
         Bukkit.getPluginManager().callEvent(bse);
         return bse;
     }
 
-    public static boolean handlePlayerShearEntityEvent(net.minecraft.world.entity.player.Player player, Entity sheared, ItemStack shears, InteractionHand hand) {
+    public static boolean handlePlayerShearEntityEvent(net.minecraft.world.entity.player.Player player, @NotNull Entity sheared, ItemStack shears, InteractionHand hand) {
         if (!(player instanceof ServerPlayer)) {
             return true;
         }
@@ -1592,7 +1594,7 @@ public class CraftEventFactory {
         return !event.isCancelled();
     }
 
-    public static Cancellable handleStatisticsIncrease(net.minecraft.world.entity.player.Player entityHuman, net.minecraft.stats.Stat<?> statistic, int current, int newValue) {
+    public static @org.jetbrains.annotations.Nullable Cancellable handleStatisticsIncrease(net.minecraft.world.entity.player.@NotNull Player entityHuman, net.minecraft.stats.@NotNull Stat<?> statistic, int current, int newValue) {
         Player player = ((ServerPlayer) entityHuman).getBukkitEntity();
         Event event;
         if (true) {
@@ -1640,14 +1642,14 @@ public class CraftEventFactory {
         return (Cancellable) event;
     }
 
-    public static FireworkExplodeEvent callFireworkExplodeEvent(FireworkRocketEntity firework) {
+    public static @NotNull FireworkExplodeEvent callFireworkExplodeEvent(@NotNull FireworkRocketEntity firework) {
         FireworkExplodeEvent event = new FireworkExplodeEvent((Firework) firework.getBukkitEntity());
         firework.level.getCraftServer().getPluginManager().callEvent(event);
         return event;
     }
 
     // Paper start - disable this method, handled below
-    public static void callPrepareAnvilEvent(InventoryView view, ItemStack item) { // Paper - verify nothing uses return - handled below in PrepareResult
+    public static void callPrepareAnvilEvent(@NotNull InventoryView view, ItemStack item) { // Paper - verify nothing uses return - handled below in PrepareResult
         PrepareAnvilEvent event = new PrepareAnvilEvent(view, CraftItemStack.asCraftMirror(item)); // Paper - remove clone
         //event.getView().getPlayer().getServer().getPluginManager().callEvent(event); // Paper - disable event
         event.getInventory().setItem(2, event.getResult());
@@ -1665,7 +1667,7 @@ public class CraftEventFactory {
     // Paper end
 
     // Paper start - disable this method, handled in callPrepareResultEvent
-    public static void callPrepareSmithingEvent(InventoryView view, ItemStack item) { // Paper - verify nothing uses return - handled below in PrepareResult
+    public static void callPrepareSmithingEvent(@NotNull InventoryView view, ItemStack item) { // Paper - verify nothing uses return - handled below in PrepareResult
         PrepareSmithingEvent event = new PrepareSmithingEvent(view, CraftItemStack.asCraftMirror(item)); // Paper - remove clone
         //event.getView().getPlayer().getServer().getPluginManager().callEvent(event); // Paper - disable event
         event.getInventory().setItem(2, event.getResult());
@@ -1674,7 +1676,7 @@ public class CraftEventFactory {
     // Paper end
 
     // Paper start - support specific overrides for prepare result
-    public static void callPrepareResultEvent(AbstractContainerMenu container, int resultSlot) {
+    public static void callPrepareResultEvent(@NotNull AbstractContainerMenu container, int resultSlot) {
         com.destroystokyo.paper.event.inventory.PrepareResultEvent event;
         InventoryView view = container.getBukkitView();
         org.bukkit.inventory.ItemStack origItem = view.getTopInventory().getItem(resultSlot);
@@ -1697,7 +1699,7 @@ public class CraftEventFactory {
     /**
      * Mob spawner event.
      */
-    public static SpawnerSpawnEvent callSpawnerSpawnEvent(Entity spawnee, BlockPos pos) {
+    public static @NotNull SpawnerSpawnEvent callSpawnerSpawnEvent(@NotNull Entity spawnee, @NotNull BlockPos pos) {
         org.bukkit.craftbukkit.entity.CraftEntity entity = spawnee.getBukkitEntity();
         BlockState state = entity.getWorld().getBlockAt(pos.getX(), pos.getY(), pos.getZ()).getState();
         if (!(state instanceof org.bukkit.block.CreatureSpawner)) {
@@ -1709,32 +1711,32 @@ public class CraftEventFactory {
         return event;
     }
 
-    public static EntityToggleGlideEvent callToggleGlideEvent(net.minecraft.world.entity.LivingEntity entity, boolean gliding) {
+    public static @NotNull EntityToggleGlideEvent callToggleGlideEvent(net.minecraft.world.entity.@NotNull LivingEntity entity, boolean gliding) {
         EntityToggleGlideEvent event = new EntityToggleGlideEvent((LivingEntity) entity.getBukkitEntity(), gliding);
         entity.level.getCraftServer().getPluginManager().callEvent(event);
         return event;
     }
 
-    public static EntityToggleSwimEvent callToggleSwimEvent(net.minecraft.world.entity.LivingEntity entity, boolean swimming) {
+    public static @NotNull EntityToggleSwimEvent callToggleSwimEvent(net.minecraft.world.entity.@NotNull LivingEntity entity, boolean swimming) {
         EntityToggleSwimEvent event = new EntityToggleSwimEvent((LivingEntity) entity.getBukkitEntity(), swimming);
         entity.level.getCraftServer().getPluginManager().callEvent(event);
         return event;
     }
 
-    public static AreaEffectCloudApplyEvent callAreaEffectCloudApplyEvent(net.minecraft.world.entity.AreaEffectCloud cloud, List<LivingEntity> entities) {
+    public static @NotNull AreaEffectCloudApplyEvent callAreaEffectCloudApplyEvent(net.minecraft.world.entity.@NotNull AreaEffectCloud cloud, @NotNull List<LivingEntity> entities) {
         AreaEffectCloudApplyEvent event = new AreaEffectCloudApplyEvent((AreaEffectCloud) cloud.getBukkitEntity(), entities);
         cloud.level.getCraftServer().getPluginManager().callEvent(event);
         return event;
     }
 
-    public static VehicleCreateEvent callVehicleCreateEvent(Entity entity) {
+    public static @NotNull VehicleCreateEvent callVehicleCreateEvent(@NotNull Entity entity) {
         Vehicle bukkitEntity = (Vehicle) entity.getBukkitEntity();
         VehicleCreateEvent event = new VehicleCreateEvent(bukkitEntity);
         Bukkit.getPluginManager().callEvent(event);
         return event;
     }
 
-    public static EntityBreedEvent callEntityBreedEvent(net.minecraft.world.entity.LivingEntity child, net.minecraft.world.entity.LivingEntity mother, net.minecraft.world.entity.LivingEntity father, net.minecraft.world.entity.LivingEntity breeder, ItemStack bredWith, int experience) {
+    public static @NotNull EntityBreedEvent callEntityBreedEvent(net.minecraft.world.entity.@NotNull LivingEntity child, net.minecraft.world.entity.@NotNull LivingEntity mother, net.minecraft.world.entity.@NotNull LivingEntity father, net.minecraft.world.entity.@org.jetbrains.annotations.Nullable LivingEntity breeder, @org.jetbrains.annotations.Nullable ItemStack bredWith, int experience) {
         org.bukkit.entity.LivingEntity breederEntity = (LivingEntity) (breeder == null ? null : breeder.getBukkitEntity());
         CraftItemStack bredWithStack = bredWith == null ? null : CraftItemStack.asCraftMirror(bredWith).clone();
 
@@ -1743,7 +1745,7 @@ public class CraftEventFactory {
         return event;
     }
 
-    public static BlockPhysicsEvent callBlockPhysicsEvent(LevelAccessor world, BlockPos blockposition) {
+    public static @NotNull BlockPhysicsEvent callBlockPhysicsEvent(LevelAccessor world, @NotNull BlockPos blockposition) {
         org.bukkit.block.Block block = CraftBlock.at(world, blockposition);
         BlockPhysicsEvent event = new BlockPhysicsEvent(block, block.getBlockData());
         // Suppress during worldgen
@@ -1753,19 +1755,19 @@ public class CraftEventFactory {
         return event;
     }
 
-    public static boolean handleBlockFormEvent(Level world, BlockPos pos, net.minecraft.world.level.block.state.BlockState block) {
+    public static boolean handleBlockFormEvent(@NotNull Level world, @NotNull BlockPos pos, net.minecraft.world.level.block.state.BlockState block) {
         return CraftEventFactory.handleBlockFormEvent(world, pos, block, 3);
     }
 
-    public static EntityPotionEffectEvent callEntityPotionEffectChangeEvent(net.minecraft.world.entity.LivingEntity entity, @Nullable MobEffectInstance oldEffect, @Nullable MobEffectInstance newEffect, EntityPotionEffectEvent.Cause cause) {
+    public static @NotNull EntityPotionEffectEvent callEntityPotionEffectChangeEvent(net.minecraft.world.entity.@NotNull LivingEntity entity, @Nullable MobEffectInstance oldEffect, @Nullable MobEffectInstance newEffect, EntityPotionEffectEvent.@NotNull Cause cause) {
         return CraftEventFactory.callEntityPotionEffectChangeEvent(entity, oldEffect, newEffect, cause, true);
     }
 
-    public static EntityPotionEffectEvent callEntityPotionEffectChangeEvent(net.minecraft.world.entity.LivingEntity entity, @Nullable MobEffectInstance oldEffect, @Nullable MobEffectInstance newEffect, EntityPotionEffectEvent.Cause cause, EntityPotionEffectEvent.Action action) {
+    public static @NotNull EntityPotionEffectEvent callEntityPotionEffectChangeEvent(net.minecraft.world.entity.@NotNull LivingEntity entity, @Nullable MobEffectInstance oldEffect, @Nullable MobEffectInstance newEffect, EntityPotionEffectEvent.@NotNull Cause cause, EntityPotionEffectEvent.@NotNull Action action) {
         return CraftEventFactory.callEntityPotionEffectChangeEvent(entity, oldEffect, newEffect, cause, action, true);
     }
 
-    public static EntityPotionEffectEvent callEntityPotionEffectChangeEvent(net.minecraft.world.entity.LivingEntity entity, @Nullable MobEffectInstance oldEffect, @Nullable MobEffectInstance newEffect, EntityPotionEffectEvent.Cause cause, boolean willOverride) {
+    public static @NotNull EntityPotionEffectEvent callEntityPotionEffectChangeEvent(net.minecraft.world.entity.@NotNull LivingEntity entity, @Nullable MobEffectInstance oldEffect, @Nullable MobEffectInstance newEffect, EntityPotionEffectEvent.@NotNull Cause cause, boolean willOverride) {
         EntityPotionEffectEvent.Action action = EntityPotionEffectEvent.Action.CHANGED;
         if (oldEffect == null) {
             action = EntityPotionEffectEvent.Action.ADDED;
@@ -1776,7 +1778,7 @@ public class CraftEventFactory {
         return CraftEventFactory.callEntityPotionEffectChangeEvent(entity, oldEffect, newEffect, cause, action, willOverride);
     }
 
-    public static EntityPotionEffectEvent callEntityPotionEffectChangeEvent(net.minecraft.world.entity.LivingEntity entity, @Nullable MobEffectInstance oldEffect, @Nullable MobEffectInstance newEffect, EntityPotionEffectEvent.Cause cause, EntityPotionEffectEvent.Action action, boolean willOverride) {
+    public static @NotNull EntityPotionEffectEvent callEntityPotionEffectChangeEvent(net.minecraft.world.entity.@NotNull LivingEntity entity, @Nullable MobEffectInstance oldEffect, @Nullable MobEffectInstance newEffect, EntityPotionEffectEvent.@NotNull Cause cause, EntityPotionEffectEvent.@NotNull Action action, boolean willOverride) {
         PotionEffect bukkitOldEffect = (oldEffect == null) ? null : CraftPotionUtil.toBukkit(oldEffect);
         PotionEffect bukkitNewEffect = (newEffect == null) ? null : CraftPotionUtil.toBukkit(newEffect);
 
@@ -1790,15 +1792,15 @@ public class CraftEventFactory {
         return event;
     }
 
-    public static boolean handleBlockFormEvent(Level world, BlockPos pos, net.minecraft.world.level.block.state.BlockState block, @Nullable Entity entity) {
+    public static boolean handleBlockFormEvent(@NotNull Level world, @NotNull BlockPos pos, net.minecraft.world.level.block.state.BlockState block, @Nullable Entity entity) {
         return CraftEventFactory.handleBlockFormEvent(world, pos, block, 3, entity);
     }
 
-    public static boolean handleBlockFormEvent(Level world, BlockPos pos, net.minecraft.world.level.block.state.BlockState block, int flag) {
+    public static boolean handleBlockFormEvent(@NotNull Level world, @NotNull BlockPos pos, net.minecraft.world.level.block.state.BlockState block, int flag) {
         return CraftEventFactory.handleBlockFormEvent(world, pos, block, flag, null);
     }
 
-    public static boolean handleBlockFormEvent(Level world, BlockPos pos, net.minecraft.world.level.block.state.BlockState block, int flag, @Nullable Entity entity) {
+    public static boolean handleBlockFormEvent(@NotNull Level world, @NotNull BlockPos pos, net.minecraft.world.level.block.state.BlockState block, int flag, @Nullable Entity entity) {
         CraftBlockState blockState = CraftBlockStates.getBlockState(world, pos, flag);
         blockState.setData(block);
 
@@ -1812,26 +1814,26 @@ public class CraftEventFactory {
         return !event.isCancelled();
     }
 
-    public static boolean handleBatToggleSleepEvent(Entity bat, boolean awake) {
+    public static boolean handleBatToggleSleepEvent(@NotNull Entity bat, boolean awake) {
         BatToggleSleepEvent event = new BatToggleSleepEvent((Bat) bat.getBukkitEntity(), awake);
         Bukkit.getPluginManager().callEvent(event);
         return !event.isCancelled();
     }
 
-    public static boolean handlePlayerRecipeListUpdateEvent(net.minecraft.world.entity.player.Player who, ResourceLocation recipe) {
+    public static boolean handlePlayerRecipeListUpdateEvent(net.minecraft.world.entity.player.@NotNull Player who, @NotNull ResourceLocation recipe) {
         PlayerRecipeDiscoverEvent event = new PlayerRecipeDiscoverEvent((Player) who.getBukkitEntity(), CraftNamespacedKey.fromMinecraft(recipe));
         Bukkit.getPluginManager().callEvent(event);
         return !event.isCancelled();
     }
 
-    public static EntityPickupItemEvent callEntityPickupItemEvent(Entity who, ItemEntity item, int remaining, boolean cancelled) {
+    public static @NotNull EntityPickupItemEvent callEntityPickupItemEvent(@NotNull Entity who, @NotNull ItemEntity item, int remaining, boolean cancelled) {
         EntityPickupItemEvent event = new EntityPickupItemEvent((LivingEntity) who.getBukkitEntity(), (Item) item.getBukkitEntity(), remaining);
         event.setCancelled(cancelled);
         Bukkit.getPluginManager().callEvent(event);
         return event;
     }
 
-    public static LightningStrikeEvent callLightningStrikeEvent(LightningStrike entity, LightningStrikeEvent.Cause cause) {
+    public static @NotNull LightningStrikeEvent callLightningStrikeEvent(@NotNull LightningStrike entity, LightningStrikeEvent.@NotNull Cause cause) {
         LightningStrikeEvent event = new LightningStrikeEvent(entity.getWorld(), entity, cause);
         Bukkit.getPluginManager().callEvent(event);
         return event;
@@ -1840,23 +1842,23 @@ public class CraftEventFactory {
     /**
      * Raid events
      */
-    public static boolean callRaidTriggerEvent(Raid raid, ServerPlayer player) {
+    public static boolean callRaidTriggerEvent(@NotNull Raid raid, @NotNull ServerPlayer player) {
         RaidTriggerEvent event = new RaidTriggerEvent(new CraftRaid(raid), raid.getLevel().getWorld(), player.getBukkitEntity());
         Bukkit.getPluginManager().callEvent(event);
         return !event.isCancelled();
     }
 
-    public static void callRaidFinishEvent(Raid raid, List<Player> players) {
+    public static void callRaidFinishEvent(@NotNull Raid raid, @NotNull List<Player> players) {
         RaidFinishEvent event = new RaidFinishEvent(new CraftRaid(raid), raid.getLevel().getWorld(), players);
         Bukkit.getPluginManager().callEvent(event);
     }
 
-    public static void callRaidStopEvent(Raid raid, RaidStopEvent.Reason reason) {
+    public static void callRaidStopEvent(@NotNull Raid raid, RaidStopEvent.@NotNull Reason reason) {
         RaidStopEvent event = new RaidStopEvent(new CraftRaid(raid), raid.getLevel().getWorld(), reason);
         Bukkit.getPluginManager().callEvent(event);
     }
 
-    public static void callRaidSpawnWaveEvent(Raid raid, net.minecraft.world.entity.raid.Raider leader, List<net.minecraft.world.entity.raid.Raider> raiders) {
+    public static void callRaidSpawnWaveEvent(@NotNull Raid raid, net.minecraft.world.entity.raid.@NotNull Raider leader, @NotNull List<net.minecraft.world.entity.raid.Raider> raiders) {
         Raider craftLeader = (CraftRaider) leader.getBukkitEntity();
         List<Raider> craftRaiders = new ArrayList<>();
         for (net.minecraft.world.entity.raid.Raider entityRaider : raiders) {
@@ -1866,7 +1868,7 @@ public class CraftEventFactory {
         Bukkit.getPluginManager().callEvent(event);
     }
 
-    public static LootGenerateEvent callLootGenerateEvent(Container inventory, LootTable lootTable, LootContext lootInfo, List<ItemStack> loot, boolean plugin) {
+    public static @NotNull LootGenerateEvent callLootGenerateEvent(@NotNull Container inventory, LootTable lootTable, @NotNull LootContext lootInfo, @NotNull List<ItemStack> loot, boolean plugin) {
         CraftWorld world = lootInfo.getLevel().getWorld();
         Entity entity = lootInfo.getParamOrNull(LootContextParams.THIS_ENTITY);
         NamespacedKey key = CraftNamespacedKey.fromMinecraft(world.getHandle().getServer().getLootTables().lootTableToKey.get(lootTable));
@@ -1878,13 +1880,13 @@ public class CraftEventFactory {
         return event;
     }
 
-    public static boolean callStriderTemperatureChangeEvent(net.minecraft.world.entity.monster.Strider strider, boolean shivering) {
+    public static boolean callStriderTemperatureChangeEvent(net.minecraft.world.entity.monster.@NotNull Strider strider, boolean shivering) {
         StriderTemperatureChangeEvent event = new StriderTemperatureChangeEvent((Strider) strider.getBukkitEntity(), shivering);
         Bukkit.getPluginManager().callEvent(event);
         return !event.isCancelled();
     }
 
-    public static boolean handleEntitySpellCastEvent(SpellcasterIllager caster, SpellcasterIllager.IllagerSpell spell) {
+    public static boolean handleEntitySpellCastEvent(@NotNull SpellcasterIllager caster, SpellcasterIllager.@NotNull IllagerSpell spell) {
         EntitySpellCastEvent event = new EntitySpellCastEvent((Spellcaster) caster.getBukkitEntity(), CraftSpellcaster.toBukkitSpell(spell));
         Bukkit.getPluginManager().callEvent(event);
         return !event.isCancelled();
@@ -1893,7 +1895,7 @@ public class CraftEventFactory {
     /**
      * ArrowBodyCountChangeEvent
      */
-    public static ArrowBodyCountChangeEvent callArrowBodyCountChangeEvent(net.minecraft.world.entity.LivingEntity entity, int oldAmount, int newAmount, boolean isReset) {
+    public static @NotNull ArrowBodyCountChangeEvent callArrowBodyCountChangeEvent(net.minecraft.world.entity.@NotNull LivingEntity entity, int oldAmount, int newAmount, boolean isReset) {
         org.bukkit.entity.LivingEntity bukkitEntity = (LivingEntity) entity.getBukkitEntity();
 
         ArrowBodyCountChangeEvent event = new ArrowBodyCountChangeEvent(bukkitEntity, oldAmount, newAmount, isReset);
@@ -1902,38 +1904,38 @@ public class CraftEventFactory {
         return event;
     }
 
-    public static EntityExhaustionEvent callPlayerExhaustionEvent(net.minecraft.world.entity.player.Player humanEntity, EntityExhaustionEvent.ExhaustionReason exhaustionReason, float exhaustion) {
+    public static @NotNull EntityExhaustionEvent callPlayerExhaustionEvent(net.minecraft.world.entity.player.@NotNull Player humanEntity, EntityExhaustionEvent.@NotNull ExhaustionReason exhaustionReason, float exhaustion) {
         EntityExhaustionEvent event = new EntityExhaustionEvent(humanEntity.getBukkitEntity(), exhaustionReason, exhaustion);
         Bukkit.getPluginManager().callEvent(event);
 
         return event;
     }
 
-    public static PiglinBarterEvent callPiglinBarterEvent(net.minecraft.world.entity.monster.piglin.Piglin piglin, List<ItemStack> outcome, ItemStack input) {
+    public static @NotNull PiglinBarterEvent callPiglinBarterEvent(net.minecraft.world.entity.monster.piglin.@NotNull Piglin piglin, @NotNull List<ItemStack> outcome, @NotNull ItemStack input) {
         PiglinBarterEvent event = new PiglinBarterEvent((Piglin) piglin.getBukkitEntity(), CraftItemStack.asBukkitCopy(input), outcome.stream().map(CraftItemStack::asBukkitCopy).collect(Collectors.toList()));
         Bukkit.getPluginManager().callEvent(event);
         return event;
     }
 
-    public static void callEntitiesLoadEvent(Level world, ChunkPos coords, List<Entity> entities) {
+    public static void callEntitiesLoadEvent(Level world, @NotNull ChunkPos coords, @NotNull List<Entity> entities) {
         List<org.bukkit.entity.Entity> bukkitEntities = Collections.unmodifiableList(entities.stream().map(Entity::getBukkitEntity).collect(Collectors.toList()));
         EntitiesLoadEvent event = new EntitiesLoadEvent(new CraftChunk((ServerLevel) world, coords.x, coords.z), bukkitEntities);
         Bukkit.getPluginManager().callEvent(event);
     }
-    public static void callEntitiesUnloadEvent(Level world, ChunkPos coords, List<Entity> entities) {
+    public static void callEntitiesUnloadEvent(Level world, @NotNull ChunkPos coords, @NotNull List<Entity> entities) {
         List<org.bukkit.entity.Entity> bukkitEntities = Collections.unmodifiableList(entities.stream().map(Entity::getBukkitEntity).collect(Collectors.toList()));
         EntitiesUnloadEvent event = new EntitiesUnloadEvent(new CraftChunk((ServerLevel) world, coords.x, coords.z), bukkitEntities);
         Bukkit.getPluginManager().callEvent(event);
     }
 
     // Paper start
-    public static boolean handleBlockFailedDispenseEvent(ServerLevel serverLevel, BlockPos blockposition) {
+    public static boolean handleBlockFailedDispenseEvent(@NotNull ServerLevel serverLevel, @NotNull BlockPos blockposition) {
         org.bukkit.block.Block block = serverLevel.getWorld().getBlockAt(blockposition.getX(), blockposition.getY(), blockposition.getZ());
         io.papermc.paper.event.block.BlockFailedDispenseEvent event = new io.papermc.paper.event.block.BlockFailedDispenseEvent(block);
         return event.callEvent();
     }
 
-    public static boolean handleBlockPreDispenseEvent(ServerLevel serverLevel, BlockPos pos, ItemStack itemStack, int slot) {
+    public static boolean handleBlockPreDispenseEvent(@NotNull ServerLevel serverLevel, @NotNull BlockPos pos, ItemStack itemStack, int slot) {
         org.bukkit.block.Block block = serverLevel.getWorld().getBlockAt(pos.getX(), pos.getY(), pos.getZ());
         io.papermc.paper.event.block.BlockPreDispenseEvent event = new io.papermc.paper.event.block.BlockPreDispenseEvent(block, org.bukkit.craftbukkit.inventory.CraftItemStack.asCraftMirror(itemStack), slot);
         return event.callEvent();
diff --git a/src/main/java/org/bukkit/craftbukkit/event/CraftPortalEvent.java b/src/main/java/org/bukkit/craftbukkit/event/CraftPortalEvent.java
index 4b6e450490d287df031d4cd0290a1a781a73237d..db1b03e7d6c5e856664d9adc06d88fb729609d31 100644
--- a/src/main/java/org/bukkit/craftbukkit/event/CraftPortalEvent.java
+++ b/src/main/java/org/bukkit/craftbukkit/event/CraftPortalEvent.java
@@ -3,19 +3,22 @@ package org.bukkit.craftbukkit.event;
 import org.bukkit.Location;
 import org.bukkit.event.entity.EntityPortalEvent;
 import org.bukkit.event.player.PlayerPortalEvent;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 /**
  * Helper class to hold information from the {@link PlayerPortalEvent} and {@link EntityPortalEvent}
  */
 public class CraftPortalEvent {
-    private final Location to;
+    private final @Nullable Location to;
     private final int searchRadius;
     private final int creationRadius;
 
     private final boolean canCreatePortal;
     private final boolean cancelled;
 
-    public CraftPortalEvent(EntityPortalEvent portalEvent) {
+    public CraftPortalEvent(@NotNull EntityPortalEvent portalEvent) {
         this.to = portalEvent.getTo();
         this.searchRadius = portalEvent.getSearchRadius();
         this.cancelled = portalEvent.isCancelled();
@@ -23,7 +26,7 @@ public class CraftPortalEvent {
         this.canCreatePortal = false;
     }
 
-    public CraftPortalEvent(PlayerPortalEvent portalEvent) {
+    public CraftPortalEvent(@NotNull PlayerPortalEvent portalEvent) {
         this.to = portalEvent.getTo();
         this.searchRadius = portalEvent.getSearchRadius();
         this.creationRadius = portalEvent.getCreationRadius();
diff --git a/src/main/java/org/bukkit/craftbukkit/generator/CraftChunkData.java b/src/main/java/org/bukkit/craftbukkit/generator/CraftChunkData.java
index 5e15feb408b8a05ec5ee393a604c8d39a91ff106..6cfe71caa457bba37e13e543d5429225193cc829 100644
--- a/src/main/java/org/bukkit/craftbukkit/generator/CraftChunkData.java
+++ b/src/main/java/org/bukkit/craftbukkit/generator/CraftChunkData.java
@@ -16,6 +16,8 @@ import org.bukkit.craftbukkit.block.data.CraftBlockData;
 import org.bukkit.craftbukkit.util.CraftMagicNumbers;
 import org.bukkit.generator.ChunkGenerator;
 import org.bukkit.material.MaterialData;
+import org.jetbrains.annotations.NotNull;
+
 
 /**
  * Data to be used for the block types and data in a newly generated chunk.
@@ -23,9 +25,9 @@ import org.bukkit.material.MaterialData;
 public final class CraftChunkData implements ChunkGenerator.ChunkData {
     private final int maxHeight;
     private final int minHeight;
-    private final WeakReference<ChunkAccess> weakChunk;
+    private final @NotNull WeakReference<ChunkAccess> weakChunk;
 
-    public CraftChunkData(World world, ChunkAccess chunkAccess) {
+    public CraftChunkData(@NotNull World world, ChunkAccess chunkAccess) {
         this(world.getMaxHeight(), world.getMinHeight(), chunkAccess);
     }
 
@@ -35,7 +37,7 @@ public final class CraftChunkData implements ChunkGenerator.ChunkData {
         this.weakChunk = new WeakReference<>(chunkAccess);
     }
 
-    public ChunkAccess getHandle() {
+    public @NotNull ChunkAccess getHandle() {
         ChunkAccess access = this.weakChunk.get();
 
         if (access == null) {
@@ -60,56 +62,56 @@ public final class CraftChunkData implements ChunkGenerator.ChunkData {
     }
 
     @Override
-    public Biome getBiome(int x, int y, int z) {
+    public @NotNull Biome getBiome(int x, int y, int z) {
         return CraftBlock.biomeBaseToBiome(this.getHandle().biomeRegistry, this.getHandle().getNoiseBiome(x >> 2, y >> 2, z >> 2));
     }
 
     @Override
-    public void setBlock(int x, int y, int z, Material material) {
+    public void setBlock(int x, int y, int z, @NotNull Material material) {
         this.setBlock(x, y, z, material.createBlockData());
     }
 
     @Override
-    public void setBlock(int x, int y, int z, MaterialData material) {
+    public void setBlock(int x, int y, int z, @NotNull MaterialData material) {
         this.setBlock(x, y, z, CraftMagicNumbers.getBlock(material));
     }
 
     @Override
-    public void setBlock(int x, int y, int z, BlockData blockData) {
+    public void setBlock(int x, int y, int z, @NotNull BlockData blockData) {
         this.setBlock(x, y, z, ((CraftBlockData) blockData).getState());
     }
 
     @Override
-    public void setRegion(int xMin, int yMin, int zMin, int xMax, int yMax, int zMax, Material material) {
+    public void setRegion(int xMin, int yMin, int zMin, int xMax, int yMax, int zMax, @NotNull Material material) {
         this.setRegion(xMin, yMin, zMin, xMax, yMax, zMax, material.createBlockData());
     }
 
     @Override
-    public void setRegion(int xMin, int yMin, int zMin, int xMax, int yMax, int zMax, MaterialData material) {
+    public void setRegion(int xMin, int yMin, int zMin, int xMax, int yMax, int zMax, @NotNull MaterialData material) {
         this.setRegion(xMin, yMin, zMin, xMax, yMax, zMax, CraftMagicNumbers.getBlock(material));
     }
 
     @Override
-    public void setRegion(int xMin, int yMin, int zMin, int xMax, int yMax, int zMax, BlockData blockData) {
+    public void setRegion(int xMin, int yMin, int zMin, int xMax, int yMax, int zMax, @NotNull BlockData blockData) {
         this.setRegion(xMin, yMin, zMin, xMax, yMax, zMax, ((CraftBlockData) blockData).getState());
     }
 
     @Override
-    public Material getType(int x, int y, int z) {
+    public @NotNull Material getType(int x, int y, int z) {
         return this.getTypeId(x, y, z).getBukkitMaterial(); // Paper - optimise getType calls
     }
 
     @Override
-    public MaterialData getTypeAndData(int x, int y, int z) {
+    public @NotNull MaterialData getTypeAndData(int x, int y, int z) {
         return CraftMagicNumbers.getMaterial(this.getTypeId(x, y, z));
     }
 
     @Override
-    public BlockData getBlockData(int x, int y, int z) {
+    public @NotNull BlockData getBlockData(int x, int y, int z) {
         return CraftBlockData.fromData(this.getTypeId(x, y, z));
     }
 
-    public void setRegion(int xMin, int yMin, int zMin, int xMax, int yMax, int zMax, BlockState type) {
+    public void setRegion(int xMin, int yMin, int zMin, int xMax, int yMax, int zMax, @NotNull BlockState type) {
         // Clamp to sane values.
         if (xMin > 0xf || yMin >= this.maxHeight || zMin > 0xf) {
             return;
@@ -144,7 +146,7 @@ public final class CraftChunkData implements ChunkGenerator.ChunkData {
         }
     }
 
-    public BlockState getTypeId(int x, int y, int z) {
+    public @NotNull BlockState getTypeId(int x, int y, int z) {
         if (x != (x & 0xf) || y < this.minHeight || y >= this.maxHeight || z != (z & 0xf)) {
             return Blocks.AIR.defaultBlockState();
         }
@@ -158,7 +160,7 @@ public final class CraftChunkData implements ChunkGenerator.ChunkData {
         return CraftMagicNumbers.toLegacyData(this.getTypeId(x, y, z));
     }
 
-    private void setBlock(int x, int y, int z, BlockState type) {
+    private void setBlock(int x, int y, int z, @NotNull BlockState type) {
         if (x != (x & 0xf) || y < this.minHeight || y >= this.maxHeight || z != (z & 0xf)) {
             return;
         }
diff --git a/src/main/java/org/bukkit/craftbukkit/generator/CraftLimitedRegion.java b/src/main/java/org/bukkit/craftbukkit/generator/CraftLimitedRegion.java
index b01904021bd4f485aaf03d1d7634b56f134d3099..cda544cf23593e5ec4115217bb95f9648a17e178 100644
--- a/src/main/java/org/bukkit/craftbukkit/generator/CraftLimitedRegion.java
+++ b/src/main/java/org/bukkit/craftbukkit/generator/CraftLimitedRegion.java
@@ -28,16 +28,18 @@ import org.bukkit.event.entity.CreatureSpawnEvent;
 import org.bukkit.generator.LimitedRegion;
 import org.bukkit.util.BoundingBox;
 import org.bukkit.util.Consumer;
+import org.jetbrains.annotations.NotNull;
+
 
 public class CraftLimitedRegion extends CraftRegionAccessor implements LimitedRegion {
 
-    private final WeakReference<WorldGenLevel> weakAccess;
+    private final @NotNull WeakReference<WorldGenLevel> weakAccess;
     private final int centerChunkX;
     private final int centerChunkZ;
     // Buffer is one chunk (16 blocks), can be seen in ChunkStatus#q
     // there the order is {..., FEATURES, LIQUID_CARVERS, STRUCTURE_STARTS, ...}
     private final int buffer = 16;
-    private final BoundingBox region;
+    private final @NotNull BoundingBox region;
     boolean entitiesLoaded = false;
     // Minecraft saves the entities as NBTTagCompound during chunk generation. This causes that
     // changes made to the returned bukkit entity are not saved. To combat this we keep them and
@@ -47,7 +49,7 @@ public class CraftLimitedRegion extends CraftRegionAccessor implements LimitedRe
     // Prevents crash for chunks which are converting from 1.17 to 1.18
     private final List<net.minecraft.world.entity.Entity> outsideEntities = new ArrayList<>();
 
-    public CraftLimitedRegion(WorldGenLevel access, ChunkPos center) {
+    public CraftLimitedRegion(@NotNull WorldGenLevel access, @NotNull ChunkPos center) {
         this.weakAccess = new WeakReference<>(access);
         this.centerChunkX = center.x;
         this.centerChunkZ = center.z;
@@ -63,7 +65,7 @@ public class CraftLimitedRegion extends CraftRegionAccessor implements LimitedRe
         this.region = new BoundingBox(xMin, world.getMinHeight(), zMin, xMax, world.getMaxHeight(), zMax);
     }
 
-    public WorldGenLevel getHandle() {
+    public @NotNull WorldGenLevel getHandle() {
         WorldGenLevel handle = this.weakAccess.get();
 
         if (handle == null) {
@@ -135,7 +137,7 @@ public class CraftLimitedRegion extends CraftRegionAccessor implements LimitedRe
     }
 
     @Override
-    public boolean isInRegion(Location location) {
+    public boolean isInRegion(@NotNull Location location) {
         return this.region.contains(location.getX(), location.getY(), location.getZ());
     }
 
@@ -145,7 +147,7 @@ public class CraftLimitedRegion extends CraftRegionAccessor implements LimitedRe
     }
 
     @Override
-    public List<BlockState> getTileEntities() {
+    public @NotNull List<BlockState> getTileEntities() {
         List<BlockState> blockStates = new ArrayList<>();
 
         for (int x = -(this.buffer >> 4); x <= (this.buffer >> 4); x++) {
@@ -161,40 +163,40 @@ public class CraftLimitedRegion extends CraftRegionAccessor implements LimitedRe
     }
 
     @Override
-    public Biome getBiome(int x, int y, int z) {
+    public @NotNull Biome getBiome(int x, int y, int z) {
         Preconditions.checkArgument(this.isInRegion(x, y, z), "Coordinates %s, %s, %s are not in the region", x, y, z);
         return super.getBiome(x, y, z);
     }
 
     // Paper start
     @Override
-    public Biome getComputedBiome(int x, int y, int z) {
+    public @NotNull Biome getComputedBiome(int x, int y, int z) {
         Preconditions.checkArgument(this.isInRegion(x, y, z), "Coordinates %s, %s, %s are not in the region", x, y, z);
         return super.getComputedBiome(x, y, z);
     }
     // Paper end
 
     @Override
-    public void setBiome(int x, int y, int z, Holder<net.minecraft.world.level.biome.Biome> biomeBase) {
+    public void setBiome(int x, int y, int z, @NotNull Holder<net.minecraft.world.level.biome.Biome> biomeBase) {
         Preconditions.checkArgument(this.isInRegion(x, y, z), "Coordinates %s, %s, %s are not in the region", x, y, z);
         ChunkAccess chunk = this.getHandle().getChunk(x >> 4, z >> 4, ChunkStatus.EMPTY);
         chunk.setBiome(x >> 2, y >> 2, z >> 2, biomeBase);
     }
 
     @Override
-    public BlockState getBlockState(int x, int y, int z) {
+    public @NotNull BlockState getBlockState(int x, int y, int z) {
         Preconditions.checkArgument(this.isInRegion(x, y, z), "Coordinates %s, %s, %s are not in the region", x, y, z);
         return super.getBlockState(x, y, z);
     }
 
     @Override
-    public BlockData getBlockData(int x, int y, int z) {
+    public @NotNull BlockData getBlockData(int x, int y, int z) {
         Preconditions.checkArgument(this.isInRegion(x, y, z), "Coordinates %s, %s, %s are not in the region", x, y, z);
         return super.getBlockData(x, y, z);
     }
 
     @Override
-    public Material getType(int x, int y, int z) {
+    public @NotNull Material getType(int x, int y, int z) {
         Preconditions.checkArgument(this.isInRegion(x, y, z), "Coordinates %s, %s, %s are not in the region", x, y, z);
         return super.getType(x, y, z);
     }
@@ -206,26 +208,26 @@ public class CraftLimitedRegion extends CraftRegionAccessor implements LimitedRe
     }
 
     @Override
-    public boolean generateTree(Location location, Random random, TreeType treeType) {
+    public boolean generateTree(@NotNull Location location, Random random, TreeType treeType) {
         Preconditions.checkArgument(this.isInRegion(location), "Coordinates %s, %s, %s are not in the region", location.getBlockX(), location.getBlockY(), location.getBlockZ());
         return super.generateTree(location, random, treeType);
     }
 
     @Override
-    public boolean generateTree(Location location, Random random, TreeType treeType, Consumer<BlockState> consumer) {
+    public boolean generateTree(@NotNull Location location, Random random, TreeType treeType, Consumer<BlockState> consumer) {
         Preconditions.checkArgument(this.isInRegion(location), "Coordinates %s, %s, %s are not in the region", location.getBlockX(), location.getBlockY(), location.getBlockZ());
         return super.generateTree(location, random, treeType, consumer);
     }
 
     @Override
-    public Collection<net.minecraft.world.entity.Entity> getNMSEntities() {
+    public @NotNull Collection<net.minecraft.world.entity.Entity> getNMSEntities() {
         // Only load entities if we need them
         this.loadEntities();
         return new ArrayList<>(this.entities);
     }
 
     @Override
-    public <T extends Entity> T spawn(Location location, Class<T> clazz, Consumer<T> function, CreatureSpawnEvent.SpawnReason reason) throws IllegalArgumentException {
+    public <T extends Entity> @NotNull T spawn(@NotNull Location location, Class<T> clazz, Consumer<T> function, CreatureSpawnEvent.SpawnReason reason) throws IllegalArgumentException {
         Preconditions.checkArgument(this.isInRegion(location), "Coordinates %s, %s, %s are not in the region", location.getBlockX(), location.getBlockY(), location.getBlockZ());
         return super.spawn(location, clazz, function, reason);
     }
@@ -237,7 +239,7 @@ public class CraftLimitedRegion extends CraftRegionAccessor implements LimitedRe
 
     // Paper start
     @Override
-    public void setBlockState(int x, int y, int z, BlockState state) {
+    public void setBlockState(int x, int y, int z, @NotNull BlockState state) {
         BlockPos pos = new BlockPos(x, y, z);
         if (!state.getBlockData().matches(getHandle().getBlockState(pos).createCraftBlockData())) {
             throw new IllegalArgumentException("BlockData does not match! Expected " + state.getBlockData().getAsString(false) + ", got " + getHandle().getBlockState(pos).createCraftBlockData().getAsString(false));
@@ -258,7 +260,7 @@ public class CraftLimitedRegion extends CraftRegionAccessor implements LimitedRe
     }
 
     @Override
-    public World getWorld() {
+    public @NotNull World getWorld() {
         // reading/writing the returned Minecraft world causes a deadlock.
         // By implementing this, and covering it in warnings, we're assuming people won't be stupid, and
         // if they are stupid, they'll figure it out pretty fast.
diff --git a/src/main/java/org/bukkit/craftbukkit/generator/CraftWorldInfo.java b/src/main/java/org/bukkit/craftbukkit/generator/CraftWorldInfo.java
index 5dbd1a6d314ebbb072cb61360ca5c1043f47a38d..1ac3194c4196b14f84211d9c3ee8a893ff5206a4 100644
--- a/src/main/java/org/bukkit/craftbukkit/generator/CraftWorldInfo.java
+++ b/src/main/java/org/bukkit/craftbukkit/generator/CraftWorldInfo.java
@@ -8,11 +8,13 @@ import net.minecraft.world.level.storage.ServerLevelData;
 import org.bukkit.World;
 import org.bukkit.craftbukkit.util.WorldUUID;
 import org.bukkit.generator.WorldInfo;
+import org.jetbrains.annotations.NotNull;
+
 
 public class CraftWorldInfo implements WorldInfo {
 
-    private final String name;
-    private final UUID uuid;
+    private final @NotNull String name;
+    private final @NotNull UUID uuid;
     private final World.Environment environment;
     private final long seed;
     private final int minHeight;
@@ -21,7 +23,7 @@ public class CraftWorldInfo implements WorldInfo {
     private final net.minecraft.world.level.chunk.ChunkGenerator vanillaChunkGenerator;
     private final net.minecraft.core.RegistryAccess.Frozen registryAccess;
 
-    public CraftWorldInfo(ServerLevelData worldDataServer, LevelStorageSource.LevelStorageAccess session, World.Environment environment, DimensionType dimensionManager, net.minecraft.world.level.chunk.ChunkGenerator chunkGenerator, net.minecraft.core.RegistryAccess.Frozen registryAccess) {
+    public CraftWorldInfo(@NotNull ServerLevelData worldDataServer, LevelStorageSource.@NotNull LevelStorageAccess session, World.Environment environment, @NotNull DimensionType dimensionManager, net.minecraft.world.level.chunk.ChunkGenerator chunkGenerator, net.minecraft.core.RegistryAccess.Frozen registryAccess) {
         this.registryAccess = registryAccess;
         this.vanillaChunkGenerator = chunkGenerator;
         // Paper end
@@ -34,17 +36,17 @@ public class CraftWorldInfo implements WorldInfo {
     }
 
     @Override
-    public String getName() {
+    public @NotNull String getName() {
         return this.name;
     }
 
     @Override
-    public UUID getUID() {
+    public @NotNull UUID getUID() {
         return this.uuid;
     }
 
     @Override
-    public World.Environment getEnvironment() {
+    public World.@NotNull Environment getEnvironment() {
         return this.environment;
     }
 
@@ -65,7 +67,7 @@ public class CraftWorldInfo implements WorldInfo {
 
     // Paper start
     @Override
-    public org.bukkit.generator.BiomeProvider vanillaBiomeProvider() {
+    public org.bukkit.generator.@NotNull BiomeProvider vanillaBiomeProvider() {
         final net.minecraft.world.level.levelgen.RandomState randomState;
         if (vanillaChunkGenerator instanceof net.minecraft.world.level.levelgen.NoiseBasedChunkGenerator noiseBasedChunkGenerator) {
             randomState = net.minecraft.world.level.levelgen.RandomState.create(noiseBasedChunkGenerator.generatorSettings().value(),
@@ -81,13 +83,13 @@ public class CraftWorldInfo implements WorldInfo {
             .toList();
         return new org.bukkit.generator.BiomeProvider() {
             @Override
-            public org.bukkit.block.Biome getBiome(final WorldInfo worldInfo, final int x, final int y, final int z) {
+            public org.bukkit.block.@NotNull Biome getBiome(final WorldInfo worldInfo, final int x, final int y, final int z) {
                 return org.bukkit.craftbukkit.block.CraftBlock.biomeBaseToBiome(biomeRegistry,
                     CraftWorldInfo.this.vanillaChunkGenerator.getBiomeSource().getNoiseBiome(x >> 2, y >> 2, z >> 2, randomState.sampler()));
             }
 
             @Override
-            public java.util.List<org.bukkit.block.Biome> getBiomes(final org.bukkit.generator.WorldInfo worldInfo) {
+            public java.util.@NotNull List<org.bukkit.block.Biome> getBiomes(final org.bukkit.generator.WorldInfo worldInfo) {
                 return possibleBiomes;
             }
         };
diff --git a/src/main/java/org/bukkit/craftbukkit/generator/CustomChunkGenerator.java b/src/main/java/org/bukkit/craftbukkit/generator/CustomChunkGenerator.java
index a9673a804d597599c35c83f4f245510c83005328..4ee59abd36bfcf7bd23ea8c145c464ebfebc99d5 100644
--- a/src/main/java/org/bukkit/craftbukkit/generator/CustomChunkGenerator.java
+++ b/src/main/java/org/bukkit/craftbukkit/generator/CustomChunkGenerator.java
@@ -42,10 +42,12 @@ import org.bukkit.craftbukkit.util.RandomSourceWrapper;
 import org.bukkit.generator.ChunkGenerator;
 import org.bukkit.generator.ChunkGenerator.BiomeGrid;
 import org.bukkit.generator.ChunkGenerator.ChunkData;
+import org.jetbrains.annotations.NotNull;
+
 
 public class CustomChunkGenerator extends InternalChunkGenerator {
 
-    private final net.minecraft.world.level.chunk.ChunkGenerator delegate;
+    private final net.minecraft.world.level.chunk.@NotNull ChunkGenerator delegate;
     private final ChunkGenerator generator;
     private final ServerLevel world;
     private final Random random = new Random();
@@ -62,7 +64,7 @@ public class CustomChunkGenerator extends InternalChunkGenerator {
         }
 
         @Override
-        public Biome getBiome(int x, int z) {
+        public @NotNull Biome getBiome(int x, int z) {
             return this.getBiome(x, 0, z);
         }
 
@@ -74,7 +76,7 @@ public class CustomChunkGenerator extends InternalChunkGenerator {
         }
 
         @Override
-        public Biome getBiome(int x, int y, int z) {
+        public @NotNull Biome getBiome(int x, int y, int z) {
             return CraftBlock.biomeBaseToBiome(biome.biomeRegistry, this.biome.getNoiseBiome(x >> 2, y >> 2, z >> 2));
         }
 
@@ -85,7 +87,7 @@ public class CustomChunkGenerator extends InternalChunkGenerator {
         }
     }
 
-    public CustomChunkGenerator(ServerLevel world, net.minecraft.world.level.chunk.ChunkGenerator delegate, ChunkGenerator generator) {
+    public CustomChunkGenerator(ServerLevel world, net.minecraft.world.level.chunk.@NotNull ChunkGenerator delegate, ChunkGenerator generator) {
         super(delegate.getBiomeSource(), delegate.generationSettingsGetter);
 
         this.world = world;
@@ -97,12 +99,12 @@ public class CustomChunkGenerator extends InternalChunkGenerator {
         return this.delegate;
     }
 
-    private static WorldgenRandom getSeededRandom() {
+    private static @NotNull WorldgenRandom getSeededRandom() {
         return new WorldgenRandom(new LegacyRandomSource(0));
     }
 
     @Override
-    public BiomeSource getBiomeSource() {
+    public @NotNull BiomeSource getBiomeSource() {
         return this.delegate.getBiomeSource();
     }
 
@@ -292,7 +294,7 @@ public class CustomChunkGenerator extends InternalChunkGenerator {
     }
 
     @Override
-    public WeightedRandomList<MobSpawnSettings.SpawnerData> getMobsAt(Holder<net.minecraft.world.level.biome.Biome> biome, StructureManager accessor, MobCategory group, BlockPos pos) {
+    public @NotNull WeightedRandomList<MobSpawnSettings.SpawnerData> getMobsAt(Holder<net.minecraft.world.level.biome.Biome> biome, StructureManager accessor, MobCategory group, BlockPos pos) {
         return this.delegate.getMobsAt(biome, accessor, group, pos);
     }
 
@@ -334,7 +336,7 @@ public class CustomChunkGenerator extends InternalChunkGenerator {
     }
 
     @Override
-    public NoiseColumn getBaseColumn(int x, int z, LevelHeightAccessor world, RandomState noiseConfig) {
+    public @NotNull NoiseColumn getBaseColumn(int x, int z, LevelHeightAccessor world, RandomState noiseConfig) {
         return this.delegate.getBaseColumn(x, z, world, noiseConfig);
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/generator/CustomWorldChunkManager.java b/src/main/java/org/bukkit/craftbukkit/generator/CustomWorldChunkManager.java
index e6eeedb8852affcc4c4afe9687ca2ebe518e3e2d..07e339c27d631ec0280a716442a66766055cf6ee 100644
--- a/src/main/java/org/bukkit/craftbukkit/generator/CustomWorldChunkManager.java
+++ b/src/main/java/org/bukkit/craftbukkit/generator/CustomWorldChunkManager.java
@@ -12,14 +12,16 @@ import org.bukkit.block.Biome;
 import org.bukkit.craftbukkit.block.CraftBlock;
 import org.bukkit.generator.BiomeProvider;
 import org.bukkit.generator.WorldInfo;
+import org.jetbrains.annotations.NotNull;
+
 
 public class CustomWorldChunkManager extends BiomeSource {
 
-    private final WorldInfo worldInfo;
-    private final BiomeProvider biomeProvider;
+    private final @NotNull WorldInfo worldInfo;
+    private final @NotNull BiomeProvider biomeProvider;
     private final Registry<net.minecraft.world.level.biome.Biome> registry;
 
-    private static List<Holder<net.minecraft.world.level.biome.Biome>> biomeListToBiomeBaseList(List<Biome> biomes, Registry<net.minecraft.world.level.biome.Biome> registry) {
+    private static @NotNull List<Holder<net.minecraft.world.level.biome.Biome>> biomeListToBiomeBaseList(@NotNull List<Biome> biomes, @NotNull Registry<net.minecraft.world.level.biome.Biome> registry) {
         List<Holder<net.minecraft.world.level.biome.Biome>> biomeBases = new ArrayList<>();
 
         for (Biome biome : biomes) {
@@ -30,7 +32,7 @@ public class CustomWorldChunkManager extends BiomeSource {
         return biomeBases;
     }
 
-    public CustomWorldChunkManager(WorldInfo worldInfo, BiomeProvider biomeProvider, Registry<net.minecraft.world.level.biome.Biome> registry) {
+    public CustomWorldChunkManager(@NotNull WorldInfo worldInfo, @NotNull BiomeProvider biomeProvider, @NotNull Registry<net.minecraft.world.level.biome.Biome> registry) {
         super(CustomWorldChunkManager.biomeListToBiomeBaseList(biomeProvider.getBiomes(worldInfo), registry));
 
         this.worldInfo = worldInfo;
diff --git a/src/main/java/org/bukkit/craftbukkit/generator/InternalChunkGenerator.java b/src/main/java/org/bukkit/craftbukkit/generator/InternalChunkGenerator.java
index 7b4bad15d6c3315660854ca442f8ef3b456c1e65..3f013816323dae6196239d5220b41df51b10d2f5 100644
--- a/src/main/java/org/bukkit/craftbukkit/generator/InternalChunkGenerator.java
+++ b/src/main/java/org/bukkit/craftbukkit/generator/InternalChunkGenerator.java
@@ -5,11 +5,13 @@ import net.minecraft.core.Holder;
 import net.minecraft.world.level.biome.Biome;
 import net.minecraft.world.level.biome.BiomeGenerationSettings;
 import net.minecraft.world.level.biome.BiomeSource;
+import org.jetbrains.annotations.NotNull;
+
 
 // Do not implement functions to this class, add to NormalChunkGenerator
 public abstract class InternalChunkGenerator extends net.minecraft.world.level.chunk.ChunkGenerator {
 
-    public InternalChunkGenerator(BiomeSource biomeSource, Function<Holder<Biome>, BiomeGenerationSettings> generationSettingsGetter) {
+    public InternalChunkGenerator(@NotNull BiomeSource biomeSource, @NotNull Function<Holder<Biome>, BiomeGenerationSettings> generationSettingsGetter) {
         super(biomeSource, generationSettingsGetter);
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/generator/OldCraftChunkData.java b/src/main/java/org/bukkit/craftbukkit/generator/OldCraftChunkData.java
index ce006e1d6c38e5b0bdb336c480fb9d291292f75c..98080c6faf0935f2d0db6acc62c826ddee7fa441 100644
--- a/src/main/java/org/bukkit/craftbukkit/generator/OldCraftChunkData.java
+++ b/src/main/java/org/bukkit/craftbukkit/generator/OldCraftChunkData.java
@@ -15,6 +15,8 @@ import org.bukkit.craftbukkit.block.data.CraftBlockData;
 import org.bukkit.craftbukkit.util.CraftMagicNumbers;
 import org.bukkit.generator.ChunkGenerator;
 import org.bukkit.material.MaterialData;
+import org.jetbrains.annotations.NotNull;
+
 
 /**
  * Data to be used for the block types and data in a newly generated chunk.
@@ -51,56 +53,56 @@ public final class OldCraftChunkData implements ChunkGenerator.ChunkData {
     }
 
     @Override
-    public Biome getBiome(int x, int y, int z) {
+    public @NotNull Biome getBiome(int x, int y, int z) {
         throw new UnsupportedOperationException("Unsupported, in older chunk generator api");
     }
 
     @Override
-    public void setBlock(int x, int y, int z, Material material) {
+    public void setBlock(int x, int y, int z, @NotNull Material material) {
         this.setBlock(x, y, z, material.createBlockData());
     }
 
     @Override
-    public void setBlock(int x, int y, int z, MaterialData material) {
+    public void setBlock(int x, int y, int z, @NotNull MaterialData material) {
         this.setBlock(x, y, z, CraftMagicNumbers.getBlock(material));
     }
 
     @Override
-    public void setBlock(int x, int y, int z, BlockData blockData) {
+    public void setBlock(int x, int y, int z, @NotNull BlockData blockData) {
         this.setBlock(x, y, z, ((CraftBlockData) blockData).getState());
     }
 
     @Override
-    public void setRegion(int xMin, int yMin, int zMin, int xMax, int yMax, int zMax, Material material) {
+    public void setRegion(int xMin, int yMin, int zMin, int xMax, int yMax, int zMax, @NotNull Material material) {
         this.setRegion(xMin, yMin, zMin, xMax, yMax, zMax, material.createBlockData());
     }
 
     @Override
-    public void setRegion(int xMin, int yMin, int zMin, int xMax, int yMax, int zMax, MaterialData material) {
+    public void setRegion(int xMin, int yMin, int zMin, int xMax, int yMax, int zMax, @NotNull MaterialData material) {
         this.setRegion(xMin, yMin, zMin, xMax, yMax, zMax, CraftMagicNumbers.getBlock(material));
     }
 
     @Override
-    public void setRegion(int xMin, int yMin, int zMin, int xMax, int yMax, int zMax, BlockData blockData) {
+    public void setRegion(int xMin, int yMin, int zMin, int xMax, int yMax, int zMax, @NotNull BlockData blockData) {
         this.setRegion(xMin, yMin, zMin, xMax, yMax, zMax, ((CraftBlockData) blockData).getState());
     }
 
     @Override
-    public Material getType(int x, int y, int z) {
+    public @NotNull Material getType(int x, int y, int z) {
         return CraftMagicNumbers.getMaterial(this.getTypeId(x, y, z).getBlock());
     }
 
     @Override
-    public MaterialData getTypeAndData(int x, int y, int z) {
+    public @NotNull MaterialData getTypeAndData(int x, int y, int z) {
         return CraftMagicNumbers.getMaterial(this.getTypeId(x, y, z));
     }
 
     @Override
-    public BlockData getBlockData(int x, int y, int z) {
+    public @NotNull BlockData getBlockData(int x, int y, int z) {
         return CraftBlockData.fromData(this.getTypeId(x, y, z));
     }
 
-    public void setRegion(int xMin, int yMin, int zMin, int xMax, int yMax, int zMax, BlockState type) {
+    public void setRegion(int xMin, int yMin, int zMin, int xMax, int yMax, int zMax, @NotNull BlockState type) {
         // Clamp to sane values.
         if (xMin > 0xf || yMin >= this.maxHeight || zMin > 0xf) {
             return;
@@ -137,7 +139,7 @@ public final class OldCraftChunkData implements ChunkGenerator.ChunkData {
         }
     }
 
-    public BlockState getTypeId(int x, int y, int z) {
+    public @NotNull BlockState getTypeId(int x, int y, int z) {
         if (x != (x & 0xf) || y < this.minHeight || y >= this.maxHeight || z != (z & 0xf)) {
             return Blocks.AIR.defaultBlockState();
         }
@@ -154,7 +156,7 @@ public final class OldCraftChunkData implements ChunkGenerator.ChunkData {
         return CraftMagicNumbers.toLegacyData(this.getTypeId(x, y, z));
     }
 
-    private void setBlock(int x, int y, int z, BlockState type) {
+    private void setBlock(int x, int y, int z, @NotNull BlockState type) {
         if (x != (x & 0xf) || y < this.minHeight || y >= this.maxHeight || z != (z & 0xf)) {
             return;
         }
@@ -194,7 +196,7 @@ public final class OldCraftChunkData implements ChunkGenerator.ChunkData {
         return this.tiles;
     }
 
-    public Set<BlockPos> getLights() { // Paper
+    public @NotNull Set<BlockPos> getLights() { // Paper
         return this.lights;
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/generator/strucutre/CraftStructure.java b/src/main/java/org/bukkit/craftbukkit/generator/strucutre/CraftStructure.java
index 1a3009e9bc282a3f7990db591bef1c922d12aeda..d6a284c278a2a9d9b4b93dc94e2a8f414700918c 100644
--- a/src/main/java/org/bukkit/craftbukkit/generator/strucutre/CraftStructure.java
+++ b/src/main/java/org/bukkit/craftbukkit/generator/strucutre/CraftStructure.java
@@ -7,10 +7,13 @@ import org.bukkit.Registry;
 import org.bukkit.craftbukkit.util.CraftNamespacedKey;
 import org.bukkit.generator.structure.Structure;
 import org.bukkit.generator.structure.StructureType;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 public class CraftStructure extends Structure {
 
-    public static Structure minecraftToBukkit(net.minecraft.world.level.levelgen.structure.Structure minecraft, RegistryAccess registryHolder) {
+    public static Structure minecraftToBukkit(net.minecraft.world.level.levelgen.structure.@Nullable Structure minecraft, @NotNull RegistryAccess registryHolder) {
         if (minecraft == null) {
             return null;
         }
@@ -18,7 +21,7 @@ public class CraftStructure extends Structure {
         return Registry.STRUCTURE.get(CraftNamespacedKey.fromMinecraft(registryHolder.registryOrThrow(Registries.STRUCTURE).getKey(minecraft)));
     }
 
-    public static net.minecraft.world.level.levelgen.structure.Structure bukkitToMinecraft(Structure bukkit) {
+    public static net.minecraft.world.level.levelgen.structure.Structure bukkitToMinecraft(@Nullable Structure bukkit) {
         if (bukkit == null) {
             return null;
         }
@@ -30,7 +33,7 @@ public class CraftStructure extends Structure {
     private final net.minecraft.world.level.levelgen.structure.Structure structure;
     private final StructureType structureType;
 
-    public CraftStructure(NamespacedKey key, net.minecraft.world.level.levelgen.structure.Structure structure) {
+    public CraftStructure(NamespacedKey key, net.minecraft.world.level.levelgen.structure.@NotNull Structure structure) {
         this.key = key;
         this.structure = structure;
         this.structureType = CraftStructureType.minecraftToBukkit(structure.type());
@@ -41,12 +44,12 @@ public class CraftStructure extends Structure {
     }
 
     @Override
-    public StructureType getStructureType() {
+    public @NotNull StructureType getStructureType() {
         return this.structureType;
     }
 
     @Override
-    public NamespacedKey getKey() {
+    public @NotNull NamespacedKey getKey() {
         return this.key;
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/generator/strucutre/CraftStructureType.java b/src/main/java/org/bukkit/craftbukkit/generator/strucutre/CraftStructureType.java
index 47e33b9041211cdea4cdfd03f18883a34c75b73b..3d2274c34a06997b6a2d3bcc3de70fc10409c6e1 100644
--- a/src/main/java/org/bukkit/craftbukkit/generator/strucutre/CraftStructureType.java
+++ b/src/main/java/org/bukkit/craftbukkit/generator/strucutre/CraftStructureType.java
@@ -5,10 +5,13 @@ import org.bukkit.NamespacedKey;
 import org.bukkit.Registry;
 import org.bukkit.craftbukkit.util.CraftNamespacedKey;
 import org.bukkit.generator.structure.StructureType;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 public class CraftStructureType extends StructureType {
 
-    public static StructureType minecraftToBukkit(net.minecraft.world.level.levelgen.structure.StructureType<?> minecraft) {
+    public static StructureType minecraftToBukkit(net.minecraft.world.level.levelgen.structure.@Nullable StructureType<?> minecraft) {
         if (minecraft == null) {
             return null;
         }
@@ -16,7 +19,7 @@ public class CraftStructureType extends StructureType {
         return Registry.STRUCTURE_TYPE.get(CraftNamespacedKey.fromMinecraft(BuiltInRegistries.STRUCTURE_TYPE.getKey(minecraft)));
     }
 
-    public static net.minecraft.world.level.levelgen.structure.StructureType<?> bukkitToMinecraft(StructureType bukkit) {
+    public static net.minecraft.world.level.levelgen.structure.StructureType<?> bukkitToMinecraft(@Nullable StructureType bukkit) {
         if (bukkit == null) {
             return null;
         }
@@ -37,7 +40,7 @@ public class CraftStructureType extends StructureType {
     }
 
     @Override
-    public NamespacedKey getKey() {
+    public @NotNull NamespacedKey getKey() {
         return this.key;
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/help/CommandAliasHelpTopic.java b/src/main/java/org/bukkit/craftbukkit/help/CommandAliasHelpTopic.java
index dc7d88228a967e77a36dfdd446c36d4ac5552099..07d43886079fcb5ebb7ca92a95b7647810d3bb53 100644
--- a/src/main/java/org/bukkit/craftbukkit/help/CommandAliasHelpTopic.java
+++ b/src/main/java/org/bukkit/craftbukkit/help/CommandAliasHelpTopic.java
@@ -5,13 +5,15 @@ import org.bukkit.ChatColor;
 import org.bukkit.command.CommandSender;
 import org.bukkit.help.HelpMap;
 import org.bukkit.help.HelpTopic;
+import org.jetbrains.annotations.NotNull;
+
 
 public class CommandAliasHelpTopic extends HelpTopic {
 
-    private final String aliasFor;
+    private final @NotNull String aliasFor;
     private final HelpMap helpMap;
 
-    public CommandAliasHelpTopic(String alias, String aliasFor, HelpMap helpMap) {
+    public CommandAliasHelpTopic(@NotNull String alias, @NotNull String aliasFor, HelpMap helpMap) {
         this.aliasFor = aliasFor.startsWith("/") ? aliasFor : "/" + aliasFor;
         this.helpMap = helpMap;
         this.name = alias.startsWith("/") ? alias : "/" + alias;
@@ -20,7 +22,7 @@ public class CommandAliasHelpTopic extends HelpTopic {
     }
 
     @Override
-    public String getFullText(CommandSender forWho) {
+    public @NotNull String getFullText(@NotNull CommandSender forWho) {
         StringBuilder sb = new StringBuilder(shortText);
         HelpTopic aliasForTopic = this.helpMap.getHelpTopic(aliasFor);
         if (aliasForTopic != null) {
@@ -31,7 +33,7 @@ public class CommandAliasHelpTopic extends HelpTopic {
     }
 
     @Override
-    public boolean canSee(CommandSender commandSender) {
+    public boolean canSee(@NotNull CommandSender commandSender) {
         if (amendedPermission == null) {
             HelpTopic aliasForTopic = this.helpMap.getHelpTopic(aliasFor);
             if (aliasForTopic != null) {
diff --git a/src/main/java/org/bukkit/craftbukkit/help/CustomIndexHelpTopic.java b/src/main/java/org/bukkit/craftbukkit/help/CustomIndexHelpTopic.java
index 5d22f51dca81d4f5e4987cb9466267646632751c..87dd8685ee38689f4e13dd050687262587378bcf 100644
--- a/src/main/java/org/bukkit/craftbukkit/help/CustomIndexHelpTopic.java
+++ b/src/main/java/org/bukkit/craftbukkit/help/CustomIndexHelpTopic.java
@@ -7,21 +7,24 @@ import org.bukkit.command.CommandSender;
 import org.bukkit.help.HelpMap;
 import org.bukkit.help.HelpTopic;
 import org.bukkit.help.IndexHelpTopic;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 /**
  */
 public class CustomIndexHelpTopic extends IndexHelpTopic {
-    private List<String> futureTopics;
+    private @Nullable List<String> futureTopics;
     private final HelpMap helpMap;
 
-    public CustomIndexHelpTopic(HelpMap helpMap, String name, String shortText, String permission, List<String> futureTopics, String preamble) {
+    public CustomIndexHelpTopic(HelpMap helpMap, @NotNull String name, String shortText, String permission, List<String> futureTopics, String preamble) {
         super(name, shortText, permission, new HashSet<HelpTopic>(), preamble);
         this.helpMap = helpMap;
         this.futureTopics = futureTopics;
     }
 
     @Override
-    public String getFullText(CommandSender sender) {
+    public @NotNull String getFullText(@NotNull CommandSender sender) {
         if (this.futureTopics != null) {
             List<HelpTopic> topics = new LinkedList<HelpTopic>();
             for (String futureTopic : this.futureTopics) {
diff --git a/src/main/java/org/bukkit/craftbukkit/help/HelpYamlReader.java b/src/main/java/org/bukkit/craftbukkit/help/HelpYamlReader.java
index 74b49f4c1649c161c3c785be7708f5970989f7f3..249cf17ddacc77cb664a297688ec3bb0f91763e8 100644
--- a/src/main/java/org/bukkit/craftbukkit/help/HelpYamlReader.java
+++ b/src/main/java/org/bukkit/craftbukkit/help/HelpYamlReader.java
@@ -12,6 +12,8 @@ import org.bukkit.Server;
 import org.bukkit.configuration.ConfigurationSection;
 import org.bukkit.configuration.file.YamlConfiguration;
 import org.bukkit.help.HelpTopic;
+import org.jetbrains.annotations.NotNull;
+
 
 /**
  * HelpYamlReader is responsible for processing the contents of the help.yml file.
@@ -22,7 +24,7 @@ public class HelpYamlReader {
     private final char ALT_COLOR_CODE = '&';
     private final Server server;
 
-    public HelpYamlReader(Server server) {
+    public HelpYamlReader(@NotNull Server server) {
         this.server = server;
 
         File helpYamlFile = new File("help.yml");
@@ -51,7 +53,7 @@ public class HelpYamlReader {
      *
      * @return A list of general topics.
      */
-    public List<HelpTopic> getGeneralTopics() {
+    public @NotNull List<HelpTopic> getGeneralTopics() {
         List<HelpTopic> topics = new LinkedList<HelpTopic>();
         ConfigurationSection generalTopics = this.helpYaml.getConfigurationSection("general-topics");
         if (generalTopics != null) {
@@ -71,7 +73,7 @@ public class HelpYamlReader {
      *
      * @return A list of index topics.
      */
-    public List<HelpTopic> getIndexTopics() {
+    public @NotNull List<HelpTopic> getIndexTopics() {
         List<HelpTopic> topics = new LinkedList<HelpTopic>();
         ConfigurationSection indexTopics = this.helpYaml.getConfigurationSection("index-topics");
         if (indexTopics != null) {
@@ -92,7 +94,7 @@ public class HelpYamlReader {
      *
      * @return A list of amendments.
      */
-    public List<HelpTopicAmendment> getTopicAmendments() {
+    public @NotNull List<HelpTopicAmendment> getTopicAmendments() {
         List<HelpTopicAmendment> amendments = new LinkedList<HelpTopicAmendment>();
         ConfigurationSection commandTopics = this.helpYaml.getConfigurationSection("amended-topics");
         if (commandTopics != null) {
@@ -107,7 +109,7 @@ public class HelpYamlReader {
         return amendments;
     }
 
-    public List<String> getIgnoredPlugins() {
+    public @NotNull List<String> getIgnoredPlugins() {
         return this.helpYaml.getStringList("ignore-plugins");
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/help/MultipleCommandAliasHelpTopic.java b/src/main/java/org/bukkit/craftbukkit/help/MultipleCommandAliasHelpTopic.java
index 3233ffe920c961f04045713232d90249b950db67..9f28172c3140cdd20ccc43eed6140ab7510a985f 100644
--- a/src/main/java/org/bukkit/craftbukkit/help/MultipleCommandAliasHelpTopic.java
+++ b/src/main/java/org/bukkit/craftbukkit/help/MultipleCommandAliasHelpTopic.java
@@ -6,6 +6,8 @@ import org.bukkit.command.CommandSender;
 import org.bukkit.command.ConsoleCommandSender;
 import org.bukkit.command.MultipleCommandAlias;
 import org.bukkit.help.HelpTopic;
+import org.jetbrains.annotations.NotNull;
+
 
 /**
  * This is a help topic implementation for {@link MultipleCommandAlias} commands.
@@ -14,7 +16,7 @@ public class MultipleCommandAliasHelpTopic extends HelpTopic {
 
     private final MultipleCommandAlias alias;
 
-    public MultipleCommandAliasHelpTopic(MultipleCommandAlias alias) {
+    public MultipleCommandAliasHelpTopic(@NotNull MultipleCommandAlias alias) {
         this.alias = alias;
 
         name = "/" + alias.getLabel();
diff --git a/src/main/java/org/bukkit/craftbukkit/help/MultipleCommandAliasHelpTopicFactory.java b/src/main/java/org/bukkit/craftbukkit/help/MultipleCommandAliasHelpTopicFactory.java
index de3ed3c96f7bb82bf8f283f3194a446f206c6289..865977eb1e1c2ff45d921e8b860ecb84af3f52d6 100644
--- a/src/main/java/org/bukkit/craftbukkit/help/MultipleCommandAliasHelpTopicFactory.java
+++ b/src/main/java/org/bukkit/craftbukkit/help/MultipleCommandAliasHelpTopicFactory.java
@@ -3,6 +3,8 @@ package org.bukkit.craftbukkit.help;
 import org.bukkit.command.MultipleCommandAlias;
 import org.bukkit.help.HelpTopic;
 import org.bukkit.help.HelpTopicFactory;
+import org.jetbrains.annotations.NotNull;
+
 
 /**
  * This class creates {@link MultipleCommandAliasHelpTopic} help topics from {@link MultipleCommandAlias} commands.
@@ -10,7 +12,7 @@ import org.bukkit.help.HelpTopicFactory;
 public class MultipleCommandAliasHelpTopicFactory implements HelpTopicFactory<MultipleCommandAlias> {
 
     @Override
-    public HelpTopic createTopic(MultipleCommandAlias multipleCommandAlias) {
+    public HelpTopic createTopic(@NotNull MultipleCommandAlias multipleCommandAlias) {
         return new MultipleCommandAliasHelpTopic(multipleCommandAlias);
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/help/SimpleHelpMap.java b/src/main/java/org/bukkit/craftbukkit/help/SimpleHelpMap.java
index 40b66adcb5aac64212b1937dc506ebb60f2eed83..36e51384a62e45e073582d057506048073f89543 100644
--- a/src/main/java/org/bukkit/craftbukkit/help/SimpleHelpMap.java
+++ b/src/main/java/org/bukkit/craftbukkit/help/SimpleHelpMap.java
@@ -25,6 +25,8 @@ import org.bukkit.help.HelpTopic;
 import org.bukkit.help.HelpTopicComparator;
 import org.bukkit.help.HelpTopicFactory;
 import org.bukkit.help.IndexHelpTopic;
+import org.jetbrains.annotations.NotNull;
+
 
 /**
  * Standard implementation of {@link HelpMap} for CraftBukkit servers.
@@ -32,8 +34,8 @@ import org.bukkit.help.IndexHelpTopic;
 public class SimpleHelpMap implements HelpMap {
 
     private HelpTopic defaultTopic;
-    private final Map<String, HelpTopic> helpTopics;
-    private final Map<Class, HelpTopicFactory<Command>> topicFactoryMap;
+    private final @NotNull Map<String, HelpTopic> helpTopics;
+    private final @NotNull Map<Class, HelpTopicFactory<Command>> topicFactoryMap;
     private final CraftServer server;
     private HelpYamlReader yaml;
 
@@ -55,7 +57,7 @@ public class SimpleHelpMap implements HelpMap {
     }
 
     @Override
-    public synchronized HelpTopic getHelpTopic(String topicName) {
+    public synchronized HelpTopic getHelpTopic(@NotNull String topicName) {
         if (topicName.equals("")) {
             return this.defaultTopic;
         }
@@ -68,12 +70,12 @@ public class SimpleHelpMap implements HelpMap {
     }
 
     @Override
-    public Collection<HelpTopic> getHelpTopics() {
+    public @NotNull Collection<HelpTopic> getHelpTopics() {
         return this.helpTopics.values();
     }
 
     @Override
-    public synchronized void addTopic(HelpTopic topic) {
+    public synchronized void addTopic(@NotNull HelpTopic topic) {
         // Existing topics take priority
         if (!this.helpTopics.containsKey(topic.getName())) {
             this.helpTopics.put(topic.getName(), topic);
@@ -86,7 +88,7 @@ public class SimpleHelpMap implements HelpMap {
     }
 
     @Override
-    public List<String> getIgnoredPlugins() {
+    public @NotNull List<String> getIgnoredPlugins() {
         return this.yaml.getIgnoredPlugins();
     }
 
@@ -183,7 +185,7 @@ public class SimpleHelpMap implements HelpMap {
         }
     }
 
-    private void fillPluginIndexes(Map<String, Set<HelpTopic>> pluginIndexes, Collection<? extends Command> commands) {
+    private void fillPluginIndexes(@NotNull Map<String, Set<HelpTopic>> pluginIndexes, @NotNull Collection<? extends Command> commands) {
         for (Command command : commands) {
             String pluginName = this.getCommandPluginName(command);
             if (pluginName != null) {
@@ -211,7 +213,7 @@ public class SimpleHelpMap implements HelpMap {
         return null;
     }
 
-    private boolean commandInIgnoredPlugin(Command command, Set<String> ignoredPlugins) {
+    private boolean commandInIgnoredPlugin(Command command, @NotNull Set<String> ignoredPlugins) {
         if ((command instanceof BukkitCommand) && ignoredPlugins.contains("Bukkit")) {
             return true;
         }
@@ -222,7 +224,7 @@ public class SimpleHelpMap implements HelpMap {
     }
 
     @Override
-    public void registerHelpTopicFactory(Class commandClass, HelpTopicFactory factory) {
+    public void registerHelpTopicFactory(@NotNull Class commandClass, HelpTopicFactory factory) {
         if (!Command.class.isAssignableFrom(commandClass) && !CommandExecutor.class.isAssignableFrom(commandClass)) {
             throw new IllegalArgumentException("commandClass must implement either Command or CommandExecutor!");
         }
@@ -232,7 +234,7 @@ public class SimpleHelpMap implements HelpMap {
     private class IsCommandTopicPredicate implements Predicate<HelpTopic> {
 
         @Override
-        public boolean apply(HelpTopic topic) {
+        public boolean apply(@NotNull HelpTopic topic) {
             return topic.getName().charAt(0) == '/';
         }
     }
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftBlastingRecipe.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftBlastingRecipe.java
index a51343838fd829d0ab708a3ee0180f3eded9c1f2..e7d322cee27b1e65be6bf880431974a3ba064b40 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftBlastingRecipe.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftBlastingRecipe.java
@@ -6,13 +6,15 @@ import org.bukkit.craftbukkit.util.CraftNamespacedKey;
 import org.bukkit.inventory.BlastingRecipe;
 import org.bukkit.inventory.ItemStack;
 import org.bukkit.inventory.RecipeChoice;
+import org.jetbrains.annotations.NotNull;
+
 
 public class CraftBlastingRecipe extends BlastingRecipe implements CraftRecipe {
-    public CraftBlastingRecipe(NamespacedKey key, ItemStack result, RecipeChoice source, float experience, int cookingTime) {
+    public CraftBlastingRecipe(@NotNull NamespacedKey key, @NotNull ItemStack result, @NotNull RecipeChoice source, float experience, int cookingTime) {
         super(key, result, source, experience, cookingTime);
     }
 
-    public static CraftBlastingRecipe fromBukkitRecipe(BlastingRecipe recipe) {
+    public static @NotNull CraftBlastingRecipe fromBukkitRecipe(BlastingRecipe recipe) {
         if (recipe instanceof CraftBlastingRecipe) {
             return (CraftBlastingRecipe) recipe;
         }
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftBlockInventoryHolder.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftBlockInventoryHolder.java
index 7ae484b0fa5bf5494c6ead15f7f1c0fa840ae270..982215a3239522f85ce3dae3e8b5a3da4dfbe8e2 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftBlockInventoryHolder.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftBlockInventoryHolder.java
@@ -7,24 +7,26 @@ import org.bukkit.block.Block;
 import org.bukkit.craftbukkit.block.CraftBlock;
 import org.bukkit.inventory.BlockInventoryHolder;
 import org.bukkit.inventory.Inventory;
+import org.jetbrains.annotations.NotNull;
+
 
 public class CraftBlockInventoryHolder implements BlockInventoryHolder {
 
-    private final Block block;
-    private final Inventory inventory;
+    private final @NotNull Block block;
+    private final @NotNull Inventory inventory;
 
-    public CraftBlockInventoryHolder(LevelAccessor world, BlockPos pos, Container inv) {
+    public CraftBlockInventoryHolder(LevelAccessor world, @NotNull BlockPos pos, Container inv) {
         this.block = CraftBlock.at(world, pos);
         this.inventory = new CraftInventory(inv);
     }
 
     @Override
-    public Block getBlock() {
+    public @NotNull Block getBlock() {
         return this.block;
     }
 
     @Override
-    public Inventory getInventory() {
+    public @NotNull Inventory getInventory() {
         return this.inventory;
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftCampfireRecipe.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftCampfireRecipe.java
index aff14d5137ae41718ec843a4dc2dd2c3ecb691b9..8b8ddfe9274a3dddb2f8c1b3b2ef13bbdbce322f 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftCampfireRecipe.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftCampfireRecipe.java
@@ -6,13 +6,15 @@ import org.bukkit.craftbukkit.util.CraftNamespacedKey;
 import org.bukkit.inventory.CampfireRecipe;
 import org.bukkit.inventory.ItemStack;
 import org.bukkit.inventory.RecipeChoice;
+import org.jetbrains.annotations.NotNull;
+
 
 public class CraftCampfireRecipe extends CampfireRecipe implements CraftRecipe {
-    public CraftCampfireRecipe(NamespacedKey key, ItemStack result, RecipeChoice source, float experience, int cookingTime) {
+    public CraftCampfireRecipe(@NotNull NamespacedKey key, @NotNull ItemStack result, @NotNull RecipeChoice source, float experience, int cookingTime) {
         super(key, result, source, experience, cookingTime);
     }
 
-    public static CraftCampfireRecipe fromBukkitRecipe(CampfireRecipe recipe) {
+    public static @NotNull CraftCampfireRecipe fromBukkitRecipe(CampfireRecipe recipe) {
         if (recipe instanceof CraftCampfireRecipe) {
             return (CraftCampfireRecipe) recipe;
         }
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftComplexRecipe.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftComplexRecipe.java
index 81dfefbb1adda0d0b89b912b42d461bdc2250dcc..21f69d1a53d5f331fa9b77d757ceb291769f5193 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftComplexRecipe.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftComplexRecipe.java
@@ -6,6 +6,8 @@ import org.bukkit.NamespacedKey;
 import org.bukkit.craftbukkit.util.CraftNamespacedKey;
 import org.bukkit.inventory.ComplexRecipe;
 import org.bukkit.inventory.ItemStack;
+import org.jetbrains.annotations.NotNull;
+
 
 public class CraftComplexRecipe implements CraftRecipe, ComplexRecipe {
 
@@ -16,12 +18,12 @@ public class CraftComplexRecipe implements CraftRecipe, ComplexRecipe {
     }
 
     @Override
-    public ItemStack getResult() {
+    public @NotNull ItemStack getResult() {
         return CraftItemStack.asCraftMirror(this.recipe.getResultItem());
     }
 
     @Override
-    public NamespacedKey getKey() {
+    public @NotNull NamespacedKey getKey() {
         return CraftNamespacedKey.fromMinecraft(this.recipe.getId());
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftContainer.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftContainer.java
index 1f73834043c2d2be17ae647589653d517db36a1b..566e045c4561aed3d62ab91ab80bf807d2b601ba 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftContainer.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftContainer.java
@@ -29,14 +29,16 @@ import org.bukkit.entity.HumanEntity;
 import org.bukkit.event.inventory.InventoryType;
 import org.bukkit.inventory.Inventory;
 import org.bukkit.inventory.InventoryView;
+import org.jetbrains.annotations.NotNull;
+
 
 public class CraftContainer extends AbstractContainerMenu {
 
-    private final InventoryView view;
+    private final @NotNull InventoryView view;
     private InventoryType cachedType;
     private AbstractContainerMenu delegate;
 
-    public CraftContainer(InventoryView view, Player player, int id) {
+    public CraftContainer(@NotNull InventoryView view, Player player, int id) {
         super(CraftContainer.getNotchInventoryType(view.getTopInventory()), id);
         this.view = view;
         // TODO: Do we need to check that it really is a CraftInventory?
@@ -46,37 +48,37 @@ public class CraftContainer extends AbstractContainerMenu {
         this.setupSlots(top, bottom, player);
     }
 
-    public CraftContainer(final Inventory inventory, final Player player, int id) {
+    public CraftContainer(final @NotNull Inventory inventory, final @NotNull Player player, int id) {
         this(new InventoryView() {
             @Override
-            public Inventory getTopInventory() {
+            public @NotNull Inventory getTopInventory() {
                 return inventory;
             }
 
             @Override
-            public Inventory getBottomInventory() {
+            public @NotNull Inventory getBottomInventory() {
                 return getPlayer().getInventory();
             }
 
             @Override
-            public HumanEntity getPlayer() {
+            public @NotNull HumanEntity getPlayer() {
                 return player.getBukkitEntity();
             }
 
             @Override
-            public InventoryType getType() {
+            public @NotNull InventoryType getType() {
                 return inventory.getType();
             }
 
             // Paper start
             @Override
-            public net.kyori.adventure.text.Component title() {
+            public net.kyori.adventure.text.@NotNull Component title() {
                 return inventory instanceof CraftInventoryCustom custom ? custom.title() : inventory.getType().defaultTitle(); // Paper
             }
             // Paper end
 
             @Override
-            public String getTitle() {
+            public @NotNull String getTitle() {
                 return inventory instanceof CraftInventoryCustom custom ? custom.getTitle() : inventory.getType().getDefaultTitle(); // Paper
             }
         }, player, id);
@@ -87,7 +89,7 @@ public class CraftContainer extends AbstractContainerMenu {
         return this.view;
     }
 
-    public static MenuType getNotchInventoryType(Inventory inventory) {
+    public static @NotNull MenuType getNotchInventoryType(@NotNull Inventory inventory) {
         switch (inventory.getType()) {
             case PLAYER:
             case CHEST:
@@ -156,7 +158,7 @@ public class CraftContainer extends AbstractContainerMenu {
         }
     }
 
-    private void setupSlots(Container top, net.minecraft.world.entity.player.Inventory bottom, Player entityhuman) {
+    private void setupSlots(@NotNull Container top, net.minecraft.world.entity.player.@NotNull Inventory bottom, Player entityhuman) {
         int windowId = -1;
         switch (this.cachedType) {
             case CREATIVE:
@@ -244,7 +246,7 @@ public class CraftContainer extends AbstractContainerMenu {
         }
     }
 
-    private void setupWorkbench(Container top, Container bottom) {
+    private void setupWorkbench(@NotNull Container top, @NotNull Container bottom) {
         // This code copied from ContainerWorkbench
         this.addSlot(new Slot(top, 0, 124, 35));
 
@@ -269,7 +271,7 @@ public class CraftContainer extends AbstractContainerMenu {
         // End copy from ContainerWorkbench
     }
 
-    private void setupAnvil(Container top, Container bottom) {
+    private void setupAnvil(@NotNull Container top, @NotNull Container bottom) {
         // This code copied from ContainerAnvilAbstract
         this.addSlot(new Slot(top, 0, 27, 47));
         this.addSlot(new Slot(top, 1, 76, 47));
@@ -291,7 +293,7 @@ public class CraftContainer extends AbstractContainerMenu {
     }
 
     @Override
-    public ItemStack quickMoveStack(Player player, int slot) {
+    public @NotNull ItemStack quickMoveStack(Player player, int slot) {
         return (this.delegate != null) ? this.delegate.quickMoveStack(player, slot) : ItemStack.EMPTY;
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftEntityEquipment.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftEntityEquipment.java
index 6827979a5b270ced53b46ecb9eff548727dadb81..ca8d335eafd14aedc19d6812a32e005bb0e32cd0 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftEntityEquipment.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftEntityEquipment.java
@@ -8,6 +8,9 @@ import org.bukkit.entity.Entity;
 import org.bukkit.inventory.EntityEquipment;
 import org.bukkit.inventory.EquipmentSlot;
 import org.bukkit.inventory.ItemStack;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 public class CraftEntityEquipment implements EntityEquipment {
 
@@ -23,21 +26,21 @@ public class CraftEntityEquipment implements EntityEquipment {
     }
 
     @Override
-    public void setItem(EquipmentSlot slot, ItemStack item, boolean silent) {
+    public void setItem(@Nullable EquipmentSlot slot, ItemStack item, boolean silent) {
         Preconditions.checkArgument(slot != null, "slot must not be null");
         net.minecraft.world.entity.EquipmentSlot nmsSlot = CraftEquipmentSlot.getNMS(slot);
         this.setEquipment(nmsSlot, item, silent);
     }
 
     @Override
-    public ItemStack getItem(EquipmentSlot slot) {
+    public @NotNull ItemStack getItem(@Nullable EquipmentSlot slot) {
         Preconditions.checkArgument(slot != null, "slot must not be null");
         net.minecraft.world.entity.EquipmentSlot nmsSlot = CraftEquipmentSlot.getNMS(slot);
         return this.getEquipment(nmsSlot);
     }
 
     @Override
-    public ItemStack getItemInMainHand() {
+    public @NotNull ItemStack getItemInMainHand() {
         return this.getEquipment(net.minecraft.world.entity.EquipmentSlot.MAINHAND);
     }
 
@@ -52,7 +55,7 @@ public class CraftEntityEquipment implements EntityEquipment {
     }
 
     @Override
-    public ItemStack getItemInOffHand() {
+    public @NotNull ItemStack getItemInOffHand() {
         return this.getEquipment(net.minecraft.world.entity.EquipmentSlot.OFFHAND);
     }
 
@@ -67,7 +70,7 @@ public class CraftEntityEquipment implements EntityEquipment {
     }
 
     @Override
-    public ItemStack getItemInHand() {
+    public @NotNull ItemStack getItemInHand() {
         return this.getItemInMainHand();
     }
 
@@ -77,7 +80,7 @@ public class CraftEntityEquipment implements EntityEquipment {
     }
 
     @Override
-    public ItemStack getHelmet() {
+    public @NotNull ItemStack getHelmet() {
         return this.getEquipment(net.minecraft.world.entity.EquipmentSlot.HEAD);
     }
 
@@ -92,7 +95,7 @@ public class CraftEntityEquipment implements EntityEquipment {
     }
 
     @Override
-    public ItemStack getChestplate() {
+    public @NotNull ItemStack getChestplate() {
         return this.getEquipment(net.minecraft.world.entity.EquipmentSlot.CHEST);
     }
 
@@ -107,7 +110,7 @@ public class CraftEntityEquipment implements EntityEquipment {
     }
 
     @Override
-    public ItemStack getLeggings() {
+    public @NotNull ItemStack getLeggings() {
         return this.getEquipment(net.minecraft.world.entity.EquipmentSlot.LEGS);
     }
 
@@ -122,7 +125,7 @@ public class CraftEntityEquipment implements EntityEquipment {
     }
 
     @Override
-    public ItemStack getBoots() {
+    public @NotNull ItemStack getBoots() {
         return this.getEquipment(net.minecraft.world.entity.EquipmentSlot.FEET);
     }
 
@@ -137,7 +140,7 @@ public class CraftEntityEquipment implements EntityEquipment {
     }
 
     @Override
-    public ItemStack[] getArmorContents() {
+    public ItemStack @NotNull [] getArmorContents() {
         ItemStack[] armor = new ItemStack[]{
                 this.getEquipment(net.minecraft.world.entity.EquipmentSlot.FEET),
                 this.getEquipment(net.minecraft.world.entity.EquipmentSlot.LEGS),
@@ -148,18 +151,18 @@ public class CraftEntityEquipment implements EntityEquipment {
     }
 
     @Override
-    public void setArmorContents(ItemStack[] items) {
+    public void setArmorContents(ItemStack @NotNull [] items) {
         this.setEquipment(net.minecraft.world.entity.EquipmentSlot.FEET, items.length >= 1 ? items[0] : null, false);
         this.setEquipment(net.minecraft.world.entity.EquipmentSlot.LEGS, items.length >= 2 ? items[1] : null, false);
         this.setEquipment(net.minecraft.world.entity.EquipmentSlot.CHEST, items.length >= 3 ? items[2] : null, false);
         this.setEquipment(net.minecraft.world.entity.EquipmentSlot.HEAD, items.length >= 4 ? items[3] : null, false);
     }
 
-    private ItemStack getEquipment(net.minecraft.world.entity.EquipmentSlot slot) {
+    private @NotNull ItemStack getEquipment(net.minecraft.world.entity.@NotNull EquipmentSlot slot) {
         return CraftItemStack.asBukkitCopy(this.entity.getHandle().getItemBySlot(slot));
     }
 
-    private void setEquipment(net.minecraft.world.entity.EquipmentSlot slot, ItemStack stack, boolean silent) {
+    private void setEquipment(net.minecraft.world.entity.@NotNull EquipmentSlot slot, ItemStack stack, boolean silent) {
         this.entity.getHandle().setItemSlot(slot, CraftItemStack.asNMSCopy(stack), silent);
     }
 
@@ -171,7 +174,7 @@ public class CraftEntityEquipment implements EntityEquipment {
     }
 
     @Override
-    public Entity getHolder() {
+    public @NotNull Entity getHolder() {
         return this.entity;
     }
 
@@ -246,17 +249,17 @@ public class CraftEntityEquipment implements EntityEquipment {
     }
     // Paper start
     @Override
-    public float getDropChance(EquipmentSlot slot) {
+    public float getDropChance(@NotNull EquipmentSlot slot) {
         return getDropChance(CraftEquipmentSlot.getNMS(slot));
     }
 
     @Override
-    public void setDropChance(EquipmentSlot slot, float chance) {
+    public void setDropChance(@NotNull EquipmentSlot slot, float chance) {
         setDropChance(CraftEquipmentSlot.getNMS(slot), chance);
     }
     // Paper end
 
-    private void setDropChance(net.minecraft.world.entity.EquipmentSlot slot, float chance) {
+    private void setDropChance(net.minecraft.world.entity.@NotNull EquipmentSlot slot, float chance) {
         Preconditions.checkArgument(this.entity.getHandle() instanceof Mob, "Cannot set drop chance for non-Mob entity");
 
         if (slot == net.minecraft.world.entity.EquipmentSlot.MAINHAND || slot == net.minecraft.world.entity.EquipmentSlot.OFFHAND) {
@@ -266,7 +269,7 @@ public class CraftEntityEquipment implements EntityEquipment {
         }
     }
 
-    private float getDropChance(net.minecraft.world.entity.EquipmentSlot slot) {
+    private float getDropChance(net.minecraft.world.entity.@NotNull EquipmentSlot slot) {
         if (!(this.entity.getHandle() instanceof Mob)) {
             return 1;
         }
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftFurnaceRecipe.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftFurnaceRecipe.java
index 806bb9397747a739aad013c565fd33f62f3e7183..709ab90c27db3ba23c7ef4e3aac044c0b93d66a1 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftFurnaceRecipe.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftFurnaceRecipe.java
@@ -6,13 +6,15 @@ import org.bukkit.craftbukkit.util.CraftNamespacedKey;
 import org.bukkit.inventory.FurnaceRecipe;
 import org.bukkit.inventory.ItemStack;
 import org.bukkit.inventory.RecipeChoice;
+import org.jetbrains.annotations.NotNull;
+
 
 public class CraftFurnaceRecipe extends FurnaceRecipe implements CraftRecipe {
-    public CraftFurnaceRecipe(NamespacedKey key, ItemStack result, RecipeChoice source, float experience, int cookingTime) {
+    public CraftFurnaceRecipe(@NotNull NamespacedKey key, @NotNull ItemStack result, @NotNull RecipeChoice source, float experience, int cookingTime) {
         super(key, result, source, experience, cookingTime);
     }
 
-    public static CraftFurnaceRecipe fromBukkitRecipe(FurnaceRecipe recipe) {
+    public static @NotNull CraftFurnaceRecipe fromBukkitRecipe(FurnaceRecipe recipe) {
         if (recipe instanceof CraftFurnaceRecipe) {
             return (CraftFurnaceRecipe) recipe;
         }
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventory.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventory.java
index 59457378820d7f2899254a6aeef4c30c926ce543..9420f535ce701b4098b4c250c443f7ab64f40c95 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventory.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventory.java
@@ -28,6 +28,9 @@ import org.bukkit.event.inventory.InventoryType;
 import org.bukkit.inventory.Inventory;
 import org.bukkit.inventory.InventoryHolder;
 import org.bukkit.inventory.ItemStack;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 public class CraftInventory implements Inventory {
     protected final Container inventory;
@@ -46,12 +49,12 @@ public class CraftInventory implements Inventory {
     }
 
     @Override
-    public ItemStack getItem(int index) {
+    public @Nullable ItemStack getItem(int index) {
         net.minecraft.world.item.ItemStack item = this.getInventory().getItem(index);
         return item.isEmpty() ? null : CraftItemStack.asCraftMirror(item);
     }
 
-    protected ItemStack[] asCraftMirror(List<net.minecraft.world.item.ItemStack> mcItems) {
+    protected ItemStack @NotNull [] asCraftMirror(@NotNull List<net.minecraft.world.item.ItemStack> mcItems) {
         int size = mcItems.size();
         ItemStack[] items = new ItemStack[size];
 
@@ -69,7 +72,7 @@ public class CraftInventory implements Inventory {
     }
 
     @Override
-    public void setStorageContents(ItemStack[] items) throws IllegalArgumentException {
+    public void setStorageContents(ItemStack @NotNull [] items) throws IllegalArgumentException {
         this.setContents(items);
     }
 
@@ -81,7 +84,7 @@ public class CraftInventory implements Inventory {
     }
 
     @Override
-    public void setContents(ItemStack[] items) {
+    public void setContents(ItemStack @NotNull [] items) {
         if (this.getSize() < items.length) {
             throw new IllegalArgumentException("Invalid inventory size; expected " + this.getSize() + " or less");
         }
@@ -113,7 +116,7 @@ public class CraftInventory implements Inventory {
     }
 
     @Override
-    public boolean contains(ItemStack item) {
+    public boolean contains(@Nullable ItemStack item) {
         if (item == null) {
             return false;
         }
@@ -143,7 +146,7 @@ public class CraftInventory implements Inventory {
     }
 
     @Override
-    public boolean contains(ItemStack item, int amount) {
+    public boolean contains(@Nullable ItemStack item, int amount) {
         if (item == null) {
             return false;
         }
@@ -159,7 +162,7 @@ public class CraftInventory implements Inventory {
     }
 
     @Override
-    public boolean containsAtLeast(ItemStack item, int amount) {
+    public boolean containsAtLeast(@Nullable ItemStack item, int amount) {
         if (item == null) {
             return false;
         }
@@ -175,7 +178,7 @@ public class CraftInventory implements Inventory {
     }
 
     @Override
-    public HashMap<Integer, ItemStack> all(Material material) {
+    public @NotNull HashMap<Integer, ItemStack> all(Material material) {
         Validate.notNull(material, "Material cannot be null");
         material = CraftLegacy.fromLegacy(material);
         HashMap<Integer, ItemStack> slots = new HashMap<Integer, ItemStack>();
@@ -191,7 +194,7 @@ public class CraftInventory implements Inventory {
     }
 
     @Override
-    public HashMap<Integer, ItemStack> all(ItemStack item) {
+    public @NotNull HashMap<Integer, ItemStack> all(@Nullable ItemStack item) {
         HashMap<Integer, ItemStack> slots = new HashMap<Integer, ItemStack>();
         if (item != null) {
             ItemStack[] inventory = this.getStorageContents();
@@ -228,7 +231,7 @@ public class CraftInventory implements Inventory {
         return first(item, withAmount, getStorageContents());
     }
 
-    private int first(ItemStack item, boolean withAmount, ItemStack[] inventory) {
+    private int first(@Nullable ItemStack item, boolean withAmount, ItemStack @NotNull [] inventory) {
         // Paper end
         if (item == null) {
             return -1;
@@ -273,7 +276,7 @@ public class CraftInventory implements Inventory {
         return -1;
     }
 
-    private int firstPartial(ItemStack item) {
+    private int firstPartial(@Nullable ItemStack item) {
         ItemStack[] inventory = this.getStorageContents();
         ItemStack filteredItem = CraftItemStack.asCraftCopy(item);
         if (item == null) {
@@ -289,7 +292,7 @@ public class CraftInventory implements Inventory {
     }
 
     @Override
-    public HashMap<Integer, ItemStack> addItem(ItemStack... items) {
+    public @NotNull HashMap<Integer, ItemStack> addItem(ItemStack @NotNull ... items) {
         Validate.noNullElements(items, "Item cannot be null");
         HashMap<Integer, ItemStack> leftover = new HashMap<Integer, ItemStack>();
 
@@ -355,17 +358,17 @@ public class CraftInventory implements Inventory {
     }
 
     @Override
-    public HashMap<Integer, ItemStack> removeItem(ItemStack... items) {
+    public @NotNull HashMap<Integer, ItemStack> removeItem(ItemStack... items) {
         // Paper start
         return removeItem(false, items);
     }
 
     @Override
-    public HashMap<Integer, ItemStack> removeItemAnySlot(ItemStack... items) {
+    public @NotNull HashMap<Integer, ItemStack> removeItemAnySlot(ItemStack... items) {
         return removeItem(true, items);
     }
 
-    private HashMap<Integer, ItemStack> removeItem(boolean searchEntire, ItemStack... items) {
+    private @NotNull HashMap<Integer, ItemStack> removeItem(boolean searchEntire, ItemStack @NotNull ... items) {
         // Paper end
         Validate.notNull(items, "Items cannot be null");
         HashMap<Integer, ItemStack> leftover = new HashMap<Integer, ItemStack>();
@@ -459,12 +462,12 @@ public class CraftInventory implements Inventory {
     // Paper end
 
     @Override
-    public ListIterator<ItemStack> iterator() {
+    public @NotNull ListIterator<ItemStack> iterator() {
         return new InventoryIterator(this);
     }
 
     @Override
-    public ListIterator<ItemStack> iterator(int index) {
+    public @NotNull ListIterator<ItemStack> iterator(int index) {
         if (index < 0) {
             index += this.getSize() + 1; // ie, with -1, previous() will return the last element
         }
@@ -472,12 +475,12 @@ public class CraftInventory implements Inventory {
     }
 
     @Override
-    public List<HumanEntity> getViewers() {
+    public @NotNull List<HumanEntity> getViewers() {
         return this.inventory.getViewers();
     }
 
     @Override
-    public InventoryType getType() {
+    public @NotNull InventoryType getType() {
         // Thanks to Droppers extending Dispensers, Blast Furnaces & Smokers extending Furnace, order is important.
         if (this.inventory instanceof CraftingContainer) {
             return this.inventory.getContainerSize() >= 9 ? InventoryType.WORKBENCH : InventoryType.CRAFTING;
@@ -539,13 +542,13 @@ public class CraftInventory implements Inventory {
     }
 
     @Override
-    public InventoryHolder getHolder() {
+    public @Nullable InventoryHolder getHolder() {
         return this.inventory.getOwner();
     }
 
     // Paper start - getHolder without snapshot
     @Override
-    public InventoryHolder getHolder(boolean useSnapshot) {
+    public @Nullable InventoryHolder getHolder(boolean useSnapshot) {
         return inventory instanceof net.minecraft.world.level.block.entity.BlockEntity ? ((net.minecraft.world.level.block.entity.BlockEntity) inventory).getOwner(useSnapshot) : getHolder();
     }
     // Paper end
@@ -571,7 +574,7 @@ public class CraftInventory implements Inventory {
     }
 
     @Override
-    public Location getLocation() {
+    public @Nullable Location getLocation() {
         return this.inventory.getLocation();
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventoryCrafting.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventoryCrafting.java
index 47277f7db8e676fad127fb40413ed3a4059aefcc..cf0fe961577f947a494412ac8df042872060d88b 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventoryCrafting.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventoryCrafting.java
@@ -6,6 +6,8 @@ import net.minecraft.world.Container;
 import org.bukkit.inventory.CraftingInventory;
 import org.bukkit.inventory.ItemStack;
 import org.bukkit.inventory.Recipe;
+import org.jetbrains.annotations.NotNull;
+
 
 public class CraftInventoryCrafting extends CraftInventory implements CraftingInventory {
     private final Container resultInventory;
@@ -29,7 +31,7 @@ public class CraftInventoryCrafting extends CraftInventory implements CraftingIn
     }
 
     @Override
-    public void setContents(ItemStack[] items) {
+    public void setContents(ItemStack @NotNull [] items) {
         if (this.getSize() > items.length) {
             throw new IllegalArgumentException("Invalid inventory size; expected " + this.getSize() + " or less");
         }
@@ -37,7 +39,7 @@ public class CraftInventoryCrafting extends CraftInventory implements CraftingIn
     }
 
     @Override
-    public ItemStack[] getContents() {
+    public ItemStack @NotNull [] getContents() {
         ItemStack[] items = new ItemStack[this.getSize()];
         List<net.minecraft.world.item.ItemStack> mcResultItems = this.getResultInventory().getContents();
 
@@ -55,7 +57,7 @@ public class CraftInventoryCrafting extends CraftInventory implements CraftingIn
         return items;
     }
 
-    public void setContents(ItemStack result, ItemStack[] contents) {
+    public void setContents(ItemStack result, ItemStack @NotNull [] contents) {
         this.setResult(result);
         this.setMatrix(contents);
     }
@@ -95,7 +97,7 @@ public class CraftInventoryCrafting extends CraftInventory implements CraftingIn
     }
 
     @Override
-    public void setMatrix(ItemStack[] contents) {
+    public void setMatrix(ItemStack @NotNull [] contents) {
         if (this.getMatrixInventory().getContainerSize() > contents.length) {
             throw new IllegalArgumentException("Invalid inventory size; expected " + this.getMatrixInventory().getContainerSize() + " or less");
         }
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventoryCustom.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventoryCustom.java
index 08f8ea0716ef8fa850f1f2f7b8a6e636f57ae872..256547b7700866dfa397b2b36167987551ccaae4 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventoryCustom.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventoryCustom.java
@@ -13,24 +13,27 @@ import org.bukkit.craftbukkit.entity.CraftHumanEntity;
 import org.bukkit.entity.HumanEntity;
 import org.bukkit.event.inventory.InventoryType;
 import org.bukkit.inventory.InventoryHolder;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 public class CraftInventoryCustom extends CraftInventory {
     // Paper start
-    public CraftInventoryCustom(InventoryHolder owner, InventoryType type, Container delegate) {
+    public CraftInventoryCustom(@NotNull InventoryHolder owner, @NotNull InventoryType type, @NotNull Container delegate) {
         super(new io.papermc.paper.inventory.PaperInventoryCustomHolderContainer(owner, delegate, type));
     }
     // Paper end
-    public CraftInventoryCustom(InventoryHolder owner, InventoryType type) {
+    public CraftInventoryCustom(InventoryHolder owner, @NotNull InventoryType type) {
         super(new MinecraftInventory(owner, type));
     }
 
     // Paper start
-    public CraftInventoryCustom(InventoryHolder owner, InventoryType type, net.kyori.adventure.text.Component title) {
+    public CraftInventoryCustom(InventoryHolder owner, @NotNull InventoryType type, net.kyori.adventure.text.@NotNull Component title) {
         super(new MinecraftInventory(owner, type, title));
     }
     // Paper end
 
-    public CraftInventoryCustom(InventoryHolder owner, InventoryType type, String title) {
+    public CraftInventoryCustom(InventoryHolder owner, @NotNull InventoryType type, @NotNull String title) {
         super(new MinecraftInventory(owner, type, title));
     }
 
@@ -39,12 +42,12 @@ public class CraftInventoryCustom extends CraftInventory {
     }
 
     // Paper start
-    public CraftInventoryCustom(InventoryHolder owner, int size, net.kyori.adventure.text.Component title) {
+    public CraftInventoryCustom(InventoryHolder owner, int size, net.kyori.adventure.text.@NotNull Component title) {
         super(new MinecraftInventory(owner, size, title));
     }
     // Paper end
 
-    public CraftInventoryCustom(InventoryHolder owner, int size, String title) {
+    public CraftInventoryCustom(InventoryHolder owner, int size, @NotNull String title) {
         super(new MinecraftInventory(owner, size, title));
     }
     // Paper start
@@ -70,27 +73,27 @@ public class CraftInventoryCustom extends CraftInventory {
     // Paper end
 
     static class MinecraftInventory implements Container {
-        private final NonNullList<ItemStack> items;
+        private final @NotNull NonNullList<ItemStack> items;
         private int maxStack = MAX_STACK;
-        private final List<HumanEntity> viewers;
-        private final String title;
-        private final net.kyori.adventure.text.Component adventure$title; // Paper
+        private final @NotNull List<HumanEntity> viewers;
+        private final @NotNull String title;
+        private final net.kyori.adventure.text.@NotNull Component adventure$title; // Paper
         private InventoryType type;
         private final InventoryHolder owner;
 
         // Paper start
-        public MinecraftInventory(InventoryHolder owner, InventoryType type, net.kyori.adventure.text.Component title) {
+        public MinecraftInventory(InventoryHolder owner, @NotNull InventoryType type, net.kyori.adventure.text.@NotNull Component title) {
             this(owner, type.getDefaultSize(), title);
             this.type = type;
         }
         // Paper end
 
-        public MinecraftInventory(InventoryHolder owner, InventoryType type) {
+        public MinecraftInventory(InventoryHolder owner, @NotNull InventoryType type) {
             this(owner, type.getDefaultSize(), type.getDefaultTitle());
             this.type = type;
         }
 
-        public MinecraftInventory(InventoryHolder owner, InventoryType type, String title) {
+        public MinecraftInventory(InventoryHolder owner, @NotNull InventoryType type, @NotNull String title) {
             this(owner, type.getDefaultSize(), title);
             this.type = type;
         }
@@ -99,7 +102,7 @@ public class CraftInventoryCustom extends CraftInventory {
             this(owner, size, "Chest");
         }
 
-        public MinecraftInventory(InventoryHolder owner, int size, String title) {
+        public MinecraftInventory(InventoryHolder owner, int size, @NotNull String title) {
             Validate.notNull(title, "Title cannot be null");
             this.items = NonNullList.withSize(size, ItemStack.EMPTY);
             this.title = title;
@@ -110,7 +113,7 @@ public class CraftInventoryCustom extends CraftInventory {
         }
 
         // Paper start
-        public MinecraftInventory(final InventoryHolder owner, final int size, final net.kyori.adventure.text.Component title) {
+        public MinecraftInventory(final InventoryHolder owner, final int size, final net.kyori.adventure.text.@NotNull Component title) {
             Validate.notNull(title, "Title cannot be null");
             this.items = NonNullList.withSize(size, ItemStack.EMPTY);
             this.title = net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().serialize(title);
@@ -127,12 +130,12 @@ public class CraftInventoryCustom extends CraftInventory {
         }
 
         @Override
-        public ItemStack getItem(int slot) {
+        public @NotNull ItemStack getItem(int slot) {
             return this.items.get(slot);
         }
 
         @Override
-        public ItemStack removeItem(int slot, int amount) {
+        public @NotNull ItemStack removeItem(int slot, int amount) {
             ItemStack stack = this.getItem(slot);
             ItemStack result;
             if (stack == ItemStack.EMPTY) return stack;
@@ -148,7 +151,7 @@ public class CraftInventoryCustom extends CraftInventory {
         }
 
         @Override
-        public ItemStack removeItemNoUpdate(int slot) {
+        public @NotNull ItemStack removeItemNoUpdate(int slot) {
             ItemStack stack = this.getItem(slot);
             ItemStack result;
             if (stack == ItemStack.EMPTY) return stack;
@@ -238,7 +241,7 @@ public class CraftInventoryCustom extends CraftInventory {
         }
 
         @Override
-        public Location getLocation() {
+        public @Nullable Location getLocation() {
             return null;
         }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventoryDoubleChest.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventoryDoubleChest.java
index 4707a651dc80086efa852bcfba38a534e7f1f3d0..220ae410a8280cf177a63a294ae98f10e1b99fc4 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventoryDoubleChest.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventoryDoubleChest.java
@@ -8,20 +8,22 @@ import org.bukkit.block.DoubleChest;
 import org.bukkit.inventory.DoubleChestInventory;
 import org.bukkit.inventory.Inventory;
 import org.bukkit.inventory.ItemStack;
+import org.jetbrains.annotations.NotNull;
+
 
 public class CraftInventoryDoubleChest extends CraftInventory implements DoubleChestInventory {
     public MenuProvider tile;
-    private final CraftInventory left;
-    private final CraftInventory right;
+    private final @NotNull CraftInventory left;
+    private final @NotNull CraftInventory right;
 
-    public CraftInventoryDoubleChest(ChestBlock.DoubleInventory block) {
+    public CraftInventoryDoubleChest(ChestBlock.@NotNull DoubleInventory block) {
         super(block.inventorylargechest);
         this.tile = block;
         this.left = new CraftInventory(block.inventorylargechest.container1);
         this.right = new CraftInventory(block.inventorylargechest.container2);
     }
 
-    public CraftInventoryDoubleChest(CompoundContainer largeChest) {
+    public CraftInventoryDoubleChest(@NotNull CompoundContainer largeChest) {
         super(largeChest);
         if (largeChest.container1 instanceof CompoundContainer) {
             this.left = new CraftInventoryDoubleChest((CompoundContainer) largeChest.container1);
@@ -36,17 +38,17 @@ public class CraftInventoryDoubleChest extends CraftInventory implements DoubleC
     }
 
     @Override
-    public Inventory getLeftSide() {
+    public @NotNull Inventory getLeftSide() {
         return this.left;
     }
 
     @Override
-    public Inventory getRightSide() {
+    public @NotNull Inventory getRightSide() {
         return this.right;
     }
 
     @Override
-    public void setContents(ItemStack[] items) {
+    public void setContents(ItemStack @NotNull [] items) {
         if (getInventory().getContainerSize() < items.length) {
             throw new IllegalArgumentException("Invalid inventory size; expected " + getInventory().getContainerSize() + " or less");
         }
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventoryFurnace.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventoryFurnace.java
index e8e53d3c7d8b1bba7d77dc0c76d242eb177ad851..2e3f498fb1b035180dd7d4435b8f5a85f2746817 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventoryFurnace.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventoryFurnace.java
@@ -4,6 +4,8 @@ import net.minecraft.world.level.block.entity.AbstractFurnaceBlockEntity;
 import org.bukkit.block.Furnace;
 import org.bukkit.inventory.FurnaceInventory;
 import org.bukkit.inventory.ItemStack;
+import org.jetbrains.annotations.Nullable;
+
 
 public class CraftInventoryFurnace extends CraftInventory implements FurnaceInventory {
     public CraftInventoryFurnace(AbstractFurnaceBlockEntity inventory) {
@@ -42,12 +44,12 @@ public class CraftInventoryFurnace extends CraftInventory implements FurnaceInve
 
     // Paper start
     @Override
-    public boolean isFuel(ItemStack stack) {
+    public boolean isFuel(@Nullable ItemStack stack) {
         return stack != null && !stack.getType().isEmpty() && AbstractFurnaceBlockEntity.isFuel(CraftItemStack.asNMSCopy(stack));
     }
 
     @Override
-    public boolean canSmelt(ItemStack stack) {
+    public boolean canSmelt(@Nullable ItemStack stack) {
         // data packs are always loaded in the main world
         net.minecraft.server.level.ServerLevel world = ((org.bukkit.craftbukkit.CraftWorld) org.bukkit.Bukkit.getWorlds().get(0)).getHandle();
         return stack != null && !stack.getType().isEmpty() && world.getRecipeManager().getRecipeFor(((AbstractFurnaceBlockEntity) this.inventory).recipeType, new net.minecraft.world.SimpleContainer(CraftItemStack.asNMSCopy(stack)), world).isPresent();
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventoryMerchant.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventoryMerchant.java
index 804542d5622074d835059c0a138335df2fac6153..7a179fbbcf507da1e693d5e4e1df51eb1a60503b 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventoryMerchant.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventoryMerchant.java
@@ -4,6 +4,8 @@ import net.minecraft.world.inventory.MerchantContainer;
 import org.bukkit.inventory.Merchant;
 import org.bukkit.inventory.MerchantInventory;
 import org.bukkit.inventory.MerchantRecipe;
+import org.jetbrains.annotations.NotNull;
+
 
 public class CraftInventoryMerchant extends CraftInventory implements MerchantInventory {
 
@@ -31,7 +33,7 @@ public class CraftInventoryMerchant extends CraftInventory implements MerchantIn
     }
 
     @Override
-    public Merchant getMerchant() {
+    public @NotNull Merchant getMerchant() {
         return this.merchant.getCraftMerchant();
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventoryPlayer.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventoryPlayer.java
index 8801d3f7ff6d2ff810f3e34a821dfb659c03f844..7e4ae6a9ff96ce56f9344609ec263690eef5574f 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventoryPlayer.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventoryPlayer.java
@@ -11,6 +11,9 @@ import org.bukkit.entity.HumanEntity;
 import org.bukkit.inventory.EntityEquipment;
 import org.bukkit.inventory.EquipmentSlot;
 import org.bukkit.inventory.ItemStack;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 public class CraftInventoryPlayer extends CraftInventory implements org.bukkit.inventory.PlayerInventory, EntityEquipment {
     public CraftInventoryPlayer(net.minecraft.world.entity.player.Inventory inventory) {
@@ -28,7 +31,7 @@ public class CraftInventoryPlayer extends CraftInventory implements org.bukkit.i
     }
 
     @Override
-    public ItemStack getItemInMainHand() {
+    public @NotNull ItemStack getItemInMainHand() {
         return CraftItemStack.asCraftMirror(this.getInventory().getSelected());
     }
 
@@ -43,7 +46,7 @@ public class CraftInventoryPlayer extends CraftInventory implements org.bukkit.i
     }
 
     @Override
-    public ItemStack getItemInOffHand() {
+    public @NotNull ItemStack getItemInOffHand() {
         return CraftItemStack.asCraftMirror(this.getInventory().offhand.get(0));
     }
 
@@ -60,7 +63,7 @@ public class CraftInventoryPlayer extends CraftInventory implements org.bukkit.i
     }
 
     @Override
-    public ItemStack getItemInHand() {
+    public @NotNull ItemStack getItemInHand() {
         return this.getItemInMainHand();
     }
 
@@ -114,7 +117,7 @@ public class CraftInventoryPlayer extends CraftInventory implements org.bukkit.i
     }
 
     @Override
-    public void setItem(EquipmentSlot slot, ItemStack item) {
+    public void setItem(@NotNull EquipmentSlot slot, ItemStack item) {
         Preconditions.checkArgument(slot != null, "slot must not be null");
 
         switch (slot) {
@@ -142,12 +145,12 @@ public class CraftInventoryPlayer extends CraftInventory implements org.bukkit.i
     }
 
     @Override
-    public void setItem(EquipmentSlot slot, ItemStack item, boolean silent) {
+    public void setItem(@NotNull EquipmentSlot slot, ItemStack item, boolean silent) {
         this.setItem(slot, item); // Silence doesn't apply to players
     }
 
     @Override
-    public ItemStack getItem(EquipmentSlot slot) {
+    public @NotNull ItemStack getItem(@NotNull EquipmentSlot slot) {
         Preconditions.checkArgument(slot != null, "slot must not be null");
 
         switch (slot) {
@@ -245,7 +248,7 @@ public class CraftInventoryPlayer extends CraftInventory implements org.bukkit.i
         return asCraftMirror(this.getInventory().armor);
     }
 
-    private void setSlots(ItemStack[] items, int baseSlot, int length) {
+    private void setSlots(ItemStack @Nullable [] items, int baseSlot, int length) {
         if (items == null) {
             items = new ItemStack[length];
         }
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventoryView.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventoryView.java
index 7d6b5fdb00a5c1614849735634262a36a4efbd66..55582018c49917174a135aa83a816519f50536f8 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventoryView.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventoryView.java
@@ -9,6 +9,8 @@ import org.bukkit.event.inventory.InventoryType;
 import org.bukkit.inventory.Inventory;
 import org.bukkit.inventory.InventoryView;
 import org.bukkit.inventory.ItemStack;
+import org.jetbrains.annotations.NotNull;
+
 
 public class CraftInventoryView extends InventoryView {
     private final AbstractContainerMenu container;
@@ -23,22 +25,22 @@ public class CraftInventoryView extends InventoryView {
     }
 
     @Override
-    public Inventory getTopInventory() {
+    public @NotNull Inventory getTopInventory() {
         return this.viewing;
     }
 
     @Override
-    public Inventory getBottomInventory() {
+    public @NotNull Inventory getBottomInventory() {
         return this.player.getInventory();
     }
 
     @Override
-    public HumanEntity getPlayer() {
+    public @NotNull HumanEntity getPlayer() {
         return this.player;
     }
 
     @Override
-    public InventoryType getType() {
+    public @NotNull InventoryType getType() {
         InventoryType type = this.viewing.getType();
         if (type == InventoryType.CRAFTING && this.player.getGameMode() == GameMode.CREATIVE) {
             return InventoryType.CREATIVE;
@@ -66,13 +68,13 @@ public class CraftInventoryView extends InventoryView {
 
     // Paper start
     @Override
-    public net.kyori.adventure.text.Component title() {
+    public net.kyori.adventure.text.@NotNull Component title() {
         return io.papermc.paper.adventure.PaperAdventure.asAdventure(this.container.getTitle());
     }
     // Paper end
 
     @Override
-    public String getTitle() {
+    public @NotNull String getTitle() {
         return CraftChatMessage.fromComponent(this.container.getTitle());
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftItemFactory.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftItemFactory.java
index 9076770aa8dc9a7a40efc06bb9fc50fd85026188..89006f6a0aa4a468a5522f59cd0054720a53fff2 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftItemFactory.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftItemFactory.java
@@ -15,10 +15,13 @@ import org.bukkit.craftbukkit.util.CraftLegacy;
 import org.bukkit.inventory.ItemFactory;
 import org.bukkit.inventory.ItemStack;
 import org.bukkit.inventory.meta.ItemMeta;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 public final class CraftItemFactory implements ItemFactory {
     static final Color DEFAULT_LEATHER_COLOR = Color.fromRGB(0xA06540);
-    private static final CraftItemFactory instance;
+    private static final @NotNull CraftItemFactory instance;
 
     static {
         instance = new CraftItemFactory();
@@ -29,7 +32,7 @@ public final class CraftItemFactory implements ItemFactory {
     }
 
     @Override
-    public boolean isApplicable(ItemMeta meta, ItemStack itemstack) {
+    public boolean isApplicable(ItemMeta meta, @Nullable ItemStack itemstack) {
         if (itemstack == null) {
             return false;
         }
@@ -37,7 +40,7 @@ public final class CraftItemFactory implements ItemFactory {
     }
 
     @Override
-    public boolean isApplicable(ItemMeta meta, Material type) {
+    public boolean isApplicable(@Nullable ItemMeta meta, Material type) {
         type = CraftLegacy.fromLegacy(type); // This may be called from legacy item stacks, try to get the right material
         if (type == null || meta == null) {
             return false;
@@ -50,12 +53,12 @@ public final class CraftItemFactory implements ItemFactory {
     }
 
     @Override
-    public ItemMeta getItemMeta(Material material) {
+    public @Nullable ItemMeta getItemMeta(Material material) {
         Validate.notNull(material, "Material cannot be null");
         return this.getItemMeta(material, null);
     }
 
-    private ItemMeta getItemMeta(Material material, CraftMetaItem meta) {
+    private @Nullable ItemMeta getItemMeta(Material material, CraftMetaItem meta) {
         material = CraftLegacy.fromLegacy(material); // This may be called from legacy item stacks, try to get the right material
         switch (material) {
         case AIR:
@@ -328,7 +331,7 @@ public final class CraftItemFactory implements ItemFactory {
     }
 
     @Override
-    public boolean equals(ItemMeta meta1, ItemMeta meta2) {
+    public boolean equals(@Nullable ItemMeta meta1, @Nullable ItemMeta meta2) {
         if (meta1 == meta2) {
             return true;
         }
@@ -348,7 +351,7 @@ public final class CraftItemFactory implements ItemFactory {
         return this.equals((CraftMetaItem) meta1, (CraftMetaItem) meta2);
     }
 
-    boolean equals(CraftMetaItem meta1, CraftMetaItem meta2) {
+    boolean equals(@NotNull CraftMetaItem meta1, @NotNull CraftMetaItem meta2) {
         /*
          * This couldn't be done inside of the objects themselves, else force recursion.
          * This is a fairly clean way of implementing it, by dividing the methods into purposes and letting each method perform its own function.
@@ -366,7 +369,7 @@ public final class CraftItemFactory implements ItemFactory {
     }
 
     @Override
-    public ItemMeta asMetaFor(ItemMeta meta, ItemStack stack) {
+    public ItemMeta asMetaFor(ItemMeta meta, @NotNull ItemStack stack) {
         Validate.notNull(stack, "Stack cannot be null");
         return this.asMetaFor(meta, stack.getType());
     }
@@ -381,12 +384,12 @@ public final class CraftItemFactory implements ItemFactory {
     }
 
     @Override
-    public Color getDefaultLeatherColor() {
+    public @NotNull Color getDefaultLeatherColor() {
         return CraftItemFactory.DEFAULT_LEATHER_COLOR;
     }
 
     @Override
-    public ItemStack createItemStack(String input) throws IllegalArgumentException {
+    public @NotNull ItemStack createItemStack(String input) throws IllegalArgumentException {
         try {
             ItemParser.ItemResult arg = ItemParser.parseForItem(BuiltInRegistries.ITEM.asLookup(), new StringReader(input));
 
@@ -405,13 +408,13 @@ public final class CraftItemFactory implements ItemFactory {
     }
 
     @Override
-    public Material updateMaterial(ItemMeta meta, Material material) throws IllegalArgumentException {
+    public @NotNull Material updateMaterial(@NotNull ItemMeta meta, Material material) throws IllegalArgumentException {
         return ((CraftMetaItem) meta).updateMaterial(material);
     }
 
     // Paper start
     @Override
-    public ItemStack enchantWithLevels(ItemStack itemStack, int levels, boolean allowTreasure, java.util.Random random) {
+    public @NotNull ItemStack enchantWithLevels(@NotNull ItemStack itemStack, int levels, boolean allowTreasure, java.util.Random random) {
         Validate.notNull(itemStack, "Argument 'itemStack' must not be null");
         Validate.isTrue(itemStack.getType() != Material.AIR, "Argument 'itemStack' must not be of type AIR");
         Validate.isTrue(itemStack.getAmount() > 0, "Argument 'itemStack' amount must be greater than 0");
@@ -426,7 +429,7 @@ public final class CraftItemFactory implements ItemFactory {
     }
 
     @Override
-    public net.kyori.adventure.text.event.HoverEvent<net.kyori.adventure.text.event.HoverEvent.ShowItem> asHoverEvent(final ItemStack item, final java.util.function.UnaryOperator<net.kyori.adventure.text.event.HoverEvent.ShowItem> op) {
+    public net.kyori.adventure.text.event.@NotNull HoverEvent<net.kyori.adventure.text.event.HoverEvent.ShowItem> asHoverEvent(final @NotNull ItemStack item, final java.util.function.@NotNull UnaryOperator<net.kyori.adventure.text.event.HoverEvent.ShowItem> op) {
         final net.minecraft.nbt.CompoundTag tag = CraftItemStack.asNMSCopy(item).getTag();
         return net.kyori.adventure.text.event.HoverEvent.showItem(op.apply(net.kyori.adventure.text.event.HoverEvent.ShowItem.of(item.getType().getKey(), item.getAmount(), io.papermc.paper.adventure.PaperAdventure.asBinaryTagHolder(tag))));
     }
@@ -438,12 +441,12 @@ public final class CraftItemFactory implements ItemFactory {
 
     // Paper start
     @Override
-    public ItemStack ensureServerConversions(ItemStack item) {
+    public @NotNull ItemStack ensureServerConversions(ItemStack item) {
         return CraftItemStack.asCraftMirror(CraftItemStack.asNMSCopy(item));
     }
 
     @Override
-    public String getI18NDisplayName(ItemStack item) {
+    public @Nullable String getI18NDisplayName(ItemStack item) {
         net.minecraft.world.item.ItemStack nms = null;
         if (item instanceof CraftItemStack) {
             nms = ((CraftItemStack) item).handle;
@@ -456,7 +459,7 @@ public final class CraftItemFactory implements ItemFactory {
     }
 
     @Override
-    public net.md_5.bungee.api.chat.hover.content.Content hoverContentOf(ItemStack itemStack) {
+    public net.md_5.bungee.api.chat.hover.content.@NotNull Content hoverContentOf(@NotNull ItemStack itemStack) {
         net.md_5.bungee.api.chat.ItemTag itemTag = net.md_5.bungee.api.chat.ItemTag.ofNbt(CraftItemStack.asNMSCopy(itemStack).getOrCreateTag().toString());
         return new net.md_5.bungee.api.chat.hover.content.Item(
             itemStack.getType().getKey().toString(),
@@ -465,17 +468,17 @@ public final class CraftItemFactory implements ItemFactory {
     }
 
     @Override
-    public net.md_5.bungee.api.chat.hover.content.Content hoverContentOf(org.bukkit.entity.Entity entity) {
+    public net.md_5.bungee.api.chat.hover.content.@NotNull Content hoverContentOf(org.bukkit.entity.@NotNull Entity entity) {
         return hoverContentOf(entity, org.apache.commons.lang3.StringUtils.isBlank(entity.getCustomName()) ? null : new net.md_5.bungee.api.chat.TextComponent(entity.getCustomName()));
     }
 
     @Override
-    public net.md_5.bungee.api.chat.hover.content.Content hoverContentOf(org.bukkit.entity.Entity entity, String customName) {
+    public net.md_5.bungee.api.chat.hover.content.@NotNull Content hoverContentOf(org.bukkit.entity.@NotNull Entity entity, String customName) {
         return hoverContentOf(entity, org.apache.commons.lang3.StringUtils.isBlank(customName) ? null : new net.md_5.bungee.api.chat.TextComponent(customName));
     }
 
     @Override
-    public net.md_5.bungee.api.chat.hover.content.Content hoverContentOf(org.bukkit.entity.Entity entity, net.md_5.bungee.api.chat.BaseComponent customName) {
+    public net.md_5.bungee.api.chat.hover.content.@NotNull Content hoverContentOf(org.bukkit.entity.@NotNull Entity entity, net.md_5.bungee.api.chat.BaseComponent customName) {
         return new net.md_5.bungee.api.chat.hover.content.Entity(
             entity.getType().getKey().toString(),
             entity.getUniqueId().toString(),
@@ -483,7 +486,7 @@ public final class CraftItemFactory implements ItemFactory {
     }
 
     @Override
-    public net.md_5.bungee.api.chat.hover.content.Content hoverContentOf(org.bukkit.entity.Entity entity, net.md_5.bungee.api.chat.BaseComponent[] customName) {
+    public net.md_5.bungee.api.chat.hover.content.@NotNull Content hoverContentOf(org.bukkit.entity.@NotNull Entity entity, net.md_5.bungee.api.chat.BaseComponent[] customName) {
         return new net.md_5.bungee.api.chat.hover.content.Entity(
             entity.getType().getKey().toString(),
             entity.getUniqueId().toString(),
@@ -491,7 +494,7 @@ public final class CraftItemFactory implements ItemFactory {
     }
 
     @Override
-    public ItemStack getSpawnEgg(org.bukkit.entity.EntityType type) {
+    public ItemStack getSpawnEgg(org.bukkit.entity.@Nullable EntityType type) {
         if (type == null) {
             return null;
         }
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftItemStack.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftItemStack.java
index 998370e84410d54cae5d5ba15212701fefb40782..f0ae5eef24b0b575706d5705623bb31c2a4f4eb0 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftItemStack.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftItemStack.java
@@ -18,11 +18,14 @@ import org.bukkit.enchantments.Enchantment;
 import org.bukkit.inventory.ItemStack;
 import org.bukkit.inventory.meta.ItemMeta;
 import org.bukkit.material.MaterialData;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 @DelegateDeserialization(ItemStack.class)
 public final class CraftItemStack extends ItemStack {
 
-    public static net.minecraft.world.item.ItemStack asNMSCopy(ItemStack original) {
+    public static net.minecraft.world.item.@NotNull ItemStack asNMSCopy(ItemStack original) {
         if (original instanceof CraftItemStack) {
             CraftItemStack stack = (CraftItemStack) original;
             return stack.handle == null ? net.minecraft.world.item.ItemStack.EMPTY : stack.handle.copy();
@@ -44,7 +47,7 @@ public final class CraftItemStack extends ItemStack {
         return stack;
     }
 
-    public static net.minecraft.world.item.ItemStack copyNMSStack(net.minecraft.world.item.ItemStack original, int amount) {
+    public static net.minecraft.world.item.@NotNull ItemStack copyNMSStack(net.minecraft.world.item.@NotNull ItemStack original, int amount) {
         net.minecraft.world.item.ItemStack stack = original.copy();
         stack.setCount(amount);
         return stack;
@@ -53,7 +56,7 @@ public final class CraftItemStack extends ItemStack {
     /**
      * Copies the NMS stack to return as a strictly-Bukkit stack
      */
-    public static ItemStack asBukkitCopy(net.minecraft.world.item.ItemStack original) {
+    public static @NotNull ItemStack asBukkitCopy(net.minecraft.world.item.@NotNull ItemStack original) {
         if (original.isEmpty()) {
             return new ItemStack(Material.AIR);
         }
@@ -64,11 +67,11 @@ public final class CraftItemStack extends ItemStack {
         return stack;
     }
 
-    public static CraftItemStack asCraftMirror(net.minecraft.world.item.ItemStack original) {
+    public static @NotNull CraftItemStack asCraftMirror(net.minecraft.world.item.@Nullable ItemStack original) {
         return new CraftItemStack((original == null || original.isEmpty()) ? null : original);
     }
 
-    public static CraftItemStack asCraftCopy(ItemStack original) {
+    public static @NotNull CraftItemStack asCraftCopy(ItemStack original) {
         if (original instanceof CraftItemStack) {
             CraftItemStack stack = (CraftItemStack) original;
             return new CraftItemStack(stack.handle == null ? null : stack.handle.copy());
@@ -76,15 +79,15 @@ public final class CraftItemStack extends ItemStack {
         return new CraftItemStack(original);
     }
 
-    public static CraftItemStack asNewCraftStack(Item item) {
+    public static @NotNull CraftItemStack asNewCraftStack(Item item) {
         return CraftItemStack.asNewCraftStack(item, 1);
     }
 
-    public static CraftItemStack asNewCraftStack(Item item, int amount) {
+    public static @NotNull CraftItemStack asNewCraftStack(Item item, int amount) {
         return new CraftItemStack(CraftMagicNumbers.getMaterial(item), amount, (short) 0, null);
     }
 
-    public net.minecraft.world.item.ItemStack handle;
+    public net.minecraft.world.item.@Nullable ItemStack handle;
 
     /**
      * Mirror
@@ -93,7 +96,7 @@ public final class CraftItemStack extends ItemStack {
         this.handle = item;
     }
 
-    private CraftItemStack(ItemStack item) {
+    private CraftItemStack(@NotNull ItemStack item) {
         this(item.getType(), item.getAmount(), item.getDurability(), item.hasItemMeta() ? item.getItemMeta() : null);
     }
 
@@ -110,7 +113,7 @@ public final class CraftItemStack extends ItemStack {
     }
 
     @Override
-    public Material getType() {
+    public @NotNull Material getType() {
         return this.handle != null ? CraftMagicNumbers.getMaterial(this.handle.getItem()) : Material.AIR;
     }
 
@@ -181,7 +184,7 @@ public final class CraftItemStack extends ItemStack {
     // Paper end
 
     @Override
-    public void addUnsafeEnchantment(Enchantment ench, int level) {
+    public void addUnsafeEnchantment(@NotNull Enchantment ench, int level) {
         Validate.notNull(ench, "Cannot add null enchantment");
 
         // Paper start - Replace whole method
@@ -191,7 +194,7 @@ public final class CraftItemStack extends ItemStack {
         // Paper end
     }
 
-    static boolean makeTag(net.minecraft.world.item.ItemStack item) {
+    static boolean makeTag(net.minecraft.world.item.@Nullable ItemStack item) {
         if (item == null) {
             return false;
         }
@@ -218,7 +221,7 @@ public final class CraftItemStack extends ItemStack {
     }
 
     @Override
-    public int removeEnchantment(Enchantment ench) {
+    public int removeEnchantment(@NotNull Enchantment ench) {
         Validate.notNull(ench, "Cannot remove null enchantment");
 
         // Paper start - replace entire method
@@ -235,11 +238,11 @@ public final class CraftItemStack extends ItemStack {
     }
 
     @Override
-    public Map<Enchantment, Integer> getEnchantments() {
+    public @NotNull Map<Enchantment, Integer> getEnchantments() {
         return this.hasItemMeta() ? this.getItemMeta().getEnchants() : ImmutableMap.<Enchantment, Integer>of(); // Paper - use Item Meta
     }
 
-    static Map<Enchantment, Integer> getEnchantments(net.minecraft.world.item.ItemStack item) {
+    static @NotNull Map<Enchantment, Integer> getEnchantments(net.minecraft.world.item.@Nullable ItemStack item) {
         ListTag list = (item != null && item.isEnchanted()) ? item.getEnchantmentTags() : null;
 
         if (list == null || list.size() == 0) {
@@ -261,12 +264,12 @@ public final class CraftItemStack extends ItemStack {
         return result.build();
     }
 
-    static ListTag getEnchantmentList(net.minecraft.world.item.ItemStack item) {
+    static ListTag getEnchantmentList(net.minecraft.world.item.@Nullable ItemStack item) {
         return (item != null && item.isEnchanted()) ? item.getEnchantmentTags() : null;
     }
 
     @Override
-    public CraftItemStack clone() {
+    public @NotNull CraftItemStack clone() {
         CraftItemStack itemStack = (CraftItemStack) super.clone();
         if (this.handle != null) {
             itemStack.handle = this.handle.copy();
@@ -279,14 +282,14 @@ public final class CraftItemStack extends ItemStack {
         return CraftItemStack.getItemMeta(this.handle);
     }
     // Paper start
-    public static void applyMetaToItem(net.minecraft.world.item.ItemStack itemStack, ItemMeta meta) {
+    public static void applyMetaToItem(net.minecraft.world.item.@NotNull ItemStack itemStack, @NotNull ItemMeta meta) {
         ((org.bukkit.craftbukkit.inventory.CraftMetaItem) meta).applyToItem(itemStack.getOrCreateTag());
     }
 
-    public static ItemMeta getItemMeta(net.minecraft.world.item.ItemStack item) {
+    public static ItemMeta getItemMeta(net.minecraft.world.item.@NotNull ItemStack item) {
         return getItemMeta(item, CraftItemStack.getType(item));
     }
-    public static ItemMeta getItemMeta(net.minecraft.world.item.ItemStack item, Material material) {
+    public static ItemMeta getItemMeta(net.minecraft.world.item.@NotNull ItemStack item, @NotNull Material material) {
         // Paper end
         if (!CraftItemStack.hasItemMeta(item)) {
             return CraftItemFactory.instance().getItemMeta(material); // Paper
@@ -559,7 +562,7 @@ public final class CraftItemStack extends ItemStack {
         }
     }
 
-    static Material getType(net.minecraft.world.item.ItemStack item) {
+    static Material getType(net.minecraft.world.item.@Nullable ItemStack item) {
         return item == null ? Material.AIR : CraftMagicNumbers.getMaterial(item.getItem());
     }
 
@@ -568,7 +571,7 @@ public final class CraftItemStack extends ItemStack {
         return CraftItemStack.setItemMeta(this.handle, itemMeta);
     }
 
-    public static boolean setItemMeta(net.minecraft.world.item.ItemStack item, ItemMeta itemMeta) {
+    public static boolean setItemMeta(net.minecraft.world.item.@Nullable ItemStack item, ItemMeta itemMeta) {
         if (item == null) {
             return false;
         }
@@ -603,7 +606,7 @@ public final class CraftItemStack extends ItemStack {
     }
 
     @Override
-    public boolean isSimilar(ItemStack stack) {
+    public boolean isSimilar(@Nullable ItemStack stack) {
         if (stack == null) {
             return false;
         }
@@ -633,7 +636,7 @@ public final class CraftItemStack extends ItemStack {
         return CraftItemStack.hasItemMeta(this.handle) && (this.handle.getDamageValue() != 0 || (this.handle.getTag() != null && this.handle.getTag().tags.size() >= (this.handle.getTag().contains(CraftMetaItem.DAMAGE.NBT) ? 2 : 1))); // Paper - keep 1.12 CraftBukkit behavior without calling getItemMeta
     }
 
-    static boolean hasItemMeta(net.minecraft.world.item.ItemStack item) {
+    static boolean hasItemMeta(net.minecraft.world.item.@Nullable ItemStack item) {
         return !(item == null || item.getTag() == null || item.getTag().isEmpty());
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftMerchant.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftMerchant.java
index 71be1e4f17ded6ea42e36be0a9b534c6a65ec640..087cf73aea290b09bec9b8297b81b63a194e3801 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftMerchant.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftMerchant.java
@@ -9,6 +9,8 @@ import net.minecraft.world.item.trading.MerchantOffers;
 import org.bukkit.entity.HumanEntity;
 import org.bukkit.inventory.Merchant;
 import org.bukkit.inventory.MerchantRecipe;
+import org.jetbrains.annotations.NotNull;
+
 
 public class CraftMerchant implements Merchant {
 
@@ -23,17 +25,17 @@ public class CraftMerchant implements Merchant {
     }
 
     @Override
-    public List<MerchantRecipe> getRecipes() {
+    public @NotNull List<MerchantRecipe> getRecipes() {
         return List.copyOf(Lists.transform(this.merchant.getOffers(), new Function<net.minecraft.world.item.trading.MerchantOffer, MerchantRecipe>() { // Paper - javadoc says 'an immutable list of trades' - not 'an unmodifiable view of a list of trades'. fixes issue with setRecipes(getRecipes())
             @Override
-            public MerchantRecipe apply(net.minecraft.world.item.trading.MerchantOffer recipe) {
+            public @NotNull MerchantRecipe apply(net.minecraft.world.item.trading.@NotNull MerchantOffer recipe) {
                 return recipe.asBukkit();
             }
         }));
     }
 
     @Override
-    public void setRecipes(List<MerchantRecipe> recipes) {
+    public void setRecipes(@NotNull List<MerchantRecipe> recipes) {
         MerchantOffers recipesList = this.merchant.getOffers();
         recipesList.clear();
         for (MerchantRecipe recipe : recipes) {
@@ -42,7 +44,7 @@ public class CraftMerchant implements Merchant {
     }
 
     @Override
-    public MerchantRecipe getRecipe(int i) {
+    public @NotNull MerchantRecipe getRecipe(int i) {
         return this.merchant.getOffers().get(i).asBukkit();
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftMerchantCustom.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftMerchantCustom.java
index 5074e8b2259b3fb969bd0ff99c296b7537920273..75786c17998795028755c980890c8bc2659c58f0 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftMerchantCustom.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftMerchantCustom.java
@@ -10,6 +10,8 @@ import net.minecraft.world.item.trading.MerchantOffer;
 import net.minecraft.world.item.trading.MerchantOffers;
 import org.apache.commons.lang.Validate;
 import org.bukkit.craftbukkit.util.CraftChatMessage;
+import org.jetbrains.annotations.NotNull;
+
 
 public class CraftMerchantCustom extends CraftMerchant {
 
@@ -26,7 +28,7 @@ public class CraftMerchantCustom extends CraftMerchant {
     // Paper end
 
     @Override
-    public String toString() {
+    public @NotNull String toString() {
         return "CraftMerchantCustom";
     }
 
@@ -70,7 +72,7 @@ public class CraftMerchantCustom extends CraftMerchant {
         }
 
         @Override
-        public MerchantOffers getOffers() {
+        public @NotNull MerchantOffers getOffers() {
             return this.trades;
         }
 
@@ -118,7 +120,7 @@ public class CraftMerchantCustom extends CraftMerchant {
         }
 
         @Override
-        public SoundEvent getNotifyTradeSound() {
+        public @NotNull SoundEvent getNotifyTradeSound() {
             return SoundEvents.VILLAGER_YES;
         }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftMerchantRecipe.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftMerchantRecipe.java
index c48f67f4202e32d9793b462609bd3b95c9765bbd..5c0ea4d11357a072d0e8347f6be830d8e1d24865 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftMerchantRecipe.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftMerchantRecipe.java
@@ -4,12 +4,14 @@ import com.google.common.base.Preconditions;
 import java.util.List;
 import org.bukkit.inventory.ItemStack;
 import org.bukkit.inventory.MerchantRecipe;
+import org.jetbrains.annotations.NotNull;
+
 
 public class CraftMerchantRecipe extends MerchantRecipe {
 
-    private final net.minecraft.world.item.trading.MerchantOffer handle;
+    private final net.minecraft.world.item.trading.@NotNull MerchantOffer handle;
 
-    public CraftMerchantRecipe(net.minecraft.world.item.trading.MerchantOffer merchantRecipe) {
+    public CraftMerchantRecipe(net.minecraft.world.item.trading.@NotNull MerchantOffer merchantRecipe) {
         super(CraftItemStack.asBukkitCopy(merchantRecipe.result), 0);
         this.handle = merchantRecipe;
         addIngredient(CraftItemStack.asBukkitCopy(merchantRecipe.baseCostA));
@@ -17,18 +19,18 @@ public class CraftMerchantRecipe extends MerchantRecipe {
     }
 
     @Deprecated
-    public CraftMerchantRecipe(ItemStack result, int uses, int maxUses, boolean experienceReward, int experience, float priceMultiplier) {
+    public CraftMerchantRecipe(@NotNull ItemStack result, int uses, int maxUses, boolean experienceReward, int experience, float priceMultiplier) {
         // Paper start - add ignoreDiscounts param
         this(result, uses, maxUses, experienceReward, experience, priceMultiplier, 0, 0, false);
     }
-    public CraftMerchantRecipe(ItemStack result, int uses, int maxUses, boolean experienceReward, int experience, float priceMultiplier, boolean ignoreDiscounts) {
+    public CraftMerchantRecipe(@NotNull ItemStack result, int uses, int maxUses, boolean experienceReward, int experience, float priceMultiplier, boolean ignoreDiscounts) {
         this(result, uses, maxUses, experienceReward, experience, priceMultiplier, 0, 0, ignoreDiscounts);
     }
 
-    public CraftMerchantRecipe(ItemStack result, int uses, int maxUses, boolean experienceReward, int experience, float priceMultiplier, int demand, int specialPrice) {
+    public CraftMerchantRecipe(@NotNull ItemStack result, int uses, int maxUses, boolean experienceReward, int experience, float priceMultiplier, int demand, int specialPrice) {
         this(result, uses, maxUses, experienceReward, experience, priceMultiplier, demand, specialPrice, false);
     }
-    public CraftMerchantRecipe(ItemStack result, int uses, int maxUses, boolean experienceReward, int experience, float priceMultiplier, int demand, int specialPrice, boolean ignoreDiscounts) {
+    public CraftMerchantRecipe(@NotNull ItemStack result, int uses, int maxUses, boolean experienceReward, int experience, float priceMultiplier, int demand, int specialPrice, boolean ignoreDiscounts) {
         super(result, uses, maxUses, experienceReward, experience, priceMultiplier, demand, specialPrice, ignoreDiscounts);
         // Paper end
         this.handle = new net.minecraft.world.item.trading.MerchantOffer(
@@ -129,7 +131,7 @@ public class CraftMerchantRecipe extends MerchantRecipe {
     }
     // Paper end
 
-    public net.minecraft.world.item.trading.MerchantOffer toMinecraft() {
+    public net.minecraft.world.item.trading.@NotNull MerchantOffer toMinecraft() {
         List<ItemStack> ingredients = getIngredients();
         Preconditions.checkState(!ingredients.isEmpty(), "No offered ingredients");
         handle.baseCostA = CraftItemStack.asNMSCopy(ingredients.get(0));
@@ -139,7 +141,7 @@ public class CraftMerchantRecipe extends MerchantRecipe {
         return this.handle;
     }
 
-    public static CraftMerchantRecipe fromBukkit(MerchantRecipe recipe) {
+    public static @NotNull CraftMerchantRecipe fromBukkit(MerchantRecipe recipe) {
         if (recipe instanceof CraftMerchantRecipe) {
             return (CraftMerchantRecipe) recipe;
         } else {
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaArmorStand.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaArmorStand.java
index e721517ce7b52a1aa10d039aa9f309eb69db4733..cb8e57f3472836c3151b0cac86a368563aeadc1b 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaArmorStand.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaArmorStand.java
@@ -6,6 +6,8 @@ import net.minecraft.nbt.CompoundTag;
 import net.minecraft.nbt.Tag;
 import org.bukkit.Material;
 import org.bukkit.configuration.serialization.DelegateDeserialization;
+import org.jetbrains.annotations.NotNull;
+
 
 @DelegateDeserialization(CraftMetaItem.SerializableMeta.class)
 public class CraftMetaArmorStand extends CraftMetaItem implements com.destroystokyo.paper.inventory.meta.ArmorStandMeta { // Paper
@@ -44,7 +46,7 @@ public class CraftMetaArmorStand extends CraftMetaItem implements com.destroysto
         this.entityTag = armorStand.entityTag;
     }
 
-    CraftMetaArmorStand(CompoundTag tag) {
+    CraftMetaArmorStand(@NotNull CompoundTag tag) {
         super(tag);
 
         if (tag.contains(ENTITY_TAG.NBT)) {
@@ -73,7 +75,7 @@ public class CraftMetaArmorStand extends CraftMetaItem implements com.destroysto
         }
     }
 
-    CraftMetaArmorStand(Map<String, Object> map) {
+    CraftMetaArmorStand(@NotNull Map<String, Object> map) {
         super(map);
         // Paper start
         this.invisible = SerializableMeta.getBoolean(map, INVISIBLE.BUKKIT);
@@ -85,7 +87,7 @@ public class CraftMetaArmorStand extends CraftMetaItem implements com.destroysto
     }
 
     @Override
-    void deserializeInternal(CompoundTag tag, Object context) {
+    void deserializeInternal(@NotNull CompoundTag tag, Object context) {
         super.deserializeInternal(tag, context);
 
         if (tag.contains(ENTITY_TAG.NBT)) {
@@ -94,14 +96,14 @@ public class CraftMetaArmorStand extends CraftMetaItem implements com.destroysto
     }
 
     @Override
-    void serializeInternal(Map<String, Tag> internalTags) {
+    void serializeInternal(@NotNull Map<String, Tag> internalTags) {
         if (this.entityTag != null && !this.entityTag.isEmpty()) {
             internalTags.put(ENTITY_TAG.NBT, entityTag);
         }
     }
 
     @Override
-    void applyToItem(CompoundTag tag) {
+    void applyToItem(@NotNull CompoundTag tag) {
         super.applyToItem(tag);
 
         // Paper start
@@ -149,7 +151,7 @@ public class CraftMetaArmorStand extends CraftMetaItem implements com.destroysto
     }
 
     @Override
-    boolean equalsCommon(CraftMetaItem meta) {
+    boolean equalsCommon(@NotNull CraftMetaItem meta) {
         if (!super.equalsCommon(meta)) {
             return false;
         }
@@ -190,7 +192,7 @@ public class CraftMetaArmorStand extends CraftMetaItem implements com.destroysto
     }
 
     @Override
-    Builder<String, Object> serialize(Builder<String, Object> builder) {
+    Builder<String, Object> serialize(@NotNull Builder<String, Object> builder) {
         super.serialize(builder);
 
         // Paper start
@@ -219,7 +221,7 @@ public class CraftMetaArmorStand extends CraftMetaItem implements com.destroysto
     }
 
     @Override
-    public CraftMetaArmorStand clone() {
+    public @NotNull CraftMetaArmorStand clone() {
         CraftMetaArmorStand clone = (CraftMetaArmorStand) super.clone();
 
         if (this.entityTag != null) {
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaAxolotlBucket.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaAxolotlBucket.java
index 2bc4e9eae40970f8b8e28e75b866b9f140f6c526..4a76099e8616d2f7481301892b6830c0119306ac 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaAxolotlBucket.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaAxolotlBucket.java
@@ -9,6 +9,9 @@ import org.bukkit.configuration.serialization.DelegateDeserialization;
 import org.bukkit.craftbukkit.util.CraftMagicNumbers;
 import org.bukkit.entity.Axolotl;
 import org.bukkit.inventory.meta.AxolotlBucketMeta;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 @DelegateDeserialization(CraftMetaItem.SerializableMeta.class)
 public class CraftMetaAxolotlBucket extends CraftMetaItem implements AxolotlBucketMeta {
@@ -31,7 +34,7 @@ public class CraftMetaAxolotlBucket extends CraftMetaItem implements AxolotlBuck
         this.entityTag = bucket.entityTag;
     }
 
-    CraftMetaAxolotlBucket(CompoundTag tag) {
+    CraftMetaAxolotlBucket(@NotNull CompoundTag tag) {
         super(tag);
 
         if (tag.contains(VARIANT.NBT, CraftMagicNumbers.NBT.TAG_INT)) {
@@ -43,7 +46,7 @@ public class CraftMetaAxolotlBucket extends CraftMetaItem implements AxolotlBuck
         }
     }
 
-    CraftMetaAxolotlBucket(Map<String, Object> map) {
+    CraftMetaAxolotlBucket(@NotNull Map<String, Object> map) {
         super(map);
 
         Integer variant = SerializableMeta.getObject(Integer.class, map, VARIANT.BUKKIT, true);
@@ -53,7 +56,7 @@ public class CraftMetaAxolotlBucket extends CraftMetaItem implements AxolotlBuck
     }
 
     @Override
-    void deserializeInternal(CompoundTag tag, Object context) {
+    void deserializeInternal(@NotNull CompoundTag tag, Object context) {
         super.deserializeInternal(tag, context);
 
         if (tag.contains(ENTITY_TAG.NBT)) {
@@ -62,14 +65,14 @@ public class CraftMetaAxolotlBucket extends CraftMetaItem implements AxolotlBuck
     }
 
     @Override
-    void serializeInternal(Map<String, Tag> internalTags) {
+    void serializeInternal(@NotNull Map<String, Tag> internalTags) {
         if (this.entityTag != null && !this.entityTag.isEmpty()) {
             internalTags.put(ENTITY_TAG.NBT, entityTag);
         }
     }
 
     @Override
-    void applyToItem(CompoundTag tag) {
+    void applyToItem(@NotNull CompoundTag tag) {
         super.applyToItem(tag);
 
         if (this.hasVariant()) {
@@ -96,12 +99,12 @@ public class CraftMetaAxolotlBucket extends CraftMetaItem implements AxolotlBuck
     }
 
     @Override
-    public Axolotl.Variant getVariant() {
+    public Axolotl.@NotNull Variant getVariant() {
         return Axolotl.Variant.values()[this.variant];
     }
 
     @Override
-    public void setVariant(Axolotl.Variant variant) {
+    public void setVariant(Axolotl.@Nullable Variant variant) {
         if (variant == null) {
             variant = Axolotl.Variant.LUCY;
         }
@@ -114,7 +117,7 @@ public class CraftMetaAxolotlBucket extends CraftMetaItem implements AxolotlBuck
     }
 
     @Override
-    boolean equalsCommon(CraftMetaItem meta) {
+    boolean equalsCommon(@NotNull CraftMetaItem meta) {
         if (!super.equalsCommon(meta)) {
             return false;
         }
@@ -148,7 +151,7 @@ public class CraftMetaAxolotlBucket extends CraftMetaItem implements AxolotlBuck
     }
 
     @Override
-    public CraftMetaAxolotlBucket clone() {
+    public @NotNull CraftMetaAxolotlBucket clone() {
         CraftMetaAxolotlBucket clone = (CraftMetaAxolotlBucket) super.clone();
 
         if (this.entityTag != null) {
@@ -159,7 +162,7 @@ public class CraftMetaAxolotlBucket extends CraftMetaItem implements AxolotlBuck
     }
 
     @Override
-    ImmutableMap.Builder<String, Object> serialize(ImmutableMap.Builder<String, Object> builder) {
+    ImmutableMap.Builder<String, Object> serialize(ImmutableMap.@NotNull Builder<String, Object> builder) {
         super.serialize(builder);
 
         if (this.hasVariant()) {
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaBanner.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaBanner.java
index 881f221517dc062a34489df6f7e006af9540953f..4dff32e123e51b80f8af7c4b6b1eb7eef50a69cd 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaBanner.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaBanner.java
@@ -16,6 +16,9 @@ import org.bukkit.block.banner.PatternType;
 import org.bukkit.configuration.serialization.DelegateDeserialization;
 import org.bukkit.craftbukkit.util.CraftMagicNumbers;
 import org.bukkit.inventory.meta.BannerMeta;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 @DelegateDeserialization(CraftMetaItem.SerializableMeta.class)
 public class CraftMetaBanner extends CraftMetaItem implements BannerMeta {
@@ -60,8 +63,8 @@ public class CraftMetaBanner extends CraftMetaItem implements BannerMeta {
     static final ItemMetaKey COLOR = new ItemMetaKey("Color", "color");
     static final ItemMetaKey PATTERN = new ItemMetaKey("Pattern", "pattern");
 
-    private DyeColor base;
-    private List<Pattern> patterns = new ArrayList<Pattern>();
+    private @Nullable DyeColor base;
+    private @NotNull List<Pattern> patterns = new ArrayList<Pattern>();
 
     CraftMetaBanner(CraftMetaItem meta) {
         super(meta);
@@ -75,7 +78,7 @@ public class CraftMetaBanner extends CraftMetaItem implements BannerMeta {
         this.patterns = new ArrayList<Pattern>(banner.patterns);
     }
 
-    CraftMetaBanner(CompoundTag tag) {
+    CraftMetaBanner(@NotNull CompoundTag tag) {
         super(tag);
 
         if (!tag.contains("BlockEntityTag")) {
@@ -100,7 +103,7 @@ public class CraftMetaBanner extends CraftMetaItem implements BannerMeta {
         }
     }
 
-    CraftMetaBanner(Map<String, Object> map) {
+    CraftMetaBanner(@NotNull Map<String, Object> map) {
         super(map);
 
         String baseStr = SerializableMeta.getString(map, BASE.BUKKIT, true);
@@ -121,7 +124,7 @@ public class CraftMetaBanner extends CraftMetaItem implements BannerMeta {
         }
     }
     @Override
-    void applyToItem(CompoundTag tag) {
+    void applyToItem(@NotNull CompoundTag tag) {
         super.applyToItem(tag);
 
         CompoundTag entityTag = new CompoundTag();
@@ -153,12 +156,12 @@ public class CraftMetaBanner extends CraftMetaItem implements BannerMeta {
     }
 
     @Override
-    public List<Pattern> getPatterns() {
+    public @NotNull List<Pattern> getPatterns() {
         return new ArrayList<Pattern>(this.patterns);
     }
 
     @Override
-    public void setPatterns(List<Pattern> patterns) {
+    public void setPatterns(@NotNull List<Pattern> patterns) {
         this.patterns = new ArrayList<Pattern>(patterns);
     }
 
@@ -168,12 +171,12 @@ public class CraftMetaBanner extends CraftMetaItem implements BannerMeta {
     }
 
     @Override
-    public Pattern getPattern(int i) {
+    public @NotNull Pattern getPattern(int i) {
         return this.patterns.get(i);
     }
 
     @Override
-    public Pattern removePattern(int i) {
+    public @NotNull Pattern removePattern(int i) {
         return this.patterns.remove(i);
     }
 
@@ -188,7 +191,7 @@ public class CraftMetaBanner extends CraftMetaItem implements BannerMeta {
     }
 
     @Override
-    ImmutableMap.Builder<String, Object> serialize(ImmutableMap.Builder<String, Object> builder) {
+    ImmutableMap.Builder<String, Object> serialize(ImmutableMap.@NotNull Builder<String, Object> builder) {
         super.serialize(builder);
 
         if (this.base != null) {
@@ -216,7 +219,7 @@ public class CraftMetaBanner extends CraftMetaItem implements BannerMeta {
     }
 
     @Override
-    public boolean equalsCommon(CraftMetaItem meta) {
+    public boolean equalsCommon(@NotNull CraftMetaItem meta) {
         if (!super.equalsCommon(meta)) {
             return false;
         }
@@ -244,7 +247,7 @@ public class CraftMetaBanner extends CraftMetaItem implements BannerMeta {
     }
 
     @Override
-    public CraftMetaBanner clone() {
+    public @NotNull CraftMetaBanner clone() {
         CraftMetaBanner meta = (CraftMetaBanner) super.clone();
         meta.patterns = new ArrayList<>(this.patterns);
         return meta;
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaBlockState.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaBlockState.java
index fcf555e494706785fac0c5c17d2d85d86fb33ce1..1858587abab58b2ada00754bf566a39bd7838fa8 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaBlockState.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaBlockState.java
@@ -16,6 +16,9 @@ import org.bukkit.craftbukkit.block.CraftBlockEntityState;
 import org.bukkit.craftbukkit.block.CraftBlockStates;
 import org.bukkit.craftbukkit.util.CraftMagicNumbers;
 import org.bukkit.inventory.meta.BlockStateMeta;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 @DelegateDeserialization(CraftMetaItem.SerializableMeta.class)
 public class CraftMetaBlockState extends CraftMetaItem implements BlockStateMeta {
@@ -125,7 +128,7 @@ public class CraftMetaBlockState extends CraftMetaItem implements BlockStateMeta
     static final ItemMetaKey BLOCK_ENTITY_TAG = new ItemMetaKey("BlockEntityTag");
 
     final Material material;
-    CompoundTag blockEntityTag;
+    @Nullable CompoundTag blockEntityTag;
 
     CraftMetaBlockState(CraftMetaItem meta, Material material) {
         super(meta);
@@ -141,7 +144,7 @@ public class CraftMetaBlockState extends CraftMetaItem implements BlockStateMeta
         this.blockEntityTag = te.blockEntityTag;
     }
 
-    CraftMetaBlockState(CompoundTag tag, Material material) {
+    CraftMetaBlockState(@NotNull CompoundTag tag, Material material) {
         super(tag);
         this.material = material;
 
@@ -152,7 +155,7 @@ public class CraftMetaBlockState extends CraftMetaItem implements BlockStateMeta
         }
     }
 
-    CraftMetaBlockState(Map<String, Object> map) {
+    CraftMetaBlockState(@NotNull Map<String, Object> map) {
         super(map);
         String matName = SerializableMeta.getString(map, "blockMaterial", true);
         Material m = Material.getMaterial(matName);
@@ -164,7 +167,7 @@ public class CraftMetaBlockState extends CraftMetaItem implements BlockStateMeta
     }
 
     @Override
-    void applyToItem(CompoundTag tag) {
+    void applyToItem(@NotNull CompoundTag tag) {
         super.applyToItem(tag);
 
         if (this.blockEntityTag != null) {
@@ -173,7 +176,7 @@ public class CraftMetaBlockState extends CraftMetaItem implements BlockStateMeta
     }
 
     @Override
-    void deserializeInternal(CompoundTag tag, Object context) {
+    void deserializeInternal(@NotNull CompoundTag tag, Object context) {
         super.deserializeInternal(tag, context);
 
         if (tag.contains(BLOCK_ENTITY_TAG.NBT, CraftMagicNumbers.NBT.TAG_COMPOUND)) {
@@ -182,14 +185,14 @@ public class CraftMetaBlockState extends CraftMetaItem implements BlockStateMeta
     }
 
     @Override
-    void serializeInternal(final Map<String, Tag> internalTags) {
+    void serializeInternal(final @NotNull Map<String, Tag> internalTags) {
         if (this.blockEntityTag != null) {
             internalTags.put(BLOCK_ENTITY_TAG.NBT, blockEntityTag);
         }
     }
 
     @Override
-    ImmutableMap.Builder<String, Object> serialize(ImmutableMap.Builder<String, Object> builder) {
+    ImmutableMap.@NotNull Builder<String, Object> serialize(ImmutableMap.@NotNull Builder<String, Object> builder) {
         super.serialize(builder);
         builder.put("blockMaterial", this.material.name());
         return builder;
@@ -206,7 +209,7 @@ public class CraftMetaBlockState extends CraftMetaItem implements BlockStateMeta
     }
 
     @Override
-    public boolean equalsCommon(CraftMetaItem meta) {
+    public boolean equalsCommon(@NotNull CraftMetaItem meta) {
         if (!super.equalsCommon(meta)) {
             return false;
         }
@@ -234,7 +237,7 @@ public class CraftMetaBlockState extends CraftMetaItem implements BlockStateMeta
     }
 
     @Override
-    public CraftMetaBlockState clone() {
+    public @NotNull CraftMetaBlockState clone() {
         CraftMetaBlockState meta = (CraftMetaBlockState) super.clone();
         if (this.blockEntityTag != null) {
             meta.blockEntityTag = this.blockEntityTag.copy();
@@ -248,7 +251,7 @@ public class CraftMetaBlockState extends CraftMetaItem implements BlockStateMeta
     }
 
     @Override
-    public BlockState getBlockState() {
+    public @NotNull BlockState getBlockState() {
         Material stateMaterial = (this.material != Material.SHIELD) ? this.material : CraftMetaBlockState.shieldToBannerHack(this.blockEntityTag); // Only actually used for jigsaws
         if (this.blockEntityTag != null) {
             if (this.material == Material.SHIELD) {
@@ -265,7 +268,7 @@ public class CraftMetaBlockState extends CraftMetaItem implements BlockStateMeta
     }
 
     @Override
-    public void setBlockState(BlockState blockState) {
+    public void setBlockState(@NotNull BlockState blockState) {
         Validate.notNull(blockState, "blockState must not be null");
 
         Material stateMaterial = (this.material != Material.SHIELD) ? this.material : CraftMetaBlockState.shieldToBannerHack(this.blockEntityTag);
@@ -279,7 +282,7 @@ public class CraftMetaBlockState extends CraftMetaItem implements BlockStateMeta
         }
     }
 
-    private static Material shieldToBannerHack(CompoundTag tag) {
+    private static @NotNull Material shieldToBannerHack(@Nullable CompoundTag tag) {
         if (tag == null || !tag.contains(CraftMetaBanner.BASE.NBT, CraftMagicNumbers.NBT.TAG_INT)) {
             return Material.WHITE_BANNER;
         }
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaBook.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaBook.java
index a5d7fae348b0b262a0a8a5e8e76f1bc75ca52a16..eb8a702456ddb252489b342edfabe5b647df9af9 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaBook.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaBook.java
@@ -27,6 +27,9 @@ import net.minecraft.nbt.CompoundTag;
 import net.minecraft.nbt.ListTag;
 import net.minecraft.nbt.StringTag;
 import net.minecraft.network.chat.Component;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 @DelegateDeserialization(SerializableMeta.class)
 public class CraftMetaBook extends CraftMetaItem implements BookMeta {
@@ -39,14 +42,14 @@ public class CraftMetaBook extends CraftMetaItem implements BookMeta {
     static final int MAX_PAGE_LENGTH = 320; // 256 limit + 64 characters to allow for psuedo colour codes
     static final int MAX_TITLE_LENGTH = 32;
 
-    protected String title;
-    protected String author;
+    protected @Nullable String title;
+    protected @Nullable String author;
     // We store the pages in their raw original text representation. See SPIGOT-5063, SPIGOT-5350, SPIGOT-3206
     // For writable books (CraftMetaBook) the pages are stored as plain Strings.
     // For written books (CraftMetaBookSigned) the pages are stored in Minecraft's JSON format.
-    protected List<String> pages; // null and empty are two different states internally
-    protected Boolean resolved = null;
-    protected Integer generation;
+    protected @Nullable List<String> pages; // null and empty are two different states internally
+    protected @Nullable Boolean resolved = null;
+    protected @Nullable Integer generation;
 
     CraftMetaBook(CraftMetaItem meta) {
         super(meta);
@@ -84,7 +87,7 @@ public class CraftMetaBook extends CraftMetaItem implements BookMeta {
         }
     }
 
-    CraftMetaBook(CompoundTag tag) {
+    CraftMetaBook(@NotNull CompoundTag tag) {
         super(tag);
 
         if (tag.contains(BOOK_TITLE.NBT)) {
@@ -125,7 +128,7 @@ public class CraftMetaBook extends CraftMetaItem implements BookMeta {
         }
     }
 
-    CraftMetaBook(Map<String, Object> map) {
+    CraftMetaBook(@NotNull Map<String, Object> map) {
         super(map);
 
         this.setAuthor(SerializableMeta.getString(map, BOOK_AUTHOR.BUKKIT, true));
@@ -162,7 +165,7 @@ public class CraftMetaBook extends CraftMetaItem implements BookMeta {
     }
 
     @Override
-    void applyToItem(CompoundTag itemData) {
+    void applyToItem(@NotNull CompoundTag itemData) {
         super.applyToItem(itemData);
 
         if (this.hasTitle()) {
@@ -230,7 +233,7 @@ public class CraftMetaBook extends CraftMetaItem implements BookMeta {
     }
 
     @Override
-    public boolean setTitle(final String title) {
+    public boolean setTitle(final @Nullable String title) {
         if (title == null) {
             this.title = null;
             return true;
@@ -258,7 +261,7 @@ public class CraftMetaBook extends CraftMetaItem implements BookMeta {
     }
 
     @Override
-    public void setGeneration(Generation generation) {
+    public void setGeneration(@Nullable Generation generation) {
         this.generation = (generation == null) ? null : generation.ordinal();
     }
 
@@ -269,7 +272,7 @@ public class CraftMetaBook extends CraftMetaItem implements BookMeta {
     }
 
     @Override
-    public org.bukkit.inventory.meta.BookMeta title(net.kyori.adventure.text.Component title) {
+    public org.bukkit.inventory.meta.@NotNull BookMeta title(net.kyori.adventure.text.@Nullable Component title) {
         this.setTitle(title == null ? null : net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().serialize(title));
         return this;
     }
@@ -280,19 +283,19 @@ public class CraftMetaBook extends CraftMetaItem implements BookMeta {
     }
 
     @Override
-    public org.bukkit.inventory.meta.BookMeta author(net.kyori.adventure.text.Component author) {
+    public org.bukkit.inventory.meta.@NotNull BookMeta author(net.kyori.adventure.text.@Nullable Component author) {
         this.setAuthor(author == null ? null : net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().serialize(author));
         return this;
     }
 
     @Override
-    public net.kyori.adventure.text.Component page(final int page) {
+    public net.kyori.adventure.text.@NotNull Component page(final int page) {
         Validate.isTrue(isValidPage(page), "Invalid page number");
         return this instanceof CraftMetaBookSigned ? net.kyori.adventure.text.serializer.gson.GsonComponentSerializer.gson().deserialize(pages.get(page - 1)) : net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().deserialize(pages.get(page - 1));
     }
 
     @Override
-    public void page(final int page, net.kyori.adventure.text.Component data) {
+    public void page(final int page, net.kyori.adventure.text.@Nullable Component data) {
         if (!isValidPage(page)) {
             throw new IllegalArgumentException("Invalid page number " + page + "/" + pages.size());
         }
@@ -303,7 +306,7 @@ public class CraftMetaBook extends CraftMetaItem implements BookMeta {
     }
 
     @Override
-    public List<net.kyori.adventure.text.Component> pages() {
+    public @NotNull List<net.kyori.adventure.text.Component> pages() {
         if (this.pages == null) return ImmutableList.of();
         if (this instanceof CraftMetaBookSigned)
             return pages.stream().map(net.kyori.adventure.text.serializer.gson.GsonComponentSerializer.gson()::deserialize).collect(ImmutableList.toImmutableList());
@@ -312,7 +315,7 @@ public class CraftMetaBook extends CraftMetaItem implements BookMeta {
     }
 
     @Override
-    public BookMeta pages(List<net.kyori.adventure.text.Component> pages) {
+    public @NotNull BookMeta pages(@NotNull List<net.kyori.adventure.text.Component> pages) {
         if (this.pages != null) this.pages.clear();
         for (net.kyori.adventure.text.Component page : pages) {
             addPages(page);
@@ -321,14 +324,14 @@ public class CraftMetaBook extends CraftMetaItem implements BookMeta {
     }
 
     @Override
-    public BookMeta pages(net.kyori.adventure.text.Component... pages) {
+    public @NotNull BookMeta pages(net.kyori.adventure.text.Component... pages) {
         if (this.pages != null) this.pages.clear();
         addPages(pages);
         return this;
     }
 
     @Override
-    public void addPages(net.kyori.adventure.text.Component... pages) {
+    public void addPages(net.kyori.adventure.text.Component @NotNull ... pages) {
         if (this.pages == null) this.pages = new ArrayList<>();
         for (net.kyori.adventure.text.Component page : pages) {
             if (this.pages.size() >= MAX_PAGES) {
@@ -343,7 +346,7 @@ public class CraftMetaBook extends CraftMetaItem implements BookMeta {
         }
     }
 
-    private CraftMetaBook(net.kyori.adventure.text.Component title, net.kyori.adventure.text.Component author, List<net.kyori.adventure.text.Component> pages) {
+    private CraftMetaBook(net.kyori.adventure.text.@Nullable Component title, net.kyori.adventure.text.@Nullable Component author, @NotNull List<net.kyori.adventure.text.Component> pages) {
         super((org.bukkit.craftbukkit.inventory.CraftMetaItem) org.bukkit.Bukkit.getItemFactory().getItemMeta(org.bukkit.Material.WRITABLE_BOOK));
         this.title = title == null ? null : net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().serialize(title);
         this.author = author == null ? null : net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().serialize(author);
@@ -351,58 +354,58 @@ public class CraftMetaBook extends CraftMetaItem implements BookMeta {
     }
 
     static class CraftMetaBookBuilder implements BookMetaBuilder {
-        private net.kyori.adventure.text.Component title = null;
-        private net.kyori.adventure.text.Component author = null;
+        private net.kyori.adventure.text.@Nullable Component title = null;
+        private net.kyori.adventure.text.@Nullable Component author = null;
         private final List<net.kyori.adventure.text.Component> pages = new java.util.ArrayList<>();
 
         @Override
-        public BookMetaBuilder title(net.kyori.adventure.text.Component title) {
+        public @NotNull BookMetaBuilder title(net.kyori.adventure.text.Component title) {
             this.title = title;
             return this;
         }
 
         @Override
-        public BookMetaBuilder author(net.kyori.adventure.text.Component author) {
+        public @NotNull BookMetaBuilder author(net.kyori.adventure.text.Component author) {
             this.author = author;
             return this;
         }
 
         @Override
-        public BookMetaBuilder addPage(net.kyori.adventure.text.Component page) {
+        public @NotNull BookMetaBuilder addPage(net.kyori.adventure.text.Component page) {
             this.pages.add(page);
             return this;
         }
 
         @Override
-        public BookMetaBuilder pages(net.kyori.adventure.text.Component... pages) {
+        public @NotNull BookMetaBuilder pages(net.kyori.adventure.text.Component... pages) {
             java.util.Collections.addAll(this.pages, pages);
             return this;
         }
 
         @Override
-        public BookMetaBuilder pages(java.util.Collection<net.kyori.adventure.text.Component> pages) {
+        public @NotNull BookMetaBuilder pages(java.util.@NotNull Collection<net.kyori.adventure.text.Component> pages) {
             this.pages.addAll(pages);
             return this;
         }
 
         @Override
-        public BookMeta build() {
+        public @NotNull BookMeta build() {
             return this.build(title, author, pages);
         }
 
-        protected BookMeta build(net.kyori.adventure.text.Component title, net.kyori.adventure.text.Component author, java.util.List<net.kyori.adventure.text.Component> pages) {
+        protected @NotNull BookMeta build(net.kyori.adventure.text.Component title, net.kyori.adventure.text.Component author, java.util.@NotNull List<net.kyori.adventure.text.Component> pages) {
             return new CraftMetaBook(title, author, pages);
         }
     }
 
     @Override
-    public BookMetaBuilder toBuilder() {
+    public @NotNull BookMetaBuilder toBuilder() {
         return new CraftMetaBookBuilder();
     }
 
     // Paper end
     @Override
-    public String getPage(final int page) {
+    public @NotNull String getPage(final int page) {
         Validate.isTrue(this.isValidPage(page), "Invalid page number");
         // assert: pages != null
         return this.convertDataToPlainPage(this.pages.get(page - 1));
@@ -425,14 +428,14 @@ public class CraftMetaBook extends CraftMetaItem implements BookMeta {
     }
 
     @Override
-    public void addPage(final String... pages) {
+    public void addPage(final String @NotNull ... pages) {
         for (String page : pages) {
             page = this.validatePage(page);
             this.internalAddPage(this.convertPlainPageToData(page));
         }
     }
 
-    String validatePage(String page) {
+    @NotNull String validatePage(@Nullable String page) {
         if (page == null) {
             page = "";
         } else if (page.length() > CraftMetaBook.MAX_PAGE_LENGTH) {
@@ -457,13 +460,13 @@ public class CraftMetaBook extends CraftMetaItem implements BookMeta {
     }
 
     @Override
-    public List<String> getPages() {
+    public @NotNull List<String> getPages() {
         if (this.pages == null) return ImmutableList.of();
         return this.pages.stream().map(this::convertDataToPlainPage).collect(ImmutableList.toImmutableList());
     }
 
     @Override
-    public void setPages(List<String> pages) {
+    public void setPages(@NotNull List<String> pages) {
         if (pages.isEmpty()) {
             this.pages = null;
             return;
@@ -491,7 +494,7 @@ public class CraftMetaBook extends CraftMetaItem implements BookMeta {
     }
 
     @Override
-    public CraftMetaBook clone() {
+    public @NotNull CraftMetaBook clone() {
         CraftMetaBook meta = (CraftMetaBook) super.clone();
         if (this.pages != null) {
             meta.pages = new ArrayList<String>(this.pages);
@@ -545,7 +548,7 @@ public class CraftMetaBook extends CraftMetaItem implements BookMeta {
     }
 
     @Override
-    ImmutableMap.Builder<String, Object> serialize(ImmutableMap.Builder<String, Object> builder) {
+    ImmutableMap.Builder<String, Object> serialize(ImmutableMap.@NotNull Builder<String, Object> builder) {
         super.serialize(builder);
 
         if (this.hasTitle()) {
@@ -572,7 +575,7 @@ public class CraftMetaBook extends CraftMetaItem implements BookMeta {
     }
 
     // Spigot start
-    private BookMeta.Spigot spigot = new SpigotMeta();
+    private BookMeta.@NotNull Spigot spigot = new SpigotMeta();
     private class SpigotMeta extends BookMeta.Spigot {
 
         private String pageToJSON(String page) {
@@ -604,7 +607,7 @@ public class CraftMetaBook extends CraftMetaItem implements BookMeta {
         }
 
         @Override
-        public void setPage(final int page, final BaseComponent... text) {
+        public void setPage(final int page, final BaseComponent @Nullable ... text) {
             if (!CraftMetaBook.this.isValidPage(page)) {
                 throw new IllegalArgumentException("Invalid page number " + page + "/" + CraftMetaBook.this.getPageCount());
             }
@@ -619,7 +622,7 @@ public class CraftMetaBook extends CraftMetaItem implements BookMeta {
         }
 
         @Override
-        public void addPage(final BaseComponent[]... pages) {
+        public void addPage(final BaseComponent[] @NotNull ... pages) {
             for (BaseComponent[] page : pages) {
                 if (page == null) {
                     page = new BaseComponent[0];
@@ -630,7 +633,7 @@ public class CraftMetaBook extends CraftMetaItem implements BookMeta {
         }
 
         @Override
-        public List<BaseComponent[]> getPages() {
+        public @NotNull List<BaseComponent[]> getPages() {
             if (CraftMetaBook.this.pages == null) return ImmutableList.of();
             final List<String> copy = ImmutableList.copyOf(CraftMetaBook.this.pages);
             return new AbstractList<BaseComponent[]>() {
@@ -648,7 +651,7 @@ public class CraftMetaBook extends CraftMetaItem implements BookMeta {
         }
 
         @Override
-        public void setPages(List<BaseComponent[]> pages) {
+        public void setPages(@NotNull List<BaseComponent[]> pages) {
             if (pages.isEmpty()) {
                 CraftMetaBook.this.pages = null;
                 return;
@@ -665,7 +668,7 @@ public class CraftMetaBook extends CraftMetaItem implements BookMeta {
     };
 
     @Override
-    public BookMeta.Spigot spigot() {
+    public BookMeta.@NotNull Spigot spigot() {
         return this.spigot;
     }
     // Spigot end
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaBookSigned.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaBookSigned.java
index abb9e88abc74135284b941e040d4058690a82b27..aeb120e26c7c5944a9cc015c880757e281ec6a37 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaBookSigned.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaBookSigned.java
@@ -8,6 +8,9 @@ import org.bukkit.configuration.serialization.DelegateDeserialization;
 import org.bukkit.craftbukkit.inventory.CraftMetaItem.SerializableMeta;
 import org.bukkit.craftbukkit.util.CraftChatMessage;
 import org.bukkit.inventory.meta.BookMeta;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 @DelegateDeserialization(SerializableMeta.class)
 class CraftMetaBookSigned extends CraftMetaBook implements BookMeta {
@@ -16,31 +19,31 @@ class CraftMetaBookSigned extends CraftMetaBook implements BookMeta {
         super(meta);
     }
 
-    CraftMetaBookSigned(CompoundTag tag) {
+    CraftMetaBookSigned(@NotNull CompoundTag tag) {
         super(tag);
     }
 
-    CraftMetaBookSigned(Map<String, Object> map) {
+    CraftMetaBookSigned(@NotNull Map<String, Object> map) {
         super(map);
     }
 
     @Override
-    protected String deserializePage(String pageData) {
+    protected @Nullable String deserializePage(String pageData) {
         return CraftChatMessage.fromJSONOrStringToJSON(pageData, false, true, MAX_PAGE_LENGTH, false);
     }
 
     @Override
-    protected String convertPlainPageToData(String page) {
+    protected @NotNull String convertPlainPageToData(String page) {
         return CraftChatMessage.fromStringToJSON(page, true);
     }
 
     @Override
-    protected String convertDataToPlainPage(String pageData) {
+    protected @NotNull String convertDataToPlainPage(String pageData) {
         return CraftChatMessage.fromJSONComponent(pageData);
     }
 
     @Override
-    void applyToItem(CompoundTag itemData) {
+    void applyToItem(@NotNull CompoundTag itemData) {
         super.applyToItem(itemData);
     }
 
@@ -55,7 +58,7 @@ class CraftMetaBookSigned extends CraftMetaBook implements BookMeta {
     }
 
     @Override
-    public CraftMetaBookSigned clone() {
+    public @NotNull CraftMetaBookSigned clone() {
         CraftMetaBookSigned meta = (CraftMetaBookSigned) super.clone();
         return meta;
     }
@@ -78,13 +81,13 @@ class CraftMetaBookSigned extends CraftMetaBook implements BookMeta {
     }
 
     @Override
-    ImmutableMap.Builder<String, Object> serialize(ImmutableMap.Builder<String, Object> builder) {
+    ImmutableMap.Builder<String, Object> serialize(ImmutableMap.@NotNull Builder<String, Object> builder) {
         super.serialize(builder);
         return builder;
     }
 
     // Paper start - adventure
-    private CraftMetaBookSigned(net.kyori.adventure.text.Component title, net.kyori.adventure.text.Component author, java.util.List<net.kyori.adventure.text.Component> pages) {
+    private CraftMetaBookSigned(net.kyori.adventure.text.@Nullable Component title, net.kyori.adventure.text.@Nullable Component author, java.util.@NotNull List<net.kyori.adventure.text.Component> pages) {
         super((org.bukkit.craftbukkit.inventory.CraftMetaItem) org.bukkit.Bukkit.getItemFactory().getItemMeta(Material.WRITABLE_BOOK));
         this.title = title == null ? null : net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().serialize(title);
         this.author = author == null ? null : net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().serialize(author);
@@ -93,13 +96,13 @@ class CraftMetaBookSigned extends CraftMetaBook implements BookMeta {
 
     static final class CraftMetaBookSignedBuilder extends CraftMetaBookBuilder {
         @Override
-        protected BookMeta build(net.kyori.adventure.text.Component title, net.kyori.adventure.text.Component author, java.util.List<net.kyori.adventure.text.Component> pages) {
+        protected @NotNull BookMeta build(net.kyori.adventure.text.Component title, net.kyori.adventure.text.Component author, java.util.@NotNull List<net.kyori.adventure.text.Component> pages) {
             return new CraftMetaBookSigned(title, author, pages);
         }
     }
 
     @Override
-    public BookMetaBuilder toBuilder() {
+    public @NotNull BookMetaBuilder toBuilder() {
         return new CraftMetaBookSignedBuilder();
     }
     // Paper end
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaBundle.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaBundle.java
index 59ae2f95b3b42eac62978d1cb520ed39cc6febad..ff046f9a2004ae484f112bd9ad41c9929a399d13 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaBundle.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaBundle.java
@@ -13,13 +13,16 @@ import org.bukkit.configuration.serialization.DelegateDeserialization;
 import org.bukkit.craftbukkit.util.CraftMagicNumbers;
 import org.bukkit.inventory.ItemStack;
 import org.bukkit.inventory.meta.BundleMeta;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 @DelegateDeserialization(CraftMetaItem.SerializableMeta.class)
 public class CraftMetaBundle extends CraftMetaItem implements BundleMeta {
 
     static final ItemMetaKey ITEMS = new ItemMetaKey("Items", "items");
     //
-    private List<ItemStack> items;
+    private @Nullable List<ItemStack> items;
 
     CraftMetaBundle(CraftMetaItem meta) {
         super(meta);
@@ -35,7 +38,7 @@ public class CraftMetaBundle extends CraftMetaItem implements BundleMeta {
         }
     }
 
-    CraftMetaBundle(CompoundTag tag) {
+    CraftMetaBundle(@NotNull CompoundTag tag) {
         super(tag);
 
         if (tag.contains(ITEMS.NBT, CraftMagicNumbers.NBT.TAG_LIST)) {
@@ -56,7 +59,7 @@ public class CraftMetaBundle extends CraftMetaItem implements BundleMeta {
         }
     }
 
-    CraftMetaBundle(Map<String, Object> map) {
+    CraftMetaBundle(@NotNull Map<String, Object> map) {
         super(map);
 
         Iterable<?> items = SerializableMeta.getObject(Iterable.class, map, ITEMS.BUKKIT, true);
@@ -70,7 +73,7 @@ public class CraftMetaBundle extends CraftMetaItem implements BundleMeta {
     }
 
     @Override
-    void applyToItem(CompoundTag tag) {
+    void applyToItem(@NotNull CompoundTag tag) {
         super.applyToItem(tag);
 
         if (this.hasItems()) {
@@ -106,12 +109,12 @@ public class CraftMetaBundle extends CraftMetaItem implements BundleMeta {
     }
 
     @Override
-    public List<ItemStack> getItems() {
+    public @NotNull List<ItemStack> getItems() {
         return (this.items == null) ? ImmutableList.of() : ImmutableList.copyOf(items);
     }
 
     @Override
-    public void setItems(List<ItemStack> items) {
+    public void setItems(@Nullable List<ItemStack> items) {
         this.items = null;
 
         if (items == null) {
@@ -124,7 +127,7 @@ public class CraftMetaBundle extends CraftMetaItem implements BundleMeta {
     }
 
     @Override
-    public void addItem(ItemStack item) {
+    public void addItem(@Nullable ItemStack item) {
         Preconditions.checkArgument(item != null && !item.getType().isAir(), "item is null or air");
 
         if (this.items == null) {
@@ -135,7 +138,7 @@ public class CraftMetaBundle extends CraftMetaItem implements BundleMeta {
     }
 
     @Override
-    boolean equalsCommon(CraftMetaItem meta) {
+    boolean equalsCommon(@NotNull CraftMetaItem meta) {
         if (!super.equalsCommon(meta)) {
             return false;
         }
@@ -165,12 +168,12 @@ public class CraftMetaBundle extends CraftMetaItem implements BundleMeta {
     }
 
     @Override
-    public CraftMetaBundle clone() {
+    public @NotNull CraftMetaBundle clone() {
         return (CraftMetaBundle) super.clone();
     }
 
     @Override
-    ImmutableMap.Builder<String, Object> serialize(ImmutableMap.Builder<String, Object> builder) {
+    ImmutableMap.Builder<String, Object> serialize(ImmutableMap.@NotNull Builder<String, Object> builder) {
         super.serialize(builder);
 
         if (this.hasItems()) {
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaCharge.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaCharge.java
index bf1cd2ee585077bc7a5c9c30fa2f0df4c54bd958..ba86b76b810fa87ae4c3ad5828e6d0a059c08022 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaCharge.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaCharge.java
@@ -8,6 +8,8 @@ import org.bukkit.Material;
 import org.bukkit.configuration.serialization.DelegateDeserialization;
 import org.bukkit.craftbukkit.inventory.CraftMetaItem.SerializableMeta;
 import org.bukkit.inventory.meta.FireworkEffectMeta;
+import org.jetbrains.annotations.NotNull;
+
 
 @DelegateDeserialization(SerializableMeta.class)
 class CraftMetaCharge extends CraftMetaItem implements FireworkEffectMeta {
@@ -23,13 +25,13 @@ class CraftMetaCharge extends CraftMetaItem implements FireworkEffectMeta {
         }
     }
 
-    CraftMetaCharge(Map<String, Object> map) {
+    CraftMetaCharge(@NotNull Map<String, Object> map) {
         super(map);
 
         this.setEffect(SerializableMeta.getObject(FireworkEffect.class, map, EXPLOSION.BUKKIT, true));
     }
 
-    CraftMetaCharge(CompoundTag tag) {
+    CraftMetaCharge(@NotNull CompoundTag tag) {
         super(tag);
 
         if (tag.contains(EXPLOSION.NBT)) {
@@ -57,7 +59,7 @@ class CraftMetaCharge extends CraftMetaItem implements FireworkEffectMeta {
     }
 
     @Override
-    void applyToItem(CompoundTag itemTag) {
+    void applyToItem(@NotNull CompoundTag itemTag) {
         super.applyToItem(itemTag);
 
         if (this.hasEffect()) {
@@ -80,7 +82,7 @@ class CraftMetaCharge extends CraftMetaItem implements FireworkEffectMeta {
     }
 
     @Override
-    boolean equalsCommon(CraftMetaItem meta) {
+    boolean equalsCommon(@NotNull CraftMetaItem meta) {
         if (!super.equalsCommon(meta)) {
             return false;
         }
@@ -110,12 +112,12 @@ class CraftMetaCharge extends CraftMetaItem implements FireworkEffectMeta {
     }
 
     @Override
-    public CraftMetaCharge clone() {
+    public @NotNull CraftMetaCharge clone() {
         return (CraftMetaCharge) super.clone();
     }
 
     @Override
-    Builder<String, Object> serialize(Builder<String, Object> builder) {
+    Builder<String, Object> serialize(@NotNull Builder<String, Object> builder) {
         super.serialize(builder);
 
         if (this.hasEffect()) {
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaCompass.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaCompass.java
index 8d7ce54dece409cfcea15005c550e579fd44c32e..100575df6067903ffdc233e91a9fb122d032406f 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaCompass.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaCompass.java
@@ -18,6 +18,9 @@ import org.bukkit.World;
 import org.bukkit.configuration.serialization.DelegateDeserialization;
 import org.bukkit.craftbukkit.CraftWorld;
 import org.bukkit.inventory.meta.CompassMeta;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 @DelegateDeserialization(CraftMetaItem.SerializableMeta.class)
 public class CraftMetaCompass extends CraftMetaItem implements CompassMeta {
@@ -30,7 +33,7 @@ public class CraftMetaCompass extends CraftMetaItem implements CompassMeta {
     static final ItemMetaKey LODESTONE_POS_Z = new ItemMetaKey("LodestonePosZ");
     static final ItemMetaKey LODESTONE_TRACKED = new ItemMetaKey("LodestoneTracked");
 
-    private StringTag lodestoneWorld;
+    private @Nullable StringTag lodestoneWorld;
     private int lodestoneX;
     private int lodestoneY;
     private int lodestoneZ;
@@ -49,7 +52,7 @@ public class CraftMetaCompass extends CraftMetaItem implements CompassMeta {
         this.tracked = compassMeta.tracked;
     }
 
-    CraftMetaCompass(CompoundTag tag) {
+    CraftMetaCompass(@NotNull CompoundTag tag) {
         super(tag);
         if (tag.contains(LODESTONE_DIMENSION.NBT) && tag.contains(LODESTONE_POS.NBT)) {
             this.lodestoneWorld = (StringTag) tag.get(LODESTONE_DIMENSION.NBT);
@@ -63,7 +66,7 @@ public class CraftMetaCompass extends CraftMetaItem implements CompassMeta {
         }
     }
 
-    CraftMetaCompass(Map<String, Object> map) {
+    CraftMetaCompass(@NotNull Map<String, Object> map) {
         super(map);
         String lodestoneWorldString = SerializableMeta.getString(map, LODESTONE_POS_WORLD.BUKKIT, true);
         if (lodestoneWorldString != null) {
@@ -82,7 +85,7 @@ public class CraftMetaCompass extends CraftMetaItem implements CompassMeta {
     }
 
     @Override
-    void applyToItem(CompoundTag tag) {
+    void applyToItem(@NotNull CompoundTag tag) {
         super.applyToItem(tag);
 
         if (this.lodestoneWorld != null) {
@@ -114,7 +117,7 @@ public class CraftMetaCompass extends CraftMetaItem implements CompassMeta {
     }
 
     @Override
-    public CraftMetaCompass clone() {
+    public @NotNull CraftMetaCompass clone() {
         CraftMetaCompass clone = ((CraftMetaCompass) super.clone());
         return clone;
     }
@@ -136,7 +139,7 @@ public class CraftMetaCompass extends CraftMetaItem implements CompassMeta {
     }
 
     @Override
-    public void setLodestone(Location lodestone) {
+    public void setLodestone(@Nullable Location lodestone) {
         Preconditions.checkArgument(lodestone == null || lodestone.getWorld() != null, "world is null");
         if (lodestone == null) {
             this.lodestoneWorld = null;
@@ -182,7 +185,7 @@ public class CraftMetaCompass extends CraftMetaItem implements CompassMeta {
     }
 
     @Override
-    boolean equalsCommon(CraftMetaItem meta) {
+    boolean equalsCommon(@NotNull CraftMetaItem meta) {
         if (!super.equalsCommon(meta)) {
             return false;
         }
@@ -203,7 +206,7 @@ public class CraftMetaCompass extends CraftMetaItem implements CompassMeta {
     }
 
     @Override
-    Builder<String, Object> serialize(Builder<String, Object> builder) {
+    Builder<String, Object> serialize(@NotNull Builder<String, Object> builder) {
         super.serialize(builder);
 
         if (this.hasLodestone()) {
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaCrossbow.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaCrossbow.java
index f3072ca8f9628db04b519a327e8bf503ce53c210..ebd1884d3dccf768635b7db4a30b502a013dd956 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaCrossbow.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaCrossbow.java
@@ -14,6 +14,9 @@ import org.bukkit.configuration.serialization.DelegateDeserialization;
 import org.bukkit.craftbukkit.util.CraftMagicNumbers;
 import org.bukkit.inventory.ItemStack;
 import org.bukkit.inventory.meta.CrossbowMeta;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 @DelegateDeserialization(CraftMetaItem.SerializableMeta.class)
 public class CraftMetaCrossbow extends CraftMetaItem implements CrossbowMeta {
@@ -22,7 +25,7 @@ public class CraftMetaCrossbow extends CraftMetaItem implements CrossbowMeta {
     static final ItemMetaKey CHARGED_PROJECTILES = new ItemMetaKey("ChargedProjectiles", "charged-projectiles");
     //
     private boolean charged;
-    private List<ItemStack> chargedProjectiles;
+    private @Nullable List<ItemStack> chargedProjectiles;
 
     CraftMetaCrossbow(CraftMetaItem meta) {
         super(meta);
@@ -39,7 +42,7 @@ public class CraftMetaCrossbow extends CraftMetaItem implements CrossbowMeta {
         }
     }
 
-    CraftMetaCrossbow(CompoundTag tag) {
+    CraftMetaCrossbow(@NotNull CompoundTag tag) {
         super(tag);
 
         this.charged = tag.getBoolean(CHARGED.NBT);
@@ -59,7 +62,7 @@ public class CraftMetaCrossbow extends CraftMetaItem implements CrossbowMeta {
         }
     }
 
-    CraftMetaCrossbow(Map<String, Object> map) {
+    CraftMetaCrossbow(@NotNull Map<String, Object> map) {
         super(map);
 
         Boolean charged = SerializableMeta.getObject(Boolean.class, map, CHARGED.BUKKIT, true);
@@ -78,7 +81,7 @@ public class CraftMetaCrossbow extends CraftMetaItem implements CrossbowMeta {
     }
 
     @Override
-    void applyToItem(CompoundTag tag) {
+    void applyToItem(@NotNull CompoundTag tag) {
         super.applyToItem(tag);
 
         tag.putBoolean(CHARGED.NBT, charged);
@@ -115,12 +118,12 @@ public class CraftMetaCrossbow extends CraftMetaItem implements CrossbowMeta {
     }
 
     @Override
-    public List<ItemStack> getChargedProjectiles() {
+    public @NotNull List<ItemStack> getChargedProjectiles() {
         return (this.chargedProjectiles == null) ? ImmutableList.of() : ImmutableList.copyOf(chargedProjectiles);
     }
 
     @Override
-    public void setChargedProjectiles(List<ItemStack> projectiles) {
+    public void setChargedProjectiles(@Nullable List<ItemStack> projectiles) {
         this.chargedProjectiles = null;
         this.charged = false;
 
@@ -134,7 +137,7 @@ public class CraftMetaCrossbow extends CraftMetaItem implements CrossbowMeta {
     }
 
     @Override
-    public void addChargedProjectile(ItemStack item) {
+    public void addChargedProjectile(@Nullable ItemStack item) {
         Preconditions.checkArgument(item != null, "item");
         Preconditions.checkArgument(item.getType() == Material.FIREWORK_ROCKET || CraftMagicNumbers.getItem(item.getType()) instanceof ArrowItem, "Item %s is not an arrow or firework rocket", item);
 
@@ -147,7 +150,7 @@ public class CraftMetaCrossbow extends CraftMetaItem implements CrossbowMeta {
     }
 
     @Override
-    boolean equalsCommon(CraftMetaItem meta) {
+    boolean equalsCommon(@NotNull CraftMetaItem meta) {
         if (!super.equalsCommon(meta)) {
             return false;
         }
@@ -179,12 +182,12 @@ public class CraftMetaCrossbow extends CraftMetaItem implements CrossbowMeta {
     }
 
     @Override
-    public CraftMetaCrossbow clone() {
+    public @NotNull CraftMetaCrossbow clone() {
         return (CraftMetaCrossbow) super.clone();
     }
 
     @Override
-    ImmutableMap.Builder<String, Object> serialize(ImmutableMap.Builder<String, Object> builder) {
+    ImmutableMap.@NotNull Builder<String, Object> serialize(ImmutableMap.@NotNull Builder<String, Object> builder) {
         super.serialize(builder);
 
         builder.put(CHARGED.BUKKIT, charged);
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaEnchantedBook.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaEnchantedBook.java
index 6d2cf994f612241d225ec8c2184350cc9d47889d..2511bf1171832130393f37b4e27d585db8f36937 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaEnchantedBook.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaEnchantedBook.java
@@ -10,12 +10,15 @@ import org.bukkit.configuration.serialization.DelegateDeserialization;
 import org.bukkit.craftbukkit.inventory.CraftMetaItem.SerializableMeta;
 import org.bukkit.enchantments.Enchantment;
 import org.bukkit.inventory.meta.EnchantmentStorageMeta;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 @DelegateDeserialization(SerializableMeta.class)
 class CraftMetaEnchantedBook extends CraftMetaItem implements EnchantmentStorageMeta {
     static final ItemMetaKey STORED_ENCHANTMENTS = new ItemMetaKey("StoredEnchantments", "stored-enchants");
 
-    private Map<Enchantment, Integer> enchantments;
+    private @Nullable Map<Enchantment, Integer> enchantments;
 
     CraftMetaEnchantedBook(CraftMetaItem meta) {
         super(meta);
@@ -31,7 +34,7 @@ class CraftMetaEnchantedBook extends CraftMetaItem implements EnchantmentStorage
         }
     }
 
-    CraftMetaEnchantedBook(CompoundTag tag) {
+    CraftMetaEnchantedBook(@NotNull CompoundTag tag) {
         super(tag);
 
         if (!tag.contains(STORED_ENCHANTMENTS.NBT)) {
@@ -41,14 +44,14 @@ class CraftMetaEnchantedBook extends CraftMetaItem implements EnchantmentStorage
         this.enchantments = buildEnchantments(tag, CraftMetaEnchantedBook.STORED_ENCHANTMENTS);
     }
 
-    CraftMetaEnchantedBook(Map<String, Object> map) {
+    CraftMetaEnchantedBook(@NotNull Map<String, Object> map) {
         super(map);
 
         this.enchantments = buildEnchantments(map, CraftMetaEnchantedBook.STORED_ENCHANTMENTS);
     }
 
     @Override
-    void applyToItem(CompoundTag itemTag) {
+    void applyToItem(@NotNull CompoundTag itemTag) {
         super.applyToItem(itemTag);
 
         applyEnchantments(this.enchantments, itemTag, CraftMetaEnchantedBook.STORED_ENCHANTMENTS);
@@ -65,7 +68,7 @@ class CraftMetaEnchantedBook extends CraftMetaItem implements EnchantmentStorage
     }
 
     @Override
-    boolean equalsCommon(CraftMetaItem meta) {
+    boolean equalsCommon(@NotNull CraftMetaItem meta) {
         if (!super.equalsCommon(meta)) {
             return false;
         }
@@ -95,7 +98,7 @@ class CraftMetaEnchantedBook extends CraftMetaItem implements EnchantmentStorage
     }
 
     @Override
-    public CraftMetaEnchantedBook clone() {
+    public @NotNull CraftMetaEnchantedBook clone() {
         CraftMetaEnchantedBook meta = (CraftMetaEnchantedBook) super.clone();
 
         if (this.enchantments != null) {
@@ -106,7 +109,7 @@ class CraftMetaEnchantedBook extends CraftMetaItem implements EnchantmentStorage
     }
 
     @Override
-    Builder<String, Object> serialize(Builder<String, Object> builder) {
+    Builder<String, Object> serialize(@NotNull Builder<String, Object> builder) {
         super.serialize(builder);
 
         serializeEnchantments(this.enchantments, builder, CraftMetaEnchantedBook.STORED_ENCHANTMENTS);
@@ -133,12 +136,12 @@ class CraftMetaEnchantedBook extends CraftMetaItem implements EnchantmentStorage
     }
 
     @Override
-    public Map<Enchantment, Integer> getStoredEnchants() {
+    public @NotNull Map<Enchantment, Integer> getStoredEnchants() {
         return this.hasStoredEnchants() ? ImmutableMap.copyOf(enchantments) : ImmutableMap.<Enchantment, Integer>of();
     }
 
     @Override
-    public boolean addStoredEnchant(Enchantment ench, int level, boolean ignoreRestrictions) {
+    public boolean addStoredEnchant(@NotNull Enchantment ench, int level, boolean ignoreRestrictions) {
         if (this.enchantments == null) {
             this.enchantments = new LinkedHashMap<Enchantment, Integer>(4);
         }
@@ -161,7 +164,7 @@ class CraftMetaEnchantedBook extends CraftMetaItem implements EnchantmentStorage
     }
 
     @Override
-    public boolean hasConflictingStoredEnchant(Enchantment ench) {
+    public boolean hasConflictingStoredEnchant(@NotNull Enchantment ench) {
         return checkConflictingEnchants(this.enchantments, ench);
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaEntityTag.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaEntityTag.java
index e65bdbbbedb91eca016d46de5cc7cbb70dd9f659..d9b71972416575b25482baa3f5ec6dd11b3c16fb 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaEntityTag.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaEntityTag.java
@@ -8,6 +8,8 @@ import net.minecraft.nbt.CompoundTag;
 import net.minecraft.nbt.Tag;
 import org.bukkit.Material;
 import org.bukkit.configuration.serialization.DelegateDeserialization;
+import org.jetbrains.annotations.NotNull;
+
 
 @DelegateDeserialization(CraftMetaItem.SerializableMeta.class)
 public class CraftMetaEntityTag extends CraftMetaItem {
@@ -35,7 +37,7 @@ public class CraftMetaEntityTag extends CraftMetaItem {
         this.entityTag = entity.entityTag;
     }
 
-    CraftMetaEntityTag(CompoundTag tag) {
+    CraftMetaEntityTag(@NotNull CompoundTag tag) {
         super(tag);
 
         if (tag.contains(ENTITY_TAG.NBT)) {
@@ -43,12 +45,12 @@ public class CraftMetaEntityTag extends CraftMetaItem {
         }
     }
 
-    CraftMetaEntityTag(Map<String, Object> map) {
+    CraftMetaEntityTag(@NotNull Map<String, Object> map) {
         super(map);
     }
 
     @Override
-    void deserializeInternal(CompoundTag tag, Object context) {
+    void deserializeInternal(@NotNull CompoundTag tag, Object context) {
         super.deserializeInternal(tag, context);
 
         if (tag.contains(ENTITY_TAG.NBT)) {
@@ -57,14 +59,14 @@ public class CraftMetaEntityTag extends CraftMetaItem {
     }
 
     @Override
-    void serializeInternal(Map<String, Tag> internalTags) {
+    void serializeInternal(@NotNull Map<String, Tag> internalTags) {
         if (this.entityTag != null && !this.entityTag.isEmpty()) {
             internalTags.put(ENTITY_TAG.NBT, entityTag);
         }
     }
 
     @Override
-    void applyToItem(CompoundTag tag) {
+    void applyToItem(@NotNull CompoundTag tag) {
         super.applyToItem(tag);
 
         if (this.entityTag != null) {
@@ -87,7 +89,7 @@ public class CraftMetaEntityTag extends CraftMetaItem {
     }
 
     @Override
-    boolean equalsCommon(CraftMetaItem meta) {
+    boolean equalsCommon(@NotNull CraftMetaItem meta) {
         if (!super.equalsCommon(meta)) {
             return false;
         }
@@ -117,14 +119,14 @@ public class CraftMetaEntityTag extends CraftMetaItem {
     }
 
     @Override
-    Builder<String, Object> serialize(Builder<String, Object> builder) {
+    Builder<String, Object> serialize(@NotNull Builder<String, Object> builder) {
         super.serialize(builder);
 
         return builder;
     }
 
     @Override
-    public CraftMetaEntityTag clone() {
+    public @NotNull CraftMetaEntityTag clone() {
         CraftMetaEntityTag clone = (CraftMetaEntityTag) super.clone();
 
         if (this.entityTag != null) {
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaFirework.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaFirework.java
index 907b016d3d7b4c756fa0ca75fb92d86b2e9bde1c..f7d171c0cf7e48ddb64e9fbc01beec779ad54dc3 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaFirework.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaFirework.java
@@ -19,6 +19,9 @@ import org.bukkit.craftbukkit.inventory.CraftMetaItem.ItemMetaKey.Specific.To;
 import org.bukkit.craftbukkit.inventory.CraftMetaItem.SerializableMeta;
 import org.bukkit.craftbukkit.util.CraftMagicNumbers;
 import org.bukkit.inventory.meta.FireworkMeta;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 public @DelegateDeserialization(SerializableMeta.class)
 class CraftMetaFirework extends CraftMetaItem implements FireworkMeta {
@@ -52,7 +55,7 @@ class CraftMetaFirework extends CraftMetaItem implements FireworkMeta {
     @Specific(To.NBT)
     static final ItemMetaKey EXPLOSION_FADE = new ItemMetaKey("FadeColors");
 
-    private List<FireworkEffect> effects;
+    private @Nullable List<FireworkEffect> effects;
     private Integer power;
 
     CraftMetaFirework(CraftMetaItem meta) {
@@ -71,7 +74,7 @@ class CraftMetaFirework extends CraftMetaItem implements FireworkMeta {
         }
     }
 
-    CraftMetaFirework(CompoundTag tag) {
+    CraftMetaFirework(@NotNull CompoundTag tag) {
         super(tag);
 
         if (!tag.contains(FIREWORKS.NBT)) {
@@ -98,7 +101,7 @@ class CraftMetaFirework extends CraftMetaItem implements FireworkMeta {
         }
     }
 
-    static FireworkEffect getEffect(CompoundTag explosion) {
+    static @NotNull FireworkEffect getEffect(@NotNull CompoundTag explosion) {
         FireworkEffect.Builder effect = FireworkEffect.builder()
                 .flicker(explosion.getBoolean(EXPLOSION_FLICKER.NBT))
                 .trail(explosion.getBoolean(EXPLOSION_TRAIL.NBT))
@@ -123,7 +126,7 @@ class CraftMetaFirework extends CraftMetaItem implements FireworkMeta {
         return effect.build();
     }
 
-    static CompoundTag getExplosion(FireworkEffect effect) {
+    static @NotNull CompoundTag getExplosion(@NotNull FireworkEffect effect) {
         CompoundTag explosion = new CompoundTag();
 
         if (effect.hasFlicker()) {
@@ -142,7 +145,7 @@ class CraftMetaFirework extends CraftMetaItem implements FireworkMeta {
         return explosion;
     }
 
-    public static int getNBT(Type type) {
+    public static int getNBT(@NotNull Type type) {
         switch (type) {
             case BALL:
                 return 0;
@@ -159,7 +162,7 @@ class CraftMetaFirework extends CraftMetaItem implements FireworkMeta {
         }
     }
 
-    static Type getEffectType(int nbt) {
+    static @NotNull Type getEffectType(int nbt) {
         switch (nbt) {
             case 0:
                 return Type.BALL;
@@ -176,7 +179,7 @@ class CraftMetaFirework extends CraftMetaItem implements FireworkMeta {
         }
     }
 
-    CraftMetaFirework(Map<String, Object> map) {
+    CraftMetaFirework(@NotNull Map<String, Object> map) {
         super(map);
 
         Integer power = SerializableMeta.getObject(Integer.class, map, FLIGHT.BUKKIT, true);
@@ -193,7 +196,7 @@ class CraftMetaFirework extends CraftMetaItem implements FireworkMeta {
         return !(this.effects == null || this.effects.isEmpty());
     }
 
-    void safelyAddEffects(Iterable<?> collection) {
+    void safelyAddEffects(@Nullable Iterable<?> collection) {
         if (collection == null || (collection instanceof Collection && ((Collection<?>) collection).isEmpty())) {
             return;
         }
@@ -213,7 +216,7 @@ class CraftMetaFirework extends CraftMetaItem implements FireworkMeta {
     }
 
     @Override
-    void applyToItem(CompoundTag itemTag) {
+    void applyToItem(@NotNull CompoundTag itemTag) {
         super.applyToItem(itemTag);
         if (this.isFireworkEmpty()) {
             return;
@@ -238,7 +241,7 @@ class CraftMetaFirework extends CraftMetaItem implements FireworkMeta {
         }
     }
 
-    static void addColors(CompoundTag compound, ItemMetaKey key, List<Color> colors) {
+    static void addColors(@NotNull CompoundTag compound, @NotNull ItemMetaKey key, @NotNull List<Color> colors) {
         if (colors.isEmpty()) {
             return;
         }
@@ -271,7 +274,7 @@ class CraftMetaFirework extends CraftMetaItem implements FireworkMeta {
     }
 
     @Override
-    boolean equalsCommon(CraftMetaItem meta) {
+    boolean equalsCommon(@NotNull CraftMetaItem meta) {
         if (!super.equalsCommon(meta)) {
             return false;
         }
@@ -305,7 +308,7 @@ class CraftMetaFirework extends CraftMetaItem implements FireworkMeta {
     }
 
     @Override
-    Builder<String, Object> serialize(Builder<String, Object> builder) {
+    Builder<String, Object> serialize(@NotNull Builder<String, Object> builder) {
         super.serialize(builder);
 
         if (this.hasEffects()) {
@@ -320,7 +323,7 @@ class CraftMetaFirework extends CraftMetaItem implements FireworkMeta {
     }
 
     @Override
-    public CraftMetaFirework clone() {
+    public @NotNull CraftMetaFirework clone() {
         CraftMetaFirework meta = (CraftMetaFirework) super.clone();
 
         if (this.effects != null) {
@@ -340,7 +343,7 @@ class CraftMetaFirework extends CraftMetaItem implements FireworkMeta {
     }
 
     @Override
-    public void addEffects(FireworkEffect... effects) {
+    public void addEffects(FireworkEffect @NotNull ... effects) {
         Validate.notNull(effects, "Effects cannot be null");
         if (effects.length == 0) {
             return;
@@ -364,7 +367,7 @@ class CraftMetaFirework extends CraftMetaItem implements FireworkMeta {
     }
 
     @Override
-    public List<FireworkEffect> getEffects() {
+    public @NotNull List<FireworkEffect> getEffects() {
         return this.effects == null ? ImmutableList.<FireworkEffect>of() : ImmutableList.copyOf(this.effects);
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaItem.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaItem.java
index 90d7e8415f158c3176a705749f0aa36a729d3b38..8fd040caea9c007afc26961dd814a74fb20b7f95 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaItem.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaItem.java
@@ -86,6 +86,8 @@ import static org.spigotmc.ValidateUtils.*;
 // Paper start
 import com.destroystokyo.paper.Namespaced;
 import com.destroystokyo.paper.NamespacedTag;
+import org.jetbrains.annotations.NotNull;
+
 import java.util.Collections;
 // Paper end
 
@@ -144,8 +146,8 @@ class CraftMetaItem implements ItemMeta, Damageable, Repairable, BlockDataMeta {
     public static final class SerializableMeta implements ConfigurationSerializable {
         static final String TYPE_FIELD = "meta-type";
 
-        static final ImmutableMap<Class<? extends CraftMetaItem>, String> classMap;
-        static final ImmutableMap<String, Constructor<? extends CraftMetaItem>> constructorMap;
+        static final @NotNull ImmutableMap<Class<? extends CraftMetaItem>, String> classMap;
+        static final @NotNull ImmutableMap<String, Constructor<? extends CraftMetaItem>> constructorMap;
 
         static {
             classMap = ImmutableMap.<Class<? extends CraftMetaItem>, String>builder()
@@ -187,7 +189,7 @@ class CraftMetaItem implements ItemMeta, Damageable, Repairable, BlockDataMeta {
         private SerializableMeta() {
         }
 
-        public static ItemMeta deserialize(Map<String, Object> map) throws Throwable {
+        public static @NotNull ItemMeta deserialize(@NotNull Map<String, Object> map) throws Throwable {
             Validate.notNull(map, "Cannot deserialize null map");
 
             String type = SerializableMeta.getString(map, SerializableMeta.TYPE_FIELD, false);
@@ -209,20 +211,20 @@ class CraftMetaItem implements ItemMeta, Damageable, Repairable, BlockDataMeta {
         }
 
         @Override
-        public Map<String, Object> serialize() {
+        public @NotNull Map<String, Object> serialize() {
             throw new AssertionError();
         }
 
-        static String getString(Map<?, ?> map, Object field, boolean nullable) {
+        static @org.jetbrains.annotations.Nullable String getString(@NotNull Map<?, ?> map, Object field, boolean nullable) {
             return SerializableMeta.getObject(String.class, map, field, nullable);
         }
 
-        static boolean getBoolean(Map<?, ?> map, Object field) {
+        static boolean getBoolean(@NotNull Map<?, ?> map, Object field) {
             Boolean value = SerializableMeta.getObject(Boolean.class, map, field, true);
             return value != null && value;
         }
 
-        static <T> T getObject(Class<T> clazz, Map<?, ?> map, Object field, boolean nullable) {
+        static <T> @org.jetbrains.annotations.Nullable T getObject(@NotNull Class<T> clazz, @NotNull Map<?, ?> map, Object field, boolean nullable) {
             final Object object = map.get(field);
 
             if (clazz.isInstance(object)) {
@@ -280,20 +282,20 @@ class CraftMetaItem implements ItemMeta, Damageable, Repairable, BlockDataMeta {
     // Paper end
 
     // We store the raw original JSON representation of all text data. See SPIGOT-5063, SPIGOT-5656, SPIGOT-5304
-    private String displayName;
-    private String locName;
-    private List<String> lore; // null and empty are two different states internally
+    private @org.jetbrains.annotations.Nullable String displayName;
+    private @org.jetbrains.annotations.Nullable String locName;
+    private @org.jetbrains.annotations.Nullable List<String> lore; // null and empty are two different states internally
     private Integer customModelData;
     private CompoundTag blockData;
-    private EnchantmentMap enchantments; // Paper
+    private @org.jetbrains.annotations.Nullable EnchantmentMap enchantments; // Paper
     private Multimap<Attribute, AttributeModifier> attributeModifiers;
     private int repairCost;
     private int hideFlag;
     private boolean unbreakable;
     private int damage;
     // Paper start - Implement an API for CanPlaceOn and CanDestroy NBT values
-    private Set<Namespaced> placeableKeys = Sets.newHashSet();
-    private Set<Namespaced> destroyableKeys = Sets.newHashSet();
+    private @NotNull Set<Namespaced> placeableKeys = Sets.newHashSet();
+    private @NotNull Set<Namespaced> destroyableKeys = Sets.newHashSet();
     // Paper end
 
     private static final Set<String> HANDLED_TAGS = Sets.newHashSet();
@@ -301,11 +303,11 @@ class CraftMetaItem implements ItemMeta, Damageable, Repairable, BlockDataMeta {
 
     private CompoundTag internalTag;
     final Map<String, Tag> unhandledTags = new TreeMap<String, Tag>(); // Visible for testing only // Paper
-    private CraftPersistentDataContainer persistentDataContainer = new CraftPersistentDataContainer(CraftMetaItem.DATA_TYPE_REGISTRY);
+    private @NotNull CraftPersistentDataContainer persistentDataContainer = new CraftPersistentDataContainer(CraftMetaItem.DATA_TYPE_REGISTRY);
 
     private int version = CraftMagicNumbers.INSTANCE.getDataVersion(); // Internal use only
 
-    CraftMetaItem(CraftMetaItem meta) {
+    CraftMetaItem(@org.jetbrains.annotations.Nullable CraftMetaItem meta) {
         if (meta == null) {
             return;
         }
@@ -352,7 +354,7 @@ class CraftMetaItem implements ItemMeta, Damageable, Repairable, BlockDataMeta {
         this.version = meta.version;
     }
 
-    CraftMetaItem(CompoundTag tag) {
+    CraftMetaItem(@NotNull CompoundTag tag) {
         if (tag.contains(DISPLAY.NBT)) {
             CompoundTag display = tag.getCompound(DISPLAY.NBT);
 
@@ -438,7 +440,7 @@ class CraftMetaItem implements ItemMeta, Damageable, Repairable, BlockDataMeta {
         }
     }
 
-    static EnchantmentMap buildEnchantments(CompoundTag tag, ItemMetaKey key) { // Paper
+    static @org.jetbrains.annotations.Nullable EnchantmentMap buildEnchantments(@NotNull CompoundTag tag, @NotNull ItemMetaKey key) { // Paper
         if (!tag.contains(key.NBT)) {
             return null;
         }
@@ -459,7 +461,7 @@ class CraftMetaItem implements ItemMeta, Damageable, Repairable, BlockDataMeta {
         return enchantments;
     }
 
-    static Multimap<Attribute, AttributeModifier> buildModifiers(CompoundTag tag, ItemMetaKey key) {
+    static @NotNull Multimap<Attribute, AttributeModifier> buildModifiers(@NotNull CompoundTag tag, @NotNull ItemMetaKey key) {
         Multimap<Attribute, AttributeModifier> modifiers = LinkedHashMultimap.create();
         if (!tag.contains(key.NBT, CraftMagicNumbers.NBT.TAG_LIST)) {
             return modifiers;
@@ -516,7 +518,7 @@ class CraftMetaItem implements ItemMeta, Damageable, Repairable, BlockDataMeta {
         return modifiers;
     }
 
-    CraftMetaItem(Map<String, Object> map) {
+    CraftMetaItem(@NotNull Map<String, Object> map) {
         this.displayName = CraftChatMessage.fromJSONOrStringOrNullToJSON(SerializableMeta.getString(map, NAME.BUKKIT, true));
 
         this.locName = CraftChatMessage.fromJSONOrStringOrNullToJSON(SerializableMeta.getString(map, LOCNAME.BUKKIT, true));
@@ -618,14 +620,14 @@ class CraftMetaItem implements ItemMeta, Damageable, Repairable, BlockDataMeta {
         }
     }
 
-    void deserializeInternal(CompoundTag tag, Object context) {
+    void deserializeInternal(@NotNull CompoundTag tag, Object context) {
         // SPIGOT-4576: Need to migrate from internal to proper data
         if (tag.contains(ATTRIBUTES.NBT, CraftMagicNumbers.NBT.TAG_LIST)) {
             this.attributeModifiers = CraftMetaItem.buildModifiers(tag, CraftMetaItem.ATTRIBUTES);
         }
     }
 
-    static EnchantmentMap buildEnchantments(Map<String, Object> map, ItemMetaKey key) { // Paper
+    static @org.jetbrains.annotations.Nullable EnchantmentMap buildEnchantments(@NotNull Map<String, Object> map, @NotNull ItemMetaKey key) { // Paper
         Map<?, ?> ench = SerializableMeta.getObject(Map.class, map, key.BUKKIT, true);
         if (ench == null) {
             return null;
@@ -648,7 +650,7 @@ class CraftMetaItem implements ItemMeta, Damageable, Repairable, BlockDataMeta {
         return enchantments;
     }
 
-    static Multimap<Attribute, AttributeModifier> buildModifiers(Map<String, Object> map, ItemMetaKey key) {
+    static @NotNull Multimap<Attribute, AttributeModifier> buildModifiers(@NotNull Map<String, Object> map, @NotNull ItemMetaKey key) {
         Map<?, ?> mods = SerializableMeta.getObject(Map.class, map, key.BUKKIT, true);
         Multimap<Attribute, AttributeModifier> result = LinkedHashMultimap.create();
         if (mods == null) {
@@ -685,7 +687,7 @@ class CraftMetaItem implements ItemMeta, Damageable, Repairable, BlockDataMeta {
     }
 
     @Overridden
-    void applyToItem(CompoundTag itemTag) {
+    void applyToItem(@NotNull CompoundTag itemTag) {
         if (this.hasDisplayName()) {
             this.setDisplayTag(itemTag, NAME.NBT, StringTag.valueOf(displayName));
         }
@@ -757,7 +759,7 @@ class CraftMetaItem implements ItemMeta, Damageable, Repairable, BlockDataMeta {
     }
 
     // Paper start
-    static ListTag createNonComponentStringList(List<String> list) {
+    static ListTag createNonComponentStringList(@org.jetbrains.annotations.Nullable List<String> list) {
         if (list == null || list.isEmpty()) {
             return null;
         }
@@ -771,7 +773,7 @@ class CraftMetaItem implements ItemMeta, Damageable, Repairable, BlockDataMeta {
     }
     // Paper end
 
-    ListTag createStringList(List<String> list) {
+    @org.jetbrains.annotations.Nullable ListTag createStringList(@org.jetbrains.annotations.Nullable List<String> list) {
         if (list == null) {
             return null;
         }
@@ -785,7 +787,7 @@ class CraftMetaItem implements ItemMeta, Damageable, Repairable, BlockDataMeta {
         return tagList;
     }
 
-    static void applyEnchantments(Map<Enchantment, Integer> enchantments, CompoundTag tag, ItemMetaKey key) {
+    static void applyEnchantments(@org.jetbrains.annotations.Nullable Map<Enchantment, Integer> enchantments, @NotNull CompoundTag tag, @NotNull ItemMetaKey key) {
         if (enchantments == null /*|| enchantments.size() == 0*/) { // Spigot - remove size check
             return;
         }
@@ -804,7 +806,7 @@ class CraftMetaItem implements ItemMeta, Damageable, Repairable, BlockDataMeta {
         tag.put(key.NBT, list);
     }
 
-    static void applyModifiers(Multimap<Attribute, AttributeModifier> modifiers, CompoundTag tag, ItemMetaKey key) {
+    static void applyModifiers(@org.jetbrains.annotations.Nullable Multimap<Attribute, AttributeModifier> modifiers, @NotNull CompoundTag tag, @NotNull ItemMetaKey key) {
         if (modifiers == null || modifiers.isEmpty()) {
             return;
         }
@@ -837,7 +839,7 @@ class CraftMetaItem implements ItemMeta, Damageable, Repairable, BlockDataMeta {
         tag.put(key.NBT, list);
     }
 
-    void setDisplayTag(CompoundTag tag, String key, Tag value) {
+    void setDisplayTag(@NotNull CompoundTag tag, @NotNull String key, @NotNull Tag value) {
         final CompoundTag display = tag.getCompound(DISPLAY.NBT);
 
         if (!tag.contains(DISPLAY.NBT)) {
@@ -864,13 +866,13 @@ class CraftMetaItem implements ItemMeta, Damageable, Repairable, BlockDataMeta {
     }
 
     @Override
-    public void displayName(final net.kyori.adventure.text.Component displayName) {
+    public void displayName(final net.kyori.adventure.text.@org.jetbrains.annotations.Nullable Component displayName) {
         this.displayName = displayName == null ? null : net.kyori.adventure.text.serializer.gson.GsonComponentSerializer.gson().serialize(displayName);
     }
     // Paper end
 
     @Override
-    public String getDisplayName() {
+    public @NotNull String getDisplayName() {
         return CraftChatMessage.fromJSONComponent(displayName);
     }
 
@@ -897,7 +899,7 @@ class CraftMetaItem implements ItemMeta, Damageable, Repairable, BlockDataMeta {
     }
 
     @Override
-    public String getLocalizedName() {
+    public @NotNull String getLocalizedName() {
         return CraftChatMessage.fromJSONComponent(locName);
     }
 
@@ -923,7 +925,7 @@ class CraftMetaItem implements ItemMeta, Damageable, Repairable, BlockDataMeta {
     }
 
     @Override
-    public void lore(final List<net.kyori.adventure.text.Component> lore) {
+    public void lore(final @org.jetbrains.annotations.Nullable List<net.kyori.adventure.text.Component> lore) {
         this.lore = lore != null ? io.papermc.paper.adventure.PaperAdventure.asJson(lore) : null;
     }
     // Paper end
@@ -950,12 +952,12 @@ class CraftMetaItem implements ItemMeta, Damageable, Repairable, BlockDataMeta {
     }
 
     @Override
-    public Map<Enchantment, Integer> getEnchants() {
+    public @NotNull Map<Enchantment, Integer> getEnchants() {
         return this.hasEnchants() ? ImmutableSortedMap.copyOfSorted(this.enchantments) : ImmutableMap.<Enchantment, Integer>of(); // Paper
     }
 
     @Override
-    public boolean addEnchant(Enchantment ench, int level, boolean ignoreRestrictions) {
+    public boolean addEnchant(@NotNull Enchantment ench, int level, boolean ignoreRestrictions) {
         Validate.notNull(ench, "Enchantment cannot be null");
         if (this.enchantments == null) {
             this.enchantments = new EnchantmentMap(); // Paper
@@ -987,26 +989,26 @@ class CraftMetaItem implements ItemMeta, Damageable, Repairable, BlockDataMeta {
     }
 
     @Override
-    public boolean hasConflictingEnchant(Enchantment ench) {
+    public boolean hasConflictingEnchant(@NotNull Enchantment ench) {
         return CraftMetaItem.checkConflictingEnchants(this.enchantments, ench);
     }
 
     @Override
-    public void addItemFlags(ItemFlag... hideFlags) {
+    public void addItemFlags(ItemFlag @NotNull ... hideFlags) {
         for (ItemFlag f : hideFlags) {
             this.hideFlag |= this.getBitModifier(f);
         }
     }
 
     @Override
-    public void removeItemFlags(ItemFlag... hideFlags) {
+    public void removeItemFlags(ItemFlag @NotNull ... hideFlags) {
         for (ItemFlag f : hideFlags) {
             this.hideFlag &= ~this.getBitModifier(f);
         }
     }
 
     @Override
-    public Set<ItemFlag> getItemFlags() {
+    public @NotNull Set<ItemFlag> getItemFlags() {
         Set<ItemFlag> currentFlags = EnumSet.noneOf(ItemFlag.class);
 
         for (ItemFlag f : ItemFlag.values()) {
@@ -1019,12 +1021,12 @@ class CraftMetaItem implements ItemMeta, Damageable, Repairable, BlockDataMeta {
     }
 
     @Override
-    public boolean hasItemFlag(ItemFlag flag) {
+    public boolean hasItemFlag(@NotNull ItemFlag flag) {
         int bitModifier = this.getBitModifier(flag);
         return (this.hideFlag & bitModifier) == bitModifier;
     }
 
-    private byte getBitModifier(ItemFlag hideFlag) {
+    private byte getBitModifier(@NotNull ItemFlag hideFlag) {
         return (byte) (1 << hideFlag.ordinal());
     }
 
@@ -1042,7 +1044,7 @@ class CraftMetaItem implements ItemMeta, Damageable, Repairable, BlockDataMeta {
     }
     // Paper end
     @Override
-    public void setLore(List<String> lore) {
+    public void setLore(@org.jetbrains.annotations.Nullable List<String> lore) {
         if (lore == null || lore.isEmpty()) {
             this.lore = null;
         } else {
@@ -1057,7 +1059,7 @@ class CraftMetaItem implements ItemMeta, Damageable, Repairable, BlockDataMeta {
 
     // Paper start
     @Override
-    public void setLoreComponents(List<net.md_5.bungee.api.chat.BaseComponent[]> lore) {
+    public void setLoreComponents(@org.jetbrains.annotations.Nullable List<net.md_5.bungee.api.chat.BaseComponent[]> lore) {
         if (lore == null) {
             this.lore = null;
         } else {
@@ -1092,7 +1094,7 @@ class CraftMetaItem implements ItemMeta, Damageable, Repairable, BlockDataMeta {
     }
 
     @Override
-    public BlockData getBlockData(Material material) {
+    public @NotNull BlockData getBlockData(Material material) {
         // Paper start - fix NPE if this.blockData is null
         final net.minecraft.world.level.block.state.BlockState defaultBlockState = CraftMagicNumbers.getBlock(material).defaultBlockState();
         return CraftBlockData.fromData(this.blockData == null ? defaultBlockState : BlockItem.getBlockState(defaultBlockState, blockData));
@@ -1100,7 +1102,7 @@ class CraftMetaItem implements ItemMeta, Damageable, Repairable, BlockDataMeta {
     }
 
     @Override
-    public void setBlockData(BlockData blockData) {
+    public void setBlockData(@org.jetbrains.annotations.Nullable BlockData blockData) {
         this.blockData = (blockData == null) ? null : ((CraftBlockData) blockData).toStates();
     }
 
@@ -1141,7 +1143,7 @@ class CraftMetaItem implements ItemMeta, Damageable, Repairable, BlockDataMeta {
     }
 
     @Override
-    public Multimap<Attribute, AttributeModifier> getAttributeModifiers(@Nullable EquipmentSlot slot) {
+    public @NotNull Multimap<Attribute, AttributeModifier> getAttributeModifiers(@Nullable EquipmentSlot slot) {
         this.checkAttributeList();
         SetMultimap<Attribute, AttributeModifier> result = LinkedHashMultimap.create();
         for (Map.Entry<Attribute, AttributeModifier> entry : this.attributeModifiers.entries()) {
@@ -1241,23 +1243,23 @@ class CraftMetaItem implements ItemMeta, Damageable, Repairable, BlockDataMeta {
     }
 
     @Override
-    public String getAsString() {
+    public @NotNull String getAsString() {
         CompoundTag tag = new CompoundTag();
         this.applyToItem(tag);
         return tag.toString();
     }
 
     @Override
-    public CustomItemTagContainer getCustomTagContainer() {
+    public @NotNull CustomItemTagContainer getCustomTagContainer() {
         return new DeprecatedCustomTagContainer(this.getPersistentDataContainer());
     }
 
     @Override
-    public PersistentDataContainer getPersistentDataContainer() {
+    public @NotNull PersistentDataContainer getPersistentDataContainer() {
         return this.persistentDataContainer;
     }
 
-    private static boolean compareModifiers(Multimap<Attribute, AttributeModifier> first, Multimap<Attribute, AttributeModifier> second) {
+    private static boolean compareModifiers(@org.jetbrains.annotations.Nullable Multimap<Attribute, AttributeModifier> first, @org.jetbrains.annotations.Nullable Multimap<Attribute, AttributeModifier> second) {
         if (first == null || second == null) {
             return false;
         }
@@ -1290,7 +1292,7 @@ class CraftMetaItem implements ItemMeta, Damageable, Repairable, BlockDataMeta {
     }
 
     @Override
-    public final boolean equals(Object object) {
+    public final boolean equals(@org.jetbrains.annotations.Nullable Object object) {
         if (object == null) {
             return false;
         }
@@ -1309,7 +1311,7 @@ class CraftMetaItem implements ItemMeta, Damageable, Repairable, BlockDataMeta {
      * Checking your own internals is redundant if you are not common, as notUncommon is meant for checking those 'not common' variables.
      */
     @Overridden
-    boolean equalsCommon(CraftMetaItem that) {
+    boolean equalsCommon(@NotNull CraftMetaItem that) {
         return ((this.hasDisplayName() ? that.hasDisplayName() && this.displayName.equals(that.displayName) : !that.hasDisplayName()))
                 && (this.hasLocalizedName() ? that.hasLocalizedName() && this.locName.equals(that.locName) : !that.hasLocalizedName())
                 && (this.hasEnchants() ? that.hasEnchants() && this.enchantments.equals(that.enchantments) : !that.hasEnchants())
@@ -1371,7 +1373,7 @@ class CraftMetaItem implements ItemMeta, Damageable, Repairable, BlockDataMeta {
 
     @Overridden
     @Override
-    public CraftMetaItem clone() {
+    public @NotNull CraftMetaItem clone() {
         try {
             CraftMetaItem clone = (CraftMetaItem) super.clone();
             if (this.lore != null) {
@@ -1405,7 +1407,7 @@ class CraftMetaItem implements ItemMeta, Damageable, Repairable, BlockDataMeta {
     }
 
     @Override
-    public final Map<String, Object> serialize() {
+    public final @NotNull Map<String, Object> serialize() {
         ImmutableMap.Builder<String, Object> map = ImmutableMap.builder();
         map.put(SerializableMeta.TYPE_FIELD, SerializableMeta.classMap.get(getClass()));
         this.serialize(map);
@@ -1413,7 +1415,7 @@ class CraftMetaItem implements ItemMeta, Damageable, Repairable, BlockDataMeta {
     }
 
     @Overridden
-    ImmutableMap.Builder<String, Object> serialize(ImmutableMap.Builder<String, Object> builder) {
+    ImmutableMap.Builder<String, Object> serialize(ImmutableMap.@NotNull Builder<String, Object> builder) {
         if (this.hasDisplayName()) {
             builder.put(NAME.BUKKIT, displayName);
         }
@@ -1502,7 +1504,7 @@ class CraftMetaItem implements ItemMeta, Damageable, Repairable, BlockDataMeta {
         return material;
     }
 
-    static void serializeEnchantments(Map<Enchantment, Integer> enchantments, ImmutableMap.Builder<String, Object> builder, ItemMetaKey key) {
+    static void serializeEnchantments(@org.jetbrains.annotations.Nullable Map<Enchantment, Integer> enchantments, ImmutableMap.@NotNull Builder<String, Object> builder, @NotNull ItemMetaKey key) {
         if (enchantments == null || enchantments.isEmpty()) {
             return;
         }
@@ -1515,7 +1517,7 @@ class CraftMetaItem implements ItemMeta, Damageable, Repairable, BlockDataMeta {
         builder.put(key.BUKKIT, enchants.build());
     }
 
-    static void serializeModifiers(Multimap<Attribute, AttributeModifier> modifiers, ImmutableMap.Builder<String, Object> builder, ItemMetaKey key) {
+    static void serializeModifiers(@org.jetbrains.annotations.Nullable Multimap<Attribute, AttributeModifier> modifiers, ImmutableMap.@NotNull Builder<String, Object> builder, @NotNull ItemMetaKey key) {
         if (modifiers == null || modifiers.isEmpty()) {
             return;
         }
@@ -1534,7 +1536,7 @@ class CraftMetaItem implements ItemMeta, Damageable, Repairable, BlockDataMeta {
         builder.put(key.BUKKIT, mods);
     }
 
-    static void safelyAdd(Iterable<?> addFrom, Collection<String> addTo, boolean possiblyJsonInput) {
+    static void safelyAdd(@org.jetbrains.annotations.Nullable Iterable<?> addFrom, @NotNull Collection<String> addTo, boolean possiblyJsonInput) {
         if (addFrom == null) {
             return;
         }
@@ -1563,7 +1565,7 @@ class CraftMetaItem implements ItemMeta, Damageable, Repairable, BlockDataMeta {
         }
     }
 
-    static boolean checkConflictingEnchants(Map<Enchantment, Integer> enchantments, Enchantment ench) {
+    static boolean checkConflictingEnchants(@org.jetbrains.annotations.Nullable Map<Enchantment, Integer> enchantments, @NotNull Enchantment ench) {
         if (enchantments == null || enchantments.isEmpty()) {
             return false;
         }
@@ -1578,7 +1580,7 @@ class CraftMetaItem implements ItemMeta, Damageable, Repairable, BlockDataMeta {
     }
 
     @Override
-    public final String toString() {
+    public final @NotNull String toString() {
         return SerializableMeta.classMap.get(getClass()) + "_META:" + this.serialize(); // TODO: cry
     }
 
@@ -1591,7 +1593,7 @@ class CraftMetaItem implements ItemMeta, Damageable, Repairable, BlockDataMeta {
         this.version = version;
     }
 
-    public static Set<String> getHandledTags() {
+    public static @NotNull Set<String> getHandledTags() {
         synchronized (CraftMetaItem.HANDLED_TAGS) {
             if (CraftMetaItem.HANDLED_TAGS.isEmpty()) {
                 CraftMetaItem.HANDLED_TAGS.addAll(Arrays.asList(
@@ -1676,37 +1678,37 @@ class CraftMetaItem implements ItemMeta, Damageable, Repairable, BlockDataMeta {
     // Paper start - Implement an API for CanPlaceOn and CanDestroy NBT values
     @Override
     @SuppressWarnings("deprecation")
-    public Set<Material> getCanDestroy() {
+    public @NotNull Set<Material> getCanDestroy() {
         return !hasDestroyableKeys() ? Collections.emptySet() : legacyGetMatsFromKeys(this.destroyableKeys);
     }
 
     @Override
     @SuppressWarnings("deprecation")
-    public void setCanDestroy(Set<Material> canDestroy) {
+    public void setCanDestroy(@NotNull Set<Material> canDestroy) {
         Validate.notNull(canDestroy, "Cannot replace with null set!");
         legacyClearAndReplaceKeys(this.destroyableKeys, canDestroy);
     }
 
     @Override
     @SuppressWarnings("deprecation")
-    public Set<Material> getCanPlaceOn() {
+    public @NotNull Set<Material> getCanPlaceOn() {
         return !hasPlaceableKeys() ? Collections.emptySet() : legacyGetMatsFromKeys(this.placeableKeys);
     }
 
     @Override
     @SuppressWarnings("deprecation")
-    public void setCanPlaceOn(Set<Material> canPlaceOn) {
+    public void setCanPlaceOn(@NotNull Set<Material> canPlaceOn) {
         Validate.notNull(canPlaceOn, "Cannot replace with null set!");
         legacyClearAndReplaceKeys(this.placeableKeys, canPlaceOn);
     }
 
     @Override
-    public Set<Namespaced> getDestroyableKeys() {
+    public @NotNull Set<Namespaced> getDestroyableKeys() {
         return !hasDestroyableKeys() ? Collections.emptySet() : Sets.newHashSet(this.destroyableKeys);
     }
 
     @Override
-    public void setDestroyableKeys(Collection<Namespaced> canDestroy) {
+    public void setDestroyableKeys(@NotNull Collection<Namespaced> canDestroy) {
         Validate.notNull(canDestroy, "Cannot replace with null collection!");
         Validate.isTrue(ofAcceptableType(canDestroy), "Can only use NamespacedKey or NamespacedTag objects!");
         this.destroyableKeys.clear();
@@ -1714,12 +1716,12 @@ class CraftMetaItem implements ItemMeta, Damageable, Repairable, BlockDataMeta {
     }
 
     @Override
-    public Set<Namespaced> getPlaceableKeys() {
+    public @NotNull Set<Namespaced> getPlaceableKeys() {
         return !hasPlaceableKeys() ? Collections.emptySet() : Sets.newHashSet(this.placeableKeys);
     }
 
     @Override
-    public void setPlaceableKeys(Collection<Namespaced> canPlaceOn) {
+    public void setPlaceableKeys(@NotNull Collection<Namespaced> canPlaceOn) {
         Validate.notNull(canPlaceOn, "Cannot replace with null collection!");
         Validate.isTrue(ofAcceptableType(canPlaceOn), "Can only use NamespacedKey or NamespacedTag objects!");
         this.placeableKeys.clear();
@@ -1737,7 +1739,7 @@ class CraftMetaItem implements ItemMeta, Damageable, Repairable, BlockDataMeta {
     }
 
     @Deprecated
-    private void legacyClearAndReplaceKeys(Collection<Namespaced> toUpdate, Collection<Material> beingSet) {
+    private void legacyClearAndReplaceKeys(@NotNull Collection<Namespaced> toUpdate, @NotNull Collection<Material> beingSet) {
         if (beingSet.stream().anyMatch(Material::isLegacy)) {
             throw new IllegalArgumentException("Set must not contain any legacy materials!");
         }
@@ -1747,7 +1749,7 @@ class CraftMetaItem implements ItemMeta, Damageable, Repairable, BlockDataMeta {
     }
 
     @Deprecated
-    private Set<Material> legacyGetMatsFromKeys(Collection<Namespaced> names) {
+    private @NotNull Set<Material> legacyGetMatsFromKeys(@NotNull Collection<Namespaced> names) {
         Set<Material> mats = Sets.newHashSet();
         for (Namespaced key : names) {
             if (!(key instanceof org.bukkit.NamespacedKey)) {
@@ -1763,7 +1765,7 @@ class CraftMetaItem implements ItemMeta, Damageable, Repairable, BlockDataMeta {
         return mats;
     }
 
-    private @Nullable Namespaced deserializeNamespaced(String raw) {
+    private @Nullable Namespaced deserializeNamespaced(@NotNull String raw) {
         boolean isTag = raw.length() > 0 && raw.codePointAt(0) == '#';
         com.mojang.datafixers.util.Either<net.minecraft.commands.arguments.blocks.BlockStateParser.BlockResult, net.minecraft.commands.arguments.blocks.BlockStateParser.TagResult> result;
         try {
@@ -1799,12 +1801,12 @@ class CraftMetaItem implements ItemMeta, Damageable, Repairable, BlockDataMeta {
         return resource;
     }
 
-    private @Nonnull String serializeNamespaced(Namespaced resource) {
+    private @Nonnull String serializeNamespaced(@NotNull Namespaced resource) {
         return resource.toString();
     }
 
     // not a fan of this
-    private boolean ofAcceptableType(Collection<Namespaced> namespacedResources) {
+    private boolean ofAcceptableType(@NotNull Collection<Namespaced> namespacedResources) {
         
         for (Namespaced resource : namespacedResources) {
             if (!(resource instanceof org.bukkit.NamespacedKey || resource instanceof com.destroystokyo.paper.NamespacedTag)) {
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaKnowledgeBook.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaKnowledgeBook.java
index 50fdb086ffec84edc5138737c95f08ed4757a6f3..942c2a7fa6f97c2fb93e8869d002fe1af3637dab 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaKnowledgeBook.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaKnowledgeBook.java
@@ -14,6 +14,8 @@ import org.bukkit.configuration.serialization.DelegateDeserialization;
 import org.bukkit.craftbukkit.inventory.CraftMetaItem.SerializableMeta;
 import org.bukkit.craftbukkit.util.CraftNamespacedKey;
 import org.bukkit.inventory.meta.KnowledgeBookMeta;
+import org.jetbrains.annotations.NotNull;
+
 
 @DelegateDeserialization(SerializableMeta.class)
 public class CraftMetaKnowledgeBook extends CraftMetaItem implements KnowledgeBookMeta {
@@ -21,7 +23,7 @@ public class CraftMetaKnowledgeBook extends CraftMetaItem implements KnowledgeBo
     static final ItemMetaKey BOOK_RECIPES = new ItemMetaKey("Recipes");
     static final int MAX_RECIPES = Short.MAX_VALUE;
 
-    protected List<NamespacedKey> recipes = new ArrayList<NamespacedKey>();
+    protected @NotNull List<NamespacedKey> recipes = new ArrayList<NamespacedKey>();
 
     CraftMetaKnowledgeBook(CraftMetaItem meta) {
         super(meta);
@@ -32,7 +34,7 @@ public class CraftMetaKnowledgeBook extends CraftMetaItem implements KnowledgeBo
         }
     }
 
-    CraftMetaKnowledgeBook(CompoundTag tag) {
+    CraftMetaKnowledgeBook(@NotNull CompoundTag tag) {
         super(tag);
 
         if (tag.contains(BOOK_RECIPES.NBT)) {
@@ -46,7 +48,7 @@ public class CraftMetaKnowledgeBook extends CraftMetaItem implements KnowledgeBo
         }
     }
 
-    CraftMetaKnowledgeBook(Map<String, Object> map) {
+    CraftMetaKnowledgeBook(@NotNull Map<String, Object> map) {
         super(map);
 
         Iterable<?> pages = SerializableMeta.getObject(Iterable.class, map, BOOK_RECIPES.BUKKIT, true);
@@ -60,7 +62,7 @@ public class CraftMetaKnowledgeBook extends CraftMetaItem implements KnowledgeBo
     }
 
     @Override
-    void applyToItem(CompoundTag itemData) {
+    void applyToItem(@NotNull CompoundTag itemData) {
         super.applyToItem(itemData);
 
         if (this.hasRecipes()) {
@@ -92,7 +94,7 @@ public class CraftMetaKnowledgeBook extends CraftMetaItem implements KnowledgeBo
     }
 
     @Override
-    public void addRecipe(NamespacedKey... recipes) {
+    public void addRecipe(NamespacedKey @NotNull ... recipes) {
         for (NamespacedKey recipe : recipes) {
             if (recipe != null) {
                 if (this.recipes.size() >= CraftMetaKnowledgeBook.MAX_RECIPES) {
@@ -105,12 +107,12 @@ public class CraftMetaKnowledgeBook extends CraftMetaItem implements KnowledgeBo
     }
 
     @Override
-    public List<NamespacedKey> getRecipes() {
+    public @NotNull List<NamespacedKey> getRecipes() {
         return Collections.unmodifiableList(recipes);
     }
 
     @Override
-    public void setRecipes(List<NamespacedKey> recipes) {
+    public void setRecipes(@NotNull List<NamespacedKey> recipes) {
         this.recipes.clear();
         for (NamespacedKey recipe : recipes) {
             this.addRecipe(recipe);
@@ -118,7 +120,7 @@ public class CraftMetaKnowledgeBook extends CraftMetaItem implements KnowledgeBo
     }
 
     @Override
-    public CraftMetaKnowledgeBook clone() {
+    public @NotNull CraftMetaKnowledgeBook clone() {
         CraftMetaKnowledgeBook meta = (CraftMetaKnowledgeBook) super.clone();
         meta.recipes = new ArrayList<NamespacedKey>(this.recipes);
         return meta;
@@ -135,7 +137,7 @@ public class CraftMetaKnowledgeBook extends CraftMetaItem implements KnowledgeBo
     }
 
     @Override
-    boolean equalsCommon(CraftMetaItem meta) {
+    boolean equalsCommon(@NotNull CraftMetaItem meta) {
         if (!super.equalsCommon(meta)) {
             return false;
         }
@@ -153,7 +155,7 @@ public class CraftMetaKnowledgeBook extends CraftMetaItem implements KnowledgeBo
     }
 
     @Override
-    Builder<String, Object> serialize(Builder<String, Object> builder) {
+    Builder<String, Object> serialize(@NotNull Builder<String, Object> builder) {
         super.serialize(builder);
 
         if (this.hasRecipes()) {
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaLeatherArmor.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaLeatherArmor.java
index 0418908806cdf097c65041fc857a212b66e67e2b..957dec667f5d31995e564abddf5fdecbcb854c4a 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaLeatherArmor.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaLeatherArmor.java
@@ -12,6 +12,9 @@ import org.bukkit.Material;
 import org.bukkit.configuration.serialization.DelegateDeserialization;
 import org.bukkit.craftbukkit.inventory.CraftMetaItem.SerializableMeta;
 import org.bukkit.inventory.meta.LeatherArmorMeta;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 @DelegateDeserialization(SerializableMeta.class)
 class CraftMetaLeatherArmor extends CraftMetaItem implements LeatherArmorMeta {
@@ -38,7 +41,7 @@ class CraftMetaLeatherArmor extends CraftMetaItem implements LeatherArmorMeta {
         this.color = armorMeta.color;
     }
 
-    CraftMetaLeatherArmor(CompoundTag tag) {
+    CraftMetaLeatherArmor(@NotNull CompoundTag tag) {
         super(tag);
         if (tag.contains(DISPLAY.NBT)) {
             CompoundTag display = tag.getCompound(DISPLAY.NBT);
@@ -52,13 +55,13 @@ class CraftMetaLeatherArmor extends CraftMetaItem implements LeatherArmorMeta {
         }
     }
 
-    CraftMetaLeatherArmor(Map<String, Object> map) {
+    CraftMetaLeatherArmor(@NotNull Map<String, Object> map) {
         super(map);
         this.setColor(SerializableMeta.getObject(Color.class, map, COLOR.BUKKIT, true));
     }
 
     @Override
-    void applyToItem(CompoundTag itemTag) {
+    void applyToItem(@NotNull CompoundTag itemTag) {
         super.applyToItem(itemTag);
 
         if (this.hasColor()) {
@@ -81,17 +84,17 @@ class CraftMetaLeatherArmor extends CraftMetaItem implements LeatherArmorMeta {
     }
 
     @Override
-    public CraftMetaLeatherArmor clone() {
+    public @NotNull CraftMetaLeatherArmor clone() {
         return (CraftMetaLeatherArmor) super.clone();
     }
 
     @Override
-    public Color getColor() {
+    public @NotNull Color getColor() {
         return this.color;
     }
 
     @Override
-    public void setColor(Color color) {
+    public void setColor(@Nullable Color color) {
         this.color = color == null ? DEFAULT_LEATHER_COLOR : color;
     }
 
@@ -100,7 +103,7 @@ class CraftMetaLeatherArmor extends CraftMetaItem implements LeatherArmorMeta {
     }
 
     @Override
-    Builder<String, Object> serialize(Builder<String, Object> builder) {
+    Builder<String, Object> serialize(@NotNull Builder<String, Object> builder) {
         super.serialize(builder);
 
         if (this.hasColor()) {
@@ -111,7 +114,7 @@ class CraftMetaLeatherArmor extends CraftMetaItem implements LeatherArmorMeta {
     }
 
     @Override
-    boolean equalsCommon(CraftMetaItem meta) {
+    boolean equalsCommon(@NotNull CraftMetaItem meta) {
         if (!super.equalsCommon(meta)) {
             return false;
         }
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaMap.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaMap.java
index e802623e2ef5fb8c423429335ee7dbabc45a1b74..685fb0cf37601a114ca4cbe67e5cc6ecaa9416af 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaMap.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaMap.java
@@ -14,6 +14,9 @@ import org.bukkit.craftbukkit.inventory.CraftMetaItem.SerializableMeta;
 import org.bukkit.craftbukkit.util.CraftMagicNumbers;
 import org.bukkit.inventory.meta.MapMeta;
 import org.bukkit.map.MapView;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 @DelegateDeserialization(SerializableMeta.class)
 class CraftMetaMap extends CraftMetaItem implements MapMeta {
@@ -44,7 +47,7 @@ class CraftMetaMap extends CraftMetaItem implements MapMeta {
         this.color = map.color;
     }
 
-    CraftMetaMap(CompoundTag tag) {
+    CraftMetaMap(@NotNull CompoundTag tag) {
         super(tag);
 
         if (tag.contains(MAP_ID.NBT, CraftMagicNumbers.NBT.TAG_ANY_NUMBER)) {
@@ -72,7 +75,7 @@ class CraftMetaMap extends CraftMetaItem implements MapMeta {
         }
     }
 
-    CraftMetaMap(Map<String, Object> map) {
+    CraftMetaMap(@NotNull Map<String, Object> map) {
         super(map);
 
         Integer id = SerializableMeta.getObject(Integer.class, map, MAP_ID.BUKKIT, true);
@@ -97,7 +100,7 @@ class CraftMetaMap extends CraftMetaItem implements MapMeta {
     }
 
     @Override
-    void applyToItem(CompoundTag tag) {
+    void applyToItem(@NotNull CompoundTag tag) {
         super.applyToItem(tag);
 
         if (this.hasMapId()) {
@@ -159,7 +162,7 @@ class CraftMetaMap extends CraftMetaItem implements MapMeta {
     }
 
     @Override
-    public void setMapView(MapView map) {
+    public void setMapView(@Nullable MapView map) {
         this.mapId = (map != null) ? map.getId() : null;
     }
 
@@ -251,12 +254,12 @@ class CraftMetaMap extends CraftMetaItem implements MapMeta {
 
 
     @Override
-    public CraftMetaMap clone() {
+    public @NotNull CraftMetaMap clone() {
         return (CraftMetaMap) super.clone();
     }
 
     @Override
-    ImmutableMap.Builder<String, Object> serialize(ImmutableMap.Builder<String, Object> builder) {
+    ImmutableMap.Builder<String, Object> serialize(ImmutableMap.@NotNull Builder<String, Object> builder) {
         super.serialize(builder);
 
         if (this.hasMapId()) {
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaPotion.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaPotion.java
index 298326115f048bb79e3c949861c187134eb5efb8..40c2f0d6e5f2b853da3d39afef7f56c7bc70ae06 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaPotion.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaPotion.java
@@ -22,6 +22,9 @@ import org.bukkit.potion.PotionData;
 import org.bukkit.potion.PotionEffect;
 import org.bukkit.potion.PotionEffectType;
 import org.bukkit.potion.PotionType;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 @DelegateDeserialization(SerializableMeta.class)
 class CraftMetaPotion extends CraftMetaItem implements PotionMeta {
@@ -46,7 +49,7 @@ class CraftMetaPotion extends CraftMetaItem implements PotionMeta {
     // Having an initial "state" in ItemMeta seems bit dirty but the UNCRAFTABLE potion type
     // is treated as the empty form of the meta because it represents an empty potion with no effect
     private PotionData type = new PotionData(PotionType.UNCRAFTABLE, false, false);
-    private List<PotionEffect> customEffects;
+    private @Nullable List<PotionEffect> customEffects;
     private Color color;
 
     CraftMetaPotion(CraftMetaItem meta) {
@@ -62,7 +65,7 @@ class CraftMetaPotion extends CraftMetaItem implements PotionMeta {
         }
     }
 
-    CraftMetaPotion(CompoundTag tag) {
+    CraftMetaPotion(@NotNull CompoundTag tag) {
         super(tag);
         if (tag.contains(DEFAULT_POTION.NBT)) {
             this.type = CraftPotionUtil.toBukkit(tag.getString(DEFAULT_POTION.NBT));
@@ -97,7 +100,7 @@ class CraftMetaPotion extends CraftMetaItem implements PotionMeta {
         }
     }
 
-    CraftMetaPotion(Map<String, Object> map) {
+    CraftMetaPotion(@NotNull Map<String, Object> map) {
         super(map);
         this.type = CraftPotionUtil.toBukkit(SerializableMeta.getString(map, DEFAULT_POTION.BUKKIT, true));
 
@@ -120,7 +123,7 @@ class CraftMetaPotion extends CraftMetaItem implements PotionMeta {
     }
 
     @Override
-    void applyToItem(CompoundTag tag) {
+    void applyToItem(@NotNull CompoundTag tag) {
         super.applyToItem(tag);
 
         tag.putString(DEFAULT_POTION.NBT, CraftPotionUtil.fromBukkit(type));
@@ -161,7 +164,7 @@ class CraftMetaPotion extends CraftMetaItem implements PotionMeta {
     }
 
     @Override
-    public CraftMetaPotion clone() {
+    public @NotNull CraftMetaPotion clone() {
         CraftMetaPotion clone = (CraftMetaPotion) super.clone();
         clone.type = this.type;
         if (this.customEffects != null) {
@@ -177,7 +180,7 @@ class CraftMetaPotion extends CraftMetaItem implements PotionMeta {
     }
 
     @Override
-    public PotionData getBasePotionData() {
+    public @NotNull PotionData getBasePotionData() {
         return this.type;
     }
 
@@ -187,7 +190,7 @@ class CraftMetaPotion extends CraftMetaItem implements PotionMeta {
     }
 
     @Override
-    public List<PotionEffect> getCustomEffects() {
+    public @NotNull List<PotionEffect> getCustomEffects() {
         if (this.hasCustomEffects()) {
             return ImmutableList.copyOf(customEffects);
         }
@@ -195,7 +198,7 @@ class CraftMetaPotion extends CraftMetaItem implements PotionMeta {
     }
 
     @Override
-    public boolean addCustomEffect(PotionEffect effect, boolean overwrite) {
+    public boolean addCustomEffect(@NotNull PotionEffect effect, boolean overwrite) {
         Validate.notNull(effect, "Potion effect must not be null");
 
         int index = this.indexOfEffect(effect.getType());
@@ -220,7 +223,7 @@ class CraftMetaPotion extends CraftMetaItem implements PotionMeta {
     }
 
     @Override
-    public boolean removeCustomEffect(PotionEffectType type) {
+    public boolean removeCustomEffect(@NotNull PotionEffectType type) {
         Validate.notNull(type, "Potion effect type must not be null");
 
         if (!this.hasCustomEffects()) {
@@ -314,7 +317,7 @@ class CraftMetaPotion extends CraftMetaItem implements PotionMeta {
     }
 
     @Override
-    public boolean equalsCommon(CraftMetaItem meta) {
+    public boolean equalsCommon(@NotNull CraftMetaItem meta) {
         if (!super.equalsCommon(meta)) {
             return false;
         }
@@ -334,7 +337,7 @@ class CraftMetaPotion extends CraftMetaItem implements PotionMeta {
     }
 
     @Override
-    Builder<String, Object> serialize(Builder<String, Object> builder) {
+    Builder<String, Object> serialize(@NotNull Builder<String, Object> builder) {
         super.serialize(builder);
         if (this.type.getType() != PotionType.UNCRAFTABLE) {
             builder.put(DEFAULT_POTION.BUKKIT, CraftPotionUtil.fromBukkit(type));
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaSkull.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaSkull.java
index deed77a3d44bc55681483d7f47f148b5220135f2..d50634d122079653b91f85b0c3226fc37e63d5d3 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaSkull.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaSkull.java
@@ -23,6 +23,9 @@ import org.bukkit.craftbukkit.util.CraftMagicNumbers;
 import org.bukkit.craftbukkit.util.CraftNamespacedKey;
 import org.bukkit.inventory.meta.SkullMeta;
 import org.bukkit.profile.PlayerProfile;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 @DelegateDeserialization(SerializableMeta.class)
 class CraftMetaSkull extends CraftMetaItem implements SkullMeta {
@@ -55,7 +58,7 @@ class CraftMetaSkull extends CraftMetaItem implements SkullMeta {
     static final int MAX_OWNER_LENGTH = 16;
 
     private GameProfile profile;
-    private CompoundTag serializedProfile;
+    private @Nullable CompoundTag serializedProfile;
     private ResourceLocation noteBlockSound;
 
     CraftMetaSkull(CraftMetaItem meta) {
@@ -68,7 +71,7 @@ class CraftMetaSkull extends CraftMetaItem implements SkullMeta {
         this.noteBlockSound = skullMeta.noteBlockSound;
     }
 
-    CraftMetaSkull(CompoundTag tag) {
+    CraftMetaSkull(@NotNull CompoundTag tag) {
         super(tag);
 
         if (tag.contains(SKULL_OWNER.NBT, CraftMagicNumbers.NBT.TAG_COMPOUND)) {
@@ -85,7 +88,7 @@ class CraftMetaSkull extends CraftMetaItem implements SkullMeta {
         }
     }
 
-    CraftMetaSkull(Map<String, Object> map) {
+    CraftMetaSkull(@NotNull Map<String, Object> map) {
         super(map);
         if (this.profile == null) {
             Object object = map.get(SKULL_OWNER.BUKKIT);
@@ -107,7 +110,7 @@ class CraftMetaSkull extends CraftMetaItem implements SkullMeta {
     }
 
     @Override
-    void deserializeInternal(CompoundTag tag, Object context) {
+    void deserializeInternal(@NotNull CompoundTag tag, Object context) {
         super.deserializeInternal(tag, context);
 
         if (tag.contains(SKULL_PROFILE.NBT, CraftMagicNumbers.NBT.TAG_COMPOUND)) {
@@ -129,13 +132,13 @@ class CraftMetaSkull extends CraftMetaItem implements SkullMeta {
         }
     }
 
-    private void setProfile(GameProfile profile) {
+    private void setProfile(@Nullable GameProfile profile) {
         this.profile = profile;
         this.serializedProfile = (profile == null) ? null : NbtUtils.writeGameProfile(new CompoundTag(), profile);
     }
 
     @Override
-    void applyToItem(CompoundTag tag) {
+    void applyToItem(@NotNull CompoundTag tag) {
         super.applyToItem(tag);
 
         if (this.profile != null) {
@@ -170,7 +173,7 @@ class CraftMetaSkull extends CraftMetaItem implements SkullMeta {
     }
 
     @Override
-    public CraftMetaSkull clone() {
+    public @NotNull CraftMetaSkull clone() {
         return (CraftMetaSkull) super.clone();
     }
 
@@ -213,7 +216,7 @@ class CraftMetaSkull extends CraftMetaItem implements SkullMeta {
     }
 
     @Override
-    public boolean setOwner(String name) {
+    public boolean setOwner(@Nullable String name) {
         if (name != null && name.length() > CraftMetaSkull.MAX_OWNER_LENGTH) {
             return false;
         }
@@ -234,7 +237,7 @@ class CraftMetaSkull extends CraftMetaItem implements SkullMeta {
     }
 
     @Override
-    public boolean setOwningPlayer(OfflinePlayer owner) {
+    public boolean setOwningPlayer(@Nullable OfflinePlayer owner) {
         if (owner == null) {
             this.setProfile(null);
         } else if (owner instanceof CraftPlayer) {
@@ -258,7 +261,7 @@ class CraftMetaSkull extends CraftMetaItem implements SkullMeta {
 
     @Override
     @Deprecated // Paper
-    public void setOwnerProfile(PlayerProfile profile) {
+    public void setOwnerProfile(@Nullable PlayerProfile profile) {
         if (profile == null) {
             this.setProfile(null);
         } else {
@@ -294,7 +297,7 @@ class CraftMetaSkull extends CraftMetaItem implements SkullMeta {
     }
 
     @Override
-    boolean equalsCommon(CraftMetaItem meta) {
+    boolean equalsCommon(@NotNull CraftMetaItem meta) {
         if (!super.equalsCommon(meta)) {
             return false;
         }
@@ -313,7 +316,7 @@ class CraftMetaSkull extends CraftMetaItem implements SkullMeta {
     }
 
     @Override
-    Builder<String, Object> serialize(Builder<String, Object> builder) {
+    Builder<String, Object> serialize(@NotNull Builder<String, Object> builder) {
         super.serialize(builder);
         if (this.profile != null) {
             return builder.put(SKULL_OWNER.BUKKIT, new com.destroystokyo.paper.profile.CraftPlayerProfile(this.profile)); // Paper
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaSpawnEgg.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaSpawnEgg.java
index 8c5eeb83eeb7b77f8927d70244d23d37288e5156..c6ff72c40f9b88870c7f53a710a9b14152b0717d 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaSpawnEgg.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaSpawnEgg.java
@@ -13,6 +13,9 @@ import org.bukkit.craftbukkit.util.CraftLegacy;
 import org.bukkit.entity.EntityType;
 import org.bukkit.inventory.meta.SpawnEggMeta;
 import org.bukkit.material.MaterialData;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 @DelegateDeserialization(CraftMetaItem.SerializableMeta.class)
 public class CraftMetaSpawnEgg extends CraftMetaItem implements SpawnEggMeta {
@@ -100,7 +103,7 @@ public class CraftMetaSpawnEgg extends CraftMetaItem implements SpawnEggMeta {
     @ItemMetaKey.Specific(ItemMetaKey.Specific.To.NBT)
     static final ItemMetaKey ENTITY_ID = new ItemMetaKey("id");
 
-    private EntityType spawnedType;
+    private @Nullable EntityType spawnedType;
     private CompoundTag entityTag;
 
     CraftMetaSpawnEgg(CraftMetaItem meta) {
@@ -115,7 +118,7 @@ public class CraftMetaSpawnEgg extends CraftMetaItem implements SpawnEggMeta {
         this.updateMaterial(null); // Trigger type population
     }
 
-    CraftMetaSpawnEgg(CompoundTag tag) {
+    CraftMetaSpawnEgg(@NotNull CompoundTag tag) {
         super(tag);
 
         if (tag.contains(ENTITY_TAG.NBT)) {
@@ -123,7 +126,7 @@ public class CraftMetaSpawnEgg extends CraftMetaItem implements SpawnEggMeta {
         }
     }
 
-    CraftMetaSpawnEgg(Map<String, Object> map) {
+    CraftMetaSpawnEgg(@NotNull Map<String, Object> map) {
         super(map);
 
         String entityType = SerializableMeta.getString(map, ENTITY_ID.BUKKIT, true);
@@ -133,7 +136,7 @@ public class CraftMetaSpawnEgg extends CraftMetaItem implements SpawnEggMeta {
     }
 
     @Override
-    void deserializeInternal(CompoundTag tag, Object context) {
+    void deserializeInternal(@NotNull CompoundTag tag, Object context) {
         super.deserializeInternal(tag, context);
 
         if (tag.contains(ENTITY_TAG.NBT)) {
@@ -168,14 +171,14 @@ public class CraftMetaSpawnEgg extends CraftMetaItem implements SpawnEggMeta {
     }
 
     @Override
-    void serializeInternal(Map<String, Tag> internalTags) {
+    void serializeInternal(@NotNull Map<String, Tag> internalTags) {
         if (this.entityTag != null && !this.entityTag.isEmpty()) {
             internalTags.put(ENTITY_TAG.NBT, entityTag);
         }
     }
 
     @Override
-    void applyToItem(CompoundTag tag) {
+    void applyToItem(@NotNull CompoundTag tag) {
         super.applyToItem(tag);
 
         if (!this.isSpawnEggEmpty() && this.entityTag == null) {
@@ -216,7 +219,7 @@ public class CraftMetaSpawnEgg extends CraftMetaItem implements SpawnEggMeta {
     }
 
     @Override
-    boolean equalsCommon(CraftMetaItem meta) {
+    boolean equalsCommon(@NotNull CraftMetaItem meta) {
         if (!super.equalsCommon(meta)) {
             return false;
         }
@@ -250,14 +253,14 @@ public class CraftMetaSpawnEgg extends CraftMetaItem implements SpawnEggMeta {
     }
 
     @Override
-    Builder<String, Object> serialize(Builder<String, Object> builder) {
+    Builder<String, Object> serialize(@NotNull Builder<String, Object> builder) {
         super.serialize(builder);
 
         return builder;
     }
 
     @Override
-    public CraftMetaSpawnEgg clone() {
+    public @NotNull CraftMetaSpawnEgg clone() {
         CraftMetaSpawnEgg clone = (CraftMetaSpawnEgg) super.clone();
 
         clone.spawnedType = this.spawnedType;
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaSuspiciousStew.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaSuspiciousStew.java
index 875aa050eafbc2972441994f624c221b13a48a45..fe61d224f8289a927896b1794ba423dd71d03b8b 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaSuspiciousStew.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaSuspiciousStew.java
@@ -17,6 +17,9 @@ import org.bukkit.craftbukkit.util.CraftMagicNumbers;
 import org.bukkit.inventory.meta.SuspiciousStewMeta;
 import org.bukkit.potion.PotionEffect;
 import org.bukkit.potion.PotionEffectType;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 @DelegateDeserialization(CraftMetaItem.SerializableMeta.class)
 public class CraftMetaSuspiciousStew extends CraftMetaItem implements SuspiciousStewMeta {
@@ -25,7 +28,7 @@ public class CraftMetaSuspiciousStew extends CraftMetaItem implements Suspicious
     static final ItemMetaKey EFFECTS = new ItemMetaKey("Effects", "effects");
     static final ItemMetaKey ID = new ItemMetaKey("EffectId", "id");
 
-    private List<PotionEffect> customEffects;
+    private @Nullable List<PotionEffect> customEffects;
 
     CraftMetaSuspiciousStew(CraftMetaItem meta) {
         super(meta);
@@ -38,7 +41,7 @@ public class CraftMetaSuspiciousStew extends CraftMetaItem implements Suspicious
         }
     }
 
-    CraftMetaSuspiciousStew(CompoundTag tag) {
+    CraftMetaSuspiciousStew(@NotNull CompoundTag tag) {
         super(tag);
         if (tag.contains(EFFECTS.NBT)) {
             ListTag list = tag.getList(EFFECTS.NBT, CraftMagicNumbers.NBT.TAG_COMPOUND);
@@ -57,7 +60,7 @@ public class CraftMetaSuspiciousStew extends CraftMetaItem implements Suspicious
         }
     }
 
-    CraftMetaSuspiciousStew(Map<String, Object> map) {
+    CraftMetaSuspiciousStew(@NotNull Map<String, Object> map) {
         super(map);
 
         Iterable<?> rawEffectList = SerializableMeta.getObject(Iterable.class, map, EFFECTS.BUKKIT, true);
@@ -74,7 +77,7 @@ public class CraftMetaSuspiciousStew extends CraftMetaItem implements Suspicious
     }
 
     @Override
-    void applyToItem(CompoundTag tag) {
+    void applyToItem(@NotNull CompoundTag tag) {
         super.applyToItem(tag);
 
         if (this.customEffects != null) {
@@ -105,7 +108,7 @@ public class CraftMetaSuspiciousStew extends CraftMetaItem implements Suspicious
     }
 
     @Override
-    public CraftMetaSuspiciousStew clone() {
+    public @NotNull CraftMetaSuspiciousStew clone() {
         CraftMetaSuspiciousStew clone = ((CraftMetaSuspiciousStew) super.clone());
         if (this.customEffects != null) {
             clone.customEffects = new ArrayList<PotionEffect>(this.customEffects);
@@ -119,7 +122,7 @@ public class CraftMetaSuspiciousStew extends CraftMetaItem implements Suspicious
     }
 
     @Override
-    public List<PotionEffect> getCustomEffects() {
+    public @NotNull List<PotionEffect> getCustomEffects() {
         if (this.hasCustomEffects()) {
             return ImmutableList.copyOf(customEffects);
         }
@@ -127,7 +130,7 @@ public class CraftMetaSuspiciousStew extends CraftMetaItem implements Suspicious
     }
 
     @Override
-    public boolean addCustomEffect(PotionEffect effect, boolean overwrite) {
+    public boolean addCustomEffect(@NotNull PotionEffect effect, boolean overwrite) {
         Validate.notNull(effect, "Potion effect must not be null");
 
         int index = this.indexOfEffect(effect.getType());
@@ -152,7 +155,7 @@ public class CraftMetaSuspiciousStew extends CraftMetaItem implements Suspicious
     }
 
     @Override
-    public boolean removeCustomEffect(PotionEffectType type) {
+    public boolean removeCustomEffect(@NotNull PotionEffectType type) {
         Validate.notNull(type, "Potion effect type must not be null");
 
         if (!this.hasCustomEffects()) {
@@ -211,7 +214,7 @@ public class CraftMetaSuspiciousStew extends CraftMetaItem implements Suspicious
     }
 
     @Override
-    boolean equalsCommon(CraftMetaItem meta) {
+    boolean equalsCommon(@NotNull CraftMetaItem meta) {
         if (!super.equalsCommon(meta)) {
             return false;
         }
@@ -229,7 +232,7 @@ public class CraftMetaSuspiciousStew extends CraftMetaItem implements Suspicious
     }
 
     @Override
-    Builder<String, Object> serialize(Builder<String, Object> builder) {
+    Builder<String, Object> serialize(@NotNull Builder<String, Object> builder) {
         super.serialize(builder);
 
         if (this.hasCustomEffects()) {
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaTropicalFishBucket.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaTropicalFishBucket.java
index 9a045a7793ec20334853a0e1c3529b31899214b3..00aec048d6ebab8b871ceaca401d7e9867ad42c4 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaTropicalFishBucket.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaTropicalFishBucket.java
@@ -12,6 +12,8 @@ import org.bukkit.craftbukkit.inventory.CraftMetaItem.SerializableMeta;
 import org.bukkit.craftbukkit.util.CraftMagicNumbers;
 import org.bukkit.entity.TropicalFish;
 import org.bukkit.inventory.meta.TropicalFishBucketMeta;
+import org.jetbrains.annotations.NotNull;
+
 
 @DelegateDeserialization(SerializableMeta.class)
 class CraftMetaTropicalFishBucket extends CraftMetaItem implements TropicalFishBucketMeta {
@@ -33,7 +35,7 @@ class CraftMetaTropicalFishBucket extends CraftMetaItem implements TropicalFishB
         this.entityTag = bucket.entityTag;
     }
 
-    CraftMetaTropicalFishBucket(CompoundTag tag) {
+    CraftMetaTropicalFishBucket(@NotNull CompoundTag tag) {
         super(tag);
 
         if (tag.contains(VARIANT.NBT, CraftMagicNumbers.NBT.TAG_INT)) {
@@ -45,7 +47,7 @@ class CraftMetaTropicalFishBucket extends CraftMetaItem implements TropicalFishB
         }
     }
 
-    CraftMetaTropicalFishBucket(Map<String, Object> map) {
+    CraftMetaTropicalFishBucket(@NotNull Map<String, Object> map) {
         super(map);
 
         Integer variant = SerializableMeta.getObject(Integer.class, map, VARIANT.BUKKIT, true);
@@ -55,7 +57,7 @@ class CraftMetaTropicalFishBucket extends CraftMetaItem implements TropicalFishB
     }
 
     @Override
-    void deserializeInternal(CompoundTag tag, Object context) {
+    void deserializeInternal(@NotNull CompoundTag tag, Object context) {
         super.deserializeInternal(tag, context);
 
         if (tag.contains(ENTITY_TAG.NBT)) {
@@ -64,14 +66,14 @@ class CraftMetaTropicalFishBucket extends CraftMetaItem implements TropicalFishB
     }
 
     @Override
-    void serializeInternal(Map<String, Tag> internalTags) {
+    void serializeInternal(@NotNull Map<String, Tag> internalTags) {
         if (this.entityTag != null && !this.entityTag.isEmpty()) {
             internalTags.put(ENTITY_TAG.NBT, entityTag);
         }
     }
 
     @Override
-    void applyToItem(CompoundTag tag) {
+    void applyToItem(@NotNull CompoundTag tag) {
         super.applyToItem(tag);
 
         if (this.hasVariant()) {
@@ -98,12 +100,12 @@ class CraftMetaTropicalFishBucket extends CraftMetaItem implements TropicalFishB
     }
 
     @Override
-    public DyeColor getPatternColor() {
+    public @NotNull DyeColor getPatternColor() {
         return CraftTropicalFish.getPatternColor(variant);
     }
 
     @Override
-    public void setPatternColor(DyeColor color) {
+    public void setPatternColor(@NotNull DyeColor color) {
         if (this.variant == null) {
             this.variant = 0;
         }
@@ -111,12 +113,12 @@ class CraftMetaTropicalFishBucket extends CraftMetaItem implements TropicalFishB
     }
 
     @Override
-    public DyeColor getBodyColor() {
+    public @NotNull DyeColor getBodyColor() {
         return CraftTropicalFish.getBodyColor(variant);
     }
 
     @Override
-    public void setBodyColor(DyeColor color) {
+    public void setBodyColor(@NotNull DyeColor color) {
         if (this.variant == null) {
             this.variant = 0;
         }
@@ -124,12 +126,12 @@ class CraftMetaTropicalFishBucket extends CraftMetaItem implements TropicalFishB
     }
 
     @Override
-    public TropicalFish.Pattern getPattern() {
+    public TropicalFish.@NotNull Pattern getPattern() {
         return CraftTropicalFish.getPattern(variant);
     }
 
     @Override
-    public void setPattern(TropicalFish.Pattern pattern) {
+    public void setPattern(TropicalFish.@NotNull Pattern pattern) {
         if (this.variant == null) {
             this.variant = 0;
         }
@@ -142,7 +144,7 @@ class CraftMetaTropicalFishBucket extends CraftMetaItem implements TropicalFishB
     }
 
     @Override
-    boolean equalsCommon(CraftMetaItem meta) {
+    boolean equalsCommon(@NotNull CraftMetaItem meta) {
         if (!super.equalsCommon(meta)) {
             return false;
         }
@@ -177,7 +179,7 @@ class CraftMetaTropicalFishBucket extends CraftMetaItem implements TropicalFishB
 
 
     @Override
-    public CraftMetaTropicalFishBucket clone() {
+    public @NotNull CraftMetaTropicalFishBucket clone() {
         CraftMetaTropicalFishBucket clone = (CraftMetaTropicalFishBucket) super.clone();
 
         if (this.entityTag != null) {
@@ -188,7 +190,7 @@ class CraftMetaTropicalFishBucket extends CraftMetaItem implements TropicalFishB
     }
 
     @Override
-    ImmutableMap.Builder<String, Object> serialize(ImmutableMap.Builder<String, Object> builder) {
+    ImmutableMap.Builder<String, Object> serialize(ImmutableMap.@NotNull Builder<String, Object> builder) {
         super.serialize(builder);
 
         if (this.hasVariant()) {
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftRecipe.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftRecipe.java
index 8563fcf77eef0e1e354857b9a4256d78a523a8d0..150b53a7fc012cd17baa279675ebc04e226258f0 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftRecipe.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftRecipe.java
@@ -7,6 +7,9 @@ import org.bukkit.craftbukkit.util.CraftMagicNumbers;
 import org.bukkit.inventory.ItemStack;
 import org.bukkit.inventory.Recipe;
 import org.bukkit.inventory.RecipeChoice;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 import org.bukkit.inventory.recipe.CookingBookCategory;
 import org.bukkit.inventory.recipe.CraftingBookCategory;
 
@@ -14,11 +17,11 @@ public interface CraftRecipe extends Recipe {
 
     void addToCraftingManager();
 
-    default Ingredient toNMS(RecipeChoice bukkit, boolean requireNotEmpty) {
+    default @NotNull Ingredient toNMS(RecipeChoice bukkit, boolean requireNotEmpty) {
         // Paper start
         return toIngredient(bukkit, requireNotEmpty);
     }
-    static Ingredient toIngredient(RecipeChoice bukkit, boolean requireNotEmpty) {
+    static @NotNull Ingredient toIngredient(@Nullable RecipeChoice bukkit, boolean requireNotEmpty) {
         // Paper end
         Ingredient stack;
 
@@ -41,7 +44,7 @@ public interface CraftRecipe extends Recipe {
         return stack;
     }
 
-    public static RecipeChoice toBukkit(Ingredient list) {
+    public static @Nullable RecipeChoice toBukkit(@NotNull Ingredient list) {
         list.getItems();
 
         if (list.itemStacks.length == 0) {
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftShapedRecipe.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftShapedRecipe.java
index 749a96d9fc781871421afc8f6adf92f77c89c11d..4aa6a6c5b2faa363b5362054e5bd20fcb88fafef 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftShapedRecipe.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftShapedRecipe.java
@@ -10,21 +10,23 @@ import org.bukkit.craftbukkit.util.CraftNamespacedKey;
 import org.bukkit.inventory.ItemStack;
 import org.bukkit.inventory.RecipeChoice;
 import org.bukkit.inventory.ShapedRecipe;
+import org.jetbrains.annotations.NotNull;
+
 
 public class CraftShapedRecipe extends ShapedRecipe implements CraftRecipe {
     // TODO: Could eventually use this to add a matches() method or some such
     private net.minecraft.world.item.crafting.ShapedRecipe recipe;
 
-    public CraftShapedRecipe(NamespacedKey key, ItemStack result) {
+    public CraftShapedRecipe(@NotNull NamespacedKey key, @NotNull ItemStack result) {
         super(key, result);
     }
 
-    public CraftShapedRecipe(ItemStack result, net.minecraft.world.item.crafting.ShapedRecipe recipe) {
+    public CraftShapedRecipe(@NotNull ItemStack result, net.minecraft.world.item.crafting.@NotNull ShapedRecipe recipe) {
         this(CraftNamespacedKey.fromMinecraft(recipe.getId()), result);
         this.recipe = recipe;
     }
 
-    public static CraftShapedRecipe fromBukkitRecipe(ShapedRecipe recipe) {
+    public static @NotNull CraftShapedRecipe fromBukkitRecipe(ShapedRecipe recipe) {
         if (recipe instanceof CraftShapedRecipe) {
             return (CraftShapedRecipe) recipe;
         }
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftShapelessRecipe.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftShapelessRecipe.java
index f7ea77dd82d978ad307f99c743efacfb34478b3d..24344ea0e49fb70d08e023c3ba57039266d04c8a 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftShapelessRecipe.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftShapelessRecipe.java
@@ -9,21 +9,23 @@ import org.bukkit.craftbukkit.util.CraftNamespacedKey;
 import org.bukkit.inventory.ItemStack;
 import org.bukkit.inventory.RecipeChoice;
 import org.bukkit.inventory.ShapelessRecipe;
+import org.jetbrains.annotations.NotNull;
+
 
 public class CraftShapelessRecipe extends ShapelessRecipe implements CraftRecipe {
     // TODO: Could eventually use this to add a matches() method or some such
     private net.minecraft.world.item.crafting.ShapelessRecipe recipe;
 
-    public CraftShapelessRecipe(NamespacedKey key, ItemStack result) {
+    public CraftShapelessRecipe(@NotNull NamespacedKey key, @NotNull ItemStack result) {
         super(key, result);
     }
 
-    public CraftShapelessRecipe(ItemStack result, net.minecraft.world.item.crafting.ShapelessRecipe recipe) {
+    public CraftShapelessRecipe(@NotNull ItemStack result, net.minecraft.world.item.crafting.@NotNull ShapelessRecipe recipe) {
         this(CraftNamespacedKey.fromMinecraft(recipe.getId()), result);
         this.recipe = recipe;
     }
 
-    public static CraftShapelessRecipe fromBukkitRecipe(ShapelessRecipe recipe) {
+    public static @NotNull CraftShapelessRecipe fromBukkitRecipe(ShapelessRecipe recipe) {
         if (recipe instanceof CraftShapelessRecipe) {
             return (CraftShapelessRecipe) recipe;
         }
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftSmithingRecipe.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftSmithingRecipe.java
index bfd6b859fcfed89d0ebaca5200b7ca6f5d353d04..4d2a11c4baa9611a2ef2411347e4b442837b8328 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftSmithingRecipe.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftSmithingRecipe.java
@@ -6,19 +6,21 @@ import org.bukkit.craftbukkit.util.CraftNamespacedKey;
 import org.bukkit.inventory.ItemStack;
 import org.bukkit.inventory.RecipeChoice;
 import org.bukkit.inventory.SmithingRecipe;
+import org.jetbrains.annotations.NotNull;
+
 
 public class CraftSmithingRecipe extends SmithingRecipe implements CraftRecipe {
     @Deprecated // Paper
-    public CraftSmithingRecipe(NamespacedKey key, ItemStack result, RecipeChoice base, RecipeChoice addition) {
+    public CraftSmithingRecipe(@NotNull NamespacedKey key, @NotNull ItemStack result, @NotNull RecipeChoice base, @NotNull RecipeChoice addition) {
         super(key, result, base, addition);
     }
     // Paper start
-    public CraftSmithingRecipe(NamespacedKey key, ItemStack result, RecipeChoice base, RecipeChoice addition, boolean copyNbt) {
+    public CraftSmithingRecipe(@NotNull NamespacedKey key, @NotNull ItemStack result, @NotNull RecipeChoice base, @NotNull RecipeChoice addition, boolean copyNbt) {
         super(key, result, base, addition, copyNbt);
     }
     // Paper end
 
-    public static CraftSmithingRecipe fromBukkitRecipe(SmithingRecipe recipe) {
+    public static @NotNull CraftSmithingRecipe fromBukkitRecipe(SmithingRecipe recipe) {
         if (recipe instanceof CraftSmithingRecipe) {
             return (CraftSmithingRecipe) recipe;
         }
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftSmokingRecipe.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftSmokingRecipe.java
index ca7430aab56329e89380b4a56fd296344dcda61a..6461a0d53349231561309dd472919ff98b01841d 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftSmokingRecipe.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftSmokingRecipe.java
@@ -6,13 +6,15 @@ import org.bukkit.craftbukkit.util.CraftNamespacedKey;
 import org.bukkit.inventory.ItemStack;
 import org.bukkit.inventory.RecipeChoice;
 import org.bukkit.inventory.SmokingRecipe;
+import org.jetbrains.annotations.NotNull;
+
 
 public class CraftSmokingRecipe extends SmokingRecipe implements CraftRecipe {
-    public CraftSmokingRecipe(NamespacedKey key, ItemStack result, RecipeChoice source, float experience, int cookingTime) {
+    public CraftSmokingRecipe(@NotNull NamespacedKey key, @NotNull ItemStack result, @NotNull RecipeChoice source, float experience, int cookingTime) {
         super(key, result, source, experience, cookingTime);
     }
 
-    public static CraftSmokingRecipe fromBukkitRecipe(SmokingRecipe recipe) {
+    public static @NotNull CraftSmokingRecipe fromBukkitRecipe(SmokingRecipe recipe) {
         if (recipe instanceof CraftSmokingRecipe) {
             return (CraftSmokingRecipe) recipe;
         }
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftStonecuttingRecipe.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftStonecuttingRecipe.java
index 8d79d64dfa6ef46c4c103fec42b13e1aefc14b39..1543fb59cba29c60ab73405daabbd54ca97eca76 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftStonecuttingRecipe.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftStonecuttingRecipe.java
@@ -6,13 +6,15 @@ import org.bukkit.craftbukkit.util.CraftNamespacedKey;
 import org.bukkit.inventory.ItemStack;
 import org.bukkit.inventory.RecipeChoice;
 import org.bukkit.inventory.StonecuttingRecipe;
+import org.jetbrains.annotations.NotNull;
+
 
 public class CraftStonecuttingRecipe extends StonecuttingRecipe implements CraftRecipe {
-    public CraftStonecuttingRecipe(NamespacedKey key, ItemStack result, RecipeChoice source) {
+    public CraftStonecuttingRecipe(@NotNull NamespacedKey key, @NotNull ItemStack result, @NotNull RecipeChoice source) {
         super(key, result, source);
     }
 
-    public static CraftStonecuttingRecipe fromBukkitRecipe(StonecuttingRecipe recipe) {
+    public static @NotNull CraftStonecuttingRecipe fromBukkitRecipe(StonecuttingRecipe recipe) {
         if (recipe instanceof CraftStonecuttingRecipe) {
             return (CraftStonecuttingRecipe) recipe;
         }
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/InventoryIterator.java b/src/main/java/org/bukkit/craftbukkit/inventory/InventoryIterator.java
index f1ea38d833dafcd397843cf434cb5961296a7df2..7a90668dfce3811fe96e02e4ff090321ef398485 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/InventoryIterator.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/InventoryIterator.java
@@ -3,6 +3,8 @@ package org.bukkit.craftbukkit.inventory;
 import java.util.ListIterator;
 import org.bukkit.inventory.Inventory;
 import org.bukkit.inventory.ItemStack;
+import org.jetbrains.annotations.Nullable;
+
 
 public class InventoryIterator implements ListIterator<ItemStack> {
     private final Inventory inventory;
@@ -25,7 +27,7 @@ public class InventoryIterator implements ListIterator<ItemStack> {
     }
 
     @Override
-    public ItemStack next() {
+    public @Nullable ItemStack next() {
         this.lastDirection = true;
         return this.inventory.getItem(this.nextIndex++);
     }
@@ -41,7 +43,7 @@ public class InventoryIterator implements ListIterator<ItemStack> {
     }
 
     @Override
-    public ItemStack previous() {
+    public @Nullable ItemStack previous() {
         this.lastDirection = false;
         return this.inventory.getItem(--this.nextIndex);
     }
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/RecipeIterator.java b/src/main/java/org/bukkit/craftbukkit/inventory/RecipeIterator.java
index 91895c639c33a1cafd2a35bab7b5fd83e558468d..f19ee15ed7b709414781cf41a596badfc78a027a 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/RecipeIterator.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/RecipeIterator.java
@@ -7,9 +7,11 @@ import net.minecraft.resources.ResourceLocation;
 import net.minecraft.server.MinecraftServer;
 import net.minecraft.world.item.crafting.RecipeType;
 import org.bukkit.inventory.Recipe;
+import org.jetbrains.annotations.NotNull;
+
 
 public class RecipeIterator implements Iterator<Recipe> {
-    private final Iterator<Map.Entry<RecipeType<?>, Object2ObjectLinkedOpenHashMap<ResourceLocation, net.minecraft.world.item.crafting.Recipe<?>>>> recipes;
+    private final @NotNull Iterator<Map.Entry<RecipeType<?>, Object2ObjectLinkedOpenHashMap<ResourceLocation, net.minecraft.world.item.crafting.Recipe<?>>>> recipes;
     private Iterator<net.minecraft.world.item.crafting.Recipe<?>> current;
     private Recipe currentRecipe; // Paper - fix removing recipes
 
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/tags/DeprecatedContainerTagType.java b/src/main/java/org/bukkit/craftbukkit/inventory/tags/DeprecatedContainerTagType.java
index 2d5c0647c8cb57eba9d84206f7f66616f5f9c6a0..ddcfef486f6d81adc5f939934824b8dcb60de8c2 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/tags/DeprecatedContainerTagType.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/tags/DeprecatedContainerTagType.java
@@ -7,6 +7,8 @@ import org.bukkit.inventory.meta.tags.ItemTagType;
 import org.bukkit.persistence.PersistentDataAdapterContext;
 import org.bukkit.persistence.PersistentDataContainer;
 import org.bukkit.persistence.PersistentDataType;
+import org.jetbrains.annotations.NotNull;
+
 
 public final class DeprecatedContainerTagType<Z> implements PersistentDataType<PersistentDataContainer, Z> {
 
@@ -17,17 +19,17 @@ public final class DeprecatedContainerTagType<Z> implements PersistentDataType<P
     }
 
     @Override
-    public Class<PersistentDataContainer> getPrimitiveType() {
+    public @NotNull Class<PersistentDataContainer> getPrimitiveType() {
         return PersistentDataContainer.class;
     }
 
     @Override
-    public Class<Z> getComplexType() {
+    public @NotNull Class<Z> getComplexType() {
         return this.deprecated.getComplexType();
     }
 
     @Override
-    public PersistentDataContainer toPrimitive(Z complex, PersistentDataAdapterContext context) {
+    public @NotNull PersistentDataContainer toPrimitive(@NotNull Z complex, PersistentDataAdapterContext context) {
         CustomItemTagContainer deprecated = this.deprecated.toPrimitive(complex, new DeprecatedItemAdapterContext(context));
         Validate.isInstanceOf(DeprecatedCustomTagContainer.class, deprecated, "Could not wrap deprecated API due to foreign CustomItemTagContainer implementation %s", deprecated.getClass().getSimpleName());
 
@@ -40,7 +42,7 @@ public final class DeprecatedContainerTagType<Z> implements PersistentDataType<P
     }
 
     @Override
-    public Z fromPrimitive(PersistentDataContainer primitive, PersistentDataAdapterContext context) {
+    public @NotNull Z fromPrimitive(@NotNull PersistentDataContainer primitive, PersistentDataAdapterContext context) {
         Validate.isInstanceOf(CraftPersistentDataContainer.class, primitive, "Could not wrap deprecated API due to foreign PersistentMetadataContainer implementation %s", primitive.getClass().getSimpleName());
 
         return this.deprecated.fromPrimitive(new DeprecatedCustomTagContainer(primitive), new DeprecatedItemAdapterContext(context));
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/tags/DeprecatedCustomTagContainer.java b/src/main/java/org/bukkit/craftbukkit/inventory/tags/DeprecatedCustomTagContainer.java
index 9496478c869e9c8b0021633cdb858d5cf3611631..ccbb151e225c024c7ff8ee4d02d298172bdbe867 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/tags/DeprecatedCustomTagContainer.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/tags/DeprecatedCustomTagContainer.java
@@ -6,6 +6,8 @@ import org.bukkit.inventory.meta.tags.CustomItemTagContainer;
 import org.bukkit.inventory.meta.tags.ItemTagAdapterContext;
 import org.bukkit.inventory.meta.tags.ItemTagType;
 import org.bukkit.persistence.PersistentDataContainer;
+import org.jetbrains.annotations.NotNull;
+
 
 /**
  * The {@link DeprecatedCustomTagContainer} is a simply wrapper implementation
@@ -21,7 +23,7 @@ public final class DeprecatedCustomTagContainer implements CustomItemTagContaine
     }
 
     @Override
-    public <T, Z> void setCustomTag(NamespacedKey key, ItemTagType<T, Z> type, Z value) {
+    public <T, Z> void setCustomTag(@NotNull NamespacedKey key, @NotNull ItemTagType<T, Z> type, @NotNull Z value) {
         if (Objects.equals(CustomItemTagContainer.class, type.getPrimitiveType())) {
             this.wrapped.set(key, new DeprecatedContainerTagType<>((ItemTagType<CustomItemTagContainer, Z>) type), value);
         } else {
@@ -30,7 +32,7 @@ public final class DeprecatedCustomTagContainer implements CustomItemTagContaine
     }
 
     @Override
-    public <T, Z> boolean hasCustomTag(NamespacedKey key, ItemTagType<T, Z> type) {
+    public <T, Z> boolean hasCustomTag(@NotNull NamespacedKey key, @NotNull ItemTagType<T, Z> type) {
         if (Objects.equals(CustomItemTagContainer.class, type.getPrimitiveType())) {
             return this.wrapped.has(key, new DeprecatedContainerTagType<>((ItemTagType<CustomItemTagContainer, Z>) type));
         } else {
@@ -39,7 +41,7 @@ public final class DeprecatedCustomTagContainer implements CustomItemTagContaine
     }
 
     @Override
-    public <T, Z> Z getCustomTag(NamespacedKey key, ItemTagType<T, Z> type) {
+    public <T, Z> Z getCustomTag(@NotNull NamespacedKey key, @NotNull ItemTagType<T, Z> type) {
         if (Objects.equals(CustomItemTagContainer.class, type.getPrimitiveType())) {
             return this.wrapped.get(key, new DeprecatedContainerTagType<>((ItemTagType<CustomItemTagContainer, Z>) type));
         } else {
@@ -48,7 +50,7 @@ public final class DeprecatedCustomTagContainer implements CustomItemTagContaine
     }
 
     @Override
-    public void removeCustomTag(NamespacedKey key) {
+    public void removeCustomTag(@NotNull NamespacedKey key) {
         this.wrapped.remove(key);
     }
 
@@ -58,7 +60,7 @@ public final class DeprecatedCustomTagContainer implements CustomItemTagContaine
     }
 
     @Override
-    public ItemTagAdapterContext getAdapterContext() {
+    public @NotNull ItemTagAdapterContext getAdapterContext() {
         return new DeprecatedItemAdapterContext(this.wrapped.getAdapterContext());
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/tags/DeprecatedItemAdapterContext.java b/src/main/java/org/bukkit/craftbukkit/inventory/tags/DeprecatedItemAdapterContext.java
index fd614f472decede7a1f45bc27d0febf106ee11b3..f2f3a45c4df1ce951439f3e814e7c8597abb1df8 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/tags/DeprecatedItemAdapterContext.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/tags/DeprecatedItemAdapterContext.java
@@ -3,6 +3,8 @@ package org.bukkit.craftbukkit.inventory.tags;
 import org.bukkit.inventory.meta.tags.CustomItemTagContainer;
 import org.bukkit.inventory.meta.tags.ItemTagAdapterContext;
 import org.bukkit.persistence.PersistentDataAdapterContext;
+import org.jetbrains.annotations.NotNull;
+
 
 public final class DeprecatedItemAdapterContext implements ItemTagAdapterContext {
 
@@ -18,7 +20,7 @@ public final class DeprecatedItemAdapterContext implements ItemTagAdapterContext
      * @return the fresh container instance
      */
     @Override
-    public CustomItemTagContainer newTagContainer() {
+    public @NotNull CustomItemTagContainer newTagContainer() {
         return new DeprecatedCustomTagContainer(this.context.newPersistentDataContainer());
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/tags/DeprecatedItemTagType.java b/src/main/java/org/bukkit/craftbukkit/inventory/tags/DeprecatedItemTagType.java
index 753cb30d742d5f5c3616b1c67c848de1257e935f..1752fd72240f0ce2d65c4b49f8e25482ead35d3c 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/tags/DeprecatedItemTagType.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/tags/DeprecatedItemTagType.java
@@ -3,6 +3,8 @@ package org.bukkit.craftbukkit.inventory.tags;
 import org.bukkit.inventory.meta.tags.ItemTagType;
 import org.bukkit.persistence.PersistentDataAdapterContext;
 import org.bukkit.persistence.PersistentDataType;
+import org.jetbrains.annotations.NotNull;
+
 
 public final class DeprecatedItemTagType<T, Z> implements PersistentDataType<T, Z> {
 
@@ -13,22 +15,22 @@ public final class DeprecatedItemTagType<T, Z> implements PersistentDataType<T,
     }
 
     @Override
-    public Class<T> getPrimitiveType() {
+    public @NotNull Class<T> getPrimitiveType() {
         return this.deprecated.getPrimitiveType();
     }
 
     @Override
-    public Class<Z> getComplexType() {
+    public @NotNull Class<Z> getComplexType() {
         return this.deprecated.getComplexType();
     }
 
     @Override
-    public T toPrimitive(Z complex, PersistentDataAdapterContext context) {
+    public @NotNull T toPrimitive(@NotNull Z complex, PersistentDataAdapterContext context) {
         return this.deprecated.toPrimitive(complex, new DeprecatedItemAdapterContext(context));
     }
 
     @Override
-    public Z fromPrimitive(T primitive, PersistentDataAdapterContext context) {
+    public @NotNull Z fromPrimitive(@NotNull T primitive, PersistentDataAdapterContext context) {
         return this.deprecated.fromPrimitive(primitive, new DeprecatedItemAdapterContext(context));
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/util/CraftCustomInventoryConverter.java b/src/main/java/org/bukkit/craftbukkit/inventory/util/CraftCustomInventoryConverter.java
index 78a7ac47f20e84ccd67ff44d0bc7a2f2faa0d476..f2f85589df385bf210e0322b80998d42c20735e3 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/util/CraftCustomInventoryConverter.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/util/CraftCustomInventoryConverter.java
@@ -4,37 +4,39 @@ import org.bukkit.craftbukkit.inventory.CraftInventoryCustom;
 import org.bukkit.event.inventory.InventoryType;
 import org.bukkit.inventory.Inventory;
 import org.bukkit.inventory.InventoryHolder;
+import org.jetbrains.annotations.NotNull;
+
 
 public class CraftCustomInventoryConverter implements CraftInventoryCreator.InventoryConverter {
 
     @Override
-    public Inventory createInventory(InventoryHolder holder, InventoryType type) {
+    public @NotNull Inventory createInventory(InventoryHolder holder, InventoryType type) {
         return new CraftInventoryCustom(holder, type);
     }
 
     // Paper start
     @Override
-    public Inventory createInventory(InventoryHolder owner, InventoryType type, net.kyori.adventure.text.Component title) {
+    public @NotNull Inventory createInventory(InventoryHolder owner, InventoryType type, net.kyori.adventure.text.Component title) {
         return new CraftInventoryCustom(owner, type, title);
     }
     // Paper end
 
     @Override
-    public Inventory createInventory(InventoryHolder owner, InventoryType type, String title) {
+    public @NotNull Inventory createInventory(InventoryHolder owner, InventoryType type, String title) {
         return new CraftInventoryCustom(owner, type, title);
     }
 
-    public Inventory createInventory(InventoryHolder owner, int size) {
+    public @NotNull Inventory createInventory(InventoryHolder owner, int size) {
         return new CraftInventoryCustom(owner, size);
     }
 
     // Paper start
-    public Inventory createInventory(InventoryHolder owner, int size, net.kyori.adventure.text.Component title) {
+    public @NotNull Inventory createInventory(InventoryHolder owner, int size, net.kyori.adventure.text.Component title) {
         return new CraftInventoryCustom(owner, size, title);
     }
     // Paper end
 
-    public Inventory createInventory(InventoryHolder owner, int size, String title) {
+    public @NotNull Inventory createInventory(InventoryHolder owner, int size, String title) {
         return new CraftInventoryCustom(owner, size, title);
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/util/CraftTileInventoryConverter.java b/src/main/java/org/bukkit/craftbukkit/inventory/util/CraftTileInventoryConverter.java
index 53421f780ac8bc2a67f64671fcad632fcdb8bede..a0d7cde17035f0dcf1cad29c052fda28df1820f1 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/util/CraftTileInventoryConverter.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/util/CraftTileInventoryConverter.java
@@ -21,6 +21,9 @@ import org.bukkit.craftbukkit.util.CraftChatMessage;
 import org.bukkit.event.inventory.InventoryType;
 import org.bukkit.inventory.Inventory;
 import org.bukkit.inventory.InventoryHolder;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 public abstract class CraftTileInventoryConverter implements CraftInventoryCreator.InventoryConverter {
 
@@ -59,7 +62,7 @@ public abstract class CraftTileInventoryConverter implements CraftInventoryCreat
         return this.getInventory(null, null, tileEntity);
     }
 
-    public Inventory getInventory(InventoryHolder owner, InventoryType type, Container tileEntity) { // Paper
+    public @NotNull Inventory getInventory(@Nullable InventoryHolder owner, InventoryType type, Container tileEntity) { // Paper
         if (owner != null) return new org.bukkit.craftbukkit.inventory.CraftInventoryCustom(owner, type, tileEntity); // Paper
         // Paper end
         return new CraftInventory(tileEntity);
@@ -68,7 +71,7 @@ public abstract class CraftTileInventoryConverter implements CraftInventoryCreat
     public static class Furnace extends AbstractFurnaceInventoryConverter { // Paper - Furnace, BlastFurnace, and Smoker are pretty much identical
 
         @Override
-        public Container getTileEntity() {
+        public @NotNull Container getTileEntity() {
             AbstractFurnaceBlockEntity furnace = new FurnaceBlockEntity(BlockPos.ZERO, Blocks.FURNACE.defaultBlockState()); // TODO: customize this if required
             return furnace;
         }
@@ -101,7 +104,7 @@ public abstract class CraftTileInventoryConverter implements CraftInventoryCreat
         }
 
         @Override
-        public Inventory getInventory(InventoryHolder owner, InventoryType type, net.minecraft.world.Container tileEntity) { // Paper
+        public @NotNull Inventory getInventory(@Nullable InventoryHolder owner, InventoryType type, net.minecraft.world.Container tileEntity) { // Paper
             if (owner != null) return new org.bukkit.craftbukkit.inventory.CraftInventoryCustom(owner, type, tileEntity); // Paper
             // Paper end
             return new CraftInventoryFurnace((AbstractFurnaceBlockEntity) tileEntity);
@@ -111,7 +114,7 @@ public abstract class CraftTileInventoryConverter implements CraftInventoryCreat
     public static class BrewingStand extends CraftTileInventoryConverter {
 
         @Override
-        public Container getTileEntity() {
+        public @NotNull Container getTileEntity() {
             return new BrewingStandBlockEntity(BlockPos.ZERO, Blocks.BREWING_STAND.defaultBlockState());
         }
 
@@ -144,7 +147,7 @@ public abstract class CraftTileInventoryConverter implements CraftInventoryCreat
         }
 
         @Override
-        public Inventory getInventory(InventoryHolder owner, InventoryType type, net.minecraft.world.Container tileEntity) { // Paper
+        public @NotNull Inventory getInventory(@Nullable InventoryHolder owner, InventoryType type, net.minecraft.world.Container tileEntity) { // Paper
             if (owner != null) return new org.bukkit.craftbukkit.inventory.CraftInventoryCustom(owner, type, tileEntity); // Paper
             // Paper end
             return new CraftInventoryBrewer(tileEntity);
@@ -154,7 +157,7 @@ public abstract class CraftTileInventoryConverter implements CraftInventoryCreat
     public static class Dispenser extends CraftTileInventoryConverter {
 
         @Override
-        public Container getTileEntity() {
+        public @NotNull Container getTileEntity() {
             return new DispenserBlockEntity(BlockPos.ZERO, Blocks.DISPENSER.defaultBlockState());
         }
     }
@@ -162,7 +165,7 @@ public abstract class CraftTileInventoryConverter implements CraftInventoryCreat
     public static class Dropper extends CraftTileInventoryConverter {
 
         @Override
-        public Container getTileEntity() {
+        public @NotNull Container getTileEntity() {
             return new DropperBlockEntity(BlockPos.ZERO, Blocks.DROPPER.defaultBlockState());
         }
     }
@@ -170,7 +173,7 @@ public abstract class CraftTileInventoryConverter implements CraftInventoryCreat
     public static class Hopper extends CraftTileInventoryConverter {
 
         @Override
-        public Container getTileEntity() {
+        public @NotNull Container getTileEntity() {
             return new HopperBlockEntity(BlockPos.ZERO, Blocks.HOPPER.defaultBlockState());
         }
     }
@@ -178,7 +181,7 @@ public abstract class CraftTileInventoryConverter implements CraftInventoryCreat
     public static class BlastFurnace extends AbstractFurnaceInventoryConverter { // Paper - Furnace, BlastFurnace, and Smoker are pretty much identical
 
         @Override
-        public Container getTileEntity() {
+        public @NotNull Container getTileEntity() {
             return new BlastFurnaceBlockEntity(BlockPos.ZERO, Blocks.BLAST_FURNACE.defaultBlockState());
         }
     }
@@ -186,7 +189,7 @@ public abstract class CraftTileInventoryConverter implements CraftInventoryCreat
     public static class Lectern extends CraftTileInventoryConverter {
 
         @Override
-        public Container getTileEntity() {
+        public @NotNull Container getTileEntity() {
             return new LecternBlockEntity(BlockPos.ZERO, Blocks.LECTERN.defaultBlockState()).bookAccess;
         }
     }
@@ -194,7 +197,7 @@ public abstract class CraftTileInventoryConverter implements CraftInventoryCreat
     public static class Smoker extends AbstractFurnaceInventoryConverter { // Paper - Furnace, BlastFurnace, and Smoker are pretty much identical
 
         @Override
-        public Container getTileEntity() {
+        public @NotNull Container getTileEntity() {
             return new SmokerBlockEntity(BlockPos.ZERO, Blocks.SMOKER.defaultBlockState());
         }
     }
diff --git a/src/main/java/org/bukkit/craftbukkit/legacy/CraftEvil.java b/src/main/java/org/bukkit/craftbukkit/legacy/CraftEvil.java
index 569eafbb2a58548d58118ddc477be44209859c10..8fc977e6e2ad85a11495929a8117f73f032a142a 100644
--- a/src/main/java/org/bukkit/craftbukkit/legacy/CraftEvil.java
+++ b/src/main/java/org/bukkit/craftbukkit/legacy/CraftEvil.java
@@ -11,6 +11,8 @@ import org.bukkit.block.BlockState;
 import org.bukkit.craftbukkit.block.CraftBlock;
 import org.bukkit.craftbukkit.block.CraftBlockState;
 import org.bukkit.inventory.ItemStack;
+import org.jetbrains.annotations.NotNull;
+
 
 /**
  * @deprecated do not use for any reason
@@ -35,64 +37,64 @@ public final class CraftEvil {
         //
     }
 
-    public static int getBlockTypeIdAt(World world, int x, int y, int z) {
+    public static int getBlockTypeIdAt(@NotNull World world, int x, int y, int z) {
         return CraftEvil.getId(world.getBlockAt(x, y, z).getType());
     }
 
-    public static int getBlockTypeIdAt(World world, Location location) {
+    public static int getBlockTypeIdAt(@NotNull World world, @NotNull Location location) {
         return CraftEvil.getId(world.getBlockAt(location).getType());
     }
 
-    public static Material getType(Block block) {
+    public static Material getType(@NotNull Block block) {
         return CraftLegacy.toLegacyMaterial(((CraftBlock) block).getNMS());
     }
 
-    public static Material getType(BlockState block) {
+    public static Material getType(@NotNull BlockState block) {
         return CraftLegacy.toLegacyMaterial(((CraftBlockState) block).getHandle());
     }
 
-    public static int getTypeId(Block block) {
+    public static int getTypeId(@NotNull Block block) {
         return CraftEvil.getId(block.getType());
     }
 
-    public static boolean setTypeId(Block block, int type) {
+    public static boolean setTypeId(@NotNull Block block, int type) {
         block.setType(CraftEvil.getMaterial(type));
         return true;
     }
 
-    public static boolean setTypeId(Block block, int type, boolean applyPhysics) {
+    public static boolean setTypeId(@NotNull Block block, int type, boolean applyPhysics) {
         block.setType(CraftEvil.getMaterial(type), applyPhysics);
         return true;
     }
 
-    public static boolean setTypeIdAndData(Block block, int type, byte data, boolean applyPhysics) {
+    public static boolean setTypeIdAndData(@NotNull Block block, int type, byte data, boolean applyPhysics) {
         block.setType(CraftEvil.getMaterial(type), applyPhysics);
         CraftEvil.setData(block, data);
         return true;
     }
 
-    public static void setData(Block block, byte data) {
+    public static void setData(@NotNull Block block, byte data) {
         ((CraftBlock) block).setData(data);
     }
 
-    public static void setData(Block block, byte data, boolean applyPhysics) {
+    public static void setData(@NotNull Block block, byte data, boolean applyPhysics) {
         ((CraftBlock) block).setData(data, applyPhysics);
     }
 
-    public static int getTypeId(BlockState state) {
+    public static int getTypeId(@NotNull BlockState state) {
         return CraftEvil.getId(state.getType());
     }
 
-    public static boolean setTypeId(BlockState state, int type) {
+    public static boolean setTypeId(@NotNull BlockState state, int type) {
         state.setType(CraftEvil.getMaterial(type));
         return true;
     }
 
-    public static int getTypeId(ItemStack stack) {
+    public static int getTypeId(@NotNull ItemStack stack) {
         return CraftEvil.getId(stack.getType());
     }
 
-    public static void setTypeId(ItemStack stack, int type) {
+    public static void setTypeId(@NotNull ItemStack stack, int type) {
         stack.setType(CraftEvil.getMaterial(type));
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/legacy/CraftLegacy.java b/src/main/java/org/bukkit/craftbukkit/legacy/CraftLegacy.java
index 110503062b3043cffa082a1cda6b8d57152869aa..98c3e11b5f6497b3c229fd67ff4a0c88c1a0ef10 100644
--- a/src/main/java/org/bukkit/craftbukkit/legacy/CraftLegacy.java
+++ b/src/main/java/org/bukkit/craftbukkit/legacy/CraftLegacy.java
@@ -31,6 +31,9 @@ import org.bukkit.Material;
 import org.bukkit.craftbukkit.util.CraftMagicNumbers;
 import org.bukkit.entity.EntityType;
 import org.bukkit.material.MaterialData;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 /**
  * This class may seem unnecessarily slow and complicated/repetitive however it
@@ -59,7 +62,7 @@ public final class CraftLegacy {
         //
     }
 
-    public static Material toLegacy(Material material) {
+    public static Material toLegacy(@Nullable Material material) {
         if (material == null || material.isLegacy()) {
             return material;
         }
@@ -67,7 +70,7 @@ public final class CraftLegacy {
         return CraftLegacy.toLegacyData(material).getItemType();
     }
 
-    public static MaterialData toLegacyData(Material material) {
+    public static @NotNull MaterialData toLegacyData(@NotNull Material material) {
         Preconditions.checkArgument(!material.isLegacy(), "toLegacy on legacy Material");
         MaterialData mappedData;
 
@@ -93,7 +96,7 @@ public final class CraftLegacy {
         return (mappedData == null) ? new MaterialData(Material.LEGACY_AIR) : mappedData;
     }
 
-    public static BlockState fromLegacyData(Material material, byte data) {
+    public static @NotNull BlockState fromLegacyData(@NotNull Material material, byte data) {
         Preconditions.checkArgument(material.isLegacy(), "fromLegacyData on modern Material");
 
         MaterialData materialData = new MaterialData(material, data);
@@ -114,7 +117,7 @@ public final class CraftLegacy {
         return Blocks.AIR.defaultBlockState();
     }
 
-    public static Item fromLegacyData(Material material, short data) {
+    public static @NotNull Item fromLegacyData(@NotNull Material material, short data) {
         Preconditions.checkArgument(material.isLegacy(), "fromLegacyData on modern Material. Did you forget to define a modern (1.13+) api-version in your plugin.yml?");
 
         MaterialData materialData = new MaterialData(material, (byte) data);
@@ -144,15 +147,15 @@ public final class CraftLegacy {
         return Items.AIR;
     }
 
-    public static byte toLegacyData(BlockState blockData) {
+    public static byte toLegacyData(@NotNull BlockState blockData) {
         return CraftLegacy.toLegacy(blockData).getData();
     }
 
-    public static Material toLegacyMaterial(BlockState blockData) {
+    public static Material toLegacyMaterial(@NotNull BlockState blockData) {
         return CraftLegacy.toLegacy(blockData).getItemType();
     }
 
-    public static MaterialData toLegacy(BlockState blockData) {
+    public static @NotNull MaterialData toLegacy(@NotNull BlockState blockData) {
         MaterialData mappedData;
 
         // Try exact match first
@@ -165,7 +168,7 @@ public final class CraftLegacy {
         return (mappedData == null) ? new MaterialData(Material.LEGACY_AIR) : mappedData;
     }
 
-    public static Material fromLegacy(Material material) {
+    public static Material fromLegacy(@Nullable Material material) {
         if (material == null || !material.isLegacy()) {
             return material;
         }
@@ -173,11 +176,11 @@ public final class CraftLegacy {
         return CraftLegacy.fromLegacy(new MaterialData(material));
     }
 
-    public static Material fromLegacy(MaterialData materialData) {
+    public static Material fromLegacy(@NotNull MaterialData materialData) {
         return CraftLegacy.fromLegacy(materialData, false);
     }
 
-    public static Material fromLegacy(MaterialData materialData, boolean itemPriority) {
+    public static @Nullable Material fromLegacy(@NotNull MaterialData materialData, boolean itemPriority) {
         Material material = materialData.getItemType();
         if (material == null || !material.isLegacy()) {
             return material;
@@ -220,34 +223,34 @@ public final class CraftLegacy {
         return (mappedData == null) ? Material.AIR : mappedData;
     }
 
-    public static Material[] values() {
+    public static Material @NotNull [] values() {
         Material[] values = Material.values();
         return Arrays.copyOfRange(values, Material.LEGACY_AIR.ordinal(), values.length);
     }
 
-    public static Material valueOf(String name) {
+    public static @NotNull Material valueOf(@NotNull String name) {
         return (name.startsWith(Material.LEGACY_PREFIX)) ? Material.valueOf(name) : Material.valueOf(Material.LEGACY_PREFIX + name);
     }
 
-    public static Material getMaterial(String name) {
+    public static @Nullable Material getMaterial(@NotNull String name) {
         return (name.startsWith(Material.LEGACY_PREFIX)) ? Material.getMaterial(name) : Material.getMaterial(Material.LEGACY_PREFIX + name);
     }
 
-    public static Material matchMaterial(String name) {
+    public static @Nullable Material matchMaterial(@NotNull String name) {
         return (name.startsWith(Material.LEGACY_PREFIX)) ? Material.matchMaterial(name) : Material.matchMaterial(Material.LEGACY_PREFIX + name);
     }
 
-    public static int ordinal(Material material) {
+    public static int ordinal(@NotNull Material material) {
         Preconditions.checkArgument(material.isLegacy(), "ordinal on modern Material");
 
         return material.ordinal() - Material.LEGACY_AIR.ordinal();
     }
 
-    public static String name(Material material) {
+    public static @NotNull String name(@NotNull Material material) {
         return material.name().substring(Material.LEGACY_PREFIX.length());
     }
 
-    public static String toString(Material material) {
+    public static @NotNull String toString(@NotNull Material material) {
         return CraftLegacy.name(material);
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/map/CraftMapCanvas.java b/src/main/java/org/bukkit/craftbukkit/map/CraftMapCanvas.java
index d776e9133b2fd5401f2aabeaa5270d910fbd896a..e0ecbf9975ed5f14c51f287cb76ab97ce412f78a 100644
--- a/src/main/java/org/bukkit/craftbukkit/map/CraftMapCanvas.java
+++ b/src/main/java/org/bukkit/craftbukkit/map/CraftMapCanvas.java
@@ -8,6 +8,9 @@ import org.bukkit.map.MapCursorCollection;
 import org.bukkit.map.MapFont;
 import org.bukkit.map.MapFont.CharacterSprite;
 import org.bukkit.map.MapPalette;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 public class CraftMapCanvas implements MapCanvas {
 
@@ -22,12 +25,12 @@ public class CraftMapCanvas implements MapCanvas {
     }
 
     @Override
-    public CraftMapView getMapView() {
+    public @NotNull CraftMapView getMapView() {
         return this.mapView;
     }
 
     @Override
-    public MapCursorCollection getCursors() {
+    public @NotNull MapCursorCollection getCursors() {
         return this.cursors;
     }
 
@@ -37,7 +40,7 @@ public class CraftMapCanvas implements MapCanvas {
     }
 
     @Override
-    public void setPixelColor(int x, int y, Color color) {
+    public void setPixelColor(int x, int y, @Nullable Color color) {
         this.setPixel(x, y, (color == null) ? -1 : MapPalette.matchColor(color));
     }
 
@@ -52,7 +55,7 @@ public class CraftMapCanvas implements MapCanvas {
     }
 
     @Override
-    public Color getBasePixelColor(int x, int y) {
+    public @NotNull Color getBasePixelColor(int x, int y) {
         return MapPalette.getColor(this.getBasePixel(x, y));
     }
 
@@ -89,7 +92,7 @@ public class CraftMapCanvas implements MapCanvas {
     }
 
     @Override
-    public void drawImage(int x, int y, Image image) {
+    public void drawImage(int x, int y, @NotNull Image image) {
         byte[] bytes = MapPalette.imageToBytes(image);
         for (int x2 = 0; x2 < image.getWidth(null); ++x2) {
             for (int y2 = 0; y2 < image.getHeight(null); ++y2) {
@@ -99,7 +102,7 @@ public class CraftMapCanvas implements MapCanvas {
     }
 
     @Override
-    public void drawText(int x, int y, MapFont font, String text) {
+    public void drawText(int x, int y, @NotNull MapFont font, @NotNull String text) {
         int xStart = x;
         byte color = MapPalette.DARK_GRAY;
         if (!font.isValid(text)) {
diff --git a/src/main/java/org/bukkit/craftbukkit/map/CraftMapColorCache.java b/src/main/java/org/bukkit/craftbukkit/map/CraftMapColorCache.java
index 80b232055a939cb5ea9661f27f467c915952c912..028d93668559f082e28a5c7eccb145b8499dd556 100644
--- a/src/main/java/org/bukkit/craftbukkit/map/CraftMapColorCache.java
+++ b/src/main/java/org/bukkit/craftbukkit/map/CraftMapColorCache.java
@@ -17,6 +17,8 @@ import java.util.zip.DeflaterOutputStream;
 import java.util.zip.InflaterInputStream;
 import net.minecraft.Util;
 import org.bukkit.map.MapPalette;
+import org.jetbrains.annotations.NotNull;
+
 
 public class CraftMapColorCache implements MapPalette.MapColorCache {
 
@@ -43,7 +45,7 @@ public class CraftMapColorCache implements MapPalette.MapColorCache {
         }
     }
 
-    public static String bytesToString(byte[] bytes) {
+    public static @NotNull String bytesToString(byte @NotNull [] bytes) {
         char[] chars = "0123456789ABCDEF".toCharArray();
 
         StringBuilder builder = new StringBuilder();
@@ -57,7 +59,7 @@ public class CraftMapColorCache implements MapPalette.MapColorCache {
         return builder.toString();
     }
 
-    public CompletableFuture<Void> initCache() {
+    public @NotNull CompletableFuture<Void> initCache() {
         Preconditions.checkState(!this.cached && !this.running.getAndSet(true), "Cache is already build or is currently being build");
 
         this.cache = new byte[256 * 256 * 256]; // Red, Green and Blue have each a range from 0 to 255 each mean we need space for 256 * 256 * 256 values
@@ -108,7 +110,7 @@ public class CraftMapColorCache implements MapPalette.MapColorCache {
         }
     }
 
-    private CompletableFuture<Void> buildAndSaveCache() {
+    private @NotNull CompletableFuture<Void> buildAndSaveCache() {
         return CompletableFuture.runAsync(() -> {
             this.buildCache();
 
@@ -140,7 +142,7 @@ public class CraftMapColorCache implements MapPalette.MapColorCache {
         }, Util.backgroundExecutor());
     }
 
-    private int toInt(Color color) {
+    private int toInt(@NotNull Color color) {
         return color.getRGB() & 0xFFFFFF;
     }
 
@@ -150,7 +152,7 @@ public class CraftMapColorCache implements MapPalette.MapColorCache {
     }
 
     @Override
-    public byte matchColor(Color color) {
+    public byte matchColor(@NotNull Color color) {
         Preconditions.checkState(this.isCached(), "Cache not build jet");
 
         return this.cache[this.toInt(color)];
diff --git a/src/main/java/org/bukkit/craftbukkit/map/CraftMapRenderer.java b/src/main/java/org/bukkit/craftbukkit/map/CraftMapRenderer.java
index 9683d7d103af66fffd68c11abc38fb4fd2f99482..74620bd0b4b5e51c52cf4978167640316600239b 100644
--- a/src/main/java/org/bukkit/craftbukkit/map/CraftMapRenderer.java
+++ b/src/main/java/org/bukkit/craftbukkit/map/CraftMapRenderer.java
@@ -9,6 +9,8 @@ import org.bukkit.map.MapCanvas;
 import org.bukkit.map.MapCursorCollection;
 import org.bukkit.map.MapRenderer;
 import org.bukkit.map.MapView;
+import org.jetbrains.annotations.NotNull;
+
 
 public class CraftMapRenderer extends MapRenderer {
 
@@ -20,7 +22,7 @@ public class CraftMapRenderer extends MapRenderer {
     }
 
     @Override
-    public void render(MapView map, MapCanvas canvas, Player player) {
+    public void render(MapView map, @NotNull MapCanvas canvas, @NotNull Player player) {
         // Map
         for (int x = 0; x < 128; ++x) {
             for (int y = 0; y < 128; ++y) {
diff --git a/src/main/java/org/bukkit/craftbukkit/map/CraftMapView.java b/src/main/java/org/bukkit/craftbukkit/map/CraftMapView.java
index b6465eceb96b97f0661fbbb0be6e7513acdcf910..5ac6e9e53567170e7bb6b58d34bf1a8f132a8bfb 100644
--- a/src/main/java/org/bukkit/craftbukkit/map/CraftMapView.java
+++ b/src/main/java/org/bukkit/craftbukkit/map/CraftMapView.java
@@ -17,6 +17,9 @@ import org.bukkit.craftbukkit.entity.CraftPlayer;
 import org.bukkit.map.MapRenderer;
 import org.bukkit.map.MapView;
 import org.bukkit.map.MapView.Scale;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 public final class CraftMapView implements MapView {
 
@@ -50,17 +53,17 @@ public final class CraftMapView implements MapView {
     }
 
     @Override
-    public Scale getScale() {
+    public @NotNull Scale getScale() {
         return Scale.valueOf(worldMap.scale);
     }
 
     @Override
-    public void setScale(Scale scale) {
+    public void setScale(@NotNull Scale scale) {
         worldMap.scale = scale.getValue();
     }
 
     @Override
-    public World getWorld() {
+    public @Nullable World getWorld() {
         ResourceKey<net.minecraft.world.level.Level> dimension = worldMap.dimension;
         ServerLevel world = MinecraftServer.getServer().getLevel(dimension);
 
@@ -68,7 +71,7 @@ public final class CraftMapView implements MapView {
     }
 
     @Override
-    public void setWorld(World world) {
+    public void setWorld(@NotNull World world) {
         worldMap.dimension = ((CraftWorld) world).getHandle().dimension();
     }
 
@@ -93,12 +96,12 @@ public final class CraftMapView implements MapView {
     }
 
     @Override
-    public List<MapRenderer> getRenderers() {
+    public @NotNull List<MapRenderer> getRenderers() {
         return new ArrayList<MapRenderer>(this.renderers);
     }
 
     @Override
-    public void addRenderer(MapRenderer renderer) {
+    public void addRenderer(@NotNull MapRenderer renderer) {
         if (!this.renderers.contains(renderer)) {
             this.renderers.add(renderer);
             this.canvases.put(renderer, new HashMap<CraftPlayer, CraftMapCanvas>());
@@ -131,7 +134,7 @@ public final class CraftMapView implements MapView {
         return false;
     }
 
-    public RenderData render(CraftPlayer player) {
+    public @NotNull RenderData render(@NotNull CraftPlayer player) {
         boolean context = this.isContextual();
         RenderData render = this.renderCache.get(context ? player : null);
 
diff --git a/src/main/java/org/bukkit/craftbukkit/map/RenderData.java b/src/main/java/org/bukkit/craftbukkit/map/RenderData.java
index 5768cd512ec166f1e8d1f4a28792015347297c3f..c2da89a2fd46c3647ff5b7028d1b28baf9181628 100644
--- a/src/main/java/org/bukkit/craftbukkit/map/RenderData.java
+++ b/src/main/java/org/bukkit/craftbukkit/map/RenderData.java
@@ -2,11 +2,13 @@ package org.bukkit.craftbukkit.map;
 
 import java.util.ArrayList;
 import org.bukkit.map.MapCursor;
+import org.jetbrains.annotations.NotNull;
+
 
 public class RenderData {
 
     public byte[] buffer; // Paper
-    public final ArrayList<MapCursor> cursors;
+    public final @NotNull ArrayList<MapCursor> cursors;
 
     public RenderData() {
         this.buffer = new byte[128 * 128];
diff --git a/src/main/java/org/bukkit/craftbukkit/metadata/BlockMetadataStore.java b/src/main/java/org/bukkit/craftbukkit/metadata/BlockMetadataStore.java
index 13e20ef854361b223ae349f96b9493fe7cfcfbf7..9c633c25b843b87f06d185360382476e119af702 100644
--- a/src/main/java/org/bukkit/craftbukkit/metadata/BlockMetadataStore.java
+++ b/src/main/java/org/bukkit/craftbukkit/metadata/BlockMetadataStore.java
@@ -7,6 +7,8 @@ import org.bukkit.metadata.MetadataStore;
 import org.bukkit.metadata.MetadataStoreBase;
 import org.bukkit.metadata.MetadataValue;
 import org.bukkit.plugin.Plugin;
+import org.jetbrains.annotations.NotNull;
+
 
 /**
  * A BlockMetadataStore stores metadata values for {@link Block} objects.
@@ -31,7 +33,7 @@ public class BlockMetadataStore extends MetadataStoreBase<Block> implements Meta
      * @see MetadataStoreBase#disambiguate(Object, String)
      */
     @Override
-    protected String disambiguate(Block block, String metadataKey) {
+    protected @NotNull String disambiguate(@NotNull Block block, String metadataKey) {
         return Integer.toString(block.getX()) + ":" + Integer.toString(block.getY()) + ":" + Integer.toString(block.getZ()) + ":" + metadataKey;
     }
 
@@ -41,7 +43,7 @@ public class BlockMetadataStore extends MetadataStoreBase<Block> implements Meta
      * @see MetadataStoreBase#getMetadata(Object, String)
      */
     @Override
-    public List<MetadataValue> getMetadata(Block block, String metadataKey) {
+    public @NotNull List<MetadataValue> getMetadata(@NotNull Block block, @NotNull String metadataKey) {
         if (block.getWorld() == this.owningWorld) {
             return super.getMetadata(block, metadataKey);
         } else {
@@ -55,7 +57,7 @@ public class BlockMetadataStore extends MetadataStoreBase<Block> implements Meta
      * @see MetadataStoreBase#hasMetadata(Object, String)
      */
     @Override
-    public boolean hasMetadata(Block block, String metadataKey) {
+    public boolean hasMetadata(@NotNull Block block, @NotNull String metadataKey) {
         if (block.getWorld() == this.owningWorld) {
             return super.hasMetadata(block, metadataKey);
         } else {
@@ -69,7 +71,7 @@ public class BlockMetadataStore extends MetadataStoreBase<Block> implements Meta
      * @see MetadataStoreBase#removeMetadata(Object, String, org.bukkit.plugin.Plugin)
      */
     @Override
-    public void removeMetadata(Block block, String metadataKey, Plugin owningPlugin) {
+    public void removeMetadata(@NotNull Block block, @NotNull String metadataKey, @NotNull Plugin owningPlugin) {
         if (block.getWorld() == this.owningWorld) {
             super.removeMetadata(block, metadataKey, owningPlugin);
         } else {
@@ -83,7 +85,7 @@ public class BlockMetadataStore extends MetadataStoreBase<Block> implements Meta
      * @see MetadataStoreBase#setMetadata(Object, String, org.bukkit.metadata.MetadataValue)
      */
     @Override
-    public void setMetadata(Block block, String metadataKey, MetadataValue newMetadataValue) {
+    public void setMetadata(@NotNull Block block, @NotNull String metadataKey, @NotNull MetadataValue newMetadataValue) {
         if (block.getWorld() == this.owningWorld) {
             super.setMetadata(block, metadataKey, newMetadataValue);
         } else {
diff --git a/src/main/java/org/bukkit/craftbukkit/metadata/EntityMetadataStore.java b/src/main/java/org/bukkit/craftbukkit/metadata/EntityMetadataStore.java
index f475ade1b015339de2b81d5fe7c7324fecd3b875..f6be08778ecb6d085eb1d273bd84cde07f50f354 100644
--- a/src/main/java/org/bukkit/craftbukkit/metadata/EntityMetadataStore.java
+++ b/src/main/java/org/bukkit/craftbukkit/metadata/EntityMetadataStore.java
@@ -3,6 +3,8 @@ package org.bukkit.craftbukkit.metadata;
 import org.bukkit.entity.Entity;
 import org.bukkit.metadata.MetadataStore;
 import org.bukkit.metadata.MetadataStoreBase;
+import org.jetbrains.annotations.NotNull;
+
 
 /**
  * An EntityMetadataStore stores metadata values for all {@link Entity} classes an their descendants.
@@ -17,7 +19,7 @@ public class EntityMetadataStore extends MetadataStoreBase<Entity> implements Me
      * @see MetadataStoreBase#disambiguate(Object, String)
      */
     @Override
-    protected String disambiguate(Entity entity, String metadataKey) {
+    protected @NotNull String disambiguate(@NotNull Entity entity, String metadataKey) {
         return entity.getUniqueId().toString() + ":" + metadataKey;
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/metadata/PlayerMetadataStore.java b/src/main/java/org/bukkit/craftbukkit/metadata/PlayerMetadataStore.java
index 554e81bab6a35feb4c1c9cba4b15afed2e814fda..578ee9185f794f0fd3b339cddef81c6e49c4fd3f 100644
--- a/src/main/java/org/bukkit/craftbukkit/metadata/PlayerMetadataStore.java
+++ b/src/main/java/org/bukkit/craftbukkit/metadata/PlayerMetadataStore.java
@@ -3,6 +3,8 @@ package org.bukkit.craftbukkit.metadata;
 import org.bukkit.OfflinePlayer;
 import org.bukkit.metadata.MetadataStore;
 import org.bukkit.metadata.MetadataStoreBase;
+import org.jetbrains.annotations.NotNull;
+
 
 /**
  * A PlayerMetadataStore stores metadata for {@link org.bukkit.entity.Player} and {@link OfflinePlayer} objects.
@@ -17,7 +19,7 @@ public class PlayerMetadataStore extends MetadataStoreBase<OfflinePlayer> implem
      * @see MetadataStoreBase#disambiguate(Object, String)
      */
     @Override
-    protected String disambiguate(OfflinePlayer player, String metadataKey) {
+    protected @NotNull String disambiguate(@NotNull OfflinePlayer player, String metadataKey) {
         return player.getUniqueId() + ":" + metadataKey;
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/metadata/WorldMetadataStore.java b/src/main/java/org/bukkit/craftbukkit/metadata/WorldMetadataStore.java
index 02996286ad09c36355747685a0b8170a56262c3b..38c9981d03aa73a82284be73f16d832c6647b942 100644
--- a/src/main/java/org/bukkit/craftbukkit/metadata/WorldMetadataStore.java
+++ b/src/main/java/org/bukkit/craftbukkit/metadata/WorldMetadataStore.java
@@ -3,6 +3,8 @@ package org.bukkit.craftbukkit.metadata;
 import org.bukkit.World;
 import org.bukkit.metadata.MetadataStore;
 import org.bukkit.metadata.MetadataStoreBase;
+import org.jetbrains.annotations.NotNull;
+
 
 /**
  * An WorldMetadataStore stores metadata values for {@link World} objects.
@@ -16,7 +18,7 @@ public class WorldMetadataStore extends MetadataStoreBase<World> implements Meta
      * @see WorldMetadataStore#disambiguate(Object, String)
      */
     @Override
-    protected String disambiguate(World world, String metadataKey) {
+    protected @NotNull String disambiguate(@NotNull World world, String metadataKey) {
         return world.getUID().toString() + ":" + metadataKey;
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/persistence/CraftPersistentDataAdapterContext.java b/src/main/java/org/bukkit/craftbukkit/persistence/CraftPersistentDataAdapterContext.java
index 6371f6836d89548bd12ca62ed2b4653c30393e3e..11a70d82e591082c33bab18dc095fc1393936879 100644
--- a/src/main/java/org/bukkit/craftbukkit/persistence/CraftPersistentDataAdapterContext.java
+++ b/src/main/java/org/bukkit/craftbukkit/persistence/CraftPersistentDataAdapterContext.java
@@ -1,6 +1,8 @@
 package org.bukkit.craftbukkit.persistence;
 
 import org.bukkit.persistence.PersistentDataAdapterContext;
+import org.jetbrains.annotations.NotNull;
+
 
 public final class CraftPersistentDataAdapterContext implements PersistentDataAdapterContext {
 
@@ -16,7 +18,7 @@ public final class CraftPersistentDataAdapterContext implements PersistentDataAd
      * @return the fresh container instance
      */
     @Override
-    public CraftPersistentDataContainer newPersistentDataContainer() {
+    public @NotNull CraftPersistentDataContainer newPersistentDataContainer() {
         return new CraftPersistentDataContainer(this.registry);
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/persistence/CraftPersistentDataContainer.java b/src/main/java/org/bukkit/craftbukkit/persistence/CraftPersistentDataContainer.java
index 20c7144307ecf1eb5c600f3b84df7bc15fa941d6..ddefc64ed17e49c91773c7670c92be2a2c01e945 100644
--- a/src/main/java/org/bukkit/craftbukkit/persistence/CraftPersistentDataContainer.java
+++ b/src/main/java/org/bukkit/craftbukkit/persistence/CraftPersistentDataContainer.java
@@ -14,14 +14,16 @@ import org.bukkit.craftbukkit.util.CraftNBTTagConfigSerializer;
 import org.bukkit.persistence.PersistentDataAdapterContext;
 import org.bukkit.persistence.PersistentDataContainer;
 import org.bukkit.persistence.PersistentDataType;
+import org.jetbrains.annotations.NotNull;
+
 
 public class CraftPersistentDataContainer implements PersistentDataContainer {
 
     private final Map<String, Tag> customDataTags = new HashMap<>();
     private final CraftPersistentDataTypeRegistry registry;
-    private final CraftPersistentDataAdapterContext adapterContext;
+    private final @NotNull CraftPersistentDataAdapterContext adapterContext;
 
-    public CraftPersistentDataContainer(Map<String, Tag> customTags, CraftPersistentDataTypeRegistry registry) {
+    public CraftPersistentDataContainer(@NotNull Map<String, Tag> customTags, CraftPersistentDataTypeRegistry registry) {
         this(registry);
         this.customDataTags.putAll(customTags);
     }
@@ -33,7 +35,7 @@ public class CraftPersistentDataContainer implements PersistentDataContainer {
 
 
     @Override
-    public <T, Z> void set(NamespacedKey key, PersistentDataType<T, Z> type, Z value) {
+    public <T, Z> void set(@NotNull NamespacedKey key, @NotNull PersistentDataType<T, Z> type, @NotNull Z value) {
         Validate.notNull(key, "The provided key for the custom value was null");
         Validate.notNull(type, "The provided type for the custom value was null");
         Validate.notNull(value, "The provided value for the custom value was null");
@@ -42,7 +44,7 @@ public class CraftPersistentDataContainer implements PersistentDataContainer {
     }
 
     @Override
-    public <T, Z> boolean has(NamespacedKey key, PersistentDataType<T, Z> type) {
+    public <T, Z> boolean has(@NotNull NamespacedKey key, @NotNull PersistentDataType<T, Z> type) {
         Validate.notNull(key, "The provided key for the custom value was null");
         Validate.notNull(type, "The provided type for the custom value was null");
 
@@ -55,7 +57,7 @@ public class CraftPersistentDataContainer implements PersistentDataContainer {
     }
 
     @Override
-    public <T, Z> Z get(NamespacedKey key, PersistentDataType<T, Z> type) {
+    public <T, Z> Z get(@NotNull NamespacedKey key, @NotNull PersistentDataType<T, Z> type) {
         Validate.notNull(key, "The provided key for the custom value was null");
         Validate.notNull(type, "The provided type for the custom value was null");
 
@@ -68,13 +70,13 @@ public class CraftPersistentDataContainer implements PersistentDataContainer {
     }
 
     @Override
-    public <T, Z> Z getOrDefault(NamespacedKey key, PersistentDataType<T, Z> type, Z defaultValue) {
+    public <T, Z> @NotNull Z getOrDefault(@NotNull NamespacedKey key, @NotNull PersistentDataType<T, Z> type, @NotNull Z defaultValue) {
         Z z = this.get(key, type);
         return z != null ? z : defaultValue;
     }
 
     @Override
-    public Set<NamespacedKey> getKeys() {
+    public @NotNull Set<NamespacedKey> getKeys() {
         Set<NamespacedKey> keys = new HashSet<>();
 
         this.customDataTags.keySet().forEach(key -> {
@@ -88,7 +90,7 @@ public class CraftPersistentDataContainer implements PersistentDataContainer {
     }
 
     @Override
-    public void remove(NamespacedKey key) {
+    public void remove(@NotNull NamespacedKey key) {
         Validate.notNull(key, "The provided key for the custom value was null");
 
         this.customDataTags.remove(key.toString());
@@ -100,7 +102,7 @@ public class CraftPersistentDataContainer implements PersistentDataContainer {
     }
 
     @Override
-    public PersistentDataAdapterContext getAdapterContext() {
+    public @NotNull PersistentDataAdapterContext getAdapterContext() {
         return this.adapterContext;
     }
 
@@ -116,7 +118,7 @@ public class CraftPersistentDataContainer implements PersistentDataContainer {
         return Objects.equals(myRawMap, theirRawMap);
     }
 
-    public CompoundTag toTagCompound() {
+    public @NotNull CompoundTag toTagCompound() {
         CompoundTag tag = new CompoundTag();
         for (Entry<String, Tag> entry : this.customDataTags.entrySet()) {
             tag.put(entry.getKey(), entry.getValue());
@@ -128,17 +130,17 @@ public class CraftPersistentDataContainer implements PersistentDataContainer {
         this.customDataTags.put(key, base);
     }
 
-    public void putAll(Map<String, Tag> map) {
+    public void putAll(@NotNull Map<String, Tag> map) {
         this.customDataTags.putAll(map);
     }
 
-    public void putAll(CompoundTag compound) {
+    public void putAll(@NotNull CompoundTag compound) {
         for (String key : compound.getAllKeys()) {
             this.customDataTags.put(key, compound.get(key));
         }
     }
 
-    public Map<String, Tag> getRaw() {
+    public @NotNull Map<String, Tag> getRaw() {
         return this.customDataTags;
     }
 
@@ -163,7 +165,7 @@ public class CraftPersistentDataContainer implements PersistentDataContainer {
     }
 
     @Override
-    public boolean has(NamespacedKey key) {
+    public boolean has(@NotNull NamespacedKey key) {
         Validate.notNull(key, "The provided key for the custom value was null");
 
         return this.customDataTags.containsKey(key.toString());
@@ -180,7 +182,7 @@ public class CraftPersistentDataContainer implements PersistentDataContainer {
     }
 
     @Override
-    public void readFromBytes(byte[] bytes, boolean clear) throws java.io.IOException {
+    public void readFromBytes(byte @NotNull [] bytes, boolean clear) throws java.io.IOException {
         if (clear) {
             this.clear();
         }
diff --git a/src/main/java/org/bukkit/craftbukkit/persistence/CraftPersistentDataTypeRegistry.java b/src/main/java/org/bukkit/craftbukkit/persistence/CraftPersistentDataTypeRegistry.java
index 355c9f79fd3132848a00eacde951d1e1bfa92737..e280c56991b5fbc6ad5def415e5e75e7e10108ce 100644
--- a/src/main/java/org/bukkit/craftbukkit/persistence/CraftPersistentDataTypeRegistry.java
+++ b/src/main/java/org/bukkit/craftbukkit/persistence/CraftPersistentDataTypeRegistry.java
@@ -20,6 +20,8 @@ import net.minecraft.nbt.ShortTag;
 import net.minecraft.nbt.StringTag;
 import net.minecraft.nbt.Tag;
 import org.bukkit.persistence.PersistentDataContainer;
+import org.jetbrains.annotations.NotNull;
+
 
 /**
  * This class represents a registry that contains the used adapters for.
@@ -55,7 +57,7 @@ public final class CraftPersistentDataTypeRegistry {
          * the defined base type and therefore is not applicable to the
          * extractor function
          */
-        T extract(Tag base) {
+        T extract(@NotNull Tag base) {
             if (!this.nbtBaseType.isInstance(base)) {
                 throw new IllegalArgumentException(String.format("The provided NBTBase was of the type %s. Expected type %s", base.getClass().getSimpleName(), this.nbtBaseType.getSimpleName()));
             }
@@ -73,7 +75,7 @@ public final class CraftPersistentDataTypeRegistry {
          * defined primitive type and therefore is not applicable to the builder
          * function
          */
-        Z build(Object value) {
+        Z build(@NotNull Object value) {
             if (!this.primitiveType.isInstance(value)) {
                 throw new IllegalArgumentException(String.format("The provided value was of the type %s. Expected type %s", value.getClass().getSimpleName(), this.primitiveType.getSimpleName()));
             }
@@ -105,7 +107,7 @@ public final class CraftPersistentDataTypeRegistry {
      * @throws IllegalArgumentException if no suitable tag type adapter for this
      * type was found
      */
-    private <T> TagAdapter createAdapter(Class<T> type) {
+    private <T> @NotNull TagAdapter createAdapter(@NotNull Class<T> type) {
         if (!Primitives.isWrapperType(type)) {
             type = Primitives.wrap(type); //Make sure we will always "switch" over the wrapper types
         }
@@ -195,7 +197,7 @@ public final class CraftPersistentDataTypeRegistry {
         throw new IllegalArgumentException("Could not find a valid TagAdapter implementation for the requested type " + type.getSimpleName());
     }
 
-    private <T, Z extends Tag> TagAdapter<T, Z> createAdapter(Class<T> primitiveType, Class<Z> nbtBaseType, Function<T, Z> builder, Function<Z, T> extractor) {
+    private <T, Z extends Tag> @NotNull TagAdapter<T, Z> createAdapter(Class<T> primitiveType, Class<Z> nbtBaseType, Function<T, Z> builder, Function<Z, T> extractor) {
         return new TagAdapter<>(primitiveType, nbtBaseType, builder, extractor);
     }
 
@@ -211,7 +213,7 @@ public final class CraftPersistentDataTypeRegistry {
      * @throws IllegalArgumentException if no suitable tag type adapter for this
      * type was found
      */
-    public <T> Tag wrap(Class<T> type, T value) {
+    public <T> Tag wrap(Class<T> type, @NotNull T value) {
         return this.adapters.computeIfAbsent(type, CREATE_ADAPTER).build(value);
     }
 
@@ -248,7 +250,7 @@ public final class CraftPersistentDataTypeRegistry {
      * @throws IllegalArgumentException if no suitable tag type adapter for this
      * type was found
      */
-    public <T> T extract(Class<T> type, Tag tag) throws ClassCastException, IllegalArgumentException {
+    public <T> @NotNull T extract(@NotNull Class<T> type, @NotNull Tag tag) throws ClassCastException, IllegalArgumentException {
         TagAdapter adapter = this.adapters.computeIfAbsent(type, CREATE_ADAPTER);
         if (!adapter.isInstance(tag)) {
             throw new IllegalArgumentException(String.format("`The found tag instance cannot store %s as it is a %s", type.getSimpleName(), tag.getClass().getSimpleName()));
diff --git a/src/main/java/org/bukkit/craftbukkit/persistence/DirtyCraftPersistentDataContainer.java b/src/main/java/org/bukkit/craftbukkit/persistence/DirtyCraftPersistentDataContainer.java
index 8cc323eedd516307f16f31cb9d8f6bfb67ce8273..e6986cafbe43dcc2cafefb11d2af0918378fb79b 100644
--- a/src/main/java/org/bukkit/craftbukkit/persistence/DirtyCraftPersistentDataContainer.java
+++ b/src/main/java/org/bukkit/craftbukkit/persistence/DirtyCraftPersistentDataContainer.java
@@ -5,6 +5,8 @@ import net.minecraft.nbt.CompoundTag;
 import net.minecraft.nbt.Tag;
 import org.bukkit.NamespacedKey;
 import org.bukkit.persistence.PersistentDataType;
+import org.jetbrains.annotations.NotNull;
+
 
 /**
  * A child class of the persistent data container that recalls if it has been
@@ -14,7 +16,7 @@ public final class DirtyCraftPersistentDataContainer extends CraftPersistentData
 
     private boolean dirty;
 
-    public DirtyCraftPersistentDataContainer(Map<String, Tag> customTags, CraftPersistentDataTypeRegistry registry) {
+    public DirtyCraftPersistentDataContainer(@NotNull Map<String, Tag> customTags, CraftPersistentDataTypeRegistry registry) {
         super(customTags, registry);
     }
 
@@ -31,13 +33,13 @@ public final class DirtyCraftPersistentDataContainer extends CraftPersistentData
     }
 
     @Override
-    public <T, Z> void set(NamespacedKey key, PersistentDataType<T, Z> type, Z value) {
+    public <T, Z> void set(@NotNull NamespacedKey key, @NotNull PersistentDataType<T, Z> type, @NotNull Z value) {
         super.set(key, type, value);
         this.dirty(true);
     }
 
     @Override
-    public void remove(NamespacedKey key) {
+    public void remove(@NotNull NamespacedKey key) {
         super.remove(key);
         this.dirty(true);
     }
@@ -49,13 +51,13 @@ public final class DirtyCraftPersistentDataContainer extends CraftPersistentData
     }
 
     @Override
-    public void putAll(CompoundTag compound) {
+    public void putAll(@NotNull CompoundTag compound) {
         super.putAll(compound);
         this.dirty(true);
     }
 
     @Override
-    public void putAll(Map<String, Tag> map) {
+    public void putAll(@NotNull Map<String, Tag> map) {
         super.putAll(map);
         this.dirty(true);
     }
diff --git a/src/main/java/org/bukkit/craftbukkit/potion/CraftPotionBrewer.java b/src/main/java/org/bukkit/craftbukkit/potion/CraftPotionBrewer.java
index a0b0c64b819b8f713eeea78210e276664e30e66e..17e6bdb7b7e1a1372158dec63487b1eed6564e5e 100644
--- a/src/main/java/org/bukkit/craftbukkit/potion/CraftPotionBrewer.java
+++ b/src/main/java/org/bukkit/craftbukkit/potion/CraftPotionBrewer.java
@@ -13,12 +13,14 @@ import org.bukkit.potion.PotionData;
 import org.bukkit.potion.PotionEffect;
 import org.bukkit.potion.PotionEffectType;
 import org.bukkit.potion.PotionType;
+import org.jetbrains.annotations.NotNull;
+
 
 public class CraftPotionBrewer implements PotionBrewer {
     private static final Map<Integer, Collection<PotionEffect>> cache = Maps.newHashMap(); // Paper
 
     @Override
-    public Collection<PotionEffect> getEffects(PotionType damage, boolean upgraded, boolean extended) {
+    public @NotNull Collection<PotionEffect> getEffects(@NotNull PotionType damage, boolean upgraded, boolean extended) {
         // Paper start
         int key = damage.ordinal() << 2;
         key |= (upgraded ? 1 : 0) << 1;
@@ -41,23 +43,23 @@ public class CraftPotionBrewer implements PotionBrewer {
     }
 
     @Override
-    public Collection<PotionEffect> getEffectsFromDamage(int damage) {
+    public @NotNull Collection<PotionEffect> getEffectsFromDamage(int damage) {
         return new ArrayList<PotionEffect>();
     }
 
     @Override
-    public PotionEffect createEffect(PotionEffectType potion, int duration, int amplifier) {
+    public @NotNull PotionEffect createEffect(@NotNull PotionEffectType potion, int duration, int amplifier) {
         return new PotionEffect(potion, potion.isInstant() ? 1 : (int) (duration * potion.getDurationModifier()), amplifier);
     }
 
     // Paper start
     @Override
-    public void addPotionMix(io.papermc.paper.potion.PotionMix potionMix) {
+    public void addPotionMix(io.papermc.paper.potion.@NotNull PotionMix potionMix) {
         net.minecraft.world.item.alchemy.PotionBrewing.addPotionMix(potionMix);
     }
 
     @Override
-    public void removePotionMix(org.bukkit.NamespacedKey key) {
+    public void removePotionMix(org.bukkit.@NotNull NamespacedKey key) {
         net.minecraft.world.item.alchemy.PotionBrewing.removePotionMix(key);
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/potion/CraftPotionEffectType.java b/src/main/java/org/bukkit/craftbukkit/potion/CraftPotionEffectType.java
index 3bda325cfd5d0d8dcc878cf547c9ae9e82fde240..2f2938bd7507fd9389064c3aa279cf57e58c5dd3 100644
--- a/src/main/java/org/bukkit/craftbukkit/potion/CraftPotionEffectType.java
+++ b/src/main/java/org/bukkit/craftbukkit/potion/CraftPotionEffectType.java
@@ -4,11 +4,13 @@ import net.minecraft.core.registries.BuiltInRegistries;
 import net.minecraft.world.effect.MobEffect;
 import org.bukkit.Color;
 import org.bukkit.potion.PotionEffectType;
+import org.jetbrains.annotations.NotNull;
+
 
 public class CraftPotionEffectType extends PotionEffectType {
-    private final MobEffect handle;
+    private final @NotNull MobEffect handle;
 
-    public CraftPotionEffectType(MobEffect handle) {
+    public CraftPotionEffectType(@NotNull MobEffect handle) {
         super(MobEffect.getId(handle), org.bukkit.craftbukkit.util.CraftNamespacedKey.fromMinecraft(BuiltInRegistries.MOB_EFFECT.getKey(handle)));
         this.handle = handle;
     }
@@ -23,7 +25,7 @@ public class CraftPotionEffectType extends PotionEffectType {
     }
 
     @Override
-    public String getName() {
+    public @NotNull String getName() {
         switch (getId()) {
         case 1:
             return "SPEED";
@@ -102,17 +104,17 @@ public class CraftPotionEffectType extends PotionEffectType {
     }
 
     @Override
-    public Color getColor() {
+    public @NotNull Color getColor() {
         return Color.fromRGB(this.handle.getColor());
     }
     // Paper start
     @Override
-    public org.bukkit.NamespacedKey getKey() {
+    public org.bukkit.@NotNull NamespacedKey getKey() {
         return org.bukkit.craftbukkit.util.CraftNamespacedKey.fromMinecraft(net.minecraft.core.registries.BuiltInRegistries.MOB_EFFECT.getKey(this.handle));
     }
 
     @Override
-    public java.util.Map<org.bukkit.attribute.Attribute, org.bukkit.attribute.AttributeModifier> getEffectAttributes() {
+    public java.util.@NotNull Map<org.bukkit.attribute.Attribute, org.bukkit.attribute.AttributeModifier> getEffectAttributes() {
         // re-create map each time because a nms MobEffect can have its attributes modified
         final java.util.Map<org.bukkit.attribute.Attribute, org.bukkit.attribute.AttributeModifier> attributeMap = new java.util.HashMap<>();
         this.handle.getAttributeModifiers().forEach((attribute, attributeModifier) -> {
@@ -122,7 +124,7 @@ public class CraftPotionEffectType extends PotionEffectType {
     }
 
     @Override
-    public double getAttributeModifierAmount(org.bukkit.attribute.Attribute attribute, int effectAmplifier) {
+    public double getAttributeModifierAmount(org.bukkit.attribute.@NotNull Attribute attribute, int effectAmplifier) {
         com.google.common.base.Preconditions.checkArgument(effectAmplifier >= 0, "effectAmplifier must be greater than or equal to 0");
         net.minecraft.world.entity.ai.attributes.Attribute nmsAttribute = org.bukkit.craftbukkit.attribute.CraftAttributeMap.toMinecraft(attribute);
         com.google.common.base.Preconditions.checkArgument(this.handle.getAttributeModifiers().containsKey(nmsAttribute), attribute + " is not present on " + this.getKey());
@@ -130,16 +132,16 @@ public class CraftPotionEffectType extends PotionEffectType {
     }
 
     @Override
-    public PotionEffectType.Category getEffectCategory() {
+    public PotionEffectType.@NotNull Category getEffectCategory() {
         return fromNMS(handle.getCategory());
     }
 
     @Override
-    public String translationKey() {
+    public @NotNull String translationKey() {
         return this.handle.getDescriptionId();
     }
 
-    public static PotionEffectType.Category fromNMS(net.minecraft.world.effect.MobEffectCategory mobEffectInfo) {
+    public static PotionEffectType.@NotNull Category fromNMS(net.minecraft.world.effect.@NotNull MobEffectCategory mobEffectInfo) {
         return switch (mobEffectInfo) {
             case BENEFICIAL -> PotionEffectType.Category.BENEFICIAL;
             case HARMFUL -> PotionEffectType.Category.HARMFUL;
diff --git a/src/main/java/org/bukkit/craftbukkit/potion/CraftPotionUtil.java b/src/main/java/org/bukkit/craftbukkit/potion/CraftPotionUtil.java
index acb69821a99aa69bce6d127e10976089c85be223..e0bbf10eb53d4bc164a0c73ce8e114347af7e5fc 100644
--- a/src/main/java/org/bukkit/craftbukkit/potion/CraftPotionUtil.java
+++ b/src/main/java/org/bukkit/craftbukkit/potion/CraftPotionUtil.java
@@ -9,6 +9,9 @@ import org.bukkit.potion.PotionData;
 import org.bukkit.potion.PotionEffect;
 import org.bukkit.potion.PotionEffectType;
 import org.bukkit.potion.PotionType;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 public class CraftPotionUtil {
 
@@ -62,7 +65,7 @@ public class CraftPotionUtil {
             .put(PotionType.SLOW_FALLING, "long_slow_falling")
             .build();
 
-    public static String fromBukkit(PotionData data) {
+    public static @NotNull String fromBukkit(@NotNull PotionData data) {
         String type;
         if (data.isUpgraded()) {
             type = CraftPotionUtil.upgradeable.get(data.getType());
@@ -76,7 +79,7 @@ public class CraftPotionUtil {
         return "minecraft:" + type;
     }
 
-    public static PotionData toBukkit(String type) {
+    public static @NotNull PotionData toBukkit(@Nullable String type) {
         if (type == null) {
             return new PotionData(PotionType.UNCRAFTABLE, false, false);
         }
@@ -99,12 +102,12 @@ public class CraftPotionUtil {
         return new PotionData(PotionType.UNCRAFTABLE, false, false);
     }
 
-    public static MobEffectInstance fromBukkit(PotionEffect effect) {
+    public static @NotNull MobEffectInstance fromBukkit(@NotNull PotionEffect effect) {
         MobEffect type = MobEffect.byId(effect.getType().getId());
         return new MobEffectInstance(type, effect.getDuration(), effect.getAmplifier(), effect.isAmbient(), effect.hasParticles());
     }
 
-    public static PotionEffect toBukkit(MobEffectInstance effect) {
+    public static @NotNull PotionEffect toBukkit(@NotNull MobEffectInstance effect) {
         PotionEffectType type = PotionEffectType.getById(MobEffect.getId(effect.getEffect()));
         int amp = effect.getAmplifier();
         int duration = effect.getDuration();
@@ -113,7 +116,7 @@ public class CraftPotionUtil {
         return new PotionEffect(type, duration, amp, ambient, particles);
     }
 
-    public static boolean equals(MobEffect mobEffect, PotionEffectType type) {
+    public static boolean equals(@NotNull MobEffect mobEffect, PotionEffectType type) {
         PotionEffectType typeV = PotionEffectType.getById(MobEffect.getId(mobEffect));
         return typeV.equals(type);
     }
diff --git a/src/main/java/org/bukkit/craftbukkit/profile/CraftPlayerProfile.java b/src/main/java/org/bukkit/craftbukkit/profile/CraftPlayerProfile.java
index 6ca6467a47c6658d3a2e2029821aa727599a6f74..b149322470e01fa1ce394b002e66ff74300f1c18 100644
--- a/src/main/java/org/bukkit/craftbukkit/profile/CraftPlayerProfile.java
+++ b/src/main/java/org/bukkit/craftbukkit/profile/CraftPlayerProfile.java
@@ -25,6 +25,8 @@ import org.bukkit.craftbukkit.CraftServer;
 import org.bukkit.craftbukkit.configuration.ConfigSerializationUtil;
 import org.bukkit.profile.PlayerProfile;
 import org.bukkit.profile.PlayerTextures;
+import org.jetbrains.annotations.NotNull;
+
 
 @SerializableAs("PlayerProfile")
 public final class CraftPlayerProfile implements PlayerProfile, com.destroystokyo.paper.profile.SharedPlayerProfile { // Paper
@@ -44,13 +46,13 @@ public final class CraftPlayerProfile implements PlayerProfile, com.destroystoky
         return Iterables.getFirst(profile.getProperties().get(propertyName), null);
     }
 
-    private final UUID uniqueId;
+    private final @org.jetbrains.annotations.Nullable UUID uniqueId;
     private final String name;
 
     private final PropertyMap properties = new PropertyMap();
     private final CraftPlayerTextures textures = new CraftPlayerTextures(this);
 
-    public CraftPlayerProfile(UUID uniqueId, String name) {
+    public CraftPlayerProfile(@org.jetbrains.annotations.Nullable UUID uniqueId, String name) {
         Preconditions.checkArgument((uniqueId != null) || !StringUtils.isBlank(name), "uniqueId is null or name is blank");
         this.uniqueId = uniqueId;
         this.name = name;
@@ -103,7 +105,7 @@ public final class CraftPlayerProfile implements PlayerProfile, com.destroystoky
     }
 
     @Override
-    public CraftPlayerTextures getTextures() {
+    public @NotNull CraftPlayerTextures getTextures() {
         return this.textures;
     }
 
@@ -122,11 +124,11 @@ public final class CraftPlayerProfile implements PlayerProfile, com.destroystoky
     }
 
     @Override
-    public CompletableFuture<PlayerProfile> update() {
+    public @NotNull CompletableFuture<PlayerProfile> update() {
         return CompletableFuture.supplyAsync(this::getUpdatedProfile, Util.PROFILE_EXECUTOR); // Paper - not a good idea to use BLOCKING OPERATIONS on the worldgen executor
     }
 
-    private CraftPlayerProfile getUpdatedProfile() {
+    private @NotNull CraftPlayerProfile getUpdatedProfile() {
         DedicatedServer server = ((CraftServer) Bukkit.getServer()).getServer();
         GameProfile profile = this.buildGameProfile();
 
@@ -157,7 +159,7 @@ public final class CraftPlayerProfile implements PlayerProfile, com.destroystoky
     }
 
     @Override
-    public String toString() {
+    public @NotNull String toString() {
         this.rebuildDirtyProperties();
         StringBuilder builder = new StringBuilder();
         builder.append("CraftPlayerProfile [uniqueId=");
@@ -170,7 +172,7 @@ public final class CraftPlayerProfile implements PlayerProfile, com.destroystoky
         return builder.toString();
     }
 
-    public static String toString(@Nonnull PropertyMap propertyMap) {
+    public static @NotNull String toString(@Nonnull PropertyMap propertyMap) {
         StringBuilder builder = new StringBuilder();
         builder.append("{");
         propertyMap.asMap().forEach((propertyName, properties) -> {
@@ -223,7 +225,7 @@ public final class CraftPlayerProfile implements PlayerProfile, com.destroystoky
         return result;
     }
 
-    private static int hashCode(PropertyMap propertyMap) {
+    private static int hashCode(@NotNull PropertyMap propertyMap) {
         int result = 1;
         for (Property property : propertyMap.values()) {
             result = 31 * result + CraftProfileProperty.hashCode(property);
@@ -232,12 +234,12 @@ public final class CraftPlayerProfile implements PlayerProfile, com.destroystoky
     }
 
     @Override
-    public CraftPlayerProfile clone() {
+    public @NotNull CraftPlayerProfile clone() {
         return new CraftPlayerProfile(this);
     }
 
     @Override
-    public Map<String, Object> serialize() {
+    public @NotNull Map<String, Object> serialize() {
         // Paper - diff on change
         Map<String, Object> map = new LinkedHashMap<>();
         if (this.uniqueId != null) {
@@ -258,7 +260,7 @@ public final class CraftPlayerProfile implements PlayerProfile, com.destroystoky
         return map;
     }
 
-    public static CraftPlayerProfile deserialize(Map<String, Object> map) {
+    public static @NotNull CraftPlayerProfile deserialize(@NotNull Map<String, Object> map) {
         // Paper - diff on change
         UUID uniqueId = ConfigSerializationUtil.getUuid(map, "uniqueId", true);
         String name = ConfigSerializationUtil.getString(map, "name", true);
diff --git a/src/main/java/org/bukkit/craftbukkit/profile/CraftPlayerTextures.java b/src/main/java/org/bukkit/craftbukkit/profile/CraftPlayerTextures.java
index ab1fd3fb39bd40fb867432861462db5f866bce6f..2b2f9c0b34eaee466a8e1a1dfc1b5f3260dc9f10 100644
--- a/src/main/java/org/bukkit/craftbukkit/profile/CraftPlayerTextures.java
+++ b/src/main/java/org/bukkit/craftbukkit/profile/CraftPlayerTextures.java
@@ -13,6 +13,8 @@ import javax.annotation.Nonnull;
 import javax.annotation.Nullable;
 import org.bukkit.craftbukkit.util.JsonHelper;
 import org.bukkit.profile.PlayerTextures;
+import org.jetbrains.annotations.NotNull;
+
 
 public final class CraftPlayerTextures implements PlayerTextures {
 
@@ -48,17 +50,17 @@ public final class CraftPlayerTextures implements PlayerTextures {
         }
     }
 
-    private final com.destroystokyo.paper.profile.SharedPlayerProfile profile; // Paper
+    private final com.destroystokyo.paper.profile.@NotNull SharedPlayerProfile profile; // Paper
 
     // The textures data is loaded lazily:
     private boolean loaded = false;
-    private JsonObject data; // Immutable contents (only read)
+    private @org.jetbrains.annotations.Nullable JsonObject data; // Immutable contents (only read)
     private long timestamp;
 
     // Lazily decoded textures data that can subsequently be overwritten:
-    private URL skin;
-    private SkinModel skinModel = SkinModel.CLASSIC;
-    private URL cape;
+    private @org.jetbrains.annotations.Nullable URL skin;
+    private @org.jetbrains.annotations.Nullable SkinModel skinModel = SkinModel.CLASSIC;
+    private @org.jetbrains.annotations.Nullable URL cape;
 
     // Dirty: Indicates a change that requires a rebuild of the property.
     // This also indicates an invalidation of any previously present textures data that is specific to official
@@ -188,7 +190,7 @@ public final class CraftPlayerTextures implements PlayerTextures {
     }
 
     @Override
-    public void setSkin(URL skinUrl, SkinModel skinModel) {
+    public void setSkin(@org.jetbrains.annotations.Nullable URL skinUrl, @org.jetbrains.annotations.Nullable SkinModel skinModel) {
         CraftPlayerTextures.validateTextureUrl(skinUrl);
         if (skinModel == null) skinModel = SkinModel.CLASSIC;
         // This also loads the textures if necessary:
@@ -199,7 +201,7 @@ public final class CraftPlayerTextures implements PlayerTextures {
     }
 
     @Override
-    public SkinModel getSkinModel() {
+    public @NotNull SkinModel getSkinModel() {
         this.ensureLoaded();
         return this.skinModel;
     }
@@ -291,7 +293,7 @@ public final class CraftPlayerTextures implements PlayerTextures {
     }
 
     @Override
-    public String toString() {
+    public @NotNull String toString() {
         StringBuilder builder = new StringBuilder();
         builder.append("CraftPlayerTextures [data=");
         builder.append(this.getData());
diff --git a/src/main/java/org/bukkit/craftbukkit/profile/CraftProfileProperty.java b/src/main/java/org/bukkit/craftbukkit/profile/CraftProfileProperty.java
index 4156601dcd4e5d146188290d31d2181d495b4480..14ba46ddd58c5716f7a844ce9ad4a950c5bb818d 100644
--- a/src/main/java/org/bukkit/craftbukkit/profile/CraftProfileProperty.java
+++ b/src/main/java/org/bukkit/craftbukkit/profile/CraftProfileProperty.java
@@ -20,6 +20,8 @@ import javax.annotation.Nonnull;
 import javax.annotation.Nullable;
 import org.apache.commons.io.IOUtils;
 import org.bukkit.craftbukkit.configuration.ConfigSerializationUtil;
+import org.jetbrains.annotations.NotNull;
+
 
 public final class CraftProfileProperty {
 
@@ -117,7 +119,7 @@ public final class CraftProfileProperty {
         return true;
     }
 
-    public static Map<String, Object> serialize(@Nonnull Property property) {
+    public static @NotNull Map<String, Object> serialize(@Nonnull Property property) {
         Map<String, Object> map = new LinkedHashMap<>();
         map.put("name", property.getName());
         map.put("value", property.getValue());
@@ -127,7 +129,7 @@ public final class CraftProfileProperty {
         return map;
     }
 
-    public static Property deserialize(@Nonnull Map<?, ?> map) {
+    public static @NotNull Property deserialize(@Nonnull Map<?, ?> map) {
         String name = ConfigSerializationUtil.getString(map, "name", false);
         String value = ConfigSerializationUtil.getString(map, "value", false);
         String signature = ConfigSerializationUtil.getString(map, "signature", true);
diff --git a/src/main/java/org/bukkit/craftbukkit/projectiles/CraftBlockProjectileSource.java b/src/main/java/org/bukkit/craftbukkit/projectiles/CraftBlockProjectileSource.java
index 2afb7af0a90959edd3b0ead2fe4d9018b5560aa4..6e0bd0da4bf99b7376255c77ed24144569cc7c7d 100644
--- a/src/main/java/org/bukkit/craftbukkit/projectiles/CraftBlockProjectileSource.java
+++ b/src/main/java/org/bukkit/craftbukkit/projectiles/CraftBlockProjectileSource.java
@@ -37,6 +37,9 @@ import org.bukkit.potion.PotionData;
 import org.bukkit.potion.PotionType;
 import org.bukkit.projectiles.BlockProjectileSource;
 import org.bukkit.util.Vector;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 public class CraftBlockProjectileSource implements BlockProjectileSource {
     private final DispenserBlockEntity dispenserBlock;
@@ -46,23 +49,23 @@ public class CraftBlockProjectileSource implements BlockProjectileSource {
     }
 
     @Override
-    public Block getBlock() {
+    public @NotNull Block getBlock() {
         return this.dispenserBlock.getLevel().getWorld().getBlockAt(this.dispenserBlock.getBlockPos().getX(), this.dispenserBlock.getBlockPos().getY(), this.dispenserBlock.getBlockPos().getZ());
     }
 
     @Override
-    public <T extends Projectile> T launchProjectile(Class<? extends T> projectile) {
+    public <T extends Projectile> @NotNull T launchProjectile(@NotNull Class<? extends T> projectile) {
         return this.launchProjectile(projectile, null);
     }
 
     @Override
-    public <T extends Projectile> T launchProjectile(Class<? extends T> projectile, Vector velocity) {
+    public <T extends Projectile> @NotNull T launchProjectile(@NotNull Class<? extends T> projectile, Vector velocity) {
         // Paper start - launchProjectile consumer
         return this.launchProjectile(projectile, velocity, null);
     }
 
     @Override
-    public <T extends Projectile> T launchProjectile(Class<? extends T> projectile, Vector velocity, org.bukkit.util.Consumer<T> function) {
+    public <T extends Projectile> @NotNull T launchProjectile(@NotNull Class<? extends T> projectile, @Nullable Vector velocity, org.bukkit.util.@Nullable Consumer<T> function) {
         // Paper end - launchProjectile consumer
         Validate.isTrue(this.getBlock().getType() == Material.DISPENSER, "Block is no longer dispenser");
         // Copied from BlockDispenser.dispense()
diff --git a/src/main/java/org/bukkit/craftbukkit/scheduler/CraftAsyncDebugger.java b/src/main/java/org/bukkit/craftbukkit/scheduler/CraftAsyncDebugger.java
index 60feec6896b225a40a1e1f02f85147cbbf537b71..bfbd223bd06073af674be1e0f74f8a3563ff902c 100644
--- a/src/main/java/org/bukkit/craftbukkit/scheduler/CraftAsyncDebugger.java
+++ b/src/main/java/org/bukkit/craftbukkit/scheduler/CraftAsyncDebugger.java
@@ -1,9 +1,12 @@
 package org.bukkit.craftbukkit.scheduler;
 
 import org.bukkit.plugin.Plugin;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 class CraftAsyncDebugger {
-    private CraftAsyncDebugger next = null;
+    private @Nullable CraftAsyncDebugger next = null;
     private final int expiry;
     private final Plugin plugin;
     private final Class<?> clazz;
@@ -15,7 +18,7 @@ class CraftAsyncDebugger {
 
     }
 
-    final CraftAsyncDebugger getNextHead(final int time) {
+    final @NotNull CraftAsyncDebugger getNextHead(final int time) {
         CraftAsyncDebugger next, current = this;
         while (time > current.expiry && (next = current.next) != null) {
             current = next;
@@ -27,7 +30,7 @@ class CraftAsyncDebugger {
         return this.next = next;
     }
 
-    StringBuilder debugTo(final StringBuilder string) {
+    @NotNull StringBuilder debugTo(final @NotNull StringBuilder string) {
         for (CraftAsyncDebugger next = this; next != null; next = next.next) {
             string.append(next.plugin.getDescription().getName()).append(':').append(next.clazz.getName()).append('@').append(next.expiry).append(',');
         }
diff --git a/src/main/java/org/bukkit/craftbukkit/scheduler/CraftAsyncScheduler.java b/src/main/java/org/bukkit/craftbukkit/scheduler/CraftAsyncScheduler.java
index 9c1aff17aabd062640e3f451a2ef8c50a7c62f10..c62f736947c8824805ea08cc8e9b48b49e2a0645 100644
--- a/src/main/java/org/bukkit/craftbukkit/scheduler/CraftAsyncScheduler.java
+++ b/src/main/java/org/bukkit/craftbukkit/scheduler/CraftAsyncScheduler.java
@@ -26,6 +26,8 @@ package org.bukkit.craftbukkit.scheduler;
 import com.destroystokyo.paper.ServerSchedulerReportingWrapper;
 import com.google.common.util.concurrent.ThreadFactoryBuilder;
 import org.bukkit.plugin.Plugin;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
 
 import java.util.ArrayList;
 import java.util.Iterator;
@@ -90,7 +92,7 @@ public class CraftAsyncScheduler extends CraftScheduler {
         temp.clear();
     }
 
-    private boolean executeTask(CraftTask task) {
+    private boolean executeTask(@NotNull CraftTask task) {
         if (isValid(task)) {
             this.runners.put(task.getTaskId(), task);
             this.executor.execute(new ServerSchedulerReportingWrapper(task));
@@ -100,7 +102,7 @@ public class CraftAsyncScheduler extends CraftScheduler {
     }
 
     @Override
-    public synchronized void cancelTasks(Plugin plugin) {
+    public synchronized void cancelTasks(@Nullable Plugin plugin) {
         parsePending();
         for (Iterator<CraftTask> iterator = this.pending.iterator(); iterator.hasNext(); ) {
             CraftTask task = iterator.next();
@@ -116,7 +118,7 @@ public class CraftAsyncScheduler extends CraftScheduler {
      * @param runningTask
      * @return
      */
-    static boolean isValid(CraftTask runningTask) {
+    static boolean isValid(@NotNull CraftTask runningTask) {
         return runningTask.getPeriod() >= CraftTask.NO_REPEATING;
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/scheduler/CraftAsyncTask.java b/src/main/java/org/bukkit/craftbukkit/scheduler/CraftAsyncTask.java
index 6d66f83afbeb650b10669fd7eeb24a315951fa86..29d9be9ebee801a12e765812588ddad5ced7ad36 100644
--- a/src/main/java/org/bukkit/craftbukkit/scheduler/CraftAsyncTask.java
+++ b/src/main/java/org/bukkit/craftbukkit/scheduler/CraftAsyncTask.java
@@ -6,6 +6,8 @@ import java.util.Map;
 import java.util.logging.Level;
 import org.bukkit.plugin.Plugin;
 import org.bukkit.scheduler.BukkitWorker;
+import org.jetbrains.annotations.NotNull;
+
 
 class CraftAsyncTask extends CraftTask {
 
@@ -37,7 +39,7 @@ class CraftAsyncTask extends CraftTask {
             this.workers.add(
                 new BukkitWorker() {
                     @Override
-                    public Thread getThread() {
+                    public @NotNull Thread getThread() {
                         return thread;
                     }
 
@@ -47,7 +49,7 @@ class CraftAsyncTask extends CraftTask {
                     }
 
                     @Override
-                    public Plugin getOwner() {
+                    public @NotNull Plugin getOwner() {
                         return CraftAsyncTask.this.getOwner();
                     }
                 });
@@ -98,7 +100,7 @@ class CraftAsyncTask extends CraftTask {
         } finally { thread.setName(nameBefore); } // Paper - name worker thread according
     }
 
-    LinkedList<BukkitWorker> getWorkers() {
+    @NotNull LinkedList<BukkitWorker> getWorkers() {
         return this.workers;
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/scheduler/CraftFuture.java b/src/main/java/org/bukkit/craftbukkit/scheduler/CraftFuture.java
index 91baac5f5b8d6342f13aa56b712c8500ecd1e420..1d5fd2104f3a357486d7b40972316292abefcbcb 100644
--- a/src/main/java/org/bukkit/craftbukkit/scheduler/CraftFuture.java
+++ b/src/main/java/org/bukkit/craftbukkit/scheduler/CraftFuture.java
@@ -7,12 +7,15 @@ import java.util.concurrent.Future;
 import java.util.concurrent.TimeUnit;
 import java.util.concurrent.TimeoutException;
 import org.bukkit.plugin.Plugin;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 class CraftFuture<T> extends CraftTask implements Future<T> {
 
     private final Callable<T> callable;
     private T value;
-    private Exception exception = null;
+    private @Nullable Exception exception = null;
 
     CraftFuture(final Callable<T> callable, final Plugin plugin, final int id) {
         super(plugin, null, id, CraftTask.NO_REPEATING);
@@ -44,7 +47,7 @@ class CraftFuture<T> extends CraftTask implements Future<T> {
     }
 
     @Override
-    public synchronized T get(long timeout, final TimeUnit unit) throws InterruptedException, ExecutionException, TimeoutException {
+    public synchronized T get(long timeout, final @NotNull TimeUnit unit) throws InterruptedException, ExecutionException, TimeoutException {
         timeout = unit.toMillis(timeout);
         long period = this.getPeriod();
         long timestamp = timeout > 0 ? System.currentTimeMillis() : 0L;
diff --git a/src/main/java/org/bukkit/craftbukkit/scheduler/CraftScheduler.java b/src/main/java/org/bukkit/craftbukkit/scheduler/CraftScheduler.java
index cdefb2025eedea7e204d70d568adaf1c1ec4c03c..7f976d151d08a228c918d95e61758f20f41415ee 100644
--- a/src/main/java/org/bukkit/craftbukkit/scheduler/CraftScheduler.java
+++ b/src/main/java/org/bukkit/craftbukkit/scheduler/CraftScheduler.java
@@ -27,6 +27,9 @@ import org.bukkit.scheduler.BukkitRunnable;
 import org.bukkit.scheduler.BukkitScheduler;
 import org.bukkit.scheduler.BukkitTask;
 import org.bukkit.scheduler.BukkitWorker;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 /**
  * The fundamental concepts for this implementation:
@@ -48,7 +51,7 @@ import org.bukkit.scheduler.BukkitWorker;
  */
 public class CraftScheduler implements BukkitScheduler {
 
-    static Plugin MINECRAFT = new MinecraftInternalPlugin();
+    static @NotNull Plugin MINECRAFT = new MinecraftInternalPlugin();
     /**
      * The start ID for the counter.
      */
@@ -70,7 +73,7 @@ public class CraftScheduler implements BukkitScheduler {
     /**
      * Current head of linked-list. This reference is always stale, {@link CraftTask#next} is the live reference.
      */
-    private volatile CraftTask head = new CraftTask();
+    private volatile @NotNull CraftTask head = new CraftTask();
     /**
      * Tail of a linked-list. AtomicReference only matters when adding to queue
      */
@@ -81,7 +84,7 @@ public class CraftScheduler implements BukkitScheduler {
     final PriorityQueue<CraftTask> pending = new PriorityQueue<CraftTask>(10, // Paper
             new Comparator<CraftTask>() {
                 @Override
-                public int compare(final CraftTask o1, final CraftTask o2) {
+                public int compare(final @NotNull CraftTask o1, final @NotNull CraftTask o2) {
                     int value = Long.compare(o1.getNextRun(), o2.getNextRun());
 
                     // If the tasks should run on the same tick they should be run FIFO
@@ -99,7 +102,7 @@ public class CraftScheduler implements BukkitScheduler {
     /**
      * The sync task that is currently running on the main thread.
      */
-    private volatile CraftTask currentTask = null;
+    private volatile @Nullable CraftTask currentTask = null;
     // Paper start - Improved Async Task Scheduler
     volatile int currentTick = -1;/*
     private final Executor executor = Executors.newCachedThreadPool(new ThreadFactoryBuilder().setNameFormat("Craft Scheduler Thread - %d").build());
@@ -120,7 +123,7 @@ public class CraftScheduler implements BukkitScheduler {
 
 
     // Paper start
-    private final CraftScheduler asyncScheduler;
+    private final @NotNull CraftScheduler asyncScheduler;
     private final boolean isAsyncScheduler;
     public CraftScheduler() {
         this(false);
@@ -136,94 +139,94 @@ public class CraftScheduler implements BukkitScheduler {
     }
     // Paper end
     @Override
-    public int scheduleSyncDelayedTask(final Plugin plugin, final Runnable task) {
+    public int scheduleSyncDelayedTask(final @NotNull Plugin plugin, final Runnable task) {
         return this.scheduleSyncDelayedTask(plugin, task, 0L);
     }
 
     @Override
-    public BukkitTask runTask(Plugin plugin, Runnable runnable) {
+    public @NotNull BukkitTask runTask(@NotNull Plugin plugin, Runnable runnable) {
         return this.runTaskLater(plugin, runnable, 0L);
     }
 
     @Override
-    public void runTask(Plugin plugin, Consumer<BukkitTask> task) throws IllegalArgumentException {
+    public void runTask(@NotNull Plugin plugin, Consumer<BukkitTask> task) throws IllegalArgumentException {
         this.runTaskLater(plugin, task, 0L);
     }
 
     @Deprecated
     @Override
-    public int scheduleAsyncDelayedTask(final Plugin plugin, final Runnable task) {
+    public int scheduleAsyncDelayedTask(final @NotNull Plugin plugin, final Runnable task) {
         return this.scheduleAsyncDelayedTask(plugin, task, 0L);
     }
 
     @Override
-    public BukkitTask runTaskAsynchronously(Plugin plugin, Runnable runnable) {
+    public @NotNull BukkitTask runTaskAsynchronously(@NotNull Plugin plugin, Runnable runnable) {
         return this.runTaskLaterAsynchronously(plugin, runnable, 0L);
     }
 
     @Override
-    public void runTaskAsynchronously(Plugin plugin, Consumer<BukkitTask> task) throws IllegalArgumentException {
+    public void runTaskAsynchronously(@NotNull Plugin plugin, Consumer<BukkitTask> task) throws IllegalArgumentException {
         this.runTaskLaterAsynchronously(plugin, task, 0L);
     }
 
     @Override
-    public int scheduleSyncDelayedTask(final Plugin plugin, final Runnable task, final long delay) {
+    public int scheduleSyncDelayedTask(final @NotNull Plugin plugin, final Runnable task, final long delay) {
         return this.scheduleSyncRepeatingTask(plugin, task, delay, CraftTask.NO_REPEATING);
     }
 
     @Override
-    public BukkitTask runTaskLater(Plugin plugin, Runnable runnable, long delay) {
+    public @NotNull BukkitTask runTaskLater(@NotNull Plugin plugin, Runnable runnable, long delay) {
         return this.runTaskTimer(plugin, runnable, delay, CraftTask.NO_REPEATING);
     }
 
     @Override
-    public void runTaskLater(Plugin plugin, Consumer<BukkitTask> task, long delay) throws IllegalArgumentException {
+    public void runTaskLater(@NotNull Plugin plugin, Consumer<BukkitTask> task, long delay) throws IllegalArgumentException {
         this.runTaskTimer(plugin, task, delay, CraftTask.NO_REPEATING);
     }
 
     @Deprecated
     @Override
-    public int scheduleAsyncDelayedTask(final Plugin plugin, final Runnable task, final long delay) {
+    public int scheduleAsyncDelayedTask(final @NotNull Plugin plugin, final Runnable task, final long delay) {
         return this.scheduleAsyncRepeatingTask(plugin, task, delay, CraftTask.NO_REPEATING);
     }
 
     @Override
-    public BukkitTask runTaskLaterAsynchronously(Plugin plugin, Runnable runnable, long delay) {
+    public @NotNull BukkitTask runTaskLaterAsynchronously(@NotNull Plugin plugin, Runnable runnable, long delay) {
         return this.runTaskTimerAsynchronously(plugin, runnable, delay, CraftTask.NO_REPEATING);
     }
 
     @Override
-    public void runTaskLaterAsynchronously(Plugin plugin, Consumer<BukkitTask> task, long delay) throws IllegalArgumentException {
+    public void runTaskLaterAsynchronously(@NotNull Plugin plugin, Consumer<BukkitTask> task, long delay) throws IllegalArgumentException {
         this.runTaskTimerAsynchronously(plugin, task, delay, CraftTask.NO_REPEATING);
     }
 
     @Override
-    public void runTaskTimerAsynchronously(Plugin plugin, Consumer<BukkitTask> task, long delay, long period) throws IllegalArgumentException {
+    public void runTaskTimerAsynchronously(@NotNull Plugin plugin, Consumer<BukkitTask> task, long delay, long period) throws IllegalArgumentException {
         this.runTaskTimerAsynchronously(plugin, (Object) task, delay, period);
     }
 
     @Override
-    public int scheduleSyncRepeatingTask(final Plugin plugin, final Runnable runnable, long delay, long period) {
+    public int scheduleSyncRepeatingTask(final @NotNull Plugin plugin, final Runnable runnable, long delay, long period) {
         return this.runTaskTimer(plugin, runnable, delay, period).getTaskId();
     }
 
     @Override
-    public BukkitTask runTaskTimer(Plugin plugin, Runnable runnable, long delay, long period) {
+    public @NotNull BukkitTask runTaskTimer(@NotNull Plugin plugin, Runnable runnable, long delay, long period) {
         return this.runTaskTimer(plugin, (Object) runnable, delay, period);
     }
 
     @Override
-    public void runTaskTimer(Plugin plugin, Consumer<BukkitTask> task, long delay, long period) throws IllegalArgumentException {
+    public void runTaskTimer(@NotNull Plugin plugin, Consumer<BukkitTask> task, long delay, long period) throws IllegalArgumentException {
         this.runTaskTimer(plugin, (Object) task, delay, period);
     }
 
-    public BukkitTask scheduleInternalTask(Runnable run, int delay, String taskName) {
+    public BukkitTask scheduleInternalTask(Runnable run, int delay, @Nullable String taskName) {
         final CraftTask task = new CraftTask(run, nextId(), "Internal - " + (taskName != null ? taskName : "Unknown"));
         task.internal = true;
         return handle(task, delay);
     }
 
-    public BukkitTask runTaskTimer(Plugin plugin, Object runnable, long delay, long period) {
+    public BukkitTask runTaskTimer(@NotNull Plugin plugin, Object runnable, long delay, long period) {
         CraftScheduler.validate(plugin, runnable);
         if (delay < 0L) {
             delay = 0;
@@ -238,16 +241,16 @@ public class CraftScheduler implements BukkitScheduler {
 
     @Deprecated
     @Override
-    public int scheduleAsyncRepeatingTask(final Plugin plugin, final Runnable runnable, long delay, long period) {
+    public int scheduleAsyncRepeatingTask(final @NotNull Plugin plugin, final Runnable runnable, long delay, long period) {
         return this.runTaskTimerAsynchronously(plugin, runnable, delay, period).getTaskId();
     }
 
     @Override
-    public BukkitTask runTaskTimerAsynchronously(Plugin plugin, Runnable runnable, long delay, long period) {
+    public @NotNull BukkitTask runTaskTimerAsynchronously(@NotNull Plugin plugin, Runnable runnable, long delay, long period) {
         return this.runTaskTimerAsynchronously(plugin, (Object) runnable, delay, period);
     }
 
-    public BukkitTask runTaskTimerAsynchronously(Plugin plugin, Object runnable, long delay, long period) {
+    public BukkitTask runTaskTimerAsynchronously(@NotNull Plugin plugin, Object runnable, long delay, long period) {
         CraftScheduler.validate(plugin, runnable);
         if (delay < 0L) {
             delay = 0;
@@ -261,7 +264,7 @@ public class CraftScheduler implements BukkitScheduler {
     }
 
     @Override
-    public <T> Future<T> callSyncMethod(final Plugin plugin, final Callable<T> task) {
+    public <T> @NotNull Future<T> callSyncMethod(final @NotNull Plugin plugin, final Callable<T> task) {
         CraftScheduler.validate(plugin, task);
         final CraftFuture<T> future = new CraftFuture<T>(task, plugin, this.nextId());
         this.handle(future, 0L);
@@ -290,7 +293,7 @@ public class CraftScheduler implements BukkitScheduler {
                             check(CraftScheduler.this.pending);
                         }
                     }
-                    private boolean check(final Iterable<CraftTask> collection) {
+                    private boolean check(final @NotNull Iterable<CraftTask> collection) {
                         final Iterator<CraftTask> tasks = collection.iterator();
                         while (tasks.hasNext()) {
                             final CraftTask task = tasks.next();
@@ -332,7 +335,7 @@ public class CraftScheduler implements BukkitScheduler {
                         check(CraftScheduler.this.pending);
                         check(CraftScheduler.this.temp);
                     }
-                    void check(final Iterable<CraftTask> collection) {
+                    void check(final @NotNull Iterable<CraftTask> collection) {
                         final Iterator<CraftTask> tasks = collection.iterator();
                         while (tasks.hasNext()) {
                             final CraftTask task = tasks.next();
@@ -404,7 +407,7 @@ public class CraftScheduler implements BukkitScheduler {
     }
 
     @Override
-    public List<BukkitWorker> getActiveWorkers() {
+    public @NotNull List<BukkitWorker> getActiveWorkers() {
         // Paper start
         if (!isAsyncScheduler) {
             //noinspection TailRecursion
@@ -427,7 +430,7 @@ public class CraftScheduler implements BukkitScheduler {
     }
 
     @Override
-    public List<BukkitTask> getPendingTasks() {
+    public @NotNull List<BukkitTask> getPendingTasks() {
         final ArrayList<CraftTask> truePending = new ArrayList<CraftTask>();
         for (CraftTask task = this.head.getNext(); task != null; task = task.getNext()) {
             if (task.getTaskId() != -1) {
@@ -532,7 +535,7 @@ public class CraftScheduler implements BukkitScheduler {
         tailTask.setNext(task);
     }
 
-    protected CraftTask handle(final CraftTask task, final long delay) { // Paper
+    protected @NotNull CraftTask handle(final @NotNull CraftTask task, final long delay) { // Paper
         // Paper start
         if (!this.isAsyncScheduler && !task.isSync()) {
             this.asyncScheduler.handle(task, delay);
@@ -544,7 +547,7 @@ public class CraftScheduler implements BukkitScheduler {
         return task;
     }
 
-    private static void validate(final Plugin plugin, final Object task) {
+    private static void validate(final @NotNull Plugin plugin, final Object task) {
         Validate.notNull(plugin, "Plugin cannot be null");
         Validate.notNull(task, "Task cannot be null");
         Validate.isTrue(task instanceof Runnable || task instanceof Consumer || task instanceof Callable, "Task must be Runnable, Consumer, or Callable");
@@ -590,7 +593,7 @@ public class CraftScheduler implements BukkitScheduler {
     }
 
     @Override
-    public String toString() {
+    public @NotNull String toString() {
         // Paper start
         return "";
         /*
@@ -622,43 +625,43 @@ public class CraftScheduler implements BukkitScheduler {
 
     @Deprecated
     @Override
-    public BukkitTask runTask(Plugin plugin, BukkitRunnable task) throws IllegalArgumentException {
+    public @NotNull BukkitTask runTask(Plugin plugin, BukkitRunnable task) throws IllegalArgumentException {
         throw new UnsupportedOperationException("Use BukkitRunnable#runTask(Plugin)");
     }
 
     @Deprecated
     @Override
-    public BukkitTask runTaskAsynchronously(Plugin plugin, BukkitRunnable task) throws IllegalArgumentException {
+    public @NotNull BukkitTask runTaskAsynchronously(Plugin plugin, BukkitRunnable task) throws IllegalArgumentException {
         throw new UnsupportedOperationException("Use BukkitRunnable#runTaskAsynchronously(Plugin)");
     }
 
     @Deprecated
     @Override
-    public BukkitTask runTaskLater(Plugin plugin, BukkitRunnable task, long delay) throws IllegalArgumentException {
+    public @NotNull BukkitTask runTaskLater(Plugin plugin, BukkitRunnable task, long delay) throws IllegalArgumentException {
         throw new UnsupportedOperationException("Use BukkitRunnable#runTaskLater(Plugin, long)");
     }
 
     @Deprecated
     @Override
-    public BukkitTask runTaskLaterAsynchronously(Plugin plugin, BukkitRunnable task, long delay) throws IllegalArgumentException {
+    public @NotNull BukkitTask runTaskLaterAsynchronously(Plugin plugin, BukkitRunnable task, long delay) throws IllegalArgumentException {
         throw new UnsupportedOperationException("Use BukkitRunnable#runTaskLaterAsynchronously(Plugin, long)");
     }
 
     @Deprecated
     @Override
-    public BukkitTask runTaskTimer(Plugin plugin, BukkitRunnable task, long delay, long period) throws IllegalArgumentException {
+    public @NotNull BukkitTask runTaskTimer(Plugin plugin, BukkitRunnable task, long delay, long period) throws IllegalArgumentException {
         throw new UnsupportedOperationException("Use BukkitRunnable#runTaskTimer(Plugin, long, long)");
     }
 
     @Deprecated
     @Override
-    public BukkitTask runTaskTimerAsynchronously(Plugin plugin, BukkitRunnable task, long delay, long period) throws IllegalArgumentException {
+    public @NotNull BukkitTask runTaskTimerAsynchronously(Plugin plugin, BukkitRunnable task, long delay, long period) throws IllegalArgumentException {
         throw new UnsupportedOperationException("Use BukkitRunnable#runTaskTimerAsynchronously(Plugin, long, long)");
     }
 
     // Paper start - add getMainThreadExecutor
     @Override
-    public Executor getMainThreadExecutor(Plugin plugin) {
+    public @NotNull Executor getMainThreadExecutor(@NotNull Plugin plugin) {
         Validate.notNull(plugin, "Plugin cannot be null");
         return command -> {
             Validate.notNull(command, "Command cannot be null");
diff --git a/src/main/java/org/bukkit/craftbukkit/scheduler/CraftTask.java b/src/main/java/org/bukkit/craftbukkit/scheduler/CraftTask.java
index 3f45bab0e9f7b3697e6d9d1092a1e6e579f7066f..1a5098ed08a1ab6e946ef03e1fb45627a2344390 100644
--- a/src/main/java/org/bukkit/craftbukkit/scheduler/CraftTask.java
+++ b/src/main/java/org/bukkit/craftbukkit/scheduler/CraftTask.java
@@ -7,13 +7,15 @@ import org.bukkit.Bukkit;
 import org.bukkit.plugin.Plugin;
 import org.bukkit.scheduler.BukkitTask;
 
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
 import org.spigotmc.CustomTimingsHandler; // Spigot
 import co.aikar.timings.MinecraftTimings; // Paper
 import co.aikar.timings.Timing; // Paper
 
 public class CraftTask implements BukkitTask, Runnable { // Spigot
 
-    private volatile CraftTask next = null;
+    private volatile @Nullable CraftTask next = null;
     public static final int ERROR = 0;
     public static final int NO_REPEATING = -1;
     public static final int CANCEL = -2;
@@ -29,8 +31,8 @@ public class CraftTask implements BukkitTask, Runnable { // Spigot
      */
     private volatile long period;
     private long nextRun;
-    public final Runnable rTask; // Paper
-    public final Consumer<BukkitTask> cTask; // Paper
+    public final @Nullable Runnable rTask; // Paper
+    public final @Nullable Consumer<BukkitTask> cTask; // Paper
     public Timing timings; // Paper
     private final Plugin plugin;
     private final int id;
@@ -44,9 +46,9 @@ public class CraftTask implements BukkitTask, Runnable { // Spigot
         this(null, task, CraftTask.NO_REPEATING, CraftTask.NO_REPEATING);
     }
     // Paper start
-    public String taskName = null;
+    public @Nullable String taskName = null;
     boolean internal = false;
-    CraftTask(final Object task, int id, String taskName) {
+    CraftTask(final Object task, int id, @NotNull String taskName) {
         this.rTask = (Runnable) task;
         this.cTask = null;
         this.plugin = CraftScheduler.MINECRAFT;
@@ -85,7 +87,7 @@ public class CraftTask implements BukkitTask, Runnable { // Spigot
     }
 
     @Override
-    public final Plugin getOwner() {
+    public final @NotNull Plugin getOwner() {
         return this.plugin;
     }
 
@@ -133,7 +135,7 @@ public class CraftTask implements BukkitTask, Runnable { // Spigot
         this.next = next;
     }
 
-    public Class<?> getTaskClass() { // Paper
+    public @Nullable Class<?> getTaskClass() { // Paper
         return (this.rTask != null) ? this.rTask.getClass() : ((this.cTask != null) ? this.cTask.getClass() : null);
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/scheduler/MinecraftInternalPlugin.java b/src/main/java/org/bukkit/craftbukkit/scheduler/MinecraftInternalPlugin.java
index 909b2c98e7a9117d2f737245e4661792ffafb744..101fd263c1de05382da4ecbfe4989f36859643ef 100644
--- a/src/main/java/org/bukkit/craftbukkit/scheduler/MinecraftInternalPlugin.java
+++ b/src/main/java/org/bukkit/craftbukkit/scheduler/MinecraftInternalPlugin.java
@@ -21,7 +21,7 @@ import java.util.List;
 public class MinecraftInternalPlugin extends PluginBase {
     private boolean enabled = true;
 
-    private final String pluginName;
+    private final @NotNull String pluginName;
     private PluginDescriptionFile pdf;
 
     public MinecraftInternalPlugin() {
@@ -34,17 +34,17 @@ public class MinecraftInternalPlugin extends PluginBase {
     }
 
     @Override
-    public File getDataFolder() {
+    public @NotNull File getDataFolder() {
         throw new UnsupportedOperationException("Not supported.");
     }
 
     @Override
-    public PluginDescriptionFile getDescription() {
+    public @NotNull PluginDescriptionFile getDescription() {
         return pdf;
     }
 
     @Override
-    public FileConfiguration getConfig() {
+    public @NotNull FileConfiguration getConfig() {
         throw new UnsupportedOperationException("Not supported.");
     }
 
@@ -74,17 +74,17 @@ public class MinecraftInternalPlugin extends PluginBase {
     }
 
     @Override
-    public PluginLogger getLogger() {
+    public @NotNull PluginLogger getLogger() {
         throw new UnsupportedOperationException("Not supported.");
     }
 
     @Override
-    public PluginLoader getPluginLoader() {
+    public @NotNull PluginLoader getPluginLoader() {
         throw new UnsupportedOperationException("Not supported.");
     }
 
     @Override
-    public Server getServer() {
+    public @NotNull Server getServer() {
         throw new UnsupportedOperationException("Not supported.");
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/scoreboard/CraftCriteria.java b/src/main/java/org/bukkit/craftbukkit/scoreboard/CraftCriteria.java
index d849ef9a51dc901c8045d63218b8ee5fa5c7ee7a..70ae65198559ac98079a406f9025db0c4591ac9a 100644
--- a/src/main/java/org/bukkit/craftbukkit/scoreboard/CraftCriteria.java
+++ b/src/main/java/org/bukkit/craftbukkit/scoreboard/CraftCriteria.java
@@ -6,10 +6,13 @@ import net.minecraft.world.scores.Objective;
 import net.minecraft.world.scores.criteria.ObjectiveCriteria;
 import org.bukkit.scoreboard.Criteria;
 import org.bukkit.scoreboard.RenderType;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 public final class CraftCriteria implements Criteria {
-    static final Map<String, CraftCriteria> DEFAULTS;
-    static final CraftCriteria DUMMY;
+    static final @NotNull Map<String, CraftCriteria> DEFAULTS;
+    static final @Nullable CraftCriteria DUMMY;
 
     static {
         ImmutableMap.Builder<String, CraftCriteria> defaults = ImmutableMap.builder();
@@ -33,13 +36,13 @@ public final class CraftCriteria implements Criteria {
         this.criteria = DUMMY.criteria;
     }
 
-    private CraftCriteria(ObjectiveCriteria criteria) {
+    private CraftCriteria(@NotNull ObjectiveCriteria criteria) {
         this.criteria = criteria;
         this.bukkitName = criteria.getName();
     }
 
     @Override
-    public String getName() {
+    public @NotNull String getName() {
         return this.bukkitName;
     }
 
@@ -49,15 +52,15 @@ public final class CraftCriteria implements Criteria {
     }
 
     @Override
-    public RenderType getDefaultRenderType() {
+    public @NotNull RenderType getDefaultRenderType() {
         return RenderType.values()[this.criteria.getDefaultRenderType().ordinal()];
     }
 
-    static CraftCriteria getFromNMS(Objective objective) {
+    static @NotNull CraftCriteria getFromNMS(@NotNull Objective objective) {
         return java.util.Objects.requireNonNullElseGet(CraftCriteria.DEFAULTS.get(objective.getCriteria().getName()), () -> new CraftCriteria(objective.getCriteria())); // Paper
     }
 
-    public static CraftCriteria getFromBukkit(String name) {
+    public static @NotNull CraftCriteria getFromBukkit(@NotNull String name) {
         CraftCriteria criteria = CraftCriteria.DEFAULTS.get(name);
         if (criteria != null) {
             return criteria;
diff --git a/src/main/java/org/bukkit/craftbukkit/scoreboard/CraftObjective.java b/src/main/java/org/bukkit/craftbukkit/scoreboard/CraftObjective.java
index 20b29f78fe56909e02061021b82a84cb7728d8a8..d954a6e972d86963755f5b88d3ece8bd8d25aeaf 100644
--- a/src/main/java/org/bukkit/craftbukkit/scoreboard/CraftObjective.java
+++ b/src/main/java/org/bukkit/craftbukkit/scoreboard/CraftObjective.java
@@ -9,12 +9,15 @@ import org.bukkit.scoreboard.DisplaySlot;
 import org.bukkit.scoreboard.Objective;
 import org.bukkit.scoreboard.RenderType;
 import org.bukkit.scoreboard.Score;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 final class CraftObjective extends CraftScoreboardComponent implements Objective {
     private final net.minecraft.world.scores.Objective objective;
-    private final CraftCriteria criteria;
+    private final @NotNull CraftCriteria criteria;
 
-    CraftObjective(CraftScoreboard scoreboard, net.minecraft.world.scores.Objective objective) {
+    CraftObjective(CraftScoreboard scoreboard, net.minecraft.world.scores.@NotNull Objective objective) {
         super(scoreboard);
         this.objective = objective;
         this.criteria = CraftCriteria.getFromNMS(objective);
@@ -25,7 +28,7 @@ final class CraftObjective extends CraftScoreboardComponent implements Objective
     }
 
     @Override
-    public String getName() throws IllegalStateException {
+    public @NotNull String getName() throws IllegalStateException {
         CraftScoreboard scoreboard = this.checkState();
 
         return this.objective.getName();
@@ -33,12 +36,12 @@ final class CraftObjective extends CraftScoreboardComponent implements Objective
 
     // Paper start
     @Override
-    public net.kyori.adventure.text.Component displayName() throws IllegalStateException {
+    public net.kyori.adventure.text.@NotNull Component displayName() throws IllegalStateException {
         CraftScoreboard scoreboard = checkState();
         return io.papermc.paper.adventure.PaperAdventure.asAdventure(objective.getDisplayName());
     }
     @Override
-    public void displayName(net.kyori.adventure.text.Component displayName) throws IllegalStateException, IllegalArgumentException {
+    public void displayName(net.kyori.adventure.text.@Nullable Component displayName) throws IllegalStateException, IllegalArgumentException {
         if (displayName == null) {
             displayName = net.kyori.adventure.text.Component.empty();
         }
@@ -47,14 +50,14 @@ final class CraftObjective extends CraftScoreboardComponent implements Objective
     }
     // Paper end
     @Override
-    public String getDisplayName() throws IllegalStateException {
+    public @NotNull String getDisplayName() throws IllegalStateException {
         CraftScoreboard scoreboard = this.checkState();
 
         return CraftChatMessage.fromComponent(this.objective.getDisplayName());
     }
 
     @Override
-    public void setDisplayName(String displayName) throws IllegalStateException, IllegalArgumentException {
+    public void setDisplayName(@NotNull String displayName) throws IllegalStateException, IllegalArgumentException {
         Validate.notNull(displayName, "Display name cannot be null");
         Validate.isTrue(displayName.length() <= 128, "Display name '" + displayName + "' is longer than the limit of 128 characters");
         CraftScoreboard scoreboard = this.checkState();
@@ -63,14 +66,14 @@ final class CraftObjective extends CraftScoreboardComponent implements Objective
     }
 
     @Override
-    public String getCriteria() throws IllegalStateException {
+    public @NotNull String getCriteria() throws IllegalStateException {
         CraftScoreboard scoreboard = this.checkState();
 
         return criteria.bukkitName;
     }
 
     @Override
-    public Criteria getTrackedCriteria() throws IllegalStateException {
+    public @NotNull Criteria getTrackedCriteria() throws IllegalStateException {
         CraftScoreboard scoreboard = this.checkState();
 
         return this.criteria;
@@ -84,7 +87,7 @@ final class CraftObjective extends CraftScoreboardComponent implements Objective
     }
 
     @Override
-    public void setDisplaySlot(DisplaySlot slot) throws IllegalStateException {
+    public void setDisplaySlot(@Nullable DisplaySlot slot) throws IllegalStateException {
         CraftScoreboard scoreboard = this.checkState();
         Scoreboard board = scoreboard.board;
         net.minecraft.world.scores.Objective objective = this.objective;
@@ -101,7 +104,7 @@ final class CraftObjective extends CraftScoreboardComponent implements Objective
     }
 
     @Override
-    public DisplaySlot getDisplaySlot() throws IllegalStateException {
+    public @Nullable DisplaySlot getDisplaySlot() throws IllegalStateException {
         CraftScoreboard scoreboard = this.checkState();
         Scoreboard board = scoreboard.board;
         net.minecraft.world.scores.Objective objective = this.objective;
@@ -115,7 +118,7 @@ final class CraftObjective extends CraftScoreboardComponent implements Objective
     }
 
     @Override
-    public void setRenderType(RenderType renderType) throws IllegalStateException {
+    public void setRenderType(@NotNull RenderType renderType) throws IllegalStateException {
         Validate.notNull(renderType, "RenderType cannot be null");
         CraftScoreboard scoreboard = this.checkState();
 
@@ -123,14 +126,14 @@ final class CraftObjective extends CraftScoreboardComponent implements Objective
     }
 
     @Override
-    public RenderType getRenderType() throws IllegalStateException {
+    public @NotNull RenderType getRenderType() throws IllegalStateException {
         CraftScoreboard scoreboard = this.checkState();
 
         return CraftScoreboardTranslations.toBukkitRender(this.objective.getRenderType());
     }
 
     @Override
-    public Score getScore(OfflinePlayer player) throws IllegalArgumentException, IllegalStateException {
+    public @NotNull Score getScore(@NotNull OfflinePlayer player) throws IllegalArgumentException, IllegalStateException {
         Validate.notNull(player, "Player cannot be null");
         CraftScoreboard scoreboard = this.checkState();
 
@@ -138,7 +141,7 @@ final class CraftObjective extends CraftScoreboardComponent implements Objective
     }
 
     @Override
-    public Score getScore(String entry) throws IllegalArgumentException, IllegalStateException {
+    public @NotNull Score getScore(@NotNull String entry) throws IllegalArgumentException, IllegalStateException {
         Validate.notNull(entry, "Entry cannot be null");
         Validate.isTrue(entry.length() <= Short.MAX_VALUE, "Score '" + entry + "' is longer than the limit of 32767 characters");
         CraftScoreboard scoreboard = this.checkState();
@@ -148,7 +151,7 @@ final class CraftObjective extends CraftScoreboardComponent implements Objective
 
     // Paper start
     @Override
-    public Score getScoreFor(org.bukkit.entity.Entity entity) throws IllegalArgumentException, IllegalStateException {
+    public @NotNull Score getScoreFor(org.bukkit.entity.@NotNull Entity entity) throws IllegalArgumentException, IllegalStateException {
         Validate.notNull(entity, "Entity cannot be null");
         return getScore(((org.bukkit.craftbukkit.entity.CraftEntity) entity).getHandle().getScoreboardName());
     }
@@ -178,7 +181,7 @@ final class CraftObjective extends CraftScoreboardComponent implements Objective
     }
 
     @Override
-    public boolean equals(Object obj) {
+    public boolean equals(@Nullable Object obj) {
         if (obj == null) {
             return false;
         }
diff --git a/src/main/java/org/bukkit/craftbukkit/scoreboard/CraftScore.java b/src/main/java/org/bukkit/craftbukkit/scoreboard/CraftScore.java
index 3b26793b67282c3a20c023b9c13a2a9b54d5d932..275bed9d44eece4ea958d70423bf2b256deba2f6 100644
--- a/src/main/java/org/bukkit/craftbukkit/scoreboard/CraftScore.java
+++ b/src/main/java/org/bukkit/craftbukkit/scoreboard/CraftScore.java
@@ -6,6 +6,8 @@ import org.bukkit.Bukkit;
 import org.bukkit.OfflinePlayer;
 import org.bukkit.scoreboard.Objective;
 import org.bukkit.scoreboard.Score;
+import org.jetbrains.annotations.NotNull;
+
 
 /**
  * TL;DR: This class is special and lazily grabs a handle...
@@ -23,17 +25,17 @@ final class CraftScore implements Score {
     }
 
     @Override
-    public OfflinePlayer getPlayer() {
+    public @NotNull OfflinePlayer getPlayer() {
         return Bukkit.getOfflinePlayer(entry);
     }
 
     @Override
-    public String getEntry() {
+    public @NotNull String getEntry() {
         return this.entry;
     }
 
     @Override
-    public Objective getObjective() {
+    public @NotNull Objective getObjective() {
         return this.objective;
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/scoreboard/CraftScoreboard.java b/src/main/java/org/bukkit/craftbukkit/scoreboard/CraftScoreboard.java
index fe57437155ff9471738d3b85e787350601b79584..35f0464b2601c61cbd6e713099266ac375c4e161 100644
--- a/src/main/java/org/bukkit/craftbukkit/scoreboard/CraftScoreboard.java
+++ b/src/main/java/org/bukkit/craftbukkit/scoreboard/CraftScoreboard.java
@@ -16,6 +16,9 @@ import org.bukkit.scoreboard.Objective;
 import org.bukkit.scoreboard.RenderType;
 import org.bukkit.scoreboard.Score;
 import org.bukkit.scoreboard.Team;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 public final class CraftScoreboard implements org.bukkit.scoreboard.Scoreboard {
     final Scoreboard board;
@@ -26,24 +29,24 @@ public final class CraftScoreboard implements org.bukkit.scoreboard.Scoreboard {
     }
 
     @Override
-    public CraftObjective registerNewObjective(String name, String criteria) throws IllegalArgumentException {
+    public @NotNull CraftObjective registerNewObjective(@NotNull String name, @NotNull String criteria) throws IllegalArgumentException {
         return this.registerNewObjective(name, criteria, name);
     }
     // Paper start
     @Override
-    public CraftObjective registerNewObjective(String name, String criteria, net.kyori.adventure.text.Component displayName) {
+    public @NotNull CraftObjective registerNewObjective(@NotNull String name, @NotNull String criteria, net.kyori.adventure.text.Component displayName) {
         return registerNewObjective(name, CraftCriteria.getFromBukkit(criteria), displayName, RenderType.INTEGER);
     }
     @Override
-    public CraftObjective registerNewObjective(String name, String criteria, net.kyori.adventure.text.Component displayName, RenderType renderType) {
+    public @NotNull CraftObjective registerNewObjective(@NotNull String name, @NotNull String criteria, net.kyori.adventure.text.Component displayName, @NotNull RenderType renderType) {
         return registerNewObjective(name, CraftCriteria.getFromBukkit(criteria), displayName, renderType);
     }
     @Override
-    public CraftObjective registerNewObjective(String name, Criteria criteria, net.kyori.adventure.text.Component displayName) throws IllegalArgumentException {
+    public @NotNull CraftObjective registerNewObjective(@NotNull String name, @NotNull Criteria criteria, net.kyori.adventure.text.Component displayName) throws IllegalArgumentException {
         return registerNewObjective(name, criteria, displayName, RenderType.INTEGER);
     }
     @Override
-    public CraftObjective registerNewObjective(String name, Criteria criteria, net.kyori.adventure.text.Component displayName, RenderType renderType) throws IllegalArgumentException {
+    public @NotNull CraftObjective registerNewObjective(@NotNull String name, @NotNull Criteria criteria, net.kyori.adventure.text.@Nullable Component displayName, @NotNull RenderType renderType) throws IllegalArgumentException {
         if (displayName == null) {
             displayName = net.kyori.adventure.text.Component.empty();
         }
@@ -65,34 +68,34 @@ public final class CraftScoreboard implements org.bukkit.scoreboard.Scoreboard {
     // Paper end
 
     @Override
-    public CraftObjective registerNewObjective(String name, String criteria, String displayName) throws IllegalArgumentException {
+    public @NotNull CraftObjective registerNewObjective(@NotNull String name, @NotNull String criteria, @NotNull String displayName) throws IllegalArgumentException {
         return this.registerNewObjective(name, CraftCriteria.getFromBukkit(criteria), displayName, RenderType.INTEGER);
     }
 
     @Override
-    public CraftObjective registerNewObjective(String name, String criteria, String displayName, RenderType renderType) throws IllegalArgumentException {
+    public @NotNull CraftObjective registerNewObjective(@NotNull String name, @NotNull String criteria, @NotNull String displayName, @NotNull RenderType renderType) throws IllegalArgumentException {
         return this.registerNewObjective(name, CraftCriteria.getFromBukkit(criteria), displayName, renderType);
     }
 
     @Override
-    public CraftObjective registerNewObjective(String name, Criteria criteria, String displayName) throws IllegalArgumentException {
+    public @NotNull CraftObjective registerNewObjective(@NotNull String name, @NotNull Criteria criteria, @NotNull String displayName) throws IllegalArgumentException {
         return this.registerNewObjective(name, criteria, displayName, RenderType.INTEGER);
     }
 
     @Override
-    public CraftObjective registerNewObjective(String name, Criteria criteria, String displayName, RenderType renderType) throws IllegalArgumentException {
+    public @NotNull CraftObjective registerNewObjective(@NotNull String name, @NotNull Criteria criteria, @NotNull String displayName, @NotNull RenderType renderType) throws IllegalArgumentException {
         return registerNewObjective(name, criteria, net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection().deserialize(displayName), renderType); // Paper
     }
 
     @Override
-    public Objective getObjective(String name) throws IllegalArgumentException {
+    public @Nullable Objective getObjective(String name) throws IllegalArgumentException {
         Validate.notNull(name, "Name cannot be null");
         net.minecraft.world.scores.Objective nms = this.board.getObjective(name);
         return nms == null ? null : new CraftObjective(this, nms);
     }
 
     @Override
-    public ImmutableSet<Objective> getObjectivesByCriteria(String criteria) throws IllegalArgumentException {
+    public @NotNull ImmutableSet<Objective> getObjectivesByCriteria(String criteria) throws IllegalArgumentException {
         Validate.notNull(criteria, "Criteria cannot be null");
 
         ImmutableSet.Builder<Objective> objectives = ImmutableSet.builder();
@@ -106,7 +109,7 @@ public final class CraftScoreboard implements org.bukkit.scoreboard.Scoreboard {
     }
 
     @Override
-    public ImmutableSet<Objective> getObjectivesByCriteria(Criteria criteria) throws IllegalArgumentException {
+    public @NotNull ImmutableSet<Objective> getObjectivesByCriteria(Criteria criteria) throws IllegalArgumentException {
         Validate.notNull(criteria, "Criteria cannot be null");
 
         ImmutableSet.Builder<Objective> objectives = ImmutableSet.builder();
@@ -121,18 +124,18 @@ public final class CraftScoreboard implements org.bukkit.scoreboard.Scoreboard {
     }
 
     @Override
-    public ImmutableSet<Objective> getObjectives() {
+    public @NotNull ImmutableSet<Objective> getObjectives() {
         return ImmutableSet.copyOf(Iterables.transform((Collection<net.minecraft.world.scores.Objective>) this.board.getObjectives(), new Function<net.minecraft.world.scores.Objective, Objective>() {
 
             @Override
-            public Objective apply(net.minecraft.world.scores.Objective input) {
+            public @NotNull Objective apply(net.minecraft.world.scores.@NotNull Objective input) {
                 return new CraftObjective(CraftScoreboard.this, input);
             }
         }));
     }
 
     @Override
-    public Objective getObjective(DisplaySlot slot) throws IllegalArgumentException {
+    public @Nullable Objective getObjective(DisplaySlot slot) throws IllegalArgumentException {
         Validate.notNull(slot, "Display slot cannot be null");
         net.minecraft.world.scores.Objective objective = this.board.getDisplayObjective(CraftScoreboardTranslations.fromBukkitSlot(slot));
         if (objective == null) {
@@ -142,14 +145,14 @@ public final class CraftScoreboard implements org.bukkit.scoreboard.Scoreboard {
     }
 
     @Override
-    public ImmutableSet<Score> getScores(OfflinePlayer player) throws IllegalArgumentException {
+    public @NotNull ImmutableSet<Score> getScores(@NotNull OfflinePlayer player) throws IllegalArgumentException {
         Validate.notNull(player, "OfflinePlayer cannot be null");
 
         return this.getScores(player.getName());
     }
 
     @Override
-    public ImmutableSet<Score> getScores(String entry) throws IllegalArgumentException {
+    public @NotNull ImmutableSet<Score> getScores(String entry) throws IllegalArgumentException {
         Validate.notNull(entry, "Entry cannot be null");
 
         ImmutableSet.Builder<Score> scores = ImmutableSet.builder();
@@ -160,14 +163,14 @@ public final class CraftScoreboard implements org.bukkit.scoreboard.Scoreboard {
     }
 
     @Override
-    public void resetScores(OfflinePlayer player) throws IllegalArgumentException {
+    public void resetScores(@NotNull OfflinePlayer player) throws IllegalArgumentException {
         Validate.notNull(player, "OfflinePlayer cannot be null");
 
         this.resetScores(player.getName());
     }
 
     @Override
-    public void resetScores(String entry) throws IllegalArgumentException {
+    public void resetScores(@NotNull String entry) throws IllegalArgumentException {
         Validate.notNull(entry, "Entry cannot be null");
 
         for (net.minecraft.world.scores.Objective objective : (Collection<net.minecraft.world.scores.Objective>) this.board.getObjectives()) {
@@ -176,7 +179,7 @@ public final class CraftScoreboard implements org.bukkit.scoreboard.Scoreboard {
     }
 
     @Override
-    public Team getPlayerTeam(OfflinePlayer player) throws IllegalArgumentException {
+    public @Nullable Team getPlayerTeam(@NotNull OfflinePlayer player) throws IllegalArgumentException {
         Validate.notNull(player, "OfflinePlayer cannot be null");
 
         PlayerTeam team = this.board.getPlayersTeam(player.getName());
@@ -184,7 +187,7 @@ public final class CraftScoreboard implements org.bukkit.scoreboard.Scoreboard {
     }
 
     @Override
-    public Team getEntryTeam(String entry) throws IllegalArgumentException {
+    public @Nullable Team getEntryTeam(@NotNull String entry) throws IllegalArgumentException {
         Validate.notNull(entry, "Entry cannot be null");
 
         PlayerTeam team = this.board.getPlayersTeam(entry);
@@ -192,7 +195,7 @@ public final class CraftScoreboard implements org.bukkit.scoreboard.Scoreboard {
     }
 
     @Override
-    public Team getTeam(String teamName) throws IllegalArgumentException {
+    public @Nullable Team getTeam(@NotNull String teamName) throws IllegalArgumentException {
         Validate.notNull(teamName, "Team name cannot be null");
 
         PlayerTeam team = this.board.getPlayerTeam(teamName);
@@ -200,18 +203,18 @@ public final class CraftScoreboard implements org.bukkit.scoreboard.Scoreboard {
     }
 
     @Override
-    public ImmutableSet<Team> getTeams() {
+    public @NotNull ImmutableSet<Team> getTeams() {
         return ImmutableSet.copyOf(Iterables.transform((Collection<PlayerTeam>) this.board.getPlayerTeams(), new Function<PlayerTeam, Team>() {
 
             @Override
-            public Team apply(PlayerTeam input) {
+            public @NotNull Team apply(PlayerTeam input) {
                 return new CraftTeam(CraftScoreboard.this, input);
             }
         }));
     }
 
     @Override
-    public Team registerNewTeam(String name) throws IllegalArgumentException {
+    public @NotNull Team registerNewTeam(@NotNull String name) throws IllegalArgumentException {
         Validate.notNull(name, "Team name cannot be null");
         Validate.isTrue(name.length() <= Short.MAX_VALUE, "Team name '" + name + "' is longer than the limit of 32767 characters");
         Validate.isTrue(this.board.getPlayerTeam(name) == null, "Team name '" + name + "' is already in use");
@@ -220,7 +223,7 @@ public final class CraftScoreboard implements org.bukkit.scoreboard.Scoreboard {
     }
 
     @Override
-    public ImmutableSet<OfflinePlayer> getPlayers() {
+    public @NotNull ImmutableSet<OfflinePlayer> getPlayers() {
         ImmutableSet.Builder<OfflinePlayer> players = ImmutableSet.builder();
         for (Object playerName : this.board.getTrackedPlayers()) {
             players.add(Bukkit.getOfflinePlayer(playerName.toString()));
@@ -229,7 +232,7 @@ public final class CraftScoreboard implements org.bukkit.scoreboard.Scoreboard {
     }
 
     @Override
-    public ImmutableSet<String> getEntries() {
+    public @NotNull ImmutableSet<String> getEntries() {
         ImmutableSet.Builder<String> entries = ImmutableSet.builder();
         for (Object entry : this.board.getTrackedPlayers()) {
             entries.add(entry.toString());
@@ -249,19 +252,19 @@ public final class CraftScoreboard implements org.bukkit.scoreboard.Scoreboard {
     }
     // Paper start
     @Override
-    public ImmutableSet<Score> getScoresFor(org.bukkit.entity.Entity entity) throws IllegalArgumentException {
+    public @NotNull ImmutableSet<Score> getScoresFor(org.bukkit.entity.@NotNull Entity entity) throws IllegalArgumentException {
         Validate.notNull(entity, "Entity cannot be null");
         return this.getScores(((org.bukkit.craftbukkit.entity.CraftEntity) entity).getHandle().getScoreboardName());
     }
 
     @Override
-    public void resetScoresFor(org.bukkit.entity.Entity entity) throws IllegalArgumentException {
+    public void resetScoresFor(org.bukkit.entity.@NotNull Entity entity) throws IllegalArgumentException {
         Validate.notNull(entity, "Entity cannot be null");
         this.resetScores(((org.bukkit.craftbukkit.entity.CraftEntity) entity).getHandle().getScoreboardName());
     }
 
     @Override
-    public Team getEntityTeam(org.bukkit.entity.Entity entity) throws IllegalArgumentException {
+    public Team getEntityTeam(org.bukkit.entity.@NotNull Entity entity) throws IllegalArgumentException {
         Validate.notNull(entity, "Entity cannot be null");
         return this.getEntryTeam(((org.bukkit.craftbukkit.entity.CraftEntity) entity).getHandle().getScoreboardName());
     }
diff --git a/src/main/java/org/bukkit/craftbukkit/scoreboard/CraftScoreboardManager.java b/src/main/java/org/bukkit/craftbukkit/scoreboard/CraftScoreboardManager.java
index 138407c2d4b0bc55ddb9aac5d2aa3edadda090fb..2b09a2d7022e5a40db9f4e251e638dece28a6c26 100644
--- a/src/main/java/org/bukkit/craftbukkit/scoreboard/CraftScoreboardManager.java
+++ b/src/main/java/org/bukkit/craftbukkit/scoreboard/CraftScoreboardManager.java
@@ -21,9 +21,11 @@ import org.bukkit.craftbukkit.entity.CraftPlayer;
 import org.bukkit.craftbukkit.util.WeakCollection;
 import org.bukkit.entity.Player;
 import org.bukkit.scoreboard.ScoreboardManager;
+import org.jetbrains.annotations.NotNull;
+
 
 public final class CraftScoreboardManager implements ScoreboardManager {
-    private final CraftScoreboard mainScoreboard;
+    private final @NotNull CraftScoreboard mainScoreboard;
     private final MinecraftServer server;
     private final Collection<CraftScoreboard> scoreboards = new WeakCollection<>();
     private final Map<CraftPlayer, CraftScoreboard> playerBoards = new HashMap<>();
@@ -36,12 +38,12 @@ public final class CraftScoreboardManager implements ScoreboardManager {
     }
 
     @Override
-    public CraftScoreboard getMainScoreboard() {
+    public @NotNull CraftScoreboard getMainScoreboard() {
         return this.mainScoreboard;
     }
 
     @Override
-    public CraftScoreboard getNewScoreboard() {
+    public @NotNull CraftScoreboard getNewScoreboard() {
         org.spigotmc.AsyncCatcher.catchOp("scoreboard creation"); // Spigot
         CraftScoreboard scoreboard = new CraftScoreboard(new ServerScoreboard(this.server));
         // Paper start
@@ -61,13 +63,13 @@ public final class CraftScoreboardManager implements ScoreboardManager {
     // Paper end
 
     // CraftBukkit method
-    public CraftScoreboard getPlayerBoard(CraftPlayer player) {
+    public @NotNull CraftScoreboard getPlayerBoard(CraftPlayer player) {
         CraftScoreboard board = this.playerBoards.get(player);
         return board == null ? this.getMainScoreboard() : board;
     }
 
     // CraftBukkit method
-    public void setPlayerBoard(CraftPlayer player, org.bukkit.scoreboard.Scoreboard bukkitScoreboard) throws IllegalArgumentException {
+    public void setPlayerBoard(@NotNull CraftPlayer player, org.bukkit.scoreboard.Scoreboard bukkitScoreboard) throws IllegalArgumentException {
         Validate.isTrue(bukkitScoreboard instanceof CraftScoreboard, "Cannot set player scoreboard to an unregistered Scoreboard");
 
         CraftScoreboard scoreboard = (CraftScoreboard) bukkitScoreboard;
@@ -112,7 +114,7 @@ public final class CraftScoreboardManager implements ScoreboardManager {
     }
 
     // CraftBukkit method
-    public void getScoreboardScores(ObjectiveCriteria criteria, String name, Consumer<Score> consumer) {
+    public void getScoreboardScores(@NotNull ObjectiveCriteria criteria, @NotNull String name, @NotNull Consumer<Score> consumer) {
         // Paper start - add timings for scoreboard search
         // plugins leaking scoreboards will make this very expensive, let server owners debug it easily
         co.aikar.timings.MinecraftTimings.scoreboardScoreSearch.startTimingIfSync();
diff --git a/src/main/java/org/bukkit/craftbukkit/scoreboard/CraftScoreboardTranslations.java b/src/main/java/org/bukkit/craftbukkit/scoreboard/CraftScoreboardTranslations.java
index 944a4fee237730c0d89567aaa6ddf268467aa0e0..234b1be08d60119bc7a107297cdb43744581701f 100644
--- a/src/main/java/org/bukkit/craftbukkit/scoreboard/CraftScoreboardTranslations.java
+++ b/src/main/java/org/bukkit/craftbukkit/scoreboard/CraftScoreboardTranslations.java
@@ -5,6 +5,9 @@ import net.minecraft.world.scores.Scoreboard;
 import net.minecraft.world.scores.criteria.ObjectiveCriteria;
 import org.bukkit.scoreboard.DisplaySlot;
 import org.bukkit.scoreboard.RenderType;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 public final class CraftScoreboardTranslations {
     static final int MAX_DISPLAY_SLOT = Scoreboard.getDisplaySlotNames().length; // Paper
@@ -17,21 +20,21 @@ public final class CraftScoreboardTranslations {
 
     private CraftScoreboardTranslations() {}
 
-    public static DisplaySlot toBukkitSlot(int i) {
+    public static @Nullable DisplaySlot toBukkitSlot(int i) {
         if (true) return org.bukkit.scoreboard.DisplaySlot.NAMES.value(Scoreboard.getDisplaySlotName(i)); // Paper
         return CraftScoreboardTranslations.SLOTS.inverse().get(Scoreboard.getDisplaySlotName(i));
     }
 
-    public static int fromBukkitSlot(DisplaySlot slot) {
+    public static int fromBukkitSlot(@NotNull DisplaySlot slot) {
         if (true) return Scoreboard.getDisplaySlotByName(slot.getId()); // Paper
         return Scoreboard.getDisplaySlotByName(CraftScoreboardTranslations.SLOTS.get(slot));
     }
 
-    static RenderType toBukkitRender(ObjectiveCriteria.RenderType display) {
+    static @NotNull RenderType toBukkitRender(ObjectiveCriteria.@NotNull RenderType display) {
         return RenderType.valueOf(display.name());
     }
 
-    static ObjectiveCriteria.RenderType fromBukkitRender(RenderType render) {
+    static ObjectiveCriteria.@NotNull RenderType fromBukkitRender(@NotNull RenderType render) {
         return ObjectiveCriteria.RenderType.valueOf(render.name());
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/scoreboard/CraftTeam.java b/src/main/java/org/bukkit/craftbukkit/scoreboard/CraftTeam.java
index 67efb0d38ae369ff5254f7b1ec85d32d4eee8291..5b44b251ee21bcf42435181d399fd3d46e06e1fc 100644
--- a/src/main/java/org/bukkit/craftbukkit/scoreboard/CraftTeam.java
+++ b/src/main/java/org/bukkit/craftbukkit/scoreboard/CraftTeam.java
@@ -13,6 +13,9 @@ import org.bukkit.scoreboard.NameTagVisibility;
 import org.bukkit.scoreboard.Team;
 import org.bukkit.scoreboard.Team.Option;
 import org.bukkit.scoreboard.Team.OptionStatus;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 final class CraftTeam extends CraftScoreboardComponent implements Team {
     private final PlayerTeam team;
@@ -23,41 +26,41 @@ final class CraftTeam extends CraftScoreboardComponent implements Team {
     }
 
     @Override
-    public String getName() throws IllegalStateException {
+    public @NotNull String getName() throws IllegalStateException {
         CraftScoreboard scoreboard = this.checkState();
 
         return this.team.getName();
     }
     // Paper start
     @Override
-    public net.kyori.adventure.text.Component displayName() throws IllegalStateException {
+    public net.kyori.adventure.text.@NotNull Component displayName() throws IllegalStateException {
         CraftScoreboard scoreboard = checkState();
         return io.papermc.paper.adventure.PaperAdventure.asAdventure(team.getDisplayName());
     }
     @Override
-    public void displayName(net.kyori.adventure.text.Component displayName) throws IllegalStateException, IllegalArgumentException {
+    public void displayName(net.kyori.adventure.text.@Nullable Component displayName) throws IllegalStateException, IllegalArgumentException {
         if (displayName == null) displayName = net.kyori.adventure.text.Component.empty();
         CraftScoreboard scoreboard = checkState();
         team.setDisplayName(io.papermc.paper.adventure.PaperAdventure.asVanilla(displayName));
     }
     @Override
-    public net.kyori.adventure.text.Component prefix() throws IllegalStateException {
+    public net.kyori.adventure.text.@NotNull Component prefix() throws IllegalStateException {
         CraftScoreboard scoreboard = checkState();
         return io.papermc.paper.adventure.PaperAdventure.asAdventure(team.getPlayerPrefix());
     }
     @Override
-    public void prefix(net.kyori.adventure.text.Component prefix) throws IllegalStateException, IllegalArgumentException {
+    public void prefix(net.kyori.adventure.text.@Nullable Component prefix) throws IllegalStateException, IllegalArgumentException {
         if (prefix == null) prefix = net.kyori.adventure.text.Component.empty();
         CraftScoreboard scoreboard = checkState();
         team.setPlayerPrefix(io.papermc.paper.adventure.PaperAdventure.asVanilla(prefix));
     }
     @Override
-    public net.kyori.adventure.text.Component suffix() throws IllegalStateException {
+    public net.kyori.adventure.text.@NotNull Component suffix() throws IllegalStateException {
         CraftScoreboard scoreboard = checkState();
         return io.papermc.paper.adventure.PaperAdventure.asAdventure(team.getPlayerSuffix());
     }
     @Override
-    public void suffix(net.kyori.adventure.text.Component suffix) throws IllegalStateException, IllegalArgumentException {
+    public void suffix(net.kyori.adventure.text.@Nullable Component suffix) throws IllegalStateException, IllegalArgumentException {
         if (suffix == null) suffix = net.kyori.adventure.text.Component.empty();
         CraftScoreboard scoreboard = checkState();
         team.setPlayerSuffix(io.papermc.paper.adventure.PaperAdventure.asVanilla(suffix));
@@ -68,7 +71,7 @@ final class CraftTeam extends CraftScoreboardComponent implements Team {
         return this.team.getColor().getColor() != null;
     }
     @Override
-    public net.kyori.adventure.text.format.TextColor color() throws IllegalStateException {
+    public net.kyori.adventure.text.format.@NotNull TextColor color() throws IllegalStateException {
         CraftScoreboard scoreboard = checkState();
         if (team.getColor().getColor() == null) throw new IllegalStateException("Team colors must have hex values");
         net.kyori.adventure.text.format.TextColor color = net.kyori.adventure.text.format.TextColor.color(team.getColor().getColor());
@@ -76,7 +79,7 @@ final class CraftTeam extends CraftScoreboardComponent implements Team {
         return (net.kyori.adventure.text.format.NamedTextColor) color;
     }
     @Override
-    public void color(net.kyori.adventure.text.format.NamedTextColor color) {
+    public void color(net.kyori.adventure.text.format.@Nullable NamedTextColor color) {
         CraftScoreboard scoreboard = checkState();
         if (color == null) {
             this.team.setColor(net.minecraft.ChatFormatting.RESET);
@@ -87,7 +90,7 @@ final class CraftTeam extends CraftScoreboardComponent implements Team {
     // Paper end
 
     @Override
-    public String getDisplayName() throws IllegalStateException {
+    public @NotNull String getDisplayName() throws IllegalStateException {
         CraftScoreboard scoreboard = this.checkState();
 
         return CraftChatMessage.fromComponent(this.team.getDisplayName());
@@ -103,7 +106,7 @@ final class CraftTeam extends CraftScoreboardComponent implements Team {
     }
 
     @Override
-    public String getPrefix() throws IllegalStateException {
+    public @NotNull String getPrefix() throws IllegalStateException {
         CraftScoreboard scoreboard = this.checkState();
 
         return CraftChatMessage.fromComponent(this.team.getPlayerPrefix());
@@ -119,7 +122,7 @@ final class CraftTeam extends CraftScoreboardComponent implements Team {
     }
 
     @Override
-    public String getSuffix() throws IllegalStateException {
+    public @NotNull String getSuffix() throws IllegalStateException {
         CraftScoreboard scoreboard = this.checkState();
 
         return CraftChatMessage.fromComponent(this.team.getPlayerSuffix());
@@ -135,14 +138,14 @@ final class CraftTeam extends CraftScoreboardComponent implements Team {
     }
 
     @Override
-    public ChatColor getColor() throws IllegalStateException {
+    public @NotNull ChatColor getColor() throws IllegalStateException {
         CraftScoreboard scoreboard = this.checkState();
 
         return CraftChatMessage.getColor(this.team.getColor());
     }
 
     @Override
-    public void setColor(ChatColor color) {
+    public void setColor(@NotNull ChatColor color) {
         Validate.notNull(color, "Color cannot be null");
         CraftScoreboard scoreboard = this.checkState();
 
@@ -178,21 +181,21 @@ final class CraftTeam extends CraftScoreboardComponent implements Team {
     }
 
     @Override
-    public NameTagVisibility getNameTagVisibility() throws IllegalArgumentException {
+    public @NotNull NameTagVisibility getNameTagVisibility() throws IllegalArgumentException {
         CraftScoreboard scoreboard = this.checkState();
 
         return CraftTeam.notchToBukkit(this.team.getNameTagVisibility());
     }
 
     @Override
-    public void setNameTagVisibility(NameTagVisibility visibility) throws IllegalArgumentException {
+    public void setNameTagVisibility(@NotNull NameTagVisibility visibility) throws IllegalArgumentException {
         CraftScoreboard scoreboard = this.checkState();
 
         this.team.setNameTagVisibility(CraftTeam.bukkitToNotch(visibility));
     }
 
     @Override
-    public Set<OfflinePlayer> getPlayers() throws IllegalStateException {
+    public @NotNull Set<OfflinePlayer> getPlayers() throws IllegalStateException {
         CraftScoreboard scoreboard = this.checkState();
 
         ImmutableSet.Builder<OfflinePlayer> players = ImmutableSet.builder();
@@ -203,7 +206,7 @@ final class CraftTeam extends CraftScoreboardComponent implements Team {
     }
 
     @Override
-    public Set<String> getEntries() throws IllegalStateException {
+    public @NotNull Set<String> getEntries() throws IllegalStateException {
         CraftScoreboard scoreboard = this.checkState();
 
         ImmutableSet.Builder<String> entries = ImmutableSet.builder();
@@ -221,13 +224,13 @@ final class CraftTeam extends CraftScoreboardComponent implements Team {
     }
 
     @Override
-    public void addPlayer(OfflinePlayer player) throws IllegalStateException, IllegalArgumentException {
+    public void addPlayer(@NotNull OfflinePlayer player) throws IllegalStateException, IllegalArgumentException {
         Validate.notNull(player, "OfflinePlayer cannot be null");
         this.addEntry(player.getName());
     }
 
     @Override
-    public void addEntry(String entry) throws IllegalStateException, IllegalArgumentException {
+    public void addEntry(@NotNull String entry) throws IllegalStateException, IllegalArgumentException {
         Validate.notNull(entry, "Entry cannot be null");
         CraftScoreboard scoreboard = this.checkState();
 
@@ -236,12 +239,12 @@ final class CraftTeam extends CraftScoreboardComponent implements Team {
 
     // Paper start
     @Override
-    public void addEntities(java.util.Collection<org.bukkit.entity.Entity> entities) throws IllegalStateException, IllegalArgumentException {
+    public void addEntities(java.util.@NotNull Collection<org.bukkit.entity.Entity> entities) throws IllegalStateException, IllegalArgumentException {
         this.addEntries(entities.stream().map(entity -> ((org.bukkit.craftbukkit.entity.CraftEntity) entity).getHandle().getScoreboardName()).toList());
     }
 
     @Override
-    public void addEntries(java.util.Collection<String> entries) throws IllegalStateException, IllegalArgumentException {
+    public void addEntries(java.util.@NotNull Collection<String> entries) throws IllegalStateException, IllegalArgumentException {
         Validate.notNull(entries, "Entries cannot be null");
         CraftScoreboard scoreboard = this.checkState();
 
@@ -250,13 +253,13 @@ final class CraftTeam extends CraftScoreboardComponent implements Team {
     // Paper end
 
     @Override
-    public boolean removePlayer(OfflinePlayer player) throws IllegalStateException, IllegalArgumentException {
+    public boolean removePlayer(@NotNull OfflinePlayer player) throws IllegalStateException, IllegalArgumentException {
         Validate.notNull(player, "OfflinePlayer cannot be null");
         return this.removeEntry(player.getName());
     }
 
     @Override
-    public boolean removeEntry(String entry) throws IllegalStateException, IllegalArgumentException {
+    public boolean removeEntry(@NotNull String entry) throws IllegalStateException, IllegalArgumentException {
         Validate.notNull(entry, "Entry cannot be null");
         CraftScoreboard scoreboard = this.checkState();
 
@@ -270,12 +273,12 @@ final class CraftTeam extends CraftScoreboardComponent implements Team {
 
     // Paper start
     @Override
-    public boolean removeEntities(java.util.Collection<org.bukkit.entity.Entity> entities) throws IllegalStateException, IllegalArgumentException {
+    public boolean removeEntities(java.util.@NotNull Collection<org.bukkit.entity.Entity> entities) throws IllegalStateException, IllegalArgumentException {
         return this.removeEntries(entities.stream().map(entity -> ((org.bukkit.craftbukkit.entity.CraftEntity) entity).getHandle().getScoreboardName()).toList());
     }
 
     @Override
-    public boolean removeEntries(java.util.Collection<String> entries) throws IllegalStateException, IllegalArgumentException {
+    public boolean removeEntries(java.util.@NotNull Collection<String> entries) throws IllegalStateException, IllegalArgumentException {
         Validate.notNull(entries, "Entry cannot be null");
         CraftScoreboard scoreboard = this.checkState();
 
@@ -291,7 +294,7 @@ final class CraftTeam extends CraftScoreboardComponent implements Team {
     // Paper end
 
     @Override
-    public boolean hasPlayer(OfflinePlayer player) throws IllegalArgumentException, IllegalStateException {
+    public boolean hasPlayer(@NotNull OfflinePlayer player) throws IllegalArgumentException, IllegalStateException {
         Validate.notNull(player, "OfflinePlayer cannot be null");
         return this.hasEntry(player.getName());
     }
@@ -313,7 +316,7 @@ final class CraftTeam extends CraftScoreboardComponent implements Team {
     }
 
     @Override
-    public OptionStatus getOption(Option option) throws IllegalStateException {
+    public @NotNull OptionStatus getOption(@NotNull Option option) throws IllegalStateException {
         this.checkState();
 
         switch (option) {
@@ -329,7 +332,7 @@ final class CraftTeam extends CraftScoreboardComponent implements Team {
     }
 
     @Override
-    public void setOption(Option option, OptionStatus status) throws IllegalStateException {
+    public void setOption(@NotNull Option option, @NotNull OptionStatus status) throws IllegalStateException {
         this.checkState();
 
         switch (option) {
@@ -349,25 +352,25 @@ final class CraftTeam extends CraftScoreboardComponent implements Team {
 
     // Paper start
     @Override
-    public void addEntity(org.bukkit.entity.Entity entity) throws IllegalStateException, IllegalArgumentException {
+    public void addEntity(org.bukkit.entity.@NotNull Entity entity) throws IllegalStateException, IllegalArgumentException {
         Validate.notNull(entity, "Entity cannot be null");
         this.addEntry(((org.bukkit.craftbukkit.entity.CraftEntity) entity).getHandle().getScoreboardName());
     }
 
     @Override
-    public boolean removeEntity(org.bukkit.entity.Entity entity) throws IllegalStateException, IllegalArgumentException {
+    public boolean removeEntity(org.bukkit.entity.@NotNull Entity entity) throws IllegalStateException, IllegalArgumentException {
         Validate.notNull(entity, "Entity cannot be null");
         return this.removeEntry(((org.bukkit.craftbukkit.entity.CraftEntity) entity).getHandle().getScoreboardName());
     }
 
     @Override
-    public boolean hasEntity(org.bukkit.entity.Entity entity) throws IllegalStateException, IllegalArgumentException {
+    public boolean hasEntity(org.bukkit.entity.@NotNull Entity entity) throws IllegalStateException, IllegalArgumentException {
         Validate.notNull(entity, "Entity cannot be null");
         return this.hasEntry(((org.bukkit.craftbukkit.entity.CraftEntity) entity).getHandle().getScoreboardName());
     }
     // Paper end
 
-    public static Visibility bukkitToNotch(NameTagVisibility visibility) {
+    public static @NotNull Visibility bukkitToNotch(@NotNull NameTagVisibility visibility) {
         switch (visibility) {
             case ALWAYS:
                 return Visibility.ALWAYS;
@@ -382,7 +385,7 @@ final class CraftTeam extends CraftScoreboardComponent implements Team {
         }
     }
 
-    public static NameTagVisibility notchToBukkit(Visibility visibility) {
+    public static @NotNull NameTagVisibility notchToBukkit(@NotNull Visibility visibility) {
         switch (visibility) {
             case ALWAYS:
                 return NameTagVisibility.ALWAYS;
@@ -414,7 +417,7 @@ final class CraftTeam extends CraftScoreboardComponent implements Team {
     }
 
     @Override
-    public boolean equals(Object obj) {
+    public boolean equals(@Nullable Object obj) {
         if (obj == null) {
             return false;
         }
diff --git a/src/main/java/org/bukkit/craftbukkit/structure/CraftPalette.java b/src/main/java/org/bukkit/craftbukkit/structure/CraftPalette.java
index 505c87cfce4f1d6499e1f8878d2c7b368eafbf96..be1fb74ae1d00778bfc38d19df61a3f31709429a 100644
--- a/src/main/java/org/bukkit/craftbukkit/structure/CraftPalette.java
+++ b/src/main/java/org/bukkit/craftbukkit/structure/CraftPalette.java
@@ -6,6 +6,8 @@ import net.minecraft.world.level.levelgen.structure.templatesystem.StructureTemp
 import org.bukkit.block.BlockState;
 import org.bukkit.craftbukkit.block.CraftBlockStates;
 import org.bukkit.structure.Palette;
+import org.jetbrains.annotations.NotNull;
+
 
 public class CraftPalette implements Palette {
 
@@ -16,7 +18,7 @@ public class CraftPalette implements Palette {
     }
 
     @Override
-    public List<BlockState> getBlocks() {
+    public @NotNull List<BlockState> getBlocks() {
         List<BlockState> blocks = new ArrayList<>();
         for (StructureTemplate.StructureBlockInfo blockInfo : this.palette.blocks()) {
             blocks.add(CraftBlockStates.getBlockState(blockInfo.pos, blockInfo.state, blockInfo.nbt));
diff --git a/src/main/java/org/bukkit/craftbukkit/structure/CraftStructure.java b/src/main/java/org/bukkit/craftbukkit/structure/CraftStructure.java
index b5df942563e908769f8fa0def93996001bb8c503..8f24d6ace7eab44e933a57d33ae1e6acf91e0b43 100644
--- a/src/main/java/org/bukkit/craftbukkit/structure/CraftStructure.java
+++ b/src/main/java/org/bukkit/craftbukkit/structure/CraftStructure.java
@@ -28,6 +28,8 @@ import org.bukkit.persistence.PersistentDataContainer;
 import org.bukkit.structure.Palette;
 import org.bukkit.structure.Structure;
 import org.bukkit.util.BlockVector;
+import org.jetbrains.annotations.NotNull;
+
 
 public class CraftStructure implements Structure {
 
@@ -38,7 +40,7 @@ public class CraftStructure implements Structure {
     }
 
     @Override
-    public void place(Location location, boolean includeEntities, StructureRotation structureRotation, Mirror mirror, int palette, float integrity, Random random) {
+    public void place(@NotNull Location location, boolean includeEntities, @NotNull StructureRotation structureRotation, @NotNull Mirror mirror, int palette, float integrity, Random random) {
         location.checkFinite();
         World world = location.getWorld();
         Validate.notNull(world, "location#getWorld() cannot be null");
@@ -48,7 +50,7 @@ public class CraftStructure implements Structure {
     }
 
     @Override
-    public void place(RegionAccessor regionAccessor, BlockVector location, boolean includeEntities, StructureRotation structureRotation, Mirror mirror, int palette, float integrity, Random random) {
+    public void place(@NotNull RegionAccessor regionAccessor, @NotNull BlockVector location, boolean includeEntities, @NotNull StructureRotation structureRotation, @NotNull Mirror mirror, int palette, float integrity, Random random) {
         Validate.notNull(regionAccessor, "regionAccessor can not be null");
         location.checkFinite();
 
@@ -70,7 +72,7 @@ public class CraftStructure implements Structure {
     }
 
     @Override
-    public void fill(Location corner1, Location corner2, boolean includeEntities) {
+    public void fill(@NotNull Location corner1, @NotNull Location corner2, boolean includeEntities) {
         Validate.notNull(corner1, "corner1 cannot be null");
         Validate.notNull(corner2, "corner2 cannot be null");
         World world = corner1.getWorld();
@@ -82,7 +84,7 @@ public class CraftStructure implements Structure {
     }
 
     @Override
-    public void fill(Location origin, BlockVector size, boolean includeEntities) {
+    public void fill(@NotNull Location origin, @NotNull BlockVector size, boolean includeEntities) {
         Validate.notNull(origin, "origin cannot be null");
         World world = origin.getWorld();
         Validate.notNull(world, "origin#getWorld() cannot be null");
@@ -95,12 +97,12 @@ public class CraftStructure implements Structure {
     }
 
     @Override
-    public BlockVector getSize() {
+    public @NotNull BlockVector getSize() {
         return new BlockVector(this.structure.getSize().getX(), this.structure.getSize().getY(), this.structure.getSize().getZ());
     }
 
     @Override
-    public List<Entity> getEntities() {
+    public @NotNull List<Entity> getEntities() {
         List<Entity> entities = new ArrayList<>();
         for (StructureTemplate.StructureEntityInfo entity : structure.entityInfoList) {
             EntityType.create(entity.nbt, ((CraftWorld) Bukkit.getServer().getWorlds().get(0)).getHandle()).ifPresent(dummyEntity -> {
@@ -117,7 +119,7 @@ public class CraftStructure implements Structure {
     }
 
     @Override
-    public List<Palette> getPalettes() {
+    public @NotNull List<Palette> getPalettes() {
         return structure.palettes.stream().map(CraftPalette::new).collect(Collectors.toList());
     }
 
@@ -127,7 +129,7 @@ public class CraftStructure implements Structure {
     }
 
     @Override
-    public PersistentDataContainer getPersistentDataContainer() {
+    public @NotNull PersistentDataContainer getPersistentDataContainer() {
         return this.getHandle().persistentDataContainer;
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/structure/CraftStructureManager.java b/src/main/java/org/bukkit/craftbukkit/structure/CraftStructureManager.java
index 76da234f562b8cefcd299cbf2bed4eb6b482bafd..b656adf6a7f0caeb85cdd879ef5cf8b1de9a376b 100644
--- a/src/main/java/org/bukkit/craftbukkit/structure/CraftStructureManager.java
+++ b/src/main/java/org/bukkit/craftbukkit/structure/CraftStructureManager.java
@@ -22,6 +22,8 @@ import org.bukkit.NamespacedKey;
 import org.bukkit.craftbukkit.util.CraftNamespacedKey;
 import org.bukkit.structure.Structure;
 import org.bukkit.structure.StructureManager;
+import org.jetbrains.annotations.NotNull;
+
 
 public class CraftStructureManager implements StructureManager {
 
@@ -32,7 +34,7 @@ public class CraftStructureManager implements StructureManager {
     }
 
     @Override
-    public Map<NamespacedKey, Structure> getStructures() {
+    public @NotNull Map<NamespacedKey, Structure> getStructures() {
         Map<NamespacedKey, Structure> cachedStructures = new HashMap<>();
         for (Map.Entry<ResourceLocation, Optional<StructureTemplate>> entry : structureManager.structureRepository.entrySet()) {
             entry.getValue().ifPresent(definedStructure -> {
@@ -43,7 +45,7 @@ public class CraftStructureManager implements StructureManager {
     }
 
     @Override
-    public Structure getStructure(NamespacedKey structureKey) {
+    public Structure getStructure(@NotNull NamespacedKey structureKey) {
         Validate.notNull(structureKey, "structureKey cannot be null");
 
         final Optional<StructureTemplate> definedStructure = structureManager.structureRepository.get(CraftNamespacedKey.toMinecraft(structureKey));
@@ -54,7 +56,7 @@ public class CraftStructureManager implements StructureManager {
     }
 
     @Override
-    public Structure loadStructure(NamespacedKey structureKey, boolean register) {
+    public Structure loadStructure(@NotNull NamespacedKey structureKey, boolean register) {
         ResourceLocation minecraftKey = this.createAndValidateMinecraftStructureKey(structureKey);
 
         Optional<StructureTemplate> structure = structureManager.structureRepository.get(minecraftKey);
@@ -70,19 +72,19 @@ public class CraftStructureManager implements StructureManager {
     }
 
     @Override
-    public Structure loadStructure(NamespacedKey structureKey) {
+    public Structure loadStructure(@NotNull NamespacedKey structureKey) {
         return this.loadStructure(structureKey, true);
     }
 
     @Override
-    public void saveStructure(NamespacedKey structureKey) {
+    public void saveStructure(@NotNull NamespacedKey structureKey) {
         ResourceLocation minecraftKey = this.createAndValidateMinecraftStructureKey(structureKey);
 
         this.structureManager.save(minecraftKey);
     }
 
     @Override
-    public void saveStructure(NamespacedKey structureKey, Structure structure) throws IOException {
+    public void saveStructure(@NotNull NamespacedKey structureKey, @NotNull Structure structure) throws IOException {
         Validate.notNull(structure, "structure cannot be null");
 
         File structureFile = this.getStructureFile(structureKey);
@@ -91,7 +93,7 @@ public class CraftStructureManager implements StructureManager {
     }
 
     @Override
-    public Structure registerStructure(NamespacedKey structureKey, Structure structure) {
+    public Structure registerStructure(@NotNull NamespacedKey structureKey, @NotNull Structure structure) {
         Validate.notNull(structure, "structure cannot be null");
         ResourceLocation minecraftKey = this.createAndValidateMinecraftStructureKey(structureKey);
 
@@ -101,7 +103,7 @@ public class CraftStructureManager implements StructureManager {
     }
 
     @Override
-    public Structure unregisterStructure(NamespacedKey structureKey) {
+    public Structure unregisterStructure(@NotNull NamespacedKey structureKey) {
         ResourceLocation minecraftKey = this.createAndValidateMinecraftStructureKey(structureKey);
 
         final Optional<StructureTemplate> previousStructure = structureManager.structureRepository.remove(minecraftKey);
@@ -109,12 +111,12 @@ public class CraftStructureManager implements StructureManager {
     }
 
     @Override
-    public void deleteStructure(NamespacedKey structureKey) throws IOException {
+    public void deleteStructure(@NotNull NamespacedKey structureKey) throws IOException {
         this.deleteStructure(structureKey, true);
     }
 
     @Override
-    public void deleteStructure(NamespacedKey structureKey, boolean unregister) throws IOException {
+    public void deleteStructure(@NotNull NamespacedKey structureKey, boolean unregister) throws IOException {
         ResourceLocation key = CraftNamespacedKey.toMinecraft(structureKey);
 
         if (unregister) {
@@ -125,13 +127,13 @@ public class CraftStructureManager implements StructureManager {
     }
 
     @Override
-    public File getStructureFile(NamespacedKey structureKey) {
+    public @NotNull File getStructureFile(@NotNull NamespacedKey structureKey) {
         ResourceLocation minecraftKey = this.createAndValidateMinecraftStructureKey(structureKey);
         return this.structureManager.getPathToGeneratedStructure(minecraftKey, ".nbt").toFile();
     }
 
     @Override
-    public Structure loadStructure(File file) throws IOException {
+    public @NotNull Structure loadStructure(@NotNull File file) throws IOException {
         Validate.notNull(file, "file cannot be null");
 
         FileInputStream fileinputstream = new FileInputStream(file);
@@ -139,14 +141,14 @@ public class CraftStructureManager implements StructureManager {
     }
 
     @Override
-    public Structure loadStructure(InputStream inputStream) throws IOException {
+    public @NotNull Structure loadStructure(@NotNull InputStream inputStream) throws IOException {
         Validate.notNull(inputStream, "inputStream cannot be null");
 
         return new CraftStructure(this.structureManager.readStructure(inputStream));
     }
 
     @Override
-    public void saveStructure(File file, Structure structure) throws IOException {
+    public void saveStructure(@NotNull File file, @NotNull Structure structure) throws IOException {
         Validate.notNull(file, "file cannot be null");
         Validate.notNull(structure, "structure cannot be null");
 
@@ -155,7 +157,7 @@ public class CraftStructureManager implements StructureManager {
     }
 
     @Override
-    public void saveStructure(OutputStream outputStream, Structure structure) throws IOException {
+    public void saveStructure(@NotNull OutputStream outputStream, @NotNull Structure structure) throws IOException {
         Validate.notNull(outputStream, "outputStream cannot be null");
         Validate.notNull(structure, "structure cannot be null");
 
@@ -164,11 +166,11 @@ public class CraftStructureManager implements StructureManager {
     }
 
     @Override
-    public Structure createStructure() {
+    public @NotNull Structure createStructure() {
         return new CraftStructure(new StructureTemplate());
     }
 
-    private ResourceLocation createAndValidateMinecraftStructureKey(NamespacedKey structureKey) {
+    private @NotNull ResourceLocation createAndValidateMinecraftStructureKey(@NotNull NamespacedKey structureKey) {
         Validate.notNull(structureKey, "structureKey cannot be null");
 
         ResourceLocation minecraftkey = CraftNamespacedKey.toMinecraft(structureKey);
@@ -179,7 +181,7 @@ public class CraftStructureManager implements StructureManager {
     }
 
     @Override
-    public Structure copy(Structure structure) {
+    public @NotNull Structure copy(@NotNull Structure structure) {
         return new CraftStructure(this.structureManager.readStructure(((CraftStructure) structure).getHandle().save(new CompoundTag())));
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/tag/CraftBlockTag.java b/src/main/java/org/bukkit/craftbukkit/tag/CraftBlockTag.java
index 6e82e8174d9556e673b40d9f30dcee7a31cb3e66..507248ea792ce465c54fbdd4becab957c955c835 100644
--- a/src/main/java/org/bukkit/craftbukkit/tag/CraftBlockTag.java
+++ b/src/main/java/org/bukkit/craftbukkit/tag/CraftBlockTag.java
@@ -8,10 +8,12 @@ import net.minecraft.tags.TagKey;
 import net.minecraft.world.level.block.Block;
 import org.bukkit.Material;
 import org.bukkit.craftbukkit.util.CraftMagicNumbers;
+import org.jetbrains.annotations.NotNull;
+
 
 public class CraftBlockTag extends CraftTag<Block, Material> {
 
-    public CraftBlockTag(Registry<Block> registry, TagKey<Block> tag) {
+    public CraftBlockTag(@NotNull Registry<Block> registry, TagKey<Block> tag) {
         super(registry, tag);
     }
 
@@ -28,7 +30,7 @@ public class CraftBlockTag extends CraftTag<Block, Material> {
     }
 
     @Override
-    public Set<Material> getValues() {
+    public @NotNull Set<Material> getValues() {
         return getHandle().stream().map((block) -> CraftMagicNumbers.getMaterial(block.value())).collect(Collectors.toUnmodifiableSet());
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/tag/CraftEntityTag.java b/src/main/java/org/bukkit/craftbukkit/tag/CraftEntityTag.java
index 7b3b12b4b2f5dbd37e23a7f5a0ad2abd04d259e2..fecf60db912366da65fa1614015b2eb73cb4c111 100644
--- a/src/main/java/org/bukkit/craftbukkit/tag/CraftEntityTag.java
+++ b/src/main/java/org/bukkit/craftbukkit/tag/CraftEntityTag.java
@@ -9,10 +9,12 @@ import net.minecraft.tags.TagKey;
 import org.bukkit.Registry;
 import org.bukkit.craftbukkit.util.CraftNamespacedKey;
 import org.bukkit.entity.EntityType;
+import org.jetbrains.annotations.NotNull;
+
 
 public class CraftEntityTag extends CraftTag<net.minecraft.world.entity.EntityType<?>, EntityType> {
 
-    public CraftEntityTag(net.minecraft.core.Registry<net.minecraft.world.entity.EntityType<?>> registry, TagKey<net.minecraft.world.entity.EntityType<?>> tag) {
+    public CraftEntityTag(net.minecraft.core.@NotNull Registry<net.minecraft.world.entity.EntityType<?>> registry, TagKey<net.minecraft.world.entity.EntityType<?>> tag) {
         super(registry, tag);
     }
 
@@ -23,7 +25,7 @@ public class CraftEntityTag extends CraftTag<net.minecraft.world.entity.EntityTy
     }
 
     @Override
-    public Set<EntityType> getValues() {
+    public @NotNull Set<EntityType> getValues() {
         return getHandle().stream().map((nms) -> Registry.ENTITY_TYPE.get(CraftNamespacedKey.fromMinecraft(net.minecraft.world.entity.EntityType.getKey(nms.value())))).filter(Objects::nonNull).collect(Collectors.toUnmodifiableSet());
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/tag/CraftFluidTag.java b/src/main/java/org/bukkit/craftbukkit/tag/CraftFluidTag.java
index 1a987b3c8f044dfd217e984dc122582095367e46..78e45667419e734a9417a592fea765f40a0c1c9d 100644
--- a/src/main/java/org/bukkit/craftbukkit/tag/CraftFluidTag.java
+++ b/src/main/java/org/bukkit/craftbukkit/tag/CraftFluidTag.java
@@ -7,10 +7,12 @@ import net.minecraft.core.Registry;
 import net.minecraft.tags.TagKey;
 import org.bukkit.Fluid;
 import org.bukkit.craftbukkit.util.CraftMagicNumbers;
+import org.jetbrains.annotations.NotNull;
+
 
 public class CraftFluidTag extends CraftTag<net.minecraft.world.level.material.Fluid, Fluid> {
 
-    public CraftFluidTag(Registry<net.minecraft.world.level.material.Fluid> registry, TagKey<net.minecraft.world.level.material.Fluid> tag) {
+    public CraftFluidTag(@NotNull Registry<net.minecraft.world.level.material.Fluid> registry, TagKey<net.minecraft.world.level.material.Fluid> tag) {
         super(registry, tag);
     }
 
@@ -21,7 +23,7 @@ public class CraftFluidTag extends CraftTag<net.minecraft.world.level.material.F
     }
 
     @Override
-    public Set<Fluid> getValues() {
+    public @NotNull Set<Fluid> getValues() {
         return getHandle().stream().map((fluid) -> CraftMagicNumbers.getFluid(fluid.value())).collect(Collectors.toUnmodifiableSet());
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/tag/CraftItemTag.java b/src/main/java/org/bukkit/craftbukkit/tag/CraftItemTag.java
index 5d792ee4208553b91f4b36a75a70b78f71a96161..ca236485bec91fd25e390d99cdeddb9afa51ecfa 100644
--- a/src/main/java/org/bukkit/craftbukkit/tag/CraftItemTag.java
+++ b/src/main/java/org/bukkit/craftbukkit/tag/CraftItemTag.java
@@ -8,10 +8,12 @@ import net.minecraft.tags.TagKey;
 import net.minecraft.world.item.Item;
 import org.bukkit.Material;
 import org.bukkit.craftbukkit.util.CraftMagicNumbers;
+import org.jetbrains.annotations.NotNull;
+
 
 public class CraftItemTag extends CraftTag<Item, Material> {
 
-    public CraftItemTag(Registry<Item> registry, TagKey<Item> tag) {
+    public CraftItemTag(@NotNull Registry<Item> registry, TagKey<Item> tag) {
         super(registry, tag);
     }
 
@@ -28,7 +30,7 @@ public class CraftItemTag extends CraftTag<Item, Material> {
     }
 
     @Override
-    public Set<Material> getValues() {
+    public @NotNull Set<Material> getValues() {
         return getHandle().stream().map((item) -> CraftMagicNumbers.getMaterial(item.value())).collect(Collectors.toUnmodifiableSet());
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/tag/CraftTag.java b/src/main/java/org/bukkit/craftbukkit/tag/CraftTag.java
index 9643fb87b1cad02b873651cd205678c4e92c7611..b47b724990ebdda7ec3cfdd3d75ae22ed5735361 100644
--- a/src/main/java/org/bukkit/craftbukkit/tag/CraftTag.java
+++ b/src/main/java/org/bukkit/craftbukkit/tag/CraftTag.java
@@ -7,6 +7,8 @@ import org.bukkit.Keyed;
 import org.bukkit.NamespacedKey;
 import org.bukkit.Tag;
 import org.bukkit.craftbukkit.util.CraftNamespacedKey;
+import org.jetbrains.annotations.NotNull;
+
 
 public abstract class CraftTag<N, B extends Keyed> implements Tag<B> {
 
@@ -15,7 +17,7 @@ public abstract class CraftTag<N, B extends Keyed> implements Tag<B> {
     //
     private HolderSet.Named<N> handle;
 
-    public CraftTag(Registry<N> registry, TagKey<N> tag) {
+    public CraftTag(@NotNull Registry<N> registry, TagKey<N> tag) {
         this.registry = registry;
         this.tag = tag;
         this.handle = registry.getTag(this.tag).orElseThrow();
@@ -26,7 +28,7 @@ public abstract class CraftTag<N, B extends Keyed> implements Tag<B> {
     }
 
     @Override
-    public NamespacedKey getKey() {
+    public @NotNull NamespacedKey getKey() {
         return CraftNamespacedKey.fromMinecraft(this.tag.location());
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/util/BlockStateListPopulator.java b/src/main/java/org/bukkit/craftbukkit/util/BlockStateListPopulator.java
index 602ce766f00dfde057c735eae3351068d09feab1..7e7820053731b40488fd2be2045bea0c0dbed38f 100644
--- a/src/main/java/org/bukkit/craftbukkit/util/BlockStateListPopulator.java
+++ b/src/main/java/org/bukkit/craftbukkit/util/BlockStateListPopulator.java
@@ -19,6 +19,8 @@ import org.bukkit.block.BlockState;
 import org.bukkit.craftbukkit.block.CraftBlock;
 import org.bukkit.craftbukkit.block.CraftBlockEntityState;
 import org.bukkit.craftbukkit.block.CraftBlockState;
+import org.jetbrains.annotations.NotNull;
+
 
 public class BlockStateListPopulator extends DummyGeneratorAccess {
     private final LevelAccessor world;
@@ -36,13 +38,13 @@ public class BlockStateListPopulator extends DummyGeneratorAccess {
     }
 
     @Override
-    public net.minecraft.world.level.block.state.BlockState getBlockState(BlockPos pos) {
+    public net.minecraft.world.level.block.state.@NotNull BlockState getBlockState(BlockPos pos) {
         net.minecraft.world.level.block.state.BlockState blockData = this.dataMap.get(pos);
         return (blockData != null) ? blockData : this.world.getBlockState(pos);
     }
 
     @Override
-    public FluidState getFluidState(BlockPos pos) {
+    public @NotNull FluidState getFluidState(BlockPos pos) {
         net.minecraft.world.level.block.state.BlockState blockData = this.dataMap.get(pos);
         return (blockData != null) ? blockData.getFluidState() : this.world.getFluidState(pos);
     }
@@ -80,7 +82,7 @@ public class BlockStateListPopulator extends DummyGeneratorAccess {
     }
 
     @Override
-    public ServerLevel getMinecraftWorld() {
+    public @NotNull ServerLevel getMinecraftWorld() {
         return this.world.getMinecraftWorld();
     }
 
@@ -98,11 +100,11 @@ public class BlockStateListPopulator extends DummyGeneratorAccess {
         }
     }
 
-    public Set<BlockPos> getBlocks() {
+    public @NotNull Set<BlockPos> getBlocks() {
         return this.list.keySet();
     }
 
-    public List<CraftBlockState> getList() {
+    public @NotNull List<CraftBlockState> getList() {
         return new ArrayList<>(this.list.values());
     }
 
@@ -122,7 +124,7 @@ public class BlockStateListPopulator extends DummyGeneratorAccess {
     }
 
     @Override
-    public boolean isStateAtPosition(BlockPos pos, Predicate<net.minecraft.world.level.block.state.BlockState> state) {
+    public boolean isStateAtPosition(BlockPos pos, @NotNull Predicate<net.minecraft.world.level.block.state.BlockState> state) {
         return state.test(this.getBlockState(pos));
     }
 
@@ -132,7 +134,7 @@ public class BlockStateListPopulator extends DummyGeneratorAccess {
     }
 
     @Override
-    public DimensionType dimensionType() {
+    public @NotNull DimensionType dimensionType() {
         return this.world.dimensionType();
     }
 
@@ -143,14 +145,14 @@ public class BlockStateListPopulator extends DummyGeneratorAccess {
 
     // Paper start
     @Override
-    public <T extends BlockEntity> java.util.Optional<T> getBlockEntity(BlockPos pos, net.minecraft.world.level.block.entity.BlockEntityType<T> type) {
+    public <T extends BlockEntity> java.util.@NotNull Optional<T> getBlockEntity(BlockPos pos, net.minecraft.world.level.block.entity.BlockEntityType<T> type) {
         BlockEntity tileentity = this.getBlockEntity(pos);
 
         return tileentity != null && tileentity.getType() == type ? (java.util.Optional<T>) java.util.Optional.of(tileentity) : java.util.Optional.empty();
     }
 
     @Override
-    public BlockPos getHeightmapPos(net.minecraft.world.level.levelgen.Heightmap.Types heightmap, BlockPos pos) {
+    public @NotNull BlockPos getHeightmapPos(net.minecraft.world.level.levelgen.Heightmap.Types heightmap, BlockPos pos) {
         return world.getHeightmapPos(heightmap, pos);
     }
 
@@ -160,7 +162,7 @@ public class BlockStateListPopulator extends DummyGeneratorAccess {
     }
 
     @Override
-    public net.minecraft.world.level.storage.LevelData getLevelData() {
+    public net.minecraft.world.level.storage.@NotNull LevelData getLevelData() {
         return world.getLevelData();
     }
     // Paper end
diff --git a/src/main/java/org/bukkit/craftbukkit/util/Commodore.java b/src/main/java/org/bukkit/craftbukkit/util/Commodore.java
index ebbbfc318439fec33331d71563e528cd3429e541..18788abd108972e0177dc61cbefcb88e01812bda 100644
--- a/src/main/java/org/bukkit/craftbukkit/util/Commodore.java
+++ b/src/main/java/org/bukkit/craftbukkit/util/Commodore.java
@@ -19,6 +19,8 @@ import joptsimple.OptionSet;
 import joptsimple.OptionSpec;
 import org.bukkit.Material;
 import org.bukkit.plugin.AuthorNagException;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
 import org.objectweb.asm.ClassReader;
 import org.objectweb.asm.ClassVisitor;
 import org.objectweb.asm.ClassWriter;
@@ -56,7 +58,7 @@ public class Commodore
     // Paper start - Plugin rewrites
     private static final String CB_PACKAGE = org.bukkit.Bukkit.getServer().getClass().getPackageName().replace('.', '/');
     private static final Map<String, String> SEARCH_AND_REMOVE = initReplacementsMap();
-    private static Map<String, String> initReplacementsMap()
+    private static @NotNull Map<String, String> initReplacementsMap()
     {
         Map<String, String> getAndRemove = new HashMap<>();
         // Be wary of maven shade's relocations
@@ -121,7 +123,7 @@ public class Commodore
         }
     }
 
-    private static void convert(File in, File out)
+    private static void convert(@NotNull File in, @NotNull File out)
     {
         System.out.println( "Attempting to convert " + in + " to " + out );
 
@@ -166,7 +168,7 @@ public class Commodore
         }
     }
 
-    public static byte[] convert(byte[] b, final boolean modern)
+    public static byte[] convert(byte @NotNull [] b, final boolean modern)
     {
         ClassReader cr = new ClassReader( b );
         ClassWriter cw = new ClassWriter( cr, 0 );
@@ -175,7 +177,7 @@ public class Commodore
         {
             // Paper start - Rewrite plugins
             @Override
-            public FieldVisitor visitField(int access, String name, String desc, String signature, Object value)
+            public FieldVisitor visitField(int access, String name, String desc, @Nullable String signature, Object value)
             {
                 desc = getOriginalOrRewrite( desc );
                 if ( signature != null ) {
@@ -187,13 +189,13 @@ public class Commodore
             // Paper end
 
             @Override
-            public MethodVisitor visitMethod(int access, String name, String desc, String signature, String[] exceptions)
+            public @NotNull MethodVisitor visitMethod(int access, String name, String desc, String signature, String[] exceptions)
             {
                 return new MethodVisitor( api, super.visitMethod( access, name, desc, signature, exceptions ) )
                 {
                     // Paper start - Plugin rewrites
                     @Override
-                    public void visitInvokeDynamicInsn(String name, String desc, Handle bootstrapMethodHandle, Object... bootstrapMethodArguments)
+                    public void visitInvokeDynamicInsn(String name, @Nullable String desc, Handle bootstrapMethodHandle, Object... bootstrapMethodArguments)
                     {
                         // Paper start - Rewrite plugins
                         name = getOriginalOrRewrite( name );
@@ -215,7 +217,7 @@ public class Commodore
                     }
 
                     @Override
-                    public void visitFrame(int type, int nLocal, Object[] local, int nStack, Object[] stack) {
+                    public void visitFrame(int type, int nLocal, Object @NotNull [] local, int nStack, Object @NotNull [] stack) {
                         for ( int i = 0; i < local.length; i++ )
                         {
                             if ( !( local[i] instanceof String ) ) { continue; }
@@ -243,7 +245,7 @@ public class Commodore
                     // Paper end
 
                     @Override
-                    public void visitFieldInsn(int opcode, String owner, String name, String desc)
+                    public void visitFieldInsn(int opcode, String owner, @NotNull String name, @Nullable String desc)
                     {
                         // Paper start - Rewrite plugins
                         owner = getOriginalOrRewrite( owner );
@@ -411,7 +413,7 @@ public class Commodore
                     }
 
                     @Override
-                    public void visitMethodInsn(int opcode, String owner, String name, String desc, boolean itf)
+                    public void visitMethodInsn(int opcode, @NotNull String owner, @NotNull String name, @NotNull String desc, boolean itf)
                     {
                         // SPIGOT-4496
                         if ( owner.equals( "org/bukkit/map/MapView" ) && name.equals( "getId" ) && desc.equals( "()S" ) )
diff --git a/src/main/java/org/bukkit/craftbukkit/util/CraftChatMessage.java b/src/main/java/org/bukkit/craftbukkit/util/CraftChatMessage.java
index 0f70be614f8f5350ad558d0ae645cdf0027e1e76..802062886e741b6d6943b69a7b62dea66399483f 100644
--- a/src/main/java/org/bukkit/craftbukkit/util/CraftChatMessage.java
+++ b/src/main/java/org/bukkit/craftbukkit/util/CraftChatMessage.java
@@ -20,11 +20,14 @@ import net.minecraft.network.chat.TextColor;
 import net.minecraft.network.chat.contents.LiteralContents;
 import net.minecraft.network.chat.contents.TranslatableContents;
 import org.bukkit.ChatColor;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 public final class CraftChatMessage {
 
     private static final Pattern LINK_PATTERN = Pattern.compile("((?:(?:https?):\\/\\/)?(?:[-\\w_\\.]{2,}\\.[a-z]{2,4}.*?(?=[\\.\\?!,;:]?(?:[" + String.valueOf(org.bukkit.ChatColor.COLOR_CHAR) + " \\n]|$))))");
-    private static final Map<Character, ChatFormatting> formatMap;
+    private static final @NotNull Map<Character, ChatFormatting> formatMap;
 
     static {
         Builder<Character, ChatFormatting> builder = ImmutableMap.builder();
@@ -34,11 +37,11 @@ public final class CraftChatMessage {
         formatMap = builder.build();
     }
 
-    public static ChatFormatting getColor(ChatColor color) {
+    public static ChatFormatting getColor(@NotNull ChatColor color) {
         return CraftChatMessage.formatMap.get(color.getChar());
     }
 
-    public static ChatColor getColor(ChatFormatting format) {
+    public static @Nullable ChatColor getColor(@NotNull ChatFormatting format) {
         return ChatColor.getByChar(format.code);
     }
 
@@ -51,14 +54,14 @@ public final class CraftChatMessage {
         private static final Style RESET = Style.EMPTY.withBold(false).withItalic(false).withUnderlined(false).withStrikethrough(false).withObfuscated(false);
 
         private final List<Component> list = new ArrayList<Component>();
-        private MutableComponent currentChatComponent = Component.empty();
-        private Style modifier = Style.EMPTY;
-        private final Component[] output;
+        private @Nullable MutableComponent currentChatComponent = Component.empty();
+        private @NotNull Style modifier = Style.EMPTY;
+        private final Component @NotNull [] output;
         private int currentIndex;
-        private StringBuilder hex;
+        private @Nullable StringBuilder hex;
         private final String message;
 
-        private StringMessage(String message, boolean keepNewlines, boolean plain) {
+        private StringMessage(@Nullable String message, boolean keepNewlines, boolean plain) {
             this.message = message;
             if (message == null) {
                 this.output = new Component[]{this.currentChatComponent};
@@ -186,7 +189,7 @@ public final class CraftChatMessage {
         return CraftChatMessage.fromStringOrNull(message, false);
     }
 
-    public static Component fromStringOrNull(String message, boolean keepNewlines) {
+    public static Component fromStringOrNull(@Nullable String message, boolean keepNewlines) {
         return (message == null || message.isEmpty()) ? null : CraftChatMessage.fromString(message, keepNewlines)[0];
     }
 
@@ -202,22 +205,22 @@ public final class CraftChatMessage {
         return new StringMessage(message, keepNewlines, plain).getOutput();
     }
 
-    public static String toJSON(Component component) {
+    public static @NotNull String toJSON(@NotNull Component component) {
         return Component.Serializer.toJson(component);
     }
 
-    public static String toJSONOrNull(Component component) {
+    public static String toJSONOrNull(@Nullable Component component) {
         if (component == null) return null;
         return CraftChatMessage.toJSON(component);
     }
 
-    public static Component fromJSON(String jsonMessage) throws JsonParseException {
+    public static @Nullable Component fromJSON(@NotNull String jsonMessage) throws JsonParseException {
         // Note: This also parses plain Strings to text components.
         // Note: An empty message (empty, or only consisting of whitespace) results in null rather than a parse exception.
         return Component.Serializer.fromJson(jsonMessage);
     }
 
-    public static Component fromJSONOrNull(String jsonMessage) {
+    public static Component fromJSONOrNull(@Nullable String jsonMessage) {
         if (jsonMessage == null) return null;
         try {
             return CraftChatMessage.fromJSON(jsonMessage); // Can return null
@@ -230,11 +233,11 @@ public final class CraftChatMessage {
         return CraftChatMessage.fromJSONOrString(message, false);
     }
 
-    public static Component fromJSONOrString(String message, boolean keepNewlines) {
+    public static @Nullable Component fromJSONOrString(String message, boolean keepNewlines) {
         return CraftChatMessage.fromJSONOrString(message, false, keepNewlines);
     }
 
-    private static Component fromJSONOrString(String message, boolean nullable, boolean keepNewlines) {
+    private static @Nullable Component fromJSONOrString(@Nullable String message, boolean nullable, boolean keepNewlines) {
         if (message == null) message = "";
         if (nullable && message.isEmpty()) return null;
         Component component = CraftChatMessage.fromJSONOrNull(message);
@@ -249,7 +252,7 @@ public final class CraftChatMessage {
         return CraftChatMessage.fromJSONOrStringToJSON(message, false);
     }
 
-    public static String fromJSONOrStringToJSON(String message, boolean keepNewlines) {
+    public static @Nullable String fromJSONOrStringToJSON(String message, boolean keepNewlines) {
         return CraftChatMessage.fromJSONOrStringToJSON(message, false, keepNewlines, Integer.MAX_VALUE, false);
     }
 
@@ -257,11 +260,11 @@ public final class CraftChatMessage {
         return CraftChatMessage.fromJSONOrStringOrNullToJSON(message, false);
     }
 
-    public static String fromJSONOrStringOrNullToJSON(String message, boolean keepNewlines) {
+    public static @Nullable String fromJSONOrStringOrNullToJSON(String message, boolean keepNewlines) {
         return CraftChatMessage.fromJSONOrStringToJSON(message, true, keepNewlines, Integer.MAX_VALUE, false);
     }
 
-    public static String fromJSONOrStringToJSON(String message, boolean nullable, boolean keepNewlines, int maxLength, boolean checkJsonContentLength) {
+    public static @Nullable String fromJSONOrStringToJSON(@Nullable String message, boolean nullable, boolean keepNewlines, int maxLength, boolean checkJsonContentLength) {
         if (message == null) message = "";
         if (nullable && message.isEmpty()) return null;
         // If the input can be parsed as JSON, we use that:
@@ -283,7 +286,7 @@ public final class CraftChatMessage {
         }
     }
 
-    public static String trimMessage(String message, int maxLength) {
+    public static String trimMessage(@Nullable String message, int maxLength) {
         if (message != null && message.length() > maxLength) {
             return message.substring(0, maxLength);
         } else {
@@ -291,26 +294,26 @@ public final class CraftChatMessage {
         }
     }
 
-    public static String fromStringToJSON(String message) {
+    public static @NotNull String fromStringToJSON(String message) {
         return CraftChatMessage.fromStringToJSON(message, false);
     }
 
-    public static String fromStringToJSON(String message, boolean keepNewlines) {
+    public static @NotNull String fromStringToJSON(String message, boolean keepNewlines) {
         Component component = CraftChatMessage.fromString(message, keepNewlines)[0];
         return CraftChatMessage.toJSON(component);
     }
 
-    public static String fromStringOrNullToJSON(String message) {
+    public static @Nullable String fromStringOrNullToJSON(String message) {
         Component component = CraftChatMessage.fromStringOrNull(message);
         return CraftChatMessage.toJSONOrNull(component);
     }
 
-    public static String fromJSONComponent(String jsonMessage) {
+    public static @NotNull String fromJSONComponent(String jsonMessage) {
         Component component = CraftChatMessage.fromJSONOrNull(jsonMessage);
         return CraftChatMessage.fromComponent(component);
     }
 
-    public static String fromComponent(Component component) {
+    public static @NotNull String fromComponent(@Nullable Component component) {
         if (component == null) return "";
         if (component instanceof io.papermc.paper.adventure.AdventureComponent) component = ((io.papermc.paper.adventure.AdventureComponent) component).deepConverted();
         StringBuilder out = new StringBuilder();
@@ -363,12 +366,12 @@ public final class CraftChatMessage {
         return out.toString();
     }
 
-    public static Component fixComponent(MutableComponent component) {
+    public static @NotNull Component fixComponent(@NotNull MutableComponent component) {
         Matcher matcher = CraftChatMessage.LINK_PATTERN.matcher("");
         return CraftChatMessage.fixComponent(component, matcher);
     }
 
-    private static Component fixComponent(MutableComponent component, Matcher matcher) {
+    private static @NotNull Component fixComponent(@NotNull MutableComponent component, @NotNull Matcher matcher) {
         if (component.getContents() instanceof LiteralContents) {
             LiteralContents text = ((LiteralContents) component.getContents());
             String msg = text.text();
diff --git a/src/main/java/org/bukkit/craftbukkit/util/CraftDamageSource.java b/src/main/java/org/bukkit/craftbukkit/util/CraftDamageSource.java
index 12ed3b77141113d409dc95795d45efa41ce2f926..f8ee28a2388c989aae4b262f121f1c397cb521f7 100644
--- a/src/main/java/org/bukkit/craftbukkit/util/CraftDamageSource.java
+++ b/src/main/java/org/bukkit/craftbukkit/util/CraftDamageSource.java
@@ -1,10 +1,12 @@
 package org.bukkit.craftbukkit.util;
 
 import net.minecraft.world.damagesource.DamageSource;
+import org.jetbrains.annotations.NotNull;
+
 
 // Util class to create custom DamageSources.
 public final class CraftDamageSource extends DamageSource {
-    public static DamageSource copyOf(final DamageSource original) {
+    public static @NotNull DamageSource copyOf(final @NotNull DamageSource original) {
         CraftDamageSource newSource = new CraftDamageSource(original.msgId);
 
         // Check ignoresArmor
@@ -25,7 +27,7 @@ public final class CraftDamageSource extends DamageSource {
         return newSource;
     }
 
-    private CraftDamageSource(String name) {
+    private CraftDamageSource(@NotNull String name) {
         super(name);
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/util/CraftDimensionUtil.java b/src/main/java/org/bukkit/craftbukkit/util/CraftDimensionUtil.java
index b52a8543aaa190dbb594d8fcafdbfdd8e89cdd29..edacaa04cb3e342ce6852fc66ed9629683c786ab 100644
--- a/src/main/java/org/bukkit/craftbukkit/util/CraftDimensionUtil.java
+++ b/src/main/java/org/bukkit/craftbukkit/util/CraftDimensionUtil.java
@@ -3,13 +3,15 @@ package org.bukkit.craftbukkit.util;
 import net.minecraft.resources.ResourceKey;
 import net.minecraft.world.level.Level;
 import net.minecraft.world.level.dimension.LevelStem;
+import org.jetbrains.annotations.NotNull;
+
 
 public class CraftDimensionUtil {
 
     private CraftDimensionUtil() {
     }
 
-    public static ResourceKey<Level> getMainDimensionKey(Level world) {
+    public static @NotNull ResourceKey<Level> getMainDimensionKey(@NotNull Level world) {
         ResourceKey<LevelStem> typeKey = world.getTypeKey();
         if (typeKey == LevelStem.OVERWORLD) {
             return Level.OVERWORLD;
diff --git a/src/main/java/org/bukkit/craftbukkit/util/CraftLegacy.java b/src/main/java/org/bukkit/craftbukkit/util/CraftLegacy.java
index c8dde75de231b5fdde88f5bc111c21883d9c3f49..4c904116f59e84fb2af34dd3614430e88bb3946d 100644
--- a/src/main/java/org/bukkit/craftbukkit/util/CraftLegacy.java
+++ b/src/main/java/org/bukkit/craftbukkit/util/CraftLegacy.java
@@ -3,6 +3,9 @@ package org.bukkit.craftbukkit.util;
 import java.util.Arrays;
 import org.bukkit.Material;
 import org.bukkit.material.MaterialData;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 /**
  * @deprecated legacy use only
@@ -14,7 +17,7 @@ public final class CraftLegacy {
         //
     }
 
-    public static Material fromLegacy(Material material) {
+    public static Material fromLegacy(@Nullable Material material) {
         if (material == null || !material.isLegacy()) {
             return material;
         }
@@ -26,12 +29,12 @@ public final class CraftLegacy {
         return org.bukkit.craftbukkit.legacy.CraftLegacy.fromLegacy(materialData);
     }
 
-    public static Material[] modern_values() {
+    public static Material @NotNull [] modern_values() {
         Material[] values = Material.values();
         return Arrays.copyOfRange(values, 0, Material.LEGACY_AIR.ordinal());
     }
 
-    public static int modern_ordinal(Material material) {
+    public static int modern_ordinal(@NotNull Material material) {
         if (material.isLegacy()) {
             // SPIGOT-4002: Fix for eclipse compiler manually compiling in default statements to lookupswitch
             throw new NoSuchFieldError("Legacy field ordinal: " + material);
diff --git a/src/main/java/org/bukkit/craftbukkit/util/CraftMagicNumbers.java b/src/main/java/org/bukkit/craftbukkit/util/CraftMagicNumbers.java
index 17336102d37a5ab05c3b3c93fcf46961d0ffa7e2..17ce1108eb2cab17e862ff167594ff4afd3eddf0 100644
--- a/src/main/java/org/bukkit/craftbukkit/util/CraftMagicNumbers.java
+++ b/src/main/java/org/bukkit/craftbukkit/util/CraftMagicNumbers.java
@@ -61,6 +61,9 @@ import org.bukkit.inventory.ItemStack;
 import org.bukkit.material.MaterialData;
 import org.bukkit.plugin.InvalidPluginException;
 import org.bukkit.plugin.PluginDescriptionFile;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 @SuppressWarnings("deprecation")
 public final class CraftMagicNumbers implements UnsafeValues {
@@ -70,32 +73,32 @@ public final class CraftMagicNumbers implements UnsafeValues {
 
     // Paper start
     @Override
-    public net.kyori.adventure.text.flattener.ComponentFlattener componentFlattener() {
+    public net.kyori.adventure.text.flattener.@NotNull ComponentFlattener componentFlattener() {
         return io.papermc.paper.adventure.PaperAdventure.FLATTENER;
     }
 
     @Override
-    public net.kyori.adventure.text.serializer.gson.GsonComponentSerializer colorDownsamplingGsonComponentSerializer() {
+    public net.kyori.adventure.text.serializer.gson.@NotNull GsonComponentSerializer colorDownsamplingGsonComponentSerializer() {
         return net.kyori.adventure.text.serializer.gson.GsonComponentSerializer.colorDownsamplingGson();
     }
 
     @Override
-    public net.kyori.adventure.text.serializer.gson.GsonComponentSerializer gsonComponentSerializer() {
+    public net.kyori.adventure.text.serializer.gson.@NotNull GsonComponentSerializer gsonComponentSerializer() {
         return net.kyori.adventure.text.serializer.gson.GsonComponentSerializer.gson();
     }
 
     @Override
-    public net.kyori.adventure.text.serializer.plain.PlainComponentSerializer plainComponentSerializer() {
+    public net.kyori.adventure.text.serializer.plain.@NotNull PlainComponentSerializer plainComponentSerializer() {
         return io.papermc.paper.adventure.PaperAdventure.PLAIN;
     }
 
     @Override
-    public net.kyori.adventure.text.serializer.plain.PlainTextComponentSerializer plainTextSerializer() {
+    public net.kyori.adventure.text.serializer.plain.@NotNull PlainTextComponentSerializer plainTextSerializer() {
         return net.kyori.adventure.text.serializer.plain.PlainTextComponentSerializer.plainText();
     }
 
     @Override
-    public net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer legacyComponentSerializer() {
+    public net.kyori.adventure.text.serializer.legacy.@NotNull LegacyComponentSerializer legacyComponentSerializer() {
         return net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection();
     }
 
@@ -105,19 +108,19 @@ public final class CraftMagicNumbers implements UnsafeValues {
     }
     // Paper end
 
-    public static BlockState getBlock(MaterialData material) {
+    public static @NotNull BlockState getBlock(@NotNull MaterialData material) {
         return CraftMagicNumbers.getBlock(material.getItemType(), material.getData());
     }
 
-    public static BlockState getBlock(Material material, byte data) {
+    public static @NotNull BlockState getBlock(Material material, byte data) {
         return CraftLegacy.fromLegacyData(CraftLegacy.toLegacy(material), data);
     }
 
-    public static MaterialData getMaterial(BlockState data) {
+    public static @NotNull MaterialData getMaterial(@NotNull BlockState data) {
         return CraftLegacy.toLegacy(CraftMagicNumbers.getMaterial(data.getBlock())).getNewData(CraftMagicNumbers.toLegacyData(data));
     }
 
-    public static Item getItem(Material material, short data) {
+    public static Item getItem(@NotNull Material material, short data) {
         if (material.isLegacy()) {
             return CraftLegacy.fromLegacyData(CraftLegacy.toLegacy(material), data);
         }
@@ -125,7 +128,7 @@ public final class CraftMagicNumbers implements UnsafeValues {
         return CraftMagicNumbers.getItem(material);
     }
 
-    public static MaterialData getMaterialData(Item item) {
+    public static @NotNull MaterialData getMaterialData(Item item) {
         return CraftLegacy.toLegacyData(CraftMagicNumbers.getMaterial(item));
     }
 
@@ -189,7 +192,7 @@ public final class CraftMagicNumbers implements UnsafeValues {
         return CraftMagicNumbers.FLUID_MATERIAL.get(fluid);
     }
 
-    public static Item getItem(Material material) {
+    public static Item getItem(@Nullable Material material) {
         if (material != null && material.isLegacy()) {
             material = CraftLegacy.fromLegacy(material);
         }
@@ -197,7 +200,7 @@ public final class CraftMagicNumbers implements UnsafeValues {
         return CraftMagicNumbers.MATERIAL_ITEM.get(material);
     }
 
-    public static Block getBlock(Material material) {
+    public static Block getBlock(@Nullable Material material) {
         if (material != null && material.isLegacy()) {
             material = CraftLegacy.fromLegacy(material);
         }
@@ -209,7 +212,7 @@ public final class CraftMagicNumbers implements UnsafeValues {
         return CraftMagicNumbers.MATERIAL_FLUID.get(fluid);
     }
 
-    public static ResourceLocation key(Material mat) {
+    public static @NotNull ResourceLocation key(@NotNull Material mat) {
         return CraftNamespacedKey.toMinecraft(mat.getKey());
     }
     // Paper start
@@ -248,17 +251,17 @@ public final class CraftMagicNumbers implements UnsafeValues {
     }
 
     @Override
-    public Material fromLegacy(MaterialData material, boolean itemPriority) {
+    public Material fromLegacy(@NotNull MaterialData material, boolean itemPriority) {
         return CraftLegacy.fromLegacy(material, itemPriority);
     }
 
     @Override
-    public BlockData fromLegacy(Material material, byte data) {
+    public @NotNull BlockData fromLegacy(Material material, byte data) {
         return CraftBlockData.fromData(CraftMagicNumbers.getBlock(material, data));
     }
 
     @Override
-    public Material getMaterial(String material, int version) {
+    public @Nullable Material getMaterial(@Nullable String material, int version) {
         Preconditions.checkArgument(material != null, "material == null");
         Preconditions.checkArgument(version <= this.getDataVersion(), "Newer version! Server downgrades are not supported!");
 
@@ -292,7 +295,7 @@ public final class CraftMagicNumbers implements UnsafeValues {
      *
      * @return string
      */
-    public String getMappingsVersion() {
+    public @NotNull String getMappingsVersion() {
         return "1afe2ffe8a9d7fc510442a168b3d4338";
     }
 
@@ -302,7 +305,7 @@ public final class CraftMagicNumbers implements UnsafeValues {
     }
 
     @Override
-    public ItemStack modifyItemStack(ItemStack stack, String arguments) {
+    public @NotNull ItemStack modifyItemStack(@NotNull ItemStack stack, @NotNull String arguments) {
         net.minecraft.world.item.ItemStack nmsStack = CraftItemStack.asNMSCopy(stack);
 
         try {
@@ -316,12 +319,12 @@ public final class CraftMagicNumbers implements UnsafeValues {
         return stack;
     }
 
-    private static File getBukkitDataPackFolder() {
+    private static @NotNull File getBukkitDataPackFolder() {
         return new File(MinecraftServer.getServer().getWorldPath(LevelResource.DATAPACK_DIR).toFile(), "bukkit");
     }
 
     @Override
-    public Advancement loadAdvancement(NamespacedKey key, String advancement) {
+    public @Nullable Advancement loadAdvancement(@NotNull NamespacedKey key, @NotNull String advancement) {
         if (Bukkit.getAdvancement(key) != null) {
             throw new IllegalArgumentException("Advancement " + key + " already exists.");
         }
@@ -360,7 +363,7 @@ public final class CraftMagicNumbers implements UnsafeValues {
     }
 
     @Override
-    public boolean removeAdvancement(NamespacedKey key) {
+    public boolean removeAdvancement(@NotNull NamespacedKey key) {
         File file = new File(CraftMagicNumbers.getBukkitDataPackFolder(), "data" + File.separator + key.getNamespace() + File.separator + "advancements" + File.separator + key.getKey() + ".json");
         return file.delete();
     }
@@ -368,7 +371,7 @@ public final class CraftMagicNumbers implements UnsafeValues {
     private static final List<String> SUPPORTED_API = Arrays.asList("1.13", "1.14", "1.15", "1.16", "1.17", "1.18", "1.19");
 
     @Override
-    public void checkSupported(PluginDescriptionFile pdf) throws InvalidPluginException {
+    public void checkSupported(@NotNull PluginDescriptionFile pdf) throws InvalidPluginException {
         String minimumVersion = MinecraftServer.getServer().server.minimumAPI;
         int minimumIndex = CraftMagicNumbers.SUPPORTED_API.indexOf(minimumVersion);
 
@@ -392,12 +395,12 @@ public final class CraftMagicNumbers implements UnsafeValues {
         }
     }
 
-    public static boolean isLegacy(PluginDescriptionFile pdf) {
+    public static boolean isLegacy(@NotNull PluginDescriptionFile pdf) {
         return pdf.getAPIVersion() == null;
     }
 
     @Override
-    public byte[] processClass(PluginDescriptionFile pdf, String path, byte[] clazz) {
+    public byte[] processClass(@NotNull PluginDescriptionFile pdf, String path, byte[] clazz) {
         try {
             clazz = Commodore.convert(clazz, !CraftMagicNumbers.isLegacy(pdf));
         } catch (Exception ex) {
@@ -408,7 +411,7 @@ public final class CraftMagicNumbers implements UnsafeValues {
     }
 
     @Override
-    public Multimap<Attribute, AttributeModifier> getDefaultAttributeModifiers(Material material, EquipmentSlot slot) {
+    public @NotNull Multimap<Attribute, AttributeModifier> getDefaultAttributeModifiers(Material material, @NotNull EquipmentSlot slot) {
         ImmutableMultimap.Builder<Attribute, AttributeModifier> defaultAttributes = ImmutableMultimap.builder();
 
         Multimap<net.minecraft.world.entity.ai.attributes.Attribute, net.minecraft.world.entity.ai.attributes.AttributeModifier> nmsDefaultAttributes = CraftMagicNumbers.getItem(material).getDefaultAttributeModifiers(CraftEquipmentSlot.getNMS(slot));
@@ -421,28 +424,28 @@ public final class CraftMagicNumbers implements UnsafeValues {
     }
 
     @Override
-    public CreativeCategory getCreativeCategory(Material material) {
+    public @Nullable CreativeCategory getCreativeCategory(Material material) {
         return CreativeCategory.BUILDING_BLOCKS; // TODO: Figure out what to do with this
     }
 
     // Paper start
     @Override
-    public String getTimingsServerName() {
+    public @NotNull String getTimingsServerName() {
         return io.papermc.paper.configuration.GlobalConfiguration.get().timings.serverName;
     }
 
     @Override
-    public com.destroystokyo.paper.util.VersionFetcher getVersionFetcher() {
+    public com.destroystokyo.paper.util.@NotNull VersionFetcher getVersionFetcher() {
         return new com.destroystokyo.paper.PaperVersionFetcher();
     }
 
     @Override
-    public boolean isSupportedApiVersion(String apiVersion) {
+    public boolean isSupportedApiVersion(@Nullable String apiVersion) {
         return apiVersion != null && SUPPORTED_API.contains(apiVersion);
     }
 
     @Override
-    public byte[] serializeItem(ItemStack item) {
+    public byte[] serializeItem(@NotNull ItemStack item) {
         Preconditions.checkNotNull(item, "null cannot be serialized");
         Preconditions.checkArgument(item.getType() != Material.AIR, "air cannot be serialized");
 
@@ -450,7 +453,7 @@ public final class CraftMagicNumbers implements UnsafeValues {
     }
 
     @Override
-    public ItemStack deserializeItem(byte[] data) {
+    public @NotNull ItemStack deserializeItem(byte @NotNull [] data) {
         Preconditions.checkNotNull(data, "null cannot be deserialized");
         Preconditions.checkArgument(data.length > 0, "cannot deserialize nothing");
 
@@ -471,7 +474,7 @@ public final class CraftMagicNumbers implements UnsafeValues {
     }
 
     @Override
-    public org.bukkit.entity.Entity deserializeEntity(byte[] data, org.bukkit.World world, boolean preserveUUID) {
+    public org.bukkit.entity.@NotNull Entity deserializeEntity(byte @NotNull [] data, org.bukkit.@NotNull World world, boolean preserveUUID) {
         Preconditions.checkNotNull(data, "null cannot be deserialized");
         Preconditions.checkArgument(data.length > 0, "cannot deserialize nothing");
 
@@ -484,7 +487,7 @@ public final class CraftMagicNumbers implements UnsafeValues {
             .orElseThrow(() -> new IllegalArgumentException("An ID was not found for the data. Did you downgrade?")).getBukkitEntity();
     }
 
-    private byte[] serializeNbtToBytes(CompoundTag compound) {
+    private byte[] serializeNbtToBytes(@NotNull CompoundTag compound) {
         compound.putInt("DataVersion", getDataVersion());
         java.io.ByteArrayOutputStream outputStream = new java.io.ByteArrayOutputStream();
         try {
@@ -498,7 +501,7 @@ public final class CraftMagicNumbers implements UnsafeValues {
         return outputStream.toByteArray();
     }
 
-    private CompoundTag deserializeNbtFromBytes(byte[] data) {
+    private @NotNull CompoundTag deserializeNbtFromBytes(byte @NotNull [] data) {
         CompoundTag compound;
         try {
             compound = net.minecraft.nbt.NbtIo.readCompressed(
@@ -513,7 +516,7 @@ public final class CraftMagicNumbers implements UnsafeValues {
     }
 
     @Override
-    public String getTranslationKey(Material mat) {
+    public @NotNull String getTranslationKey(@NotNull Material mat) {
         if (mat.isBlock()) {
             return getBlock(mat).getDescriptionId();
         }
@@ -521,17 +524,17 @@ public final class CraftMagicNumbers implements UnsafeValues {
     }
 
     @Override
-    public String getTranslationKey(org.bukkit.block.Block block) {
+    public @NotNull String getTranslationKey(org.bukkit.block.@NotNull Block block) {
         return ((org.bukkit.craftbukkit.block.CraftBlock)block).getNMS().getBlock().getDescriptionId();
     }
 
     @Override
-    public String getTranslationKey(org.bukkit.entity.EntityType type) {
+    public @Nullable String getTranslationKey(org.bukkit.entity.@NotNull EntityType type) {
         return net.minecraft.world.entity.EntityType.byString(type.getName()).map(net.minecraft.world.entity.EntityType::getDescriptionId).orElse(null);
     }
 
     @Override
-    public String getTranslationKey(org.bukkit.inventory.ItemStack itemStack) {
+    public @NotNull String getTranslationKey(org.bukkit.inventory.ItemStack itemStack) {
         net.minecraft.world.item.ItemStack nmsItemStack = CraftItemStack.asNMSCopy(itemStack);
         return nmsItemStack.getItem().getDescriptionId(nmsItemStack);
     }
@@ -541,12 +544,12 @@ public final class CraftMagicNumbers implements UnsafeValues {
     }
 
     @Override
-    public <T extends org.bukkit.Keyed> Registry<T> registryFor(Class<T> classOfT) {
+    public <T extends org.bukkit.Keyed> @NotNull Registry<T> registryFor(@NotNull Class<T> classOfT) {
         return io.papermc.paper.registry.PaperRegistry.getRegistry(classOfT);
     }
 
     @Override
-    public String getMainLevelName() {
+    public @NotNull String getMainLevelName() {
         return ((net.minecraft.server.dedicated.DedicatedServer) net.minecraft.server.MinecraftServer.getServer()).getProperties().levelName;
     }
 
@@ -560,12 +563,12 @@ public final class CraftMagicNumbers implements UnsafeValues {
     }
 
     @Override
-    public io.papermc.paper.inventory.ItemRarity getItemStackRarity(org.bukkit.inventory.ItemStack itemStack) {
+    public io.papermc.paper.inventory.ItemRarity getItemStackRarity(org.bukkit.inventory.@NotNull ItemStack itemStack) {
         return io.papermc.paper.inventory.ItemRarity.values()[getItem(itemStack.getType()).getRarity(CraftItemStack.asNMSCopy(itemStack)).ordinal()];
     }
 
     @Override
-    public boolean isValidRepairItemStack(org.bukkit.inventory.ItemStack itemToBeRepaired, org.bukkit.inventory.ItemStack repairMaterial) {
+    public boolean isValidRepairItemStack(org.bukkit.inventory.@NotNull ItemStack itemToBeRepaired, org.bukkit.inventory.@NotNull ItemStack repairMaterial) {
         if (!itemToBeRepaired.getType().isItem() || !repairMaterial.getType().isItem()) {
             return false;
         }
@@ -573,7 +576,7 @@ public final class CraftMagicNumbers implements UnsafeValues {
     }
 
     @Override
-    public Multimap<Attribute, AttributeModifier> getItemAttributes(Material material, EquipmentSlot equipmentSlot) {
+    public @NotNull Multimap<Attribute, AttributeModifier> getItemAttributes(Material material, @NotNull EquipmentSlot equipmentSlot) {
         Item item = CraftMagicNumbers.getItem(material);
         if (item == null) {
             throw new IllegalArgumentException(material + " is not an item and therefore does not have attributes");
@@ -591,31 +594,31 @@ public final class CraftMagicNumbers implements UnsafeValues {
     }
 
     @Override
-    public boolean hasDefaultEntityAttributes(NamespacedKey bukkitEntityKey) {
+    public boolean hasDefaultEntityAttributes(@NotNull NamespacedKey bukkitEntityKey) {
         return net.minecraft.world.entity.ai.attributes.DefaultAttributes.hasSupplier(net.minecraft.core.registries.BuiltInRegistries.ENTITY_TYPE.get(CraftNamespacedKey.toMinecraft(bukkitEntityKey)));
     }
 
     @Override
-    public org.bukkit.attribute.Attributable getDefaultEntityAttributes(NamespacedKey bukkitEntityKey) {
+    public org.bukkit.attribute.@NotNull Attributable getDefaultEntityAttributes(@NotNull NamespacedKey bukkitEntityKey) {
         Preconditions.checkArgument(hasDefaultEntityAttributes(bukkitEntityKey), bukkitEntityKey + " doesn't have default attributes");
         var supplier = net.minecraft.world.entity.ai.attributes.DefaultAttributes.getSupplier((net.minecraft.world.entity.EntityType<? extends net.minecraft.world.entity.LivingEntity>) net.minecraft.core.registries.BuiltInRegistries.ENTITY_TYPE.get(CraftNamespacedKey.toMinecraft(bukkitEntityKey)));
         return new io.papermc.paper.attribute.UnmodifiableAttributeMap(supplier);
     }
 
     @Override
-    public boolean isCollidable(Material material) {
+    public boolean isCollidable(@NotNull Material material) {
         Preconditions.checkArgument(material.isBlock(), material + " is not a block");
         return getBlock(material).hasCollision;
     }
 
     @Override
-    public org.bukkit.NamespacedKey getBiomeKey(org.bukkit.RegionAccessor accessor, int x, int y, int z) {
+    public org.bukkit.@NotNull NamespacedKey getBiomeKey(org.bukkit.RegionAccessor accessor, int x, int y, int z) {
         org.bukkit.craftbukkit.CraftRegionAccessor cra = (org.bukkit.craftbukkit.CraftRegionAccessor) accessor;
         return org.bukkit.craftbukkit.util.CraftNamespacedKey.fromMinecraft(cra.getHandle().registryAccess().registryOrThrow(net.minecraft.core.registries.Registries.BIOME).getKey(cra.getHandle().getBiome(new net.minecraft.core.BlockPos(x, y, z)).value()));
     }
 
     @Override
-    public void setBiomeKey(org.bukkit.RegionAccessor accessor, int x, int y, int z, org.bukkit.NamespacedKey biomeKey) {
+    public void setBiomeKey(org.bukkit.RegionAccessor accessor, int x, int y, int z, org.bukkit.@NotNull NamespacedKey biomeKey) {
         org.bukkit.craftbukkit.CraftRegionAccessor cra = (org.bukkit.craftbukkit.CraftRegionAccessor) accessor;
         net.minecraft.core.Holder<net.minecraft.world.level.biome.Biome> biomeBase = cra.getHandle().registryAccess().registryOrThrow(net.minecraft.core.registries.Registries.BIOME).getHolderOrThrow(net.minecraft.resources.ResourceKey.create(net.minecraft.core.registries.Registries.BIOME, org.bukkit.craftbukkit.util.CraftNamespacedKey.toMinecraft(biomeKey)));
         cra.setBiome(x, y, z, biomeBase);
diff --git a/src/main/java/org/bukkit/craftbukkit/util/CraftNBTTagConfigSerializer.java b/src/main/java/org/bukkit/craftbukkit/util/CraftNBTTagConfigSerializer.java
index 207e4302161b3abe2ade56c9dc9c31820010fa42..61652fa1cb36ac23ef1f08d0748ab47029a345a9 100644
--- a/src/main/java/org/bukkit/craftbukkit/util/CraftNBTTagConfigSerializer.java
+++ b/src/main/java/org/bukkit/craftbukkit/util/CraftNBTTagConfigSerializer.java
@@ -15,6 +15,8 @@ import net.minecraft.nbt.ListTag;
 import net.minecraft.nbt.StringTag;
 import net.minecraft.nbt.Tag;
 import net.minecraft.nbt.TagParser;
+import org.jetbrains.annotations.NotNull;
+
 
 public class CraftNBTTagConfigSerializer {
 
@@ -23,7 +25,7 @@ public class CraftNBTTagConfigSerializer {
     private static final Pattern DOUBLE = Pattern.compile("[-+]?(?:[0-9]+[.]?|[0-9]*[.][0-9]+)(?:e[-+]?[0-9]+)?d", Pattern.CASE_INSENSITIVE);
     private static final TagParser MOJANGSON_PARSER = new TagParser(new StringReader(""));
 
-    public static Object serialize(Tag base) {
+    public static @NotNull Object serialize(Tag base) {
         if (base instanceof CompoundTag) {
             Map<String, Object> innerMap = new HashMap<>();
             for (String key : ((CompoundTag) base).getAllKeys()) {
@@ -47,7 +49,7 @@ public class CraftNBTTagConfigSerializer {
         return base.toString();
     }
 
-    public static Tag deserialize(Object object) {
+    public static @NotNull Tag deserialize(Object object) {
         if (object instanceof Map) {
             CompoundTag compound = new CompoundTag();
             for (Map.Entry<String, Object> entry : ((Map<String, Object>) object).entrySet()) {
diff --git a/src/main/java/org/bukkit/craftbukkit/util/CraftNamespacedKey.java b/src/main/java/org/bukkit/craftbukkit/util/CraftNamespacedKey.java
index 5014192edb9616ce725fc1592832034789527b6f..60422a22549e8827efb2001d2c4bb74e7a8d8981 100644
--- a/src/main/java/org/bukkit/craftbukkit/util/CraftNamespacedKey.java
+++ b/src/main/java/org/bukkit/craftbukkit/util/CraftNamespacedKey.java
@@ -2,13 +2,16 @@ package org.bukkit.craftbukkit.util;
 
 import net.minecraft.resources.ResourceLocation;
 import org.bukkit.NamespacedKey;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 public final class CraftNamespacedKey {
 
     public CraftNamespacedKey() {
     }
 
-    public static NamespacedKey fromStringOrNull(String string) {
+    public static NamespacedKey fromStringOrNull(@Nullable String string) {
         if (string == null || string.isEmpty()) {
             return null;
         }
@@ -16,15 +19,15 @@ public final class CraftNamespacedKey {
         return (minecraft == null || minecraft.getPath().isEmpty()) ? null : CraftNamespacedKey.fromMinecraft(minecraft); // Paper - Bukkit's parser does not match Vanilla for empty paths
     }
 
-    public static NamespacedKey fromString(String string) {
+    public static @NotNull NamespacedKey fromString(@NotNull String string) {
         return CraftNamespacedKey.fromMinecraft(new ResourceLocation(string));
     }
 
-    public static NamespacedKey fromMinecraft(ResourceLocation minecraft) {
+    public static @NotNull NamespacedKey fromMinecraft(@NotNull ResourceLocation minecraft) {
         return new NamespacedKey(minecraft.getNamespace(), minecraft.getPath());
     }
 
-    public static ResourceLocation toMinecraft(NamespacedKey key) {
+    public static @NotNull ResourceLocation toMinecraft(@NotNull NamespacedKey key) {
         return new ResourceLocation(key.getNamespace(), key.getKey());
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/util/CraftRayTraceResult.java b/src/main/java/org/bukkit/craftbukkit/util/CraftRayTraceResult.java
index 5ee538ca7b34bd753d26aca38185c62739fa8916..f8406e4225cdaa8c84ea3b4e629aff4ed529e8f0 100644
--- a/src/main/java/org/bukkit/craftbukkit/util/CraftRayTraceResult.java
+++ b/src/main/java/org/bukkit/craftbukkit/util/CraftRayTraceResult.java
@@ -13,12 +13,14 @@ import org.bukkit.craftbukkit.block.CraftBlock;
 import org.bukkit.entity.Entity;
 import org.bukkit.util.RayTraceResult;
 import org.bukkit.util.Vector;
+import org.jetbrains.annotations.Nullable;
+
 
 public final class CraftRayTraceResult {
 
     private CraftRayTraceResult() {}
 
-    public static RayTraceResult fromNMS(World world, HitResult nmsHitResult) {
+    public static RayTraceResult fromNMS(@Nullable World world, @Nullable HitResult nmsHitResult) {
         if (nmsHitResult == null || nmsHitResult.getType() == Type.MISS) return null;
 
         Vec3 nmsHitPos = nmsHitResult.getLocation();
diff --git a/src/main/java/org/bukkit/craftbukkit/util/CraftSpawnCategory.java b/src/main/java/org/bukkit/craftbukkit/util/CraftSpawnCategory.java
index cba660a0506994f66cbcb890ccd464bd412a6211..cdbe63d1612adf0138fcba2d1d33f23655e61337 100644
--- a/src/main/java/org/bukkit/craftbukkit/util/CraftSpawnCategory.java
+++ b/src/main/java/org/bukkit/craftbukkit/util/CraftSpawnCategory.java
@@ -2,14 +2,17 @@ package org.bukkit.craftbukkit.util;
 
 import net.minecraft.world.entity.MobCategory;
 import org.bukkit.entity.SpawnCategory;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 public class CraftSpawnCategory {
 
-    public static boolean isValidForLimits(SpawnCategory spawnCategory) {
+    public static boolean isValidForLimits(@Nullable SpawnCategory spawnCategory) {
         return spawnCategory != null && spawnCategory != SpawnCategory.MISC;
     }
 
-    public static String getConfigNameSpawnLimit(SpawnCategory spawnCategory) {
+    public static @NotNull String getConfigNameSpawnLimit(@NotNull SpawnCategory spawnCategory) {
         return switch (spawnCategory) {
             case MONSTER -> "spawn-limits.monsters";
             case ANIMAL -> "spawn-limits.animals";
@@ -22,7 +25,7 @@ public class CraftSpawnCategory {
         };
     }
 
-    public static String getConfigNameTicksPerSpawn(SpawnCategory spawnCategory) {
+    public static @NotNull String getConfigNameTicksPerSpawn(@NotNull SpawnCategory spawnCategory) {
         return switch (spawnCategory) {
             case MONSTER -> "ticks-per.monster-spawns";
             case ANIMAL -> "ticks-per.animal-spawns";
@@ -35,7 +38,7 @@ public class CraftSpawnCategory {
         };
     }
 
-    public static long getDefaultTicksPerSpawn(SpawnCategory spawnCategory) {
+    public static long getDefaultTicksPerSpawn(@NotNull SpawnCategory spawnCategory) {
         return switch (spawnCategory) {
             case MONSTER, AXOLOTL, AMBIENT, WATER_UNDERGROUND_CREATURE, WATER_AMBIENT, WATER_ANIMAL -> 1;
             case ANIMAL -> 400; // This value come from commit 2995a08324f
@@ -43,7 +46,7 @@ public class CraftSpawnCategory {
         };
     }
 
-    public static SpawnCategory toBukkit(MobCategory enumCreatureType) {
+    public static @NotNull SpawnCategory toBukkit(@NotNull MobCategory enumCreatureType) {
         return switch (enumCreatureType) {
             case MONSTER -> SpawnCategory.MONSTER;
             case CREATURE -> SpawnCategory.ANIMAL;
@@ -57,7 +60,7 @@ public class CraftSpawnCategory {
         };
     }
 
-    public static MobCategory toNMS(SpawnCategory spawnCategory) {
+    public static @NotNull MobCategory toNMS(@NotNull SpawnCategory spawnCategory) {
         return switch (spawnCategory) {
             case MONSTER -> MobCategory.MONSTER;
             case ANIMAL -> MobCategory.CREATURE;
diff --git a/src/main/java/org/bukkit/craftbukkit/util/CraftStructureSearchResult.java b/src/main/java/org/bukkit/craftbukkit/util/CraftStructureSearchResult.java
index 7f5ba5fe8663bfd9fc206aa9a373b31345905aac..06fc224d0f4d73bf7e22dfc588e47b48e428fae6 100644
--- a/src/main/java/org/bukkit/craftbukkit/util/CraftStructureSearchResult.java
+++ b/src/main/java/org/bukkit/craftbukkit/util/CraftStructureSearchResult.java
@@ -3,6 +3,8 @@ package org.bukkit.craftbukkit.util;
 import org.bukkit.Location;
 import org.bukkit.generator.structure.Structure;
 import org.bukkit.util.StructureSearchResult;
+import org.jetbrains.annotations.NotNull;
+
 
 public class CraftStructureSearchResult implements StructureSearchResult {
 
@@ -14,11 +16,11 @@ public class CraftStructureSearchResult implements StructureSearchResult {
         this.location = location;
     }
 
-    public Structure getStructure() {
+    public @NotNull Structure getStructure() {
         return this.structure;
     }
 
-    public Location getLocation() {
+    public @NotNull Location getLocation() {
         return this.location;
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/util/CraftVector.java b/src/main/java/org/bukkit/craftbukkit/util/CraftVector.java
index 60c4afd5cad66ffb0cfb5c1fa9857def593813ae..f13f1376791ad52367c747407e256c6121c7719b 100644
--- a/src/main/java/org/bukkit/craftbukkit/util/CraftVector.java
+++ b/src/main/java/org/bukkit/craftbukkit/util/CraftVector.java
@@ -1,23 +1,26 @@
 package org.bukkit.craftbukkit.util;
 
+import org.jetbrains.annotations.NotNull;
+
+
 public final class CraftVector {
 
     private CraftVector() {
     }
 
-    public static org.bukkit.util.Vector toBukkit(net.minecraft.world.phys.Vec3 nms) {
+    public static org.bukkit.util.@NotNull Vector toBukkit(net.minecraft.world.phys.@NotNull Vec3 nms) {
         return new org.bukkit.util.Vector(nms.x, nms.y, nms.z);
     }
 
-    public static net.minecraft.world.phys.Vec3 toNMS(org.bukkit.util.Vector bukkit) {
+    public static net.minecraft.world.phys.@NotNull Vec3 toNMS(org.bukkit.util.@NotNull Vector bukkit) {
         return new net.minecraft.world.phys.Vec3(bukkit.getX(), bukkit.getY(), bukkit.getZ());
     }
     // Paper start
-    public static org.bukkit.util.Vector toBukkit(net.minecraft.core.BlockPos blockPosition) {
+    public static org.bukkit.util.@NotNull Vector toBukkit(net.minecraft.core.@NotNull BlockPos blockPosition) {
         return new org.bukkit.util.Vector(blockPosition.getX(), blockPosition.getY(), blockPosition.getZ());
     }
 
-    public static net.minecraft.core.BlockPos toBlockPos(org.bukkit.util.Vector bukkit) {
+    public static net.minecraft.core.@NotNull BlockPos toBlockPos(org.bukkit.util.@NotNull Vector bukkit) {
         return new net.minecraft.core.BlockPos(bukkit.getX(), bukkit.getY(), bukkit.getZ());
     }
     // Paper end
diff --git a/src/main/java/org/bukkit/craftbukkit/util/CraftVoxelShape.java b/src/main/java/org/bukkit/craftbukkit/util/CraftVoxelShape.java
index 0e5625cad2a4a546a2aa3675a9d2fe1068a6ff01..808d30c802480ae2848299f29bd6a82a8da35e10 100644
--- a/src/main/java/org/bukkit/craftbukkit/util/CraftVoxelShape.java
+++ b/src/main/java/org/bukkit/craftbukkit/util/CraftVoxelShape.java
@@ -7,6 +7,9 @@ import java.util.List;
 import net.minecraft.world.phys.AABB;
 import net.minecraft.world.phys.shapes.VoxelShape;
 import org.bukkit.util.BoundingBox;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 public final class CraftVoxelShape implements org.bukkit.util.VoxelShape {
 
@@ -17,7 +20,7 @@ public final class CraftVoxelShape implements org.bukkit.util.VoxelShape {
     }
 
     @Override
-    public Collection<BoundingBox> getBoundingBoxes() {
+    public @NotNull Collection<BoundingBox> getBoundingBoxes() {
         List<AABB> boxes = this.shape.toAabbs();
         List<BoundingBox> craftBoxes = new ArrayList<>(boxes.size());
         for (AABB aabb : boxes) {
@@ -27,7 +30,7 @@ public final class CraftVoxelShape implements org.bukkit.util.VoxelShape {
     }
 
     @Override
-    public boolean overlaps(BoundingBox other) {
+    public boolean overlaps(@Nullable BoundingBox other) {
         Preconditions.checkArgument(other != null, "Other cannot be null");
 
         for (BoundingBox box : this.getBoundingBoxes()) {
diff --git a/src/main/java/org/bukkit/craftbukkit/util/DatFileFilter.java b/src/main/java/org/bukkit/craftbukkit/util/DatFileFilter.java
index 66ff685d707961757de553515f634af21ec21f82..cd4ab83c452a6e12df8fa81f4b37d7590855f8db 100644
--- a/src/main/java/org/bukkit/craftbukkit/util/DatFileFilter.java
+++ b/src/main/java/org/bukkit/craftbukkit/util/DatFileFilter.java
@@ -1,11 +1,13 @@
 package org.bukkit.craftbukkit.util;
 
+import org.jetbrains.annotations.NotNull;
+
 import java.io.File;
 import java.io.FilenameFilter;
 
 public class DatFileFilter implements FilenameFilter {
     @Override
-    public boolean accept(File dir, String name) {
+    public boolean accept(File dir, @NotNull String name) {
         return name.endsWith(".dat");
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/util/DummyGeneratorAccess.java b/src/main/java/org/bukkit/craftbukkit/util/DummyGeneratorAccess.java
index b303eb2989be28dadf183d12a4bd706e43d1fa98..c20a83e6b8634d9873a2df7e2d2e5ed2a4b613cf 100644
--- a/src/main/java/org/bukkit/craftbukkit/util/DummyGeneratorAccess.java
+++ b/src/main/java/org/bukkit/craftbukkit/util/DummyGeneratorAccess.java
@@ -41,6 +41,9 @@ import net.minecraft.world.phys.Vec3;
 import net.minecraft.world.phys.shapes.VoxelShape;
 import net.minecraft.world.ticks.BlackholeTickAccess;
 import net.minecraft.world.ticks.LevelTickAccess;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 public class DummyGeneratorAccess implements WorldGenLevel {
 
@@ -65,7 +68,7 @@ public class DummyGeneratorAccess implements WorldGenLevel {
     }
 
     @Override
-    public LevelTickAccess<Block> getBlockTicks() {
+    public @NotNull LevelTickAccess<Block> getBlockTicks() {
         return BlackholeTickAccess.emptyLevelList();
     }
 
@@ -75,7 +78,7 @@ public class DummyGeneratorAccess implements WorldGenLevel {
     }
 
     @Override
-    public LevelTickAccess<Fluid> getFluidTicks() {
+    public @NotNull LevelTickAccess<Fluid> getFluidTicks() {
         return BlackholeTickAccess.emptyLevelList();
     }
 
@@ -200,7 +203,7 @@ public class DummyGeneratorAccess implements WorldGenLevel {
     }
 
     @Override
-    public BlockEntity getBlockEntity(BlockPos pos) {
+    public @Nullable BlockEntity getBlockEntity(BlockPos pos) {
         throw new UnsupportedOperationException("Not supported yet.");
     }
 
@@ -262,7 +265,7 @@ public class DummyGeneratorAccess implements WorldGenLevel {
 
     // Paper start
     @Override
-    public List<Entity> getHardCollidingEntities(Entity except, AABB box, Predicate<? super Entity> predicate) {
+    public @NotNull List<Entity> getHardCollidingEntities(Entity except, AABB box, Predicate<? super Entity> predicate) {
         return java.util.Collections.emptyList();
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/util/ForwardLogHandler.java b/src/main/java/org/bukkit/craftbukkit/util/ForwardLogHandler.java
index 0c70cf57fad99b7234e710e6a178d6b55a9812b3..dfeee08e3a4ffbe648df2de9b092f22d871d7800 100644
--- a/src/main/java/org/bukkit/craftbukkit/util/ForwardLogHandler.java
+++ b/src/main/java/org/bukkit/craftbukkit/util/ForwardLogHandler.java
@@ -7,9 +7,11 @@ import java.util.logging.Level;
 import java.util.logging.LogRecord;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
+import org.jetbrains.annotations.NotNull;
+
 
 public class ForwardLogHandler extends ConsoleHandler {
-    private Map<String, Logger> cachedLoggers = new ConcurrentHashMap<String, Logger>();
+    private @NotNull Map<String, Logger> cachedLoggers = new ConcurrentHashMap<String, Logger>();
 
     private Logger getLogger(String name) {
         Logger logger = this.cachedLoggers.get(name);
@@ -22,7 +24,7 @@ public class ForwardLogHandler extends ConsoleHandler {
     }
 
     @Override
-    public void publish(LogRecord record) {
+    public void publish(@NotNull LogRecord record) {
         Logger logger = this.getLogger(String.valueOf(record.getLoggerName())); // See SPIGOT-1230
         Throwable exception = record.getThrown();
         Level level = record.getLevel();
diff --git a/src/main/java/org/bukkit/craftbukkit/util/JsonHelper.java b/src/main/java/org/bukkit/craftbukkit/util/JsonHelper.java
index 95cfcc10fa19c20f9c233a185119a8e2c43fa1ed..06c38de7497ad3b3b730f2800509b27e6d3f9a94 100644
--- a/src/main/java/org/bukkit/craftbukkit/util/JsonHelper.java
+++ b/src/main/java/org/bukkit/craftbukkit/util/JsonHelper.java
@@ -3,6 +3,8 @@ package org.bukkit.craftbukkit.util;
 import com.google.gson.JsonElement;
 import com.google.gson.JsonObject;
 import com.google.gson.JsonPrimitive;
+import org.jetbrains.annotations.NotNull;
+
 import javax.annotation.Nonnull;
 import javax.annotation.Nullable;
 
@@ -31,7 +33,7 @@ public final class JsonHelper {
     }
 
     @Nullable
-    public static String getStringOrNull(JsonObject parent, String key) {
+    public static String getStringOrNull(@NotNull JsonObject parent, @NotNull String key) {
         JsonPrimitive primitive = JsonHelper.getPrimitiveOrNull(parent, key);
         return (primitive != null) ? primitive.getAsString() : null;
     }
diff --git a/src/main/java/org/bukkit/craftbukkit/util/LazyHashSet.java b/src/main/java/org/bukkit/craftbukkit/util/LazyHashSet.java
index 73a37638abacdffbff8274291a64ea6cd0be7a5e..8c3079ca4f36f38e62a6eb3d0069cc1b60f5ed71 100644
--- a/src/main/java/org/bukkit/craftbukkit/util/LazyHashSet.java
+++ b/src/main/java/org/bukkit/craftbukkit/util/LazyHashSet.java
@@ -1,11 +1,14 @@
 package org.bukkit.craftbukkit.util;
 
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 import java.util.Collection;
 import java.util.Iterator;
 import java.util.Set;
 
 public abstract class LazyHashSet<E> implements Set<E> {
-    Set<E> reference = null;
+    @Nullable Set<E> reference = null;
 
     @Override
     public int size() {
@@ -23,17 +26,17 @@ public abstract class LazyHashSet<E> implements Set<E> {
     }
 
     @Override
-    public Iterator<E> iterator() {
+    public @NotNull Iterator<E> iterator() {
         return this.getReference().iterator();
     }
 
     @Override
-    public Object[] toArray() {
+    public Object @NotNull [] toArray() {
         return this.getReference().toArray();
     }
 
     @Override
-    public <T> T[] toArray(T[] a) {
+    public <T> T @NotNull [] toArray(T @NotNull [] a) {
         return this.getReference().toArray(a);
     }
 
@@ -48,22 +51,22 @@ public abstract class LazyHashSet<E> implements Set<E> {
     }
 
     @Override
-    public boolean containsAll(Collection<?> c) {
+    public boolean containsAll(@NotNull Collection<?> c) {
         return this.getReference().containsAll(c);
     }
 
     @Override
-    public boolean addAll(Collection<? extends E> c) {
+    public boolean addAll(@NotNull Collection<? extends E> c) {
         return this.getReference().addAll(c);
     }
 
     @Override
-    public boolean retainAll(Collection<?> c) {
+    public boolean retainAll(@NotNull Collection<?> c) {
         return this.getReference().retainAll(c);
     }
 
     @Override
-    public boolean removeAll(Collection<?> c) {
+    public boolean removeAll(@NotNull Collection<?> c) {
         return this.getReference().removeAll(c);
     }
 
@@ -92,7 +95,7 @@ public abstract class LazyHashSet<E> implements Set<E> {
     }
 
     @Override
-    public boolean equals(Object obj) {
+    public boolean equals(@Nullable Object obj) {
         if (obj == this) {
             return true;
         }
diff --git a/src/main/java/org/bukkit/craftbukkit/util/LazyPlayerSet.java b/src/main/java/org/bukkit/craftbukkit/util/LazyPlayerSet.java
index 5c4c0ba05f10d2d83b22d3e86805cfa85c3b50a9..c73336395f290774168951242c1377730e524b80 100644
--- a/src/main/java/org/bukkit/craftbukkit/util/LazyPlayerSet.java
+++ b/src/main/java/org/bukkit/craftbukkit/util/LazyPlayerSet.java
@@ -5,6 +5,8 @@ import java.util.List;
 import net.minecraft.server.MinecraftServer;
 import net.minecraft.server.level.ServerPlayer;
 import org.bukkit.entity.Player;
+import org.jetbrains.annotations.NotNull;
+
 
 public class LazyPlayerSet extends LazyHashSet<Player> {
 
@@ -15,7 +17,7 @@ public class LazyPlayerSet extends LazyHashSet<Player> {
     }
 
     @Override
-    protected HashSet<Player> makeReference() { // Paper - protected
+    protected @NotNull HashSet<Player> makeReference() { // Paper - protected
         if (reference != null) {
             throw new IllegalStateException("Reference already created!");
         }
@@ -23,7 +25,7 @@ public class LazyPlayerSet extends LazyHashSet<Player> {
         // Paper start
         return makePlayerSet(this.server);
     }
-    public static HashSet<Player> makePlayerSet(final MinecraftServer server) {
+    public static @NotNull HashSet<Player> makePlayerSet(final @NotNull MinecraftServer server) {
         // Paper end
         List<ServerPlayer> players = server.getPlayerList().players;
         HashSet<Player> reference = new HashSet<Player>(players.size());
diff --git a/src/main/java/org/bukkit/craftbukkit/util/UnsafeList.java b/src/main/java/org/bukkit/craftbukkit/util/UnsafeList.java
index e38e57b1f9ef27020de35d7ddcb36a663140f880..338e23c36e18bd4c8a0fcb4cb210f14059c54ca2 100644
--- a/src/main/java/org/bukkit/craftbukkit/util/UnsafeList.java
+++ b/src/main/java/org/bukkit/craftbukkit/util/UnsafeList.java
@@ -1,5 +1,7 @@
 package org.bukkit.craftbukkit.util;
 
+import org.jetbrains.annotations.NotNull;
+
 import java.io.IOException;
 import java.io.ObjectInputStream;
 import java.io.ObjectOutputStream;
@@ -21,7 +23,7 @@ public class UnsafeList<E> extends AbstractList<E> implements List<E>, RandomAcc
     private int size;
     private int initialCapacity;
 
-    private Iterator[] iterPool = new Iterator[1];
+    private Iterator @NotNull [] iterPool = new Iterator[1];
     private int maxPool;
     private int poolCounter;
 
@@ -93,7 +95,7 @@ public class UnsafeList<E> extends AbstractList<E> implements List<E>, RandomAcc
     }
 
     @Override
-    public boolean remove(Object o) {
+    public boolean remove(@NotNull Object o) {
         int index = this.indexOf(o);
         if (index >= 0) {
             this.remove(index);
@@ -104,7 +106,7 @@ public class UnsafeList<E> extends AbstractList<E> implements List<E>, RandomAcc
     }
 
     @Override
-    public int indexOf(Object o) {
+    public int indexOf(@NotNull Object o) {
         for (int i = 0; i < this.size; i++) {
             if (o == this.data[i] || o.equals(this.data[i])) {
                 return i;
@@ -115,7 +117,7 @@ public class UnsafeList<E> extends AbstractList<E> implements List<E>, RandomAcc
     }
 
     @Override
-    public boolean contains(Object o) {
+    public boolean contains(@NotNull Object o) {
         return this.indexOf(o) >= 0;
     }
 
@@ -180,7 +182,7 @@ public class UnsafeList<E> extends AbstractList<E> implements List<E>, RandomAcc
     }
 
     @Override
-    public Object clone() throws CloneNotSupportedException {
+    public @NotNull Object clone() throws CloneNotSupportedException {
         UnsafeList<E> copy = (UnsafeList<E>) super.clone();
         copy.data = Arrays.copyOf(data, size);
         copy.size = this.size;
@@ -193,7 +195,7 @@ public class UnsafeList<E> extends AbstractList<E> implements List<E>, RandomAcc
     }
 
     @Override
-    public Iterator<E> iterator() {
+    public @NotNull Iterator<E> iterator() {
         // Try to find an iterator that isn't in use
         for (Iterator iter : this.iterPool) {
             if (!((Itr) iter).valid) {
@@ -234,7 +236,7 @@ public class UnsafeList<E> extends AbstractList<E> implements List<E>, RandomAcc
         }
     }
 
-    private void writeObject(ObjectOutputStream os) throws IOException {
+    private void writeObject(@NotNull ObjectOutputStream os) throws IOException {
         os.defaultWriteObject();
 
         os.writeInt(size);
@@ -245,7 +247,7 @@ public class UnsafeList<E> extends AbstractList<E> implements List<E>, RandomAcc
         os.writeInt(maxPool);
     }
 
-    private void readObject(ObjectInputStream is) throws IOException, ClassNotFoundException {
+    private void readObject(@NotNull ObjectInputStream is) throws IOException, ClassNotFoundException {
         is.defaultReadObject();
 
         this.size = is.readInt();
diff --git a/src/main/java/org/bukkit/craftbukkit/util/Waitable.java b/src/main/java/org/bukkit/craftbukkit/util/Waitable.java
index 56f9074f473d9169967effbae0141649f9f2a698..8aa0a39b1f6d66c7841bb7f17b18354e357a7e6e 100644
--- a/src/main/java/org/bukkit/craftbukkit/util/Waitable.java
+++ b/src/main/java/org/bukkit/craftbukkit/util/Waitable.java
@@ -1,5 +1,8 @@
 package org.bukkit.craftbukkit.util;
 
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 import java.util.concurrent.ExecutionException;
 
 public abstract class Waitable<T> implements Runnable {
@@ -8,9 +11,9 @@ public abstract class Waitable<T> implements Runnable {
         RUNNING,
         FINISHED,
     }
-    Throwable t = null;
-    T value = null;
-    Status status = Status.WAITING;
+    @Nullable Throwable t = null;
+    @Nullable T value = null;
+    @NotNull Status status = Status.WAITING;
 
     @Override
     public final void run() {
diff --git a/src/main/java/org/bukkit/craftbukkit/util/WeakCollection.java b/src/main/java/org/bukkit/craftbukkit/util/WeakCollection.java
index 049d750d3af991dd14ac8cf644330404e74b2151..62fcc0871d22ad22c76eeacc50bb361f594e2340 100644
--- a/src/main/java/org/bukkit/craftbukkit/util/WeakCollection.java
+++ b/src/main/java/org/bukkit/craftbukkit/util/WeakCollection.java
@@ -6,10 +6,13 @@ import java.util.Collection;
 import java.util.Iterator;
 import java.util.NoSuchElementException;
 import org.apache.commons.lang.Validate;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 public final class WeakCollection<T> implements Collection<T> {
     static final Object NO_VALUE = new Object();
-    private final Collection<WeakReference<T>> collection;
+    private final @NotNull Collection<WeakReference<T>> collection;
 
     public WeakCollection() {
         this.collection = new ArrayList<WeakReference<T>>();
@@ -22,7 +25,7 @@ public final class WeakCollection<T> implements Collection<T> {
     }
 
     @Override
-    public boolean addAll(Collection<? extends T> collection) {
+    public boolean addAll(@NotNull Collection<? extends T> collection) {
         Collection<WeakReference<T>> values = this.collection;
         boolean ret = false;
         for (T value : collection) {
@@ -38,7 +41,7 @@ public final class WeakCollection<T> implements Collection<T> {
     }
 
     @Override
-    public boolean contains(Object object) {
+    public boolean contains(@Nullable Object object) {
         if (object == null) {
             return false;
         }
@@ -51,7 +54,7 @@ public final class WeakCollection<T> implements Collection<T> {
     }
 
     @Override
-    public boolean containsAll(Collection<?> collection) {
+    public boolean containsAll(@NotNull Collection<?> collection) {
         return this.toCollection().containsAll(collection);
     }
 
@@ -61,10 +64,10 @@ public final class WeakCollection<T> implements Collection<T> {
     }
 
     @Override
-    public Iterator<T> iterator() {
+    public @NotNull Iterator<T> iterator() {
         return new Iterator<T>() {
-            Iterator<WeakReference<T>> it = WeakCollection.this.collection.iterator();
-            Object value = WeakCollection.NO_VALUE;
+            @NotNull Iterator<WeakReference<T>> it = WeakCollection.this.collection.iterator();
+            @Nullable Object value = WeakCollection.NO_VALUE;
 
             @Override
             public boolean hasNext() {
@@ -114,7 +117,7 @@ public final class WeakCollection<T> implements Collection<T> {
     }
 
     @Override
-    public boolean remove(Object object) {
+    public boolean remove(@Nullable Object object) {
         if (object == null) {
             return false;
         }
@@ -130,7 +133,7 @@ public final class WeakCollection<T> implements Collection<T> {
     }
 
     @Override
-    public boolean removeAll(Collection<?> collection) {
+    public boolean removeAll(@NotNull Collection<?> collection) {
         Iterator<T> it = this.iterator();
         boolean ret = false;
         while (it.hasNext()) {
@@ -143,7 +146,7 @@ public final class WeakCollection<T> implements Collection<T> {
     }
 
     @Override
-    public boolean retainAll(Collection<?> collection) {
+    public boolean retainAll(@NotNull Collection<?> collection) {
         Iterator<T> it = this.iterator();
         boolean ret = false;
         while (it.hasNext()) {
@@ -165,16 +168,16 @@ public final class WeakCollection<T> implements Collection<T> {
     }
 
     @Override
-    public Object[] toArray() {
+    public Object @NotNull [] toArray() {
         return this.toArray(new Object[0]);
     }
 
     @Override
-    public <T> T[] toArray(T[] array) {
+    public <T> T @NotNull [] toArray(T @NotNull [] array) {
         return this.toCollection().toArray(array);
     }
 
-    private Collection<T> toCollection() {
+    private @NotNull Collection<T> toCollection() {
         ArrayList<T> collection = new ArrayList<T>();
         for (T value : this) {
             collection.add(value);
diff --git a/src/main/java/org/bukkit/craftbukkit/util/WorldUUID.java b/src/main/java/org/bukkit/craftbukkit/util/WorldUUID.java
index 738100ffa60647790f0921cf31d5bbc2714e27dd..c13492528c6ce58a6c1f7e14c896f784db40448f 100644
--- a/src/main/java/org/bukkit/craftbukkit/util/WorldUUID.java
+++ b/src/main/java/org/bukkit/craftbukkit/util/WorldUUID.java
@@ -9,6 +9,8 @@ import java.io.IOException;
 import java.util.UUID;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
+import org.jetbrains.annotations.NotNull;
+
 
 public final class WorldUUID {
 
@@ -17,7 +19,7 @@ public final class WorldUUID {
     private WorldUUID() {
     }
 
-    public static UUID getUUID(File baseDir) {
+    public static @NotNull UUID getUUID(File baseDir) {
         File file1 = new File(baseDir, "uid.dat");
         if (file1.exists()) {
             DataInputStream dis = null;
diff --git a/src/main/java/org/bukkit/craftbukkit/util/permissions/CommandPermissions.java b/src/main/java/org/bukkit/craftbukkit/util/permissions/CommandPermissions.java
index 0f8c5fad3c999da15c5c22b4baed275cf396a5d2..d5f9871d7dc35444b5284c667b5cd5b4c2773888 100644
--- a/src/main/java/org/bukkit/craftbukkit/util/permissions/CommandPermissions.java
+++ b/src/main/java/org/bukkit/craftbukkit/util/permissions/CommandPermissions.java
@@ -3,6 +3,8 @@ package org.bukkit.craftbukkit.util.permissions;
 import org.bukkit.permissions.Permission;
 import org.bukkit.permissions.PermissionDefault;
 import org.bukkit.util.permissions.DefaultPermissions;
+import org.jetbrains.annotations.NotNull;
+
 
 public final class CommandPermissions {
     private static final String ROOT = "minecraft.command";
@@ -10,7 +12,7 @@ public final class CommandPermissions {
 
     private CommandPermissions() {}
 
-    public static Permission registerPermissions(Permission parent) {
+    public static @NotNull Permission registerPermissions(@NotNull Permission parent) {
         Permission commands = DefaultPermissions.registerPermission(ROOT, "Gives the user the ability to use all vanilla minecraft commands", parent);
 
         DefaultPermissions.registerPermission(CommandPermissions.PREFIX + "kill", "Allows the user to commit suicide", PermissionDefault.OP, commands);
diff --git a/src/main/java/org/spigotmc/ActivationRange.java b/src/main/java/org/spigotmc/ActivationRange.java
index 1b42c98956342832c37f0aa266f85271daa4ba5b..5da2effa3c061bc776413f55294a6631e3d841f0 100644
--- a/src/main/java/org/spigotmc/ActivationRange.java
+++ b/src/main/java/org/spigotmc/ActivationRange.java
@@ -38,6 +38,8 @@ import co.aikar.timings.MinecraftTimings;
 import net.minecraft.world.entity.schedule.Activity;
 import net.minecraft.world.level.Level;
 import net.minecraft.world.phys.AABB;
+import org.jetbrains.annotations.NotNull;
+
 
 public class ActivationRange
 {
@@ -52,18 +54,18 @@ public class ActivationRange
         RAIDER,
         MISC;
 
-        AABB boundingBox = new AABB( 0, 0, 0, 0, 0, 0 );
+        @NotNull AABB boundingBox = new AABB( 0, 0, 0, 0, 0, 0 );
     }
     // Paper start
 
-    static Activity[] VILLAGER_PANIC_IMMUNITIES = {
+    static Activity @NotNull [] VILLAGER_PANIC_IMMUNITIES = {
         Activity.HIDE,
         Activity.PRE_RAID,
         Activity.RAID,
         Activity.PANIC
     };
 
-    private static int checkInactiveWakeup(Entity entity) {
+    private static int checkInactiveWakeup(@NotNull Entity entity) {
         Level world = entity.level;
         SpigotWorldConfig config = world.spigotConfig;
         long inactiveFor = MinecraftServer.currentTick - entity.activatedTick;
@@ -92,7 +94,7 @@ public class ActivationRange
     }
     // Paper end
 
-    static AABB maxBB = new AABB( 0, 0, 0, 0, 0, 0 );
+    static @NotNull AABB maxBB = new AABB( 0, 0, 0, 0, 0, 0 );
 
     /**
      * Initializes an entities type on construction to specify what group this
@@ -101,7 +103,7 @@ public class ActivationRange
      * @param entity
      * @return group id
      */
-    public static ActivationType initializeEntityActivationType(Entity entity)
+    public static @NotNull ActivationType initializeEntityActivationType(Entity entity)
     {
         if (entity instanceof WaterAnimal) { return ActivationType.WATER; } // Paper
         else if (entity instanceof Villager) { return ActivationType.VILLAGER; } // Paper
@@ -128,7 +130,7 @@ public class ActivationRange
      * @param config Spigot config to determine ranges
      * @return boolean If it should always tick.
      */
-    public static boolean initializeEntityActivationState(Entity entity, SpigotWorldConfig config)
+    public static boolean initializeEntityActivationState(@NotNull Entity entity, @NotNull SpigotWorldConfig config)
     {
         if ( ( entity.activationType == ActivationType.MISC && config.miscActivationRange <= 0 )
                 || ( entity.activationType == ActivationType.RAIDER && config.raiderActivationRange <= 0 )
@@ -163,7 +165,7 @@ public class ActivationRange
      *
      * @param world
      */
-    public static void activateEntities(Level world)
+    public static void activateEntities(@NotNull Level world)
     {
         MinecraftTimings.entityActivationCheckTimer.startTiming();
         final int miscActivationRange = world.spigotConfig.miscActivationRange;
@@ -227,7 +229,7 @@ public class ActivationRange
      *
      * @param chunk
      */
-    private static void activateEntity(Entity entity)
+    private static void activateEntity(@NotNull Entity entity)
     {
         if ( MinecraftServer.currentTick > entity.activatedTick )
         {
@@ -250,7 +252,7 @@ public class ActivationRange
      * @param entity
      * @return
      */
-    public static int checkEntityImmunities(Entity entity) // Paper - return # of ticks to get immunity
+    public static int checkEntityImmunities(@NotNull Entity entity) // Paper - return # of ticks to get immunity
     {
         // Paper start
         SpigotWorldConfig config = entity.level.spigotConfig;
diff --git a/src/main/java/org/spigotmc/LimitStream.java b/src/main/java/org/spigotmc/LimitStream.java
index 8de241a921daaf4bab565a72f51cd08561c99da9..9cbcb282dd9331d749995a25b77fee5cdd5d8153 100644
--- a/src/main/java/org/spigotmc/LimitStream.java
+++ b/src/main/java/org/spigotmc/LimitStream.java
@@ -4,6 +4,8 @@ import java.io.FilterInputStream;
 import java.io.IOException;
 import java.io.InputStream;
 import net.minecraft.nbt.NbtAccounter;
+import org.jetbrains.annotations.NotNull;
+
 
 public class LimitStream extends FilterInputStream
 {
@@ -24,14 +26,14 @@ public class LimitStream extends FilterInputStream
     }
 
     @Override
-    public int read(byte[] b) throws IOException
+    public int read(byte @NotNull [] b) throws IOException
     {
         this.limit.accountBytes( b.length );
         return super.read( b );
     }
 
     @Override
-    public int read(byte[] b, int off, int len) throws IOException
+    public int read(byte @NotNull [] b, int off, int len) throws IOException
     {
         this.limit.accountBytes( len );
         return super.read( b, off, len );
diff --git a/src/main/java/org/spigotmc/Metrics.java b/src/main/java/org/spigotmc/Metrics.java
index 8f15af52d2ed734732134bf011ccdd4b7856a284..615967bca1f8257f30dedee00428e237afe69a12 100644
--- a/src/main/java/org/spigotmc/Metrics.java
+++ b/src/main/java/org/spigotmc/Metrics.java
@@ -51,6 +51,9 @@ import net.minecraft.server.MinecraftServer;
 import org.bukkit.Bukkit;
 import org.bukkit.configuration.InvalidConfigurationException;
 import org.bukkit.configuration.file.YamlConfiguration;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 /**
  * <p> The metrics class obtains data about a plugin and submits statistics about it to the metrics backend. </p> <p>
@@ -95,15 +98,15 @@ public class Metrics {
     /**
      * The plugin configuration file
      */
-    private final YamlConfiguration configuration;
+    private final @NotNull YamlConfiguration configuration;
     /**
      * The plugin configuration file
      */
-    private final File configurationFile;
+    private final @NotNull File configurationFile;
     /**
      * Unique server id
      */
-    private final String guid;
+    private final @Nullable String guid;
     /**
      * Debug mode
      */
@@ -115,7 +118,7 @@ public class Metrics {
     /**
      * The scheduled task
      */
-    private volatile Timer task = null;
+    private volatile @Nullable Timer task = null;
 
     public Metrics() throws IOException {
         // load the config
@@ -145,7 +148,7 @@ public class Metrics {
      * @param name The name of the graph
      * @return Graph object created. Will never return NULL under normal circumstances unless bad parameters are given
      */
-    public Graph createGraph(final String name) {
+    public @NotNull Graph createGraph(final @Nullable String name) {
         if (name == null) {
             throw new IllegalArgumentException("Graph name cannot be null");
         }
@@ -165,7 +168,7 @@ public class Metrics {
      *
      * @param graph The name of the graph
      */
-    public void addGraph(final Graph graph) {
+    public void addGraph(final @Nullable Graph graph) {
         if (graph == null) {
             throw new IllegalArgumentException("Graph cannot be null");
         }
@@ -178,7 +181,7 @@ public class Metrics {
      *
      * @param plotter The plotter to use to plot custom data
      */
-    public void addCustomData(final Plotter plotter) {
+    public void addCustomData(final @Nullable Plotter plotter) {
         if (plotter == null) {
             throw new IllegalArgumentException("Plotter cannot be null");
         }
@@ -323,7 +326,7 @@ public class Metrics {
      *
      * @return the File object for the config file
      */
-    public File getConfigFile() {
+    public @NotNull File getConfigFile() {
         // I believe the easiest way to get the base folder (e.g craftbukkit set via -P) for plugins to use
         // is to abuse the plugin object we already have
         // plugin.getDataFolder() => base/plugins/PluginA/
@@ -482,7 +485,7 @@ public class Metrics {
      * @param key the key value
      * @param value the value
      */
-    private static void encodeDataPair(final StringBuilder buffer, final String key, final String value) throws UnsupportedEncodingException {
+    private static void encodeDataPair(final @NotNull StringBuilder buffer, final @NotNull String key, final @NotNull String value) throws UnsupportedEncodingException {
         buffer.append('&').append(Metrics.encode(key)).append('=').append(Metrics.encode(value));
     }
 
@@ -492,7 +495,7 @@ public class Metrics {
      * @param text the text to encode
      * @return the encoded text, as UTF-8
      */
-    private static String encode(final String text) throws UnsupportedEncodingException {
+    private static String encode(final @NotNull String text) throws UnsupportedEncodingException {
         return URLEncoder.encode(text, "UTF-8");
     }
 
@@ -547,7 +550,7 @@ public class Metrics {
          *
          * @return an unmodifiable {@link java.util.Set} of the plotter objects
          */
-        public Set<Plotter> getPlotters() {
+        public @NotNull Set<Plotter> getPlotters() {
             return Collections.unmodifiableSet(plotters);
         }
 
diff --git a/src/main/java/org/spigotmc/RestartCommand.java b/src/main/java/org/spigotmc/RestartCommand.java
index 160115bf8a153ff981ba308599d22c4c08026fb6..dcebe0c77a6e5c559d033a9e310392f14e7b1034 100644
--- a/src/main/java/org/spigotmc/RestartCommand.java
+++ b/src/main/java/org/spigotmc/RestartCommand.java
@@ -6,11 +6,13 @@ import net.minecraft.server.MinecraftServer;
 import net.minecraft.server.level.ServerPlayer;
 import org.bukkit.command.Command;
 import org.bukkit.command.CommandSender;
+import org.jetbrains.annotations.NotNull;
+
 
 public class RestartCommand extends Command
 {
 
-    public RestartCommand(String name)
+    public RestartCommand(@NotNull String name)
     {
         super( name );
         this.description = "Restarts the server";
@@ -19,7 +21,7 @@ public class RestartCommand extends Command
     }
 
     @Override
-    public boolean execute(CommandSender sender, String currentAlias, String[] args)
+    public boolean execute(@NotNull CommandSender sender, String currentAlias, String[] args)
     {
         if ( testPermission( sender ) )
         {
@@ -40,7 +42,7 @@ public class RestartCommand extends Command
         RestartCommand.restart( SpigotConfig.restartScript );
     }
 
-    private static void restart(final String restartScript)
+    private static void restart(final @NotNull String restartScript)
     {
         AsyncCatcher.enabled = false; // Disable async catcher incase it interferes with us
         org.spigotmc.AsyncCatcher.shuttingDown = true; // Paper
@@ -139,7 +141,7 @@ public class RestartCommand extends Command
     // Paper end
 
     // Paper start - copied from above and modified to return if the hook registered
-    public static boolean addShutdownHook(String restartScript)
+    public static boolean addShutdownHook(@NotNull String restartScript)
     {
         String[] split = restartScript.split( " " );
         if ( split.length > 0 && new File( split[0] ).isFile() )
diff --git a/src/main/java/org/spigotmc/SpigotCommand.java b/src/main/java/org/spigotmc/SpigotCommand.java
index 3112a8695639c402e9d18710acbc11cff5611e9c..d4234563faeb3a97b07e4d45ef0157b7d8d14097 100644
--- a/src/main/java/org/spigotmc/SpigotCommand.java
+++ b/src/main/java/org/spigotmc/SpigotCommand.java
@@ -6,10 +6,12 @@ import net.minecraft.server.level.ServerLevel;
 import org.bukkit.ChatColor;
 import org.bukkit.command.Command;
 import org.bukkit.command.CommandSender;
+import org.jetbrains.annotations.NotNull;
+
 
 public class SpigotCommand extends Command {
 
-    public SpigotCommand(String name) {
+    public SpigotCommand(@NotNull String name) {
         super(name);
         this.description = "Spigot related commands";
         this.usageMessage = "/spigot reload";
@@ -17,7 +19,7 @@ public class SpigotCommand extends Command {
     }
 
     @Override
-    public boolean execute(CommandSender sender, String commandLabel, String[] args) {
+    public boolean execute(@NotNull CommandSender sender, String commandLabel, String @NotNull [] args) {
         if (!testPermission(sender)) return true;
 
         if (args.length != 1) {
diff --git a/src/main/java/org/spigotmc/SpigotConfig.java b/src/main/java/org/spigotmc/SpigotConfig.java
index 612c3169c3463d702b85975e1db79ae6e47d60d0..3705b4196369f7e92de8f04789bec5c2e267e338 100644
--- a/src/main/java/org/spigotmc/SpigotConfig.java
+++ b/src/main/java/org/spigotmc/SpigotConfig.java
@@ -27,6 +27,9 @@ import org.bukkit.command.Command;
 import org.bukkit.configuration.ConfigurationSection;
 import org.bukkit.configuration.InvalidConfigurationException;
 import org.bukkit.configuration.file.YamlConfiguration;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 public class SpigotConfig
 {
@@ -98,7 +101,7 @@ public class SpigotConfig
         */ // Paper end
     }
 
-    public static void readConfig(Class<?> clazz, Object instance) // Paper - package-private -> public
+    public static void readConfig(@NotNull Class<?> clazz, Object instance) // Paper - package-private -> public
     {
         for ( Method method : clazz.getDeclaredMethods() )
         {
@@ -134,36 +137,36 @@ public class SpigotConfig
         }
     }
 
-    private static void set(String path, Object val)
+    private static void set(@NotNull String path, Object val)
     {
         SpigotConfig.config.set( path, val );
     }
 
-    private static boolean getBoolean(String path, boolean def)
+    private static boolean getBoolean(@NotNull String path, boolean def)
     {
         SpigotConfig.config.addDefault( path, def );
         return SpigotConfig.config.getBoolean( path, SpigotConfig.config.getBoolean( path ) );
     }
 
-    private static int getInt(String path, int def)
+    private static int getInt(@NotNull String path, int def)
     {
         SpigotConfig.config.addDefault( path, def );
         return SpigotConfig.config.getInt( path, SpigotConfig.config.getInt( path ) );
     }
 
-    private static <T> List getList(String path, T def)
+    private static <T> @Nullable List getList(@NotNull String path, T def)
     {
         SpigotConfig.config.addDefault( path, def );
         return (List<T>) SpigotConfig.config.getList( path, SpigotConfig.config.getList( path ) );
     }
 
-    private static String getString(String path, String def)
+    private static @Nullable String getString(@NotNull String path, String def)
     {
         SpigotConfig.config.addDefault( path, def );
         return SpigotConfig.config.getString( path, SpigotConfig.config.getString( path ) );
     }
 
-    private static double getDouble(String path, double def)
+    private static double getDouble(@NotNull String path, double def)
     {
         SpigotConfig.config.addDefault( path, def );
         return SpigotConfig.config.getDouble( path, SpigotConfig.config.getDouble( path ) );
@@ -197,9 +200,9 @@ public class SpigotConfig
     public static String whitelistMessage;
     public static String unknownCommandMessage;
     public static String serverFullMessage;
-    public static String outdatedClientMessage = "Outdated client! Please use {0}";
-    public static String outdatedServerMessage = "Outdated server! I\'m still on {0}";
-    private static String transform(String s)
+    public static @NotNull String outdatedClientMessage = "Outdated client! Please use {0}";
+    public static @NotNull String outdatedServerMessage = "Outdated server! I\'m still on {0}";
+    private static @NotNull String transform(@NotNull String s)
     {
         return ChatColor.translateAlternateColorCodes( '&', s ).replaceAll( "\\\\n", "\n" );
     }
@@ -220,7 +223,7 @@ public class SpigotConfig
 
     public static int timeoutTime = 60;
     public static boolean restartOnCrash = true;
-    public static String restartScript = "./start.sh";
+    public static @Nullable String restartScript = "./start.sh";
     public static String restartMessage;
     private static void watchdog()
     {
@@ -250,7 +253,7 @@ public class SpigotConfig
     }
 
     public static boolean disableStatSaving;
-    public static Map<ResourceLocation, Integer> forcedStats = new HashMap<>();
+    public static @NotNull Map<ResourceLocation, Integer> forcedStats = new HashMap<>();
     private static void stats()
     {
         SpigotConfig.disableStatSaving = SpigotConfig.getBoolean( "stats.disable-saving", false );
@@ -299,7 +302,7 @@ public class SpigotConfig
         SpigotConfig.playerShuffle = SpigotConfig.getInt( "settings.player-shuffle", 0 );
     }
 
-    public static List<String> spamExclusions;
+    public static @Nullable List<String> spamExclusions;
     private static void spamExclusions()
     {
         SpigotConfig.spamExclusions = SpigotConfig.getList( "commands.spam-exclusions", Arrays.asList( new String[]
@@ -387,7 +390,7 @@ public class SpigotConfig
     }
 
     public static boolean disableAdvancementSaving;
-    public static List<String> disabledAdvancements;
+    public static @Nullable List<String> disabledAdvancements;
     private static void disabledAdvancements() {
         SpigotConfig.disableAdvancementSaving = SpigotConfig.getBoolean("advancements.disable-saving", false);
         SpigotConfig.disabledAdvancements = SpigotConfig.getList("advancements.disabled", Arrays.asList(new String[]{"minecraft:story/disabled"}));
diff --git a/src/main/java/org/spigotmc/SpigotWorldConfig.java b/src/main/java/org/spigotmc/SpigotWorldConfig.java
index 5503ad6a93d331771a0e92c0da6adedf2ac81aff..387ffe9c15fc2edd45f94d0580f1073f00265d6f 100644
--- a/src/main/java/org/spigotmc/SpigotWorldConfig.java
+++ b/src/main/java/org/spigotmc/SpigotWorldConfig.java
@@ -3,6 +3,9 @@ package org.spigotmc;
 import java.util.List;
 import org.bukkit.Bukkit;
 import org.bukkit.configuration.file.YamlConfiguration;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 public class SpigotWorldConfig
 {
@@ -68,19 +71,19 @@ public class SpigotWorldConfig
         // Paper end
     }
 
-    public <T> List getList(String path, T def)
+    public <T> @Nullable List getList(String path, T def)
     {
         this.config.addDefault( "world-settings.default." + path, def );
         return (List<T>) this.config.getList( "world-settings." + this.worldName + "." + path, this.config.getList( "world-settings.default." + path ) );
     }
 
-    public String getString(String path, String def)
+    public @Nullable String getString(String path, String def)
     {
         this.config.addDefault( "world-settings.default." + path, def );
         return this.config.getString( "world-settings." + this.worldName + "." + path, this.config.getString( "world-settings.default." + path ) );
     }
 
-    private Object get(String path, Object def)
+    private @Nullable Object get(String path, Object def)
     {
         this.config.addDefault( "world-settings.default." + path, def );
         return this.config.get( "world-settings." + this.worldName + "." + path, this.config.get( "world-settings.default." + path ) );
@@ -107,7 +110,7 @@ public class SpigotWorldConfig
     public int weepingVinesModifier;
     public int caveVinesModifier;
     public int glowBerryModifier; // Paper
-    private int getAndValidateGrowth(String crop)
+    private int getAndValidateGrowth(@NotNull String crop)
     {
         int modifier = this.getInt( "growth." + crop.toLowerCase(java.util.Locale.ENGLISH) + "-modifier", 100 );
         if ( modifier == 0 )
@@ -365,9 +368,9 @@ public class SpigotWorldConfig
     // Paper start - add missing structure set configs
     public int ancientCitySeed;
     public int buriedTreasureSeed;
-    public Integer mineshaftSeed;
-    public Long strongholdSeed;
-    private <N extends Number> N getSeed(String path, java.util.function.Function<String, N> toNumberFunc) {
+    public @Nullable Integer mineshaftSeed;
+    public @Nullable Long strongholdSeed;
+    private <N extends Number> @Nullable N getSeed(String path, java.util.function.@NotNull Function<String, N> toNumberFunc) {
         final String value = this.getString(path, "default");
         return org.apache.commons.lang3.math.NumberUtils.isParsable(value) ? toNumberFunc.apply(value) : null;
     }
diff --git a/src/main/java/org/spigotmc/TicksPerSecondCommand.java b/src/main/java/org/spigotmc/TicksPerSecondCommand.java
index 9bede6a26c08ede063c7a38f1149c811df14b258..4a00841a53ca74b2b248fdd91c7f9913d1b37d1d 100644
--- a/src/main/java/org/spigotmc/TicksPerSecondCommand.java
+++ b/src/main/java/org/spigotmc/TicksPerSecondCommand.java
@@ -4,11 +4,13 @@ import net.minecraft.server.MinecraftServer;
 import org.bukkit.ChatColor;
 import org.bukkit.command.Command;
 import org.bukkit.command.CommandSender;
+import org.jetbrains.annotations.NotNull;
+
 
 public class TicksPerSecondCommand extends Command
 {
 
-    public TicksPerSecondCommand(String name)
+    public TicksPerSecondCommand(@NotNull String name)
     {
         super( name );
         this.description = "Gets the current ticks per second for the server";
@@ -17,7 +19,7 @@ public class TicksPerSecondCommand extends Command
     }
 
     @Override
-    public boolean execute(CommandSender sender, String currentAlias, String[] args)
+    public boolean execute(@NotNull CommandSender sender, String currentAlias, String @NotNull [] args)
     {
         if ( !testPermission( sender ) )
         {
@@ -45,7 +47,7 @@ public class TicksPerSecondCommand extends Command
     }
 
     private boolean hasShownMemoryWarning; // Paper
-    private static String format(double tps) // Paper - Made static
+    private static @NotNull String format(double tps) // Paper - Made static
     {
         return ( ( tps > 18.0 ) ? ChatColor.GREEN : ( tps > 16.0 ) ? ChatColor.YELLOW : ChatColor.RED ).toString()
                 + ( ( tps > 21.0 ) ? "*" : "" ) + Math.min( Math.round( tps * 100.0 ) / 100.0, 20.0 ); // Paper - only print * at 21, we commonly peak to 20.02 as the tick sleep is not accurate enough, stop the noise
diff --git a/src/main/java/org/spigotmc/TrackingRange.java b/src/main/java/org/spigotmc/TrackingRange.java
index e5bcbfe175a697e04886d04543e1278b7e83a184..a1b437f422f95d94fee27f19ec20bdaf82eeb4d5 100644
--- a/src/main/java/org/spigotmc/TrackingRange.java
+++ b/src/main/java/org/spigotmc/TrackingRange.java
@@ -6,6 +6,8 @@ import net.minecraft.world.entity.ExperienceOrb;
 import net.minecraft.world.entity.decoration.ItemFrame;
 import net.minecraft.world.entity.decoration.Painting;
 import net.minecraft.world.entity.item.ItemEntity;
+import org.jetbrains.annotations.NotNull;
+
 
 public class TrackingRange
 {
@@ -54,7 +56,7 @@ public class TrackingRange
 
     // Paper start - optimise entity tracking
     // copied from above, TODO check on update
-    public static TrackingRangeType getTrackingRangeType(Entity entity)
+    public static @NotNull TrackingRangeType getTrackingRangeType(Entity entity)
     {
         if (entity instanceof net.minecraft.world.entity.boss.enderdragon.EnderDragon) return TrackingRangeType.ENDERDRAGON; // Paper - enderdragon is exempt
         if ( entity instanceof ServerPlayer )
diff --git a/src/main/java/org/spigotmc/ValidateUtils.java b/src/main/java/org/spigotmc/ValidateUtils.java
index 58a9534816c7b8a86cc6a620bbc1fcda86444d1a..07a112cb1050dc3d46cef3539c6626e2837f7f62 100644
--- a/src/main/java/org/spigotmc/ValidateUtils.java
+++ b/src/main/java/org/spigotmc/ValidateUtils.java
@@ -1,9 +1,12 @@
 package org.spigotmc;
 
+import org.jetbrains.annotations.NotNull;
+
+
 public class ValidateUtils
 {
 
-    public static String limit(String str, int limit)
+    public static @NotNull String limit(@NotNull String str, int limit)
     {
         if ( str.length() > limit )
         {
diff --git a/src/main/java/org/spigotmc/WatchdogThread.java b/src/main/java/org/spigotmc/WatchdogThread.java
index e9fa7faaa4451e36b3908cbcbbe0baf213abde96..8f6d9d0cb688213c1a514cbf37837c291271435f 100644
--- a/src/main/java/org/spigotmc/WatchdogThread.java
+++ b/src/main/java/org/spigotmc/WatchdogThread.java
@@ -7,6 +7,8 @@ import java.util.logging.Level;
 import java.util.logging.Logger;
 import net.minecraft.server.MinecraftServer;
 import org.bukkit.Bukkit;
+import org.jetbrains.annotations.NotNull;
+
 
 public final class WatchdogThread extends io.papermc.paper.util.TickThread // Paper - rewrite chunk system
 {
@@ -23,7 +25,7 @@ public final class WatchdogThread extends io.papermc.paper.util.TickThread // Pa
     private volatile boolean stopping;
 
     // Paper start - log detailed tick information
-    private void dumpEntity(net.minecraft.world.entity.Entity entity) {
+    private void dumpEntity(net.minecraft.world.entity.@NotNull Entity entity) {
         Logger log = Bukkit.getServer().getLogger();
         double posX, posY, posZ;
         net.minecraft.world.phys.Vec3 mot;
@@ -247,7 +249,7 @@ public final class WatchdogThread extends io.papermc.paper.util.TickThread // Pa
         }
     }
 
-    private static void dumpThread(ThreadInfo thread, Logger log)
+    private static void dumpThread(@NotNull ThreadInfo thread, @NotNull Logger log)
     {
         log.log( Level.SEVERE, "------------------------------" );
         //
diff --git a/src/test/java/com/destroystokyo/paper/entity/ai/VanillaMobGoalTest.java b/src/test/java/com/destroystokyo/paper/entity/ai/VanillaMobGoalTest.java
index 085242f3e998782ba0cc13b04787de4fe43282e5..20e0cc8fa84efe08c41fa1c7298e7d51c072bac5 100644
--- a/src/test/java/com/destroystokyo/paper/entity/ai/VanillaMobGoalTest.java
+++ b/src/test/java/com/destroystokyo/paper/entity/ai/VanillaMobGoalTest.java
@@ -1,5 +1,6 @@
 package com.destroystokyo.paper.entity.ai;
 
+import org.jetbrains.annotations.NotNull;
 import org.junit.jupiter.api.Test;
 
 import java.lang.reflect.Field;
@@ -80,7 +81,7 @@ public class VanillaMobGoalTest {
         if (shouldFail) fail("See above");
     }
 
-    private static boolean hasNoEnclosingClass(Class<?> clazz) {
+    private static boolean hasNoEnclosingClass(@NotNull Class<?> clazz) {
         return clazz.getEnclosingClass() == null || hasNoEnclosingClass(clazz.getSuperclass());
     }
 
diff --git a/src/test/java/io/papermc/paper/permissions/MinecraftCommandPermissionsTest.java b/src/test/java/io/papermc/paper/permissions/MinecraftCommandPermissionsTest.java
index 707592749e17077e7197acf1a8d69d735ce4f735..026164c601fef29a89fc7dbf3ab4581434666f73 100644
--- a/src/test/java/io/papermc/paper/permissions/MinecraftCommandPermissionsTest.java
+++ b/src/test/java/io/papermc/paper/permissions/MinecraftCommandPermissionsTest.java
@@ -12,6 +12,7 @@ import org.bukkit.craftbukkit.command.VanillaCommandWrapper;
 import org.bukkit.craftbukkit.util.permissions.CraftDefaultPermissions;
 import org.bukkit.permissions.Permission;
 import org.bukkit.support.AbstractTestingBase;
+import org.jetbrains.annotations.NotNull;
 import org.junit.jupiter.api.AfterAll;
 import org.junit.jupiter.api.BeforeAll;
 import org.junit.jupiter.api.Test;
@@ -61,7 +62,7 @@ public class MinecraftCommandPermissionsTest extends AbstractTestingBase {
         "minecraft.command.selector"
     );
 
-    private static Set<String> collectMinecraftCommandPerms() {
+    private static @NotNull Set<String> collectMinecraftCommandPerms() {
         Set<String> perms = new TreeSet<>();
         for (Permission perm : Bukkit.getPluginManager().getPermissions()) {
             if (perm.getName().startsWith("minecraft.command.")) {
diff --git a/src/test/java/io/papermc/paper/world/structure/ConfiguredStructureTest.java b/src/test/java/io/papermc/paper/world/structure/ConfiguredStructureTest.java
index 21f2a33b0ce40e0afc4c47fab5d26a708166260f..ad359750d7384a2ca5af445140a40b9106bddbbd 100644
--- a/src/test/java/io/papermc/paper/world/structure/ConfiguredStructureTest.java
+++ b/src/test/java/io/papermc/paper/world/structure/ConfiguredStructureTest.java
@@ -11,6 +11,7 @@ import net.minecraft.world.level.levelgen.structure.Structure;
 import org.bukkit.NamespacedKey;
 import org.bukkit.craftbukkit.util.CraftNamespacedKey;
 import org.bukkit.support.AbstractTestingBase;
+import org.jetbrains.annotations.NotNull;
 import org.junit.jupiter.api.AfterAll;
 import org.junit.jupiter.api.BeforeAll;
 import org.junit.jupiter.api.Test;
@@ -77,7 +78,7 @@ public class ConfiguredStructureTest extends AbstractTestingBase {
         }
     }
 
-    private static String printMissing(Map<ResourceLocation, Structure> missing) {
+    private static String printMissing(@NotNull Map<ResourceLocation, Structure> missing) {
         final StringJoiner joiner = new StringJoiner("\n", "Missing: \n", "");
 
         missing.forEach((key, configuredFeature) -> {
diff --git a/src/test/java/org/bukkit/BlockDataConversionTest.java b/src/test/java/org/bukkit/BlockDataConversionTest.java
index 9627446536b00b50010c82967af1ab489c9c8178..592ebdd5d74a8e2e2d8b9aac9b3b6717cf8104c4 100644
--- a/src/test/java/org/bukkit/BlockDataConversionTest.java
+++ b/src/test/java/org/bukkit/BlockDataConversionTest.java
@@ -4,6 +4,7 @@ import net.minecraft.core.registries.BuiltInRegistries;
 import net.minecraft.world.level.block.state.BlockState;
 import org.bukkit.craftbukkit.block.data.CraftBlockData;
 import org.bukkit.support.AbstractTestingBase;
+import org.jetbrains.annotations.NotNull;
 import org.junit.jupiter.params.ParameterizedTest;
 import org.junit.jupiter.params.provider.MethodSource;
 
@@ -19,13 +20,13 @@ import static org.junit.jupiter.api.Assertions.assertNotNull;
 public class BlockDataConversionTest extends AbstractTestingBase {
 
     @ParameterizedTest(name = "{index}: {0}")
-    public static Stream<Object[]> data() {
+    public static @NotNull Stream<Object[]> data() {
         return BuiltInRegistries.BLOCK.stream().map(block -> new Object[]{block.defaultBlockState()});
     }
 
     @ParameterizedTest
     @MethodSource("data")
-    public void testNotNull(BlockState data) {
+    public void testNotNull(@NotNull BlockState data) {
         assertNotNull(data);
         assertNotNull(CraftBlockData.fromData(data));
     }
diff --git a/src/test/java/org/bukkit/DyeColorsTest.java b/src/test/java/org/bukkit/DyeColorsTest.java
index 92520a21f4f9e7bc51750f695d986dcb75fe6d0d..4164ef9538262c6836a000777d830141600bc39a 100644
--- a/src/test/java/org/bukkit/DyeColorsTest.java
+++ b/src/test/java/org/bukkit/DyeColorsTest.java
@@ -1,6 +1,7 @@
 package org.bukkit;
 
 import org.bukkit.support.AbstractTestingBase;
+import org.jetbrains.annotations.NotNull;
 import org.junit.jupiter.params.ParameterizedTest;
 import org.junit.jupiter.params.provider.MethodSource;
 
@@ -12,13 +13,13 @@ import static org.hamcrest.Matchers.is;
 public class DyeColorsTest extends AbstractTestingBase {
 
     @ParameterizedTest(name = "{index}: {0}")
-    public static Stream<Object[]> data() {
+    public static @NotNull Stream<Object[]> data() {
         return Stream.of(DyeColor.values()).map(input -> new Object[]{input});
     }
 
     @ParameterizedTest
     @MethodSource("data")
-    public void checkColor(DyeColor dye) {
+    public void checkColor(@NotNull DyeColor dye) {
         Color color = dye.getColor();
         float[] nmsColorArray = net.minecraft.world.item.DyeColor.byId(dye.getWoolData()).getTextureDiffuseColors(); // Paper - remap fix
         Color nmsColor = Color.fromRGB((int) (nmsColorArray[0] * 255), (int) (nmsColorArray[1] * 255), (int) (nmsColorArray[2] * 255));
@@ -27,7 +28,7 @@ public class DyeColorsTest extends AbstractTestingBase {
 
     @ParameterizedTest
     @MethodSource("data")
-    public void checkFireworkColor(DyeColor dye) {
+    public void checkFireworkColor(@NotNull DyeColor dye) {
         Color color = dye.getFireworkColor();
         int nmsColor = net.minecraft.world.item.DyeColor.byId(dye.getWoolData()).getFireworkColor(); // Paper - remap fix
         assertThat(color, is(Color.fromRGB(nmsColor)));
diff --git a/src/test/java/org/bukkit/PerMaterialTest.java b/src/test/java/org/bukkit/PerMaterialTest.java
index 1b436cd85f4a9124431285d9c7e501bc637e3ef6..9394f44d9229a352bf61a95e4c99e89f18beacad 100644
--- a/src/test/java/org/bukkit/PerMaterialTest.java
+++ b/src/test/java/org/bukkit/PerMaterialTest.java
@@ -24,6 +24,7 @@ import org.bukkit.inventory.EquipmentSlot;
 import org.bukkit.inventory.ItemStack;
 import org.bukkit.material.MaterialData;
 import org.bukkit.support.AbstractTestingBase;
+import org.jetbrains.annotations.NotNull;
 import org.junit.jupiter.api.BeforeAll;
 import org.junit.jupiter.params.ParameterizedTest;
 import org.junit.jupiter.params.provider.MethodSource;
@@ -45,13 +46,13 @@ public class PerMaterialTest extends AbstractTestingBase {
     }
 
     @ParameterizedTest(name = "{index}: {0}")
-    public static Stream<Object[]> data() {
+    public static @NotNull Stream<Object[]> data() {
         return Stream.of(Material.values()).filter(it -> !it.isLegacy()).map(input -> new Object[]{input});
     }
 
     @ParameterizedTest
     @MethodSource("data")
-    public void isBlock(Material material) {
+    public void isBlock(@NotNull Material material) {
         if (material != Material.AIR && material != Material.CAVE_AIR && material != Material.VOID_AIR) {
             assertThat(material.isBlock(), is(not(CraftMagicNumbers.getBlock(material) == null)));
         }
@@ -59,7 +60,7 @@ public class PerMaterialTest extends AbstractTestingBase {
 
     @ParameterizedTest
     @MethodSource("data")
-    public void isSolid(Material material) {
+    public void isSolid(@NotNull Material material) {
         if (material == Material.AIR) {
             assertFalse(material.isSolid());
         } else if (material.isBlock()) {
@@ -71,7 +72,7 @@ public class PerMaterialTest extends AbstractTestingBase {
 
     @ParameterizedTest
     @MethodSource("data")
-    public void isEdible(Material material) {
+    public void isEdible(@NotNull Material material) {
         if (material.isBlock()) {
             assertFalse(material.isEdible());
         } else {
@@ -81,13 +82,13 @@ public class PerMaterialTest extends AbstractTestingBase {
 
     @ParameterizedTest
     @MethodSource("data")
-    public void isRecord(Material material) {
+    public void isRecord(@NotNull Material material) {
         assertThat(material.isRecord(), is(CraftMagicNumbers.getItem(material) instanceof RecordItem));
     }
 
     @ParameterizedTest
     @MethodSource("data")
-    public void maxDurability(Material material) {
+    public void maxDurability(@NotNull Material material) {
         if (INVALIDATED_MATERIALS.contains(material)) return;
 
         if (material == Material.AIR) {
@@ -100,7 +101,7 @@ public class PerMaterialTest extends AbstractTestingBase {
 
     @ParameterizedTest
     @MethodSource("data")
-    public void maxStackSize(Material material) {
+    public void maxStackSize(@NotNull Material material) {
         if (INVALIDATED_MATERIALS.contains(material)) return;
 
         final ItemStack bukkit = new ItemStack(material);
@@ -119,7 +120,7 @@ public class PerMaterialTest extends AbstractTestingBase {
 
     @ParameterizedTest
     @MethodSource("data")
-    public void isTransparent(Material material) {
+    public void isTransparent(@NotNull Material material) {
         if (material == Material.AIR) {
             assertTrue(material.isTransparent());
         } else if (material.isBlock()) {
@@ -131,7 +132,7 @@ public class PerMaterialTest extends AbstractTestingBase {
 
     @ParameterizedTest
     @MethodSource("data")
-    public void isFlammable(Material material) {
+    public void isFlammable(@NotNull Material material) {
         if (material != Material.AIR && material.isBlock()) {
             assertThat(material.isFlammable(), is(CraftMagicNumbers.getBlock(material).defaultBlockState().getMaterial().isFlammable()));
         } else {
@@ -141,7 +142,7 @@ public class PerMaterialTest extends AbstractTestingBase {
 
     @ParameterizedTest
     @MethodSource("data")
-    public void isBurnable(Material material) {
+    public void isBurnable(@NotNull Material material) {
         if (material.isBlock()) {
             Block block = CraftMagicNumbers.getBlock(material);
             assertThat(material.isBurnable(), is(PerMaterialTest.fireValues.containsKey(block) && PerMaterialTest.fireValues.get(block) > 0));
@@ -152,13 +153,13 @@ public class PerMaterialTest extends AbstractTestingBase {
 
     @ParameterizedTest
     @MethodSource("data")
-    public void isFuel(Material material) {
+    public void isFuel(@NotNull Material material) {
         assertThat(material.isFuel(), is(AbstractFurnaceBlockEntity.isFuel(new net.minecraft.world.item.ItemStack(CraftMagicNumbers.getItem(material)))));
     }
 
     @ParameterizedTest
     @MethodSource("data")
-    public void isOccluding(Material material) {
+    public void isOccluding(@NotNull Material material) {
         if (material.isBlock()) {
             assertThat(material.isOccluding(), is(CraftMagicNumbers.getBlock(material).defaultBlockState().isRedstoneConductor(EmptyBlockGetter.INSTANCE, BlockPos.ZERO)));
         } else {
@@ -168,7 +169,7 @@ public class PerMaterialTest extends AbstractTestingBase {
 
     @ParameterizedTest
     @MethodSource("data")
-    public void hasGravity(Material material) {
+    public void hasGravity(@NotNull Material material) {
         if (material.isBlock()) {
             assertThat(material.hasGravity(), is(CraftMagicNumbers.getBlock(material) instanceof FallingBlock));
         } else {
@@ -178,7 +179,7 @@ public class PerMaterialTest extends AbstractTestingBase {
 
     @ParameterizedTest
     @MethodSource("data")
-    public void usesDurability(Material material) {
+    public void usesDurability(@NotNull Material material) {
         if (!material.isBlock()) {
             assertThat(EnchantmentTarget.BREAKABLE.includes(material), is(CraftMagicNumbers.getItem(material).canBeDepleted()));
         } else {
@@ -188,7 +189,7 @@ public class PerMaterialTest extends AbstractTestingBase {
 
     @ParameterizedTest
     @MethodSource("data")
-    public void testDurability(Material material) {
+    public void testDurability(@NotNull Material material) {
         if (!material.isBlock()) {
             assertThat(material.getMaxDurability(), is((short) CraftMagicNumbers.getItem(material).getMaxDamage()));
         } else {
@@ -198,7 +199,7 @@ public class PerMaterialTest extends AbstractTestingBase {
 
     @ParameterizedTest
     @MethodSource("data")
-    public void testBlock(Material material) {
+    public void testBlock(@NotNull Material material) {
         if (material == Material.AIR) {
             assertTrue(material.isBlock());
         } else {
@@ -208,7 +209,7 @@ public class PerMaterialTest extends AbstractTestingBase {
 
     @ParameterizedTest
     @MethodSource("data")
-    public void testAir(Material material) {
+    public void testAir(@NotNull Material material) {
         if (material.isBlock()) {
             assertThat(material.isAir(), is(equalTo(CraftMagicNumbers.getBlock(material).defaultBlockState().isAir())));
         } else {
@@ -218,7 +219,7 @@ public class PerMaterialTest extends AbstractTestingBase {
 
     @ParameterizedTest
     @MethodSource("data")
-    public void testItem(Material material) {
+    public void testItem(@NotNull Material material) {
         if (material == Material.AIR) {
             assertTrue(material.isItem());
         } else {
@@ -228,7 +229,7 @@ public class PerMaterialTest extends AbstractTestingBase {
 
     @ParameterizedTest
     @MethodSource("data")
-    public void testInteractable(Material material) throws ReflectiveOperationException {
+    public void testInteractable(@NotNull Material material) throws ReflectiveOperationException {
         if (material.isBlock()) {
             assertThat(material.isInteractable(),
                     is(!CraftMagicNumbers.getBlock(material).getClass()
@@ -241,7 +242,7 @@ public class PerMaterialTest extends AbstractTestingBase {
 
     @ParameterizedTest
     @MethodSource("data")
-    public void testBlockHardness(Material material) {
+    public void testBlockHardness(@NotNull Material material) {
         if (material.isBlock()) {
             assertThat(material.getHardness(), is(CraftMagicNumbers.getBlock(material).defaultBlockState().destroySpeed));
         }
@@ -249,7 +250,7 @@ public class PerMaterialTest extends AbstractTestingBase {
 
     @ParameterizedTest
     @MethodSource("data")
-    public void testBlastResistance(Material material) {
+    public void testBlastResistance(@NotNull Material material) {
         if (material.isBlock()) {
             assertThat(material.getBlastResistance(), is(CraftMagicNumbers.getBlock(material).getExplosionResistance()));
         }
@@ -257,7 +258,7 @@ public class PerMaterialTest extends AbstractTestingBase {
 
     @ParameterizedTest
     @MethodSource("data")
-    public void testSlipperiness(Material material) {
+    public void testSlipperiness(@NotNull Material material) {
         if (material.isBlock()) {
             assertThat(material.getSlipperiness(), is(CraftMagicNumbers.getBlock(material).getFriction()));
         }
@@ -265,7 +266,7 @@ public class PerMaterialTest extends AbstractTestingBase {
 
     @ParameterizedTest
     @MethodSource("data")
-    public void testBlockDataCreation(Material material) {
+    public void testBlockDataCreation(@NotNull Material material) {
         if (material.isBlock()) {
             assertNotNull(material.createBlockData());
         }
@@ -273,7 +274,7 @@ public class PerMaterialTest extends AbstractTestingBase {
 
     @ParameterizedTest
     @MethodSource("data")
-    public void testCraftingRemainingItem(Material material) {
+    public void testCraftingRemainingItem(@NotNull Material material) {
         if (material.isItem()) {
             Item expectedItem = CraftMagicNumbers.getItem(material).getCraftingRemainingItem();
             Material expected = expectedItem == null ? null : CraftMagicNumbers.getMaterial(expectedItem);
@@ -284,7 +285,7 @@ public class PerMaterialTest extends AbstractTestingBase {
 
     @ParameterizedTest
     @MethodSource("data")
-    public void testEquipmentSlot(Material material) {
+    public void testEquipmentSlot(@NotNull Material material) {
         if (material.isItem()) {
             EquipmentSlot expected = CraftEquipmentSlot.getSlot(Mob.getEquipmentSlotForItem(CraftItemStack.asNMSCopy(new ItemStack(material))));
             assertThat(material.getEquipmentSlot(), is(expected));
@@ -293,7 +294,7 @@ public class PerMaterialTest extends AbstractTestingBase {
 
     @ParameterizedTest
     @MethodSource("data")
-    public void testBlockDataClass(Material material) {
+    public void testBlockDataClass(@NotNull Material material) {
         if (material.isBlock()) {
             Class<?> expectedClass = material.data;
             if (expectedClass != MaterialData.class) {
@@ -305,7 +306,7 @@ public class PerMaterialTest extends AbstractTestingBase {
 
     @ParameterizedTest
     @MethodSource("data")
-    public void testCreativeCategory(Material material) {
+    public void testCreativeCategory(@NotNull Material material) {
         if (material.isItem()) {
             material.getCreativeCategory();
         }
diff --git a/src/test/java/org/bukkit/craftbukkit/generator/ChunkDataTest.java b/src/test/java/org/bukkit/craftbukkit/generator/ChunkDataTest.java
index c9c16f51324bdaef9fea37b303738fba823a9e67..8e4c245b78c0168bf9f1752c64d534b9221e90a8 100644
--- a/src/test/java/org/bukkit/craftbukkit/generator/ChunkDataTest.java
+++ b/src/test/java/org/bukkit/craftbukkit/generator/ChunkDataTest.java
@@ -4,6 +4,7 @@ import static org.junit.jupiter.api.Assertions.*;
 import org.bukkit.Material;
 import org.bukkit.block.data.BlockData;
 import org.bukkit.support.AbstractTestingBase;
+import org.jetbrains.annotations.NotNull;
 import org.junit.jupiter.api.Test;
 
 public class ChunkDataTest extends AbstractTestingBase {
@@ -11,12 +12,12 @@ public class ChunkDataTest extends AbstractTestingBase {
     private static final BlockData RED_WOOL = Material.RED_WOOL.createBlockData();
     private static final BlockData AIR = Material.AIR.createBlockData();
 
-    private boolean testSetBlock(OldCraftChunkData data, int x, int y, int z, BlockData type, BlockData expected) {
+    private boolean testSetBlock(@NotNull OldCraftChunkData data, int x, int y, int z, @NotNull BlockData type, @NotNull BlockData expected) {
         data.setBlock(x, y, z, type);
         return expected.equals(data.getBlockData(x, y, z)) && expected.getMaterial().equals(data.getType(x, y, z));
     }
 
-    private void testSetRegion(OldCraftChunkData data, int minx, int miny, int minz, int maxx, int maxy, int maxz, BlockData type) {
+    private void testSetRegion(@NotNull OldCraftChunkData data, int minx, int miny, int minz, int maxx, int maxy, int maxz, @NotNull BlockData type) {
         data.setRegion(minx, miny, minz, maxx, maxy, maxz, type);
         for (int y = 0; y < data.getMaxHeight(); y++) {
             for (int z = 0; z < 16; z++) {
diff --git a/src/test/java/org/bukkit/craftbukkit/inventory/CompositeSerialization.java b/src/test/java/org/bukkit/craftbukkit/inventory/CompositeSerialization.java
index 70d307e51889715707e9a04dac500d720a94038d..f8b5f0189767582afe114ac1984a5f8113f4b89f 100644
--- a/src/test/java/org/bukkit/craftbukkit/inventory/CompositeSerialization.java
+++ b/src/test/java/org/bukkit/craftbukkit/inventory/CompositeSerialization.java
@@ -14,12 +14,13 @@ import org.bukkit.enchantments.Enchantment;
 import org.bukkit.inventory.ItemStack;
 import org.bukkit.inventory.meta.ItemMeta;
 import org.bukkit.support.AbstractTestingBase;
+import org.jetbrains.annotations.NotNull;
 import org.junit.jupiter.api.Test;
 
 
 public class CompositeSerialization extends AbstractTestingBase {
 
-    public YamlConfiguration getConfig() {
+    public @NotNull YamlConfiguration getConfig() {
         return new YamlConfiguration();
     }
 
diff --git a/src/test/java/org/bukkit/craftbukkit/inventory/DeprecatedItemMetaCustomValueTest.java b/src/test/java/org/bukkit/craftbukkit/inventory/DeprecatedItemMetaCustomValueTest.java
index ce8be2ef445f73b661bbf721977cfa52d436d193..a80f7c93571ff97a3862a5f3069f3b0beb59865e 100644
--- a/src/test/java/org/bukkit/craftbukkit/inventory/DeprecatedItemMetaCustomValueTest.java
+++ b/src/test/java/org/bukkit/craftbukkit/inventory/DeprecatedItemMetaCustomValueTest.java
@@ -20,6 +20,7 @@ import org.bukkit.inventory.meta.tags.CustomItemTagContainer;
 import org.bukkit.inventory.meta.tags.ItemTagAdapterContext;
 import org.bukkit.inventory.meta.tags.ItemTagType;
 import org.bukkit.support.AbstractTestingBase;
+import org.jetbrains.annotations.NotNull;
 import org.junit.jupiter.api.Test;
 import org.junit.jupiter.api.BeforeEach;
 
@@ -86,7 +87,7 @@ public class DeprecatedItemMetaCustomValueTest extends AbstractTestingBase {
         return Bukkit.getItemFactory().getItemMeta(Material.DIAMOND_PICKAXE);
     }
 
-    private NamespacedKey requestKey(String keyName) {
+    private @NotNull NamespacedKey requestKey(@NotNull String keyName) {
         return new NamespacedKey("test-plugin", keyName.toLowerCase());
     }
 
@@ -150,7 +151,7 @@ public class DeprecatedItemMetaCustomValueTest extends AbstractTestingBase {
         assertEquals(newStack.getItemMeta().getCustomTagContainer().getCustomTag(this.requestKey("double"), ItemTagType.STRING), "1.33");
     }
 
-    private CraftMetaItem createComplexItemMeta() {
+    private @NotNull CraftMetaItem createComplexItemMeta() {
         CraftMetaItem itemMeta = (CraftMetaItem) this.createNewItemMeta();
         itemMeta.unhandledTags.put("unhandled-test", StringTag.valueOf("test"));
         itemMeta.setDisplayName("Item Display Name");
@@ -216,17 +217,17 @@ public class DeprecatedItemMetaCustomValueTest extends AbstractTestingBase {
     class UUIDItemTagType implements ItemTagType<byte[], UUID> {
 
         @Override
-        public Class<byte[]> getPrimitiveType() {
+        public @NotNull Class<byte[]> getPrimitiveType() {
             return byte[].class;
         }
 
         @Override
-        public Class<UUID> getComplexType() {
+        public @NotNull Class<UUID> getComplexType() {
             return UUID.class;
         }
 
         @Override
-        public byte[] toPrimitive(UUID complex, ItemTagAdapterContext context) {
+        public byte[] toPrimitive(@NotNull UUID complex, ItemTagAdapterContext context) {
             ByteBuffer bb = ByteBuffer.wrap(new byte[16]);
             bb.putLong(complex.getMostSignificantBits());
             bb.putLong(complex.getLeastSignificantBits());
@@ -234,7 +235,7 @@ public class DeprecatedItemMetaCustomValueTest extends AbstractTestingBase {
         }
 
         @Override
-        public UUID fromPrimitive(byte[] primitive, ItemTagAdapterContext context) {
+        public @NotNull UUID fromPrimitive(byte @NotNull [] primitive, ItemTagAdapterContext context) {
             ByteBuffer bb = ByteBuffer.wrap(primitive);
             long firstLong = bb.getLong();
             long secondLong = bb.getLong();
@@ -266,7 +267,7 @@ public class DeprecatedItemMetaCustomValueTest extends AbstractTestingBase {
         });
     }
 
-    private <T, Z> void testPrimitiveCustomTag(ItemMeta meta, ItemTagType<T, Z> type, Z value) {
+    private <T, Z> void testPrimitiveCustomTag(@NotNull ItemMeta meta, @NotNull ItemTagType<T, Z> type, @NotNull Z value) {
         NamespacedKey tagKey = new NamespacedKey("test", String.valueOf(type.hashCode()));
 
         meta.getCustomTagContainer().setCustomTag(tagKey, type, value);
@@ -296,22 +297,22 @@ public class DeprecatedItemMetaCustomValueTest extends AbstractTestingBase {
         }
 
         @Override
-        public Class<T> getPrimitiveType() {
+        public @NotNull Class<T> getPrimitiveType() {
             return this.primitiveType;
         }
 
         @Override
-        public Class<T> getComplexType() {
+        public @NotNull Class<T> getComplexType() {
             return this.primitiveType;
         }
 
         @Override
-        public T toPrimitive(T complex, ItemTagAdapterContext context) {
+        public @NotNull T toPrimitive(@NotNull T complex, ItemTagAdapterContext context) {
             return complex;
         }
 
         @Override
-        public T fromPrimitive(T primitive, ItemTagAdapterContext context) {
+        public @NotNull T fromPrimitive(@NotNull T primitive, ItemTagAdapterContext context) {
             return primitive;
         }
     }
diff --git a/src/test/java/org/bukkit/craftbukkit/inventory/FactoryItemMaterialTest.java b/src/test/java/org/bukkit/craftbukkit/inventory/FactoryItemMaterialTest.java
index a6c6f50dcd39af6a29ac61e760b7d3e501cb724b..15b5b93590734cc403ce134ec541c9fd9294d8d2 100644
--- a/src/test/java/org/bukkit/craftbukkit/inventory/FactoryItemMaterialTest.java
+++ b/src/test/java/org/bukkit/craftbukkit/inventory/FactoryItemMaterialTest.java
@@ -5,6 +5,7 @@ import org.bukkit.inventory.ItemFactory;
 import org.bukkit.inventory.ItemStack;
 import org.bukkit.inventory.meta.ItemMeta;
 import org.bukkit.support.AbstractTestingBase;
+import org.jetbrains.annotations.NotNull;
 import org.junit.jupiter.params.ParameterizedTest;
 import org.junit.jupiter.params.provider.MethodSource;
 
@@ -21,7 +22,7 @@ import static org.junit.jupiter.api.Assertions.assertTrue;
 public class FactoryItemMaterialTest extends AbstractTestingBase {
     static final ItemFactory factory = CraftItemFactory.instance();
     static final StringBuilder buffer = new StringBuilder();
-    static final Material[] materials;
+    static final Material @NotNull [] materials;
 
     static {
         Material[] local_materials = Material.values();
@@ -36,7 +37,7 @@ public class FactoryItemMaterialTest extends AbstractTestingBase {
         materials = list.toArray(new Material[list.size()]);
     }
 
-    static String name(Enum<?> from, Enum<?> to) {
+    static @NotNull String name(@NotNull Enum<?> from, @NotNull Enum<?> to) {
         if (from.getClass() == to.getClass()) {
             return FactoryItemMaterialTest.buffer.delete(0, Integer.MAX_VALUE).append(from.getClass().getName()).append(' ').append(from.name()).append(" to ").append(to.name()).toString();
         }
@@ -44,7 +45,7 @@ public class FactoryItemMaterialTest extends AbstractTestingBase {
     }
 
     @ParameterizedTest(name = "Material[{index}]:{0}")
-    public static Stream<Object[]> data() {
+    public static @NotNull Stream<Object[]> data() {
         return Arrays.stream(FactoryItemMaterialTest.materials).map(input -> new Object[]{input});
     }
 
@@ -52,7 +53,7 @@ public class FactoryItemMaterialTest extends AbstractTestingBase {
 
     @ParameterizedTest
     @MethodSource("data")
-    public void itemStack(Material material) {
+    public void itemStack(@NotNull Material material) {
         ItemStack bukkitStack = new ItemStack(material);
         CraftItemStack craftStack = CraftItemStack.asCraftCopy(bukkitStack);
         ItemMeta meta = FactoryItemMaterialTest.factory.getItemMeta(material);
@@ -66,7 +67,7 @@ public class FactoryItemMaterialTest extends AbstractTestingBase {
 
     @ParameterizedTest
     @MethodSource("data")
-    public void generalCase(Material material) {
+    public void generalCase(@NotNull Material material) {
         CraftMetaItem meta = (CraftMetaItem) FactoryItemMaterialTest.factory.getItemMeta(material);
         if (meta == null) {
             assertThat(material, is(Material.AIR));
@@ -82,7 +83,7 @@ public class FactoryItemMaterialTest extends AbstractTestingBase {
 
     @ParameterizedTest
     @MethodSource("data")
-    public void asMetaFor(Material material) {
+    public void asMetaFor(@NotNull Material material) {
         final CraftMetaItem baseMeta = (CraftMetaItem) FactoryItemMaterialTest.factory.getItemMeta(material);
         if (baseMeta == null) {
             assertThat(material, is(Material.AIR));
@@ -110,7 +111,7 @@ public class FactoryItemMaterialTest extends AbstractTestingBase {
 
     @ParameterizedTest
     @MethodSource("data")
-    public void blankEqualities(Material material) {
+    public void blankEqualities(@NotNull Material material) {
         if (material == Material.AIR) {
             return;
         }
diff --git a/src/test/java/org/bukkit/craftbukkit/inventory/ItemMetaImplementationOverrideTest.java b/src/test/java/org/bukkit/craftbukkit/inventory/ItemMetaImplementationOverrideTest.java
index fb8f9c0eb3b6cce6d1a58063756180f068f350e3..de66b10fa0dfe132e9b48a600c50ee9d7689c309 100644
--- a/src/test/java/org/bukkit/craftbukkit/inventory/ItemMetaImplementationOverrideTest.java
+++ b/src/test/java/org/bukkit/craftbukkit/inventory/ItemMetaImplementationOverrideTest.java
@@ -3,6 +3,7 @@ package org.bukkit.craftbukkit.inventory;
 import org.bukkit.Material;
 import org.bukkit.configuration.serialization.DelegateDeserialization;
 import org.bukkit.craftbukkit.Overridden;
+import org.jetbrains.annotations.NotNull;
 import org.junit.jupiter.params.ParameterizedTest;
 import org.junit.jupiter.params.provider.MethodSource;
 
@@ -18,7 +19,7 @@ public class ItemMetaImplementationOverrideTest {
     static final Class<CraftMetaItem> parent = CraftMetaItem.class;
 
     @ParameterizedTest(name = "[{index}]:{1}")
-    public static List<Object[]> data() {
+    public static @NotNull List<Object[]> data() {
         final List<Object[]> testData = new ArrayList<Object[]>();
         List<Class<? extends CraftMetaItem>> classes = new ArrayList<Class<? extends CraftMetaItem>>();
 
@@ -43,7 +44,7 @@ public class ItemMetaImplementationOverrideTest {
                     new Object[] {
                         new Callable<Method>() {
                             @Override
-                            public Method call() throws Exception {
+                            public @NotNull Method call() throws Exception {
                                 return clazz.getDeclaredMethod(method.getName(), method.getParameterTypes());
                             }
                         },
@@ -70,7 +71,7 @@ public class ItemMetaImplementationOverrideTest {
 
     @ParameterizedTest
     @MethodSource("data")
-    public void testClass(Callable<?> test, String name) throws Throwable {
+    public void testClass(@NotNull Callable<?> test, String name) throws Throwable {
         assertThat(name, test.call(), is(not(nullValue())));
     }
 }
diff --git a/src/test/java/org/bukkit/craftbukkit/inventory/ItemMetaTest.java b/src/test/java/org/bukkit/craftbukkit/inventory/ItemMetaTest.java
index e79aec217840ddc917ada21a6d900261e3137d4b..7da84fa0e04b2a3fd92ae52b422dfa0fc5eb3ebd 100644
--- a/src/test/java/org/bukkit/craftbukkit/inventory/ItemMetaTest.java
+++ b/src/test/java/org/bukkit/craftbukkit/inventory/ItemMetaTest.java
@@ -58,6 +58,7 @@ import org.bukkit.potion.PotionData;
 import org.bukkit.potion.PotionEffectType;
 import org.bukkit.potion.PotionType;
 import org.bukkit.support.AbstractTestingBase;
+import org.jetbrains.annotations.NotNull;
 import org.junit.jupiter.api.Test;
 
 public class ItemMetaTest extends AbstractTestingBase {
@@ -105,7 +106,7 @@ public class ItemMetaTest extends AbstractTestingBase {
     }
 
     // Paper start
-    private void testItemMeta(ItemStack stack) {
+    private void testItemMeta(@NotNull ItemStack stack) {
         assertThat("Should not have ItemMeta", stack.hasItemMeta(), is(false));
 
         stack.setDurability((short) 0);
@@ -236,7 +237,8 @@ public class ItemMetaTest extends AbstractTestingBase {
     public void testEachExtraData() {
         final List<StackProvider> providers = Arrays.asList(
             new StackProvider(Material.WRITABLE_BOOK) {
-                @Override ItemStack operate(final ItemStack cleanStack) {
+                @Override
+                @NotNull ItemStack operate(final @NotNull ItemStack cleanStack) {
                     final BookMeta meta = (BookMeta) cleanStack.getItemMeta();
                     meta.setAuthor("Some author");
                     meta.setPages("Page 1", "Page 2");
@@ -246,7 +248,8 @@ public class ItemMetaTest extends AbstractTestingBase {
                 }
             },
             new StackProvider(Material.WRITTEN_BOOK) {
-                @Override ItemStack operate(final ItemStack cleanStack) {
+                @Override
+                @NotNull ItemStack operate(final @NotNull ItemStack cleanStack) {
                     final BookMeta meta = (BookMeta) cleanStack.getItemMeta();
                     meta.setAuthor("Some author");
                     meta.setPages("Page 1", "Page 2");
@@ -266,7 +269,8 @@ public class ItemMetaTest extends AbstractTestingBase {
             },
             */
             new StackProvider(Material.FILLED_MAP) {
-                @Override ItemStack operate(final ItemStack cleanStack) {
+                @Override
+                @NotNull ItemStack operate(final @NotNull ItemStack cleanStack) {
                     final MapMeta meta = (MapMeta) cleanStack.getItemMeta();
                     meta.setScaling(true);
                     cleanStack.setItemMeta(meta);
@@ -274,7 +278,8 @@ public class ItemMetaTest extends AbstractTestingBase {
                 }
             },
             new StackProvider(Material.LEATHER_BOOTS) {
-                @Override ItemStack operate(final ItemStack cleanStack) {
+                @Override
+                @NotNull ItemStack operate(final @NotNull ItemStack cleanStack) {
                     final LeatherArmorMeta meta = (LeatherArmorMeta) cleanStack.getItemMeta();
                     meta.setColor(Color.FUCHSIA);
                     cleanStack.setItemMeta(meta);
@@ -282,7 +287,8 @@ public class ItemMetaTest extends AbstractTestingBase {
                 }
             },
             new StackProvider(Material.POTION) {
-                @Override ItemStack operate(final ItemStack cleanStack) {
+                @Override
+                @NotNull ItemStack operate(final @NotNull ItemStack cleanStack) {
                     final PotionMeta meta = (PotionMeta) cleanStack.getItemMeta();
                     meta.setBasePotionData(new PotionData(PotionType.UNCRAFTABLE, false, false));
                     meta.addCustomEffect(PotionEffectType.CONFUSION.createEffect(1, 1), false);
@@ -291,7 +297,8 @@ public class ItemMetaTest extends AbstractTestingBase {
                 }
             },
             new StackProvider(Material.FIREWORK_ROCKET) {
-                @Override ItemStack operate(final ItemStack cleanStack) {
+                @Override
+                @NotNull ItemStack operate(final @NotNull ItemStack cleanStack) {
                     final FireworkMeta meta = (FireworkMeta) cleanStack.getItemMeta();
                     meta.addEffect(FireworkEffect.builder().withColor(Color.GREEN).withFade(Color.OLIVE).with(Type.BALL_LARGE).build());
                     cleanStack.setItemMeta(meta);
@@ -299,7 +306,8 @@ public class ItemMetaTest extends AbstractTestingBase {
                 }
             },
             new StackProvider(Material.ENCHANTED_BOOK) {
-                @Override ItemStack operate(final ItemStack cleanStack) {
+                @Override
+                @NotNull ItemStack operate(final @NotNull ItemStack cleanStack) {
                     final EnchantmentStorageMeta meta = (EnchantmentStorageMeta) cleanStack.getItemMeta();
                     meta.addStoredEnchant(Enchantment.ARROW_FIRE, 1, true);
                     cleanStack.setItemMeta(meta);
@@ -307,7 +315,8 @@ public class ItemMetaTest extends AbstractTestingBase {
                 }
             },
             new StackProvider(Material.FIREWORK_STAR) {
-                @Override ItemStack operate(final ItemStack cleanStack) {
+                @Override
+                @NotNull ItemStack operate(final @NotNull ItemStack cleanStack) {
                     final FireworkEffectMeta meta = (FireworkEffectMeta) cleanStack.getItemMeta();
                     meta.setEffect(FireworkEffect.builder().withColor(Color.MAROON, Color.BLACK).with(Type.CREEPER).withFlicker().build());
                     cleanStack.setItemMeta(meta);
@@ -315,7 +324,8 @@ public class ItemMetaTest extends AbstractTestingBase {
                 }
             },
             new StackProvider(Material.WHITE_BANNER) {
-                @Override ItemStack operate(ItemStack cleanStack) {
+                @Override
+                @NotNull ItemStack operate(@NotNull ItemStack cleanStack) {
                     final BannerMeta meta = (BannerMeta) cleanStack.getItemMeta();
                     meta.setBaseColor(DyeColor.CYAN);
                     meta.addPattern(new Pattern(DyeColor.WHITE, PatternType.BRICKS));
@@ -334,7 +344,8 @@ public class ItemMetaTest extends AbstractTestingBase {
             },
             */
             new StackProvider(Material.KNOWLEDGE_BOOK) {
-                @Override ItemStack operate(ItemStack cleanStack) {
+                @Override
+                @NotNull ItemStack operate(@NotNull ItemStack cleanStack) {
                     final KnowledgeBookMeta meta = (KnowledgeBookMeta) cleanStack.getItemMeta();
                     meta.addRecipe(new NamespacedKey("minecraft", "test"), new NamespacedKey("plugin", "test"));
                     cleanStack.setItemMeta(meta);
@@ -342,7 +353,8 @@ public class ItemMetaTest extends AbstractTestingBase {
                 }
             },
             new StackProvider(Material.TROPICAL_FISH_BUCKET) {
-                @Override ItemStack operate(ItemStack cleanStack) {
+                @Override
+                @NotNull ItemStack operate(@NotNull ItemStack cleanStack) {
                     final TropicalFishBucketMeta meta = (TropicalFishBucketMeta) cleanStack.getItemMeta();
                     meta.setBodyColor(DyeColor.ORANGE);
                     meta.setPatternColor(DyeColor.BLACK);
@@ -352,7 +364,8 @@ public class ItemMetaTest extends AbstractTestingBase {
                 }
             },
             new StackProvider(Material.AXOLOTL_BUCKET) {
-                @Override ItemStack operate(ItemStack cleanStack) {
+                @Override
+                @NotNull ItemStack operate(@NotNull ItemStack cleanStack) {
                      final AxolotlBucketMeta meta = (AxolotlBucketMeta) cleanStack.getItemMeta();
                      meta.setVariant(Axolotl.Variant.BLUE);
                      cleanStack.setItemMeta(meta);
@@ -360,7 +373,8 @@ public class ItemMetaTest extends AbstractTestingBase {
                 }
             },
             new StackProvider(Material.CROSSBOW) {
-                @Override ItemStack operate(ItemStack cleanStack) {
+                @Override
+                @NotNull ItemStack operate(@NotNull ItemStack cleanStack) {
                     final CrossbowMeta meta = (CrossbowMeta) cleanStack.getItemMeta();
                     meta.addChargedProjectile(new ItemStack(Material.ARROW));
                     cleanStack.setItemMeta(meta);
@@ -368,7 +382,8 @@ public class ItemMetaTest extends AbstractTestingBase {
                 }
             },
             new StackProvider(Material.ARMOR_STAND) {
-                @Override ItemStack operate(ItemStack cleanStack) {
+                @Override
+                @NotNull ItemStack operate(@NotNull ItemStack cleanStack) {
                     final CraftMetaArmorStand meta = (CraftMetaArmorStand) cleanStack.getItemMeta();
                     meta.entityTag = new CompoundTag();
                     meta.entityTag.putBoolean("Small", true);
@@ -378,7 +393,8 @@ public class ItemMetaTest extends AbstractTestingBase {
                 }
             },
             new StackProvider(Material.SUSPICIOUS_STEW) {
-                @Override ItemStack operate(ItemStack cleanStack) {
+                @Override
+                @NotNull ItemStack operate(@NotNull ItemStack cleanStack) {
                     final CraftMetaSuspiciousStew meta = ((CraftMetaSuspiciousStew) cleanStack.getItemMeta());
                     meta.addCustomEffect(PotionEffectType.CONFUSION.createEffect(1, 0), false);
                     cleanStack.setItemMeta(meta);
@@ -386,7 +402,8 @@ public class ItemMetaTest extends AbstractTestingBase {
                 }
             },
             new StackProvider(Material.ITEM_FRAME) {
-                @Override ItemStack operate(ItemStack cleanStack) {
+                @Override
+                @NotNull ItemStack operate(@NotNull ItemStack cleanStack) {
                     final CraftMetaEntityTag meta = ((CraftMetaEntityTag) cleanStack.getItemMeta());
                     meta.entityTag = new CompoundTag();
                     meta.entityTag.putBoolean("Invisible", true);
@@ -395,7 +412,8 @@ public class ItemMetaTest extends AbstractTestingBase {
                 }
             },
             new StackProvider(Material.COMPASS) {
-                @Override ItemStack operate(ItemStack cleanStack) {
+                @Override
+                @NotNull ItemStack operate(@NotNull ItemStack cleanStack) {
                     final CraftMetaCompass meta = ((CraftMetaCompass) cleanStack.getItemMeta());
                     meta.setLodestoneTracked(true);
                     cleanStack.setItemMeta(meta);
@@ -403,7 +421,8 @@ public class ItemMetaTest extends AbstractTestingBase {
                 }
             },
             new StackProvider(Material.BUNDLE) {
-                @Override ItemStack operate(ItemStack cleanStack) {
+                @Override
+                @NotNull ItemStack operate(@NotNull ItemStack cleanStack) {
                     final BundleMeta meta = (BundleMeta) cleanStack.getItemMeta();
                     meta.addItem(new ItemStack(Material.STONE));
                     cleanStack.setItemMeta(meta);
@@ -447,7 +466,7 @@ public class ItemMetaTest extends AbstractTestingBase {
         assertThat(itemMeta.getBlockData(Material.CHEST), is(CraftBlockData.newData(null, "minecraft:chest[waterlogged=true]")));
     }
 
-    private void downCastTest(final StackWrapper provider) {
+    private void downCastTest(final @NotNull StackWrapper provider) {
         final String name = provider.toString();
         final ItemStack blank = new ItemStack(Material.STONE);
         final ItemStack craftBlank = CraftItemStack.asCraftCopy(blank);
@@ -465,7 +484,7 @@ public class ItemMetaTest extends AbstractTestingBase {
         this.downCastTest(name, provider.stack(), craftBlank);
     }
 
-    private void downCastTest(final String name, final ItemStack stack, final ItemStack blank) {
+    private void downCastTest(final String name, final @NotNull ItemStack stack, final @NotNull ItemStack blank) {
         assertThat(name, stack, is(not(blank)));
         assertThat(name, stack.getItemMeta(), is(not(blank.getItemMeta())));
 
diff --git a/src/test/java/org/bukkit/craftbukkit/inventory/ItemStackBookTest.java b/src/test/java/org/bukkit/craftbukkit/inventory/ItemStackBookTest.java
index d9061c7ad9a8864cf0948567bb2681fb3ede6878..9eaf4243834ab77325024f59efd4e67c3452dd1f 100644
--- a/src/test/java/org/bukkit/craftbukkit/inventory/ItemStackBookTest.java
+++ b/src/test/java/org/bukkit/craftbukkit/inventory/ItemStackBookTest.java
@@ -4,6 +4,7 @@ import com.google.common.base.Joiner;
 import org.bukkit.Material;
 import org.bukkit.inventory.ItemStack;
 import org.bukkit.inventory.meta.BookMeta;
+import org.jetbrains.annotations.NotNull;
 import org.junit.jupiter.params.ParameterizedTest;
 
 import java.util.Arrays;
@@ -28,7 +29,7 @@ public class ItemStackBookTest extends ItemStackTest {
                 new Object[] {
                     new Operator() {
                         @Override
-                        public ItemStack operate(ItemStack cleanStack) {
+                        public @NotNull ItemStack operate(@NotNull ItemStack cleanStack) {
                             BookMeta meta = (BookMeta) cleanStack.getItemMeta();
                             meta.addPage("Page 1", "Page 2");
                             cleanStack.setItemMeta(meta);
@@ -46,7 +47,7 @@ public class ItemStackBookTest extends ItemStackTest {
                 new Object[] {
                     new Operator() {
                         @Override
-                        public ItemStack operate(ItemStack cleanStack) {
+                        public @NotNull ItemStack operate(@NotNull ItemStack cleanStack) {
                             BookMeta meta = (BookMeta) cleanStack.getItemMeta();
                             meta.addPage("Page 1", "Page 2");
                             cleanStack.setItemMeta(meta);
@@ -55,7 +56,7 @@ public class ItemStackBookTest extends ItemStackTest {
                     },
                     new Operator() {
                         @Override
-                        public ItemStack operate(ItemStack cleanStack) {
+                        public @NotNull ItemStack operate(@NotNull ItemStack cleanStack) {
                             cleanStack.setItemMeta(cleanStack.getItemMeta());
                             return cleanStack;
                         }
@@ -65,7 +66,7 @@ public class ItemStackBookTest extends ItemStackTest {
                 new Object[] {
                     new Operator() {
                         @Override
-                        public ItemStack operate(ItemStack cleanStack) {
+                        public @NotNull ItemStack operate(@NotNull ItemStack cleanStack) {
                             BookMeta meta = (BookMeta) cleanStack.getItemMeta();
                             meta.addPage("Page 1", "Page 2");
                             cleanStack.setItemMeta(meta);
@@ -74,7 +75,7 @@ public class ItemStackBookTest extends ItemStackTest {
                     },
                     new Operator() {
                         @Override
-                        public ItemStack operate(ItemStack cleanStack) {
+                        public @NotNull ItemStack operate(@NotNull ItemStack cleanStack) {
                             BookMeta meta = (BookMeta) cleanStack.getItemMeta();
                             meta.addPage("Page 2", "Page 1");
                             cleanStack.setItemMeta(meta);
@@ -86,7 +87,7 @@ public class ItemStackBookTest extends ItemStackTest {
                 new Object[] {
                     new Operator() {
                         @Override
-                        public ItemStack operate(ItemStack cleanStack) {
+                        public @NotNull ItemStack operate(@NotNull ItemStack cleanStack) {
                             BookMeta meta = (BookMeta) cleanStack.getItemMeta();
                             meta.addPage("Page 1", "Page 2");
                             cleanStack.setItemMeta(meta);
@@ -95,7 +96,7 @@ public class ItemStackBookTest extends ItemStackTest {
                     },
                     new Operator() {
                         @Override
-                        public ItemStack operate(ItemStack cleanStack) {
+                        public @NotNull ItemStack operate(@NotNull ItemStack cleanStack) {
                             BookMeta meta = (BookMeta) cleanStack.getItemMeta();
                             meta.addPage("Page 1");
                             cleanStack.setItemMeta(meta);
@@ -109,7 +110,7 @@ public class ItemStackBookTest extends ItemStackTest {
                 new Object[] {
                     new Operator() {
                         @Override
-                        public ItemStack operate(ItemStack cleanStack) {
+                        public @NotNull ItemStack operate(@NotNull ItemStack cleanStack) {
                             BookMeta meta = (BookMeta) cleanStack.getItemMeta();
                             meta.setAuthor("AnAuthor");
                             cleanStack.setItemMeta(meta);
@@ -127,7 +128,7 @@ public class ItemStackBookTest extends ItemStackTest {
                 new Object[] {
                     new Operator() {
                         @Override
-                        public ItemStack operate(ItemStack cleanStack) {
+                        public @NotNull ItemStack operate(@NotNull ItemStack cleanStack) {
                             BookMeta meta = (BookMeta) cleanStack.getItemMeta();
                             meta.setAuthor("AnAuthor");
                             cleanStack.setItemMeta(meta);
@@ -136,7 +137,7 @@ public class ItemStackBookTest extends ItemStackTest {
                     },
                     new Operator() {
                         @Override
-                        public ItemStack operate(ItemStack cleanStack) {
+                        public @NotNull ItemStack operate(@NotNull ItemStack cleanStack) {
                             cleanStack.setItemMeta(cleanStack.getItemMeta());
                             return cleanStack;
                         }
@@ -146,7 +147,7 @@ public class ItemStackBookTest extends ItemStackTest {
                 new Object[] {
                     new Operator() {
                         @Override
-                        public ItemStack operate(ItemStack cleanStack) {
+                        public @NotNull ItemStack operate(@NotNull ItemStack cleanStack) {
                             BookMeta meta = (BookMeta) cleanStack.getItemMeta();
                             meta.setAuthor("AnAuthor");
                             cleanStack.setItemMeta(meta);
@@ -155,7 +156,7 @@ public class ItemStackBookTest extends ItemStackTest {
                     },
                     new Operator() {
                         @Override
-                        public ItemStack operate(ItemStack cleanStack) {
+                        public @NotNull ItemStack operate(@NotNull ItemStack cleanStack) {
                             BookMeta meta = (BookMeta) cleanStack.getItemMeta();
                             meta.setAuthor("AnotherAuthor");
                             cleanStack.setItemMeta(meta);
@@ -169,7 +170,7 @@ public class ItemStackBookTest extends ItemStackTest {
                 new Object[] {
                     new Operator() {
                         @Override
-                        public ItemStack operate(ItemStack cleanStack) {
+                        public @NotNull ItemStack operate(@NotNull ItemStack cleanStack) {
                             BookMeta meta = (BookMeta) cleanStack.getItemMeta();
                             meta.setTitle("Some title");
                             cleanStack.setItemMeta(meta);
@@ -187,7 +188,7 @@ public class ItemStackBookTest extends ItemStackTest {
                 new Object[] {
                     new Operator() {
                         @Override
-                        public ItemStack operate(ItemStack cleanStack) {
+                        public @NotNull ItemStack operate(@NotNull ItemStack cleanStack) {
                             BookMeta meta = (BookMeta) cleanStack.getItemMeta();
                             meta.setTitle("Some title");
                             cleanStack.setItemMeta(meta);
@@ -196,7 +197,7 @@ public class ItemStackBookTest extends ItemStackTest {
                     },
                     new Operator() {
                         @Override
-                        public ItemStack operate(ItemStack cleanStack) {
+                        public @NotNull ItemStack operate(@NotNull ItemStack cleanStack) {
                             cleanStack.setItemMeta(cleanStack.getItemMeta());
                             return cleanStack;
                         }
@@ -206,7 +207,7 @@ public class ItemStackBookTest extends ItemStackTest {
                 new Object[] {
                     new Operator() {
                         @Override
-                        public ItemStack operate(ItemStack cleanStack) {
+                        public @NotNull ItemStack operate(@NotNull ItemStack cleanStack) {
                             BookMeta meta = (BookMeta) cleanStack.getItemMeta();
                             meta.setTitle("Some title");
                             cleanStack.setItemMeta(meta);
@@ -215,7 +216,7 @@ public class ItemStackBookTest extends ItemStackTest {
                     },
                     new Operator() {
                         @Override
-                        public ItemStack operate(ItemStack cleanStack) {
+                        public @NotNull ItemStack operate(@NotNull ItemStack cleanStack) {
                             BookMeta meta = (BookMeta) cleanStack.getItemMeta();
                             meta.setTitle("Different title");
                             cleanStack.setItemMeta(meta);
diff --git a/src/test/java/org/bukkit/craftbukkit/inventory/ItemStackEnchantStorageTest.java b/src/test/java/org/bukkit/craftbukkit/inventory/ItemStackEnchantStorageTest.java
index 0130c964fb00e44ee491758beca9e9bd7f78c29e..15de6ed543385818982ff62d1b6cf38d1bcd88bb 100644
--- a/src/test/java/org/bukkit/craftbukkit/inventory/ItemStackEnchantStorageTest.java
+++ b/src/test/java/org/bukkit/craftbukkit/inventory/ItemStackEnchantStorageTest.java
@@ -5,6 +5,7 @@ import org.bukkit.Material;
 import org.bukkit.enchantments.Enchantment;
 import org.bukkit.inventory.ItemStack;
 import org.bukkit.inventory.meta.EnchantmentStorageMeta;
+import org.jetbrains.annotations.NotNull;
 import org.junit.jupiter.params.ParameterizedTest;
 
 import java.util.Arrays;
@@ -29,7 +30,7 @@ public class ItemStackEnchantStorageTest extends ItemStackTest {
                 new Object[] {
                     new Operator() {
                         @Override
-                        public ItemStack operate(ItemStack cleanStack) {
+                        public @NotNull ItemStack operate(@NotNull ItemStack cleanStack) {
                             EnchantmentStorageMeta meta = (EnchantmentStorageMeta) cleanStack.getItemMeta();
                             meta.addStoredEnchant(Enchantment.DURABILITY, 1, true);
                             cleanStack.setItemMeta(meta);
@@ -38,7 +39,7 @@ public class ItemStackEnchantStorageTest extends ItemStackTest {
                     },
                     new Operator() {
                         @Override
-                        public ItemStack operate(ItemStack cleanStack) {
+                        public @NotNull ItemStack operate(@NotNull ItemStack cleanStack) {
                             EnchantmentStorageMeta meta = (EnchantmentStorageMeta) cleanStack.getItemMeta();
                             cleanStack.setItemMeta(meta);
                             return cleanStack;
@@ -49,7 +50,7 @@ public class ItemStackEnchantStorageTest extends ItemStackTest {
                 new Object[] {
                     new Operator() {
                         @Override
-                        public ItemStack operate(ItemStack cleanStack) {
+                        public @NotNull ItemStack operate(@NotNull ItemStack cleanStack) {
                             EnchantmentStorageMeta meta = (EnchantmentStorageMeta) cleanStack.getItemMeta();
                             meta.addStoredEnchant(Enchantment.KNOCKBACK, 1, true);
                             cleanStack.setItemMeta(meta);
@@ -67,7 +68,7 @@ public class ItemStackEnchantStorageTest extends ItemStackTest {
                 new Object[] {
                     new Operator() {
                         @Override
-                        public ItemStack operate(ItemStack cleanStack) {
+                        public @NotNull ItemStack operate(@NotNull ItemStack cleanStack) {
                             EnchantmentStorageMeta meta = (EnchantmentStorageMeta) cleanStack.getItemMeta();
                             meta.addStoredEnchant(Enchantment.DAMAGE_UNDEAD, 1, true);
                             cleanStack.setItemMeta(meta);
@@ -76,7 +77,7 @@ public class ItemStackEnchantStorageTest extends ItemStackTest {
                     },
                     new Operator() {
                         @Override
-                        public ItemStack operate(ItemStack cleanStack) {
+                        public @NotNull ItemStack operate(@NotNull ItemStack cleanStack) {
                             EnchantmentStorageMeta meta = (EnchantmentStorageMeta) cleanStack.getItemMeta();
                             meta.addStoredEnchant(Enchantment.DAMAGE_UNDEAD, 1, true);
                             meta.addStoredEnchant(Enchantment.FIRE_ASPECT, 1, true);
@@ -89,7 +90,7 @@ public class ItemStackEnchantStorageTest extends ItemStackTest {
                 new Object[] {
                     new Operator() {
                         @Override
-                        public ItemStack operate(ItemStack cleanStack) {
+                        public @NotNull ItemStack operate(@NotNull ItemStack cleanStack) {
                             EnchantmentStorageMeta meta = (EnchantmentStorageMeta) cleanStack.getItemMeta();
                             meta.addStoredEnchant(Enchantment.PROTECTION_FIRE, 1, true);
                             cleanStack.setItemMeta(meta);
@@ -98,7 +99,7 @@ public class ItemStackEnchantStorageTest extends ItemStackTest {
                     },
                     new Operator() {
                         @Override
-                        public ItemStack operate(ItemStack cleanStack) {
+                        public @NotNull ItemStack operate(@NotNull ItemStack cleanStack) {
                             EnchantmentStorageMeta meta = (EnchantmentStorageMeta) cleanStack.getItemMeta();
                             meta.addEnchant(Enchantment.PROTECTION_FIRE, 2, true);
                             cleanStack.setItemMeta(meta);
diff --git a/src/test/java/org/bukkit/craftbukkit/inventory/ItemStackFireworkChargeTest.java b/src/test/java/org/bukkit/craftbukkit/inventory/ItemStackFireworkChargeTest.java
index 5d6230f81ee6ad91a4cb1c4d31b4c5f5c2025996..34f3f55b1db2b103cb0028a5e9ed0eb5b0720ea6 100644
--- a/src/test/java/org/bukkit/craftbukkit/inventory/ItemStackFireworkChargeTest.java
+++ b/src/test/java/org/bukkit/craftbukkit/inventory/ItemStackFireworkChargeTest.java
@@ -7,6 +7,7 @@ import org.bukkit.FireworkEffect.Type;
 import org.bukkit.Material;
 import org.bukkit.inventory.ItemStack;
 import org.bukkit.inventory.meta.FireworkEffectMeta;
+import org.jetbrains.annotations.NotNull;
 import org.junit.jupiter.params.ParameterizedTest;
 
 import java.util.Arrays;
@@ -31,7 +32,7 @@ public class ItemStackFireworkChargeTest extends ItemStackTest {
                 new Object[] {
                     new Operator() {
                         @Override
-                        public ItemStack operate(ItemStack cleanStack) {
+                        public @NotNull ItemStack operate(@NotNull ItemStack cleanStack) {
                             FireworkEffectMeta meta = (FireworkEffectMeta) cleanStack.getItemMeta();
                             meta.setEffect(FireworkEffect.builder().withColor(Color.WHITE).build());
                             cleanStack.setItemMeta(meta);
@@ -40,7 +41,7 @@ public class ItemStackFireworkChargeTest extends ItemStackTest {
                     },
                     new Operator() {
                         @Override
-                        public ItemStack operate(ItemStack cleanStack) {
+                        public @NotNull ItemStack operate(@NotNull ItemStack cleanStack) {
                             FireworkEffectMeta meta = (FireworkEffectMeta) cleanStack.getItemMeta();
                             meta.setEffect(FireworkEffect.builder().withColor(Color.BLACK).build());
                             cleanStack.setItemMeta(meta);
@@ -52,7 +53,7 @@ public class ItemStackFireworkChargeTest extends ItemStackTest {
                 new Object[] {
                     new Operator() {
                         @Override
-                        public ItemStack operate(ItemStack cleanStack) {
+                        public @NotNull ItemStack operate(@NotNull ItemStack cleanStack) {
                             FireworkEffectMeta meta = (FireworkEffectMeta) cleanStack.getItemMeta();
                             meta.setEffect(FireworkEffect.builder().withColor(Color.WHITE).with(Type.CREEPER).build());
                             cleanStack.setItemMeta(meta);
@@ -61,7 +62,7 @@ public class ItemStackFireworkChargeTest extends ItemStackTest {
                     },
                     new Operator() {
                         @Override
-                        public ItemStack operate(ItemStack cleanStack) {
+                        public @NotNull ItemStack operate(@NotNull ItemStack cleanStack) {
                             FireworkEffectMeta meta = (FireworkEffectMeta) cleanStack.getItemMeta();
                             meta.setEffect(FireworkEffect.builder().withColor(Color.WHITE).with(Type.BURST).build());
                             cleanStack.setItemMeta(meta);
@@ -73,7 +74,7 @@ public class ItemStackFireworkChargeTest extends ItemStackTest {
                 new Object[] {
                     new Operator() {
                         @Override
-                        public ItemStack operate(ItemStack cleanStack) {
+                        public @NotNull ItemStack operate(@NotNull ItemStack cleanStack) {
                             FireworkEffectMeta meta = (FireworkEffectMeta) cleanStack.getItemMeta();
                             meta.setEffect(FireworkEffect.builder().withColor(Color.WHITE).withFade(Color.BLUE).build());
                             cleanStack.setItemMeta(meta);
@@ -82,7 +83,7 @@ public class ItemStackFireworkChargeTest extends ItemStackTest {
                     },
                     new Operator() {
                         @Override
-                        public ItemStack operate(ItemStack cleanStack) {
+                        public @NotNull ItemStack operate(@NotNull ItemStack cleanStack) {
                             FireworkEffectMeta meta = (FireworkEffectMeta) cleanStack.getItemMeta();
                             meta.setEffect(FireworkEffect.builder().withColor(Color.WHITE).withFade(Color.RED).build());
                             cleanStack.setItemMeta(meta);
@@ -94,7 +95,7 @@ public class ItemStackFireworkChargeTest extends ItemStackTest {
                 new Object[] {
                     new Operator() {
                         @Override
-                        public ItemStack operate(ItemStack cleanStack) {
+                        public @NotNull ItemStack operate(@NotNull ItemStack cleanStack) {
                             FireworkEffectMeta meta = (FireworkEffectMeta) cleanStack.getItemMeta();
                             meta.setEffect(FireworkEffect.builder().withColor(Color.WHITE).withFlicker().build());
                             cleanStack.setItemMeta(meta);
@@ -103,7 +104,7 @@ public class ItemStackFireworkChargeTest extends ItemStackTest {
                     },
                     new Operator() {
                         @Override
-                        public ItemStack operate(ItemStack cleanStack) {
+                        public @NotNull ItemStack operate(@NotNull ItemStack cleanStack) {
                             FireworkEffectMeta meta = (FireworkEffectMeta) cleanStack.getItemMeta();
                             cleanStack.setItemMeta(meta);
                             return cleanStack;
@@ -114,7 +115,7 @@ public class ItemStackFireworkChargeTest extends ItemStackTest {
                 new Object[] {
                     new Operator() {
                         @Override
-                        public ItemStack operate(ItemStack cleanStack) {
+                        public @NotNull ItemStack operate(@NotNull ItemStack cleanStack) {
                             FireworkEffectMeta meta = (FireworkEffectMeta) cleanStack.getItemMeta();
                             meta.setEffect(FireworkEffect.builder().withColor(Color.WHITE).withTrail().build());
                             cleanStack.setItemMeta(meta);
diff --git a/src/test/java/org/bukkit/craftbukkit/inventory/ItemStackFireworkTest.java b/src/test/java/org/bukkit/craftbukkit/inventory/ItemStackFireworkTest.java
index 3b303a5906e3d74613dc62cb6b6bdd7918e528b5..a9c2768a904f2e5da237ba1dfdd2c9978453ac1c 100644
--- a/src/test/java/org/bukkit/craftbukkit/inventory/ItemStackFireworkTest.java
+++ b/src/test/java/org/bukkit/craftbukkit/inventory/ItemStackFireworkTest.java
@@ -7,6 +7,7 @@ import org.bukkit.FireworkEffect.Type;
 import org.bukkit.Material;
 import org.bukkit.inventory.ItemStack;
 import org.bukkit.inventory.meta.FireworkMeta;
+import org.jetbrains.annotations.NotNull;
 import org.junit.jupiter.params.ParameterizedTest;
 
 import java.util.Arrays;
@@ -31,7 +32,7 @@ public class ItemStackFireworkTest extends ItemStackTest {
                 new Object[] {
                     new Operator() {
                         @Override
-                        public ItemStack operate(ItemStack cleanStack) {
+                        public @NotNull ItemStack operate(@NotNull ItemStack cleanStack) {
                             FireworkMeta meta = (FireworkMeta) cleanStack.getItemMeta();
                             meta.addEffect(FireworkEffect.builder().withColor(Color.WHITE).build());
                             cleanStack.setItemMeta(meta);
@@ -40,7 +41,7 @@ public class ItemStackFireworkTest extends ItemStackTest {
                     },
                     new Operator() {
                         @Override
-                        public ItemStack operate(ItemStack cleanStack) {
+                        public @NotNull ItemStack operate(@NotNull ItemStack cleanStack) {
                             FireworkMeta meta = (FireworkMeta) cleanStack.getItemMeta();
                             meta.addEffect(FireworkEffect.builder().withColor(Color.BLACK).build());
                             meta.addEffect(FireworkEffect.builder().withColor(Color.GREEN).build());
@@ -53,7 +54,7 @@ public class ItemStackFireworkTest extends ItemStackTest {
                 new Object[] {
                     new Operator() {
                         @Override
-                        public ItemStack operate(ItemStack cleanStack) {
+                        public @NotNull ItemStack operate(@NotNull ItemStack cleanStack) {
                             FireworkMeta meta = (FireworkMeta) cleanStack.getItemMeta();
                             meta.addEffect(FireworkEffect.builder().withColor(Color.WHITE).with(Type.CREEPER).build());
                             cleanStack.setItemMeta(meta);
@@ -62,7 +63,7 @@ public class ItemStackFireworkTest extends ItemStackTest {
                     },
                     new Operator() {
                         @Override
-                        public ItemStack operate(ItemStack cleanStack) {
+                        public @NotNull ItemStack operate(@NotNull ItemStack cleanStack) {
                             FireworkMeta meta = (FireworkMeta) cleanStack.getItemMeta();
                             meta.addEffect(FireworkEffect.builder().withColor(Color.WHITE).with(Type.BURST).build());
                             cleanStack.setItemMeta(meta);
@@ -74,7 +75,7 @@ public class ItemStackFireworkTest extends ItemStackTest {
                 new Object[] {
                     new Operator() {
                         @Override
-                        public ItemStack operate(ItemStack cleanStack) {
+                        public @NotNull ItemStack operate(@NotNull ItemStack cleanStack) {
                             FireworkMeta meta = (FireworkMeta) cleanStack.getItemMeta();
                             meta.addEffect(FireworkEffect.builder().withColor(Color.WHITE).withFade(Color.BLUE).build());
                             cleanStack.setItemMeta(meta);
@@ -83,7 +84,7 @@ public class ItemStackFireworkTest extends ItemStackTest {
                     },
                     new Operator() {
                         @Override
-                        public ItemStack operate(ItemStack cleanStack) {
+                        public @NotNull ItemStack operate(@NotNull ItemStack cleanStack) {
                             FireworkMeta meta = (FireworkMeta) cleanStack.getItemMeta();
                             meta.addEffect(FireworkEffect.builder().withColor(Color.WHITE).withFade(Color.RED).build());
                             cleanStack.setItemMeta(meta);
@@ -95,7 +96,7 @@ public class ItemStackFireworkTest extends ItemStackTest {
                 new Object[] {
                     new Operator() {
                         @Override
-                        public ItemStack operate(ItemStack cleanStack) {
+                        public @NotNull ItemStack operate(@NotNull ItemStack cleanStack) {
                             FireworkMeta meta = (FireworkMeta) cleanStack.getItemMeta();
                             meta.addEffect(FireworkEffect.builder().withColor(Color.WHITE).withFlicker().build());
                             cleanStack.setItemMeta(meta);
@@ -104,7 +105,7 @@ public class ItemStackFireworkTest extends ItemStackTest {
                     },
                     new Operator() {
                         @Override
-                        public ItemStack operate(ItemStack cleanStack) {
+                        public @NotNull ItemStack operate(@NotNull ItemStack cleanStack) {
                             FireworkMeta meta = (FireworkMeta) cleanStack.getItemMeta();
                             cleanStack.setItemMeta(meta);
                             return cleanStack;
@@ -115,7 +116,7 @@ public class ItemStackFireworkTest extends ItemStackTest {
                 new Object[] {
                     new Operator() {
                         @Override
-                        public ItemStack operate(ItemStack cleanStack) {
+                        public @NotNull ItemStack operate(@NotNull ItemStack cleanStack) {
                             FireworkMeta meta = (FireworkMeta) cleanStack.getItemMeta();
                             meta.addEffect(FireworkEffect.builder().withColor(Color.WHITE).withTrail().build());
                             cleanStack.setItemMeta(meta);
@@ -135,7 +136,7 @@ public class ItemStackFireworkTest extends ItemStackTest {
                 new Object[] {
                     new Operator() {
                         @Override
-                        public ItemStack operate(ItemStack cleanStack) {
+                        public @NotNull ItemStack operate(@NotNull ItemStack cleanStack) {
                             FireworkMeta meta = (FireworkMeta) cleanStack.getItemMeta();
                             meta.setPower(127);
                             cleanStack.setItemMeta(meta);
@@ -144,7 +145,7 @@ public class ItemStackFireworkTest extends ItemStackTest {
                     },
                     new Operator() {
                         @Override
-                        public ItemStack operate(ItemStack cleanStack) {
+                        public @NotNull ItemStack operate(@NotNull ItemStack cleanStack) {
                             FireworkMeta meta = (FireworkMeta) cleanStack.getItemMeta();
                             meta.setPower(100);
                             cleanStack.setItemMeta(meta);
@@ -156,7 +157,7 @@ public class ItemStackFireworkTest extends ItemStackTest {
                 new Object[] {
                     new Operator() {
                         @Override
-                        public ItemStack operate(ItemStack cleanStack) {
+                        public @NotNull ItemStack operate(@NotNull ItemStack cleanStack) {
                             FireworkMeta meta = (FireworkMeta) cleanStack.getItemMeta();
                             meta.setPower(42);
                             cleanStack.setItemMeta(meta);
@@ -165,7 +166,7 @@ public class ItemStackFireworkTest extends ItemStackTest {
                     },
                     new Operator() {
                         @Override
-                        public ItemStack operate(ItemStack cleanStack) {
+                        public @NotNull ItemStack operate(@NotNull ItemStack cleanStack) {
                             FireworkMeta meta = (FireworkMeta) cleanStack.getItemMeta();
                             cleanStack.setItemMeta(meta);
                             return cleanStack;
@@ -176,7 +177,7 @@ public class ItemStackFireworkTest extends ItemStackTest {
                 new Object[] {
                     new Operator() {
                         @Override
-                        public ItemStack operate(ItemStack cleanStack) {
+                        public @NotNull ItemStack operate(@NotNull ItemStack cleanStack) {
                             FireworkMeta meta = (FireworkMeta) cleanStack.getItemMeta();
                             meta.setPower(10);
                             cleanStack.setItemMeta(meta);
diff --git a/src/test/java/org/bukkit/craftbukkit/inventory/ItemStackLeatherTest.java b/src/test/java/org/bukkit/craftbukkit/inventory/ItemStackLeatherTest.java
index 90cf3927db93963949f28c461a1548b7d91cd287..4956d77940303519dae849ee098ba1bc70d7cbd4 100644
--- a/src/test/java/org/bukkit/craftbukkit/inventory/ItemStackLeatherTest.java
+++ b/src/test/java/org/bukkit/craftbukkit/inventory/ItemStackLeatherTest.java
@@ -5,6 +5,7 @@ import org.bukkit.Color;
 import org.bukkit.Material;
 import org.bukkit.inventory.ItemStack;
 import org.bukkit.inventory.meta.LeatherArmorMeta;
+import org.jetbrains.annotations.NotNull;
 import org.junit.jupiter.params.ParameterizedTest;
 
 import java.util.Arrays;
@@ -29,7 +30,7 @@ public class ItemStackLeatherTest extends ItemStackTest {
                 new Object[] {
                     new Operator() {
                         @Override
-                        public ItemStack operate(ItemStack cleanStack) {
+                        public @NotNull ItemStack operate(@NotNull ItemStack cleanStack) {
                             LeatherArmorMeta meta = (LeatherArmorMeta) cleanStack.getItemMeta();
                             meta.setColor(Color.FUCHSIA);
                             cleanStack.setItemMeta(meta);
@@ -47,7 +48,7 @@ public class ItemStackLeatherTest extends ItemStackTest {
                 new Object[] {
                     new Operator() {
                         @Override
-                        public ItemStack operate(ItemStack cleanStack) {
+                        public @NotNull ItemStack operate(@NotNull ItemStack cleanStack) {
                             LeatherArmorMeta meta = (LeatherArmorMeta) cleanStack.getItemMeta();
                             meta.setColor(Color.GRAY);
                             cleanStack.setItemMeta(meta);
@@ -56,7 +57,7 @@ public class ItemStackLeatherTest extends ItemStackTest {
                     },
                     new Operator() {
                         @Override
-                        public ItemStack operate(ItemStack cleanStack) {
+                        public @NotNull ItemStack operate(@NotNull ItemStack cleanStack) {
                             LeatherArmorMeta meta = (LeatherArmorMeta) cleanStack.getItemMeta();
                             cleanStack.setItemMeta(meta);
                             return cleanStack;
@@ -67,7 +68,7 @@ public class ItemStackLeatherTest extends ItemStackTest {
                 new Object[] {
                     new Operator() {
                         @Override
-                        public ItemStack operate(ItemStack cleanStack) {
+                        public @NotNull ItemStack operate(@NotNull ItemStack cleanStack) {
                             LeatherArmorMeta meta = (LeatherArmorMeta) cleanStack.getItemMeta();
                             meta.setColor(Color.MAROON);
                             cleanStack.setItemMeta(meta);
@@ -76,7 +77,7 @@ public class ItemStackLeatherTest extends ItemStackTest {
                     },
                     new Operator() {
                         @Override
-                        public ItemStack operate(ItemStack cleanStack) {
+                        public @NotNull ItemStack operate(@NotNull ItemStack cleanStack) {
                             LeatherArmorMeta meta = (LeatherArmorMeta) cleanStack.getItemMeta();
                             meta.setColor(Color.ORANGE);
                             cleanStack.setItemMeta(meta);
diff --git a/src/test/java/org/bukkit/craftbukkit/inventory/ItemStackLoreEnchantmentTest.java b/src/test/java/org/bukkit/craftbukkit/inventory/ItemStackLoreEnchantmentTest.java
index a2dc8fd068a8cb9f2060cecbc123a0800bc3d305..4f4a0899611a9ca6fa7b69d95c8c7f6c14a6f067 100644
--- a/src/test/java/org/bukkit/craftbukkit/inventory/ItemStackLoreEnchantmentTest.java
+++ b/src/test/java/org/bukkit/craftbukkit/inventory/ItemStackLoreEnchantmentTest.java
@@ -5,6 +5,7 @@ import org.bukkit.enchantments.Enchantment;
 import org.bukkit.inventory.ItemStack;
 import org.bukkit.inventory.meta.ItemMeta;
 import org.bukkit.inventory.meta.Repairable;
+import org.jetbrains.annotations.NotNull;
 import org.junit.jupiter.params.ParameterizedTest;
 
 import java.util.Arrays;
@@ -28,7 +29,7 @@ public class ItemStackLoreEnchantmentTest extends ItemStackTest {
                 new Object[] {
                     new Operator() {
                         @Override
-                        public ItemStack operate(ItemStack cleanStack) {
+                        public @NotNull ItemStack operate(@NotNull ItemStack cleanStack) {
                             ItemMeta meta = cleanStack.getItemMeta();
                             meta.setLore(Arrays.asList("First Lore", "Second Lore"));
                             cleanStack.setItemMeta(meta);
@@ -46,7 +47,7 @@ public class ItemStackLoreEnchantmentTest extends ItemStackTest {
                 new Object[] {
                     new Operator() {
                         @Override
-                        public ItemStack operate(ItemStack cleanStack) {
+                        public @NotNull ItemStack operate(@NotNull ItemStack cleanStack) {
                             ItemMeta meta = cleanStack.getItemMeta();
                             meta.setLore(Arrays.asList("Some lore"));
                             cleanStack.setItemMeta(meta);
@@ -55,7 +56,7 @@ public class ItemStackLoreEnchantmentTest extends ItemStackTest {
                     },
                     new Operator() {
                         @Override
-                        public ItemStack operate(ItemStack cleanStack) {
+                        public @NotNull ItemStack operate(@NotNull ItemStack cleanStack) {
                             ItemMeta meta = cleanStack.getItemMeta();
                             cleanStack.setItemMeta(meta);
                             return cleanStack;
@@ -66,7 +67,7 @@ public class ItemStackLoreEnchantmentTest extends ItemStackTest {
                 new Object[] {
                     new Operator() {
                         @Override
-                        public ItemStack operate(ItemStack cleanStack) {
+                        public @NotNull ItemStack operate(@NotNull ItemStack cleanStack) {
                             ItemMeta meta = cleanStack.getItemMeta();
                             meta.setLore(Arrays.asList("Some more lore", "Another lore"));
                             cleanStack.setItemMeta(meta);
@@ -75,7 +76,7 @@ public class ItemStackLoreEnchantmentTest extends ItemStackTest {
                     },
                     new Operator() {
                         @Override
-                        public ItemStack operate(ItemStack cleanStack) {
+                        public @NotNull ItemStack operate(@NotNull ItemStack cleanStack) {
                             ItemMeta meta = cleanStack.getItemMeta();
                             meta.setLore(Arrays.asList("Some more lore"));
                             cleanStack.setItemMeta(meta);
@@ -89,7 +90,7 @@ public class ItemStackLoreEnchantmentTest extends ItemStackTest {
                 new Object[] {
                     new Operator() {
                         @Override
-                        public ItemStack operate(ItemStack cleanStack) {
+                        public @NotNull ItemStack operate(@NotNull ItemStack cleanStack) {
                             ItemMeta meta = cleanStack.getItemMeta();
                             meta.setDisplayName("TestItemName");
                             cleanStack.setItemMeta(meta);
@@ -107,7 +108,7 @@ public class ItemStackLoreEnchantmentTest extends ItemStackTest {
                 new Object[] {
                     new Operator() {
                         @Override
-                        public ItemStack operate(ItemStack cleanStack) {
+                        public @NotNull ItemStack operate(@NotNull ItemStack cleanStack) {
                             ItemMeta meta = cleanStack.getItemMeta();
                             meta.setDisplayName("AnotherItemName");
                             cleanStack.setItemMeta(meta);
@@ -116,7 +117,7 @@ public class ItemStackLoreEnchantmentTest extends ItemStackTest {
                     },
                     new Operator() {
                         @Override
-                        public ItemStack operate(ItemStack cleanStack) {
+                        public @NotNull ItemStack operate(@NotNull ItemStack cleanStack) {
                             ItemMeta meta = cleanStack.getItemMeta();
                             cleanStack.setItemMeta(meta);
                             return cleanStack;
@@ -127,7 +128,7 @@ public class ItemStackLoreEnchantmentTest extends ItemStackTest {
                 new Object[] {
                     new Operator() {
                         @Override
-                        public ItemStack operate(ItemStack cleanStack) {
+                        public @NotNull ItemStack operate(@NotNull ItemStack cleanStack) {
                             ItemMeta meta = cleanStack.getItemMeta();
                             meta.setDisplayName("The original ItemName");
                             cleanStack.setItemMeta(meta);
@@ -136,7 +137,7 @@ public class ItemStackLoreEnchantmentTest extends ItemStackTest {
                     },
                     new Operator() {
                         @Override
-                        public ItemStack operate(ItemStack cleanStack) {
+                        public @NotNull ItemStack operate(@NotNull ItemStack cleanStack) {
                             ItemMeta meta = cleanStack.getItemMeta();
                             meta.setDisplayName("The other name");
                             cleanStack.setItemMeta(meta);
@@ -150,7 +151,7 @@ public class ItemStackLoreEnchantmentTest extends ItemStackTest {
                 new Object[] {
                     new Operator() {
                         @Override
-                        public ItemStack operate(ItemStack cleanStack) {
+                        public @NotNull ItemStack operate(@NotNull ItemStack cleanStack) {
                             cleanStack.addUnsafeEnchantment(Enchantment.DIG_SPEED, 2);
                             return cleanStack;
                         }
@@ -166,14 +167,14 @@ public class ItemStackLoreEnchantmentTest extends ItemStackTest {
                 new Object[] {
                     new Operator() {
                         @Override
-                        public ItemStack operate(ItemStack cleanStack) {
+                        public @NotNull ItemStack operate(@NotNull ItemStack cleanStack) {
                             cleanStack.addUnsafeEnchantment(Enchantment.OXYGEN, 1);
                             return cleanStack;
                         }
                     },
                     new Operator() {
                         @Override
-                        public ItemStack operate(ItemStack cleanStack) {
+                        public @NotNull ItemStack operate(@NotNull ItemStack cleanStack) {
                             ItemMeta meta = cleanStack.getItemMeta();
                             cleanStack.setItemMeta(meta);
                             return cleanStack;
@@ -184,14 +185,14 @@ public class ItemStackLoreEnchantmentTest extends ItemStackTest {
                 new Object[] {
                     new Operator() {
                         @Override
-                        public ItemStack operate(ItemStack cleanStack) {
+                        public @NotNull ItemStack operate(@NotNull ItemStack cleanStack) {
                             cleanStack.addUnsafeEnchantment(Enchantment.ARROW_DAMAGE, 1);
                             return cleanStack;
                         }
                     },
                     new Operator() {
                         @Override
-                        public ItemStack operate(ItemStack cleanStack) {
+                        public @NotNull ItemStack operate(@NotNull ItemStack cleanStack) {
                             cleanStack.addUnsafeEnchantment(Enchantment.ARROW_FIRE, 1);
                             return cleanStack;
                         }
@@ -201,7 +202,7 @@ public class ItemStackLoreEnchantmentTest extends ItemStackTest {
                 new Object[] {
                     new Operator() {
                         @Override
-                        public ItemStack operate(ItemStack cleanStack) {
+                        public @NotNull ItemStack operate(@NotNull ItemStack cleanStack) {
                             ItemMeta meta = cleanStack.getItemMeta();
                             meta.addEnchant(Enchantment.DURABILITY, 1, true);
                             cleanStack.setItemMeta(meta);
@@ -210,7 +211,7 @@ public class ItemStackLoreEnchantmentTest extends ItemStackTest {
                     },
                     new Operator() {
                         @Override
-                        public ItemStack operate(ItemStack cleanStack) {
+                        public @NotNull ItemStack operate(@NotNull ItemStack cleanStack) {
                             ItemMeta meta = cleanStack.getItemMeta();
                             cleanStack.setItemMeta(meta);
                             return cleanStack;
@@ -221,7 +222,7 @@ public class ItemStackLoreEnchantmentTest extends ItemStackTest {
                 new Object[] {
                     new Operator() {
                         @Override
-                        public ItemStack operate(ItemStack cleanStack) {
+                        public @NotNull ItemStack operate(@NotNull ItemStack cleanStack) {
                             ItemMeta meta = cleanStack.getItemMeta();
                             meta.addEnchant(Enchantment.KNOCKBACK, 1, true);
                             cleanStack.setItemMeta(meta);
@@ -239,7 +240,7 @@ public class ItemStackLoreEnchantmentTest extends ItemStackTest {
                 new Object[] {
                     new Operator() {
                         @Override
-                        public ItemStack operate(ItemStack cleanStack) {
+                        public @NotNull ItemStack operate(@NotNull ItemStack cleanStack) {
                             ItemMeta meta = cleanStack.getItemMeta();
                             meta.addEnchant(Enchantment.PROTECTION_FIRE, 1, true);
                             cleanStack.setItemMeta(meta);
@@ -248,7 +249,7 @@ public class ItemStackLoreEnchantmentTest extends ItemStackTest {
                     },
                     new Operator() {
                         @Override
-                        public ItemStack operate(ItemStack cleanStack) {
+                        public @NotNull ItemStack operate(@NotNull ItemStack cleanStack) {
                             ItemMeta meta = cleanStack.getItemMeta();
                             meta.addEnchant(Enchantment.PROTECTION_FIRE, 2, true);
                             cleanStack.setItemMeta(meta);
@@ -262,7 +263,7 @@ public class ItemStackLoreEnchantmentTest extends ItemStackTest {
                 new Object[] {
                     new Operator() {
                         @Override
-                        public ItemStack operate(ItemStack cleanStack) {
+                        public @NotNull ItemStack operate(@NotNull ItemStack cleanStack) {
                             ItemMeta meta = cleanStack.getItemMeta();
                             ((Repairable) meta).setRepairCost(42);
                             cleanStack.setItemMeta(meta);
@@ -280,7 +281,7 @@ public class ItemStackLoreEnchantmentTest extends ItemStackTest {
                 new Object[] {
                     new Operator() {
                         @Override
-                        public ItemStack operate(ItemStack cleanStack) {
+                        public @NotNull ItemStack operate(@NotNull ItemStack cleanStack) {
                             ItemMeta meta = cleanStack.getItemMeta();
                             ((Repairable) meta).setRepairCost(36);
                             cleanStack.setItemMeta(meta);
@@ -289,7 +290,7 @@ public class ItemStackLoreEnchantmentTest extends ItemStackTest {
                     },
                     new Operator() {
                         @Override
-                        public ItemStack operate(ItemStack cleanStack) {
+                        public @NotNull ItemStack operate(@NotNull ItemStack cleanStack) {
                             ItemMeta meta = cleanStack.getItemMeta();
                             cleanStack.setItemMeta(meta);
                             return cleanStack;
@@ -300,7 +301,7 @@ public class ItemStackLoreEnchantmentTest extends ItemStackTest {
                 new Object[] {
                     new Operator() {
                         @Override
-                        public ItemStack operate(ItemStack cleanStack) {
+                        public @NotNull ItemStack operate(@NotNull ItemStack cleanStack) {
                             ItemMeta meta = cleanStack.getItemMeta();
                             ((Repairable) meta).setRepairCost(89);
                             cleanStack.setItemMeta(meta);
@@ -309,7 +310,7 @@ public class ItemStackLoreEnchantmentTest extends ItemStackTest {
                     },
                     new Operator() {
                         @Override
-                        public ItemStack operate(ItemStack cleanStack) {
+                        public @NotNull ItemStack operate(@NotNull ItemStack cleanStack) {
                             ItemMeta meta = cleanStack.getItemMeta();
                             ((Repairable) meta).setRepairCost(88);
                             cleanStack.setItemMeta(meta);
diff --git a/src/test/java/org/bukkit/craftbukkit/inventory/ItemStackMapTest.java b/src/test/java/org/bukkit/craftbukkit/inventory/ItemStackMapTest.java
index 5537267e0ff80c2530eb1cc00fb5c2ee9ca41892..bfe57169af09dbe28ac258a03252076f5f1986d8 100644
--- a/src/test/java/org/bukkit/craftbukkit/inventory/ItemStackMapTest.java
+++ b/src/test/java/org/bukkit/craftbukkit/inventory/ItemStackMapTest.java
@@ -4,6 +4,7 @@ import com.google.common.base.Joiner;
 import org.bukkit.Material;
 import org.bukkit.inventory.ItemStack;
 import org.bukkit.inventory.meta.MapMeta;
+import org.jetbrains.annotations.NotNull;
 import org.junit.jupiter.params.ParameterizedTest;
 
 import java.util.Arrays;
@@ -28,7 +29,7 @@ public class ItemStackMapTest extends ItemStackTest {
                 new Object[] {
                     new Operator() {
                         @Override
-                        public ItemStack operate(ItemStack cleanStack) {
+                        public @NotNull ItemStack operate(@NotNull ItemStack cleanStack) {
                             MapMeta meta = (MapMeta) cleanStack.getItemMeta();
                             meta.setScaling(true);
                             cleanStack.setItemMeta(meta);
@@ -37,7 +38,7 @@ public class ItemStackMapTest extends ItemStackTest {
                     },
                     new Operator() {
                         @Override
-                        public ItemStack operate(ItemStack cleanStack) {
+                        public @NotNull ItemStack operate(@NotNull ItemStack cleanStack) {
                             MapMeta meta = (MapMeta) cleanStack.getItemMeta();
                             meta.setScaling(false);
                             cleanStack.setItemMeta(meta);
@@ -49,7 +50,7 @@ public class ItemStackMapTest extends ItemStackTest {
                 new Object[] {
                     new Operator() {
                         @Override
-                        public ItemStack operate(ItemStack cleanStack) {
+                        public @NotNull ItemStack operate(@NotNull ItemStack cleanStack) {
                             MapMeta meta = (MapMeta) cleanStack.getItemMeta();
                             meta.setScaling(true);
                             cleanStack.setItemMeta(meta);
@@ -58,7 +59,7 @@ public class ItemStackMapTest extends ItemStackTest {
                     },
                     new Operator() {
                         @Override
-                        public ItemStack operate(ItemStack cleanStack) {
+                        public @NotNull ItemStack operate(@NotNull ItemStack cleanStack) {
                             MapMeta meta = (MapMeta) cleanStack.getItemMeta();
                             cleanStack.setItemMeta(meta);
                             return cleanStack;
@@ -69,7 +70,7 @@ public class ItemStackMapTest extends ItemStackTest {
                 new Object[] {
                     new Operator() {
                         @Override
-                        public ItemStack operate(ItemStack cleanStack) {
+                        public @NotNull ItemStack operate(@NotNull ItemStack cleanStack) {
                             MapMeta meta = (MapMeta) cleanStack.getItemMeta();
                             meta.setScaling(false);
                             cleanStack.setItemMeta(meta);
@@ -78,7 +79,7 @@ public class ItemStackMapTest extends ItemStackTest {
                     },
                     new Operator() {
                         @Override
-                        public ItemStack operate(ItemStack cleanStack) {
+                        public @NotNull ItemStack operate(@NotNull ItemStack cleanStack) {
                             MapMeta meta = (MapMeta) cleanStack.getItemMeta();
                             cleanStack.setItemMeta(meta);
                             return cleanStack;
@@ -89,7 +90,7 @@ public class ItemStackMapTest extends ItemStackTest {
                 new Object[] {
                     new Operator() {
                         @Override
-                        public ItemStack operate(ItemStack cleanStack) {
+                        public @NotNull ItemStack operate(@NotNull ItemStack cleanStack) {
                             MapMeta meta = (MapMeta) cleanStack.getItemMeta();
                             meta.setScaling(true);
                             cleanStack.setItemMeta(meta);
@@ -107,7 +108,7 @@ public class ItemStackMapTest extends ItemStackTest {
                 new Object[] {
                     new Operator() {
                         @Override
-                        public ItemStack operate(ItemStack cleanStack) {
+                        public @NotNull ItemStack operate(@NotNull ItemStack cleanStack) {
                             MapMeta meta = (MapMeta) cleanStack.getItemMeta();
                             meta.setScaling(false);
                             cleanStack.setItemMeta(meta);
diff --git a/src/test/java/org/bukkit/craftbukkit/inventory/ItemStackPotionsTest.java b/src/test/java/org/bukkit/craftbukkit/inventory/ItemStackPotionsTest.java
index 445252fec9e5bc8ffb994a788e1ab4cbd1e88041..a86227426b3ab6678bac168113657c1818824b00 100644
--- a/src/test/java/org/bukkit/craftbukkit/inventory/ItemStackPotionsTest.java
+++ b/src/test/java/org/bukkit/craftbukkit/inventory/ItemStackPotionsTest.java
@@ -5,6 +5,7 @@ import org.bukkit.Material;
 import org.bukkit.inventory.ItemStack;
 import org.bukkit.inventory.meta.PotionMeta;
 import org.bukkit.potion.PotionEffectType;
+import org.jetbrains.annotations.NotNull;
 import org.junit.jupiter.params.ParameterizedTest;
 
 import java.util.Arrays;
@@ -29,7 +30,7 @@ public class ItemStackPotionsTest extends ItemStackTest {
                 new Object[] {
                     new Operator() {
                         @Override
-                        public ItemStack operate(ItemStack cleanStack) {
+                        public @NotNull ItemStack operate(@NotNull ItemStack cleanStack) {
                             final PotionMeta meta = (PotionMeta) cleanStack.getItemMeta();
                             meta.addCustomEffect(PotionEffectType.CONFUSION.createEffect(1, 1), false);
                             cleanStack.setItemMeta(meta);
@@ -47,7 +48,7 @@ public class ItemStackPotionsTest extends ItemStackTest {
                 new Object[] {
                     new Operator() {
                         @Override
-                        public ItemStack operate(ItemStack cleanStack) {
+                        public @NotNull ItemStack operate(@NotNull ItemStack cleanStack) {
                             final PotionMeta meta = (PotionMeta) cleanStack.getItemMeta();
                             meta.addCustomEffect(PotionEffectType.HARM.createEffect(2, 1), false);
                             cleanStack.setItemMeta(meta);
@@ -56,7 +57,7 @@ public class ItemStackPotionsTest extends ItemStackTest {
                     },
                     new Operator() {
                         @Override
-                        public ItemStack operate(ItemStack cleanStack) {
+                        public @NotNull ItemStack operate(@NotNull ItemStack cleanStack) {
                             final PotionMeta meta = (PotionMeta) cleanStack.getItemMeta();
                             cleanStack.setItemMeta(meta);
                             return cleanStack;
@@ -67,7 +68,7 @@ public class ItemStackPotionsTest extends ItemStackTest {
                 new Object[] {
                     new Operator() {
                         @Override
-                        public ItemStack operate(ItemStack cleanStack) {
+                        public @NotNull ItemStack operate(@NotNull ItemStack cleanStack) {
                             final PotionMeta meta = (PotionMeta) cleanStack.getItemMeta();
                             meta.addCustomEffect(PotionEffectType.SLOW_DIGGING.createEffect(1, 1), false);
                             cleanStack.setItemMeta(meta);
@@ -76,7 +77,7 @@ public class ItemStackPotionsTest extends ItemStackTest {
                     },
                     new Operator() {
                         @Override
-                        public ItemStack operate(ItemStack cleanStack) {
+                        public @NotNull ItemStack operate(@NotNull ItemStack cleanStack) {
                             final PotionMeta meta = (PotionMeta) cleanStack.getItemMeta();
                             meta.addCustomEffect(PotionEffectType.FAST_DIGGING.createEffect(1, 1), false);
                             cleanStack.setItemMeta(meta);
@@ -88,7 +89,7 @@ public class ItemStackPotionsTest extends ItemStackTest {
                 new Object[] {
                     new Operator() {
                         @Override
-                        public ItemStack operate(ItemStack cleanStack) {
+                        public @NotNull ItemStack operate(@NotNull ItemStack cleanStack) {
                             final PotionMeta meta = (PotionMeta) cleanStack.getItemMeta();
                             meta.addCustomEffect(PotionEffectType.JUMP.createEffect(1, 1), false);
                             cleanStack.setItemMeta(meta);
@@ -97,7 +98,7 @@ public class ItemStackPotionsTest extends ItemStackTest {
                     },
                     new Operator() {
                         @Override
-                        public ItemStack operate(ItemStack cleanStack) {
+                        public @NotNull ItemStack operate(@NotNull ItemStack cleanStack) {
                             final PotionMeta meta = (PotionMeta) cleanStack.getItemMeta();
                             meta.addCustomEffect(PotionEffectType.JUMP.createEffect(1, 1), false);
                             meta.addCustomEffect(PotionEffectType.REGENERATION.createEffect(1, 1), false);
@@ -110,7 +111,7 @@ public class ItemStackPotionsTest extends ItemStackTest {
                 new Object[] {
                     new Operator() {
                         @Override
-                        public ItemStack operate(ItemStack cleanStack) {
+                        public @NotNull ItemStack operate(@NotNull ItemStack cleanStack) {
                             final PotionMeta meta = (PotionMeta) cleanStack.getItemMeta();
                             meta.addCustomEffect(PotionEffectType.SPEED.createEffect(10, 1), false);
                             cleanStack.setItemMeta(meta);
@@ -119,7 +120,7 @@ public class ItemStackPotionsTest extends ItemStackTest {
                     },
                     new Operator() {
                         @Override
-                        public ItemStack operate(ItemStack cleanStack) {
+                        public @NotNull ItemStack operate(@NotNull ItemStack cleanStack) {
                             final PotionMeta meta = (PotionMeta) cleanStack.getItemMeta();
                             meta.addCustomEffect(PotionEffectType.SPEED.createEffect(5, 1), false);
                             cleanStack.setItemMeta(meta);
@@ -131,7 +132,7 @@ public class ItemStackPotionsTest extends ItemStackTest {
                 new Object[] {
                     new Operator() {
                         @Override
-                        public ItemStack operate(ItemStack cleanStack) {
+                        public @NotNull ItemStack operate(@NotNull ItemStack cleanStack) {
                             final PotionMeta meta = (PotionMeta) cleanStack.getItemMeta();
                             meta.addCustomEffect(PotionEffectType.INCREASE_DAMAGE.createEffect(1, 1), false);
                             cleanStack.setItemMeta(meta);
@@ -140,7 +141,7 @@ public class ItemStackPotionsTest extends ItemStackTest {
                     },
                     new Operator() {
                         @Override
-                        public ItemStack operate(ItemStack cleanStack) {
+                        public @NotNull ItemStack operate(@NotNull ItemStack cleanStack) {
                             final PotionMeta meta = (PotionMeta) cleanStack.getItemMeta();
                             meta.addCustomEffect(PotionEffectType.INCREASE_DAMAGE.createEffect(1, 2), false);
                             cleanStack.setItemMeta(meta);
diff --git a/src/test/java/org/bukkit/craftbukkit/inventory/ItemStackSkullTest.java b/src/test/java/org/bukkit/craftbukkit/inventory/ItemStackSkullTest.java
index a2e6b61ef3a737faeb2ef505a98144ba8f9487a9..cc73e0a8ef2a7ae02782c458db44cf32e28d6fc5 100644
--- a/src/test/java/org/bukkit/craftbukkit/inventory/ItemStackSkullTest.java
+++ b/src/test/java/org/bukkit/craftbukkit/inventory/ItemStackSkullTest.java
@@ -4,6 +4,7 @@ import com.google.common.base.Joiner;
 import org.bukkit.Material;
 import org.bukkit.inventory.ItemStack;
 import org.bukkit.inventory.meta.SkullMeta;
+import org.jetbrains.annotations.NotNull;
 import org.junit.jupiter.params.ParameterizedTest;
 
 import java.util.Arrays;
@@ -28,7 +29,7 @@ public class ItemStackSkullTest extends ItemStackTest {
                 new Object[] {
                     new Operator() {
                         @Override
-                        public ItemStack operate(ItemStack cleanStack) {
+                        public @NotNull ItemStack operate(@NotNull ItemStack cleanStack) {
                             SkullMeta meta = (SkullMeta) cleanStack.getItemMeta();
                             meta.setOwner("Notch");
                             cleanStack.setItemMeta(meta);
@@ -37,7 +38,7 @@ public class ItemStackSkullTest extends ItemStackTest {
                     },
                     new Operator() {
                         @Override
-                        public ItemStack operate(ItemStack cleanStack) {
+                        public @NotNull ItemStack operate(@NotNull ItemStack cleanStack) {
                             SkullMeta meta = (SkullMeta) cleanStack.getItemMeta();
                             meta.setOwner("Dinnerbone");
                             cleanStack.setItemMeta(meta);
@@ -49,7 +50,7 @@ public class ItemStackSkullTest extends ItemStackTest {
                 new Object[] {
                     new Operator() {
                         @Override
-                        public ItemStack operate(ItemStack cleanStack) {
+                        public @NotNull ItemStack operate(@NotNull ItemStack cleanStack) {
                             SkullMeta meta = (SkullMeta) cleanStack.getItemMeta();
                             meta.setOwner("Notch");
                             cleanStack.setItemMeta(meta);
@@ -58,7 +59,7 @@ public class ItemStackSkullTest extends ItemStackTest {
                     },
                     new Operator() {
                         @Override
-                        public ItemStack operate(ItemStack cleanStack) {
+                        public @NotNull ItemStack operate(@NotNull ItemStack cleanStack) {
                             SkullMeta meta = (SkullMeta) cleanStack.getItemMeta();
                             meta.setOwner(null);
                             cleanStack.setItemMeta(meta);
@@ -70,7 +71,7 @@ public class ItemStackSkullTest extends ItemStackTest {
                 new Object[] {
                     new Operator() {
                         @Override
-                        public ItemStack operate(ItemStack cleanStack) {
+                        public @NotNull ItemStack operate(@NotNull ItemStack cleanStack) {
                             SkullMeta meta = (SkullMeta) cleanStack.getItemMeta();
                             meta.setOwner("Notch");
                             cleanStack.setItemMeta(meta);
diff --git a/src/test/java/org/bukkit/craftbukkit/inventory/ItemStackTest.java b/src/test/java/org/bukkit/craftbukkit/inventory/ItemStackTest.java
index 78d5cd653a7311c09c1b9c84d6135c4be21667cc..d81947d84cdc2d85c787a09242a1f6613a9bf4aa 100644
--- a/src/test/java/org/bukkit/craftbukkit/inventory/ItemStackTest.java
+++ b/src/test/java/org/bukkit/craftbukkit/inventory/ItemStackTest.java
@@ -10,6 +10,7 @@ import org.bukkit.inventory.meta.ItemMeta;
 import org.bukkit.support.AbstractTestingBase;
 import org.bukkit.util.io.BukkitObjectInputStream;
 import org.bukkit.util.io.BukkitObjectOutputStream;
+import org.jetbrains.annotations.NotNull;
 import org.junit.jupiter.params.ParameterizedTest;
 import org.junit.jupiter.params.provider.MethodSource;
 import org.yaml.snakeyaml.external.biz.base64Coder.Base64Coder;
@@ -40,7 +41,7 @@ public class ItemStackTest extends AbstractTestingBase {
 
         abstract ItemStack operate(ItemStack cleanStack);
 
-        static ItemStack cleanStack(Material material, boolean craft) {
+        static @NotNull ItemStack cleanStack(@NotNull Material material, boolean craft) {
             final ItemStack stack = new ItemStack(material);
             return craft ? CraftItemStack.asCraftCopy(stack) : stack;
         }
@@ -60,7 +61,7 @@ public class ItemStackTest extends AbstractTestingBase {
          * @param materials
          * @return
          */
-        static List<Object[]> compound(final List<Object[]> parameterList, final String nameFormat, final int nameIndex, final Material...materials) {
+        static @NotNull List<Object[]> compound(final @NotNull List<Object[]> parameterList, final @NotNull String nameFormat, final int nameIndex, final Material @NotNull ...materials) {
             final List<Object[]> out = new ArrayList<Object[]>();
             for (Object[] params : parameterList) {
                 final int len = params.length;
@@ -123,7 +124,7 @@ public class ItemStackTest extends AbstractTestingBase {
         }
 
         @Override
-        public String toString() {
+        public @NotNull String toString() {
             return Arrays.toString(operators);
         }
 
@@ -139,7 +140,7 @@ public class ItemStackTest extends AbstractTestingBase {
          * @param originalLists
          * @return
          */
-        static List<Object[]> compound(final Joiner joiner, final int nameParameter, final long singletonBitmask, final List<Object[]>...originalLists) {
+        static @NotNull List<Object[]> compound(final @NotNull Joiner joiner, final int nameParameter, final long singletonBitmask, final List<Object[]> @NotNull ...originalLists) {
 
             final List<Object[]> out = new ArrayList<Object[]>();
             final List<List<Object[]>> singletons = new ArrayList<List<Object[]>>();
@@ -194,7 +195,7 @@ public class ItemStackTest extends AbstractTestingBase {
             return methodParams.out;
         }
 
-        private static void recursivelyCompound(final RecursiveContainer methodParams, final int level) {
+        private static void recursivelyCompound(final @NotNull RecursiveContainer methodParams, final int level) {
             final List<Object[]> stack = methodParams.stack;
 
             if (level == methodParams.lists.length) {
@@ -255,7 +256,7 @@ public class ItemStackTest extends AbstractTestingBase {
         }
 
         @Override
-        public String toString() {
+        public @NotNull String toString() {
             return "Craft " + this.provider;
         }
     }
@@ -273,7 +274,7 @@ public class ItemStackTest extends AbstractTestingBase {
         }
 
         @Override
-        public String toString() {
+        public @NotNull String toString() {
             return "Bukkit " + this.provider;
         }
     }
@@ -290,13 +291,13 @@ public class ItemStackTest extends AbstractTestingBase {
         }
 
         @Override
-        public String toString() {
+        public @NotNull String toString() {
             return "NoOp " + super.toString();
         }
     }
 
     @ParameterizedTest(name = "[{index}]:{" + ItemStackTest.NAME_PARAMETER + "}")
-    public static Stream<Object[]> data() {
+    public static @NotNull Stream<Object[]> data() {
         return Stream.of(); // TODO, test basic durability issues
     }
 
@@ -304,7 +305,7 @@ public class ItemStackTest extends AbstractTestingBase {
     /**
      * Materials that generate unique item meta types.
      */
-    static final Material[] COMPOUND_MATERIALS;
+    static final Material @NotNull [] COMPOUND_MATERIALS;
     static final int NAME_PARAMETER = 2;
     static {
         final ItemFactory factory = CraftItemFactory.instance();
@@ -328,7 +329,7 @@ public class ItemStackTest extends AbstractTestingBase {
 
     @ParameterizedTest
     @MethodSource("data")
-    public void testBukkitInequality(StackProvider provider, StackProvider unequalProvider, String name) {
+    public void testBukkitInequality(@NotNull StackProvider provider, StackProvider unequalProvider, String name) {
         final StackWrapper bukkitWrapper = new CraftWrapper(provider);
         ItemStackTest.testInequality(bukkitWrapper, new BukkitWrapper(unequalProvider));
         ItemStackTest.testInequality(bukkitWrapper, new BukkitWrapper(new NoOpProvider(provider.material)));
@@ -336,7 +337,7 @@ public class ItemStackTest extends AbstractTestingBase {
 
     @ParameterizedTest
     @MethodSource("data")
-    public void testCraftInequality(StackProvider provider, StackProvider unequalProvider, String name) {
+    public void testCraftInequality(@NotNull StackProvider provider, StackProvider unequalProvider, String name) {
         final StackWrapper craftWrapper = new CraftWrapper(provider);
         ItemStackTest.testInequality(craftWrapper, new CraftWrapper(unequalProvider));
         ItemStackTest.testInequality(craftWrapper, new CraftWrapper(new NoOpProvider(provider.material)));
@@ -344,7 +345,7 @@ public class ItemStackTest extends AbstractTestingBase {
 
     @ParameterizedTest
     @MethodSource("data")
-    public void testMixedInequality(StackProvider provider, StackProvider unequalProvider, String name) {
+    public void testMixedInequality(@NotNull StackProvider provider, StackProvider unequalProvider, String name) {
         final StackWrapper craftWrapper = new CraftWrapper(provider);
         ItemStackTest.testInequality(craftWrapper, new BukkitWrapper(unequalProvider));
         ItemStackTest.testInequality(craftWrapper, new BukkitWrapper(new NoOpProvider(provider.material)));
@@ -354,7 +355,7 @@ public class ItemStackTest extends AbstractTestingBase {
         ItemStackTest.testInequality(bukkitWrapper, new CraftWrapper(new NoOpProvider(provider.material)));
     }
 
-    static void testInequality(StackWrapper provider, StackWrapper unequalProvider) {
+    static void testInequality(@NotNull StackWrapper provider, @NotNull StackWrapper unequalProvider) {
         final ItemStack stack = provider.stack();
         final ItemStack stack2 = provider.stack();
         assertThat(stack, allOf(equalTo(stack), sameHash(stack)));
@@ -419,7 +420,7 @@ public class ItemStackTest extends AbstractTestingBase {
         ItemStackTest.testStreamDeserialize(new CraftWrapper(provider), new CraftWrapper(unequalProvider));
     }
 
-    static void testStreamDeserialize(StackWrapper provider, StackWrapper unequalProvider) throws Throwable {
+    static void testStreamDeserialize(@NotNull StackWrapper provider, @NotNull StackWrapper unequalProvider) throws Throwable {
         final ItemStack stack = provider.stack();
         final ItemStack unequalStack = unequalProvider.stack();
 
@@ -464,7 +465,7 @@ public class ItemStackTest extends AbstractTestingBase {
         ItemStackTest.testEqualities(data, readFirst, readSecond, stack, unequalStack);
     }
 
-    static void testYamlDeserialize(StackWrapper provider, StackWrapper unequalProvider) {
+    static void testYamlDeserialize(@NotNull StackWrapper provider, @NotNull StackWrapper unequalProvider) {
         final ItemStack stack = provider.stack();
         final ItemStack unequalStack = unequalProvider.stack();
         final YamlConfiguration configOut = new YamlConfiguration();
@@ -484,7 +485,7 @@ public class ItemStackTest extends AbstractTestingBase {
         ItemStackTest.testEqualities(out, configIn.getItemStack("provider"), configIn.getItemStack("unequal"), stack, unequalStack);
     }
 
-    static void testEqualities(String information, ItemStack primaryRead, ItemStack unequalRead, ItemStack primaryOriginal, ItemStack unequalOriginal) {
+    static void testEqualities(String information, ItemStack primaryRead, ItemStack unequalRead, @NotNull ItemStack primaryOriginal, @NotNull ItemStack unequalOriginal) {
         assertThat(information, primaryRead, allOf(equalTo(primaryOriginal), sameHash(primaryOriginal)));
         assertThat(information, unequalRead, allOf(equalTo(unequalOriginal), sameHash(unequalOriginal)));
         assertThat(information, primaryRead, is(not(unequalOriginal)));
diff --git a/src/test/java/org/bukkit/craftbukkit/inventory/PersistentDataContainerTest.java b/src/test/java/org/bukkit/craftbukkit/inventory/PersistentDataContainerTest.java
index e0aa4586af877c8ad7aff2f6cc68cdc6a3708e07..9d232a65162c838f2810326203e46416d27ebd0c 100644
--- a/src/test/java/org/bukkit/craftbukkit/inventory/PersistentDataContainerTest.java
+++ b/src/test/java/org/bukkit/craftbukkit/inventory/PersistentDataContainerTest.java
@@ -19,6 +19,7 @@ import org.bukkit.persistence.PersistentDataAdapterContext;
 import org.bukkit.persistence.PersistentDataContainer;
 import org.bukkit.persistence.PersistentDataType;
 import org.bukkit.support.AbstractTestingBase;
+import org.jetbrains.annotations.NotNull;
 import org.junit.jupiter.api.BeforeEach;
 import org.junit.jupiter.api.Test;
 
@@ -84,7 +85,7 @@ public class PersistentDataContainerTest extends AbstractTestingBase {
         return Bukkit.getItemFactory().getItemMeta(Material.DIAMOND_PICKAXE);
     }
 
-    private NamespacedKey requestKey(String keyName) {
+    private @NotNull NamespacedKey requestKey(@NotNull String keyName) {
         return new NamespacedKey("test-plugin", keyName.toLowerCase());
     }
 
@@ -148,7 +149,7 @@ public class PersistentDataContainerTest extends AbstractTestingBase {
         assertEquals(newStack.getItemMeta().getPersistentDataContainer().get(this.requestKey("double"), PersistentDataType.STRING), "1.33");
     }
 
-    private CraftMetaItem createComplexItemMeta() {
+    private @NotNull CraftMetaItem createComplexItemMeta() {
         CraftMetaItem itemMeta = (CraftMetaItem) this.createNewItemMeta();
         itemMeta.setDisplayName("Item Display Name");
 
@@ -213,17 +214,17 @@ public class PersistentDataContainerTest extends AbstractTestingBase {
     class UUIDPersistentDataType implements PersistentDataType<byte[], UUID> {
 
         @Override
-        public Class<byte[]> getPrimitiveType() {
+        public @NotNull Class<byte[]> getPrimitiveType() {
             return byte[].class;
         }
 
         @Override
-        public Class<UUID> getComplexType() {
+        public @NotNull Class<UUID> getComplexType() {
             return UUID.class;
         }
 
         @Override
-        public byte[] toPrimitive(UUID complex, PersistentDataAdapterContext context) {
+        public byte[] toPrimitive(@NotNull UUID complex, PersistentDataAdapterContext context) {
             ByteBuffer bb = ByteBuffer.wrap(new byte[16]);
             bb.putLong(complex.getMostSignificantBits());
             bb.putLong(complex.getLeastSignificantBits());
@@ -231,7 +232,7 @@ public class PersistentDataContainerTest extends AbstractTestingBase {
         }
 
         @Override
-        public UUID fromPrimitive(byte[] primitive, PersistentDataAdapterContext context) {
+        public @NotNull UUID fromPrimitive(byte @NotNull [] primitive, PersistentDataAdapterContext context) {
             ByteBuffer bb = ByteBuffer.wrap(primitive);
             long firstLong = bb.getLong();
             long secondLong = bb.getLong();
@@ -263,7 +264,7 @@ public class PersistentDataContainerTest extends AbstractTestingBase {
         });
     }
 
-    private <T, Z> void testPrimitiveCustomTag(ItemMeta meta, PersistentDataType<T, Z> type, Z value) {
+    private <T, Z> void testPrimitiveCustomTag(@NotNull ItemMeta meta, @NotNull PersistentDataType<T, Z> type, @NotNull Z value) {
         NamespacedKey tagKey = new NamespacedKey("test", String.valueOf(type.hashCode()));
 
         meta.getPersistentDataContainer().set(tagKey, type, value);
@@ -293,22 +294,22 @@ public class PersistentDataContainerTest extends AbstractTestingBase {
         }
 
         @Override
-        public Class<T> getPrimitiveType() {
+        public @NotNull Class<T> getPrimitiveType() {
             return this.primitiveType;
         }
 
         @Override
-        public Class<T> getComplexType() {
+        public @NotNull Class<T> getComplexType() {
             return this.primitiveType;
         }
 
         @Override
-        public T toPrimitive(T complex, PersistentDataAdapterContext context) {
+        public @NotNull T toPrimitive(@NotNull T complex, PersistentDataAdapterContext context) {
             return complex;
         }
 
         @Override
-        public T fromPrimitive(T primitive, PersistentDataAdapterContext context) {
+        public @NotNull T fromPrimitive(@NotNull T primitive, PersistentDataAdapterContext context) {
             return primitive;
         }
     }
diff --git a/src/test/java/org/bukkit/craftbukkit/profile/PlayerProfileTest.java b/src/test/java/org/bukkit/craftbukkit/profile/PlayerProfileTest.java
index 736071fa1932129d80808ca9211bd9240f597f5a..5fe0a26fc07b7269afb2f990b6d5c6e52b8c2d06 100644
--- a/src/test/java/org/bukkit/craftbukkit/profile/PlayerProfileTest.java
+++ b/src/test/java/org/bukkit/craftbukkit/profile/PlayerProfileTest.java
@@ -7,6 +7,7 @@ import org.bukkit.configuration.file.YamlConfiguration;
 import org.bukkit.configuration.serialization.ConfigurationSerialization;
 import org.bukkit.profile.PlayerProfile;
 import org.bukkit.profile.PlayerTextures;
+import org.jetbrains.annotations.NotNull;
 import org.junit.jupiter.api.Test;
 
 import java.net.MalformedURLException;
@@ -39,8 +40,8 @@ public class PlayerProfileTest {
      */
     private static final UUID UNIQUE_ID = UUID.fromString("29a4042b-05ab-4c72-9460-7aa3b567e8da");
     private static final String NAME = "DerFrZocker";
-    private static final URL SKIN;
-    private static final URL CAPE;
+    private static final @NotNull URL SKIN;
+    private static final @NotNull URL CAPE;
     static {
         try {
             SKIN = new URL("http://textures.minecraft.net/texture/284dbf60700b9882c0c2ad1943b515cc111f0b4e562a9a36682495636d846754");
@@ -55,7 +56,7 @@ public class PlayerProfileTest {
     // {"textures":{"SKIN":{"url":"http://textures.minecraft.net/texture/b72144309873464f239d9ae0ec49d2e7f9670552cda8a7a85a76282dd09e14dd"}}}
     private static final String COMPACT_VALUE = "eyJ0ZXh0dXJlcyI6eyJTS0lOIjp7InVybCI6Imh0dHA6Ly90ZXh0dXJlcy5taW5lY3JhZnQubmV0L3RleHR1cmUvMjg0ZGJmNjA3MDBiOTg4MmMwYzJhZDE5NDNiNTE1Y2MxMTFmMGI0ZTU2MmE5YTM2NjgyNDk1NjM2ZDg0Njc1NCJ9fX0=";
 
-    private static CraftPlayerProfile buildPlayerProfile() {
+    private static @NotNull CraftPlayerProfile buildPlayerProfile() {
         GameProfile gameProfile = new GameProfile(PlayerProfileTest.UNIQUE_ID, PlayerProfileTest.NAME);
         gameProfile.getProperties().put(CraftPlayerTextures.PROPERTY_NAME, new Property(CraftPlayerTextures.PROPERTY_NAME, PlayerProfileTest.VALUE, PlayerProfileTest.SIGNATURE));
         return new CraftPlayerProfile(gameProfile);
diff --git a/src/test/java/org/bukkit/craftbukkit/util/CraftChatMessageTest.java b/src/test/java/org/bukkit/craftbukkit/util/CraftChatMessageTest.java
index 8121d464844782f8c3f9b7cb65a69b4a0e036813..acc736d0045055be236685fe675f01d41e57412e 100644
--- a/src/test/java/org/bukkit/craftbukkit/util/CraftChatMessageTest.java
+++ b/src/test/java/org/bukkit/craftbukkit/util/CraftChatMessageTest.java
@@ -6,6 +6,7 @@ import net.minecraft.network.chat.Component;
 import net.minecraft.network.chat.ComponentContents;
 import net.minecraft.network.chat.MutableComponent;
 import net.minecraft.network.chat.contents.LiteralContents;
+import org.jetbrains.annotations.NotNull;
 import org.junit.jupiter.api.Test;
 
 public class CraftChatMessageTest {
@@ -62,7 +63,7 @@ public class CraftChatMessageTest {
         this.testPlainString("Link to www.spigotmc.org ...");
     }
 
-    private Component create(String txt, String... rest) {
+    private @NotNull Component create(String txt, String @NotNull ... rest) {
         MutableComponent cmp = CraftChatMessage.fromString(txt, false)[0].copy();
         for (String s : rest) {
             cmp.append(CraftChatMessage.fromString(s, true)[0]);
@@ -96,7 +97,7 @@ public class CraftChatMessageTest {
         assertFalse(this.containsNonPlainComponent(component), "Non-plain component: " + component);
     }
 
-    private boolean containsNonPlainComponent(Component component) {
+    private boolean containsNonPlainComponent(@NotNull Component component) {
         for (Component c : component) {
             if (c.getContents() != ComponentContents.EMPTY && !(c.getContents() instanceof LiteralContents)) {
                 return true;
diff --git a/src/test/java/org/bukkit/entity/TropicalFishTest.java b/src/test/java/org/bukkit/entity/TropicalFishTest.java
index 78c2e1a28aa20751a7e772af25f55cb4986a5ca3..23efa12d7132873ad869b312eeb70c93d957151a 100644
--- a/src/test/java/org/bukkit/entity/TropicalFishTest.java
+++ b/src/test/java/org/bukkit/entity/TropicalFishTest.java
@@ -6,6 +6,7 @@ import static org.junit.jupiter.api.Assertions.*;
 import org.bukkit.DyeColor;
 import org.bukkit.craftbukkit.entity.CraftTropicalFish;
 import org.bukkit.entity.TropicalFish.Pattern;
+import org.jetbrains.annotations.NotNull;
 import org.junit.jupiter.api.Test;
 
 public class TropicalFishTest {
@@ -36,7 +37,7 @@ public class TropicalFishTest {
         this.testVariant(235340288, DyeColor.GRAY, DyeColor.RED, Pattern.SNOOPER);
     }
 
-    private void testVariant(int variant, DyeColor bodyColor, DyeColor patternColor, Pattern pattern) {
+    private void testVariant(int variant, @NotNull DyeColor bodyColor, @NotNull DyeColor patternColor, @NotNull Pattern pattern) {
         assertThat("variant write", CraftTropicalFish.getData(patternColor, bodyColor, pattern), is(variant));
         assertThat("pattern colour read", CraftTropicalFish.getPatternColor(variant), is(patternColor));
         assertThat("body colour read", CraftTropicalFish.getBodyColor(variant), is(bodyColor));
diff --git a/src/test/java/org/bukkit/support/AbstractTestingBase.java b/src/test/java/org/bukkit/support/AbstractTestingBase.java
index 91b0507cb8a59c3c81a7e74ab16dfc3169236cb6..316b1d15b7b50509a18ea3bf6e4378d2d5b61936 100644
--- a/src/test/java/org/bukkit/support/AbstractTestingBase.java
+++ b/src/test/java/org/bukkit/support/AbstractTestingBase.java
@@ -22,6 +22,7 @@ import net.minecraft.world.flag.FeatureFlags;
 import net.minecraft.world.level.biome.Biome;
 import org.bukkit.Material;
 import org.bukkit.craftbukkit.util.CraftMagicNumbers;
+import org.jetbrains.annotations.NotNull;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
 
@@ -36,10 +37,10 @@ import static org.junit.jupiter.api.Assertions.assertEquals;
  */
 public abstract class AbstractTestingBase {
     // Materials that only exist in block form (or are legacy)
-    public static final List<Material> INVALIDATED_MATERIALS;
+    public static final @NotNull List<Material> INVALIDATED_MATERIALS;
 
     public static final ReloadableServerResources DATA_PACK;
-    public static final RegistryAccess.Frozen REGISTRY_CUSTOM;
+    public static final RegistryAccess.@NotNull Frozen REGISTRY_CUSTOM;
     public static final Registry<Biome> BIOMES;
 
     static {
diff --git a/src/test/java/org/bukkit/support/DummyServer.java b/src/test/java/org/bukkit/support/DummyServer.java
index 2ddceb709291d3bd713621ffa4020c02ec26bb21..3991f788e61ea3202ce16782730c61c594b30efe 100644
--- a/src/test/java/org/bukkit/support/DummyServer.java
+++ b/src/test/java/org/bukkit/support/DummyServer.java
@@ -16,10 +16,13 @@ import org.bukkit.craftbukkit.inventory.CraftItemFactory;
 import org.bukkit.craftbukkit.util.CraftMagicNumbers;
 import org.bukkit.craftbukkit.util.CraftNamespacedKey;
 import org.bukkit.craftbukkit.util.Versioning;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 
 public final class DummyServer implements InvocationHandler {
     private static interface MethodHandler {
-        Object handle(DummyServer server, Object[] args);
+        @Nullable Object handle(DummyServer server, Object[] args);
     }
     private static final HashMap<Method, MethodHandler> methods = new HashMap<Method, MethodHandler>();
     static {
@@ -37,7 +40,7 @@ public final class DummyServer implements InvocationHandler {
                     Server.class.getMethod("getName"),
                     new MethodHandler() {
                         @Override
-                        public Object handle(DummyServer server, Object[] args) {
+                        public @NotNull Object handle(DummyServer server, Object[] args) {
                             return DummyServer.class.getName();
                         }
                     }
@@ -74,7 +77,7 @@ public final class DummyServer implements InvocationHandler {
                     Server.class.getMethod("getUnsafe"),
                     new MethodHandler() {
                         @Override
-                        public Object handle(DummyServer server, Object[] args) {
+                        public @NotNull Object handle(DummyServer server, Object[] args) {
                             return CraftMagicNumbers.INSTANCE;
                         }
                     }
@@ -84,7 +87,7 @@ public final class DummyServer implements InvocationHandler {
                     new MethodHandler() {
                         final Logger logger = Logger.getLogger(DummyServer.class.getCanonicalName());
                         @Override
-                        public Object handle(DummyServer server, Object[] args) {
+                        public @NotNull Object handle(DummyServer server, Object[] args) {
                             return CraftBlockData.newData((Material) args[0], null);
                         }
                     }
@@ -92,7 +95,7 @@ public final class DummyServer implements InvocationHandler {
             methods.put(Server.class.getMethod("getLootTable", NamespacedKey.class),
                     new MethodHandler() {
                         @Override
-                        public Object handle(DummyServer server, Object[] args) {
+                        public @NotNull Object handle(DummyServer server, Object[] args) {
                             NamespacedKey key = (NamespacedKey) args[0];
                             return new CraftLootTable(key, AbstractTestingBase.DATA_PACK.getLootTables().get(CraftNamespacedKey.toMinecraft(key)));
                         }
@@ -101,7 +104,7 @@ public final class DummyServer implements InvocationHandler {
             methods.put(Server.class.getMethod("getRegistry", Class.class),
                     new MethodHandler() {
                         @Override
-                        public Object handle(DummyServer server, Object[] args) {
+                        public @Nullable Object handle(DummyServer server, Object[] args) {
                             return CraftRegistry.createRegistry((Class) args[0], AbstractTestingBase.REGISTRY_CUSTOM);
                         }
                     }
@@ -111,7 +114,7 @@ public final class DummyServer implements InvocationHandler {
                 Server.class.getMethod("getPluginManager"),
                 new MethodHandler() {
                     @Override
-                    public Object handle(DummyServer server, Object[] args) {
+                    public Object handle(@NotNull DummyServer server, Object[] args) {
                         return server.pluginManager;
                     }
                 }
diff --git a/src/test/java/org/bukkit/support/Matchers.java b/src/test/java/org/bukkit/support/Matchers.java
index 8181370de1432f27c7cb9b8cce05b51c1645c855..42660f193b973a5a6f6e4468ce6d1e104722267b 100644
--- a/src/test/java/org/bukkit/support/Matchers.java
+++ b/src/test/java/org/bukkit/support/Matchers.java
@@ -3,29 +3,31 @@ package org.bukkit.support;
 import org.hamcrest.BaseMatcher;
 import org.hamcrest.Description;
 import org.hamcrest.Matcher;
+import org.jetbrains.annotations.NotNull;
+
 
 public final class Matchers {
 
     private Matchers() {}
 
-    public static <T> Matcher<T> sameHash(T value) {
+    public static <T> @NotNull Matcher<T> sameHash(@NotNull T value) {
         return new SameHash<T>(value);
     }
 
     static class SameHash<T> extends BaseMatcher<T> {
         private final int expected;
 
-        SameHash(T object) {
+        SameHash(@NotNull T object) {
             this.expected = object.hashCode();
         }
 
         @Override
-        public boolean matches(Object item) {
+        public boolean matches(@NotNull Object item) {
             return item.hashCode() == this.expected;
         }
 
         @Override
-        public void describeTo(Description description) {
+        public void describeTo(@NotNull Description description) {
             description.appendValue(expected);
         }
     }
