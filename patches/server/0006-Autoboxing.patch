From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: camdenorrb <me@12oclock.dev>
Date: Sat, 22 Oct 2022 02:55:45 -0500
Subject: [PATCH] Autoboxing


diff --git a/src/main/java/alternate/current/wire/WireNode.java b/src/main/java/alternate/current/wire/WireNode.java
index f3e6470e78b2dea1d9f356ff94a27148d4facd26..f1a38252812a1b3bd92ac8e03cc6b3d62974e595 100644
--- a/src/main/java/alternate/current/wire/WireNode.java
+++ b/src/main/java/alternate/current/wire/WireNode.java
@@ -118,7 +118,7 @@ public class WireNode extends Node {
         }
 
         currentPower = LevelHelper.doRedstoneEvent(level, pos, currentPower, Mth.clamp(virtualPower, Redstone.SIGNAL_MIN, Redstone.SIGNAL_MAX));
-        state = state.setValue(RedStoneWireBlock.POWER, currentPower);
+        state = state.setValue(RedStoneWireBlock.POWER, Integer.valueOf(currentPower));
 
         return LevelHelper.setWireState(level, pos, state, added);
     }
diff --git a/src/main/java/ca/spottedleaf/dataconverter/minecraft/converters/chunk/ConverterFlattenChunk.java b/src/main/java/ca/spottedleaf/dataconverter/minecraft/converters/chunk/ConverterFlattenChunk.java
index bb934e8afd4c131751d92d8797cdc6517c5ea9cb..7256e71eec7ba5efdd779f512cfc02772b2a1c24 100644
--- a/src/main/java/ca/spottedleaf/dataconverter/minecraft/converters/chunk/ConverterFlattenChunk.java
+++ b/src/main/java/ca/spottedleaf/dataconverter/minecraft/converters/chunk/ConverterFlattenChunk.java
@@ -492,7 +492,7 @@ public final class ConverterFlattenChunk extends DataConverter<MapType<String>,
                     final int z = (tileEntity.getInt("z") - this.blockZ) & 15;
                     final int index = (y << 8) | (z << 4) | x;
                     if (this.tileEntities.put(index, tileEntity) != null) {
-                        LOGGER.warn("In chunk: {}x{} found a duplicate block entity at position (ConverterFlattenChunk): [{}, {}, {}]", this.blockX, this.blockZ, x, y, z);
+                        LOGGER.warn("In chunk: {}x{} found a duplicate block entity at position (ConverterFlattenChunk): [{}, {}, {}]", Integer.valueOf(this.blockX), Integer.valueOf(this.blockZ), Integer.valueOf(x), Integer.valueOf(y), Integer.valueOf(z));
                     }
                 }
             }
@@ -505,12 +505,12 @@ public final class ConverterFlattenChunk extends DataConverter<MapType<String>,
                     final Section section = new Section(sectionData);
 
                     if (section.y < 0 || section.y > 15) {
-                        LOGGER.warn("In chunk: {}x{} found an invalid chunk section y (ConverterFlattenChunk): {}", this.blockX, this.blockZ, section.y);
+                        LOGGER.warn("In chunk: {}x{} found an invalid chunk section y (ConverterFlattenChunk): {}", Integer.valueOf(this.blockX), Integer.valueOf(this.blockZ), Integer.valueOf(section.y));
                         continue;
                     }
 
                     if (this.sections[section.y] != null) {
-                        LOGGER.warn("In chunk: {}x{} found a duplicate chunk section (ConverterFlattenChunk): {}", this.blockX, this.blockZ, section.y);
+                        LOGGER.warn("In chunk: {}x{} found a duplicate chunk section (ConverterFlattenChunk): {}", Integer.valueOf(this.blockX), Integer.valueOf(this.blockZ), Integer.valueOf(section.y));
                     }
 
                     this.sides = section.upgrade(this.sides);
diff --git a/src/main/java/ca/spottedleaf/dataconverter/minecraft/converters/entity/ConverterFlattenEntity.java b/src/main/java/ca/spottedleaf/dataconverter/minecraft/converters/entity/ConverterFlattenEntity.java
index 3955ffb4715071c371d4cccb6b035f9b76787f4d..be3b232756d85af8a917fb8151d7e6904dc66c6b 100644
--- a/src/main/java/ca/spottedleaf/dataconverter/minecraft/converters/entity/ConverterFlattenEntity.java
+++ b/src/main/java/ca/spottedleaf/dataconverter/minecraft/converters/entity/ConverterFlattenEntity.java
@@ -16,260 +16,260 @@ public final class ConverterFlattenEntity extends DataConverter<MapType<String>,
 
     private static final Map<String, Integer> BLOCK_NAME_TO_ID = new HashMap<>();
     static {
-        BLOCK_NAME_TO_ID.put("minecraft:air", 0);
-        BLOCK_NAME_TO_ID.put("minecraft:stone", 1);
-        BLOCK_NAME_TO_ID.put("minecraft:grass", 2);
-        BLOCK_NAME_TO_ID.put("minecraft:dirt", 3);
-        BLOCK_NAME_TO_ID.put("minecraft:cobblestone", 4);
-        BLOCK_NAME_TO_ID.put("minecraft:planks", 5);
-        BLOCK_NAME_TO_ID.put("minecraft:sapling", 6);
-        BLOCK_NAME_TO_ID.put("minecraft:bedrock", 7);
-        BLOCK_NAME_TO_ID.put("minecraft:flowing_water", 8);
-        BLOCK_NAME_TO_ID.put("minecraft:water", 9);
-        BLOCK_NAME_TO_ID.put("minecraft:flowing_lava", 10);
-        BLOCK_NAME_TO_ID.put("minecraft:lava", 11);
-        BLOCK_NAME_TO_ID.put("minecraft:sand", 12);
-        BLOCK_NAME_TO_ID.put("minecraft:gravel", 13);
-        BLOCK_NAME_TO_ID.put("minecraft:gold_ore", 14);
-        BLOCK_NAME_TO_ID.put("minecraft:iron_ore", 15);
-        BLOCK_NAME_TO_ID.put("minecraft:coal_ore", 16);
-        BLOCK_NAME_TO_ID.put("minecraft:log", 17);
-        BLOCK_NAME_TO_ID.put("minecraft:leaves", 18);
-        BLOCK_NAME_TO_ID.put("minecraft:sponge", 19);
-        BLOCK_NAME_TO_ID.put("minecraft:glass", 20);
-        BLOCK_NAME_TO_ID.put("minecraft:lapis_ore", 21);
-        BLOCK_NAME_TO_ID.put("minecraft:lapis_block", 22);
-        BLOCK_NAME_TO_ID.put("minecraft:dispenser", 23);
-        BLOCK_NAME_TO_ID.put("minecraft:sandstone", 24);
-        BLOCK_NAME_TO_ID.put("minecraft:noteblock", 25);
-        BLOCK_NAME_TO_ID.put("minecraft:bed", 26);
-        BLOCK_NAME_TO_ID.put("minecraft:golden_rail", 27);
-        BLOCK_NAME_TO_ID.put("minecraft:detector_rail", 28);
-        BLOCK_NAME_TO_ID.put("minecraft:sticky_piston", 29);
-        BLOCK_NAME_TO_ID.put("minecraft:web", 30);
-        BLOCK_NAME_TO_ID.put("minecraft:tallgrass", 31);
-        BLOCK_NAME_TO_ID.put("minecraft:deadbush", 32);
-        BLOCK_NAME_TO_ID.put("minecraft:piston", 33);
-        BLOCK_NAME_TO_ID.put("minecraft:piston_head", 34);
-        BLOCK_NAME_TO_ID.put("minecraft:wool", 35);
-        BLOCK_NAME_TO_ID.put("minecraft:piston_extension", 36);
-        BLOCK_NAME_TO_ID.put("minecraft:yellow_flower", 37);
-        BLOCK_NAME_TO_ID.put("minecraft:red_flower", 38);
-        BLOCK_NAME_TO_ID.put("minecraft:brown_mushroom", 39);
-        BLOCK_NAME_TO_ID.put("minecraft:red_mushroom", 40);
-        BLOCK_NAME_TO_ID.put("minecraft:gold_block", 41);
-        BLOCK_NAME_TO_ID.put("minecraft:iron_block", 42);
-        BLOCK_NAME_TO_ID.put("minecraft:double_stone_slab", 43);
-        BLOCK_NAME_TO_ID.put("minecraft:stone_slab", 44);
-        BLOCK_NAME_TO_ID.put("minecraft:brick_block", 45);
-        BLOCK_NAME_TO_ID.put("minecraft:tnt", 46);
-        BLOCK_NAME_TO_ID.put("minecraft:bookshelf", 47);
-        BLOCK_NAME_TO_ID.put("minecraft:mossy_cobblestone", 48);
-        BLOCK_NAME_TO_ID.put("minecraft:obsidian", 49);
-        BLOCK_NAME_TO_ID.put("minecraft:torch", 50);
-        BLOCK_NAME_TO_ID.put("minecraft:fire", 51);
-        BLOCK_NAME_TO_ID.put("minecraft:mob_spawner", 52);
-        BLOCK_NAME_TO_ID.put("minecraft:oak_stairs", 53);
-        BLOCK_NAME_TO_ID.put("minecraft:chest", 54);
-        BLOCK_NAME_TO_ID.put("minecraft:redstone_wire", 55);
-        BLOCK_NAME_TO_ID.put("minecraft:diamond_ore", 56);
-        BLOCK_NAME_TO_ID.put("minecraft:diamond_block", 57);
-        BLOCK_NAME_TO_ID.put("minecraft:crafting_table", 58);
-        BLOCK_NAME_TO_ID.put("minecraft:wheat", 59);
-        BLOCK_NAME_TO_ID.put("minecraft:farmland", 60);
-        BLOCK_NAME_TO_ID.put("minecraft:furnace", 61);
-        BLOCK_NAME_TO_ID.put("minecraft:lit_furnace", 62);
-        BLOCK_NAME_TO_ID.put("minecraft:standing_sign", 63);
-        BLOCK_NAME_TO_ID.put("minecraft:wooden_door", 64);
-        BLOCK_NAME_TO_ID.put("minecraft:ladder", 65);
-        BLOCK_NAME_TO_ID.put("minecraft:rail", 66);
-        BLOCK_NAME_TO_ID.put("minecraft:stone_stairs", 67);
-        BLOCK_NAME_TO_ID.put("minecraft:wall_sign", 68);
-        BLOCK_NAME_TO_ID.put("minecraft:lever", 69);
-        BLOCK_NAME_TO_ID.put("minecraft:stone_pressure_plate", 70);
-        BLOCK_NAME_TO_ID.put("minecraft:iron_door", 71);
-        BLOCK_NAME_TO_ID.put("minecraft:wooden_pressure_plate", 72);
-        BLOCK_NAME_TO_ID.put("minecraft:redstone_ore", 73);
-        BLOCK_NAME_TO_ID.put("minecraft:lit_redstone_ore", 74);
-        BLOCK_NAME_TO_ID.put("minecraft:unlit_redstone_torch", 75);
-        BLOCK_NAME_TO_ID.put("minecraft:redstone_torch", 76);
-        BLOCK_NAME_TO_ID.put("minecraft:stone_button", 77);
-        BLOCK_NAME_TO_ID.put("minecraft:snow_layer", 78);
-        BLOCK_NAME_TO_ID.put("minecraft:ice", 79);
-        BLOCK_NAME_TO_ID.put("minecraft:snow", 80);
-        BLOCK_NAME_TO_ID.put("minecraft:cactus", 81);
-        BLOCK_NAME_TO_ID.put("minecraft:clay", 82);
-        BLOCK_NAME_TO_ID.put("minecraft:reeds", 83);
-        BLOCK_NAME_TO_ID.put("minecraft:jukebox", 84);
-        BLOCK_NAME_TO_ID.put("minecraft:fence", 85);
-        BLOCK_NAME_TO_ID.put("minecraft:pumpkin", 86);
-        BLOCK_NAME_TO_ID.put("minecraft:netherrack", 87);
-        BLOCK_NAME_TO_ID.put("minecraft:soul_sand", 88);
-        BLOCK_NAME_TO_ID.put("minecraft:glowstone", 89);
-        BLOCK_NAME_TO_ID.put("minecraft:portal", 90);
-        BLOCK_NAME_TO_ID.put("minecraft:lit_pumpkin", 91);
-        BLOCK_NAME_TO_ID.put("minecraft:cake", 92);
-        BLOCK_NAME_TO_ID.put("minecraft:unpowered_repeater", 93);
-        BLOCK_NAME_TO_ID.put("minecraft:powered_repeater", 94);
-        BLOCK_NAME_TO_ID.put("minecraft:stained_glass", 95);
-        BLOCK_NAME_TO_ID.put("minecraft:trapdoor", 96);
-        BLOCK_NAME_TO_ID.put("minecraft:monster_egg", 97);
-        BLOCK_NAME_TO_ID.put("minecraft:stonebrick", 98);
-        BLOCK_NAME_TO_ID.put("minecraft:brown_mushroom_block", 99);
-        BLOCK_NAME_TO_ID.put("minecraft:red_mushroom_block", 100);
-        BLOCK_NAME_TO_ID.put("minecraft:iron_bars", 101);
-        BLOCK_NAME_TO_ID.put("minecraft:glass_pane", 102);
-        BLOCK_NAME_TO_ID.put("minecraft:melon_block", 103);
-        BLOCK_NAME_TO_ID.put("minecraft:pumpkin_stem", 104);
-        BLOCK_NAME_TO_ID.put("minecraft:melon_stem", 105);
-        BLOCK_NAME_TO_ID.put("minecraft:vine", 106);
-        BLOCK_NAME_TO_ID.put("minecraft:fence_gate", 107);
-        BLOCK_NAME_TO_ID.put("minecraft:brick_stairs", 108);
-        BLOCK_NAME_TO_ID.put("minecraft:stone_brick_stairs", 109);
-        BLOCK_NAME_TO_ID.put("minecraft:mycelium", 110);
-        BLOCK_NAME_TO_ID.put("minecraft:waterlily", 111);
-        BLOCK_NAME_TO_ID.put("minecraft:nether_brick", 112);
-        BLOCK_NAME_TO_ID.put("minecraft:nether_brick_fence", 113);
-        BLOCK_NAME_TO_ID.put("minecraft:nether_brick_stairs", 114);
-        BLOCK_NAME_TO_ID.put("minecraft:nether_wart", 115);
-        BLOCK_NAME_TO_ID.put("minecraft:enchanting_table", 116);
-        BLOCK_NAME_TO_ID.put("minecraft:brewing_stand", 117);
-        BLOCK_NAME_TO_ID.put("minecraft:cauldron", 118);
-        BLOCK_NAME_TO_ID.put("minecraft:end_portal", 119);
-        BLOCK_NAME_TO_ID.put("minecraft:end_portal_frame", 120);
-        BLOCK_NAME_TO_ID.put("minecraft:end_stone", 121);
-        BLOCK_NAME_TO_ID.put("minecraft:dragon_egg", 122);
-        BLOCK_NAME_TO_ID.put("minecraft:redstone_lamp", 123);
-        BLOCK_NAME_TO_ID.put("minecraft:lit_redstone_lamp", 124);
-        BLOCK_NAME_TO_ID.put("minecraft:double_wooden_slab", 125);
-        BLOCK_NAME_TO_ID.put("minecraft:wooden_slab", 126);
-        BLOCK_NAME_TO_ID.put("minecraft:cocoa", 127);
-        BLOCK_NAME_TO_ID.put("minecraft:sandstone_stairs", 128);
-        BLOCK_NAME_TO_ID.put("minecraft:emerald_ore", 129);
-        BLOCK_NAME_TO_ID.put("minecraft:ender_chest", 130);
-        BLOCK_NAME_TO_ID.put("minecraft:tripwire_hook", 131);
-        BLOCK_NAME_TO_ID.put("minecraft:tripwire", 132);
-        BLOCK_NAME_TO_ID.put("minecraft:emerald_block", 133);
-        BLOCK_NAME_TO_ID.put("minecraft:spruce_stairs", 134);
-        BLOCK_NAME_TO_ID.put("minecraft:birch_stairs", 135);
-        BLOCK_NAME_TO_ID.put("minecraft:jungle_stairs", 136);
-        BLOCK_NAME_TO_ID.put("minecraft:command_block", 137);
-        BLOCK_NAME_TO_ID.put("minecraft:beacon", 138);
-        BLOCK_NAME_TO_ID.put("minecraft:cobblestone_wall", 139);
-        BLOCK_NAME_TO_ID.put("minecraft:flower_pot", 140);
-        BLOCK_NAME_TO_ID.put("minecraft:carrots", 141);
-        BLOCK_NAME_TO_ID.put("minecraft:potatoes", 142);
-        BLOCK_NAME_TO_ID.put("minecraft:wooden_button", 143);
-        BLOCK_NAME_TO_ID.put("minecraft:skull", 144);
-        BLOCK_NAME_TO_ID.put("minecraft:anvil", 145);
-        BLOCK_NAME_TO_ID.put("minecraft:trapped_chest", 146);
-        BLOCK_NAME_TO_ID.put("minecraft:light_weighted_pressure_plate", 147);
-        BLOCK_NAME_TO_ID.put("minecraft:heavy_weighted_pressure_plate", 148);
-        BLOCK_NAME_TO_ID.put("minecraft:unpowered_comparator", 149);
-        BLOCK_NAME_TO_ID.put("minecraft:powered_comparator", 150);
-        BLOCK_NAME_TO_ID.put("minecraft:daylight_detector", 151);
-        BLOCK_NAME_TO_ID.put("minecraft:redstone_block", 152);
-        BLOCK_NAME_TO_ID.put("minecraft:quartz_ore", 153);
-        BLOCK_NAME_TO_ID.put("minecraft:hopper", 154);
-        BLOCK_NAME_TO_ID.put("minecraft:quartz_block", 155);
-        BLOCK_NAME_TO_ID.put("minecraft:quartz_stairs", 156);
-        BLOCK_NAME_TO_ID.put("minecraft:activator_rail", 157);
-        BLOCK_NAME_TO_ID.put("minecraft:dropper", 158);
-        BLOCK_NAME_TO_ID.put("minecraft:stained_hardened_clay", 159);
-        BLOCK_NAME_TO_ID.put("minecraft:stained_glass_pane", 160);
-        BLOCK_NAME_TO_ID.put("minecraft:leaves2", 161);
-        BLOCK_NAME_TO_ID.put("minecraft:log2", 162);
-        BLOCK_NAME_TO_ID.put("minecraft:acacia_stairs", 163);
-        BLOCK_NAME_TO_ID.put("minecraft:dark_oak_stairs", 164);
-        BLOCK_NAME_TO_ID.put("minecraft:slime", 165);
-        BLOCK_NAME_TO_ID.put("minecraft:barrier", 166);
-        BLOCK_NAME_TO_ID.put("minecraft:iron_trapdoor", 167);
-        BLOCK_NAME_TO_ID.put("minecraft:prismarine", 168);
-        BLOCK_NAME_TO_ID.put("minecraft:sea_lantern", 169);
-        BLOCK_NAME_TO_ID.put("minecraft:hay_block", 170);
-        BLOCK_NAME_TO_ID.put("minecraft:carpet", 171);
-        BLOCK_NAME_TO_ID.put("minecraft:hardened_clay", 172);
-        BLOCK_NAME_TO_ID.put("minecraft:coal_block", 173);
-        BLOCK_NAME_TO_ID.put("minecraft:packed_ice", 174);
-        BLOCK_NAME_TO_ID.put("minecraft:double_plant", 175);
-        BLOCK_NAME_TO_ID.put("minecraft:standing_banner", 176);
-        BLOCK_NAME_TO_ID.put("minecraft:wall_banner", 177);
-        BLOCK_NAME_TO_ID.put("minecraft:daylight_detector_inverted", 178);
-        BLOCK_NAME_TO_ID.put("minecraft:red_sandstone", 179);
-        BLOCK_NAME_TO_ID.put("minecraft:red_sandstone_stairs", 180);
-        BLOCK_NAME_TO_ID.put("minecraft:double_stone_slab2", 181);
-        BLOCK_NAME_TO_ID.put("minecraft:stone_slab2", 182);
-        BLOCK_NAME_TO_ID.put("minecraft:spruce_fence_gate", 183);
-        BLOCK_NAME_TO_ID.put("minecraft:birch_fence_gate", 184);
-        BLOCK_NAME_TO_ID.put("minecraft:jungle_fence_gate", 185);
-        BLOCK_NAME_TO_ID.put("minecraft:dark_oak_fence_gate", 186);
-        BLOCK_NAME_TO_ID.put("minecraft:acacia_fence_gate", 187);
-        BLOCK_NAME_TO_ID.put("minecraft:spruce_fence", 188);
-        BLOCK_NAME_TO_ID.put("minecraft:birch_fence", 189);
-        BLOCK_NAME_TO_ID.put("minecraft:jungle_fence", 190);
-        BLOCK_NAME_TO_ID.put("minecraft:dark_oak_fence", 191);
-        BLOCK_NAME_TO_ID.put("minecraft:acacia_fence", 192);
-        BLOCK_NAME_TO_ID.put("minecraft:spruce_door", 193);
-        BLOCK_NAME_TO_ID.put("minecraft:birch_door", 194);
-        BLOCK_NAME_TO_ID.put("minecraft:jungle_door", 195);
-        BLOCK_NAME_TO_ID.put("minecraft:acacia_door", 196);
-        BLOCK_NAME_TO_ID.put("minecraft:dark_oak_door", 197);
-        BLOCK_NAME_TO_ID.put("minecraft:end_rod", 198);
-        BLOCK_NAME_TO_ID.put("minecraft:chorus_plant", 199);
-        BLOCK_NAME_TO_ID.put("minecraft:chorus_flower", 200);
-        BLOCK_NAME_TO_ID.put("minecraft:purpur_block", 201);
-        BLOCK_NAME_TO_ID.put("minecraft:purpur_pillar", 202);
-        BLOCK_NAME_TO_ID.put("minecraft:purpur_stairs", 203);
-        BLOCK_NAME_TO_ID.put("minecraft:purpur_double_slab", 204);
-        BLOCK_NAME_TO_ID.put("minecraft:purpur_slab", 205);
-        BLOCK_NAME_TO_ID.put("minecraft:end_bricks", 206);
-        BLOCK_NAME_TO_ID.put("minecraft:beetroots", 207);
-        BLOCK_NAME_TO_ID.put("minecraft:grass_path", 208);
-        BLOCK_NAME_TO_ID.put("minecraft:end_gateway", 209);
-        BLOCK_NAME_TO_ID.put("minecraft:repeating_command_block", 210);
-        BLOCK_NAME_TO_ID.put("minecraft:chain_command_block", 211);
-        BLOCK_NAME_TO_ID.put("minecraft:frosted_ice", 212);
-        BLOCK_NAME_TO_ID.put("minecraft:magma", 213);
-        BLOCK_NAME_TO_ID.put("minecraft:nether_wart_block", 214);
-        BLOCK_NAME_TO_ID.put("minecraft:red_nether_brick", 215);
-        BLOCK_NAME_TO_ID.put("minecraft:bone_block", 216);
-        BLOCK_NAME_TO_ID.put("minecraft:structure_void", 217);
-        BLOCK_NAME_TO_ID.put("minecraft:observer", 218);
-        BLOCK_NAME_TO_ID.put("minecraft:white_shulker_box", 219);
-        BLOCK_NAME_TO_ID.put("minecraft:orange_shulker_box", 220);
-        BLOCK_NAME_TO_ID.put("minecraft:magenta_shulker_box", 221);
-        BLOCK_NAME_TO_ID.put("minecraft:light_blue_shulker_box", 222);
-        BLOCK_NAME_TO_ID.put("minecraft:yellow_shulker_box", 223);
-        BLOCK_NAME_TO_ID.put("minecraft:lime_shulker_box", 224);
-        BLOCK_NAME_TO_ID.put("minecraft:pink_shulker_box", 225);
-        BLOCK_NAME_TO_ID.put("minecraft:gray_shulker_box", 226);
-        BLOCK_NAME_TO_ID.put("minecraft:silver_shulker_box", 227);
-        BLOCK_NAME_TO_ID.put("minecraft:cyan_shulker_box", 228);
-        BLOCK_NAME_TO_ID.put("minecraft:purple_shulker_box", 229);
-        BLOCK_NAME_TO_ID.put("minecraft:blue_shulker_box", 230);
-        BLOCK_NAME_TO_ID.put("minecraft:brown_shulker_box", 231);
-        BLOCK_NAME_TO_ID.put("minecraft:green_shulker_box", 232);
-        BLOCK_NAME_TO_ID.put("minecraft:red_shulker_box", 233);
-        BLOCK_NAME_TO_ID.put("minecraft:black_shulker_box", 234);
-        BLOCK_NAME_TO_ID.put("minecraft:white_glazed_terracotta", 235);
-        BLOCK_NAME_TO_ID.put("minecraft:orange_glazed_terracotta", 236);
-        BLOCK_NAME_TO_ID.put("minecraft:magenta_glazed_terracotta", 237);
-        BLOCK_NAME_TO_ID.put("minecraft:light_blue_glazed_terracotta", 238);
-        BLOCK_NAME_TO_ID.put("minecraft:yellow_glazed_terracotta", 239);
-        BLOCK_NAME_TO_ID.put("minecraft:lime_glazed_terracotta", 240);
-        BLOCK_NAME_TO_ID.put("minecraft:pink_glazed_terracotta", 241);
-        BLOCK_NAME_TO_ID.put("minecraft:gray_glazed_terracotta", 242);
-        BLOCK_NAME_TO_ID.put("minecraft:silver_glazed_terracotta", 243);
-        BLOCK_NAME_TO_ID.put("minecraft:cyan_glazed_terracotta", 244);
-        BLOCK_NAME_TO_ID.put("minecraft:purple_glazed_terracotta", 245);
-        BLOCK_NAME_TO_ID.put("minecraft:blue_glazed_terracotta", 246);
-        BLOCK_NAME_TO_ID.put("minecraft:brown_glazed_terracotta", 247);
-        BLOCK_NAME_TO_ID.put("minecraft:green_glazed_terracotta", 248);
-        BLOCK_NAME_TO_ID.put("minecraft:red_glazed_terracotta", 249);
-        BLOCK_NAME_TO_ID.put("minecraft:black_glazed_terracotta", 250);
-        BLOCK_NAME_TO_ID.put("minecraft:concrete", 251);
-        BLOCK_NAME_TO_ID.put("minecraft:concrete_powder", 252);
-        BLOCK_NAME_TO_ID.put("minecraft:structure_block", 255);
+        BLOCK_NAME_TO_ID.put("minecraft:air", Integer.valueOf(0));
+        BLOCK_NAME_TO_ID.put("minecraft:stone", Integer.valueOf(1));
+        BLOCK_NAME_TO_ID.put("minecraft:grass", Integer.valueOf(2));
+        BLOCK_NAME_TO_ID.put("minecraft:dirt", Integer.valueOf(3));
+        BLOCK_NAME_TO_ID.put("minecraft:cobblestone", Integer.valueOf(4));
+        BLOCK_NAME_TO_ID.put("minecraft:planks", Integer.valueOf(5));
+        BLOCK_NAME_TO_ID.put("minecraft:sapling", Integer.valueOf(6));
+        BLOCK_NAME_TO_ID.put("minecraft:bedrock", Integer.valueOf(7));
+        BLOCK_NAME_TO_ID.put("minecraft:flowing_water", Integer.valueOf(8));
+        BLOCK_NAME_TO_ID.put("minecraft:water", Integer.valueOf(9));
+        BLOCK_NAME_TO_ID.put("minecraft:flowing_lava", Integer.valueOf(10));
+        BLOCK_NAME_TO_ID.put("minecraft:lava", Integer.valueOf(11));
+        BLOCK_NAME_TO_ID.put("minecraft:sand", Integer.valueOf(12));
+        BLOCK_NAME_TO_ID.put("minecraft:gravel", Integer.valueOf(13));
+        BLOCK_NAME_TO_ID.put("minecraft:gold_ore", Integer.valueOf(14));
+        BLOCK_NAME_TO_ID.put("minecraft:iron_ore", Integer.valueOf(15));
+        BLOCK_NAME_TO_ID.put("minecraft:coal_ore", Integer.valueOf(16));
+        BLOCK_NAME_TO_ID.put("minecraft:log", Integer.valueOf(17));
+        BLOCK_NAME_TO_ID.put("minecraft:leaves", Integer.valueOf(18));
+        BLOCK_NAME_TO_ID.put("minecraft:sponge", Integer.valueOf(19));
+        BLOCK_NAME_TO_ID.put("minecraft:glass", Integer.valueOf(20));
+        BLOCK_NAME_TO_ID.put("minecraft:lapis_ore", Integer.valueOf(21));
+        BLOCK_NAME_TO_ID.put("minecraft:lapis_block", Integer.valueOf(22));
+        BLOCK_NAME_TO_ID.put("minecraft:dispenser", Integer.valueOf(23));
+        BLOCK_NAME_TO_ID.put("minecraft:sandstone", Integer.valueOf(24));
+        BLOCK_NAME_TO_ID.put("minecraft:noteblock", Integer.valueOf(25));
+        BLOCK_NAME_TO_ID.put("minecraft:bed", Integer.valueOf(26));
+        BLOCK_NAME_TO_ID.put("minecraft:golden_rail", Integer.valueOf(27));
+        BLOCK_NAME_TO_ID.put("minecraft:detector_rail", Integer.valueOf(28));
+        BLOCK_NAME_TO_ID.put("minecraft:sticky_piston", Integer.valueOf(29));
+        BLOCK_NAME_TO_ID.put("minecraft:web", Integer.valueOf(30));
+        BLOCK_NAME_TO_ID.put("minecraft:tallgrass", Integer.valueOf(31));
+        BLOCK_NAME_TO_ID.put("minecraft:deadbush", Integer.valueOf(32));
+        BLOCK_NAME_TO_ID.put("minecraft:piston", Integer.valueOf(33));
+        BLOCK_NAME_TO_ID.put("minecraft:piston_head", Integer.valueOf(34));
+        BLOCK_NAME_TO_ID.put("minecraft:wool", Integer.valueOf(35));
+        BLOCK_NAME_TO_ID.put("minecraft:piston_extension", Integer.valueOf(36));
+        BLOCK_NAME_TO_ID.put("minecraft:yellow_flower", Integer.valueOf(37));
+        BLOCK_NAME_TO_ID.put("minecraft:red_flower", Integer.valueOf(38));
+        BLOCK_NAME_TO_ID.put("minecraft:brown_mushroom", Integer.valueOf(39));
+        BLOCK_NAME_TO_ID.put("minecraft:red_mushroom", Integer.valueOf(40));
+        BLOCK_NAME_TO_ID.put("minecraft:gold_block", Integer.valueOf(41));
+        BLOCK_NAME_TO_ID.put("minecraft:iron_block", Integer.valueOf(42));
+        BLOCK_NAME_TO_ID.put("minecraft:double_stone_slab", Integer.valueOf(43));
+        BLOCK_NAME_TO_ID.put("minecraft:stone_slab", Integer.valueOf(44));
+        BLOCK_NAME_TO_ID.put("minecraft:brick_block", Integer.valueOf(45));
+        BLOCK_NAME_TO_ID.put("minecraft:tnt", Integer.valueOf(46));
+        BLOCK_NAME_TO_ID.put("minecraft:bookshelf", Integer.valueOf(47));
+        BLOCK_NAME_TO_ID.put("minecraft:mossy_cobblestone", Integer.valueOf(48));
+        BLOCK_NAME_TO_ID.put("minecraft:obsidian", Integer.valueOf(49));
+        BLOCK_NAME_TO_ID.put("minecraft:torch", Integer.valueOf(50));
+        BLOCK_NAME_TO_ID.put("minecraft:fire", Integer.valueOf(51));
+        BLOCK_NAME_TO_ID.put("minecraft:mob_spawner", Integer.valueOf(52));
+        BLOCK_NAME_TO_ID.put("minecraft:oak_stairs", Integer.valueOf(53));
+        BLOCK_NAME_TO_ID.put("minecraft:chest", Integer.valueOf(54));
+        BLOCK_NAME_TO_ID.put("minecraft:redstone_wire", Integer.valueOf(55));
+        BLOCK_NAME_TO_ID.put("minecraft:diamond_ore", Integer.valueOf(56));
+        BLOCK_NAME_TO_ID.put("minecraft:diamond_block", Integer.valueOf(57));
+        BLOCK_NAME_TO_ID.put("minecraft:crafting_table", Integer.valueOf(58));
+        BLOCK_NAME_TO_ID.put("minecraft:wheat", Integer.valueOf(59));
+        BLOCK_NAME_TO_ID.put("minecraft:farmland", Integer.valueOf(60));
+        BLOCK_NAME_TO_ID.put("minecraft:furnace", Integer.valueOf(61));
+        BLOCK_NAME_TO_ID.put("minecraft:lit_furnace", Integer.valueOf(62));
+        BLOCK_NAME_TO_ID.put("minecraft:standing_sign", Integer.valueOf(63));
+        BLOCK_NAME_TO_ID.put("minecraft:wooden_door", Integer.valueOf(64));
+        BLOCK_NAME_TO_ID.put("minecraft:ladder", Integer.valueOf(65));
+        BLOCK_NAME_TO_ID.put("minecraft:rail", Integer.valueOf(66));
+        BLOCK_NAME_TO_ID.put("minecraft:stone_stairs", Integer.valueOf(67));
+        BLOCK_NAME_TO_ID.put("minecraft:wall_sign", Integer.valueOf(68));
+        BLOCK_NAME_TO_ID.put("minecraft:lever", Integer.valueOf(69));
+        BLOCK_NAME_TO_ID.put("minecraft:stone_pressure_plate", Integer.valueOf(70));
+        BLOCK_NAME_TO_ID.put("minecraft:iron_door", Integer.valueOf(71));
+        BLOCK_NAME_TO_ID.put("minecraft:wooden_pressure_plate", Integer.valueOf(72));
+        BLOCK_NAME_TO_ID.put("minecraft:redstone_ore", Integer.valueOf(73));
+        BLOCK_NAME_TO_ID.put("minecraft:lit_redstone_ore", Integer.valueOf(74));
+        BLOCK_NAME_TO_ID.put("minecraft:unlit_redstone_torch", Integer.valueOf(75));
+        BLOCK_NAME_TO_ID.put("minecraft:redstone_torch", Integer.valueOf(76));
+        BLOCK_NAME_TO_ID.put("minecraft:stone_button", Integer.valueOf(77));
+        BLOCK_NAME_TO_ID.put("minecraft:snow_layer", Integer.valueOf(78));
+        BLOCK_NAME_TO_ID.put("minecraft:ice", Integer.valueOf(79));
+        BLOCK_NAME_TO_ID.put("minecraft:snow", Integer.valueOf(80));
+        BLOCK_NAME_TO_ID.put("minecraft:cactus", Integer.valueOf(81));
+        BLOCK_NAME_TO_ID.put("minecraft:clay", Integer.valueOf(82));
+        BLOCK_NAME_TO_ID.put("minecraft:reeds", Integer.valueOf(83));
+        BLOCK_NAME_TO_ID.put("minecraft:jukebox", Integer.valueOf(84));
+        BLOCK_NAME_TO_ID.put("minecraft:fence", Integer.valueOf(85));
+        BLOCK_NAME_TO_ID.put("minecraft:pumpkin", Integer.valueOf(86));
+        BLOCK_NAME_TO_ID.put("minecraft:netherrack", Integer.valueOf(87));
+        BLOCK_NAME_TO_ID.put("minecraft:soul_sand", Integer.valueOf(88));
+        BLOCK_NAME_TO_ID.put("minecraft:glowstone", Integer.valueOf(89));
+        BLOCK_NAME_TO_ID.put("minecraft:portal", Integer.valueOf(90));
+        BLOCK_NAME_TO_ID.put("minecraft:lit_pumpkin", Integer.valueOf(91));
+        BLOCK_NAME_TO_ID.put("minecraft:cake", Integer.valueOf(92));
+        BLOCK_NAME_TO_ID.put("minecraft:unpowered_repeater", Integer.valueOf(93));
+        BLOCK_NAME_TO_ID.put("minecraft:powered_repeater", Integer.valueOf(94));
+        BLOCK_NAME_TO_ID.put("minecraft:stained_glass", Integer.valueOf(95));
+        BLOCK_NAME_TO_ID.put("minecraft:trapdoor", Integer.valueOf(96));
+        BLOCK_NAME_TO_ID.put("minecraft:monster_egg", Integer.valueOf(97));
+        BLOCK_NAME_TO_ID.put("minecraft:stonebrick", Integer.valueOf(98));
+        BLOCK_NAME_TO_ID.put("minecraft:brown_mushroom_block", Integer.valueOf(99));
+        BLOCK_NAME_TO_ID.put("minecraft:red_mushroom_block", Integer.valueOf(100));
+        BLOCK_NAME_TO_ID.put("minecraft:iron_bars", Integer.valueOf(101));
+        BLOCK_NAME_TO_ID.put("minecraft:glass_pane", Integer.valueOf(102));
+        BLOCK_NAME_TO_ID.put("minecraft:melon_block", Integer.valueOf(103));
+        BLOCK_NAME_TO_ID.put("minecraft:pumpkin_stem", Integer.valueOf(104));
+        BLOCK_NAME_TO_ID.put("minecraft:melon_stem", Integer.valueOf(105));
+        BLOCK_NAME_TO_ID.put("minecraft:vine", Integer.valueOf(106));
+        BLOCK_NAME_TO_ID.put("minecraft:fence_gate", Integer.valueOf(107));
+        BLOCK_NAME_TO_ID.put("minecraft:brick_stairs", Integer.valueOf(108));
+        BLOCK_NAME_TO_ID.put("minecraft:stone_brick_stairs", Integer.valueOf(109));
+        BLOCK_NAME_TO_ID.put("minecraft:mycelium", Integer.valueOf(110));
+        BLOCK_NAME_TO_ID.put("minecraft:waterlily", Integer.valueOf(111));
+        BLOCK_NAME_TO_ID.put("minecraft:nether_brick", Integer.valueOf(112));
+        BLOCK_NAME_TO_ID.put("minecraft:nether_brick_fence", Integer.valueOf(113));
+        BLOCK_NAME_TO_ID.put("minecraft:nether_brick_stairs", Integer.valueOf(114));
+        BLOCK_NAME_TO_ID.put("minecraft:nether_wart", Integer.valueOf(115));
+        BLOCK_NAME_TO_ID.put("minecraft:enchanting_table", Integer.valueOf(116));
+        BLOCK_NAME_TO_ID.put("minecraft:brewing_stand", Integer.valueOf(117));
+        BLOCK_NAME_TO_ID.put("minecraft:cauldron", Integer.valueOf(118));
+        BLOCK_NAME_TO_ID.put("minecraft:end_portal", Integer.valueOf(119));
+        BLOCK_NAME_TO_ID.put("minecraft:end_portal_frame", Integer.valueOf(120));
+        BLOCK_NAME_TO_ID.put("minecraft:end_stone", Integer.valueOf(121));
+        BLOCK_NAME_TO_ID.put("minecraft:dragon_egg", Integer.valueOf(122));
+        BLOCK_NAME_TO_ID.put("minecraft:redstone_lamp", Integer.valueOf(123));
+        BLOCK_NAME_TO_ID.put("minecraft:lit_redstone_lamp", Integer.valueOf(124));
+        BLOCK_NAME_TO_ID.put("minecraft:double_wooden_slab", Integer.valueOf(125));
+        BLOCK_NAME_TO_ID.put("minecraft:wooden_slab", Integer.valueOf(126));
+        BLOCK_NAME_TO_ID.put("minecraft:cocoa", Integer.valueOf(127));
+        BLOCK_NAME_TO_ID.put("minecraft:sandstone_stairs", Integer.valueOf(128));
+        BLOCK_NAME_TO_ID.put("minecraft:emerald_ore", Integer.valueOf(129));
+        BLOCK_NAME_TO_ID.put("minecraft:ender_chest", Integer.valueOf(130));
+        BLOCK_NAME_TO_ID.put("minecraft:tripwire_hook", Integer.valueOf(131));
+        BLOCK_NAME_TO_ID.put("minecraft:tripwire", Integer.valueOf(132));
+        BLOCK_NAME_TO_ID.put("minecraft:emerald_block", Integer.valueOf(133));
+        BLOCK_NAME_TO_ID.put("minecraft:spruce_stairs", Integer.valueOf(134));
+        BLOCK_NAME_TO_ID.put("minecraft:birch_stairs", Integer.valueOf(135));
+        BLOCK_NAME_TO_ID.put("minecraft:jungle_stairs", Integer.valueOf(136));
+        BLOCK_NAME_TO_ID.put("minecraft:command_block", Integer.valueOf(137));
+        BLOCK_NAME_TO_ID.put("minecraft:beacon", Integer.valueOf(138));
+        BLOCK_NAME_TO_ID.put("minecraft:cobblestone_wall", Integer.valueOf(139));
+        BLOCK_NAME_TO_ID.put("minecraft:flower_pot", Integer.valueOf(140));
+        BLOCK_NAME_TO_ID.put("minecraft:carrots", Integer.valueOf(141));
+        BLOCK_NAME_TO_ID.put("minecraft:potatoes", Integer.valueOf(142));
+        BLOCK_NAME_TO_ID.put("minecraft:wooden_button", Integer.valueOf(143));
+        BLOCK_NAME_TO_ID.put("minecraft:skull", Integer.valueOf(144));
+        BLOCK_NAME_TO_ID.put("minecraft:anvil", Integer.valueOf(145));
+        BLOCK_NAME_TO_ID.put("minecraft:trapped_chest", Integer.valueOf(146));
+        BLOCK_NAME_TO_ID.put("minecraft:light_weighted_pressure_plate", Integer.valueOf(147));
+        BLOCK_NAME_TO_ID.put("minecraft:heavy_weighted_pressure_plate", Integer.valueOf(148));
+        BLOCK_NAME_TO_ID.put("minecraft:unpowered_comparator", Integer.valueOf(149));
+        BLOCK_NAME_TO_ID.put("minecraft:powered_comparator", Integer.valueOf(150));
+        BLOCK_NAME_TO_ID.put("minecraft:daylight_detector", Integer.valueOf(151));
+        BLOCK_NAME_TO_ID.put("minecraft:redstone_block", Integer.valueOf(152));
+        BLOCK_NAME_TO_ID.put("minecraft:quartz_ore", Integer.valueOf(153));
+        BLOCK_NAME_TO_ID.put("minecraft:hopper", Integer.valueOf(154));
+        BLOCK_NAME_TO_ID.put("minecraft:quartz_block", Integer.valueOf(155));
+        BLOCK_NAME_TO_ID.put("minecraft:quartz_stairs", Integer.valueOf(156));
+        BLOCK_NAME_TO_ID.put("minecraft:activator_rail", Integer.valueOf(157));
+        BLOCK_NAME_TO_ID.put("minecraft:dropper", Integer.valueOf(158));
+        BLOCK_NAME_TO_ID.put("minecraft:stained_hardened_clay", Integer.valueOf(159));
+        BLOCK_NAME_TO_ID.put("minecraft:stained_glass_pane", Integer.valueOf(160));
+        BLOCK_NAME_TO_ID.put("minecraft:leaves2", Integer.valueOf(161));
+        BLOCK_NAME_TO_ID.put("minecraft:log2", Integer.valueOf(162));
+        BLOCK_NAME_TO_ID.put("minecraft:acacia_stairs", Integer.valueOf(163));
+        BLOCK_NAME_TO_ID.put("minecraft:dark_oak_stairs", Integer.valueOf(164));
+        BLOCK_NAME_TO_ID.put("minecraft:slime", Integer.valueOf(165));
+        BLOCK_NAME_TO_ID.put("minecraft:barrier", Integer.valueOf(166));
+        BLOCK_NAME_TO_ID.put("minecraft:iron_trapdoor", Integer.valueOf(167));
+        BLOCK_NAME_TO_ID.put("minecraft:prismarine", Integer.valueOf(168));
+        BLOCK_NAME_TO_ID.put("minecraft:sea_lantern", Integer.valueOf(169));
+        BLOCK_NAME_TO_ID.put("minecraft:hay_block", Integer.valueOf(170));
+        BLOCK_NAME_TO_ID.put("minecraft:carpet", Integer.valueOf(171));
+        BLOCK_NAME_TO_ID.put("minecraft:hardened_clay", Integer.valueOf(172));
+        BLOCK_NAME_TO_ID.put("minecraft:coal_block", Integer.valueOf(173));
+        BLOCK_NAME_TO_ID.put("minecraft:packed_ice", Integer.valueOf(174));
+        BLOCK_NAME_TO_ID.put("minecraft:double_plant", Integer.valueOf(175));
+        BLOCK_NAME_TO_ID.put("minecraft:standing_banner", Integer.valueOf(176));
+        BLOCK_NAME_TO_ID.put("minecraft:wall_banner", Integer.valueOf(177));
+        BLOCK_NAME_TO_ID.put("minecraft:daylight_detector_inverted", Integer.valueOf(178));
+        BLOCK_NAME_TO_ID.put("minecraft:red_sandstone", Integer.valueOf(179));
+        BLOCK_NAME_TO_ID.put("minecraft:red_sandstone_stairs", Integer.valueOf(180));
+        BLOCK_NAME_TO_ID.put("minecraft:double_stone_slab2", Integer.valueOf(181));
+        BLOCK_NAME_TO_ID.put("minecraft:stone_slab2", Integer.valueOf(182));
+        BLOCK_NAME_TO_ID.put("minecraft:spruce_fence_gate", Integer.valueOf(183));
+        BLOCK_NAME_TO_ID.put("minecraft:birch_fence_gate", Integer.valueOf(184));
+        BLOCK_NAME_TO_ID.put("minecraft:jungle_fence_gate", Integer.valueOf(185));
+        BLOCK_NAME_TO_ID.put("minecraft:dark_oak_fence_gate", Integer.valueOf(186));
+        BLOCK_NAME_TO_ID.put("minecraft:acacia_fence_gate", Integer.valueOf(187));
+        BLOCK_NAME_TO_ID.put("minecraft:spruce_fence", Integer.valueOf(188));
+        BLOCK_NAME_TO_ID.put("minecraft:birch_fence", Integer.valueOf(189));
+        BLOCK_NAME_TO_ID.put("minecraft:jungle_fence", Integer.valueOf(190));
+        BLOCK_NAME_TO_ID.put("minecraft:dark_oak_fence", Integer.valueOf(191));
+        BLOCK_NAME_TO_ID.put("minecraft:acacia_fence", Integer.valueOf(192));
+        BLOCK_NAME_TO_ID.put("minecraft:spruce_door", Integer.valueOf(193));
+        BLOCK_NAME_TO_ID.put("minecraft:birch_door", Integer.valueOf(194));
+        BLOCK_NAME_TO_ID.put("minecraft:jungle_door", Integer.valueOf(195));
+        BLOCK_NAME_TO_ID.put("minecraft:acacia_door", Integer.valueOf(196));
+        BLOCK_NAME_TO_ID.put("minecraft:dark_oak_door", Integer.valueOf(197));
+        BLOCK_NAME_TO_ID.put("minecraft:end_rod", Integer.valueOf(198));
+        BLOCK_NAME_TO_ID.put("minecraft:chorus_plant", Integer.valueOf(199));
+        BLOCK_NAME_TO_ID.put("minecraft:chorus_flower", Integer.valueOf(200));
+        BLOCK_NAME_TO_ID.put("minecraft:purpur_block", Integer.valueOf(201));
+        BLOCK_NAME_TO_ID.put("minecraft:purpur_pillar", Integer.valueOf(202));
+        BLOCK_NAME_TO_ID.put("minecraft:purpur_stairs", Integer.valueOf(203));
+        BLOCK_NAME_TO_ID.put("minecraft:purpur_double_slab", Integer.valueOf(204));
+        BLOCK_NAME_TO_ID.put("minecraft:purpur_slab", Integer.valueOf(205));
+        BLOCK_NAME_TO_ID.put("minecraft:end_bricks", Integer.valueOf(206));
+        BLOCK_NAME_TO_ID.put("minecraft:beetroots", Integer.valueOf(207));
+        BLOCK_NAME_TO_ID.put("minecraft:grass_path", Integer.valueOf(208));
+        BLOCK_NAME_TO_ID.put("minecraft:end_gateway", Integer.valueOf(209));
+        BLOCK_NAME_TO_ID.put("minecraft:repeating_command_block", Integer.valueOf(210));
+        BLOCK_NAME_TO_ID.put("minecraft:chain_command_block", Integer.valueOf(211));
+        BLOCK_NAME_TO_ID.put("minecraft:frosted_ice", Integer.valueOf(212));
+        BLOCK_NAME_TO_ID.put("minecraft:magma", Integer.valueOf(213));
+        BLOCK_NAME_TO_ID.put("minecraft:nether_wart_block", Integer.valueOf(214));
+        BLOCK_NAME_TO_ID.put("minecraft:red_nether_brick", Integer.valueOf(215));
+        BLOCK_NAME_TO_ID.put("minecraft:bone_block", Integer.valueOf(216));
+        BLOCK_NAME_TO_ID.put("minecraft:structure_void", Integer.valueOf(217));
+        BLOCK_NAME_TO_ID.put("minecraft:observer", Integer.valueOf(218));
+        BLOCK_NAME_TO_ID.put("minecraft:white_shulker_box", Integer.valueOf(219));
+        BLOCK_NAME_TO_ID.put("minecraft:orange_shulker_box", Integer.valueOf(220));
+        BLOCK_NAME_TO_ID.put("minecraft:magenta_shulker_box", Integer.valueOf(221));
+        BLOCK_NAME_TO_ID.put("minecraft:light_blue_shulker_box", Integer.valueOf(222));
+        BLOCK_NAME_TO_ID.put("minecraft:yellow_shulker_box", Integer.valueOf(223));
+        BLOCK_NAME_TO_ID.put("minecraft:lime_shulker_box", Integer.valueOf(224));
+        BLOCK_NAME_TO_ID.put("minecraft:pink_shulker_box", Integer.valueOf(225));
+        BLOCK_NAME_TO_ID.put("minecraft:gray_shulker_box", Integer.valueOf(226));
+        BLOCK_NAME_TO_ID.put("minecraft:silver_shulker_box", Integer.valueOf(227));
+        BLOCK_NAME_TO_ID.put("minecraft:cyan_shulker_box", Integer.valueOf(228));
+        BLOCK_NAME_TO_ID.put("minecraft:purple_shulker_box", Integer.valueOf(229));
+        BLOCK_NAME_TO_ID.put("minecraft:blue_shulker_box", Integer.valueOf(230));
+        BLOCK_NAME_TO_ID.put("minecraft:brown_shulker_box", Integer.valueOf(231));
+        BLOCK_NAME_TO_ID.put("minecraft:green_shulker_box", Integer.valueOf(232));
+        BLOCK_NAME_TO_ID.put("minecraft:red_shulker_box", Integer.valueOf(233));
+        BLOCK_NAME_TO_ID.put("minecraft:black_shulker_box", Integer.valueOf(234));
+        BLOCK_NAME_TO_ID.put("minecraft:white_glazed_terracotta", Integer.valueOf(235));
+        BLOCK_NAME_TO_ID.put("minecraft:orange_glazed_terracotta", Integer.valueOf(236));
+        BLOCK_NAME_TO_ID.put("minecraft:magenta_glazed_terracotta", Integer.valueOf(237));
+        BLOCK_NAME_TO_ID.put("minecraft:light_blue_glazed_terracotta", Integer.valueOf(238));
+        BLOCK_NAME_TO_ID.put("minecraft:yellow_glazed_terracotta", Integer.valueOf(239));
+        BLOCK_NAME_TO_ID.put("minecraft:lime_glazed_terracotta", Integer.valueOf(240));
+        BLOCK_NAME_TO_ID.put("minecraft:pink_glazed_terracotta", Integer.valueOf(241));
+        BLOCK_NAME_TO_ID.put("minecraft:gray_glazed_terracotta", Integer.valueOf(242));
+        BLOCK_NAME_TO_ID.put("minecraft:silver_glazed_terracotta", Integer.valueOf(243));
+        BLOCK_NAME_TO_ID.put("minecraft:cyan_glazed_terracotta", Integer.valueOf(244));
+        BLOCK_NAME_TO_ID.put("minecraft:purple_glazed_terracotta", Integer.valueOf(245));
+        BLOCK_NAME_TO_ID.put("minecraft:blue_glazed_terracotta", Integer.valueOf(246));
+        BLOCK_NAME_TO_ID.put("minecraft:brown_glazed_terracotta", Integer.valueOf(247));
+        BLOCK_NAME_TO_ID.put("minecraft:green_glazed_terracotta", Integer.valueOf(248));
+        BLOCK_NAME_TO_ID.put("minecraft:red_glazed_terracotta", Integer.valueOf(249));
+        BLOCK_NAME_TO_ID.put("minecraft:black_glazed_terracotta", Integer.valueOf(250));
+        BLOCK_NAME_TO_ID.put("minecraft:concrete", Integer.valueOf(251));
+        BLOCK_NAME_TO_ID.put("minecraft:concrete_powder", Integer.valueOf(252));
+        BLOCK_NAME_TO_ID.put("minecraft:structure_block", Integer.valueOf(255));
     }
 
     protected static final int VERSION = MCVersions.V17W47A;
diff --git a/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V1506.java b/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V1506.java
index 065ee82c4a5f225c6f46c10c25497222ab410621..6df567c6ec99feb73514962b06a3f296fd61381a 100644
--- a/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V1506.java
+++ b/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V1506.java
@@ -176,9 +176,9 @@ public final class V1506 {
             }
         } else {
             layers = Lists.newArrayList();
-            layers.add(Pair.of(1, "minecraft:bedrock"));
-            layers.add(Pair.of(2, "minecraft:dirt"));
-            layers.add(Pair.of(1, "minecraft:grass_block"));
+            layers.add(Pair.of(Integer.valueOf(1), "minecraft:bedrock"));
+            layers.add(Pair.of(Integer.valueOf(2), "minecraft:dirt"));
+            layers.add(Pair.of(Integer.valueOf(1), "minecraft:grass_block"));
             structures.put("village", Maps.newHashMap());
         }
 
@@ -201,7 +201,7 @@ public final class V1506 {
         }
 
         final String blockName = split[split.length - 1];
-        return Pair.of(layerCount, blockName);
+        return Pair.of(Integer.valueOf(layerCount), blockName);
     }
 
     private static @NotNull List<Pair<Integer, String>> getLayersInfoFromString(final @NotNull String layersString) {
diff --git a/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V1624.java b/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V1624.java
index 2a6b268108186066b82f0bf3566fdefa1de5e3e1..d456984608818ed0d3808e9e2b4df0d804a765de 100644
--- a/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V1624.java
+++ b/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V1624.java
@@ -70,7 +70,7 @@ public final class V1624 {
 
                         final String id = tile.getString("id");
                         if (!"minecraft:chest".equals(id)) {
-                            LOGGER.warn("Block Entity ({},{},{}) was expected to be a chest (V1624)", x, y, z);
+                            LOGGER.warn("Block Entity ({},{},{}) was expected to be a chest (V1624)", Integer.valueOf(x), Integer.valueOf(y), Integer.valueOf(z));
                         }
 
                         tile.setString("id", "minecraft:trapped_chest");
diff --git a/src/main/java/ca/spottedleaf/dataconverter/util/Int2IntArraySortedMap.java b/src/main/java/ca/spottedleaf/dataconverter/util/Int2IntArraySortedMap.java
index feb36df38fdc8e1eabdc7f06d0dfd1ebc573497c..dd03889853ad315176553898fa2960ee561cede0 100644
--- a/src/main/java/ca/spottedleaf/dataconverter/util/Int2IntArraySortedMap.java
+++ b/src/main/java/ca/spottedleaf/dataconverter/util/Int2IntArraySortedMap.java
@@ -56,7 +56,7 @@ public class Int2IntArraySortedMap {
 
         this.key[insert] = key;
 
-        return this.val[insert] = producer.apply(key);
+        return this.val[insert] = producer.apply(Integer.valueOf(key));
     }
 
     public int get(final int key) {
diff --git a/src/main/java/ca/spottedleaf/dataconverter/util/Long2IntArraySortedMap.java b/src/main/java/ca/spottedleaf/dataconverter/util/Long2IntArraySortedMap.java
index a32fd390ead963647818906e77300c3e1800f997..c7a23fe6928fa461b109d017022f0f446bbe5b93 100644
--- a/src/main/java/ca/spottedleaf/dataconverter/util/Long2IntArraySortedMap.java
+++ b/src/main/java/ca/spottedleaf/dataconverter/util/Long2IntArraySortedMap.java
@@ -56,7 +56,7 @@ public class Long2IntArraySortedMap {
 
         this.key[insert] = key;
 
-        return this.val[insert] = producer.apply(key);
+        return this.val[insert] = producer.apply(Long.valueOf(key));
     }
 
     public int get(final long key) {
diff --git a/src/main/java/co/aikar/timings/TimingsExport.java b/src/main/java/co/aikar/timings/TimingsExport.java
index cccde07d866c1623ce814820dad1f1999f0a8541..d5b45cd14a63c5eafe319da49ce81f485290e86b 100644
--- a/src/main/java/co/aikar/timings/TimingsExport.java
+++ b/src/main/java/co/aikar/timings/TimingsExport.java
@@ -111,11 +111,11 @@ public class TimingsExport extends Thread {
         Map parent = createObject(
             // Get some basic system details about the server
             pair("version", Bukkit.getVersion()),
-            pair("maxplayers", Bukkit.getMaxPlayers()),
-            pair("start", TimingsManager.timingStart / 1000),
-            pair("end", System.currentTimeMillis() / 1000),
-            pair("online-mode", Bukkit.getServer().getOnlineMode()),
-            pair("sampletime", (System.currentTimeMillis() - TimingsManager.timingStart) / 1000),
+            pair("maxplayers", Integer.valueOf(Bukkit.getMaxPlayers())),
+            pair("start", Long.valueOf(TimingsManager.timingStart / 1000)),
+            pair("end", Long.valueOf(System.currentTimeMillis() / 1000)),
+            pair("online-mode", Boolean.valueOf(Bukkit.getServer().getOnlineMode())),
+            pair("sampletime", Long.valueOf((System.currentTimeMillis() - TimingsManager.timingStart) / 1000)),
             pair("datapacks", toArrayMapper(MinecraftServer.getServer().getPackRepository().getSelectedPacks(), pack -> {
                 return PlainTextComponentSerializer.plainText().serialize(PaperAdventure.asAdventure(pack.getChatLink(true)));
             }))
@@ -136,25 +136,25 @@ public class TimingsExport extends Thread {
         HardwareAbstractionLayer hardwareInfo = new SystemInfo().getHardware();
 
         parent.put("system", createObject(
-                pair("timingcost", getCost()),
-                pair("loadavg", osInfo.getSystemLoadAverage()),
+                pair("timingcost", Long.valueOf(getCost())),
+                pair("loadavg", Double.valueOf(osInfo.getSystemLoadAverage())),
                 pair("name", System.getProperty("os.name")),
                 pair("version", System.getProperty("os.version")),
                 pair("jvmversion", System.getProperty("java.version")),
                 pair("jvmvendor", System.getProperty("java.vendor")),
                 pair("jvmvendorversion", System.getProperty("java.vendor.version")),
                 pair("arch", System.getProperty("os.arch")),
-                pair("maxmem", runtime.maxMemory()),
+                pair("maxmem", Long.valueOf(runtime.maxMemory())),
                 pair("memory", createObject(
                     pair("heap", ManagementFactory.getMemoryMXBean().getHeapMemoryUsage().toString()),
                     pair("nonheap", ManagementFactory.getMemoryMXBean().getNonHeapMemoryUsage().toString()),
-                    pair("finalizing", ManagementFactory.getMemoryMXBean().getObjectPendingFinalizationCount())
+                    pair("finalizing", Integer.valueOf(ManagementFactory.getMemoryMXBean().getObjectPendingFinalizationCount()))
                 )),
-                pair("cpu", runtime.availableProcessors()),
+                pair("cpu", Integer.valueOf(runtime.availableProcessors())),
                 pair("cpuname", hardwareInfo.getProcessor().getProcessorIdentifier().getName().trim()),
-                pair("runtime", runtimeBean.getUptime()),
+                pair("runtime", Long.valueOf(runtimeBean.getUptime())),
                 pair("flags", StringUtils.join(runtimeBean.getInputArguments(), " ")),
-                pair("gc", toObjectMapper(ManagementFactory.getGarbageCollectorMXBeans(), input -> pair(input.getName(), toArray(input.getCollectionCount(), input.getCollectionTime()))))
+                pair("gc", toObjectMapper(ManagementFactory.getGarbageCollectorMXBeans(), input -> pair(input.getName(), toArray(Long.valueOf(input.getCollectionCount()), Long.valueOf(input.getCollectionTime())))))
             )
         );
 
@@ -165,9 +165,9 @@ public class TimingsExport extends Thread {
                     return pair(rule, world.getWorld().getGameRuleValue(rule));
                 })),
                 // Paper start - replace chunk loader system
-                pair("ticking-distance", world.getChunkSource().chunkMap.playerChunkManager.getTargetTickViewDistance()),
-                pair("no-ticking-distance", world.getChunkSource().chunkMap.playerChunkManager.getTargetNoTickViewDistance()),
-                pair("sending-distance", world.getChunkSource().chunkMap.playerChunkManager.getTargetSendDistance())
+                pair("ticking-distance", Integer.valueOf(world.getChunkSource().chunkMap.playerChunkManager.getTargetTickViewDistance())),
+                pair("no-ticking-distance", Integer.valueOf(world.getChunkSource().chunkMap.playerChunkManager.getTargetNoTickViewDistance())),
+                pair("sending-distance", Integer.valueOf(world.getChunkSource().chunkMap.playerChunkManager.getTargetSendDistance()))
                 // Paper end - replace chunk loader system
             ));
         }));
@@ -204,8 +204,8 @@ public class TimingsExport extends Thread {
                         if (name.startsWith("##")) {
                             name = name.substring(3);
                         }
-                        handlers.put(id.id, toArray(
-                            group.id,
+                        handlers.put(Integer.valueOf(id.id), toArray(
+                            Integer.valueOf(group.id),
                             name
                         ));
                     }
diff --git a/src/main/java/com/destroystokyo/paper/Metrics.java b/src/main/java/com/destroystokyo/paper/Metrics.java
index 19d7677aacb7737face003c69cb7bd681ea101c1..e03fdd5cbd43357dbac73b778b532e523a3b61a2 100644
--- a/src/main/java/com/destroystokyo/paper/Metrics.java
+++ b/src/main/java/com/destroystokyo/paper/Metrics.java
@@ -153,7 +153,7 @@ public class Metrics {
         data.put("osName", osName);
         data.put("osArch", osArch);
         data.put("osVersion", osVersion);
-        data.put("coreCount", coreCount);
+        data.put("coreCount", Integer.valueOf(coreCount));
 
         return data;
     }
@@ -424,7 +424,7 @@ public class Metrics {
                 // Null = skip the chart
                 return null;
             }
-            data.put("value", value);
+            data.put("value", Integer.valueOf(value));
             return data;
         }
 
@@ -548,7 +548,7 @@ public class Metrics {
                 allSkipped = false;
                 JSONArray categoryValues = new JSONArray();
                 for (int categoryValue : entry.getValue()) {
-                    categoryValues.add(categoryValue);
+                    categoryValues.add(Integer.valueOf(categoryValue));
                 }
                 values.put(entry.getKey(), categoryValues);
             }
@@ -572,11 +572,11 @@ public class Metrics {
             if (!config.isSet("serverUuid")) {
 
                 // Add default values
-                config.addDefault("enabled", true);
+                config.addDefault("enabled", Boolean.TRUE);
                 // Every server gets it's unique random id.
                 config.addDefault("serverUuid", UUID.randomUUID().toString());
                 // Should failed request be logged?
-                config.addDefault("logFailedRequests", false);
+                config.addDefault("logFailedRequests", Boolean.FALSE);
 
                 // Inform the server owners about bStats
                 config.options().header(
@@ -603,7 +603,7 @@ public class Metrics {
                     return minecraftVersion;
                 }));
 
-                metrics.addCustomChart(new Metrics.SingleLineChart("players", () -> Bukkit.getOnlinePlayers().size()));
+                metrics.addCustomChart(new Metrics.SingleLineChart("players", () -> Integer.valueOf(Bukkit.getOnlinePlayers().size())));
                 metrics.addCustomChart(new Metrics.SimplePie("online_mode", () -> Bukkit.getOnlineMode() ? "online" : "offline"));
                 final String paperVersion;
                 final String implVersion = org.bukkit.craftbukkit.Main.class.getPackage().getImplementationVersion();
@@ -619,7 +619,7 @@ public class Metrics {
                     Map<String, Map<String, Integer>> map = new HashMap<>();
                     String javaVersion = System.getProperty("java.version");
                     Map<String, Integer> entry = new HashMap<>();
-                    entry.put(javaVersion, 1);
+                    entry.put(javaVersion, Integer.valueOf(1));
 
                     // http://openjdk.java.net/jeps/223
                     // Java decided to change their versioning scheme and in doing so modified the java.version system
@@ -659,7 +659,7 @@ public class Metrics {
 
                     // insert real value as lower dimension
                     Map<String, Integer> entry = new HashMap<>();
-                    entry.put(String.valueOf(legacy), 1);
+                    entry.put(String.valueOf(legacy), Integer.valueOf(1));
 
                     // create buckets as higher dimension
                     if (legacy == 0) {
diff --git a/src/main/java/com/destroystokyo/paper/PaperSkinParts.java b/src/main/java/com/destroystokyo/paper/PaperSkinParts.java
index 13ed1f19c13d01afbad586d9c4160beef25534dd..d9a6cbc6aa334c1f6ed3baf817743d3d097a8724 100644
--- a/src/main/java/com/destroystokyo/paper/PaperSkinParts.java
+++ b/src/main/java/com/destroystokyo/paper/PaperSkinParts.java
@@ -56,7 +56,7 @@ public class PaperSkinParts implements SkinParts {
 
     @Override
     public int hashCode() {
-        return Objects.hashCode(raw);
+        return Objects.hashCode(Integer.valueOf(raw));
     }
 
     @Override
diff --git a/src/main/java/com/destroystokyo/paper/gui/RAMGraph.java b/src/main/java/com/destroystokyo/paper/gui/RAMGraph.java
index acf90999c0d63f2dbc2a1eed3bd8d06f252acae2..53ae73d0df528b2ae5da6dd26c9be133f951a62d 100644
--- a/src/main/java/com/destroystokyo/paper/gui/RAMGraph.java
+++ b/src/main/java/com/destroystokyo/paper/gui/RAMGraph.java
@@ -130,8 +130,8 @@ public class RAMGraph extends JComponent {
             graphics.setColor(data.getLineColor());
             graphics.fillOval(m.x - 2, 100 - used - 2, 5, 5);
             setToolTipText(String.format("<html><body>Used: %s mb (%s%%)<br/>%s</body></html>",
-                Math.round(data.getUsedMem() / 1024F / 1024F),
-                used, getTime(m.x)));
+	            Integer.valueOf(Math.round(data.getUsedMem() / 1024F / 1024F)),
+	            Integer.valueOf(used), getTime(m.x)));
         }
     }
 
diff --git a/src/main/java/com/destroystokyo/paper/io/SyncLoadFinder.java b/src/main/java/com/destroystokyo/paper/io/SyncLoadFinder.java
index f7d4ffbdf1b04155a052a389fea4347affaf7f1e..c6f3bae19b6dce64fb1cced8656e7803b58859dc 100644
--- a/src/main/java/com/destroystokyo/paper/io/SyncLoadFinder.java
+++ b/src/main/java/com/destroystokyo/paper/io/SyncLoadFinder.java
@@ -90,7 +90,7 @@ public class SyncLoadFinder {
             for (Pair<ThrowableWithEquals, SyncLoadInformation> pair : data) {
                 final JsonObject stacktrace = new JsonObject();
 
-                stacktrace.addProperty("times", pair.getSecond().times);
+                stacktrace.addProperty("times", Integer.valueOf(pair.getSecond().times));
 
                 final JsonArray traces = new JsonArray();
 
diff --git a/src/main/java/com/destroystokyo/paper/loottable/PaperLootableInventoryData.java b/src/main/java/com/destroystokyo/paper/loottable/PaperLootableInventoryData.java
index 36ce68947a359a8f3a914577789c8895733f6098..5b86a1a90daf416d650a2ebe9db458f917a9b404 100644
--- a/src/main/java/com/destroystokyo/paper/loottable/PaperLootableInventoryData.java
+++ b/src/main/java/com/destroystokyo/paper/loottable/PaperLootableInventoryData.java
@@ -127,7 +127,7 @@ public class PaperLootableInventoryData {
             }
             for (int i = 0; i < size; i++) {
                 final CompoundTag cmp = list.getCompound(i);
-                lootedPlayers.put(cmp.getUUID("UUID"), cmp.getLong("Time"));
+                lootedPlayers.put(cmp.getUUID("UUID"), Long.valueOf(cmp.getLong("Time")));
             }
         }
     }
@@ -164,7 +164,7 @@ public class PaperLootableInventoryData {
         }
         if (looted) {
             if (!this.lootedPlayers.containsKey(player)) {
-                this.lootedPlayers.put(player, System.currentTimeMillis());
+                this.lootedPlayers.put(player, Long.valueOf(System.currentTimeMillis()));
             }
         } else if (this.lootedPlayers != null) {
             this.lootedPlayers.remove(player);
diff --git a/src/main/java/com/mojang/authlib/yggdrasil/YggdrasilGameProfileRepository.java b/src/main/java/com/mojang/authlib/yggdrasil/YggdrasilGameProfileRepository.java
index f4a351fde8d90d27ee397e71b02f8b0f58f453ee..56b47d59e8cbda1673b86e20c1873b6d10259eea 100644
--- a/src/main/java/com/mojang/authlib/yggdrasil/YggdrasilGameProfileRepository.java
+++ b/src/main/java/com/mojang/authlib/yggdrasil/YggdrasilGameProfileRepository.java
@@ -57,7 +57,7 @@ public class YggdrasilGameProfileRepository implements GameProfileRepository {
                     final ProfileSearchResultsResponse response = authenticationService.makeRequest(HttpAuthenticationService.constantURL(searchPageUrl + agent.getName().toLowerCase()), request, ProfileSearchResultsResponse.class);
                     failCount = 0;
 
-                    LOGGER.debug("Page {} returned {} results, parsing", page, response.getProfiles().length);
+                    LOGGER.debug("Page {} returned {} results, parsing", Integer.valueOf(page), Integer.valueOf(response.getProfiles().length));
 
                     final Set<String> missing = Sets.newHashSet(request);
                     for (final GameProfile profile : response.getProfiles()) {
diff --git a/src/main/java/com/mojang/datafixers/DataFixerBuilder.java b/src/main/java/com/mojang/datafixers/DataFixerBuilder.java
index d33314372bfb6594c3a9da3ec4462423bbef1f9e..565168f725a5379e752d588f64e797e9fb5da7e3 100644
--- a/src/main/java/com/mojang/datafixers/DataFixerBuilder.java
+++ b/src/main/java/com/mojang/datafixers/DataFixerBuilder.java
@@ -43,7 +43,7 @@ public class DataFixerBuilder {
     public Schema addSchema(final int version, final int subVersion, final @NotNull BiFunction<Integer, Schema, Schema> factory) {
         final int key = DataFixUtils.makeKey(version, subVersion);
         final Schema parent = schemas.isEmpty() ? null : schemas.get(DataFixerUpper.getLowestSchemaSameVersion(schemas, key - 1));
-        final Schema schema = factory.apply(DataFixUtils.makeKey(version, subVersion), parent);
+        final Schema schema = factory.apply(Integer.valueOf(DataFixUtils.makeKey(version, subVersion)), parent);
         addSchema(schema);
         return schema;
     }
@@ -56,7 +56,7 @@ public class DataFixerBuilder {
         final int version = DataFixUtils.getVersion(fix.getVersionKey());
 
         if (version > dataVersion) {
-            LOGGER.warn("Ignored fix registered for version: {} as the DataVersion of the game is: {}", version, dataVersion);
+            LOGGER.warn("Ignored fix registered for version: {} as the DataVersion of the game is: {}", Integer.valueOf(version), Integer.valueOf(dataVersion));
             return;
         }
 
@@ -94,7 +94,7 @@ public class DataFixerBuilder {
         }
 
         CompletableFuture.allOf(futures.toArray(CompletableFuture[]::new)).thenAccept(ignored -> {
-            LOGGER.info("{} Datafixer optimizations took {} milliseconds", futures.size(), Duration.between(started, Instant.now()).toMillis());
+            LOGGER.info("{} Datafixer optimizations took {} milliseconds", Integer.valueOf(futures.size()), Long.valueOf(Duration.between(started, Instant.now()).toMillis()));
         });
 
         return fixerUpper;
diff --git a/src/main/java/io/papermc/paper/command/subcommands/EntityCommand.java b/src/main/java/io/papermc/paper/command/subcommands/EntityCommand.java
index a38a0c11c9e12aeff73d792368e1a69a856376d4..6dc2082e2fe59555c71b657cb028789a0e11ed86 100644
--- a/src/main/java/io/papermc/paper/command/subcommands/EntityCommand.java
+++ b/src/main/java/io/papermc/paper/command/subcommands/EntityCommand.java
@@ -99,18 +99,18 @@ public final class EntityCommand implements PaperSubcommand {
             world.getAllEntities().forEach(e -> {
                 ResourceLocation key = EntityType.getKey(e.getType());
 
-                MutablePair<Integer, Map<ChunkPos, Integer>> info = list.computeIfAbsent(key, k -> MutablePair.of(0, Maps.newHashMap()));
+                MutablePair<Integer, Map<ChunkPos, Integer>> info = list.computeIfAbsent(key, k -> MutablePair.of(Integer.valueOf(0), Maps.newHashMap()));
                 ChunkPos chunk = e.chunkPosition();
                 info.left++;
-                info.right.put(chunk, info.right.getOrDefault(chunk, 0) + 1);
+                info.right.put(chunk, Integer.valueOf(info.right.getOrDefault(chunk, Integer.valueOf(0)) + 1));
                 if (!chunkProviderServer.isPositionTicking(e) || e instanceof net.minecraft.world.entity.Marker) { // Markers aren't ticked.
-                    nonEntityTicking.merge(key, 1, Integer::sum);
+                    nonEntityTicking.merge(key, Integer.valueOf(1), Integer::sum);
                 }
             });
             if (names.size() == 1) {
                 ResourceLocation name = names.iterator().next();
                 Pair<Integer, Map<ChunkPos, Integer>> info = list.get(name);
-                int nonTicking = nonEntityTicking.getOrDefault(name, 0);
+                int nonTicking = nonEntityTicking.getOrDefault(name, Integer.valueOf(0));
                 if (info == null) {
                     sender.sendMessage(text("No entities found.", RED));
                     return;
@@ -135,7 +135,7 @@ public final class EntityCommand implements PaperSubcommand {
                 int nonTickingCount = nonEntityTicking.values().stream().mapToInt(Integer::intValue).sum();
                 sender.sendMessage("Total Ticking: " + (count - nonTickingCount) + ", Total Non-Ticking: " + nonTickingCount);
                 info.forEach(e -> {
-                    int nonTicking = nonEntityTicking.getOrDefault(e.getKey(), 0);
+                    int nonTicking = nonEntityTicking.getOrDefault(e.getKey(), Integer.valueOf(0));
                     sender.sendMessage("  " + (e.getValue() - nonTicking) + " (" + nonTicking + ") " + ": " + e.getKey());
                 });
                 sender.sendMessage("* First number is ticking entities, second number is non-ticking entities");
diff --git a/src/main/java/io/papermc/paper/configuration/Configurations.java b/src/main/java/io/papermc/paper/configuration/Configurations.java
index 1e5c36cc2aea4acf7edccb6935754ab8ac5ced21..d98b6e213365a585ef3d47b1ba858bcecf2bc0b9 100644
--- a/src/main/java/io/papermc/paper/configuration/Configurations.java
+++ b/src/main/java/io/papermc/paper/configuration/Configurations.java
@@ -149,7 +149,7 @@ public abstract class Configurations<G, W> {
         final YamlConfigurationLoader loader = result.loader();
         final ConfigurationNode node = loader.load();
         if (result.isNewFile()) { // add version to new files
-            node.node(Configuration.VERSION_FIELD).raw(WorldConfiguration.CURRENT_VERSION);
+            node.node(Configuration.VERSION_FIELD).raw(Integer.valueOf(WorldConfiguration.CURRENT_VERSION));
         }
         this.applyWorldConfigTransformations(contextMap, node);
         final W instance = node.require(this.worldConfigClass);
@@ -208,7 +208,7 @@ public abstract class Configurations<G, W> {
             .build();
         final ConfigurationNode worldNode = worldLoader.load();
         if (newFile) { // set the version field if new file
-            worldNode.node(Configuration.VERSION_FIELD).set(WorldConfiguration.CURRENT_VERSION);
+            worldNode.node(Configuration.VERSION_FIELD).set(Integer.valueOf(WorldConfiguration.CURRENT_VERSION));
         }
         this.applyWorldConfigTransformations(contextMap, worldNode);
         this.applyDefaultsAwareWorldConfigTransformations(contextMap, worldNode, defaultsNode);
diff --git a/src/main/java/io/papermc/paper/configuration/PaperConfigurations.java b/src/main/java/io/papermc/paper/configuration/PaperConfigurations.java
index 0b6d68350f608bb64a701d0e390283d50f12094e..9ad3c2d8903a7147a9ba632339c8025995a79d23 100644
--- a/src/main/java/io/papermc/paper/configuration/PaperConfigurations.java
+++ b/src/main/java/io/papermc/paper/configuration/PaperConfigurations.java
@@ -225,7 +225,7 @@ public class PaperConfigurations extends Configurations<GlobalConfiguration, Wor
         final String world = contextMap.require(WORLD_NAME);
         if (version.virtual()) {
             LOGGER.warn("The world config file for " + world + " didn't have a version set, assuming latest");
-            version.raw(WorldConfiguration.CURRENT_VERSION);
+            version.raw(Integer.valueOf(WorldConfiguration.CURRENT_VERSION));
         }
         ConfigurationTransformation.Builder builder = ConfigurationTransformation.builder();
         for (NodePath path : RemovedConfigurations.REMOVED_WORLD_PATHS) {
@@ -372,7 +372,7 @@ public class PaperConfigurations extends Configurations<GlobalConfiguration, Wor
 
         final ConfigurationNode worldDefaults = legacyWorldSettings.node("default").copy();
         checkState(!worldDefaults.virtual());
-        worldDefaults.node(Configuration.LEGACY_CONFIG_VERSION_FIELD).raw(version);
+        worldDefaults.node(Configuration.LEGACY_CONFIG_VERSION_FIELD).raw(Integer.valueOf(version));
         legacyWorldSettings.removeChild("default");
         LegacyPaperWorldConfig.transformation().apply(worldDefaults);
         LegacyPaperWorldConfig.toNewFormat().apply(worldDefaults);
@@ -380,7 +380,7 @@ public class PaperConfigurations extends Configurations<GlobalConfiguration, Wor
 
         legacyWorldSettings.childrenMap().forEach((world, legacyWorldNode) -> {
             try {
-                legacyWorldNode.node(Configuration.LEGACY_CONFIG_VERSION_FIELD).raw(version);
+                legacyWorldNode.node(Configuration.LEGACY_CONFIG_VERSION_FIELD).raw(Integer.valueOf(version));
                 LegacyPaperWorldConfig.transformation().apply(legacyWorldNode);
                 LegacyPaperWorldConfig.toNewFormat().apply(legacyWorldNode);
                 ConfigurationLoaders.naturallySortedWithoutHeader(worldFolder.resolve(world.toString()).resolve(WORLD_CONFIG_FILE_NAME)).save(legacyWorldNode); // save converted node to new location
diff --git a/src/main/java/io/papermc/paper/configuration/WorldConfiguration.java b/src/main/java/io/papermc/paper/configuration/WorldConfiguration.java
index 2e9590c73d867c3ebb42f695df4c796a0f477452..8a010e052f1bc86e633206ea0abb44d3819bd696 100644
--- a/src/main/java/io/papermc/paper/configuration/WorldConfiguration.java
+++ b/src/main/java/io/papermc/paper/configuration/WorldConfiguration.java
@@ -191,7 +191,7 @@ public class WorldConfiguration extends ConfigurationPart {
 
             public class AltItemDespawnRate extends ConfigurationPart {
                 public boolean enabled = false;
-                public Reference2IntMap<Item> items = new Reference2IntOpenHashMap<>(Map.of(Items.COBBLESTONE, 300));
+                public Reference2IntMap<Item> items = new Reference2IntOpenHashMap<>(Map.of(Items.COBBLESTONE, Integer.valueOf(300)));
             }
         }
 
@@ -432,8 +432,8 @@ public class WorldConfiguration extends ConfigurationPart {
         public int grassSpread = 1;
         public int containerUpdate = 1;
         public int mobSpawner = 1;
-        public Table<EntityType<?>, String, Integer> sensor = Util.make(HashBasedTable.create(), table -> table.put(EntityType.VILLAGER, "secondarypoisensor", 40));
-        public Table<EntityType<?>, String, Integer> behavior = Util.make(HashBasedTable.create(), table -> table.put(EntityType.VILLAGER, "validatenearbypoi", -1));
+        public Table<EntityType<?>, String, Integer> sensor = Util.make(HashBasedTable.create(), table -> table.put(EntityType.VILLAGER, "secondarypoisensor", Integer.valueOf(40)));
+        public Table<EntityType<?>, String, Integer> behavior = Util.make(HashBasedTable.create(), table -> table.put(EntityType.VILLAGER, "validatenearbypoi", Integer.valueOf(-1)));
     }
 
     @Setting(FeatureSeedsGeneration.FEATURE_SEEDS_KEY)
diff --git a/src/main/java/io/papermc/paper/configuration/legacy/MaxEntityCollisionsInitializer.java b/src/main/java/io/papermc/paper/configuration/legacy/MaxEntityCollisionsInitializer.java
index 62b43280f59163f7910f79cc901b50d05cdd024e..fe7a76752a2e79514f25e93af8edf5bb58ac8336 100644
--- a/src/main/java/io/papermc/paper/configuration/legacy/MaxEntityCollisionsInitializer.java
+++ b/src/main/java/io/papermc/paper/configuration/legacy/MaxEntityCollisionsInitializer.java
@@ -22,7 +22,7 @@ public class MaxEntityCollisionsInitializer implements NodeResolver {
         final ConfigurationNode node = parent.node(key);
         final int old = this.spigotConfig.getInt("max-entity-collisions", -1, false);
         if (node.virtual() && old > -1) {
-            node.raw(old);
+            node.raw(Integer.valueOf(old));
         }
         return node;
     }
diff --git a/src/main/java/io/papermc/paper/configuration/legacy/SpawnLoadedRangeInitializer.java b/src/main/java/io/papermc/paper/configuration/legacy/SpawnLoadedRangeInitializer.java
index fe5cc1c097f8d8c135e6ead6f458426bb84a8ebe..0a8b60de92d422819f45dfcdbdfe27e301ce7c21 100644
--- a/src/main/java/io/papermc/paper/configuration/legacy/SpawnLoadedRangeInitializer.java
+++ b/src/main/java/io/papermc/paper/configuration/legacy/SpawnLoadedRangeInitializer.java
@@ -20,7 +20,7 @@ public final class SpawnLoadedRangeInitializer implements NodeResolver {
         final String key = NamingSchemes.LOWER_CASE_DASHED.coerce(this.name);
         final ConfigurationNode node = parent.node(key);
         if (node.virtual()) {
-            node.raw(Math.min(spigotConfig.viewDistance, 10));
+            node.raw(Integer.valueOf(Math.min(spigotConfig.viewDistance, 10)));
         }
         return node;
     }
diff --git a/src/main/java/io/papermc/paper/configuration/serializer/EngineModeSerializer.java b/src/main/java/io/papermc/paper/configuration/serializer/EngineModeSerializer.java
index 27c0679d376bb31ab52131dfea74b3b580ca92b5..d9725fd1142dada62ceb1840db7396b0c08428ab 100644
--- a/src/main/java/io/papermc/paper/configuration/serializer/EngineModeSerializer.java
+++ b/src/main/java/io/papermc/paper/configuration/serializer/EngineModeSerializer.java
@@ -28,6 +28,6 @@ public final class EngineModeSerializer extends ScalarSerializer<EngineMode> {
 
     @Override
     protected Object serialize(EngineMode item, Predicate<Class<?>> typeSupported) {
-        return item.getId();
+        return Integer.valueOf(item.getId());
     }
 }
diff --git a/src/main/java/io/papermc/paper/configuration/transformation/global/LegacyPaperConfig.java b/src/main/java/io/papermc/paper/configuration/transformation/global/LegacyPaperConfig.java
index d21335930652ffced22f6fd19ab1a4f9ad599db8..85beb9a932639c4e65c7329a4bc5f1055ee94a23 100644
--- a/src/main/java/io/papermc/paper/configuration/transformation/global/LegacyPaperConfig.java
+++ b/src/main/java/io/papermc/paper/configuration/transformation/global/LegacyPaperConfig.java
@@ -37,24 +37,24 @@ public final class LegacyPaperConfig {
             .addVersion(11, ConfigurationTransformation.builder().addAction(path("settings", "play-in-use-item-spam-threshold"), TransformAction.rename("incoming-packet-spam-threshold")).build())
             .addVersion(14, ConfigurationTransformation.builder().addAction(path("settings", "spam-limiter", "tab-spam-increment"), (path, value) -> {
                 if (value.getInt() == 10) {
-                    value.set(2);
+                    value.set(Integer.valueOf(2));
                 }
                 return null;
             }).build())
             .addVersion(15, ConfigurationTransformation.builder().addAction(path("settings"), (path, value) -> {
-                value.node("async-chunks", "threads").set(-1);
+                value.node("async-chunks", "threads").set(Integer.valueOf(-1));
                 return null;
             }).build())
             .addVersion(21, ConfigurationTransformation.builder().addAction(path("use-display-name-in-quit-message"), (path, value) -> new Object[]{"settings", "use-display-name-in-quit-message"}).build())
             .addVersion(23, ConfigurationTransformation.builder().addAction(path("settings", "chunk-loading", "global-max-chunk-load-rate"), (path, value) -> {
                 if (value.getDouble() == 300.0) {
-                    value.set(-1.0);
+                    value.set(Double.valueOf(-1.0));
                 }
                 return null;
             }).build())
             .addVersion(25, ConfigurationTransformation.builder().addAction(path("settings", "chunk-loading", "player-max-concurrent-loads"), (path, value) -> {
                 if (value.getDouble() == 4.0) {
-                    value.set(20.0);
+                    value.set(Double.valueOf(20.0));
                 }
                 return null;
             }).build())
@@ -69,7 +69,7 @@ public final class LegacyPaperConfig {
                 final ConfigurationNode node = value.node("async-chunks");
                 if (node.hasChild("load-threads")) {
                     if (!node.hasChild("threads")) {
-                        node.node("threads").set(node.node("load-threads").getInt());
+                        node.node("threads").set(Integer.valueOf(node.node("load-threads").getInt()));
                     }
                     node.removeChild("load-threads");
                 }
@@ -83,7 +83,7 @@ public final class LegacyPaperConfig {
             .addAction(path("settings", "save-player-data"), (path, value) -> {
                 final @Nullable Object val = value.raw();
                 if (val instanceof Boolean bool) {
-                    spigotConfiguration.set("players.disable-saving", !bool);
+                    spigotConfiguration.set("players.disable-saving", Boolean.valueOf(!bool));
                 }
                 value.raw(null);
                 return null;
@@ -91,7 +91,7 @@ public final class LegacyPaperConfig {
             .addAction(path("settings", "log-named-entity-deaths"), (path, value) -> {
                 final @Nullable Object val = value.raw();
                 if (val instanceof Boolean bool && !bool) {
-                    spigotConfiguration.set("settings.log-named-deaths", false);
+                    spigotConfiguration.set("settings.log-named-deaths", Boolean.FALSE);
                 }
                 value.raw(null);
                 return null;
diff --git a/src/main/java/io/papermc/paper/configuration/transformation/world/FeatureSeedsGeneration.java b/src/main/java/io/papermc/paper/configuration/transformation/world/FeatureSeedsGeneration.java
index 372dda1738da9ab94c963bb73cecdf52e031c903..13fdb572097378caa4f840d1176c4b421f026821 100644
--- a/src/main/java/io/papermc/paper/configuration/transformation/world/FeatureSeedsGeneration.java
+++ b/src/main/java/io/papermc/paper/configuration/transformation/world/FeatureSeedsGeneration.java
@@ -55,7 +55,7 @@ public class FeatureSeedsGeneration implements TransformAction {
             counter.incrementAndGet();
         });
         if (counter.get() > 0) {
-            LOGGER.info("Generated {} random feature seeds for {}", counter.get(), this.worldKey);
+            LOGGER.info("Generated {} random feature seeds for {}", Integer.valueOf(counter.get()), this.worldKey);
             featureNode.raw(null);
             featureNode.set(new TypeToken<Reference2LongMap<Holder<ConfiguredFeature<?, ?>>>>() {}, features);
         }
diff --git a/src/main/java/io/papermc/paper/configuration/transformation/world/LegacyPaperWorldConfig.java b/src/main/java/io/papermc/paper/configuration/transformation/world/LegacyPaperWorldConfig.java
index edaa6ef28c1f9a2239439698708897008fea2f7e..ad18dbb0312fe087e99bd8f942f77db37171bb9c 100644
--- a/src/main/java/io/papermc/paper/configuration/transformation/world/LegacyPaperWorldConfig.java
+++ b/src/main/java/io/papermc/paper/configuration/transformation/world/LegacyPaperWorldConfig.java
@@ -38,9 +38,9 @@ public final class LegacyPaperWorldConfig {
             .addVersion(13, ConfigurationTransformation.builder().addAction(path("enable-old-tnt-cannon-behaviors"), TransformAction.rename("prevent-tnt-from-moving-in-water")).build())
             .addVersion(16, ConfigurationTransformation.builder().addAction(path("use-chunk-inhabited-timer"), (path, value) -> {
                 if (!value.getBoolean(true)) {
-                    value.raw(0);
+                    value.raw(Integer.valueOf(0));
                 } else {
-                    value.raw(-1);
+                    value.raw(Integer.valueOf(-1));
                 }
                 final Object[] newPath = path.array();
                 newPath[newPath.length - 1] = "fixed-chunk-inhabited-time";
@@ -48,9 +48,9 @@ public final class LegacyPaperWorldConfig {
             }).build())
             .addVersion(18, ConfigurationTransformation.builder().addAction(path("nether-ceiling-void-damage"), (path, value) -> {
                 if (value.getBoolean(false)) {
-                    value.raw(128);
+                    value.raw(Integer.valueOf(128));
                 } else {
-                    value.raw(0);
+                    value.raw(Integer.valueOf(0));
                 }
                 final Object[] newPath = path.array();
                 newPath[newPath.length - 1] = "nether-ceiling-void-damage-height";
@@ -77,7 +77,7 @@ public final class LegacyPaperWorldConfig {
                 }).build())
             .addVersion(20, ConfigurationTransformation.builder().addAction(path("baby-zombie-movement-speed"), TransformAction.rename("baby-zombie-movement-modifier")).build())
             .addVersion(22, ConfigurationTransformation.builder().addAction(path("per-player-mob-spawns"), (path, value) -> {
-                value.raw(true);
+                value.raw(Boolean.TRUE);
                 return null;
             }).build())
             .addVersion(24,
@@ -94,10 +94,10 @@ public final class LegacyPaperWorldConfig {
                     value.node("hard").raw(null);
                     for (final MobCategory category : MobCategory.values()) {
                         if (softDistance != 32) {
-                            value.node(category.getName(), "soft").raw(softDistance);
+                            value.node(category.getName(), "soft").raw(Integer.valueOf(softDistance));
                         }
                         if (hardDistance != 128) {
-                            value.node(category.getName(), "hard").raw(hardDistance);
+                            value.node(category.getName(), "hard").raw(Integer.valueOf(hardDistance));
                         }
                     }
                     return null;
@@ -128,8 +128,8 @@ public final class LegacyPaperWorldConfig {
         return ConfigurationTransformation.builder()
             .addAction(path("treasure-maps-return-already-discovered"), (path, value) -> {
                 boolean prevValue = value.getBoolean(false);
-                value.node("villager-trade").set(prevValue);
-                value.node("loot-tables").set(prevValue);
+                value.node("villager-trade").set(Boolean.valueOf(prevValue));
+                value.node("loot-tables").set(Boolean.valueOf(prevValue));
                 return path.with(path.size() - 1, "treasure-maps-find-already-discovered").array();
             })
             .addAction(path("alt-item-despawn-rate", "items"), (path, value) -> {
@@ -146,7 +146,7 @@ public final class LegacyPaperWorldConfig {
                             item = itemHolder.get().unwrapKey().orElseThrow().location().getPath();
                         }
                         if (item != null) {
-                            rebuild.put(item, node.getInt());
+                            rebuild.put(item, Integer.valueOf(node.getInt()));
                         }
                     });
                     value.set(rebuild);
diff --git a/src/main/java/io/papermc/paper/configuration/type/BooleanOrDefault.java b/src/main/java/io/papermc/paper/configuration/type/BooleanOrDefault.java
index 3e422b74a377fa3edaf82dd960e7449c998c2912..d9fcbb636451c1af40ae8177f7f4740b946ac25e 100644
--- a/src/main/java/io/papermc/paper/configuration/type/BooleanOrDefault.java
+++ b/src/main/java/io/papermc/paper/configuration/type/BooleanOrDefault.java
@@ -30,7 +30,7 @@ public record BooleanOrDefault(@Nullable Boolean value) {
                     return USE_DEFAULT;
                 }
                 try {
-                    return new BooleanOrDefault(BooleanUtils.toBoolean(string.toLowerCase(Locale.ENGLISH), "true", "false"));
+                    return new BooleanOrDefault(Boolean.valueOf(BooleanUtils.toBoolean(string.toLowerCase(Locale.ENGLISH), "true", "false")));
                 } catch (IllegalArgumentException ex) {
                     throw new SerializationException(BooleanOrDefault.class, obj + "(" + type + ") is not a boolean or '" + DEFAULT_VALUE + "'", ex);
                 }
diff --git a/src/main/java/io/papermc/paper/configuration/type/DoubleOrDefault.java b/src/main/java/io/papermc/paper/configuration/type/DoubleOrDefault.java
index 193709f1d08e489fc51cbe11d432529768ac1449..15774d0736a6802a1bb79de2a4991b3d4e6d447d 100644
--- a/src/main/java/io/papermc/paper/configuration/type/DoubleOrDefault.java
+++ b/src/main/java/io/papermc/paper/configuration/type/DoubleOrDefault.java
@@ -56,7 +56,7 @@ public final class DoubleOrDefault {
         protected Object serialize(final DoubleOrDefault item, final Predicate<Class<?>> typeSupported) {
             final OptionalDouble value = item.value();
             if (value.isPresent()) {
-                return value.getAsDouble();
+                return Double.valueOf(value.getAsDouble());
             } else {
                 return DEFAULT_VALUE;
             }
diff --git a/src/main/java/io/papermc/paper/configuration/type/Duration.java b/src/main/java/io/papermc/paper/configuration/type/Duration.java
index fdc906b106a5c6fff2675d5399650f5b793deb70..79af057d98ec2cf6f2bdd25afb27986141c015e9 100644
--- a/src/main/java/io/papermc/paper/configuration/type/Duration.java
+++ b/src/main/java/io/papermc/paper/configuration/type/Duration.java
@@ -45,7 +45,7 @@ public final class Duration {
 
     @Override
     public int hashCode() {
-        return Objects.hash(this.seconds, this.value);
+        return Objects.hash(Long.valueOf(this.seconds), this.value);
     }
 
     @Override
diff --git a/src/main/java/io/papermc/paper/configuration/type/IntOr.java b/src/main/java/io/papermc/paper/configuration/type/IntOr.java
index 405f003466cdf024d249c376f107ee00bc156710..172c7a2c8098aa2bd908a0fc82ed47e137dd3d83 100644
--- a/src/main/java/io/papermc/paper/configuration/type/IntOr.java
+++ b/src/main/java/io/papermc/paper/configuration/type/IntOr.java
@@ -81,7 +81,7 @@ public interface IntOr {
         protected Object serialize(@NotNull T item, Predicate<Class<?>> typeSupported) {
             final OptionalInt value = item.value();
             if (value.isPresent()) {
-                return value.getAsInt();
+                return Integer.valueOf(value.getAsInt());
             } else {
                 return this.otherSerializedValue;
             }
diff --git a/src/main/java/io/papermc/paper/console/HexFormattingConverter.java b/src/main/java/io/papermc/paper/console/HexFormattingConverter.java
index 4db662672f135a95dabb108e6334f013682a2316..3f5638c3d5e9696104a841c5ff2dbe34fb43af78 100644
--- a/src/main/java/io/papermc/paper/console/HexFormattingConverter.java
+++ b/src/main/java/io/papermc/paper/console/HexFormattingConverter.java
@@ -150,7 +150,7 @@ public final class HexFormattingConverter extends LogEventPatternConverter {
         final int red = color >> 16 & 0xFF;
         final int green = color >> 8 & 0xFF;
         final int blue = color & 0xFF;
-        return String.format(RESET_RGB_ANSI, red, green, blue);
+        return String.format(RESET_RGB_ANSI, Integer.valueOf(red), Integer.valueOf(green), Integer.valueOf(blue));
     }
 
     private static String stripRGBColors(final @NotNull String input) {
diff --git a/src/main/java/io/papermc/paper/util/MCUtil.java b/src/main/java/io/papermc/paper/util/MCUtil.java
index d1a59c2af0557a816c094983ec60097fb4de060c..40db29e614ab86893bf0faa220237b3770bf7682 100644
--- a/src/main/java/io/papermc/paper/util/MCUtil.java
+++ b/src/main/java/io/papermc/paper/util/MCUtil.java
@@ -558,7 +558,7 @@ public final class MCUtil {
         JsonObject data = new JsonObject();
 
         data.addProperty("server-version", org.bukkit.Bukkit.getVersion());
-        data.addProperty("data-version", 1);
+        data.addProperty("data-version", Integer.valueOf(1));
 
         {
             JsonArray players = new JsonArray();
@@ -573,9 +573,9 @@ public final class MCUtil {
                 Entity.RemovalReason removalReason = player.getRemovalReason();
 
                 playerData.addProperty("name", player.getScoreboardName());
-                playerData.addProperty("x", player.getX());
-                playerData.addProperty("y", player.getY());
-                playerData.addProperty("z", player.getZ());
+                playerData.addProperty("x", Double.valueOf(player.getX()));
+                playerData.addProperty("y", Double.valueOf(player.getY()));
+                playerData.addProperty("z", Double.valueOf(player.getZ()));
                 playerData.addProperty("world", playerWorld == null ? "null world" : craftWorld.getName());
                 playerData.addProperty("removalReason", removalReason == null ? "null" : removalReason.name());
 
@@ -600,12 +600,12 @@ public final class MCUtil {
             ServerLevel world = ((org.bukkit.craftbukkit.CraftWorld)bukkitWorld).getHandle();
             List<ServerPlayer> players = world.players();
 
-            worldData.addProperty("is-loaded", loadedWorlds.contains(bukkitWorld));
+            worldData.addProperty("is-loaded", Boolean.valueOf(loadedWorlds.contains(bukkitWorld)));
             worldData.addProperty("name", world.getWorld().getName());
-            worldData.addProperty("view-distance", world.getChunkSource().chunkMap.playerChunkManager.getTargetNoTickViewDistance()); // Paper - replace chunk loader system
-            worldData.addProperty("tick-view-distance", world.getChunkSource().chunkMap.playerChunkManager.getTargetTickViewDistance()); // Paper - replace chunk loader system
-            worldData.addProperty("keep-spawn-loaded", world.keepSpawnInMemory);
-            worldData.addProperty("keep-spawn-loaded-range", world.paperConfig().spawn.keepSpawnLoadedRange * 16);
+            worldData.addProperty("view-distance", Integer.valueOf(world.getChunkSource().chunkMap.playerChunkManager.getTargetNoTickViewDistance())); // Paper - replace chunk loader system
+            worldData.addProperty("tick-view-distance", Integer.valueOf(world.getChunkSource().chunkMap.playerChunkManager.getTargetTickViewDistance())); // Paper - replace chunk loader system
+            worldData.addProperty("keep-spawn-loaded", Boolean.valueOf(world.keepSpawnInMemory));
+            worldData.addProperty("keep-spawn-loaded-range", Integer.valueOf(world.paperConfig().spawn.keepSpawnLoadedRange * 16));
 
             JsonArray playersData = new JsonArray();
 
@@ -613,9 +613,9 @@ public final class MCUtil {
                 JsonObject playerData = new JsonObject();
 
                 playerData.addProperty("name", player.getScoreboardName());
-                playerData.addProperty("x", player.getX());
-                playerData.addProperty("y", player.getY());
-                playerData.addProperty("z", player.getZ());
+                playerData.addProperty("x", Double.valueOf(player.getX()));
+                playerData.addProperty("y", Double.valueOf(player.getY()));
+                playerData.addProperty("z", Double.valueOf(player.getZ()));
 
                 playersData.add(playerData);
             }
diff --git a/src/main/java/io/papermc/paper/world/ThreadedWorldUpgrader.java b/src/main/java/io/papermc/paper/world/ThreadedWorldUpgrader.java
index 0c4ad48f62514d1c7c5af51c5268468acb0d39f2..49219372d92833fc4ee1cfdef0d8884b5e22c12f 100644
--- a/src/main/java/io/papermc/paper/world/ThreadedWorldUpgrader.java
+++ b/src/main/java/io/papermc/paper/world/ThreadedWorldUpgrader.java
@@ -109,7 +109,7 @@ public class ThreadedWorldUpgrader {
         while (!this.threadPool.isTerminated()) {
             final long current = info.convertedChunks.get();
 
-            LOGGER.info("{}% completed ({} / {} chunks)...", format.format((double)current / (double)expectedChunks * 100.0), current, expectedChunks);
+            LOGGER.info("{}% completed ({} / {} chunks)...", format.format((double)current / (double)expectedChunks * 100.0), Long.valueOf(current), Long.valueOf(expectedChunks));
 
             try {
                 Thread.sleep(1000L);
@@ -124,7 +124,7 @@ public class ThreadedWorldUpgrader {
             LOGGER.fatal("Failed to close chunk loader", ex);
         }
         LOGGER.info("Completed conversion. Took {}s, {} out of {} chunks needed to be converted/modified ({}%)",
-                (int)Math.ceil((end - start) * 1.0e-9), info.modifiedChunks.get(), expectedChunks, format.format((double)info.modifiedChunks.get() / (double)expectedChunks * 100.0));
+	        Integer.valueOf((int) Math.ceil((end - start) * 1.0e-9)), Long.valueOf(info.modifiedChunks.get()), Long.valueOf(expectedChunks), format.format((double)info.modifiedChunks.get() / (double)expectedChunks * 100.0));
     }
 
     private static final class WorldInfo {
diff --git a/src/main/java/net/minecraft/ChatFormatting.java b/src/main/java/net/minecraft/ChatFormatting.java
index 436f381c727cda72c04859c540dce4715b445390..19cca9f826d478c4a75aa5a048fb1cf20e2aa923 100644
--- a/src/main/java/net/minecraft/ChatFormatting.java
+++ b/src/main/java/net/minecraft/ChatFormatting.java
@@ -13,22 +13,22 @@ import javax.annotation.Nullable;
 import net.minecraft.util.StringRepresentable;
 
 public enum ChatFormatting implements StringRepresentable {
-    BLACK("BLACK", '0', 0, 0),
-    DARK_BLUE("DARK_BLUE", '1', 1, 170),
-    DARK_GREEN("DARK_GREEN", '2', 2, 43520),
-    DARK_AQUA("DARK_AQUA", '3', 3, 43690),
-    DARK_RED("DARK_RED", '4', 4, 11141120),
-    DARK_PURPLE("DARK_PURPLE", '5', 5, 11141290),
-    GOLD("GOLD", '6', 6, 16755200),
-    GRAY("GRAY", '7', 7, 11184810),
-    DARK_GRAY("DARK_GRAY", '8', 8, 5592405),
-    BLUE("BLUE", '9', 9, 5592575),
-    GREEN("GREEN", 'a', 10, 5635925),
-    AQUA("AQUA", 'b', 11, 5636095),
-    RED("RED", 'c', 12, 16733525),
-    LIGHT_PURPLE("LIGHT_PURPLE", 'd', 13, 16733695),
-    YELLOW("YELLOW", 'e', 14, 16777045),
-    WHITE("WHITE", 'f', 15, 16777215),
+    BLACK("BLACK", '0', 0, Integer.valueOf(0)),
+    DARK_BLUE("DARK_BLUE", '1', 1, Integer.valueOf(170)),
+    DARK_GREEN("DARK_GREEN", '2', 2, Integer.valueOf(43520)),
+    DARK_AQUA("DARK_AQUA", '3', 3, Integer.valueOf(43690)),
+    DARK_RED("DARK_RED", '4', 4, Integer.valueOf(11141120)),
+    DARK_PURPLE("DARK_PURPLE", '5', 5, Integer.valueOf(11141290)),
+    GOLD("GOLD", '6', 6, Integer.valueOf(16755200)),
+    GRAY("GRAY", '7', 7, Integer.valueOf(11184810)),
+    DARK_GRAY("DARK_GRAY", '8', 8, Integer.valueOf(5592405)),
+    BLUE("BLUE", '9', 9, Integer.valueOf(5592575)),
+    GREEN("GREEN", 'a', 10, Integer.valueOf(5635925)),
+    AQUA("AQUA", 'b', 11, Integer.valueOf(5636095)),
+    RED("RED", 'c', 12, Integer.valueOf(16733525)),
+    LIGHT_PURPLE("LIGHT_PURPLE", 'd', 13, Integer.valueOf(16733695)),
+    YELLOW("YELLOW", 'e', 14, Integer.valueOf(16777045)),
+    WHITE("WHITE", 'f', 15, Integer.valueOf(16777215)),
     OBFUSCATED("OBFUSCATED", 'k', true),
     BOLD("BOLD", 'l', true),
     STRIKETHROUGH("STRIKETHROUGH", 'm', true),
diff --git a/src/main/java/net/minecraft/CrashReportCategory.java b/src/main/java/net/minecraft/CrashReportCategory.java
index 6df4d02020a14d17d9c5b1971bb5640b35411c45..6e2c241ccab14f5f84edd321d7a941e4bb7d09df 100644
--- a/src/main/java/net/minecraft/CrashReportCategory.java
+++ b/src/main/java/net/minecraft/CrashReportCategory.java
@@ -19,7 +19,7 @@ public class CrashReportCategory {
     }
 
     public static String formatLocation(LevelHeightAccessor world, double x, double y, double z) {
-        return String.format(Locale.ROOT, "%.2f,%.2f,%.2f - %s", x, y, z, formatLocation(world, new BlockPos(x, y, z)));
+        return String.format(Locale.ROOT, "%.2f,%.2f,%.2f - %s", Double.valueOf(x), Double.valueOf(y), Double.valueOf(z), formatLocation(world, new BlockPos(x, y, z)));
     }
 
     public static String formatLocation(LevelHeightAccessor world, BlockPos pos) {
@@ -30,7 +30,7 @@ public class CrashReportCategory {
         StringBuilder stringBuilder = new StringBuilder();
 
         try {
-            stringBuilder.append(String.format(Locale.ROOT, "World: (%d,%d,%d)", x, y, z));
+            stringBuilder.append(String.format(Locale.ROOT, "World: (%d,%d,%d)", Integer.valueOf(x), Integer.valueOf(y), Integer.valueOf(z)));
         } catch (Throwable var19) {
             stringBuilder.append("(Error finding world loc)");
         }
@@ -50,7 +50,7 @@ public class CrashReportCategory {
             int r = SectionPos.sectionToBlockCoord(i + 1) - 1;
             int s = world.getMaxBuildHeight() - 1;
             int t = SectionPos.sectionToBlockCoord(k + 1) - 1;
-            stringBuilder.append(String.format(Locale.ROOT, "Section: (at %d,%d,%d in %d,%d,%d; chunk contains blocks %d,%d,%d to %d,%d,%d)", l, m, n, i, j, k, o, p, q, r, s, t));
+            stringBuilder.append(String.format(Locale.ROOT, "Section: (at %d,%d,%d in %d,%d,%d; chunk contains blocks %d,%d,%d to %d,%d,%d)", Integer.valueOf(l), Integer.valueOf(m), Integer.valueOf(n), Integer.valueOf(i), Integer.valueOf(j), Integer.valueOf(k), Integer.valueOf(o), Integer.valueOf(p), Integer.valueOf(q), Integer.valueOf(r), Integer.valueOf(s), Integer.valueOf(t)));
         } catch (Throwable var18) {
             stringBuilder.append("(Error finding chunk loc)");
         }
@@ -70,7 +70,7 @@ public class CrashReportCategory {
             int ag = (u + 1 << 9) - 1;
             int ah = world.getMaxBuildHeight() - 1;
             int ai = (v + 1 << 9) - 1;
-            stringBuilder.append(String.format(Locale.ROOT, "Region: (%d,%d; contains chunks %d,%d to %d,%d, blocks %d,%d,%d to %d,%d,%d)", u, v, w, aa, ab, ac, ad, ae, af, ag, ah, ai));
+            stringBuilder.append(String.format(Locale.ROOT, "Region: (%d,%d; contains chunks %d,%d to %d,%d, blocks %d,%d,%d to %d,%d,%d)", Integer.valueOf(u), Integer.valueOf(v), Integer.valueOf(w), Integer.valueOf(aa), Integer.valueOf(ab), Integer.valueOf(ac), Integer.valueOf(ad), Integer.valueOf(ae), Integer.valueOf(af), Integer.valueOf(ag), Integer.valueOf(ah), Integer.valueOf(ai)));
         } catch (Throwable var17) {
             stringBuilder.append("(Error finding world loc)");
         }
diff --git a/src/main/java/net/minecraft/Util.java b/src/main/java/net/minecraft/Util.java
index 5ef58831a857fd8aa4ac30147762dc17d773a53e..702807e78ee87960b5eaf5cecfe5c570fdf8c075 100644
--- a/src/main/java/net/minecraft/Util.java
+++ b/src/main/java/net/minecraft/Util.java
@@ -197,9 +197,9 @@ public class Util {
                     return i;
                 }
 
-                LOGGER.error("Wrong {} property value '{}'. Should be an integer value between 1 and {}.", "max.bg.threads", string, 255);
+                LOGGER.error("Wrong {} property value '{}'. Should be an integer value between 1 and {}.", "max.bg.threads", string, Integer.valueOf(255));
             } catch (NumberFormatException var2) {
-                LOGGER.error("Could not parse {} property value '{}'. Should be an integer value between 1 and {}.", "max.bg.threads", string, 255);
+                LOGGER.error("Could not parse {} property value '{}'. Should be an integer value between 1 and {}.", "max.bg.threads", string, Integer.valueOf(255));
             }
         }
 
@@ -622,7 +622,7 @@ public class Util {
                 return true;
             }
 
-            LOGGER.error("Failed to {}, retrying {}/{}", taskName, i, retries);
+            LOGGER.error("Failed to {}, retrying {}/{}", taskName, Integer.valueOf(i), Integer.valueOf(retries));
         }
 
         LOGGER.error("Failed to {}, aborting, progress might be lost", (Object)taskName);
@@ -825,7 +825,7 @@ public class Util {
 
         int i = blockingQueue.size();
         if (i > 0) {
-            LOGGER.warn("Tasks left in queue: {}", (int)i);
+            LOGGER.warn("Tasks left in queue: {}", Integer.valueOf((int) i));
         }
 
         return object;
diff --git a/src/main/java/net/minecraft/advancements/DisplayInfo.java b/src/main/java/net/minecraft/advancements/DisplayInfo.java
index 7909ba26bb7a883c74eda1ffd2d3e2bad286bc8b..7cab67b642edc8c7793ec92abb03496d9b259278 100644
--- a/src/main/java/net/minecraft/advancements/DisplayInfo.java
+++ b/src/main/java/net/minecraft/advancements/DisplayInfo.java
@@ -173,9 +173,9 @@ public class DisplayInfo {
         jsonObject.add("title", Component.Serializer.toJsonTree(this.title));
         jsonObject.add("description", Component.Serializer.toJsonTree(this.description));
         jsonObject.addProperty("frame", this.frame.getName());
-        jsonObject.addProperty("show_toast", this.showToast);
-        jsonObject.addProperty("announce_to_chat", this.announceChat);
-        jsonObject.addProperty("hidden", this.hidden);
+        jsonObject.addProperty("show_toast", Boolean.valueOf(this.showToast));
+        jsonObject.addProperty("announce_to_chat", Boolean.valueOf(this.announceChat));
+        jsonObject.addProperty("hidden", Boolean.valueOf(this.hidden));
         if (this.background != null) {
             jsonObject.addProperty("background", this.background.toString());
         }
diff --git a/src/main/java/net/minecraft/commands/arguments/selector/EntitySelectorParser.java b/src/main/java/net/minecraft/commands/arguments/selector/EntitySelectorParser.java
index 4cc2ee22369aef22c9bf9d2b244c7278d6db39bb..7897c132331a7a276dd5932ae9f2ecfb61fee5bc 100644
--- a/src/main/java/net/minecraft/commands/arguments/selector/EntitySelectorParser.java
+++ b/src/main/java/net/minecraft/commands/arguments/selector/EntitySelectorParser.java
@@ -417,27 +417,27 @@ public class EntitySelectorParser {
     }
 
     public void setX(double x) {
-        this.x = x;
+        this.x = Double.valueOf(x);
     }
 
     public void setY(double y) {
-        this.y = y;
+        this.y = Double.valueOf(y);
     }
 
     public void setZ(double z) {
-        this.z = z;
+        this.z = Double.valueOf(z);
     }
 
     public void setDeltaX(double dx) {
-        this.deltaX = dx;
+        this.deltaX = Double.valueOf(dx);
     }
 
     public void setDeltaY(double dy) {
-        this.deltaY = dy;
+        this.deltaY = Double.valueOf(dy);
     }
 
     public void setDeltaZ(double dz) {
-        this.deltaZ = dz;
+        this.deltaZ = Double.valueOf(dz);
     }
 
     @Nullable
diff --git a/src/main/java/net/minecraft/core/Direction.java b/src/main/java/net/minecraft/core/Direction.java
index 844bfdf376e6df833c16f0a96175a9a09fd2adc1..548bd2fbacd9dd4a91697cf3ec0223d2fdd5b341 100644
--- a/src/main/java/net/minecraft/core/Direction.java
+++ b/src/main/java/net/minecraft/core/Direction.java
@@ -57,7 +57,7 @@ public enum Direction implements StringRepresentable {
         return new Direction[i];
     });
     private static final Long2ObjectMap<Direction> BY_NORMAL = Arrays.stream(VALUES).collect(Collectors.toMap((direction) -> {
-        return (new BlockPos(direction.getNormal())).asLong();
+        return Long.valueOf((new BlockPos(direction.getNormal())).asLong());
     }, (direction) -> {
         return direction;
     }, (direction1, direction2) -> {
diff --git a/src/main/java/net/minecraft/core/cauldron/CauldronInteraction.java b/src/main/java/net/minecraft/core/cauldron/CauldronInteraction.java
index c9cd5fe3e942d1ce0133c17d6dd2747b70878d4e..28f55a4427083da8d2acbc0555882b7b07e4ca0f 100644
--- a/src/main/java/net/minecraft/core/cauldron/CauldronInteraction.java
+++ b/src/main/java/net/minecraft/core/cauldron/CauldronInteraction.java
@@ -40,13 +40,13 @@ public interface CauldronInteraction {
     Map<Item, CauldronInteraction> LAVA = CauldronInteraction.newInteractionMap();
     Map<Item, CauldronInteraction> POWDER_SNOW = CauldronInteraction.newInteractionMap();
     CauldronInteraction FILL_WATER = (iblockdata, world, blockposition, entityhuman, enumhand, itemstack) -> {
-        return CauldronInteraction.emptyBucket(world, blockposition, entityhuman, enumhand, itemstack, (BlockState) Blocks.WATER_CAULDRON.defaultBlockState().setValue(LayeredCauldronBlock.LEVEL, 3), SoundEvents.BUCKET_EMPTY);
+        return CauldronInteraction.emptyBucket(world, blockposition, entityhuman, enumhand, itemstack, (BlockState) Blocks.WATER_CAULDRON.defaultBlockState().setValue(LayeredCauldronBlock.LEVEL, Integer.valueOf(3)), SoundEvents.BUCKET_EMPTY);
     };
     CauldronInteraction FILL_LAVA = (iblockdata, world, blockposition, entityhuman, enumhand, itemstack) -> {
         return CauldronInteraction.emptyBucket(world, blockposition, entityhuman, enumhand, itemstack, Blocks.LAVA_CAULDRON.defaultBlockState(), SoundEvents.BUCKET_EMPTY_LAVA);
     };
     CauldronInteraction FILL_POWDER_SNOW = (iblockdata, world, blockposition, entityhuman, enumhand, itemstack) -> {
-        return CauldronInteraction.emptyBucket(world, blockposition, entityhuman, enumhand, itemstack, (BlockState) Blocks.POWDER_SNOW_CAULDRON.defaultBlockState().setValue(LayeredCauldronBlock.LEVEL, 3), SoundEvents.BUCKET_EMPTY_POWDER_SNOW);
+        return CauldronInteraction.emptyBucket(world, blockposition, entityhuman, enumhand, itemstack, (BlockState) Blocks.POWDER_SNOW_CAULDRON.defaultBlockState().setValue(LayeredCauldronBlock.LEVEL, Integer.valueOf(3)), SoundEvents.BUCKET_EMPTY_POWDER_SNOW);
     };
     CauldronInteraction SHULKER_BOX = (iblockdata, world, blockposition, entityhuman, enumhand, itemstack) -> {
         Block block = Block.byItem(itemstack.getItem());
diff --git a/src/main/java/net/minecraft/core/dispenser/DispenseItemBehavior.java b/src/main/java/net/minecraft/core/dispenser/DispenseItemBehavior.java
index 58fa7b99dc7a9745afe6faf31c1804e95ed27dbe..a7ecfa66a3ac6a0c439e4812b209f9d93811f727 100644
--- a/src/main/java/net/minecraft/core/dispenser/DispenseItemBehavior.java
+++ b/src/main/java/net/minecraft/core/dispenser/DispenseItemBehavior.java
@@ -787,7 +787,7 @@ public interface DispenseItemBehavior {
                         this.setSuccess(false);
                     }
                 } else {
-                    worldserver.setBlockAndUpdate(blockposition, (BlockState) iblockdata.setValue(BlockStateProperties.LIT, true));
+                    worldserver.setBlockAndUpdate(blockposition, (BlockState) iblockdata.setValue(BlockStateProperties.LIT, Boolean.TRUE));
                     worldserver.gameEvent((Entity) null, GameEvent.BLOCK_CHANGE, blockposition);
                 }
 
diff --git a/src/main/java/net/minecraft/nbt/ByteArrayTag.java b/src/main/java/net/minecraft/nbt/ByteArrayTag.java
index c2f4cec5e28567a30f35858beccb35c466a13e1a..47abd7a06e22da787b26def61bf19177d2c9607a 100644
--- a/src/main/java/net/minecraft/nbt/ByteArrayTag.java
+++ b/src/main/java/net/minecraft/nbt/ByteArrayTag.java
@@ -67,7 +67,7 @@ public class ByteArrayTag extends CollectionTag<ByteTag> {
         for (int i = 0; i < list.size(); ++i) {
             Byte obyte = (Byte) list.get(i);
 
-            abyte[i] = obyte == null ? 0 : obyte;
+            abyte[i] = obyte == null ? Integer.valueOf(0) : obyte;
         }
 
         return abyte;
diff --git a/src/main/java/net/minecraft/nbt/NbtIo.java b/src/main/java/net/minecraft/nbt/NbtIo.java
index 8101b9f29824138e549555fa9aff3913e49f1e50..25b9fea54042c9578a39b60789c7207890097adb 100644
--- a/src/main/java/net/minecraft/nbt/NbtIo.java
+++ b/src/main/java/net/minecraft/nbt/NbtIo.java
@@ -295,7 +295,7 @@ public class NbtIo {
                 CrashReport crashreport = CrashReport.forThrowable(ioexception, "Loading NBT data");
                 CrashReportCategory crashreportsystemdetails = crashreport.addCategory("NBT Tag");
 
-                crashreportsystemdetails.setDetail("Tag type", (Object) b0);
+                crashreportsystemdetails.setDetail("Tag type", Byte.valueOf(b0));
                 throw new ReportedException(crashreport);
             }
         }
diff --git a/src/main/java/net/minecraft/nbt/NbtUtils.java b/src/main/java/net/minecraft/nbt/NbtUtils.java
index c33a6d3d5700a7ec1dae2434d00cf0f480a5f0e5..5e6346b273d0c9d947f2b3447b99c22ea635d4e3 100644
--- a/src/main/java/net/minecraft/nbt/NbtUtils.java
+++ b/src/main/java/net/minecraft/nbt/NbtUtils.java
@@ -353,7 +353,7 @@ public final class NbtUtils {
                             stringBuilder.append(' ');
                         }
 
-                        stringBuilder.append(String.format(Locale.ROOT, "0x%02X", bs[j] & 255));
+                        stringBuilder.append(String.format(Locale.ROOT, "0x%02X", Integer.valueOf(bs[j] & 255)));
                     }
                 }
 
@@ -420,7 +420,7 @@ public final class NbtUtils {
                 int n = 0;
 
                 for(int o : is) {
-                    n = Math.max(n, String.format(Locale.ROOT, "%X", o).length());
+                    n = Math.max(n, String.format(Locale.ROOT, "%X", Integer.valueOf(o)).length());
                 }
 
                 int p = is.length;
@@ -444,7 +444,7 @@ public final class NbtUtils {
                             stringBuilder.append(' ');
                         }
 
-                        stringBuilder.append(String.format(Locale.ROOT, "0x%0" + n + "X", is[q]));
+                        stringBuilder.append(String.format(Locale.ROOT, "0x%0" + n + "X", Integer.valueOf(is[q])));
                     }
                 }
 
@@ -457,7 +457,7 @@ public final class NbtUtils {
                 long t = 0L;
 
                 for(long u : ls) {
-                    t = Math.max(t, (long)String.format(Locale.ROOT, "%X", u).length());
+                    t = Math.max(t, (long)String.format(Locale.ROOT, "%X", Long.valueOf(u)).length());
                 }
 
                 long v = (long)ls.length;
@@ -481,7 +481,7 @@ public final class NbtUtils {
                             stringBuilder.append(' ');
                         }
 
-                        stringBuilder.append(String.format(Locale.ROOT, "0x%0" + t + "X", ls[w]));
+                        stringBuilder.append(String.format(Locale.ROOT, "0x%0" + t + "X", Long.valueOf(ls[w])));
                     }
                 }
 
diff --git a/src/main/java/net/minecraft/network/Connection.java b/src/main/java/net/minecraft/network/Connection.java
index 38c09c65dfa4a7a0c80d36f726c1fd028cbe05f8..93b94311c0f150de5a40ed285ab1b6f494b648f2 100644
--- a/src/main/java/net/minecraft/network/Connection.java
+++ b/src/main/java/net/minecraft/network/Connection.java
@@ -667,7 +667,7 @@ public class Connection extends SimpleChannelInboundHandler<Packet<?>> {
         ((Bootstrap) ((Bootstrap) ((Bootstrap) (new Bootstrap()).group((EventLoopGroup) lazyinitvar.get())).handler(new ChannelInitializer<Channel>() {
             protected void initChannel(Channel channel) {
                 try {
-                    channel.config().setOption(ChannelOption.TCP_NODELAY, true);
+                    channel.config().setOption(ChannelOption.TCP_NODELAY, Boolean.TRUE);
                 } catch (ChannelException channelexception) {
                     ;
                 }
diff --git a/src/main/java/net/minecraft/network/ConnectionProtocol.java b/src/main/java/net/minecraft/network/ConnectionProtocol.java
index 19f05a2d202e3b71391d20acbf54392f644978e4..45575c6fe34c3742a9b885b0fc9600b01770f2d8 100644
--- a/src/main/java/net/minecraft/network/ConnectionProtocol.java
+++ b/src/main/java/net/minecraft/network/ConnectionProtocol.java
@@ -295,7 +295,7 @@ public enum ConnectionProtocol {
         @Nullable
         public Integer getId(Class<?> packet) {
             int i = this.classToId.getInt(packet);
-            return i == -1 ? null : i;
+            return i == -1 ? null : Integer.valueOf(i);
         }
 
         @Nullable
diff --git a/src/main/java/net/minecraft/network/PacketEncoder.java b/src/main/java/net/minecraft/network/PacketEncoder.java
index 5fce1177e7198d791d4ab1c64b394c5b1c145782..dd5d81bbe85ad8bccfb99128c75ea525ebf7ac1b 100644
--- a/src/main/java/net/minecraft/network/PacketEncoder.java
+++ b/src/main/java/net/minecraft/network/PacketEncoder.java
@@ -47,7 +47,7 @@ public class PacketEncoder extends MessageToByteEncoder<Packet<?>> {
                         JvmProfiler.INSTANCE.onPacketSent(k, integer, channelHandlerContext.channel().remoteAddress(), j);
                     }
                 } catch (Throwable var10) {
-                    LOGGER.error("Packet encoding of packet ID {} threw (skippable? {})", integer, packet.isSkippable(), var10); // Paper - Give proper error message
+                    LOGGER.error("Packet encoding of packet ID {} threw (skippable? {})", integer, Boolean.valueOf(packet.isSkippable()), var10); // Paper - Give proper error message
                     if (packet.isSkippable()) {
                         throw new SkipPacketException(var10);
                     } else {
diff --git a/src/main/java/net/minecraft/network/chat/Component.java b/src/main/java/net/minecraft/network/chat/Component.java
index 14f6d040724e9d1b524e346443b57962a9d0e6a4..ad8065f45a61881220e294cc050207b0e350f5c5 100644
--- a/src/main/java/net/minecraft/network/chat/Component.java
+++ b/src/main/java/net/minecraft/network/chat/Component.java
@@ -468,7 +468,7 @@ public interface Component extends Message, FormattedText, Iterable<Component> {
                 NbtContents nbtcontents = (NbtContents) componentcontents;
 
                 jsonobject.addProperty("nbt", nbtcontents.getNbtPath());
-                jsonobject.addProperty("interpret", nbtcontents.isInterpreting());
+                jsonobject.addProperty("interpret", Boolean.valueOf(nbtcontents.isInterpreting()));
                 this.serializeSeparator(jsonserializationcontext, jsonobject, nbtcontents.getSeparator());
                 DataSource datasource = nbtcontents.getDataSource();
 
diff --git a/src/main/java/net/minecraft/network/chat/TextColor.java b/src/main/java/net/minecraft/network/chat/TextColor.java
index 09c3abebbca6d8d05ab766c0776da23224d74c08..cb2d16d5be58a5f7b6d58f3891f00079875219d5 100644
--- a/src/main/java/net/minecraft/network/chat/TextColor.java
+++ b/src/main/java/net/minecraft/network/chat/TextColor.java
@@ -54,7 +54,7 @@ public final class TextColor {
     }
 
     private String formatValue() {
-        return String.format(Locale.ROOT, "#%06X", this.value);
+        return String.format(Locale.ROOT, "#%06X", Integer.valueOf(this.value));
     }
 
     public boolean equals(@org.jetbrains.annotations.Nullable Object object) {
@@ -70,7 +70,7 @@ public final class TextColor {
     }
 
     public int hashCode() {
-        return Objects.hash(new Object[]{this.value, this.name});
+        return Objects.hash(new Object[]{Integer.valueOf(this.value), this.name});
     }
 
     public String toString() {
diff --git a/src/main/java/net/minecraft/network/syncher/SynchedEntityData.java b/src/main/java/net/minecraft/network/syncher/SynchedEntityData.java
index 37e193f57938047c8b886ed7d2816411392f94b4..b48e0e83339c2248f8557f73cab4727006298707 100644
--- a/src/main/java/net/minecraft/network/syncher/SynchedEntityData.java
+++ b/src/main/java/net/minecraft/network/syncher/SynchedEntityData.java
@@ -8,16 +8,6 @@ import it.unimi.dsi.fastutil.ints.Int2ObjectOpenHashMap;
 import it.unimi.dsi.fastutil.objects.Object2IntMap;
 import it.unimi.dsi.fastutil.objects.Object2IntOpenHashMap;
 import it.unimi.dsi.fastutil.objects.ObjectIterator;
-import java.util.ArrayList;
-import java.util.Iterator;
-import java.util.List;
-import java.util.Locale;
-import java.util.Objects;
-import java.util.concurrent.locks.ReadWriteLock;
-import java.util.concurrent.locks.ReentrantReadWriteLock;
-import javax.annotation.Nullable;
-import net.minecraft.CrashReport;
-import net.minecraft.ReportedException;
 import net.minecraft.network.FriendlyByteBuf;
 import net.minecraft.network.protocol.game.ClientboundSetEntityDataPacket;
 import net.minecraft.server.level.ServerPlayer;
@@ -25,6 +15,9 @@ import net.minecraft.world.entity.Entity;
 import org.apache.commons.lang3.ObjectUtils;
 import org.slf4j.Logger;
 
+import javax.annotation.Nullable;
+import java.util.*;
+
 public class SynchedEntityData {
 
     private static final Logger LOGGER = LogUtils.getLogger();
@@ -231,7 +224,7 @@ public class SynchedEntityData {
 
     private <T> void assignValue(SynchedEntityData.DataItem<T> to, SynchedEntityData.DataValue<?> from) {
         if (!Objects.equals(from.serializer(), to.accessor.getSerializer())) {
-            throw new IllegalStateException(String.format(Locale.ROOT, "Invalid entity data item type for field %d on entity %s: old=%s(%s), new=%s(%s)", to.accessor.getId(), this.entity, to.value, to.value.getClass(), from.value, from.value.getClass()));
+            throw new IllegalStateException(String.format(Locale.ROOT, "Invalid entity data item type for field %d on entity %s: old=%s(%s), new=%s(%s)", Integer.valueOf(to.accessor.getId()), this.entity, to.value, to.value.getClass(), from.value, from.value.getClass()));
         } else {
             to.setValue((T) from.value); // CraftBukkit - decompile error
         }
diff --git a/src/main/java/net/minecraft/server/Main.java b/src/main/java/net/minecraft/server/Main.java
index 31faf2d6492696f7d0c99a48edbc0d6f15db1209..f81fb7dbbbaf3e1b95ded193cb8b54e8a00cf60d 100644
--- a/src/main/java/net/minecraft/server/Main.java
+++ b/src/main/java/net/minecraft/server/Main.java
@@ -369,7 +369,7 @@ public class Main {
             if (i > 0) {
                 int j = worldupgrader.getConverted() + worldupgrader.getSkipped();
 
-                Main.LOGGER.info("{}% completed ({} / {} chunks)...", new Object[]{Mth.floor((float) j / (float) i * 100.0F), j, i});
+                Main.LOGGER.info("{}% completed ({} / {} chunks)...", new Object[]{Integer.valueOf(Mth.floor((float) j / (float) i * 100.0F)), Integer.valueOf(j), Integer.valueOf(i)});
             }
 
             if (!continueCheck.getAsBoolean()) {
diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index fa0ba0fa14c7797db93b3d151774e51dbeb6c071..37cf611985c80edc42860a29c80b54aaddeb6d6c 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -1116,7 +1116,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
             // everything is init before watchdog tick.
             // anything at 3+ won't be caught here but also will trip watchdog....
             // tasks are default scheduled at -1 + delay, and first tick will tick at 1
-            String doneTime = String.format(java.util.Locale.ROOT, "%.3fs", (double) (Util.getNanos() - serverStartTime) / 1.0E9D);
+            String doneTime = String.format(java.util.Locale.ROOT, "%.3fs", Double.valueOf((double) (Util.getNanos() - serverStartTime) / 1.0E9D));
             LOGGER.info("Done ({})! For help, type \"help\"", doneTime);
             // Paper end
 
@@ -1138,7 +1138,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
                     long j = i / 50L;
 
                     if (this.server.getWarnOnOverload()) // CraftBukkit
-                    MinecraftServer.LOGGER.warn("Can't keep up! Is the server overloaded? Running {}ms or {} ticks behind", i, j);
+                    MinecraftServer.LOGGER.warn("Can't keep up! Is the server overloaded? Running {}ms or {} ticks behind", Long.valueOf(i), Long.valueOf(j));
                     this.nextTickTime += j * 50L;
                     this.lastOverloadWarning = this.nextTickTime;
                 }
@@ -2277,8 +2277,8 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
         BufferedWriter bufferedwriter = Files.newBufferedWriter(path);
 
         try {
-            bufferedwriter.write(String.format(Locale.ROOT, "pending_tasks: %d\n", this.getPendingTasksCount()));
-            bufferedwriter.write(String.format(Locale.ROOT, "average_tick_time: %f\n", this.getAverageTickTime()));
+            bufferedwriter.write(String.format(Locale.ROOT, "pending_tasks: %d\n", Integer.valueOf(this.getPendingTasksCount())));
+            bufferedwriter.write(String.format(Locale.ROOT, "average_tick_time: %f\n", Float.valueOf(this.getAverageTickTime())));
             bufferedwriter.write(String.format(Locale.ROOT, "tick_times: %s\n", Arrays.toString(this.tickTimes)));
             bufferedwriter.write(String.format(Locale.ROOT, "queue: %s\n", Util.backgroundExecutor()));
         } catch (Throwable throwable) {
diff --git a/src/main/java/net/minecraft/server/PlayerAdvancements.java b/src/main/java/net/minecraft/server/PlayerAdvancements.java
index a0c19503aabab5378d672a30163d35a5ba05b6c1..fcbb8c9f87d77dc362b8d67e306a90a394142b26 100644
--- a/src/main/java/net/minecraft/server/PlayerAdvancements.java
+++ b/src/main/java/net/minecraft/server/PlayerAdvancements.java
@@ -233,7 +233,7 @@ public class PlayerAdvancements {
 
         JsonElement jsonelement = PlayerAdvancements.GSON.toJsonTree(map);
 
-        jsonelement.getAsJsonObject().addProperty("DataVersion", SharedConstants.getCurrentVersion().getWorldVersion());
+        jsonelement.getAsJsonObject().addProperty("DataVersion", Integer.valueOf(SharedConstants.getCurrentVersion().getWorldVersion()));
 
         try {
             FileOutputStream fileoutputstream = new FileOutputStream(this.file);
diff --git a/src/main/java/net/minecraft/server/commands/BanIpCommands.java b/src/main/java/net/minecraft/server/commands/BanIpCommands.java
index 19023c0796f0b6d7b4acd4ff8984355ec5b3faa7..6c1057bb52f56bdcc1ac423e378e7c61e7f7fc2d 100644
--- a/src/main/java/net/minecraft/server/commands/BanIpCommands.java
+++ b/src/main/java/net/minecraft/server/commands/BanIpCommands.java
@@ -57,7 +57,7 @@ public class BanIpCommands {
             ipBanList.add(ipBanListEntry);
             source.sendSuccess(Component.translatable("commands.banip.success", targetIp, ipBanListEntry.getReason()), true);
             if (!list.isEmpty()) {
-                source.sendSuccess(Component.translatable("commands.banip.info", list.size(), EntitySelector.joinNames(list)), true);
+                source.sendSuccess(Component.translatable("commands.banip.info", Integer.valueOf(list.size()), EntitySelector.joinNames(list)), true);
             }
 
             for(ServerPlayer serverPlayer : list) {
diff --git a/src/main/java/net/minecraft/server/commands/EffectCommands.java b/src/main/java/net/minecraft/server/commands/EffectCommands.java
index bed3ffb18398f34077503ba2d7aa6ecc7c0537c2..78df32c4fa03893675872339070c827582006571 100644
--- a/src/main/java/net/minecraft/server/commands/EffectCommands.java
+++ b/src/main/java/net/minecraft/server/commands/EffectCommands.java
@@ -43,11 +43,11 @@ public class EffectCommands {
         }))))).then(net.minecraft.commands.Commands.literal("give").then(net.minecraft.commands.Commands.argument("targets", EntityArgument.entities()).then(((RequiredArgumentBuilder) net.minecraft.commands.Commands.argument("effect", ResourceArgument.resource(registryAccess, Registries.MOB_EFFECT)).executes((commandcontext) -> {
             return EffectCommands.giveEffect((CommandSourceStack) commandcontext.getSource(), EntityArgument.getEntities(commandcontext, "targets"), ResourceArgument.getMobEffect(commandcontext, "effect"), (Integer) null, 0, true);
         })).then(((RequiredArgumentBuilder) net.minecraft.commands.Commands.argument("seconds", IntegerArgumentType.integer(1, 1000000)).executes((commandcontext) -> {
-            return EffectCommands.giveEffect((CommandSourceStack) commandcontext.getSource(), EntityArgument.getEntities(commandcontext, "targets"), ResourceArgument.getMobEffect(commandcontext, "effect"), IntegerArgumentType.getInteger(commandcontext, "seconds"), 0, true);
+            return EffectCommands.giveEffect((CommandSourceStack) commandcontext.getSource(), EntityArgument.getEntities(commandcontext, "targets"), ResourceArgument.getMobEffect(commandcontext, "effect"), Integer.valueOf(IntegerArgumentType.getInteger(commandcontext, "seconds")), 0, true);
         })).then(((RequiredArgumentBuilder) net.minecraft.commands.Commands.argument("amplifier", IntegerArgumentType.integer(0, 255)).executes((commandcontext) -> {
-            return EffectCommands.giveEffect((CommandSourceStack) commandcontext.getSource(), EntityArgument.getEntities(commandcontext, "targets"), ResourceArgument.getMobEffect(commandcontext, "effect"), IntegerArgumentType.getInteger(commandcontext, "seconds"), IntegerArgumentType.getInteger(commandcontext, "amplifier"), true);
+            return EffectCommands.giveEffect((CommandSourceStack) commandcontext.getSource(), EntityArgument.getEntities(commandcontext, "targets"), ResourceArgument.getMobEffect(commandcontext, "effect"), Integer.valueOf(IntegerArgumentType.getInteger(commandcontext, "seconds")), IntegerArgumentType.getInteger(commandcontext, "amplifier"), true);
         })).then(net.minecraft.commands.Commands.argument("hideParticles", BoolArgumentType.bool()).executes((commandcontext) -> {
-            return EffectCommands.giveEffect((CommandSourceStack) commandcontext.getSource(), EntityArgument.getEntities(commandcontext, "targets"), ResourceArgument.getMobEffect(commandcontext, "effect"), IntegerArgumentType.getInteger(commandcontext, "seconds"), IntegerArgumentType.getInteger(commandcontext, "amplifier"), !BoolArgumentType.getBool(commandcontext, "hideParticles"));
+            return EffectCommands.giveEffect((CommandSourceStack) commandcontext.getSource(), EntityArgument.getEntities(commandcontext, "targets"), ResourceArgument.getMobEffect(commandcontext, "effect"), Integer.valueOf(IntegerArgumentType.getInteger(commandcontext, "seconds")), IntegerArgumentType.getInteger(commandcontext, "amplifier"), !BoolArgumentType.getBool(commandcontext, "hideParticles"));
         }))))))));
     }
 
@@ -86,9 +86,9 @@ public class EffectCommands {
             throw EffectCommands.ERROR_GIVE_FAILED.create();
         } else {
             if (targets.size() == 1) {
-                source.sendSuccess(Component.translatable("commands.effect.give.success.single", mobeffectlist.getDisplayName(), ((Entity) targets.iterator().next()).getDisplayName(), k / 20), true);
+                source.sendSuccess(Component.translatable("commands.effect.give.success.single", mobeffectlist.getDisplayName(), ((Entity) targets.iterator().next()).getDisplayName(), Integer.valueOf(k / 20)), true);
             } else {
-                source.sendSuccess(Component.translatable("commands.effect.give.success.multiple", mobeffectlist.getDisplayName(), targets.size(), k / 20), true);
+                source.sendSuccess(Component.translatable("commands.effect.give.success.multiple", mobeffectlist.getDisplayName(), Integer.valueOf(targets.size()), Integer.valueOf(k / 20)), true);
             }
 
             return j;
@@ -113,7 +113,7 @@ public class EffectCommands {
             if (targets.size() == 1) {
                 source.sendSuccess(Component.translatable("commands.effect.clear.everything.success.single", ((Entity) targets.iterator().next()).getDisplayName()), true);
             } else {
-                source.sendSuccess(Component.translatable("commands.effect.clear.everything.success.multiple", targets.size()), true);
+                source.sendSuccess(Component.translatable("commands.effect.clear.everything.success.multiple", Integer.valueOf(targets.size())), true);
             }
 
             return i;
@@ -139,7 +139,7 @@ public class EffectCommands {
             if (targets.size() == 1) {
                 source.sendSuccess(Component.translatable("commands.effect.clear.specific.success.single", mobeffectlist.getDisplayName(), ((Entity) targets.iterator().next()).getDisplayName()), true);
             } else {
-                source.sendSuccess(Component.translatable("commands.effect.clear.specific.success.multiple", mobeffectlist.getDisplayName(), targets.size()), true);
+                source.sendSuccess(Component.translatable("commands.effect.clear.specific.success.multiple", mobeffectlist.getDisplayName(), Integer.valueOf(targets.size())), true);
             }
 
             return i;
diff --git a/src/main/java/net/minecraft/server/commands/GiveCommand.java b/src/main/java/net/minecraft/server/commands/GiveCommand.java
index 06e3a868e922f1b7a586d0ca28f64a67ae463b68..b1e9dcd662b609767857a5946104cbf90f5d44bb 100644
--- a/src/main/java/net/minecraft/server/commands/GiveCommand.java
+++ b/src/main/java/net/minecraft/server/commands/GiveCommand.java
@@ -41,7 +41,7 @@ public class GiveCommand {
         int k = j * 100;
 
         if (count > k) {
-            source.sendFailure(Component.translatable("commands.give.failed.toomanyitems", k, item.createItemStack(count, false).getDisplayName()));
+            source.sendFailure(Component.translatable("commands.give.failed.toomanyitems", Integer.valueOf(k), item.createItemStack(count, false).getDisplayName()));
             return 0;
         } else {
             Iterator iterator = targets.iterator();
@@ -78,9 +78,9 @@ public class GiveCommand {
             }
 
             if (targets.size() == 1) {
-                source.sendSuccess(Component.translatable("commands.give.success.single", count, item.createItemStack(count, false).getDisplayName(), ((ServerPlayer) targets.iterator().next()).getDisplayName()), true);
+                source.sendSuccess(Component.translatable("commands.give.success.single", Integer.valueOf(count), item.createItemStack(count, false).getDisplayName(), ((ServerPlayer) targets.iterator().next()).getDisplayName()), true);
             } else {
-                source.sendSuccess(Component.translatable("commands.give.success.single", count, item.createItemStack(count, false).getDisplayName(), targets.size()), true);
+                source.sendSuccess(Component.translatable("commands.give.success.single", Integer.valueOf(count), item.createItemStack(count, false).getDisplayName(), Integer.valueOf(targets.size())), true);
             }
 
             return targets.size();
diff --git a/src/main/java/net/minecraft/server/commands/ListPlayersCommand.java b/src/main/java/net/minecraft/server/commands/ListPlayersCommand.java
index f1a4817f8227b666820c2b513d8ded381310a678..a0409db7f8633f0338ca2aeb152ccf4d4976fb6d 100644
--- a/src/main/java/net/minecraft/server/commands/ListPlayersCommand.java
+++ b/src/main/java/net/minecraft/server/commands/ListPlayersCommand.java
@@ -44,7 +44,7 @@ public class ListPlayersCommand {
         // CraftBukkit end
         Component ichatbasecomponent = ComponentUtils.formatList(list, nameProvider);
 
-        source.sendSuccess(Component.translatable("commands.list.players", list.size(), playerlist.getMaxPlayers(), ichatbasecomponent), false);
+        source.sendSuccess(Component.translatable("commands.list.players", Integer.valueOf(list.size()), Integer.valueOf(playerlist.getMaxPlayers()), ichatbasecomponent), false);
         return list.size();
     }
 }
diff --git a/src/main/java/net/minecraft/server/commands/LootCommand.java b/src/main/java/net/minecraft/server/commands/LootCommand.java
index 4559f1762db14b51295d0b88c740b189bb33c181..e023edbe73bbd409afacc0a14f73354a8ca5fb8a 100644
--- a/src/main/java/net/minecraft/server/commands/LootCommand.java
+++ b/src/main/java/net/minecraft/server/commands/LootCommand.java
@@ -112,7 +112,7 @@ public class LootCommand {
         BlockEntity tileentity = source.getLevel().getBlockEntity(pos);
 
         if (!(tileentity instanceof Container)) {
-            throw ItemCommands.ERROR_TARGET_NOT_A_CONTAINER.create(pos.getX(), pos.getY(), pos.getZ());
+            throw ItemCommands.ERROR_TARGET_NOT_A_CONTAINER.create(Integer.valueOf(pos.getX()), Integer.valueOf(pos.getY()), Integer.valueOf(pos.getZ()));
         } else {
             return (Container) tileentity;
         }
@@ -183,7 +183,7 @@ public class LootCommand {
             messageSender.accept(list1);
             return list1.size();
         } else {
-            throw ItemCommands.ERROR_TARGET_INAPPLICABLE_SLOT.create(slot);
+            throw ItemCommands.ERROR_TARGET_INAPPLICABLE_SLOT.create(Integer.valueOf(slot));
         }
     }
 
@@ -263,9 +263,9 @@ public class LootCommand {
         if (stacks.size() == 1) {
             ItemStack itemstack = (ItemStack) stacks.get(0);
 
-            source.sendSuccess(Component.translatable("commands.drop.success.single", itemstack.getCount(), itemstack.getDisplayName()), false);
+            source.sendSuccess(Component.translatable("commands.drop.success.single", Integer.valueOf(itemstack.getCount()), itemstack.getDisplayName()), false);
         } else {
-            source.sendSuccess(Component.translatable("commands.drop.success.multiple", stacks.size()), false);
+            source.sendSuccess(Component.translatable("commands.drop.success.multiple", Integer.valueOf(stacks.size())), false);
         }
 
     }
@@ -274,9 +274,9 @@ public class LootCommand {
         if (stacks.size() == 1) {
             ItemStack itemstack = (ItemStack) stacks.get(0);
 
-            source.sendSuccess(Component.translatable("commands.drop.success.single_with_table", itemstack.getCount(), itemstack.getDisplayName(), lootTable), false);
+            source.sendSuccess(Component.translatable("commands.drop.success.single_with_table", Integer.valueOf(itemstack.getCount()), itemstack.getDisplayName(), lootTable), false);
         } else {
-            source.sendSuccess(Component.translatable("commands.drop.success.multiple_with_table", stacks.size(), lootTable), false);
+            source.sendSuccess(Component.translatable("commands.drop.success.multiple_with_table", Integer.valueOf(stacks.size()), lootTable), false);
         }
 
     }
diff --git a/src/main/java/net/minecraft/server/commands/ScheduleCommand.java b/src/main/java/net/minecraft/server/commands/ScheduleCommand.java
index 1eb93353766208f52e385ab445cfb754e42b7f3d..d20339db13d9862456b47ffda989c070c56bca88 100644
--- a/src/main/java/net/minecraft/server/commands/ScheduleCommand.java
+++ b/src/main/java/net/minecraft/server/commands/ScheduleCommand.java
@@ -66,7 +66,7 @@ public class ScheduleCommand {
                 }
 
                 customfunctioncallbacktimerqueue.schedule(s, j, new FunctionCallback(minecraftkey));
-                source.sendSuccess(Component.translatable("commands.schedule.created.function", minecraftkey, time, j), true);
+                source.sendSuccess(Component.translatable("commands.schedule.created.function", minecraftkey, Integer.valueOf(time), Long.valueOf(j)), true);
             }).ifRight((collection) -> {
                 String s = "#" + minecraftkey;
 
@@ -75,7 +75,7 @@ public class ScheduleCommand {
                 }
 
                 customfunctioncallbacktimerqueue.schedule(s, j, new FunctionTagCallback(minecraftkey));
-                source.sendSuccess(Component.translatable("commands.schedule.created.tag", minecraftkey, time, j), true);
+                source.sendSuccess(Component.translatable("commands.schedule.created.tag", minecraftkey, Integer.valueOf(time), Long.valueOf(j)), true);
             });
             return Math.floorMod(j, Integer.MAX_VALUE);
         }
@@ -87,7 +87,7 @@ public class ScheduleCommand {
         if (i == 0) {
             throw ScheduleCommand.ERROR_CANT_REMOVE.create(eventName);
         } else {
-            source.sendSuccess(Component.translatable("commands.schedule.cleared.success", i, eventName), true);
+            source.sendSuccess(Component.translatable("commands.schedule.cleared.success", Integer.valueOf(i), eventName), true);
             return i;
         }
     }
diff --git a/src/main/java/net/minecraft/server/commands/SetSpawnCommand.java b/src/main/java/net/minecraft/server/commands/SetSpawnCommand.java
index 1e41de9523c5fa3b9cfced798a5c35a24ec9d349..23965e966a89ab61b87f9bffd5eb941b97e2f08c 100644
--- a/src/main/java/net/minecraft/server/commands/SetSpawnCommand.java
+++ b/src/main/java/net/minecraft/server/commands/SetSpawnCommand.java
@@ -50,9 +50,9 @@ public class SetSpawnCommand {
 
         String string = resourceKey.location().toString();
         if (targets.size() == 1) {
-            source.sendSuccess(Component.translatable("commands.spawnpoint.success.single", pos.getX(), pos.getY(), pos.getZ(), angle, string, targets.iterator().next().getDisplayName()), true);
+            source.sendSuccess(Component.translatable("commands.spawnpoint.success.single", Integer.valueOf(pos.getX()), Integer.valueOf(pos.getY()), Integer.valueOf(pos.getZ()), Float.valueOf(angle), string, targets.iterator().next().getDisplayName()), true);
         } else {
-            source.sendSuccess(Component.translatable("commands.spawnpoint.success.multiple", pos.getX(), pos.getY(), pos.getZ(), angle, string, targets.size()), true);
+            source.sendSuccess(Component.translatable("commands.spawnpoint.success.multiple", Integer.valueOf(pos.getX()), Integer.valueOf(pos.getY()), Integer.valueOf(pos.getZ()), Float.valueOf(angle), string, Integer.valueOf(targets.size())), true);
         }
 
         return targets.size();
diff --git a/src/main/java/net/minecraft/server/commands/SpreadPlayersCommand.java b/src/main/java/net/minecraft/server/commands/SpreadPlayersCommand.java
index 23dcdc71a8a6fd5472cdc1c22331b56c6bb3ded9..109d9958b99a47b68416be6c6ab0e84cfd4dbe73 100644
--- a/src/main/java/net/minecraft/server/commands/SpreadPlayersCommand.java
+++ b/src/main/java/net/minecraft/server/commands/SpreadPlayersCommand.java
@@ -63,7 +63,7 @@ public class SpreadPlayersCommand {
         int j = worldserver.getMinBuildHeight();
 
         if (maxY < j) {
-            throw SpreadPlayersCommand.ERROR_INVALID_MAX_HEIGHT.create(maxY, j);
+            throw SpreadPlayersCommand.ERROR_INVALID_MAX_HEIGHT.create(Integer.valueOf(maxY), Integer.valueOf(j));
         } else {
             RandomSource randomsource = RandomSource.create();
             double d0 = (double) (center.x - maxRange);
@@ -75,7 +75,7 @@ public class SpreadPlayersCommand {
             SpreadPlayersCommand.spreadPositions(center, (double) spreadDistance, worldserver, randomsource, d0, d1, d2, d3, maxY, acommandspreadplayers_a, respectTeams);
             double d4 = SpreadPlayersCommand.setPlayerPositions(players, worldserver, acommandspreadplayers_a, maxY, respectTeams);
 
-            source.sendSuccess(Component.translatable("commands.spreadplayers.success." + (respectTeams ? "teams" : "entities"), acommandspreadplayers_a.length, center.x, center.y, String.format(Locale.ROOT, "%.2f", d4)), true);
+            source.sendSuccess(Component.translatable("commands.spreadplayers.success." + (respectTeams ? "teams" : "entities"), Integer.valueOf(acommandspreadplayers_a.length), Float.valueOf(center.x), Float.valueOf(center.y), String.format(Locale.ROOT, "%.2f", Double.valueOf(d4))), true);
             return acommandspreadplayers_a.length;
         }
     }
@@ -170,9 +170,9 @@ public class SpreadPlayersCommand {
 
         if (j >= 10000) {
             if (respectTeams) {
-                throw SpreadPlayersCommand.ERROR_FAILED_TO_SPREAD_TEAMS.create(piles.length, center.x, center.y, String.format(Locale.ROOT, "%.2f", d5));
+                throw SpreadPlayersCommand.ERROR_FAILED_TO_SPREAD_TEAMS.create(Integer.valueOf(piles.length), Float.valueOf(center.x), Float.valueOf(center.y), String.format(Locale.ROOT, "%.2f", Double.valueOf(d5)));
             } else {
-                throw SpreadPlayersCommand.ERROR_FAILED_TO_SPREAD_ENTITIES.create(piles.length, center.x, center.y, String.format(Locale.ROOT, "%.2f", d5));
+                throw SpreadPlayersCommand.ERROR_FAILED_TO_SPREAD_ENTITIES.create(Integer.valueOf(piles.length), Float.valueOf(center.x), Float.valueOf(center.y), String.format(Locale.ROOT, "%.2f", Double.valueOf(d5)));
             }
         }
     }
diff --git a/src/main/java/net/minecraft/server/commands/TeleportCommand.java b/src/main/java/net/minecraft/server/commands/TeleportCommand.java
index 027ca5b67c544048815ddef4bb36d0a8fc3d038c..2fb604632334b23557fd80c46f9ba03c73309940 100644
--- a/src/main/java/net/minecraft/server/commands/TeleportCommand.java
+++ b/src/main/java/net/minecraft/server/commands/TeleportCommand.java
@@ -84,7 +84,7 @@ public class TeleportCommand {
         if (targets.size() == 1) {
             source.sendSuccess(Component.translatable("commands.teleport.success.entity.single", ((Entity) targets.iterator().next()).getDisplayName(), destination.getDisplayName()), true);
         } else {
-            source.sendSuccess(Component.translatable("commands.teleport.success.entity.multiple", targets.size(), destination.getDisplayName()), true);
+            source.sendSuccess(Component.translatable("commands.teleport.success.entity.multiple", Integer.valueOf(targets.size()), destination.getDisplayName()), true);
         }
 
         return targets.size();
@@ -135,14 +135,14 @@ public class TeleportCommand {
         if (targets.size() == 1) {
             source.sendSuccess(Component.translatable("commands.teleport.success.location.single", ((Entity) targets.iterator().next()).getDisplayName(), TeleportCommand.formatDouble(vec3d.x), TeleportCommand.formatDouble(vec3d.y), TeleportCommand.formatDouble(vec3d.z)), true);
         } else {
-            source.sendSuccess(Component.translatable("commands.teleport.success.location.multiple", targets.size(), TeleportCommand.formatDouble(vec3d.x), TeleportCommand.formatDouble(vec3d.y), TeleportCommand.formatDouble(vec3d.z)), true);
+            source.sendSuccess(Component.translatable("commands.teleport.success.location.multiple", Integer.valueOf(targets.size()), TeleportCommand.formatDouble(vec3d.x), TeleportCommand.formatDouble(vec3d.y), TeleportCommand.formatDouble(vec3d.z)), true);
         }
 
         return targets.size();
     }
 
     private static String formatDouble(double d) {
-        return String.format(Locale.ROOT, "%f", d);
+        return String.format(Locale.ROOT, "%f", Double.valueOf(d));
     }
 
     private static void performTeleport(CommandSourceStack source, Entity target, ServerLevel world, double x, double y, double z, Set<ClientboundPlayerPositionPacket.RelativeArgument> movementFlags, float yaw, float pitch, @Nullable TeleportCommand.LookAt facingLocation) throws CommandSyntaxException {
@@ -157,7 +157,7 @@ public class TeleportCommand {
             if (target instanceof ServerPlayer) {
                 ChunkPos chunkcoordintpair = new ChunkPos(new BlockPos(x, y, z));
 
-                world.getChunkSource().addRegionTicket(TicketType.POST_TELEPORT, chunkcoordintpair, 1, target.getId());
+                world.getChunkSource().addRegionTicket(TicketType.POST_TELEPORT, chunkcoordintpair, 1, Integer.valueOf(target.getId()));
                 target.stopRiding();
                 if (((ServerPlayer) target).isSleeping()) {
                     ((ServerPlayer) target).stopSleepInBed(true, true);
diff --git a/src/main/java/net/minecraft/server/commands/TimeCommand.java b/src/main/java/net/minecraft/server/commands/TimeCommand.java
index f0a7a8df3caa2ea765bb0a87cfede71d0995d276..9870a5b752f4292ecc6a1a56e58d1ab65e2728ff 100644
--- a/src/main/java/net/minecraft/server/commands/TimeCommand.java
+++ b/src/main/java/net/minecraft/server/commands/TimeCommand.java
@@ -46,7 +46,7 @@ public class TimeCommand {
     }
 
     private static int queryTime(CommandSourceStack source, int time) {
-        source.sendSuccess(Component.translatable("commands.time.query", time), false);
+        source.sendSuccess(Component.translatable("commands.time.query", Integer.valueOf(time)), false);
         return time;
     }
 
@@ -65,7 +65,7 @@ public class TimeCommand {
             // CraftBukkit end
         }
 
-        source.sendSuccess(Component.translatable("commands.time.set", time), true);
+        source.sendSuccess(Component.translatable("commands.time.set", Integer.valueOf(time)), true);
         return TimeCommand.getDayTime(source.getLevel());
     }
 
@@ -86,7 +86,7 @@ public class TimeCommand {
 
         int j = TimeCommand.getDayTime(source.getLevel());
 
-        source.sendSuccess(Component.translatable("commands.time.set", j), true);
+        source.sendSuccess(Component.translatable("commands.time.set", Integer.valueOf(j)), true);
         return j;
     }
 }
diff --git a/src/main/java/net/minecraft/server/commands/TriggerCommand.java b/src/main/java/net/minecraft/server/commands/TriggerCommand.java
index 035e0ad62d32e9695a3f5544c2b616baea0d41da..7d70ee8507b4b923d61200bfd220020df82ab3e6 100644
--- a/src/main/java/net/minecraft/server/commands/TriggerCommand.java
+++ b/src/main/java/net/minecraft/server/commands/TriggerCommand.java
@@ -70,13 +70,13 @@ public class TriggerCommand {
 
     private static int addValue(CommandSourceStack source, Score score, int value) {
         score.add(value);
-        source.sendSuccess(Component.translatable("commands.trigger.add.success", score.getObjective().getFormattedDisplayName(), value), true);
+        source.sendSuccess(Component.translatable("commands.trigger.add.success", score.getObjective().getFormattedDisplayName(), Integer.valueOf(value)), true);
         return score.getScore();
     }
 
     private static int setValue(CommandSourceStack source, Score score, int value) {
         score.setScore(value);
-        source.sendSuccess(Component.translatable("commands.trigger.set.success", score.getObjective().getFormattedDisplayName(), value), true);
+        source.sendSuccess(Component.translatable("commands.trigger.set.success", score.getObjective().getFormattedDisplayName(), Integer.valueOf(value)), true);
         return value;
     }
 
diff --git a/src/main/java/net/minecraft/server/commands/WorldBorderCommand.java b/src/main/java/net/minecraft/server/commands/WorldBorderCommand.java
index 78b8cd382b98e4aefd488bb79a7e89dc9bff2c51..c7f692dafe3293f3f47f201f435fab84f6535142 100644
--- a/src/main/java/net/minecraft/server/commands/WorldBorderCommand.java
+++ b/src/main/java/net/minecraft/server/commands/WorldBorderCommand.java
@@ -21,8 +21,8 @@ public class WorldBorderCommand {
     private static final SimpleCommandExceptionType ERROR_SAME_CENTER = new SimpleCommandExceptionType(Component.translatable("commands.worldborder.center.failed"));
     private static final SimpleCommandExceptionType ERROR_SAME_SIZE = new SimpleCommandExceptionType(Component.translatable("commands.worldborder.set.failed.nochange"));
     private static final SimpleCommandExceptionType ERROR_TOO_SMALL = new SimpleCommandExceptionType(Component.translatable("commands.worldborder.set.failed.small"));
-    private static final SimpleCommandExceptionType ERROR_TOO_BIG = new SimpleCommandExceptionType(Component.translatable("commands.worldborder.set.failed.big", 5.9999968E7D));
-    private static final SimpleCommandExceptionType ERROR_TOO_FAR_OUT = new SimpleCommandExceptionType(Component.translatable("commands.worldborder.set.failed.far", 2.9999984E7D));
+    private static final SimpleCommandExceptionType ERROR_TOO_BIG = new SimpleCommandExceptionType(Component.translatable("commands.worldborder.set.failed.big", Double.valueOf(5.9999968E7D)));
+    private static final SimpleCommandExceptionType ERROR_TOO_FAR_OUT = new SimpleCommandExceptionType(Component.translatable("commands.worldborder.set.failed.far", Double.valueOf(2.9999984E7D)));
     private static final SimpleCommandExceptionType ERROR_SAME_WARNING_TIME = new SimpleCommandExceptionType(Component.translatable("commands.worldborder.warning.time.failed"));
     private static final SimpleCommandExceptionType ERROR_SAME_WARNING_DISTANCE = new SimpleCommandExceptionType(Component.translatable("commands.worldborder.warning.distance.failed"));
     private static final SimpleCommandExceptionType ERROR_SAME_DAMAGE_BUFFER = new SimpleCommandExceptionType(Component.translatable("commands.worldborder.damage.buffer.failed"));
@@ -63,7 +63,7 @@ public class WorldBorderCommand {
             throw WorldBorderCommand.ERROR_SAME_DAMAGE_BUFFER.create();
         } else {
             worldborder.setDamageSafeZone((double) distance);
-            source.sendSuccess(Component.translatable("commands.worldborder.damage.buffer.success", String.format(Locale.ROOT, "%.2f", distance)), true);
+            source.sendSuccess(Component.translatable("commands.worldborder.damage.buffer.success", String.format(Locale.ROOT, "%.2f", Float.valueOf(distance))), true);
             return (int) distance;
         }
     }
@@ -75,7 +75,7 @@ public class WorldBorderCommand {
             throw WorldBorderCommand.ERROR_SAME_DAMAGE_AMOUNT.create();
         } else {
             worldborder.setDamagePerBlock((double) damagePerBlock);
-            source.sendSuccess(Component.translatable("commands.worldborder.damage.amount.success", String.format(Locale.ROOT, "%.2f", damagePerBlock)), true);
+            source.sendSuccess(Component.translatable("commands.worldborder.damage.amount.success", String.format(Locale.ROOT, "%.2f", Float.valueOf(damagePerBlock))), true);
             return (int) damagePerBlock;
         }
     }
@@ -87,7 +87,7 @@ public class WorldBorderCommand {
             throw WorldBorderCommand.ERROR_SAME_WARNING_TIME.create();
         } else {
             worldborder.setWarningTime(time);
-            source.sendSuccess(Component.translatable("commands.worldborder.warning.time.success", time), true);
+            source.sendSuccess(Component.translatable("commands.worldborder.warning.time.success", Integer.valueOf(time)), true);
             return time;
         }
     }
@@ -99,7 +99,7 @@ public class WorldBorderCommand {
             throw WorldBorderCommand.ERROR_SAME_WARNING_DISTANCE.create();
         } else {
             worldborder.setWarningBlocks(distance);
-            source.sendSuccess(Component.translatable("commands.worldborder.warning.distance.success", distance), true);
+            source.sendSuccess(Component.translatable("commands.worldborder.warning.distance.success", Integer.valueOf(distance)), true);
             return distance;
         }
     }
@@ -107,7 +107,7 @@ public class WorldBorderCommand {
     private static int getSize(CommandSourceStack source) {
         double d0 = source.getLevel().getWorldBorder().getSize(); // CraftBukkit
 
-        source.sendSuccess(Component.translatable("commands.worldborder.get", String.format(Locale.ROOT, "%.0f", d0)), false);
+        source.sendSuccess(Component.translatable("commands.worldborder.get", String.format(Locale.ROOT, "%.0f", Double.valueOf(d0))), false);
         return Mth.floor(d0 + 0.5D);
     }
 
@@ -118,7 +118,7 @@ public class WorldBorderCommand {
             throw WorldBorderCommand.ERROR_SAME_CENTER.create();
         } else if ((double) Math.abs(pos.x) <= 2.9999984E7D && (double) Math.abs(pos.y) <= 2.9999984E7D) {
             worldborder.setCenter((double) pos.x, (double) pos.y);
-            source.sendSuccess(Component.translatable("commands.worldborder.center.success", String.format(Locale.ROOT, "%.2f", pos.x), String.format(Locale.ROOT, "%.2f", pos.y)), true);
+            source.sendSuccess(Component.translatable("commands.worldborder.center.success", String.format(Locale.ROOT, "%.2f", Float.valueOf(pos.x)), String.format(Locale.ROOT, "%.2f", Float.valueOf(pos.y))), true);
             return 0;
         } else {
             throw WorldBorderCommand.ERROR_TOO_FAR_OUT.create();
@@ -139,13 +139,13 @@ public class WorldBorderCommand {
             if (time > 0L) {
                 worldborder.lerpSizeBetween(d1, distance, time);
                 if (distance > d1) {
-                    source.sendSuccess(Component.translatable("commands.worldborder.set.grow", String.format(Locale.ROOT, "%.1f", distance), Long.toString(time / 1000L)), true);
+                    source.sendSuccess(Component.translatable("commands.worldborder.set.grow", String.format(Locale.ROOT, "%.1f", Double.valueOf(distance)), Long.toString(time / 1000L)), true);
                 } else {
-                    source.sendSuccess(Component.translatable("commands.worldborder.set.shrink", String.format(Locale.ROOT, "%.1f", distance), Long.toString(time / 1000L)), true);
+                    source.sendSuccess(Component.translatable("commands.worldborder.set.shrink", String.format(Locale.ROOT, "%.1f", Double.valueOf(distance)), Long.toString(time / 1000L)), true);
                 }
             } else {
                 worldborder.setSize(distance);
-                source.sendSuccess(Component.translatable("commands.worldborder.set.immediate", String.format(Locale.ROOT, "%.1f", distance)), true);
+                source.sendSuccess(Component.translatable("commands.worldborder.set.immediate", String.format(Locale.ROOT, "%.1f", Double.valueOf(distance))), true);
             }
 
             return (int) (distance - d1);
diff --git a/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java b/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
index 51b3db0b6c2cede95b584268e035c0fb36d38094..8e5d628f237bf4034c456d331ebf7ff4175e4b96 100644
--- a/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
+++ b/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
@@ -257,7 +257,7 @@ public class DedicatedServer extends MinecraftServer implements ServerInterface
         // Paper end
 
         this.initializeKeyPair();
-        DedicatedServer.LOGGER.info("Starting Minecraft server on {}:{}", this.getLocalIp().isEmpty() ? "*" : this.getLocalIp(), this.getPort());
+        DedicatedServer.LOGGER.info("Starting Minecraft server on {}:{}", this.getLocalIp().isEmpty() ? "*" : this.getLocalIp(), Integer.valueOf(this.getPort()));
 
         try {
             this.getConnection().bind(bindAddress); // Paper - Unix domain socket support
@@ -300,7 +300,7 @@ public class DedicatedServer extends MinecraftServer implements ServerInterface
             DedicatedServer.LOGGER.info("Preparing level \"{}\"", this.getLevelIdName());
             this.loadLevel(storageSource.getLevelId()); // CraftBukkit
             long j = Util.getNanos() - i;
-            String s = String.format(Locale.ROOT, "%.3fs", (double) j / 1.0E9D);
+            String s = String.format(Locale.ROOT, "%.3fs", Double.valueOf((double) j / 1.0E9D));
 
             //DedicatedServer.LOGGER.info("Done ({})! For help, type \"help\"", s); // Paper moved to after init
             if (dedicatedserverproperties.announcePlayerAchievements != null) {
@@ -383,18 +383,18 @@ public class DedicatedServer extends MinecraftServer implements ServerInterface
         BufferedWriter bufferedwriter = Files.newBufferedWriter(file);
 
         try {
-            bufferedwriter.write(String.format(Locale.ROOT, "sync-chunk-writes=%s%n", dedicatedserverproperties.syncChunkWrites));
+            bufferedwriter.write(String.format(Locale.ROOT, "sync-chunk-writes=%s%n", Boolean.valueOf(dedicatedserverproperties.syncChunkWrites)));
             bufferedwriter.write(String.format(Locale.ROOT, "gamemode=%s%n", dedicatedserverproperties.gamemode));
-            bufferedwriter.write(String.format(Locale.ROOT, "spawn-monsters=%s%n", dedicatedserverproperties.spawnMonsters));
-            bufferedwriter.write(String.format(Locale.ROOT, "entity-broadcast-range-percentage=%d%n", dedicatedserverproperties.entityBroadcastRangePercentage));
-            bufferedwriter.write(String.format(Locale.ROOT, "max-world-size=%d%n", dedicatedserverproperties.maxWorldSize));
-            bufferedwriter.write(String.format(Locale.ROOT, "spawn-npcs=%s%n", dedicatedserverproperties.spawnNpcs));
-            bufferedwriter.write(String.format(Locale.ROOT, "view-distance=%d%n", dedicatedserverproperties.viewDistance));
-            bufferedwriter.write(String.format(Locale.ROOT, "simulation-distance=%d%n", dedicatedserverproperties.simulationDistance));
-            bufferedwriter.write(String.format(Locale.ROOT, "spawn-animals=%s%n", dedicatedserverproperties.spawnAnimals));
-            bufferedwriter.write(String.format(Locale.ROOT, "generate-structures=%s%n", dedicatedserverproperties.worldOptions.generateStructures()));
-            bufferedwriter.write(String.format(Locale.ROOT, "use-native=%s%n", dedicatedserverproperties.useNativeTransport));
-            bufferedwriter.write(String.format(Locale.ROOT, "rate-limit=%d%n", dedicatedserverproperties.rateLimitPacketsPerSecond));
+            bufferedwriter.write(String.format(Locale.ROOT, "spawn-monsters=%s%n", Boolean.valueOf(dedicatedserverproperties.spawnMonsters)));
+            bufferedwriter.write(String.format(Locale.ROOT, "entity-broadcast-range-percentage=%d%n", Integer.valueOf(dedicatedserverproperties.entityBroadcastRangePercentage)));
+            bufferedwriter.write(String.format(Locale.ROOT, "max-world-size=%d%n", Integer.valueOf(dedicatedserverproperties.maxWorldSize)));
+            bufferedwriter.write(String.format(Locale.ROOT, "spawn-npcs=%s%n", Boolean.valueOf(dedicatedserverproperties.spawnNpcs)));
+            bufferedwriter.write(String.format(Locale.ROOT, "view-distance=%d%n", Integer.valueOf(dedicatedserverproperties.viewDistance)));
+            bufferedwriter.write(String.format(Locale.ROOT, "simulation-distance=%d%n", Integer.valueOf(dedicatedserverproperties.simulationDistance)));
+            bufferedwriter.write(String.format(Locale.ROOT, "spawn-animals=%s%n", Boolean.valueOf(dedicatedserverproperties.spawnAnimals)));
+            bufferedwriter.write(String.format(Locale.ROOT, "generate-structures=%s%n", Boolean.valueOf(dedicatedserverproperties.worldOptions.generateStructures())));
+            bufferedwriter.write(String.format(Locale.ROOT, "use-native=%s%n", Boolean.valueOf(dedicatedserverproperties.useNativeTransport)));
+            bufferedwriter.write(String.format(Locale.ROOT, "rate-limit=%d%n", Integer.valueOf(dedicatedserverproperties.rateLimitPacketsPerSecond)));
         } catch (Throwable throwable) {
             if (bufferedwriter != null) {
                 try {
@@ -604,7 +604,7 @@ public class DedicatedServer extends MinecraftServer implements ServerInterface
     public void setPlayerIdleTimeout(int playerIdleTimeout) {
         super.setPlayerIdleTimeout(playerIdleTimeout);
         this.settings.update((dedicatedserverproperties) -> {
-            return (DedicatedServerProperties) dedicatedserverproperties.playerIdleTimeout.update(this.registryAccess(), playerIdleTimeout);
+            return (DedicatedServerProperties) dedicatedserverproperties.playerIdleTimeout.update(this.registryAccess(), Integer.valueOf(playerIdleTimeout));
         });
     }
 
@@ -788,7 +788,7 @@ public class DedicatedServer extends MinecraftServer implements ServerInterface
 
     public void storeUsingWhiteList(boolean useWhitelist) {
         this.settings.update((dedicatedserverproperties) -> {
-            return (DedicatedServerProperties) dedicatedserverproperties.whiteList.update(this.registryAccess(), useWhitelist);
+            return (DedicatedServerProperties) dedicatedserverproperties.whiteList.update(this.registryAccess(), Boolean.valueOf(useWhitelist));
         });
     }
 
diff --git a/src/main/java/net/minecraft/server/dedicated/DedicatedServerProperties.java b/src/main/java/net/minecraft/server/dedicated/DedicatedServerProperties.java
index c7e4330c93baff1f3027d7c75cf857b673d38970..841b478d7376d8c56836690a713e6f8fb84a41ab 100644
--- a/src/main/java/net/minecraft/server/dedicated/DedicatedServerProperties.java
+++ b/src/main/java/net/minecraft/server/dedicated/DedicatedServerProperties.java
@@ -142,14 +142,14 @@ public class DedicatedServerProperties extends Settings<DedicatedServerPropertie
         this.broadcastRconToOps = this.get("broadcast-rcon-to-ops", true);
         this.broadcastConsoleToOps = this.get("broadcast-console-to-ops", true);
         this.maxWorldSize = this.get("max-world-size", (integer) -> {
-            return Mth.clamp(integer, (int) 1, 29999984);
+            return Integer.valueOf(Mth.clamp(integer, (int) 1, 29999984));
         }, 29999984);
         this.syncChunkWrites = this.get("sync-chunk-writes", true) && Boolean.getBoolean("Paper.enable-sync-chunk-writes"); // Paper - hide behind flag
         this.enableJmxMonitoring = this.get("enable-jmx-monitoring", false);
         this.enableStatus = this.get("enable-status", true);
         this.hideOnlinePlayers = this.get("hide-online-players", false);
         this.entityBroadcastRangePercentage = this.get("entity-broadcast-range-percentage", (integer) -> {
-            return Mth.clamp(integer, (int) 10, (int) 1000);
+            return Integer.valueOf(Mth.clamp(integer, (int) 10, (int) 1000));
         }, 100);
         this.textFilteringConfig = this.get("text-filtering-config", "");
         this.playerIdleTimeout = this.getMutable("player-idle-timeout", 0);
diff --git a/src/main/java/net/minecraft/server/dedicated/Settings.java b/src/main/java/net/minecraft/server/dedicated/Settings.java
index bafd0f3492a0b8778d28610785129c5eba7fe4a2..b23c2a0b0cf8d95795bc5057cb858e94f03a18f9 100644
--- a/src/main/java/net/minecraft/server/dedicated/Settings.java
+++ b/src/main/java/net/minecraft/server/dedicated/Settings.java
@@ -222,27 +222,27 @@ public abstract class Settings<T extends Settings<T>> {
     }
 
     protected int get(String key, int fallback) {
-        return (Integer) this.get(key, Settings.wrapNumberDeserializer(Integer::parseInt), fallback);
+        return (Integer) this.get(key, Settings.wrapNumberDeserializer(Integer::parseInt), Integer.valueOf(fallback));
     }
 
     protected Settings<T>.MutableValue<Integer> getMutable(String key, int fallback) {
-        return this.getMutable(key, Settings.wrapNumberDeserializer(Integer::parseInt), fallback);
+        return this.getMutable(key, Settings.wrapNumberDeserializer(Integer::parseInt), Integer.valueOf(fallback));
     }
 
     protected int get(String key, UnaryOperator<Integer> transformer, int fallback) {
-        return (Integer) this.get(key, Settings.wrapNumberDeserializer(Integer::parseInt), transformer, Objects::toString, fallback);
+        return (Integer) this.get(key, Settings.wrapNumberDeserializer(Integer::parseInt), transformer, Objects::toString, Integer.valueOf(fallback));
     }
 
     protected long get(String key, long fallback) {
-        return (Long) this.get(key, Settings.wrapNumberDeserializer(Long::parseLong), fallback);
+        return (Long) this.get(key, Settings.wrapNumberDeserializer(Long::parseLong), Long.valueOf(fallback));
     }
 
     protected boolean get(String key, boolean fallback) {
-        return (Boolean) this.get(key, Boolean::valueOf, fallback);
+        return (Boolean) this.get(key, Boolean::valueOf, Boolean.valueOf(fallback));
     }
 
     protected Settings<T>.MutableValue<Boolean> getMutable(String key, boolean fallback) {
-        return this.getMutable(key, Boolean::valueOf, fallback);
+        return this.getMutable(key, Boolean::valueOf, Boolean.valueOf(fallback));
     }
 
     @Nullable
diff --git a/src/main/java/net/minecraft/server/level/ChunkMap.java b/src/main/java/net/minecraft/server/level/ChunkMap.java
index 9862da261654d3911e193487e28f609e8b391f41..58457b172aa35c5730fbe42857f0cf72f38317f4 100644
--- a/src/main/java/net/minecraft/server/level/ChunkMap.java
+++ b/src/main/java/net/minecraft/server/level/ChunkMap.java
@@ -1410,7 +1410,7 @@ public class ChunkMap extends ChunkStorage implements ChunkHolder.PlayerProvider
             cachedDataPackets.setValue(new java.util.HashMap<>());
         }
 
-        Boolean shouldModify = chunk.getLevel().chunkPacketBlockController.shouldModify(player, chunk);
+        Boolean shouldModify = Boolean.valueOf(chunk.getLevel().chunkPacketBlockController.shouldModify(player, chunk));
         player.trackChunk(chunk.getPos(), (Packet) cachedDataPackets.getValue().computeIfAbsent(shouldModify, (s) -> {
             // Paper start - Fix MC-162253
             final int viewDistance = getEffectiveViewDistance();
diff --git a/src/main/java/net/minecraft/server/level/ServerLevel.java b/src/main/java/net/minecraft/server/level/ServerLevel.java
index 54c2b7fba83d6f06dba95b1bb5b487a02048d6e6..97e9bab342745d40e3c3e0d8df4c7fb0525eca78 100644
--- a/src/main/java/net/minecraft/server/level/ServerLevel.java
+++ b/src/main/java/net/minecraft/server/level/ServerLevel.java
@@ -983,7 +983,7 @@ public class ServerLevel extends Level implements WorldGenLevel {
                 if (this.sleepStatus.areEnoughSleeping(i)) {
                     ichatmutablecomponent = Component.translatable("sleep.skipping_night");
                 } else {
-                    ichatmutablecomponent = Component.translatable("sleep.players_sleeping", this.sleepStatus.amountSleeping(), this.sleepStatus.sleepersNeeded(i));
+                    ichatmutablecomponent = Component.translatable("sleep.players_sleeping", Integer.valueOf(this.sleepStatus.amountSleeping()), Integer.valueOf(this.sleepStatus.sleepersNeeded(i)));
                 }
 
                 Iterator iterator = this.players.iterator();
@@ -2129,7 +2129,7 @@ public class ServerLevel extends Level implements WorldGenLevel {
         BufferedWriter bufferedwriter = Files.newBufferedWriter(path.resolve("stats.txt"));
 
         try {
-            bufferedwriter.write(String.format(Locale.ROOT, "spawning_chunks: %d\n", playerchunkmap.getDistanceManager().getNaturalSpawnChunkCount()));
+            bufferedwriter.write(String.format(Locale.ROOT, "spawning_chunks: %d\n", Integer.valueOf(playerchunkmap.getDistanceManager().getNaturalSpawnChunkCount())));
             NaturalSpawner.SpawnState spawnercreature_d = this.getChunkSource().getLastSpawnState();
 
             if (spawnercreature_d != null) {
@@ -2138,16 +2138,16 @@ public class ServerLevel extends Level implements WorldGenLevel {
                 while (objectiterator.hasNext()) {
                     Entry<MobCategory> entry = (Entry) objectiterator.next();
 
-                    bufferedwriter.write(String.format(Locale.ROOT, "spawn_count.%s: %d\n", ((MobCategory) entry.getKey()).getName(), entry.getIntValue()));
+                    bufferedwriter.write(String.format(Locale.ROOT, "spawn_count.%s: %d\n", ((MobCategory) entry.getKey()).getName(), Integer.valueOf(entry.getIntValue())));
                 }
             }
 
             bufferedwriter.write(String.format(Locale.ROOT, "entities: %s\n", this.entityLookup.getDebugInfo())); // Paper - rewrite chunk system
-            bufferedwriter.write(String.format(Locale.ROOT, "block_entity_tickers: %d\n", this.blockEntityTickers.size()));
-            bufferedwriter.write(String.format(Locale.ROOT, "block_ticks: %d\n", this.getBlockTicks().count()));
-            bufferedwriter.write(String.format(Locale.ROOT, "fluid_ticks: %d\n", this.getFluidTicks().count()));
+            bufferedwriter.write(String.format(Locale.ROOT, "block_entity_tickers: %d\n", Integer.valueOf(this.blockEntityTickers.size())));
+            bufferedwriter.write(String.format(Locale.ROOT, "block_ticks: %d\n", Integer.valueOf(this.getBlockTicks().count())));
+            bufferedwriter.write(String.format(Locale.ROOT, "fluid_ticks: %d\n", Integer.valueOf(this.getFluidTicks().count())));
             bufferedwriter.write("distance_manager: " + playerchunkmap.getDistanceManager().getDebugStatus() + "\n");
-            bufferedwriter.write(String.format(Locale.ROOT, "pending_tasks: %d\n", this.getChunkSource().getPendingTasksCount()));
+            bufferedwriter.write(String.format(Locale.ROOT, "pending_tasks: %d\n", Integer.valueOf(this.getChunkSource().getPendingTasksCount())));
         } catch (Throwable throwable) {
             if (bufferedwriter != null) {
                 try {
@@ -2282,7 +2282,7 @@ public class ServerLevel extends Level implements WorldGenLevel {
             Component ichatbasecomponent = entity.getCustomName();
             Component ichatbasecomponent1 = entity.getDisplayName();
 
-            csvwriter.writeRow(entity.getX(), entity.getY(), entity.getZ(), entity.getUUID(), BuiltInRegistries.ENTITY_TYPE.getKey(entity.getType()), entity.isAlive(), ichatbasecomponent1.getString(), ichatbasecomponent != null ? ichatbasecomponent.getString() : null);
+            csvwriter.writeRow(Double.valueOf(entity.getX()), Double.valueOf(entity.getY()), Double.valueOf(entity.getZ()), entity.getUUID(), BuiltInRegistries.ENTITY_TYPE.getKey(entity.getType()), Boolean.valueOf(entity.isAlive()), ichatbasecomponent1.getString(), ichatbasecomponent != null ? ichatbasecomponent.getString() : null);
         }
 
     }
@@ -2295,7 +2295,7 @@ public class ServerLevel extends Level implements WorldGenLevel {
             TickingBlockEntity tickingblockentity = (TickingBlockEntity) iterator.next();
             BlockPos blockposition = tickingblockentity.getPos();
 
-            csvwriter.writeRow(blockposition.getX(), blockposition.getY(), blockposition.getZ(), tickingblockentity.getType());
+            csvwriter.writeRow(Integer.valueOf(blockposition.getX()), Integer.valueOf(blockposition.getY()), Integer.valueOf(blockposition.getZ()), tickingblockentity.getType());
         }
 
     }
@@ -2354,9 +2354,9 @@ public class ServerLevel extends Level implements WorldGenLevel {
 
     @VisibleForTesting
     public String getWatchdogStats() {
-        return String.format(Locale.ROOT, "players: %s, entities: %s [%s], block_entities: %d [%s], block_ticks: %d, fluid_ticks: %d, chunk_source: %s", this.players.size(), this.entityLookup.getDebugInfo(), ServerLevel.getTypeCount(this.entityLookup.getAll(), (entity) -> { // Paper - rewrite chunk system
+        return String.format(Locale.ROOT, "players: %s, entities: %s [%s], block_entities: %d [%s], block_ticks: %d, fluid_ticks: %d, chunk_source: %s", Integer.valueOf(this.players.size()), this.entityLookup.getDebugInfo(), ServerLevel.getTypeCount(this.entityLookup.getAll(), (entity) -> { // Paper - rewrite chunk system
             return BuiltInRegistries.ENTITY_TYPE.getKey(entity.getType()).toString();
-        }), this.blockEntityTickers.size(), ServerLevel.getTypeCount(this.blockEntityTickers, TickingBlockEntity::getType), this.getBlockTicks().count(), this.getFluidTicks().count(), this.gatherChunkSourceStats());
+        }), Integer.valueOf(this.blockEntityTickers.size()), ServerLevel.getTypeCount(this.blockEntityTickers, TickingBlockEntity::getType), Integer.valueOf(this.getBlockTicks().count()), Integer.valueOf(this.getFluidTicks().count()), this.gatherChunkSourceStats());
     }
 
     private static <T> String getTypeCount(Iterable<T> items, Function<T, String> classifier) {
diff --git a/src/main/java/net/minecraft/server/level/ServerPlayer.java b/src/main/java/net/minecraft/server/level/ServerPlayer.java
index 7d6d3c8556033d289fdadc489e73fba478fce41a..ea7fdc20246ea4e10b3380ce2ca3f77380557adf 100644
--- a/src/main/java/net/minecraft/server/level/ServerPlayer.java
+++ b/src/main/java/net/minecraft/server/level/ServerPlayer.java
@@ -1980,14 +1980,14 @@ public class ServerPlayer extends Player {
         this.adventure$locale = net.kyori.adventure.translation.Translator.parseLocale(this.locale);
         this.connection.connection.channel.attr(PaperAdventure.LOCALE_ATTRIBUTE).set(this.adventure$locale);
         // Paper end
-        this.clientViewDistance = packet.viewDistance;
+        this.clientViewDistance = Integer.valueOf(packet.viewDistance);
         // CraftBukkit end
         this.chatVisibility = packet.chatVisibility();
         this.canChatColor = packet.chatColors();
         this.textFilteringEnabled = packet.textFilteringEnabled();
         this.allowsListing = packet.allowsListing();
-        this.getEntityData().set(ServerPlayer.DATA_PLAYER_MODE_CUSTOMISATION, (byte) packet.modelCustomisation());
-        this.getEntityData().set(ServerPlayer.DATA_PLAYER_MAIN_HAND, (byte) (packet.mainHand() == HumanoidArm.LEFT ? 0 : 1));
+        this.getEntityData().set(ServerPlayer.DATA_PLAYER_MODE_CUSTOMISATION, Byte.valueOf((byte) packet.modelCustomisation()));
+        this.getEntityData().set(ServerPlayer.DATA_PLAYER_MAIN_HAND, Byte.valueOf((byte) (packet.mainHand() == HumanoidArm.LEFT ? 0 : 1)));
     }
 
     public boolean canChatInColor() {
diff --git a/src/main/java/net/minecraft/server/level/Ticket.java b/src/main/java/net/minecraft/server/level/Ticket.java
index 768a2667f950a635a562fa8a0c75b31a3ae9190e..3ce23de3199852aa1d24734b4526a0b1df0ddc11 100644
--- a/src/main/java/net/minecraft/server/level/Ticket.java
+++ b/src/main/java/net/minecraft/server/level/Ticket.java
@@ -42,7 +42,7 @@ public final class Ticket<T> implements Comparable<Ticket<?>> {
 
     @Override
     public int hashCode() {
-        return Objects.hash(this.type, this.ticketLevel, this.key);
+        return Objects.hash(this.type, Integer.valueOf(this.ticketLevel), this.key);
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/server/level/WorldGenRegion.java b/src/main/java/net/minecraft/server/level/WorldGenRegion.java
index 877498729c66de9aa6a27c9148f7494d7895615c..3e413dbbeb955ef42453bd9050405bee342e3d3e 100644
--- a/src/main/java/net/minecraft/server/level/WorldGenRegion.java
+++ b/src/main/java/net/minecraft/server/level/WorldGenRegion.java
@@ -145,12 +145,12 @@ public class WorldGenRegion implements WorldGenLevel {
         if (!create) {
             return null;
         } else {
-            WorldGenRegion.LOGGER.error("Requested chunk : {} {}", chunkX, chunkZ);
-            WorldGenRegion.LOGGER.error("Region bounds : {} {} | {} {}", new Object[]{this.firstPos.x, this.firstPos.z, this.lastPos.x, this.lastPos.z});
+            WorldGenRegion.LOGGER.error("Requested chunk : {} {}", Integer.valueOf(chunkX), Integer.valueOf(chunkZ));
+            WorldGenRegion.LOGGER.error("Region bounds : {} {} | {} {}", new Object[]{Integer.valueOf(this.firstPos.x), Integer.valueOf(this.firstPos.z), Integer.valueOf(this.lastPos.x), Integer.valueOf(this.lastPos.z)});
             if (ichunkaccess != null) {
-                throw (RuntimeException) Util.pauseInIde(new RuntimeException(String.format(Locale.ROOT, "Chunk is not of correct status. Expecting %s, got %s | %s %s", leastStatus, ichunkaccess.getStatus(), chunkX, chunkZ)));
+                throw (RuntimeException) Util.pauseInIde(new RuntimeException(String.format(Locale.ROOT, "Chunk is not of correct status. Expecting %s, got %s | %s %s", leastStatus, ichunkaccess.getStatus(), Integer.valueOf(chunkX), Integer.valueOf(chunkZ))));
             } else {
-                throw (RuntimeException) Util.pauseInIde(new RuntimeException(String.format(Locale.ROOT, "We are asking a region for a chunk out of bound | %s %s", chunkX, chunkZ)));
+                throw (RuntimeException) Util.pauseInIde(new RuntimeException(String.format(Locale.ROOT, "We are asking a region for a chunk out of bound | %s %s", Integer.valueOf(chunkX), Integer.valueOf(chunkZ))));
             }
         }
     }
diff --git a/src/main/java/net/minecraft/server/level/progress/LoggerChunkProgressListener.java b/src/main/java/net/minecraft/server/level/progress/LoggerChunkProgressListener.java
index 286aad3205ef8a9e21a47ef07893844fe857556a..4681b984c2b18a61473c6e1a4c7b94777f099543 100644
--- a/src/main/java/net/minecraft/server/level/progress/LoggerChunkProgressListener.java
+++ b/src/main/java/net/minecraft/server/level/progress/LoggerChunkProgressListener.java
@@ -43,7 +43,7 @@ public class LoggerChunkProgressListener implements ChunkProgressListener {
         int i = this.getProgress();
         if (Util.getMillis() > this.nextTickTime) {
             this.nextTickTime += 500L;
-            LOGGER.info(Component.translatable("menu.preparingSpawn", Mth.clamp(i, 0, 100)).getString());
+            LOGGER.info(Component.translatable("menu.preparingSpawn", Integer.valueOf(Mth.clamp(i, 0, 100))).getString());
         }
 
     }
@@ -54,7 +54,7 @@ public class LoggerChunkProgressListener implements ChunkProgressListener {
 
     @Override
     public void stop() {
-        LOGGER.info("Time elapsed: {} ms", (long)(Util.getMillis() - this.startTime));
+        LOGGER.info("Time elapsed: {} ms", Long.valueOf((long) (Util.getMillis() - this.startTime)));
         this.nextTickTime = Long.MAX_VALUE;
     }
 
diff --git a/src/main/java/net/minecraft/server/network/LegacyQueryHandler.java b/src/main/java/net/minecraft/server/network/LegacyQueryHandler.java
index e6553b936dac1eb25a310d1a33acb0b1a5e646d2..5d3074b80f3a0e13dc324cb94b54c2797931cb8e 100644
--- a/src/main/java/net/minecraft/server/network/LegacyQueryHandler.java
+++ b/src/main/java/net/minecraft/server/network/LegacyQueryHandler.java
@@ -53,14 +53,14 @@ public class LegacyQueryHandler extends ChannelInboundHandlerAdapter {
 
             switch (i) {
                 case 0:
-                    LegacyQueryHandler.LOGGER.debug("Ping: (<1.3.x) from {}:{}", inetsocketaddress.getAddress(), inetsocketaddress.getPort());
+                    LegacyQueryHandler.LOGGER.debug("Ping: (<1.3.x) from {}:{}", inetsocketaddress.getAddress(), Integer.valueOf(inetsocketaddress.getPort()));
                     // Paper start - Call PaperServerListPingEvent and use results
                     event = com.destroystokyo.paper.network.PaperLegacyStatusClient.processRequest(minecraftserver, inetsocketaddress, 39, null);
                     if (event == null) {
                         channelhandlercontext.close();
                         break;
                     }
-                    s = String.format(Locale.ROOT, "%s\u00a7%d\u00a7%d", com.destroystokyo.paper.network.PaperLegacyStatusClient.getUnformattedMotd(event), event.getNumPlayers(), event.getMaxPlayers());
+                    s = String.format(Locale.ROOT, "%s\u00a7%d\u00a7%d", com.destroystokyo.paper.network.PaperLegacyStatusClient.getUnformattedMotd(event), Integer.valueOf(event.getNumPlayers()), Integer.valueOf(event.getMaxPlayers()));
                     this.sendFlushAndClose(channelhandlercontext, this.createReply(s));
                     // Paper end
                     break;
@@ -69,14 +69,14 @@ public class LegacyQueryHandler extends ChannelInboundHandlerAdapter {
                         return;
                     }
 
-                    LegacyQueryHandler.LOGGER.debug("Ping: (1.4-1.5.x) from {}:{}", inetsocketaddress.getAddress(), inetsocketaddress.getPort());
+                    LegacyQueryHandler.LOGGER.debug("Ping: (1.4-1.5.x) from {}:{}", inetsocketaddress.getAddress(), Integer.valueOf(inetsocketaddress.getPort()));
                     // Paper start - Call PaperServerListPingEvent and use results
                     event = com.destroystokyo.paper.network.PaperLegacyStatusClient.processRequest(minecraftserver, inetsocketaddress, 127, null); // Paper
                     if (event == null) {
                         channelhandlercontext.close();
                         break;
                     }
-                    s = String.format(Locale.ROOT, "\u00a71\u0000%d\u0000%s\u0000%s\u0000%d\u0000%d", new Object[] { event.getProtocolVersion(), minecraftserver.getServerVersion(), event.getMotd(), event.getNumPlayers(), event.getMaxPlayers()}); // CraftBukkit
+                    s = String.format(Locale.ROOT, "\u00a71\u0000%d\u0000%s\u0000%s\u0000%d\u0000%d", new Object[] {Integer.valueOf(event.getProtocolVersion()), minecraftserver.getServerVersion(), event.getMotd(), Integer.valueOf(event.getNumPlayers()), Integer.valueOf(event.getMaxPlayers())}); // CraftBukkit
                     // Paper end
                     this.sendFlushAndClose(channelhandlercontext, this.createReply(s));
                     break;
@@ -195,8 +195,8 @@ public class LegacyQueryHandler extends ChannelInboundHandlerAdapter {
             return;
         }
 
-        String response = String.format("\u00a71\u0000%d\u0000%s\u0000%s\u0000%d\u0000%d", event.getProtocolVersion(), event.getVersion(),
-            com.destroystokyo.paper.network.PaperLegacyStatusClient.getMotd(event), event.getNumPlayers(), event.getMaxPlayers());
+        String response = String.format("\u00a71\u0000%d\u0000%s\u0000%s\u0000%d\u0000%d", Integer.valueOf(event.getProtocolVersion()), event.getVersion(),
+            com.destroystokyo.paper.network.PaperLegacyStatusClient.getMotd(event), Integer.valueOf(event.getNumPlayers()), Integer.valueOf(event.getMaxPlayers()));
         this.sendFlushAndClose(ctx, this.createReply(response));
     }
 
diff --git a/src/main/java/net/minecraft/server/network/ServerConnectionListener.java b/src/main/java/net/minecraft/server/network/ServerConnectionListener.java
index abcc3266d18f34d160eac87fdea153dce24c60b8..4cbbafaf1bf17eaf7498a7c0d703451c0abd1d50 100644
--- a/src/main/java/net/minecraft/server/network/ServerConnectionListener.java
+++ b/src/main/java/net/minecraft/server/network/ServerConnectionListener.java
@@ -120,7 +120,7 @@ public class ServerConnectionListener {
             this.channels.add(((ServerBootstrap) ((ServerBootstrap) (new ServerBootstrap()).channel(oclass)).childHandler(new ChannelInitializer<Channel>() {
                 protected void initChannel(Channel channel) {
                     try {
-                        channel.config().setOption(ChannelOption.TCP_NODELAY, true);
+                        channel.config().setOption(ChannelOption.TCP_NODELAY, Boolean.TRUE);
                     } catch (ChannelException channelexception) {
                         ;
                     }
@@ -160,7 +160,7 @@ public class ServerConnectionListener {
                     ((Connection) object).setListener(new ServerHandshakePacketListenerImpl(ServerConnectionListener.this.server, (Connection) object));
                     io.papermc.paper.network.ChannelInitializeListenerHolder.callListeners(channel); // Paper
                 }
-            }).group((EventLoopGroup) lazyinitvar.get()).localAddress(address)).option(ChannelOption.AUTO_READ, false).bind().syncUninterruptibly()); // CraftBukkit // Paper
+            }).group((EventLoopGroup) lazyinitvar.get()).localAddress(address)).option(ChannelOption.AUTO_READ, Boolean.FALSE).bind().syncUninterruptibly()); // CraftBukkit // Paper
         }
     }
 
diff --git a/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java b/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
index 50d8d16b1856c0c875ccabbcfc240379a7669559..417821f9944f40f17d0a64a0360c4a6a711caa2d 100644
--- a/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
+++ b/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
@@ -644,7 +644,7 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Tic
 
                 if (d10 - d9 > Math.max(100.0D, Math.pow((double) (org.spigotmc.SpigotConfig.movedTooQuicklyMultiplier * (float) i * speed), 2)) && !this.isSingleplayerOwner()) {
                 // CraftBukkit end
-                    ServerGamePacketListenerImpl.LOGGER.warn("{} (vehicle of {}) moved too quickly! {},{},{}", new Object[]{entity.getName().getString(), this.player.getName().getString(), d6, d7, d8});
+                    ServerGamePacketListenerImpl.LOGGER.warn("{} (vehicle of {}) moved too quickly! {},{},{}", new Object[]{entity.getName().getString(), this.player.getName().getString(), Double.valueOf(d6), Double.valueOf(d7), Double.valueOf(d8)});
                     this.connection.send(new ClientboundMoveVehiclePacket(entity));
                     return;
                 }
@@ -672,7 +672,7 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Tic
 
                 if (d10 > org.spigotmc.SpigotConfig.movedWronglyThreshold) { // Spigot
                     flag2 = true; // Paper - diff on change, this should be moved wrongly
-                    ServerGamePacketListenerImpl.LOGGER.warn("{} (vehicle of {}) moved wrongly! {}", new Object[]{entity.getName().getString(), this.player.getName().getString(), Math.sqrt(d10)});
+                    ServerGamePacketListenerImpl.LOGGER.warn("{} (vehicle of {}) moved wrongly! {}", new Object[]{entity.getName().getString(), this.player.getName().getString(), Double.valueOf(Math.sqrt(d10))});
                 }
                 Location curPos = this.getCraftPlayer().getLocation(); // Spigot
 
@@ -970,7 +970,7 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Tic
                         iblockdata1 = Blocks.COMMAND_BLOCK.defaultBlockState();
                 }
 
-                BlockState iblockdata2 = (BlockState) ((BlockState) iblockdata1.setValue(CommandBlock.FACING, enumdirection)).setValue(CommandBlock.CONDITIONAL, packet.isConditional());
+                BlockState iblockdata2 = (BlockState) ((BlockState) iblockdata1.setValue(CommandBlock.FACING, enumdirection)).setValue(CommandBlock.CONDITIONAL, Boolean.valueOf(packet.isConditional()));
 
                 if (iblockdata2 != iblockdata) {
                     this.player.level.setBlock(blockposition, iblockdata2, 2);
@@ -1440,7 +1440,7 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Tic
                             this.lastTick = (int) (System.currentTimeMillis() / 50);
 
                             if (i > Math.max(this.allowedPlayerTicks, 5)) {
-                                ServerGamePacketListenerImpl.LOGGER.debug("{} is sending move packets too frequently ({} packets since last tick)", this.player.getName().getString(), i);
+                                ServerGamePacketListenerImpl.LOGGER.debug("{} is sending move packets too frequently ({} packets since last tick)", this.player.getName().getString(), Integer.valueOf(i));
                                 i = 1;
                             }
 
@@ -1467,7 +1467,7 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Tic
 
                                 if (d11 - d10 > Math.max(f2, Math.pow((double) (org.spigotmc.SpigotConfig.movedTooQuicklyMultiplier * (float) i * speed), 2)) && !this.isSingleplayerOwner()) {
                                 // CraftBukkit end
-                                    ServerGamePacketListenerImpl.LOGGER.warn("{} moved too quickly! {},{},{}", new Object[]{this.player.getName().getString(), d7, d8, d9});
+                                    ServerGamePacketListenerImpl.LOGGER.warn("{} moved too quickly! {},{},{}", new Object[]{this.player.getName().getString(), Double.valueOf(d7), Double.valueOf(d8), Double.valueOf(d9)});
                                     this.teleport(this.player.getX(), this.player.getY(), this.player.getZ(), this.player.getYRot(), this.player.getXRot());
                                     return;
                                 }
@@ -1959,7 +1959,7 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Tic
                             InteractionResult enuminteractionresult = this.player.gameMode.useItemOn(this.player, worldserver, itemstack, enumhand, movingobjectpositionblock);
 
                             if (enumdirection == Direction.UP && !enuminteractionresult.consumesAction() && blockposition.getY() >= i - 1 && ServerGamePacketListenerImpl.wasBlockPlacementAttempt(this.player, itemstack)) {
-                                MutableComponent ichatmutablecomponent = Component.translatable("build.tooHigh", i - 1).withStyle(ChatFormatting.RED);
+                                MutableComponent ichatmutablecomponent = Component.translatable("build.tooHigh", Integer.valueOf(i - 1)).withStyle(ChatFormatting.RED);
 
                                 this.player.sendSystemMessage(ichatmutablecomponent, true);
                         } else if (enuminteractionresult.shouldSwing() && !this.player.gameMode.interactResult) { // Paper
@@ -1967,7 +1967,7 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Tic
                             }
                         }
                     } else {
-                        MutableComponent ichatmutablecomponent1 = Component.translatable("build.tooHigh", i - 1).withStyle(ChatFormatting.RED);
+                        MutableComponent ichatmutablecomponent1 = Component.translatable("build.tooHigh", Integer.valueOf(i - 1)).withStyle(ChatFormatting.RED);
 
                         this.player.sendSystemMessage(ichatmutablecomponent1, true);
                     }
@@ -2320,7 +2320,7 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Tic
 
     private Optional<LastSeenMessages> tryHandleChat(String message, Instant timestamp, LastSeenMessages.Update acknowledgment) {
         if (!this.updateChatOrder(timestamp)) {
-            ServerGamePacketListenerImpl.LOGGER.warn("{} sent out-of-order chat: '{}': {} > {}", this.player.getName().getString(), message, this.lastChatTimeStamp.get().getEpochSecond(), timestamp.getEpochSecond()); // Paper
+            ServerGamePacketListenerImpl.LOGGER.warn("{} sent out-of-order chat: '{}': {} > {}", this.player.getName().getString(), message, Long.valueOf(this.lastChatTimeStamp.get().getEpochSecond()), Long.valueOf(timestamp.getEpochSecond())); // Paper
             this.server.scheduleOnMain(() -> { // Paper - push to main
             this.disconnect(Component.translatable("multiplayer.disconnect.out_of_order_chat"), org.bukkit.event.player.PlayerKickEvent.Cause.OUT_OF_ORDER_CHAT); // Paper - kick event ca
             }); // Paper - push to main
@@ -2940,7 +2940,7 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Tic
                 int i = packet.getSlotNum();
 
                 if (!this.player.containerMenu.isValidSlotIndex(i)) {
-                    ServerGamePacketListenerImpl.LOGGER.debug("Player {} clicked invalid slot index: {}, available slots: {}", new Object[]{this.player.getName(), i, this.player.containerMenu.slots.size()});
+                    ServerGamePacketListenerImpl.LOGGER.debug("Player {} clicked invalid slot index: {}, available slots: {}", new Object[]{this.player.getName(), Integer.valueOf(i), Integer.valueOf(this.player.containerMenu.slots.size())});
                 } else {
                     boolean flag = packet.getStateId() != this.player.containerMenu.getStateId();
 
diff --git a/src/main/java/net/minecraft/server/network/ServerHandshakePacketListenerImpl.java b/src/main/java/net/minecraft/server/network/ServerHandshakePacketListenerImpl.java
index e7ff7ad3bf4dd17fdd34202ec3aef8e9512bc36d..d6c2aeafd5f15d6b57ab4a8e82c97f013f58187a 100644
--- a/src/main/java/net/minecraft/server/network/ServerHandshakePacketListenerImpl.java
+++ b/src/main/java/net/minecraft/server/network/ServerHandshakePacketListenerImpl.java
@@ -51,14 +51,14 @@ public class ServerHandshakePacketListenerImpl implements ServerHandshakePacketL
 
                     synchronized (ServerHandshakePacketListenerImpl.throttleTracker) {
                         if (ServerHandshakePacketListenerImpl.throttleTracker.containsKey(address) && !"127.0.0.1".equals(address.getHostAddress()) && currentTime - ServerHandshakePacketListenerImpl.throttleTracker.get(address) < connectionThrottle) {
-                            ServerHandshakePacketListenerImpl.throttleTracker.put(address, currentTime);
+                            ServerHandshakePacketListenerImpl.throttleTracker.put(address, Long.valueOf(currentTime));
                             Component chatmessage = io.papermc.paper.adventure.PaperAdventure.asVanilla(io.papermc.paper.configuration.GlobalConfiguration.get().messages.kick.connectionThrottle); // Paper - Configurable connection throttle kick message
                             this.connection.send(new ClientboundLoginDisconnectPacket(chatmessage));
                             this.connection.disconnect(chatmessage);
                             return;
                         }
 
-                        ServerHandshakePacketListenerImpl.throttleTracker.put(address, currentTime);
+                        ServerHandshakePacketListenerImpl.throttleTracker.put(address, Long.valueOf(currentTime));
                         ServerHandshakePacketListenerImpl.throttleCounter++;
                         if (ServerHandshakePacketListenerImpl.throttleCounter > 200) {
                             ServerHandshakePacketListenerImpl.throttleCounter = 0;
diff --git a/src/main/java/net/minecraft/server/players/PlayerList.java b/src/main/java/net/minecraft/server/players/PlayerList.java
index f381bf9064be548a4a603e0042886d8a5e70ba5b..80c4a62498e83f0dbb6b8888682c10dbf1a76835 100644
--- a/src/main/java/net/minecraft/server/players/PlayerList.java
+++ b/src/main/java/net/minecraft/server/players/PlayerList.java
@@ -450,7 +450,7 @@ public abstract class PlayerList {
         }
         // Paper end
         // CraftBukkit - Moved from above, added world
-        PlayerList.LOGGER.info("{}[{}] logged in with entity id {} at ([{}]{}, {}, {})", player.getName().getString(), s1, player.getId(), worldserver1.serverLevelData.getLevelName(), player.getX(), player.getY(), player.getZ());
+        PlayerList.LOGGER.info("{}[{}] logged in with entity id {} at ([{}]{}, {}, {})", player.getName().getString(), s1, Integer.valueOf(player.getId()), worldserver1.serverLevelData.getLevelName(), Double.valueOf(player.getX()), Double.valueOf(player.getY()), Double.valueOf(player.getZ()));
     }
 
     public void updateEntireScoreboard(ServerScoreboard scoreboard, ServerPlayer player) {
@@ -883,7 +883,7 @@ public abstract class PlayerList {
         entityplayer1.forceSetPositionRotation(location.getX(), location.getY(), location.getZ(), location.getYaw(), location.getPitch());
         // CraftBukkit end
 
-        worldserver1.getChunkSource().addRegionTicket(net.minecraft.server.level.TicketType.POST_TELEPORT, new net.minecraft.world.level.ChunkPos(location.getBlockX() >> 4, location.getBlockZ() >> 4), 1, entityplayer.getId()); // Paper
+        worldserver1.getChunkSource().addRegionTicket(net.minecraft.server.level.TicketType.POST_TELEPORT, new net.minecraft.world.level.ChunkPos(location.getBlockX() >> 4, location.getBlockZ() >> 4), 1, Integer.valueOf(entityplayer.getId())); // Paper
         while (avoidSuffocation && !worldserver1.noCollision(entityplayer1, entityplayer1.getBoundingBox(), true) && entityplayer1.getY() < (double) worldserver1.getMaxBuildHeight()) { // Paper - make sure this loads chunks, we default to NOT loading now
             entityplayer1.setPos(entityplayer1.getX(), entityplayer1.getY() + 1.0D, entityplayer1.getZ());
         }
@@ -916,7 +916,7 @@ public abstract class PlayerList {
         // Paper start - Fix SPIGOT-5989
         if (flag2 && !isLocAltered) {
             BlockState data = worldserver1.getBlockState(blockposition);
-            worldserver1.setBlock(blockposition, data.setValue(net.minecraft.world.level.block.RespawnAnchorBlock.CHARGE, data.getValue(net.minecraft.world.level.block.RespawnAnchorBlock.CHARGE) - 1), 3);
+            worldserver1.setBlock(blockposition, data.setValue(net.minecraft.world.level.block.RespawnAnchorBlock.CHARGE, Integer.valueOf(data.getValue(net.minecraft.world.level.block.RespawnAnchorBlock.CHARGE) - 1)), 3);
             entityplayer1.connection.send(new ClientboundSoundPacket(SoundEvents.RESPAWN_ANCHOR_DEPLETE, SoundSource.BLOCKS, (double) location.getX(), (double) location.getY(), (double) location.getZ(), 1.0F, 1.0F, worldserver1.getRandom().nextLong()));
         // Paper end
         }
diff --git a/src/main/java/net/minecraft/server/rcon/thread/QueryThreadGs4.java b/src/main/java/net/minecraft/server/rcon/thread/QueryThreadGs4.java
index 1ef089dbf83de35d875c00efdf468c397be56978..2e6c6bf64a8a9c164b7d6f57b63930140e7e66ee 100644
--- a/src/main/java/net/minecraft/server/rcon/thread/QueryThreadGs4.java
+++ b/src/main/java/net/minecraft/server/rcon/thread/QueryThreadGs4.java
@@ -78,7 +78,7 @@ public class QueryThreadGs4 extends GenericThread {
             QueryThreadGs4 queryThreadGs4 = new QueryThreadGs4(server, i);
             return !queryThreadGs4.start() ? null : queryThreadGs4;
         } else {
-            LOGGER.warn("Invalid query port {} found in server.properties (queries disabled)", (int)i);
+            LOGGER.warn("Invalid query port {} found in server.properties (queries disabled)", Integer.valueOf((int) i));
             return null;
         }
     }
@@ -91,7 +91,7 @@ public class QueryThreadGs4 extends GenericThread {
         byte[] bs = packet.getData();
         int i = packet.getLength();
         SocketAddress socketAddress = packet.getSocketAddress();
-        LOGGER.debug("Packet len {} [{}]", i, socketAddress);
+        LOGGER.debug("Packet len {} [{}]", Integer.valueOf(i), socketAddress);
         if (3 <= i && -2 == bs[0] && -3 == bs[1]) {
             LOGGER.debug("Packet '{}' [{}]", PktUtils.toHexString(bs[2]), socketAddress);
             switch (bs[2]) {
@@ -252,10 +252,10 @@ public class QueryThreadGs4 extends GenericThread {
     private Boolean validChallenge(DatagramPacket packet) {
         SocketAddress socketAddress = packet.getSocketAddress();
         if (!this.validChallenges.containsKey(socketAddress)) {
-            return false;
+            return Boolean.FALSE;
         } else {
             byte[] bs = packet.getData();
-            return this.validChallenges.get(socketAddress).getChallenge() == PktUtils.intFromNetworkByteArray(bs, 7, packet.getLength());
+            return Boolean.valueOf(this.validChallenges.get(socketAddress).getChallenge() == PktUtils.intFromNetworkByteArray(bs, 7, packet.getLength()));
         }
     }
 
@@ -279,7 +279,7 @@ public class QueryThreadGs4 extends GenericThread {
 
     @Override
     public void run() {
-        LOGGER.info("Query running on {}:{}", this.serverIp, this.port);
+        LOGGER.info("Query running on {}:{}", this.serverIp, Integer.valueOf(this.port));
         this.lastChallengeCheck = Util.getMillis();
         DatagramPacket datagramPacket = new DatagramPacket(this.buffer, this.buffer.length);
 
@@ -297,7 +297,7 @@ public class QueryThreadGs4 extends GenericThread {
                 }
             }
         } finally {
-            LOGGER.debug("closeSocket: {}:{}", this.serverIp, this.port);
+            LOGGER.debug("closeSocket: {}:{}", this.serverIp, Integer.valueOf(this.port));
             this.socket.close();
         }
 
@@ -329,7 +329,7 @@ public class QueryThreadGs4 extends GenericThread {
             this.socket.setSoTimeout(500);
             return true;
         } catch (Exception var2) {
-            LOGGER.warn("Unable to initialise query system on {}:{}", this.serverIp, this.port, var2);
+            LOGGER.warn("Unable to initialise query system on {}:{}", this.serverIp, Integer.valueOf(this.port), var2);
             return false;
         }
     }
@@ -350,11 +350,11 @@ public class QueryThreadGs4 extends GenericThread {
             this.identBytes[3] = bs[6];
             this.ident = new String(this.identBytes, StandardCharsets.UTF_8);
             this.challenge = RandomSource.create().nextInt(16777216);
-            this.challengeBytes = String.format(Locale.ROOT, "\t%s%d\u0000", this.ident, this.challenge).getBytes(StandardCharsets.UTF_8);
+            this.challengeBytes = String.format(Locale.ROOT, "\t%s%d\u0000", this.ident, Integer.valueOf(this.challenge)).getBytes(StandardCharsets.UTF_8);
         }
 
         public Boolean before(long lastQueryTime) {
-            return this.time < lastQueryTime;
+            return Boolean.valueOf(this.time < lastQueryTime);
         }
 
         public int getChallenge() {
diff --git a/src/main/java/net/minecraft/server/rcon/thread/RconThread.java b/src/main/java/net/minecraft/server/rcon/thread/RconThread.java
index 3bf60f640aa9fa4cabd2b3e5d3931e8467b9df24..fa12d6659fa302869236afbb95239ab7d1ea6de9 100644
--- a/src/main/java/net/minecraft/server/rcon/thread/RconThread.java
+++ b/src/main/java/net/minecraft/server/rcon/thread/RconThread.java
@@ -79,16 +79,16 @@ public class RconThread extends GenericThread {
                     if (!rconThread.start()) {
                         return null;
                     } else {
-                        LOGGER.info("RCON running on {}:{}", string, i);
+                        LOGGER.info("RCON running on {}:{}", string, Integer.valueOf(i));
                         return rconThread;
                     }
                 } catch (IOException var7) {
-                    LOGGER.warn("Unable to initialise RCON on {}:{}", string, i, var7);
+                    LOGGER.warn("Unable to initialise RCON on {}:{}", string, Integer.valueOf(i), var7);
                     return null;
                 }
             }
         } else {
-            LOGGER.warn("Invalid rcon port {} found in server.properties, rcon disabled!", (int)i);
+            LOGGER.warn("Invalid rcon port {} found in server.properties, rcon disabled!", Integer.valueOf((int) i));
             return null;
         }
     }
diff --git a/src/main/java/net/minecraft/stats/ServerStatsCounter.java b/src/main/java/net/minecraft/stats/ServerStatsCounter.java
index 72946e324c575ef39f3939225b96b68f724da460..b54731cadfa4ab96b5159da102dc1687a57f144e 100644
--- a/src/main/java/net/minecraft/stats/ServerStatsCounter.java
+++ b/src/main/java/net/minecraft/stats/ServerStatsCounter.java
@@ -212,7 +212,7 @@ public class ServerStatsCounter extends StatsCounter {
 
             ((JsonObject) map.computeIfAbsent(statistic.getType(), (statisticwrapper) -> {
                 return new JsonObject();
-            })).addProperty(ServerStatsCounter.getKey(statistic).toString(), it_unimi_dsi_fastutil_objects_object2intmap_entry.getIntValue());
+            })).addProperty(ServerStatsCounter.getKey(statistic).toString(), Integer.valueOf(it_unimi_dsi_fastutil_objects_object2intmap_entry.getIntValue()));
         }
 
         JsonObject jsonobject = new JsonObject();
@@ -227,7 +227,7 @@ public class ServerStatsCounter extends StatsCounter {
         JsonObject jsonobject1 = new JsonObject();
 
         jsonobject1.add("stats", jsonobject);
-        jsonobject1.addProperty("DataVersion", SharedConstants.getCurrentVersion().getWorldVersion());
+        jsonobject1.addProperty("DataVersion", Integer.valueOf(SharedConstants.getCurrentVersion().getWorldVersion()));
         return jsonobject1.toString();
     }
 
diff --git a/src/main/java/net/minecraft/util/worldupdate/WorldUpgrader.java b/src/main/java/net/minecraft/util/worldupdate/WorldUpgrader.java
index 759b125cc1251b9b4f1f443c9f70c482ef5b32f8..e9b37317a74dd922e320e572d9294997af46f881 100644
--- a/src/main/java/net/minecraft/util/worldupdate/WorldUpgrader.java
+++ b/src/main/java/net/minecraft/util/worldupdate/WorldUpgrader.java
@@ -226,7 +226,7 @@ public class WorldUpgrader {
 
             this.overworldDataStorage.save();
             i = Util.getMillis() - i;
-            WorldUpgrader.LOGGER.info("World optimizaton finished after {} ms", i);
+            WorldUpgrader.LOGGER.info("World optimizaton finished after {} ms", Long.valueOf(i));
             this.finished = true;
         }
     }
diff --git a/src/main/java/net/minecraft/world/effect/MobEffectInstance.java b/src/main/java/net/minecraft/world/effect/MobEffectInstance.java
index 038ba61e4845a4a71bb78ba388ed249d19529b78..1cdbd27c3d36993f205e05480a82b48da4b0449e 100644
--- a/src/main/java/net/minecraft/world/effect/MobEffectInstance.java
+++ b/src/main/java/net/minecraft/world/effect/MobEffectInstance.java
@@ -295,25 +295,25 @@ public class MobEffectInstance implements Comparable<MobEffectInstance> {
     @Override
     public int compareTo(MobEffectInstance mobEffectInstance) {
         int i = 32147;
-        return (this.getDuration() <= 32147 || mobEffectInstance.getDuration() <= 32147) && (!this.isAmbient() || !mobEffectInstance.isAmbient()) ? ComparisonChain.start().compare(this.isAmbient(), mobEffectInstance.isAmbient()).compare(this.getDuration(), mobEffectInstance.getDuration()).compare(this.getEffect().getColor(), mobEffectInstance.getEffect().getColor()).result() : ComparisonChain.start().compare(this.isAmbient(), mobEffectInstance.isAmbient()).compare(this.getEffect().getColor(), mobEffectInstance.getEffect().getColor()).result();
+        return (this.getDuration() <= 32147 || mobEffectInstance.getDuration() <= 32147) && (!this.isAmbient() || !mobEffectInstance.isAmbient()) ? ComparisonChain.start().compare(Boolean.valueOf(this.isAmbient()), Boolean.valueOf(mobEffectInstance.isAmbient())).compare(this.getDuration(), mobEffectInstance.getDuration()).compare(this.getEffect().getColor(), mobEffectInstance.getEffect().getColor()).result() : ComparisonChain.start().compare(Boolean.valueOf(this.isAmbient()), Boolean.valueOf(mobEffectInstance.isAmbient())).compare(this.getEffect().getColor(), mobEffectInstance.getEffect().getColor()).result();
     }
 
     public static class FactorData {
         public static final Codec<MobEffectInstance.FactorData> CODEC = RecordCodecBuilder.create((instance) -> {
             return instance.group(ExtraCodecs.NON_NEGATIVE_INT.fieldOf("padding_duration").forGetter((data) -> {
-                return data.paddingDuration;
-            }), Codec.FLOAT.fieldOf("factor_start").orElse(0.0F).forGetter((data) -> {
-                return data.factorStart;
-            }), Codec.FLOAT.fieldOf("factor_target").orElse(1.0F).forGetter((data) -> {
-                return data.factorTarget;
-            }), Codec.FLOAT.fieldOf("factor_current").orElse(0.0F).forGetter((data) -> {
-                return data.factorCurrent;
-            }), ExtraCodecs.NON_NEGATIVE_INT.fieldOf("effect_changed_timestamp").orElse(0).forGetter((data) -> {
-                return data.effectChangedTimestamp;
-            }), Codec.FLOAT.fieldOf("factor_previous_frame").orElse(0.0F).forGetter((data) -> {
-                return data.factorPreviousFrame;
-            }), Codec.BOOL.fieldOf("had_effect_last_tick").orElse(false).forGetter((data) -> {
-                return data.hadEffectLastTick;
+                return Integer.valueOf(data.paddingDuration);
+            }), Codec.FLOAT.fieldOf("factor_start").orElse(Float.valueOf(0.0F)).forGetter((data) -> {
+                return Float.valueOf(data.factorStart);
+            }), Codec.FLOAT.fieldOf("factor_target").orElse(Float.valueOf(1.0F)).forGetter((data) -> {
+                return Float.valueOf(data.factorTarget);
+            }), Codec.FLOAT.fieldOf("factor_current").orElse(Float.valueOf(0.0F)).forGetter((data) -> {
+                return Float.valueOf(data.factorCurrent);
+            }), ExtraCodecs.NON_NEGATIVE_INT.fieldOf("effect_changed_timestamp").orElse(Integer.valueOf(0)).forGetter((data) -> {
+                return Integer.valueOf(data.effectChangedTimestamp);
+            }), Codec.FLOAT.fieldOf("factor_previous_frame").orElse(Float.valueOf(0.0F)).forGetter((data) -> {
+                return Float.valueOf(data.factorPreviousFrame);
+            }), Codec.BOOL.fieldOf("had_effect_last_tick").orElse(Boolean.FALSE).forGetter((data) -> {
+                return Boolean.valueOf(data.hadEffectLastTick);
             })).apply(instance, MobEffectInstance.FactorData::new);
         });
         private final int paddingDuration;
diff --git a/src/main/java/net/minecraft/world/entity/AgeableMob.java b/src/main/java/net/minecraft/world/entity/AgeableMob.java
index 21a82083a6ae4a3d3c19265cd6ee374251f61726..f608357e40c778748030de05acb9764c313c0093 100644
--- a/src/main/java/net/minecraft/world/entity/AgeableMob.java
+++ b/src/main/java/net/minecraft/world/entity/AgeableMob.java
@@ -72,7 +72,7 @@ public abstract class AgeableMob extends PathfinderMob {
     @Override
     protected void defineSynchedData() {
         super.defineSynchedData();
-        this.entityData.define(AgeableMob.DATA_BABY_ID, false);
+        this.entityData.define(AgeableMob.DATA_BABY_ID, Boolean.FALSE);
     }
 
     public boolean canBreed() {
@@ -118,7 +118,7 @@ public abstract class AgeableMob extends PathfinderMob {
 
         this.age = age;
         if (j < 0 && age >= 0 || j >= 0 && age < 0) {
-            this.entityData.set(AgeableMob.DATA_BABY_ID, age < 0);
+            this.entityData.set(AgeableMob.DATA_BABY_ID, Boolean.valueOf(age < 0));
             this.ageBoundaryReached();
         }
 
diff --git a/src/main/java/net/minecraft/world/entity/AreaEffectCloud.java b/src/main/java/net/minecraft/world/entity/AreaEffectCloud.java
index 11a6f5b9e726453979d4c718c32a44024e1b8a08..bc75111a93b0e8aefdd1ce912f3be13d193f7596 100644
--- a/src/main/java/net/minecraft/world/entity/AreaEffectCloud.java
+++ b/src/main/java/net/minecraft/world/entity/AreaEffectCloud.java
@@ -89,7 +89,7 @@ public class AreaEffectCloud extends Entity {
 
     public void setRadius(float radius) {
         if (!this.level.isClientSide) {
-            this.getEntityData().set(AreaEffectCloud.DATA_RADIUS, Mth.clamp(radius, 0.0F, 32.0F));
+            this.getEntityData().set(AreaEffectCloud.DATA_RADIUS, Float.valueOf(Mth.clamp(radius, 0.0F, 32.0F)));
         }
 
     }
@@ -118,9 +118,9 @@ public class AreaEffectCloud extends Entity {
 
     private void updateColor() {
         if (this.potion == Potions.EMPTY && this.effects.isEmpty()) {
-            this.getEntityData().set(AreaEffectCloud.DATA_COLOR, 0);
+            this.getEntityData().set(AreaEffectCloud.DATA_COLOR, Integer.valueOf(0));
         } else {
-            this.getEntityData().set(AreaEffectCloud.DATA_COLOR, PotionUtils.getColor((Collection) PotionUtils.getAllEffects(this.potion, this.effects)));
+            this.getEntityData().set(AreaEffectCloud.DATA_COLOR, Integer.valueOf(PotionUtils.getColor((Collection) PotionUtils.getAllEffects(this.potion, this.effects))));
         }
 
     }
@@ -136,7 +136,7 @@ public class AreaEffectCloud extends Entity {
     // CraftBukkit start accessor methods
     public void refreshEffects() {
         if (!this.fixedColor) {
-            this.getEntityData().set(AreaEffectCloud.DATA_COLOR, PotionUtils.getColor((Collection) PotionUtils.getAllEffects(this.potion, this.effects)));
+            this.getEntityData().set(AreaEffectCloud.DATA_COLOR, Integer.valueOf(PotionUtils.getColor((Collection) PotionUtils.getAllEffects(this.potion, this.effects))));
         }
     }
 
@@ -155,7 +155,7 @@ public class AreaEffectCloud extends Entity {
 
     public void setFixedColor(int rgb) {
         this.fixedColor = true;
-        this.getEntityData().set(AreaEffectCloud.DATA_COLOR, rgb);
+        this.getEntityData().set(AreaEffectCloud.DATA_COLOR, Integer.valueOf(rgb));
     }
 
     public ParticleOptions getParticle() {
@@ -167,7 +167,7 @@ public class AreaEffectCloud extends Entity {
     }
 
     protected void setWaiting(boolean waiting) {
-        this.getEntityData().set(AreaEffectCloud.DATA_WAITING, waiting);
+        this.getEntityData().set(AreaEffectCloud.DATA_WAITING, Boolean.valueOf(waiting));
     }
 
     public boolean isWaiting() {
@@ -314,7 +314,7 @@ public class AreaEffectCloud extends Entity {
                                 if (entity instanceof CraftLivingEntity) {
                                     net.minecraft.world.entity.LivingEntity entityliving = ((CraftLivingEntity) entity).getHandle();
                                     // CraftBukkit end
-                                    this.victims.put(entityliving, this.tickCount + this.reapplicationDelay);
+                                    this.victims.put(entityliving, Integer.valueOf(this.tickCount + this.reapplicationDelay));
                                     Iterator iterator2 = list.iterator();
 
                                     while (iterator2.hasNext()) {
diff --git a/src/main/java/net/minecraft/world/entity/Entity.java b/src/main/java/net/minecraft/world/entity/Entity.java
index e4c97c9aaf6655e403ee669c8dca10034038a475..bb360b9a4144b4833e74d23f4d98590459894d28 100644
--- a/src/main/java/net/minecraft/world/entity/Entity.java
+++ b/src/main/java/net/minecraft/world/entity/Entity.java
@@ -575,14 +575,14 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource {
         }
         // Spigot end
         this.entityData = new SynchedEntityData(this);
-        this.entityData.define(Entity.DATA_SHARED_FLAGS_ID, (byte) 0);
-        this.entityData.define(Entity.DATA_AIR_SUPPLY_ID, this.getMaxAirSupply());
-        this.entityData.define(Entity.DATA_CUSTOM_NAME_VISIBLE, false);
+        this.entityData.define(Entity.DATA_SHARED_FLAGS_ID, Byte.valueOf((byte) 0));
+        this.entityData.define(Entity.DATA_AIR_SUPPLY_ID, Integer.valueOf(this.getMaxAirSupply()));
+        this.entityData.define(Entity.DATA_CUSTOM_NAME_VISIBLE, Boolean.FALSE);
         this.entityData.define(Entity.DATA_CUSTOM_NAME, Optional.empty());
-        this.entityData.define(Entity.DATA_SILENT, false);
-        this.entityData.define(Entity.DATA_NO_GRAVITY, false);
+        this.entityData.define(Entity.DATA_SILENT, Boolean.FALSE);
+        this.entityData.define(Entity.DATA_NO_GRAVITY, Boolean.FALSE);
         this.entityData.define(Entity.DATA_POSE, net.minecraft.world.entity.Pose.STANDING);
-        this.entityData.define(Entity.DATA_TICKS_FROZEN, 0);
+        this.entityData.define(Entity.DATA_TICKS_FROZEN, Integer.valueOf(0));
         this.defineSynchedData();
         this.getEntityData().registrationLocked = true; // Spigot
         this.setPos(0.0D, 0.0D, 0.0D);
@@ -1607,7 +1607,7 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource {
     }
 
     public void setSilent(boolean silent) {
-        this.entityData.set(Entity.DATA_SILENT, silent);
+        this.entityData.set(Entity.DATA_SILENT, Boolean.valueOf(silent));
     }
 
     public boolean isNoGravity() {
@@ -1615,7 +1615,7 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource {
     }
 
     public void setNoGravity(boolean noGravity) {
-        this.entityData.set(Entity.DATA_NO_GRAVITY, noGravity);
+        this.entityData.set(Entity.DATA_NO_GRAVITY, Boolean.valueOf(noGravity));
     }
 
     protected Entity.MovementEmission getMovementEmission() {
@@ -3099,9 +3099,9 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource {
         byte b0 = (Byte) this.entityData.get(Entity.DATA_SHARED_FLAGS_ID);
 
         if (value) {
-            this.entityData.set(Entity.DATA_SHARED_FLAGS_ID, (byte) (b0 | 1 << index));
+            this.entityData.set(Entity.DATA_SHARED_FLAGS_ID, Byte.valueOf((byte) (b0 | 1 << index)));
         } else {
-            this.entityData.set(Entity.DATA_SHARED_FLAGS_ID, (byte) (b0 & ~(1 << index)));
+            this.entityData.set(Entity.DATA_SHARED_FLAGS_ID, Byte.valueOf((byte) (b0 & ~(1 << index))));
         }
 
     }
@@ -3125,7 +3125,7 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource {
             this.entityData.markDirty(Entity.DATA_AIR_SUPPLY_ID);
             return;
         }
-        this.entityData.set(Entity.DATA_AIR_SUPPLY_ID, event.getAmount());
+        this.entityData.set(Entity.DATA_AIR_SUPPLY_ID, Integer.valueOf(event.getAmount()));
         // CraftBukkit end
     }
 
@@ -3134,7 +3134,7 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource {
     }
 
     public void setTicksFrozen(int frozenTicks) {
-        this.entityData.set(Entity.DATA_TICKS_FROZEN, frozenTicks);
+        this.entityData.set(Entity.DATA_TICKS_FROZEN, Integer.valueOf(frozenTicks));
     }
 
     public float getPercentFrozen() {
@@ -3326,7 +3326,7 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource {
     public String toString() {
         String s = this.level == null ? "~NULL~" : this.level.toString();
 
-        return this.removalReason != null ? String.format(Locale.ROOT, "%s['%s'/%d, uuid='%s', l='%s', x=%.2f, y=%.2f, z=%.2f, cpos=%s, tl=%d, v=%b, removed=%s]", this.getClass().getSimpleName(), this.getName().getString(), this.id, this.uuid, s, this.getX(), this.getY(), this.getZ(), this.chunkPosition(), this.tickCount, this.valid, this.removalReason) : String.format(Locale.ROOT, "%s['%s'/%d, uuid='%s', l='%s', x=%.2f, y=%.2f, z=%.2f, cpos=%s, tl=%d, v=%b]", this.getClass().getSimpleName(), this.getName().getString(), this.id, this.uuid, s, this.getX(), this.getY(), this.getZ(), this.chunkPosition(), this.tickCount, this.valid);
+        return this.removalReason != null ? String.format(Locale.ROOT, "%s['%s'/%d, uuid='%s', l='%s', x=%.2f, y=%.2f, z=%.2f, cpos=%s, tl=%d, v=%b, removed=%s]", this.getClass().getSimpleName(), this.getName().getString(), Integer.valueOf(this.id), this.uuid, s, Double.valueOf(this.getX()), Double.valueOf(this.getY()), Double.valueOf(this.getZ()), this.chunkPosition(), Integer.valueOf(this.tickCount), Boolean.valueOf(this.valid), this.removalReason) : String.format(Locale.ROOT, "%s['%s'/%d, uuid='%s', l='%s', x=%.2f, y=%.2f, z=%.2f, cpos=%s, tl=%d, v=%b]", this.getClass().getSimpleName(), this.getName().getString(), Integer.valueOf(this.id), this.uuid, s, Double.valueOf(this.getX()), Double.valueOf(this.getY()), Double.valueOf(this.getZ()), this.chunkPosition(), Integer.valueOf(this.tickCount), Boolean.valueOf(this.valid));
     }
 
     public boolean isInvulnerableTo(DamageSource damageSource) {
@@ -3589,15 +3589,15 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource {
 
             return minecraftkey + " (" + this.getClass().getCanonicalName() + ")";
         });
-        section.setDetail("Entity ID", (Object) this.id);
+        section.setDetail("Entity ID", Integer.valueOf(this.id));
         section.setDetail("Entity Name", () -> {
             return this.getName().getString();
         });
-        section.setDetail("Entity's Exact location", (Object) String.format(Locale.ROOT, "%.2f, %.2f, %.2f", this.getX(), this.getY(), this.getZ()));
+        section.setDetail("Entity's Exact location", (Object) String.format(Locale.ROOT, "%.2f, %.2f, %.2f", Double.valueOf(this.getX()), Double.valueOf(this.getY()), Double.valueOf(this.getZ())));
         section.setDetail("Entity's Block location", (Object) CrashReportCategory.formatLocation(this.level, Mth.floor(this.getX()), Mth.floor(this.getY()), Mth.floor(this.getZ())));
         Vec3 vec3d = this.getDeltaMovement();
 
-        section.setDetail("Entity's Momentum", (Object) String.format(Locale.ROOT, "%.2f, %.2f, %.2f", vec3d.x, vec3d.y, vec3d.z));
+        section.setDetail("Entity's Momentum", (Object) String.format(Locale.ROOT, "%.2f, %.2f, %.2f", Double.valueOf(vec3d.x), Double.valueOf(vec3d.y), Double.valueOf(vec3d.z)));
         section.setDetail("Entity's Passengers", () -> {
             return this.getPassengers().toString();
         });
@@ -3663,7 +3663,7 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource {
     }
 
     public void setCustomNameVisible(boolean visible) {
-        this.entityData.set(Entity.DATA_CUSTOM_NAME_VISIBLE, visible);
+        this.entityData.set(Entity.DATA_CUSTOM_NAME_VISIBLE, Boolean.valueOf(visible));
     }
 
     public boolean isCustomNameVisible() {
@@ -3674,7 +3674,7 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource {
         if (this.level instanceof ServerLevel) {
             ChunkPos chunkcoordintpair = new ChunkPos(new BlockPos(destX, destY, destZ));
 
-            ((ServerLevel) this.level).getChunkSource().addRegionTicket(TicketType.POST_TELEPORT, chunkcoordintpair, 0, this.getId());
+            ((ServerLevel) this.level).getChunkSource().addRegionTicket(TicketType.POST_TELEPORT, chunkcoordintpair, 0, Integer.valueOf(this.getId()));
             this.level.getChunk(chunkcoordintpair.x, chunkcoordintpair.z);
             this.teleportTo(destX, destY, destZ);
         }
diff --git a/src/main/java/net/minecraft/world/entity/EntityType.java b/src/main/java/net/minecraft/world/entity/EntityType.java
index e5cd4b7609243669c9d84ff8a4988c209e6101aa..17d7898bed8e74d9e2cac61937072f198d2ac9a0 100644
--- a/src/main/java/net/minecraft/world/entity/EntityType.java
+++ b/src/main/java/net/minecraft/world/entity/EntityType.java
@@ -626,10 +626,10 @@ public class EntityType<T extends Entity> implements FeatureElement, EntityTypeT
                         final EntityType<?> entityType = entity.getType();
                         final int saveLimit = world.paperConfig().chunks.entityPerChunkSaveLimit.getOrDefault(entityType, -1);
                         if (saveLimit > -1) {
-                            if (this.loadedEntityCounts.getOrDefault(entityType, 0) >= saveLimit) {
+                            if (this.loadedEntityCounts.getOrDefault(entityType, Integer.valueOf(0)) >= saveLimit) {
                                 return null;
                             }
-                            this.loadedEntityCounts.merge(entityType, 1, Integer::sum);
+                            this.loadedEntityCounts.merge(entityType, Integer.valueOf(1), Integer::sum);
                         }
                         // Paper end
                         consumer.accept(entity);
diff --git a/src/main/java/net/minecraft/world/entity/ItemBasedSteering.java b/src/main/java/net/minecraft/world/entity/ItemBasedSteering.java
index 321d3b5f30acd0de8e9a0f48956b1968d3b92495..165651fcaf76e0ce22edc23b02d0050b862768b2 100644
--- a/src/main/java/net/minecraft/world/entity/ItemBasedSteering.java
+++ b/src/main/java/net/minecraft/world/entity/ItemBasedSteering.java
@@ -35,7 +35,7 @@ public class ItemBasedSteering {
             this.boosting = true;
             this.boostTime = 0;
             this.boostTimeTotal = random.nextInt(841) + 140;
-            this.entityData.set(this.boostTimeAccessor, this.boostTimeTotal);
+            this.entityData.set(this.boostTimeAccessor, Integer.valueOf(this.boostTimeTotal));
             return true;
         }
     }
@@ -45,7 +45,7 @@ public class ItemBasedSteering {
         this.boosting = true;
         this.boostTime = 0;
         this.boostTimeTotal = ticks;
-        this.entityData.set(this.boostTimeAccessor, this.boostTimeTotal);
+        this.entityData.set(this.boostTimeAccessor, Integer.valueOf(this.boostTimeTotal));
     }
     // CraftBukkit end
 
@@ -58,7 +58,7 @@ public class ItemBasedSteering {
     }
 
     public void setSaddle(boolean saddled) {
-        this.entityData.set(this.hasSaddleAccessor, saddled);
+        this.entityData.set(this.hasSaddleAccessor, Boolean.valueOf(saddled));
     }
 
     public boolean hasSaddle() {
diff --git a/src/main/java/net/minecraft/world/entity/LivingEntity.java b/src/main/java/net/minecraft/world/entity/LivingEntity.java
index 8d0900ed5f251fbd8ad34a94aea2e6a7aea98dc0..addd9ff816f4ed676f526c00cbc1606d8340b65c 100644
--- a/src/main/java/net/minecraft/world/entity/LivingEntity.java
+++ b/src/main/java/net/minecraft/world/entity/LivingEntity.java
@@ -294,7 +294,7 @@ public abstract class LivingEntity extends Entity {
         this.attributes = new AttributeMap(DefaultAttributes.getSupplier(type));
         this.craftAttributes = new CraftAttributeMap(this.attributes); // CraftBukkit
         // CraftBukkit - setHealth(getMaxHealth()) inlined and simplified to skip the instanceof check for EntityPlayer, as getBukkitEntity() is not initialized in constructor
-        this.entityData.set(LivingEntity.DATA_HEALTH_ID, (float) this.getAttribute(Attributes.MAX_HEALTH).getValue());
+        this.entityData.set(LivingEntity.DATA_HEALTH_ID, Float.valueOf((float) this.getAttribute(Attributes.MAX_HEALTH).getValue()));
         this.blocksBuilding = true;
         this.rotA = (float) ((Math.random() + 1.0D) * 0.009999999776482582D);
         this.reapplyPosition();
@@ -330,12 +330,12 @@ public abstract class LivingEntity extends Entity {
 
     @Override
     protected void defineSynchedData() {
-        this.entityData.define(LivingEntity.DATA_LIVING_ENTITY_FLAGS, (byte) 0);
-        this.entityData.define(LivingEntity.DATA_EFFECT_COLOR_ID, 0);
-        this.entityData.define(LivingEntity.DATA_EFFECT_AMBIENCE_ID, false);
-        this.entityData.define(LivingEntity.DATA_ARROW_COUNT_ID, 0);
-        this.entityData.define(LivingEntity.DATA_STINGER_COUNT_ID, 0);
-        this.entityData.define(LivingEntity.DATA_HEALTH_ID, 1.0F);
+        this.entityData.define(LivingEntity.DATA_LIVING_ENTITY_FLAGS, Byte.valueOf((byte) 0));
+        this.entityData.define(LivingEntity.DATA_EFFECT_COLOR_ID, Integer.valueOf(0));
+        this.entityData.define(LivingEntity.DATA_EFFECT_AMBIENCE_ID, Boolean.FALSE);
+        this.entityData.define(LivingEntity.DATA_ARROW_COUNT_ID, Integer.valueOf(0));
+        this.entityData.define(LivingEntity.DATA_STINGER_COUNT_ID, Integer.valueOf(0));
+        this.entityData.define(LivingEntity.DATA_HEALTH_ID, Float.valueOf(1.0F));
         this.entityData.define(LivingEntity.SLEEPING_POS_ID, Optional.empty());
     }
 
@@ -981,8 +981,8 @@ public abstract class LivingEntity extends Entity {
         } else {
             Collection<MobEffectInstance> collection = this.activeEffects.values();
 
-            this.entityData.set(LivingEntity.DATA_EFFECT_AMBIENCE_ID, LivingEntity.areAllEffectsAmbient(collection));
-            this.entityData.set(LivingEntity.DATA_EFFECT_COLOR_ID, PotionUtils.getColor(collection));
+            this.entityData.set(LivingEntity.DATA_EFFECT_AMBIENCE_ID, Boolean.valueOf(LivingEntity.areAllEffectsAmbient(collection)));
+            this.entityData.set(LivingEntity.DATA_EFFECT_COLOR_ID, Integer.valueOf(PotionUtils.getColor(collection)));
             this.setInvisible(this.hasEffect(MobEffects.INVISIBILITY));
         }
 
@@ -1059,8 +1059,8 @@ public abstract class LivingEntity extends Entity {
     }
 
     protected void removeEffectParticles() {
-        this.entityData.set(LivingEntity.DATA_EFFECT_AMBIENCE_ID, false);
-        this.entityData.set(LivingEntity.DATA_EFFECT_COLOR_ID, 0);
+        this.entityData.set(LivingEntity.DATA_EFFECT_AMBIENCE_ID, Boolean.FALSE);
+        this.entityData.set(LivingEntity.DATA_EFFECT_COLOR_ID, Integer.valueOf(0));
     }
 
     // CraftBukkit start
@@ -1321,7 +1321,7 @@ public abstract class LivingEntity extends Entity {
             return;
         }
         // CraftBukkit end
-        this.entityData.set(LivingEntity.DATA_HEALTH_ID, Mth.clamp(health, 0.0F, this.getMaxHealth()));
+        this.entityData.set(LivingEntity.DATA_HEALTH_ID, Float.valueOf(Mth.clamp(health, 0.0F, this.getMaxHealth())));
     }
 
     public boolean isDeadOrDying() {
@@ -2089,31 +2089,31 @@ public abstract class LivingEntity extends Entity {
                 @Override
                 public @NotNull Double apply(Double f) {
                     if (damagesource.isDamageHelmet() && !LivingEntity.this.getItemBySlot(EquipmentSlot.HEAD).isEmpty()) {
-                        return -(f - (f * 0.75F));
+                        return Double.valueOf(-(f - (f * 0.75F)));
 
                     }
-                    return -0.0;
+                    return Double.valueOf(-0.0);
                 }
             };
-            float hardHatModifier = hardHat.apply((double) f).floatValue();
+            float hardHatModifier = hardHat.apply(Double.valueOf((double) f)).floatValue();
             f += hardHatModifier;
 
             Function<Double, Double> blocking = new Function<Double, Double>() {
                 @Override
                 public Double apply(Double f) {
-                    return -((LivingEntity.this.isDamageSourceBlocked(damagesource)) ? f : 0.0);
+                    return Double.valueOf(-((LivingEntity.this.isDamageSourceBlocked(damagesource)) ? f : 0.0));
                 }
             };
-            float blockingModifier = blocking.apply((double) f).floatValue();
+            float blockingModifier = blocking.apply(Double.valueOf((double) f)).floatValue();
             f += blockingModifier;
 
             Function<Double, Double> armor = new Function<Double, Double>() {
                 @Override
                 public Double apply(Double f) {
-                    return -(f - LivingEntity.this.getDamageAfterArmorAbsorb(damagesource, f.floatValue()));
+                    return Double.valueOf(-(f - LivingEntity.this.getDamageAfterArmorAbsorb(damagesource, f.floatValue())));
                 }
             };
-            float armorModifier = armor.apply((double) f).floatValue();
+            float armorModifier = armor.apply(Double.valueOf((double) f)).floatValue();
             f += armorModifier;
 
             Function<Double, Double> resistance = new Function<Double, Double>() {
@@ -2123,30 +2123,30 @@ public abstract class LivingEntity extends Entity {
                         int i = (LivingEntity.this.getEffect(MobEffects.DAMAGE_RESISTANCE).getAmplifier() + 1) * 5;
                         int j = 25 - i;
                         float f1 = f.floatValue() * (float) j;
-                        return -(f - (f1 / 25.0F));
+                        return Double.valueOf(-(f - (f1 / 25.0F)));
                     }
-                    return -0.0;
+                    return Double.valueOf(-0.0);
                 }
             };
-            float resistanceModifier = resistance.apply((double) f).floatValue();
+            float resistanceModifier = resistance.apply(Double.valueOf((double) f)).floatValue();
             f += resistanceModifier;
 
             Function<Double, Double> magic = new Function<Double, Double>() {
                 @Override
                 public Double apply(Double f) {
-                    return -(f - LivingEntity.this.getDamageAfterMagicAbsorb(damagesource, f.floatValue()));
+                    return Double.valueOf(-(f - LivingEntity.this.getDamageAfterMagicAbsorb(damagesource, f.floatValue())));
                 }
             };
-            float magicModifier = magic.apply((double) f).floatValue();
+            float magicModifier = magic.apply(Double.valueOf((double) f)).floatValue();
             f += magicModifier;
 
             Function<Double, Double> absorption = new Function<Double, Double>() {
                 @Override
                 public Double apply(Double f) {
-                    return -(Math.max(f - Math.max(f - LivingEntity.this.getAbsorptionAmount(), 0.0F), 0.0F));
+                    return Double.valueOf(-(Math.max(f - Math.max(f - LivingEntity.this.getAbsorptionAmount(), 0.0F), 0.0F)));
                 }
             };
-            float absorptionModifier = absorption.apply((double) f).floatValue();
+            float absorptionModifier = absorption.apply(Double.valueOf((double) f)).floatValue();
 
             EntityDamageEvent event = CraftEventFactory.handleLivingEntityDamageEvent(this, damagesource, originalDamage, hardHatModifier, blockingModifier, armorModifier, resistanceModifier, magicModifier, absorptionModifier, hardHat, blocking, armor, resistance, magic, absorption);
             if (damagesource.getEntity() instanceof net.minecraft.world.entity.player.Player) {
@@ -2286,7 +2286,7 @@ public abstract class LivingEntity extends Entity {
         if (event.isCancelled()) {
             return;
         }
-        this.entityData.set(LivingEntity.DATA_ARROW_COUNT_ID, event.getNewAmount());
+        this.entityData.set(LivingEntity.DATA_ARROW_COUNT_ID, Integer.valueOf(event.getNewAmount()));
     }
     // CraftBukkit end
 
@@ -2295,7 +2295,7 @@ public abstract class LivingEntity extends Entity {
     }
 
     public final void setStingerCount(int stingerCount) {
-        this.entityData.set(LivingEntity.DATA_STINGER_COUNT_ID, stingerCount);
+        this.entityData.set(LivingEntity.DATA_STINGER_COUNT_ID, Integer.valueOf(stingerCount));
     }
 
     private int getCurrentSwingDuration() {
@@ -3811,7 +3811,7 @@ public abstract class LivingEntity extends Entity {
             j = b0 & ~mask;
         }
 
-        this.entityData.set(LivingEntity.DATA_LIVING_ENTITY_FLAGS, (byte) j);
+        this.entityData.set(LivingEntity.DATA_LIVING_ENTITY_FLAGS, Byte.valueOf((byte) j));
     }
 
     public void startUsingItem(InteractionHand hand) {
@@ -4084,7 +4084,7 @@ public abstract class LivingEntity extends Entity {
 
     public boolean randomTeleport(double x, double y, double z, boolean particleEffects) {
         // CraftBukkit start
-        return this.randomTeleport(x, y, z, particleEffects, org.bukkit.event.player.PlayerTeleportEvent.TeleportCause.UNKNOWN).orElse(false);
+        return this.randomTeleport(x, y, z, particleEffects, org.bukkit.event.player.PlayerTeleportEvent.TeleportCause.UNKNOWN).orElse(Boolean.FALSE);
     }
 
     public Optional<Boolean> randomTeleport(double d0, double d1, double d2, boolean flag, org.bukkit.event.player.PlayerTeleportEvent.TeleportCause cause) {
@@ -4147,7 +4147,7 @@ public abstract class LivingEntity extends Entity {
 
         if (!flag1) {
             // this.enderTeleportTo(d3, d4, d5); // CraftBukkit - already set the location back
-            return Optional.of(false); // CraftBukkit
+            return Optional.of(Boolean.FALSE); // CraftBukkit
         } else {
             if (flag) {
                 world.broadcastEntityEvent(this, (byte) 46);
@@ -4157,7 +4157,7 @@ public abstract class LivingEntity extends Entity {
                 ((PathfinderMob) this).getNavigation().stop();
             }
 
-            return Optional.of(true); // CraftBukkit
+            return Optional.of(Boolean.TRUE); // CraftBukkit
         }
     }
 
@@ -4214,7 +4214,7 @@ public abstract class LivingEntity extends Entity {
         BlockState iblockdata = this.level.getBlockState(pos);
 
         if (iblockdata.getBlock() instanceof BedBlock) {
-            this.level.setBlock(pos, (BlockState) iblockdata.setValue(BedBlock.OCCUPIED, true), 3);
+            this.level.setBlock(pos, (BlockState) iblockdata.setValue(BedBlock.OCCUPIED, Boolean.TRUE), 3);
         }
 
         this.setPose(Pose.SLEEPING);
@@ -4230,8 +4230,8 @@ public abstract class LivingEntity extends Entity {
 
     private boolean checkBedExists() {
         return (Boolean) this.getSleepingPos().map((blockposition) -> {
-            return this.level.getBlockState(blockposition).getBlock() instanceof BedBlock;
-        }).orElse(false);
+            return Boolean.valueOf(this.level.getBlockState(blockposition).getBlock() instanceof BedBlock);
+        }).orElse(Boolean.FALSE);
     }
 
     public void stopSleeping() {
@@ -4245,7 +4245,7 @@ public abstract class LivingEntity extends Entity {
             if (iblockdata.getBlock() instanceof BedBlock) {
                 Direction enumdirection = (Direction) iblockdata.getValue(BedBlock.FACING);
 
-                this.level.setBlock(blockposition, (BlockState) iblockdata.setValue(BedBlock.OCCUPIED, false), 3);
+                this.level.setBlock(blockposition, (BlockState) iblockdata.setValue(BedBlock.OCCUPIED, Boolean.FALSE), 3);
                 Vec3 vec3d = (Vec3) BedBlock.findStandUpPosition(this.getType(), this.level, blockposition, enumdirection, this.getYRot()).orElseGet(() -> {
                     BlockPos blockposition1 = blockposition.above();
 
diff --git a/src/main/java/net/minecraft/world/entity/Mob.java b/src/main/java/net/minecraft/world/entity/Mob.java
index 6de1733b39278796bfb718d3cf51c4e22b9cd243..a831ef2c3b4dcb1da8d58bca780ad48600a5c8f7 100644
--- a/src/main/java/net/minecraft/world/entity/Mob.java
+++ b/src/main/java/net/minecraft/world/entity/Mob.java
@@ -195,7 +195,7 @@ public abstract class Mob extends LivingEntity {
     }
 
     public void setPathfindingMalus(BlockPathTypes nodeType, float penalty) {
-        this.pathfindingMalus.put(nodeType, penalty);
+        this.pathfindingMalus.put(nodeType, Float.valueOf(penalty));
     }
 
     public boolean canCutCorner(BlockPathTypes type) {
@@ -308,7 +308,7 @@ public abstract class Mob extends LivingEntity {
     @Override
     protected void defineSynchedData() {
         super.defineSynchedData();
-        this.entityData.define(Mob.DATA_MOB_FLAGS_ID, (byte) 0);
+        this.entityData.define(Mob.DATA_MOB_FLAGS_ID, Byte.valueOf((byte) 0));
     }
 
     public int getAmbientSoundInterval() {
@@ -1563,19 +1563,19 @@ public abstract class Mob extends LivingEntity {
     public void setNoAi(boolean aiDisabled) {
         byte b0 = (Byte) this.entityData.get(Mob.DATA_MOB_FLAGS_ID);
 
-        this.entityData.set(Mob.DATA_MOB_FLAGS_ID, aiDisabled ? (byte) (b0 | 1) : (byte) (b0 & -2));
+        this.entityData.set(Mob.DATA_MOB_FLAGS_ID, Byte.valueOf(aiDisabled ? (byte) (b0 | 1) : (byte) (b0 & -2)));
     }
 
     public void setLeftHanded(boolean leftHanded) {
         byte b0 = (Byte) this.entityData.get(Mob.DATA_MOB_FLAGS_ID);
 
-        this.entityData.set(Mob.DATA_MOB_FLAGS_ID, leftHanded ? (byte) (b0 | 2) : (byte) (b0 & -3));
+        this.entityData.set(Mob.DATA_MOB_FLAGS_ID, Byte.valueOf(leftHanded ? (byte) (b0 | 2) : (byte) (b0 & -3)));
     }
 
     public void setAggressive(boolean attacking) {
         byte b0 = (Byte) this.entityData.get(Mob.DATA_MOB_FLAGS_ID);
 
-        this.entityData.set(Mob.DATA_MOB_FLAGS_ID, attacking ? (byte) (b0 | 4) : (byte) (b0 & -5));
+        this.entityData.set(Mob.DATA_MOB_FLAGS_ID, Byte.valueOf(attacking ? (byte) (b0 | 4) : (byte) (b0 & -5)));
     }
 
     public boolean isNoAi() {
diff --git a/src/main/java/net/minecraft/world/entity/TamableAnimal.java b/src/main/java/net/minecraft/world/entity/TamableAnimal.java
index 49f52baa02db18af6d8626754423ff157eb9c09c..2d9c36c393326804373457c4edc6cc77f4681778 100644
--- a/src/main/java/net/minecraft/world/entity/TamableAnimal.java
+++ b/src/main/java/net/minecraft/world/entity/TamableAnimal.java
@@ -32,7 +32,7 @@ public abstract class TamableAnimal extends Animal implements OwnableEntity {
     @Override
     protected void defineSynchedData() {
         super.defineSynchedData();
-        this.entityData.define(DATA_FLAGS_ID, (byte)0);
+        this.entityData.define(DATA_FLAGS_ID, Byte.valueOf((byte) 0));
         this.entityData.define(DATA_OWNERUUID_ID, Optional.empty());
     }
 
@@ -109,9 +109,9 @@ public abstract class TamableAnimal extends Animal implements OwnableEntity {
     public void setTame(boolean tamed) {
         byte b = this.entityData.get(DATA_FLAGS_ID);
         if (tamed) {
-            this.entityData.set(DATA_FLAGS_ID, (byte)(b | 4));
+            this.entityData.set(DATA_FLAGS_ID, Byte.valueOf((byte) (b | 4)));
         } else {
-            this.entityData.set(DATA_FLAGS_ID, (byte)(b & -5));
+            this.entityData.set(DATA_FLAGS_ID, Byte.valueOf((byte) (b & -5)));
         }
 
         this.reassessTameGoals();
@@ -133,9 +133,9 @@ public abstract class TamableAnimal extends Animal implements OwnableEntity {
         if (callEvent && !new io.papermc.paper.event.entity.EntityToggleSitEvent(this.getBukkitEntity(), inSittingPose).callEvent()) return; // Paper start - call EntityToggleSitEvent
         byte b = this.entityData.get(DATA_FLAGS_ID);
         if (inSittingPose) {
-            this.entityData.set(DATA_FLAGS_ID, (byte)(b | 1));
+            this.entityData.set(DATA_FLAGS_ID, Byte.valueOf((byte) (b | 1)));
         } else {
-            this.entityData.set(DATA_FLAGS_ID, (byte)(b & -2));
+            this.entityData.set(DATA_FLAGS_ID, Byte.valueOf((byte) (b & -2)));
         }
 
     }
diff --git a/src/main/java/net/minecraft/world/entity/ai/behavior/BabyFollowAdult.java b/src/main/java/net/minecraft/world/entity/ai/behavior/BabyFollowAdult.java
index 0ff878a8cfcd6a3e08575b7537d9b7e2b817908f..54a8871ca6325dbe97c4d6157b15d42be167e733 100644
--- a/src/main/java/net/minecraft/world/entity/ai/behavior/BabyFollowAdult.java
+++ b/src/main/java/net/minecraft/world/entity/ai/behavior/BabyFollowAdult.java
@@ -20,7 +20,7 @@ public class BabyFollowAdult {
 
     public static OneShot<AgeableMob> create(UniformInt executionRange, float speed) {
         return BabyFollowAdult.create(executionRange, (entityliving) -> {
-            return speed;
+            return Float.valueOf(speed);
         });
     }
 
diff --git a/src/main/java/net/minecraft/world/entity/ai/behavior/Behavior.java b/src/main/java/net/minecraft/world/entity/ai/behavior/Behavior.java
index 57ef7fbba3028c28231abf7b7ae78aa019323536..836c5f7ebd09c2f0f65a6f65509d83c62949ad95 100644
--- a/src/main/java/net/minecraft/world/entity/ai/behavior/Behavior.java
+++ b/src/main/java/net/minecraft/world/entity/ai/behavior/Behavior.java
@@ -49,7 +49,7 @@ public abstract class Behavior<E extends LivingEntity> implements BehaviorContro
     @Override
     public final boolean tryStart(ServerLevel world, E entity, long time) {
         // Paper start - behavior tick rate
-        int tickRate = java.util.Objects.requireNonNullElse(world.paperConfig().tickRates.behavior.get(entity.getType(), this.configKey), -1);
+        int tickRate = java.util.Objects.requireNonNullElse(world.paperConfig().tickRates.behavior.get(entity.getType(), this.configKey), Integer.valueOf(-1));
         if (tickRate > -1 && time < this.endTimestamp + tickRate) {
             return false;
         }
diff --git a/src/main/java/net/minecraft/world/entity/ai/behavior/PrepareRamNearestTarget.java b/src/main/java/net/minecraft/world/entity/ai/behavior/PrepareRamNearestTarget.java
index 39a50d0a1d8c3d91109a35cf6e5f6c6e47bbcd4c..de829c4bc7476d625b64bee4af0c8608292abb73 100644
--- a/src/main/java/net/minecraft/world/entity/ai/behavior/PrepareRamNearestTarget.java
+++ b/src/main/java/net/minecraft/world/entity/ai/behavior/PrepareRamNearestTarget.java
@@ -83,7 +83,7 @@ public class PrepareRamNearestTarget<E extends PathfinderMob> extends Behavior<E
 
         if (!behaviorcontroller.hasMemoryValue(MemoryModuleType.RAM_TARGET)) {
             world.broadcastEntityEvent(entity, (byte) 59);
-            behaviorcontroller.setMemory(MemoryModuleType.RAM_COOLDOWN_TICKS, this.getCooldownOnFail.applyAsInt(entity)); // CraftBukkit - decompile error
+            behaviorcontroller.setMemory(MemoryModuleType.RAM_COOLDOWN_TICKS, Integer.valueOf(this.getCooldownOnFail.applyAsInt(entity))); // CraftBukkit - decompile error
         }
 
     }
diff --git a/src/main/java/net/minecraft/world/entity/ai/behavior/RamTarget.java b/src/main/java/net/minecraft/world/entity/ai/behavior/RamTarget.java
index 9b64a465be77bcc07e420c84f19fe75816e0ead1..1b10527ff30fefdaee00b850144eeb6d468b8133 100644
--- a/src/main/java/net/minecraft/world/entity/ai/behavior/RamTarget.java
+++ b/src/main/java/net/minecraft/world/entity/ai/behavior/RamTarget.java
@@ -108,7 +108,7 @@ public class RamTarget extends Behavior<Goat> {
 
     protected void finishRam(ServerLevel world, Goat goat) {
         world.broadcastEntityEvent(goat, (byte)59);
-        goat.getBrain().setMemory(MemoryModuleType.RAM_COOLDOWN_TICKS, this.getTimeBetweenRams.apply(goat).sample(world.random));
+        goat.getBrain().setMemory(MemoryModuleType.RAM_COOLDOWN_TICKS, Integer.valueOf(this.getTimeBetweenRams.apply(goat).sample(world.random)));
         goat.getBrain().eraseMemory(MemoryModuleType.RAM_TARGET);
     }
 }
diff --git a/src/main/java/net/minecraft/world/entity/ai/sensing/Sensor.java b/src/main/java/net/minecraft/world/entity/ai/sensing/Sensor.java
index fcdb9bde8e1605e30dde3e580491522d4b62cdc0..3d1b12fd9a8c00efe43a4d7dd8edf0263e55065f 100644
--- a/src/main/java/net/minecraft/world/entity/ai/sensing/Sensor.java
+++ b/src/main/java/net/minecraft/world/entity/ai/sensing/Sensor.java
@@ -45,7 +45,7 @@ public abstract class Sensor<E extends LivingEntity> {
     public final void tick(ServerLevel world, E entity) {
         if (--this.timeToTick <= 0L) {
             // Paper start - configurable sensor tick rate and timings
-            this.timeToTick = java.util.Objects.requireNonNullElse(world.paperConfig().tickRates.sensor.get(entity.getType(), this.configKey), this.scanRate);
+            this.timeToTick = java.util.Objects.requireNonNullElse(world.paperConfig().tickRates.sensor.get(entity.getType(), this.configKey), Integer.valueOf(this.scanRate));
             this.timing.startTiming();
             // Paper end
             this.doTick(world, entity);
diff --git a/src/main/java/net/minecraft/world/entity/ai/village/poi/PoiManager.java b/src/main/java/net/minecraft/world/entity/ai/village/poi/PoiManager.java
index 8950b220b9a3512cd4667beb7bdec0e82e07edc6..c598d1c590ce657753a75a6eb2a1832c9678cdcd 100644
--- a/src/main/java/net/minecraft/world/entity/ai/village/poi/PoiManager.java
+++ b/src/main/java/net/minecraft/world/entity/ai/village/poi/PoiManager.java
@@ -187,7 +187,7 @@ public class PoiManager extends SectionStorage<PoiSection> {
 
     public boolean release(BlockPos pos) {
         return this.getOrLoad(SectionPos.asLong(pos)).map((poiSet) -> {
-            return poiSet.release(pos);
+            return Boolean.valueOf(poiSet.release(pos));
         }).orElseThrow(() -> {
             return Util.pauseInIde(new IllegalStateException("POI never registered at " + pos));
         });
@@ -195,8 +195,8 @@ public class PoiManager extends SectionStorage<PoiSection> {
 
     public boolean exists(BlockPos pos, Predicate<Holder<PoiType>> predicate) {
         return this.getOrLoad(SectionPos.asLong(pos)).map((poiSet) -> {
-            return poiSet.exists(pos, predicate);
-        }).orElse(false);
+            return Boolean.valueOf(poiSet.exists(pos, predicate));
+        }).orElse(Boolean.FALSE);
     }
 
     public Optional<Holder<PoiType>> getType(BlockPos pos) {
@@ -210,8 +210,8 @@ public class PoiManager extends SectionStorage<PoiSection> {
     @VisibleForDebug
     public int getFreeTickets(BlockPos pos) {
         return this.getOrLoad(SectionPos.asLong(pos)).map((poiSet) -> {
-            return poiSet.getFreeTickets(pos);
-        }).orElse(0);
+            return Integer.valueOf(poiSet.getFreeTickets(pos));
+        }).orElse(Integer.valueOf(0));
     }
 
     public int sectionsToVillage(SectionPos pos) {
@@ -222,10 +222,10 @@ public class PoiManager extends SectionStorage<PoiSection> {
     boolean isVillageCenter(long pos) {
         Optional<PoiSection> optional = this.get(pos);
         return optional == null ? false : optional.map((poiSet) -> {
-            return poiSet.getRecords((entry) -> {
-                return entry.is(PoiTypeTags.VILLAGE);
-            }, PoiManager.Occupancy.IS_OCCUPIED).findAny().isPresent();
-        }).orElse(false);
+            return Boolean.valueOf(poiSet.getRecords((entry) -> {
+	            return entry.is(PoiTypeTags.VILLAGE);
+            }, Occupancy.IS_OCCUPIED).findAny().isPresent());
+        }).orElse(Boolean.FALSE);
     }
 
     @Override
@@ -365,7 +365,7 @@ public class PoiManager extends SectionStorage<PoiSection> {
         SectionPos.aroundChunk(new ChunkPos(pos), Math.floorDiv(radius, 16), this.levelHeightAccessor.getMinSection(), this.levelHeightAccessor.getMaxSection()).map((sectionPos) -> {
             return Pair.of(sectionPos, this.getOrLoad(sectionPos.asLong()));
         }).filter((pair) -> {
-            return !pair.getSecond().map(PoiSection::isValid).orElse(false);
+            return !pair.getSecond().map(PoiSection::isValid).orElse(Boolean.FALSE);
         }).map((pair) -> {
             return pair.getFirst().chunk();
         }).filter((chunkPos) -> {
diff --git a/src/main/java/net/minecraft/world/entity/ai/village/poi/PoiSection.java b/src/main/java/net/minecraft/world/entity/ai/village/poi/PoiSection.java
index 9f138bc471b5c2a4fa813ff943dbe34018b8df74..c55dae21ad4dadf15c16d2fc33d47cb860c73576 100644
--- a/src/main/java/net/minecraft/world/entity/ai/village/poi/PoiSection.java
+++ b/src/main/java/net/minecraft/world/entity/ai/village/poi/PoiSection.java
@@ -34,7 +34,7 @@ public class PoiSection {
     public static Codec<PoiSection> codec(Runnable updateListener) {
         return RecordCodecBuilder.<PoiSection>create((instance) -> {
             return instance.group(RecordCodecBuilder.point(updateListener), Codec.BOOL.optionalFieldOf("Valid", Boolean.valueOf(false)).forGetter((poiSet) -> {
-                return poiSet.isValid;
+                return Boolean.valueOf(poiSet.isValid);
             }), PoiRecord.codec(updateListener).listOf().fieldOf("Records").forGetter((poiSet) -> {
                 return ImmutableList.copyOf(poiSet.records.values());
             })).apply(instance, PoiSection::new);
@@ -112,7 +112,7 @@ public class PoiSection {
     @Deprecated
     @VisibleForDebug
     public int getFreeTickets(BlockPos pos) {
-        return this.getPoiRecord(pos).map(PoiRecord::getFreeTickets).orElse(0);
+        return this.getPoiRecord(pos).map(PoiRecord::getFreeTickets).orElse(Integer.valueOf(0));
     }
 
     public boolean release(BlockPos pos) {
diff --git a/src/main/java/net/minecraft/world/entity/ambient/Bat.java b/src/main/java/net/minecraft/world/entity/ambient/Bat.java
index 320c558bbe80d4bbc641e895ec43cfa2b45e8d70..5a30fe4c26a4589f5eae7b82ec7b2b24a928f459 100644
--- a/src/main/java/net/minecraft/world/entity/ambient/Bat.java
+++ b/src/main/java/net/minecraft/world/entity/ambient/Bat.java
@@ -55,7 +55,7 @@ public class Bat extends AmbientCreature {
     @Override
     protected void defineSynchedData() {
         super.defineSynchedData();
-        this.entityData.define(Bat.DATA_ID_FLAGS, (byte) 0);
+        this.entityData.define(Bat.DATA_ID_FLAGS, Byte.valueOf((byte) 0));
     }
 
     @Override
@@ -107,9 +107,9 @@ public class Bat extends AmbientCreature {
         byte b0 = (Byte) this.entityData.get(Bat.DATA_ID_FLAGS);
 
         if (roosting) {
-            this.entityData.set(Bat.DATA_ID_FLAGS, (byte) (b0 | 1));
+            this.entityData.set(Bat.DATA_ID_FLAGS, Byte.valueOf((byte) (b0 | 1)));
         } else {
-            this.entityData.set(Bat.DATA_ID_FLAGS, (byte) (b0 & -2));
+            this.entityData.set(Bat.DATA_ID_FLAGS, Byte.valueOf((byte) (b0 & -2)));
         }
 
     }
@@ -230,7 +230,7 @@ public class Bat extends AmbientCreature {
     @Override
     public void readAdditionalSaveData(CompoundTag nbt) {
         super.readAdditionalSaveData(nbt);
-        this.entityData.set(Bat.DATA_ID_FLAGS, nbt.getByte("BatFlags"));
+        this.entityData.set(Bat.DATA_ID_FLAGS, Byte.valueOf(nbt.getByte("BatFlags")));
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/entity/animal/Bee.java b/src/main/java/net/minecraft/world/entity/animal/Bee.java
index 337a88a7cd6445004d005ef8d56af1b1cdf800d9..4d901ce3f47f2e6b00cc96d81e977b52320d934e 100644
--- a/src/main/java/net/minecraft/world/entity/animal/Bee.java
+++ b/src/main/java/net/minecraft/world/entity/animal/Bee.java
@@ -170,8 +170,8 @@ public class Bee extends Animal implements NeutralMob, FlyingAnimal {
     @Override
     protected void defineSynchedData() {
         super.defineSynchedData();
-        this.entityData.define(Bee.DATA_FLAGS_ID, (byte) 0);
-        this.entityData.define(Bee.DATA_REMAINING_ANGER_TIME, 0);
+        this.entityData.define(Bee.DATA_FLAGS_ID, Byte.valueOf((byte) 0));
+        this.entityData.define(Bee.DATA_REMAINING_ANGER_TIME, Integer.valueOf(0));
     }
 
     @Override
@@ -423,7 +423,7 @@ public class Bee extends Animal implements NeutralMob, FlyingAnimal {
 
     @Override
     public void setRemainingPersistentAngerTime(int angerTime) {
-        this.entityData.set(Bee.DATA_REMAINING_ANGER_TIME, angerTime);
+        this.entityData.set(Bee.DATA_REMAINING_ANGER_TIME, Integer.valueOf(angerTime));
     }
 
     @Nullable
@@ -558,9 +558,9 @@ public class Bee extends Animal implements NeutralMob, FlyingAnimal {
 
     private void setFlag(int bit, boolean value) {
         if (value) {
-            this.entityData.set(Bee.DATA_FLAGS_ID, (byte) ((Byte) this.entityData.get(Bee.DATA_FLAGS_ID) | bit));
+            this.entityData.set(Bee.DATA_FLAGS_ID, Byte.valueOf((byte) ((Byte) this.entityData.get(Bee.DATA_FLAGS_ID) | bit)));
         } else {
-            this.entityData.set(Bee.DATA_FLAGS_ID, (byte) ((Byte) this.entityData.get(Bee.DATA_FLAGS_ID) & ~bit));
+            this.entityData.set(Bee.DATA_FLAGS_ID, Byte.valueOf((byte) ((Byte) this.entityData.get(Bee.DATA_FLAGS_ID) & ~bit)));
         }
 
     }
@@ -1252,9 +1252,9 @@ public class Bee extends Animal implements NeutralMob, FlyingAnimal {
                             }
                         }
 
-                        if (flag && !org.bukkit.craftbukkit.event.CraftEventFactory.callEntityChangeBlockEvent(Bee.this, blockposition, iblockdata.setValue(blockstateinteger, (Integer) iblockdata.getValue(blockstateinteger) + 1)).isCancelled()) { // Spigot
+                        if (flag && !org.bukkit.craftbukkit.event.CraftEventFactory.callEntityChangeBlockEvent(Bee.this, blockposition, iblockdata.setValue(blockstateinteger, Integer.valueOf((Integer) iblockdata.getValue(blockstateinteger) + 1))).isCancelled()) { // Spigot
                             Bee.this.level.levelEvent(2005, blockposition, 0);
-                            Bee.this.level.setBlockAndUpdate(blockposition, (BlockState) iblockdata.setValue(blockstateinteger, (Integer) iblockdata.getValue(blockstateinteger) + 1));
+                            Bee.this.level.setBlockAndUpdate(blockposition, (BlockState) iblockdata.setValue(blockstateinteger, Integer.valueOf((Integer) iblockdata.getValue(blockstateinteger) + 1)));
                             Bee.this.incrementNumCropsGrownSincePollination();
                         }
                     }
diff --git a/src/main/java/net/minecraft/world/entity/animal/Cat.java b/src/main/java/net/minecraft/world/entity/animal/Cat.java
index 0114c1cf3b6b0500149a77ebc190cb7fa2832184..aea84df10262f35a3a0092fbb932854a1b2f9fc2 100644
--- a/src/main/java/net/minecraft/world/entity/animal/Cat.java
+++ b/src/main/java/net/minecraft/world/entity/animal/Cat.java
@@ -129,7 +129,7 @@ public class Cat extends TamableAnimal implements VariantHolder<CatVariant> {
     }
 
     public void setLying(boolean sleeping) {
-        this.entityData.set(Cat.IS_LYING, sleeping);
+        this.entityData.set(Cat.IS_LYING, Boolean.valueOf(sleeping));
     }
 
     public boolean isLying() {
@@ -137,7 +137,7 @@ public class Cat extends TamableAnimal implements VariantHolder<CatVariant> {
     }
 
     public void setRelaxStateOne(boolean headDown) {
-        this.entityData.set(Cat.RELAX_STATE_ONE, headDown);
+        this.entityData.set(Cat.RELAX_STATE_ONE, Boolean.valueOf(headDown));
     }
 
     public boolean isRelaxStateOne() {
@@ -149,16 +149,16 @@ public class Cat extends TamableAnimal implements VariantHolder<CatVariant> {
     }
 
     public void setCollarColor(DyeColor color) {
-        this.entityData.set(Cat.DATA_COLLAR_COLOR, color.getId());
+        this.entityData.set(Cat.DATA_COLLAR_COLOR, Integer.valueOf(color.getId()));
     }
 
     @Override
     protected void defineSynchedData() {
         super.defineSynchedData();
         this.entityData.define(Cat.DATA_VARIANT_ID, (CatVariant) BuiltInRegistries.CAT_VARIANT.getOrThrow(CatVariant.BLACK));
-        this.entityData.define(Cat.IS_LYING, false);
-        this.entityData.define(Cat.RELAX_STATE_ONE, false);
-        this.entityData.define(Cat.DATA_COLLAR_COLOR, DyeColor.RED.getId());
+        this.entityData.define(Cat.IS_LYING, Boolean.FALSE);
+        this.entityData.define(Cat.RELAX_STATE_ONE, Boolean.FALSE);
+        this.entityData.define(Cat.DATA_COLLAR_COLOR, Integer.valueOf(DyeColor.RED.getId()));
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/entity/animal/Dolphin.java b/src/main/java/net/minecraft/world/entity/animal/Dolphin.java
index 3f100d847fbce6db5b625e99c4f3694576237372..50a863db8c81b060922aef97780ba236511fe2b0 100644
--- a/src/main/java/net/minecraft/world/entity/animal/Dolphin.java
+++ b/src/main/java/net/minecraft/world/entity/animal/Dolphin.java
@@ -115,7 +115,7 @@ public class Dolphin extends WaterAnimal {
     }
 
     public void setGotFish(boolean hasFish) {
-        this.entityData.set(Dolphin.GOT_FISH, hasFish);
+        this.entityData.set(Dolphin.GOT_FISH, Boolean.valueOf(hasFish));
     }
 
     public int getMoistnessLevel() {
@@ -123,15 +123,15 @@ public class Dolphin extends WaterAnimal {
     }
 
     public void setMoisntessLevel(int moistness) {
-        this.entityData.set(Dolphin.MOISTNESS_LEVEL, moistness);
+        this.entityData.set(Dolphin.MOISTNESS_LEVEL, Integer.valueOf(moistness));
     }
 
     @Override
     protected void defineSynchedData() {
         super.defineSynchedData();
         this.entityData.define(Dolphin.TREASURE_POS, BlockPos.ZERO);
-        this.entityData.define(Dolphin.GOT_FISH, false);
-        this.entityData.define(Dolphin.MOISTNESS_LEVEL, 2400);
+        this.entityData.define(Dolphin.GOT_FISH, Boolean.FALSE);
+        this.entityData.define(Dolphin.MOISTNESS_LEVEL, Integer.valueOf(2400));
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/entity/animal/Fox.java b/src/main/java/net/minecraft/world/entity/animal/Fox.java
index bc2b98c9f34ad2b289f5da91d704bd836edec8c1..a76748ccc8ec60b91dce08a4bae938703d947ff7 100644
--- a/src/main/java/net/minecraft/world/entity/animal/Fox.java
+++ b/src/main/java/net/minecraft/world/entity/animal/Fox.java
@@ -145,8 +145,8 @@ public class Fox extends Animal implements VariantHolder<Fox.Type> {
         super.defineSynchedData();
         this.entityData.define(Fox.DATA_TRUSTED_ID_0, Optional.empty());
         this.entityData.define(Fox.DATA_TRUSTED_ID_1, Optional.empty());
-        this.entityData.define(Fox.DATA_TYPE_ID, 0);
-        this.entityData.define(Fox.DATA_FLAGS_ID, (byte) 0);
+        this.entityData.define(Fox.DATA_TYPE_ID, Integer.valueOf(0));
+        this.entityData.define(Fox.DATA_FLAGS_ID, Byte.valueOf((byte) 0));
     }
 
     @Override
@@ -475,9 +475,9 @@ public class Fox extends Animal implements VariantHolder<Fox.Type> {
 
     private void setFlag(int mask, boolean value) {
         if (value) {
-            this.entityData.set(Fox.DATA_FLAGS_ID, (byte) ((Byte) this.entityData.get(Fox.DATA_FLAGS_ID) | mask));
+            this.entityData.set(Fox.DATA_FLAGS_ID, Byte.valueOf((byte) ((Byte) this.entityData.get(Fox.DATA_FLAGS_ID) | mask)));
         } else {
-            this.entityData.set(Fox.DATA_FLAGS_ID, (byte) ((Byte) this.entityData.get(Fox.DATA_FLAGS_ID) & ~mask));
+            this.entityData.set(Fox.DATA_FLAGS_ID, Byte.valueOf((byte) ((Byte) this.entityData.get(Fox.DATA_FLAGS_ID) & ~mask)));
         }
 
     }
@@ -1312,9 +1312,9 @@ public class Fox extends Animal implements VariantHolder<Fox.Type> {
         private void pickSweetBerries(BlockState state) {
             int i = (Integer) state.getValue(SweetBerryBushBlock.AGE);
 
-            state.setValue(SweetBerryBushBlock.AGE, 1);
+            state.setValue(SweetBerryBushBlock.AGE, Integer.valueOf(1));
             // CraftBukkit start - call EntityChangeBlockEvent
-            if (org.bukkit.craftbukkit.event.CraftEventFactory.callEntityChangeBlockEvent(Fox.this, this.blockPos, state.setValue(SweetBerryBushBlock.AGE, 1)).isCancelled()) {
+            if (org.bukkit.craftbukkit.event.CraftEventFactory.callEntityChangeBlockEvent(Fox.this, this.blockPos, state.setValue(SweetBerryBushBlock.AGE, Integer.valueOf(1))).isCancelled()) {
                 return;
             }
             // CraftBukkit end
@@ -1331,7 +1331,7 @@ public class Fox extends Animal implements VariantHolder<Fox.Type> {
             }
 
             Fox.this.playSound(SoundEvents.SWEET_BERRY_BUSH_PICK_BERRIES, 1.0F, 1.0F);
-            Fox.this.level.setBlock(this.blockPos, (BlockState) state.setValue(SweetBerryBushBlock.AGE, 1), 2);
+            Fox.this.level.setBlock(this.blockPos, (BlockState) state.setValue(SweetBerryBushBlock.AGE, Integer.valueOf(1)), 2);
         }
 
         @Override
diff --git a/src/main/java/net/minecraft/world/entity/animal/IronGolem.java b/src/main/java/net/minecraft/world/entity/animal/IronGolem.java
index e73acfa2f5a4066fa1beee1758082a2fe97a43b3..1c4a8a205ae06fe4f623bbc3592be8e7966f6c18 100644
--- a/src/main/java/net/minecraft/world/entity/animal/IronGolem.java
+++ b/src/main/java/net/minecraft/world/entity/animal/IronGolem.java
@@ -90,7 +90,7 @@ public class IronGolem extends AbstractGolem implements NeutralMob {
     @Override
     protected void defineSynchedData() {
         super.defineSynchedData();
-        this.entityData.define(IronGolem.DATA_FLAGS_ID, (byte) 0);
+        this.entityData.define(IronGolem.DATA_FLAGS_ID, Byte.valueOf((byte) 0));
     }
 
     public static AttributeSupplier.Builder createAttributes() {
@@ -316,9 +316,9 @@ public class IronGolem extends AbstractGolem implements NeutralMob {
         byte b0 = (Byte) this.entityData.get(IronGolem.DATA_FLAGS_ID);
 
         if (playerCreated) {
-            this.entityData.set(IronGolem.DATA_FLAGS_ID, (byte) (b0 | 1));
+            this.entityData.set(IronGolem.DATA_FLAGS_ID, Byte.valueOf((byte) (b0 | 1)));
         } else {
-            this.entityData.set(IronGolem.DATA_FLAGS_ID, (byte) (b0 & -2));
+            this.entityData.set(IronGolem.DATA_FLAGS_ID, Byte.valueOf((byte) (b0 & -2)));
         }
 
     }
diff --git a/src/main/java/net/minecraft/world/entity/animal/Ocelot.java b/src/main/java/net/minecraft/world/entity/animal/Ocelot.java
index 5ad029e3c1eaeae33784b55d04181cdd119ef8c0..bb1bb9e6d675a695e6b39b9652d18cc50002cea0 100644
--- a/src/main/java/net/minecraft/world/entity/animal/Ocelot.java
+++ b/src/main/java/net/minecraft/world/entity/animal/Ocelot.java
@@ -73,7 +73,7 @@ public class Ocelot extends Animal {
     }
 
     public void setTrusting(boolean trusting) {
-        this.entityData.set(Ocelot.DATA_TRUSTING, trusting);
+        this.entityData.set(Ocelot.DATA_TRUSTING, Boolean.valueOf(trusting));
         this.reassessTrustingGoals();
     }
 
@@ -92,7 +92,7 @@ public class Ocelot extends Animal {
     @Override
     protected void defineSynchedData() {
         super.defineSynchedData();
-        this.entityData.define(Ocelot.DATA_TRUSTING, false);
+        this.entityData.define(Ocelot.DATA_TRUSTING, Boolean.FALSE);
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/entity/animal/Panda.java b/src/main/java/net/minecraft/world/entity/animal/Panda.java
index 9c1e02c3a990cd0f8bba1c84c170b438278c02a7..682250e46ae333811650b42bba4c075c8bb7d5d0 100644
--- a/src/main/java/net/minecraft/world/entity/animal/Panda.java
+++ b/src/main/java/net/minecraft/world/entity/animal/Panda.java
@@ -120,7 +120,7 @@ public class Panda extends Animal {
     }
 
     public void setUnhappyCounter(int askForBambooTicks) {
-        this.entityData.set(Panda.UNHAPPY_COUNTER, askForBambooTicks);
+        this.entityData.set(Panda.UNHAPPY_COUNTER, Integer.valueOf(askForBambooTicks));
     }
 
     public boolean isSneezing() {
@@ -149,7 +149,7 @@ public class Panda extends Animal {
     }
 
     public void eat(boolean eating) {
-        this.entityData.set(Panda.EAT_COUNTER, eating ? 1 : 0);
+        this.entityData.set(Panda.EAT_COUNTER, Integer.valueOf(eating ? 1 : 0));
     }
 
     public int getEatCounter() {
@@ -157,7 +157,7 @@ public class Panda extends Animal {
     }
 
     public void setEatCounter(int eatingTicks) {
-        this.entityData.set(Panda.EAT_COUNTER, eatingTicks);
+        this.entityData.set(Panda.EAT_COUNTER, Integer.valueOf(eatingTicks));
     }
 
     public void sneeze(boolean sneezing) {
@@ -173,7 +173,7 @@ public class Panda extends Animal {
     }
 
     public void setSneezeCounter(int sneezeProgress) {
-        this.entityData.set(Panda.SNEEZE_COUNTER, sneezeProgress);
+        this.entityData.set(Panda.SNEEZE_COUNTER, Integer.valueOf(sneezeProgress));
     }
 
     public Panda.Gene getMainGene() {
@@ -185,7 +185,7 @@ public class Panda extends Animal {
             gene = Panda.Gene.getRandom(this.random);
         }
 
-        this.entityData.set(Panda.MAIN_GENE_ID, (byte) gene.getId());
+        this.entityData.set(Panda.MAIN_GENE_ID, Byte.valueOf((byte) gene.getId()));
     }
 
     public Panda.Gene getHiddenGene() {
@@ -197,7 +197,7 @@ public class Panda extends Animal {
             gene = Panda.Gene.getRandom(this.random);
         }
 
-        this.entityData.set(Panda.HIDDEN_GENE_ID, (byte) gene.getId());
+        this.entityData.set(Panda.HIDDEN_GENE_ID, Byte.valueOf((byte) gene.getId()));
     }
 
     public boolean isRolling() {
@@ -211,12 +211,12 @@ public class Panda extends Animal {
     @Override
     protected void defineSynchedData() {
         super.defineSynchedData();
-        this.entityData.define(Panda.UNHAPPY_COUNTER, 0);
-        this.entityData.define(Panda.SNEEZE_COUNTER, 0);
-        this.entityData.define(Panda.MAIN_GENE_ID, (byte) 0);
-        this.entityData.define(Panda.HIDDEN_GENE_ID, (byte) 0);
-        this.entityData.define(Panda.DATA_ID_FLAGS, (byte) 0);
-        this.entityData.define(Panda.EAT_COUNTER, 0);
+        this.entityData.define(Panda.UNHAPPY_COUNTER, Integer.valueOf(0));
+        this.entityData.define(Panda.SNEEZE_COUNTER, Integer.valueOf(0));
+        this.entityData.define(Panda.MAIN_GENE_ID, Byte.valueOf((byte) 0));
+        this.entityData.define(Panda.HIDDEN_GENE_ID, Byte.valueOf((byte) 0));
+        this.entityData.define(Panda.DATA_ID_FLAGS, Byte.valueOf((byte) 0));
+        this.entityData.define(Panda.EAT_COUNTER, Integer.valueOf(0));
     }
 
     private boolean getFlag(int bitmask) {
@@ -227,9 +227,9 @@ public class Panda extends Animal {
         byte b0 = (Byte) this.entityData.get(Panda.DATA_ID_FLAGS);
 
         if (value) {
-            this.entityData.set(Panda.DATA_ID_FLAGS, (byte) (b0 | mask));
+            this.entityData.set(Panda.DATA_ID_FLAGS, Byte.valueOf((byte) (b0 | mask)));
         } else {
-            this.entityData.set(Panda.DATA_ID_FLAGS, (byte) (b0 & ~mask));
+            this.entityData.set(Panda.DATA_ID_FLAGS, Byte.valueOf((byte) (b0 & ~mask)));
         }
 
     }
diff --git a/src/main/java/net/minecraft/world/entity/animal/Parrot.java b/src/main/java/net/minecraft/world/entity/animal/Parrot.java
index 2d9aa961df034eab21ecfdb6e6d0ce7cf013505d..86113c1fea0fad29a1645fa2818e2028caab5e32 100644
--- a/src/main/java/net/minecraft/world/entity/animal/Parrot.java
+++ b/src/main/java/net/minecraft/world/entity/animal/Parrot.java
@@ -416,13 +416,13 @@ public class Parrot extends ShoulderRidingEntity implements VariantHolder<Parrot
     }
 
     public void setVariant(Parrot.Variant variant) {
-        this.entityData.set(Parrot.DATA_VARIANT_ID, variant.id);
+        this.entityData.set(Parrot.DATA_VARIANT_ID, Integer.valueOf(variant.id));
     }
 
     @Override
     protected void defineSynchedData() {
         super.defineSynchedData();
-        this.entityData.define(Parrot.DATA_VARIANT_ID, 0);
+        this.entityData.define(Parrot.DATA_VARIANT_ID, Integer.valueOf(0));
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/entity/animal/Pig.java b/src/main/java/net/minecraft/world/entity/animal/Pig.java
index fc29107ee256af2b5f2e481f17ade6cfcaa101ae..927d43e3bad4979419cef3f485d8edd8ffba9d97 100644
--- a/src/main/java/net/minecraft/world/entity/animal/Pig.java
+++ b/src/main/java/net/minecraft/world/entity/animal/Pig.java
@@ -111,8 +111,8 @@ public class Pig extends Animal implements ItemSteerable, Saddleable {
     @Override
     protected void defineSynchedData() {
         super.defineSynchedData();
-        this.entityData.define(Pig.DATA_SADDLE_ID, false);
-        this.entityData.define(Pig.DATA_BOOST_TIME, 0);
+        this.entityData.define(Pig.DATA_SADDLE_ID, Boolean.FALSE);
+        this.entityData.define(Pig.DATA_BOOST_TIME, Integer.valueOf(0));
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/entity/animal/Pufferfish.java b/src/main/java/net/minecraft/world/entity/animal/Pufferfish.java
index ce02552c1b3c62cf9f48425838a129a3ec40a049..74fd0c641070a977aa8da91805186ac4aea857df 100644
--- a/src/main/java/net/minecraft/world/entity/animal/Pufferfish.java
+++ b/src/main/java/net/minecraft/world/entity/animal/Pufferfish.java
@@ -48,7 +48,7 @@ public class Pufferfish extends AbstractFish {
     @Override
     protected void defineSynchedData() {
         super.defineSynchedData();
-        this.entityData.define(Pufferfish.PUFF_STATE, 0);
+        this.entityData.define(Pufferfish.PUFF_STATE, Integer.valueOf(0));
     }
 
     public int getPuffState() {
@@ -56,7 +56,7 @@ public class Pufferfish extends AbstractFish {
     }
 
     public void setPuffState(int puffState) {
-        this.entityData.set(Pufferfish.PUFF_STATE, puffState);
+        this.entityData.set(Pufferfish.PUFF_STATE, Integer.valueOf(puffState));
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/entity/animal/Rabbit.java b/src/main/java/net/minecraft/world/entity/animal/Rabbit.java
index 7a1fcae6de2dd8247fcb1f1612122edf8f56965a..530482947d8cd9ea586392e544ebd9b3646fd158 100644
--- a/src/main/java/net/minecraft/world/entity/animal/Rabbit.java
+++ b/src/main/java/net/minecraft/world/entity/animal/Rabbit.java
@@ -588,12 +588,12 @@ public class Rabbit extends Animal implements VariantHolder<Rabbit.Variant> {
                         if (org.bukkit.craftbukkit.event.CraftEventFactory.callEntityChangeBlockEvent(
                                 this.rabbit,
                                 blockposition,
-                                iblockdata.setValue(CarrotBlock.AGE, i - 1)
+                                iblockdata.setValue(CarrotBlock.AGE, Integer.valueOf(i - 1))
                         ).isCancelled()) {
                             return;
                         }
                         // CraftBukkit end
-                        world.setBlock(blockposition, (BlockState) iblockdata.setValue(CarrotBlock.AGE, i - 1), 2);
+                        world.setBlock(blockposition, (BlockState) iblockdata.setValue(CarrotBlock.AGE, Integer.valueOf(i - 1)), 2);
                         world.levelEvent(2001, blockposition, Block.getId(iblockdata));
                     }
 
diff --git a/src/main/java/net/minecraft/world/entity/animal/Sheep.java b/src/main/java/net/minecraft/world/entity/animal/Sheep.java
index efac4395fdb79a78fbb18a0f828b1a3c90b102fe..eb1b240163af216a1aa82463628055d983de0970 100644
--- a/src/main/java/net/minecraft/world/entity/animal/Sheep.java
+++ b/src/main/java/net/minecraft/world/entity/animal/Sheep.java
@@ -152,7 +152,7 @@ public class Sheep extends Animal implements Shearable {
     @Override
     protected void defineSynchedData() {
         super.defineSynchedData();
-        this.entityData.define(Sheep.DATA_WOOL_ID, (byte) 0);
+        this.entityData.define(Sheep.DATA_WOOL_ID, Byte.valueOf((byte) 0));
     }
 
     @Override
@@ -332,7 +332,7 @@ public class Sheep extends Animal implements Shearable {
     public void setColor(DyeColor color) {
         byte b0 = (Byte) this.entityData.get(Sheep.DATA_WOOL_ID);
 
-        this.entityData.set(Sheep.DATA_WOOL_ID, (byte) (b0 & 240 | color.getId() & 15));
+        this.entityData.set(Sheep.DATA_WOOL_ID, Byte.valueOf((byte) (b0 & 240 | color.getId() & 15)));
     }
 
     public boolean isSheared() {
@@ -343,9 +343,9 @@ public class Sheep extends Animal implements Shearable {
         byte b0 = (Byte) this.entityData.get(Sheep.DATA_WOOL_ID);
 
         if (sheared) {
-            this.entityData.set(Sheep.DATA_WOOL_ID, (byte) (b0 | 16));
+            this.entityData.set(Sheep.DATA_WOOL_ID, Byte.valueOf((byte) (b0 | 16)));
         } else {
-            this.entityData.set(Sheep.DATA_WOOL_ID, (byte) (b0 & -17));
+            this.entityData.set(Sheep.DATA_WOOL_ID, Byte.valueOf((byte) (b0 & -17)));
         }
 
     }
diff --git a/src/main/java/net/minecraft/world/entity/animal/SnowGolem.java b/src/main/java/net/minecraft/world/entity/animal/SnowGolem.java
index 35e53663e4a6c4d56ec4577d08e7b040cc0c720f..74ea040db2f03e022e4c6cd23c1f3ca7a3f793a7 100644
--- a/src/main/java/net/minecraft/world/entity/animal/SnowGolem.java
+++ b/src/main/java/net/minecraft/world/entity/animal/SnowGolem.java
@@ -72,7 +72,7 @@ public class SnowGolem extends AbstractGolem implements Shearable, RangedAttackM
     @Override
     protected void defineSynchedData() {
         super.defineSynchedData();
-        this.entityData.define(SnowGolem.DATA_PUMPKIN_ID, (byte) 16);
+        this.entityData.define(SnowGolem.DATA_PUMPKIN_ID, Byte.valueOf((byte) 16));
     }
 
     @Override
@@ -202,9 +202,9 @@ public class SnowGolem extends AbstractGolem implements Shearable, RangedAttackM
         byte b0 = (Byte) this.entityData.get(SnowGolem.DATA_PUMPKIN_ID);
 
         if (hasPumpkin) {
-            this.entityData.set(SnowGolem.DATA_PUMPKIN_ID, (byte) (b0 | 16));
+            this.entityData.set(SnowGolem.DATA_PUMPKIN_ID, Byte.valueOf((byte) (b0 | 16)));
         } else {
-            this.entityData.set(SnowGolem.DATA_PUMPKIN_ID, (byte) (b0 & -17));
+            this.entityData.set(SnowGolem.DATA_PUMPKIN_ID, Byte.valueOf((byte) (b0 & -17)));
         }
 
     }
diff --git a/src/main/java/net/minecraft/world/entity/animal/Turtle.java b/src/main/java/net/minecraft/world/entity/animal/Turtle.java
index 25503678e7d049a8b3172cfad8a5606958c32302..7201fc3edec0a3ae4f20f5f48ce970ef5dc178c3 100644
--- a/src/main/java/net/minecraft/world/entity/animal/Turtle.java
+++ b/src/main/java/net/minecraft/world/entity/animal/Turtle.java
@@ -103,7 +103,7 @@ public class Turtle extends Animal {
     }
 
     public void setHasEgg(boolean hasEgg) {
-        this.entityData.set(Turtle.HAS_EGG, hasEgg);
+        this.entityData.set(Turtle.HAS_EGG, Boolean.valueOf(hasEgg));
     }
 
     public boolean isLayingEgg() {
@@ -112,7 +112,7 @@ public class Turtle extends Animal {
 
     void setLayingEgg(boolean diggingSand) {
         this.layEggCounter = diggingSand ? 1 : 0;
-        this.entityData.set(Turtle.LAYING_EGG, diggingSand);
+        this.entityData.set(Turtle.LAYING_EGG, Boolean.valueOf(diggingSand));
     }
 
     public boolean isGoingHome() {
@@ -120,7 +120,7 @@ public class Turtle extends Animal {
     }
 
     public void setGoingHome(boolean landBound) {
-        this.entityData.set(Turtle.GOING_HOME, landBound);
+        this.entityData.set(Turtle.GOING_HOME, Boolean.valueOf(landBound));
     }
 
     public boolean isTravelling() {
@@ -128,18 +128,18 @@ public class Turtle extends Animal {
     }
 
     public void setTravelling(boolean traveling) {
-        this.entityData.set(Turtle.TRAVELLING, traveling);
+        this.entityData.set(Turtle.TRAVELLING, Boolean.valueOf(traveling));
     }
 
     @Override
     protected void defineSynchedData() {
         super.defineSynchedData();
         this.entityData.define(Turtle.HOME_POS, BlockPos.ZERO);
-        this.entityData.define(Turtle.HAS_EGG, false);
+        this.entityData.define(Turtle.HAS_EGG, Boolean.FALSE);
         this.entityData.define(Turtle.TRAVEL_POS, BlockPos.ZERO);
-        this.entityData.define(Turtle.GOING_HOME, false);
-        this.entityData.define(Turtle.TRAVELLING, false);
-        this.entityData.define(Turtle.LAYING_EGG, false);
+        this.entityData.define(Turtle.GOING_HOME, Boolean.FALSE);
+        this.entityData.define(Turtle.TRAVELLING, Boolean.FALSE);
+        this.entityData.define(Turtle.LAYING_EGG, Boolean.FALSE);
     }
 
     @Override
@@ -490,9 +490,9 @@ public class Turtle extends Animal {
                     // Paper start
                     int eggCount = this.turtle.random.nextInt(4) + 1;
                     com.destroystokyo.paper.event.entity.TurtleLayEggEvent layEggEvent = new com.destroystokyo.paper.event.entity.TurtleLayEggEvent((org.bukkit.entity.Turtle) this.turtle.getBukkitEntity(), io.papermc.paper.util.MCUtil.toLocation(this.turtle.level, this.blockPos.above()), eggCount);
-                    if (layEggEvent.callEvent() && !org.bukkit.craftbukkit.event.CraftEventFactory.callEntityChangeBlockEvent(this.turtle, this.blockPos.above(), Blocks.TURTLE_EGG.defaultBlockState().setValue(TurtleEggBlock.EGGS, layEggEvent.getEggCount())).isCancelled()) {
+                    if (layEggEvent.callEvent() && !org.bukkit.craftbukkit.event.CraftEventFactory.callEntityChangeBlockEvent(this.turtle, this.blockPos.above(), Blocks.TURTLE_EGG.defaultBlockState().setValue(TurtleEggBlock.EGGS, Integer.valueOf(layEggEvent.getEggCount()))).isCancelled()) {
                     world.playSound((Player) null, blockposition, SoundEvents.TURTLE_LAY_EGG, SoundSource.BLOCKS, 0.3F, 0.9F + world.random.nextFloat() * 0.2F);
-                    world.setBlock(this.blockPos.above(), (BlockState) Blocks.TURTLE_EGG.defaultBlockState().setValue(TurtleEggBlock.EGGS, layEggEvent.getEggCount()), 3);
+                    world.setBlock(this.blockPos.above(), (BlockState) Blocks.TURTLE_EGG.defaultBlockState().setValue(TurtleEggBlock.EGGS, Integer.valueOf(layEggEvent.getEggCount())), 3);
                     }
                     // CraftBukkit end
                     this.turtle.setHasEgg(false);
diff --git a/src/main/java/net/minecraft/world/entity/animal/Wolf.java b/src/main/java/net/minecraft/world/entity/animal/Wolf.java
index a6a50eb4f4ac85751071571876ac804d44ee1ee6..a473a065f19101b5969f83d5afda3ea13a22feaa 100644
--- a/src/main/java/net/minecraft/world/entity/animal/Wolf.java
+++ b/src/main/java/net/minecraft/world/entity/animal/Wolf.java
@@ -151,9 +151,9 @@ public class Wolf extends TamableAnimal implements NeutralMob {
     @Override
     protected void defineSynchedData() {
         super.defineSynchedData();
-        this.entityData.define(Wolf.DATA_INTERESTED_ID, false);
-        this.entityData.define(Wolf.DATA_COLLAR_COLOR, DyeColor.RED.getId());
-        this.entityData.define(Wolf.DATA_REMAINING_ANGER_TIME, 0);
+        this.entityData.define(Wolf.DATA_INTERESTED_ID, Boolean.FALSE);
+        this.entityData.define(Wolf.DATA_COLLAR_COLOR, Integer.valueOf(DyeColor.RED.getId()));
+        this.entityData.define(Wolf.DATA_REMAINING_ANGER_TIME, Integer.valueOf(0));
     }
 
     @Override
@@ -466,7 +466,7 @@ public class Wolf extends TamableAnimal implements NeutralMob {
 
     @Override
     public void setRemainingPersistentAngerTime(int angerTime) {
-        this.entityData.set(Wolf.DATA_REMAINING_ANGER_TIME, angerTime);
+        this.entityData.set(Wolf.DATA_REMAINING_ANGER_TIME, Integer.valueOf(angerTime));
     }
 
     @Override
@@ -490,7 +490,7 @@ public class Wolf extends TamableAnimal implements NeutralMob {
     }
 
     public void setCollarColor(DyeColor color) {
-        this.entityData.set(Wolf.DATA_COLLAR_COLOR, color.getId());
+        this.entityData.set(Wolf.DATA_COLLAR_COLOR, Integer.valueOf(color.getId()));
     }
 
     @Nullable
@@ -511,7 +511,7 @@ public class Wolf extends TamableAnimal implements NeutralMob {
     }
 
     public void setIsInterested(boolean begging) {
-        this.entityData.set(Wolf.DATA_INTERESTED_ID, begging);
+        this.entityData.set(Wolf.DATA_INTERESTED_ID, Boolean.valueOf(begging));
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/entity/animal/allay/Allay.java b/src/main/java/net/minecraft/world/entity/animal/allay/Allay.java
index c0084b1f146a4697194c421519537e612ff737c0..93d52d627098495cb61703a7d1df89a1aafeaeb3 100644
--- a/src/main/java/net/minecraft/world/entity/animal/allay/Allay.java
+++ b/src/main/java/net/minecraft/world/entity/animal/allay/Allay.java
@@ -87,7 +87,7 @@ public class Allay extends PathfinderMob implements InventoryCarrier {
     private static final EntityDataAccessor<Boolean> DATA_CAN_DUPLICATE = SynchedEntityData.defineId(Allay.class, EntityDataSerializers.BOOLEAN);
     protected static final ImmutableList<SensorType<? extends Sensor<? super Allay>>> SENSOR_TYPES = ImmutableList.of(SensorType.NEAREST_LIVING_ENTITIES, SensorType.NEAREST_PLAYERS, SensorType.HURT_BY, SensorType.NEAREST_ITEMS);
     protected static final ImmutableList<MemoryModuleType<?>> MEMORY_TYPES = ImmutableList.of(MemoryModuleType.PATH, MemoryModuleType.LOOK_TARGET, MemoryModuleType.NEAREST_VISIBLE_LIVING_ENTITIES, MemoryModuleType.WALK_TARGET, MemoryModuleType.CANT_REACH_WALK_TARGET_SINCE, MemoryModuleType.HURT_BY, MemoryModuleType.NEAREST_VISIBLE_WANTED_ITEM, MemoryModuleType.LIKED_PLAYER, MemoryModuleType.LIKED_NOTEBLOCK_POSITION, MemoryModuleType.LIKED_NOTEBLOCK_COOLDOWN_TICKS, MemoryModuleType.ITEM_PICKUP_COOLDOWN_TICKS, MemoryModuleType.IS_PANICKING, new MemoryModuleType[0]);
-    public static final ImmutableList<Float> THROW_SOUND_PITCHES = ImmutableList.of(0.5625F, 0.625F, 0.75F, 0.9375F, 1.0F, 1.0F, 1.125F, 1.25F, 1.5F, 1.875F, 2.0F, 2.25F, new Float[]{2.5F, 3.0F, 3.75F, 4.0F});
+    public static final ImmutableList<Float> THROW_SOUND_PITCHES = ImmutableList.of(Float.valueOf(0.5625F), Float.valueOf(0.625F), Float.valueOf(0.75F), Float.valueOf(0.9375F), Float.valueOf(1.0F), Float.valueOf(1.0F), Float.valueOf(1.125F), Float.valueOf(1.25F), Float.valueOf(1.5F), Float.valueOf(1.875F), Float.valueOf(2.0F), Float.valueOf(2.25F), new Float[]{Float.valueOf(2.5F), Float.valueOf(3.0F), Float.valueOf(3.75F), Float.valueOf(4.0F)});
     private final DynamicGameEventListener<VibrationListener> dynamicVibrationListener;
     private final VibrationListener.VibrationListenerConfig vibrationListenerConfig;
     private final DynamicGameEventListener<Allay.JukeboxListener> dynamicJukeboxListener;
@@ -115,7 +115,7 @@ public class Allay extends PathfinderMob implements InventoryCarrier {
 
     // CraftBukkit start
     public void setCanDuplicate(boolean canDuplicate) {
-        this.entityData.set(Allay.DATA_CAN_DUPLICATE, canDuplicate);
+        this.entityData.set(Allay.DATA_CAN_DUPLICATE, Boolean.valueOf(canDuplicate));
     }
     // CraftBukkit end
 
@@ -151,8 +151,8 @@ public class Allay extends PathfinderMob implements InventoryCarrier {
     @Override
     protected void defineSynchedData() {
         super.defineSynchedData();
-        this.entityData.define(Allay.DATA_DANCING, false);
-        this.entityData.define(Allay.DATA_CAN_DUPLICATE, true);
+        this.entityData.define(Allay.DATA_DANCING, Boolean.FALSE);
+        this.entityData.define(Allay.DATA_CAN_DUPLICATE, Boolean.TRUE);
     }
 
     @Override
@@ -446,7 +446,7 @@ public class Allay extends PathfinderMob implements InventoryCarrier {
 
     public void setDancing(boolean dancing) {
         if (!this.level.isClientSide && this.isEffectiveAi() && (!dancing || !this.isPanicking())) {
-            this.entityData.set(Allay.DATA_DANCING, dancing);
+            this.entityData.set(Allay.DATA_DANCING, Boolean.valueOf(dancing));
         }
     }
 
@@ -536,7 +536,7 @@ public class Allay extends PathfinderMob implements InventoryCarrier {
         }
 
         if (!this.level.isClientSide() && this.duplicationCooldown == 0L && !this.canDuplicate()) {
-            this.entityData.set(Allay.DATA_CAN_DUPLICATE, true);
+            this.entityData.set(Allay.DATA_CAN_DUPLICATE, Boolean.TRUE);
         }
 
     }
@@ -560,7 +560,7 @@ public class Allay extends PathfinderMob implements InventoryCarrier {
 
     public void resetDuplicationCooldown() { // PAIL private -> public
         this.duplicationCooldown = 6000L;
-        this.entityData.set(Allay.DATA_CAN_DUPLICATE, false);
+        this.entityData.set(Allay.DATA_CAN_DUPLICATE, Boolean.FALSE);
     }
 
     public boolean canDuplicate() { // PAIL private -> public
diff --git a/src/main/java/net/minecraft/world/entity/animal/axolotl/Axolotl.java b/src/main/java/net/minecraft/world/entity/animal/axolotl/Axolotl.java
index 0d7f951e3837de7553d93f3d4525276048feb405..31af3f7d51542a8d5b2e649f95358b3927303a5a 100644
--- a/src/main/java/net/minecraft/world/entity/animal/axolotl/Axolotl.java
+++ b/src/main/java/net/minecraft/world/entity/animal/axolotl/Axolotl.java
@@ -111,9 +111,9 @@ public class Axolotl extends Animal implements LerpingModel, VariantHolder<Axolo
     @Override
     protected void defineSynchedData() {
         super.defineSynchedData();
-        this.entityData.define(Axolotl.DATA_VARIANT, 0);
-        this.entityData.define(Axolotl.DATA_PLAYING_DEAD, false);
-        this.entityData.define(Axolotl.FROM_BUCKET, false);
+        this.entityData.define(Axolotl.DATA_VARIANT, Integer.valueOf(0));
+        this.entityData.define(Axolotl.DATA_PLAYING_DEAD, Boolean.FALSE);
+        this.entityData.define(Axolotl.FROM_BUCKET, Boolean.FALSE);
     }
 
     @Override
@@ -204,7 +204,7 @@ public class Axolotl extends Animal implements LerpingModel, VariantHolder<Axolo
     }
 
     public void setVariant(Axolotl.Variant variant) {
-        this.entityData.set(Axolotl.DATA_VARIANT, variant.getId());
+        this.entityData.set(Axolotl.DATA_VARIANT, Integer.valueOf(variant.getId()));
     }
 
     private static boolean useRareVariant(RandomSource random) {
@@ -232,7 +232,7 @@ public class Axolotl extends Animal implements LerpingModel, VariantHolder<Axolo
     }
 
     public void setPlayingDead(boolean playingDead) {
-        this.entityData.set(Axolotl.DATA_PLAYING_DEAD, playingDead);
+        this.entityData.set(Axolotl.DATA_PLAYING_DEAD, Boolean.valueOf(playingDead));
     }
 
     public boolean isPlayingDead() {
@@ -246,7 +246,7 @@ public class Axolotl extends Animal implements LerpingModel, VariantHolder<Axolo
 
     @Override
     public void setFromBucket(boolean fromBucket) {
-        this.entityData.set(Axolotl.FROM_BUCKET, fromBucket);
+        this.entityData.set(Axolotl.FROM_BUCKET, Boolean.valueOf(fromBucket));
     }
 
     @Nullable
@@ -327,7 +327,7 @@ public class Axolotl extends Animal implements LerpingModel, VariantHolder<Axolo
         float f1 = this.getHealth();
 
         if (!this.level.isClientSide && !this.isNoAi() && this.level.random.nextInt(3) == 0 && ((float) this.level.random.nextInt(3) < amount || f1 / this.getMaxHealth() < 0.5F) && amount < f1 && this.isInWater() && (source.getEntity() != null || source.getDirectEntity() != null) && !this.isPlayingDead()) {
-            this.brain.setMemory(MemoryModuleType.PLAY_DEAD_TICKS, (int) 200);
+            this.brain.setMemory(MemoryModuleType.PLAY_DEAD_TICKS, Integer.valueOf((int) 200));
         }
 
         return super.hurt(source, amount);
@@ -377,7 +377,7 @@ public class Axolotl extends Animal implements LerpingModel, VariantHolder<Axolo
         }
 
         if (nbt.contains("HuntingCooldown")) {
-            this.getBrain().setMemoryWithExpiry(MemoryModuleType.HAS_HUNTING_COOLDOWN, true, nbt.getLong("HuntingCooldown"));
+            this.getBrain().setMemoryWithExpiry(MemoryModuleType.HAS_HUNTING_COOLDOWN, Boolean.TRUE, nbt.getLong("HuntingCooldown"));
         }
 
     }
diff --git a/src/main/java/net/minecraft/world/entity/animal/goat/Goat.java b/src/main/java/net/minecraft/world/entity/animal/goat/Goat.java
index e9f7c08ae3ea9c578971b1ede88788572c20e277..808cf64ce36c9a394cab9ff5af0304e4c688ff59 100644
--- a/src/main/java/net/minecraft/world/entity/animal/goat/Goat.java
+++ b/src/main/java/net/minecraft/world/entity/animal/goat/Goat.java
@@ -257,7 +257,7 @@ public class Goat extends Animal {
         if (!this.isBaby() && (double) randomsource.nextFloat() < 0.10000000149011612D) {
             EntityDataAccessor<Boolean> datawatcherobject = randomsource.nextBoolean() ? Goat.DATA_HAS_LEFT_HORN : Goat.DATA_HAS_RIGHT_HORN;
 
-            this.entityData.set(datawatcherobject, false);
+            this.entityData.set(datawatcherobject, Boolean.FALSE);
         }
 
         return super.finalizeSpawn(world, difficulty, spawnReason, entityData, entityNbt);
@@ -286,8 +286,8 @@ public class Goat extends Animal {
     public void readAdditionalSaveData(CompoundTag nbt) {
         super.readAdditionalSaveData(nbt);
         this.setScreamingGoat(nbt.getBoolean("IsScreamingGoat"));
-        this.entityData.set(Goat.DATA_HAS_LEFT_HORN, nbt.getBoolean("HasLeftHorn"));
-        this.entityData.set(Goat.DATA_HAS_RIGHT_HORN, nbt.getBoolean("HasRightHorn"));
+        this.entityData.set(Goat.DATA_HAS_LEFT_HORN, Boolean.valueOf(nbt.getBoolean("HasLeftHorn")));
+        this.entityData.set(Goat.DATA_HAS_RIGHT_HORN, Boolean.valueOf(nbt.getBoolean("HasRightHorn")));
     }
 
     @Override
@@ -317,9 +317,9 @@ public class Goat extends Animal {
     @Override
     protected void defineSynchedData() {
         super.defineSynchedData();
-        this.entityData.define(Goat.DATA_IS_SCREAMING_GOAT, false);
-        this.entityData.define(Goat.DATA_HAS_LEFT_HORN, true);
-        this.entityData.define(Goat.DATA_HAS_RIGHT_HORN, true);
+        this.entityData.define(Goat.DATA_IS_SCREAMING_GOAT, Boolean.FALSE);
+        this.entityData.define(Goat.DATA_HAS_LEFT_HORN, Boolean.TRUE);
+        this.entityData.define(Goat.DATA_HAS_RIGHT_HORN, Boolean.TRUE);
     }
 
     public boolean hasLeftHorn() {
@@ -347,7 +347,7 @@ public class Goat extends Animal {
                 datawatcherobject = this.random.nextBoolean() ? Goat.DATA_HAS_LEFT_HORN : Goat.DATA_HAS_RIGHT_HORN;
             }
 
-            this.entityData.set(datawatcherobject, false);
+            this.entityData.set(datawatcherobject, Boolean.FALSE);
             Vec3 vec3d = this.position();
             ItemStack itemstack = this.createHorn();
             double d0 = (double) Mth.randomBetween(this.random, -0.2F, 0.2F);
@@ -360,13 +360,13 @@ public class Goat extends Animal {
     }
 
     public void addHorns() {
-        this.entityData.set(Goat.DATA_HAS_LEFT_HORN, true);
-        this.entityData.set(Goat.DATA_HAS_RIGHT_HORN, true);
+        this.entityData.set(Goat.DATA_HAS_LEFT_HORN, Boolean.TRUE);
+        this.entityData.set(Goat.DATA_HAS_RIGHT_HORN, Boolean.TRUE);
     }
 
     public void removeHorns() {
-        this.entityData.set(Goat.DATA_HAS_LEFT_HORN, false);
-        this.entityData.set(Goat.DATA_HAS_RIGHT_HORN, false);
+        this.entityData.set(Goat.DATA_HAS_LEFT_HORN, Boolean.FALSE);
+        this.entityData.set(Goat.DATA_HAS_RIGHT_HORN, Boolean.FALSE);
     }
 
     public boolean isScreamingGoat() {
@@ -374,7 +374,7 @@ public class Goat extends Animal {
     }
 
     public void setScreamingGoat(boolean screaming) {
-        this.entityData.set(Goat.DATA_IS_SCREAMING_GOAT, screaming);
+        this.entityData.set(Goat.DATA_IS_SCREAMING_GOAT, Boolean.valueOf(screaming));
     }
 
     public float getRammingXHeadRot() {
diff --git a/src/main/java/net/minecraft/world/entity/animal/horse/AbstractChestedHorse.java b/src/main/java/net/minecraft/world/entity/animal/horse/AbstractChestedHorse.java
index 170411b42aeef69c796d1409b59c3eb69f78c710..7ffa4566d084c0efab11ed32c55975bc31c55569 100644
--- a/src/main/java/net/minecraft/world/entity/animal/horse/AbstractChestedHorse.java
+++ b/src/main/java/net/minecraft/world/entity/animal/horse/AbstractChestedHorse.java
@@ -36,7 +36,7 @@ public abstract class AbstractChestedHorse extends AbstractHorse {
     @Override
     protected void defineSynchedData() {
         super.defineSynchedData();
-        this.entityData.define(DATA_ID_CHEST, false);
+        this.entityData.define(DATA_ID_CHEST, Boolean.FALSE);
     }
 
     public static AttributeSupplier.Builder createBaseChestedHorseAttributes() {
@@ -48,7 +48,7 @@ public abstract class AbstractChestedHorse extends AbstractHorse {
     }
 
     public void setChest(boolean hasChest) {
-        this.entityData.set(DATA_ID_CHEST, hasChest);
+        this.entityData.set(DATA_ID_CHEST, Boolean.valueOf(hasChest));
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/entity/animal/horse/AbstractHorse.java b/src/main/java/net/minecraft/world/entity/animal/horse/AbstractHorse.java
index c781def1e30a5e744e836899823c0b3b8ce46307..7367701595a77c2ee694c22098664729b2f894f8 100644
--- a/src/main/java/net/minecraft/world/entity/animal/horse/AbstractHorse.java
+++ b/src/main/java/net/minecraft/world/entity/animal/horse/AbstractHorse.java
@@ -146,7 +146,7 @@ public abstract class AbstractHorse extends Animal implements ContainerListener,
     @Override
     protected void defineSynchedData() {
         super.defineSynchedData();
-        this.entityData.define(AbstractHorse.DATA_ID_FLAGS, (byte) 0);
+        this.entityData.define(AbstractHorse.DATA_ID_FLAGS, Byte.valueOf((byte) 0));
         this.entityData.define(AbstractHorse.DATA_ID_OWNER_UUID, Optional.empty());
     }
 
@@ -158,9 +158,9 @@ public abstract class AbstractHorse extends Animal implements ContainerListener,
         byte b0 = (Byte) this.entityData.get(AbstractHorse.DATA_ID_FLAGS);
 
         if (flag) {
-            this.entityData.set(AbstractHorse.DATA_ID_FLAGS, (byte) (b0 | bitmask));
+            this.entityData.set(AbstractHorse.DATA_ID_FLAGS, Byte.valueOf((byte) (b0 | bitmask)));
         } else {
-            this.entityData.set(AbstractHorse.DATA_ID_FLAGS, (byte) (b0 & ~bitmask));
+            this.entityData.set(AbstractHorse.DATA_ID_FLAGS, Byte.valueOf((byte) (b0 & ~bitmask)));
         }
 
     }
diff --git a/src/main/java/net/minecraft/world/entity/animal/horse/Llama.java b/src/main/java/net/minecraft/world/entity/animal/horse/Llama.java
index a657e0ca97d337dc884a84c10292eb61be9cdca6..491240b15493fe60037124071a7dcea4bd4a0c8d 100644
--- a/src/main/java/net/minecraft/world/entity/animal/horse/Llama.java
+++ b/src/main/java/net/minecraft/world/entity/animal/horse/Llama.java
@@ -89,7 +89,7 @@ public class Llama extends AbstractChestedHorse implements VariantHolder<Llama.V
     // CraftBukkit end
 
     private void setStrength(int strength) {
-        this.entityData.set(Llama.DATA_STRENGTH_ID, Math.max(1, Math.min(5, strength)));
+        this.entityData.set(Llama.DATA_STRENGTH_ID, Integer.valueOf(Math.max(1, Math.min(5, strength))));
     }
 
     private void setRandomStrength(RandomSource random) {
@@ -149,9 +149,9 @@ public class Llama extends AbstractChestedHorse implements VariantHolder<Llama.V
     @Override
     protected void defineSynchedData() {
         super.defineSynchedData();
-        this.entityData.define(Llama.DATA_STRENGTH_ID, 0);
-        this.entityData.define(Llama.DATA_SWAG_ID, -1);
-        this.entityData.define(Llama.DATA_VARIANT_ID, 0);
+        this.entityData.define(Llama.DATA_STRENGTH_ID, Integer.valueOf(0));
+        this.entityData.define(Llama.DATA_SWAG_ID, Integer.valueOf(-1));
+        this.entityData.define(Llama.DATA_VARIANT_ID, Integer.valueOf(0));
     }
 
     @Override
@@ -160,7 +160,7 @@ public class Llama extends AbstractChestedHorse implements VariantHolder<Llama.V
     }
 
     public void setVariant(Llama.Variant variant) {
-        this.entityData.set(Llama.DATA_VARIANT_ID, variant.id);
+        this.entityData.set(Llama.DATA_VARIANT_ID, Integer.valueOf(variant.id));
     }
 
     @Override
@@ -360,7 +360,7 @@ public class Llama extends AbstractChestedHorse implements VariantHolder<Llama.V
     }
 
     private void setSwag(@Nullable DyeColor color) {
-        this.entityData.set(Llama.DATA_SWAG_ID, color == null ? -1 : color.getId());
+        this.entityData.set(Llama.DATA_SWAG_ID, Integer.valueOf(color == null ? -1 : color.getId()));
     }
 
     @Nullable
diff --git a/src/main/java/net/minecraft/world/entity/boss/enderdragon/EndCrystal.java b/src/main/java/net/minecraft/world/entity/boss/enderdragon/EndCrystal.java
index 500500468c12d1d44ea6b83a9176b470a954f59a..f7b66379bcff70ed1077d74be15cc19604883250 100644
--- a/src/main/java/net/minecraft/world/entity/boss/enderdragon/EndCrystal.java
+++ b/src/main/java/net/minecraft/world/entity/boss/enderdragon/EndCrystal.java
@@ -49,7 +49,7 @@ public class EndCrystal extends Entity {
     @Override
     protected void defineSynchedData() {
         this.getEntityData().define(EndCrystal.DATA_BEAM_TARGET, Optional.empty());
-        this.getEntityData().define(EndCrystal.DATA_SHOW_BOTTOM, true);
+        this.getEntityData().define(EndCrystal.DATA_SHOW_BOTTOM, Boolean.TRUE);
     }
 
     @Override
@@ -170,7 +170,7 @@ public class EndCrystal extends Entity {
     }
 
     public void setShowBottom(boolean showBottom) {
-        this.getEntityData().set(EndCrystal.DATA_SHOW_BOTTOM, showBottom);
+        this.getEntityData().set(EndCrystal.DATA_SHOW_BOTTOM, Boolean.valueOf(showBottom));
     }
 
     public boolean showsBottom() {
diff --git a/src/main/java/net/minecraft/world/entity/boss/enderdragon/EnderDragon.java b/src/main/java/net/minecraft/world/entity/boss/enderdragon/EnderDragon.java
index c7caaebfb4b9f28cbe700d88fdcf232a500e8ca7..87463457bb036650c818d4839416860dba471d5f 100644
--- a/src/main/java/net/minecraft/world/entity/boss/enderdragon/EnderDragon.java
+++ b/src/main/java/net/minecraft/world/entity/boss/enderdragon/EnderDragon.java
@@ -155,7 +155,7 @@ public class EnderDragon extends Mob implements Enemy {
     @Override
     protected void defineSynchedData() {
         super.defineSynchedData();
-        this.getEntityData().define(EnderDragon.DATA_PHASE, EnderDragonPhase.HOVERING.getId());
+        this.getEntityData().define(EnderDragon.DATA_PHASE, Integer.valueOf(EnderDragonPhase.HOVERING.getId()));
     }
 
     public double[] getLatencyPos(int segmentNumber, float tickDelta) {
@@ -542,7 +542,7 @@ public class EnderDragon extends Mob implements Enemy {
                 Block nmsBlock = craftBlock.getNMS().getBlock();
                 if (nmsBlock.dropFromExplosion(explosionSource)) {
                     BlockEntity tileentity = craftBlock.getNMS().hasBlockEntity() ? this.level.getBlockEntity(blockposition) : null;
-                    LootContext.Builder loottableinfo_builder = (new LootContext.Builder((ServerLevel) this.level)).withRandom(this.level.random).withParameter(LootContextParams.ORIGIN, Vec3.atCenterOf(blockposition)).withParameter(LootContextParams.TOOL, ItemStack.EMPTY).withParameter(LootContextParams.EXPLOSION_RADIUS, 1.0F / event.getYield()).withOptionalParameter(LootContextParams.BLOCK_ENTITY, tileentity);
+                    LootContext.Builder loottableinfo_builder = (new LootContext.Builder((ServerLevel) this.level)).withRandom(this.level.random).withParameter(LootContextParams.ORIGIN, Vec3.atCenterOf(blockposition)).withParameter(LootContextParams.TOOL, ItemStack.EMPTY).withParameter(LootContextParams.EXPLOSION_RADIUS, Float.valueOf(1.0F / event.getYield())).withOptionalParameter(LootContextParams.BLOCK_ENTITY, tileentity);
 
                     craftBlock.getNMS().getDrops(loottableinfo_builder).forEach((itemstack) -> {
                         Block.popResource(level, blockposition, itemstack);
@@ -890,7 +890,7 @@ public class EnderDragon extends Mob implements Enemy {
         if (pathpoint3 == pathpoint2) {
             return null;
         } else {
-            EnderDragon.LOGGER.debug("Failed to find path from {} to {}", from, to);
+            EnderDragon.LOGGER.debug("Failed to find path from {} to {}", Integer.valueOf(from), Integer.valueOf(to));
             if (pathNode != null) {
                 pathNode.cameFrom = pathpoint3;
                 pathpoint3 = pathNode;
diff --git a/src/main/java/net/minecraft/world/entity/boss/enderdragon/phases/EnderDragonPhaseManager.java b/src/main/java/net/minecraft/world/entity/boss/enderdragon/phases/EnderDragonPhaseManager.java
index 067f5e337c31606f2df32895fb8b6c24dfc073c8..3fcce40c489a6ca5deb7be2cd4ae52e7dd82f613 100644
--- a/src/main/java/net/minecraft/world/entity/boss/enderdragon/phases/EnderDragonPhaseManager.java
+++ b/src/main/java/net/minecraft/world/entity/boss/enderdragon/phases/EnderDragonPhaseManager.java
@@ -44,7 +44,7 @@ public class EnderDragonPhaseManager {
 
             this.currentPhase = this.getPhase(type);
             if (!this.dragon.level.isClientSide) {
-                this.dragon.getEntityData().set(EnderDragon.DATA_PHASE, type.getId());
+                this.dragon.getEntityData().set(EnderDragon.DATA_PHASE, Integer.valueOf(type.getId()));
             }
 
             EnderDragonPhaseManager.LOGGER.debug("Dragon is now in phase {} on the {}", type, this.dragon.level.isClientSide ? "client" : "server");
diff --git a/src/main/java/net/minecraft/world/entity/boss/wither/WitherBoss.java b/src/main/java/net/minecraft/world/entity/boss/wither/WitherBoss.java
index b781c849737225c00f1dd8d45a6d08cebc000263..716cfb6af823e3a66342dbbe9e6550db0e99709d 100644
--- a/src/main/java/net/minecraft/world/entity/boss/wither/WitherBoss.java
+++ b/src/main/java/net/minecraft/world/entity/boss/wither/WitherBoss.java
@@ -121,10 +121,10 @@ public class WitherBoss extends Monster implements PowerableMob, RangedAttackMob
     @Override
     protected void defineSynchedData() {
         super.defineSynchedData();
-        this.entityData.define(WitherBoss.DATA_TARGET_A, 0);
-        this.entityData.define(WitherBoss.DATA_TARGET_B, 0);
-        this.entityData.define(WitherBoss.DATA_TARGET_C, 0);
-        this.entityData.define(WitherBoss.DATA_ID_INV, 0);
+        this.entityData.define(WitherBoss.DATA_TARGET_A, Integer.valueOf(0));
+        this.entityData.define(WitherBoss.DATA_TARGET_B, Integer.valueOf(0));
+        this.entityData.define(WitherBoss.DATA_TARGET_C, Integer.valueOf(0));
+        this.entityData.define(WitherBoss.DATA_ID_INV, Integer.valueOf(0));
     }
 
     @Override
@@ -576,7 +576,7 @@ public class WitherBoss extends Monster implements PowerableMob, RangedAttackMob
     }
 
     public void setInvulnerableTicks(int ticks) {
-        this.entityData.set(WitherBoss.DATA_ID_INV, ticks);
+        this.entityData.set(WitherBoss.DATA_ID_INV, Integer.valueOf(ticks));
     }
 
     public int getAlternativeTarget(int headIndex) {
@@ -584,7 +584,7 @@ public class WitherBoss extends Monster implements PowerableMob, RangedAttackMob
     }
 
     public void setAlternativeTarget(int headIndex, int id) {
-        this.entityData.set((EntityDataAccessor) WitherBoss.DATA_TARGETS.get(headIndex), id);
+        this.entityData.set((EntityDataAccessor) WitherBoss.DATA_TARGETS.get(headIndex), Integer.valueOf(id));
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/entity/decoration/ArmorStand.java b/src/main/java/net/minecraft/world/entity/decoration/ArmorStand.java
index b136cdc13d94bc34c998a1986e0c93525356ac5c..9c431bcd0af61df99b64bf66c25285f1a23fb6c3 100644
--- a/src/main/java/net/minecraft/world/entity/decoration/ArmorStand.java
+++ b/src/main/java/net/minecraft/world/entity/decoration/ArmorStand.java
@@ -147,7 +147,7 @@ public class ArmorStand extends LivingEntity {
     @Override
     protected void defineSynchedData() {
         super.defineSynchedData();
-        this.entityData.define(ArmorStand.DATA_CLIENT_FLAGS, (byte) 0);
+        this.entityData.define(ArmorStand.DATA_CLIENT_FLAGS, Byte.valueOf((byte) 0));
         this.entityData.define(ArmorStand.DATA_HEAD_POSE, ArmorStand.DEFAULT_HEAD_POSE);
         this.entityData.define(ArmorStand.DATA_BODY_POSE, ArmorStand.DEFAULT_BODY_POSE);
         this.entityData.define(ArmorStand.DATA_LEFT_ARM_POSE, ArmorStand.DEFAULT_LEFT_ARM_POSE);
@@ -770,7 +770,7 @@ public class ArmorStand extends LivingEntity {
     }
 
     public void setSmall(boolean small) {
-        this.entityData.set(ArmorStand.DATA_CLIENT_FLAGS, this.setBit((Byte) this.entityData.get(ArmorStand.DATA_CLIENT_FLAGS), 1, small));
+        this.entityData.set(ArmorStand.DATA_CLIENT_FLAGS, Byte.valueOf(this.setBit((Byte) this.entityData.get(ArmorStand.DATA_CLIENT_FLAGS), 1, small)));
     }
 
     public boolean isSmall() {
@@ -778,7 +778,7 @@ public class ArmorStand extends LivingEntity {
     }
 
     public void setShowArms(boolean showArms) {
-        this.entityData.set(ArmorStand.DATA_CLIENT_FLAGS, this.setBit((Byte) this.entityData.get(ArmorStand.DATA_CLIENT_FLAGS), 4, showArms));
+        this.entityData.set(ArmorStand.DATA_CLIENT_FLAGS, Byte.valueOf(this.setBit((Byte) this.entityData.get(ArmorStand.DATA_CLIENT_FLAGS), 4, showArms)));
     }
 
     public boolean isShowArms() {
@@ -786,7 +786,7 @@ public class ArmorStand extends LivingEntity {
     }
 
     public void setNoBasePlate(boolean hideBasePlate) {
-        this.entityData.set(ArmorStand.DATA_CLIENT_FLAGS, this.setBit((Byte) this.entityData.get(ArmorStand.DATA_CLIENT_FLAGS), 8, hideBasePlate));
+        this.entityData.set(ArmorStand.DATA_CLIENT_FLAGS, Byte.valueOf(this.setBit((Byte) this.entityData.get(ArmorStand.DATA_CLIENT_FLAGS), 8, hideBasePlate)));
     }
 
     public boolean isNoBasePlate() {
@@ -794,7 +794,7 @@ public class ArmorStand extends LivingEntity {
     }
 
     public void setMarker(boolean marker) {
-        this.entityData.set(ArmorStand.DATA_CLIENT_FLAGS, this.setBit((Byte) this.entityData.get(ArmorStand.DATA_CLIENT_FLAGS), 16, marker));
+        this.entityData.set(ArmorStand.DATA_CLIENT_FLAGS, Byte.valueOf(this.setBit((Byte) this.entityData.get(ArmorStand.DATA_CLIENT_FLAGS), 16, marker)));
     }
 
     public boolean isMarker() {
diff --git a/src/main/java/net/minecraft/world/entity/decoration/ItemFrame.java b/src/main/java/net/minecraft/world/entity/decoration/ItemFrame.java
index 428523feaa4f30260e32ba03937e88200246c693..9732c68043b94a14918dda05843d2ec5a2335fb0 100644
--- a/src/main/java/net/minecraft/world/entity/decoration/ItemFrame.java
+++ b/src/main/java/net/minecraft/world/entity/decoration/ItemFrame.java
@@ -72,7 +72,7 @@ public class ItemFrame extends HangingEntity {
     @Override
     protected void defineSynchedData() {
         this.getEntityData().define(ItemFrame.DATA_ITEM, ItemStack.EMPTY);
-        this.getEntityData().define(ItemFrame.DATA_ROTATION, 0);
+        this.getEntityData().define(ItemFrame.DATA_ROTATION, Integer.valueOf(0));
     }
 
     @Override
@@ -287,7 +287,7 @@ public class ItemFrame extends HangingEntity {
         // Paper start - fix MC-252817 (green map markers do not disappear)
         this.getFramedMapIdFromItem(itemstack).ifPresent((i) -> {
             // Paper end
-            MapItemSavedData worldmap = MapItem.getSavedData(i, this.level);
+            MapItemSavedData worldmap = MapItem.getSavedData(Integer.valueOf(i), this.level);
 
             if (worldmap != null) {
                 worldmap.removedFromFrame(this.pos, this.getId());
@@ -398,7 +398,7 @@ public class ItemFrame extends HangingEntity {
     }
 
     private void setRotation(int value, boolean updateComparators) {
-        this.getEntityData().set(ItemFrame.DATA_ROTATION, value % 8);
+        this.getEntityData().set(ItemFrame.DATA_ROTATION, Integer.valueOf(value % 8));
         if (updateComparators && this.pos != null) {
             this.level.updateNeighbourForOutputSignal(this.pos, Blocks.AIR);
         }
diff --git a/src/main/java/net/minecraft/world/entity/item/FallingBlockEntity.java b/src/main/java/net/minecraft/world/entity/item/FallingBlockEntity.java
index 72f1866226269396ba0f0c1be269e237925d9322..c4e7c60b46c6bc31405527ea9ea09a2fa3359d55 100644
--- a/src/main/java/net/minecraft/world/entity/item/FallingBlockEntity.java
+++ b/src/main/java/net/minecraft/world/entity/item/FallingBlockEntity.java
@@ -91,7 +91,7 @@ public class FallingBlockEntity extends Entity {
 
     public static FallingBlockEntity fall(Level world, BlockPos blockposition, BlockState iblockdata, org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason spawnReason) {
         // CraftBukkit end
-        FallingBlockEntity entityfallingblock = new FallingBlockEntity(world, (double) blockposition.getX() + 0.5D, (double) blockposition.getY(), (double) blockposition.getZ() + 0.5D, iblockdata.hasProperty(BlockStateProperties.WATERLOGGED) ? (BlockState) iblockdata.setValue(BlockStateProperties.WATERLOGGED, false) : iblockdata);
+        FallingBlockEntity entityfallingblock = new FallingBlockEntity(world, (double) blockposition.getX() + 0.5D, (double) blockposition.getY(), (double) blockposition.getZ() + 0.5D, iblockdata.hasProperty(BlockStateProperties.WATERLOGGED) ? (BlockState) iblockdata.setValue(BlockStateProperties.WATERLOGGED, Boolean.FALSE) : iblockdata);
         if (CraftEventFactory.callEntityChangeBlockEvent(entityfallingblock, blockposition, iblockdata.getFluidState().createLegacyBlock()).isCancelled()) return entityfallingblock; // CraftBukkit
 
         world.setBlock(blockposition, iblockdata.getFluidState().createLegacyBlock(), 3);
@@ -197,7 +197,7 @@ public class FallingBlockEntity extends Entity {
 
                             if (flag2 && flag4) {
                                 if (this.blockState.hasProperty(BlockStateProperties.WATERLOGGED) && this.level.getFluidState(blockposition).getType() == Fluids.WATER) {
-                                    this.blockState = (BlockState) this.blockState.setValue(BlockStateProperties.WATERLOGGED, true);
+                                    this.blockState = (BlockState) this.blockState.setValue(BlockStateProperties.WATERLOGGED, Boolean.TRUE);
                                 }
 
                                 // CraftBukkit start
diff --git a/src/main/java/net/minecraft/world/entity/item/PrimedTnt.java b/src/main/java/net/minecraft/world/entity/item/PrimedTnt.java
index bedee2c93bd0aff148f93dcf111e0fc3d9bce4a0..4136b8ae6ea133d9c378fb3b0a59194f47460247 100644
--- a/src/main/java/net/minecraft/world/entity/item/PrimedTnt.java
+++ b/src/main/java/net/minecraft/world/entity/item/PrimedTnt.java
@@ -44,7 +44,7 @@ public class PrimedTnt extends Entity {
 
     @Override
     protected void defineSynchedData() {
-        this.entityData.define(PrimedTnt.DATA_FUSE_ID, 80);
+        this.entityData.define(PrimedTnt.DATA_FUSE_ID, Integer.valueOf(80));
     }
 
     @Override
@@ -159,7 +159,7 @@ public class PrimedTnt extends Entity {
     }
 
     public void setFuse(int fuse) {
-        this.entityData.set(PrimedTnt.DATA_FUSE_ID, fuse);
+        this.entityData.set(PrimedTnt.DATA_FUSE_ID, Integer.valueOf(fuse));
     }
 
     public int getFuse() {
diff --git a/src/main/java/net/minecraft/world/entity/monster/Creeper.java b/src/main/java/net/minecraft/world/entity/monster/Creeper.java
index 338161d2eb15d9264027961b71678b8d2f020fd8..e884dbe9bc600313a1c7554d2603ca642a8fe88d 100644
--- a/src/main/java/net/minecraft/world/entity/monster/Creeper.java
+++ b/src/main/java/net/minecraft/world/entity/monster/Creeper.java
@@ -102,9 +102,9 @@ public class Creeper extends Monster implements PowerableMob {
     @Override
     protected void defineSynchedData() {
         super.defineSynchedData();
-        this.entityData.define(Creeper.DATA_SWELL_DIR, -1);
-        this.entityData.define(Creeper.DATA_IS_POWERED, false);
-        this.entityData.define(Creeper.DATA_IS_IGNITED, false);
+        this.entityData.define(Creeper.DATA_SWELL_DIR, Integer.valueOf(-1));
+        this.entityData.define(Creeper.DATA_IS_POWERED, Boolean.FALSE);
+        this.entityData.define(Creeper.DATA_IS_IGNITED, Boolean.FALSE);
     }
 
     @Override
@@ -122,7 +122,7 @@ public class Creeper extends Monster implements PowerableMob {
     @Override
     public void readAdditionalSaveData(CompoundTag nbt) {
         super.readAdditionalSaveData(nbt);
-        this.entityData.set(Creeper.DATA_IS_POWERED, nbt.getBoolean("powered"));
+        this.entityData.set(Creeper.DATA_IS_POWERED, Boolean.valueOf(nbt.getBoolean("powered")));
         if (nbt.contains("Fuse", 99)) {
             this.maxSwell = nbt.getShort("Fuse");
         }
@@ -132,7 +132,7 @@ public class Creeper extends Monster implements PowerableMob {
         }
 
         if (nbt.getBoolean("ignited")) {
-            this.entityData.set(Creeper.DATA_IS_IGNITED, true); // Paper - set directly to avoid firing event
+            this.entityData.set(Creeper.DATA_IS_IGNITED, Boolean.TRUE); // Paper - set directly to avoid firing event
         }
 
     }
@@ -218,7 +218,7 @@ public class Creeper extends Monster implements PowerableMob {
     }
 
     public void setSwellDir(int fuseSpeed) {
-        this.entityData.set(Creeper.DATA_SWELL_DIR, fuseSpeed);
+        this.entityData.set(Creeper.DATA_SWELL_DIR, Integer.valueOf(fuseSpeed));
     }
 
     @Override
@@ -233,7 +233,7 @@ public class Creeper extends Monster implements PowerableMob {
     }
 
     public void setPowered(boolean powered) {
-        this.entityData.set(Creeper.DATA_IS_POWERED, powered);
+        this.entityData.set(Creeper.DATA_IS_POWERED, Boolean.valueOf(powered));
     }
     // CraftBukkit end
 
@@ -323,7 +323,7 @@ public class Creeper extends Monster implements PowerableMob {
         if (isIgnited() != ignited) {
             com.destroystokyo.paper.event.entity.CreeperIgniteEvent event = new com.destroystokyo.paper.event.entity.CreeperIgniteEvent((org.bukkit.entity.Creeper) getBukkitEntity(), ignited);
             if (event.callEvent()) {
-                this.entityData.set(Creeper.DATA_IS_IGNITED, event.isIgnited());
+                this.entityData.set(Creeper.DATA_IS_IGNITED, Boolean.valueOf(event.isIgnited()));
             }
         }
         // Paper end
diff --git a/src/main/java/net/minecraft/world/entity/monster/EnderMan.java b/src/main/java/net/minecraft/world/entity/monster/EnderMan.java
index f4002ac7cba7d5e41b4f11b98212c625f6a92a65..028ffb9b764b75dd0ca28ec32dbe4ac45573bab0 100644
--- a/src/main/java/net/minecraft/world/entity/monster/EnderMan.java
+++ b/src/main/java/net/minecraft/world/entity/monster/EnderMan.java
@@ -135,12 +135,12 @@ public class EnderMan extends Monster implements NeutralMob {
 
         if (entityliving == null) {
             this.targetChangeTime = 0;
-            this.entityData.set(EnderMan.DATA_CREEPY, false);
-            this.entityData.set(EnderMan.DATA_STARED_AT, false);
+            this.entityData.set(EnderMan.DATA_CREEPY, Boolean.FALSE);
+            this.entityData.set(EnderMan.DATA_STARED_AT, Boolean.FALSE);
             attributemodifiable.removeModifier(EnderMan.SPEED_MODIFIER_ATTACKING);
         } else {
             this.targetChangeTime = this.tickCount;
-            this.entityData.set(EnderMan.DATA_CREEPY, true);
+            this.entityData.set(EnderMan.DATA_CREEPY, Boolean.TRUE);
             if (!attributemodifiable.hasModifier(EnderMan.SPEED_MODIFIER_ATTACKING)) {
                 attributemodifiable.addTransientModifier(EnderMan.SPEED_MODIFIER_ATTACKING);
             }
@@ -153,8 +153,8 @@ public class EnderMan extends Monster implements NeutralMob {
     protected void defineSynchedData() {
         super.defineSynchedData();
         this.entityData.define(EnderMan.DATA_CARRY_STATE, Optional.empty());
-        this.entityData.define(EnderMan.DATA_CREEPY, false);
-        this.entityData.define(EnderMan.DATA_STARED_AT, false);
+        this.entityData.define(EnderMan.DATA_CREEPY, Boolean.FALSE);
+        this.entityData.define(EnderMan.DATA_STARED_AT, Boolean.FALSE);
     }
 
     @Override
@@ -446,16 +446,16 @@ public class EnderMan extends Monster implements NeutralMob {
     }
 
     public void setBeingStaredAt() {
-        this.entityData.set(EnderMan.DATA_STARED_AT, true);
+        this.entityData.set(EnderMan.DATA_STARED_AT, Boolean.TRUE);
     }
 
     // Paper start
     public void setCreepy(boolean creepy) {
-        this.entityData.set(EnderMan.DATA_CREEPY, creepy);
+        this.entityData.set(EnderMan.DATA_CREEPY, Boolean.valueOf(creepy));
     }
 
     public void setHasBeenStaredAt(boolean hasBeenStaredAt) {
-        this.entityData.set(EnderMan.DATA_STARED_AT, hasBeenStaredAt);
+        this.entityData.set(EnderMan.DATA_STARED_AT, Boolean.valueOf(hasBeenStaredAt));
     }
     // Paper end
 
diff --git a/src/main/java/net/minecraft/world/entity/monster/Ghast.java b/src/main/java/net/minecraft/world/entity/monster/Ghast.java
index bb2cb17e4e5ce142eeec18951c8948e3d6b3209c..9eb42ced46f518ed92c2098cd0c245937504b2c4 100644
--- a/src/main/java/net/minecraft/world/entity/monster/Ghast.java
+++ b/src/main/java/net/minecraft/world/entity/monster/Ghast.java
@@ -59,7 +59,7 @@ public class Ghast extends FlyingMob implements Enemy {
     }
 
     public void setCharging(boolean shooting) {
-        this.entityData.set(Ghast.DATA_IS_CHARGING, shooting);
+        this.entityData.set(Ghast.DATA_IS_CHARGING, Boolean.valueOf(shooting));
     }
 
     public int getExplosionPower() {
@@ -99,7 +99,7 @@ public class Ghast extends FlyingMob implements Enemy {
     @Override
     protected void defineSynchedData() {
         super.defineSynchedData();
-        this.entityData.define(Ghast.DATA_IS_CHARGING, false);
+        this.entityData.define(Ghast.DATA_IS_CHARGING, Boolean.FALSE);
     }
 
     public static AttributeSupplier.Builder createAttributes() {
diff --git a/src/main/java/net/minecraft/world/entity/monster/Phantom.java b/src/main/java/net/minecraft/world/entity/monster/Phantom.java
index aa8734856ec7b90036afad13bfda46c02e548812..598716b8457d0d907b41262d3a2e24a1c16e4a11 100644
--- a/src/main/java/net/minecraft/world/entity/monster/Phantom.java
+++ b/src/main/java/net/minecraft/world/entity/monster/Phantom.java
@@ -81,11 +81,11 @@ public class Phantom extends FlyingMob implements Enemy {
     @Override
     protected void defineSynchedData() {
         super.defineSynchedData();
-        this.entityData.define(Phantom.ID_SIZE, 0);
+        this.entityData.define(Phantom.ID_SIZE, Integer.valueOf(0));
     }
 
     public void setPhantomSize(int size) {
-        this.entityData.set(Phantom.ID_SIZE, Mth.clamp(size, (int) 0, (int) 64));
+        this.entityData.set(Phantom.ID_SIZE, Integer.valueOf(Mth.clamp(size, (int) 0, (int) 64)));
     }
 
     private void updatePhantomSizeInfo() {
@@ -559,7 +559,7 @@ public class Phantom extends FlyingMob implements Enemy {
                 List<Player> list = Phantom.this.level.getNearbyPlayers(this.attackTargeting, Phantom.this, Phantom.this.getBoundingBox().inflate(16.0D, 64.0D, 16.0D));
 
                 if (!list.isEmpty()) {
-                    list.sort(Comparator.comparing((Entity e) -> { return e.getY(); }).reversed()); // CraftBukkit - decompile error
+                    list.sort(Comparator.comparing((Entity e) -> { return Double.valueOf(e.getY()); }).reversed()); // CraftBukkit - decompile error
                     Iterator iterator = list.iterator();
 
                     while (iterator.hasNext()) {
diff --git a/src/main/java/net/minecraft/world/entity/monster/Shulker.java b/src/main/java/net/minecraft/world/entity/monster/Shulker.java
index 9dedb3599d5388c1bcc34558e8e5cb4a8668646f..9119d9eaff3002f5a988c87325c8776a8494506c 100644
--- a/src/main/java/net/minecraft/world/entity/monster/Shulker.java
+++ b/src/main/java/net/minecraft/world/entity/monster/Shulker.java
@@ -142,8 +142,8 @@ public class Shulker extends AbstractGolem implements VariantHolder<Optional<Dye
     protected void defineSynchedData() {
         super.defineSynchedData();
         this.entityData.define(Shulker.DATA_ATTACH_FACE_ID, Direction.DOWN);
-        this.entityData.define(Shulker.DATA_PEEK_ID, (byte) 0);
-        this.entityData.define(Shulker.DATA_COLOR_ID, (byte) 16);
+        this.entityData.define(Shulker.DATA_PEEK_ID, Byte.valueOf((byte) 0));
+        this.entityData.define(Shulker.DATA_COLOR_ID, Byte.valueOf((byte) 16));
     }
 
     public static AttributeSupplier.Builder createAttributes() {
@@ -159,9 +159,9 @@ public class Shulker extends AbstractGolem implements VariantHolder<Optional<Dye
     public void readAdditionalSaveData(CompoundTag nbt) {
         super.readAdditionalSaveData(nbt);
         this.setAttachFace(Direction.from3DDataValue(nbt.getByte("AttachFace")));
-        this.entityData.set(Shulker.DATA_PEEK_ID, nbt.getByte("Peek"));
+        this.entityData.set(Shulker.DATA_PEEK_ID, Byte.valueOf(nbt.getByte("Peek")));
         if (nbt.contains("Color", 99)) {
-            this.entityData.set(Shulker.DATA_COLOR_ID, nbt.getByte("Color"));
+            this.entityData.set(Shulker.DATA_COLOR_ID, Byte.valueOf(nbt.getByte("Color")));
         }
 
     }
@@ -341,7 +341,7 @@ public class Shulker extends AbstractGolem implements VariantHolder<Optional<Dye
             BlockPos blockposition1 = this.blockPosition();
 
             if (!blockposition1.equals(blockposition)) {
-                this.entityData.set(Shulker.DATA_PEEK_ID, (byte) 0);
+                this.entityData.set(Shulker.DATA_PEEK_ID, Byte.valueOf((byte) 0));
                 this.hasImpulse = true;
                 if (this.level.isClientSide && !this.isPassenger() && !blockposition1.equals(this.clientOldAttachPosition)) {
                     this.clientOldAttachPosition = blockposition;
@@ -425,7 +425,7 @@ public class Shulker extends AbstractGolem implements VariantHolder<Optional<Dye
                         this.playSound(SoundEvents.SHULKER_TELEPORT, 1.0F, 1.0F);
                         this.setPos((double) blockposition1.getX() + 0.5D, (double) blockposition1.getY(), (double) blockposition1.getZ() + 0.5D);
                         this.level.gameEvent(GameEvent.TELEPORT, blockposition, GameEvent.Context.of((Entity) this));
-                        this.entityData.set(Shulker.DATA_PEEK_ID, (byte) 0);
+                        this.entityData.set(Shulker.DATA_PEEK_ID, Byte.valueOf((byte) 0));
                         this.setTarget((LivingEntity) null);
                         return true;
                     }
@@ -536,7 +536,7 @@ public class Shulker extends AbstractGolem implements VariantHolder<Optional<Dye
             }
         }
 
-        this.entityData.set(Shulker.DATA_PEEK_ID, (byte) peekAmount);
+        this.entityData.set(Shulker.DATA_PEEK_ID, Byte.valueOf((byte) peekAmount));
     }
 
     public float getClientPeekAmount(float delta) {
@@ -631,12 +631,12 @@ public class Shulker extends AbstractGolem implements VariantHolder<Optional<Dye
             float f = vector3f1.dot(vector3f2);
             float f1 = vector3f.dot(vector3f2);
 
-            return Math.abs(f) <= 1.0E-5F && Math.abs(f1) <= 1.0E-5F ? Optional.empty() : Optional.of((float) (Mth.atan2((double) (-f), (double) f1) * 57.2957763671875D));
+            return Math.abs(f) <= 1.0E-5F && Math.abs(f1) <= 1.0E-5F ? Optional.empty() : Optional.of(Float.valueOf((float) (Mth.atan2((double) (-f), (double) f1) * 57.2957763671875D)));
         }
 
         @Override
         protected Optional<Float> getXRotD() {
-            return Optional.of(0.0F);
+            return Optional.of(Float.valueOf(0.0F));
         }
     }
 
diff --git a/src/main/java/net/minecraft/world/entity/monster/Skeleton.java b/src/main/java/net/minecraft/world/entity/monster/Skeleton.java
index badde621357a567965f0ef203e402e21bed09059..f3d74bcf11664e9350155cc7e9c76ebf4cde36ce 100644
--- a/src/main/java/net/minecraft/world/entity/monster/Skeleton.java
+++ b/src/main/java/net/minecraft/world/entity/monster/Skeleton.java
@@ -29,7 +29,7 @@ public class Skeleton extends AbstractSkeleton {
     @Override
     protected void defineSynchedData() {
         super.defineSynchedData();
-        this.getEntityData().define(Skeleton.DATA_STRAY_CONVERSION_ID, false);
+        this.getEntityData().define(Skeleton.DATA_STRAY_CONVERSION_ID, Boolean.FALSE);
     }
 
     public boolean isFreezeConverting() {
@@ -37,7 +37,7 @@ public class Skeleton extends AbstractSkeleton {
     }
 
     public void setFreezeConverting(boolean converting) {
-        this.entityData.set(Skeleton.DATA_STRAY_CONVERSION_ID, converting);
+        this.entityData.set(Skeleton.DATA_STRAY_CONVERSION_ID, Boolean.valueOf(converting));
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/entity/monster/Slime.java b/src/main/java/net/minecraft/world/entity/monster/Slime.java
index 17665c2962a668e78714e1fa3aa516bea493f0b4..b802101ab77fedfa9005a2a7a38d05b4cc94d5bf 100644
--- a/src/main/java/net/minecraft/world/entity/monster/Slime.java
+++ b/src/main/java/net/minecraft/world/entity/monster/Slime.java
@@ -86,14 +86,14 @@ public class Slime extends Mob implements Enemy {
     @Override
     protected void defineSynchedData() {
         super.defineSynchedData();
-        this.entityData.define(Slime.ID_SIZE, 1);
+        this.entityData.define(Slime.ID_SIZE, Integer.valueOf(1));
     }
 
     @VisibleForTesting
     public void setSize(int size, boolean heal) {
         int j = Mth.clamp(size, (int) 1, (int) 127);
 
-        this.entityData.set(Slime.ID_SIZE, j);
+        this.entityData.set(Slime.ID_SIZE, Integer.valueOf(j));
         this.reapplyPosition();
         this.refreshDimensions();
         this.getAttribute(Attributes.MAX_HEALTH).setBaseValue((double) (j * j));
diff --git a/src/main/java/net/minecraft/world/entity/monster/SpellcasterIllager.java b/src/main/java/net/minecraft/world/entity/monster/SpellcasterIllager.java
index b3a02c96718c7c373cf49b3c036d2b77561e856f..2d4e0ae39abb0c3ebf047d50f33b948a7e49cea0 100644
--- a/src/main/java/net/minecraft/world/entity/monster/SpellcasterIllager.java
+++ b/src/main/java/net/minecraft/world/entity/monster/SpellcasterIllager.java
@@ -30,7 +30,7 @@ public abstract class SpellcasterIllager extends AbstractIllager {
     @Override
     protected void defineSynchedData() {
         super.defineSynchedData();
-        this.entityData.define(SpellcasterIllager.DATA_SPELL_CASTING_ID, (byte) 0);
+        this.entityData.define(SpellcasterIllager.DATA_SPELL_CASTING_ID, Byte.valueOf((byte) 0));
     }
 
     @Override
@@ -56,7 +56,7 @@ public abstract class SpellcasterIllager extends AbstractIllager {
 
     public void setIsCastingSpell(SpellcasterIllager.IllagerSpell spell) {
         this.currentSpell = spell;
-        this.entityData.set(SpellcasterIllager.DATA_SPELL_CASTING_ID, (byte) spell.id);
+        this.entityData.set(SpellcasterIllager.DATA_SPELL_CASTING_ID, Byte.valueOf((byte) spell.id));
     }
 
     public SpellcasterIllager.IllagerSpell getCurrentSpell() {
diff --git a/src/main/java/net/minecraft/world/entity/monster/Spider.java b/src/main/java/net/minecraft/world/entity/monster/Spider.java
index 0c16afc64ecb04515b9ba92bd322d75972650a11..30a06040f4d0019451d8bdd1f069e2384f32d8c5 100644
--- a/src/main/java/net/minecraft/world/entity/monster/Spider.java
+++ b/src/main/java/net/minecraft/world/entity/monster/Spider.java
@@ -77,7 +77,7 @@ public class Spider extends Monster {
     @Override
     protected void defineSynchedData() {
         super.defineSynchedData();
-        this.entityData.define(Spider.DATA_FLAGS_ID, (byte) 0);
+        this.entityData.define(Spider.DATA_FLAGS_ID, Byte.valueOf((byte) 0));
     }
 
     @Override
@@ -149,7 +149,7 @@ public class Spider extends Monster {
             b0 &= -2;
         }
 
-        this.entityData.set(Spider.DATA_FLAGS_ID, b0);
+        this.entityData.set(Spider.DATA_FLAGS_ID, Byte.valueOf(b0));
     }
 
     @Nullable
diff --git a/src/main/java/net/minecraft/world/entity/monster/Strider.java b/src/main/java/net/minecraft/world/entity/monster/Strider.java
index 6a511394bb01e025d5e3cf3963618920eee74445..2171f954adf338a871d71d178ebab3ddc2cae7f4 100644
--- a/src/main/java/net/minecraft/world/entity/monster/Strider.java
+++ b/src/main/java/net/minecraft/world/entity/monster/Strider.java
@@ -118,9 +118,9 @@ public class Strider extends Animal implements ItemSteerable, Saddleable {
     @Override
     protected void defineSynchedData() {
         super.defineSynchedData();
-        this.entityData.define(Strider.DATA_BOOST_TIME, 0);
-        this.entityData.define(Strider.DATA_SUFFOCATING, false);
-        this.entityData.define(Strider.DATA_SADDLE_ID, false);
+        this.entityData.define(Strider.DATA_BOOST_TIME, Integer.valueOf(0));
+        this.entityData.define(Strider.DATA_SUFFOCATING, Boolean.FALSE);
+        this.entityData.define(Strider.DATA_SADDLE_ID, Boolean.FALSE);
     }
 
     @Override
@@ -170,7 +170,7 @@ public class Strider extends Animal implements ItemSteerable, Saddleable {
     }
 
     public void setSuffocating(boolean cold) {
-        this.entityData.set(Strider.DATA_SUFFOCATING, cold);
+        this.entityData.set(Strider.DATA_SUFFOCATING, Boolean.valueOf(cold));
     }
 
     public boolean isSuffocating() {
diff --git a/src/main/java/net/minecraft/world/entity/monster/Vex.java b/src/main/java/net/minecraft/world/entity/monster/Vex.java
index 8804771d73c2521d6dff284de3464fa5788e5ffc..8324ee1483fcacef13e8e9877e214d450b47d12e 100644
--- a/src/main/java/net/minecraft/world/entity/monster/Vex.java
+++ b/src/main/java/net/minecraft/world/entity/monster/Vex.java
@@ -111,7 +111,7 @@ public class Vex extends Monster {
     @Override
     protected void defineSynchedData() {
         super.defineSynchedData();
-        this.entityData.define(Vex.DATA_FLAGS_ID, (byte) 0);
+        this.entityData.define(Vex.DATA_FLAGS_ID, Byte.valueOf((byte) 0));
     }
 
     @Override
@@ -172,7 +172,7 @@ public class Vex extends Monster {
             j = b0 & ~mask;
         }
 
-        this.entityData.set(Vex.DATA_FLAGS_ID, (byte) (j & 255));
+        this.entityData.set(Vex.DATA_FLAGS_ID, Byte.valueOf((byte) (j & 255)));
     }
 
     public boolean isCharging() {
diff --git a/src/main/java/net/minecraft/world/entity/monster/Vindicator.java b/src/main/java/net/minecraft/world/entity/monster/Vindicator.java
index a9e75a16a7dc0ff5d4f0faa92ebc444559a39325..b95dbb65cc59f4ae8d5c525b6c0ea466a8dee40f 100644
--- a/src/main/java/net/minecraft/world/entity/monster/Vindicator.java
+++ b/src/main/java/net/minecraft/world/entity/monster/Vindicator.java
@@ -188,7 +188,7 @@ public class Vindicator extends AbstractIllager {
         boolean bl = this.random.nextFloat() <= raid.getEnchantOdds();
         if (bl) {
             Map<Enchantment, Integer> map = Maps.newHashMap();
-            map.put(Enchantments.SHARPNESS, i);
+            map.put(Enchantments.SHARPNESS, Integer.valueOf(i));
             EnchantmentHelper.setEnchantments(map, itemStack);
         }
 
diff --git a/src/main/java/net/minecraft/world/entity/monster/Witch.java b/src/main/java/net/minecraft/world/entity/monster/Witch.java
index b7bc64818387288955d0723cd071d4203bd2f121..95669141b1db08dffcc80b3d32afcb84752df7f6 100644
--- a/src/main/java/net/minecraft/world/entity/monster/Witch.java
+++ b/src/main/java/net/minecraft/world/entity/monster/Witch.java
@@ -76,7 +76,7 @@ public class Witch extends Raider implements RangedAttackMob {
     @Override
     protected void defineSynchedData() {
         super.defineSynchedData();
-        this.getEntityData().define(Witch.DATA_USING_ITEM, false);
+        this.getEntityData().define(Witch.DATA_USING_ITEM, Boolean.FALSE);
     }
 
     @Override
@@ -95,7 +95,7 @@ public class Witch extends Raider implements RangedAttackMob {
     }
 
     public void setUsingItem(boolean drinking) {
-        this.getEntityData().set(Witch.DATA_USING_ITEM, drinking);
+        this.getEntityData().set(Witch.DATA_USING_ITEM, Boolean.valueOf(drinking));
     }
 
     public boolean isDrinkingPotion() {
diff --git a/src/main/java/net/minecraft/world/entity/monster/Zombie.java b/src/main/java/net/minecraft/world/entity/monster/Zombie.java
index 00607c3704157efc8a1761680d09a597bd1c471f..39261e407ed72937770da999198cbbe0f4a541b5 100644
--- a/src/main/java/net/minecraft/world/entity/monster/Zombie.java
+++ b/src/main/java/net/minecraft/world/entity/monster/Zombie.java
@@ -132,9 +132,9 @@ public class Zombie extends Monster {
     @Override
     protected void defineSynchedData() {
         super.defineSynchedData();
-        this.getEntityData().define(Zombie.DATA_BABY_ID, false);
-        this.getEntityData().define(Zombie.DATA_SPECIAL_TYPE_ID, 0);
-        this.getEntityData().define(Zombie.DATA_DROWNED_CONVERSION_ID, false);
+        this.getEntityData().define(Zombie.DATA_BABY_ID, Boolean.FALSE);
+        this.getEntityData().define(Zombie.DATA_SPECIAL_TYPE_ID, Integer.valueOf(0));
+        this.getEntityData().define(Zombie.DATA_DROWNED_CONVERSION_ID, Boolean.FALSE);
     }
 
     public boolean isUnderWaterConverting() {
@@ -188,7 +188,7 @@ public class Zombie extends Monster {
 
     @Override
     public void setBaby(boolean baby) {
-        this.getEntityData().set(Zombie.DATA_BABY_ID, baby);
+        this.getEntityData().set(Zombie.DATA_BABY_ID, Boolean.valueOf(baby));
         if (this.level != null && !this.level.isClientSide) {
             AttributeInstance attributemodifiable = this.getAttribute(Attributes.MOVEMENT_SPEED);
 
@@ -272,13 +272,13 @@ public class Zombie extends Monster {
     // Paper start
     public void stopDrowning() {
         this.conversionTime = -1;
-        this.getEntityData().set(Zombie.DATA_DROWNED_CONVERSION_ID, false);
+        this.getEntityData().set(Zombie.DATA_DROWNED_CONVERSION_ID, Boolean.FALSE);
     }
     // Paper end
     public void startUnderWaterConversion(int ticksUntilWaterConversion) {
         this.lastTick = MinecraftServer.currentTick; // CraftBukkit
         this.conversionTime = ticksUntilWaterConversion;
-        this.getEntityData().set(Zombie.DATA_DROWNED_CONVERSION_ID, true);
+        this.getEntityData().set(Zombie.DATA_DROWNED_CONVERSION_ID, Boolean.TRUE);
     }
 
     protected void doUnderWaterConversion() {
diff --git a/src/main/java/net/minecraft/world/entity/monster/ZombieVillager.java b/src/main/java/net/minecraft/world/entity/monster/ZombieVillager.java
index 71a36cf9b976443cca9ab63cd0eb23253f638562..edd30a5eced0b6bf257de2ebbe72fc5f77de6fe1 100644
--- a/src/main/java/net/minecraft/world/entity/monster/ZombieVillager.java
+++ b/src/main/java/net/minecraft/world/entity/monster/ZombieVillager.java
@@ -82,7 +82,7 @@ public class ZombieVillager extends Zombie implements VillagerDataHolder {
     @Override
     protected void defineSynchedData() {
         super.defineSynchedData();
-        this.entityData.define(ZombieVillager.DATA_CONVERTING_ID, false);
+        this.entityData.define(ZombieVillager.DATA_CONVERTING_ID, Boolean.FALSE);
         this.entityData.define(ZombieVillager.DATA_VILLAGER_DATA, new VillagerData(VillagerType.PLAINS, VillagerProfession.NONE, 1));
     }
 
@@ -206,7 +206,7 @@ public class ZombieVillager extends Zombie implements VillagerDataHolder {
     // Paper end - missing entity behaviour api - converting without entity event
         this.conversionStarter = uuid;
         this.villagerConversionTime = delay;
-        this.getEntityData().set(ZombieVillager.DATA_CONVERTING_ID, true);
+        this.getEntityData().set(ZombieVillager.DATA_CONVERTING_ID, Boolean.TRUE);
         // CraftBukkit start
         this.removeEffect(MobEffects.WEAKNESS, org.bukkit.event.entity.EntityPotionEffectEvent.Cause.CONVERSION);
         this.addEffect(new MobEffectInstance(MobEffects.DAMAGE_BOOST, delay, Math.min(this.level.getDifficulty().getId() - 1, 0)), org.bukkit.event.entity.EntityPotionEffectEvent.Cause.CONVERSION);
diff --git a/src/main/java/net/minecraft/world/entity/monster/hoglin/Hoglin.java b/src/main/java/net/minecraft/world/entity/monster/hoglin/Hoglin.java
index 5d3b3cb3a882eb5d716f678095a65b28d0967476..2f598ae8c718903c8cadbecd4cc593e1c8346108 100644
--- a/src/main/java/net/minecraft/world/entity/monster/hoglin/Hoglin.java
+++ b/src/main/java/net/minecraft/world/entity/monster/hoglin/Hoglin.java
@@ -259,7 +259,7 @@ public class Hoglin extends Animal implements Enemy, HoglinBase {
     @Override
     protected void defineSynchedData() {
         super.defineSynchedData();
-        this.entityData.define(DATA_IMMUNE_TO_ZOMBIFICATION, false);
+        this.entityData.define(DATA_IMMUNE_TO_ZOMBIFICATION, Boolean.FALSE);
     }
 
     @Override
@@ -285,7 +285,7 @@ public class Hoglin extends Animal implements Enemy, HoglinBase {
     }
 
     public void setImmuneToZombification(boolean immuneToZombification) {
-        this.getEntityData().set(DATA_IMMUNE_TO_ZOMBIFICATION, immuneToZombification);
+        this.getEntityData().set(DATA_IMMUNE_TO_ZOMBIFICATION, Boolean.valueOf(immuneToZombification));
     }
 
     public boolean isImmuneToZombification() {
diff --git a/src/main/java/net/minecraft/world/entity/monster/piglin/AbstractPiglin.java b/src/main/java/net/minecraft/world/entity/monster/piglin/AbstractPiglin.java
index 67c012476519d93e2a4529b6cdccb0f1e53b52ad..0f7398d86261926de802075acf91e85092278ee3 100644
--- a/src/main/java/net/minecraft/world/entity/monster/piglin/AbstractPiglin.java
+++ b/src/main/java/net/minecraft/world/entity/monster/piglin/AbstractPiglin.java
@@ -52,7 +52,7 @@ public abstract class AbstractPiglin extends Monster {
     protected abstract boolean canHunt();
 
     public void setImmuneToZombification(boolean immuneToZombification) {
-        this.getEntityData().set(AbstractPiglin.DATA_IMMUNE_TO_ZOMBIFICATION, immuneToZombification);
+        this.getEntityData().set(AbstractPiglin.DATA_IMMUNE_TO_ZOMBIFICATION, Boolean.valueOf(immuneToZombification));
     }
 
     public boolean isImmuneToZombification() {
@@ -62,7 +62,7 @@ public abstract class AbstractPiglin extends Monster {
     @Override
     protected void defineSynchedData() {
         super.defineSynchedData();
-        this.entityData.define(AbstractPiglin.DATA_IMMUNE_TO_ZOMBIFICATION, false);
+        this.entityData.define(AbstractPiglin.DATA_IMMUNE_TO_ZOMBIFICATION, Boolean.FALSE);
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/entity/monster/piglin/Piglin.java b/src/main/java/net/minecraft/world/entity/monster/piglin/Piglin.java
index afa7ecfa8453da510ec5ccecb1ceeb1d9893d259..2415b64809f23de6ed50eb0a40ca7a623a3b6b24 100644
--- a/src/main/java/net/minecraft/world/entity/monster/piglin/Piglin.java
+++ b/src/main/java/net/minecraft/world/entity/monster/piglin/Piglin.java
@@ -169,9 +169,9 @@ public class Piglin extends AbstractPiglin implements CrossbowAttackMob, Invento
     @Override
     protected void defineSynchedData() {
         super.defineSynchedData();
-        this.entityData.define(Piglin.DATA_BABY_ID, false);
-        this.entityData.define(Piglin.DATA_IS_CHARGING_CROSSBOW, false);
-        this.entityData.define(Piglin.DATA_IS_DANCING, false);
+        this.entityData.define(Piglin.DATA_BABY_ID, Boolean.FALSE);
+        this.entityData.define(Piglin.DATA_IS_CHARGING_CROSSBOW, Boolean.FALSE);
+        this.entityData.define(Piglin.DATA_IS_DANCING, Boolean.FALSE);
     }
 
     @Override
@@ -282,7 +282,7 @@ public class Piglin extends AbstractPiglin implements CrossbowAttackMob, Invento
 
     @Override
     public void setBaby(boolean baby) {
-        this.getEntityData().set(Piglin.DATA_BABY_ID, baby);
+        this.getEntityData().set(Piglin.DATA_BABY_ID, Boolean.valueOf(baby));
         if (!this.level.isClientSide) {
             AttributeInstance attributemodifiable = this.getAttribute(Attributes.MOVEMENT_SPEED);
 
@@ -341,7 +341,7 @@ public class Piglin extends AbstractPiglin implements CrossbowAttackMob, Invento
 
     @Override
     public void setChargingCrossbow(boolean charging) {
-        this.entityData.set(Piglin.DATA_IS_CHARGING_CROSSBOW, charging);
+        this.entityData.set(Piglin.DATA_IS_CHARGING_CROSSBOW, Boolean.valueOf(charging));
     }
 
     @Override
@@ -359,7 +359,7 @@ public class Piglin extends AbstractPiglin implements CrossbowAttackMob, Invento
     }
 
     public void setDancing(boolean dancing) {
-        this.entityData.set(Piglin.DATA_IS_DANCING, dancing);
+        this.entityData.set(Piglin.DATA_IS_DANCING, Boolean.valueOf(dancing));
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/entity/monster/piglin/PiglinAi.java b/src/main/java/net/minecraft/world/entity/monster/piglin/PiglinAi.java
index 2e107f10d497a5696c7bc90ae3c5ecea98edb3e1..ce1cb55f54522d894fab8338ff30913c1376612c 100644
--- a/src/main/java/net/minecraft/world/entity/monster/piglin/PiglinAi.java
+++ b/src/main/java/net/minecraft/world/entity/monster/piglin/PiglinAi.java
@@ -138,7 +138,7 @@ public class PiglinAi {
     protected static void initMemories(Piglin piglin, RandomSource random) {
         int i = PiglinAi.TIME_BETWEEN_HUNTS.sample(random);
 
-        piglin.getBrain().setMemoryWithExpiry(MemoryModuleType.HUNTED_RECENTLY, true, (long) i);
+        piglin.getBrain().setMemoryWithExpiry(MemoryModuleType.HUNTED_RECENTLY, Boolean.TRUE, (long) i);
     }
 
     private static void initCoreActivity(Brain<Piglin> piglin) {
@@ -158,7 +158,7 @@ public class PiglinAi {
     private static void initCelebrateActivity(Brain<Piglin> brain) {
         brain.addActivityAndRemoveMemoryWhenStopped(Activity.CELEBRATE, 10, ImmutableList.of(PiglinAi.avoidRepellent(), SetEntityLookTarget.create(PiglinAi::isPlayerHoldingLovedItem, 14.0F), StartAttacking.create(AbstractPiglin::isAdult, PiglinAi::findNearestValidAttackTarget), BehaviorBuilder.triggerIf((entitypiglin) -> {
             return !entitypiglin.isDancing();
-        }, GoToTargetLocation.create(MemoryModuleType.CELEBRATE_LOCATION, 2, 1.0F)), BehaviorBuilder.triggerIf(Piglin::isDancing, GoToTargetLocation.create(MemoryModuleType.CELEBRATE_LOCATION, 4, 0.6F)), new RunOne<>(ImmutableList.of(Pair.of(SetEntityLookTarget.create(EntityType.PIGLIN, 8.0F), 1), Pair.of(RandomStroll.stroll(0.6F, 2, 1), 1), Pair.of(new DoNothing(10, 20), 1)))), MemoryModuleType.CELEBRATE_LOCATION);
+        }, GoToTargetLocation.create(MemoryModuleType.CELEBRATE_LOCATION, 2, 1.0F)), BehaviorBuilder.triggerIf(Piglin::isDancing, GoToTargetLocation.create(MemoryModuleType.CELEBRATE_LOCATION, 4, 0.6F)), new RunOne<>(ImmutableList.of(Pair.of(SetEntityLookTarget.create(EntityType.PIGLIN, 8.0F), Integer.valueOf(1)), Pair.of(RandomStroll.stroll(0.6F, 2, 1), Integer.valueOf(1)), Pair.of(new DoNothing(10, 20), Integer.valueOf(1))))), MemoryModuleType.CELEBRATE_LOCATION);
     }
 
     private static void initAdmireItemActivity(Brain<Piglin> brain) {
@@ -185,7 +185,7 @@ public class PiglinAi {
     }
 
     private static RunOne<Piglin> createIdleMovementBehaviors() {
-        return new RunOne<>(ImmutableList.of(Pair.of(RandomStroll.stroll(0.6F), 2), Pair.of(InteractWith.of(EntityType.PIGLIN, 8, MemoryModuleType.INTERACTION_TARGET, 0.6F, 2), 2), Pair.of(BehaviorBuilder.triggerIf(PiglinAi::doesntSeeAnyPlayerHoldingLovedItem, SetWalkTargetFromLookTarget.create(0.6F, 3)), 2), Pair.of(new DoNothing(30, 60), 1)));
+        return new RunOne<>(ImmutableList.of(Pair.of(RandomStroll.stroll(0.6F), Integer.valueOf(2)), Pair.of(InteractWith.of(EntityType.PIGLIN, 8, MemoryModuleType.INTERACTION_TARGET, 0.6F, 2), Integer.valueOf(2)), Pair.of(BehaviorBuilder.triggerIf(PiglinAi::doesntSeeAnyPlayerHoldingLovedItem, SetWalkTargetFromLookTarget.create(0.6F, 3)), Integer.valueOf(2)), Pair.of(new DoNothing(30, 60), Integer.valueOf(1))));
     }
 
     private static BehaviorControl<PathfinderMob> avoidRepellent() {
@@ -527,7 +527,7 @@ public class PiglinAi {
             behaviorcontroller.eraseMemory(MemoryModuleType.DANCING);
             behaviorcontroller.eraseMemory(MemoryModuleType.ADMIRING_ITEM);
             if (attacker instanceof Player) {
-                behaviorcontroller.setMemoryWithExpiry(MemoryModuleType.ADMIRING_DISABLED, true, 400L);
+                behaviorcontroller.setMemoryWithExpiry(MemoryModuleType.ADMIRING_DISABLED, Boolean.TRUE, 400L);
             }
 
             PiglinAi.getAvoidTarget(piglin).ifPresent((entityliving1) -> {
@@ -649,7 +649,7 @@ public class PiglinAi {
             }
 
             if (target.getType() == EntityType.PLAYER && piglin.level.getGameRules().getBoolean(GameRules.RULE_UNIVERSAL_ANGER)) {
-                piglin.getBrain().setMemoryWithExpiry(MemoryModuleType.UNIVERSAL_ANGER, true, 600L);
+                piglin.getBrain().setMemoryWithExpiry(MemoryModuleType.UNIVERSAL_ANGER, Boolean.TRUE, 600L);
             }
 
         }
@@ -721,8 +721,8 @@ public class PiglinAi {
     }
 
     private static boolean hoglinsOutnumberPiglins(Piglin piglins) {
-        int i = (Integer) piglins.getBrain().getMemory(MemoryModuleType.VISIBLE_ADULT_PIGLIN_COUNT).orElse(0) + 1;
-        int j = (Integer) piglins.getBrain().getMemory(MemoryModuleType.VISIBLE_ADULT_HOGLIN_COUNT).orElse(0);
+        int i = (Integer) piglins.getBrain().getMemory(MemoryModuleType.VISIBLE_ADULT_PIGLIN_COUNT).orElse(Integer.valueOf(0)) + 1;
+        int j = (Integer) piglins.getBrain().getMemory(MemoryModuleType.VISIBLE_ADULT_HOGLIN_COUNT).orElse(Integer.valueOf(0));
 
         return j > i;
     }
@@ -736,11 +736,11 @@ public class PiglinAi {
     }
 
     protected static void dontKillAnyMoreHoglinsForAWhile(AbstractPiglin piglin) {
-        piglin.getBrain().setMemoryWithExpiry(MemoryModuleType.HUNTED_RECENTLY, true, (long) PiglinAi.TIME_BETWEEN_HUNTS.sample(piglin.level.random));
+        piglin.getBrain().setMemoryWithExpiry(MemoryModuleType.HUNTED_RECENTLY, Boolean.TRUE, (long) PiglinAi.TIME_BETWEEN_HUNTS.sample(piglin.level.random));
     }
 
     private static void eat(Piglin piglin) {
-        piglin.getBrain().setMemoryWithExpiry(MemoryModuleType.ATE_RECENTLY, true, 200L);
+        piglin.getBrain().setMemoryWithExpiry(MemoryModuleType.ATE_RECENTLY, Boolean.TRUE, 200L);
     }
 
     private static Vec3 getRandomNearbyPos(Piglin piglin) {
@@ -762,7 +762,7 @@ public class PiglinAi {
     }
 
     private static void admireGoldItem(LivingEntity entity) {
-        entity.getBrain().setMemoryWithExpiry(MemoryModuleType.ADMIRING_ITEM, true, 120L);
+        entity.getBrain().setMemoryWithExpiry(MemoryModuleType.ADMIRING_ITEM, Boolean.TRUE, 120L);
     }
 
     private static boolean isAdmiringItem(Piglin entity) {
diff --git a/src/main/java/net/minecraft/world/entity/monster/warden/AngerManagement.java b/src/main/java/net/minecraft/world/entity/monster/warden/AngerManagement.java
index ece82743df21f0b776382821ad75dee96d0a0748..b84b780d4de63e01d6d95ff22358dc71d74eefb3 100644
--- a/src/main/java/net/minecraft/world/entity/monster/warden/AngerManagement.java
+++ b/src/main/java/net/minecraft/world/entity/monster/warden/AngerManagement.java
@@ -67,9 +67,9 @@ public class AngerManagement {
 
     private List<Pair<UUID, Integer>> createUuidAngerPairs() {
         return Streams.<Pair<UUID, Integer>>concat(this.suspects.stream().map((suspect) -> {
-            return Pair.of(suspect.getUUID(), this.angerBySuspect.getInt(suspect));
+            return Pair.of(suspect.getUUID(), Integer.valueOf(this.angerBySuspect.getInt(suspect)));
         }), this.angerByUuid.object2IntEntrySet().stream().map((suspect) -> {
-            return Pair.of(suspect.getKey(), suspect.getIntValue());
+            return Pair.of(suspect.getKey(), Integer.valueOf(suspect.getIntValue()));
         })).collect(Collectors.toList());
     }
 
@@ -146,7 +146,7 @@ public class AngerManagement {
     public int increaseAnger(Entity entity, int amount) {
         boolean bl = !this.angerBySuspect.containsKey(entity);
         int i = this.angerBySuspect.computeInt(entity, (suspect, anger) -> {
-            return Math.min(150, (anger == null ? 0 : anger) + amount); // Paper - diff on change
+            return Integer.valueOf(Math.min(150, (anger == null ? 0 : anger) + amount)); // Paper - diff on change
         });
         if (bl) {
             int j = this.angerByUuid.removeInt(entity.getUUID());
diff --git a/src/main/java/net/minecraft/world/entity/monster/warden/Warden.java b/src/main/java/net/minecraft/world/entity/monster/warden/Warden.java
index 1ae7408048f951cb94d7cfbea60efc5567b1af84..6dceb80940a81d0c318b6b483e0cb4d681dab967 100644
--- a/src/main/java/net/minecraft/world/entity/monster/warden/Warden.java
+++ b/src/main/java/net/minecraft/world/entity/monster/warden/Warden.java
@@ -216,7 +216,7 @@ public class Warden extends Monster implements VibrationListener.VibrationListen
     @Override
     protected void defineSynchedData() {
         super.defineSynchedData();
-        this.entityData.define(Warden.CLIENT_ANGER_LEVEL, 0);
+        this.entityData.define(Warden.CLIENT_ANGER_LEVEL, Integer.valueOf(0));
     }
 
     public int getClientAngerLevel() {
@@ -224,7 +224,7 @@ public class Warden extends Monster implements VibrationListener.VibrationListen
     }
 
     private void syncClientAngerLevel() {
-        this.entityData.set(Warden.CLIENT_ANGER_LEVEL, this.getActiveAnger());
+        this.entityData.set(Warden.CLIENT_ANGER_LEVEL, Integer.valueOf(this.getActiveAnger()));
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/entity/npc/AbstractVillager.java b/src/main/java/net/minecraft/world/entity/npc/AbstractVillager.java
index f38a19d7ac5d679ac3115d84c01fc3977540e0b8..e17b6ca08a220f41b0af5e1b7f15528aa1aaa091 100644
--- a/src/main/java/net/minecraft/world/entity/npc/AbstractVillager.java
+++ b/src/main/java/net/minecraft/world/entity/npc/AbstractVillager.java
@@ -81,7 +81,7 @@ public abstract class AbstractVillager extends AgeableMob implements InventoryCa
     }
 
     public void setUnhappyCounter(int ticks) {
-        this.entityData.set(AbstractVillager.DATA_UNHAPPY_COUNTER, ticks);
+        this.entityData.set(AbstractVillager.DATA_UNHAPPY_COUNTER, Integer.valueOf(ticks));
     }
 
     @Override
@@ -97,7 +97,7 @@ public abstract class AbstractVillager extends AgeableMob implements InventoryCa
     @Override
     protected void defineSynchedData() {
         super.defineSynchedData();
-        this.entityData.define(AbstractVillager.DATA_UNHAPPY_COUNTER, 0);
+        this.entityData.define(AbstractVillager.DATA_UNHAPPY_COUNTER, Integer.valueOf(0));
     }
 
     @Override
@@ -265,11 +265,11 @@ public abstract class AbstractVillager extends AgeableMob implements InventoryCa
 
         if (pool.length > count) {
             while (set.size() < count) {
-                set.add(this.random.nextInt(pool.length));
+                set.add(Integer.valueOf(this.random.nextInt(pool.length)));
             }
         } else {
             for (int j = 0; j < pool.length; ++j) {
-                set.add(j);
+                set.add(Integer.valueOf(j));
             }
         }
 
diff --git a/src/main/java/net/minecraft/world/entity/npc/Villager.java b/src/main/java/net/minecraft/world/entity/npc/Villager.java
index 18eac340386a396c9850f53f30d20a41c1437788..f66e0c3b38707a24f7cc70325d0611959d956de5 100644
--- a/src/main/java/net/minecraft/world/entity/npc/Villager.java
+++ b/src/main/java/net/minecraft/world/entity/npc/Villager.java
@@ -102,7 +102,7 @@ public class Villager extends AbstractVillager implements ReputationEventHandler
     private static final Logger LOGGER = LogUtils.getLogger();
     private static final EntityDataAccessor<VillagerData> DATA_VILLAGER_DATA = SynchedEntityData.defineId(Villager.class, EntityDataSerializers.VILLAGER_DATA);
     public static final int BREEDING_FOOD_THRESHOLD = 12;
-    public static final Map<Item, Integer> FOOD_POINTS = ImmutableMap.of(Items.BREAD, 4, Items.POTATO, 1, Items.CARROT, 1, Items.BEETROOT, 1);
+    public static final Map<Item, Integer> FOOD_POINTS = ImmutableMap.of(Items.BREAD, Integer.valueOf(4), Items.POTATO, Integer.valueOf(1), Items.CARROT, Integer.valueOf(1), Items.BEETROOT, Integer.valueOf(1));
     private static final int TRADES_PER_LEVEL = 2;
     private static final Set<Item> WANTED_ITEMS = ImmutableSet.of(Items.BREAD, Items.POTATO, Items.CARROT, Items.WHEAT, Items.WHEAT_SEEDS, Items.BEETROOT, new Item[]{Items.BEETROOT_SEEDS});
     private static final int MAX_GOSSIP_TOPICS = 10;
@@ -1040,7 +1040,7 @@ public class Villager extends AbstractVillager implements ReputationEventHandler
     @Override
     public void startSleeping(BlockPos pos) {
         super.startSleeping(pos);
-        this.brain.setMemory(MemoryModuleType.LAST_SLEPT, this.level.getGameTime()); // CraftBukkit - decompile error
+        this.brain.setMemory(MemoryModuleType.LAST_SLEPT, Long.valueOf(this.level.getGameTime())); // CraftBukkit - decompile error
         this.brain.eraseMemory(MemoryModuleType.WALK_TARGET);
         this.brain.eraseMemory(MemoryModuleType.CANT_REACH_WALK_TARGET_SINCE);
     }
@@ -1048,7 +1048,7 @@ public class Villager extends AbstractVillager implements ReputationEventHandler
     @Override
     public void stopSleeping() {
         super.stopSleeping();
-        this.brain.setMemory(MemoryModuleType.LAST_WOKEN, this.level.getGameTime()); // CraftBukkit - decompile error
+        this.brain.setMemory(MemoryModuleType.LAST_WOKEN, Long.valueOf(this.level.getGameTime())); // CraftBukkit - decompile error
     }
 
     private boolean golemSpawnConditionsMet(long worldTime) {
diff --git a/src/main/java/net/minecraft/world/entity/npc/VillagerTrades.java b/src/main/java/net/minecraft/world/entity/npc/VillagerTrades.java
index a4e2a7e5d4b38b67333beaf75ff95b071cb13b26..1fcf0b61bf4ed43da41c96a83e63b1632028c854 100644
--- a/src/main/java/net/minecraft/world/entity/npc/VillagerTrades.java
+++ b/src/main/java/net/minecraft/world/entity/npc/VillagerTrades.java
@@ -61,21 +61,21 @@ public class VillagerTrades {
     private static final float LOW_TIER_PRICE_MULTIPLIER = 0.05F;
     private static final float HIGH_TIER_PRICE_MULTIPLIER = 0.2F;
     public static final Map<VillagerProfession, Int2ObjectMap<VillagerTrades.ItemListing[]>> TRADES = Util.make(Maps.newHashMap(), (map) -> {
-        map.put(VillagerProfession.FARMER, toIntMap(ImmutableMap.of(1, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.WHEAT, 20, 16, 2), new VillagerTrades.EmeraldForItems(Items.POTATO, 26, 16, 2), new VillagerTrades.EmeraldForItems(Items.CARROT, 22, 16, 2), new VillagerTrades.EmeraldForItems(Items.BEETROOT, 15, 16, 2), new VillagerTrades.ItemsForEmeralds(Items.BREAD, 1, 6, 16, 1)}, 2, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Blocks.PUMPKIN, 6, 12, 10), new VillagerTrades.ItemsForEmeralds(Items.PUMPKIN_PIE, 1, 4, 5), new VillagerTrades.ItemsForEmeralds(Items.APPLE, 1, 4, 16, 5)}, 3, new VillagerTrades.ItemListing[]{new VillagerTrades.ItemsForEmeralds(Items.COOKIE, 3, 18, 10), new VillagerTrades.EmeraldForItems(Blocks.MELON, 4, 12, 20)}, 4, new VillagerTrades.ItemListing[]{new VillagerTrades.ItemsForEmeralds(Blocks.CAKE, 1, 1, 12, 15), new VillagerTrades.SuspiciousStewForEmerald(MobEffects.NIGHT_VISION, 100, 15), new VillagerTrades.SuspiciousStewForEmerald(MobEffects.JUMP, 160, 15), new VillagerTrades.SuspiciousStewForEmerald(MobEffects.WEAKNESS, 140, 15), new VillagerTrades.SuspiciousStewForEmerald(MobEffects.BLINDNESS, 120, 15), new VillagerTrades.SuspiciousStewForEmerald(MobEffects.POISON, 280, 15), new VillagerTrades.SuspiciousStewForEmerald(MobEffects.SATURATION, 7, 15)}, 5, new VillagerTrades.ItemListing[]{new VillagerTrades.ItemsForEmeralds(Items.GOLDEN_CARROT, 3, 3, 30), new VillagerTrades.ItemsForEmeralds(Items.GLISTERING_MELON_SLICE, 4, 3, 30)})));
-        map.put(VillagerProfession.FISHERMAN, toIntMap(ImmutableMap.of(1, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.STRING, 20, 16, 2), new VillagerTrades.EmeraldForItems(Items.COAL, 10, 16, 2), new VillagerTrades.ItemsAndEmeraldsToItems(Items.COD, 6, Items.COOKED_COD, 6, 16, 1), new VillagerTrades.ItemsForEmeralds(Items.COD_BUCKET, 3, 1, 16, 1)}, 2, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.COD, 15, 16, 10), new VillagerTrades.ItemsAndEmeraldsToItems(Items.SALMON, 6, Items.COOKED_SALMON, 6, 16, 5), new VillagerTrades.ItemsForEmeralds(Items.CAMPFIRE, 2, 1, 5)}, 3, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.SALMON, 13, 16, 20), new VillagerTrades.EnchantedItemForEmeralds(Items.FISHING_ROD, 3, 3, 10, 0.2F)}, 4, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.TROPICAL_FISH, 6, 12, 30)}, 5, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.PUFFERFISH, 4, 12, 30), new VillagerTrades.EmeraldsForVillagerTypeItem(1, 12, 30, ImmutableMap.<VillagerType, Item>builder().put(VillagerType.PLAINS, Items.OAK_BOAT).put(VillagerType.TAIGA, Items.SPRUCE_BOAT).put(VillagerType.SNOW, Items.SPRUCE_BOAT).put(VillagerType.DESERT, Items.JUNGLE_BOAT).put(VillagerType.JUNGLE, Items.JUNGLE_BOAT).put(VillagerType.SAVANNA, Items.ACACIA_BOAT).put(VillagerType.SWAMP, Items.DARK_OAK_BOAT).build())})));
-        map.put(VillagerProfession.SHEPHERD, toIntMap(ImmutableMap.of(1, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Blocks.WHITE_WOOL, 18, 16, 2), new VillagerTrades.EmeraldForItems(Blocks.BROWN_WOOL, 18, 16, 2), new VillagerTrades.EmeraldForItems(Blocks.BLACK_WOOL, 18, 16, 2), new VillagerTrades.EmeraldForItems(Blocks.GRAY_WOOL, 18, 16, 2), new VillagerTrades.ItemsForEmeralds(Items.SHEARS, 2, 1, 1)}, 2, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.WHITE_DYE, 12, 16, 10), new VillagerTrades.EmeraldForItems(Items.GRAY_DYE, 12, 16, 10), new VillagerTrades.EmeraldForItems(Items.BLACK_DYE, 12, 16, 10), new VillagerTrades.EmeraldForItems(Items.LIGHT_BLUE_DYE, 12, 16, 10), new VillagerTrades.EmeraldForItems(Items.LIME_DYE, 12, 16, 10), new VillagerTrades.ItemsForEmeralds(Blocks.WHITE_WOOL, 1, 1, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.ORANGE_WOOL, 1, 1, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.MAGENTA_WOOL, 1, 1, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.LIGHT_BLUE_WOOL, 1, 1, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.YELLOW_WOOL, 1, 1, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.LIME_WOOL, 1, 1, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.PINK_WOOL, 1, 1, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.GRAY_WOOL, 1, 1, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.LIGHT_GRAY_WOOL, 1, 1, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.CYAN_WOOL, 1, 1, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.PURPLE_WOOL, 1, 1, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.BLUE_WOOL, 1, 1, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.BROWN_WOOL, 1, 1, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.GREEN_WOOL, 1, 1, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.RED_WOOL, 1, 1, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.BLACK_WOOL, 1, 1, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.WHITE_CARPET, 1, 4, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.ORANGE_CARPET, 1, 4, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.MAGENTA_CARPET, 1, 4, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.LIGHT_BLUE_CARPET, 1, 4, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.YELLOW_CARPET, 1, 4, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.LIME_CARPET, 1, 4, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.PINK_CARPET, 1, 4, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.GRAY_CARPET, 1, 4, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.LIGHT_GRAY_CARPET, 1, 4, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.CYAN_CARPET, 1, 4, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.PURPLE_CARPET, 1, 4, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.BLUE_CARPET, 1, 4, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.BROWN_CARPET, 1, 4, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.GREEN_CARPET, 1, 4, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.RED_CARPET, 1, 4, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.BLACK_CARPET, 1, 4, 16, 5)}, 3, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.YELLOW_DYE, 12, 16, 20), new VillagerTrades.EmeraldForItems(Items.LIGHT_GRAY_DYE, 12, 16, 20), new VillagerTrades.EmeraldForItems(Items.ORANGE_DYE, 12, 16, 20), new VillagerTrades.EmeraldForItems(Items.RED_DYE, 12, 16, 20), new VillagerTrades.EmeraldForItems(Items.PINK_DYE, 12, 16, 20), new VillagerTrades.ItemsForEmeralds(Blocks.WHITE_BED, 3, 1, 12, 10), new VillagerTrades.ItemsForEmeralds(Blocks.YELLOW_BED, 3, 1, 12, 10), new VillagerTrades.ItemsForEmeralds(Blocks.RED_BED, 3, 1, 12, 10), new VillagerTrades.ItemsForEmeralds(Blocks.BLACK_BED, 3, 1, 12, 10), new VillagerTrades.ItemsForEmeralds(Blocks.BLUE_BED, 3, 1, 12, 10), new VillagerTrades.ItemsForEmeralds(Blocks.BROWN_BED, 3, 1, 12, 10), new VillagerTrades.ItemsForEmeralds(Blocks.CYAN_BED, 3, 1, 12, 10), new VillagerTrades.ItemsForEmeralds(Blocks.GRAY_BED, 3, 1, 12, 10), new VillagerTrades.ItemsForEmeralds(Blocks.GREEN_BED, 3, 1, 12, 10), new VillagerTrades.ItemsForEmeralds(Blocks.LIGHT_BLUE_BED, 3, 1, 12, 10), new VillagerTrades.ItemsForEmeralds(Blocks.LIGHT_GRAY_BED, 3, 1, 12, 10), new VillagerTrades.ItemsForEmeralds(Blocks.LIME_BED, 3, 1, 12, 10), new VillagerTrades.ItemsForEmeralds(Blocks.MAGENTA_BED, 3, 1, 12, 10), new VillagerTrades.ItemsForEmeralds(Blocks.ORANGE_BED, 3, 1, 12, 10), new VillagerTrades.ItemsForEmeralds(Blocks.PINK_BED, 3, 1, 12, 10), new VillagerTrades.ItemsForEmeralds(Blocks.PURPLE_BED, 3, 1, 12, 10)}, 4, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.BROWN_DYE, 12, 16, 30), new VillagerTrades.EmeraldForItems(Items.PURPLE_DYE, 12, 16, 30), new VillagerTrades.EmeraldForItems(Items.BLUE_DYE, 12, 16, 30), new VillagerTrades.EmeraldForItems(Items.GREEN_DYE, 12, 16, 30), new VillagerTrades.EmeraldForItems(Items.MAGENTA_DYE, 12, 16, 30), new VillagerTrades.EmeraldForItems(Items.CYAN_DYE, 12, 16, 30), new VillagerTrades.ItemsForEmeralds(Items.WHITE_BANNER, 3, 1, 12, 15), new VillagerTrades.ItemsForEmeralds(Items.BLUE_BANNER, 3, 1, 12, 15), new VillagerTrades.ItemsForEmeralds(Items.LIGHT_BLUE_BANNER, 3, 1, 12, 15), new VillagerTrades.ItemsForEmeralds(Items.RED_BANNER, 3, 1, 12, 15), new VillagerTrades.ItemsForEmeralds(Items.PINK_BANNER, 3, 1, 12, 15), new VillagerTrades.ItemsForEmeralds(Items.GREEN_BANNER, 3, 1, 12, 15), new VillagerTrades.ItemsForEmeralds(Items.LIME_BANNER, 3, 1, 12, 15), new VillagerTrades.ItemsForEmeralds(Items.GRAY_BANNER, 3, 1, 12, 15), new VillagerTrades.ItemsForEmeralds(Items.BLACK_BANNER, 3, 1, 12, 15), new VillagerTrades.ItemsForEmeralds(Items.PURPLE_BANNER, 3, 1, 12, 15), new VillagerTrades.ItemsForEmeralds(Items.MAGENTA_BANNER, 3, 1, 12, 15), new VillagerTrades.ItemsForEmeralds(Items.CYAN_BANNER, 3, 1, 12, 15), new VillagerTrades.ItemsForEmeralds(Items.BROWN_BANNER, 3, 1, 12, 15), new VillagerTrades.ItemsForEmeralds(Items.YELLOW_BANNER, 3, 1, 12, 15), new VillagerTrades.ItemsForEmeralds(Items.ORANGE_BANNER, 3, 1, 12, 15), new VillagerTrades.ItemsForEmeralds(Items.LIGHT_GRAY_BANNER, 3, 1, 12, 15)}, 5, new VillagerTrades.ItemListing[]{new VillagerTrades.ItemsForEmeralds(Items.PAINTING, 2, 3, 30)})));
-        map.put(VillagerProfession.FLETCHER, toIntMap(ImmutableMap.of(1, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.STICK, 32, 16, 2), new VillagerTrades.ItemsForEmeralds(Items.ARROW, 1, 16, 1), new VillagerTrades.ItemsAndEmeraldsToItems(Blocks.GRAVEL, 10, Items.FLINT, 10, 12, 1)}, 2, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.FLINT, 26, 12, 10), new VillagerTrades.ItemsForEmeralds(Items.BOW, 2, 1, 5)}, 3, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.STRING, 14, 16, 20), new VillagerTrades.ItemsForEmeralds(Items.CROSSBOW, 3, 1, 10)}, 4, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.FEATHER, 24, 16, 30), new VillagerTrades.EnchantedItemForEmeralds(Items.BOW, 2, 3, 15)}, 5, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.TRIPWIRE_HOOK, 8, 12, 30), new VillagerTrades.EnchantedItemForEmeralds(Items.CROSSBOW, 3, 3, 15), new VillagerTrades.TippedArrowForItemsAndEmeralds(Items.ARROW, 5, Items.TIPPED_ARROW, 5, 2, 12, 30)})));
-        map.put(VillagerProfession.LIBRARIAN, toIntMap(ImmutableMap.<Integer, VillagerTrades.ItemListing[]>builder().put(1, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.PAPER, 24, 16, 2), new VillagerTrades.EnchantBookForEmeralds(1), new VillagerTrades.ItemsForEmeralds(Blocks.BOOKSHELF, 9, 1, 12, 1)}).put(2, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.BOOK, 4, 12, 10), new VillagerTrades.EnchantBookForEmeralds(5), new VillagerTrades.ItemsForEmeralds(Items.LANTERN, 1, 1, 5)}).put(3, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.INK_SAC, 5, 12, 20), new VillagerTrades.EnchantBookForEmeralds(10), new VillagerTrades.ItemsForEmeralds(Items.GLASS, 1, 4, 10)}).put(4, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.WRITABLE_BOOK, 2, 12, 30), new VillagerTrades.EnchantBookForEmeralds(15), new VillagerTrades.ItemsForEmeralds(Items.CLOCK, 5, 1, 15), new VillagerTrades.ItemsForEmeralds(Items.COMPASS, 4, 1, 15)}).put(5, new VillagerTrades.ItemListing[]{new VillagerTrades.ItemsForEmeralds(Items.NAME_TAG, 20, 1, 30)}).build()));
-        map.put(VillagerProfession.CARTOGRAPHER, toIntMap(ImmutableMap.of(1, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.PAPER, 24, 16, 2), new VillagerTrades.ItemsForEmeralds(Items.MAP, 7, 1, 1)}, 2, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.GLASS_PANE, 11, 16, 10), new VillagerTrades.TreasureMapForEmeralds(13, StructureTags.ON_OCEAN_EXPLORER_MAPS, "filled_map.monument", MapDecoration.Type.MONUMENT, 12, 5)}, 3, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.COMPASS, 1, 12, 20), new VillagerTrades.TreasureMapForEmeralds(14, StructureTags.ON_WOODLAND_EXPLORER_MAPS, "filled_map.mansion", MapDecoration.Type.MANSION, 12, 10)}, 4, new VillagerTrades.ItemListing[]{new VillagerTrades.ItemsForEmeralds(Items.ITEM_FRAME, 7, 1, 15), new VillagerTrades.ItemsForEmeralds(Items.WHITE_BANNER, 3, 1, 15), new VillagerTrades.ItemsForEmeralds(Items.BLUE_BANNER, 3, 1, 15), new VillagerTrades.ItemsForEmeralds(Items.LIGHT_BLUE_BANNER, 3, 1, 15), new VillagerTrades.ItemsForEmeralds(Items.RED_BANNER, 3, 1, 15), new VillagerTrades.ItemsForEmeralds(Items.PINK_BANNER, 3, 1, 15), new VillagerTrades.ItemsForEmeralds(Items.GREEN_BANNER, 3, 1, 15), new VillagerTrades.ItemsForEmeralds(Items.LIME_BANNER, 3, 1, 15), new VillagerTrades.ItemsForEmeralds(Items.GRAY_BANNER, 3, 1, 15), new VillagerTrades.ItemsForEmeralds(Items.BLACK_BANNER, 3, 1, 15), new VillagerTrades.ItemsForEmeralds(Items.PURPLE_BANNER, 3, 1, 15), new VillagerTrades.ItemsForEmeralds(Items.MAGENTA_BANNER, 3, 1, 15), new VillagerTrades.ItemsForEmeralds(Items.CYAN_BANNER, 3, 1, 15), new VillagerTrades.ItemsForEmeralds(Items.BROWN_BANNER, 3, 1, 15), new VillagerTrades.ItemsForEmeralds(Items.YELLOW_BANNER, 3, 1, 15), new VillagerTrades.ItemsForEmeralds(Items.ORANGE_BANNER, 3, 1, 15), new VillagerTrades.ItemsForEmeralds(Items.LIGHT_GRAY_BANNER, 3, 1, 15)}, 5, new VillagerTrades.ItemListing[]{new VillagerTrades.ItemsForEmeralds(Items.GLOBE_BANNER_PATTERN, 8, 1, 30)})));
-        map.put(VillagerProfession.CLERIC, toIntMap(ImmutableMap.of(1, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.ROTTEN_FLESH, 32, 16, 2), new VillagerTrades.ItemsForEmeralds(Items.REDSTONE, 1, 2, 1)}, 2, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.GOLD_INGOT, 3, 12, 10), new VillagerTrades.ItemsForEmeralds(Items.LAPIS_LAZULI, 1, 1, 5)}, 3, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.RABBIT_FOOT, 2, 12, 20), new VillagerTrades.ItemsForEmeralds(Blocks.GLOWSTONE, 4, 1, 12, 10)}, 4, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.SCUTE, 4, 12, 30), new VillagerTrades.EmeraldForItems(Items.GLASS_BOTTLE, 9, 12, 30), new VillagerTrades.ItemsForEmeralds(Items.ENDER_PEARL, 5, 1, 15)}, 5, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.NETHER_WART, 22, 12, 30), new VillagerTrades.ItemsForEmeralds(Items.EXPERIENCE_BOTTLE, 3, 1, 30)})));
-        map.put(VillagerProfession.ARMORER, toIntMap(ImmutableMap.of(1, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.COAL, 15, 16, 2), new VillagerTrades.ItemsForEmeralds(new ItemStack(Items.IRON_LEGGINGS), 7, 1, 12, 1, 0.2F), new VillagerTrades.ItemsForEmeralds(new ItemStack(Items.IRON_BOOTS), 4, 1, 12, 1, 0.2F), new VillagerTrades.ItemsForEmeralds(new ItemStack(Items.IRON_HELMET), 5, 1, 12, 1, 0.2F), new VillagerTrades.ItemsForEmeralds(new ItemStack(Items.IRON_CHESTPLATE), 9, 1, 12, 1, 0.2F)}, 2, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.IRON_INGOT, 4, 12, 10), new VillagerTrades.ItemsForEmeralds(new ItemStack(Items.BELL), 36, 1, 12, 5, 0.2F), new VillagerTrades.ItemsForEmeralds(new ItemStack(Items.CHAINMAIL_BOOTS), 1, 1, 12, 5, 0.2F), new VillagerTrades.ItemsForEmeralds(new ItemStack(Items.CHAINMAIL_LEGGINGS), 3, 1, 12, 5, 0.2F)}, 3, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.LAVA_BUCKET, 1, 12, 20), new VillagerTrades.EmeraldForItems(Items.DIAMOND, 1, 12, 20), new VillagerTrades.ItemsForEmeralds(new ItemStack(Items.CHAINMAIL_HELMET), 1, 1, 12, 10, 0.2F), new VillagerTrades.ItemsForEmeralds(new ItemStack(Items.CHAINMAIL_CHESTPLATE), 4, 1, 12, 10, 0.2F), new VillagerTrades.ItemsForEmeralds(new ItemStack(Items.SHIELD), 5, 1, 12, 10, 0.2F)}, 4, new VillagerTrades.ItemListing[]{new VillagerTrades.EnchantedItemForEmeralds(Items.DIAMOND_LEGGINGS, 14, 3, 15, 0.2F), new VillagerTrades.EnchantedItemForEmeralds(Items.DIAMOND_BOOTS, 8, 3, 15, 0.2F)}, 5, new VillagerTrades.ItemListing[]{new VillagerTrades.EnchantedItemForEmeralds(Items.DIAMOND_HELMET, 8, 3, 30, 0.2F), new VillagerTrades.EnchantedItemForEmeralds(Items.DIAMOND_CHESTPLATE, 16, 3, 30, 0.2F)})));
-        map.put(VillagerProfession.WEAPONSMITH, toIntMap(ImmutableMap.of(1, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.COAL, 15, 16, 2), new VillagerTrades.ItemsForEmeralds(new ItemStack(Items.IRON_AXE), 3, 1, 12, 1, 0.2F), new VillagerTrades.EnchantedItemForEmeralds(Items.IRON_SWORD, 2, 3, 1)}, 2, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.IRON_INGOT, 4, 12, 10), new VillagerTrades.ItemsForEmeralds(new ItemStack(Items.BELL), 36, 1, 12, 5, 0.2F)}, 3, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.FLINT, 24, 12, 20)}, 4, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.DIAMOND, 1, 12, 30), new VillagerTrades.EnchantedItemForEmeralds(Items.DIAMOND_AXE, 12, 3, 15, 0.2F)}, 5, new VillagerTrades.ItemListing[]{new VillagerTrades.EnchantedItemForEmeralds(Items.DIAMOND_SWORD, 8, 3, 30, 0.2F)})));
-        map.put(VillagerProfession.TOOLSMITH, toIntMap(ImmutableMap.of(1, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.COAL, 15, 16, 2), new VillagerTrades.ItemsForEmeralds(new ItemStack(Items.STONE_AXE), 1, 1, 12, 1, 0.2F), new VillagerTrades.ItemsForEmeralds(new ItemStack(Items.STONE_SHOVEL), 1, 1, 12, 1, 0.2F), new VillagerTrades.ItemsForEmeralds(new ItemStack(Items.STONE_PICKAXE), 1, 1, 12, 1, 0.2F), new VillagerTrades.ItemsForEmeralds(new ItemStack(Items.STONE_HOE), 1, 1, 12, 1, 0.2F)}, 2, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.IRON_INGOT, 4, 12, 10), new VillagerTrades.ItemsForEmeralds(new ItemStack(Items.BELL), 36, 1, 12, 5, 0.2F)}, 3, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.FLINT, 30, 12, 20), new VillagerTrades.EnchantedItemForEmeralds(Items.IRON_AXE, 1, 3, 10, 0.2F), new VillagerTrades.EnchantedItemForEmeralds(Items.IRON_SHOVEL, 2, 3, 10, 0.2F), new VillagerTrades.EnchantedItemForEmeralds(Items.IRON_PICKAXE, 3, 3, 10, 0.2F), new VillagerTrades.ItemsForEmeralds(new ItemStack(Items.DIAMOND_HOE), 4, 1, 3, 10, 0.2F)}, 4, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.DIAMOND, 1, 12, 30), new VillagerTrades.EnchantedItemForEmeralds(Items.DIAMOND_AXE, 12, 3, 15, 0.2F), new VillagerTrades.EnchantedItemForEmeralds(Items.DIAMOND_SHOVEL, 5, 3, 15, 0.2F)}, 5, new VillagerTrades.ItemListing[]{new VillagerTrades.EnchantedItemForEmeralds(Items.DIAMOND_PICKAXE, 13, 3, 30, 0.2F)})));
-        map.put(VillagerProfession.BUTCHER, toIntMap(ImmutableMap.of(1, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.CHICKEN, 14, 16, 2), new VillagerTrades.EmeraldForItems(Items.PORKCHOP, 7, 16, 2), new VillagerTrades.EmeraldForItems(Items.RABBIT, 4, 16, 2), new VillagerTrades.ItemsForEmeralds(Items.RABBIT_STEW, 1, 1, 1)}, 2, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.COAL, 15, 16, 2), new VillagerTrades.ItemsForEmeralds(Items.COOKED_PORKCHOP, 1, 5, 16, 5), new VillagerTrades.ItemsForEmeralds(Items.COOKED_CHICKEN, 1, 8, 16, 5)}, 3, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.MUTTON, 7, 16, 20), new VillagerTrades.EmeraldForItems(Items.BEEF, 10, 16, 20)}, 4, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.DRIED_KELP_BLOCK, 10, 12, 30)}, 5, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.SWEET_BERRIES, 10, 12, 30)})));
-        map.put(VillagerProfession.LEATHERWORKER, toIntMap(ImmutableMap.of(1, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.LEATHER, 6, 16, 2), new VillagerTrades.DyedArmorForEmeralds(Items.LEATHER_LEGGINGS, 3), new VillagerTrades.DyedArmorForEmeralds(Items.LEATHER_CHESTPLATE, 7)}, 2, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.FLINT, 26, 12, 10), new VillagerTrades.DyedArmorForEmeralds(Items.LEATHER_HELMET, 5, 12, 5), new VillagerTrades.DyedArmorForEmeralds(Items.LEATHER_BOOTS, 4, 12, 5)}, 3, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.RABBIT_HIDE, 9, 12, 20), new VillagerTrades.DyedArmorForEmeralds(Items.LEATHER_CHESTPLATE, 7)}, 4, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.SCUTE, 4, 12, 30), new VillagerTrades.DyedArmorForEmeralds(Items.LEATHER_HORSE_ARMOR, 6, 12, 15)}, 5, new VillagerTrades.ItemListing[]{new VillagerTrades.ItemsForEmeralds(new ItemStack(Items.SADDLE), 6, 1, 12, 30, 0.2F), new VillagerTrades.DyedArmorForEmeralds(Items.LEATHER_HELMET, 5, 12, 30)})));
-        map.put(VillagerProfession.MASON, toIntMap(ImmutableMap.of(1, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.CLAY_BALL, 10, 16, 2), new VillagerTrades.ItemsForEmeralds(Items.BRICK, 1, 10, 16, 1)}, 2, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Blocks.STONE, 20, 16, 10), new VillagerTrades.ItemsForEmeralds(Blocks.CHISELED_STONE_BRICKS, 1, 4, 16, 5)}, 3, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Blocks.GRANITE, 16, 16, 20), new VillagerTrades.EmeraldForItems(Blocks.ANDESITE, 16, 16, 20), new VillagerTrades.EmeraldForItems(Blocks.DIORITE, 16, 16, 20), new VillagerTrades.ItemsForEmeralds(Blocks.DRIPSTONE_BLOCK, 1, 4, 16, 10), new VillagerTrades.ItemsForEmeralds(Blocks.POLISHED_ANDESITE, 1, 4, 16, 10), new VillagerTrades.ItemsForEmeralds(Blocks.POLISHED_DIORITE, 1, 4, 16, 10), new VillagerTrades.ItemsForEmeralds(Blocks.POLISHED_GRANITE, 1, 4, 16, 10)}, 4, new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.QUARTZ, 12, 12, 30), new VillagerTrades.ItemsForEmeralds(Blocks.ORANGE_TERRACOTTA, 1, 1, 12, 15), new VillagerTrades.ItemsForEmeralds(Blocks.WHITE_TERRACOTTA, 1, 1, 12, 15), new VillagerTrades.ItemsForEmeralds(Blocks.BLUE_TERRACOTTA, 1, 1, 12, 15), new VillagerTrades.ItemsForEmeralds(Blocks.LIGHT_BLUE_TERRACOTTA, 1, 1, 12, 15), new VillagerTrades.ItemsForEmeralds(Blocks.GRAY_TERRACOTTA, 1, 1, 12, 15), new VillagerTrades.ItemsForEmeralds(Blocks.LIGHT_GRAY_TERRACOTTA, 1, 1, 12, 15), new VillagerTrades.ItemsForEmeralds(Blocks.BLACK_TERRACOTTA, 1, 1, 12, 15), new VillagerTrades.ItemsForEmeralds(Blocks.RED_TERRACOTTA, 1, 1, 12, 15), new VillagerTrades.ItemsForEmeralds(Blocks.PINK_TERRACOTTA, 1, 1, 12, 15), new VillagerTrades.ItemsForEmeralds(Blocks.MAGENTA_TERRACOTTA, 1, 1, 12, 15), new VillagerTrades.ItemsForEmeralds(Blocks.LIME_TERRACOTTA, 1, 1, 12, 15), new VillagerTrades.ItemsForEmeralds(Blocks.GREEN_TERRACOTTA, 1, 1, 12, 15), new VillagerTrades.ItemsForEmeralds(Blocks.CYAN_TERRACOTTA, 1, 1, 12, 15), new VillagerTrades.ItemsForEmeralds(Blocks.PURPLE_TERRACOTTA, 1, 1, 12, 15), new VillagerTrades.ItemsForEmeralds(Blocks.YELLOW_TERRACOTTA, 1, 1, 12, 15), new VillagerTrades.ItemsForEmeralds(Blocks.BROWN_TERRACOTTA, 1, 1, 12, 15), new VillagerTrades.ItemsForEmeralds(Blocks.ORANGE_GLAZED_TERRACOTTA, 1, 1, 12, 15), new VillagerTrades.ItemsForEmeralds(Blocks.WHITE_GLAZED_TERRACOTTA, 1, 1, 12, 15), new VillagerTrades.ItemsForEmeralds(Blocks.BLUE_GLAZED_TERRACOTTA, 1, 1, 12, 15), new VillagerTrades.ItemsForEmeralds(Blocks.LIGHT_BLUE_GLAZED_TERRACOTTA, 1, 1, 12, 15), new VillagerTrades.ItemsForEmeralds(Blocks.GRAY_GLAZED_TERRACOTTA, 1, 1, 12, 15), new VillagerTrades.ItemsForEmeralds(Blocks.LIGHT_GRAY_GLAZED_TERRACOTTA, 1, 1, 12, 15), new VillagerTrades.ItemsForEmeralds(Blocks.BLACK_GLAZED_TERRACOTTA, 1, 1, 12, 15), new VillagerTrades.ItemsForEmeralds(Blocks.RED_GLAZED_TERRACOTTA, 1, 1, 12, 15), new VillagerTrades.ItemsForEmeralds(Blocks.PINK_GLAZED_TERRACOTTA, 1, 1, 12, 15), new VillagerTrades.ItemsForEmeralds(Blocks.MAGENTA_GLAZED_TERRACOTTA, 1, 1, 12, 15), new VillagerTrades.ItemsForEmeralds(Blocks.LIME_GLAZED_TERRACOTTA, 1, 1, 12, 15), new VillagerTrades.ItemsForEmeralds(Blocks.GREEN_GLAZED_TERRACOTTA, 1, 1, 12, 15), new VillagerTrades.ItemsForEmeralds(Blocks.CYAN_GLAZED_TERRACOTTA, 1, 1, 12, 15), new VillagerTrades.ItemsForEmeralds(Blocks.PURPLE_GLAZED_TERRACOTTA, 1, 1, 12, 15), new VillagerTrades.ItemsForEmeralds(Blocks.YELLOW_GLAZED_TERRACOTTA, 1, 1, 12, 15), new VillagerTrades.ItemsForEmeralds(Blocks.BROWN_GLAZED_TERRACOTTA, 1, 1, 12, 15)}, 5, new VillagerTrades.ItemListing[]{new VillagerTrades.ItemsForEmeralds(Blocks.QUARTZ_PILLAR, 1, 1, 12, 30), new VillagerTrades.ItemsForEmeralds(Blocks.QUARTZ_BLOCK, 1, 1, 12, 30)})));
+        map.put(VillagerProfession.FARMER, toIntMap(ImmutableMap.of(Integer.valueOf(1), new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.WHEAT, 20, 16, 2), new VillagerTrades.EmeraldForItems(Items.POTATO, 26, 16, 2), new VillagerTrades.EmeraldForItems(Items.CARROT, 22, 16, 2), new VillagerTrades.EmeraldForItems(Items.BEETROOT, 15, 16, 2), new VillagerTrades.ItemsForEmeralds(Items.BREAD, 1, 6, 16, 1)}, Integer.valueOf(2), new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Blocks.PUMPKIN, 6, 12, 10), new VillagerTrades.ItemsForEmeralds(Items.PUMPKIN_PIE, 1, 4, 5), new VillagerTrades.ItemsForEmeralds(Items.APPLE, 1, 4, 16, 5)}, Integer.valueOf(3), new VillagerTrades.ItemListing[]{new VillagerTrades.ItemsForEmeralds(Items.COOKIE, 3, 18, 10), new VillagerTrades.EmeraldForItems(Blocks.MELON, 4, 12, 20)}, Integer.valueOf(4), new VillagerTrades.ItemListing[]{new VillagerTrades.ItemsForEmeralds(Blocks.CAKE, 1, 1, 12, 15), new VillagerTrades.SuspiciousStewForEmerald(MobEffects.NIGHT_VISION, 100, 15), new VillagerTrades.SuspiciousStewForEmerald(MobEffects.JUMP, 160, 15), new VillagerTrades.SuspiciousStewForEmerald(MobEffects.WEAKNESS, 140, 15), new VillagerTrades.SuspiciousStewForEmerald(MobEffects.BLINDNESS, 120, 15), new VillagerTrades.SuspiciousStewForEmerald(MobEffects.POISON, 280, 15), new VillagerTrades.SuspiciousStewForEmerald(MobEffects.SATURATION, 7, 15)}, Integer.valueOf(5), new VillagerTrades.ItemListing[]{new VillagerTrades.ItemsForEmeralds(Items.GOLDEN_CARROT, 3, 3, 30), new VillagerTrades.ItemsForEmeralds(Items.GLISTERING_MELON_SLICE, 4, 3, 30)})));
+        map.put(VillagerProfession.FISHERMAN, toIntMap(ImmutableMap.of(Integer.valueOf(1), new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.STRING, 20, 16, 2), new VillagerTrades.EmeraldForItems(Items.COAL, 10, 16, 2), new VillagerTrades.ItemsAndEmeraldsToItems(Items.COD, 6, Items.COOKED_COD, 6, 16, 1), new VillagerTrades.ItemsForEmeralds(Items.COD_BUCKET, 3, 1, 16, 1)}, Integer.valueOf(2), new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.COD, 15, 16, 10), new VillagerTrades.ItemsAndEmeraldsToItems(Items.SALMON, 6, Items.COOKED_SALMON, 6, 16, 5), new VillagerTrades.ItemsForEmeralds(Items.CAMPFIRE, 2, 1, 5)}, Integer.valueOf(3), new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.SALMON, 13, 16, 20), new VillagerTrades.EnchantedItemForEmeralds(Items.FISHING_ROD, 3, 3, 10, 0.2F)}, Integer.valueOf(4), new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.TROPICAL_FISH, 6, 12, 30)}, Integer.valueOf(5), new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.PUFFERFISH, 4, 12, 30), new VillagerTrades.EmeraldsForVillagerTypeItem(1, 12, 30, ImmutableMap.<VillagerType, Item>builder().put(VillagerType.PLAINS, Items.OAK_BOAT).put(VillagerType.TAIGA, Items.SPRUCE_BOAT).put(VillagerType.SNOW, Items.SPRUCE_BOAT).put(VillagerType.DESERT, Items.JUNGLE_BOAT).put(VillagerType.JUNGLE, Items.JUNGLE_BOAT).put(VillagerType.SAVANNA, Items.ACACIA_BOAT).put(VillagerType.SWAMP, Items.DARK_OAK_BOAT).build())})));
+        map.put(VillagerProfession.SHEPHERD, toIntMap(ImmutableMap.of(Integer.valueOf(1), new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Blocks.WHITE_WOOL, 18, 16, 2), new VillagerTrades.EmeraldForItems(Blocks.BROWN_WOOL, 18, 16, 2), new VillagerTrades.EmeraldForItems(Blocks.BLACK_WOOL, 18, 16, 2), new VillagerTrades.EmeraldForItems(Blocks.GRAY_WOOL, 18, 16, 2), new VillagerTrades.ItemsForEmeralds(Items.SHEARS, 2, 1, 1)}, Integer.valueOf(2), new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.WHITE_DYE, 12, 16, 10), new VillagerTrades.EmeraldForItems(Items.GRAY_DYE, 12, 16, 10), new VillagerTrades.EmeraldForItems(Items.BLACK_DYE, 12, 16, 10), new VillagerTrades.EmeraldForItems(Items.LIGHT_BLUE_DYE, 12, 16, 10), new VillagerTrades.EmeraldForItems(Items.LIME_DYE, 12, 16, 10), new VillagerTrades.ItemsForEmeralds(Blocks.WHITE_WOOL, 1, 1, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.ORANGE_WOOL, 1, 1, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.MAGENTA_WOOL, 1, 1, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.LIGHT_BLUE_WOOL, 1, 1, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.YELLOW_WOOL, 1, 1, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.LIME_WOOL, 1, 1, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.PINK_WOOL, 1, 1, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.GRAY_WOOL, 1, 1, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.LIGHT_GRAY_WOOL, 1, 1, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.CYAN_WOOL, 1, 1, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.PURPLE_WOOL, 1, 1, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.BLUE_WOOL, 1, 1, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.BROWN_WOOL, 1, 1, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.GREEN_WOOL, 1, 1, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.RED_WOOL, 1, 1, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.BLACK_WOOL, 1, 1, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.WHITE_CARPET, 1, 4, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.ORANGE_CARPET, 1, 4, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.MAGENTA_CARPET, 1, 4, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.LIGHT_BLUE_CARPET, 1, 4, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.YELLOW_CARPET, 1, 4, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.LIME_CARPET, 1, 4, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.PINK_CARPET, 1, 4, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.GRAY_CARPET, 1, 4, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.LIGHT_GRAY_CARPET, 1, 4, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.CYAN_CARPET, 1, 4, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.PURPLE_CARPET, 1, 4, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.BLUE_CARPET, 1, 4, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.BROWN_CARPET, 1, 4, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.GREEN_CARPET, 1, 4, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.RED_CARPET, 1, 4, 16, 5), new VillagerTrades.ItemsForEmeralds(Blocks.BLACK_CARPET, 1, 4, 16, 5)}, Integer.valueOf(3), new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.YELLOW_DYE, 12, 16, 20), new VillagerTrades.EmeraldForItems(Items.LIGHT_GRAY_DYE, 12, 16, 20), new VillagerTrades.EmeraldForItems(Items.ORANGE_DYE, 12, 16, 20), new VillagerTrades.EmeraldForItems(Items.RED_DYE, 12, 16, 20), new VillagerTrades.EmeraldForItems(Items.PINK_DYE, 12, 16, 20), new VillagerTrades.ItemsForEmeralds(Blocks.WHITE_BED, 3, 1, 12, 10), new VillagerTrades.ItemsForEmeralds(Blocks.YELLOW_BED, 3, 1, 12, 10), new VillagerTrades.ItemsForEmeralds(Blocks.RED_BED, 3, 1, 12, 10), new VillagerTrades.ItemsForEmeralds(Blocks.BLACK_BED, 3, 1, 12, 10), new VillagerTrades.ItemsForEmeralds(Blocks.BLUE_BED, 3, 1, 12, 10), new VillagerTrades.ItemsForEmeralds(Blocks.BROWN_BED, 3, 1, 12, 10), new VillagerTrades.ItemsForEmeralds(Blocks.CYAN_BED, 3, 1, 12, 10), new VillagerTrades.ItemsForEmeralds(Blocks.GRAY_BED, 3, 1, 12, 10), new VillagerTrades.ItemsForEmeralds(Blocks.GREEN_BED, 3, 1, 12, 10), new VillagerTrades.ItemsForEmeralds(Blocks.LIGHT_BLUE_BED, 3, 1, 12, 10), new VillagerTrades.ItemsForEmeralds(Blocks.LIGHT_GRAY_BED, 3, 1, 12, 10), new VillagerTrades.ItemsForEmeralds(Blocks.LIME_BED, 3, 1, 12, 10), new VillagerTrades.ItemsForEmeralds(Blocks.MAGENTA_BED, 3, 1, 12, 10), new VillagerTrades.ItemsForEmeralds(Blocks.ORANGE_BED, 3, 1, 12, 10), new VillagerTrades.ItemsForEmeralds(Blocks.PINK_BED, 3, 1, 12, 10), new VillagerTrades.ItemsForEmeralds(Blocks.PURPLE_BED, 3, 1, 12, 10)}, Integer.valueOf(4), new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.BROWN_DYE, 12, 16, 30), new VillagerTrades.EmeraldForItems(Items.PURPLE_DYE, 12, 16, 30), new VillagerTrades.EmeraldForItems(Items.BLUE_DYE, 12, 16, 30), new VillagerTrades.EmeraldForItems(Items.GREEN_DYE, 12, 16, 30), new VillagerTrades.EmeraldForItems(Items.MAGENTA_DYE, 12, 16, 30), new VillagerTrades.EmeraldForItems(Items.CYAN_DYE, 12, 16, 30), new VillagerTrades.ItemsForEmeralds(Items.WHITE_BANNER, 3, 1, 12, 15), new VillagerTrades.ItemsForEmeralds(Items.BLUE_BANNER, 3, 1, 12, 15), new VillagerTrades.ItemsForEmeralds(Items.LIGHT_BLUE_BANNER, 3, 1, 12, 15), new VillagerTrades.ItemsForEmeralds(Items.RED_BANNER, 3, 1, 12, 15), new VillagerTrades.ItemsForEmeralds(Items.PINK_BANNER, 3, 1, 12, 15), new VillagerTrades.ItemsForEmeralds(Items.GREEN_BANNER, 3, 1, 12, 15), new VillagerTrades.ItemsForEmeralds(Items.LIME_BANNER, 3, 1, 12, 15), new VillagerTrades.ItemsForEmeralds(Items.GRAY_BANNER, 3, 1, 12, 15), new VillagerTrades.ItemsForEmeralds(Items.BLACK_BANNER, 3, 1, 12, 15), new VillagerTrades.ItemsForEmeralds(Items.PURPLE_BANNER, 3, 1, 12, 15), new VillagerTrades.ItemsForEmeralds(Items.MAGENTA_BANNER, 3, 1, 12, 15), new VillagerTrades.ItemsForEmeralds(Items.CYAN_BANNER, 3, 1, 12, 15), new VillagerTrades.ItemsForEmeralds(Items.BROWN_BANNER, 3, 1, 12, 15), new VillagerTrades.ItemsForEmeralds(Items.YELLOW_BANNER, 3, 1, 12, 15), new VillagerTrades.ItemsForEmeralds(Items.ORANGE_BANNER, 3, 1, 12, 15), new VillagerTrades.ItemsForEmeralds(Items.LIGHT_GRAY_BANNER, 3, 1, 12, 15)}, Integer.valueOf(5), new VillagerTrades.ItemListing[]{new VillagerTrades.ItemsForEmeralds(Items.PAINTING, 2, 3, 30)})));
+        map.put(VillagerProfession.FLETCHER, toIntMap(ImmutableMap.of(Integer.valueOf(1), new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.STICK, 32, 16, 2), new VillagerTrades.ItemsForEmeralds(Items.ARROW, 1, 16, 1), new VillagerTrades.ItemsAndEmeraldsToItems(Blocks.GRAVEL, 10, Items.FLINT, 10, 12, 1)}, Integer.valueOf(2), new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.FLINT, 26, 12, 10), new VillagerTrades.ItemsForEmeralds(Items.BOW, 2, 1, 5)}, Integer.valueOf(3), new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.STRING, 14, 16, 20), new VillagerTrades.ItemsForEmeralds(Items.CROSSBOW, 3, 1, 10)}, Integer.valueOf(4), new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.FEATHER, 24, 16, 30), new VillagerTrades.EnchantedItemForEmeralds(Items.BOW, 2, 3, 15)}, Integer.valueOf(5), new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.TRIPWIRE_HOOK, 8, 12, 30), new VillagerTrades.EnchantedItemForEmeralds(Items.CROSSBOW, 3, 3, 15), new VillagerTrades.TippedArrowForItemsAndEmeralds(Items.ARROW, 5, Items.TIPPED_ARROW, 5, 2, 12, 30)})));
+        map.put(VillagerProfession.LIBRARIAN, toIntMap(ImmutableMap.<Integer, VillagerTrades.ItemListing[]>builder().put(Integer.valueOf(1), new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.PAPER, 24, 16, 2), new VillagerTrades.EnchantBookForEmeralds(1), new VillagerTrades.ItemsForEmeralds(Blocks.BOOKSHELF, 9, 1, 12, 1)}).put(Integer.valueOf(2), new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.BOOK, 4, 12, 10), new VillagerTrades.EnchantBookForEmeralds(5), new VillagerTrades.ItemsForEmeralds(Items.LANTERN, 1, 1, 5)}).put(Integer.valueOf(3), new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.INK_SAC, 5, 12, 20), new VillagerTrades.EnchantBookForEmeralds(10), new VillagerTrades.ItemsForEmeralds(Items.GLASS, 1, 4, 10)}).put(Integer.valueOf(4), new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.WRITABLE_BOOK, 2, 12, 30), new VillagerTrades.EnchantBookForEmeralds(15), new VillagerTrades.ItemsForEmeralds(Items.CLOCK, 5, 1, 15), new VillagerTrades.ItemsForEmeralds(Items.COMPASS, 4, 1, 15)}).put(Integer.valueOf(5), new VillagerTrades.ItemListing[]{new VillagerTrades.ItemsForEmeralds(Items.NAME_TAG, 20, 1, 30)}).build()));
+        map.put(VillagerProfession.CARTOGRAPHER, toIntMap(ImmutableMap.of(Integer.valueOf(1), new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.PAPER, 24, 16, 2), new VillagerTrades.ItemsForEmeralds(Items.MAP, 7, 1, 1)}, Integer.valueOf(2), new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.GLASS_PANE, 11, 16, 10), new VillagerTrades.TreasureMapForEmeralds(13, StructureTags.ON_OCEAN_EXPLORER_MAPS, "filled_map.monument", MapDecoration.Type.MONUMENT, 12, 5)}, Integer.valueOf(3), new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.COMPASS, 1, 12, 20), new VillagerTrades.TreasureMapForEmeralds(14, StructureTags.ON_WOODLAND_EXPLORER_MAPS, "filled_map.mansion", MapDecoration.Type.MANSION, 12, 10)}, Integer.valueOf(4), new VillagerTrades.ItemListing[]{new VillagerTrades.ItemsForEmeralds(Items.ITEM_FRAME, 7, 1, 15), new VillagerTrades.ItemsForEmeralds(Items.WHITE_BANNER, 3, 1, 15), new VillagerTrades.ItemsForEmeralds(Items.BLUE_BANNER, 3, 1, 15), new VillagerTrades.ItemsForEmeralds(Items.LIGHT_BLUE_BANNER, 3, 1, 15), new VillagerTrades.ItemsForEmeralds(Items.RED_BANNER, 3, 1, 15), new VillagerTrades.ItemsForEmeralds(Items.PINK_BANNER, 3, 1, 15), new VillagerTrades.ItemsForEmeralds(Items.GREEN_BANNER, 3, 1, 15), new VillagerTrades.ItemsForEmeralds(Items.LIME_BANNER, 3, 1, 15), new VillagerTrades.ItemsForEmeralds(Items.GRAY_BANNER, 3, 1, 15), new VillagerTrades.ItemsForEmeralds(Items.BLACK_BANNER, 3, 1, 15), new VillagerTrades.ItemsForEmeralds(Items.PURPLE_BANNER, 3, 1, 15), new VillagerTrades.ItemsForEmeralds(Items.MAGENTA_BANNER, 3, 1, 15), new VillagerTrades.ItemsForEmeralds(Items.CYAN_BANNER, 3, 1, 15), new VillagerTrades.ItemsForEmeralds(Items.BROWN_BANNER, 3, 1, 15), new VillagerTrades.ItemsForEmeralds(Items.YELLOW_BANNER, 3, 1, 15), new VillagerTrades.ItemsForEmeralds(Items.ORANGE_BANNER, 3, 1, 15), new VillagerTrades.ItemsForEmeralds(Items.LIGHT_GRAY_BANNER, 3, 1, 15)}, Integer.valueOf(5), new VillagerTrades.ItemListing[]{new VillagerTrades.ItemsForEmeralds(Items.GLOBE_BANNER_PATTERN, 8, 1, 30)})));
+        map.put(VillagerProfession.CLERIC, toIntMap(ImmutableMap.of(Integer.valueOf(1), new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.ROTTEN_FLESH, 32, 16, 2), new VillagerTrades.ItemsForEmeralds(Items.REDSTONE, 1, 2, 1)}, Integer.valueOf(2), new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.GOLD_INGOT, 3, 12, 10), new VillagerTrades.ItemsForEmeralds(Items.LAPIS_LAZULI, 1, 1, 5)}, Integer.valueOf(3), new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.RABBIT_FOOT, 2, 12, 20), new VillagerTrades.ItemsForEmeralds(Blocks.GLOWSTONE, 4, 1, 12, 10)}, Integer.valueOf(4), new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.SCUTE, 4, 12, 30), new VillagerTrades.EmeraldForItems(Items.GLASS_BOTTLE, 9, 12, 30), new VillagerTrades.ItemsForEmeralds(Items.ENDER_PEARL, 5, 1, 15)}, Integer.valueOf(5), new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.NETHER_WART, 22, 12, 30), new VillagerTrades.ItemsForEmeralds(Items.EXPERIENCE_BOTTLE, 3, 1, 30)})));
+        map.put(VillagerProfession.ARMORER, toIntMap(ImmutableMap.of(Integer.valueOf(1), new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.COAL, 15, 16, 2), new VillagerTrades.ItemsForEmeralds(new ItemStack(Items.IRON_LEGGINGS), 7, 1, 12, 1, 0.2F), new VillagerTrades.ItemsForEmeralds(new ItemStack(Items.IRON_BOOTS), 4, 1, 12, 1, 0.2F), new VillagerTrades.ItemsForEmeralds(new ItemStack(Items.IRON_HELMET), 5, 1, 12, 1, 0.2F), new VillagerTrades.ItemsForEmeralds(new ItemStack(Items.IRON_CHESTPLATE), 9, 1, 12, 1, 0.2F)}, Integer.valueOf(2), new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.IRON_INGOT, 4, 12, 10), new VillagerTrades.ItemsForEmeralds(new ItemStack(Items.BELL), 36, 1, 12, 5, 0.2F), new VillagerTrades.ItemsForEmeralds(new ItemStack(Items.CHAINMAIL_BOOTS), 1, 1, 12, 5, 0.2F), new VillagerTrades.ItemsForEmeralds(new ItemStack(Items.CHAINMAIL_LEGGINGS), 3, 1, 12, 5, 0.2F)}, Integer.valueOf(3), new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.LAVA_BUCKET, 1, 12, 20), new VillagerTrades.EmeraldForItems(Items.DIAMOND, 1, 12, 20), new VillagerTrades.ItemsForEmeralds(new ItemStack(Items.CHAINMAIL_HELMET), 1, 1, 12, 10, 0.2F), new VillagerTrades.ItemsForEmeralds(new ItemStack(Items.CHAINMAIL_CHESTPLATE), 4, 1, 12, 10, 0.2F), new VillagerTrades.ItemsForEmeralds(new ItemStack(Items.SHIELD), 5, 1, 12, 10, 0.2F)}, Integer.valueOf(4), new VillagerTrades.ItemListing[]{new VillagerTrades.EnchantedItemForEmeralds(Items.DIAMOND_LEGGINGS, 14, 3, 15, 0.2F), new VillagerTrades.EnchantedItemForEmeralds(Items.DIAMOND_BOOTS, 8, 3, 15, 0.2F)}, Integer.valueOf(5), new VillagerTrades.ItemListing[]{new VillagerTrades.EnchantedItemForEmeralds(Items.DIAMOND_HELMET, 8, 3, 30, 0.2F), new VillagerTrades.EnchantedItemForEmeralds(Items.DIAMOND_CHESTPLATE, 16, 3, 30, 0.2F)})));
+        map.put(VillagerProfession.WEAPONSMITH, toIntMap(ImmutableMap.of(Integer.valueOf(1), new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.COAL, 15, 16, 2), new VillagerTrades.ItemsForEmeralds(new ItemStack(Items.IRON_AXE), 3, 1, 12, 1, 0.2F), new VillagerTrades.EnchantedItemForEmeralds(Items.IRON_SWORD, 2, 3, 1)}, Integer.valueOf(2), new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.IRON_INGOT, 4, 12, 10), new VillagerTrades.ItemsForEmeralds(new ItemStack(Items.BELL), 36, 1, 12, 5, 0.2F)}, Integer.valueOf(3), new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.FLINT, 24, 12, 20)}, Integer.valueOf(4), new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.DIAMOND, 1, 12, 30), new VillagerTrades.EnchantedItemForEmeralds(Items.DIAMOND_AXE, 12, 3, 15, 0.2F)}, Integer.valueOf(5), new VillagerTrades.ItemListing[]{new VillagerTrades.EnchantedItemForEmeralds(Items.DIAMOND_SWORD, 8, 3, 30, 0.2F)})));
+        map.put(VillagerProfession.TOOLSMITH, toIntMap(ImmutableMap.of(Integer.valueOf(1), new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.COAL, 15, 16, 2), new VillagerTrades.ItemsForEmeralds(new ItemStack(Items.STONE_AXE), 1, 1, 12, 1, 0.2F), new VillagerTrades.ItemsForEmeralds(new ItemStack(Items.STONE_SHOVEL), 1, 1, 12, 1, 0.2F), new VillagerTrades.ItemsForEmeralds(new ItemStack(Items.STONE_PICKAXE), 1, 1, 12, 1, 0.2F), new VillagerTrades.ItemsForEmeralds(new ItemStack(Items.STONE_HOE), 1, 1, 12, 1, 0.2F)}, Integer.valueOf(2), new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.IRON_INGOT, 4, 12, 10), new VillagerTrades.ItemsForEmeralds(new ItemStack(Items.BELL), 36, 1, 12, 5, 0.2F)}, Integer.valueOf(3), new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.FLINT, 30, 12, 20), new VillagerTrades.EnchantedItemForEmeralds(Items.IRON_AXE, 1, 3, 10, 0.2F), new VillagerTrades.EnchantedItemForEmeralds(Items.IRON_SHOVEL, 2, 3, 10, 0.2F), new VillagerTrades.EnchantedItemForEmeralds(Items.IRON_PICKAXE, 3, 3, 10, 0.2F), new VillagerTrades.ItemsForEmeralds(new ItemStack(Items.DIAMOND_HOE), 4, 1, 3, 10, 0.2F)}, Integer.valueOf(4), new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.DIAMOND, 1, 12, 30), new VillagerTrades.EnchantedItemForEmeralds(Items.DIAMOND_AXE, 12, 3, 15, 0.2F), new VillagerTrades.EnchantedItemForEmeralds(Items.DIAMOND_SHOVEL, 5, 3, 15, 0.2F)}, Integer.valueOf(5), new VillagerTrades.ItemListing[]{new VillagerTrades.EnchantedItemForEmeralds(Items.DIAMOND_PICKAXE, 13, 3, 30, 0.2F)})));
+        map.put(VillagerProfession.BUTCHER, toIntMap(ImmutableMap.of(Integer.valueOf(1), new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.CHICKEN, 14, 16, 2), new VillagerTrades.EmeraldForItems(Items.PORKCHOP, 7, 16, 2), new VillagerTrades.EmeraldForItems(Items.RABBIT, 4, 16, 2), new VillagerTrades.ItemsForEmeralds(Items.RABBIT_STEW, 1, 1, 1)}, Integer.valueOf(2), new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.COAL, 15, 16, 2), new VillagerTrades.ItemsForEmeralds(Items.COOKED_PORKCHOP, 1, 5, 16, 5), new VillagerTrades.ItemsForEmeralds(Items.COOKED_CHICKEN, 1, 8, 16, 5)}, Integer.valueOf(3), new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.MUTTON, 7, 16, 20), new VillagerTrades.EmeraldForItems(Items.BEEF, 10, 16, 20)}, Integer.valueOf(4), new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.DRIED_KELP_BLOCK, 10, 12, 30)}, Integer.valueOf(5), new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.SWEET_BERRIES, 10, 12, 30)})));
+        map.put(VillagerProfession.LEATHERWORKER, toIntMap(ImmutableMap.of(Integer.valueOf(1), new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.LEATHER, 6, 16, 2), new VillagerTrades.DyedArmorForEmeralds(Items.LEATHER_LEGGINGS, 3), new VillagerTrades.DyedArmorForEmeralds(Items.LEATHER_CHESTPLATE, 7)}, Integer.valueOf(2), new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.FLINT, 26, 12, 10), new VillagerTrades.DyedArmorForEmeralds(Items.LEATHER_HELMET, 5, 12, 5), new VillagerTrades.DyedArmorForEmeralds(Items.LEATHER_BOOTS, 4, 12, 5)}, Integer.valueOf(3), new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.RABBIT_HIDE, 9, 12, 20), new VillagerTrades.DyedArmorForEmeralds(Items.LEATHER_CHESTPLATE, 7)}, Integer.valueOf(4), new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.SCUTE, 4, 12, 30), new VillagerTrades.DyedArmorForEmeralds(Items.LEATHER_HORSE_ARMOR, 6, 12, 15)}, Integer.valueOf(5), new VillagerTrades.ItemListing[]{new VillagerTrades.ItemsForEmeralds(new ItemStack(Items.SADDLE), 6, 1, 12, 30, 0.2F), new VillagerTrades.DyedArmorForEmeralds(Items.LEATHER_HELMET, 5, 12, 30)})));
+        map.put(VillagerProfession.MASON, toIntMap(ImmutableMap.of(Integer.valueOf(1), new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.CLAY_BALL, 10, 16, 2), new VillagerTrades.ItemsForEmeralds(Items.BRICK, 1, 10, 16, 1)}, Integer.valueOf(2), new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Blocks.STONE, 20, 16, 10), new VillagerTrades.ItemsForEmeralds(Blocks.CHISELED_STONE_BRICKS, 1, 4, 16, 5)}, Integer.valueOf(3), new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Blocks.GRANITE, 16, 16, 20), new VillagerTrades.EmeraldForItems(Blocks.ANDESITE, 16, 16, 20), new VillagerTrades.EmeraldForItems(Blocks.DIORITE, 16, 16, 20), new VillagerTrades.ItemsForEmeralds(Blocks.DRIPSTONE_BLOCK, 1, 4, 16, 10), new VillagerTrades.ItemsForEmeralds(Blocks.POLISHED_ANDESITE, 1, 4, 16, 10), new VillagerTrades.ItemsForEmeralds(Blocks.POLISHED_DIORITE, 1, 4, 16, 10), new VillagerTrades.ItemsForEmeralds(Blocks.POLISHED_GRANITE, 1, 4, 16, 10)}, Integer.valueOf(4), new VillagerTrades.ItemListing[]{new VillagerTrades.EmeraldForItems(Items.QUARTZ, 12, 12, 30), new VillagerTrades.ItemsForEmeralds(Blocks.ORANGE_TERRACOTTA, 1, 1, 12, 15), new VillagerTrades.ItemsForEmeralds(Blocks.WHITE_TERRACOTTA, 1, 1, 12, 15), new VillagerTrades.ItemsForEmeralds(Blocks.BLUE_TERRACOTTA, 1, 1, 12, 15), new VillagerTrades.ItemsForEmeralds(Blocks.LIGHT_BLUE_TERRACOTTA, 1, 1, 12, 15), new VillagerTrades.ItemsForEmeralds(Blocks.GRAY_TERRACOTTA, 1, 1, 12, 15), new VillagerTrades.ItemsForEmeralds(Blocks.LIGHT_GRAY_TERRACOTTA, 1, 1, 12, 15), new VillagerTrades.ItemsForEmeralds(Blocks.BLACK_TERRACOTTA, 1, 1, 12, 15), new VillagerTrades.ItemsForEmeralds(Blocks.RED_TERRACOTTA, 1, 1, 12, 15), new VillagerTrades.ItemsForEmeralds(Blocks.PINK_TERRACOTTA, 1, 1, 12, 15), new VillagerTrades.ItemsForEmeralds(Blocks.MAGENTA_TERRACOTTA, 1, 1, 12, 15), new VillagerTrades.ItemsForEmeralds(Blocks.LIME_TERRACOTTA, 1, 1, 12, 15), new VillagerTrades.ItemsForEmeralds(Blocks.GREEN_TERRACOTTA, 1, 1, 12, 15), new VillagerTrades.ItemsForEmeralds(Blocks.CYAN_TERRACOTTA, 1, 1, 12, 15), new VillagerTrades.ItemsForEmeralds(Blocks.PURPLE_TERRACOTTA, 1, 1, 12, 15), new VillagerTrades.ItemsForEmeralds(Blocks.YELLOW_TERRACOTTA, 1, 1, 12, 15), new VillagerTrades.ItemsForEmeralds(Blocks.BROWN_TERRACOTTA, 1, 1, 12, 15), new VillagerTrades.ItemsForEmeralds(Blocks.ORANGE_GLAZED_TERRACOTTA, 1, 1, 12, 15), new VillagerTrades.ItemsForEmeralds(Blocks.WHITE_GLAZED_TERRACOTTA, 1, 1, 12, 15), new VillagerTrades.ItemsForEmeralds(Blocks.BLUE_GLAZED_TERRACOTTA, 1, 1, 12, 15), new VillagerTrades.ItemsForEmeralds(Blocks.LIGHT_BLUE_GLAZED_TERRACOTTA, 1, 1, 12, 15), new VillagerTrades.ItemsForEmeralds(Blocks.GRAY_GLAZED_TERRACOTTA, 1, 1, 12, 15), new VillagerTrades.ItemsForEmeralds(Blocks.LIGHT_GRAY_GLAZED_TERRACOTTA, 1, 1, 12, 15), new VillagerTrades.ItemsForEmeralds(Blocks.BLACK_GLAZED_TERRACOTTA, 1, 1, 12, 15), new VillagerTrades.ItemsForEmeralds(Blocks.RED_GLAZED_TERRACOTTA, 1, 1, 12, 15), new VillagerTrades.ItemsForEmeralds(Blocks.PINK_GLAZED_TERRACOTTA, 1, 1, 12, 15), new VillagerTrades.ItemsForEmeralds(Blocks.MAGENTA_GLAZED_TERRACOTTA, 1, 1, 12, 15), new VillagerTrades.ItemsForEmeralds(Blocks.LIME_GLAZED_TERRACOTTA, 1, 1, 12, 15), new VillagerTrades.ItemsForEmeralds(Blocks.GREEN_GLAZED_TERRACOTTA, 1, 1, 12, 15), new VillagerTrades.ItemsForEmeralds(Blocks.CYAN_GLAZED_TERRACOTTA, 1, 1, 12, 15), new VillagerTrades.ItemsForEmeralds(Blocks.PURPLE_GLAZED_TERRACOTTA, 1, 1, 12, 15), new VillagerTrades.ItemsForEmeralds(Blocks.YELLOW_GLAZED_TERRACOTTA, 1, 1, 12, 15), new VillagerTrades.ItemsForEmeralds(Blocks.BROWN_GLAZED_TERRACOTTA, 1, 1, 12, 15)}, Integer.valueOf(5), new VillagerTrades.ItemListing[]{new VillagerTrades.ItemsForEmeralds(Blocks.QUARTZ_PILLAR, 1, 1, 12, 30), new VillagerTrades.ItemsForEmeralds(Blocks.QUARTZ_BLOCK, 1, 1, 12, 30)})));
     });
-    public static final Int2ObjectMap<VillagerTrades.ItemListing[]> WANDERING_TRADER_TRADES = toIntMap(ImmutableMap.of(1, new VillagerTrades.ItemListing[]{new VillagerTrades.ItemsForEmeralds(Items.SEA_PICKLE, 2, 1, 5, 1), new VillagerTrades.ItemsForEmeralds(Items.SLIME_BALL, 4, 1, 5, 1), new VillagerTrades.ItemsForEmeralds(Items.GLOWSTONE, 2, 1, 5, 1), new VillagerTrades.ItemsForEmeralds(Items.NAUTILUS_SHELL, 5, 1, 5, 1), new VillagerTrades.ItemsForEmeralds(Items.FERN, 1, 1, 12, 1), new VillagerTrades.ItemsForEmeralds(Items.SUGAR_CANE, 1, 1, 8, 1), new VillagerTrades.ItemsForEmeralds(Items.PUMPKIN, 1, 1, 4, 1), new VillagerTrades.ItemsForEmeralds(Items.KELP, 3, 1, 12, 1), new VillagerTrades.ItemsForEmeralds(Items.CACTUS, 3, 1, 8, 1), new VillagerTrades.ItemsForEmeralds(Items.DANDELION, 1, 1, 12, 1), new VillagerTrades.ItemsForEmeralds(Items.POPPY, 1, 1, 12, 1), new VillagerTrades.ItemsForEmeralds(Items.BLUE_ORCHID, 1, 1, 8, 1), new VillagerTrades.ItemsForEmeralds(Items.ALLIUM, 1, 1, 12, 1), new VillagerTrades.ItemsForEmeralds(Items.AZURE_BLUET, 1, 1, 12, 1), new VillagerTrades.ItemsForEmeralds(Items.RED_TULIP, 1, 1, 12, 1), new VillagerTrades.ItemsForEmeralds(Items.ORANGE_TULIP, 1, 1, 12, 1), new VillagerTrades.ItemsForEmeralds(Items.WHITE_TULIP, 1, 1, 12, 1), new VillagerTrades.ItemsForEmeralds(Items.PINK_TULIP, 1, 1, 12, 1), new VillagerTrades.ItemsForEmeralds(Items.OXEYE_DAISY, 1, 1, 12, 1), new VillagerTrades.ItemsForEmeralds(Items.CORNFLOWER, 1, 1, 12, 1), new VillagerTrades.ItemsForEmeralds(Items.LILY_OF_THE_VALLEY, 1, 1, 7, 1), new VillagerTrades.ItemsForEmeralds(Items.WHEAT_SEEDS, 1, 1, 12, 1), new VillagerTrades.ItemsForEmeralds(Items.BEETROOT_SEEDS, 1, 1, 12, 1), new VillagerTrades.ItemsForEmeralds(Items.PUMPKIN_SEEDS, 1, 1, 12, 1), new VillagerTrades.ItemsForEmeralds(Items.MELON_SEEDS, 1, 1, 12, 1), new VillagerTrades.ItemsForEmeralds(Items.ACACIA_SAPLING, 5, 1, 8, 1), new VillagerTrades.ItemsForEmeralds(Items.BIRCH_SAPLING, 5, 1, 8, 1), new VillagerTrades.ItemsForEmeralds(Items.DARK_OAK_SAPLING, 5, 1, 8, 1), new VillagerTrades.ItemsForEmeralds(Items.JUNGLE_SAPLING, 5, 1, 8, 1), new VillagerTrades.ItemsForEmeralds(Items.OAK_SAPLING, 5, 1, 8, 1), new VillagerTrades.ItemsForEmeralds(Items.SPRUCE_SAPLING, 5, 1, 8, 1), new VillagerTrades.ItemsForEmeralds(Items.MANGROVE_PROPAGULE, 5, 1, 8, 1), new VillagerTrades.ItemsForEmeralds(Items.RED_DYE, 1, 3, 12, 1), new VillagerTrades.ItemsForEmeralds(Items.WHITE_DYE, 1, 3, 12, 1), new VillagerTrades.ItemsForEmeralds(Items.BLUE_DYE, 1, 3, 12, 1), new VillagerTrades.ItemsForEmeralds(Items.PINK_DYE, 1, 3, 12, 1), new VillagerTrades.ItemsForEmeralds(Items.BLACK_DYE, 1, 3, 12, 1), new VillagerTrades.ItemsForEmeralds(Items.GREEN_DYE, 1, 3, 12, 1), new VillagerTrades.ItemsForEmeralds(Items.LIGHT_GRAY_DYE, 1, 3, 12, 1), new VillagerTrades.ItemsForEmeralds(Items.MAGENTA_DYE, 1, 3, 12, 1), new VillagerTrades.ItemsForEmeralds(Items.YELLOW_DYE, 1, 3, 12, 1), new VillagerTrades.ItemsForEmeralds(Items.GRAY_DYE, 1, 3, 12, 1), new VillagerTrades.ItemsForEmeralds(Items.PURPLE_DYE, 1, 3, 12, 1), new VillagerTrades.ItemsForEmeralds(Items.LIGHT_BLUE_DYE, 1, 3, 12, 1), new VillagerTrades.ItemsForEmeralds(Items.LIME_DYE, 1, 3, 12, 1), new VillagerTrades.ItemsForEmeralds(Items.ORANGE_DYE, 1, 3, 12, 1), new VillagerTrades.ItemsForEmeralds(Items.BROWN_DYE, 1, 3, 12, 1), new VillagerTrades.ItemsForEmeralds(Items.CYAN_DYE, 1, 3, 12, 1), new VillagerTrades.ItemsForEmeralds(Items.BRAIN_CORAL_BLOCK, 3, 1, 8, 1), new VillagerTrades.ItemsForEmeralds(Items.BUBBLE_CORAL_BLOCK, 3, 1, 8, 1), new VillagerTrades.ItemsForEmeralds(Items.FIRE_CORAL_BLOCK, 3, 1, 8, 1), new VillagerTrades.ItemsForEmeralds(Items.HORN_CORAL_BLOCK, 3, 1, 8, 1), new VillagerTrades.ItemsForEmeralds(Items.TUBE_CORAL_BLOCK, 3, 1, 8, 1), new VillagerTrades.ItemsForEmeralds(Items.VINE, 1, 1, 12, 1), new VillagerTrades.ItemsForEmeralds(Items.BROWN_MUSHROOM, 1, 1, 12, 1), new VillagerTrades.ItemsForEmeralds(Items.RED_MUSHROOM, 1, 1, 12, 1), new VillagerTrades.ItemsForEmeralds(Items.LILY_PAD, 1, 2, 5, 1), new VillagerTrades.ItemsForEmeralds(Items.SMALL_DRIPLEAF, 1, 2, 5, 1), new VillagerTrades.ItemsForEmeralds(Items.SAND, 1, 8, 8, 1), new VillagerTrades.ItemsForEmeralds(Items.RED_SAND, 1, 4, 6, 1), new VillagerTrades.ItemsForEmeralds(Items.POINTED_DRIPSTONE, 1, 2, 5, 1), new VillagerTrades.ItemsForEmeralds(Items.ROOTED_DIRT, 1, 2, 5, 1), new VillagerTrades.ItemsForEmeralds(Items.MOSS_BLOCK, 1, 2, 5, 1)}, 2, new VillagerTrades.ItemListing[]{new VillagerTrades.ItemsForEmeralds(Items.TROPICAL_FISH_BUCKET, 5, 1, 4, 1), new VillagerTrades.ItemsForEmeralds(Items.PUFFERFISH_BUCKET, 5, 1, 4, 1), new VillagerTrades.ItemsForEmeralds(Items.PACKED_ICE, 3, 1, 6, 1), new VillagerTrades.ItemsForEmeralds(Items.BLUE_ICE, 6, 1, 6, 1), new VillagerTrades.ItemsForEmeralds(Items.GUNPOWDER, 1, 1, 8, 1), new VillagerTrades.ItemsForEmeralds(Items.PODZOL, 3, 3, 6, 1)}));
+    public static final Int2ObjectMap<VillagerTrades.ItemListing[]> WANDERING_TRADER_TRADES = toIntMap(ImmutableMap.of(Integer.valueOf(1), new VillagerTrades.ItemListing[]{new VillagerTrades.ItemsForEmeralds(Items.SEA_PICKLE, 2, 1, 5, 1), new VillagerTrades.ItemsForEmeralds(Items.SLIME_BALL, 4, 1, 5, 1), new VillagerTrades.ItemsForEmeralds(Items.GLOWSTONE, 2, 1, 5, 1), new VillagerTrades.ItemsForEmeralds(Items.NAUTILUS_SHELL, 5, 1, 5, 1), new VillagerTrades.ItemsForEmeralds(Items.FERN, 1, 1, 12, 1), new VillagerTrades.ItemsForEmeralds(Items.SUGAR_CANE, 1, 1, 8, 1), new VillagerTrades.ItemsForEmeralds(Items.PUMPKIN, 1, 1, 4, 1), new VillagerTrades.ItemsForEmeralds(Items.KELP, 3, 1, 12, 1), new VillagerTrades.ItemsForEmeralds(Items.CACTUS, 3, 1, 8, 1), new VillagerTrades.ItemsForEmeralds(Items.DANDELION, 1, 1, 12, 1), new VillagerTrades.ItemsForEmeralds(Items.POPPY, 1, 1, 12, 1), new VillagerTrades.ItemsForEmeralds(Items.BLUE_ORCHID, 1, 1, 8, 1), new VillagerTrades.ItemsForEmeralds(Items.ALLIUM, 1, 1, 12, 1), new VillagerTrades.ItemsForEmeralds(Items.AZURE_BLUET, 1, 1, 12, 1), new VillagerTrades.ItemsForEmeralds(Items.RED_TULIP, 1, 1, 12, 1), new VillagerTrades.ItemsForEmeralds(Items.ORANGE_TULIP, 1, 1, 12, 1), new VillagerTrades.ItemsForEmeralds(Items.WHITE_TULIP, 1, 1, 12, 1), new VillagerTrades.ItemsForEmeralds(Items.PINK_TULIP, 1, 1, 12, 1), new VillagerTrades.ItemsForEmeralds(Items.OXEYE_DAISY, 1, 1, 12, 1), new VillagerTrades.ItemsForEmeralds(Items.CORNFLOWER, 1, 1, 12, 1), new VillagerTrades.ItemsForEmeralds(Items.LILY_OF_THE_VALLEY, 1, 1, 7, 1), new VillagerTrades.ItemsForEmeralds(Items.WHEAT_SEEDS, 1, 1, 12, 1), new VillagerTrades.ItemsForEmeralds(Items.BEETROOT_SEEDS, 1, 1, 12, 1), new VillagerTrades.ItemsForEmeralds(Items.PUMPKIN_SEEDS, 1, 1, 12, 1), new VillagerTrades.ItemsForEmeralds(Items.MELON_SEEDS, 1, 1, 12, 1), new VillagerTrades.ItemsForEmeralds(Items.ACACIA_SAPLING, 5, 1, 8, 1), new VillagerTrades.ItemsForEmeralds(Items.BIRCH_SAPLING, 5, 1, 8, 1), new VillagerTrades.ItemsForEmeralds(Items.DARK_OAK_SAPLING, 5, 1, 8, 1), new VillagerTrades.ItemsForEmeralds(Items.JUNGLE_SAPLING, 5, 1, 8, 1), new VillagerTrades.ItemsForEmeralds(Items.OAK_SAPLING, 5, 1, 8, 1), new VillagerTrades.ItemsForEmeralds(Items.SPRUCE_SAPLING, 5, 1, 8, 1), new VillagerTrades.ItemsForEmeralds(Items.MANGROVE_PROPAGULE, 5, 1, 8, 1), new VillagerTrades.ItemsForEmeralds(Items.RED_DYE, 1, 3, 12, 1), new VillagerTrades.ItemsForEmeralds(Items.WHITE_DYE, 1, 3, 12, 1), new VillagerTrades.ItemsForEmeralds(Items.BLUE_DYE, 1, 3, 12, 1), new VillagerTrades.ItemsForEmeralds(Items.PINK_DYE, 1, 3, 12, 1), new VillagerTrades.ItemsForEmeralds(Items.BLACK_DYE, 1, 3, 12, 1), new VillagerTrades.ItemsForEmeralds(Items.GREEN_DYE, 1, 3, 12, 1), new VillagerTrades.ItemsForEmeralds(Items.LIGHT_GRAY_DYE, 1, 3, 12, 1), new VillagerTrades.ItemsForEmeralds(Items.MAGENTA_DYE, 1, 3, 12, 1), new VillagerTrades.ItemsForEmeralds(Items.YELLOW_DYE, 1, 3, 12, 1), new VillagerTrades.ItemsForEmeralds(Items.GRAY_DYE, 1, 3, 12, 1), new VillagerTrades.ItemsForEmeralds(Items.PURPLE_DYE, 1, 3, 12, 1), new VillagerTrades.ItemsForEmeralds(Items.LIGHT_BLUE_DYE, 1, 3, 12, 1), new VillagerTrades.ItemsForEmeralds(Items.LIME_DYE, 1, 3, 12, 1), new VillagerTrades.ItemsForEmeralds(Items.ORANGE_DYE, 1, 3, 12, 1), new VillagerTrades.ItemsForEmeralds(Items.BROWN_DYE, 1, 3, 12, 1), new VillagerTrades.ItemsForEmeralds(Items.CYAN_DYE, 1, 3, 12, 1), new VillagerTrades.ItemsForEmeralds(Items.BRAIN_CORAL_BLOCK, 3, 1, 8, 1), new VillagerTrades.ItemsForEmeralds(Items.BUBBLE_CORAL_BLOCK, 3, 1, 8, 1), new VillagerTrades.ItemsForEmeralds(Items.FIRE_CORAL_BLOCK, 3, 1, 8, 1), new VillagerTrades.ItemsForEmeralds(Items.HORN_CORAL_BLOCK, 3, 1, 8, 1), new VillagerTrades.ItemsForEmeralds(Items.TUBE_CORAL_BLOCK, 3, 1, 8, 1), new VillagerTrades.ItemsForEmeralds(Items.VINE, 1, 1, 12, 1), new VillagerTrades.ItemsForEmeralds(Items.BROWN_MUSHROOM, 1, 1, 12, 1), new VillagerTrades.ItemsForEmeralds(Items.RED_MUSHROOM, 1, 1, 12, 1), new VillagerTrades.ItemsForEmeralds(Items.LILY_PAD, 1, 2, 5, 1), new VillagerTrades.ItemsForEmeralds(Items.SMALL_DRIPLEAF, 1, 2, 5, 1), new VillagerTrades.ItemsForEmeralds(Items.SAND, 1, 8, 8, 1), new VillagerTrades.ItemsForEmeralds(Items.RED_SAND, 1, 4, 6, 1), new VillagerTrades.ItemsForEmeralds(Items.POINTED_DRIPSTONE, 1, 2, 5, 1), new VillagerTrades.ItemsForEmeralds(Items.ROOTED_DIRT, 1, 2, 5, 1), new VillagerTrades.ItemsForEmeralds(Items.MOSS_BLOCK, 1, 2, 5, 1)}, Integer.valueOf(2), new VillagerTrades.ItemListing[]{new VillagerTrades.ItemsForEmeralds(Items.TROPICAL_FISH_BUCKET, 5, 1, 4, 1), new VillagerTrades.ItemsForEmeralds(Items.PUFFERFISH_BUCKET, 5, 1, 4, 1), new VillagerTrades.ItemsForEmeralds(Items.PACKED_ICE, 3, 1, 6, 1), new VillagerTrades.ItemsForEmeralds(Items.BLUE_ICE, 6, 1, 6, 1), new VillagerTrades.ItemsForEmeralds(Items.GUNPOWDER, 1, 1, 8, 1), new VillagerTrades.ItemsForEmeralds(Items.PODZOL, 3, 3, 6, 1)}));
 
     private static Int2ObjectMap<VillagerTrades.ItemListing[]> toIntMap(ImmutableMap<Integer, VillagerTrades.ItemListing[]> map) {
         return new Int2ObjectOpenHashMap<>(map);
diff --git a/src/main/java/net/minecraft/world/entity/player/Inventory.java b/src/main/java/net/minecraft/world/entity/player/Inventory.java
index 5bc033bf59d49eda1f8f2574165bbcbeab7faa0f..fff74ea2cb90451cadc96af04ace3b22863378fb 100644
--- a/src/main/java/net/minecraft/world/entity/player/Inventory.java
+++ b/src/main/java/net/minecraft/world/entity/player/Inventory.java
@@ -379,8 +379,8 @@ public class Inventory implements Container, Nameable {
                 CrashReport crashreport = CrashReport.forThrowable(throwable, "Adding item to inventory");
                 CrashReportCategory crashreportsystemdetails = crashreport.addCategory("Item being added");
 
-                crashreportsystemdetails.setDetail("Item ID", (Object) Item.getId(stack.getItem()));
-                crashreportsystemdetails.setDetail("Item data", (Object) stack.getDamageValue());
+                crashreportsystemdetails.setDetail("Item ID", Integer.valueOf(Item.getId(stack.getItem())));
+                crashreportsystemdetails.setDetail("Item data", Integer.valueOf(stack.getDamageValue()));
                 crashreportsystemdetails.setDetail("Item name", () -> {
                     return stack.getHoverName().getString();
                 });
diff --git a/src/main/java/net/minecraft/world/entity/player/Player.java b/src/main/java/net/minecraft/world/entity/player/Player.java
index 8f573d603eb8c2b4d73d0800584c661b76c8e2de..cea85533199f0164ef90f6d7e0e3232e6f53a5c1 100644
--- a/src/main/java/net/minecraft/world/entity/player/Player.java
+++ b/src/main/java/net/minecraft/world/entity/player/Player.java
@@ -227,10 +227,10 @@ public abstract class Player extends LivingEntity {
     @Override
     protected void defineSynchedData() {
         super.defineSynchedData();
-        this.entityData.define(Player.DATA_PLAYER_ABSORPTION_ID, 0.0F);
-        this.entityData.define(Player.DATA_SCORE_ID, 0);
-        this.entityData.define(Player.DATA_PLAYER_MODE_CUSTOMISATION, (byte) 0);
-        this.entityData.define(Player.DATA_PLAYER_MAIN_HAND, (byte) 1);
+        this.entityData.define(Player.DATA_PLAYER_ABSORPTION_ID, Float.valueOf(0.0F));
+        this.entityData.define(Player.DATA_SCORE_ID, Integer.valueOf(0));
+        this.entityData.define(Player.DATA_PLAYER_MODE_CUSTOMISATION, Byte.valueOf((byte) 0));
+        this.entityData.define(Player.DATA_PLAYER_MAIN_HAND, Byte.valueOf((byte) 1));
         this.entityData.define(Player.DATA_SHOULDER_LEFT, new CompoundTag());
         this.entityData.define(Player.DATA_SHOULDER_RIGHT, new CompoundTag());
     }
@@ -630,13 +630,13 @@ public abstract class Player extends LivingEntity {
     }
 
     public void setScore(int score) {
-        this.entityData.set(Player.DATA_SCORE_ID, score);
+        this.entityData.set(Player.DATA_SCORE_ID, Integer.valueOf(score));
     }
 
     public void increaseScore(int score) {
         int j = this.getScore();
 
-        this.entityData.set(Player.DATA_SCORE_ID, j + score);
+        this.entityData.set(Player.DATA_SCORE_ID, Integer.valueOf(j + score));
     }
 
     public void startAutoSpinAttack(int riptideTicks) {
@@ -1551,7 +1551,7 @@ public abstract class Player extends LivingEntity {
             Optional<Vec3> optional = RespawnAnchorBlock.findStandUpPosition(EntityType.PLAYER, world, pos);
 
             if (!forced && !alive && optional.isPresent()) {
-                world.setBlock(pos, (BlockState) iblockdata.setValue(RespawnAnchorBlock.CHARGE, (Integer) iblockdata.getValue(RespawnAnchorBlock.CHARGE) - 1), 3);
+                world.setBlock(pos, (BlockState) iblockdata.setValue(RespawnAnchorBlock.CHARGE, Integer.valueOf((Integer) iblockdata.getValue(RespawnAnchorBlock.CHARGE) - 1)), 3);
             }
 
             return optional;
@@ -2156,7 +2156,7 @@ public abstract class Player extends LivingEntity {
             amount = 0.0F;
         }
 
-        this.getEntityData().set(Player.DATA_PLAYER_ABSORPTION_ID, amount);
+        this.getEntityData().set(Player.DATA_PLAYER_ABSORPTION_ID, Float.valueOf(amount));
     }
 
     @Override
@@ -2198,7 +2198,7 @@ public abstract class Player extends LivingEntity {
     }
 
     public void setMainArm(HumanoidArm arm) {
-        this.entityData.set(Player.DATA_PLAYER_MAIN_HAND, (byte) (arm == HumanoidArm.LEFT ? 0 : 1));
+        this.entityData.set(Player.DATA_PLAYER_MAIN_HAND, Byte.valueOf((byte) (arm == HumanoidArm.LEFT ? 0 : 1)));
     }
 
     public CompoundTag getShoulderEntityLeft() {
diff --git a/src/main/java/net/minecraft/world/entity/projectile/AbstractArrow.java b/src/main/java/net/minecraft/world/entity/projectile/AbstractArrow.java
index dd37f956fc3582266275b1e6fabaebccefb84dcc..b8d6673360d564ac48801d86ce3399970f7514fe 100644
--- a/src/main/java/net/minecraft/world/entity/projectile/AbstractArrow.java
+++ b/src/main/java/net/minecraft/world/entity/projectile/AbstractArrow.java
@@ -124,8 +124,8 @@ public abstract class AbstractArrow extends Projectile {
 
     @Override
     protected void defineSynchedData() {
-        this.entityData.define(AbstractArrow.ID_FLAGS, (byte) 0);
-        this.entityData.define(AbstractArrow.PIERCE_LEVEL, (byte) 0);
+        this.entityData.define(AbstractArrow.ID_FLAGS, Byte.valueOf((byte) 0));
+        this.entityData.define(AbstractArrow.PIERCE_LEVEL, Byte.valueOf((byte) 0));
     }
 
     @Override
@@ -631,16 +631,16 @@ public abstract class AbstractArrow extends Projectile {
     }
 
     public void setPierceLevel(byte level) {
-        this.entityData.set(AbstractArrow.PIERCE_LEVEL, level);
+        this.entityData.set(AbstractArrow.PIERCE_LEVEL, Byte.valueOf(level));
     }
 
     private void setFlag(int index, boolean flag) {
         byte b0 = (Byte) this.entityData.get(AbstractArrow.ID_FLAGS);
 
         if (flag) {
-            this.entityData.set(AbstractArrow.ID_FLAGS, (byte) (b0 | index));
+            this.entityData.set(AbstractArrow.ID_FLAGS, Byte.valueOf((byte) (b0 | index)));
         } else {
-            this.entityData.set(AbstractArrow.ID_FLAGS, (byte) (b0 & ~index));
+            this.entityData.set(AbstractArrow.ID_FLAGS, Byte.valueOf((byte) (b0 & ~index)));
         }
 
     }
diff --git a/src/main/java/net/minecraft/world/entity/projectile/Arrow.java b/src/main/java/net/minecraft/world/entity/projectile/Arrow.java
index 9c20f111659166f260ce9b7bf60ae7b6ebfd565a..93db420e79cdcc96a107e2699b03a4fa135aa5e3 100644
--- a/src/main/java/net/minecraft/world/entity/projectile/Arrow.java
+++ b/src/main/java/net/minecraft/world/entity/projectile/Arrow.java
@@ -75,7 +75,7 @@ public class Arrow extends AbstractArrow {
         } else if (stack.is(Items.ARROW)) {
             this.potion = Potions.EMPTY;
             this.effects.clear();
-            this.entityData.set(Arrow.ID_EFFECT_COLOR, -1);
+            this.entityData.set(Arrow.ID_EFFECT_COLOR, Integer.valueOf(-1));
         }
 
     }
@@ -89,22 +89,22 @@ public class Arrow extends AbstractArrow {
     private void updateColor() {
         this.fixedColor = false;
         if (this.potion == Potions.EMPTY && this.effects.isEmpty()) {
-            this.entityData.set(Arrow.ID_EFFECT_COLOR, -1);
+            this.entityData.set(Arrow.ID_EFFECT_COLOR, Integer.valueOf(-1));
         } else {
-            this.entityData.set(Arrow.ID_EFFECT_COLOR, PotionUtils.getColor((Collection) PotionUtils.getAllEffects(this.potion, this.effects)));
+            this.entityData.set(Arrow.ID_EFFECT_COLOR, Integer.valueOf(PotionUtils.getColor((Collection) PotionUtils.getAllEffects(this.potion, this.effects))));
         }
 
     }
 
     public void addEffect(MobEffectInstance effect) {
         this.effects.add(effect);
-        this.getEntityData().set(Arrow.ID_EFFECT_COLOR, PotionUtils.getColor((Collection) PotionUtils.getAllEffects(this.potion, this.effects)));
+        this.getEntityData().set(Arrow.ID_EFFECT_COLOR, Integer.valueOf(PotionUtils.getColor((Collection) PotionUtils.getAllEffects(this.potion, this.effects))));
     }
 
     @Override
     protected void defineSynchedData() {
         super.defineSynchedData();
-        this.entityData.define(Arrow.ID_EFFECT_COLOR, -1);
+        this.entityData.define(Arrow.ID_EFFECT_COLOR, Integer.valueOf(-1));
     }
 
     @Override
@@ -122,7 +122,7 @@ public class Arrow extends AbstractArrow {
             this.level.broadcastEntityEvent(this, (byte) 0);
             this.potion = Potions.EMPTY;
             this.effects.clear();
-            this.entityData.set(Arrow.ID_EFFECT_COLOR, -1);
+            this.entityData.set(Arrow.ID_EFFECT_COLOR, Integer.valueOf(-1));
         }
 
     }
@@ -144,7 +144,7 @@ public class Arrow extends AbstractArrow {
 
     // CraftBukkit start accessor methods
     public void refreshEffects() {
-        this.getEntityData().set(Arrow.ID_EFFECT_COLOR, PotionUtils.getColor((Collection) PotionUtils.getAllEffects(this.potion, (Collection) this.effects)));
+        this.getEntityData().set(Arrow.ID_EFFECT_COLOR, Integer.valueOf(PotionUtils.getColor((Collection) PotionUtils.getAllEffects(this.potion, (Collection) this.effects))));
     }
 
     public String getPotionType() {
@@ -153,7 +153,7 @@ public class Arrow extends AbstractArrow {
 
     public void setPotionType(String string) {
         this.potion = BuiltInRegistries.POTION.get(new net.minecraft.resources.ResourceLocation(string));
-        this.getEntityData().set(Arrow.ID_EFFECT_COLOR, PotionUtils.getColor((Collection) PotionUtils.getAllEffects(this.potion, (Collection) this.effects)));
+        this.getEntityData().set(Arrow.ID_EFFECT_COLOR, Integer.valueOf(PotionUtils.getColor((Collection) PotionUtils.getAllEffects(this.potion, (Collection) this.effects))));
     }
 
     public boolean isTipped() {
@@ -167,7 +167,7 @@ public class Arrow extends AbstractArrow {
 
     public void setFixedColor(int color) {
         this.fixedColor = true;
-        this.entityData.set(Arrow.ID_EFFECT_COLOR, color);
+        this.entityData.set(Arrow.ID_EFFECT_COLOR, Integer.valueOf(color));
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/entity/projectile/FireworkRocketEntity.java b/src/main/java/net/minecraft/world/entity/projectile/FireworkRocketEntity.java
index 5406925cd66f46ab8744123c670d72cea7bfc3a1..1541a886b05caba5b4c39655f94bf76729d0611d 100644
--- a/src/main/java/net/minecraft/world/entity/projectile/FireworkRocketEntity.java
+++ b/src/main/java/net/minecraft/world/entity/projectile/FireworkRocketEntity.java
@@ -73,7 +73,7 @@ public class FireworkRocketEntity extends Projectile implements ItemSupplier {
 
     public FireworkRocketEntity(Level world, ItemStack stack, double x, double y, double z, boolean shotAtAngle) {
         this(world, x, y, z, stack);
-        this.entityData.set(FireworkRocketEntity.DATA_SHOT_AT_ANGLE, shotAtAngle);
+        this.entityData.set(FireworkRocketEntity.DATA_SHOT_AT_ANGLE, Boolean.valueOf(shotAtAngle));
     }
 
     public FireworkRocketEntity(Level world, ItemStack stack, Entity entity, double x, double y, double z, boolean shotAtAngle) {
@@ -101,7 +101,7 @@ public class FireworkRocketEntity extends Projectile implements ItemSupplier {
     protected void defineSynchedData() {
         this.entityData.define(FireworkRocketEntity.DATA_ID_FIREWORKS_ITEM, ItemStack.EMPTY);
         this.entityData.define(FireworkRocketEntity.DATA_ATTACHED_TO_TARGET, OptionalInt.empty());
-        this.entityData.define(FireworkRocketEntity.DATA_SHOT_AT_ANGLE, false);
+        this.entityData.define(FireworkRocketEntity.DATA_SHOT_AT_ANGLE, Boolean.FALSE);
     }
 
     @Override
@@ -338,7 +338,7 @@ public class FireworkRocketEntity extends Projectile implements ItemSupplier {
         }
 
         if (nbt.contains("ShotAtAngle")) {
-            this.entityData.set(FireworkRocketEntity.DATA_SHOT_AT_ANGLE, nbt.getBoolean("ShotAtAngle"));
+            this.entityData.set(FireworkRocketEntity.DATA_SHOT_AT_ANGLE, Boolean.valueOf(nbt.getBoolean("ShotAtAngle")));
         }
         // Paper start
         if (nbt.hasUUID("SpawningEntity")) {
diff --git a/src/main/java/net/minecraft/world/entity/projectile/FishingHook.java b/src/main/java/net/minecraft/world/entity/projectile/FishingHook.java
index 7f3a7a769afec8449547c26453112064b9bcb04a..f6e008101a49d873d3c7a70024e2ed81565d345c 100644
--- a/src/main/java/net/minecraft/world/entity/projectile/FishingHook.java
+++ b/src/main/java/net/minecraft/world/entity/projectile/FishingHook.java
@@ -123,8 +123,8 @@ public class FishingHook extends Projectile {
 
     @Override
     protected void defineSynchedData() {
-        this.getEntityData().define(FishingHook.DATA_HOOKED_ENTITY, 0);
-        this.getEntityData().define(FishingHook.DATA_BITING, false);
+        this.getEntityData().define(FishingHook.DATA_HOOKED_ENTITY, Integer.valueOf(0));
+        this.getEntityData().define(FishingHook.DATA_BITING, Boolean.FALSE);
     }
 
     @Override
@@ -301,7 +301,7 @@ public class FishingHook extends Projectile {
 
     public void setHookedEntity(@Nullable Entity entity) {
         this.hookedIn = entity;
-        this.getEntityData().set(FishingHook.DATA_HOOKED_ENTITY, entity == null ? 0 : entity.getId() + 1);
+        this.getEntityData().set(FishingHook.DATA_HOOKED_ENTITY, Integer.valueOf(entity == null ? 0 : entity.getId() + 1));
     }
 
     private void catchingFish(BlockPos pos) {
@@ -322,7 +322,7 @@ public class FishingHook extends Projectile {
             if (this.nibble <= 0) {
                 this.timeUntilLured = 0;
                 this.timeUntilHooked = 0;
-                this.getEntityData().set(FishingHook.DATA_BITING, false);
+                this.getEntityData().set(FishingHook.DATA_BITING, Boolean.FALSE);
                 // CraftBukkit start
                 PlayerFishEvent playerFishEvent = new PlayerFishEvent((Player) this.getPlayerOwner().getBukkitEntity(), null, (FishHook) this.getBukkitEntity(), PlayerFishEvent.State.FAILED_ATTEMPT);
                 this.level.getCraftServer().getPluginManager().callEvent(playerFishEvent);
@@ -373,7 +373,7 @@ public class FishingHook extends Projectile {
                     worldserver.sendParticles(ParticleTypes.BUBBLE, this.getX(), d3, this.getZ(), (int) (1.0F + this.getBbWidth() * 20.0F), (double) this.getBbWidth(), 0.0D, (double) this.getBbWidth(), 0.20000000298023224D);
                     worldserver.sendParticles(ParticleTypes.FISHING, this.getX(), d3, this.getZ(), (int) (1.0F + this.getBbWidth() * 20.0F), (double) this.getBbWidth(), 0.0D, (double) this.getBbWidth(), 0.20000000298023224D);
                     this.nibble = Mth.nextInt(this.random, 20, 40);
-                    this.getEntityData().set(FishingHook.DATA_BITING, true);
+                    this.getEntityData().set(FishingHook.DATA_BITING, Boolean.TRUE);
                 }
             } else if (this.timeUntilLured > 0) {
                 this.timeUntilLured -= i;
@@ -643,7 +643,7 @@ public class FishingHook extends Projectile {
         if (this.getPlayerOwner() == null) {
             int i = packet.getData();
 
-            FishingHook.LOGGER.error("Failed to recreate fishing hook on client. {} (id: {}) is not a valid owner.", this.level.getEntity(i), i);
+            FishingHook.LOGGER.error("Failed to recreate fishing hook on client. {} (id: {}) is not a valid owner.", this.level.getEntity(i), Integer.valueOf(i));
             this.kill();
         }
 
diff --git a/src/main/java/net/minecraft/world/entity/projectile/ThrownPotion.java b/src/main/java/net/minecraft/world/entity/projectile/ThrownPotion.java
index 1f1519c1b33d16eba59546c86f20a099486441d7..f07f1875cca1c245902944852c39b69fdd8f9f22 100644
--- a/src/main/java/net/minecraft/world/entity/projectile/ThrownPotion.java
+++ b/src/main/java/net/minecraft/world/entity/projectile/ThrownPotion.java
@@ -204,7 +204,7 @@ public class ThrownPotion extends ThrowableItemProjectile implements ItemSupplie
                         }
 
                         // CraftBukkit start
-                        affected.put((LivingEntity) entityliving.getBukkitEntity(), d1);
+                        affected.put((LivingEntity) entityliving.getBukkitEntity(), Double.valueOf(d1));
                     }
                 }
             }
@@ -308,16 +308,16 @@ public class ThrownPotion extends ThrowableItemProjectile implements ItemSupplie
             // CraftBukkit end
         } else if (AbstractCandleBlock.isLit(iblockdata)) {
             // CraftBukkit start
-            if (!CraftEventFactory.callEntityChangeBlockEvent(this, pos, iblockdata.setValue(AbstractCandleBlock.LIT, false)).isCancelled()) {
+            if (!CraftEventFactory.callEntityChangeBlockEvent(this, pos, iblockdata.setValue(AbstractCandleBlock.LIT, Boolean.FALSE)).isCancelled()) {
                 AbstractCandleBlock.extinguish((Player) null, iblockdata, this.level, pos);
             }
             // CraftBukkit end
         } else if (CampfireBlock.isLitCampfire(iblockdata)) {
             // CraftBukkit start
-            if (!CraftEventFactory.callEntityChangeBlockEvent(this, pos, iblockdata.setValue(CampfireBlock.LIT, false)).isCancelled()) {
+            if (!CraftEventFactory.callEntityChangeBlockEvent(this, pos, iblockdata.setValue(CampfireBlock.LIT, Boolean.FALSE)).isCancelled()) {
                 this.level.levelEvent((Player) null, 1009, pos, 0);
                 CampfireBlock.dowse(this.getOwner(), this.level, pos, iblockdata);
-                this.level.setBlockAndUpdate(pos, (BlockState) iblockdata.setValue(CampfireBlock.LIT, false));
+                this.level.setBlockAndUpdate(pos, (BlockState) iblockdata.setValue(CampfireBlock.LIT, Boolean.FALSE));
             }
             // CraftBukkit end
         }
diff --git a/src/main/java/net/minecraft/world/entity/projectile/ThrownTrident.java b/src/main/java/net/minecraft/world/entity/projectile/ThrownTrident.java
index fb6e590e4613f59aaa8278932134aa0ca3d9da8f..cd54d767dec890767407600dee01bf752d71a2ba 100644
--- a/src/main/java/net/minecraft/world/entity/projectile/ThrownTrident.java
+++ b/src/main/java/net/minecraft/world/entity/projectile/ThrownTrident.java
@@ -40,15 +40,15 @@ public class ThrownTrident extends AbstractArrow {
         super(EntityType.TRIDENT, owner, world);
         this.tridentItem = new ItemStack(Items.TRIDENT);
         this.tridentItem = stack.copy();
-        this.entityData.set(ThrownTrident.ID_LOYALTY, (byte) EnchantmentHelper.getLoyalty(stack));
-        this.entityData.set(ThrownTrident.ID_FOIL, stack.hasFoil());
+        this.entityData.set(ThrownTrident.ID_LOYALTY, Byte.valueOf((byte) EnchantmentHelper.getLoyalty(stack)));
+        this.entityData.set(ThrownTrident.ID_FOIL, Boolean.valueOf(stack.hasFoil()));
     }
 
     @Override
     protected void defineSynchedData() {
         super.defineSynchedData();
-        this.entityData.define(ThrownTrident.ID_LOYALTY, (byte) 0);
-        this.entityData.define(ThrownTrident.ID_FOIL, false);
+        this.entityData.define(ThrownTrident.ID_LOYALTY, Byte.valueOf((byte) 0));
+        this.entityData.define(ThrownTrident.ID_FOIL, Boolean.FALSE);
     }
 
     @Override
@@ -107,7 +107,7 @@ public class ThrownTrident extends AbstractArrow {
 
     // Paper start
     public void setFoil(boolean foil) {
-        this.entityData.set(ThrownTrident.ID_FOIL, foil);
+        this.entityData.set(ThrownTrident.ID_FOIL, Boolean.valueOf(foil));
     }
 
     public int getLoyalty() {
@@ -115,7 +115,7 @@ public class ThrownTrident extends AbstractArrow {
     }
 
     public void setLoyalty(byte loyalty) {
-        this.entityData.set(ThrownTrident.ID_LOYALTY, loyalty);
+        this.entityData.set(ThrownTrident.ID_LOYALTY, Byte.valueOf(loyalty));
     }
     // Paper end
 
@@ -211,7 +211,7 @@ public class ThrownTrident extends AbstractArrow {
         }
 
         this.dealtDamage = nbt.getBoolean("DealtDamage");
-        this.entityData.set(ThrownTrident.ID_LOYALTY, (byte) EnchantmentHelper.getLoyalty(this.tridentItem));
+        this.entityData.set(ThrownTrident.ID_LOYALTY, Byte.valueOf((byte) EnchantmentHelper.getLoyalty(this.tridentItem)));
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/entity/projectile/WitherSkull.java b/src/main/java/net/minecraft/world/entity/projectile/WitherSkull.java
index 9665095240a370983878350aed41badacfb6f261..9977f66051faa15cf917ed8551c3bc14fb73bb6a 100644
--- a/src/main/java/net/minecraft/world/entity/projectile/WitherSkull.java
+++ b/src/main/java/net/minecraft/world/entity/projectile/WitherSkull.java
@@ -118,7 +118,7 @@ public class WitherSkull extends AbstractHurtingProjectile {
 
     @Override
     protected void defineSynchedData() {
-        this.entityData.define(WitherSkull.DATA_DANGEROUS, false);
+        this.entityData.define(WitherSkull.DATA_DANGEROUS, Boolean.FALSE);
     }
 
     public boolean isDangerous() {
@@ -126,7 +126,7 @@ public class WitherSkull extends AbstractHurtingProjectile {
     }
 
     public void setDangerous(boolean charged) {
-        this.entityData.set(WitherSkull.DATA_DANGEROUS, charged);
+        this.entityData.set(WitherSkull.DATA_DANGEROUS, Boolean.valueOf(charged));
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/entity/raid/Raid.java b/src/main/java/net/minecraft/world/entity/raid/Raid.java
index 08b18428e867baf14f551beb72e3875b0c420639..160736bd7990d400f5688f61652340268ea308c1 100644
--- a/src/main/java/net/minecraft/world/entity/raid/Raid.java
+++ b/src/main/java/net/minecraft/world/entity/raid/Raid.java
@@ -352,7 +352,7 @@ public class Raid {
                     this.updateRaiders();
                     if (i > 0) {
                         if (i <= 2) {
-                            this.raidEvent.setName(Raid.RAID_NAME_COMPONENT.copy().append(" - ").append((Component) Component.translatable("event.minecraft.raid.raiders_remaining", i)));
+                            this.raidEvent.setName(Raid.RAID_NAME_COMPONENT.copy().append(" - ").append((Component) Component.translatable("event.minecraft.raid.raiders_remaining", Integer.valueOf(i))));
                         } else {
                             this.raidEvent.setName(Raid.RAID_NAME_COMPONENT);
                         }
@@ -667,7 +667,7 @@ public class Raid {
     }
 
     public void removeFromRaid(Raider entity, boolean countHealth) {
-        Set<Raider> set = (Set) this.groupRaiderMap.get(entity.getWave());
+        Set<Raider> set = (Set) this.groupRaiderMap.get(Integer.valueOf(entity.getWave()));
 
         if (set != null) {
             boolean flag1 = set.remove(entity);
@@ -703,7 +703,7 @@ public class Raid {
 
     @Nullable
     public Raider getLeader(int wave) {
-        return (Raider) this.groupToLeaderMap.get(wave);
+        return (Raider) this.groupToLeaderMap.get(Integer.valueOf(wave));
     }
 
     @Nullable
@@ -735,10 +735,10 @@ public class Raid {
     }
 
     public boolean addWaveMob(int wave, Raider entity, boolean countHealth) {
-        this.groupRaiderMap.computeIfAbsent(wave, (integer) -> {
+        this.groupRaiderMap.computeIfAbsent(Integer.valueOf(wave), (integer) -> {
             return Sets.newHashSet();
         });
-        Set<Raider> set = (Set) this.groupRaiderMap.get(wave);
+        Set<Raider> set = (Set) this.groupRaiderMap.get(Integer.valueOf(wave));
         Raider entityraider1 = null;
         Iterator iterator = set.iterator();
 
@@ -767,13 +767,13 @@ public class Raid {
     }
 
     public void setLeader(int wave, Raider entity) {
-        this.groupToLeaderMap.put(wave, entity);
+        this.groupToLeaderMap.put(Integer.valueOf(wave), entity);
         entity.setItemSlot(EquipmentSlot.HEAD, Raid.getLeaderBannerInstance());
         entity.setDropChance(EquipmentSlot.HEAD, 2.0F);
     }
 
     public void removeLeader(int wave) {
-        this.groupToLeaderMap.remove(wave);
+        this.groupToLeaderMap.remove(Integer.valueOf(wave));
     }
 
     public BlockPos getCenter() {
diff --git a/src/main/java/net/minecraft/world/entity/raid/Raider.java b/src/main/java/net/minecraft/world/entity/raid/Raider.java
index d149d3aee03bc07ba21a1954f8392be91185ade6..9312e1c3207ecbf73a5ecd3026f0f0ec58643034 100644
--- a/src/main/java/net/minecraft/world/entity/raid/Raider.java
+++ b/src/main/java/net/minecraft/world/entity/raid/Raider.java
@@ -71,7 +71,7 @@ public abstract class Raider extends PatrollingMonster {
     @Override
     protected void defineSynchedData() {
         super.defineSynchedData();
-        this.entityData.define(Raider.IS_CELEBRATING, false);
+        this.entityData.define(Raider.IS_CELEBRATING, Boolean.FALSE);
     }
 
     public abstract void applyRaidBuffs(int wave, boolean unused);
@@ -205,7 +205,7 @@ public abstract class Raider extends PatrollingMonster {
     }
 
     public void setCelebrating(boolean celebrating) {
-        this.entityData.set(Raider.IS_CELEBRATING, celebrating);
+        this.entityData.set(Raider.IS_CELEBRATING, Boolean.valueOf(celebrating));
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/entity/raid/Raids.java b/src/main/java/net/minecraft/world/entity/raid/Raids.java
index feb89eb69994bdd1d2f95d2b9992e69251b2bee7..2b038a191e6909837bce0b6154a7c0b7cab21710 100644
--- a/src/main/java/net/minecraft/world/entity/raid/Raids.java
+++ b/src/main/java/net/minecraft/world/entity/raid/Raids.java
@@ -40,7 +40,7 @@ public class Raids extends SavedData {
     }
 
     public Raid get(int id) {
-        return (Raid) this.raidMap.get(id);
+        return (Raid) this.raidMap.get(Integer.valueOf(id));
     }
 
     public void tick() {
@@ -135,8 +135,8 @@ public class Raids extends SavedData {
                         return null;
                     }
 
-                    if (!this.raidMap.containsKey(raid.getId())) {
-                        this.raidMap.put(raid.getId(), raid);
+                    if (!this.raidMap.containsKey(Integer.valueOf(raid.getId()))) {
+                        this.raidMap.put(Integer.valueOf(raid.getId()), raid);
                     }
                     // CraftBukkit end
                     raid.absorbBadOmen(player);
@@ -170,7 +170,7 @@ public class Raids extends SavedData {
             CompoundTag nbttagcompound1 = nbttaglist.getCompound(i);
             Raid raid = new Raid(world, nbttagcompound1);
 
-            persistentraid.raidMap.put(raid.getId(), raid);
+            persistentraid.raidMap.put(Integer.valueOf(raid.getId()), raid);
         }
 
         return persistentraid;
diff --git a/src/main/java/net/minecraft/world/entity/vehicle/AbstractMinecart.java b/src/main/java/net/minecraft/world/entity/vehicle/AbstractMinecart.java
index eec7d7a5b558830111831792c42665724613af23..d996ef4835368742277ee65adfe1831795ae0f54 100644
--- a/src/main/java/net/minecraft/world/entity/vehicle/AbstractMinecart.java
+++ b/src/main/java/net/minecraft/world/entity/vehicle/AbstractMinecart.java
@@ -63,7 +63,7 @@ public abstract class AbstractMinecart extends Entity {
     private static final EntityDataAccessor<Integer> DATA_ID_DISPLAY_BLOCK = SynchedEntityData.defineId(AbstractMinecart.class, EntityDataSerializers.INT);
     private static final EntityDataAccessor<Integer> DATA_ID_DISPLAY_OFFSET = SynchedEntityData.defineId(AbstractMinecart.class, EntityDataSerializers.INT);
     private static final EntityDataAccessor<Boolean> DATA_ID_CUSTOM_DISPLAY = SynchedEntityData.defineId(AbstractMinecart.class, EntityDataSerializers.BOOLEAN);
-    private static final ImmutableMap<Pose, ImmutableList<Integer>> POSE_DISMOUNT_HEIGHTS = ImmutableMap.of(Pose.STANDING, ImmutableList.of(0, 1, -1), Pose.CROUCHING, ImmutableList.of(0, 1, -1), Pose.SWIMMING, ImmutableList.of(0, 1));
+    private static final ImmutableMap<Pose, ImmutableList<Integer>> POSE_DISMOUNT_HEIGHTS = ImmutableMap.of(Pose.STANDING, ImmutableList.of(Integer.valueOf(0), Integer.valueOf(1), Integer.valueOf(-1)), Pose.CROUCHING, ImmutableList.of(Integer.valueOf(0), Integer.valueOf(1), Integer.valueOf(-1)), Pose.SWIMMING, ImmutableList.of(Integer.valueOf(0), Integer.valueOf(1)));
     protected static final float WATER_SLOWDOWN_FACTOR = 0.95F;
     private boolean flipped;
     private static final Map<RailShape, Pair<Vec3i, Vec3i>> EXITS = (Map) Util.make(Maps.newEnumMap(RailShape.class), (enummap) -> {
@@ -132,12 +132,12 @@ public abstract class AbstractMinecart extends Entity {
 
     @Override
     protected void defineSynchedData() {
-        this.entityData.define(AbstractMinecart.DATA_ID_HURT, 0);
-        this.entityData.define(AbstractMinecart.DATA_ID_HURTDIR, 1);
-        this.entityData.define(AbstractMinecart.DATA_ID_DAMAGE, 0.0F);
-        this.entityData.define(AbstractMinecart.DATA_ID_DISPLAY_BLOCK, Block.getId(Blocks.AIR.defaultBlockState()));
-        this.entityData.define(AbstractMinecart.DATA_ID_DISPLAY_OFFSET, 6);
-        this.entityData.define(AbstractMinecart.DATA_ID_CUSTOM_DISPLAY, false);
+        this.entityData.define(AbstractMinecart.DATA_ID_HURT, Integer.valueOf(0));
+        this.entityData.define(AbstractMinecart.DATA_ID_HURTDIR, Integer.valueOf(1));
+        this.entityData.define(AbstractMinecart.DATA_ID_DAMAGE, Float.valueOf(0.0F));
+        this.entityData.define(AbstractMinecart.DATA_ID_DISPLAY_BLOCK, Integer.valueOf(Block.getId(Blocks.AIR.defaultBlockState())));
+        this.entityData.define(AbstractMinecart.DATA_ID_DISPLAY_OFFSET, Integer.valueOf(6));
+        this.entityData.define(AbstractMinecart.DATA_ID_CUSTOM_DISPLAY, Boolean.FALSE);
     }
 
     @Override
@@ -932,7 +932,7 @@ public abstract class AbstractMinecart extends Entity {
     }
 
     public void setDamage(float damageWobbleStrength) {
-        this.entityData.set(AbstractMinecart.DATA_ID_DAMAGE, damageWobbleStrength);
+        this.entityData.set(AbstractMinecart.DATA_ID_DAMAGE, Float.valueOf(damageWobbleStrength));
     }
 
     public float getDamage() {
@@ -940,7 +940,7 @@ public abstract class AbstractMinecart extends Entity {
     }
 
     public void setHurtTime(int wobbleTicks) {
-        this.entityData.set(AbstractMinecart.DATA_ID_HURT, wobbleTicks);
+        this.entityData.set(AbstractMinecart.DATA_ID_HURT, Integer.valueOf(wobbleTicks));
     }
 
     public int getHurtTime() {
@@ -948,7 +948,7 @@ public abstract class AbstractMinecart extends Entity {
     }
 
     public void setHurtDir(int wobbleSide) {
-        this.entityData.set(AbstractMinecart.DATA_ID_HURTDIR, wobbleSide);
+        this.entityData.set(AbstractMinecart.DATA_ID_HURTDIR, Integer.valueOf(wobbleSide));
     }
 
     public int getHurtDir() {
@@ -974,12 +974,12 @@ public abstract class AbstractMinecart extends Entity {
     }
 
     public void setDisplayBlockState(BlockState state) {
-        this.getEntityData().set(AbstractMinecart.DATA_ID_DISPLAY_BLOCK, Block.getId(state));
+        this.getEntityData().set(AbstractMinecart.DATA_ID_DISPLAY_BLOCK, Integer.valueOf(Block.getId(state)));
         this.setCustomDisplay(true);
     }
 
     public void setDisplayOffset(int offset) {
-        this.getEntityData().set(AbstractMinecart.DATA_ID_DISPLAY_OFFSET, offset);
+        this.getEntityData().set(AbstractMinecart.DATA_ID_DISPLAY_OFFSET, Integer.valueOf(offset));
         this.setCustomDisplay(true);
     }
 
@@ -988,7 +988,7 @@ public abstract class AbstractMinecart extends Entity {
     }
 
     public void setCustomDisplay(boolean present) {
-        this.getEntityData().set(AbstractMinecart.DATA_ID_CUSTOM_DISPLAY, present);
+        this.getEntityData().set(AbstractMinecart.DATA_ID_CUSTOM_DISPLAY, Boolean.valueOf(present));
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/entity/vehicle/Boat.java b/src/main/java/net/minecraft/world/entity/vehicle/Boat.java
index 85e1892866cd2ee0cec1552b8541c1f800bdf68c..e8147ce30a0b11d63c2c9e55f39f517edb5ea103 100644
--- a/src/main/java/net/minecraft/world/entity/vehicle/Boat.java
+++ b/src/main/java/net/minecraft/world/entity/vehicle/Boat.java
@@ -135,13 +135,13 @@ public class Boat extends Entity implements VariantHolder<Boat.Type> {
 
     @Override
     protected void defineSynchedData() {
-        this.entityData.define(Boat.DATA_ID_HURT, 0);
-        this.entityData.define(Boat.DATA_ID_HURTDIR, 1);
-        this.entityData.define(Boat.DATA_ID_DAMAGE, 0.0F);
-        this.entityData.define(Boat.DATA_ID_TYPE, Boat.Type.OAK.ordinal());
-        this.entityData.define(Boat.DATA_ID_PADDLE_LEFT, false);
-        this.entityData.define(Boat.DATA_ID_PADDLE_RIGHT, false);
-        this.entityData.define(Boat.DATA_ID_BUBBLE_TIME, 0);
+        this.entityData.define(Boat.DATA_ID_HURT, Integer.valueOf(0));
+        this.entityData.define(Boat.DATA_ID_HURTDIR, Integer.valueOf(1));
+        this.entityData.define(Boat.DATA_ID_DAMAGE, Float.valueOf(0.0F));
+        this.entityData.define(Boat.DATA_ID_TYPE, Integer.valueOf(Type.OAK.ordinal()));
+        this.entityData.define(Boat.DATA_ID_PADDLE_LEFT, Boolean.FALSE);
+        this.entityData.define(Boat.DATA_ID_PADDLE_RIGHT, Boolean.FALSE);
+        this.entityData.define(Boat.DATA_ID_BUBBLE_TIME, Integer.valueOf(0));
     }
 
     @Override
@@ -516,8 +516,8 @@ public class Boat extends Entity implements VariantHolder<Boat.Type> {
     }
 
     public void setPaddleState(boolean leftMoving, boolean rightMoving) {
-        this.entityData.set(Boat.DATA_ID_PADDLE_LEFT, leftMoving);
-        this.entityData.set(Boat.DATA_ID_PADDLE_RIGHT, rightMoving);
+        this.entityData.set(Boat.DATA_ID_PADDLE_LEFT, Boolean.valueOf(leftMoving));
+        this.entityData.set(Boat.DATA_ID_PADDLE_RIGHT, Boolean.valueOf(rightMoving));
     }
 
     public float getRowingTime(int paddle, float tickDelta) {
@@ -933,7 +933,7 @@ public class Boat extends Entity implements VariantHolder<Boat.Type> {
     }
 
     public void setDamage(float wobbleStrength) {
-        this.entityData.set(Boat.DATA_ID_DAMAGE, wobbleStrength);
+        this.entityData.set(Boat.DATA_ID_DAMAGE, Float.valueOf(wobbleStrength));
     }
 
     public float getDamage() {
@@ -941,7 +941,7 @@ public class Boat extends Entity implements VariantHolder<Boat.Type> {
     }
 
     public void setHurtTime(int wobbleTicks) {
-        this.entityData.set(Boat.DATA_ID_HURT, wobbleTicks);
+        this.entityData.set(Boat.DATA_ID_HURT, Integer.valueOf(wobbleTicks));
     }
 
     public int getHurtTime() {
@@ -949,7 +949,7 @@ public class Boat extends Entity implements VariantHolder<Boat.Type> {
     }
 
     private void setBubbleTime(int wobbleTicks) {
-        this.entityData.set(Boat.DATA_ID_BUBBLE_TIME, wobbleTicks);
+        this.entityData.set(Boat.DATA_ID_BUBBLE_TIME, Integer.valueOf(wobbleTicks));
     }
 
     private int getBubbleTime() {
@@ -961,7 +961,7 @@ public class Boat extends Entity implements VariantHolder<Boat.Type> {
     }
 
     public void setHurtDir(int side) {
-        this.entityData.set(Boat.DATA_ID_HURTDIR, side);
+        this.entityData.set(Boat.DATA_ID_HURTDIR, Integer.valueOf(side));
     }
 
     public int getHurtDir() {
diff --git a/src/main/java/net/minecraft/world/inventory/AbstractContainerMenu.java b/src/main/java/net/minecraft/world/inventory/AbstractContainerMenu.java
index cebc88a02476c541c646d3408fff1dee62d2248b..f77eb57a3aa5499aadedd7804bf265d0209e6214 100644
--- a/src/main/java/net/minecraft/world/inventory/AbstractContainerMenu.java
+++ b/src/main/java/net/minecraft/world/inventory/AbstractContainerMenu.java
@@ -117,8 +117,8 @@ public abstract class AbstractContainerMenu {
 
     protected static boolean stillValid(ContainerLevelAccess context, Player player, Block block) {
         return (Boolean) context.evaluate((world, blockposition) -> {
-            return !world.getBlockState(blockposition).is(block) ? false : player.distanceToSqr((double) blockposition.getX() + 0.5D, (double) blockposition.getY() + 0.5D, (double) blockposition.getZ() + 0.5D) <= 64.0D;
-        }, true);
+            return Boolean.valueOf(!world.getBlockState(blockposition).is(block) ? false : player.distanceToSqr((double) blockposition.getX() + 0.5D, (double) blockposition.getY() + 0.5D, (double) blockposition.getZ() + 0.5D) <= 64.0D);
+        }, Boolean.TRUE);
     }
 
     public MenuType<?> getType() {
@@ -359,7 +359,7 @@ public abstract class AbstractContainerMenu {
         if (slot >= 0 && slot < this.remoteSlots.size()) {
             this.remoteSlots.set(slot, stack);
         } else {
-            AbstractContainerMenu.LOGGER.debug("Incorrect slot index: {} available slots: {}", slot, this.remoteSlots.size());
+            AbstractContainerMenu.LOGGER.debug("Incorrect slot index: {} available slots: {}", Integer.valueOf(slot), Integer.valueOf(this.remoteSlots.size()));
         }
     }
 
@@ -390,9 +390,9 @@ public abstract class AbstractContainerMenu {
             crashreportsystemdetails.setDetail("Menu Class", () -> {
                 return this.getClass().getCanonicalName();
             });
-            crashreportsystemdetails.setDetail("Slot Count", (Object) this.slots.size());
-            crashreportsystemdetails.setDetail("Slot", (Object) slotIndex);
-            crashreportsystemdetails.setDetail("Button", (Object) button);
+            crashreportsystemdetails.setDetail("Slot Count", Integer.valueOf(this.slots.size()));
+            crashreportsystemdetails.setDetail("Slot", Integer.valueOf(slotIndex));
+            crashreportsystemdetails.setDetail("Button", Integer.valueOf(button));
             crashreportsystemdetails.setDetail("Type", (Object) actionType);
             throw new ReportedException(crashreport);
         }
@@ -459,7 +459,7 @@ public abstract class AbstractContainerMenu {
 
                             l -= itemstack3.getCount() - j1;
                             // slot1.set(itemstack3);
-                            draggedSlots.put(slot1.index, itemstack3); // CraftBukkit - Put in map instead of setting
+                            draggedSlots.put(Integer.valueOf(slot1.index), itemstack3); // CraftBukkit - Put in map instead of setting
                         }
                     }
 
@@ -987,12 +987,12 @@ public abstract class AbstractContainerMenu {
 
         for (i = 0; i < handler.slots.size(); ++i) {
             slot = (Slot) handler.slots.get(i);
-            table.put(slot.container, slot.getContainerSlot(), i);
+            table.put(slot.container, Integer.valueOf(slot.getContainerSlot()), Integer.valueOf(i));
         }
 
         for (i = 0; i < this.slots.size(); ++i) {
             slot = (Slot) this.slots.get(i);
-            Integer integer = (Integer) table.get(slot.container, slot.getContainerSlot());
+            Integer integer = (Integer) table.get(slot.container, Integer.valueOf(slot.getContainerSlot()));
 
             if (integer != null) {
                 this.lastSlots.set(i, (ItemStack) handler.lastSlots.get(integer));
diff --git a/src/main/java/net/minecraft/world/inventory/AnvilMenu.java b/src/main/java/net/minecraft/world/inventory/AnvilMenu.java
index 506d758efbf16da9467f120321d2359a8832e477..8724f474c772670fc6686099150a94b3ad35848a 100644
--- a/src/main/java/net/minecraft/world/inventory/AnvilMenu.java
+++ b/src/main/java/net/minecraft/world/inventory/AnvilMenu.java
@@ -187,7 +187,7 @@ public class AnvilMenu extends ItemCombinerMenu {
                         Enchantment enchantment = (Enchantment) iterator.next();
 
                         if (enchantment != null) {
-                            int l1 = (Integer) map.getOrDefault(enchantment, 0);
+                            int l1 = (Integer) map.getOrDefault(enchantment, Integer.valueOf(0));
                             int i2 = (Integer) map1.get(enchantment);
 
                             i2 = l1 == i2 ? i2 + 1 : Math.max(i2, l1);
@@ -216,7 +216,7 @@ public class AnvilMenu extends ItemCombinerMenu {
                                     i2 = enchantment.getMaxLevel();
                                 }
 
-                                map.put(enchantment, i2);
+                                map.put(enchantment, Integer.valueOf(i2));
                                 int j2 = 0;
 
                                 switch (enchantment.getRarity()) {
diff --git a/src/main/java/net/minecraft/world/inventory/EnchantmentMenu.java b/src/main/java/net/minecraft/world/inventory/EnchantmentMenu.java
index 0d464958c63d4bb460bb65cfa5c227b21101a069..4325c5f698d138dc980315dc9dd0d302d8ab5447 100644
--- a/src/main/java/net/minecraft/world/inventory/EnchantmentMenu.java
+++ b/src/main/java/net/minecraft/world/inventory/EnchantmentMenu.java
@@ -236,7 +236,7 @@ public class EnchantmentMenu extends AbstractContainerMenu {
                         Map<org.bukkit.enchantments.Enchantment, Integer> enchants = new java.util.HashMap<org.bukkit.enchantments.Enchantment, Integer>();
                         for (Object obj : list) {
                             EnchantmentInstance instance = (EnchantmentInstance) obj;
-                            enchants.put(org.bukkit.enchantments.Enchantment.getByKey(CraftNamespacedKey.fromMinecraft(BuiltInRegistries.ENCHANTMENT.getKey(instance.enchantment))), instance.level);
+                            enchants.put(org.bukkit.enchantments.Enchantment.getByKey(CraftNamespacedKey.fromMinecraft(BuiltInRegistries.ENCHANTMENT.getKey(instance.enchantment))), Integer.valueOf(instance.level));
                         }
                         CraftItemStack item = CraftItemStack.asCraftMirror(itemstack2);
 
diff --git a/src/main/java/net/minecraft/world/inventory/ItemCombinerMenu.java b/src/main/java/net/minecraft/world/inventory/ItemCombinerMenu.java
index c34a66310969c3c837d09693159b827c1edddd3b..10bc09ae4c4c9636c34c8eeaba131aa1305629b4 100644
--- a/src/main/java/net/minecraft/world/inventory/ItemCombinerMenu.java
+++ b/src/main/java/net/minecraft/world/inventory/ItemCombinerMenu.java
@@ -95,8 +95,8 @@ public abstract class ItemCombinerMenu extends AbstractContainerMenu {
     public boolean stillValid(Player player) {
         if (!this.checkReachable) return true; // CraftBukkit
         return (Boolean) this.access.evaluate((world, blockposition) -> {
-            return !this.isValidBlock(world.getBlockState(blockposition)) ? false : player.distanceToSqr((double) blockposition.getX() + 0.5D, (double) blockposition.getY() + 0.5D, (double) blockposition.getZ() + 0.5D) <= 64.0D;
-        }, true);
+            return Boolean.valueOf(!this.isValidBlock(world.getBlockState(blockposition)) ? false : player.distanceToSqr((double) blockposition.getX() + 0.5D, (double) blockposition.getY() + 0.5D, (double) blockposition.getZ() + 0.5D) <= 64.0D);
+        }, Boolean.TRUE);
     }
 
     protected boolean shouldQuickMoveToAdditionalSlot(ItemStack stack) {
diff --git a/src/main/java/net/minecraft/world/item/EnderEyeItem.java b/src/main/java/net/minecraft/world/item/EnderEyeItem.java
index f4fc8ff3981555e4b560289248a9b02afc04b42f..7d9456a4eb7fd62078d17a98b6ed4217608d34a4 100644
--- a/src/main/java/net/minecraft/world/item/EnderEyeItem.java
+++ b/src/main/java/net/minecraft/world/item/EnderEyeItem.java
@@ -42,7 +42,7 @@ public class EnderEyeItem extends Item {
             if (world.isClientSide) {
                 return InteractionResult.SUCCESS;
             } else {
-                BlockState iblockdata1 = (BlockState) iblockdata.setValue(EndPortalFrameBlock.HAS_EYE, true);
+                BlockState iblockdata1 = iblockdata.setValue(EndPortalFrameBlock.HAS_EYE, Boolean.TRUE);
                 // Paper start
                 if (org.bukkit.craftbukkit.event.CraftEventFactory.callEntityChangeBlockEvent(context.getPlayer(), blockposition, iblockdata1).isCancelled()) {
                     return InteractionResult.PASS;
diff --git a/src/main/java/net/minecraft/world/item/FireChargeItem.java b/src/main/java/net/minecraft/world/item/FireChargeItem.java
index 93b4245e31acc4d03d053d73e5fc971ad45959bd..1da98a9507d79850265d4d9946497ef6689ad13c 100644
--- a/src/main/java/net/minecraft/world/item/FireChargeItem.java
+++ b/src/main/java/net/minecraft/world/item/FireChargeItem.java
@@ -56,7 +56,7 @@ public class FireChargeItem extends Item {
             }
             // CraftBukkit end
             this.playSound(world, blockposition);
-            world.setBlockAndUpdate(blockposition, (BlockState) iblockdata.setValue(BlockStateProperties.LIT, true));
+            world.setBlockAndUpdate(blockposition, (BlockState) iblockdata.setValue(BlockStateProperties.LIT, Boolean.TRUE));
             world.gameEvent((Entity) context.getPlayer(), GameEvent.BLOCK_CHANGE, blockposition);
             flag = true;
         }
diff --git a/src/main/java/net/minecraft/world/item/FlintAndSteelItem.java b/src/main/java/net/minecraft/world/item/FlintAndSteelItem.java
index 81994943198b92a3975910e1c50b9579912ff008..9b6c0645d75bb852056d76436cfdab0724377e1e 100644
--- a/src/main/java/net/minecraft/world/item/FlintAndSteelItem.java
+++ b/src/main/java/net/minecraft/world/item/FlintAndSteelItem.java
@@ -71,7 +71,7 @@ public class FlintAndSteelItem extends Item {
             }
             // CraftBukkit end
             world.playSound(entityhuman, blockposition, SoundEvents.FLINTANDSTEEL_USE, SoundSource.BLOCKS, 1.0F, world.getRandom().nextFloat() * 0.4F + 0.8F);
-            world.setBlock(blockposition, (BlockState) iblockdata.setValue(BlockStateProperties.LIT, true), 11);
+            world.setBlock(blockposition, (BlockState) iblockdata.setValue(BlockStateProperties.LIT, Boolean.TRUE), 11);
             world.gameEvent((Entity) entityhuman, GameEvent.BLOCK_CHANGE, blockposition);
             if (entityhuman != null) {
                 context.getItemInHand().hurtAndBreak(1, entityhuman, (entityhuman1) -> {
diff --git a/src/main/java/net/minecraft/world/item/ItemStack.java b/src/main/java/net/minecraft/world/item/ItemStack.java
index 8450a22b0fc6e8dc5cad0f61ac52a82b3cd3791e..e7418724d77a0fc7355363aac5970b89d8affbeb 100644
--- a/src/main/java/net/minecraft/world/item/ItemStack.java
+++ b/src/main/java/net/minecraft/world/item/ItemStack.java
@@ -112,7 +112,7 @@ public final class ItemStack {
         return instance.group(BuiltInRegistries.ITEM.byNameCodec().fieldOf("id").forGetter((itemstack) -> {
             return itemstack.item;
         }), Codec.INT.fieldOf("Count").forGetter((itemstack) -> {
-            return itemstack.count;
+            return Integer.valueOf(itemstack.count);
         }), CompoundTag.CODEC.optionalFieldOf("tag").forGetter((itemstack) -> {
             return Optional.ofNullable(itemstack.tag);
         })).apply(instance, ItemStack::new);
@@ -135,7 +135,7 @@ public final class ItemStack {
     private static final String TAG_HIDE_FLAGS = "HideFlags";
     private static final Component DISABLED_ITEM_TOOLTIP = Component.translatable("item.disabled").withStyle(ChatFormatting.RED);
     private static final int DONT_HIDE_TOOLTIP = 0;
-    private static final Style LORE_STYLE = Style.EMPTY.withColor(ChatFormatting.DARK_PURPLE).withItalic(true);
+    private static final Style LORE_STYLE = Style.EMPTY.withColor(ChatFormatting.DARK_PURPLE).withItalic(Boolean.TRUE);
     private int count;
     private int popTime;
     /** @deprecated */
@@ -947,7 +947,7 @@ public final class ItemStack {
 
                 if (ItemStack.shouldShowInTooltip(i, ItemStack.TooltipPart.DYE) && nbttagcompound.contains("color", 99)) {
                     if (context.isAdvanced()) {
-                        list.add(Component.translatable("item.color", String.format(Locale.ROOT, "#%06X", nbttagcompound.getInt("color"))).withStyle(ChatFormatting.GRAY));
+                        list.add(Component.translatable("item.color", String.format(Locale.ROOT, "#%06X", Integer.valueOf(nbttagcompound.getInt("color")))).withStyle(ChatFormatting.GRAY));
                     } else {
                         list.add(Component.translatable("item.dyed").withStyle(ChatFormatting.GRAY, ChatFormatting.ITALIC));
                     }
@@ -1065,12 +1065,12 @@ public final class ItemStack {
 
         if (context.isAdvanced()) {
             if (this.isDamaged()) {
-                list.add(Component.translatable("item.durability", this.getMaxDamage() - this.getDamageValue(), this.getMaxDamage()));
+                list.add(Component.translatable("item.durability", Integer.valueOf(this.getMaxDamage() - this.getDamageValue()), Integer.valueOf(this.getMaxDamage())));
             }
 
             list.add(Component.literal(BuiltInRegistries.ITEM.getKey(this.getItem()).toString()).withStyle(ChatFormatting.DARK_GRAY));
             if (this.hasTag()) {
-                list.add(Component.translatable("item.nbt_tags", this.tag.getAllKeys().size()).withStyle(ChatFormatting.DARK_GRAY));
+                list.add(Component.translatable("item.nbt_tags", Integer.valueOf(this.tag.getAllKeys().size())).withStyle(ChatFormatting.DARK_GRAY));
             }
         }
 
diff --git a/src/main/java/net/minecraft/world/item/MapItem.java b/src/main/java/net/minecraft/world/item/MapItem.java
index 586852e347cfeb6e52d16e51b3f193e814036e81..4c62273570f2b465f0838170bee8308e1c725194 100644
--- a/src/main/java/net/minecraft/world/item/MapItem.java
+++ b/src/main/java/net/minecraft/world/item/MapItem.java
@@ -73,7 +73,7 @@ public class MapItem extends ComplexItem {
     public static Integer getMapId(ItemStack stack) {
         CompoundTag nbttagcompound = stack.getTag();
 
-        return nbttagcompound != null && nbttagcompound.contains("map", 99) ? nbttagcompound.getInt("map") : null; // CraftBukkit - make new maps for no tag // Paper - don't return invalid ID
+        return nbttagcompound != null && nbttagcompound.contains("map", 99) ? Integer.valueOf(nbttagcompound.getInt("map")) : null; // CraftBukkit - make new maps for no tag // Paper - don't return invalid ID
     }
 
     public static int createNewSavedData(Level world, int x, int z, int scale, boolean showIcons, boolean unlimitedTracking, ResourceKey<Level> dimension) {
diff --git a/src/main/java/net/minecraft/world/item/crafting/RecipeManager.java b/src/main/java/net/minecraft/world/item/crafting/RecipeManager.java
index 2f712bfc1f717ba410bf34669d7b0a919ca218cc..802a1dd2cac4404a9449c88ed52657554fc784a6 100644
--- a/src/main/java/net/minecraft/world/item/crafting/RecipeManager.java
+++ b/src/main/java/net/minecraft/world/item/crafting/RecipeManager.java
@@ -81,7 +81,7 @@ public class RecipeManager extends SimpleJsonResourceReloadListener {
             return entry1.getValue(); // CraftBukkit // Paper - decompile fix - *shrugs internally* // todo: is this needed anymore?
         }));
         this.byName = Maps.newHashMap(builder.build()); // CraftBukkit
-        RecipeManager.LOGGER.info("Loaded {} recipes", map1.size());
+        RecipeManager.LOGGER.info("Loaded {} recipes", Integer.valueOf(map1.size()));
     }
 
     // CraftBukkit start
diff --git a/src/main/java/net/minecraft/world/level/BaseSpawner.java b/src/main/java/net/minecraft/world/level/BaseSpawner.java
index af799b61cec48ca290ed66cb47cfc0b244ac41a7..4e56e5d368953e8270eeb28d28aa958a35e1e460 100644
--- a/src/main/java/net/minecraft/world/level/BaseSpawner.java
+++ b/src/main/java/net/minecraft/world/level/BaseSpawner.java
@@ -123,7 +123,7 @@ public abstract class BaseSpawner {
 
                             SpawnData.CustomSpawnRules mobspawnerdata_a = (SpawnData.CustomSpawnRules) mobspawnerdata.getCustomSpawnRules().get();
 
-                            if (!mobspawnerdata_a.blockLightLimit().isValueInRange(world.getBrightness(LightLayer.BLOCK, blockposition1)) || !mobspawnerdata_a.skyLightLimit().isValueInRange(world.getBrightness(LightLayer.SKY, blockposition1))) {
+                            if (!mobspawnerdata_a.blockLightLimit().isValueInRange(Integer.valueOf(world.getBrightness(LightLayer.BLOCK, blockposition1))) || !mobspawnerdata_a.skyLightLimit().isValueInRange(Integer.valueOf(world.getBrightness(LightLayer.SKY, blockposition1)))) {
                                 continue;
                             }
                         } else if (!SpawnPlacements.checkSpawnRules((EntityType) optional.get(), world, MobSpawnType.SPAWNER, blockposition1, world.getRandom())) {
diff --git a/src/main/java/net/minecraft/world/level/Explosion.java b/src/main/java/net/minecraft/world/level/Explosion.java
index d4cbd3acbcad8408048717d44887a2e5796d6971..3195a3b44d1b28e307ed2ffc23a0ff0c21554125 100644
--- a/src/main/java/net/minecraft/world/level/Explosion.java
+++ b/src/main/java/net/minecraft/world/level/Explosion.java
@@ -372,7 +372,7 @@ public class Explosion {
                             LootContext.Builder loottableinfo_builder = (new LootContext.Builder(worldserver)).withRandom(this.level.random).withParameter(LootContextParams.ORIGIN, Vec3.atCenterOf(blockposition)).withParameter(LootContextParams.TOOL, ItemStack.EMPTY).withOptionalParameter(LootContextParams.BLOCK_ENTITY, tileentity).withOptionalParameter(LootContextParams.THIS_ENTITY, this.source);
 
                             if (this.blockInteraction == Explosion.BlockInteraction.DESTROY_WITH_DECAY || yield < 1.0F) { // CraftBukkit - add yield
-                                loottableinfo_builder.withParameter(LootContextParams.EXPLOSION_RADIUS, 1.0F / yield); // CraftBukkit - add yield
+                                loottableinfo_builder.withParameter(LootContextParams.EXPLOSION_RADIUS, Float.valueOf(1.0F / yield)); // CraftBukkit - add yield
                             }
 
                             iblockdata.spawnAfterBreak(worldserver, blockposition, ItemStack.EMPTY, flag2);
@@ -511,7 +511,7 @@ public class Explosion {
         CacheKey key = new CacheKey(this, entity.getBoundingBox());
         Float blockDensity = this.level.explosionDensityCache.get(key);
         if (blockDensity == null) {
-            blockDensity = getSeenPercent(vec3d, entity);
+            blockDensity = Float.valueOf(getSeenPercent(vec3d, entity));
             this.level.explosionDensityCache.put(key, blockDensity);
         }
 
diff --git a/src/main/java/net/minecraft/world/level/Level.java b/src/main/java/net/minecraft/world/level/Level.java
index ee5cb41c2bb2f6742fa118002e27edb4e90d0957..ba657dd563574649ce1af629ceb9a923056e64fd 100644
--- a/src/main/java/net/minecraft/world/level/Level.java
+++ b/src/main/java/net/minecraft/world/level/Level.java
@@ -921,7 +921,7 @@ public abstract class Level implements LevelAccessor, AutoCloseable {
         } catch (Throwable throwable) {
             if (throwable instanceof ThreadDeath) throw throwable; // Paper
             // Paper start - Prevent tile entity and entity crashes
-            final String msg = String.format("Entity threw exception at %s:%s,%s,%s", entity.level.getWorld().getName(), entity.getX(), entity.getY(), entity.getZ());
+            final String msg = String.format("Entity threw exception at %s:%s,%s,%s", entity.level.getWorld().getName(), Double.valueOf(entity.getX()), Double.valueOf(entity.getY()), Double.valueOf(entity.getZ()));
             MinecraftServer.LOGGER.error(msg, throwable);
             getCraftServer().getPluginManager().callEvent(new ServerExceptionEvent(new ServerInternalException(msg, throwable)));
             entity.discard();
diff --git a/src/main/java/net/minecraft/world/level/NaturalSpawner.java b/src/main/java/net/minecraft/world/level/NaturalSpawner.java
index e1aa5f589a1c55652f7b0e2b7865114bfe48e8c9..f522f02d8b46b2499cdb2e66848319653926c0d5 100644
--- a/src/main/java/net/minecraft/world/level/NaturalSpawner.java
+++ b/src/main/java/net/minecraft/world/level/NaturalSpawner.java
@@ -353,20 +353,20 @@ public final class NaturalSpawner {
                 if (event.shouldAbortSpawn()) {
                     return null;
                 }
-                return false;
+                return Boolean.FALSE;
             }
         }
         // Paper end
         if (entitytypes.getCategory() == MobCategory.MISC) {
-            return false;
+            return Boolean.FALSE;
         } else if (!entitytypes.canSpawnFarFromPlayer() && squaredDistance > (double) (entitytypes.getCategory().getDespawnDistance() * entitytypes.getCategory().getDespawnDistance())) {
-            return false;
+            return Boolean.FALSE;
         } else if (entitytypes.canSummon() && NaturalSpawner.canSpawnMobAt(world, structureAccessor, chunkGenerator, group, spawnEntry, pos)) {
             SpawnPlacements.Type entitypositiontypes_surface = SpawnPlacements.getPlacementType(entitytypes);
 
-            return !NaturalSpawner.isSpawnPositionOk(entitypositiontypes_surface, world, pos, entitytypes) ? false : (!SpawnPlacements.checkSpawnRules(entitytypes, world, MobSpawnType.NATURAL, pos, world.random) ? false : world.noCollision(entitytypes.getAABB((double) pos.getX() + 0.5D, (double) pos.getY(), (double) pos.getZ() + 0.5D)));
+            return Boolean.valueOf(!NaturalSpawner.isSpawnPositionOk(entitypositiontypes_surface, world, pos, entitytypes) ? false : (!SpawnPlacements.checkSpawnRules(entitytypes, world, MobSpawnType.NATURAL, pos, world.random) ? false : world.noCollision(entitytypes.getAABB((double) pos.getX() + 0.5D, (double) pos.getY(), (double) pos.getZ() + 0.5D))));
         } else {
-            return false;
+            return Boolean.FALSE;
         }
     }
 
diff --git a/src/main/java/net/minecraft/world/level/biome/MobSpawnSettings.java b/src/main/java/net/minecraft/world/level/biome/MobSpawnSettings.java
index abfa3f4185b5ef6ef1309f2d44a5290bcaaa250c..9b58f147dc446f68d6136b1741f12f9014dcee57 100644
--- a/src/main/java/net/minecraft/world/level/biome/MobSpawnSettings.java
+++ b/src/main/java/net/minecraft/world/level/biome/MobSpawnSettings.java
@@ -27,8 +27,8 @@ public class MobSpawnSettings {
     public static final WeightedRandomList<MobSpawnSettings.SpawnerData> EMPTY_MOB_LIST = WeightedRandomList.create();
     public static final MobSpawnSettings EMPTY = (new MobSpawnSettings.Builder()).build();
     public static final MapCodec<MobSpawnSettings> CODEC = RecordCodecBuilder.mapCodec((instance) -> {
-        return instance.group(Codec.floatRange(0.0F, 0.9999999F).optionalFieldOf("creature_spawn_probability", 0.1F).forGetter((mobSpawnSettings) -> {
-            return mobSpawnSettings.creatureGenerationProbability;
+        return instance.group(Codec.floatRange(0.0F, 0.9999999F).optionalFieldOf("creature_spawn_probability", Float.valueOf(0.1F)).forGetter((mobSpawnSettings) -> {
+            return Float.valueOf(mobSpawnSettings.creatureGenerationProbability);
         }), Codec.simpleMap(MobCategory.CODEC, WeightedRandomList.codec(MobSpawnSettings.SpawnerData.CODEC).promotePartial(Util.prefix("Spawn data: ", LOGGER::error)), StringRepresentable.keys(MobCategory.values())).fieldOf("spawners").forGetter((mobSpawnSettings) -> {
             return mobSpawnSettings.spawners;
         }), Codec.simpleMap(BuiltInRegistries.ENTITY_TYPE.byNameCodec(), MobSpawnSettings.MobSpawnCost.CODEC, BuiltInRegistries.ENTITY_TYPE).fieldOf("spawn_costs").forGetter((mobSpawnSettings) -> {
@@ -124,9 +124,9 @@ public class MobSpawnSettings {
     public static class MobSpawnCost {
         public static final Codec<MobSpawnSettings.MobSpawnCost> CODEC = RecordCodecBuilder.create((instance) -> {
             return instance.group(Codec.DOUBLE.fieldOf("energy_budget").forGetter((mobSpawnCost) -> {
-                return mobSpawnCost.energyBudget;
+                return Double.valueOf(mobSpawnCost.energyBudget);
             }), Codec.DOUBLE.fieldOf("charge").forGetter((mobSpawnCost) -> {
-                return mobSpawnCost.charge;
+                return Double.valueOf(mobSpawnCost.charge);
             })).apply(instance, MobSpawnSettings.MobSpawnCost::new);
         });
         private final double energyBudget;
@@ -151,9 +151,9 @@ public class MobSpawnSettings {
             return instance.group(BuiltInRegistries.ENTITY_TYPE.byNameCodec().fieldOf("type").forGetter((spawnerData) -> {
                 return spawnerData.type;
             }), Weight.CODEC.fieldOf("weight").forGetter(WeightedEntry.IntrusiveBase::getWeight), Codec.INT.fieldOf("minCount").forGetter((spawnerData) -> {
-                return spawnerData.minCount;
+                return Integer.valueOf(spawnerData.minCount);
             }), Codec.INT.fieldOf("maxCount").forGetter((spawnerData) -> {
-                return spawnerData.maxCount;
+                return Integer.valueOf(spawnerData.maxCount);
             })).apply(instance, MobSpawnSettings.SpawnerData::new);
         });
         public final EntityType<?> type;
diff --git a/src/main/java/net/minecraft/world/level/block/AbstractCandleBlock.java b/src/main/java/net/minecraft/world/level/block/AbstractCandleBlock.java
index d7817bfec7e341ef0ec1cf22c8a2480c90e32644..b6abdff8659cf7c97e9eef031f7ed9a58c7e6a7a 100644
--- a/src/main/java/net/minecraft/world/level/block/AbstractCandleBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/AbstractCandleBlock.java
@@ -87,6 +87,6 @@ public abstract class AbstractCandleBlock extends Block {
     }
 
     private static void setLit(LevelAccessor world, BlockState state, BlockPos pos, boolean lit) {
-        world.setBlock(pos, (BlockState) state.setValue(AbstractCandleBlock.LIT, lit), 11);
+        world.setBlock(pos, (BlockState) state.setValue(AbstractCandleBlock.LIT, Boolean.valueOf(lit)), 11);
     }
 }
diff --git a/src/main/java/net/minecraft/world/level/block/BambooStalkBlock.java b/src/main/java/net/minecraft/world/level/block/BambooStalkBlock.java
index a5d391af2c6b733d653188f4aeeec2afffd96adf..e0fac8528893cd71c48dfa74bd65e8fac4af48c7 100644
--- a/src/main/java/net/minecraft/world/level/block/BambooStalkBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/BambooStalkBlock.java
@@ -45,7 +45,7 @@ public class BambooStalkBlock extends Block implements BonemealableBlock {
 
     public BambooStalkBlock(BlockBehaviour.Properties settings) {
         super(settings);
-        this.registerDefaultState((BlockState) ((BlockState) ((BlockState) ((BlockState) this.stateDefinition.any()).setValue(BambooStalkBlock.AGE, 0)).setValue(BambooStalkBlock.LEAVES, BambooLeaves.NONE)).setValue(BambooStalkBlock.STAGE, 0));
+        this.registerDefaultState((BlockState) ((BlockState) ((BlockState) ((BlockState) this.stateDefinition.any()).setValue(BambooStalkBlock.AGE, Integer.valueOf(0))).setValue(BambooStalkBlock.LEAVES, BambooLeaves.NONE)).setValue(BambooStalkBlock.STAGE, Integer.valueOf(0)));
     }
 
     @Override
@@ -95,11 +95,11 @@ public class BambooStalkBlock extends Block implements BonemealableBlock {
 
             if (iblockdata.is(BlockTags.BAMBOO_PLANTABLE_ON)) {
                 if (iblockdata.is(Blocks.BAMBOO_SAPLING)) {
-                    return (BlockState) this.defaultBlockState().setValue(BambooStalkBlock.AGE, 0);
+                    return (BlockState) this.defaultBlockState().setValue(BambooStalkBlock.AGE, Integer.valueOf(0));
                 } else if (iblockdata.is(Blocks.BAMBOO)) {
                     int i = (Integer) iblockdata.getValue(BambooStalkBlock.AGE) > 0 ? 1 : 0;
 
-                    return (BlockState) this.defaultBlockState().setValue(BambooStalkBlock.AGE, i);
+                    return (BlockState) this.defaultBlockState().setValue(BambooStalkBlock.AGE, Integer.valueOf(i));
                 } else {
                     BlockState iblockdata1 = ctx.getLevel().getBlockState(ctx.getClickedPos().above());
 
@@ -224,7 +224,7 @@ public class BambooStalkBlock extends Block implements BonemealableBlock {
         int k = (height < world.paperConfig().maxGrowthHeight.bamboo.min || random.nextFloat() >= 0.25F) && height != (world.paperConfig().maxGrowthHeight.bamboo.max - 1) ? 0 : 1; // Paper
 
         // CraftBukkit start
-        if (org.bukkit.craftbukkit.event.CraftEventFactory.handleBlockSpreadEvent(world, pos, pos.above(), (BlockState) ((BlockState) ((BlockState) this.defaultBlockState().setValue(BambooStalkBlock.AGE, j)).setValue(BambooStalkBlock.LEAVES, blockpropertybamboosize)).setValue(BambooStalkBlock.STAGE, k), 3)) {
+        if (org.bukkit.craftbukkit.event.CraftEventFactory.handleBlockSpreadEvent(world, pos, pos.above(), (BlockState) ((BlockState) ((BlockState) this.defaultBlockState().setValue(BambooStalkBlock.AGE, Integer.valueOf(j))).setValue(BambooStalkBlock.LEAVES, blockpropertybamboosize)).setValue(BambooStalkBlock.STAGE, Integer.valueOf(k)), 3)) {
             if (shouldUpdateOthers) {
                 world.setBlock(pos.below(), (BlockState) iblockdata1.setValue(BambooStalkBlock.LEAVES, BambooLeaves.SMALL), 3);
                 world.setBlock(blockposition1, (BlockState) iblockdata2.setValue(BambooStalkBlock.LEAVES, BambooLeaves.NONE), 3);
diff --git a/src/main/java/net/minecraft/world/level/block/BedBlock.java b/src/main/java/net/minecraft/world/level/block/BedBlock.java
index 64e68bf6decc765274caaabfd34a5b2d7d82434c..cd078554d412244c4875784fbf9233f7f26413e6 100644
--- a/src/main/java/net/minecraft/world/level/block/BedBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/BedBlock.java
@@ -63,7 +63,7 @@ public class BedBlock extends HorizontalDirectionalBlock implements EntityBlock
     public BedBlock(DyeColor color, BlockBehaviour.Properties settings) {
         super(settings);
         this.color = color;
-        this.registerDefaultState((BlockState) ((BlockState) ((BlockState) this.stateDefinition.any()).setValue(BedBlock.PART, BedPart.FOOT)).setValue(BedBlock.OCCUPIED, false));
+        this.registerDefaultState((BlockState) ((BlockState) ((BlockState) this.stateDefinition.any()).setValue(BedBlock.PART, BedPart.FOOT)).setValue(BedBlock.OCCUPIED, Boolean.FALSE));
     }
 
     @Nullable
diff --git a/src/main/java/net/minecraft/world/level/block/BeehiveBlock.java b/src/main/java/net/minecraft/world/level/block/BeehiveBlock.java
index fe7daa57119af137eeb76ca2c0e54bf7903ebbca..1ffc782e2a2036b7ac462aecfb2b289ca5659a60 100644
--- a/src/main/java/net/minecraft/world/level/block/BeehiveBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/BeehiveBlock.java
@@ -63,7 +63,7 @@ public class BeehiveBlock extends BaseEntityBlock {
 
     public BeehiveBlock(BlockBehaviour.Properties settings) {
         super(settings);
-        this.registerDefaultState((BlockState) ((BlockState) ((BlockState) this.stateDefinition.any()).setValue(BeehiveBlock.HONEY_LEVEL, 0)).setValue(BeehiveBlock.FACING, Direction.NORTH));
+        this.registerDefaultState((BlockState) ((BlockState) ((BlockState) this.stateDefinition.any()).setValue(BeehiveBlock.HONEY_LEVEL, Integer.valueOf(0))).setValue(BeehiveBlock.FACING, Direction.NORTH));
     }
 
     @Override
@@ -204,7 +204,7 @@ public class BeehiveBlock extends BaseEntityBlock {
     }
 
     public void resetHoneyLevel(Level world, BlockState state, BlockPos pos) {
-        world.setBlock(pos, (BlockState) state.setValue(BeehiveBlock.HONEY_LEVEL, 0), 3);
+        world.setBlock(pos, (BlockState) state.setValue(BeehiveBlock.HONEY_LEVEL, Integer.valueOf(0)), 3);
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/BigDripleafBlock.java b/src/main/java/net/minecraft/world/level/block/BigDripleafBlock.java
index 8537581e7ca1f4efb492a2e734f46f947f36cffa..b5b96320c6684c1c8de9a4f8ed79b6b5e0823dbb 100644
--- a/src/main/java/net/minecraft/world/level/block/BigDripleafBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/BigDripleafBlock.java
@@ -67,7 +67,7 @@ public class BigDripleafBlock extends HorizontalDirectionalBlock implements Bone
 
     protected BigDripleafBlock(BlockBehaviour.Properties settings) {
         super(settings);
-        this.registerDefaultState((BlockState) ((BlockState) ((BlockState) ((BlockState) this.stateDefinition.any()).setValue(BigDripleafBlock.WATERLOGGED, false)).setValue(BigDripleafBlock.FACING, Direction.NORTH)).setValue(BigDripleafBlock.TILT, Tilt.NONE));
+        this.registerDefaultState((BlockState) ((BlockState) ((BlockState) ((BlockState) this.stateDefinition.any()).setValue(BigDripleafBlock.WATERLOGGED, Boolean.FALSE)).setValue(BigDripleafBlock.FACING, Direction.NORTH)).setValue(BigDripleafBlock.TILT, Tilt.NONE));
         this.shapesCache = this.getShapeForEachState(BigDripleafBlock::calculateShape);
     }
 
@@ -106,7 +106,7 @@ public class BigDripleafBlock extends HorizontalDirectionalBlock implements Bone
     }
 
     protected static boolean place(LevelAccessor world, BlockPos pos, FluidState fluidState, Direction direction) {
-        BlockState iblockdata = (BlockState) ((BlockState) Blocks.BIG_DRIPLEAF.defaultBlockState().setValue(BigDripleafBlock.WATERLOGGED, fluidState.isSourceOfType(Fluids.WATER))).setValue(BigDripleafBlock.FACING, direction);
+        BlockState iblockdata = (BlockState) ((BlockState) Blocks.BIG_DRIPLEAF.defaultBlockState().setValue(BigDripleafBlock.WATERLOGGED, Boolean.valueOf(fluidState.isSourceOfType(Fluids.WATER)))).setValue(BigDripleafBlock.FACING, direction);
 
         return world.setBlock(pos, iblockdata, 3);
     }
@@ -286,7 +286,7 @@ public class BigDripleafBlock extends HorizontalDirectionalBlock implements Bone
         FluidState fluid = ctx.getLevel().getFluidState(ctx.getClickedPos());
         boolean flag = iblockdata.is(Blocks.BIG_DRIPLEAF) || iblockdata.is(Blocks.BIG_DRIPLEAF_STEM);
 
-        return (BlockState) ((BlockState) this.defaultBlockState().setValue(BigDripleafBlock.WATERLOGGED, fluid.isSourceOfType(Fluids.WATER))).setValue(BigDripleafBlock.FACING, flag ? (Direction) iblockdata.getValue(BigDripleafBlock.FACING) : ctx.getHorizontalDirection().getOpposite());
+        return (BlockState) ((BlockState) this.defaultBlockState().setValue(BigDripleafBlock.WATERLOGGED, Boolean.valueOf(fluid.isSourceOfType(Fluids.WATER)))).setValue(BigDripleafBlock.FACING, flag ? (Direction) iblockdata.getValue(BigDripleafBlock.FACING) : ctx.getHorizontalDirection().getOpposite());
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/Block.java b/src/main/java/net/minecraft/world/level/block/Block.java
index 346dc2cba5db50ddf261f322552c27953ef6ee23..93df2220f6ef1a5206c6c508266811effb3c0fe9 100644
--- a/src/main/java/net/minecraft/world/level/block/Block.java
+++ b/src/main/java/net/minecraft/world/level/block/Block.java
@@ -70,7 +70,7 @@ public class Block extends BlockBehaviour implements ItemLike {
     public static final IdMapper<BlockState> BLOCK_STATE_REGISTRY = new IdMapper<>();
     private static final LoadingCache<VoxelShape, Boolean> SHAPE_FULL_BLOCK_CACHE = CacheBuilder.newBuilder().maximumSize(512L).weakKeys().build(new CacheLoader<VoxelShape, Boolean>() {
         public Boolean load(VoxelShape voxelshape) {
-            return !Shapes.joinIsNotEmpty(Shapes.block(), voxelshape, BooleanOp.NOT_SAME);
+            return Boolean.valueOf(!Shapes.joinIsNotEmpty(Shapes.block(), voxelshape, BooleanOp.NOT_SAME));
         }
     });
     public static final int UPDATE_NEIGHBORS = 1;
diff --git a/src/main/java/net/minecraft/world/level/block/BuddingAmethystBlock.java b/src/main/java/net/minecraft/world/level/block/BuddingAmethystBlock.java
index bedccb8717d08d5a60058445b04ddff149e7d36c..f3151bba6697f0141e17df5d9df46fd03af22498 100644
--- a/src/main/java/net/minecraft/world/level/block/BuddingAmethystBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/BuddingAmethystBlock.java
@@ -42,7 +42,7 @@ public class BuddingAmethystBlock extends AmethystBlock {
             }
 
             if (block != null) {
-                BlockState iblockdata2 = (BlockState) ((BlockState) block.defaultBlockState().setValue(AmethystClusterBlock.FACING, enumdirection)).setValue(AmethystClusterBlock.WATERLOGGED, iblockdata1.getFluidState().getType() == Fluids.WATER);
+                BlockState iblockdata2 = (BlockState) ((BlockState) block.defaultBlockState().setValue(AmethystClusterBlock.FACING, enumdirection)).setValue(AmethystClusterBlock.WATERLOGGED, Boolean.valueOf(iblockdata1.getFluidState().getType() == Fluids.WATER));
 
                 org.bukkit.craftbukkit.event.CraftEventFactory.handleBlockSpreadEvent(world, pos, blockposition1, iblockdata2); // CraftBukkit
             }
diff --git a/src/main/java/net/minecraft/world/level/block/ButtonBlock.java b/src/main/java/net/minecraft/world/level/block/ButtonBlock.java
index 940f9328d02b99bfc6a154032b25862431a0ba2c..90a2ea9b4ca7009e19ca010b6ddb8683dcdee32d 100644
--- a/src/main/java/net/minecraft/world/level/block/ButtonBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/ButtonBlock.java
@@ -60,7 +60,7 @@ public class ButtonBlock extends FaceAttachedHorizontalDirectionalBlock {
 
     protected ButtonBlock(BlockBehaviour.Properties settings, int pressTicks, boolean wooden, SoundEvent clickOffSound, SoundEvent clickOnSound) {
         super(settings);
-        this.registerDefaultState((BlockState) ((BlockState) ((BlockState) ((BlockState) this.stateDefinition.any()).setValue(ButtonBlock.FACING, Direction.NORTH)).setValue(ButtonBlock.POWERED, false)).setValue(ButtonBlock.FACE, AttachFace.WALL));
+        this.registerDefaultState((BlockState) ((BlockState) ((BlockState) ((BlockState) this.stateDefinition.any()).setValue(ButtonBlock.FACING, Direction.NORTH)).setValue(ButtonBlock.POWERED, Boolean.FALSE)).setValue(ButtonBlock.FACE, AttachFace.WALL));
         this.ticksToStayPressed = pressTicks;
         this.arrowsCanPress = wooden;
         this.soundOff = clickOffSound;
@@ -134,7 +134,7 @@ public class ButtonBlock extends FaceAttachedHorizontalDirectionalBlock {
     }
 
     public void press(BlockState state, Level world, BlockPos pos) {
-        world.setBlock(pos, (BlockState) state.setValue(ButtonBlock.POWERED, true), 3);
+        world.setBlock(pos, (BlockState) state.setValue(ButtonBlock.POWERED, Boolean.TRUE), 3);
         this.updateNeighbours(state, world, pos);
         world.scheduleTick(pos, (Block) this, this.ticksToStayPressed);
     }
@@ -175,7 +175,7 @@ public class ButtonBlock extends FaceAttachedHorizontalDirectionalBlock {
 
     @Override
     public void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
-        if ((Boolean) state.getValue(ButtonBlock.POWERED)) {
+        if (state.getValue(ButtonBlock.POWERED)) {
             this.checkPressed(state, world, pos);
         }
     }
@@ -219,7 +219,7 @@ public class ButtonBlock extends FaceAttachedHorizontalDirectionalBlock {
                 return;
             }
             // CraftBukkit end
-            world.setBlock(pos, (BlockState) state.setValue(ButtonBlock.POWERED, flag), 3);
+            world.setBlock(pos, (BlockState) state.setValue(ButtonBlock.POWERED, Boolean.valueOf(flag)), 3);
             this.updateNeighbours(state, world, pos);
             this.playSound((Player) null, world, pos, flag);
             world.gameEvent((Entity) entityarrow, flag ? GameEvent.BLOCK_ACTIVATE : GameEvent.BLOCK_DEACTIVATE, pos);
diff --git a/src/main/java/net/minecraft/world/level/block/CactusBlock.java b/src/main/java/net/minecraft/world/level/block/CactusBlock.java
index 1ec242205b82a5a1f10deb2312795cc5dc157a76..fb020447a843e4df66d9be1b00850dd61d92c059 100644
--- a/src/main/java/net/minecraft/world/level/block/CactusBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/CactusBlock.java
@@ -33,7 +33,7 @@ public class CactusBlock extends Block {
 
     protected CactusBlock(BlockBehaviour.Properties settings) {
         super(settings);
-        this.registerDefaultState((BlockState) ((BlockState) this.stateDefinition.any()).setValue(CactusBlock.AGE, 0));
+        this.registerDefaultState((BlockState) ((BlockState) this.stateDefinition.any()).setValue(CactusBlock.AGE, Integer.valueOf(0)));
     }
 
     @Override
@@ -61,12 +61,12 @@ public class CactusBlock extends Block {
                 int modifier = world.spigotConfig.cactusModifier; // Spigot - SPIGOT-7159: Better modifier resolution
                 if (j >= 15 || (modifier != 100 && random.nextFloat() < (modifier / (100.0f * 16)))) { // Spigot - SPIGOT-7159: Better modifier resolution
                     CraftEventFactory.handleBlockGrowEvent(world, blockposition1, this.defaultBlockState()); // CraftBukkit
-                    BlockState iblockdata1 = (BlockState) state.setValue(CactusBlock.AGE, 0);
+                    BlockState iblockdata1 = (BlockState) state.setValue(CactusBlock.AGE, Integer.valueOf(0));
 
                     world.setBlock(pos, iblockdata1, 4);
                     world.neighborChanged(iblockdata1, blockposition1, this, pos, false);
                 } else if (modifier == 100 || random.nextFloat() < (modifier / (100.0f * 16))) { // Spigot - SPIGOT-7159: Better modifier resolution
-                    world.setBlock(pos, (BlockState) state.setValue(CactusBlock.AGE, j + 1), 4);
+                    world.setBlock(pos, (BlockState) state.setValue(CactusBlock.AGE, Integer.valueOf(j + 1)), 4);
                 }
 
             }
diff --git a/src/main/java/net/minecraft/world/level/block/CakeBlock.java b/src/main/java/net/minecraft/world/level/block/CakeBlock.java
index cf5926b768139478f3ec7a75f665baf3def22797..60630b5bcf4351b5df09837208dec49a19327b01 100644
--- a/src/main/java/net/minecraft/world/level/block/CakeBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/CakeBlock.java
@@ -38,7 +38,7 @@ public class CakeBlock extends Block {
 
     protected CakeBlock(BlockBehaviour.Properties settings) {
         super(settings);
-        this.registerDefaultState((BlockState) ((BlockState) this.stateDefinition.any()).setValue(CakeBlock.BITES, 0));
+        this.registerDefaultState((BlockState) ((BlockState) this.stateDefinition.any()).setValue(CakeBlock.BITES, Integer.valueOf(0)));
     }
 
     @Override
@@ -101,7 +101,7 @@ public class CakeBlock extends Block {
 
             world.gameEvent((Entity) player, GameEvent.EAT, pos);
             if (i < 6) {
-                world.setBlock(pos, (BlockState) state.setValue(CakeBlock.BITES, i + 1), 3);
+                world.setBlock(pos, (BlockState) state.setValue(CakeBlock.BITES, Integer.valueOf(i + 1)), 3);
             } else {
                 world.removeBlock(pos, false);
                 world.gameEvent((Entity) player, GameEvent.BLOCK_DESTROY, pos);
diff --git a/src/main/java/net/minecraft/world/level/block/CampfireBlock.java b/src/main/java/net/minecraft/world/level/block/CampfireBlock.java
index a4c44cb59dee29cf227dbb51bfc1576d89dfb2e3..e83e9b2668ad9dff7067972306f3b7c2a49550b2 100644
--- a/src/main/java/net/minecraft/world/level/block/CampfireBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/CampfireBlock.java
@@ -66,7 +66,7 @@ public class CampfireBlock extends BaseEntityBlock implements SimpleWaterloggedB
         super(settings);
         this.spawnParticles = emitsParticles;
         this.fireDamage = fireDamage;
-        this.registerDefaultState((BlockState) ((BlockState) ((BlockState) ((BlockState) ((BlockState) this.stateDefinition.any()).setValue(CampfireBlock.LIT, true)).setValue(CampfireBlock.SIGNAL_FIRE, false)).setValue(CampfireBlock.WATERLOGGED, false)).setValue(CampfireBlock.FACING, Direction.NORTH));
+        this.registerDefaultState((BlockState) ((BlockState) ((BlockState) ((BlockState) ((BlockState) this.stateDefinition.any()).setValue(CampfireBlock.LIT, Boolean.TRUE)).setValue(CampfireBlock.SIGNAL_FIRE, Boolean.FALSE)).setValue(CampfireBlock.WATERLOGGED, Boolean.FALSE)).setValue(CampfireBlock.FACING, Direction.NORTH));
     }
 
     @Override
@@ -123,7 +123,7 @@ public class CampfireBlock extends BaseEntityBlock implements SimpleWaterloggedB
         BlockPos blockposition = ctx.getClickedPos();
         boolean flag = world.getFluidState(blockposition).getType() == Fluids.WATER;
 
-        return (BlockState) ((BlockState) ((BlockState) ((BlockState) this.defaultBlockState().setValue(CampfireBlock.WATERLOGGED, flag)).setValue(CampfireBlock.SIGNAL_FIRE, this.isSmokeSource(world.getBlockState(blockposition.below())))).setValue(CampfireBlock.LIT, !flag)).setValue(CampfireBlock.FACING, ctx.getHorizontalDirection());
+        return (BlockState) ((BlockState) ((BlockState) ((BlockState) this.defaultBlockState().setValue(CampfireBlock.WATERLOGGED, Boolean.valueOf(flag))).setValue(CampfireBlock.SIGNAL_FIRE, Boolean.valueOf(this.isSmokeSource(world.getBlockState(blockposition.below()))))).setValue(CampfireBlock.LIT, Boolean.valueOf(!flag))).setValue(CampfireBlock.FACING, ctx.getHorizontalDirection());
     }
 
     @Override
@@ -132,7 +132,7 @@ public class CampfireBlock extends BaseEntityBlock implements SimpleWaterloggedB
             world.scheduleTick(pos, (Fluid) Fluids.WATER, Fluids.WATER.getTickDelay(world));
         }
 
-        return direction == Direction.DOWN ? (BlockState) state.setValue(CampfireBlock.SIGNAL_FIRE, this.isSmokeSource(neighborState)) : super.updateShape(state, direction, neighborState, world, pos, neighborPos);
+        return direction == Direction.DOWN ? (BlockState) state.setValue(CampfireBlock.SIGNAL_FIRE, Boolean.valueOf(this.isSmokeSource(neighborState))) : super.updateShape(state, direction, neighborState, world, pos, neighborPos);
     }
 
     private boolean isSmokeSource(BlockState state) {
@@ -194,7 +194,7 @@ public class CampfireBlock extends BaseEntityBlock implements SimpleWaterloggedB
                 CampfireBlock.dowse((Entity) null, world, pos, state);
             }
 
-            world.setBlock(pos, (BlockState) ((BlockState) state.setValue(CampfireBlock.WATERLOGGED, true)).setValue(CampfireBlock.LIT, false), 3);
+            world.setBlock(pos, (BlockState) ((BlockState) state.setValue(CampfireBlock.WATERLOGGED, Boolean.TRUE)).setValue(CampfireBlock.LIT, Boolean.FALSE), 3);
             world.scheduleTick(pos, fluidState.getType(), fluidState.getType().getTickDelay(world));
             return true;
         } else {
@@ -212,7 +212,7 @@ public class CampfireBlock extends BaseEntityBlock implements SimpleWaterloggedB
                 return;
             }
             // CraftBukkit end
-            world.setBlock(blockposition, (BlockState) state.setValue(BlockStateProperties.LIT, true), 11);
+            world.setBlock(blockposition, (BlockState) state.setValue(BlockStateProperties.LIT, Boolean.TRUE), 11);
         }
 
     }
diff --git a/src/main/java/net/minecraft/world/level/block/CaveVines.java b/src/main/java/net/minecraft/world/level/block/CaveVines.java
index a5abb5e37dd493ca7d4574d218d55cfba1a6e72c..fef79f695dfc0dd70f61c1fef6904c34bf9ae689 100644
--- a/src/main/java/net/minecraft/world/level/block/CaveVines.java
+++ b/src/main/java/net/minecraft/world/level/block/CaveVines.java
@@ -31,7 +31,7 @@ public interface CaveVines {
     static InteractionResult use(BlockState iblockdata, Level world, BlockPos blockposition, Entity entity) {
         if ((Boolean) iblockdata.getValue(CaveVines.BERRIES)) {
             // CraftBukkit start
-            if (org.bukkit.craftbukkit.event.CraftEventFactory.callEntityChangeBlockEvent(entity, blockposition, (BlockState) iblockdata.setValue(CaveVines.BERRIES, false)).isCancelled()) {
+            if (org.bukkit.craftbukkit.event.CraftEventFactory.callEntityChangeBlockEvent(entity, blockposition, (BlockState) iblockdata.setValue(CaveVines.BERRIES, Boolean.FALSE)).isCancelled()) {
                 return InteractionResult.SUCCESS;
             }
 
@@ -51,7 +51,7 @@ public interface CaveVines {
             float f = Mth.randomBetween(world.random, 0.8F, 1.2F);
 
             world.playSound((Player) null, blockposition, SoundEvents.CAVE_VINES_PICK_BERRIES, SoundSource.BLOCKS, 1.0F, f);
-            world.setBlock(blockposition, (BlockState) iblockdata.setValue(CaveVines.BERRIES, false), 2);
+            world.setBlock(blockposition, (BlockState) iblockdata.setValue(CaveVines.BERRIES, Boolean.FALSE), 2);
             return InteractionResult.sidedSuccess(world.isClientSide);
         } else {
             return InteractionResult.PASS;
diff --git a/src/main/java/net/minecraft/world/level/block/CaveVinesBlock.java b/src/main/java/net/minecraft/world/level/block/CaveVinesBlock.java
index fc76cd43655e0f4b8a8d87f90f0a48a8678ef16c..51da478270fd6ddc8a17c73b78b870431451ce82 100644
--- a/src/main/java/net/minecraft/world/level/block/CaveVinesBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/CaveVinesBlock.java
@@ -23,7 +23,7 @@ public class CaveVinesBlock extends GrowingPlantHeadBlock implements Bonemealabl
 
     public CaveVinesBlock(BlockBehaviour.Properties settings) {
         super(settings, Direction.DOWN, CaveVinesBlock.SHAPE, false, 0.1D);
-        this.registerDefaultState((BlockState) ((BlockState) ((BlockState) this.stateDefinition.any()).setValue(CaveVinesBlock.AGE, 0)).setValue(CaveVinesBlock.BERRIES, false));
+        this.registerDefaultState((BlockState) ((BlockState) ((BlockState) this.stateDefinition.any()).setValue(CaveVinesBlock.AGE, Integer.valueOf(0))).setValue(CaveVinesBlock.BERRIES, Boolean.FALSE));
     }
 
     @Override
@@ -55,7 +55,7 @@ public class CaveVinesBlock extends GrowingPlantHeadBlock implements Bonemealabl
     @Override
     protected BlockState getGrowIntoState(BlockState state, RandomSource random, @javax.annotation.Nullable Level level) {
         final boolean value = random.nextFloat() < (level != null ? (0.11F * (level.spigotConfig.glowBerryModifier / 100.0F)) : 0.11F);
-        return (BlockState) super.getGrowIntoState(state, random).setValue(CaveVinesBlock.BERRIES, value);
+        return (BlockState) super.getGrowIntoState(state, random).setValue(CaveVinesBlock.BERRIES, Boolean.valueOf(value));
     }
     // Paper end
 
@@ -87,6 +87,6 @@ public class CaveVinesBlock extends GrowingPlantHeadBlock implements Bonemealabl
 
     @Override
     public void performBonemeal(ServerLevel world, RandomSource random, BlockPos pos, BlockState state) {
-        world.setBlock(pos, (BlockState) state.setValue(CaveVinesBlock.BERRIES, true), 2);
+        world.setBlock(pos, (BlockState) state.setValue(CaveVinesBlock.BERRIES, Boolean.TRUE), 2);
     }
 }
diff --git a/src/main/java/net/minecraft/world/level/block/CaveVinesPlantBlock.java b/src/main/java/net/minecraft/world/level/block/CaveVinesPlantBlock.java
index 9978512e878f8fd50e3a156e43e7a387ccdbcba2..a8eab2a1f074460961fd4b645a5f516fea0692be 100644
--- a/src/main/java/net/minecraft/world/level/block/CaveVinesPlantBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/CaveVinesPlantBlock.java
@@ -21,7 +21,7 @@ public class CaveVinesPlantBlock extends GrowingPlantBodyBlock implements Boneme
 
     public CaveVinesPlantBlock(BlockBehaviour.Properties settings) {
         super(settings, Direction.DOWN, CaveVinesPlantBlock.SHAPE, false);
-        this.registerDefaultState((BlockState) ((BlockState) this.stateDefinition.any()).setValue(CaveVinesPlantBlock.BERRIES, false));
+        this.registerDefaultState((BlockState) ((BlockState) this.stateDefinition.any()).setValue(CaveVinesPlantBlock.BERRIES, Boolean.FALSE));
     }
 
     @Override
@@ -61,6 +61,6 @@ public class CaveVinesPlantBlock extends GrowingPlantBodyBlock implements Boneme
 
     @Override
     public void performBonemeal(ServerLevel world, RandomSource random, BlockPos pos, BlockState state) {
-        world.setBlock(pos, (BlockState) state.setValue(CaveVinesPlantBlock.BERRIES, true), 2);
+        world.setBlock(pos, (BlockState) state.setValue(CaveVinesPlantBlock.BERRIES, Boolean.TRUE), 2);
     }
 }
diff --git a/src/main/java/net/minecraft/world/level/block/ChestBlock.java b/src/main/java/net/minecraft/world/level/block/ChestBlock.java
index fa162b7ebbee47fa2ac6153e585cd7f5c3cd33cb..6ab703311f13027ac16928a4a1c1a1c4da75fcb5 100644
--- a/src/main/java/net/minecraft/world/level/block/ChestBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/ChestBlock.java
@@ -134,7 +134,7 @@ public class ChestBlock extends AbstractChestBlock<ChestBlockEntity> implements
 
     protected ChestBlock(BlockBehaviour.Properties settings, Supplier<BlockEntityType<? extends ChestBlockEntity>> entityTypeSupplier) {
         super(settings, entityTypeSupplier);
-        this.registerDefaultState((BlockState) ((BlockState) ((BlockState) ((BlockState) this.stateDefinition.any()).setValue(ChestBlock.FACING, Direction.NORTH)).setValue(ChestBlock.TYPE, ChestType.SINGLE)).setValue(ChestBlock.WATERLOGGED, false));
+        this.registerDefaultState((BlockState) ((BlockState) ((BlockState) ((BlockState) this.stateDefinition.any()).setValue(ChestBlock.FACING, Direction.NORTH)).setValue(ChestBlock.TYPE, ChestType.SINGLE)).setValue(ChestBlock.WATERLOGGED, Boolean.FALSE));
     }
 
     public static DoubleBlockCombiner.BlockType getBlockType(BlockState state) {
@@ -217,7 +217,7 @@ public class ChestBlock extends AbstractChestBlock<ChestBlockEntity> implements
             }
         }
 
-        return (BlockState) ((BlockState) ((BlockState) this.defaultBlockState().setValue(ChestBlock.FACING, enumdirection)).setValue(ChestBlock.TYPE, blockpropertychesttype)).setValue(ChestBlock.WATERLOGGED, fluid.getType() == Fluids.WATER);
+        return (BlockState) ((BlockState) ((BlockState) this.defaultBlockState().setValue(ChestBlock.FACING, enumdirection)).setValue(ChestBlock.TYPE, blockpropertychesttype)).setValue(ChestBlock.WATERLOGGED, Boolean.valueOf(fluid.getType() == Fluids.WATER));
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/ChorusFlowerBlock.java b/src/main/java/net/minecraft/world/level/block/ChorusFlowerBlock.java
index 1cc4a1f85f99869625c9e059055643a327918695..54aedb271e1878b9502d5dc637cc793c83887fc5 100644
--- a/src/main/java/net/minecraft/world/level/block/ChorusFlowerBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/ChorusFlowerBlock.java
@@ -28,7 +28,7 @@ public class ChorusFlowerBlock extends Block {
     protected ChorusFlowerBlock(ChorusPlantBlock plantBlock, BlockBehaviour.Properties settings) {
         super(settings);
         this.plant = plantBlock;
-        this.registerDefaultState((BlockState) ((BlockState) this.stateDefinition.any()).setValue(ChorusFlowerBlock.AGE, 0));
+        this.registerDefaultState((BlockState) ((BlockState) this.stateDefinition.any()).setValue(ChorusFlowerBlock.AGE, Integer.valueOf(0)));
     }
 
     @Override
@@ -133,12 +133,12 @@ public class ChorusFlowerBlock extends Block {
     }
 
     private void placeGrownFlower(Level world, BlockPos pos, int age) {
-        world.setBlock(pos, (BlockState) this.defaultBlockState().setValue(ChorusFlowerBlock.AGE, age), 2);
+        world.setBlock(pos, (BlockState) this.defaultBlockState().setValue(ChorusFlowerBlock.AGE, Integer.valueOf(age)), 2);
         world.levelEvent(1033, pos, 0);
     }
 
     private void placeDeadFlower(Level world, BlockPos pos) {
-        world.setBlock(pos, (BlockState) this.defaultBlockState().setValue(ChorusFlowerBlock.AGE, 5), 2);
+        world.setBlock(pos, (BlockState) this.defaultBlockState().setValue(ChorusFlowerBlock.AGE, Integer.valueOf(5)), 2);
         world.levelEvent(1034, pos, 0);
     }
 
@@ -252,7 +252,7 @@ public class ChorusFlowerBlock extends Block {
         }
 
         if (!flag) {
-            world.setBlock(pos.above(k), (BlockState) Blocks.CHORUS_FLOWER.defaultBlockState().setValue(ChorusFlowerBlock.AGE, 5), 2);
+            world.setBlock(pos.above(k), (BlockState) Blocks.CHORUS_FLOWER.defaultBlockState().setValue(ChorusFlowerBlock.AGE, Integer.valueOf(5)), 2);
         }
 
     }
diff --git a/src/main/java/net/minecraft/world/level/block/CocoaBlock.java b/src/main/java/net/minecraft/world/level/block/CocoaBlock.java
index 715b976984a7bfe4aa431ed538dabcc72ec5678e..04e321b6290207360a3dec727c738212dd366052 100644
--- a/src/main/java/net/minecraft/world/level/block/CocoaBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/CocoaBlock.java
@@ -41,7 +41,7 @@ public class CocoaBlock extends HorizontalDirectionalBlock implements Bonemealab
 
     public CocoaBlock(BlockBehaviour.Properties settings) {
         super(settings);
-        this.registerDefaultState((BlockState) ((BlockState) ((BlockState) this.stateDefinition.any()).setValue(CocoaBlock.FACING, Direction.NORTH)).setValue(CocoaBlock.AGE, 0));
+        this.registerDefaultState((BlockState) ((BlockState) ((BlockState) this.stateDefinition.any()).setValue(CocoaBlock.FACING, Direction.NORTH)).setValue(CocoaBlock.AGE, Integer.valueOf(0)));
     }
 
     @Override
@@ -55,7 +55,7 @@ public class CocoaBlock extends HorizontalDirectionalBlock implements Bonemealab
             int i = (Integer) state.getValue(CocoaBlock.AGE);
 
             if (i < 2) {
-                CraftEventFactory.handleBlockGrowEvent(world, pos, (BlockState) state.setValue(CocoaBlock.AGE, i + 1), 2); // CraftBukkkit
+                CraftEventFactory.handleBlockGrowEvent(world, pos, (BlockState) state.setValue(CocoaBlock.AGE, Integer.valueOf(i + 1)), 2); // CraftBukkkit
             }
         }
 
@@ -125,7 +125,7 @@ public class CocoaBlock extends HorizontalDirectionalBlock implements Bonemealab
 
     @Override
     public void performBonemeal(ServerLevel world, RandomSource random, BlockPos pos, BlockState state) {
-        CraftEventFactory.handleBlockGrowEvent(world, pos, (BlockState) state.setValue(CocoaBlock.AGE, (Integer) state.getValue(CocoaBlock.AGE) + 1), 2); // CraftBukkit
+        CraftEventFactory.handleBlockGrowEvent(world, pos, (BlockState) state.setValue(CocoaBlock.AGE, Integer.valueOf((Integer) state.getValue(CocoaBlock.AGE) + 1)), 2); // CraftBukkit
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/CommandBlock.java b/src/main/java/net/minecraft/world/level/block/CommandBlock.java
index 2e7c03b00bc941b86df6a7f1b2b188c9f0aede22..353849d430836448df6b89f84566213c7caea18f 100644
--- a/src/main/java/net/minecraft/world/level/block/CommandBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/CommandBlock.java
@@ -38,7 +38,7 @@ public class CommandBlock extends BaseEntityBlock implements GameMasterBlock {
 
     public CommandBlock(BlockBehaviour.Properties settings, boolean auto) {
         super(settings);
-        this.registerDefaultState((BlockState) ((BlockState) ((BlockState) this.stateDefinition.any()).setValue(CommandBlock.FACING, Direction.NORTH)).setValue(CommandBlock.CONDITIONAL, false));
+        this.registerDefaultState((BlockState) ((BlockState) ((BlockState) this.stateDefinition.any()).setValue(CommandBlock.FACING, Direction.NORTH)).setValue(CommandBlock.CONDITIONAL, Boolean.FALSE));
         this.automatic = auto;
     }
 
@@ -249,7 +249,7 @@ public class CommandBlock extends BaseEntityBlock implements GameMasterBlock {
         if (i <= 0) {
             int j = Math.max(gamerules.getInt(GameRules.RULE_MAX_COMMAND_CHAIN_LENGTH), 0);
 
-            CommandBlock.LOGGER.warn("Command Block chain tried to execute more than {} steps!", j);
+            CommandBlock.LOGGER.warn("Command Block chain tried to execute more than {} steps!", Integer.valueOf(j));
         }
 
     }
diff --git a/src/main/java/net/minecraft/world/level/block/ComparatorBlock.java b/src/main/java/net/minecraft/world/level/block/ComparatorBlock.java
index 8a7faae88d9ec317b1b34a2115120ccb561d1ef9..c32e14fd9f95a38a16325dc24655509ff5883359 100644
--- a/src/main/java/net/minecraft/world/level/block/ComparatorBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/ComparatorBlock.java
@@ -33,7 +33,7 @@ public class ComparatorBlock extends DiodeBlock implements EntityBlock {
 
     public ComparatorBlock(BlockBehaviour.Properties settings) {
         super(settings);
-        this.registerDefaultState((BlockState) ((BlockState) ((BlockState) ((BlockState) this.stateDefinition.any()).setValue(ComparatorBlock.FACING, Direction.NORTH)).setValue(ComparatorBlock.POWERED, false)).setValue(ComparatorBlock.MODE, ComparatorMode.COMPARE));
+        this.registerDefaultState((BlockState) ((BlockState) ((BlockState) ((BlockState) this.stateDefinition.any()).setValue(ComparatorBlock.FACING, Direction.NORTH)).setValue(ComparatorBlock.POWERED, Boolean.FALSE)).setValue(ComparatorBlock.MODE, ComparatorMode.COMPARE));
     }
 
     @Override
@@ -159,14 +159,14 @@ public class ComparatorBlock extends DiodeBlock implements EntityBlock {
                     return;
                 }
                 // CraftBukkit end
-                world.setBlock(pos, (BlockState) state.setValue(ComparatorBlock.POWERED, false), 2);
+                world.setBlock(pos, (BlockState) state.setValue(ComparatorBlock.POWERED, Boolean.FALSE), 2);
             } else if (!flag1 && flag) {
                 // CraftBukkit start
                 if (CraftEventFactory.callRedstoneChange(world, pos, 0, 15).getNewCurrent() != 15) {
                     return;
                 }
                 // CraftBukkit end
-                world.setBlock(pos, (BlockState) state.setValue(ComparatorBlock.POWERED, true), 2);
+                world.setBlock(pos, (BlockState) state.setValue(ComparatorBlock.POWERED, Boolean.TRUE), 2);
             }
 
             this.updateNeighborsInFront(world, pos, state);
diff --git a/src/main/java/net/minecraft/world/level/block/ComposterBlock.java b/src/main/java/net/minecraft/world/level/block/ComposterBlock.java
index 564822911c25238900b361d564c5db3103900fb3..be1aef041b4b68acecc0b55e53a2bed0a03029da 100644
--- a/src/main/java/net/minecraft/world/level/block/ComposterBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/ComposterBlock.java
@@ -169,7 +169,7 @@ public class ComposterBlock extends Block implements WorldlyContainerHolder {
 
     public ComposterBlock(BlockBehaviour.Properties settings) {
         super(settings);
-        this.registerDefaultState((BlockState) ((BlockState) this.stateDefinition.any()).setValue(ComposterBlock.LEVEL, 0));
+        this.registerDefaultState((BlockState) ((BlockState) this.stateDefinition.any()).setValue(ComposterBlock.LEVEL, Integer.valueOf(0)));
     }
 
     public static void handleFill(Level world, BlockPos pos, boolean fill) {
@@ -293,7 +293,7 @@ public class ComposterBlock extends Block implements WorldlyContainerHolder {
     }
 
     static BlockState empty(BlockState state, LevelAccessor world, BlockPos pos) {
-        BlockState iblockdata1 = (BlockState) state.setValue(ComposterBlock.LEVEL, 0);
+        BlockState iblockdata1 = (BlockState) state.setValue(ComposterBlock.LEVEL, Integer.valueOf(0));
 
         world.setBlock(pos, iblockdata1, 3);
         return iblockdata1;
@@ -313,7 +313,7 @@ public class ComposterBlock extends Block implements WorldlyContainerHolder {
             return iblockdata;
         } else {
             int j = i + 1;
-            BlockState iblockdata1 = (BlockState) iblockdata.setValue(ComposterBlock.LEVEL, j);
+            BlockState iblockdata1 = (BlockState) iblockdata.setValue(ComposterBlock.LEVEL, Integer.valueOf(j));
 
             generatoraccess.setBlock(blockposition, iblockdata1, 3);
             if (j == 7) {
diff --git a/src/main/java/net/minecraft/world/level/block/CoralFanBlock.java b/src/main/java/net/minecraft/world/level/block/CoralFanBlock.java
index 86e58786c8a4caa965ea63aff50a13ae61da8c1c..c7df341cbb11eec8f57bdf0f851a6920def31379 100644
--- a/src/main/java/net/minecraft/world/level/block/CoralFanBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/CoralFanBlock.java
@@ -29,11 +29,11 @@ public class CoralFanBlock extends BaseCoralFanBlock {
     public void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
         if (!scanForWater(state, world, pos)) {
             // CraftBukkit start
-            if (org.bukkit.craftbukkit.event.CraftEventFactory.callBlockFadeEvent(world, pos, this.deadBlock.defaultBlockState().setValue(CoralFanBlock.WATERLOGGED, false)).isCancelled()) {
+            if (org.bukkit.craftbukkit.event.CraftEventFactory.callBlockFadeEvent(world, pos, this.deadBlock.defaultBlockState().setValue(CoralFanBlock.WATERLOGGED, Boolean.FALSE)).isCancelled()) {
                 return;
             }
             // CraftBukkit end
-            world.setBlock(pos, (BlockState) this.deadBlock.defaultBlockState().setValue(CoralFanBlock.WATERLOGGED, false), 2);
+            world.setBlock(pos, (BlockState) this.deadBlock.defaultBlockState().setValue(CoralFanBlock.WATERLOGGED, Boolean.FALSE), 2);
         }
 
     }
diff --git a/src/main/java/net/minecraft/world/level/block/CoralPlantBlock.java b/src/main/java/net/minecraft/world/level/block/CoralPlantBlock.java
index f980e31c4b6ba396be6ef317cffe027004a090e0..19c0ae9673bde78bcc2824d580678468970ebd46 100644
--- a/src/main/java/net/minecraft/world/level/block/CoralPlantBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/CoralPlantBlock.java
@@ -34,11 +34,11 @@ public class CoralPlantBlock extends BaseCoralPlantTypeBlock {
     public void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
         if (!scanForWater(state, world, pos)) {
             // CraftBukkit start
-            if (org.bukkit.craftbukkit.event.CraftEventFactory.callBlockFadeEvent(world, pos, this.deadBlock.defaultBlockState().setValue(CoralPlantBlock.WATERLOGGED, false)).isCancelled()) {
+            if (org.bukkit.craftbukkit.event.CraftEventFactory.callBlockFadeEvent(world, pos, this.deadBlock.defaultBlockState().setValue(CoralPlantBlock.WATERLOGGED, Boolean.FALSE)).isCancelled()) {
                 return;
             }
             // CraftBukkit end
-            world.setBlock(pos, (BlockState) this.deadBlock.defaultBlockState().setValue(CoralPlantBlock.WATERLOGGED, false), 2);
+            world.setBlock(pos, (BlockState) this.deadBlock.defaultBlockState().setValue(CoralPlantBlock.WATERLOGGED, Boolean.FALSE), 2);
         }
 
     }
diff --git a/src/main/java/net/minecraft/world/level/block/CoralWallFanBlock.java b/src/main/java/net/minecraft/world/level/block/CoralWallFanBlock.java
index f759ad7b49244a91aca4d36db2980267d46e1c23..71967d7301fc67b931bdac36066019ba6580e4c9 100644
--- a/src/main/java/net/minecraft/world/level/block/CoralWallFanBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/CoralWallFanBlock.java
@@ -29,11 +29,11 @@ public class CoralWallFanBlock extends BaseCoralWallFanBlock {
     public void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
         if (!scanForWater(state, world, pos)) {
             // CraftBukkit start
-            if (org.bukkit.craftbukkit.event.CraftEventFactory.callBlockFadeEvent(world, pos, this.deadBlock.defaultBlockState().setValue(CoralWallFanBlock.WATERLOGGED, false).setValue(CoralWallFanBlock.FACING, state.getValue(CoralWallFanBlock.FACING))).isCancelled()) {
+            if (org.bukkit.craftbukkit.event.CraftEventFactory.callBlockFadeEvent(world, pos, this.deadBlock.defaultBlockState().setValue(CoralWallFanBlock.WATERLOGGED, Boolean.FALSE).setValue(CoralWallFanBlock.FACING, state.getValue(CoralWallFanBlock.FACING))).isCancelled()) {
                 return;
             }
             // CraftBukkit end
-            world.setBlock(pos, (BlockState) ((BlockState) this.deadBlock.defaultBlockState().setValue(CoralWallFanBlock.WATERLOGGED, false)).setValue(CoralWallFanBlock.FACING, (Direction) state.getValue(CoralWallFanBlock.FACING)), 2);
+            world.setBlock(pos, (BlockState) ((BlockState) this.deadBlock.defaultBlockState().setValue(CoralWallFanBlock.WATERLOGGED, Boolean.FALSE)).setValue(CoralWallFanBlock.FACING, (Direction) state.getValue(CoralWallFanBlock.FACING)), 2);
         }
 
     }
diff --git a/src/main/java/net/minecraft/world/level/block/CropBlock.java b/src/main/java/net/minecraft/world/level/block/CropBlock.java
index 519d02a2009c4f09c9e8be7196a701f0f042012d..ff63a59b219c14be72de91724ade1b2e26449535 100644
--- a/src/main/java/net/minecraft/world/level/block/CropBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/CropBlock.java
@@ -30,7 +30,7 @@ public class CropBlock extends BushBlock implements BonemealableBlock {
 
     protected CropBlock(BlockBehaviour.Properties settings) {
         super(settings);
-        this.registerDefaultState((BlockState) ((BlockState) this.stateDefinition.any()).setValue(this.getAgeProperty(), 0));
+        this.registerDefaultState((BlockState) ((BlockState) this.stateDefinition.any()).setValue(this.getAgeProperty(), Integer.valueOf(0)));
     }
 
     @Override
@@ -56,7 +56,7 @@ public class CropBlock extends BushBlock implements BonemealableBlock {
     }
 
     public BlockState getStateForAge(int age) {
-        return (BlockState) this.defaultBlockState().setValue(this.getAgeProperty(), age);
+        return (BlockState) this.defaultBlockState().setValue(this.getAgeProperty(), Integer.valueOf(age));
     }
 
     public boolean isMaxAge(BlockState state) {
diff --git a/src/main/java/net/minecraft/world/level/block/DaylightDetectorBlock.java b/src/main/java/net/minecraft/world/level/block/DaylightDetectorBlock.java
index 16504b8be08064e61b013fa943f692816612cbd0..a850ae2b71c5a91c5d812cc40433f1c1e8b8e2f1 100644
--- a/src/main/java/net/minecraft/world/level/block/DaylightDetectorBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/DaylightDetectorBlock.java
@@ -33,7 +33,7 @@ public class DaylightDetectorBlock extends BaseEntityBlock {
 
     public DaylightDetectorBlock(BlockBehaviour.Properties settings) {
         super(settings);
-        this.registerDefaultState((BlockState) ((BlockState) ((BlockState) this.stateDefinition.any()).setValue(DaylightDetectorBlock.POWER, 0)).setValue(DaylightDetectorBlock.INVERTED, false));
+        this.registerDefaultState((BlockState) ((BlockState) ((BlockState) this.stateDefinition.any()).setValue(DaylightDetectorBlock.POWER, Integer.valueOf(0))).setValue(DaylightDetectorBlock.INVERTED, Boolean.FALSE));
     }
 
     @Override
@@ -68,7 +68,7 @@ public class DaylightDetectorBlock extends BaseEntityBlock {
         i = Mth.clamp(i, (int) 0, (int) 15);
         if ((Integer) state.getValue(DaylightDetectorBlock.POWER) != i) {
             i = org.bukkit.craftbukkit.event.CraftEventFactory.callRedstoneChange(world, pos, ((Integer) state.getValue(POWER)), i).getNewCurrent(); // CraftBukkit - Call BlockRedstoneEvent
-            world.setBlock(pos, (BlockState) state.setValue(DaylightDetectorBlock.POWER, i), 3);
+            world.setBlock(pos, (BlockState) state.setValue(DaylightDetectorBlock.POWER, Integer.valueOf(i)), 3);
         }
 
     }
diff --git a/src/main/java/net/minecraft/world/level/block/DetectorRailBlock.java b/src/main/java/net/minecraft/world/level/block/DetectorRailBlock.java
index 05dfb1790a292f9f85b641377c2ca3675726c127..fde5dd2e84ec8a42883f8afac6dd0d320261d8f5 100644
--- a/src/main/java/net/minecraft/world/level/block/DetectorRailBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/DetectorRailBlock.java
@@ -34,7 +34,7 @@ public class DetectorRailBlock extends BaseRailBlock {
 
     public DetectorRailBlock(BlockBehaviour.Properties settings) {
         super(true, settings);
-        this.registerDefaultState((BlockState) ((BlockState) ((BlockState) ((BlockState) this.stateDefinition.any()).setValue(DetectorRailBlock.POWERED, false)).setValue(DetectorRailBlock.SHAPE, RailShape.NORTH_SOUTH)).setValue(DetectorRailBlock.WATERLOGGED, false));
+        this.registerDefaultState((BlockState) ((BlockState) ((BlockState) ((BlockState) this.stateDefinition.any()).setValue(DetectorRailBlock.POWERED, Boolean.FALSE)).setValue(DetectorRailBlock.SHAPE, RailShape.NORTH_SOUTH)).setValue(DetectorRailBlock.WATERLOGGED, Boolean.FALSE));
     }
 
     @Override
@@ -95,7 +95,7 @@ public class DetectorRailBlock extends BaseRailBlock {
             // CraftBukkit end
 
             if (flag1 && !flag) {
-                iblockdata1 = (BlockState) state.setValue(DetectorRailBlock.POWERED, true);
+                iblockdata1 = (BlockState) state.setValue(DetectorRailBlock.POWERED, Boolean.TRUE);
                 world.setBlock(pos, iblockdata1, 3);
                 this.updatePowerToConnected(world, pos, iblockdata1, true);
                 world.updateNeighborsAt(pos, this);
@@ -104,7 +104,7 @@ public class DetectorRailBlock extends BaseRailBlock {
             }
 
             if (!flag1 && flag) {
-                iblockdata1 = (BlockState) state.setValue(DetectorRailBlock.POWERED, false);
+                iblockdata1 = (BlockState) state.setValue(DetectorRailBlock.POWERED, Boolean.FALSE);
                 world.setBlock(pos, iblockdata1, 3);
                 this.updatePowerToConnected(world, pos, iblockdata1, false);
                 world.updateNeighborsAt(pos, this);
diff --git a/src/main/java/net/minecraft/world/level/block/DiodeBlock.java b/src/main/java/net/minecraft/world/level/block/DiodeBlock.java
index 70530787e16ff3c1f38979dbb2efca4b988c13c7..37fe9435e6a933446e73a6ae829de1af6ef9dcde 100644
--- a/src/main/java/net/minecraft/world/level/block/DiodeBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/DiodeBlock.java
@@ -53,14 +53,14 @@ public abstract class DiodeBlock extends HorizontalDirectionalBlock {
                     return;
                 }
                 // CraftBukkit end
-                world.setBlock(pos, (BlockState) state.setValue(DiodeBlock.POWERED, false), 2);
+                world.setBlock(pos, (BlockState) state.setValue(DiodeBlock.POWERED, Boolean.FALSE), 2);
             } else if (!flag) {
                 // CraftBukkit start
                 if (CraftEventFactory.callRedstoneChange(world, pos, 0, 15).getNewCurrent() != 15) {
                     return;
                 }
                 // CraftBukkit end
-                world.setBlock(pos, (BlockState) state.setValue(DiodeBlock.POWERED, true), 2);
+                world.setBlock(pos, (BlockState) state.setValue(DiodeBlock.POWERED, Boolean.TRUE), 2);
                 if (!flag1) {
                     world.scheduleTick(pos, (Block) this, this.getDelay(state), TickPriority.VERY_HIGH);
                 }
diff --git a/src/main/java/net/minecraft/world/level/block/DispenserBlock.java b/src/main/java/net/minecraft/world/level/block/DispenserBlock.java
index dedefb0defcd3befe65471e8dadad691e56411aa..201bb68425e2f88e847fd702962718d5fde224fb 100644
--- a/src/main/java/net/minecraft/world/level/block/DispenserBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/DispenserBlock.java
@@ -57,7 +57,7 @@ public class DispenserBlock extends BaseEntityBlock {
 
     protected DispenserBlock(BlockBehaviour.Properties settings) {
         super(settings);
-        this.registerDefaultState((BlockState) ((BlockState) ((BlockState) this.stateDefinition.any()).setValue(DispenserBlock.FACING, Direction.NORTH)).setValue(DispenserBlock.TRIGGERED, false));
+        this.registerDefaultState((BlockState) ((BlockState) ((BlockState) this.stateDefinition.any()).setValue(DispenserBlock.FACING, Direction.NORTH)).setValue(DispenserBlock.TRIGGERED, Boolean.FALSE));
     }
 
     @Override
@@ -114,9 +114,9 @@ public class DispenserBlock extends BaseEntityBlock {
 
         if (flag1 && !flag2) {
             world.scheduleTick(pos, (Block) this, 4);
-            world.setBlock(pos, (BlockState) state.setValue(DispenserBlock.TRIGGERED, true), 4);
+            world.setBlock(pos, (BlockState) state.setValue(DispenserBlock.TRIGGERED, Boolean.TRUE), 4);
         } else if (!flag1 && flag2) {
-            world.setBlock(pos, (BlockState) state.setValue(DispenserBlock.TRIGGERED, false), 4);
+            world.setBlock(pos, (BlockState) state.setValue(DispenserBlock.TRIGGERED, Boolean.FALSE), 4);
         }
 
     }
diff --git a/src/main/java/net/minecraft/world/level/block/DoorBlock.java b/src/main/java/net/minecraft/world/level/block/DoorBlock.java
index fc4793fefe52adfeb0272bf5324c32c1c3946416..9c3c7365f3418e37e65d1ca379e0ae3ef88936c6 100644
--- a/src/main/java/net/minecraft/world/level/block/DoorBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/DoorBlock.java
@@ -53,7 +53,7 @@ public class DoorBlock extends Block {
 
     protected DoorBlock(BlockBehaviour.Properties settings, SoundEvent closeSound, SoundEvent openSound) {
         super(settings);
-        this.registerDefaultState((BlockState) ((BlockState) ((BlockState) ((BlockState) ((BlockState) ((BlockState) this.stateDefinition.any()).setValue(DoorBlock.FACING, Direction.NORTH)).setValue(DoorBlock.OPEN, false)).setValue(DoorBlock.HINGE, DoorHingeSide.LEFT)).setValue(DoorBlock.POWERED, false)).setValue(DoorBlock.HALF, DoubleBlockHalf.LOWER));
+        this.registerDefaultState((BlockState) ((BlockState) ((BlockState) ((BlockState) ((BlockState) ((BlockState) this.stateDefinition.any()).setValue(DoorBlock.FACING, Direction.NORTH)).setValue(DoorBlock.OPEN, Boolean.FALSE)).setValue(DoorBlock.HINGE, DoorHingeSide.LEFT)).setValue(DoorBlock.POWERED, Boolean.FALSE)).setValue(DoorBlock.HALF, DoubleBlockHalf.LOWER));
         this.closeSound = closeSound;
         this.openSound = openSound;
     }
@@ -116,7 +116,7 @@ public class DoorBlock extends Block {
         if (blockposition.getY() < world.getMaxBuildHeight() - 1 && world.getBlockState(blockposition.above()).canBeReplaced(ctx)) {
             boolean flag = world.hasNeighborSignal(blockposition) || world.hasNeighborSignal(blockposition.above());
 
-            return (BlockState) ((BlockState) ((BlockState) ((BlockState) ((BlockState) this.defaultBlockState().setValue(DoorBlock.FACING, ctx.getHorizontalDirection())).setValue(DoorBlock.HINGE, this.getHinge(ctx))).setValue(DoorBlock.POWERED, flag)).setValue(DoorBlock.OPEN, flag)).setValue(DoorBlock.HALF, DoubleBlockHalf.LOWER);
+            return (BlockState) ((BlockState) ((BlockState) ((BlockState) ((BlockState) this.defaultBlockState().setValue(DoorBlock.FACING, ctx.getHorizontalDirection())).setValue(DoorBlock.HINGE, this.getHinge(ctx))).setValue(DoorBlock.POWERED, Boolean.valueOf(flag))).setValue(DoorBlock.OPEN, Boolean.valueOf(flag))).setValue(DoorBlock.HALF, DoubleBlockHalf.LOWER);
         } else {
             return null;
         }
@@ -182,7 +182,7 @@ public class DoorBlock extends Block {
 
     public void setOpen(@Nullable Entity entity, Level world, BlockState state, BlockPos pos, boolean open) {
         if (state.is((Block) this) && (Boolean) state.getValue(DoorBlock.OPEN) != open) {
-            world.setBlock(pos, (BlockState) state.setValue(DoorBlock.OPEN, open), 10);
+            world.setBlock(pos, (BlockState) state.setValue(DoorBlock.OPEN, Boolean.valueOf(open)), 10);
             this.playSound(entity, world, pos, open);
             world.gameEvent(entity, open ? GameEvent.BLOCK_OPEN : GameEvent.BLOCK_CLOSE, pos);
         }
@@ -213,7 +213,7 @@ public class DoorBlock extends Block {
                 world.gameEvent((Entity) null, flag1 ? GameEvent.BLOCK_OPEN : GameEvent.BLOCK_CLOSE, pos);
             }
 
-            world.setBlock(pos, (BlockState) ((BlockState) state.setValue(DoorBlock.POWERED, flag1)).setValue(DoorBlock.OPEN, flag1), 2);
+            world.setBlock(pos, (BlockState) ((BlockState) state.setValue(DoorBlock.POWERED, Boolean.valueOf(flag1))).setValue(DoorBlock.OPEN, Boolean.valueOf(flag1)), 2);
         }
 
     }
diff --git a/src/main/java/net/minecraft/world/level/block/DoublePlantBlock.java b/src/main/java/net/minecraft/world/level/block/DoublePlantBlock.java
index e73835e5f34bdc8cb696cd3ab04cf57d15b1e13f..e6876ccf3d96c3bc6f4d2f8f9b1a1b3384bbb928 100644
--- a/src/main/java/net/minecraft/world/level/block/DoublePlantBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/DoublePlantBlock.java
@@ -72,7 +72,7 @@ public class DoublePlantBlock extends BushBlock {
     }
 
     public static BlockState copyWaterloggedFrom(LevelReader world, BlockPos pos, BlockState state) {
-        return state.hasProperty(BlockStateProperties.WATERLOGGED) ? (BlockState) state.setValue(BlockStateProperties.WATERLOGGED, world.isWaterAt(pos)) : state;
+        return state.hasProperty(BlockStateProperties.WATERLOGGED) ? (BlockState) state.setValue(BlockStateProperties.WATERLOGGED, Boolean.valueOf(world.isWaterAt(pos))) : state;
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/FarmBlock.java b/src/main/java/net/minecraft/world/level/block/FarmBlock.java
index d089887030ac7c7a79abca97134ba9291e244059..826a89ac817a622ca00668a7b7b8d44423927db4 100644
--- a/src/main/java/net/minecraft/world/level/block/FarmBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/FarmBlock.java
@@ -37,7 +37,7 @@ public class FarmBlock extends Block {
 
     protected FarmBlock(BlockBehaviour.Properties settings) {
         super(settings);
-        this.registerDefaultState((BlockState) ((BlockState) this.stateDefinition.any()).setValue(FarmBlock.MOISTURE, 0));
+        this.registerDefaultState((BlockState) ((BlockState) this.stateDefinition.any()).setValue(FarmBlock.MOISTURE, Integer.valueOf(0)));
     }
 
     @Override
@@ -85,12 +85,12 @@ public class FarmBlock extends Block {
 
         if (!FarmBlock.isNearWater(world, pos) && !world.isRainingAt(pos.above())) {
             if (i > 0) {
-                org.bukkit.craftbukkit.event.CraftEventFactory.handleMoistureChangeEvent(world, pos, (BlockState) state.setValue(FarmBlock.MOISTURE, i - 1), 2); // CraftBukkit
+                org.bukkit.craftbukkit.event.CraftEventFactory.handleMoistureChangeEvent(world, pos, (BlockState) state.setValue(FarmBlock.MOISTURE, Integer.valueOf(i - 1)), 2); // CraftBukkit
             } else if (!FarmBlock.isUnderCrops(world, pos)) {
                 FarmBlock.turnToDirt(state, world, pos);
             }
         } else if (i < 7) {
-            org.bukkit.craftbukkit.event.CraftEventFactory.handleMoistureChangeEvent(world, pos, (BlockState) state.setValue(FarmBlock.MOISTURE, 7), 2); // CraftBukkit
+            org.bukkit.craftbukkit.event.CraftEventFactory.handleMoistureChangeEvent(world, pos, (BlockState) state.setValue(FarmBlock.MOISTURE, Integer.valueOf(7)), 2); // CraftBukkit
         }
 
     }
diff --git a/src/main/java/net/minecraft/world/level/block/FenceGateBlock.java b/src/main/java/net/minecraft/world/level/block/FenceGateBlock.java
index a444a335727cf790e63fb9d0fd5d64657675b35c..71de4ff9a62e1db3c79436fddaa124207f4f7b9f 100644
--- a/src/main/java/net/minecraft/world/level/block/FenceGateBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/FenceGateBlock.java
@@ -47,7 +47,7 @@ public class FenceGateBlock extends HorizontalDirectionalBlock {
 
     public FenceGateBlock(BlockBehaviour.Properties settings, SoundEvent closeSound, SoundEvent openSound) {
         super(settings);
-        this.registerDefaultState((BlockState) ((BlockState) ((BlockState) ((BlockState) this.stateDefinition.any()).setValue(FenceGateBlock.OPEN, false)).setValue(FenceGateBlock.POWERED, false)).setValue(FenceGateBlock.IN_WALL, false));
+        this.registerDefaultState((BlockState) ((BlockState) ((BlockState) ((BlockState) this.stateDefinition.any()).setValue(FenceGateBlock.OPEN, Boolean.FALSE)).setValue(FenceGateBlock.POWERED, Boolean.FALSE)).setValue(FenceGateBlock.IN_WALL, Boolean.FALSE));
         this.closeSound = closeSound;
         this.openSound = openSound;
     }
@@ -66,7 +66,7 @@ public class FenceGateBlock extends HorizontalDirectionalBlock {
         } else {
             boolean flag = this.isWall(neighborState) || this.isWall(world.getBlockState(pos.relative(direction.getOpposite())));
 
-            return (BlockState) state.setValue(FenceGateBlock.IN_WALL, flag);
+            return (BlockState) state.setValue(FenceGateBlock.IN_WALL, Boolean.valueOf(flag));
         }
     }
 
@@ -108,7 +108,7 @@ public class FenceGateBlock extends HorizontalDirectionalBlock {
         Direction.Axis enumdirection_enumaxis = enumdirection.getAxis();
         boolean flag1 = enumdirection_enumaxis == Direction.Axis.Z && (this.isWall(world.getBlockState(blockposition.west())) || this.isWall(world.getBlockState(blockposition.east()))) || enumdirection_enumaxis == Direction.Axis.X && (this.isWall(world.getBlockState(blockposition.north())) || this.isWall(world.getBlockState(blockposition.south())));
 
-        return (BlockState) ((BlockState) ((BlockState) ((BlockState) this.defaultBlockState().setValue(FenceGateBlock.FACING, enumdirection)).setValue(FenceGateBlock.OPEN, flag)).setValue(FenceGateBlock.POWERED, flag)).setValue(FenceGateBlock.IN_WALL, flag1);
+        return (BlockState) ((BlockState) ((BlockState) ((BlockState) this.defaultBlockState().setValue(FenceGateBlock.FACING, enumdirection)).setValue(FenceGateBlock.OPEN, Boolean.valueOf(flag))).setValue(FenceGateBlock.POWERED, Boolean.valueOf(flag))).setValue(FenceGateBlock.IN_WALL, Boolean.valueOf(flag1));
     }
 
     private boolean isWall(BlockState state) {
@@ -118,7 +118,7 @@ public class FenceGateBlock extends HorizontalDirectionalBlock {
     @Override
     public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
         if ((Boolean) state.getValue(FenceGateBlock.OPEN)) {
-            state = (BlockState) state.setValue(FenceGateBlock.OPEN, false);
+            state = (BlockState) state.setValue(FenceGateBlock.OPEN, Boolean.FALSE);
             world.setBlock(pos, state, 10);
         } else {
             Direction enumdirection = player.getDirection();
@@ -127,7 +127,7 @@ public class FenceGateBlock extends HorizontalDirectionalBlock {
                 state = (BlockState) state.setValue(FenceGateBlock.FACING, enumdirection);
             }
 
-            state = (BlockState) state.setValue(FenceGateBlock.OPEN, true);
+            state = (BlockState) state.setValue(FenceGateBlock.OPEN, Boolean.TRUE);
             world.setBlock(pos, state, 10);
         }
 
@@ -155,7 +155,7 @@ public class FenceGateBlock extends HorizontalDirectionalBlock {
             // CraftBukkit end
 
             if ((Boolean) state.getValue(FenceGateBlock.POWERED) != flag1) {
-                world.setBlock(pos, (BlockState) ((BlockState) state.setValue(FenceGateBlock.POWERED, flag1)).setValue(FenceGateBlock.OPEN, flag1), 2);
+                world.setBlock(pos, (BlockState) ((BlockState) state.setValue(FenceGateBlock.POWERED, Boolean.valueOf(flag1))).setValue(FenceGateBlock.OPEN, Boolean.valueOf(flag1)), 2);
                 if ((Boolean) state.getValue(FenceGateBlock.OPEN) != flag1) {
                     world.playSound((Player) null, pos, flag1 ? this.openSound : this.closeSound, SoundSource.BLOCKS, 1.0F, world.getRandom().nextFloat() * 0.1F + 0.9F);
                     world.gameEvent((Entity) null, flag1 ? GameEvent.BLOCK_OPEN : GameEvent.BLOCK_CLOSE, pos);
diff --git a/src/main/java/net/minecraft/world/level/block/FireBlock.java b/src/main/java/net/minecraft/world/level/block/FireBlock.java
index 3d3f6b85c8463963d1ba557fab1de7a32cfd1a2f..fbfa4236a1d40c67711e453fd693d0124034fa8c 100644
--- a/src/main/java/net/minecraft/world/level/block/FireBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/FireBlock.java
@@ -66,7 +66,7 @@ public class FireBlock extends BaseFireBlock {
 
     public FireBlock(BlockBehaviour.Properties settings) {
         super(settings, 1.0F);
-        this.registerDefaultState((BlockState) ((BlockState) ((BlockState) ((BlockState) ((BlockState) ((BlockState) ((BlockState) this.stateDefinition.any()).setValue(FireBlock.AGE, 0)).setValue(FireBlock.NORTH, false)).setValue(FireBlock.EAST, false)).setValue(FireBlock.SOUTH, false)).setValue(FireBlock.WEST, false)).setValue(FireBlock.UP, false));
+        this.registerDefaultState((BlockState) ((BlockState) ((BlockState) ((BlockState) ((BlockState) ((BlockState) ((BlockState) this.stateDefinition.any()).setValue(FireBlock.AGE, Integer.valueOf(0))).setValue(FireBlock.NORTH, Boolean.FALSE)).setValue(FireBlock.EAST, Boolean.FALSE)).setValue(FireBlock.SOUTH, Boolean.FALSE)).setValue(FireBlock.WEST, Boolean.FALSE)).setValue(FireBlock.UP, Boolean.FALSE));
         this.shapesCache = ImmutableMap.copyOf((Map) this.stateDefinition.getPossibleStates().stream().filter((iblockdata) -> {
             return (Integer) iblockdata.getValue(FireBlock.AGE) == 0;
         }).collect(Collectors.toMap(Function.identity(), FireBlock::calculateShape)));
@@ -123,7 +123,7 @@ public class FireBlock extends BaseFireBlock {
 
     @Override
     public VoxelShape getShape(BlockState state, BlockGetter world, BlockPos pos, CollisionContext context) {
-        return (VoxelShape) this.shapesCache.get(state.setValue(FireBlock.AGE, 0));
+        return (VoxelShape) this.shapesCache.get(state.setValue(FireBlock.AGE, Integer.valueOf(0)));
     }
 
     @Override
@@ -145,7 +145,7 @@ public class FireBlock extends BaseFireBlock {
                 BooleanProperty blockstateboolean = (BooleanProperty) FireBlock.PROPERTY_BY_DIRECTION.get(enumdirection);
 
                 if (blockstateboolean != null) {
-                    iblockdata1 = (BlockState) iblockdata1.setValue(blockstateboolean, this.canBurn(world.getBlockState(pos.relative(enumdirection))));
+                    iblockdata1 = (BlockState) iblockdata1.setValue(blockstateboolean, Boolean.valueOf(this.canBurn(world.getBlockState(pos.relative(enumdirection)))));
                 }
             }
 
@@ -180,7 +180,7 @@ public class FireBlock extends BaseFireBlock {
                 int j = Math.min(15, i + random.nextInt(3) / 2);
 
                 if (i != j) {
-                    state = (BlockState) state.setValue(FireBlock.AGE, j);
+                    state = (BlockState) state.setValue(FireBlock.AGE, Integer.valueOf(j));
                     world.setBlock(pos, state, 4);
                 }
 
@@ -314,7 +314,7 @@ public class FireBlock extends BaseFireBlock {
     private BlockState getStateWithAge(LevelAccessor world, BlockPos pos, int age) {
         BlockState iblockdata = getState(world, pos);
 
-        return iblockdata.is(Blocks.FIRE) ? (BlockState) iblockdata.setValue(FireBlock.AGE, age) : iblockdata;
+        return iblockdata.is(Blocks.FIRE) ? (BlockState) iblockdata.setValue(FireBlock.AGE, Integer.valueOf(age)) : iblockdata;
     }
 
     private boolean isValidFireLocation(BlockGetter world, BlockPos pos) {
diff --git a/src/main/java/net/minecraft/world/level/block/GrowingPlantHeadBlock.java b/src/main/java/net/minecraft/world/level/block/GrowingPlantHeadBlock.java
index 3a1aa4e2405090ccebefb7f5944f36462929e221..ebe3598319e1d066d73ac943c30c28500dc08440 100644
--- a/src/main/java/net/minecraft/world/level/block/GrowingPlantHeadBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/GrowingPlantHeadBlock.java
@@ -25,12 +25,12 @@ public abstract class GrowingPlantHeadBlock extends GrowingPlantBlock implements
     protected GrowingPlantHeadBlock(BlockBehaviour.Properties settings, Direction growthDirection, VoxelShape outlineShape, boolean tickWater, double growthChance) {
         super(settings, growthDirection, outlineShape, tickWater);
         this.growPerTickProbability = growthChance;
-        this.registerDefaultState((BlockState) ((BlockState) this.stateDefinition.any()).setValue(GrowingPlantHeadBlock.AGE, 0));
+        this.registerDefaultState((BlockState) ((BlockState) this.stateDefinition.any()).setValue(GrowingPlantHeadBlock.AGE, Integer.valueOf(0)));
     }
 
     @Override
     public BlockState getStateForPlacement(LevelAccessor world) {
-        return (BlockState) this.defaultBlockState().setValue(GrowingPlantHeadBlock.AGE, world.getRandom().nextInt(25));
+        return (BlockState) this.defaultBlockState().setValue(GrowingPlantHeadBlock.AGE, Integer.valueOf(world.getRandom().nextInt(25)));
     }
 
     @Override
@@ -73,7 +73,7 @@ public abstract class GrowingPlantHeadBlock extends GrowingPlantBlock implements
     }
 
     public BlockState getMaxAgeState(BlockState state) {
-        return (BlockState) state.setValue(GrowingPlantHeadBlock.AGE, 25);
+        return (BlockState) state.setValue(GrowingPlantHeadBlock.AGE, Integer.valueOf(25));
     }
 
     public boolean isMaxAge(BlockState state) {
@@ -123,7 +123,7 @@ public abstract class GrowingPlantHeadBlock extends GrowingPlantBlock implements
         int j = this.getBlocksToGrowWhenBonemealed(random);
 
         for (int k = 0; k < j && this.canGrowInto(world.getBlockState(blockposition1)); ++k) {
-            world.setBlockAndUpdate(blockposition1, (BlockState) state.setValue(GrowingPlantHeadBlock.AGE, i));
+            world.setBlockAndUpdate(blockposition1, (BlockState) state.setValue(GrowingPlantHeadBlock.AGE, Integer.valueOf(i)));
             blockposition1 = blockposition1.relative(this.growthDirection);
             i = Math.min(i + 1, 25);
         }
diff --git a/src/main/java/net/minecraft/world/level/block/JukeboxBlock.java b/src/main/java/net/minecraft/world/level/block/JukeboxBlock.java
index 97d49d2a356968978efa6523fcb4efa8967f592e..1ac343e58bd66e3acb0b57004f8ea158e4a4c525 100644
--- a/src/main/java/net/minecraft/world/level/block/JukeboxBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/JukeboxBlock.java
@@ -33,7 +33,7 @@ public class JukeboxBlock extends BaseEntityBlock {
 
     protected JukeboxBlock(BlockBehaviour.Properties settings) {
         super(settings);
-        this.registerDefaultState((BlockState) ((BlockState) this.stateDefinition.any()).setValue(JukeboxBlock.HAS_RECORD, false));
+        this.registerDefaultState((BlockState) ((BlockState) this.stateDefinition.any()).setValue(JukeboxBlock.HAS_RECORD, Boolean.FALSE));
     }
 
     @Override
@@ -42,7 +42,7 @@ public class JukeboxBlock extends BaseEntityBlock {
         CompoundTag nbttagcompound = BlockItem.getBlockEntityData(itemStack);
 
         if (nbttagcompound != null && nbttagcompound.contains("RecordItem")) {
-            world.setBlock(pos, (BlockState) state.setValue(JukeboxBlock.HAS_RECORD, true), 2);
+            world.setBlock(pos, (BlockState) state.setValue(JukeboxBlock.HAS_RECORD, Boolean.TRUE), 2);
         }
 
     }
@@ -51,7 +51,7 @@ public class JukeboxBlock extends BaseEntityBlock {
     public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
         if ((Boolean) state.getValue(JukeboxBlock.HAS_RECORD)) {
             this.dropRecording(world, pos);
-            state = (BlockState) state.setValue(JukeboxBlock.HAS_RECORD, false);
+            state = (BlockState) state.setValue(JukeboxBlock.HAS_RECORD, Boolean.FALSE);
             world.gameEvent(GameEvent.JUKEBOX_STOP_PLAY, pos, GameEvent.Context.of(state));
             world.setBlock(pos, state, 2);
             world.gameEvent(GameEvent.BLOCK_CHANGE, pos, GameEvent.Context.of(player, state));
@@ -75,7 +75,7 @@ public class JukeboxBlock extends BaseEntityBlock {
             tileentityjukebox.setRecord(stack);
             // CraftBukkit end
             tileentityjukebox.playRecord();
-            world.setBlock(pos, (BlockState) state.setValue(JukeboxBlock.HAS_RECORD, true), 2);
+            world.setBlock(pos, (BlockState) state.setValue(JukeboxBlock.HAS_RECORD, Boolean.TRUE), 2);
             world.gameEvent(GameEvent.BLOCK_CHANGE, pos, GameEvent.Context.of(user, state));
         }
 
diff --git a/src/main/java/net/minecraft/world/level/block/LayeredCauldronBlock.java b/src/main/java/net/minecraft/world/level/block/LayeredCauldronBlock.java
index 1a90860bc39afb8bade96a5c6c40861dbb68c21e..fa6f68b3c1a01a564d73d71e4b4748f850230587 100644
--- a/src/main/java/net/minecraft/world/level/block/LayeredCauldronBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/LayeredCauldronBlock.java
@@ -40,7 +40,7 @@ public class LayeredCauldronBlock extends AbstractCauldronBlock {
     public LayeredCauldronBlock(BlockBehaviour.Properties settings, Predicate<Biome.Precipitation> precipitationPredicate, Map<Item, CauldronInteraction> behaviorMap) {
         super(settings, behaviorMap);
         this.fillPredicate = precipitationPredicate;
-        this.registerDefaultState((BlockState) ((BlockState) this.stateDefinition.any()).setValue(LayeredCauldronBlock.LEVEL, 1));
+        this.registerDefaultState((BlockState) ((BlockState) this.stateDefinition.any()).setValue(LayeredCauldronBlock.LEVEL, Integer.valueOf(1)));
     }
 
     @Override
@@ -91,7 +91,7 @@ public class LayeredCauldronBlock extends AbstractCauldronBlock {
 
     public static boolean lowerFillLevel(BlockState iblockdata, Level world, BlockPos blockposition, Entity entity, CauldronLevelChangeEvent.ChangeReason reason) {
         int i = (Integer) iblockdata.getValue(LayeredCauldronBlock.LEVEL) - 1;
-        BlockState iblockdata1 = i == 0 ? Blocks.CAULDRON.defaultBlockState() : (BlockState) iblockdata.setValue(LayeredCauldronBlock.LEVEL, i);
+        BlockState iblockdata1 = i == 0 ? Blocks.CAULDRON.defaultBlockState() : (BlockState) iblockdata.setValue(LayeredCauldronBlock.LEVEL, Integer.valueOf(i));
 
         return LayeredCauldronBlock.changeLevel(iblockdata, world, blockposition, iblockdata1, entity, reason);
     }
@@ -137,7 +137,7 @@ public class LayeredCauldronBlock extends AbstractCauldronBlock {
     @Override
     protected void receiveStalactiteDrip(BlockState state, Level world, BlockPos pos, Fluid fluid) {
         if (!this.isFull(state)) {
-            BlockState iblockdata1 = (BlockState) state.setValue(LayeredCauldronBlock.LEVEL, (Integer) state.getValue(LayeredCauldronBlock.LEVEL) + 1);
+            BlockState iblockdata1 = (BlockState) state.setValue(LayeredCauldronBlock.LEVEL, Integer.valueOf((Integer) state.getValue(LayeredCauldronBlock.LEVEL) + 1));
 
             // CraftBukkit start
             if (!LayeredCauldronBlock.changeLevel(state, world, pos, iblockdata1, null, CauldronLevelChangeEvent.ChangeReason.NATURAL_FILL)) {
diff --git a/src/main/java/net/minecraft/world/level/block/LeavesBlock.java b/src/main/java/net/minecraft/world/level/block/LeavesBlock.java
index 2947c76329e4c8d67a7f50b0013d7062274fe992..07de3be0f4918343550850467f2ba5c6451d7359 100644
--- a/src/main/java/net/minecraft/world/level/block/LeavesBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/LeavesBlock.java
@@ -33,7 +33,7 @@ public class LeavesBlock extends Block implements SimpleWaterloggedBlock {
 
     public LeavesBlock(BlockBehaviour.Properties settings) {
         super(settings);
-        this.registerDefaultState((BlockState) ((BlockState) ((BlockState) ((BlockState) this.stateDefinition.any()).setValue(LeavesBlock.DISTANCE, 7)).setValue(LeavesBlock.PERSISTENT, false)).setValue(LeavesBlock.WATERLOGGED, false));
+        this.registerDefaultState((BlockState) ((BlockState) ((BlockState) ((BlockState) this.stateDefinition.any()).setValue(LeavesBlock.DISTANCE, Integer.valueOf(7))).setValue(LeavesBlock.PERSISTENT, Boolean.FALSE)).setValue(LeavesBlock.WATERLOGGED, Boolean.FALSE));
     }
 
     @Override
@@ -108,7 +108,7 @@ public class LeavesBlock extends Block implements SimpleWaterloggedBlock {
             }
         }
 
-        return (BlockState) state.setValue(LeavesBlock.DISTANCE, i);
+        return (BlockState) state.setValue(LeavesBlock.DISTANCE, Integer.valueOf(i));
     }
 
     private static int getDistanceAt(BlockState state) {
@@ -146,7 +146,7 @@ public class LeavesBlock extends Block implements SimpleWaterloggedBlock {
     @Override
     public BlockState getStateForPlacement(BlockPlaceContext ctx) {
         FluidState fluid = ctx.getLevel().getFluidState(ctx.getClickedPos());
-        BlockState iblockdata = (BlockState) ((BlockState) this.defaultBlockState().setValue(LeavesBlock.PERSISTENT, true)).setValue(LeavesBlock.WATERLOGGED, fluid.getType() == Fluids.WATER);
+        BlockState iblockdata = (BlockState) ((BlockState) this.defaultBlockState().setValue(LeavesBlock.PERSISTENT, Boolean.TRUE)).setValue(LeavesBlock.WATERLOGGED, Boolean.valueOf(fluid.getType() == Fluids.WATER));
 
         return LeavesBlock.updateDistance(iblockdata, ctx.getLevel(), ctx.getClickedPos());
     }
diff --git a/src/main/java/net/minecraft/world/level/block/LecternBlock.java b/src/main/java/net/minecraft/world/level/block/LecternBlock.java
index 5ef0705bae9b4ca2cda4f17aeefc0fe657040160..b71fb668553b1d9fc387cd565de28ad17a4d2adf 100644
--- a/src/main/java/net/minecraft/world/level/block/LecternBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/LecternBlock.java
@@ -54,7 +54,7 @@ public class LecternBlock extends BaseEntityBlock {
 
     protected LecternBlock(BlockBehaviour.Properties settings) {
         super(settings);
-        this.registerDefaultState((BlockState) ((BlockState) ((BlockState) ((BlockState) this.stateDefinition.any()).setValue(LecternBlock.FACING, Direction.NORTH)).setValue(LecternBlock.POWERED, false)).setValue(LecternBlock.HAS_BOOK, false));
+        this.registerDefaultState((BlockState) ((BlockState) ((BlockState) ((BlockState) this.stateDefinition.any()).setValue(LecternBlock.FACING, Direction.NORTH)).setValue(LecternBlock.POWERED, Boolean.FALSE)).setValue(LecternBlock.HAS_BOOK, Boolean.FALSE));
     }
 
     @Override
@@ -87,7 +87,7 @@ public class LecternBlock extends BaseEntityBlock {
             }
         }
 
-        return (BlockState) ((BlockState) this.defaultBlockState().setValue(LecternBlock.FACING, ctx.getHorizontalDirection().getOpposite())).setValue(LecternBlock.HAS_BOOK, flag);
+        return (BlockState) ((BlockState) this.defaultBlockState().setValue(LecternBlock.FACING, ctx.getHorizontalDirection().getOpposite())).setValue(LecternBlock.HAS_BOOK, Boolean.valueOf(flag));
     }
 
     @Override
@@ -158,7 +158,7 @@ public class LecternBlock extends BaseEntityBlock {
     }
 
     public static void resetBookState(Level world, BlockPos pos, BlockState state, boolean hasBook) {
-        world.setBlock(pos, (BlockState) ((BlockState) state.setValue(LecternBlock.POWERED, false)).setValue(LecternBlock.HAS_BOOK, hasBook), 3);
+        world.setBlock(pos, (BlockState) ((BlockState) state.setValue(LecternBlock.POWERED, Boolean.FALSE)).setValue(LecternBlock.HAS_BOOK, Boolean.valueOf(hasBook)), 3);
         LecternBlock.updateBelow(world, pos, state);
     }
 
@@ -169,7 +169,7 @@ public class LecternBlock extends BaseEntityBlock {
     }
 
     private static void changePowered(Level world, BlockPos pos, BlockState state, boolean powered) {
-        world.setBlock(pos, (BlockState) state.setValue(LecternBlock.POWERED, powered), 3);
+        world.setBlock(pos, (BlockState) state.setValue(LecternBlock.POWERED, Boolean.valueOf(powered)), 3);
         LecternBlock.updateBelow(world, pos, state);
     }
 
diff --git a/src/main/java/net/minecraft/world/level/block/LeverBlock.java b/src/main/java/net/minecraft/world/level/block/LeverBlock.java
index 057ff8ba1c924c032a03389dcf4f99b4b386fb0a..e6403be1ee798593e1e7014b50f212c06efdb2da 100644
--- a/src/main/java/net/minecraft/world/level/block/LeverBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/LeverBlock.java
@@ -42,7 +42,7 @@ public class LeverBlock extends FaceAttachedHorizontalDirectionalBlock {
 
     protected LeverBlock(BlockBehaviour.Properties settings) {
         super(settings);
-        this.registerDefaultState((BlockState) ((BlockState) ((BlockState) ((BlockState) this.stateDefinition.any()).setValue(LeverBlock.FACING, Direction.NORTH)).setValue(LeverBlock.POWERED, false)).setValue(LeverBlock.FACE, AttachFace.WALL));
+        this.registerDefaultState((BlockState) ((BlockState) ((BlockState) ((BlockState) this.stateDefinition.any()).setValue(LeverBlock.FACING, Direction.NORTH)).setValue(LeverBlock.POWERED, Boolean.FALSE)).setValue(LeverBlock.FACE, AttachFace.WALL));
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/LightningRodBlock.java b/src/main/java/net/minecraft/world/level/block/LightningRodBlock.java
index da3b301a42a93c891d083a6e02d1be8ed35adf1d..459cfad75908eb57ebf06e27c27fa0b7902f171f 100644
--- a/src/main/java/net/minecraft/world/level/block/LightningRodBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/LightningRodBlock.java
@@ -46,7 +46,7 @@ public class LightningRodBlock extends RodBlock implements SimpleWaterloggedBloc
 
     public LightningRodBlock(BlockBehaviour.Properties settings) {
         super(settings);
-        this.registerDefaultState((BlockState) ((BlockState) ((BlockState) ((BlockState) this.stateDefinition.any()).setValue(LightningRodBlock.FACING, Direction.UP)).setValue(LightningRodBlock.WATERLOGGED, false)).setValue(LightningRodBlock.POWERED, false));
+        this.registerDefaultState((BlockState) ((BlockState) ((BlockState) ((BlockState) this.stateDefinition.any()).setValue(LightningRodBlock.FACING, Direction.UP)).setValue(LightningRodBlock.WATERLOGGED, Boolean.FALSE)).setValue(LightningRodBlock.POWERED, Boolean.FALSE));
     }
 
     @Override
@@ -54,7 +54,7 @@ public class LightningRodBlock extends RodBlock implements SimpleWaterloggedBloc
         FluidState fluid = ctx.getLevel().getFluidState(ctx.getClickedPos());
         boolean flag = fluid.getType() == Fluids.WATER;
 
-        return (BlockState) ((BlockState) this.defaultBlockState().setValue(LightningRodBlock.FACING, ctx.getClickedFace())).setValue(LightningRodBlock.WATERLOGGED, flag);
+        return (BlockState) ((BlockState) this.defaultBlockState().setValue(LightningRodBlock.FACING, ctx.getClickedFace())).setValue(LightningRodBlock.WATERLOGGED, Boolean.valueOf(flag));
     }
 
     @Override
@@ -94,7 +94,7 @@ public class LightningRodBlock extends RodBlock implements SimpleWaterloggedBloc
             return;
         }
         // CraftBukkit end
-        world.setBlock(pos, (BlockState) state.setValue(LightningRodBlock.POWERED, true), 3);
+        world.setBlock(pos, (BlockState) state.setValue(LightningRodBlock.POWERED, Boolean.TRUE), 3);
         this.updateNeighbours(state, world, pos);
         world.scheduleTick(pos, (Block) this, 8);
         world.levelEvent(3002, pos, ((Direction) state.getValue(LightningRodBlock.FACING)).getAxis().ordinal());
@@ -106,7 +106,7 @@ public class LightningRodBlock extends RodBlock implements SimpleWaterloggedBloc
 
     @Override
     public void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
-        world.setBlock(pos, (BlockState) state.setValue(LightningRodBlock.POWERED, false), 3);
+        world.setBlock(pos, (BlockState) state.setValue(LightningRodBlock.POWERED, Boolean.FALSE), 3);
         this.updateNeighbours(state, world, pos);
     }
 
@@ -132,7 +132,7 @@ public class LightningRodBlock extends RodBlock implements SimpleWaterloggedBloc
     public void onPlace(BlockState state, Level world, BlockPos pos, BlockState oldState, boolean notify) {
         if (!state.is(oldState.getBlock())) {
             if ((Boolean) state.getValue(LightningRodBlock.POWERED) && !world.getBlockTicks().hasScheduledTick(pos, this)) {
-                world.setBlock(pos, (BlockState) state.setValue(LightningRodBlock.POWERED, false), 18);
+                world.setBlock(pos, (BlockState) state.setValue(LightningRodBlock.POWERED, Boolean.FALSE), 18);
             }
 
         }
diff --git a/src/main/java/net/minecraft/world/level/block/LiquidBlock.java b/src/main/java/net/minecraft/world/level/block/LiquidBlock.java
index 43e8ef1d6a65d4fd3fe53a587639ffb814368217..41febd891a1ddf0eadc8b5063b3f12d95e41eb18 100644
--- a/src/main/java/net/minecraft/world/level/block/LiquidBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/LiquidBlock.java
@@ -48,7 +48,7 @@ public class LiquidBlock extends Block implements BucketPickup {
         }
 
         this.stateCache.add(fluid.getFlowing(8, true));
-        this.registerDefaultState((BlockState) ((BlockState) this.stateDefinition.any()).setValue(LiquidBlock.LEVEL, 0));
+        this.registerDefaultState((BlockState) ((BlockState) this.stateDefinition.any()).setValue(LiquidBlock.LEVEL, Integer.valueOf(0)));
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/MultifaceSpreader.java b/src/main/java/net/minecraft/world/level/block/MultifaceSpreader.java
index c8e304b8131563ba8d9b103f537abf910c049d03..64ad4c2ed5529ae5538e32239953efe69d749658 100644
--- a/src/main/java/net/minecraft/world/level/block/MultifaceSpreader.java
+++ b/src/main/java/net/minecraft/world/level/block/MultifaceSpreader.java
@@ -45,8 +45,8 @@ public class MultifaceSpreader {
         return (Long) Direction.stream().filter((enumdirection) -> {
             return this.config.canSpreadFrom(state, enumdirection);
         }).map((enumdirection) -> {
-            return this.spreadFromFaceTowardAllDirections(state, world, pos, enumdirection, markForPostProcessing);
-        }).reduce(0L, Long::sum);
+            return Long.valueOf(this.spreadFromFaceTowardAllDirections(state, world, pos, enumdirection, markForPostProcessing));
+        }).reduce(Long.valueOf(0L), Long::sum);
     }
 
     public Optional<MultifaceSpreader.SpreadPos> spreadFromFaceTowardRandomDirection(BlockState state, LevelAccessor world, BlockPos pos, Direction direction, RandomSource random, boolean markForPostProcessing) {
diff --git a/src/main/java/net/minecraft/world/level/block/NetherWartBlock.java b/src/main/java/net/minecraft/world/level/block/NetherWartBlock.java
index e55720c4d2fbdf6aae526910e87a67c29cf906fd..8f4c9920bdb3ef9e1150ec24675af4e4c37199f1 100644
--- a/src/main/java/net/minecraft/world/level/block/NetherWartBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/NetherWartBlock.java
@@ -22,7 +22,7 @@ public class NetherWartBlock extends BushBlock {
 
     protected NetherWartBlock(BlockBehaviour.Properties settings) {
         super(settings);
-        this.registerDefaultState((BlockState) ((BlockState) this.stateDefinition.any()).setValue(NetherWartBlock.AGE, 0));
+        this.registerDefaultState((BlockState) ((BlockState) this.stateDefinition.any()).setValue(NetherWartBlock.AGE, Integer.valueOf(0)));
     }
 
     @Override
@@ -45,7 +45,7 @@ public class NetherWartBlock extends BushBlock {
         int i = (Integer) state.getValue(NetherWartBlock.AGE);
 
         if (i < 3 && random.nextFloat() < (world.spigotConfig.wartModifier / (100.0f * 10))) { // Spigot - SPIGOT-7159: Better modifier resolution
-            state = (BlockState) state.setValue(NetherWartBlock.AGE, i + 1);
+            state = (BlockState) state.setValue(NetherWartBlock.AGE, Integer.valueOf(i + 1));
             org.bukkit.craftbukkit.event.CraftEventFactory.handleBlockGrowEvent(world, pos, state, 2); // CraftBukkit
         }
 
diff --git a/src/main/java/net/minecraft/world/level/block/NoteBlock.java b/src/main/java/net/minecraft/world/level/block/NoteBlock.java
index df7965c86b9c9e89b07b76c75b638d391ea6cc34..2d2da0c9af7ba1e0878bc787fdbc7404274a73db 100644
--- a/src/main/java/net/minecraft/world/level/block/NoteBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/NoteBlock.java
@@ -39,7 +39,7 @@ public class NoteBlock extends Block {
 
     public NoteBlock(BlockBehaviour.Properties settings) {
         super(settings);
-        this.registerDefaultState((BlockState) ((BlockState) ((BlockState) ((BlockState) this.stateDefinition.any()).setValue(NoteBlock.INSTRUMENT, NoteBlockInstrument.HARP)).setValue(NoteBlock.NOTE, 0)).setValue(NoteBlock.POWERED, false));
+        this.registerDefaultState((BlockState) ((BlockState) ((BlockState) ((BlockState) this.stateDefinition.any()).setValue(NoteBlock.INSTRUMENT, NoteBlockInstrument.HARP)).setValue(NoteBlock.NOTE, Integer.valueOf(0))).setValue(NoteBlock.POWERED, Boolean.FALSE));
     }
 
     private static boolean isFeatureFlagEnabled(LevelAccessor world) {
@@ -80,7 +80,7 @@ public class NoteBlock extends Block {
                 state = world.getBlockState(pos); // CraftBukkit - SPIGOT-5617: update in case changed in event
             }
 
-            world.setBlock(pos, (BlockState) state.setValue(NoteBlock.POWERED, flag1), 3);
+            world.setBlock(pos, (BlockState) state.setValue(NoteBlock.POWERED, Boolean.valueOf(flag1)), 3);
         }
 
     }
diff --git a/src/main/java/net/minecraft/world/level/block/ObserverBlock.java b/src/main/java/net/minecraft/world/level/block/ObserverBlock.java
index 7b45d6b9a005036ca5051d089a7be792eb87012f..81b94545dcd2d2ca10222476c0f4291191679804 100644
--- a/src/main/java/net/minecraft/world/level/block/ObserverBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/ObserverBlock.java
@@ -21,7 +21,7 @@ public class ObserverBlock extends DirectionalBlock {
 
     public ObserverBlock(BlockBehaviour.Properties settings) {
         super(settings);
-        this.registerDefaultState((BlockState) ((BlockState) ((BlockState) this.stateDefinition.any()).setValue(ObserverBlock.FACING, Direction.SOUTH)).setValue(ObserverBlock.POWERED, false));
+        this.registerDefaultState((BlockState) ((BlockState) ((BlockState) this.stateDefinition.any()).setValue(ObserverBlock.FACING, Direction.SOUTH)).setValue(ObserverBlock.POWERED, Boolean.FALSE));
     }
 
     @Override
@@ -47,14 +47,14 @@ public class ObserverBlock extends DirectionalBlock {
                 return;
             }
             // CraftBukkit end
-            world.setBlock(pos, (BlockState) state.setValue(ObserverBlock.POWERED, false), 2);
+            world.setBlock(pos, (BlockState) state.setValue(ObserverBlock.POWERED, Boolean.FALSE), 2);
         } else {
             // CraftBukkit start
             if (CraftEventFactory.callRedstoneChange(world, pos, 0, 15).getNewCurrent() != 15) {
                 return;
             }
             // CraftBukkit end
-            world.setBlock(pos, (BlockState) state.setValue(ObserverBlock.POWERED, true), 2);
+            world.setBlock(pos, (BlockState) state.setValue(ObserverBlock.POWERED, Boolean.TRUE), 2);
             world.scheduleTick(pos, (Block) this, 2);
         }
 
@@ -104,7 +104,7 @@ public class ObserverBlock extends DirectionalBlock {
     public void onPlace(BlockState state, Level world, BlockPos pos, BlockState oldState, boolean notify) {
         if (!state.is(oldState.getBlock())) {
             if (!world.isClientSide() && (Boolean) state.getValue(ObserverBlock.POWERED) && !world.getBlockTicks().hasScheduledTick(pos, this)) {
-                BlockState iblockdata2 = (BlockState) state.setValue(ObserverBlock.POWERED, false);
+                BlockState iblockdata2 = (BlockState) state.setValue(ObserverBlock.POWERED, Boolean.FALSE);
 
                 world.setBlock(pos, iblockdata2, 18);
                 this.updateNeighborsInFront(world, pos, iblockdata2);
@@ -117,7 +117,7 @@ public class ObserverBlock extends DirectionalBlock {
     public void onRemove(BlockState state, Level world, BlockPos pos, BlockState newState, boolean moved) {
         if (!state.is(newState.getBlock())) {
             if (!world.isClientSide && (Boolean) state.getValue(ObserverBlock.POWERED) && world.getBlockTicks().hasScheduledTick(pos, this)) {
-                this.updateNeighborsInFront(world, pos, (BlockState) state.setValue(ObserverBlock.POWERED, false));
+                this.updateNeighborsInFront(world, pos, (BlockState) state.setValue(ObserverBlock.POWERED, Boolean.FALSE));
             }
 
         }
diff --git a/src/main/java/net/minecraft/world/level/block/PointedDripstoneBlock.java b/src/main/java/net/minecraft/world/level/block/PointedDripstoneBlock.java
index e78fdd317d59cfca6a28deb6e0bd02aabe91e930..18fe68d11f58c3ec3663b25145ca4bc37eec8ce3 100644
--- a/src/main/java/net/minecraft/world/level/block/PointedDripstoneBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/PointedDripstoneBlock.java
@@ -82,7 +82,7 @@ public class PointedDripstoneBlock extends Block implements Fallable, SimpleWate
 
     public PointedDripstoneBlock(BlockBehaviour.Properties settings) {
         super(settings);
-        this.registerDefaultState((BlockState) ((BlockState) ((BlockState) ((BlockState) this.stateDefinition.any()).setValue(PointedDripstoneBlock.TIP_DIRECTION, Direction.UP)).setValue(PointedDripstoneBlock.THICKNESS, DripstoneThickness.TIP)).setValue(PointedDripstoneBlock.WATERLOGGED, false));
+        this.registerDefaultState((BlockState) ((BlockState) ((BlockState) ((BlockState) this.stateDefinition.any()).setValue(PointedDripstoneBlock.TIP_DIRECTION, Direction.UP)).setValue(PointedDripstoneBlock.THICKNESS, DripstoneThickness.TIP)).setValue(PointedDripstoneBlock.WATERLOGGED, Boolean.FALSE));
     }
 
     @Override
@@ -258,7 +258,7 @@ public class PointedDripstoneBlock extends Block implements Fallable, SimpleWate
             boolean flag = !ctx.isSecondaryUseActive();
             DripstoneThickness dripstonethickness = PointedDripstoneBlock.calculateDripstoneThickness(world, blockposition, enumdirection1, flag);
 
-            return dripstonethickness == null ? null : (BlockState) ((BlockState) ((BlockState) this.defaultBlockState().setValue(PointedDripstoneBlock.TIP_DIRECTION, enumdirection1)).setValue(PointedDripstoneBlock.THICKNESS, dripstonethickness)).setValue(PointedDripstoneBlock.WATERLOGGED, world.getFluidState(blockposition).getType() == Fluids.WATER);
+            return dripstonethickness == null ? null : (BlockState) ((BlockState) ((BlockState) this.defaultBlockState().setValue(PointedDripstoneBlock.TIP_DIRECTION, enumdirection1)).setValue(PointedDripstoneBlock.THICKNESS, dripstonethickness)).setValue(PointedDripstoneBlock.WATERLOGGED, Boolean.valueOf(world.getFluidState(blockposition).getType() == Fluids.WATER));
         }
     }
 
@@ -409,7 +409,7 @@ public class PointedDripstoneBlock extends Block implements Fallable, SimpleWate
     }
 
     private static void createDripstone(LevelAccessor generatoraccess, BlockPos blockposition, Direction enumdirection, DripstoneThickness dripstonethickness, BlockPos source) { // CraftBukkit
-        BlockState iblockdata = (BlockState) ((BlockState) ((BlockState) Blocks.POINTED_DRIPSTONE.defaultBlockState().setValue(PointedDripstoneBlock.TIP_DIRECTION, enumdirection)).setValue(PointedDripstoneBlock.THICKNESS, dripstonethickness)).setValue(PointedDripstoneBlock.WATERLOGGED, generatoraccess.getFluidState(blockposition).getType() == Fluids.WATER);
+        BlockState iblockdata = (BlockState) ((BlockState) ((BlockState) Blocks.POINTED_DRIPSTONE.defaultBlockState().setValue(PointedDripstoneBlock.TIP_DIRECTION, enumdirection)).setValue(PointedDripstoneBlock.THICKNESS, dripstonethickness)).setValue(PointedDripstoneBlock.WATERLOGGED, Boolean.valueOf(generatoraccess.getFluidState(blockposition).getType() == Fluids.WATER));
 
         org.bukkit.craftbukkit.event.CraftEventFactory.handleBlockSpreadEvent(generatoraccess, source, blockposition, iblockdata, 3); // CraftBukkit
     }
diff --git a/src/main/java/net/minecraft/world/level/block/PoweredRailBlock.java b/src/main/java/net/minecraft/world/level/block/PoweredRailBlock.java
index 7fddb6fa8fd30ef88346a59f7867aae792f13772..0a2d087b90fdfcda58b9c448506628827ab0f7e2 100644
--- a/src/main/java/net/minecraft/world/level/block/PoweredRailBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/PoweredRailBlock.java
@@ -19,7 +19,7 @@ public class PoweredRailBlock extends BaseRailBlock {
 
     protected PoweredRailBlock(BlockBehaviour.Properties settings) {
         super(true, settings);
-        this.registerDefaultState((BlockState) ((BlockState) ((BlockState) ((BlockState) this.stateDefinition.any()).setValue(PoweredRailBlock.SHAPE, RailShape.NORTH_SOUTH)).setValue(PoweredRailBlock.POWERED, false)).setValue(PoweredRailBlock.WATERLOGGED, false));
+        this.registerDefaultState((BlockState) ((BlockState) ((BlockState) ((BlockState) this.stateDefinition.any()).setValue(PoweredRailBlock.SHAPE, RailShape.NORTH_SOUTH)).setValue(PoweredRailBlock.POWERED, Boolean.FALSE)).setValue(PoweredRailBlock.WATERLOGGED, Boolean.FALSE));
     }
 
     protected boolean findPoweredRailSignal(Level world, BlockPos pos, BlockState state, boolean flag, int distance) {
@@ -121,7 +121,7 @@ public class PoweredRailBlock extends BaseRailBlock {
                 return;
             }
             // CraftBukkit end
-            world.setBlock(pos, (BlockState) state.setValue(PoweredRailBlock.POWERED, flag1), 3);
+            world.setBlock(pos, (BlockState) state.setValue(PoweredRailBlock.POWERED, Boolean.valueOf(flag1)), 3);
             world.updateNeighborsAt(pos.below(), this);
             if (((RailShape) state.getValue(PoweredRailBlock.SHAPE)).isAscending()) {
                 world.updateNeighborsAt(pos.above(), this);
diff --git a/src/main/java/net/minecraft/world/level/block/PressurePlateBlock.java b/src/main/java/net/minecraft/world/level/block/PressurePlateBlock.java
index 11507b85216b528d02bdb95ec1fa13a1ca8d3643..c3f55d2fef921f67d22bb405c9b9fdb979437296 100644
--- a/src/main/java/net/minecraft/world/level/block/PressurePlateBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/PressurePlateBlock.java
@@ -27,7 +27,7 @@ public class PressurePlateBlock extends BasePressurePlateBlock {
 
     protected PressurePlateBlock(PressurePlateBlock.Sensitivity type, BlockBehaviour.Properties settings, SoundEvent depressSound, SoundEvent pressSound) {
         super(settings);
-        this.registerDefaultState((BlockState) ((BlockState) this.stateDefinition.any()).setValue(PressurePlateBlock.POWERED, false));
+        this.registerDefaultState((BlockState) ((BlockState) this.stateDefinition.any()).setValue(PressurePlateBlock.POWERED, Boolean.FALSE));
         this.sensitivity = type;
         this.soundOff = depressSound;
         this.soundOn = pressSound;
@@ -40,7 +40,7 @@ public class PressurePlateBlock extends BasePressurePlateBlock {
 
     @Override
     protected BlockState setSignalForState(BlockState state, int rsOut) {
-        return (BlockState) state.setValue(PressurePlateBlock.POWERED, rsOut > 0);
+        return (BlockState) state.setValue(PressurePlateBlock.POWERED, Boolean.valueOf(rsOut > 0));
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/RedStoneOreBlock.java b/src/main/java/net/minecraft/world/level/block/RedStoneOreBlock.java
index 49717f55fd70136a571fe95076b77a0a686e04e8..6f8d0b7e2bb698e7e841c5e580b3752e368e87be 100644
--- a/src/main/java/net/minecraft/world/level/block/RedStoneOreBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/RedStoneOreBlock.java
@@ -31,7 +31,7 @@ public class RedStoneOreBlock extends Block {
 
     public RedStoneOreBlock(BlockBehaviour.Properties settings) {
         super(settings);
-        this.registerDefaultState((BlockState) this.defaultBlockState().setValue(RedStoneOreBlock.LIT, false));
+        this.registerDefaultState((BlockState) this.defaultBlockState().setValue(RedStoneOreBlock.LIT, Boolean.FALSE));
     }
 
     @Override
@@ -79,11 +79,11 @@ public class RedStoneOreBlock extends Block {
         RedStoneOreBlock.spawnParticles(world, blockposition);
         if (!(Boolean) iblockdata.getValue(RedStoneOreBlock.LIT)) {
             // CraftBukkit start
-            if (CraftEventFactory.callEntityChangeBlockEvent(entity, blockposition, iblockdata.setValue(RedStoneOreBlock.LIT, true)).isCancelled()) {
+            if (CraftEventFactory.callEntityChangeBlockEvent(entity, blockposition, iblockdata.setValue(RedStoneOreBlock.LIT, Boolean.TRUE)).isCancelled()) {
                 return;
             }
             // CraftBukkit end
-            world.setBlock(blockposition, (BlockState) iblockdata.setValue(RedStoneOreBlock.LIT, true), 3);
+            world.setBlock(blockposition, (BlockState) iblockdata.setValue(RedStoneOreBlock.LIT, Boolean.TRUE), 3);
         }
 
     }
@@ -97,11 +97,11 @@ public class RedStoneOreBlock extends Block {
     public void randomTick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
         if ((Boolean) state.getValue(RedStoneOreBlock.LIT)) {
             // CraftBukkit start
-            if (CraftEventFactory.callBlockFadeEvent(world, pos, state.setValue(RedStoneOreBlock.LIT, false)).isCancelled()) {
+            if (CraftEventFactory.callBlockFadeEvent(world, pos, state.setValue(RedStoneOreBlock.LIT, Boolean.FALSE)).isCancelled()) {
                 return;
             }
             // CraftBukkit end
-            world.setBlock(pos, (BlockState) state.setValue(RedStoneOreBlock.LIT, false), 3);
+            world.setBlock(pos, (BlockState) state.setValue(RedStoneOreBlock.LIT, Boolean.FALSE), 3);
         }
 
     }
diff --git a/src/main/java/net/minecraft/world/level/block/RedStoneWireBlock.java b/src/main/java/net/minecraft/world/level/block/RedStoneWireBlock.java
index 5ea09cc455bd86beb450f0e0275d7c6c8da98084..efb47e125c5ebe94ba4e4b3fa2f7006c2bfe195a 100644
--- a/src/main/java/net/minecraft/world/level/block/RedStoneWireBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/RedStoneWireBlock.java
@@ -71,7 +71,7 @@ public class RedStoneWireBlock extends Block {
 
     public RedStoneWireBlock(BlockBehaviour.Properties settings) {
         super(settings);
-        this.registerDefaultState((BlockState) ((BlockState) ((BlockState) ((BlockState) ((BlockState) ((BlockState) this.stateDefinition.any()).setValue(RedStoneWireBlock.NORTH, RedstoneSide.NONE)).setValue(RedStoneWireBlock.EAST, RedstoneSide.NONE)).setValue(RedStoneWireBlock.SOUTH, RedstoneSide.NONE)).setValue(RedStoneWireBlock.WEST, RedstoneSide.NONE)).setValue(RedStoneWireBlock.POWER, 0));
+        this.registerDefaultState((BlockState) ((BlockState) ((BlockState) ((BlockState) ((BlockState) ((BlockState) this.stateDefinition.any()).setValue(RedStoneWireBlock.NORTH, RedstoneSide.NONE)).setValue(RedStoneWireBlock.EAST, RedstoneSide.NONE)).setValue(RedStoneWireBlock.SOUTH, RedstoneSide.NONE)).setValue(RedStoneWireBlock.WEST, RedstoneSide.NONE)).setValue(RedStoneWireBlock.POWER, Integer.valueOf(0)));
         this.crossState = (BlockState) ((BlockState) ((BlockState) ((BlockState) this.defaultBlockState().setValue(RedStoneWireBlock.NORTH, RedstoneSide.SIDE)).setValue(RedStoneWireBlock.EAST, RedstoneSide.SIDE)).setValue(RedStoneWireBlock.SOUTH, RedstoneSide.SIDE)).setValue(RedStoneWireBlock.WEST, RedstoneSide.SIDE);
         UnmodifiableIterator unmodifiableiterator = this.getStateDefinition().getPossibleStates().iterator();
 
@@ -105,7 +105,7 @@ public class RedStoneWireBlock extends Block {
 
     @Override
     public VoxelShape getShape(BlockState state, BlockGetter world, BlockPos pos, CollisionContext context) {
-        return (VoxelShape) RedStoneWireBlock.SHAPES_CACHE.get(state.setValue(RedStoneWireBlock.POWER, 0));
+        return (VoxelShape) RedStoneWireBlock.SHAPES_CACHE.get(state.setValue(RedStoneWireBlock.POWER, Integer.valueOf(0)));
     }
 
     @Override
@@ -348,7 +348,7 @@ public class RedStoneWireBlock extends Block {
             worldIn.getCraftServer().getPluginManager().callEvent(event);
 
             j = event.getNewCurrent();
-            state = state.setValue(POWER, j);
+            state = state.setValue(POWER, Integer.valueOf(j));
 
             if (worldIn.getBlockState(pos1) == iblockstate) {
                 // [Space Walker] suppress shape updates and emit those manually to
@@ -376,7 +376,7 @@ public class RedStoneWireBlock extends Block {
         if (oldPower != i) {
             // CraftBukkit end
             if (world.getBlockState(pos) == state) {
-                world.setBlock(pos, (BlockState) state.setValue(RedStoneWireBlock.POWER, i), 2);
+                world.setBlock(pos, (BlockState) state.setValue(RedStoneWireBlock.POWER, Integer.valueOf(i)), 2);
             }
 
             Set<BlockPos> set = Sets.newHashSet();
diff --git a/src/main/java/net/minecraft/world/level/block/RedstoneLampBlock.java b/src/main/java/net/minecraft/world/level/block/RedstoneLampBlock.java
index 64136745aad7ddbfdfbb8040832a58422d24e8ae..36888e6dbfe205c416f61a95b1d6f35f3d2c21c7 100644
--- a/src/main/java/net/minecraft/world/level/block/RedstoneLampBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/RedstoneLampBlock.java
@@ -18,13 +18,13 @@ public class RedstoneLampBlock extends Block {
 
     public RedstoneLampBlock(BlockBehaviour.Properties settings) {
         super(settings);
-        this.registerDefaultState((BlockState) this.defaultBlockState().setValue(RedstoneLampBlock.LIT, false));
+        this.registerDefaultState((BlockState) this.defaultBlockState().setValue(RedstoneLampBlock.LIT, Boolean.FALSE));
     }
 
     @Nullable
     @Override
     public BlockState getStateForPlacement(BlockPlaceContext ctx) {
-        return (BlockState) this.defaultBlockState().setValue(RedstoneLampBlock.LIT, ctx.getLevel().hasNeighborSignal(ctx.getClickedPos()));
+        return (BlockState) this.defaultBlockState().setValue(RedstoneLampBlock.LIT, Boolean.valueOf(ctx.getLevel().hasNeighborSignal(ctx.getClickedPos())));
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/RedstoneTorchBlock.java b/src/main/java/net/minecraft/world/level/block/RedstoneTorchBlock.java
index da07fce0cf7c9fbdb57d2c59e431b59bf583bf50..a5ae191aa0052a1988b0627d126d04ef48719f67 100644
--- a/src/main/java/net/minecraft/world/level/block/RedstoneTorchBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/RedstoneTorchBlock.java
@@ -29,7 +29,7 @@ public class RedstoneTorchBlock extends TorchBlock {
 
     protected RedstoneTorchBlock(BlockBehaviour.Properties settings) {
         super(settings, DustParticleOptions.REDSTONE);
-        this.registerDefaultState((BlockState) ((BlockState) this.stateDefinition.any()).setValue(RedstoneTorchBlock.LIT, true));
+        this.registerDefaultState((BlockState) ((BlockState) this.stateDefinition.any()).setValue(RedstoneTorchBlock.LIT, Boolean.TRUE));
     }
 
     @Override
@@ -100,7 +100,7 @@ public class RedstoneTorchBlock extends TorchBlock {
                     }
                 }
                 // CraftBukkit end
-                world.setBlock(pos, (BlockState) state.setValue(RedstoneTorchBlock.LIT, false), 3);
+                world.setBlock(pos, (BlockState) state.setValue(RedstoneTorchBlock.LIT, Boolean.FALSE), 3);
                 if (RedstoneTorchBlock.isToggledTooFrequently(world, pos, true)) {
                     world.levelEvent(1502, pos, 0);
                     world.scheduleTick(pos, world.getBlockState(pos).getBlock(), 160);
@@ -116,7 +116,7 @@ public class RedstoneTorchBlock extends TorchBlock {
                 }
             }
             // CraftBukkit end
-            world.setBlock(pos, (BlockState) state.setValue(RedstoneTorchBlock.LIT, true), 3);
+            world.setBlock(pos, (BlockState) state.setValue(RedstoneTorchBlock.LIT, Boolean.TRUE), 3);
         }
 
     }
diff --git a/src/main/java/net/minecraft/world/level/block/RespawnAnchorBlock.java b/src/main/java/net/minecraft/world/level/block/RespawnAnchorBlock.java
index 1b7140ffab0492ab130743a2d158b30efb2cfece..865dc91ce16fb75be4f7367c7c90ad48666572ed 100644
--- a/src/main/java/net/minecraft/world/level/block/RespawnAnchorBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/RespawnAnchorBlock.java
@@ -122,7 +122,7 @@ public class RespawnAnchorBlock extends Block {
         ExplosionDamageCalculator explosionDamageCalculator = new ExplosionDamageCalculator() {
             @Override
             public Optional<Float> getBlockExplosionResistance(Explosion explosion, BlockGetter world, BlockPos pos, BlockState blockState, FluidState fluidState) {
-                return pos.equals(explodedPos) && bl2 ? Optional.of(Blocks.WATER.getExplosionResistance()) : super.getBlockExplosionResistance(explosion, world, pos, blockState, fluidState);
+                return pos.equals(explodedPos) && bl2 ? Optional.of(Float.valueOf(Blocks.WATER.getExplosionResistance())) : super.getBlockExplosionResistance(explosion, world, pos, blockState, fluidState);
             }
         };
         Vec3 vec3 = explodedPos.getCenter();
diff --git a/src/main/java/net/minecraft/world/level/block/SaplingBlock.java b/src/main/java/net/minecraft/world/level/block/SaplingBlock.java
index 901978a338f0f1b6f20ffb65aac59704bfa6f36a..50aff2d3a74ce333e046b5515b15872e19f69aa9 100644
--- a/src/main/java/net/minecraft/world/level/block/SaplingBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/SaplingBlock.java
@@ -31,7 +31,7 @@ public class SaplingBlock extends BushBlock implements BonemealableBlock {
     protected SaplingBlock(AbstractTreeGrower generator, BlockBehaviour.Properties settings) {
         super(settings);
         this.treeGrower = generator;
-        this.registerDefaultState((net.minecraft.world.level.block.state.BlockState) ((net.minecraft.world.level.block.state.BlockState) this.stateDefinition.any()).setValue(SaplingBlock.STAGE, 0));
+        this.registerDefaultState((net.minecraft.world.level.block.state.BlockState) ((net.minecraft.world.level.block.state.BlockState) this.stateDefinition.any()).setValue(SaplingBlock.STAGE, Integer.valueOf(0)));
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/ScaffoldingBlock.java b/src/main/java/net/minecraft/world/level/block/ScaffoldingBlock.java
index f99082c58743e8b73e263655dbebc34e904c45bc..2dae1f0cf62e08f6a2cf62b8b6fdf04cdb54ade6 100644
--- a/src/main/java/net/minecraft/world/level/block/ScaffoldingBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/ScaffoldingBlock.java
@@ -38,7 +38,7 @@ public class ScaffoldingBlock extends Block implements SimpleWaterloggedBlock {
 
     protected ScaffoldingBlock(BlockBehaviour.Properties settings) {
         super(settings);
-        this.registerDefaultState((BlockState) ((BlockState) ((BlockState) ((BlockState) this.stateDefinition.any()).setValue(ScaffoldingBlock.DISTANCE, 7)).setValue(ScaffoldingBlock.WATERLOGGED, false)).setValue(ScaffoldingBlock.BOTTOM, false));
+        this.registerDefaultState((BlockState) ((BlockState) ((BlockState) ((BlockState) this.stateDefinition.any()).setValue(ScaffoldingBlock.DISTANCE, Integer.valueOf(7))).setValue(ScaffoldingBlock.WATERLOGGED, Boolean.FALSE)).setValue(ScaffoldingBlock.BOTTOM, Boolean.FALSE));
     }
 
     @Override
@@ -67,7 +67,7 @@ public class ScaffoldingBlock extends Block implements SimpleWaterloggedBlock {
         Level world = ctx.getLevel();
         int i = ScaffoldingBlock.getDistance(world, blockposition);
 
-        return (BlockState) ((BlockState) ((BlockState) this.defaultBlockState().setValue(ScaffoldingBlock.WATERLOGGED, world.getFluidState(blockposition).getType() == Fluids.WATER)).setValue(ScaffoldingBlock.DISTANCE, i)).setValue(ScaffoldingBlock.BOTTOM, this.isBottom(world, blockposition, i));
+        return (BlockState) ((BlockState) ((BlockState) this.defaultBlockState().setValue(ScaffoldingBlock.WATERLOGGED, Boolean.valueOf(world.getFluidState(blockposition).getType() == Fluids.WATER))).setValue(ScaffoldingBlock.DISTANCE, Integer.valueOf(i))).setValue(ScaffoldingBlock.BOTTOM, Boolean.valueOf(this.isBottom(world, blockposition, i)));
     }
 
     @Override
@@ -94,7 +94,7 @@ public class ScaffoldingBlock extends Block implements SimpleWaterloggedBlock {
     @Override
     public void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
         int i = ScaffoldingBlock.getDistance(world, pos);
-        BlockState iblockdata1 = (BlockState) ((BlockState) state.setValue(ScaffoldingBlock.DISTANCE, i)).setValue(ScaffoldingBlock.BOTTOM, this.isBottom(world, pos, i));
+        BlockState iblockdata1 = (BlockState) ((BlockState) state.setValue(ScaffoldingBlock.DISTANCE, Integer.valueOf(i))).setValue(ScaffoldingBlock.BOTTOM, Boolean.valueOf(this.isBottom(world, pos, i)));
 
         if ((Integer) iblockdata1.getValue(ScaffoldingBlock.DISTANCE) == 7 && !org.bukkit.craftbukkit.event.CraftEventFactory.callBlockFadeEvent(world, pos, Blocks.AIR.defaultBlockState()).isCancelled()) { // CraftBukkit - BlockFadeEvent
             if ((Integer) state.getValue(ScaffoldingBlock.DISTANCE) == 7) {
diff --git a/src/main/java/net/minecraft/world/level/block/SculkBlock.java b/src/main/java/net/minecraft/world/level/block/SculkBlock.java
index 7d3154e65585a1bf93d966b864e3248df748716c..3a29984a0fed6b57456de25d4d98cb7ddb526780 100644
--- a/src/main/java/net/minecraft/world/level/block/SculkBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/SculkBlock.java
@@ -64,12 +64,12 @@ public class SculkBlock extends DropExperienceBlock implements SculkBehaviour {
         BlockState iblockdata;
 
         if (random.nextInt(11) == 0) {
-            iblockdata = (BlockState) Blocks.SCULK_SHRIEKER.defaultBlockState().setValue(SculkShriekerBlock.CAN_SUMMON, allowShrieker);
+            iblockdata = (BlockState) Blocks.SCULK_SHRIEKER.defaultBlockState().setValue(SculkShriekerBlock.CAN_SUMMON, Boolean.valueOf(allowShrieker));
         } else {
             iblockdata = Blocks.SCULK_SENSOR.defaultBlockState();
         }
 
-        return iblockdata.hasProperty(BlockStateProperties.WATERLOGGED) && !world.getFluidState(pos).isEmpty() ? (BlockState) iblockdata.setValue(BlockStateProperties.WATERLOGGED, true) : iblockdata;
+        return iblockdata.hasProperty(BlockStateProperties.WATERLOGGED) && !world.getFluidState(pos).isEmpty() ? (BlockState) iblockdata.setValue(BlockStateProperties.WATERLOGGED, Boolean.TRUE) : iblockdata;
     }
 
     private static boolean canPlaceGrowth(LevelAccessor world, BlockPos pos) {
diff --git a/src/main/java/net/minecraft/world/level/block/SculkCatalystBlock.java b/src/main/java/net/minecraft/world/level/block/SculkCatalystBlock.java
index c65c0375967fcfe9d26e4023712937c38200b5bc..5373c263214f82eca0de09c0a3cde7dc36cb6cad 100644
--- a/src/main/java/net/minecraft/world/level/block/SculkCatalystBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/SculkCatalystBlock.java
@@ -31,7 +31,7 @@ public class SculkCatalystBlock extends BaseEntityBlock {
 
     public SculkCatalystBlock(BlockBehaviour.Properties settings) {
         super(settings);
-        this.registerDefaultState((BlockState) ((BlockState) this.stateDefinition.any()).setValue(SculkCatalystBlock.PULSE, false));
+        this.registerDefaultState((BlockState) ((BlockState) this.stateDefinition.any()).setValue(SculkCatalystBlock.PULSE, Boolean.FALSE));
     }
 
     @Override
@@ -42,13 +42,13 @@ public class SculkCatalystBlock extends BaseEntityBlock {
     @Override
     public void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
         if ((Boolean) state.getValue(SculkCatalystBlock.PULSE)) {
-            world.setBlock(pos, (BlockState) state.setValue(SculkCatalystBlock.PULSE, false), 3);
+            world.setBlock(pos, (BlockState) state.setValue(SculkCatalystBlock.PULSE, Boolean.FALSE), 3);
         }
 
     }
 
     public static void bloom(ServerLevel world, BlockPos pos, BlockState state, RandomSource random) {
-        world.setBlock(pos, (BlockState) state.setValue(SculkCatalystBlock.PULSE, true), 3);
+        world.setBlock(pos, (BlockState) state.setValue(SculkCatalystBlock.PULSE, Boolean.TRUE), 3);
         world.scheduleTick(pos, state.getBlock(), 8);
         world.sendParticles(ParticleTypes.SCULK_SOUL, (double) pos.getX() + 0.5D, (double) pos.getY() + 1.15D, (double) pos.getZ() + 0.5D, 2, 0.2D, 0.0D, 0.2D, 0.0D);
         world.playSound((Player) null, pos, SoundEvents.SCULK_CATALYST_BLOOM, SoundSource.BLOCKS, 2.0F, 0.6F + random.nextFloat() * 0.4F);
diff --git a/src/main/java/net/minecraft/world/level/block/SculkSensorBlock.java b/src/main/java/net/minecraft/world/level/block/SculkSensorBlock.java
index b1d86e5e04e762e9ed6136003cb3e05dffd7e8f1..72c2e04f9e3056f52419da30bf74c3539b9fdb92 100644
--- a/src/main/java/net/minecraft/world/level/block/SculkSensorBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/SculkSensorBlock.java
@@ -54,7 +54,7 @@ public class SculkSensorBlock extends BaseEntityBlock implements SimpleWaterlogg
 
     public SculkSensorBlock(BlockBehaviour.Properties settings, int range) {
         super(settings);
-        this.registerDefaultState((BlockState) ((BlockState) ((BlockState) ((BlockState) this.stateDefinition.any()).setValue(SculkSensorBlock.PHASE, SculkSensorPhase.INACTIVE)).setValue(SculkSensorBlock.POWER, 0)).setValue(SculkSensorBlock.WATERLOGGED, false));
+        this.registerDefaultState((BlockState) ((BlockState) ((BlockState) ((BlockState) this.stateDefinition.any()).setValue(SculkSensorBlock.PHASE, SculkSensorPhase.INACTIVE)).setValue(SculkSensorBlock.POWER, Integer.valueOf(0))).setValue(SculkSensorBlock.WATERLOGGED, Boolean.FALSE));
         this.listenerRange = range;
     }
 
@@ -68,7 +68,7 @@ public class SculkSensorBlock extends BaseEntityBlock implements SimpleWaterlogg
         BlockPos blockposition = ctx.getClickedPos();
         FluidState fluid = ctx.getLevel().getFluidState(blockposition);
 
-        return (BlockState) this.defaultBlockState().setValue(SculkSensorBlock.WATERLOGGED, fluid.getType() == Fluids.WATER);
+        return (BlockState) this.defaultBlockState().setValue(SculkSensorBlock.WATERLOGGED, Boolean.valueOf(fluid.getType() == Fluids.WATER));
     }
 
     @Override
@@ -123,7 +123,7 @@ public class SculkSensorBlock extends BaseEntityBlock implements SimpleWaterlogg
     public void onPlace(BlockState state, Level world, BlockPos pos, BlockState oldState, boolean notify) {
         if (!world.isClientSide() && !state.is(oldState.getBlock())) {
             if ((Integer) state.getValue(SculkSensorBlock.POWER) > 0 && !world.getBlockTicks().hasScheduledTick(pos, this)) {
-                world.setBlock(pos, (BlockState) state.setValue(SculkSensorBlock.POWER, 0), 18);
+                world.setBlock(pos, (BlockState) state.setValue(SculkSensorBlock.POWER, Integer.valueOf(0)), 18);
             }
 
             world.scheduleTick(new BlockPos(pos), state.getBlock(), 1);
@@ -209,11 +209,11 @@ public class SculkSensorBlock extends BaseEntityBlock implements SimpleWaterlogg
         world.getCraftServer().getPluginManager().callEvent(eventRedstone);
 
         if (eventRedstone.getNewCurrent() > 0) {
-            world.setBlock(pos, state.setValue(SculkSensorBlock.POWER, eventRedstone.getNewCurrent()), 3);
+            world.setBlock(pos, state.setValue(SculkSensorBlock.POWER, Integer.valueOf(eventRedstone.getNewCurrent())), 3);
             return;
         }
         // CraftBukkit end
-        world.setBlock(pos, (BlockState) ((BlockState) state.setValue(SculkSensorBlock.PHASE, SculkSensorPhase.COOLDOWN)).setValue(SculkSensorBlock.POWER, 0), 3);
+        world.setBlock(pos, (BlockState) ((BlockState) state.setValue(SculkSensorBlock.PHASE, SculkSensorPhase.COOLDOWN)).setValue(SculkSensorBlock.POWER, Integer.valueOf(0)), 3);
         world.scheduleTick(pos, state.getBlock(), 1);
         if (!(Boolean) state.getValue(SculkSensorBlock.WATERLOGGED)) {
             world.playSound((Player) null, pos, SoundEvents.SCULK_CLICKING_STOP, SoundSource.BLOCKS, 1.0F, world.random.nextFloat() * 0.2F + 0.8F);
@@ -232,7 +232,7 @@ public class SculkSensorBlock extends BaseEntityBlock implements SimpleWaterlogg
         }
         power = eventRedstone.getNewCurrent();
         // CraftBukkit end
-        world.setBlock(pos, (BlockState) ((BlockState) state.setValue(SculkSensorBlock.PHASE, SculkSensorPhase.ACTIVE)).setValue(SculkSensorBlock.POWER, power), 3);
+        world.setBlock(pos, (BlockState) ((BlockState) state.setValue(SculkSensorBlock.PHASE, SculkSensorPhase.ACTIVE)).setValue(SculkSensorBlock.POWER, Integer.valueOf(power)), 3);
         world.scheduleTick(pos, state.getBlock(), 40);
         SculkSensorBlock.updateNeighbours(world, pos);
         world.gameEvent(entity, GameEvent.SCULK_SENSOR_TENDRILS_CLICKING, pos);
diff --git a/src/main/java/net/minecraft/world/level/block/SculkShriekerBlock.java b/src/main/java/net/minecraft/world/level/block/SculkShriekerBlock.java
index e0998215841e500e5982a242e9f4e646402e1521..476a38de43fecaf21e03841e4ad274a6ab8f2f70 100644
--- a/src/main/java/net/minecraft/world/level/block/SculkShriekerBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/SculkShriekerBlock.java
@@ -39,7 +39,7 @@ public class SculkShriekerBlock extends BaseEntityBlock implements SimpleWaterlo
 
     public SculkShriekerBlock(BlockBehaviour.Properties settings) {
         super(settings);
-        this.registerDefaultState((BlockState) ((BlockState) ((BlockState) ((BlockState) this.stateDefinition.any()).setValue(SculkShriekerBlock.SHRIEKING, false)).setValue(SculkShriekerBlock.WATERLOGGED, false)).setValue(SculkShriekerBlock.CAN_SUMMON, false));
+        this.registerDefaultState((BlockState) ((BlockState) ((BlockState) ((BlockState) this.stateDefinition.any()).setValue(SculkShriekerBlock.SHRIEKING, Boolean.FALSE)).setValue(SculkShriekerBlock.WATERLOGGED, Boolean.FALSE)).setValue(SculkShriekerBlock.CAN_SUMMON, Boolean.FALSE));
     }
 
     @Override
@@ -84,7 +84,7 @@ public class SculkShriekerBlock extends BaseEntityBlock implements SimpleWaterlo
     @Override
     public void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
         if ((Boolean) state.getValue(SculkShriekerBlock.SHRIEKING)) {
-            world.setBlock(pos, (BlockState) state.setValue(SculkShriekerBlock.SHRIEKING, false), 3);
+            world.setBlock(pos, (BlockState) state.setValue(SculkShriekerBlock.SHRIEKING, Boolean.FALSE), 3);
             world.getBlockEntity(pos, BlockEntityType.SCULK_SHRIEKER).ifPresent((sculkshriekerblockentity) -> {
                 sculkshriekerblockentity.tryRespond(world);
             });
@@ -130,7 +130,7 @@ public class SculkShriekerBlock extends BaseEntityBlock implements SimpleWaterlo
     @Nullable
     @Override
     public BlockState getStateForPlacement(BlockPlaceContext ctx) {
-        return (BlockState) this.defaultBlockState().setValue(SculkShriekerBlock.WATERLOGGED, ctx.getLevel().getFluidState(ctx.getClickedPos()).getType() == Fluids.WATER);
+        return (BlockState) this.defaultBlockState().setValue(SculkShriekerBlock.WATERLOGGED, Boolean.valueOf(ctx.getLevel().getFluidState(ctx.getClickedPos()).getType() == Fluids.WATER));
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/SculkVeinBlock.java b/src/main/java/net/minecraft/world/level/block/SculkVeinBlock.java
index cb663d6c3deb1e7fa07c6a4719fe56836eeacacb..8b120b6c6d9a6e83cf8033ad7eaca7dd32aa9ddf 100644
--- a/src/main/java/net/minecraft/world/level/block/SculkVeinBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/SculkVeinBlock.java
@@ -36,7 +36,7 @@ public class SculkVeinBlock extends MultifaceBlock implements SculkBehaviour, Si
         super(settings);
         this.veinSpreader = new MultifaceSpreader(new SculkVeinBlock.SculkVeinSpreaderConfig(MultifaceSpreader.DEFAULT_SPREAD_ORDER));
         this.sameSpaceSpreader = new MultifaceSpreader(new SculkVeinBlock.SculkVeinSpreaderConfig(new MultifaceSpreader.SpreadType[]{MultifaceSpreader.SpreadType.SAME_POSITION}));
-        this.registerDefaultState((BlockState) this.defaultBlockState().setValue(SculkVeinBlock.WATERLOGGED, false));
+        this.registerDefaultState((BlockState) this.defaultBlockState().setValue(SculkVeinBlock.WATERLOGGED, Boolean.FALSE));
     }
 
     @Override
@@ -58,7 +58,7 @@ public class SculkVeinBlock extends MultifaceBlock implements SculkBehaviour, Si
             BlockPos blockposition1 = pos.relative(enumdirection);
 
             if (canAttachTo(world, enumdirection, blockposition1, world.getBlockState(blockposition1))) {
-                iblockdata1 = (BlockState) iblockdata1.setValue(getFaceProperty(enumdirection), true);
+                iblockdata1 = (BlockState) iblockdata1.setValue(getFaceProperty(enumdirection), Boolean.TRUE);
                 flag = true;
             }
         }
@@ -67,7 +67,7 @@ public class SculkVeinBlock extends MultifaceBlock implements SculkBehaviour, Si
             return false;
         } else {
             if (!state.getFluidState().isEmpty()) {
-                iblockdata1 = (BlockState) iblockdata1.setValue(SculkVeinBlock.WATERLOGGED, true);
+                iblockdata1 = (BlockState) iblockdata1.setValue(SculkVeinBlock.WATERLOGGED, Boolean.TRUE);
             }
 
             world.setBlock(pos, iblockdata1, 3);
@@ -86,7 +86,7 @@ public class SculkVeinBlock extends MultifaceBlock implements SculkBehaviour, Si
                 BooleanProperty blockstateboolean = getFaceProperty(enumdirection);
 
                 if ((Boolean) state.getValue(blockstateboolean) && world.getBlockState(pos.relative(enumdirection)).is(Blocks.SCULK)) {
-                    state = (BlockState) state.setValue(blockstateboolean, false);
+                    state = (BlockState) state.setValue(blockstateboolean, Boolean.FALSE);
                 }
             }
 
diff --git a/src/main/java/net/minecraft/world/level/block/SnowLayerBlock.java b/src/main/java/net/minecraft/world/level/block/SnowLayerBlock.java
index 14e00c7feb1c051d56a3d27cd00dcef072dd771a..92acea01ee300d2cb3020d7794d92b15f5015614 100644
--- a/src/main/java/net/minecraft/world/level/block/SnowLayerBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/SnowLayerBlock.java
@@ -30,7 +30,7 @@ public class SnowLayerBlock extends Block {
 
     protected SnowLayerBlock(BlockBehaviour.Properties settings) {
         super(settings);
-        this.registerDefaultState((BlockState) ((BlockState) this.stateDefinition.any()).setValue(SnowLayerBlock.LAYERS, 1));
+        this.registerDefaultState((BlockState) ((BlockState) this.stateDefinition.any()).setValue(SnowLayerBlock.LAYERS, Integer.valueOf(1)));
     }
 
     @Override
@@ -118,7 +118,7 @@ public class SnowLayerBlock extends Block {
         if (iblockdata.is((Block) this)) {
             int i = (Integer) iblockdata.getValue(SnowLayerBlock.LAYERS);
 
-            return (BlockState) iblockdata.setValue(SnowLayerBlock.LAYERS, Math.min(8, i + 1));
+            return (BlockState) iblockdata.setValue(SnowLayerBlock.LAYERS, Integer.valueOf(Math.min(8, i + 1)));
         } else {
             return super.getStateForPlacement(ctx);
         }
diff --git a/src/main/java/net/minecraft/world/level/block/SpongeBlock.java b/src/main/java/net/minecraft/world/level/block/SpongeBlock.java
index 7304b2659eb45bc4bc9fa7c43e6ca07221d0fc73..e4090503e2f3c4a00e51f97b27f05dbc9d0db45a 100644
--- a/src/main/java/net/minecraft/world/level/block/SpongeBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/SpongeBlock.java
@@ -53,7 +53,7 @@ public class SpongeBlock extends Block {
     private boolean removeWaterBreadthFirstSearch(Level world, BlockPos pos) {
         Queue<Tuple<BlockPos, Integer>> queue = Lists.newLinkedList();
 
-        queue.add(new Tuple<>(pos, 0));
+        queue.add(new Tuple<>(pos, Integer.valueOf(0)));
         int i = 0;
         BlockStateListPopulator blockList = new BlockStateListPopulator(world); // CraftBukkit - Use BlockStateListPopulator
 
@@ -77,13 +77,13 @@ public class SpongeBlock extends Block {
                     if (iblockdata.getBlock() instanceof BucketPickup && !((BucketPickup) iblockdata.getBlock()).pickupBlock(blockList, blockposition2, iblockdata).isEmpty()) { // CraftBukkit
                         ++i;
                         if (j < 6) {
-                            queue.add(new Tuple<>(blockposition2, j + 1));
+                            queue.add(new Tuple<>(blockposition2, Integer.valueOf(j + 1)));
                         }
                     } else if (iblockdata.getBlock() instanceof LiquidBlock) {
                         blockList.setBlock(blockposition2, Blocks.AIR.defaultBlockState(), 3); // CraftBukkit
                         ++i;
                         if (j < 6) {
-                            queue.add(new Tuple<>(blockposition2, j + 1));
+                            queue.add(new Tuple<>(blockposition2, Integer.valueOf(j + 1)));
                         }
                     } else if (material == Material.WATER_PLANT || material == Material.REPLACEABLE_WATER_PLANT) {
                         // CraftBukkit start
@@ -94,7 +94,7 @@ public class SpongeBlock extends Block {
                         // CraftBukkit end
                         ++i;
                         if (j < 6) {
-                            queue.add(new Tuple<>(blockposition2, j + 1));
+                            queue.add(new Tuple<>(blockposition2, Integer.valueOf(j + 1)));
                         }
                     }
                 }
diff --git a/src/main/java/net/minecraft/world/level/block/StemBlock.java b/src/main/java/net/minecraft/world/level/block/StemBlock.java
index d95d5cd224b229fc34e271b56ca1dc9be13d6268..31c4d804cff9a0e0a9b4000502bb65e1c35a7f20 100644
--- a/src/main/java/net/minecraft/world/level/block/StemBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/StemBlock.java
@@ -35,7 +35,7 @@ public class StemBlock extends BushBlock implements BonemealableBlock {
         super(settings);
         this.fruit = gourdBlock;
         this.seedSupplier = pickBlockItem;
-        this.registerDefaultState((BlockState) ((BlockState) this.stateDefinition.any()).setValue(StemBlock.AGE, 0));
+        this.registerDefaultState((BlockState) ((BlockState) this.stateDefinition.any()).setValue(StemBlock.AGE, Integer.valueOf(0)));
     }
 
     @Override
@@ -57,7 +57,7 @@ public class StemBlock extends BushBlock implements BonemealableBlock {
                 int i = (Integer) state.getValue(StemBlock.AGE);
 
                 if (i < 7) {
-                    state = (BlockState) state.setValue(StemBlock.AGE, i + 1);
+                    state = (BlockState) state.setValue(StemBlock.AGE, Integer.valueOf(i + 1));
                     CraftEventFactory.handleBlockGrowEvent(world, pos, state, 2); // CraftBukkit
                 } else {
                     Direction enumdirection = Direction.Plane.HORIZONTAL.getRandomDirection(random);
@@ -96,7 +96,7 @@ public class StemBlock extends BushBlock implements BonemealableBlock {
     @Override
     public void performBonemeal(ServerLevel world, RandomSource random, BlockPos pos, BlockState state) {
         int i = Math.min(7, (Integer) state.getValue(StemBlock.AGE) + Mth.nextInt(world.random, 2, 5));
-        BlockState iblockdata1 = (BlockState) state.setValue(StemBlock.AGE, i);
+        BlockState iblockdata1 = (BlockState) state.setValue(StemBlock.AGE, Integer.valueOf(i));
 
         CraftEventFactory.handleBlockGrowEvent(world, pos, iblockdata1, 2); // CraftBukkit
         if (i == 7) {
diff --git a/src/main/java/net/minecraft/world/level/block/SugarCaneBlock.java b/src/main/java/net/minecraft/world/level/block/SugarCaneBlock.java
index 6b400a4759c8c8612a3b5c96ca0d87ef9dc71435..b103d470c5a3439a158b13f668e9cb406a30ead0 100644
--- a/src/main/java/net/minecraft/world/level/block/SugarCaneBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/SugarCaneBlock.java
@@ -27,7 +27,7 @@ public class SugarCaneBlock extends Block {
 
     protected SugarCaneBlock(BlockBehaviour.Properties settings) {
         super(settings);
-        this.registerDefaultState((BlockState) ((BlockState) this.stateDefinition.any()).setValue(SugarCaneBlock.AGE, 0));
+        this.registerDefaultState((BlockState) ((BlockState) this.stateDefinition.any()).setValue(SugarCaneBlock.AGE, Integer.valueOf(0)));
     }
 
     @Override
@@ -58,9 +58,9 @@ public class SugarCaneBlock extends Block {
                 int modifier = world.spigotConfig.caneModifier; // Spigot - SPIGOT-7159: Better modifier resolution
                 if (j >= 15 || (modifier != 100 && random.nextFloat() < (modifier / (100.0f * 16)))) { // Spigot - SPIGOT-7159: Better modifier resolution
                     org.bukkit.craftbukkit.event.CraftEventFactory.handleBlockGrowEvent(world, pos.above(), this.defaultBlockState()); // CraftBukkit
-                    world.setBlock(pos, (BlockState) state.setValue(SugarCaneBlock.AGE, 0), 4);
+                    world.setBlock(pos, (BlockState) state.setValue(SugarCaneBlock.AGE, Integer.valueOf(0)), 4);
                 } else if (modifier == 100 || random.nextFloat() < (modifier / (100.0f * 16))) { // Spigot - SPIGOT-7159: Better modifier resolution
-                    world.setBlock(pos, (BlockState) state.setValue(SugarCaneBlock.AGE, j + 1), 4);
+                    world.setBlock(pos, (BlockState) state.setValue(SugarCaneBlock.AGE, Integer.valueOf(j + 1)), 4);
                 }
             }
         }
diff --git a/src/main/java/net/minecraft/world/level/block/SweetBerryBushBlock.java b/src/main/java/net/minecraft/world/level/block/SweetBerryBushBlock.java
index c926cd3ebb916115a608e86b389ffe7e15d48cd7..979000af2a13c9cc83fcae6d7b056e55816cec13 100644
--- a/src/main/java/net/minecraft/world/level/block/SweetBerryBushBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/SweetBerryBushBlock.java
@@ -45,7 +45,7 @@ public class SweetBerryBushBlock extends BushBlock implements BonemealableBlock
 
     public SweetBerryBushBlock(BlockBehaviour.Properties settings) {
         super(settings);
-        this.registerDefaultState((BlockState) ((BlockState) this.stateDefinition.any()).setValue(SweetBerryBushBlock.AGE, 0));
+        this.registerDefaultState((BlockState) ((BlockState) this.stateDefinition.any()).setValue(SweetBerryBushBlock.AGE, Integer.valueOf(0)));
     }
 
     @Override
@@ -68,7 +68,7 @@ public class SweetBerryBushBlock extends BushBlock implements BonemealableBlock
         int i = (Integer) state.getValue(SweetBerryBushBlock.AGE);
 
         if (i < 3 && random.nextFloat() < (world.spigotConfig.sweetBerryModifier / (100.0f * 5)) && world.getRawBrightness(pos.above(), 0) >= 9) { // Spigot - SPIGOT-7159: Better modifier resolution
-            BlockState iblockdata1 = (BlockState) state.setValue(SweetBerryBushBlock.AGE, i + 1);
+            BlockState iblockdata1 = (BlockState) state.setValue(SweetBerryBushBlock.AGE, Integer.valueOf(i + 1));
 
             if (!CraftEventFactory.handleBlockGrowEvent(world, pos, iblockdata1, 2)) return; // CraftBukkit
             world.gameEvent(GameEvent.BLOCK_CHANGE, pos, GameEvent.Context.of(iblockdata1));
@@ -115,7 +115,7 @@ public class SweetBerryBushBlock extends BushBlock implements BonemealableBlock
             }
             // CraftBukkit end
             world.playSound((Player) null, pos, SoundEvents.SWEET_BERRY_BUSH_PICK_BERRIES, SoundSource.BLOCKS, 1.0F, 0.8F + world.random.nextFloat() * 0.4F);
-            BlockState iblockdata1 = (BlockState) state.setValue(SweetBerryBushBlock.AGE, 1);
+            BlockState iblockdata1 = (BlockState) state.setValue(SweetBerryBushBlock.AGE, Integer.valueOf(1));
 
             world.setBlock(pos, iblockdata1, 2);
             world.gameEvent(GameEvent.BLOCK_CHANGE, pos, GameEvent.Context.of(player, iblockdata1));
@@ -144,6 +144,6 @@ public class SweetBerryBushBlock extends BushBlock implements BonemealableBlock
     public void performBonemeal(ServerLevel world, RandomSource random, BlockPos pos, BlockState state) {
         int i = Math.min(3, (Integer) state.getValue(SweetBerryBushBlock.AGE) + 1);
 
-        world.setBlock(pos, (BlockState) state.setValue(SweetBerryBushBlock.AGE, i), 2);
+        world.setBlock(pos, (BlockState) state.setValue(SweetBerryBushBlock.AGE, Integer.valueOf(i)), 2);
     }
 }
diff --git a/src/main/java/net/minecraft/world/level/block/TntBlock.java b/src/main/java/net/minecraft/world/level/block/TntBlock.java
index ade39e877edbb07082bb2d87e00ae4bfb6ab1c8f..36e7903919c4f6a027bd7245a798f789961b3c38 100644
--- a/src/main/java/net/minecraft/world/level/block/TntBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/TntBlock.java
@@ -31,7 +31,7 @@ public class TntBlock extends Block {
 
     public TntBlock(BlockBehaviour.Properties settings) {
         super(settings);
-        this.registerDefaultState((BlockState) this.defaultBlockState().setValue(TntBlock.UNSTABLE, false));
+        this.registerDefaultState((BlockState) this.defaultBlockState().setValue(TntBlock.UNSTABLE, Boolean.FALSE));
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/TrapDoorBlock.java b/src/main/java/net/minecraft/world/level/block/TrapDoorBlock.java
index 91966d9c90d30738a1912ab6ce81edd914b939ff..fa98321c765faf94604bc70312d0610ef9a371d7 100644
--- a/src/main/java/net/minecraft/world/level/block/TrapDoorBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/TrapDoorBlock.java
@@ -49,7 +49,7 @@ public class TrapDoorBlock extends HorizontalDirectionalBlock implements SimpleW
 
     protected TrapDoorBlock(BlockBehaviour.Properties settings, SoundEvent closeSound, SoundEvent openSound) {
         super(settings);
-        this.registerDefaultState((BlockState) ((BlockState) ((BlockState) ((BlockState) ((BlockState) ((BlockState) this.stateDefinition.any()).setValue(TrapDoorBlock.FACING, Direction.NORTH)).setValue(TrapDoorBlock.OPEN, false)).setValue(TrapDoorBlock.HALF, Half.BOTTOM)).setValue(TrapDoorBlock.POWERED, false)).setValue(TrapDoorBlock.WATERLOGGED, false));
+        this.registerDefaultState((BlockState) ((BlockState) ((BlockState) ((BlockState) ((BlockState) ((BlockState) this.stateDefinition.any()).setValue(TrapDoorBlock.FACING, Direction.NORTH)).setValue(TrapDoorBlock.OPEN, Boolean.FALSE)).setValue(TrapDoorBlock.HALF, Half.BOTTOM)).setValue(TrapDoorBlock.POWERED, Boolean.FALSE)).setValue(TrapDoorBlock.WATERLOGGED, Boolean.FALSE));
         this.closeSound = closeSound;
         this.openSound = openSound;
     }
@@ -128,11 +128,11 @@ public class TrapDoorBlock extends HorizontalDirectionalBlock implements SimpleW
                 }
                 // CraftBukkit end
                 if ((Boolean) state.getValue(TrapDoorBlock.OPEN) != flag1) {
-                    state = (BlockState) state.setValue(TrapDoorBlock.OPEN, flag1);
+                    state = (BlockState) state.setValue(TrapDoorBlock.OPEN, Boolean.valueOf(flag1));
                     this.playSound((Player) null, world, pos, flag1);
                 }
 
-                world.setBlock(pos, (BlockState) state.setValue(TrapDoorBlock.POWERED, flag1), 2);
+                world.setBlock(pos, (BlockState) state.setValue(TrapDoorBlock.POWERED, Boolean.valueOf(flag1)), 2);
                 if ((Boolean) state.getValue(TrapDoorBlock.WATERLOGGED)) {
                     world.scheduleTick(pos, (Fluid) Fluids.WATER, Fluids.WATER.getTickDelay(world));
                 }
@@ -154,10 +154,10 @@ public class TrapDoorBlock extends HorizontalDirectionalBlock implements SimpleW
         }
 
         if (ctx.getLevel().hasNeighborSignal(ctx.getClickedPos())) {
-            iblockdata = (BlockState) ((BlockState) iblockdata.setValue(TrapDoorBlock.OPEN, true)).setValue(TrapDoorBlock.POWERED, true);
+            iblockdata = (BlockState) ((BlockState) iblockdata.setValue(TrapDoorBlock.OPEN, Boolean.TRUE)).setValue(TrapDoorBlock.POWERED, Boolean.TRUE);
         }
 
-        return (BlockState) iblockdata.setValue(TrapDoorBlock.WATERLOGGED, fluid.getType() == Fluids.WATER);
+        return (BlockState) iblockdata.setValue(TrapDoorBlock.WATERLOGGED, Boolean.valueOf(fluid.getType() == Fluids.WATER));
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/TripWireBlock.java b/src/main/java/net/minecraft/world/level/block/TripWireBlock.java
index 7f60175bf671d282c11e9084670d2bb900968255..a11d0acb1894e6fbf841f8d2f582585605d3869a 100644
--- a/src/main/java/net/minecraft/world/level/block/TripWireBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/TripWireBlock.java
@@ -42,7 +42,7 @@ public class TripWireBlock extends Block {
 
     public TripWireBlock(TripWireHookBlock hookBlock, BlockBehaviour.Properties settings) {
         super(settings);
-        this.registerDefaultState((BlockState) ((BlockState) ((BlockState) ((BlockState) ((BlockState) ((BlockState) ((BlockState) ((BlockState) this.stateDefinition.any()).setValue(TripWireBlock.POWERED, false)).setValue(TripWireBlock.ATTACHED, false)).setValue(TripWireBlock.DISARMED, false)).setValue(TripWireBlock.NORTH, false)).setValue(TripWireBlock.EAST, false)).setValue(TripWireBlock.SOUTH, false)).setValue(TripWireBlock.WEST, false));
+        this.registerDefaultState((BlockState) ((BlockState) ((BlockState) ((BlockState) ((BlockState) ((BlockState) ((BlockState) ((BlockState) this.stateDefinition.any()).setValue(TripWireBlock.POWERED, Boolean.FALSE)).setValue(TripWireBlock.ATTACHED, Boolean.FALSE)).setValue(TripWireBlock.DISARMED, Boolean.FALSE)).setValue(TripWireBlock.NORTH, Boolean.FALSE)).setValue(TripWireBlock.EAST, Boolean.FALSE)).setValue(TripWireBlock.SOUTH, Boolean.FALSE)).setValue(TripWireBlock.WEST, Boolean.FALSE));
         this.hook = hookBlock;
     }
 
@@ -56,12 +56,12 @@ public class TripWireBlock extends Block {
         Level world = ctx.getLevel();
         BlockPos blockposition = ctx.getClickedPos();
 
-        return (BlockState) ((BlockState) ((BlockState) ((BlockState) this.defaultBlockState().setValue(TripWireBlock.NORTH, this.shouldConnectTo(world.getBlockState(blockposition.north()), Direction.NORTH))).setValue(TripWireBlock.EAST, this.shouldConnectTo(world.getBlockState(blockposition.east()), Direction.EAST))).setValue(TripWireBlock.SOUTH, this.shouldConnectTo(world.getBlockState(blockposition.south()), Direction.SOUTH))).setValue(TripWireBlock.WEST, this.shouldConnectTo(world.getBlockState(blockposition.west()), Direction.WEST));
+        return (BlockState) ((BlockState) ((BlockState) ((BlockState) this.defaultBlockState().setValue(TripWireBlock.NORTH, Boolean.valueOf(this.shouldConnectTo(world.getBlockState(blockposition.north()), Direction.NORTH)))).setValue(TripWireBlock.EAST, Boolean.valueOf(this.shouldConnectTo(world.getBlockState(blockposition.east()), Direction.EAST)))).setValue(TripWireBlock.SOUTH, Boolean.valueOf(this.shouldConnectTo(world.getBlockState(blockposition.south()), Direction.SOUTH)))).setValue(TripWireBlock.WEST, Boolean.valueOf(this.shouldConnectTo(world.getBlockState(blockposition.west()), Direction.WEST)));
     }
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
-        return direction.getAxis().isHorizontal() ? (BlockState) state.setValue((Property) TripWireBlock.PROPERTY_BY_DIRECTION.get(direction), this.shouldConnectTo(neighborState, direction)) : super.updateShape(state, direction, neighborState, world, pos, neighborPos);
+        return direction.getAxis().isHorizontal() ? (BlockState) state.setValue((Property) TripWireBlock.PROPERTY_BY_DIRECTION.get(direction), Boolean.valueOf(this.shouldConnectTo(neighborState, direction))) : super.updateShape(state, direction, neighborState, world, pos, neighborPos);
     }
 
     @Override
@@ -74,14 +74,14 @@ public class TripWireBlock extends Block {
     @Override
     public void onRemove(BlockState state, Level world, BlockPos pos, BlockState newState, boolean moved) {
         if (!moved && !state.is(newState.getBlock())) {
-            this.updateSource(world, pos, (BlockState) state.setValue(TripWireBlock.POWERED, true), true); // Paper - fix state inconsistency
+            this.updateSource(world, pos, (BlockState) state.setValue(TripWireBlock.POWERED, Boolean.TRUE), true); // Paper - fix state inconsistency
         }
     }
 
     @Override
     public void playerWillDestroy(Level world, BlockPos pos, BlockState state, Player player) {
         if (!world.isClientSide && !player.getMainHandItem().isEmpty() && player.getMainHandItem().is(Items.SHEARS)) {
-            world.setBlock(pos, (BlockState) state.setValue(TripWireBlock.DISARMED, true), 4);
+            world.setBlock(pos, (BlockState) state.setValue(TripWireBlock.DISARMED, Boolean.TRUE), 4);
             world.gameEvent((Entity) player, GameEvent.SHEAR, pos);
         }
 
@@ -196,7 +196,7 @@ public class TripWireBlock extends Block {
         // CraftBukkit end
 
         if (flag1 != flag) {
-            iblockdata = (BlockState) iblockdata.setValue(TripWireBlock.POWERED, flag1);
+            iblockdata = (BlockState) iblockdata.setValue(TripWireBlock.POWERED, Boolean.valueOf(flag1));
             world.setBlock(pos, iblockdata, 3);
             this.updateSource(world, pos, iblockdata);
         }
diff --git a/src/main/java/net/minecraft/world/level/block/TripWireHookBlock.java b/src/main/java/net/minecraft/world/level/block/TripWireHookBlock.java
index 004dce26ff073f1de52a84cd425c4f60fdab5e50..0daa69c20352b8abd42ba3e139998ef6cac0cd43 100644
--- a/src/main/java/net/minecraft/world/level/block/TripWireHookBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/TripWireHookBlock.java
@@ -44,7 +44,7 @@ public class TripWireHookBlock extends Block {
 
     public TripWireHookBlock(BlockBehaviour.Properties settings) {
         super(settings);
-        this.registerDefaultState((BlockState) ((BlockState) ((BlockState) ((BlockState) this.stateDefinition.any()).setValue(TripWireHookBlock.FACING, Direction.NORTH)).setValue(TripWireHookBlock.POWERED, false)).setValue(TripWireHookBlock.ATTACHED, false));
+        this.registerDefaultState((BlockState) ((BlockState) ((BlockState) ((BlockState) this.stateDefinition.any()).setValue(TripWireHookBlock.FACING, Direction.NORTH)).setValue(TripWireHookBlock.POWERED, Boolean.FALSE)).setValue(TripWireHookBlock.ATTACHED, Boolean.FALSE));
     }
 
     @Override
@@ -79,7 +79,7 @@ public class TripWireHookBlock extends Block {
     @Nullable
     @Override
     public BlockState getStateForPlacement(BlockPlaceContext ctx) {
-        BlockState iblockdata = (BlockState) ((BlockState) this.defaultBlockState().setValue(TripWireHookBlock.POWERED, false)).setValue(TripWireHookBlock.ATTACHED, false);
+        BlockState iblockdata = (BlockState) ((BlockState) this.defaultBlockState().setValue(TripWireHookBlock.POWERED, Boolean.FALSE)).setValue(TripWireHookBlock.ATTACHED, Boolean.FALSE);
         Level world = ctx.getLevel();
         BlockPos blockposition = ctx.getClickedPos();
         Direction[] aenumdirection = ctx.getNearestLookingDirections();
@@ -158,7 +158,7 @@ public class TripWireHookBlock extends Block {
 
         flag4 &= j > 1;
         flag5 &= flag4;
-        BlockState iblockdata3 = (BlockState) ((BlockState) this.defaultBlockState().setValue(TripWireHookBlock.ATTACHED, flag4)).setValue(TripWireHookBlock.POWERED, flag5);
+        BlockState iblockdata3 = (BlockState) ((BlockState) this.defaultBlockState().setValue(TripWireHookBlock.ATTACHED, Boolean.valueOf(flag4))).setValue(TripWireHookBlock.POWERED, Boolean.valueOf(flag5));
 
         if (j > 0) {
             blockposition1 = pos.relative(enumdirection, j);
@@ -195,7 +195,7 @@ public class TripWireHookBlock extends Block {
                 BlockState iblockdata4 = aiblockdata[l];
 
                 if (iblockdata4 != null) {
-                    world.setBlock(blockposition2, (BlockState) iblockdata4.setValue(TripWireHookBlock.ATTACHED, flag4), 3);
+                    world.setBlock(blockposition2, (BlockState) iblockdata4.setValue(TripWireHookBlock.ATTACHED, Boolean.valueOf(flag4)), 3);
                     if (!world.getBlockState(blockposition2).isAir()) {
                         ;
                     }
diff --git a/src/main/java/net/minecraft/world/level/block/TurtleEggBlock.java b/src/main/java/net/minecraft/world/level/block/TurtleEggBlock.java
index 70d46aafa9c16921e5c5bed3d97b8f402e25038a..eb0ba5264ac75efa752b2e789fe8c7e4606f4f0a 100644
--- a/src/main/java/net/minecraft/world/level/block/TurtleEggBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/TurtleEggBlock.java
@@ -46,7 +46,7 @@ public class TurtleEggBlock extends Block {
 
     public TurtleEggBlock(BlockBehaviour.Properties settings) {
         super(settings);
-        this.registerDefaultState((BlockState) ((BlockState) ((BlockState) this.stateDefinition.any()).setValue(TurtleEggBlock.HATCH, 0)).setValue(TurtleEggBlock.EGGS, 1));
+        this.registerDefaultState((BlockState) ((BlockState) ((BlockState) this.stateDefinition.any()).setValue(TurtleEggBlock.HATCH, Integer.valueOf(0))).setValue(TurtleEggBlock.EGGS, Integer.valueOf(1)));
     }
 
     @Override
@@ -96,7 +96,7 @@ public class TurtleEggBlock extends Block {
         if (i <= 1) {
             world.destroyBlock(pos, false);
         } else {
-            world.setBlock(pos, (BlockState) state.setValue(TurtleEggBlock.EGGS, i - 1), 2);
+            world.setBlock(pos, (BlockState) state.setValue(TurtleEggBlock.EGGS, Integer.valueOf(i - 1)), 2);
             world.gameEvent(GameEvent.BLOCK_DESTROY, pos, GameEvent.Context.of(state));
             world.levelEvent(2001, pos, Block.getId(state));
         }
@@ -110,7 +110,7 @@ public class TurtleEggBlock extends Block {
 
             if (i < 2) {
                 // CraftBukkit start - Call BlockGrowEvent
-                if (!CraftEventFactory.handleBlockGrowEvent(world, pos, state.setValue(TurtleEggBlock.HATCH, i + 1), 2)) {
+                if (!CraftEventFactory.handleBlockGrowEvent(world, pos, state.setValue(TurtleEggBlock.HATCH, Integer.valueOf(i + 1)), 2)) {
                     return;
                 }
                 // CraftBukkit end
@@ -179,7 +179,7 @@ public class TurtleEggBlock extends Block {
     public BlockState getStateForPlacement(BlockPlaceContext ctx) {
         BlockState iblockdata = ctx.getLevel().getBlockState(ctx.getClickedPos());
 
-        return iblockdata.is((Block) this) ? (BlockState) iblockdata.setValue(TurtleEggBlock.EGGS, Math.min(4, (Integer) iblockdata.getValue(TurtleEggBlock.EGGS) + 1)) : super.getStateForPlacement(ctx);
+        return iblockdata.is((Block) this) ? (BlockState) iblockdata.setValue(TurtleEggBlock.EGGS, Integer.valueOf(Math.min(4, (Integer) iblockdata.getValue(TurtleEggBlock.EGGS) + 1))) : super.getStateForPlacement(ctx);
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/VineBlock.java b/src/main/java/net/minecraft/world/level/block/VineBlock.java
index 18397d23a1f663d5da08a509b758c44769079f1f..4223de1de112266116bfcac4c01d6661e83acd37 100644
--- a/src/main/java/net/minecraft/world/level/block/VineBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/VineBlock.java
@@ -44,7 +44,7 @@ public class VineBlock extends Block {
 
     public VineBlock(BlockBehaviour.Properties settings) {
         super(settings);
-        this.registerDefaultState((BlockState) ((BlockState) ((BlockState) ((BlockState) ((BlockState) ((BlockState) this.stateDefinition.any()).setValue(VineBlock.UP, false)).setValue(VineBlock.NORTH, false)).setValue(VineBlock.EAST, false)).setValue(VineBlock.SOUTH, false)).setValue(VineBlock.WEST, false));
+        this.registerDefaultState((BlockState) ((BlockState) ((BlockState) ((BlockState) ((BlockState) ((BlockState) this.stateDefinition.any()).setValue(VineBlock.UP, Boolean.FALSE)).setValue(VineBlock.NORTH, Boolean.FALSE)).setValue(VineBlock.EAST, Boolean.FALSE)).setValue(VineBlock.SOUTH, Boolean.FALSE)).setValue(VineBlock.WEST, Boolean.FALSE));
         this.shapesCache = ImmutableMap.copyOf((Map) this.stateDefinition.getPossibleStates().stream().collect(Collectors.toMap(Function.identity(), VineBlock::calculateShape)));
     }
 
@@ -135,7 +135,7 @@ public class VineBlock extends Block {
         BlockPos blockposition1 = pos.above();
 
         if ((Boolean) state.getValue(VineBlock.UP)) {
-            state = (BlockState) state.setValue(VineBlock.UP, VineBlock.isAcceptableNeighbour(world, blockposition1, Direction.DOWN));
+            state = (BlockState) state.setValue(VineBlock.UP, Boolean.valueOf(VineBlock.isAcceptableNeighbour(world, blockposition1, Direction.DOWN)));
         }
 
         BlockState iblockdata1 = null;
@@ -156,7 +156,7 @@ public class VineBlock extends Block {
                     flag = iblockdata1.is((Block) this) && (Boolean) iblockdata1.getValue(blockstateboolean);
                 }
 
-                state = (BlockState) state.setValue(blockstateboolean, flag);
+                state = (BlockState) state.setValue(blockstateboolean, Boolean.valueOf(flag));
             }
         }
 
@@ -199,30 +199,30 @@ public class VineBlock extends Block {
                         BlockPos source = pos;
 
                         if (flag && VineBlock.isAcceptableNeighbour(world, blockposition3, enumdirection1)) {
-                            CraftEventFactory.handleBlockSpreadEvent(world, source, blockposition2, (BlockState) this.defaultBlockState().setValue(VineBlock.getPropertyForFace(enumdirection1), true), 2);
+                            CraftEventFactory.handleBlockSpreadEvent(world, source, blockposition2, (BlockState) this.defaultBlockState().setValue(VineBlock.getPropertyForFace(enumdirection1), Boolean.TRUE), 2);
                         } else if (flag1 && VineBlock.isAcceptableNeighbour(world, blockposition4, enumdirection2)) {
-                            CraftEventFactory.handleBlockSpreadEvent(world, source, blockposition2, (BlockState) this.defaultBlockState().setValue(VineBlock.getPropertyForFace(enumdirection2), true), 2);
+                            CraftEventFactory.handleBlockSpreadEvent(world, source, blockposition2, (BlockState) this.defaultBlockState().setValue(VineBlock.getPropertyForFace(enumdirection2), Boolean.TRUE), 2);
                         } else {
                             Direction enumdirection3 = enumdirection.getOpposite();
 
                             if (flag && world.isEmptyBlock(blockposition3) && VineBlock.isAcceptableNeighbour(world, pos.relative(enumdirection1), enumdirection3)) {
-                                CraftEventFactory.handleBlockSpreadEvent(world, source, blockposition3, (BlockState) this.defaultBlockState().setValue(VineBlock.getPropertyForFace(enumdirection3), true), 2);
+                                CraftEventFactory.handleBlockSpreadEvent(world, source, blockposition3, (BlockState) this.defaultBlockState().setValue(VineBlock.getPropertyForFace(enumdirection3), Boolean.TRUE), 2);
                             } else if (flag1 && world.isEmptyBlock(blockposition4) && VineBlock.isAcceptableNeighbour(world, pos.relative(enumdirection2), enumdirection3)) {
-                                CraftEventFactory.handleBlockSpreadEvent(world, source, blockposition4, (BlockState) this.defaultBlockState().setValue(VineBlock.getPropertyForFace(enumdirection3), true), 2);
+                                CraftEventFactory.handleBlockSpreadEvent(world, source, blockposition4, (BlockState) this.defaultBlockState().setValue(VineBlock.getPropertyForFace(enumdirection3), Boolean.TRUE), 2);
                             } else if ((double) random.nextFloat() < 0.05D && VineBlock.isAcceptableNeighbour(world, blockposition2.above(), Direction.UP)) {
-                                CraftEventFactory.handleBlockSpreadEvent(world, source, blockposition2, (BlockState) this.defaultBlockState().setValue(VineBlock.UP, true), 2);
+                                CraftEventFactory.handleBlockSpreadEvent(world, source, blockposition2, (BlockState) this.defaultBlockState().setValue(VineBlock.UP, Boolean.TRUE), 2);
                             }
                             // CraftBukkit end
                         }
                     } else if (VineBlock.isAcceptableNeighbour(world, blockposition2, enumdirection)) {
-                        world.setBlock(pos, (BlockState) state.setValue(VineBlock.getPropertyForFace(enumdirection), true), 2);
+                        world.setBlock(pos, (BlockState) state.setValue(VineBlock.getPropertyForFace(enumdirection), Boolean.TRUE), 2);
                     }
 
                 }
             } else {
                 if (enumdirection == Direction.UP && pos.getY() < world.getMaxBuildHeight() - 1) {
                     if (this.canSupportAtFace(world, pos, enumdirection)) {
-                        world.setBlock(pos, (BlockState) state.setValue(VineBlock.UP, true), 2);
+                        world.setBlock(pos, (BlockState) state.setValue(VineBlock.UP, Boolean.TRUE), 2);
                         return;
                     }
 
@@ -237,7 +237,7 @@ public class VineBlock extends Block {
                         while (iterator.hasNext()) {
                             enumdirection1 = (Direction) iterator.next();
                             if (random.nextBoolean() || !VineBlock.isAcceptableNeighbour(world, blockposition1.relative(enumdirection1), enumdirection1)) {
-                                iblockdata2 = (BlockState) iblockdata2.setValue(VineBlock.getPropertyForFace(enumdirection1), false);
+                                iblockdata2 = (BlockState) iblockdata2.setValue(VineBlock.getPropertyForFace(enumdirection1), Boolean.FALSE);
                             }
                         }
 
@@ -276,7 +276,7 @@ public class VineBlock extends Block {
                 BooleanProperty blockstateboolean = VineBlock.getPropertyForFace(enumdirection);
 
                 if ((Boolean) above.getValue(blockstateboolean)) {
-                    state = (BlockState) state.setValue(blockstateboolean, true);
+                    state = (BlockState) state.setValue(blockstateboolean, Boolean.TRUE);
                 }
             }
         }
@@ -332,7 +332,7 @@ public class VineBlock extends Block {
                 boolean flag1 = flag && (Boolean) iblockdata.getValue(blockstateboolean);
 
                 if (!flag1 && this.canSupportAtFace(ctx.getLevel(), ctx.getClickedPos(), enumdirection)) {
-                    return (BlockState) iblockdata1.setValue(blockstateboolean, true);
+                    return (BlockState) iblockdata1.setValue(blockstateboolean, Boolean.TRUE);
                 }
             }
         }
diff --git a/src/main/java/net/minecraft/world/level/block/WeightedPressurePlateBlock.java b/src/main/java/net/minecraft/world/level/block/WeightedPressurePlateBlock.java
index e3bcb7fc520abcb1854d89b65ebc947cc885caa6..4aa90f4eebb2cf76d847a887e83a50558d24bba4 100644
--- a/src/main/java/net/minecraft/world/level/block/WeightedPressurePlateBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/WeightedPressurePlateBlock.java
@@ -24,7 +24,7 @@ public class WeightedPressurePlateBlock extends BasePressurePlateBlock {
 
     protected WeightedPressurePlateBlock(int weight, BlockBehaviour.Properties settings, SoundEvent depressSound, SoundEvent pressSound) {
         super(settings);
-        this.registerDefaultState((BlockState) ((BlockState) this.stateDefinition.any()).setValue(WeightedPressurePlateBlock.POWER, 0));
+        this.registerDefaultState((BlockState) ((BlockState) this.stateDefinition.any()).setValue(WeightedPressurePlateBlock.POWER, Integer.valueOf(0)));
         this.maxWeight = weight;
         this.soundOff = depressSound;
         this.soundOn = pressSound;
@@ -84,7 +84,7 @@ public class WeightedPressurePlateBlock extends BasePressurePlateBlock {
 
     @Override
     protected BlockState setSignalForState(BlockState state, int rsOut) {
-        return (BlockState) state.setValue(WeightedPressurePlateBlock.POWER, rsOut);
+        return (BlockState) state.setValue(WeightedPressurePlateBlock.POWER, Integer.valueOf(rsOut));
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/entity/AbstractFurnaceBlockEntity.java b/src/main/java/net/minecraft/world/level/block/entity/AbstractFurnaceBlockEntity.java
index cac2768fe520b591990c7bc943ae7e95f49efb31..fe2581da6eadec788616a240465e6a913e2ee3b7 100644
--- a/src/main/java/net/minecraft/world/level/block/entity/AbstractFurnaceBlockEntity.java
+++ b/src/main/java/net/minecraft/world/level/block/entity/AbstractFurnaceBlockEntity.java
@@ -251,7 +251,7 @@ public abstract class AbstractFurnaceBlockEntity extends BaseContainerBlockEntit
             Holder<Item> holder = (Holder) iterator.next();
 
             if (!AbstractFurnaceBlockEntity.isNeverAFurnaceFuel((Item) holder.value())) {
-                fuelTimes.put((Item) holder.value(), fuelTime);
+                fuelTimes.put((Item) holder.value(), Integer.valueOf(fuelTime));
             }
         }
 
@@ -265,7 +265,7 @@ public abstract class AbstractFurnaceBlockEntity extends BaseContainerBlockEntit
                 throw (IllegalStateException) Util.pauseInIde(new IllegalStateException("A developer tried to explicitly make fire resistant item " + item1.getName((ItemStack) null).getString() + " a furnace fuel. That will not work!"));
             }
         } else {
-            fuelTimes.put(item1, fuelTime);
+            fuelTimes.put(item1, Integer.valueOf(fuelTime));
         }
     }
 
@@ -400,7 +400,7 @@ public abstract class AbstractFurnaceBlockEntity extends BaseContainerBlockEntit
 
         if (flag != blockEntity.isLit()) {
             flag1 = true;
-            state = (BlockState) state.setValue(AbstractFurnaceBlock.LIT, blockEntity.isLit());
+            state = (BlockState) state.setValue(AbstractFurnaceBlock.LIT, Boolean.valueOf(blockEntity.isLit()));
             world.setBlock(pos, state, 3);
         }
 
@@ -482,14 +482,14 @@ public abstract class AbstractFurnaceBlockEntity extends BaseContainerBlockEntit
         } else {
             Item item = fuel.getItem();
 
-            return (Integer) AbstractFurnaceBlockEntity.getFuel().getOrDefault(item, 0);
+            return (Integer) AbstractFurnaceBlockEntity.getFuel().getOrDefault(item, Integer.valueOf(0));
         }
     }
 
     // Paper start
     public static int getTotalCookTime(@Nullable Level world, RecipeType<? extends AbstractCookingRecipe> recipeType, AbstractFurnaceBlockEntity furnace, double cookSpeedMultiplier) {
         /* Scale the recipe's cooking time to the current cookSpeedMultiplier */
-        int cookTime = world != null ? furnace.quickCheck.getRecipeFor(furnace, world).map(AbstractCookingRecipe::getCookingTime).orElse(200) : (net.minecraft.server.MinecraftServer.getServer().getRecipeManager().getRecipeFor(recipeType, furnace, world /* passing a null level here is safe. world is only used for map extending recipes which won't happen here */).map(AbstractCookingRecipe::getCookingTime).orElse(200));
+        int cookTime = world != null ? furnace.quickCheck.getRecipeFor(furnace, world).map(AbstractCookingRecipe::getCookingTime).orElse(Integer.valueOf(200)) : (net.minecraft.server.MinecraftServer.getServer().getRecipeManager().getRecipeFor(recipeType, furnace, world /* passing a null level here is safe. world is only used for map extending recipes which won't happen here */).map(AbstractCookingRecipe::getCookingTime).orElse(Integer.valueOf(200)));
         return (int) Math.ceil (cookTime / cookSpeedMultiplier);
     }
     // Paper end
diff --git a/src/main/java/net/minecraft/world/level/block/entity/BarrelBlockEntity.java b/src/main/java/net/minecraft/world/level/block/entity/BarrelBlockEntity.java
index 416aa989ebb18a8741cc9d605a1180ab830f6643..d70c45e11183d8263544041a5ee2e9ca98c9e0e0 100644
--- a/src/main/java/net/minecraft/world/level/block/entity/BarrelBlockEntity.java
+++ b/src/main/java/net/minecraft/world/level/block/entity/BarrelBlockEntity.java
@@ -165,7 +165,7 @@ public class BarrelBlockEntity extends RandomizableContainerBlockEntity {
     }
 
     public void updateBlockState(BlockState state, boolean open) {
-        this.level.setBlock(this.getBlockPos(), (BlockState) state.setValue(BarrelBlock.OPEN, open), 3);
+        this.level.setBlock(this.getBlockPos(), (BlockState) state.setValue(BarrelBlock.OPEN, Boolean.valueOf(open)), 3);
     }
 
     public void playSound(BlockState state, SoundEvent soundEvent) {
diff --git a/src/main/java/net/minecraft/world/level/block/entity/BeehiveBlockEntity.java b/src/main/java/net/minecraft/world/level/block/entity/BeehiveBlockEntity.java
index 41c9f074203915c31c1ae7a160ce509c13383f84..2baf1166a22185eedb8732a06caad93e12c2e89a 100644
--- a/src/main/java/net/minecraft/world/level/block/entity/BeehiveBlockEntity.java
+++ b/src/main/java/net/minecraft/world/level/block/entity/BeehiveBlockEntity.java
@@ -260,7 +260,7 @@ public class BeehiveBlockEntity extends BlockEntity {
                                             --j;
                                         }
 
-                                        world.setBlockAndUpdate(blockposition, (BlockState) iblockdata.setValue(BeehiveBlock.HONEY_LEVEL, i + j));
+                                        world.setBlockAndUpdate(blockposition, (BlockState) iblockdata.setValue(BeehiveBlock.HONEY_LEVEL, Integer.valueOf(i + j)));
                                     }
                                 }
                             }
diff --git a/src/main/java/net/minecraft/world/level/block/entity/BellBlockEntity.java b/src/main/java/net/minecraft/world/level/block/entity/BellBlockEntity.java
index 648d8f3e72e30aacf68eb073a1ac30f8ec29503c..4cc44b51afeb526fe968b8e21a2c83389de63443 100644
--- a/src/main/java/net/minecraft/world/level/block/entity/BellBlockEntity.java
+++ b/src/main/java/net/minecraft/world/level/block/entity/BellBlockEntity.java
@@ -117,7 +117,7 @@ public class BellBlockEntity extends BlockEntity {
         if (!this.level.isClientSide) {
             for(LivingEntity livingEntity : this.nearbyEntities) {
                 if (livingEntity.isAlive() && !livingEntity.isRemoved() && blockPos.closerToCenterThan(livingEntity.position(), 32.0D)) {
-                    livingEntity.getBrain().setMemory(MemoryModuleType.HEARD_BELL_TIME, this.level.getGameTime());
+                    livingEntity.getBrain().setMemory(MemoryModuleType.HEARD_BELL_TIME, Long.valueOf(this.level.getGameTime()));
                 }
             }
         }
diff --git a/src/main/java/net/minecraft/world/level/block/entity/BrewingStandBlockEntity.java b/src/main/java/net/minecraft/world/level/block/entity/BrewingStandBlockEntity.java
index 55006724ccec9f3de828ec18693728e9741ff65f..6c17d2fcd82f36216c932b7af05d4be6d5b12f49 100644
--- a/src/main/java/net/minecraft/world/level/block/entity/BrewingStandBlockEntity.java
+++ b/src/main/java/net/minecraft/world/level/block/entity/BrewingStandBlockEntity.java
@@ -204,7 +204,7 @@ public class BrewingStandBlockEntity extends BaseContainerBlockEntity implements
             }
 
             for (int i = 0; i < BrewingStandBlock.HAS_BOTTLE.length; ++i) {
-                iblockdata1 = (BlockState) iblockdata1.setValue(BrewingStandBlock.HAS_BOTTLE[i], aboolean[i]);
+                iblockdata1 = (BlockState) iblockdata1.setValue(BrewingStandBlock.HAS_BOTTLE[i], Boolean.valueOf(aboolean[i]));
             }
 
             world.setBlock(pos, iblockdata1, 2);
diff --git a/src/main/java/net/minecraft/world/level/block/entity/HopperBlockEntity.java b/src/main/java/net/minecraft/world/level/block/entity/HopperBlockEntity.java
index ccad692aba2ed77259f6814d88f01b91ed9d229b..e559e868546c16abfb87e330feec6bc629847643 100644
--- a/src/main/java/net/minecraft/world/level/block/entity/HopperBlockEntity.java
+++ b/src/main/java/net/minecraft/world/level/block/entity/HopperBlockEntity.java
@@ -410,14 +410,14 @@ public class HopperBlockEntity extends RandomizableContainerBlockEntity implemen
     private static boolean allMatch(Container iinventory, Direction enumdirection, java.util.function.BiPredicate<ItemStack, Integer> test) {
         if (iinventory instanceof WorldlyContainer) {
             for (int i : ((WorldlyContainer) iinventory).getSlotsForFace(enumdirection)) {
-                if (!test.test(iinventory.getItem(i), i)) {
+                if (!test.test(iinventory.getItem(i), Integer.valueOf(i))) {
                     return false;
                 }
             }
         } else {
             int size = iinventory.getContainerSize();
             for (int i = 0; i < size; i++) {
-                if (!test.test(iinventory.getItem(i), i)) {
+                if (!test.test(iinventory.getItem(i), Integer.valueOf(i))) {
                     return false;
                 }
             }
@@ -428,14 +428,14 @@ public class HopperBlockEntity extends RandomizableContainerBlockEntity implemen
     private static boolean anyMatch(Container iinventory, Direction enumdirection, java.util.function.BiPredicate<ItemStack, Integer> test) {
         if (iinventory instanceof WorldlyContainer) {
             for (int i : ((WorldlyContainer) iinventory).getSlotsForFace(enumdirection)) {
-                if (test.test(iinventory.getItem(i), i)) {
+                if (test.test(iinventory.getItem(i), Integer.valueOf(i))) {
                     return true;
                 }
             }
         } else {
             int size = iinventory.getContainerSize();
             for (int i = 0; i < size; i++) {
-                if (test.test(iinventory.getItem(i), i)) {
+                if (test.test(iinventory.getItem(i), Integer.valueOf(i))) {
                     return true;
                 }
             }
diff --git a/src/main/java/net/minecraft/world/level/block/piston/PistonBaseBlock.java b/src/main/java/net/minecraft/world/level/block/piston/PistonBaseBlock.java
index f456ad8a74464414f69b616a48ee9a2c1cee4d90..7dcaa4f99e685ed6fcc2720bad6f6603e282faf5 100644
--- a/src/main/java/net/minecraft/world/level/block/piston/PistonBaseBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/piston/PistonBaseBlock.java
@@ -62,7 +62,7 @@ public class PistonBaseBlock extends DirectionalBlock {
 
     public PistonBaseBlock(boolean sticky, BlockBehaviour.Properties settings) {
         super(settings);
-        this.registerDefaultState((BlockState) ((BlockState) ((BlockState) this.stateDefinition.any()).setValue(PistonBaseBlock.FACING, Direction.NORTH)).setValue(PistonBaseBlock.EXTENDED, false));
+        this.registerDefaultState((BlockState) ((BlockState) ((BlockState) this.stateDefinition.any()).setValue(PistonBaseBlock.FACING, Direction.NORTH)).setValue(PistonBaseBlock.EXTENDED, Boolean.FALSE));
         this.isSticky = sticky;
     }
 
@@ -117,7 +117,7 @@ public class PistonBaseBlock extends DirectionalBlock {
 
     @Override
     public BlockState getStateForPlacement(BlockPlaceContext ctx) {
-        return (BlockState) ((BlockState) this.defaultBlockState().setValue(PistonBaseBlock.FACING, ctx.getNearestLookingDirection().getOpposite())).setValue(PistonBaseBlock.EXTENDED, false);
+        return (BlockState) ((BlockState) this.defaultBlockState().setValue(PistonBaseBlock.FACING, ctx.getNearestLookingDirection().getOpposite())).setValue(PistonBaseBlock.EXTENDED, Boolean.FALSE);
     }
 
     private void checkIfExtend(Level world, BlockPos pos, BlockState state) {
@@ -210,7 +210,7 @@ public class PistonBaseBlock extends DirectionalBlock {
             boolean flag = this.getNeighborSignal(world, pos, enumdirection);
 
             if (flag && (type == 1 || type == 2)) {
-                world.setBlock(pos, (BlockState) state.setValue(PistonBaseBlock.EXTENDED, true), 2);
+                world.setBlock(pos, (BlockState) state.setValue(PistonBaseBlock.EXTENDED, Boolean.TRUE), 2);
                 return false;
             }
 
@@ -224,7 +224,7 @@ public class PistonBaseBlock extends DirectionalBlock {
                 return false;
             }
 
-            world.setBlock(pos, (BlockState) state.setValue(PistonBaseBlock.EXTENDED, true), 67);
+            world.setBlock(pos, (BlockState) state.setValue(PistonBaseBlock.EXTENDED, Boolean.TRUE), 67);
             world.playSound((Player) null, pos, SoundEvents.PISTON_EXTEND, SoundSource.BLOCKS, 0.5F, world.random.nextFloat() * 0.25F + 0.6F);
             world.gameEvent((Entity) null, GameEvent.PISTON_EXTEND, pos);
         } else if (type == 1 || type == 2) {
diff --git a/src/main/java/net/minecraft/world/level/block/state/properties/BooleanProperty.java b/src/main/java/net/minecraft/world/level/block/state/properties/BooleanProperty.java
index 233215280f8494dbc33a2fd0b14e37e59f1cb643..639016d6adf235ea76395cf6332bc7f11f05c650 100644
--- a/src/main/java/net/minecraft/world/level/block/state/properties/BooleanProperty.java
+++ b/src/main/java/net/minecraft/world/level/block/state/properties/BooleanProperty.java
@@ -5,7 +5,7 @@ import java.util.Collection;
 import java.util.Optional;
 
 public class BooleanProperty extends Property<Boolean> {
-    private final ImmutableSet<Boolean> values = ImmutableSet.of(true, false);
+    private final ImmutableSet<Boolean> values = ImmutableSet.of(Boolean.TRUE, Boolean.FALSE);
 
     // Paper start - optimise iblockdata state lookup
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/state/properties/IntegerProperty.java b/src/main/java/net/minecraft/world/level/block/state/properties/IntegerProperty.java
index 8eb20ea852a8e89c431fea55a7b60833a6c8104f..c8b5a17aff1fcbabc09d600fac91b69f439c4c85 100644
--- a/src/main/java/net/minecraft/world/level/block/state/properties/IntegerProperty.java
+++ b/src/main/java/net/minecraft/world/level/block/state/properties/IntegerProperty.java
@@ -33,7 +33,7 @@ public class IntegerProperty extends Property<Integer> {
             Set<Integer> set = Sets.newHashSet();
 
             for(int i = min; i <= max; ++i) {
-                set.add(i);
+                set.add(Integer.valueOf(i));
             }
 
             this.values = ImmutableSet.copyOf(set);
diff --git a/src/main/java/net/minecraft/world/level/block/state/properties/Property.java b/src/main/java/net/minecraft/world/level/block/state/properties/Property.java
index f923593bd336dd1a950ba61603d53edb3c9703eb..c8268755902ca617b68a9e88135bd487f0ba15c1 100644
--- a/src/main/java/net/minecraft/world/level/block/state/properties/Property.java
+++ b/src/main/java/net/minecraft/world/level/block/state/properties/Property.java
@@ -85,7 +85,7 @@ public abstract class Property<T extends Comparable<T>> {
     @Override
     public final int hashCode() {
         if (this.hashCode == null) {
-            this.hashCode = this.generateHashCode();
+            this.hashCode = Integer.valueOf(this.generateHashCode());
         }
 
         return this.hashCode;
diff --git a/src/main/java/net/minecraft/world/level/chunk/ChunkAccess.java b/src/main/java/net/minecraft/world/level/chunk/ChunkAccess.java
index 0a39a19994c64f922d92a41ab5497a31a84dcc5e..0bbdd47238546c2f84f2de0b3d1e94b43bec842f 100644
--- a/src/main/java/net/minecraft/world/level/chunk/ChunkAccess.java
+++ b/src/main/java/net/minecraft/world/level/chunk/ChunkAccess.java
@@ -136,7 +136,7 @@ public abstract class ChunkAccess implements BlockGetter, BiomeManager.NoiseBiom
             if (this.sections.length == sectionArrayInitializer.length) {
                 System.arraycopy(sectionArrayInitializer, 0, this.sections, 0, this.sections.length);
             } else {
-                ChunkAccess.LOGGER.warn("Could not set level chunk sections, array length is {} instead of {}", sectionArrayInitializer.length, this.sections.length);
+                ChunkAccess.LOGGER.warn("Could not set level chunk sections, array length is {} instead of {}", Integer.valueOf(sectionArrayInitializer.length), Integer.valueOf(this.sections.length));
             }
         }
 
diff --git a/src/main/java/net/minecraft/world/level/chunk/ChunkGenerator.java b/src/main/java/net/minecraft/world/level/chunk/ChunkGenerator.java
index 7e9c388179c75a233d9b179ea1e00428ac65ee99..8037a64b22875ad5ebf22595ff67910180b715bf 100644
--- a/src/main/java/net/minecraft/world/level/chunk/ChunkGenerator.java
+++ b/src/main/java/net/minecraft/world/level/chunk/ChunkGenerator.java
@@ -95,7 +95,7 @@ public abstract class ChunkGenerator {
         this.generationSettingsGetter = generationSettingsGetter;
         this.featuresPerStep = Suppliers.memoize(() -> {
             return FeatureSorter.buildFeaturesPerStep(List.copyOf(biomeSource.possibleBiomes()), (holder) -> {
-                return ((BiomeGenerationSettings) generationSettingsGetter.apply(holder)).features();
+                return generationSettingsGetter.apply(holder).features();
             }, true);
         });
     }
@@ -335,7 +335,7 @@ public abstract class ChunkGenerator {
             BlockPos blockposition = sectionposition.origin();
             Registry<Structure> iregistry = generatoraccessseed.registryAccess().registryOrThrow(Registries.STRUCTURE);
             Map<Integer, List<Structure>> map = (Map) iregistry.stream().collect(Collectors.groupingBy((structure) -> {
-                return structure.step().ordinal();
+                return Integer.valueOf(structure.step().ordinal());
             }));
             List<FeatureSorter.StepFeatureData> list = (List) this.featuresPerStep.get();
             WorldgenRandom seededrandom = new WorldgenRandom(new XoroshiroRandomSource(RandomSupport.generateUniqueSeed()));
@@ -369,7 +369,7 @@ public abstract class ChunkGenerator {
                     CrashReportCategory crashreportsystemdetails;
 
                     if (structuremanager.shouldGenerateStructures()) {
-                        List<Structure> list1 = (List) map.getOrDefault(l, Collections.emptyList());
+                        List<Structure> list1 = (List) map.getOrDefault(Integer.valueOf(l), Collections.emptyList());
 
                         for (iterator = list1.iterator(); iterator.hasNext(); ++i1) {
                             Structure structure = (Structure) iterator.next();
@@ -461,7 +461,7 @@ public abstract class ChunkGenerator {
             } catch (Exception exception2) {
                 CrashReport crashreport2 = CrashReport.forThrowable(exception2, "Biome decoration");
 
-                crashreport2.addCategory("Generation").setDetail("CenterX", (Object) chunkcoordintpair.x).setDetail("CenterZ", (Object) chunkcoordintpair.z).setDetail("Seed", (Object) i);
+                crashreport2.addCategory("Generation").setDetail("CenterX", Integer.valueOf(chunkcoordintpair.x)).setDetail("CenterZ", Integer.valueOf(chunkcoordintpair.z)).setDetail("Seed", Long.valueOf(i));
                 throw new ReportedException(crashreport2);
             }
         }
diff --git a/src/main/java/net/minecraft/world/level/chunk/LevelChunk.java b/src/main/java/net/minecraft/world/level/chunk/LevelChunk.java
index b8af851d4289e6b6260e8982b4b8b0db12150a2a..24aedd762008fe3a7652cb54d2c30be4a64726dd 100644
--- a/src/main/java/net/minecraft/world/level/chunk/LevelChunk.java
+++ b/src/main/java/net/minecraft/world/level/chunk/LevelChunk.java
@@ -1312,7 +1312,7 @@ public class LevelChunk extends ChunkAccess {
                     } catch (Throwable throwable) {
                         if (throwable instanceof ThreadDeath) throw throwable; // Paper
                         // Paper start - Prevent tile entity and entity crashes
-                        final String msg = String.format("BlockEntity threw exception at %s:%s,%s,%s", LevelChunk.this.getLevel().getWorld().getName(), this.getPos().getX(), this.getPos().getY(), this.getPos().getZ());
+                        final String msg = String.format("BlockEntity threw exception at %s:%s,%s,%s", LevelChunk.this.getLevel().getWorld().getName(), Integer.valueOf(this.getPos().getX()), Integer.valueOf(this.getPos().getY()), Integer.valueOf(this.getPos().getZ()));
                         net.minecraft.server.MinecraftServer.LOGGER.error(msg, throwable);
                         net.minecraft.world.level.chunk.LevelChunk.this.level.getCraftServer().getPluginManager().callEvent(new com.destroystokyo.paper.event.server.ServerExceptionEvent(new ServerInternalException(msg, throwable)));
                         LevelChunk.this.removeBlockEntity(this.getPos());
diff --git a/src/main/java/net/minecraft/world/level/chunk/storage/EntityStorage.java b/src/main/java/net/minecraft/world/level/chunk/storage/EntityStorage.java
index 1782d6957fa0290368e443e2e8d7b3c77ac6b8ef..13b67b48175e06e694f6f4e44a669b132a7c2886 100644
--- a/src/main/java/net/minecraft/world/level/chunk/storage/EntityStorage.java
+++ b/src/main/java/net/minecraft/world/level/chunk/storage/EntityStorage.java
@@ -116,10 +116,10 @@ public class EntityStorage implements EntityPersistentStorage<Entity> {
             final EntityType<?> entityType = entity.getType();
             final int saveLimit = level.paperConfig().chunks.entityPerChunkSaveLimit.getOrDefault(entityType, -1);
             if (saveLimit > -1) {
-                if (savedEntityCounts.getOrDefault(entityType, 0) >= saveLimit) {
+                if (savedEntityCounts.getOrDefault(entityType, Integer.valueOf(0)) >= saveLimit) {
                     return;
                 }
-                savedEntityCounts.merge(entityType, 1, Integer::sum);
+                savedEntityCounts.merge(entityType, Integer.valueOf(1), Integer::sum);
             }
             // Paper end
             CompoundTag compoundTag = new CompoundTag();
diff --git a/src/main/java/net/minecraft/world/level/chunk/storage/RegionFile.java b/src/main/java/net/minecraft/world/level/chunk/storage/RegionFile.java
index dcfe090c269d4cbcc2eb1b6f85392848bb34656c..36cc4540285958aa01c7bfc73e91eebff233ad24 100644
--- a/src/main/java/net/minecraft/world/level/chunk/storage/RegionFile.java
+++ b/src/main/java/net/minecraft/world/level/chunk/storage/RegionFile.java
@@ -465,7 +465,7 @@ public class RegionFile implements AutoCloseable {
 
             if (i != -1) {
                 if (i != 8192) {
-                    RegionFile.LOGGER.warn("Region file {} has truncated header: {}", file, i);
+                    RegionFile.LOGGER.warn("Region file {} has truncated header: {}", file, Integer.valueOf(i));
                 }
 
                 final long j = Files.size(file); final long regionFileSize = j; // Paper - recalculate header on header corruption
@@ -489,13 +489,13 @@ public class RegionFile implements AutoCloseable {
                         sectorLength = j1; // Paper - diff on change, we expect this to be sector length of region
 
                         if (i1 < 2) {
-                            RegionFile.LOGGER.warn("Region file {} has invalid sector at index: {}; sector {} overlaps with header", new Object[]{file, k, i1});
+                            RegionFile.LOGGER.warn("Region file {} has invalid sector at index: {}; sector {} overlaps with header", new Object[]{file, Integer.valueOf(k), Integer.valueOf(i1)});
                             //this.offsets.put(k, 0); // Paper - we catch this, but need it in the header for the summary change
                         } else if (j1 == 0) {
-                            RegionFile.LOGGER.warn("Region file {} has an invalid sector at index: {}; size has to be > 0", file, k);
+                            RegionFile.LOGGER.warn("Region file {} has an invalid sector at index: {}; size has to be > 0", file, Integer.valueOf(k));
                             //this.offsets.put(k, 0); // Paper - we catch this, but need it in the header for the summary change
                         } else if ((long) i1 * 4096L > j) {
-                            RegionFile.LOGGER.warn("Region file {} has an invalid sector at index: {}; sector {} is out of bounds", new Object[]{file, k, i1});
+                            RegionFile.LOGGER.warn("Region file {} has an invalid sector at index: {}; sector {} is out of bounds", new Object[]{file, Integer.valueOf(k), Integer.valueOf(i1)});
                             //this.offsets.put(k, 0); // Paper - we catch this, but need it in the header for the summary change
                         } else {
                             //this.usedSectors.force(i1, j1); // Paper - move this down so we can check if it fails to allocate
@@ -604,7 +604,7 @@ public class RegionFile implements AutoCloseable {
             this.file.read(bytebuffer, (long) (j * 4096));
             ((java.nio.Buffer) bytebuffer).flip(); // CraftBukkit - decompile error
             if (bytebuffer.remaining() < 5) {
-                RegionFile.LOGGER.error("Chunk {} header is truncated: expected {} but read {}", new Object[]{pos, l, bytebuffer.remaining()});
+                RegionFile.LOGGER.error("Chunk {} header is truncated: expected {} but read {}", new Object[]{pos, Integer.valueOf(l), Integer.valueOf(bytebuffer.remaining())});
                 // Paper start - recalculate header on regionfile corruption
                 if (this.canRecalcHeader && this.recalculateHeader()) {
                     return this.getChunkDataInputStream(pos);
@@ -644,7 +644,7 @@ public class RegionFile implements AutoCloseable {
                         return ret;
                         // Paper end - recalculate header on regionfile corruption
                     } else if (j1 > bytebuffer.remaining()) {
-                        RegionFile.LOGGER.error("Chunk {} stream is truncated: expected {} but read {}", new Object[]{pos, j1, bytebuffer.remaining()});
+                        RegionFile.LOGGER.error("Chunk {} stream is truncated: expected {} but read {}", new Object[]{pos, Integer.valueOf(j1), Integer.valueOf(bytebuffer.remaining())});
                         // Paper start - recalculate header on regionfile corruption
                         if (this.canRecalcHeader && this.recalculateHeader()) {
                             return this.getChunkDataInputStream(pos);
@@ -652,7 +652,7 @@ public class RegionFile implements AutoCloseable {
                         // Paper end - recalculate header on regionfile corruption
                         return null;
                     } else if (j1 < 0) {
-                        RegionFile.LOGGER.error("Declared size {} of chunk {} is negative", i1, pos);
+                        RegionFile.LOGGER.error("Declared size {} of chunk {} is negative", Integer.valueOf(i1), pos);
                         // Paper start - recalculate header on regionfile corruption
                         if (this.canRecalcHeader && this.recalculateHeader()) {
                             return this.getChunkDataInputStream(pos);
@@ -815,7 +815,7 @@ public class RegionFile implements AutoCloseable {
         if (j1 >= 256) {
             Path path = this.getExternalChunkPath(pos);
 
-            RegionFile.LOGGER.warn("Saving oversized chunk {} ({} bytes} to external file {}", new Object[]{pos, i1, path});
+            RegionFile.LOGGER.warn("Saving oversized chunk {} ({} bytes} to external file {}", new Object[]{pos, Integer.valueOf(i1), path});
             j1 = 1;
             k1 = this.usedSectors.allocate(j1);
             regionfile_b = this.writeToExternalFile(path, buf);
diff --git a/src/main/java/net/minecraft/world/level/dimension/end/EndDragonFight.java b/src/main/java/net/minecraft/world/level/dimension/end/EndDragonFight.java
index e9eb32469a5c03f7a3677ef50fd4541c1ed662ad..88b6eaac48b266b6bf23ec3d6cd63c69098fa149 100644
--- a/src/main/java/net/minecraft/world/level/dimension/end/EndDragonFight.java
+++ b/src/main/java/net/minecraft/world/level/dimension/end/EndDragonFight.java
@@ -125,10 +125,10 @@ public class EndDragonFight {
             ListTag listTag = nbt.getList("Gateways", 3);
 
             for(int i = 0; i < listTag.size(); ++i) {
-                this.gateways.add(listTag.getInt(i));
+                this.gateways.add(Integer.valueOf(listTag.getInt(i)));
             }
         } else {
-            this.gateways.addAll(ContiguousSet.create(Range.closedOpen(0, 20), DiscreteDomain.integers()));
+            this.gateways.addAll(ContiguousSet.create(Range.closedOpen(Integer.valueOf(0), Integer.valueOf(20)), DiscreteDomain.integers()));
             Util.shuffle(this.gateways, RandomSource.create(gatewaysSeed));
         }
 
@@ -364,7 +364,7 @@ public class EndDragonFight {
             this.crystalsAlive += this.level.getEntitiesOfClass(EndCrystal.class, endSpike.getTopBoundingBox()).size();
         }
 
-        LOGGER.debug("Found {} end crystals still alive", (int)this.crystalsAlive);
+        LOGGER.debug("Found {} end crystals still alive", Integer.valueOf((int) this.crystalsAlive));
     }
 
     public void setDragonKilled(EnderDragon dragon) {
diff --git a/src/main/java/net/minecraft/world/level/entity/PersistentEntitySectionManager.java b/src/main/java/net/minecraft/world/level/entity/PersistentEntitySectionManager.java
index a77985b2dd7137d8eea03909403fc08e89376d73..11dd82fa46ffaae18ffa59e97a43e21f9ca83ee8 100644
--- a/src/main/java/net/minecraft/world/level/entity/PersistentEntitySectionManager.java
+++ b/src/main/java/net/minecraft/world/level/entity/PersistentEntitySectionManager.java
@@ -418,7 +418,7 @@ public class PersistentEntitySectionManager<T extends EntityAccess> implements A
 
                 if (entitysection != null) {
                     try {
-                        csvwriter.writeRow(SectionPos.x(j), SectionPos.y(j), SectionPos.z(j), entitysection.getStatus(), persistententitysectionmanager_b, entitysection.size());
+                        csvwriter.writeRow(Integer.valueOf(SectionPos.x(j)), Integer.valueOf(SectionPos.y(j)), Integer.valueOf(SectionPos.z(j)), entitysection.getStatus(), persistententitysectionmanager_b, Integer.valueOf(entitysection.size()));
                     } catch (IOException ioexception) {
                         throw new UncheckedIOException(ioexception);
                     }
@@ -464,7 +464,7 @@ public class PersistentEntitySectionManager<T extends EntityAccess> implements A
                 Visibility visibility = this.currentSection.getStatus();
 
                 if (!this.currentSection.remove(this.entity)) {
-                    PersistentEntitySectionManager.LOGGER.warn("Entity {} wasn't found in section {} (moving to {})", new Object[]{this.entity, SectionPos.of(this.currentSectionKey), i});
+                    PersistentEntitySectionManager.LOGGER.warn("Entity {} wasn't found in section {} (moving to {})", new Object[]{this.entity, SectionPos.of(this.currentSectionKey), Long.valueOf(i)});
                 }
 
                 PersistentEntitySectionManager.this.removeSectionIfEmpty(this.currentSectionKey, this.currentSection);
diff --git a/src/main/java/net/minecraft/world/level/levelgen/DensityFunctions.java b/src/main/java/net/minecraft/world/level/levelgen/DensityFunctions.java
index 1beacd84bb0eee1f3e8f451fc1c514e23cc62826..42b3846f5dc75273899bd2fc7e9adbde78ad7848 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/DensityFunctions.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/DensityFunctions.java
@@ -37,7 +37,7 @@ public final class DensityFunctions {
         return either.map(DensityFunctions::constant, Function.identity());
     }, (densityFunction) -> {
         if (densityFunction instanceof DensityFunctions.Constant constant) {
-            return Either.left(constant.value());
+            return Either.left(Double.valueOf(constant.value()));
         } else {
             return Either.right(densityFunction);
         }
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/SpikeFeature.java b/src/main/java/net/minecraft/world/level/levelgen/feature/SpikeFeature.java
index 570c0646e245a1527b3a569f2c8a6fae5b18b373..51eeffd2a2f4e727ca8083d78a6fb5f51774d905 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/SpikeFeature.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/SpikeFeature.java
@@ -38,7 +38,7 @@ public class SpikeFeature extends Feature<SpikeConfiguration> {
     public static List<SpikeFeature.EndSpike> getSpikesForLevel(WorldGenLevel world) {
         RandomSource randomSource = RandomSource.create(world.getSeed());
         long l = randomSource.nextLong() & 65535L;
-        return SPIKE_CACHE.getUnchecked(l);
+        return SPIKE_CACHE.getUnchecked(Long.valueOf(l));
     }
 
     @Override
@@ -109,16 +109,16 @@ public class SpikeFeature extends Feature<SpikeConfiguration> {
 
     public static class EndSpike {
         public static final Codec<SpikeFeature.EndSpike> CODEC = RecordCodecBuilder.create((instance) -> {
-            return instance.group(Codec.INT.fieldOf("centerX").orElse(0).forGetter((spike) -> {
-                return spike.centerX;
-            }), Codec.INT.fieldOf("centerZ").orElse(0).forGetter((spike) -> {
-                return spike.centerZ;
-            }), Codec.INT.fieldOf("radius").orElse(0).forGetter((spike) -> {
-                return spike.radius;
-            }), Codec.INT.fieldOf("height").orElse(0).forGetter((spike) -> {
-                return spike.height;
-            }), Codec.BOOL.fieldOf("guarded").orElse(false).forGetter((spike) -> {
-                return spike.guarded;
+            return instance.group(Codec.INT.fieldOf("centerX").orElse(Integer.valueOf(0)).forGetter((spike) -> {
+                return Integer.valueOf(spike.centerX);
+            }), Codec.INT.fieldOf("centerZ").orElse(Integer.valueOf(0)).forGetter((spike) -> {
+                return Integer.valueOf(spike.centerZ);
+            }), Codec.INT.fieldOf("radius").orElse(Integer.valueOf(0)).forGetter((spike) -> {
+                return Integer.valueOf(spike.radius);
+            }), Codec.INT.fieldOf("height").orElse(Integer.valueOf(0)).forGetter((spike) -> {
+                return Integer.valueOf(spike.height);
+            }), Codec.BOOL.fieldOf("guarded").orElse(Boolean.FALSE).forGetter((spike) -> {
+                return Boolean.valueOf(spike.guarded);
             })).apply(instance, SpikeFeature.EndSpike::new);
         });
         private final int centerX;
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/treedecorators/CocoaDecorator.java b/src/main/java/net/minecraft/world/level/levelgen/feature/treedecorators/CocoaDecorator.java
index 0fc355bd847749f7ce716b283dd571f143824795..9ca693059966a8484e66be63326283390df2ff65 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/treedecorators/CocoaDecorator.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/treedecorators/CocoaDecorator.java
@@ -10,7 +10,7 @@ import net.minecraft.world.level.block.CocoaBlock;
 
 public class CocoaDecorator extends TreeDecorator {
     public static final Codec<CocoaDecorator> CODEC = Codec.floatRange(0.0F, 1.0F).fieldOf("probability").xmap(CocoaDecorator::new, (decorator) -> {
-        return decorator.probability;
+        return Float.valueOf(decorator.probability);
     }).codec();
     private final float probability;
 
diff --git a/src/main/java/net/minecraft/world/level/levelgen/structure/StructureCheck.java b/src/main/java/net/minecraft/world/level/levelgen/structure/StructureCheck.java
index 4761aa772bc34dd66547dd4dd561c2e04c3229ad..c37dbf13d19f8cc38e25129c5c038b852e04a93e 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/structure/StructureCheck.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/structure/StructureCheck.java
@@ -207,7 +207,7 @@ public class StructureCheck {
             }
 
             referencesByStructure.computeInt(structure, (feature, references) -> {
-                return references == null ? 1 : references + 1;
+                return Integer.valueOf(references == null ? 1 : references + 1);
             });
             return referencesByStructure;
         });
diff --git a/src/main/java/net/minecraft/world/level/levelgen/structure/placement/StructurePlacement.java b/src/main/java/net/minecraft/world/level/levelgen/structure/placement/StructurePlacement.java
index 594a2dd3b1d4c29c969d1992b8e93795da00e682..6bc336bffc5e6b7c76f34fd23814631cf717c7a6 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/structure/placement/StructurePlacement.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/structure/placement/StructurePlacement.java
@@ -28,7 +28,7 @@ public abstract class StructurePlacement {
     public final Optional<StructurePlacement.ExclusionZone> exclusionZone;
 
     protected static <S extends StructurePlacement> Products.P5<RecordCodecBuilder.Mu<S>, Vec3i, StructurePlacement.FrequencyReductionMethod, Float, Integer, Optional<StructurePlacement.ExclusionZone>> placementCodec(RecordCodecBuilder.Instance<S> instance) {
-        return instance.group(Vec3i.offsetCodec(16).optionalFieldOf("locate_offset", Vec3i.ZERO).forGetter(StructurePlacement::locateOffset), StructurePlacement.FrequencyReductionMethod.CODEC.optionalFieldOf("frequency_reduction_method", StructurePlacement.FrequencyReductionMethod.DEFAULT).forGetter(StructurePlacement::frequencyReductionMethod), Codec.floatRange(0.0F, 1.0F).optionalFieldOf("frequency", 1.0F).forGetter(StructurePlacement::frequency), ExtraCodecs.NON_NEGATIVE_INT.fieldOf("salt").forGetter(StructurePlacement::salt), StructurePlacement.ExclusionZone.CODEC.optionalFieldOf("exclusion_zone").forGetter(StructurePlacement::exclusionZone));
+        return instance.group(Vec3i.offsetCodec(16).optionalFieldOf("locate_offset", Vec3i.ZERO).forGetter(StructurePlacement::locateOffset), StructurePlacement.FrequencyReductionMethod.CODEC.optionalFieldOf("frequency_reduction_method", StructurePlacement.FrequencyReductionMethod.DEFAULT).forGetter(StructurePlacement::frequencyReductionMethod), Codec.floatRange(0.0F, 1.0F).optionalFieldOf("frequency", Float.valueOf(1.0F)).forGetter(StructurePlacement::frequency), ExtraCodecs.NON_NEGATIVE_INT.fieldOf("salt").forGetter(StructurePlacement::salt), StructurePlacement.ExclusionZone.CODEC.optionalFieldOf("exclusion_zone").forGetter(StructurePlacement::exclusionZone));
     }
 
     protected StructurePlacement(Vec3i locateOffset, StructurePlacement.FrequencyReductionMethod frequencyReductionMethod, float frequency, int salt, Optional<StructurePlacement.ExclusionZone> exclusionZone) {
diff --git a/src/main/java/net/minecraft/world/level/lighting/DataLayerStorageMap.java b/src/main/java/net/minecraft/world/level/lighting/DataLayerStorageMap.java
index f357a3473682c2d37a20fb862522c67b9979402a..78a51ab6da5ba4eecb1ba21c30ed7332f612a591 100644
--- a/src/main/java/net/minecraft/world/level/lighting/DataLayerStorageMap.java
+++ b/src/main/java/net/minecraft/world/level/lighting/DataLayerStorageMap.java
@@ -39,7 +39,7 @@ public abstract class DataLayerStorageMap<M extends DataLayerStorageMap<M>> {
     }
 
     public boolean hasLayer(long chunkPos) {
-        return lookup.apply(chunkPos) != null; // Paper - avoid copying light data
+        return lookup.apply(Long.valueOf(chunkPos)) != null; // Paper - avoid copying light data
     }
 
     @Nullable
@@ -52,7 +52,7 @@ public abstract class DataLayerStorageMap<M extends DataLayerStorageMap<M>> {
             }
         }
 
-        DataLayer dataLayer = lookup.apply(chunkPos); // Paper - avoid copying light data
+        DataLayer dataLayer = lookup.apply(Long.valueOf(chunkPos)); // Paper - avoid copying light data
         if (dataLayer == null) {
             return null;
         } else {
diff --git a/src/main/java/net/minecraft/world/level/lighting/SkyLightEngine.java b/src/main/java/net/minecraft/world/level/lighting/SkyLightEngine.java
index ca710a20e8b97341616463f4058b61cf4999af28..f8c721bef15dcf6777344ca42d5085183674c848 100644
--- a/src/main/java/net/minecraft/world/level/lighting/SkyLightEngine.java
+++ b/src/main/java/net/minecraft/world/level/lighting/SkyLightEngine.java
@@ -43,7 +43,7 @@ public final class SkyLightEngine extends LayerLightEngine<SkyLightSectionStorag
                     int q = Integer.signum(n - k);
                     Direction direction = Direction.fromNormal(o, p, q);
                     if (direction == null) {
-                        throw new IllegalStateException(String.format(Locale.ROOT, "Light was spread in illegal direction %d, %d, %d", o, p, q));
+                        throw new IllegalStateException(String.format(Locale.ROOT, "Light was spread in illegal direction %d, %d, %d", Integer.valueOf(o), Integer.valueOf(p), Integer.valueOf(q)));
                     } else {
                         BlockState blockState2 = this.getStateAndOpacity(sourceId, (MutableInt)null);
                         VoxelShape voxelShape = this.getShape(blockState2, sourceId, direction);
diff --git a/src/main/java/net/minecraft/world/level/material/FlowingFluid.java b/src/main/java/net/minecraft/world/level/material/FlowingFluid.java
index 0ffc131baf5c0edc4f2ca0f466fcdb20be4a47b8..fb7e61ddbc0b005111d043238cfdf78137141d21 100644
--- a/src/main/java/net/minecraft/world/level/material/FlowingFluid.java
+++ b/src/main/java/net/minecraft/world/level/material/FlowingFluid.java
@@ -278,13 +278,13 @@ public abstract class FlowingFluid extends Fluid {
     public abstract Fluid getFlowing();
 
     public FluidState getFlowing(int level, boolean falling) {
-        return (FluidState) ((FluidState) this.getFlowing().defaultFluidState().setValue(FlowingFluid.LEVEL, level)).setValue(FlowingFluid.FALLING, falling);
+        return (FluidState) ((FluidState) this.getFlowing().defaultFluidState().setValue(FlowingFluid.LEVEL, Integer.valueOf(level))).setValue(FlowingFluid.FALLING, Boolean.valueOf(falling));
     }
 
     public abstract Fluid getSource();
 
     public FluidState getSource(boolean falling) {
-        return (FluidState) this.getSource().defaultFluidState().setValue(FlowingFluid.FALLING, falling);
+        return (FluidState) this.getSource().defaultFluidState().setValue(FlowingFluid.FALLING, Boolean.valueOf(falling));
     }
 
     protected abstract boolean canConvertToSource(Level world);
diff --git a/src/main/java/net/minecraft/world/level/material/LavaFluid.java b/src/main/java/net/minecraft/world/level/material/LavaFluid.java
index 783e315d92227cbcb5cd207b0a06a12e0778d14b..47c8960834be0c0ddae363d6de6c47c8bd7e67f7 100644
--- a/src/main/java/net/minecraft/world/level/material/LavaFluid.java
+++ b/src/main/java/net/minecraft/world/level/material/LavaFluid.java
@@ -160,7 +160,7 @@ public abstract class LavaFluid extends FlowingFluid {
 
     @Override
     public BlockState createLegacyBlock(FluidState state) {
-        return (BlockState) Blocks.LAVA.defaultBlockState().setValue(LiquidBlock.LEVEL, getLegacyLevel(state));
+        return (BlockState) Blocks.LAVA.defaultBlockState().setValue(LiquidBlock.LEVEL, Integer.valueOf(getLegacyLevel(state)));
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/level/storage/LevelStorageSource.java b/src/main/java/net/minecraft/world/level/storage/LevelStorageSource.java
index 7210875d79f9d2a2c13405e0003f91eea1ad0565..f4dbac129fdb9496d778a8770a9c2d86decfc479 100644
--- a/src/main/java/net/minecraft/world/level/storage/LevelStorageSource.java
+++ b/src/main/java/net/minecraft/world/level/storage/LevelStorageSource.java
@@ -497,7 +497,7 @@ public class LevelStorageSource {
             int i = 1;
 
             while (i <= 5) {
-                LevelStorageSource.LOGGER.info("Attempt {}...", i);
+                LevelStorageSource.LOGGER.info("Attempt {}...", Integer.valueOf(i));
 
                 try {
                     Files.walkFileTree(this.levelDirectory.path(), new SimpleFileVisitor<Path>() {
diff --git a/src/main/java/net/minecraft/world/level/storage/loot/LootTable.java b/src/main/java/net/minecraft/world/level/storage/loot/LootTable.java
index 3bc13092873609af9c6f412190dd989d39f1df23..33eb36cbde09bccd6ca2f437bcd1ea93430635fb 100644
--- a/src/main/java/net/minecraft/world/level/storage/loot/LootTable.java
+++ b/src/main/java/net/minecraft/world/level/storage/loot/LootTable.java
@@ -213,7 +213,7 @@ public class LootTable {
 
         for (int i = 0; i < inventory.getContainerSize(); ++i) {
             if (inventory.getItem(i).isEmpty()) {
-                objectarraylist.add(i);
+                objectarraylist.add(Integer.valueOf(i));
             }
         }
 
diff --git a/src/main/java/net/minecraft/world/level/storage/loot/entries/LootPoolSingletonContainer.java b/src/main/java/net/minecraft/world/level/storage/loot/entries/LootPoolSingletonContainer.java
index d125b5a470be0f4c56c2c1f229fc5c83fc4d2f3b..93e287433ab6d1ad7b4fddf340568dc751e84c29 100644
--- a/src/main/java/net/minecraft/world/level/storage/loot/entries/LootPoolSingletonContainer.java
+++ b/src/main/java/net/minecraft/world/level/storage/loot/entries/LootPoolSingletonContainer.java
@@ -134,7 +134,7 @@ public abstract class LootPoolSingletonContainer extends LootPoolEntryContainer
                 // =B2 - (C2 *($B$7/100))
                 baseWeight = Math.ceil(baseWeight - (impacted * luckModifier));
             }
-            LootPoolSingletonContainer.this.lastLuck = luck;
+            LootPoolSingletonContainer.this.lastLuck = Float.valueOf(luck);
             LootPoolSingletonContainer.this.lastWeight = (int) Math.max(Math.floor(baseWeight), 0);
             return lastWeight;
         }
@@ -152,11 +152,11 @@ public abstract class LootPoolSingletonContainer extends LootPoolEntryContainer
         @Override
         public void serializeCustom(JsonObject json, T entry, JsonSerializationContext context) {
             if (entry.weight != 1) {
-                json.addProperty("weight", entry.weight);
+                json.addProperty("weight", Integer.valueOf(entry.weight));
             }
 
             if (entry.quality != 0) {
-                json.addProperty("quality", entry.quality);
+                json.addProperty("quality", Integer.valueOf(entry.quality));
             }
 
             if (!ArrayUtils.isEmpty((Object[])entry.functions)) {
diff --git a/src/main/java/net/minecraft/world/level/storage/loot/functions/ExplorationMapFunction.java b/src/main/java/net/minecraft/world/level/storage/loot/functions/ExplorationMapFunction.java
index a4806eb60d5dde1f1bd11d9501f3cc4f1805311d..111498081fc36f887e7dc4844a56d1b2f65f4e3f 100644
--- a/src/main/java/net/minecraft/world/level/storage/loot/functions/ExplorationMapFunction.java
+++ b/src/main/java/net/minecraft/world/level/storage/loot/functions/ExplorationMapFunction.java
@@ -150,15 +150,15 @@ public class ExplorationMapFunction extends LootItemConditionalFunction {
             }
 
             if (object.zoom != 2) {
-                json.addProperty("zoom", object.zoom);
+                json.addProperty("zoom", Byte.valueOf(object.zoom));
             }
 
             if (object.searchRadius != 50) {
-                json.addProperty("search_radius", object.searchRadius);
+                json.addProperty("search_radius", Integer.valueOf(object.searchRadius));
             }
 
             if (!object.skipKnownStructures) {
-                json.addProperty("skip_existing_chunks", object.skipKnownStructures);
+                json.addProperty("skip_existing_chunks", Boolean.valueOf(object.skipKnownStructures));
             }
 
         }
diff --git a/src/main/java/net/minecraft/world/level/storage/loot/functions/LootingEnchantFunction.java b/src/main/java/net/minecraft/world/level/storage/loot/functions/LootingEnchantFunction.java
index 31918fa2eb38e42a5ea5366e559f25ea9d7d59ae..c66e07b1b9dcffb9bad77375a985445486b85872 100644
--- a/src/main/java/net/minecraft/world/level/storage/loot/functions/LootingEnchantFunction.java
+++ b/src/main/java/net/minecraft/world/level/storage/loot/functions/LootingEnchantFunction.java
@@ -107,7 +107,7 @@ public class LootingEnchantFunction extends LootItemConditionalFunction {
             super.serialize(json, object, context); // CraftBukkit - decompile error
             json.add("count", context.serialize(object.value));
             if (object.hasLimit()) {
-                json.add("limit", context.serialize(object.limit));
+                json.add("limit", context.serialize(Integer.valueOf(object.limit)));
             }
 
         }
diff --git a/src/main/java/net/minecraft/world/level/storage/loot/predicates/LootItemRandomChanceWithLootingCondition.java b/src/main/java/net/minecraft/world/level/storage/loot/predicates/LootItemRandomChanceWithLootingCondition.java
index e530662ef00d89c92d60cdfc41d2f887d3bc388d..b2d1e4766ef5d9be0534e49074d5cadda8902888 100644
--- a/src/main/java/net/minecraft/world/level/storage/loot/predicates/LootItemRandomChanceWithLootingCondition.java
+++ b/src/main/java/net/minecraft/world/level/storage/loot/predicates/LootItemRandomChanceWithLootingCondition.java
@@ -60,8 +60,8 @@ public class LootItemRandomChanceWithLootingCondition implements LootItemConditi
         public Serializer() {}
 
         public void serialize(JsonObject json, LootItemRandomChanceWithLootingCondition object, JsonSerializationContext context) {
-            json.addProperty("chance", object.percent);
-            json.addProperty("looting_multiplier", object.lootingMultiplier);
+            json.addProperty("chance", Float.valueOf(object.percent));
+            json.addProperty("looting_multiplier", Float.valueOf(object.lootingMultiplier));
         }
 
         @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftChunk.java b/src/main/java/org/bukkit/craftbukkit/CraftChunk.java
index c4c5087bb43703a0d4bf877122fd82b4d4448f09..154ff2633af5424a5fd40c5a11f239fb8c43a9d7 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftChunk.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftChunk.java
@@ -365,7 +365,7 @@ public class CraftChunk implements Chunk {
 
     static void validateChunkCoordinates(int minY, int maxY, int x, int y, int z) {
         Preconditions.checkArgument(0 <= x && x <= 15, "x out of range (expected 0-15, got %s)", x);
-        Preconditions.checkArgument(minY <= y && y <= maxY, "y out of range (expected %s-%s, got %s)", minY, maxY, y);
+        Preconditions.checkArgument(minY <= y && y <= maxY, "y out of range (expected %s-%s, got %s)", Integer.valueOf(minY), Integer.valueOf(maxY), Integer.valueOf(y));
         Preconditions.checkArgument(0 <= z && z <= 15, "z out of range (expected 0-15, got %s)", z);
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftLootTable.java b/src/main/java/org/bukkit/craftbukkit/CraftLootTable.java
index 42c6c1f401bdead5d8a666092830f10febc8b157..1ca3264a53374c2e9a492208321ce4fb09db0655 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftLootTable.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftLootTable.java
@@ -109,7 +109,7 @@ public class CraftLootTable implements org.bukkit.loot.LootTable {
 
             // SPIGOT-5603 - Use LootContext#lootingModifier
             if (context.getLootingModifier() != LootContext.DEFAULT_LOOT_MODIFIER) {
-                this.setMaybe(builder, LootContextParams.LOOTING_MOD, context.getLootingModifier());
+                this.setMaybe(builder, LootContextParams.LOOTING_MOD, Integer.valueOf(context.getLootingModifier()));
             }
         }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index 9d55213fdc003676b6908133069a1b8aa4887736..1c6cf44bf2daedf0299765468bdd648b4d4a41c8 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -914,7 +914,7 @@ public final class CraftServer implements Server {
             org.bukkit.craftbukkit.util.Waitable<Boolean> wait = new org.bukkit.craftbukkit.util.Waitable<Boolean>() {
                 @Override
                 protected @NotNull Boolean evaluate() {
-                    return dispatchCommand(fSender, fCommandLine);
+                    return Boolean.valueOf(dispatchCommand(fSender, fCommandLine));
                 }
             };
             net.minecraft.server.MinecraftServer.getServer().processQueue.add(wait);
@@ -1619,7 +1619,7 @@ public final class CraftServer implements Server {
 
     @Override
     public void setSpawnRadius(int value) {
-        this.configuration.set("settings.spawn-radius", value);
+        this.configuration.set("settings.spawn-radius", Integer.valueOf(value));
         this.saveConfig();
     }
 
@@ -2810,7 +2810,7 @@ public final class CraftServer implements Server {
                 Object hotspotMBean = java.lang.management.ManagementFactory.newPlatformMXBeanProxy(server, "com.sun.management:type=HotSpotDiagnostic", clazz);
                 java.lang.reflect.Method m = clazz.getMethod("dumpHeap", String.class, boolean.class);
                 file = dir.resolve(name + ".hprof");
-                m.invoke(hotspotMBean, file.toString(), true);
+                m.invoke(hotspotMBean, file.toString(), Boolean.TRUE);
             }
 
             return file;
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftWorld.java b/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
index 755769c6db8f7a6c85031fbe57bbfd58fd1c9882..fb9b59e86ee20fc79211429f889dda053581940d 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
@@ -321,7 +321,7 @@ public class CraftWorld extends CraftRegionAccessor implements World {
         if (x > 1875000 || z > 1875000 || x < -1875000 || z < -1875000) {
             Plugin plugin = io.papermc.paper.util.StackWalkerUtil.getFirstPluginCaller();
             if (plugin != null) {
-                plugin.getLogger().warning("Plugin is %s at (%s, %s), this might cause issues.".formatted(reason, x, z));
+                plugin.getLogger().warning("Plugin is %s at (%s, %s), this might cause issues.".formatted(reason, Integer.valueOf(x), Integer.valueOf(z)));
             }
             if (net.minecraft.server.MinecraftServer.getServer().isDebugging()) {
                 io.papermc.paper.util.TraceUtil.dumpTraceForThread("Dangerous chunk retrieval");
@@ -366,7 +366,7 @@ public class CraftWorld extends CraftRegionAccessor implements World {
         // Paper start - Fix this method
         if (!Bukkit.isPrimaryThread()) {
             return java.util.concurrent.CompletableFuture.supplyAsync(() -> {
-                return CraftWorld.this.isChunkGenerated(x, z);
+                return Boolean.valueOf(CraftWorld.this.isChunkGenerated(x, z));
             }, world.getChunkSource().mainThreadProcessor).join();
         }
         ChunkAccess chunk = world.getChunkSource().getChunkAtImmediately(x, z);
@@ -515,7 +515,7 @@ public class CraftWorld extends CraftRegionAccessor implements World {
                 for (ServerPlayer player : playersInRange) {
                     if (player.connection == null) continue;
 
-                    Boolean shouldModify = chunk.getLevel().chunkPacketBlockController.shouldModify(player, chunk);
+                    Boolean shouldModify = Boolean.valueOf(chunk.getLevel().chunkPacketBlockController.shouldModify(player, chunk));
                     player.connection.send(refreshPackets.computeIfAbsent(shouldModify, s -> { // Use connection to prevent creating firing event
                         return new ClientboundLevelChunkWithLightPacket(chunk, this.world.getLightEngine(), null, null, true, (Boolean) s);
                     }));
@@ -1971,9 +1971,9 @@ public class CraftWorld extends CraftRegionAccessor implements World {
         }
 
         if (value instanceof GameRules.BooleanValue) {
-            return rule.getType().cast(((GameRules.BooleanValue) value).get());
+            return rule.getType().cast(Boolean.valueOf(((GameRules.BooleanValue) value).get()));
         } else if (value instanceof GameRules.IntegerValue) {
-            return rule.getType().cast(value.getCommandResult());
+            return rule.getType().cast(Integer.valueOf(value.getCommandResult()));
         } else {
             throw new IllegalArgumentException("Invalid GameRule type (" + value + ") for GameRule " + rule.getName());
         }
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftWorldBorder.java b/src/main/java/org/bukkit/craftbukkit/CraftWorldBorder.java
index acbb284901e3692098a6abd48915a8ce748f2dc2..01d104db725c68d7fd699f51f02649e01e431550 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftWorldBorder.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftWorldBorder.java
@@ -54,7 +54,7 @@ public class CraftWorldBorder implements WorldBorder {
     public void setSize(double newSize, @Nullable TimeUnit unit, long time) {
         Preconditions.checkArgument(unit != null, "TimeUnit cannot be null.");
         Preconditions.checkArgument(time >= 0, "time cannot be lower than 0");
-        Preconditions.checkArgument(newSize >= 1.0D && newSize <= this.getMaxSize(), "newSize must be between 1.0D and %s", this.getMaxSize());
+        Preconditions.checkArgument(newSize >= 1.0D && newSize <= this.getMaxSize(), "newSize must be between 1.0D and %s", Double.valueOf(this.getMaxSize()));
 
         if (time > 0L) {
             this.handle.lerpSizeBetween(this.handle.getSize(), newSize, unit.toMillis(time));
@@ -73,8 +73,8 @@ public class CraftWorldBorder implements WorldBorder {
 
     @Override
     public void setCenter(double x, double z) {
-        Preconditions.checkArgument(Math.abs(x) <= this.getMaxCenterCoordinate(), "x coordinate cannot be outside +- %s", this.getMaxCenterCoordinate());
-        Preconditions.checkArgument(Math.abs(z) <= this.getMaxCenterCoordinate(), "z coordinate cannot be outside +- %s", this.getMaxCenterCoordinate());
+        Preconditions.checkArgument(Math.abs(x) <= this.getMaxCenterCoordinate(), "x coordinate cannot be outside +- %s", Double.valueOf(this.getMaxCenterCoordinate()));
+        Preconditions.checkArgument(Math.abs(z) <= this.getMaxCenterCoordinate(), "z coordinate cannot be outside +- %s", Double.valueOf(this.getMaxCenterCoordinate()));
 
         this.handle.setCenter(x, z);
     }
diff --git a/src/main/java/org/bukkit/craftbukkit/Main.java b/src/main/java/org/bukkit/craftbukkit/Main.java
index 69bd5ca1d957494116d21372744200978a39c827..b24a06807725c5d9564b441c8d8c2f6aec61a333 100644
--- a/src/main/java/org/bukkit/craftbukkit/Main.java
+++ b/src/main/java/org/bukkit/craftbukkit/Main.java
@@ -98,19 +98,19 @@ public class Main {
                 acceptsAll(Main.asList("log-limit"), "Limits the maximum size of the log file (0 = unlimited)")
                         .withRequiredArg()
                         .ofType(Integer.class)
-                        .defaultsTo(0)
+                        .defaultsTo(Integer.valueOf(0))
                         .describedAs("Max log size");
 
                 acceptsAll(Main.asList("log-count"), "Specified how many log files to cycle through")
                         .withRequiredArg()
                         .ofType(Integer.class)
-                        .defaultsTo(1)
+                        .defaultsTo(Integer.valueOf(1))
                         .describedAs("Log count");
 
                 acceptsAll(Main.asList("log-append"), "Whether to append to the log file")
                         .withRequiredArg()
                         .ofType(Boolean.class)
-                        .defaultsTo(true)
+                        .defaultsTo(Boolean.TRUE)
                         .describedAs("Log append");
 
                 acceptsAll(Main.asList("log-strip-color"), "Strips color codes from log file");
diff --git a/src/main/java/org/bukkit/craftbukkit/block/CraftFurnace.java b/src/main/java/org/bukkit/craftbukkit/block/CraftFurnace.java
index b19561e0843b00dd5811f6e8bfc0d765a7935042..37275c88cff84abb2c6a8c66224cbe92644a8374 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/CraftFurnace.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/CraftFurnace.java
@@ -45,7 +45,7 @@ public abstract class CraftFurnace<T extends AbstractFurnaceBlockEntity> extends
     public void setBurnTime(short burnTime) {
         this.getSnapshot().litTime = burnTime;
         // SPIGOT-844: Allow lighting and relighting using this API
-        this.data = this.data.setValue(AbstractFurnaceBlock.LIT, burnTime > 0);
+        this.data = this.data.setValue(AbstractFurnaceBlock.LIT, Boolean.valueOf(burnTime > 0));
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/block/CraftJukebox.java b/src/main/java/org/bukkit/craftbukkit/block/CraftJukebox.java
index 8a9c6cb36adc1da699f55fcaa5fc6faaee153c64..effac23bc707316f478245e778df6eb857cbbdbe 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/CraftJukebox.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/CraftJukebox.java
@@ -31,9 +31,9 @@ public class CraftJukebox extends CraftBlockEntityState<JukeboxBlockEntity> impl
             CraftWorld world = (CraftWorld) this.getWorld();
             Material record = this.getPlaying();
             if (record == Material.AIR) {
-                getWorldHandle().setBlock(this.getPosition(), Blocks.JUKEBOX.defaultBlockState().setValue(JukeboxBlock.HAS_RECORD, false), 3);
+                getWorldHandle().setBlock(this.getPosition(), Blocks.JUKEBOX.defaultBlockState().setValue(JukeboxBlock.HAS_RECORD, Boolean.FALSE), 3);
             } else {
-                getWorldHandle().setBlock(this.getPosition(), Blocks.JUKEBOX.defaultBlockState().setValue(JukeboxBlock.HAS_RECORD, true), 3);
+                getWorldHandle().setBlock(this.getPosition(), Blocks.JUKEBOX.defaultBlockState().setValue(JukeboxBlock.HAS_RECORD, Boolean.TRUE), 3);
             }
             world.playEffect(this.getLocation(), Effect.RECORD_PLAY, record);
         }
@@ -66,9 +66,9 @@ public class CraftJukebox extends CraftBlockEntityState<JukeboxBlockEntity> impl
         ItemStack nms = CraftItemStack.asNMSCopy(record);
         this.getSnapshot().setRecord(nms);
         if (nms.isEmpty()) {
-            this.data = this.data.setValue(JukeboxBlock.HAS_RECORD, false);
+            this.data = this.data.setValue(JukeboxBlock.HAS_RECORD, Boolean.FALSE);
         } else {
-            this.data = this.data.setValue(JukeboxBlock.HAS_RECORD, true);
+            this.data = this.data.setValue(JukeboxBlock.HAS_RECORD, Boolean.TRUE);
         }
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/block/data/CraftAgeable.java b/src/main/java/org/bukkit/craftbukkit/block/data/CraftAgeable.java
index bed5d903ed178e47d3d37345a314477d8ec747c5..a889fc2599885407d15454b67ecc8d1bfa8d75a7 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/data/CraftAgeable.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/data/CraftAgeable.java
@@ -13,7 +13,7 @@ public abstract class CraftAgeable extends CraftBlockData implements Ageable {
 
     @Override
     public void setAge(int age) {
-        set(CraftAgeable.AGE, age);
+        set(CraftAgeable.AGE, Integer.valueOf(age));
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/block/data/CraftAnaloguePowerable.java b/src/main/java/org/bukkit/craftbukkit/block/data/CraftAnaloguePowerable.java
index f7a4cf2dffda680b2cf8c71aee2c48f5f604753a..a06075a11dfeec444c0dc1a535fdaedb03b41ce3 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/data/CraftAnaloguePowerable.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/data/CraftAnaloguePowerable.java
@@ -13,7 +13,7 @@ public abstract class CraftAnaloguePowerable extends CraftBlockData implements A
 
     @Override
     public void setPower(int power) {
-        set(CraftAnaloguePowerable.POWER, power);
+        set(CraftAnaloguePowerable.POWER, Integer.valueOf(power));
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/block/data/CraftAttachable.java b/src/main/java/org/bukkit/craftbukkit/block/data/CraftAttachable.java
index f9a5ea7d0aed8e8ca3898254f7ad27d7b6f3e969..41645adae9d7b6c4d4fbbab9e374da8adadd7fbe 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/data/CraftAttachable.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/data/CraftAttachable.java
@@ -13,6 +13,6 @@ public abstract class CraftAttachable extends CraftBlockData implements Attachab
 
     @Override
     public void setAttached(boolean attached) {
-        set(CraftAttachable.ATTACHED, attached);
+        set(CraftAttachable.ATTACHED, Boolean.valueOf(attached));
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/block/data/CraftHangable.java b/src/main/java/org/bukkit/craftbukkit/block/data/CraftHangable.java
index 57470c5511e02e07f99d2cc63949470b70f06d19..a85a5ca71a01fa3129d7f9af446a7b3fa3bf584b 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/data/CraftHangable.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/data/CraftHangable.java
@@ -13,6 +13,6 @@ public abstract class CraftHangable extends CraftBlockData implements Hangable {
 
     @Override
     public void setHanging(boolean hanging) {
-        set(CraftHangable.HANGING, hanging);
+        set(CraftHangable.HANGING, Boolean.valueOf(hanging));
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/block/data/CraftLevelled.java b/src/main/java/org/bukkit/craftbukkit/block/data/CraftLevelled.java
index fdb708377805321c52b8d72163fa46fa5430d604..d331a5b46bd50fdeba8916ee7dfcc7cd79a07861 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/data/CraftLevelled.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/data/CraftLevelled.java
@@ -13,7 +13,7 @@ public abstract class CraftLevelled extends CraftBlockData implements Levelled {
 
     @Override
     public void setLevel(int level) {
-        set(CraftLevelled.LEVEL, level);
+        set(CraftLevelled.LEVEL, Integer.valueOf(level));
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/block/data/CraftLightable.java b/src/main/java/org/bukkit/craftbukkit/block/data/CraftLightable.java
index 3773bb3db70b9c36519902674cc34a36f00b2493..45f39ad6a513a47a2020761331c11f9f4c23fd5d 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/data/CraftLightable.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/data/CraftLightable.java
@@ -13,6 +13,6 @@ public abstract class CraftLightable extends CraftBlockData implements Lightable
 
     @Override
     public void setLit(boolean lit) {
-        set(CraftLightable.LIT, lit);
+        set(CraftLightable.LIT, Boolean.valueOf(lit));
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/block/data/CraftMultipleFacing.java b/src/main/java/org/bukkit/craftbukkit/block/data/CraftMultipleFacing.java
index 12de1ae8316402f8747e6ce4eb7a01076c1a4a1b..ca453418f9578fc2b7f444b9b389d527effbb7e9 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/data/CraftMultipleFacing.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/data/CraftMultipleFacing.java
@@ -25,7 +25,7 @@ public abstract class CraftMultipleFacing extends CraftBlockData implements Mult
         if (state == null) {
             throw new IllegalArgumentException("Non-allowed face " + face + ". Check MultipleFacing.getAllowedFaces.");
         }
-        set(state, has);
+        set(state, Boolean.valueOf(has));
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/block/data/CraftOpenable.java b/src/main/java/org/bukkit/craftbukkit/block/data/CraftOpenable.java
index 15094a756b0df268c1879224b8f865811937db6b..8bf9d1af030baf565159c5523296b98e91bb3f4b 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/data/CraftOpenable.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/data/CraftOpenable.java
@@ -13,6 +13,6 @@ public abstract class CraftOpenable extends CraftBlockData implements Openable {
 
     @Override
     public void setOpen(boolean open) {
-        set(CraftOpenable.OPEN, open);
+        set(CraftOpenable.OPEN, Boolean.valueOf(open));
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/block/data/CraftPowerable.java b/src/main/java/org/bukkit/craftbukkit/block/data/CraftPowerable.java
index cc77515f36d369f7628c6b66f796ee136906c14f..de6c5a38dabd9f8bd9dcd4bfe4d26ea535e2ce55 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/data/CraftPowerable.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/data/CraftPowerable.java
@@ -13,6 +13,6 @@ public abstract class CraftPowerable extends CraftBlockData implements Powerable
 
     @Override
     public void setPowered(boolean powered) {
-        set(CraftPowerable.POWERED, powered);
+        set(CraftPowerable.POWERED, Boolean.valueOf(powered));
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/block/data/CraftRotatable.java b/src/main/java/org/bukkit/craftbukkit/block/data/CraftRotatable.java
index e72e504221c21d4ee0f69d551e5b9c7e79b138b0..e58d54c1f46b96e2329293de0941833ed217657b 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/data/CraftRotatable.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/data/CraftRotatable.java
@@ -104,6 +104,6 @@ public abstract class CraftRotatable extends CraftBlockData implements Rotatable
             default:
                 throw new IllegalArgumentException("Illegal rotation " + rotation);
         }
-        set(CraftRotatable.ROTATION, val);
+        set(CraftRotatable.ROTATION, Integer.valueOf(val));
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/block/data/CraftSnowable.java b/src/main/java/org/bukkit/craftbukkit/block/data/CraftSnowable.java
index 1e7a172bd722f592d58e596abac758845f0ddd97..61dd758ac556fe533b544e2cfb74b97f49d2d4c9 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/data/CraftSnowable.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/data/CraftSnowable.java
@@ -13,6 +13,6 @@ public abstract class CraftSnowable extends CraftBlockData implements Snowable {
 
     @Override
     public void setSnowy(boolean snowy) {
-        set(CraftSnowable.SNOWY, snowy);
+        set(CraftSnowable.SNOWY, Boolean.valueOf(snowy));
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/block/data/CraftWaterlogged.java b/src/main/java/org/bukkit/craftbukkit/block/data/CraftWaterlogged.java
index 116dfc2ebb2835e94fdf3306971f06376a653aeb..1d521806b2bc5e882c002bc57dca09092ff851a4 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/data/CraftWaterlogged.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/data/CraftWaterlogged.java
@@ -13,6 +13,6 @@ public abstract class CraftWaterlogged extends CraftBlockData implements Waterlo
 
     @Override
     public void setWaterlogged(boolean waterlogged) {
-        set(CraftWaterlogged.WATERLOGGED, waterlogged);
+        set(CraftWaterlogged.WATERLOGGED, Boolean.valueOf(waterlogged));
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftBed.java b/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftBed.java
index 8539b76e351511d4272fa540a739656996f92526..d4a9fbe329bf9d26cfd2ebfdb1d6772c13d9d898 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftBed.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftBed.java
@@ -28,7 +28,7 @@ public abstract class CraftBed extends CraftBlockData implements Bed {
     // Paper start
     @Override
     public void setOccupied(boolean occupied) {
-        set(CraftBed.OCCUPIED, occupied);
+        set(CraftBed.OCCUPIED, Boolean.valueOf(occupied));
     }
     // Paper end
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftBeehive.java b/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftBeehive.java
index 9f95733c82ed8ad432b16db55c09095baa5cbad9..32c15683c28e276d31bbd974471f9677626dbd0f 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftBeehive.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftBeehive.java
@@ -14,7 +14,7 @@ public abstract class CraftBeehive extends CraftBlockData implements Beehive {
 
     @Override
     public void setHoneyLevel(int honeyLevel) {
-        set(CraftBeehive.HONEY_LEVEL, honeyLevel);
+        set(CraftBeehive.HONEY_LEVEL, Integer.valueOf(honeyLevel));
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftBrewingStand.java b/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftBrewingStand.java
index 579c0d72fe47a234b60f5f49c644bffd76ea708e..edabea6baddc9305566c275670c6b0f4b3c93fbc 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftBrewingStand.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftBrewingStand.java
@@ -18,7 +18,7 @@ public abstract class CraftBrewingStand extends CraftBlockData implements Brewin
 
     @Override
     public void setBottle(int bottle, boolean has) {
-        set(CraftBrewingStand.HAS_BOTTLE[bottle], has);
+        set(CraftBrewingStand.HAS_BOTTLE[bottle], Boolean.valueOf(has));
     }
 
     @Override
@@ -27,7 +27,7 @@ public abstract class CraftBrewingStand extends CraftBlockData implements Brewin
 
         for (int index = 0; index < this.getMaximumBottles(); index++) {
             if (this.hasBottle(index)) {
-                bottles.add(index);
+                bottles.add(Integer.valueOf(index));
             }
         }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftBubbleColumn.java b/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftBubbleColumn.java
index 9fb060ec7578c2329320d06555ba68001c2955c1..907934dd2cae1cacdd07ca38cae0c1a3cf422866 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftBubbleColumn.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftBubbleColumn.java
@@ -14,6 +14,6 @@ public abstract class CraftBubbleColumn extends CraftBlockData implements Bubble
 
     @Override
     public void setDrag(boolean drag) {
-        set(CraftBubbleColumn.DRAG, drag);
+        set(CraftBubbleColumn.DRAG, Boolean.valueOf(drag));
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftCake.java b/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftCake.java
index 300a29ea5370cc34caac0a70a21ebc09161cb831..e57ad6ef5c2932155a1d6ae480c5b23e09c3c287 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftCake.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftCake.java
@@ -14,7 +14,7 @@ public abstract class CraftCake extends CraftBlockData implements Cake {
 
     @Override
     public void setBites(int bites) {
-        set(CraftCake.BITES, bites);
+        set(CraftCake.BITES, Integer.valueOf(bites));
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftCampfire.java b/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftCampfire.java
index 600f78a06b0469d9df7d521f36db833b543975bd..5a8aa0a776d5d48ed53c476b2f20d7118f15b7d7 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftCampfire.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftCampfire.java
@@ -14,6 +14,6 @@ public abstract class CraftCampfire extends CraftBlockData implements Campfire {
 
     @Override
     public void setSignalFire(boolean signalFire) {
-        set(CraftCampfire.SIGNAL_FIRE, signalFire);
+        set(CraftCampfire.SIGNAL_FIRE, Boolean.valueOf(signalFire));
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftCandle.java b/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftCandle.java
index 477d83a5f3bd3945d1ec4967e9613d1860cc3ed6..539efacfc5065b54458ce7a9be7e1829642179c7 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftCandle.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftCandle.java
@@ -14,7 +14,7 @@ public abstract class CraftCandle extends CraftBlockData implements Candle {
 
     @Override
     public void setCandles(int candles) {
-        set(CraftCandle.CANDLES, candles);
+        set(CraftCandle.CANDLES, Integer.valueOf(candles));
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftCaveVinesPlant.java b/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftCaveVinesPlant.java
index 52e3ce4735e9bca018eb71347b940645f7282db5..0df5c196913622e742bd3d48b4e299bb47d49f67 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftCaveVinesPlant.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftCaveVinesPlant.java
@@ -14,6 +14,6 @@ public abstract class CraftCaveVinesPlant extends CraftBlockData implements Cave
 
     @Override
     public void setBerries(boolean berries) {
-        set(CraftCaveVinesPlant.BERRIES, berries);
+        set(CraftCaveVinesPlant.BERRIES, Boolean.valueOf(berries));
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftCommandBlock.java b/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftCommandBlock.java
index af18d08152614aa6ba6f46a6b4f6707c01bff699..6786a3c94ddf257ac24cf84ae6f624afcb113441 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftCommandBlock.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftCommandBlock.java
@@ -14,6 +14,6 @@ public abstract class CraftCommandBlock extends CraftBlockData implements Comman
 
     @Override
     public void setConditional(boolean conditional) {
-        set(CraftCommandBlock.CONDITIONAL, conditional);
+        set(CraftCommandBlock.CONDITIONAL, Boolean.valueOf(conditional));
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftDaylightDetector.java b/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftDaylightDetector.java
index 0c2e82a50c10a26b51aeec27d4eaa27bfe8497b6..11ef41bd3abbe73ce7b340d674adda25cd228926 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftDaylightDetector.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftDaylightDetector.java
@@ -14,6 +14,6 @@ public abstract class CraftDaylightDetector extends CraftBlockData implements Da
 
     @Override
     public void setInverted(boolean inverted) {
-        set(CraftDaylightDetector.INVERTED, inverted);
+        set(CraftDaylightDetector.INVERTED, Boolean.valueOf(inverted));
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftDispenser.java b/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftDispenser.java
index 9877098afeef8eee63051a5bf423717c30f5798d..111fd5ee7423780e8fd7c6a6c55b936519c7b783 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftDispenser.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftDispenser.java
@@ -14,6 +14,6 @@ public abstract class CraftDispenser extends CraftBlockData implements Dispenser
 
     @Override
     public void setTriggered(boolean triggered) {
-        set(CraftDispenser.TRIGGERED, triggered);
+        set(CraftDispenser.TRIGGERED, Boolean.valueOf(triggered));
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftEndPortalFrame.java b/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftEndPortalFrame.java
index 781029657c7b1b2a992c19fede882c909026880b..221803dd4f19ce2459f0f2115a6fe3a6c0721c0a 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftEndPortalFrame.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftEndPortalFrame.java
@@ -14,6 +14,6 @@ public abstract class CraftEndPortalFrame extends CraftBlockData implements EndP
 
     @Override
     public void setEye(boolean eye) {
-        set(CraftEndPortalFrame.EYE, eye);
+        set(CraftEndPortalFrame.EYE, Boolean.valueOf(eye));
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftFarmland.java b/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftFarmland.java
index fd6c644239d77e4bbdbbd577b7126c2611dea0e6..4de05b42d3db606093d8509d9f8dbc9b1fa7fa68 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftFarmland.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftFarmland.java
@@ -14,7 +14,7 @@ public abstract class CraftFarmland extends CraftBlockData implements Farmland {
 
     @Override
     public void setMoisture(int moisture) {
-        set(CraftFarmland.MOISTURE, moisture);
+        set(CraftFarmland.MOISTURE, Integer.valueOf(moisture));
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftGate.java b/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftGate.java
index 04e90972c4a6f4c02a1717f3ea21db0eeb5a42cc..2adde8c033bf596b6afb57d8510b25edf4b2ed96 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftGate.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftGate.java
@@ -14,6 +14,6 @@ public abstract class CraftGate extends CraftBlockData implements Gate {
 
     @Override
     public void setInWall(boolean inWall) {
-        set(CraftGate.IN_WALL, inWall);
+        set(CraftGate.IN_WALL, Boolean.valueOf(inWall));
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftHopper.java b/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftHopper.java
index 2ce16c404602e752e9cc5d97120668991b1eb29a..d93013acfe44af5b6430b072a710202624183b49 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftHopper.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftHopper.java
@@ -14,6 +14,6 @@ public abstract class CraftHopper extends CraftBlockData implements Hopper {
 
     @Override
     public void setEnabled(boolean enabled) {
-        set(CraftHopper.ENABLED, enabled);
+        set(CraftHopper.ENABLED, Boolean.valueOf(enabled));
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftLeaves.java b/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftLeaves.java
index f90fa58c9dcbab19d381f05553baefc0b0975cc3..4fac923e9ca0fd656b0e6a4016dd66f0f0a81c49 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftLeaves.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftLeaves.java
@@ -15,7 +15,7 @@ public abstract class CraftLeaves extends CraftBlockData implements Leaves {
 
     @Override
     public void setPersistent(boolean persistent) {
-        set(CraftLeaves.PERSISTENT, persistent);
+        set(CraftLeaves.PERSISTENT, Boolean.valueOf(persistent));
     }
 
     @Override
@@ -25,6 +25,6 @@ public abstract class CraftLeaves extends CraftBlockData implements Leaves {
 
     @Override
     public void setDistance(int distance) {
-        set(CraftLeaves.DISTANCE, distance);
+        set(CraftLeaves.DISTANCE, Integer.valueOf(distance));
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftNoteBlock.java b/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftNoteBlock.java
index d284090ce1df8ae6f9e9d193e7349091343b7be1..736ff60a4d2c6a80bd6c901df9fb69d2a5413bb0 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftNoteBlock.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftNoteBlock.java
@@ -27,6 +27,6 @@ public abstract class CraftNoteBlock extends CraftBlockData implements NoteBlock
 
     @Override
     public void setNote(org.bukkit.@NotNull Note note) {
-        set(CraftNoteBlock.NOTE, (int) note.getId());
+        set(CraftNoteBlock.NOTE, Integer.valueOf((int) note.getId()));
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftPiston.java b/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftPiston.java
index ddb11226371b86afe4bbbd408a365417aa041bb9..0cf8361061311b41b192e78f1bff053dcc4f9a6f 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftPiston.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftPiston.java
@@ -14,6 +14,6 @@ public abstract class CraftPiston extends CraftBlockData implements Piston {
 
     @Override
     public void setExtended(boolean extended) {
-        set(CraftPiston.EXTENDED, extended);
+        set(CraftPiston.EXTENDED, Boolean.valueOf(extended));
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftPistonHead.java b/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftPistonHead.java
index be602902b888904e2ef9d8910e681ec49529a578..a451a77468f1e315410fb86e443e9bf15de7ec57 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftPistonHead.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftPistonHead.java
@@ -14,6 +14,6 @@ public abstract class CraftPistonHead extends CraftBlockData implements PistonHe
 
     @Override
     public void setShort(boolean _short) {
-        set(CraftPistonHead.SHORT, _short);
+        set(CraftPistonHead.SHORT, Boolean.valueOf(_short));
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftRepeater.java b/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftRepeater.java
index 1c1251757e029f28a008d90c7fd3c51d3a54a331..bbbbf9db51bac261d4b515539b6e509fe01c1da9 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftRepeater.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftRepeater.java
@@ -15,7 +15,7 @@ public abstract class CraftRepeater extends CraftBlockData implements Repeater {
 
     @Override
     public void setDelay(int delay) {
-        set(CraftRepeater.DELAY, delay);
+        set(CraftRepeater.DELAY, Integer.valueOf(delay));
     }
 
     @Override
@@ -35,6 +35,6 @@ public abstract class CraftRepeater extends CraftBlockData implements Repeater {
 
     @Override
     public void setLocked(boolean locked) {
-        set(CraftRepeater.LOCKED, locked);
+        set(CraftRepeater.LOCKED, Boolean.valueOf(locked));
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftRespawnAnchor.java b/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftRespawnAnchor.java
index c35ba15cba796692b4f5f96729b80da4adca9e33..130a3b4276dd8a2df0bc0f14c11b53217f85555b 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftRespawnAnchor.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftRespawnAnchor.java
@@ -14,7 +14,7 @@ public abstract class CraftRespawnAnchor extends CraftBlockData implements Respa
 
     @Override
     public void setCharges(int charges) {
-        set(CraftRespawnAnchor.CHARGES, charges);
+        set(CraftRespawnAnchor.CHARGES, Integer.valueOf(charges));
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftSapling.java b/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftSapling.java
index 51a5f508bc84e71e07673c1489b2d76d03292a1d..3eae3b79fc1be8fae1dabd71861fd85bd2941fd5 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftSapling.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftSapling.java
@@ -14,7 +14,7 @@ public abstract class CraftSapling extends CraftBlockData implements Sapling {
 
     @Override
     public void setStage(int stage) {
-        set(CraftSapling.STAGE, stage);
+        set(CraftSapling.STAGE, Integer.valueOf(stage));
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftScaffolding.java b/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftScaffolding.java
index 9a3a6c09b8d68f5518a167249429bdaeba3e82db..e9e53107c7940f181061b91f51026b0849a52be0 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftScaffolding.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftScaffolding.java
@@ -15,7 +15,7 @@ public abstract class CraftScaffolding extends CraftBlockData implements Scaffol
 
     @Override
     public void setBottom(boolean bottom) {
-        set(CraftScaffolding.BOTTOM, bottom);
+        set(CraftScaffolding.BOTTOM, Boolean.valueOf(bottom));
     }
 
     @Override
@@ -25,7 +25,7 @@ public abstract class CraftScaffolding extends CraftBlockData implements Scaffol
 
     @Override
     public void setDistance(int distance) {
-        set(CraftScaffolding.DISTANCE, distance);
+        set(CraftScaffolding.DISTANCE, Integer.valueOf(distance));
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftSculkCatalyst.java b/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftSculkCatalyst.java
index c1cad5b238c4f36f2c368758bee9fded91408c55..3b0b7162beb224723621244b677e7bcd621424e6 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftSculkCatalyst.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftSculkCatalyst.java
@@ -14,6 +14,6 @@ public abstract class CraftSculkCatalyst extends CraftBlockData implements Sculk
 
     @Override
     public void setBloom(boolean bloom) {
-        set(CraftSculkCatalyst.BLOOM, bloom);
+        set(CraftSculkCatalyst.BLOOM, Boolean.valueOf(bloom));
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftSculkShrieker.java b/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftSculkShrieker.java
index 76ee91bdaa6fbcda6d18df89d14d5bde1c98e19b..bdbd55ff687c30de23619f098e649422c4d41910 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftSculkShrieker.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftSculkShrieker.java
@@ -15,7 +15,7 @@ public abstract class CraftSculkShrieker extends CraftBlockData implements Sculk
 
     @Override
     public void setCanSummon(boolean can_summon) {
-        set(CraftSculkShrieker.CAN_SUMMON, can_summon);
+        set(CraftSculkShrieker.CAN_SUMMON, Boolean.valueOf(can_summon));
     }
 
     @Override
@@ -25,6 +25,6 @@ public abstract class CraftSculkShrieker extends CraftBlockData implements Sculk
 
     @Override
     public void setShrieking(boolean shrieking) {
-        set(CraftSculkShrieker.SHRIEKING, shrieking);
+        set(CraftSculkShrieker.SHRIEKING, Boolean.valueOf(shrieking));
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftSeaPickle.java b/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftSeaPickle.java
index 5c75bf9249c712b843699aec94fd1326401f99a3..2a4dc0e966cdd3167bb7d4fb1dc51b1adf6c18ac 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftSeaPickle.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftSeaPickle.java
@@ -14,7 +14,7 @@ public abstract class CraftSeaPickle extends CraftBlockData implements SeaPickle
 
     @Override
     public void setPickles(int pickles) {
-        set(CraftSeaPickle.PICKLES, pickles);
+        set(CraftSeaPickle.PICKLES, Integer.valueOf(pickles));
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftSnow.java b/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftSnow.java
index 9b12f26e591bbbb7568a5980013fbe576d20020a..26e4cd51c44994322bec746c1605b1a407a11543 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftSnow.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftSnow.java
@@ -14,7 +14,7 @@ public class CraftSnow extends CraftBlockData implements Snow {
 
     @Override
     public void setLayers(int layers) {
-        set(CraftSnow.LAYERS, layers);
+        set(CraftSnow.LAYERS, Integer.valueOf(layers));
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftTNT.java b/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftTNT.java
index bafc6185d9da586d2e3444e5a486ed96029e9b41..afae5dbe8e7fd6475796b6baa07991232bd159d2 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftTNT.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftTNT.java
@@ -14,6 +14,6 @@ public abstract class CraftTNT extends CraftBlockData implements TNT {
 
     @Override
     public void setUnstable(boolean unstable) {
-        set(CraftTNT.UNSTABLE, unstable);
+        set(CraftTNT.UNSTABLE, Boolean.valueOf(unstable));
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftTripwire.java b/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftTripwire.java
index 5625b23438b5d935af61143ce285f975b27dab55..3df7a5d239ca3f4218b045b82404a94ed9ad4358 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftTripwire.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftTripwire.java
@@ -14,6 +14,6 @@ public abstract class CraftTripwire extends CraftBlockData implements Tripwire {
 
     @Override
     public void setDisarmed(boolean disarmed) {
-        set(CraftTripwire.DISARMED, disarmed);
+        set(CraftTripwire.DISARMED, Boolean.valueOf(disarmed));
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftTurtleEgg.java b/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftTurtleEgg.java
index 8cd99c42d6be63134063ef8e81ea2fc62c8d7528..8e0531ddf3965ea3d78b4580ff4d030c56b6b348 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftTurtleEgg.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftTurtleEgg.java
@@ -15,7 +15,7 @@ public abstract class CraftTurtleEgg extends CraftBlockData implements TurtleEgg
 
     @Override
     public void setEggs(int eggs) {
-        set(CraftTurtleEgg.EGGS, eggs);
+        set(CraftTurtleEgg.EGGS, Integer.valueOf(eggs));
     }
 
     @Override
@@ -35,7 +35,7 @@ public abstract class CraftTurtleEgg extends CraftBlockData implements TurtleEgg
 
     @Override
     public void setHatch(int hatch) {
-        set(CraftTurtleEgg.HATCH, hatch);
+        set(CraftTurtleEgg.HATCH, Integer.valueOf(hatch));
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftWall.java b/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftWall.java
index 0562b06bbb21ee5258d7218f61c46b66795806f3..9f3ca242a7e7b783f6ed0506cf999cdb913f58f9 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftWall.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftWall.java
@@ -19,7 +19,7 @@ public abstract class CraftWall extends CraftBlockData implements Wall {
 
     @Override
     public void setUp(boolean up) {
-        set(CraftWall.UP, up);
+        set(CraftWall.UP, Boolean.valueOf(up));
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftAmethystCluster.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftAmethystCluster.java
index df1480c9ad6f8978f0481e288fefa5aeff0e3306..505a94d60e7552fdc0aed7a79df89d55451c1262 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftAmethystCluster.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftAmethystCluster.java
@@ -46,6 +46,6 @@ public final class CraftAmethystCluster extends org.bukkit.craftbukkit.block.dat
 
     @Override
     public void setWaterlogged(boolean waterlogged) {
-        set(CraftAmethystCluster.WATERLOGGED, waterlogged);
+        set(CraftAmethystCluster.WATERLOGGED, Boolean.valueOf(waterlogged));
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftBamboo.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftBamboo.java
index e2c5ca3d268a0ad3fed750a77e537f8fcadb8804..ebe3d0213aa536499d6483978611a5b7160d57e8 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftBamboo.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftBamboo.java
@@ -41,7 +41,7 @@ public final class CraftBamboo extends org.bukkit.craftbukkit.block.data.CraftBl
 
     @Override
     public void setAge(int age) {
-        set(CraftBamboo.AGE, age);
+        set(CraftBamboo.AGE, Integer.valueOf(age));
     }
 
     @Override
@@ -60,7 +60,7 @@ public final class CraftBamboo extends org.bukkit.craftbukkit.block.data.CraftBl
 
     @Override
     public void setStage(int stage) {
-        set(CraftBamboo.STAGE, stage);
+        set(CraftBamboo.STAGE, Integer.valueOf(stage));
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftBanner.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftBanner.java
index 42c9017a2f17d63b3ae7fc50707b903f9c3256b1..ae7de64a7e32ad30af4f1698cc062bd3cb9999c0 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftBanner.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftBanner.java
@@ -116,6 +116,6 @@ public final class CraftBanner extends org.bukkit.craftbukkit.block.data.CraftBl
             default:
                 throw new IllegalArgumentException("Illegal rotation " + rotation);
         }
-        set(CraftBanner.ROTATION, val);
+        set(CraftBanner.ROTATION, Integer.valueOf(val));
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftBarrel.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftBarrel.java
index a3ea8d724b467585115a697bef9d69cbce61ebf1..e72d4bb60bc2b3e6da4aeb774ebc97a0469c765b 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftBarrel.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftBarrel.java
@@ -46,6 +46,6 @@ public final class CraftBarrel extends org.bukkit.craftbukkit.block.data.CraftBl
 
     @Override
     public void setOpen(boolean open) {
-        set(CraftBarrel.OPEN, open);
+        set(CraftBarrel.OPEN, Boolean.valueOf(open));
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftBed.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftBed.java
index 2f95c1beaf3edb16c361937c37514466d4b8c756..ae1671ac641844002818e292c8b0040d91f91ebf 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftBed.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftBed.java
@@ -58,7 +58,7 @@ public final class CraftBed extends org.bukkit.craftbukkit.block.data.CraftBlock
     // Paper start
     @Override
     public void setOccupied(boolean occupied) {
-        set(CraftBed.OCCUPIED, occupied);
+        set(CraftBed.OCCUPIED, Boolean.valueOf(occupied));
     }
     // Paper end
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftBeehive.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftBeehive.java
index 7bf27cd9e9f83b27cc93b81537635ab45e8aa0fe..b7876a314abdd870c384b349022015dbaa4028e8 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftBeehive.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftBeehive.java
@@ -27,7 +27,7 @@ public final class CraftBeehive extends org.bukkit.craftbukkit.block.data.CraftB
 
     @Override
     public void setHoneyLevel(int honeyLevel) {
-        set(CraftBeehive.HONEY_LEVEL, honeyLevel);
+        set(CraftBeehive.HONEY_LEVEL, Integer.valueOf(honeyLevel));
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftBeetroot.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftBeetroot.java
index cb138fcb8d4df39cd056642400a74307a917874e..87df69a63bb98aac1b4c62370a6035e02c59b4e9 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftBeetroot.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftBeetroot.java
@@ -24,7 +24,7 @@ public final class CraftBeetroot extends org.bukkit.craftbukkit.block.data.Craft
 
     @Override
     public void setAge(int age) {
-        set(CraftBeetroot.AGE, age);
+        set(CraftBeetroot.AGE, Integer.valueOf(age));
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftBell.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftBell.java
index cdd12aca33065e3233dffa39f6b987feb382dd9d..c49e0de2549b2c1ade0080eac68c64cee1d00745 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftBell.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftBell.java
@@ -60,6 +60,6 @@ public final class CraftBell extends org.bukkit.craftbukkit.block.data.CraftBloc
 
     @Override
     public void setPowered(boolean powered) {
-        set(CraftBell.POWERED, powered);
+        set(CraftBell.POWERED, Boolean.valueOf(powered));
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftBigDripleaf.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftBigDripleaf.java
index b0321f8d70d027428107669d318bdc3c2d9d09ba..2413ca67f9696163ce9368aa5e289ab878c2b1f0 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftBigDripleaf.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftBigDripleaf.java
@@ -60,6 +60,6 @@ public final class CraftBigDripleaf extends org.bukkit.craftbukkit.block.data.Cr
 
     @Override
     public void setWaterlogged(boolean waterlogged) {
-        set(CraftBigDripleaf.WATERLOGGED, waterlogged);
+        set(CraftBigDripleaf.WATERLOGGED, Boolean.valueOf(waterlogged));
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftBigDripleafStem.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftBigDripleafStem.java
index e60bd64c7f609b932363055418410772c8a7e17f..50923f15eb98ad3902cc1748fa69686a2d669a73 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftBigDripleafStem.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftBigDripleafStem.java
@@ -46,6 +46,6 @@ public final class CraftBigDripleafStem extends org.bukkit.craftbukkit.block.dat
 
     @Override
     public void setWaterlogged(boolean waterlogged) {
-        set(CraftBigDripleafStem.WATERLOGGED, waterlogged);
+        set(CraftBigDripleafStem.WATERLOGGED, Boolean.valueOf(waterlogged));
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftBlastFurnace.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftBlastFurnace.java
index a813fa669e7017af25d7af2412ee03027515ca71..10b2b2a2dc8172e62f5a56437fd82efd638516f0 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftBlastFurnace.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftBlastFurnace.java
@@ -46,6 +46,6 @@ public final class CraftBlastFurnace extends org.bukkit.craftbukkit.block.data.C
 
     @Override
     public void setLit(boolean lit) {
-        set(CraftBlastFurnace.LIT, lit);
+        set(CraftBlastFurnace.LIT, Boolean.valueOf(lit));
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftBrewingStand.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftBrewingStand.java
index e8360f79b0cc2c146474c873c91b57cce67c1009..f81e19b988b4c775ab0b22422c854feccf37d691 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftBrewingStand.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftBrewingStand.java
@@ -29,7 +29,7 @@ public final class CraftBrewingStand extends org.bukkit.craftbukkit.block.data.C
 
     @Override
     public void setBottle(int bottle, boolean has) {
-        set(CraftBrewingStand.HAS_BOTTLE[bottle], has);
+        set(CraftBrewingStand.HAS_BOTTLE[bottle], Boolean.valueOf(has));
     }
 
     @Override
@@ -38,7 +38,7 @@ public final class CraftBrewingStand extends org.bukkit.craftbukkit.block.data.C
 
         for (int index = 0; index < this.getMaximumBottles(); index++) {
             if (this.hasBottle(index)) {
-                bottles.add(index);
+                bottles.add(Integer.valueOf(index));
             }
         }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftBubbleColumn.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftBubbleColumn.java
index 95f376a794fddb50ae5c8ba612910eb425e7ada7..65f26f43d7043c19152682cfb0bb48ec89916927 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftBubbleColumn.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftBubbleColumn.java
@@ -24,6 +24,6 @@ public final class CraftBubbleColumn extends org.bukkit.craftbukkit.block.data.C
 
     @Override
     public void setDrag(boolean drag) {
-        set(CraftBubbleColumn.DRAG, drag);
+        set(CraftBubbleColumn.DRAG, Boolean.valueOf(drag));
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftButtonAbstract.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftButtonAbstract.java
index 4391e7a4f481b716d21fde2439c8e888a9de5f54..067206475ee8cc68ec49ed68520dbb6ad04a0231 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftButtonAbstract.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftButtonAbstract.java
@@ -74,6 +74,6 @@ public final class CraftButtonAbstract extends org.bukkit.craftbukkit.block.data
 
     @Override
     public void setPowered(boolean powered) {
-        set(CraftButtonAbstract.POWERED, powered);
+        set(CraftButtonAbstract.POWERED, Boolean.valueOf(powered));
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftCactus.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftCactus.java
index 22c9fcbb4e39af8b5018cf1b0c41ad2dc587a1b5..432db301595ec167d6a5631a4d53561ecadece9f 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftCactus.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftCactus.java
@@ -24,7 +24,7 @@ public final class CraftCactus extends org.bukkit.craftbukkit.block.data.CraftBl
 
     @Override
     public void setAge(int age) {
-        set(CraftCactus.AGE, age);
+        set(CraftCactus.AGE, Integer.valueOf(age));
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftCake.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftCake.java
index 7f0ea937b2b6b1f20ba7ae5c0f38cf7cb2639daf..63c6b24523038d18a9f6f32b0afbbad3220d0044 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftCake.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftCake.java
@@ -24,7 +24,7 @@ public final class CraftCake extends org.bukkit.craftbukkit.block.data.CraftBloc
 
     @Override
     public void setBites(int bites) {
-        set(CraftCake.BITES, bites);
+        set(CraftCake.BITES, Integer.valueOf(bites));
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftCampfire.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftCampfire.java
index 42cab82602b39cf0b6d8199f41a96cb9bbed1b9e..60be5f6c200811fce62fc5329f1aef8f506e36f2 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftCampfire.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftCampfire.java
@@ -27,7 +27,7 @@ public final class CraftCampfire extends org.bukkit.craftbukkit.block.data.Craft
 
     @Override
     public void setSignalFire(boolean signalFire) {
-        set(CraftCampfire.SIGNAL_FIRE, signalFire);
+        set(CraftCampfire.SIGNAL_FIRE, Boolean.valueOf(signalFire));
     }
 
     // org.bukkit.craftbukkit.block.data.CraftDirectional
@@ -60,7 +60,7 @@ public final class CraftCampfire extends org.bukkit.craftbukkit.block.data.Craft
 
     @Override
     public void setLit(boolean lit) {
-        set(CraftCampfire.LIT, lit);
+        set(CraftCampfire.LIT, Boolean.valueOf(lit));
     }
 
     // org.bukkit.craftbukkit.block.data.CraftWaterlogged
@@ -74,6 +74,6 @@ public final class CraftCampfire extends org.bukkit.craftbukkit.block.data.Craft
 
     @Override
     public void setWaterlogged(boolean waterlogged) {
-        set(CraftCampfire.WATERLOGGED, waterlogged);
+        set(CraftCampfire.WATERLOGGED, Boolean.valueOf(waterlogged));
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftCandle.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftCandle.java
index 24d16825c10edfed6d22e8e37ddb9fd804b716c4..18cfd92fa77bee34b2b9ea8c088540d10b62f11b 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftCandle.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftCandle.java
@@ -24,7 +24,7 @@ public final class CraftCandle extends org.bukkit.craftbukkit.block.data.CraftBl
 
     @Override
     public void setCandles(int candles) {
-        set(CraftCandle.CANDLES, candles);
+        set(CraftCandle.CANDLES, Integer.valueOf(candles));
     }
 
     @Override
@@ -49,7 +49,7 @@ public final class CraftCandle extends org.bukkit.craftbukkit.block.data.CraftBl
 
     @Override
     public void setLit(boolean lit) {
-        set(CraftCandle.LIT, lit);
+        set(CraftCandle.LIT, Boolean.valueOf(lit));
     }
 
     // org.bukkit.craftbukkit.block.data.CraftWaterlogged
@@ -63,6 +63,6 @@ public final class CraftCandle extends org.bukkit.craftbukkit.block.data.CraftBl
 
     @Override
     public void setWaterlogged(boolean waterlogged) {
-        set(CraftCandle.WATERLOGGED, waterlogged);
+        set(CraftCandle.WATERLOGGED, Boolean.valueOf(waterlogged));
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftCandleCake.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftCandleCake.java
index 9b8919555482362bf828ea71ac810bbdd117fc52..3886068ab3c31c8b7afca3a03f35d9bced737c3e 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftCandleCake.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftCandleCake.java
@@ -24,6 +24,6 @@ public final class CraftCandleCake extends org.bukkit.craftbukkit.block.data.Cra
 
     @Override
     public void setLit(boolean lit) {
-        set(CraftCandleCake.LIT, lit);
+        set(CraftCandleCake.LIT, Boolean.valueOf(lit));
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftCarrots.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftCarrots.java
index d773620654e47a1bf96e62260a2dbd701050c301..a3afab94cafde6ef20e11754c36333be26dc4560 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftCarrots.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftCarrots.java
@@ -24,7 +24,7 @@ public final class CraftCarrots extends org.bukkit.craftbukkit.block.data.CraftB
 
     @Override
     public void setAge(int age) {
-        set(CraftCarrots.AGE, age);
+        set(CraftCarrots.AGE, Integer.valueOf(age));
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftCaveVines.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftCaveVines.java
index bc855a098f46f5dbcaecf66e4f83be273704fde3..f9ab03c6ed2f2b65372bc9494c7f4596738197bb 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftCaveVines.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftCaveVines.java
@@ -24,7 +24,7 @@ public final class CraftCaveVines extends org.bukkit.craftbukkit.block.data.Craf
 
     @Override
     public void setAge(int age) {
-        set(CraftCaveVines.AGE, age);
+        set(CraftCaveVines.AGE, Integer.valueOf(age));
     }
 
     @Override
@@ -43,6 +43,6 @@ public final class CraftCaveVines extends org.bukkit.craftbukkit.block.data.Craf
 
     @Override
     public void setBerries(boolean berries) {
-        set(CraftCaveVines.BERRIES, berries);
+        set(CraftCaveVines.BERRIES, Boolean.valueOf(berries));
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftCaveVinesPlant.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftCaveVinesPlant.java
index 7fa18c36881b2425b75c8067108bb8192cff41c1..87aa7e3458a59851a00980054cfb598ab16b1a8b 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftCaveVinesPlant.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftCaveVinesPlant.java
@@ -24,6 +24,6 @@ public final class CraftCaveVinesPlant extends org.bukkit.craftbukkit.block.data
 
     @Override
     public void setBerries(boolean berries) {
-        set(CraftCaveVinesPlant.BERRIES, berries);
+        set(CraftCaveVinesPlant.BERRIES, Boolean.valueOf(berries));
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftChain.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftChain.java
index 2d5f5c7812598ce5f622d597b4708e70b9c2d775..4d653f5e7fe46d6de517ef7713ba7b57e4ad02fe 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftChain.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftChain.java
@@ -46,6 +46,6 @@ public final class CraftChain extends org.bukkit.craftbukkit.block.data.CraftBlo
 
     @Override
     public void setWaterlogged(boolean waterlogged) {
-        set(CraftChain.WATERLOGGED, waterlogged);
+        set(CraftChain.WATERLOGGED, Boolean.valueOf(waterlogged));
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftChest.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftChest.java
index 35a797987f10354a52af7797237065571a2d437c..34cdaab461f9e647fb63e8e02192d35bc9e6956f 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftChest.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftChest.java
@@ -60,6 +60,6 @@ public final class CraftChest extends org.bukkit.craftbukkit.block.data.CraftBlo
 
     @Override
     public void setWaterlogged(boolean waterlogged) {
-        set(CraftChest.WATERLOGGED, waterlogged);
+        set(CraftChest.WATERLOGGED, Boolean.valueOf(waterlogged));
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftChestTrapped.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftChestTrapped.java
index 5f3aeb5eb72ed5eda0455aa2f426b26b9875e5a7..8ee991907d636ed6d005b8ce1060292f5bbf7076 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftChestTrapped.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftChestTrapped.java
@@ -60,6 +60,6 @@ public final class CraftChestTrapped extends org.bukkit.craftbukkit.block.data.C
 
     @Override
     public void setWaterlogged(boolean waterlogged) {
-        set(CraftChestTrapped.WATERLOGGED, waterlogged);
+        set(CraftChestTrapped.WATERLOGGED, Boolean.valueOf(waterlogged));
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftChorusFlower.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftChorusFlower.java
index b3b8124ef259bb785943de24fd32918cde458269..67679ba2d38f1a9a5dbbc8a6cc749658879ab23a 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftChorusFlower.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftChorusFlower.java
@@ -24,7 +24,7 @@ public final class CraftChorusFlower extends org.bukkit.craftbukkit.block.data.C
 
     @Override
     public void setAge(int age) {
-        set(CraftChorusFlower.AGE, age);
+        set(CraftChorusFlower.AGE, Integer.valueOf(age));
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftChorusFruit.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftChorusFruit.java
index 1f6b845fcc587ae4881d40f5671b0d471a2f1b7b..3783fb87ba4e05903a0e63755de97478d7d34bb4 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftChorusFruit.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftChorusFruit.java
@@ -37,7 +37,7 @@ public final class CraftChorusFruit extends org.bukkit.craftbukkit.block.data.Cr
         if (state == null) {
             throw new IllegalArgumentException("Non-allowed face " + face + ". Check MultipleFacing.getAllowedFaces.");
         }
-        set(state, has);
+        set(state, Boolean.valueOf(has));
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftCobbleWall.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftCobbleWall.java
index adf3bfd75b52ad07033219bc469457809332b637..9074c62d16ab3acccedee11ac723f27ab580eb36 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftCobbleWall.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftCobbleWall.java
@@ -30,7 +30,7 @@ public final class CraftCobbleWall extends org.bukkit.craftbukkit.block.data.Cra
 
     @Override
     public void setUp(boolean up) {
-        set(CraftCobbleWall.UP, up);
+        set(CraftCobbleWall.UP, Boolean.valueOf(up));
     }
 
     @Override
@@ -54,6 +54,6 @@ public final class CraftCobbleWall extends org.bukkit.craftbukkit.block.data.Cra
 
     @Override
     public void setWaterlogged(boolean waterlogged) {
-        set(CraftCobbleWall.WATERLOGGED, waterlogged);
+        set(CraftCobbleWall.WATERLOGGED, Boolean.valueOf(waterlogged));
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftCocoa.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftCocoa.java
index 29e4775ea9fbc558aebcb8b588111e4682322fb4..6b31bbcabaa9ceb54af5cb9e00adde5d344ab243 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftCocoa.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftCocoa.java
@@ -27,7 +27,7 @@ public final class CraftCocoa extends org.bukkit.craftbukkit.block.data.CraftBlo
 
     @Override
     public void setAge(int age) {
-        set(CraftCocoa.AGE, age);
+        set(CraftCocoa.AGE, Integer.valueOf(age));
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftCommand.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftCommand.java
index 1dae3b2af59cef7e83f79ee5b9eb40844cead28f..e7437f59f3b98ebf7580b93b3f6a6550d111d767 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftCommand.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftCommand.java
@@ -27,7 +27,7 @@ public final class CraftCommand extends org.bukkit.craftbukkit.block.data.CraftB
 
     @Override
     public void setConditional(boolean conditional) {
-        set(CraftCommand.CONDITIONAL, conditional);
+        set(CraftCommand.CONDITIONAL, Boolean.valueOf(conditional));
     }
 
     // org.bukkit.craftbukkit.block.data.CraftDirectional
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftComposter.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftComposter.java
index ef97e77b25562a8aed35d68d42ced4825d43a29d..cbdf8f30cfa98d964289fcb7c2c1f4da9aebc210 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftComposter.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftComposter.java
@@ -24,7 +24,7 @@ public final class CraftComposter extends org.bukkit.craftbukkit.block.data.Craf
 
     @Override
     public void setLevel(int level) {
-        set(CraftComposter.LEVEL, level);
+        set(CraftComposter.LEVEL, Integer.valueOf(level));
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftConduit.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftConduit.java
index 2b7de9eb078d7bd2b331103ad6160981fd5ac6cb..b2c7521d12a0350a8a7a110403b844ae09939058 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftConduit.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftConduit.java
@@ -24,6 +24,6 @@ public final class CraftConduit extends org.bukkit.craftbukkit.block.data.CraftB
 
     @Override
     public void setWaterlogged(boolean waterlogged) {
-        set(CraftConduit.WATERLOGGED, waterlogged);
+        set(CraftConduit.WATERLOGGED, Boolean.valueOf(waterlogged));
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftCoralDead.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftCoralDead.java
index 011032dacb4a3c77f0be79977196b1578e1d695c..7c5f3972e3ff9fb172c338a908379eaeb4291157 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftCoralDead.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftCoralDead.java
@@ -24,6 +24,6 @@ public final class CraftCoralDead extends org.bukkit.craftbukkit.block.data.Craf
 
     @Override
     public void setWaterlogged(boolean waterlogged) {
-        set(CraftCoralDead.WATERLOGGED, waterlogged);
+        set(CraftCoralDead.WATERLOGGED, Boolean.valueOf(waterlogged));
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftCoralFan.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftCoralFan.java
index 8374c369b8ed302c0f4705e101fd0936c6d4e0ce..423c1b034561dcb56cd69c23b2d9aac22b3e5f10 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftCoralFan.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftCoralFan.java
@@ -24,6 +24,6 @@ public final class CraftCoralFan extends org.bukkit.craftbukkit.block.data.Craft
 
     @Override
     public void setWaterlogged(boolean waterlogged) {
-        set(CraftCoralFan.WATERLOGGED, waterlogged);
+        set(CraftCoralFan.WATERLOGGED, Boolean.valueOf(waterlogged));
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftCoralFanAbstract.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftCoralFanAbstract.java
index 362ba6d4a28700b25cb4af51574d545e5bd845f5..6bd5b4824a0459db25195eab84e0fb483b0bc122 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftCoralFanAbstract.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftCoralFanAbstract.java
@@ -24,6 +24,6 @@ public final class CraftCoralFanAbstract extends org.bukkit.craftbukkit.block.da
 
     @Override
     public void setWaterlogged(boolean waterlogged) {
-        set(CraftCoralFanAbstract.WATERLOGGED, waterlogged);
+        set(CraftCoralFanAbstract.WATERLOGGED, Boolean.valueOf(waterlogged));
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftCoralFanWall.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftCoralFanWall.java
index 893a4525909c66d800c7af2c75773e7b69ca5f98..6c023d6471872e7535ea92d2c443ce0dec5f2027 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftCoralFanWall.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftCoralFanWall.java
@@ -46,6 +46,6 @@ public final class CraftCoralFanWall extends org.bukkit.craftbukkit.block.data.C
 
     @Override
     public void setWaterlogged(boolean waterlogged) {
-        set(CraftCoralFanWall.WATERLOGGED, waterlogged);
+        set(CraftCoralFanWall.WATERLOGGED, Boolean.valueOf(waterlogged));
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftCoralFanWallAbstract.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftCoralFanWallAbstract.java
index 7b5b52c296ca06c9bed4f76177074f47749f67f3..87b51c67e1ca96209b3095d8f4834a781e2d8478 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftCoralFanWallAbstract.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftCoralFanWallAbstract.java
@@ -46,6 +46,6 @@ public final class CraftCoralFanWallAbstract extends org.bukkit.craftbukkit.bloc
 
     @Override
     public void setWaterlogged(boolean waterlogged) {
-        set(CraftCoralFanWallAbstract.WATERLOGGED, waterlogged);
+        set(CraftCoralFanWallAbstract.WATERLOGGED, Boolean.valueOf(waterlogged));
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftCoralPlant.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftCoralPlant.java
index 23e1c7b50805e7b24d8697f8b2d15fbd3d0c30de..364fe71c4d59732760f79106f495ced82358dc4d 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftCoralPlant.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftCoralPlant.java
@@ -24,6 +24,6 @@ public final class CraftCoralPlant extends org.bukkit.craftbukkit.block.data.Cra
 
     @Override
     public void setWaterlogged(boolean waterlogged) {
-        set(CraftCoralPlant.WATERLOGGED, waterlogged);
+        set(CraftCoralPlant.WATERLOGGED, Boolean.valueOf(waterlogged));
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftCrops.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftCrops.java
index 8030b4bc16538cc22e64ce512dfaf8d90e64c8c9..ae2b76effafe9fa03874741284163da2f71c69c9 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftCrops.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftCrops.java
@@ -24,7 +24,7 @@ public final class CraftCrops extends org.bukkit.craftbukkit.block.data.CraftBlo
 
     @Override
     public void setAge(int age) {
-        set(CraftCrops.AGE, age);
+        set(CraftCrops.AGE, Integer.valueOf(age));
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftDaylightDetector.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftDaylightDetector.java
index 19f1642a760734dc4b9ebf21f296b12dd37c763f..932ee75254ed7788fee7565e8aad17e20d86d72c 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftDaylightDetector.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftDaylightDetector.java
@@ -24,7 +24,7 @@ public final class CraftDaylightDetector extends org.bukkit.craftbukkit.block.da
 
     @Override
     public void setInverted(boolean inverted) {
-        set(CraftDaylightDetector.INVERTED, inverted);
+        set(CraftDaylightDetector.INVERTED, Boolean.valueOf(inverted));
     }
 
     // org.bukkit.craftbukkit.block.data.CraftAnaloguePowerable
@@ -38,7 +38,7 @@ public final class CraftDaylightDetector extends org.bukkit.craftbukkit.block.da
 
     @Override
     public void setPower(int power) {
-        set(CraftDaylightDetector.POWER, power);
+        set(CraftDaylightDetector.POWER, Integer.valueOf(power));
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftDirtSnow.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftDirtSnow.java
index 75498a0f24d4c1486310eb3ba4a8af2b5c670939..645a34185c9afd82480573f89556a042d6cc008a 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftDirtSnow.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftDirtSnow.java
@@ -24,6 +24,6 @@ public final class CraftDirtSnow extends org.bukkit.craftbukkit.block.data.Craft
 
     @Override
     public void setSnowy(boolean snowy) {
-        set(CraftDirtSnow.SNOWY, snowy);
+        set(CraftDirtSnow.SNOWY, Boolean.valueOf(snowy));
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftDispenser.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftDispenser.java
index c1fdf1260fe3abfe85b104400345c1883ead4047..7bb522c9e96ef4bc681d5df81f8981911d2cbcb6 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftDispenser.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftDispenser.java
@@ -27,7 +27,7 @@ public final class CraftDispenser extends org.bukkit.craftbukkit.block.data.Craf
 
     @Override
     public void setTriggered(boolean triggered) {
-        set(CraftDispenser.TRIGGERED, triggered);
+        set(CraftDispenser.TRIGGERED, Boolean.valueOf(triggered));
     }
 
     // org.bukkit.craftbukkit.block.data.CraftDirectional
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftDoor.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftDoor.java
index 8042cea84bc656fffc22fc4975d9b156790eb727..9ec61da777dc1216c5805fd57d7ed3c067ca2027 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftDoor.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftDoor.java
@@ -74,7 +74,7 @@ public final class CraftDoor extends org.bukkit.craftbukkit.block.data.CraftBloc
 
     @Override
     public void setOpen(boolean open) {
-        set(CraftDoor.OPEN, open);
+        set(CraftDoor.OPEN, Boolean.valueOf(open));
     }
 
     // org.bukkit.craftbukkit.block.data.CraftPowerable
@@ -88,6 +88,6 @@ public final class CraftDoor extends org.bukkit.craftbukkit.block.data.CraftBloc
 
     @Override
     public void setPowered(boolean powered) {
-        set(CraftDoor.POWERED, powered);
+        set(CraftDoor.POWERED, Boolean.valueOf(powered));
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftDropper.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftDropper.java
index ab26eee570e48439eed776cf2cd9f282cfecfa04..a57b2612b9d2d4c842c2ea7ff6898ddc46e04568 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftDropper.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftDropper.java
@@ -27,7 +27,7 @@ public final class CraftDropper extends org.bukkit.craftbukkit.block.data.CraftB
 
     @Override
     public void setTriggered(boolean triggered) {
-        set(CraftDropper.TRIGGERED, triggered);
+        set(CraftDropper.TRIGGERED, Boolean.valueOf(triggered));
     }
 
     // org.bukkit.craftbukkit.block.data.CraftDirectional
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftEnderChest.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftEnderChest.java
index 6cfc765c58224d7da71b0800abf273a277e2376c..477a40a4ab454ada06cf6bc8e9dc87c0cf66acc3 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftEnderChest.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftEnderChest.java
@@ -46,6 +46,6 @@ public final class CraftEnderChest extends org.bukkit.craftbukkit.block.data.Cra
 
     @Override
     public void setWaterlogged(boolean waterlogged) {
-        set(CraftEnderChest.WATERLOGGED, waterlogged);
+        set(CraftEnderChest.WATERLOGGED, Boolean.valueOf(waterlogged));
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftEnderPortalFrame.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftEnderPortalFrame.java
index be21aa0d88e2b6273d1d1b8aaf8f53f370c762e2..5a1336ef8b29c7ad137001585865a796e4917894 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftEnderPortalFrame.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftEnderPortalFrame.java
@@ -27,7 +27,7 @@ public final class CraftEnderPortalFrame extends org.bukkit.craftbukkit.block.da
 
     @Override
     public void setEye(boolean eye) {
-        set(CraftEnderPortalFrame.EYE, eye);
+        set(CraftEnderPortalFrame.EYE, Boolean.valueOf(eye));
     }
 
     // org.bukkit.craftbukkit.block.data.CraftDirectional
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftFence.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftFence.java
index b8fe3c1df047a9e8d21bee3c24823369ad9a50c9..edaa0371a56cd594755acbc8d9162d17f55b7b71 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftFence.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftFence.java
@@ -37,7 +37,7 @@ public final class CraftFence extends org.bukkit.craftbukkit.block.data.CraftBlo
         if (state == null) {
             throw new IllegalArgumentException("Non-allowed face " + face + ". Check MultipleFacing.getAllowedFaces.");
         }
-        set(state, has);
+        set(state, Boolean.valueOf(has));
     }
 
     @Override
@@ -77,6 +77,6 @@ public final class CraftFence extends org.bukkit.craftbukkit.block.data.CraftBlo
 
     @Override
     public void setWaterlogged(boolean waterlogged) {
-        set(CraftFence.WATERLOGGED, waterlogged);
+        set(CraftFence.WATERLOGGED, Boolean.valueOf(waterlogged));
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftFenceGate.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftFenceGate.java
index bca98a1ad526738078187506823e03077c778cff..b856b6ae60b20767bc27bbb84db79da947f039f5 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftFenceGate.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftFenceGate.java
@@ -27,7 +27,7 @@ public final class CraftFenceGate extends org.bukkit.craftbukkit.block.data.Craf
 
     @Override
     public void setInWall(boolean inWall) {
-        set(CraftFenceGate.IN_WALL, inWall);
+        set(CraftFenceGate.IN_WALL, Boolean.valueOf(inWall));
     }
 
     // org.bukkit.craftbukkit.block.data.CraftDirectional
@@ -60,7 +60,7 @@ public final class CraftFenceGate extends org.bukkit.craftbukkit.block.data.Craf
 
     @Override
     public void setOpen(boolean open) {
-        set(CraftFenceGate.OPEN, open);
+        set(CraftFenceGate.OPEN, Boolean.valueOf(open));
     }
 
     // org.bukkit.craftbukkit.block.data.CraftPowerable
@@ -74,6 +74,6 @@ public final class CraftFenceGate extends org.bukkit.craftbukkit.block.data.Craf
 
     @Override
     public void setPowered(boolean powered) {
-        set(CraftFenceGate.POWERED, powered);
+        set(CraftFenceGate.POWERED, Boolean.valueOf(powered));
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftFire.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftFire.java
index 9def551fbecb0520f07f4f758989519d60ec842c..2cb3e9555585a67c65d65b6a09f8304d355c3eeb 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftFire.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftFire.java
@@ -27,7 +27,7 @@ public final class CraftFire extends org.bukkit.craftbukkit.block.data.CraftBloc
 
     @Override
     public void setAge(int age) {
-        set(CraftFire.AGE, age);
+        set(CraftFire.AGE, Integer.valueOf(age));
     }
 
     @Override
@@ -56,7 +56,7 @@ public final class CraftFire extends org.bukkit.craftbukkit.block.data.CraftBloc
         if (state == null) {
             throw new IllegalArgumentException("Non-allowed face " + face + ". Check MultipleFacing.getAllowedFaces.");
         }
-        set(state, has);
+        set(state, Boolean.valueOf(has));
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftFloorSign.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftFloorSign.java
index b66e483ba4e0fd84aa2b3f7480e2da66694bbb46..99c69327c55b1e0aabf171327c08720e93e6c4cf 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftFloorSign.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftFloorSign.java
@@ -116,7 +116,7 @@ public final class CraftFloorSign extends org.bukkit.craftbukkit.block.data.Craf
             default:
                 throw new IllegalArgumentException("Illegal rotation " + rotation);
         }
-        set(CraftFloorSign.ROTATION, val);
+        set(CraftFloorSign.ROTATION, Integer.valueOf(val));
     }
 
     // org.bukkit.craftbukkit.block.data.CraftWaterlogged
@@ -130,6 +130,6 @@ public final class CraftFloorSign extends org.bukkit.craftbukkit.block.data.Craf
 
     @Override
     public void setWaterlogged(boolean waterlogged) {
-        set(CraftFloorSign.WATERLOGGED, waterlogged);
+        set(CraftFloorSign.WATERLOGGED, Boolean.valueOf(waterlogged));
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftFluids.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftFluids.java
index e40cda2f23d63e9d2029a8c8818103b6eeb6a925..29a85edf3006626a916dbcfc0d4be825cd3a2193 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftFluids.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftFluids.java
@@ -24,7 +24,7 @@ public final class CraftFluids extends org.bukkit.craftbukkit.block.data.CraftBl
 
     @Override
     public void setLevel(int level) {
-        set(CraftFluids.LEVEL, level);
+        set(CraftFluids.LEVEL, Integer.valueOf(level));
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftFurnaceFurace.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftFurnaceFurace.java
index e502c01b7ad0da043285868e4666ba82a7e67f57..c968be2b6a418d5169e1d4ebc23757e46141a892 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftFurnaceFurace.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftFurnaceFurace.java
@@ -46,6 +46,6 @@ public final class CraftFurnaceFurace extends org.bukkit.craftbukkit.block.data.
 
     @Override
     public void setLit(boolean lit) {
-        set(CraftFurnaceFurace.LIT, lit);
+        set(CraftFurnaceFurace.LIT, Boolean.valueOf(lit));
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftGlowLichen.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftGlowLichen.java
index 5247636186f8f2f08292a382eb706c74c8f4f1f2..a37667f8a5c14442433ab4e3f40579f5df73eaf4 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftGlowLichen.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftGlowLichen.java
@@ -37,7 +37,7 @@ public final class CraftGlowLichen extends org.bukkit.craftbukkit.block.data.Cra
         if (state == null) {
             throw new IllegalArgumentException("Non-allowed face " + face + ". Check MultipleFacing.getAllowedFaces.");
         }
-        set(state, has);
+        set(state, Boolean.valueOf(has));
     }
 
     @Override
@@ -77,6 +77,6 @@ public final class CraftGlowLichen extends org.bukkit.craftbukkit.block.data.Cra
 
     @Override
     public void setWaterlogged(boolean waterlogged) {
-        set(CraftGlowLichen.WATERLOGGED, waterlogged);
+        set(CraftGlowLichen.WATERLOGGED, Boolean.valueOf(waterlogged));
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftGrass.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftGrass.java
index f8d971b164b7c29110a13339894b51ea819bd203..445484b7ff3497d6e3451d4158e61c31265b00b3 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftGrass.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftGrass.java
@@ -24,6 +24,6 @@ public final class CraftGrass extends org.bukkit.craftbukkit.block.data.CraftBlo
 
     @Override
     public void setSnowy(boolean snowy) {
-        set(CraftGrass.SNOWY, snowy);
+        set(CraftGrass.SNOWY, Boolean.valueOf(snowy));
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftHangingRoots.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftHangingRoots.java
index ef25e4c583e646ddc822676ddb4744526296fb87..e5614e8f67d83e35e5aabc96b4ea3d8a4d44e2c4 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftHangingRoots.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftHangingRoots.java
@@ -24,6 +24,6 @@ public final class CraftHangingRoots extends org.bukkit.craftbukkit.block.data.C
 
     @Override
     public void setWaterlogged(boolean waterlogged) {
-        set(CraftHangingRoots.WATERLOGGED, waterlogged);
+        set(CraftHangingRoots.WATERLOGGED, Boolean.valueOf(waterlogged));
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftHopper.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftHopper.java
index f5ac67fa566c048072163121342974a36fa88946..928d577a8ace6a9864822a9179d9fb17d64ab1c6 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftHopper.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftHopper.java
@@ -27,7 +27,7 @@ public final class CraftHopper extends org.bukkit.craftbukkit.block.data.CraftBl
 
     @Override
     public void setEnabled(boolean enabled) {
-        set(CraftHopper.ENABLED, enabled);
+        set(CraftHopper.ENABLED, Boolean.valueOf(enabled));
     }
 
     // org.bukkit.craftbukkit.block.data.CraftDirectional
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftHugeMushroom.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftHugeMushroom.java
index 185a3726ad278b01ce281b363c70afeaa00b48bb..8990139020ea5788f12cebbf13ff4ba52dc4ad92 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftHugeMushroom.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftHugeMushroom.java
@@ -37,7 +37,7 @@ public final class CraftHugeMushroom extends org.bukkit.craftbukkit.block.data.C
         if (state == null) {
             throw new IllegalArgumentException("Non-allowed face " + face + ". Check MultipleFacing.getAllowedFaces.");
         }
-        set(state, has);
+        set(state, Boolean.valueOf(has));
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftIceFrost.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftIceFrost.java
index bfa745c3b276b3b19befa35ee5ca8ea499dfaad4..a37cb5d15ee14701d722b266ed5a550462bac48e 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftIceFrost.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftIceFrost.java
@@ -24,7 +24,7 @@ public final class CraftIceFrost extends org.bukkit.craftbukkit.block.data.Craft
 
     @Override
     public void setAge(int age) {
-        set(CraftIceFrost.AGE, age);
+        set(CraftIceFrost.AGE, Integer.valueOf(age));
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftIronBars.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftIronBars.java
index dcc448e04f7e979ff815ef460235f8508d5cb3d6..04a82cba9792234165167c06d05e32cd4033f749 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftIronBars.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftIronBars.java
@@ -37,7 +37,7 @@ public final class CraftIronBars extends org.bukkit.craftbukkit.block.data.Craft
         if (state == null) {
             throw new IllegalArgumentException("Non-allowed face " + face + ". Check MultipleFacing.getAllowedFaces.");
         }
-        set(state, has);
+        set(state, Boolean.valueOf(has));
     }
 
     @Override
@@ -77,6 +77,6 @@ public final class CraftIronBars extends org.bukkit.craftbukkit.block.data.Craft
 
     @Override
     public void setWaterlogged(boolean waterlogged) {
-        set(CraftIronBars.WATERLOGGED, waterlogged);
+        set(CraftIronBars.WATERLOGGED, Boolean.valueOf(waterlogged));
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftKelp.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftKelp.java
index d96092095d11d8aa1c0e54ec33634521fed51306..62fb0f9b194eb1bd84f29771467e05a22e6ee848 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftKelp.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftKelp.java
@@ -24,7 +24,7 @@ public final class CraftKelp extends org.bukkit.craftbukkit.block.data.CraftBloc
 
     @Override
     public void setAge(int age) {
-        set(CraftKelp.AGE, age);
+        set(CraftKelp.AGE, Integer.valueOf(age));
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftLadder.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftLadder.java
index fb78e24a8fec433c62c3e9cf8876b55e29f53523..87e60a10054817af94ef336ddd34d98c115cba04 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftLadder.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftLadder.java
@@ -46,6 +46,6 @@ public final class CraftLadder extends org.bukkit.craftbukkit.block.data.CraftBl
 
     @Override
     public void setWaterlogged(boolean waterlogged) {
-        set(CraftLadder.WATERLOGGED, waterlogged);
+        set(CraftLadder.WATERLOGGED, Boolean.valueOf(waterlogged));
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftLantern.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftLantern.java
index 5cfbf74304bf55535fa538c0a7a0b3d394d922ee..f90346b79fa01461666230907e3d3b43760b642b 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftLantern.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftLantern.java
@@ -24,7 +24,7 @@ public final class CraftLantern extends org.bukkit.craftbukkit.block.data.CraftB
 
     @Override
     public void setHanging(boolean hanging) {
-        set(CraftLantern.HANGING, hanging);
+        set(CraftLantern.HANGING, Boolean.valueOf(hanging));
     }
 
     // org.bukkit.craftbukkit.block.data.CraftWaterlogged
@@ -38,6 +38,6 @@ public final class CraftLantern extends org.bukkit.craftbukkit.block.data.CraftB
 
     @Override
     public void setWaterlogged(boolean waterlogged) {
-        set(CraftLantern.WATERLOGGED, waterlogged);
+        set(CraftLantern.WATERLOGGED, Boolean.valueOf(waterlogged));
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftLayeredCauldron.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftLayeredCauldron.java
index 5b96ec73bf7bd4d90ce77cfe8ffec82580b20d2b..f06d9d1f74f82a2fec2c01f5ed0ad02b3de424e3 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftLayeredCauldron.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftLayeredCauldron.java
@@ -24,7 +24,7 @@ public final class CraftLayeredCauldron extends org.bukkit.craftbukkit.block.dat
 
     @Override
     public void setLevel(int level) {
-        set(CraftLayeredCauldron.LEVEL, level);
+        set(CraftLayeredCauldron.LEVEL, Integer.valueOf(level));
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftLeaves.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftLeaves.java
index 8cb0f9bf8a2e264e089a0278d5fb4b157844f6e4..762972dc0c235e850105017f20fbb503565bacdd 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftLeaves.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftLeaves.java
@@ -25,7 +25,7 @@ public final class CraftLeaves extends org.bukkit.craftbukkit.block.data.CraftBl
 
     @Override
     public void setPersistent(boolean persistent) {
-        set(CraftLeaves.PERSISTENT, persistent);
+        set(CraftLeaves.PERSISTENT, Boolean.valueOf(persistent));
     }
 
     @Override
@@ -35,7 +35,7 @@ public final class CraftLeaves extends org.bukkit.craftbukkit.block.data.CraftBl
 
     @Override
     public void setDistance(int distance) {
-        set(CraftLeaves.DISTANCE, distance);
+        set(CraftLeaves.DISTANCE, Integer.valueOf(distance));
     }
 
     // org.bukkit.craftbukkit.block.data.CraftWaterlogged
@@ -49,7 +49,7 @@ public final class CraftLeaves extends org.bukkit.craftbukkit.block.data.CraftBl
 
     @Override
     public void setWaterlogged(boolean waterlogged) {
-        set(CraftLeaves.WATERLOGGED, waterlogged);
+        set(CraftLeaves.WATERLOGGED, Boolean.valueOf(waterlogged));
     }
 
     // Paper start
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftLectern.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftLectern.java
index e7c06a86327a1d4443a2ba8fbc452a63f5495021..b490bb59a33c253c5d6f19c83fc0f2c99f7b37f0 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftLectern.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftLectern.java
@@ -55,6 +55,6 @@ public final class CraftLectern extends org.bukkit.craftbukkit.block.data.CraftB
 
     @Override
     public void setPowered(boolean powered) {
-        set(CraftLectern.POWERED, powered);
+        set(CraftLectern.POWERED, Boolean.valueOf(powered));
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftLever.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftLever.java
index f9b5c16cef93f142c4199702056eb7b0e25f96e0..64a0bbfb23390efc7a97e041a2acc88de7f25503 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftLever.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftLever.java
@@ -74,6 +74,6 @@ public final class CraftLever extends org.bukkit.craftbukkit.block.data.CraftBlo
 
     @Override
     public void setPowered(boolean powered) {
-        set(CraftLever.POWERED, powered);
+        set(CraftLever.POWERED, Boolean.valueOf(powered));
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftLight.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftLight.java
index 0d430382a05dfc0802a2569816c5ec876a053f16..7867c36f1f3332d129f1ca508481ce798311f2f3 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftLight.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftLight.java
@@ -24,7 +24,7 @@ public final class CraftLight extends org.bukkit.craftbukkit.block.data.CraftBlo
 
     @Override
     public void setLevel(int level) {
-        set(CraftLight.LEVEL, level);
+        set(CraftLight.LEVEL, Integer.valueOf(level));
     }
 
     @Override
@@ -50,6 +50,6 @@ public final class CraftLight extends org.bukkit.craftbukkit.block.data.CraftBlo
 
     @Override
     public void setWaterlogged(boolean waterlogged) {
-        set(CraftLight.WATERLOGGED, waterlogged);
+        set(CraftLight.WATERLOGGED, Boolean.valueOf(waterlogged));
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftLightningRod.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftLightningRod.java
index 3f3e5a16c9a6e39fb624bdcfbdf77f5b07f5119d..454d5fccd2e8d62d37d3c0e5d762335c1795603c 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftLightningRod.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftLightningRod.java
@@ -46,7 +46,7 @@ public final class CraftLightningRod extends org.bukkit.craftbukkit.block.data.C
 
     @Override
     public void setPowered(boolean powered) {
-        set(CraftLightningRod.POWERED, powered);
+        set(CraftLightningRod.POWERED, Boolean.valueOf(powered));
     }
 
     // org.bukkit.craftbukkit.block.data.CraftWaterlogged
@@ -60,6 +60,6 @@ public final class CraftLightningRod extends org.bukkit.craftbukkit.block.data.C
 
     @Override
     public void setWaterlogged(boolean waterlogged) {
-        set(CraftLightningRod.WATERLOGGED, waterlogged);
+        set(CraftLightningRod.WATERLOGGED, Boolean.valueOf(waterlogged));
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftMangroveLeaves.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftMangroveLeaves.java
index 5a021dc1931d35cbe235ab399aa98f3c7e93ded3..c2e004a78c6aa4553b8de0dce87f32a42abfa2c6 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftMangroveLeaves.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftMangroveLeaves.java
@@ -25,7 +25,7 @@ public final class CraftMangroveLeaves extends org.bukkit.craftbukkit.block.data
 
     @Override
     public void setPersistent(boolean persistent) {
-        set(CraftMangroveLeaves.PERSISTENT, persistent);
+        set(CraftMangroveLeaves.PERSISTENT, Boolean.valueOf(persistent));
     }
 
     @Override
@@ -35,7 +35,7 @@ public final class CraftMangroveLeaves extends org.bukkit.craftbukkit.block.data
 
     @Override
     public void setDistance(int distance) {
-        set(CraftMangroveLeaves.DISTANCE, distance);
+        set(CraftMangroveLeaves.DISTANCE, Integer.valueOf(distance));
     }
 
     // org.bukkit.craftbukkit.block.data.CraftWaterlogged
@@ -49,7 +49,7 @@ public final class CraftMangroveLeaves extends org.bukkit.craftbukkit.block.data
 
     @Override
     public void setWaterlogged(boolean waterlogged) {
-        set(CraftMangroveLeaves.WATERLOGGED, waterlogged);
+        set(CraftMangroveLeaves.WATERLOGGED, Boolean.valueOf(waterlogged));
     }
 
     // Paper start
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftMangrovePropagule.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftMangrovePropagule.java
index ea642f9ead1497249bb5d0eb293b836b34e3a082..3f594cd23762627ab66138e59ea181dd24743297 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftMangrovePropagule.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftMangrovePropagule.java
@@ -24,7 +24,7 @@ public final class CraftMangrovePropagule extends org.bukkit.craftbukkit.block.d
 
     @Override
     public void setAge(int age) {
-        set(CraftMangrovePropagule.AGE, age);
+        set(CraftMangrovePropagule.AGE, Integer.valueOf(age));
     }
 
     @Override
@@ -43,7 +43,7 @@ public final class CraftMangrovePropagule extends org.bukkit.craftbukkit.block.d
 
     @Override
     public void setHanging(boolean hanging) {
-        set(CraftMangrovePropagule.HANGING, hanging);
+        set(CraftMangrovePropagule.HANGING, Boolean.valueOf(hanging));
     }
 
     // org.bukkit.craftbukkit.block.data.type.CraftSapling
@@ -57,7 +57,7 @@ public final class CraftMangrovePropagule extends org.bukkit.craftbukkit.block.d
 
     @Override
     public void setStage(int stage) {
-        set(CraftMangrovePropagule.STAGE, stage);
+        set(CraftMangrovePropagule.STAGE, Integer.valueOf(stage));
     }
 
     @Override
@@ -76,6 +76,6 @@ public final class CraftMangrovePropagule extends org.bukkit.craftbukkit.block.d
 
     @Override
     public void setWaterlogged(boolean waterlogged) {
-        set(CraftMangrovePropagule.WATERLOGGED, waterlogged);
+        set(CraftMangrovePropagule.WATERLOGGED, Boolean.valueOf(waterlogged));
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftMangroveRoots.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftMangroveRoots.java
index 675aec652426fb231957e645ba1789a74bec8d33..391dedb16954c5d3fa70e723e3a800c8881bf650 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftMangroveRoots.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftMangroveRoots.java
@@ -24,6 +24,6 @@ public final class CraftMangroveRoots extends org.bukkit.craftbukkit.block.data.
 
     @Override
     public void setWaterlogged(boolean waterlogged) {
-        set(CraftMangroveRoots.WATERLOGGED, waterlogged);
+        set(CraftMangroveRoots.WATERLOGGED, Boolean.valueOf(waterlogged));
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftMinecartDetector.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftMinecartDetector.java
index 60434dce3f5137ee5d7943b5ed77a4fcc6baa49e..a96155afc5f07d8d23c98c3fd64c771b1e01f60b 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftMinecartDetector.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftMinecartDetector.java
@@ -27,7 +27,7 @@ public final class CraftMinecartDetector extends org.bukkit.craftbukkit.block.da
 
     @Override
     public void setPowered(boolean powered) {
-        set(CraftMinecartDetector.POWERED, powered);
+        set(CraftMinecartDetector.POWERED, Boolean.valueOf(powered));
     }
 
     // org.bukkit.craftbukkit.block.data.CraftRail
@@ -60,6 +60,6 @@ public final class CraftMinecartDetector extends org.bukkit.craftbukkit.block.da
 
     @Override
     public void setWaterlogged(boolean waterlogged) {
-        set(CraftMinecartDetector.WATERLOGGED, waterlogged);
+        set(CraftMinecartDetector.WATERLOGGED, Boolean.valueOf(waterlogged));
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftMinecartTrack.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftMinecartTrack.java
index fe7d6505164c0c5899ddbe42dd341141037e459f..c00c2be3ee9fa6883bb80b60d9f44fe768af51c6 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftMinecartTrack.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftMinecartTrack.java
@@ -46,6 +46,6 @@ public final class CraftMinecartTrack extends org.bukkit.craftbukkit.block.data.
 
     @Override
     public void setWaterlogged(boolean waterlogged) {
-        set(CraftMinecartTrack.WATERLOGGED, waterlogged);
+        set(CraftMinecartTrack.WATERLOGGED, Boolean.valueOf(waterlogged));
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftMycel.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftMycel.java
index 18066f000dbef4d99eb034ec17dc763e167009e6..65cfcc4a55cf3cc78cccaba9296b391c8b40762c 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftMycel.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftMycel.java
@@ -24,6 +24,6 @@ public final class CraftMycel extends org.bukkit.craftbukkit.block.data.CraftBlo
 
     @Override
     public void setSnowy(boolean snowy) {
-        set(CraftMycel.SNOWY, snowy);
+        set(CraftMycel.SNOWY, Boolean.valueOf(snowy));
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftNetherWart.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftNetherWart.java
index 43362965d45d9209a8bf941baae08284b6b848df..c2a3093b0386354d81abf79d903fb82c2fa80181 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftNetherWart.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftNetherWart.java
@@ -24,7 +24,7 @@ public final class CraftNetherWart extends org.bukkit.craftbukkit.block.data.Cra
 
     @Override
     public void setAge(int age) {
-        set(CraftNetherWart.AGE, age);
+        set(CraftNetherWart.AGE, Integer.valueOf(age));
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftNote.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftNote.java
index 1eb381593dbf6e5957abe140b45c427fdaeb19a7..808084fbf02b9a019c6208782973f583b5dba39e 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftNote.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftNote.java
@@ -38,7 +38,7 @@ public final class CraftNote extends org.bukkit.craftbukkit.block.data.CraftBloc
 
     @Override
     public void setNote(org.bukkit.@NotNull Note note) {
-        set(CraftNote.NOTE, (int) note.getId());
+        set(CraftNote.NOTE, Integer.valueOf((int) note.getId()));
     }
 
     // org.bukkit.craftbukkit.block.data.CraftPowerable
@@ -52,6 +52,6 @@ public final class CraftNote extends org.bukkit.craftbukkit.block.data.CraftBloc
 
     @Override
     public void setPowered(boolean powered) {
-        set(CraftNote.POWERED, powered);
+        set(CraftNote.POWERED, Boolean.valueOf(powered));
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftObserver.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftObserver.java
index 32c0dc33a95d4c5ef28f76ceb84bd1ffe1e911e1..05e64d441e1bdae237bf9f264bc7ff71f9d21402 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftObserver.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftObserver.java
@@ -46,6 +46,6 @@ public final class CraftObserver extends org.bukkit.craftbukkit.block.data.Craft
 
     @Override
     public void setPowered(boolean powered) {
-        set(CraftObserver.POWERED, powered);
+        set(CraftObserver.POWERED, Boolean.valueOf(powered));
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftPiston.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftPiston.java
index 3462d56f6e40aa9d6c2305a7e0c35c4d71d288b8..4d0e7674576337854424f69d547dce0d4eddc72d 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftPiston.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftPiston.java
@@ -27,7 +27,7 @@ public final class CraftPiston extends org.bukkit.craftbukkit.block.data.CraftBl
 
     @Override
     public void setExtended(boolean extended) {
-        set(CraftPiston.EXTENDED, extended);
+        set(CraftPiston.EXTENDED, Boolean.valueOf(extended));
     }
 
     // org.bukkit.craftbukkit.block.data.CraftDirectional
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftPistonExtension.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftPistonExtension.java
index 2faf6b5edb3a44b5a1e1a88181e10bb60116b32a..ab6939e499220038018b4475ad96795b3f163c1d 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftPistonExtension.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftPistonExtension.java
@@ -27,7 +27,7 @@ public final class CraftPistonExtension extends org.bukkit.craftbukkit.block.dat
 
     @Override
     public void setShort(boolean _short) {
-        set(CraftPistonExtension.SHORT, _short);
+        set(CraftPistonExtension.SHORT, Boolean.valueOf(_short));
     }
 
     // org.bukkit.craftbukkit.block.data.type.CraftTechnicalPiston
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftPointedDripstone.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftPointedDripstone.java
index 336e2bd2559262de352bca12c8998162433b5bed..9718bc6af48b757a463b2366db85393eb247e4ec 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftPointedDripstone.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftPointedDripstone.java
@@ -57,6 +57,6 @@ public final class CraftPointedDripstone extends org.bukkit.craftbukkit.block.da
 
     @Override
     public void setWaterlogged(boolean waterlogged) {
-        set(CraftPointedDripstone.WATERLOGGED, waterlogged);
+        set(CraftPointedDripstone.WATERLOGGED, Boolean.valueOf(waterlogged));
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftPotatoes.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftPotatoes.java
index 058844a2b250ae84c5c0422d1e6ad5a766ea9662..150e2c44ad245d7f57d8ede426665ebdc709e89d 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftPotatoes.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftPotatoes.java
@@ -24,7 +24,7 @@ public final class CraftPotatoes extends org.bukkit.craftbukkit.block.data.Craft
 
     @Override
     public void setAge(int age) {
-        set(CraftPotatoes.AGE, age);
+        set(CraftPotatoes.AGE, Integer.valueOf(age));
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftPowderSnowCauldron.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftPowderSnowCauldron.java
index c6289306f0f933b67ff1f6db63ef976df7aa5438..56737862cd6e439090e331f29122e960ac1126a4 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftPowderSnowCauldron.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftPowderSnowCauldron.java
@@ -24,7 +24,7 @@ public final class CraftPowderSnowCauldron extends org.bukkit.craftbukkit.block.
 
     @Override
     public void setLevel(int level) {
-        set(CraftPowderSnowCauldron.LEVEL, level);
+        set(CraftPowderSnowCauldron.LEVEL, Integer.valueOf(level));
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftPoweredRail.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftPoweredRail.java
index a76804d7e4fd6889bbbbe8710ce10dd47fae0e5c..68ae52c40e620d4b821e3fbde88bd3a4160d9bed 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftPoweredRail.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftPoweredRail.java
@@ -27,7 +27,7 @@ public final class CraftPoweredRail extends org.bukkit.craftbukkit.block.data.Cr
 
     @Override
     public void setPowered(boolean powered) {
-        set(CraftPoweredRail.POWERED, powered);
+        set(CraftPoweredRail.POWERED, Boolean.valueOf(powered));
     }
 
     // org.bukkit.craftbukkit.block.data.CraftRail
@@ -60,6 +60,6 @@ public final class CraftPoweredRail extends org.bukkit.craftbukkit.block.data.Cr
 
     @Override
     public void setWaterlogged(boolean waterlogged) {
-        set(CraftPoweredRail.WATERLOGGED, waterlogged);
+        set(CraftPoweredRail.WATERLOGGED, Boolean.valueOf(waterlogged));
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftPressurePlateBinary.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftPressurePlateBinary.java
index 7b439ff0ec972c9bf83c1e4c9a387ee57ce2d277..f05b202a233d46d987c9af4ae7838134cc8d5b29 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftPressurePlateBinary.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftPressurePlateBinary.java
@@ -24,6 +24,6 @@ public final class CraftPressurePlateBinary extends org.bukkit.craftbukkit.block
 
     @Override
     public void setPowered(boolean powered) {
-        set(CraftPressurePlateBinary.POWERED, powered);
+        set(CraftPressurePlateBinary.POWERED, Boolean.valueOf(powered));
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftPressurePlateWeighted.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftPressurePlateWeighted.java
index c9f337b8cd62cde613486a6197cee0db25f3bb54..2cd6100233697bfb5ab1cc8560fa9690f70d1895 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftPressurePlateWeighted.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftPressurePlateWeighted.java
@@ -24,7 +24,7 @@ public final class CraftPressurePlateWeighted extends org.bukkit.craftbukkit.blo
 
     @Override
     public void setPower(int power) {
-        set(CraftPressurePlateWeighted.POWER, power);
+        set(CraftPressurePlateWeighted.POWER, Integer.valueOf(power));
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftRedstoneComparator.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftRedstoneComparator.java
index d21aa86187452ddd8895fdadc7c8ee4ee712cd79..925d09ff34cfd89e4857484e201719dfee179dda 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftRedstoneComparator.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftRedstoneComparator.java
@@ -60,6 +60,6 @@ public final class CraftRedstoneComparator extends org.bukkit.craftbukkit.block.
 
     @Override
     public void setPowered(boolean powered) {
-        set(CraftRedstoneComparator.POWERED, powered);
+        set(CraftRedstoneComparator.POWERED, Boolean.valueOf(powered));
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftRedstoneLamp.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftRedstoneLamp.java
index c5c138c370b847b68f4a0781a5fe1af4008b5408..5a04aeda1b2e1b9b9a99541ed5ec5cea1a3e24d9 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftRedstoneLamp.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftRedstoneLamp.java
@@ -24,6 +24,6 @@ public final class CraftRedstoneLamp extends org.bukkit.craftbukkit.block.data.C
 
     @Override
     public void setLit(boolean lit) {
-        set(CraftRedstoneLamp.LIT, lit);
+        set(CraftRedstoneLamp.LIT, Boolean.valueOf(lit));
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftRedstoneOre.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftRedstoneOre.java
index 80f5e55902e5fe2a05c97f94ac52fdfd2b5a5d0c..66767cb051e7756f523eb1aab661ec69c14b00ec 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftRedstoneOre.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftRedstoneOre.java
@@ -24,6 +24,6 @@ public final class CraftRedstoneOre extends org.bukkit.craftbukkit.block.data.Cr
 
     @Override
     public void setLit(boolean lit) {
-        set(CraftRedstoneOre.LIT, lit);
+        set(CraftRedstoneOre.LIT, Boolean.valueOf(lit));
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftRedstoneTorch.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftRedstoneTorch.java
index cae7af49fec28beda14fd4ddfac29cb73033beec..12d4a258be0192c116bf4a7ae7ded7bd1beb84f9 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftRedstoneTorch.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftRedstoneTorch.java
@@ -24,6 +24,6 @@ public final class CraftRedstoneTorch extends org.bukkit.craftbukkit.block.data.
 
     @Override
     public void setLit(boolean lit) {
-        set(CraftRedstoneTorch.LIT, lit);
+        set(CraftRedstoneTorch.LIT, Boolean.valueOf(lit));
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftRedstoneTorchWall.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftRedstoneTorchWall.java
index 31eae2d4361852428709919e5370a22b74089a57..c1c9d3e805bcea9d3db29ffc319e426f316a4312 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftRedstoneTorchWall.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftRedstoneTorchWall.java
@@ -46,6 +46,6 @@ public final class CraftRedstoneTorchWall extends org.bukkit.craftbukkit.block.d
 
     @Override
     public void setLit(boolean lit) {
-        set(CraftRedstoneTorchWall.LIT, lit);
+        set(CraftRedstoneTorchWall.LIT, Boolean.valueOf(lit));
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftRedstoneWire.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftRedstoneWire.java
index 49d281d4f9b82d4543488d477501e0c9e903f001..472727a5830d3ad298828bcafe10f0984ece96b6 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftRedstoneWire.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftRedstoneWire.java
@@ -75,7 +75,7 @@ public final class CraftRedstoneWire extends org.bukkit.craftbukkit.block.data.C
 
     @Override
     public void setPower(int power) {
-        set(CraftRedstoneWire.POWER, power);
+        set(CraftRedstoneWire.POWER, Integer.valueOf(power));
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftReed.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftReed.java
index 2717d7ec59cdc1ca5d5eef56554821cf59b4254b..e8ee448926fbb9a80db61c149a4e5fc1fbba3b97 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftReed.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftReed.java
@@ -24,7 +24,7 @@ public final class CraftReed extends org.bukkit.craftbukkit.block.data.CraftBloc
 
     @Override
     public void setAge(int age) {
-        set(CraftReed.AGE, age);
+        set(CraftReed.AGE, Integer.valueOf(age));
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftRepeater.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftRepeater.java
index 11ff091a0227fcce4f70860fb5fca2973ca378f8..4647cf0985add37a4274bdb6f8ba4fbfad25d886 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftRepeater.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftRepeater.java
@@ -28,7 +28,7 @@ public final class CraftRepeater extends org.bukkit.craftbukkit.block.data.Craft
 
     @Override
     public void setDelay(int delay) {
-        set(CraftRepeater.DELAY, delay);
+        set(CraftRepeater.DELAY, Integer.valueOf(delay));
     }
 
     @Override
@@ -48,7 +48,7 @@ public final class CraftRepeater extends org.bukkit.craftbukkit.block.data.Craft
 
     @Override
     public void setLocked(boolean locked) {
-        set(CraftRepeater.LOCKED, locked);
+        set(CraftRepeater.LOCKED, Boolean.valueOf(locked));
     }
 
     // org.bukkit.craftbukkit.block.data.CraftDirectional
@@ -81,6 +81,6 @@ public final class CraftRepeater extends org.bukkit.craftbukkit.block.data.Craft
 
     @Override
     public void setPowered(boolean powered) {
-        set(CraftRepeater.POWERED, powered);
+        set(CraftRepeater.POWERED, Boolean.valueOf(powered));
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftRespawnAnchor.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftRespawnAnchor.java
index 4b57bce2aa474c776cb71325edb2ca7330b579c4..f651b81d86ecbd2178a86aba9007abb9a9b8b816 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftRespawnAnchor.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftRespawnAnchor.java
@@ -24,7 +24,7 @@ public final class CraftRespawnAnchor extends org.bukkit.craftbukkit.block.data.
 
     @Override
     public void setCharges(int charges) {
-        set(CraftRespawnAnchor.CHARGES, charges);
+        set(CraftRespawnAnchor.CHARGES, Integer.valueOf(charges));
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftSapling.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftSapling.java
index efe0db8b25a478b5de2803da5813538ab551ffdf..b07404641c77825512eccd314ed05e5ac873164c 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftSapling.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftSapling.java
@@ -24,7 +24,7 @@ public final class CraftSapling extends org.bukkit.craftbukkit.block.data.CraftB
 
     @Override
     public void setStage(int stage) {
-        set(CraftSapling.STAGE, stage);
+        set(CraftSapling.STAGE, Integer.valueOf(stage));
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftScaffolding.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftScaffolding.java
index 08f5bd05d6c979818759d6e26a8ca936a56955ab..6109b49606b0e23c5b55ef147645a6b21a34d2d8 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftScaffolding.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftScaffolding.java
@@ -25,7 +25,7 @@ public final class CraftScaffolding extends org.bukkit.craftbukkit.block.data.Cr
 
     @Override
     public void setBottom(boolean bottom) {
-        set(CraftScaffolding.BOTTOM, bottom);
+        set(CraftScaffolding.BOTTOM, Boolean.valueOf(bottom));
     }
 
     @Override
@@ -35,7 +35,7 @@ public final class CraftScaffolding extends org.bukkit.craftbukkit.block.data.Cr
 
     @Override
     public void setDistance(int distance) {
-        set(CraftScaffolding.DISTANCE, distance);
+        set(CraftScaffolding.DISTANCE, Integer.valueOf(distance));
     }
 
     @Override
@@ -54,6 +54,6 @@ public final class CraftScaffolding extends org.bukkit.craftbukkit.block.data.Cr
 
     @Override
     public void setWaterlogged(boolean waterlogged) {
-        set(CraftScaffolding.WATERLOGGED, waterlogged);
+        set(CraftScaffolding.WATERLOGGED, Boolean.valueOf(waterlogged));
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftSculkCatalyst.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftSculkCatalyst.java
index 9ca9b9a3c8af2800ba72864e601558717f627b7e..e5be97505a530df3fe7decc7da0da6d8b9422f0b 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftSculkCatalyst.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftSculkCatalyst.java
@@ -24,6 +24,6 @@ public final class CraftSculkCatalyst extends org.bukkit.craftbukkit.block.data.
 
     @Override
     public void setBloom(boolean bloom) {
-        set(CraftSculkCatalyst.BLOOM, bloom);
+        set(CraftSculkCatalyst.BLOOM, Boolean.valueOf(bloom));
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftSculkSensor.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftSculkSensor.java
index 8e56698de056942f2787842e74d067696724f4b4..8a99d525b9815f47feaa1d4781c202e475180e8f 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftSculkSensor.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftSculkSensor.java
@@ -41,7 +41,7 @@ public final class CraftSculkSensor extends org.bukkit.craftbukkit.block.data.Cr
 
     @Override
     public void setPower(int power) {
-        set(CraftSculkSensor.POWER, power);
+        set(CraftSculkSensor.POWER, Integer.valueOf(power));
     }
 
     @Override
@@ -60,6 +60,6 @@ public final class CraftSculkSensor extends org.bukkit.craftbukkit.block.data.Cr
 
     @Override
     public void setWaterlogged(boolean waterlogged) {
-        set(CraftSculkSensor.WATERLOGGED, waterlogged);
+        set(CraftSculkSensor.WATERLOGGED, Boolean.valueOf(waterlogged));
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftSculkShrieker.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftSculkShrieker.java
index 8e7f9bae668452c4d99dc38f06708986ca0915e1..66da8c9224b56ab32a486e962f39f37363f9a18c 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftSculkShrieker.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftSculkShrieker.java
@@ -25,7 +25,7 @@ public final class CraftSculkShrieker extends org.bukkit.craftbukkit.block.data.
 
     @Override
     public void setCanSummon(boolean can_summon) {
-        set(CraftSculkShrieker.CAN_SUMMON, can_summon);
+        set(CraftSculkShrieker.CAN_SUMMON, Boolean.valueOf(can_summon));
     }
 
     @Override
@@ -35,7 +35,7 @@ public final class CraftSculkShrieker extends org.bukkit.craftbukkit.block.data.
 
     @Override
     public void setShrieking(boolean shrieking) {
-        set(CraftSculkShrieker.SHRIEKING, shrieking);
+        set(CraftSculkShrieker.SHRIEKING, Boolean.valueOf(shrieking));
     }
 
     // org.bukkit.craftbukkit.block.data.CraftWaterlogged
@@ -49,6 +49,6 @@ public final class CraftSculkShrieker extends org.bukkit.craftbukkit.block.data.
 
     @Override
     public void setWaterlogged(boolean waterlogged) {
-        set(CraftSculkShrieker.WATERLOGGED, waterlogged);
+        set(CraftSculkShrieker.WATERLOGGED, Boolean.valueOf(waterlogged));
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftSculkVein.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftSculkVein.java
index 44ba6670234ed2d5b123810ddb4a394274a6637a..80b8cc45df0ed7e8d481c43f23d88cc20b095b2b 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftSculkVein.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftSculkVein.java
@@ -37,7 +37,7 @@ public final class CraftSculkVein extends org.bukkit.craftbukkit.block.data.Craf
         if (state == null) {
             throw new IllegalArgumentException("Non-allowed face " + face + ". Check MultipleFacing.getAllowedFaces.");
         }
-        set(state, has);
+        set(state, Boolean.valueOf(has));
     }
 
     @Override
@@ -77,6 +77,6 @@ public final class CraftSculkVein extends org.bukkit.craftbukkit.block.data.Craf
 
     @Override
     public void setWaterlogged(boolean waterlogged) {
-        set(CraftSculkVein.WATERLOGGED, waterlogged);
+        set(CraftSculkVein.WATERLOGGED, Boolean.valueOf(waterlogged));
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftSeaPickle.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftSeaPickle.java
index e1b9215497992e3bd09bcdc89bb82ba78ae60a9e..1559fdf50c204ab38274e75fb12fd37e1bb40084 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftSeaPickle.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftSeaPickle.java
@@ -24,7 +24,7 @@ public final class CraftSeaPickle extends org.bukkit.craftbukkit.block.data.Craf
 
     @Override
     public void setPickles(int pickles) {
-        set(CraftSeaPickle.PICKLES, pickles);
+        set(CraftSeaPickle.PICKLES, Integer.valueOf(pickles));
     }
 
     @Override
@@ -48,6 +48,6 @@ public final class CraftSeaPickle extends org.bukkit.craftbukkit.block.data.Craf
 
     @Override
     public void setWaterlogged(boolean waterlogged) {
-        set(CraftSeaPickle.WATERLOGGED, waterlogged);
+        set(CraftSeaPickle.WATERLOGGED, Boolean.valueOf(waterlogged));
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftSkull.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftSkull.java
index 7c7d9936a05b92b190731370631c6e6639a2321f..4f086dfe4e9345fa635928f30b05f2ce5d6ed357 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftSkull.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftSkull.java
@@ -116,6 +116,6 @@ public final class CraftSkull extends org.bukkit.craftbukkit.block.data.CraftBlo
             default:
                 throw new IllegalArgumentException("Illegal rotation " + rotation);
         }
-        set(CraftSkull.ROTATION, val);
+        set(CraftSkull.ROTATION, Integer.valueOf(val));
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftSkullPlayer.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftSkullPlayer.java
index f3b57ecdd19be76afb12e51546df70edd34e5746..b98307e4a2337baa2ea7710144a0e0b3cefd1299 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftSkullPlayer.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftSkullPlayer.java
@@ -116,6 +116,6 @@ public final class CraftSkullPlayer extends org.bukkit.craftbukkit.block.data.Cr
             default:
                 throw new IllegalArgumentException("Illegal rotation " + rotation);
         }
-        set(CraftSkullPlayer.ROTATION, val);
+        set(CraftSkullPlayer.ROTATION, Integer.valueOf(val));
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftSmallDripleaf.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftSmallDripleaf.java
index 2fc85bd25dbfc8f699f13b3e09bf089c6285df02..087c81ddbaee9977d96ebc72d7ee4dbb613a9257 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftSmallDripleaf.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftSmallDripleaf.java
@@ -60,6 +60,6 @@ public final class CraftSmallDripleaf extends org.bukkit.craftbukkit.block.data.
 
     @Override
     public void setWaterlogged(boolean waterlogged) {
-        set(CraftSmallDripleaf.WATERLOGGED, waterlogged);
+        set(CraftSmallDripleaf.WATERLOGGED, Boolean.valueOf(waterlogged));
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftSmoker.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftSmoker.java
index 05a0617c0f78cbf56e128d028f4ec7b29a1d35f7..dc0706f753152a5f50e1ae67a727e51fce5ffe8d 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftSmoker.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftSmoker.java
@@ -46,6 +46,6 @@ public final class CraftSmoker extends org.bukkit.craftbukkit.block.data.CraftBl
 
     @Override
     public void setLit(boolean lit) {
-        set(CraftSmoker.LIT, lit);
+        set(CraftSmoker.LIT, Boolean.valueOf(lit));
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftSnow.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftSnow.java
index f6aa5f851e1cb0bd618f2b6bee9511bdcbab38cd..f357dce627e09758a62872b145d03eec1a65f943 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftSnow.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftSnow.java
@@ -24,7 +24,7 @@ public final class CraftSnow extends org.bukkit.craftbukkit.block.data.CraftBloc
 
     @Override
     public void setLayers(int layers) {
-        set(CraftSnow.LAYERS, layers);
+        set(CraftSnow.LAYERS, Integer.valueOf(layers));
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftSoil.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftSoil.java
index 6390be5523351fc408c4912d0a54854a8584f773..6d595f25c47d17f4956062117f51d29d45c69b97 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftSoil.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftSoil.java
@@ -24,7 +24,7 @@ public final class CraftSoil extends org.bukkit.craftbukkit.block.data.CraftBloc
 
     @Override
     public void setMoisture(int moisture) {
-        set(CraftSoil.MOISTURE, moisture);
+        set(CraftSoil.MOISTURE, Integer.valueOf(moisture));
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftStainedGlassPane.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftStainedGlassPane.java
index a76910340cde1da706f2948ac1a08fe60a7ed46f..4d181725b8be4ebdea2702a23af0d581f4442149 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftStainedGlassPane.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftStainedGlassPane.java
@@ -37,7 +37,7 @@ public final class CraftStainedGlassPane extends org.bukkit.craftbukkit.block.da
         if (state == null) {
             throw new IllegalArgumentException("Non-allowed face " + face + ". Check MultipleFacing.getAllowedFaces.");
         }
-        set(state, has);
+        set(state, Boolean.valueOf(has));
     }
 
     @Override
@@ -77,6 +77,6 @@ public final class CraftStainedGlassPane extends org.bukkit.craftbukkit.block.da
 
     @Override
     public void setWaterlogged(boolean waterlogged) {
-        set(CraftStainedGlassPane.WATERLOGGED, waterlogged);
+        set(CraftStainedGlassPane.WATERLOGGED, Boolean.valueOf(waterlogged));
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftStairs.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftStairs.java
index 43707c1dbc5d7add771a33c448d2333186543592..c5ab7faa19172e6f1dc982aed9fd615666ceae8d 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftStairs.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftStairs.java
@@ -74,6 +74,6 @@ public final class CraftStairs extends org.bukkit.craftbukkit.block.data.CraftBl
 
     @Override
     public void setWaterlogged(boolean waterlogged) {
-        set(CraftStairs.WATERLOGGED, waterlogged);
+        set(CraftStairs.WATERLOGGED, Boolean.valueOf(waterlogged));
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftStem.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftStem.java
index 94279586df82425b6a7d67d582618edf854e157a..a38e4424d2336741dc9bfa0c6004c760e76bd46b 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftStem.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftStem.java
@@ -24,7 +24,7 @@ public final class CraftStem extends org.bukkit.craftbukkit.block.data.CraftBloc
 
     @Override
     public void setAge(int age) {
-        set(CraftStem.AGE, age);
+        set(CraftStem.AGE, Integer.valueOf(age));
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftStepAbstract.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftStepAbstract.java
index 7c2274ea4fdb97be6aba38fab8ce609af21c6edd..ab9b9017e0b0afae4891aabc176a92e8b38c0afd 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftStepAbstract.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftStepAbstract.java
@@ -41,6 +41,6 @@ public final class CraftStepAbstract extends org.bukkit.craftbukkit.block.data.C
 
     @Override
     public void setWaterlogged(boolean waterlogged) {
-        set(CraftStepAbstract.WATERLOGGED, waterlogged);
+        set(CraftStepAbstract.WATERLOGGED, Boolean.valueOf(waterlogged));
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftSweetBerryBush.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftSweetBerryBush.java
index 49ae4323d771e665b90666c9155ae38e34c98e49..12e281a4a5c076eb7afee89558f8c72fb776571f 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftSweetBerryBush.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftSweetBerryBush.java
@@ -24,7 +24,7 @@ public final class CraftSweetBerryBush extends org.bukkit.craftbukkit.block.data
 
     @Override
     public void setAge(int age) {
-        set(CraftSweetBerryBush.AGE, age);
+        set(CraftSweetBerryBush.AGE, Integer.valueOf(age));
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftTNT.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftTNT.java
index b4cf8bb478cc81f78b23d8ae6a09e292b7996886..df08a2afefdb880b59e113332dcc200c382e29c1 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftTNT.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftTNT.java
@@ -24,6 +24,6 @@ public final class CraftTNT extends org.bukkit.craftbukkit.block.data.CraftBlock
 
     @Override
     public void setUnstable(boolean unstable) {
-        set(CraftTNT.UNSTABLE, unstable);
+        set(CraftTNT.UNSTABLE, Boolean.valueOf(unstable));
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftTarget.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftTarget.java
index c214505ce2d2e22d559cd09a10bc526943f1e369..7a58c988cb539f8cbddf5f7daacaa35993136913 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftTarget.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftTarget.java
@@ -24,7 +24,7 @@ public final class CraftTarget extends org.bukkit.craftbukkit.block.data.CraftBl
 
     @Override
     public void setPower(int power) {
-        set(CraftTarget.POWER, power);
+        set(CraftTarget.POWER, Integer.valueOf(power));
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftTrapdoor.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftTrapdoor.java
index ae74244cdc7710e65c84d4af1e4806c1167d8028..f622b73d62294e058b0ccbb92ee9d28526412be0 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftTrapdoor.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftTrapdoor.java
@@ -60,7 +60,7 @@ public final class CraftTrapdoor extends org.bukkit.craftbukkit.block.data.Craft
 
     @Override
     public void setOpen(boolean open) {
-        set(CraftTrapdoor.OPEN, open);
+        set(CraftTrapdoor.OPEN, Boolean.valueOf(open));
     }
 
     // org.bukkit.craftbukkit.block.data.CraftPowerable
@@ -74,7 +74,7 @@ public final class CraftTrapdoor extends org.bukkit.craftbukkit.block.data.Craft
 
     @Override
     public void setPowered(boolean powered) {
-        set(CraftTrapdoor.POWERED, powered);
+        set(CraftTrapdoor.POWERED, Boolean.valueOf(powered));
     }
 
     // org.bukkit.craftbukkit.block.data.CraftWaterlogged
@@ -88,6 +88,6 @@ public final class CraftTrapdoor extends org.bukkit.craftbukkit.block.data.Craft
 
     @Override
     public void setWaterlogged(boolean waterlogged) {
-        set(CraftTrapdoor.WATERLOGGED, waterlogged);
+        set(CraftTrapdoor.WATERLOGGED, Boolean.valueOf(waterlogged));
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftTripwire.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftTripwire.java
index a109b1b7989510253a2c5558d763f72686fe1236..a7d6e378b9c25180318c086dab0a947572ff6695 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftTripwire.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftTripwire.java
@@ -27,7 +27,7 @@ public final class CraftTripwire extends org.bukkit.craftbukkit.block.data.Craft
 
     @Override
     public void setDisarmed(boolean disarmed) {
-        set(CraftTripwire.DISARMED, disarmed);
+        set(CraftTripwire.DISARMED, Boolean.valueOf(disarmed));
     }
 
     // org.bukkit.craftbukkit.block.data.CraftAttachable
@@ -41,7 +41,7 @@ public final class CraftTripwire extends org.bukkit.craftbukkit.block.data.Craft
 
     @Override
     public void setAttached(boolean attached) {
-        set(CraftTripwire.ATTACHED, attached);
+        set(CraftTripwire.ATTACHED, Boolean.valueOf(attached));
     }
 
     // org.bukkit.craftbukkit.block.data.CraftMultipleFacing
@@ -65,7 +65,7 @@ public final class CraftTripwire extends org.bukkit.craftbukkit.block.data.Craft
         if (state == null) {
             throw new IllegalArgumentException("Non-allowed face " + face + ". Check MultipleFacing.getAllowedFaces.");
         }
-        set(state, has);
+        set(state, Boolean.valueOf(has));
     }
 
     @Override
@@ -105,6 +105,6 @@ public final class CraftTripwire extends org.bukkit.craftbukkit.block.data.Craft
 
     @Override
     public void setPowered(boolean powered) {
-        set(CraftTripwire.POWERED, powered);
+        set(CraftTripwire.POWERED, Boolean.valueOf(powered));
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftTripwireHook.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftTripwireHook.java
index c604dd209f08a495dc2e62a6d144f2a856dfd15f..29679b75c0abae91324357512bd596c57ca313d0 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftTripwireHook.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftTripwireHook.java
@@ -27,7 +27,7 @@ public final class CraftTripwireHook extends org.bukkit.craftbukkit.block.data.C
 
     @Override
     public void setAttached(boolean attached) {
-        set(CraftTripwireHook.ATTACHED, attached);
+        set(CraftTripwireHook.ATTACHED, Boolean.valueOf(attached));
     }
 
     // org.bukkit.craftbukkit.block.data.CraftDirectional
@@ -60,6 +60,6 @@ public final class CraftTripwireHook extends org.bukkit.craftbukkit.block.data.C
 
     @Override
     public void setPowered(boolean powered) {
-        set(CraftTripwireHook.POWERED, powered);
+        set(CraftTripwireHook.POWERED, Boolean.valueOf(powered));
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftTurtleEgg.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftTurtleEgg.java
index e14bd71b8861490310a8be030f6d6404f0568633..9e1581e0d8c5adbde2d42dcc58ece0dcddfa33f9 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftTurtleEgg.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftTurtleEgg.java
@@ -25,7 +25,7 @@ public final class CraftTurtleEgg extends org.bukkit.craftbukkit.block.data.Craf
 
     @Override
     public void setEggs(int eggs) {
-        set(CraftTurtleEgg.EGGS, eggs);
+        set(CraftTurtleEgg.EGGS, Integer.valueOf(eggs));
     }
 
     @Override
@@ -45,7 +45,7 @@ public final class CraftTurtleEgg extends org.bukkit.craftbukkit.block.data.Craf
 
     @Override
     public void setHatch(int hatch) {
-        set(CraftTurtleEgg.HATCH, hatch);
+        set(CraftTurtleEgg.HATCH, Integer.valueOf(hatch));
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftTwistingVines.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftTwistingVines.java
index 017da03ea9486a46c9f75744f800c347d2ff3040..11d2cb4f1d56a1411af1bf1512a59bf2a669033e 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftTwistingVines.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftTwistingVines.java
@@ -24,7 +24,7 @@ public final class CraftTwistingVines extends org.bukkit.craftbukkit.block.data.
 
     @Override
     public void setAge(int age) {
-        set(CraftTwistingVines.AGE, age);
+        set(CraftTwistingVines.AGE, Integer.valueOf(age));
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftVine.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftVine.java
index 36af8ea8650dad6e462e79d2aae1e28a4a2bb89d..12f4798e673d58c95808928d85a56d527ea4561c 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftVine.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftVine.java
@@ -37,7 +37,7 @@ public final class CraftVine extends org.bukkit.craftbukkit.block.data.CraftBloc
         if (state == null) {
             throw new IllegalArgumentException("Non-allowed face " + face + ". Check MultipleFacing.getAllowedFaces.");
         }
-        set(state, has);
+        set(state, Boolean.valueOf(has));
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftWallSign.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftWallSign.java
index 9689d1041cc5672d0461d3c3e9f2ee23e00f844d..1138958e3c0e95769ba8575ec3a85479891ab13e 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftWallSign.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftWallSign.java
@@ -46,6 +46,6 @@ public final class CraftWallSign extends org.bukkit.craftbukkit.block.data.Craft
 
     @Override
     public void setWaterlogged(boolean waterlogged) {
-        set(CraftWallSign.WATERLOGGED, waterlogged);
+        set(CraftWallSign.WATERLOGGED, Boolean.valueOf(waterlogged));
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftWeatheringCopperSlab.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftWeatheringCopperSlab.java
index e2ba2981c6d6457ce239882535d28a524cd4d7a2..e7894e15d8ceb07f6149f73c0e45d7ba2b81a70b 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftWeatheringCopperSlab.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftWeatheringCopperSlab.java
@@ -41,6 +41,6 @@ public final class CraftWeatheringCopperSlab extends org.bukkit.craftbukkit.bloc
 
     @Override
     public void setWaterlogged(boolean waterlogged) {
-        set(CraftWeatheringCopperSlab.WATERLOGGED, waterlogged);
+        set(CraftWeatheringCopperSlab.WATERLOGGED, Boolean.valueOf(waterlogged));
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftWeatheringCopperStair.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftWeatheringCopperStair.java
index b37ccbe7acc4a24d4170fe973039aa05487c8e9a..d0095351098c08fb27f85bb3d91d7275d1bd863d 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftWeatheringCopperStair.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftWeatheringCopperStair.java
@@ -74,6 +74,6 @@ public final class CraftWeatheringCopperStair extends org.bukkit.craftbukkit.blo
 
     @Override
     public void setWaterlogged(boolean waterlogged) {
-        set(CraftWeatheringCopperStair.WATERLOGGED, waterlogged);
+        set(CraftWeatheringCopperStair.WATERLOGGED, Boolean.valueOf(waterlogged));
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftWeepingVines.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftWeepingVines.java
index 0f82a234e7878e3eabd35306867651305d213be6..8bbb79db910133d2f2de49c134edba2805e3f50f 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftWeepingVines.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftWeepingVines.java
@@ -24,7 +24,7 @@ public final class CraftWeepingVines extends org.bukkit.craftbukkit.block.data.C
 
     @Override
     public void setAge(int age) {
-        set(CraftWeepingVines.AGE, age);
+        set(CraftWeepingVines.AGE, Integer.valueOf(age));
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftWitherSkull.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftWitherSkull.java
index efeb4be543f812c1f3108182f2768d0b83132182..01807a2944a074d5910a065565cd3c0e9d66a7de 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftWitherSkull.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftWitherSkull.java
@@ -116,6 +116,6 @@ public final class CraftWitherSkull extends org.bukkit.craftbukkit.block.data.Cr
             default:
                 throw new IllegalArgumentException("Illegal rotation " + rotation);
         }
-        set(CraftWitherSkull.ROTATION, val);
+        set(CraftWitherSkull.ROTATION, Integer.valueOf(val));
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/boss/CraftBossBar.java b/src/main/java/org/bukkit/craftbukkit/boss/CraftBossBar.java
index b295c96eeb66fba29148eee79b17eeeab4ad051d..d92d86dbb4e20d344902b2fc8f64ee0455da8a0e 100644
--- a/src/main/java/org/bukkit/craftbukkit/boss/CraftBossBar.java
+++ b/src/main/java/org/bukkit/craftbukkit/boss/CraftBossBar.java
@@ -135,7 +135,7 @@ public class CraftBossBar implements BossBar {
     public void addFlag(BarFlag flag) {
         FlagContainer flagContainer = this.flags.get(flag);
         if (flagContainer != null) {
-            flagContainer.set.accept(true);
+            flagContainer.set.accept(Boolean.TRUE);
         }
     }
 
@@ -143,7 +143,7 @@ public class CraftBossBar implements BossBar {
     public void removeFlag(BarFlag flag) {
         FlagContainer flagContainer = this.flags.get(flag);
         if (flagContainer != null) {
-            flagContainer.set.accept(false);
+            flagContainer.set.accept(Boolean.FALSE);
         }
     }
 
@@ -158,7 +158,7 @@ public class CraftBossBar implements BossBar {
 
     @Override
     public void setProgress(double progress) {
-        Preconditions.checkArgument(progress >= 0.0 && progress <= 1.0, "Progress must be between 0.0 and 1.0 (%s)", progress);
+        Preconditions.checkArgument(progress >= 0.0 && progress <= 1.0, "Progress must be between 0.0 and 1.0 (%s)", Double.valueOf(progress));
         this.handle.setProgress((float) progress);
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java
index 4c7d9c4b5406e32f0368bcbaf677be20c20cd58d..b7f212996de59620573c24b052407a449a62a64d 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java
@@ -1281,7 +1281,7 @@ public abstract class CraftEntity implements org.bukkit.entity.Entity {
             this instanceof CraftPlayer ? ca.spottedleaf.concurrentutil.executor.standard.PrioritisedExecutor.Priority.HIGHER : ca.spottedleaf.concurrentutil.executor.standard.PrioritisedExecutor.Priority.NORMAL, (list) -> {
             net.minecraft.server.level.ServerChunkCache chunkProviderServer = world.getChunkSource();
             for (net.minecraft.world.level.chunk.ChunkAccess chunk : list) {
-                chunkProviderServer.addTicketAtLevel(net.minecraft.server.level.TicketType.POST_TELEPORT, chunk.getPos(), 33, CraftEntity.this.getEntityId());
+                chunkProviderServer.addTicketAtLevel(net.minecraft.server.level.TicketType.POST_TELEPORT, chunk.getPos(), 33, Integer.valueOf(CraftEntity.this.getEntityId()));
             }
             net.minecraft.server.MinecraftServer.getServer().scheduleOnMain(() -> {
                 try {
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftFirework.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftFirework.java
index 78de5b7f731f215a8b0b635f6a1f10f9ef3e9cbd..1f90291c806d2a1c6afc03d7df4d98b6b8b35e76 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftFirework.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftFirework.java
@@ -138,7 +138,7 @@ public class CraftFirework extends CraftProjectile implements Firework {
 
     @Override
     public void setShotAtAngle(boolean shotAtAngle) {
-        this.getHandle().getEntityData().set(FireworkRocketEntity.DATA_SHOT_AT_ANGLE, shotAtAngle);
+        this.getHandle().getEntityData().set(FireworkRocketEntity.DATA_SHOT_AT_ANGLE, Boolean.valueOf(shotAtAngle));
     }
 
     // Paper start
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftFishHook.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftFishHook.java
index ac22d1236f069675bbaeb40cc988751a8cc47e6a..ff5e25248ac74da3c360eef7dfb3b4605dcbc270 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftFishHook.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftFishHook.java
@@ -104,7 +104,7 @@ public class CraftFishHook extends CraftProjectile implements FishHook {
         FishingHook hook = this.getHandle();
 
         hook.hookedIn = (entity != null) ? ((CraftEntity) entity).getHandle() : null;
-        hook.getEntityData().set(FishingHook.DATA_HOOKED_ENTITY, hook.hookedIn != null ? hook.hookedIn.getId() + 1 : 0);
+        hook.getEntityData().set(FishingHook.DATA_HOOKED_ENTITY, Integer.valueOf(hook.hookedIn != null ? hook.hookedIn.getId() + 1 : 0));
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftGoat.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftGoat.java
index e0e96b845a903d457aa822c94f550ae622fbc18f..7c07dda7e48fa44006aa6147ef52cfcc81afe9f3 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftGoat.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftGoat.java
@@ -34,7 +34,7 @@ public class CraftGoat extends CraftAnimals implements Goat {
 
     @Override
     public void setLeftHorn(boolean hasHorn) {
-        this.getHandle().getEntityData().set(net.minecraft.world.entity.animal.goat.Goat.DATA_HAS_LEFT_HORN, hasHorn);
+        this.getHandle().getEntityData().set(net.minecraft.world.entity.animal.goat.Goat.DATA_HAS_LEFT_HORN, Boolean.valueOf(hasHorn));
     }
 
     @Override
@@ -44,7 +44,7 @@ public class CraftGoat extends CraftAnimals implements Goat {
 
     @Override
     public void setRightHorn(boolean hasHorn) {
-        this.getHandle().getEntityData().set(net.minecraft.world.entity.animal.goat.Goat.DATA_HAS_RIGHT_HORN, hasHorn);
+        this.getHandle().getEntityData().set(net.minecraft.world.entity.animal.goat.Goat.DATA_HAS_RIGHT_HORN, Boolean.valueOf(hasHorn));
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftHumanEntity.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftHumanEntity.java
index 1b04502e9583fcaf8f42fd86d4245116d3bb6bcb..912c5ed715cdc28e6d01b1958bf0b959b7ed9aa2 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftHumanEntity.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftHumanEntity.java
@@ -182,7 +182,7 @@ public class CraftHumanEntity extends CraftLivingEntity implements HumanEntity {
         }
 
         // From BlockBed
-        iblockdata = (BlockState) iblockdata.setValue(BedBlock.OCCUPIED, true);
+        iblockdata = (BlockState) iblockdata.setValue(BedBlock.OCCUPIED, Boolean.TRUE);
         this.getHandle().level.setBlock(blockposition, iblockdata, 4);
 
         return true;
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftLivingEntity.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftLivingEntity.java
index 0680fff789a3cba9932131f6fb80692b0019a1db..6b6c1ea8842160843a2c4b28b01c447bd73a1539 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftLivingEntity.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftLivingEntity.java
@@ -112,7 +112,7 @@ public class CraftLivingEntity extends CraftEntity implements LivingEntity {
             // Paper - Be more informative
             throw new IllegalArgumentException("Health must be between 0 and " + getMaxHealth() + ", but was " + health
                 + ". (attribute base value: " + this.getHandle().getAttribute(Attributes.MAX_HEALTH).getBaseValue()
-                + (this instanceof CraftPlayer ? ", player: " + this.getName() + ')' : ')'));
+                + (this instanceof CraftPlayer ? ", player: " + this.getName() + ')' : Character.valueOf(')')));
         }
 
         // during world generation, we don't want to run logic for dropping items and xp
@@ -335,7 +335,7 @@ public class CraftLivingEntity extends CraftEntity implements LivingEntity {
     @Override
     public void setArrowsInBody(int count) {
         Preconditions.checkArgument(count >= 0, "New arrow amount must be >= 0");
-        this.getHandle().getEntityData().set(net.minecraft.world.entity.LivingEntity.DATA_ARROW_COUNT_ID, count);
+        this.getHandle().getEntityData().set(net.minecraft.world.entity.LivingEntity.DATA_ARROW_COUNT_ID, Integer.valueOf(count));
     }
     // Paper Start - Bee Stinger API
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
index 42b2d495dd340a6eb6b6c063675ee1ff93a11be5..600f6b8ba496bd93baf0a415cdf02fcd8d4bdfa5 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
@@ -628,7 +628,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
         if (com.destroystokyo.paper.ClientOption.SKIN_PARTS == type) {
             return type.getType().cast(new com.destroystokyo.paper.PaperSkinParts(getHandle().getEntityData().get(net.minecraft.world.entity.player.Player.DATA_PLAYER_MODE_CUSTOMISATION)));
         } else if (com.destroystokyo.paper.ClientOption.CHAT_COLORS_ENABLED == type) {
-            return type.getType().cast(getHandle().canChatInColor());
+            return type.getType().cast(Boolean.valueOf(getHandle().canChatInColor()));
         } else if (com.destroystokyo.paper.ClientOption.CHAT_VISIBILITY == type) {
             return type.getType().cast(getHandle().getChatVisibility() == null ? com.destroystokyo.paper.ClientOption.ChatVisibility.UNKNOWN : com.destroystokyo.paper.ClientOption.ChatVisibility.valueOf(getHandle().getChatVisibility().name()));
         } else if (com.destroystokyo.paper.ClientOption.LOCALE == type) {
@@ -636,11 +636,11 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
         } else if (com.destroystokyo.paper.ClientOption.MAIN_HAND == type) {
             return type.getType().cast(getMainHand());
         } else if (com.destroystokyo.paper.ClientOption.VIEW_DISTANCE == type) {
-            return type.getType().cast(getClientViewDistance());
+            return type.getType().cast(Integer.valueOf(getClientViewDistance()));
         } else if (com.destroystokyo.paper.ClientOption.ALLOW_SERVER_LISTINGS == type) {
-            return type.getType().cast(getHandle().allowsListing());
+            return type.getType().cast(Boolean.valueOf(getHandle().allowsListing()));
         } else if (com.destroystokyo.paper.ClientOption.TEXT_FILTERING_ENABLED == type) {
-            return type.getType().cast(getHandle().isTextFilteringEnabled());
+            return type.getType().cast(Boolean.valueOf(getHandle().isTextFilteringEnabled()));
         }
         throw new RuntimeException("Unknown settings type");
     }
@@ -1626,7 +1626,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
 
     @Override
     public void setExp(float exp) {
-        Preconditions.checkArgument(exp >= 0.0 && exp <= 1.0, "Experience progress must be between 0.0 and 1.0 (%s)", exp);
+        Preconditions.checkArgument(exp >= 0.0 && exp <= 1.0, "Experience progress must be between 0.0 and 1.0 (%s)", Float.valueOf(exp));
         this.getHandle().experienceProgress = exp;
         this.getHandle().lastSentExp = -1;
     }
@@ -1661,7 +1661,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
 
     @Override
     public void sendExperienceChange(float progress, int level) {
-        Preconditions.checkArgument(progress >= 0.0 && progress <= 1.0, "Experience progress must be between 0.0 and 1.0 (%s)", progress);
+        Preconditions.checkArgument(progress >= 0.0 && progress <= 1.0, "Experience progress must be between 0.0 and 1.0 (%s)", Float.valueOf(progress));
         Preconditions.checkArgument(level >= 0, "Experience level must not be negative (%s)", level);
 
         if (this.getHandle().connection == null) {
@@ -2310,7 +2310,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
                 this.sendHealthUpdate();
             }
         }
-        this.getHandle().getEntityData().set(net.minecraft.world.entity.LivingEntity.DATA_HEALTH_ID, (float) this.getScaledHealth());
+        this.getHandle().getEntityData().set(net.minecraft.world.entity.LivingEntity.DATA_HEALTH_ID, Float.valueOf((float) this.getScaledHealth()));
 
         this.getHandle().maxHealthCache = getMaxHealth();
     }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftShulker.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftShulker.java
index 7ad8dbf1def31c8ed52139515992df1433e29c7d..c0fa50bbad700de6a3e8237bc775137091a81c2e 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftShulker.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftShulker.java
@@ -39,7 +39,7 @@ public class CraftShulker extends CraftGolem implements Shulker {
 
     @Override
     public void setColor(@Nullable DyeColor color) {
-        this.getHandle().getEntityData().set(net.minecraft.world.entity.monster.Shulker.DATA_COLOR_ID, (color == null) ? 16 : color.getWoolData());
+        this.getHandle().getEntityData().set(net.minecraft.world.entity.monster.Shulker.DATA_COLOR_ID, Byte.valueOf((color == null) ? 16 : color.getWoolData()));
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftSkeleton.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftSkeleton.java
index 77c54298cb5f71a60a07be66a9aa378c4181d389..d4b6b2a4f049b7ad88823a960daa2dc61aa70193 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftSkeleton.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftSkeleton.java
@@ -28,7 +28,7 @@ public class CraftSkeleton extends CraftAbstractSkeleton implements Skeleton {
     public void setConversionTime(int time) {
         if (time < 0) {
             this.getHandle().conversionTime = -1;
-            this.getHandle().getEntityData().set(net.minecraft.world.entity.monster.Skeleton.DATA_STRAY_CONVERSION_ID, false);
+            this.getHandle().getEntityData().set(net.minecraft.world.entity.monster.Skeleton.DATA_STRAY_CONVERSION_ID, Boolean.FALSE);
         } else {
             this.getHandle().startFreezeConversion(time);
         }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftTropicalFish.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftTropicalFish.java
index 6648193b74dd6312dbc8d24bd15bb3581a734cab..5a007c951e271d85082ebcd1c0b2814a67c6d4f3 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftTropicalFish.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftTropicalFish.java
@@ -84,12 +84,12 @@ public class CraftTropicalFish extends io.papermc.paper.entity.PaperSchoolableFi
 
         static {
             for (CraftPattern type : values()) {
-                BY_DATA.put(type.getDataValue(), Pattern.values()[type.ordinal()]);
+                BY_DATA.put(Integer.valueOf(type.getDataValue()), Pattern.values()[type.ordinal()]);
             }
         }
 
         public static Pattern fromData(int data) {
-            return BY_DATA.get(data);
+            return BY_DATA.get(Integer.valueOf(data));
         }
 
         private CraftPattern(int variant, boolean large) {
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftVillagerZombie.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftVillagerZombie.java
index 560148dffce5816dcc9885107b5a13c441aec3a8..5ff330206e08f22aba009b8c169c5cee058ea775 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftVillagerZombie.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftVillagerZombie.java
@@ -84,7 +84,7 @@ public class CraftVillagerZombie extends CraftZombie implements ZombieVillager {
     // Paper stop - missing entity behaviour api - converting without entity event
         if (time < 0) {
             this.getHandle().villagerConversionTime = -1;
-            this.getHandle().getEntityData().set(net.minecraft.world.entity.monster.ZombieVillager.DATA_CONVERTING_ID, false);
+            this.getHandle().getEntityData().set(net.minecraft.world.entity.monster.ZombieVillager.DATA_CONVERTING_ID, Boolean.FALSE);
             this.getHandle().conversionStarter = null;
             this.getHandle().removeEffect(MobEffects.DAMAGE_BOOST, org.bukkit.event.entity.EntityPotionEffectEvent.Cause.CONVERSION);
         } else {
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftZombie.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftZombie.java
index 9c9618305701534568ff452dc55b1f4f19153624..3de1a22803165e06e4c0500128b93f13d11d87a3 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftZombie.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftZombie.java
@@ -77,7 +77,7 @@ public class CraftZombie extends CraftMonster implements Zombie {
     public void setConversionTime(int time) {
         if (time < 0) {
             this.getHandle().conversionTime = -1;
-            this.getHandle().getEntityData().set(net.minecraft.world.entity.monster.Zombie.DATA_DROWNED_CONVERSION_ID, false);
+            this.getHandle().getEntityData().set(net.minecraft.world.entity.monster.Zombie.DATA_DROWNED_CONVERSION_ID, Boolean.FALSE);
         } else {
             this.getHandle().startUnderWaterConversion(time);
         }
diff --git a/src/main/java/org/bukkit/craftbukkit/event/CraftEventFactory.java b/src/main/java/org/bukkit/craftbukkit/event/CraftEventFactory.java
index 5fbff0b13feb1c0fd819d3cb127c8458752b3148..28e4ac19b2b25bd127e056dbfbd91de88356cf24 100644
--- a/src/main/java/org/bukkit/craftbukkit/event/CraftEventFactory.java
+++ b/src/main/java/org/bukkit/craftbukkit/event/CraftEventFactory.java
@@ -1164,28 +1164,28 @@ public class CraftEventFactory {
         return event;
     }
 
-    private static final Function<? super Double, Double> ZERO = Functions.constant(-0.0);
+    private static final Function<? super Double, Double> ZERO = Functions.constant(Double.valueOf(-0.0));
 
     public static @NotNull EntityDamageEvent handleLivingEntityDamageEvent(Entity damagee, @NotNull DamageSource source, double rawDamage, double hardHatModifier, double blockingModifier, double armorModifier, double resistanceModifier, double magicModifier, double absorptionModifier, Function<Double, Double> hardHat, Function<Double, Double> blocking, Function<Double, Double> armor, Function<Double, Double> resistance, Function<Double, Double> magic, Function<Double, Double> absorption) {
         Map<DamageModifier, Double> modifiers = new EnumMap<DamageModifier, Double>(DamageModifier.class);
         Map<DamageModifier, Function<? super Double, Double>> modifierFunctions = new EnumMap<DamageModifier, Function<? super Double, Double>>(DamageModifier.class);
-        modifiers.put(DamageModifier.BASE, rawDamage);
+        modifiers.put(DamageModifier.BASE, Double.valueOf(rawDamage));
         modifierFunctions.put(DamageModifier.BASE, ZERO);
         if ("fallingBlock".equals(source.msgId) || "anvil".equals(source.msgId)) {
-            modifiers.put(DamageModifier.HARD_HAT, hardHatModifier);
+            modifiers.put(DamageModifier.HARD_HAT, Double.valueOf(hardHatModifier));
             modifierFunctions.put(DamageModifier.HARD_HAT, hardHat);
         }
         if (damagee instanceof net.minecraft.world.entity.player.Player) {
-            modifiers.put(DamageModifier.BLOCKING, blockingModifier);
+            modifiers.put(DamageModifier.BLOCKING, Double.valueOf(blockingModifier));
             modifierFunctions.put(DamageModifier.BLOCKING, blocking);
         }
-        modifiers.put(DamageModifier.ARMOR, armorModifier);
+        modifiers.put(DamageModifier.ARMOR, Double.valueOf(armorModifier));
         modifierFunctions.put(DamageModifier.ARMOR, armor);
-        modifiers.put(DamageModifier.RESISTANCE, resistanceModifier);
+        modifiers.put(DamageModifier.RESISTANCE, Double.valueOf(resistanceModifier));
         modifierFunctions.put(DamageModifier.RESISTANCE, resistance);
-        modifiers.put(DamageModifier.MAGIC, magicModifier);
+        modifiers.put(DamageModifier.MAGIC, Double.valueOf(magicModifier));
         modifierFunctions.put(DamageModifier.MAGIC, magic);
-        modifiers.put(DamageModifier.ABSORPTION, absorptionModifier);
+        modifiers.put(DamageModifier.ABSORPTION, Double.valueOf(absorptionModifier));
         modifierFunctions.put(DamageModifier.ABSORPTION, absorption);
         return CraftEventFactory.handleEntityDamageEvent(damagee, source, modifiers, modifierFunctions);
     }
@@ -1203,7 +1203,7 @@ public class CraftEventFactory {
         final EnumMap<DamageModifier, Double> modifiers = new EnumMap<DamageModifier, Double>(DamageModifier.class);
         final EnumMap<DamageModifier, Function<? super Double, Double>> functions = new EnumMap(DamageModifier.class);
 
-        modifiers.put(DamageModifier.BASE, damage);
+        modifiers.put(DamageModifier.BASE, Double.valueOf(damage));
         functions.put(DamageModifier.BASE, ZERO);
 
         final EntityDamageEvent event = CraftEventFactory.handleEntityDamageEvent(entity, source, modifiers, functions, cancelled);
diff --git a/src/main/java/org/bukkit/craftbukkit/generator/CraftLimitedRegion.java b/src/main/java/org/bukkit/craftbukkit/generator/CraftLimitedRegion.java
index cda544cf23593e5ec4115217bb95f9648a17e178..e7769d411d8cabc63fafc1470da52b20e3c98aea 100644
--- a/src/main/java/org/bukkit/craftbukkit/generator/CraftLimitedRegion.java
+++ b/src/main/java/org/bukkit/craftbukkit/generator/CraftLimitedRegion.java
@@ -164,58 +164,58 @@ public class CraftLimitedRegion extends CraftRegionAccessor implements LimitedRe
 
     @Override
     public @NotNull Biome getBiome(int x, int y, int z) {
-        Preconditions.checkArgument(this.isInRegion(x, y, z), "Coordinates %s, %s, %s are not in the region", x, y, z);
+        Preconditions.checkArgument(this.isInRegion(x, y, z), "Coordinates %s, %s, %s are not in the region", Integer.valueOf(x), Integer.valueOf(y), Integer.valueOf(z));
         return super.getBiome(x, y, z);
     }
 
     // Paper start
     @Override
     public @NotNull Biome getComputedBiome(int x, int y, int z) {
-        Preconditions.checkArgument(this.isInRegion(x, y, z), "Coordinates %s, %s, %s are not in the region", x, y, z);
+        Preconditions.checkArgument(this.isInRegion(x, y, z), "Coordinates %s, %s, %s are not in the region", Integer.valueOf(x), Integer.valueOf(y), Integer.valueOf(z));
         return super.getComputedBiome(x, y, z);
     }
     // Paper end
 
     @Override
     public void setBiome(int x, int y, int z, @NotNull Holder<net.minecraft.world.level.biome.Biome> biomeBase) {
-        Preconditions.checkArgument(this.isInRegion(x, y, z), "Coordinates %s, %s, %s are not in the region", x, y, z);
+        Preconditions.checkArgument(this.isInRegion(x, y, z), "Coordinates %s, %s, %s are not in the region", Integer.valueOf(x), Integer.valueOf(y), Integer.valueOf(z));
         ChunkAccess chunk = this.getHandle().getChunk(x >> 4, z >> 4, ChunkStatus.EMPTY);
         chunk.setBiome(x >> 2, y >> 2, z >> 2, biomeBase);
     }
 
     @Override
     public @NotNull BlockState getBlockState(int x, int y, int z) {
-        Preconditions.checkArgument(this.isInRegion(x, y, z), "Coordinates %s, %s, %s are not in the region", x, y, z);
+        Preconditions.checkArgument(this.isInRegion(x, y, z), "Coordinates %s, %s, %s are not in the region", Integer.valueOf(x), Integer.valueOf(y), Integer.valueOf(z));
         return super.getBlockState(x, y, z);
     }
 
     @Override
     public @NotNull BlockData getBlockData(int x, int y, int z) {
-        Preconditions.checkArgument(this.isInRegion(x, y, z), "Coordinates %s, %s, %s are not in the region", x, y, z);
+        Preconditions.checkArgument(this.isInRegion(x, y, z), "Coordinates %s, %s, %s are not in the region", Integer.valueOf(x), Integer.valueOf(y), Integer.valueOf(z));
         return super.getBlockData(x, y, z);
     }
 
     @Override
     public @NotNull Material getType(int x, int y, int z) {
-        Preconditions.checkArgument(this.isInRegion(x, y, z), "Coordinates %s, %s, %s are not in the region", x, y, z);
+        Preconditions.checkArgument(this.isInRegion(x, y, z), "Coordinates %s, %s, %s are not in the region", Integer.valueOf(x), Integer.valueOf(y), Integer.valueOf(z));
         return super.getType(x, y, z);
     }
 
     @Override
     public void setBlockData(int x, int y, int z, BlockData blockData) {
-        Preconditions.checkArgument(this.isInRegion(x, y, z), "Coordinates %s, %s, %s are not in the region", x, y, z);
+        Preconditions.checkArgument(this.isInRegion(x, y, z), "Coordinates %s, %s, %s are not in the region", Integer.valueOf(x), Integer.valueOf(y), Integer.valueOf(z));
         super.setBlockData(x, y, z, blockData);
     }
 
     @Override
     public boolean generateTree(@NotNull Location location, Random random, TreeType treeType) {
-        Preconditions.checkArgument(this.isInRegion(location), "Coordinates %s, %s, %s are not in the region", location.getBlockX(), location.getBlockY(), location.getBlockZ());
+        Preconditions.checkArgument(this.isInRegion(location), "Coordinates %s, %s, %s are not in the region", Integer.valueOf(location.getBlockX()), Integer.valueOf(location.getBlockY()), Integer.valueOf(location.getBlockZ()));
         return super.generateTree(location, random, treeType);
     }
 
     @Override
     public boolean generateTree(@NotNull Location location, Random random, TreeType treeType, Consumer<BlockState> consumer) {
-        Preconditions.checkArgument(this.isInRegion(location), "Coordinates %s, %s, %s are not in the region", location.getBlockX(), location.getBlockY(), location.getBlockZ());
+        Preconditions.checkArgument(this.isInRegion(location), "Coordinates %s, %s, %s are not in the region", Integer.valueOf(location.getBlockX()), Integer.valueOf(location.getBlockY()), Integer.valueOf(location.getBlockZ()));
         return super.generateTree(location, random, treeType, consumer);
     }
 
@@ -228,7 +228,7 @@ public class CraftLimitedRegion extends CraftRegionAccessor implements LimitedRe
 
     @Override
     public <T extends Entity> @NotNull T spawn(@NotNull Location location, Class<T> clazz, Consumer<T> function, CreatureSpawnEvent.SpawnReason reason) throws IllegalArgumentException {
-        Preconditions.checkArgument(this.isInRegion(location), "Coordinates %s, %s, %s are not in the region", location.getBlockX(), location.getBlockY(), location.getBlockZ());
+        Preconditions.checkArgument(this.isInRegion(location), "Coordinates %s, %s, %s are not in the region", Integer.valueOf(location.getBlockX()), Integer.valueOf(location.getBlockY()), Integer.valueOf(location.getBlockZ()));
         return super.spawn(location, clazz, function, reason);
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventory.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventory.java
index 9420f535ce701b4098b4c250c443f7ab64f40c95..57366a0673a5f250286e2f8688fb29f47c89fa12 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventory.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftInventory.java
@@ -187,7 +187,7 @@ public class CraftInventory implements Inventory {
         for (int i = 0; i < inventory.length; i++) {
             ItemStack item = inventory[i];
             if (item != null && item.getType() == material) {
-                slots.put(i, item);
+                slots.put(Integer.valueOf(i), item);
             }
         }
         return slots;
@@ -200,7 +200,7 @@ public class CraftInventory implements Inventory {
             ItemStack[] inventory = this.getStorageContents();
             for (int i = 0; i < inventory.length; i++) {
                 if (item.equals(inventory[i])) {
-                    slots.put(i, inventory[i]);
+                    slots.put(Integer.valueOf(i), inventory[i]);
                 }
             }
         }
@@ -315,7 +315,7 @@ public class CraftInventory implements Inventory {
 
                     if (firstFree == -1) {
                         // No space at all!
-                        leftover.put(i, item);
+                        leftover.put(Integer.valueOf(i), item);
                         break;
                     } else {
                         // More than a single stack!
@@ -388,7 +388,7 @@ public class CraftInventory implements Inventory {
                 // Drat! we don't have this type in the inventory
                 if (first == -1) {
                     item.setAmount(toDelete);
-                    leftover.put(i, item);
+                    leftover.put(Integer.valueOf(i), item);
                     break;
                 } else {
                     ItemStack itemStack = this.getItem(first);
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftItemStack.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftItemStack.java
index f0ae5eef24b0b575706d5705623bb31c2a4f4eb0..0e3cfd7cbac1cf6aacb4dc5af309e215e22528e8 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftItemStack.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftItemStack.java
@@ -257,7 +257,7 @@ public final class CraftItemStack extends ItemStack {
 
             Enchantment enchant = Enchantment.getByKey(CraftNamespacedKey.fromStringOrNull(id));
             if (enchant != null) {
-                result.put(enchant, level);
+                result.put(enchant, Integer.valueOf(level));
             }
         }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaArmorStand.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaArmorStand.java
index cb8e57f3472836c3151b0cac86a368563aeadc1b..c5d7812a661cbac7ca94e2e396c38591d7c47a74 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaArmorStand.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaArmorStand.java
@@ -197,23 +197,23 @@ public class CraftMetaArmorStand extends CraftMetaItem implements com.destroysto
 
         // Paper start
         if (invisible != null) {
-            builder.put(INVISIBLE.BUKKIT, invisible);
+            builder.put(INVISIBLE.BUKKIT, Boolean.valueOf(invisible));
         }
 
         if (noBasePlate != null) {
-            builder.put(NO_BASE_PLATE.BUKKIT, noBasePlate);
+            builder.put(NO_BASE_PLATE.BUKKIT, Boolean.valueOf(noBasePlate));
         }
 
         if (showArms != null) {
-            builder.put(SHOW_ARMS.BUKKIT, showArms);
+            builder.put(SHOW_ARMS.BUKKIT, Boolean.valueOf(showArms));
         }
 
         if (small != null) {
-            builder.put(SMALL.BUKKIT, small);
+            builder.put(SMALL.BUKKIT, Boolean.valueOf(small));
         }
 
         if (marker != null) {
-            builder.put(MARKER.BUKKIT, marker);
+            builder.put(MARKER.BUKKIT, Boolean.valueOf(marker));
         }
         // Paper end
 
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaAxolotlBucket.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaAxolotlBucket.java
index 4a76099e8616d2f7481301892b6830c0119306ac..17aaf0adf9232888b5e95a781b9ef789dd5b4642 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaAxolotlBucket.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaAxolotlBucket.java
@@ -38,7 +38,7 @@ public class CraftMetaAxolotlBucket extends CraftMetaItem implements AxolotlBuck
         super(tag);
 
         if (tag.contains(VARIANT.NBT, CraftMagicNumbers.NBT.TAG_INT)) {
-            this.variant = tag.getInt(VARIANT.NBT);
+            this.variant = Integer.valueOf(tag.getInt(VARIANT.NBT));
         }
 
         if (tag.contains(ENTITY_TAG.NBT)) {
@@ -108,7 +108,7 @@ public class CraftMetaAxolotlBucket extends CraftMetaItem implements AxolotlBuck
         if (variant == null) {
             variant = Axolotl.Variant.LUCY;
         }
-        this.variant = variant.ordinal();
+        this.variant = Integer.valueOf(variant.ordinal());
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaBook.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaBook.java
index eb8a702456ddb252489b342edfabe5b647df9af9..4da629ce6430368e9376d8f78033a41700ac9755 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaBook.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaBook.java
@@ -99,11 +99,11 @@ public class CraftMetaBook extends CraftMetaItem implements BookMeta {
         }
 
         if (tag.contains(RESOLVED.NBT)) {
-            this.resolved = tag.getBoolean(RESOLVED.NBT);
+            this.resolved = Boolean.valueOf(tag.getBoolean(RESOLVED.NBT));
         }
 
         if (tag.contains(GENERATION.NBT)) {
-            this.generation = tag.getInt(GENERATION.NBT);
+            this.generation = Integer.valueOf(tag.getInt(GENERATION.NBT));
         }
 
         if (tag.contains(BOOK_PAGES.NBT)) {
@@ -262,7 +262,7 @@ public class CraftMetaBook extends CraftMetaItem implements BookMeta {
 
     @Override
     public void setGeneration(@Nullable Generation generation) {
-        this.generation = (generation == null) ? null : generation.ordinal();
+        this.generation = (generation == null) ? null : Integer.valueOf(generation.ordinal());
     }
 
     // Paper start
@@ -490,7 +490,7 @@ public class CraftMetaBook extends CraftMetaItem implements BookMeta {
     }
 
     public void setResolved(boolean resolved) {
-        this.resolved = resolved;
+        this.resolved = Boolean.valueOf(resolved);
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaCompass.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaCompass.java
index 100575df6067903ffdc233e91a9fb122d032406f..300bdc70a328a1fbac7329b2a2fd8a15448adef5 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaCompass.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaCompass.java
@@ -62,7 +62,7 @@ public class CraftMetaCompass extends CraftMetaItem implements CompassMeta {
             this.lodestoneZ = pos.getInt("Z");
         }
         if (tag.contains(LODESTONE_TRACKED.NBT)) {
-            this.tracked = tag.getBoolean(LODESTONE_TRACKED.NBT);
+            this.tracked = Boolean.valueOf(tag.getBoolean(LODESTONE_TRACKED.NBT));
         }
     }
 
@@ -81,7 +81,7 @@ public class CraftMetaCompass extends CraftMetaItem implements CompassMeta {
                 this.setLodestone(lodestone);
             }
         }
-        this.tracked = SerializableMeta.getBoolean(map, LODESTONE_TRACKED.BUKKIT);
+        this.tracked = Boolean.valueOf(SerializableMeta.getBoolean(map, LODESTONE_TRACKED.BUKKIT));
     }
 
     @Override
@@ -164,7 +164,7 @@ public class CraftMetaCompass extends CraftMetaItem implements CompassMeta {
 
     @Override
     public void setLodestoneTracked(boolean tracked) {
-        this.tracked = tracked;
+        this.tracked = Boolean.valueOf(tracked);
     }
 
     @Override
@@ -211,9 +211,9 @@ public class CraftMetaCompass extends CraftMetaItem implements CompassMeta {
 
         if (this.hasLodestone()) {
             builder.put(LODESTONE_POS_WORLD.BUKKIT, this.lodestoneWorld.getAsString());
-            builder.put(LODESTONE_POS_X.BUKKIT, lodestoneX);
-            builder.put(LODESTONE_POS_Y.BUKKIT, lodestoneY);
-            builder.put(LODESTONE_POS_Z.BUKKIT, lodestoneZ);
+            builder.put(LODESTONE_POS_X.BUKKIT, Integer.valueOf(lodestoneX));
+            builder.put(LODESTONE_POS_Y.BUKKIT, Integer.valueOf(lodestoneY));
+            builder.put(LODESTONE_POS_Z.BUKKIT, Integer.valueOf(lodestoneZ));
         }
         if (this.hasLodestoneTracked()) {
             builder.put(LODESTONE_TRACKED.BUKKIT, tracked);
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaCrossbow.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaCrossbow.java
index ebd1884d3dccf768635b7db4a30b502a013dd956..d6a6ef8823938fe97fd79aa52cd09e5d20e2b983 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaCrossbow.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaCrossbow.java
@@ -190,7 +190,7 @@ public class CraftMetaCrossbow extends CraftMetaItem implements CrossbowMeta {
     ImmutableMap.@NotNull Builder<String, Object> serialize(ImmutableMap.@NotNull Builder<String, Object> builder) {
         super.serialize(builder);
 
-        builder.put(CHARGED.BUKKIT, charged);
+        builder.put(CHARGED.BUKKIT, Boolean.valueOf(charged));
         if (this.hasChargedProjectiles()) {
             builder.put(CHARGED_PROJECTILES.BUKKIT, chargedProjectiles);
         }
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaEnchantedBook.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaEnchantedBook.java
index 2511bf1171832130393f37b4e27d585db8f36937..5b95a301bace0a82affea3ead76c8b1e55a1602f 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaEnchantedBook.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaEnchantedBook.java
@@ -147,7 +147,7 @@ class CraftMetaEnchantedBook extends CraftMetaItem implements EnchantmentStorage
         }
 
         if (ignoreRestrictions || level >= ench.getStartLevel() && level <= ench.getMaxLevel()) {
-            Integer old = this.enchantments.put(ench, level);
+            Integer old = this.enchantments.put(ench, Integer.valueOf(level));
             return old == null || old != level;
         }
         return false;
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaFirework.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaFirework.java
index f7d171c0cf7e48ddb64e9fbc01beec779ad54dc3..cb2f289ef733e362c155a5d7c1d7de8a76694262 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaFirework.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaFirework.java
@@ -316,7 +316,7 @@ class CraftMetaFirework extends CraftMetaItem implements FireworkMeta {
         }
 
         if (this.hasPower()) {
-            builder.put(FLIGHT.BUKKIT, power);
+            builder.put(FLIGHT.BUKKIT, Integer.valueOf(power));
         }
 
         return builder;
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaItem.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaItem.java
index 8fd040caea9c007afc26961dd814a74fb20b7f95..0597e4e28a0286060134dd5cc9ecba2967b37cc5 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaItem.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaItem.java
@@ -377,7 +377,7 @@ class CraftMetaItem implements ItemMeta, Damageable, Repairable, BlockDataMeta {
         }
 
         if (tag.contains(CUSTOM_MODEL_DATA.NBT, CraftMagicNumbers.NBT.TAG_INT)) {
-            this.customModelData = tag.getInt(CUSTOM_MODEL_DATA.NBT);
+            this.customModelData = Integer.valueOf(tag.getInt(CUSTOM_MODEL_DATA.NBT));
         }
         if (tag.contains(BLOCK_DATA.NBT, CraftMagicNumbers.NBT.TAG_COMPOUND)) {
             this.blockData = tag.getCompound(BLOCK_DATA.NBT).copy();
@@ -454,7 +454,7 @@ class CraftMetaItem implements ItemMeta, Damageable, Repairable, BlockDataMeta {
 
             Enchantment enchant = Enchantment.getByKey(CraftNamespacedKey.fromStringOrNull(id));
             if (enchant != null) {
-                enchantments.put(enchant, level);
+                enchantments.put(enchant, Integer.valueOf(level));
             }
         }
 
@@ -964,7 +964,7 @@ class CraftMetaItem implements ItemMeta, Damageable, Repairable, BlockDataMeta {
         }
 
         if (ignoreRestrictions || level >= ench.getStartLevel() && level <= ench.getMaxLevel()) {
-            Integer old = this.enchantments.put(ench, level);
+            Integer old = this.enchantments.put(ench, Integer.valueOf(level));
             return old == null || old != level;
         }
         return false;
@@ -1438,7 +1438,7 @@ class CraftMetaItem implements ItemMeta, Damageable, Repairable, BlockDataMeta {
         CraftMetaItem.serializeModifiers(this.attributeModifiers, builder, CraftMetaItem.ATTRIBUTES);
 
         if (this.hasRepairCost()) {
-            builder.put(REPAIR.BUKKIT, repairCost);
+            builder.put(REPAIR.BUKKIT, Integer.valueOf(repairCost));
         }
 
         List<String> hideFlags = new ArrayList<String>();
@@ -1450,11 +1450,11 @@ class CraftMetaItem implements ItemMeta, Damageable, Repairable, BlockDataMeta {
         }
 
         if (this.isUnbreakable()) {
-            builder.put(UNBREAKABLE.BUKKIT, unbreakable);
+            builder.put(UNBREAKABLE.BUKKIT, Boolean.valueOf(unbreakable));
         }
 
         if (this.hasDamage()) {
-            builder.put(DAMAGE.BUKKIT, damage);
+            builder.put(DAMAGE.BUKKIT, Integer.valueOf(damage));
         }
 
         // Paper start - Implement an API for CanPlaceOn and CanDestroy NBT values
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaMap.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaMap.java
index 685fb0cf37601a114ca4cbe67e5cc6ecaa9416af..e76ae30b0ed14dd044330a6b3dd8db87d480bc6c 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaMap.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaMap.java
@@ -51,7 +51,7 @@ class CraftMetaMap extends CraftMetaItem implements MapMeta {
         super(tag);
 
         if (tag.contains(MAP_ID.NBT, CraftMagicNumbers.NBT.TAG_ANY_NUMBER)) {
-            this.mapId = tag.getInt(MAP_ID.NBT);
+            this.mapId = Integer.valueOf(tag.getInt(MAP_ID.NBT));
         }
 
         if (tag.contains(MAP_SCALING.NBT)) {
@@ -147,7 +147,7 @@ class CraftMetaMap extends CraftMetaItem implements MapMeta {
 
     @Override
     public void setMapId(int id) {
-        this.mapId = id;
+        this.mapId = Integer.valueOf(id);
     }
 
     @Override
@@ -163,7 +163,7 @@ class CraftMetaMap extends CraftMetaItem implements MapMeta {
 
     @Override
     public void setMapView(@Nullable MapView map) {
-        this.mapId = (map != null) ? map.getId() : null;
+        this.mapId = (map != null) ? Integer.valueOf(map.getId()) : null;
     }
 
     boolean hasScaling() {
@@ -263,11 +263,11 @@ class CraftMetaMap extends CraftMetaItem implements MapMeta {
         super.serialize(builder);
 
         if (this.hasMapId()) {
-            builder.put(MAP_ID.BUKKIT, this.getMapId());
+            builder.put(MAP_ID.BUKKIT, Integer.valueOf(this.getMapId()));
         }
 
         if (this.hasScaling()) {
-            builder.put(MAP_SCALING.BUKKIT, this.isScaling());
+            builder.put(MAP_SCALING.BUKKIT, Boolean.valueOf(this.isScaling()));
         }
 
         if (this.hasLocationName()) {
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaTropicalFishBucket.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaTropicalFishBucket.java
index 00aec048d6ebab8b871ceaca401d7e9867ad42c4..5be8c48970ba4946a94a08577ea5930e02bdc1af 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaTropicalFishBucket.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaTropicalFishBucket.java
@@ -39,7 +39,7 @@ class CraftMetaTropicalFishBucket extends CraftMetaItem implements TropicalFishB
         super(tag);
 
         if (tag.contains(VARIANT.NBT, CraftMagicNumbers.NBT.TAG_INT)) {
-            this.variant = tag.getInt(VARIANT.NBT);
+            this.variant = Integer.valueOf(tag.getInt(VARIANT.NBT));
         }
 
         if (tag.contains(ENTITY_TAG.NBT)) {
@@ -107,9 +107,9 @@ class CraftMetaTropicalFishBucket extends CraftMetaItem implements TropicalFishB
     @Override
     public void setPatternColor(@NotNull DyeColor color) {
         if (this.variant == null) {
-            this.variant = 0;
+            this.variant = Integer.valueOf(0);
         }
-        this.variant = CraftTropicalFish.getData(color, this.getBodyColor(), this.getPattern()); // Paper - properly set tropical fish pattern color without mutating body color
+        this.variant = Integer.valueOf(CraftTropicalFish.getData(color, this.getBodyColor(), this.getPattern())); // Paper - properly set tropical fish pattern color without mutating body color
     }
 
     @Override
@@ -120,9 +120,9 @@ class CraftMetaTropicalFishBucket extends CraftMetaItem implements TropicalFishB
     @Override
     public void setBodyColor(@NotNull DyeColor color) {
         if (this.variant == null) {
-            this.variant = 0;
+            this.variant = Integer.valueOf(0);
         }
-        this.variant = CraftTropicalFish.getData(this.getPatternColor(), color, this.getPattern());
+        this.variant = Integer.valueOf(CraftTropicalFish.getData(this.getPatternColor(), color, this.getPattern()));
     }
 
     @Override
@@ -133,9 +133,9 @@ class CraftMetaTropicalFishBucket extends CraftMetaItem implements TropicalFishB
     @Override
     public void setPattern(TropicalFish.@NotNull Pattern pattern) {
         if (this.variant == null) {
-            this.variant = 0;
+            this.variant = Integer.valueOf(0);
         }
-        this.variant = CraftTropicalFish.getData(this.getPatternColor(), this.getBodyColor(), pattern);
+        this.variant = Integer.valueOf(CraftTropicalFish.getData(this.getPatternColor(), this.getBodyColor(), pattern));
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftShapedRecipe.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftShapedRecipe.java
index 4aa6a6c5b2faa363b5362054e5bd20fcb88fafef..53af0f9d01db690c652099f730a5bf4f341ec41d 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftShapedRecipe.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftShapedRecipe.java
@@ -37,7 +37,7 @@ public class CraftShapedRecipe extends ShapedRecipe implements CraftRecipe {
         ret.shape(shape);
         Map<Character, RecipeChoice> ingredientMap = recipe.getChoiceMap();
         for (char c : ingredientMap.keySet()) {
-            RecipeChoice stack = ingredientMap.get(c);
+            RecipeChoice stack = ingredientMap.get(Character.valueOf(c));
             if (stack != null) {
                 ret.setIngredient(c, stack);
             }
@@ -55,7 +55,7 @@ public class CraftShapedRecipe extends ShapedRecipe implements CraftRecipe {
         for (int i = 0; i < shape.length; i++) {
             String row = shape[i];
             for (int j = 0; j < row.length(); j++) {
-                data.set(i * width + j, toNMS(ingred.get(row.charAt(j)), false));
+                data.set(i * width + j, toNMS(ingred.get(Character.valueOf(row.charAt(j))), false));
             }
         }
         MinecraftServer.getServer().getRecipeManager().addRecipe(new net.minecraft.world.item.crafting.ShapedRecipe(CraftNamespacedKey.toMinecraft(this.getKey()), this.getGroup(), CraftRecipe.getCategory(this.getCategory()), width, shape.length, data, CraftItemStack.asNMSCopy(this.getResult())));
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/InventoryIterator.java b/src/main/java/org/bukkit/craftbukkit/inventory/InventoryIterator.java
index 7a90668dfce3811fe96e02e4ff090321ef398485..db15e12032f95ffa7dde231e2cbe4d57bdf134d2 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/InventoryIterator.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/InventoryIterator.java
@@ -28,7 +28,7 @@ public class InventoryIterator implements ListIterator<ItemStack> {
 
     @Override
     public @Nullable ItemStack next() {
-        this.lastDirection = true;
+        this.lastDirection = Boolean.TRUE;
         return this.inventory.getItem(this.nextIndex++);
     }
 
@@ -44,7 +44,7 @@ public class InventoryIterator implements ListIterator<ItemStack> {
 
     @Override
     public @Nullable ItemStack previous() {
-        this.lastDirection = false;
+        this.lastDirection = Boolean.FALSE;
         return this.inventory.getItem(--this.nextIndex);
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/legacy/CraftLegacy.java b/src/main/java/org/bukkit/craftbukkit/legacy/CraftLegacy.java
index 98c3e11b5f6497b3c229fd67ff4a0c88c1a0ef10..e9a3360c26f6cfb6ff85287ba5d81f4e83f1eb69 100644
--- a/src/main/java/org/bukkit/craftbukkit/legacy/CraftLegacy.java
+++ b/src/main/java/org/bukkit/craftbukkit/legacy/CraftLegacy.java
@@ -264,58 +264,58 @@ public final class CraftLegacy {
             new Exception().printStackTrace();
         }
 
-        SPAWN_EGGS.put((byte) 0, Material.PIG_SPAWN_EGG); // Will be fixed by updateMaterial if possible
-
-        SPAWN_EGGS.put((byte) EntityType.BAT.getTypeId(), Material.BAT_SPAWN_EGG);
-        SPAWN_EGGS.put((byte) EntityType.BLAZE.getTypeId(), Material.BLAZE_SPAWN_EGG);
-        SPAWN_EGGS.put((byte) EntityType.CAVE_SPIDER.getTypeId(), Material.CAVE_SPIDER_SPAWN_EGG);
-        SPAWN_EGGS.put((byte) EntityType.CHICKEN.getTypeId(), Material.CHICKEN_SPAWN_EGG);
-        SPAWN_EGGS.put((byte) EntityType.COD.getTypeId(), Material.COD_SPAWN_EGG);
-        SPAWN_EGGS.put((byte) EntityType.COW.getTypeId(), Material.COW_SPAWN_EGG);
-        SPAWN_EGGS.put((byte) EntityType.CREEPER.getTypeId(), Material.CREEPER_SPAWN_EGG);
-        SPAWN_EGGS.put((byte) EntityType.DOLPHIN.getTypeId(), Material.DOLPHIN_SPAWN_EGG);
-        SPAWN_EGGS.put((byte) EntityType.DONKEY.getTypeId(), Material.DONKEY_SPAWN_EGG);
-        SPAWN_EGGS.put((byte) EntityType.ELDER_GUARDIAN.getTypeId(), Material.ELDER_GUARDIAN_SPAWN_EGG);
-        SPAWN_EGGS.put((byte) EntityType.ENDERMAN.getTypeId(), Material.ENDERMAN_SPAWN_EGG);
-        SPAWN_EGGS.put((byte) EntityType.ENDERMITE.getTypeId(), Material.ENDERMITE_SPAWN_EGG);
-        SPAWN_EGGS.put((byte) EntityType.EVOKER.getTypeId(), Material.EVOKER_SPAWN_EGG);
-        SPAWN_EGGS.put((byte) EntityType.GHAST.getTypeId(), Material.GHAST_SPAWN_EGG);
-        SPAWN_EGGS.put((byte) EntityType.GUARDIAN.getTypeId(), Material.GUARDIAN_SPAWN_EGG);
-        SPAWN_EGGS.put((byte) EntityType.HORSE.getTypeId(), Material.HORSE_SPAWN_EGG);
-        SPAWN_EGGS.put((byte) EntityType.HUSK.getTypeId(), Material.HUSK_SPAWN_EGG);
-        SPAWN_EGGS.put((byte) EntityType.LLAMA.getTypeId(), Material.LLAMA_SPAWN_EGG);
-        SPAWN_EGGS.put((byte) EntityType.MAGMA_CUBE.getTypeId(), Material.MAGMA_CUBE_SPAWN_EGG);
-        SPAWN_EGGS.put((byte) EntityType.MUSHROOM_COW.getTypeId(), Material.MOOSHROOM_SPAWN_EGG);
-        SPAWN_EGGS.put((byte) EntityType.MULE.getTypeId(), Material.MULE_SPAWN_EGG);
-        SPAWN_EGGS.put((byte) EntityType.OCELOT.getTypeId(), Material.OCELOT_SPAWN_EGG);
-        SPAWN_EGGS.put((byte) EntityType.PARROT.getTypeId(), Material.PARROT_SPAWN_EGG);
-        SPAWN_EGGS.put((byte) EntityType.PIG.getTypeId(), Material.PIG_SPAWN_EGG);
-        SPAWN_EGGS.put((byte) EntityType.PHANTOM.getTypeId(), Material.PHANTOM_SPAWN_EGG);
-        SPAWN_EGGS.put((byte) EntityType.POLAR_BEAR.getTypeId(), Material.POLAR_BEAR_SPAWN_EGG);
-        SPAWN_EGGS.put((byte) EntityType.PUFFERFISH.getTypeId(), Material.PUFFERFISH_SPAWN_EGG);
-        SPAWN_EGGS.put((byte) EntityType.RABBIT.getTypeId(), Material.RABBIT_SPAWN_EGG);
-        SPAWN_EGGS.put((byte) EntityType.SALMON.getTypeId(), Material.SALMON_SPAWN_EGG);
-        SPAWN_EGGS.put((byte) EntityType.SHEEP.getTypeId(), Material.SHEEP_SPAWN_EGG);
-        SPAWN_EGGS.put((byte) EntityType.SHULKER.getTypeId(), Material.SHULKER_SPAWN_EGG);
-        SPAWN_EGGS.put((byte) EntityType.SILVERFISH.getTypeId(), Material.SILVERFISH_SPAWN_EGG);
-        SPAWN_EGGS.put((byte) EntityType.SKELETON.getTypeId(), Material.SKELETON_SPAWN_EGG);
-        SPAWN_EGGS.put((byte) EntityType.SKELETON_HORSE.getTypeId(), Material.SKELETON_HORSE_SPAWN_EGG);
-        SPAWN_EGGS.put((byte) EntityType.SLIME.getTypeId(), Material.SLIME_SPAWN_EGG);
-        SPAWN_EGGS.put((byte) EntityType.SPIDER.getTypeId(), Material.SPIDER_SPAWN_EGG);
-        SPAWN_EGGS.put((byte) EntityType.SQUID.getTypeId(), Material.SQUID_SPAWN_EGG);
-        SPAWN_EGGS.put((byte) EntityType.STRAY.getTypeId(), Material.STRAY_SPAWN_EGG);
-        SPAWN_EGGS.put((byte) EntityType.TROPICAL_FISH.getTypeId(), Material.TROPICAL_FISH_SPAWN_EGG);
-        SPAWN_EGGS.put((byte) EntityType.TURTLE.getTypeId(), Material.TURTLE_SPAWN_EGG);
-        SPAWN_EGGS.put((byte) EntityType.VEX.getTypeId(), Material.VEX_SPAWN_EGG);
-        SPAWN_EGGS.put((byte) EntityType.VILLAGER.getTypeId(), Material.VILLAGER_SPAWN_EGG);
-        SPAWN_EGGS.put((byte) EntityType.VINDICATOR.getTypeId(), Material.VINDICATOR_SPAWN_EGG);
-        SPAWN_EGGS.put((byte) EntityType.WITCH.getTypeId(), Material.WITCH_SPAWN_EGG);
-        SPAWN_EGGS.put((byte) EntityType.WITHER_SKELETON.getTypeId(), Material.WITHER_SKELETON_SPAWN_EGG);
-        SPAWN_EGGS.put((byte) EntityType.WOLF.getTypeId(), Material.WOLF_SPAWN_EGG);
-        SPAWN_EGGS.put((byte) EntityType.ZOMBIE.getTypeId(), Material.ZOMBIE_SPAWN_EGG);
-        SPAWN_EGGS.put((byte) EntityType.ZOMBIE_HORSE.getTypeId(), Material.ZOMBIE_HORSE_SPAWN_EGG);
-        SPAWN_EGGS.put((byte) EntityType.ZOMBIFIED_PIGLIN.getTypeId(), Material.ZOMBIFIED_PIGLIN_SPAWN_EGG);
-        SPAWN_EGGS.put((byte) EntityType.ZOMBIE_VILLAGER.getTypeId(), Material.ZOMBIE_VILLAGER_SPAWN_EGG);
+        SPAWN_EGGS.put(Byte.valueOf((byte) 0), Material.PIG_SPAWN_EGG); // Will be fixed by updateMaterial if possible
+
+        SPAWN_EGGS.put(Byte.valueOf((byte) EntityType.BAT.getTypeId()), Material.BAT_SPAWN_EGG);
+        SPAWN_EGGS.put(Byte.valueOf((byte) EntityType.BLAZE.getTypeId()), Material.BLAZE_SPAWN_EGG);
+        SPAWN_EGGS.put(Byte.valueOf((byte) EntityType.CAVE_SPIDER.getTypeId()), Material.CAVE_SPIDER_SPAWN_EGG);
+        SPAWN_EGGS.put(Byte.valueOf((byte) EntityType.CHICKEN.getTypeId()), Material.CHICKEN_SPAWN_EGG);
+        SPAWN_EGGS.put(Byte.valueOf((byte) EntityType.COD.getTypeId()), Material.COD_SPAWN_EGG);
+        SPAWN_EGGS.put(Byte.valueOf((byte) EntityType.COW.getTypeId()), Material.COW_SPAWN_EGG);
+        SPAWN_EGGS.put(Byte.valueOf((byte) EntityType.CREEPER.getTypeId()), Material.CREEPER_SPAWN_EGG);
+        SPAWN_EGGS.put(Byte.valueOf((byte) EntityType.DOLPHIN.getTypeId()), Material.DOLPHIN_SPAWN_EGG);
+        SPAWN_EGGS.put(Byte.valueOf((byte) EntityType.DONKEY.getTypeId()), Material.DONKEY_SPAWN_EGG);
+        SPAWN_EGGS.put(Byte.valueOf((byte) EntityType.ELDER_GUARDIAN.getTypeId()), Material.ELDER_GUARDIAN_SPAWN_EGG);
+        SPAWN_EGGS.put(Byte.valueOf((byte) EntityType.ENDERMAN.getTypeId()), Material.ENDERMAN_SPAWN_EGG);
+        SPAWN_EGGS.put(Byte.valueOf((byte) EntityType.ENDERMITE.getTypeId()), Material.ENDERMITE_SPAWN_EGG);
+        SPAWN_EGGS.put(Byte.valueOf((byte) EntityType.EVOKER.getTypeId()), Material.EVOKER_SPAWN_EGG);
+        SPAWN_EGGS.put(Byte.valueOf((byte) EntityType.GHAST.getTypeId()), Material.GHAST_SPAWN_EGG);
+        SPAWN_EGGS.put(Byte.valueOf((byte) EntityType.GUARDIAN.getTypeId()), Material.GUARDIAN_SPAWN_EGG);
+        SPAWN_EGGS.put(Byte.valueOf((byte) EntityType.HORSE.getTypeId()), Material.HORSE_SPAWN_EGG);
+        SPAWN_EGGS.put(Byte.valueOf((byte) EntityType.HUSK.getTypeId()), Material.HUSK_SPAWN_EGG);
+        SPAWN_EGGS.put(Byte.valueOf((byte) EntityType.LLAMA.getTypeId()), Material.LLAMA_SPAWN_EGG);
+        SPAWN_EGGS.put(Byte.valueOf((byte) EntityType.MAGMA_CUBE.getTypeId()), Material.MAGMA_CUBE_SPAWN_EGG);
+        SPAWN_EGGS.put(Byte.valueOf((byte) EntityType.MUSHROOM_COW.getTypeId()), Material.MOOSHROOM_SPAWN_EGG);
+        SPAWN_EGGS.put(Byte.valueOf((byte) EntityType.MULE.getTypeId()), Material.MULE_SPAWN_EGG);
+        SPAWN_EGGS.put(Byte.valueOf((byte) EntityType.OCELOT.getTypeId()), Material.OCELOT_SPAWN_EGG);
+        SPAWN_EGGS.put(Byte.valueOf((byte) EntityType.PARROT.getTypeId()), Material.PARROT_SPAWN_EGG);
+        SPAWN_EGGS.put(Byte.valueOf((byte) EntityType.PIG.getTypeId()), Material.PIG_SPAWN_EGG);
+        SPAWN_EGGS.put(Byte.valueOf((byte) EntityType.PHANTOM.getTypeId()), Material.PHANTOM_SPAWN_EGG);
+        SPAWN_EGGS.put(Byte.valueOf((byte) EntityType.POLAR_BEAR.getTypeId()), Material.POLAR_BEAR_SPAWN_EGG);
+        SPAWN_EGGS.put(Byte.valueOf((byte) EntityType.PUFFERFISH.getTypeId()), Material.PUFFERFISH_SPAWN_EGG);
+        SPAWN_EGGS.put(Byte.valueOf((byte) EntityType.RABBIT.getTypeId()), Material.RABBIT_SPAWN_EGG);
+        SPAWN_EGGS.put(Byte.valueOf((byte) EntityType.SALMON.getTypeId()), Material.SALMON_SPAWN_EGG);
+        SPAWN_EGGS.put(Byte.valueOf((byte) EntityType.SHEEP.getTypeId()), Material.SHEEP_SPAWN_EGG);
+        SPAWN_EGGS.put(Byte.valueOf((byte) EntityType.SHULKER.getTypeId()), Material.SHULKER_SPAWN_EGG);
+        SPAWN_EGGS.put(Byte.valueOf((byte) EntityType.SILVERFISH.getTypeId()), Material.SILVERFISH_SPAWN_EGG);
+        SPAWN_EGGS.put(Byte.valueOf((byte) EntityType.SKELETON.getTypeId()), Material.SKELETON_SPAWN_EGG);
+        SPAWN_EGGS.put(Byte.valueOf((byte) EntityType.SKELETON_HORSE.getTypeId()), Material.SKELETON_HORSE_SPAWN_EGG);
+        SPAWN_EGGS.put(Byte.valueOf((byte) EntityType.SLIME.getTypeId()), Material.SLIME_SPAWN_EGG);
+        SPAWN_EGGS.put(Byte.valueOf((byte) EntityType.SPIDER.getTypeId()), Material.SPIDER_SPAWN_EGG);
+        SPAWN_EGGS.put(Byte.valueOf((byte) EntityType.SQUID.getTypeId()), Material.SQUID_SPAWN_EGG);
+        SPAWN_EGGS.put(Byte.valueOf((byte) EntityType.STRAY.getTypeId()), Material.STRAY_SPAWN_EGG);
+        SPAWN_EGGS.put(Byte.valueOf((byte) EntityType.TROPICAL_FISH.getTypeId()), Material.TROPICAL_FISH_SPAWN_EGG);
+        SPAWN_EGGS.put(Byte.valueOf((byte) EntityType.TURTLE.getTypeId()), Material.TURTLE_SPAWN_EGG);
+        SPAWN_EGGS.put(Byte.valueOf((byte) EntityType.VEX.getTypeId()), Material.VEX_SPAWN_EGG);
+        SPAWN_EGGS.put(Byte.valueOf((byte) EntityType.VILLAGER.getTypeId()), Material.VILLAGER_SPAWN_EGG);
+        SPAWN_EGGS.put(Byte.valueOf((byte) EntityType.VINDICATOR.getTypeId()), Material.VINDICATOR_SPAWN_EGG);
+        SPAWN_EGGS.put(Byte.valueOf((byte) EntityType.WITCH.getTypeId()), Material.WITCH_SPAWN_EGG);
+        SPAWN_EGGS.put(Byte.valueOf((byte) EntityType.WITHER_SKELETON.getTypeId()), Material.WITHER_SKELETON_SPAWN_EGG);
+        SPAWN_EGGS.put(Byte.valueOf((byte) EntityType.WOLF.getTypeId()), Material.WOLF_SPAWN_EGG);
+        SPAWN_EGGS.put(Byte.valueOf((byte) EntityType.ZOMBIE.getTypeId()), Material.ZOMBIE_SPAWN_EGG);
+        SPAWN_EGGS.put(Byte.valueOf((byte) EntityType.ZOMBIE_HORSE.getTypeId()), Material.ZOMBIE_HORSE_SPAWN_EGG);
+        SPAWN_EGGS.put(Byte.valueOf((byte) EntityType.ZOMBIFIED_PIGLIN.getTypeId()), Material.ZOMBIFIED_PIGLIN_SPAWN_EGG);
+        SPAWN_EGGS.put(Byte.valueOf((byte) EntityType.ZOMBIE_VILLAGER.getTypeId()), Material.ZOMBIE_VILLAGER_SPAWN_EGG);
 
         SharedConstants.tryDetectVersion();
         Bootstrap.bootStrap();
diff --git a/src/main/java/org/bukkit/craftbukkit/potion/CraftPotionBrewer.java b/src/main/java/org/bukkit/craftbukkit/potion/CraftPotionBrewer.java
index 17e6bdb7b7e1a1372158dec63487b1eed6564e5e..3aa407b8d1b2b945eeb9eadd613fcd9ad674d10e 100644
--- a/src/main/java/org/bukkit/craftbukkit/potion/CraftPotionBrewer.java
+++ b/src/main/java/org/bukkit/craftbukkit/potion/CraftPotionBrewer.java
@@ -26,8 +26,8 @@ public class CraftPotionBrewer implements PotionBrewer {
         key |= (upgraded ? 1 : 0) << 1;
         key |= extended ? 1 : 0;
 
-        if (CraftPotionBrewer.cache.containsKey(key))
-            return CraftPotionBrewer.cache.get(key);
+        if (CraftPotionBrewer.cache.containsKey(Integer.valueOf(key)))
+            return CraftPotionBrewer.cache.get(Integer.valueOf(key));
         // Paper end
 
         List<MobEffectInstance> mcEffects = Potion.byName(CraftPotionUtil.fromBukkit(new PotionData(damage, extended, upgraded))).getEffects();
@@ -37,9 +37,9 @@ public class CraftPotionBrewer implements PotionBrewer {
             builder.add(CraftPotionUtil.toBukkit(effect));
         }
 
-        CraftPotionBrewer.cache.put(key, builder.build()); // Paper
+        CraftPotionBrewer.cache.put(Integer.valueOf(key), builder.build()); // Paper
 
-        return CraftPotionBrewer.cache.get(key); // Paper
+        return CraftPotionBrewer.cache.get(Integer.valueOf(key)); // Paper
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/scheduler/CraftAsyncScheduler.java b/src/main/java/org/bukkit/craftbukkit/scheduler/CraftAsyncScheduler.java
index c62f736947c8824805ea08cc8e9b48b49e2a0645..7d716c327b8fe81bbf99f2b451acd5d7d4c6d4cc 100644
--- a/src/main/java/org/bukkit/craftbukkit/scheduler/CraftAsyncScheduler.java
+++ b/src/main/java/org/bukkit/craftbukkit/scheduler/CraftAsyncScheduler.java
@@ -94,7 +94,7 @@ public class CraftAsyncScheduler extends CraftScheduler {
 
     private boolean executeTask(@NotNull CraftTask task) {
         if (isValid(task)) {
-            this.runners.put(task.getTaskId(), task);
+            this.runners.put(Integer.valueOf(task.getTaskId()), task);
             this.executor.execute(new ServerSchedulerReportingWrapper(task));
             return true;
         }
diff --git a/src/main/java/org/bukkit/craftbukkit/scheduler/CraftAsyncTask.java b/src/main/java/org/bukkit/craftbukkit/scheduler/CraftAsyncTask.java
index 29d9be9ebee801a12e765812588ddad5ced7ad36..8025c1cae17dc25b9b30e15f86ce55c9b73df2ec 100644
--- a/src/main/java/org/bukkit/craftbukkit/scheduler/CraftAsyncTask.java
+++ b/src/main/java/org/bukkit/craftbukkit/scheduler/CraftAsyncTask.java
@@ -64,7 +64,7 @@ class CraftAsyncTask extends CraftTask {
                     String.format(
                         "Plugin %s generated an exception while executing task %s",
                         getOwner().getDescription().getFullName(),
-                        getTaskId()),
+	                    Integer.valueOf(getTaskId())),
                     thrown);
         } finally {
             // Cleanup is important for any async task, otherwise ghost tasks are everywhere
@@ -84,7 +84,7 @@ class CraftAsyncTask extends CraftTask {
                                 String.format(
                                     "Unable to remove worker %s on task %s for %s",
                                     thread.getName(),
-                                    getTaskId(),
+	                                Integer.valueOf(getTaskId()),
                                     getOwner().getDescription().getFullName()),
                                 thrown); // We don't want to lose the original exception, if any
                     }
@@ -92,7 +92,7 @@ class CraftAsyncTask extends CraftTask {
                     if (getPeriod() < 0 && this.workers.isEmpty()) {
                         // At this spot, we know we are the final async task being executed!
                         // Because we have the lock, nothing else is running or will run because delay < 0
-                        this.runners.remove(getTaskId());
+                        this.runners.remove(Integer.valueOf(getTaskId()));
                     }
                 }
             }
@@ -110,7 +110,7 @@ class CraftAsyncTask extends CraftTask {
             // Synchronizing here prevents race condition for a completing task
             setPeriod(CraftTask.CANCEL);
             if (this.workers.isEmpty()) {
-                this.runners.remove(getTaskId());
+                this.runners.remove(Integer.valueOf(getTaskId()));
             }
         }
         return true;
diff --git a/src/main/java/org/bukkit/craftbukkit/scheduler/CraftScheduler.java b/src/main/java/org/bukkit/craftbukkit/scheduler/CraftScheduler.java
index 7f976d151d08a228c918d95e61758f20f41415ee..3a439a66e7035cf6cd82eeceb9d85ba0c1c4a340 100644
--- a/src/main/java/org/bukkit/craftbukkit/scheduler/CraftScheduler.java
+++ b/src/main/java/org/bukkit/craftbukkit/scheduler/CraftScheduler.java
@@ -281,7 +281,7 @@ public class CraftScheduler implements BukkitScheduler {
             this.asyncScheduler.cancelTask(taskId);
         }
         // Paper end
-        CraftTask task = this.runners.get(taskId);
+        CraftTask task = this.runners.get(Integer.valueOf(taskId));
         if (task != null) {
             task.cancel0();
         }
@@ -301,7 +301,7 @@ public class CraftScheduler implements BukkitScheduler {
                                 task.cancel0();
                                 tasks.remove();
                                 if (task.isSync()) {
-                                    CraftScheduler.this.runners.remove(taskId);
+                                    CraftScheduler.this.runners.remove(Integer.valueOf(taskId));
                                 }
                                 return true;
                             }
@@ -343,7 +343,7 @@ public class CraftScheduler implements BukkitScheduler {
                                 task.cancel0();
                                 tasks.remove();
                                 if (task.isSync()) {
-                                    CraftScheduler.this.runners.remove(task.getTaskId());
+                                    CraftScheduler.this.runners.remove(Integer.valueOf(task.getTaskId()));
                                 }
                             }
                         }
@@ -374,7 +374,7 @@ public class CraftScheduler implements BukkitScheduler {
             }
         }
         // Paper end
-        final CraftTask task = this.runners.get(taskId);
+        final CraftTask task = this.runners.get(Integer.valueOf(taskId));
         if (task == null) {
             return false;
         }
@@ -402,7 +402,7 @@ public class CraftScheduler implements BukkitScheduler {
                 return task.getPeriod() >= CraftTask.NO_REPEATING; // The task will run
             }
         }
-        CraftTask task = this.runners.get(taskId);
+        CraftTask task = this.runners.get(Integer.valueOf(taskId));
         return task != null && task.getPeriod() >= CraftTask.NO_REPEATING;
     }
 
@@ -475,7 +475,7 @@ public class CraftScheduler implements BukkitScheduler {
             final CraftTask task = this.pending.remove();
             if (task.getPeriod() < CraftTask.NO_REPEATING) {
                 if (task.isSync()) {
-                    this.runners.remove(task.getTaskId(), task);
+                    this.runners.remove(Integer.valueOf(task.getTaskId()), task);
                 }
                 this.parsePending();
                 continue;
@@ -488,7 +488,7 @@ public class CraftScheduler implements BukkitScheduler {
                     // Paper start
                     String msg = String.format(
                         "Task #%s for %s generated an exception",
-                        task.getTaskId(),
+	                    Integer.valueOf(task.getTaskId()),
                         task.getOwner().getDescription().getFullName());
                     if (task.getOwner() == MINECRAFT) {
                         net.minecraft.server.MinecraftServer.LOGGER.error(msg, throwable);
@@ -516,7 +516,7 @@ public class CraftScheduler implements BukkitScheduler {
                 task.setNextRun(currentTick + period);
                 temp.add(task);
             } else if (task.isSync()) {
-                this.runners.remove(task.getTaskId());
+                this.runners.remove(Integer.valueOf(task.getTaskId()));
             }
         }
         MinecraftTimings.bukkitSchedulerFinishTimer.startTiming(); // Paper
@@ -561,7 +561,7 @@ public class CraftScheduler implements BukkitScheduler {
         int id;
         do {
             id = this.ids.updateAndGet(INCREMENT_IDS);
-        } while (this.runners.containsKey(id)); // Avoid generating duplicate IDs
+        } while (this.runners.containsKey(Integer.valueOf(id))); // Avoid generating duplicate IDs
         return id;
     }
 
@@ -575,7 +575,7 @@ public class CraftScheduler implements BukkitScheduler {
                 task.run();
             } else if (task.getPeriod() >= CraftTask.NO_REPEATING) {
                 this.pending.add(task);
-                this.runners.put(task.getTaskId(), task);
+                this.runners.put(Integer.valueOf(task.getTaskId()), task);
             }
         }
         // We split this because of the way things are ordered for all of the async calls in CraftScheduler
diff --git a/src/main/java/org/bukkit/craftbukkit/util/CraftChatMessage.java b/src/main/java/org/bukkit/craftbukkit/util/CraftChatMessage.java
index 802062886e741b6d6943b69a7b62dea66399483f..3aa444a60cf828493ed4a1908d832202c7ec4e55 100644
--- a/src/main/java/org/bukkit/craftbukkit/util/CraftChatMessage.java
+++ b/src/main/java/org/bukkit/craftbukkit/util/CraftChatMessage.java
@@ -32,13 +32,13 @@ public final class CraftChatMessage {
     static {
         Builder<Character, ChatFormatting> builder = ImmutableMap.builder();
         for (ChatFormatting format : ChatFormatting.values()) {
-            builder.put(Character.toLowerCase(format.toString().charAt(1)), format);
+            builder.put(Character.valueOf(Character.toLowerCase(format.toString().charAt(1))), format);
         }
         formatMap = builder.build();
     }
 
     public static ChatFormatting getColor(@NotNull ChatColor color) {
-        return CraftChatMessage.formatMap.get(color.getChar());
+        return CraftChatMessage.formatMap.get(Character.valueOf(color.getChar()));
     }
 
     public static @Nullable ChatColor getColor(@NotNull ChatFormatting format) {
@@ -50,8 +50,8 @@ public final class CraftChatMessage {
         // Separate pattern with no group 3, new lines are part of previous string
         private static final Pattern INCREMENTAL_PATTERN_KEEP_NEWLINES = Pattern.compile("(" + String.valueOf(org.bukkit.ChatColor.COLOR_CHAR) + "[0-9a-fk-orx])|((?:(?:https?):\\/\\/)?(?:[-\\w_\\.]{2,}\\.[a-z]{2,4}.*?(?=[\\.\\?!,;:]?(?:[" + String.valueOf(org.bukkit.ChatColor.COLOR_CHAR) + " ]|$))))", Pattern.CASE_INSENSITIVE);
         // ChatColor.b does not explicitly reset, its more of empty
-        private static final Style EMPTY = Style.EMPTY.withItalic(false); // Paper - OBFHELPER
-        private static final Style RESET = Style.EMPTY.withBold(false).withItalic(false).withUnderlined(false).withStrikethrough(false).withObfuscated(false);
+        private static final Style EMPTY = Style.EMPTY.withItalic(Boolean.FALSE); // Paper - OBFHELPER
+        private static final Style RESET = Style.EMPTY.withBold(Boolean.FALSE).withItalic(Boolean.FALSE).withUnderlined(Boolean.FALSE).withStrikethrough(Boolean.FALSE).withObfuscated(Boolean.FALSE);
 
         private final List<Component> list = new ArrayList<Component>();
         private @Nullable MutableComponent currentChatComponent = Component.empty();
@@ -86,7 +86,7 @@ public final class CraftChatMessage {
                 switch (groupId) {
                 case 1:
                     char c = match.toLowerCase(java.util.Locale.ENGLISH).charAt(1);
-                    ChatFormatting format = CraftChatMessage.formatMap.get(c);
+                    ChatFormatting format = CraftChatMessage.formatMap.get(Character.valueOf(c));
 
                     if (c == 'x') {
                         this.hex = new StringBuilder("#");
@@ -123,19 +123,19 @@ public final class CraftChatMessage {
                         modifier = (!hasReset ? RESET : EMPTY).withColor(format);
                         hasReset = true;
                         if (previous.isBold()) {
-                            modifier = modifier.withBold(false);
+                            modifier = modifier.withBold(Boolean.FALSE);
                         }
                         if (previous.isItalic()) {
-                            modifier = modifier.withItalic(false);
+                            modifier = modifier.withItalic(Boolean.FALSE);
                         }
                         if (previous.isObfuscated()) {
-                            modifier = modifier.withObfuscated(false);
+                            modifier = modifier.withObfuscated(Boolean.FALSE);
                         }
                         if (previous.isStrikethrough()) {
-                            modifier = modifier.withStrikethrough(false);
+                            modifier = modifier.withStrikethrough(Boolean.FALSE);
                         }
                         if (previous.isUnderlined()) {
-                            modifier = modifier.withUnderlined(false);
+                            modifier = modifier.withUnderlined(Boolean.FALSE);
                         }
                         // Paper end
                     }
diff --git a/src/main/java/org/spigotmc/Metrics.java b/src/main/java/org/spigotmc/Metrics.java
index 615967bca1f8257f30dedee00428e237afe69a12..dee69b35186f6387c6d14979588088a3a8a87977 100644
--- a/src/main/java/org/spigotmc/Metrics.java
+++ b/src/main/java/org/spigotmc/Metrics.java
@@ -126,9 +126,9 @@ public class Metrics {
         this.configuration = YamlConfiguration.loadConfiguration(configurationFile);
 
         // add some defaults
-        this.configuration.addDefault("opt-out", false);
+        this.configuration.addDefault("opt-out", Boolean.FALSE);
         this.configuration.addDefault("guid", UUID.randomUUID().toString());
-        this.configuration.addDefault("debug", false);
+        this.configuration.addDefault("debug", Boolean.FALSE);
 
         // Do we need to create the file?
         if (this.configuration.get("guid", null) == null) {
@@ -288,7 +288,7 @@ public class Metrics {
         synchronized (this.optOutLock) {
             // Check if the server owner has already set opt-out, if not, set it.
             if (this.isOptOut()) {
-                this.configuration.set("opt-out", false);
+                this.configuration.set("opt-out", Boolean.FALSE);
                 this.configuration.save(configurationFile);
             }
 
@@ -309,7 +309,7 @@ public class Metrics {
         synchronized (this.optOutLock) {
             // Check if the server owner has already set opt-out, if not, set it.
             if (!this.isOptOut()) {
-                this.configuration.set("opt-out", true);
+                this.configuration.set("opt-out", Boolean.TRUE);
                 this.configuration.save(configurationFile);
             }
 
diff --git a/src/main/java/org/spigotmc/SpigotConfig.java b/src/main/java/org/spigotmc/SpigotConfig.java
index 3705b4196369f7e92de8f04789bec5c2e267e338..7babf3a65809f1cb2339df02df1b5fe204167ef5 100644
--- a/src/main/java/org/spigotmc/SpigotConfig.java
+++ b/src/main/java/org/spigotmc/SpigotConfig.java
@@ -75,7 +75,7 @@ public class SpigotConfig
         SpigotConfig.commands.put( "spigot", new SpigotCommand( "spigot" ) );
 
         SpigotConfig.version = SpigotConfig.getInt( "config-version", 12 );
-        SpigotConfig.set( "config-version", 12 );
+        SpigotConfig.set( "config-version", Integer.valueOf(12));
         SpigotConfig.readConfig( SpigotConfig.class, null );
     }
 
@@ -144,13 +144,13 @@ public class SpigotConfig
 
     private static boolean getBoolean(@NotNull String path, boolean def)
     {
-        SpigotConfig.config.addDefault( path, def );
+        SpigotConfig.config.addDefault( path, Boolean.valueOf(def));
         return SpigotConfig.config.getBoolean( path, SpigotConfig.config.getBoolean( path ) );
     }
 
     private static int getInt(@NotNull String path, int def)
     {
-        SpigotConfig.config.addDefault( path, def );
+        SpigotConfig.config.addDefault( path, Integer.valueOf(def));
         return SpigotConfig.config.getInt( path, SpigotConfig.config.getInt( path ) );
     }
 
@@ -168,7 +168,7 @@ public class SpigotConfig
 
     private static double getDouble(@NotNull String path, double def)
     {
-        SpigotConfig.config.addDefault( path, def );
+        SpigotConfig.config.addDefault( path, Double.valueOf(def));
         return SpigotConfig.config.getDouble( path, SpigotConfig.config.getDouble( path ) );
     }
 
@@ -187,10 +187,10 @@ public class SpigotConfig
             boolean oldValue = SpigotConfig.getBoolean( "commands.tab-complete", true );
             if ( oldValue )
             {
-                SpigotConfig.set( "commands.tab-complete", 0 );
+                SpigotConfig.set( "commands.tab-complete", Integer.valueOf(0));
             } else
             {
-                SpigotConfig.set( "commands.tab-complete", -1 );
+                SpigotConfig.set( "commands.tab-complete", Integer.valueOf(-1));
             }
         }
         SpigotConfig.tabComplete = SpigotConfig.getInt( "commands.tab-complete", 0 );
@@ -239,7 +239,7 @@ public class SpigotConfig
     private static void bungee() {
         if ( SpigotConfig.version < 4 )
         {
-            SpigotConfig.set( "settings.bungeecord", false );
+            SpigotConfig.set( "settings.bungeecord", Boolean.FALSE);
             System.out.println( "Oudated config, disabling BungeeCord support!" );
         }
         SpigotConfig.bungee = SpigotConfig.getBoolean( "settings.bungeecord", false );
@@ -249,7 +249,7 @@ public class SpigotConfig
     {
         int count = SpigotConfig.getInt( "settings.netty-threads", 4 );
         System.setProperty( "io.netty.eventLoopThreads", Integer.toString( count ) );
-        Bukkit.getLogger().log( Level.INFO, "Using {0} threads for Netty based IO", count );
+        Bukkit.getLogger().log( Level.INFO, "Using {0} threads for Netty based IO", Integer.valueOf(count));
     }
 
     public static boolean disableStatSaving;
@@ -275,7 +275,7 @@ public class SpigotConfig
                         Bukkit.getLogger().log(Level.WARNING, "Ignoring non existent stats.forced-stats " + name);
                         continue;
                     }
-                    SpigotConfig.forcedStats.put( key, section.getInt( name ) );
+                    SpigotConfig.forcedStats.put( key, Integer.valueOf(section.getInt(name)));
                 } catch (Exception ex)
                 {
                     Bukkit.getLogger().log(Level.WARNING, "Ignoring invalid stats.forced-stats " + name);
@@ -293,7 +293,7 @@ public class SpigotConfig
     private static void playerSample()
     {
         SpigotConfig.playerSample = Math.max( SpigotConfig.getInt( "settings.sample-count", 12 ), 0 ); // Paper - Avoid negative counts
-        Bukkit.getLogger().log( Level.INFO, "Server Ping Player Sample Count: {0}", playerSample ); // Paper - Use logger
+        Bukkit.getLogger().log( Level.INFO, "Server Ping Player Sample Count: {0}", Integer.valueOf(playerSample)); // Paper - Use logger
     }
 
     public static int playerShuffle;
diff --git a/src/main/java/org/spigotmc/SpigotWorldConfig.java b/src/main/java/org/spigotmc/SpigotWorldConfig.java
index 387ffe9c15fc2edd45f94d0580f1073f00265d6f..b340f66db696f8b72754b6ae1d572289fbcfd49c 100644
--- a/src/main/java/org/spigotmc/SpigotWorldConfig.java
+++ b/src/main/java/org/spigotmc/SpigotWorldConfig.java
@@ -44,13 +44,13 @@ public class SpigotWorldConfig
 
     public boolean getBoolean(String path, boolean def)
     {
-        this.config.addDefault( "world-settings.default." + path, def );
+        this.config.addDefault( "world-settings.default." + path, Boolean.valueOf(def));
         return this.config.getBoolean( "world-settings." + this.worldName + "." + path, this.config.getBoolean( "world-settings.default." + path ) );
     }
 
     public double getDouble(String path, double def)
     {
-        this.config.addDefault( "world-settings.default." + path, def );
+        this.config.addDefault( "world-settings.default." + path, Double.valueOf(def));
         return this.config.getDouble( "world-settings." + this.worldName + "." + path, this.config.getDouble( "world-settings.default." + path ) );
     }
 
@@ -66,7 +66,7 @@ public class SpigotWorldConfig
     }
     public int getInt(String path, int def, boolean setDef)
     {
-        if (setDef) this.config.addDefault( "world-settings.default." + path, def );
+        if (setDef) this.config.addDefault( "world-settings.default." + path, Integer.valueOf(def));
         return this.config.getInt( "world-settings." + this.worldName + "." + path, this.config.getInt( "world-settings.default." + path, def ) );
         // Paper end
     }
@@ -294,7 +294,7 @@ public class SpigotWorldConfig
         this.hopperTransfer = this.getInt( "ticks-per.hopper-transfer", 8 );
         if ( SpigotConfig.version < 11 )
         {
-            this.set( "ticks-per.hopper-check", 1 );
+            this.set( "ticks-per.hopper-check", Integer.valueOf(1));
         }
         this.hopperCheck = this.getInt( "ticks-per.hopper-check", 1 );
         this.hopperAmount = this.getInt( "hopper-amount", 1 );
@@ -415,8 +415,8 @@ public class SpigotWorldConfig
         {
             this.set( "hunger.walk-exhaustion", null );
             this.set( "hunger.sprint-exhaustion", null );
-            this.set( "hunger.combat-exhaustion", 0.1 );
-            this.set( "hunger.regen-exhaustion", 6.0 );
+            this.set( "hunger.combat-exhaustion", Double.valueOf(0.1));
+            this.set( "hunger.regen-exhaustion", Double.valueOf(6.0));
         }
 
         this.jumpWalkExhaustion = (float) this.getDouble( "hunger.jump-walk-exhaustion", 0.05 );
@@ -433,7 +433,7 @@ public class SpigotWorldConfig
     private void maxTntPerTick() {
         if ( SpigotConfig.version < 7 )
         {
-            this.set( "max-tnt-per-tick", 100 );
+            this.set( "max-tnt-per-tick", Integer.valueOf(100));
         }
         this.maxTntTicksPerTick = this.getInt( "max-tnt-per-tick", 100 );
         this.log( "Max TNT Explosions: " + this.maxTntTicksPerTick );
