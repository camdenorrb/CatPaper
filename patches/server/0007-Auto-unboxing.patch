From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: camdenorrb <me@12oclock.dev>
Date: Sat, 22 Oct 2022 02:56:32 -0500
Subject: [PATCH] Auto unboxing


diff --git a/src/main/java/alternate/current/wire/WireNode.java b/src/main/java/alternate/current/wire/WireNode.java
index f1a38252812a1b3bd92ac8e03cc6b3d62974e595..3e772ca9d9c94974a464d8f62c08f7c7e1f5f6ad 100644
--- a/src/main/java/alternate/current/wire/WireNode.java
+++ b/src/main/java/alternate/current/wire/WireNode.java
@@ -57,7 +57,7 @@ public class WireNode extends Node {
 
         this.connections = new WireConnectionManager(this);
 
-        this.virtualPower = this.currentPower = this.state.getValue(RedStoneWireBlock.POWER);
+        this.virtualPower = this.currentPower = this.state.<Integer>getValue(RedStoneWireBlock.POWER).intValue();
         this.priority = priority();
     }
 
diff --git a/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V1506.java b/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V1506.java
index 6df567c6ec99feb73514962b06a3f296fd61381a..2a29d31e360808e203003bbd2bb005b1fcc97484 100644
--- a/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V1506.java
+++ b/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V1506.java
@@ -182,7 +182,7 @@ public final class V1506 {
             structures.put("village", Maps.newHashMap());
         }
 
-        final T layerTag = ops.createList(layers.stream().map((param1x) -> ops.createMap(ImmutableMap.of(ops.createString("height"), ops.createInt(param1x.getFirst()), ops.createString("block"), ops.createString(param1x.getSecond())))));
+        final T layerTag = ops.createList(layers.stream().map((param1x) -> ops.createMap(ImmutableMap.of(ops.createString("height"), ops.createInt(param1x.getFirst().intValue()), ops.createString("block"), ops.createString(param1x.getSecond())))));
         final T structuresTag = ops.createMap(structures.entrySet().stream().map((param1x) -> Pair.of(ops.createString(param1x.getKey().toLowerCase(Locale.ROOT)), ops.createMap(param1x.getValue().entrySet().stream().map((param1xx) -> Pair.of(ops.createString(param1xx.getKey()), ops.createString(param1xx.getValue()))).collect(Collectors.toMap(Pair::getFirst, Pair::getSecond))))).collect(Collectors.toMap(Pair::getFirst, Pair::getSecond)));
         return new Dynamic<>(ops, ops.createMap(ImmutableMap.of(ops.createString("layers"), layerTag, ops.createString("biome"), ops.createString(biome), ops.createString("structures"), structuresTag)));
     }
diff --git a/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V2832.java b/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V2832.java
index 9cb1677d0d25319edae45ab4e58a6bd1adaa3f1e..1865012ff9734c5cfa28108d3eb1a5707f4ec319 100644
--- a/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V2832.java
+++ b/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V2832.java
@@ -467,7 +467,7 @@ public final class V2832 {
                 predictChunkStatusBeforeSurface(level, allBlocks);
 
                 // done with sections, update the rest of the chunk
-                updateChunkData(level, isOverworld, isAlreadyExtended.getValue(), "minecraft:noise".equals(generator), bottomSection);
+                updateChunkData(level, isOverworld, isAlreadyExtended.getValue().booleanValue(), "minecraft:noise".equals(generator), bottomSection);
 
                 return null;
             }
diff --git a/src/main/java/ca/spottedleaf/dataconverter/util/Int2IntArraySortedMap.java b/src/main/java/ca/spottedleaf/dataconverter/util/Int2IntArraySortedMap.java
index dd03889853ad315176553898fa2960ee561cede0..d74d7770817848df46015613bbc0acdbc6bc5c8b 100644
--- a/src/main/java/ca/spottedleaf/dataconverter/util/Int2IntArraySortedMap.java
+++ b/src/main/java/ca/spottedleaf/dataconverter/util/Int2IntArraySortedMap.java
@@ -56,7 +56,7 @@ public class Int2IntArraySortedMap {
 
         this.key[insert] = key;
 
-        return this.val[insert] = producer.apply(Integer.valueOf(key));
+        return this.val[insert] = producer.apply(Integer.valueOf(key)).intValue();
     }
 
     public int get(final int key) {
diff --git a/src/main/java/ca/spottedleaf/dataconverter/util/Long2IntArraySortedMap.java b/src/main/java/ca/spottedleaf/dataconverter/util/Long2IntArraySortedMap.java
index c7a23fe6928fa461b109d017022f0f446bbe5b93..c39e60dc81f00533a285d73454a67b3ba96c953e 100644
--- a/src/main/java/ca/spottedleaf/dataconverter/util/Long2IntArraySortedMap.java
+++ b/src/main/java/ca/spottedleaf/dataconverter/util/Long2IntArraySortedMap.java
@@ -56,7 +56,7 @@ public class Long2IntArraySortedMap {
 
         this.key[insert] = key;
 
-        return this.val[insert] = producer.apply(Long.valueOf(key));
+        return this.val[insert] = producer.apply(Long.valueOf(key)).intValue();
     }
 
     public int get(final long key) {
diff --git a/src/main/java/co/aikar/timings/TimingsExport.java b/src/main/java/co/aikar/timings/TimingsExport.java
index d5b45cd14a63c5eafe319da49ce81f485290e86b..fb8f300df047822df9a8fcbf8769bb32a47714c7 100644
--- a/src/main/java/co/aikar/timings/TimingsExport.java
+++ b/src/main/java/co/aikar/timings/TimingsExport.java
@@ -219,7 +219,7 @@ public class TimingsExport extends Thread {
         parent.put("idmap", createObject(
             pair("groups", groupData),
             pair("handlers", handlers),
-            pair("worlds", toObjectMapper(TimingHistory.worldMap.entrySet(), input -> pair(input.getValue(), input.getKey()))),
+            pair("worlds", toObjectMapper(TimingHistory.worldMap.entrySet(), input -> pair(input.getValue().longValue(), input.getKey()))),
             pair("tileentity",
                 toObjectMapper(tileEntityTypeSet, input -> pair(input.ordinal(), input.name()))),
             pair("entity",
diff --git a/src/main/java/com/destroystokyo/paper/Metrics.java b/src/main/java/com/destroystokyo/paper/Metrics.java
index e03fdd5cbd43357dbac73b778b532e523a3b61a2..f1378e589396a621c59015e6482d6dda3c35e4aa 100644
--- a/src/main/java/com/destroystokyo/paper/Metrics.java
+++ b/src/main/java/com/destroystokyo/paper/Metrics.java
@@ -334,7 +334,7 @@ public class Metrics {
             }
             boolean allSkipped = true;
             for (Map.Entry<String, Integer> entry : map.entrySet()) {
-                if (entry.getValue() == 0) {
+                if (entry.getValue().intValue() == 0) {
                     continue; // Skip this invalid
                 }
                 allSkipped = false;
@@ -419,7 +419,7 @@ public class Metrics {
         @Override
         protected @Nullable JSONObject getChartData() throws Exception {
             JSONObject data = new JSONObject();
-            int value = callable.call();
+            int value = callable.call().intValue();
             if (value == 0) {
                 // Null = skip the chart
                 return null;
@@ -459,7 +459,7 @@ public class Metrics {
             }
             boolean allSkipped = true;
             for (Map.Entry<String, Integer> entry : map.entrySet()) {
-                if (entry.getValue() == 0) {
+                if (entry.getValue().intValue() == 0) {
                     continue; // Skip this invalid
                 }
                 allSkipped = false;
diff --git a/src/main/java/com/destroystokyo/paper/loottable/PaperLootableInventoryData.java b/src/main/java/com/destroystokyo/paper/loottable/PaperLootableInventoryData.java
index 5b86a1a90daf416d650a2ebe9db458f917a9b404..3923eb45e462b37aa50a7852bc87c2053d8e4f60 100644
--- a/src/main/java/com/destroystokyo/paper/loottable/PaperLootableInventoryData.java
+++ b/src/main/java/com/destroystokyo/paper/loottable/PaperLootableInventoryData.java
@@ -147,7 +147,7 @@ public class PaperLootableInventoryData {
             for (Map.Entry<UUID, Long> entry : this.lootedPlayers.entrySet()) {
                 CompoundTag cmp = new CompoundTag();
                 cmp.putUUID("UUID", entry.getKey());
-                cmp.putLong("Time", entry.getValue());
+                cmp.putLong("Time", entry.getValue().longValue());
                 list.add(cmp);
             }
             comp.put("lootedPlayers", list);
diff --git a/src/main/java/com/mojang/datafixers/DataFixerBuilder.java b/src/main/java/com/mojang/datafixers/DataFixerBuilder.java
index 565168f725a5379e752d588f64e797e9fb5da7e3..a975cf6f002be12f7296f2f5ac8e92b36c9bda46 100644
--- a/src/main/java/com/mojang/datafixers/DataFixerBuilder.java
+++ b/src/main/java/com/mojang/datafixers/DataFixerBuilder.java
@@ -32,7 +32,7 @@ public class DataFixerBuilder {
     private final int minDataFixPrecacheVersion; // Paper
 
     public DataFixerBuilder(final int dataVersion) {
-        minDataFixPrecacheVersion = Integer.getInteger("Paper.minPrecachedDatafixVersion", dataVersion+1) * 10; // Paper - default to precache nothing - mojang stores versions * 10 to allow for 'sub versions'
+        minDataFixPrecacheVersion = Integer.getInteger("Paper.minPrecachedDatafixVersion", dataVersion + 1).intValue() * 10; // Paper - default to precache nothing - mojang stores versions * 10 to allow for 'sub versions'
         this.dataVersion = dataVersion;
     }
 
diff --git a/src/main/java/io/papermc/paper/adventure/PaperAdventure.java b/src/main/java/io/papermc/paper/adventure/PaperAdventure.java
index 147d049c472bf1f8caf9f91ba7c217b9ff06d01f..30c0938272aab0bc7c9f9c65fd7423fc8723640e 100644
--- a/src/main/java/io/papermc/paper/adventure/PaperAdventure.java
+++ b/src/main/java/io/papermc/paper/adventure/PaperAdventure.java
@@ -345,7 +345,7 @@ public final class PaperAdventure {
         if (color == null) {
             throw new IllegalArgumentException("Not a valid color");
         }
-        return TextColor.color(color);
+        return TextColor.color(color.intValue());
     }
 
     public static @Nullable ChatFormatting asVanilla(final @NotNull TextColor color) {
diff --git a/src/main/java/io/papermc/paper/chunk/system/scheduling/ChunkTaskScheduler.java b/src/main/java/io/papermc/paper/chunk/system/scheduling/ChunkTaskScheduler.java
index 3634983f8af80da0019f2e0bc4880e781cabdbf7..d5ba9099e36c887567a931680201890353b19a8b 100644
--- a/src/main/java/io/papermc/paper/chunk/system/scheduling/ChunkTaskScheduler.java
+++ b/src/main/java/io/papermc/paper/chunk/system/scheduling/ChunkTaskScheduler.java
@@ -70,7 +70,7 @@ public final class ChunkTaskScheduler {
         } else {
             defaultWorkerThreads = defaultWorkerThreads / 2;
         }
-        defaultWorkerThreads = Integer.getInteger("Paper.WorkerThreadCount", Integer.valueOf(defaultWorkerThreads));
+        defaultWorkerThreads = Integer.getInteger("Paper.WorkerThreadCount", Integer.valueOf(defaultWorkerThreads)).intValue();
 
         if (newChunkSystemWorkerThreads < 0) {
             newChunkSystemWorkerThreads = defaultWorkerThreads;
diff --git a/src/main/java/io/papermc/paper/command/subcommands/EntityCommand.java b/src/main/java/io/papermc/paper/command/subcommands/EntityCommand.java
index 6dc2082e2fe59555c71b657cb028789a0e11ed86..12b8ba49136b83646906eef9664332345466f08f 100644
--- a/src/main/java/io/papermc/paper/command/subcommands/EntityCommand.java
+++ b/src/main/java/io/papermc/paper/command/subcommands/EntityCommand.java
@@ -101,7 +101,7 @@ public final class EntityCommand implements PaperSubcommand {
 
                 MutablePair<Integer, Map<ChunkPos, Integer>> info = list.computeIfAbsent(key, k -> MutablePair.of(Integer.valueOf(0), Maps.newHashMap()));
                 ChunkPos chunk = e.chunkPosition();
-                info.left++;
+                info.left = info.left.intValue() + 1;
                 info.right.put(chunk, Integer.valueOf(info.right.getOrDefault(chunk, Integer.valueOf(0)) + 1));
                 if (!chunkProviderServer.isPositionTicking(e) || e instanceof net.minecraft.world.entity.Marker) { // Markers aren't ticked.
                     nonEntityTicking.merge(key, Integer.valueOf(1), Integer::sum);
@@ -110,20 +110,20 @@ public final class EntityCommand implements PaperSubcommand {
             if (names.size() == 1) {
                 ResourceLocation name = names.iterator().next();
                 Pair<Integer, Map<ChunkPos, Integer>> info = list.get(name);
-                int nonTicking = nonEntityTicking.getOrDefault(name, Integer.valueOf(0));
+                int nonTicking = nonEntityTicking.getOrDefault(name, Integer.valueOf(0)).intValue();
                 if (info == null) {
                     sender.sendMessage(text("No entities found.", RED));
                     return;
                 }
-                sender.sendMessage("Entity: " + name + " Total Ticking: " + (info.getLeft() - nonTicking) + ", Total Non-Ticking: " + nonTicking);
+                sender.sendMessage("Entity: " + name + " Total Ticking: " + (info.getLeft().intValue() - nonTicking) + ", Total Non-Ticking: " + nonTicking);
                 info.getRight().entrySet().stream()
-                    .sorted((a, b) -> !a.getValue().equals(b.getValue()) ? b.getValue() - a.getValue() : a.getKey().toString().compareTo(b.getKey().toString()))
+                    .sorted((a, b) -> !a.getValue().equals(b.getValue()) ? b.getValue().intValue() - a.getValue().intValue() : a.getKey().toString().compareTo(b.getKey().toString()))
                     .limit(10).forEach(e -> sender.sendMessage("  " + e.getValue() + ": " + e.getKey().x + ", " + e.getKey().z + (chunkProviderServer.isPositionTicking(e.getKey().toLong()) ? " (Ticking)" : " (Non-Ticking)")));
             } else {
                 List<Pair<ResourceLocation, Integer>> info = list.entrySet().stream()
                     .filter(e -> names.contains(e.getKey()))
                     .map(e -> Pair.of(e.getKey(), e.getValue().left))
-                    .sorted((a, b) -> !a.getRight().equals(b.getRight()) ? b.getRight() - a.getRight() : a.getKey().toString().compareTo(b.getKey().toString()))
+                    .sorted((a, b) -> !a.getRight().equals(b.getRight()) ? b.getRight().intValue() - a.getRight().intValue() : a.getKey().toString().compareTo(b.getKey().toString()))
                     .toList();
 
                 if (info.isEmpty()) {
@@ -135,8 +135,8 @@ public final class EntityCommand implements PaperSubcommand {
                 int nonTickingCount = nonEntityTicking.values().stream().mapToInt(Integer::intValue).sum();
                 sender.sendMessage("Total Ticking: " + (count - nonTickingCount) + ", Total Non-Ticking: " + nonTickingCount);
                 info.forEach(e -> {
-                    int nonTicking = nonEntityTicking.getOrDefault(e.getKey(), Integer.valueOf(0));
-                    sender.sendMessage("  " + (e.getValue() - nonTicking) + " (" + nonTicking + ") " + ": " + e.getKey());
+                    int nonTicking = nonEntityTicking.getOrDefault(e.getKey(), Integer.valueOf(0)).intValue();
+                    sender.sendMessage("  " + (e.getValue().intValue() - nonTicking) + " (" + nonTicking + ") " + ": " + e.getKey());
                 });
                 sender.sendMessage("* First number is ticking entities, second number is non-ticking entities");
             }
diff --git a/src/main/java/io/papermc/paper/configuration/serializer/EngineModeSerializer.java b/src/main/java/io/papermc/paper/configuration/serializer/EngineModeSerializer.java
index d9725fd1142dada62ceb1840db7396b0c08428ab..473ca6d15d811a996a9120f376e7bbcc1203ec4a 100644
--- a/src/main/java/io/papermc/paper/configuration/serializer/EngineModeSerializer.java
+++ b/src/main/java/io/papermc/paper/configuration/serializer/EngineModeSerializer.java
@@ -17,7 +17,7 @@ public final class EngineModeSerializer extends ScalarSerializer<EngineMode> {
     public EngineMode deserialize(Type type, Object obj) throws SerializationException {
         if (obj instanceof Integer id) {
             try {
-                return EngineMode.valueOf(id);
+                return EngineMode.valueOf(id.intValue());
             } catch (IllegalArgumentException e) {
                 throw new SerializationException(id + " is not a valid id for type " + type + " for this node");
             }
diff --git a/src/main/java/io/papermc/paper/configuration/transformation/global/LegacyPaperConfig.java b/src/main/java/io/papermc/paper/configuration/transformation/global/LegacyPaperConfig.java
index 85beb9a932639c4e65c7329a4bc5f1055ee94a23..35310cc60a7e9655df264ee8d3c914bef9a72e6f 100644
--- a/src/main/java/io/papermc/paper/configuration/transformation/global/LegacyPaperConfig.java
+++ b/src/main/java/io/papermc/paper/configuration/transformation/global/LegacyPaperConfig.java
@@ -90,7 +90,7 @@ public final class LegacyPaperConfig {
             })
             .addAction(path("settings", "log-named-entity-deaths"), (path, value) -> {
                 final @Nullable Object val = value.raw();
-                if (val instanceof Boolean bool && !bool) {
+                if (val instanceof Boolean bool && !bool.booleanValue()) {
                     spigotConfiguration.set("settings.log-named-deaths", Boolean.FALSE);
                 }
                 value.raw(null);
diff --git a/src/main/java/io/papermc/paper/configuration/type/BooleanOrDefault.java b/src/main/java/io/papermc/paper/configuration/type/BooleanOrDefault.java
index d9fcbb636451c1af40ae8177f7f4740b946ac25e..5f9716a7d780bd2880a931b0a9cf22b0049eb82c 100644
--- a/src/main/java/io/papermc/paper/configuration/type/BooleanOrDefault.java
+++ b/src/main/java/io/papermc/paper/configuration/type/BooleanOrDefault.java
@@ -15,7 +15,7 @@ public record BooleanOrDefault(@Nullable Boolean value) {
     public static final ScalarSerializer<BooleanOrDefault> SERIALIZER = new Serializer();
 
     public boolean or(boolean fallback) {
-        return this.value != null && this.value;
+        return this.value != null && this.value.booleanValue();
     }
 
     private static final class Serializer extends ScalarSerializer<BooleanOrDefault> {
diff --git a/src/main/java/io/papermc/paper/configuration/type/fallback/FallbackValue.java b/src/main/java/io/papermc/paper/configuration/type/fallback/FallbackValue.java
index da4db0dacbf7079f665eb133752df485d72617a3..a4877a5a0bc353e06a2eb0dab108be4855a795cd 100644
--- a/src/main/java/io/papermc/paper/configuration/type/fallback/FallbackValue.java
+++ b/src/main/java/io/papermc/paper/configuration/type/fallback/FallbackValue.java
@@ -77,7 +77,7 @@ public sealed abstract class FallbackValue permits FallbackValue.Int {
                     return OptionalInt.of(Integer.parseInt(string));
                 }
             } else if (obj instanceof Integer num) {
-                return OptionalInt.of(num);
+                return OptionalInt.of(num.intValue());
             }
             throw new SerializationException(obj + " is not a integer or '" + DEFAULT_VALUE + "'");
         }
diff --git a/src/main/java/io/papermc/paper/console/HexFormattingConverter.java b/src/main/java/io/papermc/paper/console/HexFormattingConverter.java
index 3f5638c3d5e9696104a841c5ff2dbe34fb43af78..c15ad56e88d0a6d9c0d97a94023abc44d0ef288a 100644
--- a/src/main/java/io/papermc/paper/console/HexFormattingConverter.java
+++ b/src/main/java/io/papermc/paper/console/HexFormattingConverter.java
@@ -137,7 +137,7 @@ public final class HexFormattingConverter extends LogEventPatternConverter {
 
     private static String convertRGBColors(final @NotNull String input) {
         return RGB_PATTERN.matcher(input).replaceAll(result -> {
-            final int hex = Integer.decode(result.group().substring(1));
+            final int hex = Integer.decode(result.group().substring(1)).intValue();
             return formatHexAnsi(hex);
         });
     }
diff --git a/src/main/java/io/papermc/paper/logging/SysoutCatcher.java b/src/main/java/io/papermc/paper/logging/SysoutCatcher.java
index 76d0d00cd6742991e3f3ec827a75ee87d856b6c9..4f624d754d8f47995b4dbcc54979394d5a500aa6 100644
--- a/src/main/java/io/papermc/paper/logging/SysoutCatcher.java
+++ b/src/main/java/io/papermc/paper/logging/SysoutCatcher.java
@@ -18,10 +18,10 @@ public final class SysoutCatcher {
     // Nanoseconds between nag at most; if interval is caught first, this is reset.
     // <= 0 for disabling.
     private static final long NAG_TIMEOUT = TimeUnit.MILLISECONDS.toNanos(
-        Long.getLong("io.papermc.paper.sout.nags.timeout", TimeUnit.MINUTES.toMillis(5L)));
+	    Long.getLong("io.papermc.paper.sout.nags.timeout", TimeUnit.MINUTES.toMillis(5L)).longValue());
     // Count since last nag; if timeout is first, this is reset.
     // <= 0 for disabling.
-    private static final long NAG_INTERVAL = Long.getLong("io.papermc.paper.sout.nags.interval", 200L);
+    private static final long NAG_INTERVAL = Long.getLong("io.papermc.paper.sout.nags.interval", 200L).longValue();
 
     // We don't particularly care about how correct this is at any given moment; let's do it on a best attempt basis.
     // The records are also pretty small, so let's just go for a size of 64 to start...
diff --git a/src/main/java/net/minecraft/ChatFormatting.java b/src/main/java/net/minecraft/ChatFormatting.java
index 19cca9f826d478c4a75aa5a048fb1cf20e2aa923..8205af621b62c13e1e4a9927f2b470d1ba6038ab 100644
--- a/src/main/java/net/minecraft/ChatFormatting.java
+++ b/src/main/java/net/minecraft/ChatFormatting.java
@@ -116,7 +116,7 @@ public enum ChatFormatting implements StringRepresentable {
     // Paper start
     @Nullable public static ChatFormatting getByHexValue(int i) {
         for (ChatFormatting value : values()) {
-            if (value.getColor() != null && value.getColor() == i) {
+            if (value.getColor() != null && value.getColor().intValue() == i) {
                 return value;
             }
         }
diff --git a/src/main/java/net/minecraft/Util.java b/src/main/java/net/minecraft/Util.java
index 702807e78ee87960b5eaf5cecfe5c570fdf8c075..59a06424817cf2e8a2fe532ed9e49cb3e8e398d4 100644
--- a/src/main/java/net/minecraft/Util.java
+++ b/src/main/java/net/minecraft/Util.java
@@ -159,7 +159,7 @@ public class Util {
         }
         i = Math.min(8, i);
         // Paper end - also try to avoid suffocating the system with the worldgen workers
-        i = Integer.getInteger("Paper.WorkerThreadCount", i);
+        i = Integer.getInteger("Paper.WorkerThreadCount", i).intValue();
         ExecutorService executorService;
 
         if (i <= 0) {
diff --git a/src/main/java/net/minecraft/commands/arguments/blocks/BlockStateParser.java b/src/main/java/net/minecraft/commands/arguments/blocks/BlockStateParser.java
index 5051993118520cac899aa441097f7186f6978c80..12066f2fc67b348e2e568a8e9889b2cfc25d58c3 100644
--- a/src/main/java/net/minecraft/commands/arguments/blocks/BlockStateParser.java
+++ b/src/main/java/net/minecraft/commands/arguments/blocks/BlockStateParser.java
@@ -281,7 +281,7 @@ public class BlockStateParser {
             if (t0 instanceof Integer) {
                 Integer integer = (Integer) t0;
 
-                builder.suggest(integer);
+                builder.suggest(integer.intValue());
             } else {
                 builder.suggest(property.getName(t0));
             }
diff --git a/src/main/java/net/minecraft/commands/arguments/selector/EntitySelectorParser.java b/src/main/java/net/minecraft/commands/arguments/selector/EntitySelectorParser.java
index 7897c132331a7a276dd5932ae9f2ecfb61fee5bc..2dba694477d7b77bdf6c4e8bfe4f1bdfe18d5c55 100644
--- a/src/main/java/net/minecraft/commands/arguments/selector/EntitySelectorParser.java
+++ b/src/main/java/net/minecraft/commands/arguments/selector/EntitySelectorParser.java
@@ -144,14 +144,14 @@ public class EntitySelectorParser {
 
         if (this.deltaX == null && this.deltaY == null && this.deltaZ == null) {
             if (this.distance.getMax() != null) {
-                double d0 = (Double) this.distance.getMax();
+                double d0 = ((Double) this.distance.getMax()).doubleValue();
 
                 axisalignedbb = new AABB(-d0, -d0, -d0, d0 + 1.0D, d0 + 1.0D, d0 + 1.0D);
             } else {
                 axisalignedbb = null;
             }
         } else {
-            axisalignedbb = this.createAabb(this.deltaX == null ? 0.0D : this.deltaX, this.deltaY == null ? 0.0D : this.deltaY, this.deltaZ == null ? 0.0D : this.deltaZ);
+            axisalignedbb = this.createAabb(this.deltaX == null ? 0.0D : this.deltaX.doubleValue(), this.deltaY == null ? 0.0D : this.deltaY.doubleValue(), this.deltaZ == null ? 0.0D : this.deltaZ.doubleValue());
         }
 
         Function<Vec3, Vec3> function; // CraftBukkit - decompile error
@@ -162,7 +162,7 @@ public class EntitySelectorParser {
             };
         } else {
             function = (vec3d) -> {
-                return new Vec3(this.x == null ? vec3d.x : this.x, this.y == null ? vec3d.y : this.y, this.z == null ? vec3d.z : this.z);
+                return new Vec3(this.x == null ? vec3d.x : this.x.doubleValue(), this.y == null ? vec3d.y : this.y.doubleValue(), this.z == null ? vec3d.z : this.z.doubleValue());
             };
         }
 
@@ -201,8 +201,8 @@ public class EntitySelectorParser {
     }
 
     private Predicate<Entity> createRotationPredicate(WrappedMinMaxBounds angleRange, ToDoubleFunction<Entity> entityToAngle) {
-        double d0 = (double) Mth.wrapDegrees(angleRange.getMin() == null ? 0.0F : angleRange.getMin());
-        double d1 = (double) Mth.wrapDegrees(angleRange.getMax() == null ? 359.0F : angleRange.getMax());
+        double d0 = (double) Mth.wrapDegrees(angleRange.getMin() == null ? 0.0F : angleRange.getMin().floatValue());
+        double d1 = (double) Mth.wrapDegrees(angleRange.getMax() == null ? 359.0F : angleRange.getMax().floatValue());
 
         return (entity) -> {
             double d2 = Mth.wrapDegrees(entityToAngle.applyAsDouble(entity));
diff --git a/src/main/java/net/minecraft/commands/arguments/selector/options/EntitySelectorOptions.java b/src/main/java/net/minecraft/commands/arguments/selector/options/EntitySelectorOptions.java
index b6abbf5775b8aa73d32494e6ac0e9afbeb534ae2..50b28fbc8afe86d1940ee9b635297188b620730e 100644
--- a/src/main/java/net/minecraft/commands/arguments/selector/options/EntitySelectorOptions.java
+++ b/src/main/java/net/minecraft/commands/arguments/selector/options/EntitySelectorOptions.java
@@ -110,7 +110,7 @@ public class EntitySelectorOptions {
             register("distance", (reader) -> {
                 int i = reader.getReader().getCursor();
                 MinMaxBounds.Doubles doubles = MinMaxBounds.Doubles.fromReader(reader.getReader());
-                if ((doubles.getMin() == null || !(doubles.getMin() < 0.0D)) && (doubles.getMax() == null || !(doubles.getMax() < 0.0D))) {
+                if ((doubles.getMin() == null || !(doubles.getMin().doubleValue() < 0.0D)) && (doubles.getMax() == null || !(doubles.getMax().doubleValue() < 0.0D))) {
                     reader.setDistance(doubles);
                     reader.setWorldLimited();
                 } else {
@@ -123,7 +123,7 @@ public class EntitySelectorOptions {
             register("level", (reader) -> {
                 int i = reader.getReader().getCursor();
                 MinMaxBounds.Ints ints = MinMaxBounds.Ints.fromReader(reader.getReader());
-                if ((ints.getMin() == null || ints.getMin() >= 0) && (ints.getMax() == null || ints.getMax() >= 0)) {
+                if ((ints.getMin() == null || ints.getMin().intValue() >= 0) && (ints.getMax() == null || ints.getMax().intValue() >= 0)) {
                     reader.setLevel(ints);
                     reader.setIncludesEntities(false);
                 } else {
diff --git a/src/main/java/net/minecraft/core/cauldron/CauldronInteraction.java b/src/main/java/net/minecraft/core/cauldron/CauldronInteraction.java
index 28f55a4427083da8d2acbc0555882b7b07e4ca0f..f29ebec37a3ba4573d84642d4818c33e2ab9c155 100644
--- a/src/main/java/net/minecraft/core/cauldron/CauldronInteraction.java
+++ b/src/main/java/net/minecraft/core/cauldron/CauldronInteraction.java
@@ -172,7 +172,7 @@ public interface CauldronInteraction {
         CauldronInteraction.addDefaultInteractions(CauldronInteraction.WATER);
         CauldronInteraction.WATER.put(Items.BUCKET, (iblockdata, world, blockposition, entityhuman, enumhand, itemstack) -> {
             return CauldronInteraction.fillBucket(iblockdata, world, blockposition, entityhuman, enumhand, itemstack, new ItemStack(Items.WATER_BUCKET), (iblockdata1) -> {
-                return (Integer) iblockdata1.getValue(LayeredCauldronBlock.LEVEL) == 3;
+                return ((Integer) iblockdata1.getValue(LayeredCauldronBlock.LEVEL)).intValue() == 3;
             }, SoundEvents.BUCKET_FILL);
         });
         CauldronInteraction.WATER.put(Items.GLASS_BOTTLE, (iblockdata, world, blockposition, entityhuman, enumhand, itemstack) -> {
@@ -195,7 +195,7 @@ public interface CauldronInteraction {
             return InteractionResult.sidedSuccess(world.isClientSide);
         });
         CauldronInteraction.WATER.put(Items.POTION, (iblockdata, world, blockposition, entityhuman, enumhand, itemstack) -> {
-            if ((Integer) iblockdata.getValue(LayeredCauldronBlock.LEVEL) != 3 && PotionUtils.getPotion(itemstack) == Potions.WATER) {
+            if (((Integer) iblockdata.getValue(LayeredCauldronBlock.LEVEL)).intValue() != 3 && PotionUtils.getPotion(itemstack) == Potions.WATER) {
                 if (!world.isClientSide) {
                     // CraftBukkit start
                     if (!LayeredCauldronBlock.changeLevel(iblockdata, world, blockposition, iblockdata.cycle(LayeredCauldronBlock.LEVEL), entityhuman, CauldronLevelChangeEvent.ChangeReason.BOTTLE_EMPTY)) {
@@ -260,7 +260,7 @@ public interface CauldronInteraction {
         CauldronInteraction.addDefaultInteractions(CauldronInteraction.LAVA);
         CauldronInteraction.POWDER_SNOW.put(Items.BUCKET, (iblockdata, world, blockposition, entityhuman, enumhand, itemstack) -> {
             return CauldronInteraction.fillBucket(iblockdata, world, blockposition, entityhuman, enumhand, itemstack, new ItemStack(Items.POWDER_SNOW_BUCKET), (iblockdata1) -> {
-                return (Integer) iblockdata1.getValue(LayeredCauldronBlock.LEVEL) == 3;
+                return ((Integer) iblockdata1.getValue(LayeredCauldronBlock.LEVEL)).intValue() == 3;
             }, SoundEvents.BUCKET_FILL_POWDER_SNOW);
         });
         CauldronInteraction.addDefaultInteractions(CauldronInteraction.POWDER_SNOW);
diff --git a/src/main/java/net/minecraft/core/dispenser/DispenseItemBehavior.java b/src/main/java/net/minecraft/core/dispenser/DispenseItemBehavior.java
index a7ecfa66a3ac6a0c439e4812b209f9d93811f727..eae025dc41bc1f2f31a3efed7160f7ce5830f9c5 100644
--- a/src/main/java/net/minecraft/core/dispenser/DispenseItemBehavior.java
+++ b/src/main/java/net/minecraft/core/dispenser/DispenseItemBehavior.java
@@ -1077,7 +1077,7 @@ public interface DispenseItemBehavior {
 
                 if (iblockdata.is(BlockTags.BEEHIVES, (blockbase_blockdata) -> {
                     return blockbase_blockdata.hasProperty(BeehiveBlock.HONEY_LEVEL) && blockbase_blockdata.getBlock() instanceof BeehiveBlock;
-                }) && (Integer) iblockdata.getValue(BeehiveBlock.HONEY_LEVEL) >= 5) {
+                }) && ((Integer) iblockdata.getValue(BeehiveBlock.HONEY_LEVEL)).intValue() >= 5) {
                     ((BeehiveBlock) iblockdata.getBlock()).releaseBeesAndResetHoneyLevel(worldserver, iblockdata, blockposition, (Player) null, BeehiveBlockEntity.BeeReleaseStatus.BEE_RELEASED);
                     this.setSuccess(true);
                     return this.takeLiquid(pointer, stack, new ItemStack(Items.HONEY_BOTTLE));
@@ -1099,7 +1099,7 @@ public interface DispenseItemBehavior {
 
                 this.setSuccess(true);
                 if (iblockdata.is(Blocks.RESPAWN_ANCHOR)) {
-                    if ((Integer) iblockdata.getValue(RespawnAnchorBlock.CHARGE) != 4) {
+                    if (((Integer) iblockdata.getValue(RespawnAnchorBlock.CHARGE)).intValue() != 4) {
                         RespawnAnchorBlock.charge(worldserver, blockposition, iblockdata);
                         stack.shrink(1);
                     } else {
diff --git a/src/main/java/net/minecraft/core/dispenser/ShearsDispenseItemBehavior.java b/src/main/java/net/minecraft/core/dispenser/ShearsDispenseItemBehavior.java
index d1127d93a85a837933d0d73c24cacac4adc3a5b9..d66d55eed991238d3125a3af5f90aa3787c55ef1 100644
--- a/src/main/java/net/minecraft/core/dispenser/ShearsDispenseItemBehavior.java
+++ b/src/main/java/net/minecraft/core/dispenser/ShearsDispenseItemBehavior.java
@@ -77,7 +77,7 @@ public class ShearsDispenseItemBehavior extends OptionalDispenseItemBehavior {
         if (iblockdata.is(BlockTags.BEEHIVES, (blockbase_blockdata) -> {
             return blockbase_blockdata.hasProperty(BeehiveBlock.HONEY_LEVEL) && blockbase_blockdata.getBlock() instanceof BeehiveBlock;
         })) {
-            int i = (Integer) iblockdata.getValue(BeehiveBlock.HONEY_LEVEL);
+            int i = ((Integer) iblockdata.getValue(BeehiveBlock.HONEY_LEVEL)).intValue();
 
             if (i >= 5) {
                 world.playSound((Player) null, pos, SoundEvents.BEEHIVE_SHEAR, SoundSource.BLOCKS, 1.0F, 1.0F);
diff --git a/src/main/java/net/minecraft/nbt/ByteArrayTag.java b/src/main/java/net/minecraft/nbt/ByteArrayTag.java
index 47abd7a06e22da787b26def61bf19177d2c9607a..891655ca9330f8fc5cbed885240331d969d5f05e 100644
--- a/src/main/java/net/minecraft/nbt/ByteArrayTag.java
+++ b/src/main/java/net/minecraft/nbt/ByteArrayTag.java
@@ -67,7 +67,7 @@ public class ByteArrayTag extends CollectionTag<ByteTag> {
         for (int i = 0; i < list.size(); ++i) {
             Byte obyte = (Byte) list.get(i);
 
-            abyte[i] = obyte == null ? Integer.valueOf(0) : obyte;
+            abyte[i] = (obyte == null ? Integer.valueOf(0) : obyte).byteValue();
         }
 
         return abyte;
diff --git a/src/main/java/net/minecraft/nbt/IntArrayTag.java b/src/main/java/net/minecraft/nbt/IntArrayTag.java
index 22c34197d268778de56cf48e1ae554dfd77926fe..5c49c09f4a41926c0bf005592c9ab7cd70c7c587 100644
--- a/src/main/java/net/minecraft/nbt/IntArrayTag.java
+++ b/src/main/java/net/minecraft/nbt/IntArrayTag.java
@@ -73,7 +73,7 @@ public class IntArrayTag extends CollectionTag<IntTag> {
         for (int i = 0; i < list.size(); ++i) {
             Integer integer = (Integer) list.get(i);
 
-            aint[i] = integer == null ? 0 : integer;
+            aint[i] = integer == null ? 0 : integer.intValue();
         }
 
         return aint;
diff --git a/src/main/java/net/minecraft/network/PacketEncoder.java b/src/main/java/net/minecraft/network/PacketEncoder.java
index dd5d81bbe85ad8bccfb99128c75ea525ebf7ac1b..866eb9f36d639efa181e17330d73cf9fd5829328 100644
--- a/src/main/java/net/minecraft/network/PacketEncoder.java
+++ b/src/main/java/net/minecraft/network/PacketEncoder.java
@@ -33,7 +33,7 @@ public class PacketEncoder extends MessageToByteEncoder<Packet<?>> {
                 throw new IOException("Can't serialize unregistered packet");
             } else {
                 FriendlyByteBuf friendlyByteBuf = new FriendlyByteBuf(byteBuf);
-                friendlyByteBuf.writeVarInt(integer);
+                friendlyByteBuf.writeVarInt(integer.intValue());
                 friendlyByteBuf.adventure$locale = channelHandlerContext.channel().attr(PaperAdventure.LOCALE_ATTRIBUTE).get(); // Paper
 
                 try {
@@ -44,7 +44,7 @@ public class PacketEncoder extends MessageToByteEncoder<Packet<?>> {
                         throw new IllegalArgumentException("Packet too big (is " + j + ", should be less than 8388608): " + packet);
                     } else {
                         int k = channelHandlerContext.channel().attr(Connection.ATTRIBUTE_PROTOCOL).get().getId();
-                        JvmProfiler.INSTANCE.onPacketSent(k, integer, channelHandlerContext.channel().remoteAddress(), j);
+                        JvmProfiler.INSTANCE.onPacketSent(k, integer.intValue(), channelHandlerContext.channel().remoteAddress(), j);
                     }
                 } catch (Throwable var10) {
                     LOGGER.error("Packet encoding of packet ID {} threw (skippable? {})", integer, Boolean.valueOf(packet.isSkippable()), var10); // Paper - Give proper error message
diff --git a/src/main/java/net/minecraft/network/chat/TextColor.java b/src/main/java/net/minecraft/network/chat/TextColor.java
index cb2d16d5be58a5f7b6d58f3891f00079875219d5..78c69e270661248ac3384f10fd2aac6777e0388d 100644
--- a/src/main/java/net/minecraft/network/chat/TextColor.java
+++ b/src/main/java/net/minecraft/network/chat/TextColor.java
@@ -20,7 +20,7 @@ public final class TextColor {
         return chathexcolor != null ? DataResult.success(chathexcolor) : DataResult.error("String is not a valid color name or hex color code");
     }, TextColor::serialize);
     private static final Map<ChatFormatting, TextColor> LEGACY_FORMAT_TO_COLOR = (Map) Stream.of(ChatFormatting.values()).filter(ChatFormatting::isColor).collect(ImmutableMap.toImmutableMap(Function.identity(), (enumchatformat) -> {
-        return new TextColor(enumchatformat.getColor(), enumchatformat.getName(), enumchatformat); // CraftBukkit
+        return new TextColor(enumchatformat.getColor().intValue(), enumchatformat.getName(), enumchatformat); // CraftBukkit
     }));
     private static final Map<String, TextColor> NAMED_COLORS = (Map) TextColor.LEGACY_FORMAT_TO_COLOR.values().stream().collect(ImmutableMap.toImmutableMap((chathexcolor) -> {
         return chathexcolor.name;
diff --git a/src/main/java/net/minecraft/network/protocol/game/ClientboundLevelChunkPacketData.java b/src/main/java/net/minecraft/network/protocol/game/ClientboundLevelChunkPacketData.java
index f3fa2678796c33f3a408a02a1995ad117eac9169..c10e8ab4cbebf4bd818fef34666a83498f69dc83 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ClientboundLevelChunkPacketData.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ClientboundLevelChunkPacketData.java
@@ -26,7 +26,7 @@ public class ClientboundLevelChunkPacketData {
     private final List<ClientboundLevelChunkPacketData.BlockEntityInfo> blockEntitiesData;
     // Paper start
     private final java.util.List<net.minecraft.network.protocol.Packet> extraPackets = new java.util.ArrayList<>();
-    private static final int TE_LIMIT = Integer.getInteger("Paper.excessiveTELimit", 750);
+    private static final int TE_LIMIT = Integer.getInteger("Paper.excessiveTELimit", 750).intValue();
 
     public List<net.minecraft.network.protocol.Packet> getExtraPackets() {
         return this.extraPackets;
diff --git a/src/main/java/net/minecraft/network/protocol/game/ClientboundSectionBlocksUpdatePacket.java b/src/main/java/net/minecraft/network/protocol/game/ClientboundSectionBlocksUpdatePacket.java
index 24c677e80af652952263253409c050641e72e3b5..97e0bab1f1604cfb79b27bd3234783a96a32e925 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ClientboundSectionBlocksUpdatePacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ClientboundSectionBlocksUpdatePacket.java
@@ -29,7 +29,7 @@ public class ClientboundSectionBlocksUpdatePacket implements Packet<ClientGamePa
         int j = 0;
 
         for (ShortIterator shortiterator = positions.iterator(); shortiterator.hasNext(); ++j) {
-            short short0 = (Short) shortiterator.next();
+            short short0 = ((Short) shortiterator.next()).shortValue();
 
             this.positions[j] = short0;
             this.states[j] = (section != null) ? section.getBlockState(SectionPos.sectionRelativeX(short0), SectionPos.sectionRelativeY(short0), SectionPos.sectionRelativeZ(short0)) : net.minecraft.world.level.block.Blocks.AIR.defaultBlockState(); // CraftBukkit - SPIGOT-6076, Mojang bug when empty chunk section notified
diff --git a/src/main/java/net/minecraft/network/syncher/EntityDataSerializers.java b/src/main/java/net/minecraft/network/syncher/EntityDataSerializers.java
index c5e82ec453a431486a9aed1d6c2637e8b335d0d6..10f878f3ee099ad640b65000de88f4d126542f35 100644
--- a/src/main/java/net/minecraft/network/syncher/EntityDataSerializers.java
+++ b/src/main/java/net/minecraft/network/syncher/EntityDataSerializers.java
@@ -28,7 +28,7 @@ import net.minecraft.world.level.block.state.BlockState;
 public class EntityDataSerializers {
     private static final CrudeIncrementalIntIdentityHashBiMap<EntityDataSerializer<?>> SERIALIZERS = CrudeIncrementalIntIdentityHashBiMap.create(16);
     public static final EntityDataSerializer<Byte> BYTE = EntityDataSerializer.simple((buf, byte_) -> {
-        buf.writeByte(byte_);
+        buf.writeByte(byte_.intValue());
     }, FriendlyByteBuf::readByte);
     public static final EntityDataSerializer<Integer> INT = EntityDataSerializer.simple(FriendlyByteBuf::writeVarInt, FriendlyByteBuf::readVarInt);
     public static final EntityDataSerializer<Long> LONG = EntityDataSerializer.simple(FriendlyByteBuf::writeVarLong, FriendlyByteBuf::readVarLong);
diff --git a/src/main/java/net/minecraft/server/Main.java b/src/main/java/net/minecraft/server/Main.java
index f81fb7dbbbaf3e1b95ded193cb8b54e8a00cf60d..37f56b6c097165f29d23f692e1a5bb84e5a7048e 100644
--- a/src/main/java/net/minecraft/server/Main.java
+++ b/src/main/java/net/minecraft/server/Main.java
@@ -300,7 +300,7 @@ public class Main {
                 }
 
                 if (optionset.has("port")) {
-                    int port = (Integer) optionset.valueOf("port");
+                    int port = ((Integer) optionset.valueOf("port")).intValue();
                     if (port > 0) {
                         dedicatedserver1.setPort(port);
                     }
diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index 37cf611985c80edc42860a29c80b54aaddeb6d6c..a45e5d6e6dfda024ed0b0d38aff6b7ede41399ef 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -2134,7 +2134,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
         if (this.isEnforceWhitelist()) {
             PlayerList playerlist = source.getServer().getPlayerList();
             UserWhiteList whitelist = playerlist.getWhiteList();
-            if (!((DedicatedServer)getServer()).getProperties().whiteList.get()) return; // Paper - white list not enabled
+            if (!((DedicatedServer) getServer()).getProperties().whiteList.get().booleanValue()) return; // Paper - white list not enabled
             List<ServerPlayer> list = Lists.newArrayList(playerlist.getPlayers());
             Iterator iterator = list.iterator();
 
diff --git a/src/main/java/net/minecraft/server/commands/EffectCommands.java b/src/main/java/net/minecraft/server/commands/EffectCommands.java
index 78df32c4fa03893675872339070c827582006571..fc18b746f77880c97fbef09c1258135ea8e4bf6e 100644
--- a/src/main/java/net/minecraft/server/commands/EffectCommands.java
+++ b/src/main/java/net/minecraft/server/commands/EffectCommands.java
@@ -58,9 +58,9 @@ public class EffectCommands {
 
         if (seconds != null) {
             if (mobeffectlist.isInstantenous()) {
-                k = seconds;
+                k = seconds.intValue();
             } else {
-                k = seconds * 20;
+                k = seconds.intValue() * 20;
             }
         } else if (mobeffectlist.isInstantenous()) {
             k = 1;
diff --git a/src/main/java/net/minecraft/server/dedicated/DedicatedPlayerList.java b/src/main/java/net/minecraft/server/dedicated/DedicatedPlayerList.java
index 935dac757280731bfeb0a8f033cbe315ecac46da..4ee9193093247c38e1ace8dfcc3f24bc21393b29 100644
--- a/src/main/java/net/minecraft/server/dedicated/DedicatedPlayerList.java
+++ b/src/main/java/net/minecraft/server/dedicated/DedicatedPlayerList.java
@@ -17,7 +17,7 @@ public class DedicatedPlayerList extends PlayerList {
         DedicatedServerProperties dedicatedServerProperties = server.getProperties();
         this.setViewDistance(dedicatedServerProperties.viewDistance);
         this.setSimulationDistance(dedicatedServerProperties.simulationDistance);
-        super.setUsingWhiteList(dedicatedServerProperties.whiteList.get());
+        super.setUsingWhiteList(dedicatedServerProperties.whiteList.get().booleanValue());
         // Paper start - moved from constructor
     }
     @Override
diff --git a/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java b/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
index 8e5d628f237bf4034c456d331ebf7ff4175e4b96..a1a8f99dc27202aed94f37cb10226af3d2e1e8c6 100644
--- a/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
+++ b/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
@@ -225,7 +225,7 @@ public class DedicatedServer extends MinecraftServer implements ServerInterface
         this.setPvpAllowed(dedicatedserverproperties.pvp);
         this.setFlightAllowed(dedicatedserverproperties.allowFlight);
         this.setMotd(dedicatedserverproperties.motd);
-        super.setPlayerIdleTimeout((Integer) dedicatedserverproperties.playerIdleTimeout.get());
+        super.setPlayerIdleTimeout(((Integer) dedicatedserverproperties.playerIdleTimeout.get()).intValue());
         this.setEnforceWhitelist(dedicatedserverproperties.enforceWhitelist);
         // this.worldData.setGameType(dedicatedserverproperties.gamemode); // CraftBukkit - moved to world loading
         DedicatedServer.LOGGER.info("Default game type: {}", dedicatedserverproperties.gamemode);
@@ -304,7 +304,7 @@ public class DedicatedServer extends MinecraftServer implements ServerInterface
 
             //DedicatedServer.LOGGER.info("Done ({})! For help, type \"help\"", s); // Paper moved to after init
             if (dedicatedserverproperties.announcePlayerAchievements != null) {
-                ((GameRules.BooleanValue) this.getGameRules().getRule(GameRules.RULE_ANNOUNCE_ADVANCEMENTS)).set(dedicatedserverproperties.announcePlayerAchievements, null); // Paper
+                ((GameRules.BooleanValue) this.getGameRules().getRule(GameRules.RULE_ANNOUNCE_ADVANCEMENTS)).set(dedicatedserverproperties.announcePlayerAchievements.booleanValue(), null); // Paper
             }
 
             if (dedicatedserverproperties.enableQuery) {
diff --git a/src/main/java/net/minecraft/server/dedicated/Settings.java b/src/main/java/net/minecraft/server/dedicated/Settings.java
index b23c2a0b0cf8d95795bc5057cb858e94f03a18f9..b3e0b0835ef1def599b01d3b241ebaaadb454385 100644
--- a/src/main/java/net/minecraft/server/dedicated/Settings.java
+++ b/src/main/java/net/minecraft/server/dedicated/Settings.java
@@ -222,7 +222,7 @@ public abstract class Settings<T extends Settings<T>> {
     }
 
     protected int get(String key, int fallback) {
-        return (Integer) this.get(key, Settings.wrapNumberDeserializer(Integer::parseInt), Integer.valueOf(fallback));
+        return ((Integer) this.get(key, Settings.wrapNumberDeserializer(Integer::parseInt), Integer.valueOf(fallback))).intValue();
     }
 
     protected Settings<T>.MutableValue<Integer> getMutable(String key, int fallback) {
@@ -230,15 +230,15 @@ public abstract class Settings<T extends Settings<T>> {
     }
 
     protected int get(String key, UnaryOperator<Integer> transformer, int fallback) {
-        return (Integer) this.get(key, Settings.wrapNumberDeserializer(Integer::parseInt), transformer, Objects::toString, Integer.valueOf(fallback));
+        return ((Integer) this.get(key, Settings.wrapNumberDeserializer(Integer::parseInt), transformer, Objects::toString, Integer.valueOf(fallback))).intValue();
     }
 
     protected long get(String key, long fallback) {
-        return (Long) this.get(key, Settings.wrapNumberDeserializer(Long::parseLong), Long.valueOf(fallback));
+        return ((Long) this.get(key, Settings.wrapNumberDeserializer(Long::parseLong), Long.valueOf(fallback))).longValue();
     }
 
     protected boolean get(String key, boolean fallback) {
-        return (Boolean) this.get(key, Boolean::valueOf, Boolean.valueOf(fallback));
+        return ((Boolean) this.get(key, Boolean::valueOf, Boolean.valueOf(fallback))).booleanValue();
     }
 
     protected Settings<T>.MutableValue<Boolean> getMutable(String key, boolean fallback) {
diff --git a/src/main/java/net/minecraft/server/level/ChunkMap.java b/src/main/java/net/minecraft/server/level/ChunkMap.java
index 58457b172aa35c5730fbe42857f0cf72f38317f4..b14d1a02b7b47fdad2aead54018db0a139981637 100644
--- a/src/main/java/net/minecraft/server/level/ChunkMap.java
+++ b/src/main/java/net/minecraft/server/level/ChunkMap.java
@@ -1451,7 +1451,7 @@ public class ChunkMap extends ChunkStorage implements ChunkHolder.PlayerProvider
                 }
             }
             // Paper end - Fix MC-162253
-            return new ClientboundLevelChunkWithLightPacket(chunk, this.lightEngine, (BitSet) null, (BitSet) null, true, (Boolean) s);
+            return new ClientboundLevelChunkWithLightPacket(chunk, this.lightEngine, (BitSet) null, (BitSet) null, true, ((Boolean) s).booleanValue());
         }));
         // Paper end
         DebugPackets.sendPoiPacketsForChunk(this.level, chunk.getPos());
diff --git a/src/main/java/net/minecraft/server/level/ServerEntity.java b/src/main/java/net/minecraft/server/level/ServerEntity.java
index 190e9761087baec5827d722a8281f0ffb6798341..aeeac5ea0de2204e11a01d115e5a50e0d029f586 100644
--- a/src/main/java/net/minecraft/server/level/ServerEntity.java
+++ b/src/main/java/net/minecraft/server/level/ServerEntity.java
@@ -116,7 +116,7 @@ public class ServerEntity {
                             ServerPlayer entityplayer = iterator.next().getPlayer(); // CraftBukkit
 
                             worldmap.tickCarriedBy(entityplayer, itemstack);
-                            Packet<?> packet = worldmap.getUpdatePacket(integer, entityplayer);
+                            Packet<?> packet = worldmap.getUpdatePacket(integer.intValue(), entityplayer);
 
                             if (packet != null) {
                                 entityplayer.connection.send(packet);
diff --git a/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java b/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
index b230b4c201968feddd81ea94ab4bcb9202b07fd0..12c92925dbb6385b638728c77f2ac092465bf387 100644
--- a/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
+++ b/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
@@ -296,8 +296,8 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Tic
     private final LastSeenMessagesValidator lastSeenMessages;
     private final MessageSignatureCache messageSignatureCache;
     private final FutureChain chatMessageChain;
-    private static final long KEEPALIVE_LIMIT = Long.getLong("paper.playerconnection.keepalive", 30) * 1000; // Paper - provide property to set keepalive limit
-    private static final int MAX_SIGN_LINE_LENGTH = Integer.getInteger("Paper.maxSignLength", 80); // Paper
+    private static final long KEEPALIVE_LIMIT = Long.getLong("paper.playerconnection.keepalive", 30).longValue() * 1000; // Paper - provide property to set keepalive limit
+    private static final int MAX_SIGN_LINE_LENGTH = Integer.getInteger("Paper.maxSignLength", 80).intValue(); // Paper
 
     private String clientBrandName = null; // Paper - Brand name
 
@@ -914,7 +914,7 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Tic
                 completions.forEach(completion -> {
                     final Integer intSuggestion = com.google.common.primitives.Ints.tryParse(completion.suggestion());
                     if (intSuggestion != null) {
-                        builder.suggest(intSuggestion, PaperAdventure.asVanilla(completion.tooltip()));
+                        builder.suggest(intSuggestion.intValue(), PaperAdventure.asVanilla(completion.tooltip()));
                     } else {
                         builder.suggest(completion.suggestion(), PaperAdventure.asVanilla(completion.tooltip()));
                     }
diff --git a/src/main/java/net/minecraft/server/network/ServerHandshakePacketListenerImpl.java b/src/main/java/net/minecraft/server/network/ServerHandshakePacketListenerImpl.java
index d6c2aeafd5f15d6b57ab4a8e82c97f013f58187a..985ca4464a407ff313e6704887952183fe42dbdd 100644
--- a/src/main/java/net/minecraft/server/network/ServerHandshakePacketListenerImpl.java
+++ b/src/main/java/net/minecraft/server/network/ServerHandshakePacketListenerImpl.java
@@ -50,7 +50,7 @@ public class ServerHandshakePacketListenerImpl implements ServerHandshakePacketL
                     InetAddress address = ((java.net.InetSocketAddress) this.connection.getRemoteAddress()).getAddress();
 
                     synchronized (ServerHandshakePacketListenerImpl.throttleTracker) {
-                        if (ServerHandshakePacketListenerImpl.throttleTracker.containsKey(address) && !"127.0.0.1".equals(address.getHostAddress()) && currentTime - ServerHandshakePacketListenerImpl.throttleTracker.get(address) < connectionThrottle) {
+                        if (ServerHandshakePacketListenerImpl.throttleTracker.containsKey(address) && !"127.0.0.1".equals(address.getHostAddress()) && currentTime - ServerHandshakePacketListenerImpl.throttleTracker.get(address).longValue() < connectionThrottle) {
                             ServerHandshakePacketListenerImpl.throttleTracker.put(address, Long.valueOf(currentTime));
                             Component chatmessage = io.papermc.paper.adventure.PaperAdventure.asVanilla(io.papermc.paper.configuration.GlobalConfiguration.get().messages.kick.connectionThrottle); // Paper - Configurable connection throttle kick message
                             this.connection.send(new ClientboundLoginDisconnectPacket(chatmessage));
@@ -67,7 +67,7 @@ public class ServerHandshakePacketListenerImpl implements ServerHandshakePacketL
                             java.util.Iterator iter = ServerHandshakePacketListenerImpl.throttleTracker.entrySet().iterator();
                             while (iter.hasNext()) {
                                 java.util.Map.Entry<InetAddress, Long> entry = (java.util.Map.Entry) iter.next();
-                                if (entry.getValue() > connectionThrottle) {
+                                if (entry.getValue().longValue() > connectionThrottle) {
                                     iter.remove();
                                 }
                             }
diff --git a/src/main/java/net/minecraft/server/rcon/thread/QueryThreadGs4.java b/src/main/java/net/minecraft/server/rcon/thread/QueryThreadGs4.java
index 2e6c6bf64a8a9c164b7d6f57b63930140e7e66ee..ac244269d4b9e34281ba87430aac6775c5411b64 100644
--- a/src/main/java/net/minecraft/server/rcon/thread/QueryThreadGs4.java
+++ b/src/main/java/net/minecraft/server/rcon/thread/QueryThreadGs4.java
@@ -96,7 +96,7 @@ public class QueryThreadGs4 extends GenericThread {
             LOGGER.debug("Packet '{}' [{}]", PktUtils.toHexString(bs[2]), socketAddress);
             switch (bs[2]) {
                 case 0:
-                    if (!this.validChallenge(packet)) {
+                    if (!this.validChallenge(packet).booleanValue()) {
                         LOGGER.debug("Invalid challenge [{}]", (Object)socketAddress);
                         return false;
                     } else if (15 == i) {
@@ -271,7 +271,7 @@ public class QueryThreadGs4 extends GenericThread {
             if (l >= this.lastChallengeCheck + 30000L) {
                 this.lastChallengeCheck = l;
                 this.validChallenges.values().removeIf((query) -> {
-                    return query.before(l);
+                    return query.before(l).booleanValue();
                 });
             }
         }
diff --git a/src/main/java/net/minecraft/world/entity/AgeableMob.java b/src/main/java/net/minecraft/world/entity/AgeableMob.java
index f608357e40c778748030de05acb9764c313c0093..c215465489a5dcf8df24f0adc621d14ac8de8d19 100644
--- a/src/main/java/net/minecraft/world/entity/AgeableMob.java
+++ b/src/main/java/net/minecraft/world/entity/AgeableMob.java
@@ -80,7 +80,7 @@ public abstract class AgeableMob extends PathfinderMob {
     }
 
     public int getAge() {
-        return this.level.isClientSide ? ((Boolean) this.entityData.get(AgeableMob.DATA_BABY_ID) ? -1 : 1) : this.age;
+        return this.level.isClientSide ? (((Boolean) this.entityData.get(AgeableMob.DATA_BABY_ID)).booleanValue() ? -1 : 1) : this.age;
     }
 
     public void ageUp(int age, boolean overGrow) {
diff --git a/src/main/java/net/minecraft/world/entity/AreaEffectCloud.java b/src/main/java/net/minecraft/world/entity/AreaEffectCloud.java
index bc75111a93b0e8aefdd1ce912f3be13d193f7596..7f38d919fa11e60341125c5f251d17643d524f56 100644
--- a/src/main/java/net/minecraft/world/entity/AreaEffectCloud.java
+++ b/src/main/java/net/minecraft/world/entity/AreaEffectCloud.java
@@ -105,7 +105,7 @@ public class AreaEffectCloud extends Entity {
     }
 
     public float getRadius() {
-        return (Float) this.getEntityData().get(AreaEffectCloud.DATA_RADIUS);
+        return ((Float) this.getEntityData().get(AreaEffectCloud.DATA_RADIUS)).floatValue();
     }
 
     public void setPotion(Potion potion) {
@@ -150,7 +150,7 @@ public class AreaEffectCloud extends Entity {
     // CraftBukkit end
 
     public int getColor() {
-        return (Integer) this.getEntityData().get(AreaEffectCloud.DATA_COLOR);
+        return ((Integer) this.getEntityData().get(AreaEffectCloud.DATA_COLOR)).intValue();
     }
 
     public void setFixedColor(int rgb) {
@@ -171,7 +171,7 @@ public class AreaEffectCloud extends Entity {
     }
 
     public boolean isWaiting() {
-        return (Boolean) this.getEntityData().get(AreaEffectCloud.DATA_WAITING);
+        return ((Boolean) this.getEntityData().get(AreaEffectCloud.DATA_WAITING)).booleanValue();
     }
 
     public int getDuration() {
@@ -273,7 +273,7 @@ public class AreaEffectCloud extends Entity {
 
             if (this.tickCount % 5 == 0) {
                 this.victims.entrySet().removeIf((entry) -> {
-                    return this.tickCount >= (Integer) entry.getValue();
+                    return this.tickCount >= ((Integer) entry.getValue()).intValue();
                 });
                 List<MobEffectInstance> list = Lists.newArrayList();
                 Iterator iterator = this.potion.getEffects().iterator();
diff --git a/src/main/java/net/minecraft/world/entity/Entity.java b/src/main/java/net/minecraft/world/entity/Entity.java
index 7f20bda1256eb84956a1fb7a12fff52d75851129..bde24be9bace4929ff65b6672141726444fbc9dd 100644
--- a/src/main/java/net/minecraft/world/entity/Entity.java
+++ b/src/main/java/net/minecraft/world/entity/Entity.java
@@ -599,7 +599,7 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource {
     public int getTeamColor() {
         Team scoreboardteambase = this.getTeam();
 
-        return scoreboardteambase != null && scoreboardteambase.getColor().getColor() != null ? scoreboardteambase.getColor().getColor() : 16777215;
+        return scoreboardteambase != null && scoreboardteambase.getColor().getColor() != null ? scoreboardteambase.getColor().getColor().intValue() : 16777215;
     }
 
     public boolean isSpectator() {
@@ -1603,7 +1603,7 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource {
     }
 
     public boolean isSilent() {
-        return (Boolean) this.entityData.get(Entity.DATA_SILENT);
+        return ((Boolean) this.entityData.get(Entity.DATA_SILENT)).booleanValue();
     }
 
     public void setSilent(boolean silent) {
@@ -1611,7 +1611,7 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource {
     }
 
     public boolean isNoGravity() {
-        return (Boolean) this.entityData.get(Entity.DATA_NO_GRAVITY);
+        return ((Boolean) this.entityData.get(Entity.DATA_NO_GRAVITY)).booleanValue();
     }
 
     public void setNoGravity(boolean noGravity) {
@@ -3092,11 +3092,11 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource {
     }
 
     public boolean getSharedFlag(int index) {
-        return ((Byte) this.entityData.get(Entity.DATA_SHARED_FLAGS_ID) & 1 << index) != 0;
+        return (((Byte) this.entityData.get(Entity.DATA_SHARED_FLAGS_ID)).intValue() & 1 << index) != 0;
     }
 
     public void setSharedFlag(int index, boolean value) {
-        byte b0 = (Byte) this.entityData.get(Entity.DATA_SHARED_FLAGS_ID);
+        byte b0 = ((Byte) this.entityData.get(Entity.DATA_SHARED_FLAGS_ID)).byteValue();
 
         if (value) {
             this.entityData.set(Entity.DATA_SHARED_FLAGS_ID, Byte.valueOf((byte) (b0 | 1 << index)));
@@ -3111,7 +3111,7 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource {
     }
 
     public int getAirSupply() {
-        return (Integer) this.entityData.get(Entity.DATA_AIR_SUPPLY_ID);
+        return ((Integer) this.entityData.get(Entity.DATA_AIR_SUPPLY_ID)).intValue();
     }
 
     public void setAirSupply(int air) {
@@ -3130,7 +3130,7 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource {
     }
 
     public int getTicksFrozen() {
-        return (Integer) this.entityData.get(Entity.DATA_TICKS_FROZEN);
+        return ((Integer) this.entityData.get(Entity.DATA_TICKS_FROZEN)).intValue();
     }
 
     public void setTicksFrozen(int frozenTicks) {
@@ -3667,7 +3667,7 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource {
     }
 
     public boolean isCustomNameVisible() {
-        return (Boolean) this.entityData.get(Entity.DATA_CUSTOM_NAME_VISIBLE);
+        return ((Boolean) this.entityData.get(Entity.DATA_CUSTOM_NAME_VISIBLE)).booleanValue();
     }
 
     public final void teleportToWithTicket(double destX, double destY, double destZ) {
diff --git a/src/main/java/net/minecraft/world/entity/EntityType.java b/src/main/java/net/minecraft/world/entity/EntityType.java
index 954aa5f4d2aa192ed0f6a24e02eb17b2d0b2b2ab..511ab0e4f7d2ab5b10e8d62f98128eb29bc09f9f 100644
--- a/src/main/java/net/minecraft/world/entity/EntityType.java
+++ b/src/main/java/net/minecraft/world/entity/EntityType.java
@@ -633,7 +633,7 @@ public class EntityType<T extends Entity> implements FeatureElement, EntityTypeT
                         final EntityType<?> entityType = entity.getType();
                         final int saveLimit = world.paperConfig().chunks.entityPerChunkSaveLimit.getOrDefault(entityType, -1);
                         if (saveLimit > -1) {
-                            if (this.loadedEntityCounts.getOrDefault(entityType, Integer.valueOf(0)) >= saveLimit) {
+                            if (this.loadedEntityCounts.getOrDefault(entityType, Integer.valueOf(0)).intValue() >= saveLimit) {
                                 return null;
                             }
                             this.loadedEntityCounts.merge(entityType, Integer.valueOf(1), Integer::sum);
diff --git a/src/main/java/net/minecraft/world/entity/ItemBasedSteering.java b/src/main/java/net/minecraft/world/entity/ItemBasedSteering.java
index 165651fcaf76e0ce22edc23b02d0050b862768b2..e48190e532ded976518938b80119453fbd9f6be8 100644
--- a/src/main/java/net/minecraft/world/entity/ItemBasedSteering.java
+++ b/src/main/java/net/minecraft/world/entity/ItemBasedSteering.java
@@ -25,7 +25,7 @@ public class ItemBasedSteering {
     public void onSynced() {
         this.boosting = true;
         this.boostTime = 0;
-        this.boostTimeTotal = (Integer) this.entityData.get(this.boostTimeAccessor);
+        this.boostTimeTotal = ((Integer) this.entityData.get(this.boostTimeAccessor)).intValue();
     }
 
     public boolean boost(RandomSource random) {
@@ -62,6 +62,6 @@ public class ItemBasedSteering {
     }
 
     public boolean hasSaddle() {
-        return (Boolean) this.entityData.get(this.hasSaddleAccessor);
+        return ((Boolean) this.entityData.get(this.hasSaddleAccessor)).booleanValue();
     }
 }
diff --git a/src/main/java/net/minecraft/world/entity/LivingEntity.java b/src/main/java/net/minecraft/world/entity/LivingEntity.java
index addd9ff816f4ed676f526c00cbc1606d8340b65c..514f44256fee6ca21c873af216fc977440a052d3 100644
--- a/src/main/java/net/minecraft/world/entity/LivingEntity.java
+++ b/src/main/java/net/minecraft/world/entity/LivingEntity.java
@@ -947,8 +947,8 @@ public abstract class LivingEntity extends Entity {
             this.effectsDirty = false;
         }
 
-        int i = (Integer) this.entityData.get(LivingEntity.DATA_EFFECT_COLOR_ID);
-        boolean flag = (Boolean) this.entityData.get(LivingEntity.DATA_EFFECT_AMBIENCE_ID);
+        int i = ((Integer) this.entityData.get(LivingEntity.DATA_EFFECT_COLOR_ID)).intValue();
+        boolean flag = ((Boolean) this.entityData.get(LivingEntity.DATA_EFFECT_AMBIENCE_ID)).booleanValue();
 
         if (i > 0) {
             boolean flag1;
@@ -1297,7 +1297,7 @@ public abstract class LivingEntity extends Entity {
             return (float) ((ServerPlayer) this).getBukkitEntity().getHealth();
         }
         // CraftBukkit end
-        return (Float) this.entityData.get(LivingEntity.DATA_HEALTH_ID);
+        return ((Float) this.entityData.get(LivingEntity.DATA_HEALTH_ID)).floatValue();
     }
 
     public void setHealth(float health) {
@@ -1955,7 +1955,7 @@ public abstract class LivingEntity extends Entity {
     }
 
     private boolean trapdoorUsableAsLadder(BlockPos pos, BlockState state) {
-        if ((Boolean) state.getValue(TrapDoorBlock.OPEN)) {
+        if (((Boolean) state.getValue(TrapDoorBlock.OPEN)).booleanValue()) {
             BlockState iblockdata1 = this.level.getBlockState(pos.below());
 
             if (iblockdata1.is(Blocks.LADDER) && iblockdata1.getValue(LadderBlock.FACING) == state.getValue(TrapDoorBlock.FACING)) {
@@ -2273,7 +2273,7 @@ public abstract class LivingEntity extends Entity {
     }
 
     public final int getArrowCount() {
-        return (Integer) this.entityData.get(LivingEntity.DATA_ARROW_COUNT_ID);
+        return ((Integer) this.entityData.get(LivingEntity.DATA_ARROW_COUNT_ID)).intValue();
     }
 
     public final void setArrowCount(int stuckArrowCount) {
@@ -2291,7 +2291,7 @@ public abstract class LivingEntity extends Entity {
     // CraftBukkit end
 
     public final int getStingerCount() {
-        return (Integer) this.entityData.get(LivingEntity.DATA_STINGER_COUNT_ID);
+        return ((Integer) this.entityData.get(LivingEntity.DATA_STINGER_COUNT_ID)).intValue();
     }
 
     public final void setStingerCount(int stingerCount) {
@@ -3576,7 +3576,7 @@ public abstract class LivingEntity extends Entity {
     protected void doAutoAttackOnTouch(LivingEntity target) {}
 
     public boolean isAutoSpinAttack() {
-        return ((Byte) this.entityData.get(LivingEntity.DATA_LIVING_ENTITY_FLAGS) & 4) != 0;
+        return (((Byte) this.entityData.get(LivingEntity.DATA_LIVING_ENTITY_FLAGS)).intValue() & 4) != 0;
     }
 
     @Override
@@ -3742,11 +3742,11 @@ public abstract class LivingEntity extends Entity {
     public abstract HumanoidArm getMainArm();
 
     public boolean isUsingItem() {
-        return ((Byte) this.entityData.get(LivingEntity.DATA_LIVING_ENTITY_FLAGS) & 1) > 0;
+        return (((Byte) this.entityData.get(LivingEntity.DATA_LIVING_ENTITY_FLAGS)).intValue() & 1) > 0;
     }
 
     public InteractionHand getUsedItemHand() {
-        return ((Byte) this.entityData.get(LivingEntity.DATA_LIVING_ENTITY_FLAGS) & 2) > 0 ? InteractionHand.OFF_HAND : InteractionHand.MAIN_HAND;
+        return (((Byte) this.entityData.get(LivingEntity.DATA_LIVING_ENTITY_FLAGS)).intValue() & 2) > 0 ? InteractionHand.OFF_HAND : InteractionHand.MAIN_HAND;
     }
 
     // Paper start - lag compensate eating
@@ -3802,7 +3802,7 @@ public abstract class LivingEntity extends Entity {
     }
 
     protected void setLivingEntityFlag(int mask, boolean value) {
-        byte b0 = (Byte) this.entityData.get(LivingEntity.DATA_LIVING_ENTITY_FLAGS);
+        byte b0 = ((Byte) this.entityData.get(LivingEntity.DATA_LIVING_ENTITY_FLAGS)).byteValue();
         int j;
 
         if (value) {
@@ -4084,7 +4084,7 @@ public abstract class LivingEntity extends Entity {
 
     public boolean randomTeleport(double x, double y, double z, boolean particleEffects) {
         // CraftBukkit start
-        return this.randomTeleport(x, y, z, particleEffects, org.bukkit.event.player.PlayerTeleportEvent.TeleportCause.UNKNOWN).orElse(Boolean.FALSE);
+        return this.randomTeleport(x, y, z, particleEffects, org.bukkit.event.player.PlayerTeleportEvent.TeleportCause.UNKNOWN).orElse(Boolean.FALSE).booleanValue();
     }
 
     public Optional<Boolean> randomTeleport(double d0, double d1, double d2, boolean flag, org.bukkit.event.player.PlayerTeleportEvent.TeleportCause cause) {
@@ -4229,9 +4229,9 @@ public abstract class LivingEntity extends Entity {
     }
 
     private boolean checkBedExists() {
-        return (Boolean) this.getSleepingPos().map((blockposition) -> {
+        return ((Boolean) this.getSleepingPos().map((blockposition) -> {
             return Boolean.valueOf(this.level.getBlockState(blockposition).getBlock() instanceof BedBlock);
-        }).orElse(Boolean.FALSE);
+        }).orElse(Boolean.FALSE)).booleanValue();
     }
 
     public void stopSleeping() {
@@ -4316,7 +4316,7 @@ public abstract class LivingEntity extends Entity {
             while (iterator.hasNext()) {
                 Pair<MobEffectInstance, Float> pair = (Pair) iterator.next();
 
-                if (!world.isClientSide && pair.getFirst() != null && world.random.nextFloat() < (Float) pair.getSecond()) {
+                if (!world.isClientSide && pair.getFirst() != null && world.random.nextFloat() < ((Float) pair.getSecond()).floatValue()) {
                     targetEntity.addEffect(new MobEffectInstance((MobEffectInstance) pair.getFirst()), EntityPotionEffectEvent.Cause.FOOD); // CraftBukkit
                 }
             }
diff --git a/src/main/java/net/minecraft/world/entity/Mob.java b/src/main/java/net/minecraft/world/entity/Mob.java
index a831ef2c3b4dcb1da8d58bca780ad48600a5c8f7..49745d5055092dfc4b87b044a11e2ed33c3b59e2 100644
--- a/src/main/java/net/minecraft/world/entity/Mob.java
+++ b/src/main/java/net/minecraft/world/entity/Mob.java
@@ -191,7 +191,7 @@ public abstract class Mob extends LivingEntity {
 
         Float ofloat = (Float) entityinsentient.pathfindingMalus.get(nodeType);
 
-        return ofloat == null ? nodeType.getMalus() : ofloat;
+        return ofloat == null ? nodeType.getMalus() : ofloat.floatValue();
     }
 
     public void setPathfindingMalus(BlockPathTypes nodeType, float penalty) {
@@ -1561,33 +1561,33 @@ public abstract class Mob extends LivingEntity {
     }
 
     public void setNoAi(boolean aiDisabled) {
-        byte b0 = (Byte) this.entityData.get(Mob.DATA_MOB_FLAGS_ID);
+        byte b0 = ((Byte) this.entityData.get(Mob.DATA_MOB_FLAGS_ID)).byteValue();
 
         this.entityData.set(Mob.DATA_MOB_FLAGS_ID, Byte.valueOf(aiDisabled ? (byte) (b0 | 1) : (byte) (b0 & -2)));
     }
 
     public void setLeftHanded(boolean leftHanded) {
-        byte b0 = (Byte) this.entityData.get(Mob.DATA_MOB_FLAGS_ID);
+        byte b0 = ((Byte) this.entityData.get(Mob.DATA_MOB_FLAGS_ID)).byteValue();
 
         this.entityData.set(Mob.DATA_MOB_FLAGS_ID, Byte.valueOf(leftHanded ? (byte) (b0 | 2) : (byte) (b0 & -3)));
     }
 
     public void setAggressive(boolean attacking) {
-        byte b0 = (Byte) this.entityData.get(Mob.DATA_MOB_FLAGS_ID);
+        byte b0 = ((Byte) this.entityData.get(Mob.DATA_MOB_FLAGS_ID)).byteValue();
 
         this.entityData.set(Mob.DATA_MOB_FLAGS_ID, Byte.valueOf(attacking ? (byte) (b0 | 4) : (byte) (b0 & -5)));
     }
 
     public boolean isNoAi() {
-        return ((Byte) this.entityData.get(Mob.DATA_MOB_FLAGS_ID) & 1) != 0;
+        return (((Byte) this.entityData.get(Mob.DATA_MOB_FLAGS_ID)).intValue() & 1) != 0;
     }
 
     public boolean isLeftHanded() {
-        return ((Byte) this.entityData.get(Mob.DATA_MOB_FLAGS_ID) & 2) != 0;
+        return (((Byte) this.entityData.get(Mob.DATA_MOB_FLAGS_ID)).intValue() & 2) != 0;
     }
 
     public boolean isAggressive() {
-        return ((Byte) this.entityData.get(Mob.DATA_MOB_FLAGS_ID) & 4) != 0;
+        return (((Byte) this.entityData.get(Mob.DATA_MOB_FLAGS_ID)).intValue() & 4) != 0;
     }
 
     public void setBaby(boolean baby) {}
diff --git a/src/main/java/net/minecraft/world/entity/TamableAnimal.java b/src/main/java/net/minecraft/world/entity/TamableAnimal.java
index 2d9c36c393326804373457c4edc6cc77f4681778..013dc299d2a24780097890f3ccee4f2dd96efb5b 100644
--- a/src/main/java/net/minecraft/world/entity/TamableAnimal.java
+++ b/src/main/java/net/minecraft/world/entity/TamableAnimal.java
@@ -103,11 +103,11 @@ public abstract class TamableAnimal extends Animal implements OwnableEntity {
     }
 
     public boolean isTame() {
-        return (this.entityData.get(DATA_FLAGS_ID) & 4) != 0;
+        return (this.entityData.<Byte>get(DATA_FLAGS_ID).intValue() & 4) != 0;
     }
 
     public void setTame(boolean tamed) {
-        byte b = this.entityData.get(DATA_FLAGS_ID);
+        byte b = this.entityData.<Byte>get(DATA_FLAGS_ID).byteValue();
         if (tamed) {
             this.entityData.set(DATA_FLAGS_ID, Byte.valueOf((byte) (b | 4)));
         } else {
@@ -121,7 +121,7 @@ public abstract class TamableAnimal extends Animal implements OwnableEntity {
     }
 
     public boolean isInSittingPose() {
-        return (this.entityData.get(DATA_FLAGS_ID) & 1) != 0;
+        return (this.entityData.<Byte>get(DATA_FLAGS_ID).intValue() & 1) != 0;
     }
 
     public void setInSittingPose(boolean inSittingPose) {
@@ -131,7 +131,7 @@ public abstract class TamableAnimal extends Animal implements OwnableEntity {
     public void setInSittingPose(boolean inSittingPose, boolean callEvent) {
     // Paper end
         if (callEvent && !new io.papermc.paper.event.entity.EntityToggleSitEvent(this.getBukkitEntity(), inSittingPose).callEvent()) return; // Paper start - call EntityToggleSitEvent
-        byte b = this.entityData.get(DATA_FLAGS_ID);
+        byte b = this.entityData.<Byte>get(DATA_FLAGS_ID).byteValue();
         if (inSittingPose) {
             this.entityData.set(DATA_FLAGS_ID, Byte.valueOf((byte) (b | 1)));
         } else {
diff --git a/src/main/java/net/minecraft/world/entity/ai/behavior/Behavior.java b/src/main/java/net/minecraft/world/entity/ai/behavior/Behavior.java
index 836c5f7ebd09c2f0f65a6f65509d83c62949ad95..3c9c50c6fa53879b42d38afcaea75026c9f588ec 100644
--- a/src/main/java/net/minecraft/world/entity/ai/behavior/Behavior.java
+++ b/src/main/java/net/minecraft/world/entity/ai/behavior/Behavior.java
@@ -49,7 +49,7 @@ public abstract class Behavior<E extends LivingEntity> implements BehaviorContro
     @Override
     public final boolean tryStart(ServerLevel world, E entity, long time) {
         // Paper start - behavior tick rate
-        int tickRate = java.util.Objects.requireNonNullElse(world.paperConfig().tickRates.behavior.get(entity.getType(), this.configKey), Integer.valueOf(-1));
+        int tickRate = Objects.<Integer>requireNonNullElse(world.paperConfig().tickRates.behavior.get(entity.getType(), this.configKey), Integer.valueOf(-1)).intValue();
         if (tickRate > -1 && time < this.endTimestamp + tickRate) {
             return false;
         }
diff --git a/src/main/java/net/minecraft/world/entity/ai/behavior/GateBehavior.java b/src/main/java/net/minecraft/world/entity/ai/behavior/GateBehavior.java
index 10cbb80c7cd9ba30150d8d935c0d115719c35509..413feca993ae701c41b187d37110c7d7f45f191a 100644
--- a/src/main/java/net/minecraft/world/entity/ai/behavior/GateBehavior.java
+++ b/src/main/java/net/minecraft/world/entity/ai/behavior/GateBehavior.java
@@ -26,7 +26,7 @@ public class GateBehavior<E extends LivingEntity> implements BehaviorControl<E>
         this.orderPolicy = order;
         this.runningPolicy = runMode;
         tasks.forEach((task) -> {
-            this.behaviors.add(task.getFirst(), task.getSecond());
+            this.behaviors.add(task.getFirst(), task.getSecond().intValue());
         });
     }
 
diff --git a/src/main/java/net/minecraft/world/entity/ai/behavior/PrepareRamNearestTarget.java b/src/main/java/net/minecraft/world/entity/ai/behavior/PrepareRamNearestTarget.java
index de829c4bc7476d625b64bee4af0c8608292abb73..bf29292ecb80d7ed54d0b73dfe98a969e215e2bb 100644
--- a/src/main/java/net/minecraft/world/entity/ai/behavior/PrepareRamNearestTarget.java
+++ b/src/main/java/net/minecraft/world/entity/ai/behavior/PrepareRamNearestTarget.java
@@ -111,7 +111,7 @@ public class PrepareRamNearestTarget<E extends PathfinderMob> extends Behavior<E
                         this.reachedRamPositionTimestamp = Optional.of(i);
                     }
 
-                    if (i - (Long) this.reachedRamPositionTimestamp.get() >= (long) this.ramPrepareTime) {
+                    if (i - ((Long) this.reachedRamPositionTimestamp.get()).longValue() >= (long) this.ramPrepareTime) {
                         e0.getBrain().setMemory(MemoryModuleType.RAM_TARGET, this.getEdgeOfBlock(blockposition, ((PrepareRamNearestTarget.RamCandidate) this.ramCandidate.get()).getTargetPosition())); // CraftBukkit - decompile error
                         worldserver.playSound((Player) null, (Entity) e0, (SoundEvent) this.getPrepareRamSound.apply(e0), SoundSource.NEUTRAL, 1.0F, e0.getVoicePitch());
                         this.ramCandidate = Optional.empty();
diff --git a/src/main/java/net/minecraft/world/entity/ai/behavior/SleepInBed.java b/src/main/java/net/minecraft/world/entity/ai/behavior/SleepInBed.java
index 6b2b34cb129f807af8042e26a5e180d18e195459..d6666ba4a945d4a2a50a7bd610a906df9570f87f 100644
--- a/src/main/java/net/minecraft/world/entity/ai/behavior/SleepInBed.java
+++ b/src/main/java/net/minecraft/world/entity/ai/behavior/SleepInBed.java
@@ -37,7 +37,7 @@ public class SleepInBed extends Behavior<LivingEntity> {
             } else {
                 Optional<Long> optional = brain.getMemory(MemoryModuleType.LAST_WOKEN);
                 if (optional.isPresent()) {
-                    long l = world.getGameTime() - optional.get();
+                    long l = world.getGameTime() - optional.get().longValue();
                     if (l > 0L && l < 100L) {
                         return false;
                     }
@@ -45,7 +45,7 @@ public class SleepInBed extends Behavior<LivingEntity> {
 
                 BlockState blockState = world.getBlockStateIfLoaded(globalPos.pos()); // Paper
                 if (blockState == null) { return false; } // Paper
-                return globalPos.pos().closerToCenterThan(entity.position(), 2.0D) && blockState.is(BlockTags.BEDS) && !blockState.getValue(BedBlock.OCCUPIED);
+                return globalPos.pos().closerToCenterThan(entity.position(), 2.0D) && blockState.is(BlockTags.BEDS) && !blockState.<Boolean>getValue(BedBlock.OCCUPIED).booleanValue();
             }
         }
     }
diff --git a/src/main/java/net/minecraft/world/entity/ai/behavior/WorkAtComposter.java b/src/main/java/net/minecraft/world/entity/ai/behavior/WorkAtComposter.java
index 490212cfe4e5cea7219eaf4304e14bfac0e6472d..915fda62af3ab94d3cfa5834a9659157c019fb51 100644
--- a/src/main/java/net/minecraft/world/entity/ai/behavior/WorkAtComposter.java
+++ b/src/main/java/net/minecraft/world/entity/ai/behavior/WorkAtComposter.java
@@ -41,7 +41,7 @@ public class WorkAtComposter extends WorkAtPoi {
     private void compostItems(ServerLevel world, Villager entity, GlobalPos pos, BlockState composterState) {
         BlockPos blockposition = pos.pos();
 
-        if ((Integer) composterState.getValue(ComposterBlock.LEVEL) == 8) {
+        if (((Integer) composterState.getValue(ComposterBlock.LEVEL)).intValue() == 8) {
             composterState = ComposterBlock.extractProduce(composterState, world, blockposition, entity); // CraftBukkit
         }
 
@@ -68,7 +68,7 @@ public class WorkAtComposter extends WorkAtPoi {
 
                     for (int l1 = 0; l1 < k1; ++l1) {
                         iblockdata1 = ComposterBlock.insertItem(iblockdata1, world, itemstack, blockposition, entity); // CraftBukkit
-                        if ((Integer) iblockdata1.getValue(ComposterBlock.LEVEL) == 7) {
+                        if (((Integer) iblockdata1.getValue(ComposterBlock.LEVEL)).intValue() == 7) {
                             this.spawnComposterFillEffects(world, composterState, blockposition, iblockdata1);
                             return;
                         }
diff --git a/src/main/java/net/minecraft/world/entity/ai/sensing/Sensor.java b/src/main/java/net/minecraft/world/entity/ai/sensing/Sensor.java
index 3d1b12fd9a8c00efe43a4d7dd8edf0263e55065f..af351de70af84d618b1ae2a206974a40cc0a8a4c 100644
--- a/src/main/java/net/minecraft/world/entity/ai/sensing/Sensor.java
+++ b/src/main/java/net/minecraft/world/entity/ai/sensing/Sensor.java
@@ -45,7 +45,7 @@ public abstract class Sensor<E extends LivingEntity> {
     public final void tick(ServerLevel world, E entity) {
         if (--this.timeToTick <= 0L) {
             // Paper start - configurable sensor tick rate and timings
-            this.timeToTick = java.util.Objects.requireNonNullElse(world.paperConfig().tickRates.sensor.get(entity.getType(), this.configKey), Integer.valueOf(this.scanRate));
+            this.timeToTick = Objects.<Integer>requireNonNullElse(world.paperConfig().tickRates.sensor.get(entity.getType(), this.configKey), Integer.valueOf(this.scanRate)).longValue();
             this.timing.startTiming();
             // Paper end
             this.doTick(world, entity);
diff --git a/src/main/java/net/minecraft/world/entity/ai/village/poi/PoiManager.java b/src/main/java/net/minecraft/world/entity/ai/village/poi/PoiManager.java
index c598d1c590ce657753a75a6eb2a1832c9678cdcd..785712b2011240f68cbc3c3efcdefbe82ed12f06 100644
--- a/src/main/java/net/minecraft/world/entity/ai/village/poi/PoiManager.java
+++ b/src/main/java/net/minecraft/world/entity/ai/village/poi/PoiManager.java
@@ -102,7 +102,7 @@ public class PoiManager extends SectionStorage<PoiSection> {
     @VisibleForDebug
     public Stream<PoiRecord> getInChunk(Predicate<Holder<PoiType>> typePredicate, ChunkPos chunkPos, PoiManager.Occupancy occupationStatus) {
         return IntStream.range(this.levelHeightAccessor.getMinSection(), this.levelHeightAccessor.getMaxSection()).boxed().map((integer) -> {
-            return this.getOrLoad(SectionPos.of(chunkPos, integer).asLong());
+            return this.getOrLoad(SectionPos.of(chunkPos, integer.intValue()).asLong());
         }).filter(Optional::isPresent).flatMap((optional) -> {
             return optional.get().getRecords(typePredicate, occupationStatus);
         });
@@ -188,15 +188,15 @@ public class PoiManager extends SectionStorage<PoiSection> {
     public boolean release(BlockPos pos) {
         return this.getOrLoad(SectionPos.asLong(pos)).map((poiSet) -> {
             return Boolean.valueOf(poiSet.release(pos));
-        }).orElseThrow(() -> {
+        }).<IllegalStateException>orElseThrow(() -> {
             return Util.pauseInIde(new IllegalStateException("POI never registered at " + pos));
-        });
+        }).booleanValue();
     }
 
     public boolean exists(BlockPos pos, Predicate<Holder<PoiType>> predicate) {
         return this.getOrLoad(SectionPos.asLong(pos)).map((poiSet) -> {
             return Boolean.valueOf(poiSet.exists(pos, predicate));
-        }).orElse(Boolean.FALSE);
+        }).orElse(Boolean.FALSE).booleanValue();
     }
 
     public Optional<Holder<PoiType>> getType(BlockPos pos) {
@@ -211,7 +211,7 @@ public class PoiManager extends SectionStorage<PoiSection> {
     public int getFreeTickets(BlockPos pos) {
         return this.getOrLoad(SectionPos.asLong(pos)).map((poiSet) -> {
             return Integer.valueOf(poiSet.getFreeTickets(pos));
-        }).orElse(Integer.valueOf(0));
+        }).orElse(Integer.valueOf(0)).intValue();
     }
 
     public int sectionsToVillage(SectionPos pos) {
@@ -223,9 +223,9 @@ public class PoiManager extends SectionStorage<PoiSection> {
         Optional<PoiSection> optional = this.get(pos);
         return optional == null ? false : optional.map((poiSet) -> {
             return Boolean.valueOf(poiSet.getRecords((entry) -> {
-	            return entry.is(PoiTypeTags.VILLAGE);
+                return entry.is(PoiTypeTags.VILLAGE);
             }, Occupancy.IS_OCCUPIED).findAny().isPresent());
-        }).orElse(Boolean.FALSE);
+        }).orElse(Boolean.FALSE).booleanValue();
     }
 
     @Override
@@ -365,7 +365,7 @@ public class PoiManager extends SectionStorage<PoiSection> {
         SectionPos.aroundChunk(new ChunkPos(pos), Math.floorDiv(radius, 16), this.levelHeightAccessor.getMinSection(), this.levelHeightAccessor.getMaxSection()).map((sectionPos) -> {
             return Pair.of(sectionPos, this.getOrLoad(sectionPos.asLong()));
         }).filter((pair) -> {
-            return !pair.getSecond().map(PoiSection::isValid).orElse(Boolean.FALSE);
+            return !pair.getSecond().map(PoiSection::isValid).orElse(Boolean.FALSE).booleanValue();
         }).map((pair) -> {
             return pair.getFirst().chunk();
         }).filter((chunkPos) -> {
diff --git a/src/main/java/net/minecraft/world/entity/ai/village/poi/PoiSection.java b/src/main/java/net/minecraft/world/entity/ai/village/poi/PoiSection.java
index c55dae21ad4dadf15c16d2fc33d47cb860c73576..6e5d76d8c3f7f2fadd3d162f7a88223c5e784c1a 100644
--- a/src/main/java/net/minecraft/world/entity/ai/village/poi/PoiSection.java
+++ b/src/main/java/net/minecraft/world/entity/ai/village/poi/PoiSection.java
@@ -112,7 +112,7 @@ public class PoiSection {
     @Deprecated
     @VisibleForDebug
     public int getFreeTickets(BlockPos pos) {
-        return this.getPoiRecord(pos).map(PoiRecord::getFreeTickets).orElse(Integer.valueOf(0));
+        return this.getPoiRecord(pos).map(PoiRecord::getFreeTickets).orElse(Integer.valueOf(0)).intValue();
     }
 
     public boolean release(BlockPos pos) {
diff --git a/src/main/java/net/minecraft/world/entity/ambient/Bat.java b/src/main/java/net/minecraft/world/entity/ambient/Bat.java
index 5a30fe4c26a4589f5eae7b82ec7b2b24a928f459..f85ad0164c0ebda2c902cba383a4d6ec766b0b3e 100644
--- a/src/main/java/net/minecraft/world/entity/ambient/Bat.java
+++ b/src/main/java/net/minecraft/world/entity/ambient/Bat.java
@@ -100,11 +100,11 @@ public class Bat extends AmbientCreature {
     }
 
     public boolean isResting() {
-        return ((Byte) this.entityData.get(Bat.DATA_ID_FLAGS) & 1) != 0;
+        return (((Byte) this.entityData.get(Bat.DATA_ID_FLAGS)).intValue() & 1) != 0;
     }
 
     public void setResting(boolean roosting) {
-        byte b0 = (Byte) this.entityData.get(Bat.DATA_ID_FLAGS);
+        byte b0 = ((Byte) this.entityData.get(Bat.DATA_ID_FLAGS)).byteValue();
 
         if (roosting) {
             this.entityData.set(Bat.DATA_ID_FLAGS, Byte.valueOf((byte) (b0 | 1)));
@@ -236,7 +236,7 @@ public class Bat extends AmbientCreature {
     @Override
     public void addAdditionalSaveData(CompoundTag nbt) {
         super.addAdditionalSaveData(nbt);
-        nbt.putByte("BatFlags", (Byte) this.entityData.get(Bat.DATA_ID_FLAGS));
+        nbt.putByte("BatFlags", ((Byte) this.entityData.get(Bat.DATA_ID_FLAGS)).byteValue());
     }
 
     public static boolean checkBatSpawnRules(EntityType<Bat> type, LevelAccessor world, MobSpawnType spawnReason, BlockPos pos, RandomSource random) {
diff --git a/src/main/java/net/minecraft/world/entity/animal/Bee.java b/src/main/java/net/minecraft/world/entity/animal/Bee.java
index 4d901ce3f47f2e6b00cc96d81e977b52320d934e..977c6666d28826eb745f1b2b36e4e2d0bab8c8ca 100644
--- a/src/main/java/net/minecraft/world/entity/animal/Bee.java
+++ b/src/main/java/net/minecraft/world/entity/animal/Bee.java
@@ -418,7 +418,7 @@ public class Bee extends Animal implements NeutralMob, FlyingAnimal {
 
     @Override
     public int getRemainingPersistentAngerTime() {
-        return (Integer) this.entityData.get(Bee.DATA_REMAINING_ANGER_TIME);
+        return ((Integer) this.entityData.get(Bee.DATA_REMAINING_ANGER_TIME)).intValue();
     }
 
     @Override
@@ -566,7 +566,7 @@ public class Bee extends Animal implements NeutralMob, FlyingAnimal {
     }
 
     private boolean getFlag(int location) {
-        return ((Byte) this.entityData.get(Bee.DATA_FLAGS_ID) & location) != 0;
+        return (((Byte) this.entityData.get(Bee.DATA_FLAGS_ID)).intValue() & location) != 0;
     }
 
     public static AttributeSupplier.Builder createAttributes() {
@@ -703,7 +703,7 @@ public class Bee extends Animal implements NeutralMob, FlyingAnimal {
         private static final int MIN_FIND_FLOWER_RETRY_COOLDOWN = 20;
         private static final int MAX_FIND_FLOWER_RETRY_COOLDOWN = 60;
         private final Predicate<BlockState> VALID_POLLINATION_BLOCKS = (iblockdata) -> {
-            return iblockdata.hasProperty(BlockStateProperties.WATERLOGGED) && (Boolean) iblockdata.getValue(BlockStateProperties.WATERLOGGED) ? false : (iblockdata.is(BlockTags.FLOWERS) ? (iblockdata.is(Blocks.SUNFLOWER) ? iblockdata.getValue(DoublePlantBlock.HALF) == DoubleBlockHalf.UPPER : true) : false);
+            return iblockdata.hasProperty(BlockStateProperties.WATERLOGGED) && ((Boolean) iblockdata.getValue(BlockStateProperties.WATERLOGGED)).booleanValue() ? false : (iblockdata.is(BlockTags.FLOWERS) ? (iblockdata.is(Blocks.SUNFLOWER) ? iblockdata.getValue(DoublePlantBlock.HALF) == DoubleBlockHalf.UPPER : true) : false);
         };
         private static final double ARRIVAL_THRESHOLD = 0.1D;
         private static final int POSITION_CHANGE_CHANCE = 25;
@@ -1236,13 +1236,13 @@ public class Bee extends Animal implements NeutralMob, FlyingAnimal {
                             int j;
 
                             if (block instanceof StemBlock) {
-                                j = (Integer) iblockdata.getValue(StemBlock.AGE);
+                                j = ((Integer) iblockdata.getValue(StemBlock.AGE)).intValue();
                                 if (j < 7) {
                                     flag = true;
                                     blockstateinteger = StemBlock.AGE;
                                 }
                             } else if (iblockdata.is(Blocks.SWEET_BERRY_BUSH)) {
-                                j = (Integer) iblockdata.getValue(SweetBerryBushBlock.AGE);
+                                j = ((Integer) iblockdata.getValue(SweetBerryBushBlock.AGE)).intValue();
                                 if (j < 3) {
                                     flag = true;
                                     blockstateinteger = SweetBerryBushBlock.AGE;
diff --git a/src/main/java/net/minecraft/world/entity/animal/Cat.java b/src/main/java/net/minecraft/world/entity/animal/Cat.java
index aea84df10262f35a3a0092fbb932854a1b2f9fc2..f3cb02026d5eb8586b740cde0ec063e305f17740 100644
--- a/src/main/java/net/minecraft/world/entity/animal/Cat.java
+++ b/src/main/java/net/minecraft/world/entity/animal/Cat.java
@@ -133,7 +133,7 @@ public class Cat extends TamableAnimal implements VariantHolder<CatVariant> {
     }
 
     public boolean isLying() {
-        return (Boolean) this.entityData.get(Cat.IS_LYING);
+        return ((Boolean) this.entityData.get(Cat.IS_LYING)).booleanValue();
     }
 
     public void setRelaxStateOne(boolean headDown) {
@@ -141,11 +141,11 @@ public class Cat extends TamableAnimal implements VariantHolder<CatVariant> {
     }
 
     public boolean isRelaxStateOne() {
-        return (Boolean) this.entityData.get(Cat.RELAX_STATE_ONE);
+        return ((Boolean) this.entityData.get(Cat.RELAX_STATE_ONE)).booleanValue();
     }
 
     public DyeColor getCollarColor() {
-        return DyeColor.byId((Integer) this.entityData.get(Cat.DATA_COLLAR_COLOR));
+        return DyeColor.byId(((Integer) this.entityData.get(Cat.DATA_COLLAR_COLOR)).intValue());
     }
 
     public void setCollarColor(DyeColor color) {
diff --git a/src/main/java/net/minecraft/world/entity/animal/Dolphin.java b/src/main/java/net/minecraft/world/entity/animal/Dolphin.java
index 50a863db8c81b060922aef97780ba236511fe2b0..3217447c36f6ba757900e4376b2761070912ef0c 100644
--- a/src/main/java/net/minecraft/world/entity/animal/Dolphin.java
+++ b/src/main/java/net/minecraft/world/entity/animal/Dolphin.java
@@ -111,7 +111,7 @@ public class Dolphin extends WaterAnimal {
     }
 
     public boolean gotFish() {
-        return (Boolean) this.entityData.get(Dolphin.GOT_FISH);
+        return ((Boolean) this.entityData.get(Dolphin.GOT_FISH)).booleanValue();
     }
 
     public void setGotFish(boolean hasFish) {
@@ -119,7 +119,7 @@ public class Dolphin extends WaterAnimal {
     }
 
     public int getMoistnessLevel() {
-        return (Integer) this.entityData.get(Dolphin.MOISTNESS_LEVEL);
+        return ((Integer) this.entityData.get(Dolphin.MOISTNESS_LEVEL)).intValue();
     }
 
     public void setMoisntessLevel(int moistness) {
diff --git a/src/main/java/net/minecraft/world/entity/animal/Fox.java b/src/main/java/net/minecraft/world/entity/animal/Fox.java
index a76748ccc8ec60b91dce08a4bae938703d947ff7..2921286d389ef7b01f54685953d44a9b3b83f30d 100644
--- a/src/main/java/net/minecraft/world/entity/animal/Fox.java
+++ b/src/main/java/net/minecraft/world/entity/animal/Fox.java
@@ -369,7 +369,7 @@ public class Fox extends Animal implements VariantHolder<Fox.Type> {
 
     @Override
     public Fox.Type getVariant() {
-        return Fox.Type.byId((Integer) this.entityData.get(Fox.DATA_TYPE_ID));
+        return Fox.Type.byId(((Integer) this.entityData.get(Fox.DATA_TYPE_ID)).intValue());
     }
 
     public void setVariant(Fox.Type variant) {
@@ -483,7 +483,7 @@ public class Fox extends Animal implements VariantHolder<Fox.Type> {
     }
 
     private boolean getFlag(int bitmask) {
-        return ((Byte) this.entityData.get(Fox.DATA_FLAGS_ID) & bitmask) != 0;
+        return (((Byte) this.entityData.get(Fox.DATA_FLAGS_ID)).intValue() & bitmask) != 0;
     }
 
     @Override
@@ -1274,7 +1274,7 @@ public class Fox extends Animal implements VariantHolder<Fox.Type> {
         protected boolean isValidTarget(LevelReader world, BlockPos pos) {
             BlockState iblockdata = world.getBlockState(pos);
 
-            return iblockdata.is(Blocks.SWEET_BERRY_BUSH) && (Integer) iblockdata.getValue(SweetBerryBushBlock.AGE) >= 2 || CaveVines.hasGlowBerries(iblockdata);
+            return iblockdata.is(Blocks.SWEET_BERRY_BUSH) && ((Integer) iblockdata.getValue(SweetBerryBushBlock.AGE)).intValue() >= 2 || CaveVines.hasGlowBerries(iblockdata);
         }
 
         @Override
@@ -1310,7 +1310,7 @@ public class Fox extends Animal implements VariantHolder<Fox.Type> {
         }
 
         private void pickSweetBerries(BlockState state) {
-            int i = (Integer) state.getValue(SweetBerryBushBlock.AGE);
+            int i = ((Integer) state.getValue(SweetBerryBushBlock.AGE)).intValue();
 
             state.setValue(SweetBerryBushBlock.AGE, Integer.valueOf(1));
             // CraftBukkit start - call EntityChangeBlockEvent
diff --git a/src/main/java/net/minecraft/world/entity/animal/IronGolem.java b/src/main/java/net/minecraft/world/entity/animal/IronGolem.java
index 1c4a8a205ae06fe4f623bbc3592be8e7966f6c18..5bbde809b12029d5da8dec14cbb1046ef3c24e7f 100644
--- a/src/main/java/net/minecraft/world/entity/animal/IronGolem.java
+++ b/src/main/java/net/minecraft/world/entity/animal/IronGolem.java
@@ -309,11 +309,11 @@ public class IronGolem extends AbstractGolem implements NeutralMob {
     }
 
     public boolean isPlayerCreated() {
-        return ((Byte) this.entityData.get(IronGolem.DATA_FLAGS_ID) & 1) != 0;
+        return (((Byte) this.entityData.get(IronGolem.DATA_FLAGS_ID)).intValue() & 1) != 0;
     }
 
     public void setPlayerCreated(boolean playerCreated) {
-        byte b0 = (Byte) this.entityData.get(IronGolem.DATA_FLAGS_ID);
+        byte b0 = ((Byte) this.entityData.get(IronGolem.DATA_FLAGS_ID)).byteValue();
 
         if (playerCreated) {
             this.entityData.set(IronGolem.DATA_FLAGS_ID, Byte.valueOf((byte) (b0 | 1)));
diff --git a/src/main/java/net/minecraft/world/entity/animal/MushroomCow.java b/src/main/java/net/minecraft/world/entity/animal/MushroomCow.java
index 68a5ee85e64802e4509ba0d184fc0ceb3cbe2d11..ef7333b7995dfe12f7f32bde44316c115e61dfa5 100644
--- a/src/main/java/net/minecraft/world/entity/animal/MushroomCow.java
+++ b/src/main/java/net/minecraft/world/entity/animal/MushroomCow.java
@@ -159,7 +159,7 @@ public class MushroomCow extends Cow implements Shearable, VariantHolder<Mushroo
                 }
 
                 this.effect = (MobEffect) pair.getLeft();
-                this.effectDuration = (Integer) pair.getRight();
+                this.effectDuration = ((Integer) pair.getRight()).intValue();
                 this.playSound(SoundEvents.MOOSHROOM_EAT, 2.0F, 1.0F);
             }
 
diff --git a/src/main/java/net/minecraft/world/entity/animal/Ocelot.java b/src/main/java/net/minecraft/world/entity/animal/Ocelot.java
index bb1bb9e6d675a695e6b39b9652d18cc50002cea0..12c300df78a9269e35e8df5a39c35c2e97e1dba5 100644
--- a/src/main/java/net/minecraft/world/entity/animal/Ocelot.java
+++ b/src/main/java/net/minecraft/world/entity/animal/Ocelot.java
@@ -69,7 +69,7 @@ public class Ocelot extends Animal {
     }
 
     public boolean isTrusting() {
-        return (Boolean) this.entityData.get(Ocelot.DATA_TRUSTING);
+        return ((Boolean) this.entityData.get(Ocelot.DATA_TRUSTING)).booleanValue();
     }
 
     public void setTrusting(boolean trusting) {
diff --git a/src/main/java/net/minecraft/world/entity/animal/Panda.java b/src/main/java/net/minecraft/world/entity/animal/Panda.java
index 682250e46ae333811650b42bba4c075c8bb7d5d0..51906728b486a86207e90046f8b1e540f4250c79 100644
--- a/src/main/java/net/minecraft/world/entity/animal/Panda.java
+++ b/src/main/java/net/minecraft/world/entity/animal/Panda.java
@@ -116,7 +116,7 @@ public class Panda extends Animal {
     }
 
     public int getUnhappyCounter() {
-        return (Integer) this.entityData.get(Panda.UNHAPPY_COUNTER);
+        return ((Integer) this.entityData.get(Panda.UNHAPPY_COUNTER)).intValue();
     }
 
     public void setUnhappyCounter(int askForBambooTicks) {
@@ -145,7 +145,7 @@ public class Panda extends Animal {
     }
 
     public boolean isEating() {
-        return (Integer) this.entityData.get(Panda.EAT_COUNTER) > 0;
+        return ((Integer) this.entityData.get(Panda.EAT_COUNTER)).intValue() > 0;
     }
 
     public void eat(boolean eating) {
@@ -153,7 +153,7 @@ public class Panda extends Animal {
     }
 
     public int getEatCounter() {
-        return (Integer) this.entityData.get(Panda.EAT_COUNTER);
+        return ((Integer) this.entityData.get(Panda.EAT_COUNTER)).intValue();
     }
 
     public void setEatCounter(int eatingTicks) {
@@ -169,7 +169,7 @@ public class Panda extends Animal {
     }
 
     public int getSneezeCounter() {
-        return (Integer) this.entityData.get(Panda.SNEEZE_COUNTER);
+        return ((Integer) this.entityData.get(Panda.SNEEZE_COUNTER)).intValue();
     }
 
     public void setSneezeCounter(int sneezeProgress) {
@@ -177,7 +177,7 @@ public class Panda extends Animal {
     }
 
     public Panda.Gene getMainGene() {
-        return Panda.Gene.byId((Byte) this.entityData.get(Panda.MAIN_GENE_ID));
+        return Panda.Gene.byId(((Byte) this.entityData.get(Panda.MAIN_GENE_ID)).intValue());
     }
 
     public void setMainGene(Panda.Gene gene) {
@@ -189,7 +189,7 @@ public class Panda extends Animal {
     }
 
     public Panda.Gene getHiddenGene() {
-        return Panda.Gene.byId((Byte) this.entityData.get(Panda.HIDDEN_GENE_ID));
+        return Panda.Gene.byId(((Byte) this.entityData.get(Panda.HIDDEN_GENE_ID)).intValue());
     }
 
     public void setHiddenGene(Panda.Gene gene) {
@@ -220,11 +220,11 @@ public class Panda extends Animal {
     }
 
     private boolean getFlag(int bitmask) {
-        return ((Byte) this.entityData.get(Panda.DATA_ID_FLAGS) & bitmask) != 0;
+        return (((Byte) this.entityData.get(Panda.DATA_ID_FLAGS)).intValue() & bitmask) != 0;
     }
 
     private void setFlag(int mask, boolean value) {
-        byte b0 = (Byte) this.entityData.get(Panda.DATA_ID_FLAGS);
+        byte b0 = ((Byte) this.entityData.get(Panda.DATA_ID_FLAGS)).byteValue();
 
         if (value) {
             this.entityData.set(Panda.DATA_ID_FLAGS, Byte.valueOf((byte) (b0 | mask)));
diff --git a/src/main/java/net/minecraft/world/entity/animal/Pufferfish.java b/src/main/java/net/minecraft/world/entity/animal/Pufferfish.java
index 74fd0c641070a977aa8da91805186ac4aea857df..0135ac52f8453f96038d0818059f54a088a50d93 100644
--- a/src/main/java/net/minecraft/world/entity/animal/Pufferfish.java
+++ b/src/main/java/net/minecraft/world/entity/animal/Pufferfish.java
@@ -52,7 +52,7 @@ public class Pufferfish extends AbstractFish {
     }
 
     public int getPuffState() {
-        return (Integer) this.entityData.get(Pufferfish.PUFF_STATE);
+        return ((Integer) this.entityData.get(Pufferfish.PUFF_STATE)).intValue();
     }
 
     public void setPuffState(int puffState) {
diff --git a/src/main/java/net/minecraft/world/entity/animal/Rabbit.java b/src/main/java/net/minecraft/world/entity/animal/Rabbit.java
index 530482947d8cd9ea586392e544ebd9b3646fd158..316c1aa0eb2e1ab05dac0093c5cdc9622294813d 100644
--- a/src/main/java/net/minecraft/world/entity/animal/Rabbit.java
+++ b/src/main/java/net/minecraft/world/entity/animal/Rabbit.java
@@ -573,7 +573,7 @@ public class Rabbit extends Animal implements VariantHolder<Rabbit.Variant> {
                 Block block = iblockdata.getBlock();
 
                 if (this.canRaid && block instanceof CarrotBlock) {
-                    int i = (Integer) iblockdata.getValue(CarrotBlock.AGE);
+                    int i = ((Integer) iblockdata.getValue(CarrotBlock.AGE)).intValue();
 
                     if (i == 0) {
                         // CraftBukkit start
diff --git a/src/main/java/net/minecraft/world/entity/animal/Sheep.java b/src/main/java/net/minecraft/world/entity/animal/Sheep.java
index eb1b240163af216a1aa82463628055d983de0970..74ae386d0d93f80d8222a13919202a116e58f515 100644
--- a/src/main/java/net/minecraft/world/entity/animal/Sheep.java
+++ b/src/main/java/net/minecraft/world/entity/animal/Sheep.java
@@ -326,21 +326,21 @@ public class Sheep extends Animal implements Shearable {
     }
 
     public DyeColor getColor() {
-        return DyeColor.byId((Byte) this.entityData.get(Sheep.DATA_WOOL_ID) & 15);
+        return DyeColor.byId(((Byte) this.entityData.get(Sheep.DATA_WOOL_ID)).intValue() & 15);
     }
 
     public void setColor(DyeColor color) {
-        byte b0 = (Byte) this.entityData.get(Sheep.DATA_WOOL_ID);
+        byte b0 = ((Byte) this.entityData.get(Sheep.DATA_WOOL_ID)).byteValue();
 
         this.entityData.set(Sheep.DATA_WOOL_ID, Byte.valueOf((byte) (b0 & 240 | color.getId() & 15)));
     }
 
     public boolean isSheared() {
-        return ((Byte) this.entityData.get(Sheep.DATA_WOOL_ID) & 16) != 0;
+        return (((Byte) this.entityData.get(Sheep.DATA_WOOL_ID)).intValue() & 16) != 0;
     }
 
     public void setSheared(boolean sheared) {
-        byte b0 = (Byte) this.entityData.get(Sheep.DATA_WOOL_ID);
+        byte b0 = ((Byte) this.entityData.get(Sheep.DATA_WOOL_ID)).byteValue();
 
         if (sheared) {
             this.entityData.set(Sheep.DATA_WOOL_ID, Byte.valueOf((byte) (b0 | 16)));
diff --git a/src/main/java/net/minecraft/world/entity/animal/SnowGolem.java b/src/main/java/net/minecraft/world/entity/animal/SnowGolem.java
index 74ea040db2f03e022e4c6cd23c1f3ca7a3f793a7..2ba45ff931749bd3e99238d244d798881f612d4b 100644
--- a/src/main/java/net/minecraft/world/entity/animal/SnowGolem.java
+++ b/src/main/java/net/minecraft/world/entity/animal/SnowGolem.java
@@ -195,11 +195,11 @@ public class SnowGolem extends AbstractGolem implements Shearable, RangedAttackM
     }
 
     public boolean hasPumpkin() {
-        return ((Byte) this.entityData.get(SnowGolem.DATA_PUMPKIN_ID) & 16) != 0;
+        return (((Byte) this.entityData.get(SnowGolem.DATA_PUMPKIN_ID)).intValue() & 16) != 0;
     }
 
     public void setPumpkin(boolean hasPumpkin) {
-        byte b0 = (Byte) this.entityData.get(SnowGolem.DATA_PUMPKIN_ID);
+        byte b0 = ((Byte) this.entityData.get(SnowGolem.DATA_PUMPKIN_ID)).byteValue();
 
         if (hasPumpkin) {
             this.entityData.set(SnowGolem.DATA_PUMPKIN_ID, Byte.valueOf((byte) (b0 | 16)));
diff --git a/src/main/java/net/minecraft/world/entity/animal/Turtle.java b/src/main/java/net/minecraft/world/entity/animal/Turtle.java
index 7201fc3edec0a3ae4f20f5f48ce970ef5dc178c3..2f61bb50538eb6edb341f37aa6674d1d0c0b8309 100644
--- a/src/main/java/net/minecraft/world/entity/animal/Turtle.java
+++ b/src/main/java/net/minecraft/world/entity/animal/Turtle.java
@@ -99,7 +99,7 @@ public class Turtle extends Animal {
     }
 
     public boolean hasEgg() {
-        return (Boolean) this.entityData.get(Turtle.HAS_EGG);
+        return ((Boolean) this.entityData.get(Turtle.HAS_EGG)).booleanValue();
     }
 
     public void setHasEgg(boolean hasEgg) {
@@ -107,7 +107,7 @@ public class Turtle extends Animal {
     }
 
     public boolean isLayingEgg() {
-        return (Boolean) this.entityData.get(Turtle.LAYING_EGG);
+        return ((Boolean) this.entityData.get(Turtle.LAYING_EGG)).booleanValue();
     }
 
     void setLayingEgg(boolean diggingSand) {
@@ -116,7 +116,7 @@ public class Turtle extends Animal {
     }
 
     public boolean isGoingHome() {
-        return (Boolean) this.entityData.get(Turtle.GOING_HOME);
+        return ((Boolean) this.entityData.get(Turtle.GOING_HOME)).booleanValue();
     }
 
     public void setGoingHome(boolean landBound) {
@@ -124,7 +124,7 @@ public class Turtle extends Animal {
     }
 
     public boolean isTravelling() {
-        return (Boolean) this.entityData.get(Turtle.TRAVELLING);
+        return ((Boolean) this.entityData.get(Turtle.TRAVELLING)).booleanValue();
     }
 
     public void setTravelling(boolean traveling) {
diff --git a/src/main/java/net/minecraft/world/entity/animal/Wolf.java b/src/main/java/net/minecraft/world/entity/animal/Wolf.java
index a473a065f19101b5969f83d5afda3ea13a22feaa..e51b6bf44c427dd1f02c65ea211182b465f4f7b0 100644
--- a/src/main/java/net/minecraft/world/entity/animal/Wolf.java
+++ b/src/main/java/net/minecraft/world/entity/animal/Wolf.java
@@ -461,7 +461,7 @@ public class Wolf extends TamableAnimal implements NeutralMob {
 
     @Override
     public int getRemainingPersistentAngerTime() {
-        return (Integer) this.entityData.get(Wolf.DATA_REMAINING_ANGER_TIME);
+        return ((Integer) this.entityData.get(Wolf.DATA_REMAINING_ANGER_TIME)).intValue();
     }
 
     @Override
@@ -486,7 +486,7 @@ public class Wolf extends TamableAnimal implements NeutralMob {
     }
 
     public DyeColor getCollarColor() {
-        return DyeColor.byId((Integer) this.entityData.get(Wolf.DATA_COLLAR_COLOR));
+        return DyeColor.byId(((Integer) this.entityData.get(Wolf.DATA_COLLAR_COLOR)).intValue());
     }
 
     public void setCollarColor(DyeColor color) {
@@ -530,7 +530,7 @@ public class Wolf extends TamableAnimal implements NeutralMob {
     }
 
     public boolean isInterested() {
-        return (Boolean) this.entityData.get(Wolf.DATA_INTERESTED_ID);
+        return ((Boolean) this.entityData.get(Wolf.DATA_INTERESTED_ID)).booleanValue();
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/entity/animal/allay/Allay.java b/src/main/java/net/minecraft/world/entity/animal/allay/Allay.java
index 93d52d627098495cb61703a7d1df89a1aafeaeb3..94f16e972ad310d898fc0f2ed86ccb1f4b786c6c 100644
--- a/src/main/java/net/minecraft/world/entity/animal/allay/Allay.java
+++ b/src/main/java/net/minecraft/world/entity/animal/allay/Allay.java
@@ -437,7 +437,7 @@ public class Allay extends PathfinderMob implements InventoryCarrier {
     }
 
     public boolean isDancing() {
-        return (Boolean) this.entityData.get(Allay.DATA_DANCING);
+        return ((Boolean) this.entityData.get(Allay.DATA_DANCING)).booleanValue();
     }
 
     public boolean isPanicking() {
@@ -564,7 +564,7 @@ public class Allay extends PathfinderMob implements InventoryCarrier {
     }
 
     public boolean canDuplicate() { // PAIL private -> public
-        return (Boolean) this.entityData.get(Allay.DATA_CAN_DUPLICATE);
+        return ((Boolean) this.entityData.get(Allay.DATA_CAN_DUPLICATE)).booleanValue();
     }
 
     private void removeInteractionItem(Player player, ItemStack stack) {
diff --git a/src/main/java/net/minecraft/world/entity/animal/axolotl/Axolotl.java b/src/main/java/net/minecraft/world/entity/animal/axolotl/Axolotl.java
index 31af3f7d51542a8d5b2e649f95358b3927303a5a..dc13c202326fcdaeb95349b847821bc9ceb357ab 100644
--- a/src/main/java/net/minecraft/world/entity/animal/axolotl/Axolotl.java
+++ b/src/main/java/net/minecraft/world/entity/animal/axolotl/Axolotl.java
@@ -236,12 +236,12 @@ public class Axolotl extends Animal implements LerpingModel, VariantHolder<Axolo
     }
 
     public boolean isPlayingDead() {
-        return (Boolean) this.entityData.get(Axolotl.DATA_PLAYING_DEAD);
+        return ((Boolean) this.entityData.get(Axolotl.DATA_PLAYING_DEAD)).booleanValue();
     }
 
     @Override
     public boolean fromBucket() {
-        return (Boolean) this.entityData.get(Axolotl.FROM_BUCKET);
+        return ((Boolean) this.entityData.get(Axolotl.FROM_BUCKET)).booleanValue();
     }
 
     @Override
@@ -296,7 +296,7 @@ public class Axolotl extends Animal implements LerpingModel, VariantHolder<Axolo
         if (!this.isNoAi()) {
             Optional<Integer> optional = this.getBrain().getMemory(MemoryModuleType.PLAY_DEAD_TICKS);
 
-            this.setPlayingDead(optional.isPresent() && (Integer) optional.get() > 0);
+            this.setPlayingDead(optional.isPresent() && ((Integer) optional.get()).intValue() > 0);
         }
 
     }
diff --git a/src/main/java/net/minecraft/world/entity/animal/goat/Goat.java b/src/main/java/net/minecraft/world/entity/animal/goat/Goat.java
index 808cf64ce36c9a394cab9ff5af0304e4c688ff59..092c9c47fc5c403108b6500eeed1381ac2cf1f86 100644
--- a/src/main/java/net/minecraft/world/entity/animal/goat/Goat.java
+++ b/src/main/java/net/minecraft/world/entity/animal/goat/Goat.java
@@ -323,11 +323,11 @@ public class Goat extends Animal {
     }
 
     public boolean hasLeftHorn() {
-        return (Boolean) this.entityData.get(Goat.DATA_HAS_LEFT_HORN);
+        return ((Boolean) this.entityData.get(Goat.DATA_HAS_LEFT_HORN)).booleanValue();
     }
 
     public boolean hasRightHorn() {
-        return (Boolean) this.entityData.get(Goat.DATA_HAS_RIGHT_HORN);
+        return ((Boolean) this.entityData.get(Goat.DATA_HAS_RIGHT_HORN)).booleanValue();
     }
 
     public boolean dropHorn() {
@@ -370,7 +370,7 @@ public class Goat extends Animal {
     }
 
     public boolean isScreamingGoat() {
-        return (Boolean) this.entityData.get(Goat.DATA_IS_SCREAMING_GOAT);
+        return ((Boolean) this.entityData.get(Goat.DATA_IS_SCREAMING_GOAT)).booleanValue();
     }
 
     public void setScreamingGoat(boolean screaming) {
diff --git a/src/main/java/net/minecraft/world/entity/animal/horse/AbstractChestedHorse.java b/src/main/java/net/minecraft/world/entity/animal/horse/AbstractChestedHorse.java
index 7ffa4566d084c0efab11ed32c55975bc31c55569..1cd07c55069aded6882120cf12ca00855624004c 100644
--- a/src/main/java/net/minecraft/world/entity/animal/horse/AbstractChestedHorse.java
+++ b/src/main/java/net/minecraft/world/entity/animal/horse/AbstractChestedHorse.java
@@ -44,7 +44,7 @@ public abstract class AbstractChestedHorse extends AbstractHorse {
     }
 
     public boolean hasChest() {
-        return this.entityData.get(DATA_ID_CHEST);
+        return this.entityData.<Boolean>get(DATA_ID_CHEST).booleanValue();
     }
 
     public void setChest(boolean hasChest) {
diff --git a/src/main/java/net/minecraft/world/entity/animal/horse/AbstractHorse.java b/src/main/java/net/minecraft/world/entity/animal/horse/AbstractHorse.java
index 7367701595a77c2ee694c22098664729b2f894f8..569fdcf13df6efaae8afcf1133843eaa4f909e2a 100644
--- a/src/main/java/net/minecraft/world/entity/animal/horse/AbstractHorse.java
+++ b/src/main/java/net/minecraft/world/entity/animal/horse/AbstractHorse.java
@@ -151,11 +151,11 @@ public abstract class AbstractHorse extends Animal implements ContainerListener,
     }
 
     protected boolean getFlag(int bitmask) {
-        return ((Byte) this.entityData.get(AbstractHorse.DATA_ID_FLAGS) & bitmask) != 0;
+        return (((Byte) this.entityData.get(AbstractHorse.DATA_ID_FLAGS)).intValue() & bitmask) != 0;
     }
 
     protected void setFlag(int bitmask, boolean flag) {
-        byte b0 = (Byte) this.entityData.get(AbstractHorse.DATA_ID_FLAGS);
+        byte b0 = ((Byte) this.entityData.get(AbstractHorse.DATA_ID_FLAGS)).byteValue();
 
         if (flag) {
             this.entityData.set(AbstractHorse.DATA_ID_FLAGS, Byte.valueOf((byte) (b0 | bitmask)));
diff --git a/src/main/java/net/minecraft/world/entity/animal/horse/Llama.java b/src/main/java/net/minecraft/world/entity/animal/horse/Llama.java
index 491240b15493fe60037124071a7dcea4bd4a0c8d..83ce32632b1cd23ac9709bdbfb1aafddd004351e 100644
--- a/src/main/java/net/minecraft/world/entity/animal/horse/Llama.java
+++ b/src/main/java/net/minecraft/world/entity/animal/horse/Llama.java
@@ -99,7 +99,7 @@ public class Llama extends AbstractChestedHorse implements VariantHolder<Llama.V
     }
 
     public int getStrength() {
-        return (Integer) this.entityData.get(Llama.DATA_STRENGTH_ID);
+        return ((Integer) this.entityData.get(Llama.DATA_STRENGTH_ID)).intValue();
     }
 
     @Override
@@ -372,7 +372,7 @@ public class Llama extends AbstractChestedHorse implements VariantHolder<Llama.V
 
     @Nullable
     public DyeColor getSwag() {
-        int i = (Integer) this.entityData.get(Llama.DATA_SWAG_ID);
+        int i = ((Integer) this.entityData.get(Llama.DATA_SWAG_ID)).intValue();
 
         return i == -1 ? null : DyeColor.byId(i);
     }
diff --git a/src/main/java/net/minecraft/world/entity/boss/enderdragon/EndCrystal.java b/src/main/java/net/minecraft/world/entity/boss/enderdragon/EndCrystal.java
index f7b66379bcff70ed1077d74be15cc19604883250..5c32a34fbffb11ac24f8518005e5ef9566b0cc2b 100644
--- a/src/main/java/net/minecraft/world/entity/boss/enderdragon/EndCrystal.java
+++ b/src/main/java/net/minecraft/world/entity/boss/enderdragon/EndCrystal.java
@@ -174,7 +174,7 @@ public class EndCrystal extends Entity {
     }
 
     public boolean showsBottom() {
-        return (Boolean) this.getEntityData().get(EndCrystal.DATA_SHOW_BOTTOM);
+        return ((Boolean) this.getEntityData().get(EndCrystal.DATA_SHOW_BOTTOM)).booleanValue();
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/entity/boss/enderdragon/EnderDragon.java b/src/main/java/net/minecraft/world/entity/boss/enderdragon/EnderDragon.java
index 87463457bb036650c818d4839416860dba471d5f..16c5c7bad21e0b2ef8bafef4c5a50f05543519da 100644
--- a/src/main/java/net/minecraft/world/entity/boss/enderdragon/EnderDragon.java
+++ b/src/main/java/net/minecraft/world/entity/boss/enderdragon/EnderDragon.java
@@ -1047,7 +1047,7 @@ public class EnderDragon extends Mob implements Enemy {
     @Override
     public void onSyncedDataUpdated(EntityDataAccessor<?> data) {
         if (EnderDragon.DATA_PHASE.equals(data) && this.level.isClientSide) {
-            this.phaseManager.setPhase(EnderDragonPhase.getById((Integer) this.getEntityData().get(EnderDragon.DATA_PHASE)));
+            this.phaseManager.setPhase(EnderDragonPhase.getById(((Integer) this.getEntityData().get(EnderDragon.DATA_PHASE)).intValue()));
         }
 
         super.onSyncedDataUpdated(data);
diff --git a/src/main/java/net/minecraft/world/entity/boss/wither/WitherBoss.java b/src/main/java/net/minecraft/world/entity/boss/wither/WitherBoss.java
index 716cfb6af823e3a66342dbbe9e6550db0e99709d..e5177109b5384e0fa4c5f163bb19c3e6e492b209 100644
--- a/src/main/java/net/minecraft/world/entity/boss/wither/WitherBoss.java
+++ b/src/main/java/net/minecraft/world/entity/boss/wither/WitherBoss.java
@@ -572,7 +572,7 @@ public class WitherBoss extends Monster implements PowerableMob, RangedAttackMob
     }
 
     public int getInvulnerableTicks() {
-        return (Integer) this.entityData.get(WitherBoss.DATA_ID_INV);
+        return ((Integer) this.entityData.get(WitherBoss.DATA_ID_INV)).intValue();
     }
 
     public void setInvulnerableTicks(int ticks) {
@@ -580,7 +580,7 @@ public class WitherBoss extends Monster implements PowerableMob, RangedAttackMob
     }
 
     public int getAlternativeTarget(int headIndex) {
-        return (Integer) this.entityData.get((EntityDataAccessor) WitherBoss.DATA_TARGETS.get(headIndex));
+        return ((Integer) this.entityData.get((EntityDataAccessor) WitherBoss.DATA_TARGETS.get(headIndex))).intValue();
     }
 
     public void setAlternativeTarget(int headIndex, int id) {
diff --git a/src/main/java/net/minecraft/world/entity/decoration/ArmorStand.java b/src/main/java/net/minecraft/world/entity/decoration/ArmorStand.java
index 9c431bcd0af61df99b64bf66c25285f1a23fb6c3..c40c0f2d07cc0a1dda4b43b181b2a22deeac6524 100644
--- a/src/main/java/net/minecraft/world/entity/decoration/ArmorStand.java
+++ b/src/main/java/net/minecraft/world/entity/decoration/ArmorStand.java
@@ -774,7 +774,7 @@ public class ArmorStand extends LivingEntity {
     }
 
     public boolean isSmall() {
-        return ((Byte) this.entityData.get(ArmorStand.DATA_CLIENT_FLAGS) & 1) != 0;
+        return (((Byte) this.entityData.get(ArmorStand.DATA_CLIENT_FLAGS)).intValue() & 1) != 0;
     }
 
     public void setShowArms(boolean showArms) {
@@ -782,7 +782,7 @@ public class ArmorStand extends LivingEntity {
     }
 
     public boolean isShowArms() {
-        return ((Byte) this.entityData.get(ArmorStand.DATA_CLIENT_FLAGS) & 4) != 0;
+        return (((Byte) this.entityData.get(ArmorStand.DATA_CLIENT_FLAGS)).intValue() & 4) != 0;
     }
 
     public void setNoBasePlate(boolean hideBasePlate) {
@@ -790,7 +790,7 @@ public class ArmorStand extends LivingEntity {
     }
 
     public boolean isNoBasePlate() {
-        return ((Byte) this.entityData.get(ArmorStand.DATA_CLIENT_FLAGS) & 8) != 0;
+        return (((Byte) this.entityData.get(ArmorStand.DATA_CLIENT_FLAGS)).intValue() & 8) != 0;
     }
 
     public void setMarker(boolean marker) {
@@ -798,7 +798,7 @@ public class ArmorStand extends LivingEntity {
     }
 
     public boolean isMarker() {
-        return ((Byte) this.entityData.get(ArmorStand.DATA_CLIENT_FLAGS) & 16) != 0;
+        return (((Byte) this.entityData.get(ArmorStand.DATA_CLIENT_FLAGS)).intValue() & 16) != 0;
     }
 
     private byte setBit(byte value, int bitField, boolean set) {
diff --git a/src/main/java/net/minecraft/world/entity/decoration/ItemFrame.java b/src/main/java/net/minecraft/world/entity/decoration/ItemFrame.java
index 9732c68043b94a14918dda05843d2ec5a2335fb0..91da3a125e952276ce049106013561e1ae9e4cbd 100644
--- a/src/main/java/net/minecraft/world/entity/decoration/ItemFrame.java
+++ b/src/main/java/net/minecraft/world/entity/decoration/ItemFrame.java
@@ -314,7 +314,7 @@ public class ItemFrame extends HangingEntity {
             Integer integer = MapItem.getMapId(itemstack);
 
             if (integer != null) {
-                return OptionalInt.of(integer);
+                return OptionalInt.of(integer.intValue());
             }
         }
 
@@ -390,7 +390,7 @@ public class ItemFrame extends HangingEntity {
     }
 
     public int getRotation() {
-        return (Integer) this.getEntityData().get(ItemFrame.DATA_ROTATION);
+        return ((Integer) this.getEntityData().get(ItemFrame.DATA_ROTATION)).intValue();
     }
 
     public void setRotation(int value) {
diff --git a/src/main/java/net/minecraft/world/entity/item/PrimedTnt.java b/src/main/java/net/minecraft/world/entity/item/PrimedTnt.java
index 4136b8ae6ea133d9c378fb3b0a59194f47460247..2dcb57274342e521089c98347f1b33ee7110c556 100644
--- a/src/main/java/net/minecraft/world/entity/item/PrimedTnt.java
+++ b/src/main/java/net/minecraft/world/entity/item/PrimedTnt.java
@@ -163,7 +163,7 @@ public class PrimedTnt extends Entity {
     }
 
     public int getFuse() {
-        return (Integer) this.entityData.get(PrimedTnt.DATA_FUSE_ID);
+        return ((Integer) this.entityData.get(PrimedTnt.DATA_FUSE_ID)).intValue();
     }
 
     // Paper start - Optional prevent TNT from moving in water
diff --git a/src/main/java/net/minecraft/world/entity/monster/Creeper.java b/src/main/java/net/minecraft/world/entity/monster/Creeper.java
index e884dbe9bc600313a1c7554d2603ca642a8fe88d..efca9a0751128afa853deef5836b8cbd19aa27f8 100644
--- a/src/main/java/net/minecraft/world/entity/monster/Creeper.java
+++ b/src/main/java/net/minecraft/world/entity/monster/Creeper.java
@@ -110,7 +110,7 @@ public class Creeper extends Monster implements PowerableMob {
     @Override
     public void addAdditionalSaveData(CompoundTag nbt) {
         super.addAdditionalSaveData(nbt);
-        if ((Boolean) this.entityData.get(Creeper.DATA_IS_POWERED)) {
+        if (((Boolean) this.entityData.get(Creeper.DATA_IS_POWERED)).booleanValue()) {
             nbt.putBoolean("powered", true);
         }
 
@@ -206,7 +206,7 @@ public class Creeper extends Monster implements PowerableMob {
 
     @Override
     public boolean isPowered() {
-        return (Boolean) this.entityData.get(Creeper.DATA_IS_POWERED);
+        return ((Boolean) this.entityData.get(Creeper.DATA_IS_POWERED)).booleanValue();
     }
 
     public float getSwelling(float timeDelta) {
@@ -214,7 +214,7 @@ public class Creeper extends Monster implements PowerableMob {
     }
 
     public int getSwellDir() {
-        return (Integer) this.entityData.get(Creeper.DATA_SWELL_DIR);
+        return ((Integer) this.entityData.get(Creeper.DATA_SWELL_DIR)).intValue();
     }
 
     public void setSwellDir(int fuseSpeed) {
@@ -311,7 +311,7 @@ public class Creeper extends Monster implements PowerableMob {
     }
 
     public boolean isIgnited() {
-        return (Boolean) this.entityData.get(Creeper.DATA_IS_IGNITED);
+        return ((Boolean) this.entityData.get(Creeper.DATA_IS_IGNITED)).booleanValue();
     }
 
     public void ignite() {
diff --git a/src/main/java/net/minecraft/world/entity/monster/EnderMan.java b/src/main/java/net/minecraft/world/entity/monster/EnderMan.java
index 028ffb9b764b75dd0ca28ec32dbe4ac45573bab0..25080f6ea05b7731ee4fd5ddec8bbf78383d0c23 100644
--- a/src/main/java/net/minecraft/world/entity/monster/EnderMan.java
+++ b/src/main/java/net/minecraft/world/entity/monster/EnderMan.java
@@ -438,11 +438,11 @@ public class EnderMan extends Monster implements NeutralMob {
     }
 
     public boolean isCreepy() {
-        return (Boolean) this.entityData.get(EnderMan.DATA_CREEPY);
+        return ((Boolean) this.entityData.get(EnderMan.DATA_CREEPY)).booleanValue();
     }
 
     public boolean hasBeenStaredAt() {
-        return (Boolean) this.entityData.get(EnderMan.DATA_STARED_AT);
+        return ((Boolean) this.entityData.get(EnderMan.DATA_STARED_AT)).booleanValue();
     }
 
     public void setBeingStaredAt() {
diff --git a/src/main/java/net/minecraft/world/entity/monster/Ghast.java b/src/main/java/net/minecraft/world/entity/monster/Ghast.java
index 9eb42ced46f518ed92c2098cd0c245937504b2c4..49e06f5fa60ea4a7933f22ade09bc0d399ecd009 100644
--- a/src/main/java/net/minecraft/world/entity/monster/Ghast.java
+++ b/src/main/java/net/minecraft/world/entity/monster/Ghast.java
@@ -55,7 +55,7 @@ public class Ghast extends FlyingMob implements Enemy {
     }
 
     public boolean isCharging() {
-        return (Boolean) this.entityData.get(Ghast.DATA_IS_CHARGING);
+        return ((Boolean) this.entityData.get(Ghast.DATA_IS_CHARGING)).booleanValue();
     }
 
     public void setCharging(boolean shooting) {
diff --git a/src/main/java/net/minecraft/world/entity/monster/Phantom.java b/src/main/java/net/minecraft/world/entity/monster/Phantom.java
index 598716b8457d0d907b41262d3a2e24a1c16e4a11..a000a6ecbfcbc7991987400ee85a97f847698e39 100644
--- a/src/main/java/net/minecraft/world/entity/monster/Phantom.java
+++ b/src/main/java/net/minecraft/world/entity/monster/Phantom.java
@@ -94,7 +94,7 @@ public class Phantom extends FlyingMob implements Enemy {
     }
 
     public int getPhantomSize() {
-        return (Integer) this.entityData.get(Phantom.ID_SIZE);
+        return ((Integer) this.entityData.get(Phantom.ID_SIZE)).intValue();
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/entity/monster/Shulker.java b/src/main/java/net/minecraft/world/entity/monster/Shulker.java
index 9119d9eaff3002f5a988c87325c8776a8494506c..e4b687ed0b451b7fbbb215501ae268b01c56724f 100644
--- a/src/main/java/net/minecraft/world/entity/monster/Shulker.java
+++ b/src/main/java/net/minecraft/world/entity/monster/Shulker.java
@@ -170,8 +170,8 @@ public class Shulker extends AbstractGolem implements VariantHolder<Optional<Dye
     public void addAdditionalSaveData(CompoundTag nbt) {
         super.addAdditionalSaveData(nbt);
         nbt.putByte("AttachFace", (byte) this.getAttachFace().get3DDataValue());
-        nbt.putByte("Peek", (Byte) this.entityData.get(Shulker.DATA_PEEK_ID));
-        nbt.putByte("Color", (Byte) this.entityData.get(Shulker.DATA_COLOR_ID));
+        nbt.putByte("Peek", ((Byte) this.entityData.get(Shulker.DATA_PEEK_ID)).byteValue());
+        nbt.putByte("Color", ((Byte) this.entityData.get(Shulker.DATA_COLOR_ID)).byteValue());
     }
 
     @Override
@@ -520,7 +520,7 @@ public class Shulker extends AbstractGolem implements VariantHolder<Optional<Dye
     }
 
     public int getRawPeekAmount() {
-        return (Byte) this.entityData.get(Shulker.DATA_PEEK_ID);
+        return ((Byte) this.entityData.get(Shulker.DATA_PEEK_ID)).intValue();
     }
 
     public void setRawPeekAmount(int peekAmount) {
@@ -602,7 +602,7 @@ public class Shulker extends AbstractGolem implements VariantHolder<Optional<Dye
 
     @Nullable
     public DyeColor getColor() {
-        byte b0 = (Byte) this.entityData.get(Shulker.DATA_COLOR_ID);
+        byte b0 = ((Byte) this.entityData.get(Shulker.DATA_COLOR_ID)).byteValue();
 
         return b0 != 16 && b0 <= 15 ? DyeColor.byId(b0) : null;
     }
diff --git a/src/main/java/net/minecraft/world/entity/monster/Skeleton.java b/src/main/java/net/minecraft/world/entity/monster/Skeleton.java
index f3d74bcf11664e9350155cc7e9c76ebf4cde36ce..b77409d6f107a5e32418715ac3559344ba3d9438 100644
--- a/src/main/java/net/minecraft/world/entity/monster/Skeleton.java
+++ b/src/main/java/net/minecraft/world/entity/monster/Skeleton.java
@@ -33,7 +33,7 @@ public class Skeleton extends AbstractSkeleton {
     }
 
     public boolean isFreezeConverting() {
-        return (Boolean) this.getEntityData().get(Skeleton.DATA_STRAY_CONVERSION_ID);
+        return ((Boolean) this.getEntityData().get(Skeleton.DATA_STRAY_CONVERSION_ID)).booleanValue();
     }
 
     public void setFreezeConverting(boolean converting) {
diff --git a/src/main/java/net/minecraft/world/entity/monster/Slime.java b/src/main/java/net/minecraft/world/entity/monster/Slime.java
index b802101ab77fedfa9005a2a7a38d05b4cc94d5bf..a2a507ba9490137c0ad7c0ca2e51ff47963ad4c0 100644
--- a/src/main/java/net/minecraft/world/entity/monster/Slime.java
+++ b/src/main/java/net/minecraft/world/entity/monster/Slime.java
@@ -107,7 +107,7 @@ public class Slime extends Mob implements Enemy {
     }
 
     public int getSize() {
-        return (Integer) this.entityData.get(Slime.ID_SIZE);
+        return ((Integer) this.entityData.get(Slime.ID_SIZE)).intValue();
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/entity/monster/SpellcasterIllager.java b/src/main/java/net/minecraft/world/entity/monster/SpellcasterIllager.java
index 2d4e0ae39abb0c3ebf047d50f33b948a7e49cea0..a27434020edd8cb9709b7ea3317174a1f58f46a9 100644
--- a/src/main/java/net/minecraft/world/entity/monster/SpellcasterIllager.java
+++ b/src/main/java/net/minecraft/world/entity/monster/SpellcasterIllager.java
@@ -51,7 +51,7 @@ public abstract class SpellcasterIllager extends AbstractIllager {
     }
 
     public boolean isCastingSpell() {
-        return this.level.isClientSide ? (Byte) this.entityData.get(SpellcasterIllager.DATA_SPELL_CASTING_ID) > 0 : this.spellCastingTickCount > 0;
+        return this.level.isClientSide ? ((Byte) this.entityData.get(SpellcasterIllager.DATA_SPELL_CASTING_ID)).intValue() > 0 : this.spellCastingTickCount > 0;
     }
 
     public void setIsCastingSpell(SpellcasterIllager.IllagerSpell spell) {
@@ -60,7 +60,7 @@ public abstract class SpellcasterIllager extends AbstractIllager {
     }
 
     public SpellcasterIllager.IllagerSpell getCurrentSpell() {
-        return !this.level.isClientSide ? this.currentSpell : SpellcasterIllager.IllagerSpell.byId((Byte) this.entityData.get(SpellcasterIllager.DATA_SPELL_CASTING_ID));
+        return !this.level.isClientSide ? this.currentSpell : SpellcasterIllager.IllagerSpell.byId(((Byte) this.entityData.get(SpellcasterIllager.DATA_SPELL_CASTING_ID)).intValue());
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/entity/monster/Spider.java b/src/main/java/net/minecraft/world/entity/monster/Spider.java
index 30a06040f4d0019451d8bdd1f069e2384f32d8c5..fa2373fcdbed47e29c8685c0393f5472272ae5f9 100644
--- a/src/main/java/net/minecraft/world/entity/monster/Spider.java
+++ b/src/main/java/net/minecraft/world/entity/monster/Spider.java
@@ -137,11 +137,11 @@ public class Spider extends Monster {
     }
 
     public boolean isClimbing() {
-        return ((Byte) this.entityData.get(Spider.DATA_FLAGS_ID) & 1) != 0;
+        return (((Byte) this.entityData.get(Spider.DATA_FLAGS_ID)).intValue() & 1) != 0;
     }
 
     public void setClimbing(boolean climbing) {
-        byte b0 = (Byte) this.entityData.get(Spider.DATA_FLAGS_ID);
+        byte b0 = ((Byte) this.entityData.get(Spider.DATA_FLAGS_ID)).byteValue();
 
         if (climbing) {
             b0 = (byte) (b0 | 1);
diff --git a/src/main/java/net/minecraft/world/entity/monster/Strider.java b/src/main/java/net/minecraft/world/entity/monster/Strider.java
index 2171f954adf338a871d71d178ebab3ddc2cae7f4..a958c61a3db39960b12bf09dc69dc345efcb3f5e 100644
--- a/src/main/java/net/minecraft/world/entity/monster/Strider.java
+++ b/src/main/java/net/minecraft/world/entity/monster/Strider.java
@@ -174,7 +174,7 @@ public class Strider extends Animal implements ItemSteerable, Saddleable {
     }
 
     public boolean isSuffocating() {
-        return this.getVehicle() instanceof Strider ? ((Strider) this.getVehicle()).isSuffocating() : (Boolean) this.entityData.get(Strider.DATA_SUFFOCATING);
+        return this.getVehicle() instanceof Strider ? ((Strider) this.getVehicle()).isSuffocating() : ((Boolean) this.entityData.get(Strider.DATA_SUFFOCATING)).booleanValue();
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/entity/monster/Vex.java b/src/main/java/net/minecraft/world/entity/monster/Vex.java
index 8324ee1483fcacef13e8e9877e214d450b47d12e..a5ee59d949358f80102f9668c22469d5f0876449 100644
--- a/src/main/java/net/minecraft/world/entity/monster/Vex.java
+++ b/src/main/java/net/minecraft/world/entity/monster/Vex.java
@@ -157,13 +157,13 @@ public class Vex extends Monster {
     }
 
     private boolean getVexFlag(int mask) {
-        byte b0 = (Byte) this.entityData.get(Vex.DATA_FLAGS_ID);
+        byte b0 = ((Byte) this.entityData.get(Vex.DATA_FLAGS_ID)).byteValue();
 
         return (b0 & mask) != 0;
     }
 
     private void setVexFlag(int mask, boolean value) {
-        byte b0 = (Byte) this.entityData.get(Vex.DATA_FLAGS_ID);
+        byte b0 = ((Byte) this.entityData.get(Vex.DATA_FLAGS_ID)).byteValue();
         int j;
 
         if (value) {
diff --git a/src/main/java/net/minecraft/world/entity/monster/Witch.java b/src/main/java/net/minecraft/world/entity/monster/Witch.java
index 95669141b1db08dffcc80b3d32afcb84752df7f6..803a9fba8f5830c7b0d6f2c5770f32c07e2ab4ca 100644
--- a/src/main/java/net/minecraft/world/entity/monster/Witch.java
+++ b/src/main/java/net/minecraft/world/entity/monster/Witch.java
@@ -99,7 +99,7 @@ public class Witch extends Raider implements RangedAttackMob {
     }
 
     public boolean isDrinkingPotion() {
-        return (Boolean) this.getEntityData().get(Witch.DATA_USING_ITEM);
+        return ((Boolean) this.getEntityData().get(Witch.DATA_USING_ITEM)).booleanValue();
     }
 
     public static AttributeSupplier.Builder createAttributes() {
diff --git a/src/main/java/net/minecraft/world/entity/monster/Zombie.java b/src/main/java/net/minecraft/world/entity/monster/Zombie.java
index 39261e407ed72937770da999198cbbe0f4a541b5..5267052046a8af1ed7677ad2302d453649281306 100644
--- a/src/main/java/net/minecraft/world/entity/monster/Zombie.java
+++ b/src/main/java/net/minecraft/world/entity/monster/Zombie.java
@@ -138,7 +138,7 @@ public class Zombie extends Monster {
     }
 
     public boolean isUnderWaterConverting() {
-        return (Boolean) this.getEntityData().get(Zombie.DATA_DROWNED_CONVERSION_ID);
+        return ((Boolean) this.getEntityData().get(Zombie.DATA_DROWNED_CONVERSION_ID)).booleanValue();
     }
 
     public boolean canBreakDoors() {
@@ -169,7 +169,7 @@ public class Zombie extends Monster {
 
     @Override
     public boolean isBaby() {
-        return (Boolean) this.getEntityData().get(Zombie.DATA_BABY_ID);
+        return ((Boolean) this.getEntityData().get(Zombie.DATA_BABY_ID)).booleanValue();
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/entity/monster/ZombieVillager.java b/src/main/java/net/minecraft/world/entity/monster/ZombieVillager.java
index edd30a5eced0b6bf257de2ebbe72fc5f77de6fe1..e16a36f85ca0406e3e71ae6dafb03262e2c5163d 100644
--- a/src/main/java/net/minecraft/world/entity/monster/ZombieVillager.java
+++ b/src/main/java/net/minecraft/world/entity/monster/ZombieVillager.java
@@ -194,7 +194,7 @@ public class ZombieVillager extends Zombie implements VillagerDataHolder {
     }
 
     public boolean isConverting() {
-        return (Boolean) this.getEntityData().get(ZombieVillager.DATA_CONVERTING_ID);
+        return ((Boolean) this.getEntityData().get(ZombieVillager.DATA_CONVERTING_ID)).booleanValue();
     }
 
     public void startConverting(@Nullable UUID uuid, int delay) {
diff --git a/src/main/java/net/minecraft/world/entity/monster/hoglin/Hoglin.java b/src/main/java/net/minecraft/world/entity/monster/hoglin/Hoglin.java
index 2f598ae8c718903c8cadbecd4cc593e1c8346108..317899ef7cf6ab7c70e7790814a9bb8872a93c24 100644
--- a/src/main/java/net/minecraft/world/entity/monster/hoglin/Hoglin.java
+++ b/src/main/java/net/minecraft/world/entity/monster/hoglin/Hoglin.java
@@ -289,7 +289,7 @@ public class Hoglin extends Animal implements Enemy, HoglinBase {
     }
 
     public boolean isImmuneToZombification() {
-        return this.getEntityData().get(DATA_IMMUNE_TO_ZOMBIFICATION);
+        return this.getEntityData().<Boolean>get(DATA_IMMUNE_TO_ZOMBIFICATION).booleanValue();
     }
 
     public boolean isConverting() {
diff --git a/src/main/java/net/minecraft/world/entity/monster/piglin/AbstractPiglin.java b/src/main/java/net/minecraft/world/entity/monster/piglin/AbstractPiglin.java
index 0f7398d86261926de802075acf91e85092278ee3..2325f3eaccd5829b580b7f6dc1a0591b9938f75a 100644
--- a/src/main/java/net/minecraft/world/entity/monster/piglin/AbstractPiglin.java
+++ b/src/main/java/net/minecraft/world/entity/monster/piglin/AbstractPiglin.java
@@ -56,7 +56,7 @@ public abstract class AbstractPiglin extends Monster {
     }
 
     public boolean isImmuneToZombification() {
-        return (Boolean) this.getEntityData().get(AbstractPiglin.DATA_IMMUNE_TO_ZOMBIFICATION);
+        return ((Boolean) this.getEntityData().get(AbstractPiglin.DATA_IMMUNE_TO_ZOMBIFICATION)).booleanValue();
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/entity/monster/piglin/Piglin.java b/src/main/java/net/minecraft/world/entity/monster/piglin/Piglin.java
index 2415b64809f23de6ed50eb0a40ca7a623a3b6b24..9964edffd9eab551da7dee8d406d30da99bf5dc1 100644
--- a/src/main/java/net/minecraft/world/entity/monster/piglin/Piglin.java
+++ b/src/main/java/net/minecraft/world/entity/monster/piglin/Piglin.java
@@ -296,7 +296,7 @@ public class Piglin extends AbstractPiglin implements CrossbowAttackMob, Invento
 
     @Override
     public boolean isBaby() {
-        return (Boolean) this.getEntityData().get(Piglin.DATA_BABY_ID);
+        return ((Boolean) this.getEntityData().get(Piglin.DATA_BABY_ID)).booleanValue();
     }
 
     private void setCannotHunt(boolean cannotHunt) {
@@ -336,7 +336,7 @@ public class Piglin extends AbstractPiglin implements CrossbowAttackMob, Invento
     }
 
     public boolean isChargingCrossbow() {
-        return (Boolean) this.entityData.get(Piglin.DATA_IS_CHARGING_CROSSBOW);
+        return ((Boolean) this.entityData.get(Piglin.DATA_IS_CHARGING_CROSSBOW)).booleanValue();
     }
 
     @Override
@@ -355,7 +355,7 @@ public class Piglin extends AbstractPiglin implements CrossbowAttackMob, Invento
     }
 
     public boolean isDancing() {
-        return (Boolean) this.entityData.get(Piglin.DATA_IS_DANCING);
+        return ((Boolean) this.entityData.get(Piglin.DATA_IS_DANCING)).booleanValue();
     }
 
     public void setDancing(boolean dancing) {
diff --git a/src/main/java/net/minecraft/world/entity/monster/piglin/PiglinAi.java b/src/main/java/net/minecraft/world/entity/monster/piglin/PiglinAi.java
index ce1cb55f54522d894fab8338ff30913c1376612c..8b064875fdd8082168561cf8d3182841e9cec115 100644
--- a/src/main/java/net/minecraft/world/entity/monster/piglin/PiglinAi.java
+++ b/src/main/java/net/minecraft/world/entity/monster/piglin/PiglinAi.java
@@ -721,8 +721,8 @@ public class PiglinAi {
     }
 
     private static boolean hoglinsOutnumberPiglins(Piglin piglins) {
-        int i = (Integer) piglins.getBrain().getMemory(MemoryModuleType.VISIBLE_ADULT_PIGLIN_COUNT).orElse(Integer.valueOf(0)) + 1;
-        int j = (Integer) piglins.getBrain().getMemory(MemoryModuleType.VISIBLE_ADULT_HOGLIN_COUNT).orElse(Integer.valueOf(0));
+        int i = ((Integer) piglins.getBrain().getMemory(MemoryModuleType.VISIBLE_ADULT_PIGLIN_COUNT).orElse(Integer.valueOf(0))).intValue() + 1;
+        int j = ((Integer) piglins.getBrain().getMemory(MemoryModuleType.VISIBLE_ADULT_HOGLIN_COUNT).orElse(Integer.valueOf(0))).intValue();
 
         return j > i;
     }
diff --git a/src/main/java/net/minecraft/world/entity/monster/warden/Warden.java b/src/main/java/net/minecraft/world/entity/monster/warden/Warden.java
index 6dceb80940a81d0c318b6b483e0cb4d681dab967..edae6ed139fece98610822ea5442238c9dad6041 100644
--- a/src/main/java/net/minecraft/world/entity/monster/warden/Warden.java
+++ b/src/main/java/net/minecraft/world/entity/monster/warden/Warden.java
@@ -220,7 +220,7 @@ public class Warden extends Monster implements VibrationListener.VibrationListen
     }
 
     public int getClientAngerLevel() {
-        return (Integer) this.entityData.get(Warden.CLIENT_ANGER_LEVEL);
+        return ((Integer) this.entityData.get(Warden.CLIENT_ANGER_LEVEL)).intValue();
     }
 
     private void syncClientAngerLevel() {
diff --git a/src/main/java/net/minecraft/world/entity/npc/AbstractVillager.java b/src/main/java/net/minecraft/world/entity/npc/AbstractVillager.java
index e17b6ca08a220f41b0af5e1b7f15528aa1aaa091..9b3698b8b767fb93b8c6b86d3fca52f897dd05ec 100644
--- a/src/main/java/net/minecraft/world/entity/npc/AbstractVillager.java
+++ b/src/main/java/net/minecraft/world/entity/npc/AbstractVillager.java
@@ -77,7 +77,7 @@ public abstract class AbstractVillager extends AgeableMob implements InventoryCa
     }
 
     public int getUnhappyCounter() {
-        return (Integer) this.entityData.get(AbstractVillager.DATA_UNHAPPY_COUNTER);
+        return ((Integer) this.entityData.get(AbstractVillager.DATA_UNHAPPY_COUNTER)).intValue();
     }
 
     public void setUnhappyCounter(int ticks) {
@@ -277,7 +277,7 @@ public abstract class AbstractVillager extends AgeableMob implements InventoryCa
 
         while (iterator.hasNext()) {
             Integer integer = (Integer) iterator.next();
-            VillagerTrades.ItemListing villagertrades_imerchantrecipeoption = pool[integer];
+            VillagerTrades.ItemListing villagertrades_imerchantrecipeoption = pool[integer.intValue()];
             MerchantOffer merchantrecipe = villagertrades_imerchantrecipeoption.getOffer(this, this.random);
 
             if (merchantrecipe != null) {
diff --git a/src/main/java/net/minecraft/world/entity/npc/Villager.java b/src/main/java/net/minecraft/world/entity/npc/Villager.java
index f66e0c3b38707a24f7cc70325d0611959d956de5..75432631aad099dd569a5cbb4c538724a995113f 100644
--- a/src/main/java/net/minecraft/world/entity/npc/Villager.java
+++ b/src/main/java/net/minecraft/world/entity/npc/Villager.java
@@ -745,7 +745,7 @@ public class Villager extends AbstractVillager implements ReputationEventHandler
                         int j = itemstack.getCount();
 
                         for (int k = j; k > 0; --k) {
-                            this.foodLevel += integer;
+                            this.foodLevel += integer.intValue();
                             this.getInventory().removeItem(i, 1);
                             if (!this.hungry()) {
                                 return;
@@ -913,7 +913,7 @@ public class Villager extends AbstractVillager implements ReputationEventHandler
         SimpleContainer inventorysubcontainer = this.getInventory();
 
         return Villager.FOOD_POINTS.entrySet().stream().mapToInt((entry) -> {
-            return inventorysubcontainer.countItem((Item) entry.getKey()) * (Integer) entry.getValue();
+            return inventorysubcontainer.countItem((Item) entry.getKey()) * ((Integer) entry.getValue()).intValue();
         }).sum();
     }
 
@@ -1054,6 +1054,6 @@ public class Villager extends AbstractVillager implements ReputationEventHandler
     private boolean golemSpawnConditionsMet(long worldTime) {
         Optional<Long> optional = this.brain.getMemory(MemoryModuleType.LAST_SLEPT);
 
-        return optional.isPresent() ? worldTime - (Long) optional.get() < 24000L : false;
+        return optional.isPresent() ? worldTime - ((Long) optional.get()).longValue() < 24000L : false;
     }
 }
diff --git a/src/main/java/net/minecraft/world/entity/player/Player.java b/src/main/java/net/minecraft/world/entity/player/Player.java
index 72dd1d172762c66c183ffa824401e0f1a6e744a9..a81850f620d8b03425182816351c77fd2a725eb1 100644
--- a/src/main/java/net/minecraft/world/entity/player/Player.java
+++ b/src/main/java/net/minecraft/world/entity/player/Player.java
@@ -627,7 +627,7 @@ public abstract class Player extends LivingEntity {
     }
 
     public int getScore() {
-        return (Integer) this.entityData.get(Player.DATA_SCORE_ID);
+        return ((Integer) this.entityData.get(Player.DATA_SCORE_ID)).intValue();
     }
 
     public void setScore(int score) {
@@ -2162,11 +2162,11 @@ public abstract class Player extends LivingEntity {
 
     @Override
     public float getAbsorptionAmount() {
-        return (Float) this.getEntityData().get(Player.DATA_PLAYER_ABSORPTION_ID);
+        return ((Float) this.getEntityData().get(Player.DATA_PLAYER_ABSORPTION_ID)).floatValue();
     }
 
     public boolean isModelPartShown(PlayerModelPart modelPart) {
-        return ((Byte) this.getEntityData().get(Player.DATA_PLAYER_MODE_CUSTOMISATION) & modelPart.getMask()) == modelPart.getMask();
+        return (((Byte) this.getEntityData().get(Player.DATA_PLAYER_MODE_CUSTOMISATION)).intValue() & modelPart.getMask()) == modelPart.getMask();
     }
 
     @Override
@@ -2195,7 +2195,7 @@ public abstract class Player extends LivingEntity {
 
     @Override
     public HumanoidArm getMainArm() {
-        return (Byte) this.entityData.get(Player.DATA_PLAYER_MAIN_HAND) == 0 ? HumanoidArm.LEFT : HumanoidArm.RIGHT;
+        return ((Byte) this.entityData.get(Player.DATA_PLAYER_MAIN_HAND)).intValue() == 0 ? HumanoidArm.LEFT : HumanoidArm.RIGHT;
     }
 
     public void setMainArm(HumanoidArm arm) {
diff --git a/src/main/java/net/minecraft/world/entity/projectile/AbstractArrow.java b/src/main/java/net/minecraft/world/entity/projectile/AbstractArrow.java
index b8d6673360d564ac48801d86ce3399970f7514fe..d0dace61c627a1e521658fc40fe3dbcda9d9b105 100644
--- a/src/main/java/net/minecraft/world/entity/projectile/AbstractArrow.java
+++ b/src/main/java/net/minecraft/world/entity/projectile/AbstractArrow.java
@@ -635,7 +635,7 @@ public abstract class AbstractArrow extends Projectile {
     }
 
     private void setFlag(int index, boolean flag) {
-        byte b0 = (Byte) this.entityData.get(AbstractArrow.ID_FLAGS);
+        byte b0 = ((Byte) this.entityData.get(AbstractArrow.ID_FLAGS)).byteValue();
 
         if (flag) {
             this.entityData.set(AbstractArrow.ID_FLAGS, Byte.valueOf((byte) (b0 | index)));
@@ -646,19 +646,19 @@ public abstract class AbstractArrow extends Projectile {
     }
 
     public boolean isCritArrow() {
-        byte b0 = (Byte) this.entityData.get(AbstractArrow.ID_FLAGS);
+        byte b0 = ((Byte) this.entityData.get(AbstractArrow.ID_FLAGS)).byteValue();
 
         return (b0 & 1) != 0;
     }
 
     public boolean shotFromCrossbow() {
-        byte b0 = (Byte) this.entityData.get(AbstractArrow.ID_FLAGS);
+        byte b0 = ((Byte) this.entityData.get(AbstractArrow.ID_FLAGS)).byteValue();
 
         return (b0 & 4) != 0;
     }
 
     public byte getPierceLevel() {
-        return (Byte) this.entityData.get(AbstractArrow.PIERCE_LEVEL);
+        return ((Byte) this.entityData.get(AbstractArrow.PIERCE_LEVEL)).byteValue();
     }
 
     public void setEnchantmentEffectsFromEntity(LivingEntity entity, float damageModifier) {
@@ -690,7 +690,7 @@ public abstract class AbstractArrow extends Projectile {
     }
 
     public boolean isNoPhysics() {
-        return !this.level.isClientSide ? this.noPhysics : ((Byte) this.entityData.get(AbstractArrow.ID_FLAGS) & 2) != 0;
+        return !this.level.isClientSide ? this.noPhysics : (((Byte) this.entityData.get(AbstractArrow.ID_FLAGS)).intValue() & 2) != 0;
     }
 
     public void setShotFromCrossbow(boolean shotFromCrossbow) {
diff --git a/src/main/java/net/minecraft/world/entity/projectile/Arrow.java b/src/main/java/net/minecraft/world/entity/projectile/Arrow.java
index 93db420e79cdcc96a107e2699b03a4fa135aa5e3..1a9bdd8c27611611d3593ad8700463e647ae82f2 100644
--- a/src/main/java/net/minecraft/world/entity/projectile/Arrow.java
+++ b/src/main/java/net/minecraft/world/entity/projectile/Arrow.java
@@ -162,7 +162,7 @@ public class Arrow extends AbstractArrow {
     // CraftBukkit end
 
     public int getColor() {
-        return (Integer) this.entityData.get(Arrow.ID_EFFECT_COLOR);
+        return ((Integer) this.entityData.get(Arrow.ID_EFFECT_COLOR)).intValue();
     }
 
     public void setFixedColor(int color) {
diff --git a/src/main/java/net/minecraft/world/entity/projectile/FireworkRocketEntity.java b/src/main/java/net/minecraft/world/entity/projectile/FireworkRocketEntity.java
index 1541a886b05caba5b4c39655f94bf76729d0611d..df673139ace5a1eb183556253b550f3d6efb86f8 100644
--- a/src/main/java/net/minecraft/world/entity/projectile/FireworkRocketEntity.java
+++ b/src/main/java/net/minecraft/world/entity/projectile/FireworkRocketEntity.java
@@ -285,7 +285,7 @@ public class FireworkRocketEntity extends Projectile implements ItemSupplier {
     }
 
     public boolean isShotAtAngle() {
-        return (Boolean) this.entityData.get(FireworkRocketEntity.DATA_SHOT_AT_ANGLE);
+        return ((Boolean) this.entityData.get(FireworkRocketEntity.DATA_SHOT_AT_ANGLE)).booleanValue();
     }
 
     @Override
@@ -318,7 +318,7 @@ public class FireworkRocketEntity extends Projectile implements ItemSupplier {
             nbt.put("FireworksItem", itemstack.save(new CompoundTag()));
         }
 
-        nbt.putBoolean("ShotAtAngle", (Boolean) this.entityData.get(FireworkRocketEntity.DATA_SHOT_AT_ANGLE));
+        nbt.putBoolean("ShotAtAngle", ((Boolean) this.entityData.get(FireworkRocketEntity.DATA_SHOT_AT_ANGLE)).booleanValue());
         // Paper start
         if (this.spawningEntity != null) {
             nbt.putUUID("SpawningEntity", this.spawningEntity);
diff --git a/src/main/java/net/minecraft/world/entity/projectile/FishingHook.java b/src/main/java/net/minecraft/world/entity/projectile/FishingHook.java
index f6e008101a49d873d3c7a70024e2ed81565d345c..f0740092988834bd444d66b95a5028f059f8de79 100644
--- a/src/main/java/net/minecraft/world/entity/projectile/FishingHook.java
+++ b/src/main/java/net/minecraft/world/entity/projectile/FishingHook.java
@@ -130,13 +130,13 @@ public class FishingHook extends Projectile {
     @Override
     public void onSyncedDataUpdated(EntityDataAccessor<?> data) {
         if (FishingHook.DATA_HOOKED_ENTITY.equals(data)) {
-            int i = (Integer) this.getEntityData().get(FishingHook.DATA_HOOKED_ENTITY);
+            int i = ((Integer) this.getEntityData().get(FishingHook.DATA_HOOKED_ENTITY)).intValue();
 
             this.hookedIn = i > 0 ? this.level.getEntity(i - 1) : null;
         }
 
         if (FishingHook.DATA_BITING.equals(data)) {
-            this.biting = (Boolean) this.getEntityData().get(FishingHook.DATA_BITING);
+            this.biting = ((Boolean) this.getEntityData().get(FishingHook.DATA_BITING)).booleanValue();
             if (this.biting) {
                 this.setDeltaMovement(this.getDeltaMovement().x, (double) (-0.4F * Mth.nextFloat(this.syncronizedRandom, 0.6F, 1.0F)), this.getDeltaMovement().z);
             }
diff --git a/src/main/java/net/minecraft/world/entity/projectile/ThrownTrident.java b/src/main/java/net/minecraft/world/entity/projectile/ThrownTrident.java
index cd54d767dec890767407600dee01bf752d71a2ba..464ec3b3683683f8ebecf3d888018732c75f50f8 100644
--- a/src/main/java/net/minecraft/world/entity/projectile/ThrownTrident.java
+++ b/src/main/java/net/minecraft/world/entity/projectile/ThrownTrident.java
@@ -58,7 +58,7 @@ public class ThrownTrident extends AbstractArrow {
         }
 
         Entity entity = this.getOwner();
-        byte b0 = (Byte) this.entityData.get(ThrownTrident.ID_LOYALTY);
+        byte b0 = ((Byte) this.entityData.get(ThrownTrident.ID_LOYALTY)).byteValue();
 
         if (b0 > 0 && (this.dealtDamage || this.isNoPhysics()) && entity != null) {
             if (!this.isAcceptibleReturnOwner()) {
@@ -102,7 +102,7 @@ public class ThrownTrident extends AbstractArrow {
     }
 
     public boolean isFoil() {
-        return (Boolean) this.entityData.get(ThrownTrident.ID_FOIL);
+        return ((Boolean) this.entityData.get(ThrownTrident.ID_FOIL)).booleanValue();
     }
 
     // Paper start
@@ -111,7 +111,7 @@ public class ThrownTrident extends AbstractArrow {
     }
 
     public int getLoyalty() {
-        return this.entityData.get(ThrownTrident.ID_LOYALTY);
+        return this.entityData.<Byte>get(ThrownTrident.ID_LOYALTY).intValue();
     }
 
     public void setLoyalty(byte loyalty) {
@@ -223,7 +223,7 @@ public class ThrownTrident extends AbstractArrow {
 
     @Override
     public void tickDespawn() {
-        byte b0 = (Byte) this.entityData.get(ThrownTrident.ID_LOYALTY);
+        byte b0 = ((Byte) this.entityData.get(ThrownTrident.ID_LOYALTY)).byteValue();
 
         if (this.pickup != AbstractArrow.Pickup.ALLOWED || b0 <= 0) {
             super.tickDespawn();
diff --git a/src/main/java/net/minecraft/world/entity/projectile/WitherSkull.java b/src/main/java/net/minecraft/world/entity/projectile/WitherSkull.java
index 9977f66051faa15cf917ed8551c3bc14fb73bb6a..e53dfc776a143350b9dce5062c4bf62294dd67a1 100644
--- a/src/main/java/net/minecraft/world/entity/projectile/WitherSkull.java
+++ b/src/main/java/net/minecraft/world/entity/projectile/WitherSkull.java
@@ -122,7 +122,7 @@ public class WitherSkull extends AbstractHurtingProjectile {
     }
 
     public boolean isDangerous() {
-        return (Boolean) this.entityData.get(WitherSkull.DATA_DANGEROUS);
+        return ((Boolean) this.entityData.get(WitherSkull.DATA_DANGEROUS)).booleanValue();
     }
 
     public void setDangerous(boolean charged) {
diff --git a/src/main/java/net/minecraft/world/entity/raid/Raider.java b/src/main/java/net/minecraft/world/entity/raid/Raider.java
index 9312e1c3207ecbf73a5ecd3026f0f0ec58643034..fa86b87f044930c85fdbae0c09fa4215b13fcad9 100644
--- a/src/main/java/net/minecraft/world/entity/raid/Raider.java
+++ b/src/main/java/net/minecraft/world/entity/raid/Raider.java
@@ -201,7 +201,7 @@ public abstract class Raider extends PatrollingMonster {
     }
 
     public boolean isCelebrating() {
-        return (Boolean) this.entityData.get(Raider.IS_CELEBRATING);
+        return ((Boolean) this.entityData.get(Raider.IS_CELEBRATING)).booleanValue();
     }
 
     public void setCelebrating(boolean celebrating) {
diff --git a/src/main/java/net/minecraft/world/entity/vehicle/AbstractMinecart.java b/src/main/java/net/minecraft/world/entity/vehicle/AbstractMinecart.java
index d996ef4835368742277ee65adfe1831795ae0f54..79fb3e3059bd494d7b56c5a85841312d1dec27a5 100644
--- a/src/main/java/net/minecraft/world/entity/vehicle/AbstractMinecart.java
+++ b/src/main/java/net/minecraft/world/entity/vehicle/AbstractMinecart.java
@@ -188,7 +188,7 @@ public abstract class AbstractMinecart extends Entity {
                 UnmodifiableIterator unmodifiableiterator1 = ((ImmutableList) AbstractMinecart.POSE_DISMOUNT_HEIGHTS.get(entitypose)).iterator();
 
                 while (unmodifiableiterator1.hasNext()) {
-                    int i = (Integer) unmodifiableiterator1.next();
+                    int i = ((Integer) unmodifiableiterator1.next()).intValue();
                     int[][] aint1 = aint;
                     int j = aint.length;
 
@@ -390,7 +390,7 @@ public abstract class AbstractMinecart extends Entity {
             if (BaseRailBlock.isRail(iblockdata)) {
                 this.moveAlongTrack(blockposition, iblockdata);
                 if (iblockdata.is(Blocks.ACTIVATOR_RAIL)) {
-                    this.activateMinecart(i, j, k, (Boolean) iblockdata.getValue(PoweredRailBlock.POWERED));
+                    this.activateMinecart(i, j, k, ((Boolean) iblockdata.getValue(PoweredRailBlock.POWERED)).booleanValue());
                 }
             } else {
                 this.comeOffTrack();
@@ -528,7 +528,7 @@ public abstract class AbstractMinecart extends Entity {
         boolean flag1 = false;
 
         if (state.is(Blocks.POWERED_RAIL)) {
-            flag = (Boolean) state.getValue(PoweredRailBlock.POWERED);
+            flag = ((Boolean) state.getValue(PoweredRailBlock.POWERED)).booleanValue();
             flag1 = !flag;
         }
 
@@ -936,7 +936,7 @@ public abstract class AbstractMinecart extends Entity {
     }
 
     public float getDamage() {
-        return (Float) this.entityData.get(AbstractMinecart.DATA_ID_DAMAGE);
+        return ((Float) this.entityData.get(AbstractMinecart.DATA_ID_DAMAGE)).floatValue();
     }
 
     public void setHurtTime(int wobbleTicks) {
@@ -944,7 +944,7 @@ public abstract class AbstractMinecart extends Entity {
     }
 
     public int getHurtTime() {
-        return (Integer) this.entityData.get(AbstractMinecart.DATA_ID_HURT);
+        return ((Integer) this.entityData.get(AbstractMinecart.DATA_ID_HURT)).intValue();
     }
 
     public void setHurtDir(int wobbleSide) {
@@ -952,13 +952,13 @@ public abstract class AbstractMinecart extends Entity {
     }
 
     public int getHurtDir() {
-        return (Integer) this.entityData.get(AbstractMinecart.DATA_ID_HURTDIR);
+        return ((Integer) this.entityData.get(AbstractMinecart.DATA_ID_HURTDIR)).intValue();
     }
 
     public abstract AbstractMinecart.Type getMinecartType();
 
     public BlockState getDisplayBlockState() {
-        return !this.hasCustomDisplay() ? this.getDefaultDisplayBlockState() : Block.stateById((Integer) this.getEntityData().get(AbstractMinecart.DATA_ID_DISPLAY_BLOCK));
+        return !this.hasCustomDisplay() ? this.getDefaultDisplayBlockState() : Block.stateById(((Integer) this.getEntityData().get(AbstractMinecart.DATA_ID_DISPLAY_BLOCK)).intValue());
     }
 
     public BlockState getDefaultDisplayBlockState() {
@@ -966,7 +966,7 @@ public abstract class AbstractMinecart extends Entity {
     }
 
     public int getDisplayOffset() {
-        return !this.hasCustomDisplay() ? this.getDefaultDisplayOffset() : (Integer) this.getEntityData().get(AbstractMinecart.DATA_ID_DISPLAY_OFFSET);
+        return !this.hasCustomDisplay() ? this.getDefaultDisplayOffset() : ((Integer) this.getEntityData().get(AbstractMinecart.DATA_ID_DISPLAY_OFFSET)).intValue();
     }
 
     public int getDefaultDisplayOffset() {
@@ -984,7 +984,7 @@ public abstract class AbstractMinecart extends Entity {
     }
 
     public boolean hasCustomDisplay() {
-        return (Boolean) this.getEntityData().get(AbstractMinecart.DATA_ID_CUSTOM_DISPLAY);
+        return ((Boolean) this.getEntityData().get(AbstractMinecart.DATA_ID_CUSTOM_DISPLAY)).booleanValue();
     }
 
     public void setCustomDisplay(boolean present) {
diff --git a/src/main/java/net/minecraft/world/entity/vehicle/Boat.java b/src/main/java/net/minecraft/world/entity/vehicle/Boat.java
index e8147ce30a0b11d63c2c9e55f39f517edb5ea103..ee5ee9be5aec6ce69a0a8faa2e91269b7ae93616 100644
--- a/src/main/java/net/minecraft/world/entity/vehicle/Boat.java
+++ b/src/main/java/net/minecraft/world/entity/vehicle/Boat.java
@@ -929,7 +929,7 @@ public class Boat extends Entity implements VariantHolder<Boat.Type> {
     }
 
     public boolean getPaddleState(int paddle) {
-        return (Boolean) this.entityData.get(paddle == 0 ? Boat.DATA_ID_PADDLE_LEFT : Boat.DATA_ID_PADDLE_RIGHT) && this.getControllingPassenger() != null;
+        return ((Boolean) this.entityData.get(paddle == 0 ? Boat.DATA_ID_PADDLE_LEFT : Boat.DATA_ID_PADDLE_RIGHT)).booleanValue() && this.getControllingPassenger() != null;
     }
 
     public void setDamage(float wobbleStrength) {
@@ -937,7 +937,7 @@ public class Boat extends Entity implements VariantHolder<Boat.Type> {
     }
 
     public float getDamage() {
-        return (Float) this.entityData.get(Boat.DATA_ID_DAMAGE);
+        return ((Float) this.entityData.get(Boat.DATA_ID_DAMAGE)).floatValue();
     }
 
     public void setHurtTime(int wobbleTicks) {
@@ -945,7 +945,7 @@ public class Boat extends Entity implements VariantHolder<Boat.Type> {
     }
 
     public int getHurtTime() {
-        return (Integer) this.entityData.get(Boat.DATA_ID_HURT);
+        return ((Integer) this.entityData.get(Boat.DATA_ID_HURT)).intValue();
     }
 
     private void setBubbleTime(int wobbleTicks) {
@@ -953,7 +953,7 @@ public class Boat extends Entity implements VariantHolder<Boat.Type> {
     }
 
     private int getBubbleTime() {
-        return (Integer) this.entityData.get(Boat.DATA_ID_BUBBLE_TIME);
+        return ((Integer) this.entityData.get(Boat.DATA_ID_BUBBLE_TIME)).intValue();
     }
 
     public float getBubbleAngle(float tickDelta) {
@@ -965,7 +965,7 @@ public class Boat extends Entity implements VariantHolder<Boat.Type> {
     }
 
     public int getHurtDir() {
-        return (Integer) this.entityData.get(Boat.DATA_ID_HURTDIR);
+        return ((Integer) this.entityData.get(Boat.DATA_ID_HURTDIR)).intValue();
     }
 
     public void setVariant(Boat.Type variant) {
@@ -974,7 +974,7 @@ public class Boat extends Entity implements VariantHolder<Boat.Type> {
 
     @Override
     public Boat.Type getVariant() {
-        return Boat.Type.byId((Integer) this.entityData.get(Boat.DATA_ID_TYPE));
+        return Boat.Type.byId(((Integer) this.entityData.get(Boat.DATA_ID_TYPE)).intValue());
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/inventory/AbstractContainerMenu.java b/src/main/java/net/minecraft/world/inventory/AbstractContainerMenu.java
index f77eb57a3aa5499aadedd7804bf265d0209e6214..21cb1b109f795334e4a9879ab7ad609acdfa3d33 100644
--- a/src/main/java/net/minecraft/world/inventory/AbstractContainerMenu.java
+++ b/src/main/java/net/minecraft/world/inventory/AbstractContainerMenu.java
@@ -116,9 +116,9 @@ public abstract class AbstractContainerMenu {
     }
 
     protected static boolean stillValid(ContainerLevelAccess context, Player player, Block block) {
-        return (Boolean) context.evaluate((world, blockposition) -> {
+        return ((Boolean) context.evaluate((world, blockposition) -> {
             return Boolean.valueOf(!world.getBlockState(blockposition).is(block) ? false : player.distanceToSqr((double) blockposition.getX() + 0.5D, (double) blockposition.getY() + 0.5D, (double) blockposition.getZ() + 0.5D) <= 64.0D);
-        }, Boolean.TRUE);
+        }, Boolean.TRUE)).booleanValue();
     }
 
     public MenuType<?> getType() {
@@ -484,7 +484,7 @@ public abstract class AbstractContainerMenu {
 
                     if (event.getResult() != Result.DENY) {
                         for (Map.Entry<Integer, ItemStack> dslot : draggedSlots.entrySet()) {
-                            view.setItem(dslot.getKey(), CraftItemStack.asBukkitCopy(dslot.getValue()));
+                            view.setItem(dslot.getKey().intValue(), CraftItemStack.asBukkitCopy(dslot.getValue()));
                         }
                         // The only time the carried item will be set to null is if the inventory is closed by the server.
                         // If the inventory is closed by the server, then the cursor items are dropped.  This is why we change the cursor early.
@@ -995,8 +995,8 @@ public abstract class AbstractContainerMenu {
             Integer integer = (Integer) table.get(slot.container, Integer.valueOf(slot.getContainerSlot()));
 
             if (integer != null) {
-                this.lastSlots.set(i, (ItemStack) handler.lastSlots.get(integer));
-                this.remoteSlots.set(i, (ItemStack) handler.remoteSlots.get(integer));
+                this.lastSlots.set(i, (ItemStack) handler.lastSlots.get(integer.intValue()));
+                this.remoteSlots.set(i, (ItemStack) handler.remoteSlots.get(integer.intValue()));
             }
         }
 
diff --git a/src/main/java/net/minecraft/world/inventory/AnvilMenu.java b/src/main/java/net/minecraft/world/inventory/AnvilMenu.java
index 8724f474c772670fc6686099150a94b3ad35848a..60bd0a0d73546f9c6e6809f292526362b5fdd4b2 100644
--- a/src/main/java/net/minecraft/world/inventory/AnvilMenu.java
+++ b/src/main/java/net/minecraft/world/inventory/AnvilMenu.java
@@ -187,8 +187,8 @@ public class AnvilMenu extends ItemCombinerMenu {
                         Enchantment enchantment = (Enchantment) iterator.next();
 
                         if (enchantment != null) {
-                            int l1 = (Integer) map.getOrDefault(enchantment, Integer.valueOf(0));
-                            int i2 = (Integer) map1.get(enchantment);
+                            int l1 = ((Integer) map.getOrDefault(enchantment, Integer.valueOf(0))).intValue();
+                            int i2 = ((Integer) map1.get(enchantment)).intValue();
 
                             i2 = l1 == i2 ? i2 + 1 : Math.max(i2, l1);
                             boolean flag3 = enchantment.canEnchant(itemstack);
diff --git a/src/main/java/net/minecraft/world/inventory/EnchantmentMenu.java b/src/main/java/net/minecraft/world/inventory/EnchantmentMenu.java
index 4325c5f698d138dc980315dc9dd0d302d8ab5447..8693c00fa33343e723f1cc5fa955f6e5f5eaa075 100644
--- a/src/main/java/net/minecraft/world/inventory/EnchantmentMenu.java
+++ b/src/main/java/net/minecraft/world/inventory/EnchantmentMenu.java
@@ -268,10 +268,10 @@ public class EnchantmentMenu extends AbstractContainerMenu {
                                         continue;
                                     }
 
-                                    EnchantmentInstance weightedrandomenchant = new EnchantmentInstance(nms, entry.getValue());
+                                    EnchantmentInstance weightedrandomenchant = new EnchantmentInstance(nms, entry.getValue().intValue());
                                     EnchantedBookItem.addEnchantment(itemstack2, weightedrandomenchant);
                                 } else {
-                                    item.addUnsafeEnchantment(entry.getKey(), entry.getValue());
+                                    item.addUnsafeEnchantment(entry.getKey(), entry.getValue().intValue());
                                 }
                             } catch (IllegalArgumentException e) {
                                 /* Just swallow invalid enchantments */
diff --git a/src/main/java/net/minecraft/world/inventory/GrindstoneMenu.java b/src/main/java/net/minecraft/world/inventory/GrindstoneMenu.java
index 233e8626280a8b93dcb8621a1405e8c308c6836b..abf0debfe9fc42cefc9239b151aba3b1b20c0c64 100644
--- a/src/main/java/net/minecraft/world/inventory/GrindstoneMenu.java
+++ b/src/main/java/net/minecraft/world/inventory/GrindstoneMenu.java
@@ -131,7 +131,7 @@ public class GrindstoneMenu extends AbstractContainerMenu {
                     Integer integer = (Integer) entry.getValue();
 
                     if (!enchantment.isCurse()) {
-                        j += enchantment.getMinCost(integer);
+                        j += enchantment.getMinCost(integer.intValue());
                     }
                 }
 
@@ -231,7 +231,7 @@ public class GrindstoneMenu extends AbstractContainerMenu {
             Enchantment enchantment = (Enchantment) entry.getKey();
 
             if (!enchantment.isCurse() || EnchantmentHelper.getItemEnchantmentLevel(enchantment, itemstack2) == 0) {
-                itemstack2.enchant(enchantment, (Integer) entry.getValue());
+                itemstack2.enchant(enchantment, ((Integer) entry.getValue()).intValue());
             }
         }
 
diff --git a/src/main/java/net/minecraft/world/inventory/ItemCombinerMenu.java b/src/main/java/net/minecraft/world/inventory/ItemCombinerMenu.java
index 10bc09ae4c4c9636c34c8eeaba131aa1305629b4..d58208f13c5a993cd8072661763a4ef1de5b21f4 100644
--- a/src/main/java/net/minecraft/world/inventory/ItemCombinerMenu.java
+++ b/src/main/java/net/minecraft/world/inventory/ItemCombinerMenu.java
@@ -94,9 +94,9 @@ public abstract class ItemCombinerMenu extends AbstractContainerMenu {
     @Override
     public boolean stillValid(Player player) {
         if (!this.checkReachable) return true; // CraftBukkit
-        return (Boolean) this.access.evaluate((world, blockposition) -> {
+        return ((Boolean) this.access.evaluate((world, blockposition) -> {
             return Boolean.valueOf(!this.isValidBlock(world.getBlockState(blockposition)) ? false : player.distanceToSqr((double) blockposition.getX() + 0.5D, (double) blockposition.getY() + 0.5D, (double) blockposition.getZ() + 0.5D) <= 64.0D);
-        }, Boolean.TRUE);
+        }, Boolean.TRUE)).booleanValue();
     }
 
     protected boolean shouldQuickMoveToAdditionalSlot(ItemStack stack) {
diff --git a/src/main/java/net/minecraft/world/item/ChorusFruitItem.java b/src/main/java/net/minecraft/world/item/ChorusFruitItem.java
index d38161d6266c2460666434d5f0930ecf16096977..490d116e58c19cc0b3701cffd0179f9e9fc7fe6b 100644
--- a/src/main/java/net/minecraft/world/item/ChorusFruitItem.java
+++ b/src/main/java/net/minecraft/world/item/ChorusFruitItem.java
@@ -47,7 +47,7 @@ public class ChorusFruitItem extends Item {
                     break;
                 }
 
-                if (status.get()) {
+                if (status.get().booleanValue()) {
                     // CraftBukkit end
                     world.gameEvent(GameEvent.TELEPORT, vec3d, GameEvent.Context.of((Entity) user));
                     SoundEvent soundeffect = user instanceof Fox ? SoundEvents.FOX_TELEPORT : SoundEvents.CHORUS_FRUIT_TELEPORT;
diff --git a/src/main/java/net/minecraft/world/item/EnderEyeItem.java b/src/main/java/net/minecraft/world/item/EnderEyeItem.java
index 7d9456a4eb7fd62078d17a98b6ed4217608d34a4..3fa40a013e3336675d135effa30e88e8c4d3bd10 100644
--- a/src/main/java/net/minecraft/world/item/EnderEyeItem.java
+++ b/src/main/java/net/minecraft/world/item/EnderEyeItem.java
@@ -38,7 +38,7 @@ public class EnderEyeItem extends Item {
         BlockPos blockposition = context.getClickedPos();
         BlockState iblockdata = world.getBlockState(blockposition);
 
-        if (iblockdata.is(Blocks.END_PORTAL_FRAME) && !(Boolean) iblockdata.getValue(EndPortalFrameBlock.HAS_EYE)) {
+        if (iblockdata.is(Blocks.END_PORTAL_FRAME) && !((Boolean) iblockdata.getValue(EndPortalFrameBlock.HAS_EYE)).booleanValue()) {
             if (world.isClientSide) {
                 return InteractionResult.SUCCESS;
             } else {
diff --git a/src/main/java/net/minecraft/world/item/MapItem.java b/src/main/java/net/minecraft/world/item/MapItem.java
index 4c62273570f2b465f0838170bee8308e1c725194..c705d965d3e25dcb9112b8d2d36988e9728896f0 100644
--- a/src/main/java/net/minecraft/world/item/MapItem.java
+++ b/src/main/java/net/minecraft/world/item/MapItem.java
@@ -59,7 +59,7 @@ public class MapItem extends ComplexItem {
 
     @Nullable
     public static MapItemSavedData getSavedData(@Nullable Integer id, Level world) {
-        return id == null ? null : world.getMapData(MapItem.makeKey(id));
+        return id == null ? null : world.getMapData(MapItem.makeKey(id.intValue()));
     }
 
     @Nullable
@@ -346,7 +346,7 @@ public class MapItem extends ComplexItem {
         Integer integer = MapItem.getMapId(stack);
         MapItemSavedData worldmap = MapItem.getSavedData(integer, world);
 
-        return worldmap != null ? worldmap.getUpdatePacket(integer, player) : null;
+        return worldmap != null ? worldmap.getUpdatePacket(integer.intValue(), player) : null;
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/item/RecordItem.java b/src/main/java/net/minecraft/world/item/RecordItem.java
index 4c6f60cc1269ed0315b7e5a54235b9c95d1f039c..80f889db8a23763c5566940ea284b42030b1d34e 100644
--- a/src/main/java/net/minecraft/world/item/RecordItem.java
+++ b/src/main/java/net/minecraft/world/item/RecordItem.java
@@ -39,7 +39,7 @@ public class RecordItem extends Item {
         BlockPos blockposition = context.getClickedPos();
         BlockState iblockdata = world.getBlockState(blockposition);
 
-        if (iblockdata.is(Blocks.JUKEBOX) && !(Boolean) iblockdata.getValue(JukeboxBlock.HAS_RECORD)) {
+        if (iblockdata.is(Blocks.JUKEBOX) && !((Boolean) iblockdata.getValue(JukeboxBlock.HAS_RECORD)).booleanValue()) {
             ItemStack itemstack = context.getItemInHand();
 
             if (!world.isClientSide) {
diff --git a/src/main/java/net/minecraft/world/item/ShovelItem.java b/src/main/java/net/minecraft/world/item/ShovelItem.java
index c7195f2e12bbd6545f7bffcc2b4ba5cc3d48df20..011b6bb20cf39fe1b3a5af5ba7faedc438728264 100644
--- a/src/main/java/net/minecraft/world/item/ShovelItem.java
+++ b/src/main/java/net/minecraft/world/item/ShovelItem.java
@@ -40,7 +40,7 @@ public class ShovelItem extends DiggerItem {
             if (blockState2 != null && level.getBlockState(blockPos.above()).isAir()) {
                 afterAction = () -> level.playSound(player, blockPos, SoundEvents.SHOVEL_FLATTEN, SoundSource.BLOCKS, 1.0F, 1.0F); // Paper
                 blockState3 = blockState2;
-            } else if (blockState.getBlock() instanceof CampfireBlock && blockState.getValue(CampfireBlock.LIT)) {
+            } else if (blockState.getBlock() instanceof CampfireBlock && blockState.<Boolean>getValue(CampfireBlock.LIT).booleanValue()) {
                 afterAction = () -> { // Paper
                 if (!level.isClientSide()) {
                     level.levelEvent((Player)null, 1009, blockPos, 0);
diff --git a/src/main/java/net/minecraft/world/item/enchantment/FrostWalkerEnchantment.java b/src/main/java/net/minecraft/world/item/enchantment/FrostWalkerEnchantment.java
index e29365470fed710345763d3f98a2feeac78f5f47..4e19570cb829f36d39c3eb11c03711e88968dbab 100644
--- a/src/main/java/net/minecraft/world/item/enchantment/FrostWalkerEnchantment.java
+++ b/src/main/java/net/minecraft/world/item/enchantment/FrostWalkerEnchantment.java
@@ -55,7 +55,7 @@ public class FrostWalkerEnchantment extends Enchantment {
                     if (iblockdata1.isAir()) {
                         BlockState iblockdata2 = world.getBlockState(blockposition1);
 
-                        if (iblockdata2.getMaterial() == Material.WATER && (Integer) iblockdata2.getValue(LiquidBlock.LEVEL) == 0 && iblockdata.canSurvive(world, blockposition1) && world.isUnobstructed(iblockdata, blockposition1, CollisionContext.empty())) {
+                        if (iblockdata2.getMaterial() == Material.WATER && ((Integer) iblockdata2.getValue(LiquidBlock.LEVEL)).intValue() == 0 && iblockdata.canSurvive(world, blockposition1) && world.isUnobstructed(iblockdata, blockposition1, CollisionContext.empty())) {
                             // CraftBukkit Start - Call EntityBlockFormEvent for Frost Walker
                             if (org.bukkit.craftbukkit.event.CraftEventFactory.handleBlockFormEvent(world, blockposition1, iblockdata, entity)) {
                                 world.scheduleTick(blockposition1, Blocks.FROSTED_ICE, Mth.nextInt(entity.getRandom(), 60, 120));
diff --git a/src/main/java/net/minecraft/world/level/Explosion.java b/src/main/java/net/minecraft/world/level/Explosion.java
index 590be5233f0046d065d7ed48d52192e1e0f50311..ab12b20be2c79b6696a9f7962fd3567c2bbdc047 100644
--- a/src/main/java/net/minecraft/world/level/Explosion.java
+++ b/src/main/java/net/minecraft/world/level/Explosion.java
@@ -178,7 +178,7 @@ public class Explosion {
                             Optional<Float> optional = this.damageCalculator.getBlockExplosionResistance(this, this.level, blockposition, iblockdata, fluid);
 
                             if (optional.isPresent()) {
-                                f -= ((Float) optional.get() + 0.3F) * 0.3F;
+                                f -= (((Float) optional.get()).floatValue() + 0.3F) * 0.3F;
                             }
 
                             if (f > 0.0F && this.damageCalculator.shouldBlockExplode(this, this.level, blockposition, iblockdata, f)) {
@@ -513,7 +513,7 @@ public class Explosion {
             this.level.explosionDensityCache.put(key, blockDensity);
         }
 
-        return blockDensity;
+        return blockDensity.floatValue();
     }
 
     static class CacheKey {
diff --git a/src/main/java/net/minecraft/world/level/NaturalSpawner.java b/src/main/java/net/minecraft/world/level/NaturalSpawner.java
index f522f02d8b46b2499cdb2e66848319653926c0d5..ff7e2bccc901641e891249219074a9d9fb81a205 100644
--- a/src/main/java/net/minecraft/world/level/NaturalSpawner.java
+++ b/src/main/java/net/minecraft/world/level/NaturalSpawner.java
@@ -283,7 +283,7 @@ public final class NaturalSpawner {
                                     if (doSpawning == null) {
                                         return j; // Paper
                                     }
-                                    if (doSpawning && checker.test(biomesettingsmobs_c.type, blockposition_mutableblockposition, chunk)) {
+                                    if (doSpawning.booleanValue() && checker.test(biomesettingsmobs_c.type, blockposition_mutableblockposition, chunk)) {
                                         // Paper end
                                         Mob entityinsentient = NaturalSpawner.getMobForSpawn(world, biomesettingsmobs_c.type);
 
diff --git a/src/main/java/net/minecraft/world/level/StructureManager.java b/src/main/java/net/minecraft/world/level/StructureManager.java
index bad7031426ae6c750ae4376beb238186e7d65270..8b167220488cfd56320c43f213e4a03fed72a485 100644
--- a/src/main/java/net/minecraft/world/level/StructureManager.java
+++ b/src/main/java/net/minecraft/world/level/StructureManager.java
@@ -123,7 +123,7 @@ public class StructureManager {
         for(StructureStart structureStart : this.startsForStructure(new ChunkPos(pos), (structure) -> {
             return registry.getHolder(registry.getId(structure)).map((reference) -> {
                 return reference.is(structureTag);
-            }).orElse(false);
+            }).orElse(false).booleanValue();
         }, levelAccessor)) { // Paper
             if (this.structureHasPieceAt(pos, structureStart)) {
                 return structureStart;
diff --git a/src/main/java/net/minecraft/world/level/block/AbstractCandleBlock.java b/src/main/java/net/minecraft/world/level/block/AbstractCandleBlock.java
index b6abdff8659cf7c97e9eef031f7ed9a58c7e6a7a..f93ae6c0224b75bdd34d028d874dd178683df6cf 100644
--- a/src/main/java/net/minecraft/world/level/block/AbstractCandleBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/AbstractCandleBlock.java
@@ -32,7 +32,7 @@ public abstract class AbstractCandleBlock extends Block {
     protected abstract Iterable<Vec3> getParticleOffsets(BlockState state);
 
     public static boolean isLit(BlockState state) {
-        return state.hasProperty(AbstractCandleBlock.LIT) && (state.is(BlockTags.CANDLES) || state.is(BlockTags.CANDLE_CAKES)) && (Boolean) state.getValue(AbstractCandleBlock.LIT);
+        return state.hasProperty(AbstractCandleBlock.LIT) && (state.is(BlockTags.CANDLES) || state.is(BlockTags.CANDLE_CAKES)) && ((Boolean) state.getValue(AbstractCandleBlock.LIT)).booleanValue();
     }
 
     @Override
@@ -49,12 +49,12 @@ public abstract class AbstractCandleBlock extends Block {
     }
 
     protected boolean canBeLit(BlockState state) {
-        return !(Boolean) state.getValue(AbstractCandleBlock.LIT);
+        return !((Boolean) state.getValue(AbstractCandleBlock.LIT)).booleanValue();
     }
 
     @Override
     public void animateTick(BlockState state, Level world, BlockPos pos, RandomSource random) {
-        if ((Boolean) state.getValue(AbstractCandleBlock.LIT)) {
+        if (((Boolean) state.getValue(AbstractCandleBlock.LIT)).booleanValue()) {
             this.getParticleOffsets(state).forEach((vec3d) -> {
                 AbstractCandleBlock.addParticlesAndSound(world, vec3d.add((double) pos.getX(), (double) pos.getY(), (double) pos.getZ()), random);
             });
diff --git a/src/main/java/net/minecraft/world/level/block/BambooStalkBlock.java b/src/main/java/net/minecraft/world/level/block/BambooStalkBlock.java
index e0fac8528893cd71c48dfa74bd65e8fac4af48c7..10322ad3d7f603a7ab162c63dc4b2f749f73bdb1 100644
--- a/src/main/java/net/minecraft/world/level/block/BambooStalkBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/BambooStalkBlock.java
@@ -97,7 +97,7 @@ public class BambooStalkBlock extends Block implements BonemealableBlock {
                 if (iblockdata.is(Blocks.BAMBOO_SAPLING)) {
                     return (BlockState) this.defaultBlockState().setValue(BambooStalkBlock.AGE, Integer.valueOf(0));
                 } else if (iblockdata.is(Blocks.BAMBOO)) {
-                    int i = (Integer) iblockdata.getValue(BambooStalkBlock.AGE) > 0 ? 1 : 0;
+                    int i = ((Integer) iblockdata.getValue(BambooStalkBlock.AGE)).intValue() > 0 ? 1 : 0;
 
                     return (BlockState) this.defaultBlockState().setValue(BambooStalkBlock.AGE, Integer.valueOf(i));
                 } else {
@@ -121,12 +121,12 @@ public class BambooStalkBlock extends Block implements BonemealableBlock {
 
     @Override
     public boolean isRandomlyTicking(BlockState state) {
-        return (Integer) state.getValue(BambooStalkBlock.STAGE) == 0;
+        return ((Integer) state.getValue(BambooStalkBlock.STAGE)).intValue() == 0;
     }
 
     @Override
     public void randomTick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
-        if ((Integer) state.getValue(BambooStalkBlock.STAGE) == 0) {
+        if (((Integer) state.getValue(BambooStalkBlock.STAGE)).intValue() == 0) {
             if (random.nextFloat() < (world.spigotConfig.bambooModifier / (100.0f * 3)) && world.isEmptyBlock(pos.above()) && world.getRawBrightness(pos.above(), 0) >= 9) { // Spigot - SPIGOT-7159: Better modifier resolution
                 int i = this.getHeightBelowUpToMax(world, pos) + 1;
 
@@ -149,7 +149,7 @@ public class BambooStalkBlock extends Block implements BonemealableBlock {
             world.scheduleTick(pos, (Block) this, 1);
         }
 
-        if (direction == Direction.UP && neighborState.is(Blocks.BAMBOO) && (Integer) neighborState.getValue(BambooStalkBlock.AGE) > (Integer) state.getValue(BambooStalkBlock.AGE)) {
+        if (direction == Direction.UP && neighborState.is(Blocks.BAMBOO) && ((Integer) neighborState.getValue(BambooStalkBlock.AGE)).intValue() > ((Integer) state.getValue(BambooStalkBlock.AGE)).intValue()) {
             world.setBlock(pos, (BlockState) state.cycle(BambooStalkBlock.AGE), 2);
         }
 
@@ -161,7 +161,7 @@ public class BambooStalkBlock extends Block implements BonemealableBlock {
         int i = this.getHeightAboveUpToMax(world, pos);
         int j = this.getHeightBelowUpToMax(world, pos);
 
-        return i + j + 1 < ((Level) world).paperConfig().maxGrowthHeight.bamboo.max && (Integer) world.getBlockState(pos.above(i)).getValue(BambooStalkBlock.STAGE) != 1; // Paper
+        return i + j + 1 < ((Level) world).paperConfig().maxGrowthHeight.bamboo.max && ((Integer) world.getBlockState(pos.above(i)).getValue(BambooStalkBlock.STAGE)).intValue() != 1; // Paper
     }
 
     @Override
@@ -180,7 +180,7 @@ public class BambooStalkBlock extends Block implements BonemealableBlock {
             BlockPos blockposition1 = pos.above(i);
             BlockState iblockdata1 = world.getBlockState(blockposition1);
 
-            if (k >= world.paperConfig().maxGrowthHeight.bamboo.max || !iblockdata1.is(Blocks.BAMBOO) || (Integer) iblockdata1.getValue(BambooStalkBlock.STAGE) == 1 || !world.isEmptyBlock(blockposition1.above())) { // CraftBukkit - If the BlockSpreadEvent was cancelled, we have no bamboo here // Paper - Configurable cactus bamboo and reed growth heights
+            if (k >= world.paperConfig().maxGrowthHeight.bamboo.max || !iblockdata1.is(Blocks.BAMBOO) || ((Integer) iblockdata1.getValue(BambooStalkBlock.STAGE)).intValue() == 1 || !world.isEmptyBlock(blockposition1.above())) { // CraftBukkit - If the BlockSpreadEvent was cancelled, we have no bamboo here // Paper - Configurable cactus bamboo and reed growth heights
                 return;
             }
 
@@ -220,7 +220,7 @@ public class BambooStalkBlock extends Block implements BonemealableBlock {
             }
         }
 
-        int j = (Integer) state.getValue(BambooStalkBlock.AGE) != 1 && !iblockdata2.is(Blocks.BAMBOO) ? 0 : 1;
+        int j = ((Integer) state.getValue(BambooStalkBlock.AGE)).intValue() != 1 && !iblockdata2.is(Blocks.BAMBOO) ? 0 : 1;
         int k = (height < world.paperConfig().maxGrowthHeight.bamboo.min || random.nextFloat() >= 0.25F) && height != (world.paperConfig().maxGrowthHeight.bamboo.max - 1) ? 0 : 1; // Paper
 
         // CraftBukkit start
diff --git a/src/main/java/net/minecraft/world/level/block/BaseRailBlock.java b/src/main/java/net/minecraft/world/level/block/BaseRailBlock.java
index a3f877bf03f75cbfbd128c856322bcd427b95d21..fe5ed9755add5ca1f6a6a5afe0ee195b154e6aeb 100644
--- a/src/main/java/net/minecraft/world/level/block/BaseRailBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/BaseRailBlock.java
@@ -151,7 +151,7 @@ public abstract class BaseRailBlock extends Block implements SimpleWaterloggedBl
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
-        if (state.getValue(WATERLOGGED)) {
+        if (state.<Boolean>getValue(WATERLOGGED).booleanValue()) {
             world.scheduleTick(pos, Fluids.WATER, Fluids.WATER.getTickDelay(world));
         }
 
@@ -160,6 +160,6 @@ public abstract class BaseRailBlock extends Block implements SimpleWaterloggedBl
 
     @Override
     public FluidState getFluidState(BlockState state) {
-        return state.getValue(WATERLOGGED) ? Fluids.WATER.getSource(false) : super.getFluidState(state);
+        return state.<Boolean>getValue(WATERLOGGED).booleanValue() ? Fluids.WATER.getSource(false) : super.getFluidState(state);
     }
 }
diff --git a/src/main/java/net/minecraft/world/level/block/BedBlock.java b/src/main/java/net/minecraft/world/level/block/BedBlock.java
index cd078554d412244c4875784fbf9233f7f26413e6..3560e9ced547ca02d6a61ae686131974b85d581c 100644
--- a/src/main/java/net/minecraft/world/level/block/BedBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/BedBlock.java
@@ -100,7 +100,7 @@ public class BedBlock extends HorizontalDirectionalBlock implements EntityBlock
 
                 world.explode((Entity) null, DamageSource.badRespawnPointExplosion(vec3d, explodedBlockState), (ExplosionDamageCalculator) null, vec3d, 5.0F, true, Level.ExplosionInteraction.BLOCK); // Paper - exploded block state
                 return InteractionResult.SUCCESS;
-            } else if ((Boolean) state.getValue(BedBlock.OCCUPIED)) {
+            } else if (((Boolean) state.getValue(BedBlock.OCCUPIED)).booleanValue()) {
                 if (!this.kickVillagerOutOfBed(world, pos)) {
                     player.displayClientMessage(Component.translatable("block.minecraft.bed.occupied"), true);
                 }
diff --git a/src/main/java/net/minecraft/world/level/block/BeehiveBlock.java b/src/main/java/net/minecraft/world/level/block/BeehiveBlock.java
index 1ffc782e2a2036b7ac462aecfb2b289ca5659a60..1535796ebe5b40604ad122bc024b32676d5eec96 100644
--- a/src/main/java/net/minecraft/world/level/block/BeehiveBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/BeehiveBlock.java
@@ -73,7 +73,7 @@ public class BeehiveBlock extends BaseEntityBlock {
 
     @Override
     public int getAnalogOutputSignal(BlockState state, Level world, BlockPos pos) {
-        return (Integer) state.getValue(BeehiveBlock.HONEY_LEVEL);
+        return ((Integer) state.getValue(BeehiveBlock.HONEY_LEVEL)).intValue();
     }
 
     @Override
@@ -119,7 +119,7 @@ public class BeehiveBlock extends BaseEntityBlock {
     @Override
     public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
         ItemStack itemstack = player.getItemInHand(hand);
-        int i = (Integer) state.getValue(BeehiveBlock.HONEY_LEVEL);
+        int i = ((Integer) state.getValue(BeehiveBlock.HONEY_LEVEL)).intValue();
         boolean flag = false;
 
         if (i >= 5) {
@@ -209,7 +209,7 @@ public class BeehiveBlock extends BaseEntityBlock {
 
     @Override
     public void animateTick(BlockState state, Level world, BlockPos pos, RandomSource random) {
-        if ((Integer) state.getValue(BeehiveBlock.HONEY_LEVEL) >= 5) {
+        if (((Integer) state.getValue(BeehiveBlock.HONEY_LEVEL)).intValue() >= 5) {
             for (int i = 0; i < random.nextInt(1) + 1; ++i) {
                 this.trySpawnDripParticles(world, pos, state);
             }
@@ -285,7 +285,7 @@ public class BeehiveBlock extends BaseEntityBlock {
             if (tileentity instanceof BeehiveBlockEntity) {
                 BeehiveBlockEntity tileentitybeehive = (BeehiveBlockEntity) tileentity;
                 ItemStack itemstack = new ItemStack(this);
-                int i = (Integer) state.getValue(BeehiveBlock.HONEY_LEVEL);
+                int i = ((Integer) state.getValue(BeehiveBlock.HONEY_LEVEL)).intValue();
                 boolean flag = !tileentitybeehive.isEmpty();
 
                 if (flag || i > 0) {
diff --git a/src/main/java/net/minecraft/world/level/block/BellBlock.java b/src/main/java/net/minecraft/world/level/block/BellBlock.java
index 8878d8882d7aee4d44ad8339daff180812912649..15732e298c8d46eb3f89097babdfc39828a1b620 100644
--- a/src/main/java/net/minecraft/world/level/block/BellBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/BellBlock.java
@@ -63,7 +63,7 @@ public class BellBlock extends BaseEntityBlock {
     @Override
     public void neighborChanged(BlockState state, Level world, BlockPos pos, Block sourceBlock, BlockPos sourcePos, boolean notify) {
         boolean bl = world.hasNeighborSignal(pos);
-        if (bl != state.getValue(POWERED)) {
+        if (bl != state.<Boolean>getValue(POWERED).booleanValue()) {
             if (bl) {
                 this.attemptToRing(world, pos, (Direction)null);
             }
diff --git a/src/main/java/net/minecraft/world/level/block/BigDripleafBlock.java b/src/main/java/net/minecraft/world/level/block/BigDripleafBlock.java
index b5b96320c6684c1c8de9a4f8ed79b6b5e0823dbb..59978024aaa6ae5c97c6dbf723e021fbd893ecd6 100644
--- a/src/main/java/net/minecraft/world/level/block/BigDripleafBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/BigDripleafBlock.java
@@ -118,7 +118,7 @@ public class BigDripleafBlock extends HorizontalDirectionalBlock implements Bone
 
     @Override
     public FluidState getFluidState(BlockState state) {
-        return (Boolean) state.getValue(BigDripleafBlock.WATERLOGGED) ? Fluids.WATER.getSource(false) : super.getFluidState(state);
+        return ((Boolean) state.getValue(BigDripleafBlock.WATERLOGGED)).booleanValue() ? Fluids.WATER.getSource(false) : super.getFluidState(state);
     }
 
     @Override
@@ -134,7 +134,7 @@ public class BigDripleafBlock extends HorizontalDirectionalBlock implements Bone
         if (direction == Direction.DOWN && !state.canSurvive(world, pos)) {
             return Blocks.AIR.defaultBlockState();
         } else {
-            if ((Boolean) state.getValue(BigDripleafBlock.WATERLOGGED)) {
+            if (((Boolean) state.getValue(BigDripleafBlock.WATERLOGGED)).booleanValue()) {
                 world.scheduleTick(pos, (Fluid) Fluids.WATER, Fluids.WATER.getTickDelay(world));
             }
 
diff --git a/src/main/java/net/minecraft/world/level/block/Block.java b/src/main/java/net/minecraft/world/level/block/Block.java
index 93df2220f6ef1a5206c6c508266811effb3c0fe9..61884e22f966581a23d90ca910cac94c38a1d769 100644
--- a/src/main/java/net/minecraft/world/level/block/Block.java
+++ b/src/main/java/net/minecraft/world/level/block/Block.java
@@ -279,7 +279,7 @@ public class Block extends BlockBehaviour implements ItemLike {
     }
 
     public static boolean isShapeFullBlock(VoxelShape shape) {
-        return (Boolean) Block.SHAPE_FULL_BLOCK_CACHE.getUnchecked(shape);
+        return ((Boolean) Block.SHAPE_FULL_BLOCK_CACHE.getUnchecked(shape)).booleanValue();
     }
 
     public boolean propagatesSkylightDown(BlockState state, BlockGetter world, BlockPos pos) {
diff --git a/src/main/java/net/minecraft/world/level/block/BubbleColumnBlock.java b/src/main/java/net/minecraft/world/level/block/BubbleColumnBlock.java
index 461288cb56793f11e8dac80720b36cb9b42da518..36c13bc21cd89ca54251e2c918e3781a4b7eec9f 100644
--- a/src/main/java/net/minecraft/world/level/block/BubbleColumnBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/BubbleColumnBlock.java
@@ -41,7 +41,7 @@ public class BubbleColumnBlock extends Block implements BucketPickup {
         if (!new io.papermc.paper.event.entity.EntityInsideBlockEvent(entity.getBukkitEntity(), org.bukkit.craftbukkit.block.CraftBlock.at(world, pos)).callEvent()) { return; } // Paper
         BlockState blockState = world.getBlockState(pos.above());
         if (blockState.isAir()) {
-            entity.onAboveBubbleCol(state.getValue(DRAG_DOWN));
+            entity.onAboveBubbleCol(state.<Boolean>getValue(DRAG_DOWN).booleanValue());
             if (!world.isClientSide) {
                 ServerLevel serverLevel = (ServerLevel)world;
 
@@ -51,7 +51,7 @@ public class BubbleColumnBlock extends Block implements BucketPickup {
                 }
             }
         } else {
-            entity.onInsideBubbleColumn(state.getValue(DRAG_DOWN));
+            entity.onInsideBubbleColumn(state.<Boolean>getValue(DRAG_DOWN).booleanValue());
         }
 
     }
@@ -106,7 +106,7 @@ public class BubbleColumnBlock extends Block implements BucketPickup {
         double d = (double)pos.getX();
         double e = (double)pos.getY();
         double f = (double)pos.getZ();
-        if (state.getValue(DRAG_DOWN)) {
+        if (state.<Boolean>getValue(DRAG_DOWN).booleanValue()) {
             world.addAlwaysVisibleParticle(ParticleTypes.CURRENT_DOWN, d + 0.5D, e + 0.8D, f, 0.0D, 0.0D, 0.0D);
             if (random.nextInt(200) == 0) {
                 world.playLocalSound(d, e, f, SoundEvents.BUBBLE_COLUMN_WHIRLPOOL_AMBIENT, SoundSource.BLOCKS, 0.2F + random.nextFloat() * 0.2F, 0.9F + random.nextFloat() * 0.15F, false);
diff --git a/src/main/java/net/minecraft/world/level/block/ButtonBlock.java b/src/main/java/net/minecraft/world/level/block/ButtonBlock.java
index 90a2ea9b4ca7009e19ca010b6ddb8683dcdee32d..202914dd0c265a61397aae86391e8b4379557257 100644
--- a/src/main/java/net/minecraft/world/level/block/ButtonBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/ButtonBlock.java
@@ -70,7 +70,7 @@ public class ButtonBlock extends FaceAttachedHorizontalDirectionalBlock {
     @Override
     public VoxelShape getShape(BlockState state, BlockGetter world, BlockPos pos, CollisionContext context) {
         Direction enumdirection = (Direction) state.getValue(ButtonBlock.FACING);
-        boolean flag = (Boolean) state.getValue(ButtonBlock.POWERED);
+        boolean flag = ((Boolean) state.getValue(ButtonBlock.POWERED)).booleanValue();
 
         switch ((AttachFace) state.getValue(ButtonBlock.FACE)) {
             case FLOOR:
@@ -110,11 +110,11 @@ public class ButtonBlock extends FaceAttachedHorizontalDirectionalBlock {
 
     @Override
     public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
-        if ((Boolean) state.getValue(ButtonBlock.POWERED)) {
+        if (((Boolean) state.getValue(ButtonBlock.POWERED)).booleanValue()) {
             return InteractionResult.CONSUME;
         } else {
             // CraftBukkit start
-            boolean powered = ((Boolean) state.getValue(POWERED));
+            boolean powered = (((Boolean) state.getValue(POWERED)).booleanValue());
             org.bukkit.block.Block block = world.getWorld().getBlockAt(pos.getX(), pos.getY(), pos.getZ());
             int old = (powered) ? 15 : 0;
             int current = (!powered) ? 15 : 0;
@@ -150,7 +150,7 @@ public class ButtonBlock extends FaceAttachedHorizontalDirectionalBlock {
     @Override
     public void onRemove(BlockState state, Level world, BlockPos pos, BlockState newState, boolean moved) {
         if (!moved && !state.is(newState.getBlock())) {
-            if ((Boolean) state.getValue(ButtonBlock.POWERED)) {
+            if (((Boolean) state.getValue(ButtonBlock.POWERED)).booleanValue()) {
                 this.updateNeighbours(state, world, pos);
             }
 
@@ -160,12 +160,12 @@ public class ButtonBlock extends FaceAttachedHorizontalDirectionalBlock {
 
     @Override
     public int getSignal(BlockState state, BlockGetter world, BlockPos pos, Direction direction) {
-        return (Boolean) state.getValue(ButtonBlock.POWERED) ? 15 : 0;
+        return ((Boolean) state.getValue(ButtonBlock.POWERED)).booleanValue() ? 15 : 0;
     }
 
     @Override
     public int getDirectSignal(BlockState state, BlockGetter world, BlockPos pos, Direction direction) {
-        return (Boolean) state.getValue(ButtonBlock.POWERED) && getConnectedDirection(state) == direction ? 15 : 0;
+        return ((Boolean) state.getValue(ButtonBlock.POWERED)).booleanValue() && getConnectedDirection(state) == direction ? 15 : 0;
     }
 
     @Override
@@ -183,7 +183,7 @@ public class ButtonBlock extends FaceAttachedHorizontalDirectionalBlock {
     @Override
     public void entityInside(BlockState state, Level world, BlockPos pos, Entity entity) {
         if (!new io.papermc.paper.event.entity.EntityInsideBlockEvent(entity.getBukkitEntity(), org.bukkit.craftbukkit.block.CraftBlock.at(world, pos)).callEvent()) { return; } // Paper
-        if (!world.isClientSide && this.arrowsCanPress && !(Boolean) state.getValue(ButtonBlock.POWERED)) {
+        if (!world.isClientSide && this.arrowsCanPress && !((Boolean) state.getValue(ButtonBlock.POWERED)).booleanValue()) {
             this.checkPressed(state, world, pos);
         }
     }
@@ -191,7 +191,7 @@ public class ButtonBlock extends FaceAttachedHorizontalDirectionalBlock {
     protected void checkPressed(BlockState state, Level world, BlockPos pos) {
         AbstractArrow entityarrow = this.arrowsCanPress ? (AbstractArrow) world.getEntitiesOfClass(AbstractArrow.class, state.getShape(world, pos).bounds().move(pos)).stream().findFirst().orElse(null) : null; // CraftBukkit - decompile error
         boolean flag = entityarrow != null;
-        boolean flag1 = (Boolean) state.getValue(ButtonBlock.POWERED);
+        boolean flag1 = ((Boolean) state.getValue(ButtonBlock.POWERED)).booleanValue();
 
         // CraftBukkit start - Call interact event when arrows turn on wooden buttons
         if (flag1 != flag && flag) {
diff --git a/src/main/java/net/minecraft/world/level/block/CactusBlock.java b/src/main/java/net/minecraft/world/level/block/CactusBlock.java
index fb020447a843e4df66d9be1b00850dd61d92c059..9a2f61f9f956b782522ec962a85858598df3ba40 100644
--- a/src/main/java/net/minecraft/world/level/block/CactusBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/CactusBlock.java
@@ -56,7 +56,7 @@ public class CactusBlock extends Block {
             }
 
             if (i < world.paperConfig().maxGrowthHeight.cactus) { // Paper - Configurable growth height
-                int j = (Integer) state.getValue(CactusBlock.AGE);
+                int j = ((Integer) state.getValue(CactusBlock.AGE)).intValue();
 
                 int modifier = world.spigotConfig.cactusModifier; // Spigot - SPIGOT-7159: Better modifier resolution
                 if (j >= 15 || (modifier != 100 && random.nextFloat() < (modifier / (100.0f * 16)))) { // Spigot - SPIGOT-7159: Better modifier resolution
diff --git a/src/main/java/net/minecraft/world/level/block/CakeBlock.java b/src/main/java/net/minecraft/world/level/block/CakeBlock.java
index 60630b5bcf4351b5df09837208dec49a19327b01..2724da92c7a6eab9442b84e140cf173c03118592 100644
--- a/src/main/java/net/minecraft/world/level/block/CakeBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/CakeBlock.java
@@ -43,7 +43,7 @@ public class CakeBlock extends Block {
 
     @Override
     public VoxelShape getShape(BlockState state, BlockGetter world, BlockPos pos, CollisionContext context) {
-        return CakeBlock.SHAPE_BY_BITE[(Integer) state.getValue(CakeBlock.BITES)];
+        return CakeBlock.SHAPE_BY_BITE[((Integer) state.getValue(CakeBlock.BITES)).intValue()];
     }
 
     @Override
@@ -51,7 +51,7 @@ public class CakeBlock extends Block {
         ItemStack itemstack = player.getItemInHand(hand);
         Item item = itemstack.getItem();
 
-        if (itemstack.is(ItemTags.CANDLES) && (Integer) state.getValue(CakeBlock.BITES) == 0) {
+        if (itemstack.is(ItemTags.CANDLES) && ((Integer) state.getValue(CakeBlock.BITES)).intValue() == 0) {
             Block block = Block.byItem(item);
 
             if (block instanceof CandleBlock) {
@@ -97,7 +97,7 @@ public class CakeBlock extends Block {
 
             ((net.minecraft.server.level.ServerPlayer) player).getBukkitEntity().sendHealthUpdate();
             // CraftBukkit end
-            int i = (Integer) state.getValue(CakeBlock.BITES);
+            int i = ((Integer) state.getValue(CakeBlock.BITES)).intValue();
 
             world.gameEvent((Entity) player, GameEvent.EAT, pos);
             if (i < 6) {
@@ -128,7 +128,7 @@ public class CakeBlock extends Block {
 
     @Override
     public int getAnalogOutputSignal(BlockState state, Level world, BlockPos pos) {
-        return CakeBlock.getOutputSignal((Integer) state.getValue(CakeBlock.BITES));
+        return CakeBlock.getOutputSignal(((Integer) state.getValue(CakeBlock.BITES)).intValue());
     }
 
     public static int getOutputSignal(int bites) {
diff --git a/src/main/java/net/minecraft/world/level/block/CampfireBlock.java b/src/main/java/net/minecraft/world/level/block/CampfireBlock.java
index e83e9b2668ad9dff7067972306f3b7c2a49550b2..b8bf7232fa57ed0783ead726bfc9fd5011dc8258 100644
--- a/src/main/java/net/minecraft/world/level/block/CampfireBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/CampfireBlock.java
@@ -94,7 +94,7 @@ public class CampfireBlock extends BaseEntityBlock implements SimpleWaterloggedB
     @Override
     public void entityInside(BlockState state, Level world, BlockPos pos, Entity entity) {
         if (!new io.papermc.paper.event.entity.EntityInsideBlockEvent(entity.getBukkitEntity(), org.bukkit.craftbukkit.block.CraftBlock.at(world, pos)).callEvent()) { return; } // Paper
-        if ((Boolean) state.getValue(CampfireBlock.LIT) && entity instanceof LivingEntity && !EnchantmentHelper.hasFrostWalker((LivingEntity) entity)) {
+        if (((Boolean) state.getValue(CampfireBlock.LIT)).booleanValue() && entity instanceof LivingEntity && !EnchantmentHelper.hasFrostWalker((LivingEntity) entity)) {
             org.bukkit.craftbukkit.event.CraftEventFactory.blockDamage = CraftBlock.at(world, pos); // CraftBukkit
             entity.hurt(DamageSource.IN_FIRE, (float) this.fireDamage);
             org.bukkit.craftbukkit.event.CraftEventFactory.blockDamage = null; // CraftBukkit
@@ -128,7 +128,7 @@ public class CampfireBlock extends BaseEntityBlock implements SimpleWaterloggedB
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
-        if ((Boolean) state.getValue(CampfireBlock.WATERLOGGED)) {
+        if (((Boolean) state.getValue(CampfireBlock.WATERLOGGED)).booleanValue()) {
             world.scheduleTick(pos, (Fluid) Fluids.WATER, Fluids.WATER.getTickDelay(world));
         }
 
@@ -151,7 +151,7 @@ public class CampfireBlock extends BaseEntityBlock implements SimpleWaterloggedB
 
     @Override
     public void animateTick(BlockState state, Level world, BlockPos pos, RandomSource random) {
-        if ((Boolean) state.getValue(CampfireBlock.LIT)) {
+        if (((Boolean) state.getValue(CampfireBlock.LIT)).booleanValue()) {
             if (random.nextInt(10) == 0) {
                 world.playLocalSound((double) pos.getX() + 0.5D, (double) pos.getY() + 0.5D, (double) pos.getZ() + 0.5D, SoundEvents.CAMPFIRE_CRACKLE, SoundSource.BLOCKS, 0.5F + random.nextFloat(), random.nextFloat() * 0.7F + 0.6F, false);
             }
@@ -168,7 +168,7 @@ public class CampfireBlock extends BaseEntityBlock implements SimpleWaterloggedB
     public static void dowse(@Nullable Entity entity, LevelAccessor world, BlockPos pos, BlockState state) {
         if (world.isClientSide()) {
             for (int i = 0; i < 20; ++i) {
-                CampfireBlock.makeParticles((Level) world, pos, (Boolean) state.getValue(CampfireBlock.SIGNAL_FIRE), true);
+                CampfireBlock.makeParticles((Level) world, pos, ((Boolean) state.getValue(CampfireBlock.SIGNAL_FIRE)).booleanValue(), true);
             }
         }
 
@@ -183,8 +183,8 @@ public class CampfireBlock extends BaseEntityBlock implements SimpleWaterloggedB
 
     @Override
     public boolean placeLiquid(LevelAccessor world, BlockPos pos, BlockState state, FluidState fluidState) {
-        if (!(Boolean) state.getValue(BlockStateProperties.WATERLOGGED) && fluidState.getType() == Fluids.WATER) {
-            boolean flag = (Boolean) state.getValue(CampfireBlock.LIT);
+        if (!((Boolean) state.getValue(BlockStateProperties.WATERLOGGED)).booleanValue() && fluidState.getType() == Fluids.WATER) {
+            boolean flag = ((Boolean) state.getValue(CampfireBlock.LIT)).booleanValue();
 
             if (flag) {
                 if (!world.isClientSide()) {
@@ -206,7 +206,7 @@ public class CampfireBlock extends BaseEntityBlock implements SimpleWaterloggedB
     public void onProjectileHit(Level world, BlockState state, BlockHitResult hit, Projectile projectile) {
         BlockPos blockposition = hit.getBlockPos();
 
-        if (!world.isClientSide && projectile.isOnFire() && projectile.mayInteract(world, blockposition) && !(Boolean) state.getValue(CampfireBlock.LIT) && !(Boolean) state.getValue(CampfireBlock.WATERLOGGED)) {
+        if (!world.isClientSide && projectile.isOnFire() && projectile.mayInteract(world, blockposition) && !((Boolean) state.getValue(CampfireBlock.LIT)).booleanValue() && !((Boolean) state.getValue(CampfireBlock.WATERLOGGED)).booleanValue()) {
             // CraftBukkit start
             if (org.bukkit.craftbukkit.event.CraftEventFactory.callBlockIgniteEvent(world, blockposition, projectile).isCancelled()) {
                 return;
@@ -250,12 +250,12 @@ public class CampfireBlock extends BaseEntityBlock implements SimpleWaterloggedB
     }
 
     public static boolean isLitCampfire(BlockState state) {
-        return state.hasProperty(CampfireBlock.LIT) && state.is(BlockTags.CAMPFIRES) && (Boolean) state.getValue(CampfireBlock.LIT);
+        return state.hasProperty(CampfireBlock.LIT) && state.is(BlockTags.CAMPFIRES) && ((Boolean) state.getValue(CampfireBlock.LIT)).booleanValue();
     }
 
     @Override
     public FluidState getFluidState(BlockState state) {
-        return (Boolean) state.getValue(CampfireBlock.WATERLOGGED) ? Fluids.WATER.getSource(false) : super.getFluidState(state);
+        return ((Boolean) state.getValue(CampfireBlock.WATERLOGGED)).booleanValue() ? Fluids.WATER.getSource(false) : super.getFluidState(state);
     }
 
     @Override
@@ -281,7 +281,7 @@ public class CampfireBlock extends BaseEntityBlock implements SimpleWaterloggedB
     @Nullable
     @Override
     public <T extends BlockEntity> BlockEntityTicker<T> getTicker(Level world, BlockState state, BlockEntityType<T> type) {
-        return world.isClientSide ? ((Boolean) state.getValue(CampfireBlock.LIT) ? createTickerHelper(type, BlockEntityType.CAMPFIRE, CampfireBlockEntity::particleTick) : null) : ((Boolean) state.getValue(CampfireBlock.LIT) ? createTickerHelper(type, BlockEntityType.CAMPFIRE, CampfireBlockEntity::cookTick) : createTickerHelper(type, BlockEntityType.CAMPFIRE, CampfireBlockEntity::cooldownTick));
+        return world.isClientSide ? (((Boolean) state.getValue(CampfireBlock.LIT)).booleanValue() ? createTickerHelper(type, BlockEntityType.CAMPFIRE, CampfireBlockEntity::particleTick) : null) : (((Boolean) state.getValue(CampfireBlock.LIT)).booleanValue() ? createTickerHelper(type, BlockEntityType.CAMPFIRE, CampfireBlockEntity::cookTick) : createTickerHelper(type, BlockEntityType.CAMPFIRE, CampfireBlockEntity::cooldownTick));
     }
 
     @Override
@@ -292,6 +292,6 @@ public class CampfireBlock extends BaseEntityBlock implements SimpleWaterloggedB
     public static boolean canLight(BlockState state) {
         return state.is(BlockTags.CAMPFIRES, (blockbase_blockdata) -> {
             return blockbase_blockdata.hasProperty(CampfireBlock.WATERLOGGED) && blockbase_blockdata.hasProperty(CampfireBlock.LIT);
-        }) && !(Boolean) state.getValue(CampfireBlock.WATERLOGGED) && !(Boolean) state.getValue(CampfireBlock.LIT);
+        }) && !((Boolean) state.getValue(CampfireBlock.WATERLOGGED)).booleanValue() && !((Boolean) state.getValue(CampfireBlock.LIT)).booleanValue();
     }
 }
diff --git a/src/main/java/net/minecraft/world/level/block/CaveVines.java b/src/main/java/net/minecraft/world/level/block/CaveVines.java
index fef79f695dfc0dd70f61c1fef6904c34bf9ae689..bb0ce2e4f85c455f8ee6c9e6c6b5db998d91ce50 100644
--- a/src/main/java/net/minecraft/world/level/block/CaveVines.java
+++ b/src/main/java/net/minecraft/world/level/block/CaveVines.java
@@ -29,7 +29,7 @@ public interface CaveVines {
     BooleanProperty BERRIES = BlockStateProperties.BERRIES;
 
     static InteractionResult use(BlockState iblockdata, Level world, BlockPos blockposition, Entity entity) {
-        if ((Boolean) iblockdata.getValue(CaveVines.BERRIES)) {
+        if (((Boolean) iblockdata.getValue(CaveVines.BERRIES)).booleanValue()) {
             // CraftBukkit start
             if (org.bukkit.craftbukkit.event.CraftEventFactory.callEntityChangeBlockEvent(entity, blockposition, (BlockState) iblockdata.setValue(CaveVines.BERRIES, Boolean.FALSE)).isCancelled()) {
                 return InteractionResult.SUCCESS;
@@ -59,12 +59,12 @@ public interface CaveVines {
     }
 
     static boolean hasGlowBerries(BlockState state) {
-        return state.hasProperty(CaveVines.BERRIES) && (Boolean) state.getValue(CaveVines.BERRIES);
+        return state.hasProperty(CaveVines.BERRIES) && ((Boolean) state.getValue(CaveVines.BERRIES)).booleanValue();
     }
 
     static ToIntFunction<BlockState> emission(int luminance) {
         return (iblockdata) -> {
-            return (Boolean) iblockdata.getValue(BlockStateProperties.BERRIES) ? luminance : 0;
+            return ((Boolean) iblockdata.getValue(BlockStateProperties.BERRIES)).booleanValue() ? luminance : 0;
         };
     }
 }
diff --git a/src/main/java/net/minecraft/world/level/block/CaveVinesBlock.java b/src/main/java/net/minecraft/world/level/block/CaveVinesBlock.java
index 51da478270fd6ddc8a17c73b78b870431451ce82..014d14039ec52f221bcc0320731c2d531815d9a6 100644
--- a/src/main/java/net/minecraft/world/level/block/CaveVinesBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/CaveVinesBlock.java
@@ -77,7 +77,7 @@ public class CaveVinesBlock extends GrowingPlantHeadBlock implements Bonemealabl
 
     @Override
     public boolean isValidBonemealTarget(LevelReader world, BlockPos pos, BlockState state, boolean isClient) {
-        return !(Boolean) state.getValue(CaveVinesBlock.BERRIES);
+        return !((Boolean) state.getValue(CaveVinesBlock.BERRIES)).booleanValue();
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/CaveVinesPlantBlock.java b/src/main/java/net/minecraft/world/level/block/CaveVinesPlantBlock.java
index a8eab2a1f074460961fd4b645a5f516fea0692be..89b3da7d1b9ea34bb04bb1f06b72f300178b6b1d 100644
--- a/src/main/java/net/minecraft/world/level/block/CaveVinesPlantBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/CaveVinesPlantBlock.java
@@ -51,7 +51,7 @@ public class CaveVinesPlantBlock extends GrowingPlantBodyBlock implements Boneme
 
     @Override
     public boolean isValidBonemealTarget(LevelReader world, BlockPos pos, BlockState state, boolean isClient) {
-        return !(Boolean) state.getValue(CaveVinesPlantBlock.BERRIES);
+        return !((Boolean) state.getValue(CaveVinesPlantBlock.BERRIES)).booleanValue();
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/ChestBlock.java b/src/main/java/net/minecraft/world/level/block/ChestBlock.java
index 6ab703311f13027ac16928a4a1c1a1c4da75fcb5..4f8d6cb5bad0ec61900b34f65945cabaf5cffcff 100644
--- a/src/main/java/net/minecraft/world/level/block/ChestBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/ChestBlock.java
@@ -150,7 +150,7 @@ public class ChestBlock extends AbstractChestBlock<ChestBlockEntity> implements
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
-        if ((Boolean) state.getValue(ChestBlock.WATERLOGGED)) {
+        if (((Boolean) state.getValue(ChestBlock.WATERLOGGED)).booleanValue()) {
             world.scheduleTick(pos, (Fluid) Fluids.WATER, Fluids.WATER.getTickDelay(world));
         }
 
@@ -222,7 +222,7 @@ public class ChestBlock extends AbstractChestBlock<ChestBlockEntity> implements
 
     @Override
     public FluidState getFluidState(BlockState state) {
-        return (Boolean) state.getValue(ChestBlock.WATERLOGGED) ? Fluids.WATER.getSource(false) : super.getFluidState(state);
+        return ((Boolean) state.getValue(ChestBlock.WATERLOGGED)).booleanValue() ? Fluids.WATER.getSource(false) : super.getFluidState(state);
     }
 
     @Nullable
diff --git a/src/main/java/net/minecraft/world/level/block/ChorusFlowerBlock.java b/src/main/java/net/minecraft/world/level/block/ChorusFlowerBlock.java
index 54aedb271e1878b9502d5dc637cc793c83887fc5..83694b3963b3bc0392f9240128e76740c01d3950 100644
--- a/src/main/java/net/minecraft/world/level/block/ChorusFlowerBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/ChorusFlowerBlock.java
@@ -41,7 +41,7 @@ public class ChorusFlowerBlock extends Block {
 
     @Override
     public boolean isRandomlyTicking(BlockState state) {
-        return (Integer) state.getValue(ChorusFlowerBlock.AGE) < 5;
+        return ((Integer) state.getValue(ChorusFlowerBlock.AGE)).intValue() < 5;
     }
 
     @Override
@@ -49,7 +49,7 @@ public class ChorusFlowerBlock extends Block {
         BlockPos blockposition1 = pos.above();
 
         if (world.isEmptyBlock(blockposition1) && blockposition1.getY() < world.getMaxBuildHeight()) {
-            int i = (Integer) state.getValue(ChorusFlowerBlock.AGE);
+            int i = ((Integer) state.getValue(ChorusFlowerBlock.AGE)).intValue();
 
             if (i < 5) {
                 boolean flag = false;
diff --git a/src/main/java/net/minecraft/world/level/block/CocoaBlock.java b/src/main/java/net/minecraft/world/level/block/CocoaBlock.java
index 04e321b6290207360a3dec727c738212dd366052..35c5d79c76299d7852f33f64cf8333a31a986a31 100644
--- a/src/main/java/net/minecraft/world/level/block/CocoaBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/CocoaBlock.java
@@ -46,13 +46,13 @@ public class CocoaBlock extends HorizontalDirectionalBlock implements Bonemealab
 
     @Override
     public boolean isRandomlyTicking(BlockState state) {
-        return (Integer) state.getValue(CocoaBlock.AGE) < 2;
+        return ((Integer) state.getValue(CocoaBlock.AGE)).intValue() < 2;
     }
 
     @Override
     public void randomTick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
         if (world.random.nextFloat() < (world.spigotConfig.cocoaModifier / (100.0f * 5))) { // Spigot - SPIGOT-7159: Better modifier resolution
-            int i = (Integer) state.getValue(CocoaBlock.AGE);
+            int i = ((Integer) state.getValue(CocoaBlock.AGE)).intValue();
 
             if (i < 2) {
                 CraftEventFactory.handleBlockGrowEvent(world, pos, (BlockState) state.setValue(CocoaBlock.AGE, Integer.valueOf(i + 1)), 2); // CraftBukkkit
@@ -70,7 +70,7 @@ public class CocoaBlock extends HorizontalDirectionalBlock implements Bonemealab
 
     @Override
     public VoxelShape getShape(BlockState state, BlockGetter world, BlockPos pos, CollisionContext context) {
-        int i = (Integer) state.getValue(CocoaBlock.AGE);
+        int i = ((Integer) state.getValue(CocoaBlock.AGE)).intValue();
 
         switch ((Direction) state.getValue(CocoaBlock.FACING)) {
             case SOUTH:
@@ -115,7 +115,7 @@ public class CocoaBlock extends HorizontalDirectionalBlock implements Bonemealab
 
     @Override
     public boolean isValidBonemealTarget(LevelReader world, BlockPos pos, BlockState state, boolean isClient) {
-        return (Integer) state.getValue(CocoaBlock.AGE) < 2;
+        return ((Integer) state.getValue(CocoaBlock.AGE)).intValue() < 2;
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/ComparatorBlock.java b/src/main/java/net/minecraft/world/level/block/ComparatorBlock.java
index c32e14fd9f95a38a16325dc24655509ff5883359..38c51ae620154d4a2313f1b5cbc3fc6f48b062f2 100644
--- a/src/main/java/net/minecraft/world/level/block/ComparatorBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/ComparatorBlock.java
@@ -128,7 +128,7 @@ public class ComparatorBlock extends DiodeBlock implements EntityBlock {
             BlockEntity tileentity = world.getBlockEntity(pos);
             int j = tileentity instanceof ComparatorBlockEntity ? ((ComparatorBlockEntity) tileentity).getOutputSignal() : 0;
 
-            if (i != j || (Boolean) state.getValue(ComparatorBlock.POWERED) != this.shouldTurnOn(world, pos, state)) {
+            if (i != j || ((Boolean) state.getValue(ComparatorBlock.POWERED)).booleanValue() != this.shouldTurnOn(world, pos, state)) {
                 TickPriority ticklistpriority = this.shouldPrioritize(world, pos, state) ? TickPriority.HIGH : TickPriority.NORMAL;
 
                 world.scheduleTick(pos, (Block) this, 2, ticklistpriority);
@@ -151,7 +151,7 @@ public class ComparatorBlock extends DiodeBlock implements EntityBlock {
 
         if (j != i || state.getValue(ComparatorBlock.MODE) == ComparatorMode.COMPARE) {
             boolean flag = this.shouldTurnOn(world, pos, state);
-            boolean flag1 = (Boolean) state.getValue(ComparatorBlock.POWERED);
+            boolean flag1 = ((Boolean) state.getValue(ComparatorBlock.POWERED)).booleanValue();
 
             if (flag1 && !flag) {
                 // CraftBukkit start
diff --git a/src/main/java/net/minecraft/world/level/block/ComposterBlock.java b/src/main/java/net/minecraft/world/level/block/ComposterBlock.java
index be1aef041b4b68acecc0b55e53a2bed0a03029da..7a59b2f65a15d5122fb1e731c7f11cb856d2b70e 100644
--- a/src/main/java/net/minecraft/world/level/block/ComposterBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/ComposterBlock.java
@@ -193,7 +193,7 @@ public class ComposterBlock extends Block implements WorldlyContainerHolder {
 
     @Override
     public VoxelShape getShape(BlockState state, BlockGetter world, BlockPos pos, CollisionContext context) {
-        return ComposterBlock.SHAPES[(Integer) state.getValue(ComposterBlock.LEVEL)];
+        return ComposterBlock.SHAPES[((Integer) state.getValue(ComposterBlock.LEVEL)).intValue()];
     }
 
     @Override
@@ -208,7 +208,7 @@ public class ComposterBlock extends Block implements WorldlyContainerHolder {
 
     @Override
     public void onPlace(BlockState state, Level world, BlockPos pos, BlockState oldState, boolean notify) {
-        if ((Integer) state.getValue(ComposterBlock.LEVEL) == 7) {
+        if (((Integer) state.getValue(ComposterBlock.LEVEL)).intValue() == 7) {
             world.scheduleTick(pos, state.getBlock(), 20);
         }
 
@@ -216,7 +216,7 @@ public class ComposterBlock extends Block implements WorldlyContainerHolder {
 
     @Override
     public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
-        int i = (Integer) state.getValue(ComposterBlock.LEVEL);
+        int i = ((Integer) state.getValue(ComposterBlock.LEVEL)).intValue();
         ItemStack itemstack = player.getItemInHand(hand);
 
         if (i < 8 && ComposterBlock.COMPOSTABLES.containsKey(itemstack.getItem())) {
@@ -247,7 +247,7 @@ public class ComposterBlock extends Block implements WorldlyContainerHolder {
     }
 
     public static BlockState insertItem(BlockState iblockdata, ServerLevel worldserver, ItemStack itemstack, BlockPos blockposition, Entity entity) { // CraftBukkit
-        int i = (Integer) iblockdata.getValue(ComposterBlock.LEVEL);
+        int i = ((Integer) iblockdata.getValue(ComposterBlock.LEVEL)).intValue();
 
         if (i < 7 && ComposterBlock.COMPOSTABLES.containsKey(itemstack.getItem())) {
             // CraftBukkit start
@@ -306,7 +306,7 @@ public class ComposterBlock extends Block implements WorldlyContainerHolder {
 
     static BlockState addItem(BlockState iblockdata, LevelAccessor generatoraccess, BlockPos blockposition, ItemStack itemstack, double rand) {
         // CraftBukkit end
-        int i = (Integer) iblockdata.getValue(ComposterBlock.LEVEL);
+        int i = ((Integer) iblockdata.getValue(ComposterBlock.LEVEL)).intValue();
         float f = ComposterBlock.COMPOSTABLES.getFloat(itemstack.getItem());
 
         if ((i != 0 || f <= 0.0F) && rand >= (double) f) {
@@ -326,7 +326,7 @@ public class ComposterBlock extends Block implements WorldlyContainerHolder {
 
     @Override
     public void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
-        if ((Integer) state.getValue(ComposterBlock.LEVEL) == 7) {
+        if (((Integer) state.getValue(ComposterBlock.LEVEL)).intValue() == 7) {
             world.setBlock(pos, (BlockState) state.cycle(ComposterBlock.LEVEL), 3);
             world.playSound((Player) null, pos, SoundEvents.COMPOSTER_READY, SoundSource.BLOCKS, 1.0F, 1.0F);
         }
@@ -340,7 +340,7 @@ public class ComposterBlock extends Block implements WorldlyContainerHolder {
 
     @Override
     public int getAnalogOutputSignal(BlockState state, Level world, BlockPos pos) {
-        return (Integer) state.getValue(ComposterBlock.LEVEL);
+        return ((Integer) state.getValue(ComposterBlock.LEVEL)).intValue();
     }
 
     @Override
@@ -355,7 +355,7 @@ public class ComposterBlock extends Block implements WorldlyContainerHolder {
 
     @Override
     public WorldlyContainer getContainer(BlockState state, LevelAccessor world, BlockPos pos) {
-        int i = (Integer) state.getValue(ComposterBlock.LEVEL);
+        int i = ((Integer) state.getValue(ComposterBlock.LEVEL)).intValue();
 
         // CraftBukkit - empty generatoraccess, blockposition
         return (WorldlyContainer) (i == 8 ? new ComposterBlock.OutputContainer(state, world, pos, new ItemStack(Items.BONE_MEAL)) : (i < 7 ? new ComposterBlock.InputContainer(state, world, pos) : new ComposterBlock.EmptyContainer(world, pos)));
diff --git a/src/main/java/net/minecraft/world/level/block/CoralFanBlock.java b/src/main/java/net/minecraft/world/level/block/CoralFanBlock.java
index c7df341cbb11eec8f57bdf0f851a6920def31379..93b1edac9404c049f2b89faade5ad6fb25f3e97d 100644
--- a/src/main/java/net/minecraft/world/level/block/CoralFanBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/CoralFanBlock.java
@@ -44,7 +44,7 @@ public class CoralFanBlock extends BaseCoralFanBlock {
             return Blocks.AIR.defaultBlockState();
         } else {
             this.tryScheduleDieTick(state, world, pos);
-            if ((Boolean) state.getValue(CoralFanBlock.WATERLOGGED)) {
+            if (((Boolean) state.getValue(CoralFanBlock.WATERLOGGED)).booleanValue()) {
                 world.scheduleTick(pos, (Fluid) Fluids.WATER, Fluids.WATER.getTickDelay(world));
             }
 
diff --git a/src/main/java/net/minecraft/world/level/block/CoralPlantBlock.java b/src/main/java/net/minecraft/world/level/block/CoralPlantBlock.java
index 19c0ae9673bde78bcc2824d580678468970ebd46..b5b76f13dac411b91f710fbb6a19444bf469bffe 100644
--- a/src/main/java/net/minecraft/world/level/block/CoralPlantBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/CoralPlantBlock.java
@@ -49,7 +49,7 @@ public class CoralPlantBlock extends BaseCoralPlantTypeBlock {
             return Blocks.AIR.defaultBlockState();
         } else {
             this.tryScheduleDieTick(state, world, pos);
-            if ((Boolean) state.getValue(CoralPlantBlock.WATERLOGGED)) {
+            if (((Boolean) state.getValue(CoralPlantBlock.WATERLOGGED)).booleanValue()) {
                 world.scheduleTick(pos, (Fluid) Fluids.WATER, Fluids.WATER.getTickDelay(world));
             }
 
diff --git a/src/main/java/net/minecraft/world/level/block/CoralWallFanBlock.java b/src/main/java/net/minecraft/world/level/block/CoralWallFanBlock.java
index 71967d7301fc67b931bdac36066019ba6580e4c9..9e3ab5aa2530ffefa97fc490f4eed0469eaab249 100644
--- a/src/main/java/net/minecraft/world/level/block/CoralWallFanBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/CoralWallFanBlock.java
@@ -43,7 +43,7 @@ public class CoralWallFanBlock extends BaseCoralWallFanBlock {
         if (direction.getOpposite() == state.getValue(CoralWallFanBlock.FACING) && !state.canSurvive(world, pos)) {
             return Blocks.AIR.defaultBlockState();
         } else {
-            if ((Boolean) state.getValue(CoralWallFanBlock.WATERLOGGED)) {
+            if (((Boolean) state.getValue(CoralWallFanBlock.WATERLOGGED)).booleanValue()) {
                 world.scheduleTick(pos, (Fluid) Fluids.WATER, Fluids.WATER.getTickDelay(world));
             }
 
diff --git a/src/main/java/net/minecraft/world/level/block/CropBlock.java b/src/main/java/net/minecraft/world/level/block/CropBlock.java
index ff63a59b219c14be72de91724ade1b2e26449535..9e76fd9a801d308bcf412ae1f7a11e505bf37562 100644
--- a/src/main/java/net/minecraft/world/level/block/CropBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/CropBlock.java
@@ -35,7 +35,7 @@ public class CropBlock extends BushBlock implements BonemealableBlock {
 
     @Override
     public VoxelShape getShape(BlockState state, BlockGetter world, BlockPos pos, CollisionContext context) {
-        return CropBlock.SHAPE_BY_AGE[(Integer) state.getValue(this.getAgeProperty())];
+        return CropBlock.SHAPE_BY_AGE[((Integer) state.getValue(this.getAgeProperty())).intValue()];
     }
 
     @Override
@@ -52,7 +52,7 @@ public class CropBlock extends BushBlock implements BonemealableBlock {
     }
 
     protected int getAge(BlockState state) {
-        return (Integer) state.getValue(this.getAgeProperty());
+        return ((Integer) state.getValue(this.getAgeProperty())).intValue();
     }
 
     public BlockState getStateForAge(int age) {
@@ -60,7 +60,7 @@ public class CropBlock extends BushBlock implements BonemealableBlock {
     }
 
     public boolean isMaxAge(BlockState state) {
-        return (Integer) state.getValue(this.getAgeProperty()) >= this.getMaxAge();
+        return ((Integer) state.getValue(this.getAgeProperty())).intValue() >= this.getMaxAge();
     }
 
     @Override
@@ -123,7 +123,7 @@ public class CropBlock extends BushBlock implements BonemealableBlock {
 
                 if (iblockdata.is(Blocks.FARMLAND)) {
                     f1 = 1.0F;
-                    if ((Integer) iblockdata.getValue(FarmBlock.MOISTURE) > 0) {
+                    if (((Integer) iblockdata.getValue(FarmBlock.MOISTURE)).intValue() > 0) {
                         f1 = 3.0F;
                     }
                 }
diff --git a/src/main/java/net/minecraft/world/level/block/DaylightDetectorBlock.java b/src/main/java/net/minecraft/world/level/block/DaylightDetectorBlock.java
index a850ae2b71c5a91c5d812cc40433f1c1e8b8e2f1..b5afc4e4b7618c2684a34a0ba115079da85786e2 100644
--- a/src/main/java/net/minecraft/world/level/block/DaylightDetectorBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/DaylightDetectorBlock.java
@@ -48,13 +48,13 @@ public class DaylightDetectorBlock extends BaseEntityBlock {
 
     @Override
     public int getSignal(BlockState state, BlockGetter world, BlockPos pos, Direction direction) {
-        return (Integer) state.getValue(DaylightDetectorBlock.POWER);
+        return ((Integer) state.getValue(DaylightDetectorBlock.POWER)).intValue();
     }
 
     private static void updateSignalStrength(BlockState state, Level world, BlockPos pos) {
         int i = world.getBrightness(LightLayer.SKY, pos) - world.getSkyDarken();
         float f = world.getSunAngle(1.0F);
-        boolean flag = (Boolean) state.getValue(DaylightDetectorBlock.INVERTED);
+        boolean flag = ((Boolean) state.getValue(DaylightDetectorBlock.INVERTED)).booleanValue();
 
         if (flag) {
             i = 15 - i;
@@ -66,8 +66,8 @@ public class DaylightDetectorBlock extends BaseEntityBlock {
         }
 
         i = Mth.clamp(i, (int) 0, (int) 15);
-        if ((Integer) state.getValue(DaylightDetectorBlock.POWER) != i) {
-            i = org.bukkit.craftbukkit.event.CraftEventFactory.callRedstoneChange(world, pos, ((Integer) state.getValue(POWER)), i).getNewCurrent(); // CraftBukkit - Call BlockRedstoneEvent
+        if (((Integer) state.getValue(DaylightDetectorBlock.POWER)).intValue() != i) {
+            i = org.bukkit.craftbukkit.event.CraftEventFactory.callRedstoneChange(world, pos, (((Integer) state.getValue(POWER)).intValue()), i).getNewCurrent(); // CraftBukkit - Call BlockRedstoneEvent
             world.setBlock(pos, (BlockState) state.setValue(DaylightDetectorBlock.POWER, Integer.valueOf(i)), 3);
         }
 
diff --git a/src/main/java/net/minecraft/world/level/block/DetectorRailBlock.java b/src/main/java/net/minecraft/world/level/block/DetectorRailBlock.java
index fde5dd2e84ec8a42883f8afac6dd0d320261d8f5..9be0ae6b8a06b7088fe78bb7e057a70445cdcaa1 100644
--- a/src/main/java/net/minecraft/world/level/block/DetectorRailBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/DetectorRailBlock.java
@@ -46,7 +46,7 @@ public class DetectorRailBlock extends BaseRailBlock {
     public void entityInside(BlockState state, Level world, BlockPos pos, Entity entity) {
         if (!new io.papermc.paper.event.entity.EntityInsideBlockEvent(entity.getBukkitEntity(), org.bukkit.craftbukkit.block.CraftBlock.at(world, pos)).callEvent()) { return; } // Paper
         if (!world.isClientSide) {
-            if (!(Boolean) state.getValue(DetectorRailBlock.POWERED)) {
+            if (!((Boolean) state.getValue(DetectorRailBlock.POWERED)).booleanValue()) {
                 this.checkPressed(world, pos, state);
             }
         }
@@ -54,25 +54,25 @@ public class DetectorRailBlock extends BaseRailBlock {
 
     @Override
     public void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
-        if ((Boolean) state.getValue(DetectorRailBlock.POWERED)) {
+        if (((Boolean) state.getValue(DetectorRailBlock.POWERED)).booleanValue()) {
             this.checkPressed(world, pos, state);
         }
     }
 
     @Override
     public int getSignal(BlockState state, BlockGetter world, BlockPos pos, Direction direction) {
-        return (Boolean) state.getValue(DetectorRailBlock.POWERED) ? 15 : 0;
+        return ((Boolean) state.getValue(DetectorRailBlock.POWERED)).booleanValue() ? 15 : 0;
     }
 
     @Override
     public int getDirectSignal(BlockState state, BlockGetter world, BlockPos pos, Direction direction) {
-        return !(Boolean) state.getValue(DetectorRailBlock.POWERED) ? 0 : (direction == Direction.UP ? 15 : 0);
+        return !((Boolean) state.getValue(DetectorRailBlock.POWERED)).booleanValue() ? 0 : (direction == Direction.UP ? 15 : 0);
     }
 
     private void checkPressed(Level world, BlockPos pos, BlockState state) {
         if (this.canSurvive(state, world, pos)) {
             if (state.getBlock() != this) { return; } // Paper - not our block, don't do anything
-            boolean flag = (Boolean) state.getValue(DetectorRailBlock.POWERED);
+            boolean flag = ((Boolean) state.getValue(DetectorRailBlock.POWERED)).booleanValue();
             boolean flag1 = false;
             List<AbstractMinecart> list = this.getInteractingMinecartOfType(world, pos, AbstractMinecart.class, (entity) -> {
                 return true;
@@ -155,7 +155,7 @@ public class DetectorRailBlock extends BaseRailBlock {
 
     @Override
     public int getAnalogOutputSignal(BlockState state, Level world, BlockPos pos) {
-        if ((Boolean) state.getValue(DetectorRailBlock.POWERED)) {
+        if (((Boolean) state.getValue(DetectorRailBlock.POWERED)).booleanValue()) {
             List<MinecartCommandBlock> list = this.getInteractingMinecartOfType(world, pos, MinecartCommandBlock.class, (entity) -> {
                 return true;
             });
diff --git a/src/main/java/net/minecraft/world/level/block/DiodeBlock.java b/src/main/java/net/minecraft/world/level/block/DiodeBlock.java
index 37fe9435e6a933446e73a6ae829de1af6ef9dcde..501a2298d8fed0342765c49164caa385d765ebab 100644
--- a/src/main/java/net/minecraft/world/level/block/DiodeBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/DiodeBlock.java
@@ -44,7 +44,7 @@ public abstract class DiodeBlock extends HorizontalDirectionalBlock {
     @Override
     public void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
         if (!this.isLocked(world, pos, state)) {
-            boolean flag = (Boolean) state.getValue(DiodeBlock.POWERED);
+            boolean flag = ((Boolean) state.getValue(DiodeBlock.POWERED)).booleanValue();
             boolean flag1 = this.shouldTurnOn(world, pos, state);
 
             if (flag && !flag1) {
@@ -76,7 +76,7 @@ public abstract class DiodeBlock extends HorizontalDirectionalBlock {
 
     @Override
     public int getSignal(BlockState state, BlockGetter world, BlockPos pos, Direction direction) {
-        return !(Boolean) state.getValue(DiodeBlock.POWERED) ? 0 : (state.getValue(DiodeBlock.FACING) == direction ? this.getOutputSignal(world, pos, state) : 0);
+        return !((Boolean) state.getValue(DiodeBlock.POWERED)).booleanValue() ? 0 : (state.getValue(DiodeBlock.FACING) == direction ? this.getOutputSignal(world, pos, state) : 0);
     }
 
     @Override
@@ -102,7 +102,7 @@ public abstract class DiodeBlock extends HorizontalDirectionalBlock {
 
     protected void checkTickOnNeighbor(Level world, BlockPos pos, BlockState state) {
         if (!this.isLocked(world, pos, state)) {
-            boolean flag = (Boolean) state.getValue(DiodeBlock.POWERED);
+            boolean flag = ((Boolean) state.getValue(DiodeBlock.POWERED)).booleanValue();
             boolean flag1 = this.shouldTurnOn(world, pos, state);
 
             if (flag != flag1 && !world.getBlockTicks().willTickThisTick(pos, this)) {
@@ -138,7 +138,7 @@ public abstract class DiodeBlock extends HorizontalDirectionalBlock {
         } else {
             BlockState iblockdata1 = world.getBlockState(blockposition1);
 
-            return Math.max(i, iblockdata1.is(Blocks.REDSTONE_WIRE) ? (Integer) iblockdata1.getValue(RedStoneWireBlock.POWER) : 0);
+            return Math.max(i, iblockdata1.is(Blocks.REDSTONE_WIRE) ? ((Integer) iblockdata1.getValue(RedStoneWireBlock.POWER)).intValue() : 0);
         }
     }
 
@@ -153,7 +153,7 @@ public abstract class DiodeBlock extends HorizontalDirectionalBlock {
     protected int getAlternateSignalAt(LevelReader world, BlockPos pos, Direction dir) {
         BlockState iblockdata = world.getBlockState(pos);
 
-        return this.isAlternateInput(iblockdata) ? (iblockdata.is(Blocks.REDSTONE_BLOCK) ? 15 : (iblockdata.is(Blocks.REDSTONE_WIRE) ? (Integer) iblockdata.getValue(RedStoneWireBlock.POWER) : world.getDirectSignal(pos, dir))) : 0;
+        return this.isAlternateInput(iblockdata) ? (iblockdata.is(Blocks.REDSTONE_BLOCK) ? 15 : (iblockdata.is(Blocks.REDSTONE_WIRE) ? ((Integer) iblockdata.getValue(RedStoneWireBlock.POWER)).intValue() : world.getDirectSignal(pos, dir))) : 0;
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/DispenserBlock.java b/src/main/java/net/minecraft/world/level/block/DispenserBlock.java
index 201bb68425e2f88e847fd702962718d5fde224fb..56ee81967c87eac917fc3e00b2671106e9a3dd16 100644
--- a/src/main/java/net/minecraft/world/level/block/DispenserBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/DispenserBlock.java
@@ -110,7 +110,7 @@ public class DispenserBlock extends BaseEntityBlock {
     @Override
     public void neighborChanged(BlockState state, Level world, BlockPos pos, Block sourceBlock, BlockPos sourcePos, boolean notify) {
         boolean flag1 = world.hasNeighborSignal(pos) || world.hasNeighborSignal(pos.above());
-        boolean flag2 = (Boolean) state.getValue(DispenserBlock.TRIGGERED);
+        boolean flag2 = ((Boolean) state.getValue(DispenserBlock.TRIGGERED)).booleanValue();
 
         if (flag1 && !flag2) {
             world.scheduleTick(pos, (Block) this, 4);
diff --git a/src/main/java/net/minecraft/world/level/block/DoorBlock.java b/src/main/java/net/minecraft/world/level/block/DoorBlock.java
index 9c3c7365f3418e37e65d1ca379e0ae3ef88936c6..7151e45abe0ec4b5b5b417740aabab89ff9a175e 100644
--- a/src/main/java/net/minecraft/world/level/block/DoorBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/DoorBlock.java
@@ -61,7 +61,7 @@ public class DoorBlock extends Block {
     @Override
     public VoxelShape getShape(BlockState state, BlockGetter world, BlockPos pos, CollisionContext context) {
         Direction enumdirection = (Direction) state.getValue(DoorBlock.FACING);
-        boolean flag = !(Boolean) state.getValue(DoorBlock.OPEN);
+        boolean flag = !((Boolean) state.getValue(DoorBlock.OPEN)).booleanValue();
         boolean flag1 = state.getValue(DoorBlock.HINGE) == DoorHingeSide.RIGHT;
 
         switch (enumdirection) {
@@ -97,11 +97,11 @@ public class DoorBlock extends Block {
     public boolean isPathfindable(BlockState state, BlockGetter world, BlockPos pos, PathComputationType type) {
         switch (type) {
             case LAND:
-                return (Boolean) state.getValue(DoorBlock.OPEN);
+                return ((Boolean) state.getValue(DoorBlock.OPEN)).booleanValue();
             case WATER:
                 return false;
             case AIR:
-                return (Boolean) state.getValue(DoorBlock.OPEN);
+                return ((Boolean) state.getValue(DoorBlock.OPEN)).booleanValue();
             default:
                 return false;
         }
@@ -177,11 +177,11 @@ public class DoorBlock extends Block {
     }
 
     public boolean isOpen(BlockState state) {
-        return (Boolean) state.getValue(DoorBlock.OPEN);
+        return ((Boolean) state.getValue(DoorBlock.OPEN)).booleanValue();
     }
 
     public void setOpen(@Nullable Entity entity, Level world, BlockState state, BlockPos pos, boolean open) {
-        if (state.is((Block) this) && (Boolean) state.getValue(DoorBlock.OPEN) != open) {
+        if (state.is((Block) this) && ((Boolean) state.getValue(DoorBlock.OPEN)).booleanValue() != open) {
             world.setBlock(pos, (BlockState) state.setValue(DoorBlock.OPEN, Boolean.valueOf(open)), 10);
             this.playSound(entity, world, pos, open);
             world.gameEvent(entity, open ? GameEvent.BLOCK_OPEN : GameEvent.BLOCK_CLOSE, pos);
@@ -200,7 +200,7 @@ public class DoorBlock extends Block {
         int power = bukkitBlock.getBlockPower();
         int powerTop = blockTop.getBlockPower();
         if (powerTop > power) power = powerTop;
-        int oldPower = (Boolean) state.getValue(DoorBlock.POWERED) ? 15 : 0;
+        int oldPower = ((Boolean) state.getValue(DoorBlock.POWERED)).booleanValue() ? 15 : 0;
 
         if (oldPower == 0 ^ power == 0) {
             BlockRedstoneEvent eventRedstone = new BlockRedstoneEvent(bukkitBlock, oldPower, power);
@@ -208,7 +208,7 @@ public class DoorBlock extends Block {
 
             boolean flag1 = eventRedstone.getNewCurrent() > 0;
             // CraftBukkit end
-            if (flag1 != (Boolean) state.getValue(DoorBlock.OPEN)) {
+            if (flag1 != ((Boolean) state.getValue(DoorBlock.OPEN)).booleanValue()) {
                 this.playSound((Entity) null, world, pos, flag1);
                 world.gameEvent((Entity) null, flag1 ? GameEvent.BLOCK_OPEN : GameEvent.BLOCK_CLOSE, pos);
             }
diff --git a/src/main/java/net/minecraft/world/level/block/FarmBlock.java b/src/main/java/net/minecraft/world/level/block/FarmBlock.java
index 826a89ac817a622ca00668a7b7b8d44423927db4..4792a8ba076a24c8874efd92764aa3233ae79c48 100644
--- a/src/main/java/net/minecraft/world/level/block/FarmBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/FarmBlock.java
@@ -81,7 +81,7 @@ public class FarmBlock extends Block {
 
     @Override
     public void randomTick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
-        int i = (Integer) state.getValue(FarmBlock.MOISTURE);
+        int i = ((Integer) state.getValue(FarmBlock.MOISTURE)).intValue();
 
         if (!FarmBlock.isNearWater(world, pos) && !world.isRainingAt(pos.above())) {
             if (i > 0) {
diff --git a/src/main/java/net/minecraft/world/level/block/FenceGateBlock.java b/src/main/java/net/minecraft/world/level/block/FenceGateBlock.java
index 71de4ff9a62e1db3c79436fddaa124207f4f7b9f..5ca8e03d4653231fc48a4342cc16dfa8019c5985 100644
--- a/src/main/java/net/minecraft/world/level/block/FenceGateBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/FenceGateBlock.java
@@ -54,7 +54,7 @@ public class FenceGateBlock extends HorizontalDirectionalBlock {
 
     @Override
     public VoxelShape getShape(BlockState state, BlockGetter world, BlockPos pos, CollisionContext context) {
-        return (Boolean) state.getValue(FenceGateBlock.IN_WALL) ? (((Direction) state.getValue(FenceGateBlock.FACING)).getAxis() == Direction.Axis.X ? FenceGateBlock.X_SHAPE_LOW : FenceGateBlock.Z_SHAPE_LOW) : (((Direction) state.getValue(FenceGateBlock.FACING)).getAxis() == Direction.Axis.X ? FenceGateBlock.X_SHAPE : FenceGateBlock.Z_SHAPE);
+        return ((Boolean) state.getValue(FenceGateBlock.IN_WALL)).booleanValue() ? (((Direction) state.getValue(FenceGateBlock.FACING)).getAxis() == Direction.Axis.X ? FenceGateBlock.X_SHAPE_LOW : FenceGateBlock.Z_SHAPE_LOW) : (((Direction) state.getValue(FenceGateBlock.FACING)).getAxis() == Direction.Axis.X ? FenceGateBlock.X_SHAPE : FenceGateBlock.Z_SHAPE);
     }
 
     @Override
@@ -77,23 +77,23 @@ public class FenceGateBlock extends HorizontalDirectionalBlock {
 
     @Override
     public VoxelShape getCollisionShape(BlockState state, BlockGetter world, BlockPos pos, CollisionContext context) {
-        return (Boolean) state.getValue(FenceGateBlock.OPEN) ? Shapes.empty() : (((Direction) state.getValue(FenceGateBlock.FACING)).getAxis() == Direction.Axis.Z ? FenceGateBlock.Z_COLLISION_SHAPE : FenceGateBlock.X_COLLISION_SHAPE);
+        return ((Boolean) state.getValue(FenceGateBlock.OPEN)).booleanValue() ? Shapes.empty() : (((Direction) state.getValue(FenceGateBlock.FACING)).getAxis() == Direction.Axis.Z ? FenceGateBlock.Z_COLLISION_SHAPE : FenceGateBlock.X_COLLISION_SHAPE);
     }
 
     @Override
     public VoxelShape getOcclusionShape(BlockState state, BlockGetter world, BlockPos pos) {
-        return (Boolean) state.getValue(FenceGateBlock.IN_WALL) ? (((Direction) state.getValue(FenceGateBlock.FACING)).getAxis() == Direction.Axis.X ? FenceGateBlock.X_OCCLUSION_SHAPE_LOW : FenceGateBlock.Z_OCCLUSION_SHAPE_LOW) : (((Direction) state.getValue(FenceGateBlock.FACING)).getAxis() == Direction.Axis.X ? FenceGateBlock.X_OCCLUSION_SHAPE : FenceGateBlock.Z_OCCLUSION_SHAPE);
+        return ((Boolean) state.getValue(FenceGateBlock.IN_WALL)).booleanValue() ? (((Direction) state.getValue(FenceGateBlock.FACING)).getAxis() == Direction.Axis.X ? FenceGateBlock.X_OCCLUSION_SHAPE_LOW : FenceGateBlock.Z_OCCLUSION_SHAPE_LOW) : (((Direction) state.getValue(FenceGateBlock.FACING)).getAxis() == Direction.Axis.X ? FenceGateBlock.X_OCCLUSION_SHAPE : FenceGateBlock.Z_OCCLUSION_SHAPE);
     }
 
     @Override
     public boolean isPathfindable(BlockState state, BlockGetter world, BlockPos pos, PathComputationType type) {
         switch (type) {
             case LAND:
-                return (Boolean) state.getValue(FenceGateBlock.OPEN);
+                return ((Boolean) state.getValue(FenceGateBlock.OPEN)).booleanValue();
             case WATER:
                 return false;
             case AIR:
-                return (Boolean) state.getValue(FenceGateBlock.OPEN);
+                return ((Boolean) state.getValue(FenceGateBlock.OPEN)).booleanValue();
             default:
                 return false;
         }
@@ -117,7 +117,7 @@ public class FenceGateBlock extends HorizontalDirectionalBlock {
 
     @Override
     public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
-        if ((Boolean) state.getValue(FenceGateBlock.OPEN)) {
+        if (((Boolean) state.getValue(FenceGateBlock.OPEN)).booleanValue()) {
             state = (BlockState) state.setValue(FenceGateBlock.OPEN, Boolean.FALSE);
             world.setBlock(pos, state, 10);
         } else {
@@ -131,7 +131,7 @@ public class FenceGateBlock extends HorizontalDirectionalBlock {
             world.setBlock(pos, state, 10);
         }
 
-        boolean flag = (Boolean) state.getValue(FenceGateBlock.OPEN);
+        boolean flag = ((Boolean) state.getValue(FenceGateBlock.OPEN)).booleanValue();
 
         world.playSound(player, pos, flag ? this.openSound : this.closeSound, SoundSource.BLOCKS, 1.0F, world.getRandom().nextFloat() * 0.1F + 0.9F);
         world.gameEvent((Entity) player, flag ? GameEvent.BLOCK_OPEN : GameEvent.BLOCK_CLOSE, pos);
@@ -143,7 +143,7 @@ public class FenceGateBlock extends HorizontalDirectionalBlock {
         if (!world.isClientSide) {
             boolean flag1 = world.hasNeighborSignal(pos);
             // CraftBukkit start
-            boolean oldPowered = state.getValue(FenceGateBlock.POWERED);
+            boolean oldPowered = state.<Boolean>getValue(FenceGateBlock.POWERED).booleanValue();
             if (oldPowered != flag1) {
                 int newPower = flag1 ? 15 : 0;
                 int oldPower = oldPowered ? 15 : 0;
@@ -154,9 +154,9 @@ public class FenceGateBlock extends HorizontalDirectionalBlock {
             }
             // CraftBukkit end
 
-            if ((Boolean) state.getValue(FenceGateBlock.POWERED) != flag1) {
+            if (((Boolean) state.getValue(FenceGateBlock.POWERED)).booleanValue() != flag1) {
                 world.setBlock(pos, (BlockState) ((BlockState) state.setValue(FenceGateBlock.POWERED, Boolean.valueOf(flag1))).setValue(FenceGateBlock.OPEN, Boolean.valueOf(flag1)), 2);
-                if ((Boolean) state.getValue(FenceGateBlock.OPEN) != flag1) {
+                if (((Boolean) state.getValue(FenceGateBlock.OPEN)).booleanValue() != flag1) {
                     world.playSound((Player) null, pos, flag1 ? this.openSound : this.closeSound, SoundSource.BLOCKS, 1.0F, world.getRandom().nextFloat() * 0.1F + 0.9F);
                     world.gameEvent((Entity) null, flag1 ? GameEvent.BLOCK_OPEN : GameEvent.BLOCK_CLOSE, pos);
                 }
diff --git a/src/main/java/net/minecraft/world/level/block/FireBlock.java b/src/main/java/net/minecraft/world/level/block/FireBlock.java
index fbfa4236a1d40c67711e453fd693d0124034fa8c..d109831b45244ff046f10ecf36549696026db174 100644
--- a/src/main/java/net/minecraft/world/level/block/FireBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/FireBlock.java
@@ -68,30 +68,30 @@ public class FireBlock extends BaseFireBlock {
         super(settings, 1.0F);
         this.registerDefaultState((BlockState) ((BlockState) ((BlockState) ((BlockState) ((BlockState) ((BlockState) ((BlockState) this.stateDefinition.any()).setValue(FireBlock.AGE, Integer.valueOf(0))).setValue(FireBlock.NORTH, Boolean.FALSE)).setValue(FireBlock.EAST, Boolean.FALSE)).setValue(FireBlock.SOUTH, Boolean.FALSE)).setValue(FireBlock.WEST, Boolean.FALSE)).setValue(FireBlock.UP, Boolean.FALSE));
         this.shapesCache = ImmutableMap.copyOf((Map) this.stateDefinition.getPossibleStates().stream().filter((iblockdata) -> {
-            return (Integer) iblockdata.getValue(FireBlock.AGE) == 0;
+            return ((Integer) iblockdata.getValue(FireBlock.AGE)).intValue() == 0;
         }).collect(Collectors.toMap(Function.identity(), FireBlock::calculateShape)));
     }
 
     private static VoxelShape calculateShape(BlockState state) {
         VoxelShape voxelshape = Shapes.empty();
 
-        if ((Boolean) state.getValue(FireBlock.UP)) {
+        if (((Boolean) state.getValue(FireBlock.UP)).booleanValue()) {
             voxelshape = FireBlock.UP_AABB;
         }
 
-        if ((Boolean) state.getValue(FireBlock.NORTH)) {
+        if (((Boolean) state.getValue(FireBlock.NORTH)).booleanValue()) {
             voxelshape = Shapes.or(voxelshape, FireBlock.NORTH_AABB);
         }
 
-        if ((Boolean) state.getValue(FireBlock.SOUTH)) {
+        if (((Boolean) state.getValue(FireBlock.SOUTH)).booleanValue()) {
             voxelshape = Shapes.or(voxelshape, FireBlock.SOUTH_AABB);
         }
 
-        if ((Boolean) state.getValue(FireBlock.EAST)) {
+        if (((Boolean) state.getValue(FireBlock.EAST)).booleanValue()) {
             voxelshape = Shapes.or(voxelshape, FireBlock.EAST_AABB);
         }
 
-        if ((Boolean) state.getValue(FireBlock.WEST)) {
+        if (((Boolean) state.getValue(FireBlock.WEST)).booleanValue()) {
             voxelshape = Shapes.or(voxelshape, FireBlock.WEST_AABB);
         }
 
@@ -101,7 +101,7 @@ public class FireBlock extends BaseFireBlock {
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
         // CraftBukkit start
-        if (!(world instanceof ServerLevel)) return this.canSurvive(state, world, pos) ? (BlockState) this.getStateWithAge(world, pos, (Integer) state.getValue(FireBlock.AGE)) : Blocks.AIR.defaultBlockState(); // Paper - don't fire events in world generation
+        if (!(world instanceof ServerLevel)) return this.canSurvive(state, world, pos) ? (BlockState) this.getStateWithAge(world, pos, ((Integer) state.getValue(FireBlock.AGE)).intValue()) : Blocks.AIR.defaultBlockState(); // Paper - don't fire events in world generation
         if (!this.canSurvive(state, world, pos)) {
             // Suppress during worldgen
             if (!(world instanceof Level)) {
@@ -117,7 +117,7 @@ public class FireBlock extends BaseFireBlock {
                 return blockState.getHandle();
             }
         }
-        return this.getStateWithAge(world, pos, (Integer) state.getValue(FireBlock.AGE)); // Paper - diff on change, see "don't fire events in world generation"
+        return this.getStateWithAge(world, pos, ((Integer) state.getValue(FireBlock.AGE)).intValue()); // Paper - diff on change, see "don't fire events in world generation"
         // CraftBukkit end
     }
 
@@ -172,7 +172,7 @@ public class FireBlock extends BaseFireBlock {
 
             BlockState iblockdata1 = world.getBlockState(pos.below());
             boolean flag = iblockdata1.is(world.dimensionType().infiniburn());
-            int i = (Integer) state.getValue(FireBlock.AGE);
+            int i = ((Integer) state.getValue(FireBlock.AGE)).intValue();
 
             if (!flag && world.isRaining() && this.isNearRain(world, pos) && random.nextFloat() < 0.2F + (float) i * 0.03F) {
                 fireExtinguished(world, pos); // CraftBukkit - extinguished by rain
@@ -262,11 +262,11 @@ public class FireBlock extends BaseFireBlock {
     }
 
     private int getBurnOdds(BlockState state) {
-        return state.hasProperty(BlockStateProperties.WATERLOGGED) && (Boolean) state.getValue(BlockStateProperties.WATERLOGGED) ? 0 : this.burnOdds.getInt(state.getBlock());
+        return state.hasProperty(BlockStateProperties.WATERLOGGED) && ((Boolean) state.getValue(BlockStateProperties.WATERLOGGED)).booleanValue() ? 0 : this.burnOdds.getInt(state.getBlock());
     }
 
     private int getIgniteOdds(BlockState state) {
-        return state.hasProperty(BlockStateProperties.WATERLOGGED) && (Boolean) state.getValue(BlockStateProperties.WATERLOGGED) ? 0 : this.igniteOdds.getInt(state.getBlock());
+        return state.hasProperty(BlockStateProperties.WATERLOGGED) && ((Boolean) state.getValue(BlockStateProperties.WATERLOGGED)).booleanValue() ? 0 : this.igniteOdds.getInt(state.getBlock());
     }
 
     private void trySpread(Level world, BlockPos blockposition, int i, RandomSource randomsource, int j, BlockPos sourceposition) { // CraftBukkit add sourceposition
diff --git a/src/main/java/net/minecraft/world/level/block/FrostedIceBlock.java b/src/main/java/net/minecraft/world/level/block/FrostedIceBlock.java
index a3af96b2518b41f370d09cfda26dc589b9ee977b..86240bb2f257438f37cfa0106a8a82ea3986120f 100644
--- a/src/main/java/net/minecraft/world/level/block/FrostedIceBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/FrostedIceBlock.java
@@ -33,7 +33,7 @@ public class FrostedIceBlock extends IceBlock {
     @Override
     public void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
         if (!world.paperConfig().environment.frostedIce.enabled) return; // Paper - add ability to disable frosted ice
-        if ((random.nextInt(3) == 0 || this.fewerNeigboursThan(world, pos, 4)) && world.getMaxLocalRawBrightness(pos) > 11 - state.getValue(AGE) - state.getLightBlock(world, pos) && this.slightlyMelt(state, world, pos)) {
+        if ((random.nextInt(3) == 0 || this.fewerNeigboursThan(world, pos, 4)) && world.getMaxLocalRawBrightness(pos) > 11 - state.<Integer>getValue(AGE).intValue() - state.getLightBlock(world, pos) && this.slightlyMelt(state, world, pos)) {
             BlockPos.MutableBlockPos mutableBlockPos = new BlockPos.MutableBlockPos();
 
             for(Direction direction : Direction.values()) {
@@ -51,7 +51,7 @@ public class FrostedIceBlock extends IceBlock {
     }
 
     private boolean slightlyMelt(BlockState state, Level world, BlockPos pos) {
-        int i = state.getValue(AGE);
+        int i = state.<Integer>getValue(AGE).intValue();
         if (i < 3) {
             world.setBlock(pos, state.setValue(AGE, Integer.valueOf(i + 1)), 2);
             return false;
diff --git a/src/main/java/net/minecraft/world/level/block/GrowingPlantHeadBlock.java b/src/main/java/net/minecraft/world/level/block/GrowingPlantHeadBlock.java
index ebe3598319e1d066d73ac943c30c28500dc08440..9bba5ea3f203d6e2823331142fa602f839c2e12f 100644
--- a/src/main/java/net/minecraft/world/level/block/GrowingPlantHeadBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/GrowingPlantHeadBlock.java
@@ -35,7 +35,7 @@ public abstract class GrowingPlantHeadBlock extends GrowingPlantBlock implements
 
     @Override
     public boolean isRandomlyTicking(BlockState state) {
-        return (Integer) state.getValue(GrowingPlantHeadBlock.AGE) < 25;
+        return ((Integer) state.getValue(GrowingPlantHeadBlock.AGE)).intValue() < 25;
     }
 
     @Override
@@ -51,7 +51,7 @@ public abstract class GrowingPlantHeadBlock extends GrowingPlantBlock implements
         } else {
             modifier = world.spigotConfig.caveVinesModifier;
         }
-        if ((Integer) state.getValue(GrowingPlantHeadBlock.AGE) < 25 && random.nextDouble() < ((modifier / 100.0D) * this.growPerTickProbability)) { // Spigot - SPIGOT-7159: Better modifier resolution
+        if (((Integer) state.getValue(GrowingPlantHeadBlock.AGE)).intValue() < 25 && random.nextDouble() < ((modifier / 100.0D) * this.growPerTickProbability)) { // Spigot - SPIGOT-7159: Better modifier resolution
             // Spigot end
             BlockPos blockposition1 = pos.relative(this.growthDirection);
 
@@ -77,7 +77,7 @@ public abstract class GrowingPlantHeadBlock extends GrowingPlantBlock implements
     }
 
     public boolean isMaxAge(BlockState state) {
-        return (Integer) state.getValue(GrowingPlantHeadBlock.AGE) == 25;
+        return ((Integer) state.getValue(GrowingPlantHeadBlock.AGE)).intValue() == 25;
     }
 
     protected BlockState updateBodyAfterConvertedFromHead(BlockState from, BlockState to) {
@@ -119,7 +119,7 @@ public abstract class GrowingPlantHeadBlock extends GrowingPlantBlock implements
     @Override
     public void performBonemeal(ServerLevel world, RandomSource random, BlockPos pos, BlockState state) {
         BlockPos blockposition1 = pos.relative(this.growthDirection);
-        int i = Math.min((Integer) state.getValue(GrowingPlantHeadBlock.AGE) + 1, 25);
+        int i = Math.min(((Integer) state.getValue(GrowingPlantHeadBlock.AGE)).intValue() + 1, 25);
         int j = this.getBlocksToGrowWhenBonemealed(random);
 
         for (int k = 0; k < j && this.canGrowInto(world.getBlockState(blockposition1)); ++k) {
diff --git a/src/main/java/net/minecraft/world/level/block/HopperBlock.java b/src/main/java/net/minecraft/world/level/block/HopperBlock.java
index 45224b264c7500a9d4342864cf67e7d1550c8103..fa7f8afefca850689e9c6303b9d7d2144a2aa209 100644
--- a/src/main/java/net/minecraft/world/level/block/HopperBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/HopperBlock.java
@@ -149,7 +149,7 @@ public class HopperBlock extends BaseEntityBlock {
 
     private void checkPoweredState(Level world, BlockPos pos, BlockState state) {
         boolean bl = !world.hasNeighborSignal(pos);
-        if (bl != state.getValue(ENABLED)) {
+        if (bl != state.<Boolean>getValue(ENABLED).booleanValue()) {
             world.setBlock(pos, state.setValue(ENABLED, Boolean.valueOf(bl)), 4);
         }
 
diff --git a/src/main/java/net/minecraft/world/level/block/JukeboxBlock.java b/src/main/java/net/minecraft/world/level/block/JukeboxBlock.java
index 1ac343e58bd66e3acb0b57004f8ea158e4a4c525..3c5d241b073a2b4a7a6a123c05d7dd74fee28abd 100644
--- a/src/main/java/net/minecraft/world/level/block/JukeboxBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/JukeboxBlock.java
@@ -49,7 +49,7 @@ public class JukeboxBlock extends BaseEntityBlock {
 
     @Override
     public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
-        if ((Boolean) state.getValue(JukeboxBlock.HAS_RECORD)) {
+        if (((Boolean) state.getValue(JukeboxBlock.HAS_RECORD)).booleanValue()) {
             this.dropRecording(world, pos);
             state = (BlockState) state.setValue(JukeboxBlock.HAS_RECORD, Boolean.FALSE);
             world.gameEvent(GameEvent.JUKEBOX_STOP_PLAY, pos, GameEvent.Context.of(state));
@@ -152,6 +152,6 @@ public class JukeboxBlock extends BaseEntityBlock {
     @Nullable
     @Override
     public <T extends BlockEntity> BlockEntityTicker<T> getTicker(Level world, BlockState state, BlockEntityType<T> type) {
-        return (Boolean) state.getValue(JukeboxBlock.HAS_RECORD) ? createTickerHelper(type, BlockEntityType.JUKEBOX, JukeboxBlockEntity::playRecordTick) : null;
+        return ((Boolean) state.getValue(JukeboxBlock.HAS_RECORD)).booleanValue() ? createTickerHelper(type, BlockEntityType.JUKEBOX, JukeboxBlockEntity::playRecordTick) : null;
     }
 }
diff --git a/src/main/java/net/minecraft/world/level/block/LayeredCauldronBlock.java b/src/main/java/net/minecraft/world/level/block/LayeredCauldronBlock.java
index fa6f68b3c1a01a564d73d71e4b4748f850230587..34f07bc5637b3676c63f122aca91cd0f4fdc7ea8 100644
--- a/src/main/java/net/minecraft/world/level/block/LayeredCauldronBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/LayeredCauldronBlock.java
@@ -45,7 +45,7 @@ public class LayeredCauldronBlock extends AbstractCauldronBlock {
 
     @Override
     public boolean isFull(BlockState state) {
-        return (Integer) state.getValue(LayeredCauldronBlock.LEVEL) == 3;
+        return ((Integer) state.getValue(LayeredCauldronBlock.LEVEL)).intValue() == 3;
     }
 
     @Override
@@ -55,7 +55,7 @@ public class LayeredCauldronBlock extends AbstractCauldronBlock {
 
     @Override
     protected double getContentHeight(BlockState state) {
-        return (6.0D + (double) (Integer) state.getValue(LayeredCauldronBlock.LEVEL) * 3.0D) / 16.0D;
+        return (6.0D + ((Integer) state.getValue(LayeredCauldronBlock.LEVEL)).doubleValue() * 3.0D) / 16.0D;
     }
 
     @Override
@@ -90,7 +90,7 @@ public class LayeredCauldronBlock extends AbstractCauldronBlock {
     }
 
     public static boolean lowerFillLevel(BlockState iblockdata, Level world, BlockPos blockposition, Entity entity, CauldronLevelChangeEvent.ChangeReason reason) {
-        int i = (Integer) iblockdata.getValue(LayeredCauldronBlock.LEVEL) - 1;
+        int i = ((Integer) iblockdata.getValue(LayeredCauldronBlock.LEVEL)).intValue() - 1;
         BlockState iblockdata1 = i == 0 ? Blocks.CAULDRON.defaultBlockState() : (BlockState) iblockdata.setValue(LayeredCauldronBlock.LEVEL, Integer.valueOf(i));
 
         return LayeredCauldronBlock.changeLevel(iblockdata, world, blockposition, iblockdata1, entity, reason);
@@ -117,7 +117,7 @@ public class LayeredCauldronBlock extends AbstractCauldronBlock {
 
     @Override
     public void handlePrecipitation(BlockState state, Level world, BlockPos pos, Biome.Precipitation precipitation) {
-        if (CauldronBlock.shouldHandlePrecipitation(world, precipitation) && (Integer) state.getValue(LayeredCauldronBlock.LEVEL) != 3 && this.fillPredicate.test(precipitation)) {
+        if (CauldronBlock.shouldHandlePrecipitation(world, precipitation) && ((Integer) state.getValue(LayeredCauldronBlock.LEVEL)).intValue() != 3 && this.fillPredicate.test(precipitation)) {
             BlockState iblockdata1 = (BlockState) state.cycle(LayeredCauldronBlock.LEVEL);
 
             LayeredCauldronBlock.changeLevel(state, world, pos, iblockdata1, null, CauldronLevelChangeEvent.ChangeReason.NATURAL_FILL); // CraftBukkit
@@ -126,7 +126,7 @@ public class LayeredCauldronBlock extends AbstractCauldronBlock {
 
     @Override
     public int getAnalogOutputSignal(BlockState state, Level world, BlockPos pos) {
-        return (Integer) state.getValue(LayeredCauldronBlock.LEVEL);
+        return ((Integer) state.getValue(LayeredCauldronBlock.LEVEL)).intValue();
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/LeavesBlock.java b/src/main/java/net/minecraft/world/level/block/LeavesBlock.java
index 07de3be0f4918343550850467f2ba5c6451d7359..e67a77c790af14509f3a3bf3aa2b5012511b3c7e 100644
--- a/src/main/java/net/minecraft/world/level/block/LeavesBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/LeavesBlock.java
@@ -43,7 +43,7 @@ public class LeavesBlock extends Block implements SimpleWaterloggedBlock {
 
     @Override
     public boolean isRandomlyTicking(BlockState state) {
-        return (Integer) state.getValue(LeavesBlock.DISTANCE) == 7 && !(Boolean) state.getValue(LeavesBlock.PERSISTENT);
+        return ((Integer) state.getValue(LeavesBlock.DISTANCE)).intValue() == 7 && !((Boolean) state.getValue(LeavesBlock.PERSISTENT)).booleanValue();
     }
 
     @Override
@@ -64,7 +64,7 @@ public class LeavesBlock extends Block implements SimpleWaterloggedBlock {
     }
 
     protected boolean decaying(BlockState state) {
-        return !(Boolean) state.getValue(LeavesBlock.PERSISTENT) && (Integer) state.getValue(LeavesBlock.DISTANCE) == 7;
+        return !((Boolean) state.getValue(LeavesBlock.PERSISTENT)).booleanValue() && ((Integer) state.getValue(LeavesBlock.DISTANCE)).intValue() == 7;
     }
 
     @Override
@@ -79,13 +79,13 @@ public class LeavesBlock extends Block implements SimpleWaterloggedBlock {
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
-        if ((Boolean) state.getValue(LeavesBlock.WATERLOGGED)) {
+        if (((Boolean) state.getValue(LeavesBlock.WATERLOGGED)).booleanValue()) {
             world.scheduleTick(pos, (Fluid) Fluids.WATER, Fluids.WATER.getTickDelay(world));
         }
 
         int i = LeavesBlock.getDistanceAt(neighborState) + 1;
 
-        if (i != 1 || (Integer) state.getValue(LeavesBlock.DISTANCE) != i) {
+        if (i != 1 || ((Integer) state.getValue(LeavesBlock.DISTANCE)).intValue() != i) {
             world.scheduleTick(pos, (Block) this, 1);
         }
 
@@ -112,12 +112,12 @@ public class LeavesBlock extends Block implements SimpleWaterloggedBlock {
     }
 
     private static int getDistanceAt(BlockState state) {
-        return state.is(BlockTags.LOGS) ? 0 : (state.getBlock() instanceof LeavesBlock ? (Integer) state.getValue(LeavesBlock.DISTANCE) : 7);
+        return state.is(BlockTags.LOGS) ? 0 : (state.getBlock() instanceof LeavesBlock ? ((Integer) state.getValue(LeavesBlock.DISTANCE)).intValue() : 7);
     }
 
     @Override
     public FluidState getFluidState(BlockState state) {
-        return (Boolean) state.getValue(LeavesBlock.WATERLOGGED) ? Fluids.WATER.getSource(false) : super.getFluidState(state);
+        return ((Boolean) state.getValue(LeavesBlock.WATERLOGGED)).booleanValue() ? Fluids.WATER.getSource(false) : super.getFluidState(state);
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/LecternBlock.java b/src/main/java/net/minecraft/world/level/block/LecternBlock.java
index b71fb668553b1d9fc387cd565de28ad17a4d2adf..612845a2d5242664b69e60ea761535d5ed207b76 100644
--- a/src/main/java/net/minecraft/world/level/block/LecternBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/LecternBlock.java
@@ -132,7 +132,7 @@ public class LecternBlock extends BaseEntityBlock {
     }
 
     public static boolean tryPlaceBook(@Nullable Player player, Level world, BlockPos pos, BlockState state, ItemStack stack) {
-        if (!(Boolean) state.getValue(LecternBlock.HAS_BOOK)) {
+        if (!((Boolean) state.getValue(LecternBlock.HAS_BOOK)).booleanValue()) {
             if (!world.isClientSide) {
                 LecternBlock.placeBook(player, world, pos, state, stack);
             }
@@ -185,11 +185,11 @@ public class LecternBlock extends BaseEntityBlock {
     @Override
     public void onRemove(BlockState state, Level world, BlockPos pos, BlockState newState, boolean moved) {
         if (!state.is(newState.getBlock())) {
-            if ((Boolean) state.getValue(LecternBlock.HAS_BOOK)) {
+            if (((Boolean) state.getValue(LecternBlock.HAS_BOOK)).booleanValue()) {
                 this.popBook(state, world, pos);
             }
 
-            if ((Boolean) state.getValue(LecternBlock.POWERED)) {
+            if (((Boolean) state.getValue(LecternBlock.POWERED)).booleanValue()) {
                 world.updateNeighborsAt(pos.below(), this);
             }
 
@@ -223,12 +223,12 @@ public class LecternBlock extends BaseEntityBlock {
 
     @Override
     public int getSignal(BlockState state, BlockGetter world, BlockPos pos, Direction direction) {
-        return (Boolean) state.getValue(LecternBlock.POWERED) ? 15 : 0;
+        return ((Boolean) state.getValue(LecternBlock.POWERED)).booleanValue() ? 15 : 0;
     }
 
     @Override
     public int getDirectSignal(BlockState state, BlockGetter world, BlockPos pos, Direction direction) {
-        return direction == Direction.UP && (Boolean) state.getValue(LecternBlock.POWERED) ? 15 : 0;
+        return direction == Direction.UP && ((Boolean) state.getValue(LecternBlock.POWERED)).booleanValue() ? 15 : 0;
     }
 
     @Override
@@ -238,7 +238,7 @@ public class LecternBlock extends BaseEntityBlock {
 
     @Override
     public int getAnalogOutputSignal(BlockState state, Level world, BlockPos pos) {
-        if ((Boolean) state.getValue(LecternBlock.HAS_BOOK)) {
+        if (((Boolean) state.getValue(LecternBlock.HAS_BOOK)).booleanValue()) {
             BlockEntity tileentity = world.getBlockEntity(pos);
 
             if (tileentity instanceof LecternBlockEntity) {
@@ -251,7 +251,7 @@ public class LecternBlock extends BaseEntityBlock {
 
     @Override
     public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
-        if ((Boolean) state.getValue(LecternBlock.HAS_BOOK)) {
+        if (((Boolean) state.getValue(LecternBlock.HAS_BOOK)).booleanValue()) {
             if (!world.isClientSide) {
                 this.openScreen(world, pos, player);
             }
@@ -267,7 +267,7 @@ public class LecternBlock extends BaseEntityBlock {
     @Nullable
     @Override
     public MenuProvider getMenuProvider(BlockState state, Level world, BlockPos pos) {
-        return !(Boolean) state.getValue(LecternBlock.HAS_BOOK) ? null : super.getMenuProvider(state, world, pos);
+        return !((Boolean) state.getValue(LecternBlock.HAS_BOOK)).booleanValue() ? null : super.getMenuProvider(state, world, pos);
     }
 
     private void openScreen(Level world, BlockPos pos, Player player) {
diff --git a/src/main/java/net/minecraft/world/level/block/LeverBlock.java b/src/main/java/net/minecraft/world/level/block/LeverBlock.java
index e6403be1ee798593e1e7014b50f212c06efdb2da..4306bb0270e73f248b3264a4df98add4d11a3b14 100644
--- a/src/main/java/net/minecraft/world/level/block/LeverBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/LeverBlock.java
@@ -86,14 +86,14 @@ public class LeverBlock extends FaceAttachedHorizontalDirectionalBlock {
 
         if (world.isClientSide) {
             iblockdata1 = (BlockState) state.cycle(LeverBlock.POWERED);
-            if ((Boolean) iblockdata1.getValue(LeverBlock.POWERED)) {
+            if (((Boolean) iblockdata1.getValue(LeverBlock.POWERED)).booleanValue()) {
                 LeverBlock.makeParticle(iblockdata1, world, pos, 1.0F);
             }
 
             return InteractionResult.SUCCESS;
         } else {
             // CraftBukkit start - Interact Lever
-            boolean powered = state.getValue(LeverBlock.POWERED); // Old powered state
+            boolean powered = state.<Boolean>getValue(LeverBlock.POWERED).booleanValue(); // Old powered state
             org.bukkit.block.Block block = world.getWorld().getBlockAt(pos.getX(), pos.getY(), pos.getZ());
             int old = (powered) ? 15 : 0;
             int current = (!powered) ? 15 : 0;
@@ -107,10 +107,10 @@ public class LeverBlock extends FaceAttachedHorizontalDirectionalBlock {
             // CraftBukkit end
 
             iblockdata1 = this.pull(state, world, pos);
-            float f = (Boolean) iblockdata1.getValue(LeverBlock.POWERED) ? 0.6F : 0.5F;
+            float f = ((Boolean) iblockdata1.getValue(LeverBlock.POWERED)).booleanValue() ? 0.6F : 0.5F;
 
             world.playSound((Player) null, pos, SoundEvents.LEVER_CLICK, SoundSource.BLOCKS, 0.3F, f);
-            world.gameEvent((Entity) player, (Boolean) iblockdata1.getValue(LeverBlock.POWERED) ? GameEvent.BLOCK_ACTIVATE : GameEvent.BLOCK_DEACTIVATE, pos);
+            world.gameEvent((Entity) player, ((Boolean) iblockdata1.getValue(LeverBlock.POWERED)).booleanValue() ? GameEvent.BLOCK_ACTIVATE : GameEvent.BLOCK_DEACTIVATE, pos);
             return InteractionResult.CONSUME;
         }
     }
@@ -134,7 +134,7 @@ public class LeverBlock extends FaceAttachedHorizontalDirectionalBlock {
 
     @Override
     public void animateTick(BlockState state, Level world, BlockPos pos, RandomSource random) {
-        if ((Boolean) state.getValue(LeverBlock.POWERED) && random.nextFloat() < 0.25F) {
+        if (((Boolean) state.getValue(LeverBlock.POWERED)).booleanValue() && random.nextFloat() < 0.25F) {
             LeverBlock.makeParticle(state, world, pos, 0.5F);
         }
 
@@ -143,7 +143,7 @@ public class LeverBlock extends FaceAttachedHorizontalDirectionalBlock {
     @Override
     public void onRemove(BlockState state, Level world, BlockPos pos, BlockState newState, boolean moved) {
         if (!moved && !state.is(newState.getBlock())) {
-            if ((Boolean) state.getValue(LeverBlock.POWERED)) {
+            if (((Boolean) state.getValue(LeverBlock.POWERED)).booleanValue()) {
                 this.updateNeighbours(state, world, pos);
             }
 
@@ -153,12 +153,12 @@ public class LeverBlock extends FaceAttachedHorizontalDirectionalBlock {
 
     @Override
     public int getSignal(BlockState state, BlockGetter world, BlockPos pos, Direction direction) {
-        return (Boolean) state.getValue(LeverBlock.POWERED) ? 15 : 0;
+        return ((Boolean) state.getValue(LeverBlock.POWERED)).booleanValue() ? 15 : 0;
     }
 
     @Override
     public int getDirectSignal(BlockState state, BlockGetter world, BlockPos pos, Direction direction) {
-        return (Boolean) state.getValue(LeverBlock.POWERED) && getConnectedDirection(state) == direction ? 15 : 0;
+        return ((Boolean) state.getValue(LeverBlock.POWERED)).booleanValue() && getConnectedDirection(state) == direction ? 15 : 0;
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/LightBlock.java b/src/main/java/net/minecraft/world/level/block/LightBlock.java
index 6eec44c484763f877aece6d9676ffc166bc10395..cc9b1024f509201db704f14743adbc62c1d02f13 100644
--- a/src/main/java/net/minecraft/world/level/block/LightBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/LightBlock.java
@@ -30,7 +30,7 @@ public class LightBlock extends Block implements SimpleWaterloggedBlock {
     public static final IntegerProperty LEVEL = BlockStateProperties.LEVEL;
     public static final BooleanProperty WATERLOGGED = BlockStateProperties.WATERLOGGED;
     public static final ToIntFunction<BlockState> LIGHT_EMISSION = (state) -> {
-        return state.getValue(LEVEL);
+        return state.<Integer>getValue(LEVEL).intValue();
     };
 
     public LightBlock(BlockBehaviour.Properties settings) {
@@ -76,7 +76,7 @@ public class LightBlock extends Block implements SimpleWaterloggedBlock {
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
-        if (state.getValue(WATERLOGGED)) {
+        if (state.<Boolean>getValue(WATERLOGGED).booleanValue()) {
             world.scheduleTick(pos, Fluids.WATER, Fluids.WATER.getTickDelay(world));
         }
 
@@ -85,7 +85,7 @@ public class LightBlock extends Block implements SimpleWaterloggedBlock {
 
     @Override
     public FluidState getFluidState(BlockState state) {
-        return state.getValue(WATERLOGGED) ? Fluids.WATER.getSource(false) : super.getFluidState(state);
+        return state.<Boolean>getValue(WATERLOGGED).booleanValue() ? Fluids.WATER.getSource(false) : super.getFluidState(state);
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/LightningRodBlock.java b/src/main/java/net/minecraft/world/level/block/LightningRodBlock.java
index 459cfad75908eb57ebf06e27c27fa0b7902f171f..50b9ac39487e02c0020d894ea47d02c4061f2756 100644
--- a/src/main/java/net/minecraft/world/level/block/LightningRodBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/LightningRodBlock.java
@@ -59,7 +59,7 @@ public class LightningRodBlock extends RodBlock implements SimpleWaterloggedBloc
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
-        if ((Boolean) state.getValue(LightningRodBlock.WATERLOGGED)) {
+        if (((Boolean) state.getValue(LightningRodBlock.WATERLOGGED)).booleanValue()) {
             world.scheduleTick(pos, (Fluid) Fluids.WATER, Fluids.WATER.getTickDelay(world));
         }
 
@@ -68,22 +68,22 @@ public class LightningRodBlock extends RodBlock implements SimpleWaterloggedBloc
 
     @Override
     public FluidState getFluidState(BlockState state) {
-        return (Boolean) state.getValue(LightningRodBlock.WATERLOGGED) ? Fluids.WATER.getSource(false) : super.getFluidState(state);
+        return ((Boolean) state.getValue(LightningRodBlock.WATERLOGGED)).booleanValue() ? Fluids.WATER.getSource(false) : super.getFluidState(state);
     }
 
     @Override
     public int getSignal(BlockState state, BlockGetter world, BlockPos pos, Direction direction) {
-        return (Boolean) state.getValue(LightningRodBlock.POWERED) ? 15 : 0;
+        return ((Boolean) state.getValue(LightningRodBlock.POWERED)).booleanValue() ? 15 : 0;
     }
 
     @Override
     public int getDirectSignal(BlockState state, BlockGetter world, BlockPos pos, Direction direction) {
-        return (Boolean) state.getValue(LightningRodBlock.POWERED) && state.getValue(LightningRodBlock.FACING) == direction ? 15 : 0;
+        return ((Boolean) state.getValue(LightningRodBlock.POWERED)).booleanValue() && state.getValue(LightningRodBlock.FACING) == direction ? 15 : 0;
     }
 
     public void onLightningStrike(BlockState state, Level world, BlockPos pos) {
         // CraftBukkit start
-        boolean powered = state.getValue(LightningRodBlock.POWERED);
+        boolean powered = state.<Boolean>getValue(LightningRodBlock.POWERED).booleanValue();
         int old = (powered) ? 15 : 0;
         int current = (!powered) ? 15 : 0;
 
@@ -120,7 +120,7 @@ public class LightningRodBlock extends RodBlock implements SimpleWaterloggedBloc
     @Override
     public void onRemove(BlockState state, Level world, BlockPos pos, BlockState newState, boolean moved) {
         if (!state.is(newState.getBlock())) {
-            if ((Boolean) state.getValue(LightningRodBlock.POWERED)) {
+            if (((Boolean) state.getValue(LightningRodBlock.POWERED)).booleanValue()) {
                 this.updateNeighbours(state, world, pos);
             }
 
@@ -131,7 +131,7 @@ public class LightningRodBlock extends RodBlock implements SimpleWaterloggedBloc
     @Override
     public void onPlace(BlockState state, Level world, BlockPos pos, BlockState oldState, boolean notify) {
         if (!state.is(oldState.getBlock())) {
-            if ((Boolean) state.getValue(LightningRodBlock.POWERED) && !world.getBlockTicks().hasScheduledTick(pos, this)) {
+            if (((Boolean) state.getValue(LightningRodBlock.POWERED)).booleanValue() && !world.getBlockTicks().hasScheduledTick(pos, this)) {
                 world.setBlock(pos, (BlockState) state.setValue(LightningRodBlock.POWERED, Boolean.FALSE), 18);
             }
 
diff --git a/src/main/java/net/minecraft/world/level/block/LiquidBlock.java b/src/main/java/net/minecraft/world/level/block/LiquidBlock.java
index 41febd891a1ddf0eadc8b5063b3f12d95e41eb18..01054d3819d6e0ad7ba723efb7bc31069e059c04 100644
--- a/src/main/java/net/minecraft/world/level/block/LiquidBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/LiquidBlock.java
@@ -53,7 +53,7 @@ public class LiquidBlock extends Block implements BucketPickup {
 
     @Override
     public VoxelShape getCollisionShape(BlockState state, BlockGetter world, BlockPos pos, CollisionContext context) {
-        return context.isAbove(LiquidBlock.STABLE_SHAPE, pos, true) && (Integer) state.getValue(LiquidBlock.LEVEL) == 0 && context.canStandOnFluid(world.getFluidState(pos.above()), state.getFluidState()) ? LiquidBlock.STABLE_SHAPE : Shapes.empty();
+        return context.isAbove(LiquidBlock.STABLE_SHAPE, pos, true) && ((Integer) state.getValue(LiquidBlock.LEVEL)).intValue() == 0 && context.canStandOnFluid(world.getFluidState(pos.above()), state.getFluidState()) ? LiquidBlock.STABLE_SHAPE : Shapes.empty();
     }
 
     @Override
@@ -78,7 +78,7 @@ public class LiquidBlock extends Block implements BucketPickup {
 
     @Override
     public FluidState getFluidState(BlockState state) {
-        int i = (Integer) state.getValue(LiquidBlock.LEVEL);
+        int i = ((Integer) state.getValue(LiquidBlock.LEVEL)).intValue();
 
         return (FluidState) this.stateCache.get(Math.min(i, 8));
     }
@@ -189,7 +189,7 @@ public class LiquidBlock extends Block implements BucketPickup {
 
     @Override
     public ItemStack pickupBlock(LevelAccessor world, BlockPos pos, BlockState state) {
-        if ((Integer) state.getValue(LiquidBlock.LEVEL) == 0) {
+        if (((Integer) state.getValue(LiquidBlock.LEVEL)).intValue() == 0) {
             world.setBlock(pos, Blocks.AIR.defaultBlockState(), 11);
             return new ItemStack(this.fluid.getBucket());
         } else {
diff --git a/src/main/java/net/minecraft/world/level/block/MultifaceSpreader.java b/src/main/java/net/minecraft/world/level/block/MultifaceSpreader.java
index 64ad4c2ed5529ae5538e32239953efe69d749658..46bb3eade972119bd42ad8add63db0383051a940 100644
--- a/src/main/java/net/minecraft/world/level/block/MultifaceSpreader.java
+++ b/src/main/java/net/minecraft/world/level/block/MultifaceSpreader.java
@@ -42,11 +42,11 @@ public class MultifaceSpreader {
     }
 
     public long spreadAll(BlockState state, LevelAccessor world, BlockPos pos, boolean markForPostProcessing) {
-        return (Long) Direction.stream().filter((enumdirection) -> {
+        return ((Long) Direction.stream().filter((enumdirection) -> {
             return this.config.canSpreadFrom(state, enumdirection);
         }).map((enumdirection) -> {
             return Long.valueOf(this.spreadFromFaceTowardAllDirections(state, world, pos, enumdirection, markForPostProcessing));
-        }).reduce(Long.valueOf(0L), Long::sum);
+        }).reduce(Long.valueOf(0L), Long::sum)).longValue();
     }
 
     public Optional<MultifaceSpreader.SpreadPos> spreadFromFaceTowardRandomDirection(BlockState state, LevelAccessor world, BlockPos pos, Direction direction, RandomSource random, boolean markForPostProcessing) {
diff --git a/src/main/java/net/minecraft/world/level/block/NetherWartBlock.java b/src/main/java/net/minecraft/world/level/block/NetherWartBlock.java
index 8f4c9920bdb3ef9e1150ec24675af4e4c37199f1..0e2e961fac06c6f55bbcddbdbcc245683cb2113a 100644
--- a/src/main/java/net/minecraft/world/level/block/NetherWartBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/NetherWartBlock.java
@@ -27,7 +27,7 @@ public class NetherWartBlock extends BushBlock {
 
     @Override
     public VoxelShape getShape(BlockState state, BlockGetter world, BlockPos pos, CollisionContext context) {
-        return NetherWartBlock.SHAPE_BY_AGE[(Integer) state.getValue(NetherWartBlock.AGE)];
+        return NetherWartBlock.SHAPE_BY_AGE[((Integer) state.getValue(NetherWartBlock.AGE)).intValue()];
     }
 
     @Override
@@ -37,12 +37,12 @@ public class NetherWartBlock extends BushBlock {
 
     @Override
     public boolean isRandomlyTicking(BlockState state) {
-        return (Integer) state.getValue(NetherWartBlock.AGE) < 3;
+        return ((Integer) state.getValue(NetherWartBlock.AGE)).intValue() < 3;
     }
 
     @Override
     public void randomTick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
-        int i = (Integer) state.getValue(NetherWartBlock.AGE);
+        int i = ((Integer) state.getValue(NetherWartBlock.AGE)).intValue();
 
         if (i < 3 && random.nextFloat() < (world.spigotConfig.wartModifier / (100.0f * 10))) { // Spigot - SPIGOT-7159: Better modifier resolution
             state = (BlockState) state.setValue(NetherWartBlock.AGE, Integer.valueOf(i + 1));
diff --git a/src/main/java/net/minecraft/world/level/block/NoteBlock.java b/src/main/java/net/minecraft/world/level/block/NoteBlock.java
index 2d2da0c9af7ba1e0878bc787fdbc7404274a73db..407b1f2c67965f5321738446bc4dc3a69a7b4ded 100644
--- a/src/main/java/net/minecraft/world/level/block/NoteBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/NoteBlock.java
@@ -74,7 +74,7 @@ public class NoteBlock extends Block {
     public void neighborChanged(BlockState state, Level world, BlockPos pos, Block sourceBlock, BlockPos sourcePos, boolean notify) {
         boolean flag1 = world.hasNeighborSignal(pos);
 
-        if (flag1 != (Boolean) state.getValue(NoteBlock.POWERED)) {
+        if (flag1 != ((Boolean) state.getValue(NoteBlock.POWERED)).booleanValue()) {
             if (flag1) {
                 this.playNote((Entity) null, state, world, pos);
                 state = world.getBlockState(pos); // CraftBukkit - SPIGOT-5617: update in case changed in event
@@ -124,7 +124,7 @@ public class NoteBlock extends Block {
     @Override
     public boolean triggerEvent(BlockState state, Level world, BlockPos pos, int type, int data) {
         // Paper start - move NotePlayEvent call to fix instrument/note changes
-        org.bukkit.event.block.NotePlayEvent event = org.bukkit.craftbukkit.event.CraftEventFactory.callNotePlayEvent(world, pos, state.getValue(INSTRUMENT), state.getValue(NOTE));
+        org.bukkit.event.block.NotePlayEvent event = org.bukkit.craftbukkit.event.CraftEventFactory.callNotePlayEvent(world, pos, state.getValue(INSTRUMENT), state.<Integer>getValue(NOTE).intValue());
         if (event.isCancelled()) return false;
         // Paper end
         NoteBlockInstrument blockpropertyinstrument = (NoteBlockInstrument) state.getValue(NoteBlock.INSTRUMENT);
diff --git a/src/main/java/net/minecraft/world/level/block/ObserverBlock.java b/src/main/java/net/minecraft/world/level/block/ObserverBlock.java
index 81b94545dcd2d2ca10222476c0f4291191679804..1e304735b1ae1daffc4fc492efe78cadf7aca238 100644
--- a/src/main/java/net/minecraft/world/level/block/ObserverBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/ObserverBlock.java
@@ -41,7 +41,7 @@ public class ObserverBlock extends DirectionalBlock {
 
     @Override
     public void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
-        if ((Boolean) state.getValue(ObserverBlock.POWERED)) {
+        if (((Boolean) state.getValue(ObserverBlock.POWERED)).booleanValue()) {
             // CraftBukkit start
             if (CraftEventFactory.callRedstoneChange(world, pos, 15, 0).getNewCurrent() != 0) {
                 return;
@@ -63,7 +63,7 @@ public class ObserverBlock extends DirectionalBlock {
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
-        if (state.getValue(ObserverBlock.FACING) == direction && !(Boolean) state.getValue(ObserverBlock.POWERED)) {
+        if (state.getValue(ObserverBlock.FACING) == direction && !((Boolean) state.getValue(ObserverBlock.POWERED)).booleanValue()) {
             this.startSignal(world, pos);
         }
 
@@ -97,13 +97,13 @@ public class ObserverBlock extends DirectionalBlock {
 
     @Override
     public int getSignal(BlockState state, BlockGetter world, BlockPos pos, Direction direction) {
-        return (Boolean) state.getValue(ObserverBlock.POWERED) && state.getValue(ObserverBlock.FACING) == direction ? 15 : 0;
+        return ((Boolean) state.getValue(ObserverBlock.POWERED)).booleanValue() && state.getValue(ObserverBlock.FACING) == direction ? 15 : 0;
     }
 
     @Override
     public void onPlace(BlockState state, Level world, BlockPos pos, BlockState oldState, boolean notify) {
         if (!state.is(oldState.getBlock())) {
-            if (!world.isClientSide() && (Boolean) state.getValue(ObserverBlock.POWERED) && !world.getBlockTicks().hasScheduledTick(pos, this)) {
+            if (!world.isClientSide() && ((Boolean) state.getValue(ObserverBlock.POWERED)).booleanValue() && !world.getBlockTicks().hasScheduledTick(pos, this)) {
                 BlockState iblockdata2 = (BlockState) state.setValue(ObserverBlock.POWERED, Boolean.FALSE);
 
                 world.setBlock(pos, iblockdata2, 18);
@@ -116,7 +116,7 @@ public class ObserverBlock extends DirectionalBlock {
     @Override
     public void onRemove(BlockState state, Level world, BlockPos pos, BlockState newState, boolean moved) {
         if (!state.is(newState.getBlock())) {
-            if (!world.isClientSide && (Boolean) state.getValue(ObserverBlock.POWERED) && world.getBlockTicks().hasScheduledTick(pos, this)) {
+            if (!world.isClientSide && ((Boolean) state.getValue(ObserverBlock.POWERED)).booleanValue() && world.getBlockTicks().hasScheduledTick(pos, this)) {
                 this.updateNeighborsInFront(world, pos, (BlockState) state.setValue(ObserverBlock.POWERED, Boolean.FALSE));
             }
 
diff --git a/src/main/java/net/minecraft/world/level/block/PointedDripstoneBlock.java b/src/main/java/net/minecraft/world/level/block/PointedDripstoneBlock.java
index 18fe68d11f58c3ec3663b25145ca4bc37eec8ce3..007829079d70e731411adfe06d9262f3edd87087 100644
--- a/src/main/java/net/minecraft/world/level/block/PointedDripstoneBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/PointedDripstoneBlock.java
@@ -97,7 +97,7 @@ public class PointedDripstoneBlock extends Block implements Fallable, SimpleWate
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
-        if ((Boolean) state.getValue(PointedDripstoneBlock.WATERLOGGED)) {
+        if (((Boolean) state.getValue(PointedDripstoneBlock.WATERLOGGED)).booleanValue()) {
             world.scheduleTick(pos, (Fluid) Fluids.WATER, Fluids.WATER.getTickDelay(world));
         }
 
@@ -264,7 +264,7 @@ public class PointedDripstoneBlock extends Block implements Fallable, SimpleWate
 
     @Override
     public FluidState getFluidState(BlockState state) {
-        return (Boolean) state.getValue(PointedDripstoneBlock.WATERLOGGED) ? Fluids.WATER.getSource(false) : super.getFluidState(state);
+        return ((Boolean) state.getValue(PointedDripstoneBlock.WATERLOGGED)).booleanValue() ? Fluids.WATER.getSource(false) : super.getFluidState(state);
     }
 
     @Override
@@ -503,7 +503,7 @@ public class PointedDripstoneBlock extends Block implements Fallable, SimpleWate
     }
 
     public static boolean canDrip(BlockState state) {
-        return PointedDripstoneBlock.isStalactite(state) && state.getValue(PointedDripstoneBlock.THICKNESS) == DripstoneThickness.TIP && !(Boolean) state.getValue(PointedDripstoneBlock.WATERLOGGED);
+        return PointedDripstoneBlock.isStalactite(state) && state.getValue(PointedDripstoneBlock.THICKNESS) == DripstoneThickness.TIP && !((Boolean) state.getValue(PointedDripstoneBlock.WATERLOGGED)).booleanValue();
     }
 
     private static boolean canTipGrow(BlockState state, ServerLevel world, BlockPos pos) {
diff --git a/src/main/java/net/minecraft/world/level/block/PoweredRailBlock.java b/src/main/java/net/minecraft/world/level/block/PoweredRailBlock.java
index 0a2d087b90fdfcda58b9c448506628827ab0f7e2..6819d3cb7a91887e733b1490473f3d0c95f4df3d 100644
--- a/src/main/java/net/minecraft/world/level/block/PoweredRailBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/PoweredRailBlock.java
@@ -104,13 +104,13 @@ public class PoweredRailBlock extends BaseRailBlock {
         } else {
             RailShape blockpropertytrackposition1 = (RailShape) iblockdata.getValue(PoweredRailBlock.SHAPE);
 
-            return shape == RailShape.EAST_WEST && (blockpropertytrackposition1 == RailShape.NORTH_SOUTH || blockpropertytrackposition1 == RailShape.ASCENDING_NORTH || blockpropertytrackposition1 == RailShape.ASCENDING_SOUTH) ? false : (shape == RailShape.NORTH_SOUTH && (blockpropertytrackposition1 == RailShape.EAST_WEST || blockpropertytrackposition1 == RailShape.ASCENDING_EAST || blockpropertytrackposition1 == RailShape.ASCENDING_WEST) ? false : ((Boolean) iblockdata.getValue(PoweredRailBlock.POWERED) ? (world.hasNeighborSignal(pos) ? true : this.findPoweredRailSignal(world, pos, iblockdata, flag, distance + 1)) : false));
+            return shape == RailShape.EAST_WEST && (blockpropertytrackposition1 == RailShape.NORTH_SOUTH || blockpropertytrackposition1 == RailShape.ASCENDING_NORTH || blockpropertytrackposition1 == RailShape.ASCENDING_SOUTH) ? false : (shape == RailShape.NORTH_SOUTH && (blockpropertytrackposition1 == RailShape.EAST_WEST || blockpropertytrackposition1 == RailShape.ASCENDING_EAST || blockpropertytrackposition1 == RailShape.ASCENDING_WEST) ? false : (((Boolean) iblockdata.getValue(PoweredRailBlock.POWERED)).booleanValue() ? (world.hasNeighborSignal(pos) ? true : this.findPoweredRailSignal(world, pos, iblockdata, flag, distance + 1)) : false));
         }
     }
 
     @Override
     protected void updateState(BlockState state, Level world, BlockPos pos, Block neighbor) {
-        boolean flag = (Boolean) state.getValue(PoweredRailBlock.POWERED);
+        boolean flag = ((Boolean) state.getValue(PoweredRailBlock.POWERED)).booleanValue();
         boolean flag1 = world.hasNeighborSignal(pos) || this.findPoweredRailSignal(world, pos, state, true, 0) || this.findPoweredRailSignal(world, pos, state, false, 0);
 
         if (flag1 != flag) {
diff --git a/src/main/java/net/minecraft/world/level/block/PressurePlateBlock.java b/src/main/java/net/minecraft/world/level/block/PressurePlateBlock.java
index c3f55d2fef921f67d22bb405c9b9fdb979437296..ab274e7b9faef014ce15766defb3813a7f71f4da 100644
--- a/src/main/java/net/minecraft/world/level/block/PressurePlateBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/PressurePlateBlock.java
@@ -35,7 +35,7 @@ public class PressurePlateBlock extends BasePressurePlateBlock {
 
     @Override
     protected int getSignalForState(BlockState state) {
-        return (Boolean) state.getValue(PressurePlateBlock.POWERED) ? 15 : 0;
+        return ((Boolean) state.getValue(PressurePlateBlock.POWERED)).booleanValue() ? 15 : 0;
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/RedStoneOreBlock.java b/src/main/java/net/minecraft/world/level/block/RedStoneOreBlock.java
index 6f8d0b7e2bb698e7e841c5e580b3752e368e87be..a6121bc6b1db1ec37dd68f14ab8db7c41faccb77 100644
--- a/src/main/java/net/minecraft/world/level/block/RedStoneOreBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/RedStoneOreBlock.java
@@ -77,7 +77,7 @@ public class RedStoneOreBlock extends Block {
 
     private static void interact(BlockState iblockdata, Level world, BlockPos blockposition, Entity entity) { // CraftBukkit - add Entity
         RedStoneOreBlock.spawnParticles(world, blockposition);
-        if (!(Boolean) iblockdata.getValue(RedStoneOreBlock.LIT)) {
+        if (!((Boolean) iblockdata.getValue(RedStoneOreBlock.LIT)).booleanValue()) {
             // CraftBukkit start
             if (CraftEventFactory.callEntityChangeBlockEvent(entity, blockposition, iblockdata.setValue(RedStoneOreBlock.LIT, Boolean.TRUE)).isCancelled()) {
                 return;
@@ -90,12 +90,12 @@ public class RedStoneOreBlock extends Block {
 
     @Override
     public boolean isRandomlyTicking(BlockState state) {
-        return (Boolean) state.getValue(RedStoneOreBlock.LIT);
+        return ((Boolean) state.getValue(RedStoneOreBlock.LIT)).booleanValue();
     }
 
     @Override
     public void randomTick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
-        if ((Boolean) state.getValue(RedStoneOreBlock.LIT)) {
+        if (((Boolean) state.getValue(RedStoneOreBlock.LIT)).booleanValue()) {
             // CraftBukkit start
             if (CraftEventFactory.callBlockFadeEvent(world, pos, state.setValue(RedStoneOreBlock.LIT, Boolean.FALSE)).isCancelled()) {
                 return;
@@ -127,7 +127,7 @@ public class RedStoneOreBlock extends Block {
 
     @Override
     public void animateTick(BlockState state, Level world, BlockPos pos, RandomSource random) {
-        if ((Boolean) state.getValue(RedStoneOreBlock.LIT)) {
+        if (((Boolean) state.getValue(RedStoneOreBlock.LIT)).booleanValue()) {
             RedStoneOreBlock.spawnParticles(world, pos);
         }
 
diff --git a/src/main/java/net/minecraft/world/level/block/RedStoneWireBlock.java b/src/main/java/net/minecraft/world/level/block/RedStoneWireBlock.java
index efb47e125c5ebe94ba4e4b3fa2f7006c2bfe195a..ed836873c2f3f49259606369a92c7baba3d35631 100644
--- a/src/main/java/net/minecraft/world/level/block/RedStoneWireBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/RedStoneWireBlock.java
@@ -78,7 +78,7 @@ public class RedStoneWireBlock extends Block {
         while (unmodifiableiterator.hasNext()) {
             BlockState iblockdata = (BlockState) unmodifiableiterator.next();
 
-            if ((Integer) iblockdata.getValue(RedStoneWireBlock.POWER) == 0) {
+            if (((Integer) iblockdata.getValue(RedStoneWireBlock.POWER)).intValue() == 0) {
                 RedStoneWireBlock.SHAPES_CACHE.put(iblockdata, this.calculateShape(iblockdata));
             }
         }
@@ -279,7 +279,7 @@ public class RedStoneWireBlock extends Block {
      */
     public BlockState calculateCurrentChanges(Level worldIn, BlockPos pos1, BlockPos pos2, BlockState state) {
         BlockState iblockstate = state;
-        int i = state.getValue(POWER);
+        int i = state.<Integer>getValue(POWER).intValue();
         int j = 0;
         j = this.getPower(j, worldIn.getBlockState(pos2));
         this.shouldSignal = false;
@@ -366,7 +366,7 @@ public class RedStoneWireBlock extends Block {
         int i = this.calculateTargetStrength(world, pos);
 
         // CraftBukkit start
-        int oldPower = (Integer) state.getValue(RedStoneWireBlock.POWER);
+        int oldPower = ((Integer) state.getValue(RedStoneWireBlock.POWER)).intValue();
         if (oldPower != i) {
             BlockRedstoneEvent event = new BlockRedstoneEvent(world.getWorld().getBlockAt(pos.getX(), pos.getY(), pos.getZ()), oldPower, i);
             world.getCraftServer().getPluginManager().callEvent(event);
@@ -433,7 +433,7 @@ public class RedStoneWireBlock extends Block {
 
     private int getPower(int min, BlockState iblockdata) { return Math.max(min, getWireSignal(iblockdata)); } // Paper - Optimize redstone
     private int getWireSignal(BlockState state) {
-        return state.is((Block) this) ? (Integer) state.getValue(RedStoneWireBlock.POWER) : 0;
+        return state.is((Block) this) ? ((Integer) state.getValue(RedStoneWireBlock.POWER)).intValue() : 0;
     }
 
     private void checkCornerChangeAt(Level world, BlockPos pos) {
@@ -551,7 +551,7 @@ public class RedStoneWireBlock extends Block {
     @Override
     public int getSignal(BlockState state, BlockGetter world, BlockPos pos, Direction direction) {
         if (this.shouldSignal && direction != Direction.DOWN) {
-            int i = (Integer) state.getValue(RedStoneWireBlock.POWER);
+            int i = ((Integer) state.getValue(RedStoneWireBlock.POWER)).intValue();
 
             return i == 0 ? 0 : (direction != Direction.UP && !((RedstoneSide) this.getConnectionState(world, state, pos).getValue((Property) RedStoneWireBlock.PROPERTY_BY_DIRECTION.get(direction.getOpposite()))).isConnected() ? 0 : i);
         } else {
@@ -602,7 +602,7 @@ public class RedStoneWireBlock extends Block {
 
     @Override
     public void animateTick(BlockState state, Level world, BlockPos pos, RandomSource random) {
-        int i = (Integer) state.getValue(RedStoneWireBlock.POWER);
+        int i = ((Integer) state.getValue(RedStoneWireBlock.POWER)).intValue();
 
         if (i != 0) {
             Iterator iterator = Direction.Plane.HORIZONTAL.iterator();
diff --git a/src/main/java/net/minecraft/world/level/block/RedstoneLampBlock.java b/src/main/java/net/minecraft/world/level/block/RedstoneLampBlock.java
index 36888e6dbfe205c416f61a95b1d6f35f3d2c21c7..a007f38f6a746791a433c7d390346b33020fad26 100644
--- a/src/main/java/net/minecraft/world/level/block/RedstoneLampBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/RedstoneLampBlock.java
@@ -30,7 +30,7 @@ public class RedstoneLampBlock extends Block {
     @Override
     public void neighborChanged(BlockState state, Level world, BlockPos pos, Block sourceBlock, BlockPos sourcePos, boolean notify) {
         if (!world.isClientSide) {
-            boolean flag1 = (Boolean) state.getValue(RedstoneLampBlock.LIT);
+            boolean flag1 = ((Boolean) state.getValue(RedstoneLampBlock.LIT)).booleanValue();
 
             if (flag1 != world.hasNeighborSignal(pos)) {
                 if (flag1) {
@@ -50,7 +50,7 @@ public class RedstoneLampBlock extends Block {
 
     @Override
     public void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
-        if ((Boolean) state.getValue(RedstoneLampBlock.LIT) && !world.hasNeighborSignal(pos)) {
+        if (((Boolean) state.getValue(RedstoneLampBlock.LIT)).booleanValue() && !world.hasNeighborSignal(pos)) {
             // CraftBukkit start
             if (CraftEventFactory.callRedstoneChange(world, pos, 15, 0).getNewCurrent() != 0) {
                 return;
diff --git a/src/main/java/net/minecraft/world/level/block/RedstoneTorchBlock.java b/src/main/java/net/minecraft/world/level/block/RedstoneTorchBlock.java
index a5ae191aa0052a1988b0627d126d04ef48719f67..790ba42638790924cec9faa0e81339f0fba06b61 100644
--- a/src/main/java/net/minecraft/world/level/block/RedstoneTorchBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/RedstoneTorchBlock.java
@@ -62,7 +62,7 @@ public class RedstoneTorchBlock extends TorchBlock {
 
     @Override
     public int getSignal(BlockState state, BlockGetter world, BlockPos pos, Direction direction) {
-        return (Boolean) state.getValue(RedstoneTorchBlock.LIT) && Direction.UP != direction ? 15 : 0;
+        return ((Boolean) state.getValue(RedstoneTorchBlock.LIT)).booleanValue() && Direction.UP != direction ? 15 : 0;
     }
 
     protected boolean hasNeighborSignal(Level world, BlockPos pos, BlockState state) {
@@ -89,7 +89,7 @@ public class RedstoneTorchBlock extends TorchBlock {
 
         BlockRedstoneEvent event = new BlockRedstoneEvent(block, oldCurrent, oldCurrent);
         // CraftBukkit end
-        if ((Boolean) state.getValue(RedstoneTorchBlock.LIT)) {
+        if (((Boolean) state.getValue(RedstoneTorchBlock.LIT)).booleanValue()) {
             if (flag) {
                 // CraftBukkit start
                 if (oldCurrent != 0) {
@@ -123,7 +123,7 @@ public class RedstoneTorchBlock extends TorchBlock {
 
     @Override
     public void neighborChanged(BlockState state, Level world, BlockPos pos, Block sourceBlock, BlockPos sourcePos, boolean notify) {
-        if ((Boolean) state.getValue(RedstoneTorchBlock.LIT) == this.hasNeighborSignal(world, pos, state) && !world.getBlockTicks().willTickThisTick(pos, this)) {
+        if (((Boolean) state.getValue(RedstoneTorchBlock.LIT)).booleanValue() == this.hasNeighborSignal(world, pos, state) && !world.getBlockTicks().willTickThisTick(pos, this)) {
             world.scheduleTick(pos, (Block) this, 2);
         }
 
@@ -141,7 +141,7 @@ public class RedstoneTorchBlock extends TorchBlock {
 
     @Override
     public void animateTick(BlockState state, Level world, BlockPos pos, RandomSource random) {
-        if ((Boolean) state.getValue(RedstoneTorchBlock.LIT)) {
+        if (((Boolean) state.getValue(RedstoneTorchBlock.LIT)).booleanValue()) {
             double d0 = (double) pos.getX() + 0.5D + (random.nextDouble() - 0.5D) * 0.2D;
             double d1 = (double) pos.getY() + 0.7D + (random.nextDouble() - 0.5D) * 0.2D;
             double d2 = (double) pos.getZ() + 0.5D + (random.nextDouble() - 0.5D) * 0.2D;
diff --git a/src/main/java/net/minecraft/world/level/block/RespawnAnchorBlock.java b/src/main/java/net/minecraft/world/level/block/RespawnAnchorBlock.java
index 865dc91ce16fb75be4f7367c7c90ad48666572ed..7edf54cba74779b875b004a8a9928a88f786edd6 100644
--- a/src/main/java/net/minecraft/world/level/block/RespawnAnchorBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/RespawnAnchorBlock.java
@@ -60,7 +60,7 @@ public class RespawnAnchorBlock extends Block {
             }
 
             return InteractionResult.sidedSuccess(world.isClientSide);
-        } else if (state.getValue(CHARGE) == 0) {
+        } else if (state.<Integer>getValue(CHARGE).intValue() == 0) {
             return InteractionResult.PASS;
         } else if (!canSetSpawn(world)) {
             if (!world.isClientSide) {
@@ -92,7 +92,7 @@ public class RespawnAnchorBlock extends Block {
     }
 
     private static boolean canBeCharged(BlockState state) {
-        return state.getValue(CHARGE) < 4;
+        return state.<Integer>getValue(CHARGE).intValue() < 4;
     }
 
     private static boolean isWaterThatWouldFlow(BlockPos pos, Level world) {
@@ -134,13 +134,13 @@ public class RespawnAnchorBlock extends Block {
     }
 
     public static void charge(Level world, BlockPos pos, BlockState state) {
-        world.setBlock(pos, state.setValue(CHARGE, Integer.valueOf(state.getValue(CHARGE) + 1)), 3);
+        world.setBlock(pos, state.setValue(CHARGE, Integer.valueOf(state.<Integer>getValue(CHARGE).intValue() + 1)), 3);
         world.playSound((Player)null, (double)pos.getX() + 0.5D, (double)pos.getY() + 0.5D, (double)pos.getZ() + 0.5D, SoundEvents.RESPAWN_ANCHOR_CHARGE, SoundSource.BLOCKS, 1.0F, 1.0F);
     }
 
     @Override
     public void animateTick(BlockState state, Level world, BlockPos pos, RandomSource random) {
-        if (state.getValue(CHARGE) != 0) {
+        if (state.<Integer>getValue(CHARGE).intValue() != 0) {
             if (random.nextInt(100) == 0) {
                 world.playSound((Player)null, (double)pos.getX() + 0.5D, (double)pos.getY() + 0.5D, (double)pos.getZ() + 0.5D, SoundEvents.RESPAWN_ANCHOR_AMBIENT, SoundSource.BLOCKS, 1.0F, 1.0F);
             }
@@ -164,7 +164,7 @@ public class RespawnAnchorBlock extends Block {
     }
 
     public static int getScaledChargeLevel(BlockState state, int maxLevel) {
-        return Mth.floor((float)(state.getValue(CHARGE) - 0) / 4.0F * (float)maxLevel);
+        return Mth.floor((float)(state.<Integer>getValue(CHARGE).intValue() - 0) / 4.0F * (float)maxLevel);
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/SaplingBlock.java b/src/main/java/net/minecraft/world/level/block/SaplingBlock.java
index 50aff2d3a74ce333e046b5515b15872e19f69aa9..d92e44db224b28492fa5e6af231812d6d2cd3b67 100644
--- a/src/main/java/net/minecraft/world/level/block/SaplingBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/SaplingBlock.java
@@ -48,7 +48,7 @@ public class SaplingBlock extends BushBlock implements BonemealableBlock {
     }
 
     public void advanceTree(ServerLevel world, BlockPos pos, net.minecraft.world.level.block.state.BlockState state, RandomSource random) {
-        if ((Integer) state.getValue(SaplingBlock.STAGE) == 0) {
+        if (((Integer) state.getValue(SaplingBlock.STAGE)).intValue() == 0) {
             world.setBlock(pos, (net.minecraft.world.level.block.state.BlockState) state.cycle(SaplingBlock.STAGE), 4);
         } else {
             // CraftBukkit start
diff --git a/src/main/java/net/minecraft/world/level/block/ScaffoldingBlock.java b/src/main/java/net/minecraft/world/level/block/ScaffoldingBlock.java
index 2dae1f0cf62e08f6a2cf62b8b6fdf04cdb54ade6..b562277251c4ca02abe990e8e7be462966de6d55 100644
--- a/src/main/java/net/minecraft/world/level/block/ScaffoldingBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/ScaffoldingBlock.java
@@ -48,7 +48,7 @@ public class ScaffoldingBlock extends Block implements SimpleWaterloggedBlock {
 
     @Override
     public VoxelShape getShape(BlockState state, BlockGetter world, BlockPos pos, CollisionContext context) {
-        return !context.isHoldingItem(state.getBlock().asItem()) ? ((Boolean) state.getValue(ScaffoldingBlock.BOTTOM) ? ScaffoldingBlock.UNSTABLE_SHAPE : ScaffoldingBlock.STABLE_SHAPE) : Shapes.block();
+        return !context.isHoldingItem(state.getBlock().asItem()) ? (((Boolean) state.getValue(ScaffoldingBlock.BOTTOM)).booleanValue() ? ScaffoldingBlock.UNSTABLE_SHAPE : ScaffoldingBlock.STABLE_SHAPE) : Shapes.block();
     }
 
     @Override
@@ -80,7 +80,7 @@ public class ScaffoldingBlock extends Block implements SimpleWaterloggedBlock {
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
-        if ((Boolean) state.getValue(ScaffoldingBlock.WATERLOGGED)) {
+        if (((Boolean) state.getValue(ScaffoldingBlock.WATERLOGGED)).booleanValue()) {
             world.scheduleTick(pos, (Fluid) Fluids.WATER, Fluids.WATER.getTickDelay(world));
         }
 
@@ -96,8 +96,8 @@ public class ScaffoldingBlock extends Block implements SimpleWaterloggedBlock {
         int i = ScaffoldingBlock.getDistance(world, pos);
         BlockState iblockdata1 = (BlockState) ((BlockState) state.setValue(ScaffoldingBlock.DISTANCE, Integer.valueOf(i))).setValue(ScaffoldingBlock.BOTTOM, Boolean.valueOf(this.isBottom(world, pos, i)));
 
-        if ((Integer) iblockdata1.getValue(ScaffoldingBlock.DISTANCE) == 7 && !org.bukkit.craftbukkit.event.CraftEventFactory.callBlockFadeEvent(world, pos, Blocks.AIR.defaultBlockState()).isCancelled()) { // CraftBukkit - BlockFadeEvent
-            if ((Integer) state.getValue(ScaffoldingBlock.DISTANCE) == 7) {
+        if (((Integer) iblockdata1.getValue(ScaffoldingBlock.DISTANCE)).intValue() == 7 && !org.bukkit.craftbukkit.event.CraftEventFactory.callBlockFadeEvent(world, pos, Blocks.AIR.defaultBlockState()).isCancelled()) { // CraftBukkit - BlockFadeEvent
+            if (((Integer) state.getValue(ScaffoldingBlock.DISTANCE)).intValue() == 7) {
                 FallingBlockEntity.fall(world, pos, iblockdata1);
             } else {
                 world.destroyBlock(pos, true);
@@ -115,12 +115,12 @@ public class ScaffoldingBlock extends Block implements SimpleWaterloggedBlock {
 
     @Override
     public VoxelShape getCollisionShape(BlockState state, BlockGetter world, BlockPos pos, CollisionContext context) {
-        return context.isAbove(Shapes.block(), pos, true) && !context.isDescending() ? ScaffoldingBlock.STABLE_SHAPE : ((Integer) state.getValue(ScaffoldingBlock.DISTANCE) != 0 && (Boolean) state.getValue(ScaffoldingBlock.BOTTOM) && context.isAbove(ScaffoldingBlock.BELOW_BLOCK, pos, true) ? ScaffoldingBlock.UNSTABLE_SHAPE_BOTTOM : Shapes.empty());
+        return context.isAbove(Shapes.block(), pos, true) && !context.isDescending() ? ScaffoldingBlock.STABLE_SHAPE : (((Integer) state.getValue(ScaffoldingBlock.DISTANCE)).intValue() != 0 && ((Boolean) state.getValue(ScaffoldingBlock.BOTTOM)).booleanValue() && context.isAbove(ScaffoldingBlock.BELOW_BLOCK, pos, true) ? ScaffoldingBlock.UNSTABLE_SHAPE_BOTTOM : Shapes.empty());
     }
 
     @Override
     public FluidState getFluidState(BlockState state) {
-        return (Boolean) state.getValue(ScaffoldingBlock.WATERLOGGED) ? Fluids.WATER.getSource(false) : super.getFluidState(state);
+        return ((Boolean) state.getValue(ScaffoldingBlock.WATERLOGGED)).booleanValue() ? Fluids.WATER.getSource(false) : super.getFluidState(state);
     }
 
     private boolean isBottom(BlockGetter world, BlockPos pos, int distance) {
@@ -133,7 +133,7 @@ public class ScaffoldingBlock extends Block implements SimpleWaterloggedBlock {
         int i = 7;
 
         if (iblockdata.is(Blocks.SCAFFOLDING)) {
-            i = (Integer) iblockdata.getValue(ScaffoldingBlock.DISTANCE);
+            i = ((Integer) iblockdata.getValue(ScaffoldingBlock.DISTANCE)).intValue();
         } else if (iblockdata.isFaceSturdy(world, blockposition_mutableblockposition, Direction.UP)) {
             return 0;
         }
@@ -145,7 +145,7 @@ public class ScaffoldingBlock extends Block implements SimpleWaterloggedBlock {
             BlockState iblockdata1 = world.getBlockState(blockposition_mutableblockposition.setWithOffset(pos, enumdirection));
 
             if (iblockdata1.is(Blocks.SCAFFOLDING)) {
-                i = Math.min(i, (Integer) iblockdata1.getValue(ScaffoldingBlock.DISTANCE) + 1);
+                i = Math.min(i, ((Integer) iblockdata1.getValue(ScaffoldingBlock.DISTANCE)).intValue() + 1);
                 if (i == 1) {
                     break;
                 }
diff --git a/src/main/java/net/minecraft/world/level/block/SculkCatalystBlock.java b/src/main/java/net/minecraft/world/level/block/SculkCatalystBlock.java
index 5373c263214f82eca0de09c0a3cde7dc36cb6cad..613dbbbf57cca2e748507ea651bfcf192bcb75b1 100644
--- a/src/main/java/net/minecraft/world/level/block/SculkCatalystBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/SculkCatalystBlock.java
@@ -41,7 +41,7 @@ public class SculkCatalystBlock extends BaseEntityBlock {
 
     @Override
     public void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
-        if ((Boolean) state.getValue(SculkCatalystBlock.PULSE)) {
+        if (((Boolean) state.getValue(SculkCatalystBlock.PULSE)).booleanValue()) {
             world.setBlock(pos, (BlockState) state.setValue(SculkCatalystBlock.PULSE, Boolean.FALSE), 3);
         }
 
diff --git a/src/main/java/net/minecraft/world/level/block/SculkSensorBlock.java b/src/main/java/net/minecraft/world/level/block/SculkSensorBlock.java
index 72c2e04f9e3056f52419da30bf74c3539b9fdb92..66d318607ed4477a1f34ed7cb5b8d89d80666605 100644
--- a/src/main/java/net/minecraft/world/level/block/SculkSensorBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/SculkSensorBlock.java
@@ -73,7 +73,7 @@ public class SculkSensorBlock extends BaseEntityBlock implements SimpleWaterlogg
 
     @Override
     public FluidState getFluidState(BlockState state) {
-        return (Boolean) state.getValue(SculkSensorBlock.WATERLOGGED) ? Fluids.WATER.getSource(false) : super.getFluidState(state);
+        return ((Boolean) state.getValue(SculkSensorBlock.WATERLOGGED)).booleanValue() ? Fluids.WATER.getSource(false) : super.getFluidState(state);
     }
 
     @Override
@@ -122,7 +122,7 @@ public class SculkSensorBlock extends BaseEntityBlock implements SimpleWaterlogg
     @Override
     public void onPlace(BlockState state, Level world, BlockPos pos, BlockState oldState, boolean notify) {
         if (!world.isClientSide() && !state.is(oldState.getBlock())) {
-            if ((Integer) state.getValue(SculkSensorBlock.POWER) > 0 && !world.getBlockTicks().hasScheduledTick(pos, this)) {
+            if (((Integer) state.getValue(SculkSensorBlock.POWER)).intValue() > 0 && !world.getBlockTicks().hasScheduledTick(pos, this)) {
                 world.setBlock(pos, (BlockState) state.setValue(SculkSensorBlock.POWER, Integer.valueOf(0)), 18);
             }
 
@@ -143,7 +143,7 @@ public class SculkSensorBlock extends BaseEntityBlock implements SimpleWaterlogg
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
-        if ((Boolean) state.getValue(SculkSensorBlock.WATERLOGGED)) {
+        if (((Boolean) state.getValue(SculkSensorBlock.WATERLOGGED)).booleanValue()) {
             world.scheduleTick(pos, (Fluid) Fluids.WATER, Fluids.WATER.getTickDelay(world));
         }
 
@@ -192,7 +192,7 @@ public class SculkSensorBlock extends BaseEntityBlock implements SimpleWaterlogg
 
     @Override
     public int getSignal(BlockState state, BlockGetter world, BlockPos pos, Direction direction) {
-        return (Integer) state.getValue(SculkSensorBlock.POWER);
+        return ((Integer) state.getValue(SculkSensorBlock.POWER)).intValue();
     }
 
     public static SculkSensorPhase getPhase(BlockState state) {
@@ -205,7 +205,7 @@ public class SculkSensorBlock extends BaseEntityBlock implements SimpleWaterlogg
 
     public static void deactivate(Level world, BlockPos pos, BlockState state) {
         // CraftBukkit start
-        BlockRedstoneEvent eventRedstone = new BlockRedstoneEvent(CraftBlock.at(world, pos), state.getValue(SculkSensorBlock.POWER), 0);
+        BlockRedstoneEvent eventRedstone = new BlockRedstoneEvent(CraftBlock.at(world, pos), state.<Integer>getValue(SculkSensorBlock.POWER).intValue(), 0);
         world.getCraftServer().getPluginManager().callEvent(eventRedstone);
 
         if (eventRedstone.getNewCurrent() > 0) {
@@ -215,7 +215,7 @@ public class SculkSensorBlock extends BaseEntityBlock implements SimpleWaterlogg
         // CraftBukkit end
         world.setBlock(pos, (BlockState) ((BlockState) state.setValue(SculkSensorBlock.PHASE, SculkSensorPhase.COOLDOWN)).setValue(SculkSensorBlock.POWER, Integer.valueOf(0)), 3);
         world.scheduleTick(pos, state.getBlock(), 1);
-        if (!(Boolean) state.getValue(SculkSensorBlock.WATERLOGGED)) {
+        if (!((Boolean) state.getValue(SculkSensorBlock.WATERLOGGED)).booleanValue()) {
             world.playSound((Player) null, pos, SoundEvents.SCULK_CLICKING_STOP, SoundSource.BLOCKS, 1.0F, world.random.nextFloat() * 0.2F + 0.8F);
         }
 
@@ -224,7 +224,7 @@ public class SculkSensorBlock extends BaseEntityBlock implements SimpleWaterlogg
 
     public static void activate(@Nullable Entity entity, Level world, BlockPos pos, BlockState state, int power) {
         // CraftBukkit start
-        BlockRedstoneEvent eventRedstone = new BlockRedstoneEvent(CraftBlock.at(world, pos), state.getValue(SculkSensorBlock.POWER), power);
+        BlockRedstoneEvent eventRedstone = new BlockRedstoneEvent(CraftBlock.at(world, pos), state.<Integer>getValue(SculkSensorBlock.POWER).intValue(), power);
         world.getCraftServer().getPluginManager().callEvent(eventRedstone);
 
         if (eventRedstone.getNewCurrent() <= 0) {
@@ -236,7 +236,7 @@ public class SculkSensorBlock extends BaseEntityBlock implements SimpleWaterlogg
         world.scheduleTick(pos, state.getBlock(), 40);
         SculkSensorBlock.updateNeighbours(world, pos);
         world.gameEvent(entity, GameEvent.SCULK_SENSOR_TENDRILS_CLICKING, pos);
-        if (!(Boolean) state.getValue(SculkSensorBlock.WATERLOGGED)) {
+        if (!((Boolean) state.getValue(SculkSensorBlock.WATERLOGGED)).booleanValue()) {
             world.playSound((Player) null, (double) pos.getX() + 0.5D, (double) pos.getY() + 0.5D, (double) pos.getZ() + 0.5D, SoundEvents.SCULK_CLICKING, SoundSource.BLOCKS, 1.0F, world.random.nextFloat() * 0.2F + 0.8F);
         }
 
diff --git a/src/main/java/net/minecraft/world/level/block/SculkShriekerBlock.java b/src/main/java/net/minecraft/world/level/block/SculkShriekerBlock.java
index 476a38de43fecaf21e03841e4ad274a6ab8f2f70..c4d1f9266372488a07269957d000e9b6151304b9 100644
--- a/src/main/java/net/minecraft/world/level/block/SculkShriekerBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/SculkShriekerBlock.java
@@ -71,7 +71,7 @@ public class SculkShriekerBlock extends BaseEntityBlock implements SimpleWaterlo
         if (world instanceof ServerLevel) {
             ServerLevel worldserver = (ServerLevel) world;
 
-            if ((Boolean) state.getValue(SculkShriekerBlock.SHRIEKING) && !state.is(newState.getBlock())) {
+            if (((Boolean) state.getValue(SculkShriekerBlock.SHRIEKING)).booleanValue() && !state.is(newState.getBlock())) {
                 worldserver.getBlockEntity(pos, BlockEntityType.SCULK_SHRIEKER).ifPresent((sculkshriekerblockentity) -> {
                     sculkshriekerblockentity.tryRespond(worldserver);
                 });
@@ -83,7 +83,7 @@ public class SculkShriekerBlock extends BaseEntityBlock implements SimpleWaterlo
 
     @Override
     public void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
-        if ((Boolean) state.getValue(SculkShriekerBlock.SHRIEKING)) {
+        if (((Boolean) state.getValue(SculkShriekerBlock.SHRIEKING)).booleanValue()) {
             world.setBlock(pos, (BlockState) state.setValue(SculkShriekerBlock.SHRIEKING, Boolean.FALSE), 3);
             world.getBlockEntity(pos, BlockEntityType.SCULK_SHRIEKER).ifPresent((sculkshriekerblockentity) -> {
                 sculkshriekerblockentity.tryRespond(world);
@@ -120,7 +120,7 @@ public class SculkShriekerBlock extends BaseEntityBlock implements SimpleWaterlo
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
-        if ((Boolean) state.getValue(SculkShriekerBlock.WATERLOGGED)) {
+        if (((Boolean) state.getValue(SculkShriekerBlock.WATERLOGGED)).booleanValue()) {
             world.scheduleTick(pos, (Fluid) Fluids.WATER, Fluids.WATER.getTickDelay(world));
         }
 
@@ -135,7 +135,7 @@ public class SculkShriekerBlock extends BaseEntityBlock implements SimpleWaterlo
 
     @Override
     public FluidState getFluidState(BlockState state) {
-        return (Boolean) state.getValue(SculkShriekerBlock.WATERLOGGED) ? Fluids.WATER.getSource(false) : super.getFluidState(state);
+        return ((Boolean) state.getValue(SculkShriekerBlock.WATERLOGGED)).booleanValue() ? Fluids.WATER.getSource(false) : super.getFluidState(state);
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/SculkVeinBlock.java b/src/main/java/net/minecraft/world/level/block/SculkVeinBlock.java
index 8b120b6c6d9a6e83cf8033ad7eaca7dd32aa9ddf..d32d33f41e0572614738ff04766241b17bb76dc3 100644
--- a/src/main/java/net/minecraft/world/level/block/SculkVeinBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/SculkVeinBlock.java
@@ -85,7 +85,7 @@ public class SculkVeinBlock extends MultifaceBlock implements SculkBehaviour, Si
                 Direction enumdirection = aenumdirection[j];
                 BooleanProperty blockstateboolean = getFaceProperty(enumdirection);
 
-                if ((Boolean) state.getValue(blockstateboolean) && world.getBlockState(pos.relative(enumdirection)).is(Blocks.SCULK)) {
+                if (((Boolean) state.getValue(blockstateboolean)).booleanValue() && world.getBlockState(pos.relative(enumdirection)).is(Blocks.SCULK)) {
                     state = (BlockState) state.setValue(blockstateboolean, Boolean.FALSE);
                 }
             }
@@ -176,7 +176,7 @@ public class SculkVeinBlock extends MultifaceBlock implements SculkBehaviour, Si
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
-        if ((Boolean) state.getValue(SculkVeinBlock.WATERLOGGED)) {
+        if (((Boolean) state.getValue(SculkVeinBlock.WATERLOGGED)).booleanValue()) {
             world.scheduleTick(pos, (Fluid) Fluids.WATER, Fluids.WATER.getTickDelay(world));
         }
 
@@ -196,7 +196,7 @@ public class SculkVeinBlock extends MultifaceBlock implements SculkBehaviour, Si
 
     @Override
     public FluidState getFluidState(BlockState state) {
-        return (Boolean) state.getValue(SculkVeinBlock.WATERLOGGED) ? Fluids.WATER.getSource(false) : super.getFluidState(state);
+        return ((Boolean) state.getValue(SculkVeinBlock.WATERLOGGED)).booleanValue() ? Fluids.WATER.getSource(false) : super.getFluidState(state);
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/SnowLayerBlock.java b/src/main/java/net/minecraft/world/level/block/SnowLayerBlock.java
index 92acea01ee300d2cb3020d7794d92b15f5015614..1c228b44019da74aa7e9bdf7fcd825844eb1cb7d 100644
--- a/src/main/java/net/minecraft/world/level/block/SnowLayerBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/SnowLayerBlock.java
@@ -37,7 +37,7 @@ public class SnowLayerBlock extends Block {
     public boolean isPathfindable(BlockState state, BlockGetter world, BlockPos pos, PathComputationType type) {
         switch (type) {
             case LAND:
-                return (Integer) state.getValue(SnowLayerBlock.LAYERS) < 5;
+                return ((Integer) state.getValue(SnowLayerBlock.LAYERS)).intValue() < 5;
             case WATER:
                 return false;
             case AIR:
@@ -49,22 +49,22 @@ public class SnowLayerBlock extends Block {
 
     @Override
     public VoxelShape getShape(BlockState state, BlockGetter world, BlockPos pos, CollisionContext context) {
-        return SnowLayerBlock.SHAPE_BY_LAYER[(Integer) state.getValue(SnowLayerBlock.LAYERS)];
+        return SnowLayerBlock.SHAPE_BY_LAYER[((Integer) state.getValue(SnowLayerBlock.LAYERS)).intValue()];
     }
 
     @Override
     public VoxelShape getCollisionShape(BlockState state, BlockGetter world, BlockPos pos, CollisionContext context) {
-        return SnowLayerBlock.SHAPE_BY_LAYER[(Integer) state.getValue(SnowLayerBlock.LAYERS) - 1];
+        return SnowLayerBlock.SHAPE_BY_LAYER[((Integer) state.getValue(SnowLayerBlock.LAYERS)).intValue() - 1];
     }
 
     @Override
     public VoxelShape getBlockSupportShape(BlockState state, BlockGetter world, BlockPos pos) {
-        return SnowLayerBlock.SHAPE_BY_LAYER[(Integer) state.getValue(SnowLayerBlock.LAYERS)];
+        return SnowLayerBlock.SHAPE_BY_LAYER[((Integer) state.getValue(SnowLayerBlock.LAYERS)).intValue()];
     }
 
     @Override
     public VoxelShape getVisualShape(BlockState state, BlockGetter world, BlockPos pos, CollisionContext context) {
-        return SnowLayerBlock.SHAPE_BY_LAYER[(Integer) state.getValue(SnowLayerBlock.LAYERS)];
+        return SnowLayerBlock.SHAPE_BY_LAYER[((Integer) state.getValue(SnowLayerBlock.LAYERS)).intValue()];
     }
 
     @Override
@@ -74,14 +74,14 @@ public class SnowLayerBlock extends Block {
 
     @Override
     public float getShadeBrightness(BlockState state, BlockGetter world, BlockPos pos) {
-        return (Integer) state.getValue(SnowLayerBlock.LAYERS) == 8 ? 0.2F : 1.0F;
+        return ((Integer) state.getValue(SnowLayerBlock.LAYERS)).intValue() == 8 ? 0.2F : 1.0F;
     }
 
     @Override
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
         BlockState iblockdata1 = world.getBlockState(pos.below());
 
-        return iblockdata1.is(BlockTags.SNOW_LAYER_CANNOT_SURVIVE_ON) ? false : (iblockdata1.is(BlockTags.SNOW_LAYER_CAN_SURVIVE_ON) ? true : Block.isFaceFull(iblockdata1.getCollisionShape(world, pos.below()), Direction.UP) || iblockdata1.is((Block) this) && (Integer) iblockdata1.getValue(SnowLayerBlock.LAYERS) == 8);
+        return iblockdata1.is(BlockTags.SNOW_LAYER_CANNOT_SURVIVE_ON) ? false : (iblockdata1.is(BlockTags.SNOW_LAYER_CAN_SURVIVE_ON) ? true : Block.isFaceFull(iblockdata1.getCollisionShape(world, pos.below()), Direction.UP) || iblockdata1.is((Block) this) && ((Integer) iblockdata1.getValue(SnowLayerBlock.LAYERS)).intValue() == 8);
     }
 
     @Override
@@ -105,7 +105,7 @@ public class SnowLayerBlock extends Block {
 
     @Override
     public boolean canBeReplaced(BlockState state, BlockPlaceContext context) {
-        int i = (Integer) state.getValue(SnowLayerBlock.LAYERS);
+        int i = ((Integer) state.getValue(SnowLayerBlock.LAYERS)).intValue();
 
         return context.getItemInHand().is(this.asItem()) && i < 8 ? (context.replacingClickedOnBlock() ? context.getClickedFace() == Direction.UP : true) : i == 1;
     }
@@ -116,7 +116,7 @@ public class SnowLayerBlock extends Block {
         BlockState iblockdata = ctx.getLevel().getBlockState(ctx.getClickedPos());
 
         if (iblockdata.is((Block) this)) {
-            int i = (Integer) iblockdata.getValue(SnowLayerBlock.LAYERS);
+            int i = ((Integer) iblockdata.getValue(SnowLayerBlock.LAYERS)).intValue();
 
             return (BlockState) iblockdata.setValue(SnowLayerBlock.LAYERS, Integer.valueOf(Math.min(8, i + 1)));
         } else {
diff --git a/src/main/java/net/minecraft/world/level/block/SpongeBlock.java b/src/main/java/net/minecraft/world/level/block/SpongeBlock.java
index e4090503e2f3c4a00e51f97b27f05dbc9d0db45a..88ff8a835abde98b63875b1406aebfc6dde853ae 100644
--- a/src/main/java/net/minecraft/world/level/block/SpongeBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/SpongeBlock.java
@@ -60,7 +60,7 @@ public class SpongeBlock extends Block {
         while (!queue.isEmpty()) {
             Tuple<BlockPos, Integer> tuple = (Tuple) queue.poll();
             BlockPos blockposition1 = (BlockPos) tuple.getA();
-            int j = (Integer) tuple.getB();
+            int j = ((Integer) tuple.getB()).intValue();
             Direction[] aenumdirection = Direction.values();
             int k = aenumdirection.length;
 
diff --git a/src/main/java/net/minecraft/world/level/block/SpreadingSnowyDirtBlock.java b/src/main/java/net/minecraft/world/level/block/SpreadingSnowyDirtBlock.java
index af46c05a34292d271fd4a809398e6b299e10b12b..c3de7825d1f61c3bc40ef326279febbc5ae601e6 100644
--- a/src/main/java/net/minecraft/world/level/block/SpreadingSnowyDirtBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/SpreadingSnowyDirtBlock.java
@@ -26,7 +26,7 @@ public abstract class SpreadingSnowyDirtBlock extends SnowyDirtBlock {
         BlockPos blockposition1 = pos.above();
         BlockState iblockdata1 = chunk.getBlockState(blockposition1); // Paper
 
-        if (iblockdata1.is(Blocks.SNOW) && (Integer) iblockdata1.getValue(SnowLayerBlock.LAYERS) == 1) {
+        if (iblockdata1.is(Blocks.SNOW) && ((Integer) iblockdata1.getValue(SnowLayerBlock.LAYERS)).intValue() == 1) {
             return true;
         } else if (iblockdata1.getFluidState().getAmount() == 8) {
             return false;
diff --git a/src/main/java/net/minecraft/world/level/block/StemBlock.java b/src/main/java/net/minecraft/world/level/block/StemBlock.java
index 31c4d804cff9a0e0a9b4000502bb65e1c35a7f20..9c05879c7d98ae068109a836d79f069dd4bc8dbd 100644
--- a/src/main/java/net/minecraft/world/level/block/StemBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/StemBlock.java
@@ -40,7 +40,7 @@ public class StemBlock extends BushBlock implements BonemealableBlock {
 
     @Override
     public VoxelShape getShape(BlockState state, BlockGetter world, BlockPos pos, CollisionContext context) {
-        return StemBlock.SHAPE_BY_AGE[(Integer) state.getValue(StemBlock.AGE)];
+        return StemBlock.SHAPE_BY_AGE[((Integer) state.getValue(StemBlock.AGE)).intValue()];
     }
 
     @Override
@@ -54,7 +54,7 @@ public class StemBlock extends BushBlock implements BonemealableBlock {
             float f = CropBlock.getGrowthSpeed(this, world, pos);
 
             if (random.nextFloat() < ((this == Blocks.PUMPKIN_STEM ? world.spigotConfig.pumpkinModifier : world.spigotConfig.melonModifier) / (100.0f * (Math.floor((25.0F / f) + 1))))) { // Spigot - SPIGOT-7159: Better modifier resolution
-                int i = (Integer) state.getValue(StemBlock.AGE);
+                int i = ((Integer) state.getValue(StemBlock.AGE)).intValue();
 
                 if (i < 7) {
                     state = (BlockState) state.setValue(StemBlock.AGE, Integer.valueOf(i + 1));
@@ -85,7 +85,7 @@ public class StemBlock extends BushBlock implements BonemealableBlock {
 
     @Override
     public boolean isValidBonemealTarget(LevelReader world, BlockPos pos, BlockState state, boolean isClient) {
-        return (Integer) state.getValue(StemBlock.AGE) != 7;
+        return ((Integer) state.getValue(StemBlock.AGE)).intValue() != 7;
     }
 
     @Override
@@ -95,7 +95,7 @@ public class StemBlock extends BushBlock implements BonemealableBlock {
 
     @Override
     public void performBonemeal(ServerLevel world, RandomSource random, BlockPos pos, BlockState state) {
-        int i = Math.min(7, (Integer) state.getValue(StemBlock.AGE) + Mth.nextInt(world.random, 2, 5));
+        int i = Math.min(7, ((Integer) state.getValue(StemBlock.AGE)).intValue() + Mth.nextInt(world.random, 2, 5));
         BlockState iblockdata1 = (BlockState) state.setValue(StemBlock.AGE, Integer.valueOf(i));
 
         CraftEventFactory.handleBlockGrowEvent(world, pos, iblockdata1, 2); // CraftBukkit
diff --git a/src/main/java/net/minecraft/world/level/block/SugarCaneBlock.java b/src/main/java/net/minecraft/world/level/block/SugarCaneBlock.java
index b103d470c5a3439a158b13f668e9cb406a30ead0..f8bb8c1d5ecab58957219db0255ef68c80babf32 100644
--- a/src/main/java/net/minecraft/world/level/block/SugarCaneBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/SugarCaneBlock.java
@@ -53,7 +53,7 @@ public class SugarCaneBlock extends Block {
             }
 
             if (i < world.paperConfig().maxGrowthHeight.reeds) { // Paper - Configurable growth height
-                int j = (Integer) state.getValue(SugarCaneBlock.AGE);
+                int j = ((Integer) state.getValue(SugarCaneBlock.AGE)).intValue();
 
                 int modifier = world.spigotConfig.caneModifier; // Spigot - SPIGOT-7159: Better modifier resolution
                 if (j >= 15 || (modifier != 100 && random.nextFloat() < (modifier / (100.0f * 16)))) { // Spigot - SPIGOT-7159: Better modifier resolution
diff --git a/src/main/java/net/minecraft/world/level/block/SweetBerryBushBlock.java b/src/main/java/net/minecraft/world/level/block/SweetBerryBushBlock.java
index 979000af2a13c9cc83fcae6d7b056e55816cec13..3b905e2fb65cfb27fdd9f2fca6cb75ea69d0b935 100644
--- a/src/main/java/net/minecraft/world/level/block/SweetBerryBushBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/SweetBerryBushBlock.java
@@ -55,17 +55,17 @@ public class SweetBerryBushBlock extends BushBlock implements BonemealableBlock
 
     @Override
     public VoxelShape getShape(BlockState state, BlockGetter world, BlockPos pos, CollisionContext context) {
-        return (Integer) state.getValue(SweetBerryBushBlock.AGE) == 0 ? SweetBerryBushBlock.SAPLING_SHAPE : ((Integer) state.getValue(SweetBerryBushBlock.AGE) < 3 ? SweetBerryBushBlock.MID_GROWTH_SHAPE : super.getShape(state, world, pos, context));
+        return ((Integer) state.getValue(SweetBerryBushBlock.AGE)).intValue() == 0 ? SweetBerryBushBlock.SAPLING_SHAPE : (((Integer) state.getValue(SweetBerryBushBlock.AGE)).intValue() < 3 ? SweetBerryBushBlock.MID_GROWTH_SHAPE : super.getShape(state, world, pos, context));
     }
 
     @Override
     public boolean isRandomlyTicking(BlockState state) {
-        return (Integer) state.getValue(SweetBerryBushBlock.AGE) < 3;
+        return ((Integer) state.getValue(SweetBerryBushBlock.AGE)).intValue() < 3;
     }
 
     @Override
     public void randomTick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
-        int i = (Integer) state.getValue(SweetBerryBushBlock.AGE);
+        int i = ((Integer) state.getValue(SweetBerryBushBlock.AGE)).intValue();
 
         if (i < 3 && random.nextFloat() < (world.spigotConfig.sweetBerryModifier / (100.0f * 5)) && world.getRawBrightness(pos.above(), 0) >= 9) { // Spigot - SPIGOT-7159: Better modifier resolution
             BlockState iblockdata1 = (BlockState) state.setValue(SweetBerryBushBlock.AGE, Integer.valueOf(i + 1));
@@ -81,7 +81,7 @@ public class SweetBerryBushBlock extends BushBlock implements BonemealableBlock
         if (!new io.papermc.paper.event.entity.EntityInsideBlockEvent(entity.getBukkitEntity(), org.bukkit.craftbukkit.block.CraftBlock.at(world, pos)).callEvent()) { return; } // Paper
         if (entity instanceof LivingEntity && entity.getType() != EntityType.FOX && entity.getType() != EntityType.BEE) {
             entity.makeStuckInBlock(state, new Vec3(0.800000011920929D, 0.75D, 0.800000011920929D));
-            if (!world.isClientSide && (Integer) state.getValue(SweetBerryBushBlock.AGE) > 0 && (entity.xOld != entity.getX() || entity.zOld != entity.getZ())) {
+            if (!world.isClientSide && ((Integer) state.getValue(SweetBerryBushBlock.AGE)).intValue() > 0 && (entity.xOld != entity.getX() || entity.zOld != entity.getZ())) {
                 double d0 = Math.abs(entity.getX() - entity.xOld);
                 double d1 = Math.abs(entity.getZ() - entity.zOld);
 
@@ -97,7 +97,7 @@ public class SweetBerryBushBlock extends BushBlock implements BonemealableBlock
 
     @Override
     public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
-        int i = (Integer) state.getValue(SweetBerryBushBlock.AGE);
+        int i = ((Integer) state.getValue(SweetBerryBushBlock.AGE)).intValue();
         boolean flag = i == 3;
 
         if (!flag && player.getItemInHand(hand).is(Items.BONE_MEAL)) {
@@ -132,7 +132,7 @@ public class SweetBerryBushBlock extends BushBlock implements BonemealableBlock
 
     @Override
     public boolean isValidBonemealTarget(LevelReader world, BlockPos pos, BlockState state, boolean isClient) {
-        return (Integer) state.getValue(SweetBerryBushBlock.AGE) < 3;
+        return ((Integer) state.getValue(SweetBerryBushBlock.AGE)).intValue() < 3;
     }
 
     @Override
@@ -142,7 +142,7 @@ public class SweetBerryBushBlock extends BushBlock implements BonemealableBlock
 
     @Override
     public void performBonemeal(ServerLevel world, RandomSource random, BlockPos pos, BlockState state) {
-        int i = Math.min(3, (Integer) state.getValue(SweetBerryBushBlock.AGE) + 1);
+        int i = Math.min(3, ((Integer) state.getValue(SweetBerryBushBlock.AGE)).intValue() + 1);
 
         world.setBlock(pos, (BlockState) state.setValue(SweetBerryBushBlock.AGE, Integer.valueOf(i)), 2);
     }
diff --git a/src/main/java/net/minecraft/world/level/block/TargetBlock.java b/src/main/java/net/minecraft/world/level/block/TargetBlock.java
index 69eaf1341d282c4783dab84533ea2c053deed529..6905a85e69fc08278e0fffdf514410e45c5e4767 100644
--- a/src/main/java/net/minecraft/world/level/block/TargetBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/TargetBlock.java
@@ -96,7 +96,7 @@ public class TargetBlock extends Block {
 
     @Override
     public void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
-        if (state.getValue(OUTPUT_POWER) != 0) {
+        if (state.<Integer>getValue(OUTPUT_POWER).intValue() != 0) {
             world.setBlock(pos, state.setValue(OUTPUT_POWER, Integer.valueOf(0)), 3);
         }
 
@@ -104,7 +104,7 @@ public class TargetBlock extends Block {
 
     @Override
     public int getSignal(BlockState state, BlockGetter world, BlockPos pos, Direction direction) {
-        return state.getValue(OUTPUT_POWER);
+        return state.<Integer>getValue(OUTPUT_POWER).intValue();
     }
 
     @Override
@@ -120,7 +120,7 @@ public class TargetBlock extends Block {
     @Override
     public void onPlace(BlockState state, Level world, BlockPos pos, BlockState oldState, boolean notify) {
         if (!world.isClientSide() && !state.is(oldState.getBlock())) {
-            if (state.getValue(OUTPUT_POWER) > 0 && !world.getBlockTicks().hasScheduledTick(pos, this)) {
+            if (state.<Integer>getValue(OUTPUT_POWER).intValue() > 0 && !world.getBlockTicks().hasScheduledTick(pos, this)) {
                 world.setBlock(pos, state.setValue(OUTPUT_POWER, Integer.valueOf(0)), 18);
             }
 
diff --git a/src/main/java/net/minecraft/world/level/block/TntBlock.java b/src/main/java/net/minecraft/world/level/block/TntBlock.java
index 36e7903919c4f6a027bd7245a798f789961b3c38..356abdce4a581debd67c857ba3ebb19485f10e7c 100644
--- a/src/main/java/net/minecraft/world/level/block/TntBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/TntBlock.java
@@ -66,7 +66,7 @@ public class TntBlock extends Block {
 
     @Override
     public void playerWillDestroy(Level world, BlockPos pos, BlockState state, Player player) {
-        if (!world.isClientSide() && !player.isCreative() && (Boolean) state.getValue(TntBlock.UNSTABLE)) {
+        if (!world.isClientSide() && !player.isCreative() && ((Boolean) state.getValue(TntBlock.UNSTABLE)).booleanValue()) {
             TntBlock.explode(world, pos);
         }
 
diff --git a/src/main/java/net/minecraft/world/level/block/TrapDoorBlock.java b/src/main/java/net/minecraft/world/level/block/TrapDoorBlock.java
index fa98321c765faf94604bc70312d0610ef9a371d7..474f0def50430c7ae682c1cfa5f667d9f05e1128 100644
--- a/src/main/java/net/minecraft/world/level/block/TrapDoorBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/TrapDoorBlock.java
@@ -56,7 +56,7 @@ public class TrapDoorBlock extends HorizontalDirectionalBlock implements SimpleW
 
     @Override
     public VoxelShape getShape(BlockState state, BlockGetter world, BlockPos pos, CollisionContext context) {
-        if (!(Boolean) state.getValue(TrapDoorBlock.OPEN)) {
+        if (!((Boolean) state.getValue(TrapDoorBlock.OPEN)).booleanValue()) {
             return state.getValue(TrapDoorBlock.HALF) == Half.TOP ? TrapDoorBlock.TOP_AABB : TrapDoorBlock.BOTTOM_AABB;
         } else {
             switch ((Direction) state.getValue(TrapDoorBlock.FACING)) {
@@ -77,11 +77,11 @@ public class TrapDoorBlock extends HorizontalDirectionalBlock implements SimpleW
     public boolean isPathfindable(BlockState state, BlockGetter world, BlockPos pos, PathComputationType type) {
         switch (type) {
             case LAND:
-                return (Boolean) state.getValue(TrapDoorBlock.OPEN);
+                return ((Boolean) state.getValue(TrapDoorBlock.OPEN)).booleanValue();
             case WATER:
-                return (Boolean) state.getValue(TrapDoorBlock.WATERLOGGED);
+                return ((Boolean) state.getValue(TrapDoorBlock.WATERLOGGED)).booleanValue();
             case AIR:
-                return (Boolean) state.getValue(TrapDoorBlock.OPEN);
+                return ((Boolean) state.getValue(TrapDoorBlock.OPEN)).booleanValue();
             default:
                 return false;
         }
@@ -94,11 +94,11 @@ public class TrapDoorBlock extends HorizontalDirectionalBlock implements SimpleW
         } else {
             state = (BlockState) state.cycle(TrapDoorBlock.OPEN);
             world.setBlock(pos, state, 2);
-            if ((Boolean) state.getValue(TrapDoorBlock.WATERLOGGED)) {
+            if (((Boolean) state.getValue(TrapDoorBlock.WATERLOGGED)).booleanValue()) {
                 world.scheduleTick(pos, (Fluid) Fluids.WATER, Fluids.WATER.getTickDelay(world));
             }
 
-            this.playSound(player, world, pos, (Boolean) state.getValue(TrapDoorBlock.OPEN));
+            this.playSound(player, world, pos, ((Boolean) state.getValue(TrapDoorBlock.OPEN)).booleanValue());
             return InteractionResult.sidedSuccess(world.isClientSide);
         }
     }
@@ -113,13 +113,13 @@ public class TrapDoorBlock extends HorizontalDirectionalBlock implements SimpleW
         if (!world.isClientSide) {
             boolean flag1 = world.hasNeighborSignal(pos);
 
-            if (flag1 != (Boolean) state.getValue(TrapDoorBlock.POWERED)) {
+            if (flag1 != ((Boolean) state.getValue(TrapDoorBlock.POWERED)).booleanValue()) {
                 // CraftBukkit start
                 org.bukkit.World bworld = world.getWorld();
                 org.bukkit.block.Block bblock = bworld.getBlockAt(pos.getX(), pos.getY(), pos.getZ());
 
                 int power = bblock.getBlockPower();
-                int oldPower = (Boolean) state.getValue(OPEN) ? 15 : 0;
+                int oldPower = ((Boolean) state.getValue(OPEN)).booleanValue() ? 15 : 0;
 
                 if (oldPower == 0 ^ power == 0 || sourceBlock.defaultBlockState().isSignalSource()) {
                     BlockRedstoneEvent eventRedstone = new BlockRedstoneEvent(bblock, oldPower, power);
@@ -127,13 +127,13 @@ public class TrapDoorBlock extends HorizontalDirectionalBlock implements SimpleW
                     flag1 = eventRedstone.getNewCurrent() > 0;
                 }
                 // CraftBukkit end
-                if ((Boolean) state.getValue(TrapDoorBlock.OPEN) != flag1) {
+                if (((Boolean) state.getValue(TrapDoorBlock.OPEN)).booleanValue() != flag1) {
                     state = (BlockState) state.setValue(TrapDoorBlock.OPEN, Boolean.valueOf(flag1));
                     this.playSound((Player) null, world, pos, flag1);
                 }
 
                 world.setBlock(pos, (BlockState) state.setValue(TrapDoorBlock.POWERED, Boolean.valueOf(flag1)), 2);
-                if ((Boolean) state.getValue(TrapDoorBlock.WATERLOGGED)) {
+                if (((Boolean) state.getValue(TrapDoorBlock.WATERLOGGED)).booleanValue()) {
                     world.scheduleTick(pos, (Fluid) Fluids.WATER, Fluids.WATER.getTickDelay(world));
                 }
             }
@@ -167,12 +167,12 @@ public class TrapDoorBlock extends HorizontalDirectionalBlock implements SimpleW
 
     @Override
     public FluidState getFluidState(BlockState state) {
-        return (Boolean) state.getValue(TrapDoorBlock.WATERLOGGED) ? Fluids.WATER.getSource(false) : super.getFluidState(state);
+        return ((Boolean) state.getValue(TrapDoorBlock.WATERLOGGED)).booleanValue() ? Fluids.WATER.getSource(false) : super.getFluidState(state);
     }
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
-        if ((Boolean) state.getValue(TrapDoorBlock.WATERLOGGED)) {
+        if (((Boolean) state.getValue(TrapDoorBlock.WATERLOGGED)).booleanValue()) {
             world.scheduleTick(pos, (Fluid) Fluids.WATER, Fluids.WATER.getTickDelay(world));
         }
 
diff --git a/src/main/java/net/minecraft/world/level/block/TripWireBlock.java b/src/main/java/net/minecraft/world/level/block/TripWireBlock.java
index a11d0acb1894e6fbf841f8d2f582585605d3869a..8a4010a7da1705034bf816494b1d6697449c78c7 100644
--- a/src/main/java/net/minecraft/world/level/block/TripWireBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/TripWireBlock.java
@@ -48,7 +48,7 @@ public class TripWireBlock extends Block {
 
     @Override
     public VoxelShape getShape(BlockState state, BlockGetter world, BlockPos pos, CollisionContext context) {
-        return (Boolean) state.getValue(TripWireBlock.ATTACHED) ? TripWireBlock.AABB : TripWireBlock.NOT_ATTACHED_AABB;
+        return ((Boolean) state.getValue(TripWireBlock.ATTACHED)).booleanValue() ? TripWireBlock.AABB : TripWireBlock.NOT_ATTACHED_AABB;
     }
 
     @Override
@@ -129,7 +129,7 @@ public class TripWireBlock extends Block {
     public void entityInside(BlockState state, Level world, BlockPos pos, Entity entity) {
         if (!new io.papermc.paper.event.entity.EntityInsideBlockEvent(entity.getBukkitEntity(), org.bukkit.craftbukkit.block.CraftBlock.at(world, pos)).callEvent()) { return; } // Paper
         if (!world.isClientSide) {
-            if (!(Boolean) state.getValue(TripWireBlock.POWERED)) {
+            if (!((Boolean) state.getValue(TripWireBlock.POWERED)).booleanValue()) {
                 this.checkPressed(world, pos);
             }
         }
@@ -137,14 +137,14 @@ public class TripWireBlock extends Block {
 
     @Override
     public void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
-        if ((Boolean) world.getBlockState(pos).getValue(TripWireBlock.POWERED)) {
+        if (((Boolean) world.getBlockState(pos).getValue(TripWireBlock.POWERED)).booleanValue()) {
             this.checkPressed(world, pos);
         }
     }
 
     private void checkPressed(Level world, BlockPos pos) {
         BlockState iblockdata = world.getBlockState(pos);
-        boolean flag = (Boolean) iblockdata.getValue(TripWireBlock.POWERED);
+        boolean flag = ((Boolean) iblockdata.getValue(TripWireBlock.POWERED)).booleanValue();
         boolean flag1 = false;
         List<? extends Entity> list = world.getEntities((Entity) null, iblockdata.getShape(world, pos).bounds().move(pos));
 
@@ -162,7 +162,7 @@ public class TripWireBlock extends Block {
         }
 
         // CraftBukkit start - Call interact even when triggering connected tripwire
-        if (flag != flag1 && flag1 && (Boolean)iblockdata.getValue(ATTACHED)) {
+        if (flag != flag1 && flag1 && ((Boolean) iblockdata.getValue(ATTACHED)).booleanValue()) {
             org.bukkit.World bworld = world.getWorld();
             org.bukkit.plugin.PluginManager manager = world.getCraftServer().getPluginManager();
             org.bukkit.block.Block block = bworld.getBlockAt(pos.getX(), pos.getY(), pos.getZ());
diff --git a/src/main/java/net/minecraft/world/level/block/TripWireHookBlock.java b/src/main/java/net/minecraft/world/level/block/TripWireHookBlock.java
index 0daa69c20352b8abd42ba3e139998ef6cac0cd43..a12b84a0a053e240e620b5547a43d59e19ab6efe 100644
--- a/src/main/java/net/minecraft/world/level/block/TripWireHookBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/TripWireHookBlock.java
@@ -115,8 +115,8 @@ public class TripWireHookBlock extends Block {
     public void calculateState(Level world, BlockPos pos, BlockState state, boolean beingRemoved, boolean flag1, int i, @Nullable BlockState iblockdata1, boolean tripWireBeingRemoved) {
         // Paper end
         Direction enumdirection = (Direction) state.getValue(TripWireHookBlock.FACING);
-        boolean flag2 = (Boolean) state.getValue(TripWireHookBlock.ATTACHED);
-        boolean flag3 = (Boolean) state.getValue(TripWireHookBlock.POWERED);
+        boolean flag2 = ((Boolean) state.getValue(TripWireHookBlock.ATTACHED)).booleanValue();
+        boolean flag3 = ((Boolean) state.getValue(TripWireHookBlock.POWERED)).booleanValue();
         boolean flag4 = !beingRemoved;
         boolean flag5 = false;
         int j = 0;
@@ -143,8 +143,8 @@ public class TripWireHookBlock extends Block {
                     iblockdata2 = (BlockState) MoreObjects.firstNonNull(iblockdata1, iblockdata2);
                 }
 
-                boolean flag6 = !(Boolean) iblockdata2.getValue(TripWireBlock.DISARMED);
-                boolean flag7 = (Boolean) iblockdata2.getValue(TripWireBlock.POWERED);
+                boolean flag6 = !((Boolean) iblockdata2.getValue(TripWireBlock.DISARMED)).booleanValue();
+                boolean flag7 = ((Boolean) iblockdata2.getValue(TripWireBlock.POWERED)).booleanValue();
 
                 flag5 |= flag6 && flag7;
                 if (k != i || !tripWireBeingRemoved || !flag6) // Paper - don't update the tripwire again if being removed and not disarmed
@@ -235,8 +235,8 @@ public class TripWireHookBlock extends Block {
     @Override
     public void onRemove(BlockState state, Level world, BlockPos pos, BlockState newState, boolean moved) {
         if (!moved && !state.is(newState.getBlock())) {
-            boolean flag1 = (Boolean) state.getValue(TripWireHookBlock.ATTACHED);
-            boolean flag2 = (Boolean) state.getValue(TripWireHookBlock.POWERED);
+            boolean flag1 = ((Boolean) state.getValue(TripWireHookBlock.ATTACHED)).booleanValue();
+            boolean flag2 = ((Boolean) state.getValue(TripWireHookBlock.POWERED)).booleanValue();
 
             if (flag1 || flag2) {
                 this.calculateState(world, pos, state, true, false, -1, (BlockState) null);
@@ -253,12 +253,12 @@ public class TripWireHookBlock extends Block {
 
     @Override
     public int getSignal(BlockState state, BlockGetter world, BlockPos pos, Direction direction) {
-        return (Boolean) state.getValue(TripWireHookBlock.POWERED) ? 15 : 0;
+        return ((Boolean) state.getValue(TripWireHookBlock.POWERED)).booleanValue() ? 15 : 0;
     }
 
     @Override
     public int getDirectSignal(BlockState state, BlockGetter world, BlockPos pos, Direction direction) {
-        return !(Boolean) state.getValue(TripWireHookBlock.POWERED) ? 0 : (state.getValue(TripWireHookBlock.FACING) == direction ? 15 : 0);
+        return !((Boolean) state.getValue(TripWireHookBlock.POWERED)).booleanValue() ? 0 : (state.getValue(TripWireHookBlock.FACING) == direction ? 15 : 0);
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/TurtleEggBlock.java b/src/main/java/net/minecraft/world/level/block/TurtleEggBlock.java
index eb0ba5264ac75efa752b2e789fe8c7e4606f4f0a..ed3a7ba8ab4cdf47508bec0a3bc4c9fc8ae473c4 100644
--- a/src/main/java/net/minecraft/world/level/block/TurtleEggBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/TurtleEggBlock.java
@@ -91,7 +91,7 @@ public class TurtleEggBlock extends Block {
 
     public void decreaseEggs(Level world, BlockPos pos, BlockState state) {
         world.playSound((Player) null, pos, SoundEvents.TURTLE_EGG_BREAK, SoundSource.BLOCKS, 0.7F, 0.9F + world.random.nextFloat() * 0.2F);
-        int i = (Integer) state.getValue(TurtleEggBlock.EGGS);
+        int i = ((Integer) state.getValue(TurtleEggBlock.EGGS)).intValue();
 
         if (i <= 1) {
             world.destroyBlock(pos, false);
@@ -106,7 +106,7 @@ public class TurtleEggBlock extends Block {
     @Override
     public void randomTick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
         if (this.shouldUpdateHatchLevel(world) && TurtleEggBlock.onSand(world, pos)) {
-            int i = (Integer) state.getValue(TurtleEggBlock.HATCH);
+            int i = ((Integer) state.getValue(TurtleEggBlock.HATCH)).intValue();
 
             if (i < 2) {
                 // CraftBukkit start - Call BlockGrowEvent
@@ -125,7 +125,7 @@ public class TurtleEggBlock extends Block {
                 world.playSound((Player) null, pos, SoundEvents.TURTLE_EGG_HATCH, SoundSource.BLOCKS, 0.7F, 0.9F + random.nextFloat() * 0.2F);
                 world.removeBlock(pos, false);
 
-                for (int j = 0; j < (Integer) state.getValue(TurtleEggBlock.EGGS); ++j) {
+                for (int j = 0; j < ((Integer) state.getValue(TurtleEggBlock.EGGS)).intValue(); ++j) {
                     world.levelEvent(2001, pos, Block.getId(state));
                     Turtle entityturtle = (Turtle) EntityType.TURTLE.create(world);
 
@@ -171,7 +171,7 @@ public class TurtleEggBlock extends Block {
 
     @Override
     public boolean canBeReplaced(BlockState state, BlockPlaceContext context) {
-        return !context.isSecondaryUseActive() && context.getItemInHand().is(this.asItem()) && (Integer) state.getValue(TurtleEggBlock.EGGS) < 4 ? true : super.canBeReplaced(state, context);
+        return !context.isSecondaryUseActive() && context.getItemInHand().is(this.asItem()) && ((Integer) state.getValue(TurtleEggBlock.EGGS)).intValue() < 4 ? true : super.canBeReplaced(state, context);
     }
 
     @Nullable
@@ -184,7 +184,7 @@ public class TurtleEggBlock extends Block {
 
     @Override
     public VoxelShape getShape(BlockState state, BlockGetter world, BlockPos pos, CollisionContext context) {
-        return (Integer) state.getValue(TurtleEggBlock.EGGS) > 1 ? TurtleEggBlock.MULTIPLE_EGGS_AABB : TurtleEggBlock.ONE_EGG_AABB;
+        return ((Integer) state.getValue(TurtleEggBlock.EGGS)).intValue() > 1 ? TurtleEggBlock.MULTIPLE_EGGS_AABB : TurtleEggBlock.ONE_EGG_AABB;
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/VineBlock.java b/src/main/java/net/minecraft/world/level/block/VineBlock.java
index 4223de1de112266116bfcac4c01d6661e83acd37..ee94680513a04b0226adc07f2022f8d47df22fb3 100644
--- a/src/main/java/net/minecraft/world/level/block/VineBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/VineBlock.java
@@ -51,23 +51,23 @@ public class VineBlock extends Block {
     private static VoxelShape calculateShape(BlockState state) {
         VoxelShape voxelshape = Shapes.empty();
 
-        if ((Boolean) state.getValue(VineBlock.UP)) {
+        if (((Boolean) state.getValue(VineBlock.UP)).booleanValue()) {
             voxelshape = VineBlock.UP_AABB;
         }
 
-        if ((Boolean) state.getValue(VineBlock.NORTH)) {
+        if (((Boolean) state.getValue(VineBlock.NORTH)).booleanValue()) {
             voxelshape = Shapes.or(voxelshape, VineBlock.NORTH_AABB);
         }
 
-        if ((Boolean) state.getValue(VineBlock.SOUTH)) {
+        if (((Boolean) state.getValue(VineBlock.SOUTH)).booleanValue()) {
             voxelshape = Shapes.or(voxelshape, VineBlock.SOUTH_AABB);
         }
 
-        if ((Boolean) state.getValue(VineBlock.EAST)) {
+        if (((Boolean) state.getValue(VineBlock.EAST)).booleanValue()) {
             voxelshape = Shapes.or(voxelshape, VineBlock.EAST_AABB);
         }
 
-        if ((Boolean) state.getValue(VineBlock.WEST)) {
+        if (((Boolean) state.getValue(VineBlock.WEST)).booleanValue()) {
             voxelshape = Shapes.or(voxelshape, VineBlock.WEST_AABB);
         }
 
@@ -100,7 +100,7 @@ public class VineBlock extends Block {
         while (iterator.hasNext()) {
             BooleanProperty blockstateboolean = (BooleanProperty) iterator.next();
 
-            if ((Boolean) state.getValue(blockstateboolean)) {
+            if (((Boolean) state.getValue(blockstateboolean)).booleanValue()) {
                 ++i;
             }
         }
@@ -122,7 +122,7 @@ public class VineBlock extends Block {
                 BooleanProperty blockstateboolean = (BooleanProperty) VineBlock.PROPERTY_BY_DIRECTION.get(side);
                 BlockState iblockdata = world.getBlockState(pos.above());
 
-                return iblockdata.is((Block) this) && (Boolean) iblockdata.getValue(blockstateboolean);
+                return iblockdata.is((Block) this) && ((Boolean) iblockdata.getValue(blockstateboolean)).booleanValue();
             }
         }
     }
@@ -134,7 +134,7 @@ public class VineBlock extends Block {
     private BlockState getUpdatedState(BlockState state, BlockGetter world, BlockPos pos) {
         BlockPos blockposition1 = pos.above();
 
-        if ((Boolean) state.getValue(VineBlock.UP)) {
+        if (((Boolean) state.getValue(VineBlock.UP)).booleanValue()) {
             state = (BlockState) state.setValue(VineBlock.UP, Boolean.valueOf(VineBlock.isAcceptableNeighbour(world, blockposition1, Direction.DOWN)));
         }
 
@@ -145,7 +145,7 @@ public class VineBlock extends Block {
             Direction enumdirection = (Direction) iterator.next();
             BooleanProperty blockstateboolean = VineBlock.getPropertyForFace(enumdirection);
 
-            if ((Boolean) state.getValue(blockstateboolean)) {
+            if (((Boolean) state.getValue(blockstateboolean)).booleanValue()) {
                 boolean flag = this.canSupportAtFace(world, pos, enumdirection);
 
                 if (!flag) {
@@ -153,7 +153,7 @@ public class VineBlock extends Block {
                         iblockdata1 = world.getBlockState(blockposition1);
                     }
 
-                    flag = iblockdata1.is((Block) this) && (Boolean) iblockdata1.getValue(blockstateboolean);
+                    flag = iblockdata1.is((Block) this) && ((Boolean) iblockdata1.getValue(blockstateboolean)).booleanValue();
                 }
 
                 state = (BlockState) state.setValue(blockstateboolean, Boolean.valueOf(flag));
@@ -183,15 +183,15 @@ public class VineBlock extends Block {
             BlockState iblockdata1;
             Direction enumdirection1;
 
-            if (enumdirection.getAxis().isHorizontal() && !(Boolean) state.getValue(VineBlock.getPropertyForFace(enumdirection))) {
+            if (enumdirection.getAxis().isHorizontal() && !((Boolean) state.getValue(VineBlock.getPropertyForFace(enumdirection))).booleanValue()) {
                 if (this.canSpread(world, pos)) {
                     blockposition2 = pos.relative(enumdirection);
                     iblockdata1 = world.getBlockState(blockposition2);
                     if (iblockdata1.isAir()) {
                         enumdirection1 = enumdirection.getClockWise();
                         Direction enumdirection2 = enumdirection.getCounterClockWise();
-                        boolean flag = (Boolean) state.getValue(VineBlock.getPropertyForFace(enumdirection1));
-                        boolean flag1 = (Boolean) state.getValue(VineBlock.getPropertyForFace(enumdirection2));
+                        boolean flag = ((Boolean) state.getValue(VineBlock.getPropertyForFace(enumdirection1))).booleanValue();
+                        boolean flag1 = ((Boolean) state.getValue(VineBlock.getPropertyForFace(enumdirection2))).booleanValue();
                         BlockPos blockposition3 = blockposition2.relative(enumdirection1);
                         BlockPos blockposition4 = blockposition2.relative(enumdirection2);
 
@@ -275,7 +275,7 @@ public class VineBlock extends Block {
             if (random.nextBoolean()) {
                 BooleanProperty blockstateboolean = VineBlock.getPropertyForFace(enumdirection);
 
-                if ((Boolean) above.getValue(blockstateboolean)) {
+                if (((Boolean) above.getValue(blockstateboolean)).booleanValue()) {
                     state = (BlockState) state.setValue(blockstateboolean, Boolean.TRUE);
                 }
             }
@@ -285,7 +285,7 @@ public class VineBlock extends Block {
     }
 
     private boolean hasHorizontalConnection(BlockState state) {
-        return (Boolean) state.getValue(VineBlock.NORTH) || (Boolean) state.getValue(VineBlock.EAST) || (Boolean) state.getValue(VineBlock.SOUTH) || (Boolean) state.getValue(VineBlock.WEST);
+        return ((Boolean) state.getValue(VineBlock.NORTH)).booleanValue() || ((Boolean) state.getValue(VineBlock.EAST)).booleanValue() || ((Boolean) state.getValue(VineBlock.SOUTH)).booleanValue() || ((Boolean) state.getValue(VineBlock.WEST)).booleanValue();
     }
 
     private boolean canSpread(BlockGetter world, BlockPos pos) {
@@ -329,7 +329,7 @@ public class VineBlock extends Block {
 
             if (enumdirection != Direction.DOWN) {
                 BooleanProperty blockstateboolean = VineBlock.getPropertyForFace(enumdirection);
-                boolean flag1 = flag && (Boolean) iblockdata.getValue(blockstateboolean);
+                boolean flag1 = flag && ((Boolean) iblockdata.getValue(blockstateboolean)).booleanValue();
 
                 if (!flag1 && this.canSupportAtFace(ctx.getLevel(), ctx.getClickedPos(), enumdirection)) {
                     return (BlockState) iblockdata1.setValue(blockstateboolean, Boolean.TRUE);
diff --git a/src/main/java/net/minecraft/world/level/block/WeightedPressurePlateBlock.java b/src/main/java/net/minecraft/world/level/block/WeightedPressurePlateBlock.java
index 4aa90f4eebb2cf76d847a887e83a50558d24bba4..6ea2fab19b73fa9679cf187d5fda93132f9d955e 100644
--- a/src/main/java/net/minecraft/world/level/block/WeightedPressurePlateBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/WeightedPressurePlateBlock.java
@@ -79,7 +79,7 @@ public class WeightedPressurePlateBlock extends BasePressurePlateBlock {
 
     @Override
     protected int getSignalForState(BlockState state) {
-        return (Integer) state.getValue(WeightedPressurePlateBlock.POWER);
+        return ((Integer) state.getValue(WeightedPressurePlateBlock.POWER)).intValue();
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/entity/AbstractFurnaceBlockEntity.java b/src/main/java/net/minecraft/world/level/block/entity/AbstractFurnaceBlockEntity.java
index fe2581da6eadec788616a240465e6a913e2ee3b7..4415424206dcc1c4692ebab7daece792a9a61c83 100644
--- a/src/main/java/net/minecraft/world/level/block/entity/AbstractFurnaceBlockEntity.java
+++ b/src/main/java/net/minecraft/world/level/block/entity/AbstractFurnaceBlockEntity.java
@@ -309,7 +309,7 @@ public abstract class AbstractFurnaceBlockEntity extends BaseContainerBlockEntit
         CompoundTag nbttagcompound1 = new CompoundTag();
 
         this.recipesUsed.forEach((minecraftkey, integer) -> {
-            nbttagcompound1.putInt(minecraftkey.toString(), integer);
+            nbttagcompound1.putInt(minecraftkey.toString(), integer.intValue());
         });
         nbt.put("RecipesUsed", nbttagcompound1);
     }
@@ -482,14 +482,14 @@ public abstract class AbstractFurnaceBlockEntity extends BaseContainerBlockEntit
         } else {
             Item item = fuel.getItem();
 
-            return (Integer) AbstractFurnaceBlockEntity.getFuel().getOrDefault(item, Integer.valueOf(0));
+            return ((Integer) AbstractFurnaceBlockEntity.getFuel().getOrDefault(item, Integer.valueOf(0))).intValue();
         }
     }
 
     // Paper start
     public static int getTotalCookTime(@Nullable Level world, RecipeType<? extends AbstractCookingRecipe> recipeType, AbstractFurnaceBlockEntity furnace, double cookSpeedMultiplier) {
         /* Scale the recipe's cooking time to the current cookSpeedMultiplier */
-        int cookTime = world != null ? furnace.quickCheck.getRecipeFor(furnace, world).map(AbstractCookingRecipe::getCookingTime).orElse(Integer.valueOf(200)) : (net.minecraft.server.MinecraftServer.getServer().getRecipeManager().getRecipeFor(recipeType, furnace, world /* passing a null level here is safe. world is only used for map extending recipes which won't happen here */).map(AbstractCookingRecipe::getCookingTime).orElse(Integer.valueOf(200)));
+        int cookTime = (world != null ? furnace.quickCheck.getRecipeFor(furnace, world).map(AbstractCookingRecipe::getCookingTime).orElse(Integer.valueOf(200)) : (net.minecraft.server.MinecraftServer.getServer().getRecipeManager().getRecipeFor(recipeType, furnace, world /* passing a null level here is safe. world is only used for map extending recipes which won't happen here */).map(AbstractCookingRecipe::getCookingTime).orElse(Integer.valueOf(200)))).intValue();
         return (int) Math.ceil (cookTime / cookSpeedMultiplier);
     }
     // Paper end
diff --git a/src/main/java/net/minecraft/world/level/block/entity/BeehiveBlockEntity.java b/src/main/java/net/minecraft/world/level/block/entity/BeehiveBlockEntity.java
index 2baf1166a22185eedb8732a06caad93e12c2e89a..e2ba7cee5bbfcd07238e76682c9443cff268d8f5 100644
--- a/src/main/java/net/minecraft/world/level/block/entity/BeehiveBlockEntity.java
+++ b/src/main/java/net/minecraft/world/level/block/entity/BeehiveBlockEntity.java
@@ -145,7 +145,7 @@ public class BeehiveBlockEntity extends BlockEntity {
     }
     // Paper end
     public static int getHoneyLevel(BlockState state) {
-        return (Integer) state.getValue(BeehiveBlock.HONEY_LEVEL);
+        return ((Integer) state.getValue(BeehiveBlock.HONEY_LEVEL)).intValue();
     }
 
     @VisibleForDebug
diff --git a/src/main/java/net/minecraft/world/level/block/entity/CampfireBlockEntity.java b/src/main/java/net/minecraft/world/level/block/entity/CampfireBlockEntity.java
index 830326496e2f961682daadc7a7859247042b4cdd..d4a089e2681bf929a69c1e6aa7c68257e12b9c89 100644
--- a/src/main/java/net/minecraft/world/level/block/entity/CampfireBlockEntity.java
+++ b/src/main/java/net/minecraft/world/level/block/entity/CampfireBlockEntity.java
@@ -126,7 +126,7 @@ public class CampfireBlockEntity extends BlockEntity implements Clearable {
 
         if (randomsource.nextFloat() < 0.11F) {
             for (i = 0; i < randomsource.nextInt(2) + 2; ++i) {
-                CampfireBlock.makeParticles(world, pos, (Boolean) state.getValue(CampfireBlock.SIGNAL_FIRE), false);
+                CampfireBlock.makeParticles(world, pos, ((Boolean) state.getValue(CampfireBlock.SIGNAL_FIRE)).booleanValue(), false);
             }
         }
 
diff --git a/src/main/java/net/minecraft/world/level/block/entity/CommandBlockEntity.java b/src/main/java/net/minecraft/world/level/block/entity/CommandBlockEntity.java
index 876c6c5ffb6a70347254318aeaceae8b3e936216..b05fbc201ebc03df2ca8943b947f7c75aa1b7213 100644
--- a/src/main/java/net/minecraft/world/level/block/entity/CommandBlockEntity.java
+++ b/src/main/java/net/minecraft/world/level/block/entity/CommandBlockEntity.java
@@ -158,7 +158,7 @@ public class CommandBlockEntity extends BlockEntity {
     public boolean isConditional() {
         BlockState iblockdata = this.level.getBlockState(this.getBlockPos());
 
-        return iblockdata.getBlock() instanceof CommandBlock ? (Boolean) iblockdata.getValue(CommandBlock.CONDITIONAL) : false;
+        return iblockdata.getBlock() instanceof CommandBlock ? ((Boolean) iblockdata.getValue(CommandBlock.CONDITIONAL)).booleanValue() : false;
     }
 
     public static enum Mode {
diff --git a/src/main/java/net/minecraft/world/level/block/entity/HopperBlockEntity.java b/src/main/java/net/minecraft/world/level/block/entity/HopperBlockEntity.java
index e559e868546c16abfb87e330feec6bc629847643..3e1e7fa63edf7d672454360f7b71ed9b0d47496f 100644
--- a/src/main/java/net/minecraft/world/level/block/entity/HopperBlockEntity.java
+++ b/src/main/java/net/minecraft/world/level/block/entity/HopperBlockEntity.java
@@ -151,7 +151,7 @@ public class HopperBlockEntity extends RandomizableContainerBlockEntity implemen
         if (world.isClientSide) {
             return false;
         } else {
-            if (!blockEntity.isOnCooldown() && (Boolean) state.getValue(HopperBlock.ENABLED)) {
+            if (!blockEntity.isOnCooldown() && ((Boolean) state.getValue(HopperBlock.ENABLED)).booleanValue()) {
                 boolean flag = false;
 
                 if (!blockEntity.isEmpty()) {
@@ -456,8 +456,8 @@ public class HopperBlockEntity extends RandomizableContainerBlockEntity implemen
             skipPullModeEventFire = skipHopperEvents;
             return !HopperBlockEntity.isEmptyContainer(iinventory, enumdirection) && anyMatch(iinventory, enumdirection, (item, i) -> {
                 // Logic copied from below to avoid extra getItem calls
-                if (!item.isEmpty() && canTakeItemFromContainer(iinventory, item, i, enumdirection)) {
-                    return hopperPull(world, hopper, iinventory, item, i);
+                if (!item.isEmpty() && canTakeItemFromContainer(iinventory, item, i.intValue(), enumdirection)) {
+                    return hopperPull(world, hopper, iinventory, item, i.intValue());
                 } else {
                     return false;
                 }
diff --git a/src/main/java/net/minecraft/world/level/block/piston/PistonBaseBlock.java b/src/main/java/net/minecraft/world/level/block/piston/PistonBaseBlock.java
index 7dcaa4f99e685ed6fcc2720bad6f6603e282faf5..61187e52e4d5226f6ce546012e9bfe46a53619d3 100644
--- a/src/main/java/net/minecraft/world/level/block/piston/PistonBaseBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/piston/PistonBaseBlock.java
@@ -68,7 +68,7 @@ public class PistonBaseBlock extends DirectionalBlock {
 
     @Override
     public VoxelShape getShape(BlockState state, BlockGetter world, BlockPos pos, CollisionContext context) {
-        if ((Boolean) state.getValue(PistonBaseBlock.EXTENDED)) {
+        if (((Boolean) state.getValue(PistonBaseBlock.EXTENDED)).booleanValue()) {
             switch ((Direction) state.getValue(PistonBaseBlock.FACING)) {
                 case DOWN:
                     return PistonBaseBlock.DOWN_AABB;
@@ -124,11 +124,11 @@ public class PistonBaseBlock extends DirectionalBlock {
         Direction enumdirection = (Direction) state.getValue(PistonBaseBlock.FACING);
         boolean flag = this.getNeighborSignal(world, pos, enumdirection);
 
-        if (flag && !(Boolean) state.getValue(PistonBaseBlock.EXTENDED)) {
+        if (flag && !((Boolean) state.getValue(PistonBaseBlock.EXTENDED)).booleanValue()) {
             if ((new PistonStructureResolver(world, pos, enumdirection, true)).resolve()) {
                 world.blockEvent(pos, this, 0, enumdirection.get3DDataValue());
             }
-        } else if (!flag && (Boolean) state.getValue(PistonBaseBlock.EXTENDED)) {
+        } else if (!flag && ((Boolean) state.getValue(PistonBaseBlock.EXTENDED)).booleanValue()) {
             BlockPos blockposition1 = pos.relative(enumdirection, 2);
             BlockState iblockdata1 = world.getBlockState(blockposition1);
             byte b0 = 1;
@@ -320,7 +320,7 @@ public class PistonBaseBlock extends DirectionalBlock {
                             case PUSH_ONLY:
                                 return direction == pistonDir;
                         }
-                    } else if ((Boolean) state.getValue(PistonBaseBlock.EXTENDED)) {
+                    } else if (((Boolean) state.getValue(PistonBaseBlock.EXTENDED)).booleanValue()) {
                         return false;
                     }
 
@@ -522,7 +522,7 @@ public class PistonBaseBlock extends DirectionalBlock {
 
     @Override
     public boolean useShapeForLightOcclusion(BlockState state) {
-        return (Boolean) state.getValue(PistonBaseBlock.EXTENDED);
+        return ((Boolean) state.getValue(PistonBaseBlock.EXTENDED)).booleanValue();
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/piston/PistonMovingBlockEntity.java b/src/main/java/net/minecraft/world/level/block/piston/PistonMovingBlockEntity.java
index 221c5d080d55326e458c1182823d6b49224ef498..7ca8af2b0dbcc79b71a6f5326c032f62d73e650a 100644
--- a/src/main/java/net/minecraft/world/level/block/piston/PistonMovingBlockEntity.java
+++ b/src/main/java/net/minecraft/world/level/block/piston/PistonMovingBlockEntity.java
@@ -291,7 +291,7 @@ public class PistonMovingBlockEntity extends BlockEntity {
                         world.setBlock(pos, blockEntity.movedState, io.papermc.paper.configuration.GlobalConfiguration.get().unsupportedSettings.allowPistonDuplication ? 84 : (84 | 2)); // Paper - force notify (flag 2), it's possible the set type by the piston block (which doesn't notify) set this block to air
                         Block.updateOrDestroy(blockEntity.movedState, blockState, world, pos, 3);
                     } else {
-                        if (blockState.hasProperty(BlockStateProperties.WATERLOGGED) && blockState.getValue(BlockStateProperties.WATERLOGGED)) {
+                        if (blockState.hasProperty(BlockStateProperties.WATERLOGGED) && blockState.<Boolean>getValue(BlockStateProperties.WATERLOGGED).booleanValue()) {
                             blockState = blockState.setValue(BlockStateProperties.WATERLOGGED, Boolean.valueOf(false));
                         }
 
diff --git a/src/main/java/net/minecraft/world/level/block/state/properties/IntegerProperty.java b/src/main/java/net/minecraft/world/level/block/state/properties/IntegerProperty.java
index c8b5a17aff1fcbabc09d600fac91b69f439c4c85..d97e8b97c3201f2178939efb064700add881e716 100644
--- a/src/main/java/net/minecraft/world/level/block/state/properties/IntegerProperty.java
+++ b/src/main/java/net/minecraft/world/level/block/state/properties/IntegerProperty.java
@@ -69,7 +69,7 @@ public class IntegerProperty extends Property<Integer> {
     public Optional<Integer> getValue(String name) {
         try {
             Integer integer = Integer.valueOf(name);
-            return integer >= this.min && integer <= this.max ? Optional.of(integer) : Optional.empty();
+            return integer.intValue() >= this.min && integer.intValue() <= this.max ? Optional.of(integer) : Optional.empty();
         } catch (NumberFormatException var3) {
             return Optional.empty();
         }
diff --git a/src/main/java/net/minecraft/world/level/block/state/properties/Property.java b/src/main/java/net/minecraft/world/level/block/state/properties/Property.java
index c8268755902ca617b68a9e88135bd487f0ba15c1..4f817672959f86a0e7c02891ebf9077710068443 100644
--- a/src/main/java/net/minecraft/world/level/block/state/properties/Property.java
+++ b/src/main/java/net/minecraft/world/level/block/state/properties/Property.java
@@ -88,7 +88,7 @@ public abstract class Property<T extends Comparable<T>> {
             this.hashCode = Integer.valueOf(this.generateHashCode());
         }
 
-        return this.hashCode;
+        return this.hashCode.intValue();
     }
 
     public int generateHashCode() {
diff --git a/src/main/java/net/minecraft/world/level/chunk/LevelChunk.java b/src/main/java/net/minecraft/world/level/chunk/LevelChunk.java
index 24aedd762008fe3a7652cb54d2c30be4a64726dd..462f9f26395ed15c75caf32cd98ff576785f46c9 100644
--- a/src/main/java/net/minecraft/world/level/chunk/LevelChunk.java
+++ b/src/main/java/net/minecraft/world/level/chunk/LevelChunk.java
@@ -1062,7 +1062,7 @@ public class LevelChunk extends ChunkAccess {
 
                 while (shortlistiterator.hasNext()) {
                     Short oshort = (Short) shortlistiterator.next();
-                    BlockPos blockposition = ProtoChunk.unpackOffsetCoordinates(oshort, this.getSectionYFromSectionIndex(i), chunkcoordintpair);
+                    BlockPos blockposition = ProtoChunk.unpackOffsetCoordinates(oshort.shortValue(), this.getSectionYFromSectionIndex(i), chunkcoordintpair);
                     BlockState iblockdata = this.getBlockState(blockposition);
                     FluidState fluid = iblockdata.getFluidState();
 
diff --git a/src/main/java/net/minecraft/world/level/chunk/storage/ChunkSerializer.java b/src/main/java/net/minecraft/world/level/chunk/storage/ChunkSerializer.java
index d4c4d37bcef14e392739d9aae9e20b7d69b05c12..de1cd6a2197e6cb8bffa9d7b441e6a854642e365 100644
--- a/src/main/java/net/minecraft/world/level/chunk/storage/ChunkSerializer.java
+++ b/src/main/java/net/minecraft/world/level/chunk/storage/ChunkSerializer.java
@@ -861,7 +861,7 @@ public class ChunkSerializer {
                 while (shortlistiterator.hasNext()) {
                     Short oshort = (Short) shortlistiterator.next();
 
-                    nbttaglist1.add(ShortTag.valueOf(oshort));
+                    nbttaglist1.add(ShortTag.valueOf(oshort.shortValue()));
                 }
             }
 
diff --git a/src/main/java/net/minecraft/world/level/chunk/storage/EntityStorage.java b/src/main/java/net/minecraft/world/level/chunk/storage/EntityStorage.java
index 13b67b48175e06e694f6f4e44a669b132a7c2886..b5f5d45e0762f9e01ae2867f3449060771d849f6 100644
--- a/src/main/java/net/minecraft/world/level/chunk/storage/EntityStorage.java
+++ b/src/main/java/net/minecraft/world/level/chunk/storage/EntityStorage.java
@@ -116,7 +116,7 @@ public class EntityStorage implements EntityPersistentStorage<Entity> {
             final EntityType<?> entityType = entity.getType();
             final int saveLimit = level.paperConfig().chunks.entityPerChunkSaveLimit.getOrDefault(entityType, -1);
             if (saveLimit > -1) {
-                if (savedEntityCounts.getOrDefault(entityType, Integer.valueOf(0)) >= saveLimit) {
+                if (savedEntityCounts.getOrDefault(entityType, Integer.valueOf(0)).intValue() >= saveLimit) {
                     return;
                 }
                 savedEntityCounts.merge(entityType, Integer.valueOf(1), Integer::sum);
diff --git a/src/main/java/net/minecraft/world/level/chunk/storage/RegionFileStorage.java b/src/main/java/net/minecraft/world/level/chunk/storage/RegionFileStorage.java
index 2961820f3c72abb5fc8f75135be3cc8114f15cea..eae02b93f03ac191ad839c92abb05c48391e636b 100644
--- a/src/main/java/net/minecraft/world/level/chunk/storage/RegionFileStorage.java
+++ b/src/main/java/net/minecraft/world/level/chunk/storage/RegionFileStorage.java
@@ -121,7 +121,7 @@ public class RegionFileStorage implements AutoCloseable {
     private static final int OVERZEALOUS_THRESHOLD = 1024;
     private static int SIZE_THRESHOLD = DEFAULT_SIZE_THRESHOLD;
     private static void resetFilterThresholds() {
-        SIZE_THRESHOLD = Math.max(1024 * 4, Integer.getInteger("Paper.FilterThreshhold", DEFAULT_SIZE_THRESHOLD));
+        SIZE_THRESHOLD = Math.max(1024 * 4, Integer.getInteger("Paper.FilterThreshhold", DEFAULT_SIZE_THRESHOLD).intValue());
     }
     static {
         resetFilterThresholds();
diff --git a/src/main/java/net/minecraft/world/level/dimension/end/EndDragonFight.java b/src/main/java/net/minecraft/world/level/dimension/end/EndDragonFight.java
index 88b6eaac48b266b6bf23ec3d6cd63c69098fa149..ddfd3d90ad3a4a70ead58f906fc64e7ea1000644 100644
--- a/src/main/java/net/minecraft/world/level/dimension/end/EndDragonFight.java
+++ b/src/main/java/net/minecraft/world/level/dimension/end/EndDragonFight.java
@@ -399,7 +399,7 @@ public class EndDragonFight {
 
     private void spawnNewGateway() {
         if (!this.gateways.isEmpty()) {
-            int i = this.gateways.remove(this.gateways.size() - 1);
+            int i = this.gateways.remove(this.gateways.size() - 1).intValue();
             int j = Mth.floor(96.0D * Math.cos(2.0D * (-Math.PI + 0.15707963267948966D * (double)i)));
             int k = Mth.floor(96.0D * Math.sin(2.0D * (-Math.PI + 0.15707963267948966D * (double)i)));
             this.spawnNewGateway(new BlockPos(j, 75, k));
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/SpikeFeature.java b/src/main/java/net/minecraft/world/level/levelgen/feature/SpikeFeature.java
index 51eeffd2a2f4e727ca8083d78a6fb5f51774d905..45c717fd3e81864b5ad0ae46872f36eb7f03416f 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/SpikeFeature.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/SpikeFeature.java
@@ -169,13 +169,13 @@ public class SpikeFeature extends Feature<SpikeConfiguration> {
     static class SpikeCacheLoader extends CacheLoader<Long, List<SpikeFeature.EndSpike>> {
         @Override
         public List<SpikeFeature.EndSpike> load(Long long_) {
-            IntArrayList intArrayList = Util.toShuffledList(IntStream.range(0, 10), RandomSource.create(long_));
+            IntArrayList intArrayList = Util.toShuffledList(IntStream.range(0, 10), RandomSource.create(long_.longValue()));
             List<SpikeFeature.EndSpike> list = Lists.newArrayList();
 
             for(int i = 0; i < 10; ++i) {
                 int j = Mth.floor(42.0D * Math.cos(2.0D * (-Math.PI + (Math.PI / 10D) * (double)i)));
                 int k = Mth.floor(42.0D * Math.sin(2.0D * (-Math.PI + (Math.PI / 10D) * (double)i)));
-                int l = intArrayList.get(i);
+                int l = intArrayList.get(i).intValue();
                 int m = 2 + l / 3;
                 int n = 76 + l * 3;
                 boolean bl = l == 1 || l == 2;
diff --git a/src/main/java/net/minecraft/world/level/levelgen/structure/placement/StructurePlacement.java b/src/main/java/net/minecraft/world/level/levelgen/structure/placement/StructurePlacement.java
index 6bc336bffc5e6b7c76f34fd23814631cf717c7a6..06c9ce065fe40e887af44430b3d23de2cd1815a2 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/structure/placement/StructurePlacement.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/structure/placement/StructurePlacement.java
@@ -103,7 +103,7 @@ public abstract class StructurePlacement {
         worldgenRandom.setLargeFeatureSeed(seed, chunkX, chunkZ);
         // Paper start
         } else {
-            worldgenRandom.setLargeFeatureWithSalt(seed, chunkX, chunkZ, saltOverride);
+            worldgenRandom.setLargeFeatureWithSalt(seed, chunkX, chunkZ, saltOverride.intValue());
         }
         // Paper end
         return worldgenRandom.nextDouble() < (double)frequency;
@@ -111,7 +111,7 @@ public abstract class StructurePlacement {
 
     private static boolean legacyArbitrarySaltProbabilityReducer(long seed, int salt, int chunkX, int chunkZ, float frequency, @org.jetbrains.annotations.Nullable Integer saltOverride) { // Paper
         WorldgenRandom worldgenRandom = new WorldgenRandom(new LegacyRandomSource(0L));
-        worldgenRandom.setLargeFeatureWithSalt(seed, chunkX, chunkZ, saltOverride != null ? saltOverride : HIGHLY_ARBITRARY_RANDOM_SALT); // Paper
+        worldgenRandom.setLargeFeatureWithSalt(seed, chunkX, chunkZ, saltOverride != null ? saltOverride.intValue() : HIGHLY_ARBITRARY_RANDOM_SALT); // Paper
         return worldgenRandom.nextFloat() < frequency;
     }
 
diff --git a/src/main/java/net/minecraft/world/level/levelgen/structure/pools/StructureTemplatePool.java b/src/main/java/net/minecraft/world/level/levelgen/structure/pools/StructureTemplatePool.java
index 194864460a5508b6b60f445d6c7923c2ae14a15b..92427958f3bdd9539f443e6a71de4d9beea95d33 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/structure/pools/StructureTemplatePool.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/structure/pools/StructureTemplatePool.java
@@ -44,7 +44,7 @@ public class StructureTemplatePool {
         for(Pair<StructurePoolElement, Integer> pair : elementCounts) {
             StructurePoolElement structurePoolElement = pair.getFirst();
 
-            for(int i = 0; i < pair.getSecond(); ++i) {
+            for(int i = 0; i < pair.getSecond().intValue(); ++i) {
                 this.templates.add(structurePoolElement);
             }
         }
@@ -60,7 +60,7 @@ public class StructureTemplatePool {
             StructurePoolElement structurePoolElement = pair.getFirst().apply(projection);
             this.rawTemplates.add(Pair.of(structurePoolElement, pair.getSecond()));
 
-            for(int i = 0; i < pair.getSecond(); ++i) {
+            for(int i = 0; i < pair.getSecond().intValue(); ++i) {
                 this.templates.add(structurePoolElement);
             }
         }
diff --git a/src/main/java/net/minecraft/world/level/lighting/BlockLightEngine.java b/src/main/java/net/minecraft/world/level/lighting/BlockLightEngine.java
index 37d7165dfd17da03428f8dbbbf95aa8005be289c..981e723e40f8777ca3f162bcf8a25fc2b8e6fd89 100644
--- a/src/main/java/net/minecraft/world/level/lighting/BlockLightEngine.java
+++ b/src/main/java/net/minecraft/world/level/lighting/BlockLightEngine.java
@@ -47,13 +47,13 @@ public final class BlockLightEngine extends LayerLightEngine<BlockLightSectionSt
             } else {
                 //MutableInt mutableint = new MutableInt(); // Paper - share mutableint, single threaded
                 BlockState blockState = this.getStateAndOpacity(targetId, mutableInt);
-                if (mutableInt.getValue() >= 15) {
+                if (mutableInt.getValue().intValue() >= 15) {
                     return 15;
                 } else {
                     BlockState blockState2 = this.getStateAndOpacity(sourceId, (MutableInt)null);
                     VoxelShape voxelShape = this.getShape(blockState2, sourceId, direction);
                     VoxelShape voxelShape2 = this.getShape(blockState, targetId, direction.getOpposite());
-                    return Shapes.faceShapeOccludes(voxelShape, voxelShape2) ? 15 : level + Math.max(1, mutableInt.getValue());
+                    return Shapes.faceShapeOccludes(voxelShape, voxelShape2) ? 15 : level + Math.max(1, mutableInt.getValue().intValue());
                 }
             }
         }
diff --git a/src/main/java/net/minecraft/world/level/lighting/SkyLightEngine.java b/src/main/java/net/minecraft/world/level/lighting/SkyLightEngine.java
index f8c721bef15dcf6777344ca42d5085183674c848..685ce5bc39b75cc75456a41269b1f3788c2f92b0 100644
--- a/src/main/java/net/minecraft/world/level/lighting/SkyLightEngine.java
+++ b/src/main/java/net/minecraft/world/level/lighting/SkyLightEngine.java
@@ -29,7 +29,7 @@ public final class SkyLightEngine extends LayerLightEngine<SkyLightSectionStorag
             } else {
                 //MutableInt mutableint = new MutableInt(); // Paper - share mutableint, single threaded
                 BlockState blockState = this.getStateAndOpacity(targetId, mutableInt);
-                if (mutableInt.getValue() >= 15) {
+                if (mutableInt.getValue().intValue() >= 15) {
                     return 15;
                 } else {
                     int i = BlockPos.getX(sourceId);
@@ -53,7 +53,7 @@ public final class SkyLightEngine extends LayerLightEngine<SkyLightSectionStorag
                         } else {
                             boolean bl = i == l && k == n;
                             boolean bl2 = bl && j > m;
-                            return bl2 && level == 0 && mutableInt.getValue() == 0 ? 0 : level + Math.max(1, mutableInt.getValue());
+                            return bl2 && level == 0 && mutableInt.getValue().intValue() == 0 ? 0 : level + Math.max(1, mutableInt.getValue().intValue());
                         }
                     }
                 }
diff --git a/src/main/java/net/minecraft/world/level/material/FlowingFluid.java b/src/main/java/net/minecraft/world/level/material/FlowingFluid.java
index fb7e61ddbc0b005111d043238cfdf78137141d21..51122db1ba84b1b67f60a41d1ca9e64ad225af41 100644
--- a/src/main/java/net/minecraft/world/level/material/FlowingFluid.java
+++ b/src/main/java/net/minecraft/world/level/material/FlowingFluid.java
@@ -102,7 +102,7 @@ public abstract class FlowingFluid extends Fluid {
 
         Vec3 vec3d = new Vec3(d0, 0.0D, d1);
 
-        if ((Boolean) state.getValue(FlowingFluid.FALLING)) {
+        if (((Boolean) state.getValue(FlowingFluid.FALLING)).booleanValue()) {
             Iterator iterator1 = Direction.Plane.HORIZONTAL.iterator();
 
             while (iterator1.hasNext()) {
@@ -161,7 +161,7 @@ public abstract class FlowingFluid extends Fluid {
     private void spreadToSides(Level world, BlockPos pos, FluidState fluidState, BlockState blockState) {
         int i = fluidState.getAmount() - this.getDropOff(world);
 
-        if ((Boolean) fluidState.getValue(FlowingFluid.FALLING)) {
+        if (((Boolean) fluidState.getValue(FlowingFluid.FALLING)).booleanValue()) {
             i = 7;
         }
 
@@ -506,7 +506,7 @@ public abstract class FlowingFluid extends Fluid {
     }
 
     protected static int getLegacyLevel(FluidState state) {
-        return state.isSource() ? 0 : 8 - Math.min(state.getAmount(), 8) + ((Boolean) state.getValue(FlowingFluid.FALLING) ? 8 : 0);
+        return state.isSource() ? 0 : 8 - Math.min(state.getAmount(), 8) + (((Boolean) state.getValue(FlowingFluid.FALLING)).booleanValue() ? 8 : 0);
     }
 
     private static boolean hasSameAbove(FluidState state, BlockGetter world, BlockPos pos) {
diff --git a/src/main/java/net/minecraft/world/level/material/LavaFluid.java b/src/main/java/net/minecraft/world/level/material/LavaFluid.java
index 47c8960834be0c0ddae363d6de6c47c8bd7e67f7..7cf103c4fc6390a32d781cf462f91fc78e4f81fb 100644
--- a/src/main/java/net/minecraft/world/level/material/LavaFluid.java
+++ b/src/main/java/net/minecraft/world/level/material/LavaFluid.java
@@ -187,7 +187,7 @@ public abstract class LavaFluid extends FlowingFluid {
     public int getSpreadDelay(Level world, BlockPos pos, FluidState oldState, FluidState newState) {
         int i = this.getTickDelay(world);
 
-        if (!oldState.isEmpty() && !newState.isEmpty() && !(Boolean) oldState.getValue(LavaFluid.FALLING) && !(Boolean) newState.getValue(LavaFluid.FALLING) && newState.getHeight(world, pos) > oldState.getHeight(world, pos) && world.getRandom().nextInt(4) != 0) {
+        if (!oldState.isEmpty() && !newState.isEmpty() && !((Boolean) oldState.getValue(LavaFluid.FALLING)).booleanValue() && !((Boolean) newState.getValue(LavaFluid.FALLING)).booleanValue() && newState.getHeight(world, pos) > oldState.getHeight(world, pos) && world.getRandom().nextInt(4) != 0) {
             i *= 4;
         }
 
@@ -252,7 +252,7 @@ public abstract class LavaFluid extends FlowingFluid {
 
         @Override
         public int getAmount(FluidState state) {
-            return (Integer) state.getValue(LavaFluid.Flowing.LEVEL);
+            return ((Integer) state.getValue(Flowing.LEVEL)).intValue();
         }
 
         @Override
diff --git a/src/main/java/net/minecraft/world/level/material/WaterFluid.java b/src/main/java/net/minecraft/world/level/material/WaterFluid.java
index 82e85fbbd45244d02df90fa00c9046e7f51275a2..3dca058a4111a528605c482a96cfc962eeca455c 100644
--- a/src/main/java/net/minecraft/world/level/material/WaterFluid.java
+++ b/src/main/java/net/minecraft/world/level/material/WaterFluid.java
@@ -43,7 +43,7 @@ public abstract class WaterFluid extends FlowingFluid {
 
     @Override
     public void animateTick(Level world, BlockPos pos, FluidState state, RandomSource random) {
-        if (!state.isSource() && !state.getValue(FALLING)) {
+        if (!state.isSource() && !state.<Boolean>getValue(FALLING).booleanValue()) {
             if (random.nextInt(64) == 0) {
                 world.playLocalSound((double)pos.getX() + 0.5D, (double)pos.getY() + 0.5D, (double)pos.getZ() + 0.5D, SoundEvents.WATER_AMBIENT, SoundSource.BLOCKS, random.nextFloat() * 0.25F + 0.75F, random.nextFloat() + 0.5F, false);
             }
@@ -126,7 +126,7 @@ public abstract class WaterFluid extends FlowingFluid {
 
         @Override
         public int getAmount(FluidState state) {
-            return state.getValue(LEVEL);
+            return state.<Integer>getValue(LEVEL).intValue();
         }
 
         @Override
diff --git a/src/main/java/net/minecraft/world/level/pathfinder/WalkNodeEvaluator.java b/src/main/java/net/minecraft/world/level/pathfinder/WalkNodeEvaluator.java
index bf0b768f473acee427fb272ec8efdd8d4a86755c..1e179292584a4cfb4a32cbad508348a6e15060b8 100644
--- a/src/main/java/net/minecraft/world/level/pathfinder/WalkNodeEvaluator.java
+++ b/src/main/java/net/minecraft/world/level/pathfinder/WalkNodeEvaluator.java
@@ -519,17 +519,17 @@ public class WalkNodeEvaluator extends NodeEvaluator {
                     return BlockPathTypes.LAVA;
                 } else if (isBurningBlock(blockState)) {
                     return BlockPathTypes.DAMAGE_FIRE;
-                } else if (DoorBlock.isWoodenDoor(blockState) && !blockState.getValue(DoorBlock.OPEN)) {
+                } else if (DoorBlock.isWoodenDoor(blockState) && !blockState.<Boolean>getValue(DoorBlock.OPEN).booleanValue()) {
                     return BlockPathTypes.DOOR_WOOD_CLOSED;
-                } else if (block instanceof DoorBlock && material == Material.METAL && !blockState.getValue(DoorBlock.OPEN)) {
+                } else if (block instanceof DoorBlock && material == Material.METAL && !blockState.<Boolean>getValue(DoorBlock.OPEN).booleanValue()) {
                     return BlockPathTypes.DOOR_IRON_CLOSED;
-                } else if (block instanceof DoorBlock && blockState.getValue(DoorBlock.OPEN)) {
+                } else if (block instanceof DoorBlock && blockState.<Boolean>getValue(DoorBlock.OPEN).booleanValue()) {
                     return BlockPathTypes.DOOR_OPEN;
                 } else if (block instanceof BaseRailBlock) {
                     return BlockPathTypes.RAIL;
                 } else if (block instanceof LeavesBlock) {
                     return BlockPathTypes.LEAVES;
-                } else if (!blockState.is(BlockTags.FENCES) && !blockState.is(BlockTags.WALLS) && (!(block instanceof FenceGateBlock) || blockState.getValue(FenceGateBlock.OPEN))) {
+                } else if (!blockState.is(BlockTags.FENCES) && !blockState.is(BlockTags.WALLS) && (!(block instanceof FenceGateBlock) || blockState.<Boolean>getValue(FenceGateBlock.OPEN).booleanValue())) {
                     if (!blockState.isPathfindable(world, pos, PathComputationType.LAND)) {
                         return BlockPathTypes.BLOCKED;
                     } else {
diff --git a/src/main/java/net/minecraft/world/level/storage/loot/LootTable.java b/src/main/java/net/minecraft/world/level/storage/loot/LootTable.java
index 33eb36cbde09bccd6ca2f437bcd1ea93430635fb..08387b748df84ce288e369b6b3ac0cb968ea13fd 100644
--- a/src/main/java/net/minecraft/world/level/storage/loot/LootTable.java
+++ b/src/main/java/net/minecraft/world/level/storage/loot/LootTable.java
@@ -163,9 +163,9 @@ public class LootTable {
             }
 
             if (itemstack.isEmpty()) {
-                iinventory.setItem((Integer) list.remove(list.size() - 1), ItemStack.EMPTY);
+                iinventory.setItem(((Integer) list.remove(list.size() - 1)).intValue(), ItemStack.EMPTY);
             } else {
-                iinventory.setItem((Integer) list.remove(list.size() - 1), itemstack);
+                iinventory.setItem(((Integer) list.remove(list.size() - 1)).intValue(), itemstack);
             }
         }
 
diff --git a/src/main/java/net/minecraft/world/level/storage/loot/entries/LootPoolSingletonContainer.java b/src/main/java/net/minecraft/world/level/storage/loot/entries/LootPoolSingletonContainer.java
index 93e287433ab6d1ad7b4fddf340568dc751e84c29..a698afefcf1565bb4a505ae079d6735e379f908f 100644
--- a/src/main/java/net/minecraft/world/level/storage/loot/entries/LootPoolSingletonContainer.java
+++ b/src/main/java/net/minecraft/world/level/storage/loot/entries/LootPoolSingletonContainer.java
@@ -115,7 +115,7 @@ public abstract class LootPoolSingletonContainer extends LootPoolEntryContainer
         public int getWeight(float luck) {
             // Paper start - Offer an alternative loot formula to refactor how luck bonus applies
             // SEE: https://luckformula.emc.gs for details and data
-            if (LootPoolSingletonContainer.this.lastLuck != null && LootPoolSingletonContainer.this.lastLuck == luck) {
+            if (LootPoolSingletonContainer.this.lastLuck != null && LootPoolSingletonContainer.this.lastLuck.floatValue() == luck) {
                 return lastWeight;
             }
             // This is vanilla
diff --git a/src/main/java/net/minecraft/world/level/storage/loot/functions/LootingEnchantFunction.java b/src/main/java/net/minecraft/world/level/storage/loot/functions/LootingEnchantFunction.java
index c66e07b1b9dcffb9bad77375a985445486b85872..1d83136d9e60859d5f9d5bca8ea6ac6957089776 100644
--- a/src/main/java/net/minecraft/world/level/storage/loot/functions/LootingEnchantFunction.java
+++ b/src/main/java/net/minecraft/world/level/storage/loot/functions/LootingEnchantFunction.java
@@ -51,7 +51,7 @@ public class LootingEnchantFunction extends LootItemConditionalFunction {
             int i = EnchantmentHelper.getMobLooting((LivingEntity) entity);
             // CraftBukkit start - use lootingModifier if set by plugin
             if (context.hasParam(LootContextParams.LOOTING_MOD)) {
-                i = context.getParamOrNull(LootContextParams.LOOTING_MOD);
+                i = context.<Integer>getParamOrNull(LootContextParams.LOOTING_MOD).intValue();
             }
             // CraftBukkit end
 
diff --git a/src/main/java/net/minecraft/world/level/storage/loot/predicates/ExplosionCondition.java b/src/main/java/net/minecraft/world/level/storage/loot/predicates/ExplosionCondition.java
index da399b1809bf96a6de04ad4a3b207a71f0f0f2b1..e210329e9eb78c2460226c66211c038b7e617cb3 100644
--- a/src/main/java/net/minecraft/world/level/storage/loot/predicates/ExplosionCondition.java
+++ b/src/main/java/net/minecraft/world/level/storage/loot/predicates/ExplosionCondition.java
@@ -31,7 +31,7 @@ public class ExplosionCondition implements LootItemCondition {
 
         if (ofloat != null) {
             RandomSource randomsource = loottableinfo.getRandom();
-            float f = 1.0F / ofloat;
+            float f = 1.0F / ofloat.floatValue();
 
             // CraftBukkit - <= to < to allow for plugins to completely disable block drops from explosions
             return randomsource.nextFloat() < f;
diff --git a/src/main/java/net/minecraft/world/level/storage/loot/predicates/LootItemRandomChanceWithLootingCondition.java b/src/main/java/net/minecraft/world/level/storage/loot/predicates/LootItemRandomChanceWithLootingCondition.java
index b2d1e4766ef5d9be0534e49074d5cadda8902888..b08444058c412c90b47f7deccda4f29a211cacd9 100644
--- a/src/main/java/net/minecraft/world/level/storage/loot/predicates/LootItemRandomChanceWithLootingCondition.java
+++ b/src/main/java/net/minecraft/world/level/storage/loot/predicates/LootItemRandomChanceWithLootingCondition.java
@@ -42,7 +42,7 @@ public class LootItemRandomChanceWithLootingCondition implements LootItemConditi
         }
         // CraftBukkit start - only use lootingModifier if set by Bukkit
         if (loottableinfo.hasParam(LootContextParams.LOOTING_MOD)) {
-            i = loottableinfo.getParamOrNull(LootContextParams.LOOTING_MOD);
+            i = loottableinfo.<Integer>getParamOrNull(LootContextParams.LOOTING_MOD).intValue();
         }
         // CraftBukkit end
 
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftEffect.java b/src/main/java/org/bukkit/craftbukkit/CraftEffect.java
index 13a97074afe9dd03ebf8ba4c9000712fda9a9efe..584d31bfe294efd0c8c7c88e79418a54fc18d56b 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftEffect.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftEffect.java
@@ -18,7 +18,7 @@ public class CraftEffect {
         int datavalue;
         switch (effect) {
         case VILLAGER_PLANT_GROW:
-            datavalue = (Integer) data;
+            datavalue = ((Integer) data).intValue();
             break;
         case POTION_BREAK:
             datavalue = ((Potion) data).toDamageValue() & 0x3F;
@@ -65,10 +65,10 @@ public class CraftEffect {
             datavalue = Block.getId(CraftMagicNumbers.getBlock((Material) data).defaultBlockState());
             break;
         case COMPOSTER_FILL_ATTEMPT:
-            datavalue = ((Boolean) data) ? 1 : 0;
+            datavalue = (((Boolean) data).booleanValue()) ? 1 : 0;
             break;
         case BONE_MEAL_USE:
-            datavalue = (Integer) data;
+            datavalue = ((Integer) data).intValue();
             break;
         case ELECTRIC_SPARK:
             if (data == null) {
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftLootTable.java b/src/main/java/org/bukkit/craftbukkit/CraftLootTable.java
index 1ca3264a53374c2e9a492208321ce4fb09db0655..449e0d3f39f467ac9420151795d68def14cb918f 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftLootTable.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftLootTable.java
@@ -154,7 +154,7 @@ public class CraftLootTable implements org.bukkit.loot.LootTable {
         }
 
         if (info.hasParam(LootContextParams.LOOTING_MOD)) {
-            contextBuilder.lootingModifier(info.getParamOrNull(LootContextParams.LOOTING_MOD));
+            contextBuilder.lootingModifier(info.<Integer>getParamOrNull(LootContextParams.LOOTING_MOD).intValue());
         }
 
         contextBuilder.luck(info.getLuck());
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftParticle.java b/src/main/java/org/bukkit/craftbukkit/CraftParticle.java
index 5d4a30bfd5f3ef22e73bce82e7e94332c1c90b69..595b301b871875f237cfd4c104d66c8b5f674a61 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftParticle.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftParticle.java
@@ -222,10 +222,10 @@ public enum CraftParticle {
             return new VibrationParticleOption(source, vibration.getArrivalTime());
         }
         if (particle.getDataType() == Float.class) {
-            return new SculkChargeParticleOptions((Float) obj);
+            return new SculkChargeParticleOptions(((Float) obj).floatValue());
         }
         if (particle.getDataType() == Integer.class) {
-            return new ShriekParticleOption((Integer) obj);
+            return new ShriekParticleOption(((Integer) obj).intValue());
         }
         throw new IllegalArgumentException(particle.getDataType().toString());
     }
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index 1c6cf44bf2daedf0299765468bdd648b4d4a41c8..3f1eeb2f7f0246882da00118ec47c3841a740e45 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -776,7 +776,7 @@ public final class CraftServer implements Server {
 
     @Override
     public boolean hasWhitelist() {
-        return this.getProperties().whiteList.get();
+        return this.getProperties().whiteList.get().booleanValue();
     }
 
     // NOTE: Temporary calls through to server.properies until its replaced
@@ -919,7 +919,7 @@ public final class CraftServer implements Server {
             };
             net.minecraft.server.MinecraftServer.getServer().processQueue.add(wait);
             try {
-                return wait.get();
+                return wait.get().booleanValue();
             } catch (InterruptedException e) {
                 Thread.currentThread().interrupt(); // This is proper habit for java. If we aren't handling it, pass it on!
             } catch (Exception e) {
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftWorld.java b/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
index fb9b59e86ee20fc79211429f889dda053581940d..2a9366dd090a181fb8e254c05723a4c760c64d80 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
@@ -367,7 +367,7 @@ public class CraftWorld extends CraftRegionAccessor implements World {
         if (!Bukkit.isPrimaryThread()) {
             return java.util.concurrent.CompletableFuture.supplyAsync(() -> {
                 return Boolean.valueOf(CraftWorld.this.isChunkGenerated(x, z));
-            }, world.getChunkSource().mainThreadProcessor).join();
+            }, world.getChunkSource().mainThreadProcessor).join().booleanValue();
         }
         ChunkAccess chunk = world.getChunkSource().getChunkAtImmediately(x, z);
         if (chunk == null) {
@@ -517,7 +517,7 @@ public class CraftWorld extends CraftRegionAccessor implements World {
 
                     Boolean shouldModify = Boolean.valueOf(chunk.getLevel().chunkPacketBlockController.shouldModify(player, chunk));
                     player.connection.send(refreshPackets.computeIfAbsent(shouldModify, s -> { // Use connection to prevent creating firing event
-                        return new ClientboundLevelChunkWithLightPacket(chunk, this.world.getLightEngine(), null, null, true, (Boolean) s);
+                        return new ClientboundLevelChunkWithLightPacket(chunk, this.world.getLightEngine(), null, null, true, ((Boolean) s).booleanValue());
                     }));
                     // Paper end
                 }
diff --git a/src/main/java/org/bukkit/craftbukkit/block/CraftBarrel.java b/src/main/java/org/bukkit/craftbukkit/block/CraftBarrel.java
index 8d90475ffe6562df058a1204a4c70c95387779cb..9aae82f72b4bfb9f0cdf9c59c000831edca07462 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/CraftBarrel.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/CraftBarrel.java
@@ -36,7 +36,7 @@ public class CraftBarrel extends CraftLootable<BarrelBlockEntity> implements Bar
         requirePlaced();
         if (!getTileEntity().openersCounter.opened) {
             BlockState blockData = getTileEntity().getBlockState();
-            boolean open = blockData.getValue(BarrelBlock.OPEN);
+            boolean open = blockData.<Boolean>getValue(BarrelBlock.OPEN).booleanValue();
 
             if (!open) {
                 getTileEntity().updateBlockState(blockData, true);
diff --git a/src/main/java/org/bukkit/craftbukkit/block/CraftBlock.java b/src/main/java/org/bukkit/craftbukkit/block/CraftBlock.java
index 7efdb0cf8ddb50ca04ad4b77825b9d5ba6306518..657d53ac05764274743cef39a668a83dc855da7d 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/CraftBlock.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/CraftBlock.java
@@ -455,7 +455,7 @@ public class CraftBlock implements Block {
         if (!iblockdata.is(Blocks.REDSTONE_WIRE)) {
             return i;
         } else {
-            int j = iblockdata.getValue(RedStoneWireBlock.POWER);
+            int j = iblockdata.<Integer>getValue(RedStoneWireBlock.POWER).intValue();
 
             return j > i ? j : i;
         }
diff --git a/src/main/java/org/bukkit/craftbukkit/block/CraftFurnace.java b/src/main/java/org/bukkit/craftbukkit/block/CraftFurnace.java
index 37275c88cff84abb2c6a8c66224cbe92644a8374..3cb43bc750fa1007c8cfcdb10ae3cf86b8b3c320 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/CraftFurnace.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/CraftFurnace.java
@@ -123,7 +123,7 @@ public abstract class CraftFurnace<T extends AbstractFurnaceBlockEntity> extends
         this.getSnapshot().getRecipesUsed().clear();
         recipesUsed.forEach((recipe, integer) -> {
             if (integer != null) {
-                this.setRecipeUsedCount(recipe, integer);
+                this.setRecipeUsedCount(recipe, integer.intValue());
             }
         });
     }
diff --git a/src/main/java/org/bukkit/craftbukkit/block/CraftJukebox.java b/src/main/java/org/bukkit/craftbukkit/block/CraftJukebox.java
index effac23bc707316f478245e778df6eb857cbbdbe..0ba9590f2d0ba12db24aeef5b7764e46df891d37 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/CraftJukebox.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/CraftJukebox.java
@@ -74,7 +74,7 @@ public class CraftJukebox extends CraftBlockEntityState<JukeboxBlockEntity> impl
 
     @Override
     public boolean isPlaying() {
-        return getHandle().getValue(JukeboxBlock.HAS_RECORD);
+        return getHandle().<Boolean>getValue(JukeboxBlock.HAS_RECORD).booleanValue();
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/block/data/CraftAgeable.java b/src/main/java/org/bukkit/craftbukkit/block/data/CraftAgeable.java
index a889fc2599885407d15454b67ecc8d1bfa8d75a7..4c1961a24db95f539435726be8196717acf235ba 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/data/CraftAgeable.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/data/CraftAgeable.java
@@ -8,7 +8,7 @@ public abstract class CraftAgeable extends CraftBlockData implements Ageable {
 
     @Override
     public int getAge() {
-        return get(CraftAgeable.AGE);
+        return this.<Integer>get(CraftAgeable.AGE).intValue();
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/block/data/CraftAnaloguePowerable.java b/src/main/java/org/bukkit/craftbukkit/block/data/CraftAnaloguePowerable.java
index a06075a11dfeec444c0dc1a535fdaedb03b41ce3..97535f39e4ea472c6b9d08d27a653cab70777142 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/data/CraftAnaloguePowerable.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/data/CraftAnaloguePowerable.java
@@ -8,7 +8,7 @@ public abstract class CraftAnaloguePowerable extends CraftBlockData implements A
 
     @Override
     public int getPower() {
-        return get(CraftAnaloguePowerable.POWER);
+        return this.<Integer>get(CraftAnaloguePowerable.POWER).intValue();
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/block/data/CraftAttachable.java b/src/main/java/org/bukkit/craftbukkit/block/data/CraftAttachable.java
index 41645adae9d7b6c4d4fbbab9e374da8adadd7fbe..00a7a47ff876923a5b5b1e3d2e5d3fb1d6360f26 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/data/CraftAttachable.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/data/CraftAttachable.java
@@ -8,7 +8,7 @@ public abstract class CraftAttachable extends CraftBlockData implements Attachab
 
     @Override
     public boolean isAttached() {
-        return get(CraftAttachable.ATTACHED);
+        return this.<Boolean>get(CraftAttachable.ATTACHED).booleanValue();
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/block/data/CraftHangable.java b/src/main/java/org/bukkit/craftbukkit/block/data/CraftHangable.java
index a85a5ca71a01fa3129d7f9af446a7b3fa3bf584b..871eb6a802fbb43671a8970222226625afc8848b 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/data/CraftHangable.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/data/CraftHangable.java
@@ -8,7 +8,7 @@ public abstract class CraftHangable extends CraftBlockData implements Hangable {
 
     @Override
     public boolean isHanging() {
-        return get(CraftHangable.HANGING);
+        return this.<Boolean>get(CraftHangable.HANGING).booleanValue();
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/block/data/CraftLevelled.java b/src/main/java/org/bukkit/craftbukkit/block/data/CraftLevelled.java
index d331a5b46bd50fdeba8916ee7dfcc7cd79a07861..3b8464798a120bd38c17c3735db4e9e0006bf214 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/data/CraftLevelled.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/data/CraftLevelled.java
@@ -8,7 +8,7 @@ public abstract class CraftLevelled extends CraftBlockData implements Levelled {
 
     @Override
     public int getLevel() {
-        return get(CraftLevelled.LEVEL);
+        return this.<Integer>get(CraftLevelled.LEVEL).intValue();
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/block/data/CraftLightable.java b/src/main/java/org/bukkit/craftbukkit/block/data/CraftLightable.java
index 45f39ad6a513a47a2020761331c11f9f4c23fd5d..d4c76ffc595b3759e724c788f2fcf58d9ac1e91b 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/data/CraftLightable.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/data/CraftLightable.java
@@ -8,7 +8,7 @@ public abstract class CraftLightable extends CraftBlockData implements Lightable
 
     @Override
     public boolean isLit() {
-        return get(CraftLightable.LIT);
+        return this.<Boolean>get(CraftLightable.LIT).booleanValue();
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/block/data/CraftMultipleFacing.java b/src/main/java/org/bukkit/craftbukkit/block/data/CraftMultipleFacing.java
index ca453418f9578fc2b7f444b9b389d527effbb7e9..c23f7534d1fe7ac1fb98e20d8f28d45cd4f4e1dc 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/data/CraftMultipleFacing.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/data/CraftMultipleFacing.java
@@ -16,7 +16,7 @@ public abstract class CraftMultipleFacing extends CraftBlockData implements Mult
         if (state == null) {
             throw new IllegalArgumentException("Non-allowed face " + face + ". Check MultipleFacing.getAllowedFaces.");
         }
-        return get(state);
+        return this.<Boolean>get(state).booleanValue();
     }
 
     @Override
@@ -33,7 +33,7 @@ public abstract class CraftMultipleFacing extends CraftBlockData implements Mult
         com.google.common.collect.ImmutableSet.Builder<org.bukkit.block.BlockFace> faces = com.google.common.collect.ImmutableSet.builder();
 
         for (int i = 0; i < FACES.length; i++) {
-            if (CraftMultipleFacing.FACES[i] != null && get(CraftMultipleFacing.FACES[i])) {
+            if (CraftMultipleFacing.FACES[i] != null && this.<Boolean>get(CraftMultipleFacing.FACES[i]).booleanValue()) {
                 faces.add(org.bukkit.block.BlockFace.values()[i]);
             }
         }
diff --git a/src/main/java/org/bukkit/craftbukkit/block/data/CraftOpenable.java b/src/main/java/org/bukkit/craftbukkit/block/data/CraftOpenable.java
index 8bf9d1af030baf565159c5523296b98e91bb3f4b..2e25cd59e4a6c9401aba8878440c05fb966d9497 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/data/CraftOpenable.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/data/CraftOpenable.java
@@ -8,7 +8,7 @@ public abstract class CraftOpenable extends CraftBlockData implements Openable {
 
     @Override
     public boolean isOpen() {
-        return get(CraftOpenable.OPEN);
+        return this.<Boolean>get(CraftOpenable.OPEN).booleanValue();
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/block/data/CraftPowerable.java b/src/main/java/org/bukkit/craftbukkit/block/data/CraftPowerable.java
index de6c5a38dabd9f8bd9dcd4bfe4d26ea535e2ce55..0050a86fcdbe59b09062d7873d9df6a957997f85 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/data/CraftPowerable.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/data/CraftPowerable.java
@@ -8,7 +8,7 @@ public abstract class CraftPowerable extends CraftBlockData implements Powerable
 
     @Override
     public boolean isPowered() {
-        return get(CraftPowerable.POWERED);
+        return this.<Boolean>get(CraftPowerable.POWERED).booleanValue();
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/block/data/CraftRotatable.java b/src/main/java/org/bukkit/craftbukkit/block/data/CraftRotatable.java
index e58d54c1f46b96e2329293de0941833ed217657b..de269d7e71e10b3ad3fea678b8032d8e0a4dcab8 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/data/CraftRotatable.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/data/CraftRotatable.java
@@ -10,7 +10,7 @@ public abstract class CraftRotatable extends CraftBlockData implements Rotatable
 
     @Override
     public org.bukkit.block.@NotNull BlockFace getRotation() {
-        int data = get(CraftRotatable.ROTATION);
+        int data = this.<Integer>get(CraftRotatable.ROTATION).intValue();
         switch (data) {
             case 0x0:
                 return org.bukkit.block.BlockFace.SOUTH;
diff --git a/src/main/java/org/bukkit/craftbukkit/block/data/CraftSnowable.java b/src/main/java/org/bukkit/craftbukkit/block/data/CraftSnowable.java
index 61dd758ac556fe533b544e2cfb74b97f49d2d4c9..8938278613270daa0766e6650103bd5953c4893c 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/data/CraftSnowable.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/data/CraftSnowable.java
@@ -8,7 +8,7 @@ public abstract class CraftSnowable extends CraftBlockData implements Snowable {
 
     @Override
     public boolean isSnowy() {
-        return get(CraftSnowable.SNOWY);
+        return this.<Boolean>get(CraftSnowable.SNOWY).booleanValue();
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/block/data/CraftWaterlogged.java b/src/main/java/org/bukkit/craftbukkit/block/data/CraftWaterlogged.java
index 1d521806b2bc5e882c002bc57dca09092ff851a4..48f51c2139131d56d5858df64bd6568bde09245a 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/data/CraftWaterlogged.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/data/CraftWaterlogged.java
@@ -8,7 +8,7 @@ public abstract class CraftWaterlogged extends CraftBlockData implements Waterlo
 
     @Override
     public boolean isWaterlogged() {
-        return get(CraftWaterlogged.WATERLOGGED);
+        return this.<Boolean>get(CraftWaterlogged.WATERLOGGED).booleanValue();
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftBed.java b/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftBed.java
index d4a9fbe329bf9d26cfd2ebfdb1d6772c13d9d898..696f3cb89ce7c635bad78704f321150f736d57bc 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftBed.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftBed.java
@@ -22,7 +22,7 @@ public abstract class CraftBed extends CraftBlockData implements Bed {
 
     @Override
     public boolean isOccupied() {
-        return get(CraftBed.OCCUPIED);
+        return this.<Boolean>get(CraftBed.OCCUPIED).booleanValue();
     }
 
     // Paper start
diff --git a/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftBeehive.java b/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftBeehive.java
index 32c15683c28e276d31bbd974471f9677626dbd0f..72cf77cc26c5bb2fba396d40dfbc5d19223cd325 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftBeehive.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftBeehive.java
@@ -9,7 +9,7 @@ public abstract class CraftBeehive extends CraftBlockData implements Beehive {
 
     @Override
     public int getHoneyLevel() {
-        return get(CraftBeehive.HONEY_LEVEL);
+        return this.<Integer>get(CraftBeehive.HONEY_LEVEL).intValue();
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftBrewingStand.java b/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftBrewingStand.java
index edabea6baddc9305566c275670c6b0f4b3c93fbc..da72cc70ef14bd30e29c9f3d22b590456274e91c 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftBrewingStand.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftBrewingStand.java
@@ -13,7 +13,7 @@ public abstract class CraftBrewingStand extends CraftBlockData implements Brewin
 
     @Override
     public boolean hasBottle(int bottle) {
-        return get(CraftBrewingStand.HAS_BOTTLE[bottle]);
+        return this.<Boolean>get(CraftBrewingStand.HAS_BOTTLE[bottle]).booleanValue();
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftBubbleColumn.java b/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftBubbleColumn.java
index 907934dd2cae1cacdd07ca38cae0c1a3cf422866..8638fdbe854c269359e8787a362f5a4a6b14d05b 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftBubbleColumn.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftBubbleColumn.java
@@ -9,7 +9,7 @@ public abstract class CraftBubbleColumn extends CraftBlockData implements Bubble
 
     @Override
     public boolean isDrag() {
-        return get(CraftBubbleColumn.DRAG);
+        return this.<Boolean>get(CraftBubbleColumn.DRAG).booleanValue();
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftCake.java b/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftCake.java
index e57ad6ef5c2932155a1d6ae480c5b23e09c3c287..342759f86a8c5e4db23dcb01262795f2f1660f2e 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftCake.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftCake.java
@@ -9,7 +9,7 @@ public abstract class CraftCake extends CraftBlockData implements Cake {
 
     @Override
     public int getBites() {
-        return get(CraftCake.BITES);
+        return this.<Integer>get(CraftCake.BITES).intValue();
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftCampfire.java b/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftCampfire.java
index 5a8aa0a776d5d48ed53c476b2f20d7118f15b7d7..7f07eaf3c8589cf1368380393952fd6d4146e12f 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftCampfire.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftCampfire.java
@@ -9,7 +9,7 @@ public abstract class CraftCampfire extends CraftBlockData implements Campfire {
 
     @Override
     public boolean isSignalFire() {
-        return get(CraftCampfire.SIGNAL_FIRE);
+        return this.<Boolean>get(CraftCampfire.SIGNAL_FIRE).booleanValue();
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftCandle.java b/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftCandle.java
index 539efacfc5065b54458ce7a9be7e1829642179c7..023616b0d6318548c0bd167ea5393e061a84a3d3 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftCandle.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftCandle.java
@@ -9,7 +9,7 @@ public abstract class CraftCandle extends CraftBlockData implements Candle {
 
     @Override
     public int getCandles() {
-        return get(CraftCandle.CANDLES);
+        return this.<Integer>get(CraftCandle.CANDLES).intValue();
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftCaveVinesPlant.java b/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftCaveVinesPlant.java
index 0df5c196913622e742bd3d48b4e299bb47d49f67..bac9a47594197aa9f26fc67116916f687d2d390a 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftCaveVinesPlant.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftCaveVinesPlant.java
@@ -9,7 +9,7 @@ public abstract class CraftCaveVinesPlant extends CraftBlockData implements Cave
 
     @Override
     public boolean isBerries() {
-        return get(CraftCaveVinesPlant.BERRIES);
+        return this.<Boolean>get(CraftCaveVinesPlant.BERRIES).booleanValue();
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftCommandBlock.java b/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftCommandBlock.java
index 6786a3c94ddf257ac24cf84ae6f624afcb113441..d1c78aa0ae4c661f8b67480533905fcc94067ce3 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftCommandBlock.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftCommandBlock.java
@@ -9,7 +9,7 @@ public abstract class CraftCommandBlock extends CraftBlockData implements Comman
 
     @Override
     public boolean isConditional() {
-        return get(CraftCommandBlock.CONDITIONAL);
+        return this.<Boolean>get(CraftCommandBlock.CONDITIONAL).booleanValue();
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftDaylightDetector.java b/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftDaylightDetector.java
index 11ef41bd3abbe73ce7b340d674adda25cd228926..345196e5225dc64011c30e581dbad2a2171a2d90 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftDaylightDetector.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftDaylightDetector.java
@@ -9,7 +9,7 @@ public abstract class CraftDaylightDetector extends CraftBlockData implements Da
 
     @Override
     public boolean isInverted() {
-        return get(CraftDaylightDetector.INVERTED);
+        return this.<Boolean>get(CraftDaylightDetector.INVERTED).booleanValue();
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftDispenser.java b/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftDispenser.java
index 111fd5ee7423780e8fd7c6a6c55b936519c7b783..c41d10fdb4eee10174e5b9e2aef983a6302bbbd7 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftDispenser.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftDispenser.java
@@ -9,7 +9,7 @@ public abstract class CraftDispenser extends CraftBlockData implements Dispenser
 
     @Override
     public boolean isTriggered() {
-        return get(CraftDispenser.TRIGGERED);
+        return this.<Boolean>get(CraftDispenser.TRIGGERED).booleanValue();
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftEndPortalFrame.java b/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftEndPortalFrame.java
index 221803dd4f19ce2459f0f2115a6fe3a6c0721c0a..96892a96437d5e5c0cc679e3d4c282e6b68f7cc5 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftEndPortalFrame.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftEndPortalFrame.java
@@ -9,7 +9,7 @@ public abstract class CraftEndPortalFrame extends CraftBlockData implements EndP
 
     @Override
     public boolean hasEye() {
-        return get(CraftEndPortalFrame.EYE);
+        return this.<Boolean>get(CraftEndPortalFrame.EYE).booleanValue();
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftFarmland.java b/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftFarmland.java
index 4de05b42d3db606093d8509d9f8dbc9b1fa7fa68..3d499e59fc53e80716507da5b05d5866fe6b1afc 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftFarmland.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftFarmland.java
@@ -9,7 +9,7 @@ public abstract class CraftFarmland extends CraftBlockData implements Farmland {
 
     @Override
     public int getMoisture() {
-        return get(CraftFarmland.MOISTURE);
+        return this.<Integer>get(CraftFarmland.MOISTURE).intValue();
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftGate.java b/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftGate.java
index 2adde8c033bf596b6afb57d8510b25edf4b2ed96..9b6622cfbf994e0201c40491d729beee77522d65 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftGate.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftGate.java
@@ -9,7 +9,7 @@ public abstract class CraftGate extends CraftBlockData implements Gate {
 
     @Override
     public boolean isInWall() {
-        return get(CraftGate.IN_WALL);
+        return this.<Boolean>get(CraftGate.IN_WALL).booleanValue();
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftHopper.java b/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftHopper.java
index d93013acfe44af5b6430b072a710202624183b49..1b8a83500eaedba5a781e13359c24adc12186a3c 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftHopper.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftHopper.java
@@ -9,7 +9,7 @@ public abstract class CraftHopper extends CraftBlockData implements Hopper {
 
     @Override
     public boolean isEnabled() {
-        return get(CraftHopper.ENABLED);
+        return this.<Boolean>get(CraftHopper.ENABLED).booleanValue();
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftJukebox.java b/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftJukebox.java
index 4490b200b969123c9b079b9eae5491b15b995bf4..f80c0cd452dfa3d4d3bcf880361ef52437459706 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftJukebox.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftJukebox.java
@@ -9,6 +9,6 @@ public abstract class CraftJukebox extends CraftBlockData implements Jukebox {
 
     @Override
     public boolean hasRecord() {
-        return get(CraftJukebox.HAS_RECORD);
+        return this.<Boolean>get(CraftJukebox.HAS_RECORD).booleanValue();
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftLeaves.java b/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftLeaves.java
index 4fac923e9ca0fd656b0e6a4016dd66f0f0a81c49..50b60e8fe0caae8b17fc0bfd1fb242f8ea8b397b 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftLeaves.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftLeaves.java
@@ -10,7 +10,7 @@ public abstract class CraftLeaves extends CraftBlockData implements Leaves {
 
     @Override
     public boolean isPersistent() {
-        return get(CraftLeaves.PERSISTENT);
+        return this.<Boolean>get(CraftLeaves.PERSISTENT).booleanValue();
     }
 
     @Override
@@ -20,7 +20,7 @@ public abstract class CraftLeaves extends CraftBlockData implements Leaves {
 
     @Override
     public int getDistance() {
-        return get(CraftLeaves.DISTANCE);
+        return this.<Integer>get(CraftLeaves.DISTANCE).intValue();
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftLectern.java b/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftLectern.java
index 6f6f24b2da73ed93a22062163075fcbfed166563..495acbd30b9edc5b3538bfc06fea21a0e4c947d4 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftLectern.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftLectern.java
@@ -9,6 +9,6 @@ public abstract class CraftLectern extends CraftBlockData implements Lectern {
 
     @Override
     public boolean hasBook() {
-        return get(CraftLectern.HAS_BOOK);
+        return this.<Boolean>get(CraftLectern.HAS_BOOK).booleanValue();
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftNoteBlock.java b/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftNoteBlock.java
index 736ff60a4d2c6a80bd6c901df9fb69d2a5413bb0..bf48b45cf5aa61bb763a35cffc8567d28a8bbb98 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftNoteBlock.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftNoteBlock.java
@@ -22,7 +22,7 @@ public abstract class CraftNoteBlock extends CraftBlockData implements NoteBlock
 
     @Override
     public org.bukkit.@NotNull Note getNote() {
-       return new org.bukkit.Note(get(CraftNoteBlock.NOTE));
+       return new org.bukkit.Note(this.<Integer>get(CraftNoteBlock.NOTE).intValue());
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftPiston.java b/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftPiston.java
index 0cf8361061311b41b192e78f1bff053dcc4f9a6f..63849da9b092dee5792e3899ba449b22b1337a1f 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftPiston.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftPiston.java
@@ -9,7 +9,7 @@ public abstract class CraftPiston extends CraftBlockData implements Piston {
 
     @Override
     public boolean isExtended() {
-        return get(CraftPiston.EXTENDED);
+        return this.<Boolean>get(CraftPiston.EXTENDED).booleanValue();
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftPistonHead.java b/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftPistonHead.java
index a451a77468f1e315410fb86e443e9bf15de7ec57..fc656638c2941ecdade8ca939e3c33a49d5d3bfd 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftPistonHead.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftPistonHead.java
@@ -9,7 +9,7 @@ public abstract class CraftPistonHead extends CraftBlockData implements PistonHe
 
     @Override
     public boolean isShort() {
-        return get(CraftPistonHead.SHORT);
+        return this.<Boolean>get(CraftPistonHead.SHORT).booleanValue();
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftRepeater.java b/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftRepeater.java
index bbbbf9db51bac261d4b515539b6e509fe01c1da9..68afee152a72739e0a11141745080911f3fa0819 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftRepeater.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftRepeater.java
@@ -10,7 +10,7 @@ public abstract class CraftRepeater extends CraftBlockData implements Repeater {
 
     @Override
     public int getDelay() {
-        return get(CraftRepeater.DELAY);
+        return this.<Integer>get(CraftRepeater.DELAY).intValue();
     }
 
     @Override
@@ -30,7 +30,7 @@ public abstract class CraftRepeater extends CraftBlockData implements Repeater {
 
     @Override
     public boolean isLocked() {
-        return get(CraftRepeater.LOCKED);
+        return this.<Boolean>get(CraftRepeater.LOCKED).booleanValue();
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftRespawnAnchor.java b/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftRespawnAnchor.java
index 130a3b4276dd8a2df0bc0f14c11b53217f85555b..813a6a2b5e7e7cb9fb1653483a3eb024a6306744 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftRespawnAnchor.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftRespawnAnchor.java
@@ -9,7 +9,7 @@ public abstract class CraftRespawnAnchor extends CraftBlockData implements Respa
 
     @Override
     public int getCharges() {
-        return get(CraftRespawnAnchor.CHARGES);
+        return this.<Integer>get(CraftRespawnAnchor.CHARGES).intValue();
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftSapling.java b/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftSapling.java
index 3eae3b79fc1be8fae1dabd71861fd85bd2941fd5..dded076c7d032fc2cb4b5145b9bdd8a1b2944d29 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftSapling.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftSapling.java
@@ -9,7 +9,7 @@ public abstract class CraftSapling extends CraftBlockData implements Sapling {
 
     @Override
     public int getStage() {
-        return get(CraftSapling.STAGE);
+        return this.<Integer>get(CraftSapling.STAGE).intValue();
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftScaffolding.java b/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftScaffolding.java
index e9e53107c7940f181061b91f51026b0849a52be0..e52752898875f45f8dca652190438ae75e8a2820 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftScaffolding.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftScaffolding.java
@@ -10,7 +10,7 @@ public abstract class CraftScaffolding extends CraftBlockData implements Scaffol
 
     @Override
     public boolean isBottom() {
-        return get(CraftScaffolding.BOTTOM);
+        return this.<Boolean>get(CraftScaffolding.BOTTOM).booleanValue();
     }
 
     @Override
@@ -20,7 +20,7 @@ public abstract class CraftScaffolding extends CraftBlockData implements Scaffol
 
     @Override
     public int getDistance() {
-        return get(CraftScaffolding.DISTANCE);
+        return this.<Integer>get(CraftScaffolding.DISTANCE).intValue();
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftSculkCatalyst.java b/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftSculkCatalyst.java
index 3b0b7162beb224723621244b677e7bcd621424e6..486cd8079c37efbca887d72413141f7a2efcb857 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftSculkCatalyst.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftSculkCatalyst.java
@@ -9,7 +9,7 @@ public abstract class CraftSculkCatalyst extends CraftBlockData implements Sculk
 
     @Override
     public boolean isBloom() {
-        return get(CraftSculkCatalyst.BLOOM);
+        return this.<Boolean>get(CraftSculkCatalyst.BLOOM).booleanValue();
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftSculkShrieker.java b/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftSculkShrieker.java
index bdbd55ff687c30de23619f098e649422c4d41910..5f40c5f519425022722420aa8f2ffa4c519d9482 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftSculkShrieker.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftSculkShrieker.java
@@ -10,7 +10,7 @@ public abstract class CraftSculkShrieker extends CraftBlockData implements Sculk
 
     @Override
     public boolean isCanSummon() {
-        return get(CraftSculkShrieker.CAN_SUMMON);
+        return this.<Boolean>get(CraftSculkShrieker.CAN_SUMMON).booleanValue();
     }
 
     @Override
@@ -20,7 +20,7 @@ public abstract class CraftSculkShrieker extends CraftBlockData implements Sculk
 
     @Override
     public boolean isShrieking() {
-        return get(CraftSculkShrieker.SHRIEKING);
+        return this.<Boolean>get(CraftSculkShrieker.SHRIEKING).booleanValue();
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftSeaPickle.java b/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftSeaPickle.java
index 2a4dc0e966cdd3167bb7d4fb1dc51b1adf6c18ac..8f6055c4a7455f42eeb91a8455a8ab6905e6ea8a 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftSeaPickle.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftSeaPickle.java
@@ -9,7 +9,7 @@ public abstract class CraftSeaPickle extends CraftBlockData implements SeaPickle
 
     @Override
     public int getPickles() {
-        return get(CraftSeaPickle.PICKLES);
+        return this.<Integer>get(CraftSeaPickle.PICKLES).intValue();
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftSnow.java b/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftSnow.java
index 26e4cd51c44994322bec746c1605b1a407a11543..dd892e2d106d3e5e46cf48682ebf0c84d96a5b47 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftSnow.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftSnow.java
@@ -9,7 +9,7 @@ public class CraftSnow extends CraftBlockData implements Snow {
 
     @Override
     public int getLayers() {
-        return get(CraftSnow.LAYERS);
+        return this.<Integer>get(CraftSnow.LAYERS).intValue();
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftTNT.java b/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftTNT.java
index afae5dbe8e7fd6475796b6baa07991232bd159d2..b6e4334979789626c47a49de12224c2ebff82031 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftTNT.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftTNT.java
@@ -9,7 +9,7 @@ public abstract class CraftTNT extends CraftBlockData implements TNT {
 
     @Override
     public boolean isUnstable() {
-        return get(CraftTNT.UNSTABLE);
+        return this.<Boolean>get(CraftTNT.UNSTABLE).booleanValue();
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftTripwire.java b/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftTripwire.java
index 3df7a5d239ca3f4218b045b82404a94ed9ad4358..56b3218abed9fcfa2cd33fcf3a0ebf8126ae6c4c 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftTripwire.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftTripwire.java
@@ -9,7 +9,7 @@ public abstract class CraftTripwire extends CraftBlockData implements Tripwire {
 
     @Override
     public boolean isDisarmed() {
-        return get(CraftTripwire.DISARMED);
+        return this.<Boolean>get(CraftTripwire.DISARMED).booleanValue();
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftTurtleEgg.java b/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftTurtleEgg.java
index 8e0531ddf3965ea3d78b4580ff4d030c56b6b348..2adeea6af5f7cabbe219f82ea51cfd698fa5be87 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftTurtleEgg.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftTurtleEgg.java
@@ -10,7 +10,7 @@ public abstract class CraftTurtleEgg extends CraftBlockData implements TurtleEgg
 
     @Override
     public int getEggs() {
-        return get(CraftTurtleEgg.EGGS);
+        return this.<Integer>get(CraftTurtleEgg.EGGS).intValue();
     }
 
     @Override
@@ -30,7 +30,7 @@ public abstract class CraftTurtleEgg extends CraftBlockData implements TurtleEgg
 
     @Override
     public int getHatch() {
-        return get(CraftTurtleEgg.HATCH);
+        return this.<Integer>get(CraftTurtleEgg.HATCH).intValue();
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftWall.java b/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftWall.java
index 9f3ca242a7e7b783f6ed0506cf999cdb913f58f9..b6ccc3a7676ad4d4ea01b4dc3083aef5b8aaeda3 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftWall.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftWall.java
@@ -14,7 +14,7 @@ public abstract class CraftWall extends CraftBlockData implements Wall {
 
     @Override
     public boolean isUp() {
-        return get(CraftWall.UP);
+        return this.<Boolean>get(CraftWall.UP).booleanValue();
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftAmethystCluster.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftAmethystCluster.java
index 505a94d60e7552fdc0aed7a79df89d55451c1262..9d7d18ac2120c3f680416b6fdcddb9eb3da996e0 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftAmethystCluster.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftAmethystCluster.java
@@ -41,7 +41,7 @@ public final class CraftAmethystCluster extends org.bukkit.craftbukkit.block.dat
 
     @Override
     public boolean isWaterlogged() {
-        return get(CraftAmethystCluster.WATERLOGGED);
+        return this.<Boolean>get(CraftAmethystCluster.WATERLOGGED).booleanValue();
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftBamboo.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftBamboo.java
index ebe3d0213aa536499d6483978611a5b7160d57e8..d6ab7232ce81c18d031e56f6142f7224bbb924e2 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftBamboo.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftBamboo.java
@@ -36,7 +36,7 @@ public final class CraftBamboo extends org.bukkit.craftbukkit.block.data.CraftBl
 
     @Override
     public int getAge() {
-        return get(CraftBamboo.AGE);
+        return this.<Integer>get(CraftBamboo.AGE).intValue();
     }
 
     @Override
@@ -55,7 +55,7 @@ public final class CraftBamboo extends org.bukkit.craftbukkit.block.data.CraftBl
 
     @Override
     public int getStage() {
-        return get(CraftBamboo.STAGE);
+        return this.<Integer>get(CraftBamboo.STAGE).intValue();
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftBanner.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftBanner.java
index ae7de64a7e32ad30af4f1698cc062bd3cb9999c0..43258c70bc6149d7017b777cdcb2a860a3f22c72 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftBanner.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftBanner.java
@@ -22,7 +22,7 @@ public final class CraftBanner extends org.bukkit.craftbukkit.block.data.CraftBl
 
     @Override
     public org.bukkit.block.@NotNull BlockFace getRotation() {
-        int data = get(CraftBanner.ROTATION);
+        int data = this.<Integer>get(CraftBanner.ROTATION).intValue();
         switch (data) {
             case 0x0:
                 return org.bukkit.block.BlockFace.SOUTH;
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftBarrel.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftBarrel.java
index e72d4bb60bc2b3e6da4aeb774ebc97a0469c765b..7054044e409123f216f3ca5de8dde685c52692b3 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftBarrel.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftBarrel.java
@@ -41,7 +41,7 @@ public final class CraftBarrel extends org.bukkit.craftbukkit.block.data.CraftBl
 
     @Override
     public boolean isOpen() {
-        return get(CraftBarrel.OPEN);
+        return this.<Boolean>get(CraftBarrel.OPEN).booleanValue();
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftBed.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftBed.java
index ae1671ac641844002818e292c8b0040d91f91ebf..20f032a112cd62cd30f652964909d6455f235ac1 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftBed.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftBed.java
@@ -33,7 +33,7 @@ public final class CraftBed extends org.bukkit.craftbukkit.block.data.CraftBlock
 
     @Override
     public boolean isOccupied() {
-        return get(CraftBed.OCCUPIED);
+        return this.<Boolean>get(CraftBed.OCCUPIED).booleanValue();
     }
 
     // org.bukkit.craftbukkit.block.data.CraftDirectional
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftBeehive.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftBeehive.java
index b7876a314abdd870c384b349022015dbaa4028e8..865d074a31d8f4c31708eccbcd26d438f9237e81 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftBeehive.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftBeehive.java
@@ -22,7 +22,7 @@ public final class CraftBeehive extends org.bukkit.craftbukkit.block.data.CraftB
 
     @Override
     public int getHoneyLevel() {
-        return get(CraftBeehive.HONEY_LEVEL);
+        return this.<Integer>get(CraftBeehive.HONEY_LEVEL).intValue();
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftBeetroot.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftBeetroot.java
index 87df69a63bb98aac1b4c62370a6035e02c59b4e9..081d54f1ad94869167274921e4c9cf0b94a91185 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftBeetroot.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftBeetroot.java
@@ -19,7 +19,7 @@ public final class CraftBeetroot extends org.bukkit.craftbukkit.block.data.Craft
 
     @Override
     public int getAge() {
-        return get(CraftBeetroot.AGE);
+        return this.<Integer>get(CraftBeetroot.AGE).intValue();
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftBell.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftBell.java
index c49e0de2549b2c1ade0080eac68c64cee1d00745..08cfa07559ededf4e1648f9b7ddca052a0b7587a 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftBell.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftBell.java
@@ -55,7 +55,7 @@ public final class CraftBell extends org.bukkit.craftbukkit.block.data.CraftBloc
 
     @Override
     public boolean isPowered() {
-        return get(CraftBell.POWERED);
+        return this.<Boolean>get(CraftBell.POWERED).booleanValue();
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftBigDripleaf.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftBigDripleaf.java
index 2413ca67f9696163ce9368aa5e289ab878c2b1f0..c359b88a911e5a12441a90129847936c1bbca358 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftBigDripleaf.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftBigDripleaf.java
@@ -55,7 +55,7 @@ public final class CraftBigDripleaf extends org.bukkit.craftbukkit.block.data.Cr
 
     @Override
     public boolean isWaterlogged() {
-        return get(CraftBigDripleaf.WATERLOGGED);
+        return this.<Boolean>get(CraftBigDripleaf.WATERLOGGED).booleanValue();
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftBigDripleafStem.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftBigDripleafStem.java
index 50923f15eb98ad3902cc1748fa69686a2d669a73..95b7372b16823068cbefa6a66a07f73090a7d297 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftBigDripleafStem.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftBigDripleafStem.java
@@ -41,7 +41,7 @@ public final class CraftBigDripleafStem extends org.bukkit.craftbukkit.block.dat
 
     @Override
     public boolean isWaterlogged() {
-        return get(CraftBigDripleafStem.WATERLOGGED);
+        return this.<Boolean>get(CraftBigDripleafStem.WATERLOGGED).booleanValue();
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftBlastFurnace.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftBlastFurnace.java
index 10b2b2a2dc8172e62f5a56437fd82efd638516f0..d5550311d37a84bc9a8472a1b4ba0496fbbf77f1 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftBlastFurnace.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftBlastFurnace.java
@@ -41,7 +41,7 @@ public final class CraftBlastFurnace extends org.bukkit.craftbukkit.block.data.C
 
     @Override
     public boolean isLit() {
-        return get(CraftBlastFurnace.LIT);
+        return this.<Boolean>get(CraftBlastFurnace.LIT).booleanValue();
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftBrewingStand.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftBrewingStand.java
index f81e19b988b4c775ab0b22422c854feccf37d691..8469f17a6c35ded2841bd5d7ddd1be1473609ae4 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftBrewingStand.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftBrewingStand.java
@@ -24,7 +24,7 @@ public final class CraftBrewingStand extends org.bukkit.craftbukkit.block.data.C
 
     @Override
     public boolean hasBottle(int bottle) {
-        return get(CraftBrewingStand.HAS_BOTTLE[bottle]);
+        return this.<Boolean>get(CraftBrewingStand.HAS_BOTTLE[bottle]).booleanValue();
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftBubbleColumn.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftBubbleColumn.java
index 65f26f43d7043c19152682cfb0bb48ec89916927..248ec0c55a874aff308f09436bea6ab8f07ef599 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftBubbleColumn.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftBubbleColumn.java
@@ -19,7 +19,7 @@ public final class CraftBubbleColumn extends org.bukkit.craftbukkit.block.data.C
 
     @Override
     public boolean isDrag() {
-        return get(CraftBubbleColumn.DRAG);
+        return this.<Boolean>get(CraftBubbleColumn.DRAG).booleanValue();
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftButtonAbstract.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftButtonAbstract.java
index 067206475ee8cc68ec49ed68520dbb6ad04a0231..3bcb061aa1e4649e69527a2aa233bba8f1db7947 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftButtonAbstract.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftButtonAbstract.java
@@ -69,7 +69,7 @@ public final class CraftButtonAbstract extends org.bukkit.craftbukkit.block.data
 
     @Override
     public boolean isPowered() {
-        return get(CraftButtonAbstract.POWERED);
+        return this.<Boolean>get(CraftButtonAbstract.POWERED).booleanValue();
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftCactus.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftCactus.java
index 432db301595ec167d6a5631a4d53561ecadece9f..ba64a02ee2a329d60f1a1286d80254fce0fe813e 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftCactus.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftCactus.java
@@ -19,7 +19,7 @@ public final class CraftCactus extends org.bukkit.craftbukkit.block.data.CraftBl
 
     @Override
     public int getAge() {
-        return get(CraftCactus.AGE);
+        return this.<Integer>get(CraftCactus.AGE).intValue();
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftCake.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftCake.java
index 63c6b24523038d18a9f6f32b0afbbad3220d0044..d233e736ebb28b13d9b79dc864cdc246e404c6a6 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftCake.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftCake.java
@@ -19,7 +19,7 @@ public final class CraftCake extends org.bukkit.craftbukkit.block.data.CraftBloc
 
     @Override
     public int getBites() {
-        return get(CraftCake.BITES);
+        return this.<Integer>get(CraftCake.BITES).intValue();
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftCampfire.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftCampfire.java
index 60be5f6c200811fce62fc5329f1aef8f506e36f2..0da47a1ea156cff21cc1e5c2d0d4e64a76448104 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftCampfire.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftCampfire.java
@@ -22,7 +22,7 @@ public final class CraftCampfire extends org.bukkit.craftbukkit.block.data.Craft
 
     @Override
     public boolean isSignalFire() {
-        return get(CraftCampfire.SIGNAL_FIRE);
+        return this.<Boolean>get(CraftCampfire.SIGNAL_FIRE).booleanValue();
     }
 
     @Override
@@ -55,7 +55,7 @@ public final class CraftCampfire extends org.bukkit.craftbukkit.block.data.Craft
 
     @Override
     public boolean isLit() {
-        return get(CraftCampfire.LIT);
+        return this.<Boolean>get(CraftCampfire.LIT).booleanValue();
     }
 
     @Override
@@ -69,7 +69,7 @@ public final class CraftCampfire extends org.bukkit.craftbukkit.block.data.Craft
 
     @Override
     public boolean isWaterlogged() {
-        return get(CraftCampfire.WATERLOGGED);
+        return this.<Boolean>get(CraftCampfire.WATERLOGGED).booleanValue();
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftCandle.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftCandle.java
index 18cfd92fa77bee34b2b9ea8c088540d10b62f11b..f205436a4c10bd925fc5a1f6671609addc5656b6 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftCandle.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftCandle.java
@@ -19,7 +19,7 @@ public final class CraftCandle extends org.bukkit.craftbukkit.block.data.CraftBl
 
     @Override
     public int getCandles() {
-        return get(CraftCandle.CANDLES);
+        return this.<Integer>get(CraftCandle.CANDLES).intValue();
     }
 
     @Override
@@ -44,7 +44,7 @@ public final class CraftCandle extends org.bukkit.craftbukkit.block.data.CraftBl
 
     @Override
     public boolean isLit() {
-        return get(CraftCandle.LIT);
+        return this.<Boolean>get(CraftCandle.LIT).booleanValue();
     }
 
     @Override
@@ -58,7 +58,7 @@ public final class CraftCandle extends org.bukkit.craftbukkit.block.data.CraftBl
 
     @Override
     public boolean isWaterlogged() {
-        return get(CraftCandle.WATERLOGGED);
+        return this.<Boolean>get(CraftCandle.WATERLOGGED).booleanValue();
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftCandleCake.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftCandleCake.java
index 3886068ab3c31c8b7afca3a03f35d9bced737c3e..9c02f8e83e4e23e64694d9efda64dfae3fa6e85f 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftCandleCake.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftCandleCake.java
@@ -19,7 +19,7 @@ public final class CraftCandleCake extends org.bukkit.craftbukkit.block.data.Cra
 
     @Override
     public boolean isLit() {
-        return get(CraftCandleCake.LIT);
+        return this.<Boolean>get(CraftCandleCake.LIT).booleanValue();
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftCarrots.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftCarrots.java
index a3afab94cafde6ef20e11754c36333be26dc4560..49f5cd7886181dfa778773954908556d1f762e72 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftCarrots.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftCarrots.java
@@ -19,7 +19,7 @@ public final class CraftCarrots extends org.bukkit.craftbukkit.block.data.CraftB
 
     @Override
     public int getAge() {
-        return get(CraftCarrots.AGE);
+        return this.<Integer>get(CraftCarrots.AGE).intValue();
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftCaveVines.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftCaveVines.java
index f9ab03c6ed2f2b65372bc9494c7f4596738197bb..afa3d4984513e673801fa3c31e1571853cb3b969 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftCaveVines.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftCaveVines.java
@@ -19,7 +19,7 @@ public final class CraftCaveVines extends org.bukkit.craftbukkit.block.data.Craf
 
     @Override
     public int getAge() {
-        return get(CraftCaveVines.AGE);
+        return this.<Integer>get(CraftCaveVines.AGE).intValue();
     }
 
     @Override
@@ -38,7 +38,7 @@ public final class CraftCaveVines extends org.bukkit.craftbukkit.block.data.Craf
 
     @Override
     public boolean isBerries() {
-        return get(CraftCaveVines.BERRIES);
+        return this.<Boolean>get(CraftCaveVines.BERRIES).booleanValue();
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftCaveVinesPlant.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftCaveVinesPlant.java
index 87aa7e3458a59851a00980054cfb598ab16b1a8b..654581fba31f066e05c50262b39b5ae741be7908 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftCaveVinesPlant.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftCaveVinesPlant.java
@@ -19,7 +19,7 @@ public final class CraftCaveVinesPlant extends org.bukkit.craftbukkit.block.data
 
     @Override
     public boolean isBerries() {
-        return get(CraftCaveVinesPlant.BERRIES);
+        return this.<Boolean>get(CraftCaveVinesPlant.BERRIES).booleanValue();
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftChain.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftChain.java
index 4d653f5e7fe46d6de517ef7713ba7b57e4ad02fe..a14fa2885c0b107d7a983632633b7cc6d49cd084 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftChain.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftChain.java
@@ -41,7 +41,7 @@ public final class CraftChain extends org.bukkit.craftbukkit.block.data.CraftBlo
 
     @Override
     public boolean isWaterlogged() {
-        return get(CraftChain.WATERLOGGED);
+        return this.<Boolean>get(CraftChain.WATERLOGGED).booleanValue();
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftChest.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftChest.java
index 34cdaab461f9e647fb63e8e02192d35bc9e6956f..6e924a328e99a21464fddac439534ff38e92bbb9 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftChest.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftChest.java
@@ -55,7 +55,7 @@ public final class CraftChest extends org.bukkit.craftbukkit.block.data.CraftBlo
 
     @Override
     public boolean isWaterlogged() {
-        return get(CraftChest.WATERLOGGED);
+        return this.<Boolean>get(CraftChest.WATERLOGGED).booleanValue();
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftChestTrapped.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftChestTrapped.java
index 8ee991907d636ed6d005b8ce1060292f5bbf7076..2c1408eea2956504774a330f52fde6e372af12ab 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftChestTrapped.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftChestTrapped.java
@@ -55,7 +55,7 @@ public final class CraftChestTrapped extends org.bukkit.craftbukkit.block.data.C
 
     @Override
     public boolean isWaterlogged() {
-        return get(CraftChestTrapped.WATERLOGGED);
+        return this.<Boolean>get(CraftChestTrapped.WATERLOGGED).booleanValue();
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftChorusFlower.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftChorusFlower.java
index 67679ba2d38f1a9a5dbbc8a6cc749658879ab23a..83078e115fd04f00359cd3951ee0ad2031eba19e 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftChorusFlower.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftChorusFlower.java
@@ -19,7 +19,7 @@ public final class CraftChorusFlower extends org.bukkit.craftbukkit.block.data.C
 
     @Override
     public int getAge() {
-        return get(CraftChorusFlower.AGE);
+        return this.<Integer>get(CraftChorusFlower.AGE).intValue();
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftChorusFruit.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftChorusFruit.java
index 3783fb87ba4e05903a0e63755de97478d7d34bb4..f36c30754c47a7e68cd8545458a30cd5856df10c 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftChorusFruit.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftChorusFruit.java
@@ -28,7 +28,7 @@ public final class CraftChorusFruit extends org.bukkit.craftbukkit.block.data.Cr
         if (state == null) {
             throw new IllegalArgumentException("Non-allowed face " + face + ". Check MultipleFacing.getAllowedFaces.");
         }
-        return get(state);
+        return this.<Boolean>get(state).booleanValue();
     }
 
     @Override
@@ -45,7 +45,7 @@ public final class CraftChorusFruit extends org.bukkit.craftbukkit.block.data.Cr
         com.google.common.collect.ImmutableSet.Builder<org.bukkit.block.BlockFace> faces = com.google.common.collect.ImmutableSet.builder();
 
         for (int i = 0; i < FACES.length; i++) {
-            if (CraftChorusFruit.FACES[i] != null && get(CraftChorusFruit.FACES[i])) {
+            if (CraftChorusFruit.FACES[i] != null && this.<Boolean>get(CraftChorusFruit.FACES[i]).booleanValue()) {
                 faces.add(org.bukkit.block.BlockFace.values()[i]);
             }
         }
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftCobbleWall.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftCobbleWall.java
index 9074c62d16ab3acccedee11ac723f27ab580eb36..6d83c08280c0e7ad8f74488254ee975f4cd2bd6a 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftCobbleWall.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftCobbleWall.java
@@ -25,7 +25,7 @@ public final class CraftCobbleWall extends org.bukkit.craftbukkit.block.data.Cra
 
     @Override
     public boolean isUp() {
-        return get(CraftCobbleWall.UP);
+        return this.<Boolean>get(CraftCobbleWall.UP).booleanValue();
     }
 
     @Override
@@ -49,7 +49,7 @@ public final class CraftCobbleWall extends org.bukkit.craftbukkit.block.data.Cra
 
     @Override
     public boolean isWaterlogged() {
-        return get(CraftCobbleWall.WATERLOGGED);
+        return this.<Boolean>get(CraftCobbleWall.WATERLOGGED).booleanValue();
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftCocoa.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftCocoa.java
index 6b31bbcabaa9ceb54af5cb9e00adde5d344ab243..42b0d606d0ebf41d808b11cbe1d4db13259cd834 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftCocoa.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftCocoa.java
@@ -22,7 +22,7 @@ public final class CraftCocoa extends org.bukkit.craftbukkit.block.data.CraftBlo
 
     @Override
     public int getAge() {
-        return get(CraftCocoa.AGE);
+        return this.<Integer>get(CraftCocoa.AGE).intValue();
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftCommand.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftCommand.java
index e7437f59f3b98ebf7580b93b3f6a6550d111d767..4c696c9fe826b52467621841c23c62c33f068514 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftCommand.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftCommand.java
@@ -22,7 +22,7 @@ public final class CraftCommand extends org.bukkit.craftbukkit.block.data.CraftB
 
     @Override
     public boolean isConditional() {
-        return get(CraftCommand.CONDITIONAL);
+        return this.<Boolean>get(CraftCommand.CONDITIONAL).booleanValue();
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftComposter.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftComposter.java
index cbdf8f30cfa98d964289fcb7c2c1f4da9aebc210..06f63fc44fe2453dddc9e930f80e35ed90d28d9c 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftComposter.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftComposter.java
@@ -19,7 +19,7 @@ public final class CraftComposter extends org.bukkit.craftbukkit.block.data.Craf
 
     @Override
     public int getLevel() {
-        return get(CraftComposter.LEVEL);
+        return this.<Integer>get(CraftComposter.LEVEL).intValue();
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftConduit.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftConduit.java
index b2c7521d12a0350a8a7a110403b844ae09939058..3c0a53c49d825739a350a0ed4b9617d4719afd23 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftConduit.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftConduit.java
@@ -19,7 +19,7 @@ public final class CraftConduit extends org.bukkit.craftbukkit.block.data.CraftB
 
     @Override
     public boolean isWaterlogged() {
-        return get(CraftConduit.WATERLOGGED);
+        return this.<Boolean>get(CraftConduit.WATERLOGGED).booleanValue();
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftCoralDead.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftCoralDead.java
index 7c5f3972e3ff9fb172c338a908379eaeb4291157..855dfc684974f8a0035a38531c56239273260bcd 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftCoralDead.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftCoralDead.java
@@ -19,7 +19,7 @@ public final class CraftCoralDead extends org.bukkit.craftbukkit.block.data.Craf
 
     @Override
     public boolean isWaterlogged() {
-        return get(CraftCoralDead.WATERLOGGED);
+        return this.<Boolean>get(CraftCoralDead.WATERLOGGED).booleanValue();
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftCoralFan.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftCoralFan.java
index 423c1b034561dcb56cd69c23b2d9aac22b3e5f10..ecb70a5262fd859c4387417750e4d8c31b1f1fa4 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftCoralFan.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftCoralFan.java
@@ -19,7 +19,7 @@ public final class CraftCoralFan extends org.bukkit.craftbukkit.block.data.Craft
 
     @Override
     public boolean isWaterlogged() {
-        return get(CraftCoralFan.WATERLOGGED);
+        return this.<Boolean>get(CraftCoralFan.WATERLOGGED).booleanValue();
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftCoralFanAbstract.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftCoralFanAbstract.java
index 6bd5b4824a0459db25195eab84e0fb483b0bc122..9a815010620e5f6794957022690d5d149c4a971c 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftCoralFanAbstract.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftCoralFanAbstract.java
@@ -19,7 +19,7 @@ public final class CraftCoralFanAbstract extends org.bukkit.craftbukkit.block.da
 
     @Override
     public boolean isWaterlogged() {
-        return get(CraftCoralFanAbstract.WATERLOGGED);
+        return this.<Boolean>get(CraftCoralFanAbstract.WATERLOGGED).booleanValue();
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftCoralFanWall.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftCoralFanWall.java
index 6c023d6471872e7535ea92d2c443ce0dec5f2027..6109e629484e8e733bb931a77b5a9004d6da6065 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftCoralFanWall.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftCoralFanWall.java
@@ -41,7 +41,7 @@ public final class CraftCoralFanWall extends org.bukkit.craftbukkit.block.data.C
 
     @Override
     public boolean isWaterlogged() {
-        return get(CraftCoralFanWall.WATERLOGGED);
+        return this.<Boolean>get(CraftCoralFanWall.WATERLOGGED).booleanValue();
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftCoralFanWallAbstract.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftCoralFanWallAbstract.java
index 87b51c67e1ca96209b3095d8f4834a781e2d8478..7983f7c1150c72ef868f6d4e58cbf2bd64cba77a 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftCoralFanWallAbstract.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftCoralFanWallAbstract.java
@@ -41,7 +41,7 @@ public final class CraftCoralFanWallAbstract extends org.bukkit.craftbukkit.bloc
 
     @Override
     public boolean isWaterlogged() {
-        return get(CraftCoralFanWallAbstract.WATERLOGGED);
+        return this.<Boolean>get(CraftCoralFanWallAbstract.WATERLOGGED).booleanValue();
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftCoralPlant.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftCoralPlant.java
index 364fe71c4d59732760f79106f495ced82358dc4d..645befc4e46635af99cc48ebf1c76e28ee12abe3 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftCoralPlant.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftCoralPlant.java
@@ -19,7 +19,7 @@ public final class CraftCoralPlant extends org.bukkit.craftbukkit.block.data.Cra
 
     @Override
     public boolean isWaterlogged() {
-        return get(CraftCoralPlant.WATERLOGGED);
+        return this.<Boolean>get(CraftCoralPlant.WATERLOGGED).booleanValue();
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftCrops.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftCrops.java
index ae2b76effafe9fa03874741284163da2f71c69c9..83d2b52e3f77a7d4f40ed64c789c95df2e13e7f2 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftCrops.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftCrops.java
@@ -19,7 +19,7 @@ public final class CraftCrops extends org.bukkit.craftbukkit.block.data.CraftBlo
 
     @Override
     public int getAge() {
-        return get(CraftCrops.AGE);
+        return this.<Integer>get(CraftCrops.AGE).intValue();
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftDaylightDetector.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftDaylightDetector.java
index 932ee75254ed7788fee7565e8aad17e20d86d72c..95f593dae07cee1b052bdae81aff1f563a0845e4 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftDaylightDetector.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftDaylightDetector.java
@@ -19,7 +19,7 @@ public final class CraftDaylightDetector extends org.bukkit.craftbukkit.block.da
 
     @Override
     public boolean isInverted() {
-        return get(CraftDaylightDetector.INVERTED);
+        return this.<Boolean>get(CraftDaylightDetector.INVERTED).booleanValue();
     }
 
     @Override
@@ -33,7 +33,7 @@ public final class CraftDaylightDetector extends org.bukkit.craftbukkit.block.da
 
     @Override
     public int getPower() {
-        return get(CraftDaylightDetector.POWER);
+        return this.<Integer>get(CraftDaylightDetector.POWER).intValue();
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftDirtSnow.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftDirtSnow.java
index 645a34185c9afd82480573f89556a042d6cc008a..ebccf6b28b5db82ab436b5c99d17c09acc3e51fb 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftDirtSnow.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftDirtSnow.java
@@ -19,7 +19,7 @@ public final class CraftDirtSnow extends org.bukkit.craftbukkit.block.data.Craft
 
     @Override
     public boolean isSnowy() {
-        return get(CraftDirtSnow.SNOWY);
+        return this.<Boolean>get(CraftDirtSnow.SNOWY).booleanValue();
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftDispenser.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftDispenser.java
index 7bb522c9e96ef4bc681d5df81f8981911d2cbcb6..95c3632c11771ee51bca2d5df24465488f02d40c 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftDispenser.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftDispenser.java
@@ -22,7 +22,7 @@ public final class CraftDispenser extends org.bukkit.craftbukkit.block.data.Craf
 
     @Override
     public boolean isTriggered() {
-        return get(CraftDispenser.TRIGGERED);
+        return this.<Boolean>get(CraftDispenser.TRIGGERED).booleanValue();
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftDoor.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftDoor.java
index 9ec61da777dc1216c5805fd57d7ed3c067ca2027..0ff03d5b222bc844af5656a6e4987058f0791d65 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftDoor.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftDoor.java
@@ -69,7 +69,7 @@ public final class CraftDoor extends org.bukkit.craftbukkit.block.data.CraftBloc
 
     @Override
     public boolean isOpen() {
-        return get(CraftDoor.OPEN);
+        return this.<Boolean>get(CraftDoor.OPEN).booleanValue();
     }
 
     @Override
@@ -83,7 +83,7 @@ public final class CraftDoor extends org.bukkit.craftbukkit.block.data.CraftBloc
 
     @Override
     public boolean isPowered() {
-        return get(CraftDoor.POWERED);
+        return this.<Boolean>get(CraftDoor.POWERED).booleanValue();
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftDropper.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftDropper.java
index a57b2612b9d2d4c842c2ea7ff6898ddc46e04568..0593fc9a6d68db6e18a1510dc2cb16311f717ca9 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftDropper.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftDropper.java
@@ -22,7 +22,7 @@ public final class CraftDropper extends org.bukkit.craftbukkit.block.data.CraftB
 
     @Override
     public boolean isTriggered() {
-        return get(CraftDropper.TRIGGERED);
+        return this.<Boolean>get(CraftDropper.TRIGGERED).booleanValue();
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftEnderChest.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftEnderChest.java
index 477a40a4ab454ada06cf6bc8e9dc87c0cf66acc3..a3ad48e442c38b084e397bc9a0a39ef419ac3936 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftEnderChest.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftEnderChest.java
@@ -41,7 +41,7 @@ public final class CraftEnderChest extends org.bukkit.craftbukkit.block.data.Cra
 
     @Override
     public boolean isWaterlogged() {
-        return get(CraftEnderChest.WATERLOGGED);
+        return this.<Boolean>get(CraftEnderChest.WATERLOGGED).booleanValue();
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftEnderPortalFrame.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftEnderPortalFrame.java
index 5a1336ef8b29c7ad137001585865a796e4917894..caffc6830e1eb0ccde67b82e6da7137afd150776 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftEnderPortalFrame.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftEnderPortalFrame.java
@@ -22,7 +22,7 @@ public final class CraftEnderPortalFrame extends org.bukkit.craftbukkit.block.da
 
     @Override
     public boolean hasEye() {
-        return get(CraftEnderPortalFrame.EYE);
+        return this.<Boolean>get(CraftEnderPortalFrame.EYE).booleanValue();
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftFence.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftFence.java
index edaa0371a56cd594755acbc8d9162d17f55b7b71..064003380a6f88f72ff7e3f040fc2ec3dd6b33bd 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftFence.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftFence.java
@@ -28,7 +28,7 @@ public final class CraftFence extends org.bukkit.craftbukkit.block.data.CraftBlo
         if (state == null) {
             throw new IllegalArgumentException("Non-allowed face " + face + ". Check MultipleFacing.getAllowedFaces.");
         }
-        return get(state);
+        return this.<Boolean>get(state).booleanValue();
     }
 
     @Override
@@ -45,7 +45,7 @@ public final class CraftFence extends org.bukkit.craftbukkit.block.data.CraftBlo
         com.google.common.collect.ImmutableSet.Builder<org.bukkit.block.BlockFace> faces = com.google.common.collect.ImmutableSet.builder();
 
         for (int i = 0; i < FACES.length; i++) {
-            if (CraftFence.FACES[i] != null && get(CraftFence.FACES[i])) {
+            if (CraftFence.FACES[i] != null && this.<Boolean>get(CraftFence.FACES[i]).booleanValue()) {
                 faces.add(org.bukkit.block.BlockFace.values()[i]);
             }
         }
@@ -72,7 +72,7 @@ public final class CraftFence extends org.bukkit.craftbukkit.block.data.CraftBlo
 
     @Override
     public boolean isWaterlogged() {
-        return get(CraftFence.WATERLOGGED);
+        return this.<Boolean>get(CraftFence.WATERLOGGED).booleanValue();
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftFenceGate.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftFenceGate.java
index b856b6ae60b20767bc27bbb84db79da947f039f5..b27d8182944e68eed95f97c69026e4d6ab5f1cf1 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftFenceGate.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftFenceGate.java
@@ -22,7 +22,7 @@ public final class CraftFenceGate extends org.bukkit.craftbukkit.block.data.Craf
 
     @Override
     public boolean isInWall() {
-        return get(CraftFenceGate.IN_WALL);
+        return this.<Boolean>get(CraftFenceGate.IN_WALL).booleanValue();
     }
 
     @Override
@@ -55,7 +55,7 @@ public final class CraftFenceGate extends org.bukkit.craftbukkit.block.data.Craf
 
     @Override
     public boolean isOpen() {
-        return get(CraftFenceGate.OPEN);
+        return this.<Boolean>get(CraftFenceGate.OPEN).booleanValue();
     }
 
     @Override
@@ -69,7 +69,7 @@ public final class CraftFenceGate extends org.bukkit.craftbukkit.block.data.Craf
 
     @Override
     public boolean isPowered() {
-        return get(CraftFenceGate.POWERED);
+        return this.<Boolean>get(CraftFenceGate.POWERED).booleanValue();
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftFire.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftFire.java
index 2cb3e9555585a67c65d65b6a09f8304d355c3eeb..4a29ed4f56366356e39d1eadc1be6cbecbb8c88d 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftFire.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftFire.java
@@ -22,7 +22,7 @@ public final class CraftFire extends org.bukkit.craftbukkit.block.data.CraftBloc
 
     @Override
     public int getAge() {
-        return get(CraftFire.AGE);
+        return this.<Integer>get(CraftFire.AGE).intValue();
     }
 
     @Override
@@ -47,7 +47,7 @@ public final class CraftFire extends org.bukkit.craftbukkit.block.data.CraftBloc
         if (state == null) {
             throw new IllegalArgumentException("Non-allowed face " + face + ". Check MultipleFacing.getAllowedFaces.");
         }
-        return get(state);
+        return this.<Boolean>get(state).booleanValue();
     }
 
     @Override
@@ -64,7 +64,7 @@ public final class CraftFire extends org.bukkit.craftbukkit.block.data.CraftBloc
         com.google.common.collect.ImmutableSet.Builder<org.bukkit.block.BlockFace> faces = com.google.common.collect.ImmutableSet.builder();
 
         for (int i = 0; i < FACES.length; i++) {
-            if (CraftFire.FACES[i] != null && get(CraftFire.FACES[i])) {
+            if (CraftFire.FACES[i] != null && this.<Boolean>get(CraftFire.FACES[i]).booleanValue()) {
                 faces.add(org.bukkit.block.BlockFace.values()[i]);
             }
         }
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftFloorSign.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftFloorSign.java
index 99c69327c55b1e0aabf171327c08720e93e6c4cf..34aa28a646ab61b716168f8f6e810e840ba35764 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftFloorSign.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftFloorSign.java
@@ -22,7 +22,7 @@ public final class CraftFloorSign extends org.bukkit.craftbukkit.block.data.Craf
 
     @Override
     public org.bukkit.block.@NotNull BlockFace getRotation() {
-        int data = get(CraftFloorSign.ROTATION);
+        int data = this.<Integer>get(CraftFloorSign.ROTATION).intValue();
         switch (data) {
             case 0x0:
                 return org.bukkit.block.BlockFace.SOUTH;
@@ -125,7 +125,7 @@ public final class CraftFloorSign extends org.bukkit.craftbukkit.block.data.Craf
 
     @Override
     public boolean isWaterlogged() {
-        return get(CraftFloorSign.WATERLOGGED);
+        return this.<Boolean>get(CraftFloorSign.WATERLOGGED).booleanValue();
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftFluids.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftFluids.java
index 29a85edf3006626a916dbcfc0d4be825cd3a2193..dd8dd0b440d086dcd9e64bb7b876b84be0be8115 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftFluids.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftFluids.java
@@ -19,7 +19,7 @@ public final class CraftFluids extends org.bukkit.craftbukkit.block.data.CraftBl
 
     @Override
     public int getLevel() {
-        return get(CraftFluids.LEVEL);
+        return this.<Integer>get(CraftFluids.LEVEL).intValue();
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftFurnaceFurace.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftFurnaceFurace.java
index c968be2b6a418d5169e1d4ebc23757e46141a892..a63650a596f5b7ef4c745f5a18acfd9852c1097e 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftFurnaceFurace.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftFurnaceFurace.java
@@ -41,7 +41,7 @@ public final class CraftFurnaceFurace extends org.bukkit.craftbukkit.block.data.
 
     @Override
     public boolean isLit() {
-        return get(CraftFurnaceFurace.LIT);
+        return this.<Boolean>get(CraftFurnaceFurace.LIT).booleanValue();
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftGlowLichen.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftGlowLichen.java
index a37667f8a5c14442433ab4e3f40579f5df73eaf4..5e833ae03808b667225951fa62f71c9a2eec0045 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftGlowLichen.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftGlowLichen.java
@@ -28,7 +28,7 @@ public final class CraftGlowLichen extends org.bukkit.craftbukkit.block.data.Cra
         if (state == null) {
             throw new IllegalArgumentException("Non-allowed face " + face + ". Check MultipleFacing.getAllowedFaces.");
         }
-        return get(state);
+        return this.<Boolean>get(state).booleanValue();
     }
 
     @Override
@@ -45,7 +45,7 @@ public final class CraftGlowLichen extends org.bukkit.craftbukkit.block.data.Cra
         com.google.common.collect.ImmutableSet.Builder<org.bukkit.block.BlockFace> faces = com.google.common.collect.ImmutableSet.builder();
 
         for (int i = 0; i < FACES.length; i++) {
-            if (CraftGlowLichen.FACES[i] != null && get(CraftGlowLichen.FACES[i])) {
+            if (CraftGlowLichen.FACES[i] != null && this.<Boolean>get(CraftGlowLichen.FACES[i]).booleanValue()) {
                 faces.add(org.bukkit.block.BlockFace.values()[i]);
             }
         }
@@ -72,7 +72,7 @@ public final class CraftGlowLichen extends org.bukkit.craftbukkit.block.data.Cra
 
     @Override
     public boolean isWaterlogged() {
-        return get(CraftGlowLichen.WATERLOGGED);
+        return this.<Boolean>get(CraftGlowLichen.WATERLOGGED).booleanValue();
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftGrass.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftGrass.java
index 445484b7ff3497d6e3451d4158e61c31265b00b3..ed13341b3bf13cc144c013f097f9e0243d7bfac2 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftGrass.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftGrass.java
@@ -19,7 +19,7 @@ public final class CraftGrass extends org.bukkit.craftbukkit.block.data.CraftBlo
 
     @Override
     public boolean isSnowy() {
-        return get(CraftGrass.SNOWY);
+        return this.<Boolean>get(CraftGrass.SNOWY).booleanValue();
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftHangingRoots.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftHangingRoots.java
index e5614e8f67d83e35e5aabc96b4ea3d8a4d44e2c4..315bad74769ff2fd6a3c534035d987d1de428fff 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftHangingRoots.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftHangingRoots.java
@@ -19,7 +19,7 @@ public final class CraftHangingRoots extends org.bukkit.craftbukkit.block.data.C
 
     @Override
     public boolean isWaterlogged() {
-        return get(CraftHangingRoots.WATERLOGGED);
+        return this.<Boolean>get(CraftHangingRoots.WATERLOGGED).booleanValue();
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftHopper.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftHopper.java
index 928d577a8ace6a9864822a9179d9fb17d64ab1c6..dd3d5bbb57af218ecbd75183a3903fff67f63730 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftHopper.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftHopper.java
@@ -22,7 +22,7 @@ public final class CraftHopper extends org.bukkit.craftbukkit.block.data.CraftBl
 
     @Override
     public boolean isEnabled() {
-        return get(CraftHopper.ENABLED);
+        return this.<Boolean>get(CraftHopper.ENABLED).booleanValue();
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftHugeMushroom.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftHugeMushroom.java
index 8990139020ea5788f12cebbf13ff4ba52dc4ad92..1a95bd01bb02d190a9b24f44f4a11b43b98e3a62 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftHugeMushroom.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftHugeMushroom.java
@@ -28,7 +28,7 @@ public final class CraftHugeMushroom extends org.bukkit.craftbukkit.block.data.C
         if (state == null) {
             throw new IllegalArgumentException("Non-allowed face " + face + ". Check MultipleFacing.getAllowedFaces.");
         }
-        return get(state);
+        return this.<Boolean>get(state).booleanValue();
     }
 
     @Override
@@ -45,7 +45,7 @@ public final class CraftHugeMushroom extends org.bukkit.craftbukkit.block.data.C
         com.google.common.collect.ImmutableSet.Builder<org.bukkit.block.BlockFace> faces = com.google.common.collect.ImmutableSet.builder();
 
         for (int i = 0; i < FACES.length; i++) {
-            if (CraftHugeMushroom.FACES[i] != null && get(CraftHugeMushroom.FACES[i])) {
+            if (CraftHugeMushroom.FACES[i] != null && this.<Boolean>get(CraftHugeMushroom.FACES[i]).booleanValue()) {
                 faces.add(org.bukkit.block.BlockFace.values()[i]);
             }
         }
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftIceFrost.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftIceFrost.java
index a37cb5d15ee14701d722b266ed5a550462bac48e..7e2d484a9423abbb37ab7e334a65b0aaa4ffaa5d 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftIceFrost.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftIceFrost.java
@@ -19,7 +19,7 @@ public final class CraftIceFrost extends org.bukkit.craftbukkit.block.data.Craft
 
     @Override
     public int getAge() {
-        return get(CraftIceFrost.AGE);
+        return this.<Integer>get(CraftIceFrost.AGE).intValue();
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftIronBars.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftIronBars.java
index 04a82cba9792234165167c06d05e32cd4033f749..252b03d41334253394823fa12a7ffd1793147fc3 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftIronBars.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftIronBars.java
@@ -28,7 +28,7 @@ public final class CraftIronBars extends org.bukkit.craftbukkit.block.data.Craft
         if (state == null) {
             throw new IllegalArgumentException("Non-allowed face " + face + ". Check MultipleFacing.getAllowedFaces.");
         }
-        return get(state);
+        return this.<Boolean>get(state).booleanValue();
     }
 
     @Override
@@ -45,7 +45,7 @@ public final class CraftIronBars extends org.bukkit.craftbukkit.block.data.Craft
         com.google.common.collect.ImmutableSet.Builder<org.bukkit.block.BlockFace> faces = com.google.common.collect.ImmutableSet.builder();
 
         for (int i = 0; i < FACES.length; i++) {
-            if (CraftIronBars.FACES[i] != null && get(CraftIronBars.FACES[i])) {
+            if (CraftIronBars.FACES[i] != null && this.<Boolean>get(CraftIronBars.FACES[i]).booleanValue()) {
                 faces.add(org.bukkit.block.BlockFace.values()[i]);
             }
         }
@@ -72,7 +72,7 @@ public final class CraftIronBars extends org.bukkit.craftbukkit.block.data.Craft
 
     @Override
     public boolean isWaterlogged() {
-        return get(CraftIronBars.WATERLOGGED);
+        return this.<Boolean>get(CraftIronBars.WATERLOGGED).booleanValue();
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftJukeBox.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftJukeBox.java
index 4c872ddc21245ae3b17a5efd76bbb65c3ec2056a..ff21e666d0489762fde00371c334c2e20eb45e40 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftJukeBox.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftJukeBox.java
@@ -19,6 +19,6 @@ public final class CraftJukeBox extends org.bukkit.craftbukkit.block.data.CraftB
 
     @Override
     public boolean hasRecord() {
-        return get(CraftJukeBox.HAS_RECORD);
+        return this.<Boolean>get(CraftJukeBox.HAS_RECORD).booleanValue();
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftKelp.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftKelp.java
index 62fb0f9b194eb1bd84f29771467e05a22e6ee848..61e24df20878df4e82831d58ccee17a8c908134c 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftKelp.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftKelp.java
@@ -19,7 +19,7 @@ public final class CraftKelp extends org.bukkit.craftbukkit.block.data.CraftBloc
 
     @Override
     public int getAge() {
-        return get(CraftKelp.AGE);
+        return this.<Integer>get(CraftKelp.AGE).intValue();
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftLadder.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftLadder.java
index 87e60a10054817af94ef336ddd34d98c115cba04..4b76fc6ec891484ce4f0be39a03e998ddbd5a97b 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftLadder.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftLadder.java
@@ -41,7 +41,7 @@ public final class CraftLadder extends org.bukkit.craftbukkit.block.data.CraftBl
 
     @Override
     public boolean isWaterlogged() {
-        return get(CraftLadder.WATERLOGGED);
+        return this.<Boolean>get(CraftLadder.WATERLOGGED).booleanValue();
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftLantern.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftLantern.java
index f90346b79fa01461666230907e3d3b43760b642b..325bad55ede0948a9cb09f1050015e94ccfacfac 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftLantern.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftLantern.java
@@ -19,7 +19,7 @@ public final class CraftLantern extends org.bukkit.craftbukkit.block.data.CraftB
 
     @Override
     public boolean isHanging() {
-        return get(CraftLantern.HANGING);
+        return this.<Boolean>get(CraftLantern.HANGING).booleanValue();
     }
 
     @Override
@@ -33,7 +33,7 @@ public final class CraftLantern extends org.bukkit.craftbukkit.block.data.CraftB
 
     @Override
     public boolean isWaterlogged() {
-        return get(CraftLantern.WATERLOGGED);
+        return this.<Boolean>get(CraftLantern.WATERLOGGED).booleanValue();
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftLayeredCauldron.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftLayeredCauldron.java
index f06d9d1f74f82a2fec2c01f5ed0ad02b3de424e3..f7eda5bf165390b31e8e48b080ead0fbcfc8d589 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftLayeredCauldron.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftLayeredCauldron.java
@@ -19,7 +19,7 @@ public final class CraftLayeredCauldron extends org.bukkit.craftbukkit.block.dat
 
     @Override
     public int getLevel() {
-        return get(CraftLayeredCauldron.LEVEL);
+        return this.<Integer>get(CraftLayeredCauldron.LEVEL).intValue();
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftLeaves.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftLeaves.java
index 762972dc0c235e850105017f20fbb503565bacdd..37fc296093757cc01e842125c47d7bb2d145e39c 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftLeaves.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftLeaves.java
@@ -20,7 +20,7 @@ public final class CraftLeaves extends org.bukkit.craftbukkit.block.data.CraftBl
 
     @Override
     public boolean isPersistent() {
-        return get(CraftLeaves.PERSISTENT);
+        return this.<Boolean>get(CraftLeaves.PERSISTENT).booleanValue();
     }
 
     @Override
@@ -30,7 +30,7 @@ public final class CraftLeaves extends org.bukkit.craftbukkit.block.data.CraftBl
 
     @Override
     public int getDistance() {
-        return get(CraftLeaves.DISTANCE);
+        return this.<Integer>get(CraftLeaves.DISTANCE).intValue();
     }
 
     @Override
@@ -44,7 +44,7 @@ public final class CraftLeaves extends org.bukkit.craftbukkit.block.data.CraftBl
 
     @Override
     public boolean isWaterlogged() {
-        return get(CraftLeaves.WATERLOGGED);
+        return this.<Boolean>get(CraftLeaves.WATERLOGGED).booleanValue();
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftLectern.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftLectern.java
index b490bb59a33c253c5d6f19c83fc0f2c99f7b37f0..d7bba645a17c2ae0bfb2cbd35888b97490f316ca 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftLectern.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftLectern.java
@@ -22,7 +22,7 @@ public final class CraftLectern extends org.bukkit.craftbukkit.block.data.CraftB
 
     @Override
     public boolean hasBook() {
-        return get(CraftLectern.HAS_BOOK);
+        return this.<Boolean>get(CraftLectern.HAS_BOOK).booleanValue();
     }
 
     // org.bukkit.craftbukkit.block.data.CraftDirectional
@@ -50,7 +50,7 @@ public final class CraftLectern extends org.bukkit.craftbukkit.block.data.CraftB
 
     @Override
     public boolean isPowered() {
-        return get(CraftLectern.POWERED);
+        return this.<Boolean>get(CraftLectern.POWERED).booleanValue();
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftLever.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftLever.java
index 64a0bbfb23390efc7a97e041a2acc88de7f25503..bce96060dc0083aa99a1c71b2651c25f6d5c8665 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftLever.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftLever.java
@@ -69,7 +69,7 @@ public final class CraftLever extends org.bukkit.craftbukkit.block.data.CraftBlo
 
     @Override
     public boolean isPowered() {
-        return get(CraftLever.POWERED);
+        return this.<Boolean>get(CraftLever.POWERED).booleanValue();
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftLight.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftLight.java
index 7867c36f1f3332d129f1ca508481ce798311f2f3..5697f2cc144aab0993e13b586543a212ee5ff868 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftLight.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftLight.java
@@ -19,7 +19,7 @@ public final class CraftLight extends org.bukkit.craftbukkit.block.data.CraftBlo
 
     @Override
     public int getLevel() {
-        return get(CraftLight.LEVEL);
+        return this.<Integer>get(CraftLight.LEVEL).intValue();
     }
 
     @Override
@@ -45,7 +45,7 @@ public final class CraftLight extends org.bukkit.craftbukkit.block.data.CraftBlo
 
     @Override
     public boolean isWaterlogged() {
-        return get(CraftLight.WATERLOGGED);
+        return this.<Boolean>get(CraftLight.WATERLOGGED).booleanValue();
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftLightningRod.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftLightningRod.java
index 454d5fccd2e8d62d37d3c0e5d762335c1795603c..c53312abfef4be0dd716a85acead7cf5e0ee244f 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftLightningRod.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftLightningRod.java
@@ -41,7 +41,7 @@ public final class CraftLightningRod extends org.bukkit.craftbukkit.block.data.C
 
     @Override
     public boolean isPowered() {
-        return get(CraftLightningRod.POWERED);
+        return this.<Boolean>get(CraftLightningRod.POWERED).booleanValue();
     }
 
     @Override
@@ -55,7 +55,7 @@ public final class CraftLightningRod extends org.bukkit.craftbukkit.block.data.C
 
     @Override
     public boolean isWaterlogged() {
-        return get(CraftLightningRod.WATERLOGGED);
+        return this.<Boolean>get(CraftLightningRod.WATERLOGGED).booleanValue();
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftMangroveLeaves.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftMangroveLeaves.java
index c2e004a78c6aa4553b8de0dce87f32a42abfa2c6..3693be2b46177f5452a77043a435f12febd913d0 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftMangroveLeaves.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftMangroveLeaves.java
@@ -20,7 +20,7 @@ public final class CraftMangroveLeaves extends org.bukkit.craftbukkit.block.data
 
     @Override
     public boolean isPersistent() {
-        return get(CraftMangroveLeaves.PERSISTENT);
+        return this.<Boolean>get(CraftMangroveLeaves.PERSISTENT).booleanValue();
     }
 
     @Override
@@ -30,7 +30,7 @@ public final class CraftMangroveLeaves extends org.bukkit.craftbukkit.block.data
 
     @Override
     public int getDistance() {
-        return get(CraftMangroveLeaves.DISTANCE);
+        return this.<Integer>get(CraftMangroveLeaves.DISTANCE).intValue();
     }
 
     @Override
@@ -44,7 +44,7 @@ public final class CraftMangroveLeaves extends org.bukkit.craftbukkit.block.data
 
     @Override
     public boolean isWaterlogged() {
-        return get(CraftMangroveLeaves.WATERLOGGED);
+        return this.<Boolean>get(CraftMangroveLeaves.WATERLOGGED).booleanValue();
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftMangrovePropagule.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftMangrovePropagule.java
index 3f594cd23762627ab66138e59ea181dd24743297..89b51c8679b1470bcb61c100f865dcf2a5391b36 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftMangrovePropagule.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftMangrovePropagule.java
@@ -19,7 +19,7 @@ public final class CraftMangrovePropagule extends org.bukkit.craftbukkit.block.d
 
     @Override
     public int getAge() {
-        return get(CraftMangrovePropagule.AGE);
+        return this.<Integer>get(CraftMangrovePropagule.AGE).intValue();
     }
 
     @Override
@@ -38,7 +38,7 @@ public final class CraftMangrovePropagule extends org.bukkit.craftbukkit.block.d
 
     @Override
     public boolean isHanging() {
-        return get(CraftMangrovePropagule.HANGING);
+        return this.<Boolean>get(CraftMangrovePropagule.HANGING).booleanValue();
     }
 
     @Override
@@ -52,7 +52,7 @@ public final class CraftMangrovePropagule extends org.bukkit.craftbukkit.block.d
 
     @Override
     public int getStage() {
-        return get(CraftMangrovePropagule.STAGE);
+        return this.<Integer>get(CraftMangrovePropagule.STAGE).intValue();
     }
 
     @Override
@@ -71,7 +71,7 @@ public final class CraftMangrovePropagule extends org.bukkit.craftbukkit.block.d
 
     @Override
     public boolean isWaterlogged() {
-        return get(CraftMangrovePropagule.WATERLOGGED);
+        return this.<Boolean>get(CraftMangrovePropagule.WATERLOGGED).booleanValue();
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftMangroveRoots.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftMangroveRoots.java
index 391dedb16954c5d3fa70e723e3a800c8881bf650..70309786a8fcd5fcfc103a477e8ccb594f5c7d46 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftMangroveRoots.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftMangroveRoots.java
@@ -19,7 +19,7 @@ public final class CraftMangroveRoots extends org.bukkit.craftbukkit.block.data.
 
     @Override
     public boolean isWaterlogged() {
-        return get(CraftMangroveRoots.WATERLOGGED);
+        return this.<Boolean>get(CraftMangroveRoots.WATERLOGGED).booleanValue();
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftMinecartDetector.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftMinecartDetector.java
index a96155afc5f07d8d23c98c3fd64c771b1e01f60b..a42bc9404ff31d8a5d5de3886451365e98d294e9 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftMinecartDetector.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftMinecartDetector.java
@@ -22,7 +22,7 @@ public final class CraftMinecartDetector extends org.bukkit.craftbukkit.block.da
 
     @Override
     public boolean isPowered() {
-        return get(CraftMinecartDetector.POWERED);
+        return this.<Boolean>get(CraftMinecartDetector.POWERED).booleanValue();
     }
 
     @Override
@@ -55,7 +55,7 @@ public final class CraftMinecartDetector extends org.bukkit.craftbukkit.block.da
 
     @Override
     public boolean isWaterlogged() {
-        return get(CraftMinecartDetector.WATERLOGGED);
+        return this.<Boolean>get(CraftMinecartDetector.WATERLOGGED).booleanValue();
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftMinecartTrack.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftMinecartTrack.java
index c00c2be3ee9fa6883bb80b60d9f44fe768af51c6..a9688e6aec3d7f205d0e51de331f23088bcec2d6 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftMinecartTrack.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftMinecartTrack.java
@@ -41,7 +41,7 @@ public final class CraftMinecartTrack extends org.bukkit.craftbukkit.block.data.
 
     @Override
     public boolean isWaterlogged() {
-        return get(CraftMinecartTrack.WATERLOGGED);
+        return this.<Boolean>get(CraftMinecartTrack.WATERLOGGED).booleanValue();
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftMycel.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftMycel.java
index 65cfcc4a55cf3cc78cccaba9296b391c8b40762c..8dfa736cba718d14bffa0229fa8a6f4d7cf88ec1 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftMycel.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftMycel.java
@@ -19,7 +19,7 @@ public final class CraftMycel extends org.bukkit.craftbukkit.block.data.CraftBlo
 
     @Override
     public boolean isSnowy() {
-        return get(CraftMycel.SNOWY);
+        return this.<Boolean>get(CraftMycel.SNOWY).booleanValue();
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftNetherWart.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftNetherWart.java
index c2a3093b0386354d81abf79d903fb82c2fa80181..c073f37f2bb620b4e8758e93a674048b53d2aa50 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftNetherWart.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftNetherWart.java
@@ -19,7 +19,7 @@ public final class CraftNetherWart extends org.bukkit.craftbukkit.block.data.Cra
 
     @Override
     public int getAge() {
-        return get(CraftNetherWart.AGE);
+        return this.<Integer>get(CraftNetherWart.AGE).intValue();
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftNote.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftNote.java
index 808084fbf02b9a019c6208782973f583b5dba39e..50077375611d6bf1addfa802478f20df28ee8d27 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftNote.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftNote.java
@@ -33,7 +33,7 @@ public final class CraftNote extends org.bukkit.craftbukkit.block.data.CraftBloc
 
     @Override
     public org.bukkit.@NotNull Note getNote() {
-       return new org.bukkit.Note(get(CraftNote.NOTE));
+       return new org.bukkit.Note(this.<Integer>get(CraftNote.NOTE).intValue());
     }
 
     @Override
@@ -47,7 +47,7 @@ public final class CraftNote extends org.bukkit.craftbukkit.block.data.CraftBloc
 
     @Override
     public boolean isPowered() {
-        return get(CraftNote.POWERED);
+        return this.<Boolean>get(CraftNote.POWERED).booleanValue();
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftObserver.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftObserver.java
index 05e64d441e1bdae237bf9f264bc7ff71f9d21402..d15c4e7c7c45071f8f74505c48e62d88c0a066f1 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftObserver.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftObserver.java
@@ -41,7 +41,7 @@ public final class CraftObserver extends org.bukkit.craftbukkit.block.data.Craft
 
     @Override
     public boolean isPowered() {
-        return get(CraftObserver.POWERED);
+        return this.<Boolean>get(CraftObserver.POWERED).booleanValue();
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftPiston.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftPiston.java
index 4d0e7674576337854424f69d547dce0d4eddc72d..e571f06bc5f17101609c04af6e91f0c52a36b4d7 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftPiston.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftPiston.java
@@ -22,7 +22,7 @@ public final class CraftPiston extends org.bukkit.craftbukkit.block.data.CraftBl
 
     @Override
     public boolean isExtended() {
-        return get(CraftPiston.EXTENDED);
+        return this.<Boolean>get(CraftPiston.EXTENDED).booleanValue();
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftPistonExtension.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftPistonExtension.java
index ab6939e499220038018b4475ad96795b3f163c1d..91b88efd15c1720e17098dcd6dec9c6ab5e1a0fe 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftPistonExtension.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftPistonExtension.java
@@ -22,7 +22,7 @@ public final class CraftPistonExtension extends org.bukkit.craftbukkit.block.dat
 
     @Override
     public boolean isShort() {
-        return get(CraftPistonExtension.SHORT);
+        return this.<Boolean>get(CraftPistonExtension.SHORT).booleanValue();
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftPointedDripstone.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftPointedDripstone.java
index 9718bc6af48b757a463b2366db85393eb247e4ec..c75c0836aaabd4539cd919ea2ae488cbea2de4f0 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftPointedDripstone.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftPointedDripstone.java
@@ -52,7 +52,7 @@ public final class CraftPointedDripstone extends org.bukkit.craftbukkit.block.da
 
     @Override
     public boolean isWaterlogged() {
-        return get(CraftPointedDripstone.WATERLOGGED);
+        return this.<Boolean>get(CraftPointedDripstone.WATERLOGGED).booleanValue();
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftPotatoes.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftPotatoes.java
index 150e2c44ad245d7f57d8ede426665ebdc709e89d..899074c8ea72fa564b55b6e5ba3587aa6e29ba71 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftPotatoes.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftPotatoes.java
@@ -19,7 +19,7 @@ public final class CraftPotatoes extends org.bukkit.craftbukkit.block.data.Craft
 
     @Override
     public int getAge() {
-        return get(CraftPotatoes.AGE);
+        return this.<Integer>get(CraftPotatoes.AGE).intValue();
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftPowderSnowCauldron.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftPowderSnowCauldron.java
index 56737862cd6e439090e331f29122e960ac1126a4..2a7ca52113b802a641589e6b1812df7a98dcfed8 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftPowderSnowCauldron.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftPowderSnowCauldron.java
@@ -19,7 +19,7 @@ public final class CraftPowderSnowCauldron extends org.bukkit.craftbukkit.block.
 
     @Override
     public int getLevel() {
-        return get(CraftPowderSnowCauldron.LEVEL);
+        return this.<Integer>get(CraftPowderSnowCauldron.LEVEL).intValue();
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftPoweredRail.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftPoweredRail.java
index 68ae52c40e620d4b821e3fbde88bd3a4160d9bed..a337fdb023ac611549b59b4784adb99d28eb8d2d 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftPoweredRail.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftPoweredRail.java
@@ -22,7 +22,7 @@ public final class CraftPoweredRail extends org.bukkit.craftbukkit.block.data.Cr
 
     @Override
     public boolean isPowered() {
-        return get(CraftPoweredRail.POWERED);
+        return this.<Boolean>get(CraftPoweredRail.POWERED).booleanValue();
     }
 
     @Override
@@ -55,7 +55,7 @@ public final class CraftPoweredRail extends org.bukkit.craftbukkit.block.data.Cr
 
     @Override
     public boolean isWaterlogged() {
-        return get(CraftPoweredRail.WATERLOGGED);
+        return this.<Boolean>get(CraftPoweredRail.WATERLOGGED).booleanValue();
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftPressurePlateBinary.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftPressurePlateBinary.java
index f05b202a233d46d987c9af4ae7838134cc8d5b29..15613aed07718a5f466948fab461d6de15cfd45f 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftPressurePlateBinary.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftPressurePlateBinary.java
@@ -19,7 +19,7 @@ public final class CraftPressurePlateBinary extends org.bukkit.craftbukkit.block
 
     @Override
     public boolean isPowered() {
-        return get(CraftPressurePlateBinary.POWERED);
+        return this.<Boolean>get(CraftPressurePlateBinary.POWERED).booleanValue();
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftPressurePlateWeighted.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftPressurePlateWeighted.java
index 2cd6100233697bfb5ab1cc8560fa9690f70d1895..e9a4ebea8e38e8782502ea501463999c94465384 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftPressurePlateWeighted.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftPressurePlateWeighted.java
@@ -19,7 +19,7 @@ public final class CraftPressurePlateWeighted extends org.bukkit.craftbukkit.blo
 
     @Override
     public int getPower() {
-        return get(CraftPressurePlateWeighted.POWER);
+        return this.<Integer>get(CraftPressurePlateWeighted.POWER).intValue();
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftRedstoneComparator.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftRedstoneComparator.java
index 925d09ff34cfd89e4857484e201719dfee179dda..2a32bcb5c55a6a8c140bf62d4598f63394de2d80 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftRedstoneComparator.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftRedstoneComparator.java
@@ -55,7 +55,7 @@ public final class CraftRedstoneComparator extends org.bukkit.craftbukkit.block.
 
     @Override
     public boolean isPowered() {
-        return get(CraftRedstoneComparator.POWERED);
+        return this.<Boolean>get(CraftRedstoneComparator.POWERED).booleanValue();
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftRedstoneLamp.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftRedstoneLamp.java
index 5a04aeda1b2e1b9b9a99541ed5ec5cea1a3e24d9..bb9b69591b68ce6eaec76856196199ceba68cc85 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftRedstoneLamp.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftRedstoneLamp.java
@@ -19,7 +19,7 @@ public final class CraftRedstoneLamp extends org.bukkit.craftbukkit.block.data.C
 
     @Override
     public boolean isLit() {
-        return get(CraftRedstoneLamp.LIT);
+        return this.<Boolean>get(CraftRedstoneLamp.LIT).booleanValue();
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftRedstoneOre.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftRedstoneOre.java
index 66767cb051e7756f523eb1aab661ec69c14b00ec..2ce7ac766694c60dc129b4cd4b5b36e4cf24e500 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftRedstoneOre.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftRedstoneOre.java
@@ -19,7 +19,7 @@ public final class CraftRedstoneOre extends org.bukkit.craftbukkit.block.data.Cr
 
     @Override
     public boolean isLit() {
-        return get(CraftRedstoneOre.LIT);
+        return this.<Boolean>get(CraftRedstoneOre.LIT).booleanValue();
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftRedstoneTorch.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftRedstoneTorch.java
index 12d4a258be0192c116bf4a7ae7ded7bd1beb84f9..7b7f8fa3701334d8a5d953dfd04888783258447c 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftRedstoneTorch.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftRedstoneTorch.java
@@ -19,7 +19,7 @@ public final class CraftRedstoneTorch extends org.bukkit.craftbukkit.block.data.
 
     @Override
     public boolean isLit() {
-        return get(CraftRedstoneTorch.LIT);
+        return this.<Boolean>get(CraftRedstoneTorch.LIT).booleanValue();
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftRedstoneTorchWall.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftRedstoneTorchWall.java
index c1c9d3e805bcea9d3db29ffc319e426f316a4312..9affa39045937c76f24e7bbb7f060d82ee3d673b 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftRedstoneTorchWall.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftRedstoneTorchWall.java
@@ -41,7 +41,7 @@ public final class CraftRedstoneTorchWall extends org.bukkit.craftbukkit.block.d
 
     @Override
     public boolean isLit() {
-        return get(CraftRedstoneTorchWall.LIT);
+        return this.<Boolean>get(CraftRedstoneTorchWall.LIT).booleanValue();
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftRedstoneWire.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftRedstoneWire.java
index 472727a5830d3ad298828bcafe10f0984ece96b6..0325f5fc93255e83d7b245a70b6deed6fabd3d5d 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftRedstoneWire.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftRedstoneWire.java
@@ -70,7 +70,7 @@ public final class CraftRedstoneWire extends org.bukkit.craftbukkit.block.data.C
 
     @Override
     public int getPower() {
-        return get(CraftRedstoneWire.POWER);
+        return this.<Integer>get(CraftRedstoneWire.POWER).intValue();
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftReed.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftReed.java
index e8ee448926fbb9a80db61c149a4e5fc1fbba3b97..d132fd36a10d5ac84898f16cab4797911e8a2306 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftReed.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftReed.java
@@ -19,7 +19,7 @@ public final class CraftReed extends org.bukkit.craftbukkit.block.data.CraftBloc
 
     @Override
     public int getAge() {
-        return get(CraftReed.AGE);
+        return this.<Integer>get(CraftReed.AGE).intValue();
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftRepeater.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftRepeater.java
index 4647cf0985add37a4274bdb6f8ba4fbfad25d886..157dab5c4998a1c4ced83f60abd48f546a038ac8 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftRepeater.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftRepeater.java
@@ -23,7 +23,7 @@ public final class CraftRepeater extends org.bukkit.craftbukkit.block.data.Craft
 
     @Override
     public int getDelay() {
-        return get(CraftRepeater.DELAY);
+        return this.<Integer>get(CraftRepeater.DELAY).intValue();
     }
 
     @Override
@@ -43,7 +43,7 @@ public final class CraftRepeater extends org.bukkit.craftbukkit.block.data.Craft
 
     @Override
     public boolean isLocked() {
-        return get(CraftRepeater.LOCKED);
+        return this.<Boolean>get(CraftRepeater.LOCKED).booleanValue();
     }
 
     @Override
@@ -76,7 +76,7 @@ public final class CraftRepeater extends org.bukkit.craftbukkit.block.data.Craft
 
     @Override
     public boolean isPowered() {
-        return get(CraftRepeater.POWERED);
+        return this.<Boolean>get(CraftRepeater.POWERED).booleanValue();
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftRespawnAnchor.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftRespawnAnchor.java
index f651b81d86ecbd2178a86aba9007abb9a9b8b816..745e651a743abe2e85729484519bcc6987d6a0b8 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftRespawnAnchor.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftRespawnAnchor.java
@@ -19,7 +19,7 @@ public final class CraftRespawnAnchor extends org.bukkit.craftbukkit.block.data.
 
     @Override
     public int getCharges() {
-        return get(CraftRespawnAnchor.CHARGES);
+        return this.<Integer>get(CraftRespawnAnchor.CHARGES).intValue();
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftSapling.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftSapling.java
index b07404641c77825512eccd314ed05e5ac873164c..5a82a337a4dfd781776b24a6c3b30307c0c409c1 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftSapling.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftSapling.java
@@ -19,7 +19,7 @@ public final class CraftSapling extends org.bukkit.craftbukkit.block.data.CraftB
 
     @Override
     public int getStage() {
-        return get(CraftSapling.STAGE);
+        return this.<Integer>get(CraftSapling.STAGE).intValue();
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftScaffolding.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftScaffolding.java
index 6109b49606b0e23c5b55ef147645a6b21a34d2d8..0d0bcc92b2f78efe943dab5ca6f705731bf329d2 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftScaffolding.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftScaffolding.java
@@ -20,7 +20,7 @@ public final class CraftScaffolding extends org.bukkit.craftbukkit.block.data.Cr
 
     @Override
     public boolean isBottom() {
-        return get(CraftScaffolding.BOTTOM);
+        return this.<Boolean>get(CraftScaffolding.BOTTOM).booleanValue();
     }
 
     @Override
@@ -30,7 +30,7 @@ public final class CraftScaffolding extends org.bukkit.craftbukkit.block.data.Cr
 
     @Override
     public int getDistance() {
-        return get(CraftScaffolding.DISTANCE);
+        return this.<Integer>get(CraftScaffolding.DISTANCE).intValue();
     }
 
     @Override
@@ -49,7 +49,7 @@ public final class CraftScaffolding extends org.bukkit.craftbukkit.block.data.Cr
 
     @Override
     public boolean isWaterlogged() {
-        return get(CraftScaffolding.WATERLOGGED);
+        return this.<Boolean>get(CraftScaffolding.WATERLOGGED).booleanValue();
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftSculkCatalyst.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftSculkCatalyst.java
index e5be97505a530df3fe7decc7da0da6d8b9422f0b..59374f1f05fb793e756858b588587f0d44140dfc 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftSculkCatalyst.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftSculkCatalyst.java
@@ -19,7 +19,7 @@ public final class CraftSculkCatalyst extends org.bukkit.craftbukkit.block.data.
 
     @Override
     public boolean isBloom() {
-        return get(CraftSculkCatalyst.BLOOM);
+        return this.<Boolean>get(CraftSculkCatalyst.BLOOM).booleanValue();
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftSculkSensor.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftSculkSensor.java
index 8a99d525b9815f47feaa1d4781c202e475180e8f..675a10595cc3128af3f51d99c9725a0570ea33d9 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftSculkSensor.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftSculkSensor.java
@@ -36,7 +36,7 @@ public final class CraftSculkSensor extends org.bukkit.craftbukkit.block.data.Cr
 
     @Override
     public int getPower() {
-        return get(CraftSculkSensor.POWER);
+        return this.<Integer>get(CraftSculkSensor.POWER).intValue();
     }
 
     @Override
@@ -55,7 +55,7 @@ public final class CraftSculkSensor extends org.bukkit.craftbukkit.block.data.Cr
 
     @Override
     public boolean isWaterlogged() {
-        return get(CraftSculkSensor.WATERLOGGED);
+        return this.<Boolean>get(CraftSculkSensor.WATERLOGGED).booleanValue();
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftSculkShrieker.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftSculkShrieker.java
index 66da8c9224b56ab32a486e962f39f37363f9a18c..565fcbe49a7f251280d9f32958d70141f552f3c3 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftSculkShrieker.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftSculkShrieker.java
@@ -20,7 +20,7 @@ public final class CraftSculkShrieker extends org.bukkit.craftbukkit.block.data.
 
     @Override
     public boolean isCanSummon() {
-        return get(CraftSculkShrieker.CAN_SUMMON);
+        return this.<Boolean>get(CraftSculkShrieker.CAN_SUMMON).booleanValue();
     }
 
     @Override
@@ -30,7 +30,7 @@ public final class CraftSculkShrieker extends org.bukkit.craftbukkit.block.data.
 
     @Override
     public boolean isShrieking() {
-        return get(CraftSculkShrieker.SHRIEKING);
+        return this.<Boolean>get(CraftSculkShrieker.SHRIEKING).booleanValue();
     }
 
     @Override
@@ -44,7 +44,7 @@ public final class CraftSculkShrieker extends org.bukkit.craftbukkit.block.data.
 
     @Override
     public boolean isWaterlogged() {
-        return get(CraftSculkShrieker.WATERLOGGED);
+        return this.<Boolean>get(CraftSculkShrieker.WATERLOGGED).booleanValue();
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftSculkVein.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftSculkVein.java
index 80b8cc45df0ed7e8d481c43f23d88cc20b095b2b..d61bff05ae266bb07c76d942817f1ca7bc568038 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftSculkVein.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftSculkVein.java
@@ -28,7 +28,7 @@ public final class CraftSculkVein extends org.bukkit.craftbukkit.block.data.Craf
         if (state == null) {
             throw new IllegalArgumentException("Non-allowed face " + face + ". Check MultipleFacing.getAllowedFaces.");
         }
-        return get(state);
+        return this.<Boolean>get(state).booleanValue();
     }
 
     @Override
@@ -45,7 +45,7 @@ public final class CraftSculkVein extends org.bukkit.craftbukkit.block.data.Craf
         com.google.common.collect.ImmutableSet.Builder<org.bukkit.block.BlockFace> faces = com.google.common.collect.ImmutableSet.builder();
 
         for (int i = 0; i < FACES.length; i++) {
-            if (CraftSculkVein.FACES[i] != null && get(CraftSculkVein.FACES[i])) {
+            if (CraftSculkVein.FACES[i] != null && this.<Boolean>get(CraftSculkVein.FACES[i]).booleanValue()) {
                 faces.add(org.bukkit.block.BlockFace.values()[i]);
             }
         }
@@ -72,7 +72,7 @@ public final class CraftSculkVein extends org.bukkit.craftbukkit.block.data.Craf
 
     @Override
     public boolean isWaterlogged() {
-        return get(CraftSculkVein.WATERLOGGED);
+        return this.<Boolean>get(CraftSculkVein.WATERLOGGED).booleanValue();
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftSeaPickle.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftSeaPickle.java
index 1559fdf50c204ab38274e75fb12fd37e1bb40084..a83fecc18d4563be87b762d532c1f6151ed9a4fc 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftSeaPickle.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftSeaPickle.java
@@ -19,7 +19,7 @@ public final class CraftSeaPickle extends org.bukkit.craftbukkit.block.data.Craf
 
     @Override
     public int getPickles() {
-        return get(CraftSeaPickle.PICKLES);
+        return this.<Integer>get(CraftSeaPickle.PICKLES).intValue();
     }
 
     @Override
@@ -43,7 +43,7 @@ public final class CraftSeaPickle extends org.bukkit.craftbukkit.block.data.Craf
 
     @Override
     public boolean isWaterlogged() {
-        return get(CraftSeaPickle.WATERLOGGED);
+        return this.<Boolean>get(CraftSeaPickle.WATERLOGGED).booleanValue();
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftSkull.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftSkull.java
index 4f086dfe4e9345fa635928f30b05f2ce5d6ed357..1495592dbb1f0e635cb800725e5b53499497b918 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftSkull.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftSkull.java
@@ -22,7 +22,7 @@ public final class CraftSkull extends org.bukkit.craftbukkit.block.data.CraftBlo
 
     @Override
     public org.bukkit.block.@NotNull BlockFace getRotation() {
-        int data = get(CraftSkull.ROTATION);
+        int data = this.<Integer>get(CraftSkull.ROTATION).intValue();
         switch (data) {
             case 0x0:
                 return org.bukkit.block.BlockFace.SOUTH;
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftSkullPlayer.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftSkullPlayer.java
index b98307e4a2337baa2ea7710144a0e0b3cefd1299..fbfbb1e98e0ac80742eb288f84e8f3164a563f1f 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftSkullPlayer.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftSkullPlayer.java
@@ -22,7 +22,7 @@ public final class CraftSkullPlayer extends org.bukkit.craftbukkit.block.data.Cr
 
     @Override
     public org.bukkit.block.@NotNull BlockFace getRotation() {
-        int data = get(CraftSkullPlayer.ROTATION);
+        int data = this.<Integer>get(CraftSkullPlayer.ROTATION).intValue();
         switch (data) {
             case 0x0:
                 return org.bukkit.block.BlockFace.SOUTH;
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftSmallDripleaf.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftSmallDripleaf.java
index 087c81ddbaee9977d96ebc72d7ee4dbb613a9257..97e44cea0d9b17631df09db47b128387af00b780 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftSmallDripleaf.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftSmallDripleaf.java
@@ -55,7 +55,7 @@ public final class CraftSmallDripleaf extends org.bukkit.craftbukkit.block.data.
 
     @Override
     public boolean isWaterlogged() {
-        return get(CraftSmallDripleaf.WATERLOGGED);
+        return this.<Boolean>get(CraftSmallDripleaf.WATERLOGGED).booleanValue();
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftSmoker.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftSmoker.java
index dc0706f753152a5f50e1ae67a727e51fce5ffe8d..4f7ab2fc36605e5a49d00987d81240ab433c2b22 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftSmoker.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftSmoker.java
@@ -41,7 +41,7 @@ public final class CraftSmoker extends org.bukkit.craftbukkit.block.data.CraftBl
 
     @Override
     public boolean isLit() {
-        return get(CraftSmoker.LIT);
+        return this.<Boolean>get(CraftSmoker.LIT).booleanValue();
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftSnow.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftSnow.java
index f357dce627e09758a62872b145d03eec1a65f943..933b7ab07598bbb5c5c3d7feb3b12bf35d6c595d 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftSnow.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftSnow.java
@@ -19,7 +19,7 @@ public final class CraftSnow extends org.bukkit.craftbukkit.block.data.CraftBloc
 
     @Override
     public int getLayers() {
-        return get(CraftSnow.LAYERS);
+        return this.<Integer>get(CraftSnow.LAYERS).intValue();
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftSoil.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftSoil.java
index 6d595f25c47d17f4956062117f51d29d45c69b97..6cc13791dbf8876481729833bab033bbf1b9b800 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftSoil.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftSoil.java
@@ -19,7 +19,7 @@ public final class CraftSoil extends org.bukkit.craftbukkit.block.data.CraftBloc
 
     @Override
     public int getMoisture() {
-        return get(CraftSoil.MOISTURE);
+        return this.<Integer>get(CraftSoil.MOISTURE).intValue();
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftStainedGlassPane.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftStainedGlassPane.java
index 4d181725b8be4ebdea2702a23af0d581f4442149..18c1961a8714c523e1ec5424f4fbb413cf041ba1 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftStainedGlassPane.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftStainedGlassPane.java
@@ -28,7 +28,7 @@ public final class CraftStainedGlassPane extends org.bukkit.craftbukkit.block.da
         if (state == null) {
             throw new IllegalArgumentException("Non-allowed face " + face + ". Check MultipleFacing.getAllowedFaces.");
         }
-        return get(state);
+        return this.<Boolean>get(state).booleanValue();
     }
 
     @Override
@@ -45,7 +45,7 @@ public final class CraftStainedGlassPane extends org.bukkit.craftbukkit.block.da
         com.google.common.collect.ImmutableSet.Builder<org.bukkit.block.BlockFace> faces = com.google.common.collect.ImmutableSet.builder();
 
         for (int i = 0; i < FACES.length; i++) {
-            if (CraftStainedGlassPane.FACES[i] != null && get(CraftStainedGlassPane.FACES[i])) {
+            if (CraftStainedGlassPane.FACES[i] != null && this.<Boolean>get(CraftStainedGlassPane.FACES[i]).booleanValue()) {
                 faces.add(org.bukkit.block.BlockFace.values()[i]);
             }
         }
@@ -72,7 +72,7 @@ public final class CraftStainedGlassPane extends org.bukkit.craftbukkit.block.da
 
     @Override
     public boolean isWaterlogged() {
-        return get(CraftStainedGlassPane.WATERLOGGED);
+        return this.<Boolean>get(CraftStainedGlassPane.WATERLOGGED).booleanValue();
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftStairs.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftStairs.java
index c5ab7faa19172e6f1dc982aed9fd615666ceae8d..da2518f27e226b3db49c2fdc9a6840cda4747f25 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftStairs.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftStairs.java
@@ -69,7 +69,7 @@ public final class CraftStairs extends org.bukkit.craftbukkit.block.data.CraftBl
 
     @Override
     public boolean isWaterlogged() {
-        return get(CraftStairs.WATERLOGGED);
+        return this.<Boolean>get(CraftStairs.WATERLOGGED).booleanValue();
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftStem.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftStem.java
index a38e4424d2336741dc9bfa0c6004c760e76bd46b..2ee48978f55cb12fd5b6b3b7d407469ff550d57b 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftStem.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftStem.java
@@ -19,7 +19,7 @@ public final class CraftStem extends org.bukkit.craftbukkit.block.data.CraftBloc
 
     @Override
     public int getAge() {
-        return get(CraftStem.AGE);
+        return this.<Integer>get(CraftStem.AGE).intValue();
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftStepAbstract.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftStepAbstract.java
index ab9b9017e0b0afae4891aabc176a92e8b38c0afd..c87a0e52c0570e811f36972fc33691160843e232 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftStepAbstract.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftStepAbstract.java
@@ -36,7 +36,7 @@ public final class CraftStepAbstract extends org.bukkit.craftbukkit.block.data.C
 
     @Override
     public boolean isWaterlogged() {
-        return get(CraftStepAbstract.WATERLOGGED);
+        return this.<Boolean>get(CraftStepAbstract.WATERLOGGED).booleanValue();
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftSweetBerryBush.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftSweetBerryBush.java
index 12e281a4a5c076eb7afee89558f8c72fb776571f..110a1cfc8edd424f23ec5d848ed761d205290182 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftSweetBerryBush.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftSweetBerryBush.java
@@ -19,7 +19,7 @@ public final class CraftSweetBerryBush extends org.bukkit.craftbukkit.block.data
 
     @Override
     public int getAge() {
-        return get(CraftSweetBerryBush.AGE);
+        return this.<Integer>get(CraftSweetBerryBush.AGE).intValue();
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftTNT.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftTNT.java
index df08a2afefdb880b59e113332dcc200c382e29c1..a7b574785c6593f5022637e11a1e23d2bb921bc3 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftTNT.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftTNT.java
@@ -19,7 +19,7 @@ public final class CraftTNT extends org.bukkit.craftbukkit.block.data.CraftBlock
 
     @Override
     public boolean isUnstable() {
-        return get(CraftTNT.UNSTABLE);
+        return this.<Boolean>get(CraftTNT.UNSTABLE).booleanValue();
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftTarget.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftTarget.java
index 7a58c988cb539f8cbddf5f7daacaa35993136913..67580dee29a8e372e88a66344c57af5930846df3 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftTarget.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftTarget.java
@@ -19,7 +19,7 @@ public final class CraftTarget extends org.bukkit.craftbukkit.block.data.CraftBl
 
     @Override
     public int getPower() {
-        return get(CraftTarget.POWER);
+        return this.<Integer>get(CraftTarget.POWER).intValue();
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftTrapdoor.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftTrapdoor.java
index f622b73d62294e058b0ccbb92ee9d28526412be0..be81e36cb94992224e6ebd16614d3ef16ec9e6f0 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftTrapdoor.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftTrapdoor.java
@@ -55,7 +55,7 @@ public final class CraftTrapdoor extends org.bukkit.craftbukkit.block.data.Craft
 
     @Override
     public boolean isOpen() {
-        return get(CraftTrapdoor.OPEN);
+        return this.<Boolean>get(CraftTrapdoor.OPEN).booleanValue();
     }
 
     @Override
@@ -69,7 +69,7 @@ public final class CraftTrapdoor extends org.bukkit.craftbukkit.block.data.Craft
 
     @Override
     public boolean isPowered() {
-        return get(CraftTrapdoor.POWERED);
+        return this.<Boolean>get(CraftTrapdoor.POWERED).booleanValue();
     }
 
     @Override
@@ -83,7 +83,7 @@ public final class CraftTrapdoor extends org.bukkit.craftbukkit.block.data.Craft
 
     @Override
     public boolean isWaterlogged() {
-        return get(CraftTrapdoor.WATERLOGGED);
+        return this.<Boolean>get(CraftTrapdoor.WATERLOGGED).booleanValue();
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftTripwire.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftTripwire.java
index a7d6e378b9c25180318c086dab0a947572ff6695..15e1d43c9154b3cbb6c384b3241630adf614283a 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftTripwire.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftTripwire.java
@@ -22,7 +22,7 @@ public final class CraftTripwire extends org.bukkit.craftbukkit.block.data.Craft
 
     @Override
     public boolean isDisarmed() {
-        return get(CraftTripwire.DISARMED);
+        return this.<Boolean>get(CraftTripwire.DISARMED).booleanValue();
     }
 
     @Override
@@ -36,7 +36,7 @@ public final class CraftTripwire extends org.bukkit.craftbukkit.block.data.Craft
 
     @Override
     public boolean isAttached() {
-        return get(CraftTripwire.ATTACHED);
+        return this.<Boolean>get(CraftTripwire.ATTACHED).booleanValue();
     }
 
     @Override
@@ -56,7 +56,7 @@ public final class CraftTripwire extends org.bukkit.craftbukkit.block.data.Craft
         if (state == null) {
             throw new IllegalArgumentException("Non-allowed face " + face + ". Check MultipleFacing.getAllowedFaces.");
         }
-        return get(state);
+        return this.<Boolean>get(state).booleanValue();
     }
 
     @Override
@@ -73,7 +73,7 @@ public final class CraftTripwire extends org.bukkit.craftbukkit.block.data.Craft
         com.google.common.collect.ImmutableSet.Builder<org.bukkit.block.BlockFace> faces = com.google.common.collect.ImmutableSet.builder();
 
         for (int i = 0; i < FACES.length; i++) {
-            if (CraftTripwire.FACES[i] != null && get(CraftTripwire.FACES[i])) {
+            if (CraftTripwire.FACES[i] != null && this.<Boolean>get(CraftTripwire.FACES[i]).booleanValue()) {
                 faces.add(org.bukkit.block.BlockFace.values()[i]);
             }
         }
@@ -100,7 +100,7 @@ public final class CraftTripwire extends org.bukkit.craftbukkit.block.data.Craft
 
     @Override
     public boolean isPowered() {
-        return get(CraftTripwire.POWERED);
+        return this.<Boolean>get(CraftTripwire.POWERED).booleanValue();
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftTripwireHook.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftTripwireHook.java
index 29679b75c0abae91324357512bd596c57ca313d0..5cedbb5397a2476d77fc03672f6605474ed00951 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftTripwireHook.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftTripwireHook.java
@@ -22,7 +22,7 @@ public final class CraftTripwireHook extends org.bukkit.craftbukkit.block.data.C
 
     @Override
     public boolean isAttached() {
-        return get(CraftTripwireHook.ATTACHED);
+        return this.<Boolean>get(CraftTripwireHook.ATTACHED).booleanValue();
     }
 
     @Override
@@ -55,7 +55,7 @@ public final class CraftTripwireHook extends org.bukkit.craftbukkit.block.data.C
 
     @Override
     public boolean isPowered() {
-        return get(CraftTripwireHook.POWERED);
+        return this.<Boolean>get(CraftTripwireHook.POWERED).booleanValue();
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftTurtleEgg.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftTurtleEgg.java
index 9e1581e0d8c5adbde2d42dcc58ece0dcddfa33f9..04b046103ff41e3e970200f5f2fc436d306f27f4 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftTurtleEgg.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftTurtleEgg.java
@@ -20,7 +20,7 @@ public final class CraftTurtleEgg extends org.bukkit.craftbukkit.block.data.Craf
 
     @Override
     public int getEggs() {
-        return get(CraftTurtleEgg.EGGS);
+        return this.<Integer>get(CraftTurtleEgg.EGGS).intValue();
     }
 
     @Override
@@ -40,7 +40,7 @@ public final class CraftTurtleEgg extends org.bukkit.craftbukkit.block.data.Craf
 
     @Override
     public int getHatch() {
-        return get(CraftTurtleEgg.HATCH);
+        return this.<Integer>get(CraftTurtleEgg.HATCH).intValue();
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftTwistingVines.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftTwistingVines.java
index 11d2cb4f1d56a1411af1bf1512a59bf2a669033e..a6e1f906d4ecc0cef7037846459e604193d5450f 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftTwistingVines.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftTwistingVines.java
@@ -19,7 +19,7 @@ public final class CraftTwistingVines extends org.bukkit.craftbukkit.block.data.
 
     @Override
     public int getAge() {
-        return get(CraftTwistingVines.AGE);
+        return this.<Integer>get(CraftTwistingVines.AGE).intValue();
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftVine.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftVine.java
index 12f4798e673d58c95808928d85a56d527ea4561c..bf795c0c9dcbb8b6bff8f0fd9b6657962adbbae1 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftVine.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftVine.java
@@ -28,7 +28,7 @@ public final class CraftVine extends org.bukkit.craftbukkit.block.data.CraftBloc
         if (state == null) {
             throw new IllegalArgumentException("Non-allowed face " + face + ". Check MultipleFacing.getAllowedFaces.");
         }
-        return get(state);
+        return this.<Boolean>get(state).booleanValue();
     }
 
     @Override
@@ -45,7 +45,7 @@ public final class CraftVine extends org.bukkit.craftbukkit.block.data.CraftBloc
         com.google.common.collect.ImmutableSet.Builder<org.bukkit.block.BlockFace> faces = com.google.common.collect.ImmutableSet.builder();
 
         for (int i = 0; i < FACES.length; i++) {
-            if (CraftVine.FACES[i] != null && get(CraftVine.FACES[i])) {
+            if (CraftVine.FACES[i] != null && this.<Boolean>get(CraftVine.FACES[i]).booleanValue()) {
                 faces.add(org.bukkit.block.BlockFace.values()[i]);
             }
         }
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftWallSign.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftWallSign.java
index 1138958e3c0e95769ba8575ec3a85479891ab13e..35179e1a3880f5a23cae767acfbff545c5f93237 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftWallSign.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftWallSign.java
@@ -41,7 +41,7 @@ public final class CraftWallSign extends org.bukkit.craftbukkit.block.data.Craft
 
     @Override
     public boolean isWaterlogged() {
-        return get(CraftWallSign.WATERLOGGED);
+        return this.<Boolean>get(CraftWallSign.WATERLOGGED).booleanValue();
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftWeatheringCopperSlab.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftWeatheringCopperSlab.java
index e7894e15d8ceb07f6149f73c0e45d7ba2b81a70b..cfee1cbc7974d08825b2c14157c21b92da752c9b 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftWeatheringCopperSlab.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftWeatheringCopperSlab.java
@@ -36,7 +36,7 @@ public final class CraftWeatheringCopperSlab extends org.bukkit.craftbukkit.bloc
 
     @Override
     public boolean isWaterlogged() {
-        return get(CraftWeatheringCopperSlab.WATERLOGGED);
+        return this.<Boolean>get(CraftWeatheringCopperSlab.WATERLOGGED).booleanValue();
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftWeatheringCopperStair.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftWeatheringCopperStair.java
index d0095351098c08fb27f85bb3d91d7275d1bd863d..8b12ca8308f995092d71e671f3b9fbd2ab250300 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftWeatheringCopperStair.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftWeatheringCopperStair.java
@@ -69,7 +69,7 @@ public final class CraftWeatheringCopperStair extends org.bukkit.craftbukkit.blo
 
     @Override
     public boolean isWaterlogged() {
-        return get(CraftWeatheringCopperStair.WATERLOGGED);
+        return this.<Boolean>get(CraftWeatheringCopperStair.WATERLOGGED).booleanValue();
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftWeepingVines.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftWeepingVines.java
index 8bbb79db910133d2f2de49c134edba2805e3f50f..67e3d0d4cf0ead9fea9c4366f908b7271303c970 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftWeepingVines.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftWeepingVines.java
@@ -19,7 +19,7 @@ public final class CraftWeepingVines extends org.bukkit.craftbukkit.block.data.C
 
     @Override
     public int getAge() {
-        return get(CraftWeepingVines.AGE);
+        return this.<Integer>get(CraftWeepingVines.AGE).intValue();
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftWitherSkull.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftWitherSkull.java
index 01807a2944a074d5910a065565cd3c0e9d66a7de..6bf7d9c0eda2be16d61a3ac59f649b51cafc562b 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftWitherSkull.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftWitherSkull.java
@@ -22,7 +22,7 @@ public final class CraftWitherSkull extends org.bukkit.craftbukkit.block.data.Cr
 
     @Override
     public org.bukkit.block.@NotNull BlockFace getRotation() {
-        int data = get(CraftWitherSkull.ROTATION);
+        int data = this.<Integer>get(CraftWitherSkull.ROTATION).intValue();
         switch (data) {
             case 0x0:
                 return org.bukkit.block.BlockFace.SOUTH;
diff --git a/src/main/java/org/bukkit/craftbukkit/boss/CraftBossBar.java b/src/main/java/org/bukkit/craftbukkit/boss/CraftBossBar.java
index d92d86dbb4e20d344902b2fc8f64ee0455da8a0e..cabbcdfda7ba3374c7525d956d4d200777a1f8bb 100644
--- a/src/main/java/org/bukkit/craftbukkit/boss/CraftBossBar.java
+++ b/src/main/java/org/bukkit/craftbukkit/boss/CraftBossBar.java
@@ -151,7 +151,7 @@ public class CraftBossBar implements BossBar {
     public boolean hasFlag(BarFlag flag) {
         FlagContainer flagContainer = this.flags.get(flag);
         if (flagContainer != null) {
-            return flagContainer.get.get();
+            return flagContainer.get.get().booleanValue();
         }
         return false;
     }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftEnderDragon.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftEnderDragon.java
index 336baa48c1e0c138dad994e86f893d44c93a2450..87a5828c0e5e08ea9233fe18f58c804052a387f8 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftEnderDragon.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftEnderDragon.java
@@ -51,7 +51,7 @@ public class CraftEnderDragon extends CraftMob implements EnderDragon, CraftEnem
 
     @Override
     public @NotNull Phase getPhase() {
-        return Phase.values()[this.getHandle().getEntityData().get(net.minecraft.world.entity.boss.enderdragon.EnderDragon.DATA_PHASE)];
+        return Phase.values()[this.getHandle().getEntityData().<Integer>get(net.minecraft.world.entity.boss.enderdragon.EnderDragon.DATA_PHASE).intValue()];
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
index bc2f1138dd3136533ff93b17073c0c5e4ada06c6..95aa6b385acb3a92ee56981717949041ab638293 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
@@ -626,7 +626,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
     @Override
     public <T> @NotNull T getClientOption(com.destroystokyo.paper.@NotNull ClientOption<T> type) {
         if (com.destroystokyo.paper.ClientOption.SKIN_PARTS == type) {
-            return type.getType().cast(new com.destroystokyo.paper.PaperSkinParts(getHandle().getEntityData().get(net.minecraft.world.entity.player.Player.DATA_PLAYER_MODE_CUSTOMISATION)));
+            return type.getType().cast(new com.destroystokyo.paper.PaperSkinParts(getHandle().getEntityData().<Byte>get(net.minecraft.world.entity.player.Player.DATA_PLAYER_MODE_CUSTOMISATION).intValue()));
         } else if (com.destroystokyo.paper.ClientOption.CHAT_COLORS_ENABLED == type) {
             return type.getType().cast(Boolean.valueOf(getHandle().canChatInColor()));
         } else if (com.destroystokyo.paper.ClientOption.CHAT_VISIBILITY == type) {
@@ -2487,7 +2487,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
 
     @Override
     public int getClientViewDistance() {
-        return (this.getHandle().clientViewDistance == null) ? Bukkit.getViewDistance() : this.getHandle().clientViewDistance;
+        return (this.getHandle().clientViewDistance == null) ? Bukkit.getViewDistance() : this.getHandle().clientViewDistance.intValue();
     }
 
     // Paper start
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftShulker.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftShulker.java
index c7eed58700ec73fa6dd5e9ae28dc00631e3847e4..ea81b84e688c839292fbeed3aca526e2a1555b14 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftShulker.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftShulker.java
@@ -34,7 +34,7 @@ public class CraftShulker extends CraftGolem implements Shulker, CraftEnemy {
 
     @Override
     public DyeColor getColor() {
-        return DyeColor.getByWoolData(this.getHandle().getEntityData().get(net.minecraft.world.entity.monster.Shulker.DATA_COLOR_ID));
+        return DyeColor.getByWoolData(this.getHandle().getEntityData().<Byte>get(net.minecraft.world.entity.monster.Shulker.DATA_COLOR_ID).byteValue());
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaAxolotlBucket.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaAxolotlBucket.java
index 17aaf0adf9232888b5e95a781b9ef789dd5b4642..0589fa8f04db1a72a5e43dd49f55937231f204ce 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaAxolotlBucket.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaAxolotlBucket.java
@@ -76,7 +76,7 @@ public class CraftMetaAxolotlBucket extends CraftMetaItem implements AxolotlBuck
         super.applyToItem(tag);
 
         if (this.hasVariant()) {
-            tag.putInt(VARIANT.NBT, variant);
+            tag.putInt(VARIANT.NBT, variant.intValue());
         }
 
         if (this.entityTag != null) {
@@ -100,7 +100,7 @@ public class CraftMetaAxolotlBucket extends CraftMetaItem implements AxolotlBuck
 
     @Override
     public Axolotl.@NotNull Variant getVariant() {
-        return Axolotl.Variant.values()[this.variant];
+        return Axolotl.Variant.values()[this.variant.intValue()];
     }
 
     @Override
@@ -141,7 +141,7 @@ public class CraftMetaAxolotlBucket extends CraftMetaItem implements AxolotlBuck
         int hash = original = super.applyHash();
 
         if (this.hasVariant()) {
-            hash = 61 * hash + this.variant;
+            hash = 61 * hash + this.variant.intValue();
         }
         if (this.entityTag != null) {
             hash = 61 * hash + this.entityTag.hashCode();
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaBook.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaBook.java
index 4da629ce6430368e9376d8f78033a41700ac9755..d350ccb7cce18a07265ad07ca43e2642c6ff77d9 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaBook.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaBook.java
@@ -185,11 +185,11 @@ public class CraftMetaBook extends CraftMetaItem implements BookMeta {
         }
 
         if (this.resolved != null) {
-            itemData.putBoolean(RESOLVED.NBT, resolved);
+            itemData.putBoolean(RESOLVED.NBT, resolved.booleanValue());
         }
 
         if (this.generation != null) {
-            itemData.putInt(GENERATION.NBT, generation);
+            itemData.putInt(GENERATION.NBT, generation.intValue());
         }
     }
 
@@ -257,7 +257,7 @@ public class CraftMetaBook extends CraftMetaItem implements BookMeta {
 
     @Override
     public Generation getGeneration() {
-        return (this.generation == null) ? null : Generation.values()[this.generation];
+        return (this.generation == null) ? null : Generation.values()[this.generation.intValue()];
     }
 
     @Override
@@ -486,7 +486,7 @@ public class CraftMetaBook extends CraftMetaItem implements BookMeta {
 
     // TODO Expose this attribute in Bukkit?
     public boolean isResolved() {
-        return (this.resolved == null) ? false : this.resolved;
+        return (this.resolved == null) ? false : this.resolved.booleanValue();
     }
 
     public void setResolved(boolean resolved) {
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaCompass.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaCompass.java
index 300bdc70a328a1fbac7329b2a2fd8a15448adef5..25137ba39b0af92b93dbe5c10942ec600cd283e1 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaCompass.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaCompass.java
@@ -71,9 +71,9 @@ public class CraftMetaCompass extends CraftMetaItem implements CompassMeta {
         String lodestoneWorldString = SerializableMeta.getString(map, LODESTONE_POS_WORLD.BUKKIT, true);
         if (lodestoneWorldString != null) {
             this.lodestoneWorld = StringTag.valueOf(lodestoneWorldString);
-            this.lodestoneX = (Integer) map.get(LODESTONE_POS_X.BUKKIT);
-            this.lodestoneY = (Integer) map.get(LODESTONE_POS_Y.BUKKIT);
-            this.lodestoneZ = (Integer) map.get(LODESTONE_POS_Z.BUKKIT);
+            this.lodestoneX = ((Integer) map.get(LODESTONE_POS_X.BUKKIT)).intValue();
+            this.lodestoneY = ((Integer) map.get(LODESTONE_POS_Y.BUKKIT)).intValue();
+            this.lodestoneZ = ((Integer) map.get(LODESTONE_POS_Z.BUKKIT)).intValue();
         } else {
             // legacy
             Location lodestone = SerializableMeta.getObject(Location.class, map, LODESTONE_POS.BUKKIT, true);
@@ -98,7 +98,7 @@ public class CraftMetaCompass extends CraftMetaItem implements CompassMeta {
         }
 
         if (this.tracked != null) {
-            tag.putBoolean(LODESTONE_TRACKED.NBT, tracked);
+            tag.putBoolean(LODESTONE_TRACKED.NBT, tracked.booleanValue());
         }
     }
 
@@ -159,7 +159,7 @@ public class CraftMetaCompass extends CraftMetaItem implements CompassMeta {
 
     @Override
     public boolean isLodestoneTracked() {
-        return this.hasLodestoneTracked() && this.tracked;
+        return this.hasLodestoneTracked() && this.tracked.booleanValue();
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaCrossbow.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaCrossbow.java
index d6a6ef8823938fe97fd79aa52cd09e5d20e2b983..02ffa021643c711da23683ce94914a969a145587 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaCrossbow.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaCrossbow.java
@@ -67,7 +67,7 @@ public class CraftMetaCrossbow extends CraftMetaItem implements CrossbowMeta {
 
         Boolean charged = SerializableMeta.getObject(Boolean.class, map, CHARGED.BUKKIT, true);
         if (charged != null) {
-            this.charged = charged;
+            this.charged = charged.booleanValue();
         }
 
         Iterable<?> projectiles = SerializableMeta.getObject(Iterable.class, map, CHARGED_PROJECTILES.BUKKIT, true);
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaEnchantedBook.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaEnchantedBook.java
index 5b95a301bace0a82affea3ead76c8b1e55a1602f..2a614fb24d48157fa6ec980b12eac82506b47be7 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaEnchantedBook.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaEnchantedBook.java
@@ -132,7 +132,7 @@ class CraftMetaEnchantedBook extends CraftMetaItem implements EnchantmentStorage
         if (level == null) {
             return 0;
         }
-        return level;
+        return level.intValue();
     }
 
     @Override
@@ -148,7 +148,7 @@ class CraftMetaEnchantedBook extends CraftMetaItem implements EnchantmentStorage
 
         if (ignoreRestrictions || level >= ench.getStartLevel() && level <= ench.getMaxLevel()) {
             Integer old = this.enchantments.put(ench, Integer.valueOf(level));
-            return old == null || old != level;
+            return old == null || old.intValue() != level;
         }
         return false;
     }
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaItem.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaItem.java
index 74b57c17efafd5b48301e85840f46a8d4a7d749c..9ce46b36369a00dc2ee23873686881993502964c 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaItem.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaItem.java
@@ -222,7 +222,7 @@ class CraftMetaItem implements ItemMeta, Damageable, Repairable, BlockDataMeta {
 
         static boolean getBoolean(@NotNull Map<?, ?> map, Object field) {
             Boolean value = SerializableMeta.getObject(Boolean.class, map, field, true);
-            return value != null && value;
+            return value != null && value.booleanValue();
         }
 
         static <T> @org.jetbrains.annotations.Nullable T getObject(@NotNull Class<T> clazz, @NotNull Map<?, ?> map, Object field, boolean nullable) {
@@ -544,7 +544,7 @@ class CraftMetaItem implements ItemMeta, Damageable, Repairable, BlockDataMeta {
 
         Integer repairCost = SerializableMeta.getObject(Integer.class, map, REPAIR.BUKKIT, true);
         if (repairCost != null) {
-            this.setRepairCost(repairCost);
+            this.setRepairCost(repairCost.intValue());
         }
 
         Iterable<?> hideFlags = SerializableMeta.getObject(Iterable.class, map, HIDEFLAGS.BUKKIT, true);
@@ -562,12 +562,12 @@ class CraftMetaItem implements ItemMeta, Damageable, Repairable, BlockDataMeta {
 
         Boolean unbreakable = SerializableMeta.getObject(Boolean.class, map, UNBREAKABLE.BUKKIT, true);
         if (unbreakable != null) {
-            this.setUnbreakable(unbreakable);
+            this.setUnbreakable(unbreakable.booleanValue());
         }
 
         Integer damage = SerializableMeta.getObject(Integer.class, map, DAMAGE.BUKKIT, true);
         if (damage != null) {
-            this.setDamage(damage);
+            this.setDamage(damage.intValue());
         }
 
         // Paper start - Implement an API for CanPlaceOn and CanDestroy NBT values
@@ -701,7 +701,7 @@ class CraftMetaItem implements ItemMeta, Damageable, Repairable, BlockDataMeta {
         }
 
         if (this.hasCustomModelData()) {
-            itemTag.putInt(CUSTOM_MODEL_DATA.NBT, customModelData);
+            itemTag.putInt(CUSTOM_MODEL_DATA.NBT, customModelData.intValue());
         }
 
         if (this.hasBlockData()) {
@@ -949,7 +949,7 @@ class CraftMetaItem implements ItemMeta, Damageable, Repairable, BlockDataMeta {
         if (level == null) {
             return 0;
         }
-        return level;
+        return level.intValue();
     }
 
     @Override
@@ -966,7 +966,7 @@ class CraftMetaItem implements ItemMeta, Damageable, Repairable, BlockDataMeta {
 
         if (ignoreRestrictions || level >= ench.getStartLevel() && level <= ench.getMaxLevel()) {
             Integer old = this.enchantments.put(ench, Integer.valueOf(level));
-            return old == null || old != level;
+            return old == null || old.intValue() != level;
         }
         return false;
     }
@@ -1081,7 +1081,7 @@ class CraftMetaItem implements ItemMeta, Damageable, Repairable, BlockDataMeta {
     @Override
     public int getCustomModelData() {
         Preconditions.checkState(this.hasCustomModelData(), "We don't have CustomModelData! Check hasCustomModelData first!");
-        return this.customModelData;
+        return this.customModelData.intValue();
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaMap.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaMap.java
index e76ae30b0ed14dd044330a6b3dd8db87d480bc6c..a233c796e6c323b75a1449a23681f662dbfc6a93 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaMap.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaMap.java
@@ -80,12 +80,12 @@ class CraftMetaMap extends CraftMetaItem implements MapMeta {
 
         Integer id = SerializableMeta.getObject(Integer.class, map, MAP_ID.BUKKIT, true);
         if (id != null) {
-            this.setMapId(id);
+            this.setMapId(id.intValue());
         }
 
         Boolean scaling = SerializableMeta.getObject(Boolean.class, map, MAP_SCALING.BUKKIT, true);
         if (scaling != null) {
-            this.setScaling(scaling);
+            this.setScaling(scaling.booleanValue());
         }
 
         String locName = SerializableMeta.getString(map, MAP_LOC_NAME.BUKKIT, true);
@@ -142,7 +142,7 @@ class CraftMetaMap extends CraftMetaItem implements MapMeta {
     @Override
     public int getMapId() {
         Preconditions.checkState(this.hasMapView(), "Item does not have map associated - check hasMapView() first!"); // Paper - more friendly message
-        return this.mapId;
+        return this.mapId.intValue();
     }
 
     @Override
@@ -158,7 +158,7 @@ class CraftMetaMap extends CraftMetaItem implements MapMeta {
     @Override
     public MapView getMapView() {
         Preconditions.checkState(this.hasMapView(), "Item does not have map associated - check hasMapView() first!");
-        return Bukkit.getMap(mapId);
+        return Bukkit.getMap(mapId.intValue());
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaTropicalFishBucket.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaTropicalFishBucket.java
index 5be8c48970ba4946a94a08577ea5930e02bdc1af..4a49f49045eb19c6e6725b5dbc304208742ecd05 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaTropicalFishBucket.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftMetaTropicalFishBucket.java
@@ -77,7 +77,7 @@ class CraftMetaTropicalFishBucket extends CraftMetaItem implements TropicalFishB
         super.applyToItem(tag);
 
         if (this.hasVariant()) {
-            tag.putInt(VARIANT.NBT, variant);
+            tag.putInt(VARIANT.NBT, variant.intValue());
         }
 
         if (this.entityTag != null) {
@@ -101,7 +101,7 @@ class CraftMetaTropicalFishBucket extends CraftMetaItem implements TropicalFishB
 
     @Override
     public @NotNull DyeColor getPatternColor() {
-        return CraftTropicalFish.getPatternColor(variant);
+        return CraftTropicalFish.getPatternColor(variant.intValue());
     }
 
     @Override
@@ -114,7 +114,7 @@ class CraftMetaTropicalFishBucket extends CraftMetaItem implements TropicalFishB
 
     @Override
     public @NotNull DyeColor getBodyColor() {
-        return CraftTropicalFish.getBodyColor(variant);
+        return CraftTropicalFish.getBodyColor(variant.intValue());
     }
 
     @Override
@@ -127,7 +127,7 @@ class CraftMetaTropicalFishBucket extends CraftMetaItem implements TropicalFishB
 
     @Override
     public TropicalFish.@NotNull Pattern getPattern() {
-        return CraftTropicalFish.getPattern(variant);
+        return CraftTropicalFish.getPattern(variant.intValue());
     }
 
     @Override
@@ -168,7 +168,7 @@ class CraftMetaTropicalFishBucket extends CraftMetaItem implements TropicalFishB
         int hash = original = super.applyHash();
 
         if (this.hasVariant()) {
-            hash = 61 * hash + this.variant;
+            hash = 61 * hash + this.variant.intValue();
         }
         if (this.entityTag != null) {
             hash = 61 * hash + this.entityTag.hashCode();
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/InventoryIterator.java b/src/main/java/org/bukkit/craftbukkit/inventory/InventoryIterator.java
index db15e12032f95ffa7dde231e2cbe4d57bdf134d2..f25df35e9694f6520f75d68cdfa0291cd79b851d 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/InventoryIterator.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/InventoryIterator.java
@@ -58,7 +58,7 @@ public class InventoryIterator implements ListIterator<ItemStack> {
         if (this.lastDirection == null) {
             throw new IllegalStateException("No current item!");
         }
-        int i = this.lastDirection ? this.nextIndex - 1 : this.nextIndex;
+        int i = this.lastDirection.booleanValue() ? this.nextIndex - 1 : this.nextIndex;
         this.inventory.setItem(i, item);
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/legacy/CraftLegacy.java b/src/main/java/org/bukkit/craftbukkit/legacy/CraftLegacy.java
index e9a3360c26f6cfb6ff85287ba5d81f4e83f1eb69..2dcd13ac0c9ff07f8d58cfcd257f077010a2afd3 100644
--- a/src/main/java/org/bukkit/craftbukkit/legacy/CraftLegacy.java
+++ b/src/main/java/org/bukkit/craftbukkit/legacy/CraftLegacy.java
@@ -428,7 +428,7 @@ public final class CraftLegacy {
             }
 
             for (Map.Entry<Byte, Material> entry : SPAWN_EGGS.entrySet()) {
-                MaterialData matData = new MaterialData(Material.LEGACY_MONSTER_EGG, entry.getKey());
+                MaterialData matData = new MaterialData(Material.LEGACY_MONSTER_EGG, entry.getKey().byteValue());
                 Item newMaterial = CraftMagicNumbers.getItem(entry.getValue());
 
                 materialToItem.put(matData, newMaterial);
diff --git a/src/main/java/org/bukkit/craftbukkit/scoreboard/CraftTeam.java b/src/main/java/org/bukkit/craftbukkit/scoreboard/CraftTeam.java
index 5b44b251ee21bcf42435181d399fd3d46e06e1fc..c21a3d2871e741e37c0078ed1d5c564a1efca0d8 100644
--- a/src/main/java/org/bukkit/craftbukkit/scoreboard/CraftTeam.java
+++ b/src/main/java/org/bukkit/craftbukkit/scoreboard/CraftTeam.java
@@ -74,7 +74,7 @@ final class CraftTeam extends CraftScoreboardComponent implements Team {
     public net.kyori.adventure.text.format.@NotNull TextColor color() throws IllegalStateException {
         CraftScoreboard scoreboard = checkState();
         if (team.getColor().getColor() == null) throw new IllegalStateException("Team colors must have hex values");
-        net.kyori.adventure.text.format.TextColor color = net.kyori.adventure.text.format.TextColor.color(team.getColor().getColor());
+        net.kyori.adventure.text.format.TextColor color = net.kyori.adventure.text.format.TextColor.color(team.getColor().getColor().intValue());
         if (!(color instanceof net.kyori.adventure.text.format.NamedTextColor)) throw new IllegalStateException("Team doesn't have a NamedTextColor");
         return (net.kyori.adventure.text.format.NamedTextColor) color;
     }
