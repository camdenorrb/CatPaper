From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: camdenorrb <me@12oclock.dev>
Date: Sat, 22 Oct 2022 02:57:23 -0500
Subject: [PATCH] Bulk operation


diff --git a/src/main/java/ca/spottedleaf/concurrentutil/map/SWMRHashTable.java b/src/main/java/ca/spottedleaf/concurrentutil/map/SWMRHashTable.java
index 58caff48752ef72ccc35fb32b53c630ba3990b9c..4ba45bf44e278228fb372633d45de9c92ccdfc09 100644
--- a/src/main/java/ca/spottedleaf/concurrentutil/map/SWMRHashTable.java
+++ b/src/main/java/ca/spottedleaf/concurrentutil/map/SWMRHashTable.java
@@ -1412,7 +1412,7 @@ public class SWMRHashTable<K, V> implements Map<K, V>, Iterable<Map.Entry<K, V>>
         public Object @NotNull [] toArray() {
             final List<T> list = new ArrayList<>(this.size());
 
-            this.forEach(list::add);
+	        list.addAll(this);
 
             return list.toArray();
         }
@@ -1421,7 +1421,7 @@ public class SWMRHashTable<K, V> implements Map<K, V>, Iterable<Map.Entry<K, V>>
         public <E> E @NotNull [] toArray(final E @NotNull [] array) {
             final List<T> list = new ArrayList<>(this.size());
 
-            this.forEach(list::add);
+	        list.addAll(this);
 
             return list.toArray(array);
         }
@@ -1430,7 +1430,7 @@ public class SWMRHashTable<K, V> implements Map<K, V>, Iterable<Map.Entry<K, V>>
         public <E> E[] toArray(final IntFunction<E[]> generator) {
             final List<T> list = new ArrayList<>(this.size());
 
-            this.forEach(list::add);
+	        list.addAll(this);
 
             return list.toArray(generator);
         }
diff --git a/src/main/java/net/minecraft/network/protocol/PacketUtils.java b/src/main/java/net/minecraft/network/protocol/PacketUtils.java
index 27d4aa45e585842c04491839826d405d6f447f0e..d1e2ba1698f006013826f137035b325fea910225 100644
--- a/src/main/java/net/minecraft/network/protocol/PacketUtils.java
+++ b/src/main/java/net/minecraft/network/protocol/PacketUtils.java
@@ -25,9 +25,7 @@ public class PacketUtils {
 
     public static java.util.List<PacketListener> getCurrentPacketProcessors() {
         java.util.List<PacketListener> ret = new java.util.ArrayList<>(4);
-        for (PacketListener listener : packetProcessing) {
-            ret.add(listener);
-        }
+	    ret.addAll(packetProcessing);
 
         return ret;
     }
diff --git a/src/main/java/net/minecraft/server/level/ServerPlayer.java b/src/main/java/net/minecraft/server/level/ServerPlayer.java
index ea7fdc20246ea4e10b3380ce2ca3f77380557adf..9f38cc99658a3608af6977b1e985e2b3945e0911 100644
--- a/src/main/java/net/minecraft/server/level/ServerPlayer.java
+++ b/src/main/java/net/minecraft/server/level/ServerPlayer.java
@@ -895,9 +895,7 @@ public class ServerPlayer extends Player {
         if (this.shouldDropLoot() && this.level.getGameRules().getBoolean(GameRules.RULE_DOMOBLOOT)) { // Paper - preserve this check from vanilla
         // SPIGOT-5071: manually add player loot tables (SPIGOT-5195 - ignores keepInventory rule)
         this.dropFromLootTable(damageSource, this.lastHurtByPlayerTime > 0);
-        for (org.bukkit.inventory.ItemStack item : this.drops) {
-            loot.add(item);
-        }
+            loot.addAll(this.drops);
         this.drops.clear(); // SPIGOT-5188: make sure to clear
         } // Paper
 
diff --git a/src/main/java/org/bukkit/craftbukkit/util/WeakCollection.java b/src/main/java/org/bukkit/craftbukkit/util/WeakCollection.java
index 62fcc0871d22ad22c76eeacc50bb361f594e2340..a6584763372cce4926d2d2bce2e59e5c52d290c4 100644
--- a/src/main/java/org/bukkit/craftbukkit/util/WeakCollection.java
+++ b/src/main/java/org/bukkit/craftbukkit/util/WeakCollection.java
@@ -179,9 +179,7 @@ public final class WeakCollection<T> implements Collection<T> {
 
     private @NotNull Collection<T> toCollection() {
         ArrayList<T> collection = new ArrayList<T>();
-        for (T value : this) {
-            collection.add(value);
-        }
+	    collection.addAll(this);
         return collection;
     }
 }
