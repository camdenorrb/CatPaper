From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: camdenorrb <me@12oclock.dev>
Date: Sat, 22 Oct 2022 03:48:29 -0500
Subject: [PATCH] Make fields final


diff --git a/src/main/java/com/destroystokyo/paper/gui/GraphData.java b/src/main/java/com/destroystokyo/paper/gui/GraphData.java
index 186fc722965e403f76b1480e1c2381fc34e29049..b52280d7718139ebe17f5b581a870e0dde819200 100644
--- a/src/main/java/com/destroystokyo/paper/gui/GraphData.java
+++ b/src/main/java/com/destroystokyo/paper/gui/GraphData.java
@@ -3,11 +3,11 @@ package com.destroystokyo.paper.gui;
 import java.awt.Color;
 
 public class GraphData {
-    private long total;
-    private long free;
-    private long max;
-    private long usedMem;
-    private int usedPercent;
+    private final long total;
+    private final long free;
+    private final long max;
+    private final long usedMem;
+    private final int usedPercent;
 
     public GraphData(long total, long free, long max) {
         this.total = total;
diff --git a/src/main/java/com/destroystokyo/paper/loottable/PaperTileEntityLootableInventory.java b/src/main/java/com/destroystokyo/paper/loottable/PaperTileEntityLootableInventory.java
index 281ed982657222dc767e3ae977e35148a1b1c478..da8485454d01a37f42c7c5a809ee2c293f997d06 100644
--- a/src/main/java/com/destroystokyo/paper/loottable/PaperTileEntityLootableInventory.java
+++ b/src/main/java/com/destroystokyo/paper/loottable/PaperTileEntityLootableInventory.java
@@ -10,7 +10,7 @@ import org.jetbrains.annotations.Nullable;
 
 
 public class PaperTileEntityLootableInventory implements PaperLootableBlockInventory {
-    private RandomizableContainerBlockEntity tileEntityLootable;
+    private final RandomizableContainerBlockEntity tileEntityLootable;
 
     public PaperTileEntityLootableInventory(RandomizableContainerBlockEntity tileEntityLootable) {
         this.tileEntityLootable = tileEntityLootable;
diff --git a/src/main/java/com/mojang/brigadier/tree/CommandNode.java b/src/main/java/com/mojang/brigadier/tree/CommandNode.java
index ce45c49e6da2aedf89d6faaecd8e73a3af3b378c..604df9e10388ce97f3afa57cb399e3183b20c64f 100644
--- a/src/main/java/com/mojang/brigadier/tree/CommandNode.java
+++ b/src/main/java/com/mojang/brigadier/tree/CommandNode.java
@@ -29,7 +29,7 @@ import org.jetbrains.annotations.Nullable;
 
 
 public abstract class CommandNode<S> implements Comparable<CommandNode<S>> {
-    private @NotNull Map<String, CommandNode<S>> children = com.google.common.collect.Maps.newTreeMap(); // Paper - Switch to tree map for automatic sorting
+    private final @NotNull Map<String, CommandNode<S>> children = com.google.common.collect.Maps.newTreeMap(); // Paper - Switch to tree map for automatic sorting
     private final Map<String, LiteralCommandNode<S>> literals = new LinkedHashMap<>();
     private final Map<String, ArgumentCommandNode<S, ?>> arguments = new LinkedHashMap<>();
     public Predicate<S> requirement;
diff --git a/src/main/java/io/papermc/paper/chunk/system/io/RegionFileIOThread.java b/src/main/java/io/papermc/paper/chunk/system/io/RegionFileIOThread.java
index 9b28c8e9e5bc2dfa300f5f7a3a41cc6d6136aeb1..aa88200b88462706baad682892fdc99a1e33d102 100644
--- a/src/main/java/io/papermc/paper/chunk/system/io/RegionFileIOThread.java
+++ b/src/main/java/io/papermc/paper/chunk/system/io/RegionFileIOThread.java
@@ -993,7 +993,7 @@ public final class RegionFileIOThread extends PrioritisedQueueExecutorThread {
 
     static final class CancellableReads implements Cancellable {
 
-        private Cancellable[] reads;
+        private final Cancellable[] reads;
 
         protected static final VarHandle READS_HANDLE = ConcurrentUtil.getVarHandle(CancellableReads.class, "reads", Cancellable[].class);
 
diff --git a/src/main/java/net/minecraft/network/Connection.java b/src/main/java/net/minecraft/network/Connection.java
index 93b94311c0f150de5a40ed285ab1b6f494b648f2..43ddbee231043f9eb7182709d3ebf033ee3d7cab 100644
--- a/src/main/java/net/minecraft/network/Connection.java
+++ b/src/main/java/net/minecraft/network/Connection.java
@@ -117,7 +117,7 @@ public class Connection extends SimpleChannelInboundHandler<Packet<?>> {
     // Paper start - NetworkClient implementation
     public int protocolVersion;
     public java.net.InetSocketAddress virtualHost;
-    private static boolean enableExplicitFlush = Boolean.getBoolean("paper.explicit-flush");
+    private static final boolean enableExplicitFlush = Boolean.getBoolean("paper.explicit-flush");
     // Optimize network
     public boolean isPending = true;
     public boolean queueImmunity = false;
diff --git a/src/main/java/net/minecraft/network/PacketEncoder.java b/src/main/java/net/minecraft/network/PacketEncoder.java
index 866eb9f36d639efa181e17330d73cf9fd5829328..b2559da1137a12cd4a6ee00aa1a5b2feb28f19f2 100644
--- a/src/main/java/net/minecraft/network/PacketEncoder.java
+++ b/src/main/java/net/minecraft/network/PacketEncoder.java
@@ -66,7 +66,7 @@ public class PacketEncoder extends MessageToByteEncoder<Packet<?>> {
     }
 
     // Paper start
-    private static int MAX_PACKET_SIZE = 2097152;
+    private static final int MAX_PACKET_SIZE = 2097152;
 
     public static class PacketTooLargeException extends RuntimeException {
         private final Packet<?> packet;
diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index a45e5d6e6dfda024ed0b0d38aff6b7ede41399ef..1a101c7232037900fb5800430c89da732a946a7f 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -1045,7 +1045,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
     private static final long SEC_IN_NANO = 1000000000;
     private static final long MAX_CATCHUP_BUFFER = TICK_TIME * TPS * 60L;
     private long lastTick = 0;
-    private long catchupTime = 0;
+    private final long catchupTime = 0;
     public final RollingAverage tps1 = new RollingAverage(60);
     public final RollingAverage tps5 = new RollingAverage(60 * 5);
     public final RollingAverage tps15 = new RollingAverage(60 * 15);
diff --git a/src/main/java/net/minecraft/server/players/PlayerList.java b/src/main/java/net/minecraft/server/players/PlayerList.java
index 80c4a62498e83f0dbb6b8888682c10dbf1a76835..9d1290c504309dfbe0655080f41c5f145d847d07 100644
--- a/src/main/java/net/minecraft/server/players/PlayerList.java
+++ b/src/main/java/net/minecraft/server/players/PlayerList.java
@@ -159,7 +159,7 @@ public abstract class PlayerList {
     private int sendAllPlayerInfoIn;
 
     // CraftBukkit start
-    private CraftServer cserver;
+    private final CraftServer cserver;
     private final Map<String,ServerPlayer> playersByName = new java.util.HashMap<>();
     public @Nullable String collideRuleTeamName; // Paper - Team name used for collideRule
 
diff --git a/src/main/java/net/minecraft/server/players/StoredUserList.java b/src/main/java/net/minecraft/server/players/StoredUserList.java
index 4fd709a550bf8da1e996894a1ca6b91206c31e9e..10300c9166111130fefa8b103a9e8f2c9fd503f5 100644
--- a/src/main/java/net/minecraft/server/players/StoredUserList.java
+++ b/src/main/java/net/minecraft/server/players/StoredUserList.java
@@ -34,7 +34,7 @@ public abstract class StoredUserList<K, V extends StoredUserEntry<K>> {
     private final File file;
     // Paper - replace HashMap is ConcurrentHashMap
     private final Map<String, V> map = Maps.newConcurrentMap();
-    private boolean e = true;
+    private final boolean e = true;
     private static final ParameterizedType f = new ParameterizedType() {
         public Type[] getActualTypeArguments() {
             return new Type[]{StoredUserEntry.class};
diff --git a/src/main/java/net/minecraft/world/entity/LivingEntity.java b/src/main/java/net/minecraft/world/entity/LivingEntity.java
index cce59d43500c7b2a95475ae10b9d05a3cd3bce48..c33041be2464f1f8a04a8146b251975be2f3f3fc 100644
--- a/src/main/java/net/minecraft/world/entity/LivingEntity.java
+++ b/src/main/java/net/minecraft/world/entity/LivingEntity.java
@@ -869,7 +869,7 @@ public abstract class LivingEntity extends Entity {
 
     // CraftBukkit start
     private boolean isTickingEffects = false;
-    private List<ProcessableEffect> effectsToProcess = Lists.newArrayList();
+    private final List<ProcessableEffect> effectsToProcess = Lists.newArrayList();
 
     private static class ProcessableEffect {
 
diff --git a/src/main/java/net/minecraft/world/entity/boss/enderdragon/EnderDragon.java b/src/main/java/net/minecraft/world/entity/boss/enderdragon/EnderDragon.java
index 16c5c7bad21e0b2ef8bafef4c5a50f05543519da..cb21dbf16e2befd27d85839d4d984445d22f5b2f 100644
--- a/src/main/java/net/minecraft/world/entity/boss/enderdragon/EnderDragon.java
+++ b/src/main/java/net/minecraft/world/entity/boss/enderdragon/EnderDragon.java
@@ -98,7 +98,7 @@ public class EnderDragon extends Mob implements Enemy {
     private final Node[] nodes = new Node[24];
     private final int[] nodeAdjacency = new int[24];
     private final BinaryHeap openSet = new BinaryHeap();
-    private Explosion explosionSource = new Explosion(null, this, null, null, Double.NaN, Double.NaN, Double.NaN, Float.NaN, true, Explosion.BlockInteraction.DESTROY); // CraftBukkit - reusable source for CraftTNTPrimed.getSource()
+    private final Explosion explosionSource = new Explosion(null, this, null, null, Double.NaN, Double.NaN, Double.NaN, Float.NaN, true, Explosion.BlockInteraction.DESTROY); // CraftBukkit - reusable source for CraftTNTPrimed.getSource()
     // Paper start - add var for save custom podium
     @Nullable
     private BlockPos podium;
diff --git a/src/main/java/net/minecraft/world/food/FoodData.java b/src/main/java/net/minecraft/world/food/FoodData.java
index 2934b6de1f1fb914a532ee20184df99d1acd8e65..347621de1b7ab881ea392c3d6f0354e8d86be793 100644
--- a/src/main/java/net/minecraft/world/food/FoodData.java
+++ b/src/main/java/net/minecraft/world/food/FoodData.java
@@ -17,7 +17,7 @@ public class FoodData {
     public float exhaustionLevel;
     private int tickTimer;
     // CraftBukkit start
-    private Player entityhuman;
+    private final Player entityhuman;
     public int saturatedRegenRate = 10;
     public int unsaturatedRegenRate = 80;
     public int starvationRate = 80;
diff --git a/src/main/java/net/minecraft/world/inventory/AbstractFurnaceMenu.java b/src/main/java/net/minecraft/world/inventory/AbstractFurnaceMenu.java
index fa0d55946680f1a913493d8a36abe266ace8be52..9fd263f1648c1f26183a7e18d02812820c780759 100644
--- a/src/main/java/net/minecraft/world/inventory/AbstractFurnaceMenu.java
+++ b/src/main/java/net/minecraft/world/inventory/AbstractFurnaceMenu.java
@@ -35,7 +35,7 @@ public abstract class AbstractFurnaceMenu extends RecipeBookMenu<Container> {
 
     // CraftBukkit start
     private CraftInventoryView bukkitEntity = null;
-    private Inventory player;
+    private final Inventory player;
 
     @Override
     public CraftInventoryView getBukkitView() {
diff --git a/src/main/java/net/minecraft/world/inventory/BeaconMenu.java b/src/main/java/net/minecraft/world/inventory/BeaconMenu.java
index 4e40203125b2931d45666fccb022e84622ea61c2..0b0481e826c125eace3649404b62d0135425ade1 100644
--- a/src/main/java/net/minecraft/world/inventory/BeaconMenu.java
+++ b/src/main/java/net/minecraft/world/inventory/BeaconMenu.java
@@ -29,7 +29,7 @@ public class BeaconMenu extends AbstractContainerMenu {
     private final ContainerData beaconData;
     // CraftBukkit start
     private CraftInventoryView bukkitEntity = null;
-    private Inventory player;
+    private final Inventory player;
     // CraftBukkit end
 
     public BeaconMenu(int syncId, Container inventory) {
diff --git a/src/main/java/net/minecraft/world/inventory/BrewingStandMenu.java b/src/main/java/net/minecraft/world/inventory/BrewingStandMenu.java
index e149d3d6637a321903866d22f77cdd9e459ccf5c..4cfa835857518a5e4fb1b6c7af1e76132efbce97 100644
--- a/src/main/java/net/minecraft/world/inventory/BrewingStandMenu.java
+++ b/src/main/java/net/minecraft/world/inventory/BrewingStandMenu.java
@@ -34,7 +34,7 @@ public class BrewingStandMenu extends AbstractContainerMenu {
 
     // CraftBukkit start
     private CraftInventoryView bukkitEntity = null;
-    private Inventory player;
+    private final Inventory player;
     // CraftBukkit end
 
     public BrewingStandMenu(int syncId, Inventory playerInventory) {
diff --git a/src/main/java/net/minecraft/world/inventory/CartographyTableMenu.java b/src/main/java/net/minecraft/world/inventory/CartographyTableMenu.java
index 7733b5271307849e3e56c6089649c4caa7c0ac1d..b7b3e7619cf2ec4deba82e7a63cfe70253a5e40f 100644
--- a/src/main/java/net/minecraft/world/inventory/CartographyTableMenu.java
+++ b/src/main/java/net/minecraft/world/inventory/CartographyTableMenu.java
@@ -21,7 +21,7 @@ public class CartographyTableMenu extends AbstractContainerMenu {
 
     // CraftBukkit start
     private CraftInventoryView bukkitEntity = null;
-    private Player player;
+    private final Player player;
 
     @Override
     public CraftInventoryView getBukkitView() {
diff --git a/src/main/java/net/minecraft/world/inventory/ChestMenu.java b/src/main/java/net/minecraft/world/inventory/ChestMenu.java
index 82331715e91c6e9a13c0626164368ae16e754126..d8c9f7f71257c2d1dab7f0a80cb2b6bee4c4ac59 100644
--- a/src/main/java/net/minecraft/world/inventory/ChestMenu.java
+++ b/src/main/java/net/minecraft/world/inventory/ChestMenu.java
@@ -17,7 +17,7 @@ public class ChestMenu extends AbstractContainerMenu {
     private final int containerRows;
     // CraftBukkit start
     private CraftInventoryView bukkitEntity = null;
-    private Inventory player;
+    private final Inventory player;
 
     @Override
     public CraftInventoryView getBukkitView() {
diff --git a/src/main/java/net/minecraft/world/inventory/DispenserMenu.java b/src/main/java/net/minecraft/world/inventory/DispenserMenu.java
index 813cb39be65ff38d95ff51779f2fb1f704af7c4b..a6b75ee21e96f69b2a565eb451c16f32d4d0cdb6 100644
--- a/src/main/java/net/minecraft/world/inventory/DispenserMenu.java
+++ b/src/main/java/net/minecraft/world/inventory/DispenserMenu.java
@@ -21,7 +21,7 @@ public class DispenserMenu extends AbstractContainerMenu {
     public final Container dispenser;
     // CraftBukkit start
     private CraftInventoryView bukkitEntity = null;
-    private Inventory player;
+    private final Inventory player;
     // CraftBukkit end
 
     public DispenserMenu(int syncId, Inventory playerInventory) {
diff --git a/src/main/java/net/minecraft/world/inventory/EnchantmentMenu.java b/src/main/java/net/minecraft/world/inventory/EnchantmentMenu.java
index 8693c00fa33343e723f1cc5fa955f6e5f5eaa075..a7bda9c3a690d8fb7fbc04f39545456a8862044d 100644
--- a/src/main/java/net/minecraft/world/inventory/EnchantmentMenu.java
+++ b/src/main/java/net/minecraft/world/inventory/EnchantmentMenu.java
@@ -49,7 +49,7 @@ public class EnchantmentMenu extends AbstractContainerMenu {
     public final int[] levelClue;
     // CraftBukkit start
     private CraftInventoryView bukkitEntity = null;
-    private Player player;
+    private final Player player;
     // CraftBukkit end
 
     public EnchantmentMenu(int syncId, Inventory playerInventory) {
diff --git a/src/main/java/net/minecraft/world/inventory/GrindstoneMenu.java b/src/main/java/net/minecraft/world/inventory/GrindstoneMenu.java
index abf0debfe9fc42cefc9239b151aba3b1b20c0c64..5015a304efaa2c659472b9985db01662b7053da5 100644
--- a/src/main/java/net/minecraft/world/inventory/GrindstoneMenu.java
+++ b/src/main/java/net/minecraft/world/inventory/GrindstoneMenu.java
@@ -28,7 +28,7 @@ public class GrindstoneMenu extends AbstractContainerMenu {
 
     // CraftBukkit start
     private CraftInventoryView bukkitEntity = null;
-    private Player player;
+    private final Player player;
 
     @Override
     public CraftInventoryView getBukkitView() {
diff --git a/src/main/java/net/minecraft/world/inventory/HopperMenu.java b/src/main/java/net/minecraft/world/inventory/HopperMenu.java
index 319c37e1fb5c44e150a77cf43769614f4cf4507e..32fed8971b5887e90aeb05a45d9e3f71ee136186 100644
--- a/src/main/java/net/minecraft/world/inventory/HopperMenu.java
+++ b/src/main/java/net/minecraft/world/inventory/HopperMenu.java
@@ -18,7 +18,7 @@ public class HopperMenu extends AbstractContainerMenu {
 
     // CraftBukkit start
     private CraftInventoryView bukkitEntity = null;
-    private Inventory player;
+    private final Inventory player;
 
     @Override
     public CraftInventoryView getBukkitView() {
diff --git a/src/main/java/net/minecraft/world/inventory/InventoryMenu.java b/src/main/java/net/minecraft/world/inventory/InventoryMenu.java
index 150701f965006f1c7dc9d801ca0ab0add927d143..0951e194718ed466987658c6a3cda19c59a47d24 100644
--- a/src/main/java/net/minecraft/world/inventory/InventoryMenu.java
+++ b/src/main/java/net/minecraft/world/inventory/InventoryMenu.java
@@ -45,7 +45,7 @@ public class InventoryMenu extends RecipeBookMenu<CraftingContainer> {
     private final Player owner;
     // CraftBukkit start
     private CraftInventoryView bukkitEntity = null;
-    private Inventory player;
+    private final Inventory player;
     // CraftBukkit end
 
     public InventoryMenu(Inventory inventory, boolean onServer, final Player owner) {
diff --git a/src/main/java/net/minecraft/world/inventory/LecternMenu.java b/src/main/java/net/minecraft/world/inventory/LecternMenu.java
index 84795cd53720a618360644702b22abe8d015dadc..08e0c0309588f6d2be268d37dbbf8e50bac1b911 100644
--- a/src/main/java/net/minecraft/world/inventory/LecternMenu.java
+++ b/src/main/java/net/minecraft/world/inventory/LecternMenu.java
@@ -16,7 +16,7 @@ public class LecternMenu extends AbstractContainerMenu {
 
     // CraftBukkit start
     private CraftInventoryView bukkitEntity = null;
-    private Player player;
+    private final Player player;
 
     @Override
     public CraftInventoryView getBukkitView() {
diff --git a/src/main/java/net/minecraft/world/inventory/LoomMenu.java b/src/main/java/net/minecraft/world/inventory/LoomMenu.java
index 8dc626e7e37161901f660116814ea4f6f2920510..99620b1f33da6eba5b661e108f018f94029170c6 100644
--- a/src/main/java/net/minecraft/world/inventory/LoomMenu.java
+++ b/src/main/java/net/minecraft/world/inventory/LoomMenu.java
@@ -33,7 +33,7 @@ public class LoomMenu extends AbstractContainerMenu {
 
     // CraftBukkit start
     private CraftInventoryView bukkitEntity = null;
-    private Player player;
+    private final Player player;
 
     @Override
     public CraftInventoryView getBukkitView() {
diff --git a/src/main/java/net/minecraft/world/inventory/MerchantMenu.java b/src/main/java/net/minecraft/world/inventory/MerchantMenu.java
index 3879373eeef324a6c782d3426faf22ac70353931..5f86998b006a1c10ae0adcd6a10188e43c1e4187 100644
--- a/src/main/java/net/minecraft/world/inventory/MerchantMenu.java
+++ b/src/main/java/net/minecraft/world/inventory/MerchantMenu.java
@@ -34,7 +34,7 @@ public class MerchantMenu extends AbstractContainerMenu {
 
     // CraftBukkit start
     private CraftInventoryView bukkitEntity = null;
-    private Inventory player;
+    private final Inventory player;
 
     @Override
     public CraftInventoryView getBukkitView() {
diff --git a/src/main/java/net/minecraft/world/inventory/ShulkerBoxMenu.java b/src/main/java/net/minecraft/world/inventory/ShulkerBoxMenu.java
index 8d18f6debb694962f3ea8056a7563f71e8684afa..4511e15aefd0124ede746d3fa874d703f67ec4f2 100644
--- a/src/main/java/net/minecraft/world/inventory/ShulkerBoxMenu.java
+++ b/src/main/java/net/minecraft/world/inventory/ShulkerBoxMenu.java
@@ -17,7 +17,7 @@ public class ShulkerBoxMenu extends AbstractContainerMenu {
     private final Container container;
     // CraftBukkit start
     private CraftInventoryView bukkitEntity;
-    private Inventory player;
+    private final Inventory player;
 
     @Override
     public CraftInventoryView getBukkitView() {
diff --git a/src/main/java/net/minecraft/world/inventory/StonecutterMenu.java b/src/main/java/net/minecraft/world/inventory/StonecutterMenu.java
index b9f54fe9473b563e16bb5998f6082061b7dac567..cb0322b13c7c32dfd0f7e973d27a13da1e6cd500 100644
--- a/src/main/java/net/minecraft/world/inventory/StonecutterMenu.java
+++ b/src/main/java/net/minecraft/world/inventory/StonecutterMenu.java
@@ -42,7 +42,7 @@ public class StonecutterMenu extends AbstractContainerMenu {
     final ResultContainer resultContainer;
     // CraftBukkit start
     private CraftInventoryView bukkitEntity = null;
-    private Player player;
+    private final Player player;
 
     @Override
     public CraftInventoryView getBukkitView() {
diff --git a/src/main/java/net/minecraft/world/level/Level.java b/src/main/java/net/minecraft/world/level/Level.java
index ba657dd563574649ce1af629ceb9a923056e64fd..6c35427fce97624bd86a8a2ed2166bea3dbae3ef 100644
--- a/src/main/java/net/minecraft/world/level/Level.java
+++ b/src/main/java/net/minecraft/world/level/Level.java
@@ -175,8 +175,8 @@ public abstract class Level implements LevelAccessor, AutoCloseable {
     public final com.destroystokyo.paper.antixray.ChunkPacketBlockController chunkPacketBlockController; // Paper - Anti-Xray
     public final co.aikar.timings.WorldTimingsHandler timings; // Paper
     public static BlockPos lastPhysicsProblem; // Spigot
-    private org.spigotmc.TickLimiter entityLimiter;
-    private org.spigotmc.TickLimiter tileLimiter;
+    private final org.spigotmc.TickLimiter entityLimiter;
+    private final org.spigotmc.TickLimiter tileLimiter;
     private int tileTickPosition;
     public final Map<Explosion.CacheKey, Float> explosionDensityCache = new HashMap<>(); // Paper - Optimize explosions
     public java.util.ArrayDeque<net.minecraft.world.level.block.RedstoneTorchBlock.Toggle> redstoneUpdateInfos; // Paper - Move from Map in BlockRedstoneTorch to here
diff --git a/src/main/java/net/minecraft/world/level/block/state/properties/EnumProperty.java b/src/main/java/net/minecraft/world/level/block/state/properties/EnumProperty.java
index edd3c745efb40ee79a1393199c7a27ddaa2f8026..087f2d32b680992ff2ea7901e34bc7cc416d08e8 100644
--- a/src/main/java/net/minecraft/world/level/block/state/properties/EnumProperty.java
+++ b/src/main/java/net/minecraft/world/level/block/state/properties/EnumProperty.java
@@ -16,7 +16,7 @@ public class EnumProperty<T extends Enum<T> & StringRepresentable> extends Prope
     private final Map<String, T> names = Maps.newHashMap();
 
     // Paper start - optimise iblockdata state lookup
-    private int[] idLookupTable;
+    private final int[] idLookupTable;
 
     @Override
     public final int getIdFor(final T value) {
diff --git a/src/main/java/net/minecraft/world/level/saveddata/maps/MapItemSavedData.java b/src/main/java/net/minecraft/world/level/saveddata/maps/MapItemSavedData.java
index b2845ed8d28627178589da3d2224cd9edd29c31e..0958173390836c4172772dfc017430f1498e8653 100644
--- a/src/main/java/net/minecraft/world/level/saveddata/maps/MapItemSavedData.java
+++ b/src/main/java/net/minecraft/world/level/saveddata/maps/MapItemSavedData.java
@@ -65,11 +65,11 @@ public class MapItemSavedData extends SavedData {
     public final Map<String, MapDecoration> decorations = Maps.newLinkedHashMap();
     private final Map<String, MapFrame> frameMarkers = Maps.newHashMap();
     private int trackedDecorationCount;
-    private org.bukkit.craftbukkit.map.RenderData vanillaRender = new org.bukkit.craftbukkit.map.RenderData(); // Paper
+    private final org.bukkit.craftbukkit.map.RenderData vanillaRender = new org.bukkit.craftbukkit.map.RenderData(); // Paper
 
     // CraftBukkit start
     public final CraftMapView mapView;
-    private CraftServer server;
+    private final CraftServer server;
     private UUID uniqueId = null;
     public String id;
     // CraftBukkit end
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index d611cd288b98f6343f5c3a647c941534257e32f3..c31d4984052a9c04fc8f14c5e967e78bfb899e10 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -2390,6 +2390,7 @@ public final class CraftServer implements Server {
         net.minecraft.world.level.chunk.ChunkStatus.LIGHT
     );
 
+    @SuppressWarnings("removal")
     @Override
     @Deprecated(forRemoval = true)
     public ChunkGenerator.@NotNull ChunkData createVanillaChunkData(@NotNull World world, int x, int z) {
@@ -2922,7 +2923,7 @@ public final class CraftServer implements Server {
         return net.minecraft.server.MinecraftServer.getServer().hasStopped();
     }
 
-    private com.destroystokyo.paper.entity.ai.@NotNull MobGoals mobGoals = new com.destroystokyo.paper.entity.ai.PaperMobGoals();
+    private final com.destroystokyo.paper.entity.ai.@NotNull MobGoals mobGoals = new com.destroystokyo.paper.entity.ai.PaperMobGoals();
     @Override
     public com.destroystokyo.paper.entity.ai.@NotNull MobGoals getMobGoals() {
         return mobGoals;
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftWorld.java b/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
index 7dc9ecafc3b0ef8248f3b49dc95a7abead568bd3..7688ce3b9796fd845ed3f3c8791470f020547b01 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
@@ -145,7 +145,7 @@ public class CraftWorld extends CraftRegionAccessor implements World {
 
     private final ServerLevel world;
     private WorldBorder worldBorder;
-    private Environment environment;
+    private final Environment environment;
     private final CraftServer server = (CraftServer) Bukkit.getServer();
     private final ChunkGenerator generator;
     private final BiomeProvider biomeProvider;
diff --git a/src/main/java/org/bukkit/craftbukkit/block/data/CraftBlockData.java b/src/main/java/org/bukkit/craftbukkit/block/data/CraftBlockData.java
index 126b86840e9bc9f79357db50deeec50a116c7f82..e93369e63ce83291bc8e8a8e47d128efdf30ca9a 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/data/CraftBlockData.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/data/CraftBlockData.java
@@ -513,7 +513,7 @@ public class CraftBlockData implements BlockData {
     }
 
     // Paper start - cache block data strings
-    private static @NotNull Map<String, CraftBlockData> stringDataCache = new java.util.concurrent.ConcurrentHashMap<>();
+    private static final @NotNull Map<String, CraftBlockData> stringDataCache = new java.util.concurrent.ConcurrentHashMap<>();
 
     static {
         // cache all of the default states at startup, will not cache ones with the custom states inside of the
diff --git a/src/main/java/org/bukkit/craftbukkit/boss/CraftBossBar.java b/src/main/java/org/bukkit/craftbukkit/boss/CraftBossBar.java
index 28704c9615732c24f30119a02391fe43254ae96d..ab4fc0faca6c93d85b9676768cce91beb08a520a 100644
--- a/src/main/java/org/bukkit/craftbukkit/boss/CraftBossBar.java
+++ b/src/main/java/org/bukkit/craftbukkit/boss/CraftBossBar.java
@@ -222,8 +222,8 @@ public class CraftBossBar implements BossBar {
 
     private final class FlagContainer {
 
-        private Supplier<Boolean> get;
-        private Consumer<Boolean> set;
+        private final Supplier<Boolean> get;
+        private final Consumer<Boolean> set;
 
         private FlagContainer(Supplier<Boolean> get, Consumer<Boolean> set) {
             this.get = get;
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
index 106961e4ed5245f3a5597ec45b41867f01fd17ed..6707740173541ca556055b4556400209a7cc96f7 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
@@ -171,7 +171,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
     private boolean scaledHealth = false;
     private double healthScale = 20;
     private @org.jetbrains.annotations.Nullable CraftWorldBorder clientWorldBorder = null;
-    private @NotNull BorderChangeListener clientWorldBorderListener = this.createWorldBorderListener();
+    private final @NotNull BorderChangeListener clientWorldBorderListener = this.createWorldBorderListener();
     // Paper start
     private org.bukkit.event.player.PlayerResourcePackStatusEvent.Status resourcePackStatus;
     private String resourcePackHash;
diff --git a/src/main/java/org/bukkit/craftbukkit/inventory/CraftContainer.java b/src/main/java/org/bukkit/craftbukkit/inventory/CraftContainer.java
index 566e045c4561aed3d62ab91ab80bf807d2b601ba..c5e6e208a800a37f2a855224790675a856483f9d 100644
--- a/src/main/java/org/bukkit/craftbukkit/inventory/CraftContainer.java
+++ b/src/main/java/org/bukkit/craftbukkit/inventory/CraftContainer.java
@@ -35,7 +35,7 @@ import org.jetbrains.annotations.NotNull;
 public class CraftContainer extends AbstractContainerMenu {
 
     private final @NotNull InventoryView view;
-    private InventoryType cachedType;
+    private final InventoryType cachedType;
     private AbstractContainerMenu delegate;
 
     public CraftContainer(@NotNull InventoryView view, Player player, int id) {
diff --git a/src/main/java/org/bukkit/craftbukkit/scheduler/MinecraftInternalPlugin.java b/src/main/java/org/bukkit/craftbukkit/scheduler/MinecraftInternalPlugin.java
index 101fd263c1de05382da4ecbfe4989f36859643ef..0019cddcc6179419c37f602ede162e8072135042 100644
--- a/src/main/java/org/bukkit/craftbukkit/scheduler/MinecraftInternalPlugin.java
+++ b/src/main/java/org/bukkit/craftbukkit/scheduler/MinecraftInternalPlugin.java
@@ -22,7 +22,7 @@ public class MinecraftInternalPlugin extends PluginBase {
     private boolean enabled = true;
 
     private final @NotNull String pluginName;
-    private PluginDescriptionFile pdf;
+    private final PluginDescriptionFile pdf;
 
     public MinecraftInternalPlugin() {
         this.pluginName = "Minecraft";
diff --git a/src/main/java/org/bukkit/craftbukkit/scoreboard/CraftScoreboardComponent.java b/src/main/java/org/bukkit/craftbukkit/scoreboard/CraftScoreboardComponent.java
index ad8f7a3244ec184b728855342c1d862d34161909..ee2b626bc01cb25bc7eaeb821c336becd6f870cb 100644
--- a/src/main/java/org/bukkit/craftbukkit/scoreboard/CraftScoreboardComponent.java
+++ b/src/main/java/org/bukkit/craftbukkit/scoreboard/CraftScoreboardComponent.java
@@ -1,7 +1,7 @@
 package org.bukkit.craftbukkit.scoreboard;
 
 abstract class CraftScoreboardComponent {
-    private CraftScoreboard scoreboard;
+    private final CraftScoreboard scoreboard;
 
     CraftScoreboardComponent(CraftScoreboard scoreboard) {
         this.scoreboard = scoreboard;
diff --git a/src/main/java/org/bukkit/craftbukkit/tag/CraftTag.java b/src/main/java/org/bukkit/craftbukkit/tag/CraftTag.java
index b47b724990ebdda7ec3cfdd3d75ae22ed5735361..5dc71af261e97d3edb22cb4728092f9549de1c21 100644
--- a/src/main/java/org/bukkit/craftbukkit/tag/CraftTag.java
+++ b/src/main/java/org/bukkit/craftbukkit/tag/CraftTag.java
@@ -15,7 +15,7 @@ public abstract class CraftTag<N, B extends Keyed> implements Tag<B> {
     protected final Registry<N> registry;
     protected final TagKey<N> tag;
     //
-    private HolderSet.Named<N> handle;
+    private final HolderSet.Named<N> handle;
 
     public CraftTag(@NotNull Registry<N> registry, TagKey<N> tag) {
         this.registry = registry;
diff --git a/src/main/java/org/bukkit/craftbukkit/util/ForwardLogHandler.java b/src/main/java/org/bukkit/craftbukkit/util/ForwardLogHandler.java
index dfeee08e3a4ffbe648df2de9b092f22d871d7800..9420a10b07c408d25bfc73873dd059f87dab796c 100644
--- a/src/main/java/org/bukkit/craftbukkit/util/ForwardLogHandler.java
+++ b/src/main/java/org/bukkit/craftbukkit/util/ForwardLogHandler.java
@@ -11,7 +11,7 @@ import org.jetbrains.annotations.NotNull;
 
 
 public class ForwardLogHandler extends ConsoleHandler {
-    private @NotNull Map<String, Logger> cachedLoggers = new ConcurrentHashMap<String, Logger>();
+    private final @NotNull Map<String, Logger> cachedLoggers = new ConcurrentHashMap<String, Logger>();
 
     private Logger getLogger(String name) {
         Logger logger = this.cachedLoggers.get(name);
diff --git a/src/main/java/org/bukkit/craftbukkit/util/WeakCollection.java b/src/main/java/org/bukkit/craftbukkit/util/WeakCollection.java
index a6584763372cce4926d2d2bce2e59e5c52d290c4..8060d82f3a2824b95d249764f3dadb8f22f7a2e1 100644
--- a/src/main/java/org/bukkit/craftbukkit/util/WeakCollection.java
+++ b/src/main/java/org/bukkit/craftbukkit/util/WeakCollection.java
@@ -66,7 +66,8 @@ public final class WeakCollection<T> implements Collection<T> {
     @Override
     public @NotNull Iterator<T> iterator() {
         return new Iterator<T>() {
-            @NotNull Iterator<WeakReference<T>> it = WeakCollection.this.collection.iterator();
+            @NotNull
+            final Iterator<WeakReference<T>> it = WeakCollection.this.collection.iterator();
             @Nullable Object value = WeakCollection.NO_VALUE;
 
             @Override
