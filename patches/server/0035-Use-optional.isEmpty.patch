From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: camdenorrb <me@12oclock.dev>
Date: Sat, 22 Oct 2022 04:07:05 -0500
Subject: [PATCH] Use optional.isEmpty


diff --git a/src/main/java/io/papermc/paper/util/PoiAccess.java b/src/main/java/io/papermc/paper/util/PoiAccess.java
index c7c76bb066fafae866e37b1fb96befcb8bb4810a..c2e119a7da112daa8566aa4717b8c80e28ee6ca7 100644
--- a/src/main/java/io/papermc/paper/util/PoiAccess.java
+++ b/src/main/java/io/papermc/paper/util/PoiAccess.java
@@ -276,7 +276,7 @@ public final class PoiAccess {
 
             final Optional<PoiSection> poiSectionOptional = load ? poiStorage.getOrLoad(key) : poiStorage.get(key);
 
-            if (poiSectionOptional == null || !poiSectionOptional.isPresent()) {
+            if (poiSectionOptional == null || poiSectionOptional.isEmpty()) {
                 continue;
             }
 
@@ -518,7 +518,7 @@ public final class PoiAccess {
 
             final Optional<PoiSection> poiSectionOptional = load ? poiStorage.getOrLoad(key) : poiStorage.get(key);
 
-            if (poiSectionOptional == null || !poiSectionOptional.isPresent()) {
+            if (poiSectionOptional == null || poiSectionOptional.isEmpty()) {
                 continue;
             }
 
diff --git a/src/main/java/net/minecraft/network/chat/Component.java b/src/main/java/net/minecraft/network/chat/Component.java
index ad8065f45a61881220e294cc050207b0e350f5c5..b4fd1a50aa2f04ad97b19af2a0b2df8b5e30ee94 100644
--- a/src/main/java/net/minecraft/network/chat/Component.java
+++ b/src/main/java/net/minecraft/network/chat/Component.java
@@ -118,7 +118,7 @@ public interface Component extends Message, FormattedText, Iterable<Component> {
                 Component ichatbasecomponent = (Component) iterator.next();
 
                 optional1 = ichatbasecomponent.visit(styledVisitor, chatmodifier1);
-            } while (!optional1.isPresent());
+            } while (optional1.isEmpty());
 
             return optional1;
         }
@@ -143,7 +143,7 @@ public interface Component extends Message, FormattedText, Iterable<Component> {
                 Component ichatbasecomponent = (Component) iterator.next();
 
                 optional1 = ichatbasecomponent.visit(visitor);
-            } while (!optional1.isPresent());
+            } while (optional1.isEmpty());
 
             return optional1;
         }
diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index 1a101c7232037900fb5800430c89da732a946a7f..6ce4fafebbb01f61a32455cc6cf18eda7702fd60 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -1344,7 +1344,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
     private void updateStatusIcon(ServerStatus metadata) {
         Optional<File> optional = Optional.of(this.getFile("server-icon.png")).filter(File::isFile);
 
-        if (!optional.isPresent()) {
+        if (optional.isEmpty()) {
             optional = this.storageSource.getIconFile().map(Path::toFile).filter(File::isFile);
         }
 
diff --git a/src/main/java/net/minecraft/server/PlayerAdvancements.java b/src/main/java/net/minecraft/server/PlayerAdvancements.java
index 46fff641abef20753c4f72a3d5fb71769eeb964a..9df486c17d44db247216cf9e20830a59cbd58b18 100644
--- a/src/main/java/net/minecraft/server/PlayerAdvancements.java
+++ b/src/main/java/net/minecraft/server/PlayerAdvancements.java
@@ -161,7 +161,7 @@ public class PlayerAdvancements {
                     jsonreader.setLenient(false);
                     Dynamic<JsonElement> dynamic = new Dynamic(JsonOps.INSTANCE, Streams.parse(jsonreader));
 
-                    if (!dynamic.get("DataVersion").asNumber().result().isPresent()) {
+                    if (dynamic.get("DataVersion").asNumber().result().isEmpty()) {
                         dynamic = dynamic.set("DataVersion", dynamic.createInt(1343));
                     }
 
diff --git a/src/main/java/net/minecraft/server/level/ServerPlayer.java b/src/main/java/net/minecraft/server/level/ServerPlayer.java
index 2496e3fd54d5b06671b6daf19cb51fe7b76e1efc..ab89cd249f770959defd929dd2315659157d8d5b 100644
--- a/src/main/java/net/minecraft/server/level/ServerPlayer.java
+++ b/src/main/java/net/minecraft/server/level/ServerPlayer.java
@@ -1271,7 +1271,7 @@ public class ServerPlayer extends Player {
             Direction.Axis enumdirection_enumaxis = (Direction.Axis) this.level.getBlockState(this.portalEntrancePos).getOptionalValue(NetherPortalBlock.AXIS).orElse(Direction.Axis.X);
             Optional<BlockUtil.FoundRectangle> optional1 = worldserver.getPortalForcer().createPortal(blockposition, enumdirection_enumaxis, this, createRadius); // CraftBukkit
 
-            if (!optional1.isPresent()) {
+            if (optional1.isEmpty()) {
                 // EntityPlayer.LOGGER.error("Unable to create a portal, likely target out of worldborder"); // CraftBukkit
             }
 
diff --git a/src/main/java/net/minecraft/stats/ServerRecipeBook.java b/src/main/java/net/minecraft/stats/ServerRecipeBook.java
index d13ed3069e944d138442ea440ac3eaf8d44c18d3..d64b495b941ccc34941d193389c3797463c82e85 100644
--- a/src/main/java/net/minecraft/stats/ServerRecipeBook.java
+++ b/src/main/java/net/minecraft/stats/ServerRecipeBook.java
@@ -121,7 +121,7 @@ public class ServerRecipeBook extends RecipeBook {
                 ResourceLocation minecraftkey = new ResourceLocation(s);
                 Optional<? extends Recipe<?>> optional = recipeManager.byKey(minecraftkey);
 
-                if (!optional.isPresent()) {
+                if (optional.isEmpty()) {
                     ServerRecipeBook.LOGGER.error("Tried to load unrecognized recipe: {} removed now.", minecraftkey);
                 } else {
                     handler.accept((Recipe) optional.get());
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/ItemStackMapIdFix.java b/src/main/java/net/minecraft/util/datafix/fixes/ItemStackMapIdFix.java
index 8210386e445c8f8e10a5785f1d78d36868f3372f..5a7a25984ddc618d509501ae3f5a36a8b2c4cf92 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/ItemStackMapIdFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/ItemStackMapIdFix.java
@@ -32,7 +32,7 @@ public class ItemStackMapIdFix extends DataFix {
                 Typed<?> typed1 = typed.getOrCreateTyped(opticfinder1);
                 Dynamic<?> dynamic1 = (Dynamic) typed1.get(DSL.remainderFinder());
 
-                if (!dynamic1.getElement("map").result().isPresent()) dynamic1 = dynamic1.set("map", dynamic1.createInt(dynamic.get("Damage").asInt(0))); // CraftBukkit
+                if (dynamic1.getElement("map").result().isEmpty()) dynamic1 = dynamic1.set("map", dynamic1.createInt(dynamic.get("Damage").asInt(0))); // CraftBukkit
                 return typed.set(opticfinder1, typed1.set(DSL.remainderFinder(), dynamic1));
             } else {
                 return typed;
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/ItemStackTheFlatteningFix.java b/src/main/java/net/minecraft/util/datafix/fixes/ItemStackTheFlatteningFix.java
index 0dd66aae6f05dde95e79dda2dfbdb2310ab44b65..f7da1948992698f14cd14880517a6e8f6ad07cd6 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/ItemStackTheFlatteningFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/ItemStackTheFlatteningFix.java
@@ -360,7 +360,7 @@ public class ItemStackTheFlatteningFix extends DataFix {
         return this.fixTypeEverywhereTyped("ItemInstanceTheFlatteningFix", type, (typed) -> {
             Optional<Pair<String, String>> optional = typed.getOptional(opticfinder);
 
-            if (!optional.isPresent()) {
+            if (optional.isEmpty()) {
                 return typed;
             } else {
                 Typed<?> typed1 = typed;
diff --git a/src/main/java/net/minecraft/world/entity/LightningBolt.java b/src/main/java/net/minecraft/world/entity/LightningBolt.java
index 0142aff35dea5bf5aff55e3293fb2d173c97e677..72357b2414fe7bd572b19e33ddd8985bb0198a54 100644
--- a/src/main/java/net/minecraft/world/entity/LightningBolt.java
+++ b/src/main/java/net/minecraft/world/entity/LightningBolt.java
@@ -230,7 +230,7 @@ public class LightningBolt extends Entity {
         for (int j = 0; j < count; ++j) {
             Optional<BlockPos> optional = LightningBolt.randomStepCleaningCopper(world, mutablePos, lightning); // Paper - transmit LightningBolt instance to call EntityChangeBlockEvent
 
-            if (!optional.isPresent()) {
+            if (optional.isEmpty()) {
                 break;
             }
 
diff --git a/src/main/java/net/minecraft/world/entity/ai/behavior/SleepInBed.java b/src/main/java/net/minecraft/world/entity/ai/behavior/SleepInBed.java
index d6666ba4a945d4a2a50a7bd610a906df9570f87f..f41524fe8d67cb56d46b00c1d3a3f4363f651af7 100644
--- a/src/main/java/net/minecraft/world/entity/ai/behavior/SleepInBed.java
+++ b/src/main/java/net/minecraft/world/entity/ai/behavior/SleepInBed.java
@@ -53,7 +53,7 @@ public class SleepInBed extends Behavior<LivingEntity> {
     @Override
     protected boolean canStillUse(ServerLevel world, LivingEntity entity, long time) {
         Optional<GlobalPos> optional = entity.getBrain().getMemory(MemoryModuleType.HOME);
-        if (!optional.isPresent()) {
+        if (optional.isEmpty()) {
             return false;
         } else {
             BlockPos blockPos = optional.get().pos();
diff --git a/src/main/java/net/minecraft/world/entity/ai/behavior/VillagerMakeLove.java b/src/main/java/net/minecraft/world/entity/ai/behavior/VillagerMakeLove.java
index 0951c04533e7c39b969d041271684355770b53c2..18d137226c419a44de14d70494364b1cc04e5424 100644
--- a/src/main/java/net/minecraft/world/entity/ai/behavior/VillagerMakeLove.java
+++ b/src/main/java/net/minecraft/world/entity/ai/behavior/VillagerMakeLove.java
@@ -67,7 +67,7 @@ public class VillagerMakeLove extends Behavior<Villager> {
     private void tryToGiveBirth(ServerLevel world, Villager first, Villager second) {
         Optional<BlockPos> optional = this.takeVacantBed(world, first);
 
-        if (!optional.isPresent()) {
+        if (optional.isEmpty()) {
             world.broadcastEntityEvent(second, (byte) 13);
             world.broadcastEntityEvent(first, (byte) 13);
         } else {
@@ -93,7 +93,7 @@ public class VillagerMakeLove extends Behavior<Villager> {
             return entityageable.getType() == EntityType.VILLAGER;
         });
 
-        return !optional.isPresent() ? false : BehaviorUtils.targetIsValid(behaviorcontroller, MemoryModuleType.BREED_TARGET, EntityType.VILLAGER) && villager.canBreed() && ((AgeableMob) optional.get()).canBreed();
+        return optional.isEmpty() ? false : BehaviorUtils.targetIsValid(behaviorcontroller, MemoryModuleType.BREED_TARGET, EntityType.VILLAGER) && villager.canBreed() && ((AgeableMob) optional.get()).canBreed();
     }
 
     private Optional<BlockPos> takeVacantBed(ServerLevel world, Villager villager) {
diff --git a/src/main/java/net/minecraft/world/entity/animal/MushroomCow.java b/src/main/java/net/minecraft/world/entity/animal/MushroomCow.java
index ef7333b7995dfe12f7f32bde44316c115e61dfa5..8c32ae043da03b04e1f20304a3138bd7897ec01a 100644
--- a/src/main/java/net/minecraft/world/entity/animal/MushroomCow.java
+++ b/src/main/java/net/minecraft/world/entity/animal/MushroomCow.java
@@ -144,7 +144,7 @@ public class MushroomCow extends Cow implements Shearable, VariantHolder<Mushroo
             } else {
                 Optional<Pair<MobEffect, Integer>> optional = this.getEffectFromItemStack(itemstack);
 
-                if (!optional.isPresent()) {
+                if (optional.isEmpty()) {
                     return InteractionResult.PASS;
                 }
 
diff --git a/src/main/java/net/minecraft/world/entity/monster/piglin/PiglinAi.java b/src/main/java/net/minecraft/world/entity/monster/piglin/PiglinAi.java
index 8b064875fdd8082168561cf8d3182841e9cec115..401cc4b5a37394756d1b71f44ca3b0a1c3341fe0 100644
--- a/src/main/java/net/minecraft/world/entity/monster/piglin/PiglinAi.java
+++ b/src/main/java/net/minecraft/world/entity/monster/piglin/PiglinAi.java
@@ -670,7 +670,7 @@ public class PiglinAi {
         Optional<LivingEntity> optional = PiglinAi.getAngerTarget(piglin);
         LivingEntity entityliving1 = BehaviorUtils.getNearestTarget(piglin, optional, target);
 
-        if (!optional.isPresent() || optional.get() != entityliving1) {
+        if (optional.isEmpty() || optional.get() != entityliving1) {
             PiglinAi.setAngerTarget(piglin, entityliving1);
         }
     }
diff --git a/src/main/java/net/minecraft/world/entity/raid/Raider.java b/src/main/java/net/minecraft/world/entity/raid/Raider.java
index fa86b87f044930c85fdbae0c09fa4215b13fcad9..056f8f976a0ffb9d539430730b2173944e3c5eb1 100644
--- a/src/main/java/net/minecraft/world/entity/raid/Raider.java
+++ b/src/main/java/net/minecraft/world/entity/raid/Raider.java
@@ -385,7 +385,7 @@ public abstract class Raider extends PatrollingMonster {
                 return holder.is(PoiTypes.HOME);
             }, this::hasNotVisited, PoiManager.Occupancy.ANY, blockposition, 48, this.raider.random);
 
-            if (!optional.isPresent()) {
+            if (optional.isEmpty()) {
                 return false;
             } else {
                 this.poiPos = ((BlockPos) optional.get()).immutable();
diff --git a/src/main/java/net/minecraft/world/item/ChorusFruitItem.java b/src/main/java/net/minecraft/world/item/ChorusFruitItem.java
index 490d116e58c19cc0b3701cffd0179f9e9fc7fe6b..ccbca0c50c6b8bd92e04a3a8ab9327b5df0a1e03 100644
--- a/src/main/java/net/minecraft/world/item/ChorusFruitItem.java
+++ b/src/main/java/net/minecraft/world/item/ChorusFruitItem.java
@@ -42,7 +42,7 @@ public class ChorusFruitItem extends Item {
                 // CraftBukkit start - handle canceled status of teleport event
                 java.util.Optional<Boolean> status = user.randomTeleport(d3, d4, d5, true, org.bukkit.event.player.PlayerTeleportEvent.TeleportCause.CHORUS_FRUIT);
 
-                if (!status.isPresent()) {
+                if (status.isEmpty()) {
                     // teleport event was canceled, no more tries
                     break;
                 }
diff --git a/src/main/java/net/minecraft/world/level/levelgen/structure/placement/StructurePlacement.java b/src/main/java/net/minecraft/world/level/levelgen/structure/placement/StructurePlacement.java
index 06c9ce065fe40e887af44430b3d23de2cd1815a2..1bd5a585f5ceebd91c79cf0bcfbbebffb7f121a8 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/structure/placement/StructurePlacement.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/structure/placement/StructurePlacement.java
@@ -79,7 +79,7 @@ public abstract class StructurePlacement {
         } else if (this.frequency < 1.0F && !this.frequencyReductionMethod.shouldGenerate(calculator.getLevelSeed(), this.salt, chunkX, chunkZ, this.frequency, saltOverride)) { // Paper
             return false;
         } else {
-            return !this.exclusionZone.isPresent() || !this.exclusionZone.get().isPlacementForbidden(calculator, chunkX, chunkZ);
+            return this.exclusionZone.isEmpty() || !this.exclusionZone.get().isPlacementForbidden(calculator, chunkX, chunkZ);
         }
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftFox.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftFox.java
index fdfa7251d2998ed2a2cf0999b6c145bd4ff09d0d..70b86d3671a704c8a5c2a3c90a9f3018103d4630 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftFox.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftFox.java
@@ -111,7 +111,7 @@ public class CraftFox extends CraftAnimals implements Fox {
 
     @Override
     public void setSecondTrustedPlayer(@Nullable AnimalTamer player) {
-        if (player != null && !this.getHandle().getEntityData().get(net.minecraft.world.entity.animal.Fox.DATA_TRUSTED_ID_0).isPresent()) {
+        if (player != null && this.getHandle().getEntityData().get(net.minecraft.world.entity.animal.Fox.DATA_TRUSTED_ID_0).isEmpty()) {
             throw new IllegalStateException("Must add first trusted player first");
         }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftHumanEntity.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftHumanEntity.java
index ebdff7bd0053e4b4c982256283cdfd003b38fa9d..d698c09d2146d6ecab141fde44f91659f49d60a4 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftHumanEntity.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftHumanEntity.java
@@ -672,7 +672,7 @@ public class CraftHumanEntity extends CraftLivingEntity implements HumanEntity {
 
         for (NamespacedKey recipeKey : recipeKeys) {
             Optional<? extends Recipe<?>> recipe = manager.byKey(CraftNamespacedKey.toMinecraft(recipeKey));
-            if (!recipe.isPresent()) {
+            if (recipe.isEmpty()) {
                 continue;
             }
 
@@ -687,7 +687,7 @@ public class CraftHumanEntity extends CraftLivingEntity implements HumanEntity {
         if (!this.getHandle().getShoulderEntityLeft().isEmpty()) {
             Optional<Entity> shoulder = EntityType.create(this.getHandle().getShoulderEntityLeft(), this.getHandle().level);
 
-            return (!shoulder.isPresent()) ? null : shoulder.get().getBukkitEntity();
+            return (shoulder.isEmpty()) ? null : shoulder.get().getBukkitEntity();
         }
 
         return null;
@@ -706,7 +706,7 @@ public class CraftHumanEntity extends CraftLivingEntity implements HumanEntity {
         if (!this.getHandle().getShoulderEntityRight().isEmpty()) {
             Optional<Entity> shoulder = EntityType.create(this.getHandle().getShoulderEntityRight(), this.getHandle().level);
 
-            return (!shoulder.isPresent()) ? null : shoulder.get().getBukkitEntity();
+            return (shoulder.isEmpty()) ? null : shoulder.get().getBukkitEntity();
         }
 
         return null;
diff --git a/src/main/java/org/bukkit/craftbukkit/legacy/CraftLegacy.java b/src/main/java/org/bukkit/craftbukkit/legacy/CraftLegacy.java
index 2dcd13ac0c9ff07f8d58cfcd257f077010a2afd3..df96f7f55d2e6654f0bcbe216e68dde0b534f5b1 100644
--- a/src/main/java/org/bukkit/craftbukkit/legacy/CraftLegacy.java
+++ b/src/main/java/org/bukkit/craftbukkit/legacy/CraftLegacy.java
@@ -359,7 +359,7 @@ public final class CraftLegacy {
 
                             Preconditions.checkState(!properties.getString(dataKey).isEmpty(), "Empty data string");
                             Optional opt = state.getValue(properties.getString(dataKey));
-                            if (!opt.isPresent()) {
+                            if (opt.isEmpty()) {
                                 throw new IllegalStateException("No state value " + properties.getString(dataKey) + " for " + dataKey);
                             }
 
