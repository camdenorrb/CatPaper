From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: camdenorrb <me@12oclock.dev>
Date: Sat, 22 Oct 2022 04:12:03 -0500
Subject: [PATCH] Remove redundant casts


diff --git a/src/main/java/ca/spottedleaf/concurrentutil/util/ArrayUtil.java b/src/main/java/ca/spottedleaf/concurrentutil/util/ArrayUtil.java
index ebb1ab06165addb173fea4d295001fe37f4e79d3..d8fda767002c113db281744295c77f7adc8bc26f 100644
--- a/src/main/java/ca/spottedleaf/concurrentutil/util/ArrayUtil.java
+++ b/src/main/java/ca/spottedleaf/concurrentutil/util/ArrayUtil.java
@@ -396,7 +396,7 @@ public final class ArrayUtil {
                 ConcurrentUtil.backoff();
             }
 
-            if (curr == (curr = compareAndExchangeVolatileContended(array, index, curr, (int) (curr + param)))) {
+            if (curr == (curr = compareAndExchangeVolatileContended(array, index, curr, curr + param))) {
                 return curr;
             }
         }
@@ -410,7 +410,7 @@ public final class ArrayUtil {
                 ConcurrentUtil.backoff();
             }
 
-            if (curr == (curr = compareAndExchangeVolatileContended(array, index, curr, (int) (curr & param)))) {
+            if (curr == (curr = compareAndExchangeVolatileContended(array, index, curr, curr & param))) {
                 return curr;
             }
         }
@@ -424,7 +424,7 @@ public final class ArrayUtil {
                 ConcurrentUtil.backoff();
             }
 
-            if (curr == (curr = compareAndExchangeVolatileContended(array, index, curr, (int) (curr | param)))) {
+            if (curr == (curr = compareAndExchangeVolatileContended(array, index, curr, curr | param))) {
                 return curr;
             }
         }
@@ -438,7 +438,7 @@ public final class ArrayUtil {
                 ConcurrentUtil.backoff();
             }
 
-            if (curr == (curr = compareAndExchangeVolatileContended(array, index, curr, (int) (curr ^ param)))) {
+            if (curr == (curr = compareAndExchangeVolatileContended(array, index, curr, curr ^ param))) {
                 return curr;
             }
         }
@@ -542,7 +542,7 @@ public final class ArrayUtil {
                 ConcurrentUtil.backoff();
             }
 
-            if (curr == (curr = compareAndExchangeVolatileContended(array, index, curr, (long) (curr + param)))) {
+            if (curr == (curr = compareAndExchangeVolatileContended(array, index, curr, curr + param))) {
                 return curr;
             }
         }
@@ -556,7 +556,7 @@ public final class ArrayUtil {
                 ConcurrentUtil.backoff();
             }
 
-            if (curr == (curr = compareAndExchangeVolatileContended(array, index, curr, (long) (curr & param)))) {
+            if (curr == (curr = compareAndExchangeVolatileContended(array, index, curr, curr & param))) {
                 return curr;
             }
         }
@@ -570,7 +570,7 @@ public final class ArrayUtil {
                 ConcurrentUtil.backoff();
             }
 
-            if (curr == (curr = compareAndExchangeVolatileContended(array, index, curr, (long) (curr | param)))) {
+            if (curr == (curr = compareAndExchangeVolatileContended(array, index, curr, curr | param))) {
                 return curr;
             }
         }
@@ -584,7 +584,7 @@ public final class ArrayUtil {
                 ConcurrentUtil.backoff();
             }
 
-            if (curr == (curr = compareAndExchangeVolatileContended(array, index, curr, (long) (curr ^ param)))) {
+            if (curr == (curr = compareAndExchangeVolatileContended(array, index, curr, curr ^ param))) {
                 return curr;
             }
         }
@@ -680,7 +680,7 @@ public final class ArrayUtil {
                 ConcurrentUtil.backoff();
             }
 
-            if (curr == (curr = compareAndExchangeVolatileContended(array, index, curr, (boolean) (curr & param)))) {
+            if (curr == (curr = compareAndExchangeVolatileContended(array, index, curr, curr & param))) {
                 return curr;
             }
         }
@@ -694,7 +694,7 @@ public final class ArrayUtil {
                 ConcurrentUtil.backoff();
             }
 
-            if (curr == (curr = compareAndExchangeVolatileContended(array, index, curr, (boolean) (curr | param)))) {
+            if (curr == (curr = compareAndExchangeVolatileContended(array, index, curr, curr | param))) {
                 return curr;
             }
         }
@@ -708,7 +708,7 @@ public final class ArrayUtil {
                 ConcurrentUtil.backoff();
             }
 
-            if (curr == (curr = compareAndExchangeVolatileContended(array, index, curr, (boolean) (curr ^ param)))) {
+            if (curr == (curr = compareAndExchangeVolatileContended(array, index, curr, curr ^ param))) {
                 return curr;
             }
         }
diff --git a/src/main/java/ca/spottedleaf/dataconverter/minecraft/MCVersionRegistry.java b/src/main/java/ca/spottedleaf/dataconverter/minecraft/MCVersionRegistry.java
index cb9fecc3b94b085b7de0d4bfc4ab063c97bf3d61..4a14dbf6f1b2ed56db91405687d73a7bae39f018 100644
--- a/src/main/java/ca/spottedleaf/dataconverter/minecraft/MCVersionRegistry.java
+++ b/src/main/java/ca/spottedleaf/dataconverter/minecraft/MCVersionRegistry.java
@@ -297,7 +297,7 @@ public final class MCVersionRegistry {
             }
         }
 
-        DATA_VERSION_LIST.sort((LongComparator)null);
+        DATA_VERSION_LIST.sort(null);
 
         for (final int version : DATACONVERTER_VERSIONS_MAJOR) {
             DATACONVERTER_VERSIONS.add(DataConverter.encodeVersions(version, 0));
diff --git a/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V1451.java b/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V1451.java
index 9f42f4f6215ad7974f4daf51c9e5de7202858e2b..06fb2c5d09df5224c0dd7cc6a360144fdd7f35b1 100644
--- a/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V1451.java
+++ b/src/main/java/ca/spottedleaf/dataconverter/minecraft/versions/V1451.java
@@ -196,12 +196,12 @@ public final class V1451 {
                     return "minecraft:bedrock,2*minecraft:dirt,minecraft:grass_block;1;village";
                 } else {
                     Iterator<String> iterator = SPLITTER.split(generatorSettings).iterator();
-                    String string2 = (String)iterator.next();
+                    String string2 = iterator.next();
                     int j;
                     String string4;
                     if (iterator.hasNext()) {
                         j = NumberUtils.toInt(string2, 0);
-                        string4 = (String)iterator.next();
+                        string4 = iterator.next();
                     } else {
                         j = 0;
                         string4 = string2;
@@ -210,29 +210,29 @@ public final class V1451 {
                     if (j >= 0 && j <= 3) {
                         StringBuilder stringBuilder = new StringBuilder();
                         Splitter splitter = j < 3 ? OLD_AMOUNT_SPLITTER : AMOUNT_SPLITTER;
-                        stringBuilder.append((String) StreamSupport.stream(LAYER_SPLITTER.split(string4).spliterator(), false).map((stringx) -> {
+                        stringBuilder.append(StreamSupport.stream(LAYER_SPLITTER.split(string4).spliterator(), false).map((stringx) -> {
                             List<String> list = splitter.splitToList(stringx);
                             int k;
                             String string3;
                             if (list.size() == 2) {
-                                k = NumberUtils.toInt((String)list.get(0));
-                                string3 = (String)list.get(1);
+                                k = NumberUtils.toInt(list.get(0));
+                                string3 = list.get(1);
                             } else {
                                 k = 1;
-                                string3 = (String)list.get(0);
+                                string3 = list.get(0);
                             }
 
                             List<String> list2 = BLOCK_SPLITTER.splitToList(string3);
-                            int l = ((String)list2.get(0)).equals("minecraft") ? 1 : 0;
-                            String string5 = (String)list2.get(l);
+                            int l = list2.get(0).equals("minecraft") ? 1 : 0;
+                            String string5 = list2.get(l);
                             int m = j == 3 ? EntityBlockStateFix.getBlockId("minecraft:" + string5) : NumberUtils.toInt(string5, 0);
                             int n = l + 1;
-                            int o = list2.size() > n ? NumberUtils.toInt((String)list2.get(n), 0) : 0;
+                            int o = list2.size() > n ? NumberUtils.toInt(list2.get(n), 0) : 0;
                             return (k == 1 ? "" : k + "*") + BlockStateData.getTag(m << 4 | o).get("Name").asString("");
                         }).collect(Collectors.joining(",")));
 
                         while(iterator.hasNext()) {
-                            stringBuilder.append(';').append((String)iterator.next());
+                            stringBuilder.append(';').append(iterator.next());
                         }
 
                         return stringBuilder.toString();
diff --git a/src/main/java/ca/spottedleaf/dataconverter/types/nbt/NBTListType.java b/src/main/java/ca/spottedleaf/dataconverter/types/nbt/NBTListType.java
index 1e7dad15259178ebce21e1fbfa5bde8311cb787e..427da2ba2899e6a72d6b219209e50394ca2a74f5 100644
--- a/src/main/java/ca/spottedleaf/dataconverter/types/nbt/NBTListType.java
+++ b/src/main/java/ca/spottedleaf/dataconverter/types/nbt/NBTListType.java
@@ -301,7 +301,7 @@ public final class NBTListType implements ListType {
         if (!(tag instanceof StringTag)) {
             throw new IllegalStateException();
         }
-        return ((StringTag)tag).getAsString();
+        return tag.getAsString();
     }
 
     @Override
diff --git a/src/main/java/ca/spottedleaf/dataconverter/types/nbt/NBTMapType.java b/src/main/java/ca/spottedleaf/dataconverter/types/nbt/NBTMapType.java
index 5fbf7ea31911992db164abf52634c4b415435bd7..809faea5092bf9bf86df278687eafd527fb7bb36 100644
--- a/src/main/java/ca/spottedleaf/dataconverter/types/nbt/NBTMapType.java
+++ b/src/main/java/ca/spottedleaf/dataconverter/types/nbt/NBTMapType.java
@@ -130,7 +130,7 @@ public final class NBTMapType implements MapType<String> {
             case LIST:
                 return new NBTListType((ListTag)tag);
             case STRING:
-                return ((StringTag)tag).getAsString();
+                return tag.getAsString();
             case BYTE_ARRAY:
                 return ((ByteArrayTag)tag).getAsByteArray();
             // Note: No short array tag!
@@ -430,7 +430,7 @@ public final class NBTMapType implements MapType<String> {
     public String getString(final @NotNull String key, final String dfl) {
         final Tag tag = this.map.get(key);
         if (tag instanceof StringTag) {
-            return ((StringTag)tag).getAsString();
+            return tag.getAsString();
         }
         return dfl;
     }
diff --git a/src/main/java/ca/spottedleaf/starlight/common/light/SkyStarLightEngine.java b/src/main/java/ca/spottedleaf/starlight/common/light/SkyStarLightEngine.java
index b4978a0ec443070d89e9f81883af4af19388fc73..964fd5ab529db8f2db44bc6f576fc130854dfe15 100644
--- a/src/main/java/ca/spottedleaf/starlight/common/light/SkyStarLightEngine.java
+++ b/src/main/java/ca/spottedleaf/starlight/common/light/SkyStarLightEngine.java
@@ -253,7 +253,7 @@ public final class SkyStarLightEngine extends StarLightEngine {
         final int chunkX = chunk.getPos().x;
         final int chunkZ = chunk.getPos().z;
         for (final ShortIterator iterator = sections.iterator(); iterator.hasNext();) {
-            final int y = (int)iterator.nextShort();
+            final int y = iterator.nextShort();
             this.checkNullSection(chunkX, y, chunkZ, true);
         }
 
diff --git a/src/main/java/ca/spottedleaf/starlight/common/light/StarLightEngine.java b/src/main/java/ca/spottedleaf/starlight/common/light/StarLightEngine.java
index 01b8afce9fca47e676677cc82569f2a5d6c321cc..4ad5cab8828c99f1cad70cff95bf879f392c447c 100644
--- a/src/main/java/ca/spottedleaf/starlight/common/light/StarLightEngine.java
+++ b/src/main/java/ca/spottedleaf/starlight/common/light/StarLightEngine.java
@@ -69,9 +69,9 @@ public abstract class StarLightEngine {
             this.y = y;
             this.z = z;
             this.nms = Direction.fromNormal(x, y, z);
-            this.everythingButThisDirection = (long)(ALL_DIRECTIONS_BITSET ^ (1 << this.ordinal()));
+            this.everythingButThisDirection = ALL_DIRECTIONS_BITSET ^ (1 << this.ordinal());
             // positive is always even, negative is always odd. Flip the 1 bit to get the negative direction.
-            this.everythingButTheOppositeDirection = (long)(ALL_DIRECTIONS_BITSET ^ (1 << (this.ordinal() ^ 1)));
+            this.everythingButTheOppositeDirection = ALL_DIRECTIONS_BITSET ^ (1 << (this.ordinal() ^ 1));
         }
 
         public AxisDirection getOpposite() {
diff --git a/src/main/java/io/papermc/paper/chunk/PlayerChunkLoader.java b/src/main/java/io/papermc/paper/chunk/PlayerChunkLoader.java
index 42afe116a9f0ab2d03d64edfc5b52e8871d996b7..688d79a902c4ff4aec1810b4873b750848dd3ffb 100644
--- a/src/main/java/io/papermc/paper/chunk/PlayerChunkLoader.java
+++ b/src/main/java/io/papermc/paper/chunk/PlayerChunkLoader.java
@@ -389,11 +389,11 @@ public final class PlayerChunkLoader {
     }
 
     protected long getTargetSendPerPlayerAddend() {
-        return GlobalConfiguration.get().chunkLoading.targetPlayerChunkSendRate <= 1.0 ? 0L : (long)Math.round(1.0e9 / GlobalConfiguration.get().chunkLoading.targetPlayerChunkSendRate);
+        return GlobalConfiguration.get().chunkLoading.targetPlayerChunkSendRate <= 1.0 ? 0L : Math.round(1.0e9 / GlobalConfiguration.get().chunkLoading.targetPlayerChunkSendRate);
     }
 
     protected long getMaxSendAddend() {
-        return GlobalConfiguration.get().chunkLoading.globalMaxChunkSendRate <= 1.0 ? 0L : (long)Math.round(1.0e9 / GlobalConfiguration.get().chunkLoading.globalMaxChunkSendRate);
+        return GlobalConfiguration.get().chunkLoading.globalMaxChunkSendRate <= 1.0 ? 0L : Math.round(1.0e9 / GlobalConfiguration.get().chunkLoading.globalMaxChunkSendRate);
     }
 
     public void onChunkPlayerTickReady(final int chunkX, final int chunkZ) {
@@ -1022,15 +1022,15 @@ public final class PlayerChunkLoader {
             final double p1z = posZ;
 
             // to the left of the looking direction
-            final double p2x = PRIORITISED_DISTANCE * Math.cos(Math.toRadians(yaw + (double)(FOV / 2.0))) // calculate rotated vector
+            final double p2x = PRIORITISED_DISTANCE * Math.cos(Math.toRadians(yaw + (FOV / 2.0))) // calculate rotated vector
                     + p1x; // offset vector
-            final double p2z = PRIORITISED_DISTANCE * Math.sin(Math.toRadians(yaw + (double)(FOV / 2.0))) // calculate rotated vector
+            final double p2z = PRIORITISED_DISTANCE * Math.sin(Math.toRadians(yaw + (FOV / 2.0))) // calculate rotated vector
                     + p1z; // offset vector
 
             // to the right of the looking direction
-            final double p3x = PRIORITISED_DISTANCE * Math.cos(Math.toRadians(yaw - (double)(FOV / 2.0))) // calculate rotated vector
+            final double p3x = PRIORITISED_DISTANCE * Math.cos(Math.toRadians(yaw - (FOV / 2.0))) // calculate rotated vector
                     + p1x; // offset vector
-            final double p3z = PRIORITISED_DISTANCE * Math.sin(Math.toRadians(yaw - (double)(FOV / 2.0))) // calculate rotated vector
+            final double p3z = PRIORITISED_DISTANCE * Math.sin(Math.toRadians(yaw - (FOV / 2.0))) // calculate rotated vector
                     + p1z; // offset vector
 
             // now that we have all of our points, we can recalculate the load queue
@@ -1068,7 +1068,7 @@ public final class PlayerChunkLoader {
                             p1x, p1z, p2x, p2z, p3x, p3z,
 
                             // center of chunk
-                            (double)((chunkX << 4) | 8), (double)((chunkZ << 4) | 8)
+	                    (chunkX << 4) | 8, (chunkZ << 4) | 8
                     );
 
                     final int manhattanDistance = Math.abs(dx) + Math.abs(dz);
@@ -1085,7 +1085,7 @@ public final class PlayerChunkLoader {
                             // will be loaded if the player changes direction
                             priority = (double)manhattanDistance / 6.0;
                         } else {
-                            priority = (double)manhattanDistance;
+                            priority = manhattanDistance;
                         }
                     }
 
diff --git a/src/main/java/io/papermc/paper/chunk/system/ChunkSystem.java b/src/main/java/io/papermc/paper/chunk/system/ChunkSystem.java
index 0e45a340ae534caf676b7f9d0adcbcee5829925e..c29db2c3fb1ab56debc868420baaab12575676d7 100644
--- a/src/main/java/io/papermc/paper/chunk/system/ChunkSystem.java
+++ b/src/main/java/io/papermc/paper/chunk/system/ChunkSystem.java
@@ -77,11 +77,11 @@ public final class ChunkSystem {
         if (net.minecraft.server.level.ChunkMap.checkDupeUUID(level, entity)) {
             return;
         }
-        if (net.minecraft.world.level.Level.DEBUG_ENTITIES && ((Entity) entity).level.paperConfig().entities.spawning.duplicateUuid.mode != io.papermc.paper.configuration.WorldConfiguration.Entities.Spawning.DuplicateUUID.DuplicateUUIDMode.NOTHING) {
-            if (((Entity) entity).addedToWorldStack != null) {
-                ((Entity) entity).addedToWorldStack.printStackTrace();
+        if (net.minecraft.world.level.Level.DEBUG_ENTITIES && entity.level.paperConfig().entities.spawning.duplicateUuid.mode != io.papermc.paper.configuration.WorldConfiguration.Entities.Spawning.DuplicateUUID.DuplicateUUIDMode.NOTHING) {
+            if (entity.addedToWorldStack != null) {
+                entity.addedToWorldStack.printStackTrace();
             }
-            net.minecraft.server.level.ServerLevel.getAddToWorldStackTrace((Entity) entity).printStackTrace();
+            net.minecraft.server.level.ServerLevel.getAddToWorldStackTrace(entity).printStackTrace();
         }
         // Paper end - duplicate uuid resolving
     }
diff --git a/src/main/java/io/papermc/paper/chunk/system/scheduling/ChunkLoadTask.java b/src/main/java/io/papermc/paper/chunk/system/scheduling/ChunkLoadTask.java
index 1202362a3f7091de04ee8f0f99c95680628d3192..03c440a1e88fec632f90dda77a859e40e4cdae3e 100644
--- a/src/main/java/io/papermc/paper/chunk/system/scheduling/ChunkLoadTask.java
+++ b/src/main/java/io/papermc/paper/chunk/system/scheduling/ChunkLoadTask.java
@@ -333,7 +333,7 @@ public final class ChunkLoadTask extends ChunkProgressionTask {
         private @NotNull ProtoChunk getEmptyChunk() {
             return new ProtoChunk(
                 new ChunkPos(this.chunkX, this.chunkZ), UpgradeData.EMPTY, this.world,
-                this.world.registryAccess().registryOrThrow(Registries.BIOME), (BlendingData)null
+                this.world.registryAccess().registryOrThrow(Registries.BIOME), null
             );
         }
 
diff --git a/src/main/java/io/papermc/paper/configuration/type/Duration.java b/src/main/java/io/papermc/paper/configuration/type/Duration.java
index 79af057d98ec2cf6f2bdd25afb27986141c015e9..b8dd627cd9d1b474c9467bc170257e1cfe9ae79b 100644
--- a/src/main/java/io/papermc/paper/configuration/type/Duration.java
+++ b/src/main/java/io/papermc/paper/configuration/type/Duration.java
@@ -73,7 +73,7 @@ public final class Duration {
         switch (unit) {
             case 'd': num *= (double) 60*60*24; break;
             case 'h': num *= (double) 60*60; break;
-            case 'm': num *= (double) 60; break;
+            case 'm': num *= 60; break;
             default: case 's': break;
         }
         return (int) num;
diff --git a/src/main/java/io/papermc/paper/util/CollisionUtil.java b/src/main/java/io/papermc/paper/util/CollisionUtil.java
index 840f77c41e79716a8d2188f9b4d13240d2bb11f1..f06dffbdcb6b24b7345eade0e5a71dfc0e95ce6e 100644
--- a/src/main/java/io/papermc/paper/util/CollisionUtil.java
+++ b/src/main/java/io/papermc/paper/util/CollisionUtil.java
@@ -54,8 +54,8 @@ public final class CollisionUtil {
     }
 
     public static @NotNull AABB getBoxForChunk(final int chunkX, final int chunkZ) {
-        double x = (double)(chunkX << 4);
-        double z = (double)(chunkZ << 4);
+        double x = chunkX << 4;
+        double z = chunkZ << 4;
         // use a bounding box bigger than the chunk to prevent entities from entering it on move
         return new AABB(x - 3*COLLISION_EPSILON, Double.NEGATIVE_INFINITY, z - 3*COLLISION_EPSILON,
             x + (16.0 + 3*COLLISION_EPSILON), Double.POSITIVE_INFINITY, z + (16.0 + 3*COLLISION_EPSILON), false);
@@ -577,9 +577,9 @@ public final class CollisionUtil {
                                         continue;
                                     }
                                     case (int) CollisionUtil.KNOWN_FULL_BLOCK: {
-                                        double blockX = (double)(currX | chunkXGlobalPos);
-                                        double blockY = (double)(currY | chunkYGlobalPos);
-                                        double blockZ = (double)(currZ | chunkZGlobalPos);
+                                        double blockX = currX | chunkXGlobalPos;
+                                        double blockY = currY | chunkYGlobalPos;
+                                        double blockZ = currZ | chunkZGlobalPos;
                                         final AABB blockBox = new AABB(
                                             blockX, blockY, blockZ,
                                             blockX + 1.0, blockY + 1.0, blockZ + 1.0,
@@ -625,7 +625,7 @@ public final class CollisionUtil {
                                     }
                                     VoxelShape voxelshape2 = blockData.getCollisionShape(getter, mutablePos, collisionShape);
                                     if (voxelshape2 != Shapes.empty()) {
-                                        VoxelShape voxelshape3 = voxelshape2.move((double)blockX, (double)blockY, (double)blockZ);
+                                        VoxelShape voxelshape3 = voxelshape2.move(blockX, blockY, blockZ);
 
                                         if (predicate != null && !predicate.test(blockData, mutablePos)) {
                                             continue;
@@ -784,7 +784,7 @@ public final class CollisionUtil {
                                     }
                                     VoxelShape voxelshape2 = blockData.getCollisionShape(getter, mutablePos, collisionShape);
                                     if (voxelshape2 != Shapes.empty()) {
-                                        VoxelShape voxelshape3 = voxelshape2.move((double)blockX, (double)blockY, (double)blockZ);
+                                        VoxelShape voxelshape3 = voxelshape2.move(blockX, blockY, blockZ);
 
                                         if (predicate != null && !predicate.test(blockData, mutablePos)) {
                                             continue;
diff --git a/src/main/java/io/papermc/paper/util/PoiAccess.java b/src/main/java/io/papermc/paper/util/PoiAccess.java
index c2e119a7da112daa8566aa4717b8c80e28ee6ca7..079c8d3fe57c8aef90bf6599a7024486079b0c52 100644
--- a/src/main/java/io/papermc/paper/util/PoiAccess.java
+++ b/src/main/java/io/papermc/paper/util/PoiAccess.java
@@ -246,7 +246,7 @@ public final class PoiAccess {
                     (sectionX << 4) + 15.5,
                     (sectionY << 4) + 15.5,
                     (sectionZ << 4) + 15.5,
-                    (double)sourcePosition.getX(), (double)sourcePosition.getY(), (double)sourcePosition.getZ()
+                sourcePosition.getX(), sourcePosition.getY(), sourcePosition.getZ()
             );
             if (sectionDistanceSquared > closestDistanceSquared) {
                 continue;
@@ -487,7 +487,7 @@ public final class PoiAccess {
                     (sectionX << 4) + 15.5,
                     (sectionY << 4) + 15.5,
                     (sectionZ << 4) + 15.5,
-                    (double) sourcePosition.getX(), (double) sourcePosition.getY(), (double) sourcePosition.getZ()
+                sourcePosition.getX(), sourcePosition.getY(), sourcePosition.getZ()
             );
 
             if (sectionDistanceSquared > (totalRecords >= max ? furthestDistanceSquared : maxDistanceSquared)) {
diff --git a/src/main/java/net/minecraft/ChatFormatting.java b/src/main/java/net/minecraft/ChatFormatting.java
index 8205af621b62c13e1e4a9927f2b470d1ba6038ab..829fd1908c99fa2761e759c8a3596f42ecae2196 100644
--- a/src/main/java/net/minecraft/ChatFormatting.java
+++ b/src/main/java/net/minecraft/ChatFormatting.java
@@ -34,7 +34,7 @@ public enum ChatFormatting implements StringRepresentable {
     STRIKETHROUGH("STRIKETHROUGH", 'm', true),
     UNDERLINE("UNDERLINE", 'n', true),
     ITALIC("ITALIC", 'o', true),
-    RESET("RESET", 'r', -1, (Integer)null);
+    RESET("RESET", 'r', -1, null);
 
     public static final Codec<ChatFormatting> CODEC = StringRepresentable.fromEnum(ChatFormatting::values);
     public static final char PREFIX_CODE = '\u00a7';
@@ -61,7 +61,7 @@ public enum ChatFormatting implements StringRepresentable {
     }
 
     private ChatFormatting(String name, char code, boolean modifier) {
-        this(name, code, modifier, -1, (Integer)null);
+        this(name, code, modifier, -1, null);
     }
 
     private ChatFormatting(String name, char code, boolean modifier, int colorIndex, @Nullable Integer colorValue) {
diff --git a/src/main/java/net/minecraft/CrashReport.java b/src/main/java/net/minecraft/CrashReport.java
index 21604fb28c413dff0927afbeee231743ffffc672..12b34d7a0d737d0ce2194384ed73c5f132cc4a4d 100644
--- a/src/main/java/net/minecraft/CrashReport.java
+++ b/src/main/java/net/minecraft/CrashReport.java
@@ -55,7 +55,7 @@ public class CrashReport {
 
     public void getDetails(StringBuilder crashReportBuilder) {
         if ((this.uncategorizedStackTrace == null || this.uncategorizedStackTrace.length <= 0) && !this.details.isEmpty()) {
-            this.uncategorizedStackTrace = (StackTraceElement[]) ArrayUtils.subarray(((CrashReportCategory) this.details.get(0)).getStacktrace(), 0, 1);
+            this.uncategorizedStackTrace = ArrayUtils.subarray(this.details.get(0).getStacktrace(), 0, 1);
         }
 
         if (this.uncategorizedStackTrace.length > 0) {
diff --git a/src/main/java/net/minecraft/CrashReportCategory.java b/src/main/java/net/minecraft/CrashReportCategory.java
index 6e2c241ccab14f5f84edd321d7a941e4bb7d09df..856e439134e9cfd99eb6081d2ebb434e607f33de 100644
--- a/src/main/java/net/minecraft/CrashReportCategory.java
+++ b/src/main/java/net/minecraft/CrashReportCategory.java
@@ -151,7 +151,7 @@ public class CrashReportCategory {
 
             for(StackTraceElement stackTraceElement : this.stackTrace) {
                 crashReportBuilder.append("\n\tat ");
-                crashReportBuilder.append((Object)stackTraceElement);
+                crashReportBuilder.append(stackTraceElement);
             }
         }
 
diff --git a/src/main/java/net/minecraft/Util.java b/src/main/java/net/minecraft/Util.java
index 59a06424817cf2e8a2fe532ed9e49cb3e8e398d4..cd1a00d1cea11a2645da1964706242537a6479c8 100644
--- a/src/main/java/net/minecraft/Util.java
+++ b/src/main/java/net/minecraft/Util.java
@@ -278,7 +278,7 @@ public class Util {
         try {
             type = DataFixers.getDataFixer().getSchema(DataFixUtils.makeKey(SharedConstants.getCurrentVersion().getWorldVersion())).getChoiceType(typeReference, id);
         } catch (IllegalArgumentException var4) {
-            LOGGER.error("No data fixer registered for {}", (Object)id);
+            LOGGER.error("No data fixer registered for {}", id);
             if (SharedConstants.IS_RUNNING_IN_IDE) {
                 throw var4;
             }
@@ -376,7 +376,7 @@ public class Util {
             object3 = iterator.next();
             if (object3 == object) {
                 if (object2 == null) {
-                    object2 = (T)(iterator.hasNext() ? Iterators.getLast(iterator) : object);
+                    object2 = iterator.hasNext() ? Iterators.getLast(iterator) : object;
                 }
                 break;
             }
@@ -396,11 +396,11 @@ public class Util {
 
     @Nullable
     public static <T, R> R mapNullable(@Nullable T value, Function<T, R> mapper) {
-        return (R)(value == null ? null : mapper.apply(value));
+        return value == null ? null : mapper.apply(value);
     }
 
     public static <T, R> R mapNullable(@Nullable T value, Function<T, R> mapper, R other) {
-        return (R)(value == null ? other : mapper.apply(value));
+        return value == null ? other : mapper.apply(value);
     }
 
     public static <K> Hash.Strategy<K> identityStrategy() {
@@ -441,7 +441,7 @@ public class Util {
         CompletableFuture<?>[] completableFutures = new CompletableFuture[futures.size()];
         futures.forEach((future) -> {
             int i = list.size();
-            list.add((V)null);
+            list.add(null);
             completableFutures[i] = future.whenComplete((value, throwable) -> {
                 if (throwable != null) {
                     exceptionHandler.accept(throwable);
@@ -545,7 +545,7 @@ public class Util {
                     Files.move(src, dest);
                     return true;
                 } catch (IOException var2) {
-                    Util.LOGGER.error("Failed to rename", (Throwable)var2);
+                    Util.LOGGER.error("Failed to rename", var2);
                     return false;
                 }
             }
@@ -565,7 +565,7 @@ public class Util {
                     Files.deleteIfExists(path);
                     return true;
                 } catch (IOException var2) {
-                    Util.LOGGER.warn("Failed to delete", (Throwable)var2);
+                    Util.LOGGER.warn("Failed to delete", var2);
                     return false;
                 }
             }
@@ -608,7 +608,7 @@ public class Util {
     private static boolean executeInSequence(BooleanSupplier... tasks) {
         for(BooleanSupplier booleanSupplier : tasks) {
             if (!booleanSupplier.getAsBoolean()) {
-                LOGGER.warn("Failed to execute {}", (Object)booleanSupplier);
+                LOGGER.warn("Failed to execute {}", booleanSupplier);
                 return false;
             }
         }
@@ -625,7 +625,7 @@ public class Util {
             LOGGER.error("Failed to {}, retrying {}/{}", taskName, Integer.valueOf(i), Integer.valueOf(retries));
         }
 
-        LOGGER.error("Failed to {}, aborting, progress might be lost", (Object)taskName);
+        LOGGER.error("Failed to {}, aborting, progress might be lost", taskName);
         return false;
     }
 
@@ -680,7 +680,7 @@ public class Util {
     }
 
     public static DataResult<int[]> fixedSize(IntStream stream, int length) {
-        int[] is = stream.limit((long)(length + 1)).toArray();
+        int[] is = stream.limit(length + 1).toArray();
         if (is.length != length) {
             String string = "Input is not a list of " + length + " ints";
             return is.length >= length ? DataResult.error(string, Arrays.copyOf(is, length)) : DataResult.error(string);
@@ -825,7 +825,7 @@ public class Util {
 
         int i = blockingQueue.size();
         if (i > 0) {
-            LOGGER.warn("Tasks left in queue: {}", Integer.valueOf((int) i));
+            LOGGER.warn("Tasks left in queue: {}", Integer.valueOf(i));
         }
 
         return object;
diff --git a/src/main/java/net/minecraft/advancements/Advancement.java b/src/main/java/net/minecraft/advancements/Advancement.java
index dd4409790524293be07483f00df05d8a8743e3d9..ff95a01e6f3f18dbbea0627ef3185c2e020fe767 100644
--- a/src/main/java/net/minecraft/advancements/Advancement.java
+++ b/src/main/java/net/minecraft/advancements/Advancement.java
@@ -239,7 +239,7 @@ public class Advancement {
                 return true;
             } else {
                 if (this.parent == null) {
-                    this.parent = (Advancement) parentProvider.apply(this.parentId);
+                    this.parent = parentProvider.apply(this.parentId);
                 }
 
                 return this.parent != null;
@@ -291,7 +291,7 @@ public class Advancement {
             while (iterator.hasNext()) {
                 Entry<String, Criterion> entry = (Entry) iterator.next();
 
-                jsonobject1.add((String) entry.getKey(), ((Criterion) entry.getValue()).serializeToJson());
+                jsonobject1.add(entry.getKey(), entry.getValue().serializeToJson());
             }
 
             jsonobject.add("criteria", jsonobject1);
@@ -447,8 +447,8 @@ public class Advancement {
         }
 
         public static Advancement.Builder fromNetwork(FriendlyByteBuf buf) {
-            ResourceLocation minecraftkey = (ResourceLocation) buf.readNullable(FriendlyByteBuf::readResourceLocation);
-            DisplayInfo advancementdisplay = (DisplayInfo) buf.readNullable(DisplayInfo::fromNetwork);
+            ResourceLocation minecraftkey = buf.readNullable(FriendlyByteBuf::readResourceLocation);
+            DisplayInfo advancementdisplay = buf.readNullable(DisplayInfo::fromNetwork);
             Map<String, Criterion> map = Criterion.criteriaFromNetwork(buf);
             String[][] astring = new String[buf.readVarInt()][];
 
diff --git a/src/main/java/net/minecraft/advancements/AdvancementList.java b/src/main/java/net/minecraft/advancements/AdvancementList.java
index 1264c25ca48ad37467b63ee4a37adeb335d6c581..abf77e2cff704543e63b39b24fbe61b2845fecb6 100644
--- a/src/main/java/net/minecraft/advancements/AdvancementList.java
+++ b/src/main/java/net/minecraft/advancements/AdvancementList.java
@@ -55,7 +55,7 @@ public class AdvancementList {
 
         while (iterator.hasNext()) {
             ResourceLocation minecraftkey = (ResourceLocation) iterator.next();
-            Advancement advancement = (Advancement) this.advancements.get(minecraftkey);
+            Advancement advancement = this.advancements.get(minecraftkey);
 
             if (advancement == null) {
                 AdvancementList.LOGGER.warn("Told to remove advancement {} but I don't know what that is", minecraftkey);
@@ -140,7 +140,7 @@ public class AdvancementList {
 
     @Nullable
     public Advancement get(ResourceLocation id) {
-        return (Advancement) this.advancements.get(id);
+        return this.advancements.get(id);
     }
 
     public void setListener(@Nullable AdvancementList.Listener listener) {
diff --git a/src/main/java/net/minecraft/commands/CommandSourceStack.java b/src/main/java/net/minecraft/commands/CommandSourceStack.java
index ae5dd08de75a7ed231295f306fd0974da3988249..242b71ec331f79f67d0d19cb06bc95b21f9ac115 100644
--- a/src/main/java/net/minecraft/commands/CommandSourceStack.java
+++ b/src/main/java/net/minecraft/commands/CommandSourceStack.java
@@ -107,7 +107,7 @@ public class CommandSourceStack implements SharedSuggestionProvider, com.destroy
     }
 
     public CommandSourceStack withCallback(ResultConsumer<CommandSourceStack> consumer, BinaryOperator<ResultConsumer<CommandSourceStack>> merger) {
-        ResultConsumer<CommandSourceStack> resultconsumer1 = (ResultConsumer) merger.apply(this.consumer, consumer);
+        ResultConsumer<CommandSourceStack> resultconsumer1 = merger.apply(this.consumer, consumer);
 
         return this.withCallback(resultconsumer1);
     }
@@ -390,7 +390,7 @@ public class CommandSourceStack implements SharedSuggestionProvider, com.destroy
 
     @Override
     public CompletableFuture<Suggestions> suggestRegistryElements(ResourceKey<? extends Registry<?>> registryRef, SharedSuggestionProvider.ElementSuggestionType suggestedIdType, SuggestionsBuilder builder, CommandContext<?> context) {
-        return (CompletableFuture) this.registryAccess().registry(registryRef).map((iregistry) -> {
+        return this.registryAccess().registry(registryRef).map((iregistry) -> {
             this.suggestRegistryElements(iregistry, suggestedIdType, builder);
             return builder.buildFuture();
         }).orElseGet(Suggestions::empty);
diff --git a/src/main/java/net/minecraft/commands/Commands.java b/src/main/java/net/minecraft/commands/Commands.java
index c1beaa72a8c8c8c6233ea10b67f86eb9663a46bc..d009d3239db8e7aa75e0b93412286ff2a64125b8 100644
--- a/src/main/java/net/minecraft/commands/Commands.java
+++ b/src/main/java/net/minecraft/commands/Commands.java
@@ -233,7 +233,7 @@ public class Commands {
     public Commands() {
         // CraftBukkkit end
         this.dispatcher.setConsumer((commandcontext, flag, i) -> {
-            ((CommandSourceStack) commandcontext.getSource()).onCommandComplete(commandcontext, flag, i);
+            commandcontext.getSource().onCommandComplete(commandcontext, flag, i);
         });
     }
 
@@ -298,7 +298,7 @@ public class Commands {
     }
 
     public int performCommand(ParseResults<CommandSourceStack> parseresults, String s, String label) { // CraftBukkit
-        CommandSourceStack commandlistenerwrapper = (CommandSourceStack) parseresults.getContext().getSource();
+        CommandSourceStack commandlistenerwrapper = parseresults.getContext().getSource();
 
         commandlistenerwrapper.getServer().getProfiler().push(() -> {
             return "/" + s;
@@ -333,10 +333,10 @@ public class Commands {
                     if (j < commandsyntaxexception.getInput().length()) {
                         MutableComponent ichatmutablecomponent1 = Component.literal(commandsyntaxexception.getInput().substring(j)).withStyle(ChatFormatting.RED, ChatFormatting.UNDERLINE);
 
-                        ichatmutablecomponent.append((Component) ichatmutablecomponent1);
+                        ichatmutablecomponent.append(ichatmutablecomponent1);
                     }
 
-                    ichatmutablecomponent.append((Component) Component.translatable("command.context.here").withStyle(ChatFormatting.RED, ChatFormatting.ITALIC));
+                    ichatmutablecomponent.append(Component.translatable("command.context.here").withStyle(ChatFormatting.RED, ChatFormatting.ITALIC));
                     commandlistenerwrapper.sendFailure(ichatmutablecomponent);
                 }
 
@@ -403,7 +403,7 @@ public class Commands {
 
         RootCommandNode<CommandSourceStack> vanilla = player.server.vanillaCommandDispatcher.getDispatcher().getRoot();
         map.put(vanilla, vanillaRoot);
-        this.fillUsableCommands(vanilla, vanillaRoot, player.createCommandSourceStack(), (Map) map);
+        this.fillUsableCommands(vanilla, vanillaRoot, player.createCommandSourceStack(), map);
 
         // Now build the global commands in a second pass
         RootCommandNode<SharedSuggestionProvider> rootcommandnode = new RootCommandNode();
@@ -478,7 +478,7 @@ public class Commands {
                 }
 
                 if (argumentbuilder.getRedirect() != null) {
-                    argumentbuilder.redirect((CommandNode) resultNodes.get(argumentbuilder.getRedirect()));
+                    argumentbuilder.redirect(resultNodes.get(argumentbuilder.getRedirect()));
                 }
 
                 CommandNode commandnode3 = argumentbuilder.build(); // CraftBukkit - decompile error
@@ -518,7 +518,7 @@ public class Commands {
 
     @Nullable
     public static <S> CommandSyntaxException getParseException(ParseResults<S> parse) {
-        return !parse.getReader().canRead() ? null : (parse.getExceptions().size() == 1 ? (CommandSyntaxException) parse.getExceptions().values().iterator().next() : (parse.getContext().getRange().isEmpty() ? CommandSyntaxException.BUILT_IN_EXCEPTIONS.dispatcherUnknownCommand().createWithContext(parse.getReader()) : CommandSyntaxException.BUILT_IN_EXCEPTIONS.dispatcherUnknownArgument().createWithContext(parse.getReader())));
+        return !parse.getReader().canRead() ? null : (parse.getExceptions().size() == 1 ? parse.getExceptions().values().iterator().next() : (parse.getContext().getRange().isEmpty() ? CommandSyntaxException.BUILT_IN_EXCEPTIONS.dispatcherUnknownCommand().createWithContext(parse.getReader()) : CommandSyntaxException.BUILT_IN_EXCEPTIONS.dispatcherUnknownArgument().createWithContext(parse.getReader())));
     }
 
     public static CommandBuildContext createValidationContext(final HolderLookup.Provider registryLookup) {
@@ -555,7 +555,7 @@ public class Commands {
             Commands.LOGGER.warn("Ambiguity between arguments {} and {} with inputs: {}", com_mojang_brigadier_commanddispatcher.getPath(commandnode1), com_mojang_brigadier_commanddispatcher.getPath(commandnode2), collection);
         });
         Set<ArgumentType<?>> set = ArgumentUtils.findUsedArgumentTypes(rootcommandnode);
-        Set<ArgumentType<?>> set1 = (Set) set.stream().filter((argumenttype) -> {
+        Set<ArgumentType<?>> set1 = set.stream().filter((argumenttype) -> {
             return !ArgumentTypeInfos.isClassRecognized(argumenttype.getClass());
         }).collect(Collectors.toSet());
 
diff --git a/src/main/java/net/minecraft/commands/arguments/EntityArgument.java b/src/main/java/net/minecraft/commands/arguments/EntityArgument.java
index b3c65f6b757c9ca7d26f5e95293c6021ab771a2f..fbc54f68197052a419304d531b62999405a5fafd 100644
--- a/src/main/java/net/minecraft/commands/arguments/EntityArgument.java
+++ b/src/main/java/net/minecraft/commands/arguments/EntityArgument.java
@@ -46,7 +46,7 @@ public class EntityArgument implements ArgumentType<EntitySelector> {
     }
 
     public static Entity getEntity(CommandContext<CommandSourceStack> context, String name) throws CommandSyntaxException {
-        return ((EntitySelector) context.getArgument(name, EntitySelector.class)).findSingleEntity((CommandSourceStack) context.getSource());
+        return context.getArgument(name, EntitySelector.class).findSingleEntity(context.getSource());
     }
 
     public static EntityArgument entities() {
@@ -64,11 +64,11 @@ public class EntityArgument implements ArgumentType<EntitySelector> {
     }
 
     public static Collection<? extends Entity> getOptionalEntities(CommandContext<CommandSourceStack> context, String name) throws CommandSyntaxException {
-        return ((EntitySelector) context.getArgument(name, EntitySelector.class)).findEntities((CommandSourceStack) context.getSource());
+        return context.getArgument(name, EntitySelector.class).findEntities(context.getSource());
     }
 
     public static Collection<ServerPlayer> getOptionalPlayers(CommandContext<CommandSourceStack> context, String name) throws CommandSyntaxException {
-        return ((EntitySelector) context.getArgument(name, EntitySelector.class)).findPlayers((CommandSourceStack) context.getSource());
+        return context.getArgument(name, EntitySelector.class).findPlayers(context.getSource());
     }
 
     public static EntityArgument player() {
@@ -76,7 +76,7 @@ public class EntityArgument implements ArgumentType<EntitySelector> {
     }
 
     public static ServerPlayer getPlayer(CommandContext<CommandSourceStack> context, String name) throws CommandSyntaxException {
-        return ((EntitySelector) context.getArgument(name, EntitySelector.class)).findSinglePlayer((CommandSourceStack) context.getSource());
+        return context.getArgument(name, EntitySelector.class).findSinglePlayer(context.getSource());
     }
 
     public static EntityArgument players() {
@@ -84,7 +84,7 @@ public class EntityArgument implements ArgumentType<EntitySelector> {
     }
 
     public static Collection<ServerPlayer> getPlayers(CommandContext<CommandSourceStack> context, String name) throws CommandSyntaxException {
-        List<ServerPlayer> list = ((EntitySelector) context.getArgument(name, EntitySelector.class)).findPlayers((CommandSourceStack) context.getSource());
+        List<ServerPlayer> list = context.getArgument(name, EntitySelector.class).findPlayers(context.getSource());
 
         if (list.isEmpty()) {
             throw EntityArgument.NO_PLAYERS_FOUND.create();
@@ -145,7 +145,7 @@ public class EntityArgument implements ArgumentType<EntitySelector> {
                 Collection<String> collection = icompletionprovider.getOnlinePlayerNames();
                 Iterable<String> iterable = this.playersOnly ? collection : Iterables.concat(collection, icompletionprovider.getSelectedEntities());
 
-                SharedSuggestionProvider.suggest((Iterable) iterable, suggestionsbuilder1);
+                SharedSuggestionProvider.suggest(iterable, suggestionsbuilder1);
             });
         } else {
             return Suggestions.empty();
diff --git a/src/main/java/net/minecraft/commands/arguments/blocks/BlockStateParser.java b/src/main/java/net/minecraft/commands/arguments/blocks/BlockStateParser.java
index 12066f2fc67b348e2e568a8e9889b2cfc25d58c3..47bf76e05e9d5a1432eb4adeb60c7361564df87c 100644
--- a/src/main/java/net/minecraft/commands/arguments/blocks/BlockStateParser.java
+++ b/src/main/java/net/minecraft/commands/arguments/blocks/BlockStateParser.java
@@ -137,7 +137,7 @@ public class BlockStateParser {
             ;
         }
 
-        return (CompletableFuture) argumentblock.suggestions.apply(builder.createOffset(stringreader.getCursor()));
+        return argumentblock.suggestions.apply(builder.createOffset(stringreader.getCursor()));
     }
 
     private void parse() throws CommandSyntaxException {
@@ -209,7 +209,7 @@ public class BlockStateParser {
 
             while (iterator.hasNext()) {
                 Holder<Block> holder = (Holder) iterator.next();
-                Iterator iterator1 = ((Block) holder.value()).getStateDefinition().getProperties().iterator();
+                Iterator iterator1 = holder.value().getStateDefinition().getProperties().iterator();
 
                 while (iterator1.hasNext()) {
                     Property<?> iblockstate = (Property) iterator1.next();
@@ -242,7 +242,7 @@ public class BlockStateParser {
                 while (iterator.hasNext()) {
                     Holder<Block> holder = (Holder) iterator.next();
 
-                    if (((Block) holder.value()).defaultBlockState().hasBlockEntity()) {
+                    if (holder.value().defaultBlockState().hasBlockEntity()) {
                         return true;
                     }
                 }
@@ -298,7 +298,7 @@ public class BlockStateParser {
 
             while (iterator.hasNext()) {
                 Holder<Block> holder = (Holder) iterator.next();
-                Block block = (Block) holder.value();
+                Block block = holder.value();
                 Property<?> iblockstate = block.getStateDefinition().getProperty(name);
 
                 if (iblockstate != null) {
@@ -336,7 +336,7 @@ public class BlockStateParser {
 
             while (iterator.hasNext()) {
                 Holder<Block> holder = (Holder) iterator.next();
-                Block block = (Block) holder.value();
+                Block block = holder.value();
 
                 flag |= !block.getStateDefinition().getProperties().isEmpty();
                 flag1 |= block.defaultBlockState().hasBlockEntity();
@@ -408,7 +408,7 @@ public class BlockStateParser {
             this.suggestions = this::suggestTag;
             ResourceLocation minecraftkey = ResourceLocation.read(this.reader);
 
-            this.tag = (HolderSet) this.blocks.get(TagKey.create(Registries.BLOCK, minecraftkey)).orElseThrow(() -> {
+            this.tag = this.blocks.get(TagKey.create(Registries.BLOCK, minecraftkey)).orElseThrow(() -> {
                 this.reader.setCursor(i);
                 return BlockStateParser.ERROR_UNKNOWN_TAG.createWithContext(this.reader, minecraftkey.toString());
             });
@@ -548,8 +548,8 @@ public class BlockStateParser {
         Optional<T> optional = property.getValue(value);
 
         if (optional.isPresent()) {
-            this.state = (BlockState) this.state.setValue(property, (T) optional.get()); // CraftBukkit - decompile error
-            this.properties.put(property, (Comparable) optional.get());
+            this.state = this.state.setValue(property, optional.get()); // CraftBukkit - decompile error
+            this.properties.put(property, optional.get());
         } else {
             this.reader.setCursor(cursor);
             throw BlockStateParser.ERROR_INVALID_VALUE.createWithContext(this.reader, this.id.toString(), property.getName(), value);
@@ -557,7 +557,7 @@ public class BlockStateParser {
     }
 
     public static String serialize(BlockState state) {
-        StringBuilder stringbuilder = new StringBuilder((String) state.getBlockHolder().unwrapKey().map((resourcekey) -> {
+        StringBuilder stringbuilder = new StringBuilder(state.getBlockHolder().unwrapKey().map((resourcekey) -> {
             return resourcekey.location().toString();
         }).orElse("air"));
 
@@ -572,7 +572,7 @@ public class BlockStateParser {
                     stringbuilder.append(',');
                 }
 
-                BlockStateParser.appendProperty(stringbuilder, (Property) entry.getKey(), (Comparable) entry.getValue());
+                BlockStateParser.appendProperty(stringbuilder, (Property) entry.getKey(), entry.getValue());
             }
 
             stringbuilder.append(']');
diff --git a/src/main/java/net/minecraft/commands/arguments/selector/EntitySelector.java b/src/main/java/net/minecraft/commands/arguments/selector/EntitySelector.java
index 78577e53dedcaf4eb84be81939d7b0076baf0931..c48641c8aacaafd0af7902aaeeea6ea533e2a9a4 100644
--- a/src/main/java/net/minecraft/commands/arguments/selector/EntitySelector.java
+++ b/src/main/java/net/minecraft/commands/arguments/selector/EntitySelector.java
@@ -67,7 +67,7 @@ public class EntitySelector {
         this.currentEntity = senderOnly;
         this.playerName = playerName;
         this.entityUUID = uuid;
-        this.type = (EntityTypeTest) (type == null ? EntitySelector.ANY_TYPE : type);
+        this.type = type == null ? EntitySelector.ANY_TYPE : type;
         this.usesSelector = usesAt;
     }
 
@@ -106,7 +106,7 @@ public class EntitySelector {
         } else if (list.size() > 1) {
             throw EntityArgument.ERROR_NOT_SINGLE_ENTITY.create();
         } else {
-            return (Entity) list.get(0);
+            return list.get(0);
         }
     }
 
@@ -123,7 +123,7 @@ public class EntitySelector {
         } else if (this.playerName != null) {
             ServerPlayer entityplayer = source.getServer().getPlayerList().getPlayerByName(this.playerName);
 
-            return (List) (entityplayer == null ? Collections.emptyList() : Lists.newArrayList(new ServerPlayer[]{entityplayer}));
+            return entityplayer == null ? Collections.emptyList() : Lists.newArrayList(new ServerPlayer[]{entityplayer});
         } else if (this.entityUUID != null) {
             Iterator iterator = source.getServer().getAllLevels().iterator();
 
@@ -141,11 +141,11 @@ public class EntitySelector {
 
             return Lists.newArrayList(entity);
         } else {
-            Vec3 vec3d = (Vec3) this.position.apply(source.getPosition());
+            Vec3 vec3d = this.position.apply(source.getPosition());
             Predicate<Entity> predicate = this.getPredicate(vec3d);
 
             if (this.currentEntity) {
-                return (List) (source.getEntity() != null && predicate.test(source.getEntity()) ? Lists.newArrayList(new Entity[]{source.getEntity()}) : Collections.emptyList());
+                return source.getEntity() != null && predicate.test(source.getEntity()) ? Lists.newArrayList(new Entity[]{source.getEntity()}) : Collections.emptyList();
             } else {
                 List<Entity> list = Lists.newArrayList();
 
@@ -190,7 +190,7 @@ public class EntitySelector {
         if (list.size() != 1) {
             throw EntityArgument.NO_PLAYERS_FOUND.create();
         } else {
-            return (ServerPlayer) list.get(0);
+            return list.get(0);
         }
     }
 
@@ -200,12 +200,12 @@ public class EntitySelector {
 
         if (this.playerName != null) {
             entityplayer = source.getServer().getPlayerList().getPlayerByName(this.playerName);
-            return (List) (entityplayer == null ? Collections.emptyList() : Lists.newArrayList(new ServerPlayer[]{entityplayer}));
+            return entityplayer == null ? Collections.emptyList() : Lists.newArrayList(new ServerPlayer[]{entityplayer});
         } else if (this.entityUUID != null) {
             entityplayer = source.getServer().getPlayerList().getPlayer(this.entityUUID);
-            return (List) (entityplayer == null ? Collections.emptyList() : Lists.newArrayList(new ServerPlayer[]{entityplayer}));
+            return entityplayer == null ? Collections.emptyList() : Lists.newArrayList(new ServerPlayer[]{entityplayer});
         } else {
-            Vec3 vec3d = (Vec3) this.position.apply(source.getPosition());
+            Vec3 vec3d = this.position.apply(source.getPosition());
             Predicate<Entity> predicate = this.getPredicate(vec3d);
 
             if (this.currentEntity) {
diff --git a/src/main/java/net/minecraft/commands/arguments/selector/EntitySelectorParser.java b/src/main/java/net/minecraft/commands/arguments/selector/EntitySelectorParser.java
index 47d418ac7a5601dfc91be301f3924b486d56cb6d..b6ae0ccacd1f63ce131bfdebeedc4512b2fe3015 100644
--- a/src/main/java/net/minecraft/commands/arguments/selector/EntitySelectorParser.java
+++ b/src/main/java/net/minecraft/commands/arguments/selector/EntitySelectorParser.java
@@ -144,7 +144,7 @@ public class EntitySelectorParser {
 
         if (this.deltaX == null && this.deltaY == null && this.deltaZ == null) {
             if (this.distance.getMax() != null) {
-                double d0 = ((Double) this.distance.getMax()).doubleValue();
+                double d0 = this.distance.getMax().doubleValue();
 
                 axisalignedbb = new AABB(-d0, -d0, -d0, d0 + 1.0D, d0 + 1.0D, d0 + 1.0D);
             } else {
@@ -201,8 +201,8 @@ public class EntitySelectorParser {
     }
 
     private Predicate<Entity> createRotationPredicate(WrappedMinMaxBounds angleRange, ToDoubleFunction<Entity> entityToAngle) {
-        double d0 = (double) Mth.wrapDegrees(angleRange.getMin() == null ? 0.0F : angleRange.getMin().floatValue());
-        double d1 = (double) Mth.wrapDegrees(angleRange.getMax() == null ? 359.0F : angleRange.getMax().floatValue());
+        double d0 = Mth.wrapDegrees(angleRange.getMin() == null ? 0.0F : angleRange.getMin().floatValue());
+        double d1 = Mth.wrapDegrees(angleRange.getMax() == null ? 359.0F : angleRange.getMax().floatValue());
 
         return (entity) -> {
             double d2 = Mth.wrapDegrees(entityToAngle.applyAsDouble(entity));
@@ -563,7 +563,7 @@ public class EntitySelectorParser {
     }
 
     public CompletableFuture<Suggestions> fillSuggestions(SuggestionsBuilder builder, Consumer<SuggestionsBuilder> consumer) {
-        return (CompletableFuture) this.suggestions.apply(builder.createOffset(this.reader.getCursor()), consumer);
+        return this.suggestions.apply(builder.createOffset(this.reader.getCursor()), consumer);
     }
 
     public boolean hasNameEquals() {
diff --git a/src/main/java/net/minecraft/commands/arguments/selector/options/EntitySelectorOptions.java b/src/main/java/net/minecraft/commands/arguments/selector/options/EntitySelectorOptions.java
index ef72346e4967abec5c83c3b4736d0c41411d47f5..40a8355c4504e2965379f45b3c007a02c05146cb 100644
--- a/src/main/java/net/minecraft/commands/arguments/selector/options/EntitySelectorOptions.java
+++ b/src/main/java/net/minecraft/commands/arguments/selector/options/EntitySelectorOptions.java
@@ -257,7 +257,7 @@ public class EntitySelectorOptions {
                     throw ERROR_INAPPLICABLE_OPTION.createWithContext(reader.getReader(), "gamemode");
                 } else {
                     String string = reader.getReader().readUnquotedString();
-                    GameType gameType = GameType.byName(string, (GameType)null);
+                    GameType gameType = GameType.byName(string, null);
                     if (gameType == null) {
                         reader.getReader().setCursor(i);
                         throw ERROR_GAME_MODE_INVALID.createWithContext(reader.getReader(), string);
@@ -566,7 +566,7 @@ public class EntitySelectorOptions {
 
         for(Map.Entry<String, EntitySelectorOptions.Option> entry : OPTIONS.entrySet()) {
             if ((entry.getValue()).canUse.test(reader) && entry.getKey().toLowerCase(Locale.ROOT).startsWith(string)) {
-                suggestionBuilder.suggest((String)entry.getKey() + "=", (entry.getValue()).description);
+                suggestionBuilder.suggest(entry.getKey() + "=", (entry.getValue()).description);
             }
         }
 
diff --git a/src/main/java/net/minecraft/core/MappedRegistry.java b/src/main/java/net/minecraft/core/MappedRegistry.java
index 6f597bc5fe91165afa340f1a695d955d38b4e2b9..fcdd6bee43af7b1ad2dbbc4c7f955728bc13ef6e 100644
--- a/src/main/java/net/minecraft/core/MappedRegistry.java
+++ b/src/main/java/net/minecraft/core/MappedRegistry.java
@@ -201,7 +201,7 @@ public class MappedRegistry<T> implements WritableRegistry<T> {
     @Nullable
     @Override
     public T byId(int index) {
-        return (T)(index >= 0 && index < this.byId.size() ? getValueFromNullable(this.byId.get(index)) : null);
+        return index >= 0 && index < this.byId.size() ? getValueFromNullable(this.byId.get(index)) : null;
     }
 
     @Override
@@ -260,7 +260,7 @@ public class MappedRegistry<T> implements WritableRegistry<T> {
 
     @Nullable
     private static <T> T getValueFromNullable(@Nullable Holder.Reference<T> entry) {
-        return (T)(entry != null ? entry.value() : null);
+        return entry != null ? entry.value() : null;
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/core/SectionPos.java b/src/main/java/net/minecraft/core/SectionPos.java
index a9d0d72aad7b1b708617a082c5efcd881a0f00d3..630b125372dd56b81dc4e539e7d201e383713310 100644
--- a/src/main/java/net/minecraft/core/SectionPos.java
+++ b/src/main/java/net/minecraft/core/SectionPos.java
@@ -239,7 +239,7 @@ public class SectionPos extends Vec3i {
     }
 
     public static Stream<SectionPos> betweenClosedStream(final int minX, final int minY, final int minZ, final int maxX, final int maxY, final int maxZ) {
-        return StreamSupport.stream(new Spliterators.AbstractSpliterator<SectionPos>((long)((maxX - minX + 1) * (maxY - minY + 1) * (maxZ - minZ + 1)), 64) {
+        return StreamSupport.stream(new Spliterators.AbstractSpliterator<SectionPos>((maxX - minX + 1) * (maxY - minY + 1) * (maxZ - minZ + 1), 64) {
             final Cursor3D cursor = new Cursor3D(minX, minY, minZ, maxX, maxY, maxZ);
 
             @Override
diff --git a/src/main/java/net/minecraft/core/Vec3i.java b/src/main/java/net/minecraft/core/Vec3i.java
index cc73ce9f860d1ed3a746e08364a3be97ffa5c8c2..abc57a96aff5bf459ba7b4c528589dbc7470383f 100644
--- a/src/main/java/net/minecraft/core/Vec3i.java
+++ b/src/main/java/net/minecraft/core/Vec3i.java
@@ -212,7 +212,7 @@ public class Vec3i implements Comparable<Vec3i> {
     }
 
     public double distSqr(Vec3i vec) {
-        return this.distToLowCornerSqr((double)vec.getX(), (double)vec.getY(), (double)vec.getZ());
+        return this.distToLowCornerSqr(vec.getX(), vec.getY(), vec.getZ());
     }
 
     public double distToCenterSqr(Position pos) {
diff --git a/src/main/java/net/minecraft/core/cauldron/CauldronInteraction.java b/src/main/java/net/minecraft/core/cauldron/CauldronInteraction.java
index f29ebec37a3ba4573d84642d4818c33e2ab9c155..32e7717cee053883ee27c246b2a31c98a73dfc28 100644
--- a/src/main/java/net/minecraft/core/cauldron/CauldronInteraction.java
+++ b/src/main/java/net/minecraft/core/cauldron/CauldronInteraction.java
@@ -40,13 +40,13 @@ public interface CauldronInteraction {
     Map<Item, CauldronInteraction> LAVA = CauldronInteraction.newInteractionMap();
     Map<Item, CauldronInteraction> POWDER_SNOW = CauldronInteraction.newInteractionMap();
     CauldronInteraction FILL_WATER = (iblockdata, world, blockposition, entityhuman, enumhand, itemstack) -> {
-        return CauldronInteraction.emptyBucket(world, blockposition, entityhuman, enumhand, itemstack, (BlockState) Blocks.WATER_CAULDRON.defaultBlockState().setValue(LayeredCauldronBlock.LEVEL, Integer.valueOf(3)), SoundEvents.BUCKET_EMPTY);
+        return CauldronInteraction.emptyBucket(world, blockposition, entityhuman, enumhand, itemstack, Blocks.WATER_CAULDRON.defaultBlockState().setValue(LayeredCauldronBlock.LEVEL, Integer.valueOf(3)), SoundEvents.BUCKET_EMPTY);
     };
     CauldronInteraction FILL_LAVA = (iblockdata, world, blockposition, entityhuman, enumhand, itemstack) -> {
         return CauldronInteraction.emptyBucket(world, blockposition, entityhuman, enumhand, itemstack, Blocks.LAVA_CAULDRON.defaultBlockState(), SoundEvents.BUCKET_EMPTY_LAVA);
     };
     CauldronInteraction FILL_POWDER_SNOW = (iblockdata, world, blockposition, entityhuman, enumhand, itemstack) -> {
-        return CauldronInteraction.emptyBucket(world, blockposition, entityhuman, enumhand, itemstack, (BlockState) Blocks.POWDER_SNOW_CAULDRON.defaultBlockState().setValue(LayeredCauldronBlock.LEVEL, Integer.valueOf(3)), SoundEvents.BUCKET_EMPTY_POWDER_SNOW);
+        return CauldronInteraction.emptyBucket(world, blockposition, entityhuman, enumhand, itemstack, Blocks.POWDER_SNOW_CAULDRON.defaultBlockState().setValue(LayeredCauldronBlock.LEVEL, Integer.valueOf(3)), SoundEvents.BUCKET_EMPTY_POWDER_SNOW);
     };
     CauldronInteraction SHULKER_BOX = (iblockdata, world, blockposition, entityhuman, enumhand, itemstack) -> {
         Block block = Block.byItem(itemstack.getItem());
@@ -162,8 +162,8 @@ public interface CauldronInteraction {
                     entityhuman.awardStat(Stats.USE_CAULDRON);
                     entityhuman.awardStat(Stats.ITEM_USED.get(item));
                     // world.setBlockAndUpdate(blockposition, Blocks.WATER_CAULDRON.defaultBlockState()); // CraftBukkit
-                    world.playSound((Player) null, blockposition, SoundEvents.BOTTLE_EMPTY, SoundSource.BLOCKS, 1.0F, 1.0F);
-                    world.gameEvent((Entity) null, GameEvent.FLUID_PLACE, blockposition);
+                    world.playSound(null, blockposition, SoundEvents.BOTTLE_EMPTY, SoundSource.BLOCKS, 1.0F, 1.0F);
+                    world.gameEvent(null, GameEvent.FLUID_PLACE, blockposition);
                 }
 
                 return InteractionResult.sidedSuccess(world.isClientSide);
@@ -172,7 +172,7 @@ public interface CauldronInteraction {
         CauldronInteraction.addDefaultInteractions(CauldronInteraction.WATER);
         CauldronInteraction.WATER.put(Items.BUCKET, (iblockdata, world, blockposition, entityhuman, enumhand, itemstack) -> {
             return CauldronInteraction.fillBucket(iblockdata, world, blockposition, entityhuman, enumhand, itemstack, new ItemStack(Items.WATER_BUCKET), (iblockdata1) -> {
-                return ((Integer) iblockdata1.getValue(LayeredCauldronBlock.LEVEL)).intValue() == 3;
+                return iblockdata1.getValue(LayeredCauldronBlock.LEVEL).intValue() == 3;
             }, SoundEvents.BUCKET_FILL);
         });
         CauldronInteraction.WATER.put(Items.GLASS_BOTTLE, (iblockdata, world, blockposition, entityhuman, enumhand, itemstack) -> {
@@ -188,14 +188,14 @@ public interface CauldronInteraction {
                 entityhuman.awardStat(Stats.USE_CAULDRON);
                 entityhuman.awardStat(Stats.ITEM_USED.get(item));
                 // LayeredCauldronBlock.lowerFillLevel(iblockdata, world, blockposition); // CraftBukkit
-                world.playSound((Player) null, blockposition, SoundEvents.BOTTLE_FILL, SoundSource.BLOCKS, 1.0F, 1.0F);
-                world.gameEvent((Entity) null, GameEvent.FLUID_PICKUP, blockposition);
+                world.playSound(null, blockposition, SoundEvents.BOTTLE_FILL, SoundSource.BLOCKS, 1.0F, 1.0F);
+                world.gameEvent(null, GameEvent.FLUID_PICKUP, blockposition);
             }
 
             return InteractionResult.sidedSuccess(world.isClientSide);
         });
         CauldronInteraction.WATER.put(Items.POTION, (iblockdata, world, blockposition, entityhuman, enumhand, itemstack) -> {
-            if (((Integer) iblockdata.getValue(LayeredCauldronBlock.LEVEL)).intValue() != 3 && PotionUtils.getPotion(itemstack) == Potions.WATER) {
+            if (iblockdata.getValue(LayeredCauldronBlock.LEVEL).intValue() != 3 && PotionUtils.getPotion(itemstack) == Potions.WATER) {
                 if (!world.isClientSide) {
                     // CraftBukkit start
                     if (!LayeredCauldronBlock.changeLevel(iblockdata, world, blockposition, iblockdata.cycle(LayeredCauldronBlock.LEVEL), entityhuman, CauldronLevelChangeEvent.ChangeReason.BOTTLE_EMPTY)) {
@@ -206,8 +206,8 @@ public interface CauldronInteraction {
                     entityhuman.awardStat(Stats.USE_CAULDRON);
                     entityhuman.awardStat(Stats.ITEM_USED.get(itemstack.getItem()));
                     // world.setBlockAndUpdate(blockposition, (IBlockData) iblockdata.cycle(LayeredCauldronBlock.LEVEL)); // CraftBukkit
-                    world.playSound((Player) null, blockposition, SoundEvents.BOTTLE_EMPTY, SoundSource.BLOCKS, 1.0F, 1.0F);
-                    world.gameEvent((Entity) null, GameEvent.FLUID_PLACE, blockposition);
+                    world.playSound(null, blockposition, SoundEvents.BOTTLE_EMPTY, SoundSource.BLOCKS, 1.0F, 1.0F);
+                    world.gameEvent(null, GameEvent.FLUID_PLACE, blockposition);
                 }
 
                 return InteractionResult.sidedSuccess(world.isClientSide);
@@ -260,7 +260,7 @@ public interface CauldronInteraction {
         CauldronInteraction.addDefaultInteractions(CauldronInteraction.LAVA);
         CauldronInteraction.POWDER_SNOW.put(Items.BUCKET, (iblockdata, world, blockposition, entityhuman, enumhand, itemstack) -> {
             return CauldronInteraction.fillBucket(iblockdata, world, blockposition, entityhuman, enumhand, itemstack, new ItemStack(Items.POWDER_SNOW_BUCKET), (iblockdata1) -> {
-                return ((Integer) iblockdata1.getValue(LayeredCauldronBlock.LEVEL)).intValue() == 3;
+                return iblockdata1.getValue(LayeredCauldronBlock.LEVEL).intValue() == 3;
             }, SoundEvents.BUCKET_FILL_POWDER_SNOW);
         });
         CauldronInteraction.addDefaultInteractions(CauldronInteraction.POWDER_SNOW);
@@ -288,8 +288,8 @@ public interface CauldronInteraction {
                 player.awardStat(Stats.USE_CAULDRON);
                 player.awardStat(Stats.ITEM_USED.get(item));
                 // world.setBlockAndUpdate(blockposition, Blocks.CAULDRON.defaultBlockState()); // CraftBukkit
-                world.playSound((Player) null, pos, soundEvent, SoundSource.BLOCKS, 1.0F, 1.0F);
-                world.gameEvent((Entity) null, GameEvent.FLUID_PICKUP, pos);
+                world.playSound(null, pos, soundEvent, SoundSource.BLOCKS, 1.0F, 1.0F);
+                world.gameEvent(null, GameEvent.FLUID_PICKUP, pos);
             }
 
             return InteractionResult.sidedSuccess(world.isClientSide);
@@ -309,8 +309,8 @@ public interface CauldronInteraction {
             player.awardStat(Stats.FILL_CAULDRON);
             player.awardStat(Stats.ITEM_USED.get(item));
             // world.setBlockAndUpdate(blockposition, iblockdata); // CraftBukkit
-            world.playSound((Player) null, pos, soundEvent, SoundSource.BLOCKS, 1.0F, 1.0F);
-            world.gameEvent((Entity) null, GameEvent.FLUID_PLACE, pos);
+            world.playSound(null, pos, soundEvent, SoundSource.BLOCKS, 1.0F, 1.0F);
+            world.gameEvent(null, GameEvent.FLUID_PLACE, pos);
         }
 
         return InteractionResult.sidedSuccess(world.isClientSide);
diff --git a/src/main/java/net/minecraft/core/dispenser/AbstractProjectileDispenseBehavior.java b/src/main/java/net/minecraft/core/dispenser/AbstractProjectileDispenseBehavior.java
index 309ad5a1da6b3a297d5526cd9247359ac5f49406..c72ab163406dd3b54f4a5f67ce4331e4b4ba27db 100644
--- a/src/main/java/net/minecraft/core/dispenser/AbstractProjectileDispenseBehavior.java
+++ b/src/main/java/net/minecraft/core/dispenser/AbstractProjectileDispenseBehavior.java
@@ -23,7 +23,7 @@ public abstract class AbstractProjectileDispenseBehavior extends DefaultDispense
     public ItemStack execute(BlockSource pointer, ItemStack stack) {
         ServerLevel worldserver = pointer.getLevel();
         Position iposition = DispenserBlock.getDispensePosition(pointer);
-        Direction enumdirection = (Direction) pointer.getBlockState().getValue(DispenserBlock.FACING);
+        Direction enumdirection = pointer.getBlockState().getValue(DispenserBlock.FACING);
         Projectile iprojectile = this.getProjectile(worldserver, iposition, stack);
 
         // CraftBukkit start
@@ -32,7 +32,7 @@ public abstract class AbstractProjectileDispenseBehavior extends DefaultDispense
         org.bukkit.block.Block block = worldserver.getWorld().getBlockAt(pointer.getPos().getX(), pointer.getPos().getY(), pointer.getPos().getZ());
         CraftItemStack craftItem = CraftItemStack.asCraftMirror(itemstack1);
 
-        BlockDispenseEvent event = new BlockDispenseEvent(block, craftItem.clone(), new org.bukkit.util.Vector((double) enumdirection.getStepX(), (double) ((float) enumdirection.getStepY() + 0.1F), (double) enumdirection.getStepZ()));
+        BlockDispenseEvent event = new BlockDispenseEvent(block, craftItem.clone(), new org.bukkit.util.Vector(enumdirection.getStepX(), (float) enumdirection.getStepY() + 0.1F, (double) enumdirection.getStepZ()));
         if (!DispenserBlock.eventFired) {
             worldserver.getCraftServer().getPluginManager().callEvent(event);
         }
@@ -47,7 +47,7 @@ public abstract class AbstractProjectileDispenseBehavior extends DefaultDispense
             shrink = false; // Paper - shrink below
             // Chain to handler for new item
             ItemStack eventStack = CraftItemStack.asNMSCopy(event.getItem());
-            DispenseItemBehavior idispensebehavior = (DispenseItemBehavior) DispenserBlock.DISPENSER_REGISTRY.get(eventStack.getItem());
+            DispenseItemBehavior idispensebehavior = DispenserBlock.DISPENSER_REGISTRY.get(eventStack.getItem());
             if (idispensebehavior != DispenseItemBehavior.NOOP && idispensebehavior != this) {
                 idispensebehavior.dispense(pointer, eventStack);
                 return stack;
@@ -55,7 +55,7 @@ public abstract class AbstractProjectileDispenseBehavior extends DefaultDispense
         }
 
         iprojectile.shoot(event.getVelocity().getX(), event.getVelocity().getY(), event.getVelocity().getZ(), this.getPower(), this.getUncertainty());
-        ((Entity) iprojectile).projectileSource = new org.bukkit.craftbukkit.projectiles.CraftBlockProjectileSource((DispenserBlockEntity) pointer.getEntity());
+        iprojectile.projectileSource = new org.bukkit.craftbukkit.projectiles.CraftBlockProjectileSource(pointer.getEntity());
         // CraftBukkit end
         worldserver.addFreshEntity(iprojectile);
         if (shrink) stack.shrink(1); // Paper - actually handle here
diff --git a/src/main/java/net/minecraft/core/dispenser/BoatDispenseItemBehavior.java b/src/main/java/net/minecraft/core/dispenser/BoatDispenseItemBehavior.java
index 958134519befadc27a5b647caf64acf272ee2db4..a5288d00a341cdc86151f4366f0e722176850aa6 100644
--- a/src/main/java/net/minecraft/core/dispenser/BoatDispenseItemBehavior.java
+++ b/src/main/java/net/minecraft/core/dispenser/BoatDispenseItemBehavior.java
@@ -33,7 +33,7 @@ public class BoatDispenseItemBehavior extends DefaultDispenseItemBehavior {
 
     @Override
     public ItemStack execute(BlockSource pointer, ItemStack stack) {
-        Direction enumdirection = (Direction) pointer.getBlockState().getValue(DispenserBlock.FACING);
+        Direction enumdirection = pointer.getBlockState().getValue(DispenserBlock.FACING);
         ServerLevel worldserver = pointer.getLevel();
         double d0 = pointer.x() + (double) ((float) enumdirection.getStepX() * 1.125F);
         double d1 = pointer.y() + (double) ((float) enumdirection.getStepY() * 1.125F);
@@ -72,7 +72,7 @@ public class BoatDispenseItemBehavior extends DefaultDispenseItemBehavior {
             shrink = false; // Paper - shrink below
             // Chain to handler for new item
             ItemStack eventStack = CraftItemStack.asNMSCopy(event.getItem());
-            DispenseItemBehavior idispensebehavior = (DispenseItemBehavior) DispenserBlock.DISPENSER_REGISTRY.get(eventStack.getItem());
+            DispenseItemBehavior idispensebehavior = DispenserBlock.DISPENSER_REGISTRY.get(eventStack.getItem());
             if (idispensebehavior != DispenseItemBehavior.NOOP && idispensebehavior != this) {
                 idispensebehavior.dispense(pointer, eventStack);
                 return stack;
diff --git a/src/main/java/net/minecraft/core/dispenser/DefaultDispenseItemBehavior.java b/src/main/java/net/minecraft/core/dispenser/DefaultDispenseItemBehavior.java
index 1e6ba6d9cceda1d4867b183c3dbc03d317ed287f..9a5f3d605cd71a3f907fc962bf5bab4d8eb1155c 100644
--- a/src/main/java/net/minecraft/core/dispenser/DefaultDispenseItemBehavior.java
+++ b/src/main/java/net/minecraft/core/dispenser/DefaultDispenseItemBehavior.java
@@ -88,7 +88,7 @@ public class DefaultDispenseItemBehavior implements DispenseItemBehavior {
         if (!dropper && !event.getItem().getType().equals(craftItem.getType())) {
             // Chain to handler for new item
             ItemStack eventStack = CraftItemStack.asNMSCopy(event.getItem());
-            DispenseItemBehavior idispensebehavior = (DispenseItemBehavior) DispenserBlock.DISPENSER_REGISTRY.get(eventStack.getItem());
+            DispenseItemBehavior idispensebehavior = DispenserBlock.DISPENSER_REGISTRY.get(eventStack.getItem());
             if (idispensebehavior != DispenseItemBehavior.NOOP && idispensebehavior.getClass() != DefaultDispenseItemBehavior.class) {
                 idispensebehavior.dispense(isourceblock, eventStack);
             } else {
diff --git a/src/main/java/net/minecraft/core/dispenser/DispenseItemBehavior.java b/src/main/java/net/minecraft/core/dispenser/DispenseItemBehavior.java
index eae025dc41bc1f2f31a3efed7160f7ce5830f9c5..23367aa3d26ba3640b9561bb2b77a02fbc53a7b4 100644
--- a/src/main/java/net/minecraft/core/dispenser/DispenseItemBehavior.java
+++ b/src/main/java/net/minecraft/core/dispenser/DispenseItemBehavior.java
@@ -131,7 +131,7 @@ public interface DispenseItemBehavior {
         DispenserBlock.registerBehavior(Items.EGG, new AbstractProjectileDispenseBehavior() {
             @Override
             protected Projectile getProjectile(Level world, Position position, ItemStack stack) {
-                return (Projectile) Util.make(new ThrownEgg(world, position.x(), position.y(), position.z()), (entityegg) -> {
+                return Util.make(new ThrownEgg(world, position.x(), position.y(), position.z()), (entityegg) -> {
                     entityegg.setItem(stack);
                 });
             }
@@ -139,7 +139,7 @@ public interface DispenseItemBehavior {
         DispenserBlock.registerBehavior(Items.SNOWBALL, new AbstractProjectileDispenseBehavior() {
             @Override
             protected Projectile getProjectile(Level world, Position position, ItemStack stack) {
-                return (Projectile) Util.make(new Snowball(world, position.x(), position.y(), position.z()), (entitysnowball) -> {
+                return Util.make(new Snowball(world, position.x(), position.y(), position.z()), (entitysnowball) -> {
                     entitysnowball.setItem(stack);
                 });
             }
@@ -147,7 +147,7 @@ public interface DispenseItemBehavior {
         DispenserBlock.registerBehavior(Items.EXPERIENCE_BOTTLE, new AbstractProjectileDispenseBehavior() {
             @Override
             protected Projectile getProjectile(Level world, Position position, ItemStack stack) {
-                return (Projectile) Util.make(new ThrownExperienceBottle(world, position.x(), position.y(), position.z()), (entitythrownexpbottle) -> {
+                return Util.make(new ThrownExperienceBottle(world, position.x(), position.y(), position.z()), (entitythrownexpbottle) -> {
                     entitythrownexpbottle.setItem(stack);
                 });
             }
@@ -168,7 +168,7 @@ public interface DispenseItemBehavior {
                 return (new AbstractProjectileDispenseBehavior() {
                     @Override
                     protected Projectile getProjectile(Level world, Position position, ItemStack stack) {
-                        return (Projectile) Util.make(new ThrownPotion(world, position.x(), position.y(), position.z()), (entitypotion) -> {
+                        return Util.make(new ThrownPotion(world, position.x(), position.y(), position.z()), (entitypotion) -> {
                             entitypotion.setItem(stack);
                         });
                     }
@@ -191,7 +191,7 @@ public interface DispenseItemBehavior {
                 return (new AbstractProjectileDispenseBehavior() {
                     @Override
                     protected Projectile getProjectile(Level world, Position position, ItemStack stack) {
-                        return (Projectile) Util.make(new ThrownPotion(world, position.x(), position.y(), position.z()), (entitypotion) -> {
+                        return Util.make(new ThrownPotion(world, position.x(), position.y(), position.z()), (entitypotion) -> {
                             entitypotion.setItem(stack);
                         });
                     }
@@ -211,7 +211,7 @@ public interface DispenseItemBehavior {
         DefaultDispenseItemBehavior dispensebehavioritem = new DefaultDispenseItemBehavior() {
             @Override
             public ItemStack execute(BlockSource pointer, ItemStack stack) {
-                Direction enumdirection = (Direction) pointer.getBlockState().getValue(DispenserBlock.FACING);
+                Direction enumdirection = pointer.getBlockState().getValue(DispenserBlock.FACING);
                 EntityType entitytypes = ((SpawnEggItem) stack.getItem()).getType(stack.getTag());
 
                 // CraftBukkit start
@@ -235,7 +235,7 @@ public interface DispenseItemBehavior {
                     shrink = false; // Paper - shrink below
                     // Chain to handler for new item
                     ItemStack eventStack = CraftItemStack.asNMSCopy(event.getItem());
-                    DispenseItemBehavior idispensebehavior = (DispenseItemBehavior) DispenserBlock.DISPENSER_REGISTRY.get(eventStack.getItem());
+                    DispenseItemBehavior idispensebehavior = DispenserBlock.DISPENSER_REGISTRY.get(eventStack.getItem());
                     if (idispensebehavior != DispenseItemBehavior.NOOP && idispensebehavior != this) {
                         idispensebehavior.dispense(pointer, eventStack);
                         return stack;
@@ -243,7 +243,7 @@ public interface DispenseItemBehavior {
                 }
 
                 try {
-                    entitytypes.spawn(pointer.getLevel(), stack, (Player) null, pointer.getPos().relative(enumdirection), MobSpawnType.DISPENSER, enumdirection != Direction.UP, false);
+                    entitytypes.spawn(pointer.getLevel(), stack, null, pointer.getPos().relative(enumdirection), MobSpawnType.DISPENSER, enumdirection != Direction.UP, false);
                 } catch (Exception exception) {
                     DispenseItemBehavior.LOGGER.error("Error while dispensing spawn egg from dispenser at {}", pointer.getPos(), exception); // CraftBukkit - decompile error
                     return ItemStack.EMPTY;
@@ -251,7 +251,7 @@ public interface DispenseItemBehavior {
 
                 if (shrink) stack.shrink(1); // Paper - actually handle here
                 // CraftBukkit end
-                pointer.getLevel().gameEvent((Entity) null, GameEvent.ENTITY_PLACE, pointer.getPos());
+                pointer.getLevel().gameEvent(null, GameEvent.ENTITY_PLACE, pointer.getPos());
                 return stack;
             }
         };
@@ -266,7 +266,7 @@ public interface DispenseItemBehavior {
         DispenserBlock.registerBehavior(Items.ARMOR_STAND, new DefaultDispenseItemBehavior() {
             @Override
             public ItemStack execute(BlockSource pointer, ItemStack stack) {
-                Direction enumdirection = (Direction) pointer.getBlockState().getValue(DispenserBlock.FACING);
+                Direction enumdirection = pointer.getBlockState().getValue(DispenserBlock.FACING);
                 BlockPos blockposition = pointer.getPos().relative(enumdirection);
                 ServerLevel worldserver = pointer.getLevel();
 
@@ -290,7 +290,7 @@ public interface DispenseItemBehavior {
                     shrink = false; // Paper - shrink below
                     // Chain to handler for new item
                     ItemStack eventStack = CraftItemStack.asNMSCopy(event.getItem());
-                    DispenseItemBehavior idispensebehavior = (DispenseItemBehavior) DispenserBlock.DISPENSER_REGISTRY.get(eventStack.getItem());
+                    DispenseItemBehavior idispensebehavior = DispenserBlock.DISPENSER_REGISTRY.get(eventStack.getItem());
                     if (idispensebehavior != DispenseItemBehavior.NOOP && idispensebehavior != this) {
                         idispensebehavior.dispense(pointer, eventStack);
                         return stack;
@@ -298,9 +298,9 @@ public interface DispenseItemBehavior {
                 }
                 // CraftBukkit end
 
-                ArmorStand entityarmorstand = new ArmorStand(worldserver, (double) blockposition.getX() + 0.5D, (double) blockposition.getY(), (double) blockposition.getZ() + 0.5D);
+                ArmorStand entityarmorstand = new ArmorStand(worldserver, (double) blockposition.getX() + 0.5D, blockposition.getY(), (double) blockposition.getZ() + 0.5D);
 
-                EntityType.updateCustomEntityTag(worldserver, (Player) null, entityarmorstand, stack.getTag());
+                EntityType.updateCustomEntityTag(worldserver, null, entityarmorstand, stack.getTag());
                 entityarmorstand.setYRot(enumdirection.toYRot());
                 worldserver.addFreshEntity(entityarmorstand);
                 if (shrink) stack.shrink(1); // Paper - actually handle here
@@ -310,7 +310,7 @@ public interface DispenseItemBehavior {
         DispenserBlock.registerBehavior(Items.SADDLE, new OptionalDispenseItemBehavior() {
             @Override
             public ItemStack execute(BlockSource pointer, ItemStack stack) {
-                BlockPos blockposition = pointer.getPos().relative((Direction) pointer.getBlockState().getValue(DispenserBlock.FACING));
+                BlockPos blockposition = pointer.getPos().relative(pointer.getBlockState().getValue(DispenserBlock.FACING));
                 List<LivingEntity> list = pointer.getLevel().getEntitiesOfClass(LivingEntity.class, new AABB(blockposition), (entityliving) -> {
                     if (!(entityliving instanceof Saddleable)) {
                         return false;
@@ -343,7 +343,7 @@ public interface DispenseItemBehavior {
                         shrink = false; // Paper - shrink below
                         // Chain to handler for new item
                         ItemStack eventStack = CraftItemStack.asNMSCopy(event.getItem());
-                        DispenseItemBehavior idispensebehavior = (DispenseItemBehavior) DispenserBlock.DISPENSER_REGISTRY.get(eventStack.getItem());
+                        DispenseItemBehavior idispensebehavior = DispenserBlock.DISPENSER_REGISTRY.get(eventStack.getItem());
                         if (idispensebehavior != DispenseItemBehavior.NOOP && idispensebehavior != ArmorItem.DISPENSE_ITEM_BEHAVIOR) {
                             idispensebehavior.dispense(pointer, eventStack);
                             return stack;
@@ -362,7 +362,7 @@ public interface DispenseItemBehavior {
         OptionalDispenseItemBehavior dispensebehaviormaybe = new OptionalDispenseItemBehavior() {
             @Override
             protected ItemStack execute(BlockSource pointer, ItemStack stack) {
-                BlockPos blockposition = pointer.getPos().relative((Direction) pointer.getBlockState().getValue(DispenserBlock.FACING));
+                BlockPos blockposition = pointer.getPos().relative(pointer.getBlockState().getValue(DispenserBlock.FACING));
                 List<AbstractHorse> list = pointer.getLevel().getEntitiesOfClass(AbstractHorse.class, new AABB(blockposition), (entityhorseabstract) -> {
                     return entityhorseabstract.isAlive() && entityhorseabstract.canWearArmor();
                 });
@@ -399,7 +399,7 @@ public interface DispenseItemBehavior {
                     shrink = false; // Paper - shrink below
                     // Chain to handler for new item
                     ItemStack eventStack = CraftItemStack.asNMSCopy(event.getItem());
-                    DispenseItemBehavior idispensebehavior = (DispenseItemBehavior) DispenserBlock.DISPENSER_REGISTRY.get(eventStack.getItem());
+                    DispenseItemBehavior idispensebehavior = DispenserBlock.DISPENSER_REGISTRY.get(eventStack.getItem());
                     if (idispensebehavior != DispenseItemBehavior.NOOP && idispensebehavior != ArmorItem.DISPENSE_ITEM_BEHAVIOR) {
                         idispensebehavior.dispense(pointer, eventStack);
                         return stack;
@@ -437,7 +437,7 @@ public interface DispenseItemBehavior {
         DispenserBlock.registerBehavior(Items.CHEST, new OptionalDispenseItemBehavior() {
             @Override
             public ItemStack execute(BlockSource pointer, ItemStack stack) {
-                BlockPos blockposition = pointer.getPos().relative((Direction) pointer.getBlockState().getValue(DispenserBlock.FACING));
+                BlockPos blockposition = pointer.getPos().relative(pointer.getBlockState().getValue(DispenserBlock.FACING));
                 List<AbstractChestedHorse> list = pointer.getLevel().getEntitiesOfClass(AbstractChestedHorse.class, new AABB(blockposition), (entityhorsechestedabstract) -> {
                     return entityhorsechestedabstract.isAlive() && !entityhorsechestedabstract.hasChest();
                 });
@@ -473,7 +473,7 @@ public interface DispenseItemBehavior {
                     shrink = false; // Paper - shrink below (this was actually missing and should be here, added it commented out just for less confusion)
                     // Chain to handler for new item
                     ItemStack eventStack = CraftItemStack.asNMSCopy(event.getItem());
-                    DispenseItemBehavior idispensebehavior = (DispenseItemBehavior) DispenserBlock.DISPENSER_REGISTRY.get(eventStack.getItem());
+                    DispenseItemBehavior idispensebehavior = DispenserBlock.DISPENSER_REGISTRY.get(eventStack.getItem());
                     if (idispensebehavior != DispenseItemBehavior.NOOP && idispensebehavior != ArmorItem.DISPENSE_ITEM_BEHAVIOR) {
                         idispensebehavior.dispense(pointer, eventStack);
                         return stack;
@@ -490,7 +490,7 @@ public interface DispenseItemBehavior {
         DispenserBlock.registerBehavior(Items.FIREWORK_ROCKET, new DefaultDispenseItemBehavior() {
             @Override
             public ItemStack execute(BlockSource pointer, ItemStack stack) {
-                Direction enumdirection = (Direction) pointer.getBlockState().getValue(DispenserBlock.FACING);
+                Direction enumdirection = pointer.getBlockState().getValue(DispenserBlock.FACING);
                 // CraftBukkit start
                 ServerLevel worldserver = pointer.getLevel();
                 ItemStack itemstack1 = stack.copyWithCount(1); // Paper - shrink below and single item in event
@@ -512,7 +512,7 @@ public interface DispenseItemBehavior {
                     shrink = false; // Paper - shrink below
                     // Chain to handler for new item
                     ItemStack eventStack = CraftItemStack.asNMSCopy(event.getItem());
-                    DispenseItemBehavior idispensebehavior = (DispenseItemBehavior) DispenserBlock.DISPENSER_REGISTRY.get(eventStack.getItem());
+                    DispenseItemBehavior idispensebehavior = DispenserBlock.DISPENSER_REGISTRY.get(eventStack.getItem());
                     if (idispensebehavior != DispenseItemBehavior.NOOP && idispensebehavior != this) {
                         idispensebehavior.dispense(pointer, eventStack);
                         return stack;
@@ -524,7 +524,7 @@ public interface DispenseItemBehavior {
                 entityfireworks.projectileSource = new org.bukkit.craftbukkit.projectiles.CraftBlockProjectileSource(pointer.getEntity()); // Paper - track projectile source for fireworks
 
                 DispenseItemBehavior.setEntityPokingOutOfBlock(pointer, entityfireworks, enumdirection);
-                entityfireworks.shoot((double) enumdirection.getStepX(), (double) enumdirection.getStepY(), (double) enumdirection.getStepZ(), 0.5F, 1.0F);
+                entityfireworks.shoot(enumdirection.getStepX(), enumdirection.getStepY(), enumdirection.getStepZ(), 0.5F, 1.0F);
                 pointer.getLevel().addFreshEntity(entityfireworks);
                 if (shrink) stack.shrink(1); // Paper - actually handle here
                 // CraftBukkit end
@@ -539,16 +539,16 @@ public interface DispenseItemBehavior {
         DispenserBlock.registerBehavior(Items.FIRE_CHARGE, new DefaultDispenseItemBehavior() {
             @Override
             public ItemStack execute(BlockSource pointer, ItemStack stack) {
-                Direction enumdirection = (Direction) pointer.getBlockState().getValue(DispenserBlock.FACING);
+                Direction enumdirection = pointer.getBlockState().getValue(DispenserBlock.FACING);
                 Position iposition = DispenserBlock.getDispensePosition(pointer);
                 double d0 = iposition.x() + (double) ((float) enumdirection.getStepX() * 0.3F);
                 double d1 = iposition.y() + (double) ((float) enumdirection.getStepY() * 0.3F);
                 double d2 = iposition.z() + (double) ((float) enumdirection.getStepZ() * 0.3F);
                 ServerLevel worldserver = pointer.getLevel();
                 RandomSource randomsource = worldserver.random;
-                double d3 = randomsource.triangle((double) enumdirection.getStepX(), 0.11485000000000001D);
-                double d4 = randomsource.triangle((double) enumdirection.getStepY(), 0.11485000000000001D);
-                double d5 = randomsource.triangle((double) enumdirection.getStepZ(), 0.11485000000000001D);
+                double d3 = randomsource.triangle(enumdirection.getStepX(), 0.11485000000000001D);
+                double d4 = randomsource.triangle(enumdirection.getStepY(), 0.11485000000000001D);
+                double d5 = randomsource.triangle(enumdirection.getStepZ(), 0.11485000000000001D);
 
                 // CraftBukkit start
                 ItemStack itemstack1 = stack.copyWithCount(1); // Paper - shrink below and single item in event
@@ -570,7 +570,7 @@ public interface DispenseItemBehavior {
                     shrink = false; // Paper - shrink at end
                     // Chain to handler for new item
                     ItemStack eventStack = CraftItemStack.asNMSCopy(event.getItem());
-                    DispenseItemBehavior idispensebehavior = (DispenseItemBehavior) DispenserBlock.DISPENSER_REGISTRY.get(eventStack.getItem());
+                    DispenseItemBehavior idispensebehavior = DispenserBlock.DISPENSER_REGISTRY.get(eventStack.getItem());
                     if (idispensebehavior != DispenseItemBehavior.NOOP && idispensebehavior != this) {
                         idispensebehavior.dispense(pointer, eventStack);
                         return stack;
@@ -579,7 +579,7 @@ public interface DispenseItemBehavior {
 
                 SmallFireball entitysmallfireball = new SmallFireball(worldserver, d0, d1, d2, event.getVelocity().getX(), event.getVelocity().getY(), event.getVelocity().getZ());
                 entitysmallfireball.setItem(itemstack1);
-                entitysmallfireball.projectileSource = new org.bukkit.craftbukkit.projectiles.CraftBlockProjectileSource((DispenserBlockEntity) pointer.getEntity());
+                entitysmallfireball.projectileSource = new org.bukkit.craftbukkit.projectiles.CraftBlockProjectileSource(pointer.getEntity());
 
                 worldserver.addFreshEntity(entitysmallfireball);
                 if (shrink) stack.shrink(1); // Paper - actually handle here
@@ -614,7 +614,7 @@ public interface DispenseItemBehavior {
             @Override
             public ItemStack execute(BlockSource pointer, ItemStack stack) {
                 DispensibleContainerItem dispensiblecontaineritem = (DispensibleContainerItem) stack.getItem();
-                BlockPos blockposition = pointer.getPos().relative((Direction) pointer.getBlockState().getValue(DispenserBlock.FACING));
+                BlockPos blockposition = pointer.getPos().relative(pointer.getBlockState().getValue(DispenserBlock.FACING));
                 ServerLevel worldserver = pointer.getLevel();
 
                 // CraftBukkit start
@@ -639,7 +639,7 @@ public interface DispenseItemBehavior {
                     if (!event.getItem().equals(craftItem)) {
                         // Chain to handler for new item
                         ItemStack eventStack = CraftItemStack.asNMSCopy(event.getItem());
-                        DispenseItemBehavior idispensebehavior = (DispenseItemBehavior) DispenserBlock.DISPENSER_REGISTRY.get(eventStack.getItem());
+                        DispenseItemBehavior idispensebehavior = DispenserBlock.DISPENSER_REGISTRY.get(eventStack.getItem());
                         if (idispensebehavior != DispenseItemBehavior.NOOP && idispensebehavior != this) {
                             idispensebehavior.dispense(pointer, eventStack);
                             return stack;
@@ -650,8 +650,8 @@ public interface DispenseItemBehavior {
                 }
                 // CraftBukkit end
 
-                if (dispensiblecontaineritem.emptyContents((Player) null, worldserver, blockposition, (BlockHitResult) null)) {
-                    dispensiblecontaineritem.checkExtraContent((Player) null, worldserver, stack, blockposition);
+                if (dispensiblecontaineritem.emptyContents(null, worldserver, blockposition, null)) {
+                    dispensiblecontaineritem.checkExtraContent(null, worldserver, stack, blockposition);
                     // CraftBukkit start - Handle stacked buckets
                     Item item = Items.BUCKET;
                     stack.shrink(1);
@@ -683,7 +683,7 @@ public interface DispenseItemBehavior {
             @Override
             public ItemStack execute(BlockSource pointer, ItemStack stack) {
                 ServerLevel worldserver = pointer.getLevel();
-                BlockPos blockposition = pointer.getPos().relative((Direction) pointer.getBlockState().getValue(DispenserBlock.FACING));
+                BlockPos blockposition = pointer.getPos().relative(pointer.getBlockState().getValue(DispenserBlock.FACING));
                 BlockState iblockdata = worldserver.getBlockState(blockposition);
                 Block block = iblockdata.getBlock();
 
@@ -693,7 +693,7 @@ public interface DispenseItemBehavior {
                     if (itemstack1.isEmpty()) {
                         return super.execute(pointer, stack);
                     } else {
-                        worldserver.gameEvent((Entity) null, GameEvent.FLUID_PICKUP, blockposition);
+                        worldserver.gameEvent(null, GameEvent.FLUID_PICKUP, blockposition);
                         Item item = itemstack1.getItem();
 
                         // CraftBukkit start
@@ -712,7 +712,7 @@ public interface DispenseItemBehavior {
                         if (!event.getItem().equals(craftItem)) {
                             // Chain to handler for new item
                             ItemStack eventStack = CraftItemStack.asNMSCopy(event.getItem());
-                            DispenseItemBehavior idispensebehavior = (DispenseItemBehavior) DispenserBlock.DISPENSER_REGISTRY.get(eventStack.getItem());
+                            DispenseItemBehavior idispensebehavior = DispenserBlock.DISPENSER_REGISTRY.get(eventStack.getItem());
                             if (idispensebehavior != DispenseItemBehavior.NOOP && idispensebehavior != this) {
                                 idispensebehavior.dispense(pointer, eventStack);
                                 return stack;
@@ -759,7 +759,7 @@ public interface DispenseItemBehavior {
                 if (!event.getItem().equals(craftItem)) {
                     // Chain to handler for new item
                     ItemStack eventStack = CraftItemStack.asNMSCopy(event.getItem());
-                    DispenseItemBehavior idispensebehavior = (DispenseItemBehavior) DispenserBlock.DISPENSER_REGISTRY.get(eventStack.getItem());
+                    DispenseItemBehavior idispensebehavior = DispenserBlock.DISPENSER_REGISTRY.get(eventStack.getItem());
                     if (idispensebehavior != DispenseItemBehavior.NOOP && idispensebehavior != this) {
                         idispensebehavior.dispense(pointer, eventStack);
                         return stack;
@@ -768,7 +768,7 @@ public interface DispenseItemBehavior {
                 // CraftBukkit end
 
                 this.setSuccess(true);
-                Direction enumdirection = (Direction) pointer.getBlockState().getValue(DispenserBlock.FACING);
+                Direction enumdirection = pointer.getBlockState().getValue(DispenserBlock.FACING);
                 BlockPos blockposition = pointer.getPos().relative(enumdirection);
                 BlockState iblockdata = worldserver.getBlockState(blockposition);
 
@@ -776,7 +776,7 @@ public interface DispenseItemBehavior {
                     // CraftBukkit start - Ignition by dispensing flint and steel
                     if (!org.bukkit.craftbukkit.event.CraftEventFactory.callBlockIgniteEvent(worldserver, blockposition, pointer.getPos()).isCancelled()) {
                         worldserver.setBlockAndUpdate(blockposition, BaseFireBlock.getState(worldserver, blockposition));
-                        worldserver.gameEvent((Entity) null, GameEvent.BLOCK_PLACE, blockposition);
+                        worldserver.gameEvent(null, GameEvent.BLOCK_PLACE, blockposition);
                     }
                     // CraftBukkit end
                 } else if (!CampfireBlock.canLight(iblockdata) && !CandleBlock.canLight(iblockdata) && !CandleCakeBlock.canLight(iblockdata)) {
@@ -787,11 +787,11 @@ public interface DispenseItemBehavior {
                         this.setSuccess(false);
                     }
                 } else {
-                    worldserver.setBlockAndUpdate(blockposition, (BlockState) iblockdata.setValue(BlockStateProperties.LIT, Boolean.TRUE));
-                    worldserver.gameEvent((Entity) null, GameEvent.BLOCK_CHANGE, blockposition);
+                    worldserver.setBlockAndUpdate(blockposition, iblockdata.setValue(BlockStateProperties.LIT, Boolean.TRUE));
+                    worldserver.gameEvent(null, GameEvent.BLOCK_CHANGE, blockposition);
                 }
 
-                if (this.isSuccess() && stack.hurt(1, worldserver.random, (ServerPlayer) null)) {
+                if (this.isSuccess() && stack.hurt(1, worldserver.random, null)) {
                     stack.setCount(0);
                 }
 
@@ -803,7 +803,7 @@ public interface DispenseItemBehavior {
             protected ItemStack execute(BlockSource pointer, ItemStack stack) {
                 this.setSuccess(true);
                 ServerLevel worldserver = pointer.getLevel();
-                BlockPos blockposition = pointer.getPos().relative((Direction) pointer.getBlockState().getValue(DispenserBlock.FACING));
+                BlockPos blockposition = pointer.getPos().relative(pointer.getBlockState().getValue(DispenserBlock.FACING));
                 // CraftBukkit start
                 org.bukkit.block.Block block = worldserver.getWorld().getBlockAt(pointer.getPos().getX(), pointer.getPos().getY(), pointer.getPos().getZ());
                 CraftItemStack craftItem = CraftItemStack.asCraftMirror(stack.copyWithCount(1)); // Paper - single item in event
@@ -820,7 +820,7 @@ public interface DispenseItemBehavior {
                 if (!event.getItem().equals(craftItem)) {
                     // Chain to handler for new item
                     ItemStack eventStack = CraftItemStack.asNMSCopy(event.getItem());
-                    DispenseItemBehavior idispensebehavior = (DispenseItemBehavior) DispenserBlock.DISPENSER_REGISTRY.get(eventStack.getItem());
+                    DispenseItemBehavior idispensebehavior = DispenserBlock.DISPENSER_REGISTRY.get(eventStack.getItem());
                     if (idispensebehavior != DispenseItemBehavior.NOOP && idispensebehavior != this) {
                         idispensebehavior.dispense(pointer, eventStack);
                         return stack;
@@ -830,7 +830,7 @@ public interface DispenseItemBehavior {
                 worldserver.captureTreeGeneration = true;
                 // CraftBukkit end
 
-                if (!BoneMealItem.growCrop(stack, worldserver, blockposition) && !BoneMealItem.growWaterPlant(stack, worldserver, blockposition, (Direction) null)) {
+                if (!BoneMealItem.growCrop(stack, worldserver, blockposition) && !BoneMealItem.growWaterPlant(stack, worldserver, blockposition, null)) {
                     this.setSuccess(false);
                 } else if (!worldserver.isClientSide) {
                     worldserver.levelEvent(1505, blockposition, 0);
@@ -868,7 +868,7 @@ public interface DispenseItemBehavior {
             @Override
             protected ItemStack execute(BlockSource pointer, ItemStack stack) {
                 ServerLevel worldserver = pointer.getLevel();
-                BlockPos blockposition = pointer.getPos().relative((Direction) pointer.getBlockState().getValue(DispenserBlock.FACING));
+                BlockPos blockposition = pointer.getPos().relative(pointer.getBlockState().getValue(DispenserBlock.FACING));
                 // CraftBukkit start
                 // EntityTNTPrimed entitytntprimed = new EntityTNTPrimed(worldserver, (double) blockposition.getX() + 0.5D, (double) blockposition.getY(), (double) blockposition.getZ() + 0.5D, (EntityLiving) null);
 
@@ -876,7 +876,7 @@ public interface DispenseItemBehavior {
                 org.bukkit.block.Block block = worldserver.getWorld().getBlockAt(pointer.getPos().getX(), pointer.getPos().getY(), pointer.getPos().getZ());
                 CraftItemStack craftItem = CraftItemStack.asCraftMirror(itemstack1);
 
-                BlockDispenseEvent event = new BlockDispenseEvent(block, craftItem.clone(), new org.bukkit.util.Vector((double) blockposition.getX() + 0.5D, (double) blockposition.getY(), (double) blockposition.getZ() + 0.5D));
+                BlockDispenseEvent event = new BlockDispenseEvent(block, craftItem.clone(), new org.bukkit.util.Vector((double) blockposition.getX() + 0.5D, blockposition.getY(), (double) blockposition.getZ() + 0.5D));
                 if (!DispenserBlock.eventFired) {
                    worldserver.getCraftServer().getPluginManager().callEvent(event);
                 }
@@ -891,19 +891,19 @@ public interface DispenseItemBehavior {
                     shrink = false; // Paper - shrink below
                     // Chain to handler for new item
                     ItemStack eventStack = CraftItemStack.asNMSCopy(event.getItem());
-                    DispenseItemBehavior idispensebehavior = (DispenseItemBehavior) DispenserBlock.DISPENSER_REGISTRY.get(eventStack.getItem());
+                    DispenseItemBehavior idispensebehavior = DispenserBlock.DISPENSER_REGISTRY.get(eventStack.getItem());
                     if (idispensebehavior != DispenseItemBehavior.NOOP && idispensebehavior != this) {
                         idispensebehavior.dispense(pointer, eventStack);
                         return stack;
                     }
                 }
 
-                PrimedTnt entitytntprimed = new PrimedTnt(worldserver, event.getVelocity().getX(), event.getVelocity().getY(), event.getVelocity().getZ(), (LivingEntity) null);
+                PrimedTnt entitytntprimed = new PrimedTnt(worldserver, event.getVelocity().getX(), event.getVelocity().getY(), event.getVelocity().getZ(), null);
                 // CraftBukkit end
 
                 worldserver.addFreshEntity(entitytntprimed);
-                worldserver.playSound((Player) null, entitytntprimed.getX(), entitytntprimed.getY(), entitytntprimed.getZ(), SoundEvents.TNT_PRIMED, SoundSource.BLOCKS, 1.0F, 1.0F);
-                worldserver.gameEvent((Entity) null, GameEvent.ENTITY_PLACE, blockposition);
+                worldserver.playSound(null, entitytntprimed.getX(), entitytntprimed.getY(), entitytntprimed.getZ(), SoundEvents.TNT_PRIMED, SoundSource.BLOCKS, 1.0F, 1.0F);
+                worldserver.gameEvent(null, GameEvent.ENTITY_PLACE, blockposition);
                 if (shrink) stack.shrink(1); // Paper - actually handle here
                 return stack;
             }
@@ -926,7 +926,7 @@ public interface DispenseItemBehavior {
             @Override
             protected ItemStack execute(BlockSource pointer, ItemStack stack) {
                 ServerLevel worldserver = pointer.getLevel();
-                Direction enumdirection = (Direction) pointer.getBlockState().getValue(DispenserBlock.FACING);
+                Direction enumdirection = pointer.getBlockState().getValue(DispenserBlock.FACING);
                 BlockPos blockposition = pointer.getPos().relative(enumdirection);
 
                 // CraftBukkit start
@@ -945,7 +945,7 @@ public interface DispenseItemBehavior {
                 if (!event.getItem().equals(craftItem)) {
                     // Chain to handler for new item
                     ItemStack eventStack = CraftItemStack.asNMSCopy(event.getItem());
-                    DispenseItemBehavior idispensebehavior = (DispenseItemBehavior) DispenserBlock.DISPENSER_REGISTRY.get(eventStack.getItem());
+                    DispenseItemBehavior idispensebehavior = DispenserBlock.DISPENSER_REGISTRY.get(eventStack.getItem());
                     if (idispensebehavior != DispenseItemBehavior.NOOP && idispensebehavior != this) {
                         idispensebehavior.dispense(pointer, eventStack);
                         return stack;
@@ -954,8 +954,8 @@ public interface DispenseItemBehavior {
                 // CraftBukkit end
 
                 if (worldserver.isEmptyBlock(blockposition) && WitherSkullBlock.canSpawnMob(worldserver, blockposition, stack)) {
-                    worldserver.setBlock(blockposition, (BlockState) Blocks.WITHER_SKELETON_SKULL.defaultBlockState().setValue(SkullBlock.ROTATION, RotationSegment.convertToSegment(enumdirection)), 3);
-                    worldserver.gameEvent((Entity) null, GameEvent.BLOCK_PLACE, blockposition);
+                    worldserver.setBlock(blockposition, Blocks.WITHER_SKELETON_SKULL.defaultBlockState().setValue(SkullBlock.ROTATION, RotationSegment.convertToSegment(enumdirection)), 3);
+                    worldserver.gameEvent(null, GameEvent.BLOCK_PLACE, blockposition);
                     BlockEntity tileentity = worldserver.getBlockEntity(blockposition);
 
                     if (tileentity instanceof SkullBlockEntity) {
@@ -975,7 +975,7 @@ public interface DispenseItemBehavior {
             @Override
             protected ItemStack execute(BlockSource pointer, ItemStack stack) {
                 ServerLevel worldserver = pointer.getLevel();
-                BlockPos blockposition = pointer.getPos().relative((Direction) pointer.getBlockState().getValue(DispenserBlock.FACING));
+                BlockPos blockposition = pointer.getPos().relative(pointer.getBlockState().getValue(DispenserBlock.FACING));
                 CarvedPumpkinBlock blockpumpkincarved = (CarvedPumpkinBlock) Blocks.CARVED_PUMPKIN;
 
                 // CraftBukkit start
@@ -994,7 +994,7 @@ public interface DispenseItemBehavior {
                 if (!event.getItem().equals(craftItem)) {
                     // Chain to handler for new item
                     ItemStack eventStack = CraftItemStack.asNMSCopy(event.getItem());
-                    DispenseItemBehavior idispensebehavior = (DispenseItemBehavior) DispenserBlock.DISPENSER_REGISTRY.get(eventStack.getItem());
+                    DispenseItemBehavior idispensebehavior = DispenserBlock.DISPENSER_REGISTRY.get(eventStack.getItem());
                     if (idispensebehavior != DispenseItemBehavior.NOOP && idispensebehavior != this) {
                         idispensebehavior.dispense(pointer, eventStack);
                         return stack;
@@ -1005,7 +1005,7 @@ public interface DispenseItemBehavior {
                 if (worldserver.isEmptyBlock(blockposition) && blockpumpkincarved.canSpawnGolem(worldserver, blockposition)) {
                     if (!worldserver.isClientSide) {
                         worldserver.setBlock(blockposition, blockpumpkincarved.defaultBlockState(), 3);
-                        worldserver.gameEvent((Entity) null, GameEvent.BLOCK_PLACE, blockposition);
+                        worldserver.gameEvent(null, GameEvent.BLOCK_PLACE, blockposition);
                     }
 
                     stack.shrink(1);
@@ -1033,7 +1033,7 @@ public interface DispenseItemBehavior {
             private ItemStack takeLiquid(BlockSource pointer, ItemStack emptyBottleStack, ItemStack filledBottleStack) {
                 emptyBottleStack.shrink(1);
                 if (emptyBottleStack.isEmpty()) {
-                    pointer.getLevel().gameEvent((Entity) null, GameEvent.FLUID_PICKUP, pointer.getPos());
+                    pointer.getLevel().gameEvent(null, GameEvent.FLUID_PICKUP, pointer.getPos());
                     return filledBottleStack.copy();
                 } else {
                     if (((DispenserBlockEntity) pointer.getEntity()).addItem(filledBottleStack.copy()) < 0) {
@@ -1048,7 +1048,7 @@ public interface DispenseItemBehavior {
             public ItemStack execute(BlockSource pointer, ItemStack stack) {
                 this.setSuccess(false);
                 ServerLevel worldserver = pointer.getLevel();
-                BlockPos blockposition = pointer.getPos().relative((Direction) pointer.getBlockState().getValue(DispenserBlock.FACING));
+                BlockPos blockposition = pointer.getPos().relative(pointer.getBlockState().getValue(DispenserBlock.FACING));
                 BlockState iblockdata = worldserver.getBlockState(blockposition);
 
                 // CraftBukkit start
@@ -1067,7 +1067,7 @@ public interface DispenseItemBehavior {
                 if (!event.getItem().equals(craftItem)) {
                     // Chain to handler for new item
                     ItemStack eventStack = CraftItemStack.asNMSCopy(event.getItem());
-                    DispenseItemBehavior idispensebehavior = (DispenseItemBehavior) DispenserBlock.DISPENSER_REGISTRY.get(eventStack.getItem());
+                    DispenseItemBehavior idispensebehavior = DispenserBlock.DISPENSER_REGISTRY.get(eventStack.getItem());
                     if (idispensebehavior != DispenseItemBehavior.NOOP && idispensebehavior != this) {
                         idispensebehavior.dispense(pointer, eventStack);
                         return stack;
@@ -1077,8 +1077,8 @@ public interface DispenseItemBehavior {
 
                 if (iblockdata.is(BlockTags.BEEHIVES, (blockbase_blockdata) -> {
                     return blockbase_blockdata.hasProperty(BeehiveBlock.HONEY_LEVEL) && blockbase_blockdata.getBlock() instanceof BeehiveBlock;
-                }) && ((Integer) iblockdata.getValue(BeehiveBlock.HONEY_LEVEL)).intValue() >= 5) {
-                    ((BeehiveBlock) iblockdata.getBlock()).releaseBeesAndResetHoneyLevel(worldserver, iblockdata, blockposition, (Player) null, BeehiveBlockEntity.BeeReleaseStatus.BEE_RELEASED);
+                }) && iblockdata.getValue(BeehiveBlock.HONEY_LEVEL).intValue() >= 5) {
+                    ((BeehiveBlock) iblockdata.getBlock()).releaseBeesAndResetHoneyLevel(worldserver, iblockdata, blockposition, null, BeehiveBlockEntity.BeeReleaseStatus.BEE_RELEASED);
                     this.setSuccess(true);
                     return this.takeLiquid(pointer, stack, new ItemStack(Items.HONEY_BOTTLE));
                 } else if (worldserver.getFluidState(blockposition).is(FluidTags.WATER)) {
@@ -1092,14 +1092,14 @@ public interface DispenseItemBehavior {
         DispenserBlock.registerBehavior(Items.GLOWSTONE, new OptionalDispenseItemBehavior() {
             @Override
             public ItemStack execute(BlockSource pointer, ItemStack stack) {
-                Direction enumdirection = (Direction) pointer.getBlockState().getValue(DispenserBlock.FACING);
+                Direction enumdirection = pointer.getBlockState().getValue(DispenserBlock.FACING);
                 BlockPos blockposition = pointer.getPos().relative(enumdirection);
                 ServerLevel worldserver = pointer.getLevel();
                 BlockState iblockdata = worldserver.getBlockState(blockposition);
 
                 this.setSuccess(true);
                 if (iblockdata.is(Blocks.RESPAWN_ANCHOR)) {
-                    if (((Integer) iblockdata.getValue(RespawnAnchorBlock.CHARGE)).intValue() != 4) {
+                    if (iblockdata.getValue(RespawnAnchorBlock.CHARGE).intValue() != 4) {
                         RespawnAnchorBlock.charge(worldserver, blockposition, iblockdata);
                         stack.shrink(1);
                     } else {
@@ -1116,13 +1116,13 @@ public interface DispenseItemBehavior {
         DispenserBlock.registerBehavior(Items.HONEYCOMB, new OptionalDispenseItemBehavior() {
             @Override
             public ItemStack execute(BlockSource pointer, ItemStack stack) {
-                BlockPos blockposition = pointer.getPos().relative((Direction) pointer.getBlockState().getValue(DispenserBlock.FACING));
+                BlockPos blockposition = pointer.getPos().relative(pointer.getBlockState().getValue(DispenserBlock.FACING));
                 ServerLevel worldserver = pointer.getLevel();
                 BlockState iblockdata = worldserver.getBlockState(blockposition);
                 Optional<BlockState> optional = HoneycombItem.getWaxed(iblockdata);
 
                 if (optional.isPresent()) {
-                    worldserver.setBlockAndUpdate(blockposition, (BlockState) optional.get());
+                    worldserver.setBlockAndUpdate(blockposition, optional.get());
                     worldserver.levelEvent(3003, blockposition, 0);
                     stack.shrink(1);
                     this.setSuccess(true);
@@ -1142,19 +1142,19 @@ public interface DispenseItemBehavior {
                 } else {
                     ServerLevel worldserver = pointer.getLevel();
                     BlockPos blockposition = pointer.getPos();
-                    BlockPos blockposition1 = pointer.getPos().relative((Direction) pointer.getBlockState().getValue(DispenserBlock.FACING));
+                    BlockPos blockposition1 = pointer.getPos().relative(pointer.getBlockState().getValue(DispenserBlock.FACING));
 
                     if (!worldserver.getBlockState(blockposition1).is(BlockTags.CONVERTABLE_TO_MUD)) {
                         return this.defaultDispenseItemBehavior.dispense(pointer, stack);
                     } else {
                         if (!worldserver.isClientSide) {
                             for (int k = 0; k < 5; ++k) {
-                                worldserver.sendParticles(ParticleTypes.SPLASH, (double) blockposition.getX() + worldserver.random.nextDouble(), (double) (blockposition.getY() + 1), (double) blockposition.getZ() + worldserver.random.nextDouble(), 1, 0.0D, 0.0D, 0.0D, 1.0D);
+                                worldserver.sendParticles(ParticleTypes.SPLASH, (double) blockposition.getX() + worldserver.random.nextDouble(), blockposition.getY() + 1, (double) blockposition.getZ() + worldserver.random.nextDouble(), 1, 0.0D, 0.0D, 0.0D, 1.0D);
                             }
                         }
 
-                        worldserver.playSound((Player) null, blockposition, SoundEvents.BOTTLE_EMPTY, SoundSource.BLOCKS, 1.0F, 1.0F);
-                        worldserver.gameEvent((Entity) null, GameEvent.FLUID_PLACE, blockposition);
+                        worldserver.playSound(null, blockposition, SoundEvents.BOTTLE_EMPTY, SoundSource.BLOCKS, 1.0F, 1.0F);
+                        worldserver.gameEvent(null, GameEvent.FLUID_PLACE, blockposition);
                         worldserver.setBlockAndUpdate(blockposition1, Blocks.MUD.defaultBlockState());
                         return new ItemStack(Items.GLASS_BOTTLE);
                     }
diff --git a/src/main/java/net/minecraft/core/dispenser/ShearsDispenseItemBehavior.java b/src/main/java/net/minecraft/core/dispenser/ShearsDispenseItemBehavior.java
index d66d55eed991238d3125a3af5f90aa3787c55ef1..d6dd3434b341e9862171ff95cee581806094c78e 100644
--- a/src/main/java/net/minecraft/core/dispenser/ShearsDispenseItemBehavior.java
+++ b/src/main/java/net/minecraft/core/dispenser/ShearsDispenseItemBehavior.java
@@ -51,7 +51,7 @@ public class ShearsDispenseItemBehavior extends OptionalDispenseItemBehavior {
         if (!event.getItem().equals(craftItem)) {
             // Chain to handler for new item
             ItemStack eventStack = CraftItemStack.asNMSCopy(event.getItem());
-            DispenseItemBehavior idispensebehavior = (DispenseItemBehavior) DispenserBlock.DISPENSER_REGISTRY.get(eventStack.getItem());
+            DispenseItemBehavior idispensebehavior = DispenserBlock.DISPENSER_REGISTRY.get(eventStack.getItem());
             if (idispensebehavior != DispenseItemBehavior.NOOP && idispensebehavior != this) {
                 idispensebehavior.dispense(pointer, eventStack);
                 return stack;
@@ -60,10 +60,10 @@ public class ShearsDispenseItemBehavior extends OptionalDispenseItemBehavior {
         // CraftBukkit end
 
         if (!worldserver.isClientSide()) {
-            BlockPos blockposition = pointer.getPos().relative((Direction) pointer.getBlockState().getValue(DispenserBlock.FACING));
+            BlockPos blockposition = pointer.getPos().relative(pointer.getBlockState().getValue(DispenserBlock.FACING));
 
-            this.setSuccess(ShearsDispenseItemBehavior.tryShearBeehive((ServerLevel) worldserver, blockposition) || ShearsDispenseItemBehavior.tryShearLivingEntity((ServerLevel) worldserver, blockposition, bukkitBlock, craftItem)); // CraftBukkit
-            if (this.isSuccess() && stack.hurt(1, worldserver.getRandom(), (ServerPlayer) null)) {
+            this.setSuccess(ShearsDispenseItemBehavior.tryShearBeehive(worldserver, blockposition) || ShearsDispenseItemBehavior.tryShearLivingEntity(worldserver, blockposition, bukkitBlock, craftItem)); // CraftBukkit
+            if (this.isSuccess() && stack.hurt(1, worldserver.getRandom(), null)) {
                 stack.setCount(0);
             }
         }
@@ -77,13 +77,13 @@ public class ShearsDispenseItemBehavior extends OptionalDispenseItemBehavior {
         if (iblockdata.is(BlockTags.BEEHIVES, (blockbase_blockdata) -> {
             return blockbase_blockdata.hasProperty(BeehiveBlock.HONEY_LEVEL) && blockbase_blockdata.getBlock() instanceof BeehiveBlock;
         })) {
-            int i = ((Integer) iblockdata.getValue(BeehiveBlock.HONEY_LEVEL)).intValue();
+            int i = iblockdata.getValue(BeehiveBlock.HONEY_LEVEL).intValue();
 
             if (i >= 5) {
-                world.playSound((Player) null, pos, SoundEvents.BEEHIVE_SHEAR, SoundSource.BLOCKS, 1.0F, 1.0F);
+                world.playSound(null, pos, SoundEvents.BEEHIVE_SHEAR, SoundSource.BLOCKS, 1.0F, 1.0F);
                 BeehiveBlock.dropHoneycomb(world, pos);
-                ((BeehiveBlock) iblockdata.getBlock()).releaseBeesAndResetHoneyLevel(world, iblockdata, pos, (Player) null, BeehiveBlockEntity.BeeReleaseStatus.BEE_RELEASED);
-                world.gameEvent((Entity) null, GameEvent.SHEAR, pos);
+                ((BeehiveBlock) iblockdata.getBlock()).releaseBeesAndResetHoneyLevel(world, iblockdata, pos, null, BeehiveBlockEntity.BeeReleaseStatus.BEE_RELEASED);
+                world.gameEvent(null, GameEvent.SHEAR, pos);
                 return true;
             }
         }
@@ -108,7 +108,7 @@ public class ShearsDispenseItemBehavior extends OptionalDispenseItemBehavior {
                     }
                     // CraftBukkit end
                     ishearable.shear(SoundSource.BLOCKS);
-                    worldserver.gameEvent((Entity) null, GameEvent.SHEAR, blockposition);
+                    worldserver.gameEvent(null, GameEvent.SHEAR, blockposition);
                     return true;
                 }
             }
diff --git a/src/main/java/net/minecraft/core/dispenser/ShulkerBoxDispenseBehavior.java b/src/main/java/net/minecraft/core/dispenser/ShulkerBoxDispenseBehavior.java
index 0159ed9cbc644c39fa79e62327f13375193fdc98..46d81eb6b83b3d0557ff90f06cec06df6747d9d9 100644
--- a/src/main/java/net/minecraft/core/dispenser/ShulkerBoxDispenseBehavior.java
+++ b/src/main/java/net/minecraft/core/dispenser/ShulkerBoxDispenseBehavior.java
@@ -28,7 +28,7 @@ public class ShulkerBoxDispenseBehavior extends OptionalDispenseItemBehavior {
         Item item = stack.getItem();
 
         if (item instanceof BlockItem) {
-            Direction enumdirection = (Direction) pointer.getBlockState().getValue(DispenserBlock.FACING);
+            Direction enumdirection = pointer.getBlockState().getValue(DispenserBlock.FACING);
             BlockPos blockposition = pointer.getPos().relative(enumdirection);
             Direction enumdirection1 = pointer.getLevel().isEmptyBlock(blockposition.below()) ? enumdirection : Direction.UP;
 
@@ -48,7 +48,7 @@ public class ShulkerBoxDispenseBehavior extends OptionalDispenseItemBehavior {
             if (!event.getItem().equals(craftItem)) {
                 // Chain to handler for new item
                 ItemStack eventStack = CraftItemStack.asNMSCopy(event.getItem());
-                DispenseItemBehavior idispensebehavior = (DispenseItemBehavior) DispenserBlock.DISPENSER_REGISTRY.get(eventStack.getItem());
+                DispenseItemBehavior idispensebehavior = DispenserBlock.DISPENSER_REGISTRY.get(eventStack.getItem());
                 if (idispensebehavior != DispenseItemBehavior.NOOP && idispensebehavior != this) {
                     idispensebehavior.dispense(pointer, eventStack);
                     return stack;
diff --git a/src/main/java/net/minecraft/data/worldgen/SurfaceRuleData.java b/src/main/java/net/minecraft/data/worldgen/SurfaceRuleData.java
index b7e67dc7c1e12eecfca00a7b17c895237099b4c2..dcd409488999dc60cb47d01f59995a4accdf72ce 100644
--- a/src/main/java/net/minecraft/data/worldgen/SurfaceRuleData.java
+++ b/src/main/java/net/minecraft/data/worldgen/SurfaceRuleData.java
@@ -101,7 +101,7 @@ public class SurfaceRuleData {
                     } else if (y >= j) {
                         return false;
                     } else {
-                        double d = net.minecraft.util.Mth.map((double) y, (double) i, (double) j, 1.0D, 0.0D);
+                        double d = net.minecraft.util.Mth.map(y, i, j, 1.0D, 0.0D);
                         net.minecraft.util.RandomSource randomSource = positionalRandomFactory.at(this.context.blockX, y, this.context.blockZ);
                         return (double) randomSource.nextFloat() < d;
                     }
diff --git a/src/main/java/net/minecraft/nbt/IntArrayTag.java b/src/main/java/net/minecraft/nbt/IntArrayTag.java
index 5c49c09f4a41926c0bf005592c9ab7cd70c7c587..5b874902eedac700d286734835d3c84576b76288 100644
--- a/src/main/java/net/minecraft/nbt/IntArrayTag.java
+++ b/src/main/java/net/minecraft/nbt/IntArrayTag.java
@@ -71,7 +71,7 @@ public class IntArrayTag extends CollectionTag<IntTag> {
         int[] aint = new int[list.size()];
 
         for (int i = 0; i < list.size(); ++i) {
-            Integer integer = (Integer) list.get(i);
+            Integer integer = list.get(i);
 
             aint[i] = integer == null ? 0 : integer.intValue();
         }
diff --git a/src/main/java/net/minecraft/nbt/NbtIo.java b/src/main/java/net/minecraft/nbt/NbtIo.java
index 25b9fea54042c9578a39b60789c7207890097adb..ca812b5a5499a3399c1b4822599941351eccd68b 100644
--- a/src/main/java/net/minecraft/nbt/NbtIo.java
+++ b/src/main/java/net/minecraft/nbt/NbtIo.java
@@ -30,7 +30,7 @@ public class NbtIo {
         CompoundTag nbttagcompound;
 
         try {
-            nbttagcompound = NbtIo.readCompressed((InputStream) fileinputstream);
+            nbttagcompound = NbtIo.readCompressed(fileinputstream);
         } catch (Throwable throwable) {
             try {
                 fileinputstream.close();
@@ -79,7 +79,7 @@ public class NbtIo {
         FileInputStream fileinputstream = new FileInputStream(file);
 
         try {
-            NbtIo.parseCompressed((InputStream) fileinputstream, scanner);
+            NbtIo.parseCompressed(fileinputstream, scanner);
         } catch (Throwable throwable) {
             try {
                 fileinputstream.close();
@@ -120,7 +120,7 @@ public class NbtIo {
         FileOutputStream fileoutputstream = new FileOutputStream(file);
 
         try {
-            NbtIo.writeCompressed(nbt, (OutputStream) fileoutputstream);
+            NbtIo.writeCompressed(nbt, fileoutputstream);
         } catch (Throwable throwable) {
             try {
                 fileoutputstream.close();
@@ -138,7 +138,7 @@ public class NbtIo {
         DataOutputStream dataoutputstream = new DataOutputStream(new BufferedOutputStream(new GZIPOutputStream(stream)));
 
         try {
-            NbtIo.write(nbt, (DataOutput) dataoutputstream);
+            NbtIo.write(nbt, dataoutputstream);
         } catch (Throwable throwable) {
             try {
                 dataoutputstream.close();
@@ -159,7 +159,7 @@ public class NbtIo {
             DataOutputStream dataoutputstream = new DataOutputStream(fileoutputstream);
 
             try {
-                NbtIo.write(nbt, (DataOutput) dataoutputstream);
+                NbtIo.write(nbt, dataoutputstream);
             } catch (Throwable throwable) {
                 try {
                     dataoutputstream.close();
diff --git a/src/main/java/net/minecraft/nbt/NbtUtils.java b/src/main/java/net/minecraft/nbt/NbtUtils.java
index 3589f398bf48098e51d210fc6a2deab69d9658a2..d12aea59186b2d7406f4cd1e69e10612f3ed32eb 100644
--- a/src/main/java/net/minecraft/nbt/NbtUtils.java
+++ b/src/main/java/net/minecraft/nbt/NbtUtils.java
@@ -327,7 +327,7 @@ public final class NbtUtils {
             case 5:
             case 6:
             case 8:
-                stringBuilder.append((Object)nbt);
+                stringBuilder.append(nbt);
                 break;
             case 7:
                 ByteArrayTag byteArrayTag = (ByteArrayTag)nbt;
@@ -404,7 +404,7 @@ public final class NbtUtils {
                     }
 
                     String string3 = list.get(s);
-                    indent(depth + 1, stringBuilder).append('"').append(string3).append('"').append((CharSequence)string2, 0, string2.length() - string3.length()).append(": ");
+                    indent(depth + 1, stringBuilder).append('"').append(string3).append('"').append(string2, 0, string2.length() - string3.length()).append(": ");
                     prettyPrint(stringBuilder, compoundTag.get(string3), depth + 1, withArrayContents);
                 }
 
@@ -457,10 +457,10 @@ public final class NbtUtils {
                 long t = 0L;
 
                 for(long u : ls) {
-                    t = Math.max(t, (long)String.format(Locale.ROOT, "%X", Long.valueOf(u)).length());
+                    t = Math.max(t, String.format(Locale.ROOT, "%X", Long.valueOf(u)).length());
                 }
 
-                long v = (long)ls.length;
+                long v = ls.length;
                 indent(depth, stringBuilder).append("long[").append(v).append("] {\n");
                 if (!withArrayContents) {
                     indent(depth + 1, stringBuilder).append(" // Skipped, supply withBinaryBlobs true");
@@ -641,7 +641,7 @@ public final class NbtUtils {
                     if (list.size() == 2) {
                         compoundTag2.putString(list.get(0), list.get(1));
                     } else {
-                        LOGGER.error("Something went wrong parsing: '{}' -- incorrect gamedata!", (Object)string);
+                        LOGGER.error("Something went wrong parsing: '{}' -- incorrect gamedata!", string);
                     }
 
                 });
diff --git a/src/main/java/net/minecraft/network/Connection.java b/src/main/java/net/minecraft/network/Connection.java
index eb4c4095897df740c34cabcb18ac49185ba06bcc..ba3f314c3fabd314a1f2d27f391c19e53e11bdeb 100644
--- a/src/main/java/net/minecraft/network/Connection.java
+++ b/src/main/java/net/minecraft/network/Connection.java
@@ -52,13 +52,13 @@ public class Connection extends SimpleChannelInboundHandler<Packet<?>> {
     private static final float AVERAGE_PACKETS_SMOOTHING = 0.75F;
     private static final Logger LOGGER = LogUtils.getLogger();
     public static final Marker ROOT_MARKER = MarkerFactory.getMarker("NETWORK");
-    public static final Marker PACKET_MARKER = (Marker) Util.make(MarkerFactory.getMarker("NETWORK_PACKETS"), (marker) -> {
+    public static final Marker PACKET_MARKER = Util.make(MarkerFactory.getMarker("NETWORK_PACKETS"), (marker) -> {
         marker.add(Connection.ROOT_MARKER);
     });
-    public static final Marker PACKET_RECEIVED_MARKER = (Marker) Util.make(MarkerFactory.getMarker("PACKET_RECEIVED"), (marker) -> {
+    public static final Marker PACKET_RECEIVED_MARKER = Util.make(MarkerFactory.getMarker("PACKET_RECEIVED"), (marker) -> {
         marker.add(Connection.PACKET_MARKER);
     });
-    public static final Marker PACKET_SENT_MARKER = (Marker) Util.make(MarkerFactory.getMarker("PACKET_SENT"), (marker) -> {
+    public static final Marker PACKET_SENT_MARKER = Util.make(MarkerFactory.getMarker("PACKET_SENT"), (marker) -> {
         marker.add(Connection.PACKET_MARKER);
     });
     public static final AttributeKey<ConnectionProtocol> ATTRIBUTE_PROTOCOL = AttributeKey.valueOf("protocol");
@@ -234,7 +234,7 @@ public class Connection extends SimpleChannelInboundHandler<Packet<?>> {
                         ConnectionProtocol enumprotocol = this.getCurrentProtocol();
                         Packet<?> packet = enumprotocol == ConnectionProtocol.LOGIN ? new ClientboundLoginDisconnectPacket(ichatmutablecomponent) : new ClientboundDisconnectPacket(ichatmutablecomponent);
 
-                        this.send((Packet) packet, PacketSendListener.thenRun(() -> {
+                        this.send(packet, PacketSendListener.thenRun(() -> {
                             this.disconnect(ichatmutablecomponent);
                         }));
                         this.setReadOnly();
@@ -361,7 +361,7 @@ public class Connection extends SimpleChannelInboundHandler<Packet<?>> {
     // Paper end
 
     public void send(Packet<?> packet) {
-        this.send(packet, (PacketSendListener) null);
+        this.send(packet, null);
     }
 
     public void send(Packet<?> packet, @Nullable PacketSendListener callbacks) {
@@ -490,7 +490,7 @@ public class Connection extends SimpleChannelInboundHandler<Packet<?>> {
     }
 
     private ConnectionProtocol getCurrentProtocol() {
-        return (ConnectionProtocol) this.channel.attr(Connection.ATTRIBUTE_PROTOCOL).get();
+        return this.channel.attr(Connection.ATTRIBUTE_PROTOCOL).get();
     }
 
     // Paper start - rewrite this to be safer if ran off main thread
@@ -663,7 +663,7 @@ public class Connection extends SimpleChannelInboundHandler<Packet<?>> {
             lazyinitvar = Connection.NETWORK_WORKER_GROUP;
         }
 
-        ((Bootstrap) ((Bootstrap) ((Bootstrap) (new Bootstrap()).group((EventLoopGroup) lazyinitvar.get())).handler(new ChannelInitializer<Channel>() {
+        (new Bootstrap()).group((EventLoopGroup) lazyinitvar.get()).handler(new ChannelInitializer<Channel>() {
             protected void initChannel(Channel channel) {
                 try {
                     channel.config().setOption(ChannelOption.TCP_NODELAY, Boolean.TRUE);
@@ -673,18 +673,18 @@ public class Connection extends SimpleChannelInboundHandler<Packet<?>> {
 
                 channel.pipeline().addLast("timeout", new ReadTimeoutHandler(30)).addLast("splitter", new Varint21FrameDecoder()).addLast("decoder", new PacketDecoder(PacketFlow.CLIENTBOUND)).addLast("prepender", new Varint21LengthFieldPrepender()).addLast("encoder", new PacketEncoder(PacketFlow.SERVERBOUND)).addLast("packet_handler", networkmanager);
             }
-        })).channel(oclass)).connect(address.getAddress(), address.getPort()).syncUninterruptibly();
+        }).channel(oclass).connect(address.getAddress(), address.getPort()).syncUninterruptibly();
         return networkmanager;
     }
 
     public static Connection connectToLocalServer(SocketAddress address) {
         final Connection networkmanager = new Connection(PacketFlow.CLIENTBOUND);
 
-        ((Bootstrap) ((Bootstrap) ((Bootstrap) (new Bootstrap()).group((EventLoopGroup) Connection.LOCAL_WORKER_GROUP.get())).handler(new ChannelInitializer<Channel>() {
+        (new Bootstrap()).group(Connection.LOCAL_WORKER_GROUP.get()).handler(new ChannelInitializer<Channel>() {
             protected void initChannel(Channel channel) {
                 channel.pipeline().addLast("packet_handler", networkmanager);
             }
-        })).channel(LocalChannel.class)).connect(address).syncUninterruptibly();
+        }).channel(LocalChannel.class).connect(address).syncUninterruptibly();
         return networkmanager;
     }
 
diff --git a/src/main/java/net/minecraft/network/FriendlyByteBuf.java b/src/main/java/net/minecraft/network/FriendlyByteBuf.java
index ce74104c628d858abb35c6f11a84f251d8e9c2fc..5aa174c384d925c7b5a0926449d1b66f0efa5e31 100644
--- a/src/main/java/net/minecraft/network/FriendlyByteBuf.java
+++ b/src/main/java/net/minecraft/network/FriendlyByteBuf.java
@@ -222,7 +222,7 @@ public class FriendlyByteBuf extends ByteBuf {
     }
 
     public <T> List<T> readList(FriendlyByteBuf.Reader<T> reader) {
-        return (List) this.readCollection(Lists::newArrayListWithCapacity, reader);
+        return this.readCollection(Lists::newArrayListWithCapacity, reader);
     }
 
     public IntList readIntIdList() {
@@ -416,7 +416,7 @@ public class FriendlyByteBuf extends ByteBuf {
     }
 
     public long[] readLongArray() {
-        return this.readLongArray((long[]) null);
+        return this.readLongArray(null);
     }
 
     public long[] readLongArray(@Nullable long[] toArray) {
@@ -592,7 +592,7 @@ public class FriendlyByteBuf extends ByteBuf {
             this.writeByte(0);
         } else {
             try {
-                NbtIo.write(compound, (DataOutput) (new ByteBufOutputStream(this)));
+                NbtIo.write(compound, new ByteBufOutputStream(this));
             } catch (Exception ioexception) { // CraftBukkit - IOException -> Exception
                 throw new EncoderException(ioexception);
             }
@@ -658,7 +658,7 @@ public class FriendlyByteBuf extends ByteBuf {
         if (!this.readBoolean()) {
             return ItemStack.EMPTY;
         } else {
-            Item item = (Item) this.readById(BuiltInRegistries.ITEM);
+            Item item = this.readById(BuiltInRegistries.ITEM);
             byte b0 = this.readByte();
             ItemStack itemstack = new ItemStack(item, b0);
 
@@ -776,7 +776,7 @@ public class FriendlyByteBuf extends ByteBuf {
 
     public BlockHitResult readBlockHitResult() {
         BlockPos blockposition = this.readBlockPos();
-        Direction enumdirection = (Direction) this.readEnum(Direction.class);
+        Direction enumdirection = this.readEnum(Direction.class);
         float f = this.readFloat();
         float f1 = this.readFloat();
         float f2 = this.readFloat();
diff --git a/src/main/java/net/minecraft/network/chat/ChatType.java b/src/main/java/net/minecraft/network/chat/ChatType.java
index 626a1e86cf21712194da3616340d58e34db27ed6..4eb2eff21b591717e03b11859084c0edcbf48568 100644
--- a/src/main/java/net/minecraft/network/chat/ChatType.java
+++ b/src/main/java/net/minecraft/network/chat/ChatType.java
@@ -56,7 +56,7 @@ public record ChatType(ChatTypeDecoration chat, ChatTypeDecoration narration) {
     public static ChatType.Bound bind(ResourceKey<ChatType> typeKey, RegistryAccess registryManager, Component name) {
         Registry<ChatType> iregistry = registryManager.registryOrThrow(Registries.CHAT_TYPE);
 
-        return ((ChatType) iregistry.getOrThrow(typeKey)).bind(name);
+        return iregistry.getOrThrow(typeKey).bind(name);
     }
 
     public ChatType.Bound bind(Component name) {
@@ -66,7 +66,7 @@ public record ChatType(ChatTypeDecoration chat, ChatTypeDecoration narration) {
     public static record Bound(ChatType chatType, Component name, @Nullable Component targetName) {
 
         Bound(ChatType type, Component name) {
-            this(type, name, (Component) null);
+            this(type, name, null);
         }
 
         public Component decorate(Component content) {
@@ -91,7 +91,7 @@ public record ChatType(ChatTypeDecoration chat, ChatTypeDecoration narration) {
     public static record BoundNetwork(int chatType, Component name, @Nullable Component targetName) {
 
         public BoundNetwork(FriendlyByteBuf buf) {
-            this(buf.readVarInt(), buf.readComponent(), (Component) buf.readNullable(FriendlyByteBuf::readComponent));
+            this(buf.readVarInt(), buf.readComponent(), buf.readNullable(FriendlyByteBuf::readComponent));
         }
 
         public void write(FriendlyByteBuf buf) {
@@ -102,7 +102,7 @@ public record ChatType(ChatTypeDecoration chat, ChatTypeDecoration narration) {
 
         public Optional<ChatType.Bound> resolve(RegistryAccess registryManager) {
             Registry<ChatType> iregistry = registryManager.registryOrThrow(Registries.CHAT_TYPE);
-            ChatType chatmessagetype = (ChatType) iregistry.byId(this.chatType);
+            ChatType chatmessagetype = iregistry.byId(this.chatType);
 
             return Optional.ofNullable(chatmessagetype).map((chatmessagetype1) -> {
                 return new ChatType.Bound(chatmessagetype1, this.name, this.targetName);
diff --git a/src/main/java/net/minecraft/network/chat/Component.java b/src/main/java/net/minecraft/network/chat/Component.java
index beedb717d992e068d1263dafdeaccf16da3d289c..98b5d2cc1c2f4dc062e449a85b34d3fa129a2fd1 100644
--- a/src/main/java/net/minecraft/network/chat/Component.java
+++ b/src/main/java/net/minecraft/network/chat/Component.java
@@ -178,7 +178,7 @@ public interface Component extends Message, FormattedText, Iterable<Component> {
     }
 
     static Component nullToEmpty(@Nullable String string) {
-        return (Component) (string != null ? Component.literal(string) : CommonComponents.EMPTY);
+        return string != null ? Component.literal(string) : CommonComponents.EMPTY;
     }
 
     static MutableComponent literal(String string) {
@@ -215,17 +215,17 @@ public interface Component extends Message, FormattedText, Iterable<Component> {
 
     public static class Serializer implements JsonDeserializer<MutableComponent>, JsonSerializer<Component> {
 
-        private static final Gson GSON = (Gson) Util.make(() -> {
+        private static final Gson GSON = Util.make(() -> {
             GsonBuilder gsonbuilder = new GsonBuilder();
 
             gsonbuilder.disableHtmlEscaping();
             gsonbuilder.registerTypeAdapter(AdventureComponent.class, new AdventureComponent.Serializer()); // Paper
-            gsonbuilder.registerTypeHierarchyAdapter(Component.class, new Component.Serializer());
+            gsonbuilder.registerTypeHierarchyAdapter(Component.class, new Serializer());
             gsonbuilder.registerTypeHierarchyAdapter(Style.class, new Style.Serializer());
             gsonbuilder.registerTypeAdapterFactory(new LowerCaseEnumTypeAdapterFactory());
             return gsonbuilder.create();
         });
-        private static final Field JSON_READER_POS = (Field) Util.make(() -> {
+        private static final Field JSON_READER_POS = Util.make(() -> {
             try {
                 new JsonReader(new StringReader(""));
                 Field field = JsonReader.class.getDeclaredField("pos");
@@ -236,7 +236,7 @@ public interface Component extends Message, FormattedText, Iterable<Component> {
                 throw new IllegalStateException("Couldn't get field 'pos' for JsonReader", nosuchfieldexception);
             }
         });
-        private static final Field JSON_READER_LINESTART = (Field) Util.make(() -> {
+        private static final Field JSON_READER_LINESTART = Util.make(() -> {
             try {
                 new JsonReader(new StringReader(""));
                 Field field = JsonReader.class.getDeclaredField("lineStart");
@@ -270,7 +270,7 @@ public interface Component extends Message, FormattedText, Iterable<Component> {
                             if (ichatmutablecomponent == null) {
                                 ichatmutablecomponent = ichatmutablecomponent1;
                             } else {
-                                ichatmutablecomponent.append((Component) ichatmutablecomponent1);
+                                ichatmutablecomponent.append(ichatmutablecomponent1);
                             }
                         }
 
@@ -346,11 +346,11 @@ public interface Component extends Message, FormattedText, Iterable<Component> {
                         }
 
                         for (int j = 0; j < jsonarray2.size(); ++j) {
-                            ichatmutablecomponent.append((Component) this.deserialize(jsonarray2.get(j), type, jsondeserializationcontext));
+                            ichatmutablecomponent.append(this.deserialize(jsonarray2.get(j), type, jsondeserializationcontext));
                         }
                     }
 
-                    ichatmutablecomponent.setStyle((Style) jsondeserializationcontext.deserialize(jsonelement, Style.class));
+                    ichatmutablecomponent.setStyle(jsondeserializationcontext.deserialize(jsonelement, Style.class));
                     return ichatmutablecomponent;
                 }
             }
@@ -388,7 +388,7 @@ public interface Component extends Message, FormattedText, Iterable<Component> {
                 while (iterator.hasNext()) {
                     Entry<String, JsonElement> entry = (Entry) iterator.next();
 
-                    json.add((String) entry.getKey(), (JsonElement) entry.getValue());
+                    json.add(entry.getKey(), entry.getValue());
                 }
             }
 
@@ -514,17 +514,17 @@ public interface Component extends Message, FormattedText, Iterable<Component> {
 
         @Nullable
         public static MutableComponent fromJson(String json) {
-            return (MutableComponent) GsonHelper.fromNullableJson(Component.Serializer.GSON, json, MutableComponent.class, false);
+            return GsonHelper.fromNullableJson(Serializer.GSON, json, MutableComponent.class, false);
         }
 
         @Nullable
         public static MutableComponent fromJson(JsonElement json) {
-            return (MutableComponent) Component.Serializer.GSON.fromJson(json, MutableComponent.class);
+            return Serializer.GSON.fromJson(json, MutableComponent.class);
         }
 
         @Nullable
         public static MutableComponent fromJsonLenient(String json) {
-            return (MutableComponent) GsonHelper.fromNullableJson(Component.Serializer.GSON, json, MutableComponent.class, true);
+            return GsonHelper.fromNullableJson(Serializer.GSON, json, MutableComponent.class, true);
         }
 
         public static MutableComponent fromJson(com.mojang.brigadier.StringReader reader) {
@@ -532,7 +532,7 @@ public interface Component extends Message, FormattedText, Iterable<Component> {
                 JsonReader jsonreader = new JsonReader(new StringReader(reader.getRemaining()));
 
                 jsonreader.setLenient(false);
-                MutableComponent ichatmutablecomponent = (MutableComponent) Component.Serializer.GSON.getAdapter(MutableComponent.class).read(jsonreader);
+                MutableComponent ichatmutablecomponent = Serializer.GSON.getAdapter(MutableComponent.class).read(jsonreader);
 
                 reader.setCursor(reader.getCursor() + Serializer.getPos(jsonreader));
                 return ichatmutablecomponent;
diff --git a/src/main/java/net/minecraft/network/chat/TextColor.java b/src/main/java/net/minecraft/network/chat/TextColor.java
index 94fc50feb168bf0af67c4c639e228cd29f8ae634..28ea0c17d97d09972795c5cd87ee61d0617edc47 100644
--- a/src/main/java/net/minecraft/network/chat/TextColor.java
+++ b/src/main/java/net/minecraft/network/chat/TextColor.java
@@ -19,10 +19,10 @@ public final class TextColor {
 
         return chathexcolor != null ? DataResult.success(chathexcolor) : DataResult.error("String is not a valid color name or hex color code");
     }, TextColor::serialize);
-    private static final Map<ChatFormatting, TextColor> LEGACY_FORMAT_TO_COLOR = (Map) Stream.of(ChatFormatting.values()).filter(ChatFormatting::isColor).collect(ImmutableMap.toImmutableMap(Function.identity(), (enumchatformat) -> {
+    private static final Map<ChatFormatting, TextColor> LEGACY_FORMAT_TO_COLOR = Stream.of(ChatFormatting.values()).filter(ChatFormatting::isColor).collect(ImmutableMap.toImmutableMap(Function.identity(), (enumchatformat) -> {
         return new TextColor(enumchatformat.getColor().intValue(), enumchatformat.getName(), enumchatformat); // CraftBukkit
     }));
-    private static final Map<String, TextColor> NAMED_COLORS = (Map) TextColor.LEGACY_FORMAT_TO_COLOR.values().stream().collect(ImmutableMap.toImmutableMap((chathexcolor) -> {
+    private static final Map<String, TextColor> NAMED_COLORS = TextColor.LEGACY_FORMAT_TO_COLOR.values().stream().collect(ImmutableMap.toImmutableMap((chathexcolor) -> {
         return chathexcolor.name;
     }, Function.identity()));
     private final int value;
@@ -79,7 +79,7 @@ public final class TextColor {
 
     @Nullable
     public static TextColor fromLegacyFormat(ChatFormatting formatting) {
-        return (TextColor) TextColor.LEGACY_FORMAT_TO_COLOR.get(formatting);
+        return TextColor.LEGACY_FORMAT_TO_COLOR.get(formatting);
     }
 
     public static TextColor fromRgb(int rgb) {
@@ -97,7 +97,7 @@ public final class TextColor {
                 return null;
             }
         } else {
-            return (TextColor) TextColor.NAMED_COLORS.get(name);
+            return TextColor.NAMED_COLORS.get(name);
         }
     }
 }
diff --git a/src/main/java/net/minecraft/network/protocol/PacketUtils.java b/src/main/java/net/minecraft/network/protocol/PacketUtils.java
index d1e2ba1698f006013826f137035b325fea910225..7ce652f4345f678b25579e9b077d04e0a37184dc 100644
--- a/src/main/java/net/minecraft/network/protocol/PacketUtils.java
+++ b/src/main/java/net/minecraft/network/protocol/PacketUtils.java
@@ -34,7 +34,7 @@ public class PacketUtils {
     public PacketUtils() {}
 
     public static <T extends PacketListener> void ensureRunningOnSameThread(Packet<T> packet, T listener, ServerLevel world) throws RunningOnDifferentThreadException {
-        PacketUtils.ensureRunningOnSameThread(packet, listener, (BlockableEventLoop) world.getServer());
+        PacketUtils.ensureRunningOnSameThread(packet, listener, world.getServer());
     }
 
     public static <T extends PacketListener> void ensureRunningOnSameThread(Packet<T> packet, T listener, BlockableEventLoop<?> engine) throws RunningOnDifferentThreadException {
diff --git a/src/main/java/net/minecraft/network/protocol/game/ClientboundSectionBlocksUpdatePacket.java b/src/main/java/net/minecraft/network/protocol/game/ClientboundSectionBlocksUpdatePacket.java
index 97e0bab1f1604cfb79b27bd3234783a96a32e925..89a6bc7b2c736244d47fc5d4f1f578646e681d82 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ClientboundSectionBlocksUpdatePacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ClientboundSectionBlocksUpdatePacket.java
@@ -29,7 +29,7 @@ public class ClientboundSectionBlocksUpdatePacket implements Packet<ClientGamePa
         int j = 0;
 
         for (ShortIterator shortiterator = positions.iterator(); shortiterator.hasNext(); ++j) {
-            short short0 = ((Short) shortiterator.next()).shortValue();
+            short short0 = shortiterator.next().shortValue();
 
             this.positions[j] = short0;
             this.states[j] = (section != null) ? section.getBlockState(SectionPos.sectionRelativeX(short0), SectionPos.sectionRelativeY(short0), SectionPos.sectionRelativeZ(short0)) : net.minecraft.world.level.block.Blocks.AIR.defaultBlockState(); // CraftBukkit - SPIGOT-6076, Mojang bug when empty chunk section notified
@@ -58,7 +58,7 @@ public class ClientboundSectionBlocksUpdatePacket implements Packet<ClientGamePa
             long k = buf.readVarLong();
 
             this.positions[j] = (short) ((int) (k & 4095L));
-            this.states[j] = (BlockState) Block.BLOCK_STATE_REGISTRY.byId((int) (k >>> 12));
+            this.states[j] = Block.BLOCK_STATE_REGISTRY.byId((int) (k >>> 12));
         }
 
     }
@@ -79,7 +79,7 @@ public class ClientboundSectionBlocksUpdatePacket implements Packet<ClientGamePa
         buf.writeVarInt(this.positions.length);
 
         for (int i = 0; i < this.positions.length; ++i) {
-            buf.writeVarLong((long) (Block.getId(this.states[i]) << 12 | this.positions[i]));
+            buf.writeVarLong(Block.getId(this.states[i]) << 12 | this.positions[i]);
         }
 
     }
diff --git a/src/main/java/net/minecraft/network/protocol/game/ClientboundSetPlayerTeamPacket.java b/src/main/java/net/minecraft/network/protocol/game/ClientboundSetPlayerTeamPacket.java
index 4ebe22ac20f1a98694cc3bec570ef5bbf06f00aa..ec102aef13865136aa3ed20e9ec8ca9abef3d358 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ClientboundSetPlayerTeamPacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ClientboundSetPlayerTeamPacket.java
@@ -31,7 +31,7 @@ public class ClientboundSetPlayerTeamPacket implements Packet<ClientGamePacketLi
     }
 
     public static ClientboundSetPlayerTeamPacket createAddOrModifyPacket(PlayerTeam team, boolean updatePlayers) {
-        return new ClientboundSetPlayerTeamPacket(team.getName(), updatePlayers ? 0 : 2, Optional.of(new ClientboundSetPlayerTeamPacket.Parameters(team)), (Collection<String>)(updatePlayers ? team.getPlayers() : ImmutableList.of()));
+        return new ClientboundSetPlayerTeamPacket(team.getName(), updatePlayers ? 0 : 2, Optional.of(new ClientboundSetPlayerTeamPacket.Parameters(team)), updatePlayers ? team.getPlayers() : ImmutableList.of());
     }
 
     public static ClientboundSetPlayerTeamPacket createRemovePacket(PlayerTeam team) {
diff --git a/src/main/java/net/minecraft/network/protocol/game/ServerboundInteractPacket.java b/src/main/java/net/minecraft/network/protocol/game/ServerboundInteractPacket.java
index 21068f766b75c414d5818073b7dca083d8ff4409..266e2240627788ae265afa5639cb29a38cba91f8 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ServerboundInteractPacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ServerboundInteractPacket.java
@@ -147,7 +147,7 @@ public class ServerboundInteractPacket implements Packet<ServerGamePacketListene
         }
 
         private InteractionAtLocationAction(FriendlyByteBuf buf) {
-            this.location = new Vec3((double)buf.readFloat(), (double)buf.readFloat(), (double)buf.readFloat());
+            this.location = new Vec3(buf.readFloat(), buf.readFloat(), buf.readFloat());
             this.hand = buf.readEnum(InteractionHand.class);
         }
 
diff --git a/src/main/java/net/minecraft/network/protocol/game/ServerboundUseItemOnPacket.java b/src/main/java/net/minecraft/network/protocol/game/ServerboundUseItemOnPacket.java
index 8c257882623d56abb8082e276d4b902418f66a65..bf453b56a1da508b66f0e5ee74fb163a58a5ea11 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ServerboundUseItemOnPacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ServerboundUseItemOnPacket.java
@@ -21,7 +21,7 @@ public class ServerboundUseItemOnPacket implements Packet<ServerGamePacketListen
 
     public ServerboundUseItemOnPacket(FriendlyByteBuf buf) {
         this.timestamp = System.currentTimeMillis(); // Spigot
-        this.hand = (InteractionHand) buf.readEnum(InteractionHand.class);
+        this.hand = buf.readEnum(InteractionHand.class);
         this.blockHit = buf.readBlockHitResult();
         this.sequence = buf.readVarInt();
     }
diff --git a/src/main/java/net/minecraft/network/protocol/game/ServerboundUseItemPacket.java b/src/main/java/net/minecraft/network/protocol/game/ServerboundUseItemPacket.java
index be6c7ea1fd83c837caa8b5ed6a8c58b20c908c0b..c93d4e28c906162fbca174feee3f3ecae750d99d 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ServerboundUseItemPacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ServerboundUseItemPacket.java
@@ -18,7 +18,7 @@ public class ServerboundUseItemPacket implements Packet<ServerGamePacketListener
 
     public ServerboundUseItemPacket(FriendlyByteBuf buf) {
         this.timestamp = System.currentTimeMillis(); // Spigot
-        this.hand = (InteractionHand) buf.readEnum(InteractionHand.class);
+        this.hand = buf.readEnum(InteractionHand.class);
         this.sequence = buf.readVarInt();
     }
 
diff --git a/src/main/java/net/minecraft/network/syncher/SynchedEntityData.java b/src/main/java/net/minecraft/network/syncher/SynchedEntityData.java
index 02acbbc4d972fe62921fc6a020616e0d3cf1564a..03ca542731c3018747f1f439105394b0ae73aa88 100644
--- a/src/main/java/net/minecraft/network/syncher/SynchedEntityData.java
+++ b/src/main/java/net/minecraft/network/syncher/SynchedEntityData.java
@@ -216,7 +216,7 @@ public class SynchedEntityData {
 
             while (iterator.hasNext()) {
                 SynchedEntityData.DataValue<?> datawatcher_b = (SynchedEntityData.DataValue) iterator.next();
-                SynchedEntityData.DataItem<?> datawatcher_item = (SynchedEntityData.DataItem) this.itemsById.get(datawatcher_b.id);
+                SynchedEntityData.DataItem<?> datawatcher_item = this.itemsById.get(datawatcher_b.id);
 
                 if (datawatcher_item != null) {
                     this.assignValue(datawatcher_item, datawatcher_b);
diff --git a/src/main/java/net/minecraft/server/Bootstrap.java b/src/main/java/net/minecraft/server/Bootstrap.java
index 062a38b84ae164e3dfa1553ce9fb2a96f18b625d..3974c4d14b4f0d0cfea096a2d9eb2f243fd2a16c 100644
--- a/src/main/java/net/minecraft/server/Bootstrap.java
+++ b/src/main/java/net/minecraft/server/Bootstrap.java
@@ -147,7 +147,7 @@ public class Bootstrap {
         Language localelanguage = Language.getInstance();
 
         registry.forEach((object) -> {
-            String s = (String) keyExtractor.apply(object);
+            String s = keyExtractor.apply(object);
 
             if (!localelanguage.has(s)) {
                 translationKeys.add(s);
@@ -196,7 +196,7 @@ public class Bootstrap {
 
     private static RuntimeException createBootstrapException(Supplier<String> callerGetter) {
         try {
-            String s = (String) callerGetter.get();
+            String s = callerGetter.get();
 
             return new IllegalArgumentException("Not bootstrapped (called from " + s + ")");
         } catch (Exception exception) {
diff --git a/src/main/java/net/minecraft/server/Main.java b/src/main/java/net/minecraft/server/Main.java
index a83d6c1824ed6cc2bebbd8171aba830993b28882..dfbc9c271c3ab545d1c97e9fc16c286ec0549ea4 100644
--- a/src/main/java/net/minecraft/server/Main.java
+++ b/src/main/java/net/minecraft/server/Main.java
@@ -174,7 +174,7 @@ public class Main {
             // Paper end - fix SPIGOT-5824
             Services services = Services.create(new com.destroystokyo.paper.profile.PaperAuthenticationService(Proxy.NO_PROXY), file, userCacheFile, optionset); // Paper
             // CraftBukkit start
-            String s = (String) Optional.ofNullable((String) optionset.valueOf("world")).orElse(dedicatedserversettings.getProperties().levelName);
+            String s = Optional.ofNullable((String) optionset.valueOf("world")).orElse(dedicatedserversettings.getProperties().levelName);
             LevelStorageSource convertable = LevelStorageSource.createDefault(file.toPath());
             LevelStorageSource.LevelStorageAccess convertable_conversionsession = convertable.createAccess(s, LevelStem.OVERWORLD);
             LevelSummary worldinfo = convertable_conversionsession.getSummary();
@@ -222,7 +222,7 @@ public class Main {
             try {
                 WorldLoader.InitConfig worldloader_c = Main.loadOrCreateConfig(dedicatedserversettings.getProperties(), convertable_conversionsession, flag, resourcepackrepository);
 
-                worldstem = (WorldStem) Util.blockUntilDone((executor) -> {
+                worldstem = Util.blockUntilDone((executor) -> {
                     return WorldLoader.load(worldloader_c, (worldloader_a) -> {
                         worldLoader.set(worldloader_a); // CraftBukkit
                         Registry<LevelStem> iregistry = worldloader_a.datapackDimensions().registryOrThrow(Registries.LEVEL_STEM);
@@ -274,7 +274,7 @@ public class Main {
             convertable_conversionsession.saveDataTag(iregistrycustom_dimension, savedata);
             */
             Class.forName(net.minecraft.world.entity.npc.VillagerTrades.class.getName());// Paper - load this sync so it won't fail later async
-            final DedicatedServer dedicatedserver = (DedicatedServer) MinecraftServer.spin((thread) -> {
+            final DedicatedServer dedicatedserver = MinecraftServer.spin((thread) -> {
                 DedicatedServer dedicatedserver1 = new DedicatedServer(optionset, worldLoader.get(), thread, convertable_conversionsession, resourcepackrepository, worldstem, dedicatedserversettings, DataFixers.getDataFixer(), services, LoggerChunkProgressListener::new);
 
                 /*
diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index 423a65e63aff5c407f314a1b76f223299dff2c0c..bd0c403d7ece0482f3d28f9b066e943f1e75bb27 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -313,7 +313,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
     public static <S extends MinecraftServer> S spin(Function<Thread, S> serverFactory) {
         AtomicReference<S> atomicreference = new AtomicReference();
         Thread thread = new io.papermc.paper.util.TickThread(() -> { // Paper - rewrite chunk system
-            ((MinecraftServer) atomicreference.get()).runServer();
+            atomicreference.get().runServer();
         }, "Server thread");
 
         thread.setUncaughtExceptionHandler((thread1, throwable) -> {
@@ -790,7 +790,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
         if (true) {
             ServerLevel worldserver1 = worldserver;
             // CraftBukkit end
-            ForcedChunksSavedData forcedchunk = (ForcedChunksSavedData) worldserver1.getDataStorage().get(ForcedChunksSavedData::load, "chunks");
+            ForcedChunksSavedData forcedchunk = worldserver1.getDataStorage().get(ForcedChunksSavedData::load, "chunks");
 
             if (forcedchunk != null) {
                 LongIterator longiterator = forcedchunk.getChunks().iterator();
@@ -848,7 +848,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
                 MinecraftServer.LOGGER.info("Saving chunks for level '{}'/{}", worldserver, worldserver.dimension().location());
             }
             // Paper start - rewrite chunk system
-            worldserver.save((ProgressListener) null, flush, worldserver.noSave && !force, close);
+            worldserver.save(null, flush, worldserver.noSave && !force, close);
             if (flush) {
                 MinecraftServer.LOGGER.info("ThreadedAnvilChunkStorage ({}): All chunks are saved", worldserver.getChunkSource().chunkMap.getStorageName());
             }
@@ -1403,7 +1403,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
                 int j = Mth.nextInt(this.random, 0, this.getPlayerCount() - agameprofile.length);
 
                 for (int k = 0; k < agameprofile.length; ++k) {
-                    ServerPlayer entityplayer = (ServerPlayer) this.playerList.getPlayers().get(j + k);
+                    ServerPlayer entityplayer = this.playerList.getPlayers().get(j + k);
 
                     if (entityplayer.allowsListing()) {
                         agameprofile[k] = entityplayer.getGameProfile();
@@ -1576,7 +1576,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
 
         MinecraftTimings.tickablesTimer.startTiming(); // Spigot // Paper
         for (int i = 0; i < this.tickables.size(); ++i) {
-            ((Runnable) this.tickables.get(i)).run();
+            this.tickables.get(i).run();
         }
         MinecraftTimings.tickablesTimer.stopTiming(); // Spigot // Paper
 
@@ -1604,12 +1604,12 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
     }
 
     public final ServerLevel overworld() {
-        return (ServerLevel) this.levels.get(Level.OVERWORLD);
+        return this.levels.get(Level.OVERWORLD);
     }
 
     @Nullable
     public ServerLevel getLevel(ResourceKey<Level> key) {
-        return (ServerLevel) this.levels.get(key);
+        return this.levels.get(key);
     }
 
     // CraftBukkit start
@@ -2123,7 +2123,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
     private static DataPackConfig getSelectedPacks(PackRepository dataPackManager) {
         Collection<String> collection = dataPackManager.getSelectedIds();
         List<String> list = ImmutableList.copyOf(collection);
-        List<String> list1 = (List) dataPackManager.getAvailableIds().stream().filter((s) -> {
+        List<String> list1 = dataPackManager.getAvailableIds().stream().filter((s) -> {
             return !collection.contains(s);
         }).collect(ImmutableList.toImmutableList());
 
@@ -2160,7 +2160,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
     public CommandSourceStack createCommandSourceStack() {
         ServerLevel worldserver = this.overworld();
 
-        return new CommandSourceStack(this, worldserver == null ? Vec3.ZERO : Vec3.atLowerCornerOf(worldserver.getSharedSpawnPos()), Vec2.ZERO, worldserver, 4, "Server", Component.literal("Server"), this, (Entity) null);
+        return new CommandSourceStack(this, worldserver == null ? Vec3.ZERO : Vec3.atLowerCornerOf(worldserver.getSharedSpawnPos()), Vec2.ZERO, worldserver, 4, "Server", Component.literal("Server"), this, null);
     }
 
     @Override
@@ -2226,7 +2226,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
 
     public int getProfilePermissions(GameProfile profile) {
         if (this.getPlayerList().isOp(profile)) {
-            ServerOpListEntry oplistentry = (ServerOpListEntry) this.getPlayerList().getOps().get(profile);
+            ServerOpListEntry oplistentry = this.getPlayerList().getOps().get(profile);
 
             return oplistentry != null ? oplistentry.getLevel() : (this.isSingleplayerOwner(profile) ? 4 : (this.isSingleplayer() ? (this.getPlayerList().isAllowCheatsForAllPlayers() ? 4 : 0) : this.getOperatorUserPermissionLevel()));
         } else {
@@ -2254,11 +2254,11 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
 
             while (iterator.hasNext()) {
                 Entry<ResourceKey<Level>, ServerLevel> entry = (Entry) iterator.next();
-                ResourceLocation minecraftkey = ((ResourceKey) entry.getKey()).location();
+                ResourceLocation minecraftkey = entry.getKey().location();
                 Path path2 = path1.resolve(minecraftkey.getNamespace()).resolve(minecraftkey.getPath());
 
                 Files.createDirectories(path2);
-                ((ServerLevel) entry.getValue()).saveDebugReport(path2);
+                entry.getValue().saveDebugReport(path2);
             }
 
             this.dumpGameRules(path.resolve("gamerules.txt"));
@@ -2553,7 +2553,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
     }
 
     public ServerPlayerGameMode createGameModeForPlayer(ServerPlayer player) {
-        return (ServerPlayerGameMode) (this.isDemo() ? new DemoMode(player) : new ServerPlayerGameMode(player));
+        return this.isDemo() ? new DemoMode(player) : new ServerPlayerGameMode(player);
     }
 
     @Nullable
@@ -2762,7 +2762,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
                     }
 
                     double overuseCount = (double)overuse/(double)MAX_CHUNK_EXEC_TIME;
-                    long extraSleep = (long)Math.round(overuseCount*CHUNK_TASK_QUEUE_BACKOFF_MIN_TIME);
+                    long extraSleep = Math.round(overuseCount*CHUNK_TASK_QUEUE_BACKOFF_MIN_TIME);
 
                     lastMidTickExecute = currTime + extraSleep;
                     return;
diff --git a/src/main/java/net/minecraft/server/PlayerAdvancements.java b/src/main/java/net/minecraft/server/PlayerAdvancements.java
index 9df486c17d44db247216cf9e20830a59cbd58b18..09ac53cfd77a97a932f90857559b3892dad6c7db 100644
--- a/src/main/java/net/minecraft/server/PlayerAdvancements.java
+++ b/src/main/java/net/minecraft/server/PlayerAdvancements.java
@@ -122,9 +122,9 @@ public class PlayerAdvancements {
         while (iterator.hasNext()) {
             Entry<Advancement, AdvancementProgress> entry = (Entry) iterator.next();
 
-            if (((AdvancementProgress) entry.getValue()).isDone()) {
-                list.add((Advancement) entry.getKey());
-                this.progressChanged.add((Advancement) entry.getKey());
+            if (entry.getValue().isDone()) {
+                list.add(entry.getKey());
+                this.progressChanged.add(entry.getKey());
             }
         }
 
@@ -167,7 +167,7 @@ public class PlayerAdvancements {
 
                     dynamic = this.dataFixer.update(DataFixTypes.ADVANCEMENTS.getType(), dynamic, dynamic.get("DataVersion").asInt(0), SharedConstants.getCurrentVersion().getWorldVersion());
                     dynamic = dynamic.remove("DataVersion");
-                    Map<ResourceLocation, AdvancementProgress> map = (Map) PlayerAdvancements.GSON.getAdapter(PlayerAdvancements.TYPE_TOKEN).fromJsonTree((JsonElement) dynamic.getValue());
+                    Map<ResourceLocation, AdvancementProgress> map = PlayerAdvancements.GSON.getAdapter(PlayerAdvancements.TYPE_TOKEN).fromJsonTree(dynamic.getValue());
 
                     if (map == null) {
                         throw new JsonParseException("Found null for advancements");
@@ -178,7 +178,7 @@ public class PlayerAdvancements {
 
                     while (iterator.hasNext()) {
                         Entry<ResourceLocation, AdvancementProgress> entry = (Entry) iterator.next();
-                        Advancement advancement = advancementLoader.getAdvancement((ResourceLocation) entry.getKey());
+                        Advancement advancement = advancementLoader.getAdvancement(entry.getKey());
 
                         if (advancement == null) {
                             // CraftBukkit start
@@ -187,7 +187,7 @@ public class PlayerAdvancements {
                             }
                             // CraftBukkit end
                         } else {
-                            this.startProgress(advancement, (AdvancementProgress) entry.getValue());
+                            this.startProgress(advancement, entry.getValue());
                         }
                     }
                 } catch (Throwable throwable) {
@@ -220,10 +220,10 @@ public class PlayerAdvancements {
 
         while (iterator.hasNext()) {
             Entry<Advancement, AdvancementProgress> entry = (Entry) iterator.next();
-            AdvancementProgress advancementprogress = (AdvancementProgress) entry.getValue();
+            AdvancementProgress advancementprogress = entry.getValue();
 
             if (advancementprogress.hasProgress()) {
-                map.put(((Advancement) entry.getKey()).getId(), advancementprogress);
+                map.put(entry.getKey().getId(), advancementprogress);
             }
         }
 
@@ -335,16 +335,16 @@ public class PlayerAdvancements {
 
             while (iterator.hasNext()) {
                 Entry<String, Criterion> entry = (Entry) iterator.next();
-                CriterionProgress criterionprogress = advancementprogress.getCriterion((String) entry.getKey());
+                CriterionProgress criterionprogress = advancementprogress.getCriterion(entry.getKey());
 
                 if (criterionprogress != null && !criterionprogress.isDone()) {
-                    CriterionTriggerInstance criterioninstance = ((Criterion) entry.getValue()).getTrigger();
+                    CriterionTriggerInstance criterioninstance = entry.getValue().getTrigger();
 
                     if (criterioninstance != null) {
                         CriterionTrigger<CriterionTriggerInstance> criteriontrigger = CriteriaTriggers.getCriterion(criterioninstance.getCriterion());
 
                         if (criteriontrigger != null) {
-                            criteriontrigger.addPlayerListener(this, new CriterionTrigger.Listener<>(criterioninstance, advancement, (String) entry.getKey()));
+                            criteriontrigger.addPlayerListener(this, new CriterionTrigger.Listener<>(criterioninstance, advancement, entry.getKey()));
                         }
                     }
                 }
@@ -359,16 +359,16 @@ public class PlayerAdvancements {
 
         while (iterator.hasNext()) {
             Entry<String, Criterion> entry = (Entry) iterator.next();
-            CriterionProgress criterionprogress = advancementprogress.getCriterion((String) entry.getKey());
+            CriterionProgress criterionprogress = advancementprogress.getCriterion(entry.getKey());
 
             if (criterionprogress != null && (criterionprogress.isDone() || advancementprogress.isDone())) {
-                CriterionTriggerInstance criterioninstance = ((Criterion) entry.getValue()).getTrigger();
+                CriterionTriggerInstance criterioninstance = entry.getValue().getTrigger();
 
                 if (criterioninstance != null) {
                     CriterionTrigger<CriterionTriggerInstance> criteriontrigger = CriteriaTriggers.getCriterion(criterioninstance.getCriterion());
 
                     if (criteriontrigger != null) {
-                        criteriontrigger.removePlayerListener(this, new CriterionTrigger.Listener<>(criterioninstance, advancement, (String) entry.getKey()));
+                        criteriontrigger.removePlayerListener(this, new CriterionTrigger.Listener<>(criterioninstance, advancement, entry.getKey()));
                     }
                 }
             }
@@ -388,7 +388,7 @@ public class PlayerAdvancements {
             while (iterator.hasNext()) {
                 advancement = (Advancement) iterator.next();
                 if (this.visible.contains(advancement)) {
-                    map.put(advancement.getId(), (AdvancementProgress) this.advancements.get(advancement));
+                    map.put(advancement.getId(), this.advancements.get(advancement));
                 }
             }
 
@@ -429,7 +429,7 @@ public class PlayerAdvancements {
     }
 
     public AdvancementProgress getOrStartProgress(Advancement advancement) {
-        AdvancementProgress advancementprogress = (AdvancementProgress) this.advancements.get(advancement);
+        AdvancementProgress advancementprogress = this.advancements.get(advancement);
 
         if (advancementprogress == null) {
             advancementprogress = new AdvancementProgress();
diff --git a/src/main/java/net/minecraft/server/ServerFunctionManager.java b/src/main/java/net/minecraft/server/ServerFunctionManager.java
index 6483a1d461904a0584b6808b2f86ac7329bba963..b7b048540f0491ce9fef84c95ce731d26c2ed9e5 100644
--- a/src/main/java/net/minecraft/server/ServerFunctionManager.java
+++ b/src/main/java/net/minecraft/server/ServerFunctionManager.java
@@ -73,7 +73,7 @@ public class ServerFunctionManager {
     }
 
     public int execute(CommandFunction function, CommandSourceStack source) {
-        return this.execute(function, source, (ServerFunctionManager.TraceCallbacks) null);
+        return this.execute(function, source, null);
     }
 
     public int execute(CommandFunction function, CommandSourceStack source, @Nullable ServerFunctionManager.TraceCallbacks tracer) {
@@ -176,7 +176,7 @@ public class ServerFunctionManager {
                 }
 
                 try {
-                    ServerFunctionManager.QueuedCommand customfunctiondata_b = (ServerFunctionManager.QueuedCommand) this.commandQueue.removeFirst();
+                    ServerFunctionManager.QueuedCommand customfunctiondata_b = this.commandQueue.removeFirst();
                     ProfilerFiller gameprofilerfiller = ServerFunctionManager.this.server.getProfiler();
 
                     Objects.requireNonNull(customfunctiondata_b);
diff --git a/src/main/java/net/minecraft/server/ServerScoreboard.java b/src/main/java/net/minecraft/server/ServerScoreboard.java
index 3a4a0727ad44322e3ba85512cd077808dab080b7..f405118e3f754fffb621e0d8adba671dea29da5e 100644
--- a/src/main/java/net/minecraft/server/ServerScoreboard.java
+++ b/src/main/java/net/minecraft/server/ServerScoreboard.java
@@ -43,7 +43,7 @@ public class ServerScoreboard extends Scoreboard {
     @Override
     public void onPlayerRemoved(String playerName) {
         super.onPlayerRemoved(playerName);
-        this.broadcastAll(new ClientboundSetScorePacket(ServerScoreboard.Method.REMOVE, (String) null, playerName, 0));
+        this.broadcastAll(new ClientboundSetScorePacket(ServerScoreboard.Method.REMOVE, null, playerName, 0));
         this.setDirty();
     }
 
@@ -291,7 +291,7 @@ public class ServerScoreboard extends Scoreboard {
 
     // CraftBukkit start - Send to players
     private void broadcastAll(Packet packet) {
-        for (ServerPlayer entityplayer : (List<ServerPlayer>) this.server.getPlayerList().players) {
+        for (ServerPlayer entityplayer : this.server.getPlayerList().players) {
             if (entityplayer.getBukkitEntity().getScoreboard().getHandle() == this) {
                 entityplayer.connection.send(packet);
             }
diff --git a/src/main/java/net/minecraft/server/commands/BanIpCommands.java b/src/main/java/net/minecraft/server/commands/BanIpCommands.java
index 6c1057bb52f56bdcc1ac423e378e7c61e7f7fc2d..693b1f35854aa4bade394803bd793874bf564ced 100644
--- a/src/main/java/net/minecraft/server/commands/BanIpCommands.java
+++ b/src/main/java/net/minecraft/server/commands/BanIpCommands.java
@@ -27,7 +27,7 @@ public class BanIpCommands {
         dispatcher.register(Commands.literal("ban-ip").requires((source) -> {
             return source.hasPermission(3);
         }).then(Commands.argument("target", StringArgumentType.word()).executes((context) -> {
-            return banIpOrName(context.getSource(), StringArgumentType.getString(context, "target"), (Component)null);
+            return banIpOrName(context.getSource(), StringArgumentType.getString(context, "target"), null);
         }).then(Commands.argument("reason", MessageArgument.message()).executes((context) -> {
             return banIpOrName(context.getSource(), StringArgumentType.getString(context, "target"), MessageArgument.getMessage(context, "reason"));
         }))));
@@ -53,7 +53,7 @@ public class BanIpCommands {
             throw ERROR_ALREADY_BANNED.create();
         } else {
             List<ServerPlayer> list = source.getServer().getPlayerList().getPlayersWithAddress(targetIp);
-            IpBanListEntry ipBanListEntry = new IpBanListEntry(targetIp, (Date)null, source.getTextName(), (Date)null, reason == null ? null : reason.getString());
+            IpBanListEntry ipBanListEntry = new IpBanListEntry(targetIp, null, source.getTextName(), null, reason == null ? null : reason.getString());
             ipBanList.add(ipBanListEntry);
             source.sendSuccess(Component.translatable("commands.banip.success", targetIp, ipBanListEntry.getReason()), true);
             if (!list.isEmpty()) {
diff --git a/src/main/java/net/minecraft/server/commands/BanPlayerCommands.java b/src/main/java/net/minecraft/server/commands/BanPlayerCommands.java
index 458b9a730a1f629bd605c26a4ec4440e8ee84b1d..ffedd0e55f6ba1b38e7ebeb6ae094de09f57f81d 100644
--- a/src/main/java/net/minecraft/server/commands/BanPlayerCommands.java
+++ b/src/main/java/net/minecraft/server/commands/BanPlayerCommands.java
@@ -24,7 +24,7 @@ public class BanPlayerCommands {
         dispatcher.register(Commands.literal("ban").requires((source) -> {
             return source.hasPermission(3);
         }).then(Commands.argument("targets", GameProfileArgument.gameProfile()).executes((context) -> {
-            return banPlayers(context.getSource(), GameProfileArgument.getGameProfiles(context, "targets"), (Component)null);
+            return banPlayers(context.getSource(), GameProfileArgument.getGameProfiles(context, "targets"), null);
         }).then(Commands.argument("reason", MessageArgument.message()).executes((context) -> {
             return banPlayers(context.getSource(), GameProfileArgument.getGameProfiles(context, "targets"), MessageArgument.getMessage(context, "reason"));
         }))));
@@ -36,7 +36,7 @@ public class BanPlayerCommands {
 
         for(GameProfile gameProfile : targets) {
             if (!userBanList.isBanned(gameProfile)) {
-                UserBanListEntry userBanListEntry = new UserBanListEntry(gameProfile, (Date)null, source.getTextName(), (Date)null, reason == null ? null : reason.getString());
+                UserBanListEntry userBanListEntry = new UserBanListEntry(gameProfile, null, source.getTextName(), null, reason == null ? null : reason.getString());
                 userBanList.add(userBanListEntry);
                 ++i;
                 source.sendSuccess(Component.translatable("commands.ban.success", ComponentUtils.getDisplayName(gameProfile), userBanListEntry.getReason()), true);
diff --git a/src/main/java/net/minecraft/server/commands/DifficultyCommand.java b/src/main/java/net/minecraft/server/commands/DifficultyCommand.java
index 817193ca5fc15134d2985187bc2226ccbb4f0108..f3b0cd54e23748f8c82351d62341e23e77ff4bc8 100644
--- a/src/main/java/net/minecraft/server/commands/DifficultyCommand.java
+++ b/src/main/java/net/minecraft/server/commands/DifficultyCommand.java
@@ -26,7 +26,7 @@ public class DifficultyCommand {
             Difficulty enumdifficulty = aenumdifficulty[j];
 
             literalargumentbuilder.then(net.minecraft.commands.Commands.literal(enumdifficulty.getKey()).executes((commandcontext) -> {
-                return DifficultyCommand.setDifficulty((CommandSourceStack) commandcontext.getSource(), enumdifficulty);
+                return DifficultyCommand.setDifficulty(commandcontext.getSource(), enumdifficulty);
             }));
         }
 
diff --git a/src/main/java/net/minecraft/server/commands/EffectCommands.java b/src/main/java/net/minecraft/server/commands/EffectCommands.java
index fc18b746f77880c97fbef09c1258135ea8e4bf6e..0121367f867a8273a0655793a7157ced2c31522f 100644
--- a/src/main/java/net/minecraft/server/commands/EffectCommands.java
+++ b/src/main/java/net/minecraft/server/commands/EffectCommands.java
@@ -32,22 +32,22 @@ public class EffectCommands {
     public EffectCommands() {}
 
     public static void register(CommandDispatcher<CommandSourceStack> dispatcher, CommandBuildContext registryAccess) {
-        dispatcher.register((LiteralArgumentBuilder) ((LiteralArgumentBuilder) ((LiteralArgumentBuilder) net.minecraft.commands.Commands.literal("effect").requires((commandlistenerwrapper) -> {
+        dispatcher.register((LiteralArgumentBuilder) ((LiteralArgumentBuilder) net.minecraft.commands.Commands.literal("effect").requires((commandlistenerwrapper) -> {
             return commandlistenerwrapper.hasPermission(2);
         })).then(((LiteralArgumentBuilder) net.minecraft.commands.Commands.literal("clear").executes((commandcontext) -> {
-            return EffectCommands.clearEffects((CommandSourceStack) commandcontext.getSource(), ImmutableList.of(((CommandSourceStack) commandcontext.getSource()).getEntityOrException()));
+            return EffectCommands.clearEffects(commandcontext.getSource(), ImmutableList.of(commandcontext.getSource().getEntityOrException()));
         })).then(((RequiredArgumentBuilder) net.minecraft.commands.Commands.argument("targets", EntityArgument.entities()).executes((commandcontext) -> {
-            return EffectCommands.clearEffects((CommandSourceStack) commandcontext.getSource(), EntityArgument.getEntities(commandcontext, "targets"));
+            return EffectCommands.clearEffects(commandcontext.getSource(), EntityArgument.getEntities(commandcontext, "targets"));
         })).then(net.minecraft.commands.Commands.argument("effect", ResourceArgument.resource(registryAccess, Registries.MOB_EFFECT)).executes((commandcontext) -> {
-            return EffectCommands.clearEffect((CommandSourceStack) commandcontext.getSource(), EntityArgument.getEntities(commandcontext, "targets"), ResourceArgument.getMobEffect(commandcontext, "effect"));
-        }))))).then(net.minecraft.commands.Commands.literal("give").then(net.minecraft.commands.Commands.argument("targets", EntityArgument.entities()).then(((RequiredArgumentBuilder) net.minecraft.commands.Commands.argument("effect", ResourceArgument.resource(registryAccess, Registries.MOB_EFFECT)).executes((commandcontext) -> {
-            return EffectCommands.giveEffect((CommandSourceStack) commandcontext.getSource(), EntityArgument.getEntities(commandcontext, "targets"), ResourceArgument.getMobEffect(commandcontext, "effect"), (Integer) null, 0, true);
+            return EffectCommands.clearEffect(commandcontext.getSource(), EntityArgument.getEntities(commandcontext, "targets"), ResourceArgument.getMobEffect(commandcontext, "effect"));
+        })))).then(net.minecraft.commands.Commands.literal("give").then(net.minecraft.commands.Commands.argument("targets", EntityArgument.entities()).then(((RequiredArgumentBuilder) net.minecraft.commands.Commands.argument("effect", ResourceArgument.resource(registryAccess, Registries.MOB_EFFECT)).executes((commandcontext) -> {
+            return EffectCommands.giveEffect(commandcontext.getSource(), EntityArgument.getEntities(commandcontext, "targets"), ResourceArgument.getMobEffect(commandcontext, "effect"), null, 0, true);
         })).then(((RequiredArgumentBuilder) net.minecraft.commands.Commands.argument("seconds", IntegerArgumentType.integer(1, 1000000)).executes((commandcontext) -> {
-            return EffectCommands.giveEffect((CommandSourceStack) commandcontext.getSource(), EntityArgument.getEntities(commandcontext, "targets"), ResourceArgument.getMobEffect(commandcontext, "effect"), Integer.valueOf(IntegerArgumentType.getInteger(commandcontext, "seconds")), 0, true);
+            return EffectCommands.giveEffect(commandcontext.getSource(), EntityArgument.getEntities(commandcontext, "targets"), ResourceArgument.getMobEffect(commandcontext, "effect"), Integer.valueOf(IntegerArgumentType.getInteger(commandcontext, "seconds")), 0, true);
         })).then(((RequiredArgumentBuilder) net.minecraft.commands.Commands.argument("amplifier", IntegerArgumentType.integer(0, 255)).executes((commandcontext) -> {
-            return EffectCommands.giveEffect((CommandSourceStack) commandcontext.getSource(), EntityArgument.getEntities(commandcontext, "targets"), ResourceArgument.getMobEffect(commandcontext, "effect"), Integer.valueOf(IntegerArgumentType.getInteger(commandcontext, "seconds")), IntegerArgumentType.getInteger(commandcontext, "amplifier"), true);
+            return EffectCommands.giveEffect(commandcontext.getSource(), EntityArgument.getEntities(commandcontext, "targets"), ResourceArgument.getMobEffect(commandcontext, "effect"), Integer.valueOf(IntegerArgumentType.getInteger(commandcontext, "seconds")), IntegerArgumentType.getInteger(commandcontext, "amplifier"), true);
         })).then(net.minecraft.commands.Commands.argument("hideParticles", BoolArgumentType.bool()).executes((commandcontext) -> {
-            return EffectCommands.giveEffect((CommandSourceStack) commandcontext.getSource(), EntityArgument.getEntities(commandcontext, "targets"), ResourceArgument.getMobEffect(commandcontext, "effect"), Integer.valueOf(IntegerArgumentType.getInteger(commandcontext, "seconds")), IntegerArgumentType.getInteger(commandcontext, "amplifier"), !BoolArgumentType.getBool(commandcontext, "hideParticles"));
+            return EffectCommands.giveEffect(commandcontext.getSource(), EntityArgument.getEntities(commandcontext, "targets"), ResourceArgument.getMobEffect(commandcontext, "effect"), Integer.valueOf(IntegerArgumentType.getInteger(commandcontext, "seconds")), IntegerArgumentType.getInteger(commandcontext, "amplifier"), !BoolArgumentType.getBool(commandcontext, "hideParticles"));
         }))))))));
     }
 
@@ -86,7 +86,7 @@ public class EffectCommands {
             throw EffectCommands.ERROR_GIVE_FAILED.create();
         } else {
             if (targets.size() == 1) {
-                source.sendSuccess(Component.translatable("commands.effect.give.success.single", mobeffectlist.getDisplayName(), ((Entity) targets.iterator().next()).getDisplayName(), Integer.valueOf(k / 20)), true);
+                source.sendSuccess(Component.translatable("commands.effect.give.success.single", mobeffectlist.getDisplayName(), targets.iterator().next().getDisplayName(), Integer.valueOf(k / 20)), true);
             } else {
                 source.sendSuccess(Component.translatable("commands.effect.give.success.multiple", mobeffectlist.getDisplayName(), Integer.valueOf(targets.size()), Integer.valueOf(k / 20)), true);
             }
@@ -111,7 +111,7 @@ public class EffectCommands {
             throw EffectCommands.ERROR_CLEAR_EVERYTHING_FAILED.create();
         } else {
             if (targets.size() == 1) {
-                source.sendSuccess(Component.translatable("commands.effect.clear.everything.success.single", ((Entity) targets.iterator().next()).getDisplayName()), true);
+                source.sendSuccess(Component.translatable("commands.effect.clear.everything.success.single", targets.iterator().next().getDisplayName()), true);
             } else {
                 source.sendSuccess(Component.translatable("commands.effect.clear.everything.success.multiple", Integer.valueOf(targets.size())), true);
             }
@@ -137,7 +137,7 @@ public class EffectCommands {
             throw EffectCommands.ERROR_CLEAR_SPECIFIC_FAILED.create();
         } else {
             if (targets.size() == 1) {
-                source.sendSuccess(Component.translatable("commands.effect.clear.specific.success.single", mobeffectlist.getDisplayName(), ((Entity) targets.iterator().next()).getDisplayName()), true);
+                source.sendSuccess(Component.translatable("commands.effect.clear.specific.success.single", mobeffectlist.getDisplayName(), targets.iterator().next().getDisplayName()), true);
             } else {
                 source.sendSuccess(Component.translatable("commands.effect.clear.specific.success.multiple", mobeffectlist.getDisplayName(), Integer.valueOf(targets.size())), true);
             }
diff --git a/src/main/java/net/minecraft/server/commands/GameRuleCommand.java b/src/main/java/net/minecraft/server/commands/GameRuleCommand.java
index 745b8724b7536a5b2c2c94ae8fd703ea755e8072..d5962ccee7b06e9f7fbfbdbc6f0f56d62a59fdc5 100644
--- a/src/main/java/net/minecraft/server/commands/GameRuleCommand.java
+++ b/src/main/java/net/minecraft/server/commands/GameRuleCommand.java
@@ -12,7 +12,7 @@ public class GameRuleCommand {
     public GameRuleCommand() {}
 
     public static void register(CommandDispatcher<CommandSourceStack> dispatcher) {
-        final LiteralArgumentBuilder<CommandSourceStack> literalargumentbuilder = (LiteralArgumentBuilder) net.minecraft.commands.Commands.literal("gamerule").requires((commandlistenerwrapper) -> {
+        final LiteralArgumentBuilder<CommandSourceStack> literalargumentbuilder = net.minecraft.commands.Commands.literal("gamerule").requires((commandlistenerwrapper) -> {
             return commandlistenerwrapper.hasPermission(2);
         });
 
@@ -20,7 +20,7 @@ public class GameRuleCommand {
             @Override
             public <T extends GameRules.Value<T>> void visit(GameRules.Key<T> key, GameRules.Type<T> type) {
                 literalargumentbuilder.then(((LiteralArgumentBuilder) net.minecraft.commands.Commands.literal(key.getId()).executes((commandcontext) -> {
-                    return GameRuleCommand.queryRule((CommandSourceStack) commandcontext.getSource(), key);
+                    return GameRuleCommand.queryRule(commandcontext.getSource(), key);
                 })).then(type.createArgument("value").executes((commandcontext) -> {
                     return GameRuleCommand.setRule(commandcontext, key);
                 })));
@@ -30,7 +30,7 @@ public class GameRuleCommand {
     }
 
     static <T extends GameRules.Value<T>> int setRule(CommandContext<CommandSourceStack> context, GameRules.Key<T> key) {
-        CommandSourceStack commandlistenerwrapper = (CommandSourceStack) context.getSource();
+        CommandSourceStack commandlistenerwrapper = context.getSource();
         T t0 = commandlistenerwrapper.getLevel().getGameRules().getRule(key); // CraftBukkit
 
         t0.setFromArgument(context, "value", key); // Paper
diff --git a/src/main/java/net/minecraft/server/commands/GiveCommand.java b/src/main/java/net/minecraft/server/commands/GiveCommand.java
index b1e9dcd662b609767857a5946104cbf90f5d44bb..f8ef066140d93e7fc52771415dfcb3681c83aee6 100644
--- a/src/main/java/net/minecraft/server/commands/GiveCommand.java
+++ b/src/main/java/net/minecraft/server/commands/GiveCommand.java
@@ -30,9 +30,9 @@ public class GiveCommand {
         dispatcher.register((LiteralArgumentBuilder) ((LiteralArgumentBuilder) net.minecraft.commands.Commands.literal("give").requires((commandlistenerwrapper) -> {
             return commandlistenerwrapper.hasPermission(2);
         })).then(net.minecraft.commands.Commands.argument("targets", EntityArgument.players()).then(((RequiredArgumentBuilder) net.minecraft.commands.Commands.argument("item", ItemArgument.item(commandRegistryAccess)).executes((commandcontext) -> {
-            return GiveCommand.giveItem((CommandSourceStack) commandcontext.getSource(), ItemArgument.getItem(commandcontext, "item"), EntityArgument.getPlayers(commandcontext, "targets"), 1);
+            return GiveCommand.giveItem(commandcontext.getSource(), ItemArgument.getItem(commandcontext, "item"), EntityArgument.getPlayers(commandcontext, "targets"), 1);
         })).then(net.minecraft.commands.Commands.argument("count", IntegerArgumentType.integer(1)).executes((commandcontext) -> {
-            return GiveCommand.giveItem((CommandSourceStack) commandcontext.getSource(), ItemArgument.getItem(commandcontext, "item"), EntityArgument.getPlayers(commandcontext, "targets"), IntegerArgumentType.getInteger(commandcontext, "count"));
+            return GiveCommand.giveItem(commandcontext.getSource(), ItemArgument.getItem(commandcontext, "item"), EntityArgument.getPlayers(commandcontext, "targets"), IntegerArgumentType.getInteger(commandcontext, "count"));
         })))));
     }
 
@@ -65,7 +65,7 @@ public class GiveCommand {
                             entityitem.makeFakeItem();
                         }
 
-                        entityplayer.level.playSound((Player) null, entityplayer.getX(), entityplayer.getY(), entityplayer.getZ(), SoundEvents.ITEM_PICKUP, SoundSource.PLAYERS, 0.2F, ((entityplayer.getRandom().nextFloat() - entityplayer.getRandom().nextFloat()) * 0.7F + 1.0F) * 2.0F);
+                        entityplayer.level.playSound(null, entityplayer.getX(), entityplayer.getY(), entityplayer.getZ(), SoundEvents.ITEM_PICKUP, SoundSource.PLAYERS, 0.2F, ((entityplayer.getRandom().nextFloat() - entityplayer.getRandom().nextFloat()) * 0.7F + 1.0F) * 2.0F);
                         entityplayer.containerMenu.broadcastChanges();
                     } else {
                         entityitem = entityplayer.drop(itemstack, false);
@@ -78,7 +78,7 @@ public class GiveCommand {
             }
 
             if (targets.size() == 1) {
-                source.sendSuccess(Component.translatable("commands.give.success.single", Integer.valueOf(count), item.createItemStack(count, false).getDisplayName(), ((ServerPlayer) targets.iterator().next()).getDisplayName()), true);
+                source.sendSuccess(Component.translatable("commands.give.success.single", Integer.valueOf(count), item.createItemStack(count, false).getDisplayName(), targets.iterator().next().getDisplayName()), true);
             } else {
                 source.sendSuccess(Component.translatable("commands.give.success.single", Integer.valueOf(count), item.createItemStack(count, false).getDisplayName(), Integer.valueOf(targets.size())), true);
             }
diff --git a/src/main/java/net/minecraft/server/commands/ListPlayersCommand.java b/src/main/java/net/minecraft/server/commands/ListPlayersCommand.java
index a0409db7f8633f0338ca2aeb152ccf4d4976fb6d..06926d6bd31d150fd8411bc93e80815283f9ce59 100644
--- a/src/main/java/net/minecraft/server/commands/ListPlayersCommand.java
+++ b/src/main/java/net/minecraft/server/commands/ListPlayersCommand.java
@@ -17,9 +17,9 @@ public class ListPlayersCommand {
 
     public static void register(CommandDispatcher<CommandSourceStack> dispatcher) {
         dispatcher.register((LiteralArgumentBuilder) ((LiteralArgumentBuilder) net.minecraft.commands.Commands.literal("list").executes((commandcontext) -> {
-            return ListPlayersCommand.listPlayers((CommandSourceStack) commandcontext.getSource());
+            return ListPlayersCommand.listPlayers(commandcontext.getSource());
         })).then(net.minecraft.commands.Commands.literal("uuids").executes((commandcontext) -> {
-            return ListPlayersCommand.listPlayersWithUuids((CommandSourceStack) commandcontext.getSource());
+            return ListPlayersCommand.listPlayersWithUuids(commandcontext.getSource());
         })));
     }
 
diff --git a/src/main/java/net/minecraft/server/commands/LootCommand.java b/src/main/java/net/minecraft/server/commands/LootCommand.java
index e023edbe73bbd409afacc0a14f73354a8ca5fb8a..af148bf7ea098490358bab94fc51b7d41c21c368 100644
--- a/src/main/java/net/minecraft/server/commands/LootCommand.java
+++ b/src/main/java/net/minecraft/server/commands/LootCommand.java
@@ -49,9 +49,9 @@ import net.minecraft.world.phys.Vec3;
 public class LootCommand {
 
     public static final SuggestionProvider<CommandSourceStack> SUGGEST_LOOT_TABLE = (commandcontext, suggestionsbuilder) -> {
-        LootTables loottableregistry = ((CommandSourceStack) commandcontext.getSource()).getServer().getLootTables();
+        LootTables loottableregistry = commandcontext.getSource().getServer().getLootTables();
 
-        return SharedSuggestionProvider.suggestResource((Iterable) loottableregistry.getIds(), suggestionsbuilder);
+        return SharedSuggestionProvider.suggestResource(loottableregistry.getIds(), suggestionsbuilder);
     };
     private static final DynamicCommandExceptionType ERROR_NO_HELD_ITEMS = new DynamicCommandExceptionType((object) -> {
         return Component.translatable("commands.drop.no_held_items", object);
@@ -63,29 +63,29 @@ public class LootCommand {
     public LootCommand() {}
 
     public static void register(CommandDispatcher<CommandSourceStack> dispatcher, CommandBuildContext commandRegistryAccess) {
-        dispatcher.register((LiteralArgumentBuilder) LootCommand.addTargets((LiteralArgumentBuilder) net.minecraft.commands.Commands.literal("loot").requires((commandlistenerwrapper) -> {
+        dispatcher.register(LootCommand.addTargets((LiteralArgumentBuilder) net.minecraft.commands.Commands.literal("loot").requires((commandlistenerwrapper) -> {
             return commandlistenerwrapper.hasPermission(2);
         }), (argumentbuilder, commandloot_b) -> {
-            return argumentbuilder.then(net.minecraft.commands.Commands.literal("fish").then(net.minecraft.commands.Commands.argument("loot_table", ResourceLocationArgument.id()).suggests(LootCommand.SUGGEST_LOOT_TABLE).then(((RequiredArgumentBuilder) ((RequiredArgumentBuilder) ((RequiredArgumentBuilder) net.minecraft.commands.Commands.argument("pos", BlockPosArgument.blockPos()).executes((commandcontext) -> {
+            return argumentbuilder.then(net.minecraft.commands.Commands.literal("fish").then(net.minecraft.commands.Commands.argument("loot_table", ResourceLocationArgument.id()).suggests(LootCommand.SUGGEST_LOOT_TABLE).then(((RequiredArgumentBuilder) net.minecraft.commands.Commands.argument("pos", BlockPosArgument.blockPos()).executes((commandcontext) -> {
                 return LootCommand.dropFishingLoot(commandcontext, ResourceLocationArgument.getId(commandcontext, "loot_table"), BlockPosArgument.getLoadedBlockPos(commandcontext, "pos"), ItemStack.EMPTY, commandloot_b);
             })).then(net.minecraft.commands.Commands.argument("tool", ItemArgument.item(commandRegistryAccess)).executes((commandcontext) -> {
                 return LootCommand.dropFishingLoot(commandcontext, ResourceLocationArgument.getId(commandcontext, "loot_table"), BlockPosArgument.getLoadedBlockPos(commandcontext, "pos"), ItemArgument.getItem(commandcontext, "tool").createItemStack(1, false), commandloot_b);
-            }))).then(net.minecraft.commands.Commands.literal("mainhand").executes((commandcontext) -> {
-                return LootCommand.dropFishingLoot(commandcontext, ResourceLocationArgument.getId(commandcontext, "loot_table"), BlockPosArgument.getLoadedBlockPos(commandcontext, "pos"), LootCommand.getSourceHandItem((CommandSourceStack) commandcontext.getSource(), EquipmentSlot.MAINHAND), commandloot_b);
-            }))).then(net.minecraft.commands.Commands.literal("offhand").executes((commandcontext) -> {
-                return LootCommand.dropFishingLoot(commandcontext, ResourceLocationArgument.getId(commandcontext, "loot_table"), BlockPosArgument.getLoadedBlockPos(commandcontext, "pos"), LootCommand.getSourceHandItem((CommandSourceStack) commandcontext.getSource(), EquipmentSlot.OFFHAND), commandloot_b);
+            })).then(net.minecraft.commands.Commands.literal("mainhand").executes((commandcontext) -> {
+                return LootCommand.dropFishingLoot(commandcontext, ResourceLocationArgument.getId(commandcontext, "loot_table"), BlockPosArgument.getLoadedBlockPos(commandcontext, "pos"), LootCommand.getSourceHandItem(commandcontext.getSource(), EquipmentSlot.MAINHAND), commandloot_b);
+            })).then(net.minecraft.commands.Commands.literal("offhand").executes((commandcontext) -> {
+                return LootCommand.dropFishingLoot(commandcontext, ResourceLocationArgument.getId(commandcontext, "loot_table"), BlockPosArgument.getLoadedBlockPos(commandcontext, "pos"), LootCommand.getSourceHandItem(commandcontext.getSource(), EquipmentSlot.OFFHAND), commandloot_b);
             }))))).then(net.minecraft.commands.Commands.literal("loot").then(net.minecraft.commands.Commands.argument("loot_table", ResourceLocationArgument.id()).suggests(LootCommand.SUGGEST_LOOT_TABLE).executes((commandcontext) -> {
                 return LootCommand.dropChestLoot(commandcontext, ResourceLocationArgument.getId(commandcontext, "loot_table"), commandloot_b);
             }))).then(net.minecraft.commands.Commands.literal("kill").then(net.minecraft.commands.Commands.argument("target", EntityArgument.entity()).executes((commandcontext) -> {
                 return LootCommand.dropKillLoot(commandcontext, EntityArgument.getEntity(commandcontext, "target"), commandloot_b);
-            }))).then(net.minecraft.commands.Commands.literal("mine").then(((RequiredArgumentBuilder) ((RequiredArgumentBuilder) ((RequiredArgumentBuilder) net.minecraft.commands.Commands.argument("pos", BlockPosArgument.blockPos()).executes((commandcontext) -> {
+            }))).then(net.minecraft.commands.Commands.literal("mine").then(((RequiredArgumentBuilder) net.minecraft.commands.Commands.argument("pos", BlockPosArgument.blockPos()).executes((commandcontext) -> {
                 return LootCommand.dropBlockLoot(commandcontext, BlockPosArgument.getLoadedBlockPos(commandcontext, "pos"), ItemStack.EMPTY, commandloot_b);
             })).then(net.minecraft.commands.Commands.argument("tool", ItemArgument.item(commandRegistryAccess)).executes((commandcontext) -> {
                 return LootCommand.dropBlockLoot(commandcontext, BlockPosArgument.getLoadedBlockPos(commandcontext, "pos"), ItemArgument.getItem(commandcontext, "tool").createItemStack(1, false), commandloot_b);
-            }))).then(net.minecraft.commands.Commands.literal("mainhand").executes((commandcontext) -> {
-                return LootCommand.dropBlockLoot(commandcontext, BlockPosArgument.getLoadedBlockPos(commandcontext, "pos"), LootCommand.getSourceHandItem((CommandSourceStack) commandcontext.getSource(), EquipmentSlot.MAINHAND), commandloot_b);
-            }))).then(net.minecraft.commands.Commands.literal("offhand").executes((commandcontext) -> {
-                return LootCommand.dropBlockLoot(commandcontext, BlockPosArgument.getLoadedBlockPos(commandcontext, "pos"), LootCommand.getSourceHandItem((CommandSourceStack) commandcontext.getSource(), EquipmentSlot.OFFHAND), commandloot_b);
+            })).then(net.minecraft.commands.Commands.literal("mainhand").executes((commandcontext) -> {
+                return LootCommand.dropBlockLoot(commandcontext, BlockPosArgument.getLoadedBlockPos(commandcontext, "pos"), LootCommand.getSourceHandItem(commandcontext.getSource(), EquipmentSlot.MAINHAND), commandloot_b);
+            })).then(net.minecraft.commands.Commands.literal("offhand").executes((commandcontext) -> {
+                return LootCommand.dropBlockLoot(commandcontext, BlockPosArgument.getLoadedBlockPos(commandcontext, "pos"), LootCommand.getSourceHandItem(commandcontext.getSource(), EquipmentSlot.OFFHAND), commandloot_b);
             }))));
         }));
     }
@@ -96,15 +96,15 @@ public class LootCommand {
         }).then(sourceConstructor.construct(net.minecraft.commands.Commands.argument("count", IntegerArgumentType.integer(0)), (commandcontext, list, commandloot_a) -> {
             return LootCommand.entityReplace(EntityArgument.getEntities(commandcontext, "entities"), SlotArgument.getSlot(commandcontext, "slot"), IntegerArgumentType.getInteger(commandcontext, "count"), list, commandloot_a);
         })))))).then(net.minecraft.commands.Commands.literal("block").then(net.minecraft.commands.Commands.argument("targetPos", BlockPosArgument.blockPos()).then(sourceConstructor.construct(net.minecraft.commands.Commands.argument("slot", SlotArgument.slot()), (commandcontext, list, commandloot_a) -> {
-            return LootCommand.blockReplace((CommandSourceStack) commandcontext.getSource(), BlockPosArgument.getLoadedBlockPos(commandcontext, "targetPos"), SlotArgument.getSlot(commandcontext, "slot"), list.size(), list, commandloot_a);
+            return LootCommand.blockReplace(commandcontext.getSource(), BlockPosArgument.getLoadedBlockPos(commandcontext, "targetPos"), SlotArgument.getSlot(commandcontext, "slot"), list.size(), list, commandloot_a);
         }).then(sourceConstructor.construct(net.minecraft.commands.Commands.argument("count", IntegerArgumentType.integer(0)), (commandcontext, list, commandloot_a) -> {
-            return LootCommand.blockReplace((CommandSourceStack) commandcontext.getSource(), BlockPosArgument.getLoadedBlockPos(commandcontext, "targetPos"), IntegerArgumentType.getInteger(commandcontext, "slot"), IntegerArgumentType.getInteger(commandcontext, "count"), list, commandloot_a);
+            return LootCommand.blockReplace(commandcontext.getSource(), BlockPosArgument.getLoadedBlockPos(commandcontext, "targetPos"), IntegerArgumentType.getInteger(commandcontext, "slot"), IntegerArgumentType.getInteger(commandcontext, "count"), list, commandloot_a);
         })))))).then(net.minecraft.commands.Commands.literal("insert").then(sourceConstructor.construct(net.minecraft.commands.Commands.argument("targetPos", BlockPosArgument.blockPos()), (commandcontext, list, commandloot_a) -> {
-            return LootCommand.blockDistribute((CommandSourceStack) commandcontext.getSource(), BlockPosArgument.getLoadedBlockPos(commandcontext, "targetPos"), list, commandloot_a);
+            return LootCommand.blockDistribute(commandcontext.getSource(), BlockPosArgument.getLoadedBlockPos(commandcontext, "targetPos"), list, commandloot_a);
         }))).then(net.minecraft.commands.Commands.literal("give").then(sourceConstructor.construct(net.minecraft.commands.Commands.argument("players", EntityArgument.players()), (commandcontext, list, commandloot_a) -> {
             return LootCommand.playerGive(EntityArgument.getPlayers(commandcontext, "players"), list, commandloot_a);
         }))).then(net.minecraft.commands.Commands.literal("spawn").then(sourceConstructor.construct(net.minecraft.commands.Commands.argument("targetPos", Vec3Argument.vec3()), (commandcontext, list, commandloot_a) -> {
-            return LootCommand.dropInWorld((CommandSourceStack) commandcontext.getSource(), Vec3Argument.getVec3(commandcontext, "targetPos"), list, commandloot_a);
+            return LootCommand.dropInWorld(commandcontext.getSource(), Vec3Argument.getVec3(commandcontext, "targetPos"), list, commandloot_a);
         })));
     }
 
@@ -172,7 +172,7 @@ public class LootCommand {
 
             for (int l = 0; l < stackCount; ++l) {
                 int i1 = slot + l;
-                ItemStack itemstack = l < stacks.size() ? (ItemStack) stacks.get(l) : ItemStack.EMPTY;
+                ItemStack itemstack = l < stacks.size() ? stacks.get(l) : ItemStack.EMPTY;
 
                 if (iinventory.canPlaceItem(i1, itemstack)) {
                     iinventory.setItem(i1, itemstack);
@@ -214,7 +214,7 @@ public class LootCommand {
 
     private static void setSlots(Entity entity, List<ItemStack> stacks, int slot, int stackCount, List<ItemStack> addedStacks) {
         for (int k = 0; k < stackCount; ++k) {
-            ItemStack itemstack = k < stacks.size() ? (ItemStack) stacks.get(k) : ItemStack.EMPTY;
+            ItemStack itemstack = k < stacks.size() ? stacks.get(k) : ItemStack.EMPTY;
             SlotAccess slotaccess = entity.getSlot(slot + k);
 
             if (slotaccess != SlotAccess.NULL && slotaccess.set(itemstack.copy())) {
@@ -261,7 +261,7 @@ public class LootCommand {
 
     private static void callback(CommandSourceStack source, List<ItemStack> stacks) {
         if (stacks.size() == 1) {
-            ItemStack itemstack = (ItemStack) stacks.get(0);
+            ItemStack itemstack = stacks.get(0);
 
             source.sendSuccess(Component.translatable("commands.drop.success.single", Integer.valueOf(itemstack.getCount()), itemstack.getDisplayName()), false);
         } else {
@@ -272,7 +272,7 @@ public class LootCommand {
 
     private static void callback(CommandSourceStack source, List<ItemStack> stacks, ResourceLocation lootTable) {
         if (stacks.size() == 1) {
-            ItemStack itemstack = (ItemStack) stacks.get(0);
+            ItemStack itemstack = stacks.get(0);
 
             source.sendSuccess(Component.translatable("commands.drop.success.single_with_table", Integer.valueOf(itemstack.getCount()), itemstack.getDisplayName(), lootTable), false);
         } else {
@@ -292,7 +292,7 @@ public class LootCommand {
     }
 
     private static int dropBlockLoot(CommandContext<CommandSourceStack> context, BlockPos pos, ItemStack stack, LootCommand.DropConsumer constructor) throws CommandSyntaxException {
-        CommandSourceStack commandlistenerwrapper = (CommandSourceStack) context.getSource();
+        CommandSourceStack commandlistenerwrapper = context.getSource();
         ServerLevel worldserver = commandlistenerwrapper.getLevel();
         BlockState iblockdata = worldserver.getBlockState(pos);
         BlockEntity tileentity = worldserver.getBlockEntity(pos);
@@ -309,7 +309,7 @@ public class LootCommand {
             throw LootCommand.ERROR_NO_LOOT_TABLE.create(entity.getDisplayName());
         } else {
             ResourceLocation minecraftkey = ((LivingEntity) entity).getLootTable();
-            CommandSourceStack commandlistenerwrapper = (CommandSourceStack) context.getSource();
+            CommandSourceStack commandlistenerwrapper = context.getSource();
             LootContext.Builder loottableinfo_builder = new LootContext.Builder(commandlistenerwrapper.getLevel());
             Entity entity1 = commandlistenerwrapper.getEntity();
 
@@ -332,21 +332,21 @@ public class LootCommand {
     }
 
     private static int dropChestLoot(CommandContext<CommandSourceStack> context, ResourceLocation lootTable, LootCommand.DropConsumer constructor) throws CommandSyntaxException {
-        CommandSourceStack commandlistenerwrapper = (CommandSourceStack) context.getSource();
+        CommandSourceStack commandlistenerwrapper = context.getSource();
         LootContext.Builder loottableinfo_builder = (new LootContext.Builder(commandlistenerwrapper.getLevel())).withOptionalParameter(LootContextParams.THIS_ENTITY, commandlistenerwrapper.getEntity()).withParameter(LootContextParams.ORIGIN, commandlistenerwrapper.getPosition());
 
         return LootCommand.drop(context, lootTable, loottableinfo_builder.create(LootContextParamSets.CHEST), constructor);
     }
 
     private static int dropFishingLoot(CommandContext<CommandSourceStack> context, ResourceLocation lootTable, BlockPos pos, ItemStack stack, LootCommand.DropConsumer constructor) throws CommandSyntaxException {
-        CommandSourceStack commandlistenerwrapper = (CommandSourceStack) context.getSource();
+        CommandSourceStack commandlistenerwrapper = context.getSource();
         LootContext loottableinfo = (new LootContext.Builder(commandlistenerwrapper.getLevel())).withParameter(LootContextParams.ORIGIN, Vec3.atCenterOf(pos)).withParameter(LootContextParams.TOOL, stack).withOptionalParameter(LootContextParams.THIS_ENTITY, commandlistenerwrapper.getEntity()).create(LootContextParamSets.FISHING);
 
         return LootCommand.drop(context, lootTable, loottableinfo, constructor);
     }
 
     private static int drop(CommandContext<CommandSourceStack> context, ResourceLocation lootTable, LootContext lootContext, LootCommand.DropConsumer constructor) throws CommandSyntaxException {
-        CommandSourceStack commandlistenerwrapper = (CommandSourceStack) context.getSource();
+        CommandSourceStack commandlistenerwrapper = context.getSource();
         LootTable loottable = commandlistenerwrapper.getServer().getLootTables().get(lootTable);
         List<ItemStack> list = loottable.getRandomItems(lootContext);
 
diff --git a/src/main/java/net/minecraft/server/commands/ScheduleCommand.java b/src/main/java/net/minecraft/server/commands/ScheduleCommand.java
index d20339db13d9862456b47ffda989c070c56bca88..ce24588c670fed8a4eaa39f75f90f8fe399dc6eb 100644
--- a/src/main/java/net/minecraft/server/commands/ScheduleCommand.java
+++ b/src/main/java/net/minecraft/server/commands/ScheduleCommand.java
@@ -31,22 +31,22 @@ public class ScheduleCommand {
         return Component.translatable("commands.schedule.cleared.failure", object);
     });
     private static final SuggestionProvider<CommandSourceStack> SUGGEST_SCHEDULE = (commandcontext, suggestionsbuilder) -> {
-        return SharedSuggestionProvider.suggest((Iterable) ((net.minecraft.commands.CommandSourceStack) commandcontext.getSource()).getLevel().serverLevelData.getScheduledEvents().getEventsIds(), suggestionsbuilder); // Paper
+        return SharedSuggestionProvider.suggest(commandcontext.getSource().getLevel().serverLevelData.getScheduledEvents().getEventsIds(), suggestionsbuilder); // Paper
     };
 
     public ScheduleCommand() {}
 
     public static void register(CommandDispatcher<CommandSourceStack> dispatcher) {
-        dispatcher.register((LiteralArgumentBuilder) ((LiteralArgumentBuilder) ((LiteralArgumentBuilder) net.minecraft.commands.Commands.literal("schedule").requires((commandlistenerwrapper) -> {
+        dispatcher.register((LiteralArgumentBuilder) ((LiteralArgumentBuilder) net.minecraft.commands.Commands.literal("schedule").requires((commandlistenerwrapper) -> {
             return commandlistenerwrapper.hasPermission(2);
-        })).then(net.minecraft.commands.Commands.literal("function").then(net.minecraft.commands.Commands.argument("function", FunctionArgument.functions()).suggests(FunctionCommand.SUGGEST_FUNCTION).then(((RequiredArgumentBuilder) ((RequiredArgumentBuilder) net.minecraft.commands.Commands.argument("time", TimeArgument.time()).executes((commandcontext) -> {
-            return ScheduleCommand.schedule((CommandSourceStack) commandcontext.getSource(), FunctionArgument.getFunctionOrTag(commandcontext, "function"), IntegerArgumentType.getInteger(commandcontext, "time"), true);
+        })).then(net.minecraft.commands.Commands.literal("function").then(net.minecraft.commands.Commands.argument("function", FunctionArgument.functions()).suggests(FunctionCommand.SUGGEST_FUNCTION).then(((RequiredArgumentBuilder) net.minecraft.commands.Commands.argument("time", TimeArgument.time()).executes((commandcontext) -> {
+            return ScheduleCommand.schedule(commandcontext.getSource(), FunctionArgument.getFunctionOrTag(commandcontext, "function"), IntegerArgumentType.getInteger(commandcontext, "time"), true);
         })).then(net.minecraft.commands.Commands.literal("append").executes((commandcontext) -> {
-            return ScheduleCommand.schedule((CommandSourceStack) commandcontext.getSource(), FunctionArgument.getFunctionOrTag(commandcontext, "function"), IntegerArgumentType.getInteger(commandcontext, "time"), false);
-        }))).then(net.minecraft.commands.Commands.literal("replace").executes((commandcontext) -> {
-            return ScheduleCommand.schedule((CommandSourceStack) commandcontext.getSource(), FunctionArgument.getFunctionOrTag(commandcontext, "function"), IntegerArgumentType.getInteger(commandcontext, "time"), true);
-        })))))).then(net.minecraft.commands.Commands.literal("clear").then(net.minecraft.commands.Commands.argument("function", StringArgumentType.greedyString()).suggests(ScheduleCommand.SUGGEST_SCHEDULE).executes((commandcontext) -> {
-            return ScheduleCommand.remove((CommandSourceStack) commandcontext.getSource(), StringArgumentType.getString(commandcontext, "function"));
+            return ScheduleCommand.schedule(commandcontext.getSource(), FunctionArgument.getFunctionOrTag(commandcontext, "function"), IntegerArgumentType.getInteger(commandcontext, "time"), false);
+        })).then(net.minecraft.commands.Commands.literal("replace").executes((commandcontext) -> {
+            return ScheduleCommand.schedule(commandcontext.getSource(), FunctionArgument.getFunctionOrTag(commandcontext, "function"), IntegerArgumentType.getInteger(commandcontext, "time"), true);
+        }))))).then(net.minecraft.commands.Commands.literal("clear").then(net.minecraft.commands.Commands.argument("function", StringArgumentType.greedyString()).suggests(ScheduleCommand.SUGGEST_SCHEDULE).executes((commandcontext) -> {
+            return ScheduleCommand.remove(commandcontext.getSource(), StringArgumentType.getString(commandcontext, "function"));
         }))));
     }
 
@@ -55,7 +55,7 @@ public class ScheduleCommand {
             throw ScheduleCommand.ERROR_SAME_TICK.create();
         } else {
             long j = source.getLevel().getGameTime() + (long) time;
-            ResourceLocation minecraftkey = (ResourceLocation) function.getFirst();
+            ResourceLocation minecraftkey = function.getFirst();
             TimerQueue<MinecraftServer> customfunctioncallbacktimerqueue = source.getLevel().serverLevelData.overworldData().getScheduledEvents(); // CraftBukkit - SPIGOT-6667: Use world specific function timer
 
             ((Either) function.getSecond()).ifLeft((customfunction) -> {
diff --git a/src/main/java/net/minecraft/server/commands/SpreadPlayersCommand.java b/src/main/java/net/minecraft/server/commands/SpreadPlayersCommand.java
index 109d9958b99a47b68416be6c6ab0e84cfd4dbe73..3cb251ba5327e2567c2b251360256ef987a04a7f 100644
--- a/src/main/java/net/minecraft/server/commands/SpreadPlayersCommand.java
+++ b/src/main/java/net/minecraft/server/commands/SpreadPlayersCommand.java
@@ -52,9 +52,9 @@ public class SpreadPlayersCommand {
         dispatcher.register((LiteralArgumentBuilder) ((LiteralArgumentBuilder) net.minecraft.commands.Commands.literal("spreadplayers").requires((commandlistenerwrapper) -> {
             return commandlistenerwrapper.hasPermission(2);
         })).then(net.minecraft.commands.Commands.argument("center", Vec2Argument.vec2()).then(net.minecraft.commands.Commands.argument("spreadDistance", FloatArgumentType.floatArg(0.0F)).then(((RequiredArgumentBuilder) net.minecraft.commands.Commands.argument("maxRange", FloatArgumentType.floatArg(1.0F)).then(net.minecraft.commands.Commands.argument("respectTeams", BoolArgumentType.bool()).then(net.minecraft.commands.Commands.argument("targets", EntityArgument.entities()).executes((commandcontext) -> {
-            return SpreadPlayersCommand.spreadPlayers((CommandSourceStack) commandcontext.getSource(), Vec2Argument.getVec2(commandcontext, "center"), FloatArgumentType.getFloat(commandcontext, "spreadDistance"), FloatArgumentType.getFloat(commandcontext, "maxRange"), ((CommandSourceStack) commandcontext.getSource()).getLevel().getMaxBuildHeight(), BoolArgumentType.getBool(commandcontext, "respectTeams"), EntityArgument.getEntities(commandcontext, "targets"));
+            return SpreadPlayersCommand.spreadPlayers(commandcontext.getSource(), Vec2Argument.getVec2(commandcontext, "center"), FloatArgumentType.getFloat(commandcontext, "spreadDistance"), FloatArgumentType.getFloat(commandcontext, "maxRange"), commandcontext.getSource().getLevel().getMaxBuildHeight(), BoolArgumentType.getBool(commandcontext, "respectTeams"), EntityArgument.getEntities(commandcontext, "targets"));
         })))).then(net.minecraft.commands.Commands.literal("under").then(net.minecraft.commands.Commands.argument("maxHeight", IntegerArgumentType.integer()).then(net.minecraft.commands.Commands.argument("respectTeams", BoolArgumentType.bool()).then(net.minecraft.commands.Commands.argument("targets", EntityArgument.entities()).executes((commandcontext) -> {
-            return SpreadPlayersCommand.spreadPlayers((CommandSourceStack) commandcontext.getSource(), Vec2Argument.getVec2(commandcontext, "center"), FloatArgumentType.getFloat(commandcontext, "spreadDistance"), FloatArgumentType.getFloat(commandcontext, "maxRange"), IntegerArgumentType.getInteger(commandcontext, "maxHeight"), BoolArgumentType.getBool(commandcontext, "respectTeams"), EntityArgument.getEntities(commandcontext, "targets"));
+            return SpreadPlayersCommand.spreadPlayers(commandcontext.getSource(), Vec2Argument.getVec2(commandcontext, "center"), FloatArgumentType.getFloat(commandcontext, "spreadDistance"), FloatArgumentType.getFloat(commandcontext, "maxRange"), IntegerArgumentType.getInteger(commandcontext, "maxHeight"), BoolArgumentType.getBool(commandcontext, "respectTeams"), EntityArgument.getEntities(commandcontext, "targets"));
         })))))))));
     }
 
@@ -66,13 +66,13 @@ public class SpreadPlayersCommand {
             throw SpreadPlayersCommand.ERROR_INVALID_MAX_HEIGHT.create(Integer.valueOf(maxY), Integer.valueOf(j));
         } else {
             RandomSource randomsource = RandomSource.create();
-            double d0 = (double) (center.x - maxRange);
-            double d1 = (double) (center.y - maxRange);
-            double d2 = (double) (center.x + maxRange);
-            double d3 = (double) (center.y + maxRange);
+            double d0 = center.x - maxRange;
+            double d1 = center.y - maxRange;
+            double d2 = center.x + maxRange;
+            double d3 = center.y + maxRange;
             SpreadPlayersCommand.Position[] acommandspreadplayers_a = SpreadPlayersCommand.createInitialPositions(randomsource, respectTeams ? SpreadPlayersCommand.getNumberOfTeams(players) : players.size(), d0, d1, d2, d3);
 
-            SpreadPlayersCommand.spreadPositions(center, (double) spreadDistance, worldserver, randomsource, d0, d1, d2, d3, maxY, acommandspreadplayers_a, respectTeams);
+            SpreadPlayersCommand.spreadPositions(center, spreadDistance, worldserver, randomsource, d0, d1, d2, d3, maxY, acommandspreadplayers_a, respectTeams);
             double d4 = SpreadPlayersCommand.setPlayerPositions(players, worldserver, acommandspreadplayers_a, maxY, respectTeams);
 
             source.sendSuccess(Component.translatable("commands.spreadplayers.success." + (respectTeams ? "teams" : "entities"), Integer.valueOf(acommandspreadplayers_a.length), Float.valueOf(center.x), Float.valueOf(center.y), String.format(Locale.ROOT, "%.2f", Double.valueOf(d4))), true);
@@ -90,7 +90,7 @@ public class SpreadPlayersCommand {
             if (entity instanceof Player) {
                 set.add(entity.getTeam());
             } else {
-                set.add((Team) null); // CraftBukkit - decompile error
+                set.add(null); // CraftBukkit - decompile error
             }
         }
 
@@ -131,8 +131,8 @@ public class SpreadPlayersCommand {
                 }
 
                 if (k > 0) {
-                    commandspreadplayers_a.x /= (double) k;
-                    commandspreadplayers_a.z /= (double) k;
+                    commandspreadplayers_a.x /= k;
+                    commandspreadplayers_a.z /= k;
                     double d7 = commandspreadplayers_a.getLength();
 
                     if (d7 > 0.0D) {
@@ -195,12 +195,12 @@ public class SpreadPlayersCommand {
                     map.put(scoreboardteambase, piles[j++]);
                 }
 
-                commandspreadplayers_a = (SpreadPlayersCommand.Position) map.get(scoreboardteambase);
+                commandspreadplayers_a = map.get(scoreboardteambase);
             } else {
                 commandspreadplayers_a = piles[j++];
             }
 
-            entity.teleportToWithTicket((double) Mth.floor(commandspreadplayers_a.x) + 0.5D, (double) commandspreadplayers_a.getSpawnY(world, maxY), (double) Mth.floor(commandspreadplayers_a.z) + 0.5D);
+            entity.teleportToWithTicket((double) Mth.floor(commandspreadplayers_a.x) + 0.5D, commandspreadplayers_a.getSpawnY(world, maxY), (double) Mth.floor(commandspreadplayers_a.z) + 0.5D);
             d1 = Double.MAX_VALUE;
             SpreadPlayersCommand.Position[] acommandspreadplayers_a1 = piles;
             int k = piles.length;
@@ -219,7 +219,7 @@ public class SpreadPlayersCommand {
         if (entities.size() < 2) {
             return 0.0D;
         } else {
-            d0 /= (double) entities.size();
+            d0 /= entities.size();
             return d0;
         }
     }
@@ -290,7 +290,7 @@ public class SpreadPlayersCommand {
         }
 
         public int getSpawnY(BlockGetter blockView, int maxY) {
-            BlockPos.MutableBlockPos blockposition_mutableblockposition = new BlockPos.MutableBlockPos(this.x, (double) (maxY + 1), this.z);
+            BlockPos.MutableBlockPos blockposition_mutableblockposition = new BlockPos.MutableBlockPos(this.x, maxY + 1, this.z);
             boolean flag = blockView.getBlockState(blockposition_mutableblockposition).isAir();
 
             blockposition_mutableblockposition.move(Direction.DOWN);
@@ -311,7 +311,7 @@ public class SpreadPlayersCommand {
         }
 
         public boolean isSafe(BlockGetter world, int maxY) {
-            BlockPos blockposition = new BlockPos(this.x, (double) (this.getSpawnY(world, maxY) - 1), this.z);
+            BlockPos blockposition = new BlockPos(this.x, this.getSpawnY(world, maxY) - 1, this.z);
             BlockState iblockdata = Position.getBlockState(world, blockposition); // CraftBukkit
             Material material = iblockdata.getMaterial();
 
diff --git a/src/main/java/net/minecraft/server/commands/SummonCommand.java b/src/main/java/net/minecraft/server/commands/SummonCommand.java
index ade2626bc63f986a53277378cdc19f5366f9372f..2226fec9dc630adecb0d1eaa8cbcb87d6d879914 100644
--- a/src/main/java/net/minecraft/server/commands/SummonCommand.java
+++ b/src/main/java/net/minecraft/server/commands/SummonCommand.java
@@ -37,11 +37,11 @@ public class SummonCommand {
         dispatcher.register((LiteralArgumentBuilder) ((LiteralArgumentBuilder) net.minecraft.commands.Commands.literal("summon").requires((commandlistenerwrapper) -> {
             return commandlistenerwrapper.hasPermission(2);
         })).then(((RequiredArgumentBuilder) net.minecraft.commands.Commands.argument("entity", ResourceArgument.resource(registryAccess, Registries.ENTITY_TYPE)).suggests(SuggestionProviders.SUMMONABLE_ENTITIES).executes((commandcontext) -> {
-            return SummonCommand.spawnEntity((CommandSourceStack) commandcontext.getSource(), ResourceArgument.getSummonableEntityType(commandcontext, "entity"), ((CommandSourceStack) commandcontext.getSource()).getPosition(), new CompoundTag(), true);
+            return SummonCommand.spawnEntity(commandcontext.getSource(), ResourceArgument.getSummonableEntityType(commandcontext, "entity"), commandcontext.getSource().getPosition(), new CompoundTag(), true);
         })).then(((RequiredArgumentBuilder) net.minecraft.commands.Commands.argument("pos", Vec3Argument.vec3()).executes((commandcontext) -> {
-            return SummonCommand.spawnEntity((CommandSourceStack) commandcontext.getSource(), ResourceArgument.getSummonableEntityType(commandcontext, "entity"), Vec3Argument.getVec3(commandcontext, "pos"), new CompoundTag(), true);
+            return SummonCommand.spawnEntity(commandcontext.getSource(), ResourceArgument.getSummonableEntityType(commandcontext, "entity"), Vec3Argument.getVec3(commandcontext, "pos"), new CompoundTag(), true);
         })).then(net.minecraft.commands.Commands.argument("nbt", CompoundTagArgument.compoundTag()).executes((commandcontext) -> {
-            return SummonCommand.spawnEntity((CommandSourceStack) commandcontext.getSource(), ResourceArgument.getSummonableEntityType(commandcontext, "entity"), Vec3Argument.getVec3(commandcontext, "pos"), CompoundTagArgument.getCompoundTag(commandcontext, "nbt"), false);
+            return SummonCommand.spawnEntity(commandcontext.getSource(), ResourceArgument.getSummonableEntityType(commandcontext, "entity"), Vec3Argument.getVec3(commandcontext, "pos"), CompoundTagArgument.getCompoundTag(commandcontext, "nbt"), false);
         })))));
     }
 
@@ -64,7 +64,7 @@ public class SummonCommand {
                 throw SummonCommand.ERROR_FAILED.create();
             } else {
                 if (initialize && entity instanceof Mob) {
-                    ((Mob) entity).finalizeSpawn(source.getLevel(), source.getLevel().getCurrentDifficultyAt(entity.blockPosition()), MobSpawnType.COMMAND, (SpawnGroupData) null, (CompoundTag) null);
+                    ((Mob) entity).finalizeSpawn(source.getLevel(), source.getLevel().getCurrentDifficultyAt(entity.blockPosition()), MobSpawnType.COMMAND, null, null);
                 }
 
                 if (!worldserver.tryAddFreshEntityWithPassengers(entity, org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason.COMMAND)) { // CraftBukkit - pass a spawn reason of "COMMAND"
diff --git a/src/main/java/net/minecraft/server/commands/TeleportCommand.java b/src/main/java/net/minecraft/server/commands/TeleportCommand.java
index 2fb604632334b23557fd80c46f9ba03c73309940..142e82d6b2254486c327e2101ac8e3a977441d80 100644
--- a/src/main/java/net/minecraft/server/commands/TeleportCommand.java
+++ b/src/main/java/net/minecraft/server/commands/TeleportCommand.java
@@ -47,24 +47,24 @@ public class TeleportCommand {
     public TeleportCommand() {}
 
     public static void register(CommandDispatcher<CommandSourceStack> dispatcher) {
-        LiteralCommandNode<CommandSourceStack> literalcommandnode = dispatcher.register((LiteralArgumentBuilder) ((LiteralArgumentBuilder) ((LiteralArgumentBuilder) ((LiteralArgumentBuilder) net.minecraft.commands.Commands.literal("teleport").requires((commandlistenerwrapper) -> {
+        LiteralCommandNode<CommandSourceStack> literalcommandnode = dispatcher.register((LiteralArgumentBuilder) ((LiteralArgumentBuilder) net.minecraft.commands.Commands.literal("teleport").requires((commandlistenerwrapper) -> {
             return commandlistenerwrapper.hasPermission(2);
         })).then(net.minecraft.commands.Commands.argument("location", Vec3Argument.vec3()).executes((commandcontext) -> {
-            return TeleportCommand.teleportToPos((CommandSourceStack) commandcontext.getSource(), Collections.singleton(((CommandSourceStack) commandcontext.getSource()).getEntityOrException()), ((CommandSourceStack) commandcontext.getSource()).getLevel(), Vec3Argument.getCoordinates(commandcontext, "location"), WorldCoordinates.current(), (TeleportCommand.LookAt) null);
-        }))).then(net.minecraft.commands.Commands.argument("destination", EntityArgument.entity()).executes((commandcontext) -> {
-            return TeleportCommand.teleportToEntity((CommandSourceStack) commandcontext.getSource(), Collections.singleton(((CommandSourceStack) commandcontext.getSource()).getEntityOrException()), EntityArgument.getEntity(commandcontext, "destination"));
-        }))).then(((RequiredArgumentBuilder) net.minecraft.commands.Commands.argument("targets", EntityArgument.entities()).then(((RequiredArgumentBuilder) ((RequiredArgumentBuilder) net.minecraft.commands.Commands.argument("location", Vec3Argument.vec3()).executes((commandcontext) -> {
-            return TeleportCommand.teleportToPos((CommandSourceStack) commandcontext.getSource(), EntityArgument.getEntities(commandcontext, "targets"), ((CommandSourceStack) commandcontext.getSource()).getLevel(), Vec3Argument.getCoordinates(commandcontext, "location"), (Coordinates) null, (TeleportCommand.LookAt) null);
+            return TeleportCommand.teleportToPos(commandcontext.getSource(), Collections.singleton(commandcontext.getSource().getEntityOrException()), commandcontext.getSource().getLevel(), Vec3Argument.getCoordinates(commandcontext, "location"), WorldCoordinates.current(), null);
+        })).then(net.minecraft.commands.Commands.argument("destination", EntityArgument.entity()).executes((commandcontext) -> {
+            return TeleportCommand.teleportToEntity(commandcontext.getSource(), Collections.singleton(commandcontext.getSource().getEntityOrException()), EntityArgument.getEntity(commandcontext, "destination"));
+        })).then(net.minecraft.commands.Commands.argument("targets", EntityArgument.entities()).then(((RequiredArgumentBuilder) net.minecraft.commands.Commands.argument("location", Vec3Argument.vec3()).executes((commandcontext) -> {
+            return TeleportCommand.teleportToPos(commandcontext.getSource(), EntityArgument.getEntities(commandcontext, "targets"), commandcontext.getSource().getLevel(), Vec3Argument.getCoordinates(commandcontext, "location"), null, null);
         })).then(net.minecraft.commands.Commands.argument("rotation", RotationArgument.rotation()).executes((commandcontext) -> {
-            return TeleportCommand.teleportToPos((CommandSourceStack) commandcontext.getSource(), EntityArgument.getEntities(commandcontext, "targets"), ((CommandSourceStack) commandcontext.getSource()).getLevel(), Vec3Argument.getCoordinates(commandcontext, "location"), RotationArgument.getRotation(commandcontext, "rotation"), (TeleportCommand.LookAt) null);
-        }))).then(((LiteralArgumentBuilder) net.minecraft.commands.Commands.literal("facing").then(net.minecraft.commands.Commands.literal("entity").then(((RequiredArgumentBuilder) net.minecraft.commands.Commands.argument("facingEntity", EntityArgument.entity()).executes((commandcontext) -> {
-            return TeleportCommand.teleportToPos((CommandSourceStack) commandcontext.getSource(), EntityArgument.getEntities(commandcontext, "targets"), ((CommandSourceStack) commandcontext.getSource()).getLevel(), Vec3Argument.getCoordinates(commandcontext, "location"), (Coordinates) null, new TeleportCommand.LookAt(EntityArgument.getEntity(commandcontext, "facingEntity"), EntityAnchorArgument.Anchor.FEET));
+            return TeleportCommand.teleportToPos(commandcontext.getSource(), EntityArgument.getEntities(commandcontext, "targets"), commandcontext.getSource().getLevel(), Vec3Argument.getCoordinates(commandcontext, "location"), RotationArgument.getRotation(commandcontext, "rotation"), null);
+        })).then(net.minecraft.commands.Commands.literal("facing").then(net.minecraft.commands.Commands.literal("entity").then(((RequiredArgumentBuilder) net.minecraft.commands.Commands.argument("facingEntity", EntityArgument.entity()).executes((commandcontext) -> {
+            return TeleportCommand.teleportToPos(commandcontext.getSource(), EntityArgument.getEntities(commandcontext, "targets"), commandcontext.getSource().getLevel(), Vec3Argument.getCoordinates(commandcontext, "location"), null, new LookAt(EntityArgument.getEntity(commandcontext, "facingEntity"), EntityAnchorArgument.Anchor.FEET));
         })).then(net.minecraft.commands.Commands.argument("facingAnchor", EntityAnchorArgument.anchor()).executes((commandcontext) -> {
-            return TeleportCommand.teleportToPos((CommandSourceStack) commandcontext.getSource(), EntityArgument.getEntities(commandcontext, "targets"), ((CommandSourceStack) commandcontext.getSource()).getLevel(), Vec3Argument.getCoordinates(commandcontext, "location"), (Coordinates) null, new TeleportCommand.LookAt(EntityArgument.getEntity(commandcontext, "facingEntity"), EntityAnchorArgument.getAnchor(commandcontext, "facingAnchor")));
-        }))))).then(net.minecraft.commands.Commands.argument("facingLocation", Vec3Argument.vec3()).executes((commandcontext) -> {
-            return TeleportCommand.teleportToPos((CommandSourceStack) commandcontext.getSource(), EntityArgument.getEntities(commandcontext, "targets"), ((CommandSourceStack) commandcontext.getSource()).getLevel(), Vec3Argument.getCoordinates(commandcontext, "location"), (Coordinates) null, new TeleportCommand.LookAt(Vec3Argument.getVec3(commandcontext, "facingLocation")));
-        }))))).then(net.minecraft.commands.Commands.argument("destination", EntityArgument.entity()).executes((commandcontext) -> {
-            return TeleportCommand.teleportToEntity((CommandSourceStack) commandcontext.getSource(), EntityArgument.getEntities(commandcontext, "targets"), EntityArgument.getEntity(commandcontext, "destination"));
+            return TeleportCommand.teleportToPos(commandcontext.getSource(), EntityArgument.getEntities(commandcontext, "targets"), commandcontext.getSource().getLevel(), Vec3Argument.getCoordinates(commandcontext, "location"), null, new LookAt(EntityArgument.getEntity(commandcontext, "facingEntity"), EntityAnchorArgument.getAnchor(commandcontext, "facingAnchor")));
+        })))).then(net.minecraft.commands.Commands.argument("facingLocation", Vec3Argument.vec3()).executes((commandcontext) -> {
+            return TeleportCommand.teleportToPos(commandcontext.getSource(), EntityArgument.getEntities(commandcontext, "targets"), commandcontext.getSource().getLevel(), Vec3Argument.getCoordinates(commandcontext, "location"), null, new LookAt(Vec3Argument.getVec3(commandcontext, "facingLocation")));
+        })))).then(net.minecraft.commands.Commands.argument("destination", EntityArgument.entity()).executes((commandcontext) -> {
+            return TeleportCommand.teleportToEntity(commandcontext.getSource(), EntityArgument.getEntities(commandcontext, "targets"), EntityArgument.getEntity(commandcontext, "destination"));
         }))));
 
         dispatcher.register((LiteralArgumentBuilder) ((LiteralArgumentBuilder) net.minecraft.commands.Commands.literal("tp").requires((commandlistenerwrapper) -> {
@@ -78,11 +78,11 @@ public class TeleportCommand {
         while (iterator.hasNext()) {
             Entity entity1 = (Entity) iterator.next();
 
-            TeleportCommand.performTeleport(source, entity1, (ServerLevel) destination.level, destination.getX(), destination.getY(), destination.getZ(), EnumSet.noneOf(ClientboundPlayerPositionPacket.RelativeArgument.class), destination.getYRot(), destination.getXRot(), (TeleportCommand.LookAt) null);
+            TeleportCommand.performTeleport(source, entity1, (ServerLevel) destination.level, destination.getX(), destination.getY(), destination.getZ(), EnumSet.noneOf(ClientboundPlayerPositionPacket.RelativeArgument.class), destination.getYRot(), destination.getXRot(), null);
         }
 
         if (targets.size() == 1) {
-            source.sendSuccess(Component.translatable("commands.teleport.success.entity.single", ((Entity) targets.iterator().next()).getDisplayName(), destination.getDisplayName()), true);
+            source.sendSuccess(Component.translatable("commands.teleport.success.entity.single", targets.iterator().next().getDisplayName(), destination.getDisplayName()), true);
         } else {
             source.sendSuccess(Component.translatable("commands.teleport.success.entity.multiple", Integer.valueOf(targets.size()), destination.getDisplayName()), true);
         }
@@ -133,7 +133,7 @@ public class TeleportCommand {
         }
 
         if (targets.size() == 1) {
-            source.sendSuccess(Component.translatable("commands.teleport.success.location.single", ((Entity) targets.iterator().next()).getDisplayName(), TeleportCommand.formatDouble(vec3d.x), TeleportCommand.formatDouble(vec3d.y), TeleportCommand.formatDouble(vec3d.z)), true);
+            source.sendSuccess(Component.translatable("commands.teleport.success.location.single", targets.iterator().next().getDisplayName(), TeleportCommand.formatDouble(vec3d.x), TeleportCommand.formatDouble(vec3d.y), TeleportCommand.formatDouble(vec3d.z)), true);
         } else {
             source.sendSuccess(Component.translatable("commands.teleport.success.location.multiple", Integer.valueOf(targets.size()), TeleportCommand.formatDouble(vec3d.x), TeleportCommand.formatDouble(vec3d.y), TeleportCommand.formatDouble(vec3d.z)), true);
         }
diff --git a/src/main/java/net/minecraft/server/commands/TimeCommand.java b/src/main/java/net/minecraft/server/commands/TimeCommand.java
index 9870a5b752f4292ecc6a1a56e58d1ab65e2728ff..81b35f9f6e744a6729ed3b4944301f36b1625202 100644
--- a/src/main/java/net/minecraft/server/commands/TimeCommand.java
+++ b/src/main/java/net/minecraft/server/commands/TimeCommand.java
@@ -18,26 +18,26 @@ public class TimeCommand {
     public TimeCommand() {}
 
     public static void register(CommandDispatcher<CommandSourceStack> dispatcher) {
-        dispatcher.register((LiteralArgumentBuilder) ((LiteralArgumentBuilder) ((LiteralArgumentBuilder) ((LiteralArgumentBuilder) net.minecraft.commands.Commands.literal("time").requires((commandlistenerwrapper) -> {
+        dispatcher.register((LiteralArgumentBuilder) ((LiteralArgumentBuilder) net.minecraft.commands.Commands.literal("time").requires((commandlistenerwrapper) -> {
             return commandlistenerwrapper.hasPermission(2);
-        })).then(((LiteralArgumentBuilder) ((LiteralArgumentBuilder) ((LiteralArgumentBuilder) ((LiteralArgumentBuilder) net.minecraft.commands.Commands.literal("set").then(net.minecraft.commands.Commands.literal("day").executes((commandcontext) -> {
-            return TimeCommand.setTime((CommandSourceStack) commandcontext.getSource(), 1000);
+        })).then(((LiteralArgumentBuilder) net.minecraft.commands.Commands.literal("set").then(net.minecraft.commands.Commands.literal("day").executes((commandcontext) -> {
+            return TimeCommand.setTime(commandcontext.getSource(), 1000);
         }))).then(net.minecraft.commands.Commands.literal("noon").executes((commandcontext) -> {
-            return TimeCommand.setTime((CommandSourceStack) commandcontext.getSource(), 6000);
-        }))).then(net.minecraft.commands.Commands.literal("night").executes((commandcontext) -> {
-            return TimeCommand.setTime((CommandSourceStack) commandcontext.getSource(), 13000);
-        }))).then(net.minecraft.commands.Commands.literal("midnight").executes((commandcontext) -> {
-            return TimeCommand.setTime((CommandSourceStack) commandcontext.getSource(), 18000);
-        }))).then(net.minecraft.commands.Commands.argument("time", TimeArgument.time()).executes((commandcontext) -> {
-            return TimeCommand.setTime((CommandSourceStack) commandcontext.getSource(), IntegerArgumentType.getInteger(commandcontext, "time"));
-        })))).then(net.minecraft.commands.Commands.literal("add").then(net.minecraft.commands.Commands.argument("time", TimeArgument.time()).executes((commandcontext) -> {
-            return TimeCommand.addTime((CommandSourceStack) commandcontext.getSource(), IntegerArgumentType.getInteger(commandcontext, "time"));
-        })))).then(((LiteralArgumentBuilder) ((LiteralArgumentBuilder) net.minecraft.commands.Commands.literal("query").then(net.minecraft.commands.Commands.literal("daytime").executes((commandcontext) -> {
-            return TimeCommand.queryTime((CommandSourceStack) commandcontext.getSource(), TimeCommand.getDayTime(((CommandSourceStack) commandcontext.getSource()).getLevel()));
+            return TimeCommand.setTime(commandcontext.getSource(), 6000);
+        })).then(net.minecraft.commands.Commands.literal("night").executes((commandcontext) -> {
+            return TimeCommand.setTime(commandcontext.getSource(), 13000);
+        })).then(net.minecraft.commands.Commands.literal("midnight").executes((commandcontext) -> {
+            return TimeCommand.setTime(commandcontext.getSource(), 18000);
+        })).then(net.minecraft.commands.Commands.argument("time", TimeArgument.time()).executes((commandcontext) -> {
+            return TimeCommand.setTime(commandcontext.getSource(), IntegerArgumentType.getInteger(commandcontext, "time"));
+        }))).then(net.minecraft.commands.Commands.literal("add").then(net.minecraft.commands.Commands.argument("time", TimeArgument.time()).executes((commandcontext) -> {
+            return TimeCommand.addTime(commandcontext.getSource(), IntegerArgumentType.getInteger(commandcontext, "time"));
+        }))).then(((LiteralArgumentBuilder) net.minecraft.commands.Commands.literal("query").then(net.minecraft.commands.Commands.literal("daytime").executes((commandcontext) -> {
+            return TimeCommand.queryTime(commandcontext.getSource(), TimeCommand.getDayTime(commandcontext.getSource().getLevel()));
         }))).then(net.minecraft.commands.Commands.literal("gametime").executes((commandcontext) -> {
-            return TimeCommand.queryTime((CommandSourceStack) commandcontext.getSource(), (int) (((CommandSourceStack) commandcontext.getSource()).getLevel().getGameTime() % 2147483647L));
-        }))).then(net.minecraft.commands.Commands.literal("day").executes((commandcontext) -> {
-            return TimeCommand.queryTime((CommandSourceStack) commandcontext.getSource(), (int) (((CommandSourceStack) commandcontext.getSource()).getLevel().getDayTime() / 24000L % 2147483647L));
+            return TimeCommand.queryTime(commandcontext.getSource(), (int) (commandcontext.getSource().getLevel().getGameTime() % 2147483647L));
+        })).then(net.minecraft.commands.Commands.literal("day").executes((commandcontext) -> {
+            return TimeCommand.queryTime(commandcontext.getSource(), (int) (commandcontext.getSource().getLevel().getDayTime() / 24000L % 2147483647L));
         }))));
     }
 
@@ -60,7 +60,7 @@ public class TimeCommand {
             TimeSkipEvent event = new TimeSkipEvent(worldserver.getWorld(), TimeSkipEvent.SkipReason.COMMAND, time - worldserver.getDayTime());
             Bukkit.getPluginManager().callEvent(event);
             if (!event.isCancelled()) {
-                worldserver.setDayTime((long) worldserver.getDayTime() + event.getSkipAmount());
+                worldserver.setDayTime(worldserver.getDayTime() + event.getSkipAmount());
             }
             // CraftBukkit end
         }
diff --git a/src/main/java/net/minecraft/server/commands/TriggerCommand.java b/src/main/java/net/minecraft/server/commands/TriggerCommand.java
index 7d70ee8507b4b923d61200bfd220020df82ab3e6..19bf90b3af30f4e6d84c54e3f09830eb37578873 100644
--- a/src/main/java/net/minecraft/server/commands/TriggerCommand.java
+++ b/src/main/java/net/minecraft/server/commands/TriggerCommand.java
@@ -32,14 +32,14 @@ public class TriggerCommand {
     public TriggerCommand() {}
 
     public static void register(CommandDispatcher<CommandSourceStack> dispatcher) {
-        dispatcher.register((LiteralArgumentBuilder) net.minecraft.commands.Commands.literal("trigger").then(((RequiredArgumentBuilder) ((RequiredArgumentBuilder) net.minecraft.commands.Commands.argument("objective", ObjectiveArgument.objective()).suggests((commandcontext, suggestionsbuilder) -> {
-            return TriggerCommand.suggestObjectives((CommandSourceStack) commandcontext.getSource(), suggestionsbuilder);
+        dispatcher.register(net.minecraft.commands.Commands.literal("trigger").then(((RequiredArgumentBuilder) net.minecraft.commands.Commands.argument("objective", ObjectiveArgument.objective()).suggests((commandcontext, suggestionsbuilder) -> {
+            return TriggerCommand.suggestObjectives(commandcontext.getSource(), suggestionsbuilder);
         }).executes((commandcontext) -> {
-            return TriggerCommand.simpleTrigger((CommandSourceStack) commandcontext.getSource(), TriggerCommand.getScore(((CommandSourceStack) commandcontext.getSource()).getPlayerOrException(), ObjectiveArgument.getObjective(commandcontext, "objective")));
+            return TriggerCommand.simpleTrigger(commandcontext.getSource(), TriggerCommand.getScore(commandcontext.getSource().getPlayerOrException(), ObjectiveArgument.getObjective(commandcontext, "objective")));
         })).then(net.minecraft.commands.Commands.literal("add").then(net.minecraft.commands.Commands.argument("value", IntegerArgumentType.integer()).executes((commandcontext) -> {
-            return TriggerCommand.addValue((CommandSourceStack) commandcontext.getSource(), TriggerCommand.getScore(((CommandSourceStack) commandcontext.getSource()).getPlayerOrException(), ObjectiveArgument.getObjective(commandcontext, "objective")), IntegerArgumentType.getInteger(commandcontext, "value"));
-        })))).then(net.minecraft.commands.Commands.literal("set").then(net.minecraft.commands.Commands.argument("value", IntegerArgumentType.integer()).executes((commandcontext) -> {
-            return TriggerCommand.setValue((CommandSourceStack) commandcontext.getSource(), TriggerCommand.getScore(((CommandSourceStack) commandcontext.getSource()).getPlayerOrException(), ObjectiveArgument.getObjective(commandcontext, "objective")), IntegerArgumentType.getInteger(commandcontext, "value"));
+            return TriggerCommand.addValue(commandcontext.getSource(), TriggerCommand.getScore(commandcontext.getSource().getPlayerOrException(), ObjectiveArgument.getObjective(commandcontext, "objective")), IntegerArgumentType.getInteger(commandcontext, "value"));
+        }))).then(net.minecraft.commands.Commands.literal("set").then(net.minecraft.commands.Commands.argument("value", IntegerArgumentType.integer()).executes((commandcontext) -> {
+            return TriggerCommand.setValue(commandcontext.getSource(), TriggerCommand.getScore(commandcontext.getSource().getPlayerOrException(), ObjectiveArgument.getObjective(commandcontext, "objective")), IntegerArgumentType.getInteger(commandcontext, "value"));
         })))));
     }
 
@@ -65,7 +65,7 @@ public class TriggerCommand {
             }
         }
 
-        return SharedSuggestionProvider.suggest((Iterable) list, builder);
+        return SharedSuggestionProvider.suggest(list, builder);
     }
 
     private static int addValue(CommandSourceStack source, Score score, int value) {
diff --git a/src/main/java/net/minecraft/server/commands/WorldBorderCommand.java b/src/main/java/net/minecraft/server/commands/WorldBorderCommand.java
index c7f692dafe3293f3f47f201f435fab84f6535142..709eaf2763782fd1cae8185f1584c273684a0cf8 100644
--- a/src/main/java/net/minecraft/server/commands/WorldBorderCommand.java
+++ b/src/main/java/net/minecraft/server/commands/WorldBorderCommand.java
@@ -31,28 +31,28 @@ public class WorldBorderCommand {
     public WorldBorderCommand() {}
 
     public static void register(CommandDispatcher<CommandSourceStack> dispatcher) {
-        dispatcher.register((LiteralArgumentBuilder) ((LiteralArgumentBuilder) ((LiteralArgumentBuilder) ((LiteralArgumentBuilder) ((LiteralArgumentBuilder) ((LiteralArgumentBuilder) ((LiteralArgumentBuilder) net.minecraft.commands.Commands.literal("worldborder").requires((commandlistenerwrapper) -> {
+        dispatcher.register((LiteralArgumentBuilder) ((LiteralArgumentBuilder) net.minecraft.commands.Commands.literal("worldborder").requires((commandlistenerwrapper) -> {
             return commandlistenerwrapper.hasPermission(2);
         })).then(net.minecraft.commands.Commands.literal("add").then(((RequiredArgumentBuilder) net.minecraft.commands.Commands.argument("distance", DoubleArgumentType.doubleArg(-5.9999968E7D, 5.9999968E7D)).executes((commandcontext) -> {
-            return WorldBorderCommand.setSize((CommandSourceStack) commandcontext.getSource(), ((CommandSourceStack) commandcontext.getSource()).getLevel().getWorldBorder().getSize() + DoubleArgumentType.getDouble(commandcontext, "distance"), 0L);
+            return WorldBorderCommand.setSize(commandcontext.getSource(), commandcontext.getSource().getLevel().getWorldBorder().getSize() + DoubleArgumentType.getDouble(commandcontext, "distance"), 0L);
         })).then(net.minecraft.commands.Commands.argument("time", IntegerArgumentType.integer(0)).executes((commandcontext) -> {
-            return WorldBorderCommand.setSize((CommandSourceStack) commandcontext.getSource(), ((CommandSourceStack) commandcontext.getSource()).getLevel().getWorldBorder().getSize() + DoubleArgumentType.getDouble(commandcontext, "distance"), ((CommandSourceStack) commandcontext.getSource()).getLevel().getWorldBorder().getLerpRemainingTime() + (long) IntegerArgumentType.getInteger(commandcontext, "time") * 1000L);
-        }))))).then(net.minecraft.commands.Commands.literal("set").then(((RequiredArgumentBuilder) net.minecraft.commands.Commands.argument("distance", DoubleArgumentType.doubleArg(-5.9999968E7D, 5.9999968E7D)).executes((commandcontext) -> {
-            return WorldBorderCommand.setSize((CommandSourceStack) commandcontext.getSource(), DoubleArgumentType.getDouble(commandcontext, "distance"), 0L);
+            return WorldBorderCommand.setSize(commandcontext.getSource(), commandcontext.getSource().getLevel().getWorldBorder().getSize() + DoubleArgumentType.getDouble(commandcontext, "distance"), commandcontext.getSource().getLevel().getWorldBorder().getLerpRemainingTime() + (long) IntegerArgumentType.getInteger(commandcontext, "time") * 1000L);
+        })))).then(net.minecraft.commands.Commands.literal("set").then(((RequiredArgumentBuilder) net.minecraft.commands.Commands.argument("distance", DoubleArgumentType.doubleArg(-5.9999968E7D, 5.9999968E7D)).executes((commandcontext) -> {
+            return WorldBorderCommand.setSize(commandcontext.getSource(), DoubleArgumentType.getDouble(commandcontext, "distance"), 0L);
         })).then(net.minecraft.commands.Commands.argument("time", IntegerArgumentType.integer(0)).executes((commandcontext) -> {
-            return WorldBorderCommand.setSize((CommandSourceStack) commandcontext.getSource(), DoubleArgumentType.getDouble(commandcontext, "distance"), (long) IntegerArgumentType.getInteger(commandcontext, "time") * 1000L);
-        }))))).then(net.minecraft.commands.Commands.literal("center").then(net.minecraft.commands.Commands.argument("pos", Vec2Argument.vec2()).executes((commandcontext) -> {
-            return WorldBorderCommand.setCenter((CommandSourceStack) commandcontext.getSource(), Vec2Argument.getVec2(commandcontext, "pos"));
-        })))).then(((LiteralArgumentBuilder) net.minecraft.commands.Commands.literal("damage").then(net.minecraft.commands.Commands.literal("amount").then(net.minecraft.commands.Commands.argument("damagePerBlock", FloatArgumentType.floatArg(0.0F)).executes((commandcontext) -> {
-            return WorldBorderCommand.setDamageAmount((CommandSourceStack) commandcontext.getSource(), FloatArgumentType.getFloat(commandcontext, "damagePerBlock"));
+            return WorldBorderCommand.setSize(commandcontext.getSource(), DoubleArgumentType.getDouble(commandcontext, "distance"), (long) IntegerArgumentType.getInteger(commandcontext, "time") * 1000L);
+        })))).then(net.minecraft.commands.Commands.literal("center").then(net.minecraft.commands.Commands.argument("pos", Vec2Argument.vec2()).executes((commandcontext) -> {
+            return WorldBorderCommand.setCenter(commandcontext.getSource(), Vec2Argument.getVec2(commandcontext, "pos"));
+        }))).then(((LiteralArgumentBuilder) net.minecraft.commands.Commands.literal("damage").then(net.minecraft.commands.Commands.literal("amount").then(net.minecraft.commands.Commands.argument("damagePerBlock", FloatArgumentType.floatArg(0.0F)).executes((commandcontext) -> {
+            return WorldBorderCommand.setDamageAmount(commandcontext.getSource(), FloatArgumentType.getFloat(commandcontext, "damagePerBlock"));
         })))).then(net.minecraft.commands.Commands.literal("buffer").then(net.minecraft.commands.Commands.argument("distance", FloatArgumentType.floatArg(0.0F)).executes((commandcontext) -> {
-            return WorldBorderCommand.setDamageBuffer((CommandSourceStack) commandcontext.getSource(), FloatArgumentType.getFloat(commandcontext, "distance"));
-        }))))).then(net.minecraft.commands.Commands.literal("get").executes((commandcontext) -> {
-            return WorldBorderCommand.getSize((CommandSourceStack) commandcontext.getSource());
-        }))).then(((LiteralArgumentBuilder) net.minecraft.commands.Commands.literal("warning").then(net.minecraft.commands.Commands.literal("distance").then(net.minecraft.commands.Commands.argument("distance", IntegerArgumentType.integer(0)).executes((commandcontext) -> {
-            return WorldBorderCommand.setWarningDistance((CommandSourceStack) commandcontext.getSource(), IntegerArgumentType.getInteger(commandcontext, "distance"));
+            return WorldBorderCommand.setDamageBuffer(commandcontext.getSource(), FloatArgumentType.getFloat(commandcontext, "distance"));
+        })))).then(net.minecraft.commands.Commands.literal("get").executes((commandcontext) -> {
+            return WorldBorderCommand.getSize(commandcontext.getSource());
+        })).then(((LiteralArgumentBuilder) net.minecraft.commands.Commands.literal("warning").then(net.minecraft.commands.Commands.literal("distance").then(net.minecraft.commands.Commands.argument("distance", IntegerArgumentType.integer(0)).executes((commandcontext) -> {
+            return WorldBorderCommand.setWarningDistance(commandcontext.getSource(), IntegerArgumentType.getInteger(commandcontext, "distance"));
         })))).then(net.minecraft.commands.Commands.literal("time").then(net.minecraft.commands.Commands.argument("time", IntegerArgumentType.integer(0)).executes((commandcontext) -> {
-            return WorldBorderCommand.setWarningTime((CommandSourceStack) commandcontext.getSource(), IntegerArgumentType.getInteger(commandcontext, "time"));
+            return WorldBorderCommand.setWarningTime(commandcontext.getSource(), IntegerArgumentType.getInteger(commandcontext, "time"));
         })))));
     }
 
@@ -62,7 +62,7 @@ public class WorldBorderCommand {
         if (worldborder.getDamageSafeZone() == (double) distance) {
             throw WorldBorderCommand.ERROR_SAME_DAMAGE_BUFFER.create();
         } else {
-            worldborder.setDamageSafeZone((double) distance);
+            worldborder.setDamageSafeZone(distance);
             source.sendSuccess(Component.translatable("commands.worldborder.damage.buffer.success", String.format(Locale.ROOT, "%.2f", Float.valueOf(distance))), true);
             return (int) distance;
         }
@@ -74,7 +74,7 @@ public class WorldBorderCommand {
         if (worldborder.getDamagePerBlock() == (double) damagePerBlock) {
             throw WorldBorderCommand.ERROR_SAME_DAMAGE_AMOUNT.create();
         } else {
-            worldborder.setDamagePerBlock((double) damagePerBlock);
+            worldborder.setDamagePerBlock(damagePerBlock);
             source.sendSuccess(Component.translatable("commands.worldborder.damage.amount.success", String.format(Locale.ROOT, "%.2f", Float.valueOf(damagePerBlock))), true);
             return (int) damagePerBlock;
         }
@@ -117,7 +117,7 @@ public class WorldBorderCommand {
         if (worldborder.getCenterX() == (double) pos.x && worldborder.getCenterZ() == (double) pos.y) {
             throw WorldBorderCommand.ERROR_SAME_CENTER.create();
         } else if ((double) Math.abs(pos.x) <= 2.9999984E7D && (double) Math.abs(pos.y) <= 2.9999984E7D) {
-            worldborder.setCenter((double) pos.x, (double) pos.y);
+            worldborder.setCenter(pos.x, pos.y);
             source.sendSuccess(Component.translatable("commands.worldborder.center.success", String.format(Locale.ROOT, "%.2f", Float.valueOf(pos.x)), String.format(Locale.ROOT, "%.2f", Float.valueOf(pos.y))), true);
             return 0;
         } else {
diff --git a/src/main/java/net/minecraft/server/dedicated/DedicatedPlayerList.java b/src/main/java/net/minecraft/server/dedicated/DedicatedPlayerList.java
index 4ee9193093247c38e1ace8dfcc3f24bc21393b29..4c3c37091f55c81bafabaf3418e204f6828d910d 100644
--- a/src/main/java/net/minecraft/server/dedicated/DedicatedPlayerList.java
+++ b/src/main/java/net/minecraft/server/dedicated/DedicatedPlayerList.java
@@ -63,7 +63,7 @@ public class DedicatedPlayerList extends PlayerList {
         try {
             this.getIpBans().save();
         } catch (IOException var2) {
-            LOGGER.warn("Failed to save ip banlist: ", (Throwable)var2);
+            LOGGER.warn("Failed to save ip banlist: ", var2);
         }
 
     }
@@ -72,7 +72,7 @@ public class DedicatedPlayerList extends PlayerList {
         try {
             this.getBans().save();
         } catch (IOException var2) {
-            LOGGER.warn("Failed to save user banlist: ", (Throwable)var2);
+            LOGGER.warn("Failed to save user banlist: ", var2);
         }
 
     }
@@ -81,7 +81,7 @@ public class DedicatedPlayerList extends PlayerList {
         try {
             this.getIpBans().load();
         } catch (IOException var2) {
-            LOGGER.warn("Failed to load ip banlist: ", (Throwable)var2);
+            LOGGER.warn("Failed to load ip banlist: ", var2);
         }
 
     }
@@ -90,7 +90,7 @@ public class DedicatedPlayerList extends PlayerList {
         try {
             this.getBans().load();
         } catch (IOException var2) {
-            LOGGER.warn("Failed to load user banlist: ", (Throwable)var2);
+            LOGGER.warn("Failed to load user banlist: ", var2);
         }
 
     }
@@ -99,7 +99,7 @@ public class DedicatedPlayerList extends PlayerList {
         try {
             this.getOps().load();
         } catch (Exception var2) {
-            LOGGER.warn("Failed to load operators list: ", (Throwable)var2);
+            LOGGER.warn("Failed to load operators list: ", var2);
         }
 
     }
@@ -108,7 +108,7 @@ public class DedicatedPlayerList extends PlayerList {
         try {
             this.getOps().save();
         } catch (Exception var2) {
-            LOGGER.warn("Failed to save operators list: ", (Throwable)var2);
+            LOGGER.warn("Failed to save operators list: ", var2);
         }
 
     }
@@ -117,7 +117,7 @@ public class DedicatedPlayerList extends PlayerList {
         try {
             this.getWhiteList().load();
         } catch (Exception var2) {
-            LOGGER.warn("Failed to load white-list: ", (Throwable)var2);
+            LOGGER.warn("Failed to load white-list: ", var2);
         }
 
     }
@@ -126,7 +126,7 @@ public class DedicatedPlayerList extends PlayerList {
         try {
             this.getWhiteList().save();
         } catch (Exception var2) {
-            LOGGER.warn("Failed to save white-list: ", (Throwable)var2);
+            LOGGER.warn("Failed to save white-list: ", var2);
         }
 
     }
diff --git a/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java b/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
index 479a3179596d93a197d052dc150b2e21146e0443..859a09656c2aee703c7e6e5482dcc6670333277b 100644
--- a/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
+++ b/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
@@ -225,7 +225,7 @@ public class DedicatedServer extends MinecraftServer implements ServerInterface
         this.setPvpAllowed(dedicatedserverproperties.pvp);
         this.setFlightAllowed(dedicatedserverproperties.allowFlight);
         this.setMotd(dedicatedserverproperties.motd);
-        super.setPlayerIdleTimeout(((Integer) dedicatedserverproperties.playerIdleTimeout.get()).intValue());
+        super.setPlayerIdleTimeout(dedicatedserverproperties.playerIdleTimeout.get().intValue());
         this.setEnforceWhitelist(dedicatedserverproperties.enforceWhitelist);
         // this.worldData.setGameType(dedicatedserverproperties.gamemode); // CraftBukkit - moved to world loading
         DedicatedServer.LOGGER.info("Default game type: {}", dedicatedserverproperties.gamemode);
@@ -304,7 +304,7 @@ public class DedicatedServer extends MinecraftServer implements ServerInterface
 
             //DedicatedServer.LOGGER.info("Done ({})! For help, type \"help\"", s); // Paper moved to after init
             if (dedicatedserverproperties.announcePlayerAchievements != null) {
-                ((GameRules.BooleanValue) this.getGameRules().getRule(GameRules.RULE_ANNOUNCE_ADVANCEMENTS)).set(dedicatedserverproperties.announcePlayerAchievements.booleanValue(), null); // Paper
+                this.getGameRules().getRule(GameRules.RULE_ANNOUNCE_ADVANCEMENTS).set(dedicatedserverproperties.announcePlayerAchievements.booleanValue(), null); // Paper
             }
 
             if (dedicatedserverproperties.enableQuery) {
@@ -604,7 +604,7 @@ public class DedicatedServer extends MinecraftServer implements ServerInterface
     public void setPlayerIdleTimeout(int playerIdleTimeout) {
         super.setPlayerIdleTimeout(playerIdleTimeout);
         this.settings.update((dedicatedserverproperties) -> {
-            return (DedicatedServerProperties) dedicatedserverproperties.playerIdleTimeout.update(this.registryAccess(), Integer.valueOf(playerIdleTimeout));
+            return dedicatedserverproperties.playerIdleTimeout.update(this.registryAccess(), Integer.valueOf(playerIdleTimeout));
         });
     }
 
@@ -788,7 +788,7 @@ public class DedicatedServer extends MinecraftServer implements ServerInterface
 
     public void storeUsingWhiteList(boolean useWhitelist) {
         this.settings.update((dedicatedserverproperties) -> {
-            return (DedicatedServerProperties) dedicatedserverproperties.whiteList.update(this.registryAccess(), Boolean.valueOf(useWhitelist));
+            return dedicatedserverproperties.whiteList.update(this.registryAccess(), Boolean.valueOf(useWhitelist));
         });
     }
 
diff --git a/src/main/java/net/minecraft/server/dedicated/DedicatedServerProperties.java b/src/main/java/net/minecraft/server/dedicated/DedicatedServerProperties.java
index 841b478d7376d8c56836690a713e6f8fb84a41ab..5456ddcddc96d5a2dfe68710e64ea69d93360d5c 100644
--- a/src/main/java/net/minecraft/server/dedicated/DedicatedServerProperties.java
+++ b/src/main/java/net/minecraft/server/dedicated/DedicatedServerProperties.java
@@ -114,8 +114,8 @@ public class DedicatedServerProperties extends Settings<DedicatedServerPropertie
     public DedicatedServerProperties(Properties properties, OptionSet optionset) {
         super(properties, optionset);
         // CraftBukkit end
-        this.difficulty = (Difficulty) this.get("difficulty", dispatchNumberOrString(Difficulty::byId, Difficulty::byName), Difficulty::getKey, Difficulty.EASY);
-        this.gamemode = (GameType) this.get("gamemode", dispatchNumberOrString(GameType::byId, GameType::byName), GameType::getName, GameType.SURVIVAL);
+        this.difficulty = this.get("difficulty", dispatchNumberOrString(Difficulty::byId, Difficulty::byName), Difficulty::getKey, Difficulty.EASY);
+        this.gamemode = this.get("gamemode", dispatchNumberOrString(GameType::byId, GameType::byName), GameType::getName, GameType.SURVIVAL);
         this.levelName = this.get("level-name", "world");
         this.serverPort = this.get("server-port", 25565);
         this.announcePlayerAchievements = this.getLegacyBoolean("announce-player-achievements");
@@ -142,14 +142,14 @@ public class DedicatedServerProperties extends Settings<DedicatedServerPropertie
         this.broadcastRconToOps = this.get("broadcast-rcon-to-ops", true);
         this.broadcastConsoleToOps = this.get("broadcast-console-to-ops", true);
         this.maxWorldSize = this.get("max-world-size", (integer) -> {
-            return Integer.valueOf(Mth.clamp(integer, (int) 1, 29999984));
+            return Integer.valueOf(Mth.clamp(integer, 1, 29999984));
         }, 29999984);
         this.syncChunkWrites = this.get("sync-chunk-writes", true) && Boolean.getBoolean("Paper.enable-sync-chunk-writes"); // Paper - hide behind flag
         this.enableJmxMonitoring = this.get("enable-jmx-monitoring", false);
         this.enableStatus = this.get("enable-status", true);
         this.hideOnlinePlayers = this.get("hide-online-players", false);
         this.entityBroadcastRangePercentage = this.get("entity-broadcast-range-percentage", (integer) -> {
-            return Integer.valueOf(Mth.clamp(integer, (int) 10, (int) 1000));
+            return Integer.valueOf(Mth.clamp(integer, 10, 1000));
         }, 100);
         this.textFilteringConfig = this.get("text-filtering-config", "");
         this.playerIdleTimeout = this.getMutable("player-idle-timeout", 0);
@@ -269,7 +269,7 @@ public class DedicatedServerProperties extends Settings<DedicatedServerPropertie
             });
 
             Objects.requireNonNull(iregistry);
-            Holder<WorldPreset> holder = (Holder) optional.flatMap(iregistry::getHolder).orElseGet(() -> {
+            Holder<WorldPreset> holder = optional.flatMap(iregistry::getHolder).orElseGet(() -> {
                 DedicatedServerProperties.LOGGER.warn("Failed to parse level-type {}, defaulting to {}", this.levelType, holder_c.key().location());
                 return holder_c;
             });
diff --git a/src/main/java/net/minecraft/server/dedicated/DedicatedServerSettings.java b/src/main/java/net/minecraft/server/dedicated/DedicatedServerSettings.java
index 8d029ff40a35004ba6a9c5f5879444f46b2b60ac..c6a1f4ea83cd8db491d8862859aa190d2ea815f8 100644
--- a/src/main/java/net/minecraft/server/dedicated/DedicatedServerSettings.java
+++ b/src/main/java/net/minecraft/server/dedicated/DedicatedServerSettings.java
@@ -29,7 +29,7 @@ public class DedicatedServerSettings {
     }
 
     public DedicatedServerSettings update(UnaryOperator<DedicatedServerProperties> applier) {
-        (this.properties = (DedicatedServerProperties) applier.apply(this.properties)).store(this.source);
+        (this.properties = applier.apply(this.properties)).store(this.source);
         return this;
     }
 }
diff --git a/src/main/java/net/minecraft/server/dedicated/Settings.java b/src/main/java/net/minecraft/server/dedicated/Settings.java
index b3e0b0835ef1def599b01d3b241ebaaadb454385..7e98ef5dcd7c31a846e7a4dd740083f0b13fb1ca 100644
--- a/src/main/java/net/minecraft/server/dedicated/Settings.java
+++ b/src/main/java/net/minecraft/server/dedicated/Settings.java
@@ -165,7 +165,7 @@ public abstract class Settings<T extends Settings<T>> {
 
     @Nullable
     public String getStringRaw(String key) {
-        return (String) this.getOverride(key, this.properties.getProperty(key)); // CraftBukkit
+        return this.getOverride(key, this.properties.getProperty(key)); // CraftBukkit
     }
 
     @Nullable
@@ -213,16 +213,16 @@ public abstract class Settings<T extends Settings<T>> {
     }
 
     protected String get(String key, String fallback) {
-        return (String) this.get(key, Function.identity(), Function.identity(), fallback);
+        return this.get(key, Function.identity(), Function.identity(), fallback);
     }
 
     @Nullable
     protected String getLegacyString(String key) {
-        return (String) this.getLegacy(key, Function.identity());
+        return this.getLegacy(key, Function.identity());
     }
 
     protected int get(String key, int fallback) {
-        return ((Integer) this.get(key, Settings.wrapNumberDeserializer(Integer::parseInt), Integer.valueOf(fallback))).intValue();
+        return this.get(key, Settings.wrapNumberDeserializer(Integer::parseInt), Integer.valueOf(fallback)).intValue();
     }
 
     protected Settings<T>.MutableValue<Integer> getMutable(String key, int fallback) {
@@ -230,15 +230,15 @@ public abstract class Settings<T extends Settings<T>> {
     }
 
     protected int get(String key, UnaryOperator<Integer> transformer, int fallback) {
-        return ((Integer) this.get(key, Settings.wrapNumberDeserializer(Integer::parseInt), transformer, Objects::toString, Integer.valueOf(fallback))).intValue();
+        return this.get(key, Settings.wrapNumberDeserializer(Integer::parseInt), transformer, Objects::toString, Integer.valueOf(fallback)).intValue();
     }
 
     protected long get(String key, long fallback) {
-        return ((Long) this.get(key, Settings.wrapNumberDeserializer(Long::parseLong), Long.valueOf(fallback))).longValue();
+        return this.get(key, Settings.wrapNumberDeserializer(Long::parseLong), Long.valueOf(fallback)).longValue();
     }
 
     protected boolean get(String key, boolean fallback) {
-        return ((Boolean) this.get(key, Boolean::valueOf, Boolean.valueOf(fallback))).booleanValue();
+        return this.get(key, Boolean::valueOf, Boolean.valueOf(fallback)).booleanValue();
     }
 
     protected Settings<T>.MutableValue<Boolean> getMutable(String key, boolean fallback) {
@@ -247,7 +247,7 @@ public abstract class Settings<T extends Settings<T>> {
 
     @Nullable
     protected Boolean getLegacyBoolean(String key) {
-        return (Boolean) this.getLegacy(key, Boolean::valueOf);
+        return this.getLegacy(key, Boolean::valueOf);
     }
 
     protected Properties cloneProperties() {
diff --git a/src/main/java/net/minecraft/server/gui/MinecraftServerGui.java b/src/main/java/net/minecraft/server/gui/MinecraftServerGui.java
index c07918aa1ed2469ad7a76a0add60ab648ff7f421..658be7dfa7bc7c31a2a800d46175b40dfb3b0369 100644
--- a/src/main/java/net/minecraft/server/gui/MinecraftServerGui.java
+++ b/src/main/java/net/minecraft/server/gui/MinecraftServerGui.java
@@ -57,7 +57,7 @@ public class MinecraftServerGui extends JComponent {
         jframe.setDefaultCloseOperation(2);
         jframe.add(servergui);
         jframe.pack();
-        jframe.setLocationRelativeTo((Component) null);
+        jframe.setLocationRelativeTo(null);
         jframe.setVisible(true);
         jframe.setName("Minecraft server"); // Paper
 
@@ -191,7 +191,7 @@ public class MinecraftServerGui extends JComponent {
             }
 
             try {
-                document.insertString(document.getLength(), MinecraftServerGui.ANSI.matcher(message).replaceAll(""), (AttributeSet) null); // CraftBukkit
+                document.insertString(document.getLength(), MinecraftServerGui.ANSI.matcher(message).replaceAll(""), null); // CraftBukkit
             } catch (BadLocationException badlocationexception) {
                 ;
             }
diff --git a/src/main/java/net/minecraft/server/level/ChunkHolder.java b/src/main/java/net/minecraft/server/level/ChunkHolder.java
index bc46479fd0622a90fd98ac88f92b2840a22a2d04..904fcdeb7937d36208cc9a8d5eca9ef3a5b2cd9e 100644
--- a/src/main/java/net/minecraft/server/level/ChunkHolder.java
+++ b/src/main/java/net/minecraft/server/level/ChunkHolder.java
@@ -395,7 +395,7 @@ public class ChunkHolder {
     }
 
     public static ChunkHolder.FullChunkStatus getFullChunkStatus(int distance) {
-        return ChunkHolder.FULL_CHUNK_STATUSES[Mth.clamp(33 - distance + 1, (int) 0, ChunkHolder.FULL_CHUNK_STATUSES.length - 1)];
+        return ChunkHolder.FULL_CHUNK_STATUSES[Mth.clamp(33 - distance + 1, 0, ChunkHolder.FULL_CHUNK_STATUSES.length - 1)];
     }
 
     // Paper - rewrite chunk system
diff --git a/src/main/java/net/minecraft/server/level/ChunkMap.java b/src/main/java/net/minecraft/server/level/ChunkMap.java
index b14d1a02b7b47fdad2aead54018db0a139981637..e9b0061872505be629e1ef1e63f027caa5ee9153 100644
--- a/src/main/java/net/minecraft/server/level/ChunkMap.java
+++ b/src/main/java/net/minecraft/server/level/ChunkMap.java
@@ -317,7 +317,7 @@ public class ChunkMap extends ChunkStorage implements ChunkHolder.PlayerProvider
         if (chunkGenerator instanceof NoiseBasedChunkGenerator) {
             NoiseBasedChunkGenerator chunkgeneratorabstract = (NoiseBasedChunkGenerator) chunkGenerator;
 
-            this.randomState = RandomState.create((NoiseGeneratorSettings) chunkgeneratorabstract.generatorSettings().value(), (HolderGetter) iregistrycustom.lookupOrThrow(Registries.NOISE), j);
+            this.randomState = RandomState.create(chunkgeneratorabstract.generatorSettings().value(), (HolderGetter) iregistrycustom.lookupOrThrow(Registries.NOISE), j);
         } else {
             this.randomState = RandomState.create(NoiseGeneratorSettings.dummy(), (HolderGetter) iregistrycustom.lookupOrThrow(Registries.NOISE), j);
         }
@@ -483,8 +483,8 @@ public class ChunkMap extends ChunkStorage implements ChunkHolder.PlayerProvider
     // Paper end
 
     private static double euclideanDistanceSquared(ChunkPos pos, Entity entity) {
-        double d0 = (double) SectionPos.sectionToBlockCoord(pos.x, 8);
-        double d1 = (double) SectionPos.sectionToBlockCoord(pos.z, 8);
+        double d0 = SectionPos.sectionToBlockCoord(pos.x, 8);
+        double d1 = SectionPos.sectionToBlockCoord(pos.z, 8);
         double d2 = d0 - entity.getX();
         double d3 = d1 - entity.getZ();
 
@@ -494,8 +494,8 @@ public class ChunkMap extends ChunkStorage implements ChunkHolder.PlayerProvider
     public static boolean isChunkInRange(int x1, int z1, int x2, int z2, int distance) {
         int j1 = Math.max(0, Math.abs(x1 - x2) - 1);
         int k1 = Math.max(0, Math.abs(z1 - z2) - 1);
-        long l1 = (long) Math.max(0, Math.max(j1, k1) - 1);
-        long i2 = (long) Math.min(j1, k1);
+        long l1 = Math.max(0, Math.max(j1, k1) - 1);
+        long i2 = Math.min(j1, k1);
         long j2 = i2 * i2 + l1 * l1;
         int k2 = distance - 1;
         int l2 = k2 * k2;
@@ -572,8 +572,8 @@ public class ChunkMap extends ChunkStorage implements ChunkHolder.PlayerProvider
         StringBuilder stringbuilder = new StringBuilder();
         Consumer<ChunkHolder> consumer = (playerchunk) -> {
             playerchunk.getAllFutures().forEach((pair) -> {
-                ChunkStatus chunkstatus = (ChunkStatus) pair.getFirst();
-                CompletableFuture<Either<ChunkAccess, ChunkHolder.ChunkLoadingFailure>> completablefuture = (CompletableFuture) pair.getSecond();
+                ChunkStatus chunkstatus = pair.getFirst();
+                CompletableFuture<Either<ChunkAccess, ChunkHolder.ChunkLoadingFailure>> completablefuture = pair.getSecond();
 
                 if (completablefuture != null && completablefuture.isDone() && completablefuture.join() == null) {
                     stringbuilder.append(playerchunk.getPos()).append(" - status: ").append(chunkstatus).append(" future: ").append(completablefuture).append(System.lineSeparator());
@@ -589,8 +589,8 @@ public class ChunkMap extends ChunkStorage implements ChunkHolder.PlayerProvider
         CrashReport crashreport = CrashReport.forThrowable(exception, "Chunk loading");
         CrashReportCategory crashreportsystemdetails = crashreport.addCategory("Chunk loading");
 
-        crashreportsystemdetails.setDetail("Details", (Object) details);
-        crashreportsystemdetails.setDetail("Futures", (Object) stringbuilder);
+        crashreportsystemdetails.setDetail("Details", details);
+        crashreportsystemdetails.setDetail("Futures", stringbuilder);
         return new ReportedException(crashreport);
     }
 
@@ -684,7 +684,7 @@ public class ChunkMap extends ChunkStorage implements ChunkHolder.PlayerProvider
 
     private ChunkAccess createEmptyChunk(ChunkPos chunkPos) {
         this.markPositionReplaceable(chunkPos);
-        return new ProtoChunk(chunkPos, UpgradeData.EMPTY, this.level, this.level.registryAccess().registryOrThrow(Registries.BIOME), (BlendingData) null);
+        return new ProtoChunk(chunkPos, UpgradeData.EMPTY, this.level, this.level.registryAccess().registryOrThrow(Registries.BIOME), null);
     }
 
     private void markPositionReplaceable(ChunkPos pos) {
@@ -818,7 +818,7 @@ public class ChunkMap extends ChunkStorage implements ChunkHolder.PlayerProvider
     }
     // Paper end - replace player loader system
     public void setViewDistance(int watchDistance) {
-        int j = Mth.clamp(watchDistance + 1, (int) 3, (int) 33);
+        int j = Mth.clamp(watchDistance + 1, 3, 33);
 
         if (j != this.viewDistance) {
             int k = this.viewDistance;
@@ -870,9 +870,9 @@ public class ChunkMap extends ChunkStorage implements ChunkHolder.PlayerProvider
 
     private static String printFuture(CompletableFuture<Either<LevelChunk, ChunkHolder.ChunkLoadingFailure>> future) {
         try {
-            Either<LevelChunk, ChunkHolder.ChunkLoadingFailure> either = (Either) future.getNow(null); // CraftBukkit - decompile error
+            Either<LevelChunk, ChunkHolder.ChunkLoadingFailure> either = future.getNow(null); // CraftBukkit - decompile error
 
-            return either != null ? (String) either.map((chunk) -> {
+            return either != null ? either.map((chunk) -> {
                 return "done";
             }, (playerchunk_failure) -> {
                 return "unloaded";
@@ -1080,7 +1080,7 @@ public class ChunkMap extends ChunkStorage implements ChunkHolder.PlayerProvider
             this.playerMap.addPlayer(ChunkPos.asLong(i, j), player, flag1);
             this.updatePlayerPos(player);
             if (!flag1) {
-                this.distanceManager.addPlayer(SectionPos.of((EntityAccess) player), player);
+                this.distanceManager.addPlayer(SectionPos.of(player), player);
             }
             this.addPlayerToDistanceMaps(player); // Paper - distance maps
         } else {
@@ -1098,7 +1098,7 @@ public class ChunkMap extends ChunkStorage implements ChunkHolder.PlayerProvider
     }
 
     private SectionPos updatePlayerPos(ServerPlayer player) {
-        SectionPos sectionposition = SectionPos.of((EntityAccess) player);
+        SectionPos sectionposition = SectionPos.of(player);
 
         player.setLastSectionPos(sectionposition);
         //player.connection.send(new ClientboundSetChunkCacheCenterPacket(sectionposition.x(), sectionposition.z())); // Paper - handled by player chunk loader
@@ -1111,7 +1111,7 @@ public class ChunkMap extends ChunkStorage implements ChunkHolder.PlayerProvider
         int i = SectionPos.blockToSectionCoord(player.getBlockX());
         int j = SectionPos.blockToSectionCoord(player.getBlockZ());
         SectionPos sectionposition = player.getLastSectionPos();
-        SectionPos sectionposition1 = SectionPos.of((EntityAccess) player);
+        SectionPos sectionposition1 = SectionPos.of(player);
         long k = sectionposition.chunk().toLong();
         long l = sectionposition1.chunk().toLong();
         boolean flag = this.playerMap.ignored(player);
@@ -1199,7 +1199,7 @@ public class ChunkMap extends ChunkStorage implements ChunkHolder.PlayerProvider
                 int j = entitytypes.updateInterval();
 
                 if (this.entityMap.containsKey(entity.getId())) {
-                    throw (IllegalStateException) Util.pauseInIde(new IllegalStateException("Entity is already tracked!"));
+                    throw Util.pauseInIde(new IllegalStateException("Entity is already tracked!"));
                 } else {
                     ChunkMap.TrackedEntity playerchunkmap_entitytracker = new ChunkMap.TrackedEntity(entity, i, j, entitytypes.trackDeltas());
 
@@ -1241,7 +1241,7 @@ public class ChunkMap extends ChunkStorage implements ChunkHolder.PlayerProvider
             }
         }
 
-        ChunkMap.TrackedEntity playerchunkmap_entitytracker1 = (ChunkMap.TrackedEntity) this.entityMap.remove(entity.getId());
+        ChunkMap.TrackedEntity playerchunkmap_entitytracker1 = this.entityMap.remove(entity.getId());
 
         if (playerchunkmap_entitytracker1 != null) {
             playerchunkmap_entitytracker1.broadcastRemoved();
@@ -1290,7 +1290,7 @@ public class ChunkMap extends ChunkStorage implements ChunkHolder.PlayerProvider
         while (objectiterator.hasNext()) {
             playerchunkmap_entitytracker = (ChunkMap.TrackedEntity) objectiterator.next();
             SectionPos sectionposition = playerchunkmap_entitytracker.lastSectionPos;
-            SectionPos sectionposition1 = SectionPos.of((EntityAccess) playerchunkmap_entitytracker.entity);
+            SectionPos sectionposition1 = SectionPos.of(playerchunkmap_entitytracker.entity);
             boolean flag = !Objects.equals(sectionposition, sectionposition1);
 
             if (flag) {
@@ -1324,7 +1324,7 @@ public class ChunkMap extends ChunkStorage implements ChunkHolder.PlayerProvider
     }
 
     public void broadcast(Entity entity, Packet<?> packet) {
-        ChunkMap.TrackedEntity playerchunkmap_entitytracker = (ChunkMap.TrackedEntity) this.entityMap.get(entity.getId());
+        ChunkMap.TrackedEntity playerchunkmap_entitytracker = this.entityMap.get(entity.getId());
 
         if (playerchunkmap_entitytracker != null) {
             playerchunkmap_entitytracker.broadcast(packet);
@@ -1333,7 +1333,7 @@ public class ChunkMap extends ChunkStorage implements ChunkHolder.PlayerProvider
     }
 
     protected void broadcastAndSend(Entity entity, Packet<?> packet) {
-        ChunkMap.TrackedEntity playerchunkmap_entitytracker = (ChunkMap.TrackedEntity) this.entityMap.get(entity.getId());
+        ChunkMap.TrackedEntity playerchunkmap_entitytracker = this.entityMap.get(entity.getId());
 
         if (playerchunkmap_entitytracker != null) {
             playerchunkmap_entitytracker.broadcastAndSend(packet);
@@ -1411,7 +1411,7 @@ public class ChunkMap extends ChunkStorage implements ChunkHolder.PlayerProvider
         }
 
         Boolean shouldModify = Boolean.valueOf(chunk.getLevel().chunkPacketBlockController.shouldModify(player, chunk));
-        player.trackChunk(chunk.getPos(), (Packet) cachedDataPackets.getValue().computeIfAbsent(shouldModify, (s) -> {
+        player.trackChunk(chunk.getPos(), cachedDataPackets.getValue().computeIfAbsent(shouldModify, (s) -> {
             // Paper start - Fix MC-162253
             final int viewDistance = getEffectiveViewDistance();
             final int playerChunkX = player.getBlockX() >> 4;
@@ -1451,7 +1451,7 @@ public class ChunkMap extends ChunkStorage implements ChunkHolder.PlayerProvider
                 }
             }
             // Paper end - Fix MC-162253
-            return new ClientboundLevelChunkWithLightPacket(chunk, this.lightEngine, (BitSet) null, (BitSet) null, true, ((Boolean) s).booleanValue());
+            return new ClientboundLevelChunkWithLightPacket(chunk, this.lightEngine, null, null, true, ((Boolean) s).booleanValue());
         }));
         // Paper end
         DebugPackets.sendPoiPacketsForChunk(this.level, chunk.getPos());
@@ -1507,7 +1507,7 @@ public class ChunkMap extends ChunkStorage implements ChunkHolder.PlayerProvider
             this.serverEntity = new ServerEntity(ChunkMap.this.level, entity, j, flag, this::broadcast, this.seenBy); // CraftBukkit
             this.entity = entity;
             this.range = i;
-            this.lastSectionPos = SectionPos.of((EntityAccess) entity);
+            this.lastSectionPos = SectionPos.of(entity);
         }
 
         // Paper start - use distance map to optimise tracker
@@ -1600,7 +1600,7 @@ public class ChunkMap extends ChunkStorage implements ChunkHolder.PlayerProvider
                 double vec3d_dx = player.getX() - this.entity.getX();
                 double vec3d_dz = player.getZ() - this.entity.getZ();
                 // Paper end - remove allocation of Vec3D here
-                double d0 = (double) Math.min(this.getEffectiveRange(), io.papermc.paper.chunk.PlayerChunkLoader.getSendViewDistance(player) * 16); // Paper - per player view distance
+                double d0 = Math.min(this.getEffectiveRange(), io.papermc.paper.chunk.PlayerChunkLoader.getSendViewDistance(player) * 16); // Paper - per player view distance
                 double d1 = vec3d_dx * vec3d_dx + vec3d_dz * vec3d_dz; // Paper
                 double d2 = d0 * d0;
                 boolean flag = d1 <= d2 && this.entity.broadcastToPlayer(player);
diff --git a/src/main/java/net/minecraft/server/level/DistanceManager.java b/src/main/java/net/minecraft/server/level/DistanceManager.java
index e4fb74c3eae500041817a77e91a5ade241c79a4f..ab7152e1b10814ed758927cd587ad21c956e74ba 100644
--- a/src/main/java/net/minecraft/server/level/DistanceManager.java
+++ b/src/main/java/net/minecraft/server/level/DistanceManager.java
@@ -70,7 +70,7 @@ public abstract class DistanceManager {
     }
 
     private static int getTicketLevelAt(SortedArraySet<Ticket<?>> tickets) {
-        return !tickets.isEmpty() ? ((Ticket) tickets.first()).getTicketLevel() : ChunkMap.MAX_CHUNK_DISTANCE + 1;
+        return !tickets.isEmpty() ? tickets.first().getTicketLevel() : ChunkMap.MAX_CHUNK_DISTANCE + 1;
     }
 
     protected abstract boolean isChunkToRemove(long pos);
@@ -150,7 +150,7 @@ public abstract class DistanceManager {
     public void removePlayer(SectionPos pos, ServerPlayer player) {
         ChunkPos chunkcoordintpair = pos.chunk();
         long i = chunkcoordintpair.toLong();
-        ObjectSet<ServerPlayer> objectset = (ObjectSet) this.playersPerChunk.get(i);
+        ObjectSet<ServerPlayer> objectset = this.playersPerChunk.get(i);
         if (objectset == null) return; // CraftBukkit - SPIGOT-6208
 
         if (objectset != null) objectset.remove(player); // Paper - some state corruption happens here, don't crash, clean up gracefully.
@@ -317,7 +317,7 @@ public abstract class DistanceManager {
         }
 
         private boolean havePlayer(long chunkPos) {
-            ObjectSet<ServerPlayer> objectset = (ObjectSet) DistanceManager.this.playersPerChunk.get(chunkPos);
+            ObjectSet<ServerPlayer> objectset = DistanceManager.this.playersPerChunk.get(chunkPos);
 
             return objectset != null && !objectset.isEmpty();
         }
diff --git a/src/main/java/net/minecraft/server/level/ServerChunkCache.java b/src/main/java/net/minecraft/server/level/ServerChunkCache.java
index 7721872c953ecb151a7d34f922954838a31fe941..ce5f80503ff664573e6566d0c7c4baa641e55418 100644
--- a/src/main/java/net/minecraft/server/level/ServerChunkCache.java
+++ b/src/main/java/net/minecraft/server/level/ServerChunkCache.java
@@ -418,7 +418,7 @@ public class ServerChunkCache extends ChunkSource {
     public ChunkAccess getChunk(int x, int z, ChunkStatus leastStatus, boolean create) {
         final int x1 = x; final int z1 = z; // Paper - conflict on variable change
         if (!io.papermc.paper.util.TickThread.isTickThread()) { // Paper - rewrite chunk system
-            return (ChunkAccess) CompletableFuture.supplyAsync(() -> {
+            return CompletableFuture.supplyAsync(() -> {
                 return this.getChunk(x, z, leastStatus, create);
             }, this.mainThreadProcessor).join();
         } else {
@@ -456,7 +456,7 @@ public class ServerChunkCache extends ChunkSource {
                 return ichunkaccess1;
             }, (playerchunk_failure) -> {
                 if (create) {
-                    throw (IllegalStateException) Util.pauseInIde(new IllegalStateException("Chunk not there when requested: " + playerchunk_failure));
+                    throw Util.pauseInIde(new IllegalStateException("Chunk not there when requested: " + playerchunk_failure));
                 } else {
                     return null;
                 }
@@ -478,8 +478,8 @@ public class ServerChunkCache extends ChunkSource {
 
     private void clearCache() {
         Arrays.fill(this.lastChunkPos, ChunkPos.INVALID_CHUNK_POS);
-        Arrays.fill(this.lastChunkStatus, (Object) null);
-        Arrays.fill(this.lastChunk, (Object) null);
+        Arrays.fill(this.lastChunkStatus, null);
+        Arrays.fill(this.lastChunk, null);
     }
 
     public CompletableFuture<Either<ChunkAccess, ChunkHolder.ChunkLoadingFailure>> getChunkFuture(int chunkX, int chunkZ, ChunkStatus leastStatus, boolean create) {
@@ -695,7 +695,7 @@ public class ServerChunkCache extends ChunkSource {
                 int chunkZ = io.papermc.paper.util.MCUtil.getChunkCoordinate(player.getZ());
 
                 playerChunkMap.playerMobSpawnMap.addOrUpdate(player, chunkX, chunkZ, range);
-                player.lastEntitySpawnRadiusSquared = (double)((range << 4) * (range << 4)); // used in anyPlayerCloseEnoughForSpawning
+                player.lastEntitySpawnRadiusSquared = (range << 4) * (range << 4); // used in anyPlayerCloseEnoughForSpawning
                 player.playerNaturallySpawnedEvent = event;
             }
             // Paper end - optimize isOutisdeRange
diff --git a/src/main/java/net/minecraft/server/level/ServerLevel.java b/src/main/java/net/minecraft/server/level/ServerLevel.java
index 2d142d9f36ec02a6501dd562fa592d823c663d4b..4dfb93770528131a376538686df7eea0d3334f49 100644
--- a/src/main/java/net/minecraft/server/level/ServerLevel.java
+++ b/src/main/java/net/minecraft/server/level/ServerLevel.java
@@ -580,7 +580,7 @@ public class ServerLevel extends Level implements WorldGenLevel {
         this.updateSkyBrightness();
         this.prepareWeather();
         this.getWorldBorder().setAbsoluteMaxSize(minecraftserver.getAbsoluteMaxWorldSize());
-        this.raids = (Raids) this.getDataStorage().computeIfAbsent((nbttagcompound) -> {
+        this.raids = this.getDataStorage().computeIfAbsent((nbttagcompound) -> {
             return Raids.load(this, nbttagcompound);
         }, () -> {
             return new Raids(this);
@@ -813,17 +813,17 @@ public class ServerLevel extends Level implements WorldGenLevel {
                 boolean flag1 = this.getGameRules().getBoolean(GameRules.RULE_DOMOBSPAWNING) && this.random.nextDouble() < (double) difficultydamagescaler.getEffectiveDifficulty() * this.paperConfig().entities.spawning.skeletonHorseThunderSpawnChance.or(0.01D) && !this.getBlockState(blockposition.below()).is(Blocks.LIGHTNING_ROD); // Paper
 
                 if (flag1) {
-                    SkeletonHorse entityhorseskeleton = (SkeletonHorse) EntityType.SKELETON_HORSE.create(this);
+                    SkeletonHorse entityhorseskeleton = EntityType.SKELETON_HORSE.create(this);
 
                     if (entityhorseskeleton != null) {
                         entityhorseskeleton.setTrap(true);
                         entityhorseskeleton.setAge(0);
-                        entityhorseskeleton.setPos((double) blockposition.getX(), (double) blockposition.getY(), (double) blockposition.getZ());
+                        entityhorseskeleton.setPos(blockposition.getX(), blockposition.getY(), blockposition.getZ());
                         this.addFreshEntity(entityhorseskeleton, org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason.LIGHTNING); // CraftBukkit
                     }
                 }
 
-                LightningBolt entitylightning = (LightningBolt) EntityType.LIGHTNING_BOLT.create(this);
+                LightningBolt entitylightning = EntityType.LIGHTNING_BOLT.create(this);
 
                 if (entitylightning != null) {
                     entitylightning.moveTo(Vec3.atBottomCenterOf(blockposition));
@@ -843,7 +843,7 @@ public class ServerLevel extends Level implements WorldGenLevel {
             int downY = normalY - 1;
             blockposition.setY(normalY);
             // Paper end
-            Biome biomebase = (Biome) this.getBiome(blockposition).value();
+            Biome biomebase = this.getBiome(blockposition).value();
 
             // Paper start - optimise chunk ticking
             blockposition.setY(downY);
@@ -946,7 +946,7 @@ public class ServerLevel extends Level implements WorldGenLevel {
         Optional<BlockPos> optional = this.findLightningRod(blockposition1);
 
         if (optional.isPresent()) {
-            return (BlockPos) optional.get();
+            return optional.get();
         } else {
             AABB axisalignedbb = (new AABB(blockposition1, new BlockPos(blockposition1.getX(), this.getMaxBuildHeight(), blockposition1.getZ()))).inflate(3.0D);
             List<LivingEntity> list = this.getEntitiesOfClass(LivingEntity.class, axisalignedbb, (entityliving) -> {
@@ -954,7 +954,7 @@ public class ServerLevel extends Level implements WorldGenLevel {
             });
 
             if (!list.isEmpty()) {
-                return ((LivingEntity) list.get(this.random.nextInt(list.size()))).blockPosition();
+                return list.get(this.random.nextInt(list.size())).blockPosition();
             } else {
                 if (returnNullWhenNoTarget) return null; // Paper
                 if (blockposition1.getY() == this.getMinBuildHeight() - 1) {
@@ -1097,22 +1097,22 @@ public class ServerLevel extends Level implements WorldGenLevel {
         }
         // */
         for (int idx = 0; idx < this.players.size(); ++idx) {
-            if (((ServerPlayer) this.players.get(idx)).level == this) {
-                ((ServerPlayer) this.players.get(idx)).tickWeather();
+            if (this.players.get(idx).level == this) {
+                this.players.get(idx).tickWeather();
             }
         }
 
         if (flag != this.isRaining()) {
             // Only send weather packets to those affected
             for (int idx = 0; idx < this.players.size(); ++idx) {
-                if (((ServerPlayer) this.players.get(idx)).level == this) {
-                    ((ServerPlayer) this.players.get(idx)).setPlayerWeather((!flag ? WeatherType.DOWNFALL : WeatherType.CLEAR), false);
+                if (this.players.get(idx).level == this) {
+                    this.players.get(idx).setPlayerWeather((!flag ? WeatherType.DOWNFALL : WeatherType.CLEAR), false);
                 }
             }
         }
         for (int idx = 0; idx < this.players.size(); ++idx) {
-            if (((ServerPlayer) this.players.get(idx)).level == this) {
-                ((ServerPlayer) this.players.get(idx)).updateWeather(this.oRainLevel, this.rainLevel, this.oThunderLevel, this.thunderLevel);
+            if (this.players.get(idx).level == this) {
+                this.players.get(idx).updateWeather(this.oRainLevel, this.rainLevel, this.oThunderLevel, this.thunderLevel);
             }
         }
         // CraftBukkit end
@@ -1409,7 +1409,7 @@ public class ServerLevel extends Level implements WorldGenLevel {
     public ServerPlayer getRandomPlayer() {
         List<ServerPlayer> list = this.getPlayers(LivingEntity::isAlive);
 
-        return list.isEmpty() ? null : (ServerPlayer) list.get(this.random.nextInt(list.size()));
+        return list.isEmpty() ? null : list.get(this.random.nextInt(list.size()));
     }
 
     @Override
@@ -1464,7 +1464,7 @@ public class ServerLevel extends Level implements WorldGenLevel {
     }
 
     private void addPlayer(ServerPlayer player) {
-        Entity entity = (Entity) this.getEntities().get(player.getUUID());
+        Entity entity = this.getEntities().get(player.getUUID());
 
         if (entity != null) {
             ServerLevel.LOGGER.warn("Force-added player with duplicate UUID {}", player.getUUID());
@@ -1632,7 +1632,7 @@ public class ServerLevel extends Level implements WorldGenLevel {
 
     @Override
     public void levelEvent(@Nullable Player player, int eventId, BlockPos pos, int data) {
-        this.server.getPlayerList().broadcast(player, (double) pos.getX(), (double) pos.getY(), (double) pos.getZ(), 64.0D, this.dimension(), new ClientboundLevelEventPacket(eventId, pos, data, false));
+        this.server.getPlayerList().broadcast(player, pos.getX(), pos.getY(), pos.getZ(), 64.0D, this.dimension(), new ClientboundLevelEventPacket(eventId, pos, data, false));
     }
 
     public int getLogicalHeight() {
@@ -1701,7 +1701,7 @@ public class ServerLevel extends Level implements WorldGenLevel {
     @Override
     public void updateNeighborsAt(BlockPos pos, Block sourceBlock) {
         if (captureBlockStates) { return; } // Paper - Cancel all physics during placement
-        this.neighborUpdater.updateNeighborsAtExceptFromFacing(pos, sourceBlock, (Direction) null);
+        this.neighborUpdater.updateNeighborsAtExceptFromFacing(pos, sourceBlock, null);
     }
 
     @Override
@@ -1748,7 +1748,7 @@ public class ServerLevel extends Level implements WorldGenLevel {
             ServerPlayer entityplayer = (ServerPlayer) iterator.next();
 
             if (entityplayer.distanceToSqr(x, y, z) < 4096.0D) {
-                entityplayer.connection.send(new ClientboundExplodePacket(x, y, z, power, explosion.getToBlow(), (Vec3) explosion.getHitPlayers().get(entityplayer)));
+                entityplayer.connection.send(new ClientboundExplodePacket(x, y, z, power, explosion.getToBlow(), explosion.getHitPlayers().get(entityplayer)));
             }
         }
 
@@ -1764,11 +1764,11 @@ public class ServerLevel extends Level implements WorldGenLevel {
         this.blockEventsToReschedule.clear();
 
         while (!this.blockEvents.isEmpty()) {
-            BlockEventData blockactiondata = (BlockEventData) this.blockEvents.removeFirst();
+            BlockEventData blockactiondata = this.blockEvents.removeFirst();
 
             if (this.shouldTickBlocksAt(blockactiondata.pos())) {
                 if (this.doBlockEvent(blockactiondata)) {
-                    this.server.getPlayerList().broadcast((Player) null, (double) blockactiondata.pos().getX(), (double) blockactiondata.pos().getY(), (double) blockactiondata.pos().getZ(), 64.0D, this.dimension(), new ClientboundBlockEventPacket(blockactiondata.pos(), blockactiondata.block(), blockactiondata.paramA(), blockactiondata.paramB()));
+                    this.server.getPlayerList().broadcast(null, blockactiondata.pos().getX(), blockactiondata.pos().getY(), blockactiondata.pos().getZ(), 64.0D, this.dimension(), new ClientboundBlockEventPacket(blockactiondata.pos(), blockactiondata.block(), blockactiondata.paramA(), blockactiondata.paramB()));
                 }
             } else {
                 this.blockEventsToReschedule.add(blockactiondata);
@@ -1859,21 +1859,21 @@ public class ServerLevel extends Level implements WorldGenLevel {
     @Nullable
     @Override
     public Entity getEntity(int id) {
-        return (Entity) this.getEntities().get(id);
+        return this.getEntities().get(id);
     }
 
     /** @deprecated */
     @Deprecated
     @Nullable
     public Entity getEntityOrPart(int id) {
-        Entity entity = (Entity) this.getEntities().get(id);
+        Entity entity = this.getEntities().get(id);
 
-        return entity != null ? entity : (Entity) this.dragonParts.get(id);
+        return entity != null ? entity : this.dragonParts.get(id);
     }
 
     @Nullable
     public Entity getEntity(UUID uuid) {
-        return (Entity) this.getEntities().get(uuid);
+        return this.getEntities().get(uuid);
     }
 
     @Nullable
@@ -1886,9 +1886,9 @@ public class ServerLevel extends Level implements WorldGenLevel {
             if (optional.isEmpty()) {
                 return null;
             } else {
-                Pair<BlockPos, Holder<Structure>> pair = this.getChunkSource().getGenerator().findNearestMapStructure(this, (HolderSet) optional.get(), pos, radius, skipReferencedStructures);
+                Pair<BlockPos, Holder<Structure>> pair = this.getChunkSource().getGenerator().findNearestMapStructure(this, optional.get(), pos, radius, skipReferencedStructures);
 
-                return pair != null ? (BlockPos) pair.getFirst() : null;
+                return pair != null ? pair.getFirst() : null;
             }
         }
     }
@@ -1921,7 +1921,7 @@ public class ServerLevel extends Level implements WorldGenLevel {
     @Override
     public MapItemSavedData getMapData(String id) {
         // CraftBukkit start
-        return (MapItemSavedData) this.getServer().overworld().getDataStorage().get((nbttagcompound) -> {
+        return this.getServer().overworld().getDataStorage().get((nbttagcompound) -> {
             // We only get here when the data file exists, but is not a valid map
             MapItemSavedData newMap = MapItemSavedData.load(nbttagcompound);
             newMap.id = id;
@@ -1940,7 +1940,7 @@ public class ServerLevel extends Level implements WorldGenLevel {
 
     @Override
     public int getFreeMapId() {
-        return ((MapIndex) this.getServer().overworld().getDataStorage().computeIfAbsent(MapIndex::load, MapIndex::new, "idcounts")).getFreeAuxValueForMap();
+        return this.getServer().overworld().getDataStorage().computeIfAbsent(MapIndex::load, MapIndex::new, "idcounts").getFreeAuxValueForMap();
     }
 
     // Paper start - helper function for configurable spawn radius
@@ -2026,13 +2026,13 @@ public class ServerLevel extends Level implements WorldGenLevel {
     }
 
     public LongSet getForcedChunks() {
-        ForcedChunksSavedData forcedchunk = (ForcedChunksSavedData) this.getDataStorage().get(ForcedChunksSavedData::load, "chunks");
+        ForcedChunksSavedData forcedchunk = this.getDataStorage().get(ForcedChunksSavedData::load, "chunks");
 
-        return (LongSet) (forcedchunk != null ? LongSets.unmodifiable(forcedchunk.getChunks()) : LongSets.EMPTY_SET);
+        return forcedchunk != null ? LongSets.unmodifiable(forcedchunk.getChunks()) : LongSets.EMPTY_SET;
     }
 
     public boolean setChunkForced(int x, int z, boolean forced) {
-        ForcedChunksSavedData forcedchunk = (ForcedChunksSavedData) this.getDataStorage().computeIfAbsent(ForcedChunksSavedData::load, ForcedChunksSavedData::new, "chunks");
+        ForcedChunksSavedData forcedchunk = this.getDataStorage().computeIfAbsent(ForcedChunksSavedData::load, ForcedChunksSavedData::new, "chunks");
         ChunkPos chunkcoordintpair = new ChunkPos(x, z);
         long k = chunkcoordintpair.toLong();
         boolean flag1;
@@ -2138,7 +2138,7 @@ public class ServerLevel extends Level implements WorldGenLevel {
                 while (objectiterator.hasNext()) {
                     Entry<MobCategory> entry = (Entry) objectiterator.next();
 
-                    bufferedwriter.write(String.format(Locale.ROOT, "spawn_count.%s: %d\n", ((MobCategory) entry.getKey()).getName(), Integer.valueOf(entry.getIntValue())));
+                    bufferedwriter.write(String.format(Locale.ROOT, "spawn_count.%s: %d\n", entry.getKey().getName(), Integer.valueOf(entry.getIntValue())));
                 }
             }
 
@@ -2366,13 +2366,13 @@ public class ServerLevel extends Level implements WorldGenLevel {
 
             while (iterator.hasNext()) {
                 T t0 = iterator.next();
-                String s = (String) classifier.apply(t0);
+                String s = classifier.apply(t0);
 
                 object2intopenhashmap.addTo(s, 1);
             }
 
-            return (String) object2intopenhashmap.object2IntEntrySet().stream().sorted(Comparator.comparing(Entry<String>::getIntValue).reversed()).limit(5L).map((entry) -> { // CraftBukkit - decompile error
-                String s1 = (String) entry.getKey();
+            return object2intopenhashmap.object2IntEntrySet().stream().sorted(Comparator.comparing(Entry<String>::getIntValue).reversed()).limit(5L).map((entry) -> { // CraftBukkit - decompile error
+                String s1 = entry.getKey();
 
                 return s1 + ":" + entry.getIntValue();
             }).collect(Collectors.joining(","));
@@ -2582,7 +2582,7 @@ public class ServerLevel extends Level implements WorldGenLevel {
                         {
                             MapItemSavedData map = (MapItemSavedData) o;
                             map.carriedByPlayers.remove( (Player) entity );
-                            for ( Iterator<MapItemSavedData.HoldingPlayer> iter = (Iterator<MapItemSavedData.HoldingPlayer>) map.carriedBy.iterator(); iter.hasNext(); )
+                            for (Iterator<MapItemSavedData.HoldingPlayer> iter = map.carriedBy.iterator(); iter.hasNext(); )
                             {
                                 if ( iter.next().player == entity )
                                 {
diff --git a/src/main/java/net/minecraft/server/level/ServerPlayer.java b/src/main/java/net/minecraft/server/level/ServerPlayer.java
index 17d9dc7fc57261a5e85fcbe1fa871c80d5d7b7e4..05ad28fc5b442a34c0db8a03774b7e2dbeb0cbdf 100644
--- a/src/main/java/net/minecraft/server/level/ServerPlayer.java
+++ b/src/main/java/net/minecraft/server/level/ServerPlayer.java
@@ -376,7 +376,7 @@ public class ServerPlayer extends Player {
 
         if (worldserver.dimensionType().hasSkyLight() && worldserver.serverLevelData.getGameType() != GameType.ADVENTURE) {
             int i = Math.max(0, this.server.getSpawnRadius(worldserver));
-            int j = Mth.floor(worldserver.getWorldBorder().getDistanceToBorder((double) blockposition.getX(), (double) blockposition.getZ()));
+            int j = Mth.floor(worldserver.getWorldBorder().getDistanceToBorder(blockposition.getX(), blockposition.getZ()));
 
             if (j < i) {
                 i = j;
@@ -386,7 +386,7 @@ public class ServerPlayer extends Player {
                 i = 1;
             }
 
-            long k = (long) (i * 2 + 1);
+            long k = i * 2 + 1;
             long l = k * k;
             int i1 = l > 2147483647L ? Integer.MAX_VALUE : (int) l;
             int j1 = this.getCoprime(i1);
@@ -413,7 +413,7 @@ public class ServerPlayer extends Player {
 
         if (world.dimensionType().hasSkyLight() && world.serverLevelData.getGameType() != GameType.ADVENTURE) { // CraftBukkit
             int i = Math.max(0, this.server.getSpawnRadius(world));
-            int j = Mth.floor(world.getWorldBorder().getDistanceToBorder((double) blockposition.getX(), (double) blockposition.getZ()));
+            int j = Mth.floor(world.getWorldBorder().getDistanceToBorder(blockposition.getX(), blockposition.getZ()));
 
             if (j < i) {
                 i = j;
@@ -423,7 +423,7 @@ public class ServerPlayer extends Player {
                 i = 1;
             }
 
-            long k = (long) (i * 2 + 1);
+            long k = i * 2 + 1;
             long l = k * k;
             int i1 = l > 2147483647L ? Integer.MAX_VALUE : (int) l;
             int j1 = this.getCoprime(i1);
@@ -588,7 +588,7 @@ public class ServerPlayer extends Player {
             }
             if (world == null || position == null) {
                 world = ((CraftWorld) Bukkit.getServer().getWorlds().get(0)).getHandle();
-                position = Vec3.atCenterOf(((ServerLevel) world).getSharedSpawnPos());
+                position = Vec3.atCenterOf(world.getSharedSpawnPos());
             }
             this.level = world;
             this.setPosRaw(position.x(), position.y(), position.z()); // Paper - don't register to chunks yet
@@ -1266,7 +1266,7 @@ public class ServerPlayer extends Player {
         if (optional.isPresent() || !canCreatePortal) { // CraftBukkit
             return optional;
         } else {
-            Direction.Axis enumdirection_enumaxis = (Direction.Axis) this.level.getBlockState(this.portalEntrancePos).getOptionalValue(NetherPortalBlock.AXIS).orElse(Direction.Axis.X);
+            Direction.Axis enumdirection_enumaxis = this.level.getBlockState(this.portalEntrancePos).getOptionalValue(NetherPortalBlock.AXIS).orElse(Direction.Axis.X);
             Optional<BlockUtil.FoundRectangle> optional1 = worldserver.getPortalForcer().createPortal(blockposition, enumdirection_enumaxis, this, createRadius); // CraftBukkit
 
             if (optional1.isEmpty()) {
@@ -1354,7 +1354,7 @@ public class ServerPlayer extends Player {
 
     @Override
     public Either<Player.BedSleepingProblem, Unit> startSleepInBed(BlockPos blockposition, boolean force) {
-        Direction enumdirection = (Direction) this.level.getBlockState(blockposition).getValue(HorizontalDirectionalBlock.FACING);
+        Direction enumdirection = this.level.getBlockState(blockposition).getValue(HorizontalDirectionalBlock.FACING);
         Either<Player.BedSleepingProblem, Unit> bedResult = this.getBedResult(blockposition, enumdirection);
 
         if (bedResult.left().orElse(null) == Player.BedSleepingProblem.OTHER_PROBLEM) {
@@ -1788,7 +1788,7 @@ public class ServerPlayer extends Player {
 
         this.enchantmentSeed = oldPlayer.enchantmentSeed;
         this.enderChestInventory = oldPlayer.enderChestInventory;
-        this.getEntityData().set(ServerPlayer.DATA_PLAYER_MODE_CUSTOMISATION, (Byte) oldPlayer.getEntityData().get(ServerPlayer.DATA_PLAYER_MODE_CUSTOMISATION));
+        this.getEntityData().set(ServerPlayer.DATA_PLAYER_MODE_CUSTOMISATION, oldPlayer.getEntityData().get(ServerPlayer.DATA_PLAYER_MODE_CUSTOMISATION));
         this.lastSentExp = -1;
         this.lastSentHealth = -1.0F;
         this.lastSentFood = -1;
@@ -1827,7 +1827,7 @@ public class ServerPlayer extends Player {
             this.levitationStartPos = null;
         }
 
-        CriteriaTriggers.EFFECTS_CHANGED.trigger(this, (Entity) null);
+        CriteriaTriggers.EFFECTS_CHANGED.trigger(this, null);
     }
 
     @Override
@@ -2041,7 +2041,7 @@ public class ServerPlayer extends Player {
     }
 
     public Entity getCamera() {
-        return (Entity) (this.camera == null ? this : this.camera);
+        return this.camera == null ? this : this.camera;
     }
 
     public void setCamera(@Nullable Entity entity) {
@@ -2218,7 +2218,7 @@ public class ServerPlayer extends Player {
         if (event.getLocation() != null) {
             dimension = event.getLocation().getWorld() != null ? ((CraftWorld) event.getLocation().getWorld()).getHandle().dimension() : dimension;
             pos = io.papermc.paper.util.MCUtil.toBlockPosition(event.getLocation());
-            angle = (float) event.getLocation().getYaw();
+            angle = event.getLocation().getYaw();
             forced = event.isForced();
             // Paper end
 
diff --git a/src/main/java/net/minecraft/server/level/ServerPlayerGameMode.java b/src/main/java/net/minecraft/server/level/ServerPlayerGameMode.java
index 58b093bb1de78ee3b3b2ea364aa50474883f443a..a975469bbf72a91a0fce6c0666aaa8fd0539deb7 100644
--- a/src/main/java/net/minecraft/server/level/ServerPlayerGameMode.java
+++ b/src/main/java/net/minecraft/server/level/ServerPlayerGameMode.java
@@ -470,7 +470,7 @@ public class ServerPlayerGameMode {
             int i = stack.getCount();
             int j = stack.getDamageValue();
             InteractionResultHolder<ItemStack> interactionresultwrapper = stack.use(world, player, hand);
-            ItemStack itemstack1 = (ItemStack) interactionresultwrapper.getObject();
+            ItemStack itemstack1 = interactionresultwrapper.getObject();
 
             if (itemstack1 == stack && itemstack1.getCount() == i && itemstack1.getUseDuration() <= 0 && itemstack1.getDamageValue() == j) {
                 return interactionresultwrapper.getResult();
diff --git a/src/main/java/net/minecraft/server/level/ThreadedLevelLightEngine.java b/src/main/java/net/minecraft/server/level/ThreadedLevelLightEngine.java
index baa22b639f7547be827c70b869ae02e499018391..59f3ef65042d7634a86c9788a6c8594cbdffcc23 100644
--- a/src/main/java/net/minecraft/server/level/ThreadedLevelLightEngine.java
+++ b/src/main/java/net/minecraft/server/level/ThreadedLevelLightEngine.java
@@ -196,12 +196,12 @@ public class ThreadedLevelLightEngine extends LevelLightEngine implements AutoCl
 
     @Override
     public int runUpdates(int i, boolean doSkylight, boolean skipEdgeLightPropagation) {
-        throw (UnsupportedOperationException)Util.pauseInIde(new UnsupportedOperationException("Ran automatically on a different thread!"));
+        throw Util.pauseInIde(new UnsupportedOperationException("Ran automatically on a different thread!"));
     }
 
     @Override
     public void onBlockEmissionIncrease(BlockPos pos, int level) {
-        throw (UnsupportedOperationException)Util.pauseInIde(new UnsupportedOperationException("Ran automatically on a different thread!"));
+        throw Util.pauseInIde(new UnsupportedOperationException("Ran automatically on a different thread!"));
     }
 
     @Override
@@ -223,8 +223,8 @@ public class ThreadedLevelLightEngine extends LevelLightEngine implements AutoCl
             super.enableLightSources(pos, false);
 
             for(int i = this.getMinLightSection(); i < this.getMaxLightSection(); ++i) {
-                super.queueSectionData(LightLayer.BLOCK, SectionPos.of(pos, i), (DataLayer)null, true);
-                super.queueSectionData(LightLayer.SKY, SectionPos.of(pos, i), (DataLayer)null, true);
+                super.queueSectionData(LightLayer.BLOCK, SectionPos.of(pos, i), null, true);
+                super.queueSectionData(LightLayer.SKY, SectionPos.of(pos, i), null, true);
             }
 
             for(int j = this.levelHeightAccessor.getMinSection(); j < this.levelHeightAccessor.getMaxSection(); ++j) {
diff --git a/src/main/java/net/minecraft/server/level/TicketType.java b/src/main/java/net/minecraft/server/level/TicketType.java
index 97d1ff2af23bac14e67bca5896843325aaa5bfc1..9c895cc9776639f6949e064209e8248e3a0d001e 100644
--- a/src/main/java/net/minecraft/server/level/TicketType.java
+++ b/src/main/java/net/minecraft/server/level/TicketType.java
@@ -41,7 +41,7 @@ public class TicketType<T> {
     }
 
     public static <T> TicketType<T> create(String name, Comparator<T> argumentComparator, int expiryTicks) {
-        return new TicketType<>(name, argumentComparator, (long) expiryTicks);
+        return new TicketType<>(name, argumentComparator, expiryTicks);
     }
 
     protected TicketType(String name, Comparator<T> argumentComparator, long expiryTicks) {
diff --git a/src/main/java/net/minecraft/server/level/WorldGenRegion.java b/src/main/java/net/minecraft/server/level/WorldGenRegion.java
index 8a08b7f03ae03e9bcd58c495d62698ef1453b6f2..36f20694859d9cbcc507592605cb7e7bbbb4e7a0 100644
--- a/src/main/java/net/minecraft/server/level/WorldGenRegion.java
+++ b/src/main/java/net/minecraft/server/level/WorldGenRegion.java
@@ -87,13 +87,13 @@ public class WorldGenRegion implements WorldGenLevel {
     public WorldGenRegion(ServerLevel world, List<ChunkAccess> chunks, ChunkStatus status, int placementRadius) {
         this.generatingStatus = status;
         this.writeRadiusCutoff = placementRadius;
-        int j = Mth.floor(Math.sqrt((double) chunks.size()));
+        int j = Mth.floor(Math.sqrt(chunks.size()));
 
         if (j * j != chunks.size()) {
-            throw (IllegalStateException) Util.pauseInIde(new IllegalStateException("Cache size is not a square."));
+            throw Util.pauseInIde(new IllegalStateException("Cache size is not a square."));
         } else {
             this.cache = chunks;
-            this.center = (ChunkAccess) chunks.get(chunks.size() / 2);
+            this.center = chunks.get(chunks.size() / 2);
             this.size = j;
             this.level = world;
             this.seed = world.getSeed();
@@ -101,8 +101,8 @@ public class WorldGenRegion implements WorldGenLevel {
             this.random = world.getChunkSource().randomState().getOrCreateRandomFactory(WorldGenRegion.WORLDGEN_REGION_RANDOM).at(this.center.getPos().getWorldPosition());
             this.dimensionType = world.dimensionType();
             this.biomeManager = new BiomeManager(this, BiomeManager.obfuscateSeed(this.seed));
-            this.firstPos = ((ChunkAccess) chunks.get(0)).getPos();
-            this.lastPos = ((ChunkAccess) chunks.get(chunks.size() - 1)).getPos();
+            this.firstPos = chunks.get(0).getPos();
+            this.lastPos = chunks.get(chunks.size() - 1).getPos();
             this.structureManager = world.structureManager().forWorldGenRegion(this);
         }
     }
@@ -134,7 +134,7 @@ public class WorldGenRegion implements WorldGenLevel {
             int k = chunkX - this.firstPos.x;
             int l = chunkZ - this.firstPos.z;
 
-            ichunkaccess = (ChunkAccess) this.cache.get(k + l * this.size);
+            ichunkaccess = this.cache.get(k + l * this.size);
             if (ichunkaccess.getStatus().isOrAfter(leastStatus)) {
                 return ichunkaccess;
             }
@@ -148,9 +148,9 @@ public class WorldGenRegion implements WorldGenLevel {
             WorldGenRegion.LOGGER.error("Requested chunk : {} {}", Integer.valueOf(chunkX), Integer.valueOf(chunkZ));
             WorldGenRegion.LOGGER.error("Region bounds : {} {} | {} {}", Integer.valueOf(this.firstPos.x), Integer.valueOf(this.firstPos.z), Integer.valueOf(this.lastPos.x), Integer.valueOf(this.lastPos.z));
             if (ichunkaccess != null) {
-                throw (RuntimeException) Util.pauseInIde(new RuntimeException(String.format(Locale.ROOT, "Chunk is not of correct status. Expecting %s, got %s | %s %s", leastStatus, ichunkaccess.getStatus(), Integer.valueOf(chunkX), Integer.valueOf(chunkZ))));
+                throw Util.pauseInIde(new RuntimeException(String.format(Locale.ROOT, "Chunk is not of correct status. Expecting %s, got %s | %s %s", leastStatus, ichunkaccess.getStatus(), Integer.valueOf(chunkX), Integer.valueOf(chunkZ))));
             } else {
-                throw (RuntimeException) Util.pauseInIde(new RuntimeException(String.format(Locale.ROOT, "We are asking a region for a chunk out of bound | %s %s", Integer.valueOf(chunkX), Integer.valueOf(chunkZ))));
+                throw Util.pauseInIde(new RuntimeException(String.format(Locale.ROOT, "We are asking a region for a chunk out of bound | %s %s", Integer.valueOf(chunkX), Integer.valueOf(chunkZ))));
             }
         }
     }
@@ -298,7 +298,7 @@ public class WorldGenRegion implements WorldGenLevel {
         } else {
             // Paper start
             if (!hasSetFarWarned) {
-            Util.logAndPauseIfInIde("Detected setBlock in a far chunk [" + i + ", " + j + "], pos: " + pos + ", status: " + this.generatingStatus + (this.currentlyGenerating == null ? "" : ", currently generating: " + (String) this.currentlyGenerating.get()));
+            Util.logAndPauseIfInIde("Detected setBlock in a far chunk [" + i + ", " + j + "], pos: " + pos + ", status: " + this.generatingStatus + (this.currentlyGenerating == null ? "" : ", currently generating: " + this.currentlyGenerating.get()));
             hasSetFarWarned = true;
             if (this.getServer() != null && this.getServer().isDebugging()) {
                 io.papermc.paper.util.TraceUtil.dumpTraceForThread("far setBlock call");
diff --git a/src/main/java/net/minecraft/server/level/progress/LoggerChunkProgressListener.java b/src/main/java/net/minecraft/server/level/progress/LoggerChunkProgressListener.java
index 4681b984c2b18a61473c6e1a4c7b94777f099543..bbb543584c8e2ce8bcc727c62765e715f7582911 100644
--- a/src/main/java/net/minecraft/server/level/progress/LoggerChunkProgressListener.java
+++ b/src/main/java/net/minecraft/server/level/progress/LoggerChunkProgressListener.java
@@ -54,7 +54,7 @@ public class LoggerChunkProgressListener implements ChunkProgressListener {
 
     @Override
     public void stop() {
-        LOGGER.info("Time elapsed: {} ms", Long.valueOf((long) (Util.getMillis() - this.startTime)));
+        LOGGER.info("Time elapsed: {} ms", Long.valueOf(Util.getMillis() - this.startTime));
         this.nextTickTime = Long.MAX_VALUE;
     }
 
diff --git a/src/main/java/net/minecraft/server/network/ServerConnectionListener.java b/src/main/java/net/minecraft/server/network/ServerConnectionListener.java
index 7eb2ea34517e4a202c8620f37a6ae8f4b955b94a..c40d7774975c640ba2b24394dea04207623f5d55 100644
--- a/src/main/java/net/minecraft/server/network/ServerConnectionListener.java
+++ b/src/main/java/net/minecraft/server/network/ServerConnectionListener.java
@@ -116,7 +116,7 @@ public class ServerConnectionListener {
             }
             // Paper end
 
-            this.channels.add(((ServerBootstrap) ((ServerBootstrap) (new ServerBootstrap()).channel(oclass)).childHandler(new ChannelInitializer<Channel>() {
+            this.channels.add((new ServerBootstrap()).channel(oclass).childHandler(new ChannelInitializer<Channel>() {
                 protected void initChannel(Channel channel) {
                     try {
                         channel.config().setOption(ChannelOption.TCP_NODELAY, Boolean.TRUE);
@@ -159,7 +159,7 @@ public class ServerConnectionListener {
                     ((Connection) object).setListener(new ServerHandshakePacketListenerImpl(ServerConnectionListener.this.server, (Connection) object));
                     io.papermc.paper.network.ChannelInitializeListenerHolder.callListeners(channel); // Paper
                 }
-            }).group((EventLoopGroup) lazyinitvar.get()).localAddress(address)).option(ChannelOption.AUTO_READ, Boolean.FALSE).bind().syncUninterruptibly()); // CraftBukkit // Paper
+            }).group((EventLoopGroup) lazyinitvar.get()).localAddress(address).option(ChannelOption.AUTO_READ, Boolean.FALSE).bind().syncUninterruptibly()); // CraftBukkit // Paper
         }
     }
 
@@ -178,7 +178,7 @@ public class ServerConnectionListener {
         ChannelFuture channelfuture;
 
         synchronized (this.channels) {
-            channelfuture = ((ServerBootstrap) ((ServerBootstrap) (new ServerBootstrap()).channel(LocalServerChannel.class)).childHandler(new ChannelInitializer<Channel>() {
+            channelfuture = (new ServerBootstrap()).channel(LocalServerChannel.class).childHandler(new ChannelInitializer<Channel>() {
                 protected void initChannel(Channel channel) {
                     Connection networkmanager = new Connection(PacketFlow.SERVERBOUND);
 
@@ -186,7 +186,7 @@ public class ServerConnectionListener {
                     ServerConnectionListener.this.connections.add(networkmanager);
                     channel.pipeline().addLast("packet_handler", networkmanager);
                 }
-            }).group((EventLoopGroup) ServerConnectionListener.SERVER_EVENT_GROUP.get()).localAddress(LocalAddress.ANY)).bind().syncUninterruptibly();
+            }).group(ServerConnectionListener.SERVER_EVENT_GROUP.get()).localAddress(LocalAddress.ANY).bind().syncUninterruptibly();
             this.channels.add(channelfuture);
         }
 
@@ -285,11 +285,11 @@ public class ServerConnectionListener {
             int i = this.delay + (int) (Math.random() * (double) this.jitter);
 
             this.queuedMessages.add(new ServerConnectionListener.LatencySimulator.DelayedMessage(ctx, msg));
-            ServerConnectionListener.LatencySimulator.TIMER.newTimeout(this::onTimeout, (long) i, TimeUnit.MILLISECONDS);
+            ServerConnectionListener.LatencySimulator.TIMER.newTimeout(this::onTimeout, i, TimeUnit.MILLISECONDS);
         }
 
         private void onTimeout(Timeout timeout) {
-            ServerConnectionListener.LatencySimulator.DelayedMessage serverconnection_latencysimulator_delayedmessage = (ServerConnectionListener.LatencySimulator.DelayedMessage) this.queuedMessages.remove(0);
+            ServerConnectionListener.LatencySimulator.DelayedMessage serverconnection_latencysimulator_delayedmessage = this.queuedMessages.remove(0);
 
             serverconnection_latencysimulator_delayedmessage.ctx.fireChannelRead(serverconnection_latencysimulator_delayedmessage.msg);
         }
diff --git a/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java b/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
index 0e87c68545b50cfcf53586655bb2ff9395e62ff6..320941f7d8d791e1d3f7f587d9bf13152e954b22 100644
--- a/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
+++ b/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
@@ -336,7 +336,7 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Tic
     private boolean hasMoved; // Spigot
 
     public CraftPlayer getCraftPlayer() {
-        return (this.player == null) ? null : (CraftPlayer) this.player.getBukkitEntity();
+        return (this.player == null) ? null : this.player.getBukkitEntity();
     }
     // CraftBukkit end
 
@@ -642,7 +642,7 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Tic
                 }
                 // Paper end
 
-                if (d10 - d9 > Math.max(100.0D, Math.pow((double) (org.spigotmc.SpigotConfig.movedTooQuicklyMultiplier * (float) i * speed), 2)) && !this.isSingleplayerOwner()) {
+                if (d10 - d9 > Math.max(100.0D, Math.pow(org.spigotmc.SpigotConfig.movedTooQuicklyMultiplier * (float) i * speed, 2)) && !this.isSingleplayerOwner()) {
                 // CraftBukkit end
                     ServerGamePacketListenerImpl.LOGGER.warn("{} (vehicle of {}) moved too quickly! {},{},{}", entity.getName().getString(), this.player.getName().getString(), Double.valueOf(d6), Double.valueOf(d7), Double.valueOf(d8));
                     this.connection.send(new ClientboundMoveVehiclePacket(entity));
@@ -955,7 +955,7 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Tic
             if (commandblocklistenerabstract != null) {
                 CommandBlockEntity.Mode tileentitycommand_type = tileentitycommand.getMode();
                 BlockState iblockdata = this.player.level.getBlockState(blockposition);
-                Direction enumdirection = (Direction) iblockdata.getValue(CommandBlock.FACING);
+                Direction enumdirection = iblockdata.getValue(CommandBlock.FACING);
                 BlockState iblockdata1;
 
                 switch (packet.getMode()) {
@@ -970,7 +970,7 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Tic
                         iblockdata1 = Blocks.COMMAND_BLOCK.defaultBlockState();
                 }
 
-                BlockState iblockdata2 = (BlockState) ((BlockState) iblockdata1.setValue(CommandBlock.FACING, enumdirection)).setValue(CommandBlock.CONDITIONAL, Boolean.valueOf(packet.isConditional()));
+                BlockState iblockdata2 = iblockdata1.setValue(CommandBlock.FACING, enumdirection).setValue(CommandBlock.CONDITIONAL, Boolean.valueOf(packet.isConditional()));
 
                 if (iblockdata2 != iblockdata) {
                     this.player.level.setBlock(blockposition, iblockdata2, 2);
@@ -981,7 +981,7 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Tic
                 commandblocklistenerabstract.setCommand(s);
                 commandblocklistenerabstract.setTrackOutput(flag);
                 if (!flag) {
-                    commandblocklistenerabstract.setLastOutput((Component) null);
+                    commandblocklistenerabstract.setLastOutput(null);
                 }
 
                 tileentitycommand.setAutomatic(packet.isAutomatic());
@@ -1012,7 +1012,7 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Tic
                 commandblocklistenerabstract.setCommand(packet.getCommand());
                 commandblocklistenerabstract.setTrackOutput(packet.isTrackOutput());
                 if (!packet.isTrackOutput()) {
-                    commandblocklistenerabstract.setLastOutput((Component) null);
+                    commandblocklistenerabstract.setLastOutput(null);
                 }
 
                 commandblocklistenerabstract.onUpdated();
@@ -1263,12 +1263,12 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Tic
             Objects.requireNonNull(list);
             stream.forEach(list::add);
             Consumer<List<FilteredText>> consumer = optional.isPresent() ? (list1) -> {
-                this.signBook((FilteredText) list1.get(0), list1.subList(1, list1.size()), i);
+                this.signBook(list1.get(0), list1.subList(1, list1.size()), i);
             } : (list1) -> {
                 this.updateBookContents(list1, i);
             };
 
-            this.filterTextPacket((List) list).thenAcceptAsync(consumer, this.server);
+            this.filterTextPacket(list).thenAcceptAsync(consumer, this.server);
         }
     }
 
@@ -1311,7 +1311,7 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Tic
 
         if (this.player.isTextFilteringEnabled()) {
             Stream<StringTag> stream = list.stream().map((filteredtext) -> { // CraftBukkit - decompile error
-                return StringTag.valueOf((String) unaryoperator.apply(filteredtext.filteredOrEmpty()));
+                return StringTag.valueOf(unaryoperator.apply(filteredtext.filteredOrEmpty()));
             });
 
             Objects.requireNonNull(nbttaglist);
@@ -1321,12 +1321,12 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Tic
             int i = 0;
 
             for (int j = list.size(); i < j; ++i) {
-                FilteredText filteredtext = (FilteredText) list.get(i);
+                FilteredText filteredtext = list.get(i);
                 String s = filteredtext.raw();
 
-                nbttaglist.add(StringTag.valueOf((String) unaryoperator.apply(s)));
+                nbttaglist.add(StringTag.valueOf(unaryoperator.apply(s)));
                 if (filteredtext.isFiltered()) {
-                    nbttagcompound.putString(String.valueOf(i), (String) unaryoperator.apply(filteredtext.filteredOrEmpty()));
+                    nbttagcompound.putString(String.valueOf(i), unaryoperator.apply(filteredtext.filteredOrEmpty()));
                 }
             }
 
@@ -1465,7 +1465,7 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Tic
                             if (!this.player.isChangingDimension() && (!this.player.getLevel().getGameRules().getBoolean(GameRules.RULE_DISABLE_ELYTRA_MOVEMENT_CHECK) || !this.player.isFallFlying())) {
                                 float f2 = this.player.isFallFlying() ? 300.0F : 100.0F;
 
-                                if (d11 - d10 > Math.max(f2, Math.pow((double) (org.spigotmc.SpigotConfig.movedTooQuicklyMultiplier * (float) i * speed), 2)) && !this.isSingleplayerOwner()) {
+                                if (d11 - d10 > Math.max(f2, Math.pow(org.spigotmc.SpigotConfig.movedTooQuicklyMultiplier * (float) i * speed, 2)) && !this.isSingleplayerOwner()) {
                                 // CraftBukkit end
                                     ServerGamePacketListenerImpl.LOGGER.warn("{} moved too quickly! {},{},{}", this.player.getName().getString(), Double.valueOf(d7), Double.valueOf(d8), Double.valueOf(d9));
                                     this.teleport(this.player.getX(), this.player.getY(), this.player.getZ(), this.player.getYRot(), this.player.getXRot());
@@ -2140,7 +2140,7 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Tic
 
     @Override
     public void send(Packet<?> packet) {
-        this.send(packet, (PacketSendListener) null);
+        this.send(packet, null);
     }
 
     public void send(Packet<?> packet, @Nullable PacketSendListener callbacks) {
@@ -2355,7 +2355,7 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Tic
         Instant instant1;
 
         do {
-            instant1 = (Instant) this.lastChatTimeStamp.get();
+            instant1 = this.lastChatTimeStamp.get();
             if (timestamp.isBefore(instant1)) {
                 return false;
             }
@@ -2412,10 +2412,10 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Tic
                         String message = String.format(queueEvent.getFormat(), queueEvent.getPlayer().getDisplayName(), queueEvent.getMessage());
                         if (((LazyPlayerSet) queueEvent.getRecipients()).isLazy()) {
                             if (!org.spigotmc.SpigotConfig.bungee && originalFormat.equals(queueEvent.getFormat()) && originalMessage.equals(queueEvent.getMessage()) && queueEvent.getPlayer().getName().equalsIgnoreCase(queueEvent.getPlayer().getDisplayName())) { // Spigot
-                                ServerGamePacketListenerImpl.this.server.getPlayerList().broadcastChatMessage(original, ServerGamePacketListenerImpl.this.player, ChatType.bind(ChatType.CHAT, (Entity) ServerGamePacketListenerImpl.this.player));
+                                ServerGamePacketListenerImpl.this.server.getPlayerList().broadcastChatMessage(original, ServerGamePacketListenerImpl.this.player, ChatType.bind(ChatType.CHAT, ServerGamePacketListenerImpl.this.player));
                                 return null;
                             } else if (!org.spigotmc.SpigotConfig.bungee && CraftChatMessage.fromComponent(original.decoratedContent()).equals(message)) { // Spigot
-                                ServerGamePacketListenerImpl.this.server.getPlayerList().broadcastChatMessage(original, ServerGamePacketListenerImpl.this.player, ChatType.bind(ChatType.RAW, (Entity) ServerGamePacketListenerImpl.this.player));
+                                ServerGamePacketListenerImpl.this.server.getPlayerList().broadcastChatMessage(original, ServerGamePacketListenerImpl.this.player, ChatType.bind(ChatType.RAW, ServerGamePacketListenerImpl.this.player));
                                 return null;
                             }
 
@@ -2451,10 +2451,10 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Tic
                 s = String.format(event.getFormat(), event.getPlayer().getDisplayName(), event.getMessage());
                 if (((LazyPlayerSet) event.getRecipients()).isLazy()) {
                     if (!org.spigotmc.SpigotConfig.bungee && originalFormat.equals(event.getFormat()) && originalMessage.equals(event.getMessage()) && event.getPlayer().getName().equalsIgnoreCase(event.getPlayer().getDisplayName())) { // Spigot
-                        ServerGamePacketListenerImpl.this.server.getPlayerList().broadcastChatMessage(original, ServerGamePacketListenerImpl.this.player, ChatType.bind(ChatType.CHAT, (Entity) ServerGamePacketListenerImpl.this.player));
+                        ServerGamePacketListenerImpl.this.server.getPlayerList().broadcastChatMessage(original, ServerGamePacketListenerImpl.this.player, ChatType.bind(ChatType.CHAT, ServerGamePacketListenerImpl.this.player));
                         return;
                     } else if (!org.spigotmc.SpigotConfig.bungee && CraftChatMessage.fromComponent(original.decoratedContent()).equals(s)) { // Spigot
-                        ServerGamePacketListenerImpl.this.server.getPlayerList().broadcastChatMessage(original, ServerGamePacketListenerImpl.this.player, ChatType.bind(ChatType.RAW, (Entity) ServerGamePacketListenerImpl.this.player));
+                        ServerGamePacketListenerImpl.this.server.getPlayerList().broadcastChatMessage(original, ServerGamePacketListenerImpl.this.player, ChatType.bind(ChatType.RAW, ServerGamePacketListenerImpl.this.player));
                         return;
                     }
 
@@ -2900,7 +2900,7 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Tic
                     this.player = this.server.getPlayerList().respawn(this.player, false);
                     if (this.server.isHardcore()) {
                         this.player.setGameMode(GameType.SPECTATOR, org.bukkit.event.player.PlayerGameModeChangeEvent.Cause.HARDCORE_DEATH, null); // Paper
-                        ((GameRules.BooleanValue) this.player.getLevel().getGameRules().getRule(GameRules.RULE_SPECTATORSGENERATECHUNKS)).set(false, this.player.getLevel()); // Paper
+                        this.player.getLevel().getGameRules().getRule(GameRules.RULE_SPECTATORSGENERATECHUNKS).set(false, this.player.getLevel()); // Paper
                     }
                 }
                 break;
@@ -3228,7 +3228,7 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Tic
                     while (objectiterator.hasNext()) {
                         Entry<ItemStack> entry = (Entry) objectiterator.next();
 
-                        this.player.containerMenu.setRemoteSlotNoCopy(entry.getIntKey(), (ItemStack) entry.getValue());
+                        this.player.containerMenu.setRemoteSlotNoCopy(entry.getIntKey(), entry.getValue());
                     }
 
                     this.player.containerMenu.setRemoteCarried(packet.getCarriedItem());
@@ -3386,7 +3386,7 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Tic
                 }
             }
         }
-        List<String> list = (List) Stream.of(lines).map(ChatFormatting::stripFormatting).collect(Collectors.toList());
+        List<String> list = Stream.of(lines).map(ChatFormatting::stripFormatting).collect(Collectors.toList());
         // Paper end
 
         this.filterTextPacket(list).thenAcceptAsync((list1) -> {
@@ -3425,7 +3425,7 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Tic
             List<net.kyori.adventure.text.Component> lines = new java.util.ArrayList<>();
 
             for (int i = 0; i < signText.size(); ++i) {
-                FilteredText filteredtext = (FilteredText) signText.get(i);
+                FilteredText filteredtext = signText.get(i);
 
                 if (this.player.isTextFilteringEnabled()) {
                     lines.add(net.kyori.adventure.text.Component.text(SharedConstants.filterText(filteredtext.filteredOrEmpty()))); // Paper - adventure
@@ -3433,7 +3433,7 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Tic
                     lines.add(net.kyori.adventure.text.Component.text(SharedConstants.filterText(filteredtext.raw()))); // Paper - adventure
                 }
             }
-            SignChangeEvent event = new SignChangeEvent((org.bukkit.craftbukkit.block.CraftBlock) player.getWorld().getBlockAt(x, y, z), this.player.getBukkitEntity(), lines);
+            SignChangeEvent event = new SignChangeEvent(player.getWorld().getBlockAt(x, y, z), this.player.getBukkitEntity(), lines);
             this.cserver.getPluginManager().callEvent(event);
 
             if (!event.isCancelled()) {
diff --git a/src/main/java/net/minecraft/server/network/ServerLoginPacketListenerImpl.java b/src/main/java/net/minecraft/server/network/ServerLoginPacketListenerImpl.java
index 07970f597488b00ad76a2bfc58183f8eabdc75b1..947fde2c78adc2f579aa307f2407766716e5d01d 100644
--- a/src/main/java/net/minecraft/server/network/ServerLoginPacketListenerImpl.java
+++ b/src/main/java/net/minecraft/server/network/ServerLoginPacketListenerImpl.java
@@ -252,7 +252,7 @@ public class ServerLoginPacketListenerImpl implements ServerLoginPacketListener,
             this.gameProfile = gameprofile;
             this.state = ServerLoginPacketListenerImpl.State.READY_TO_ACCEPT;
         } else {
-            this.gameProfile = new GameProfile((UUID) null, packet.name());
+            this.gameProfile = new GameProfile(null, packet.name());
             if (this.server.usesAuthentication() && !this.connection.isMemoryConnection()) {
                 this.state = ServerLoginPacketListenerImpl.State.KEY;
                 this.connection.send(new ClientboundHelloPacket("", this.server.getKeyPair().getPublic().getEncoded(), this.challenge));
@@ -326,7 +326,7 @@ public class ServerLoginPacketListenerImpl implements ServerLoginPacketListener,
                 GameProfile gameprofile = ServerLoginPacketListenerImpl.this.gameProfile;
 
                 try {
-                    ServerLoginPacketListenerImpl.this.gameProfile = ServerLoginPacketListenerImpl.this.server.getSessionService().hasJoinedServer(new GameProfile((UUID) null, gameprofile.getName()), s, this.getAddress());
+                    ServerLoginPacketListenerImpl.this.gameProfile = ServerLoginPacketListenerImpl.this.server.getSessionService().hasJoinedServer(new GameProfile(null, gameprofile.getName()), s, this.getAddress());
                     if (ServerLoginPacketListenerImpl.this.gameProfile != null) {
                         // CraftBukkit start - fire PlayerPreLoginEvent
                         if (!ServerLoginPacketListenerImpl.this.connection.isConnected()) {
diff --git a/src/main/java/net/minecraft/server/players/GameProfileCache.java b/src/main/java/net/minecraft/server/players/GameProfileCache.java
index 997393c4e89394d7fdf5c7bb8853be51f76bf726..7ed0f068dd56eadd786e806947b26062bb280113 100644
--- a/src/main/java/net/minecraft/server/players/GameProfileCache.java
+++ b/src/main/java/net/minecraft/server/players/GameProfileCache.java
@@ -107,10 +107,10 @@ public class GameProfileCache {
         if (!org.apache.commons.lang3.StringUtils.isBlank(name) // Paper - Don't lookup a profile with a blank name
                 && io.papermc.paper.configuration.GlobalConfiguration.get().proxies.isProxyOnlineMode()) // Paper - only run in online mode - 100 COL
         repository.findProfilesByNames(new String[]{name}, Agent.MINECRAFT, profilelookupcallback);
-        GameProfile gameprofile = (GameProfile) atomicreference.get();
+        GameProfile gameprofile = atomicreference.get();
 
         if (!GameProfileCache.usesAuthentication() && gameprofile == null) {
-            UUID uuid = UUIDUtil.getOrCreatePlayerUUID(new GameProfile((UUID) null, name));
+            UUID uuid = UUIDUtil.getOrCreatePlayerUUID(new GameProfile(null, name));
 
             return Optional.of(new GameProfile(uuid, name));
         } else {
@@ -158,7 +158,7 @@ public class GameProfileCache {
     public Optional<GameProfile> get(String name) {
         String s1 = name.toLowerCase(Locale.ROOT);
         boolean stateLocked = true; try { this.stateLock.lock(); // Paper - allow better concurrency
-        GameProfileCache.GameProfileInfo usercache_usercacheentry = (GameProfileCache.GameProfileInfo) this.profilesByName.get(s1);
+        GameProfileCache.GameProfileInfo usercache_usercacheentry = this.profilesByName.get(s1);
         boolean flag = false;
 
         if (usercache_usercacheentry != null && (new Date()).getTime() >= usercache_usercacheentry.expirationDate.getTime()) {
@@ -197,7 +197,7 @@ public class GameProfileCache {
         if (this.executor == null) {
             throw new IllegalStateException("No executor");
         } else {
-            CompletableFuture<Optional<GameProfile>> completablefuture = (CompletableFuture) this.requests.get(username);
+            CompletableFuture<Optional<GameProfile>> completablefuture = this.requests.get(username);
 
             if (completablefuture != null) {
                 this.requests.put(username, completablefuture.whenCompleteAsync((optional, throwable) -> {
@@ -218,7 +218,7 @@ public class GameProfileCache {
 
     public Optional<GameProfile> get(UUID uuid) {
         try { this.stateLock.lock(); // Paper - allow better concurrency
-        GameProfileCache.GameProfileInfo usercache_usercacheentry = (GameProfileCache.GameProfileInfo) this.profilesByUUID.get(uuid);
+        GameProfileCache.GameProfileInfo usercache_usercacheentry = this.profilesByUUID.get(uuid);
 
         if (usercache_usercacheentry == null) {
             return Optional.empty();
@@ -252,7 +252,7 @@ public class GameProfileCache {
                 ArrayList arraylist1;
 
                 try {
-                    JsonArray jsonarray = (JsonArray) this.gson.fromJson(bufferedreader, JsonArray.class);
+                    JsonArray jsonarray = this.gson.fromJson(bufferedreader, JsonArray.class);
 
                     if (jsonarray != null) {
                         DateFormat dateformat = GameProfileCache.createDateFormat();
diff --git a/src/main/java/net/minecraft/server/players/OldUsersConverter.java b/src/main/java/net/minecraft/server/players/OldUsersConverter.java
index 8e594797aeaeac8d7161fc7e50b32614e949f84d..dfa0ea4ead6e1f28b2ecc8798563acb71d5380bb 100644
--- a/src/main/java/net/minecraft/server/players/OldUsersConverter.java
+++ b/src/main/java/net/minecraft/server/players/OldUsersConverter.java
@@ -60,7 +60,7 @@ public class OldUsersConverter {
     }
 
     private static void lookupPlayers(MinecraftServer server, Collection<String> bannedPlayers, ProfileLookupCallback callback) {
-        String[] astring = (String[]) bannedPlayers.stream().filter((s) -> {
+        String[] astring = bannedPlayers.stream().filter((s) -> {
             return !StringUtil.isNullOrEmpty(s);
         }).toArray((i) -> {
             return new String[i];
@@ -75,7 +75,7 @@ public class OldUsersConverter {
 
             for (int j = 0; j < i; ++j) {
                 String s = astring1[j];
-                UUID uuid = UUIDUtil.getOrCreatePlayerUUID(new GameProfile((UUID) null, s));
+                UUID uuid = UUIDUtil.getOrCreatePlayerUUID(new GameProfile(null, s));
                 GameProfile gameprofile = new GameProfile(uuid, s);
 
                 callback.onProfileLookupSucceeded(gameprofile);
@@ -103,15 +103,15 @@ public class OldUsersConverter {
                 ProfileLookupCallback profilelookupcallback = new ProfileLookupCallback() {
                     public void onProfileLookupSucceeded(GameProfile gameprofile) {
                         server.getProfileCache().add(gameprofile);
-                        String[] astring = (String[]) map.get(gameprofile.getName().toLowerCase(Locale.ROOT));
+                        String[] astring = map.get(gameprofile.getName().toLowerCase(Locale.ROOT));
 
                         if (astring == null) {
                             OldUsersConverter.LOGGER.warn("Could not convert user banlist entry for {}", gameprofile.getName());
                             throw new OldUsersConverter.ConversionError("Profile not in the conversionlist");
                         } else {
-                            Date date = astring.length > 1 ? OldUsersConverter.parseDate(astring[1], (Date) null) : null;
+                            Date date = astring.length > 1 ? OldUsersConverter.parseDate(astring[1], null) : null;
                             String s = astring.length > 2 ? astring[2] : null;
-                            Date date1 = astring.length > 3 ? OldUsersConverter.parseDate(astring[3], (Date) null) : null;
+                            Date date1 = astring.length > 3 ? OldUsersConverter.parseDate(astring[3], null) : null;
                             String s1 = astring.length > 4 ? astring[4] : null;
 
                             gameprofilebanlist.add(new UserBanListEntry(gameprofile, date, s, date1, s1));
@@ -162,10 +162,10 @@ public class OldUsersConverter {
 
                 while (iterator.hasNext()) {
                     String s = (String) iterator.next();
-                    String[] astring = (String[]) map.get(s);
-                    Date date = astring.length > 1 ? OldUsersConverter.parseDate(astring[1], (Date) null) : null;
+                    String[] astring = map.get(s);
+                    Date date = astring.length > 1 ? OldUsersConverter.parseDate(astring[1], null) : null;
                     String s1 = astring.length > 2 ? astring[2] : null;
-                    Date date1 = astring.length > 3 ? OldUsersConverter.parseDate(astring[3], (Date) null) : null;
+                    Date date1 = astring.length > 3 ? OldUsersConverter.parseDate(astring[3], null) : null;
                     String s2 = astring.length > 4 ? astring[4] : null;
 
                     ipbanlist.add(new IpBanListEntry(s, date, s1, date1, s2));
@@ -277,7 +277,7 @@ public class OldUsersConverter {
             Optional<UUID> optional = server.getProfileCache().get(name).map(GameProfile::getId);
 
             if (optional.isPresent()) {
-                return (UUID) optional.get();
+                return optional.get();
             } else if (!server.isSingleplayer() && server.usesAuthentication()) {
                 final List<GameProfile> list = Lists.newArrayList();
                 ProfileLookupCallback profilelookupcallback = new ProfileLookupCallback() {
@@ -292,9 +292,9 @@ public class OldUsersConverter {
                 };
 
                 OldUsersConverter.lookupPlayers(server, Lists.newArrayList(name), profilelookupcallback);
-                return !list.isEmpty() && ((GameProfile) list.get(0)).getId() != null ? ((GameProfile) list.get(0)).getId() : null;
+                return !list.isEmpty() && list.get(0).getId() != null ? list.get(0).getId() : null;
             } else {
-                return UUIDUtil.getOrCreatePlayerUUID(new GameProfile((UUID) null, name));
+                return UUIDUtil.getOrCreatePlayerUUID(new GameProfile(null, name));
             }
         } else {
             try {
@@ -330,7 +330,7 @@ public class OldUsersConverter {
             }
 
             try {
-                final String[] astring = (String[]) list.toArray(new String[0]);
+                final String[] astring = list.toArray(new String[0]);
                 ProfileLookupCallback profilelookupcallback = new ProfileLookupCallback() {
                     public void onProfileLookupSucceeded(GameProfile gameprofile) {
                         minecraftServer.getProfileCache().add(gameprofile);
diff --git a/src/main/java/net/minecraft/server/players/PlayerList.java b/src/main/java/net/minecraft/server/players/PlayerList.java
index 9d1290c504309dfbe0655080f41c5f145d847d07..1aed1e82b6456cb378228581c7d761bf5895f8f1 100644
--- a/src/main/java/net/minecraft/server/players/PlayerList.java
+++ b/src/main/java/net/minecraft/server/players/PlayerList.java
@@ -190,7 +190,7 @@ public abstract class PlayerList {
         GameProfile gameprofile = player.getGameProfile();
         GameProfileCache usercache = this.server.getProfileCache();
         Optional<GameProfile> optional = usercache.get(gameprofile.getId());
-        String s = (String) optional.map(GameProfile::getName).orElse(gameprofile.getName());
+        String s = optional.map(GameProfile::getName).orElse(gameprofile.getName());
 
         usercache.add(gameprofile);
         CompoundTag nbttagcompound = this.load(player);
@@ -218,7 +218,7 @@ public abstract class PlayerList {
             Logger logger = PlayerList.LOGGER;
 
             Objects.requireNonNull(logger);
-            resourcekey = (ResourceKey) dataresult.resultOrPartial(logger::error).orElse(Level.OVERWORLD);
+            resourcekey = dataresult.resultOrPartial(logger::error).orElse(Level.OVERWORLD);
         } else {
             resourcekey = Level.OVERWORLD;
         }
@@ -334,7 +334,7 @@ public abstract class PlayerList {
         ClientboundPlayerInfoUpdatePacket packet = ClientboundPlayerInfoUpdatePacket.createPlayerInitializing(List.of(player));
 
         for (int i = 0; i < this.players.size(); ++i) {
-            ServerPlayer entityplayer1 = (ServerPlayer) this.players.get(i);
+            ServerPlayer entityplayer1 = this.players.get(i);
 
             if (entityplayer1.getBukkitEntity().canSee(bukkitPlayer)) {
                 entityplayer1.connection.send(packet);
@@ -538,13 +538,13 @@ public abstract class PlayerList {
         if (!player.getBukkitEntity().isPersistent()) return; // CraftBukkit
         player.lastSave = MinecraftServer.currentTick; // Paper
         this.playerIo.save(player);
-        ServerStatsCounter serverstatisticmanager = (ServerStatsCounter) player.getStats(); // CraftBukkit
+        ServerStatsCounter serverstatisticmanager = player.getStats(); // CraftBukkit
 
         if (serverstatisticmanager != null) {
             serverstatisticmanager.save();
         }
 
-        PlayerAdvancements advancementdataplayer = (PlayerAdvancements) player.getAdvancements(); // CraftBukkit
+        PlayerAdvancements advancementdataplayer = player.getAdvancements(); // CraftBukkit
 
         if (advancementdataplayer != null) {
             advancementdataplayer.save();
@@ -621,7 +621,7 @@ public abstract class PlayerList {
         this.playersByName.remove(entityplayer.getScoreboardName().toLowerCase(java.util.Locale.ROOT)); // Spigot
         this.server.getCustomBossEvents().onPlayerDisconnect(entityplayer);
         UUID uuid = entityplayer.getUUID();
-        ServerPlayer entityplayer1 = (ServerPlayer) this.playersByUUID.get(uuid);
+        ServerPlayer entityplayer1 = this.playersByUUID.get(uuid);
 
         if (entityplayer1 == entityplayer) {
             this.playersByUUID.remove(uuid);
@@ -635,7 +635,7 @@ public abstract class PlayerList {
         // this.broadcastAll(new ClientboundPlayerInfoRemovePacket(List.of(entityplayer.getUUID())));
         ClientboundPlayerInfoRemovePacket packet = new ClientboundPlayerInfoRemovePacket(List.of(entityplayer.getUUID()));
         for (int i = 0; i < this.players.size(); i++) {
-            ServerPlayer entityplayer2 = (ServerPlayer) this.players.get(i);
+            ServerPlayer entityplayer2 = this.players.get(i);
 
             if (entityplayer2.getBukkitEntity().canSee(entityplayer.getBukkitEntity())) {
                 entityplayer2.connection.send(packet);
@@ -661,7 +661,7 @@ public abstract class PlayerList {
         ServerPlayer entityplayer;
 
         for (int i = 0; i < this.players.size(); ++i) {
-            entityplayer = (ServerPlayer) this.players.get(i);
+            entityplayer = this.players.get(i);
             if (entityplayer.getUUID().equals(uuid) || (io.papermc.paper.configuration.GlobalConfiguration.get().proxies.isProxyOnlineMode() && entityplayer.getGameProfile().getName().equalsIgnoreCase(gameprofile.getName()))) { // Paper - validate usernames
                 list.add(entityplayer);
             }
@@ -691,7 +691,7 @@ public abstract class PlayerList {
 
             ichatmutablecomponent = Component.translatable("multiplayer.disconnect.banned.reason", gameprofilebanentry.getReason());
             if (gameprofilebanentry.getExpires() != null) {
-                ichatmutablecomponent.append((Component) Component.translatable("multiplayer.disconnect.banned.expiration", PlayerList.BAN_DATE_FORMAT.format(gameprofilebanentry.getExpires())));
+                ichatmutablecomponent.append(Component.translatable("multiplayer.disconnect.banned.expiration", PlayerList.BAN_DATE_FORMAT.format(gameprofilebanentry.getExpires())));
             }
 
             // return chatmessage;
@@ -704,7 +704,7 @@ public abstract class PlayerList {
 
             ichatmutablecomponent = Component.translatable("multiplayer.disconnect.banned_ip.reason", ipbanentry.getReason());
             if (ipbanentry.getExpires() != null) {
-                ichatmutablecomponent.append((Component) Component.translatable("multiplayer.disconnect.banned_ip.expiration", PlayerList.BAN_DATE_FORMAT.format(ipbanentry.getExpires())));
+                ichatmutablecomponent.append(Component.translatable("multiplayer.disconnect.banned_ip.expiration", PlayerList.BAN_DATE_FORMAT.format(ipbanentry.getExpires())));
             }
 
             // return chatmessage;
@@ -856,7 +856,7 @@ public abstract class PlayerList {
             if (location == null) {
                 worldserver1 = this.server.getLevel(Level.OVERWORLD);
                 blockposition = entityplayer1.getSpawnPoint(worldserver1);
-                location = new Location(worldserver1.getWorld(), (double) ((float) blockposition.getX() + 0.5F), (double) ((float) blockposition.getY() + 0.1F), (double) ((float) blockposition.getZ() + 0.5F), worldserver1.levelData.getSpawnAngle(), 0.0F); // Paper - use world spawn angle
+                location = new Location(worldserver1.getWorld(), (float) blockposition.getX() + 0.5F, (float) blockposition.getY() + 0.1F, (float) blockposition.getZ() + 0.5F, worldserver1.levelData.getSpawnAngle(), 0.0F); // Paper - use world spawn angle
             }
 
             Player respawnPlayer = entityplayer1.getBukkitEntity();
@@ -917,7 +917,7 @@ public abstract class PlayerList {
         if (flag2 && !isLocAltered) {
             BlockState data = worldserver1.getBlockState(blockposition);
             worldserver1.setBlock(blockposition, data.setValue(net.minecraft.world.level.block.RespawnAnchorBlock.CHARGE, Integer.valueOf(data.getValue(net.minecraft.world.level.block.RespawnAnchorBlock.CHARGE) - 1)), 3);
-            entityplayer1.connection.send(new ClientboundSoundPacket(SoundEvents.RESPAWN_ANCHOR_DEPLETE, SoundSource.BLOCKS, (double) location.getX(), (double) location.getY(), (double) location.getZ(), 1.0F, 1.0F, worldserver1.getRandom().nextLong()));
+            entityplayer1.connection.send(new ClientboundSoundPacket(SoundEvents.RESPAWN_ANCHOR_DEPLETE, SoundSource.BLOCKS, location.getX(), location.getY(), location.getZ(), 1.0F, 1.0F, worldserver1.getRandom().nextLong()));
         // Paper end
         }
         // Added from changeDimension
@@ -962,7 +962,7 @@ public abstract class PlayerList {
         if (++this.sendAllPlayerInfoIn > 600) {
             // CraftBukkit start
             for (int i = 0; i < this.players.size(); ++i) {
-                final ServerPlayer target = (ServerPlayer) this.players.get(i);
+                final ServerPlayer target = this.players.get(i);
 
                 target.connection.send(new ClientboundPlayerInfoUpdatePacket(EnumSet.of(ClientboundPlayerInfoUpdatePacket.Action.UPDATE_LATENCY), this.players.stream().filter(new Predicate<ServerPlayer>() {
                     @Override
@@ -995,7 +995,7 @@ public abstract class PlayerList {
             if (entityhuman != null && !entityplayer.getBukkitEntity().canSee(entityhuman.getBukkitEntity())) {
                 continue;
             }
-            ((ServerPlayer) this.players.get(i)).connection.send(packet);
+            this.players.get(i).connection.send(packet);
         }
     }
 
@@ -1046,7 +1046,7 @@ public abstract class PlayerList {
             this.broadcastSystemMessage(message, false);
         } else {
             for (int i = 0; i < this.players.size(); ++i) {
-                ServerPlayer entityplayer = (ServerPlayer) this.players.get(i);
+                ServerPlayer entityplayer = this.players.get(i);
 
                 if (entityplayer.getTeam() != scoreboardteambase) {
                     entityplayer.sendSystemMessage(message);
@@ -1060,7 +1060,7 @@ public abstract class PlayerList {
         String[] astring = new String[this.players.size()];
 
         for (int i = 0; i < this.players.size(); ++i) {
-            astring[i] = ((ServerPlayer) this.players.get(i)).getGameProfile().getName();
+            astring[i] = this.players.get(i).getGameProfile().getName();
         }
 
         return astring;
@@ -1151,7 +1151,7 @@ public abstract class PlayerList {
 
     public void broadcast(@Nullable net.minecraft.world.entity.player.Player player, double x, double y, double z, double distance, ResourceKey<Level> worldKey, Packet<?> packet) {
         for (int i = 0; i < this.players.size(); ++i) {
-            ServerPlayer entityplayer = (ServerPlayer) this.players.get(i);
+            ServerPlayer entityplayer = this.players.get(i);
 
             // CraftBukkit start - Test if player receiving packet can see the source of the packet
             if (player != null && !entityplayer.getBukkitEntity().canSee(player.getBukkitEntity())) {
@@ -1339,7 +1339,7 @@ public abstract class PlayerList {
 
         while (iterator.hasNext()) {
             ServerPlayer entityplayer = (ServerPlayer) iterator.next();
-            Component ichatbasecomponent1 = (Component) playerMessageFactory.apply(entityplayer);
+            Component ichatbasecomponent1 = playerMessageFactory.apply(entityplayer);
 
             if (ichatbasecomponent1 != null) {
                 entityplayer.sendSystemMessage(ichatbasecomponent1, overlay);
@@ -1402,7 +1402,7 @@ public abstract class PlayerList {
 
     public ServerStatsCounter getPlayerStats(UUID uuid, String displayName) {
         ServerPlayer entityhuman = this.getPlayer(uuid);
-        ServerStatsCounter serverstatisticmanager = entityhuman == null ? null : (ServerStatsCounter) entityhuman.getStats();
+        ServerStatsCounter serverstatisticmanager = entityhuman == null ? null : entityhuman.getStats();
         // CraftBukkit end
 
         if (serverstatisticmanager == null) {
@@ -1427,7 +1427,7 @@ public abstract class PlayerList {
 
     public PlayerAdvancements getPlayerAdvancements(ServerPlayer player) {
         UUID uuid = player.getUUID();
-        PlayerAdvancements advancementdataplayer = (PlayerAdvancements) player.getAdvancements(); // CraftBukkit
+        PlayerAdvancements advancementdataplayer = player.getAdvancements(); // CraftBukkit
 
         if (advancementdataplayer == null) {
             File file = this.server.getWorldPath(LevelResource.PLAYER_ADVANCEMENTS_DIR).toFile();
@@ -1477,7 +1477,7 @@ public abstract class PlayerList {
 
     @Nullable
     public ServerPlayer getPlayer(UUID uuid) {
-        return (ServerPlayer) this.playersByUUID.get(uuid);
+        return this.playersByUUID.get(uuid);
     }
 
     public boolean canBypassPlayerLimit(GameProfile profile) {
diff --git a/src/main/java/net/minecraft/server/players/StoredUserList.java b/src/main/java/net/minecraft/server/players/StoredUserList.java
index 1fce91e492fb4077c0ccb7adfe522502c0e7e048..949d93bc1f6e55c39974e8470b168eb734df4ee1 100644
--- a/src/main/java/net/minecraft/server/players/StoredUserList.java
+++ b/src/main/java/net/minecraft/server/players/StoredUserList.java
@@ -72,7 +72,7 @@ public abstract class StoredUserList<K, V extends StoredUserEntry<K>> {
         // Paper start
         // this.g();
         // return (V) this.d.get(this.a(k0)); // CraftBukkit - fix decompile error
-        return (V) this.map.computeIfPresent(this.getKeyForUser(key), (k, v) -> {
+        return this.map.computeIfPresent(this.getKeyForUser(key), (k, v) -> {
             return v.hasExpired() ? null : v;
         });
         // Paper end
@@ -94,7 +94,7 @@ public abstract class StoredUserList<K, V extends StoredUserEntry<K>> {
     }
 
     public String[] getUserList() {
-        return (String[]) this.map.keySet().toArray(new String[0]);
+        return this.map.keySet().toArray(new String[0]);
     }
 
     // CraftBukkit start
@@ -153,7 +153,7 @@ public abstract class StoredUserList<K, V extends StoredUserEntry<K>> {
             JsonObject jsonobject = new JsonObject();
 
             Objects.requireNonNull(jsonlistentry);
-            return (JsonObject) Util.make(jsonobject, jsonlistentry::serialize);
+            return Util.make(jsonobject, jsonlistentry::serialize);
         });
 
         Objects.requireNonNull(jsonarray);
@@ -185,7 +185,7 @@ public abstract class StoredUserList<K, V extends StoredUserEntry<K>> {
             BufferedReader bufferedreader = Files.newReader(this.file, StandardCharsets.UTF_8);
 
             try {
-                JsonArray jsonarray = (JsonArray) StoredUserList.GSON.fromJson(bufferedreader, JsonArray.class);
+                JsonArray jsonarray = StoredUserList.GSON.fromJson(bufferedreader, JsonArray.class);
                 com.google.common.base.Preconditions.checkState(jsonarray != null, "The file \"" + this.file.getName() + "\" is either empty or corrupt"); // Paper
 
                 this.map.clear();
diff --git a/src/main/java/net/minecraft/server/players/UserBanListEntry.java b/src/main/java/net/minecraft/server/players/UserBanListEntry.java
index 03d24fcd16cd14ed2090ab90d293b7c3a832d06f..d9523967c9532637a02795bb5956d400c74c9e85 100644
--- a/src/main/java/net/minecraft/server/players/UserBanListEntry.java
+++ b/src/main/java/net/minecraft/server/players/UserBanListEntry.java
@@ -12,7 +12,7 @@ import net.minecraft.network.chat.Component;
 public class UserBanListEntry extends BanListEntry<GameProfile> {
 
     public UserBanListEntry(GameProfile profile) {
-        this(profile, (Date) null, (String) null, (Date) null, (String) null);
+        this(profile, null, null, null, null);
     }
 
     public UserBanListEntry(GameProfile profile, @Nullable Date created, @Nullable String source, @Nullable Date expiry, @Nullable String reason) {
@@ -26,15 +26,15 @@ public class UserBanListEntry extends BanListEntry<GameProfile> {
     @Override
     protected void serialize(JsonObject json) {
         if (this.getUser() != null) {
-            json.addProperty("uuid", ((GameProfile) this.getUser()).getId() == null ? "" : ((GameProfile) this.getUser()).getId().toString());
-            json.addProperty("name", ((GameProfile) this.getUser()).getName());
+            json.addProperty("uuid", this.getUser().getId() == null ? "" : this.getUser().getId().toString());
+            json.addProperty("name", this.getUser().getName());
             super.serialize(json);
         }
     }
 
     @Override
     public Component getDisplayName() {
-        GameProfile gameprofile = (GameProfile) this.getUser();
+        GameProfile gameprofile = this.getUser();
 
         return Component.literal(gameprofile.getName() != null ? gameprofile.getName() : Objects.toString(gameprofile.getId(), "(Unknown)"));
     }
diff --git a/src/main/java/net/minecraft/server/rcon/RconConsoleSource.java b/src/main/java/net/minecraft/server/rcon/RconConsoleSource.java
index 986beb0f2400b9f1d2fc3637574ddd01b1f07b8e..217c4b6e472f88bcab15615f82aca54ed68bf52b 100644
--- a/src/main/java/net/minecraft/server/rcon/RconConsoleSource.java
+++ b/src/main/java/net/minecraft/server/rcon/RconConsoleSource.java
@@ -31,7 +31,7 @@ public class RconConsoleSource implements CommandSource {
     public CommandSourceStack createCommandSourceStack() {
         ServerLevel worldserver = this.server.overworld();
 
-        return new CommandSourceStack(this, Vec3.atLowerCornerOf(worldserver.getSharedSpawnPos()), Vec2.ZERO, worldserver, 4, "Rcon", RconConsoleSource.RCON_COMPONENT, this.server, (Entity) null);
+        return new CommandSourceStack(this, Vec3.atLowerCornerOf(worldserver.getSharedSpawnPos()), Vec2.ZERO, worldserver, 4, "Rcon", RconConsoleSource.RCON_COMPONENT, this.server, null);
     }
 
     // CraftBukkit start - Send a String
diff --git a/src/main/java/net/minecraft/server/rcon/thread/QueryThreadGs4.java b/src/main/java/net/minecraft/server/rcon/thread/QueryThreadGs4.java
index ac244269d4b9e34281ba87430aac6775c5411b64..0f1fa9fcab4f8633d785d4875564fe5d1e22c935 100644
--- a/src/main/java/net/minecraft/server/rcon/thread/QueryThreadGs4.java
+++ b/src/main/java/net/minecraft/server/rcon/thread/QueryThreadGs4.java
@@ -63,7 +63,7 @@ public class QueryThreadGs4 extends GenericThread {
                 InetAddress inetAddress = InetAddress.getLocalHost();
                 this.hostIp = inetAddress.getHostAddress();
             } catch (UnknownHostException var4) {
-                LOGGER.warn("Unable to determine local host IP, please set server-ip in server.properties", (Throwable)var4);
+                LOGGER.warn("Unable to determine local host IP, please set server-ip in server.properties", var4);
             }
         }
 
@@ -78,7 +78,7 @@ public class QueryThreadGs4 extends GenericThread {
             QueryThreadGs4 queryThreadGs4 = new QueryThreadGs4(server, i);
             return !queryThreadGs4.start() ? null : queryThreadGs4;
         } else {
-            LOGGER.warn("Invalid query port {} found in server.properties (queries disabled)", Integer.valueOf((int) i));
+            LOGGER.warn("Invalid query port {} found in server.properties (queries disabled)", Integer.valueOf(i));
             return null;
         }
     }
@@ -97,11 +97,11 @@ public class QueryThreadGs4 extends GenericThread {
             switch (bs[2]) {
                 case 0:
                     if (!this.validChallenge(packet).booleanValue()) {
-                        LOGGER.debug("Invalid challenge [{}]", (Object)socketAddress);
+                        LOGGER.debug("Invalid challenge [{}]", socketAddress);
                         return false;
                     } else if (15 == i) {
                         this.sendTo(this.buildRuleResponse(packet), packet);
-                        LOGGER.debug("Rules [{}]", (Object)socketAddress);
+                        LOGGER.debug("Rules [{}]", socketAddress);
                     } else {
                         NetworkDataOutputStream networkDataOutputStream = new NetworkDataOutputStream(1460);
                         networkDataOutputStream.write(0);
@@ -133,17 +133,17 @@ public class QueryThreadGs4 extends GenericThread {
                         networkDataOutputStream.writeString(queryResponse.getHostname());
                         // Paper end
                         this.sendTo(networkDataOutputStream.toByteArray(), packet);
-                        LOGGER.debug("Status [{}]", (Object)socketAddress);
+                        LOGGER.debug("Status [{}]", socketAddress);
                     }
                 default:
                     return true;
                 case 9:
                     this.sendChallenge(packet);
-                    LOGGER.debug("Challenge [{}]", (Object)socketAddress);
+                    LOGGER.debug("Challenge [{}]", socketAddress);
                     return true;
             }
         } else {
-            LOGGER.debug("Invalid packet [{}]", (Object)socketAddress);
+            LOGGER.debug("Invalid packet [{}]", socketAddress);
             return false;
         }
     }
@@ -314,7 +314,7 @@ public class QueryThreadGs4 extends GenericThread {
 
     private void recoverSocketError(Exception e) {
         if (this.running) {
-            LOGGER.warn("Unexpected exception", (Throwable)e);
+            LOGGER.warn("Unexpected exception", e);
             if (!this.initSocket()) {
                 LOGGER.error("Failed to recover from exception, shutting down!");
                 this.running = false;
diff --git a/src/main/java/net/minecraft/server/rcon/thread/RconThread.java b/src/main/java/net/minecraft/server/rcon/thread/RconThread.java
index fa12d6659fa302869236afbb95239ab7d1ea6de9..f3ecf4500b3b07286809f0c79f200f53fb05146c 100644
--- a/src/main/java/net/minecraft/server/rcon/thread/RconThread.java
+++ b/src/main/java/net/minecraft/server/rcon/thread/RconThread.java
@@ -47,7 +47,7 @@ public class RconThread extends GenericThread {
                     this.clearClients();
                 } catch (IOException var8) {
                     if (this.running) {
-                        LOGGER.info("IO exception: ", (Throwable)var8);
+                        LOGGER.info("IO exception: ", var8);
                     }
                 }
             }
@@ -88,7 +88,7 @@ public class RconThread extends GenericThread {
                 }
             }
         } else {
-            LOGGER.warn("Invalid rcon port {} found in server.properties, rcon disabled!", Integer.valueOf((int) i));
+            LOGGER.warn("Invalid rcon port {} found in server.properties, rcon disabled!", Integer.valueOf(i));
             return null;
         }
     }
@@ -109,12 +109,12 @@ public class RconThread extends GenericThread {
     }
 
     private void closeSocket(ServerSocket socket) {
-        LOGGER.debug("closeSocket: {}", (Object)socket);
+        LOGGER.debug("closeSocket: {}", socket);
 
         try {
             socket.close();
         } catch (IOException var3) {
-            LOGGER.warn("Failed to close socket", (Throwable)var3);
+            LOGGER.warn("Failed to close socket", var3);
         }
 
     }
diff --git a/src/main/java/net/minecraft/stats/ServerRecipeBook.java b/src/main/java/net/minecraft/stats/ServerRecipeBook.java
index d64b495b941ccc34941d193389c3797463c82e85..d566f873412b7254124a3e6df7f28b8eab669f72 100644
--- a/src/main/java/net/minecraft/stats/ServerRecipeBook.java
+++ b/src/main/java/net/minecraft/stats/ServerRecipeBook.java
@@ -124,7 +124,7 @@ public class ServerRecipeBook extends RecipeBook {
                 if (optional.isEmpty()) {
                     ServerRecipeBook.LOGGER.error("Tried to load unrecognized recipe: {} removed now.", minecraftkey);
                 } else {
-                    handler.accept((Recipe) optional.get());
+                    handler.accept(optional.get());
                 }
             } catch (ResourceLocationException resourcekeyinvalidexception) {
                 ServerRecipeBook.LOGGER.error("Tried to load improperly formatted recipe: {} removed now.", s);
diff --git a/src/main/java/net/minecraft/stats/ServerStatsCounter.java b/src/main/java/net/minecraft/stats/ServerStatsCounter.java
index adb896c49ee0439b85681c5cd03c8949ac227b8d..8c70251c0a29132ba56a2ade08e0b75b2d4a7acf 100644
--- a/src/main/java/net/minecraft/stats/ServerStatsCounter.java
+++ b/src/main/java/net/minecraft/stats/ServerStatsCounter.java
@@ -186,15 +186,15 @@ public class ServerStatsCounter extends StatsCounter {
 
         while (iterator.hasNext()) {
             Entry<String, JsonElement> entry = (Entry) iterator.next();
-            JsonElement jsonelement = (JsonElement) entry.getValue();
+            JsonElement jsonelement = entry.getValue();
 
             if (jsonelement.isJsonObject()) {
-                nbttagcompound.put((String) entry.getKey(), ServerStatsCounter.fromJson(jsonelement.getAsJsonObject()));
+                nbttagcompound.put(entry.getKey(), ServerStatsCounter.fromJson(jsonelement.getAsJsonObject()));
             } else if (jsonelement.isJsonPrimitive()) {
                 JsonPrimitive jsonprimitive = jsonelement.getAsJsonPrimitive();
 
                 if (jsonprimitive.isNumber()) {
-                    nbttagcompound.putInt((String) entry.getKey(), jsonprimitive.getAsInt());
+                    nbttagcompound.putInt(entry.getKey(), jsonprimitive.getAsInt());
                 }
             }
         }
@@ -208,11 +208,11 @@ public class ServerStatsCounter extends StatsCounter {
 
         while (objectiterator.hasNext()) {
             it.unimi.dsi.fastutil.objects.Object2IntMap.Entry<Stat<?>> it_unimi_dsi_fastutil_objects_object2intmap_entry = (it.unimi.dsi.fastutil.objects.Object2IntMap.Entry) objectiterator.next();
-            Stat<?> statistic = (Stat) it_unimi_dsi_fastutil_objects_object2intmap_entry.getKey();
+            Stat<?> statistic = it_unimi_dsi_fastutil_objects_object2intmap_entry.getKey();
 
-            ((JsonObject) map.computeIfAbsent(statistic.getType(), (statisticwrapper) -> {
+            map.computeIfAbsent(statistic.getType(), (statisticwrapper) -> {
                 return new JsonObject();
-            })).addProperty(ServerStatsCounter.getKey(statistic).toString(), Integer.valueOf(it_unimi_dsi_fastutil_objects_object2intmap_entry.getIntValue()));
+            }).addProperty(ServerStatsCounter.getKey(statistic).toString(), Integer.valueOf(it_unimi_dsi_fastutil_objects_object2intmap_entry.getIntValue()));
         }
 
         JsonObject jsonobject = new JsonObject();
@@ -221,7 +221,7 @@ public class ServerStatsCounter extends StatsCounter {
         while (iterator.hasNext()) {
             Entry<StatType<?>, JsonObject> entry = (Entry) iterator.next();
 
-            jsonobject.add(BuiltInRegistries.STAT_TYPE.getKey((StatType) entry.getKey()).toString(), (JsonElement) entry.getValue());
+            jsonobject.add(BuiltInRegistries.STAT_TYPE.getKey(entry.getKey()).toString(), entry.getValue());
         }
 
         JsonObject jsonobject1 = new JsonObject();
diff --git a/src/main/java/net/minecraft/util/SimpleBitStorage.java b/src/main/java/net/minecraft/util/SimpleBitStorage.java
index 36e33923bf48e56c743ed043bcbc66bc32f0422f..292722b4c7f9b1057e076a5f0cd237d940936868 100644
--- a/src/main/java/net/minecraft/util/SimpleBitStorage.java
+++ b/src/main/java/net/minecraft/util/SimpleBitStorage.java
@@ -50,7 +50,7 @@ public class SimpleBitStorage implements BitStorage {
     }
 
     public SimpleBitStorage(int elementBits, int size, @Nullable long[] data) {
-        Validate.inclusiveBetween(1L, 32L, (long)elementBits);
+        Validate.inclusiveBetween(1L, 32L, elementBits);
         this.size = size;
         this.bits = elementBits;
         this.mask = (1L << elementBits) - 1L;
@@ -193,7 +193,7 @@ public class SimpleBitStorage implements BitStorage {
 
     @Override
     public BitStorage copy() {
-        return new SimpleBitStorage(this.bits, this.size, (long[])this.data.clone());
+        return new SimpleBitStorage(this.bits, this.size, this.data.clone());
     }
 
     public static class InitializationException extends RuntimeException {
diff --git a/src/main/java/net/minecraft/util/SortedArraySet.java b/src/main/java/net/minecraft/util/SortedArraySet.java
index e4a5716e2c3e5867dd52dfc848659efa3a76fbc7..c35367596339efb07c2f0e6a3da68f6cd6fd4c19 100644
--- a/src/main/java/net/minecraft/util/SortedArraySet.java
+++ b/src/main/java/net/minecraft/util/SortedArraySet.java
@@ -21,7 +21,7 @@ public class SortedArraySet<T> extends AbstractSet<T> {
         if (initialCapacity < 0) {
             throw new IllegalArgumentException("Initial capacity (" + initialCapacity + ") is negative");
         } else {
-            this.contents = (T[])castRawArray(new Object[initialCapacity]);
+            this.contents = castRawArray(new Object[initialCapacity]);
         }
     }
     // Paper start - optimise removeIf
@@ -103,14 +103,14 @@ public class SortedArraySet<T> extends AbstractSet<T> {
     private void grow(int minCapacity) {
         if (minCapacity > this.contents.length) {
             if (this.contents != ObjectArrays.DEFAULT_EMPTY_ARRAY) {
-                minCapacity = (int)Math.max(Math.min((long)this.contents.length + (long)(this.contents.length >> 1), 2147483639L), (long)minCapacity);
+                minCapacity = (int)Math.max(Math.min((long)this.contents.length + (long)(this.contents.length >> 1), 2147483639L), minCapacity);
             } else if (minCapacity < 10) {
                 minCapacity = 10;
             }
 
             Object[] objects = new Object[minCapacity];
             System.arraycopy(this.contents, 0, objects, 0, this.size);
-            this.contents = (T[])castRawArray(objects);
+            this.contents = castRawArray(objects);
         }
     }
 
@@ -186,7 +186,7 @@ public class SortedArraySet<T> extends AbstractSet<T> {
     @Nullable
     public T get(T object) {
         int i = this.findIndex(object);
-        return (T)(i >= 0 ? this.getInternal(i) : null);
+        return i >= 0 ? this.getInternal(i) : null;
     }
 
     public T first() {
@@ -234,7 +234,7 @@ public class SortedArraySet<T> extends AbstractSet<T> {
 
     @Override
     public void clear() {
-        Arrays.fill(this.contents, 0, this.size, (Object)null);
+        Arrays.fill(this.contents, 0, this.size, null);
         this.size = 0;
     }
 
diff --git a/src/main/java/net/minecraft/util/SpawnUtil.java b/src/main/java/net/minecraft/util/SpawnUtil.java
index 83ef8cb27db685cceb5c2b7c9674e17b93ba081c..1b58b04abcef2636bffd9c525c967ecc98f4af74 100644
--- a/src/main/java/net/minecraft/util/SpawnUtil.java
+++ b/src/main/java/net/minecraft/util/SpawnUtil.java
@@ -30,7 +30,7 @@ public class SpawnUtil {
             int j1 = Mth.randomBetweenInclusive(worldserver.random, -j, j);
 
             blockposition_mutableblockposition.setWithOffset(blockposition, i1, k, j1);
-            if (worldserver.getWorldBorder().isWithinBounds((BlockPos) blockposition_mutableblockposition) && SpawnUtil.moveToPossibleSpawnPosition(worldserver, k, blockposition_mutableblockposition, spawnutil_a)) {
+            if (worldserver.getWorldBorder().isWithinBounds(blockposition_mutableblockposition) && SpawnUtil.moveToPossibleSpawnPosition(worldserver, k, blockposition_mutableblockposition, spawnutil_a)) {
                 // Paper start
                 String key = EntityType.getKey(entitytypes).getPath();
                 org.bukkit.entity.EntityType type = org.bukkit.entity.EntityType.fromName(key);
diff --git a/src/main/java/net/minecraft/util/datafix/DataFixers.java b/src/main/java/net/minecraft/util/datafix/DataFixers.java
index 0f27c585217ad6a0e0534657f298254ff75a626c..6f0b1d579b8866468f68b211c2a51b31be7c39d1 100644
--- a/src/main/java/net/minecraft/util/datafix/DataFixers.java
+++ b/src/main/java/net/minecraft/util/datafix/DataFixers.java
@@ -739,7 +739,7 @@ public class DataFixers {
         ImmutableMap<String, String> immutablemap3 = ImmutableMap.<String, String>builder().put("textures/entity/cat/tabby.png", "minecraft:tabby").put("textures/entity/cat/black.png", "minecraft:black").put("textures/entity/cat/red.png", "minecraft:red").put("textures/entity/cat/siamese.png", "minecraft:siamese").put("textures/entity/cat/british_shorthair.png", "minecraft:british").put("textures/entity/cat/calico.png", "minecraft:calico").put("textures/entity/cat/persian.png", "minecraft:persian").put("textures/entity/cat/ragdoll.png", "minecraft:ragdoll").put("textures/entity/cat/white.png", "minecraft:white").put("textures/entity/cat/jellie.png", "minecraft:jellie").put("textures/entity/cat/all_black.png", "minecraft:all_black").build();
 
         builder.addFixer(new CriteriaRenameFix(schema162, "Migrate cat variant advancement", "minecraft:husbandry/complete_catalogue", (s) -> {
-            return (String) immutablemap3.getOrDefault(s, s);
+            return immutablemap3.getOrDefault(s, s);
         }));
         Schema schema163 = builder.addSchema(3087, DataFixers.SAME_NAMESPACED);
 
@@ -771,7 +771,7 @@ public class DataFixers {
 
         builder.addFixer(new VariantRenameFix(schema168, "Rename british shorthair", References.ENTITY, "minecraft:cat", map));
         builder.addFixer(new CriteriaRenameFix(schema168, "Migrate cat variant advancement for british shorthair", "minecraft:husbandry/complete_catalogue", (s) -> {
-            return (String) map.getOrDefault(s, s);
+            return map.getOrDefault(s, s);
         }));
         Set set = Set.of("minecraft:unemployed", "minecraft:nitwit");
 
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/ItemStackMapIdFix.java b/src/main/java/net/minecraft/util/datafix/fixes/ItemStackMapIdFix.java
index 5a7a25984ddc618d509501ae3f5a36a8b2c4cf92..19fa42bd8feede550ee0526d7d6e53ce0e206bbc 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/ItemStackMapIdFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/ItemStackMapIdFix.java
@@ -28,9 +28,9 @@ public class ItemStackMapIdFix extends DataFix {
             Optional<Pair<String, String>> optional = typed.getOptional(opticfinder);
 
             if (optional.isPresent() && Objects.equals(((Pair) optional.get()).getSecond(), "minecraft:filled_map")) {
-                Dynamic<?> dynamic = (Dynamic) typed.get(DSL.remainderFinder());
+                Dynamic<?> dynamic = typed.get(DSL.remainderFinder());
                 Typed<?> typed1 = typed.getOrCreateTyped(opticfinder1);
-                Dynamic<?> dynamic1 = (Dynamic) typed1.get(DSL.remainderFinder());
+                Dynamic<?> dynamic1 = typed1.get(DSL.remainderFinder());
 
                 if (dynamic1.getElement("map").result().isEmpty()) dynamic1 = dynamic1.set("map", dynamic1.createInt(dynamic.get("Damage").asInt(0))); // CraftBukkit
                 return typed.set(opticfinder1, typed1.set(DSL.remainderFinder(), dynamic1));
diff --git a/src/main/java/net/minecraft/util/datafix/fixes/ItemStackTheFlatteningFix.java b/src/main/java/net/minecraft/util/datafix/fixes/ItemStackTheFlatteningFix.java
index 0c1655f35dcf0639fa1f383fd3a9bace11617133..454ad7016df07df7ffa04ffc18540c3c858365fe 100644
--- a/src/main/java/net/minecraft/util/datafix/fixes/ItemStackTheFlatteningFix.java
+++ b/src/main/java/net/minecraft/util/datafix/fixes/ItemStackTheFlatteningFix.java
@@ -21,7 +21,7 @@ import net.minecraft.util.datafix.schemas.NamespacedSchema;
 
 public class ItemStackTheFlatteningFix extends DataFix {
 
-    private static final Map<String, String> MAP = (Map) DataFixUtils.make(Maps.newHashMap(), (hashmap) -> {
+    private static final Map<String, String> MAP = DataFixUtils.make(Maps.newHashMap(), (hashmap) -> {
         hashmap.put("minecraft:stone.0", "minecraft:stone");
         hashmap.put("minecraft:stone.1", "minecraft:granite");
         hashmap.put("minecraft:stone.2", "minecraft:polished_granite");
@@ -343,7 +343,7 @@ public class ItemStackTheFlatteningFix extends DataFix {
         hashmap.put("minecraft:record_wait.0", "minecraft:music_disc_wait");
         hashmap.put("minecraft:record_ward.0", "minecraft:music_disc_ward");
     });
-    private static final Set<String> IDS = (Set) ItemStackTheFlatteningFix.MAP.keySet().stream().map((s) -> {
+    private static final Set<String> IDS = ItemStackTheFlatteningFix.MAP.keySet().stream().map((s) -> {
         return s.substring(0, s.indexOf(46));
     }).collect(Collectors.toSet());
     private static final Set<String> DAMAGE_IDS = Sets.newHashSet("minecraft:bow", "minecraft:carrot_on_a_stick", "minecraft:chainmail_boots", "minecraft:chainmail_chestplate", "minecraft:chainmail_helmet", "minecraft:chainmail_leggings", "minecraft:diamond_axe", "minecraft:diamond_boots", "minecraft:diamond_chestplate", "minecraft:diamond_helmet", "minecraft:diamond_hoe", "minecraft:diamond_leggings", "minecraft:diamond_pickaxe", "minecraft:diamond_shovel", "minecraft:diamond_sword", "minecraft:elytra", "minecraft:fishing_rod", "minecraft:flint_and_steel", "minecraft:golden_axe", "minecraft:golden_boots", "minecraft:golden_chestplate", "minecraft:golden_helmet", "minecraft:golden_hoe", "minecraft:golden_leggings", "minecraft:golden_pickaxe", "minecraft:golden_shovel", "minecraft:golden_sword", "minecraft:iron_axe", "minecraft:iron_boots", "minecraft:iron_chestplate", "minecraft:iron_helmet", "minecraft:iron_hoe", "minecraft:iron_leggings", "minecraft:iron_pickaxe", "minecraft:iron_shovel", "minecraft:iron_sword", "minecraft:leather_boots", "minecraft:leather_chestplate", "minecraft:leather_helmet", "minecraft:leather_leggings", "minecraft:shears", "minecraft:shield", "minecraft:stone_axe", "minecraft:stone_hoe", "minecraft:stone_pickaxe", "minecraft:stone_shovel", "minecraft:stone_sword", "minecraft:wooden_axe", "minecraft:wooden_hoe", "minecraft:wooden_pickaxe", "minecraft:wooden_shovel", "minecraft:wooden_sword");
@@ -364,7 +364,7 @@ public class ItemStackTheFlatteningFix extends DataFix {
                 return typed;
             } else {
                 Typed<?> typed1 = typed;
-                Dynamic<?> dynamic = (Dynamic) typed.get(DSL.remainderFinder());
+                Dynamic<?> dynamic = typed.get(DSL.remainderFinder());
                 int i = dynamic.get("Damage").asInt(0);
                 String s = ItemStackTheFlatteningFix.updateItem((String) ((Pair) optional.get()).getSecond(), i);
 
@@ -374,7 +374,7 @@ public class ItemStackTheFlatteningFix extends DataFix {
 
                 if (ItemStackTheFlatteningFix.DAMAGE_IDS.contains(((Pair) optional.get()).getSecond())) {
                     Typed<?> typed2 = typed.getOrCreateTyped(opticfinder1);
-                    Dynamic<?> dynamic1 = (Dynamic) typed2.get(DSL.remainderFinder());
+                    Dynamic<?> dynamic1 = typed2.get(DSL.remainderFinder());
 
                     if (i != 0) dynamic1 = dynamic1.set("Damage", dynamic1.createInt(i)); // CraftBukkit
                     typed1 = typed1.set(opticfinder1, typed2.set(DSL.remainderFinder(), dynamic1));
@@ -389,9 +389,9 @@ public class ItemStackTheFlatteningFix extends DataFix {
     @Nullable
     public static String updateItem(@Nullable String originalName, int damage) {
         if (ItemStackTheFlatteningFix.IDS.contains(originalName)) {
-            String s1 = (String) ItemStackTheFlatteningFix.MAP.get(originalName + "." + damage);
+            String s1 = ItemStackTheFlatteningFix.MAP.get(originalName + "." + damage);
 
-            return s1 == null ? (String) ItemStackTheFlatteningFix.MAP.get(originalName + ".0") : s1;
+            return s1 == null ? ItemStackTheFlatteningFix.MAP.get(originalName + ".0") : s1;
         } else {
             return null;
         }
diff --git a/src/main/java/net/minecraft/util/thread/BlockableEventLoop.java b/src/main/java/net/minecraft/util/thread/BlockableEventLoop.java
index 83701fbfaa56a232593ee8f11a3afb8941238bfa..d4caf7b4cde228593b86f18cf87b35bbdd2c3969 100644
--- a/src/main/java/net/minecraft/util/thread/BlockableEventLoop.java
+++ b/src/main/java/net/minecraft/util/thread/BlockableEventLoop.java
@@ -66,7 +66,7 @@ public abstract class BlockableEventLoop<R extends Runnable> implements Profiler
             return this.submitAsync(task);
         } else {
             task.run();
-            return CompletableFuture.completedFuture((Void)null);
+            return CompletableFuture.completedFuture(null);
         }
     }
 
diff --git a/src/main/java/net/minecraft/util/worldupdate/WorldUpgrader.java b/src/main/java/net/minecraft/util/worldupdate/WorldUpgrader.java
index e9b37317a74dd922e320e572d9294997af46f881..4203078bd209f775bab2edc2257ae21962df03ae 100644
--- a/src/main/java/net/minecraft/util/worldupdate/WorldUpgrader.java
+++ b/src/main/java/net/minecraft/util/worldupdate/WorldUpgrader.java
@@ -114,7 +114,7 @@ public class WorldUpgrader {
 
             while (iterator1.hasNext()) {
                 ResourceKey<LevelStem> resourcekey1 = (ResourceKey) iterator1.next(); // CraftBukkit
-                Path path = this.levelStorage.getDimensionPath((ResourceKey) null); // CraftBukkit
+                Path path = this.levelStorage.getDimensionPath(null); // CraftBukkit
 
                 builder1.put(resourcekey1, new ChunkStorage(path.resolve("region"), this.dataFixer, true));
             }
@@ -132,19 +132,19 @@ public class WorldUpgrader {
 
                 for (Iterator iterator2 = this.levels.iterator(); iterator2.hasNext(); f1 += f2) {
                     ResourceKey<LevelStem> resourcekey2 = (ResourceKey) iterator2.next(); // CraftBukkit
-                    ListIterator<ChunkPos> listiterator = (ListIterator) immutablemap.get(resourcekey2);
-                    ChunkStorage ichunkloader = (ChunkStorage) immutablemap1.get(resourcekey2);
+                    ListIterator<ChunkPos> listiterator = immutablemap.get(resourcekey2);
+                    ChunkStorage ichunkloader = immutablemap1.get(resourcekey2);
 
                     if (listiterator.hasNext()) {
-                        ChunkPos chunkcoordintpair = (ChunkPos) listiterator.next();
+                        ChunkPos chunkcoordintpair = listiterator.next();
                         boolean flag1 = false;
 
                         try {
-                            CompoundTag nbttagcompound = (CompoundTag) ((Optional) ichunkloader.read(chunkcoordintpair).join()).orElse((Object) null);
+                            CompoundTag nbttagcompound = (CompoundTag) ((Optional) ichunkloader.read(chunkcoordintpair).join()).orElse(null);
 
                             if (nbttagcompound != null) {
                                 int j = ChunkStorage.getVersion(nbttagcompound);
-                                ChunkGenerator chunkgenerator = ((LevelStem) this.dimensions.getOrThrow(resourcekey2)).generator(); // CraftBukkit
+                                ChunkGenerator chunkgenerator = this.dimensions.getOrThrow(resourcekey2).generator(); // CraftBukkit
                                 CompoundTag nbttagcompound1 = ichunkloader.upgradeChunkTag(resourcekey2, () -> {
                                     return this.overworldDataStorage;
                                 }, nbttagcompound, chunkgenerator.getTypeNameForDataFixer(), chunkcoordintpair, null); // CraftBukkit
@@ -232,7 +232,7 @@ public class WorldUpgrader {
     }
 
     private List<ChunkPos> getAllChunkPos(ResourceKey<LevelStem> world) { // CraftBukkit
-        File file = this.levelStorage.getDimensionPath((ResourceKey) null).toFile(); // CraftBukkit
+        File file = this.levelStorage.getDimensionPath(null).toFile(); // CraftBukkit
         File file1 = new File(file, "region");
         File[] afile = file1.listFiles((file2, s) -> {
             return s.endsWith(".mca");
diff --git a/src/main/java/net/minecraft/world/SimpleContainer.java b/src/main/java/net/minecraft/world/SimpleContainer.java
index acbda7c3a70db47402eaa54e136d90d7279b713d..325878be9a9164992f88f6de4a6f29e0b139b762 100644
--- a/src/main/java/net/minecraft/world/SimpleContainer.java
+++ b/src/main/java/net/minecraft/world/SimpleContainer.java
@@ -106,11 +106,11 @@ public class SimpleContainer implements Container, StackedContentsCompatible {
 
     @Override
     public ItemStack getItem(int slot) {
-        return slot >= 0 && slot < this.items.size() ? (ItemStack) this.items.get(slot) : ItemStack.EMPTY;
+        return slot >= 0 && slot < this.items.size() ? this.items.get(slot) : ItemStack.EMPTY;
     }
 
     public List<ItemStack> removeAllItems() {
-        List<ItemStack> list = (List) this.items.stream().filter((itemstack) -> {
+        List<ItemStack> list = this.items.stream().filter((itemstack) -> {
             return !itemstack.isEmpty();
         }).collect(Collectors.toList());
 
@@ -183,7 +183,7 @@ public class SimpleContainer implements Container, StackedContentsCompatible {
 
     @Override
     public ItemStack removeItemNoUpdate(int slot) {
-        ItemStack itemstack = (ItemStack) this.items.get(slot);
+        ItemStack itemstack = this.items.get(slot);
 
         if (itemstack.isEmpty()) {
             return ItemStack.EMPTY;
@@ -263,9 +263,9 @@ public class SimpleContainer implements Container, StackedContentsCompatible {
     }
 
     public String toString() {
-        return ((List) this.items.stream().filter((itemstack) -> {
+        return this.items.stream().filter((itemstack) -> {
             return !itemstack.isEmpty();
-        }).collect(Collectors.toList())).toString();
+        }).collect(Collectors.toList()).toString();
     }
 
     private void moveItemToEmptySlots(ItemStack stack) {
diff --git a/src/main/java/net/minecraft/world/effect/MobEffect.java b/src/main/java/net/minecraft/world/effect/MobEffect.java
index e708b2c987fac150c22b3367cec2e3e2bcb9914c..514b90a040dafad5f272c3c9597feb3a46dd5cdd 100644
--- a/src/main/java/net/minecraft/world/effect/MobEffect.java
+++ b/src/main/java/net/minecraft/world/effect/MobEffect.java
@@ -55,7 +55,7 @@ public class MobEffect {
     }
 
     public Optional<MobEffectInstance.FactorData> createFactorData() {
-        return Optional.ofNullable((MobEffectInstance.FactorData) this.factorDataFactory.get());
+        return Optional.ofNullable(this.factorDataFactory.get());
     }
 
     public void applyEffectTick(LivingEntity entity, int amplifier) {
@@ -183,10 +183,10 @@ public class MobEffect {
 
         while (iterator.hasNext()) {
             Entry<Attribute, AttributeModifier> entry = (Entry) iterator.next();
-            AttributeInstance attributemodifiable = attributes.getInstance((Attribute) entry.getKey());
+            AttributeInstance attributemodifiable = attributes.getInstance(entry.getKey());
 
             if (attributemodifiable != null) {
-                attributemodifiable.removeModifier((AttributeModifier) entry.getValue());
+                attributemodifiable.removeModifier(entry.getValue());
             }
         }
 
@@ -197,10 +197,10 @@ public class MobEffect {
 
         while (iterator.hasNext()) {
             Entry<Attribute, AttributeModifier> entry = (Entry) iterator.next();
-            AttributeInstance attributemodifiable = attributes.getInstance((Attribute) entry.getKey());
+            AttributeInstance attributemodifiable = attributes.getInstance(entry.getKey());
 
             if (attributemodifiable != null) {
-                AttributeModifier attributemodifier = (AttributeModifier) entry.getValue();
+                AttributeModifier attributemodifier = entry.getValue();
 
                 attributemodifiable.removeModifier(attributemodifier);
                 attributemodifiable.addPermanentModifier(new AttributeModifier(attributemodifier.getId(), this.getDescriptionId() + " " + amplifier, this.getAttributeModifierValue(amplifier, attributemodifier), attributemodifier.getOperation()));
diff --git a/src/main/java/net/minecraft/world/effect/MobEffectInstance.java b/src/main/java/net/minecraft/world/effect/MobEffectInstance.java
index 55d4462f890018c544a1eb6642abfa15d1421494..82c6841c475e688ffbd68d4f86b389e5b6363639 100644
--- a/src/main/java/net/minecraft/world/effect/MobEffectInstance.java
+++ b/src/main/java/net/minecraft/world/effect/MobEffectInstance.java
@@ -43,7 +43,7 @@ public class MobEffectInstance implements Comparable<MobEffectInstance> {
     }
 
     public MobEffectInstance(MobEffect type, int duration, int amplifier, boolean ambient, boolean showParticles, boolean showIcon) {
-        this(type, duration, amplifier, ambient, showParticles, showIcon, (MobEffectInstance)null, type.createFactorData());
+        this(type, duration, amplifier, ambient, showParticles, showIcon, null, type.createFactorData());
     }
 
     public MobEffectInstance(MobEffect type, int duration, int amplifier, boolean ambient, boolean showParticles, boolean showIcon, @Nullable MobEffectInstance hiddenEffect, Optional<MobEffectInstance.FactorData> factorCalculationData) {
diff --git a/src/main/java/net/minecraft/world/effect/MobEffectUtil.java b/src/main/java/net/minecraft/world/effect/MobEffectUtil.java
index e4d36d6477bb8f07af05b27d6e56342f35b0f41a..9ef5ebd51f65a0f6b8e7354ed1a54b61e69350cd 100644
--- a/src/main/java/net/minecraft/world/effect/MobEffectUtil.java
+++ b/src/main/java/net/minecraft/world/effect/MobEffectUtil.java
@@ -59,7 +59,7 @@ public final class MobEffectUtil {
         MobEffect mobeffectlist = mobeffect.getEffect();
         List<ServerPlayer> list = worldserver.getPlayers((entityplayer) -> {
             // Paper start
-            boolean condition = entityplayer.gameMode.isSurvival() && (entity == null || !entity.isAlliedTo((Entity) entityplayer)) && vec3d.closerThan(entityplayer.position(), d0) && (!entityplayer.hasEffect(mobeffectlist) || entityplayer.getEffect(mobeffectlist).getAmplifier() < mobeffect.getAmplifier() || entityplayer.getEffect(mobeffectlist).getDuration() < i);
+            boolean condition = entityplayer.gameMode.isSurvival() && (entity == null || !entity.isAlliedTo(entityplayer)) && vec3d.closerThan(entityplayer.position(), d0) && (!entityplayer.hasEffect(mobeffectlist) || entityplayer.getEffect(mobeffectlist).getAmplifier() < mobeffect.getAmplifier() || entityplayer.getEffect(mobeffectlist).getDuration() < i);
             if (condition) {
                 return playerPredicate == null || playerPredicate.test(entityplayer); // Only test the player AFTER it is true
             } else {
diff --git a/src/main/java/net/minecraft/world/entity/AgeableMob.java b/src/main/java/net/minecraft/world/entity/AgeableMob.java
index c215465489a5dcf8df24f0adc621d14ac8de8d19..c3408c0dc1fe72b07ab40678e803aa5e62ed4298 100644
--- a/src/main/java/net/minecraft/world/entity/AgeableMob.java
+++ b/src/main/java/net/minecraft/world/entity/AgeableMob.java
@@ -63,7 +63,7 @@ public abstract class AgeableMob extends PathfinderMob {
         }
 
         entityageable_a.increaseGroupSizeByOne();
-        return super.finalizeSpawn(world, difficulty, spawnReason, (SpawnGroupData) entityData, entityNbt);
+        return super.finalizeSpawn(world, difficulty, spawnReason, entityData, entityNbt);
     }
 
     @Nullable
@@ -80,7 +80,7 @@ public abstract class AgeableMob extends PathfinderMob {
     }
 
     public int getAge() {
-        return this.level.isClientSide ? (((Boolean) this.entityData.get(AgeableMob.DATA_BABY_ID)).booleanValue() ? -1 : 1) : this.age;
+        return this.level.isClientSide ? (this.entityData.get(AgeableMob.DATA_BABY_ID).booleanValue() ? -1 : 1) : this.age;
     }
 
     public void ageUp(int age, boolean overGrow) {
diff --git a/src/main/java/net/minecraft/world/entity/AreaEffectCloud.java b/src/main/java/net/minecraft/world/entity/AreaEffectCloud.java
index 7f38d919fa11e60341125c5f251d17643d524f56..4acff32b46eb0f9cb30fca527398e41192c6add4 100644
--- a/src/main/java/net/minecraft/world/entity/AreaEffectCloud.java
+++ b/src/main/java/net/minecraft/world/entity/AreaEffectCloud.java
@@ -105,7 +105,7 @@ public class AreaEffectCloud extends Entity {
     }
 
     public float getRadius() {
-        return ((Float) this.getEntityData().get(AreaEffectCloud.DATA_RADIUS)).floatValue();
+        return this.getEntityData().get(AreaEffectCloud.DATA_RADIUS).floatValue();
     }
 
     public void setPotion(Potion potion) {
@@ -120,7 +120,7 @@ public class AreaEffectCloud extends Entity {
         if (this.potion == Potions.EMPTY && this.effects.isEmpty()) {
             this.getEntityData().set(AreaEffectCloud.DATA_COLOR, Integer.valueOf(0));
         } else {
-            this.getEntityData().set(AreaEffectCloud.DATA_COLOR, Integer.valueOf(PotionUtils.getColor((Collection) PotionUtils.getAllEffects(this.potion, this.effects))));
+            this.getEntityData().set(AreaEffectCloud.DATA_COLOR, Integer.valueOf(PotionUtils.getColor(PotionUtils.getAllEffects(this.potion, this.effects))));
         }
 
     }
@@ -136,7 +136,7 @@ public class AreaEffectCloud extends Entity {
     // CraftBukkit start accessor methods
     public void refreshEffects() {
         if (!this.fixedColor) {
-            this.getEntityData().set(AreaEffectCloud.DATA_COLOR, Integer.valueOf(PotionUtils.getColor((Collection) PotionUtils.getAllEffects(this.potion, this.effects))));
+            this.getEntityData().set(AreaEffectCloud.DATA_COLOR, Integer.valueOf(PotionUtils.getColor(PotionUtils.getAllEffects(this.potion, this.effects))));
         }
     }
 
@@ -150,7 +150,7 @@ public class AreaEffectCloud extends Entity {
     // CraftBukkit end
 
     public int getColor() {
-        return ((Integer) this.getEntityData().get(AreaEffectCloud.DATA_COLOR)).intValue();
+        return this.getEntityData().get(AreaEffectCloud.DATA_COLOR).intValue();
     }
 
     public void setFixedColor(int rgb) {
@@ -159,7 +159,7 @@ public class AreaEffectCloud extends Entity {
     }
 
     public ParticleOptions getParticle() {
-        return (ParticleOptions) this.getEntityData().get(AreaEffectCloud.DATA_PARTICLE);
+        return this.getEntityData().get(AreaEffectCloud.DATA_PARTICLE);
     }
 
     public void setParticle(ParticleOptions particle) {
@@ -171,7 +171,7 @@ public class AreaEffectCloud extends Entity {
     }
 
     public boolean isWaiting() {
-        return ((Boolean) this.getEntityData().get(AreaEffectCloud.DATA_WAITING)).booleanValue();
+        return this.getEntityData().get(AreaEffectCloud.DATA_WAITING).booleanValue();
     }
 
     public int getDuration() {
@@ -230,9 +230,9 @@ public class AreaEffectCloud extends Entity {
                 if (particleparam.getType() == ParticleTypes.ENTITY_EFFECT) {
                     int k = flag && this.random.nextBoolean() ? 16777215 : this.getColor();
 
-                    d3 = (double) ((float) (k >> 16 & 255) / 255.0F);
-                    d4 = (double) ((float) (k >> 8 & 255) / 255.0F);
-                    d5 = (double) ((float) (k & 255) / 255.0F);
+                    d3 = (float) (k >> 16 & 255) / 255.0F;
+                    d4 = (float) (k >> 8 & 255) / 255.0F;
+                    d5 = (float) (k & 255) / 255.0F;
                 } else if (flag) {
                     d3 = 0.0D;
                     d4 = 0.0D;
@@ -273,7 +273,7 @@ public class AreaEffectCloud extends Entity {
 
             if (this.tickCount % 5 == 0) {
                 this.victims.entrySet().removeIf((entry) -> {
-                    return this.tickCount >= ((Integer) entry.getValue()).intValue();
+                    return this.tickCount >= entry.getValue().intValue();
                 });
                 List<MobEffectInstance> list = Lists.newArrayList();
                 Iterator iterator = this.potion.getEffects().iterator();
diff --git a/src/main/java/net/minecraft/world/entity/Entity.java b/src/main/java/net/minecraft/world/entity/Entity.java
index a5191f7d58f79648851a9725c2f9623a9ed00dc0..06ce79a32d60b754f4e2ba44733f40d089ec4220 100644
--- a/src/main/java/net/minecraft/world/entity/Entity.java
+++ b/src/main/java/net/minecraft/world/entity/Entity.java
@@ -591,7 +591,7 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource {
 
     public boolean isColliding(BlockPos pos, BlockState state) {
         VoxelShape voxelshape = state.getCollisionShape(this.level, pos, CollisionContext.of(this));
-        VoxelShape voxelshape1 = voxelshape.move((double) pos.getX(), (double) pos.getY(), (double) pos.getZ());
+        VoxelShape voxelshape1 = voxelshape.move(pos.getX(), pos.getY(), pos.getZ());
 
         return Shapes.joinIsNotEmpty(voxelshape1, Shapes.create(this.getBoundingBox()), BooleanOp.AND);
     }
@@ -690,7 +690,7 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource {
     }
 
     public net.minecraft.world.entity.Pose getPose() {
-        return (net.minecraft.world.entity.Pose) this.entityData.get(Entity.DATA_POSE);
+        return this.entityData.get(Entity.DATA_POSE);
     }
 
     public boolean hasPose(net.minecraft.world.entity.Pose pose) {
@@ -830,7 +830,7 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource {
 
             if (this.getTicksFrozen() > 0 && !freezeLocked) { // Paper - Freeze Tick Lock API
                 this.setTicksFrozen(0);
-                this.level.levelEvent((Player) null, 1009, this.blockPosition, 1);
+                this.level.levelEvent(null, 1009, this.blockPosition, 1);
             }
         }
 
@@ -1162,7 +1162,7 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource {
                 this.tryCheckInsideBlocks();
                 float f2 = this.getBlockSpeedFactor();
 
-                this.setDeltaMovement(this.getDeltaMovement().multiply((double) f2, 1.0D, (double) f2));
+                this.setDeltaMovement(this.getDeltaMovement().multiply(f2, 1.0D, f2));
                 // Paper start - remove expensive streams from here
                 boolean noneMatch = true;
                 AABB fireSearchBox = this.getBoundingBox().deflate(1.0E-6D);
@@ -1367,7 +1367,7 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource {
 
         final List<AABB> potentialCollisions = io.papermc.paper.util.CachedLists.getTempCollisionList();
         try {
-            final double stepHeight = (double)this.maxUpStep;
+            final double stepHeight = this.maxUpStep;
             final AABB collisionBox;
 
             if (movement.x == 0.0 && movement.z == 0.0 && movement.y != 0.0) {
@@ -1567,7 +1567,7 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource {
 
     private void playAmethystStepSound(BlockState state) {
         if (state.is(BlockTags.CRYSTAL_SOUND_BLOCKS) && this.tickCount >= this.lastCrystalSoundPlayTick + 20) {
-            this.crystalSoundIntensity *= (float) Math.pow(0.997D, (double) (this.tickCount - this.lastCrystalSoundPlayTick));
+            this.crystalSoundIntensity *= (float) Math.pow(0.997D, this.tickCount - this.lastCrystalSoundPlayTick);
             this.crystalSoundIntensity = Math.min(1.0F, this.crystalSoundIntensity + 0.07F);
             float f = 0.5F + this.crystalSoundIntensity * this.random.nextFloat() * 1.2F;
             float f1 = 0.1F + this.crystalSoundIntensity * 1.2F;
@@ -1590,7 +1590,7 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource {
 
     public void playSound(SoundEvent sound, float volume, float pitch) {
         if (!this.isSilent()) {
-            this.level.playSound((Player) null, this.getX(), this.getY(), this.getZ(), sound, this.getSoundSource(), volume, pitch);
+            this.level.playSound(null, this.getX(), this.getY(), this.getZ(), sound, this.getSoundSource(), volume, pitch);
         }
 
     }
@@ -1603,7 +1603,7 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource {
     }
 
     public boolean isSilent() {
-        return ((Boolean) this.entityData.get(Entity.DATA_SILENT)).booleanValue();
+        return this.entityData.get(Entity.DATA_SILENT).booleanValue();
     }
 
     public void setSilent(boolean silent) {
@@ -1611,7 +1611,7 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource {
     }
 
     public boolean isNoGravity() {
-        return ((Boolean) this.entityData.get(Entity.DATA_NO_GRAVITY)).booleanValue();
+        return this.entityData.get(Entity.DATA_NO_GRAVITY).booleanValue();
     }
 
     public void setNoGravity(boolean noGravity) {
@@ -1665,7 +1665,7 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource {
     public boolean isInRain() {
         BlockPos blockposition = this.blockPosition();
 
-        return this.level.isRainingAt(blockposition) || this.level.isRainingAt(new BlockPos((double) blockposition.getX(), this.getBoundingBox().maxY, (double) blockposition.getZ()));
+        return this.level.isRainingAt(blockposition) || this.level.isRainingAt(new BlockPos(blockposition.getX(), this.getBoundingBox().maxY, blockposition.getZ()));
     }
 
     public boolean isInBubbleColumn() {
@@ -1748,7 +1748,7 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource {
 
         BlockPos blockposition = new BlockPos(this.getX(), d0, this.getZ());
         FluidState fluid = this.level.getFluidState(blockposition);
-        double d1 = (double) ((float) blockposition.getY() + fluid.getHeight(this.level, blockposition));
+        double d1 = (float) blockposition.getY() + fluid.getHeight(this.level, blockposition);
 
         if (d1 > d0) {
             Stream stream = fluid.getTags();
@@ -1781,13 +1781,13 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource {
         for (i = 0; (float) i < 1.0F + this.dimensions.width * 20.0F; ++i) {
             d0 = (this.random.nextDouble() * 2.0D - 1.0D) * (double) this.dimensions.width;
             d1 = (this.random.nextDouble() * 2.0D - 1.0D) * (double) this.dimensions.width;
-            this.level.addParticle(ParticleTypes.BUBBLE, this.getX() + d0, (double) (f2 + 1.0F), this.getZ() + d1, vec3d.x, vec3d.y - this.random.nextDouble() * 0.20000000298023224D, vec3d.z);
+            this.level.addParticle(ParticleTypes.BUBBLE, this.getX() + d0, f2 + 1.0F, this.getZ() + d1, vec3d.x, vec3d.y - this.random.nextDouble() * 0.20000000298023224D, vec3d.z);
         }
 
         for (i = 0; (float) i < 1.0F + this.dimensions.width * 20.0F; ++i) {
             d0 = (this.random.nextDouble() * 2.0D - 1.0D) * (double) this.dimensions.width;
             d1 = (this.random.nextDouble() * 2.0D - 1.0D) * (double) this.dimensions.width;
-            this.level.addParticle(ParticleTypes.SPLASH, this.getX() + d0, (double) (f2 + 1.0F), this.getZ() + d1, vec3d.x, vec3d.y, vec3d.z);
+            this.level.addParticle(ParticleTypes.SPLASH, this.getX() + d0, f2 + 1.0F, this.getZ() + d1, vec3d.x, vec3d.y, vec3d.z);
         }
 
         this.gameEvent(GameEvent.SPLASH);
@@ -1842,7 +1842,7 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource {
         if (d0 < 1.0E-7D) {
             return Vec3.ZERO;
         } else {
-            Vec3 vec3d1 = (d0 > 1.0D ? movementInput.normalize() : movementInput).scale((double) speed);
+            Vec3 vec3d1 = (d0 > 1.0D ? movementInput.normalize() : movementInput).scale(speed);
             float f2 = Mth.sin(yaw * 0.017453292F);
             float f3 = Mth.cos(yaw * 0.017453292F);
 
@@ -1885,7 +1885,7 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource {
     }
 
     public void moveTo(BlockPos pos, float yaw, float pitch) {
-        this.moveTo((double) pos.getX() + 0.5D, (double) pos.getY(), (double) pos.getZ() + 0.5D, yaw, pitch);
+        this.moveTo((double) pos.getX() + 0.5D, pos.getY(), (double) pos.getZ() + 0.5D, yaw, pitch);
     }
 
     public void moveTo(double x, double y, double z, float yaw, float pitch) {
@@ -2031,7 +2031,7 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource {
         float f6 = Mth.cos(f2);
         float f7 = Mth.sin(f2);
 
-        return new Vec3((double) (f5 * f6), (double) (-f7), (double) (f4 * f6));
+        return new Vec3(f5 * f6, -f7, f4 * f6);
     }
 
     public final Vec3 getUpVector(float tickDelta) {
@@ -2047,9 +2047,9 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource {
     }
 
     public final Vec3 getEyePosition(float tickDelta) {
-        double d0 = Mth.lerp((double) tickDelta, this.xo, this.getX());
-        double d1 = Mth.lerp((double) tickDelta, this.yo, this.getY()) + (double) this.getEyeHeight();
-        double d2 = Mth.lerp((double) tickDelta, this.zo, this.getZ());
+        double d0 = Mth.lerp(tickDelta, this.xo, this.getX());
+        double d1 = Mth.lerp(tickDelta, this.yo, this.getY()) + (double) this.getEyeHeight();
+        double d2 = Mth.lerp(tickDelta, this.zo, this.getZ());
 
         return new Vec3(d0, d1, d2);
     }
@@ -2059,9 +2059,9 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource {
     }
 
     public final Vec3 getPosition(float delta) {
-        double d0 = Mth.lerp((double) delta, this.xo, this.getX());
-        double d1 = Mth.lerp((double) delta, this.yo, this.getY());
-        double d2 = Mth.lerp((double) delta, this.zo, this.getZ());
+        double d0 = Mth.lerp(delta, this.xo, this.getX());
+        double d1 = Mth.lerp(delta, this.yo, this.getY());
+        double d2 = Mth.lerp(delta, this.zo, this.getZ());
 
         return new Vec3(d0, d1, d2);
     }
@@ -2183,8 +2183,8 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource {
             nbt.putUUID("UUID", this.getUUID());
             // CraftBukkit start
             // PAIL: Check above UUID reads 1.8 properly, ie: UUIDMost / UUIDLeast
-            nbt.putLong("WorldUUIDLeast", ((ServerLevel) this.level).getWorld().getUID().getLeastSignificantBits());
-            nbt.putLong("WorldUUIDMost", ((ServerLevel) this.level).getWorld().getUID().getMostSignificantBits());
+            nbt.putLong("WorldUUIDLeast", this.level.getWorld().getUID().getLeastSignificantBits());
+            nbt.putLong("WorldUUIDMost", this.level.getWorld().getUID().getMostSignificantBits());
             nbt.putInt("Bukkit.updateLevel", CURRENT_LEVEL);
             if (!this.persist) {
                 nbt.putBoolean("Bukkit.persist", this.persist);
@@ -2335,7 +2335,7 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource {
             }
 
             if (Double.isFinite(this.getX()) && Double.isFinite(this.getY()) && Double.isFinite(this.getZ())) {
-                if (Double.isFinite((double) this.getYRot()) && Double.isFinite((double) this.getXRot())) {
+                if (Double.isFinite(this.getYRot()) && Double.isFinite(this.getXRot())) {
                     this.reapplyPosition();
                     this.setRot(this.getYRot(), this.getXRot());
                     if (nbt.contains("CustomName", 8)) {
@@ -2574,7 +2574,7 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource {
             return false;
         } else {
             float f = this.dimensions.width * 0.8F;
-            AABB axisalignedbb = AABB.ofSize(this.getEyePosition(), (double) f, 1.0E-6D, (double) f);
+            AABB axisalignedbb = AABB.ofSize(this.getEyePosition(), f, 1.0E-6D, f);
 
             BlockPos.MutableBlockPos blockposition = new BlockPos.MutableBlockPos();
             int minX = Mth.floor(axisalignedbb.minX);
@@ -2593,7 +2593,7 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource {
 
                         BlockState iblockdata = chunk.getBlockStateFinal(fx, fy, fz);
                         blockposition.set(fx, fy, fz);
-                        if (!iblockdata.isAir() && iblockdata.isSuffocating(this.level, blockposition) && Shapes.joinIsNotEmpty(iblockdata.getCollisionShape(this.level, blockposition).move((double) blockposition.getX(), (double) blockposition.getY(), (double) blockposition.getZ()), Shapes.create(axisalignedbb), BooleanOp.AND)) {
+                        if (!iblockdata.isAir() && iblockdata.isSuffocating(this.level, blockposition) && Shapes.joinIsNotEmpty(iblockdata.getCollisionShape(this.level, blockposition).move(blockposition.getX(), blockposition.getY(), blockposition.getZ()), Shapes.create(axisalignedbb), BooleanOp.AND)) {
                             return true;
                         }
                     }
@@ -2693,7 +2693,7 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource {
 
     public void ejectPassengers() {
         for (int i = this.passengers.size() - 1; i >= 0; --i) {
-            ((Entity) this.passengers.get(i)).stopRiding();
+            this.passengers.get(i).stopRiding();
         }
 
     }
@@ -2820,7 +2820,7 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource {
             if (this.passengers.size() == 1 && this.passengers.get(0) == entity) {
                 this.passengers = ImmutableList.of();
             } else {
-                this.passengers = (ImmutableList) this.passengers.stream().filter((entity1) -> {
+                this.passengers = this.passengers.stream().filter((entity1) -> {
                     return entity1 != entity;
                 }).collect(ImmutableList.toImmutableList());
             }
@@ -3092,11 +3092,11 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource {
     }
 
     public boolean getSharedFlag(int index) {
-        return (((Byte) this.entityData.get(Entity.DATA_SHARED_FLAGS_ID)).intValue() & 1 << index) != 0;
+        return (this.entityData.get(Entity.DATA_SHARED_FLAGS_ID).intValue() & 1 << index) != 0;
     }
 
     public void setSharedFlag(int index, boolean value) {
-        byte b0 = ((Byte) this.entityData.get(Entity.DATA_SHARED_FLAGS_ID)).byteValue();
+        byte b0 = this.entityData.get(Entity.DATA_SHARED_FLAGS_ID).byteValue();
 
         if (value) {
             this.entityData.set(Entity.DATA_SHARED_FLAGS_ID, Byte.valueOf((byte) (b0 | 1 << index)));
@@ -3111,7 +3111,7 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource {
     }
 
     public int getAirSupply() {
-        return ((Integer) this.entityData.get(Entity.DATA_AIR_SUPPLY_ID)).intValue();
+        return this.entityData.get(Entity.DATA_AIR_SUPPLY_ID).intValue();
     }
 
     public void setAirSupply(int air) {
@@ -3130,7 +3130,7 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource {
     }
 
     public int getTicksFrozen() {
-        return ((Integer) this.entityData.get(Entity.DATA_TICKS_FROZEN)).intValue();
+        return this.entityData.get(Entity.DATA_TICKS_FROZEN).intValue();
     }
 
     public void setTicksFrozen(int frozenTicks) {
@@ -3265,11 +3265,11 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource {
         Vec3 vec3d1 = this.getDeltaMovement().scale(0.75D);
 
         if (enumdirection.getAxis() == Direction.Axis.X) {
-            this.setDeltaMovement((double) (f1 * f), vec3d1.y, vec3d1.z);
+            this.setDeltaMovement(f1 * f, vec3d1.y, vec3d1.z);
         } else if (enumdirection.getAxis() == Direction.Axis.Y) {
-            this.setDeltaMovement(vec3d1.x, (double) (f1 * f), vec3d1.z);
+            this.setDeltaMovement(vec3d1.x, f1 * f, vec3d1.z);
         } else if (enumdirection.getAxis() == Direction.Axis.Z) {
-            this.setDeltaMovement(vec3d1.x, vec3d1.y, (double) (f1 * f));
+            this.setDeltaMovement(vec3d1.x, vec3d1.y, f1 * f);
         }
 
     }
@@ -3280,7 +3280,7 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource {
     }
 
     private static Component removeAction(Component textComponent) {
-        MutableComponent ichatmutablecomponent = textComponent.plainCopy().setStyle(textComponent.getStyle().withClickEvent((ClickEvent) null));
+        MutableComponent ichatmutablecomponent = textComponent.plainCopy().setStyle(textComponent.getStyle().withClickEvent(null));
         Iterator iterator = textComponent.getSiblings().iterator();
 
         while (iterator.hasNext()) {
@@ -3490,14 +3490,14 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource {
                 worldborder = worldserverFinal.getWorldBorder();
                 blockposition = worldborder.clampToBounds(event.getTo().getX(), event.getTo().getY(), event.getTo().getZ());
 
-                return (PortalInfo) this.getExitPortal(destination, blockposition, flag2, worldborder, event.getSearchRadius(), event.getCanCreatePortal(), event.getCreationRadius()).map((blockutil_rectangle) -> {
+                return this.getExitPortal(destination, blockposition, flag2, worldborder, event.getSearchRadius(), event.getCanCreatePortal(), event.getCreationRadius()).map((blockutil_rectangle) -> {
                     // CraftBukkit end
                     BlockState iblockdata = this.level.getBlockState(this.portalEntrancePos);
                     Direction.Axis enumdirection_enumaxis;
                     Vec3 vec3d;
 
                     if (iblockdata.hasProperty(BlockStateProperties.HORIZONTAL_AXIS)) {
-                        enumdirection_enumaxis = (Direction.Axis) iblockdata.getValue(BlockStateProperties.HORIZONTAL_AXIS);
+                        enumdirection_enumaxis = iblockdata.getValue(BlockStateProperties.HORIZONTAL_AXIS);
                         BlockUtil.FoundRectangle blockutil_rectangle1 = BlockUtil.getLargestRectangleAround(this.portalEntrancePos, enumdirection_enumaxis, 21, Direction.Axis.Y, 21, (blockposition1) -> {
                             return this.level.getBlockState(blockposition1) == iblockdata;
                         });
@@ -3593,11 +3593,11 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource {
         section.setDetail("Entity Name", () -> {
             return this.getName().getString();
         });
-        section.setDetail("Entity's Exact location", (Object) String.format(Locale.ROOT, "%.2f, %.2f, %.2f", Double.valueOf(this.getX()), Double.valueOf(this.getY()), Double.valueOf(this.getZ())));
-        section.setDetail("Entity's Block location", (Object) CrashReportCategory.formatLocation(this.level, Mth.floor(this.getX()), Mth.floor(this.getY()), Mth.floor(this.getZ())));
+        section.setDetail("Entity's Exact location", String.format(Locale.ROOT, "%.2f, %.2f, %.2f", Double.valueOf(this.getX()), Double.valueOf(this.getY()), Double.valueOf(this.getZ())));
+        section.setDetail("Entity's Block location", CrashReportCategory.formatLocation(this.level, Mth.floor(this.getX()), Mth.floor(this.getY()), Mth.floor(this.getZ())));
         Vec3 vec3d = this.getDeltaMovement();
 
-        section.setDetail("Entity's Momentum", (Object) String.format(Locale.ROOT, "%.2f, %.2f, %.2f", Double.valueOf(vec3d.x), Double.valueOf(vec3d.y), Double.valueOf(vec3d.z)));
+        section.setDetail("Entity's Momentum", String.format(Locale.ROOT, "%.2f, %.2f, %.2f", Double.valueOf(vec3d.x), Double.valueOf(vec3d.y), Double.valueOf(vec3d.z)));
         section.setDetail("Entity's Passengers", () -> {
             return this.getPassengers().toString();
         });
@@ -3654,12 +3654,12 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource {
     @Nullable
     @Override
     public Component getCustomName() {
-        return (Component) ((Optional) this.entityData.get(Entity.DATA_CUSTOM_NAME)).orElse((Object) null);
+        return (Component) ((Optional) this.entityData.get(Entity.DATA_CUSTOM_NAME)).orElse(null);
     }
 
     @Override
     public boolean hasCustomName() {
-        return ((Optional) this.entityData.get(Entity.DATA_CUSTOM_NAME)).isPresent();
+        return this.entityData.get(Entity.DATA_CUSTOM_NAME).isPresent();
     }
 
     public void setCustomNameVisible(boolean visible) {
@@ -3667,7 +3667,7 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource {
     }
 
     public boolean isCustomNameVisible() {
-        return ((Boolean) this.entityData.get(Entity.DATA_CUSTOM_NAME_VISIBLE)).booleanValue();
+        return this.entityData.get(Entity.DATA_CUSTOM_NAME_VISIBLE).booleanValue();
     }
 
     public final void teleportToWithTicket(double destX, double destY, double destZ) {
@@ -3741,7 +3741,7 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource {
             double d1 = (double) Math.max(0.0F, entitysize1.height - entitysize.height) + 1.0E-6D;
             VoxelShape voxelshape = Shapes.create(AABB.ofSize(vec3d, d0, d1, d0));
 
-            this.level.findFreePosition(this, voxelshape, vec3d, (double) entitysize1.width, (double) entitysize1.height, (double) entitysize1.width).ifPresent((vec3d1) -> {
+            this.level.findFreePosition(this, voxelshape, vec3d, entitysize1.width, entitysize1.height, entitysize1.width).ifPresent((vec3d1) -> {
                 this.setPos(vec3d1.add(0.0D, (double) (-entitysize1.height) / 2.0D, 0.0D));
             });
         }
@@ -3749,7 +3749,7 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource {
     }
 
     public Direction getDirection() {
-        return Direction.fromYRot((double) this.getYRot());
+        return Direction.fromYRot(this.getYRot());
     }
 
     public Direction getMotionDirection() {
@@ -3822,7 +3822,7 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource {
     }
 
     protected Vec3 getLeashOffset() {
-        return new Vec3(0.0D, (double) this.getEyeHeight(), (double) (this.getBbWidth() * 0.4F));
+        return new Vec3(0.0D, this.getEyeHeight(), this.getBbWidth() * 0.4F);
     }
 
     public SlotAccess getSlot(int mappedIndex) {
@@ -3920,7 +3920,7 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource {
 
     @Nullable
     public Entity getFirstPassenger() {
-        return this.passengers.isEmpty() ? null : (Entity) this.passengers.get(0);
+        return this.passengers.isEmpty() ? null : this.passengers.get(0);
     }
 
     public boolean hasPassenger(Entity passenger) {
@@ -4116,7 +4116,7 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource {
                         FluidState fluid = this.level.getFluidState(blockposition_mutableblockposition);
 
                         if (fluid.is(tag)) {
-                            double d2 = (double) ((float) i2 + fluid.getHeight(this.level, blockposition_mutableblockposition));
+                            double d2 = (float) i2 + fluid.getHeight(this.level, blockposition_mutableblockposition);
 
                             if (d2 >= axisalignedbb.minY) {
                                 flag1 = true;
diff --git a/src/main/java/net/minecraft/world/entity/EntitySelector.java b/src/main/java/net/minecraft/world/entity/EntitySelector.java
index 0cff406722f3d9efbc2f32d4da9707eb233d1c05..8843ad0f66b8cd62b92776e5873e58bb8e9269a1 100644
--- a/src/main/java/net/minecraft/world/entity/EntitySelector.java
+++ b/src/main/java/net/minecraft/world/entity/EntitySelector.java
@@ -65,7 +65,7 @@ public final class EntitySelector {
         Team scoreboardteambase = entity.getTeam();
         Team.CollisionRule scoreboardteambase_enumteampush = scoreboardteambase == null ? Team.CollisionRule.ALWAYS : scoreboardteambase.getCollisionRule();
 
-        return (Predicate) (scoreboardteambase_enumteampush == Team.CollisionRule.NEVER ? Predicates.alwaysFalse() : EntitySelector.NO_SPECTATORS.and((entity1) -> {
+        return scoreboardteambase_enumteampush == Team.CollisionRule.NEVER ? Predicates.alwaysFalse() : EntitySelector.NO_SPECTATORS.and((entity1) -> {
             if (!entity1.isCollidable(ignoreClimbing) || !entity1.canCollideWithBukkit(entity) || !entity.canCollideWithBukkit(entity1)) { // CraftBukkit - collidable API // Paper - isCollidable
                 return false;
             } else if (entity.level.isClientSide && (!(entity1 instanceof Player) || !((Player) entity1).isLocalPlayer())) {
@@ -82,7 +82,7 @@ public final class EntitySelector {
                     return (scoreboardteambase_enumteampush == Team.CollisionRule.PUSH_OWN_TEAM || scoreboardteambase_enumteampush1 == Team.CollisionRule.PUSH_OWN_TEAM) && flag ? false : scoreboardteambase_enumteampush != Team.CollisionRule.PUSH_OTHER_TEAMS && scoreboardteambase_enumteampush1 != Team.CollisionRule.PUSH_OTHER_TEAMS || flag;
                 }
             }
-        }));
+        });
     }
 
     public static Predicate<Entity> notRiding(Entity entity) {
diff --git a/src/main/java/net/minecraft/world/entity/EntityType.java b/src/main/java/net/minecraft/world/entity/EntityType.java
index 8ba6ed9de1b7685f42b67d32300d8a9c5c7157c3..9685f7c29a4ad884f37b0985e9b4d2d23ac7fa1b 100644
--- a/src/main/java/net/minecraft/world/entity/EntityType.java
+++ b/src/main/java/net/minecraft/world/entity/EntityType.java
@@ -303,7 +303,7 @@ public class EntityType<T extends Entity> implements FeatureElement, EntityTypeT
     private final FeatureFlagSet requiredFeatures;
 
     private static <T extends Entity> EntityType<T> register(String id, EntityType.Builder type) { // CraftBukkit - decompile error
-        return (EntityType) Registry.register(BuiltInRegistries.ENTITY_TYPE, id, (EntityType<T>) type.build(id)); // CraftBukkit - decompile error
+        return Registry.register(BuiltInRegistries.ENTITY_TYPE, id, (EntityType<T>) type.build(id)); // CraftBukkit - decompile error
     }
 
     public static ResourceLocation getKey(EntityType<?> type) {
@@ -440,7 +440,7 @@ public class EntityType<T extends Entity> implements FeatureElement, EntityTypeT
             double d0;
 
             if (alignPosition) {
-                t0.setPos((double) pos.getX() + 0.5D, (double) (pos.getY() + 1), (double) pos.getZ() + 0.5D);
+                t0.setPos((double) pos.getX() + 0.5D, pos.getY() + 1, (double) pos.getZ() + 0.5D);
                 d0 = EntityType.getYOffset(world, pos, invertY, t0.getBoundingBox());
             } else {
                 d0 = 0.0D;
@@ -452,7 +452,7 @@ public class EntityType<T extends Entity> implements FeatureElement, EntityTypeT
 
                 entityinsentient.yHeadRot = entityinsentient.getYRot();
                 entityinsentient.yBodyRot = entityinsentient.getYRot();
-                entityinsentient.finalizeSpawn(world, world.getCurrentDifficultyAt(entityinsentient.blockPosition()), reason, (SpawnGroupData) null, itemNbt);
+                entityinsentient.finalizeSpawn(world, world.getCurrentDifficultyAt(entityinsentient.blockPosition()), reason, null, itemNbt);
                 entityinsentient.playAmbientSound();
             }
 
@@ -471,7 +471,7 @@ public class EntityType<T extends Entity> implements FeatureElement, EntityTypeT
             axisalignedbb1 = axisalignedbb1.expandTowards(0.0D, -1.0D, 0.0D);
         }
 
-        Iterable<VoxelShape> iterable = world.getCollisions((Entity) null, axisalignedbb1);
+        Iterable<VoxelShape> iterable = world.getCollisions(null, axisalignedbb1);
 
         return 1.0D + Shapes.collide(Direction.Axis.Y, boundingBox, iterable, invertY ? -2.0D : -1.0D);
     }
@@ -597,7 +597,7 @@ public class EntityType<T extends Entity> implements FeatureElement, EntityTypeT
 
     @Nullable
     public static Entity loadEntityRecursive(CompoundTag nbt, Level world, Function<Entity, Entity> entityProcessor) {
-        return (Entity) EntityType.loadStaticEntity(nbt, world).map(entityProcessor).map((entity) -> {
+        return EntityType.loadStaticEntity(nbt, world).map(entityProcessor).map((entity) -> {
             if (nbt.contains("Passengers", 9)) {
                 ListTag nbttaglist = nbt.getList("Passengers", 10);
 
@@ -643,7 +643,7 @@ public class EntityType<T extends Entity> implements FeatureElement, EntityTypeT
             }
 
             public long estimateSize() {
-                return (long) entityNbtList.size();
+                return entityNbtList.size();
             }
 
             public int characteristics() {
diff --git a/src/main/java/net/minecraft/world/entity/ExperienceOrb.java b/src/main/java/net/minecraft/world/entity/ExperienceOrb.java
index 03ea8a216ac5b5510344d33e9492c614ca252ec6..ca07bc578697ceed410d968986a5f9b197aa5ea5 100644
--- a/src/main/java/net/minecraft/world/entity/ExperienceOrb.java
+++ b/src/main/java/net/minecraft/world/entity/ExperienceOrb.java
@@ -127,7 +127,7 @@ public class ExperienceOrb extends Entity {
         }
 
         if (this.level.getFluidState(this.blockPosition()).is(FluidTags.LAVA)) {
-            this.setDeltaMovement((double) ((this.random.nextFloat() - this.random.nextFloat()) * 0.2F), 0.20000000298023224D, (double) ((this.random.nextFloat() - this.random.nextFloat()) * 0.2F));
+            this.setDeltaMovement((this.random.nextFloat() - this.random.nextFloat()) * 0.2F, 0.20000000298023224D, (this.random.nextFloat() - this.random.nextFloat()) * 0.2F);
         }
 
         if (!this.level.noCollision(this.getBoundingBox())) {
@@ -175,7 +175,7 @@ public class ExperienceOrb extends Entity {
             f = this.level.getBlockState(new BlockPos(this.getX(), this.getY() - 1.0D, this.getZ())).getBlock().getFriction() * 0.98F;
         }
 
-        this.setDeltaMovement(this.getDeltaMovement().multiply((double) f, 0.98D, (double) f));
+        this.setDeltaMovement(this.getDeltaMovement().multiply(f, 0.98D, f));
         if (this.onGround) {
             this.setDeltaMovement(this.getDeltaMovement().multiply(1.0D, -0.9D, 1.0D));
         }
@@ -188,7 +188,7 @@ public class ExperienceOrb extends Entity {
     }
 
     private void scanForEntities() {
-        if (this.followingPlayer == null || this.followingPlayer.distanceToSqr((Entity) this) > 64.0D) {
+        if (this.followingPlayer == null || this.followingPlayer.distanceToSqr(this) > 64.0D) {
             this.followingPlayer = this.level.getNearestPlayer(this, 8.0D);
         }
 
@@ -233,7 +233,7 @@ public class ExperienceOrb extends Entity {
         });
 
         if (!list.isEmpty()) {
-            ExperienceOrb entityexperienceorb = (ExperienceOrb) list.get(0);
+            ExperienceOrb entityexperienceorb = list.get(0);
 
             ++entityexperienceorb.count;
             entityexperienceorb.age = 0;
@@ -326,7 +326,7 @@ public class ExperienceOrb extends Entity {
         Entry<EquipmentSlot, ItemStack> entry = EnchantmentHelper.getRandomItemWith(Enchantments.MENDING, player, ItemStack::isDamaged);
 
         if (entry != null) {
-            ItemStack itemstack = (ItemStack) entry.getValue();
+            ItemStack itemstack = entry.getValue();
             int j = Math.min(this.xpToDurability(this.value), itemstack.getDamageValue());
             // CraftBukkit start
             org.bukkit.event.player.PlayerItemMendEvent event = CraftEventFactory.callPlayerItemMendEvent(player, this, itemstack, entry.getKey(), j);
diff --git a/src/main/java/net/minecraft/world/entity/ItemBasedSteering.java b/src/main/java/net/minecraft/world/entity/ItemBasedSteering.java
index e48190e532ded976518938b80119453fbd9f6be8..504daebfd69a2e505a6cce158e3887730ca9a6ad 100644
--- a/src/main/java/net/minecraft/world/entity/ItemBasedSteering.java
+++ b/src/main/java/net/minecraft/world/entity/ItemBasedSteering.java
@@ -25,7 +25,7 @@ public class ItemBasedSteering {
     public void onSynced() {
         this.boosting = true;
         this.boostTime = 0;
-        this.boostTimeTotal = ((Integer) this.entityData.get(this.boostTimeAccessor)).intValue();
+        this.boostTimeTotal = this.entityData.get(this.boostTimeAccessor).intValue();
     }
 
     public boolean boost(RandomSource random) {
@@ -62,6 +62,6 @@ public class ItemBasedSteering {
     }
 
     public boolean hasSaddle() {
-        return ((Boolean) this.entityData.get(this.hasSaddleAccessor)).booleanValue();
+        return this.entityData.get(this.hasSaddleAccessor).booleanValue();
     }
 }
diff --git a/src/main/java/net/minecraft/world/entity/LightningBolt.java b/src/main/java/net/minecraft/world/entity/LightningBolt.java
index 72357b2414fe7bd572b19e33ddd8985bb0198a54..02c2af8c6ef202b3ebe2528b48045e1bcec145a7 100644
--- a/src/main/java/net/minecraft/world/entity/LightningBolt.java
+++ b/src/main/java/net/minecraft/world/entity/LightningBolt.java
@@ -110,7 +110,7 @@ public class LightningBolt extends Entity {
         if (this.life < 0) {
             if (this.flashes == 0) {
                 if (this.level instanceof ServerLevel) {
-                    list = this.level.getEntities((Entity) this, new AABB(this.getX() - 15.0D, this.getY() - 15.0D, this.getZ() - 15.0D, this.getX() + 15.0D, this.getY() + 6.0D + 15.0D, this.getZ() + 15.0D), (entity) -> {
+                    list = this.level.getEntities(this, new AABB(this.getX() - 15.0D, this.getY() - 15.0D, this.getZ() - 15.0D, this.getX() + 15.0D, this.getY() + 6.0D + 15.0D, this.getZ() + 15.0D), (entity) -> {
                         return entity.isAlive() && !this.hitEntities.contains(entity);
                     });
                     iterator = ((ServerLevel) this.level).getPlayers((entityplayer) -> {
@@ -137,7 +137,7 @@ public class LightningBolt extends Entity {
             if (!(this.level instanceof ServerLevel)) {
                 this.level.setSkyFlashTime(2);
             } else if (!this.visualOnly) {
-                list = this.level.getEntities((Entity) this, new AABB(this.getX() - 3.0D, this.getY() - 3.0D, this.getZ() - 3.0D, this.getX() + 3.0D, this.getY() + 6.0D + 3.0D, this.getZ() + 3.0D), Entity::isAlive);
+                list = this.level.getEntities(this, new AABB(this.getX() - 3.0D, this.getY() - 3.0D, this.getZ() - 3.0D, this.getX() + 3.0D, this.getY() + 6.0D + 3.0D, this.getZ() + 3.0D), Entity::isAlive);
                 iterator = list.iterator();
 
                 while (iterator.hasNext()) {
@@ -148,7 +148,7 @@ public class LightningBolt extends Entity {
 
                 this.hitEntities.addAll(list);
                 if (this.cause != null) {
-                    CriteriaTriggers.CHANNELED_LIGHTNING.trigger(this.cause, (Collection) list);
+                    CriteriaTriggers.CHANNELED_LIGHTNING.trigger(this.cause, list);
                 }
             }
         }
@@ -198,7 +198,7 @@ public class LightningBolt extends Entity {
         BlockState iblockdata1;
 
         if (iblockdata.is(Blocks.LIGHTNING_ROD)) {
-            blockposition1 = pos.relative(((Direction) iblockdata.getValue(LightningRodBlock.FACING)).getOpposite());
+            blockposition1 = pos.relative(iblockdata.getValue(LightningRodBlock.FACING).getOpposite());
             iblockdata1 = world.getBlockState(blockposition1);
         } else {
             blockposition1 = pos;
@@ -234,7 +234,7 @@ public class LightningBolt extends Entity {
                 break;
             }
 
-            mutablePos.set((Vec3i) optional.get());
+            mutablePos.set(optional.get());
         }
 
     }
diff --git a/src/main/java/net/minecraft/world/entity/LivingEntity.java b/src/main/java/net/minecraft/world/entity/LivingEntity.java
index c33041be2464f1f8a04a8146b251975be2f3f3fc..8524c5d81feade1eb1297be02c20a23c13ab57cf 100644
--- a/src/main/java/net/minecraft/world/entity/LivingEntity.java
+++ b/src/main/java/net/minecraft/world/entity/LivingEntity.java
@@ -296,7 +296,7 @@ public abstract class LivingEntity extends Entity {
         this.maxUpStep = 0.6F;
         NbtOps dynamicopsnbt = NbtOps.INSTANCE;
 
-        this.brain = this.makeBrain(new Dynamic(dynamicopsnbt, (Tag) dynamicopsnbt.createMap((Map) ImmutableMap.of(dynamicopsnbt.createString("memories"), (Tag) dynamicopsnbt.emptyMap()))));
+        this.brain = this.makeBrain(new Dynamic(dynamicopsnbt, dynamicopsnbt.createMap(ImmutableMap.of(dynamicopsnbt.createString("memories"), dynamicopsnbt.emptyMap()))));
     }
 
     public Brain<?> getBrain() {
@@ -350,7 +350,7 @@ public abstract class LivingEntity extends Entity {
             float f = (float) Mth.ceil(this.fallDistance - 3.0F);
 
             if (!state.isAir()) {
-                double d1 = Math.min((double) (0.2F + f / 15.0F), 2.5D);
+                double d1 = Math.min(0.2F + f / 15.0F, 2.5D);
                 int i = (int) (150.0D * d1);
 
                 // CraftBukkit start - visiblity api
@@ -476,9 +476,9 @@ public abstract class LivingEntity extends Entity {
 
         if (this.lastHurtByMob != null) {
             if (!this.lastHurtByMob.isAlive()) {
-                this.setLastHurtByMob((LivingEntity) null);
+                this.setLastHurtByMob(null);
             } else if (this.tickCount - this.lastHurtByMobTimestamp > 100) {
-                this.setLastHurtByMob((LivingEntity) null);
+                this.setLastHurtByMob(null);
             }
         }
 
@@ -539,7 +539,7 @@ public abstract class LivingEntity extends Entity {
                     return;
                 }
 
-                attributemodifiable.addTransientModifier(new AttributeModifier(LivingEntity.SPEED_MODIFIER_SOUL_SPEED_UUID, "Soul speed boost", (double) (0.03F * (1.0F + (float) i * 0.35F)), AttributeModifier.Operation.ADDITION));
+                attributemodifiable.addTransientModifier(new AttributeModifier(LivingEntity.SPEED_MODIFIER_SOUL_SPEED_UUID, "Soul speed boost", 0.03F * (1.0F + (float) i * 0.35F), AttributeModifier.Operation.ADDITION));
                 if (this.getRandom().nextFloat() < 0.04F) {
                     ItemStack itemstack = this.getItemBySlot(EquipmentSlot.FEET);
 
@@ -576,7 +576,7 @@ public abstract class LivingEntity extends Entity {
 
                 float f = -0.05F * this.getPercentFrozen();
 
-                attributemodifiable.addTransientModifier(new AttributeModifier(LivingEntity.SPEED_MODIFIER_POWDER_SNOW_UUID, "Powder snow slow", (double) f, AttributeModifier.Operation.ADDITION));
+                attributemodifiable.addTransientModifier(new AttributeModifier(LivingEntity.SPEED_MODIFIER_POWDER_SNOW_UUID, "Powder snow slow", f, AttributeModifier.Operation.ADDITION));
             }
         }
 
@@ -896,10 +896,10 @@ public abstract class LivingEntity extends Entity {
         try {
             while (iterator.hasNext()) {
                 MobEffect mobeffectlist = (MobEffect) iterator.next();
-                MobEffectInstance mobeffect = (MobEffectInstance) this.activeEffects.get(mobeffectlist);
+                MobEffectInstance mobeffect = this.activeEffects.get(mobeffectlist);
 
                 if (!mobeffect.tick(this, () -> {
-                    this.onEffectUpdated(mobeffect, true, (Entity) null);
+                    this.onEffectUpdated(mobeffect, true, null);
                 })) {
                     if (!this.level.isClientSide) {
                         // CraftBukkit start
@@ -912,7 +912,7 @@ public abstract class LivingEntity extends Entity {
                         this.onEffectRemoved(mobeffect);
                     }
                 } else if (mobeffect.getDuration() % 600 == 0) {
-                    this.onEffectUpdated(mobeffect, false, (Entity) null);
+                    this.onEffectUpdated(mobeffect, false, null);
                 }
             }
         } catch (ConcurrentModificationException concurrentmodificationexception) {
@@ -939,8 +939,8 @@ public abstract class LivingEntity extends Entity {
             this.effectsDirty = false;
         }
 
-        int i = ((Integer) this.entityData.get(LivingEntity.DATA_EFFECT_COLOR_ID)).intValue();
-        boolean flag = ((Boolean) this.entityData.get(LivingEntity.DATA_EFFECT_AMBIENCE_ID)).booleanValue();
+        int i = this.entityData.get(LivingEntity.DATA_EFFECT_COLOR_ID).intValue();
+        boolean flag = this.entityData.get(LivingEntity.DATA_EFFECT_AMBIENCE_ID).booleanValue();
 
         if (i > 0) {
             boolean flag1;
@@ -1071,7 +1071,7 @@ public abstract class LivingEntity extends Entity {
 
             for (flag = false; iterator.hasNext(); flag = true) {
                 // CraftBukkit start
-                MobEffectInstance effect = (MobEffectInstance) iterator.next();
+                MobEffectInstance effect = iterator.next();
                 EntityPotionEffectEvent event = CraftEventFactory.callEntityPotionEffectChangeEvent(this, effect, null, cause, EntityPotionEffectEvent.Action.CLEARED);
                 if (event.isCancelled()) {
                     continue;
@@ -1099,7 +1099,7 @@ public abstract class LivingEntity extends Entity {
 
     @Nullable
     public MobEffectInstance getEffect(MobEffect effect) {
-        return (MobEffectInstance) this.activeEffects.get(effect);
+        return this.activeEffects.get(effect);
     }
 
     public final boolean addEffect(MobEffectInstance effect) {
@@ -1108,7 +1108,7 @@ public abstract class LivingEntity extends Entity {
 
     // CraftBukkit start
     public boolean addEffect(MobEffectInstance mobeffect, EntityPotionEffectEvent.Cause cause) {
-        return this.addEffect(mobeffect, (Entity) null, cause);
+        return this.addEffect(mobeffect, null, cause);
     }
 
     public boolean addEffect(MobEffectInstance effect, @Nullable Entity source) {
@@ -1126,7 +1126,7 @@ public abstract class LivingEntity extends Entity {
         if (!this.canBeAffected(mobeffect)) {
             return false;
         } else {
-            MobEffectInstance mobeffect1 = (MobEffectInstance) this.activeEffects.get(mobeffect.getEffect());
+            MobEffectInstance mobeffect1 = this.activeEffects.get(mobeffect.getEffect());
 
             // CraftBukkit start
             boolean override = false;
@@ -1170,7 +1170,7 @@ public abstract class LivingEntity extends Entity {
 
     public void forceAddEffect(MobEffectInstance effect, @Nullable Entity source) {
         if (this.canBeAffected(effect)) {
-            MobEffectInstance mobeffect1 = (MobEffectInstance) this.activeEffects.put(effect.getEffect(), effect);
+            MobEffectInstance mobeffect1 = this.activeEffects.put(effect.getEffect(), effect);
 
             if (mobeffect1 == null) {
                 this.onEffectAdded(effect, source);
@@ -1208,7 +1208,7 @@ public abstract class LivingEntity extends Entity {
             return null;
         }
 
-        return (MobEffectInstance) this.activeEffects.remove(mobeffectlist);
+        return this.activeEffects.remove(mobeffectlist);
     }
 
     public boolean removeEffect(MobEffect type) {
@@ -1289,7 +1289,7 @@ public abstract class LivingEntity extends Entity {
             return (float) ((ServerPlayer) this).getBukkitEntity().getHealth();
         }
         // CraftBukkit end
-        return ((Float) this.entityData.get(LivingEntity.DATA_HEALTH_ID)).floatValue();
+        return this.entityData.get(LivingEntity.DATA_HEALTH_ID).floatValue();
     }
 
     public void setHealth(float health) {
@@ -1947,7 +1947,7 @@ public abstract class LivingEntity extends Entity {
     }
 
     private boolean trapdoorUsableAsLadder(BlockPos pos, BlockState state) {
-        if (((Boolean) state.getValue(TrapDoorBlock.OPEN)).booleanValue()) {
+        if (state.getValue(TrapDoorBlock.OPEN).booleanValue()) {
             BlockState iblockdata1 = this.level.getBlockState(pos.below());
 
             if (iblockdata1.is(Blocks.LADDER) && iblockdata1.getValue(LadderBlock.FACING) == state.getValue(TrapDoorBlock.FACING)) {
@@ -2087,7 +2087,7 @@ public abstract class LivingEntity extends Entity {
                     return Double.valueOf(-0.0);
                 }
             };
-            float hardHatModifier = hardHat.apply(Double.valueOf((double) f)).floatValue();
+            float hardHatModifier = hardHat.apply(Double.valueOf(f)).floatValue();
             f += hardHatModifier;
 
             Function<Double, Double> blocking = new Function<Double, Double>() {
@@ -2096,7 +2096,7 @@ public abstract class LivingEntity extends Entity {
                     return Double.valueOf(-((LivingEntity.this.isDamageSourceBlocked(damagesource)) ? f : 0.0));
                 }
             };
-            float blockingModifier = blocking.apply(Double.valueOf((double) f)).floatValue();
+            float blockingModifier = blocking.apply(Double.valueOf(f)).floatValue();
             f += blockingModifier;
 
             Function<Double, Double> armor = new Function<Double, Double>() {
@@ -2105,7 +2105,7 @@ public abstract class LivingEntity extends Entity {
                     return Double.valueOf(-(f - LivingEntity.this.getDamageAfterArmorAbsorb(damagesource, f.floatValue())));
                 }
             };
-            float armorModifier = armor.apply(Double.valueOf((double) f)).floatValue();
+            float armorModifier = armor.apply(Double.valueOf(f)).floatValue();
             f += armorModifier;
 
             Function<Double, Double> resistance = new Function<Double, Double>() {
@@ -2120,7 +2120,7 @@ public abstract class LivingEntity extends Entity {
                     return Double.valueOf(-0.0);
                 }
             };
-            float resistanceModifier = resistance.apply(Double.valueOf((double) f)).floatValue();
+            float resistanceModifier = resistance.apply(Double.valueOf(f)).floatValue();
             f += resistanceModifier;
 
             Function<Double, Double> magic = new Function<Double, Double>() {
@@ -2129,7 +2129,7 @@ public abstract class LivingEntity extends Entity {
                     return Double.valueOf(-(f - LivingEntity.this.getDamageAfterMagicAbsorb(damagesource, f.floatValue())));
                 }
             };
-            float magicModifier = magic.apply(Double.valueOf((double) f)).floatValue();
+            float magicModifier = magic.apply(Double.valueOf(f)).floatValue();
             f += magicModifier;
 
             Function<Double, Double> absorption = new Function<Double, Double>() {
@@ -2138,7 +2138,7 @@ public abstract class LivingEntity extends Entity {
                     return Double.valueOf(-(Math.max(f - Math.max(f - LivingEntity.this.getAbsorptionAmount(), 0.0F), 0.0F)));
                 }
             };
-            float absorptionModifier = absorption.apply(Double.valueOf((double) f)).floatValue();
+            float absorptionModifier = absorption.apply(Double.valueOf(f)).floatValue();
 
             EntityDamageEvent event = CraftEventFactory.handleLivingEntityDamageEvent(this, damagesource, originalDamage, hardHatModifier, blockingModifier, armorModifier, resistanceModifier, magicModifier, absorptionModifier, hardHat, blocking, armor, resistance, magic, absorption);
             if (damagesource.getEntity() instanceof net.minecraft.world.entity.player.Player) {
@@ -2257,7 +2257,7 @@ public abstract class LivingEntity extends Entity {
 
     @Nullable
     public LivingEntity getKillCredit() {
-        return (LivingEntity) (this.combatTracker.getKiller() != null ? this.combatTracker.getKiller() : (this.lastHurtByPlayer != null ? this.lastHurtByPlayer : (this.lastHurtByMob != null ? this.lastHurtByMob : null)));
+        return this.combatTracker.getKiller() != null ? this.combatTracker.getKiller() : (this.lastHurtByPlayer != null ? this.lastHurtByPlayer : (this.lastHurtByMob != null ? this.lastHurtByMob : null));
     }
 
     public final float getMaxHealth() {
@@ -2265,7 +2265,7 @@ public abstract class LivingEntity extends Entity {
     }
 
     public final int getArrowCount() {
-        return ((Integer) this.entityData.get(LivingEntity.DATA_ARROW_COUNT_ID)).intValue();
+        return this.entityData.get(LivingEntity.DATA_ARROW_COUNT_ID).intValue();
     }
 
     public final void setArrowCount(int stuckArrowCount) {
@@ -2283,7 +2283,7 @@ public abstract class LivingEntity extends Entity {
     // CraftBukkit end
 
     public final int getStingerCount() {
-        return ((Integer) this.entityData.get(LivingEntity.DATA_STINGER_COUNT_ID)).intValue();
+        return this.entityData.get(LivingEntity.DATA_STINGER_COUNT_ID).intValue();
     }
 
     public final void setStingerCount(int stingerCount) {
@@ -2432,7 +2432,7 @@ public abstract class LivingEntity extends Entity {
                     double d2 = Mth.lerp(d0, this.yo, this.getY()) + this.random.nextDouble() * (double) this.getBbHeight();
                     double d3 = Mth.lerp(d0, this.zo, this.getZ()) + (this.random.nextDouble() - 0.5D) * (double) this.getBbWidth() * 2.0D;
 
-                    this.level.addParticle(ParticleTypes.PORTAL, d1, d2, d3, (double) f, (double) f1, (double) f2);
+                    this.level.addParticle(ParticleTypes.PORTAL, d1, d2, d3, f, f1, f2);
                 }
 
                 return;
@@ -2703,7 +2703,7 @@ public abstract class LivingEntity extends Entity {
             float f = this.getYRot() * 0.017453292F;
 
             if (canCrit) // Paper
-            this.setDeltaMovement(this.getDeltaMovement().add((double) (-Mth.sin(f) * 0.2F), 0.0D, (double) (Mth.cos(f) * 0.2F)));
+            this.setDeltaMovement(this.getDeltaMovement().add(-Mth.sin(f) * 0.2F, 0.0D, Mth.cos(f) * 0.2F));
         }
 
         this.hasImpulse = true;
@@ -2770,7 +2770,7 @@ public abstract class LivingEntity extends Entity {
                     vec3d1 = new Vec3(vec3d1.x, 0.2D, vec3d1.z);
                 }
 
-                this.setDeltaMovement(vec3d1.multiply((double) f, 0.800000011920929D, (double) f));
+                this.setDeltaMovement(vec3d1.multiply(f, 0.800000011920929D, f));
                 Vec3 vec3d2 = this.getFluidFallingAdjustedMovement(d0, flag, this.getDeltaMovement());
 
                 this.setDeltaMovement(vec3d2);
@@ -2808,7 +2808,7 @@ public abstract class LivingEntity extends Entity {
                 double d2 = Math.sqrt(vec3d5.x * vec3d5.x + vec3d5.z * vec3d5.z);
                 double d3 = vec3d4.horizontalDistance();
                 double d4 = vec3d5.length();
-                double d5 = Math.cos((double) f);
+                double d5 = Math.cos(f);
 
                 d5 = d5 * d5 * Math.min(1.0D, d4 / 0.4D);
                 vec3d4 = this.getDeltaMovement().add(0.0D, d0 * (-1.0D + d5 * 0.75D), 0.0D);
@@ -3013,7 +3013,7 @@ public abstract class LivingEntity extends Entity {
 
         if (f > 0.0025000002F) {
             f3 = 1.0F;
-            f2 = (float) Math.sqrt((double) f) * 3.0F;
+            f2 = (float) Math.sqrt(f) * 3.0F;
             float f4 = (float) Mth.atan2(d1, d0) * 57.295776F - 90.0F;
             float f5 = Mth.abs(Mth.wrapDegrees(this.getYRot()) - f4);
 
@@ -3127,8 +3127,8 @@ public abstract class LivingEntity extends Entity {
     }
 
     private void handleHandSwap(Map<EquipmentSlot, ItemStack> equipmentChanges) {
-        ItemStack itemstack = (ItemStack) equipmentChanges.get(EquipmentSlot.MAINHAND);
-        ItemStack itemstack1 = (ItemStack) equipmentChanges.get(EquipmentSlot.OFFHAND);
+        ItemStack itemstack = equipmentChanges.get(EquipmentSlot.MAINHAND);
+        ItemStack itemstack1 = equipmentChanges.get(EquipmentSlot.OFFHAND);
 
         if (itemstack != null && itemstack1 != null && ItemStack.matches(itemstack, this.getLastHandItem(EquipmentSlot.OFFHAND)) && ItemStack.matches(itemstack1, this.getLastHandItem(EquipmentSlot.MAINHAND))) {
             ((ServerLevel) this.level).getChunkSource().broadcast(this, new ClientboundEntityEventPacket(this, (byte) 55));
@@ -3255,7 +3255,7 @@ public abstract class LivingEntity extends Entity {
     // Paper end
 
     private ItemStack getLastArmorItem(EquipmentSlot slot) {
-        return (ItemStack) this.lastArmorItemStacks.get(slot.getIndex());
+        return this.lastArmorItemStacks.get(slot.getIndex());
     }
 
     private void setLastArmorItem(EquipmentSlot slot, ItemStack armor) {
@@ -3263,7 +3263,7 @@ public abstract class LivingEntity extends Entity {
     }
 
     private ItemStack getLastHandItem(EquipmentSlot slot) {
-        return (ItemStack) this.lastHandItemStacks.get(slot.getIndex());
+        return this.lastHandItemStacks.get(slot.getIndex());
     }
 
     private void setLastHandItem(EquipmentSlot slot, ItemStack stack) {
@@ -3392,7 +3392,7 @@ public abstract class LivingEntity extends Entity {
         AABB axisalignedbb = this.getBoundingBox();
 
         // SpigotTimings.timerEntityAIMove.startTiming(); // Spigot // Paper
-        this.travel(new Vec3((double) this.xxa, (double) this.yya, (double) this.zza));
+        this.travel(new Vec3(this.xxa, this.yya, this.zza));
         // SpigotTimings.timerEntityAIMove.stopTiming(); // Spigot // Paper
         this.level.getProfiler().pop();
         this.level.getProfiler().push("freezing");
@@ -3503,7 +3503,7 @@ public abstract class LivingEntity extends Entity {
                 return;
             }
             // Paper end - don't run getEntities if we're not going to use its result
-            List<Entity> list = this.level.getEntities((Entity) this, this.getBoundingBox(), EntitySelector.pushable(this, level.paperConfig().collisions.fixClimbingBypassingCrammingRule)); // Paper - fix climbing bypassing cramming rule
+            List<Entity> list = this.level.getEntities(this, this.getBoundingBox(), EntitySelector.pushable(this, level.paperConfig().collisions.fixClimbingBypassingCrammingRule)); // Paper - fix climbing bypassing cramming rule
 
             if (!list.isEmpty()) {
                 // Paper - moved up
@@ -3513,7 +3513,7 @@ public abstract class LivingEntity extends Entity {
                     j = 0;
 
                     for (int k = 0; k < list.size(); ++k) {
-                        if (!((Entity) list.get(k)).isPassenger()) {
+                        if (!list.get(k).isPassenger()) {
                             ++j;
                         }
                     }
@@ -3525,7 +3525,7 @@ public abstract class LivingEntity extends Entity {
 
             this.numCollisions = Math.max(0, this.numCollisions - this.level.paperConfig().collisions.maxEntityCollisions); // Paper
             for (j = 0; j < list.size() && this.numCollisions < this.level.paperConfig().collisions.maxEntityCollisions; ++j) { // Paper
-                    Entity entity = (Entity) list.get(j);
+                    Entity entity = list.get(j);
                 entity.numCollisions++; // Paper
                 this.numCollisions++; // Paper
 
@@ -3542,7 +3542,7 @@ public abstract class LivingEntity extends Entity {
 
         if (!list.isEmpty()) {
             for (int i = 0; i < list.size(); ++i) {
-                Entity entity = (Entity) list.get(i);
+                Entity entity = list.get(i);
 
                 if (entity instanceof LivingEntity) {
                     this.doAutoAttackOnTouch((LivingEntity) entity);
@@ -3568,7 +3568,7 @@ public abstract class LivingEntity extends Entity {
     protected void doAutoAttackOnTouch(LivingEntity target) {}
 
     public boolean isAutoSpinAttack() {
-        return (((Byte) this.entityData.get(LivingEntity.DATA_LIVING_ENTITY_FLAGS)).intValue() & 4) != 0;
+        return (this.entityData.get(LivingEntity.DATA_LIVING_ENTITY_FLAGS).intValue() & 4) != 0;
     }
 
     @Override
@@ -3601,14 +3601,14 @@ public abstract class LivingEntity extends Entity {
         this.lerpX = x;
         this.lerpY = y;
         this.lerpZ = z;
-        this.lerpYRot = (double) yaw;
-        this.lerpXRot = (double) pitch;
+        this.lerpYRot = yaw;
+        this.lerpXRot = pitch;
         this.lerpSteps = interpolationSteps;
     }
 
     @Override
     public void lerpHeadTo(float yaw, int interpolationSteps) {
-        this.lyHeadRot = (double) yaw;
+        this.lyHeadRot = yaw;
         this.lerpHeadSteps = interpolationSteps;
     }
 
@@ -3734,11 +3734,11 @@ public abstract class LivingEntity extends Entity {
     public abstract HumanoidArm getMainArm();
 
     public boolean isUsingItem() {
-        return (((Byte) this.entityData.get(LivingEntity.DATA_LIVING_ENTITY_FLAGS)).intValue() & 1) > 0;
+        return (this.entityData.get(LivingEntity.DATA_LIVING_ENTITY_FLAGS).intValue() & 1) > 0;
     }
 
     public InteractionHand getUsedItemHand() {
-        return (((Byte) this.entityData.get(LivingEntity.DATA_LIVING_ENTITY_FLAGS)).intValue() & 2) > 0 ? InteractionHand.OFF_HAND : InteractionHand.MAIN_HAND;
+        return (this.entityData.get(LivingEntity.DATA_LIVING_ENTITY_FLAGS).intValue() & 2) > 0 ? InteractionHand.OFF_HAND : InteractionHand.MAIN_HAND;
     }
 
     // Paper start - lag compensate eating
@@ -3794,7 +3794,7 @@ public abstract class LivingEntity extends Entity {
     }
 
     protected void setLivingEntityFlag(int mask, boolean value) {
-        byte b0 = ((Byte) this.entityData.get(LivingEntity.DATA_LIVING_ENTITY_FLAGS)).byteValue();
+        byte b0 = this.entityData.get(LivingEntity.DATA_LIVING_ENTITY_FLAGS).byteValue();
         int j;
 
         if (value) {
@@ -4029,7 +4029,7 @@ public abstract class LivingEntity extends Entity {
         EntityHitResult result = null;
 
         for (Entity entity : entityList) {
-            final double inflationAmount = (double) entity.getPickRadius();
+            final double inflationAmount = entity.getPickRadius();
             AABB aabb = entity.getBoundingBox().inflate(inflationAmount, inflationAmount, inflationAmount);
             Optional<Vec3> rayTraceResult = aabb.clip(start, end);
 
@@ -4110,7 +4110,7 @@ public abstract class LivingEntity extends Entity {
 
                 // first set position, to check if the place to teleport is valid
                 this.setPos(d0, d6, d2);
-                if (world.noCollision((Entity) this) && !world.containsAnyLiquid(this.getBoundingBox())) {
+                if (world.noCollision(this) && !world.containsAnyLiquid(this.getBoundingBox())) {
                     flag1 = true;
                 }
                 // now revert and call event if the teleport place is valid
@@ -4179,11 +4179,11 @@ public abstract class LivingEntity extends Entity {
     public AABB getLocalBoundsForPose(Pose pose) {
         EntityDimensions entitysize = this.getDimensions(pose);
 
-        return new AABB((double) (-entitysize.width / 2.0F), 0.0D, (double) (-entitysize.width / 2.0F), (double) (entitysize.width / 2.0F), (double) entitysize.height, (double) (entitysize.width / 2.0F));
+        return new AABB(-entitysize.width / 2.0F, 0.0D, -entitysize.width / 2.0F, entitysize.width / 2.0F, entitysize.height, entitysize.width / 2.0F);
     }
 
     public Optional<BlockPos> getSleepingPos() {
-        return (Optional) this.entityData.get(LivingEntity.SLEEPING_POS_ID);
+        return this.entityData.get(LivingEntity.SLEEPING_POS_ID);
     }
 
     public void setSleepingPos(BlockPos pos) {
@@ -4206,7 +4206,7 @@ public abstract class LivingEntity extends Entity {
         BlockState iblockdata = this.level.getBlockState(pos);
 
         if (iblockdata.getBlock() instanceof BedBlock) {
-            this.level.setBlock(pos, (BlockState) iblockdata.setValue(BedBlock.OCCUPIED, Boolean.TRUE), 3);
+            this.level.setBlock(pos, iblockdata.setValue(BedBlock.OCCUPIED, Boolean.TRUE), 3);
         }
 
         this.setPose(Pose.SLEEPING);
@@ -4221,9 +4221,9 @@ public abstract class LivingEntity extends Entity {
     }
 
     private boolean checkBedExists() {
-        return ((Boolean) this.getSleepingPos().map((blockposition) -> {
+        return this.getSleepingPos().map((blockposition) -> {
             return Boolean.valueOf(this.level.getBlockState(blockposition).getBlock() instanceof BedBlock);
-        }).orElse(Boolean.FALSE)).booleanValue();
+        }).orElse(Boolean.FALSE).booleanValue();
     }
 
     public void stopSleeping() {
@@ -4237,8 +4237,8 @@ public abstract class LivingEntity extends Entity {
             if (iblockdata.getBlock() instanceof BedBlock) {
                 Direction enumdirection = (Direction) iblockdata.getValue(BedBlock.FACING);
 
-                this.level.setBlock(blockposition, (BlockState) iblockdata.setValue(BedBlock.OCCUPIED, Boolean.FALSE), 3);
-                Vec3 vec3d = (Vec3) BedBlock.findStandUpPosition(this.getType(), this.level, blockposition, enumdirection, this.getYRot()).orElseGet(() -> {
+                this.level.setBlock(blockposition, iblockdata.setValue(BedBlock.OCCUPIED, Boolean.FALSE), 3);
+                Vec3 vec3d = BedBlock.findStandUpPosition(this.getType(), this.level, blockposition, enumdirection, this.getYRot()).orElseGet(() -> {
                     BlockPos blockposition1 = blockposition.above();
 
                     return new Vec3((double) blockposition1.getX() + 0.5D, (double) blockposition1.getY() + 0.1D, (double) blockposition1.getZ() + 0.5D);
@@ -4261,7 +4261,7 @@ public abstract class LivingEntity extends Entity {
 
     @Nullable
     public Direction getBedOrientation() {
-        BlockPos blockposition = (BlockPos) this.getSleepingPos().orElse(null); // CraftBukkit - decompile error
+        BlockPos blockposition = this.getSleepingPos().orElse(null); // CraftBukkit - decompile error
 
         return blockposition != null ? BedBlock.getBedOrientation(this.level, blockposition) : null;
     }
@@ -4286,7 +4286,7 @@ public abstract class LivingEntity extends Entity {
 
     public ItemStack eat(Level world, ItemStack stack) {
         if (stack.isEdible()) {
-            world.playSound((net.minecraft.world.entity.player.Player) null, this.getX(), this.getY(), this.getZ(), this.getEatingSound(stack), SoundSource.NEUTRAL, 1.0F, 1.0F + (world.random.nextFloat() - world.random.nextFloat()) * 0.4F);
+            world.playSound(null, this.getX(), this.getY(), this.getZ(), this.getEatingSound(stack), SoundSource.NEUTRAL, 1.0F, 1.0F + (world.random.nextFloat() - world.random.nextFloat()) * 0.4F);
             this.addEatEffect(stack, world, this);
             if (!(this instanceof net.minecraft.world.entity.player.Player) || !((net.minecraft.world.entity.player.Player) this).getAbilities().instabuild) {
                 stack.shrink(1);
@@ -4308,8 +4308,8 @@ public abstract class LivingEntity extends Entity {
             while (iterator.hasNext()) {
                 Pair<MobEffectInstance, Float> pair = (Pair) iterator.next();
 
-                if (!world.isClientSide && pair.getFirst() != null && world.random.nextFloat() < ((Float) pair.getSecond()).floatValue()) {
-                    targetEntity.addEffect(new MobEffectInstance((MobEffectInstance) pair.getFirst()), EntityPotionEffectEvent.Cause.FOOD); // CraftBukkit
+                if (!world.isClientSide && pair.getFirst() != null && world.random.nextFloat() < pair.getSecond().floatValue()) {
+                    targetEntity.addEffect(new MobEffectInstance(pair.getFirst()), EntityPotionEffectEvent.Cause.FOOD); // CraftBukkit
                 }
             }
         }
diff --git a/src/main/java/net/minecraft/world/entity/Mob.java b/src/main/java/net/minecraft/world/entity/Mob.java
index 49745d5055092dfc4b87b044a11e2ed33c3b59e2..b2d09e709571ac5b5e965eb72d3e4ac91010a26c 100644
--- a/src/main/java/net/minecraft/world/entity/Mob.java
+++ b/src/main/java/net/minecraft/world/entity/Mob.java
@@ -189,7 +189,7 @@ public abstract class Mob extends LivingEntity {
             entityinsentient = this;
         }
 
-        Float ofloat = (Float) entityinsentient.pathfindingMalus.get(nodeType);
+        Float ofloat = entityinsentient.pathfindingMalus.get(nodeType);
 
         return ofloat == null ? nodeType.getMalus() : ofloat.floatValue();
     }
@@ -354,13 +354,13 @@ public abstract class Mob extends LivingEntity {
             int j;
 
             for (j = 0; j < this.armorItems.size(); ++j) {
-                if (!((ItemStack) this.armorItems.get(j)).isEmpty() && this.armorDropChances[j] <= 1.0F) {
+                if (!this.armorItems.get(j).isEmpty() && this.armorDropChances[j] <= 1.0F) {
                     i += 1 + this.random.nextInt(3);
                 }
             }
 
             for (j = 0; j < this.handItems.size(); ++j) {
-                if (!((ItemStack) this.handItems.get(j)).isEmpty() && this.handDropChances[j] <= 1.0F) {
+                if (!this.handItems.get(j).isEmpty() && this.handDropChances[j] <= 1.0F) {
                     i += 1 + this.random.nextInt(3);
                 }
             }
@@ -641,7 +641,7 @@ public abstract class Mob extends LivingEntity {
         this.level.getProfiler().push("looting");
         if (!this.level.isClientSide && this.canPickUpLoot() && this.isAlive() && !this.dead && this.level.getGameRules().getBoolean(GameRules.RULE_MOBGRIEFING)) {
             Vec3i baseblockposition = this.getPickupReach();
-            List<ItemEntity> list = this.level.getEntitiesOfClass(ItemEntity.class, this.getBoundingBox().inflate((double) baseblockposition.getX(), (double) baseblockposition.getY(), (double) baseblockposition.getZ()));
+            List<ItemEntity> list = this.level.getEntitiesOfClass(ItemEntity.class, this.getBoundingBox().inflate(baseblockposition.getX(), baseblockposition.getY(), baseblockposition.getZ()));
             Iterator iterator = list.iterator();
 
             while (iterator.hasNext()) {
@@ -698,7 +698,7 @@ public abstract class Mob extends LivingEntity {
         }
         if (canPickup) {
             // CraftBukkit end
-            double d0 = (double) this.getEquipmentDropChance(enumitemslot);
+            double d0 = this.getEquipmentDropChance(enumitemslot);
 
             if (!itemstack1.isEmpty() && (double) Math.max(this.random.nextFloat() - 0.1F, 0.0F) < d0) {
                 this.forceDrops = true; // CraftBukkit
@@ -834,7 +834,7 @@ public abstract class Mob extends LivingEntity {
             // Paper end - optimise checkDespawn
 
             if (entityhuman != null) {
-                double d0 = entityhuman.distanceToSqr((Entity) this);
+                double d0 = entityhuman.distanceToSqr(this);
                 int i = this.level.paperConfig().entities.spawning.despawnRanges.get(this.getType().getCategory()).hard(); // Paper - custom despawn distances
                 int j = i * i;
 
@@ -1015,9 +1015,9 @@ public abstract class Mob extends LivingEntity {
     public ItemStack getItemBySlot(EquipmentSlot slot) {
         switch (slot.getType()) {
             case HAND:
-                return (ItemStack) this.handItems.get(slot.getIndex());
+                return this.handItems.get(slot.getIndex());
             case ARMOR:
-                return (ItemStack) this.armorItems.get(slot.getIndex());
+                return this.armorItems.get(slot.getIndex());
             default:
                 return ItemStack.EMPTY;
         }
@@ -1028,10 +1028,10 @@ public abstract class Mob extends LivingEntity {
         this.verifyEquippedItem(stack);
         switch (slot.getType()) {
             case HAND:
-                this.onEquipItem(slot, (ItemStack) this.handItems.set(slot.getIndex(), stack), stack);
+                this.onEquipItem(slot, this.handItems.set(slot.getIndex(), stack), stack);
                 break;
             case ARMOR:
-                this.onEquipItem(slot, (ItemStack) this.armorItems.set(slot.getIndex(), stack), stack);
+                this.onEquipItem(slot, this.armorItems.set(slot.getIndex(), stack), stack);
         }
 
     }
@@ -1462,12 +1462,12 @@ public abstract class Mob extends LivingEntity {
             this.leashInfoTag = null;
             if (!this.level.isClientSide && dropItem) {
                 this.forceDrops = true; // CraftBukkit
-                this.spawnAtLocation((ItemLike) Items.LEAD);
+                this.spawnAtLocation(Items.LEAD);
                 this.forceDrops = false; // CraftBukkit
             }
 
             if (!this.level.isClientSide && sendPacket && this.level instanceof ServerLevel) {
-                ((ServerLevel) this.level).getChunkSource().broadcast(this, new ClientboundSetEntityLinkPacket(this, (Entity) null));
+                ((ServerLevel) this.level).getChunkSource().broadcast(this, new ClientboundSetEntityLinkPacket(this, null));
             }
         }
 
@@ -1542,7 +1542,7 @@ public abstract class Mob extends LivingEntity {
 
             if (this.tickCount > 100) {
                 this.forceDrops = true; // CraftBukkit
-                this.spawnAtLocation((ItemLike) Items.LEAD);
+                this.spawnAtLocation(Items.LEAD);
                 this.forceDrops = false; // CraftBukkit
                 this.leashInfoTag = null;
             }
@@ -1561,33 +1561,33 @@ public abstract class Mob extends LivingEntity {
     }
 
     public void setNoAi(boolean aiDisabled) {
-        byte b0 = ((Byte) this.entityData.get(Mob.DATA_MOB_FLAGS_ID)).byteValue();
+        byte b0 = this.entityData.get(Mob.DATA_MOB_FLAGS_ID).byteValue();
 
         this.entityData.set(Mob.DATA_MOB_FLAGS_ID, Byte.valueOf(aiDisabled ? (byte) (b0 | 1) : (byte) (b0 & -2)));
     }
 
     public void setLeftHanded(boolean leftHanded) {
-        byte b0 = ((Byte) this.entityData.get(Mob.DATA_MOB_FLAGS_ID)).byteValue();
+        byte b0 = this.entityData.get(Mob.DATA_MOB_FLAGS_ID).byteValue();
 
         this.entityData.set(Mob.DATA_MOB_FLAGS_ID, Byte.valueOf(leftHanded ? (byte) (b0 | 2) : (byte) (b0 & -3)));
     }
 
     public void setAggressive(boolean attacking) {
-        byte b0 = ((Byte) this.entityData.get(Mob.DATA_MOB_FLAGS_ID)).byteValue();
+        byte b0 = this.entityData.get(Mob.DATA_MOB_FLAGS_ID).byteValue();
 
         this.entityData.set(Mob.DATA_MOB_FLAGS_ID, Byte.valueOf(attacking ? (byte) (b0 | 4) : (byte) (b0 & -5)));
     }
 
     public boolean isNoAi() {
-        return (((Byte) this.entityData.get(Mob.DATA_MOB_FLAGS_ID)).intValue() & 1) != 0;
+        return (this.entityData.get(Mob.DATA_MOB_FLAGS_ID).intValue() & 1) != 0;
     }
 
     public boolean isLeftHanded() {
-        return (((Byte) this.entityData.get(Mob.DATA_MOB_FLAGS_ID)).intValue() & 2) != 0;
+        return (this.entityData.get(Mob.DATA_MOB_FLAGS_ID).intValue() & 2) != 0;
     }
 
     public boolean isAggressive() {
-        return (((Byte) this.entityData.get(Mob.DATA_MOB_FLAGS_ID)).intValue() & 4) != 0;
+        return (this.entityData.get(Mob.DATA_MOB_FLAGS_ID).intValue() & 4) != 0;
     }
 
     public void setBaby(boolean baby) {}
@@ -1598,7 +1598,7 @@ public abstract class Mob extends LivingEntity {
     }
 
     public double getMeleeAttackRangeSqr(LivingEntity target) {
-        return (double) (this.getBbWidth() * 2.0F * this.getBbWidth() * 2.0F + target.getBbWidth());
+        return this.getBbWidth() * 2.0F * this.getBbWidth() * 2.0F + target.getBbWidth();
     }
 
     public double getPerceivedTargetDistanceSquareForMeleeAttack(LivingEntity target) {
@@ -1638,7 +1638,7 @@ public abstract class Mob extends LivingEntity {
 
         if (flag) {
             if (f1 > 0.0F && target instanceof LivingEntity) {
-                ((LivingEntity) target).knockback((double) (f1 * 0.5F), (double) Mth.sin(this.getYRot() * 0.017453292F), (double) (-Mth.cos(this.getYRot() * 0.017453292F)), this); // Paper
+                ((LivingEntity) target).knockback(f1 * 0.5F, Mth.sin(this.getYRot() * 0.017453292F), -Mth.cos(this.getYRot() * 0.017453292F), this); // Paper
                 this.setDeltaMovement(this.getDeltaMovement().multiply(0.6D, 1.0D, 0.6D));
             }
 
diff --git a/src/main/java/net/minecraft/world/entity/NeutralMob.java b/src/main/java/net/minecraft/world/entity/NeutralMob.java
index e25df659cd2371b85e3154173271b16cd01529cf..f398965538fd5767799f1eadbad6f8c5d3f98f4d 100644
--- a/src/main/java/net/minecraft/world/entity/NeutralMob.java
+++ b/src/main/java/net/minecraft/world/entity/NeutralMob.java
@@ -38,7 +38,7 @@ public interface NeutralMob {
         this.setRemainingPersistentAngerTime(nbt.getInt("AngerTime"));
         if (world instanceof ServerLevel) {
             if (!nbt.hasUUID("AngryAt")) {
-                this.setPersistentAngerTarget((UUID) null);
+                this.setPersistentAngerTarget(null);
             } else {
                 UUID uuid = nbt.getUUID("AngryAt");
 
@@ -100,9 +100,9 @@ public interface NeutralMob {
     }
 
     default void stopBeingAngry() {
-        this.setLastHurtByMob((LivingEntity) null);
-        this.setPersistentAngerTarget((UUID) null);
-        this.setTarget((LivingEntity) null, org.bukkit.event.entity.EntityTargetEvent.TargetReason.FORGOT_TARGET, true); // CraftBukkit
+        this.setLastHurtByMob(null);
+        this.setPersistentAngerTarget(null);
+        this.setTarget(null, org.bukkit.event.entity.EntityTargetEvent.TargetReason.FORGOT_TARGET, true); // CraftBukkit
         this.setRemainingPersistentAngerTime(0);
     }
 
diff --git a/src/main/java/net/minecraft/world/entity/PathfinderMob.java b/src/main/java/net/minecraft/world/entity/PathfinderMob.java
index a53466a84973f5e83afc71245b317ab4296e0f9e..f302130656c27589fec123ba62088aace8453b22 100644
--- a/src/main/java/net/minecraft/world/entity/PathfinderMob.java
+++ b/src/main/java/net/minecraft/world/entity/PathfinderMob.java
@@ -77,7 +77,7 @@ public abstract class PathfinderMob extends Mob {
             } else if (this.shouldStayCloseToLeashHolder()) {
                 this.goalSelector.enableControlFlag(Goal.Flag.MOVE);
                 float f1 = 2.0F;
-                Vec3 vec3d = (new Vec3(entity.getX() - this.getX(), entity.getY() - this.getY(), entity.getZ() - this.getZ())).normalize().scale((double) Math.max(f - 2.0F, 0.0F));
+                Vec3 vec3d = (new Vec3(entity.getX() - this.getX(), entity.getY() - this.getY(), entity.getZ() - this.getZ())).normalize().scale(Math.max(f - 2.0F, 0.0F));
 
                 this.getNavigation().moveTo(this.getX() + vec3d.x, this.getY() + vec3d.y, this.getZ() + vec3d.z, this.followLeashSpeed());
             }
diff --git a/src/main/java/net/minecraft/world/entity/TamableAnimal.java b/src/main/java/net/minecraft/world/entity/TamableAnimal.java
index 013dc299d2a24780097890f3ccee4f2dd96efb5b..89a31d2b87a9b209cb04275f117bfe1035fe648f 100644
--- a/src/main/java/net/minecraft/world/entity/TamableAnimal.java
+++ b/src/main/java/net/minecraft/world/entity/TamableAnimal.java
@@ -143,7 +143,7 @@ public abstract class TamableAnimal extends Animal implements OwnableEntity {
     @Nullable
     @Override
     public UUID getOwnerUUID() {
-        return this.entityData.get(DATA_OWNERUUID_ID).orElse((UUID)null);
+        return this.entityData.get(DATA_OWNERUUID_ID).orElse(null);
     }
 
     public void setOwnerUUID(@Nullable UUID uuid) {
diff --git a/src/main/java/net/minecraft/world/entity/ai/attributes/AttributeMap.java b/src/main/java/net/minecraft/world/entity/ai/attributes/AttributeMap.java
index dd1102d5291ef6f18e82400a6d8a0a376cc071e9..a8a6f626380d75e8a5171e29c760b69be8cf6360 100644
--- a/src/main/java/net/minecraft/world/entity/ai/attributes/AttributeMap.java
+++ b/src/main/java/net/minecraft/world/entity/ai/attributes/AttributeMap.java
@@ -145,7 +145,7 @@ public class AttributeMap {
                 }
 
             }, () -> {
-                LOGGER.warn("Ignoring unknown attribute '{}'", (Object)string);
+                LOGGER.warn("Ignoring unknown attribute '{}'", string);
             });
         }
 
diff --git a/src/main/java/net/minecraft/world/entity/ai/attributes/Attributes.java b/src/main/java/net/minecraft/world/entity/ai/attributes/Attributes.java
index 2878bcbfd41839249b160e67b83d5dad149c94db..46621110a2d7a690d11b37c1f15521bdcfba310e 100644
--- a/src/main/java/net/minecraft/world/entity/ai/attributes/Attributes.java
+++ b/src/main/java/net/minecraft/world/entity/ai/attributes/Attributes.java
@@ -23,6 +23,6 @@ public class Attributes {
     public Attributes() {}
 
     private static Attribute register(String id, Attribute attribute) {
-        return (Attribute) Registry.register(BuiltInRegistries.ATTRIBUTE, id, attribute);
+        return Registry.register(BuiltInRegistries.ATTRIBUTE, id, attribute);
     }
 }
diff --git a/src/main/java/net/minecraft/world/entity/ai/behavior/BehaviorUtils.java b/src/main/java/net/minecraft/world/entity/ai/behavior/BehaviorUtils.java
index b9fcff8862e624644fdb73afcb3ef2106b0a76fc..f2b0b32302727a458a749c804184c06ccb503171 100644
--- a/src/main/java/net/minecraft/world/entity/ai/behavior/BehaviorUtils.java
+++ b/src/main/java/net/minecraft/world/entity/ai/behavior/BehaviorUtils.java
@@ -39,7 +39,7 @@ public class BehaviorUtils {
     public static boolean entityIsVisible(Brain<?> brain, LivingEntity target) {
         Optional<NearestVisibleLivingEntities> optional = brain.getMemory(MemoryModuleType.NEAREST_VISIBLE_LIVING_ENTITIES);
 
-        return optional.isPresent() && ((NearestVisibleLivingEntities) optional.get()).contains(target);
+        return optional.isPresent() && optional.get().contains(target);
     }
 
     public static boolean targetIsValid(Brain<?> brain, MemoryModuleType<? extends LivingEntity> memoryModuleType, EntityType<?> entityType) {
@@ -66,16 +66,16 @@ public class BehaviorUtils {
     private static void setWalkAndLookTargetMemoriesToEachOther(LivingEntity first, LivingEntity second, float speed) {
         boolean flag = true;
 
-        BehaviorUtils.setWalkAndLookTargetMemories(first, (Entity) second, speed, 2);
-        BehaviorUtils.setWalkAndLookTargetMemories(second, (Entity) first, speed, 2);
+        BehaviorUtils.setWalkAndLookTargetMemories(first, second, speed, 2);
+        BehaviorUtils.setWalkAndLookTargetMemories(second, first, speed, 2);
     }
 
     public static void setWalkAndLookTargetMemories(LivingEntity entity, Entity target, float speed, int completionRange) {
-        BehaviorUtils.setWalkAndLookTargetMemories(entity, (PositionTracker) (new EntityTracker(target, true)), speed, completionRange);
+        BehaviorUtils.setWalkAndLookTargetMemories(entity, new EntityTracker(target, true), speed, completionRange);
     }
 
     public static void setWalkAndLookTargetMemories(LivingEntity entity, BlockPos target, float speed, int completionRange) {
-        BehaviorUtils.setWalkAndLookTargetMemories(entity, (PositionTracker) (new BlockPosTracker(target)), speed, completionRange);
+        BehaviorUtils.setWalkAndLookTargetMemories(entity, new BlockPosTracker(target), speed, completionRange);
     }
 
     public static void setWalkAndLookTargetMemories(LivingEntity entity, PositionTracker target, float speed, int completionRange) {
@@ -119,7 +119,7 @@ public class BehaviorUtils {
         });
 
         Objects.requireNonNull(world);
-        return (SectionPos) stream.min(Comparator.comparingInt(world::sectionsToVillage)).orElse(center);
+        return stream.min(Comparator.comparingInt(world::sectionsToVillage)).orElse(center);
     }
 
     public static boolean isWithinAttackRange(Mob mob, LivingEntity target, int rangedWeaponReachReduction) {
@@ -131,7 +131,7 @@ public class BehaviorUtils {
             if (mob.canFireProjectileWeapon(itemprojectileweapon)) {
                 int j = itemprojectileweapon.getDefaultProjectileRange() - rangedWeaponReachReduction;
 
-                return mob.closerThan(target, (double) j);
+                return mob.closerThan(target, j);
             }
         }
 
@@ -144,7 +144,7 @@ public class BehaviorUtils {
         if (optional.isEmpty()) {
             return false;
         } else {
-            double d1 = source.distanceToSqr(((LivingEntity) optional.get()).position());
+            double d1 = source.distanceToSqr(optional.get().position());
             double d2 = source.distanceToSqr(target.position());
 
             return d2 > d1 + extraDistance * extraDistance;
@@ -154,11 +154,11 @@ public class BehaviorUtils {
     public static boolean canSee(LivingEntity source, LivingEntity target) {
         Brain<?> behaviorcontroller = source.getBrain();
 
-        return !behaviorcontroller.hasMemoryValue(MemoryModuleType.NEAREST_VISIBLE_LIVING_ENTITIES) ? false : ((NearestVisibleLivingEntities) behaviorcontroller.getMemory(MemoryModuleType.NEAREST_VISIBLE_LIVING_ENTITIES).get()).contains(target);
+        return !behaviorcontroller.hasMemoryValue(MemoryModuleType.NEAREST_VISIBLE_LIVING_ENTITIES) ? false : behaviorcontroller.getMemory(MemoryModuleType.NEAREST_VISIBLE_LIVING_ENTITIES).get().contains(target);
     }
 
     public static LivingEntity getNearestTarget(LivingEntity source, Optional<LivingEntity> first, LivingEntity second) {
-        return first.isEmpty() ? second : BehaviorUtils.getTargetNearestMe(source, (LivingEntity) first.get(), second);
+        return first.isEmpty() ? second : BehaviorUtils.getTargetNearestMe(source, first.get(), second);
     }
 
     public static LivingEntity getTargetNearestMe(LivingEntity source, LivingEntity first, LivingEntity second) {
diff --git a/src/main/java/net/minecraft/world/entity/ai/behavior/HarvestFarmland.java b/src/main/java/net/minecraft/world/entity/ai/behavior/HarvestFarmland.java
index 7ad71f2c139c2288b49d6b0fde3f8b8013f5e095..cf890fbb4b4aa50217e974c29a08bed948d684a0 100644
--- a/src/main/java/net/minecraft/world/entity/ai/behavior/HarvestFarmland.java
+++ b/src/main/java/net/minecraft/world/entity/ai/behavior/HarvestFarmland.java
@@ -67,7 +67,7 @@ public class HarvestFarmland extends Behavior<Villager> {
 
     @Nullable
     private BlockPos getValidFarmland(ServerLevel world) {
-        return this.validFarmlandAroundVillager.isEmpty() ? null : (BlockPos) this.validFarmlandAroundVillager.get(world.getRandom().nextInt(this.validFarmlandAroundVillager.size()));
+        return this.validFarmlandAroundVillager.isEmpty() ? null : this.validFarmlandAroundVillager.get(world.getRandom().nextInt(this.validFarmlandAroundVillager.size()));
     }
 
     private boolean validPos(BlockPos pos, ServerLevel world) {
@@ -145,7 +145,7 @@ public class HarvestFarmland extends Behavior<Villager> {
                         }
 
                         if (flag) {
-                            world.playSound((Player) null, (double) this.aboveFarmlandPos.getX(), (double) this.aboveFarmlandPos.getY(), (double) this.aboveFarmlandPos.getZ(), SoundEvents.CROP_PLANTED, SoundSource.BLOCKS, 1.0F, 1.0F);
+                            world.playSound(null, this.aboveFarmlandPos.getX(), this.aboveFarmlandPos.getY(), this.aboveFarmlandPos.getZ(), SoundEvents.CROP_PLANTED, SoundSource.BLOCKS, 1.0F, 1.0F);
                             itemstack.shrink(1);
                             if (itemstack.isEmpty()) {
                                 inventorysubcontainer.setItem(j, ItemStack.EMPTY);
diff --git a/src/main/java/net/minecraft/world/entity/ai/behavior/PrepareRamNearestTarget.java b/src/main/java/net/minecraft/world/entity/ai/behavior/PrepareRamNearestTarget.java
index bf29292ecb80d7ed54d0b73dfe98a969e215e2bb..5b4b7167925e941e45d0485594953c5df7c7f1e8 100644
--- a/src/main/java/net/minecraft/world/entity/ai/behavior/PrepareRamNearestTarget.java
+++ b/src/main/java/net/minecraft/world/entity/ai/behavior/PrepareRamNearestTarget.java
@@ -89,23 +89,23 @@ public class PrepareRamNearestTarget<E extends PathfinderMob> extends Behavior<E
     }
 
     protected boolean canStillUse(ServerLevel worldserver, PathfinderMob entitycreature, long i) {
-        return this.ramCandidate.isPresent() && ((PrepareRamNearestTarget.RamCandidate) this.ramCandidate.get()).getTarget().isAlive();
+        return this.ramCandidate.isPresent() && this.ramCandidate.get().getTarget().isAlive();
     }
 
     protected void tick(ServerLevel worldserver, E e0, long i) {
         if (!this.ramCandidate.isEmpty()) {
-            e0.getBrain().setMemory(MemoryModuleType.WALK_TARGET, (new WalkTarget(((PrepareRamNearestTarget.RamCandidate) this.ramCandidate.get()).getStartPosition(), this.walkSpeed, 0))); // CraftBukkit - decompile error
-            e0.getBrain().setMemory(MemoryModuleType.LOOK_TARGET, (new EntityTracker(((PrepareRamNearestTarget.RamCandidate) this.ramCandidate.get()).getTarget(), true))); // CraftBukkit - decompile error
-            boolean flag = !((PrepareRamNearestTarget.RamCandidate) this.ramCandidate.get()).getTarget().blockPosition().equals(((PrepareRamNearestTarget.RamCandidate) this.ramCandidate.get()).getTargetPosition());
+            e0.getBrain().setMemory(MemoryModuleType.WALK_TARGET, (new WalkTarget(this.ramCandidate.get().getStartPosition(), this.walkSpeed, 0))); // CraftBukkit - decompile error
+            e0.getBrain().setMemory(MemoryModuleType.LOOK_TARGET, (new EntityTracker(this.ramCandidate.get().getTarget(), true))); // CraftBukkit - decompile error
+            boolean flag = !this.ramCandidate.get().getTarget().blockPosition().equals(this.ramCandidate.get().getTargetPosition());
 
             if (flag) {
                 worldserver.broadcastEntityEvent(e0, (byte) 59);
                 e0.getNavigation().stop();
-                this.chooseRamPosition(e0, ((PrepareRamNearestTarget.RamCandidate) this.ramCandidate.get()).target);
+                this.chooseRamPosition(e0, this.ramCandidate.get().target);
             } else {
                 BlockPos blockposition = e0.blockPosition();
 
-                if (blockposition.equals(((PrepareRamNearestTarget.RamCandidate) this.ramCandidate.get()).getStartPosition())) {
+                if (blockposition.equals(this.ramCandidate.get().getStartPosition())) {
                     worldserver.broadcastEntityEvent(e0, (byte) 58);
                     if (this.reachedRamPositionTimestamp.isEmpty()) {
                         this.reachedRamPositionTimestamp = Optional.of(i);
@@ -124,8 +124,8 @@ public class PrepareRamNearestTarget<E extends PathfinderMob> extends Behavior<E
 
     private Vec3 getEdgeOfBlock(BlockPos start, BlockPos end) {
         double d0 = 0.5D;
-        double d1 = 0.5D * (double) Mth.sign((double) (end.getX() - start.getX()));
-        double d2 = 0.5D * (double) Mth.sign((double) (end.getZ() - start.getZ()));
+        double d1 = 0.5D * (double) Mth.sign(end.getX() - start.getX());
+        double d2 = 0.5D * (double) Mth.sign(end.getZ() - start.getZ());
 
         return Vec3.atBottomCenterOf(end).add(d1, 0.0D, d2);
     }
diff --git a/src/main/java/net/minecraft/world/entity/ai/behavior/RamTarget.java b/src/main/java/net/minecraft/world/entity/ai/behavior/RamTarget.java
index 1b10527ff30fefdaee00b850144eeb6d468b8133..6f33fd5e25a7e170cd90b61287e6f787d8c61317 100644
--- a/src/main/java/net/minecraft/world/entity/ai/behavior/RamTarget.java
+++ b/src/main/java/net/minecraft/world/entity/ai/behavior/RamTarget.java
@@ -80,12 +80,12 @@ public class RamTarget extends Behavior<Goat> {
             float h = livingEntity.isDamageSourceBlocked(DamageSource.mobAttack(entity)) ? 0.5F : 1.0F;
             livingEntity.knockback((double)(h * g) * this.getKnockbackForce.applyAsDouble(entity), this.ramDirection.x(), this.ramDirection.z(), entity); // Paper
             this.finishRam(world, entity);
-            world.playSound((Player)null, entity, this.getImpactSound.apply(entity), SoundSource.NEUTRAL, 1.0F, 1.0F);
+            world.playSound(null, entity, this.getImpactSound.apply(entity), SoundSource.NEUTRAL, 1.0F, 1.0F);
         } else if (this.hasRammedHornBreakingBlock(world, entity)) {
-            world.playSound((Player)null, entity, this.getImpactSound.apply(entity), SoundSource.NEUTRAL, 1.0F, 1.0F);
+            world.playSound(null, entity, this.getImpactSound.apply(entity), SoundSource.NEUTRAL, 1.0F, 1.0F);
             boolean bl = entity.dropHorn();
             if (bl) {
-                world.playSound((Player)null, entity, this.getHornBreakSound.apply(entity), SoundSource.NEUTRAL, 1.0F, 1.0F);
+                world.playSound(null, entity, this.getHornBreakSound.apply(entity), SoundSource.NEUTRAL, 1.0F, 1.0F);
             }
 
             this.finishRam(world, entity);
diff --git a/src/main/java/net/minecraft/world/entity/ai/behavior/ShufflingList.java b/src/main/java/net/minecraft/world/entity/ai/behavior/ShufflingList.java
index fe3ab3d388f0481fb0db06b7f730f868dbf8e8a5..a10cd746dc1193db2893d076b739362b2cd06e0c 100644
--- a/src/main/java/net/minecraft/world/entity/ai/behavior/ShufflingList.java
+++ b/src/main/java/net/minecraft/world/entity/ai/behavior/ShufflingList.java
@@ -87,7 +87,7 @@ public class ShufflingList<U> implements Iterable<U> {
         }
 
         void setRandom(float random) {
-            this.randWeight = -Math.pow((double)random, (double)(1.0F / (float)this.weight));
+            this.randWeight = -Math.pow(random, 1.0F / (float)this.weight);
         }
 
         public T getData() {
diff --git a/src/main/java/net/minecraft/world/entity/ai/behavior/SleepInBed.java b/src/main/java/net/minecraft/world/entity/ai/behavior/SleepInBed.java
index f41524fe8d67cb56d46b00c1d3a3f4363f651af7..4f703b8a3202caacd2d77d01217c5d1f142a118b 100644
--- a/src/main/java/net/minecraft/world/entity/ai/behavior/SleepInBed.java
+++ b/src/main/java/net/minecraft/world/entity/ai/behavior/SleepInBed.java
@@ -74,9 +74,8 @@ public class SleepInBed extends Behavior<LivingEntity> {
                     optional = Optional.empty();
                 }
 
-                InteractWithDoor.closeDoorsThatIHaveOpenedOrPassedThrough(world, entity, (Node)null, (Node)null, set, optional);
+                InteractWithDoor.closeDoorsThatIHaveOpenedOrPassedThrough(world, entity, null, null, set, optional);
             }
-
             entity.startSleeping(entity.getBrain().getMemory(MemoryModuleType.HOME).get().pos());
         }
 
diff --git a/src/main/java/net/minecraft/world/entity/ai/behavior/TryLaySpawnOnWaterNearLand.java b/src/main/java/net/minecraft/world/entity/ai/behavior/TryLaySpawnOnWaterNearLand.java
index 7e7b94efd7dd721be254c93dea2ccdfa67e4c18f..2bfd6a5bd8413c4a7b2af2c53454eeeee07c2146 100644
--- a/src/main/java/net/minecraft/world/entity/ai/behavior/TryLaySpawnOnWaterNearLand.java
+++ b/src/main/java/net/minecraft/world/entity/ai/behavior/TryLaySpawnOnWaterNearLand.java
@@ -25,7 +25,7 @@ public class TryLaySpawnOnWaterNearLand {
                                 BlockPos blockPos3 = blockPos2.above();
                                 if (world.getBlockState(blockPos3).isAir()) {
                                     world.setBlock(blockPos3, frogSpawn.defaultBlockState(), 3);
-                                    world.playSound((Player)null, entity, SoundEvents.FROG_LAY_SPAWN, SoundSource.BLOCKS, 1.0F, 1.0F);
+                                    world.playSound(null, entity, SoundEvents.FROG_LAY_SPAWN, SoundSource.BLOCKS, 1.0F, 1.0F);
                                     isPregnant.erase();
                                     return true;
                                 }
diff --git a/src/main/java/net/minecraft/world/entity/ai/behavior/VillagerMakeLove.java b/src/main/java/net/minecraft/world/entity/ai/behavior/VillagerMakeLove.java
index 18d137226c419a44de14d70494364b1cc04e5424..97e59fec75d3ca46b1570fa8c160741aceaace73 100644
--- a/src/main/java/net/minecraft/world/entity/ai/behavior/VillagerMakeLove.java
+++ b/src/main/java/net/minecraft/world/entity/ai/behavior/VillagerMakeLove.java
@@ -37,7 +37,7 @@ public class VillagerMakeLove extends Behavior<Villager> {
     }
 
     protected void start(ServerLevel worldserver, Villager entityvillager, long i) {
-        AgeableMob entityageable = (AgeableMob) entityvillager.getBrain().getMemory(MemoryModuleType.BREED_TARGET).get();
+        AgeableMob entityageable = entityvillager.getBrain().getMemory(MemoryModuleType.BREED_TARGET).get();
 
         BehaviorUtils.lockGazeAndWalkToEachOther(entityvillager, entityageable, 0.5F);
         worldserver.broadcastEntityEvent(entityageable, (byte) 18);
@@ -50,7 +50,7 @@ public class VillagerMakeLove extends Behavior<Villager> {
     protected void tick(ServerLevel world, Villager entity, long time) {
         Villager entityvillager1 = (Villager) entity.getBrain().getMemory(MemoryModuleType.BREED_TARGET).get();
 
-        if (entity.distanceToSqr((Entity) entityvillager1) <= 5.0D) {
+        if (entity.distanceToSqr(entityvillager1) <= 5.0D) {
             BehaviorUtils.lockGazeAndWalkToEachOther(entity, entityvillager1, 0.5F);
             if (time >= this.birthTimestamp) {
                 entity.eatAndDigestFood();
@@ -74,10 +74,10 @@ public class VillagerMakeLove extends Behavior<Villager> {
             Optional<Villager> optional1 = this.breed(world, first, second);
 
             if (optional1.isPresent()) {
-                this.giveBedToChild(world, (Villager) optional1.get(), (BlockPos) optional.get());
+                this.giveBedToChild(world, optional1.get(), optional.get());
             } else {
-                world.getPoiManager().release((BlockPos) optional.get());
-                DebugPackets.sendPoiTicketCountPacket(world, (BlockPos) optional.get());
+                world.getPoiManager().release(optional.get());
+                DebugPackets.sendPoiTicketCountPacket(world, optional.get());
             }
         }
 
@@ -93,7 +93,7 @@ public class VillagerMakeLove extends Behavior<Villager> {
             return entityageable.getType() == EntityType.VILLAGER;
         });
 
-        return optional.isEmpty() ? false : BehaviorUtils.targetIsValid(behaviorcontroller, MemoryModuleType.BREED_TARGET, EntityType.VILLAGER) && villager.canBreed() && ((AgeableMob) optional.get()).canBreed();
+        return optional.isEmpty() ? false : BehaviorUtils.targetIsValid(behaviorcontroller, MemoryModuleType.BREED_TARGET, EntityType.VILLAGER) && villager.canBreed() && optional.get().canBreed();
     }
 
     private Optional<BlockPos> takeVacantBed(ServerLevel world, Villager villager) {
@@ -105,7 +105,7 @@ public class VillagerMakeLove extends Behavior<Villager> {
     }
 
     private boolean canReach(Villager villager, BlockPos pos, Holder<PoiType> poiType) {
-        Path pathentity = villager.getNavigation().createPath(pos, ((PoiType) poiType.value()).validRange());
+        Path pathentity = villager.getNavigation().createPath(pos, poiType.value().validRange());
 
         return pathentity != null && pathentity.canReach();
     }
diff --git a/src/main/java/net/minecraft/world/entity/ai/behavior/WorkAtComposter.java b/src/main/java/net/minecraft/world/entity/ai/behavior/WorkAtComposter.java
index 915fda62af3ab94d3cfa5834a9659157c019fb51..47b44d4b4898503f828e3d0d38d3ef357bad16f4 100644
--- a/src/main/java/net/minecraft/world/entity/ai/behavior/WorkAtComposter.java
+++ b/src/main/java/net/minecraft/world/entity/ai/behavior/WorkAtComposter.java
@@ -27,7 +27,7 @@ public class WorkAtComposter extends WorkAtPoi {
         Optional<GlobalPos> optional = entity.getBrain().getMemory(MemoryModuleType.JOB_SITE);
 
         if (optional.isPresent()) {
-            GlobalPos globalpos = (GlobalPos) optional.get();
+            GlobalPos globalpos = optional.get();
             BlockState iblockdata = world.getBlockState(globalpos.pos());
 
             if (iblockdata.is(Blocks.COMPOSTER)) {
@@ -41,7 +41,7 @@ public class WorkAtComposter extends WorkAtPoi {
     private void compostItems(ServerLevel world, Villager entity, GlobalPos pos, BlockState composterState) {
         BlockPos blockposition = pos.pos();
 
-        if (((Integer) composterState.getValue(ComposterBlock.LEVEL)).intValue() == 8) {
+        if (composterState.getValue(ComposterBlock.LEVEL).intValue() == 8) {
             composterState = ComposterBlock.extractProduce(composterState, world, blockposition, entity); // CraftBukkit
         }
 
@@ -68,7 +68,7 @@ public class WorkAtComposter extends WorkAtPoi {
 
                     for (int l1 = 0; l1 < k1; ++l1) {
                         iblockdata1 = ComposterBlock.insertItem(iblockdata1, world, itemstack, blockposition, entity); // CraftBukkit
-                        if (((Integer) iblockdata1.getValue(ComposterBlock.LEVEL)).intValue() == 7) {
+                        if (iblockdata1.getValue(ComposterBlock.LEVEL).intValue() == 7) {
                             this.spawnComposterFillEffects(world, composterState, blockposition, iblockdata1);
                             return;
                         }
diff --git a/src/main/java/net/minecraft/world/entity/ai/goal/FollowOwnerGoal.java b/src/main/java/net/minecraft/world/entity/ai/goal/FollowOwnerGoal.java
index 11a101e8ff05fbda5e84018358be02014ca01854..8bbdc5210c7e82870434b247034a49cddd6246ca 100644
--- a/src/main/java/net/minecraft/world/entity/ai/goal/FollowOwnerGoal.java
+++ b/src/main/java/net/minecraft/world/entity/ai/goal/FollowOwnerGoal.java
@@ -60,7 +60,7 @@ public class FollowOwnerGoal extends Goal {
             return false;
         } else if (this.tamable.isOrderedToSit()) {
             return false;
-        } else if (this.tamable.distanceToSqr((Entity) entityliving) < (double) (this.startDistance * this.startDistance)) {
+        } else if (this.tamable.distanceToSqr(entityliving) < (double) (this.startDistance * this.startDistance)) {
             return false;
         } else {
             this.owner = entityliving;
@@ -70,7 +70,7 @@ public class FollowOwnerGoal extends Goal {
 
     @Override
     public boolean canContinueToUse() {
-        return this.navigation.isDone() ? false : (this.tamable.isOrderedToSit() ? false : this.tamable.distanceToSqr((Entity) this.owner) > (double) (this.stopDistance * this.stopDistance));
+        return this.navigation.isDone() ? false : (this.tamable.isOrderedToSit() ? false : this.tamable.distanceToSqr(this.owner) > (double) (this.stopDistance * this.stopDistance));
     }
 
     @Override
@@ -93,10 +93,10 @@ public class FollowOwnerGoal extends Goal {
         if (--this.timeToRecalcPath <= 0) {
             this.timeToRecalcPath = this.adjustedTickDelay(10);
             if (!this.tamable.isLeashed() && !this.tamable.isPassenger()) {
-                if (this.tamable.distanceToSqr((Entity) this.owner) >= 144.0D) {
+                if (this.tamable.distanceToSqr(this.owner) >= 144.0D) {
                     this.teleportToOwner();
                 } else {
-                    this.navigation.moveTo((Entity) this.owner, this.speedModifier);
+                    this.navigation.moveTo(this.owner, this.speedModifier);
                 }
 
             }
@@ -127,7 +127,7 @@ public class FollowOwnerGoal extends Goal {
         } else {
             // CraftBukkit start
             CraftEntity entity = this.tamable.getBukkitEntity();
-            Location to = new Location(entity.getWorld(), (double) x + 0.5D, (double) y, (double) z + 0.5D, this.tamable.getYRot(), this.tamable.getXRot());
+            Location to = new Location(entity.getWorld(), (double) x + 0.5D, y, (double) z + 0.5D, this.tamable.getYRot(), this.tamable.getXRot());
             EntityTeleportEvent event = new EntityTeleportEvent(entity, entity.getLocation(), to);
             this.tamable.level.getCraftServer().getPluginManager().callEvent(event);
             if (event.isCancelled()) {
diff --git a/src/main/java/net/minecraft/world/entity/ai/goal/MoveToBlockGoal.java b/src/main/java/net/minecraft/world/entity/ai/goal/MoveToBlockGoal.java
index 26bf383caea68834c654b25653ced9017f1b1b22..800b488337b7a678c2b6d868dbbfcb8e6f6711c6 100644
--- a/src/main/java/net/minecraft/world/entity/ai/goal/MoveToBlockGoal.java
+++ b/src/main/java/net/minecraft/world/entity/ai/goal/MoveToBlockGoal.java
@@ -68,7 +68,7 @@ public abstract class MoveToBlockGoal extends Goal {
     }
 
     protected void moveMobToBlock() {
-        this.mob.getNavigation().moveTo((double)((float)this.blockPos.getX()) + 0.5D, (double)(this.blockPos.getY() + 1), (double)((float)this.blockPos.getZ()) + 0.5D, this.speedModifier);
+        this.mob.getNavigation().moveTo((double)((float)this.blockPos.getX()) + 0.5D, this.blockPos.getY() + 1, (double)((float)this.blockPos.getZ()) + 0.5D, this.speedModifier);
     }
 
     public double acceptedDistance() {
@@ -91,7 +91,7 @@ public abstract class MoveToBlockGoal extends Goal {
             this.reachedTarget = false;
             ++this.tryTicks;
             if (this.shouldRecalculatePath()) {
-                this.mob.getNavigation().moveTo((double)((float)blockPos.getX()) + 0.5D, (double)blockPos.getY(), (double)((float)blockPos.getZ()) + 0.5D, this.speedModifier);
+                this.mob.getNavigation().moveTo((double)((float)blockPos.getX()) + 0.5D, blockPos.getY(), (double)((float)blockPos.getZ()) + 0.5D, this.speedModifier);
             }
         } else {
             this.reachedTarget = true;
diff --git a/src/main/java/net/minecraft/world/entity/ai/goal/PanicGoal.java b/src/main/java/net/minecraft/world/entity/ai/goal/PanicGoal.java
index 268b7457c2a93af6d36c1c5f623c5856f94a7af1..4fabe818f61890c0b338cc931179b0a4e2b00cca 100644
--- a/src/main/java/net/minecraft/world/entity/ai/goal/PanicGoal.java
+++ b/src/main/java/net/minecraft/world/entity/ai/goal/PanicGoal.java
@@ -36,9 +36,9 @@ public class PanicGoal extends Goal {
                 BlockPos blockposition = this.lookForWater(this.mob.level, this.mob, 5);
 
                 if (blockposition != null) {
-                    this.posX = (double) blockposition.getX();
-                    this.posY = (double) blockposition.getY();
-                    this.posZ = (double) blockposition.getZ();
+                    this.posX = blockposition.getX();
+                    this.posY = blockposition.getY();
+                    this.posZ = blockposition.getZ();
                     return true;
                 }
             }
@@ -83,7 +83,7 @@ public class PanicGoal extends Goal {
     public boolean canContinueToUse() {
         // CraftBukkit start - introduce a temporary timeout hack until this is fixed properly
         if ((this.mob.tickCount - this.mob.lastHurtByMobTimestamp) > 100) {
-            this.mob.setLastHurtByMob((LivingEntity) null);
+            this.mob.setLastHurtByMob(null);
             return false;
         }
         // CraftBukkit end
@@ -94,7 +94,7 @@ public class PanicGoal extends Goal {
     protected BlockPos lookForWater(BlockGetter world, Entity entity, int rangeX) {
         BlockPos blockposition = entity.blockPosition();
 
-        return !world.getBlockState(blockposition).getCollisionShape(world, blockposition).isEmpty() ? null : (BlockPos) BlockPos.findClosestMatch(entity.blockPosition(), rangeX, 1, (blockposition1) -> {
+        return !world.getBlockState(blockposition).getCollisionShape(world, blockposition).isEmpty() ? null : BlockPos.findClosestMatch(entity.blockPosition(), rangeX, 1, (blockposition1) -> {
             return world.getFluidState(blockposition1).is(FluidTags.WATER);
         }).orElse(null); // CraftBukkit - decompile error
     }
diff --git a/src/main/java/net/minecraft/world/entity/ai/goal/RemoveBlockGoal.java b/src/main/java/net/minecraft/world/entity/ai/goal/RemoveBlockGoal.java
index bd0cbf4390fc7d00b4bd5008cdf8f6f49df4f69b..7f6402a9e0a39a4f88c92af3bc545c8e28726ce7 100644
--- a/src/main/java/net/minecraft/world/entity/ai/goal/RemoveBlockGoal.java
+++ b/src/main/java/net/minecraft/world/entity/ai/goal/RemoveBlockGoal.java
@@ -106,7 +106,7 @@ public class RemoveBlockGoal extends MoveToBlockGoal {
             if (this.ticksSinceReachedGoal > 60) {
                 // CraftBukkit start - Step on eggs
                 EntityInteractEvent event = new EntityInteractEvent(this.removerMob.getBukkitEntity(), CraftBlock.at(world, blockposition1));
-                world.getCraftServer().getPluginManager().callEvent((EntityInteractEvent) event);
+                world.getCraftServer().getPluginManager().callEvent(event);
 
                 if (event.isCancelled()) {
                     return;
@@ -119,7 +119,7 @@ public class RemoveBlockGoal extends MoveToBlockGoal {
                         double d1 = randomsource.nextGaussian() * 0.02D;
                         double d2 = randomsource.nextGaussian() * 0.02D;
 
-                        ((ServerLevel) world).sendParticles(ParticleTypes.POOF, (double) blockposition1.getX() + 0.5D, (double) blockposition1.getY(), (double) blockposition1.getZ() + 0.5D, 1, d0, d1, d2, 0.15000000596046448D);
+                        ((ServerLevel) world).sendParticles(ParticleTypes.POOF, (double) blockposition1.getX() + 0.5D, blockposition1.getY(), (double) blockposition1.getZ() + 0.5D, 1, d0, d1, d2, 0.15000000596046448D);
                     }
 
                     this.playBreakSound(world, blockposition1);
diff --git a/src/main/java/net/minecraft/world/entity/ai/goal/RunAroundLikeCrazyGoal.java b/src/main/java/net/minecraft/world/entity/ai/goal/RunAroundLikeCrazyGoal.java
index 5c64905e90ccca6e0b347241ddf9cc3f71058b8e..a810b097dbd497d50cd58a5033031cef85505cd3 100644
--- a/src/main/java/net/minecraft/world/entity/ai/goal/RunAroundLikeCrazyGoal.java
+++ b/src/main/java/net/minecraft/world/entity/ai/goal/RunAroundLikeCrazyGoal.java
@@ -52,7 +52,7 @@ public class RunAroundLikeCrazyGoal extends Goal {
     @Override
     public void tick() {
         if (!this.horse.isTamed() && this.horse.getRandom().nextInt(this.adjustedTickDelay(50)) == 0) {
-            Entity entity = (Entity) this.horse.getPassengers().get(0);
+            Entity entity = this.horse.getPassengers().get(0);
 
             if (entity == null) {
                 return;
diff --git a/src/main/java/net/minecraft/world/entity/ai/goal/SitWhenOrderedToGoal.java b/src/main/java/net/minecraft/world/entity/ai/goal/SitWhenOrderedToGoal.java
index aad20520dbbb6295ae9dc70520bc4ad06fd259f3..533210e8ad069787165e8f1802dd6c645bfbe46e 100644
--- a/src/main/java/net/minecraft/world/entity/ai/goal/SitWhenOrderedToGoal.java
+++ b/src/main/java/net/minecraft/world/entity/ai/goal/SitWhenOrderedToGoal.java
@@ -30,7 +30,7 @@ public class SitWhenOrderedToGoal extends Goal {
         } else {
             LivingEntity entityliving = this.mob.getOwner();
 
-            return entityliving == null ? true : (this.mob.distanceToSqr((Entity) entityliving) < 144.0D && entityliving.getLastHurtByMob() != null ? false : this.mob.isOrderedToSit());
+            return entityliving == null ? true : (this.mob.distanceToSqr(entityliving) < 144.0D && entityliving.getLastHurtByMob() != null ? false : this.mob.isOrderedToSit());
         }
     }
 
diff --git a/src/main/java/net/minecraft/world/entity/ai/goal/TemptGoal.java b/src/main/java/net/minecraft/world/entity/ai/goal/TemptGoal.java
index 79bb13c5614bab1f0749c5f8f57f762c6216c564..3090505ae5e6896684222c06fa4f00a90f48074f 100644
--- a/src/main/java/net/minecraft/world/entity/ai/goal/TemptGoal.java
+++ b/src/main/java/net/minecraft/world/entity/ai/goal/TemptGoal.java
@@ -68,7 +68,7 @@ public class TemptGoal extends Goal {
     @Override
     public boolean canContinueToUse() {
         if (this.canScare()) {
-            if (this.mob.distanceToSqr((Entity) this.player) < 36.0D) {
+            if (this.mob.distanceToSqr(this.player) < 36.0D) {
                 if (this.player.distanceToSqr(this.px, this.py, this.pz) > 0.010000000000000002D) {
                     return false;
                 }
@@ -82,8 +82,8 @@ public class TemptGoal extends Goal {
                 this.pz = this.player.getZ();
             }
 
-            this.pRotX = (double) this.player.getXRot();
-            this.pRotY = (double) this.player.getYRot();
+            this.pRotX = this.player.getXRot();
+            this.pRotY = this.player.getYRot();
         }
 
         return this.canUse();
@@ -112,10 +112,10 @@ public class TemptGoal extends Goal {
     @Override
     public void tick() {
         this.mob.getLookControl().setLookAt(this.player, (float) (this.mob.getMaxHeadYRot() + 20), (float) this.mob.getMaxHeadXRot());
-        if (this.mob.distanceToSqr((Entity) this.player) < 6.25D) {
+        if (this.mob.distanceToSqr(this.player) < 6.25D) {
             this.mob.getNavigation().stop();
         } else {
-            this.mob.getNavigation().moveTo((Entity) this.player, this.speedModifier);
+            this.mob.getNavigation().moveTo(this.player, this.speedModifier);
         }
 
     }
diff --git a/src/main/java/net/minecraft/world/entity/ai/goal/target/HurtByTargetGoal.java b/src/main/java/net/minecraft/world/entity/ai/goal/target/HurtByTargetGoal.java
index 39ea15c7577af186d93d4ad9a48034d746a86fc8..fb7e793aeb18dc25c968eb129fb85e3500d43b72 100644
--- a/src/main/java/net/minecraft/world/entity/ai/goal/target/HurtByTargetGoal.java
+++ b/src/main/java/net/minecraft/world/entity/ai/goal/target/HurtByTargetGoal.java
@@ -87,7 +87,7 @@ public class HurtByTargetGoal extends TargetGoal {
         while (iterator.hasNext()) {
             Mob entityinsentient = (Mob) iterator.next();
 
-            if (this.mob != entityinsentient && entityinsentient.getTarget() == null && (!(this.mob instanceof TamableAnimal) || ((TamableAnimal) this.mob).getOwner() == ((TamableAnimal) entityinsentient).getOwner()) && !entityinsentient.isAlliedTo((Entity) this.mob.getLastHurtByMob())) {
+            if (this.mob != entityinsentient && entityinsentient.getTarget() == null && (!(this.mob instanceof TamableAnimal) || ((TamableAnimal) this.mob).getOwner() == ((TamableAnimal) entityinsentient).getOwner()) && !entityinsentient.isAlliedTo(this.mob.getLastHurtByMob())) {
                 if (this.toIgnoreAlert != null) {
                     boolean flag = false;
                     Class[] aclass = this.toIgnoreAlert;
diff --git a/src/main/java/net/minecraft/world/entity/ai/goal/target/NearestAttackableTargetGoal.java b/src/main/java/net/minecraft/world/entity/ai/goal/target/NearestAttackableTargetGoal.java
index 7f4fb6ad4b3b3da52a111b0c58499f27d8443124..2f26adea26eaa058b2e4724734c75d884fa68d33 100644
--- a/src/main/java/net/minecraft/world/entity/ai/goal/target/NearestAttackableTargetGoal.java
+++ b/src/main/java/net/minecraft/world/entity/ai/goal/target/NearestAttackableTargetGoal.java
@@ -21,7 +21,7 @@ public class NearestAttackableTargetGoal<T extends LivingEntity> extends TargetG
     protected TargetingConditions targetConditions;
 
     public NearestAttackableTargetGoal(Mob mob, Class<T> targetClass, boolean checkVisibility) {
-        this(mob, targetClass, 10, checkVisibility, false, (Predicate) null);
+        this(mob, targetClass, 10, checkVisibility, false, null);
     }
 
     public NearestAttackableTargetGoal(Mob mob, Class<T> targetClass, boolean checkVisibility, Predicate<LivingEntity> targetPredicate) {
@@ -29,7 +29,7 @@ public class NearestAttackableTargetGoal<T extends LivingEntity> extends TargetG
     }
 
     public NearestAttackableTargetGoal(Mob mob, Class<T> targetClass, boolean checkVisibility, boolean checkCanNavigate) {
-        this(mob, targetClass, 10, checkVisibility, checkCanNavigate, (Predicate) null);
+        this(mob, targetClass, 10, checkVisibility, checkCanNavigate, null);
     }
 
     public NearestAttackableTargetGoal(Mob mob, Class<T> targetClass, int reciprocalChance, boolean checkVisibility, boolean checkCanNavigate, @Nullable Predicate<LivingEntity> targetPredicate) {
diff --git a/src/main/java/net/minecraft/world/entity/ai/goal/target/TargetGoal.java b/src/main/java/net/minecraft/world/entity/ai/goal/target/TargetGoal.java
index c9e6c2d0976bde92a94ae912e488ec30f250df55..0afb715778307873b0e25792d3fe8396ba5e2287 100644
--- a/src/main/java/net/minecraft/world/entity/ai/goal/target/TargetGoal.java
+++ b/src/main/java/net/minecraft/world/entity/ai/goal/target/TargetGoal.java
@@ -59,7 +59,7 @@ public abstract class TargetGoal extends Goal {
             } else {
                 double d0 = this.getFollowDistance();
 
-                if (this.mob.distanceToSqr((Entity) entityliving) > d0 * d0) {
+                if (this.mob.distanceToSqr(entityliving) > d0 * d0) {
                     return false;
                 } else {
                     if (this.mustSee) {
@@ -90,7 +90,7 @@ public abstract class TargetGoal extends Goal {
 
     @Override
     public void stop() {
-        this.mob.setTarget((LivingEntity) null, EntityTargetEvent.TargetReason.FORGOT_TARGET, true); // CraftBukkit
+        this.mob.setTarget(null, EntityTargetEvent.TargetReason.FORGOT_TARGET, true); // CraftBukkit
         this.targetMob = null;
     }
 
@@ -122,7 +122,7 @@ public abstract class TargetGoal extends Goal {
 
     private boolean canReach(LivingEntity entity) {
         this.reachCacheTime = reducedTickDelay(10 + this.mob.getRandom().nextInt(5));
-        Path pathentity = this.mob.getNavigation().createPath((Entity) entity, 0);
+        Path pathentity = this.mob.getNavigation().createPath(entity, 0);
 
         if (pathentity == null) {
             return false;
diff --git a/src/main/java/net/minecraft/world/entity/ai/gossip/GossipContainer.java b/src/main/java/net/minecraft/world/entity/ai/gossip/GossipContainer.java
index 171d1e9d71117519c2ff0a017d68ce578bc72cc2..0f658dcf145fd14caf1ce4258916af29187ce6e4 100644
--- a/src/main/java/net/minecraft/world/entity/ai/gossip/GossipContainer.java
+++ b/src/main/java/net/minecraft/world/entity/ai/gossip/GossipContainer.java
@@ -124,7 +124,7 @@ public class GossipContainer {
 
     public long getCountForType(GossipType type, DoublePredicate predicate) {
         return this.gossips.values().stream().filter((reputation) -> {
-            return predicate.test((double)(reputation.entries.getOrDefault(type, 0) * type.weight));
+            return predicate.test(reputation.entries.getOrDefault(type, 0) * type.weight);
         }).count();
     }
 
diff --git a/src/main/java/net/minecraft/world/entity/ai/navigation/GroundPathNavigation.java b/src/main/java/net/minecraft/world/entity/ai/navigation/GroundPathNavigation.java
index 7e91aa0b2f8583f539f96121d2020812bcc99ee4..31264af40f11644da64ec98cacd6b0db7974fd57 100644
--- a/src/main/java/net/minecraft/world/entity/ai/navigation/GroundPathNavigation.java
+++ b/src/main/java/net/minecraft/world/entity/ai/navigation/GroundPathNavigation.java
@@ -37,7 +37,7 @@ public class GroundPathNavigation extends PathNavigation {
 
     @Override
     protected Vec3 getTempMobPos() {
-        return new Vec3(this.mob.getX(), (double)this.getSurfaceY(), this.mob.getZ());
+        return new Vec3(this.mob.getX(), this.getSurfaceY(), this.mob.getZ());
     }
 
     @Override
@@ -77,12 +77,12 @@ public class GroundPathNavigation extends PathNavigation {
     private int getSurfaceY() {
         if (this.mob.isInWater() && this.canFloat()) {
             int i = this.mob.getBlockY();
-            BlockState blockState = this.level.getBlockState(new BlockPos(this.mob.getX(), (double)i, this.mob.getZ()));
+            BlockState blockState = this.level.getBlockState(new BlockPos(this.mob.getX(), i, this.mob.getZ()));
             int j = 0;
 
             while(blockState.is(Blocks.WATER)) {
                 ++i;
-                blockState = this.level.getBlockState(new BlockPos(this.mob.getX(), (double)i, this.mob.getZ()));
+                blockState = this.level.getBlockState(new BlockPos(this.mob.getX(), i, this.mob.getZ()));
                 ++j;
                 if (j > 16) {
                     return this.mob.getBlockY();
diff --git a/src/main/java/net/minecraft/world/entity/ai/navigation/PathNavigation.java b/src/main/java/net/minecraft/world/entity/ai/navigation/PathNavigation.java
index 323b54adfcc6f3300cfe188d89c233ce974caf9b..1b9abe61f026e673b28c8493017bb9941d51c0ce 100644
--- a/src/main/java/net/minecraft/world/entity/ai/navigation/PathNavigation.java
+++ b/src/main/java/net/minecraft/world/entity/ai/navigation/PathNavigation.java
@@ -436,7 +436,7 @@ public abstract class PathNavigation {
         } else if (this.path != null && !this.path.isDone() && this.path.getNodeCount() != 0) {
             Node node = this.path.getEndNode();
             Vec3 vec3 = new Vec3(((double)node.x + this.mob.getX()) / 2.0D, ((double)node.y + this.mob.getY()) / 2.0D, ((double)node.z + this.mob.getZ()) / 2.0D);
-            return pos.closerToCenterThan(vec3, (double)(this.path.getNodeCount() - this.path.getNextNodeIndex()));
+            return pos.closerToCenterThan(vec3, this.path.getNodeCount() - this.path.getNextNodeIndex());
         } else {
             return false;
         }
diff --git a/src/main/java/net/minecraft/world/entity/ai/navigation/WallClimberNavigation.java b/src/main/java/net/minecraft/world/entity/ai/navigation/WallClimberNavigation.java
index de1f178fa18ae3ff3c73bc59b10eb39857800bf9..74b9a9c5d27ffec37a1fd9836787f1cac6c228fc 100644
--- a/src/main/java/net/minecraft/world/entity/ai/navigation/WallClimberNavigation.java
+++ b/src/main/java/net/minecraft/world/entity/ai/navigation/WallClimberNavigation.java
@@ -45,8 +45,8 @@ public class WallClimberNavigation extends GroundPathNavigation {
             super.tick();
         } else {
             if (this.pathToPosition != null) {
-                if (!this.pathToPosition.closerToCenterThan(this.mob.position(), (double)this.mob.getBbWidth()) && (!(this.mob.getY() > (double)this.pathToPosition.getY()) || !(new BlockPos((double)this.pathToPosition.getX(), this.mob.getY(), (double)this.pathToPosition.getZ())).closerToCenterThan(this.mob.position(), (double)this.mob.getBbWidth()))) {
-                    this.mob.getMoveControl().setWantedPosition((double)this.pathToPosition.getX(), (double)this.pathToPosition.getY(), (double)this.pathToPosition.getZ(), this.speedModifier);
+                if (!this.pathToPosition.closerToCenterThan(this.mob.position(), this.mob.getBbWidth()) && (!(this.mob.getY() > (double)this.pathToPosition.getY()) || !(new BlockPos(this.pathToPosition.getX(), this.mob.getY(), this.pathToPosition.getZ())).closerToCenterThan(this.mob.position(), this.mob.getBbWidth()))) {
+                    this.mob.getMoveControl().setWantedPosition(this.pathToPosition.getX(), this.pathToPosition.getY(), this.pathToPosition.getZ(), this.speedModifier);
                 } else {
                     this.pathToPosition = null;
                 }
diff --git a/src/main/java/net/minecraft/world/entity/ai/sensing/Sensor.java b/src/main/java/net/minecraft/world/entity/ai/sensing/Sensor.java
index 1d38fb2a49d2364ecb2a68b3887f07088e6b564f..6c69263697fbbfb69c459eef1b5fffe71ca37f71 100644
--- a/src/main/java/net/minecraft/world/entity/ai/sensing/Sensor.java
+++ b/src/main/java/net/minecraft/world/entity/ai/sensing/Sensor.java
@@ -36,7 +36,7 @@ public abstract class Sensor<E extends LivingEntity> {
         this.timing = co.aikar.timings.MinecraftTimings.getSensorTimings(configKey, senseInterval);
         // Paper end
         this.scanRate = senseInterval;
-        this.timeToTick = (long)RANDOM.nextInt(senseInterval);
+        this.timeToTick = RANDOM.nextInt(senseInterval);
     }
 
     public Sensor() {
diff --git a/src/main/java/net/minecraft/world/entity/ai/sensing/TemptingSensor.java b/src/main/java/net/minecraft/world/entity/ai/sensing/TemptingSensor.java
index e3242cf9a6ad51a23c5781142198dec30c8f376d..9c5fef6a0d6a1597c13ef63ad39f0bef5adddf7f 100644
--- a/src/main/java/net/minecraft/world/entity/ai/sensing/TemptingSensor.java
+++ b/src/main/java/net/minecraft/world/entity/ai/sensing/TemptingSensor.java
@@ -46,10 +46,10 @@ public class TemptingSensor extends Sensor<PathfinderMob> {
         });
 
         Objects.requireNonNull(entity);
-        List<Player> list = (List) stream.sorted(Comparator.comparingDouble(entity::distanceToSqr)).collect(Collectors.toList());
+        List<Player> list = stream.sorted(Comparator.comparingDouble(entity::distanceToSqr)).collect(Collectors.toList());
 
         if (!list.isEmpty()) {
-            Player entityhuman = (Player) list.get(0);
+            Player entityhuman = list.get(0);
 
             // CraftBukkit start
             EntityTargetLivingEntityEvent event = CraftEventFactory.callEntityTargetLivingEvent(entity, entityhuman, EntityTargetEvent.TargetReason.TEMPT);
diff --git a/src/main/java/net/minecraft/world/entity/ai/village/VillageSiege.java b/src/main/java/net/minecraft/world/entity/ai/village/VillageSiege.java
index fed09b886f4fa0006d160e5f2abb00dfee45434d..88a0bf2a96afb923a3a4550c506f31a3553dcbf7 100644
--- a/src/main/java/net/minecraft/world/entity/ai/village/VillageSiege.java
+++ b/src/main/java/net/minecraft/world/entity/ai/village/VillageSiege.java
@@ -115,7 +115,7 @@ public class VillageSiege implements CustomSpawner {
 
             try {
                 entityzombie = new Zombie(world);
-                entityzombie.finalizeSpawn(world, world.getCurrentDifficultyAt(entityzombie.blockPosition()), MobSpawnType.EVENT, (SpawnGroupData) null, (CompoundTag) null);
+                entityzombie.finalizeSpawn(world, world.getCurrentDifficultyAt(entityzombie.blockPosition()), MobSpawnType.EVENT, null, null);
             } catch (Exception exception) {
                 VillageSiege.LOGGER.warn("Failed to create zombie for village siege at {}", vec3d, exception);
                 com.destroystokyo.paper.exception.ServerInternalException.reportInternalException(exception); // Paper
diff --git a/src/main/java/net/minecraft/world/entity/ai/village/poi/PoiSection.java b/src/main/java/net/minecraft/world/entity/ai/village/poi/PoiSection.java
index 6e5d76d8c3f7f2fadd3d162f7a88223c5e784c1a..5079082c2b76096b954c42cb635f21a711f4acfb 100644
--- a/src/main/java/net/minecraft/world/entity/ai/village/poi/PoiSection.java
+++ b/src/main/java/net/minecraft/world/entity/ai/village/poi/PoiSection.java
@@ -100,7 +100,7 @@ public class PoiSection {
     public void remove(BlockPos pos) {
         PoiRecord poiRecord = this.records.remove(SectionPos.sectionRelativePos(pos));
         if (poiRecord == null) {
-            LOGGER.error("POI data mismatch: never registered at {}", (Object)pos);
+            LOGGER.error("POI data mismatch: never registered at {}", pos);
         } else {
             this.byType.get(poiRecord.getPoiType()).remove(poiRecord);
             LOGGER.debug("Removed POI of type {} @ {}", LogUtils.defer(poiRecord::getPoiType), LogUtils.defer(poiRecord::getPos));
@@ -118,7 +118,7 @@ public class PoiSection {
     public boolean release(BlockPos pos) {
         PoiRecord poiRecord = this.records.get(SectionPos.sectionRelativePos(pos));
         if (poiRecord == null) {
-            throw (IllegalStateException)Util.pauseInIde(new IllegalStateException("POI never registered at " + pos));
+            throw Util.pauseInIde(new IllegalStateException("POI never registered at " + pos));
         } else {
             boolean bl = poiRecord.releaseTicket();
             this.setDirty.run();
diff --git a/src/main/java/net/minecraft/world/entity/ambient/Bat.java b/src/main/java/net/minecraft/world/entity/ambient/Bat.java
index f85ad0164c0ebda2c902cba383a4d6ec766b0b3e..580c474d8d2def89d3f3e98a4644b7a74b64f5be 100644
--- a/src/main/java/net/minecraft/world/entity/ambient/Bat.java
+++ b/src/main/java/net/minecraft/world/entity/ambient/Bat.java
@@ -100,11 +100,11 @@ public class Bat extends AmbientCreature {
     }
 
     public boolean isResting() {
-        return (((Byte) this.entityData.get(Bat.DATA_ID_FLAGS)).intValue() & 1) != 0;
+        return (this.entityData.get(Bat.DATA_ID_FLAGS).intValue() & 1) != 0;
     }
 
     public void setResting(boolean roosting) {
-        byte b0 = ((Byte) this.entityData.get(Bat.DATA_ID_FLAGS)).byteValue();
+        byte b0 = this.entityData.get(Bat.DATA_ID_FLAGS).byteValue();
 
         if (roosting) {
             this.entityData.set(Bat.DATA_ID_FLAGS, Byte.valueOf((byte) (b0 | 1)));
@@ -145,7 +145,7 @@ public class Bat extends AmbientCreature {
                     if (CraftEventFactory.handleBatToggleSleepEvent(this, true)) {
                         this.setResting(false);
                         if (!flag) {
-                            this.level.levelEvent((Player) null, 1025, blockposition, 0);
+                            this.level.levelEvent(null, 1025, blockposition, 0);
                         }
                     }
                     // CraftBukkit End
@@ -155,7 +155,7 @@ public class Bat extends AmbientCreature {
                 if (CraftEventFactory.handleBatToggleSleepEvent(this, true)) {
                     this.setResting(false);
                     if (!flag) {
-                        this.level.levelEvent((Player) null, 1025, blockposition, 0);
+                        this.level.levelEvent(null, 1025, blockposition, 0);
                     }
                 }
                 // CraftBukkit End - Call BatToggleSleepEvent
@@ -236,7 +236,7 @@ public class Bat extends AmbientCreature {
     @Override
     public void addAdditionalSaveData(CompoundTag nbt) {
         super.addAdditionalSaveData(nbt);
-        nbt.putByte("BatFlags", ((Byte) this.entityData.get(Bat.DATA_ID_FLAGS)).byteValue());
+        nbt.putByte("BatFlags", this.entityData.get(Bat.DATA_ID_FLAGS).byteValue());
     }
 
     public static boolean checkBatSpawnRules(EntityType<Bat> type, LevelAccessor world, MobSpawnType spawnReason, BlockPos pos, RandomSource random) {
diff --git a/src/main/java/net/minecraft/world/entity/animal/Bee.java b/src/main/java/net/minecraft/world/entity/animal/Bee.java
index ca40ec994e80ed28ec3ecc22e285b3b724a4819a..9f50327263a7cf276051581c8761cd7aaacb81cd 100644
--- a/src/main/java/net/minecraft/world/entity/animal/Bee.java
+++ b/src/main/java/net/minecraft/world/entity/animal/Bee.java
@@ -386,7 +386,7 @@ public class Bee extends Animal implements NeutralMob, FlyingAnimal {
 
         if (flag) {
             ++this.timeSinceSting;
-            if (this.timeSinceSting % 5 == 0 && this.random.nextInt(Mth.clamp(1200 - this.timeSinceSting, (int) 1, (int) 1200)) == 0) {
+            if (this.timeSinceSting % 5 == 0 && this.random.nextInt(Mth.clamp(1200 - this.timeSinceSting, 1, 1200)) == 0) {
                 this.hurt(DamageSource.GENERIC, this.getHealth());
             }
         }
@@ -418,7 +418,7 @@ public class Bee extends Animal implements NeutralMob, FlyingAnimal {
 
     @Override
     public int getRemainingPersistentAngerTime() {
-        return ((Integer) this.entityData.get(Bee.DATA_REMAINING_ANGER_TIME)).intValue();
+        return this.entityData.get(Bee.DATA_REMAINING_ANGER_TIME).intValue();
     }
 
     @Override
@@ -499,7 +499,7 @@ public class Bee extends Animal implements NeutralMob, FlyingAnimal {
                 --this.remainingCooldownBeforeLocatingNewFlower;
             }
 
-            boolean flag = this.isAngry() && !this.hasStung() && this.getTarget() != null && this.getTarget().distanceToSqr((Entity) this) < 4.0D;
+            boolean flag = this.isAngry() && !this.hasStung() && this.getTarget() != null && this.getTarget().distanceToSqr(this) < 4.0D;
 
             this.setRolling(flag);
             if (this.tickCount % 20 == 0 && !this.isHiveValid()) {
@@ -558,15 +558,15 @@ public class Bee extends Animal implements NeutralMob, FlyingAnimal {
 
     private void setFlag(int bit, boolean value) {
         if (value) {
-            this.entityData.set(Bee.DATA_FLAGS_ID, Byte.valueOf((byte) ((Byte) this.entityData.get(Bee.DATA_FLAGS_ID) | bit)));
+            this.entityData.set(Bee.DATA_FLAGS_ID, Byte.valueOf((byte) (this.entityData.get(Bee.DATA_FLAGS_ID) | bit)));
         } else {
-            this.entityData.set(Bee.DATA_FLAGS_ID, Byte.valueOf((byte) ((Byte) this.entityData.get(Bee.DATA_FLAGS_ID) & ~bit)));
+            this.entityData.set(Bee.DATA_FLAGS_ID, Byte.valueOf((byte) (this.entityData.get(Bee.DATA_FLAGS_ID) & ~bit)));
         }
 
     }
 
     private boolean getFlag(int location) {
-        return (((Byte) this.entityData.get(Bee.DATA_FLAGS_ID)).intValue() & location) != 0;
+        return (this.entityData.get(Bee.DATA_FLAGS_ID).intValue() & location) != 0;
     }
 
     public static AttributeSupplier.Builder createAttributes() {
@@ -630,7 +630,7 @@ public class Bee extends Animal implements NeutralMob, FlyingAnimal {
     @Nullable
     @Override
     public Bee getBreedOffspring(ServerLevel world, AgeableMob entity) {
-        return (Bee) EntityType.BEE.create(world);
+        return EntityType.BEE.create(world);
     }
 
     @Override
@@ -690,11 +690,11 @@ public class Bee extends Animal implements NeutralMob, FlyingAnimal {
 
     @Override
     public Vec3 getLeashOffset() {
-        return new Vec3(0.0D, (double) (0.5F * this.getEyeHeight()), (double) (this.getBbWidth() * 0.2F));
+        return new Vec3(0.0D, 0.5F * this.getEyeHeight(), this.getBbWidth() * 0.2F);
     }
 
     boolean closerThan(BlockPos pos, int distance) {
-        return pos.closerThan(this.blockPosition(), (double) distance);
+        return pos.closerThan(this.blockPosition(), distance);
     }
 
     private class BeePollinateGoal extends Bee.BaseBeeGoal {
@@ -703,7 +703,7 @@ public class Bee extends Animal implements NeutralMob, FlyingAnimal {
         private static final int MIN_FIND_FLOWER_RETRY_COOLDOWN = 20;
         private static final int MAX_FIND_FLOWER_RETRY_COOLDOWN = 60;
         private final Predicate<BlockState> VALID_POLLINATION_BLOCKS = (iblockdata) -> {
-            return iblockdata.hasProperty(BlockStateProperties.WATERLOGGED) && ((Boolean) iblockdata.getValue(BlockStateProperties.WATERLOGGED)).booleanValue() ? false : (iblockdata.is(BlockTags.FLOWERS) ? (iblockdata.is(Blocks.SUNFLOWER) ? iblockdata.getValue(DoublePlantBlock.HALF) == DoubleBlockHalf.UPPER : true) : false);
+            return iblockdata.hasProperty(BlockStateProperties.WATERLOGGED) && iblockdata.getValue(BlockStateProperties.WATERLOGGED).booleanValue() ? false : (iblockdata.is(BlockTags.FLOWERS) ? (iblockdata.is(Blocks.SUNFLOWER) ? iblockdata.getValue(DoublePlantBlock.HALF) == DoubleBlockHalf.UPPER : true) : false);
         };
         private static final double ARRIVAL_THRESHOLD = 0.1D;
         private static final int POSITION_CHANGE_CHANCE = 25;
@@ -735,7 +735,7 @@ public class Bee extends Animal implements NeutralMob, FlyingAnimal {
                 Optional<BlockPos> optional = this.findNearbyFlower();
 
                 if (optional.isPresent()) {
-                    Bee.this.savedFlowerPos = (BlockPos) optional.get();
+                    Bee.this.savedFlowerPos = optional.get();
                     Bee.this.navigation.moveTo((double) Bee.this.savedFlowerPos.getX() + 0.5D, (double) Bee.this.savedFlowerPos.getY() + 0.5D, (double) Bee.this.savedFlowerPos.getZ() + 0.5D, 1.2000000476837158D);
                     return true;
                 } else {
@@ -993,7 +993,7 @@ public class Bee extends Animal implements NeutralMob, FlyingAnimal {
                 do {
                     if (!iterator.hasNext()) {
                         Bee.this.goToHiveGoal.clearBlacklist();
-                        Bee.this.hivePos = (BlockPos) list.get(0);
+                        Bee.this.hivePos = list.get(0);
                         return;
                     }
 
@@ -1011,7 +1011,7 @@ public class Bee extends Animal implements NeutralMob, FlyingAnimal {
                 return holder.is(PoiTypeTags.BEE_HOME);
             }, blockposition, 20, PoiManager.Occupancy.ANY);
 
-            return (List) stream.map(PoiRecord::getPos).filter(Bee.this::doesHiveHaveSpace).sorted(Comparator.comparingDouble((blockposition1) -> {
+            return stream.map(PoiRecord::getPos).filter(Bee.this::doesHiveHaveSpace).sorted(Comparator.comparingDouble((blockposition1) -> {
                 return blockposition1.distSqr(blockposition);
             })).collect(Collectors.toList());
         }
@@ -1096,7 +1096,7 @@ public class Bee extends Animal implements NeutralMob, FlyingAnimal {
 
         private boolean pathfindDirectlyTowards(BlockPos pos) {
             Bee.this.navigation.setMaxVisitedNodesMultiplier(10.0F);
-            Bee.this.navigation.moveTo((double) pos.getX(), (double) pos.getY(), (double) pos.getZ(), 1.0D);
+            Bee.this.navigation.moveTo(pos.getX(), pos.getY(), pos.getZ(), 1.0D);
             return Bee.this.navigation.getPath() != null && Bee.this.navigation.getPath().canReach();
         }
 
@@ -1236,13 +1236,13 @@ public class Bee extends Animal implements NeutralMob, FlyingAnimal {
                             int j;
 
                             if (block instanceof StemBlock) {
-                                j = ((Integer) iblockdata.getValue(StemBlock.AGE)).intValue();
+                                j = iblockdata.getValue(StemBlock.AGE).intValue();
                                 if (j < 7) {
                                     flag = true;
                                     blockstateinteger = StemBlock.AGE;
                                 }
                             } else if (iblockdata.is(Blocks.SWEET_BERRY_BUSH)) {
-                                j = ((Integer) iblockdata.getValue(SweetBerryBushBlock.AGE)).intValue();
+                                j = iblockdata.getValue(SweetBerryBushBlock.AGE).intValue();
                                 if (j < 3) {
                                     flag = true;
                                     blockstateinteger = SweetBerryBushBlock.AGE;
@@ -1252,9 +1252,9 @@ public class Bee extends Animal implements NeutralMob, FlyingAnimal {
                             }
                         }
 
-                        if (flag && !org.bukkit.craftbukkit.event.CraftEventFactory.callEntityChangeBlockEvent(Bee.this, blockposition, iblockdata.setValue(blockstateinteger, Integer.valueOf((Integer) iblockdata.getValue(blockstateinteger) + 1))).isCancelled()) { // Spigot
+                        if (flag && !org.bukkit.craftbukkit.event.CraftEventFactory.callEntityChangeBlockEvent(Bee.this, blockposition, iblockdata.setValue(blockstateinteger, Integer.valueOf(iblockdata.getValue(blockstateinteger) + 1))).isCancelled()) { // Spigot
                             Bee.this.level.levelEvent(2005, blockposition, 0);
-                            Bee.this.level.setBlockAndUpdate(blockposition, (BlockState) iblockdata.setValue(blockstateinteger, Integer.valueOf((Integer) iblockdata.getValue(blockstateinteger) + 1)));
+                            Bee.this.level.setBlockAndUpdate(blockposition, iblockdata.setValue(blockstateinteger, Integer.valueOf(iblockdata.getValue(blockstateinteger) + 1)));
                             Bee.this.incrementNumCropsGrownSincePollination();
                         }
                     }
diff --git a/src/main/java/net/minecraft/world/entity/animal/Bucketable.java b/src/main/java/net/minecraft/world/entity/animal/Bucketable.java
index 9695a80c45b36c84f5fdef651b26a2c09d7f1f9b..a643567a5c5abc26f7acdbc8f895db0d13e514b0 100644
--- a/src/main/java/net/minecraft/world/entity/animal/Bucketable.java
+++ b/src/main/java/net/minecraft/world/entity/animal/Bucketable.java
@@ -101,18 +101,18 @@ public interface Bucketable {
         if (itemstack.getItem() == Items.WATER_BUCKET && entity.isAlive()) {
             // CraftBukkit start
             // t0.playSound(((Bucketable) t0).getPickupSound(), 1.0F, 1.0F); // CraftBukkit - moved down
-            ItemStack itemstack1 = ((Bucketable) entity).getBucketItemStack();
+            ItemStack itemstack1 = entity.getBucketItemStack();
 
-            ((Bucketable) entity).saveToBucketTag(itemstack1);
+            entity.saveToBucketTag(itemstack1);
 
             PlayerBucketEntityEvent playerBucketFishEvent = CraftEventFactory.callPlayerFishBucketEvent(entity, player, itemstack, itemstack1, hand);
             itemstack1 = CraftItemStack.asNMSCopy(playerBucketFishEvent.getEntityBucket());
             if (playerBucketFishEvent.isCancelled()) {
-                ((ServerPlayer) player).containerMenu.sendAllDataToRemote(); // We need to update inventory to resync client's bucket
+                player.containerMenu.sendAllDataToRemote(); // We need to update inventory to resync client's bucket
                 entity.getEntityData().resendPossiblyDesyncedEntity((ServerPlayer) player); // Paper
                 return Optional.of(InteractionResult.FAIL);
             }
-            entity.playSound(((Bucketable) entity).getPickupSound(), 1.0F, 1.0F);
+            entity.playSound(entity.getPickupSound(), 1.0F, 1.0F);
             // CraftBukkit end
             ItemStack itemstack2 = ItemUtils.createFilledResult(itemstack, player, itemstack1, false);
 
diff --git a/src/main/java/net/minecraft/world/entity/animal/Cat.java b/src/main/java/net/minecraft/world/entity/animal/Cat.java
index f3cb02026d5eb8586b740cde0ec063e305f17740..86a9cd6b88398560221b8f67346a7321edd7739d 100644
--- a/src/main/java/net/minecraft/world/entity/animal/Cat.java
+++ b/src/main/java/net/minecraft/world/entity/animal/Cat.java
@@ -121,7 +121,7 @@ public class Cat extends TamableAnimal implements VariantHolder<CatVariant> {
 
     @Override
     public CatVariant getVariant() {
-        return (CatVariant) this.entityData.get(Cat.DATA_VARIANT_ID);
+        return this.entityData.get(Cat.DATA_VARIANT_ID);
     }
 
     public void setVariant(CatVariant variant) {
@@ -133,7 +133,7 @@ public class Cat extends TamableAnimal implements VariantHolder<CatVariant> {
     }
 
     public boolean isLying() {
-        return ((Boolean) this.entityData.get(Cat.IS_LYING)).booleanValue();
+        return this.entityData.get(Cat.IS_LYING).booleanValue();
     }
 
     public void setRelaxStateOne(boolean headDown) {
@@ -141,11 +141,11 @@ public class Cat extends TamableAnimal implements VariantHolder<CatVariant> {
     }
 
     public boolean isRelaxStateOne() {
-        return ((Boolean) this.entityData.get(Cat.RELAX_STATE_ONE)).booleanValue();
+        return this.entityData.get(Cat.RELAX_STATE_ONE).booleanValue();
     }
 
     public DyeColor getCollarColor() {
-        return DyeColor.byId(((Integer) this.entityData.get(Cat.DATA_COLLAR_COLOR)).intValue());
+        return DyeColor.byId(this.entityData.get(Cat.DATA_COLLAR_COLOR).intValue());
     }
 
     public void setCollarColor(DyeColor color) {
@@ -314,7 +314,7 @@ public class Cat extends TamableAnimal implements VariantHolder<CatVariant> {
     @Nullable
     @Override
     public Cat getBreedOffspring(ServerLevel world, AgeableMob entity) {
-        Cat entitycat = (Cat) EntityType.CAT.create(world);
+        Cat entitycat = EntityType.CAT.create(world);
 
         if (entitycat != null && entity instanceof Cat) {
             Cat entitycat1 = (Cat) entity;
@@ -362,7 +362,7 @@ public class Cat extends TamableAnimal implements VariantHolder<CatVariant> {
         BuiltInRegistries.CAT_VARIANT.getTag(tagkey).flatMap((holderset_named) -> {
             return holderset_named.getRandomElement(world.getRandom());
         }).ifPresent((holder) -> {
-            this.setVariant((CatVariant) holder.value());
+            this.setVariant(holder.value());
         });
         ServerLevel worldserver = world.getLevel();
 
@@ -537,7 +537,7 @@ public class Cat extends TamableAnimal implements VariantHolder<CatVariant> {
                         return false;
                     }
 
-                    if (this.cat.distanceToSqr((Entity) this.ownerPlayer) > 100.0D) {
+                    if (this.cat.distanceToSqr(this.ownerPlayer) > 100.0D) {
                         return false;
                     }
 
@@ -545,7 +545,7 @@ public class Cat extends TamableAnimal implements VariantHolder<CatVariant> {
                     BlockState iblockdata = this.cat.level.getBlockState(blockposition);
 
                     if (iblockdata.is(BlockTags.BEDS)) {
-                        this.goalPos = (BlockPos) iblockdata.getOptionalValue(BedBlock.FACING).map((enumdirection) -> {
+                        this.goalPos = iblockdata.getOptionalValue(BedBlock.FACING).map((enumdirection) -> {
                             return blockposition.relative(enumdirection.getOpposite());
                         }).orElseGet(() -> {
                             return new BlockPos(blockposition);
@@ -586,7 +586,7 @@ public class Cat extends TamableAnimal implements VariantHolder<CatVariant> {
         public void start() {
             if (this.goalPos != null) {
                 this.cat.setInSittingPose(false);
-                this.cat.getNavigation().moveTo((double) this.goalPos.getX(), (double) this.goalPos.getY(), (double) this.goalPos.getZ(), 1.100000023841858D);
+                this.cat.getNavigation().moveTo(this.goalPos.getX(), this.goalPos.getY(), this.goalPos.getZ(), 1.100000023841858D);
             }
 
         }
@@ -610,7 +610,7 @@ public class Cat extends TamableAnimal implements VariantHolder<CatVariant> {
             BlockPos.MutableBlockPos blockposition_mutableblockposition = new BlockPos.MutableBlockPos();
 
             blockposition_mutableblockposition.set(this.cat.isLeashed() ? this.cat.getLeashHolder().blockPosition() : this.cat.blockPosition());
-            this.cat.randomTeleport((double) (blockposition_mutableblockposition.getX() + randomsource.nextInt(11) - 5), (double) (blockposition_mutableblockposition.getY() + randomsource.nextInt(5) - 2), (double) (blockposition_mutableblockposition.getZ() + randomsource.nextInt(11) - 5), false);
+            this.cat.randomTeleport(blockposition_mutableblockposition.getX() + randomsource.nextInt(11) - 5, blockposition_mutableblockposition.getY() + randomsource.nextInt(5) - 2, blockposition_mutableblockposition.getZ() + randomsource.nextInt(11) - 5, false);
             blockposition_mutableblockposition.set(this.cat.blockPosition());
             LootTable loottable = this.cat.level.getServer().getLootTables().get(BuiltInLootTables.CAT_MORNING_GIFT);
             LootContext.Builder loottableinfo_builder = (new LootContext.Builder((ServerLevel) this.cat.level)).withParameter(LootContextParams.ORIGIN, this.cat.position()).withParameter(LootContextParams.THIS_ENTITY, this.cat).withRandom(randomsource);
@@ -621,7 +621,7 @@ public class Cat extends TamableAnimal implements VariantHolder<CatVariant> {
                 ItemStack itemstack = (ItemStack) iterator.next();
 
                 // CraftBukkit start
-                ItemEntity entityitem = new ItemEntity(this.cat.level, (double) blockposition_mutableblockposition.getX() - (double) Mth.sin(this.cat.yBodyRot * 0.017453292F), (double) blockposition_mutableblockposition.getY(), (double) blockposition_mutableblockposition.getZ() + (double) Mth.cos(this.cat.yBodyRot * 0.017453292F), itemstack);
+                ItemEntity entityitem = new ItemEntity(this.cat.level, (double) blockposition_mutableblockposition.getX() - (double) Mth.sin(this.cat.yBodyRot * 0.017453292F), blockposition_mutableblockposition.getY(), (double) blockposition_mutableblockposition.getZ() + (double) Mth.cos(this.cat.yBodyRot * 0.017453292F), itemstack);
                 org.bukkit.event.entity.EntityDropItemEvent event = new org.bukkit.event.entity.EntityDropItemEvent(this.cat.getBukkitEntity(), (org.bukkit.entity.Item) entityitem.getBukkitEntity());
                 entityitem.level.getCraftServer().getPluginManager().callEvent(event);
                 if (event.isCancelled()) {
@@ -637,8 +637,8 @@ public class Cat extends TamableAnimal implements VariantHolder<CatVariant> {
         public void tick() {
             if (this.ownerPlayer != null && this.goalPos != null) {
                 this.cat.setInSittingPose(false);
-                this.cat.getNavigation().moveTo((double) this.goalPos.getX(), (double) this.goalPos.getY(), (double) this.goalPos.getZ(), 1.100000023841858D);
-                if (this.cat.distanceToSqr((Entity) this.ownerPlayer) < 2.5D) {
+                this.cat.getNavigation().moveTo(this.goalPos.getX(), this.goalPos.getY(), this.goalPos.getZ(), 1.100000023841858D);
+                if (this.cat.distanceToSqr(this.ownerPlayer) < 2.5D) {
                     ++this.onBedTicks;
                     if (this.onBedTicks > this.adjustedTickDelay(16)) {
                         this.cat.setLying(true);
diff --git a/src/main/java/net/minecraft/world/entity/animal/Chicken.java b/src/main/java/net/minecraft/world/entity/animal/Chicken.java
index 72edd4d0698dd18cf2d91c39d68d3b3302d86d62..659fb274d6970c8d342ae34d275fa6656cfd9a39 100644
--- a/src/main/java/net/minecraft/world/entity/animal/Chicken.java
+++ b/src/main/java/net/minecraft/world/entity/animal/Chicken.java
@@ -97,7 +97,7 @@ public class Chicken extends Animal {
         if (!this.level.isClientSide && this.isAlive() && !this.isBaby() && !this.isChickenJockey() && --this.eggTime <= 0) {
             this.playSound(SoundEvents.CHICKEN_EGG, 1.0F, (this.random.nextFloat() - this.random.nextFloat()) * 0.2F + 1.0F);
             this.forceDrops = true; // CraftBukkit
-            this.spawnAtLocation((ItemLike) Items.EGG);
+            this.spawnAtLocation(Items.EGG);
             this.forceDrops = false; // CraftBukkit
             this.gameEvent(GameEvent.ENTITY_PLACE);
             this.eggTime = this.random.nextInt(6000) + 6000;
@@ -143,7 +143,7 @@ public class Chicken extends Animal {
     @Nullable
     @Override
     public Chicken getBreedOffspring(ServerLevel world, AgeableMob entity) {
-        return (Chicken) EntityType.CHICKEN.create(world);
+        return EntityType.CHICKEN.create(world);
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/entity/animal/Cow.java b/src/main/java/net/minecraft/world/entity/animal/Cow.java
index 8d4ec84ea382ec89ffa753cc68a0e6fa2ba11777..85e14d5f23eb0f18bc1f2ad30f8e35ffce3ff98d 100644
--- a/src/main/java/net/minecraft/world/entity/animal/Cow.java
+++ b/src/main/java/net/minecraft/world/entity/animal/Cow.java
@@ -109,7 +109,7 @@ public class Cow extends Animal {
     @Nullable
     @Override
     public @Nullable Cow getBreedOffspring(ServerLevel world, AgeableMob entity) {
-        return (Cow) EntityType.COW.create(world);
+        return EntityType.COW.create(world);
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/entity/animal/Dolphin.java b/src/main/java/net/minecraft/world/entity/animal/Dolphin.java
index 9945c67c9979f7cc07e08db45839b612894a09af..b6b2416f60fa7c18d84cfe98c08198b3867269ff 100644
--- a/src/main/java/net/minecraft/world/entity/animal/Dolphin.java
+++ b/src/main/java/net/minecraft/world/entity/animal/Dolphin.java
@@ -107,11 +107,11 @@ public class Dolphin extends WaterAnimal {
     }
 
     public BlockPos getTreasurePos() {
-        return (BlockPos) this.entityData.get(Dolphin.TREASURE_POS);
+        return this.entityData.get(Dolphin.TREASURE_POS);
     }
 
     public boolean gotFish() {
-        return ((Boolean) this.entityData.get(Dolphin.GOT_FISH)).booleanValue();
+        return this.entityData.get(Dolphin.GOT_FISH).booleanValue();
     }
 
     public void setGotFish(boolean hasFish) {
@@ -119,7 +119,7 @@ public class Dolphin extends WaterAnimal {
     }
 
     public int getMoistnessLevel() {
-        return ((Integer) this.entityData.get(Dolphin.MOISTNESS_LEVEL)).intValue();
+        return this.entityData.get(Dolphin.MOISTNESS_LEVEL).intValue();
     }
 
     public void setMoisntessLevel(int moistness) {
@@ -268,7 +268,7 @@ public class Dolphin extends WaterAnimal {
                 }
 
                 if (this.onGround) {
-                    this.setDeltaMovement(this.getDeltaMovement().add((double) ((this.random.nextFloat() * 2.0F - 1.0F) * 0.2F), 0.5D, (double) ((this.random.nextFloat() * 2.0F - 1.0F) * 0.2F)));
+                    this.setDeltaMovement(this.getDeltaMovement().add((this.random.nextFloat() * 2.0F - 1.0F) * 0.2F, 0.5D, (this.random.nextFloat() * 2.0F - 1.0F) * 0.2F));
                     this.setYRot(this.random.nextFloat() * 360.0F);
                     this.onGround = false;
                     this.hasImpulse = true;
@@ -408,7 +408,7 @@ public class Dolphin extends WaterAnimal {
         public boolean canContinueToUse() {
             BlockPos blockposition = this.dolphin.getTreasurePos();
 
-            return !(new BlockPos((double) blockposition.getX(), this.dolphin.getY(), (double) blockposition.getZ())).closerToCenterThan(this.dolphin.position(), 4.0D) && !this.stuck && this.dolphin.getAirSupply() >= 100;
+            return !(new BlockPos(blockposition.getX(), this.dolphin.getY(), blockposition.getZ())).closerToCenterThan(this.dolphin.position(), 4.0D) && !this.stuck && this.dolphin.getAirSupply() >= 100;
         }
 
         @Override
@@ -434,7 +434,7 @@ public class Dolphin extends WaterAnimal {
         public void stop() {
             BlockPos blockposition = this.dolphin.getTreasurePos();
 
-            if ((new BlockPos((double) blockposition.getX(), this.dolphin.getY(), (double) blockposition.getZ())).closerToCenterThan(this.dolphin.position(), 4.0D) || this.stuck) {
+            if ((new BlockPos(blockposition.getX(), this.dolphin.getY(), blockposition.getZ())).closerToCenterThan(this.dolphin.position(), 4.0D) || this.stuck) {
                 this.dolphin.setGotFish(false);
             }
 
@@ -496,7 +496,7 @@ public class Dolphin extends WaterAnimal {
 
         @Override
         public boolean canContinueToUse() {
-            return this.player != null && this.player.isSwimming() && this.dolphin.distanceToSqr((Entity) this.player) < 256.0D;
+            return this.player != null && this.player.isSwimming() && this.dolphin.distanceToSqr(this.player) < 256.0D;
         }
 
         @Override
@@ -513,10 +513,10 @@ public class Dolphin extends WaterAnimal {
         @Override
         public void tick() {
             this.dolphin.getLookControl().setLookAt(this.player, (float) (this.dolphin.getMaxHeadYRot() + 20), (float) this.dolphin.getMaxHeadXRot());
-            if (this.dolphin.distanceToSqr((Entity) this.player) < 6.25D) {
+            if (this.dolphin.distanceToSqr(this.player) < 6.25D) {
                 this.dolphin.getNavigation().stop();
             } else {
-                this.dolphin.getNavigation().moveTo((Entity) this.player, this.speedModifier);
+                this.dolphin.getNavigation().moveTo(this.player, this.speedModifier);
             }
 
             if (this.player.isSwimming() && this.player.level.random.nextInt(6) == 0) {
@@ -548,7 +548,7 @@ public class Dolphin extends WaterAnimal {
             List<ItemEntity> list = Dolphin.this.level.getEntitiesOfClass(ItemEntity.class, Dolphin.this.getBoundingBox().inflate(8.0D, 8.0D, 8.0D), Dolphin.ALLOWED_ITEMS);
 
             if (!list.isEmpty()) {
-                Dolphin.this.getNavigation().moveTo((Entity) list.get(0), 1.2000000476837158D);
+                Dolphin.this.getNavigation().moveTo(list.get(0), 1.2000000476837158D);
                 Dolphin.this.playSound(SoundEvents.DOLPHIN_PLAY, 1.0F, 1.0F);
             }
 
@@ -576,7 +576,7 @@ public class Dolphin extends WaterAnimal {
                 this.drop(itemstack);
                 Dolphin.this.setItemSlot(EquipmentSlot.MAINHAND, ItemStack.EMPTY);
             } else if (!list.isEmpty()) {
-                Dolphin.this.getNavigation().moveTo((Entity) list.get(0), 1.2000000476837158D);
+                Dolphin.this.getNavigation().moveTo(list.get(0), 1.2000000476837158D);
             }
 
         }
@@ -592,7 +592,7 @@ public class Dolphin extends WaterAnimal {
                 float f1 = Dolphin.this.random.nextFloat() * 6.2831855F;
                 float f2 = 0.02F * Dolphin.this.random.nextFloat();
 
-                entityitem.setDeltaMovement((double) (0.3F * -Mth.sin(Dolphin.this.getYRot() * 0.017453292F) * Mth.cos(Dolphin.this.getXRot() * 0.017453292F) + Mth.cos(f1) * f2), (double) (0.3F * Mth.sin(Dolphin.this.getXRot() * 0.017453292F) * 1.5F), (double) (0.3F * Mth.cos(Dolphin.this.getYRot() * 0.017453292F) * Mth.cos(Dolphin.this.getXRot() * 0.017453292F) + Mth.sin(f1) * f2));
+                entityitem.setDeltaMovement(0.3F * -Mth.sin(Dolphin.this.getYRot() * 0.017453292F) * Mth.cos(Dolphin.this.getXRot() * 0.017453292F) + Mth.cos(f1) * f2, 0.3F * Mth.sin(Dolphin.this.getXRot() * 0.017453292F) * 1.5F, 0.3F * Mth.cos(Dolphin.this.getYRot() * 0.017453292F) * Mth.cos(Dolphin.this.getXRot() * 0.017453292F) + Mth.sin(f1) * f2);
                 Dolphin.this.spawnAtLocation(entityitem); // Paper - call EntityDropItemEvent
             }
         }
diff --git a/src/main/java/net/minecraft/world/entity/animal/Fox.java b/src/main/java/net/minecraft/world/entity/animal/Fox.java
index 2921286d389ef7b01f54685953d44a9b3b83f30d..7605d5b384a8085f60b855a8ed805284f6b40f2b 100644
--- a/src/main/java/net/minecraft/world/entity/animal/Fox.java
+++ b/src/main/java/net/minecraft/world/entity/animal/Fox.java
@@ -296,7 +296,7 @@ public class Fox extends Animal implements VariantHolder<Fox.Type> {
     @Nullable
     @Override
     public Fox getBreedOffspring(ServerLevel world, AgeableMob entity) {
-        Fox entityfox = (Fox) EntityType.FOX.create(world);
+        Fox entityfox = EntityType.FOX.create(world);
 
         if (entityfox != null) {
             entityfox.setVariant(this.random.nextBoolean() ? this.getVariant() : ((Fox) entity).getVariant());
@@ -337,7 +337,7 @@ public class Fox extends Animal implements VariantHolder<Fox.Type> {
         }
 
         this.populateDefaultEquipmentSlots(world.getRandom(), difficulty);
-        return super.finalizeSpawn(world, difficulty, spawnReason, (SpawnGroupData) entityData, entityNbt);
+        return super.finalizeSpawn(world, difficulty, spawnReason, entityData, entityNbt);
     }
 
     private void setTargetGoals() {
@@ -369,7 +369,7 @@ public class Fox extends Animal implements VariantHolder<Fox.Type> {
 
     @Override
     public Fox.Type getVariant() {
-        return Fox.Type.byId(((Integer) this.entityData.get(Fox.DATA_TYPE_ID)).intValue());
+        return Fox.Type.byId(this.entityData.get(Fox.DATA_TYPE_ID).intValue());
     }
 
     public void setVariant(Fox.Type variant) {
@@ -379,13 +379,13 @@ public class Fox extends Animal implements VariantHolder<Fox.Type> {
     List<UUID> getTrustedUUIDs() {
         List<UUID> list = Lists.newArrayList();
 
-        list.add((UUID) ((Optional) this.entityData.get(Fox.DATA_TRUSTED_ID_0)).orElse((Object) null));
-        list.add((UUID) ((Optional) this.entityData.get(Fox.DATA_TRUSTED_ID_1)).orElse((Object) null));
+        list.add((UUID) ((Optional) this.entityData.get(Fox.DATA_TRUSTED_ID_0)).orElse(null));
+        list.add((UUID) ((Optional) this.entityData.get(Fox.DATA_TRUSTED_ID_1)).orElse(null));
         return list;
     }
 
     void addTrustedUUID(@Nullable UUID uuid) {
-        if (((Optional) this.entityData.get(Fox.DATA_TRUSTED_ID_0)).isPresent()) {
+        if (this.entityData.get(Fox.DATA_TRUSTED_ID_0).isPresent()) {
             this.entityData.set(Fox.DATA_TRUSTED_ID_1, Optional.ofNullable(uuid));
         } else {
             this.entityData.set(Fox.DATA_TRUSTED_ID_0, Optional.ofNullable(uuid));
@@ -475,15 +475,15 @@ public class Fox extends Animal implements VariantHolder<Fox.Type> {
 
     private void setFlag(int mask, boolean value) {
         if (value) {
-            this.entityData.set(Fox.DATA_FLAGS_ID, Byte.valueOf((byte) ((Byte) this.entityData.get(Fox.DATA_FLAGS_ID) | mask)));
+            this.entityData.set(Fox.DATA_FLAGS_ID, Byte.valueOf((byte) (this.entityData.get(Fox.DATA_FLAGS_ID) | mask)));
         } else {
-            this.entityData.set(Fox.DATA_FLAGS_ID, Byte.valueOf((byte) ((Byte) this.entityData.get(Fox.DATA_FLAGS_ID) & ~mask)));
+            this.entityData.set(Fox.DATA_FLAGS_ID, Byte.valueOf((byte) (this.entityData.get(Fox.DATA_FLAGS_ID) & ~mask)));
         }
 
     }
 
     private boolean getFlag(int bitmask) {
-        return (((Byte) this.entityData.get(Fox.DATA_FLAGS_ID)).intValue() & bitmask) != 0;
+        return (this.entityData.get(Fox.DATA_FLAGS_ID).intValue() & bitmask) != 0;
     }
 
     @Override
@@ -754,7 +754,7 @@ public class Fox extends Animal implements VariantHolder<Fox.Type> {
 
     @Override
     public Vec3 getLeashOffset() {
-        return new Vec3(0.0D, (double) (0.55F * this.getEyeHeight()), (double) (this.getBbWidth() * 0.4F));
+        return new Vec3(0.0D, 0.55F * this.getEyeHeight(), this.getBbWidth() * 0.4F);
     }
 
     public class FoxLookControl extends LookControl {
@@ -935,7 +935,7 @@ public class Fox extends Animal implements VariantHolder<Fox.Type> {
             } else {
                 LivingEntity entityliving = Fox.this.getTarget();
 
-                return entityliving != null && entityliving.isAlive() && Fox.STALKABLE_PREY.test(entityliving) && Fox.this.distanceToSqr((Entity) entityliving) > 36.0D && !Fox.this.isCrouching() && !Fox.this.isInterested() && !Fox.this.jumping;
+                return entityliving != null && entityliving.isAlive() && Fox.STALKABLE_PREY.test(entityliving) && Fox.this.distanceToSqr(entityliving) > 36.0D && !Fox.this.isCrouching() && !Fox.this.isInterested() && !Fox.this.jumping;
             }
         }
 
@@ -967,12 +967,12 @@ public class Fox extends Animal implements VariantHolder<Fox.Type> {
 
             if (entityliving != null) {
                 Fox.this.getLookControl().setLookAt(entityliving, (float) Fox.this.getMaxHeadYRot(), (float) Fox.this.getMaxHeadXRot());
-                if (Fox.this.distanceToSqr((Entity) entityliving) <= 36.0D) {
+                if (Fox.this.distanceToSqr(entityliving) <= 36.0D) {
                     Fox.this.setIsInterested(true);
                     Fox.this.setIsCrouching(true);
                     Fox.this.getNavigation().stop();
                 } else {
-                    Fox.this.getNavigation().moveTo((Entity) entityliving, 1.5D);
+                    Fox.this.getNavigation().moveTo(entityliving, 1.5D);
                 }
 
             }
@@ -997,7 +997,7 @@ public class Fox extends Animal implements VariantHolder<Fox.Type> {
                         boolean flag = Fox.isPathClear(Fox.this, entityliving);
 
                         if (!flag) {
-                            Fox.this.getNavigation().createPath((Entity) entityliving, 0);
+                            Fox.this.getNavigation().createPath(entityliving, 0);
                             Fox.this.setIsCrouching(false);
                             Fox.this.setIsInterested(false);
                         }
@@ -1079,7 +1079,7 @@ public class Fox extends Animal implements VariantHolder<Fox.Type> {
                 Fox.this.doHurtTarget(entityliving);
             } else if (Fox.this.getXRot() > 0.0F && Fox.this.onGround && (float) Fox.this.getDeltaMovement().y != 0.0F && Fox.this.level.getBlockState(Fox.this.blockPosition()).is(Blocks.SNOW)) {
                 Fox.this.setXRot(60.0F);
-                Fox.this.setTarget((LivingEntity) null);
+                Fox.this.setTarget(null);
                 Fox.this.setFaceplanted(true);
             }
 
@@ -1274,7 +1274,7 @@ public class Fox extends Animal implements VariantHolder<Fox.Type> {
         protected boolean isValidTarget(LevelReader world, BlockPos pos) {
             BlockState iblockdata = world.getBlockState(pos);
 
-            return iblockdata.is(Blocks.SWEET_BERRY_BUSH) && ((Integer) iblockdata.getValue(SweetBerryBushBlock.AGE)).intValue() >= 2 || CaveVines.hasGlowBerries(iblockdata);
+            return iblockdata.is(Blocks.SWEET_BERRY_BUSH) && iblockdata.getValue(SweetBerryBushBlock.AGE).intValue() >= 2 || CaveVines.hasGlowBerries(iblockdata);
         }
 
         @Override
@@ -1310,7 +1310,7 @@ public class Fox extends Animal implements VariantHolder<Fox.Type> {
         }
 
         private void pickSweetBerries(BlockState state) {
-            int i = ((Integer) state.getValue(SweetBerryBushBlock.AGE)).intValue();
+            int i = state.getValue(SweetBerryBushBlock.AGE).intValue();
 
             state.setValue(SweetBerryBushBlock.AGE, Integer.valueOf(1));
             // CraftBukkit start - call EntityChangeBlockEvent
@@ -1331,7 +1331,7 @@ public class Fox extends Animal implements VariantHolder<Fox.Type> {
             }
 
             Fox.this.playSound(SoundEvents.SWEET_BERRY_BUSH_PICK_BERRIES, 1.0F, 1.0F);
-            Fox.this.level.setBlock(this.blockPos, (BlockState) state.setValue(SweetBerryBushBlock.AGE, Integer.valueOf(1)), 2);
+            Fox.this.level.setBlock(this.blockPos, state.setValue(SweetBerryBushBlock.AGE, Integer.valueOf(1)), 2);
         }
 
         @Override
@@ -1378,7 +1378,7 @@ public class Fox extends Animal implements VariantHolder<Fox.Type> {
             ItemStack itemstack = Fox.this.getItemBySlot(EquipmentSlot.MAINHAND);
 
             if (itemstack.isEmpty() && !list.isEmpty()) {
-                Fox.this.getNavigation().moveTo((Entity) list.get(0), 1.2000000476837158D);
+                Fox.this.getNavigation().moveTo(list.get(0), 1.2000000476837158D);
             }
 
         }
@@ -1388,7 +1388,7 @@ public class Fox extends Animal implements VariantHolder<Fox.Type> {
             List<ItemEntity> list = Fox.this.level.getEntitiesOfClass(ItemEntity.class, Fox.this.getBoundingBox().inflate(8.0D, 8.0D, 8.0D), Fox.ALLOWED_ITEMS);
 
             if (!list.isEmpty()) {
-                Fox.this.getNavigation().moveTo((Entity) list.get(0), 1.2000000476837158D);
+                Fox.this.getNavigation().moveTo(list.get(0), 1.2000000476837158D);
             }
 
         }
@@ -1546,7 +1546,7 @@ public class Fox extends Animal implements VariantHolder<Fox.Type> {
         }
 
         public static Fox.Type byName(String name) {
-            return (Fox.Type) Fox.Type.CODEC.byName(name, Fox.Type.RED);
+            return Type.CODEC.byName(name, Type.RED);
         }
 
         public static Fox.Type byId(int id) {
diff --git a/src/main/java/net/minecraft/world/entity/animal/IronGolem.java b/src/main/java/net/minecraft/world/entity/animal/IronGolem.java
index 31673a4ce6e21c3368a6e2f3a027e1265777b3f5..52d4a41485d532b190499ae7d4e42cf44e2ca0a8 100644
--- a/src/main/java/net/minecraft/world/entity/animal/IronGolem.java
+++ b/src/main/java/net/minecraft/world/entity/animal/IronGolem.java
@@ -309,11 +309,11 @@ public class IronGolem extends AbstractGolem implements NeutralMob {
     }
 
     public boolean isPlayerCreated() {
-        return (((Byte) this.entityData.get(IronGolem.DATA_FLAGS_ID)).intValue() & 1) != 0;
+        return (this.entityData.get(IronGolem.DATA_FLAGS_ID).intValue() & 1) != 0;
     }
 
     public void setPlayerCreated(boolean playerCreated) {
-        byte b0 = ((Byte) this.entityData.get(IronGolem.DATA_FLAGS_ID)).byteValue();
+        byte b0 = this.entityData.get(IronGolem.DATA_FLAGS_ID).byteValue();
 
         if (playerCreated) {
             this.entityData.set(IronGolem.DATA_FLAGS_ID, Byte.valueOf((byte) (b0 | 1)));
@@ -352,15 +352,15 @@ public class IronGolem extends AbstractGolem implements NeutralMob {
 
     @Override
     public Vec3 getLeashOffset() {
-        return new Vec3(0.0D, (double) (0.875F * this.getEyeHeight()), (double) (this.getBbWidth() * 0.4F));
+        return new Vec3(0.0D, 0.875F * this.getEyeHeight(), this.getBbWidth() * 0.4F);
     }
 
     public static enum Crackiness {
 
         NONE(1.0F), LOW(0.75F), MEDIUM(0.5F), HIGH(0.25F);
 
-        private static final List<IronGolem.Crackiness> BY_DAMAGE = (List) Stream.of(values()).sorted(Comparator.comparingDouble((entityirongolem_cracklevel) -> {
-            return (double) entityirongolem_cracklevel.fraction;
+        private static final List<IronGolem.Crackiness> BY_DAMAGE = Stream.of(values()).sorted(Comparator.comparingDouble((entityirongolem_cracklevel) -> {
+            return entityirongolem_cracklevel.fraction;
         })).collect(ImmutableList.toImmutableList());
         private final float fraction;
 
diff --git a/src/main/java/net/minecraft/world/entity/animal/MushroomCow.java b/src/main/java/net/minecraft/world/entity/animal/MushroomCow.java
index 8c32ae043da03b04e1f20304a3138bd7897ec01a..24e0b66d6add664d01536adcb046f3624bd84138 100644
--- a/src/main/java/net/minecraft/world/entity/animal/MushroomCow.java
+++ b/src/main/java/net/minecraft/world/entity/animal/MushroomCow.java
@@ -148,7 +148,7 @@ public class MushroomCow extends Cow implements Shearable, VariantHolder<Mushroo
                     return InteractionResult.PASS;
                 }
 
-                Pair<MobEffect, Integer> pair = (Pair) optional.get();
+                Pair<MobEffect, Integer> pair = optional.get();
 
                 if (!player.getAbilities().instabuild) {
                     itemstack.shrink(1);
@@ -158,8 +158,8 @@ public class MushroomCow extends Cow implements Shearable, VariantHolder<Mushroo
                     this.level.addParticle(ParticleTypes.EFFECT, this.getX() + this.random.nextDouble() / 2.0D, this.getY(0.5D), this.getZ() + this.random.nextDouble() / 2.0D, 0.0D, this.random.nextDouble() / 5.0D, 0.0D);
                 }
 
-                this.effect = (MobEffect) pair.getLeft();
-                this.effectDuration = ((Integer) pair.getRight()).intValue();
+                this.effect = pair.getLeft();
+                this.effectDuration = pair.getRight().intValue();
                 this.playSound(SoundEvents.MOOSHROOM_EAT, 2.0F, 1.0F);
             }
 
@@ -171,7 +171,7 @@ public class MushroomCow extends Cow implements Shearable, VariantHolder<Mushroo
 
     @Override
     public void shear(SoundSource shearedSoundCategory) {
-        this.level.playSound((Player) null, (Entity) this, SoundEvents.MOOSHROOM_SHEAR, shearedSoundCategory, 1.0F, 1.0F);
+        this.level.playSound(null, this, SoundEvents.MOOSHROOM_SHEAR, shearedSoundCategory, 1.0F, 1.0F);
         if (!this.level.isClientSide()) {
             Cow entitycow = (Cow) EntityType.COW.create(this.level);
 
@@ -258,13 +258,13 @@ public class MushroomCow extends Cow implements Shearable, VariantHolder<Mushroo
 
     @Override
     public MushroomCow.MushroomType getVariant() {
-        return MushroomCow.MushroomType.byType((String) this.entityData.get(MushroomCow.DATA_TYPE));
+        return MushroomCow.MushroomType.byType(this.entityData.get(MushroomCow.DATA_TYPE));
     }
 
     @Nullable
     @Override
     public MushroomCow getBreedOffspring(ServerLevel world, AgeableMob entity) {
-        MushroomCow entitymushroomcow = (MushroomCow) EntityType.MOOSHROOM.create(world);
+        MushroomCow entitymushroomcow = EntityType.MOOSHROOM.create(world);
 
         if (entitymushroomcow != null) {
             entitymushroomcow.setVariant(this.getOffspringType((MushroomCow) entity));
diff --git a/src/main/java/net/minecraft/world/entity/animal/Ocelot.java b/src/main/java/net/minecraft/world/entity/animal/Ocelot.java
index 12758e5d892f45aa5ed636d0d42a4be860fa09b4..3c23af8737d17ca0e3e986cbd1a82d211fb37a77 100644
--- a/src/main/java/net/minecraft/world/entity/animal/Ocelot.java
+++ b/src/main/java/net/minecraft/world/entity/animal/Ocelot.java
@@ -67,7 +67,7 @@ public class Ocelot extends Animal {
     }
 
     public boolean isTrusting() {
-        return ((Boolean) this.entityData.get(Ocelot.DATA_TRUSTING)).booleanValue();
+        return this.entityData.get(Ocelot.DATA_TRUSTING).booleanValue();
     }
 
     public void setTrusting(boolean trusting) {
@@ -177,7 +177,7 @@ public class Ocelot extends Animal {
     public InteractionResult mobInteract(Player player, InteractionHand hand) {
         ItemStack itemstack = player.getItemInHand(hand);
 
-        if ((this.temptGoal == null || this.temptGoal.isRunning()) && !this.isTrusting() && this.isFood(itemstack) && player.distanceToSqr((Entity) this) < 9.0D) {
+        if ((this.temptGoal == null || this.temptGoal.isRunning()) && !this.isTrusting() && this.isFood(itemstack) && player.distanceToSqr(this) < 9.0D) {
             this.usePlayerItem(player, hand, itemstack);
             if (!this.level.isClientSide) {
                 // CraftBukkit - added event call and isCancelled check
@@ -241,7 +241,7 @@ public class Ocelot extends Animal {
     @Nullable
     @Override
     public Ocelot getBreedOffspring(ServerLevel world, AgeableMob entity) {
-        return (Ocelot) EntityType.OCELOT.create(world);
+        return EntityType.OCELOT.create(world);
     }
 
     @Override
@@ -279,12 +279,12 @@ public class Ocelot extends Animal {
             entityData = new AgeableMob.AgeableMobGroupData(1.0F);
         }
 
-        return super.finalizeSpawn(world, difficulty, spawnReason, (SpawnGroupData) entityData, entityNbt);
+        return super.finalizeSpawn(world, difficulty, spawnReason, entityData, entityNbt);
     }
 
     @Override
     public Vec3 getLeashOffset() {
-        return new Vec3(0.0D, (double) (0.5F * this.getEyeHeight()), (double) (this.getBbWidth() * 0.4F));
+        return new Vec3(0.0D, 0.5F * this.getEyeHeight(), this.getBbWidth() * 0.4F);
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/entity/animal/Panda.java b/src/main/java/net/minecraft/world/entity/animal/Panda.java
index a1051ee1a1e67afd53c64878f9c79a778d5b19eb..397d0fbeaf4574d4c8c70305593c268c7185eddc 100644
--- a/src/main/java/net/minecraft/world/entity/animal/Panda.java
+++ b/src/main/java/net/minecraft/world/entity/animal/Panda.java
@@ -116,7 +116,7 @@ public class Panda extends Animal {
     }
 
     public int getUnhappyCounter() {
-        return ((Integer) this.entityData.get(Panda.UNHAPPY_COUNTER)).intValue();
+        return this.entityData.get(Panda.UNHAPPY_COUNTER).intValue();
     }
 
     public void setUnhappyCounter(int askForBambooTicks) {
@@ -145,7 +145,7 @@ public class Panda extends Animal {
     }
 
     public boolean isEating() {
-        return ((Integer) this.entityData.get(Panda.EAT_COUNTER)).intValue() > 0;
+        return this.entityData.get(Panda.EAT_COUNTER).intValue() > 0;
     }
 
     public void eat(boolean eating) {
@@ -153,7 +153,7 @@ public class Panda extends Animal {
     }
 
     public int getEatCounter() {
-        return ((Integer) this.entityData.get(Panda.EAT_COUNTER)).intValue();
+        return this.entityData.get(Panda.EAT_COUNTER).intValue();
     }
 
     public void setEatCounter(int eatingTicks) {
@@ -169,7 +169,7 @@ public class Panda extends Animal {
     }
 
     public int getSneezeCounter() {
-        return ((Integer) this.entityData.get(Panda.SNEEZE_COUNTER)).intValue();
+        return this.entityData.get(Panda.SNEEZE_COUNTER).intValue();
     }
 
     public void setSneezeCounter(int sneezeProgress) {
@@ -177,7 +177,7 @@ public class Panda extends Animal {
     }
 
     public Panda.Gene getMainGene() {
-        return Panda.Gene.byId(((Byte) this.entityData.get(Panda.MAIN_GENE_ID)).intValue());
+        return Panda.Gene.byId(this.entityData.get(Panda.MAIN_GENE_ID).intValue());
     }
 
     public void setMainGene(Panda.Gene gene) {
@@ -189,7 +189,7 @@ public class Panda extends Animal {
     }
 
     public Panda.Gene getHiddenGene() {
-        return Panda.Gene.byId(((Byte) this.entityData.get(Panda.HIDDEN_GENE_ID)).intValue());
+        return Panda.Gene.byId(this.entityData.get(Panda.HIDDEN_GENE_ID).intValue());
     }
 
     public void setHiddenGene(Panda.Gene gene) {
@@ -220,11 +220,11 @@ public class Panda extends Animal {
     }
 
     private boolean getFlag(int bitmask) {
-        return (((Byte) this.entityData.get(Panda.DATA_ID_FLAGS)).intValue() & bitmask) != 0;
+        return (this.entityData.get(Panda.DATA_ID_FLAGS).intValue() & bitmask) != 0;
     }
 
     private void setFlag(int mask, boolean value) {
-        byte b0 = ((Byte) this.entityData.get(Panda.DATA_ID_FLAGS)).byteValue();
+        byte b0 = this.entityData.get(Panda.DATA_ID_FLAGS).byteValue();
 
         if (value) {
             this.entityData.set(Panda.DATA_ID_FLAGS, Byte.valueOf((byte) (b0 | mask)));
@@ -251,7 +251,7 @@ public class Panda extends Animal {
     @Nullable
     @Override
     public AgeableMob getBreedOffspring(ServerLevel world, AgeableMob entity) {
-        Panda entitypanda = (Panda) EntityType.PANDA.create(world);
+        Panda entitypanda = EntityType.PANDA.create(world);
 
         if (entitypanda != null) {
             if (entity instanceof Panda) {
@@ -530,7 +530,7 @@ public class Panda extends Animal {
 
         if (!this.level.isClientSide() && this.random.nextInt(700) == 0 && this.level.getGameRules().getBoolean(GameRules.RULE_DOMOBLOOT)) {
             this.forceDrops = true; // Paper
-            this.spawnAtLocation((ItemLike) Items.SLIME_BALL);
+            this.spawnAtLocation(Items.SLIME_BALL);
             this.forceDrops = false; // Paper
         }
 
@@ -571,7 +571,7 @@ public class Panda extends Animal {
             entityData = new AgeableMob.AgeableMobGroupData(0.2F);
         }
 
-        return super.finalizeSpawn(world, difficulty, spawnReason, (SpawnGroupData) entityData, entityNbt);
+        return super.finalizeSpawn(world, difficulty, spawnReason, entityData, entityNbt);
     }
 
     public void setGeneFromParents(Panda mother, @Nullable Panda father) {
@@ -921,7 +921,7 @@ public class Panda extends Animal {
             List<ItemEntity> list = Panda.this.level.getEntitiesOfClass(ItemEntity.class, Panda.this.getBoundingBox().inflate(8.0D, 8.0D, 8.0D), Panda.PANDA_ITEMS);
 
             if (!list.isEmpty() && Panda.this.getItemBySlot(EquipmentSlot.MAINHAND).isEmpty()) {
-                Panda.this.getNavigation().moveTo((Entity) list.get(0), 1.2000000476837158D);
+                Panda.this.getNavigation().moveTo(list.get(0), 1.2000000476837158D);
             } else if (!Panda.this.getItemBySlot(EquipmentSlot.MAINHAND).isEmpty()) {
                 Panda.this.tryToSit();
             }
@@ -1030,7 +1030,7 @@ public class Panda extends Animal {
                     if (this.lookAtType == Player.class) {
                         this.lookAt = this.mob.level.getNearestPlayer(this.lookAtContext, this.mob, this.mob.getX(), this.mob.getEyeY(), this.mob.getZ());
                     } else {
-                        this.lookAt = this.mob.level.getNearestEntity(this.mob.level.getEntitiesOfClass(this.lookAtType, this.mob.getBoundingBox().inflate((double) this.lookDistance, 3.0D, (double) this.lookDistance), (entityliving) -> {
+                        this.lookAt = this.mob.level.getNearestEntity(this.mob.level.getEntitiesOfClass(this.lookAtType, this.mob.getBoundingBox().inflate(this.lookDistance, 3.0D, this.lookDistance), (entityliving) -> {
                             return true;
                         }), this.lookAtContext, this.mob, this.mob.getX(), this.mob.getEyeY(), this.mob.getZ());
                     }
@@ -1067,8 +1067,8 @@ public class Panda extends Animal {
                     float f = this.panda.getYRot() * 0.017453292F;
                     float f1 = -Mth.sin(f);
                     float f2 = Mth.cos(f);
-                    int i = (double) Math.abs(f1) > 0.5D ? Mth.sign((double) f1) : 0;
-                    int j = (double) Math.abs(f2) > 0.5D ? Mth.sign((double) f2) : 0;
+                    int i = (double) Math.abs(f1) > 0.5D ? Mth.sign(f1) : 0;
+                    int j = (double) Math.abs(f2) > 0.5D ? Mth.sign(f2) : 0;
 
                     return this.panda.level.getBlockState(this.panda.blockPosition().offset(i, -1, j)).isAir() ? true : (this.panda.isPlayful() && this.panda.random.nextInt(reducedTickDelay(60)) == 1 ? true : this.panda.random.nextInt(reducedTickDelay(500)) == 1);
                 }
@@ -1107,14 +1107,14 @@ public class Panda extends Animal {
             if (!this.panda.gotBamboo && !this.panda.didBite) {
                 return super.canContinueToUse();
             } else {
-                this.panda.setTarget((LivingEntity) null);
+                this.panda.setTarget(null);
                 return false;
             }
         }
 
         @Override
         protected void alertOther(Mob mob, LivingEntity target) {
-            if (mob instanceof Panda && ((Panda) mob).isAggressive()) {
+            if (mob instanceof Panda && mob.isAggressive()) {
                 mob.setTarget(target, EntityTargetEvent.TargetReason.TARGET_ATTACKED_ENTITY, true); // CraftBukkit
             }
 
diff --git a/src/main/java/net/minecraft/world/entity/animal/Parrot.java b/src/main/java/net/minecraft/world/entity/animal/Parrot.java
index 980e3c43bef210cb1b8d040a4be4b70740063659..3c0ef948ad7a97b8b35329faa821c52dd40047a1 100644
--- a/src/main/java/net/minecraft/world/entity/animal/Parrot.java
+++ b/src/main/java/net/minecraft/world/entity/animal/Parrot.java
@@ -81,7 +81,7 @@ public class Parrot extends ShoulderRidingEntity implements VariantHolder<Parrot
     };
     private static final Item POISONOUS_FOOD = Items.COOKIE;
     private static final Set<Item> TAME_FOOD = Sets.newHashSet(Items.WHEAT_SEEDS, Items.MELON_SEEDS, Items.PUMPKIN_SEEDS, Items.BEETROOT_SEEDS);
-    static final Map<EntityType<?>, SoundEvent> MOB_SOUND_MAP = (Map) Util.make(Maps.newHashMap(), (hashmap) -> {
+    static final Map<EntityType<?>, SoundEvent> MOB_SOUND_MAP = Util.make(Maps.newHashMap(), (hashmap) -> {
         hashmap.put(EntityType.BLAZE, SoundEvents.PARROT_IMITATE_BLAZE);
         hashmap.put(EntityType.CAVE_SPIDER, SoundEvents.PARROT_IMITATE_SPIDER);
         hashmap.put(EntityType.CREEPER, SoundEvents.PARROT_IMITATE_CREEPER);
@@ -143,7 +143,7 @@ public class Parrot extends ShoulderRidingEntity implements VariantHolder<Parrot
             entityData = new AgeableMob.AgeableMobGroupData(false);
         }
 
-        return super.finalizeSpawn(world, difficulty, spawnReason, (SpawnGroupData) entityData, entityNbt);
+        return super.finalizeSpawn(world, difficulty, spawnReason, entityData, entityNbt);
     }
 
     @Override
@@ -231,12 +231,12 @@ public class Parrot extends ShoulderRidingEntity implements VariantHolder<Parrot
             List<Mob> list = world.getEntitiesOfClass(Mob.class, parrot.getBoundingBox().inflate(20.0D), Parrot.NOT_PARROT_PREDICATE);
 
             if (!list.isEmpty()) {
-                Mob entityinsentient = (Mob) list.get(world.random.nextInt(list.size()));
+                Mob entityinsentient = list.get(world.random.nextInt(list.size()));
 
                 if (!entityinsentient.isSilent()) {
                     SoundEvent soundeffect = Parrot.getImitatedSound(entityinsentient.getType());
 
-                    world.playSound((Player) null, parrot.getX(), parrot.getY(), parrot.getZ(), soundeffect, parrot.getSoundSource(), 0.7F, Parrot.getPitch(world.random));
+                    world.playSound(null, parrot.getX(), parrot.getY(), parrot.getZ(), soundeffect, parrot.getSoundSource(), 0.7F, Parrot.getPitch(world.random));
                     return true;
                 }
             }
@@ -257,7 +257,7 @@ public class Parrot extends ShoulderRidingEntity implements VariantHolder<Parrot
             }
 
             if (!this.isSilent()) {
-                this.level.playSound((Player) null, this.getX(), this.getY(), this.getZ(), SoundEvents.PARROT_EAT, this.getSoundSource(), 1.0F, 1.0F + (this.random.nextFloat() - this.random.nextFloat()) * 0.2F);
+                this.level.playSound(null, this.getX(), this.getY(), this.getZ(), SoundEvents.PARROT_EAT, this.getSoundSource(), 1.0F, 1.0F + (this.random.nextFloat() - this.random.nextFloat()) * 0.2F);
             }
 
             if (!this.level.isClientSide) {
@@ -335,14 +335,14 @@ public class Parrot extends ShoulderRidingEntity implements VariantHolder<Parrot
         if (world.getDifficulty() != Difficulty.PEACEFUL && random.nextInt(1000) == 0) {
             List<EntityType<?>> list = Lists.newArrayList(Parrot.MOB_SOUND_MAP.keySet());
 
-            return Parrot.getImitatedSound((EntityType) list.get(random.nextInt(list.size())));
+            return Parrot.getImitatedSound(list.get(random.nextInt(list.size())));
         } else {
             return SoundEvents.PARROT_AMBIENT;
         }
     }
 
     private static SoundEvent getImitatedSound(EntityType<?> imitate) {
-        return (SoundEvent) Parrot.MOB_SOUND_MAP.getOrDefault(imitate, SoundEvents.PARROT_AMBIENT);
+        return Parrot.MOB_SOUND_MAP.getOrDefault(imitate, SoundEvents.PARROT_AMBIENT);
     }
 
     @Override
@@ -444,7 +444,7 @@ public class Parrot extends ShoulderRidingEntity implements VariantHolder<Parrot
 
     @Override
     public Vec3 getLeashOffset() {
-        return new Vec3(0.0D, (double) (0.5F * this.getEyeHeight()), (double) (this.getBbWidth() * 0.4F));
+        return new Vec3(0.0D, 0.5F * this.getEyeHeight(), this.getBbWidth() * 0.4F);
     }
 
     public static enum Variant implements StringRepresentable {
diff --git a/src/main/java/net/minecraft/world/entity/animal/Pig.java b/src/main/java/net/minecraft/world/entity/animal/Pig.java
index 927d43e3bad4979419cef3f485d8edd8ffba9d97..64a127f2129482719d868a4f0d9b2870eb4330ab 100644
--- a/src/main/java/net/minecraft/world/entity/animal/Pig.java
+++ b/src/main/java/net/minecraft/world/entity/animal/Pig.java
@@ -179,7 +179,7 @@ public class Pig extends Animal implements ItemSteerable, Saddleable {
     protected void dropEquipment() {
         super.dropEquipment();
         if (this.isSaddled()) {
-            this.spawnAtLocation((ItemLike) Items.SADDLE);
+            this.spawnAtLocation(Items.SADDLE);
         }
 
     }
@@ -193,7 +193,7 @@ public class Pig extends Animal implements ItemSteerable, Saddleable {
     public void equipSaddle(@Nullable SoundSource sound) {
         this.steering.setSaddle(true);
         if (sound != null) {
-            this.level.playSound((Player) null, (Entity) this, SoundEvents.PIG_SADDLE, sound, 0.5F, 1.0F);
+            this.level.playSound(null, this, SoundEvents.PIG_SADDLE, sound, 0.5F, 1.0F);
         }
 
     }
@@ -240,7 +240,7 @@ public class Pig extends Animal implements ItemSteerable, Saddleable {
     @Override
     public void thunderHit(ServerLevel world, LightningBolt lightning) {
         if (world.getDifficulty() != Difficulty.PEACEFUL) {
-            ZombifiedPiglin entitypigzombie = (ZombifiedPiglin) EntityType.ZOMBIFIED_PIGLIN.create(world);
+            ZombifiedPiglin entitypigzombie = EntityType.ZOMBIFIED_PIGLIN.create(world);
 
             if (entitypigzombie != null) {
                 entitypigzombie.setItemSlot(EquipmentSlot.MAINHAND, new ItemStack(Items.GOLDEN_SWORD));
@@ -293,7 +293,7 @@ public class Pig extends Animal implements ItemSteerable, Saddleable {
     @Nullable
     @Override
     public Pig getBreedOffspring(ServerLevel world, AgeableMob entity) {
-        return (Pig) EntityType.PIG.create(world);
+        return EntityType.PIG.create(world);
     }
 
     @Override
@@ -303,6 +303,6 @@ public class Pig extends Animal implements ItemSteerable, Saddleable {
 
     @Override
     public Vec3 getLeashOffset() {
-        return new Vec3(0.0D, (double) (0.6F * this.getEyeHeight()), (double) (this.getBbWidth() * 0.4F));
+        return new Vec3(0.0D, 0.6F * this.getEyeHeight(), this.getBbWidth() * 0.4F);
     }
 }
diff --git a/src/main/java/net/minecraft/world/entity/animal/Pufferfish.java b/src/main/java/net/minecraft/world/entity/animal/Pufferfish.java
index 0135ac52f8453f96038d0818059f54a088a50d93..32422c39bfc7132bcf328b08c306e921936aaffe 100644
--- a/src/main/java/net/minecraft/world/entity/animal/Pufferfish.java
+++ b/src/main/java/net/minecraft/world/entity/animal/Pufferfish.java
@@ -52,7 +52,7 @@ public class Pufferfish extends AbstractFish {
     }
 
     public int getPuffState() {
-        return ((Integer) this.entityData.get(Pufferfish.PUFF_STATE)).intValue();
+        return this.entityData.get(Pufferfish.PUFF_STATE).intValue();
     }
 
     public void setPuffState(int puffState) {
diff --git a/src/main/java/net/minecraft/world/entity/animal/Rabbit.java b/src/main/java/net/minecraft/world/entity/animal/Rabbit.java
index c7539fa0c2446680d251f935936a1eaa2c3dd9a3..078c0a6ee7e807f892b25ac23526d42d9ccd9646 100644
--- a/src/main/java/net/minecraft/world/entity/animal/Rabbit.java
+++ b/src/main/java/net/minecraft/world/entity/animal/Rabbit.java
@@ -202,7 +202,7 @@ public class Rabbit extends Animal implements VariantHolder<Rabbit.Variant> {
             if (this.getVariant() == Rabbit.Variant.EVIL && this.jumpDelayTicks == 0) {
                 LivingEntity entityliving = this.getTarget();
 
-                if (entityliving != null && this.distanceToSqr((Entity) entityliving) < 16.0D) {
+                if (entityliving != null && this.distanceToSqr(entityliving) < 16.0D) {
                     this.facePoint(entityliving.getX(), entityliving.getZ());
                     this.moveControl.setWantedPosition(entityliving.getX(), entityliving.getY(), entityliving.getZ(), this.moveControl.getSpeedModifier());
                     this.startJumping();
@@ -335,7 +335,7 @@ public class Rabbit extends Animal implements VariantHolder<Rabbit.Variant> {
     @Nullable
     @Override
     public Rabbit getBreedOffspring(ServerLevel world, AgeableMob entity) {
-        Rabbit entityrabbit = (Rabbit) EntityType.RABBIT.create(world);
+        Rabbit entityrabbit = EntityType.RABBIT.create(world);
 
         if (entityrabbit != null) {
             Rabbit.Variant entityrabbit_variant = Rabbit.getRandomRabbitVariant(world, this.blockPosition());
@@ -399,14 +399,14 @@ public class Rabbit extends Animal implements VariantHolder<Rabbit.Variant> {
         }
 
         this.setVariant(entityrabbit_variant);
-        return super.finalizeSpawn(world, difficulty, spawnReason, (SpawnGroupData) entityData, entityNbt);
+        return super.finalizeSpawn(world, difficulty, spawnReason, entityData, entityNbt);
     }
 
     private static Rabbit.Variant getRandomRabbitVariant(LevelAccessor world, BlockPos pos) {
         Holder<Biome> holder = world.getBiome(pos);
         int i = world.getRandom().nextInt(100);
 
-        return ((Biome) holder.value()).getPrecipitation() == Biome.Precipitation.SNOW ? (i < 80 ? Rabbit.Variant.WHITE : Rabbit.Variant.WHITE_SPLOTCHED) : (holder.is(BiomeTags.ONLY_ALLOWS_SNOW_AND_GOLD_RABBITS) ? Rabbit.Variant.GOLD : (i < 50 ? Rabbit.Variant.BROWN : (i < 90 ? Rabbit.Variant.SALT : Rabbit.Variant.BLACK)));
+        return holder.value().getPrecipitation() == Biome.Precipitation.SNOW ? (i < 80 ? Rabbit.Variant.WHITE : Rabbit.Variant.WHITE_SPLOTCHED) : (holder.is(BiomeTags.ONLY_ALLOWS_SNOW_AND_GOLD_RABBITS) ? Rabbit.Variant.GOLD : (i < 50 ? Rabbit.Variant.BROWN : (i < 90 ? Rabbit.Variant.SALT : Rabbit.Variant.BLACK)));
     }
 
     public static boolean checkRabbitSpawnRules(EntityType<Rabbit> entity, LevelAccessor world, MobSpawnType spawnReason, BlockPos pos, RandomSource random) {
@@ -431,7 +431,7 @@ public class Rabbit extends Animal implements VariantHolder<Rabbit.Variant> {
 
     @Override
     public Vec3 getLeashOffset() {
-        return new Vec3(0.0D, (double) (0.6F * this.getEyeHeight()), (double) (this.getBbWidth() * 0.4F));
+        return new Vec3(0.0D, 0.6F * this.getEyeHeight(), this.getBbWidth() * 0.4F);
     }
 
     public static class RabbitJumpControl extends JumpControl {
@@ -565,7 +565,7 @@ public class Rabbit extends Animal implements VariantHolder<Rabbit.Variant> {
         @Override
         public void tick() {
             super.tick();
-            this.rabbit.getLookControl().setLookAt((double) this.blockPos.getX() + 0.5D, (double) (this.blockPos.getY() + 1), (double) this.blockPos.getZ() + 0.5D, 10.0F, (float) this.rabbit.getMaxHeadXRot());
+            this.rabbit.getLookControl().setLookAt((double) this.blockPos.getX() + 0.5D, this.blockPos.getY() + 1, (double) this.blockPos.getZ() + 0.5D, 10.0F, (float) this.rabbit.getMaxHeadXRot());
             if (this.isReachedTarget()) {
                 Level world = this.rabbit.level;
                 BlockPos blockposition = this.blockPos.above();
@@ -573,7 +573,7 @@ public class Rabbit extends Animal implements VariantHolder<Rabbit.Variant> {
                 Block block = iblockdata.getBlock();
 
                 if (this.canRaid && block instanceof CarrotBlock) {
-                    int i = ((Integer) iblockdata.getValue(CarrotBlock.AGE)).intValue();
+                    int i = iblockdata.getValue(CarrotBlock.AGE).intValue();
 
                     if (i == 0) {
                         // CraftBukkit start
@@ -593,7 +593,7 @@ public class Rabbit extends Animal implements VariantHolder<Rabbit.Variant> {
                             return;
                         }
                         // CraftBukkit end
-                        world.setBlock(blockposition, (BlockState) iblockdata.setValue(CarrotBlock.AGE, Integer.valueOf(i - 1)), 2);
+                        world.setBlock(blockposition, iblockdata.setValue(CarrotBlock.AGE, Integer.valueOf(i - 1)), 2);
                         world.levelEvent(2001, blockposition, Block.getId(iblockdata));
                     }
 
@@ -658,7 +658,7 @@ public class Rabbit extends Animal implements VariantHolder<Rabbit.Variant> {
 
         @Override
         protected double getAttackReachSqr(LivingEntity entity) {
-            return (double) (4.0F + entity.getBbWidth());
+            return 4.0F + entity.getBbWidth();
         }
     }
 
diff --git a/src/main/java/net/minecraft/world/entity/animal/Sheep.java b/src/main/java/net/minecraft/world/entity/animal/Sheep.java
index 74ae386d0d93f80d8222a13919202a116e58f515..622f5ae43185b67d4833fe5fb0ef0117b4dc268d 100644
--- a/src/main/java/net/minecraft/world/entity/animal/Sheep.java
+++ b/src/main/java/net/minecraft/world/entity/animal/Sheep.java
@@ -73,7 +73,7 @@ public class Sheep extends Animal implements Shearable {
 
     private static final int EAT_ANIMATION_TICKS = 40;
     private static final EntityDataAccessor<Byte> DATA_WOOL_ID = SynchedEntityData.defineId(Sheep.class, EntityDataSerializers.BYTE);
-    private static final Map<DyeColor, ItemLike> ITEM_BY_DYE = (Map) Util.make(Maps.newEnumMap(DyeColor.class), (enummap) -> {
+    private static final Map<DyeColor, ItemLike> ITEM_BY_DYE = Util.make(Maps.newEnumMap(DyeColor.class), (enummap) -> {
         enummap.put(DyeColor.WHITE, Blocks.WHITE_WOOL);
         enummap.put(DyeColor.ORANGE, Blocks.ORANGE_WOOL);
         enummap.put(DyeColor.MAGENTA, Blocks.MAGENTA_WOOL);
@@ -109,7 +109,7 @@ public class Sheep extends Animal implements Shearable {
     }
 
     public static float[] getColorArray(DyeColor dyeColor) {
-        return (float[]) Sheep.COLORARRAY_BY_COLOR.get(dyeColor);
+        return Sheep.COLORARRAY_BY_COLOR.get(dyeColor);
     }
 
     public Sheep(EntityType<? extends Sheep> type, Level world) {
@@ -270,17 +270,17 @@ public class Sheep extends Animal implements Shearable {
 
     @Override
     public void shear(SoundSource shearedSoundCategory) {
-        this.level.playSound((Player) null, (Entity) this, SoundEvents.SHEEP_SHEAR, shearedSoundCategory, 1.0F, 1.0F);
+        this.level.playSound(null, this, SoundEvents.SHEEP_SHEAR, shearedSoundCategory, 1.0F, 1.0F);
         this.setSheared(true);
         int i = 1 + this.random.nextInt(3);
 
         for (int j = 0; j < i; ++j) {
             this.forceDrops = true; // CraftBukkit
-            ItemEntity entityitem = this.spawnAtLocation((ItemLike) Sheep.ITEM_BY_DYE.get(this.getColor()), 1);
+            ItemEntity entityitem = this.spawnAtLocation(Sheep.ITEM_BY_DYE.get(this.getColor()), 1);
             this.forceDrops = false; // CraftBukkit
 
             if (entityitem != null) {
-                entityitem.setDeltaMovement(entityitem.getDeltaMovement().add((double) ((this.random.nextFloat() - this.random.nextFloat()) * 0.1F), (double) (this.random.nextFloat() * 0.05F), (double) ((this.random.nextFloat() - this.random.nextFloat()) * 0.1F)));
+                entityitem.setDeltaMovement(entityitem.getDeltaMovement().add((this.random.nextFloat() - this.random.nextFloat()) * 0.1F, this.random.nextFloat() * 0.05F, (this.random.nextFloat() - this.random.nextFloat()) * 0.1F));
             }
         }
 
@@ -326,21 +326,21 @@ public class Sheep extends Animal implements Shearable {
     }
 
     public DyeColor getColor() {
-        return DyeColor.byId(((Byte) this.entityData.get(Sheep.DATA_WOOL_ID)).intValue() & 15);
+        return DyeColor.byId(this.entityData.get(Sheep.DATA_WOOL_ID).intValue() & 15);
     }
 
     public void setColor(DyeColor color) {
-        byte b0 = ((Byte) this.entityData.get(Sheep.DATA_WOOL_ID)).byteValue();
+        byte b0 = this.entityData.get(Sheep.DATA_WOOL_ID).byteValue();
 
         this.entityData.set(Sheep.DATA_WOOL_ID, Byte.valueOf((byte) (b0 & 240 | color.getId() & 15)));
     }
 
     public boolean isSheared() {
-        return (((Byte) this.entityData.get(Sheep.DATA_WOOL_ID)).intValue() & 16) != 0;
+        return (this.entityData.get(Sheep.DATA_WOOL_ID).intValue() & 16) != 0;
     }
 
     public void setSheared(boolean sheared) {
-        byte b0 = ((Byte) this.entityData.get(Sheep.DATA_WOOL_ID)).byteValue();
+        byte b0 = this.entityData.get(Sheep.DATA_WOOL_ID).byteValue();
 
         if (sheared) {
             this.entityData.set(Sheep.DATA_WOOL_ID, Byte.valueOf((byte) (b0 | 16)));
@@ -402,13 +402,13 @@ public class Sheep extends Animal implements Shearable {
         Objects.requireNonNull(DyeItem.class);
         optional = optional.filter(DyeItem.class::isInstance);
         Objects.requireNonNull(DyeItem.class);
-        return (DyeColor) optional.map(DyeItem.class::cast).map(DyeItem::getDyeColor).orElseGet(() -> {
+        return optional.map(DyeItem.class::cast).map(DyeItem::getDyeColor).orElseGet(() -> {
             return this.level.random.nextBoolean() ? enumcolor : enumcolor1;
         });
     }
 
     private static CraftingContainer makeContainer(DyeColor firstColor, DyeColor secondColor) {
-        CraftingContainer inventorycrafting = new CraftingContainer(new AbstractContainerMenu((MenuType) null, -1) {
+        CraftingContainer inventorycrafting = new CraftingContainer(new AbstractContainerMenu(null, -1) {
             @Override
             public ItemStack quickMoveStack(Player player, int slot) {
                 return ItemStack.EMPTY;
diff --git a/src/main/java/net/minecraft/world/entity/animal/SnowGolem.java b/src/main/java/net/minecraft/world/entity/animal/SnowGolem.java
index 2ba45ff931749bd3e99238d244d798881f612d4b..cac118f1f11e374ab5147c7b646842b44b0fa507 100644
--- a/src/main/java/net/minecraft/world/entity/animal/SnowGolem.java
+++ b/src/main/java/net/minecraft/world/entity/animal/SnowGolem.java
@@ -103,7 +103,7 @@ public class SnowGolem extends AbstractGolem implements Shearable, RangedAttackM
             int j = Mth.floor(this.getY());
             int k = Mth.floor(this.getZ());
             BlockPos blockposition = new BlockPos(i, j, k);
-            Biome biomebase = (Biome) this.level.getBiome(blockposition).value();
+            Biome biomebase = this.level.getBiome(blockposition).value();
 
             if (biomebase.shouldSnowGolemBurn(blockposition)) {
                 this.hurt(CraftEventFactory.MELTING, 1.0F); // CraftBukkit - DamageSource.BURN -> CraftEventFactory.MELTING
@@ -179,7 +179,7 @@ public class SnowGolem extends AbstractGolem implements Shearable, RangedAttackM
 
     @Override
     public void shear(SoundSource shearedSoundCategory) {
-        this.level.playSound((Player) null, (Entity) this, SoundEvents.SNOW_GOLEM_SHEAR, shearedSoundCategory, 1.0F, 1.0F);
+        this.level.playSound(null, this, SoundEvents.SNOW_GOLEM_SHEAR, shearedSoundCategory, 1.0F, 1.0F);
         if (!this.level.isClientSide()) {
             this.setPumpkin(false);
             this.forceDrops = true; // CraftBukkit
@@ -195,11 +195,11 @@ public class SnowGolem extends AbstractGolem implements Shearable, RangedAttackM
     }
 
     public boolean hasPumpkin() {
-        return (((Byte) this.entityData.get(SnowGolem.DATA_PUMPKIN_ID)).intValue() & 16) != 0;
+        return (this.entityData.get(SnowGolem.DATA_PUMPKIN_ID).intValue() & 16) != 0;
     }
 
     public void setPumpkin(boolean hasPumpkin) {
-        byte b0 = ((Byte) this.entityData.get(SnowGolem.DATA_PUMPKIN_ID)).byteValue();
+        byte b0 = this.entityData.get(SnowGolem.DATA_PUMPKIN_ID).byteValue();
 
         if (hasPumpkin) {
             this.entityData.set(SnowGolem.DATA_PUMPKIN_ID, Byte.valueOf((byte) (b0 | 16)));
@@ -229,6 +229,6 @@ public class SnowGolem extends AbstractGolem implements Shearable, RangedAttackM
 
     @Override
     public Vec3 getLeashOffset() {
-        return new Vec3(0.0D, (double) (0.75F * this.getEyeHeight()), (double) (this.getBbWidth() * 0.4F));
+        return new Vec3(0.0D, 0.75F * this.getEyeHeight(), this.getBbWidth() * 0.4F);
     }
 }
diff --git a/src/main/java/net/minecraft/world/entity/animal/Squid.java b/src/main/java/net/minecraft/world/entity/animal/Squid.java
index 623de851962d3b8138590912db58bb308fd28f14..a0440542935bd39e6e6d087f1a57a318baccd477 100644
--- a/src/main/java/net/minecraft/world/entity/animal/Squid.java
+++ b/src/main/java/net/minecraft/world/entity/animal/Squid.java
@@ -140,7 +140,7 @@ public class Squid extends WaterAnimal {
             }
 
             if (!this.level.isClientSide) {
-                this.setDeltaMovement((double) (this.tx * this.speed), (double) (this.ty * this.speed), (double) (this.tz * this.speed));
+                this.setDeltaMovement(this.tx * this.speed, this.ty * this.speed, this.tz * this.speed);
             }
 
             Vec3 vec3d = this.getDeltaMovement();
@@ -275,7 +275,7 @@ public class Squid extends WaterAnimal {
         public boolean canUse() {
             LivingEntity entityliving = Squid.this.getLastHurtByMob();
 
-            return Squid.this.isInWater() && entityliving != null ? Squid.this.distanceToSqr((Entity) entityliving) < 100.0D : false;
+            return Squid.this.isInWater() && entityliving != null ? Squid.this.distanceToSqr(entityliving) < 100.0D : false;
         }
 
         @Override
diff --git a/src/main/java/net/minecraft/world/entity/animal/Turtle.java b/src/main/java/net/minecraft/world/entity/animal/Turtle.java
index 2f61bb50538eb6edb341f37aa6674d1d0c0b8309..ea14a29f5f58dd6aed9fc40b19d4f058d59c3194 100644
--- a/src/main/java/net/minecraft/world/entity/animal/Turtle.java
+++ b/src/main/java/net/minecraft/world/entity/animal/Turtle.java
@@ -87,7 +87,7 @@ public class Turtle extends Animal {
     }
 
     public BlockPos getHomePos() {
-        return (BlockPos) this.entityData.get(Turtle.HOME_POS);
+        return this.entityData.get(Turtle.HOME_POS);
     }
 
     void setTravelPos(BlockPos pos) {
@@ -95,11 +95,11 @@ public class Turtle extends Animal {
     }
 
     BlockPos getTravelPos() {
-        return (BlockPos) this.entityData.get(Turtle.TRAVEL_POS);
+        return this.entityData.get(Turtle.TRAVEL_POS);
     }
 
     public boolean hasEgg() {
-        return ((Boolean) this.entityData.get(Turtle.HAS_EGG)).booleanValue();
+        return this.entityData.get(Turtle.HAS_EGG).booleanValue();
     }
 
     public void setHasEgg(boolean hasEgg) {
@@ -107,7 +107,7 @@ public class Turtle extends Animal {
     }
 
     public boolean isLayingEgg() {
-        return ((Boolean) this.entityData.get(Turtle.LAYING_EGG)).booleanValue();
+        return this.entityData.get(Turtle.LAYING_EGG).booleanValue();
     }
 
     void setLayingEgg(boolean diggingSand) {
@@ -116,7 +116,7 @@ public class Turtle extends Animal {
     }
 
     public boolean isGoingHome() {
-        return ((Boolean) this.entityData.get(Turtle.GOING_HOME)).booleanValue();
+        return this.entityData.get(Turtle.GOING_HOME).booleanValue();
     }
 
     public void setGoingHome(boolean landBound) {
@@ -124,7 +124,7 @@ public class Turtle extends Animal {
     }
 
     public boolean isTravelling() {
-        return ((Boolean) this.entityData.get(Turtle.TRAVELLING)).booleanValue();
+        return this.entityData.get(Turtle.TRAVELLING).booleanValue();
     }
 
     public void setTravelling(boolean traveling) {
@@ -277,7 +277,7 @@ public class Turtle extends Animal {
     @Nullable
     @Override
     public AgeableMob getBreedOffspring(ServerLevel world, AgeableMob entity) {
-        return (AgeableMob) EntityType.TURTLE.create(world);
+        return EntityType.TURTLE.create(world);
     }
 
     @Override
@@ -404,9 +404,9 @@ public class Turtle extends Animal {
                 BlockPos blockposition = this.lookForWater(this.mob.level, this.mob, 7);
 
                 if (blockposition != null) {
-                    this.posX = (double) blockposition.getX();
-                    this.posY = (double) blockposition.getY();
-                    this.posZ = (double) blockposition.getZ();
+                    this.posX = blockposition.getX();
+                    this.posY = blockposition.getY();
+                    this.posZ = blockposition.getZ();
                     return true;
                 } else {
                     return this.findRandomPosition();
@@ -439,7 +439,7 @@ public class Turtle extends Animal {
 
             if (entityplayer != null) {
                 entityplayer.awardStat(Stats.ANIMALS_BRED);
-                CriteriaTriggers.BRED_ANIMALS.trigger(entityplayer, this.animal, this.partner, (AgeableMob) null);
+                CriteriaTriggers.BRED_ANIMALS.trigger(entityplayer, this.animal, this.partner, null);
             }
 
             this.turtle.setHasEgg(true);
@@ -491,8 +491,8 @@ public class Turtle extends Animal {
                     int eggCount = this.turtle.random.nextInt(4) + 1;
                     com.destroystokyo.paper.event.entity.TurtleLayEggEvent layEggEvent = new com.destroystokyo.paper.event.entity.TurtleLayEggEvent((org.bukkit.entity.Turtle) this.turtle.getBukkitEntity(), io.papermc.paper.util.MCUtil.toLocation(this.turtle.level, this.blockPos.above()), eggCount);
                     if (layEggEvent.callEvent() && !org.bukkit.craftbukkit.event.CraftEventFactory.callEntityChangeBlockEvent(this.turtle, this.blockPos.above(), Blocks.TURTLE_EGG.defaultBlockState().setValue(TurtleEggBlock.EGGS, Integer.valueOf(layEggEvent.getEggCount()))).isCancelled()) {
-                    world.playSound((Player) null, blockposition, SoundEvents.TURTLE_LAY_EGG, SoundSource.BLOCKS, 0.3F, 0.9F + world.random.nextFloat() * 0.2F);
-                    world.setBlock(this.blockPos.above(), (BlockState) Blocks.TURTLE_EGG.defaultBlockState().setValue(TurtleEggBlock.EGGS, Integer.valueOf(layEggEvent.getEggCount())), 3);
+                    world.playSound(null, blockposition, SoundEvents.TURTLE_LAY_EGG, SoundSource.BLOCKS, 0.3F, 0.9F + world.random.nextFloat() * 0.2F);
+                    world.setBlock(this.blockPos.above(), Blocks.TURTLE_EGG.defaultBlockState().setValue(TurtleEggBlock.EGGS, Integer.valueOf(layEggEvent.getEggCount())), 3);
                     }
                     // CraftBukkit end
                     this.turtle.setHasEgg(false);
diff --git a/src/main/java/net/minecraft/world/entity/animal/Wolf.java b/src/main/java/net/minecraft/world/entity/animal/Wolf.java
index eb78f81150ea2eba565e4659fe05dcda9cad8042..219d0121845c03f2dcb1c2e87f43875727c2b8cf 100644
--- a/src/main/java/net/minecraft/world/entity/animal/Wolf.java
+++ b/src/main/java/net/minecraft/world/entity/animal/Wolf.java
@@ -255,7 +255,7 @@ public class Wolf extends TamableAnimal implements NeutralMob {
                         float f1 = (this.random.nextFloat() * 2.0F - 1.0F) * this.getBbWidth() * 0.5F;
                         float f2 = (this.random.nextFloat() * 2.0F - 1.0F) * this.getBbWidth() * 0.5F;
 
-                        this.level.addParticle(ParticleTypes.SPLASH, this.getX() + (double) f1, (double) (f + 0.8F), this.getZ() + (double) f2, vec3d.x, vec3d.y, vec3d.z);
+                        this.level.addParticle(ParticleTypes.SPLASH, this.getX() + (double) f1, f + 0.8F, this.getZ() + (double) f2, vec3d.x, vec3d.y, vec3d.z);
                     }
                 }
             }
@@ -382,7 +382,7 @@ public class Wolf extends TamableAnimal implements NeutralMob {
                         this.setOrderedToSit(!this.isOrderedToSit());
                         this.jumping = false;
                         this.navigation.stop();
-                        this.setTarget((LivingEntity) null, TargetReason.FORGOT_TARGET, true); // CraftBukkit - reason
+                        this.setTarget(null, TargetReason.FORGOT_TARGET, true); // CraftBukkit - reason
                         return InteractionResult.SUCCESS;
                     }
 
@@ -415,7 +415,7 @@ public class Wolf extends TamableAnimal implements NeutralMob {
                 if (this.random.nextInt(3) == 0 && !CraftEventFactory.callEntityTameEvent(this, player).isCancelled()) {
                     this.tame(player);
                     this.navigation.stop();
-                    this.setTarget((LivingEntity) null);
+                    this.setTarget(null);
                     this.setOrderedToSit(true);
                     this.level.broadcastEntityEvent(this, (byte) 7);
                 } else {
@@ -461,7 +461,7 @@ public class Wolf extends TamableAnimal implements NeutralMob {
 
     @Override
     public int getRemainingPersistentAngerTime() {
-        return ((Integer) this.entityData.get(Wolf.DATA_REMAINING_ANGER_TIME)).intValue();
+        return this.entityData.get(Wolf.DATA_REMAINING_ANGER_TIME).intValue();
     }
 
     @Override
@@ -486,7 +486,7 @@ public class Wolf extends TamableAnimal implements NeutralMob {
     }
 
     public DyeColor getCollarColor() {
-        return DyeColor.byId(((Integer) this.entityData.get(Wolf.DATA_COLLAR_COLOR)).intValue());
+        return DyeColor.byId(this.entityData.get(Wolf.DATA_COLLAR_COLOR).intValue());
     }
 
     public void setCollarColor(DyeColor color) {
@@ -496,7 +496,7 @@ public class Wolf extends TamableAnimal implements NeutralMob {
     @Nullable
     @Override
     public Wolf getBreedOffspring(ServerLevel world, AgeableMob entity) {
-        Wolf entitywolf = (Wolf) EntityType.WOLF.create(world);
+        Wolf entitywolf = EntityType.WOLF.create(world);
 
         if (entitywolf != null) {
             UUID uuid = this.getOwnerUUID();
@@ -530,7 +530,7 @@ public class Wolf extends TamableAnimal implements NeutralMob {
     }
 
     public boolean isInterested() {
-        return ((Boolean) this.entityData.get(Wolf.DATA_INTERESTED_ID)).booleanValue();
+        return this.entityData.get(Wolf.DATA_INTERESTED_ID).booleanValue();
     }
 
     @Override
@@ -555,7 +555,7 @@ public class Wolf extends TamableAnimal implements NeutralMob {
 
     @Override
     public Vec3 getLeashOffset() {
-        return new Vec3(0.0D, (double) (0.6F * this.getEyeHeight()), (double) (this.getBbWidth() * 0.4F));
+        return new Vec3(0.0D, 0.6F * this.getEyeHeight(), this.getBbWidth() * 0.4F);
     }
 
     public static boolean checkWolfSpawnRules(EntityType<Wolf> type, LevelAccessor world, MobSpawnType spawnReason, BlockPos pos, RandomSource random) {
@@ -594,13 +594,13 @@ public class Wolf extends TamableAnimal implements NeutralMob {
 
         @Override
         public void start() {
-            Wolf.this.setTarget((LivingEntity) null);
+            Wolf.this.setTarget(null);
             super.start();
         }
 
         @Override
         public void tick() {
-            Wolf.this.setTarget((LivingEntity) null);
+            Wolf.this.setTarget(null);
             super.tick();
         }
     }
diff --git a/src/main/java/net/minecraft/world/entity/animal/allay/Allay.java b/src/main/java/net/minecraft/world/entity/animal/allay/Allay.java
index 31f627f716ee3192096852e2e91a4350689c61d8..514976ae3e8be9aa062edbfb275d15b7c5e0f1b5 100644
--- a/src/main/java/net/minecraft/world/entity/animal/allay/Allay.java
+++ b/src/main/java/net/minecraft/world/entity/animal/allay/Allay.java
@@ -281,7 +281,7 @@ public class Allay extends PathfinderMob implements InventoryCarrier {
                 this.spinningAnimationTicks0 = 0.0F;
             }
         } else {
-            ((VibrationListener) this.dynamicVibrationListener.getListener()).tick(this.level);
+            this.dynamicVibrationListener.getListener().tick(this.level);
             if (this.isPanicking()) {
                 this.setDancing(false);
             }
@@ -320,7 +320,7 @@ public class Allay extends PathfinderMob implements InventoryCarrier {
             }
             // CraftBukkit end
             this.level.broadcastEntityEvent(this, (byte) 18);
-            this.level.playSound(player, (Entity) this, SoundEvents.AMETHYST_BLOCK_CHIME, SoundSource.NEUTRAL, 2.0F, 1.0F);
+            this.level.playSound(player, this, SoundEvents.AMETHYST_BLOCK_CHIME, SoundSource.NEUTRAL, 2.0F, 1.0F);
             this.removeInteractionItem(player, itemstack);
             return InteractionResult.SUCCESS;
         } else if (itemstack1.isEmpty() && !itemstack.isEmpty()) {
@@ -329,12 +329,12 @@ public class Allay extends PathfinderMob implements InventoryCarrier {
             itemstack2.setCount(1);
             this.setItemInHand(InteractionHand.MAIN_HAND, itemstack2);
             this.removeInteractionItem(player, itemstack);
-            this.level.playSound(player, (Entity) this, SoundEvents.ALLAY_ITEM_GIVEN, SoundSource.NEUTRAL, 2.0F, 1.0F);
+            this.level.playSound(player, this, SoundEvents.ALLAY_ITEM_GIVEN, SoundSource.NEUTRAL, 2.0F, 1.0F);
             this.getBrain().setMemory(MemoryModuleType.LIKED_PLAYER, player.getUUID()); // CraftBukkit - decompile error
             return InteractionResult.SUCCESS;
         } else if (!itemstack1.isEmpty() && hand == InteractionHand.MAIN_HAND && itemstack.isEmpty()) {
             this.setItemSlot(EquipmentSlot.MAINHAND, ItemStack.EMPTY);
-            this.level.playSound(player, (Entity) this, SoundEvents.ALLAY_ITEM_TAKEN, SoundSource.NEUTRAL, 2.0F, 1.0F);
+            this.level.playSound(player, this, SoundEvents.ALLAY_ITEM_TAKEN, SoundSource.NEUTRAL, 2.0F, 1.0F);
             this.swing(InteractionHand.MAIN_HAND);
             Iterator iterator = this.getInventory().removeAllItems().iterator();
 
@@ -437,7 +437,7 @@ public class Allay extends PathfinderMob implements InventoryCarrier {
     }
 
     public boolean isDancing() {
-        return ((Boolean) this.entityData.get(Allay.DATA_DANCING)).booleanValue();
+        return this.entityData.get(Allay.DATA_DANCING).booleanValue();
     }
 
     public boolean isPanicking() {
@@ -452,7 +452,7 @@ public class Allay extends PathfinderMob implements InventoryCarrier {
 
     private boolean shouldStopDancing() {
         if (this.forceDancing) {return false;} // CraftBukkit
-        return this.jukeboxPos == null || !this.jukeboxPos.closerToCenterThan(this.position(), (double) GameEvent.JUKEBOX_PLAY.getNotificationRadius()) || !this.level.getBlockState(this.jukeboxPos).is(Blocks.JUKEBOX);
+        return this.jukeboxPos == null || !this.jukeboxPos.closerToCenterThan(this.position(), GameEvent.JUKEBOX_PLAY.getNotificationRadius()) || !this.level.getBlockState(this.jukeboxPos).is(Blocks.JUKEBOX);
     }
 
     public float getHoldingItemAnimationProgress(float f) {
@@ -496,7 +496,7 @@ public class Allay extends PathfinderMob implements InventoryCarrier {
     public void addAdditionalSaveData(CompoundTag nbt) {
         super.addAdditionalSaveData(nbt);
         this.writeInventoryToTag(nbt);
-        DataResult<net.minecraft.nbt.Tag> dataresult = VibrationListener.codec(this.vibrationListenerConfig).encodeStart(NbtOps.INSTANCE, (VibrationListener) this.dynamicVibrationListener.getListener()); // CraftBukkit - decompile error
+        DataResult<net.minecraft.nbt.Tag> dataresult = VibrationListener.codec(this.vibrationListenerConfig).encodeStart(NbtOps.INSTANCE, this.dynamicVibrationListener.getListener()); // CraftBukkit - decompile error
         Logger logger = Allay.LOGGER;
 
         Objects.requireNonNull(logger);
@@ -546,7 +546,7 @@ public class Allay extends PathfinderMob implements InventoryCarrier {
     }
 
     public Allay duplicateAllay() { // CraftBukkit - return allay and private -> public
-        Allay allay = (Allay) EntityType.ALLAY.create(this.level);
+        Allay allay = EntityType.ALLAY.create(this.level);
 
         if (allay != null) {
             allay.moveTo(this.position());
@@ -564,7 +564,7 @@ public class Allay extends PathfinderMob implements InventoryCarrier {
     }
 
     public boolean canDuplicate() { // PAIL private -> public
-        return ((Boolean) this.entityData.get(Allay.DATA_CAN_DUPLICATE)).booleanValue();
+        return this.entityData.get(Allay.DATA_CAN_DUPLICATE).booleanValue();
     }
 
     private void removeInteractionItem(Player player, ItemStack stack) {
@@ -618,7 +618,7 @@ public class Allay extends PathfinderMob implements InventoryCarrier {
                 if (optional.isEmpty()) {
                     return true;
                 } else {
-                    GlobalPos globalpos = (GlobalPos) optional.get();
+                    GlobalPos globalpos = optional.get();
 
                     return globalpos.dimension().equals(world.dimension()) && globalpos.pos().equals(pos);
                 }
diff --git a/src/main/java/net/minecraft/world/entity/animal/axolotl/Axolotl.java b/src/main/java/net/minecraft/world/entity/animal/axolotl/Axolotl.java
index 64eefdf47588700d065001e2736d8f49e1469aae..f10451ef02816f51470e9ceb93aaf2e2d4e8ae91 100644
--- a/src/main/java/net/minecraft/world/entity/animal/axolotl/Axolotl.java
+++ b/src/main/java/net/minecraft/world/entity/animal/axolotl/Axolotl.java
@@ -142,7 +142,7 @@ public class Axolotl extends Animal implements LerpingModel, VariantHolder<Axolo
         boolean flag = false;
 
         if (spawnReason == MobSpawnType.BUCKET) {
-            return (SpawnGroupData) entityData;
+            return entityData;
         } else {
             RandomSource randomsource = world.getRandom();
 
@@ -159,7 +159,7 @@ public class Axolotl extends Animal implements LerpingModel, VariantHolder<Axolo
                 this.setAge(-24000);
             }
 
-            return super.finalizeSpawn(world, difficulty, spawnReason, (SpawnGroupData) entityData, entityNbt);
+            return super.finalizeSpawn(world, difficulty, spawnReason, entityData, entityNbt);
         }
     }
 
@@ -236,12 +236,12 @@ public class Axolotl extends Animal implements LerpingModel, VariantHolder<Axolo
     }
 
     public boolean isPlayingDead() {
-        return ((Boolean) this.entityData.get(Axolotl.DATA_PLAYING_DEAD)).booleanValue();
+        return this.entityData.get(Axolotl.DATA_PLAYING_DEAD).booleanValue();
     }
 
     @Override
     public boolean fromBucket() {
-        return ((Boolean) this.entityData.get(Axolotl.FROM_BUCKET)).booleanValue();
+        return this.entityData.get(Axolotl.FROM_BUCKET).booleanValue();
     }
 
     @Override
@@ -252,7 +252,7 @@ public class Axolotl extends Animal implements LerpingModel, VariantHolder<Axolo
     @Nullable
     @Override
     public AgeableMob getBreedOffspring(ServerLevel world, AgeableMob entity) {
-        Axolotl axolotl = (Axolotl) EntityType.AXOLOTL.create(world);
+        Axolotl axolotl = EntityType.AXOLOTL.create(world);
 
         if (axolotl != null) {
             Axolotl.Variant axolotl_variant;
@@ -296,7 +296,7 @@ public class Axolotl extends Animal implements LerpingModel, VariantHolder<Axolo
         if (!this.isNoAi()) {
             Optional<Integer> optional = this.getBrain().getMemory(MemoryModuleType.PLAY_DEAD_TICKS);
 
-            this.setPlayingDead(optional.isPresent() && ((Integer) optional.get()).intValue() > 0);
+            this.setPlayingDead(optional.isPresent() && optional.get().intValue() > 0);
         }
 
     }
@@ -327,7 +327,7 @@ public class Axolotl extends Animal implements LerpingModel, VariantHolder<Axolo
         float f1 = this.getHealth();
 
         if (!this.level.isClientSide && !this.isNoAi() && this.level.random.nextInt(3) == 0 && ((float) this.level.random.nextInt(3) < amount || f1 / this.getMaxHealth() < 0.5F) && amount < f1 && this.isInWater() && (source.getEntity() != null || source.getDirectEntity() != null) && !this.isPlayingDead()) {
-            this.brain.setMemory(MemoryModuleType.PLAY_DEAD_TICKS, Integer.valueOf((int) 200));
+            this.brain.setMemory(MemoryModuleType.PLAY_DEAD_TICKS, Integer.valueOf(200));
         }
 
         return super.hurt(source, amount);
@@ -350,7 +350,7 @@ public class Axolotl extends Animal implements LerpingModel, VariantHolder<Axolo
 
     @Override
     public InteractionResult mobInteract(Player player, InteractionHand hand) {
-        return (InteractionResult) Bucketable.bucketMobPickup(player, hand, this).orElse(super.mobInteract(player, hand));
+        return Bucketable.bucketMobPickup(player, hand, this).orElse(super.mobInteract(player, hand));
     }
 
     @Override
@@ -593,7 +593,7 @@ public class Axolotl extends Animal implements LerpingModel, VariantHolder<Axolo
             Axolotl.Variant[] aaxolotl_variant = (Axolotl.Variant[]) Arrays.stream(values()).filter((axolotl_variant) -> {
                 return axolotl_variant.common == natural;
             }).toArray((i) -> {
-                return new Axolotl.Variant[i];
+                return new Variant[i];
             });
 
             return (Axolotl.Variant) Util.getRandom((Object[]) aaxolotl_variant, random);
diff --git a/src/main/java/net/minecraft/world/entity/animal/frog/Frog.java b/src/main/java/net/minecraft/world/entity/animal/frog/Frog.java
index f2e84e832ad95df26fe3b9ba439ce38fc59b3585..8e8bb6a2d4c960fd1e049289c3c6b9e5705c304a 100644
--- a/src/main/java/net/minecraft/world/entity/animal/frog/Frog.java
+++ b/src/main/java/net/minecraft/world/entity/animal/frog/Frog.java
@@ -267,7 +267,7 @@ public class Frog extends Animal implements VariantHolder<FrogVariant> {
 
         if (serverPlayer != null) {
             serverPlayer.awardStat(Stats.ANIMALS_BRED);
-            CriteriaTriggers.BRED_ANIMALS.trigger(serverPlayer, this, other, (AgeableMob)null);
+            CriteriaTriggers.BRED_ANIMALS.trigger(serverPlayer, this, other, null);
         }
 
         this.setAge(6000);
diff --git a/src/main/java/net/minecraft/world/entity/animal/frog/Tadpole.java b/src/main/java/net/minecraft/world/entity/animal/frog/Tadpole.java
index 9058f9f2e561cda9f475f33218bf7a78297de4bc..e33c06ee2510487684a9c76f1ea2cf734560b3d6 100644
--- a/src/main/java/net/minecraft/world/entity/animal/frog/Tadpole.java
+++ b/src/main/java/net/minecraft/world/entity/animal/frog/Tadpole.java
@@ -141,7 +141,7 @@ public class Tadpole extends AbstractFish {
             this.feed(player, itemstack);
             return InteractionResult.sidedSuccess(this.level.isClientSide);
         } else {
-            return (InteractionResult) Bucketable.bucketMobPickup(player, hand, this).orElse(super.mobInteract(player, hand));
+            return Bucketable.bucketMobPickup(player, hand, this).orElse(super.mobInteract(player, hand));
         }
     }
 
@@ -227,11 +227,11 @@ public class Tadpole extends AbstractFish {
 
         if (world instanceof ServerLevel) {
             ServerLevel worldserver = (ServerLevel) world;
-            Frog frog = (Frog) EntityType.FROG.create(this.level);
+            Frog frog = EntityType.FROG.create(this.level);
 
             if (frog != null) {
                 frog.moveTo(this.getX(), this.getY(), this.getZ(), this.getYRot(), this.getXRot());
-                frog.finalizeSpawn(worldserver, this.level.getCurrentDifficultyAt(frog.blockPosition()), MobSpawnType.CONVERSION, (SpawnGroupData) null, (CompoundTag) null);
+                frog.finalizeSpawn(worldserver, this.level.getCurrentDifficultyAt(frog.blockPosition()), MobSpawnType.CONVERSION, null, null);
                 frog.setNoAi(this.isNoAi());
                 if (this.hasCustomName()) {
                     frog.setCustomName(this.getCustomName());
diff --git a/src/main/java/net/minecraft/world/entity/animal/goat/Goat.java b/src/main/java/net/minecraft/world/entity/animal/goat/Goat.java
index 44f75338ed17e089ab3f4f34f6e6ba763f58b81a..534db0d5cfffa1eced21fb288c1f4d1ac0fa5100 100644
--- a/src/main/java/net/minecraft/world/entity/animal/goat/Goat.java
+++ b/src/main/java/net/minecraft/world/entity/animal/goat/Goat.java
@@ -82,11 +82,11 @@ public class Goat extends Animal {
     }
 
     public ItemStack createHorn() {
-        RandomSource randomsource = RandomSource.create((long) this.getUUID().hashCode());
+        RandomSource randomsource = RandomSource.create(this.getUUID().hashCode());
         TagKey<Instrument> tagkey = this.isScreamingGoat() ? InstrumentTags.SCREAMING_GOAT_HORNS : InstrumentTags.REGULAR_GOAT_HORNS;
         HolderSet<Instrument> holderset = BuiltInRegistries.INSTRUMENT.getOrCreateTag(tagkey);
 
-        return InstrumentItem.create(Items.GOAT_HORN, (Holder) holderset.getRandomElement(randomsource).get());
+        return InstrumentItem.create(Items.GOAT_HORN, holderset.getRandomElement(randomsource).get());
     }
 
     @Override
@@ -147,7 +147,7 @@ public class Goat extends Animal {
     @Nullable
     @Override
     public Goat getBreedOffspring(ServerLevel world, AgeableMob entity) {
-        Goat goat = (Goat) EntityType.GOAT.create(world);
+        Goat goat = EntityType.GOAT.create(world);
 
         if (goat != null) {
             boolean flag;
@@ -240,7 +240,7 @@ public class Goat extends Animal {
             InteractionResult enuminteractionresult = super.mobInteract(player, hand);
 
             if (enuminteractionresult.consumesAction() && isFood) { // Paper
-                this.level.playSound((Player) null, (Entity) this, this.getEatingSound(itemstack), SoundSource.NEUTRAL, 1.0F, Mth.randomBetween(this.level.random, 0.8F, 1.2F));
+                this.level.playSound(null, this, this.getEatingSound(itemstack), SoundSource.NEUTRAL, 1.0F, Mth.randomBetween(this.level.random, 0.8F, 1.2F));
             }
 
             return enuminteractionresult;
@@ -310,7 +310,7 @@ public class Goat extends Animal {
             this.lowerHeadTick -= 2;
         }
 
-        this.lowerHeadTick = Mth.clamp(this.lowerHeadTick, (int) 0, (int) 20);
+        this.lowerHeadTick = Mth.clamp(this.lowerHeadTick, 0, 20);
         super.aiStep();
     }
 
@@ -323,11 +323,11 @@ public class Goat extends Animal {
     }
 
     public boolean hasLeftHorn() {
-        return ((Boolean) this.entityData.get(Goat.DATA_HAS_LEFT_HORN)).booleanValue();
+        return this.entityData.get(Goat.DATA_HAS_LEFT_HORN).booleanValue();
     }
 
     public boolean hasRightHorn() {
-        return ((Boolean) this.entityData.get(Goat.DATA_HAS_RIGHT_HORN)).booleanValue();
+        return this.entityData.get(Goat.DATA_HAS_RIGHT_HORN).booleanValue();
     }
 
     public boolean dropHorn() {
@@ -350,9 +350,9 @@ public class Goat extends Animal {
             this.entityData.set(datawatcherobject, Boolean.FALSE);
             Vec3 vec3d = this.position();
             ItemStack itemstack = this.createHorn();
-            double d0 = (double) Mth.randomBetween(this.random, -0.2F, 0.2F);
-            double d1 = (double) Mth.randomBetween(this.random, 0.3F, 0.7F);
-            double d2 = (double) Mth.randomBetween(this.random, -0.2F, 0.2F);
+            double d0 = Mth.randomBetween(this.random, -0.2F, 0.2F);
+            double d1 = Mth.randomBetween(this.random, 0.3F, 0.7F);
+            double d2 = Mth.randomBetween(this.random, -0.2F, 0.2F);
             ItemEntity entityitem = new ItemEntity(this.level, vec3d.x(), vec3d.y(), vec3d.z(), itemstack, d0, d1, d2);
 
             return this.spawnAtLocation(entityitem) != null; // Paper - call EntityDropItemEvent by calling spawnAtLocation.
@@ -370,7 +370,7 @@ public class Goat extends Animal {
     }
 
     public boolean isScreamingGoat() {
-        return ((Boolean) this.entityData.get(Goat.DATA_IS_SCREAMING_GOAT)).booleanValue();
+        return this.entityData.get(Goat.DATA_IS_SCREAMING_GOAT).booleanValue();
     }
 
     public void setScreamingGoat(boolean screaming) {
diff --git a/src/main/java/net/minecraft/world/entity/animal/horse/AbstractChestedHorse.java b/src/main/java/net/minecraft/world/entity/animal/horse/AbstractChestedHorse.java
index 1cd07c55069aded6882120cf12ca00855624004c..958454d894a03951225de172bd00d5cb11767514 100644
--- a/src/main/java/net/minecraft/world/entity/animal/horse/AbstractChestedHorse.java
+++ b/src/main/java/net/minecraft/world/entity/animal/horse/AbstractChestedHorse.java
@@ -30,7 +30,7 @@ public abstract class AbstractChestedHorse extends AbstractHorse {
 
     @Override
     protected void randomizeAttributes(RandomSource random) {
-        this.getAttribute(Attributes.MAX_HEALTH).setBaseValue((double)this.generateRandomMaxHealth(random));
+        this.getAttribute(Attributes.MAX_HEALTH).setBaseValue(this.generateRandomMaxHealth(random));
     }
 
     @Override
@@ -40,7 +40,7 @@ public abstract class AbstractChestedHorse extends AbstractHorse {
     }
 
     public static AttributeSupplier.Builder createBaseChestedHorseAttributes() {
-        return createBaseHorseAttributes().add(Attributes.MOVEMENT_SPEED, (double)0.175F).add(Attributes.JUMP_STRENGTH, 0.5D);
+        return createBaseHorseAttributes().add(Attributes.MOVEMENT_SPEED, 0.175F).add(Attributes.JUMP_STRENGTH, 0.5D);
     }
 
     public boolean hasChest() {
diff --git a/src/main/java/net/minecraft/world/entity/animal/horse/AbstractHorse.java b/src/main/java/net/minecraft/world/entity/animal/horse/AbstractHorse.java
index 569fdcf13df6efaae8afcf1133843eaa4f909e2a..f4fc724553f67be1902f32bbf455e45b5db9c18a 100644
--- a/src/main/java/net/minecraft/world/entity/animal/horse/AbstractHorse.java
+++ b/src/main/java/net/minecraft/world/entity/animal/horse/AbstractHorse.java
@@ -151,11 +151,11 @@ public abstract class AbstractHorse extends Animal implements ContainerListener,
     }
 
     protected boolean getFlag(int bitmask) {
-        return (((Byte) this.entityData.get(AbstractHorse.DATA_ID_FLAGS)).intValue() & bitmask) != 0;
+        return (this.entityData.get(AbstractHorse.DATA_ID_FLAGS).intValue() & bitmask) != 0;
     }
 
     protected void setFlag(int bitmask, boolean flag) {
-        byte b0 = ((Byte) this.entityData.get(AbstractHorse.DATA_ID_FLAGS)).byteValue();
+        byte b0 = this.entityData.get(AbstractHorse.DATA_ID_FLAGS).byteValue();
 
         if (flag) {
             this.entityData.set(AbstractHorse.DATA_ID_FLAGS, Byte.valueOf((byte) (b0 | bitmask)));
@@ -171,7 +171,7 @@ public abstract class AbstractHorse extends Animal implements ContainerListener,
 
     @Nullable
     public UUID getOwnerUUID() {
-        return (UUID) ((Optional) this.entityData.get(AbstractHorse.DATA_ID_OWNER_UUID)).orElse((Object) null);
+        return (UUID) ((Optional) this.entityData.get(AbstractHorse.DATA_ID_OWNER_UUID)).orElse(null);
     }
 
     public void setOwnerUUID(@Nullable UUID uuid) {
@@ -229,7 +229,7 @@ public abstract class AbstractHorse extends Animal implements ContainerListener,
         this.inventory.setItem(0, stack != null ? stack : new ItemStack(Items.SADDLE));
         // Paper end
         if (sound != null) {
-            this.level.playSound((Player) null, (Entity) this, this.getSaddleSoundEvent(), sound, 0.5F, 1.0F);
+            this.level.playSound(null, this, this.getSaddleSoundEvent(), sound, 0.5F, 1.0F);
         }
 
     }
@@ -258,7 +258,7 @@ public abstract class AbstractHorse extends Animal implements ContainerListener,
     }
 
     public int modifyTemper(int difference) {
-        int j = Mth.clamp(this.getTemper() + difference, (int) 0, this.getMaxTemper());
+        int j = Mth.clamp(this.getTemper() + difference, 0, this.getMaxTemper());
 
         this.setTemper(j);
         return j;
@@ -275,7 +275,7 @@ public abstract class AbstractHorse extends Animal implements ContainerListener,
             SoundEvent soundeffect = this.getEatingSound();
 
             if (soundeffect != null) {
-                this.level.playSound((Player) null, this.getX(), this.getY(), this.getZ(), soundeffect, this.getSoundSource(), 1.0F, 1.0F + (this.random.nextFloat() - this.random.nextFloat()) * 0.2F);
+                this.level.playSound(null, this.getX(), this.getY(), this.getZ(), soundeffect, this.getSoundSource(), 1.0F, 1.0F + (this.random.nextFloat() - this.random.nextFloat()) * 0.2F);
             }
         }
 
@@ -439,7 +439,7 @@ public abstract class AbstractHorse extends Animal implements ContainerListener,
 
     @Override
     public void openCustomInventoryScreen(Player player) {
-        if (!this.level.isClientSide && (!this.isVehicle() || this.hasPassenger((Entity) player)) && this.isTamed()) {
+        if (!this.level.isClientSide && (!this.isVehicle() || this.hasPassenger(player)) && this.isTamed()) {
             player.openHorseInventory(this, this.inventory);
         }
 
@@ -594,8 +594,8 @@ public abstract class AbstractHorse extends Animal implements ContainerListener,
         if (this.isBred() && this.isBaby() && !this.isEating()) {
             LivingEntity entityliving = this.level.getNearestEntity(AbstractHorse.class, AbstractHorse.MOMMY_TARGETING, this, this.getX(), this.getY(), this.getZ(), this.getBoundingBox().inflate(16.0D));
 
-            if (entityliving != null && this.distanceToSqr((Entity) entityliving) > 4.0D) {
-                this.navigation.createPath((Entity) entityliving, 0);
+            if (entityliving != null && this.distanceToSqr(entityliving) > 4.0D) {
+                this.navigation.createPath(entityliving, 0);
             }
         }
 
@@ -766,7 +766,7 @@ public abstract class AbstractHorse extends Animal implements ContainerListener,
         this.setOwnerUUID(player.getUUID());
         this.setTamed(true);
         if (player instanceof ServerPlayer) {
-            CriteriaTriggers.TAME_ANIMAL.trigger((ServerPlayer) player, (Animal) this);
+            CriteriaTriggers.TAME_ANIMAL.trigger((ServerPlayer) player, this);
         }
 
         this.level.broadcastEntityEvent(this, (byte) 7);
@@ -802,7 +802,7 @@ public abstract class AbstractHorse extends Animal implements ContainerListener,
                 this.flyingSpeed = this.getSpeed() * 0.1F;
                 if (this.isControlledByLocalInstance()) {
                     this.setSpeed(this.getDrivenMovementSpeed(entityliving));
-                    super.travel(new Vec3((double) f, movementInput.y, (double) f1));
+                    super.travel(new Vec3(f, movementInput.y, f1));
                 } else if (entityliving instanceof Player) {
                     this.setDeltaMovement(this.getX() - this.xOld, this.getY() - this.yOld, this.getZ() - this.zOld);
                 }
@@ -1178,13 +1178,13 @@ public abstract class AbstractHorse extends Animal implements ContainerListener,
 
     @Override
     public Vec3 getDismountLocationForPassenger(LivingEntity passenger) {
-        Vec3 vec3d = getCollisionHorizontalEscapeVector((double) this.getBbWidth(), (double) passenger.getBbWidth(), this.getYRot() + (passenger.getMainArm() == HumanoidArm.RIGHT ? 90.0F : -90.0F));
+        Vec3 vec3d = getCollisionHorizontalEscapeVector(this.getBbWidth(), passenger.getBbWidth(), this.getYRot() + (passenger.getMainArm() == HumanoidArm.RIGHT ? 90.0F : -90.0F));
         Vec3 vec3d1 = this.getDismountLocationInDirection(vec3d, passenger);
 
         if (vec3d1 != null) {
             return vec3d1;
         } else {
-            Vec3 vec3d2 = getCollisionHorizontalEscapeVector((double) this.getBbWidth(), (double) passenger.getBbWidth(), this.getYRot() + (passenger.getMainArm() == HumanoidArm.LEFT ? 90.0F : -90.0F));
+            Vec3 vec3d2 = getCollisionHorizontalEscapeVector(this.getBbWidth(), passenger.getBbWidth(), this.getYRot() + (passenger.getMainArm() == HumanoidArm.LEFT ? 90.0F : -90.0F));
             Vec3 vec3d3 = this.getDismountLocationInDirection(vec3d2, passenger);
 
             return vec3d3 != null ? vec3d3 : this.position();
@@ -1201,7 +1201,7 @@ public abstract class AbstractHorse extends Animal implements ContainerListener,
         }
 
         this.randomizeAttributes(world.getRandom());
-        return super.finalizeSpawn(world, difficulty, spawnReason, (SpawnGroupData) entityData, entityNbt);
+        return super.finalizeSpawn(world, difficulty, spawnReason, entityData, entityNbt);
     }
 
     public boolean hasInventoryChanged(Container inventory) {
diff --git a/src/main/java/net/minecraft/world/entity/animal/horse/Llama.java b/src/main/java/net/minecraft/world/entity/animal/horse/Llama.java
index 83ce32632b1cd23ac9709bdbfb1aafddd004351e..b77bf903fad032de09d6d973ff5c0673e1652f17 100644
--- a/src/main/java/net/minecraft/world/entity/animal/horse/Llama.java
+++ b/src/main/java/net/minecraft/world/entity/animal/horse/Llama.java
@@ -99,7 +99,7 @@ public class Llama extends AbstractChestedHorse implements VariantHolder<Llama.V
     }
 
     public int getStrength() {
-        return ((Integer) this.entityData.get(Llama.DATA_STRENGTH_ID)).intValue();
+        return this.entityData.get(Llama.DATA_STRENGTH_ID).intValue();
     }
 
     @Override
@@ -241,7 +241,7 @@ public class Llama extends AbstractChestedHorse implements VariantHolder<Llama.V
             SoundEvent soundeffect = this.getEatingSound();
 
             if (soundeffect != null) {
-                this.level.playSound((Player) null, this.getX(), this.getY(), this.getZ(), this.getEatingSound(), this.getSoundSource(), 1.0F, 1.0F + (this.random.nextFloat() - this.random.nextFloat()) * 0.2F);
+                this.level.playSound(null, this.getX(), this.getY(), this.getZ(), this.getEatingSound(), this.getSoundSource(), 1.0F, 1.0F + (this.random.nextFloat() - this.random.nextFloat()) * 0.2F);
             }
         }
 
@@ -269,7 +269,7 @@ public class Llama extends AbstractChestedHorse implements VariantHolder<Llama.V
         }
 
         this.setVariant(entityllama_variant);
-        return super.finalizeSpawn(world, difficulty, spawnReason, (SpawnGroupData) entityData, entityNbt);
+        return super.finalizeSpawn(world, difficulty, spawnReason, entityData, entityNbt);
     }
 
     @Override
@@ -372,7 +372,7 @@ public class Llama extends AbstractChestedHorse implements VariantHolder<Llama.V
 
     @Nullable
     public DyeColor getSwag() {
-        int i = ((Integer) this.entityData.get(Llama.DATA_SWAG_ID)).intValue();
+        int i = this.entityData.get(Llama.DATA_SWAG_ID).intValue();
 
         return i == -1 ? null : DyeColor.byId(i);
     }
@@ -410,7 +410,7 @@ public class Llama extends AbstractChestedHorse implements VariantHolder<Llama.V
 
     @Nullable
     protected Llama makeNewLlama() {
-        return (Llama) EntityType.LLAMA.create(this.level);
+        return EntityType.LLAMA.create(this.level);
     }
 
     private void spit(LivingEntity target) {
@@ -422,7 +422,7 @@ public class Llama extends AbstractChestedHorse implements VariantHolder<Llama.V
 
         entityllamaspit.shoot(d0, d1 + d3, d2, 1.5F, 10.0F);
         if (!this.isSilent()) {
-            this.level.playSound((Player) null, this.getX(), this.getY(), this.getZ(), SoundEvents.LLAMA_SPIT, this.getSoundSource(), 1.0F, 1.0F + (this.random.nextFloat() - this.random.nextFloat()) * 0.2F);
+            this.level.playSound(null, this.getX(), this.getY(), this.getZ(), SoundEvents.LLAMA_SPIT, this.getSoundSource(), 1.0F, 1.0F + (this.random.nextFloat() - this.random.nextFloat()) * 0.2F);
         }
 
         this.level.addFreshEntity(entityllamaspit);
diff --git a/src/main/java/net/minecraft/world/entity/animal/horse/SkeletonTrapGoal.java b/src/main/java/net/minecraft/world/entity/animal/horse/SkeletonTrapGoal.java
index 3b452b960a5e5e5d6582d7b64fe034402fb5fc2b..5b9088490fea303b452cb93414cd0fe9ad1adb2f 100644
--- a/src/main/java/net/minecraft/world/entity/animal/horse/SkeletonTrapGoal.java
+++ b/src/main/java/net/minecraft/world/entity/animal/horse/SkeletonTrapGoal.java
@@ -38,7 +38,7 @@ public class SkeletonTrapGoal extends Goal {
         this.horse.setTrap(false);
         this.horse.setTamed(true);
         this.horse.setAge(0);
-        LightningBolt entitylightning = (LightningBolt) EntityType.LIGHTNING_BOLT.create(worldserver);
+        LightningBolt entitylightning = EntityType.LIGHTNING_BOLT.create(worldserver);
 
         if (entitylightning != null) {
             entitylightning.moveTo(this.horse.getX(), this.horse.getY(), this.horse.getZ());
@@ -70,26 +70,25 @@ public class SkeletonTrapGoal extends Goal {
 
     @Nullable
     private AbstractHorse createHorse(DifficultyInstance localDifficulty) {
-        SkeletonHorse entityhorseskeleton = (SkeletonHorse) EntityType.SKELETON_HORSE.create(this.horse.level);
+        SkeletonHorse entityhorseskeleton = EntityType.SKELETON_HORSE.create(this.horse.level);
 
         if (entityhorseskeleton != null) {
-            entityhorseskeleton.finalizeSpawn((ServerLevel) this.horse.level, localDifficulty, MobSpawnType.TRIGGERED, (SpawnGroupData) null, (CompoundTag) null);
+            entityhorseskeleton.finalizeSpawn((ServerLevel) this.horse.level, localDifficulty, MobSpawnType.TRIGGERED, null, null);
             entityhorseskeleton.setPos(this.horse.getX(), this.horse.getY(), this.horse.getZ());
             entityhorseskeleton.invulnerableTime = 60;
             entityhorseskeleton.setPersistenceRequired();
             entityhorseskeleton.setTamed(true);
             entityhorseskeleton.setAge(0);
         }
-
         return entityhorseskeleton;
     }
 
     @Nullable
     private Skeleton createSkeleton(DifficultyInstance localDifficulty, AbstractHorse vehicle) {
-        Skeleton entityskeleton = (Skeleton) EntityType.SKELETON.create(vehicle.level);
+        Skeleton entityskeleton = EntityType.SKELETON.create(vehicle.level);
 
         if (entityskeleton != null) {
-            entityskeleton.finalizeSpawn((ServerLevel) vehicle.level, localDifficulty, MobSpawnType.TRIGGERED, (SpawnGroupData) null, (CompoundTag) null);
+            entityskeleton.finalizeSpawn((ServerLevel) vehicle.level, localDifficulty, MobSpawnType.TRIGGERED, null, null);
             entityskeleton.setPos(vehicle.getX(), vehicle.getY(), vehicle.getZ());
             entityskeleton.invulnerableTime = 60;
             entityskeleton.setPersistenceRequired();
diff --git a/src/main/java/net/minecraft/world/entity/animal/horse/TraderLlama.java b/src/main/java/net/minecraft/world/entity/animal/horse/TraderLlama.java
index 691f85a508c0b79b95b88c7e3118f02ec92a5123..c5378f81c0034f272132d94246d3030db4e2bc37 100644
--- a/src/main/java/net/minecraft/world/entity/animal/horse/TraderLlama.java
+++ b/src/main/java/net/minecraft/world/entity/animal/horse/TraderLlama.java
@@ -35,7 +35,7 @@ public class TraderLlama extends Llama {
     @Nullable
     @Override
     protected Llama makeNewLlama() {
-        return (Llama) EntityType.TRADER_LLAMA.create(this.level);
+        return EntityType.TRADER_LLAMA.create(this.level);
     }
 
     @Override
@@ -116,7 +116,7 @@ public class TraderLlama extends Llama {
             entityData = new AgeableMob.AgeableMobGroupData(false);
         }
 
-        return super.finalizeSpawn(world, difficulty, spawnReason, (SpawnGroupData) entityData, entityNbt);
+        return super.finalizeSpawn(world, difficulty, spawnReason, entityData, entityNbt);
     }
 
     protected static class TraderLlamaDefendWanderingTraderGoal extends TargetGoal {
diff --git a/src/main/java/net/minecraft/world/entity/boss/enderdragon/EndCrystal.java b/src/main/java/net/minecraft/world/entity/boss/enderdragon/EndCrystal.java
index 5c32a34fbffb11ac24f8518005e5ef9566b0cc2b..515183e55d2045f04b21a9901a6f1d7adeeef239 100644
--- a/src/main/java/net/minecraft/world/entity/boss/enderdragon/EndCrystal.java
+++ b/src/main/java/net/minecraft/world/entity/boss/enderdragon/EndCrystal.java
@@ -166,7 +166,7 @@ public class EndCrystal extends Entity {
 
     @Nullable
     public BlockPos getBeamTarget() {
-        return (BlockPos) ((Optional) this.getEntityData().get(EndCrystal.DATA_BEAM_TARGET)).orElse((Object) null);
+        return (BlockPos) ((Optional) this.getEntityData().get(EndCrystal.DATA_BEAM_TARGET)).orElse(null);
     }
 
     public void setShowBottom(boolean showBottom) {
@@ -174,7 +174,7 @@ public class EndCrystal extends Entity {
     }
 
     public boolean showsBottom() {
-        return ((Boolean) this.getEntityData().get(EndCrystal.DATA_SHOW_BOTTOM)).booleanValue();
+        return this.getEntityData().get(EndCrystal.DATA_SHOW_BOTTOM).booleanValue();
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/entity/boss/enderdragon/EnderDragon.java b/src/main/java/net/minecraft/world/entity/boss/enderdragon/EnderDragon.java
index cb21dbf16e2befd27d85839d4d984445d22f5b2f..a5e9fc9f20d6f620915e45a4fcc02179690d895e 100644
--- a/src/main/java/net/minecraft/world/entity/boss/enderdragon/EnderDragon.java
+++ b/src/main/java/net/minecraft/world/entity/boss/enderdragon/EnderDragon.java
@@ -174,7 +174,7 @@ public class EnderDragon extends Mob implements Enemy {
         d0 = this.positions[j][1];
         d1 = this.positions[k][1] - d0;
         adouble[1] = d0 + d1 * (double) tickDelta;
-        adouble[2] = Mth.lerp((double) tickDelta, this.positions[j][2], this.positions[k][2]);
+        adouble[2] = Mth.lerp(tickDelta, this.positions[j][2], this.positions[k][2]);
         return adouble;
     }
 
@@ -219,7 +219,7 @@ public class EnderDragon extends Mob implements Enemy {
             } else {
                 if (this.posPointer < 0) {
                     for (int i = 0; i < this.positions.length; ++i) {
-                        this.positions[i][0] = (double) this.getYRot();
+                        this.positions[i][0] = this.getYRot();
                         this.positions[i][1] = this.getY();
                     }
                 }
@@ -228,7 +228,7 @@ public class EnderDragon extends Mob implements Enemy {
                     this.posPointer = 0;
                 }
 
-                this.positions[this.posPointer][0] = (double) this.getYRot();
+                this.positions[this.posPointer][0] = this.getYRot();
                 this.positions[this.posPointer][1] = this.getY();
                 double d0;
                 double d1;
@@ -272,13 +272,13 @@ public class EnderDragon extends Mob implements Enemy {
                         double d5 = Math.sqrt(d0 * d0 + d2 * d2);
 
                         if (d5 > 0.0D) {
-                            d1 = Mth.clamp(d1 / d5, (double) (-f6), (double) f6);
+                            d1 = Mth.clamp(d1 / d5, -f6, f6);
                         }
 
                         this.setDeltaMovement(this.getDeltaMovement().add(0.0D, d1 * 0.01D, 0.0D));
                         this.setYRot(Mth.wrapDegrees(this.getYRot()));
                         Vec3 vec3d2 = vec3d1.subtract(this.getX(), this.getY(), this.getZ()).normalize();
-                        Vec3 vec3d3 = (new Vec3((double) Mth.sin(this.getYRot() * 0.017453292F), this.getDeltaMovement().y, (double) (-Mth.cos(this.getYRot() * 0.017453292F)))).normalize();
+                        Vec3 vec3d3 = (new Vec3(Mth.sin(this.getYRot() * 0.017453292F), this.getDeltaMovement().y, -Mth.cos(this.getYRot() * 0.017453292F))).normalize();
 
                         f3 = Math.max(((float) vec3d3.dot(vec3d2) + 0.5F) / 1.5F, 0.0F);
                         if (Math.abs(d0) > 9.999999747378752E-6D || Math.abs(d2) > 9.999999747378752E-6D) {
@@ -318,22 +318,22 @@ public class EnderDragon extends Mob implements Enemy {
                 float f11 = Mth.sin(f10);
                 float f12 = Mth.cos(f10);
 
-                this.tickPart(this.body, (double) (f11 * 0.5F), 0.0D, (double) (-f12 * 0.5F));
-                this.tickPart(this.wing1, (double) (f12 * 4.5F), 2.0D, (double) (f11 * 4.5F));
-                this.tickPart(this.wing2, (double) (f12 * -4.5F), 2.0D, (double) (f11 * -4.5F));
+                this.tickPart(this.body, f11 * 0.5F, 0.0D, -f12 * 0.5F);
+                this.tickPart(this.wing1, f12 * 4.5F, 2.0D, f11 * 4.5F);
+                this.tickPart(this.wing2, f12 * -4.5F, 2.0D, f11 * -4.5F);
                 if (!this.level.isClientSide && this.hurtTime == 0) {
-                    this.knockBack(this.level.getEntities((Entity) this, this.wing1.getBoundingBox().inflate(4.0D, 2.0D, 4.0D).move(0.0D, -2.0D, 0.0D), EntitySelector.NO_CREATIVE_OR_SPECTATOR));
-                    this.knockBack(this.level.getEntities((Entity) this, this.wing2.getBoundingBox().inflate(4.0D, 2.0D, 4.0D).move(0.0D, -2.0D, 0.0D), EntitySelector.NO_CREATIVE_OR_SPECTATOR));
-                    this.hurt(this.level.getEntities((Entity) this, this.head.getBoundingBox().inflate(1.0D), EntitySelector.NO_CREATIVE_OR_SPECTATOR));
-                    this.hurt(this.level.getEntities((Entity) this, this.neck.getBoundingBox().inflate(1.0D), EntitySelector.NO_CREATIVE_OR_SPECTATOR));
+                    this.knockBack(this.level.getEntities(this, this.wing1.getBoundingBox().inflate(4.0D, 2.0D, 4.0D).move(0.0D, -2.0D, 0.0D), EntitySelector.NO_CREATIVE_OR_SPECTATOR));
+                    this.knockBack(this.level.getEntities(this, this.wing2.getBoundingBox().inflate(4.0D, 2.0D, 4.0D).move(0.0D, -2.0D, 0.0D), EntitySelector.NO_CREATIVE_OR_SPECTATOR));
+                    this.hurt(this.level.getEntities(this, this.head.getBoundingBox().inflate(1.0D), EntitySelector.NO_CREATIVE_OR_SPECTATOR));
+                    this.hurt(this.level.getEntities(this, this.neck.getBoundingBox().inflate(1.0D), EntitySelector.NO_CREATIVE_OR_SPECTATOR));
                 }
 
                 float f13 = Mth.sin(this.getYRot() * 0.017453292F - this.yRotA * 0.01F);
                 float f14 = Mth.cos(this.getYRot() * 0.017453292F - this.yRotA * 0.01F);
                 float f15 = this.getHeadYOffset();
 
-                this.tickPart(this.head, (double) (f13 * 6.5F * f8), (double) (f15 + f9 * 6.5F), (double) (-f14 * 6.5F * f8));
-                this.tickPart(this.neck, (double) (f13 * 5.5F * f8), (double) (f15 + f9 * 5.5F), (double) (-f14 * 5.5F * f8));
+                this.tickPart(this.head, f13 * 6.5F * f8, f15 + f9 * 6.5F, -f14 * 6.5F * f8);
+                this.tickPart(this.neck, f13 * 5.5F * f8, f15 + f9 * 5.5F, -f14 * 5.5F * f8);
                 double[] adouble = this.getLatencyPos(5, 1.0F);
 
                 int k;
@@ -361,7 +361,7 @@ public class EnderDragon extends Mob implements Enemy {
                     f5 = 1.5F;
                     float f17 = (float) (k + 1) * 2.0F;
 
-                    this.tickPart(entitycomplexpart, (double) (-(f11 * 1.5F + f3 * f17) * f8), adouble1[1] - adouble[1] - (double) ((f17 + 1.5F) * f9) + 1.5D, (double) ((f12 * 1.5F + f4 * f17) * f8));
+                    this.tickPart(entitycomplexpart, -(f11 * 1.5F + f3 * f17) * f8, adouble1[1] - adouble[1] - (double) ((f17 + 1.5F) * f9) + 1.5D, (f12 * 1.5F + f4 * f17) * f8);
                 }
 
                 if (!this.level.isClientSide) {
@@ -423,7 +423,7 @@ public class EnderDragon extends Mob implements Enemy {
 
             while (iterator.hasNext()) {
                 EndCrystal entityendercrystal1 = (EndCrystal) iterator.next();
-                double d1 = entityendercrystal1.distanceToSqr((Entity) this);
+                double d1 = entityendercrystal1.distanceToSqr(this);
 
                 if (d1 < d0) {
                     d0 = d1;
@@ -979,7 +979,7 @@ public class EnderDragon extends Mob implements Enemy {
 
         if (dragoncontrollerphase != EnderDragonPhase.LANDING && dragoncontrollerphase != EnderDragonPhase.TAKEOFF) {
             if (idragoncontroller.isSitting()) {
-                d0 = (double) segmentOffset;
+                d0 = segmentOffset;
             } else if (segmentOffset == 6) {
                 d0 = 0.0D;
             } else {
@@ -1034,7 +1034,7 @@ public class EnderDragon extends Mob implements Enemy {
         if (source.getEntity() instanceof Player) {
             entityhuman = (Player) source.getEntity();
         } else {
-            entityhuman = this.level.getNearestPlayer(EnderDragon.CRYSTAL_DESTROY_TARGETING, (double) pos.getX(), (double) pos.getY(), (double) pos.getZ());
+            entityhuman = this.level.getNearestPlayer(EnderDragon.CRYSTAL_DESTROY_TARGETING, pos.getX(), pos.getY(), pos.getZ());
         }
 
         if (crystal == this.nearestCrystal) {
@@ -1047,7 +1047,7 @@ public class EnderDragon extends Mob implements Enemy {
     @Override
     public void onSyncedDataUpdated(EntityDataAccessor<?> data) {
         if (EnderDragon.DATA_PHASE.equals(data) && this.level.isClientSide) {
-            this.phaseManager.setPhase(EnderDragonPhase.getById(((Integer) this.getEntityData().get(EnderDragon.DATA_PHASE)).intValue()));
+            this.phaseManager.setPhase(EnderDragonPhase.getById(this.getEntityData().get(EnderDragon.DATA_PHASE).intValue()));
         }
 
         super.onSyncedDataUpdated(data);
diff --git a/src/main/java/net/minecraft/world/entity/boss/enderdragon/phases/DragonHoldingPatternPhase.java b/src/main/java/net/minecraft/world/entity/boss/enderdragon/phases/DragonHoldingPatternPhase.java
index 540fc254371065a78ba101d8b6ff4e49c95e92c0..f26d751167179d3fe33aa553550ad3ce919505cc 100644
--- a/src/main/java/net/minecraft/world/entity/boss/enderdragon/phases/DragonHoldingPatternPhase.java
+++ b/src/main/java/net/minecraft/world/entity/boss/enderdragon/phases/DragonHoldingPatternPhase.java
@@ -60,7 +60,7 @@ public class DragonHoldingPatternPhase extends AbstractDragonPhaseInstance {
                 return;
             }
 
-            Player player = this.dragon.level.getNearestPlayer(NEW_TARGET_TARGETING, this.dragon, (double)blockPos.getX(), (double)blockPos.getY(), (double)blockPos.getZ());
+            Player player = this.dragon.level.getNearestPlayer(NEW_TARGET_TARGETING, this.dragon, blockPos.getX(), blockPos.getY(), blockPos.getZ());
             double d;
             if (player != null) {
                 d = blockPos.distToCenterSqr(player.position()) / 512.0D;
@@ -99,7 +99,7 @@ public class DragonHoldingPatternPhase extends AbstractDragonPhaseInstance {
                 k += 12;
             }
 
-            this.currentPath = this.dragon.findPath(j, k, (Node)null);
+            this.currentPath = this.dragon.findPath(j, k, null);
             if (this.currentPath != null) {
                 this.currentPath.advance();
             }
@@ -117,12 +117,12 @@ public class DragonHoldingPatternPhase extends AbstractDragonPhaseInstance {
         if (this.currentPath != null && !this.currentPath.isDone()) {
             Vec3i vec3i = this.currentPath.getNextNodePos();
             this.currentPath.advance();
-            double d = (double)vec3i.getX();
-            double e = (double)vec3i.getZ();
+            double d = vec3i.getX();
+            double e = vec3i.getZ();
 
             double f;
             do {
-                f = (double)((float)vec3i.getY() + this.dragon.getRandom().nextFloat() * 20.0F);
+                f = (float)vec3i.getY() + this.dragon.getRandom().nextFloat() * 20.0F;
             } while(f < (double)vec3i.getY());
 
             this.targetLocation = new Vec3(d, f, e);
diff --git a/src/main/java/net/minecraft/world/entity/boss/enderdragon/phases/DragonLandingApproachPhase.java b/src/main/java/net/minecraft/world/entity/boss/enderdragon/phases/DragonLandingApproachPhase.java
index 0f1e79b9e3beb8e92586dae7ae69841cccb30517..d431b7aeb23155f7b7072d21bc622a4c4c10989c 100644
--- a/src/main/java/net/minecraft/world/entity/boss/enderdragon/phases/DragonLandingApproachPhase.java
+++ b/src/main/java/net/minecraft/world/entity/boss/enderdragon/phases/DragonLandingApproachPhase.java
@@ -52,13 +52,13 @@ public class DragonLandingApproachPhase extends AbstractDragonPhaseInstance {
         if (this.currentPath == null || this.currentPath.isDone()) {
             int i = this.dragon.findClosestNode();
             BlockPos blockPos = this.dragon.level.getHeightmapPos(Heightmap.Types.MOTION_BLOCKING_NO_LEAVES, this.dragon.getPodium()); // Paper - use custom podium
-            Player player = this.dragon.level.getNearestPlayer(NEAR_EGG_TARGETING, this.dragon, (double)blockPos.getX(), (double)blockPos.getY(), (double)blockPos.getZ());
+            Player player = this.dragon.level.getNearestPlayer(NEAR_EGG_TARGETING, this.dragon, blockPos.getX(), blockPos.getY(), blockPos.getZ());
             int j;
             if (player != null) {
                 Vec3 vec3 = (new Vec3(player.getX(), 0.0D, player.getZ())).normalize();
                 j = this.dragon.findClosestNode(-vec3.x * 40.0D, 105.0D, -vec3.z * 40.0D);
             } else {
-                j = this.dragon.findClosestNode(40.0D, (double)blockPos.getY(), 0.0D);
+                j = this.dragon.findClosestNode(40.0D, blockPos.getY(), 0.0D);
             }
 
             Node node = new Node(blockPos.getX(), blockPos.getY(), blockPos.getZ());
@@ -79,12 +79,12 @@ public class DragonLandingApproachPhase extends AbstractDragonPhaseInstance {
         if (this.currentPath != null && !this.currentPath.isDone()) {
             Vec3i vec3i = this.currentPath.getNextNodePos();
             this.currentPath.advance();
-            double d = (double)vec3i.getX();
-            double e = (double)vec3i.getZ();
+            double d = vec3i.getX();
+            double e = vec3i.getZ();
 
             double f;
             do {
-                f = (double)((float)vec3i.getY() + this.dragon.getRandom().nextFloat() * 20.0F);
+                f = (float)vec3i.getY() + this.dragon.getRandom().nextFloat() * 20.0F;
             } while(f < (double)vec3i.getY());
 
             this.targetLocation = new Vec3(d, f, e);
diff --git a/src/main/java/net/minecraft/world/entity/boss/enderdragon/phases/DragonSittingFlamingPhase.java b/src/main/java/net/minecraft/world/entity/boss/enderdragon/phases/DragonSittingFlamingPhase.java
index f18830d9d0f821e5603992846c335bba04ab640f..292c34e8eb48d68cbf2c42eb5d9d8512aabaf762 100644
--- a/src/main/java/net/minecraft/world/entity/boss/enderdragon/phases/DragonSittingFlamingPhase.java
+++ b/src/main/java/net/minecraft/world/entity/boss/enderdragon/phases/DragonSittingFlamingPhase.java
@@ -76,7 +76,7 @@ public class DragonSittingFlamingPhase extends AbstractDragonSittingPhase {
                 mutableBlockPos.set(d, h, e);
             }
 
-            h = (double)(Mth.floor(h) + 1);
+            h = Mth.floor(h) + 1;
             this.flame = new AreaEffectCloud(this.dragon.level, d, h, e);
             this.flame.setOwner(this.dragon);
             this.flame.setRadius(5.0F);
diff --git a/src/main/java/net/minecraft/world/entity/boss/enderdragon/phases/DragonStrafePlayerPhase.java b/src/main/java/net/minecraft/world/entity/boss/enderdragon/phases/DragonStrafePlayerPhase.java
index c2a14305cb737fbc6447c555d8a15e2d3977e3fa..d7fb8d3f1423af1f0c4d025b990a9d228c82641b 100644
--- a/src/main/java/net/minecraft/world/entity/boss/enderdragon/phases/DragonStrafePlayerPhase.java
+++ b/src/main/java/net/minecraft/world/entity/boss/enderdragon/phases/DragonStrafePlayerPhase.java
@@ -55,9 +55,9 @@ public class DragonStrafePlayerPhase extends AbstractDragonPhaseInstance {
                 if (this.dragon.hasLineOfSight(this.attackTarget)) {
                     ++this.fireballCharge;
                     Vec3 vec3 = (new Vec3(this.attackTarget.getX() - this.dragon.getX(), 0.0D, this.attackTarget.getZ() - this.dragon.getZ())).normalize();
-                    Vec3 vec32 = (new Vec3((double)Mth.sin(this.dragon.getYRot() * ((float)Math.PI / 180F)), 0.0D, (double)(-Mth.cos(this.dragon.getYRot() * ((float)Math.PI / 180F))))).normalize();
+                    Vec3 vec32 = (new Vec3(Mth.sin(this.dragon.getYRot() * ((float)Math.PI / 180F)), 0.0D, -Mth.cos(this.dragon.getYRot() * ((float)Math.PI / 180F)))).normalize();
                     float l = (float)vec32.dot(vec3);
-                    float m = (float)(Math.acos((double)l) * (double)(180F / (float)Math.PI));
+                    float m = (float)(Math.acos(l) * (double)(180F / (float)Math.PI));
                     m += 0.5F;
                     if (this.fireballCharge >= 5 && m >= 0.0F && m < 10.0F) {
                         double n = 1.0D;
@@ -69,7 +69,7 @@ public class DragonStrafePlayerPhase extends AbstractDragonPhaseInstance {
                         double s = this.attackTarget.getY(0.5D) - p;
                         double t = this.attackTarget.getZ() - q;
                         if (!this.dragon.isSilent()) {
-                            this.dragon.level.levelEvent((Player)null, 1017, this.dragon.blockPosition(), 0);
+                            this.dragon.level.levelEvent(null, 1017, this.dragon.blockPosition(), 0);
                         }
 
                         DragonFireball dragonFireball = new DragonFireball(this.dragon.level, this.dragon, r, s, t);
@@ -122,7 +122,7 @@ public class DragonStrafePlayerPhase extends AbstractDragonPhaseInstance {
                 j += 12;
             }
 
-            this.currentPath = this.dragon.findPath(i, j, (Node)null);
+            this.currentPath = this.dragon.findPath(i, j, null);
             if (this.currentPath != null) {
                 this.currentPath.advance();
             }
@@ -135,12 +135,12 @@ public class DragonStrafePlayerPhase extends AbstractDragonPhaseInstance {
         if (this.currentPath != null && !this.currentPath.isDone()) {
             Vec3i vec3i = this.currentPath.getNextNodePos();
             this.currentPath.advance();
-            double d = (double)vec3i.getX();
-            double e = (double)vec3i.getZ();
+            double d = vec3i.getX();
+            double e = vec3i.getZ();
 
             double f;
             do {
-                f = (double)((float)vec3i.getY() + this.dragon.getRandom().nextFloat() * 20.0F);
+                f = (float)vec3i.getY() + this.dragon.getRandom().nextFloat() * 20.0F;
             } while(f < (double)vec3i.getY());
 
             this.targetLocation = new Vec3(d, f, e);
diff --git a/src/main/java/net/minecraft/world/entity/boss/enderdragon/phases/DragonTakeoffPhase.java b/src/main/java/net/minecraft/world/entity/boss/enderdragon/phases/DragonTakeoffPhase.java
index 977abd57b0edc56d04a3ddb2b48fe3fc1acbcd67..e72058f2ddb87ea41e19bc1421f9eafce2362004 100644
--- a/src/main/java/net/minecraft/world/entity/boss/enderdragon/phases/DragonTakeoffPhase.java
+++ b/src/main/java/net/minecraft/world/entity/boss/enderdragon/phases/DragonTakeoffPhase.java
@@ -56,7 +56,7 @@ public class DragonTakeoffPhase extends AbstractDragonPhaseInstance {
             j += 12;
         }
 
-        this.currentPath = this.dragon.findPath(i, j, (Node)null);
+        this.currentPath = this.dragon.findPath(i, j, null);
         this.navigateToNextPathNode();
     }
 
@@ -69,10 +69,10 @@ public class DragonTakeoffPhase extends AbstractDragonPhaseInstance {
 
                 double d;
                 do {
-                    d = (double)((float)vec3i.getY() + this.dragon.getRandom().nextFloat() * 20.0F);
+                    d = (float)vec3i.getY() + this.dragon.getRandom().nextFloat() * 20.0F;
                 } while(d < (double)vec3i.getY());
 
-                this.targetLocation = new Vec3((double)vec3i.getX(), d, (double)vec3i.getZ());
+                this.targetLocation = new Vec3(vec3i.getX(), d, vec3i.getZ());
             }
         }
 
diff --git a/src/main/java/net/minecraft/world/entity/boss/wither/WitherBoss.java b/src/main/java/net/minecraft/world/entity/boss/wither/WitherBoss.java
index 6e91fc44a59a931ddbcb8145856285ef77525e4f..7b648d66143b1d8d8df88b4165992ef2c85794ad 100644
--- a/src/main/java/net/minecraft/world/entity/boss/wither/WitherBoss.java
+++ b/src/main/java/net/minecraft/world/entity/boss/wither/WitherBoss.java
@@ -327,7 +327,7 @@ public class WitherBoss extends Monster implements PowerableMob, RangedAttackMob
                     if (j > 0) {
                         LivingEntity entityliving = (LivingEntity) this.level.getEntity(j);
 
-                        if (entityliving != null && this.canAttack(entityliving) && this.distanceToSqr((Entity) entityliving) <= 900.0D && this.hasLineOfSight(entityliving)) {
+                        if (entityliving != null && this.canAttack(entityliving) && this.distanceToSqr(entityliving) <= 900.0D && this.hasLineOfSight(entityliving)) {
                             this.performRangedAttack(i + 1, entityliving);
                             this.nextHeadUpdate[i - 1] = this.tickCount + 40 + this.random.nextInt(20);
                             this.idleHeadUpdates[i - 1] = 0;
@@ -338,7 +338,7 @@ public class WitherBoss extends Monster implements PowerableMob, RangedAttackMob
                         List<LivingEntity> list = this.level.getNearbyEntities(LivingEntity.class, WitherBoss.TARGETING_CONDITIONS, this, this.getBoundingBox().inflate(20.0D, 8.0D, 20.0D));
 
                         if (!list.isEmpty()) {
-                            LivingEntity entityliving1 = (LivingEntity) list.get(this.random.nextInt(list.size()));
+                            LivingEntity entityliving1 = list.get(this.random.nextInt(list.size()));
 
                             if (CraftEventFactory.callEntityTargetLivingEvent(this, entityliving1, EntityTargetEvent.TargetReason.CLOSEST_ENTITY).isCancelled()) continue; // CraftBukkit
                             this.setAlternativeTarget(i, entityliving1.getId());
@@ -383,7 +383,7 @@ public class WitherBoss extends Monster implements PowerableMob, RangedAttackMob
                     }
 
                     if (flag) {
-                        this.level.levelEvent((Player) null, 1022, this.blockPosition(), 0);
+                        this.level.levelEvent(null, 1022, this.blockPosition(), 0);
                     }
                 }
             }
@@ -467,7 +467,7 @@ public class WitherBoss extends Monster implements PowerableMob, RangedAttackMob
 
     private void performRangedAttack(int headIndex, double targetX, double targetY, double targetZ, boolean charged) {
         if (!this.isSilent()) {
-            this.level.levelEvent((Player) null, 1024, this.blockPosition(), 0);
+            this.level.levelEvent(null, 1024, this.blockPosition(), 0);
         }
 
         double d3 = this.getHeadX(headIndex);
@@ -532,7 +532,7 @@ public class WitherBoss extends Monster implements PowerableMob, RangedAttackMob
     @Override
     protected void dropCustomDeathLoot(DamageSource source, int lootingMultiplier, boolean allowDrops) {
         super.dropCustomDeathLoot(source, lootingMultiplier, allowDrops);
-        ItemEntity entityitem = this.spawnAtLocation((ItemLike) Items.NETHER_STAR);
+        ItemEntity entityitem = this.spawnAtLocation(Items.NETHER_STAR);
 
         if (entityitem != null) {
             entityitem.setExtendedLifetime();
@@ -572,7 +572,7 @@ public class WitherBoss extends Monster implements PowerableMob, RangedAttackMob
     }
 
     public int getInvulnerableTicks() {
-        return ((Integer) this.entityData.get(WitherBoss.DATA_ID_INV)).intValue();
+        return this.entityData.get(WitherBoss.DATA_ID_INV).intValue();
     }
 
     public void setInvulnerableTicks(int ticks) {
@@ -584,7 +584,7 @@ public class WitherBoss extends Monster implements PowerableMob, RangedAttackMob
     }
 
     public void setAlternativeTarget(int headIndex, int id) {
-        this.entityData.set((EntityDataAccessor) WitherBoss.DATA_TARGETS.get(headIndex), Integer.valueOf(id));
+        this.entityData.set(WitherBoss.DATA_TARGETS.get(headIndex), Integer.valueOf(id));
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/entity/decoration/ArmorStand.java b/src/main/java/net/minecraft/world/entity/decoration/ArmorStand.java
index c40c0f2d07cc0a1dda4b43b181b2a22deeac6524..6966f68f1f2c880082596de32a4f68d42480cac0 100644
--- a/src/main/java/net/minecraft/world/entity/decoration/ArmorStand.java
+++ b/src/main/java/net/minecraft/world/entity/decoration/ArmorStand.java
@@ -170,9 +170,9 @@ public class ArmorStand extends LivingEntity {
     public ItemStack getItemBySlot(net.minecraft.world.entity.EquipmentSlot slot) {
         switch (slot.getType()) {
             case HAND:
-                return (ItemStack) this.handItems.get(slot.getIndex());
+                return this.handItems.get(slot.getIndex());
             case ARMOR:
-                return (ItemStack) this.armorItems.get(slot.getIndex());
+                return this.armorItems.get(slot.getIndex());
             default:
                 return ItemStack.EMPTY;
         }
@@ -190,10 +190,10 @@ public class ArmorStand extends LivingEntity {
         this.verifyEquippedItem(itemstack);
         switch (enumitemslot.getType()) {
             case HAND:
-                this.onEquipItem(enumitemslot, (ItemStack) this.handItems.set(enumitemslot.getIndex(), itemstack), itemstack, silent); // CraftBukkit
+                this.onEquipItem(enumitemslot, this.handItems.set(enumitemslot.getIndex(), itemstack), itemstack, silent); // CraftBukkit
                 break;
             case ARMOR:
-                this.onEquipItem(enumitemslot, (ItemStack) this.armorItems.set(enumitemslot.getIndex(), itemstack), itemstack, silent); // CraftBukkit
+                this.onEquipItem(enumitemslot, this.armorItems.set(enumitemslot.getIndex(), itemstack), itemstack, silent); // CraftBukkit
         }
 
         this.noTickEquipmentDirty = true; // Paper - Allow equipment to be updated even when tick disabled
@@ -352,10 +352,10 @@ public class ArmorStand extends LivingEntity {
     @Override
     protected void pushEntities() {
         if (!level.paperConfig().entities.armorStands.doCollisionEntityLookups) return; // Paper
-        List<Entity> list = this.level.getEntities((Entity) this, this.getBoundingBox(), ArmorStand.RIDABLE_MINECARTS);
+        List<Entity> list = this.level.getEntities(this, this.getBoundingBox(), ArmorStand.RIDABLE_MINECARTS);
 
         for (int i = 0; i < list.size(); ++i) {
-            Entity entity = (Entity) list.get(i);
+            Entity entity = list.get(i);
 
             if (this.distanceToSqr(entity) <= 0.2D) {
                 entity.push(this);
@@ -575,7 +575,7 @@ public class ArmorStand extends LivingEntity {
 
     private void showBreakingParticles() {
         if (this.level instanceof ServerLevel) {
-            ((ServerLevel) this.level).sendParticles(new BlockParticleOption(ParticleTypes.BLOCK, Blocks.OAK_PLANKS.defaultBlockState()), this.getX(), this.getY(0.6666666666666666D), this.getZ(), 10, (double) (this.getBbWidth() / 4.0F), (double) (this.getBbHeight() / 4.0F), (double) (this.getBbWidth() / 4.0F), 0.05D);
+            ((ServerLevel) this.level).sendParticles(new BlockParticleOption(ParticleTypes.BLOCK, Blocks.OAK_PLANKS.defaultBlockState()), this.getX(), this.getY(0.6666666666666666D), this.getZ(), 10, this.getBbWidth() / 4.0F, this.getBbHeight() / 4.0F, this.getBbWidth() / 4.0F, 0.05D);
         }
 
     }
@@ -607,7 +607,7 @@ public class ArmorStand extends LivingEntity {
         int i;
 
         for (i = 0; i < this.handItems.size(); ++i) {
-            itemstack = (ItemStack) this.handItems.get(i);
+            itemstack = this.handItems.get(i);
             if (!itemstack.isEmpty()) {
                 drops.add(org.bukkit.craftbukkit.inventory.CraftItemStack.asCraftMirror(itemstack)); // CraftBukkit - add to drops // Paper - mirror so we can destroy it later - though this call site was safe
                 this.handItems.set(i, ItemStack.EMPTY);
@@ -615,7 +615,7 @@ public class ArmorStand extends LivingEntity {
         }
 
         for (i = 0; i < this.armorItems.size(); ++i) {
-            itemstack = (ItemStack) this.armorItems.get(i);
+            itemstack = this.armorItems.get(i);
             if (!itemstack.isEmpty()) {
                 drops.add(org.bukkit.craftbukkit.inventory.CraftItemStack.asCraftMirror(itemstack)); // CraftBukkit - add to drops // Paper - mirror so we can destroy it later - though this call site was safe
                 this.armorItems.set(i, ItemStack.EMPTY);
@@ -626,7 +626,7 @@ public class ArmorStand extends LivingEntity {
     }
 
     private void playBrokenSound() {
-        this.level.playSound((net.minecraft.world.entity.player.Player) null, this.getX(), this.getY(), this.getZ(), SoundEvents.ARMOR_STAND_BREAK, this.getSoundSource(), 1.0F, 1.0F);
+        this.level.playSound(null, this.getX(), this.getY(), this.getZ(), SoundEvents.ARMOR_STAND_BREAK, this.getSoundSource(), 1.0F, 1.0F);
     }
 
     @Override
@@ -690,37 +690,37 @@ public class ArmorStand extends LivingEntity {
 
     public void updatePose() {
         // Paper end
-        Rotations vector3f = (Rotations) this.entityData.get(ArmorStand.DATA_HEAD_POSE);
+        Rotations vector3f = this.entityData.get(ArmorStand.DATA_HEAD_POSE);
 
         if (!this.headPose.equals(vector3f)) {
             this.setHeadPose(vector3f);
         }
 
-        Rotations vector3f1 = (Rotations) this.entityData.get(ArmorStand.DATA_BODY_POSE);
+        Rotations vector3f1 = this.entityData.get(ArmorStand.DATA_BODY_POSE);
 
         if (!this.bodyPose.equals(vector3f1)) {
             this.setBodyPose(vector3f1);
         }
 
-        Rotations vector3f2 = (Rotations) this.entityData.get(ArmorStand.DATA_LEFT_ARM_POSE);
+        Rotations vector3f2 = this.entityData.get(ArmorStand.DATA_LEFT_ARM_POSE);
 
         if (!this.leftArmPose.equals(vector3f2)) {
             this.setLeftArmPose(vector3f2);
         }
 
-        Rotations vector3f3 = (Rotations) this.entityData.get(ArmorStand.DATA_RIGHT_ARM_POSE);
+        Rotations vector3f3 = this.entityData.get(ArmorStand.DATA_RIGHT_ARM_POSE);
 
         if (!this.rightArmPose.equals(vector3f3)) {
             this.setRightArmPose(vector3f3);
         }
 
-        Rotations vector3f4 = (Rotations) this.entityData.get(ArmorStand.DATA_LEFT_LEG_POSE);
+        Rotations vector3f4 = this.entityData.get(ArmorStand.DATA_LEFT_LEG_POSE);
 
         if (!this.leftLegPose.equals(vector3f4)) {
             this.setLeftLegPose(vector3f4);
         }
 
-        Rotations vector3f5 = (Rotations) this.entityData.get(ArmorStand.DATA_RIGHT_LEG_POSE);
+        Rotations vector3f5 = this.entityData.get(ArmorStand.DATA_RIGHT_LEG_POSE);
 
         if (!this.rightLegPose.equals(vector3f5)) {
             this.setRightLegPose(vector3f5);
@@ -770,35 +770,35 @@ public class ArmorStand extends LivingEntity {
     }
 
     public void setSmall(boolean small) {
-        this.entityData.set(ArmorStand.DATA_CLIENT_FLAGS, Byte.valueOf(this.setBit((Byte) this.entityData.get(ArmorStand.DATA_CLIENT_FLAGS), 1, small)));
+        this.entityData.set(ArmorStand.DATA_CLIENT_FLAGS, Byte.valueOf(this.setBit(this.entityData.get(ArmorStand.DATA_CLIENT_FLAGS), 1, small)));
     }
 
     public boolean isSmall() {
-        return (((Byte) this.entityData.get(ArmorStand.DATA_CLIENT_FLAGS)).intValue() & 1) != 0;
+        return (this.entityData.get(ArmorStand.DATA_CLIENT_FLAGS).intValue() & 1) != 0;
     }
 
     public void setShowArms(boolean showArms) {
-        this.entityData.set(ArmorStand.DATA_CLIENT_FLAGS, Byte.valueOf(this.setBit((Byte) this.entityData.get(ArmorStand.DATA_CLIENT_FLAGS), 4, showArms)));
+        this.entityData.set(ArmorStand.DATA_CLIENT_FLAGS, Byte.valueOf(this.setBit(this.entityData.get(ArmorStand.DATA_CLIENT_FLAGS), 4, showArms)));
     }
 
     public boolean isShowArms() {
-        return (((Byte) this.entityData.get(ArmorStand.DATA_CLIENT_FLAGS)).intValue() & 4) != 0;
+        return (this.entityData.get(ArmorStand.DATA_CLIENT_FLAGS).intValue() & 4) != 0;
     }
 
     public void setNoBasePlate(boolean hideBasePlate) {
-        this.entityData.set(ArmorStand.DATA_CLIENT_FLAGS, Byte.valueOf(this.setBit((Byte) this.entityData.get(ArmorStand.DATA_CLIENT_FLAGS), 8, hideBasePlate)));
+        this.entityData.set(ArmorStand.DATA_CLIENT_FLAGS, Byte.valueOf(this.setBit(this.entityData.get(ArmorStand.DATA_CLIENT_FLAGS), 8, hideBasePlate)));
     }
 
     public boolean isNoBasePlate() {
-        return (((Byte) this.entityData.get(ArmorStand.DATA_CLIENT_FLAGS)).intValue() & 8) != 0;
+        return (this.entityData.get(ArmorStand.DATA_CLIENT_FLAGS).intValue() & 8) != 0;
     }
 
     public void setMarker(boolean marker) {
-        this.entityData.set(ArmorStand.DATA_CLIENT_FLAGS, Byte.valueOf(this.setBit((Byte) this.entityData.get(ArmorStand.DATA_CLIENT_FLAGS), 16, marker)));
+        this.entityData.set(ArmorStand.DATA_CLIENT_FLAGS, Byte.valueOf(this.setBit(this.entityData.get(ArmorStand.DATA_CLIENT_FLAGS), 16, marker)));
     }
 
     public boolean isMarker() {
-        return (((Byte) this.entityData.get(ArmorStand.DATA_CLIENT_FLAGS)).intValue() & 16) != 0;
+        return (this.entityData.get(ArmorStand.DATA_CLIENT_FLAGS).intValue() & 16) != 0;
     }
 
     private byte setBit(byte value, int bitField, boolean set) {
diff --git a/src/main/java/net/minecraft/world/entity/decoration/HangingEntity.java b/src/main/java/net/minecraft/world/entity/decoration/HangingEntity.java
index 334a47b5e0d205c57dfcbb17168cbd3f21d15606..84ef22e77af60014df5eda1116eabf6cf1e7cce8 100644
--- a/src/main/java/net/minecraft/world/entity/decoration/HangingEntity.java
+++ b/src/main/java/net/minecraft/world/entity/decoration/HangingEntity.java
@@ -92,9 +92,9 @@ public abstract class HangingEntity extends Entity {
             if (entity != null) {
                 entity.setPosRaw(d0, d1, d2);
             }
-            double d6 = (double) width;
-            double d7 = (double) height;
-            double d8 = (double) width;
+            double d6 = width;
+            double d7 = height;
+            double d8 = width;
 
             if (direction.getAxis() == Direction.Axis.Z) {
                 d8 = 1.0D;
@@ -140,7 +140,7 @@ public abstract class HangingEntity extends Entity {
                     }
                     // CraftBukkit end
                     this.discard();
-                    this.dropItem((Entity) null);
+                    this.dropItem(null);
                 }
             }
         }
@@ -148,7 +148,7 @@ public abstract class HangingEntity extends Entity {
     }
 
     public boolean survives() {
-        if (!this.level.noCollision((Entity) this)) {
+        if (!this.level.noCollision(this)) {
             return false;
         } else {
             int i = Math.max(1, this.getWidth() / 16);
@@ -171,7 +171,7 @@ public abstract class HangingEntity extends Entity {
                 }
             }
 
-            return this.level.getEntities((Entity) this, this.getBoundingBox(), HangingEntity.HANGING_ENTITY).isEmpty();
+            return this.level.getEntities(this, this.getBoundingBox(), HangingEntity.HANGING_ENTITY).isEmpty();
         }
     }
 
@@ -243,7 +243,7 @@ public abstract class HangingEntity extends Entity {
             // CraftBukkit end
 
             this.kill();
-            this.dropItem((Entity) null);
+            this.dropItem(null);
         }
 
     }
@@ -252,7 +252,7 @@ public abstract class HangingEntity extends Entity {
     public void push(double deltaX, double deltaY, double deltaZ) {
         if (false && !this.level.isClientSide && !this.isRemoved() && deltaX * deltaX + deltaY * deltaY + deltaZ * deltaZ > 0.0D) { // CraftBukkit - not needed
             this.kill();
-            this.dropItem((Entity) null);
+            this.dropItem(null);
         }
 
     }
diff --git a/src/main/java/net/minecraft/world/entity/decoration/ItemFrame.java b/src/main/java/net/minecraft/world/entity/decoration/ItemFrame.java
index 91da3a125e952276ce049106013561e1ae9e4cbd..3ab1a858119eba4720a36c2ea2e5368421b023d9 100644
--- a/src/main/java/net/minecraft/world/entity/decoration/ItemFrame.java
+++ b/src/main/java/net/minecraft/world/entity/decoration/ItemFrame.java
@@ -112,9 +112,9 @@ public class ItemFrame extends HangingEntity {
             if (entity != null) {
                 entity.setPosRaw(d1, d2, d3);
             }
-            double d4 = (double) width;
-            double d5 = (double) height;
-            double d6 = (double) width;
+            double d4 = width;
+            double d5 = height;
+            double d6 = width;
             Direction.Axis enumdirection_enumaxis = direction.getAxis();
 
             switch (enumdirection_enumaxis) {
@@ -140,12 +140,12 @@ public class ItemFrame extends HangingEntity {
     public boolean survives() {
         if (this.fixed) {
             return true;
-        } else if (!this.level.noCollision((Entity) this)) {
+        } else if (!this.level.noCollision(this)) {
             return false;
         } else {
             BlockState iblockdata = this.level.getBlockState(this.pos.relative(this.direction.getOpposite()));
 
-            return !iblockdata.getMaterial().isSolid() && (!this.direction.getAxis().isHorizontal() || !DiodeBlock.isDiode(iblockdata)) ? false : this.level.getEntities((Entity) this, this.getBoundingBox(), ItemFrame.HANGING_ENTITY).isEmpty();
+            return !iblockdata.getMaterial().isSolid() && (!this.direction.getAxis().isHorizontal() || !DiodeBlock.isDiode(iblockdata)) ? false : this.level.getEntities(this, this.getBoundingBox(), ItemFrame.HANGING_ENTITY).isEmpty();
         }
     }
 
@@ -295,11 +295,11 @@ public class ItemFrame extends HangingEntity {
             }
 
         });
-        itemstack.setEntityRepresentation((Entity) null);
+        itemstack.setEntityRepresentation(null);
     }
 
     public ItemStack getItem() {
-        return (ItemStack) this.getEntityData().get(ItemFrame.DATA_ITEM);
+        return this.getEntityData().get(ItemFrame.DATA_ITEM);
     }
 
     public OptionalInt getFramedMapId() {
@@ -390,7 +390,7 @@ public class ItemFrame extends HangingEntity {
     }
 
     public int getRotation() {
-        return ((Integer) this.getEntityData().get(ItemFrame.DATA_ROTATION)).intValue();
+        return this.getEntityData().get(ItemFrame.DATA_ROTATION).intValue();
     }
 
     public void setRotation(int value) {
diff --git a/src/main/java/net/minecraft/world/entity/decoration/LeashFenceKnotEntity.java b/src/main/java/net/minecraft/world/entity/decoration/LeashFenceKnotEntity.java
index 6672ca0e82048c23405845a8f5df49acec1b49e5..c95f9e106fbda4e4ab3f3d9b7b11c0f4d427f1ad 100644
--- a/src/main/java/net/minecraft/world/entity/decoration/LeashFenceKnotEntity.java
+++ b/src/main/java/net/minecraft/world/entity/decoration/LeashFenceKnotEntity.java
@@ -39,14 +39,14 @@ public class LeashFenceKnotEntity extends HangingEntity {
 
     public LeashFenceKnotEntity(Level world, BlockPos pos) {
         super(EntityType.LEASH_KNOT, world, pos);
-        this.setPos((double) pos.getX(), (double) pos.getY(), (double) pos.getZ());
+        this.setPos(pos.getX(), pos.getY(), pos.getZ());
     }
 
     @Override
     protected void recalculateBoundingBox() {
         this.setPosRaw((double) this.pos.getX() + 0.5D, (double) this.pos.getY() + 0.375D, (double) this.pos.getZ() + 0.5D);
         double d0 = (double) this.getType().getWidth() / 2.0D;
-        double d1 = (double) this.getType().getHeight();
+        double d1 = this.getType().getHeight();
 
         this.setBoundingBox(new AABB(this.getX() - d0, this.getY(), this.getZ() - d0, this.getX() + d0, this.getY() + d1, this.getZ() + d0));
     }
diff --git a/src/main/java/net/minecraft/world/entity/item/FallingBlockEntity.java b/src/main/java/net/minecraft/world/entity/item/FallingBlockEntity.java
index c4e7c60b46c6bc31405527ea9ea09a2fa3359d55..0abebbafcae0e32a70c275c2109186dca0570a43 100644
--- a/src/main/java/net/minecraft/world/entity/item/FallingBlockEntity.java
+++ b/src/main/java/net/minecraft/world/entity/item/FallingBlockEntity.java
@@ -91,7 +91,7 @@ public class FallingBlockEntity extends Entity {
 
     public static FallingBlockEntity fall(Level world, BlockPos blockposition, BlockState iblockdata, org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason spawnReason) {
         // CraftBukkit end
-        FallingBlockEntity entityfallingblock = new FallingBlockEntity(world, (double) blockposition.getX() + 0.5D, (double) blockposition.getY(), (double) blockposition.getZ() + 0.5D, iblockdata.hasProperty(BlockStateProperties.WATERLOGGED) ? (BlockState) iblockdata.setValue(BlockStateProperties.WATERLOGGED, Boolean.FALSE) : iblockdata);
+        FallingBlockEntity entityfallingblock = new FallingBlockEntity(world, (double) blockposition.getX() + 0.5D, blockposition.getY(), (double) blockposition.getZ() + 0.5D, iblockdata.hasProperty(BlockStateProperties.WATERLOGGED) ? iblockdata.setValue(BlockStateProperties.WATERLOGGED, Boolean.FALSE) : iblockdata);
         if (CraftEventFactory.callEntityChangeBlockEvent(entityfallingblock, blockposition, iblockdata.getFluidState().createLegacyBlock()).isCancelled()) return entityfallingblock; // CraftBukkit
 
         world.setBlock(blockposition, iblockdata.getFluidState().createLegacyBlock(), 3);
@@ -109,7 +109,7 @@ public class FallingBlockEntity extends Entity {
     }
 
     public BlockPos getStartPos() {
-        return (BlockPos) this.entityData.get(FallingBlockEntity.DATA_START_POS);
+        return this.entityData.get(FallingBlockEntity.DATA_START_POS);
     }
 
     @Override
@@ -180,7 +180,7 @@ public class FallingBlockEntity extends Entity {
                 if (!this.onGround && !flag1) {
                     if (!this.level.isClientSide && ((this.time > 100 && autoExpire) && (blockposition.getY() <= this.level.getMinBuildHeight() || blockposition.getY() > this.level.getMaxBuildHeight()) || (this.time > 600 && autoExpire))) { // Paper - Auto expire setting
                         if (this.dropItem && this.level.getGameRules().getBoolean(GameRules.RULE_DOENTITYDROPS)) {
-                            this.spawnAtLocation((ItemLike) block);
+                            this.spawnAtLocation(block);
                         }
 
                         this.discard();
@@ -191,13 +191,13 @@ public class FallingBlockEntity extends Entity {
                     this.setDeltaMovement(this.getDeltaMovement().multiply(0.7D, -0.5D, 0.7D));
                     if (!iblockdata.is(Blocks.MOVING_PISTON)) {
                         if (!this.cancelDrop) {
-                            boolean flag2 = iblockdata.canBeReplaced((BlockPlaceContext) (new DirectionalPlaceContext(this.level, blockposition, Direction.DOWN, ItemStack.EMPTY, Direction.UP)));
+                            boolean flag2 = iblockdata.canBeReplaced(new DirectionalPlaceContext(this.level, blockposition, Direction.DOWN, ItemStack.EMPTY, Direction.UP));
                             boolean flag3 = FallingBlock.isFree(this.level.getBlockState(blockposition.below())) && (!flag || !flag1);
                             boolean flag4 = this.blockState.canSurvive(this.level, blockposition) && !flag3;
 
                             if (flag2 && flag4) {
                                 if (this.blockState.hasProperty(BlockStateProperties.WATERLOGGED) && this.level.getFluidState(blockposition).getType() == Fluids.WATER) {
-                                    this.blockState = (BlockState) this.blockState.setValue(BlockStateProperties.WATERLOGGED, Boolean.TRUE);
+                                    this.blockState = this.blockState.setValue(BlockStateProperties.WATERLOGGED, Boolean.TRUE);
                                 }
 
                                 // CraftBukkit start
@@ -238,13 +238,13 @@ public class FallingBlockEntity extends Entity {
                                 } else if (this.dropItem && this.level.getGameRules().getBoolean(GameRules.RULE_DOENTITYDROPS)) {
                                     this.discard();
                                     this.callOnBrokenAfterFall(block, blockposition);
-                                    this.spawnAtLocation((ItemLike) block);
+                                    this.spawnAtLocation(block);
                                 }
                             } else {
                                 this.discard();
                                 if (this.dropItem && this.level.getGameRules().getBoolean(GameRules.RULE_DOENTITYDROPS)) {
                                     this.callOnBrokenAfterFall(block, blockposition);
-                                    this.spawnAtLocation((ItemLike) block);
+                                    this.spawnAtLocation(block);
                                 }
                             }
                         } else {
@@ -291,7 +291,7 @@ public class FallingBlockEntity extends Entity {
 
                 float f2 = (float) Math.min(Mth.floor((float) i * this.fallDamagePerDistance), this.fallDamageMax);
 
-                this.level.getEntities((Entity) this, this.getBoundingBox(), predicate).forEach((entity) -> {
+                this.level.getEntities(this, this.getBoundingBox(), predicate).forEach((entity) -> {
                     CraftEventFactory.entityDamage = this; // CraftBukkit
                     entity.hurt(damagesource1, f2);
                     CraftEventFactory.entityDamage = null; // CraftBukkit
@@ -392,7 +392,7 @@ public class FallingBlockEntity extends Entity {
     @Override
     public void fillCrashReportCategory(CrashReportCategory section) {
         super.fillCrashReportCategory(section);
-        section.setDetail("Immitating BlockState", (Object) this.blockState.toString());
+        section.setDetail("Immitating BlockState", this.blockState.toString());
     }
 
     public BlockState getBlockState() {
diff --git a/src/main/java/net/minecraft/world/entity/item/ItemEntity.java b/src/main/java/net/minecraft/world/entity/item/ItemEntity.java
index f0ccdfbd7d7be8c6e302609accf8fe9cac8885c4..89455454e0cd6bb515bac6d40de221aacc0a4f89 100644
--- a/src/main/java/net/minecraft/world/entity/item/ItemEntity.java
+++ b/src/main/java/net/minecraft/world/entity/item/ItemEntity.java
@@ -97,7 +97,7 @@ public class ItemEntity extends Entity {
         Level world = this.level;
 
         Objects.requireNonNull(this.level);
-        return (Entity) Util.mapNullable(uuid, world::getGlobalPlayerByUUID); // Paper - check all players
+        return Util.mapNullable(uuid, world::getGlobalPlayerByUUID); // Paper - check all players
     }
 
     @Override
@@ -159,7 +159,7 @@ public class ItemEntity extends Entity {
                     f1 = this.level.getBlockState(new BlockPos(this.getX(), this.getY() - 1.0D, this.getZ())).getBlock().getFriction() * 0.98F;
                 }
 
-                this.setDeltaMovement(this.getDeltaMovement().multiply((double) f1, 0.98D, (double) f1));
+                this.setDeltaMovement(this.getDeltaMovement().multiply(f1, 0.98D, f1));
                 if (this.onGround) {
                     Vec3 vec3d1 = this.getDeltaMovement();
 
@@ -460,7 +460,7 @@ public class ItemEntity extends Entity {
                 }
 
                 // Call newer event afterwards
-                EntityPickupItemEvent entityEvent = new EntityPickupItemEvent((org.bukkit.entity.Player) player.getBukkitEntity(), (org.bukkit.entity.Item) this.getBukkitEntity(), remaining);
+                EntityPickupItemEvent entityEvent = new EntityPickupItemEvent(player.getBukkitEntity(), (org.bukkit.entity.Item) this.getBukkitEntity(), remaining);
                 entityEvent.setCancelled(!entityEvent.getEntity().getCanPickupItems());
                 this.level.getCraftServer().getPluginManager().callEvent(entityEvent);
                 if (entityEvent.isCancelled()) {
@@ -506,7 +506,7 @@ public class ItemEntity extends Entity {
     public Component getName() {
         Component ichatbasecomponent = this.getCustomName();
 
-        return (Component) (ichatbasecomponent != null ? ichatbasecomponent : Component.translatable(this.getItem().getDescriptionId()));
+        return ichatbasecomponent != null ? ichatbasecomponent : Component.translatable(this.getItem().getDescriptionId());
     }
 
     @Override
@@ -527,7 +527,7 @@ public class ItemEntity extends Entity {
     }
 
     public ItemStack getItem() {
-        return (ItemStack) this.getEntityData().get(ItemEntity.DATA_ITEM);
+        return this.getEntityData().get(ItemEntity.DATA_ITEM);
     }
 
     public void setItem(ItemStack stack) {
diff --git a/src/main/java/net/minecraft/world/entity/item/PrimedTnt.java b/src/main/java/net/minecraft/world/entity/item/PrimedTnt.java
index 2dcb57274342e521089c98347f1b33ee7110c556..ab2d9e98116615fb5528e864c90f29f98c774563 100644
--- a/src/main/java/net/minecraft/world/entity/item/PrimedTnt.java
+++ b/src/main/java/net/minecraft/world/entity/item/PrimedTnt.java
@@ -163,7 +163,7 @@ public class PrimedTnt extends Entity {
     }
 
     public int getFuse() {
-        return ((Integer) this.entityData.get(PrimedTnt.DATA_FUSE_ID)).intValue();
+        return this.entityData.get(PrimedTnt.DATA_FUSE_ID).intValue();
     }
 
     // Paper start - Optional prevent TNT from moving in water
diff --git a/src/main/java/net/minecraft/world/entity/monster/Creeper.java b/src/main/java/net/minecraft/world/entity/monster/Creeper.java
index 51aacfa849a81aa7dbfe9fabf84f53ccd027b45b..05abef41d1ed92f02e855e05f928fa78b6a5993d 100644
--- a/src/main/java/net/minecraft/world/entity/monster/Creeper.java
+++ b/src/main/java/net/minecraft/world/entity/monster/Creeper.java
@@ -110,7 +110,7 @@ public class Creeper extends Monster implements PowerableMob {
     @Override
     public void addAdditionalSaveData(CompoundTag nbt) {
         super.addAdditionalSaveData(nbt);
-        if (((Boolean) this.entityData.get(Creeper.DATA_IS_POWERED)).booleanValue()) {
+        if (this.entityData.get(Creeper.DATA_IS_POWERED).booleanValue()) {
             nbt.putBoolean("powered", true);
         }
 
@@ -193,7 +193,7 @@ public class Creeper extends Monster implements PowerableMob {
 
             if (entitycreeper.canDropMobsSkull()) {
                 entitycreeper.increaseDroppedSkulls();
-                this.spawnAtLocation((ItemLike) Items.CREEPER_HEAD);
+                this.spawnAtLocation(Items.CREEPER_HEAD);
             }
         }
 
@@ -206,7 +206,7 @@ public class Creeper extends Monster implements PowerableMob {
 
     @Override
     public boolean isPowered() {
-        return ((Boolean) this.entityData.get(Creeper.DATA_IS_POWERED)).booleanValue();
+        return this.entityData.get(Creeper.DATA_IS_POWERED).booleanValue();
     }
 
     public float getSwelling(float timeDelta) {
@@ -214,7 +214,7 @@ public class Creeper extends Monster implements PowerableMob {
     }
 
     public int getSwellDir() {
-        return ((Integer) this.entityData.get(Creeper.DATA_SWELL_DIR)).intValue();
+        return this.entityData.get(Creeper.DATA_SWELL_DIR).intValue();
     }
 
     public void setSwellDir(int fuseSpeed) {
@@ -311,7 +311,7 @@ public class Creeper extends Monster implements PowerableMob {
     }
 
     public boolean isIgnited() {
-        return ((Boolean) this.entityData.get(Creeper.DATA_IS_IGNITED)).booleanValue();
+        return this.entityData.get(Creeper.DATA_IS_IGNITED).booleanValue();
     }
 
     public void ignite() {
diff --git a/src/main/java/net/minecraft/world/entity/monster/Drowned.java b/src/main/java/net/minecraft/world/entity/monster/Drowned.java
index 8b3eaf7495a1681e38825b585dcbaab0a0b27fa0..64fbb7121e9fffdcb071ca96f23ad47d88cd1d96 100644
--- a/src/main/java/net/minecraft/world/entity/monster/Drowned.java
+++ b/src/main/java/net/minecraft/world/entity/monster/Drowned.java
@@ -226,7 +226,7 @@ public class Drowned extends Zombie implements RangedAttackMob {
             BlockPos blockposition = pathentity.getTarget();
 
             if (blockposition != null) {
-                double d0 = this.distanceToSqr((double) blockposition.getX(), (double) blockposition.getY(), (double) blockposition.getZ());
+                double d0 = this.distanceToSqr(blockposition.getX(), blockposition.getY(), blockposition.getZ());
 
                 if (d0 < 4.0D) {
                     return true;
@@ -400,7 +400,7 @@ public class Drowned extends Zombie implements RangedAttackMob {
         private final Drowned drowned;
 
         public DrownedAttackGoal(Drowned drowned, double speed, boolean pauseWhenMobIdle) {
-            super((Zombie) drowned, speed, pauseWhenMobIdle);
+            super(drowned, speed, pauseWhenMobIdle);
             this.drowned = drowned;
         }
 
@@ -480,7 +480,7 @@ public class Drowned extends Zombie implements RangedAttackMob {
         @Override
         public void tick() {
             if (this.drowned.getY() < (double) (this.seaLevel - 1) && (this.drowned.getNavigation().isDone() || this.drowned.closeToNextPos())) {
-                Vec3 vec3d = DefaultRandomPos.getPosTowards(this.drowned, 4, 8, new Vec3(this.drowned.getX(), (double) (this.seaLevel - 1), this.drowned.getZ()), 1.5707963705062866D);
+                Vec3 vec3d = DefaultRandomPos.getPosTowards(this.drowned, 4, 8, new Vec3(this.drowned.getX(), this.seaLevel - 1, this.drowned.getZ()), 1.5707963705062866D);
 
                 if (vec3d == null) {
                     this.stuck = true;
diff --git a/src/main/java/net/minecraft/world/entity/monster/EnderMan.java b/src/main/java/net/minecraft/world/entity/monster/EnderMan.java
index 27ad2d62ced58a20e2ce3b9c64c8cc73cf5b217a..defd0e9099f8574e068eb9b4e037d23f0d014af1 100644
--- a/src/main/java/net/minecraft/world/entity/monster/EnderMan.java
+++ b/src/main/java/net/minecraft/world/entity/monster/EnderMan.java
@@ -239,7 +239,7 @@ public class EnderMan extends Monster implements NeutralMob {
     }
     private boolean isLookingAtMe_check(Player player) {
         // Paper end
-        ItemStack itemstack = (ItemStack) player.getInventory().armor.get(3);
+        ItemStack itemstack = player.getInventory().armor.get(3);
 
         if (itemstack.is(Blocks.CARVED_PUMPKIN.asItem())) {
             return false;
@@ -287,7 +287,7 @@ public class EnderMan extends Monster implements NeutralMob {
             float f = this.getLightLevelDependentMagicValue();
 
             if (f > 0.5F && this.level.canSeeSky(this.blockPosition()) && this.random.nextFloat() * 30.0F < (f - 0.4F) * 2.0F && this.tryEscape(com.destroystokyo.paper.event.entity.EndermanEscapeEvent.Reason.RUNAWAY)) { // Paper
-                this.setTarget((LivingEntity) null);
+                this.setTarget(null);
                 this.teleport();
             }
         }
@@ -335,9 +335,9 @@ public class EnderMan extends Monster implements NeutralMob {
             boolean flag2 = this.randomTeleport(x, y, z, true);
 
             if (flag2) {
-                this.level.gameEvent(GameEvent.TELEPORT, vec3d, GameEvent.Context.of((Entity) this));
+                this.level.gameEvent(GameEvent.TELEPORT, vec3d, GameEvent.Context.of(this));
                 if (!this.isSilent()) {
-                    this.level.playSound((Player) null, this.xo, this.yo, this.zo, SoundEvents.ENDERMAN_TELEPORT, this.getSoundSource(), 1.0F, 1.0F);
+                    this.level.playSound(null, this.xo, this.yo, this.zo, SoundEvents.ENDERMAN_TELEPORT, this.getSoundSource(), 1.0F, 1.0F);
                     this.playSound(SoundEvents.ENDERMAN_TELEPORT, 1.0F, 1.0F);
                 }
             }
@@ -391,7 +391,7 @@ public class EnderMan extends Monster implements NeutralMob {
 
     @Nullable
     public BlockState getCarriedBlock() {
-        return (BlockState) ((Optional) this.entityData.get(EnderMan.DATA_CARRY_STATE)).orElse((Object) null);
+        return (BlockState) ((Optional) this.entityData.get(EnderMan.DATA_CARRY_STATE)).orElse(null);
     }
 
     @Override
@@ -438,11 +438,11 @@ public class EnderMan extends Monster implements NeutralMob {
     }
 
     public boolean isCreepy() {
-        return ((Boolean) this.entityData.get(EnderMan.DATA_CREEPY)).booleanValue();
+        return this.entityData.get(EnderMan.DATA_CREEPY).booleanValue();
     }
 
     public boolean hasBeenStaredAt() {
-        return ((Boolean) this.entityData.get(EnderMan.DATA_STARED_AT)).booleanValue();
+        return this.entityData.get(EnderMan.DATA_STARED_AT).booleanValue();
     }
 
     public void setBeingStaredAt() {
@@ -481,7 +481,7 @@ public class EnderMan extends Monster implements NeutralMob {
             if (!(this.target instanceof Player)) {
                 return false;
             } else {
-                double d0 = this.target.distanceToSqr((Entity) this.enderman);
+                double d0 = this.target.distanceToSqr(this.enderman);
 
                 return d0 > 256.0D ? false : this.enderman.isLookingAtMe((Player) this.target);
             }
@@ -532,7 +532,7 @@ public class EnderMan extends Monster implements NeutralMob {
                     if (!org.bukkit.craftbukkit.event.CraftEventFactory.callEntityChangeBlockEvent(this.enderman, blockposition, iblockdata2).isCancelled()) {
                     world.setBlock(blockposition, iblockdata2, 3);
                     world.gameEvent(GameEvent.BLOCK_PLACE, blockposition, GameEvent.Context.of(this.enderman, iblockdata2));
-                    this.enderman.setCarriedBlock((BlockState) null);
+                    this.enderman.setCarriedBlock(null);
                     }
                     // CraftBukkit end
                 }
@@ -642,7 +642,7 @@ public class EnderMan extends Monster implements NeutralMob {
         @Override
         public void tick() {
             if (this.enderman.getTarget() == null) {
-                super.setTarget((LivingEntity) null);
+                super.setTarget(null);
             }
 
             if (this.pendingTarget != null) {
@@ -654,12 +654,12 @@ public class EnderMan extends Monster implements NeutralMob {
             } else {
                 if (this.target != null && !this.enderman.isPassenger()) {
                     if (this.enderman.isLookingAtMe((Player) this.target)) {
-                        if (this.target.distanceToSqr((Entity) this.enderman) < 16.0D && this.enderman.tryEscape(com.destroystokyo.paper.event.entity.EndermanEscapeEvent.Reason.STARE)) { // Paper
+                        if (this.target.distanceToSqr(this.enderman) < 16.0D && this.enderman.tryEscape(com.destroystokyo.paper.event.entity.EndermanEscapeEvent.Reason.STARE)) { // Paper
                             this.enderman.teleport();
                         }
 
                         this.teleportTime = 0;
-                    } else if (this.target.distanceToSqr((Entity) this.enderman) > 256.0D && this.teleportTime++ >= this.adjustedTickDelay(30) && this.enderman.teleportTowards(this.target)) {
+                    } else if (this.target.distanceToSqr(this.enderman) > 256.0D && this.teleportTime++ >= this.adjustedTickDelay(30) && this.enderman.teleportTowards(this.target)) {
                         this.teleportTime = 0;
                     }
                 }
diff --git a/src/main/java/net/minecraft/world/entity/monster/Evoker.java b/src/main/java/net/minecraft/world/entity/monster/Evoker.java
index 42d278ed6bc57724a6a497f098a78a9606b38089..9fd3d77a0a431c917d30995a0d6d9f30d27077dd 100644
--- a/src/main/java/net/minecraft/world/entity/monster/Evoker.java
+++ b/src/main/java/net/minecraft/world/entity/monster/Evoker.java
@@ -97,7 +97,7 @@ public class Evoker extends SpellcasterIllager {
 
     @Override
     public boolean isAlliedTo(Entity other) {
-        return other == null ? false : (other == this ? true : (super.isAlliedTo(other) ? true : (other instanceof Vex ? this.isAlliedTo((Entity) ((Vex) other).getOwner()) : (other instanceof LivingEntity && ((LivingEntity) other).getMobType() == MobType.ILLAGER ? this.getTeam() == null && other.getTeam() == null : false))));
+        return other == null ? false : (other == this ? true : (super.isAlliedTo(other) ? true : (other instanceof Vex ? this.isAlliedTo(((Vex) other).getOwner()) : (other instanceof LivingEntity && ((LivingEntity) other).getMobType() == MobType.ILLAGER ? this.getTeam() == null && other.getTeam() == null : false))));
     }
 
     @Override
@@ -184,11 +184,11 @@ public class Evoker extends SpellcasterIllager {
 
             for (int i = 0; i < 3; ++i) {
                 BlockPos blockposition = Evoker.this.blockPosition().offset(-2 + Evoker.this.random.nextInt(5), 1, -2 + Evoker.this.random.nextInt(5));
-                Vex entityvex = (Vex) EntityType.VEX.create(Evoker.this.level);
+                Vex entityvex = EntityType.VEX.create(Evoker.this.level);
 
                 if (entityvex != null) {
                     entityvex.moveTo(blockposition, 0.0F, 0.0F);
-                    entityvex.finalizeSpawn(worldserver, Evoker.this.level.getCurrentDifficultyAt(blockposition), MobSpawnType.MOB_SUMMONED, (SpawnGroupData) null, (CompoundTag) null);
+                    entityvex.finalizeSpawn(worldserver, Evoker.this.level.getCurrentDifficultyAt(blockposition), MobSpawnType.MOB_SUMMONED, null, null);
                     entityvex.setOwner(Evoker.this);
                     entityvex.setBoundOrigin(blockposition);
                     entityvex.setLimitedLife(20 * (30 + Evoker.this.random.nextInt(90)));
@@ -233,7 +233,7 @@ public class Evoker extends SpellcasterIllager {
             float f = (float) Mth.atan2(entityliving.getZ() - Evoker.this.getZ(), entityliving.getX() - Evoker.this.getX());
             int i;
 
-            if (Evoker.this.distanceToSqr((Entity) entityliving) < 9.0D) {
+            if (Evoker.this.distanceToSqr(entityliving) < 9.0D) {
                 float f1;
 
                 for (i = 0; i < 5; ++i) {
@@ -325,7 +325,7 @@ public class Evoker extends SpellcasterIllager {
                 if (list.isEmpty()) {
                     return false;
                 } else {
-                    Evoker.this.setWololoTarget((Sheep) list.get(Evoker.this.random.nextInt(list.size())));
+                    Evoker.this.setWololoTarget(list.get(Evoker.this.random.nextInt(list.size())));
                     return true;
                 }
             }
@@ -339,7 +339,7 @@ public class Evoker extends SpellcasterIllager {
         @Override
         public void stop() {
             super.stop();
-            Evoker.this.setWololoTarget((Sheep) null);
+            Evoker.this.setWololoTarget(null);
         }
 
         @Override
diff --git a/src/main/java/net/minecraft/world/entity/monster/Ghast.java b/src/main/java/net/minecraft/world/entity/monster/Ghast.java
index 49e06f5fa60ea4a7933f22ade09bc0d399ecd009..f20dba357bdefbcc535f075d8d9a745fcefac4c3 100644
--- a/src/main/java/net/minecraft/world/entity/monster/Ghast.java
+++ b/src/main/java/net/minecraft/world/entity/monster/Ghast.java
@@ -55,7 +55,7 @@ public class Ghast extends FlyingMob implements Enemy {
     }
 
     public boolean isCharging() {
-        return ((Boolean) this.entityData.get(Ghast.DATA_IS_CHARGING)).booleanValue();
+        return this.entityData.get(Ghast.DATA_IS_CHARGING).booleanValue();
     }
 
     public void setCharging(boolean shooting) {
@@ -274,7 +274,7 @@ public class Ghast extends FlyingMob implements Enemy {
                 LivingEntity entityliving = this.ghast.getTarget();
                 double d0 = 64.0D;
 
-                if (entityliving.distanceToSqr((Entity) this.ghast) < 4096.0D) {
+                if (entityliving.distanceToSqr(this.ghast) < 4096.0D) {
                     double d1 = entityliving.getX() - this.ghast.getX();
                     double d2 = entityliving.getZ() - this.ghast.getZ();
 
@@ -322,12 +322,12 @@ public class Ghast extends FlyingMob implements Enemy {
             if (entityliving != null) {
                 double d0 = 64.0D;
 
-                if (entityliving.distanceToSqr((Entity) this.ghast) < 4096.0D && this.ghast.hasLineOfSight(entityliving)) {
+                if (entityliving.distanceToSqr(this.ghast) < 4096.0D && this.ghast.hasLineOfSight(entityliving)) {
                     Level world = this.ghast.level;
 
                     ++this.chargeTime;
                     if (this.chargeTime == 10 && !this.ghast.isSilent()) {
-                        world.levelEvent((Player) null, 1015, this.ghast.blockPosition(), 0);
+                        world.levelEvent(null, 1015, this.ghast.blockPosition(), 0);
                     }
 
                     if (this.chargeTime == 20) {
@@ -338,7 +338,7 @@ public class Ghast extends FlyingMob implements Enemy {
                         double d4 = entityliving.getZ() - (this.ghast.getZ() + vec3d.z * 4.0D);
 
                         if (!this.ghast.isSilent()) {
-                            world.levelEvent((Player) null, 1016, this.ghast.blockPosition(), 0);
+                            world.levelEvent(null, 1016, this.ghast.blockPosition(), 0);
                         }
 
                         LargeFireball entitylargefireball = new LargeFireball(world, this.ghast, d2, d3, d4, this.ghast.getExplosionPower());
diff --git a/src/main/java/net/minecraft/world/entity/monster/Husk.java b/src/main/java/net/minecraft/world/entity/monster/Husk.java
index 4996347c6dde85a2dc9aa37fdf495160093fac64..89dc834a28f6295a9c570f87e289349b61ddd797 100644
--- a/src/main/java/net/minecraft/world/entity/monster/Husk.java
+++ b/src/main/java/net/minecraft/world/entity/monster/Husk.java
@@ -73,7 +73,7 @@ public class Husk extends Zombie {
     protected void doUnderWaterConversion() {
         this.convertToZombieType(EntityType.ZOMBIE);
         if (!this.isSilent()) {
-            this.level.levelEvent((Player) null, 1041, this.blockPosition(), 0);
+            this.level.levelEvent(null, 1041, this.blockPosition(), 0);
         }
 
     }
diff --git a/src/main/java/net/minecraft/world/entity/monster/Illusioner.java b/src/main/java/net/minecraft/world/entity/monster/Illusioner.java
index 868deae03db6f3c204e416538d6a51ab4c8377ad..e702822202190a157cabee14edde1f45dd0ab07e 100644
--- a/src/main/java/net/minecraft/world/entity/monster/Illusioner.java
+++ b/src/main/java/net/minecraft/world/entity/monster/Illusioner.java
@@ -123,7 +123,7 @@ public class Illusioner extends SpellcasterIllager implements RangedAttackMob {
 
                 for (j = 0; j < 4; ++j) {
                     this.clientSideIllusionOffsets[0][j] = this.clientSideIllusionOffsets[1][j];
-                    this.clientSideIllusionOffsets[1][j] = new Vec3((double) (-6.0F + (float) this.random.nextInt(13)) * 0.5D, (double) Math.max(0, this.random.nextInt(6) - 4), (double) (-6.0F + (float) this.random.nextInt(13)) * 0.5D);
+                    this.clientSideIllusionOffsets[1][j] = new Vec3((double) (-6.0F + (float) this.random.nextInt(13)) * 0.5D, Math.max(0, this.random.nextInt(6) - 4), (double) (-6.0F + (float) this.random.nextInt(13)) * 0.5D);
                 }
 
                 for (j = 0; j < 16; ++j) {
@@ -145,7 +145,7 @@ public class Illusioner extends SpellcasterIllager implements RangedAttackMob {
         if (this.clientSideIllusionTicks <= 0) {
             return this.clientSideIllusionOffsets[1];
         } else {
-            double d0 = (double) (((float) this.clientSideIllusionTicks - f) / 3.0F);
+            double d0 = ((float) this.clientSideIllusionTicks - f) / 3.0F;
 
             d0 = Math.pow(d0, 0.25D);
             Vec3[] avec3d = new Vec3[4];
diff --git a/src/main/java/net/minecraft/world/entity/monster/Phantom.java b/src/main/java/net/minecraft/world/entity/monster/Phantom.java
index a000a6ecbfcbc7991987400ee85a97f847698e39..e55715badeaf901034f98c0b758222d554ca611c 100644
--- a/src/main/java/net/minecraft/world/entity/monster/Phantom.java
+++ b/src/main/java/net/minecraft/world/entity/monster/Phantom.java
@@ -85,16 +85,16 @@ public class Phantom extends FlyingMob implements Enemy {
     }
 
     public void setPhantomSize(int size) {
-        this.entityData.set(Phantom.ID_SIZE, Integer.valueOf(Mth.clamp(size, (int) 0, (int) 64)));
+        this.entityData.set(Phantom.ID_SIZE, Integer.valueOf(Mth.clamp(size, 0, 64)));
     }
 
     private void updatePhantomSizeInfo() {
         this.refreshDimensions();
-        this.getAttribute(Attributes.ATTACK_DAMAGE).setBaseValue((double) (6 + this.getPhantomSize()));
+        this.getAttribute(Attributes.ATTACK_DAMAGE).setBaseValue(6 + this.getPhantomSize());
     }
 
     public int getPhantomSize() {
-        return ((Integer) this.entityData.get(Phantom.ID_SIZE)).intValue();
+        return this.entityData.get(Phantom.ID_SIZE).intValue();
     }
 
     @Override
@@ -449,7 +449,7 @@ public class Phantom extends FlyingMob implements Enemy {
 
         @Override
         public void stop() {
-            Phantom.this.setTarget((LivingEntity) null);
+            Phantom.this.setTarget(null);
             Phantom.this.attackPhase = Phantom.AttackPhase.CIRCLE;
         }
 
@@ -538,7 +538,7 @@ public class Phantom extends FlyingMob implements Enemy {
             }
 
             this.angle += this.clockwise * 15.0F * 0.017453292F;
-            Phantom.this.moveTargetPoint = Vec3.atLowerCornerOf(Phantom.this.anchorPoint).add((double) (this.distance * Mth.cos(this.angle)), (double) (-4.0F + this.height), (double) (this.distance * Mth.sin(this.angle)));
+            Phantom.this.moveTargetPoint = Vec3.atLowerCornerOf(Phantom.this.anchorPoint).add(this.distance * Mth.cos(this.angle), -4.0F + this.height, this.distance * Mth.sin(this.angle));
         }
     }
 
diff --git a/src/main/java/net/minecraft/world/entity/monster/Ravager.java b/src/main/java/net/minecraft/world/entity/monster/Ravager.java
index 19aea8d51bd048aa3b84186bd7db2fc4ebf303b7..3515a1c2b54926cf77939a2c1ddb56a64bf87de2 100644
--- a/src/main/java/net/minecraft/world/entity/monster/Ravager.java
+++ b/src/main/java/net/minecraft/world/entity/monster/Ravager.java
@@ -208,9 +208,9 @@ public class Ravager extends Raider {
 
     private void stunEffect() {
         if (this.random.nextInt(6) == 0) {
-            double d0 = this.getX() - (double) this.getBbWidth() * Math.sin((double) (this.yBodyRot * 0.017453292F)) + (this.random.nextDouble() * 0.6D - 0.3D);
+            double d0 = this.getX() - (double) this.getBbWidth() * Math.sin(this.yBodyRot * 0.017453292F) + (this.random.nextDouble() * 0.6D - 0.3D);
             double d1 = this.getY() + (double) this.getBbHeight() - 0.3D;
-            double d2 = this.getZ() + (double) this.getBbWidth() * Math.cos((double) (this.yBodyRot * 0.017453292F)) + (this.random.nextDouble() * 0.6D - 0.3D);
+            double d2 = this.getZ() + (double) this.getBbWidth() * Math.cos(this.yBodyRot * 0.017453292F) + (this.random.nextDouble() * 0.6D - 0.3D);
 
             this.level.addParticle(ParticleTypes.ENTITY_EFFECT, d0, d1, d2, 0.4980392156862745D, 0.5137254901960784D, 0.5725490196078431D);
         }
@@ -356,7 +356,7 @@ public class Ravager extends Raider {
         protected double getAttackReachSqr(LivingEntity entity) {
             float f = Ravager.this.getBbWidth() - 0.1F;
 
-            return (double) (f * 2.0F * f * 2.0F + entity.getBbWidth());
+            return f * 2.0F * f * 2.0F + entity.getBbWidth();
         }
     }
 
diff --git a/src/main/java/net/minecraft/world/entity/monster/Shulker.java b/src/main/java/net/minecraft/world/entity/monster/Shulker.java
index 88ed7a7c5543b848f51f0a0bb1c3503b21363006..fb58656c02f699969d0c060bb435d3fcd3bc89b2 100644
--- a/src/main/java/net/minecraft/world/entity/monster/Shulker.java
+++ b/src/main/java/net/minecraft/world/entity/monster/Shulker.java
@@ -76,7 +76,7 @@ public class Shulker extends AbstractGolem implements VariantHolder<Optional<Dye
     private static final int OTHER_SHULKER_SCAN_RADIUS = 8;
     private static final int OTHER_SHULKER_LIMIT = 5;
     private static final float PEEK_PER_TICK = 0.05F;
-    static final Vector3f FORWARD = (Vector3f) Util.make(() -> {
+    static final Vector3f FORWARD = Util.make(() -> {
         Vec3i baseblockposition = Direction.SOUTH.getNormal();
 
         return new Vector3f((float) baseblockposition.getX(), (float) baseblockposition.getY(), (float) baseblockposition.getZ());
@@ -170,8 +170,8 @@ public class Shulker extends AbstractGolem implements VariantHolder<Optional<Dye
     public void addAdditionalSaveData(CompoundTag nbt) {
         super.addAdditionalSaveData(nbt);
         nbt.putByte("AttachFace", (byte) this.getAttachFace().get3DDataValue());
-        nbt.putByte("Peek", ((Byte) this.entityData.get(Shulker.DATA_PEEK_ID)).byteValue());
-        nbt.putByte("Color", ((Byte) this.entityData.get(Shulker.DATA_COLOR_ID)).byteValue());
+        nbt.putByte("Peek", this.entityData.get(Shulker.DATA_PEEK_ID).byteValue());
+        nbt.putByte("Color", this.entityData.get(Shulker.DATA_COLOR_ID).byteValue());
     }
 
     @Override
@@ -244,7 +244,7 @@ public class Shulker extends AbstractGolem implements VariantHolder<Optional<Dye
         float f2 = f - f1;
 
         if (f2 > 0.0F) {
-            List<Entity> list = this.level.getEntities((Entity) this, Shulker.getProgressDeltaAabb(enumdirection, f1, f).move(this.getX() - 0.5D, this.getY(), this.getZ() - 0.5D), EntitySelector.NO_SPECTATORS.and((entity) -> {
+            List<Entity> list = this.level.getEntities(this, Shulker.getProgressDeltaAabb(enumdirection, f1, f).move(this.getX() - 0.5D, this.getY(), this.getZ() - 0.5D), EntitySelector.NO_SPECTATORS.and((entity) -> {
                 return !entity.isPassengerOfSameVehicle(this);
             }));
             Iterator iterator = list.iterator();
@@ -253,7 +253,7 @@ public class Shulker extends AbstractGolem implements VariantHolder<Optional<Dye
                 Entity entity = (Entity) iterator.next();
 
                 if (!(entity instanceof Shulker) && !entity.noPhysics) {
-                    entity.move(MoverType.SHULKER, new Vec3((double) (f2 * (float) enumdirection.getStepX()), (double) (f2 * (float) enumdirection.getStepY()), (double) (f2 * (float) enumdirection.getStepZ())));
+                    entity.move(MoverType.SHULKER, new Vec3(f2 * (float) enumdirection.getStepX(), f2 * (float) enumdirection.getStepY(), f2 * (float) enumdirection.getStepZ()));
                 }
             }
 
@@ -265,8 +265,8 @@ public class Shulker extends AbstractGolem implements VariantHolder<Optional<Dye
     }
 
     public static AABB getProgressDeltaAabb(Direction direction, float prevExtraLength, float extraLength) {
-        double d0 = (double) Math.max(prevExtraLength, extraLength);
-        double d1 = (double) Math.min(prevExtraLength, extraLength);
+        double d0 = Math.max(prevExtraLength, extraLength);
+        double d1 = Math.min(prevExtraLength, extraLength);
 
         return (new AABB(BlockPos.ZERO)).expandTowards((double) direction.getStepX() * d0, (double) direction.getStepY() * d0, (double) direction.getStepZ() * d0).contract((double) (-direction.getStepX()) * (1.0D + d1), (double) (-direction.getStepY()) * (1.0D + d1), (double) (-direction.getStepZ()) * (1.0D + d1));
     }
@@ -334,7 +334,7 @@ public class Shulker extends AbstractGolem implements VariantHolder<Optional<Dye
         if (this.isPassenger()) {
             super.setPos(x, y, z);
         } else {
-            super.setPos((double) Mth.floor(x) + 0.5D, (double) Mth.floor(y + 0.5D), (double) Mth.floor(z) + 0.5D);
+            super.setPos((double) Mth.floor(x) + 0.5D, Mth.floor(y + 0.5D), (double) Mth.floor(z) + 0.5D);
         }
 
         if (this.tickCount != 0) {
@@ -423,10 +423,10 @@ public class Shulker extends AbstractGolem implements VariantHolder<Optional<Dye
                         this.unRide();
                         this.setAttachFace(enumdirection);
                         this.playSound(SoundEvents.SHULKER_TELEPORT, 1.0F, 1.0F);
-                        this.setPos((double) blockposition1.getX() + 0.5D, (double) blockposition1.getY(), (double) blockposition1.getZ() + 0.5D);
-                        this.level.gameEvent(GameEvent.TELEPORT, blockposition, GameEvent.Context.of((Entity) this));
+                        this.setPos((double) blockposition1.getX() + 0.5D, blockposition1.getY(), (double) blockposition1.getZ() + 0.5D);
+                        this.level.gameEvent(GameEvent.TELEPORT, blockposition, GameEvent.Context.of(this));
                         this.entityData.set(Shulker.DATA_PEEK_ID, Byte.valueOf((byte) 0));
-                        this.setTarget((LivingEntity) null);
+                        this.setTarget(null);
                         return true;
                     }
                 }
@@ -485,7 +485,7 @@ public class Shulker extends AbstractGolem implements VariantHolder<Optional<Dye
             float f = (float) (i - 1) / 5.0F;
 
             if (this.level.random.nextFloat() >= f) {
-                Shulker entityshulker = (Shulker) EntityType.SHULKER.create(this.level);
+                Shulker entityshulker = EntityType.SHULKER.create(this.level);
 
                 if (entityshulker != null) {
                     entityshulker.setVariant(this.getVariant());
@@ -503,7 +503,7 @@ public class Shulker extends AbstractGolem implements VariantHolder<Optional<Dye
     }
 
     public Direction getAttachFace() {
-        return (Direction) this.entityData.get(Shulker.DATA_ATTACH_FACE_ID);
+        return this.entityData.get(Shulker.DATA_ATTACH_FACE_ID);
     }
 
     public void setAttachFace(Direction face) {
@@ -520,7 +520,7 @@ public class Shulker extends AbstractGolem implements VariantHolder<Optional<Dye
     }
 
     public int getRawPeekAmount() {
-        return ((Byte) this.entityData.get(Shulker.DATA_PEEK_ID)).intValue();
+        return this.entityData.get(Shulker.DATA_PEEK_ID).intValue();
     }
 
     public void setRawPeekAmount(int peekAmount) {
@@ -602,7 +602,7 @@ public class Shulker extends AbstractGolem implements VariantHolder<Optional<Dye
 
     @Nullable
     public DyeColor getColor() {
-        byte b0 = ((Byte) this.entityData.get(Shulker.DATA_COLOR_ID)).byteValue();
+        byte b0 = this.entityData.get(Shulker.DATA_COLOR_ID).byteValue();
 
         return b0 <= 15 ? DyeColor.byId(b0) : null;
     }
@@ -631,7 +631,7 @@ public class Shulker extends AbstractGolem implements VariantHolder<Optional<Dye
             float f = vector3f1.dot(vector3f2);
             float f1 = vector3f.dot(vector3f2);
 
-            return Math.abs(f) <= 1.0E-5F && Math.abs(f1) <= 1.0E-5F ? Optional.empty() : Optional.of(Float.valueOf((float) (Mth.atan2((double) (-f), (double) f1) * 57.2957763671875D)));
+            return Math.abs(f) <= 1.0E-5F && Math.abs(f1) <= 1.0E-5F ? Optional.empty() : Optional.of(Float.valueOf((float) (Mth.atan2(-f, f1) * 57.2957763671875D)));
         }
 
         @Override
@@ -679,7 +679,7 @@ public class Shulker extends AbstractGolem implements VariantHolder<Optional<Dye
 
                 if (entityliving != null) {
                     Shulker.this.getLookControl().setLookAt(entityliving, 180.0F, 180.0F);
-                    double d0 = Shulker.this.distanceToSqr((Entity) entityliving);
+                    double d0 = Shulker.this.distanceToSqr(entityliving);
 
                     if (d0 < 400.0D) {
                         if (this.attackTime <= 0) {
@@ -688,7 +688,7 @@ public class Shulker extends AbstractGolem implements VariantHolder<Optional<Dye
                             Shulker.this.playSound(SoundEvents.SHULKER_SHOOT, 2.0F, (Shulker.this.random.nextFloat() - Shulker.this.random.nextFloat()) * 0.2F + 1.0F);
                         }
                     } else {
-                        Shulker.this.setTarget((LivingEntity) null);
+                        Shulker.this.setTarget(null);
                     }
 
                     super.tick();
diff --git a/src/main/java/net/minecraft/world/entity/monster/Skeleton.java b/src/main/java/net/minecraft/world/entity/monster/Skeleton.java
index b77409d6f107a5e32418715ac3559344ba3d9438..705d05883cb5c864b9b5c8f0975835a092e0a9e5 100644
--- a/src/main/java/net/minecraft/world/entity/monster/Skeleton.java
+++ b/src/main/java/net/minecraft/world/entity/monster/Skeleton.java
@@ -33,7 +33,7 @@ public class Skeleton extends AbstractSkeleton {
     }
 
     public boolean isFreezeConverting() {
-        return ((Boolean) this.getEntityData().get(Skeleton.DATA_STRAY_CONVERSION_ID)).booleanValue();
+        return this.getEntityData().get(Skeleton.DATA_STRAY_CONVERSION_ID).booleanValue();
     }
 
     public void setFreezeConverting(boolean converting) {
@@ -92,7 +92,7 @@ public class Skeleton extends AbstractSkeleton {
     protected void doFreezeConversion() {
         Stray stray = this.convertTo(EntityType.STRAY, true, org.bukkit.event.entity.EntityTransformEvent.TransformReason.FROZEN, org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason.FROZEN); // CraftBukkit - add spawn and transform reasons // Paper - track result of conversion
         if (stray != null && !this.isSilent()) { // Paper - only send event if conversion succeeded
-            this.level.levelEvent((Player) null, 1048, this.blockPosition(), 0);
+            this.level.levelEvent(null, 1048, this.blockPosition(), 0);
         }
         // Paper start - reset conversion time to prevent event spam
         if (stray == null) {
@@ -137,7 +137,7 @@ public class Skeleton extends AbstractSkeleton {
 
             if (entitycreeper.canDropMobsSkull()) {
                 entitycreeper.increaseDroppedSkulls();
-                this.spawnAtLocation((ItemLike) Items.SKELETON_SKULL);
+                this.spawnAtLocation(Items.SKELETON_SKULL);
             }
         }
 
diff --git a/src/main/java/net/minecraft/world/entity/monster/Slime.java b/src/main/java/net/minecraft/world/entity/monster/Slime.java
index a2a507ba9490137c0ad7c0ca2e51ff47963ad4c0..1cef71298bb61c3c1af40765b0590c24c2a2760e 100644
--- a/src/main/java/net/minecraft/world/entity/monster/Slime.java
+++ b/src/main/java/net/minecraft/world/entity/monster/Slime.java
@@ -91,14 +91,14 @@ public class Slime extends Mob implements Enemy {
 
     @VisibleForTesting
     public void setSize(int size, boolean heal) {
-        int j = Mth.clamp(size, (int) 1, (int) 127);
+        int j = Mth.clamp(size, 1, 127);
 
         this.entityData.set(Slime.ID_SIZE, Integer.valueOf(j));
         this.reapplyPosition();
         this.refreshDimensions();
-        this.getAttribute(Attributes.MAX_HEALTH).setBaseValue((double) (j * j));
-        this.getAttribute(Attributes.MOVEMENT_SPEED).setBaseValue((double) (0.2F + 0.1F * (float) j));
-        this.getAttribute(Attributes.ATTACK_DAMAGE).setBaseValue((double) j);
+        this.getAttribute(Attributes.MAX_HEALTH).setBaseValue(j * j);
+        this.getAttribute(Attributes.MOVEMENT_SPEED).setBaseValue(0.2F + 0.1F * (float) j);
+        this.getAttribute(Attributes.ATTACK_DAMAGE).setBaseValue(j);
         if (heal) {
             this.setHealth(this.getMaxHealth());
         }
@@ -107,7 +107,7 @@ public class Slime extends Mob implements Enemy {
     }
 
     public int getSize() {
-        return ((Integer) this.entityData.get(Slime.ID_SIZE)).intValue();
+        return this.entityData.get(Slime.ID_SIZE).intValue();
     }
 
     @Override
@@ -234,7 +234,7 @@ public class Slime extends Mob implements Enemy {
             for (int l = 0; l < k; ++l) {
                 float f1 = ((float) (l % 2) - 0.5F) * f;
                 float f2 = ((float) (l / 2) - 0.5F) * f;
-                Slime entityslime = (Slime) this.getType().create(this.level);
+                Slime entityslime = this.getType().create(this.level);
 
                 if (entityslime != null) {
                     if (this.isPersistenceRequired()) {
@@ -285,7 +285,7 @@ public class Slime extends Mob implements Enemy {
         if (this.isAlive()) {
             int i = this.getSize();
 
-            if (this.distanceToSqr((Entity) target) < 0.6D * (double) i * 0.6D * (double) i && this.hasLineOfSight(target) && target.hurt(DamageSource.mobAttack(this), this.getAttackDamage())) {
+            if (this.distanceToSqr(target) < 0.6D * (double) i * 0.6D * (double) i && this.hasLineOfSight(target) && target.hurt(DamageSource.mobAttack(this), this.getAttackDamage())) {
                 this.playSound(SoundEvents.SLIME_ATTACK, 1.0F, (this.random.nextFloat() - this.random.nextFloat()) * 0.2F + 1.0F);
                 this.doEnchantDamageEffects(this, target);
             }
@@ -371,7 +371,7 @@ public class Slime extends Mob implements Enemy {
     protected void jumpFromGround() {
         Vec3 vec3d = this.getDeltaMovement();
 
-        this.setDeltaMovement(vec3d.x, (double) this.getJumpPower(), vec3d.z);
+        this.setDeltaMovement(vec3d.x, this.getJumpPower(), vec3d.z);
         this.hasImpulse = true;
     }
 
diff --git a/src/main/java/net/minecraft/world/entity/monster/SpellcasterIllager.java b/src/main/java/net/minecraft/world/entity/monster/SpellcasterIllager.java
index a27434020edd8cb9709b7ea3317174a1f58f46a9..9e9a3a417d6018d014e2e97551d008fffe48a2d0 100644
--- a/src/main/java/net/minecraft/world/entity/monster/SpellcasterIllager.java
+++ b/src/main/java/net/minecraft/world/entity/monster/SpellcasterIllager.java
@@ -51,7 +51,7 @@ public abstract class SpellcasterIllager extends AbstractIllager {
     }
 
     public boolean isCastingSpell() {
-        return this.level.isClientSide ? ((Byte) this.entityData.get(SpellcasterIllager.DATA_SPELL_CASTING_ID)).intValue() > 0 : this.spellCastingTickCount > 0;
+        return this.level.isClientSide ? this.entityData.get(SpellcasterIllager.DATA_SPELL_CASTING_ID).intValue() > 0 : this.spellCastingTickCount > 0;
     }
 
     public void setIsCastingSpell(SpellcasterIllager.IllagerSpell spell) {
@@ -60,7 +60,7 @@ public abstract class SpellcasterIllager extends AbstractIllager {
     }
 
     public SpellcasterIllager.IllagerSpell getCurrentSpell() {
-        return !this.level.isClientSide ? this.currentSpell : SpellcasterIllager.IllagerSpell.byId(((Byte) this.entityData.get(SpellcasterIllager.DATA_SPELL_CASTING_ID)).intValue());
+        return !this.level.isClientSide ? this.currentSpell : SpellcasterIllager.IllagerSpell.byId(this.entityData.get(SpellcasterIllager.DATA_SPELL_CASTING_ID).intValue());
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/entity/monster/Spider.java b/src/main/java/net/minecraft/world/entity/monster/Spider.java
index 5c77e3e5acf14f6a7ecc0ab04e87052b7cfc4486..06f7898f756accf76a57943bb6642b763bf696d2 100644
--- a/src/main/java/net/minecraft/world/entity/monster/Spider.java
+++ b/src/main/java/net/minecraft/world/entity/monster/Spider.java
@@ -66,7 +66,7 @@ public class Spider extends Monster {
 
     @Override
     public double getPassengersRidingOffset() {
-        return (double) (this.getBbHeight() * 0.5F);
+        return this.getBbHeight() * 0.5F;
     }
 
     @Override
@@ -137,11 +137,11 @@ public class Spider extends Monster {
     }
 
     public boolean isClimbing() {
-        return (((Byte) this.entityData.get(Spider.DATA_FLAGS_ID)).intValue() & 1) != 0;
+        return (this.entityData.get(Spider.DATA_FLAGS_ID).intValue() & 1) != 0;
     }
 
     public void setClimbing(boolean climbing) {
-        byte b0 = ((Byte) this.entityData.get(Spider.DATA_FLAGS_ID)).byteValue();
+        byte b0 = this.entityData.get(Spider.DATA_FLAGS_ID).byteValue();
 
         if (climbing) {
             b0 = (byte) (b0 | 1);
@@ -159,11 +159,11 @@ public class Spider extends Monster {
         RandomSource randomsource = world.getRandom();
 
         if (randomsource.nextInt(100) == 0) {
-            Skeleton entityskeleton = (Skeleton) EntityType.SKELETON.create(this.level);
+            Skeleton entityskeleton = EntityType.SKELETON.create(this.level);
 
             if (entityskeleton != null) {
                 entityskeleton.moveTo(this.getX(), this.getY(), this.getZ(), this.getYRot(), 0.0F);
-                entityskeleton.finalizeSpawn(world, difficulty, spawnReason, (SpawnGroupData) null, (CompoundTag) null);
+                entityskeleton.finalizeSpawn(world, difficulty, spawnReason, null, null);
                 entityskeleton.startRiding(this);
             }
         }
@@ -207,7 +207,7 @@ public class Spider extends Monster {
             float f = this.mob.getLightLevelDependentMagicValue();
 
             if (f >= 0.5F && this.mob.getRandom().nextInt(100) == 0) {
-                this.mob.setTarget((LivingEntity) null);
+                this.mob.setTarget(null);
                 return false;
             } else {
                 return super.canContinueToUse();
@@ -216,7 +216,7 @@ public class Spider extends Monster {
 
         @Override
         protected double getAttackReachSqr(LivingEntity entity) {
-            return (double) (4.0F + entity.getBbWidth());
+            return 4.0F + entity.getBbWidth();
         }
     }
 
diff --git a/src/main/java/net/minecraft/world/entity/monster/Strider.java b/src/main/java/net/minecraft/world/entity/monster/Strider.java
index a958c61a3db39960b12bf09dc69dc345efcb3f5e..3db91308882f42d2fdd4af380a8f55083790f8ca 100644
--- a/src/main/java/net/minecraft/world/entity/monster/Strider.java
+++ b/src/main/java/net/minecraft/world/entity/monster/Strider.java
@@ -149,7 +149,7 @@ public class Strider extends Animal implements ItemSteerable, Saddleable {
     public void equipSaddle(@Nullable SoundSource sound) {
         this.steering.setSaddle(true);
         if (sound != null) {
-            this.level.playSound((Player) null, (Entity) this, SoundEvents.STRIDER_SADDLE, sound, 0.5F, 1.0F);
+            this.level.playSound(null, this, SoundEvents.STRIDER_SADDLE, sound, 0.5F, 1.0F);
         }
 
     }
@@ -174,7 +174,7 @@ public class Strider extends Animal implements ItemSteerable, Saddleable {
     }
 
     public boolean isSuffocating() {
-        return this.getVehicle() instanceof Strider ? ((Strider) this.getVehicle()).isSuffocating() : ((Boolean) this.entityData.get(Strider.DATA_SUFFOCATING)).booleanValue();
+        return this.getVehicle() instanceof Strider ? ((Strider) this.getVehicle()).isSuffocating() : this.entityData.get(Strider.DATA_SUFFOCATING).booleanValue();
     }
 
     @Override
@@ -215,7 +215,7 @@ public class Strider extends Animal implements ItemSteerable, Saddleable {
 
     @Override
     public Vec3 getDismountLocationForPassenger(LivingEntity passenger) {
-        Vec3[] avec3d = new Vec3[]{getCollisionHorizontalEscapeVector((double) this.getBbWidth(), (double) passenger.getBbWidth(), passenger.getYRot()), getCollisionHorizontalEscapeVector((double) this.getBbWidth(), (double) passenger.getBbWidth(), passenger.getYRot() - 22.5F), getCollisionHorizontalEscapeVector((double) this.getBbWidth(), (double) passenger.getBbWidth(), passenger.getYRot() + 22.5F), getCollisionHorizontalEscapeVector((double) this.getBbWidth(), (double) passenger.getBbWidth(), passenger.getYRot() - 45.0F), getCollisionHorizontalEscapeVector((double) this.getBbWidth(), (double) passenger.getBbWidth(), passenger.getYRot() + 45.0F)};
+        Vec3[] avec3d = new Vec3[]{getCollisionHorizontalEscapeVector(this.getBbWidth(), passenger.getBbWidth(), passenger.getYRot()), getCollisionHorizontalEscapeVector(this.getBbWidth(), passenger.getBbWidth(), passenger.getYRot() - 22.5F), getCollisionHorizontalEscapeVector(this.getBbWidth(), passenger.getBbWidth(), passenger.getYRot() + 22.5F), getCollisionHorizontalEscapeVector(this.getBbWidth(), passenger.getBbWidth(), passenger.getYRot() - 45.0F), getCollisionHorizontalEscapeVector(this.getBbWidth(), passenger.getBbWidth(), passenger.getYRot() + 45.0F)};
         Set<BlockPos> set = Sets.newLinkedHashSet();
         double d0 = this.getBoundingBox().maxY;
         double d1 = this.getBoundingBox().minY - 0.5D;
@@ -407,7 +407,7 @@ public class Strider extends Animal implements ItemSteerable, Saddleable {
     @Nullable
     @Override
     public Strider getBreedOffspring(ServerLevel world, AgeableMob entity) {
-        return (Strider) EntityType.STRIDER.create(world);
+        return EntityType.STRIDER.create(world);
     }
 
     @Override
@@ -419,7 +419,7 @@ public class Strider extends Animal implements ItemSteerable, Saddleable {
     protected void dropEquipment() {
         super.dropEquipment();
         if (this.isSaddled()) {
-            this.spawnAtLocation((ItemLike) Items.SADDLE);
+            this.spawnAtLocation(Items.SADDLE);
         }
 
     }
@@ -443,7 +443,7 @@ public class Strider extends Animal implements ItemSteerable, Saddleable {
                 return itemstack.is(Items.SADDLE) ? itemstack.interactLivingEntity(player, this, hand) : InteractionResult.PASS;
             } else {
                 if (flag && !this.isSilent()) {
-                    this.level.playSound((Player) null, this.getX(), this.getY(), this.getZ(), SoundEvents.STRIDER_EAT, this.getSoundSource(), 1.0F, 1.0F + (this.random.nextFloat() - this.random.nextFloat()) * 0.2F);
+                    this.level.playSound(null, this.getX(), this.getY(), this.getZ(), SoundEvents.STRIDER_EAT, this.getSoundSource(), 1.0F, 1.0F + (this.random.nextFloat() - this.random.nextFloat()) * 0.2F);
                 }
 
                 return enuminteractionresult;
@@ -453,7 +453,7 @@ public class Strider extends Animal implements ItemSteerable, Saddleable {
 
     @Override
     public Vec3 getLeashOffset() {
-        return new Vec3(0.0D, (double) (0.6F * this.getEyeHeight()), (double) (this.getBbWidth() * 0.4F));
+        return new Vec3(0.0D, 0.6F * this.getEyeHeight(), this.getBbWidth() * 0.4F);
     }
 
     @Nullable
@@ -465,19 +465,19 @@ public class Strider extends Animal implements ItemSteerable, Saddleable {
             RandomSource randomsource = world.getRandom();
 
             if (randomsource.nextInt(30) == 0) {
-                Mob entityinsentient = (Mob) EntityType.ZOMBIFIED_PIGLIN.create(world.getLevel());
+                Mob entityinsentient = EntityType.ZOMBIFIED_PIGLIN.create(world.getLevel());
 
                 if (entityinsentient != null) {
                     entityData = this.spawnJockey(world, difficulty, entityinsentient, new Zombie.ZombieGroupData(Zombie.getSpawnAsBabyOdds(randomsource), false));
                     entityinsentient.setItemSlot(EquipmentSlot.MAINHAND, new ItemStack(Items.WARPED_FUNGUS_ON_A_STICK));
-                    this.equipSaddle((SoundSource) null);
+                    this.equipSaddle(null);
                 }
             } else if (randomsource.nextInt(10) == 0) {
-                AgeableMob entityageable = (AgeableMob) EntityType.STRIDER.create(world.getLevel());
+                AgeableMob entityageable = EntityType.STRIDER.create(world.getLevel());
 
                 if (entityageable != null) {
                     entityageable.setAge(-24000);
-                    entityData = this.spawnJockey(world, difficulty, entityageable, (SpawnGroupData) null);
+                    entityData = this.spawnJockey(world, difficulty, entityageable, null);
                 }
             } else {
                 entityData = new AgeableMob.AgeableMobGroupData(0.5F);
@@ -489,7 +489,7 @@ public class Strider extends Animal implements ItemSteerable, Saddleable {
 
     private SpawnGroupData spawnJockey(ServerLevelAccessor world, DifficultyInstance difficulty, Mob rider, @Nullable SpawnGroupData entityData) {
         rider.moveTo(this.getX(), this.getY(), this.getZ(), this.getYRot(), 0.0F);
-        rider.finalizeSpawn(world, difficulty, MobSpawnType.JOCKEY, entityData, (CompoundTag) null);
+        rider.finalizeSpawn(world, difficulty, MobSpawnType.JOCKEY, entityData, null);
         rider.startRiding(this, true);
         return new AgeableMob.AgeableMobGroupData(0.0F);
     }
diff --git a/src/main/java/net/minecraft/world/entity/monster/Vex.java b/src/main/java/net/minecraft/world/entity/monster/Vex.java
index 03f92d3091676fb4618a4fccc97f8b67de4a3f6d..a7de4c2247032f65c126dd5c5297c499baffb08a 100644
--- a/src/main/java/net/minecraft/world/entity/monster/Vex.java
+++ b/src/main/java/net/minecraft/world/entity/monster/Vex.java
@@ -157,13 +157,13 @@ public class Vex extends Monster {
     }
 
     private boolean getVexFlag(int mask) {
-        byte b0 = ((Byte) this.entityData.get(Vex.DATA_FLAGS_ID)).byteValue();
+        byte b0 = this.entityData.get(Vex.DATA_FLAGS_ID).byteValue();
 
         return (b0 & mask) != 0;
     }
 
     private void setVexFlag(int mask, boolean value) {
-        byte b0 = ((Byte) this.entityData.get(Vex.DATA_FLAGS_ID)).byteValue();
+        byte b0 = this.entityData.get(Vex.DATA_FLAGS_ID).byteValue();
         int j;
 
         if (value) {
@@ -278,7 +278,7 @@ public class Vex extends Monster {
         public boolean canUse() {
             LivingEntity entityliving = Vex.this.getTarget();
 
-            return entityliving != null && entityliving.isAlive() && !Vex.this.getMoveControl().hasWanted() && Vex.this.random.nextInt(reducedTickDelay(7)) == 0 ? Vex.this.distanceToSqr((Entity) entityliving) > 4.0D : false;
+            return entityliving != null && entityliving.isAlive() && !Vex.this.getMoveControl().hasWanted() && Vex.this.random.nextInt(reducedTickDelay(7)) == 0 ? Vex.this.distanceToSqr(entityliving) > 4.0D : false;
         }
 
         @Override
@@ -319,7 +319,7 @@ public class Vex extends Monster {
                     Vex.this.doHurtTarget(entityliving);
                     Vex.this.setIsCharging(false);
                 } else {
-                    double d0 = Vex.this.distanceToSqr((Entity) entityliving);
+                    double d0 = Vex.this.distanceToSqr(entityliving);
 
                     if (d0 < 9.0D) {
                         Vec3 vec3d = entityliving.getEyePosition();
diff --git a/src/main/java/net/minecraft/world/entity/monster/Vindicator.java b/src/main/java/net/minecraft/world/entity/monster/Vindicator.java
index b95dbb65cc59f4ae8d5c525b6c0ea466a8dee40f..935ac3a892523e073d207ec4387d3f903dc80314 100644
--- a/src/main/java/net/minecraft/world/entity/monster/Vindicator.java
+++ b/src/main/java/net/minecraft/world/entity/monster/Vindicator.java
@@ -87,7 +87,7 @@ public class Vindicator extends AbstractIllager {
     }
 
     public static AttributeSupplier.Builder createAttributes() {
-        return Monster.createMonsterAttributes().add(Attributes.MOVEMENT_SPEED, (double)0.35F).add(Attributes.FOLLOW_RANGE, 12.0D).add(Attributes.MAX_HEALTH, 24.0D).add(Attributes.ATTACK_DAMAGE, 5.0D);
+        return Monster.createMonsterAttributes().add(Attributes.MOVEMENT_SPEED, 0.35F).add(Attributes.FOLLOW_RANGE, 12.0D).add(Attributes.MAX_HEALTH, 24.0D).add(Attributes.ATTACK_DAMAGE, 5.0D);
     }
 
     @Override
@@ -246,7 +246,7 @@ public class Vindicator extends AbstractIllager {
         protected double getAttackReachSqr(LivingEntity entity) {
             if (this.mob.getVehicle() instanceof Ravager) {
                 float f = this.mob.getVehicle().getBbWidth() - 0.1F;
-                return (double)(f * 2.0F * f * 2.0F + entity.getBbWidth());
+                return f * 2.0F * f * 2.0F + entity.getBbWidth();
             } else {
                 return super.getAttackReachSqr(entity);
             }
diff --git a/src/main/java/net/minecraft/world/entity/monster/Witch.java b/src/main/java/net/minecraft/world/entity/monster/Witch.java
index 8552766b3e1f4efb5d3a17d1b4c47cf7934dfa43..88f193bd7f951596b73ced0961811a328d93f450 100644
--- a/src/main/java/net/minecraft/world/entity/monster/Witch.java
+++ b/src/main/java/net/minecraft/world/entity/monster/Witch.java
@@ -99,7 +99,7 @@ public class Witch extends Raider implements RangedAttackMob {
     }
 
     public boolean isDrinkingPotion() {
-        return ((Boolean) this.getEntityData().get(Witch.DATA_USING_ITEM)).booleanValue();
+        return this.getEntityData().get(Witch.DATA_USING_ITEM).booleanValue();
     }
 
     public static AttributeSupplier.Builder createAttributes() {
@@ -151,7 +151,7 @@ public class Witch extends Raider implements RangedAttackMob {
                     potionregistry = Potions.FIRE_RESISTANCE;
                 } else if (this.random.nextFloat() < 0.05F && this.getHealth() < this.getMaxHealth()) {
                     potionregistry = Potions.HEALING;
-                } else if (this.random.nextFloat() < 0.5F && this.getTarget() != null && !this.hasEffect(MobEffects.MOVEMENT_SPEED) && this.getTarget().distanceToSqr((Entity) this) > 121.0D) {
+                } else if (this.random.nextFloat() < 0.5F && this.getTarget() != null && !this.hasEffect(MobEffects.MOVEMENT_SPEED) && this.getTarget().distanceToSqr(this) > 121.0D) {
                     potionregistry = Potions.SWIFTNESS;
                 }
 
@@ -193,7 +193,7 @@ public class Witch extends Raider implements RangedAttackMob {
         this.usingTime = this.getMainHandItem().getUseDuration();
         this.setUsingItem(true);
         if (!this.isSilent()) {
-            this.level.playSound((Player) null, this.getX(), this.getY(), this.getZ(), SoundEvents.WITCH_DRINK, this.getSoundSource(), 1.0F, 0.8F + this.random.nextFloat() * 0.4F);
+            this.level.playSound(null, this.getX(), this.getY(), this.getZ(), SoundEvents.WITCH_DRINK, this.getSoundSource(), 1.0F, 0.8F + this.random.nextFloat() * 0.4F);
         }
 
         AttributeInstance attributemodifiable = this.getAttribute(Attributes.MOVEMENT_SPEED);
@@ -251,7 +251,7 @@ public class Witch extends Raider implements RangedAttackMob {
                     potionregistry = Potions.REGENERATION;
                 }
 
-                this.setTarget((LivingEntity) null);
+                this.setTarget(null);
             } else if (d3 >= 8.0D && !target.hasEffect(MobEffects.MOVEMENT_SLOWDOWN)) {
                 potionregistry = Potions.SLOWNESS;
             } else if (target.getHealth() >= 8.0F && !target.hasEffect(MobEffects.POISON)) {
@@ -273,7 +273,7 @@ public class Witch extends Raider implements RangedAttackMob {
             entitypotion.setXRot(entitypotion.getXRot() - -20.0F);
             entitypotion.shoot(d0, d1 + d3 * 0.2D, d2, 0.75F, 8.0F);
             if (!this.isSilent()) {
-                this.level.playSound((Player) null, this.getX(), this.getY(), this.getZ(), SoundEvents.WITCH_THROW, this.getSoundSource(), 1.0F, 0.8F + this.random.nextFloat() * 0.4F);
+                this.level.playSound(null, this.getX(), this.getY(), this.getZ(), SoundEvents.WITCH_THROW, this.getSoundSource(), 1.0F, 0.8F + this.random.nextFloat() * 0.4F);
             }
 
             this.level.addFreshEntity(entitypotion);
diff --git a/src/main/java/net/minecraft/world/entity/monster/WitherSkeleton.java b/src/main/java/net/minecraft/world/entity/monster/WitherSkeleton.java
index 6449213d717271bcc516e393a78dfe1e5c762d68..257feefb1b54e1224af518b2668500bb565a5588 100644
--- a/src/main/java/net/minecraft/world/entity/monster/WitherSkeleton.java
+++ b/src/main/java/net/minecraft/world/entity/monster/WitherSkeleton.java
@@ -71,7 +71,7 @@ public class WitherSkeleton extends AbstractSkeleton {
 
             if (entitycreeper.canDropMobsSkull()) {
                 entitycreeper.increaseDroppedSkulls();
-                this.spawnAtLocation((ItemLike) Items.WITHER_SKELETON_SKULL);
+                this.spawnAtLocation(Items.WITHER_SKELETON_SKULL);
             }
         }
 
diff --git a/src/main/java/net/minecraft/world/entity/monster/Zombie.java b/src/main/java/net/minecraft/world/entity/monster/Zombie.java
index 3a8011ac333929d546844c0e6f31f194a72bf54d..da2a19d300bacbd4819cb41134cea3d911e3d832 100644
--- a/src/main/java/net/minecraft/world/entity/monster/Zombie.java
+++ b/src/main/java/net/minecraft/world/entity/monster/Zombie.java
@@ -138,7 +138,7 @@ public class Zombie extends Monster {
     }
 
     public boolean isUnderWaterConverting() {
-        return ((Boolean) this.getEntityData().get(Zombie.DATA_DROWNED_CONVERSION_ID)).booleanValue();
+        return this.getEntityData().get(Zombie.DATA_DROWNED_CONVERSION_ID).booleanValue();
     }
 
     public boolean canBreakDoors() {
@@ -169,7 +169,7 @@ public class Zombie extends Monster {
 
     @Override
     public boolean isBaby() {
-        return ((Boolean) this.getEntityData().get(Zombie.DATA_BABY_ID)).booleanValue();
+        return this.getEntityData().get(Zombie.DATA_BABY_ID).booleanValue();
     }
 
     @Override
@@ -284,13 +284,13 @@ public class Zombie extends Monster {
     protected void doUnderWaterConversion() {
         this.convertToZombieType(EntityType.DROWNED);
         if (!this.isSilent()) {
-            this.level.levelEvent((Player) null, 1040, this.blockPosition(), 0);
+            this.level.levelEvent(null, 1040, this.blockPosition(), 0);
         }
 
     }
 
     protected void convertToZombieType(EntityType<? extends Zombie> entityType) {
-        Zombie entityzombie = (Zombie) this.convertTo(entityType, true, EntityTransformEvent.TransformReason.DROWNED, CreatureSpawnEvent.SpawnReason.DROWNED);
+        Zombie entityzombie = this.convertTo(entityType, true, EntityTransformEvent.TransformReason.DROWNED, CreatureSpawnEvent.SpawnReason.DROWNED);
 
         if (entityzombie != null) {
             entityzombie.handleAttributes(entityzombie.level.getCurrentDifficultyAt(entityzombie.blockPosition()).getSpecialMultiplier());
@@ -342,10 +342,10 @@ public class Zombie extends Monster {
                     SpawnPlacements.Type entitypositiontypes_surface = SpawnPlacements.getPlacementType(entitytypes);
 
                     if (NaturalSpawner.isSpawnPositionOk(entitypositiontypes_surface, this.level, blockposition, entitytypes) && SpawnPlacements.checkSpawnRules(entitytypes, worldserver, MobSpawnType.REINFORCEMENT, blockposition, this.level.random)) {
-                        entityzombie.setPos((double) i1, (double) j1, (double) k1);
-                        if (!this.level.hasNearbyAlivePlayerThatAffectsSpawning((double) i1, (double) j1, (double) k1, 7.0D) && this.level.isUnobstructed(entityzombie) && this.level.noCollision((Entity) entityzombie) && !this.level.containsAnyLiquid(entityzombie.getBoundingBox())) { // Paper - Affects Spawning API
+                        entityzombie.setPos(i1, j1, k1);
+                        if (!this.level.hasNearbyAlivePlayerThatAffectsSpawning(i1, j1, k1, 7.0D) && this.level.isUnobstructed(entityzombie) && this.level.noCollision(entityzombie) && !this.level.containsAnyLiquid(entityzombie.getBoundingBox())) { // Paper - Affects Spawning API
                             entityzombie.setTarget(entityliving, EntityTargetEvent.TargetReason.REINFORCEMENT_TARGET, true); // CraftBukkit
-                            entityzombie.finalizeSpawn(worldserver, this.level.getCurrentDifficultyAt(entityzombie.blockPosition()), MobSpawnType.REINFORCEMENT, (SpawnGroupData) null, (CompoundTag) null);
+                            entityzombie.finalizeSpawn(worldserver, this.level.getCurrentDifficultyAt(entityzombie.blockPosition()), MobSpawnType.REINFORCEMENT, null, null);
                             worldserver.addFreshEntityWithPassengers(entityzombie, CreatureSpawnEvent.SpawnReason.REINFORCEMENTS); // CraftBukkit
                             this.getAttribute(Attributes.SPAWN_REINFORCEMENTS_CHANCE).addPermanentModifier(new AttributeModifier("Zombie reinforcement caller charge", -0.05000000074505806D, AttributeModifier.Operation.ADDITION));
                             entityzombie.getAttribute(Attributes.SPAWN_REINFORCEMENTS_CHANCE).addPermanentModifier(new AttributeModifier("Zombie reinforcement callee charge", -0.05000000074505806D, AttributeModifier.Operation.ADDITION));
@@ -475,18 +475,18 @@ public class Zombie extends Monster {
 
     public static ZombieVillager zombifyVillager(ServerLevel worldserver, Villager entityvillager, net.minecraft.core.BlockPos blockPosition, boolean silent, CreatureSpawnEvent.SpawnReason spawnReason) {
         {
-            ZombieVillager entityzombievillager = (ZombieVillager) entityvillager.convertTo(EntityType.ZOMBIE_VILLAGER, false, EntityTransformEvent.TransformReason.INFECTION, spawnReason);
+            ZombieVillager entityzombievillager = entityvillager.convertTo(EntityType.ZOMBIE_VILLAGER, false, EntityTransformEvent.TransformReason.INFECTION, spawnReason);
             // CraftBukkit end
 
             if (entityzombievillager != null) {
-                entityzombievillager.finalizeSpawn(worldserver, worldserver.getCurrentDifficultyAt(entityzombievillager.blockPosition()), MobSpawnType.CONVERSION, new Zombie.ZombieGroupData(false, true), (CompoundTag) null);
+                entityzombievillager.finalizeSpawn(worldserver, worldserver.getCurrentDifficultyAt(entityzombievillager.blockPosition()), MobSpawnType.CONVERSION, new Zombie.ZombieGroupData(false, true), null);
                 entityzombievillager.setVillagerData(entityvillager.getVillagerData());
-                entityzombievillager.setGossips((Tag) entityvillager.getGossips().store(NbtOps.INSTANCE));
+                entityzombievillager.setGossips(entityvillager.getGossips().store(NbtOps.INSTANCE));
                 entityzombievillager.setTradeOffers(entityvillager.getOffers().createTag());
                 entityzombievillager.setVillagerXp(entityvillager.getVillagerXp());
                 // CraftBukkit start
                 if (!silent) {
-                    worldserver.levelEvent((Player) null, 1026, blockPosition, 0);
+                    worldserver.levelEvent(null, 1026, blockPosition, 0);
                 }
 
                 // flag = false;
@@ -534,17 +534,17 @@ public class Zombie extends Monster {
                         List<Chicken> list = world.getEntitiesOfClass(Chicken.class, this.getBoundingBox().inflate(5.0D, 3.0D, 5.0D), EntitySelector.ENTITY_NOT_BEING_RIDDEN);
 
                         if (!list.isEmpty()) {
-                            Chicken entitychicken = (Chicken) list.get(0);
+                            Chicken entitychicken = list.get(0);
 
                             entitychicken.setChickenJockey(true);
                             this.startRiding(entitychicken);
                         }
                     } else if ((double) randomsource.nextFloat() < 0.05D) {
-                        Chicken entitychicken1 = (Chicken) EntityType.CHICKEN.create(this.level);
+                        Chicken entitychicken1 = EntityType.CHICKEN.create(this.level);
 
                         if (entitychicken1 != null) {
                             entitychicken1.moveTo(this.getX(), this.getY(), this.getZ(), this.getYRot(), 0.0F);
-                            entitychicken1.finalizeSpawn(world, difficulty, MobSpawnType.JOCKEY, (SpawnGroupData) null, (CompoundTag) null);
+                            entitychicken1.finalizeSpawn(world, difficulty, MobSpawnType.JOCKEY, null, null);
                             entitychicken1.setChickenJockey(true);
                             this.startRiding(entitychicken1);
                             world.addFreshEntity(entitychicken1, CreatureSpawnEvent.SpawnReason.MOUNT); // CraftBukkit
@@ -635,12 +635,12 @@ public class Zombie extends Monster {
 
         @Override
         public void playDestroyProgressSound(LevelAccessor world, BlockPos pos) {
-            world.playSound((Player) null, pos, SoundEvents.ZOMBIE_DESTROY_EGG, SoundSource.HOSTILE, 0.5F, 0.9F + Zombie.this.random.nextFloat() * 0.2F);
+            world.playSound(null, pos, SoundEvents.ZOMBIE_DESTROY_EGG, SoundSource.HOSTILE, 0.5F, 0.9F + Zombie.this.random.nextFloat() * 0.2F);
         }
 
         @Override
         public void playBreakSound(Level world, BlockPos pos) {
-            world.playSound((Player) null, pos, SoundEvents.TURTLE_EGG_BREAK, SoundSource.BLOCKS, 0.7F, 0.9F + world.random.nextFloat() * 0.2F);
+            world.playSound(null, pos, SoundEvents.TURTLE_EGG_BREAK, SoundSource.BLOCKS, 0.7F, 0.9F + world.random.nextFloat() * 0.2F);
         }
 
         @Override
diff --git a/src/main/java/net/minecraft/world/entity/monster/ZombieVillager.java b/src/main/java/net/minecraft/world/entity/monster/ZombieVillager.java
index e16a36f85ca0406e3e71ae6dafb03262e2c5163d..2f1e205b744fadabffd8b7a330c1d9d586429c62 100644
--- a/src/main/java/net/minecraft/world/entity/monster/ZombieVillager.java
+++ b/src/main/java/net/minecraft/world/entity/monster/ZombieVillager.java
@@ -194,7 +194,7 @@ public class ZombieVillager extends Zombie implements VillagerDataHolder {
     }
 
     public boolean isConverting() {
-        return ((Boolean) this.getEntityData().get(ZombieVillager.DATA_CONVERTING_ID)).booleanValue();
+        return this.getEntityData().get(ZombieVillager.DATA_CONVERTING_ID).booleanValue();
     }
 
     public void startConverting(@Nullable UUID uuid, int delay) {
@@ -228,7 +228,7 @@ public class ZombieVillager extends Zombie implements VillagerDataHolder {
 
     private void finishConversion(ServerLevel world) {
         // CraftBukkit start
-        Villager entityvillager = (Villager) this.convertTo(EntityType.VILLAGER, false, EntityTransformEvent.TransformReason.CURED, CreatureSpawnEvent.SpawnReason.CURED);
+        Villager entityvillager = this.convertTo(EntityType.VILLAGER, false, EntityTransformEvent.TransformReason.CURED, CreatureSpawnEvent.SpawnReason.CURED);
         if (entityvillager == null) {
             ((org.bukkit.entity.ZombieVillager) getBukkitEntity()).setConversionTime(-1); // SPIGOT-5208: End conversion to stop event spam
             return;
@@ -245,7 +245,7 @@ public class ZombieVillager extends Zombie implements VillagerDataHolder {
                 if (EnchantmentHelper.hasBindingCurse(itemstack)) {
                     entityvillager.getSlot(enumitemslot.getIndex() + 300).set(itemstack);
                 } else {
-                    double d0 = (double) this.getEquipmentDropChance(enumitemslot);
+                    double d0 = this.getEquipmentDropChance(enumitemslot);
 
                     if (d0 > 1.0D) {
                         this.forceDrops = true; // CraftBukkit
@@ -266,7 +266,7 @@ public class ZombieVillager extends Zombie implements VillagerDataHolder {
         }
 
         entityvillager.setVillagerXp(this.villagerXp);
-        entityvillager.finalizeSpawn(world, world.getCurrentDifficultyAt(entityvillager.blockPosition()), MobSpawnType.CONVERSION, (SpawnGroupData) null, (CompoundTag) null);
+        entityvillager.finalizeSpawn(world, world.getCurrentDifficultyAt(entityvillager.blockPosition()), MobSpawnType.CONVERSION, null, null);
         entityvillager.refreshBrain(world);
         if (this.conversionStarter != null) {
             Player entityhuman = world.getGlobalPlayerByUUID(this.conversionStarter); // Paper - check all players
@@ -279,7 +279,7 @@ public class ZombieVillager extends Zombie implements VillagerDataHolder {
 
         entityvillager.addEffect(new MobEffectInstance(MobEffects.CONFUSION, 200, 0), org.bukkit.event.entity.EntityPotionEffectEvent.Cause.CONVERSION); // CraftBukkit
         if (!this.isSilent()) {
-            world.levelEvent((Player) null, 1027, this.blockPosition(), 0);
+            world.levelEvent(null, 1027, this.blockPosition(), 0);
         }
 
     }
@@ -369,7 +369,7 @@ public class ZombieVillager extends Zombie implements VillagerDataHolder {
 
     @Override
     public VillagerData getVillagerData() {
-        return (VillagerData) this.entityData.get(ZombieVillager.DATA_VILLAGER_DATA);
+        return this.entityData.get(ZombieVillager.DATA_VILLAGER_DATA);
     }
 
     public int getVillagerXp() {
diff --git a/src/main/java/net/minecraft/world/entity/monster/ZombifiedPiglin.java b/src/main/java/net/minecraft/world/entity/monster/ZombifiedPiglin.java
index f9f925b6f5c3173df094f0a386779902b49d5153..c5a966d6dac974afdbcd61d6a930cdd23d260eea 100644
--- a/src/main/java/net/minecraft/world/entity/monster/ZombifiedPiglin.java
+++ b/src/main/java/net/minecraft/world/entity/monster/ZombifiedPiglin.java
@@ -153,7 +153,7 @@ public class ZombifiedPiglin extends Zombie implements NeutralMob {
         }).filter((entitypigzombie) -> {
             return entitypigzombie.getTarget() == null;
         }).filter((entitypigzombie) -> {
-            return !entitypigzombie.isAlliedTo((Entity) this.getTarget());
+            return !entitypigzombie.isAlliedTo(this.getTarget());
         }).forEach((entitypigzombie) -> {
             entitypigzombie.setTarget(this.getTarget(), org.bukkit.event.entity.EntityTargetEvent.TargetReason.TARGET_ATTACKED_NEARBY_ENTITY, true); // CraftBukkit
         });
diff --git a/src/main/java/net/minecraft/world/entity/monster/hoglin/Hoglin.java b/src/main/java/net/minecraft/world/entity/monster/hoglin/Hoglin.java
index 317899ef7cf6ab7c70e7790814a9bb8872a93c24..2ceb8ae1e48ef941aa790de005c6c56eb453018b 100644
--- a/src/main/java/net/minecraft/world/entity/monster/hoglin/Hoglin.java
+++ b/src/main/java/net/minecraft/world/entity/monster/hoglin/Hoglin.java
@@ -73,7 +73,7 @@ public class Hoglin extends Animal implements Enemy, HoglinBase {
     }
 
     public static AttributeSupplier.Builder createAttributes() {
-        return Monster.createMonsterAttributes().add(Attributes.MAX_HEALTH, 40.0D).add(Attributes.MOVEMENT_SPEED, (double)0.3F).add(Attributes.KNOCKBACK_RESISTANCE, (double)0.6F).add(Attributes.ATTACK_KNOCKBACK, 1.0D).add(Attributes.ATTACK_DAMAGE, 6.0D);
+        return Monster.createMonsterAttributes().add(Attributes.MAX_HEALTH, 40.0D).add(Attributes.MOVEMENT_SPEED, 0.3F).add(Attributes.KNOCKBACK_RESISTANCE, 0.6F).add(Attributes.ATTACK_KNOCKBACK, 1.0D).add(Attributes.ATTACK_DAMAGE, 6.0D);
     }
 
     @Override
@@ -327,7 +327,7 @@ public class Hoglin extends Animal implements Enemy, HoglinBase {
 
     @Override
     protected SoundEvent getAmbientSound() {
-        return this.level.isClientSide ? null : HoglinAi.getSoundForCurrentActivity(this).orElse((SoundEvent)null);
+        return this.level.isClientSide ? null : HoglinAi.getSoundForCurrentActivity(this).orElse(null);
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/entity/monster/piglin/AbstractPiglin.java b/src/main/java/net/minecraft/world/entity/monster/piglin/AbstractPiglin.java
index 2325f3eaccd5829b580b7f6dc1a0591b9938f75a..36023c5a11663ecd52e6e626618c280a9f3456a5 100644
--- a/src/main/java/net/minecraft/world/entity/monster/piglin/AbstractPiglin.java
+++ b/src/main/java/net/minecraft/world/entity/monster/piglin/AbstractPiglin.java
@@ -56,7 +56,7 @@ public abstract class AbstractPiglin extends Monster {
     }
 
     public boolean isImmuneToZombification() {
-        return ((Boolean) this.getEntityData().get(AbstractPiglin.DATA_IMMUNE_TO_ZOMBIFICATION)).booleanValue();
+        return this.getEntityData().get(AbstractPiglin.DATA_IMMUNE_TO_ZOMBIFICATION).booleanValue();
     }
 
     @Override
@@ -108,7 +108,7 @@ public abstract class AbstractPiglin extends Monster {
     }
 
     protected void finishConversion(ServerLevel world) {
-        ZombifiedPiglin entitypigzombie = (ZombifiedPiglin) this.convertTo(EntityType.ZOMBIFIED_PIGLIN, true, org.bukkit.event.entity.EntityTransformEvent.TransformReason.PIGLIN_ZOMBIFIED, org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason.PIGLIN_ZOMBIFIED); // CraftBukkit - add spawn and transform reasons
+        ZombifiedPiglin entitypigzombie = this.convertTo(EntityType.ZOMBIFIED_PIGLIN, true, org.bukkit.event.entity.EntityTransformEvent.TransformReason.PIGLIN_ZOMBIFIED, org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason.PIGLIN_ZOMBIFIED); // CraftBukkit - add spawn and transform reasons
 
         if (entitypigzombie != null) {
             entitypigzombie.addEffect(new MobEffectInstance(MobEffects.CONFUSION, 200, 0));
@@ -130,7 +130,7 @@ public abstract class AbstractPiglin extends Monster {
     @Nullable
     @Override
     public LivingEntity getTarget() {
-        return (LivingEntity) this.brain.getMemory(MemoryModuleType.ATTACK_TARGET).orElse(null); // CraftBukkit - decompile error
+        return this.brain.getMemory(MemoryModuleType.ATTACK_TARGET).orElse(null); // CraftBukkit - decompile error
     }
 
     protected boolean isHoldingMeleeWeapon() {
diff --git a/src/main/java/net/minecraft/world/entity/monster/piglin/Piglin.java b/src/main/java/net/minecraft/world/entity/monster/piglin/Piglin.java
index 184f7989213c771ed77a133a824b29374674f09d..e903eeb56c51135065e941956a0cfa346c9c814a 100644
--- a/src/main/java/net/minecraft/world/entity/monster/piglin/Piglin.java
+++ b/src/main/java/net/minecraft/world/entity/monster/piglin/Piglin.java
@@ -296,7 +296,7 @@ public class Piglin extends AbstractPiglin implements CrossbowAttackMob, Invento
 
     @Override
     public boolean isBaby() {
-        return ((Boolean) this.getEntityData().get(Piglin.DATA_BABY_ID)).booleanValue();
+        return this.getEntityData().get(Piglin.DATA_BABY_ID).booleanValue();
     }
 
     private void setCannotHunt(boolean cannotHunt) {
@@ -336,7 +336,7 @@ public class Piglin extends AbstractPiglin implements CrossbowAttackMob, Invento
     }
 
     public boolean isChargingCrossbow() {
-        return ((Boolean) this.entityData.get(Piglin.DATA_IS_CHARGING_CROSSBOW)).booleanValue();
+        return this.entityData.get(Piglin.DATA_IS_CHARGING_CROSSBOW).booleanValue();
     }
 
     @Override
@@ -355,7 +355,7 @@ public class Piglin extends AbstractPiglin implements CrossbowAttackMob, Invento
     }
 
     public boolean isDancing() {
-        return ((Boolean) this.entityData.get(Piglin.DATA_IS_DANCING)).booleanValue();
+        return this.entityData.get(Piglin.DATA_IS_DANCING).booleanValue();
     }
 
     public void setDancing(boolean dancing) {
@@ -448,12 +448,12 @@ public class Piglin extends AbstractPiglin implements CrossbowAttackMob, Invento
     private Entity getTopPassenger(Entity entity, int maxLevel) {
         List<Entity> list = entity.getPassengers();
 
-        return maxLevel != 1 && !list.isEmpty() ? this.getTopPassenger((Entity) list.get(0), maxLevel - 1) : entity;
+        return maxLevel != 1 && !list.isEmpty() ? this.getTopPassenger(list.get(0), maxLevel - 1) : entity;
     }
 
     @Override
     protected SoundEvent getAmbientSound() {
-        return this.level.isClientSide ? null : (SoundEvent) PiglinAi.getSoundForCurrentActivity(this).orElse(null); // CraftBukkit - Decompile error
+        return this.level.isClientSide ? null : PiglinAi.getSoundForCurrentActivity(this).orElse(null); // CraftBukkit - Decompile error
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/entity/monster/piglin/PiglinAi.java b/src/main/java/net/minecraft/world/entity/monster/piglin/PiglinAi.java
index 401cc4b5a37394756d1b71f44ca3b0a1c3341fe0..151b380c1be5f89bf458bd4d9f31d6946b21e2ff 100644
--- a/src/main/java/net/minecraft/world/entity/monster/piglin/PiglinAi.java
+++ b/src/main/java/net/minecraft/world/entity/monster/piglin/PiglinAi.java
@@ -138,7 +138,7 @@ public class PiglinAi {
     protected static void initMemories(Piglin piglin, RandomSource random) {
         int i = PiglinAi.TIME_BETWEEN_HUNTS.sample(random);
 
-        piglin.getBrain().setMemoryWithExpiry(MemoryModuleType.HUNTED_RECENTLY, Boolean.TRUE, (long) i);
+        piglin.getBrain().setMemoryWithExpiry(MemoryModuleType.HUNTED_RECENTLY, Boolean.TRUE, i);
     }
 
     private static void initCoreActivity(Brain<Piglin> piglin) {
@@ -202,10 +202,10 @@ public class PiglinAi {
 
     protected static void updateActivity(Piglin piglin) {
         Brain<Piglin> behaviorcontroller = piglin.getBrain();
-        Activity activity = (Activity) behaviorcontroller.getActiveNonCoreActivity().orElse(null); // CraftBukkit - decompile error
+        Activity activity = behaviorcontroller.getActiveNonCoreActivity().orElse(null); // CraftBukkit - decompile error
 
         behaviorcontroller.setActiveActivityToFirstValid(ImmutableList.of(Activity.ADMIRE_ITEM, Activity.FIGHT, Activity.AVOID, Activity.CELEBRATE, Activity.RIDE, Activity.IDLE));
-        Activity activity1 = (Activity) behaviorcontroller.getActiveNonCoreActivity().orElse(null); // CraftBukkit - decompile error
+        Activity activity1 = behaviorcontroller.getActiveNonCoreActivity().orElse(null); // CraftBukkit - decompile error
 
         if (activity != activity1) {
             Optional<SoundEvent> optional = PiglinAi.getSoundForCurrentActivity(piglin); // CraftBukkit - decompile error
@@ -354,7 +354,7 @@ public class PiglinAi {
         Optional<Player> optional = piglin.getBrain().getMemory(MemoryModuleType.NEAREST_VISIBLE_PLAYER);
 
         if (optional.isPresent()) {
-            PiglinAi.throwItemsTowardPlayer(piglin, (Player) optional.get(), items);
+            PiglinAi.throwItemsTowardPlayer(piglin, optional.get(), items);
         } else {
             PiglinAi.throwItemsTowardRandomPos(piglin, items);
         }
@@ -440,7 +440,7 @@ public class PiglinAi {
         Brain<Piglin> behaviorcontroller = piglin.getBrain();
 
         if (behaviorcontroller.hasMemoryValue(MemoryModuleType.NEAREST_VISIBLE_ZOMBIFIED)) {
-            LivingEntity entityliving = (LivingEntity) behaviorcontroller.getMemory(MemoryModuleType.NEAREST_VISIBLE_ZOMBIFIED).get();
+            LivingEntity entityliving = behaviorcontroller.getMemory(MemoryModuleType.NEAREST_VISIBLE_ZOMBIFIED).get();
 
             return piglin.closerThan(entityliving, 6.0D);
         } else {
@@ -456,7 +456,7 @@ public class PiglinAi {
         } else {
             Optional<LivingEntity> optional = BehaviorUtils.getLivingEntityFromUUIDMemory(piglin, MemoryModuleType.ANGRY_AT);
 
-            if (optional.isPresent() && Sensor.isEntityAttackableIgnoringLineOfSight(piglin, (LivingEntity) optional.get())) {
+            if (optional.isPresent() && Sensor.isEntityAttackableIgnoringLineOfSight(piglin, optional.get())) {
                 return optional;
             } else {
                 Optional optional1;
@@ -474,7 +474,7 @@ public class PiglinAi {
                 } else {
                     Optional<Player> optional2 = behaviorcontroller.getMemory(MemoryModuleType.NEAREST_TARGETABLE_PLAYER_NOT_WEARING_GOLD);
 
-                    return optional2.isPresent() && Sensor.isEntityAttackable(piglin, (LivingEntity) optional2.get()) ? optional2 : Optional.empty();
+                    return optional2.isPresent() && Sensor.isEntityAttackable(piglin, optional2.get()) ? optional2 : Optional.empty();
                 }
             }
         }
@@ -581,15 +581,15 @@ public class PiglinAi {
     private static boolean isNearAvoidTarget(Piglin piglin) {
         Brain<Piglin> behaviorcontroller = piglin.getBrain();
 
-        return !behaviorcontroller.hasMemoryValue(MemoryModuleType.AVOID_TARGET) ? false : ((LivingEntity) behaviorcontroller.getMemory(MemoryModuleType.AVOID_TARGET).get()).closerThan(piglin, 12.0D);
+        return !behaviorcontroller.hasMemoryValue(MemoryModuleType.AVOID_TARGET) ? false : behaviorcontroller.getMemory(MemoryModuleType.AVOID_TARGET).get().closerThan(piglin, 12.0D);
     }
 
     protected static List<AbstractPiglin> getVisibleAdultPiglins(Piglin piglin) {
-        return (List) piglin.getBrain().getMemory(MemoryModuleType.NEAREST_VISIBLE_ADULT_PIGLINS).orElse(ImmutableList.of());
+        return piglin.getBrain().getMemory(MemoryModuleType.NEAREST_VISIBLE_ADULT_PIGLINS).orElse(ImmutableList.of());
     }
 
     private static List<AbstractPiglin> getAdultPiglins(AbstractPiglin piglin) {
-        return (List) piglin.getBrain().getMemory(MemoryModuleType.NEARBY_ADULT_PIGLINS).orElse(ImmutableList.of());
+        return piglin.getBrain().getMemory(MemoryModuleType.NEARBY_ADULT_PIGLINS).orElse(ImmutableList.of());
     }
 
     public static boolean isWearingGold(LivingEntity entity) {
@@ -659,7 +659,7 @@ public class PiglinAi {
         Optional<Player> optional = PiglinAi.getNearestVisibleTargetablePlayer(piglin);
 
         if (optional.isPresent()) {
-            PiglinAi.setAngerTarget(piglin, (LivingEntity) optional.get());
+            PiglinAi.setAngerTarget(piglin, optional.get());
         } else {
             PiglinAi.setAngerTarget(piglin, player);
         }
@@ -709,7 +709,7 @@ public class PiglinAi {
         if (!behaviorcontroller.hasMemoryValue(MemoryModuleType.AVOID_TARGET)) {
             return true;
         } else {
-            LivingEntity entityliving = (LivingEntity) behaviorcontroller.getMemory(MemoryModuleType.AVOID_TARGET).get();
+            LivingEntity entityliving = behaviorcontroller.getMemory(MemoryModuleType.AVOID_TARGET).get();
             EntityType<?> entitytypes = entityliving.getType();
 
             return entitytypes == EntityType.HOGLIN ? PiglinAi.piglinsEqualOrOutnumberHoglins(piglin) : (PiglinAi.isZombified(entitytypes) ? !behaviorcontroller.isMemoryValue(MemoryModuleType.NEAREST_VISIBLE_ZOMBIFIED, entityliving) : false);
@@ -721,8 +721,8 @@ public class PiglinAi {
     }
 
     private static boolean hoglinsOutnumberPiglins(Piglin piglins) {
-        int i = ((Integer) piglins.getBrain().getMemory(MemoryModuleType.VISIBLE_ADULT_PIGLIN_COUNT).orElse(Integer.valueOf(0))).intValue() + 1;
-        int j = ((Integer) piglins.getBrain().getMemory(MemoryModuleType.VISIBLE_ADULT_HOGLIN_COUNT).orElse(Integer.valueOf(0))).intValue();
+        int i = piglins.getBrain().getMemory(MemoryModuleType.VISIBLE_ADULT_PIGLIN_COUNT).orElse(Integer.valueOf(0)).intValue() + 1;
+        int j = piglins.getBrain().getMemory(MemoryModuleType.VISIBLE_ADULT_HOGLIN_COUNT).orElse(Integer.valueOf(0)).intValue();
 
         return j > i;
     }
@@ -731,12 +731,12 @@ public class PiglinAi {
         piglin.getBrain().eraseMemory(MemoryModuleType.ANGRY_AT);
         piglin.getBrain().eraseMemory(MemoryModuleType.ATTACK_TARGET);
         piglin.getBrain().eraseMemory(MemoryModuleType.WALK_TARGET);
-        piglin.getBrain().setMemoryWithExpiry(MemoryModuleType.AVOID_TARGET, target, (long) PiglinAi.RETREAT_DURATION.sample(piglin.level.random));
+        piglin.getBrain().setMemoryWithExpiry(MemoryModuleType.AVOID_TARGET, target, PiglinAi.RETREAT_DURATION.sample(piglin.level.random));
         PiglinAi.dontKillAnyMoreHoglinsForAWhile(piglin);
     }
 
     protected static void dontKillAnyMoreHoglinsForAWhile(AbstractPiglin piglin) {
-        piglin.getBrain().setMemoryWithExpiry(MemoryModuleType.HUNTED_RECENTLY, Boolean.TRUE, (long) PiglinAi.TIME_BETWEEN_HUNTS.sample(piglin.level.random));
+        piglin.getBrain().setMemoryWithExpiry(MemoryModuleType.HUNTED_RECENTLY, Boolean.TRUE, PiglinAi.TIME_BETWEEN_HUNTS.sample(piglin.level.random));
     }
 
     private static void eat(Piglin piglin) {
diff --git a/src/main/java/net/minecraft/world/entity/monster/warden/AngerManagement.java b/src/main/java/net/minecraft/world/entity/monster/warden/AngerManagement.java
index 24d2cb0371f1cf175e87a1ec1bd44ffb26922707..dbec6c376b308d868990cd516752e4d10a1243c7 100644
--- a/src/main/java/net/minecraft/world/entity/monster/warden/AngerManagement.java
+++ b/src/main/java/net/minecraft/world/entity/monster/warden/AngerManagement.java
@@ -167,7 +167,7 @@ public class AngerManagement {
 
     @Nullable
     private Entity getTopSuspect() {
-        return this.suspects.stream().filter(this.filter).findFirst().orElse((Entity)null);
+        return this.suspects.stream().filter(this.filter).findFirst().orElse(null);
     }
 
     public int getActiveAnger(@Nullable Entity entity) {
diff --git a/src/main/java/net/minecraft/world/entity/monster/warden/Warden.java b/src/main/java/net/minecraft/world/entity/monster/warden/Warden.java
index edae6ed139fece98610822ea5442238c9dad6041..525899dc345f476a1d003dfe9f0c15262ffba9bf 100644
--- a/src/main/java/net/minecraft/world/entity/monster/warden/Warden.java
+++ b/src/main/java/net/minecraft/world/entity/monster/warden/Warden.java
@@ -220,7 +220,7 @@ public class Warden extends Monster implements VibrationListener.VibrationListen
     }
 
     public int getClientAngerLevel() {
-        return ((Integer) this.entityData.get(Warden.CLIENT_ANGER_LEVEL)).intValue();
+        return this.entityData.get(Warden.CLIENT_ANGER_LEVEL).intValue();
     }
 
     private void syncClientAngerLevel() {
@@ -234,7 +234,7 @@ public class Warden extends Monster implements VibrationListener.VibrationListen
         if (world instanceof ServerLevel) {
             ServerLevel worldserver = (ServerLevel) world;
 
-            ((VibrationListener) this.dynamicGameEventListener.getListener()).tick(worldserver);
+            this.dynamicGameEventListener.getListener().tick(worldserver);
             if (this.isPersistenceRequired() || this.requiresCustomPersistence()) {
                 WardenAi.setDigCooldown(this);
             }
@@ -434,7 +434,7 @@ public class Warden extends Monster implements VibrationListener.VibrationListen
         dataresult.resultOrPartial(logger::error).ifPresent((nbtbase) -> {
             nbt.put("anger", nbtbase);
         });
-        dataresult = VibrationListener.codec(this).encodeStart(NbtOps.INSTANCE, (VibrationListener) this.dynamicGameEventListener.getListener());
+        dataresult = VibrationListener.codec(this).encodeStart(NbtOps.INSTANCE, this.dynamicGameEventListener.getListener());
         logger = Warden.LOGGER;
         Objects.requireNonNull(logger);
         dataresult.resultOrPartial(logger::error).ifPresent((nbtbase) -> {
@@ -526,7 +526,7 @@ public class Warden extends Monster implements VibrationListener.VibrationListen
     @Nullable
     @Override
     public LivingEntity getTarget() {
-        return (LivingEntity) this.getBrain().getMemory(MemoryModuleType.ATTACK_TARGET).orElse(null); // CraftBukkit - decompile error
+        return this.getBrain().getMemory(MemoryModuleType.ATTACK_TARGET).orElse(null); // CraftBukkit - decompile error
     }
 
     @Override
@@ -540,7 +540,7 @@ public class Warden extends Monster implements VibrationListener.VibrationListen
         this.getBrain().setMemoryWithExpiry(MemoryModuleType.DIG_COOLDOWN, Unit.INSTANCE, 1200L);
         if (spawnReason == MobSpawnType.TRIGGERED) {
             this.setPose(Pose.EMERGING);
-            this.getBrain().setMemoryWithExpiry(MemoryModuleType.IS_EMERGING, Unit.INSTANCE, (long) WardenAi.EMERGE_DURATION);
+            this.getBrain().setMemoryWithExpiry(MemoryModuleType.IS_EMERGING, Unit.INSTANCE, WardenAi.EMERGE_DURATION);
             this.playSound(SoundEvents.WARDEN_AGITATED, 5.0F, 1.0F);
         }
 
diff --git a/src/main/java/net/minecraft/world/entity/npc/AbstractVillager.java b/src/main/java/net/minecraft/world/entity/npc/AbstractVillager.java
index 9b3698b8b767fb93b8c6b86d3fca52f897dd05ec..f411a1dd740a22331a5986d3762273c46e8c572b 100644
--- a/src/main/java/net/minecraft/world/entity/npc/AbstractVillager.java
+++ b/src/main/java/net/minecraft/world/entity/npc/AbstractVillager.java
@@ -73,11 +73,11 @@ public abstract class AbstractVillager extends AgeableMob implements InventoryCa
             entityData = new AgeableMob.AgeableMobGroupData(false);
         }
 
-        return super.finalizeSpawn(world, difficulty, spawnReason, (SpawnGroupData) entityData, entityNbt);
+        return super.finalizeSpawn(world, difficulty, spawnReason, entityData, entityNbt);
     }
 
     public int getUnhappyCounter() {
-        return ((Integer) this.entityData.get(AbstractVillager.DATA_UNHAPPY_COUNTER)).intValue();
+        return this.entityData.get(AbstractVillager.DATA_UNHAPPY_COUNTER).intValue();
     }
 
     public void setUnhappyCounter(int ticks) {
@@ -221,7 +221,7 @@ public abstract class AbstractVillager extends AgeableMob implements InventoryCa
     }
 
     protected void stopTrading() {
-        this.setTradingPlayer((Player) null);
+        this.setTradingPlayer(null);
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/entity/npc/Villager.java b/src/main/java/net/minecraft/world/entity/npc/Villager.java
index ac222a650d66e3cfdc6b26dfd586da513ab29ccb..0b18218bcd10dbc0a0001d636ce56cbbb2b5f4b8 100644
--- a/src/main/java/net/minecraft/world/entity/npc/Villager.java
+++ b/src/main/java/net/minecraft/world/entity/npc/Villager.java
@@ -529,7 +529,7 @@ public class Villager extends AbstractVillager implements ReputationEventHandler
             nbt.put("VillagerData", nbtbase);
         });
         nbt.putByte("FoodLevel", (byte) this.foodLevel);
-        nbt.put("Gossips", (Tag) this.gossips.store(NbtOps.INSTANCE));
+        nbt.put("Gossips", this.gossips.store(NbtOps.INSTANCE));
         nbt.putInt("Xp", this.villagerXp);
         nbt.putLong("LastRestock", this.lastRestockGameTime);
         nbt.putLong("LastGossipDecay", this.lastGossipDecayTime);
@@ -623,7 +623,7 @@ public class Villager extends AbstractVillager implements ReputationEventHandler
 
     @Override
     public VillagerData getVillagerData() {
-        return (VillagerData) this.entityData.get(Villager.DATA_VILLAGER_DATA);
+        return this.entityData.get(Villager.DATA_VILLAGER_DATA);
     }
 
     @Override
@@ -712,9 +712,9 @@ public class Villager extends AbstractVillager implements ReputationEventHandler
                 if (worldserver != null) {
                     PoiManager villageplace = worldserver.getPoiManager();
                     Optional<Holder<PoiType>> optional = villageplace.getType(globalpos.pos());
-                    BiPredicate<Villager, Holder<PoiType>> bipredicate = (BiPredicate) Villager.POI_MEMORIES.get(pos);
+                    BiPredicate<Villager, Holder<PoiType>> bipredicate = Villager.POI_MEMORIES.get(pos);
 
-                    if (optional.isPresent() && bipredicate.test(this, (Holder) optional.get())) {
+                    if (optional.isPresent() && bipredicate.test(this, optional.get())) {
                         villageplace.release(globalpos.pos());
                         DebugPackets.sendPoiTicketCountPacket(worldserver, globalpos.pos());
                     }
@@ -739,7 +739,7 @@ public class Villager extends AbstractVillager implements ReputationEventHandler
                 ItemStack itemstack = this.getInventory().getItem(i);
 
                 if (!itemstack.isEmpty()) {
-                    Integer integer = (Integer) Villager.FOOD_POINTS.get(itemstack.getItem());
+                    Integer integer = Villager.FOOD_POINTS.get(itemstack.getItem());
 
                     if (integer != null) {
                         int j = itemstack.getCount();
@@ -845,7 +845,7 @@ public class Villager extends AbstractVillager implements ReputationEventHandler
 
         Villager entityvillager = new Villager(EntityType.VILLAGER, world, villagertype);
 
-        entityvillager.finalizeSpawn(world, world.getCurrentDifficultyAt(entityvillager.blockPosition()), MobSpawnType.BREEDING, (SpawnGroupData) null, (CompoundTag) null);
+        entityvillager.finalizeSpawn(world, world.getCurrentDifficultyAt(entityvillager.blockPosition()), MobSpawnType.BREEDING, null, null);
         return entityvillager;
     }
 
@@ -853,7 +853,7 @@ public class Villager extends AbstractVillager implements ReputationEventHandler
     public void thunderHit(ServerLevel world, LightningBolt lightning) {
         if (world.getDifficulty() != Difficulty.PEACEFUL) {
             // Paper - move log down, event can cancel
-            Witch entitywitch = (Witch) EntityType.WITCH.create(world);
+            Witch entitywitch = EntityType.WITCH.create(world);
 
             if (entitywitch != null) {
                 // Paper start
@@ -864,7 +864,7 @@ public class Villager extends AbstractVillager implements ReputationEventHandler
                 // Paper end
 
                 entitywitch.moveTo(this.getX(), this.getY(), this.getZ(), this.getYRot(), this.getXRot());
-                entitywitch.finalizeSpawn(world, world.getCurrentDifficultyAt(entitywitch.blockPosition()), MobSpawnType.CONVERSION, (SpawnGroupData) null, (CompoundTag) null);
+                entitywitch.finalizeSpawn(world, world.getCurrentDifficultyAt(entitywitch.blockPosition()), MobSpawnType.CONVERSION, null, null);
                 entitywitch.setNoAi(this.isNoAi());
                 if (this.hasCustomName()) {
                     entitywitch.setCustomName(this.getCustomName());
@@ -913,7 +913,7 @@ public class Villager extends AbstractVillager implements ReputationEventHandler
         SimpleContainer inventorysubcontainer = this.getInventory();
 
         return Villager.FOOD_POINTS.entrySet().stream().mapToInt((entry) -> {
-            return inventorysubcontainer.countItem((Item) entry.getKey()) * ((Integer) entry.getValue()).intValue();
+            return inventorysubcontainer.countItem(entry.getKey()) * entry.getValue().intValue();
         }).sum();
     }
 
@@ -930,10 +930,10 @@ public class Villager extends AbstractVillager implements ReputationEventHandler
     public boolean updateTrades(int amount) {
         // Paper end
         VillagerData villagerdata = this.getVillagerData();
-        Int2ObjectMap<VillagerTrades.ItemListing[]> int2objectmap = (Int2ObjectMap) VillagerTrades.TRADES.get(villagerdata.getProfession());
+        Int2ObjectMap<VillagerTrades.ItemListing[]> int2objectmap = VillagerTrades.TRADES.get(villagerdata.getProfession());
 
         if (int2objectmap != null && !int2objectmap.isEmpty()) {
-            VillagerTrades.ItemListing[] avillagertrades_imerchantrecipeoption = (VillagerTrades.ItemListing[]) int2objectmap.get(villagerdata.getLevel());
+            VillagerTrades.ItemListing[] avillagertrades_imerchantrecipeoption = int2objectmap.get(villagerdata.getLevel());
 
             if (avillagertrades_imerchantrecipeoption != null) {
                 MerchantOffers merchantrecipelist = this.getOffers();
@@ -969,7 +969,7 @@ public class Villager extends AbstractVillager implements ReputationEventHandler
         if (this.wantsToSpawnGolem(time)) {
             AABB axisalignedbb = this.getBoundingBox().inflate(10.0D, 10.0D, 10.0D);
             List<Villager> list = world.getEntitiesOfClass(Villager.class, axisalignedbb);
-            List<Villager> list1 = (List) list.stream().filter((entityvillager) -> {
+            List<Villager> list1 = list.stream().filter((entityvillager) -> {
                 return entityvillager.wantsToSpawnGolem(time);
             }).limit(5L).collect(Collectors.toList());
 
@@ -1054,6 +1054,6 @@ public class Villager extends AbstractVillager implements ReputationEventHandler
     private boolean golemSpawnConditionsMet(long worldTime) {
         Optional<Long> optional = this.brain.getMemory(MemoryModuleType.LAST_SLEPT);
 
-        return optional.isPresent() ? worldTime - ((Long) optional.get()).longValue() < 24000L : false;
+        return optional.isPresent() ? worldTime - optional.get().longValue() < 24000L : false;
     }
 }
diff --git a/src/main/java/net/minecraft/world/entity/npc/WanderingTrader.java b/src/main/java/net/minecraft/world/entity/npc/WanderingTrader.java
index e92e6fb4cf97f4d5406b5b5d5786bfa5fb55f536..72322eaee1fb5f4ba8bbb9621a4ddd30db2eb175 100644
--- a/src/main/java/net/minecraft/world/entity/npc/WanderingTrader.java
+++ b/src/main/java/net/minecraft/world/entity/npc/WanderingTrader.java
@@ -129,8 +129,8 @@ public class WanderingTrader extends net.minecraft.world.entity.npc.AbstractVill
 
     @Override
     protected void updateTrades() {
-        VillagerTrades.ItemListing[] avillagertrades_imerchantrecipeoption = (VillagerTrades.ItemListing[]) VillagerTrades.WANDERING_TRADER_TRADES.get(1);
-        VillagerTrades.ItemListing[] avillagertrades_imerchantrecipeoption1 = (VillagerTrades.ItemListing[]) VillagerTrades.WANDERING_TRADER_TRADES.get(2);
+        VillagerTrades.ItemListing[] avillagertrades_imerchantrecipeoption = VillagerTrades.WANDERING_TRADER_TRADES.get(1);
+        VillagerTrades.ItemListing[] avillagertrades_imerchantrecipeoption1 = VillagerTrades.WANDERING_TRADER_TRADES.get(2);
 
         if (avillagertrades_imerchantrecipeoption != null && avillagertrades_imerchantrecipeoption1 != null) {
             MerchantOffers merchantrecipelist = this.getOffers();
@@ -273,7 +273,7 @@ public class WanderingTrader extends net.minecraft.world.entity.npc.AbstractVill
 
         @Override
         public void stop() {
-            this.trader.setWanderTarget((BlockPos) null);
+            this.trader.setWanderTarget(null);
             WanderingTrader.this.navigation.stop();
         }
 
@@ -295,7 +295,7 @@ public class WanderingTrader extends net.minecraft.world.entity.npc.AbstractVill
 
                     WanderingTrader.this.navigation.moveTo(vec3d1.x, vec3d1.y, vec3d1.z, this.speedModifier);
                 } else {
-                    WanderingTrader.this.navigation.moveTo((double) blockposition.getX(), (double) blockposition.getY(), (double) blockposition.getZ(), this.speedModifier);
+                    WanderingTrader.this.navigation.moveTo(blockposition.getX(), blockposition.getY(), blockposition.getZ(), this.speedModifier);
                 }
             }
 
diff --git a/src/main/java/net/minecraft/world/entity/npc/WanderingTraderSpawner.java b/src/main/java/net/minecraft/world/entity/npc/WanderingTraderSpawner.java
index 0ae8e9134a3671cdf2a480cd4dd6598653e261ab..69b0c9c2ee5c61636782321b361742c2d54f5932 100644
--- a/src/main/java/net/minecraft/world/entity/npc/WanderingTraderSpawner.java
+++ b/src/main/java/net/minecraft/world/entity/npc/WanderingTraderSpawner.java
@@ -112,7 +112,7 @@ public class WanderingTraderSpawner implements CustomSpawner {
             }, (blockposition1) -> {
                 return true;
             }, blockposition, 48, PoiManager.Occupancy.ANY);
-            BlockPos blockposition1 = (BlockPos) optional.orElse(blockposition);
+            BlockPos blockposition1 = optional.orElse(blockposition);
             BlockPos blockposition2 = this.findSpawnPositionNear(world, blockposition1, 48);
 
             if (blockposition2 != null && this.hasEnoughSpace(world, blockposition2)) {
diff --git a/src/main/java/net/minecraft/world/entity/player/Inventory.java b/src/main/java/net/minecraft/world/entity/player/Inventory.java
index eb0b18b525ee560422d461809b529c2a809f0bb5..58f5c90bb31bad87576cf0580fde8da86bb9066d 100644
--- a/src/main/java/net/minecraft/world/entity/player/Inventory.java
+++ b/src/main/java/net/minecraft/world/entity/player/Inventory.java
@@ -105,7 +105,7 @@ public class Inventory implements Container, Nameable {
     }
 
     public ItemStack getSelected() {
-        return Inventory.isHotbarSlot(this.selected) ? (ItemStack) this.items.get(this.selected) : ItemStack.EMPTY;
+        return Inventory.isHotbarSlot(this.selected) ? this.items.get(this.selected) : ItemStack.EMPTY;
     }
 
     public static int getSelectionSize() {
@@ -140,7 +140,7 @@ public class Inventory implements Container, Nameable {
 
     public int getFreeSlot() {
         for (int i = 0; i < this.items.size(); ++i) {
-            if (((ItemStack) this.items.get(i)).isEmpty()) {
+            if (this.items.get(i).isEmpty()) {
                 return i;
             }
         }
@@ -156,11 +156,11 @@ public class Inventory implements Container, Nameable {
         } else {
             if (i == -1) {
                 this.selected = this.getSuitableHotbarSlot();
-                if (!((ItemStack) this.items.get(this.selected)).isEmpty()) {
+                if (!this.items.get(this.selected).isEmpty()) {
                     int j = this.getFreeSlot();
 
                     if (j != -1) {
-                        this.items.set(j, (ItemStack) this.items.get(this.selected));
+                        this.items.set(j, this.items.get(this.selected));
                     }
                 }
 
@@ -174,9 +174,9 @@ public class Inventory implements Container, Nameable {
 
     public void pickSlot(int slot) {
         this.selected = this.getSuitableHotbarSlot();
-        ItemStack itemstack = (ItemStack) this.items.get(this.selected);
+        ItemStack itemstack = this.items.get(this.selected);
 
-        this.items.set(this.selected, (ItemStack) this.items.get(slot));
+        this.items.set(this.selected, this.items.get(slot));
         this.items.set(slot, itemstack);
     }
 
@@ -186,7 +186,7 @@ public class Inventory implements Container, Nameable {
 
     public int findSlotMatchingItem(ItemStack stack) {
         for (int i = 0; i < this.items.size(); ++i) {
-            if (!((ItemStack) this.items.get(i)).isEmpty() && ItemStack.isSameItemSameTags(stack, (ItemStack) this.items.get(i))) {
+            if (!this.items.get(i).isEmpty() && ItemStack.isSameItemSameTags(stack, this.items.get(i))) {
                 return i;
             }
         }
@@ -196,9 +196,9 @@ public class Inventory implements Container, Nameable {
 
     public int findSlotMatchingUnusedItem(ItemStack stack) {
         for (int i = 0; i < this.items.size(); ++i) {
-            ItemStack itemstack1 = (ItemStack) this.items.get(i);
+            ItemStack itemstack1 = this.items.get(i);
 
-            if (!((ItemStack) this.items.get(i)).isEmpty() && ItemStack.isSameItemSameTags(stack, (ItemStack) this.items.get(i)) && !((ItemStack) this.items.get(i)).isDamaged() && !itemstack1.isEnchanted() && !itemstack1.hasCustomHoverName()) {
+            if (!this.items.get(i).isEmpty() && ItemStack.isSameItemSameTags(stack, this.items.get(i)) && !this.items.get(i).isDamaged() && !itemstack1.isEnchanted() && !itemstack1.hasCustomHoverName()) {
                 return i;
             }
         }
@@ -212,14 +212,14 @@ public class Inventory implements Container, Nameable {
 
         for (j = 0; j < 9; ++j) {
             i = (this.selected + j) % 9;
-            if (((ItemStack) this.items.get(i)).isEmpty()) {
+            if (this.items.get(i).isEmpty()) {
                 return i;
             }
         }
 
         for (j = 0; j < 9; ++j) {
             i = (this.selected + j) % 9;
-            if (!((ItemStack) this.items.get(i)).isEnchanted()) {
+            if (!this.items.get(i).isEnchanted()) {
                 return i;
             }
         }
@@ -243,7 +243,7 @@ public class Inventory implements Container, Nameable {
     public int clearOrCountMatchingItems(Predicate<ItemStack> shouldRemove, int maxCount, Container craftingInventory) {
         byte b0 = 0;
         boolean flag = maxCount == 0;
-        int j = b0 + ContainerHelper.clearOrCountMatchingItems((Container) this, shouldRemove, maxCount - b0, flag);
+        int j = b0 + ContainerHelper.clearOrCountMatchingItems(this, shouldRemove, maxCount - b0, flag);
 
         j += ContainerHelper.clearOrCountMatchingItems(craftingInventory, shouldRemove, maxCount - j, flag);
         ItemStack itemstack = this.player.containerMenu.getCarried();
@@ -303,7 +303,7 @@ public class Inventory implements Container, Nameable {
             return 40;
         } else {
             for (int i = 0; i < this.items.size(); ++i) {
-                if (this.hasRemainingSpaceForItem((ItemStack) this.items.get(i), stack)) {
+                if (this.hasRemainingSpaceForItem(this.items.get(i), stack)) {
                     return i;
                 }
             }
@@ -319,8 +319,8 @@ public class Inventory implements Container, Nameable {
             NonNullList<ItemStack> nonnulllist = (NonNullList) iterator.next();
 
             for (int i = 0; i < nonnulllist.size(); ++i) {
-                if (!((ItemStack) nonnulllist.get(i)).isEmpty()) {
-                    ((ItemStack) nonnulllist.get(i)).inventoryTick(this.player.level, this.player, i, this.selected == i);
+                if (!nonnulllist.get(i).isEmpty()) {
+                    nonnulllist.get(i).inventoryTick(this.player.level, this.player, i, this.selected == i);
                 }
             }
         }
@@ -343,7 +343,7 @@ public class Inventory implements Container, Nameable {
 
                     if (slot >= 0) {
                         this.items.set(slot, stack.copy());
-                        ((ItemStack) this.items.get(slot)).setPopTime(5);
+                        this.items.get(slot).setPopTime(5);
                         stack.setCount(0);
                         return true;
                     } else if (this.player.getAbilities().instabuild) {
@@ -428,7 +428,7 @@ public class Inventory implements Container, Nameable {
             }
         }
 
-        return list != null && !((ItemStack) list.get(slot)).isEmpty() ? ContainerHelper.removeItem(list, slot, amount) : ItemStack.EMPTY;
+        return list != null && !list.get(slot).isEmpty() ? ContainerHelper.removeItem(list, slot, amount) : ItemStack.EMPTY;
     }
 
     public void removeItem(ItemStack stack) {
@@ -461,8 +461,8 @@ public class Inventory implements Container, Nameable {
             }
         }
 
-        if (nonnulllist != null && !((ItemStack) nonnulllist.get(slot)).isEmpty()) {
-            ItemStack itemstack = (ItemStack) nonnulllist.get(slot);
+        if (nonnulllist != null && !nonnulllist.get(slot).isEmpty()) {
+            ItemStack itemstack = nonnulllist.get(slot);
 
             nonnulllist.set(slot, ItemStack.EMPTY);
             return itemstack;
@@ -492,7 +492,7 @@ public class Inventory implements Container, Nameable {
     }
 
     public float getDestroySpeed(BlockState block) {
-        return ((ItemStack) this.items.get(this.selected)).getDestroySpeed(block);
+        return this.items.get(this.selected).getDestroySpeed(block);
     }
 
     public ListTag save(ListTag nbtList) {
@@ -500,28 +500,28 @@ public class Inventory implements Container, Nameable {
         int i;
 
         for (i = 0; i < this.items.size(); ++i) {
-            if (!((ItemStack) this.items.get(i)).isEmpty()) {
+            if (!this.items.get(i).isEmpty()) {
                 nbttagcompound = new CompoundTag();
                 nbttagcompound.putByte("Slot", (byte) i);
-                ((ItemStack) this.items.get(i)).save(nbttagcompound);
+                this.items.get(i).save(nbttagcompound);
                 nbtList.add(nbttagcompound);
             }
         }
 
         for (i = 0; i < this.armor.size(); ++i) {
-            if (!((ItemStack) this.armor.get(i)).isEmpty()) {
+            if (!this.armor.get(i).isEmpty()) {
                 nbttagcompound = new CompoundTag();
                 nbttagcompound.putByte("Slot", (byte) (i + 100));
-                ((ItemStack) this.armor.get(i)).save(nbttagcompound);
+                this.armor.get(i).save(nbttagcompound);
                 nbtList.add(nbttagcompound);
             }
         }
 
         for (i = 0; i < this.offhand.size(); ++i) {
-            if (!((ItemStack) this.offhand.get(i)).isEmpty()) {
+            if (!this.offhand.get(i).isEmpty()) {
                 nbttagcompound = new CompoundTag();
                 nbttagcompound.putByte("Slot", (byte) (i + 150));
-                ((ItemStack) this.offhand.get(i)).save(nbttagcompound);
+                this.offhand.get(i).save(nbttagcompound);
                 nbtList.add(nbttagcompound);
             }
         }
@@ -608,7 +608,7 @@ public class Inventory implements Container, Nameable {
             }
         }
 
-        return list == null ? ItemStack.EMPTY : (ItemStack) list.get(slot);
+        return list == null ? ItemStack.EMPTY : list.get(slot);
     }
 
     @Override
@@ -617,7 +617,7 @@ public class Inventory implements Container, Nameable {
     }
 
     public ItemStack getArmor(int slot) {
-        return (ItemStack) this.armor.get(slot);
+        return this.armor.get(slot);
     }
 
     public void hurtArmor(DamageSource damageSource, float amount, int[] slots) {
@@ -632,7 +632,7 @@ public class Inventory implements Container, Nameable {
 
             for (int j = 0; j < i; ++j) {
                 int k = aint1[j];
-                ItemStack itemstack = (ItemStack) this.armor.get(k);
+                ItemStack itemstack = this.armor.get(k);
 
                 if ((!damageSource.isFire() || !itemstack.getItem().isFireResistant()) && itemstack.getItem() instanceof ArmorItem) {
                     itemstack.hurtAndBreak((int) amount, this.player, (entityhuman) -> {
@@ -651,7 +651,7 @@ public class Inventory implements Container, Nameable {
             List<ItemStack> list = (List) iterator.next();
 
             for (int i = 0; i < list.size(); ++i) {
-                ItemStack itemstack = (ItemStack) list.get(i);
+                ItemStack itemstack = list.get(i);
 
                 if (!itemstack.isEmpty()) {
                     this.player.drop(itemstack, true, false);
@@ -673,7 +673,7 @@ public class Inventory implements Container, Nameable {
 
     @Override
     public boolean stillValid(Player player) {
-        return this.player.isRemoved() ? false : player.distanceToSqr((Entity) this.player) <= 64.0D;
+        return this.player.isRemoved() ? false : player.distanceToSqr(this.player) <= 64.0D;
     }
 
     public boolean contains(ItemStack stack) {
diff --git a/src/main/java/net/minecraft/world/entity/player/Player.java b/src/main/java/net/minecraft/world/entity/player/Player.java
index 2185061840bdf9d02e72ae2ad38d2e6fafb87f26..653f4ecea7406945c5572e8912a12492856b29dc 100644
--- a/src/main/java/net/minecraft/world/entity/player/Player.java
+++ b/src/main/java/net/minecraft/world/entity/player/Player.java
@@ -202,7 +202,7 @@ public abstract class Player extends LivingEntity {
         this.gameProfile = gameProfile;
         this.inventoryMenu = new InventoryMenu(this.inventory, !world.isClientSide, this);
         this.containerMenu = this.inventoryMenu;
-        this.moveTo((double) pos.getX() + 0.5D, (double) (pos.getY() + 1), (double) pos.getZ() + 0.5D, yaw, 0.0F);
+        this.moveTo((double) pos.getX() + 0.5D, pos.getY() + 1, (double) pos.getZ() + 0.5D, yaw, 0.0F);
         this.rotOffs = 180.0F;
     }
 
@@ -583,7 +583,7 @@ public abstract class Player extends LivingEntity {
             List<Entity> list1 = Lists.newArrayList();
 
             for (int i = 0; i < list.size(); ++i) {
-                Entity entity = (Entity) list.get(i);
+                Entity entity = list.get(i);
 
                 if (entity.getType() == EntityType.EXPERIENCE_ORB) {
                     list1.add(entity);
@@ -613,7 +613,7 @@ public abstract class Player extends LivingEntity {
                 return entitytypes == EntityType.PARROT;
             }).ifPresent((entitytypes) -> {
                 if (!Parrot.imitateNearbyMobs(this.level, this)) {
-                    this.level.playSound((Player) null, this.getX(), this.getY(), this.getZ(), Parrot.getAmbient(this.level, this.level.random), this.getSoundSource(), 1.0F, Parrot.getPitch(this.level.random));
+                    this.level.playSound(null, this.getX(), this.getY(), this.getZ(), Parrot.getAmbient(this.level, this.level.random), this.getSoundSource(), 1.0F, Parrot.getPitch(this.level.random));
                 }
 
             });
@@ -626,7 +626,7 @@ public abstract class Player extends LivingEntity {
     }
 
     public int getScore() {
-        return ((Integer) this.entityData.get(Player.DATA_SCORE_ID)).intValue();
+        return this.entityData.get(Player.DATA_SCORE_ID).intValue();
     }
 
     public void setScore(int score) {
@@ -657,7 +657,7 @@ public abstract class Player extends LivingEntity {
         }
 
         if (damageSource != null) {
-            this.setDeltaMovement((double) (-Mth.cos((this.hurtDir + this.getYRot()) * 0.017453292F) * 0.1F), 0.10000000149011612D, (double) (-Mth.sin((this.hurtDir + this.getYRot()) * 0.017453292F) * 0.1F));
+            this.setDeltaMovement(-Mth.cos((this.hurtDir + this.getYRot()) * 0.017453292F) * 0.1F, 0.10000000149011612D, -Mth.sin((this.hurtDir + this.getYRot()) * 0.017453292F) * 0.1F);
         } else {
             this.setDeltaMovement(0.0D, 0.1D, 0.0D);
         }
@@ -741,7 +741,7 @@ public abstract class Player extends LivingEntity {
             if (flag) {
                 f = this.random.nextFloat() * 0.5F;
                 f1 = this.random.nextFloat() * 6.2831855F;
-                entityitem.setDeltaMovement((double) (-Mth.sin(f1) * f), 0.20000000298023224D, (double) (Mth.cos(f1) * f));
+                entityitem.setDeltaMovement(-Mth.sin(f1) * f, 0.20000000298023224D, Mth.cos(f1) * f);
             } else {
                 f = 0.3F;
                 f1 = Mth.sin(this.getXRot() * 0.017453292F);
@@ -751,7 +751,7 @@ public abstract class Player extends LivingEntity {
                 float f5 = this.random.nextFloat() * 6.2831855F;
                 float f6 = 0.02F * this.random.nextFloat();
 
-                entityitem.setDeltaMovement((double) (-f3 * f2 * 0.3F) + Math.cos((double) f5) * (double) f6, (double) (-f1 * 0.3F + 0.1F + (this.random.nextFloat() - this.random.nextFloat()) * 0.1F), (double) (f4 * f2 * 0.3F) + Math.sin((double) f5) * (double) f6);
+                entityitem.setDeltaMovement((double) (-f3 * f2 * 0.3F) + Math.cos(f5) * (double) f6, -f1 * 0.3F + 0.1F + (this.random.nextFloat() - this.random.nextFloat()) * 0.1F, (double) (f4 * f2 * 0.3F) + Math.sin(f5) * (double) f6);
             }
 
             // CraftBukkit start - fire PlayerDropItemEvent
@@ -865,7 +865,7 @@ public abstract class Player extends LivingEntity {
         this.setScore(nbt.getInt("Score"));
         this.foodData.readAdditionalSaveData(nbt);
         this.abilities.loadSaveData(nbt);
-        this.getAttribute(Attributes.MOVEMENT_SPEED).setBaseValue((double) this.abilities.getWalkingSpeed());
+        this.getAttribute(Attributes.MOVEMENT_SPEED).setBaseValue(this.abilities.getWalkingSpeed());
         if (nbt.contains("EnderItems", 9)) {
             this.enderChestInventory.fromTag(nbt.getList("EnderItems", 10));
         }
@@ -1184,7 +1184,7 @@ public abstract class Player extends LivingEntity {
             double d1 = movement.z;
             double d2 = 0.05D;
 
-            while (d0 != 0.0D && this.level.noCollision(this, this.getBoundingBox().move(d0, (double) (-this.maxUpStep), 0.0D))) {
+            while (d0 != 0.0D && this.level.noCollision(this, this.getBoundingBox().move(d0, -this.maxUpStep, 0.0D))) {
                 if (d0 < 0.05D && d0 >= -0.05D) {
                     d0 = 0.0D;
                 } else if (d0 > 0.0D) {
@@ -1194,7 +1194,7 @@ public abstract class Player extends LivingEntity {
                 }
             }
 
-            while (d1 != 0.0D && this.level.noCollision(this, this.getBoundingBox().move(0.0D, (double) (-this.maxUpStep), d1))) {
+            while (d1 != 0.0D && this.level.noCollision(this, this.getBoundingBox().move(0.0D, -this.maxUpStep, d1))) {
                 if (d1 < 0.05D && d1 >= -0.05D) {
                     d1 = 0.0D;
                 } else if (d1 > 0.0D) {
@@ -1204,7 +1204,7 @@ public abstract class Player extends LivingEntity {
                 }
             }
 
-            while (d0 != 0.0D && d1 != 0.0D && this.level.noCollision(this, this.getBoundingBox().move(d0, (double) (-this.maxUpStep), d1))) {
+            while (d0 != 0.0D && d1 != 0.0D && this.level.noCollision(this, this.getBoundingBox().move(d0, -this.maxUpStep, d1))) {
                 if (d0 < 0.05D && d0 >= -0.05D) {
                     d0 = 0.0D;
                 } else if (d0 > 0.0D) {
@@ -1229,7 +1229,7 @@ public abstract class Player extends LivingEntity {
     }
 
     private boolean isAboveGround() {
-        return this.onGround || this.fallDistance < this.maxUpStep && !this.level.noCollision(this, this.getBoundingBox().move(0.0D, (double) (this.fallDistance - this.maxUpStep), 0.0D));
+        return this.onGround || this.fallDistance < this.maxUpStep && !this.level.noCollision(this, this.getBoundingBox().move(0.0D, this.fallDistance - this.maxUpStep, 0.0D));
     }
 
     public void attack(Entity target) {
@@ -1280,7 +1280,7 @@ public abstract class Player extends LivingEntity {
 
                     f += f1;
                     boolean flag3 = false;
-                    double d0 = (double) (this.walkDist - this.walkDistO);
+                    double d0 = this.walkDist - this.walkDistO;
 
                     if (flag && !flag2 && !flag1 && this.onGround && d0 < (double) this.getSpeed()) {
                         ItemStack itemstack = this.getItemInHand(InteractionHand.MAIN_HAND);
@@ -1315,9 +1315,9 @@ public abstract class Player extends LivingEntity {
                     if (flag5) {
                         if (i > 0) {
                             if (target instanceof LivingEntity) {
-                                ((LivingEntity) target).knockback((double) ((float) i * 0.5F), (double) Mth.sin(this.getYRot() * 0.017453292F), (double) (-Mth.cos(this.getYRot() * 0.017453292F)), this); // Paper
+                                ((LivingEntity) target).knockback((float) i * 0.5F, Mth.sin(this.getYRot() * 0.017453292F), -Mth.cos(this.getYRot() * 0.017453292F), this); // Paper
                             } else {
-                                target.push((double) (-Mth.sin(this.getYRot() * 0.017453292F) * (float) i * 0.5F), 0.1D, (double) (Mth.cos(this.getYRot() * 0.017453292F) * (float) i * 0.5F), this); // Paper
+                                target.push(-Mth.sin(this.getYRot() * 0.017453292F) * (float) i * 0.5F, 0.1D, Mth.cos(this.getYRot() * 0.017453292F) * (float) i * 0.5F, this); // Paper
                             }
 
                             this.setDeltaMovement(this.getDeltaMovement().multiply(0.6D, 1.0D, 0.6D));
@@ -1336,10 +1336,10 @@ public abstract class Player extends LivingEntity {
                             while (iterator.hasNext()) {
                                 LivingEntity entityliving = (LivingEntity) iterator.next();
 
-                                if (entityliving != this && entityliving != target && !this.isAlliedTo((Entity) entityliving) && (!(entityliving instanceof ArmorStand) || !((ArmorStand) entityliving).isMarker()) && this.distanceToSqr((Entity) entityliving) < 9.0D) {
+                                if (entityliving != this && entityliving != target && !this.isAlliedTo(entityliving) && (!(entityliving instanceof ArmorStand) || !((ArmorStand) entityliving).isMarker()) && this.distanceToSqr(entityliving) < 9.0D) {
                                     // CraftBukkit start - Only apply knockback if the damage hits
                                     if (entityliving.hurt(DamageSource.playerAttack(this).sweep().critical(flag2), f4)) { // Paper - add critical damage API
-                                    entityliving.knockback(0.4000000059604645D, (double) Mth.sin(this.getYRot() * 0.017453292F), (double) (-Mth.cos(this.getYRot() * 0.017453292F)), this); // Paper
+                                    entityliving.knockback(0.4000000059604645D, Mth.sin(this.getYRot() * 0.017453292F), -Mth.cos(this.getYRot() * 0.017453292F), this); // Paper
                                     }
                                     // CraftBukkit end
                                 }
@@ -1474,8 +1474,8 @@ public abstract class Player extends LivingEntity {
     public void magicCrit(Entity target) {}
 
     public void sweepAttack() {
-        double d0 = (double) (-Mth.sin(this.getYRot() * 0.017453292F));
-        double d1 = (double) Mth.cos(this.getYRot() * 0.017453292F);
+        double d0 = -Mth.sin(this.getYRot() * 0.017453292F);
+        double d1 = Mth.cos(this.getYRot() * 0.017453292F);
 
         if (this.level instanceof ServerLevel) {
             ((ServerLevel) this.level).sendParticles(ParticleTypes.SWEEP_ATTACK, this.getX() + d0, this.getY(0.5D), this.getZ() + d1, 0, d0, 0.0D, d1, 0.0D);
@@ -1551,7 +1551,7 @@ public abstract class Player extends LivingEntity {
             Optional<Vec3> optional = RespawnAnchorBlock.findStandUpPosition(EntityType.PLAYER, world, pos);
 
             if (!forced && !alive && optional.isPresent()) {
-                world.setBlock(pos, (BlockState) iblockdata.setValue(RespawnAnchorBlock.CHARGE, Integer.valueOf((Integer) iblockdata.getValue(RespawnAnchorBlock.CHARGE) - 1)), 3);
+                world.setBlock(pos, iblockdata.setValue(RespawnAnchorBlock.CHARGE, Integer.valueOf(iblockdata.getValue(RespawnAnchorBlock.CHARGE) - 1)), 3);
             }
 
             return optional;
@@ -1828,7 +1828,7 @@ public abstract class Player extends LivingEntity {
     public void giveExperiencePoints(int experience) {
         this.increaseScore(experience);
         this.experienceProgress += (float) experience / (float) this.getXpNeededForNextLevel();
-        this.totalExperience = Mth.clamp(this.totalExperience + experience, (int) 0, Integer.MAX_VALUE);
+        this.totalExperience = Mth.clamp(this.totalExperience + experience, 0, Integer.MAX_VALUE);
 
         while (this.experienceProgress < 0.0F) {
             float f = this.experienceProgress * (float) this.getXpNeededForNextLevel();
@@ -1876,7 +1876,7 @@ public abstract class Player extends LivingEntity {
         if (levels > 0 && this.experienceLevel % 5 == 0 && (float) this.lastLevelUpTime < (float) this.tickCount - 100.0F) {
             float f = this.experienceLevel > 30 ? 1.0F : (float) this.experienceLevel / 30.0F;
 
-            this.level.playSound((Player) null, this.getX(), this.getY(), this.getZ(), SoundEvents.PLAYER_LEVELUP, this.getSoundSource(), f * 0.75F, 1.0F);
+            this.level.playSound(null, this.getX(), this.getY(), this.getZ(), SoundEvents.PLAYER_LEVELUP, this.getSoundSource(), f * 0.75F, 1.0F);
             this.lastLevelUpTime = this.tickCount;
         }
 
@@ -1984,7 +1984,7 @@ public abstract class Player extends LivingEntity {
 
     @Override
     public ItemStack getItemBySlot(EquipmentSlot slot) {
-        return slot == EquipmentSlot.MAINHAND ? this.inventory.getSelected() : (slot == EquipmentSlot.OFFHAND ? (ItemStack) this.inventory.offhand.get(0) : (slot.getType() == EquipmentSlot.Type.ARMOR ? (ItemStack) this.inventory.armor.get(slot.getIndex()) : ItemStack.EMPTY));
+        return slot == EquipmentSlot.MAINHAND ? this.inventory.getSelected() : (slot == EquipmentSlot.OFFHAND ? this.inventory.offhand.get(0) : (slot.getType() == EquipmentSlot.Type.ARMOR ? this.inventory.armor.get(slot.getIndex()) : ItemStack.EMPTY));
     }
 
     @Override
@@ -2003,11 +2003,11 @@ public abstract class Player extends LivingEntity {
         // CraftBukkit end
         this.verifyEquippedItem(itemstack);
         if (enumitemslot == EquipmentSlot.MAINHAND) {
-            this.onEquipItem(enumitemslot, (ItemStack) this.inventory.items.set(this.inventory.selected, itemstack), itemstack, silent); // CraftBukkit
+            this.onEquipItem(enumitemslot, this.inventory.items.set(this.inventory.selected, itemstack), itemstack, silent); // CraftBukkit
         } else if (enumitemslot == EquipmentSlot.OFFHAND) {
-            this.onEquipItem(enumitemslot, (ItemStack) this.inventory.offhand.set(0, itemstack), itemstack, silent); // CraftBukkit
+            this.onEquipItem(enumitemslot, this.inventory.offhand.set(0, itemstack), itemstack, silent); // CraftBukkit
         } else if (enumitemslot.getType() == EquipmentSlot.Type.ARMOR) {
-            this.onEquipItem(enumitemslot, (ItemStack) this.inventory.armor.set(enumitemslot.getIndex(), itemstack), itemstack, silent); // CraftBukkit
+            this.onEquipItem(enumitemslot, this.inventory.armor.set(enumitemslot.getIndex(), itemstack), itemstack, silent); // CraftBukkit
         }
 
     }
@@ -2161,11 +2161,11 @@ public abstract class Player extends LivingEntity {
 
     @Override
     public float getAbsorptionAmount() {
-        return ((Float) this.getEntityData().get(Player.DATA_PLAYER_ABSORPTION_ID)).floatValue();
+        return this.getEntityData().get(Player.DATA_PLAYER_ABSORPTION_ID).floatValue();
     }
 
     public boolean isModelPartShown(PlayerModelPart modelPart) {
-        return (((Byte) this.getEntityData().get(Player.DATA_PLAYER_MODE_CUSTOMISATION)).intValue() & modelPart.getMask()) == modelPart.getMask();
+        return (this.getEntityData().get(Player.DATA_PLAYER_MODE_CUSTOMISATION).intValue() & modelPart.getMask()) == modelPart.getMask();
     }
 
     @Override
@@ -2194,7 +2194,7 @@ public abstract class Player extends LivingEntity {
 
     @Override
     public HumanoidArm getMainArm() {
-        return ((Byte) this.entityData.get(Player.DATA_PLAYER_MAIN_HAND)).intValue() == 0 ? HumanoidArm.LEFT : HumanoidArm.RIGHT;
+        return this.entityData.get(Player.DATA_PLAYER_MAIN_HAND).intValue() == 0 ? HumanoidArm.LEFT : HumanoidArm.RIGHT;
     }
 
     public void setMainArm(HumanoidArm arm) {
@@ -2202,7 +2202,7 @@ public abstract class Player extends LivingEntity {
     }
 
     public CompoundTag getShoulderEntityLeft() {
-        return (CompoundTag) this.entityData.get(Player.DATA_SHOULDER_LEFT);
+        return this.entityData.get(Player.DATA_SHOULDER_LEFT);
     }
 
     public void setShoulderEntityLeft(CompoundTag entityNbt) {
@@ -2210,7 +2210,7 @@ public abstract class Player extends LivingEntity {
     }
 
     public CompoundTag getShoulderEntityRight() {
-        return (CompoundTag) this.entityData.get(Player.DATA_SHOULDER_RIGHT);
+        return this.entityData.get(Player.DATA_SHOULDER_RIGHT);
     }
 
     public void setShoulderEntityRight(CompoundTag entityNbt) {
@@ -2255,7 +2255,7 @@ public abstract class Player extends LivingEntity {
 
     @Override
     public EntityDimensions getDimensions(Pose pose) {
-        return (EntityDimensions) Player.POSES.getOrDefault(pose, Player.STANDING_DIMENSIONS);
+        return Player.POSES.getOrDefault(pose, Player.STANDING_DIMENSIONS);
     }
 
     @Override
@@ -2304,7 +2304,7 @@ public abstract class Player extends LivingEntity {
     public ItemStack eat(Level world, ItemStack stack) {
         this.getFoodData().eat(stack.getItem(), stack);
         this.awardStat(Stats.ITEM_USED.get(stack.getItem()));
-        world.playSound((Player) null, this.getX(), this.getY(), this.getZ(), SoundEvents.PLAYER_BURP, SoundSource.PLAYERS, 0.5F, world.random.nextFloat() * 0.1F + 0.9F);
+        world.playSound(null, this.getX(), this.getY(), this.getZ(), SoundEvents.PLAYER_BURP, SoundSource.PLAYERS, 0.5F, world.random.nextFloat() * 0.1F + 0.9F);
         if (this instanceof ServerPlayer) {
             CriteriaTriggers.CONSUME_ITEM.trigger((ServerPlayer) this, stack);
         }
diff --git a/src/main/java/net/minecraft/world/entity/projectile/AbstractArrow.java b/src/main/java/net/minecraft/world/entity/projectile/AbstractArrow.java
index e82ce610b0af421b891679b41c1926e6e72df43a..4cda39d3ec65037efc5c132743a782fdcc67e9ea 100644
--- a/src/main/java/net/minecraft/world/entity/projectile/AbstractArrow.java
+++ b/src/main/java/net/minecraft/world/entity/projectile/AbstractArrow.java
@@ -278,7 +278,7 @@ public abstract class AbstractArrow extends Projectile {
                 f = this.getWaterInertia();
             }
 
-            this.setDeltaMovement(vec3d.scale((double) f));
+            this.setDeltaMovement(vec3d.scale(f));
             if (!this.isNoGravity() && !flag) {
                 Vec3 vec3d3 = this.getDeltaMovement();
 
@@ -311,7 +311,7 @@ public abstract class AbstractArrow extends Projectile {
         this.inGround = false;
         Vec3 vec3d = this.getDeltaMovement();
 
-        this.setDeltaMovement(vec3d.multiply((double) (this.random.nextFloat() * 0.2F), (double) (this.random.nextFloat() * 0.2F), (double) (this.random.nextFloat() * 0.2F)));
+        this.setDeltaMovement(vec3d.multiply(this.random.nextFloat() * 0.2F, this.random.nextFloat() * 0.2F, this.random.nextFloat() * 0.2F));
         this.life = 0;
     }
 
@@ -368,7 +368,7 @@ public abstract class AbstractArrow extends Projectile {
         }
 
         if (this.isCritArrow()) {
-            long j = (long) this.random.nextInt(i / 2 + 2);
+            long j = this.random.nextInt(i / 2 + 2);
 
             i = (int) Math.min(j + (long) i, 2147483647L);
         }
@@ -438,9 +438,9 @@ public abstract class AbstractArrow extends Projectile {
                     ServerPlayer entityplayer = (ServerPlayer) entity1;
 
                     if (this.piercedAndKilledEntities != null && this.shotFromCrossbow()) {
-                        CriteriaTriggers.KILLED_BY_CROSSBOW.trigger(entityplayer, (Collection) this.piercedAndKilledEntities);
+                        CriteriaTriggers.KILLED_BY_CROSSBOW.trigger(entityplayer, this.piercedAndKilledEntities);
                     } else if (!entity.isAlive() && this.shotFromCrossbow()) {
-                        CriteriaTriggers.KILLED_BY_CROSSBOW.trigger(entityplayer, (Collection) List.of(entity));
+                        CriteriaTriggers.KILLED_BY_CROSSBOW.trigger(entityplayer, List.of(entity));
                     }
                 }
             }
@@ -635,7 +635,7 @@ public abstract class AbstractArrow extends Projectile {
     }
 
     private void setFlag(int index, boolean flag) {
-        byte b0 = ((Byte) this.entityData.get(AbstractArrow.ID_FLAGS)).byteValue();
+        byte b0 = this.entityData.get(AbstractArrow.ID_FLAGS).byteValue();
 
         if (flag) {
             this.entityData.set(AbstractArrow.ID_FLAGS, Byte.valueOf((byte) (b0 | index)));
@@ -646,19 +646,19 @@ public abstract class AbstractArrow extends Projectile {
     }
 
     public boolean isCritArrow() {
-        byte b0 = ((Byte) this.entityData.get(AbstractArrow.ID_FLAGS)).byteValue();
+        byte b0 = this.entityData.get(AbstractArrow.ID_FLAGS).byteValue();
 
         return (b0 & 1) != 0;
     }
 
     public boolean shotFromCrossbow() {
-        byte b0 = ((Byte) this.entityData.get(AbstractArrow.ID_FLAGS)).byteValue();
+        byte b0 = this.entityData.get(AbstractArrow.ID_FLAGS).byteValue();
 
         return (b0 & 4) != 0;
     }
 
     public byte getPierceLevel() {
-        return ((Byte) this.entityData.get(AbstractArrow.PIERCE_LEVEL)).byteValue();
+        return this.entityData.get(AbstractArrow.PIERCE_LEVEL).byteValue();
     }
 
     public void setEnchantmentEffectsFromEntity(LivingEntity entity, float damageModifier) {
@@ -690,7 +690,7 @@ public abstract class AbstractArrow extends Projectile {
     }
 
     public boolean isNoPhysics() {
-        return !this.level.isClientSide ? this.noPhysics : (((Byte) this.entityData.get(AbstractArrow.ID_FLAGS)).intValue() & 2) != 0;
+        return !this.level.isClientSide ? this.noPhysics : (this.entityData.get(AbstractArrow.ID_FLAGS).intValue() & 2) != 0;
     }
 
     public void setShotFromCrossbow(boolean shotFromCrossbow) {
diff --git a/src/main/java/net/minecraft/world/entity/projectile/AbstractHurtingProjectile.java b/src/main/java/net/minecraft/world/entity/projectile/AbstractHurtingProjectile.java
index 8b809adb3766be27362dd4409de3d27ba38ae3a6..20e79a990184daa40fbc57e2acc09269b84ce3a9 100644
--- a/src/main/java/net/minecraft/world/entity/projectile/AbstractHurtingProjectile.java
+++ b/src/main/java/net/minecraft/world/entity/projectile/AbstractHurtingProjectile.java
@@ -112,7 +112,7 @@ public abstract class AbstractHurtingProjectile extends Projectile {
                 f = 0.8F;
             }
 
-            this.setDeltaMovement(vec3d.add(this.xPower, this.yPower, this.zPower).scale((double) f));
+            this.setDeltaMovement(vec3d.add(this.xPower, this.yPower, this.zPower).scale(f));
             this.level.addParticle(this.getTrailParticle(), d0, d1 + 0.5D, d2, 0.0D, 0.0D, 0.0D);
             this.setPos(d0, d1, d2);
         }
diff --git a/src/main/java/net/minecraft/world/entity/projectile/Arrow.java b/src/main/java/net/minecraft/world/entity/projectile/Arrow.java
index 1a9bdd8c27611611d3593ad8700463e647ae82f2..cd744bdacb540189d75775dbe203dde93f3119a5 100644
--- a/src/main/java/net/minecraft/world/entity/projectile/Arrow.java
+++ b/src/main/java/net/minecraft/world/entity/projectile/Arrow.java
@@ -91,14 +91,14 @@ public class Arrow extends AbstractArrow {
         if (this.potion == Potions.EMPTY && this.effects.isEmpty()) {
             this.entityData.set(Arrow.ID_EFFECT_COLOR, Integer.valueOf(-1));
         } else {
-            this.entityData.set(Arrow.ID_EFFECT_COLOR, Integer.valueOf(PotionUtils.getColor((Collection) PotionUtils.getAllEffects(this.potion, this.effects))));
+            this.entityData.set(Arrow.ID_EFFECT_COLOR, Integer.valueOf(PotionUtils.getColor(PotionUtils.getAllEffects(this.potion, this.effects))));
         }
 
     }
 
     public void addEffect(MobEffectInstance effect) {
         this.effects.add(effect);
-        this.getEntityData().set(Arrow.ID_EFFECT_COLOR, Integer.valueOf(PotionUtils.getColor((Collection) PotionUtils.getAllEffects(this.potion, this.effects))));
+        this.getEntityData().set(Arrow.ID_EFFECT_COLOR, Integer.valueOf(PotionUtils.getColor(PotionUtils.getAllEffects(this.potion, this.effects))));
     }
 
     @Override
@@ -144,7 +144,7 @@ public class Arrow extends AbstractArrow {
 
     // CraftBukkit start accessor methods
     public void refreshEffects() {
-        this.getEntityData().set(Arrow.ID_EFFECT_COLOR, Integer.valueOf(PotionUtils.getColor((Collection) PotionUtils.getAllEffects(this.potion, (Collection) this.effects))));
+        this.getEntityData().set(Arrow.ID_EFFECT_COLOR, Integer.valueOf(PotionUtils.getColor(PotionUtils.getAllEffects(this.potion, this.effects))));
     }
 
     public String getPotionType() {
@@ -153,7 +153,7 @@ public class Arrow extends AbstractArrow {
 
     public void setPotionType(String string) {
         this.potion = BuiltInRegistries.POTION.get(new net.minecraft.resources.ResourceLocation(string));
-        this.getEntityData().set(Arrow.ID_EFFECT_COLOR, Integer.valueOf(PotionUtils.getColor((Collection) PotionUtils.getAllEffects(this.potion, (Collection) this.effects))));
+        this.getEntityData().set(Arrow.ID_EFFECT_COLOR, Integer.valueOf(PotionUtils.getColor(PotionUtils.getAllEffects(this.potion, this.effects))));
     }
 
     public boolean isTipped() {
@@ -162,7 +162,7 @@ public class Arrow extends AbstractArrow {
     // CraftBukkit end
 
     public int getColor() {
-        return ((Integer) this.entityData.get(Arrow.ID_EFFECT_COLOR)).intValue();
+        return this.entityData.get(Arrow.ID_EFFECT_COLOR).intValue();
     }
 
     public void setFixedColor(int color) {
diff --git a/src/main/java/net/minecraft/world/entity/projectile/EvokerFangs.java b/src/main/java/net/minecraft/world/entity/projectile/EvokerFangs.java
index c7265a650a5d6bdc42d41c5c90cad401d7f1c99d..84a7e5095c248307855fbf30911c7da56551e7bf 100644
--- a/src/main/java/net/minecraft/world/entity/projectile/EvokerFangs.java
+++ b/src/main/java/net/minecraft/world/entity/projectile/EvokerFangs.java
@@ -132,7 +132,7 @@ public class EvokerFangs extends Entity {
                 target.hurt(DamageSource.MAGIC, 6.0F);
                 org.bukkit.craftbukkit.event.CraftEventFactory.entityDamage = null; // CraftBukkit
             } else {
-                if (entityliving1.isAlliedTo((Entity) target)) {
+                if (entityliving1.isAlliedTo(target)) {
                     return;
                 }
 
diff --git a/src/main/java/net/minecraft/world/entity/projectile/EyeOfEnder.java b/src/main/java/net/minecraft/world/entity/projectile/EyeOfEnder.java
index 855e85e8d0d1f15304b0a42b46ef845325e103aa..0e6a031f6be5364b4db947ad81ac1a63353b64c2 100644
--- a/src/main/java/net/minecraft/world/entity/projectile/EyeOfEnder.java
+++ b/src/main/java/net/minecraft/world/entity/projectile/EyeOfEnder.java
@@ -37,7 +37,7 @@ public class EyeOfEnder extends Entity implements ItemSupplier {
 
     public void setItem(ItemStack stack) {
         if (true || !stack.is(Items.ENDER_EYE) || stack.hasTag()) { // CraftBukkit - always allow item changing
-            this.getEntityData().set(EyeOfEnder.DATA_ITEM_STACK, (ItemStack) Util.make(stack.copy(), (itemstack1) -> {
+            this.getEntityData().set(EyeOfEnder.DATA_ITEM_STACK, Util.make(stack.copy(), (itemstack1) -> {
                 itemstack1.setCount(1);
             }));
         }
@@ -45,7 +45,7 @@ public class EyeOfEnder extends Entity implements ItemSupplier {
     }
 
     private ItemStack getItemRaw() {
-        return (ItemStack) this.getEntityData().get(EyeOfEnder.DATA_ITEM_STACK);
+        return this.getEntityData().get(EyeOfEnder.DATA_ITEM_STACK);
     }
 
     @Override
@@ -78,9 +78,9 @@ public class EyeOfEnder extends Entity implements ItemSupplier {
     }
     public void signalTo(BlockPos pos, boolean update) {
         // Paper end
-        double d0 = (double) pos.getX();
+        double d0 = pos.getX();
         int i = pos.getY();
-        double d1 = (double) pos.getZ();
+        double d1 = pos.getZ();
         double d2 = d0 - this.getX();
         double d3 = d1 - this.getZ();
         double d4 = Math.sqrt(d2 * d2 + d3 * d3);
@@ -91,7 +91,7 @@ public class EyeOfEnder extends Entity implements ItemSupplier {
             this.ty = this.getY() + 8.0D;
         } else {
             this.tx = d0;
-            this.ty = (double) i;
+            this.ty = i;
             this.tz = d1;
         }
 
@@ -131,7 +131,7 @@ public class EyeOfEnder extends Entity implements ItemSupplier {
             double d5 = this.tz - d2;
             float f = (float) Math.sqrt(d4 * d4 + d5 * d5);
             float f1 = (float) Mth.atan2(d5, d4);
-            double d6 = Mth.lerp(0.0025D, d3, (double) f);
+            double d6 = Mth.lerp(0.0025D, d3, f);
             double d7 = vec3d.y;
 
             if (f < 1.0F) {
@@ -141,7 +141,7 @@ public class EyeOfEnder extends Entity implements ItemSupplier {
 
             int i = this.getY() < this.ty ? 1 : -1;
 
-            vec3d = new Vec3(Math.cos((double) f1) * d6, d7 + ((double) i - d7) * 0.014999999664723873D, Math.sin((double) f1) * d6);
+            vec3d = new Vec3(Math.cos(f1) * d6, d7 + ((double) i - d7) * 0.014999999664723873D, Math.sin(f1) * d6);
             this.setDeltaMovement(vec3d);
         }
 
diff --git a/src/main/java/net/minecraft/world/entity/projectile/Fireball.java b/src/main/java/net/minecraft/world/entity/projectile/Fireball.java
index 7f4e3dfab421591151fda7ec39d9c00b464d62de..17c3420d04dfe2f2c69e3883a915d87e7c5b347d 100644
--- a/src/main/java/net/minecraft/world/entity/projectile/Fireball.java
+++ b/src/main/java/net/minecraft/world/entity/projectile/Fireball.java
@@ -29,7 +29,7 @@ public abstract class Fireball extends AbstractHurtingProjectile implements Item
 
     public void setItem(ItemStack stack) {
         if (true || !stack.is(Items.FIRE_CHARGE) || stack.hasTag()) { // Paper - always allow item changing
-            this.getEntityData().set(Fireball.DATA_ITEM_STACK, (ItemStack) Util.make(stack.copy(), (itemstack1) -> {
+            this.getEntityData().set(Fireball.DATA_ITEM_STACK, Util.make(stack.copy(), (itemstack1) -> {
                 itemstack1.setCount(1);
             }));
         }
@@ -37,7 +37,7 @@ public abstract class Fireball extends AbstractHurtingProjectile implements Item
     }
 
     public ItemStack getItemRaw() {
-        return (ItemStack) this.getEntityData().get(Fireball.DATA_ITEM_STACK);
+        return this.getEntityData().get(Fireball.DATA_ITEM_STACK);
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/entity/projectile/FireworkRocketEntity.java b/src/main/java/net/minecraft/world/entity/projectile/FireworkRocketEntity.java
index df673139ace5a1eb183556253b550f3d6efb86f8..d7bebbf6e7c4b74decaaa21b12a933659703b1de 100644
--- a/src/main/java/net/minecraft/world/entity/projectile/FireworkRocketEntity.java
+++ b/src/main/java/net/minecraft/world/entity/projectile/FireworkRocketEntity.java
@@ -121,7 +121,7 @@ public class FireworkRocketEntity extends Projectile implements ItemSupplier {
 
         if (this.isAttachedToEntity()) {
             if (this.attachedToEntity == null) {
-                ((OptionalInt) this.entityData.get(FireworkRocketEntity.DATA_ATTACHED_TO_TARGET)).ifPresent((i) -> {
+                this.entityData.get(FireworkRocketEntity.DATA_ATTACHED_TO_TARGET).ifPresent((i) -> {
                     Entity entity = this.level.getEntity(i);
 
                     if (entity instanceof LivingEntity) {
@@ -168,7 +168,7 @@ public class FireworkRocketEntity extends Projectile implements ItemSupplier {
 
         this.updateRotation();
         if (this.life == 0 && !this.isSilent()) {
-            this.level.playSound((Player) null, this.getX(), this.getY(), this.getZ(), SoundEvents.FIREWORK_ROCKET_LAUNCH, SoundSource.AMBIENT, 3.0F, 1.0F);
+            this.level.playSound(null, this.getX(), this.getY(), this.getZ(), SoundEvents.FIREWORK_ROCKET_LAUNCH, SoundSource.AMBIENT, 3.0F, 1.0F);
         }
 
         ++this.life;
@@ -222,7 +222,7 @@ public class FireworkRocketEntity extends Projectile implements ItemSupplier {
     }
 
     private boolean hasExplosion() {
-        ItemStack itemstack = (ItemStack) this.entityData.get(FireworkRocketEntity.DATA_ID_FIREWORKS_ITEM);
+        ItemStack itemstack = this.entityData.get(FireworkRocketEntity.DATA_ID_FIREWORKS_ITEM);
         CompoundTag nbttagcompound = itemstack.isEmpty() ? null : itemstack.getTagElement("Fireworks");
         ListTag nbttaglist = nbttagcompound != null ? nbttagcompound.getList("Explosions", 10) : null;
 
@@ -231,7 +231,7 @@ public class FireworkRocketEntity extends Projectile implements ItemSupplier {
 
     private void dealExplosionDamage() {
         float f = 0.0F;
-        ItemStack itemstack = (ItemStack) this.entityData.get(FireworkRocketEntity.DATA_ID_FIREWORKS_ITEM);
+        ItemStack itemstack = this.entityData.get(FireworkRocketEntity.DATA_ID_FIREWORKS_ITEM);
         CompoundTag nbttagcompound = itemstack.isEmpty() ? null : itemstack.getTagElement("Fireworks");
         ListTag nbttaglist = nbttagcompound != null ? nbttagcompound.getList("Explosions", 10) : null;
 
@@ -254,7 +254,7 @@ public class FireworkRocketEntity extends Projectile implements ItemSupplier {
             while (iterator.hasNext()) {
                 LivingEntity entityliving = (LivingEntity) iterator.next();
 
-                if (entityliving != this.attachedToEntity && this.distanceToSqr((Entity) entityliving) <= 25.0D) {
+                if (entityliving != this.attachedToEntity && this.distanceToSqr(entityliving) <= 25.0D) {
                     boolean flag = false;
 
                     for (int i = 0; i < 2; ++i) {
@@ -281,11 +281,11 @@ public class FireworkRocketEntity extends Projectile implements ItemSupplier {
     }
 
     private boolean isAttachedToEntity() {
-        return ((OptionalInt) this.entityData.get(FireworkRocketEntity.DATA_ATTACHED_TO_TARGET)).isPresent();
+        return this.entityData.get(FireworkRocketEntity.DATA_ATTACHED_TO_TARGET).isPresent();
     }
 
     public boolean isShotAtAngle() {
-        return ((Boolean) this.entityData.get(FireworkRocketEntity.DATA_SHOT_AT_ANGLE)).booleanValue();
+        return this.entityData.get(FireworkRocketEntity.DATA_SHOT_AT_ANGLE).booleanValue();
     }
 
     @Override
@@ -296,7 +296,7 @@ public class FireworkRocketEntity extends Projectile implements ItemSupplier {
                     this.level.addParticle(ParticleTypes.POOF, this.getX(), this.getY(), this.getZ(), this.random.nextGaussian() * 0.05D, 0.005D, this.random.nextGaussian() * 0.05D);
                 }
             } else {
-                ItemStack itemstack = (ItemStack) this.entityData.get(FireworkRocketEntity.DATA_ID_FIREWORKS_ITEM);
+                ItemStack itemstack = this.entityData.get(FireworkRocketEntity.DATA_ID_FIREWORKS_ITEM);
                 CompoundTag nbttagcompound = itemstack.isEmpty() ? null : itemstack.getTagElement("Fireworks");
                 Vec3 vec3d = this.getDeltaMovement();
 
@@ -312,13 +312,13 @@ public class FireworkRocketEntity extends Projectile implements ItemSupplier {
         super.addAdditionalSaveData(nbt);
         nbt.putInt("Life", this.life);
         nbt.putInt("LifeTime", this.lifetime);
-        ItemStack itemstack = (ItemStack) this.entityData.get(FireworkRocketEntity.DATA_ID_FIREWORKS_ITEM);
+        ItemStack itemstack = this.entityData.get(FireworkRocketEntity.DATA_ID_FIREWORKS_ITEM);
 
         if (!itemstack.isEmpty()) {
             nbt.put("FireworksItem", itemstack.save(new CompoundTag()));
         }
 
-        nbt.putBoolean("ShotAtAngle", ((Boolean) this.entityData.get(FireworkRocketEntity.DATA_SHOT_AT_ANGLE)).booleanValue());
+        nbt.putBoolean("ShotAtAngle", this.entityData.get(FireworkRocketEntity.DATA_SHOT_AT_ANGLE).booleanValue());
         // Paper start
         if (this.spawningEntity != null) {
             nbt.putUUID("SpawningEntity", this.spawningEntity);
@@ -349,7 +349,7 @@ public class FireworkRocketEntity extends Projectile implements ItemSupplier {
 
     @Override
     public ItemStack getItem() {
-        ItemStack itemstack = (ItemStack) this.entityData.get(FireworkRocketEntity.DATA_ID_FIREWORKS_ITEM);
+        ItemStack itemstack = this.entityData.get(FireworkRocketEntity.DATA_ID_FIREWORKS_ITEM);
 
         return itemstack.isEmpty() ? new ItemStack(Items.FIREWORK_ROCKET) : itemstack;
     }
diff --git a/src/main/java/net/minecraft/world/entity/projectile/FishingHook.java b/src/main/java/net/minecraft/world/entity/projectile/FishingHook.java
index f0740092988834bd444d66b95a5028f059f8de79..dd0a67078a5e651e1ffb7719530be5b404838794 100644
--- a/src/main/java/net/minecraft/world/entity/projectile/FishingHook.java
+++ b/src/main/java/net/minecraft/world/entity/projectile/FishingHook.java
@@ -110,7 +110,7 @@ public class FishingHook extends Projectile {
         double d2 = thrower.getZ() - (double) f2 * 0.3D;
 
         this.moveTo(d0, d1, d2, f1, f);
-        Vec3 vec3d = new Vec3((double) (-f3), (double) Mth.clamp(-(f5 / f4), -5.0F, 5.0F), (double) (-f2));
+        Vec3 vec3d = new Vec3(-f3, Mth.clamp(-(f5 / f4), -5.0F, 5.0F), -f2);
         double d3 = vec3d.length();
 
         vec3d = vec3d.multiply(0.6D / d3 + this.random.triangle(0.5D, 0.0103365D), 0.6D / d3 + this.random.triangle(0.5D, 0.0103365D), 0.6D / d3 + this.random.triangle(0.5D, 0.0103365D));
@@ -130,15 +130,15 @@ public class FishingHook extends Projectile {
     @Override
     public void onSyncedDataUpdated(EntityDataAccessor<?> data) {
         if (FishingHook.DATA_HOOKED_ENTITY.equals(data)) {
-            int i = ((Integer) this.getEntityData().get(FishingHook.DATA_HOOKED_ENTITY)).intValue();
+            int i = this.getEntityData().get(FishingHook.DATA_HOOKED_ENTITY).intValue();
 
             this.hookedIn = i > 0 ? this.level.getEntity(i - 1) : null;
         }
 
         if (FishingHook.DATA_BITING.equals(data)) {
-            this.biting = ((Boolean) this.getEntityData().get(FishingHook.DATA_BITING)).booleanValue();
+            this.biting = this.getEntityData().get(FishingHook.DATA_BITING).booleanValue();
             if (this.biting) {
-                this.setDeltaMovement(this.getDeltaMovement().x, (double) (-0.4F * Mth.nextFloat(this.syncronizedRandom, 0.6F, 1.0F)), this.getDeltaMovement().z);
+                this.setDeltaMovement(this.getDeltaMovement().x, -0.4F * Mth.nextFloat(this.syncronizedRandom, 0.6F, 1.0F), this.getDeltaMovement().z);
             }
         }
 
@@ -204,7 +204,7 @@ public class FishingHook extends Projectile {
                         if (!this.hookedIn.isRemoved() && this.hookedIn.level.dimension() == this.level.dimension()) {
                             this.setPos(this.hookedIn.getX(), this.hookedIn.getY(0.8D), this.hookedIn.getZ());
                         } else {
-                            this.setHookedEntity((Entity) null);
+                            this.setHookedEntity(null);
                             this.currentState = FishingHook.FishHookState.FLYING;
                         }
                     }
@@ -265,7 +265,7 @@ public class FishingHook extends Projectile {
         boolean flag = itemstack.is(Items.FISHING_ROD);
         boolean flag1 = itemstack1.is(Items.FISHING_ROD);
 
-        if (!player.isRemoved() && player.isAlive() && (flag || flag1) && this.distanceToSqr((Entity) player) <= 1024.0D) {
+        if (!player.isRemoved() && player.isAlive() && (flag || flag1) && this.distanceToSqr(player) <= 1024.0D) {
             return false;
         } else {
             this.discard();
@@ -345,19 +345,19 @@ public class FishingHook extends Projectile {
                     f1 = Mth.sin(f);
                     f2 = Mth.cos(f);
                     d0 = this.getX() + (double) (f1 * (float) this.timeUntilHooked * 0.1F);
-                    d1 = (double) ((float) Mth.floor(this.getY()) + 1.0F);
+                    d1 = (float) Mth.floor(this.getY()) + 1.0F;
                     d2 = this.getZ() + (double) (f2 * (float) this.timeUntilHooked * 0.1F);
                     iblockdata = worldserver.getBlockState(new BlockPos(d0, d1 - 1.0D, d2));
                     if (iblockdata.is(Blocks.WATER)) {
                         if (this.random.nextFloat() < 0.15F) {
-                            worldserver.sendParticles(ParticleTypes.BUBBLE, d0, d1 - 0.10000000149011612D, d2, 1, (double) f1, 0.1D, (double) f2, 0.0D);
+                            worldserver.sendParticles(ParticleTypes.BUBBLE, d0, d1 - 0.10000000149011612D, d2, 1, f1, 0.1D, f2, 0.0D);
                         }
 
                         float f3 = f1 * 0.04F;
                         float f4 = f2 * 0.04F;
 
-                        worldserver.sendParticles(ParticleTypes.FISHING, d0, d1, d2, 0, (double) f4, 0.01D, (double) (-f3), 1.0D);
-                        worldserver.sendParticles(ParticleTypes.FISHING, d0, d1, d2, 0, (double) (-f4), 0.01D, (double) f3, 1.0D);
+                        worldserver.sendParticles(ParticleTypes.FISHING, d0, d1, d2, 0, f4, 0.01D, -f3, 1.0D);
+                        worldserver.sendParticles(ParticleTypes.FISHING, d0, d1, d2, 0, -f4, 0.01D, f3, 1.0D);
                     }
                 } else {
                     // CraftBukkit start
@@ -370,8 +370,8 @@ public class FishingHook extends Projectile {
                     this.playSound(SoundEvents.FISHING_BOBBER_SPLASH, 0.25F, 1.0F + (this.random.nextFloat() - this.random.nextFloat()) * 0.4F);
                     double d3 = this.getY() + 0.5D;
 
-                    worldserver.sendParticles(ParticleTypes.BUBBLE, this.getX(), d3, this.getZ(), (int) (1.0F + this.getBbWidth() * 20.0F), (double) this.getBbWidth(), 0.0D, (double) this.getBbWidth(), 0.20000000298023224D);
-                    worldserver.sendParticles(ParticleTypes.FISHING, this.getX(), d3, this.getZ(), (int) (1.0F + this.getBbWidth() * 20.0F), (double) this.getBbWidth(), 0.0D, (double) this.getBbWidth(), 0.20000000298023224D);
+                    worldserver.sendParticles(ParticleTypes.BUBBLE, this.getX(), d3, this.getZ(), (int) (1.0F + this.getBbWidth() * 20.0F), this.getBbWidth(), 0.0D, this.getBbWidth(), 0.20000000298023224D);
+                    worldserver.sendParticles(ParticleTypes.FISHING, this.getX(), d3, this.getZ(), (int) (1.0F + this.getBbWidth() * 20.0F), this.getBbWidth(), 0.0D, this.getBbWidth(), 0.20000000298023224D);
                     this.nibble = Mth.nextInt(this.random, 20, 40);
                     this.getEntityData().set(FishingHook.DATA_BITING, Boolean.TRUE);
                 }
@@ -390,7 +390,7 @@ public class FishingHook extends Projectile {
                     f1 = Mth.nextFloat(this.random, 0.0F, 360.0F) * 0.017453292F;
                     f2 = Mth.nextFloat(this.random, 25.0F, 60.0F);
                     d0 = this.getX() + (double) (Mth.sin(f1) * f2) * 0.1D;
-                    d1 = (double) ((float) Mth.floor(this.getY()) + 1.0F);
+                    d1 = (float) Mth.floor(this.getY()) + 1.0F;
                     d2 = this.getZ() + (double) (Mth.cos(f1) * f2) * 0.1D;
                     iblockdata = worldserver.getBlockState(new BlockPos(d0, d1 - 1.0D, d2));
                     if (iblockdata.is(Blocks.WATER)) {
@@ -439,9 +439,9 @@ public class FishingHook extends Projectile {
     }
 
     private FishingHook.OpenWaterType getOpenWaterTypeForArea(BlockPos start, BlockPos end) {
-        return (FishingHook.OpenWaterType) BlockPos.betweenClosedStream(start, end).map(this::getOpenWaterTypeForBlock).reduce((entityfishinghook_waterposition, entityfishinghook_waterposition1) -> {
-            return entityfishinghook_waterposition == entityfishinghook_waterposition1 ? entityfishinghook_waterposition : FishingHook.OpenWaterType.INVALID;
-        }).orElse(FishingHook.OpenWaterType.INVALID);
+        return BlockPos.betweenClosedStream(start, end).map(this::getOpenWaterTypeForBlock).reduce((entityfishinghook_waterposition, entityfishinghook_waterposition1) -> {
+            return entityfishinghook_waterposition == entityfishinghook_waterposition1 ? entityfishinghook_waterposition : OpenWaterType.INVALID;
+        }).orElse(OpenWaterType.INVALID);
     }
 
     private FishingHook.OpenWaterType getOpenWaterTypeForBlock(BlockPos pos) {
@@ -589,13 +589,13 @@ public class FishingHook extends Projectile {
 
     @Override
     public void remove(Entity.RemovalReason reason) {
-        this.updateOwnerInfo((FishingHook) null);
+        this.updateOwnerInfo(null);
         super.remove(reason);
     }
 
     @Override
     public void onClientRemoval() {
-        this.updateOwnerInfo((FishingHook) null);
+        this.updateOwnerInfo(null);
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/entity/projectile/Projectile.java b/src/main/java/net/minecraft/world/entity/projectile/Projectile.java
index 66476b33cede1e44db5ec166a0cea81f82ffe47a..61012492145c8e7dfa152c0d201abbd53a1470ac 100644
--- a/src/main/java/net/minecraft/world/entity/projectile/Projectile.java
+++ b/src/main/java/net/minecraft/world/entity/projectile/Projectile.java
@@ -77,7 +77,7 @@ public abstract class Projectile extends Entity {
     }
 
     public Entity getEffectSource() {
-        return (Entity) MoreObjects.firstNonNull(this.getOwner(), this);
+        return MoreObjects.firstNonNull(this.getOwner(), this);
     }
 
     @Override
@@ -126,7 +126,7 @@ public abstract class Projectile extends Entity {
         Entity entity = this.getOwner();
 
         if (entity != null) {
-            Iterator iterator = this.level.getEntities((Entity) this, this.getBoundingBox().expandTowards(this.getDeltaMovement()).inflate(1.0D), (entity1) -> {
+            Iterator iterator = this.level.getEntities(this, this.getBoundingBox().expandTowards(this.getDeltaMovement()).inflate(1.0D), (entity1) -> {
                 return !entity1.isSpectator() && entity1.isPickable();
             }).iterator();
 
@@ -143,7 +143,7 @@ public abstract class Projectile extends Entity {
     }
 
     public void shoot(double x, double y, double z, float speed, float divergence) {
-        Vec3 vec3d = (new Vec3(x, y, z)).normalize().add(this.random.triangle(0.0D, 0.0172275D * (double) divergence), this.random.triangle(0.0D, 0.0172275D * (double) divergence), this.random.triangle(0.0D, 0.0172275D * (double) divergence)).scale((double) speed);
+        Vec3 vec3d = (new Vec3(x, y, z)).normalize().add(this.random.triangle(0.0D, 0.0172275D * (double) divergence), this.random.triangle(0.0D, 0.0172275D * (double) divergence), this.random.triangle(0.0D, 0.0172275D * (double) divergence)).scale(speed);
 
         this.setDeltaMovement(vec3d);
         double d3 = vec3d.horizontalDistance();
@@ -159,7 +159,7 @@ public abstract class Projectile extends Entity {
         float f6 = -Mth.sin((pitch + roll) * 0.017453292F);
         float f7 = Mth.cos(yaw * 0.017453292F) * Mth.cos(pitch * 0.017453292F);
 
-        this.shoot((double) f5, (double) f6, (double) f7, speed, divergence);
+        this.shoot(f5, f6, f7, speed, divergence);
         Vec3 vec3d = shooter.getDeltaMovement();
 
         if (!shooter.level.paperConfig().misc.disableRelativeProjectileVelocity) this.setDeltaMovement(this.getDeltaMovement().add(vec3d.x, shooter.isOnGround() ? 0.0D : vec3d.y, vec3d.z)); // Paper - allow disabling relative velocity
@@ -180,7 +180,7 @@ public abstract class Projectile extends Entity {
 
         if (movingobjectposition_enummovingobjecttype == HitResult.Type.ENTITY) {
             this.onHitEntity((EntityHitResult) hitResult);
-            this.level.gameEvent(GameEvent.PROJECTILE_LAND, hitResult.getLocation(), GameEvent.Context.of(this, (BlockState) null));
+            this.level.gameEvent(GameEvent.PROJECTILE_LAND, hitResult.getLocation(), GameEvent.Context.of(this, null));
         } else if (movingobjectposition_enummovingobjecttype == HitResult.Type.BLOCK) {
             BlockHitResult movingobjectpositionblock = (BlockHitResult) hitResult;
 
diff --git a/src/main/java/net/minecraft/world/entity/projectile/ShulkerBullet.java b/src/main/java/net/minecraft/world/entity/projectile/ShulkerBullet.java
index a89cbcb913628eaaf107f49520f6aea7ffcc9446..e764197e4a4bd6256551b3b8fa289bc31068d8cf 100644
--- a/src/main/java/net/minecraft/world/entity/projectile/ShulkerBullet.java
+++ b/src/main/java/net/minecraft/world/entity/projectile/ShulkerBullet.java
@@ -175,7 +175,7 @@ public class ShulkerBullet extends Projectile {
                     enumdirection = Direction.getRandom(this.random);
                 }
             } else {
-                enumdirection = (Direction) list.get(this.random.nextInt(list.size()));
+                enumdirection = list.get(this.random.nextInt(list.size()));
             }
 
             d1 = this.getX() + (double) enumdirection.getStepX();
@@ -304,7 +304,7 @@ public class ShulkerBullet extends Projectile {
         if (flag) {
             this.doEnchantDamageEffects(entityliving, entity);
             if (entity instanceof LivingEntity) {
-                ((LivingEntity) entity).addEffect(new MobEffectInstance(MobEffects.LEVITATION, 200), (Entity) MoreObjects.firstNonNull(entity1, this), org.bukkit.event.entity.EntityPotionEffectEvent.Cause.ATTACK); // CraftBukkit
+                ((LivingEntity) entity).addEffect(new MobEffectInstance(MobEffects.LEVITATION, 200), MoreObjects.firstNonNull(entity1, this), org.bukkit.event.entity.EntityPotionEffectEvent.Cause.ATTACK); // CraftBukkit
             }
         }
 
diff --git a/src/main/java/net/minecraft/world/entity/projectile/SmallFireball.java b/src/main/java/net/minecraft/world/entity/projectile/SmallFireball.java
index 00ac1cdc4734cc57f15433c5c6e7a3a545739d33..815f1e659db4afde450f5e69d66750fa77bdef22 100644
--- a/src/main/java/net/minecraft/world/entity/projectile/SmallFireball.java
+++ b/src/main/java/net/minecraft/world/entity/projectile/SmallFireball.java
@@ -42,7 +42,7 @@ public class SmallFireball extends Fireball {
             int i = entity.getRemainingFireTicks();
 
             // CraftBukkit start - Entity damage by entity event + combust event
-            EntityCombustByEntityEvent event = new EntityCombustByEntityEvent((org.bukkit.entity.Projectile) this.getBukkitEntity(), entity.getBukkitEntity(), 5);
+            EntityCombustByEntityEvent event = new EntityCombustByEntityEvent(this.getBukkitEntity(), entity.getBukkitEntity(), 5);
             entity.level.getCraftServer().getPluginManager().callEvent(event);
 
             if (!event.isCancelled()) {
diff --git a/src/main/java/net/minecraft/world/entity/projectile/ThrowableItemProjectile.java b/src/main/java/net/minecraft/world/entity/projectile/ThrowableItemProjectile.java
index 74dccb5151a021af8b2e274f665447f54c4d0364..0edcdda852e3a5d527881ce29e6db9fac975236b 100644
--- a/src/main/java/net/minecraft/world/entity/projectile/ThrowableItemProjectile.java
+++ b/src/main/java/net/minecraft/world/entity/projectile/ThrowableItemProjectile.java
@@ -29,7 +29,7 @@ public abstract class ThrowableItemProjectile extends ThrowableProjectile implem
 
     public void setItem(ItemStack item) {
         if (!item.is(this.getDefaultItem()) || item.hasTag()) {
-            this.getEntityData().set(ThrowableItemProjectile.DATA_ITEM_STACK, (ItemStack) Util.make(item.copy(), (itemstack1) -> {
+            this.getEntityData().set(ThrowableItemProjectile.DATA_ITEM_STACK, Util.make(item.copy(), (itemstack1) -> {
                 if (!itemstack1.isEmpty()) itemstack1.setCount(1); // CraftBukkit
             }));
         }
@@ -45,7 +45,7 @@ public abstract class ThrowableItemProjectile extends ThrowableProjectile implem
     // CraftBukkit end
 
     public ItemStack getItemRaw() {
-        return (ItemStack) this.getEntityData().get(ThrowableItemProjectile.DATA_ITEM_STACK);
+        return this.getEntityData().get(ThrowableItemProjectile.DATA_ITEM_STACK);
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/entity/projectile/ThrowableProjectile.java b/src/main/java/net/minecraft/world/entity/projectile/ThrowableProjectile.java
index 88181c59e604ba3b132b9e695cef5eaf5b836029..5702b74230d1b80bc8e4c1491ca3c3fc1d27f8d9 100644
--- a/src/main/java/net/minecraft/world/entity/projectile/ThrowableProjectile.java
+++ b/src/main/java/net/minecraft/world/entity/projectile/ThrowableProjectile.java
@@ -90,7 +90,7 @@ public abstract class ThrowableProjectile extends Projectile {
             f = 0.99F;
         }
 
-        this.setDeltaMovement(vec3d.scale((double) f));
+        this.setDeltaMovement(vec3d.scale(f));
         if (!this.isNoGravity()) {
             Vec3 vec3d1 = this.getDeltaMovement();
 
diff --git a/src/main/java/net/minecraft/world/entity/projectile/ThrownEnderpearl.java b/src/main/java/net/minecraft/world/entity/projectile/ThrownEnderpearl.java
index f224ebbc0efefddede43d87f0300c014077b9931..b5d242d57fcd97b91e6a7847173b60c298a82a5f 100644
--- a/src/main/java/net/minecraft/world/entity/projectile/ThrownEnderpearl.java
+++ b/src/main/java/net/minecraft/world/entity/projectile/ThrownEnderpearl.java
@@ -70,7 +70,7 @@ public class ThrownEnderpearl extends ThrowableItemProjectile {
 
                     if (!teleEvent.isCancelled() && !entityplayer.connection.isDisconnected()) {
                         if (this.random.nextFloat() < 0.05F && this.level.getGameRules().getBoolean(GameRules.RULE_DOMOBSPAWNING)) {
-                            Endermite entityendermite = (Endermite) EntityType.ENDERMITE.create(this.level);
+                            Endermite entityendermite = EntityType.ENDERMITE.create(this.level);
 
                             if (entityendermite != null) {
                                 entityendermite.moveTo(entity.getX(), entity.getY(), entity.getZ(), entity.getYRot(), entity.getXRot());
@@ -118,7 +118,7 @@ public class ThrownEnderpearl extends ThrowableItemProjectile {
         Entity entity = this.getOwner();
 
         if (entity != null && destination != null && entity.level.dimension() != destination.dimension()) { // CraftBukkit - SPIGOT-6113
-            this.setOwner((Entity) null);
+            this.setOwner(null);
         }
 
         return super.changeDimension(destination);
diff --git a/src/main/java/net/minecraft/world/entity/projectile/ThrownPotion.java b/src/main/java/net/minecraft/world/entity/projectile/ThrownPotion.java
index f07f1875cca1c245902944852c39b69fdd8f9f22..dc414150070dc8da4b4f5163f591b16a4686d9fe 100644
--- a/src/main/java/net/minecraft/world/entity/projectile/ThrownPotion.java
+++ b/src/main/java/net/minecraft/world/entity/projectile/ThrownPotion.java
@@ -146,7 +146,7 @@ public class ThrownPotion extends ThrowableItemProjectile implements ItemSupplie
             if (entityliving instanceof Axolotl axolotl) {
                 rehydrate.add(((org.bukkit.entity.Axolotl) axolotl.getBukkitEntity()));
             }
-            double d0 = this.distanceToSqr((Entity) entityliving);
+            double d0 = this.distanceToSqr(entityliving);
 
             if (d0 < 16.0D) {
                 if (entityliving.isSensitiveToWater()) {
@@ -193,7 +193,7 @@ public class ThrownPotion extends ThrowableItemProjectile implements ItemSupplie
                 net.minecraft.world.entity.LivingEntity entityliving = (net.minecraft.world.entity.LivingEntity) iterator.next();
 
                 if (entityliving.isAffectedByPotions()) {
-                    double d0 = this.distanceToSqr((Entity) entityliving);
+                    double d0 = this.distanceToSqr(entityliving);
 
                     if (d0 < 16.0D) {
                         // Paper - diff on change, used when calling the splash event for water splash potions
@@ -309,15 +309,15 @@ public class ThrownPotion extends ThrowableItemProjectile implements ItemSupplie
         } else if (AbstractCandleBlock.isLit(iblockdata)) {
             // CraftBukkit start
             if (!CraftEventFactory.callEntityChangeBlockEvent(this, pos, iblockdata.setValue(AbstractCandleBlock.LIT, Boolean.FALSE)).isCancelled()) {
-                AbstractCandleBlock.extinguish((Player) null, iblockdata, this.level, pos);
+                AbstractCandleBlock.extinguish(null, iblockdata, this.level, pos);
             }
             // CraftBukkit end
         } else if (CampfireBlock.isLitCampfire(iblockdata)) {
             // CraftBukkit start
             if (!CraftEventFactory.callEntityChangeBlockEvent(this, pos, iblockdata.setValue(CampfireBlock.LIT, Boolean.FALSE)).isCancelled()) {
-                this.level.levelEvent((Player) null, 1009, pos, 0);
+                this.level.levelEvent(null, 1009, pos, 0);
                 CampfireBlock.dowse(this.getOwner(), this.level, pos, iblockdata);
-                this.level.setBlockAndUpdate(pos, (BlockState) iblockdata.setValue(CampfireBlock.LIT, Boolean.FALSE));
+                this.level.setBlockAndUpdate(pos, iblockdata.setValue(CampfireBlock.LIT, Boolean.FALSE));
             }
             // CraftBukkit end
         }
diff --git a/src/main/java/net/minecraft/world/entity/projectile/ThrownTrident.java b/src/main/java/net/minecraft/world/entity/projectile/ThrownTrident.java
index 464ec3b3683683f8ebecf3d888018732c75f50f8..695e9f1c88898c0c8461cf7e5ab3913e2c75765a 100644
--- a/src/main/java/net/minecraft/world/entity/projectile/ThrownTrident.java
+++ b/src/main/java/net/minecraft/world/entity/projectile/ThrownTrident.java
@@ -58,7 +58,7 @@ public class ThrownTrident extends AbstractArrow {
         }
 
         Entity entity = this.getOwner();
-        byte b0 = ((Byte) this.entityData.get(ThrownTrident.ID_LOYALTY)).byteValue();
+        byte b0 = this.entityData.get(ThrownTrident.ID_LOYALTY).byteValue();
 
         if (b0 > 0 && (this.dealtDamage || this.isNoPhysics()) && entity != null) {
             if (!this.isAcceptibleReturnOwner()) {
@@ -102,7 +102,7 @@ public class ThrownTrident extends AbstractArrow {
     }
 
     public boolean isFoil() {
-        return ((Boolean) this.entityData.get(ThrownTrident.ID_FOIL)).booleanValue();
+        return this.entityData.get(ThrownTrident.ID_FOIL).booleanValue();
     }
 
     // Paper start
@@ -137,7 +137,7 @@ public class ThrownTrident extends AbstractArrow {
         }
 
         Entity entity1 = this.getOwner();
-        DamageSource damagesource = DamageSource.trident(this, (Entity) (entity1 == null ? this : entity1));
+        DamageSource damagesource = DamageSource.trident(this, entity1 == null ? this : entity1);
 
         this.dealtDamage = true;
         SoundEvent soundeffect = SoundEvents.TRIDENT_HIT;
@@ -166,7 +166,7 @@ public class ThrownTrident extends AbstractArrow {
             BlockPos blockposition = entity.blockPosition();
 
             if (this.level.canSeeSky(blockposition)) {
-                LightningBolt entitylightning = (LightningBolt) EntityType.LIGHTNING_BOLT.create(this.level);
+                LightningBolt entitylightning = EntityType.LIGHTNING_BOLT.create(this.level);
 
                 if (entitylightning != null) {
                     entitylightning.moveTo(Vec3.atBottomCenterOf(blockposition));
@@ -223,7 +223,7 @@ public class ThrownTrident extends AbstractArrow {
 
     @Override
     public void tickDespawn() {
-        byte b0 = ((Byte) this.entityData.get(ThrownTrident.ID_LOYALTY)).byteValue();
+        byte b0 = this.entityData.get(ThrownTrident.ID_LOYALTY).byteValue();
 
         if (this.pickup != AbstractArrow.Pickup.ALLOWED || b0 <= 0) {
             super.tickDespawn();
diff --git a/src/main/java/net/minecraft/world/entity/projectile/WitherSkull.java b/src/main/java/net/minecraft/world/entity/projectile/WitherSkull.java
index e53dfc776a143350b9dce5062c4bf62294dd67a1..71f092d08a48d50fe50e9836596b395eee255a61 100644
--- a/src/main/java/net/minecraft/world/entity/projectile/WitherSkull.java
+++ b/src/main/java/net/minecraft/world/entity/projectile/WitherSkull.java
@@ -122,7 +122,7 @@ public class WitherSkull extends AbstractHurtingProjectile {
     }
 
     public boolean isDangerous() {
-        return ((Boolean) this.entityData.get(WitherSkull.DATA_DANGEROUS)).booleanValue();
+        return this.entityData.get(WitherSkull.DATA_DANGEROUS).booleanValue();
     }
 
     public void setDangerous(boolean charged) {
diff --git a/src/main/java/net/minecraft/world/entity/raid/Raid.java b/src/main/java/net/minecraft/world/entity/raid/Raid.java
index 160736bd7990d400f5688f61652340268ea308c1..04759397b9552f94aacafe74dcbb900aab5a75f7 100644
--- a/src/main/java/net/minecraft/world/entity/raid/Raid.java
+++ b/src/main/java/net/minecraft/world/entity/raid/Raid.java
@@ -257,7 +257,7 @@ public class Raid {
     public void absorbBadOmen(Player player) {
         if (player.hasEffect(MobEffects.BAD_OMEN)) {
             this.badOmenLevel += player.getEffect(MobEffects.BAD_OMEN).getAmplifier() + 1;
-            this.badOmenLevel = Mth.clamp(this.badOmenLevel, (int) 0, this.getMaxBadOmenLevel());
+            this.badOmenLevel = Mth.clamp(this.badOmenLevel, 0, this.getMaxBadOmenLevel());
         }
 
         player.removeEffect(MobEffects.BAD_OMEN);
@@ -318,7 +318,7 @@ public class Raid {
                         flag1 = this.waveSpawnPos.isPresent();
                         boolean flag2 = !flag1 && this.raidCooldownTicks % 5 == 0;
 
-                        if (flag1 && !this.level.isPositionEntityTicking((BlockPos) this.waveSpawnPos.get())) {
+                        if (flag1 && !this.level.isPositionEntityTicking(this.waveSpawnPos.get())) {
                             flag2 = true;
                         }
 
@@ -352,7 +352,7 @@ public class Raid {
                     this.updateRaiders();
                     if (i > 0) {
                         if (i <= 2) {
-                            this.raidEvent.setName(Raid.RAID_NAME_COMPONENT.copy().append(" - ").append((Component) Component.translatable("event.minecraft.raid.raiders_remaining", Integer.valueOf(i))));
+                            this.raidEvent.setName(Raid.RAID_NAME_COMPONENT.copy().append(" - ").append(Component.translatable("event.minecraft.raid.raiders_remaining", Integer.valueOf(i))));
                         } else {
                             this.raidEvent.setName(Raid.RAID_NAME_COMPONENT);
                         }
@@ -365,7 +365,7 @@ public class Raid {
                 int j = 0;
 
                 while (this.shouldSpawnGroup()) {
-                    BlockPos blockposition = this.waveSpawnPos.isPresent() ? (BlockPos) this.waveSpawnPos.get() : this.findRandomSpawnPos(j, 20);
+                    BlockPos blockposition = this.waveSpawnPos.isPresent() ? this.waveSpawnPos.get() : this.findRandomSpawnPos(j, 20);
 
                     if (blockposition != null) {
                         this.started = true;
@@ -485,7 +485,7 @@ public class Raid {
         HashSet hashset = Sets.newHashSet();
 
         while (iterator.hasNext()) {
-            Set<Raider> set = (Set) iterator.next();
+            Set<Raider> set = iterator.next();
             Iterator iterator1 = set.iterator();
 
             while (iterator1.hasNext()) {
@@ -567,7 +567,7 @@ public class Raid {
 
             while (true) {
                 if (j1 < l) {
-                    Raider entityraider = (Raider) raid_wave.entityType.create(this.level);
+                    Raider entityraider = raid_wave.entityType.create(this.level);
 
                     if (entityraider != null) {
                         if (!flag && entityraider.canBeLeader()) {
@@ -583,12 +583,12 @@ public class Raid {
                             Raider entityraider1 = null;
 
                             if (i == this.getNumGroups(Difficulty.NORMAL)) {
-                                entityraider1 = (Raider) EntityType.PILLAGER.create(this.level);
+                                entityraider1 = EntityType.PILLAGER.create(this.level);
                             } else if (i >= this.getNumGroups(Difficulty.HARD)) {
                                 if (i1 == 0) {
-                                    entityraider1 = (Raider) EntityType.EVOKER.create(this.level);
+                                    entityraider1 = EntityType.EVOKER.create(this.level);
                                 } else {
-                                    entityraider1 = (Raider) EntityType.VINDICATOR.create(this.level);
+                                    entityraider1 = EntityType.VINDICATOR.create(this.level);
                                 }
                             }
 
@@ -628,7 +628,7 @@ public class Raid {
             raider.setTicksOutsideRaid(0);
             if (!existing && pos != null) {
                 raider.setPos((double) pos.getX() + 0.5D, (double) pos.getY() + 1.0D, (double) pos.getZ() + 0.5D);
-                raider.finalizeSpawn(this.level, this.level.getCurrentDifficultyAt(pos), MobSpawnType.EVENT, (SpawnGroupData) null, (CompoundTag) null);
+                raider.finalizeSpawn(this.level, this.level.getCurrentDifficultyAt(pos), MobSpawnType.EVENT, null, null);
                 raider.applyRaidBuffs(wave, false);
                 raider.setOnGround(true);
                 this.level.addFreshEntityWithPassengers(raider, org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason.RAID); // CraftBukkit
@@ -667,7 +667,7 @@ public class Raid {
     }
 
     public void removeFromRaid(Raider entity, boolean countHealth) {
-        Set<Raider> set = (Set) this.groupRaiderMap.get(Integer.valueOf(entity.getWave()));
+        Set<Raider> set = this.groupRaiderMap.get(Integer.valueOf(entity.getWave()));
 
         if (set != null) {
             boolean flag1 = set.remove(entity);
@@ -677,7 +677,7 @@ public class Raid {
                     this.totalHealth -= entity.getHealth();
                 }
 
-                entity.setCurrentRaid((Raid) null);
+                entity.setCurrentRaid(null);
                 this.updateBossbar();
                 this.setDirty();
             }
@@ -703,7 +703,7 @@ public class Raid {
 
     @Nullable
     public Raider getLeader(int wave) {
-        return (Raider) this.groupToLeaderMap.get(Integer.valueOf(wave));
+        return this.groupToLeaderMap.get(Integer.valueOf(wave));
     }
 
     @Nullable
@@ -718,7 +718,7 @@ public class Raid {
             int k1 = this.level.getHeight(Heightmap.Types.WORLD_SURFACE, i1, j1);
 
             blockposition_mutableblockposition.set(i1, k1, j1);
-            if (!this.level.isVillage((BlockPos) blockposition_mutableblockposition) || proximity >= 2) {
+            if (!this.level.isVillage(blockposition_mutableblockposition) || proximity >= 2) {
                 boolean flag = true;
 
                 if (this.level.hasChunksAt(blockposition_mutableblockposition.getX() - 10, blockposition_mutableblockposition.getZ() - 10, blockposition_mutableblockposition.getX() + 10, blockposition_mutableblockposition.getZ() + 10) && this.level.isPositionEntityTicking(blockposition_mutableblockposition) && (NaturalSpawner.isSpawnPositionOk(SpawnPlacements.Type.ON_GROUND, this.level, blockposition_mutableblockposition, EntityType.RAVAGER) || this.level.getBlockState(blockposition_mutableblockposition.below()).is(Blocks.SNOW) && this.level.getBlockState(blockposition_mutableblockposition).isAir())) {
@@ -738,7 +738,7 @@ public class Raid {
         this.groupRaiderMap.computeIfAbsent(Integer.valueOf(wave), (integer) -> {
             return Sets.newHashSet();
         });
-        Set<Raider> set = (Set) this.groupRaiderMap.get(Integer.valueOf(wave));
+        Set<Raider> set = this.groupRaiderMap.get(Integer.valueOf(wave));
         Raider entityraider1 = null;
         Iterator iterator = set.iterator();
 
diff --git a/src/main/java/net/minecraft/world/entity/raid/Raider.java b/src/main/java/net/minecraft/world/entity/raid/Raider.java
index 056f8f976a0ffb9d539430730b2173944e3c5eb1..ffa0b6fe36f490f02d61a0c9bfc8f76b4cce5a0c 100644
--- a/src/main/java/net/minecraft/world/entity/raid/Raider.java
+++ b/src/main/java/net/minecraft/world/entity/raid/Raider.java
@@ -95,7 +95,7 @@ public abstract class Raider extends PatrollingMonster {
                         Raid raid1 = ((ServerLevel) this.level).getRaidAt(this.blockPosition());
 
                         if (raid1 != null && Raids.canJoinRaid(this, raid1)) {
-                            raid1.joinRaid(raid1.getGroupsSpawned(), this, (BlockPos) null, true);
+                            raid1.joinRaid(raid1.getGroupsSpawned(), this, null, true);
                         }
                     }
                 } else {
@@ -161,7 +161,7 @@ public abstract class Raider extends PatrollingMonster {
                         i = b0 - 1;
                     }
 
-                    i = Mth.clamp(i, (int) 0, (int) 4);
+                    i = Mth.clamp(i, 0, 4);
                     MobEffectInstance mobeffect1 = new MobEffectInstance(MobEffects.BAD_OMEN, 120000, i, false, false, true);
 
                     if (!this.level.getGameRules().getBoolean(GameRules.RULE_DISABLE_RAIDS)) {
@@ -201,7 +201,7 @@ public abstract class Raider extends PatrollingMonster {
     }
 
     public boolean isCelebrating() {
-        return ((Boolean) this.entityData.get(Raider.IS_CELEBRATING)).booleanValue();
+        return this.entityData.get(Raider.IS_CELEBRATING).booleanValue();
     }
 
     public void setCelebrating(boolean celebrating) {
@@ -252,7 +252,7 @@ public abstract class Raider extends PatrollingMonster {
             // Paper end
             EquipmentSlot enumitemslot = EquipmentSlot.HEAD;
             ItemStack itemstack1 = this.getItemBySlot(enumitemslot);
-            double d0 = (double) this.getEquipmentDropChance(enumitemslot);
+            double d0 = this.getEquipmentDropChance(enumitemslot);
 
             if (!itemstack1.isEmpty() && (double) Math.max(this.random.nextFloat() - 0.1F, 0.0F) < d0) {
                 this.forceDrops = true; // Paper
@@ -329,7 +329,7 @@ public abstract class Raider extends PatrollingMonster {
                     List<ItemEntity> list = this.mob.level.getEntitiesOfClass(ItemEntity.class, this.mob.getBoundingBox().inflate(16.0D, 8.0D, 16.0D), Raider.ALLOWED_ITEMS);
 
                     if (!list.isEmpty()) {
-                        return this.mob.getNavigation().moveTo((Entity) list.get(0), 1.149999976158142D);
+                        return this.mob.getNavigation().moveTo(list.get(0), 1.149999976158142D);
                     }
                 }
 
@@ -345,7 +345,7 @@ public abstract class Raider extends PatrollingMonster {
                 List<ItemEntity> list = this.mob.level.getEntitiesOfClass(ItemEntity.class, this.mob.getBoundingBox().inflate(4.0D, 4.0D, 4.0D), Raider.ALLOWED_ITEMS);
 
                 if (!list.isEmpty()) {
-                    this.mob.pickUpItem((ItemEntity) list.get(0));
+                    this.mob.pickUpItem(list.get(0));
                 }
             }
 
@@ -388,19 +388,19 @@ public abstract class Raider extends PatrollingMonster {
             if (optional.isEmpty()) {
                 return false;
             } else {
-                this.poiPos = ((BlockPos) optional.get()).immutable();
+                this.poiPos = optional.get().immutable();
                 return true;
             }
         }
 
         @Override
         public boolean canContinueToUse() {
-            return this.raider.getNavigation().isDone() ? false : this.raider.getTarget() == null && !this.poiPos.closerToCenterThan(this.raider.position(), (double) (this.raider.getBbWidth() + (float) this.distanceToPoi)) && !this.stuck;
+            return this.raider.getNavigation().isDone() ? false : this.raider.getTarget() == null && !this.poiPos.closerToCenterThan(this.raider.position(), this.raider.getBbWidth() + (float) this.distanceToPoi) && !this.stuck;
         }
 
         @Override
         public void stop() {
-            if (this.poiPos.closerToCenterThan(this.raider.position(), (double) this.distanceToPoi)) {
+            if (this.poiPos.closerToCenterThan(this.raider.position(), this.distanceToPoi)) {
                 this.visited.add(this.poiPos);
             }
 
@@ -410,7 +410,7 @@ public abstract class Raider extends PatrollingMonster {
         public void start() {
             super.start();
             this.raider.setNoActionTime(0);
-            this.raider.getNavigation().moveTo((double) this.poiPos.getX(), (double) this.poiPos.getY(), (double) this.poiPos.getZ(), this.speedModifier);
+            this.raider.getNavigation().moveTo(this.poiPos.getX(), this.poiPos.getY(), this.poiPos.getZ(), this.speedModifier);
             this.stuck = false;
         }
 
@@ -565,7 +565,7 @@ public abstract class Raider extends PatrollingMonster {
             LivingEntity entityliving = this.mob.getTarget();
 
             if (entityliving != null) {
-                if (this.mob.distanceToSqr((Entity) entityliving) > (double) this.hostileRadiusSqr) {
+                if (this.mob.distanceToSqr(entityliving) > (double) this.hostileRadiusSqr) {
                     this.mob.getLookControl().setLookAt(entityliving, 30.0F, 30.0F);
                     if (this.mob.random.nextInt(50) == 0) {
                         this.mob.playAmbientSound();
diff --git a/src/main/java/net/minecraft/world/entity/raid/Raids.java b/src/main/java/net/minecraft/world/entity/raid/Raids.java
index 2b038a191e6909837bce0b6154a7c0b7cab21710..1f6e34e38366d2f74616bf7c0fc067566b16285a 100644
--- a/src/main/java/net/minecraft/world/entity/raid/Raids.java
+++ b/src/main/java/net/minecraft/world/entity/raid/Raids.java
@@ -40,7 +40,7 @@ public class Raids extends SavedData {
     }
 
     public Raid get(int id) {
-        return (Raid) this.raidMap.get(Integer.valueOf(id));
+        return this.raidMap.get(Integer.valueOf(id));
     }
 
     public void tick() {
@@ -96,7 +96,7 @@ public class Raids extends SavedData {
                     PoiRecord villageplacerecord = (PoiRecord) iterator.next();
                     BlockPos blockposition1 = villageplacerecord.getPos();
 
-                    vec3d = vec3d.add((double) blockposition1.getX(), (double) blockposition1.getY(), (double) blockposition1.getZ());
+                    vec3d = vec3d.add(blockposition1.getX(), blockposition1.getY(), blockposition1.getZ());
                 }
 
                 BlockPos blockposition2;
@@ -206,7 +206,7 @@ public class Raids extends SavedData {
     @Nullable
     public Raid getNearbyRaid(BlockPos pos, int searchDistance) {
         Raid raid = null;
-        double d0 = (double) searchDistance;
+        double d0 = searchDistance;
         Iterator iterator = this.raidMap.values().iterator();
 
         while (iterator.hasNext()) {
diff --git a/src/main/java/net/minecraft/world/entity/vehicle/AbstractMinecart.java b/src/main/java/net/minecraft/world/entity/vehicle/AbstractMinecart.java
index 79fb3e3059bd494d7b56c5a85841312d1dec27a5..3c051b4b3c43b7f9ccbd960d7c2b1654202a14c4 100644
--- a/src/main/java/net/minecraft/world/entity/vehicle/AbstractMinecart.java
+++ b/src/main/java/net/minecraft/world/entity/vehicle/AbstractMinecart.java
@@ -66,7 +66,7 @@ public abstract class AbstractMinecart extends Entity {
     private static final ImmutableMap<Pose, ImmutableList<Integer>> POSE_DISMOUNT_HEIGHTS = ImmutableMap.of(Pose.STANDING, ImmutableList.of(Integer.valueOf(0), Integer.valueOf(1), Integer.valueOf(-1)), Pose.CROUCHING, ImmutableList.of(Integer.valueOf(0), Integer.valueOf(1), Integer.valueOf(-1)), Pose.SWIMMING, ImmutableList.of(Integer.valueOf(0), Integer.valueOf(1)));
     protected static final float WATER_SLOWDOWN_FACTOR = 0.95F;
     private boolean flipped;
-    private static final Map<RailShape, Pair<Vec3i, Vec3i>> EXITS = (Map) Util.make(Maps.newEnumMap(RailShape.class), (enummap) -> {
+    private static final Map<RailShape, Pair<Vec3i, Vec3i>> EXITS = Util.make(Maps.newEnumMap(RailShape.class), (enummap) -> {
         Vec3i baseblockposition = Direction.WEST.getNormal();
         Vec3i baseblockposition1 = Direction.EAST.getNormal();
         Vec3i baseblockposition2 = Direction.NORTH.getNormal();
@@ -122,7 +122,7 @@ public abstract class AbstractMinecart extends Entity {
     }
 
     public static AbstractMinecart createMinecart(Level world, double x, double y, double z, AbstractMinecart.Type type) {
-        return (AbstractMinecart) (type == AbstractMinecart.Type.CHEST ? new MinecartChest(world, x, y, z) : (type == AbstractMinecart.Type.FURNACE ? new MinecartFurnace(world, x, y, z) : (type == AbstractMinecart.Type.TNT ? new MinecartTNT(world, x, y, z) : (type == AbstractMinecart.Type.SPAWNER ? new MinecartSpawner(world, x, y, z) : (type == AbstractMinecart.Type.HOPPER ? new MinecartHopper(world, x, y, z) : (type == AbstractMinecart.Type.COMMAND_BLOCK ? new MinecartCommandBlock(world, x, y, z) : new Minecart(world, x, y, z)))))));
+        return type == Type.CHEST ? new MinecartChest(world, x, y, z) : (type == Type.FURNACE ? new MinecartFurnace(world, x, y, z) : (type == Type.TNT ? new MinecartTNT(world, x, y, z) : (type == Type.SPAWNER ? new MinecartSpawner(world, x, y, z) : (type == Type.HOPPER ? new MinecartHopper(world, x, y, z) : (type == Type.COMMAND_BLOCK ? new MinecartCommandBlock(world, x, y, z) : new Minecart(world, x, y, z))))));
     }
 
     @Override
@@ -201,7 +201,7 @@ public abstract class AbstractMinecart extends Entity {
                         });
 
                         if (DismountHelper.isBlockFloorValid(d0)) {
-                            AABB axisalignedbb = new AABB((double) (-f), 0.0D, (double) (-f), (double) f, (double) entitysize.height, (double) f);
+                            AABB axisalignedbb = new AABB(-f, 0.0D, -f, f, entitysize.height, f);
                             Vec3 vec3d = Vec3.upFromBottomCenterOf(blockposition_mutableblockposition, d0);
 
                             if (DismountHelper.canDismountTo(this.level, passenger, axisalignedbb.move(vec3d))) {
@@ -215,12 +215,12 @@ public abstract class AbstractMinecart extends Entity {
 
             double d1 = this.getBoundingBox().maxY;
 
-            blockposition_mutableblockposition.set((double) blockposition.getX(), d1, (double) blockposition.getZ());
+            blockposition_mutableblockposition.set(blockposition.getX(), d1, blockposition.getZ());
             UnmodifiableIterator unmodifiableiterator2 = immutablelist.iterator();
 
             while (unmodifiableiterator2.hasNext()) {
                 Pose entitypose1 = (Pose) unmodifiableiterator2.next();
-                double d2 = (double) passenger.getDimensions(entitypose1).height;
+                double d2 = passenger.getDimensions(entitypose1).height;
                 int l = Mth.ceil(d1 - (double) blockposition_mutableblockposition.getY() + d2);
                 double d3 = DismountHelper.findCeilingFrom(blockposition_mutableblockposition, l, (blockposition1) -> {
                     return this.level.getBlockState(blockposition1).getCollisionShape(this.level, blockposition1);
@@ -323,7 +323,7 @@ public abstract class AbstractMinecart extends Entity {
     }
 
     private static Pair<Vec3i, Vec3i> exits(RailShape shape) {
-        return (Pair) AbstractMinecart.EXITS.get(shape);
+        return AbstractMinecart.EXITS.get(shape);
     }
 
     @Override
@@ -390,7 +390,7 @@ public abstract class AbstractMinecart extends Entity {
             if (BaseRailBlock.isRail(iblockdata)) {
                 this.moveAlongTrack(blockposition, iblockdata);
                 if (iblockdata.is(Blocks.ACTIVATOR_RAIL)) {
-                    this.activateMinecart(i, j, k, ((Boolean) iblockdata.getValue(PoweredRailBlock.POWERED)).booleanValue());
+                    this.activateMinecart(i, j, k, iblockdata.getValue(PoweredRailBlock.POWERED).booleanValue());
                 }
             } else {
                 this.comeOffTrack();
@@ -408,7 +408,7 @@ public abstract class AbstractMinecart extends Entity {
                 }
             }
 
-            double d6 = (double) Mth.wrapDegrees(this.getYRot() - this.yRotO);
+            double d6 = Mth.wrapDegrees(this.getYRot() - this.yRotO);
 
             if (d6 < -170.0D || d6 >= 170.0D) {
                 this.setYRot(this.getYRot() + 180.0F);
@@ -429,11 +429,11 @@ public abstract class AbstractMinecart extends Entity {
             }
             // CraftBukkit end
             if (this.getMinecartType() == AbstractMinecart.Type.RIDEABLE && this.getDeltaMovement().horizontalDistanceSqr() > 0.01D) {
-                List<Entity> list = this.level.getEntities((Entity) this, this.getBoundingBox().inflate(0.20000000298023224D, 0.0D, 0.20000000298023224D), EntitySelector.pushableBy(this));
+                List<Entity> list = this.level.getEntities(this, this.getBoundingBox().inflate(0.20000000298023224D, 0.0D, 0.20000000298023224D), EntitySelector.pushableBy(this));
 
                 if (!list.isEmpty()) {
                     for (int l = 0; l < list.size(); ++l) {
-                        Entity entity = (Entity) list.get(l);
+                        Entity entity = list.get(l);
 
                         if (!(entity instanceof Player) && !(entity instanceof IronGolem) && !(entity instanceof AbstractMinecart) && !this.isVehicle() && !entity.isPassenger()) {
                             // CraftBukkit start
@@ -523,12 +523,12 @@ public abstract class AbstractMinecart extends Entity {
         double d2 = this.getZ();
         Vec3 vec3d = this.getPos(d0, d1, d2);
 
-        d1 = (double) pos.getY();
+        d1 = pos.getY();
         boolean flag = false;
         boolean flag1 = false;
 
         if (state.is(Blocks.POWERED_RAIL)) {
-            flag = ((Boolean) state.getValue(PoweredRailBlock.POWERED)).booleanValue();
+            flag = state.getValue(PoweredRailBlock.POWERED).booleanValue();
             flag1 = !flag;
         }
 
@@ -539,7 +539,7 @@ public abstract class AbstractMinecart extends Entity {
         }
 
         Vec3 vec3d1 = this.getDeltaMovement();
-        RailShape blockpropertytrackposition = (RailShape) state.getValue(((BaseRailBlock) state.getBlock()).getShapeProperty());
+        RailShape blockpropertytrackposition = state.getValue(((BaseRailBlock) state.getBlock()).getShapeProperty());
 
         switch (blockpropertytrackposition) {
             case ASCENDING_EAST:
@@ -561,10 +561,10 @@ public abstract class AbstractMinecart extends Entity {
 
         vec3d1 = this.getDeltaMovement();
         Pair<Vec3i, Vec3i> pair = AbstractMinecart.exits(blockpropertytrackposition);
-        Vec3i baseblockposition = (Vec3i) pair.getFirst();
-        Vec3i baseblockposition1 = (Vec3i) pair.getSecond();
-        double d4 = (double) (baseblockposition1.getX() - baseblockposition.getX());
-        double d5 = (double) (baseblockposition1.getZ() - baseblockposition.getZ());
+        Vec3i baseblockposition = pair.getFirst();
+        Vec3i baseblockposition1 = pair.getSecond();
+        double d4 = baseblockposition1.getX() - baseblockposition.getX();
+        double d5 = baseblockposition1.getZ() - baseblockposition.getZ();
         double d6 = Math.sqrt(d4 * d4 + d5 * d5);
         double d7 = vec3d1.x * d4 + vec3d1.z * d5;
 
@@ -726,18 +726,18 @@ public abstract class AbstractMinecart extends Entity {
         BlockState iblockdata = this.level.getBlockState(new BlockPos(i, j, k));
 
         if (BaseRailBlock.isRail(iblockdata)) {
-            RailShape blockpropertytrackposition = (RailShape) iblockdata.getValue(((BaseRailBlock) iblockdata.getBlock()).getShapeProperty());
+            RailShape blockpropertytrackposition = iblockdata.getValue(((BaseRailBlock) iblockdata.getBlock()).getShapeProperty());
 
-            y = (double) j;
+            y = j;
             if (blockpropertytrackposition.isAscending()) {
-                y = (double) (j + 1);
+                y = j + 1;
             }
 
             Pair<Vec3i, Vec3i> pair = AbstractMinecart.exits(blockpropertytrackposition);
-            Vec3i baseblockposition = (Vec3i) pair.getFirst();
-            Vec3i baseblockposition1 = (Vec3i) pair.getSecond();
-            double d4 = (double) (baseblockposition1.getX() - baseblockposition.getX());
-            double d5 = (double) (baseblockposition1.getZ() - baseblockposition.getZ());
+            Vec3i baseblockposition = pair.getFirst();
+            Vec3i baseblockposition1 = pair.getSecond();
+            double d4 = baseblockposition1.getX() - baseblockposition.getX();
+            double d5 = baseblockposition1.getZ() - baseblockposition.getZ();
             double d6 = Math.sqrt(d4 * d4 + d5 * d5);
 
             d4 /= d6;
@@ -745,9 +745,9 @@ public abstract class AbstractMinecart extends Entity {
             x += d4 * offset;
             z += d5 * offset;
             if (baseblockposition.getY() != 0 && Mth.floor(x) - i == baseblockposition.getX() && Mth.floor(z) - k == baseblockposition.getZ()) {
-                y += (double) baseblockposition.getY();
+                y += baseblockposition.getY();
             } else if (baseblockposition1.getY() != 0 && Mth.floor(x) - i == baseblockposition1.getX() && Mth.floor(z) - k == baseblockposition1.getZ()) {
-                y += (double) baseblockposition1.getY();
+                y += baseblockposition1.getY();
             }
 
             return this.getPos(x, y, z);
@@ -769,10 +769,10 @@ public abstract class AbstractMinecart extends Entity {
         BlockState iblockdata = this.level.getBlockState(new BlockPos(i, j, k));
 
         if (BaseRailBlock.isRail(iblockdata)) {
-            RailShape blockpropertytrackposition = (RailShape) iblockdata.getValue(((BaseRailBlock) iblockdata.getBlock()).getShapeProperty());
+            RailShape blockpropertytrackposition = iblockdata.getValue(((BaseRailBlock) iblockdata.getBlock()).getShapeProperty());
             Pair<Vec3i, Vec3i> pair = AbstractMinecart.exits(blockpropertytrackposition);
-            Vec3i baseblockposition = (Vec3i) pair.getFirst();
-            Vec3i baseblockposition1 = (Vec3i) pair.getSecond();
+            Vec3i baseblockposition = pair.getFirst();
+            Vec3i baseblockposition1 = pair.getSecond();
             double d3 = (double) i + 0.5D + (double) baseblockposition.getX() * 0.5D;
             double d4 = (double) j + 0.0625D + (double) baseblockposition.getY() * 0.5D;
             double d5 = (double) k + 0.5D + (double) baseblockposition.getZ() * 0.5D;
@@ -874,7 +874,7 @@ public abstract class AbstractMinecart extends Entity {
                             double d4 = entity.getX() - this.getX();
                             double d5 = entity.getZ() - this.getZ();
                             Vec3 vec3d = (new Vec3(d4, 0.0D, d5)).normalize();
-                            Vec3 vec3d1 = (new Vec3((double) Mth.cos(this.getYRot() * 0.017453292F), 0.0D, (double) Mth.sin(this.getYRot() * 0.017453292F))).normalize();
+                            Vec3 vec3d1 = (new Vec3(Mth.cos(this.getYRot() * 0.017453292F), 0.0D, Mth.sin(this.getYRot() * 0.017453292F))).normalize();
                             double d6 = Math.abs(vec3d.dot(vec3d1));
 
                             if (d6 < 0.800000011920929D) {
@@ -917,8 +917,8 @@ public abstract class AbstractMinecart extends Entity {
         this.lx = x;
         this.ly = y;
         this.lz = z;
-        this.lyr = (double) yaw;
-        this.lxr = (double) pitch;
+        this.lyr = yaw;
+        this.lxr = pitch;
         this.lSteps = interpolationSteps + 2;
         this.setDeltaMovement(this.lxd, this.lyd, this.lzd);
     }
@@ -936,7 +936,7 @@ public abstract class AbstractMinecart extends Entity {
     }
 
     public float getDamage() {
-        return ((Float) this.entityData.get(AbstractMinecart.DATA_ID_DAMAGE)).floatValue();
+        return this.entityData.get(AbstractMinecart.DATA_ID_DAMAGE).floatValue();
     }
 
     public void setHurtTime(int wobbleTicks) {
@@ -944,7 +944,7 @@ public abstract class AbstractMinecart extends Entity {
     }
 
     public int getHurtTime() {
-        return ((Integer) this.entityData.get(AbstractMinecart.DATA_ID_HURT)).intValue();
+        return this.entityData.get(AbstractMinecart.DATA_ID_HURT).intValue();
     }
 
     public void setHurtDir(int wobbleSide) {
@@ -952,13 +952,13 @@ public abstract class AbstractMinecart extends Entity {
     }
 
     public int getHurtDir() {
-        return ((Integer) this.entityData.get(AbstractMinecart.DATA_ID_HURTDIR)).intValue();
+        return this.entityData.get(AbstractMinecart.DATA_ID_HURTDIR).intValue();
     }
 
     public abstract AbstractMinecart.Type getMinecartType();
 
     public BlockState getDisplayBlockState() {
-        return !this.hasCustomDisplay() ? this.getDefaultDisplayBlockState() : Block.stateById(((Integer) this.getEntityData().get(AbstractMinecart.DATA_ID_DISPLAY_BLOCK)).intValue());
+        return !this.hasCustomDisplay() ? this.getDefaultDisplayBlockState() : Block.stateById(this.getEntityData().get(AbstractMinecart.DATA_ID_DISPLAY_BLOCK).intValue());
     }
 
     public BlockState getDefaultDisplayBlockState() {
@@ -966,7 +966,7 @@ public abstract class AbstractMinecart extends Entity {
     }
 
     public int getDisplayOffset() {
-        return !this.hasCustomDisplay() ? this.getDefaultDisplayOffset() : ((Integer) this.getEntityData().get(AbstractMinecart.DATA_ID_DISPLAY_OFFSET)).intValue();
+        return !this.hasCustomDisplay() ? this.getDefaultDisplayOffset() : this.getEntityData().get(AbstractMinecart.DATA_ID_DISPLAY_OFFSET).intValue();
     }
 
     public int getDefaultDisplayOffset() {
@@ -984,7 +984,7 @@ public abstract class AbstractMinecart extends Entity {
     }
 
     public boolean hasCustomDisplay() {
-        return ((Boolean) this.getEntityData().get(AbstractMinecart.DATA_ID_CUSTOM_DISPLAY)).booleanValue();
+        return this.getEntityData().get(AbstractMinecart.DATA_ID_CUSTOM_DISPLAY).booleanValue();
     }
 
     public void setCustomDisplay(boolean present) {
diff --git a/src/main/java/net/minecraft/world/entity/vehicle/AbstractMinecartContainer.java b/src/main/java/net/minecraft/world/entity/vehicle/AbstractMinecartContainer.java
index b8fb7b5a347298ada16bc8b818edf1863e3f6040..723906cb70eeff06952c7138dab0dfa88c0960ae 100644
--- a/src/main/java/net/minecraft/world/entity/vehicle/AbstractMinecartContainer.java
+++ b/src/main/java/net/minecraft/world/entity/vehicle/AbstractMinecartContainer.java
@@ -139,7 +139,7 @@ public abstract class AbstractMinecartContainer extends AbstractMinecart impleme
     @Override
     public void remove(Entity.RemovalReason reason) {
         if (!this.level.isClientSide && reason.shouldDestroy()) {
-            Containers.dropContents(this.level, (Entity) this, (Container) this);
+            Containers.dropContents(this.level, this, this);
         }
 
         super.remove(reason);
@@ -178,7 +178,7 @@ public abstract class AbstractMinecartContainer extends AbstractMinecart impleme
             f *= 0.95F;
         }
 
-        this.setDeltaMovement(this.getDeltaMovement().multiply((double) f, 0.0D, (double) f));
+        this.setDeltaMovement(this.getDeltaMovement().multiply(f, 0.0D, f));
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/entity/vehicle/Boat.java b/src/main/java/net/minecraft/world/entity/vehicle/Boat.java
index ee5ee9be5aec6ce69a0a8faa2e91269b7ae93616..b34b505b7ac313a34bec46f4d1f2cb1515ee3567 100644
--- a/src/main/java/net/minecraft/world/entity/vehicle/Boat.java
+++ b/src/main/java/net/minecraft/world/entity/vehicle/Boat.java
@@ -182,7 +182,7 @@ public class Boat extends Entity implements VariantHolder<Boat.Type> {
             Vehicle vehicle = (Vehicle) this.getBukkitEntity();
             org.bukkit.entity.Entity attacker = (source.getEntity() == null) ? null : source.getEntity().getBukkitEntity();
 
-            VehicleDamageEvent event = new VehicleDamageEvent(vehicle, attacker, (double) amount);
+            VehicleDamageEvent event = new VehicleDamageEvent(vehicle, attacker, amount);
             this.level.getCraftServer().getPluginManager().callEvent(event);
 
             if (event.isCancelled()) {
@@ -222,7 +222,7 @@ public class Boat extends Entity implements VariantHolder<Boat.Type> {
     }
 
     protected void destroy(DamageSource source) {
-        this.spawnAtLocation((ItemLike) this.getDropItem());
+        this.spawnAtLocation(this.getDropItem());
     }
 
     @Override
@@ -325,8 +325,8 @@ public class Boat extends Entity implements VariantHolder<Boat.Type> {
         this.lerpX = x;
         this.lerpY = y;
         this.lerpZ = z;
-        this.lerpYRot = (double) yaw;
-        this.lerpXRot = (double) pitch;
+        this.lerpYRot = yaw;
+        this.lerpXRot = pitch;
         this.lerpSteps = 10;
     }
 
@@ -404,7 +404,7 @@ public class Boat extends Entity implements VariantHolder<Boat.Type> {
                         double d0 = i == 1 ? -vec3d.z : vec3d.z;
                         double d1 = i == 1 ? vec3d.x : -vec3d.x;
 
-                        this.level.playSound((Player) null, this.getX() + d0, this.getY(), this.getZ() + d1, soundeffect, this.getSoundSource(), 1.0F, 0.8F + 0.4F * this.random.nextFloat());
+                        this.level.playSound(null, this.getX() + d0, this.getY(), this.getZ() + d1, soundeffect, this.getSoundSource(), 1.0F, 0.8F + 0.4F * this.random.nextFloat());
                     }
                 }
 
@@ -415,15 +415,15 @@ public class Boat extends Entity implements VariantHolder<Boat.Type> {
         }
 
         this.checkInsideBlocks();
-        List<Entity> list = this.level.getEntities((Entity) this, this.getBoundingBox().inflate(0.20000000298023224D, -0.009999999776482582D, 0.20000000298023224D), EntitySelector.pushableBy(this));
+        List<Entity> list = this.level.getEntities(this, this.getBoundingBox().inflate(0.20000000298023224D, -0.009999999776482582D, 0.20000000298023224D), EntitySelector.pushableBy(this));
 
         if (!list.isEmpty()) {
             boolean flag = !this.level.isClientSide && !(this.getControllingPassenger() instanceof Player);
 
             for (int j = 0; j < list.size(); ++j) {
-                Entity entity = (Entity) list.get(j);
+                Entity entity = list.get(j);
 
-                if (!entity.hasPassenger((Entity) this)) {
+                if (!entity.hasPassenger(this)) {
                     if (flag && this.getPassengers().size() < this.getMaxPassengers() && !entity.isPassenger() && entity.getBbWidth() < this.getBbWidth() && entity instanceof LivingEntity && !(entity instanceof WaterAnimal) && !(entity instanceof Player)) {
                         entity.startRiding(this);
                     } else {
@@ -448,7 +448,7 @@ public class Boat extends Entity implements VariantHolder<Boat.Type> {
 
             this.bubbleMultiplier = Mth.clamp(this.bubbleMultiplier, 0.0F, 1.0F);
             this.bubbleAngleO = this.bubbleAngle;
-            this.bubbleAngle = 10.0F * (float) Math.sin((double) (0.5F * (float) this.level.getGameTime())) * this.bubbleMultiplier;
+            this.bubbleAngle = 10.0F * (float) Math.sin(0.5F * (float) this.level.getGameTime()) * this.bubbleMultiplier;
         } else {
             if (!this.isAboveBubbleColumn) {
                 this.setBubbleTime(0);
@@ -619,7 +619,7 @@ public class Boat extends Entity implements VariantHolder<Boat.Type> {
                             blockposition_mutableblockposition.set(l1, k2, i2);
                             BlockState iblockdata = this.level.getBlockState(blockposition_mutableblockposition);
 
-                            if (!(iblockdata.getBlock() instanceof WaterlilyBlock) && Shapes.joinIsNotEmpty(iblockdata.getCollisionShape(this.level, blockposition_mutableblockposition).move((double) l1, (double) k2, (double) i2), voxelshape, BooleanOp.AND)) {
+                            if (!(iblockdata.getBlock() instanceof WaterlilyBlock) && Shapes.joinIsNotEmpty(iblockdata.getCollisionShape(this.level, blockposition_mutableblockposition).move(l1, k2, i2), voxelshape, BooleanOp.AND)) {
                                 f += iblockdata.getBlock().getFriction();
                                 ++k1;
                             }
@@ -654,7 +654,7 @@ public class Boat extends Entity implements VariantHolder<Boat.Type> {
                     if (fluid.is(FluidTags.WATER)) {
                         float f = (float) l1 + fluid.getHeight(this.level, blockposition_mutableblockposition);
 
-                        this.waterLevel = Math.max((double) f, this.waterLevel);
+                        this.waterLevel = Math.max(f, this.waterLevel);
                         flag |= axisalignedbb.minY < (double) f;
                     }
                 }
@@ -766,7 +766,7 @@ public class Boat extends Entity implements VariantHolder<Boat.Type> {
                 f -= 0.005F;
             }
 
-            this.setDeltaMovement(this.getDeltaMovement().add((double) (Mth.sin(-this.getYRot() * 0.017453292F) * f), 0.0D, (double) (Mth.cos(this.getYRot() * 0.017453292F) * f)));
+            this.setDeltaMovement(this.getDeltaMovement().add(Mth.sin(-this.getYRot() * 0.017453292F) * f, 0.0D, Mth.cos(this.getYRot() * 0.017453292F) * f));
             this.setPaddleState(this.inputRight && !this.inputLeft || this.inputUp, this.inputLeft && !this.inputRight || this.inputUp);
         }
     }
@@ -795,7 +795,7 @@ public class Boat extends Entity implements VariantHolder<Boat.Type> {
                 }
             }
 
-            Vec3 vec3d = (new Vec3((double) f, 0.0D, 0.0D)).yRot(-this.getYRot() * 0.017453292F - 1.5707964F);
+            Vec3 vec3d = (new Vec3(f, 0.0D, 0.0D)).yRot(-this.getYRot() * 0.017453292F - 1.5707964F);
 
             passenger.setPos(this.getX() + vec3d.x, this.getY() + (double) f1, this.getZ() + vec3d.z);
             passenger.setYRot(passenger.getYRot() + this.deltaRotation);
@@ -813,7 +813,7 @@ public class Boat extends Entity implements VariantHolder<Boat.Type> {
 
     @Override
     public Vec3 getDismountLocationForPassenger(LivingEntity passenger) {
-        Vec3 vec3d = getCollisionHorizontalEscapeVector((double) (this.getBbWidth() * Mth.SQRT_OF_TWO), (double) passenger.getBbWidth(), passenger.getYRot());
+        Vec3 vec3d = getCollisionHorizontalEscapeVector(this.getBbWidth() * Mth.SQRT_OF_TWO, passenger.getBbWidth(), passenger.getYRot());
         double d0 = this.getX() + vec3d.x;
         double d1 = this.getZ() + vec3d.z;
         BlockPos blockposition = new BlockPos(d0, this.getBoundingBox().maxY, d1);
@@ -909,11 +909,11 @@ public class Boat extends Entity implements VariantHolder<Boat.Type> {
                             int i;
 
                             for (i = 0; i < 3; ++i) {
-                                this.spawnAtLocation((ItemLike) this.getVariant().getPlanks());
+                                this.spawnAtLocation(this.getVariant().getPlanks());
                             }
 
                             for (i = 0; i < 2; ++i) {
-                                this.spawnAtLocation((ItemLike) Items.STICK);
+                                this.spawnAtLocation(Items.STICK);
                             }
                         }
                     }
@@ -929,7 +929,7 @@ public class Boat extends Entity implements VariantHolder<Boat.Type> {
     }
 
     public boolean getPaddleState(int paddle) {
-        return ((Boolean) this.entityData.get(paddle == 0 ? Boat.DATA_ID_PADDLE_LEFT : Boat.DATA_ID_PADDLE_RIGHT)).booleanValue() && this.getControllingPassenger() != null;
+        return this.entityData.get(paddle == 0 ? Boat.DATA_ID_PADDLE_LEFT : Boat.DATA_ID_PADDLE_RIGHT).booleanValue() && this.getControllingPassenger() != null;
     }
 
     public void setDamage(float wobbleStrength) {
@@ -937,7 +937,7 @@ public class Boat extends Entity implements VariantHolder<Boat.Type> {
     }
 
     public float getDamage() {
-        return ((Float) this.entityData.get(Boat.DATA_ID_DAMAGE)).floatValue();
+        return this.entityData.get(Boat.DATA_ID_DAMAGE).floatValue();
     }
 
     public void setHurtTime(int wobbleTicks) {
@@ -945,7 +945,7 @@ public class Boat extends Entity implements VariantHolder<Boat.Type> {
     }
 
     public int getHurtTime() {
-        return ((Integer) this.entityData.get(Boat.DATA_ID_HURT)).intValue();
+        return this.entityData.get(Boat.DATA_ID_HURT).intValue();
     }
 
     private void setBubbleTime(int wobbleTicks) {
@@ -953,7 +953,7 @@ public class Boat extends Entity implements VariantHolder<Boat.Type> {
     }
 
     private int getBubbleTime() {
-        return ((Integer) this.entityData.get(Boat.DATA_ID_BUBBLE_TIME)).intValue();
+        return this.entityData.get(Boat.DATA_ID_BUBBLE_TIME).intValue();
     }
 
     public float getBubbleAngle(float tickDelta) {
@@ -965,7 +965,7 @@ public class Boat extends Entity implements VariantHolder<Boat.Type> {
     }
 
     public int getHurtDir() {
-        return ((Integer) this.entityData.get(Boat.DATA_ID_HURTDIR)).intValue();
+        return this.entityData.get(Boat.DATA_ID_HURTDIR).intValue();
     }
 
     public void setVariant(Boat.Type variant) {
@@ -974,7 +974,7 @@ public class Boat extends Entity implements VariantHolder<Boat.Type> {
 
     @Override
     public Boat.Type getVariant() {
-        return Boat.Type.byId(((Integer) this.entityData.get(Boat.DATA_ID_TYPE)).intValue());
+        return Boat.Type.byId(this.entityData.get(Boat.DATA_ID_TYPE).intValue());
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/entity/vehicle/ChestBoat.java b/src/main/java/net/minecraft/world/entity/vehicle/ChestBoat.java
index a9fb2d5e95d5caa71b794eda0f2749ff795ed4e7..9b1318175578dd40381fa12bcf66895a4c9e3ee2 100644
--- a/src/main/java/net/minecraft/world/entity/vehicle/ChestBoat.java
+++ b/src/main/java/net/minecraft/world/entity/vehicle/ChestBoat.java
@@ -85,7 +85,7 @@ public class ChestBoat extends Boat implements HasCustomInventoryScreen, Contain
     @Override
     public void remove(Entity.RemovalReason reason) {
         if (!this.level.isClientSide && reason.shouldDestroy()) {
-            Containers.dropContents(this.level, (Entity) this, (Container) this);
+            Containers.dropContents(this.level, this, this);
         }
 
         super.remove(reason);
diff --git a/src/main/java/net/minecraft/world/entity/vehicle/ContainerEntity.java b/src/main/java/net/minecraft/world/entity/vehicle/ContainerEntity.java
index 3d17bf87c2679a6e6c41ed4d12e507cada2dab00..f40953bd433d320935c59c20f00da34239e82180 100644
--- a/src/main/java/net/minecraft/world/entity/vehicle/ContainerEntity.java
+++ b/src/main/java/net/minecraft/world/entity/vehicle/ContainerEntity.java
@@ -111,9 +111,8 @@ public interface ContainerEntity extends Container, MenuProvider {
                 CriteriaTriggers.GENERATE_LOOT.trigger((ServerPlayer)player, this.getLootTable());
             }
 
-            // this.setLootTable((ResourceLocation)null); // Paper
+            // this.setLootTable(null); // Paper
             this.getLootableData().processRefill(player); // Paper
-
             LootContext.Builder builder = (new LootContext.Builder((ServerLevel)this.getLevel())).withParameter(LootContextParams.ORIGIN, this.position()).withOptionalRandomSeed(this.getLootTableSeed());
             if (player != null) {
                 builder.withLuck(player.getLuck()).withParameter(LootContextParams.THIS_ENTITY, player);
@@ -125,7 +124,7 @@ public interface ContainerEntity extends Container, MenuProvider {
     }
 
     default void clearChestVehicleContent() {
-        this.unpackChestVehicleLootTable((Player)null);
+        this.unpackChestVehicleLootTable(null);
         this.getItemStacks().clear();
     }
 
@@ -140,7 +139,7 @@ public interface ContainerEntity extends Container, MenuProvider {
     }
 
     default ItemStack removeChestVehicleItemNoUpdate(int slot) {
-        this.unpackChestVehicleLootTable((Player)null);
+        this.unpackChestVehicleLootTable(null);
         ItemStack itemStack = this.getItemStacks().get(slot);
         if (itemStack.isEmpty()) {
             return ItemStack.EMPTY;
@@ -151,17 +150,17 @@ public interface ContainerEntity extends Container, MenuProvider {
     }
 
     default ItemStack getChestVehicleItem(int slot) {
-        this.unpackChestVehicleLootTable((Player)null);
+        this.unpackChestVehicleLootTable(null);
         return this.getItemStacks().get(slot);
     }
 
     default ItemStack removeChestVehicleItem(int slot, int amount) {
-        this.unpackChestVehicleLootTable((Player)null);
+        this.unpackChestVehicleLootTable(null);
         return ContainerHelper.removeItem(this.getItemStacks(), slot, amount);
     }
 
     default void setChestVehicleItem(int slot, ItemStack stack) {
-        this.unpackChestVehicleLootTable((Player)null);
+        this.unpackChestVehicleLootTable(null);
         this.getItemStacks().set(slot, stack);
         if (!stack.isEmpty() && stack.getCount() > this.getMaxStackSize()) {
             stack.setCount(this.getMaxStackSize());
diff --git a/src/main/java/net/minecraft/world/entity/vehicle/MinecartCommandBlock.java b/src/main/java/net/minecraft/world/entity/vehicle/MinecartCommandBlock.java
index 1fe630118981b02092054af3c5c6227a889ee3c2..692aeb5b539c3d4ed3dbd90c0cdc286ca22d0b0b 100644
--- a/src/main/java/net/minecraft/world/entity/vehicle/MinecartCommandBlock.java
+++ b/src/main/java/net/minecraft/world/entity/vehicle/MinecartCommandBlock.java
@@ -95,12 +95,12 @@ public class MinecartCommandBlock extends AbstractMinecart {
         super.onSyncedDataUpdated(data);
         if (MinecartCommandBlock.DATA_ID_LAST_OUTPUT.equals(data)) {
             try {
-                this.commandBlock.setLastOutput((Component) this.getEntityData().get(MinecartCommandBlock.DATA_ID_LAST_OUTPUT));
+                this.commandBlock.setLastOutput(this.getEntityData().get(MinecartCommandBlock.DATA_ID_LAST_OUTPUT));
             } catch (Throwable throwable) {
                 ;
             }
         } else if (MinecartCommandBlock.DATA_ID_COMMAND_NAME.equals(data)) {
-            this.commandBlock.setCommand((String) this.getEntityData().get(MinecartCommandBlock.DATA_ID_COMMAND_NAME));
+            this.commandBlock.setCommand(this.getEntityData().get(MinecartCommandBlock.DATA_ID_COMMAND_NAME));
         }
 
     }
@@ -142,7 +142,7 @@ public class MinecartCommandBlock extends AbstractMinecart {
         // CraftBukkit start
         @Override
         public org.bukkit.command.CommandSender getBukkitSender(CommandSourceStack wrapper) {
-            return (org.bukkit.craftbukkit.entity.CraftMinecartCommand) MinecartCommandBlock.this.getBukkitEntity();
+            return MinecartCommandBlock.this.getBukkitEntity();
         }
         // CraftBukkit end
     }
diff --git a/src/main/java/net/minecraft/world/entity/vehicle/MinecartTNT.java b/src/main/java/net/minecraft/world/entity/vehicle/MinecartTNT.java
index 8443ddd751b3eae3c834aa957ea01b09306c9373..9b1fbb85d27bd4e8617243239a48594c3e276d21 100644
--- a/src/main/java/net/minecraft/world/entity/vehicle/MinecartTNT.java
+++ b/src/main/java/net/minecraft/world/entity/vehicle/MinecartTNT.java
@@ -171,7 +171,7 @@ public class MinecartTNT extends AbstractMinecart {
         if (!this.level.isClientSide) {
             this.level.broadcastEntityEvent(this, (byte) 10);
             if (!this.isSilent()) {
-                this.level.playSound((Player) null, this.getX(), this.getY(), this.getZ(), SoundEvents.TNT_PRIMED, SoundSource.BLOCKS, 1.0F, 1.0F);
+                this.level.playSound( null, this.getX(), this.getY(), this.getZ(), SoundEvents.TNT_PRIMED, SoundSource.BLOCKS, 1.0F, 1.0F);
             }
         }
 
diff --git a/src/main/java/net/minecraft/world/inventory/AbstractContainerMenu.java b/src/main/java/net/minecraft/world/inventory/AbstractContainerMenu.java
index 21cb1b109f795334e4a9879ab7ad609acdfa3d33..9daaeaa7578de2c3034cdd0346539185a0112d2e 100644
--- a/src/main/java/net/minecraft/world/inventory/AbstractContainerMenu.java
+++ b/src/main/java/net/minecraft/world/inventory/AbstractContainerMenu.java
@@ -116,9 +116,9 @@ public abstract class AbstractContainerMenu {
     }
 
     protected static boolean stillValid(ContainerLevelAccess context, Player player, Block block) {
-        return ((Boolean) context.evaluate((world, blockposition) -> {
+        return context.evaluate((world, blockposition) -> {
             return Boolean.valueOf(!world.getBlockState(blockposition).is(block) ? false : player.distanceToSqr((double) blockposition.getX() + 0.5D, (double) blockposition.getY() + 0.5D, (double) blockposition.getZ() + 0.5D) <= 64.0D);
-        }, Boolean.TRUE)).booleanValue();
+        }, Boolean.TRUE).booleanValue();
     }
 
     public MenuType<?> getType() {
@@ -188,14 +188,14 @@ public abstract class AbstractContainerMenu {
         int j;
 
         for (j = this.slots.size(); i < j; ++i) {
-            this.remoteSlots.set(i, ((Slot) this.slots.get(i)).getItem().copy());
+            this.remoteSlots.set(i, this.slots.get(i).getItem().copy());
         }
 
         this.remoteCarried = this.getCarried().copy();
         i = 0;
 
         for (j = this.dataSlots.size(); i < j; ++i) {
-            this.remoteDataSlots.set(i, ((DataSlot) this.dataSlots.get(i)).get());
+            this.remoteDataSlots.set(i, this.dataSlots.get(i).get());
         }
 
         if (this.synchronizer != null) {
@@ -235,7 +235,7 @@ public abstract class AbstractContainerMenu {
         int i;
 
         for (i = 0; i < this.slots.size(); ++i) {
-            ItemStack itemstack = ((Slot) this.slots.get(i)).getItem();
+            ItemStack itemstack = this.slots.get(i).getItem();
 
             Objects.requireNonNull(itemstack);
             Supplier<ItemStack> supplier = Suppliers.memoize(itemstack::copy);
@@ -247,7 +247,7 @@ public abstract class AbstractContainerMenu {
         this.synchronizeCarriedToRemote();
 
         for (i = 0; i < this.dataSlots.size(); ++i) {
-            DataSlot containerproperty = (DataSlot) this.dataSlots.get(i);
+            DataSlot containerproperty = this.dataSlots.get(i);
             int j = containerproperty.get();
 
             if (containerproperty.checkAndClearUpdateFlag()) {
@@ -263,14 +263,14 @@ public abstract class AbstractContainerMenu {
         int i;
 
         for (i = 0; i < this.slots.size(); ++i) {
-            ItemStack itemstack = ((Slot) this.slots.get(i)).getItem();
+            ItemStack itemstack = this.slots.get(i).getItem();
 
             Objects.requireNonNull(itemstack);
             this.triggerSlotListeners(i, itemstack, itemstack::copy);
         }
 
         for (i = 0; i < this.dataSlots.size(); ++i) {
-            DataSlot containerproperty = (DataSlot) this.dataSlots.get(i);
+            DataSlot containerproperty = this.dataSlots.get(i);
 
             if (containerproperty.checkAndClearUpdateFlag()) {
                 this.updateDataSlotListeners(i, containerproperty.get());
@@ -292,10 +292,10 @@ public abstract class AbstractContainerMenu {
     }
 
     private void triggerSlotListeners(int slot, ItemStack stack, Supplier<ItemStack> copySupplier) {
-        ItemStack itemstack1 = (ItemStack) this.lastSlots.get(slot);
+        ItemStack itemstack1 = this.lastSlots.get(slot);
 
         if (!ItemStack.matches(itemstack1, stack)) {
-            ItemStack itemstack2 = (ItemStack) copySupplier.get();
+            ItemStack itemstack2 = copySupplier.get();
 
             this.lastSlots.set(slot, itemstack2);
             Iterator iterator = this.containerListeners.iterator();
@@ -311,10 +311,10 @@ public abstract class AbstractContainerMenu {
 
     private void synchronizeSlotToRemote(int slot, ItemStack stack, Supplier<ItemStack> copySupplier) {
         if (!this.suppressRemoteUpdates) {
-            ItemStack itemstack1 = (ItemStack) this.remoteSlots.get(slot);
+            ItemStack itemstack1 = this.remoteSlots.get(slot);
 
             if (!ItemStack.matches(itemstack1, stack)) {
-                ItemStack itemstack2 = (ItemStack) copySupplier.get();
+                ItemStack itemstack2 = copySupplier.get();
 
                 this.remoteSlots.set(slot, itemstack2);
                 if (this.synchronizer != null) {
@@ -372,7 +372,7 @@ public abstract class AbstractContainerMenu {
     }
 
     public Slot getSlot(int index) {
-        return (Slot) this.slots.get(index);
+        return this.slots.get(index);
     }
 
     public abstract ItemStack quickMoveStack(Player player, int slot);
@@ -393,7 +393,7 @@ public abstract class AbstractContainerMenu {
             crashreportsystemdetails.setDetail("Slot Count", Integer.valueOf(this.slots.size()));
             crashreportsystemdetails.setDetail("Slot", Integer.valueOf(slotIndex));
             crashreportsystemdetails.setDetail("Button", Integer.valueOf(button));
-            crashreportsystemdetails.setDetail("Type", (Object) actionType);
+            crashreportsystemdetails.setDetail("Type", actionType);
             throw new ReportedException(crashreport);
         }
     }
@@ -431,7 +431,7 @@ public abstract class AbstractContainerMenu {
             } else if (this.quickcraftStatus == 2) {
                 if (!this.quickcraftSlots.isEmpty()) {
                     if (false && this.quickcraftSlots.size() == 1) { // CraftBukkit - treat everything as a drag since we are unable to easily call InventoryClickEvent instead
-                        k = ((Slot) this.quickcraftSlots.iterator().next()).index;
+                        k = this.quickcraftSlots.iterator().next().index;
                         this.resetQuickCraft();
                         this.doClick(k, this.quickcraftType, ClickType.PICKUP, player);
                         return;
@@ -531,7 +531,7 @@ public abstract class AbstractContainerMenu {
                         return;
                     }
 
-                    slot = (Slot) this.slots.get(slotIndex);
+                    slot = this.slots.get(slotIndex);
                     if (!slot.mayPickup(player)) {
                         return;
                     }
@@ -544,7 +544,7 @@ public abstract class AbstractContainerMenu {
                         return;
                     }
 
-                    slot = (Slot) this.slots.get(slotIndex);
+                    slot = this.slots.get(slotIndex);
                     itemstack = slot.getItem();
                     ItemStack itemstack4 = this.getCarried();
 
@@ -599,7 +599,7 @@ public abstract class AbstractContainerMenu {
                 int i2;
 
                 if (actionType == ClickType.SWAP) {
-                    slot2 = (Slot) this.slots.get(slotIndex);
+                    slot2 = this.slots.get(slotIndex);
                     itemstack1 = playerinventory.getItem(button);
                     itemstack = slot2.getItem();
                     if (!itemstack1.isEmpty() || !itemstack.isEmpty()) {
@@ -636,19 +636,19 @@ public abstract class AbstractContainerMenu {
                         }
                     }
                 } else if (actionType == ClickType.CLONE && player.getAbilities().instabuild && this.getCarried().isEmpty() && slotIndex >= 0) {
-                    slot2 = (Slot) this.slots.get(slotIndex);
+                    slot2 = this.slots.get(slotIndex);
                     if (slot2.hasItem()) {
                         itemstack1 = slot2.getItem().copy();
                         itemstack1.setCount(itemstack1.getMaxStackSize());
                         this.setCarried(itemstack1);
                     }
                 } else if (actionType == ClickType.THROW && this.getCarried().isEmpty() && slotIndex >= 0) {
-                    slot2 = (Slot) this.slots.get(slotIndex);
+                    slot2 = this.slots.get(slotIndex);
                     k = button == 0 ? 1 : slot2.getItem().getCount();
                     itemstack = slot2.safeTake(k, Integer.MAX_VALUE, player);
                     player.drop(itemstack, true);
                 } else if (actionType == ClickType.PICKUP_ALL && slotIndex >= 0) {
-                    slot2 = (Slot) this.slots.get(slotIndex);
+                    slot2 = this.slots.get(slotIndex);
                     itemstack1 = this.getCarried();
                     if (!itemstack1.isEmpty() && (!slot2.hasItem() || !slot2.mayPickup(player))) {
                         l = button == 0 ? 0 : this.slots.size() - 1;
@@ -656,7 +656,7 @@ public abstract class AbstractContainerMenu {
 
                         for (l1 = 0; l1 < 2; ++l1) {
                             for (int j2 = l; j2 >= 0 && j2 < this.slots.size() && itemstack1.getCount() < itemstack1.getMaxStackSize(); j2 += i2) {
-                                Slot slot3 = (Slot) this.slots.get(j2);
+                                Slot slot3 = this.slots.get(j2);
 
                                 if (slot3.hasItem() && AbstractContainerMenu.canItemQuickReplace(slot3, itemstack1, true) && slot3.mayPickup(player) && this.canTakeItemForPickAll(itemstack1, slot3)) {
                                     ItemStack itemstack5 = slot3.getItem();
@@ -750,7 +750,7 @@ public abstract class AbstractContainerMenu {
 
     public void initializeContents(int revision, List<ItemStack> stacks, ItemStack cursorStack) {
         for (int j = 0; j < stacks.size(); ++j) {
-            this.getSlot(j).initialize((ItemStack) stacks.get(j));
+            this.getSlot(j).initialize(stacks.get(j));
         }
 
         this.carried = cursorStack;
@@ -758,7 +758,7 @@ public abstract class AbstractContainerMenu {
     }
 
     public void setData(int id, int value) {
-        ((DataSlot) this.dataSlots.get(id)).set(value);
+        this.dataSlots.get(id).set(value);
     }
 
     public abstract boolean stillValid(Player player);
@@ -792,7 +792,7 @@ public abstract class AbstractContainerMenu {
                     break;
                 }
 
-                slot = (Slot) this.slots.get(k);
+                slot = this.slots.get(k);
                 itemstack1 = slot.getItem();
                 // Paper start - clone if only a check
                 if (isCheck) {
@@ -843,7 +843,7 @@ public abstract class AbstractContainerMenu {
                     break;
                 }
 
-                slot = (Slot) this.slots.get(k);
+                slot = this.slots.get(k);
                 itemstack1 = slot.getItem();
                 // Paper start - clone if only a check
                 if (isCheck) {
@@ -986,17 +986,17 @@ public abstract class AbstractContainerMenu {
         int i;
 
         for (i = 0; i < handler.slots.size(); ++i) {
-            slot = (Slot) handler.slots.get(i);
+            slot = handler.slots.get(i);
             table.put(slot.container, Integer.valueOf(slot.getContainerSlot()), Integer.valueOf(i));
         }
 
         for (i = 0; i < this.slots.size(); ++i) {
-            slot = (Slot) this.slots.get(i);
-            Integer integer = (Integer) table.get(slot.container, Integer.valueOf(slot.getContainerSlot()));
+            slot = this.slots.get(i);
+            Integer integer = table.get(slot.container, Integer.valueOf(slot.getContainerSlot()));
 
             if (integer != null) {
-                this.lastSlots.set(i, (ItemStack) handler.lastSlots.get(integer.intValue()));
-                this.remoteSlots.set(i, (ItemStack) handler.remoteSlots.get(integer.intValue()));
+                this.lastSlots.set(i, handler.lastSlots.get(integer.intValue()));
+                this.remoteSlots.set(i, handler.remoteSlots.get(integer.intValue()));
             }
         }
 
@@ -1004,7 +1004,7 @@ public abstract class AbstractContainerMenu {
 
     public OptionalInt findSlot(Container inventory, int index) {
         for (int j = 0; j < this.slots.size(); ++j) {
-            Slot slot = (Slot) this.slots.get(j);
+            Slot slot = this.slots.get(j);
 
             if (slot.container == inventory && index == slot.getContainerSlot()) {
                 return OptionalInt.of(j);
diff --git a/src/main/java/net/minecraft/world/inventory/AbstractFurnaceMenu.java b/src/main/java/net/minecraft/world/inventory/AbstractFurnaceMenu.java
index 75996adf2ddd8d3c44f9d8bef4657dbe24617db3..578faf95044d3fff7af3c66ffc11997e2dd74bc6 100644
--- a/src/main/java/net/minecraft/world/inventory/AbstractFurnaceMenu.java
+++ b/src/main/java/net/minecraft/world/inventory/AbstractFurnaceMenu.java
@@ -130,7 +130,7 @@ public abstract class AbstractFurnaceMenu extends RecipeBookMenu<Container> {
     @Override
     public ItemStack quickMoveStack(Player player, int slot) {
         ItemStack itemstack = ItemStack.EMPTY;
-        Slot slot1 = (Slot) this.slots.get(slot);
+        Slot slot1 = this.slots.get(slot);
 
         if (slot1 != null && slot1.hasItem()) {
             ItemStack itemstack1 = slot1.getItem();
diff --git a/src/main/java/net/minecraft/world/inventory/AnvilMenu.java b/src/main/java/net/minecraft/world/inventory/AnvilMenu.java
index 60bd0a0d73546f9c6e6809f292526362b5fdd4b2..524e6462bef72519776ba32b28414cfc783b9d0e 100644
--- a/src/main/java/net/minecraft/world/inventory/AnvilMenu.java
+++ b/src/main/java/net/minecraft/world/inventory/AnvilMenu.java
@@ -187,8 +187,8 @@ public class AnvilMenu extends ItemCombinerMenu {
                         Enchantment enchantment = (Enchantment) iterator.next();
 
                         if (enchantment != null) {
-                            int l1 = ((Integer) map.getOrDefault(enchantment, Integer.valueOf(0))).intValue();
-                            int i2 = ((Integer) map1.get(enchantment)).intValue();
+                            int l1 = map.getOrDefault(enchantment, Integer.valueOf(0)).intValue();
+                            int i2 = map1.get(enchantment).intValue();
 
                             i2 = l1 == i2 ? i2 + 1 : Math.max(i2, l1);
                             boolean flag3 = enchantment.canEnchant(itemstack);
diff --git a/src/main/java/net/minecraft/world/inventory/BeaconMenu.java b/src/main/java/net/minecraft/world/inventory/BeaconMenu.java
index 0b0481e826c125eace3649404b62d0135425ade1..17aa8cada2fc88705473c1d6398d0723b9e814e3 100644
--- a/src/main/java/net/minecraft/world/inventory/BeaconMenu.java
+++ b/src/main/java/net/minecraft/world/inventory/BeaconMenu.java
@@ -101,7 +101,7 @@ public class BeaconMenu extends AbstractContainerMenu {
     @Override
     public ItemStack quickMoveStack(Player player, int slot) {
         ItemStack itemstack = ItemStack.EMPTY;
-        Slot slot1 = (Slot) this.slots.get(slot);
+        Slot slot1 = this.slots.get(slot);
 
         if (slot1 != null && slot1.hasItem()) {
             ItemStack itemstack1 = slot1.getItem();
diff --git a/src/main/java/net/minecraft/world/inventory/BrewingStandMenu.java b/src/main/java/net/minecraft/world/inventory/BrewingStandMenu.java
index 4cfa835857518a5e4fb1b6c7af1e76132efbce97..12fbee36e0eee22bfdd99d01172a2ac795590edf 100644
--- a/src/main/java/net/minecraft/world/inventory/BrewingStandMenu.java
+++ b/src/main/java/net/minecraft/world/inventory/BrewingStandMenu.java
@@ -78,7 +78,7 @@ public class BrewingStandMenu extends AbstractContainerMenu {
     @Override
     public ItemStack quickMoveStack(Player player, int slot) {
         ItemStack itemstack = ItemStack.EMPTY;
-        Slot slot1 = (Slot) this.slots.get(slot);
+        Slot slot1 = this.slots.get(slot);
 
         if (slot1 != null && slot1.hasItem()) {
             ItemStack itemstack1 = slot1.getItem();
diff --git a/src/main/java/net/minecraft/world/inventory/CartographyTableMenu.java b/src/main/java/net/minecraft/world/inventory/CartographyTableMenu.java
index b7b3e7619cf2ec4deba82e7a63cfe70253a5e40f..a6c74d3f502d9c6e084888e5dbc9fd32f2ea6038 100644
--- a/src/main/java/net/minecraft/world/inventory/CartographyTableMenu.java
+++ b/src/main/java/net/minecraft/world/inventory/CartographyTableMenu.java
@@ -101,14 +101,14 @@ public class CartographyTableMenu extends AbstractContainerMenu {
 
             @Override
             public void onTake(net.minecraft.world.entity.player.Player player, ItemStack stack) {
-                ((Slot) CartographyTableMenu.this.slots.get(0)).remove(1);
-                ((Slot) CartographyTableMenu.this.slots.get(1)).remove(1);
+                CartographyTableMenu.this.slots.get(0).remove(1);
+                CartographyTableMenu.this.slots.get(1).remove(1);
                 stack.getItem().onCraftedBy(stack, player.level, player);
                 context.execute((world, blockposition) -> {
                     long j = world.getGameTime();
 
                     if (CartographyTableMenu.this.lastSoundTime != j) {
-                        world.playSound((net.minecraft.world.entity.player.Player) null, blockposition, SoundEvents.UI_CARTOGRAPHY_TABLE_TAKE_RESULT, SoundSource.BLOCKS, 1.0F, 1.0F);
+                        world.playSound(null, blockposition, SoundEvents.UI_CARTOGRAPHY_TABLE_TAKE_RESULT, SoundSource.BLOCKS, 1.0F, 1.0F);
                         CartographyTableMenu.this.lastSoundTime = j;
                     }
 
@@ -199,7 +199,7 @@ public class CartographyTableMenu extends AbstractContainerMenu {
     @Override
     public ItemStack quickMoveStack(net.minecraft.world.entity.player.Player player, int slot) {
         ItemStack itemstack = ItemStack.EMPTY;
-        Slot slot1 = (Slot) this.slots.get(slot);
+        Slot slot1 = this.slots.get(slot);
 
         if (slot1 != null && slot1.hasItem()) {
             ItemStack itemstack1 = slot1.getItem();
diff --git a/src/main/java/net/minecraft/world/inventory/ChestMenu.java b/src/main/java/net/minecraft/world/inventory/ChestMenu.java
index d8c9f7f71257c2d1dab7f0a80cb2b6bee4c4ac59..d6fe2934ae51d5b5804c984a4971f3cb97a57d1c 100644
--- a/src/main/java/net/minecraft/world/inventory/ChestMenu.java
+++ b/src/main/java/net/minecraft/world/inventory/ChestMenu.java
@@ -117,7 +117,7 @@ public class ChestMenu extends AbstractContainerMenu {
     @Override
     public ItemStack quickMoveStack(Player player, int slot) {
         ItemStack itemstack = ItemStack.EMPTY;
-        Slot slot1 = (Slot) this.slots.get(slot);
+        Slot slot1 = this.slots.get(slot);
 
         if (slot1 != null && slot1.hasItem()) {
             ItemStack itemstack1 = slot1.getItem();
diff --git a/src/main/java/net/minecraft/world/inventory/CraftingContainer.java b/src/main/java/net/minecraft/world/inventory/CraftingContainer.java
index 0f5ea66b92813aac4e37c0b10336798ea2b1bcbe..3b2d945d4a878f455292d1c6327d63ebfae26aff 100644
--- a/src/main/java/net/minecraft/world/inventory/CraftingContainer.java
+++ b/src/main/java/net/minecraft/world/inventory/CraftingContainer.java
@@ -116,7 +116,7 @@ public class CraftingContainer implements Container, StackedContentsCompatible {
 
     @Override
     public ItemStack getItem(int slot) {
-        return slot >= this.getContainerSize() ? ItemStack.EMPTY : (ItemStack) this.items.get(slot);
+        return slot >= this.getContainerSize() ? ItemStack.EMPTY : this.items.get(slot);
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/inventory/CraftingMenu.java b/src/main/java/net/minecraft/world/inventory/CraftingMenu.java
index c6820f22abdd9d1d3e065620c19ab93645e07bb7..622dd7887790d7277fe732a986a5ba6a6b273590 100644
--- a/src/main/java/net/minecraft/world/inventory/CraftingMenu.java
+++ b/src/main/java/net/minecraft/world/inventory/CraftingMenu.java
@@ -78,7 +78,7 @@ public class CraftingMenu extends RecipeBookMenu<CraftingContainer> {
             Optional<CraftingRecipe> optional = world.getServer().getRecipeManager().getRecipeFor(RecipeType.CRAFTING, craftingInventory, world);
 
             if (optional.isPresent()) {
-                CraftingRecipe recipecrafting = (CraftingRecipe) optional.get();
+                CraftingRecipe recipecrafting = optional.get();
 
                 if (resultInventory.setRecipeUsed(world, entityplayer, recipecrafting)) {
                     ItemStack itemstack1 = recipecrafting.assemble(craftingInventory);
@@ -136,7 +136,7 @@ public class CraftingMenu extends RecipeBookMenu<CraftingContainer> {
     @Override
     public ItemStack quickMoveStack(Player player, int slot) {
         ItemStack itemstack = ItemStack.EMPTY;
-        Slot slot1 = (Slot) this.slots.get(slot);
+        Slot slot1 = this.slots.get(slot);
 
         if (slot1 != null && slot1.hasItem()) {
             ItemStack itemstack1 = slot1.getItem();
diff --git a/src/main/java/net/minecraft/world/inventory/DispenserMenu.java b/src/main/java/net/minecraft/world/inventory/DispenserMenu.java
index a6b75ee21e96f69b2a565eb451c16f32d4d0cdb6..a384a74833139fa3a0a42945fd1934d49de54e1d 100644
--- a/src/main/java/net/minecraft/world/inventory/DispenserMenu.java
+++ b/src/main/java/net/minecraft/world/inventory/DispenserMenu.java
@@ -68,7 +68,7 @@ public class DispenserMenu extends AbstractContainerMenu {
     @Override
     public ItemStack quickMoveStack(Player player, int slot) {
         ItemStack itemstack = ItemStack.EMPTY;
-        Slot slot1 = (Slot) this.slots.get(slot);
+        Slot slot1 = this.slots.get(slot);
 
         if (slot1 != null && slot1.hasItem()) {
             ItemStack itemstack1 = slot1.getItem();
diff --git a/src/main/java/net/minecraft/world/inventory/EnchantmentMenu.java b/src/main/java/net/minecraft/world/inventory/EnchantmentMenu.java
index a7bda9c3a690d8fb7fbc04f39545456a8862044d..f62d71d0d620a393d9d46b2a9239bc2bb28d04f7 100644
--- a/src/main/java/net/minecraft/world/inventory/EnchantmentMenu.java
+++ b/src/main/java/net/minecraft/world/inventory/EnchantmentMenu.java
@@ -141,7 +141,7 @@ public class EnchantmentMenu extends AbstractContainerMenu {
                         }
                     }
 
-                    this.random.setSeed((long) this.enchantmentSeed.get());
+                    this.random.setSeed(this.enchantmentSeed.get());
 
                     int j;
 
@@ -159,7 +159,7 @@ public class EnchantmentMenu extends AbstractContainerMenu {
                             List<EnchantmentInstance> list = this.getEnchantmentList(itemstack, j, this.costs[j]);
 
                             if (list != null && !list.isEmpty()) {
-                                EnchantmentInstance weightedrandomenchant = (EnchantmentInstance) list.get(this.random.nextInt(list.size()));
+                                EnchantmentInstance weightedrandomenchant = list.get(this.random.nextInt(list.size()));
 
                                 this.enchantClue[j] = BuiltInRegistries.ENCHANTMENT.getId(weightedrandomenchant.enchantment);
                                 this.levelClue[j] = weightedrandomenchant.level;
@@ -297,7 +297,7 @@ public class EnchantmentMenu extends AbstractContainerMenu {
                         this.enchantSlots.setChanged();
                         this.enchantmentSeed.set(player.getEnchantmentSeed());
                         this.slotsChanged(this.enchantSlots);
-                        world.playSound((net.minecraft.world.entity.player.Player) null, blockposition, SoundEvents.ENCHANTMENT_TABLE_USE, SoundSource.BLOCKS, 1.0F, world.random.nextFloat() * 0.1F + 0.9F);
+                        world.playSound(null, blockposition, SoundEvents.ENCHANTMENT_TABLE_USE, SoundSource.BLOCKS, 1.0F, world.random.nextFloat() * 0.1F + 0.9F);
                     }
 
                 });
@@ -314,7 +314,7 @@ public class EnchantmentMenu extends AbstractContainerMenu {
     }
 
     private List<EnchantmentInstance> getEnchantmentList(ItemStack stack, int slot, int level) {
-        this.random.setSeed((long) (this.enchantmentSeed.get() + slot));
+        this.random.setSeed(this.enchantmentSeed.get() + slot);
         List<EnchantmentInstance> list = EnchantmentHelper.selectEnchantment(this.random, stack, level, false);
 
         if (stack.is(Items.BOOK) && list.size() > 1) {
@@ -351,7 +351,7 @@ public class EnchantmentMenu extends AbstractContainerMenu {
     @Override
     public ItemStack quickMoveStack(net.minecraft.world.entity.player.Player player, int slot) {
         ItemStack itemstack = ItemStack.EMPTY;
-        Slot slot1 = (Slot) this.slots.get(slot);
+        Slot slot1 = this.slots.get(slot);
 
         if (slot1 != null && slot1.hasItem()) {
             ItemStack itemstack1 = slot1.getItem();
@@ -370,7 +370,7 @@ public class EnchantmentMenu extends AbstractContainerMenu {
                     return ItemStack.EMPTY;
                 }
             } else {
-                if (((Slot) this.slots.get(0)).hasItem() || !((Slot) this.slots.get(0)).mayPlace(itemstack1)) {
+                if (this.slots.get(0).hasItem() || !this.slots.get(0).mayPlace(itemstack1)) {
                     return ItemStack.EMPTY;
                 }
 
@@ -378,7 +378,7 @@ public class EnchantmentMenu extends AbstractContainerMenu {
 
                 itemstack2.setCount(1);
                 itemstack1.shrink(1);
-                ((Slot) this.slots.get(0)).set(itemstack2);
+                this.slots.get(0).set(itemstack2);
             }
 
             if (itemstack1.isEmpty()) {
diff --git a/src/main/java/net/minecraft/world/inventory/GrindstoneMenu.java b/src/main/java/net/minecraft/world/inventory/GrindstoneMenu.java
index 5015a304efaa2c659472b9985db01662b7053da5..052c0d1eda95981bd3b269e18ed403d8c4791334 100644
--- a/src/main/java/net/minecraft/world/inventory/GrindstoneMenu.java
+++ b/src/main/java/net/minecraft/world/inventory/GrindstoneMenu.java
@@ -127,8 +127,8 @@ public class GrindstoneMenu extends AbstractContainerMenu {
 
                 while (iterator.hasNext()) {
                     Entry<Enchantment, Integer> entry = (Entry) iterator.next();
-                    Enchantment enchantment = (Enchantment) entry.getKey();
-                    Integer integer = (Integer) entry.getValue();
+                    Enchantment enchantment = entry.getKey();
+                    Integer integer = entry.getValue();
 
                     if (!enchantment.isCurse()) {
                         j += enchantment.getMinCost(integer.intValue());
@@ -228,10 +228,10 @@ public class GrindstoneMenu extends AbstractContainerMenu {
 
         while (iterator.hasNext()) {
             Entry<Enchantment, Integer> entry = (Entry) iterator.next();
-            Enchantment enchantment = (Enchantment) entry.getKey();
+            Enchantment enchantment = entry.getKey();
 
             if (!enchantment.isCurse() || EnchantmentHelper.getItemEnchantmentLevel(enchantment, itemstack2) == 0) {
-                itemstack2.enchant(enchantment, ((Integer) entry.getValue()).intValue());
+                itemstack2.enchant(enchantment, entry.getValue().intValue());
             }
         }
 
@@ -250,8 +250,8 @@ public class GrindstoneMenu extends AbstractContainerMenu {
         }
 
         itemstack1.setCount(amount);
-        Map<Enchantment, Integer> map = (Map) EnchantmentHelper.getEnchantments(item).entrySet().stream().filter((entry) -> {
-            return ((Enchantment) entry.getKey()).isCurse();
+        Map<Enchantment, Integer> map = EnchantmentHelper.getEnchantments(item).entrySet().stream().filter((entry) -> {
+            return entry.getKey().isCurse();
         }).collect(Collectors.toMap(Entry::getKey, Entry::getValue));
 
         EnchantmentHelper.setEnchantments(map, itemstack1);
@@ -287,7 +287,7 @@ public class GrindstoneMenu extends AbstractContainerMenu {
     @Override
     public ItemStack quickMoveStack(net.minecraft.world.entity.player.Player player, int slot) {
         ItemStack itemstack = ItemStack.EMPTY;
-        Slot slot1 = (Slot) this.slots.get(slot);
+        Slot slot1 = this.slots.get(slot);
 
         if (slot1 != null && slot1.hasItem()) {
             ItemStack itemstack1 = slot1.getItem();
diff --git a/src/main/java/net/minecraft/world/inventory/HopperMenu.java b/src/main/java/net/minecraft/world/inventory/HopperMenu.java
index 32fed8971b5887e90aeb05a45d9e3f71ee136186..5a26d520b51e12aadf9dea7b5ba2cd08bb134fdc 100644
--- a/src/main/java/net/minecraft/world/inventory/HopperMenu.java
+++ b/src/main/java/net/minecraft/world/inventory/HopperMenu.java
@@ -71,7 +71,7 @@ public class HopperMenu extends AbstractContainerMenu {
     @Override
     public ItemStack quickMoveStack(Player player, int slot) {
         ItemStack itemstack = ItemStack.EMPTY;
-        Slot slot1 = (Slot) this.slots.get(slot);
+        Slot slot1 = this.slots.get(slot);
 
         if (slot1 != null && slot1.hasItem()) {
             ItemStack itemstack1 = slot1.getItem();
diff --git a/src/main/java/net/minecraft/world/inventory/HorseInventoryMenu.java b/src/main/java/net/minecraft/world/inventory/HorseInventoryMenu.java
index 6223c70abcfb7ed935d770a521b57b0245f2d4bf..2ca153903eb4809b31faab5d48148b6a26841fa7 100644
--- a/src/main/java/net/minecraft/world/inventory/HorseInventoryMenu.java
+++ b/src/main/java/net/minecraft/world/inventory/HorseInventoryMenu.java
@@ -32,7 +32,7 @@ public class HorseInventoryMenu extends AbstractContainerMenu {
     }
 
     public HorseInventoryMenu(int syncId, Inventory playerInventory, Container inventory, final AbstractHorse entity) {
-        super((MenuType) null, syncId);
+        super(null, syncId);
         this.player = playerInventory;
         // CraftBukkit end
         this.horseContainer = inventory;
@@ -104,7 +104,7 @@ public class HorseInventoryMenu extends AbstractContainerMenu {
     @Override
     public ItemStack quickMoveStack(Player player, int slot) {
         ItemStack itemstack = ItemStack.EMPTY;
-        Slot slot1 = (Slot) this.slots.get(slot);
+        Slot slot1 = this.slots.get(slot);
 
         if (slot1 != null && slot1.hasItem()) {
             ItemStack itemstack1 = slot1.getItem();
diff --git a/src/main/java/net/minecraft/world/inventory/InventoryMenu.java b/src/main/java/net/minecraft/world/inventory/InventoryMenu.java
index 0951e194718ed466987658c6a3cda19c59a47d24..78146d79d0f8c9b87e4b1a397eec7b059c4a89b9 100644
--- a/src/main/java/net/minecraft/world/inventory/InventoryMenu.java
+++ b/src/main/java/net/minecraft/world/inventory/InventoryMenu.java
@@ -49,7 +49,7 @@ public class InventoryMenu extends RecipeBookMenu<CraftingContainer> {
     // CraftBukkit end
 
     public InventoryMenu(Inventory inventory, boolean onServer, final Player owner) {
-        super((MenuType) null, 0);
+        super(null, 0);
         this.active = onServer;
         this.owner = owner;
         // CraftBukkit start
@@ -166,7 +166,7 @@ public class InventoryMenu extends RecipeBookMenu<CraftingContainer> {
     @Override
     public ItemStack quickMoveStack(Player player, int slot) {
         ItemStack itemstack = ItemStack.EMPTY;
-        Slot slot1 = (Slot) this.slots.get(slot);
+        Slot slot1 = this.slots.get(slot);
 
         if (slot1 != null && slot1.hasItem()) {
             ItemStack itemstack1 = slot1.getItem();
@@ -188,13 +188,13 @@ public class InventoryMenu extends RecipeBookMenu<CraftingContainer> {
                 if (!this.moveItemStackTo(itemstack1, 9, 45, false)) {
                     return ItemStack.EMPTY;
                 }
-            } else if (enumitemslot.getType() == EquipmentSlot.Type.ARMOR && !((Slot) this.slots.get(8 - enumitemslot.getIndex())).hasItem()) {
+            } else if (enumitemslot.getType() == EquipmentSlot.Type.ARMOR && !this.slots.get(8 - enumitemslot.getIndex()).hasItem()) {
                 int j = 8 - enumitemslot.getIndex();
 
                 if (!this.moveItemStackTo(itemstack1, j, j + 1, false)) {
                     return ItemStack.EMPTY;
                 }
-            } else if (enumitemslot == EquipmentSlot.OFFHAND && !((Slot) this.slots.get(45)).hasItem()) {
+            } else if (enumitemslot == EquipmentSlot.OFFHAND && !this.slots.get(45).hasItem()) {
                 if (!this.moveItemStackTo(itemstack1, 45, 46, false)) {
                     return ItemStack.EMPTY;
                 }
diff --git a/src/main/java/net/minecraft/world/inventory/ItemCombinerMenu.java b/src/main/java/net/minecraft/world/inventory/ItemCombinerMenu.java
index d58208f13c5a993cd8072661763a4ef1de5b21f4..bc719b187a9078b17ee0daa56307a1d34f9a50b0 100644
--- a/src/main/java/net/minecraft/world/inventory/ItemCombinerMenu.java
+++ b/src/main/java/net/minecraft/world/inventory/ItemCombinerMenu.java
@@ -94,9 +94,9 @@ public abstract class ItemCombinerMenu extends AbstractContainerMenu {
     @Override
     public boolean stillValid(Player player) {
         if (!this.checkReachable) return true; // CraftBukkit
-        return ((Boolean) this.access.evaluate((world, blockposition) -> {
+        return this.access.evaluate((world, blockposition) -> {
             return Boolean.valueOf(!this.isValidBlock(world.getBlockState(blockposition)) ? false : player.distanceToSqr((double) blockposition.getX() + 0.5D, (double) blockposition.getY() + 0.5D, (double) blockposition.getZ() + 0.5D) <= 64.0D);
-        }, Boolean.TRUE)).booleanValue();
+        }, Boolean.TRUE).booleanValue();
     }
 
     protected boolean shouldQuickMoveToAdditionalSlot(ItemStack stack) {
@@ -106,7 +106,7 @@ public abstract class ItemCombinerMenu extends AbstractContainerMenu {
     @Override
     public ItemStack quickMoveStack(Player player, int slot) {
         ItemStack itemstack = ItemStack.EMPTY;
-        Slot slot1 = (Slot) this.slots.get(slot);
+        Slot slot1 = this.slots.get(slot);
 
         if (slot1 != null && slot1.hasItem()) {
             ItemStack itemstack1 = slot1.getItem();
diff --git a/src/main/java/net/minecraft/world/inventory/LoomMenu.java b/src/main/java/net/minecraft/world/inventory/LoomMenu.java
index 99620b1f33da6eba5b661e108f018f94029170c6..9396e6e9d1fd6439d6b1c0fb616e4a567236edc1 100644
--- a/src/main/java/net/minecraft/world/inventory/LoomMenu.java
+++ b/src/main/java/net/minecraft/world/inventory/LoomMenu.java
@@ -139,7 +139,7 @@ public class LoomMenu extends AbstractContainerMenu {
                     long j = world.getGameTime();
 
                     if (LoomMenu.this.lastSoundTime != j) {
-                        world.playSound((net.minecraft.world.entity.player.Player) null, blockposition, SoundEvents.UI_LOOM_TAKE_RESULT, SoundSource.BLOCKS, 1.0F, 1.0F);
+                        world.playSound(null, blockposition, SoundEvents.UI_LOOM_TAKE_RESULT, SoundSource.BLOCKS, 1.0F, 1.0F);
                         LoomMenu.this.lastSoundTime = j;
                     }
 
@@ -244,12 +244,12 @@ public class LoomMenu extends AbstractContainerMenu {
 
             if (this.selectablePatterns.size() == 1) {
                 this.selectedBannerPatternIndex.set(0);
-                holder = (Holder) this.selectablePatterns.get(0);
+                holder = this.selectablePatterns.get(0);
             } else if (!flag) {
                 this.selectedBannerPatternIndex.set(-1);
                 holder = null;
             } else {
-                Holder<BannerPattern> holder1 = (Holder) list.get(i);
+                Holder<BannerPattern> holder1 = list.get(i);
                 int j = this.selectablePatterns.indexOf(holder1);
 
                 if (j != -1) {
@@ -299,7 +299,7 @@ public class LoomMenu extends AbstractContainerMenu {
     @Override
     public ItemStack quickMoveStack(net.minecraft.world.entity.player.Player player, int slot) {
         ItemStack itemstack = ItemStack.EMPTY;
-        Slot slot1 = (Slot) this.slots.get(slot);
+        Slot slot1 = this.slots.get(slot);
 
         if (slot1 != null && slot1.hasItem()) {
             ItemStack itemstack1 = slot1.getItem();
@@ -389,7 +389,7 @@ public class LoomMenu extends AbstractContainerMenu {
 
             CompoundTag nbttagcompound1 = new CompoundTag();
 
-            nbttagcompound1.putString("Pattern", ((BannerPattern) pattern.value()).getHashname());
+            nbttagcompound1.putString("Pattern", pattern.value().getHashname());
             nbttagcompound1.putInt("Color", enumcolor.getId());
             nbttaglist.add(nbttagcompound1);
             BlockItem.setBlockEntityData(itemstack2, BlockEntityType.BANNER, nbttagcompound);
diff --git a/src/main/java/net/minecraft/world/inventory/MenuType.java b/src/main/java/net/minecraft/world/inventory/MenuType.java
index 7494e5903f127ccec2900714ab4da473ec6fb86e..ce45985226455fab9a3d2722c18e989bd4f9874c 100644
--- a/src/main/java/net/minecraft/world/inventory/MenuType.java
+++ b/src/main/java/net/minecraft/world/inventory/MenuType.java
@@ -35,7 +35,7 @@ public class MenuType<T extends AbstractContainerMenu> {
     private final MenuType.MenuSupplier<T> constructor;
 
     private static <T extends AbstractContainerMenu> MenuType<T> register(String id, MenuType.MenuSupplier<T> factory) {
-        return (MenuType) Registry.register(BuiltInRegistries.MENU, id, new MenuType<>(factory));
+        return Registry.register(BuiltInRegistries.MENU, id, new MenuType<>(factory));
     }
 
     private MenuType(MenuType.MenuSupplier<T> factory) {
diff --git a/src/main/java/net/minecraft/world/inventory/MerchantContainer.java b/src/main/java/net/minecraft/world/inventory/MerchantContainer.java
index 083e50e27685f441ede4c75e913d671fe45d1d15..ea1ca891459b2cfa82dcf77ecc12daa3f3526439 100644
--- a/src/main/java/net/minecraft/world/inventory/MerchantContainer.java
+++ b/src/main/java/net/minecraft/world/inventory/MerchantContainer.java
@@ -43,7 +43,7 @@ public class MerchantContainer implements Container {
 
     public void onClose(CraftHumanEntity who) {
         this.transaction.remove(who);
-        this.merchant.setTradingPlayer((Player) null); // SPIGOT-4860
+        this.merchant.setTradingPlayer(null); // SPIGOT-4860
     }
 
     public List<HumanEntity> getViewers() {
@@ -98,12 +98,12 @@ public class MerchantContainer implements Container {
 
     @Override
     public ItemStack getItem(int slot) {
-        return (ItemStack) this.itemStacks.get(slot);
+        return this.itemStacks.get(slot);
     }
 
     @Override
     public ItemStack removeItem(int slot, int amount) {
-        ItemStack itemstack = (ItemStack) this.itemStacks.get(slot);
+        ItemStack itemstack = this.itemStacks.get(slot);
 
         if (slot == 2 && !itemstack.isEmpty()) {
             return ContainerHelper.removeItem(this.itemStacks, slot, itemstack.getCount());
@@ -155,12 +155,12 @@ public class MerchantContainer implements Container {
         ItemStack itemstack;
         ItemStack itemstack1;
 
-        if (((ItemStack) this.itemStacks.get(0)).isEmpty()) {
-            itemstack = (ItemStack) this.itemStacks.get(1);
+        if (this.itemStacks.get(0).isEmpty()) {
+            itemstack = this.itemStacks.get(1);
             itemstack1 = ItemStack.EMPTY;
         } else {
-            itemstack = (ItemStack) this.itemStacks.get(0);
-            itemstack1 = (ItemStack) this.itemStacks.get(1);
+            itemstack = this.itemStacks.get(0);
+            itemstack1 = this.itemStacks.get(1);
         }
 
         if (itemstack.isEmpty()) {
diff --git a/src/main/java/net/minecraft/world/inventory/MerchantMenu.java b/src/main/java/net/minecraft/world/inventory/MerchantMenu.java
index 5f86998b006a1c10ae0adcd6a10188e43c1e4187..92343d270c2f5fd19f5dda6597d1b57bd2f7c73b 100644
--- a/src/main/java/net/minecraft/world/inventory/MerchantMenu.java
+++ b/src/main/java/net/minecraft/world/inventory/MerchantMenu.java
@@ -127,7 +127,7 @@ public class MerchantMenu extends AbstractContainerMenu {
     @Override
     public ItemStack quickMoveStack(Player player, int slot) {
         ItemStack itemstack = ItemStack.EMPTY;
-        Slot slot1 = (Slot) this.slots.get(slot);
+        Slot slot1 = this.slots.get(slot);
 
         if (slot1 != null && slot1.hasItem()) {
             ItemStack itemstack1 = slot1.getItem();
@@ -196,7 +196,7 @@ public class MerchantMenu extends AbstractContainerMenu {
     @Override
     public void removed(Player player) {
         super.removed(player);
-        this.trader.setTradingPlayer((Player) null);
+        this.trader.setTradingPlayer(null);
         if (!this.trader.isClientSide()) {
             if (player.isAlive() && (!(player instanceof ServerPlayer) || !((ServerPlayer) player).hasDisconnected())) {
                 if (player instanceof ServerPlayer) {
@@ -242,10 +242,10 @@ public class MerchantMenu extends AbstractContainerMenu {
             }
 
             if (this.tradeContainer.getItem(0).isEmpty() && this.tradeContainer.getItem(1).isEmpty()) {
-                ItemStack itemstack2 = ((MerchantOffer) this.getOffers().get(recipeIndex)).getCostA();
+                ItemStack itemstack2 = this.getOffers().get(recipeIndex).getCostA();
 
                 this.moveFromInventoryToPaymentSlot(0, itemstack2);
-                ItemStack itemstack3 = ((MerchantOffer) this.getOffers().get(recipeIndex)).getCostB();
+                ItemStack itemstack3 = this.getOffers().get(recipeIndex).getCostB();
 
                 this.moveFromInventoryToPaymentSlot(1, itemstack3);
             }
@@ -256,7 +256,7 @@ public class MerchantMenu extends AbstractContainerMenu {
     private void moveFromInventoryToPaymentSlot(int slot, ItemStack stack) {
         if (!stack.isEmpty()) {
             for (int j = 3; j < 39; ++j) {
-                ItemStack itemstack1 = ((Slot) this.slots.get(j)).getItem();
+                ItemStack itemstack1 = this.slots.get(j).getItem();
 
                 if (!itemstack1.isEmpty() && ItemStack.isSameItemSameTags(stack, itemstack1)) {
                     ItemStack itemstack2 = this.tradeContainer.getItem(slot);
diff --git a/src/main/java/net/minecraft/world/inventory/ResultContainer.java b/src/main/java/net/minecraft/world/inventory/ResultContainer.java
index 8bed6dde4bdaae2f2cb8aa018f2d9a093191bbb3..b0cdf430d129ef07402127e5f654908adf998e25 100644
--- a/src/main/java/net/minecraft/world/inventory/ResultContainer.java
+++ b/src/main/java/net/minecraft/world/inventory/ResultContainer.java
@@ -81,7 +81,7 @@ public class ResultContainer implements Container, RecipeHolder {
 
     @Override
     public ItemStack getItem(int slot) {
-        return (ItemStack) this.itemStacks.get(0);
+        return this.itemStacks.get(0);
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/inventory/ShulkerBoxMenu.java b/src/main/java/net/minecraft/world/inventory/ShulkerBoxMenu.java
index 4511e15aefd0124ede746d3fa874d703f67ec4f2..f496ce7c4327b0e7bb05a2c83129684f542646ab 100644
--- a/src/main/java/net/minecraft/world/inventory/ShulkerBoxMenu.java
+++ b/src/main/java/net/minecraft/world/inventory/ShulkerBoxMenu.java
@@ -73,7 +73,7 @@ public class ShulkerBoxMenu extends AbstractContainerMenu {
     @Override
     public ItemStack quickMoveStack(Player player, int slot) {
         ItemStack itemstack = ItemStack.EMPTY;
-        Slot slot1 = (Slot) this.slots.get(slot);
+        Slot slot1 = this.slots.get(slot);
 
         if (slot1 != null && slot1.hasItem()) {
             ItemStack itemstack1 = slot1.getItem();
diff --git a/src/main/java/net/minecraft/world/inventory/SmithingMenu.java b/src/main/java/net/minecraft/world/inventory/SmithingMenu.java
index c4cdf54dc5f7f84474a7af7ff43c5f986311b210..93412ccaf725fb577d074ef7e33ac2d9b36bb459 100644
--- a/src/main/java/net/minecraft/world/inventory/SmithingMenu.java
+++ b/src/main/java/net/minecraft/world/inventory/SmithingMenu.java
@@ -67,7 +67,7 @@ public class SmithingMenu extends ItemCombinerMenu {
         if (list.isEmpty()) {
             org.bukkit.craftbukkit.event.CraftEventFactory.callPrepareSmithingEvent(this.getBukkitView(), ItemStack.EMPTY); // CraftBukkit
         } else {
-            UpgradeRecipe recipesmithing = (UpgradeRecipe) list.get(0);
+            UpgradeRecipe recipesmithing = list.get(0);
             ItemStack itemstack = recipesmithing.assemble(this.inputSlots);
 
             if (itemstack.isItemEnabled(this.level.enabledFeatures())) {
diff --git a/src/main/java/net/minecraft/world/inventory/StonecutterMenu.java b/src/main/java/net/minecraft/world/inventory/StonecutterMenu.java
index 5c51c048aecf8eae8992f2e82010ee7e02517007..f8deaf1c0d9500b494184a76d5a0b12689fb55e4 100644
--- a/src/main/java/net/minecraft/world/inventory/StonecutterMenu.java
+++ b/src/main/java/net/minecraft/world/inventory/StonecutterMenu.java
@@ -106,7 +106,7 @@ public class StonecutterMenu extends AbstractContainerMenu {
                     long j = world.getGameTime();
 
                     if (StonecutterMenu.this.lastSoundTime != j) {
-                        world.playSound((net.minecraft.world.entity.player.Player) null, blockposition, SoundEvents.UI_STONECUTTER_TAKE_RESULT, SoundSource.BLOCKS, 1.0F, 1.0F);
+                        world.playSound(null, blockposition, SoundEvents.UI_STONECUTTER_TAKE_RESULT, SoundSource.BLOCKS, 1.0F, 1.0F);
                         StonecutterMenu.this.lastSoundTime = j;
                     }
 
@@ -213,7 +213,7 @@ public class StonecutterMenu extends AbstractContainerMenu {
 
     void setupResultSlot() {
         if (!this.recipes.isEmpty() && this.isValidRecipeIndex(this.selectedRecipeIndex.get())) {
-            StonecutterRecipe recipestonecutting = (StonecutterRecipe) this.recipes.get(this.selectedRecipeIndex.get());
+            StonecutterRecipe recipestonecutting = this.recipes.get(this.selectedRecipeIndex.get());
             ItemStack itemstack = recipestonecutting.assemble(this.container);
 
             if (itemstack.isItemEnabled(this.level.enabledFeatures())) {
@@ -246,7 +246,7 @@ public class StonecutterMenu extends AbstractContainerMenu {
     @Override
     public ItemStack quickMoveStack(net.minecraft.world.entity.player.Player player, int slot) {
         ItemStack itemstack = ItemStack.EMPTY;
-        Slot slot1 = (Slot) this.slots.get(slot);
+        Slot slot1 = this.slots.get(slot);
 
         if (slot1 != null && slot1.hasItem()) {
             ItemStack itemstack1 = slot1.getItem();
diff --git a/src/main/java/net/minecraft/world/item/ArmorItem.java b/src/main/java/net/minecraft/world/item/ArmorItem.java
index 9c8604376228c02f8bbd9a15673fbdf5097e7cb2..422150661fe75406181d5cf68477b225d28f4e76 100644
--- a/src/main/java/net/minecraft/world/item/ArmorItem.java
+++ b/src/main/java/net/minecraft/world/item/ArmorItem.java
@@ -48,13 +48,13 @@ public class ArmorItem extends Item implements Wearable {
     private final Multimap<Attribute, AttributeModifier> defaultModifiers;
 
     public static boolean dispenseArmor(BlockSource pointer, ItemStack armor) {
-        BlockPos blockposition = pointer.getPos().relative((Direction) pointer.getBlockState().getValue(DispenserBlock.FACING));
+        BlockPos blockposition = pointer.getPos().relative(pointer.getBlockState().getValue(DispenserBlock.FACING));
         List<LivingEntity> list = pointer.getLevel().getEntitiesOfClass(LivingEntity.class, new AABB(blockposition), EntitySelector.NO_SPECTATORS.and(new EntitySelector.MobCanWearArmorEntitySelector(armor)));
 
         if (list.isEmpty()) {
             return false;
         } else {
-            LivingEntity entityliving = (LivingEntity) list.get(0);
+            LivingEntity entityliving = list.get(0);
             EquipmentSlot enumitemslot = Mob.getEquipmentSlotForItem(armor);
             ItemStack itemstack1 = armor.copyWithCount(1); // Paper - shrink below and single item in event
             // CraftBukkit start
@@ -77,7 +77,7 @@ public class ArmorItem extends Item implements Wearable {
                 shrink = false; // Paper - shrink below
                 // Chain to handler for new item
                 ItemStack eventStack = CraftItemStack.asNMSCopy(event.getItem());
-                DispenseItemBehavior idispensebehavior = (DispenseItemBehavior) DispenserBlock.DISPENSER_REGISTRY.get(eventStack.getItem());
+                DispenseItemBehavior idispensebehavior = DispenserBlock.DISPENSER_REGISTRY.get(eventStack.getItem());
                 if (idispensebehavior != DispenseItemBehavior.NOOP && idispensebehavior != ArmorItem.DISPENSE_ITEM_BEHAVIOR) {
                     idispensebehavior.dispense(pointer, eventStack);
                     return true;
@@ -107,10 +107,10 @@ public class ArmorItem extends Item implements Wearable {
         Builder<Attribute, AttributeModifier> builder = ImmutableMultimap.builder();
         UUID uuid = ArmorItem.ARMOR_MODIFIER_UUID_PER_SLOT[slot.getIndex()];
 
-        builder.put(Attributes.ARMOR, new AttributeModifier(uuid, "Armor modifier", (double) this.defense, AttributeModifier.Operation.ADDITION));
-        builder.put(Attributes.ARMOR_TOUGHNESS, new AttributeModifier(uuid, "Armor toughness", (double) this.toughness, AttributeModifier.Operation.ADDITION));
+        builder.put(Attributes.ARMOR, new AttributeModifier(uuid, "Armor modifier", this.defense, AttributeModifier.Operation.ADDITION));
+        builder.put(Attributes.ARMOR_TOUGHNESS, new AttributeModifier(uuid, "Armor toughness", this.toughness, AttributeModifier.Operation.ADDITION));
         if (material == ArmorMaterials.NETHERITE) {
-            builder.put(Attributes.KNOCKBACK_RESISTANCE, new AttributeModifier(uuid, "Armor knockback resistance", (double) this.knockbackResistance, AttributeModifier.Operation.ADDITION));
+            builder.put(Attributes.KNOCKBACK_RESISTANCE, new AttributeModifier(uuid, "Armor knockback resistance", this.knockbackResistance, AttributeModifier.Operation.ADDITION));
         }
 
         this.defaultModifiers = builder.build();
diff --git a/src/main/java/net/minecraft/world/item/ArmorStandItem.java b/src/main/java/net/minecraft/world/item/ArmorStandItem.java
index 07850a88f3b8f834669394b733b9dca3968dfabc..fbc6505f05f4e62346c941e18388ddebdafa55e4 100644
--- a/src/main/java/net/minecraft/world/item/ArmorStandItem.java
+++ b/src/main/java/net/minecraft/world/item/ArmorStandItem.java
@@ -42,7 +42,7 @@ public class ArmorStandItem extends Item {
             Vec3 vec3d = Vec3.atBottomCenterOf(blockposition);
             AABB axisalignedbb = EntityType.ARMOR_STAND.getDimensions().makeBoundingBox(vec3d.x(), vec3d.y(), vec3d.z());
 
-            if (world.noCollision((Entity) null, axisalignedbb) && world.getEntities((Entity) null, axisalignedbb).isEmpty()) {
+            if (world.noCollision(null, axisalignedbb) && world.getEntities(null, axisalignedbb).isEmpty()) {
                 if (world instanceof ServerLevel) {
                     ServerLevel worldserver = (ServerLevel) world;
                     Consumer<ArmorStand> consumer = EntityType.appendCustomEntityStackConfig((entityarmorstand) -> {
@@ -63,7 +63,7 @@ public class ArmorStandItem extends Item {
                     }
                     // CraftBukkit end
                     worldserver.addFreshEntityWithPassengers(entityarmorstand);
-                    world.playSound((Player) null, entityarmorstand.getX(), entityarmorstand.getY(), entityarmorstand.getZ(), SoundEvents.ARMOR_STAND_PLACE, SoundSource.BLOCKS, 0.75F, 0.8F);
+                    world.playSound(null, entityarmorstand.getX(), entityarmorstand.getY(), entityarmorstand.getZ(), SoundEvents.ARMOR_STAND_PLACE, SoundSource.BLOCKS, 0.75F, 0.8F);
                     entityarmorstand.gameEvent(GameEvent.ENTITY_PLACE, context.getPlayer());
                 }
 
diff --git a/src/main/java/net/minecraft/world/item/BlockItem.java b/src/main/java/net/minecraft/world/item/BlockItem.java
index 42eea1213292ac29f25b139c8863ecbc5278487a..be52e462143e007a1ef0e5cb7f6f1322cc376c2e 100644
--- a/src/main/java/net/minecraft/world/item/BlockItem.java
+++ b/src/main/java/net/minecraft/world/item/BlockItem.java
@@ -202,8 +202,8 @@ public class BlockItem extends Item {
     }
 
     private static <T extends Comparable<T>> BlockState updateState(BlockState state, Property<T> property, String name) {
-        return (BlockState) property.getValue(name).map((comparable) -> {
-            return (BlockState) state.setValue(property, comparable);
+        return property.getValue(name).map((comparable) -> {
+            return state.setValue(property, comparable);
         }).orElse(state);
     }
 
diff --git a/src/main/java/net/minecraft/world/item/BoatItem.java b/src/main/java/net/minecraft/world/item/BoatItem.java
index 1a95ac11a2fbc811c89afa3adf38e0fc9eaab09b..cd2aa6cbf296cb88deeddbe477298c1a0b71a3b3 100644
--- a/src/main/java/net/minecraft/world/item/BoatItem.java
+++ b/src/main/java/net/minecraft/world/item/BoatItem.java
@@ -41,7 +41,7 @@ public class BoatItem extends Item {
         } else {
             Vec3 vec3d = user.getViewVector(1.0F);
             double d0 = 5.0D;
-            List<Entity> list = world.getEntities((Entity) user, user.getBoundingBox().expandTowards(vec3d.scale(5.0D)).inflate(1.0D), BoatItem.ENTITY_PREDICATE);
+            List<Entity> list = world.getEntities(user, user.getBoundingBox().expandTowards(vec3d.scale(5.0D)).inflate(1.0D), BoatItem.ENTITY_PREDICATE);
 
             if (!list.isEmpty()) {
                 Vec3 vec3d1 = user.getEyePosition();
@@ -49,7 +49,7 @@ public class BoatItem extends Item {
 
                 while (iterator.hasNext()) {
                     Entity entity = (Entity) iterator.next();
-                    AABB axisalignedbb = entity.getBoundingBox().inflate((double) entity.getPickRadius());
+                    AABB axisalignedbb = entity.getBoundingBox().inflate(entity.getPickRadius());
 
                     if (axisalignedbb.contains(vec3d1)) {
                         return InteractionResultHolder.pass(itemstack);
@@ -82,7 +82,7 @@ public class BoatItem extends Item {
                             return InteractionResultHolder.pass(itemstack);
                         }
                         // CraftBukkit end
-                        world.gameEvent((Entity) user, GameEvent.ENTITY_PLACE, movingobjectpositionblock.getLocation());
+                        world.gameEvent(user, GameEvent.ENTITY_PLACE, movingobjectpositionblock.getLocation());
                         if (!user.getAbilities().instabuild) {
                             itemstack.shrink(1);
                         }
@@ -98,6 +98,6 @@ public class BoatItem extends Item {
     }
 
     private Boat getBoat(Level world, HitResult hitResult) {
-        return (Boat) (this.hasChest ? new ChestBoat(world, hitResult.getLocation().x, hitResult.getLocation().y, hitResult.getLocation().z) : new Boat(world, hitResult.getLocation().x, hitResult.getLocation().y, hitResult.getLocation().z));
+        return this.hasChest ? new ChestBoat(world, hitResult.getLocation().x, hitResult.getLocation().y, hitResult.getLocation().z) : new Boat(world, hitResult.getLocation().x, hitResult.getLocation().y, hitResult.getLocation().z);
     }
 }
diff --git a/src/main/java/net/minecraft/world/item/BoneMealItem.java b/src/main/java/net/minecraft/world/item/BoneMealItem.java
index 664c3a6b34035ebeff19926be311b1fd6f08dc19..d6d5334f168d1dd3bb5ae648d6697c0d71246932 100644
--- a/src/main/java/net/minecraft/world/item/BoneMealItem.java
+++ b/src/main/java/net/minecraft/world/item/BoneMealItem.java
@@ -115,16 +115,16 @@ public class BoneMealItem extends Item {
                                     iblockdata = (BlockState) BuiltInRegistries.BLOCK.getTag(BlockTags.WALL_CORALS).flatMap((holderset_named) -> {
                                         return holderset_named.getRandomElement(world.random);
                                     }).map((holder1) -> {
-                                        return ((Block) holder1.value()).defaultBlockState();
+                                        return holder1.value().defaultBlockState();
                                     }).orElse(iblockdata);
                                     if (iblockdata.hasProperty(BaseCoralWallFanBlock.FACING)) {
-                                        iblockdata = (BlockState) iblockdata.setValue(BaseCoralWallFanBlock.FACING, facing);
+                                        iblockdata = iblockdata.setValue(BaseCoralWallFanBlock.FACING, facing);
                                     }
                                 } else if (randomsource.nextInt(4) == 0) {
                                     iblockdata = (BlockState) BuiltInRegistries.BLOCK.getTag(BlockTags.UNDERWATER_BONEMEALS).flatMap((holderset_named) -> {
                                         return holderset_named.getRandomElement(world.random);
                                     }).map((holder1) -> {
-                                        return ((Block) holder1.value()).defaultBlockState();
+                                        return holder1.value().defaultBlockState();
                                     }).orElse(iblockdata);
                                 }
                             }
@@ -133,7 +133,7 @@ public class BoneMealItem extends Item {
                                 return blockbase_blockdata.hasProperty(BaseCoralWallFanBlock.FACING);
                             })) {
                                 for (int k = 0; !iblockdata.canSurvive(world, blockposition1) && k < 4; ++k) {
-                                    iblockdata = (BlockState) iblockdata.setValue(BaseCoralWallFanBlock.FACING, Direction.Plane.HORIZONTAL.getRandomDirection(randomsource));
+                                    iblockdata = iblockdata.setValue(BaseCoralWallFanBlock.FACING, Direction.Plane.HORIZONTAL.getRandomDirection(randomsource));
                                 }
                             }
 
diff --git a/src/main/java/net/minecraft/world/item/BowItem.java b/src/main/java/net/minecraft/world/item/BowItem.java
index 08d597db1a5345a343777a01427655e6bf2c926b..86f8c53a1abc5d740962520107b155f412093543 100644
--- a/src/main/java/net/minecraft/world/item/BowItem.java
+++ b/src/main/java/net/minecraft/world/item/BowItem.java
@@ -92,7 +92,7 @@ public class BowItem extends ProjectileWeaponItem implements Vanishable {
                         // CraftBukkit end
                     }
 
-                    world.playSound((Player) null, entityhuman.getX(), entityhuman.getY(), entityhuman.getZ(), SoundEvents.ARROW_SHOOT, SoundSource.PLAYERS, 1.0F, 1.0F / (world.getRandom().nextFloat() * 0.4F + 1.2F) + f * 0.5F);
+                    world.playSound(null, entityhuman.getX(), entityhuman.getY(), entityhuman.getZ(), SoundEvents.ARROW_SHOOT, SoundSource.PLAYERS, 1.0F, 1.0F / (world.getRandom().nextFloat() * 0.4F + 1.2F) + f * 0.5F);
                     if (!flag1 && !entityhuman.getAbilities().instabuild) {
                         itemstack1.shrink(1);
                         if (itemstack1.isEmpty()) {
diff --git a/src/main/java/net/minecraft/world/item/BucketItem.java b/src/main/java/net/minecraft/world/item/BucketItem.java
index 5c6aa9c464784ad5ee366412d080c72d3d22a76f..2403e327f9b0571dfa0703e25ab8ce9aff3ea5d2 100644
--- a/src/main/java/net/minecraft/world/item/BucketItem.java
+++ b/src/main/java/net/minecraft/world/item/BucketItem.java
@@ -88,7 +88,7 @@ public class BucketItem extends Item implements DispensibleContainerItem {
                             ifluidsource.getPickupSound().ifPresent((soundeffect) -> {
                                 user.playSound(soundeffect, 1.0F, 1.0F);
                             });
-                            world.gameEvent((Entity) user, GameEvent.FLUID_PICKUP, blockposition);
+                            world.gameEvent(user, GameEvent.FLUID_PICKUP, blockposition);
                             ItemStack itemstack2 = ItemUtils.createFilledResult(itemstack, user, CraftItemStack.asNMSCopy(event.getItemStack())); // CraftBukkit
 
                             if (!world.isClientSide) {
@@ -165,7 +165,7 @@ public class BucketItem extends Item implements DispensibleContainerItem {
             }
             // CraftBukkit end
             if (!flag1) {
-                return movingobjectpositionblock != null && this.emptyContents(entityhuman, world, movingobjectpositionblock.getBlockPos().relative(movingobjectpositionblock.getDirection()), (BlockHitResult) null, enumdirection, clicked, itemstack, enumhand); // CraftBukkit
+                return movingobjectpositionblock != null && this.emptyContents(entityhuman, world, movingobjectpositionblock.getBlockPos().relative(movingobjectpositionblock.getDirection()), null, enumdirection, clicked, itemstack, enumhand); // CraftBukkit
             } else if (world.dimensionType().ultraWarm() && this.content.is(FluidTags.WATER)) {
                 int i = blockposition.getX();
                 int j = blockposition.getY();
@@ -201,6 +201,6 @@ public class BucketItem extends Item implements DispensibleContainerItem {
         SoundEvent soundeffect = this.content.is(FluidTags.LAVA) ? SoundEvents.BUCKET_EMPTY_LAVA : SoundEvents.BUCKET_EMPTY;
 
         world.playSound(player, pos, soundeffect, SoundSource.BLOCKS, 1.0F, 1.0F);
-        world.gameEvent((Entity) player, GameEvent.FLUID_PLACE, pos);
+        world.gameEvent(player, GameEvent.FLUID_PLACE, pos);
     }
 }
diff --git a/src/main/java/net/minecraft/world/item/ChorusFruitItem.java b/src/main/java/net/minecraft/world/item/ChorusFruitItem.java
index ccbca0c50c6b8bd92e04a3a8ab9327b5df0a1e03..f8a9728e2ac0f2ab3e33aca81625bb320ff8921f 100644
--- a/src/main/java/net/minecraft/world/item/ChorusFruitItem.java
+++ b/src/main/java/net/minecraft/world/item/ChorusFruitItem.java
@@ -30,7 +30,7 @@ public class ChorusFruitItem extends Item {
 
             for (int i = 0; i < 16; ++i) {
                 double d3 = user.getX() + (user.getRandom().nextDouble() - 0.5D) * 16.0D;
-                double d4 = Mth.clamp(user.getY() + (double) (user.getRandom().nextInt(16) - 8), (double) world.getMinBuildHeight(), (double) (world.getMinBuildHeight() + ((ServerLevel) world).getLogicalHeight() - 1));
+                double d4 = Mth.clamp(user.getY() + (double) (user.getRandom().nextInt(16) - 8), world.getMinBuildHeight(), world.getMinBuildHeight() + ((ServerLevel) world).getLogicalHeight() - 1);
                 double d5 = user.getZ() + (user.getRandom().nextDouble() - 0.5D) * 16.0D;
 
                 if (user.isPassenger()) {
@@ -49,10 +49,10 @@ public class ChorusFruitItem extends Item {
 
                 if (status.get().booleanValue()) {
                     // CraftBukkit end
-                    world.gameEvent(GameEvent.TELEPORT, vec3d, GameEvent.Context.of((Entity) user));
+                    world.gameEvent(GameEvent.TELEPORT, vec3d, GameEvent.Context.of(user));
                     SoundEvent soundeffect = user instanceof Fox ? SoundEvents.FOX_TELEPORT : SoundEvents.CHORUS_FRUIT_TELEPORT;
 
-                    world.playSound((Player) null, d0, d1, d2, soundeffect, SoundSource.PLAYERS, 1.0F, 1.0F);
+                    world.playSound(null, d0, d1, d2, soundeffect, SoundSource.PLAYERS, 1.0F, 1.0F);
                     user.playSound(soundeffect, 1.0F, 1.0F);
                     break;
                 }
diff --git a/src/main/java/net/minecraft/world/item/CrossbowItem.java b/src/main/java/net/minecraft/world/item/CrossbowItem.java
index caa5f5f5d58b8ddbca0910412b695cb810570623..eb031d27dc506dc7966f67fa4b33135b6d9bb104 100644
--- a/src/main/java/net/minecraft/world/item/CrossbowItem.java
+++ b/src/main/java/net/minecraft/world/item/CrossbowItem.java
@@ -99,7 +99,7 @@ public class CrossbowItem extends ProjectileWeaponItem implements Vanishable {
             CrossbowItem.setCharged(stack, true);
             SoundSource soundcategory = user instanceof Player ? SoundSource.PLAYERS : SoundSource.HOSTILE;
 
-            world.playSound((Player) null, user.getX(), user.getY(), user.getZ(), SoundEvents.CROSSBOW_LOADING_END, soundcategory, 1.0F, 1.0F / (world.getRandom().nextFloat() * 0.5F + 1.0F) + 0.2F);
+            world.playSound(null, user.getX(), user.getY(), user.getZ(), SoundEvents.CROSSBOW_LOADING_END, soundcategory, 1.0F, 1.0F / (world.getRandom().nextFloat() * 0.5F + 1.0F) + 0.2F);
         }
 
     }
@@ -273,7 +273,7 @@ public class CrossbowItem extends ProjectileWeaponItem implements Vanishable {
                 }
             }
             // CraftBukkit end
-            world.playSound((Player) null, shooter.getX(), shooter.getY(), shooter.getZ(), SoundEvents.CROSSBOW_SHOOT, SoundSource.PLAYERS, 1.0F, soundPitch);
+            world.playSound(null, shooter.getX(), shooter.getY(), shooter.getZ(), SoundEvents.CROSSBOW_SHOOT, SoundSource.PLAYERS, 1.0F, soundPitch);
         }
     }
 
@@ -301,7 +301,7 @@ public class CrossbowItem extends ProjectileWeaponItem implements Vanishable {
         float[] afloat = CrossbowItem.getShotPitches(entity.getRandom());
 
         for (int i = 0; i < list.size(); ++i) {
-            ItemStack itemstack1 = (ItemStack) list.get(i);
+            ItemStack itemstack1 = list.get(i);
             boolean flag = entity instanceof Player && ((Player) entity).getAbilities().instabuild;
 
             if (!itemstack1.isEmpty()) {
@@ -359,12 +359,12 @@ public class CrossbowItem extends ProjectileWeaponItem implements Vanishable {
 
             if (f >= 0.2F && !this.startSoundPlayed) {
                 this.startSoundPlayed = true;
-                world.playSound((Player) null, user.getX(), user.getY(), user.getZ(), soundeffect, SoundSource.PLAYERS, 0.5F, 1.0F);
+                world.playSound(null, user.getX(), user.getY(), user.getZ(), soundeffect, SoundSource.PLAYERS, 0.5F, 1.0F);
             }
 
             if (f >= 0.5F && soundeffect1 != null && !this.midLoadSoundPlayed) {
                 this.midLoadSoundPlayed = true;
-                world.playSound((Player) null, user.getX(), user.getY(), user.getZ(), soundeffect1, SoundSource.PLAYERS, 0.5F, 1.0F);
+                world.playSound(null, user.getX(), user.getY(), user.getZ(), soundeffect1, SoundSource.PLAYERS, 0.5F, 1.0F);
             }
         }
 
@@ -414,7 +414,7 @@ public class CrossbowItem extends ProjectileWeaponItem implements Vanishable {
         List<ItemStack> list1 = CrossbowItem.getChargedProjectiles(stack);
 
         if (CrossbowItem.isCharged(stack) && !list1.isEmpty()) {
-            ItemStack itemstack1 = (ItemStack) list1.get(0);
+            ItemStack itemstack1 = list1.get(0);
 
             tooltip.add(Component.translatable("item.minecraft.crossbow.projectile").append(" ").append(itemstack1.getDisplayName()));
             if (context.isAdvanced() && itemstack1.is(Items.FIREWORK_ROCKET)) {
@@ -423,7 +423,7 @@ public class CrossbowItem extends ProjectileWeaponItem implements Vanishable {
                 Items.FIREWORK_ROCKET.appendHoverText(itemstack1, world, list2, context);
                 if (!list2.isEmpty()) {
                     for (int i = 0; i < list2.size(); ++i) {
-                        list2.set(i, Component.literal("  ").append((Component) list2.get(i)).withStyle(ChatFormatting.GRAY));
+                        list2.set(i, Component.literal("  ").append(list2.get(i)).withStyle(ChatFormatting.GRAY));
                     }
 
                     tooltip.addAll(list2);
@@ -435,7 +435,7 @@ public class CrossbowItem extends ProjectileWeaponItem implements Vanishable {
 
     @Override
     public boolean useOnRelease(ItemStack stack) {
-        return stack.is((Item) this);
+        return stack.is(this);
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/item/DebugStickItem.java b/src/main/java/net/minecraft/world/item/DebugStickItem.java
index 9f72138714ca3ae407ea5e1cc4028a1b6f88a970..6a5a6e8947f1f4cf6f46a97570b287c892db5a78 100644
--- a/src/main/java/net/minecraft/world/item/DebugStickItem.java
+++ b/src/main/java/net/minecraft/world/item/DebugStickItem.java
@@ -75,7 +75,7 @@ public class DebugStickItem extends Item {
 
                 if (update) {
                     if (iblockstate == null) {
-                        iblockstate = (Property) collection.iterator().next();
+                        iblockstate = collection.iterator().next();
                     }
 
                     BlockState iblockdata1 = DebugStickItem.cycleState(state, iblockstate, player.isSecondaryUseActive());
@@ -83,7 +83,7 @@ public class DebugStickItem extends Item {
                     world.setBlock(pos, iblockdata1, 18);
                     DebugStickItem.message(player, Component.translatable(this.getDescriptionId() + ".update", iblockstate.getName(), DebugStickItem.getNameHelper(iblockdata1, iblockstate)));
                 } else {
-                    iblockstate = (Property) DebugStickItem.getRelative(collection, iblockstate, player.isSecondaryUseActive());
+                    iblockstate = DebugStickItem.getRelative(collection, iblockstate, player.isSecondaryUseActive());
                     String s2 = iblockstate.getName();
 
                     nbttagcompound.putString(s, s2);
@@ -96,7 +96,7 @@ public class DebugStickItem extends Item {
     }
 
     private static <T extends Comparable<T>> BlockState cycleState(BlockState state, Property<T> property, boolean inverse) {
-        return (BlockState) state.setValue(property, DebugStickItem.getRelative(property.getPossibleValues(), state.getValue(property), inverse)); // CraftBukkit - decompile error
+        return state.setValue(property, DebugStickItem.getRelative(property.getPossibleValues(), state.getValue(property), inverse)); // CraftBukkit - decompile error
     }
 
     private static <T> T getRelative(Iterable<T> elements, @Nullable T current, boolean inverse) {
diff --git a/src/main/java/net/minecraft/world/item/DyeItem.java b/src/main/java/net/minecraft/world/item/DyeItem.java
index 6a492ac3e67c743210d632aaddb5d5e67948468d..f2cad31742c019ca940d0bb79d36186fdb14c28f 100644
--- a/src/main/java/net/minecraft/world/item/DyeItem.java
+++ b/src/main/java/net/minecraft/world/item/DyeItem.java
@@ -29,7 +29,7 @@ public class DyeItem extends Item {
             Sheep entitysheep = (Sheep) entity;
 
             if (entitysheep.isAlive() && !entitysheep.isSheared() && entitysheep.getColor() != this.dyeColor) {
-                entitysheep.level.playSound(user, (Entity) entitysheep, SoundEvents.DYE_USE, SoundSource.PLAYERS, 1.0F, 1.0F);
+                entitysheep.level.playSound(user, entitysheep, SoundEvents.DYE_USE, SoundSource.PLAYERS, 1.0F, 1.0F);
                 if (!user.level.isClientSide) {
                     // CraftBukkit start
                     byte bColor = (byte) this.dyeColor.getId();
@@ -40,7 +40,7 @@ public class DyeItem extends Item {
                         return InteractionResult.PASS;
                     }
 
-                    entitysheep.setColor(DyeColor.byId((byte) event.getColor().getWoolData()));
+                    entitysheep.setColor(DyeColor.byId(event.getColor().getWoolData()));
                     // CraftBukkit end
                     stack.shrink(1);
                 }
@@ -57,6 +57,6 @@ public class DyeItem extends Item {
     }
 
     public static DyeItem byColor(DyeColor color) {
-        return (DyeItem) DyeItem.ITEM_BY_COLOR.get(color);
+        return DyeItem.ITEM_BY_COLOR.get(color);
     }
 }
diff --git a/src/main/java/net/minecraft/world/item/EggItem.java b/src/main/java/net/minecraft/world/item/EggItem.java
index 58cb992c5defec2f092755cbde661ff10f38bf9d..51009c839ff1ca1e0aa78238c999500ee24c9f36 100644
--- a/src/main/java/net/minecraft/world/item/EggItem.java
+++ b/src/main/java/net/minecraft/world/item/EggItem.java
@@ -34,7 +34,7 @@ public class EggItem extends Item {
                     ((net.minecraft.server.level.ServerPlayer) user).getBukkitEntity().updateInventory();
                 }
 
-                world.playSound((Player) null, user.getX(), user.getY(), user.getZ(), net.minecraft.sounds.SoundEvents.EGG_THROW, net.minecraft.sounds.SoundSource.PLAYERS, 0.5F, 0.4F / (net.minecraft.world.entity.Entity.SHARED_RANDOM.nextFloat() * 0.4F + 0.8F));
+                world.playSound(null, user.getX(), user.getY(), user.getZ(), net.minecraft.sounds.SoundEvents.EGG_THROW, net.minecraft.sounds.SoundSource.PLAYERS, 0.5F, 0.4F / (net.minecraft.world.entity.Entity.SHARED_RANDOM.nextFloat() * 0.4F + 0.8F));
                 user.awardStat(Stats.ITEM_USED.get(this));
             } else {
                 if (user instanceof net.minecraft.server.level.ServerPlayer) {
@@ -44,7 +44,7 @@ public class EggItem extends Item {
             }
             // Paper end
         }
-        world.playSound((Player) null, user.getX(), user.getY(), user.getZ(), SoundEvents.EGG_THROW, SoundSource.PLAYERS, 0.5F, 0.4F / (world.getRandom().nextFloat() * 0.4F + 0.8F));
+        world.playSound(null, user.getX(), user.getY(), user.getZ(), SoundEvents.EGG_THROW, SoundSource.PLAYERS, 0.5F, 0.4F / (world.getRandom().nextFloat() * 0.4F + 0.8F));
 
         /* // Paper start - moved up
         user.awardStat(Stats.ITEM_USED.get(this));
diff --git a/src/main/java/net/minecraft/world/item/EndCrystalItem.java b/src/main/java/net/minecraft/world/item/EndCrystalItem.java
index 171ce56ec3b8761f75144b1fca2f100fcbba6800..e1a2c61f181a6fe6c26e4831b8078d456c0b0696 100644
--- a/src/main/java/net/minecraft/world/item/EndCrystalItem.java
+++ b/src/main/java/net/minecraft/world/item/EndCrystalItem.java
@@ -34,10 +34,10 @@ public class EndCrystalItem extends Item {
             if (!world.isEmptyBlock(blockposition1)) {
                 return InteractionResult.FAIL;
             } else {
-                double d0 = (double) blockposition1.getX();
-                double d1 = (double) blockposition1.getY();
-                double d2 = (double) blockposition1.getZ();
-                List<Entity> list = world.getEntities((Entity) null, new AABB(d0, d1, d2, d0 + 1.0D, d1 + 2.0D, d2 + 1.0D));
+                double d0 = blockposition1.getX();
+                double d1 = blockposition1.getY();
+                double d2 = blockposition1.getZ();
+                List<Entity> list = world.getEntities(null, new AABB(d0, d1, d2, d0 + 1.0D, d1 + 2.0D, d2 + 1.0D));
 
                 if (!list.isEmpty()) {
                     return InteractionResult.FAIL;
@@ -52,7 +52,7 @@ public class EndCrystalItem extends Item {
                         }
                         // CraftBukkit end
                         world.addFreshEntity(entityendercrystal);
-                        world.gameEvent((Entity) context.getPlayer(), GameEvent.ENTITY_PLACE, blockposition1);
+                        world.gameEvent(context.getPlayer(), GameEvent.ENTITY_PLACE, blockposition1);
                         EndDragonFight enderdragonbattle = ((ServerLevel) world).dragonFight();
 
                         if (enderdragonbattle != null) {
diff --git a/src/main/java/net/minecraft/world/item/EnderEyeItem.java b/src/main/java/net/minecraft/world/item/EnderEyeItem.java
index 3fa40a013e3336675d135effa30e88e8c4d3bd10..6f1fa6232ddf28bee3d0515a742d57137e29ef5d 100644
--- a/src/main/java/net/minecraft/world/item/EnderEyeItem.java
+++ b/src/main/java/net/minecraft/world/item/EnderEyeItem.java
@@ -38,7 +38,7 @@ public class EnderEyeItem extends Item {
         BlockPos blockposition = context.getClickedPos();
         BlockState iblockdata = world.getBlockState(blockposition);
 
-        if (iblockdata.is(Blocks.END_PORTAL_FRAME) && !((Boolean) iblockdata.getValue(EndPortalFrameBlock.HAS_EYE)).booleanValue()) {
+        if (iblockdata.is(Blocks.END_PORTAL_FRAME) && !iblockdata.getValue(EndPortalFrameBlock.HAS_EYE).booleanValue()) {
             if (world.isClientSide) {
                 return InteractionResult.SUCCESS;
             } else {
@@ -78,7 +78,7 @@ public class EnderEyeItem extends Item {
                             double deltaLength = Math.sqrt(distanceSquared);
                             double relativeX = player.getX() + (deltaX / deltaLength) * viewDistance;
                             double relativeZ = player.getZ() + (deltaZ / deltaLength) * viewDistance;
-                            player.connection.send(new net.minecraft.network.protocol.game.ClientboundLevelEventPacket(1038, new BlockPos((int) relativeX, (int) soundPos.getY(), (int) relativeZ), 0, true));
+                            player.connection.send(new net.minecraft.network.protocol.game.ClientboundLevelEventPacket(1038, new BlockPos((int) relativeX, soundPos.getY(), (int) relativeZ), 0, true));
                         } else {
                             player.connection.send(new net.minecraft.network.protocol.game.ClientboundLevelEventPacket(1038, soundPos, 0, true));
                         }
@@ -98,7 +98,7 @@ public class EnderEyeItem extends Item {
         ItemStack itemstack = user.getItemInHand(hand);
         BlockHitResult movingobjectpositionblock = getPlayerPOVHitResult(world, user, ClipContext.Fluid.NONE);
 
-        if (movingobjectpositionblock.getType() == HitResult.Type.BLOCK && world.getBlockState(((BlockHitResult) movingobjectpositionblock).getBlockPos()).is(Blocks.END_PORTAL_FRAME)) {
+        if (movingobjectpositionblock.getType() == HitResult.Type.BLOCK && world.getBlockState(movingobjectpositionblock.getBlockPos()).is(Blocks.END_PORTAL_FRAME)) {
             return InteractionResultHolder.pass(itemstack);
         } else {
             user.startUsingItem(hand);
@@ -111,7 +111,7 @@ public class EnderEyeItem extends Item {
 
                     entityendersignal.setItem(itemstack);
                     entityendersignal.signalTo(blockposition);
-                    world.gameEvent(GameEvent.PROJECTILE_SHOOT, entityendersignal.position(), GameEvent.Context.of((Entity) user));
+                    world.gameEvent(GameEvent.PROJECTILE_SHOOT, entityendersignal.position(), GameEvent.Context.of(user));
                     // CraftBukkit start
                     if (!world.addFreshEntity(entityendersignal)) {
                         return new InteractionResultHolder(InteractionResult.FAIL, itemstack);
@@ -121,8 +121,8 @@ public class EnderEyeItem extends Item {
                         CriteriaTriggers.USED_ENDER_EYE.trigger((ServerPlayer) user, blockposition);
                     }
 
-                    world.playSound((Player) null, user.getX(), user.getY(), user.getZ(), SoundEvents.ENDER_EYE_LAUNCH, SoundSource.NEUTRAL, 0.5F, 0.4F / (world.getRandom().nextFloat() * 0.4F + 0.8F));
-                    world.levelEvent((Player) null, 1003, user.blockPosition(), 0);
+                    world.playSound(null, user.getX(), user.getY(), user.getZ(), SoundEvents.ENDER_EYE_LAUNCH, SoundSource.NEUTRAL, 0.5F, 0.4F / (world.getRandom().nextFloat() * 0.4F + 0.8F));
+                    world.levelEvent(null, 1003, user.blockPosition(), 0);
                     if (!user.getAbilities().instabuild) {
                         itemstack.shrink(1);
                     }
diff --git a/src/main/java/net/minecraft/world/item/EnderpearlItem.java b/src/main/java/net/minecraft/world/item/EnderpearlItem.java
index 749ab72edc0d2e9c6f1161415ab8d59d3d6ca976..e069ff77c4b58e1d2f902d989ba33f58cec7af04 100644
--- a/src/main/java/net/minecraft/world/item/EnderpearlItem.java
+++ b/src/main/java/net/minecraft/world/item/EnderpearlItem.java
@@ -34,7 +34,7 @@ public class EnderpearlItem extends Item {
                     ((net.minecraft.server.level.ServerPlayer) user).getBukkitEntity().updateInventory();
                 }
 
-                world.playSound((Player) null, user.getX(), user.getY(), user.getZ(), SoundEvents.ENDER_PEARL_THROW, SoundSource.NEUTRAL, 0.5F, 0.4F / (net.minecraft.world.entity.Entity.SHARED_RANDOM.nextFloat() * 0.4F + 0.8F));
+                world.playSound(null, user.getX(), user.getY(), user.getZ(), SoundEvents.ENDER_PEARL_THROW, SoundSource.NEUTRAL, 0.5F, 0.4F / (net.minecraft.world.entity.Entity.SHARED_RANDOM.nextFloat() * 0.4F + 0.8F));
                 user.awardStat(Stats.ITEM_USED.get(this));
                 user.getCooldowns().addCooldown(this, 20);
             } else {
diff --git a/src/main/java/net/minecraft/world/item/ExperienceBottleItem.java b/src/main/java/net/minecraft/world/item/ExperienceBottleItem.java
index b80bedb5f27b474d7f66e9e1cc38ca3b692fc92b..672fd624722194ed8af6f26c55063e2c6c045c1e 100644
--- a/src/main/java/net/minecraft/world/item/ExperienceBottleItem.java
+++ b/src/main/java/net/minecraft/world/item/ExperienceBottleItem.java
@@ -36,7 +36,7 @@ public class ExperienceBottleItem extends Item {
                     ((net.minecraft.server.level.ServerPlayer) user).getBukkitEntity().updateInventory();
                 }
 
-                world.playSound((Player) null, user.getX(), user.getY(), user.getZ(), SoundEvents.EXPERIENCE_BOTTLE_THROW, SoundSource.NEUTRAL, 0.5F, 0.4F / (net.minecraft.world.entity.Entity.SHARED_RANDOM.nextFloat() * 0.4F + 0.8F));
+                world.playSound(null, user.getX(), user.getY(), user.getZ(), SoundEvents.EXPERIENCE_BOTTLE_THROW, SoundSource.NEUTRAL, 0.5F, 0.4F / (net.minecraft.world.entity.Entity.SHARED_RANDOM.nextFloat() * 0.4F + 0.8F));
                 user.awardStat(Stats.ITEM_USED.get(this));
             } else {
                 if (user instanceof net.minecraft.server.level.ServerPlayer) {
diff --git a/src/main/java/net/minecraft/world/item/FireChargeItem.java b/src/main/java/net/minecraft/world/item/FireChargeItem.java
index 1da98a9507d79850265d4d9946497ef6689ad13c..350697b8b88de824b5c43b3e035341313f6b3dc9 100644
--- a/src/main/java/net/minecraft/world/item/FireChargeItem.java
+++ b/src/main/java/net/minecraft/world/item/FireChargeItem.java
@@ -43,7 +43,7 @@ public class FireChargeItem extends Item {
                 // CraftBukkit end
                 this.playSound(world, blockposition);
                 world.setBlockAndUpdate(blockposition, BaseFireBlock.getState(world, blockposition));
-                world.gameEvent((Entity) context.getPlayer(), GameEvent.BLOCK_PLACE, blockposition);
+                world.gameEvent(context.getPlayer(), GameEvent.BLOCK_PLACE, blockposition);
                 flag = true;
             }
         } else {
@@ -56,8 +56,8 @@ public class FireChargeItem extends Item {
             }
             // CraftBukkit end
             this.playSound(world, blockposition);
-            world.setBlockAndUpdate(blockposition, (BlockState) iblockdata.setValue(BlockStateProperties.LIT, Boolean.TRUE));
-            world.gameEvent((Entity) context.getPlayer(), GameEvent.BLOCK_CHANGE, blockposition);
+            world.setBlockAndUpdate(blockposition, iblockdata.setValue(BlockStateProperties.LIT, Boolean.TRUE));
+            world.gameEvent(context.getPlayer(), GameEvent.BLOCK_CHANGE, blockposition);
             flag = true;
         }
 
@@ -72,6 +72,6 @@ public class FireChargeItem extends Item {
     private void playSound(Level world, BlockPos pos) {
         RandomSource randomsource = world.getRandom();
 
-        world.playSound((Player) null, pos, SoundEvents.FIRECHARGE_USE, SoundSource.BLOCKS, 1.0F, (randomsource.nextFloat() - randomsource.nextFloat()) * 0.2F + 1.0F);
+        world.playSound(null, pos, SoundEvents.FIRECHARGE_USE, SoundSource.BLOCKS, 1.0F, (randomsource.nextFloat() - randomsource.nextFloat()) * 0.2F + 1.0F);
     }
 }
diff --git a/src/main/java/net/minecraft/world/item/FireworkRocketItem.java b/src/main/java/net/minecraft/world/item/FireworkRocketItem.java
index 783791cf501d6ed3975aa82b958d7437158909ba..66f163e1c88e839c667dcbdbb6128c022ff0ff12 100644
--- a/src/main/java/net/minecraft/world/item/FireworkRocketItem.java
+++ b/src/main/java/net/minecraft/world/item/FireworkRocketItem.java
@@ -90,7 +90,7 @@ public class FireworkRocketItem extends Item {
         CompoundTag compoundTag = stack.getTagElement("Fireworks");
         if (compoundTag != null) {
             if (compoundTag.contains("Flight", 99)) {
-                tooltip.add(Component.translatable("item.minecraft.firework_rocket.flight").append(" ").append(String.valueOf((int)compoundTag.getByte("Flight"))).withStyle(ChatFormatting.GRAY));
+                tooltip.add(Component.translatable("item.minecraft.firework_rocket.flight").append(" ").append(String.valueOf(compoundTag.getByte("Flight"))).withStyle(ChatFormatting.GRAY));
             }
 
             ListTag listTag = compoundTag.getList("Explosions", 10);
diff --git a/src/main/java/net/minecraft/world/item/FishingRodItem.java b/src/main/java/net/minecraft/world/item/FishingRodItem.java
index b9aca584c9765e995d1f8b9b2e45e5257fb6ab9d..6303f06f1002e110086277840cc18e8caf1626d8 100644
--- a/src/main/java/net/minecraft/world/item/FishingRodItem.java
+++ b/src/main/java/net/minecraft/world/item/FishingRodItem.java
@@ -35,7 +35,7 @@ public class FishingRodItem extends Item implements Vanishable {
                 });
             }
 
-            world.playSound((Player) null, user.getX(), user.getY(), user.getZ(), SoundEvents.FISHING_BOBBER_RETRIEVE, SoundSource.NEUTRAL, 1.0F, 0.4F / (world.getRandom().nextFloat() * 0.4F + 0.8F));
+            world.playSound(null, user.getX(), user.getY(), user.getZ(), SoundEvents.FISHING_BOBBER_RETRIEVE, SoundSource.NEUTRAL, 1.0F, 0.4F / (world.getRandom().nextFloat() * 0.4F + 0.8F));
             user.gameEvent(GameEvent.ITEM_INTERACT_FINISH);
         } else {
             // world.playSound((EntityHuman) null, entityhuman.getX(), entityhuman.getY(), entityhuman.getZ(), SoundEffects.FISHING_BOBBER_THROW, SoundCategory.NEUTRAL, 0.5F, 0.4F / (world.getRandom().nextFloat() * 0.4F + 0.8F));
@@ -52,7 +52,7 @@ public class FishingRodItem extends Item implements Vanishable {
                     user.fishing = null;
                     return InteractionResultHolder.pass(itemstack);
                 }
-                world.playSound((Player) null, user.getX(), user.getY(), user.getZ(), SoundEvents.FISHING_BOBBER_THROW, SoundSource.NEUTRAL, 0.5F, 0.4F / (world.getRandom().nextFloat() * 0.4F + 0.8F));
+                world.playSound(null, user.getX(), user.getY(), user.getZ(), SoundEvents.FISHING_BOBBER_THROW, SoundSource.NEUTRAL, 0.5F, 0.4F / (world.getRandom().nextFloat() * 0.4F + 0.8F));
                 world.addFreshEntity(entityfishinghook);
                 // CraftBukkit end
             }
diff --git a/src/main/java/net/minecraft/world/item/FlintAndSteelItem.java b/src/main/java/net/minecraft/world/item/FlintAndSteelItem.java
index 9b6c0645d75bb852056d76436cfdab0724377e1e..d2dd5c1389c943cdc46fd833d15efe5dc7d72c84 100644
--- a/src/main/java/net/minecraft/world/item/FlintAndSteelItem.java
+++ b/src/main/java/net/minecraft/world/item/FlintAndSteelItem.java
@@ -47,7 +47,7 @@ public class FlintAndSteelItem extends Item {
                 BlockState iblockdata1 = BaseFireBlock.getState(world, blockposition1);
 
                 world.setBlock(blockposition1, iblockdata1, 11);
-                world.gameEvent((Entity) entityhuman, GameEvent.BLOCK_PLACE, blockposition);
+                world.gameEvent(entityhuman, GameEvent.BLOCK_PLACE, blockposition);
                 ItemStack itemstack = context.getItemInHand();
 
                 if (entityhuman instanceof ServerPlayer) {
@@ -71,8 +71,8 @@ public class FlintAndSteelItem extends Item {
             }
             // CraftBukkit end
             world.playSound(entityhuman, blockposition, SoundEvents.FLINTANDSTEEL_USE, SoundSource.BLOCKS, 1.0F, world.getRandom().nextFloat() * 0.4F + 0.8F);
-            world.setBlock(blockposition, (BlockState) iblockdata.setValue(BlockStateProperties.LIT, Boolean.TRUE), 11);
-            world.gameEvent((Entity) entityhuman, GameEvent.BLOCK_CHANGE, blockposition);
+            world.setBlock(blockposition, iblockdata.setValue(BlockStateProperties.LIT, Boolean.TRUE), 11);
+            world.gameEvent(entityhuman, GameEvent.BLOCK_CHANGE, blockposition);
             if (entityhuman != null) {
                 context.getItemInHand().hurtAndBreak(1, entityhuman, (entityhuman1) -> {
                     entityhuman1.broadcastBreakEvent(context.getHand());
diff --git a/src/main/java/net/minecraft/world/item/HangingEntityItem.java b/src/main/java/net/minecraft/world/item/HangingEntityItem.java
index 489558eb0126e7a41e2e379e352bddc034375b61..3d12bc60ef39f6a3097b0748fcae1c39063135f3 100644
--- a/src/main/java/net/minecraft/world/item/HangingEntityItem.java
+++ b/src/main/java/net/minecraft/world/item/HangingEntityItem.java
@@ -50,7 +50,7 @@ public class HangingEntityItem extends Item {
                     return InteractionResult.CONSUME;
                 }
 
-                object = (HangingEntity) optional.get();
+                object = optional.get();
             } else if (this.type == EntityType.ITEM_FRAME) {
                 object = new ItemFrame(world, blockposition1, enumdirection);
             } else {
@@ -83,7 +83,7 @@ public class HangingEntityItem extends Item {
                     }
                     // CraftBukkit end
                     ((HangingEntity) object).playPlacementSound();
-                    world.gameEvent((Entity) entityhuman, GameEvent.ENTITY_PLACE, ((HangingEntity) object).position());
+                    world.gameEvent(entityhuman, GameEvent.ENTITY_PLACE, ((HangingEntity) object).position());
                     world.addFreshEntity((Entity) object);
                 }
 
diff --git a/src/main/java/net/minecraft/world/item/ItemStack.java b/src/main/java/net/minecraft/world/item/ItemStack.java
index e7418724d77a0fc7355363aac5970b89d8affbeb..8059760c1d185511054439abb17dd581a1bc5637 100644
--- a/src/main/java/net/minecraft/world/item/ItemStack.java
+++ b/src/main/java/net/minecraft/world/item/ItemStack.java
@@ -119,7 +119,7 @@ public final class ItemStack {
     });
     private static final Logger LOGGER = LogUtils.getLogger();
     public static final ItemStack EMPTY = new ItemStack((Item) null);
-    public static final DecimalFormat ATTRIBUTE_MODIFIER_FORMAT = (DecimalFormat) Util.make(new DecimalFormat("#.##"), (decimalformat) -> {
+    public static final DecimalFormat ATTRIBUTE_MODIFIER_FORMAT = Util.make(new DecimalFormat("#.##"), (decimalformat) -> {
         decimalformat.setDecimalFormatSymbols(DecimalFormatSymbols.getInstance(Locale.ROOT));
     });
     public static final String TAG_ENCH = "Enchantments";
@@ -215,7 +215,7 @@ public final class ItemStack {
     }
 
     public ItemStack(Holder<Item> entry) {
-        this((ItemLike) entry.value(), 1);
+        this(entry.value(), 1);
     }
 
     private ItemStack(ItemLike item, int count, Optional<CompoundTag> nbt) {
@@ -224,7 +224,7 @@ public final class ItemStack {
     }
 
     public ItemStack(Holder<Item> itemEntry, int count) {
-        this((ItemLike) itemEntry.value(), count);
+        this(itemEntry.value(), count);
     }
 
     public ItemStack(ItemLike item, int count) {
@@ -449,7 +449,7 @@ public final class ItemStack {
                     // PAIL: checkme on updates.
                     if (this.item instanceof RecordItem) {
                         ((JukeboxBlock) Blocks.JUKEBOX).setRecord(entityhuman, world, blockposition, world.getBlockState(blockposition), this);
-                        world.levelEvent((net.minecraft.world.entity.player.Player) null, 1010, blockposition, Item.getId(this.item));
+                        world.levelEvent(null, 1010, blockposition, Item.getId(this.item));
                         this.shrink(1);
                         entityhuman.awardStat(Stats.PLAY_RECORD);
                     }
@@ -991,14 +991,14 @@ public final class ItemStack {
 
                     while (iterator.hasNext()) {
                         Entry<Attribute, AttributeModifier> entry = (Entry) iterator.next();
-                        AttributeModifier attributemodifier = (AttributeModifier) entry.getValue();
+                        AttributeModifier attributemodifier = entry.getValue();
                         double d0 = attributemodifier.getAmount();
                         boolean flag = false;
 
                         if (player != null) {
                             if (attributemodifier.getId() == Item.BASE_ATTACK_DAMAGE_UUID) {
                                 d0 += player.getAttributeBaseValue(Attributes.ATTACK_DAMAGE);
-                                d0 += (double) EnchantmentHelper.getDamageBonus(this, MobType.UNDEFINED);
+                                d0 += EnchantmentHelper.getDamageBonus(this, MobType.UNDEFINED);
                                 flag = true;
                             } else if (attributemodifier.getId() == Item.BASE_ATTACK_SPEED_UUID) {
                                 d0 += player.getAttributeBaseValue(Attributes.ATTACK_SPEED);
@@ -1009,7 +1009,7 @@ public final class ItemStack {
                         double d1;
 
                         if (attributemodifier.getOperation() != AttributeModifier.Operation.MULTIPLY_BASE && attributemodifier.getOperation() != AttributeModifier.Operation.MULTIPLY_TOTAL) {
-                            if (((Attribute) entry.getKey()).equals(Attributes.KNOCKBACK_RESISTANCE)) {
+                            if (entry.getKey().equals(Attributes.KNOCKBACK_RESISTANCE)) {
                                 d1 = d0 * 10.0D;
                             } else {
                                 d1 = d0;
@@ -1019,12 +1019,12 @@ public final class ItemStack {
                         }
 
                         if (flag) {
-                            list.add(Component.literal(" ").append((Component) Component.translatable("attribute.modifier.equals." + attributemodifier.getOperation().toValue(), ItemStack.ATTRIBUTE_MODIFIER_FORMAT.format(d1), Component.translatable(((Attribute) entry.getKey()).getDescriptionId()))).withStyle(ChatFormatting.DARK_GREEN));
+                            list.add(Component.literal(" ").append(Component.translatable("attribute.modifier.equals." + attributemodifier.getOperation().toValue(), ItemStack.ATTRIBUTE_MODIFIER_FORMAT.format(d1), Component.translatable(entry.getKey().getDescriptionId()))).withStyle(ChatFormatting.DARK_GREEN));
                         } else if (d0 > 0.0D) {
-                            list.add(Component.translatable("attribute.modifier.plus." + attributemodifier.getOperation().toValue(), ItemStack.ATTRIBUTE_MODIFIER_FORMAT.format(d1), Component.translatable(((Attribute) entry.getKey()).getDescriptionId())).withStyle(ChatFormatting.BLUE));
+                            list.add(Component.translatable("attribute.modifier.plus." + attributemodifier.getOperation().toValue(), ItemStack.ATTRIBUTE_MODIFIER_FORMAT.format(d1), Component.translatable(entry.getKey().getDescriptionId())).withStyle(ChatFormatting.BLUE));
                         } else if (d0 < 0.0D) {
                             d1 *= -1.0D;
-                            list.add(Component.translatable("attribute.modifier.take." + attributemodifier.getOperation().toValue(), ItemStack.ATTRIBUTE_MODIFIER_FORMAT.format(d1), Component.translatable(((Attribute) entry.getKey()).getDescriptionId())).withStyle(ChatFormatting.RED));
+                            list.add(Component.translatable("attribute.modifier.take." + attributemodifier.getOperation().toValue(), ItemStack.ATTRIBUTE_MODIFIER_FORMAT.format(d1), Component.translatable(entry.getKey().getDescriptionId())).withStyle(ChatFormatting.RED));
                         }
                     }
                 }
@@ -1112,7 +1112,7 @@ public final class ItemStack {
                 return Lists.newArrayList(new Component[]{argumentblock_a.blockState().getBlock().getName().withStyle(ChatFormatting.DARK_GRAY)});
             }, (argumentblock_b) -> {
                 return (List) argumentblock_b.tag().stream().map((holder) -> {
-                    return ((Block) holder.value()).getName().withStyle(ChatFormatting.DARK_GRAY);
+                    return holder.value().getName().withStyle(ChatFormatting.DARK_GRAY);
                 }).collect(Collectors.toList());
             });
         } catch (CommandSyntaxException commandsyntaxexception) {
@@ -1201,7 +1201,7 @@ public final class ItemStack {
                         AttributeModifier attributemodifier = AttributeModifier.load(nbttagcompound);
 
                         if (attributemodifier != null && attributemodifier.getId().getLeastSignificantBits() != 0L && attributemodifier.getId().getMostSignificantBits() != 0L) {
-                            ((Multimap) object).put((Attribute) optional.get(), attributemodifier);
+                            ((Multimap) object).put(optional.get(), attributemodifier);
                         }
                     }
                 }
diff --git a/src/main/java/net/minecraft/world/item/LeadItem.java b/src/main/java/net/minecraft/world/item/LeadItem.java
index 423a28f0ce85bedbcc49fadb5afa38ee2a306d77..9880bba3440f391cac8113b1d81d31e5196e3e20 100644
--- a/src/main/java/net/minecraft/world/item/LeadItem.java
+++ b/src/main/java/net/minecraft/world/item/LeadItem.java
@@ -38,7 +38,7 @@ public class LeadItem extends Item {
                 LeadItem.bindPlayerMobs(entityhuman, world, blockposition, context.getHand()); // CraftBukkit - Pass hand
             }
 
-            world.gameEvent(GameEvent.BLOCK_ATTACH, blockposition, GameEvent.Context.of((Entity) entityhuman));
+            world.gameEvent(GameEvent.BLOCK_ATTACH, blockposition, GameEvent.Context.of(entityhuman));
             return InteractionResult.sidedSuccess(world.isClientSide);
         } else {
             return InteractionResult.PASS;
diff --git a/src/main/java/net/minecraft/world/item/LingeringPotionItem.java b/src/main/java/net/minecraft/world/item/LingeringPotionItem.java
index f2d1b4e3fc08f6a06beb391bc6e60f62a9bf82b9..8bc343b91444a41c76cc4b61917d1f11e6b1b49a 100644
--- a/src/main/java/net/minecraft/world/item/LingeringPotionItem.java
+++ b/src/main/java/net/minecraft/world/item/LingeringPotionItem.java
@@ -26,7 +26,7 @@ public class LingeringPotionItem extends ThrowablePotionItem {
         // Paper start
         InteractionResultHolder<ItemStack> wrapper = super.use(world, user, hand);
         if (wrapper.getResult() != net.minecraft.world.InteractionResult.FAIL) {
-        world.playSound((Player)null, user.getX(), user.getY(), user.getZ(), SoundEvents.LINGERING_POTION_THROW, SoundSource.NEUTRAL, 0.5F, 0.4F / (world.getRandom().nextFloat() * 0.4F + 0.8F));
+        world.playSound(null, user.getX(), user.getY(), user.getZ(), SoundEvents.LINGERING_POTION_THROW, SoundSource.NEUTRAL, 0.5F, 0.4F / (world.getRandom().nextFloat() * 0.4F + 0.8F));
         }
         return wrapper;
         // Paper end
diff --git a/src/main/java/net/minecraft/world/item/MapItem.java b/src/main/java/net/minecraft/world/item/MapItem.java
index c705d965d3e25dcb9112b8d2d36988e9728896f0..86b6b1435331a4146eedd52ac706eb14799378b7 100644
--- a/src/main/java/net/minecraft/world/item/MapItem.java
+++ b/src/main/java/net/minecraft/world/item/MapItem.java
@@ -77,7 +77,7 @@ public class MapItem extends ComplexItem {
     }
 
     public static int createNewSavedData(Level world, int x, int z, int scale, boolean showIcons, boolean unlimitedTracking, ResourceKey<Level> dimension) {
-        MapItemSavedData worldmap = MapItemSavedData.createFresh((double) x, (double) z, (byte) scale, showIcons, unlimitedTracking, dimension);
+        MapItemSavedData worldmap = MapItemSavedData.createFresh(x, z, (byte) scale, showIcons, unlimitedTracking, dimension);
         int l = world.getFreeMapId();
 
         world.setMapData(MapItem.makeKey(l), worldmap);
@@ -192,7 +192,7 @@ public class MapItem extends ComplexItem {
                                 }
 
                                 l2 /= i * i;
-                                MaterialColor materialmapcolor = (MaterialColor) Iterables.getFirst(Multisets.copyHighestCountFirst(multiset), MaterialColor.NONE);
+                                MaterialColor materialmapcolor = Iterables.getFirst(Multisets.copyHighestCountFirst(multiset), MaterialColor.NONE);
                                 double d2;
                                 MaterialColor.Brightness materialmapcolor_a;
 
diff --git a/src/main/java/net/minecraft/world/item/MinecartItem.java b/src/main/java/net/minecraft/world/item/MinecartItem.java
index c6d2f764efa9b8bec730bbe757d480e365b25ccc..45f67df5ae64db21c2e025c2f1bb71b20b269d92 100644
--- a/src/main/java/net/minecraft/world/item/MinecartItem.java
+++ b/src/main/java/net/minecraft/world/item/MinecartItem.java
@@ -29,14 +29,14 @@ public class MinecartItem extends Item {
 
         @Override
         public ItemStack execute(BlockSource pointer, ItemStack stack) {
-            Direction enumdirection = (Direction) pointer.getBlockState().getValue(DispenserBlock.FACING);
+            Direction enumdirection = pointer.getBlockState().getValue(DispenserBlock.FACING);
             ServerLevel worldserver = pointer.getLevel();
             double d0 = pointer.x() + (double) enumdirection.getStepX() * 1.125D;
             double d1 = Math.floor(pointer.y()) + (double) enumdirection.getStepY();
             double d2 = pointer.z() + (double) enumdirection.getStepZ() * 1.125D;
             BlockPos blockposition = pointer.getPos().relative(enumdirection);
             BlockState iblockdata = worldserver.getBlockState(blockposition);
-            RailShape blockpropertytrackposition = iblockdata.getBlock() instanceof BaseRailBlock ? (RailShape) iblockdata.getValue(((BaseRailBlock) iblockdata.getBlock()).getShapeProperty()) : RailShape.NORTH_SOUTH;
+            RailShape blockpropertytrackposition = iblockdata.getBlock() instanceof BaseRailBlock ? iblockdata.getValue(((BaseRailBlock) iblockdata.getBlock()).getShapeProperty()) : RailShape.NORTH_SOUTH;
             double d3;
 
             if (iblockdata.is(BlockTags.RAILS)) {
@@ -51,7 +51,7 @@ public class MinecartItem extends Item {
                 }
 
                 BlockState iblockdata1 = worldserver.getBlockState(blockposition.below());
-                RailShape blockpropertytrackposition1 = iblockdata1.getBlock() instanceof BaseRailBlock ? (RailShape) iblockdata1.getValue(((BaseRailBlock) iblockdata1.getBlock()).getShapeProperty()) : RailShape.NORTH_SOUTH;
+                RailShape blockpropertytrackposition1 = iblockdata1.getBlock() instanceof BaseRailBlock ? iblockdata1.getValue(((BaseRailBlock) iblockdata1.getBlock()).getShapeProperty()) : RailShape.NORTH_SOUTH;
 
                 if (enumdirection != Direction.DOWN && blockpropertytrackposition1.isAscending()) {
                     d3 = -0.4D;
@@ -81,7 +81,7 @@ public class MinecartItem extends Item {
                 shrink = false; // Paper - shrink below
                 // Chain to handler for new item
                 ItemStack eventStack = CraftItemStack.asNMSCopy(event.getItem());
-                DispenseItemBehavior idispensebehavior = (DispenseItemBehavior) DispenserBlock.DISPENSER_REGISTRY.get(eventStack.getItem());
+                DispenseItemBehavior idispensebehavior = DispenserBlock.DISPENSER_REGISTRY.get(eventStack.getItem());
                 if (idispensebehavior != DispenseItemBehavior.NOOP && idispensebehavior != this) {
                     idispensebehavior.dispense(pointer, eventStack);
                     return stack;
@@ -125,7 +125,7 @@ public class MinecartItem extends Item {
             ItemStack itemstack = context.getItemInHand();
 
             if (!world.isClientSide) {
-                RailShape blockpropertytrackposition = iblockdata.getBlock() instanceof BaseRailBlock ? (RailShape) iblockdata.getValue(((BaseRailBlock) iblockdata.getBlock()).getShapeProperty()) : RailShape.NORTH_SOUTH;
+                RailShape blockpropertytrackposition = iblockdata.getBlock() instanceof BaseRailBlock ? iblockdata.getValue(((BaseRailBlock) iblockdata.getBlock()).getShapeProperty()) : RailShape.NORTH_SOUTH;
                 double d0 = 0.0D;
 
                 if (blockpropertytrackposition.isAscending()) {
diff --git a/src/main/java/net/minecraft/world/item/PlayerHeadItem.java b/src/main/java/net/minecraft/world/item/PlayerHeadItem.java
index 045a988fc11587e2d7bd78b43f058092c880272c..760df0237e46bc8a9cfd55c53a608ccd30be46b9 100644
--- a/src/main/java/net/minecraft/world/item/PlayerHeadItem.java
+++ b/src/main/java/net/minecraft/world/item/PlayerHeadItem.java
@@ -46,7 +46,7 @@ public class PlayerHeadItem extends StandingAndWallBlockItem {
     public void verifyTagAfterLoad(CompoundTag nbt) {
         super.verifyTagAfterLoad(nbt);
         if (nbt.contains("SkullOwner", 8) && !StringUtils.isBlank(nbt.getString("SkullOwner"))) {
-            GameProfile gameprofile = new GameProfile((UUID) null, nbt.getString("SkullOwner"));
+            GameProfile gameprofile = new GameProfile(null, nbt.getString("SkullOwner"));
 
             SkullBlockEntity.updateGameprofile(gameprofile, (gameprofile1) -> {
                 nbt.put("SkullOwner", NbtUtils.writeGameProfile(new CompoundTag(), gameprofile1));
diff --git a/src/main/java/net/minecraft/world/item/PotionItem.java b/src/main/java/net/minecraft/world/item/PotionItem.java
index 900022ef88d2ae4290fe99e868a9b20f95482d99..69aba3a29968fd6a8beb1d59d59fc45d13133094 100644
--- a/src/main/java/net/minecraft/world/item/PotionItem.java
+++ b/src/main/java/net/minecraft/world/item/PotionItem.java
@@ -113,19 +113,19 @@ public class PotionItem extends Item {
                 return InteractionResult.PASS;
             }
             // Paper end
-            world.playSound((Player) null, blockposition, SoundEvents.GENERIC_SPLASH, SoundSource.BLOCKS, 1.0F, 1.0F);
+            world.playSound(null, blockposition, SoundEvents.GENERIC_SPLASH, SoundSource.BLOCKS, 1.0F, 1.0F);
             entityhuman.setItemInHand(context.getHand(), ItemUtils.createFilledResult(itemstack, entityhuman, new ItemStack(Items.GLASS_BOTTLE)));
             entityhuman.awardStat(Stats.ITEM_USED.get(itemstack.getItem()));
             if (!world.isClientSide) {
                 ServerLevel worldserver = (ServerLevel) world;
 
                 for (int i = 0; i < 5; ++i) {
-                    worldserver.sendParticles(ParticleTypes.SPLASH, (double) blockposition.getX() + world.random.nextDouble(), (double) (blockposition.getY() + 1), (double) blockposition.getZ() + world.random.nextDouble(), 1, 0.0D, 0.0D, 0.0D, 1.0D);
+                    worldserver.sendParticles(ParticleTypes.SPLASH, (double) blockposition.getX() + world.random.nextDouble(), blockposition.getY() + 1, (double) blockposition.getZ() + world.random.nextDouble(), 1, 0.0D, 0.0D, 0.0D, 1.0D);
                 }
             }
 
-            world.playSound((Player) null, blockposition, SoundEvents.BOTTLE_EMPTY, SoundSource.BLOCKS, 1.0F, 1.0F);
-            world.gameEvent((Entity) null, GameEvent.FLUID_PLACE, blockposition);
+            world.playSound(null, blockposition, SoundEvents.BOTTLE_EMPTY, SoundSource.BLOCKS, 1.0F, 1.0F);
+            world.gameEvent(null, GameEvent.FLUID_PLACE, blockposition);
             world.setBlockAndUpdate(blockposition, Blocks.MUD.defaultBlockState());
             return InteractionResult.sidedSuccess(world.isClientSide);
         } else {
diff --git a/src/main/java/net/minecraft/world/item/RecordItem.java b/src/main/java/net/minecraft/world/item/RecordItem.java
index 80f889db8a23763c5566940ea284b42030b1d34e..19349f50457fef026f558e042f75ce9dbc8f7dc3 100644
--- a/src/main/java/net/minecraft/world/item/RecordItem.java
+++ b/src/main/java/net/minecraft/world/item/RecordItem.java
@@ -39,13 +39,13 @@ public class RecordItem extends Item {
         BlockPos blockposition = context.getClickedPos();
         BlockState iblockdata = world.getBlockState(blockposition);
 
-        if (iblockdata.is(Blocks.JUKEBOX) && !((Boolean) iblockdata.getValue(JukeboxBlock.HAS_RECORD)).booleanValue()) {
+        if (iblockdata.is(Blocks.JUKEBOX) && !iblockdata.getValue(JukeboxBlock.HAS_RECORD).booleanValue()) {
             ItemStack itemstack = context.getItemInHand();
 
             if (!world.isClientSide) {
                 if (true) return InteractionResult.SUCCESS; // CraftBukkit - handled in ItemStack
                 ((JukeboxBlock) Blocks.JUKEBOX).setRecord(context.getPlayer(), world, blockposition, iblockdata, itemstack);
-                world.levelEvent((Player) null, 1010, blockposition, Item.getId(this));
+                world.levelEvent(null, 1010, blockposition, Item.getId(this));
                 itemstack.shrink(1);
                 Player entityhuman = context.getPlayer();
 
@@ -75,7 +75,7 @@ public class RecordItem extends Item {
 
     @Nullable
     public static RecordItem getBySound(SoundEvent sound) {
-        return (RecordItem) RecordItem.BY_NAME.get(sound);
+        return RecordItem.BY_NAME.get(sound);
     }
 
     public SoundEvent getSound() {
diff --git a/src/main/java/net/minecraft/world/item/ShovelItem.java b/src/main/java/net/minecraft/world/item/ShovelItem.java
index 011b6bb20cf39fe1b3a5af5ba7faedc438728264..a83bf3cfd0600741b7f02b141db351711a86275a 100644
--- a/src/main/java/net/minecraft/world/item/ShovelItem.java
+++ b/src/main/java/net/minecraft/world/item/ShovelItem.java
@@ -43,7 +43,7 @@ public class ShovelItem extends DiggerItem {
             } else if (blockState.getBlock() instanceof CampfireBlock && blockState.<Boolean>getValue(CampfireBlock.LIT).booleanValue()) {
                 afterAction = () -> { // Paper
                 if (!level.isClientSide()) {
-                    level.levelEvent((Player)null, 1009, blockPos, 0);
+                    level.levelEvent(null, 1009, blockPos, 0);
                 }
 
                 CampfireBlock.dowse(context.getPlayer(), level, blockPos, blockState);
diff --git a/src/main/java/net/minecraft/world/item/SnowballItem.java b/src/main/java/net/minecraft/world/item/SnowballItem.java
index ef3f90a5bcdd7b9815a4053cff166f9d2552f55d..5582d0375186d1ec2511692265822d9a8431fd4a 100644
--- a/src/main/java/net/minecraft/world/item/SnowballItem.java
+++ b/src/main/java/net/minecraft/world/item/SnowballItem.java
@@ -37,7 +37,7 @@ public class SnowballItem extends Item {
                     ((net.minecraft.server.level.ServerPlayer) user).getBukkitEntity().updateInventory();  // Paper
                 }
 
-                world.playSound((Player) null, user.getX(), user.getY(), user.getZ(), SoundEvents.SNOWBALL_THROW, SoundSource.NEUTRAL, 0.5F, 0.4F / (world.getRandom().nextFloat() * 0.4F + 0.8F));
+                world.playSound(null, user.getX(), user.getY(), user.getZ(), SoundEvents.SNOWBALL_THROW, SoundSource.NEUTRAL, 0.5F, 0.4F / (world.getRandom().nextFloat() * 0.4F + 0.8F));
             } else { // Paper
                 if (user instanceof net.minecraft.server.level.ServerPlayer) ((net.minecraft.server.level.ServerPlayer) user).getBukkitEntity().updateInventory(); // Paper
                 return InteractionResultHolder.fail(itemstack); // Paper
diff --git a/src/main/java/net/minecraft/world/item/SpawnEggItem.java b/src/main/java/net/minecraft/world/item/SpawnEggItem.java
index 31268e25056f980798ef7db72c4f955a074cc639..582ac321a1e5fa7e3a0ac7ef27037e33de0a93dc 100644
--- a/src/main/java/net/minecraft/world/item/SpawnEggItem.java
+++ b/src/main/java/net/minecraft/world/item/SpawnEggItem.java
@@ -71,7 +71,7 @@ public class SpawnEggItem extends Item {
                     tileentitymobspawner.setEntityId(entitytypes, world.getRandom());
                     tileentity.setChanged();
                     world.sendBlockUpdated(blockposition, iblockdata, iblockdata, 3);
-                    world.gameEvent((Entity) context.getPlayer(), GameEvent.BLOCK_CHANGE, blockposition);
+                    world.gameEvent(context.getPlayer(), GameEvent.BLOCK_CHANGE, blockposition);
                     itemstack.shrink(1);
                     return InteractionResult.CONSUME;
                 }
@@ -89,7 +89,7 @@ public class SpawnEggItem extends Item {
 
             if (entitytypes1.spawn((ServerLevel) world, itemstack, context.getPlayer(), blockposition1, MobSpawnType.SPAWN_EGG, true, !Objects.equals(blockposition, blockposition1) && enumdirection == Direction.UP) != null) {
                 itemstack.shrink(1);
-                world.gameEvent((Entity) context.getPlayer(), GameEvent.ENTITY_PLACE, blockposition);
+                world.gameEvent(context.getPlayer(), GameEvent.ENTITY_PLACE, blockposition);
             }
 
             return InteractionResult.CONSUME;
@@ -106,7 +106,7 @@ public class SpawnEggItem extends Item {
         } else if (!(world instanceof ServerLevel)) {
             return InteractionResultHolder.success(itemstack);
         } else {
-            BlockHitResult movingobjectpositionblock1 = (BlockHitResult) movingobjectpositionblock;
+            BlockHitResult movingobjectpositionblock1 = movingobjectpositionblock;
             BlockPos blockposition = movingobjectpositionblock1.getBlockPos();
 
             if (!(world.getBlockState(blockposition).getBlock() instanceof LiquidBlock)) {
@@ -123,7 +123,7 @@ public class SpawnEggItem extends Item {
                     }
 
                     user.awardStat(Stats.ITEM_USED.get(this));
-                    world.gameEvent((Entity) user, GameEvent.ENTITY_PLACE, entity.position());
+                    world.gameEvent(user, GameEvent.ENTITY_PLACE, entity.position());
                     return InteractionResultHolder.consume(itemstack);
                 }
             } else {
@@ -142,7 +142,7 @@ public class SpawnEggItem extends Item {
 
     @Nullable
     public static SpawnEggItem byId(@Nullable EntityType<?> type) {
-        return (SpawnEggItem) SpawnEggItem.BY_ID.get(type);
+        return SpawnEggItem.BY_ID.get(type);
     }
 
     public static Iterable<SpawnEggItem> eggs() {
@@ -154,7 +154,7 @@ public class SpawnEggItem extends Item {
             CompoundTag nbttagcompound1 = nbt.getCompound("EntityTag");
 
             if (nbttagcompound1.contains("id", 8)) {
-                return (EntityType) EntityType.byString(nbttagcompound1.getString("id")).orElse(this.defaultType);
+                return EntityType.byString(nbttagcompound1.getString("id")).orElse(this.defaultType);
             }
         }
 
@@ -175,7 +175,7 @@ public class SpawnEggItem extends Item {
             if (entity instanceof AgeableMob) {
                 object = ((AgeableMob) entity).getBreedOffspring(world, (AgeableMob) entity);
             } else {
-                object = (Mob) entityType.create(world);
+                object = entityType.create(world);
             }
 
             if (object == null) {
diff --git a/src/main/java/net/minecraft/world/item/SplashPotionItem.java b/src/main/java/net/minecraft/world/item/SplashPotionItem.java
index ece19f30064e9f59d4df077683e1f894455a84b7..e600f8ee8467c11981344d70dba489003c19e40f 100644
--- a/src/main/java/net/minecraft/world/item/SplashPotionItem.java
+++ b/src/main/java/net/minecraft/world/item/SplashPotionItem.java
@@ -17,7 +17,7 @@ public class SplashPotionItem extends ThrowablePotionItem {
         // Paper start
         InteractionResultHolder<ItemStack> wrapper = super.use(world, user, hand);
         if (wrapper.getResult() != net.minecraft.world.InteractionResult.FAIL) {
-        world.playSound((Player)null, user.getX(), user.getY(), user.getZ(), SoundEvents.SPLASH_POTION_THROW, SoundSource.PLAYERS, 0.5F, 0.4F / (world.getRandom().nextFloat() * 0.4F + 0.8F));
+        world.playSound(null, user.getX(), user.getY(), user.getZ(), SoundEvents.SPLASH_POTION_THROW, SoundSource.PLAYERS, 0.5F, 0.4F / (world.getRandom().nextFloat() * 0.4F + 0.8F));
         }
         return wrapper;
         // Paper end
diff --git a/src/main/java/net/minecraft/world/item/TridentItem.java b/src/main/java/net/minecraft/world/item/TridentItem.java
index 9365f886a23a71c41091b22d46896ff18a5a0635..7cec64f0918ff0a53cd40e4da8fa0d913e91d59b 100644
--- a/src/main/java/net/minecraft/world/item/TridentItem.java
+++ b/src/main/java/net/minecraft/world/item/TridentItem.java
@@ -100,7 +100,7 @@ public class TridentItem extends Item implements Vanishable {
                             entitythrowntrident.tridentItem = stack.copy(); // SPIGOT-4511 update since damage call moved
                             // CraftBukkit end
 
-                            world.playSound((Player) null, (Entity) entitythrowntrident, SoundEvents.TRIDENT_THROW, SoundSource.PLAYERS, 1.0F, 1.0F);
+                            world.playSound(null, entitythrowntrident, SoundEvents.TRIDENT_THROW, SoundSource.PLAYERS, 1.0F, 1.0F);
                             if (event.shouldConsume() && !entityhuman.getAbilities().instabuild) { // Paper
                                 entityhuman.getInventory().removeItem(stack);
                             }
@@ -130,7 +130,7 @@ public class TridentItem extends Item implements Vanishable {
                         f2 *= f6 / f5;
                         f3 *= f6 / f5;
                         f4 *= f6 / f5;
-                        entityhuman.push((double) f2, (double) f3, (double) f4);
+                        entityhuman.push(f2, f3, f4);
                         entityhuman.startAutoSpinAttack(20);
                         if (entityhuman.isOnGround()) {
                             float f7 = 1.1999999F;
@@ -148,7 +148,7 @@ public class TridentItem extends Item implements Vanishable {
                             soundeffect = SoundEvents.TRIDENT_RIPTIDE_1;
                         }
 
-                        world.playSound((Player) null, (Entity) entityhuman, soundeffect, SoundSource.PLAYERS, 1.0F, 1.0F);
+                        world.playSound(null, entityhuman, soundeffect, SoundSource.PLAYERS, 1.0F, 1.0F);
                     }
 
                 }
diff --git a/src/main/java/net/minecraft/world/item/WrittenBookItem.java b/src/main/java/net/minecraft/world/item/WrittenBookItem.java
index 31911c09fe15753ae32fa39417bdc9e9de552a88..20bfb011f05e11926fa7f98845c4e403c893c215 100644
--- a/src/main/java/net/minecraft/world/item/WrittenBookItem.java
+++ b/src/main/java/net/minecraft/world/item/WrittenBookItem.java
@@ -125,7 +125,7 @@ public class WrittenBookItem extends Item {
                         return false;
                     }
 
-                    listTag2.add(i, (Tag)StringTag.valueOf(string));
+                    listTag2.add(i, StringTag.valueOf(string));
                 }
 
                 if (compoundTag.contains("filtered_pages", 10)) {
diff --git a/src/main/java/net/minecraft/world/item/crafting/Ingredient.java b/src/main/java/net/minecraft/world/item/crafting/Ingredient.java
index 8d4aca59bd7518179520f4d4fb7137778e232d90..8b1a6ea6f84ccfa064c4cba34e4c3f4c8bd78522 100644
--- a/src/main/java/net/minecraft/world/item/crafting/Ingredient.java
+++ b/src/main/java/net/minecraft/world/item/crafting/Ingredient.java
@@ -41,14 +41,14 @@ public final class Ingredient implements Predicate<ItemStack> {
     public boolean exact; // CraftBukkit
 
     public Ingredient(Stream<? extends Ingredient.Value> entries) {
-        this.values = (Ingredient.Value[]) entries.toArray((i) -> {
-            return new Ingredient.Value[i];
+        this.values = entries.toArray((i) -> {
+            return new Value[i];
         });
     }
 
     public ItemStack[] getItems() {
         if (this.itemStacks == null) {
-            this.itemStacks = (ItemStack[]) Arrays.stream(this.values).flatMap((recipeitemstack_provider) -> {
+            this.itemStacks = Arrays.stream(this.values).flatMap((recipeitemstack_provider) -> {
                 return recipeitemstack_provider.getItems().stream();
             }).distinct().toArray((i) -> {
                 return new ItemStack[i];
diff --git a/src/main/java/net/minecraft/world/item/crafting/RecipeManager.java b/src/main/java/net/minecraft/world/item/crafting/RecipeManager.java
index fd4df1cca096be04eb75a38969ca95ba2bf39e3e..41afce98c0b2975a56ec2781b5fe6db08c5499de 100644
--- a/src/main/java/net/minecraft/world/item/crafting/RecipeManager.java
+++ b/src/main/java/net/minecraft/world/item/crafting/RecipeManager.java
@@ -60,10 +60,10 @@ public class RecipeManager extends SimpleJsonResourceReloadListener {
 
         while (iterator.hasNext()) {
             Entry<ResourceLocation, JsonElement> entry = (Entry) iterator.next();
-            ResourceLocation minecraftkey = (ResourceLocation) entry.getKey();
+            ResourceLocation minecraftkey = entry.getKey();
 
             try {
-                Recipe<?> irecipe = RecipeManager.fromJson(minecraftkey, GsonHelper.convertToJsonObject((JsonElement) entry.getValue(), "top element"));
+                Recipe<?> irecipe = RecipeManager.fromJson(minecraftkey, GsonHelper.convertToJsonObject(entry.getValue(), "top element"));
 
                 // CraftBukkit start
                 (map1.computeIfAbsent(irecipe.getType(), (recipes) -> {
@@ -76,7 +76,7 @@ public class RecipeManager extends SimpleJsonResourceReloadListener {
             }
         }
 
-        this.recipes = (Map) map1.entrySet().stream().collect(ImmutableMap.toImmutableMap(Entry::getKey, (entry1) -> {
+        this.recipes = map1.entrySet().stream().collect(ImmutableMap.toImmutableMap(Entry::getKey, (entry1) -> {
             return entry1.getValue(); // CraftBukkit // Paper - decompile fix - *shrugs internally* // todo: is this needed anymore?
         }));
         this.byName = Maps.newHashMap(builder.build()); // CraftBukkit
@@ -123,9 +123,9 @@ public class RecipeManager extends SimpleJsonResourceReloadListener {
         }
 
         return map.entrySet().stream().filter((entry) -> {
-            return ((Recipe) entry.getValue()).matches(inventory, world);
+            return entry.getValue().matches(inventory, world);
         }).findFirst().map((entry) -> {
-            return Pair.of((ResourceLocation) entry.getKey(), entry.getValue()); // CraftBukkit - decompile error
+            return Pair.of(entry.getKey(), entry.getValue()); // CraftBukkit - decompile error
         });
     }
 
@@ -134,7 +134,7 @@ public class RecipeManager extends SimpleJsonResourceReloadListener {
     }
 
     public <C extends Container, T extends Recipe<C>> List<T> getRecipesFor(RecipeType<T> type, C inventory, Level world) {
-        return (List) this.byType(type).values().stream().filter((irecipe) -> {
+        return this.byType(type).values().stream().filter((irecipe) -> {
             return irecipe.matches(inventory, world);
         }).sorted(Comparator.comparing((irecipe) -> {
             return irecipe.getResultItem().getDescriptionId();
@@ -166,7 +166,7 @@ public class RecipeManager extends SimpleJsonResourceReloadListener {
     }
 
     public Collection<Recipe<?>> getRecipes() {
-        return (Collection) this.recipes.values().stream().flatMap((map) -> {
+        return this.recipes.values().stream().flatMap((map) -> {
             return map.values().stream();
         }).collect(Collectors.toSet());
     }
@@ -191,11 +191,11 @@ public class RecipeManager extends SimpleJsonResourceReloadListener {
         Builder<ResourceLocation, Recipe<?>> builder = ImmutableMap.builder();
 
         recipes.forEach((irecipe) -> {
-            Map<ResourceLocation, Recipe<?>> map1 = (Map) map.computeIfAbsent(irecipe.getType(), (recipes_) -> { // Paper - remap fix
+            Map<ResourceLocation, Recipe<?>> map1 = map.computeIfAbsent(irecipe.getType(), (recipes_) -> { // Paper - remap fix
                 return new Object2ObjectLinkedOpenHashMap<>(); // CraftBukkit
             });
             ResourceLocation minecraftkey = irecipe.getId();
-            Recipe<?> irecipe1 = (Recipe) map1.put(minecraftkey, irecipe);
+            Recipe<?> irecipe1 = map1.put(minecraftkey, irecipe);
 
             builder.put(minecraftkey, irecipe);
             if (irecipe1 != null) {
@@ -237,9 +237,9 @@ public class RecipeManager extends SimpleJsonResourceReloadListener {
                 Optional<Pair<ResourceLocation, T>> optional = craftingmanager.getRecipeFor(type, inventory, world, this.lastRecipe);
 
                 if (optional.isPresent()) {
-                    Pair<ResourceLocation, T> pair = (Pair) optional.get();
+                    Pair<ResourceLocation, T> pair = optional.get();
 
-                    this.lastRecipe = (ResourceLocation) pair.getFirst();
+                    this.lastRecipe = pair.getFirst();
                     return Optional.of(pair.getSecond()); // CraftBukkit - decompile error
                 } else {
                     return Optional.empty();
diff --git a/src/main/java/net/minecraft/world/item/crafting/ShapedRecipe.java b/src/main/java/net/minecraft/world/item/crafting/ShapedRecipe.java
index ecc70d770e794e0ef27ef365f5a32555c2b06544..d92beb4789dfba457a0003e93e70fe7e78f3803d 100644
--- a/src/main/java/net/minecraft/world/item/crafting/ShapedRecipe.java
+++ b/src/main/java/net/minecraft/world/item/crafting/ShapedRecipe.java
@@ -170,9 +170,9 @@ public class ShapedRecipe implements CraftingRecipe {
 
                 if (i1 >= 0 && j1 >= 0 && i1 < this.width && j1 < this.height) {
                     if (flipped) {
-                        recipeitemstack = (Ingredient) this.recipeItems.get(this.width - i1 - 1 + j1 * this.width);
+                        recipeitemstack = this.recipeItems.get(this.width - i1 - 1 + j1 * this.width);
                     } else {
-                        recipeitemstack = (Ingredient) this.recipeItems.get(i1 + j1 * this.width);
+                        recipeitemstack = this.recipeItems.get(i1 + j1 * this.width);
                     }
                 }
 
@@ -206,7 +206,7 @@ public class ShapedRecipe implements CraftingRecipe {
         for (int k = 0; k < pattern.length; ++k) {
             for (int l = 0; l < pattern[k].length(); ++l) {
                 String s = pattern[k].substring(l, l + 1);
-                Ingredient recipeitemstack = (Ingredient) symbols.get(s);
+                Ingredient recipeitemstack = symbols.get(s);
 
                 if (recipeitemstack == null) {
                     throw new JsonSyntaxException("Pattern references symbol '" + s + "' but it's not defined in the key");
@@ -326,15 +326,15 @@ public class ShapedRecipe implements CraftingRecipe {
         while (iterator.hasNext()) {
             Entry<String, JsonElement> entry = (Entry) iterator.next();
 
-            if (((String) entry.getKey()).length() != 1) {
-                throw new JsonSyntaxException("Invalid key entry: '" + (String) entry.getKey() + "' is an invalid symbol (must be 1 character only).");
+            if (entry.getKey().length() != 1) {
+                throw new JsonSyntaxException("Invalid key entry: '" + entry.getKey() + "' is an invalid symbol (must be 1 character only).");
             }
 
             if (" ".equals(entry.getKey())) {
                 throw new JsonSyntaxException("Invalid key entry: ' ' is a reserved symbol.");
             }
 
-            map.put((String) entry.getKey(), Ingredient.fromJson((JsonElement) entry.getValue()));
+            map.put(entry.getKey(), Ingredient.fromJson(entry.getValue()));
         }
 
         map.put(" ", Ingredient.EMPTY);
diff --git a/src/main/java/net/minecraft/world/item/enchantment/FrostWalkerEnchantment.java b/src/main/java/net/minecraft/world/item/enchantment/FrostWalkerEnchantment.java
index 4e19570cb829f36d39c3eb11c03711e88968dbab..5bacf55ce5d763eeb747f20f834341956ef791ed 100644
--- a/src/main/java/net/minecraft/world/item/enchantment/FrostWalkerEnchantment.java
+++ b/src/main/java/net/minecraft/world/item/enchantment/FrostWalkerEnchantment.java
@@ -43,19 +43,19 @@ public class FrostWalkerEnchantment extends Enchantment {
             BlockState iblockdata = Blocks.FROSTED_ICE.defaultBlockState();
             float f = (float) Math.min(16, 2 + level);
             BlockPos.MutableBlockPos blockposition_mutableblockposition = new BlockPos.MutableBlockPos();
-            Iterator iterator = BlockPos.betweenClosed(blockPos.offset((double) (-f), -1.0D, (double) (-f)), blockPos.offset((double) f, -1.0D, (double) f)).iterator();
+            Iterator iterator = BlockPos.betweenClosed(blockPos.offset(-f, -1.0D, -f), blockPos.offset(f, -1.0D, f)).iterator();
 
             while (iterator.hasNext()) {
                 BlockPos blockposition1 = (BlockPos) iterator.next();
 
-                if (blockposition1.closerToCenterThan(entity.position(), (double) f)) {
+                if (blockposition1.closerToCenterThan(entity.position(), f)) {
                     blockposition_mutableblockposition.set(blockposition1.getX(), blockposition1.getY() + 1, blockposition1.getZ());
                     BlockState iblockdata1 = world.getBlockState(blockposition_mutableblockposition);
 
                     if (iblockdata1.isAir()) {
                         BlockState iblockdata2 = world.getBlockState(blockposition1);
 
-                        if (iblockdata2.getMaterial() == Material.WATER && ((Integer) iblockdata2.getValue(LiquidBlock.LEVEL)).intValue() == 0 && iblockdata.canSurvive(world, blockposition1) && world.isUnobstructed(iblockdata, blockposition1, CollisionContext.empty())) {
+                        if (iblockdata2.getMaterial() == Material.WATER && iblockdata2.getValue(LiquidBlock.LEVEL).intValue() == 0 && iblockdata.canSurvive(world, blockposition1) && world.isUnobstructed(iblockdata, blockposition1, CollisionContext.empty())) {
                             // CraftBukkit Start - Call EntityBlockFormEvent for Frost Walker
                             if (org.bukkit.craftbukkit.event.CraftEventFactory.handleBlockFormEvent(world, blockposition1, iblockdata, entity)) {
                                 world.scheduleTick(blockposition1, Blocks.FROSTED_ICE, Mth.nextInt(entity.getRandom(), 60, 120));
diff --git a/src/main/java/net/minecraft/world/item/trading/MerchantOffer.java b/src/main/java/net/minecraft/world/item/trading/MerchantOffer.java
index 8a9a701baabdaf066cd9b28c05430f673fcafb4e..fd50d1c2435b82215bc5b3fdbe5044d426bc342e 100644
--- a/src/main/java/net/minecraft/world/item/trading/MerchantOffer.java
+++ b/src/main/java/net/minecraft/world/item/trading/MerchantOffer.java
@@ -119,7 +119,7 @@ public class MerchantOffer {
         ItemStack itemstack = this.baseCostA.copy();
         int j = Math.max(0, Mth.floor((float) (i * this.demand) * this.priceMultiplier));
 
-        itemstack.setCount(Mth.clamp(i + j + this.specialPriceDiff, (int) 1, this.baseCostA.getItem().getMaxStackSize()));
+        itemstack.setCount(Mth.clamp(i + j + this.specialPriceDiff, 1, this.baseCostA.getItem().getMaxStackSize()));
         return itemstack;
     }
 
diff --git a/src/main/java/net/minecraft/world/level/BaseSpawner.java b/src/main/java/net/minecraft/world/level/BaseSpawner.java
index 4e56e5d368953e8270eeb28d28aa958a35e1e460..e404628f7bd3f3934c9a188c943a6cc6a0a5c567 100644
--- a/src/main/java/net/minecraft/world/level/BaseSpawner.java
+++ b/src/main/java/net/minecraft/world/level/BaseSpawner.java
@@ -55,7 +55,7 @@ public abstract class BaseSpawner {
     }
 
     public boolean isNearPlayer(Level world, BlockPos pos) {
-        return world.hasNearbyAlivePlayerThatAffectsSpawning((double) pos.getX() + 0.5D, (double) pos.getY() + 0.5D, (double) pos.getZ() + 0.5D, (double) this.requiredPlayerRange); // Paper - Affects Spawning API
+        return world.hasNearbyAlivePlayerThatAffectsSpawning((double) pos.getX() + 0.5D, (double) pos.getY() + 0.5D, (double) pos.getZ() + 0.5D, this.requiredPlayerRange); // Paper - Affects Spawning API
     }
 
     public void clientTick(Level world, BlockPos pos) {
@@ -113,11 +113,11 @@ public abstract class BaseSpawner {
                     double d1 = j >= 2 ? nbttaglist.getDouble(1) : (double) (pos.getY() + randomsource.nextInt(3) - 1);
                     double d2 = j >= 3 ? nbttaglist.getDouble(2) : (double) pos.getZ() + (randomsource.nextDouble() - randomsource.nextDouble()) * (double) this.spawnRange + 0.5D;
 
-                    if (world.noCollision(((EntityType) optional.get()).getAABB(d0, d1, d2))) {
+                    if (world.noCollision(optional.get().getAABB(d0, d1, d2))) {
                         BlockPos blockposition1 = new BlockPos(d0, d1, d2);
 
                         if (mobspawnerdata.getCustomSpawnRules().isPresent()) {
-                            if (!((EntityType) optional.get()).getCategory().isFriendly() && world.getDifficulty() == Difficulty.PEACEFUL) {
+                            if (!optional.get().getCategory().isFriendly() && world.getDifficulty() == Difficulty.PEACEFUL) {
                                 continue;
                             }
 
@@ -161,7 +161,7 @@ public abstract class BaseSpawner {
                             return;
                         }
 
-                        int k = world.getEntitiesOfClass(entity.getClass(), (new AABB((double) pos.getX(), (double) pos.getY(), (double) pos.getZ(), (double) (pos.getX() + 1), (double) (pos.getY() + 1), (double) (pos.getZ() + 1))).inflate((double) this.spawnRange)).size();
+                        int k = world.getEntitiesOfClass(entity.getClass(), (new AABB(pos.getX(), pos.getY(), pos.getZ(), pos.getX() + 1, pos.getY() + 1, pos.getZ() + 1)).inflate(this.spawnRange)).size();
 
                         if (k >= this.maxNearbyEntities) {
                             this.delay(world, pos);
@@ -178,7 +178,7 @@ public abstract class BaseSpawner {
                             }
 
                             if (mobspawnerdata.getEntityToSpawn().size() == 1 && mobspawnerdata.getEntityToSpawn().contains("id", 8)) {
-                                ((Mob) entity).finalizeSpawn(world, world.getCurrentDifficultyAt(entity.blockPosition()), MobSpawnType.SPAWNER, (SpawnGroupData) null, (CompoundTag) null);
+                                ((Mob) entity).finalizeSpawn(world, world.getCurrentDifficultyAt(entity.blockPosition()), MobSpawnType.SPAWNER, null, null);
                             }
                             // Spigot Start
                             if (entityinsentient.level.spigotConfig.nerfSpawnerMobs) {
@@ -235,7 +235,7 @@ public abstract class BaseSpawner {
         }
 
         this.spawnPotentials.getRandom(randomsource).ifPresent((weightedentry_b) -> {
-            this.setNextSpawnData(world, pos, (SpawnData) weightedentry_b.getData());
+            this.setNextSpawnData(world, pos, weightedentry_b.getData());
         });
         this.broadcastEvent(world, pos, 1);
     }
@@ -251,7 +251,7 @@ public abstract class BaseSpawner {
         boolean flag = nbt.contains("SpawnData", 10);
 
         if (flag) {
-            SpawnData mobspawnerdata = (SpawnData) SpawnData.CODEC.parse(NbtOps.INSTANCE, nbt.getCompound("SpawnData")).resultOrPartial((s) -> {
+            SpawnData mobspawnerdata = SpawnData.CODEC.parse(NbtOps.INSTANCE, nbt.getCompound("SpawnData")).resultOrPartial((s) -> {
                 BaseSpawner.LOGGER.warn("Invalid SpawnData: {}", s);
             }).orElseGet(SpawnData::new);
 
@@ -263,7 +263,7 @@ public abstract class BaseSpawner {
         if (flag1) {
             ListTag nbttaglist = nbt.getList("SpawnPotentials", 10);
 
-            this.spawnPotentials = (SimpleWeightedRandomList) SpawnData.LIST_CODEC.parse(NbtOps.INSTANCE, nbttaglist).resultOrPartial((s) -> {
+            this.spawnPotentials = SpawnData.LIST_CODEC.parse(NbtOps.INSTANCE, nbttaglist).resultOrPartial((s) -> {
                 BaseSpawner.LOGGER.warn("Invalid SpawnPotentials list: {}", s);
             }).orElseGet(SimpleWeightedRandomList::empty);
         } else {
@@ -314,12 +314,12 @@ public abstract class BaseSpawner {
         nbt.putShort("RequiredPlayerRange", (short) this.requiredPlayerRange);
         nbt.putShort("SpawnRange", (short) this.spawnRange);
         if (this.nextSpawnData != null) {
-            nbt.put("SpawnData", (Tag) SpawnData.CODEC.encodeStart(NbtOps.INSTANCE, this.nextSpawnData).result().orElseThrow(() -> {
+            nbt.put("SpawnData", SpawnData.CODEC.encodeStart(NbtOps.INSTANCE, this.nextSpawnData).result().orElseThrow(() -> {
                 return new IllegalStateException("Invalid SpawnData");
             }));
         }
 
-        nbt.put("SpawnPotentials", (Tag) SpawnData.LIST_CODEC.encodeStart(NbtOps.INSTANCE, this.spawnPotentials).result().orElseThrow());
+        nbt.put("SpawnPotentials", SpawnData.LIST_CODEC.encodeStart(NbtOps.INSTANCE, this.spawnPotentials).result().orElseThrow());
         return nbt;
     }
 
diff --git a/src/main/java/net/minecraft/world/level/BlockCollisions.java b/src/main/java/net/minecraft/world/level/BlockCollisions.java
index 018cbf866bbe39b69a4afa039166e8d34ec3ab5f..0e21e5e485b4efb83847bd03e5ce1c42e896826b 100644
--- a/src/main/java/net/minecraft/world/level/BlockCollisions.java
+++ b/src/main/java/net/minecraft/world/level/BlockCollisions.java
@@ -106,14 +106,14 @@ public class BlockCollisions extends AbstractIterator<VoxelShape> {
 
                 VoxelShape voxelShape = blockState.getCollisionShape(this.collisionGetter, this.pos, this.context);
                 if (voxelShape == Shapes.block()) {
-                    if (!io.papermc.paper.util.CollisionUtil.voxelShapeIntersect(this.box, (double)i, (double)j, (double)k, (double)i + 1.0D, (double)j + 1.0D, (double)k + 1.0D)) { // Paper - keep vanilla behavior for voxelshape intersection - See comment in CollisionUtil
+                    if (!io.papermc.paper.util.CollisionUtil.voxelShapeIntersect(this.box, i, j, k, (double)i + 1.0D, (double)j + 1.0D, (double)k + 1.0D)) { // Paper - keep vanilla behavior for voxelshape intersection - See comment in CollisionUtil
                         continue;
                     }
 
-                    return voxelShape.move((double)i, (double)j, (double)k);
+                    return voxelShape.move(i, j, k);
                 }
 
-                VoxelShape voxelShape2 = voxelShape.move((double)i, (double)j, (double)k);
+                VoxelShape voxelShape2 = voxelShape.move(i, j, k);
                 if (!Shapes.joinIsNotEmpty(voxelShape2, this.entityShape, BooleanOp.AND)) {
                     continue;
                 }
diff --git a/src/main/java/net/minecraft/world/level/BlockGetter.java b/src/main/java/net/minecraft/world/level/BlockGetter.java
index db926512f612420a1dcd35e017e85ff839f9af5a..e5caa537cf7f7098c79d1e7f1b572eb73949aa80 100644
--- a/src/main/java/net/minecraft/world/level/BlockGetter.java
+++ b/src/main/java/net/minecraft/world/level/BlockGetter.java
@@ -64,7 +64,7 @@ public interface BlockGetter extends LevelHeightAccessor {
     }
 
     default BlockHitResult isBlockInLine(ClipBlockStateContext context) {
-        return (BlockHitResult) BlockGetter.traverseBlocks(context.getFrom(), context.getTo(), context, (clipblockstatecontext1, blockposition) -> {
+        return BlockGetter.traverseBlocks(context.getFrom(), context.getTo(), context, (clipblockstatecontext1, blockposition) -> {
             BlockState iblockdata = this.getBlockState(blockposition);
             Vec3 vec3d = clipblockstatecontext1.getFrom().subtract(clipblockstatecontext1.getTo());
 
@@ -103,7 +103,7 @@ public interface BlockGetter extends LevelHeightAccessor {
     // CraftBukkit end
 
     default BlockHitResult clip(ClipContext context) {
-        return (BlockHitResult) BlockGetter.traverseBlocks(context.getFrom(), context.getTo(), context, (raytrace1, blockposition) -> {
+        return BlockGetter.traverseBlocks(context.getFrom(), context.getTo(), context, (raytrace1, blockposition) -> {
             return this.clip(raytrace1, blockposition); // CraftBukkit - moved into separate method
         }, (raytrace1) -> {
             Vec3 vec3d = raytrace1.getFrom().subtract(raytrace1.getTo());
@@ -131,7 +131,7 @@ public interface BlockGetter extends LevelHeightAccessor {
         if (!blockCollisionShape.isEmpty()) {
             return blockCollisionShape.max(Direction.Axis.Y);
         } else {
-            double d0 = ((VoxelShape) belowBlockCollisionShapeGetter.get()).max(Direction.Axis.Y);
+            double d0 = belowBlockCollisionShapeGetter.get().max(Direction.Axis.Y);
 
             return d0 >= 1.0D ? d0 - 1.0D : Double.NEGATIVE_INFINITY;
         }
diff --git a/src/main/java/net/minecraft/world/level/ChunkPos.java b/src/main/java/net/minecraft/world/level/ChunkPos.java
index 2d41f619577b41d6420159668bbab70fb6c762eb..c1f4b90680bc64bb2eb4eb3c3e7cb3467513bcdb 100644
--- a/src/main/java/net/minecraft/world/level/ChunkPos.java
+++ b/src/main/java/net/minecraft/world/level/ChunkPos.java
@@ -172,7 +172,7 @@ public class ChunkPos {
         int j = Math.abs(pos1.z - pos2.z) + 1;
         final int k = pos1.x < pos2.x ? 1 : -1;
         final int l = pos1.z < pos2.z ? 1 : -1;
-        return StreamSupport.stream(new Spliterators.AbstractSpliterator<ChunkPos>((long)(i * j), 64) {
+        return StreamSupport.stream(new Spliterators.AbstractSpliterator<ChunkPos>(i * j, 64) {
             @Nullable
             private ChunkPos pos;
 
diff --git a/src/main/java/net/minecraft/world/level/CollisionGetter.java b/src/main/java/net/minecraft/world/level/CollisionGetter.java
index 117a6dabd888a9671b6422272eb419c8b8f88571..e00a9692fffef8bb5bfcd6237e82e35da0ae3d69 100644
--- a/src/main/java/net/minecraft/world/level/CollisionGetter.java
+++ b/src/main/java/net/minecraft/world/level/CollisionGetter.java
@@ -29,7 +29,7 @@ public interface CollisionGetter extends BlockGetter {
 
     default boolean isUnobstructed(BlockState state, BlockPos pos, CollisionContext context) {
         VoxelShape voxelShape = state.getCollisionShape(this, pos, context);
-        return voxelShape.isEmpty() || this.isUnobstructed((Entity)null, voxelShape.move((double)pos.getX(), (double)pos.getY(), (double)pos.getZ()));
+        return voxelShape.isEmpty() || this.isUnobstructed(null, voxelShape.move(pos.getX(), pos.getY(), pos.getZ()));
     }
 
     default boolean isUnobstructed(Entity entity) {
diff --git a/src/main/java/net/minecraft/world/level/EntityGetter.java b/src/main/java/net/minecraft/world/level/EntityGetter.java
index dd13bace9e185a46b96134fcfd03083a11187104..2950bdffdde21ef3e2d534e751ebbc99ae97efaa 100644
--- a/src/main/java/net/minecraft/world/level/EntityGetter.java
+++ b/src/main/java/net/minecraft/world/level/EntityGetter.java
@@ -176,7 +176,7 @@ public interface EntityGetter {
 
     @Nullable
     default @org.jetbrains.annotations.Nullable Player getNearestPlayer(TargetingConditions targetPredicate, double x, double y, double z) {
-        return this.getNearestEntity(this.players(), targetPredicate, (LivingEntity)null, x, y, z);
+        return this.getNearestEntity(this.players(), targetPredicate, null, x, y, z);
     }
 
     @Nullable
diff --git a/src/main/java/net/minecraft/world/level/Explosion.java b/src/main/java/net/minecraft/world/level/Explosion.java
index 213ec2fdd706b444bf9b4552957b7e1b8573833c..f9060bf5f274f84adef1312ee021195fd949cfdc 100644
--- a/src/main/java/net/minecraft/world/level/Explosion.java
+++ b/src/main/java/net/minecraft/world/level/Explosion.java
@@ -77,7 +77,7 @@ public class Explosion {
     }
 
     public Explosion(Level world, @Nullable Entity entity, double x, double y, double z, float power, boolean createFire, Explosion.BlockInteraction destructionType) {
-        this(world, entity, (DamageSource) null, (ExplosionDamageCalculator) null, x, y, z, power, createFire, destructionType);
+        this(world, entity, null, null, x, y, z, power, createFire, destructionType);
     }
 
     public Explosion(Level world, @Nullable Entity entity, @Nullable DamageSource damageSource, @Nullable ExplosionDamageCalculator behavior, double x, double y, double z, float power, boolean createFire, Explosion.BlockInteraction destructionType) {
@@ -97,7 +97,7 @@ public class Explosion {
     }
 
     private ExplosionDamageCalculator makeDamageCalculator(@Nullable Entity entity) {
-        return (ExplosionDamageCalculator) (entity == null ? Explosion.EXPLOSION_DAMAGE_CALCULATOR : new EntityBasedExplosionDamageCalculator(entity));
+        return entity == null ? Explosion.EXPLOSION_DAMAGE_CALCULATOR : new EntityBasedExplosionDamageCalculator(entity);
     }
 
     public static float getSeenPercent(Vec3 source, Entity entity) {
@@ -152,9 +152,9 @@ public class Explosion {
             for (i = 0; i < 16; ++i) {
                 for (j = 0; j < 16; ++j) {
                     if (k == 0 || k == 15 || i == 0 || i == 15 || j == 0 || j == 15) {
-                        double d0 = (double) ((float) k / 15.0F * 2.0F - 1.0F);
-                        double d1 = (double) ((float) i / 15.0F * 2.0F - 1.0F);
-                        double d2 = (double) ((float) j / 15.0F * 2.0F - 1.0F);
+                        double d0 = (float) k / 15.0F * 2.0F - 1.0F;
+                        double d1 = (float) i / 15.0F * 2.0F - 1.0F;
+                        double d2 = (float) j / 15.0F * 2.0F - 1.0F;
                         double d3 = Math.sqrt(d0 * d0 + d1 * d1 + d2 * d2);
 
                         d0 /= d3;
@@ -178,7 +178,7 @@ public class Explosion {
                             Optional<Float> optional = this.damageCalculator.getBlockExplosionResistance(this, this.level, blockposition, iblockdata, fluid);
 
                             if (optional.isPresent()) {
-                                f -= (((Float) optional.get()).floatValue() + 0.3F) * 0.3F;
+                                f -= (optional.get().floatValue() + 0.3F) * 0.3F;
                             }
 
                             if (f > 0.0F && this.damageCalculator.shouldBlockExplode(this, this.level, blockposition, iblockdata, f)) {
@@ -212,11 +212,11 @@ public class Explosion {
         int i1 = Mth.floor(this.y + (double) f2 + 1.0D);
         int j1 = Mth.floor(this.z - (double) f2 - 1.0D);
         int k1 = Mth.floor(this.z + (double) f2 + 1.0D);
-        List<Entity> list = this.level.getEntities(this.source, new AABB((double) i, (double) l, (double) j1, (double) j, (double) i1, (double) k1), (com.google.common.base.Predicate<Entity>) entity -> entity.isAlive() && !entity.isSpectator()); // Paper - Fix lag from explosions processing dead entities
+        List<Entity> list = this.level.getEntities(this.source, new AABB(i, l, j1, j, i1, k1), (com.google.common.base.Predicate<Entity>) entity -> entity.isAlive() && !entity.isSpectator()); // Paper - Fix lag from explosions processing dead entities
         Vec3 vec3d = new Vec3(this.x, this.y, this.z);
 
         for (int l1 = 0; l1 < list.size(); ++l1) {
-            Entity entity = (Entity) list.get(l1);
+            Entity entity = list.get(l1);
 
             if (!entity.ignoreExplosion()) {
                 double d7 = Math.sqrt(entity.distanceToSqr(vec3d)) / (double) f2;
@@ -315,7 +315,7 @@ public class Explosion {
 
             List<org.bukkit.block.Block> blockList = new ObjectArrayList<>();
             for (int i1 = this.toBlow.size() - 1; i1 >= 0; i1--) {
-                BlockPos cpos = (BlockPos) this.toBlow.get(i1);
+                BlockPos cpos = this.toBlow.get(i1);
                 org.bukkit.block.Block bblock = bworld.getBlockAt(cpos.getX(), cpos.getY(), cpos.getZ());
                 if (!bblock.getType().isAir()) {
                     blockList.add(bblock);
@@ -393,7 +393,7 @@ public class Explosion {
             while (objectlistiterator.hasNext()) {
                 Pair<ItemStack, BlockPos> pair = (Pair) objectlistiterator.next();
 
-                Block.popResource(this.level, (BlockPos) pair.getSecond(), (ItemStack) pair.getFirst());
+                Block.popResource(this.level, pair.getSecond(), pair.getFirst());
             }
         }
 
@@ -424,13 +424,13 @@ public class Explosion {
         int i = stacks.size();
 
         for (int j = 0; j < i; ++j) {
-            Pair<ItemStack, BlockPos> pair = (Pair) stacks.get(j);
-            ItemStack itemstack1 = (ItemStack) pair.getFirst();
+            Pair<ItemStack, BlockPos> pair = stacks.get(j);
+            ItemStack itemstack1 = pair.getFirst();
 
             if (ItemEntity.areMergable(itemstack1, stack)) {
                 ItemStack itemstack2 = ItemEntity.merge(itemstack1, stack, 16);
 
-                stacks.set(j, Pair.of(itemstack2, (BlockPos) pair.getSecond()));
+                stacks.set(j, Pair.of(itemstack2, pair.getSecond()));
                 if (stack.isEmpty()) {
                     return;
                 }
diff --git a/src/main/java/net/minecraft/world/level/GameRules.java b/src/main/java/net/minecraft/world/level/GameRules.java
index d95712045741e870985f3d6202247f7f8edfffe9..4b10b568b7ce6b5305bba63690be971435488c7b 100644
--- a/src/main/java/net/minecraft/world/level/GameRules.java
+++ b/src/main/java/net/minecraft/world/level/GameRules.java
@@ -100,7 +100,7 @@ public class GameRules {
 
     private static <T extends GameRules.Value<T>> GameRules.Key<T> register(String name, GameRules.Category category, GameRules.Type<T> type) {
         GameRules.Key<T> gamerules_gamerulekey = new GameRules.Key<>(name, category);
-        GameRules.Type<?> gamerules_gameruledefinition1 = (GameRules.Type) GameRules.GAME_RULE_TYPES.put(gamerules_gamerulekey, type);
+        GameRules.Type<?> gamerules_gameruledefinition1 = GameRules.GAME_RULE_TYPES.put(gamerules_gamerulekey, type);
 
         if (gamerules_gameruledefinition1 != null) {
             throw new IllegalStateException("Duplicate game rule registration for " + name);
@@ -147,8 +147,8 @@ public class GameRules {
     }
 
     public GameRules copy() {
-        return new GameRules((Map) this.rules.entrySet().stream().collect(ImmutableMap.toImmutableMap(Entry::getKey, (entry) -> {
-            return ((GameRules.Value) entry.getValue()).copy();
+        return new GameRules(this.rules.entrySet().stream().collect(ImmutableMap.toImmutableMap(Entry::getKey, (entry) -> {
+            return ((Value) entry.getValue()).copy();
         })));
     }
 
@@ -176,11 +176,11 @@ public class GameRules {
     }
 
     public boolean getBoolean(GameRules.Key<GameRules.BooleanValue> rule) {
-        return ((GameRules.BooleanValue) this.getRule(rule)).get();
+        return this.getRule(rule).get();
     }
 
     public int getInt(GameRules.Key<GameRules.IntegerValue> rule) {
-        return ((GameRules.IntegerValue) this.getRule(rule)).get();
+        return this.getRule(rule).get();
     }
 
     public static final class Key<T extends GameRules.Value<T>> {
@@ -272,7 +272,7 @@ public class GameRules {
 
         public void setFromArgument(CommandContext<CommandSourceStack> context, String name, GameRules.Key<T> gameRuleKey) { // Paper
             this.updateFromArgument(context, name, gameRuleKey); // Paper
-            this.onChanged(((CommandSourceStack) context.getSource()).getLevel()); // Paper
+            this.onChanged(context.getSource().getLevel()); // Paper
         }
 
         public void onChanged(@Nullable net.minecraft.server.level.ServerLevel server) { // Paper
@@ -330,7 +330,7 @@ public class GameRules {
 
         @Override
         protected void updateFromArgument(CommandContext<CommandSourceStack> context, String name, GameRules.Key<BooleanValue> gameRuleKey) { // Paper start
-            io.papermc.paper.event.world.WorldGameRuleChangeEvent event = new io.papermc.paper.event.world.WorldGameRuleChangeEvent(context.getSource().getBukkitWorld(), context.getSource().getBukkitSender(), (org.bukkit.GameRule<Boolean>) org.bukkit.GameRule.getByName(gameRuleKey.toString()), String.valueOf(BoolArgumentType.getBool(context, name)));
+            io.papermc.paper.event.world.WorldGameRuleChangeEvent event = new io.papermc.paper.event.world.WorldGameRuleChangeEvent(context.getSource().getBukkitWorld(), context.getSource().getBukkitSender(), org.bukkit.GameRule.getByName(gameRuleKey.toString()), String.valueOf(BoolArgumentType.getBool(context, name)));
             if (!event.callEvent()) return;
             this.value = Boolean.parseBoolean(event.getValue());
             // Paper end
@@ -398,7 +398,7 @@ public class GameRules {
 
         @Override
         protected void updateFromArgument(CommandContext<CommandSourceStack> context, String name, GameRules.Key<IntegerValue> gameRuleKey) { // Paper start
-            io.papermc.paper.event.world.WorldGameRuleChangeEvent event = new io.papermc.paper.event.world.WorldGameRuleChangeEvent(context.getSource().getBukkitWorld(), context.getSource().getBukkitSender(), (org.bukkit.GameRule<Integer>) org.bukkit.GameRule.getByName(gameRuleKey.toString()), String.valueOf(IntegerArgumentType.getInteger(context, name)));
+            io.papermc.paper.event.world.WorldGameRuleChangeEvent event = new io.papermc.paper.event.world.WorldGameRuleChangeEvent(context.getSource().getBukkitWorld(), context.getSource().getBukkitSender(), org.bukkit.GameRule.getByName(gameRuleKey.toString()), String.valueOf(IntegerArgumentType.getInteger(context, name)));
             if (!event.callEvent()) return;
             this.value = Integer.parseInt(event.getValue());
             // Paper end
diff --git a/src/main/java/net/minecraft/world/level/Level.java b/src/main/java/net/minecraft/world/level/Level.java
index 6c35427fce97624bd86a8a2ed2166bea3dbae3ef..1ddd9cd1e00eb9641b5d1d7d65a107402e33a7f7 100644
--- a/src/main/java/net/minecraft/world/level/Level.java
+++ b/src/main/java/net/minecraft/world/level/Level.java
@@ -279,7 +279,7 @@ public abstract class Level implements LevelAccessor, AutoCloseable {
         // CraftBukkit Ticks things
         for (SpawnCategory spawnCategory : SpawnCategory.values()) {
             if (CraftSpawnCategory.isValidForLimits(spawnCategory)) {
-                this.ticksPerSpawnCategory.put(spawnCategory, (long) this.getCraftServer().getTicksPerSpawns(spawnCategory));
+                this.ticksPerSpawnCategory.put(spawnCategory, this.getCraftServer().getTicksPerSpawns(spawnCategory));
             }
         }
 
@@ -287,10 +287,10 @@ public abstract class Level implements LevelAccessor, AutoCloseable {
         this.profiler = supplier;
         this.levelData = worlddatamutable;
         this.dimensionTypeRegistration = holder;
-        this.dimensionTypeId = (ResourceKey) holder.unwrapKey().orElseThrow(() -> {
+        this.dimensionTypeId = holder.unwrapKey().orElseThrow(() -> {
             return new IllegalArgumentException("Dimension must be registered, got " + holder);
         });
-        final DimensionType dimensionmanager = (DimensionType) holder.value();
+        final DimensionType dimensionmanager = holder.value();
 
         this.dimension = resourcekey;
         this.isClientSide = flag;
@@ -367,7 +367,7 @@ public abstract class Level implements LevelAccessor, AutoCloseable {
             return true;
         }
 
-        voxelshape = voxelshape.move((double) position.getX(), (double) position.getY(), (double) position.getZ());
+        voxelshape = voxelshape.move(position.getX(), position.getY(), position.getZ());
         if (voxelshape.isEmpty()) {
             return true;
         }
@@ -645,7 +645,7 @@ public abstract class Level implements LevelAccessor, AutoCloseable {
 
                 // CraftBukkit start
                 iblockdata1.updateIndirectNeighbourShapes(this, blockposition, k, j - 1); // Don't call an event for the old block to limit event spam
-                CraftWorld world = ((ServerLevel) this).getWorld();
+                CraftWorld world = this.getWorld();
                 if (world != null && ((ServerLevel)this).hasPhysicsEvent) { // Paper
                     BlockPhysicsEvent event = new BlockPhysicsEvent(world.getBlockAt(blockposition.getX(), blockposition.getY(), blockposition.getZ()), CraftBlockData.fromData(iblockdata));
                     this.getCraftServer().getPluginManager().callEvent(event);
@@ -882,7 +882,7 @@ public abstract class Level implements LevelAccessor, AutoCloseable {
         toRemove.add(null);
         for (tileTickPosition = 0; tileTickPosition < this.blockEntityTickers.size(); tileTickPosition++) { // Paper - Disable tick limiters
             this.tileTickPosition = (this.tileTickPosition < this.blockEntityTickers.size()) ? this.tileTickPosition : 0;
-            TickingBlockEntity tickingblockentity = (TickingBlockEntity) this.blockEntityTickers.get(tileTickPosition);
+            TickingBlockEntity tickingblockentity = this.blockEntityTickers.get(tileTickPosition);
             // Spigot start
             if (tickingblockentity == null) {
                 this.getCraftServer().getLogger().severe("Spigot has detected a null entity and has removed it, preventing a crash");
@@ -949,7 +949,7 @@ public abstract class Level implements LevelAccessor, AutoCloseable {
     }
 
     public Explosion explode(@Nullable Entity entity, double x, double y, double z, float power, Level.ExplosionInteraction explosionSourceType) {
-        return this.explode(entity, (DamageSource) null, (ExplosionDamageCalculator) null, x, y, z, power, false, explosionSourceType);
+        return this.explode(entity, null, null, x, y, z, power, false, explosionSourceType);
     }
 
     public Explosion explode(@Nullable Entity entity, double x, double y, double z, float power, boolean createFire, Level.ExplosionInteraction explosionSourceType) {
@@ -1058,7 +1058,7 @@ public abstract class Level implements LevelAccessor, AutoCloseable {
     public void updateSkyBrightness() {
         double d0 = 1.0D - (double) (this.getRainLevel(1.0F) * 5.0F) / 16.0D;
         double d1 = 1.0D - (double) (this.getThunderLevel(1.0F) * 5.0F) / 16.0D;
-        double d2 = 0.5D + 2.0D * Mth.clamp((double) Mth.cos(this.getTimeOfDay(1.0F) * 6.2831855F), -0.25D, 0.25D);
+        double d2 = 0.5D + 2.0D * Mth.clamp(Mth.cos(this.getTimeOfDay(1.0F) * 6.2831855F), -0.25D, 0.25D);
 
         this.skyDarken = (int) ((1.0D - d2 * d0 * d1) * 11.0D);
     }
@@ -1292,14 +1292,14 @@ public abstract class Level implements LevelAccessor, AutoCloseable {
         } else if (this.getHeightmapPos(Heightmap.Types.MOTION_BLOCKING, pos).getY() > pos.getY()) {
             return false;
         } else {
-            Biome biomebase = (Biome) this.getBiome(pos).value();
+            Biome biomebase = this.getBiome(pos).value();
 
             return biomebase.getPrecipitation() == Biome.Precipitation.RAIN && biomebase.warmEnoughToRain(pos);
         }
     }
 
     public boolean isHumidAt(BlockPos pos) {
-        Biome biomebase = (Biome) this.getBiome(pos).value();
+        Biome biomebase = this.getBiome(pos).value();
 
         return biomebase.isHumid();
     }
@@ -1399,7 +1399,7 @@ public abstract class Level implements LevelAccessor, AutoCloseable {
 
     @Override
     public DimensionType dimensionType() {
-        return (DimensionType) this.dimensionTypeRegistration.value();
+        return this.dimensionTypeRegistration.value();
     }
 
     public ResourceKey<DimensionType> dimensionTypeId() {
@@ -1451,7 +1451,7 @@ public abstract class Level implements LevelAccessor, AutoCloseable {
     }
 
     public ProfilerFiller getProfiler() {
-        return (ProfilerFiller) this.profiler.get();
+        return this.profiler.get();
     }
 
     public Supplier<ProfilerFiller> getProfilerSupplier() {
@@ -1471,7 +1471,7 @@ public abstract class Level implements LevelAccessor, AutoCloseable {
 
     @Override
     public long nextSubTickCount() {
-        return (long) (this.subTickCount++);
+        return this.subTickCount++;
     }
 
     public static enum ExplosionInteraction {
diff --git a/src/main/java/net/minecraft/world/level/LevelAccessor.java b/src/main/java/net/minecraft/world/level/LevelAccessor.java
index 4f1835494b300ef67b0290030b420210c3779298..9b4331bbef48dcd79132437514d5f65fbcdacea5 100644
--- a/src/main/java/net/minecraft/world/level/LevelAccessor.java
+++ b/src/main/java/net/minecraft/world/level/LevelAccessor.java
@@ -99,17 +99,17 @@ public interface LevelAccessor extends CommonLevelAccessor, LevelTimeAccess {
     void levelEvent(@Nullable Player player, int eventId, BlockPos pos, int data);
 
     default void levelEvent(int eventId, BlockPos pos, int data) {
-        this.levelEvent((Player) null, eventId, pos, data);
+        this.levelEvent(null, eventId, pos, data);
     }
 
     void gameEvent(GameEvent event, Vec3 emitterPos, GameEvent.Context emitter);
 
     default void gameEvent(@Nullable Entity entity, GameEvent event, Vec3 pos) {
-        this.gameEvent(event, pos, new GameEvent.Context(entity, (BlockState) null));
+        this.gameEvent(event, pos, new GameEvent.Context(entity, null));
     }
 
     default void gameEvent(@Nullable Entity entity, GameEvent event, BlockPos pos) {
-        this.gameEvent(event, pos, new GameEvent.Context(entity, (BlockState) null));
+        this.gameEvent(event, pos, new GameEvent.Context(entity, null));
     }
 
     default void gameEvent(GameEvent event, BlockPos pos, GameEvent.Context emitter) {
diff --git a/src/main/java/net/minecraft/world/level/LevelReader.java b/src/main/java/net/minecraft/world/level/LevelReader.java
index b61229e98699afe101846321bd387414df2f91fb..68ab068b2fb08fc604dcee21553538ca083c7afd 100644
--- a/src/main/java/net/minecraft/world/level/LevelReader.java
+++ b/src/main/java/net/minecraft/world/level/LevelReader.java
@@ -56,7 +56,7 @@ public interface LevelReader extends BlockAndTintGetter, CollisionGetter, BiomeM
 
     @Override
     default int getBlockTint(BlockPos pos, ColorResolver colorResolver) {
-        return colorResolver.getColor(this.getBiome(pos).value(), (double)pos.getX(), (double)pos.getZ());
+        return colorResolver.getColor(this.getBiome(pos).value(), pos.getX(), pos.getZ());
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/level/LevelWriter.java b/src/main/java/net/minecraft/world/level/LevelWriter.java
index 134e5ec79bf2dddd4e31930f8a7cb2c02fa29518..d4adf266b19b7b80142fde047228f407790563e8 100644
--- a/src/main/java/net/minecraft/world/level/LevelWriter.java
+++ b/src/main/java/net/minecraft/world/level/LevelWriter.java
@@ -16,7 +16,7 @@ public interface LevelWriter {
     boolean removeBlock(BlockPos pos, boolean move);
 
     default boolean destroyBlock(BlockPos pos, boolean drop) {
-        return this.destroyBlock(pos, drop, (Entity) null);
+        return this.destroyBlock(pos, drop, null);
     }
 
     default boolean destroyBlock(BlockPos pos, boolean drop, @Nullable Entity breakingEntity) {
diff --git a/src/main/java/net/minecraft/world/level/NaturalSpawner.java b/src/main/java/net/minecraft/world/level/NaturalSpawner.java
index ff7e2bccc901641e891249219074a9d9fb81a205..7d2fe076cde7dd9cbce478b1219a06d7fcd0e35b 100644
--- a/src/main/java/net/minecraft/world/level/NaturalSpawner.java
+++ b/src/main/java/net/minecraft/world/level/NaturalSpawner.java
@@ -62,7 +62,7 @@ public final class NaturalSpawner {
     public static final int SPAWN_DISTANCE_CHUNK = 8;
     public static final int SPAWN_DISTANCE_BLOCK = 128;
     static final int MAGIC_NUMBER = (int) Math.pow(17.0D, 2.0D);
-    public static final MobCategory[] SPAWNING_CATEGORIES = (MobCategory[]) Stream.of(MobCategory.values()).filter((enumcreaturetype) -> {
+    public static final MobCategory[] SPAWNING_CATEGORIES = Stream.of(MobCategory.values()).filter((enumcreaturetype) -> {
         return enumcreaturetype != MobCategory.MISC;
     }).toArray((i) -> {
         return new MobCategory[i];
@@ -129,7 +129,7 @@ public final class NaturalSpawner {
     }
 
     static Biome getRoughBiome(BlockPos pos, ChunkAccess chunk) {
-        return (Biome) chunk.getNoiseBiome(QuartPos.fromBlock(pos.getX()), QuartPos.fromBlock(pos.getY()), QuartPos.fromBlock(pos.getZ())).value();
+        return chunk.getNoiseBiome(QuartPos.fromBlock(pos.getX()), QuartPos.fromBlock(pos.getY()), QuartPos.fromBlock(pos.getZ())).value();
     }
 
     public static void spawnForChunk(ServerLevel world, LevelChunk chunk, NaturalSpawner.SpawnState info, boolean spawnAnimals, boolean spawnMonsters, boolean rareSpawn) {
@@ -261,10 +261,10 @@ public final class NaturalSpawner {
                             blockposition_mutableblockposition.set(l, i, i1);
                             double d0 = (double) l + 0.5D;
                             double d1 = (double) i1 + 0.5D;
-                            Player entityhuman = (chunk instanceof LevelChunk) ? ((LevelChunk)chunk).findNearestPlayer(d0, i, d1, 576.0D, net.minecraft.world.entity.EntitySelector.NO_SPECTATORS) : world.getNearestPlayer(d0, (double) i, d1, -1.0D, false); // Paper - use chunk's player cache to optimize search in range
+                            Player entityhuman = (chunk instanceof LevelChunk) ? ((LevelChunk)chunk).findNearestPlayer(d0, i, d1, 576.0D, net.minecraft.world.entity.EntitySelector.NO_SPECTATORS) : world.getNearestPlayer(d0, i, d1, -1.0D, false); // Paper - use chunk's player cache to optimize search in range
 
                             if (entityhuman != null) {
-                                double d2 = entityhuman.distanceToSqr(d0, (double) i, d1);
+                                double d2 = entityhuman.distanceToSqr(d0, i, d1);
 
                                 if (world.isLoadedAndInBounds(blockposition_mutableblockposition) && NaturalSpawner.isRightDistanceToPlayerAndSpawnPoint(world, chunk, blockposition_mutableblockposition, d2)) { // Paper - don't load chunks for mob spawn
                                     if (biomesettingsmobs_c == null) {
@@ -274,7 +274,7 @@ public final class NaturalSpawner {
                                             break label53;
                                         }
 
-                                        biomesettingsmobs_c = (MobSpawnSettings.SpawnerData) optional.get();
+                                        biomesettingsmobs_c = optional.get();
                                         j1 = biomesettingsmobs_c.minCount + world.random.nextInt(1 + biomesettingsmobs_c.maxCount - biomesettingsmobs_c.minCount);
                                     }
 
@@ -291,9 +291,9 @@ public final class NaturalSpawner {
                                             return j; // Paper
                                         }
 
-                                        entityinsentient.moveTo(d0, (double) i, d1, world.random.nextFloat() * 360.0F, 0.0F);
+                                        entityinsentient.moveTo(d0, i, d1, world.random.nextFloat() * 360.0F, 0.0F);
                                         if (NaturalSpawner.isValidPositionForMob(world, entityinsentient, d2)) {
-                                            groupdataentity = entityinsentient.finalizeSpawn(world, world.getCurrentDifficultyAt(entityinsentient.blockPosition()), MobSpawnType.NATURAL, groupdataentity, (CompoundTag) null);
+                                            groupdataentity = entityinsentient.finalizeSpawn(world, world.getCurrentDifficultyAt(entityinsentient.blockPosition()), MobSpawnType.NATURAL, groupdataentity, null);
                                             // CraftBukkit start
                                             // SPIGOT-7045: Give ocelot babies back their special spawn reason. Note: This is the only modification required as ocelots count as monsters which means they only spawn during normal chunk ticking and do not spawn during chunk generation as starter mobs.
                                             world.addFreshEntityWithPassengers(entityinsentient, (entityinsentient instanceof net.minecraft.world.entity.animal.Ocelot && !((org.bukkit.entity.Ageable) entityinsentient.getBukkitEntity()).isAdult()) ? SpawnReason.OCELOT_BABY : SpawnReason.NATURAL);
@@ -335,7 +335,7 @@ public final class NaturalSpawner {
     }
 
     private static boolean isRightDistanceToPlayerAndSpawnPoint(ServerLevel world, ChunkAccess chunk, BlockPos.MutableBlockPos pos, double squaredDistance) {
-        return squaredDistance <= 576.0D ? false : (world.getSharedSpawnPos().closerToCenterThan(new Vec3((double) pos.getX() + 0.5D, (double) pos.getY(), (double) pos.getZ() + 0.5D), 24.0D) ? false : Objects.equals(new ChunkPos(pos), chunk.getPos()) || world.isNaturalSpawningAllowed((BlockPos) pos)); // Paper - diff on change, copy into caller
+        return squaredDistance <= 576.0D ? false : (world.getSharedSpawnPos().closerToCenterThan(new Vec3((double) pos.getX() + 0.5D, pos.getY(), (double) pos.getZ() + 0.5D), 24.0D) ? false : Objects.equals(new ChunkPos(pos), chunk.getPos()) || world.isNaturalSpawningAllowed(pos)); // Paper - diff on change, copy into caller
     }
 
     private static Boolean isValidSpawnPostitionForType(ServerLevel world, MobCategory group, StructureManager structureAccessor, ChunkGenerator chunkGenerator, MobSpawnSettings.SpawnerData spawnEntry, BlockPos.MutableBlockPos pos, double squaredDistance) { // Paper
@@ -364,7 +364,7 @@ public final class NaturalSpawner {
         } else if (entitytypes.canSummon() && NaturalSpawner.canSpawnMobAt(world, structureAccessor, chunkGenerator, group, spawnEntry, pos)) {
             SpawnPlacements.Type entitypositiontypes_surface = SpawnPlacements.getPlacementType(entitytypes);
 
-            return Boolean.valueOf(!NaturalSpawner.isSpawnPositionOk(entitypositiontypes_surface, world, pos, entitytypes) ? false : (!SpawnPlacements.checkSpawnRules(entitytypes, world, MobSpawnType.NATURAL, pos, world.random) ? false : world.noCollision(entitytypes.getAABB((double) pos.getX() + 0.5D, (double) pos.getY(), (double) pos.getZ() + 0.5D))));
+            return Boolean.valueOf(!NaturalSpawner.isSpawnPositionOk(entitypositiontypes_surface, world, pos, entitytypes) ? false : (!SpawnPlacements.checkSpawnRules(entitytypes, world, MobSpawnType.NATURAL, pos, world.random) ? false : world.noCollision(entitytypes.getAABB((double) pos.getX() + 0.5D, pos.getY(), (double) pos.getZ() + 0.5D))));
         } else {
             return Boolean.FALSE;
         }
@@ -401,7 +401,7 @@ public final class NaturalSpawner {
     }
 
     private static boolean canSpawnMobAt(ServerLevel world, StructureManager structureAccessor, ChunkGenerator chunkGenerator, MobCategory spawnGroup, MobSpawnSettings.SpawnerData spawnEntry, BlockPos pos) {
-        return NaturalSpawner.mobsAt(world, structureAccessor, chunkGenerator, spawnGroup, pos, (Holder) null).unwrap().contains(spawnEntry);
+        return NaturalSpawner.mobsAt(world, structureAccessor, chunkGenerator, spawnGroup, pos, null).unwrap().contains(spawnEntry);
     }
 
     private static WeightedRandomList<MobSpawnSettings.SpawnerData> mobsAt(ServerLevel world, StructureManager structureAccessor, ChunkGenerator chunkGenerator, MobCategory spawnGroup, BlockPos pos, @Nullable Holder<Biome> biomeEntry) {
@@ -410,7 +410,7 @@ public final class NaturalSpawner {
 
     public static boolean isInNetherFortressBounds(BlockPos pos, ServerLevel world, MobCategory spawnGroup, StructureManager structureAccessor) {
         if (spawnGroup == MobCategory.MONSTER && world.getBlockState(pos.below()).is(Blocks.NETHER_BRICKS)) {
-            Structure structure = (Structure) structureAccessor.registryAccess().registryOrThrow(Registries.STRUCTURE).get(BuiltinStructures.FORTRESS);
+            Structure structure = structureAccessor.registryAccess().registryOrThrow(Registries.STRUCTURE).get(BuiltinStructures.FORTRESS);
 
             return structure == null ? false : structureAccessor.getStructureAt(pos, structure).isValid();
         } else {
@@ -458,7 +458,7 @@ public final class NaturalSpawner {
     }
 
     public static void spawnMobsForChunkGeneration(ServerLevelAccessor world, Holder<Biome> biomeEntry, ChunkPos chunkPos, RandomSource random) {
-        MobSpawnSettings biomesettingsmobs = ((Biome) biomeEntry.value()).getMobSettings();
+        MobSpawnSettings biomesettingsmobs = biomeEntry.value().getMobSettings();
         WeightedRandomList<MobSpawnSettings.SpawnerData> weightedrandomlist = biomesettingsmobs.getMobs(MobCategory.CREATURE);
 
         if (!weightedrandomlist.isEmpty()) {
@@ -469,7 +469,7 @@ public final class NaturalSpawner {
                 Optional<MobSpawnSettings.SpawnerData> optional = weightedrandomlist.getRandom(random);
 
                 if (optional.isPresent()) {
-                    MobSpawnSettings.SpawnerData biomesettingsmobs_c = (MobSpawnSettings.SpawnerData) optional.get();
+                    MobSpawnSettings.SpawnerData biomesettingsmobs_c = optional.get();
                     int k = biomesettingsmobs_c.minCount + random.nextInt(1 + biomesettingsmobs_c.maxCount - biomesettingsmobs_c.minCount);
                     SpawnGroupData groupdataentity = null;
                     int l = i + random.nextInt(16);
@@ -485,10 +485,10 @@ public final class NaturalSpawner {
 
                             if (biomesettingsmobs_c.type.canSummon() && NaturalSpawner.isSpawnPositionOk(SpawnPlacements.getPlacementType(biomesettingsmobs_c.type), world, blockposition, biomesettingsmobs_c.type)) {
                                 float f = biomesettingsmobs_c.type.getWidth();
-                                double d0 = Mth.clamp((double) l, (double) i + (double) f, (double) i + 16.0D - (double) f);
-                                double d1 = Mth.clamp((double) i1, (double) j + (double) f, (double) j + 16.0D - (double) f);
+                                double d0 = Mth.clamp(l, (double) i + (double) f, (double) i + 16.0D - (double) f);
+                                double d1 = Mth.clamp(i1, (double) j + (double) f, (double) j + 16.0D - (double) f);
 
-                                if (!world.noCollision(biomesettingsmobs_c.type.getAABB(d0, (double) blockposition.getY(), d1)) || !SpawnPlacements.checkSpawnRules(biomesettingsmobs_c.type, world, MobSpawnType.CHUNK_GENERATION, new BlockPos(d0, (double) blockposition.getY(), d1), world.getRandom())) {
+                                if (!world.noCollision(biomesettingsmobs_c.type.getAABB(d0, blockposition.getY(), d1)) || !SpawnPlacements.checkSpawnRules(biomesettingsmobs_c.type, world, MobSpawnType.CHUNK_GENERATION, new BlockPos(d0, blockposition.getY(), d1), world.getRandom())) {
                                     continue;
                                 }
 
@@ -506,12 +506,12 @@ public final class NaturalSpawner {
                                     continue;
                                 }
 
-                                entity.moveTo(d0, (double) blockposition.getY(), d1, random.nextFloat() * 360.0F, 0.0F);
+                                entity.moveTo(d0, blockposition.getY(), d1, random.nextFloat() * 360.0F, 0.0F);
                                 if (entity instanceof Mob) {
                                     Mob entityinsentient = (Mob) entity;
 
                                     if (entityinsentient.checkSpawnRules(world, MobSpawnType.CHUNK_GENERATION) && entityinsentient.checkSpawnObstruction(world)) {
-                                        groupdataentity = entityinsentient.finalizeSpawn(world, world.getCurrentDifficultyAt(entityinsentient.blockPosition()), MobSpawnType.CHUNK_GENERATION, groupdataentity, (CompoundTag) null);
+                                        groupdataentity = entityinsentient.finalizeSpawn(world, world.getCurrentDifficultyAt(entityinsentient.blockPosition()), MobSpawnType.CHUNK_GENERATION, groupdataentity, null);
                                         world.addFreshEntityWithPassengers(entityinsentient, SpawnReason.CHUNK_GEN); // CraftBukkit
                                         flag = true;
                                     }
diff --git a/src/main/java/net/minecraft/world/level/PathNavigationRegion.java b/src/main/java/net/minecraft/world/level/PathNavigationRegion.java
index ee85e3f898c1505dd0af2ad577b936b1f58bbc93..50739d76b43606e58dc4fe7721dd2d996aa27d24 100644
--- a/src/main/java/net/minecraft/world/level/PathNavigationRegion.java
+++ b/src/main/java/net/minecraft/world/level/PathNavigationRegion.java
@@ -72,7 +72,7 @@ public class PathNavigationRegion implements BlockGetter, CollisionGetter {
         int j = chunkZ - this.centerZ;
         if (i >= 0 && i < this.chunks.length && j >= 0 && j < this.chunks[i].length) { // Paper - if this changes, update getChunkIfLoaded below
             ChunkAccess chunkAccess = this.chunks[i][j];
-            return (ChunkAccess)(chunkAccess != null ? chunkAccess : new EmptyLevelChunk(this.level, new ChunkPos(chunkX, chunkZ), this.plains.get()));
+            return chunkAccess != null ? chunkAccess : new EmptyLevelChunk(this.level, new ChunkPos(chunkX, chunkZ), this.plains.get());
         } else {
             return new EmptyLevelChunk(this.level, new ChunkPos(chunkX, chunkZ), this.plains.get());
         }
diff --git a/src/main/java/net/minecraft/world/level/biome/MobSpawnSettings.java b/src/main/java/net/minecraft/world/level/biome/MobSpawnSettings.java
index 7d47cd0f210021404f1c9cc204d26434dbb3c07d..2aec5921d57283ad3adfbe9fc134a4ddcc90a6bf 100644
--- a/src/main/java/net/minecraft/world/level/biome/MobSpawnSettings.java
+++ b/src/main/java/net/minecraft/world/level/biome/MobSpawnSettings.java
@@ -89,7 +89,7 @@ public class MobSpawnSettings {
             }
         }
         // use toImmutableEnumMap collector
-        private final Map<MobCategory, List<MobSpawnSettings.SpawnerData>> spawners = (Map) Stream.of(MobCategory.values()).collect(Maps.toImmutableEnumMap((mobCategory) -> {
+        private final Map<MobCategory, List<MobSpawnSettings.SpawnerData>> spawners = Stream.of(MobCategory.values()).collect(Maps.toImmutableEnumMap((mobCategory) -> {
             return mobCategory;
         }, (mobCategory) -> {
             return new MobList(); // Use MobList instead of ArrayList
diff --git a/src/main/java/net/minecraft/world/level/block/AbstractCandleBlock.java b/src/main/java/net/minecraft/world/level/block/AbstractCandleBlock.java
index f93ae6c0224b75bdd34d028d874dd178683df6cf..41fabc88258a4b5823bd416c064e4866ad2b0ce7 100644
--- a/src/main/java/net/minecraft/world/level/block/AbstractCandleBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/AbstractCandleBlock.java
@@ -32,7 +32,7 @@ public abstract class AbstractCandleBlock extends Block {
     protected abstract Iterable<Vec3> getParticleOffsets(BlockState state);
 
     public static boolean isLit(BlockState state) {
-        return state.hasProperty(AbstractCandleBlock.LIT) && (state.is(BlockTags.CANDLES) || state.is(BlockTags.CANDLE_CAKES)) && ((Boolean) state.getValue(AbstractCandleBlock.LIT)).booleanValue();
+        return state.hasProperty(AbstractCandleBlock.LIT) && (state.is(BlockTags.CANDLES) || state.is(BlockTags.CANDLE_CAKES)) && state.getValue(AbstractCandleBlock.LIT).booleanValue();
     }
 
     @Override
@@ -49,14 +49,14 @@ public abstract class AbstractCandleBlock extends Block {
     }
 
     protected boolean canBeLit(BlockState state) {
-        return !((Boolean) state.getValue(AbstractCandleBlock.LIT)).booleanValue();
+        return !state.getValue(AbstractCandleBlock.LIT).booleanValue();
     }
 
     @Override
     public void animateTick(BlockState state, Level world, BlockPos pos, RandomSource random) {
-        if (((Boolean) state.getValue(AbstractCandleBlock.LIT)).booleanValue()) {
+        if (state.getValue(AbstractCandleBlock.LIT).booleanValue()) {
             this.getParticleOffsets(state).forEach((vec3d) -> {
-                AbstractCandleBlock.addParticlesAndSound(world, vec3d.add((double) pos.getX(), (double) pos.getY(), (double) pos.getZ()), random);
+                AbstractCandleBlock.addParticlesAndSound(world, vec3d.add(pos.getX(), pos.getY(), pos.getZ()), random);
             });
         }
     }
@@ -82,11 +82,11 @@ public abstract class AbstractCandleBlock extends Block {
             });
         }
 
-        world.playSound((Player) null, pos, SoundEvents.CANDLE_EXTINGUISH, SoundSource.BLOCKS, 1.0F, 1.0F);
-        world.gameEvent((Entity) player, GameEvent.BLOCK_CHANGE, pos);
+        world.playSound(null, pos, SoundEvents.CANDLE_EXTINGUISH, SoundSource.BLOCKS, 1.0F, 1.0F);
+        world.gameEvent(player, GameEvent.BLOCK_CHANGE, pos);
     }
 
     private static void setLit(LevelAccessor world, BlockState state, BlockPos pos, boolean lit) {
-        world.setBlock(pos, (BlockState) state.setValue(AbstractCandleBlock.LIT, Boolean.valueOf(lit)), 11);
+        world.setBlock(pos, state.setValue(AbstractCandleBlock.LIT, Boolean.valueOf(lit)), 11);
     }
 }
diff --git a/src/main/java/net/minecraft/world/level/block/BambooSaplingBlock.java b/src/main/java/net/minecraft/world/level/block/BambooSaplingBlock.java
index 1f0314672f4bc0d8f3cc75e491be16b4085868ea..39e2a7e21c27b94e343134cceec06625ee368f87 100644
--- a/src/main/java/net/minecraft/world/level/block/BambooSaplingBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/BambooSaplingBlock.java
@@ -88,6 +88,6 @@ public class BambooSaplingBlock extends Block implements BonemealableBlock {
     }
 
     protected void growBamboo(Level world, BlockPos pos) {
-        org.bukkit.craftbukkit.event.CraftEventFactory.handleBlockSpreadEvent(world, pos, pos.above(), (BlockState) Blocks.BAMBOO.defaultBlockState().setValue(BambooStalkBlock.LEAVES, BambooLeaves.SMALL), 3); // CraftBukkit - BlockSpreadEvent
+        org.bukkit.craftbukkit.event.CraftEventFactory.handleBlockSpreadEvent(world, pos, pos.above(), Blocks.BAMBOO.defaultBlockState().setValue(BambooStalkBlock.LEAVES, BambooLeaves.SMALL), 3); // CraftBukkit - BlockSpreadEvent
     }
 }
diff --git a/src/main/java/net/minecraft/world/level/block/BambooStalkBlock.java b/src/main/java/net/minecraft/world/level/block/BambooStalkBlock.java
index 10322ad3d7f603a7ab162c63dc4b2f749f73bdb1..c3832dddf86f29d8a4df2d227eafbc3ed0cd3119 100644
--- a/src/main/java/net/minecraft/world/level/block/BambooStalkBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/BambooStalkBlock.java
@@ -45,7 +45,7 @@ public class BambooStalkBlock extends Block implements BonemealableBlock {
 
     public BambooStalkBlock(BlockBehaviour.Properties settings) {
         super(settings);
-        this.registerDefaultState((BlockState) ((BlockState) ((BlockState) ((BlockState) this.stateDefinition.any()).setValue(BambooStalkBlock.AGE, Integer.valueOf(0))).setValue(BambooStalkBlock.LEAVES, BambooLeaves.NONE)).setValue(BambooStalkBlock.STAGE, Integer.valueOf(0)));
+        this.registerDefaultState(this.stateDefinition.any().setValue(BambooStalkBlock.AGE, Integer.valueOf(0)).setValue(BambooStalkBlock.LEAVES, BambooLeaves.NONE).setValue(BambooStalkBlock.STAGE, Integer.valueOf(0)));
     }
 
     @Override
@@ -95,15 +95,15 @@ public class BambooStalkBlock extends Block implements BonemealableBlock {
 
             if (iblockdata.is(BlockTags.BAMBOO_PLANTABLE_ON)) {
                 if (iblockdata.is(Blocks.BAMBOO_SAPLING)) {
-                    return (BlockState) this.defaultBlockState().setValue(BambooStalkBlock.AGE, Integer.valueOf(0));
+                    return this.defaultBlockState().setValue(BambooStalkBlock.AGE, Integer.valueOf(0));
                 } else if (iblockdata.is(Blocks.BAMBOO)) {
-                    int i = ((Integer) iblockdata.getValue(BambooStalkBlock.AGE)).intValue() > 0 ? 1 : 0;
+                    int i = iblockdata.getValue(BambooStalkBlock.AGE).intValue() > 0 ? 1 : 0;
 
-                    return (BlockState) this.defaultBlockState().setValue(BambooStalkBlock.AGE, Integer.valueOf(i));
+                    return this.defaultBlockState().setValue(BambooStalkBlock.AGE, Integer.valueOf(i));
                 } else {
                     BlockState iblockdata1 = ctx.getLevel().getBlockState(ctx.getClickedPos().above());
 
-                    return iblockdata1.is(Blocks.BAMBOO) ? (BlockState) this.defaultBlockState().setValue(BambooStalkBlock.AGE, (Integer) iblockdata1.getValue(BambooStalkBlock.AGE)) : Blocks.BAMBOO_SAPLING.defaultBlockState();
+                    return iblockdata1.is(Blocks.BAMBOO) ? this.defaultBlockState().setValue(BambooStalkBlock.AGE, iblockdata1.getValue(BambooStalkBlock.AGE)) : Blocks.BAMBOO_SAPLING.defaultBlockState();
                 }
             } else {
                 return null;
@@ -121,12 +121,12 @@ public class BambooStalkBlock extends Block implements BonemealableBlock {
 
     @Override
     public boolean isRandomlyTicking(BlockState state) {
-        return ((Integer) state.getValue(BambooStalkBlock.STAGE)).intValue() == 0;
+        return state.getValue(BambooStalkBlock.STAGE).intValue() == 0;
     }
 
     @Override
     public void randomTick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
-        if (((Integer) state.getValue(BambooStalkBlock.STAGE)).intValue() == 0) {
+        if (state.getValue(BambooStalkBlock.STAGE).intValue() == 0) {
             if (random.nextFloat() < (world.spigotConfig.bambooModifier / (100.0f * 3)) && world.isEmptyBlock(pos.above()) && world.getRawBrightness(pos.above(), 0) >= 9) { // Spigot - SPIGOT-7159: Better modifier resolution
                 int i = this.getHeightBelowUpToMax(world, pos) + 1;
 
@@ -146,11 +146,11 @@ public class BambooStalkBlock extends Block implements BonemealableBlock {
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
         if (!state.canSurvive(world, pos)) {
-            world.scheduleTick(pos, (Block) this, 1);
+            world.scheduleTick(pos, this, 1);
         }
 
-        if (direction == Direction.UP && neighborState.is(Blocks.BAMBOO) && ((Integer) neighborState.getValue(BambooStalkBlock.AGE)).intValue() > ((Integer) state.getValue(BambooStalkBlock.AGE)).intValue()) {
-            world.setBlock(pos, (BlockState) state.cycle(BambooStalkBlock.AGE), 2);
+        if (direction == Direction.UP && neighborState.is(Blocks.BAMBOO) && neighborState.getValue(BambooStalkBlock.AGE).intValue() > state.getValue(BambooStalkBlock.AGE).intValue()) {
+            world.setBlock(pos, state.cycle(BambooStalkBlock.AGE), 2);
         }
 
         return super.updateShape(state, direction, neighborState, world, pos, neighborPos);
@@ -161,7 +161,7 @@ public class BambooStalkBlock extends Block implements BonemealableBlock {
         int i = this.getHeightAboveUpToMax(world, pos);
         int j = this.getHeightBelowUpToMax(world, pos);
 
-        return i + j + 1 < ((Level) world).paperConfig().maxGrowthHeight.bamboo.max && ((Integer) world.getBlockState(pos.above(i)).getValue(BambooStalkBlock.STAGE)).intValue() != 1; // Paper
+        return i + j + 1 < ((Level) world).paperConfig().maxGrowthHeight.bamboo.max && world.getBlockState(pos.above(i)).getValue(BambooStalkBlock.STAGE).intValue() != 1; // Paper
     }
 
     @Override
@@ -180,7 +180,7 @@ public class BambooStalkBlock extends Block implements BonemealableBlock {
             BlockPos blockposition1 = pos.above(i);
             BlockState iblockdata1 = world.getBlockState(blockposition1);
 
-            if (k >= world.paperConfig().maxGrowthHeight.bamboo.max || !iblockdata1.is(Blocks.BAMBOO) || ((Integer) iblockdata1.getValue(BambooStalkBlock.STAGE)).intValue() == 1 || !world.isEmptyBlock(blockposition1.above())) { // CraftBukkit - If the BlockSpreadEvent was cancelled, we have no bamboo here // Paper - Configurable cactus bamboo and reed growth heights
+            if (k >= world.paperConfig().maxGrowthHeight.bamboo.max || !iblockdata1.is(Blocks.BAMBOO) || iblockdata1.getValue(BambooStalkBlock.STAGE).intValue() == 1 || !world.isEmptyBlock(blockposition1.above())) { // CraftBukkit - If the BlockSpreadEvent was cancelled, we have no bamboo here // Paper - Configurable cactus bamboo and reed growth heights
                 return;
             }
 
@@ -220,14 +220,14 @@ public class BambooStalkBlock extends Block implements BonemealableBlock {
             }
         }
 
-        int j = ((Integer) state.getValue(BambooStalkBlock.AGE)).intValue() != 1 && !iblockdata2.is(Blocks.BAMBOO) ? 0 : 1;
+        int j = state.getValue(BambooStalkBlock.AGE).intValue() != 1 && !iblockdata2.is(Blocks.BAMBOO) ? 0 : 1;
         int k = (height < world.paperConfig().maxGrowthHeight.bamboo.min || random.nextFloat() >= 0.25F) && height != (world.paperConfig().maxGrowthHeight.bamboo.max - 1) ? 0 : 1; // Paper
 
         // CraftBukkit start
-        if (org.bukkit.craftbukkit.event.CraftEventFactory.handleBlockSpreadEvent(world, pos, pos.above(), (BlockState) ((BlockState) ((BlockState) this.defaultBlockState().setValue(BambooStalkBlock.AGE, Integer.valueOf(j))).setValue(BambooStalkBlock.LEAVES, blockpropertybamboosize)).setValue(BambooStalkBlock.STAGE, Integer.valueOf(k)), 3)) {
+        if (org.bukkit.craftbukkit.event.CraftEventFactory.handleBlockSpreadEvent(world, pos, pos.above(), this.defaultBlockState().setValue(BambooStalkBlock.AGE, Integer.valueOf(j)).setValue(BambooStalkBlock.LEAVES, blockpropertybamboosize).setValue(BambooStalkBlock.STAGE, Integer.valueOf(k)), 3)) {
             if (shouldUpdateOthers) {
-                world.setBlock(pos.below(), (BlockState) iblockdata1.setValue(BambooStalkBlock.LEAVES, BambooLeaves.SMALL), 3);
-                world.setBlock(blockposition1, (BlockState) iblockdata2.setValue(BambooStalkBlock.LEAVES, BambooLeaves.NONE), 3);
+                world.setBlock(pos.below(), iblockdata1.setValue(BambooStalkBlock.LEAVES, BambooLeaves.SMALL), 3);
+                world.setBlock(blockposition1, iblockdata2.setValue(BambooStalkBlock.LEAVES, BambooLeaves.NONE), 3);
             }
         }
         // CraftBukkit end
diff --git a/src/main/java/net/minecraft/world/level/block/BaseFireBlock.java b/src/main/java/net/minecraft/world/level/block/BaseFireBlock.java
index 720bf115e84f3e5de861561359aff2b025cb98c1..c8ae9f1d59ff022abe1f3ce621ac97fa3d5f19ce 100644
--- a/src/main/java/net/minecraft/world/level/block/BaseFireBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/BaseFireBlock.java
@@ -156,7 +156,7 @@ public abstract class BaseFireBlock extends Block {
                 Optional<PortalShape> optional = PortalShape.findEmptyPortalShape(world, blockposition, Direction.Axis.X);
 
                 if (optional.isPresent()) {
-                    ((PortalShape) optional.get()).createPortalBlocks(itemActionContext); // Paper - pass ItemActionContext param
+                    optional.get().createPortalBlocks(itemActionContext); // Paper - pass ItemActionContext param
                     return;
                 }
             }
@@ -178,7 +178,7 @@ public abstract class BaseFireBlock extends Block {
     @Override
     public void playerWillDestroy(Level world, BlockPos pos, BlockState state, Player player) {
         if (!world.isClientSide()) {
-            world.levelEvent((Player) null, 1009, pos, 0);
+            world.levelEvent(null, 1009, pos, 0);
         }
 
         super.playerWillDestroy(world, pos, state, player);
diff --git a/src/main/java/net/minecraft/world/level/block/BasePressurePlateBlock.java b/src/main/java/net/minecraft/world/level/block/BasePressurePlateBlock.java
index caa0fbe5cad9cdc11d6e4af92bc627990cd8204c..542ce538abd79243afa34d1f153bf6662e7b1895 100644
--- a/src/main/java/net/minecraft/world/level/block/BasePressurePlateBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/BasePressurePlateBlock.java
@@ -60,7 +60,7 @@ public abstract class BasePressurePlateBlock extends Block {
         int i = this.getSignalForState(state);
 
         if (i > 0) {
-            this.checkPressed((Entity) null, world, pos, state, i);
+            this.checkPressed(null, world, pos, state, i);
         }
 
     }
@@ -113,7 +113,7 @@ public abstract class BasePressurePlateBlock extends Block {
         }
 
         if (flag1) {
-            world.scheduleTick(new BlockPos(pos), (Block) this, this.getPressedTime());
+            world.scheduleTick(new BlockPos(pos), this, this.getPressedTime());
         }
 
     }
diff --git a/src/main/java/net/minecraft/world/level/block/BedBlock.java b/src/main/java/net/minecraft/world/level/block/BedBlock.java
index 3560e9ced547ca02d6a61ae686131974b85d581c..f1fd5ed48cd56387720eca15226bbfea86cccbbb 100644
--- a/src/main/java/net/minecraft/world/level/block/BedBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/BedBlock.java
@@ -63,14 +63,14 @@ public class BedBlock extends HorizontalDirectionalBlock implements EntityBlock
     public BedBlock(DyeColor color, BlockBehaviour.Properties settings) {
         super(settings);
         this.color = color;
-        this.registerDefaultState((BlockState) ((BlockState) ((BlockState) this.stateDefinition.any()).setValue(BedBlock.PART, BedPart.FOOT)).setValue(BedBlock.OCCUPIED, Boolean.FALSE));
+        this.registerDefaultState(this.stateDefinition.any().setValue(BedBlock.PART, BedPart.FOOT).setValue(BedBlock.OCCUPIED, Boolean.FALSE));
     }
 
     @Nullable
     public static Direction getBedOrientation(BlockGetter world, BlockPos pos) {
         BlockState iblockdata = world.getBlockState(pos);
 
-        return iblockdata.getBlock() instanceof BedBlock ? (Direction) iblockdata.getValue(BedBlock.FACING) : null;
+        return iblockdata.getBlock() instanceof BedBlock ? iblockdata.getValue(BedBlock.FACING) : null;
     }
 
     @Override
@@ -79,9 +79,9 @@ public class BedBlock extends HorizontalDirectionalBlock implements EntityBlock
             return InteractionResult.CONSUME;
         } else {
             if (state.getValue(BedBlock.PART) != BedPart.HEAD) {
-                pos = pos.relative((Direction) state.getValue(BedBlock.FACING));
+                pos = pos.relative(state.getValue(BedBlock.FACING));
                 state = world.getBlockState(pos);
-                if (!state.is((Block) this)) {
+                if (!state.is(this)) {
                     return InteractionResult.CONSUME;
                 }
             }
@@ -90,17 +90,17 @@ public class BedBlock extends HorizontalDirectionalBlock implements EntityBlock
             if (false && !BedBlock.canSetSpawn(world)) {
                 final org.bukkit.block.BlockState explodedBlockState = org.bukkit.craftbukkit.block.CraftBlockStates.getUnplacedBlockState(world, pos, state); // Paper - exploded block state (this won't be called due to the false, but it's good for reference)
                 world.removeBlock(pos, false);
-                BlockPos blockposition1 = pos.relative(((Direction) state.getValue(BedBlock.FACING)).getOpposite());
+                BlockPos blockposition1 = pos.relative(state.getValue(BedBlock.FACING).getOpposite());
 
-                if (world.getBlockState(blockposition1).is((Block) this)) {
+                if (world.getBlockState(blockposition1).is(this)) {
                     world.removeBlock(blockposition1, false);
                 }
 
                 Vec3 vec3d = pos.getCenter();
 
-                world.explode((Entity) null, DamageSource.badRespawnPointExplosion(vec3d, explodedBlockState), (ExplosionDamageCalculator) null, vec3d, 5.0F, true, Level.ExplosionInteraction.BLOCK); // Paper - exploded block state
+                world.explode(null, DamageSource.badRespawnPointExplosion(vec3d, explodedBlockState), null, vec3d, 5.0F, true, Level.ExplosionInteraction.BLOCK); // Paper - exploded block state
                 return InteractionResult.SUCCESS;
-            } else if (((Boolean) state.getValue(BedBlock.OCCUPIED)).booleanValue()) {
+            } else if (state.getValue(BedBlock.OCCUPIED).booleanValue()) {
                 if (!this.kickVillagerOutOfBed(world, pos)) {
                     player.displayClientMessage(Component.translatable("block.minecraft.bed.occupied"), true);
                 }
@@ -142,7 +142,7 @@ public class BedBlock extends HorizontalDirectionalBlock implements EntityBlock
             {
                 final org.bukkit.block.BlockState explodedBlockState = org.bukkit.craftbukkit.block.CraftBlockStates.getUnplacedBlockState(world, blockposition, iblockdata); // Paper - exploded block state
                 world.removeBlock(blockposition, false);
-                BlockPos blockposition1 = blockposition.relative(((Direction) iblockdata.getValue(BedBlock.FACING)).getOpposite());
+                BlockPos blockposition1 = blockposition.relative(iblockdata.getValue(BedBlock.FACING).getOpposite());
 
                 if (world.getBlockState(blockposition1).getBlock() == this) {
                     world.removeBlock(blockposition1, false);
@@ -150,7 +150,7 @@ public class BedBlock extends HorizontalDirectionalBlock implements EntityBlock
 
                 Vec3 vec3d = blockposition.getCenter();
 
-                world.explode((Entity) null, DamageSource.badRespawnPointExplosion(vec3d, explodedBlockState), (ExplosionDamageCalculator) null, vec3d, 5.0F, true, Level.ExplosionInteraction.BLOCK); // Paper - exploded block state
+                world.explode(null, DamageSource.badRespawnPointExplosion(vec3d, explodedBlockState), null, vec3d, 5.0F, true, Level.ExplosionInteraction.BLOCK); // Paper - exploded block state
                 return InteractionResult.SUCCESS;
             }
         }
@@ -168,7 +168,7 @@ public class BedBlock extends HorizontalDirectionalBlock implements EntityBlock
         if (list.isEmpty()) {
             return false;
         } else {
-            ((Villager) list.get(0)).stopSleeping();
+            list.get(0).stopSleeping();
             return true;
         }
     }
@@ -201,7 +201,7 @@ public class BedBlock extends HorizontalDirectionalBlock implements EntityBlock
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
-        return direction == BedBlock.getNeighbourDirection((BedPart) state.getValue(BedBlock.PART), (Direction) state.getValue(BedBlock.FACING)) ? (neighborState.is((Block) this) && neighborState.getValue(BedBlock.PART) != state.getValue(BedBlock.PART) ? (BlockState) state.setValue(BedBlock.OCCUPIED, (Boolean) neighborState.getValue(BedBlock.OCCUPIED)) : Blocks.AIR.defaultBlockState()) : super.updateShape(state, direction, neighborState, world, pos, neighborPos);
+        return direction == BedBlock.getNeighbourDirection(state.getValue(BedBlock.PART), state.getValue(BedBlock.FACING)) ? (neighborState.is(this) && neighborState.getValue(BedBlock.PART) != state.getValue(BedBlock.PART) ? state.setValue(BedBlock.OCCUPIED, neighborState.getValue(BedBlock.OCCUPIED)) : Blocks.AIR.defaultBlockState()) : super.updateShape(state, direction, neighborState, world, pos, neighborPos);
     }
 
     private static Direction getNeighbourDirection(BedPart part, Direction direction) {
@@ -211,13 +211,13 @@ public class BedBlock extends HorizontalDirectionalBlock implements EntityBlock
     @Override
     public void playerWillDestroy(Level world, BlockPos pos, BlockState state, Player player) {
         if (!world.isClientSide && player.isCreative()) {
-            BedPart blockpropertybedpart = (BedPart) state.getValue(BedBlock.PART);
+            BedPart blockpropertybedpart = state.getValue(BedBlock.PART);
 
             if (blockpropertybedpart == BedPart.FOOT) {
-                BlockPos blockposition1 = pos.relative(BedBlock.getNeighbourDirection(blockpropertybedpart, (Direction) state.getValue(BedBlock.FACING)));
+                BlockPos blockposition1 = pos.relative(BedBlock.getNeighbourDirection(blockpropertybedpart, state.getValue(BedBlock.FACING)));
                 BlockState iblockdata1 = world.getBlockState(blockposition1);
 
-                if (iblockdata1.is((Block) this) && iblockdata1.getValue(BedBlock.PART) == BedPart.HEAD) {
+                if (iblockdata1.is(this) && iblockdata1.getValue(BedBlock.PART) == BedPart.HEAD) {
                     world.setBlock(blockposition1, Blocks.AIR.defaultBlockState(), 35);
                     world.levelEvent(player, 2001, blockposition1, Block.getId(iblockdata1));
                 }
@@ -235,7 +235,7 @@ public class BedBlock extends HorizontalDirectionalBlock implements EntityBlock
         BlockPos blockposition1 = blockposition.relative(enumdirection);
         Level world = ctx.getLevel();
 
-        return world.getBlockState(blockposition1).canBeReplaced(ctx) && world.getWorldBorder().isWithinBounds(blockposition1) ? (BlockState) this.defaultBlockState().setValue(BedBlock.FACING, enumdirection) : null;
+        return world.getBlockState(blockposition1).canBeReplaced(ctx) && world.getWorldBorder().isWithinBounds(blockposition1) ? this.defaultBlockState().setValue(BedBlock.FACING, enumdirection) : null;
     }
 
     @Override
@@ -255,13 +255,13 @@ public class BedBlock extends HorizontalDirectionalBlock implements EntityBlock
     }
 
     public static Direction getConnectedDirection(BlockState state) {
-        Direction enumdirection = (Direction) state.getValue(BedBlock.FACING);
+        Direction enumdirection = state.getValue(BedBlock.FACING);
 
         return state.getValue(BedBlock.PART) == BedPart.HEAD ? enumdirection.getOpposite() : enumdirection;
     }
 
     public static DoubleBlockCombiner.BlockType getBlockType(BlockState state) {
-        BedPart blockpropertybedpart = (BedPart) state.getValue(BedBlock.PART);
+        BedPart blockpropertybedpart = state.getValue(BedBlock.PART);
 
         return blockpropertybedpart == BedPart.HEAD ? DoubleBlockCombiner.BlockType.FIRST : DoubleBlockCombiner.BlockType.SECOND;
     }
@@ -360,9 +360,9 @@ public class BedBlock extends HorizontalDirectionalBlock implements EntityBlock
     public void setPlacedBy(Level world, BlockPos pos, BlockState state, @Nullable LivingEntity placer, ItemStack itemStack) {
         super.setPlacedBy(world, pos, state, placer, itemStack);
         if (!world.isClientSide) {
-            BlockPos blockposition1 = pos.relative((Direction) state.getValue(BedBlock.FACING));
+            BlockPos blockposition1 = pos.relative(state.getValue(BedBlock.FACING));
 
-            world.setBlock(blockposition1, (BlockState) state.setValue(BedBlock.PART, BedPart.HEAD), 3);
+            world.setBlock(blockposition1, state.setValue(BedBlock.PART, BedPart.HEAD), 3);
             world.blockUpdated(pos, Blocks.AIR);
             state.updateNeighbourShapes(world, pos, 3);
         }
@@ -375,7 +375,7 @@ public class BedBlock extends HorizontalDirectionalBlock implements EntityBlock
 
     @Override
     public long getSeed(BlockState state, BlockPos pos) {
-        BlockPos blockposition1 = pos.relative((Direction) state.getValue(BedBlock.FACING), state.getValue(BedBlock.PART) == BedPart.HEAD ? 0 : 1);
+        BlockPos blockposition1 = pos.relative(state.getValue(BedBlock.FACING), state.getValue(BedBlock.PART) == BedPart.HEAD ? 0 : 1);
 
         return Mth.getSeed(blockposition1.getX(), pos.getY(), blockposition1.getZ());
     }
@@ -386,7 +386,7 @@ public class BedBlock extends HorizontalDirectionalBlock implements EntityBlock
     }
 
     private static int[][] bedStandUpOffsets(Direction bedDirection, Direction respawnDirection) {
-        return (int[][]) ArrayUtils.addAll(BedBlock.bedSurroundStandUpOffsets(bedDirection, respawnDirection), BedBlock.bedAboveStandUpOffsets(bedDirection));
+        return ArrayUtils.addAll(BedBlock.bedSurroundStandUpOffsets(bedDirection, respawnDirection), BedBlock.bedAboveStandUpOffsets(bedDirection));
     }
 
     private static int[][] bedSurroundStandUpOffsets(Direction bedDirection, Direction respawnDirection) {
diff --git a/src/main/java/net/minecraft/world/level/block/BeehiveBlock.java b/src/main/java/net/minecraft/world/level/block/BeehiveBlock.java
index 1535796ebe5b40604ad122bc024b32676d5eec96..90910721e0b610a1a6ce014619ba720e4caef200 100644
--- a/src/main/java/net/minecraft/world/level/block/BeehiveBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/BeehiveBlock.java
@@ -63,7 +63,7 @@ public class BeehiveBlock extends BaseEntityBlock {
 
     public BeehiveBlock(BlockBehaviour.Properties settings) {
         super(settings);
-        this.registerDefaultState((BlockState) ((BlockState) ((BlockState) this.stateDefinition.any()).setValue(BeehiveBlock.HONEY_LEVEL, Integer.valueOf(0))).setValue(BeehiveBlock.FACING, Direction.NORTH));
+        this.registerDefaultState(this.stateDefinition.any().setValue(BeehiveBlock.HONEY_LEVEL, Integer.valueOf(0)).setValue(BeehiveBlock.FACING, Direction.NORTH));
     }
 
     @Override
@@ -73,7 +73,7 @@ public class BeehiveBlock extends BaseEntityBlock {
 
     @Override
     public int getAnalogOutputSignal(BlockState state, Level world, BlockPos pos) {
-        return ((Integer) state.getValue(BeehiveBlock.HONEY_LEVEL)).intValue();
+        return state.getValue(BeehiveBlock.HONEY_LEVEL).intValue();
     }
 
     @Override
@@ -105,7 +105,7 @@ public class BeehiveBlock extends BaseEntityBlock {
                 Bee entitybee = (Bee) iterator.next();
 
                 if (entitybee.getTarget() == null) {
-                    entitybee.setTarget((LivingEntity) list1.get(world.random.nextInt(i)), org.bukkit.event.entity.EntityTargetEvent.TargetReason.CLOSEST_PLAYER, true); // CraftBukkit
+                    entitybee.setTarget(list1.get(world.random.nextInt(i)), org.bukkit.event.entity.EntityTargetEvent.TargetReason.CLOSEST_PLAYER, true); // CraftBukkit
                 }
             }
         }
@@ -119,7 +119,7 @@ public class BeehiveBlock extends BaseEntityBlock {
     @Override
     public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
         ItemStack itemstack = player.getItemInHand(hand);
-        int i = ((Integer) state.getValue(BeehiveBlock.HONEY_LEVEL)).intValue();
+        int i = state.getValue(BeehiveBlock.HONEY_LEVEL).intValue();
         boolean flag = false;
 
         if (i >= 5) {
@@ -143,7 +143,7 @@ public class BeehiveBlock extends BaseEntityBlock {
                     entityhuman1.broadcastBreakEvent(hand);
                 });
                 flag = true;
-                world.gameEvent((Entity) player, GameEvent.SHEAR, pos);
+                world.gameEvent(player, GameEvent.SHEAR, pos);
             } else if (itemstack.is(Items.GLASS_BOTTLE)) {
                 itemstack.shrink(1);
                 world.playSound(player, player.getX(), player.getY(), player.getZ(), SoundEvents.BOTTLE_FILL, SoundSource.BLOCKS, 1.0F, 1.0F);
@@ -154,7 +154,7 @@ public class BeehiveBlock extends BaseEntityBlock {
                 }
 
                 flag = true;
-                world.gameEvent((Entity) player, GameEvent.FLUID_PICKUP, pos);
+                world.gameEvent(player, GameEvent.FLUID_PICKUP, pos);
             }
 
             if (!world.isClientSide() && flag) {
@@ -204,12 +204,12 @@ public class BeehiveBlock extends BaseEntityBlock {
     }
 
     public void resetHoneyLevel(Level world, BlockState state, BlockPos pos) {
-        world.setBlock(pos, (BlockState) state.setValue(BeehiveBlock.HONEY_LEVEL, Integer.valueOf(0)), 3);
+        world.setBlock(pos, state.setValue(BeehiveBlock.HONEY_LEVEL, Integer.valueOf(0)), 3);
     }
 
     @Override
     public void animateTick(BlockState state, Level world, BlockPos pos, RandomSource random) {
-        if (((Integer) state.getValue(BeehiveBlock.HONEY_LEVEL)).intValue() >= 5) {
+        if (state.getValue(BeehiveBlock.HONEY_LEVEL).intValue() >= 5) {
             for (int i = 0; i < random.nextInt(1) + 1; ++i) {
                 this.trySpawnDripParticles(world, pos, state);
             }
@@ -252,7 +252,7 @@ public class BeehiveBlock extends BaseEntityBlock {
 
     @Override
     public BlockState getStateForPlacement(BlockPlaceContext ctx) {
-        return (BlockState) this.defaultBlockState().setValue(BeehiveBlock.FACING, ctx.getHorizontalDirection().getOpposite());
+        return this.defaultBlockState().setValue(BeehiveBlock.FACING, ctx.getHorizontalDirection().getOpposite());
     }
 
     @Override
@@ -285,7 +285,7 @@ public class BeehiveBlock extends BaseEntityBlock {
             if (tileentity instanceof BeehiveBlockEntity) {
                 BeehiveBlockEntity tileentitybeehive = (BeehiveBlockEntity) tileentity;
                 ItemStack itemstack = new ItemStack(this);
-                int i = ((Integer) state.getValue(BeehiveBlock.HONEY_LEVEL)).intValue();
+                int i = state.getValue(BeehiveBlock.HONEY_LEVEL).intValue();
                 boolean flag = !tileentitybeehive.isEmpty();
 
                 if (flag || i > 0) {
@@ -300,7 +300,7 @@ public class BeehiveBlock extends BaseEntityBlock {
                     nbttagcompound = new CompoundTag();
                     nbttagcompound.putInt("honey_level", i);
                     itemstack.addTagElement("BlockStateTag", nbttagcompound);
-                    ItemEntity entityitem = new ItemEntity(world, (double) pos.getX(), (double) pos.getY(), (double) pos.getZ(), itemstack);
+                    ItemEntity entityitem = new ItemEntity(world, pos.getX(), pos.getY(), pos.getZ(), itemstack);
 
                     entityitem.setDefaultPickUpDelay();
                     world.addFreshEntity(entityitem);
@@ -313,15 +313,15 @@ public class BeehiveBlock extends BaseEntityBlock {
 
     @Override
     public List<ItemStack> getDrops(BlockState state, LootContext.Builder builder) {
-        Entity entity = (Entity) builder.getOptionalParameter(LootContextParams.THIS_ENTITY);
+        Entity entity = builder.getOptionalParameter(LootContextParams.THIS_ENTITY);
 
         if (entity instanceof PrimedTnt || entity instanceof Creeper || entity instanceof WitherSkull || entity instanceof WitherBoss || entity instanceof MinecartTNT) {
-            BlockEntity tileentity = (BlockEntity) builder.getOptionalParameter(LootContextParams.BLOCK_ENTITY);
+            BlockEntity tileentity = builder.getOptionalParameter(LootContextParams.BLOCK_ENTITY);
 
             if (tileentity instanceof BeehiveBlockEntity) {
                 BeehiveBlockEntity tileentitybeehive = (BeehiveBlockEntity) tileentity;
 
-                tileentitybeehive.emptyAllLivingFromHive((Player) null, state, BeehiveBlockEntity.BeeReleaseStatus.EMERGENCY);
+                tileentitybeehive.emptyAllLivingFromHive(null, state, BeehiveBlockEntity.BeeReleaseStatus.EMERGENCY);
             }
         }
 
@@ -336,7 +336,7 @@ public class BeehiveBlock extends BaseEntityBlock {
             if (tileentity instanceof BeehiveBlockEntity) {
                 BeehiveBlockEntity tileentitybeehive = (BeehiveBlockEntity) tileentity;
 
-                tileentitybeehive.emptyAllLivingFromHive((Player) null, state, BeehiveBlockEntity.BeeReleaseStatus.EMERGENCY);
+                tileentitybeehive.emptyAllLivingFromHive(null, state, BeehiveBlockEntity.BeeReleaseStatus.EMERGENCY);
             }
         }
 
diff --git a/src/main/java/net/minecraft/world/level/block/BellBlock.java b/src/main/java/net/minecraft/world/level/block/BellBlock.java
index 15732e298c8d46eb3f89097babdfc39828a1b620..8d698af793cca3f2969d4af4f978085e426e81d1 100644
--- a/src/main/java/net/minecraft/world/level/block/BellBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/BellBlock.java
@@ -65,7 +65,7 @@ public class BellBlock extends BaseEntityBlock {
         boolean bl = world.hasNeighborSignal(pos);
         if (bl != state.<Boolean>getValue(POWERED).booleanValue()) {
             if (bl) {
-                this.attemptToRing(world, pos, (Direction)null);
+                this.attemptToRing(world, pos, null);
             }
 
             world.setBlock(pos, state.setValue(POWERED, Boolean.valueOf(bl)), 3);
@@ -122,7 +122,7 @@ public class BellBlock extends BaseEntityBlock {
     }
 
     public boolean attemptToRing(Level world, BlockPos pos, @Nullable Direction direction) {
-        return this.attemptToRing((Entity)null, world, pos, direction);
+        return this.attemptToRing(null, world, pos, direction);
     }
 
     public boolean attemptToRing(@Nullable Entity entity, Level world, BlockPos pos, @Nullable Direction direction) {
@@ -134,7 +134,7 @@ public class BellBlock extends BaseEntityBlock {
 
             if (!new io.papermc.paper.event.block.BellRingEvent(world.getWorld().getBlockAt(MCUtil.toLocation(world, pos)), entity == null ? null : entity.getBukkitEntity()).callEvent()) return false; // Paper - BellRingEvent
             ((BellBlockEntity)blockEntity).onHit(direction);
-            world.playSound((Player)null, pos, SoundEvents.BELL_BLOCK, SoundSource.BLOCKS, 2.0F, 1.0F);
+            world.playSound(null, pos, SoundEvents.BELL_BLOCK, SoundSource.BLOCKS, 2.0F, 1.0F);
             world.gameEvent(entity, GameEvent.BLOCK_CHANGE, pos);
             return true;
         } else {
@@ -232,7 +232,7 @@ public class BellBlock extends BaseEntityBlock {
     }
 
     private static Direction getConnectedDirection(BlockState state) {
-        switch ((BellAttachType)state.getValue(ATTACHMENT)) {
+        switch (state.getValue(ATTACHMENT)) {
             case FLOOR:
                 return Direction.UP;
             case CEILING:
diff --git a/src/main/java/net/minecraft/world/level/block/BigDripleafBlock.java b/src/main/java/net/minecraft/world/level/block/BigDripleafBlock.java
index 59978024aaa6ae5c97c6dbf723e021fbd893ecd6..fb238bc7f0ba2e62d640a07b9982c4c58802445e 100644
--- a/src/main/java/net/minecraft/world/level/block/BigDripleafBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/BigDripleafBlock.java
@@ -67,12 +67,12 @@ public class BigDripleafBlock extends HorizontalDirectionalBlock implements Bone
 
     protected BigDripleafBlock(BlockBehaviour.Properties settings) {
         super(settings);
-        this.registerDefaultState((BlockState) ((BlockState) ((BlockState) ((BlockState) this.stateDefinition.any()).setValue(BigDripleafBlock.WATERLOGGED, Boolean.FALSE)).setValue(BigDripleafBlock.FACING, Direction.NORTH)).setValue(BigDripleafBlock.TILT, Tilt.NONE));
+        this.registerDefaultState(this.stateDefinition.any().setValue(BigDripleafBlock.WATERLOGGED, Boolean.FALSE).setValue(BigDripleafBlock.FACING, Direction.NORTH).setValue(BigDripleafBlock.TILT, Tilt.NONE));
         this.shapesCache = this.getShapeForEachState(BigDripleafBlock::calculateShape);
     }
 
     private static VoxelShape calculateShape(BlockState state) {
-        return Shapes.or((VoxelShape) BigDripleafBlock.LEAF_SHAPES.get(state.getValue(BigDripleafBlock.TILT)), (VoxelShape) BigDripleafBlock.STEM_SHAPES.get(state.getValue(BigDripleafBlock.FACING)));
+        return Shapes.or(BigDripleafBlock.LEAF_SHAPES.get(state.getValue(BigDripleafBlock.TILT)), BigDripleafBlock.STEM_SHAPES.get(state.getValue(BigDripleafBlock.FACING)));
     }
 
     public static void placeWithRandomHeight(LevelAccessor world, RandomSource random, BlockPos pos, Direction direction) {
@@ -106,7 +106,7 @@ public class BigDripleafBlock extends HorizontalDirectionalBlock implements Bone
     }
 
     protected static boolean place(LevelAccessor world, BlockPos pos, FluidState fluidState, Direction direction) {
-        BlockState iblockdata = (BlockState) ((BlockState) Blocks.BIG_DRIPLEAF.defaultBlockState().setValue(BigDripleafBlock.WATERLOGGED, Boolean.valueOf(fluidState.isSourceOfType(Fluids.WATER)))).setValue(BigDripleafBlock.FACING, direction);
+        BlockState iblockdata = Blocks.BIG_DRIPLEAF.defaultBlockState().setValue(BigDripleafBlock.WATERLOGGED, Boolean.valueOf(fluidState.isSourceOfType(Fluids.WATER))).setValue(BigDripleafBlock.FACING, direction);
 
         return world.setBlock(pos, iblockdata, 3);
     }
@@ -118,7 +118,7 @@ public class BigDripleafBlock extends HorizontalDirectionalBlock implements Bone
 
     @Override
     public FluidState getFluidState(BlockState state) {
-        return ((Boolean) state.getValue(BigDripleafBlock.WATERLOGGED)).booleanValue() ? Fluids.WATER.getSource(false) : super.getFluidState(state);
+        return state.getValue(BigDripleafBlock.WATERLOGGED).booleanValue() ? Fluids.WATER.getSource(false) : super.getFluidState(state);
     }
 
     @Override
@@ -126,7 +126,7 @@ public class BigDripleafBlock extends HorizontalDirectionalBlock implements Bone
         BlockPos blockposition1 = pos.below();
         BlockState iblockdata1 = world.getBlockState(blockposition1);
 
-        return iblockdata1.is((Block) this) || iblockdata1.is(Blocks.BIG_DRIPLEAF_STEM) || iblockdata1.is(BlockTags.BIG_DRIPLEAF_PLACEABLE);
+        return iblockdata1.is(this) || iblockdata1.is(Blocks.BIG_DRIPLEAF_STEM) || iblockdata1.is(BlockTags.BIG_DRIPLEAF_PLACEABLE);
     }
 
     @Override
@@ -134,11 +134,11 @@ public class BigDripleafBlock extends HorizontalDirectionalBlock implements Bone
         if (direction == Direction.DOWN && !state.canSurvive(world, pos)) {
             return Blocks.AIR.defaultBlockState();
         } else {
-            if (((Boolean) state.getValue(BigDripleafBlock.WATERLOGGED)).booleanValue()) {
-                world.scheduleTick(pos, (Fluid) Fluids.WATER, Fluids.WATER.getTickDelay(world));
+            if (state.getValue(BigDripleafBlock.WATERLOGGED).booleanValue()) {
+                world.scheduleTick(pos, Fluids.WATER, Fluids.WATER.getTickDelay(world));
             }
 
-            return direction == Direction.UP && neighborState.is((Block) this) ? Blocks.BIG_DRIPLEAF_STEM.withPropertiesOf(state) : super.updateShape(state, direction, neighborState, world, pos, neighborPos);
+            return direction == Direction.UP && neighborState.is(this) ? Blocks.BIG_DRIPLEAF_STEM.withPropertiesOf(state) : super.updateShape(state, direction, neighborState, world, pos, neighborPos);
         }
     }
 
@@ -160,7 +160,7 @@ public class BigDripleafBlock extends HorizontalDirectionalBlock implements Bone
         BlockState iblockdata1 = world.getBlockState(blockposition1);
 
         if (BigDripleafBlock.canPlaceAt(world, blockposition1, iblockdata1)) {
-            Direction enumdirection = (Direction) state.getValue(BigDripleafBlock.FACING);
+            Direction enumdirection = state.getValue(BigDripleafBlock.FACING);
 
             BigDripleafStemBlock.place(world, pos, state.getFluidState(), enumdirection);
             BigDripleafBlock.place(world, blockposition1, iblockdata1.getFluidState(), enumdirection);
@@ -185,7 +185,7 @@ public class BigDripleafBlock extends HorizontalDirectionalBlock implements Bone
                 if (cancellable.isCancelled()) {
                     return;
                 }
-                this.setTiltAndScheduleTick(state, world, pos, Tilt.UNSTABLE, (SoundEvent) null, entity);
+                this.setTiltAndScheduleTick(state, world, pos, Tilt.UNSTABLE, null, entity);
                 // CraftBukkit end
             }
 
@@ -197,7 +197,7 @@ public class BigDripleafBlock extends HorizontalDirectionalBlock implements Bone
         if (world.hasNeighborSignal(pos)) {
             BigDripleafBlock.resetTilt(state, world, pos);
         } else {
-            Tilt tilt = (Tilt) state.getValue(BigDripleafBlock.TILT);
+            Tilt tilt = state.getValue(BigDripleafBlock.TILT);
 
             if (tilt == Tilt.UNSTABLE) {
                 this.setTiltAndScheduleTick(state, world, pos, Tilt.PARTIAL, SoundEvents.BIG_DRIPLEAF_TILT_DOWN, null); // CraftBukkit
@@ -221,7 +221,7 @@ public class BigDripleafBlock extends HorizontalDirectionalBlock implements Bone
     private static void playTiltSound(Level world, BlockPos pos, SoundEvent soundEvent) {
         float f = Mth.randomBetween(world.random, 0.8F, 1.2F);
 
-        world.playSound((Player) null, pos, soundEvent, SoundSource.BLOCKS, 1.0F, f);
+        world.playSound(null, pos, soundEvent, SoundSource.BLOCKS, 1.0F, f);
     }
 
     private static boolean canEntityTilt(BlockPos pos, Entity entity) {
@@ -239,7 +239,7 @@ public class BigDripleafBlock extends HorizontalDirectionalBlock implements Bone
         int i = BigDripleafBlock.DELAY_UNTIL_NEXT_TILT_STATE.getInt(tilt);
 
         if (i != -1) {
-            world.scheduleTick(blockposition, (Block) this, i);
+            world.scheduleTick(blockposition, this, i);
         }
 
     }
@@ -260,11 +260,11 @@ public class BigDripleafBlock extends HorizontalDirectionalBlock implements Bone
             }
         }
         // CraftBukkit end
-        Tilt tilt1 = (Tilt) iblockdata.getValue(BigDripleafBlock.TILT);
+        Tilt tilt1 = iblockdata.getValue(BigDripleafBlock.TILT);
 
-        world.setBlock(blockposition, (BlockState) iblockdata.setValue(BigDripleafBlock.TILT, tilt), 2);
+        world.setBlock(blockposition, iblockdata.setValue(BigDripleafBlock.TILT, tilt), 2);
         if (tilt.causesVibration() && tilt != tilt1) {
-            world.gameEvent((Entity) null, GameEvent.BLOCK_CHANGE, blockposition);
+            world.gameEvent(null, GameEvent.BLOCK_CHANGE, blockposition);
         }
 
         return true; // CraftBukkit
@@ -272,12 +272,12 @@ public class BigDripleafBlock extends HorizontalDirectionalBlock implements Bone
 
     @Override
     public VoxelShape getCollisionShape(BlockState state, BlockGetter world, BlockPos pos, CollisionContext context) {
-        return (VoxelShape) BigDripleafBlock.LEAF_SHAPES.get(state.getValue(BigDripleafBlock.TILT));
+        return BigDripleafBlock.LEAF_SHAPES.get(state.getValue(BigDripleafBlock.TILT));
     }
 
     @Override
     public VoxelShape getShape(BlockState state, BlockGetter world, BlockPos pos, CollisionContext context) {
-        return (VoxelShape) this.shapesCache.get(state);
+        return this.shapesCache.get(state);
     }
 
     @Override
@@ -286,7 +286,7 @@ public class BigDripleafBlock extends HorizontalDirectionalBlock implements Bone
         FluidState fluid = ctx.getLevel().getFluidState(ctx.getClickedPos());
         boolean flag = iblockdata.is(Blocks.BIG_DRIPLEAF) || iblockdata.is(Blocks.BIG_DRIPLEAF_STEM);
 
-        return (BlockState) ((BlockState) this.defaultBlockState().setValue(BigDripleafBlock.WATERLOGGED, Boolean.valueOf(fluid.isSourceOfType(Fluids.WATER)))).setValue(BigDripleafBlock.FACING, flag ? (Direction) iblockdata.getValue(BigDripleafBlock.FACING) : ctx.getHorizontalDirection().getOpposite());
+        return this.defaultBlockState().setValue(BigDripleafBlock.WATERLOGGED, Boolean.valueOf(fluid.isSourceOfType(Fluids.WATER))).setValue(BigDripleafBlock.FACING, flag ? iblockdata.getValue(BigDripleafBlock.FACING) : ctx.getHorizontalDirection().getOpposite());
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/Block.java b/src/main/java/net/minecraft/world/level/block/Block.java
index da38bcf59be3f8873b42b97d08b1e5a624158b86..0c65aa638bb4224899d6dc62cf7ec2f665fba81c 100644
--- a/src/main/java/net/minecraft/world/level/block/Block.java
+++ b/src/main/java/net/minecraft/world/level/block/Block.java
@@ -136,7 +136,7 @@ public class Block extends BlockBehaviour implements ItemLike {
     }
 
     public static BlockState stateById(int stateId) {
-        BlockState iblockdata = (BlockState) Block.BLOCK_STATE_REGISTRY.byId(stateId);
+        BlockState iblockdata = Block.BLOCK_STATE_REGISTRY.byId(stateId);
 
         return iblockdata == null ? Blocks.AIR.defaultBlockState() : iblockdata;
     }
@@ -146,12 +146,12 @@ public class Block extends BlockBehaviour implements ItemLike {
     }
 
     public static BlockState pushEntitiesUp(BlockState from, BlockState to, LevelAccessor world, BlockPos pos) {
-        VoxelShape voxelshape = Shapes.joinUnoptimized(from.getCollisionShape(world, pos), to.getCollisionShape(world, pos), BooleanOp.ONLY_SECOND).move((double) pos.getX(), (double) pos.getY(), (double) pos.getZ());
+        VoxelShape voxelshape = Shapes.joinUnoptimized(from.getCollisionShape(world, pos), to.getCollisionShape(world, pos), BooleanOp.ONLY_SECOND).move(pos.getX(), pos.getY(), pos.getZ());
 
         if (voxelshape.isEmpty()) {
             return to;
         } else {
-            List<Entity> list = world.getEntities((Entity) null, voxelshape.bounds());
+            List<Entity> list = world.getEntities(null, voxelshape.bounds());
             Iterator iterator = list.iterator();
 
             while (iterator.hasNext()) {
@@ -193,7 +193,7 @@ public class Block extends BlockBehaviour implements ItemLike {
         if (newState != state) {
             if (newState.isAir()) {
                 if (!world.isClientSide()) {
-                    world.destroyBlock(pos, (flags & 32) == 0, (Entity) null, maxUpdateDepth);
+                    world.destroyBlock(pos, (flags & 32) == 0, null, maxUpdateDepth);
                 }
             } else {
                 world.setBlock(pos, newState, flags & -33, maxUpdateDepth);
@@ -209,7 +209,7 @@ public class Block extends BlockBehaviour implements ItemLike {
 
         this.createBlockStateDefinition(blockstatelist_a);
         this.stateDefinition = blockstatelist_a.create(Block::defaultBlockState, BlockState::new);
-        this.registerDefaultState((BlockState) this.stateDefinition.any());
+        this.registerDefaultState(this.stateDefinition.any());
         if (SharedConstants.IS_RUNNING_IN_IDE) {
             String s = this.getClass().getSimpleName();
 
@@ -235,7 +235,7 @@ public class Block extends BlockBehaviour implements ItemLike {
             return false;
         } else if (iblockdata1.canOcclude()) {
             Block.BlockStatePairKey block_a = new Block.BlockStatePairKey(state, iblockdata1, side);
-            Object2ByteLinkedOpenHashMap<Block.BlockStatePairKey> object2bytelinkedopenhashmap = (Object2ByteLinkedOpenHashMap) Block.OCCLUSION_CACHE.get();
+            Object2ByteLinkedOpenHashMap<Block.BlockStatePairKey> object2bytelinkedopenhashmap = Block.OCCLUSION_CACHE.get();
             byte b0 = object2bytelinkedopenhashmap.getAndMoveToFirst(block_a);
 
             if (b0 != 127) {
@@ -279,7 +279,7 @@ public class Block extends BlockBehaviour implements ItemLike {
     }
 
     public static boolean isShapeFullBlock(VoxelShape shape) {
-        return ((Boolean) Block.SHAPE_FULL_BLOCK_CACHE.getUnchecked(shape)).booleanValue();
+        return Block.SHAPE_FULL_BLOCK_CACHE.getUnchecked(shape).booleanValue();
     }
 
     public boolean propagatesSkylightDown(BlockState state, BlockGetter world, BlockPos pos) {
@@ -304,7 +304,7 @@ public class Block extends BlockBehaviour implements ItemLike {
 
     public static void dropResources(BlockState state, LootContext.Builder lootContext) {
         ServerLevel worldserver = lootContext.getLevel();
-        BlockPos blockposition = new BlockPos((Vec3) lootContext.getParameter(LootContextParams.ORIGIN));
+        BlockPos blockposition = new BlockPos(lootContext.getParameter(LootContextParams.ORIGIN));
 
         state.getDrops(lootContext).forEach((itemstack) -> {
             Block.popResource(worldserver, blockposition, itemstack);
@@ -314,7 +314,7 @@ public class Block extends BlockBehaviour implements ItemLike {
 
     public static void dropResources(BlockState state, Level world, BlockPos pos) {
         if (world instanceof ServerLevel) {
-            Block.getDrops(state, (ServerLevel) world, pos, (BlockEntity) null).forEach((itemstack) -> {
+            Block.getDrops(state, (ServerLevel) world, pos, null).forEach((itemstack) -> {
                 Block.popResource(world, pos, itemstack);
             });
             state.spawnAfterBreak((ServerLevel) world, pos, ItemStack.EMPTY, true);
@@ -394,7 +394,7 @@ public class Block extends BlockBehaviour implements ItemLike {
 
     private static void popResource(Level world, Supplier<ItemEntity> itemEntitySupplier, ItemStack stack) {
         if (!world.isClientSide && !stack.isEmpty() && world.getGameRules().getBoolean(GameRules.RULE_DOBLOCKDROPS)) {
-            ItemEntity entityitem = (ItemEntity) itemEntitySupplier.get();
+            ItemEntity entityitem = itemEntitySupplier.get();
 
             entityitem.setDefaultPickUpDelay();
             // CraftBukkit start
@@ -529,7 +529,7 @@ public class Block extends BlockBehaviour implements ItemLike {
     }
 
     private static <T extends Comparable<T>> BlockState copyProperty(BlockState source, BlockState target, Property<T> property) {
-        return (BlockState) target.setValue(property, source.getValue(property));
+        return target.setValue(property, source.getValue(property));
     }
 
     public SoundType getSoundType(BlockState state) {
@@ -561,7 +561,7 @@ public class Block extends BlockBehaviour implements ItemLike {
     }
 
     protected ImmutableMap<BlockState, VoxelShape> getShapeForEachState(Function<BlockState, VoxelShape> stateToShape) {
-        return (ImmutableMap) this.stateDefinition.getPossibleStates().stream().collect(ImmutableMap.toImmutableMap(Function.identity(), stateToShape));
+        return this.stateDefinition.getPossibleStates().stream().collect(ImmutableMap.toImmutableMap(Function.identity(), stateToShape));
     }
 
     /** @deprecated */
diff --git a/src/main/java/net/minecraft/world/level/block/BubbleColumnBlock.java b/src/main/java/net/minecraft/world/level/block/BubbleColumnBlock.java
index 36c13bc21cd89ca54251e2c918e3781a4b7eec9f..eb5331723f56e96d825adcaed41889272a84d7ab 100644
--- a/src/main/java/net/minecraft/world/level/block/BubbleColumnBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/BubbleColumnBlock.java
@@ -46,8 +46,8 @@ public class BubbleColumnBlock extends Block implements BucketPickup {
                 ServerLevel serverLevel = (ServerLevel)world;
 
                 for(int i = 0; i < 2; ++i) {
-                    serverLevel.sendParticles(ParticleTypes.SPLASH, (double)pos.getX() + world.random.nextDouble(), (double)(pos.getY() + 1), (double)pos.getZ() + world.random.nextDouble(), 1, 0.0D, 0.0D, 0.0D, 1.0D);
-                    serverLevel.sendParticles(ParticleTypes.BUBBLE, (double)pos.getX() + world.random.nextDouble(), (double)(pos.getY() + 1), (double)pos.getZ() + world.random.nextDouble(), 1, 0.0D, 0.01D, 0.0D, 0.2D);
+                    serverLevel.sendParticles(ParticleTypes.SPLASH, (double)pos.getX() + world.random.nextDouble(), pos.getY() + 1, (double)pos.getZ() + world.random.nextDouble(), 1, 0.0D, 0.0D, 0.0D, 1.0D);
+                    serverLevel.sendParticles(ParticleTypes.BUBBLE, (double)pos.getX() + world.random.nextDouble(), pos.getY() + 1, (double)pos.getZ() + world.random.nextDouble(), 1, 0.0D, 0.01D, 0.0D, 0.2D);
                 }
             }
         } else {
@@ -103,9 +103,9 @@ public class BubbleColumnBlock extends Block implements BucketPickup {
 
     @Override
     public void animateTick(BlockState state, Level world, BlockPos pos, RandomSource random) {
-        double d = (double)pos.getX();
-        double e = (double)pos.getY();
-        double f = (double)pos.getZ();
+        double d = pos.getX();
+        double e = pos.getY();
+        double f = pos.getZ();
         if (state.<Boolean>getValue(DRAG_DOWN).booleanValue()) {
             world.addAlwaysVisibleParticle(ParticleTypes.CURRENT_DOWN, d + 0.5D, e + 0.8D, f, 0.0D, 0.0D, 0.0D);
             if (random.nextInt(200) == 0) {
diff --git a/src/main/java/net/minecraft/world/level/block/BuddingAmethystBlock.java b/src/main/java/net/minecraft/world/level/block/BuddingAmethystBlock.java
index f3151bba6697f0141e17df5d9df46fd03af22498..49e7116729f14ec2b0b844b881bb1e0c01babe7e 100644
--- a/src/main/java/net/minecraft/world/level/block/BuddingAmethystBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/BuddingAmethystBlock.java
@@ -42,7 +42,7 @@ public class BuddingAmethystBlock extends AmethystBlock {
             }
 
             if (block != null) {
-                BlockState iblockdata2 = (BlockState) ((BlockState) block.defaultBlockState().setValue(AmethystClusterBlock.FACING, enumdirection)).setValue(AmethystClusterBlock.WATERLOGGED, Boolean.valueOf(iblockdata1.getFluidState().getType() == Fluids.WATER));
+                BlockState iblockdata2 = block.defaultBlockState().setValue(AmethystClusterBlock.FACING, enumdirection).setValue(AmethystClusterBlock.WATERLOGGED, Boolean.valueOf(iblockdata1.getFluidState().getType() == Fluids.WATER));
 
                 org.bukkit.craftbukkit.event.CraftEventFactory.handleBlockSpreadEvent(world, pos, blockposition1, iblockdata2); // CraftBukkit
             }
diff --git a/src/main/java/net/minecraft/world/level/block/ButtonBlock.java b/src/main/java/net/minecraft/world/level/block/ButtonBlock.java
index 202914dd0c265a61397aae86391e8b4379557257..3f5ca20e89d9ea175ec82ed85eb62647797d0ba2 100644
--- a/src/main/java/net/minecraft/world/level/block/ButtonBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/ButtonBlock.java
@@ -60,7 +60,7 @@ public class ButtonBlock extends FaceAttachedHorizontalDirectionalBlock {
 
     protected ButtonBlock(BlockBehaviour.Properties settings, int pressTicks, boolean wooden, SoundEvent clickOffSound, SoundEvent clickOnSound) {
         super(settings);
-        this.registerDefaultState((BlockState) ((BlockState) ((BlockState) ((BlockState) this.stateDefinition.any()).setValue(ButtonBlock.FACING, Direction.NORTH)).setValue(ButtonBlock.POWERED, Boolean.FALSE)).setValue(ButtonBlock.FACE, AttachFace.WALL));
+        this.registerDefaultState(this.stateDefinition.any().setValue(ButtonBlock.FACING, Direction.NORTH).setValue(ButtonBlock.POWERED, Boolean.FALSE).setValue(ButtonBlock.FACE, AttachFace.WALL));
         this.ticksToStayPressed = pressTicks;
         this.arrowsCanPress = wooden;
         this.soundOff = clickOffSound;
@@ -69,10 +69,10 @@ public class ButtonBlock extends FaceAttachedHorizontalDirectionalBlock {
 
     @Override
     public VoxelShape getShape(BlockState state, BlockGetter world, BlockPos pos, CollisionContext context) {
-        Direction enumdirection = (Direction) state.getValue(ButtonBlock.FACING);
-        boolean flag = ((Boolean) state.getValue(ButtonBlock.POWERED)).booleanValue();
+        Direction enumdirection = state.getValue(ButtonBlock.FACING);
+        boolean flag = state.getValue(ButtonBlock.POWERED).booleanValue();
 
-        switch ((AttachFace) state.getValue(ButtonBlock.FACE)) {
+        switch (state.getValue(ButtonBlock.FACE)) {
             case FLOOR:
                 if (enumdirection.getAxis() == Direction.Axis.X) {
                     return flag ? ButtonBlock.PRESSED_FLOOR_AABB_X : ButtonBlock.FLOOR_AABB_X;
@@ -110,11 +110,11 @@ public class ButtonBlock extends FaceAttachedHorizontalDirectionalBlock {
 
     @Override
     public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
-        if (((Boolean) state.getValue(ButtonBlock.POWERED)).booleanValue()) {
+        if (state.getValue(ButtonBlock.POWERED).booleanValue()) {
             return InteractionResult.CONSUME;
         } else {
             // CraftBukkit start
-            boolean powered = (((Boolean) state.getValue(POWERED)).booleanValue());
+            boolean powered = (state.getValue(POWERED).booleanValue());
             org.bukkit.block.Block block = world.getWorld().getBlockAt(pos.getX(), pos.getY(), pos.getZ());
             int old = (powered) ? 15 : 0;
             int current = (!powered) ? 15 : 0;
@@ -128,15 +128,15 @@ public class ButtonBlock extends FaceAttachedHorizontalDirectionalBlock {
             // CraftBukkit end
             this.press(state, world, pos);
             this.playSound(player, world, pos, true);
-            world.gameEvent((Entity) player, GameEvent.BLOCK_ACTIVATE, pos);
+            world.gameEvent(player, GameEvent.BLOCK_ACTIVATE, pos);
             return InteractionResult.sidedSuccess(world.isClientSide);
         }
     }
 
     public void press(BlockState state, Level world, BlockPos pos) {
-        world.setBlock(pos, (BlockState) state.setValue(ButtonBlock.POWERED, Boolean.TRUE), 3);
+        world.setBlock(pos, state.setValue(ButtonBlock.POWERED, Boolean.TRUE), 3);
         this.updateNeighbours(state, world, pos);
-        world.scheduleTick(pos, (Block) this, this.ticksToStayPressed);
+        world.scheduleTick(pos, this, this.ticksToStayPressed);
     }
 
     protected void playSound(@Nullable Player player, LevelAccessor world, BlockPos pos, boolean powered) {
@@ -150,7 +150,7 @@ public class ButtonBlock extends FaceAttachedHorizontalDirectionalBlock {
     @Override
     public void onRemove(BlockState state, Level world, BlockPos pos, BlockState newState, boolean moved) {
         if (!moved && !state.is(newState.getBlock())) {
-            if (((Boolean) state.getValue(ButtonBlock.POWERED)).booleanValue()) {
+            if (state.getValue(ButtonBlock.POWERED).booleanValue()) {
                 this.updateNeighbours(state, world, pos);
             }
 
@@ -160,12 +160,12 @@ public class ButtonBlock extends FaceAttachedHorizontalDirectionalBlock {
 
     @Override
     public int getSignal(BlockState state, BlockGetter world, BlockPos pos, Direction direction) {
-        return ((Boolean) state.getValue(ButtonBlock.POWERED)).booleanValue() ? 15 : 0;
+        return state.getValue(ButtonBlock.POWERED).booleanValue() ? 15 : 0;
     }
 
     @Override
     public int getDirectSignal(BlockState state, BlockGetter world, BlockPos pos, Direction direction) {
-        return ((Boolean) state.getValue(ButtonBlock.POWERED)).booleanValue() && getConnectedDirection(state) == direction ? 15 : 0;
+        return state.getValue(ButtonBlock.POWERED).booleanValue() && getConnectedDirection(state) == direction ? 15 : 0;
     }
 
     @Override
@@ -183,7 +183,7 @@ public class ButtonBlock extends FaceAttachedHorizontalDirectionalBlock {
     @Override
     public void entityInside(BlockState state, Level world, BlockPos pos, Entity entity) {
         if (!new io.papermc.paper.event.entity.EntityInsideBlockEvent(entity.getBukkitEntity(), org.bukkit.craftbukkit.block.CraftBlock.at(world, pos)).callEvent()) { return; } // Paper
-        if (!world.isClientSide && this.arrowsCanPress && !((Boolean) state.getValue(ButtonBlock.POWERED)).booleanValue()) {
+        if (!world.isClientSide && this.arrowsCanPress && !state.getValue(ButtonBlock.POWERED).booleanValue()) {
             this.checkPressed(state, world, pos);
         }
     }
@@ -191,7 +191,7 @@ public class ButtonBlock extends FaceAttachedHorizontalDirectionalBlock {
     protected void checkPressed(BlockState state, Level world, BlockPos pos) {
         AbstractArrow entityarrow = this.arrowsCanPress ? (AbstractArrow) world.getEntitiesOfClass(AbstractArrow.class, state.getShape(world, pos).bounds().move(pos)).stream().findFirst().orElse(null) : null; // CraftBukkit - decompile error
         boolean flag = entityarrow != null;
-        boolean flag1 = ((Boolean) state.getValue(ButtonBlock.POWERED)).booleanValue();
+        boolean flag1 = state.getValue(ButtonBlock.POWERED).booleanValue();
 
         // CraftBukkit start - Call interact event when arrows turn on wooden buttons
         if (flag1 != flag && flag) {
@@ -219,14 +219,14 @@ public class ButtonBlock extends FaceAttachedHorizontalDirectionalBlock {
                 return;
             }
             // CraftBukkit end
-            world.setBlock(pos, (BlockState) state.setValue(ButtonBlock.POWERED, Boolean.valueOf(flag)), 3);
+            world.setBlock(pos, state.setValue(ButtonBlock.POWERED, Boolean.valueOf(flag)), 3);
             this.updateNeighbours(state, world, pos);
             this.playSound((Player) null, world, pos, flag);
             world.gameEvent((Entity) entityarrow, flag ? GameEvent.BLOCK_ACTIVATE : GameEvent.BLOCK_DEACTIVATE, pos);
         }
 
         if (flag) {
-            world.scheduleTick(new BlockPos(pos), (Block) this, this.ticksToStayPressed);
+            world.scheduleTick(new BlockPos(pos), this, this.ticksToStayPressed);
         }
 
     }
diff --git a/src/main/java/net/minecraft/world/level/block/CactusBlock.java b/src/main/java/net/minecraft/world/level/block/CactusBlock.java
index 9a2f61f9f956b782522ec962a85858598df3ba40..62dfb2c9e4370b97415b1bdae09195dc2e7665b1 100644
--- a/src/main/java/net/minecraft/world/level/block/CactusBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/CactusBlock.java
@@ -33,7 +33,7 @@ public class CactusBlock extends Block {
 
     protected CactusBlock(BlockBehaviour.Properties settings) {
         super(settings);
-        this.registerDefaultState((BlockState) ((BlockState) this.stateDefinition.any()).setValue(CactusBlock.AGE, Integer.valueOf(0)));
+        this.registerDefaultState(this.stateDefinition.any().setValue(CactusBlock.AGE, Integer.valueOf(0)));
     }
 
     @Override
@@ -51,22 +51,22 @@ public class CactusBlock extends Block {
         if (world.isEmptyBlock(blockposition1)) {
             int i;
 
-            for (i = 1; world.getBlockState(pos.below(i)).is((Block) this); ++i) {
+            for (i = 1; world.getBlockState(pos.below(i)).is(this); ++i) {
                 ;
             }
 
             if (i < world.paperConfig().maxGrowthHeight.cactus) { // Paper - Configurable growth height
-                int j = ((Integer) state.getValue(CactusBlock.AGE)).intValue();
+                int j = state.getValue(CactusBlock.AGE).intValue();
 
                 int modifier = world.spigotConfig.cactusModifier; // Spigot - SPIGOT-7159: Better modifier resolution
                 if (j >= 15 || (modifier != 100 && random.nextFloat() < (modifier / (100.0f * 16)))) { // Spigot - SPIGOT-7159: Better modifier resolution
                     CraftEventFactory.handleBlockGrowEvent(world, blockposition1, this.defaultBlockState()); // CraftBukkit
-                    BlockState iblockdata1 = (BlockState) state.setValue(CactusBlock.AGE, Integer.valueOf(0));
+                    BlockState iblockdata1 = state.setValue(CactusBlock.AGE, Integer.valueOf(0));
 
                     world.setBlock(pos, iblockdata1, 4);
                     world.neighborChanged(iblockdata1, blockposition1, this, pos, false);
                 } else if (modifier == 100 || random.nextFloat() < (modifier / (100.0f * 16))) { // Spigot - SPIGOT-7159: Better modifier resolution
-                    world.setBlock(pos, (BlockState) state.setValue(CactusBlock.AGE, Integer.valueOf(j + 1)), 4);
+                    world.setBlock(pos, state.setValue(CactusBlock.AGE, Integer.valueOf(j + 1)), 4);
                 }
 
             }
@@ -86,7 +86,7 @@ public class CactusBlock extends Block {
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
         if (!state.canSurvive(world, pos)) {
-            world.scheduleTick(pos, (Block) this, 1);
+            world.scheduleTick(pos, this, 1);
         }
 
         return super.updateShape(state, direction, neighborState, world, pos, neighborPos);
diff --git a/src/main/java/net/minecraft/world/level/block/CakeBlock.java b/src/main/java/net/minecraft/world/level/block/CakeBlock.java
index 2724da92c7a6eab9442b84e140cf173c03118592..233b053cf592dea2ded4c2550f147bbb16e7beb3 100644
--- a/src/main/java/net/minecraft/world/level/block/CakeBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/CakeBlock.java
@@ -38,12 +38,12 @@ public class CakeBlock extends Block {
 
     protected CakeBlock(BlockBehaviour.Properties settings) {
         super(settings);
-        this.registerDefaultState((BlockState) ((BlockState) this.stateDefinition.any()).setValue(CakeBlock.BITES, Integer.valueOf(0)));
+        this.registerDefaultState(this.stateDefinition.any().setValue(CakeBlock.BITES, Integer.valueOf(0)));
     }
 
     @Override
     public VoxelShape getShape(BlockState state, BlockGetter world, BlockPos pos, CollisionContext context) {
-        return CakeBlock.SHAPE_BY_BITE[((Integer) state.getValue(CakeBlock.BITES)).intValue()];
+        return CakeBlock.SHAPE_BY_BITE[state.getValue(CakeBlock.BITES).intValue()];
     }
 
     @Override
@@ -51,7 +51,7 @@ public class CakeBlock extends Block {
         ItemStack itemstack = player.getItemInHand(hand);
         Item item = itemstack.getItem();
 
-        if (itemstack.is(ItemTags.CANDLES) && ((Integer) state.getValue(CakeBlock.BITES)).intValue() == 0) {
+        if (itemstack.is(ItemTags.CANDLES) && state.getValue(CakeBlock.BITES).intValue() == 0) {
             Block block = Block.byItem(item);
 
             if (block instanceof CandleBlock) {
@@ -59,9 +59,9 @@ public class CakeBlock extends Block {
                     itemstack.shrink(1);
                 }
 
-                world.playSound((Player) null, pos, SoundEvents.CAKE_ADD_CANDLE, SoundSource.BLOCKS, 1.0F, 1.0F);
+                world.playSound(null, pos, SoundEvents.CAKE_ADD_CANDLE, SoundSource.BLOCKS, 1.0F, 1.0F);
                 world.setBlockAndUpdate(pos, CandleCakeBlock.byCandle(block));
-                world.gameEvent((Entity) player, GameEvent.BLOCK_CHANGE, pos);
+                world.gameEvent(player, GameEvent.BLOCK_CHANGE, pos);
                 player.awardStat(Stats.ITEM_USED.get(item));
                 return InteractionResult.SUCCESS;
             }
@@ -97,14 +97,14 @@ public class CakeBlock extends Block {
 
             ((net.minecraft.server.level.ServerPlayer) player).getBukkitEntity().sendHealthUpdate();
             // CraftBukkit end
-            int i = ((Integer) state.getValue(CakeBlock.BITES)).intValue();
+            int i = state.getValue(CakeBlock.BITES).intValue();
 
-            world.gameEvent((Entity) player, GameEvent.EAT, pos);
+            world.gameEvent(player, GameEvent.EAT, pos);
             if (i < 6) {
-                world.setBlock(pos, (BlockState) state.setValue(CakeBlock.BITES, Integer.valueOf(i + 1)), 3);
+                world.setBlock(pos, state.setValue(CakeBlock.BITES, Integer.valueOf(i + 1)), 3);
             } else {
                 world.removeBlock(pos, false);
-                world.gameEvent((Entity) player, GameEvent.BLOCK_DESTROY, pos);
+                world.gameEvent(player, GameEvent.BLOCK_DESTROY, pos);
             }
 
             return InteractionResult.SUCCESS;
@@ -128,7 +128,7 @@ public class CakeBlock extends Block {
 
     @Override
     public int getAnalogOutputSignal(BlockState state, Level world, BlockPos pos) {
-        return CakeBlock.getOutputSignal(((Integer) state.getValue(CakeBlock.BITES)).intValue());
+        return CakeBlock.getOutputSignal(state.getValue(CakeBlock.BITES).intValue());
     }
 
     public static int getOutputSignal(int bites) {
diff --git a/src/main/java/net/minecraft/world/level/block/CampfireBlock.java b/src/main/java/net/minecraft/world/level/block/CampfireBlock.java
index b8bf7232fa57ed0783ead726bfc9fd5011dc8258..1543e0a2e5508e1b4d0bc9d3de716ba349d61a34 100644
--- a/src/main/java/net/minecraft/world/level/block/CampfireBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/CampfireBlock.java
@@ -66,7 +66,7 @@ public class CampfireBlock extends BaseEntityBlock implements SimpleWaterloggedB
         super(settings);
         this.spawnParticles = emitsParticles;
         this.fireDamage = fireDamage;
-        this.registerDefaultState((BlockState) ((BlockState) ((BlockState) ((BlockState) ((BlockState) this.stateDefinition.any()).setValue(CampfireBlock.LIT, Boolean.TRUE)).setValue(CampfireBlock.SIGNAL_FIRE, Boolean.FALSE)).setValue(CampfireBlock.WATERLOGGED, Boolean.FALSE)).setValue(CampfireBlock.FACING, Direction.NORTH));
+        this.registerDefaultState(this.stateDefinition.any().setValue(CampfireBlock.LIT, Boolean.TRUE).setValue(CampfireBlock.SIGNAL_FIRE, Boolean.FALSE).setValue(CampfireBlock.WATERLOGGED, Boolean.FALSE).setValue(CampfireBlock.FACING, Direction.NORTH));
     }
 
     @Override
@@ -79,7 +79,7 @@ public class CampfireBlock extends BaseEntityBlock implements SimpleWaterloggedB
             Optional<CampfireCookingRecipe> optional = tileentitycampfire.getCookableRecipe(itemstack);
 
             if (optional.isPresent()) {
-                if (!world.isClientSide && tileentitycampfire.placeFood(player, player.getAbilities().instabuild ? itemstack.copy() : itemstack, ((CampfireCookingRecipe) optional.get()).getCookingTime())) {
+                if (!world.isClientSide && tileentitycampfire.placeFood(player, player.getAbilities().instabuild ? itemstack.copy() : itemstack, optional.get().getCookingTime())) {
                     player.awardStat(Stats.INTERACT_WITH_CAMPFIRE);
                     return InteractionResult.SUCCESS;
                 }
@@ -94,7 +94,7 @@ public class CampfireBlock extends BaseEntityBlock implements SimpleWaterloggedB
     @Override
     public void entityInside(BlockState state, Level world, BlockPos pos, Entity entity) {
         if (!new io.papermc.paper.event.entity.EntityInsideBlockEvent(entity.getBukkitEntity(), org.bukkit.craftbukkit.block.CraftBlock.at(world, pos)).callEvent()) { return; } // Paper
-        if (((Boolean) state.getValue(CampfireBlock.LIT)).booleanValue() && entity instanceof LivingEntity && !EnchantmentHelper.hasFrostWalker((LivingEntity) entity)) {
+        if (state.getValue(CampfireBlock.LIT).booleanValue() && entity instanceof LivingEntity && !EnchantmentHelper.hasFrostWalker((LivingEntity) entity)) {
             org.bukkit.craftbukkit.event.CraftEventFactory.blockDamage = CraftBlock.at(world, pos); // CraftBukkit
             entity.hurt(DamageSource.IN_FIRE, (float) this.fireDamage);
             org.bukkit.craftbukkit.event.CraftEventFactory.blockDamage = null; // CraftBukkit
@@ -123,16 +123,16 @@ public class CampfireBlock extends BaseEntityBlock implements SimpleWaterloggedB
         BlockPos blockposition = ctx.getClickedPos();
         boolean flag = world.getFluidState(blockposition).getType() == Fluids.WATER;
 
-        return (BlockState) ((BlockState) ((BlockState) ((BlockState) this.defaultBlockState().setValue(CampfireBlock.WATERLOGGED, Boolean.valueOf(flag))).setValue(CampfireBlock.SIGNAL_FIRE, Boolean.valueOf(this.isSmokeSource(world.getBlockState(blockposition.below()))))).setValue(CampfireBlock.LIT, Boolean.valueOf(!flag))).setValue(CampfireBlock.FACING, ctx.getHorizontalDirection());
+        return this.defaultBlockState().setValue(CampfireBlock.WATERLOGGED, Boolean.valueOf(flag)).setValue(CampfireBlock.SIGNAL_FIRE, Boolean.valueOf(this.isSmokeSource(world.getBlockState(blockposition.below())))).setValue(CampfireBlock.LIT, Boolean.valueOf(!flag)).setValue(CampfireBlock.FACING, ctx.getHorizontalDirection());
     }
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
-        if (((Boolean) state.getValue(CampfireBlock.WATERLOGGED)).booleanValue()) {
-            world.scheduleTick(pos, (Fluid) Fluids.WATER, Fluids.WATER.getTickDelay(world));
+        if (state.getValue(CampfireBlock.WATERLOGGED).booleanValue()) {
+            world.scheduleTick(pos, Fluids.WATER, Fluids.WATER.getTickDelay(world));
         }
 
-        return direction == Direction.DOWN ? (BlockState) state.setValue(CampfireBlock.SIGNAL_FIRE, Boolean.valueOf(this.isSmokeSource(neighborState))) : super.updateShape(state, direction, neighborState, world, pos, neighborPos);
+        return direction == Direction.DOWN ? state.setValue(CampfireBlock.SIGNAL_FIRE, Boolean.valueOf(this.isSmokeSource(neighborState))) : super.updateShape(state, direction, neighborState, world, pos, neighborPos);
     }
 
     private boolean isSmokeSource(BlockState state) {
@@ -151,14 +151,14 @@ public class CampfireBlock extends BaseEntityBlock implements SimpleWaterloggedB
 
     @Override
     public void animateTick(BlockState state, Level world, BlockPos pos, RandomSource random) {
-        if (((Boolean) state.getValue(CampfireBlock.LIT)).booleanValue()) {
+        if (state.getValue(CampfireBlock.LIT).booleanValue()) {
             if (random.nextInt(10) == 0) {
                 world.playLocalSound((double) pos.getX() + 0.5D, (double) pos.getY() + 0.5D, (double) pos.getZ() + 0.5D, SoundEvents.CAMPFIRE_CRACKLE, SoundSource.BLOCKS, 0.5F + random.nextFloat(), random.nextFloat() * 0.7F + 0.6F, false);
             }
 
             if (this.spawnParticles && random.nextInt(5) == 0) {
                 for (int i = 0; i < random.nextInt(1) + 1; ++i) {
-                    world.addParticle(ParticleTypes.LAVA, (double) pos.getX() + 0.5D, (double) pos.getY() + 0.5D, (double) pos.getZ() + 0.5D, (double) (random.nextFloat() / 2.0F), 5.0E-5D, (double) (random.nextFloat() / 2.0F));
+                    world.addParticle(ParticleTypes.LAVA, (double) pos.getX() + 0.5D, (double) pos.getY() + 0.5D, (double) pos.getZ() + 0.5D, random.nextFloat() / 2.0F, 5.0E-5D, random.nextFloat() / 2.0F);
                 }
             }
 
@@ -168,7 +168,7 @@ public class CampfireBlock extends BaseEntityBlock implements SimpleWaterloggedB
     public static void dowse(@Nullable Entity entity, LevelAccessor world, BlockPos pos, BlockState state) {
         if (world.isClientSide()) {
             for (int i = 0; i < 20; ++i) {
-                CampfireBlock.makeParticles((Level) world, pos, ((Boolean) state.getValue(CampfireBlock.SIGNAL_FIRE)).booleanValue(), true);
+                CampfireBlock.makeParticles((Level) world, pos, state.getValue(CampfireBlock.SIGNAL_FIRE).booleanValue(), true);
             }
         }
 
@@ -183,18 +183,18 @@ public class CampfireBlock extends BaseEntityBlock implements SimpleWaterloggedB
 
     @Override
     public boolean placeLiquid(LevelAccessor world, BlockPos pos, BlockState state, FluidState fluidState) {
-        if (!((Boolean) state.getValue(BlockStateProperties.WATERLOGGED)).booleanValue() && fluidState.getType() == Fluids.WATER) {
-            boolean flag = ((Boolean) state.getValue(CampfireBlock.LIT)).booleanValue();
+        if (!state.getValue(BlockStateProperties.WATERLOGGED).booleanValue() && fluidState.getType() == Fluids.WATER) {
+            boolean flag = state.getValue(CampfireBlock.LIT).booleanValue();
 
             if (flag) {
                 if (!world.isClientSide()) {
-                    world.playSound((Player) null, pos, SoundEvents.GENERIC_EXTINGUISH_FIRE, SoundSource.BLOCKS, 1.0F, 1.0F);
+                    world.playSound(null, pos, SoundEvents.GENERIC_EXTINGUISH_FIRE, SoundSource.BLOCKS, 1.0F, 1.0F);
                 }
 
-                CampfireBlock.dowse((Entity) null, world, pos, state);
+                CampfireBlock.dowse(null, world, pos, state);
             }
 
-            world.setBlock(pos, (BlockState) ((BlockState) state.setValue(CampfireBlock.WATERLOGGED, Boolean.TRUE)).setValue(CampfireBlock.LIT, Boolean.FALSE), 3);
+            world.setBlock(pos, state.setValue(CampfireBlock.WATERLOGGED, Boolean.TRUE).setValue(CampfireBlock.LIT, Boolean.FALSE), 3);
             world.scheduleTick(pos, fluidState.getType(), fluidState.getType().getTickDelay(world));
             return true;
         } else {
@@ -206,13 +206,13 @@ public class CampfireBlock extends BaseEntityBlock implements SimpleWaterloggedB
     public void onProjectileHit(Level world, BlockState state, BlockHitResult hit, Projectile projectile) {
         BlockPos blockposition = hit.getBlockPos();
 
-        if (!world.isClientSide && projectile.isOnFire() && projectile.mayInteract(world, blockposition) && !((Boolean) state.getValue(CampfireBlock.LIT)).booleanValue() && !((Boolean) state.getValue(CampfireBlock.WATERLOGGED)).booleanValue()) {
+        if (!world.isClientSide && projectile.isOnFire() && projectile.mayInteract(world, blockposition) && !state.getValue(CampfireBlock.LIT).booleanValue() && !state.getValue(CampfireBlock.WATERLOGGED).booleanValue()) {
             // CraftBukkit start
             if (org.bukkit.craftbukkit.event.CraftEventFactory.callBlockIgniteEvent(world, blockposition, projectile).isCancelled()) {
                 return;
             }
             // CraftBukkit end
-            world.setBlock(blockposition, (BlockState) state.setValue(BlockStateProperties.LIT, Boolean.TRUE), 11);
+            world.setBlock(blockposition, state.setValue(BlockStateProperties.LIT, Boolean.TRUE), 11);
         }
 
     }
@@ -250,22 +250,22 @@ public class CampfireBlock extends BaseEntityBlock implements SimpleWaterloggedB
     }
 
     public static boolean isLitCampfire(BlockState state) {
-        return state.hasProperty(CampfireBlock.LIT) && state.is(BlockTags.CAMPFIRES) && ((Boolean) state.getValue(CampfireBlock.LIT)).booleanValue();
+        return state.hasProperty(CampfireBlock.LIT) && state.is(BlockTags.CAMPFIRES) && state.getValue(CampfireBlock.LIT).booleanValue();
     }
 
     @Override
     public FluidState getFluidState(BlockState state) {
-        return ((Boolean) state.getValue(CampfireBlock.WATERLOGGED)).booleanValue() ? Fluids.WATER.getSource(false) : super.getFluidState(state);
+        return state.getValue(CampfireBlock.WATERLOGGED).booleanValue() ? Fluids.WATER.getSource(false) : super.getFluidState(state);
     }
 
     @Override
     public BlockState rotate(BlockState state, Rotation rotation) {
-        return (BlockState) state.setValue(CampfireBlock.FACING, rotation.rotate((Direction) state.getValue(CampfireBlock.FACING)));
+        return state.setValue(CampfireBlock.FACING, rotation.rotate(state.getValue(CampfireBlock.FACING)));
     }
 
     @Override
     public BlockState mirror(BlockState state, Mirror mirror) {
-        return state.rotate(mirror.getRotation((Direction) state.getValue(CampfireBlock.FACING)));
+        return state.rotate(mirror.getRotation(state.getValue(CampfireBlock.FACING)));
     }
 
     @Override
@@ -281,7 +281,7 @@ public class CampfireBlock extends BaseEntityBlock implements SimpleWaterloggedB
     @Nullable
     @Override
     public <T extends BlockEntity> BlockEntityTicker<T> getTicker(Level world, BlockState state, BlockEntityType<T> type) {
-        return world.isClientSide ? (((Boolean) state.getValue(CampfireBlock.LIT)).booleanValue() ? createTickerHelper(type, BlockEntityType.CAMPFIRE, CampfireBlockEntity::particleTick) : null) : (((Boolean) state.getValue(CampfireBlock.LIT)).booleanValue() ? createTickerHelper(type, BlockEntityType.CAMPFIRE, CampfireBlockEntity::cookTick) : createTickerHelper(type, BlockEntityType.CAMPFIRE, CampfireBlockEntity::cooldownTick));
+        return world.isClientSide ? (state.getValue(CampfireBlock.LIT).booleanValue() ? createTickerHelper(type, BlockEntityType.CAMPFIRE, CampfireBlockEntity::particleTick) : null) : (state.getValue(CampfireBlock.LIT).booleanValue() ? createTickerHelper(type, BlockEntityType.CAMPFIRE, CampfireBlockEntity::cookTick) : createTickerHelper(type, BlockEntityType.CAMPFIRE, CampfireBlockEntity::cooldownTick));
     }
 
     @Override
@@ -292,6 +292,6 @@ public class CampfireBlock extends BaseEntityBlock implements SimpleWaterloggedB
     public static boolean canLight(BlockState state) {
         return state.is(BlockTags.CAMPFIRES, (blockbase_blockdata) -> {
             return blockbase_blockdata.hasProperty(CampfireBlock.WATERLOGGED) && blockbase_blockdata.hasProperty(CampfireBlock.LIT);
-        }) && !((Boolean) state.getValue(CampfireBlock.WATERLOGGED)).booleanValue() && !((Boolean) state.getValue(CampfireBlock.LIT)).booleanValue();
+        }) && !state.getValue(CampfireBlock.WATERLOGGED).booleanValue() && !state.getValue(CampfireBlock.LIT).booleanValue();
     }
 }
diff --git a/src/main/java/net/minecraft/world/level/block/CarvedPumpkinBlock.java b/src/main/java/net/minecraft/world/level/block/CarvedPumpkinBlock.java
index f77dd9f9dc89d880386cc2da398cd7ec9c768c43..0d343da02699d83815b4eac2f2d5434928b007a3 100644
--- a/src/main/java/net/minecraft/world/level/block/CarvedPumpkinBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/CarvedPumpkinBlock.java
@@ -47,7 +47,7 @@ public class CarvedPumpkinBlock extends HorizontalDirectionalBlock implements We
 
     protected CarvedPumpkinBlock(BlockBehaviour.Properties settings) {
         super(settings);
-        this.registerDefaultState((BlockState) ((BlockState) this.stateDefinition.any()).setValue(CarvedPumpkinBlock.FACING, Direction.NORTH));
+        this.registerDefaultState(this.stateDefinition.any().setValue(CarvedPumpkinBlock.FACING, Direction.NORTH));
     }
 
     @Override
@@ -65,7 +65,7 @@ public class CarvedPumpkinBlock extends HorizontalDirectionalBlock implements We
         BlockPattern.BlockPatternMatch shapedetector_shapedetectorcollection = this.getOrCreateSnowGolemFull().find(world, pos);
 
         if (shapedetector_shapedetectorcollection != null) {
-            SnowGolem entitysnowman = (SnowGolem) EntityType.SNOW_GOLEM.create(world);
+            SnowGolem entitysnowman = EntityType.SNOW_GOLEM.create(world);
 
             if (entitysnowman != null) {
                 CarvedPumpkinBlock.spawnGolemInWorld(world, shapedetector_shapedetectorcollection, entitysnowman, shapedetector_shapedetectorcollection.getBlock(0, 2, 0).getPos());
@@ -74,7 +74,7 @@ public class CarvedPumpkinBlock extends HorizontalDirectionalBlock implements We
             BlockPattern.BlockPatternMatch shapedetector_shapedetectorcollection1 = this.getOrCreateIronGolemFull().find(world, pos);
 
             if (shapedetector_shapedetectorcollection1 != null) {
-                IronGolem entityirongolem = (IronGolem) EntityType.IRON_GOLEM.create(world);
+                IronGolem entityirongolem = EntityType.IRON_GOLEM.create(world);
 
                 if (entityirongolem != null) {
                     entityirongolem.setPlayerCreated(true);
@@ -140,7 +140,7 @@ public class CarvedPumpkinBlock extends HorizontalDirectionalBlock implements We
 
     @Override
     public BlockState getStateForPlacement(BlockPlaceContext ctx) {
-        return (BlockState) this.defaultBlockState().setValue(CarvedPumpkinBlock.FACING, ctx.getHorizontalDirection().getOpposite());
+        return this.defaultBlockState().setValue(CarvedPumpkinBlock.FACING, ctx.getHorizontalDirection().getOpposite());
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/CauldronBlock.java b/src/main/java/net/minecraft/world/level/block/CauldronBlock.java
index 46846ac9981e447fc6886aecf82563378a4f5548..8fd86195526689136a4950cf5bd6c5a466088ded 100644
--- a/src/main/java/net/minecraft/world/level/block/CauldronBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/CauldronBlock.java
@@ -41,14 +41,14 @@ public class CauldronBlock extends AbstractCauldronBlock {
                     return;
                 }
                 // Paper end
-                world.gameEvent((Entity) null, GameEvent.BLOCK_CHANGE, pos);
+                world.gameEvent(null, GameEvent.BLOCK_CHANGE, pos);
             } else if (precipitation == Biome.Precipitation.SNOW) {
                 // Paper start - call event for initial fill
                 if (!LayeredCauldronBlock.changeLevel(state, world, pos, Blocks.POWDER_SNOW_CAULDRON.defaultBlockState(), null, CauldronLevelChangeEvent.ChangeReason.NATURAL_FILL)) {
                     return;
                 }
                 // Paper end
-                world.gameEvent((Entity) null, GameEvent.BLOCK_CHANGE, pos);
+                world.gameEvent(null, GameEvent.BLOCK_CHANGE, pos);
             }
 
         }
diff --git a/src/main/java/net/minecraft/world/level/block/CaveVines.java b/src/main/java/net/minecraft/world/level/block/CaveVines.java
index bb0ce2e4f85c455f8ee6c9e6c6b5db998d91ce50..0b711d1c22f65380e499a10b8fe9564867e377f1 100644
--- a/src/main/java/net/minecraft/world/level/block/CaveVines.java
+++ b/src/main/java/net/minecraft/world/level/block/CaveVines.java
@@ -29,9 +29,9 @@ public interface CaveVines {
     BooleanProperty BERRIES = BlockStateProperties.BERRIES;
 
     static InteractionResult use(BlockState iblockdata, Level world, BlockPos blockposition, Entity entity) {
-        if (((Boolean) iblockdata.getValue(CaveVines.BERRIES)).booleanValue()) {
+        if (iblockdata.getValue(CaveVines.BERRIES).booleanValue()) {
             // CraftBukkit start
-            if (org.bukkit.craftbukkit.event.CraftEventFactory.callEntityChangeBlockEvent(entity, blockposition, (BlockState) iblockdata.setValue(CaveVines.BERRIES, Boolean.FALSE)).isCancelled()) {
+            if (org.bukkit.craftbukkit.event.CraftEventFactory.callEntityChangeBlockEvent(entity, blockposition, iblockdata.setValue(CaveVines.BERRIES, Boolean.FALSE)).isCancelled()) {
                 return InteractionResult.SUCCESS;
             }
 
@@ -50,8 +50,8 @@ public interface CaveVines {
 
             float f = Mth.randomBetween(world.random, 0.8F, 1.2F);
 
-            world.playSound((Player) null, blockposition, SoundEvents.CAVE_VINES_PICK_BERRIES, SoundSource.BLOCKS, 1.0F, f);
-            world.setBlock(blockposition, (BlockState) iblockdata.setValue(CaveVines.BERRIES, Boolean.FALSE), 2);
+            world.playSound(null, blockposition, SoundEvents.CAVE_VINES_PICK_BERRIES, SoundSource.BLOCKS, 1.0F, f);
+            world.setBlock(blockposition, iblockdata.setValue(CaveVines.BERRIES, Boolean.FALSE), 2);
             return InteractionResult.sidedSuccess(world.isClientSide);
         } else {
             return InteractionResult.PASS;
@@ -59,12 +59,12 @@ public interface CaveVines {
     }
 
     static boolean hasGlowBerries(BlockState state) {
-        return state.hasProperty(CaveVines.BERRIES) && ((Boolean) state.getValue(CaveVines.BERRIES)).booleanValue();
+        return state.hasProperty(CaveVines.BERRIES) && state.getValue(CaveVines.BERRIES).booleanValue();
     }
 
     static ToIntFunction<BlockState> emission(int luminance) {
         return (iblockdata) -> {
-            return ((Boolean) iblockdata.getValue(BlockStateProperties.BERRIES)).booleanValue() ? luminance : 0;
+            return iblockdata.getValue(BlockStateProperties.BERRIES).booleanValue() ? luminance : 0;
         };
     }
 }
diff --git a/src/main/java/net/minecraft/world/level/block/CaveVinesBlock.java b/src/main/java/net/minecraft/world/level/block/CaveVinesBlock.java
index 014d14039ec52f221bcc0320731c2d531815d9a6..2a7b611507e09b00600689b73046cc127789299a 100644
--- a/src/main/java/net/minecraft/world/level/block/CaveVinesBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/CaveVinesBlock.java
@@ -23,7 +23,7 @@ public class CaveVinesBlock extends GrowingPlantHeadBlock implements Bonemealabl
 
     public CaveVinesBlock(BlockBehaviour.Properties settings) {
         super(settings, Direction.DOWN, CaveVinesBlock.SHAPE, false, 0.1D);
-        this.registerDefaultState((BlockState) ((BlockState) ((BlockState) this.stateDefinition.any()).setValue(CaveVinesBlock.AGE, Integer.valueOf(0))).setValue(CaveVinesBlock.BERRIES, Boolean.FALSE));
+        this.registerDefaultState(this.stateDefinition.any().setValue(CaveVinesBlock.AGE, Integer.valueOf(0)).setValue(CaveVinesBlock.BERRIES, Boolean.FALSE));
     }
 
     @Override
@@ -43,7 +43,7 @@ public class CaveVinesBlock extends GrowingPlantHeadBlock implements Bonemealabl
 
     @Override
     protected BlockState updateBodyAfterConvertedFromHead(BlockState from, BlockState to) {
-        return (BlockState) to.setValue(CaveVinesBlock.BERRIES, (Boolean) from.getValue(CaveVinesBlock.BERRIES));
+        return to.setValue(CaveVinesBlock.BERRIES, from.getValue(CaveVinesBlock.BERRIES));
     }
 
     @Override
@@ -55,7 +55,7 @@ public class CaveVinesBlock extends GrowingPlantHeadBlock implements Bonemealabl
     @Override
     protected BlockState getGrowIntoState(BlockState state, RandomSource random, @javax.annotation.Nullable Level level) {
         final boolean value = random.nextFloat() < (level != null ? (0.11F * (level.spigotConfig.glowBerryModifier / 100.0F)) : 0.11F);
-        return (BlockState) super.getGrowIntoState(state, random).setValue(CaveVinesBlock.BERRIES, Boolean.valueOf(value));
+        return super.getGrowIntoState(state, random).setValue(CaveVinesBlock.BERRIES, Boolean.valueOf(value));
     }
     // Paper end
 
@@ -77,7 +77,7 @@ public class CaveVinesBlock extends GrowingPlantHeadBlock implements Bonemealabl
 
     @Override
     public boolean isValidBonemealTarget(LevelReader world, BlockPos pos, BlockState state, boolean isClient) {
-        return !((Boolean) state.getValue(CaveVinesBlock.BERRIES)).booleanValue();
+        return !state.getValue(CaveVinesBlock.BERRIES).booleanValue();
     }
 
     @Override
@@ -87,6 +87,6 @@ public class CaveVinesBlock extends GrowingPlantHeadBlock implements Bonemealabl
 
     @Override
     public void performBonemeal(ServerLevel world, RandomSource random, BlockPos pos, BlockState state) {
-        world.setBlock(pos, (BlockState) state.setValue(CaveVinesBlock.BERRIES, Boolean.TRUE), 2);
+        world.setBlock(pos, state.setValue(CaveVinesBlock.BERRIES, Boolean.TRUE), 2);
     }
 }
diff --git a/src/main/java/net/minecraft/world/level/block/CaveVinesPlantBlock.java b/src/main/java/net/minecraft/world/level/block/CaveVinesPlantBlock.java
index 89b3da7d1b9ea34bb04bb1f06b72f300178b6b1d..095f81a106604b1f9de62b7fc2852773e43d7c34 100644
--- a/src/main/java/net/minecraft/world/level/block/CaveVinesPlantBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/CaveVinesPlantBlock.java
@@ -21,7 +21,7 @@ public class CaveVinesPlantBlock extends GrowingPlantBodyBlock implements Boneme
 
     public CaveVinesPlantBlock(BlockBehaviour.Properties settings) {
         super(settings, Direction.DOWN, CaveVinesPlantBlock.SHAPE, false);
-        this.registerDefaultState((BlockState) ((BlockState) this.stateDefinition.any()).setValue(CaveVinesPlantBlock.BERRIES, Boolean.FALSE));
+        this.registerDefaultState(this.stateDefinition.any().setValue(CaveVinesPlantBlock.BERRIES, Boolean.FALSE));
     }
 
     @Override
@@ -31,7 +31,7 @@ public class CaveVinesPlantBlock extends GrowingPlantBodyBlock implements Boneme
 
     @Override
     protected BlockState updateHeadAfterConvertedFromBody(BlockState from, BlockState to) {
-        return (BlockState) to.setValue(CaveVinesPlantBlock.BERRIES, (Boolean) from.getValue(CaveVinesPlantBlock.BERRIES));
+        return to.setValue(CaveVinesPlantBlock.BERRIES, from.getValue(CaveVinesPlantBlock.BERRIES));
     }
 
     @Override
@@ -51,7 +51,7 @@ public class CaveVinesPlantBlock extends GrowingPlantBodyBlock implements Boneme
 
     @Override
     public boolean isValidBonemealTarget(LevelReader world, BlockPos pos, BlockState state, boolean isClient) {
-        return !((Boolean) state.getValue(CaveVinesPlantBlock.BERRIES)).booleanValue();
+        return !state.getValue(CaveVinesPlantBlock.BERRIES).booleanValue();
     }
 
     @Override
@@ -61,6 +61,6 @@ public class CaveVinesPlantBlock extends GrowingPlantBodyBlock implements Boneme
 
     @Override
     public void performBonemeal(ServerLevel world, RandomSource random, BlockPos pos, BlockState state) {
-        world.setBlock(pos, (BlockState) state.setValue(CaveVinesPlantBlock.BERRIES, Boolean.TRUE), 2);
+        world.setBlock(pos, state.setValue(CaveVinesPlantBlock.BERRIES, Boolean.TRUE), 2);
     }
 }
diff --git a/src/main/java/net/minecraft/world/level/block/ChestBlock.java b/src/main/java/net/minecraft/world/level/block/ChestBlock.java
index 4f8d6cb5bad0ec61900b34f65945cabaf5cffcff..adb1a6638a2bd6d551faddced26b53f709dc6591 100644
--- a/src/main/java/net/minecraft/world/level/block/ChestBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/ChestBlock.java
@@ -127,18 +127,18 @@ public class ChestBlock extends AbstractChestBlock<ChestBlockEntity> implements
 
         @Override
         public Component getDisplayName() {
-            return (Component) (this.tileentitychest.hasCustomName() ? this.tileentitychest.getDisplayName() : (this.tileentitychest1.hasCustomName() ? this.tileentitychest1.getDisplayName() : Component.translatable("container.chestDouble")));
+            return this.tileentitychest.hasCustomName() ? this.tileentitychest.getDisplayName() : (this.tileentitychest1.hasCustomName() ? this.tileentitychest1.getDisplayName() : Component.translatable("container.chestDouble"));
         }
     };
     // CraftBukkit end
 
     protected ChestBlock(BlockBehaviour.Properties settings, Supplier<BlockEntityType<? extends ChestBlockEntity>> entityTypeSupplier) {
         super(settings, entityTypeSupplier);
-        this.registerDefaultState((BlockState) ((BlockState) ((BlockState) ((BlockState) this.stateDefinition.any()).setValue(ChestBlock.FACING, Direction.NORTH)).setValue(ChestBlock.TYPE, ChestType.SINGLE)).setValue(ChestBlock.WATERLOGGED, Boolean.FALSE));
+        this.registerDefaultState(this.stateDefinition.any().setValue(ChestBlock.FACING, Direction.NORTH).setValue(ChestBlock.TYPE, ChestType.SINGLE).setValue(ChestBlock.WATERLOGGED, Boolean.FALSE));
     }
 
     public static DoubleBlockCombiner.BlockType getBlockType(BlockState state) {
-        ChestType blockpropertychesttype = (ChestType) state.getValue(ChestBlock.TYPE);
+        ChestType blockpropertychesttype = state.getValue(ChestBlock.TYPE);
 
         return blockpropertychesttype == ChestType.SINGLE ? DoubleBlockCombiner.BlockType.SINGLE : (blockpropertychesttype == ChestType.RIGHT ? DoubleBlockCombiner.BlockType.FIRST : DoubleBlockCombiner.BlockType.SECOND);
     }
@@ -150,18 +150,18 @@ public class ChestBlock extends AbstractChestBlock<ChestBlockEntity> implements
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
-        if (((Boolean) state.getValue(ChestBlock.WATERLOGGED)).booleanValue()) {
-            world.scheduleTick(pos, (Fluid) Fluids.WATER, Fluids.WATER.getTickDelay(world));
+        if (state.getValue(ChestBlock.WATERLOGGED).booleanValue()) {
+            world.scheduleTick(pos, Fluids.WATER, Fluids.WATER.getTickDelay(world));
         }
 
-        if (neighborState.is((Block) this) && direction.getAxis().isHorizontal()) {
-            ChestType blockpropertychesttype = (ChestType) neighborState.getValue(ChestBlock.TYPE);
+        if (neighborState.is(this) && direction.getAxis().isHorizontal()) {
+            ChestType blockpropertychesttype = neighborState.getValue(ChestBlock.TYPE);
 
             if (state.getValue(ChestBlock.TYPE) == ChestType.SINGLE && blockpropertychesttype != ChestType.SINGLE && state.getValue(ChestBlock.FACING) == neighborState.getValue(ChestBlock.FACING) && ChestBlock.getConnectedDirection(neighborState) == direction.getOpposite()) {
-                return (BlockState) state.setValue(ChestBlock.TYPE, blockpropertychesttype.getOpposite());
+                return state.setValue(ChestBlock.TYPE, blockpropertychesttype.getOpposite());
             }
         } else if (ChestBlock.getConnectedDirection(state) == direction) {
-            return (BlockState) state.setValue(ChestBlock.TYPE, ChestType.SINGLE);
+            return state.setValue(ChestBlock.TYPE, ChestType.SINGLE);
         }
 
         return super.updateShape(state, direction, neighborState, world, pos, neighborPos);
@@ -187,7 +187,7 @@ public class ChestBlock extends AbstractChestBlock<ChestBlockEntity> implements
     }
 
     public static Direction getConnectedDirection(BlockState state) {
-        Direction enumdirection = (Direction) state.getValue(ChestBlock.FACING);
+        Direction enumdirection = state.getValue(ChestBlock.FACING);
 
         return state.getValue(ChestBlock.TYPE) == ChestType.LEFT ? enumdirection.getClockWise() : enumdirection.getCounterClockWise();
     }
@@ -217,19 +217,19 @@ public class ChestBlock extends AbstractChestBlock<ChestBlockEntity> implements
             }
         }
 
-        return (BlockState) ((BlockState) ((BlockState) this.defaultBlockState().setValue(ChestBlock.FACING, enumdirection)).setValue(ChestBlock.TYPE, blockpropertychesttype)).setValue(ChestBlock.WATERLOGGED, Boolean.valueOf(fluid.getType() == Fluids.WATER));
+        return this.defaultBlockState().setValue(ChestBlock.FACING, enumdirection).setValue(ChestBlock.TYPE, blockpropertychesttype).setValue(ChestBlock.WATERLOGGED, Boolean.valueOf(fluid.getType() == Fluids.WATER));
     }
 
     @Override
     public FluidState getFluidState(BlockState state) {
-        return ((Boolean) state.getValue(ChestBlock.WATERLOGGED)).booleanValue() ? Fluids.WATER.getSource(false) : super.getFluidState(state);
+        return state.getValue(ChestBlock.WATERLOGGED).booleanValue() ? Fluids.WATER.getSource(false) : super.getFluidState(state);
     }
 
     @Nullable
     private Direction candidatePartnerFacing(BlockPlaceContext ctx, Direction dir) {
         BlockState iblockdata = ctx.getLevel().getBlockState(ctx.getClickedPos().relative(dir));
 
-        return iblockdata.is((Block) this) && iblockdata.getValue(ChestBlock.TYPE) == ChestType.SINGLE ? (Direction) iblockdata.getValue(ChestBlock.FACING) : null;
+        return iblockdata.is(this) && iblockdata.getValue(ChestBlock.TYPE) == ChestType.SINGLE ? iblockdata.getValue(ChestBlock.FACING) : null;
     }
 
     @Override
@@ -280,12 +280,12 @@ public class ChestBlock extends AbstractChestBlock<ChestBlockEntity> implements
     }
 
     public BlockEntityType<? extends ChestBlockEntity> blockEntityType() {
-        return (BlockEntityType) this.blockEntityType.get();
+        return this.blockEntityType.get();
     }
 
     @Nullable
     public static Container getContainer(ChestBlock block, BlockState state, Level world, BlockPos pos, boolean ignoreBlocked) {
-        return (Container) ((Optional) block.combine(state, world, pos, ignoreBlocked).apply(ChestBlock.CHEST_COMBINER)).orElse((Object) null);
+        return (Container) ((Optional) block.combine(state, world, pos, ignoreBlocked).apply(ChestBlock.CHEST_COMBINER)).orElse(null);
     }
 
     @Override
@@ -312,7 +312,7 @@ public class ChestBlock extends AbstractChestBlock<ChestBlockEntity> implements
 
     @Nullable
     public MenuProvider getMenuProvider(BlockState iblockdata, Level world, BlockPos blockposition, boolean ignoreObstructions) {
-        return (MenuProvider) ((Optional) this.combine(iblockdata, world, blockposition, ignoreObstructions).apply(ChestBlock.MENU_PROVIDER_COMBINER)).orElse((Object) null);
+        return (MenuProvider) ((Optional) this.combine(iblockdata, world, blockposition, ignoreObstructions).apply(ChestBlock.MENU_PROVIDER_COMBINER)).orElse(null);
         // CraftBukkit end
     }
 
@@ -366,7 +366,7 @@ public class ChestBlock extends AbstractChestBlock<ChestBlockEntity> implements
             return false;
         }
         // Paper end
-        List<Cat> list = world.getEntitiesOfClass(Cat.class, new AABB((double) pos.getX(), (double) (pos.getY() + 1), (double) pos.getZ(), (double) (pos.getX() + 1), (double) (pos.getY() + 2), (double) (pos.getZ() + 1)));
+        List<Cat> list = world.getEntitiesOfClass(Cat.class, new AABB(pos.getX(), pos.getY() + 1, pos.getZ(), pos.getX() + 1, pos.getY() + 2, pos.getZ() + 1));
 
         if (!list.isEmpty()) {
             Iterator iterator = list.iterator();
@@ -395,12 +395,12 @@ public class ChestBlock extends AbstractChestBlock<ChestBlockEntity> implements
 
     @Override
     public BlockState rotate(BlockState state, Rotation rotation) {
-        return (BlockState) state.setValue(ChestBlock.FACING, rotation.rotate((Direction) state.getValue(ChestBlock.FACING)));
+        return state.setValue(ChestBlock.FACING, rotation.rotate(state.getValue(ChestBlock.FACING)));
     }
 
     @Override
     public BlockState mirror(BlockState state, Mirror mirror) {
-        return state.rotate(mirror.getRotation((Direction) state.getValue(ChestBlock.FACING)));
+        return state.rotate(mirror.getRotation(state.getValue(ChestBlock.FACING)));
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/ChorusFlowerBlock.java b/src/main/java/net/minecraft/world/level/block/ChorusFlowerBlock.java
index 83694b3963b3bc0392f9240128e76740c01d3950..32d6a1dc0cfd70f2336fb09a4f2d99d7d72adfeb 100644
--- a/src/main/java/net/minecraft/world/level/block/ChorusFlowerBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/ChorusFlowerBlock.java
@@ -28,7 +28,7 @@ public class ChorusFlowerBlock extends Block {
     protected ChorusFlowerBlock(ChorusPlantBlock plantBlock, BlockBehaviour.Properties settings) {
         super(settings);
         this.plant = plantBlock;
-        this.registerDefaultState((BlockState) ((BlockState) this.stateDefinition.any()).setValue(ChorusFlowerBlock.AGE, Integer.valueOf(0)));
+        this.registerDefaultState(this.stateDefinition.any().setValue(ChorusFlowerBlock.AGE, Integer.valueOf(0)));
     }
 
     @Override
@@ -41,7 +41,7 @@ public class ChorusFlowerBlock extends Block {
 
     @Override
     public boolean isRandomlyTicking(BlockState state) {
-        return ((Integer) state.getValue(ChorusFlowerBlock.AGE)).intValue() < 5;
+        return state.getValue(ChorusFlowerBlock.AGE).intValue() < 5;
     }
 
     @Override
@@ -49,7 +49,7 @@ public class ChorusFlowerBlock extends Block {
         BlockPos blockposition1 = pos.above();
 
         if (world.isEmptyBlock(blockposition1) && blockposition1.getY() < world.getMaxBuildHeight()) {
-            int i = ((Integer) state.getValue(ChorusFlowerBlock.AGE)).intValue();
+            int i = state.getValue(ChorusFlowerBlock.AGE).intValue();
 
             if (i < 5) {
                 boolean flag = false;
@@ -59,13 +59,13 @@ public class ChorusFlowerBlock extends Block {
 
                 if (iblockdata1.is(Blocks.END_STONE)) {
                     flag = true;
-                } else if (iblockdata1.is((Block) this.plant)) {
+                } else if (iblockdata1.is(this.plant)) {
                     j = 1;
 
                     for (int k = 0; k < 4; ++k) {
                         BlockState iblockdata2 = world.getBlockState(pos.below(j + 1));
 
-                        if (!iblockdata2.is((Block) this.plant)) {
+                        if (!iblockdata2.is(this.plant)) {
                             if (iblockdata2.is(Blocks.END_STONE)) {
                                 flag1 = true;
                             }
@@ -82,7 +82,7 @@ public class ChorusFlowerBlock extends Block {
                     flag = true;
                 }
 
-                if (flag && ChorusFlowerBlock.allNeighborsEmpty(world, blockposition1, (Direction) null) && world.isEmptyBlock(pos.above(2))) {
+                if (flag && ChorusFlowerBlock.allNeighborsEmpty(world, blockposition1, null) && world.isEmptyBlock(pos.above(2))) {
                     // CraftBukkit start - add event
                     if (CraftEventFactory.handleBlockSpreadEvent(world, pos, blockposition1, this.defaultBlockState().setValue(ChorusFlowerBlock.AGE, Integer.valueOf(i)), 2)) {
                         world.setBlock(pos, this.plant.getStateForPlacement(world, pos), 2);
@@ -133,12 +133,12 @@ public class ChorusFlowerBlock extends Block {
     }
 
     private void placeGrownFlower(Level world, BlockPos pos, int age) {
-        world.setBlock(pos, (BlockState) this.defaultBlockState().setValue(ChorusFlowerBlock.AGE, Integer.valueOf(age)), 2);
+        world.setBlock(pos, this.defaultBlockState().setValue(ChorusFlowerBlock.AGE, Integer.valueOf(age)), 2);
         world.levelEvent(1033, pos, 0);
     }
 
     private void placeDeadFlower(Level world, BlockPos pos) {
-        world.setBlock(pos, (BlockState) this.defaultBlockState().setValue(ChorusFlowerBlock.AGE, Integer.valueOf(5)), 2);
+        world.setBlock(pos, this.defaultBlockState().setValue(ChorusFlowerBlock.AGE, Integer.valueOf(5)), 2);
         world.levelEvent(1034, pos, 0);
     }
 
@@ -161,7 +161,7 @@ public class ChorusFlowerBlock extends Block {
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
         if (direction != Direction.UP && !state.canSurvive(world, pos)) {
-            world.scheduleTick(pos, (Block) this, 1);
+            world.scheduleTick(pos, this, 1);
         }
 
         return super.updateShape(state, direction, neighborState, world, pos, neighborPos);
@@ -171,7 +171,7 @@ public class ChorusFlowerBlock extends Block {
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
         BlockState iblockdata1 = world.getBlockState(pos.below());
 
-        if (!iblockdata1.is((Block) this.plant) && !iblockdata1.is(Blocks.END_STONE)) {
+        if (!iblockdata1.is(this.plant) && !iblockdata1.is(Blocks.END_STONE)) {
             if (!iblockdata1.isAir()) {
                 return false;
             } else {
@@ -182,7 +182,7 @@ public class ChorusFlowerBlock extends Block {
                     Direction enumdirection = (Direction) iterator.next();
                     BlockState iblockdata2 = world.getBlockState(pos.relative(enumdirection));
 
-                    if (iblockdata2.is((Block) this.plant)) {
+                    if (iblockdata2.is(this.plant)) {
                         if (flag) {
                             return false;
                         }
@@ -221,7 +221,7 @@ public class ChorusFlowerBlock extends Block {
         for (int l = 0; l < k; ++l) {
             BlockPos blockposition2 = pos.above(l + 1);
 
-            if (!ChorusFlowerBlock.allNeighborsEmpty(world, blockposition2, (Direction) null)) {
+            if (!ChorusFlowerBlock.allNeighborsEmpty(world, blockposition2, null)) {
                 return;
             }
 
@@ -252,7 +252,7 @@ public class ChorusFlowerBlock extends Block {
         }
 
         if (!flag) {
-            world.setBlock(pos.above(k), (BlockState) Blocks.CHORUS_FLOWER.defaultBlockState().setValue(ChorusFlowerBlock.AGE, Integer.valueOf(5)), 2);
+            world.setBlock(pos.above(k), Blocks.CHORUS_FLOWER.defaultBlockState().setValue(ChorusFlowerBlock.AGE, Integer.valueOf(5)), 2);
         }
 
     }
diff --git a/src/main/java/net/minecraft/world/level/block/CocoaBlock.java b/src/main/java/net/minecraft/world/level/block/CocoaBlock.java
index 35c5d79c76299d7852f33f64cf8333a31a986a31..e90c0938ba0dfd0826db5db8567072d19c9a8838 100644
--- a/src/main/java/net/minecraft/world/level/block/CocoaBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/CocoaBlock.java
@@ -41,21 +41,21 @@ public class CocoaBlock extends HorizontalDirectionalBlock implements Bonemealab
 
     public CocoaBlock(BlockBehaviour.Properties settings) {
         super(settings);
-        this.registerDefaultState((BlockState) ((BlockState) ((BlockState) this.stateDefinition.any()).setValue(CocoaBlock.FACING, Direction.NORTH)).setValue(CocoaBlock.AGE, Integer.valueOf(0)));
+        this.registerDefaultState(this.stateDefinition.any().setValue(CocoaBlock.FACING, Direction.NORTH).setValue(CocoaBlock.AGE, Integer.valueOf(0)));
     }
 
     @Override
     public boolean isRandomlyTicking(BlockState state) {
-        return ((Integer) state.getValue(CocoaBlock.AGE)).intValue() < 2;
+        return state.getValue(CocoaBlock.AGE).intValue() < 2;
     }
 
     @Override
     public void randomTick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
         if (world.random.nextFloat() < (world.spigotConfig.cocoaModifier / (100.0f * 5))) { // Spigot - SPIGOT-7159: Better modifier resolution
-            int i = ((Integer) state.getValue(CocoaBlock.AGE)).intValue();
+            int i = state.getValue(CocoaBlock.AGE).intValue();
 
             if (i < 2) {
-                CraftEventFactory.handleBlockGrowEvent(world, pos, (BlockState) state.setValue(CocoaBlock.AGE, Integer.valueOf(i + 1)), 2); // CraftBukkkit
+                CraftEventFactory.handleBlockGrowEvent(world, pos, state.setValue(CocoaBlock.AGE, Integer.valueOf(i + 1)), 2); // CraftBukkkit
             }
         }
 
@@ -63,16 +63,16 @@ public class CocoaBlock extends HorizontalDirectionalBlock implements Bonemealab
 
     @Override
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
-        BlockState iblockdata1 = world.getBlockState(pos.relative((Direction) state.getValue(CocoaBlock.FACING)));
+        BlockState iblockdata1 = world.getBlockState(pos.relative(state.getValue(CocoaBlock.FACING)));
 
         return iblockdata1.is(BlockTags.JUNGLE_LOGS);
     }
 
     @Override
     public VoxelShape getShape(BlockState state, BlockGetter world, BlockPos pos, CollisionContext context) {
-        int i = ((Integer) state.getValue(CocoaBlock.AGE)).intValue();
+        int i = state.getValue(CocoaBlock.AGE).intValue();
 
-        switch ((Direction) state.getValue(CocoaBlock.FACING)) {
+        switch (state.getValue(CocoaBlock.FACING)) {
             case SOUTH:
                 return CocoaBlock.SOUTH_AABB[i];
             case NORTH:
@@ -98,7 +98,7 @@ public class CocoaBlock extends HorizontalDirectionalBlock implements Bonemealab
             Direction enumdirection = aenumdirection[j];
 
             if (enumdirection.getAxis().isHorizontal()) {
-                iblockdata = (BlockState) iblockdata.setValue(CocoaBlock.FACING, enumdirection);
+                iblockdata = iblockdata.setValue(CocoaBlock.FACING, enumdirection);
                 if (iblockdata.canSurvive(world, blockposition)) {
                     return iblockdata;
                 }
@@ -115,7 +115,7 @@ public class CocoaBlock extends HorizontalDirectionalBlock implements Bonemealab
 
     @Override
     public boolean isValidBonemealTarget(LevelReader world, BlockPos pos, BlockState state, boolean isClient) {
-        return ((Integer) state.getValue(CocoaBlock.AGE)).intValue() < 2;
+        return state.getValue(CocoaBlock.AGE).intValue() < 2;
     }
 
     @Override
@@ -125,7 +125,7 @@ public class CocoaBlock extends HorizontalDirectionalBlock implements Bonemealab
 
     @Override
     public void performBonemeal(ServerLevel world, RandomSource random, BlockPos pos, BlockState state) {
-        CraftEventFactory.handleBlockGrowEvent(world, pos, (BlockState) state.setValue(CocoaBlock.AGE, Integer.valueOf((Integer) state.getValue(CocoaBlock.AGE) + 1)), 2); // CraftBukkit
+        CraftEventFactory.handleBlockGrowEvent(world, pos, state.setValue(CocoaBlock.AGE, Integer.valueOf(state.getValue(CocoaBlock.AGE) + 1)), 2); // CraftBukkit
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/CommandBlock.java b/src/main/java/net/minecraft/world/level/block/CommandBlock.java
index 353849d430836448df6b89f84566213c7caea18f..2f9a42dce74cb784f006598248c9bb76665c4598 100644
--- a/src/main/java/net/minecraft/world/level/block/CommandBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/CommandBlock.java
@@ -38,7 +38,7 @@ public class CommandBlock extends BaseEntityBlock implements GameMasterBlock {
 
     public CommandBlock(BlockBehaviour.Properties settings, boolean auto) {
         super(settings);
-        this.registerDefaultState((BlockState) ((BlockState) ((BlockState) this.stateDefinition.any()).setValue(CommandBlock.FACING, Direction.NORTH)).setValue(CommandBlock.CONDITIONAL, Boolean.FALSE));
+        this.registerDefaultState(this.stateDefinition.any().setValue(CommandBlock.FACING, Direction.NORTH).setValue(CommandBlock.CONDITIONAL, Boolean.FALSE));
         this.automatic = auto;
     }
 
@@ -73,7 +73,7 @@ public class CommandBlock extends BaseEntityBlock implements GameMasterBlock {
                 if (!flag2 && !tileentitycommand.isAutomatic() && tileentitycommand.getMode() != CommandBlockEntity.Mode.SEQUENCE) {
                     if (flag1) {
                         tileentitycommand.markConditionMet();
-                        world.scheduleTick(pos, (Block) this, 1);
+                        world.scheduleTick(pos, this, 1);
                     }
 
                 }
@@ -101,7 +101,7 @@ public class CommandBlock extends BaseEntityBlock implements GameMasterBlock {
                 }
 
                 if (tileentitycommand.isPowered() || tileentitycommand.isAutomatic()) {
-                    world.scheduleTick(pos, (Block) this, 1);
+                    world.scheduleTick(pos, this, 1);
                 }
             } else if (tileentitycommand_type == CommandBlockEntity.Mode.REDSTONE) {
                 if (flag1) {
@@ -123,7 +123,7 @@ public class CommandBlock extends BaseEntityBlock implements GameMasterBlock {
             executor.setSuccessCount(0);
         }
 
-        CommandBlock.executeChain(world, pos, (Direction) state.getValue(CommandBlock.FACING));
+        CommandBlock.executeChain(world, pos, state.getValue(CommandBlock.FACING));
     }
 
     @Override
@@ -185,12 +185,12 @@ public class CommandBlock extends BaseEntityBlock implements GameMasterBlock {
 
     @Override
     public BlockState rotate(BlockState state, Rotation rotation) {
-        return (BlockState) state.setValue(CommandBlock.FACING, rotation.rotate((Direction) state.getValue(CommandBlock.FACING)));
+        return state.setValue(CommandBlock.FACING, rotation.rotate(state.getValue(CommandBlock.FACING)));
     }
 
     @Override
     public BlockState mirror(BlockState state, Mirror mirror) {
-        return state.rotate(mirror.getRotation((Direction) state.getValue(CommandBlock.FACING)));
+        return state.rotate(mirror.getRotation(state.getValue(CommandBlock.FACING)));
     }
 
     @Override
@@ -200,7 +200,7 @@ public class CommandBlock extends BaseEntityBlock implements GameMasterBlock {
 
     @Override
     public BlockState getStateForPlacement(BlockPlaceContext ctx) {
-        return (BlockState) this.defaultBlockState().setValue(CommandBlock.FACING, ctx.getNearestLookingDirection().getOpposite());
+        return this.defaultBlockState().setValue(CommandBlock.FACING, ctx.getNearestLookingDirection().getOpposite());
     }
 
     private static void executeChain(Level world, BlockPos pos, Direction facing) {
@@ -210,7 +210,7 @@ public class CommandBlock extends BaseEntityBlock implements GameMasterBlock {
         BlockState iblockdata;
         int i;
 
-        for (i = gamerules.getInt(GameRules.RULE_MAX_COMMAND_CHAIN_LENGTH); i-- > 0; facing = (Direction) iblockdata.getValue(CommandBlock.FACING)) {
+        for (i = gamerules.getInt(GameRules.RULE_MAX_COMMAND_CHAIN_LENGTH); i-- > 0; facing = iblockdata.getValue(CommandBlock.FACING)) {
             blockposition_mutableblockposition.move(facing);
             iblockdata = world.getBlockState(blockposition_mutableblockposition);
             Block block = iblockdata.getBlock();
diff --git a/src/main/java/net/minecraft/world/level/block/ComparatorBlock.java b/src/main/java/net/minecraft/world/level/block/ComparatorBlock.java
index 38c51ae620154d4a2313f1b5cbc3fc6f48b062f2..246832642599175e84fa4bc1c5ef8fddf44a8bc4 100644
--- a/src/main/java/net/minecraft/world/level/block/ComparatorBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/ComparatorBlock.java
@@ -33,7 +33,7 @@ public class ComparatorBlock extends DiodeBlock implements EntityBlock {
 
     public ComparatorBlock(BlockBehaviour.Properties settings) {
         super(settings);
-        this.registerDefaultState((BlockState) ((BlockState) ((BlockState) ((BlockState) this.stateDefinition.any()).setValue(ComparatorBlock.FACING, Direction.NORTH)).setValue(ComparatorBlock.POWERED, Boolean.FALSE)).setValue(ComparatorBlock.MODE, ComparatorMode.COMPARE));
+        this.registerDefaultState(this.stateDefinition.any().setValue(ComparatorBlock.FACING, Direction.NORTH).setValue(ComparatorBlock.POWERED, Boolean.FALSE).setValue(ComparatorBlock.MODE, ComparatorMode.COMPARE));
     }
 
     @Override
@@ -76,7 +76,7 @@ public class ComparatorBlock extends DiodeBlock implements EntityBlock {
     @Override
     protected int getInputSignal(Level world, BlockPos pos, BlockState state) {
         int i = super.getInputSignal(world, pos, state);
-        Direction enumdirection = (Direction) state.getValue(ComparatorBlock.FACING);
+        Direction enumdirection = state.getValue(ComparatorBlock.FACING);
         BlockPos blockposition1 = pos.relative(enumdirection);
         BlockState iblockdata1 = world.getBlockState(blockposition1);
 
@@ -99,11 +99,11 @@ public class ComparatorBlock extends DiodeBlock implements EntityBlock {
     @Nullable
     private ItemFrame getItemFrame(Level world, Direction facing, BlockPos pos) {
         // CraftBukkit - decompile error
-        List<ItemFrame> list = world.getEntitiesOfClass(ItemFrame.class, new AABB((double) pos.getX(), (double) pos.getY(), (double) pos.getZ(), (double) (pos.getX() + 1), (double) (pos.getY() + 1), (double) (pos.getZ() + 1)), (java.util.function.Predicate<ItemFrame>) (entityitemframe) -> {
+        List<ItemFrame> list = world.getEntitiesOfClass(ItemFrame.class, new AABB(pos.getX(), pos.getY(), pos.getZ(), pos.getX() + 1, pos.getY() + 1, pos.getZ() + 1), (entityitemframe) -> {
             return entityitemframe != null && entityitemframe.getDirection() == facing;
         });
 
-        return list.size() == 1 ? (ItemFrame) list.get(0) : null;
+        return list.size() == 1 ? list.get(0) : null;
     }
 
     @Override
@@ -111,7 +111,7 @@ public class ComparatorBlock extends DiodeBlock implements EntityBlock {
         if (!player.getAbilities().mayBuild) {
             return InteractionResult.PASS;
         } else {
-            state = (BlockState) state.cycle(ComparatorBlock.MODE);
+            state = state.cycle(ComparatorBlock.MODE);
             float f = state.getValue(ComparatorBlock.MODE) == ComparatorMode.SUBTRACT ? 0.55F : 0.5F;
 
             world.playSound(player, pos, SoundEvents.COMPARATOR_CLICK, SoundSource.BLOCKS, 0.3F, f);
@@ -128,10 +128,10 @@ public class ComparatorBlock extends DiodeBlock implements EntityBlock {
             BlockEntity tileentity = world.getBlockEntity(pos);
             int j = tileentity instanceof ComparatorBlockEntity ? ((ComparatorBlockEntity) tileentity).getOutputSignal() : 0;
 
-            if (i != j || ((Boolean) state.getValue(ComparatorBlock.POWERED)).booleanValue() != this.shouldTurnOn(world, pos, state)) {
+            if (i != j || state.getValue(ComparatorBlock.POWERED).booleanValue() != this.shouldTurnOn(world, pos, state)) {
                 TickPriority ticklistpriority = this.shouldPrioritize(world, pos, state) ? TickPriority.HIGH : TickPriority.NORMAL;
 
-                world.scheduleTick(pos, (Block) this, 2, ticklistpriority);
+                world.scheduleTick(pos, this, 2, ticklistpriority);
             }
 
         }
@@ -151,7 +151,7 @@ public class ComparatorBlock extends DiodeBlock implements EntityBlock {
 
         if (j != i || state.getValue(ComparatorBlock.MODE) == ComparatorMode.COMPARE) {
             boolean flag = this.shouldTurnOn(world, pos, state);
-            boolean flag1 = ((Boolean) state.getValue(ComparatorBlock.POWERED)).booleanValue();
+            boolean flag1 = state.getValue(ComparatorBlock.POWERED).booleanValue();
 
             if (flag1 && !flag) {
                 // CraftBukkit start
@@ -159,14 +159,14 @@ public class ComparatorBlock extends DiodeBlock implements EntityBlock {
                     return;
                 }
                 // CraftBukkit end
-                world.setBlock(pos, (BlockState) state.setValue(ComparatorBlock.POWERED, Boolean.FALSE), 2);
+                world.setBlock(pos, state.setValue(ComparatorBlock.POWERED, Boolean.FALSE), 2);
             } else if (!flag1 && flag) {
                 // CraftBukkit start
                 if (CraftEventFactory.callRedstoneChange(world, pos, 0, 15).getNewCurrent() != 15) {
                     return;
                 }
                 // CraftBukkit end
-                world.setBlock(pos, (BlockState) state.setValue(ComparatorBlock.POWERED, Boolean.TRUE), 2);
+                world.setBlock(pos, state.setValue(ComparatorBlock.POWERED, Boolean.TRUE), 2);
             }
 
             this.updateNeighborsInFront(world, pos, state);
diff --git a/src/main/java/net/minecraft/world/level/block/ComposterBlock.java b/src/main/java/net/minecraft/world/level/block/ComposterBlock.java
index 7a59b2f65a15d5122fb1e731c7f11cb856d2b70e..579d216e8e063a406d06ad847754dfad632b91f6 100644
--- a/src/main/java/net/minecraft/world/level/block/ComposterBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/ComposterBlock.java
@@ -51,9 +51,9 @@ public class ComposterBlock extends Block implements WorldlyContainerHolder {
     public static final Object2FloatMap<ItemLike> COMPOSTABLES = new Object2FloatOpenHashMap();
     private static final int AABB_SIDE_THICKNESS = 2;
     private static final VoxelShape OUTER_SHAPE = Shapes.block();
-    private static final VoxelShape[] SHAPES = (VoxelShape[]) Util.make(new VoxelShape[9], (avoxelshape) -> {
+    private static final VoxelShape[] SHAPES = Util.make(new VoxelShape[9], (avoxelshape) -> {
         for (int i = 0; i < 8; ++i) {
-            avoxelshape[i] = Shapes.join(ComposterBlock.OUTER_SHAPE, Block.box(2.0D, (double) Math.max(2, 1 + i * 2), 2.0D, 14.0D, 16.0D, 14.0D), BooleanOp.ONLY_FIRST);
+            avoxelshape[i] = Shapes.join(ComposterBlock.OUTER_SHAPE, Block.box(2.0D, Math.max(2, 1 + i * 2), 2.0D, 14.0D, 16.0D, 14.0D), BooleanOp.ONLY_FIRST);
         }
 
         avoxelshape[8] = avoxelshape[7];
@@ -169,7 +169,7 @@ public class ComposterBlock extends Block implements WorldlyContainerHolder {
 
     public ComposterBlock(BlockBehaviour.Properties settings) {
         super(settings);
-        this.registerDefaultState((BlockState) ((BlockState) this.stateDefinition.any()).setValue(ComposterBlock.LEVEL, Integer.valueOf(0)));
+        this.registerDefaultState(this.stateDefinition.any().setValue(ComposterBlock.LEVEL, Integer.valueOf(0)));
     }
 
     public static void handleFill(Level world, BlockPos pos, boolean fill) {
@@ -193,7 +193,7 @@ public class ComposterBlock extends Block implements WorldlyContainerHolder {
 
     @Override
     public VoxelShape getShape(BlockState state, BlockGetter world, BlockPos pos, CollisionContext context) {
-        return ComposterBlock.SHAPES[((Integer) state.getValue(ComposterBlock.LEVEL)).intValue()];
+        return ComposterBlock.SHAPES[state.getValue(ComposterBlock.LEVEL).intValue()];
     }
 
     @Override
@@ -208,7 +208,7 @@ public class ComposterBlock extends Block implements WorldlyContainerHolder {
 
     @Override
     public void onPlace(BlockState state, Level world, BlockPos pos, BlockState oldState, boolean notify) {
-        if (((Integer) state.getValue(ComposterBlock.LEVEL)).intValue() == 7) {
+        if (state.getValue(ComposterBlock.LEVEL).intValue() == 7) {
             world.scheduleTick(pos, state.getBlock(), 20);
         }
 
@@ -216,7 +216,7 @@ public class ComposterBlock extends Block implements WorldlyContainerHolder {
 
     @Override
     public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
-        int i = ((Integer) state.getValue(ComposterBlock.LEVEL)).intValue();
+        int i = state.getValue(ComposterBlock.LEVEL).intValue();
         ItemStack itemstack = player.getItemInHand(hand);
 
         if (i < 8 && ComposterBlock.COMPOSTABLES.containsKey(itemstack.getItem())) {
@@ -239,7 +239,7 @@ public class ComposterBlock extends Block implements WorldlyContainerHolder {
 
             return InteractionResult.sidedSuccess(world.isClientSide);
         } else if (i == 8) {
-            ComposterBlock.extractProduce(state, world, pos, (Entity) null); // CraftBukkit - no event for players
+            ComposterBlock.extractProduce(state, world, pos, null); // CraftBukkit - no event for players
             return InteractionResult.sidedSuccess(world.isClientSide);
         } else {
             return InteractionResult.PASS;
@@ -247,7 +247,7 @@ public class ComposterBlock extends Block implements WorldlyContainerHolder {
     }
 
     public static BlockState insertItem(BlockState iblockdata, ServerLevel worldserver, ItemStack itemstack, BlockPos blockposition, Entity entity) { // CraftBukkit
-        int i = ((Integer) iblockdata.getValue(ComposterBlock.LEVEL)).intValue();
+        int i = iblockdata.getValue(ComposterBlock.LEVEL).intValue();
 
         if (i < 7 && ComposterBlock.COMPOSTABLES.containsKey(itemstack.getItem())) {
             // CraftBukkit start
@@ -256,7 +256,7 @@ public class ComposterBlock extends Block implements WorldlyContainerHolder {
             if (iblockdata == iblockdata1 || org.bukkit.craftbukkit.event.CraftEventFactory.callEntityChangeBlockEvent(entity, blockposition, iblockdata1).isCancelled()) {
                 return iblockdata;
             }
-            iblockdata1 = ComposterBlock.addItem(iblockdata, (LevelAccessor) worldserver, blockposition, itemstack, rand);
+            iblockdata1 = ComposterBlock.addItem(iblockdata, worldserver, blockposition, itemstack, rand);
             // CraftBukkit end
 
             itemstack.shrink(1);
@@ -288,12 +288,12 @@ public class ComposterBlock extends Block implements WorldlyContainerHolder {
 
         BlockState iblockdata1 = ComposterBlock.empty(iblockdata, world, blockposition);
 
-        world.playSound((Player) null, blockposition, SoundEvents.COMPOSTER_EMPTY, SoundSource.BLOCKS, 1.0F, 1.0F);
+        world.playSound(null, blockposition, SoundEvents.COMPOSTER_EMPTY, SoundSource.BLOCKS, 1.0F, 1.0F);
         return iblockdata1;
     }
 
     static BlockState empty(BlockState state, LevelAccessor world, BlockPos pos) {
-        BlockState iblockdata1 = (BlockState) state.setValue(ComposterBlock.LEVEL, Integer.valueOf(0));
+        BlockState iblockdata1 = state.setValue(ComposterBlock.LEVEL, Integer.valueOf(0));
 
         world.setBlock(pos, iblockdata1, 3);
         return iblockdata1;
@@ -306,14 +306,14 @@ public class ComposterBlock extends Block implements WorldlyContainerHolder {
 
     static BlockState addItem(BlockState iblockdata, LevelAccessor generatoraccess, BlockPos blockposition, ItemStack itemstack, double rand) {
         // CraftBukkit end
-        int i = ((Integer) iblockdata.getValue(ComposterBlock.LEVEL)).intValue();
+        int i = iblockdata.getValue(ComposterBlock.LEVEL).intValue();
         float f = ComposterBlock.COMPOSTABLES.getFloat(itemstack.getItem());
 
         if ((i != 0 || f <= 0.0F) && rand >= (double) f) {
             return iblockdata;
         } else {
             int j = i + 1;
-            BlockState iblockdata1 = (BlockState) iblockdata.setValue(ComposterBlock.LEVEL, Integer.valueOf(j));
+            BlockState iblockdata1 = iblockdata.setValue(ComposterBlock.LEVEL, Integer.valueOf(j));
 
             generatoraccess.setBlock(blockposition, iblockdata1, 3);
             if (j == 7) {
@@ -326,9 +326,9 @@ public class ComposterBlock extends Block implements WorldlyContainerHolder {
 
     @Override
     public void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
-        if (((Integer) state.getValue(ComposterBlock.LEVEL)).intValue() == 7) {
-            world.setBlock(pos, (BlockState) state.cycle(ComposterBlock.LEVEL), 3);
-            world.playSound((Player) null, pos, SoundEvents.COMPOSTER_READY, SoundSource.BLOCKS, 1.0F, 1.0F);
+        if (state.getValue(ComposterBlock.LEVEL).intValue() == 7) {
+            world.setBlock(pos, state.cycle(ComposterBlock.LEVEL), 3);
+            world.playSound(null, pos, SoundEvents.COMPOSTER_READY, SoundSource.BLOCKS, 1.0F, 1.0F);
         }
 
     }
@@ -340,7 +340,7 @@ public class ComposterBlock extends Block implements WorldlyContainerHolder {
 
     @Override
     public int getAnalogOutputSignal(BlockState state, Level world, BlockPos pos) {
-        return ((Integer) state.getValue(ComposterBlock.LEVEL)).intValue();
+        return state.getValue(ComposterBlock.LEVEL).intValue();
     }
 
     @Override
@@ -355,10 +355,10 @@ public class ComposterBlock extends Block implements WorldlyContainerHolder {
 
     @Override
     public WorldlyContainer getContainer(BlockState state, LevelAccessor world, BlockPos pos) {
-        int i = ((Integer) state.getValue(ComposterBlock.LEVEL)).intValue();
+        int i = state.getValue(ComposterBlock.LEVEL).intValue();
 
         // CraftBukkit - empty generatoraccess, blockposition
-        return (WorldlyContainer) (i == 8 ? new ComposterBlock.OutputContainer(state, world, pos, new ItemStack(Items.BONE_MEAL)) : (i < 7 ? new ComposterBlock.InputContainer(state, world, pos) : new ComposterBlock.EmptyContainer(world, pos)));
+        return i == 8 ? new OutputContainer(state, world, pos, new ItemStack(Items.BONE_MEAL)) : (i < 7 ? new InputContainer(state, world, pos) : new EmptyContainer(world, pos));
     }
 
     public static class OutputContainer extends SimpleContainer implements WorldlyContainer {
diff --git a/src/main/java/net/minecraft/world/level/block/CoralBlock.java b/src/main/java/net/minecraft/world/level/block/CoralBlock.java
index 88faea00be60a519f56f975a5311df5e1eb3e6b8..50ef3408f984188252d4c7ee82f86255254673c9 100644
--- a/src/main/java/net/minecraft/world/level/block/CoralBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/CoralBlock.java
@@ -38,7 +38,7 @@ public class CoralBlock extends Block {
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
         if (!this.scanForWater(world, pos)) {
-            world.scheduleTick(pos, (Block) this, 60 + world.getRandom().nextInt(40));
+            world.scheduleTick(pos, this, 60 + world.getRandom().nextInt(40));
         }
 
         return super.updateShape(state, direction, neighborState, world, pos, neighborPos);
@@ -64,7 +64,7 @@ public class CoralBlock extends Block {
     @Override
     public BlockState getStateForPlacement(BlockPlaceContext ctx) {
         if (!this.scanForWater(ctx.getLevel(), ctx.getClickedPos())) {
-            ctx.getLevel().scheduleTick(ctx.getClickedPos(), (Block) this, 60 + ctx.getLevel().getRandom().nextInt(40));
+            ctx.getLevel().scheduleTick(ctx.getClickedPos(), this, 60 + ctx.getLevel().getRandom().nextInt(40));
         }
 
         return this.defaultBlockState();
diff --git a/src/main/java/net/minecraft/world/level/block/CoralFanBlock.java b/src/main/java/net/minecraft/world/level/block/CoralFanBlock.java
index 93b1edac9404c049f2b89faade5ad6fb25f3e97d..47a0e687207162cc8a835cb799e79675039c3136 100644
--- a/src/main/java/net/minecraft/world/level/block/CoralFanBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/CoralFanBlock.java
@@ -33,7 +33,7 @@ public class CoralFanBlock extends BaseCoralFanBlock {
                 return;
             }
             // CraftBukkit end
-            world.setBlock(pos, (BlockState) this.deadBlock.defaultBlockState().setValue(CoralFanBlock.WATERLOGGED, Boolean.FALSE), 2);
+            world.setBlock(pos, this.deadBlock.defaultBlockState().setValue(CoralFanBlock.WATERLOGGED, Boolean.FALSE), 2);
         }
 
     }
@@ -44,8 +44,8 @@ public class CoralFanBlock extends BaseCoralFanBlock {
             return Blocks.AIR.defaultBlockState();
         } else {
             this.tryScheduleDieTick(state, world, pos);
-            if (((Boolean) state.getValue(CoralFanBlock.WATERLOGGED)).booleanValue()) {
-                world.scheduleTick(pos, (Fluid) Fluids.WATER, Fluids.WATER.getTickDelay(world));
+            if (state.getValue(CoralFanBlock.WATERLOGGED).booleanValue()) {
+                world.scheduleTick(pos, Fluids.WATER, Fluids.WATER.getTickDelay(world));
             }
 
             return super.updateShape(state, direction, neighborState, world, pos, neighborPos);
diff --git a/src/main/java/net/minecraft/world/level/block/CoralPlantBlock.java b/src/main/java/net/minecraft/world/level/block/CoralPlantBlock.java
index b5b76f13dac411b91f710fbb6a19444bf469bffe..f70d5a227ba6688bac05d3cd74778248d2d961a8 100644
--- a/src/main/java/net/minecraft/world/level/block/CoralPlantBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/CoralPlantBlock.java
@@ -38,7 +38,7 @@ public class CoralPlantBlock extends BaseCoralPlantTypeBlock {
                 return;
             }
             // CraftBukkit end
-            world.setBlock(pos, (BlockState) this.deadBlock.defaultBlockState().setValue(CoralPlantBlock.WATERLOGGED, Boolean.FALSE), 2);
+            world.setBlock(pos, this.deadBlock.defaultBlockState().setValue(CoralPlantBlock.WATERLOGGED, Boolean.FALSE), 2);
         }
 
     }
@@ -49,8 +49,8 @@ public class CoralPlantBlock extends BaseCoralPlantTypeBlock {
             return Blocks.AIR.defaultBlockState();
         } else {
             this.tryScheduleDieTick(state, world, pos);
-            if (((Boolean) state.getValue(CoralPlantBlock.WATERLOGGED)).booleanValue()) {
-                world.scheduleTick(pos, (Fluid) Fluids.WATER, Fluids.WATER.getTickDelay(world));
+            if (state.getValue(CoralPlantBlock.WATERLOGGED).booleanValue()) {
+                world.scheduleTick(pos, Fluids.WATER, Fluids.WATER.getTickDelay(world));
             }
 
             return super.updateShape(state, direction, neighborState, world, pos, neighborPos);
diff --git a/src/main/java/net/minecraft/world/level/block/CoralWallFanBlock.java b/src/main/java/net/minecraft/world/level/block/CoralWallFanBlock.java
index 9e3ab5aa2530ffefa97fc490f4eed0469eaab249..789ce10b5a0631845573b6cb0005f49ca79cedcf 100644
--- a/src/main/java/net/minecraft/world/level/block/CoralWallFanBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/CoralWallFanBlock.java
@@ -33,7 +33,7 @@ public class CoralWallFanBlock extends BaseCoralWallFanBlock {
                 return;
             }
             // CraftBukkit end
-            world.setBlock(pos, (BlockState) ((BlockState) this.deadBlock.defaultBlockState().setValue(CoralWallFanBlock.WATERLOGGED, Boolean.FALSE)).setValue(CoralWallFanBlock.FACING, (Direction) state.getValue(CoralWallFanBlock.FACING)), 2);
+            world.setBlock(pos, this.deadBlock.defaultBlockState().setValue(CoralWallFanBlock.WATERLOGGED, Boolean.FALSE).setValue(CoralWallFanBlock.FACING, state.getValue(CoralWallFanBlock.FACING)), 2);
         }
 
     }
@@ -43,8 +43,8 @@ public class CoralWallFanBlock extends BaseCoralWallFanBlock {
         if (direction.getOpposite() == state.getValue(CoralWallFanBlock.FACING) && !state.canSurvive(world, pos)) {
             return Blocks.AIR.defaultBlockState();
         } else {
-            if (((Boolean) state.getValue(CoralWallFanBlock.WATERLOGGED)).booleanValue()) {
-                world.scheduleTick(pos, (Fluid) Fluids.WATER, Fluids.WATER.getTickDelay(world));
+            if (state.getValue(CoralWallFanBlock.WATERLOGGED).booleanValue()) {
+                world.scheduleTick(pos, Fluids.WATER, Fluids.WATER.getTickDelay(world));
             }
 
             this.tryScheduleDieTick(state, world, pos);
diff --git a/src/main/java/net/minecraft/world/level/block/CropBlock.java b/src/main/java/net/minecraft/world/level/block/CropBlock.java
index 9e76fd9a801d308bcf412ae1f7a11e505bf37562..accafbd0c0bdee4b9035ddf807df859551a71859 100644
--- a/src/main/java/net/minecraft/world/level/block/CropBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/CropBlock.java
@@ -30,12 +30,12 @@ public class CropBlock extends BushBlock implements BonemealableBlock {
 
     protected CropBlock(BlockBehaviour.Properties settings) {
         super(settings);
-        this.registerDefaultState((BlockState) ((BlockState) this.stateDefinition.any()).setValue(this.getAgeProperty(), Integer.valueOf(0)));
+        this.registerDefaultState(this.stateDefinition.any().setValue(this.getAgeProperty(), Integer.valueOf(0)));
     }
 
     @Override
     public VoxelShape getShape(BlockState state, BlockGetter world, BlockPos pos, CollisionContext context) {
-        return CropBlock.SHAPE_BY_AGE[((Integer) state.getValue(this.getAgeProperty())).intValue()];
+        return CropBlock.SHAPE_BY_AGE[state.getValue(this.getAgeProperty()).intValue()];
     }
 
     @Override
@@ -52,15 +52,15 @@ public class CropBlock extends BushBlock implements BonemealableBlock {
     }
 
     protected int getAge(BlockState state) {
-        return ((Integer) state.getValue(this.getAgeProperty())).intValue();
+        return state.getValue(this.getAgeProperty()).intValue();
     }
 
     public BlockState getStateForAge(int age) {
-        return (BlockState) this.defaultBlockState().setValue(this.getAgeProperty(), Integer.valueOf(age));
+        return this.defaultBlockState().setValue(this.getAgeProperty(), Integer.valueOf(age));
     }
 
     public boolean isMaxAge(BlockState state) {
-        return ((Integer) state.getValue(this.getAgeProperty())).intValue() >= this.getMaxAge();
+        return state.getValue(this.getAgeProperty()).intValue() >= this.getMaxAge();
     }
 
     @Override
@@ -123,7 +123,7 @@ public class CropBlock extends BushBlock implements BonemealableBlock {
 
                 if (iblockdata.is(Blocks.FARMLAND)) {
                     f1 = 1.0F;
-                    if (((Integer) iblockdata.getValue(FarmBlock.MOISTURE)).intValue() > 0) {
+                    if (iblockdata.getValue(FarmBlock.MOISTURE).intValue() > 0) {
                         f1 = 3.0F;
                     }
                 }
diff --git a/src/main/java/net/minecraft/world/level/block/DaylightDetectorBlock.java b/src/main/java/net/minecraft/world/level/block/DaylightDetectorBlock.java
index b5afc4e4b7618c2684a34a0ba115079da85786e2..bc2ec642fd2a7e81f6b9e5ea1ac602f8da59240b 100644
--- a/src/main/java/net/minecraft/world/level/block/DaylightDetectorBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/DaylightDetectorBlock.java
@@ -33,7 +33,7 @@ public class DaylightDetectorBlock extends BaseEntityBlock {
 
     public DaylightDetectorBlock(BlockBehaviour.Properties settings) {
         super(settings);
-        this.registerDefaultState((BlockState) ((BlockState) ((BlockState) this.stateDefinition.any()).setValue(DaylightDetectorBlock.POWER, Integer.valueOf(0))).setValue(DaylightDetectorBlock.INVERTED, Boolean.FALSE));
+        this.registerDefaultState(this.stateDefinition.any().setValue(DaylightDetectorBlock.POWER, Integer.valueOf(0)).setValue(DaylightDetectorBlock.INVERTED, Boolean.FALSE));
     }
 
     @Override
@@ -48,13 +48,13 @@ public class DaylightDetectorBlock extends BaseEntityBlock {
 
     @Override
     public int getSignal(BlockState state, BlockGetter world, BlockPos pos, Direction direction) {
-        return ((Integer) state.getValue(DaylightDetectorBlock.POWER)).intValue();
+        return state.getValue(DaylightDetectorBlock.POWER).intValue();
     }
 
     private static void updateSignalStrength(BlockState state, Level world, BlockPos pos) {
         int i = world.getBrightness(LightLayer.SKY, pos) - world.getSkyDarken();
         float f = world.getSunAngle(1.0F);
-        boolean flag = ((Boolean) state.getValue(DaylightDetectorBlock.INVERTED)).booleanValue();
+        boolean flag = state.getValue(DaylightDetectorBlock.INVERTED).booleanValue();
 
         if (flag) {
             i = 15 - i;
@@ -65,10 +65,10 @@ public class DaylightDetectorBlock extends BaseEntityBlock {
             i = Math.round((float) i * Mth.cos(f));
         }
 
-        i = Mth.clamp(i, (int) 0, (int) 15);
-        if (((Integer) state.getValue(DaylightDetectorBlock.POWER)).intValue() != i) {
-            i = org.bukkit.craftbukkit.event.CraftEventFactory.callRedstoneChange(world, pos, (((Integer) state.getValue(POWER)).intValue()), i).getNewCurrent(); // CraftBukkit - Call BlockRedstoneEvent
-            world.setBlock(pos, (BlockState) state.setValue(DaylightDetectorBlock.POWER, Integer.valueOf(i)), 3);
+        i = Mth.clamp(i, 0, 15);
+        if (state.getValue(DaylightDetectorBlock.POWER).intValue() != i) {
+            i = org.bukkit.craftbukkit.event.CraftEventFactory.callRedstoneChange(world, pos, (state.getValue(POWER).intValue()), i).getNewCurrent(); // CraftBukkit - Call BlockRedstoneEvent
+            world.setBlock(pos, state.setValue(DaylightDetectorBlock.POWER, Integer.valueOf(i)), 3);
         }
 
     }
@@ -79,7 +79,7 @@ public class DaylightDetectorBlock extends BaseEntityBlock {
             if (world.isClientSide) {
                 return InteractionResult.SUCCESS;
             } else {
-                BlockState iblockdata1 = (BlockState) state.cycle(DaylightDetectorBlock.INVERTED);
+                BlockState iblockdata1 = state.cycle(DaylightDetectorBlock.INVERTED);
 
                 world.setBlock(pos, iblockdata1, 4);
                 world.gameEvent(GameEvent.BLOCK_CHANGE, pos, GameEvent.Context.of(player, iblockdata1));
diff --git a/src/main/java/net/minecraft/world/level/block/DetectorRailBlock.java b/src/main/java/net/minecraft/world/level/block/DetectorRailBlock.java
index 9be0ae6b8a06b7088fe78bb7e057a70445cdcaa1..f2fcb775cfba01b759f19af69e77aa50cc2daf43 100644
--- a/src/main/java/net/minecraft/world/level/block/DetectorRailBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/DetectorRailBlock.java
@@ -34,7 +34,7 @@ public class DetectorRailBlock extends BaseRailBlock {
 
     public DetectorRailBlock(BlockBehaviour.Properties settings) {
         super(true, settings);
-        this.registerDefaultState((BlockState) ((BlockState) ((BlockState) ((BlockState) this.stateDefinition.any()).setValue(DetectorRailBlock.POWERED, Boolean.FALSE)).setValue(DetectorRailBlock.SHAPE, RailShape.NORTH_SOUTH)).setValue(DetectorRailBlock.WATERLOGGED, Boolean.FALSE));
+        this.registerDefaultState(this.stateDefinition.any().setValue(DetectorRailBlock.POWERED, Boolean.FALSE).setValue(DetectorRailBlock.SHAPE, RailShape.NORTH_SOUTH).setValue(DetectorRailBlock.WATERLOGGED, Boolean.FALSE));
     }
 
     @Override
@@ -46,7 +46,7 @@ public class DetectorRailBlock extends BaseRailBlock {
     public void entityInside(BlockState state, Level world, BlockPos pos, Entity entity) {
         if (!new io.papermc.paper.event.entity.EntityInsideBlockEvent(entity.getBukkitEntity(), org.bukkit.craftbukkit.block.CraftBlock.at(world, pos)).callEvent()) { return; } // Paper
         if (!world.isClientSide) {
-            if (!((Boolean) state.getValue(DetectorRailBlock.POWERED)).booleanValue()) {
+            if (!state.getValue(DetectorRailBlock.POWERED).booleanValue()) {
                 this.checkPressed(world, pos, state);
             }
         }
@@ -54,25 +54,25 @@ public class DetectorRailBlock extends BaseRailBlock {
 
     @Override
     public void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
-        if (((Boolean) state.getValue(DetectorRailBlock.POWERED)).booleanValue()) {
+        if (state.getValue(DetectorRailBlock.POWERED).booleanValue()) {
             this.checkPressed(world, pos, state);
         }
     }
 
     @Override
     public int getSignal(BlockState state, BlockGetter world, BlockPos pos, Direction direction) {
-        return ((Boolean) state.getValue(DetectorRailBlock.POWERED)).booleanValue() ? 15 : 0;
+        return state.getValue(DetectorRailBlock.POWERED).booleanValue() ? 15 : 0;
     }
 
     @Override
     public int getDirectSignal(BlockState state, BlockGetter world, BlockPos pos, Direction direction) {
-        return !((Boolean) state.getValue(DetectorRailBlock.POWERED)).booleanValue() ? 0 : (direction == Direction.UP ? 15 : 0);
+        return !state.getValue(DetectorRailBlock.POWERED).booleanValue() ? 0 : (direction == Direction.UP ? 15 : 0);
     }
 
     private void checkPressed(Level world, BlockPos pos, BlockState state) {
         if (this.canSurvive(state, world, pos)) {
             if (state.getBlock() != this) { return; } // Paper - not our block, don't do anything
-            boolean flag = ((Boolean) state.getValue(DetectorRailBlock.POWERED)).booleanValue();
+            boolean flag = state.getValue(DetectorRailBlock.POWERED).booleanValue();
             boolean flag1 = false;
             List<AbstractMinecart> list = this.getInteractingMinecartOfType(world, pos, AbstractMinecart.class, (entity) -> {
                 return true;
@@ -95,7 +95,7 @@ public class DetectorRailBlock extends BaseRailBlock {
             // CraftBukkit end
 
             if (flag1 && !flag) {
-                iblockdata1 = (BlockState) state.setValue(DetectorRailBlock.POWERED, Boolean.TRUE);
+                iblockdata1 = state.setValue(DetectorRailBlock.POWERED, Boolean.TRUE);
                 world.setBlock(pos, iblockdata1, 3);
                 this.updatePowerToConnected(world, pos, iblockdata1, true);
                 world.updateNeighborsAt(pos, this);
@@ -104,7 +104,7 @@ public class DetectorRailBlock extends BaseRailBlock {
             }
 
             if (!flag1 && flag) {
-                iblockdata1 = (BlockState) state.setValue(DetectorRailBlock.POWERED, Boolean.FALSE);
+                iblockdata1 = state.setValue(DetectorRailBlock.POWERED, Boolean.FALSE);
                 world.setBlock(pos, iblockdata1, 3);
                 this.updatePowerToConnected(world, pos, iblockdata1, false);
                 world.updateNeighborsAt(pos, this);
@@ -113,7 +113,7 @@ public class DetectorRailBlock extends BaseRailBlock {
             }
 
             if (flag1) {
-                world.scheduleTick(pos, (Block) this, 20);
+                world.scheduleTick(pos, this, 20);
             }
 
             world.updateNeighbourForOutputSignal(pos, this);
@@ -155,13 +155,13 @@ public class DetectorRailBlock extends BaseRailBlock {
 
     @Override
     public int getAnalogOutputSignal(BlockState state, Level world, BlockPos pos) {
-        if (((Boolean) state.getValue(DetectorRailBlock.POWERED)).booleanValue()) {
+        if (state.getValue(DetectorRailBlock.POWERED).booleanValue()) {
             List<MinecartCommandBlock> list = this.getInteractingMinecartOfType(world, pos, MinecartCommandBlock.class, (entity) -> {
                 return true;
             });
 
             if (!list.isEmpty()) {
-                return ((MinecartCommandBlock) list.get(0)).getCommandBlock().getSuccessCount();
+                return list.get(0).getCommandBlock().getSuccessCount();
             }
 
             List<AbstractMinecart> list1 = this.getInteractingMinecartOfType(world, pos, AbstractMinecart.class, EntitySelector.CONTAINER_ENTITY_SELECTOR);
@@ -181,76 +181,76 @@ public class DetectorRailBlock extends BaseRailBlock {
     private AABB getSearchBB(BlockPos pos) {
         double d0 = 0.2D;
 
-        return new AABB((double) pos.getX() + 0.2D, (double) pos.getY(), (double) pos.getZ() + 0.2D, (double) (pos.getX() + 1) - 0.2D, (double) (pos.getY() + 1) - 0.2D, (double) (pos.getZ() + 1) - 0.2D);
+        return new AABB((double) pos.getX() + 0.2D, pos.getY(), (double) pos.getZ() + 0.2D, (double) (pos.getX() + 1) - 0.2D, (double) (pos.getY() + 1) - 0.2D, (double) (pos.getZ() + 1) - 0.2D);
     }
 
     @Override
     public BlockState rotate(BlockState state, Rotation rotation) {
         switch (rotation) {
             case CLOCKWISE_180:
-                switch ((RailShape) state.getValue(DetectorRailBlock.SHAPE)) {
+                switch (state.getValue(DetectorRailBlock.SHAPE)) {
                     case ASCENDING_EAST:
-                        return (BlockState) state.setValue(DetectorRailBlock.SHAPE, RailShape.ASCENDING_WEST);
+                        return state.setValue(DetectorRailBlock.SHAPE, RailShape.ASCENDING_WEST);
                     case ASCENDING_WEST:
-                        return (BlockState) state.setValue(DetectorRailBlock.SHAPE, RailShape.ASCENDING_EAST);
+                        return state.setValue(DetectorRailBlock.SHAPE, RailShape.ASCENDING_EAST);
                     case ASCENDING_NORTH:
-                        return (BlockState) state.setValue(DetectorRailBlock.SHAPE, RailShape.ASCENDING_SOUTH);
+                        return state.setValue(DetectorRailBlock.SHAPE, RailShape.ASCENDING_SOUTH);
                     case ASCENDING_SOUTH:
-                        return (BlockState) state.setValue(DetectorRailBlock.SHAPE, RailShape.ASCENDING_NORTH);
+                        return state.setValue(DetectorRailBlock.SHAPE, RailShape.ASCENDING_NORTH);
                     case SOUTH_EAST:
-                        return (BlockState) state.setValue(DetectorRailBlock.SHAPE, RailShape.NORTH_WEST);
+                        return state.setValue(DetectorRailBlock.SHAPE, RailShape.NORTH_WEST);
                     case SOUTH_WEST:
-                        return (BlockState) state.setValue(DetectorRailBlock.SHAPE, RailShape.NORTH_EAST);
+                        return state.setValue(DetectorRailBlock.SHAPE, RailShape.NORTH_EAST);
                     case NORTH_WEST:
-                        return (BlockState) state.setValue(DetectorRailBlock.SHAPE, RailShape.SOUTH_EAST);
+                        return state.setValue(DetectorRailBlock.SHAPE, RailShape.SOUTH_EAST);
                     case NORTH_EAST:
-                        return (BlockState) state.setValue(DetectorRailBlock.SHAPE, RailShape.SOUTH_WEST);
+                        return state.setValue(DetectorRailBlock.SHAPE, RailShape.SOUTH_WEST);
                 }
             case COUNTERCLOCKWISE_90:
-                switch ((RailShape) state.getValue(DetectorRailBlock.SHAPE)) {
+                switch (state.getValue(DetectorRailBlock.SHAPE)) {
                     case ASCENDING_EAST:
-                        return (BlockState) state.setValue(DetectorRailBlock.SHAPE, RailShape.ASCENDING_NORTH);
+                        return state.setValue(DetectorRailBlock.SHAPE, RailShape.ASCENDING_NORTH);
                     case ASCENDING_WEST:
-                        return (BlockState) state.setValue(DetectorRailBlock.SHAPE, RailShape.ASCENDING_SOUTH);
+                        return state.setValue(DetectorRailBlock.SHAPE, RailShape.ASCENDING_SOUTH);
                     case ASCENDING_NORTH:
-                        return (BlockState) state.setValue(DetectorRailBlock.SHAPE, RailShape.ASCENDING_WEST);
+                        return state.setValue(DetectorRailBlock.SHAPE, RailShape.ASCENDING_WEST);
                     case ASCENDING_SOUTH:
-                        return (BlockState) state.setValue(DetectorRailBlock.SHAPE, RailShape.ASCENDING_EAST);
+                        return state.setValue(DetectorRailBlock.SHAPE, RailShape.ASCENDING_EAST);
                     case SOUTH_EAST:
-                        return (BlockState) state.setValue(DetectorRailBlock.SHAPE, RailShape.NORTH_EAST);
+                        return state.setValue(DetectorRailBlock.SHAPE, RailShape.NORTH_EAST);
                     case SOUTH_WEST:
-                        return (BlockState) state.setValue(DetectorRailBlock.SHAPE, RailShape.SOUTH_EAST);
+                        return state.setValue(DetectorRailBlock.SHAPE, RailShape.SOUTH_EAST);
                     case NORTH_WEST:
-                        return (BlockState) state.setValue(DetectorRailBlock.SHAPE, RailShape.SOUTH_WEST);
+                        return state.setValue(DetectorRailBlock.SHAPE, RailShape.SOUTH_WEST);
                     case NORTH_EAST:
-                        return (BlockState) state.setValue(DetectorRailBlock.SHAPE, RailShape.NORTH_WEST);
+                        return state.setValue(DetectorRailBlock.SHAPE, RailShape.NORTH_WEST);
                     case NORTH_SOUTH:
-                        return (BlockState) state.setValue(DetectorRailBlock.SHAPE, RailShape.EAST_WEST);
+                        return state.setValue(DetectorRailBlock.SHAPE, RailShape.EAST_WEST);
                     case EAST_WEST:
-                        return (BlockState) state.setValue(DetectorRailBlock.SHAPE, RailShape.NORTH_SOUTH);
+                        return state.setValue(DetectorRailBlock.SHAPE, RailShape.NORTH_SOUTH);
                 }
             case CLOCKWISE_90:
-                switch ((RailShape) state.getValue(DetectorRailBlock.SHAPE)) {
+                switch (state.getValue(DetectorRailBlock.SHAPE)) {
                     case ASCENDING_EAST:
-                        return (BlockState) state.setValue(DetectorRailBlock.SHAPE, RailShape.ASCENDING_SOUTH);
+                        return state.setValue(DetectorRailBlock.SHAPE, RailShape.ASCENDING_SOUTH);
                     case ASCENDING_WEST:
-                        return (BlockState) state.setValue(DetectorRailBlock.SHAPE, RailShape.ASCENDING_NORTH);
+                        return state.setValue(DetectorRailBlock.SHAPE, RailShape.ASCENDING_NORTH);
                     case ASCENDING_NORTH:
-                        return (BlockState) state.setValue(DetectorRailBlock.SHAPE, RailShape.ASCENDING_EAST);
+                        return state.setValue(DetectorRailBlock.SHAPE, RailShape.ASCENDING_EAST);
                     case ASCENDING_SOUTH:
-                        return (BlockState) state.setValue(DetectorRailBlock.SHAPE, RailShape.ASCENDING_WEST);
+                        return state.setValue(DetectorRailBlock.SHAPE, RailShape.ASCENDING_WEST);
                     case SOUTH_EAST:
-                        return (BlockState) state.setValue(DetectorRailBlock.SHAPE, RailShape.SOUTH_WEST);
+                        return state.setValue(DetectorRailBlock.SHAPE, RailShape.SOUTH_WEST);
                     case SOUTH_WEST:
-                        return (BlockState) state.setValue(DetectorRailBlock.SHAPE, RailShape.NORTH_WEST);
+                        return state.setValue(DetectorRailBlock.SHAPE, RailShape.NORTH_WEST);
                     case NORTH_WEST:
-                        return (BlockState) state.setValue(DetectorRailBlock.SHAPE, RailShape.NORTH_EAST);
+                        return state.setValue(DetectorRailBlock.SHAPE, RailShape.NORTH_EAST);
                     case NORTH_EAST:
-                        return (BlockState) state.setValue(DetectorRailBlock.SHAPE, RailShape.SOUTH_EAST);
+                        return state.setValue(DetectorRailBlock.SHAPE, RailShape.SOUTH_EAST);
                     case NORTH_SOUTH:
-                        return (BlockState) state.setValue(DetectorRailBlock.SHAPE, RailShape.EAST_WEST);
+                        return state.setValue(DetectorRailBlock.SHAPE, RailShape.EAST_WEST);
                     case EAST_WEST:
-                        return (BlockState) state.setValue(DetectorRailBlock.SHAPE, RailShape.NORTH_SOUTH);
+                        return state.setValue(DetectorRailBlock.SHAPE, RailShape.NORTH_SOUTH);
                 }
             default:
                 return state;
@@ -259,44 +259,44 @@ public class DetectorRailBlock extends BaseRailBlock {
 
     @Override
     public BlockState mirror(BlockState state, Mirror mirror) {
-        RailShape blockpropertytrackposition = (RailShape) state.getValue(DetectorRailBlock.SHAPE);
+        RailShape blockpropertytrackposition = state.getValue(DetectorRailBlock.SHAPE);
 
         switch (mirror) {
             case LEFT_RIGHT:
                 switch (blockpropertytrackposition) {
                     case ASCENDING_NORTH:
-                        return (BlockState) state.setValue(DetectorRailBlock.SHAPE, RailShape.ASCENDING_SOUTH);
+                        return state.setValue(DetectorRailBlock.SHAPE, RailShape.ASCENDING_SOUTH);
                     case ASCENDING_SOUTH:
-                        return (BlockState) state.setValue(DetectorRailBlock.SHAPE, RailShape.ASCENDING_NORTH);
+                        return state.setValue(DetectorRailBlock.SHAPE, RailShape.ASCENDING_NORTH);
                     case SOUTH_EAST:
-                        return (BlockState) state.setValue(DetectorRailBlock.SHAPE, RailShape.NORTH_EAST);
+                        return state.setValue(DetectorRailBlock.SHAPE, RailShape.NORTH_EAST);
                     case SOUTH_WEST:
-                        return (BlockState) state.setValue(DetectorRailBlock.SHAPE, RailShape.NORTH_WEST);
+                        return state.setValue(DetectorRailBlock.SHAPE, RailShape.NORTH_WEST);
                     case NORTH_WEST:
-                        return (BlockState) state.setValue(DetectorRailBlock.SHAPE, RailShape.SOUTH_WEST);
+                        return state.setValue(DetectorRailBlock.SHAPE, RailShape.SOUTH_WEST);
                     case NORTH_EAST:
-                        return (BlockState) state.setValue(DetectorRailBlock.SHAPE, RailShape.SOUTH_EAST);
+                        return state.setValue(DetectorRailBlock.SHAPE, RailShape.SOUTH_EAST);
                     default:
                         return super.mirror(state, mirror);
                 }
             case FRONT_BACK:
                 switch (blockpropertytrackposition) {
                     case ASCENDING_EAST:
-                        return (BlockState) state.setValue(DetectorRailBlock.SHAPE, RailShape.ASCENDING_WEST);
+                        return state.setValue(DetectorRailBlock.SHAPE, RailShape.ASCENDING_WEST);
                     case ASCENDING_WEST:
-                        return (BlockState) state.setValue(DetectorRailBlock.SHAPE, RailShape.ASCENDING_EAST);
+                        return state.setValue(DetectorRailBlock.SHAPE, RailShape.ASCENDING_EAST);
                     case ASCENDING_NORTH:
                     case ASCENDING_SOUTH:
                     default:
                         break;
                     case SOUTH_EAST:
-                        return (BlockState) state.setValue(DetectorRailBlock.SHAPE, RailShape.SOUTH_WEST);
+                        return state.setValue(DetectorRailBlock.SHAPE, RailShape.SOUTH_WEST);
                     case SOUTH_WEST:
-                        return (BlockState) state.setValue(DetectorRailBlock.SHAPE, RailShape.SOUTH_EAST);
+                        return state.setValue(DetectorRailBlock.SHAPE, RailShape.SOUTH_EAST);
                     case NORTH_WEST:
-                        return (BlockState) state.setValue(DetectorRailBlock.SHAPE, RailShape.NORTH_EAST);
+                        return state.setValue(DetectorRailBlock.SHAPE, RailShape.NORTH_EAST);
                     case NORTH_EAST:
-                        return (BlockState) state.setValue(DetectorRailBlock.SHAPE, RailShape.NORTH_WEST);
+                        return state.setValue(DetectorRailBlock.SHAPE, RailShape.NORTH_WEST);
                 }
         }
 
diff --git a/src/main/java/net/minecraft/world/level/block/DiodeBlock.java b/src/main/java/net/minecraft/world/level/block/DiodeBlock.java
index 501a2298d8fed0342765c49164caa385d765ebab..fbc038fd0500257450af63c1747c6eb218948aa5 100644
--- a/src/main/java/net/minecraft/world/level/block/DiodeBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/DiodeBlock.java
@@ -44,7 +44,7 @@ public abstract class DiodeBlock extends HorizontalDirectionalBlock {
     @Override
     public void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
         if (!this.isLocked(world, pos, state)) {
-            boolean flag = ((Boolean) state.getValue(DiodeBlock.POWERED)).booleanValue();
+            boolean flag = state.getValue(DiodeBlock.POWERED).booleanValue();
             boolean flag1 = this.shouldTurnOn(world, pos, state);
 
             if (flag && !flag1) {
@@ -53,16 +53,16 @@ public abstract class DiodeBlock extends HorizontalDirectionalBlock {
                     return;
                 }
                 // CraftBukkit end
-                world.setBlock(pos, (BlockState) state.setValue(DiodeBlock.POWERED, Boolean.FALSE), 2);
+                world.setBlock(pos, state.setValue(DiodeBlock.POWERED, Boolean.FALSE), 2);
             } else if (!flag) {
                 // CraftBukkit start
                 if (CraftEventFactory.callRedstoneChange(world, pos, 0, 15).getNewCurrent() != 15) {
                     return;
                 }
                 // CraftBukkit end
-                world.setBlock(pos, (BlockState) state.setValue(DiodeBlock.POWERED, Boolean.TRUE), 2);
+                world.setBlock(pos, state.setValue(DiodeBlock.POWERED, Boolean.TRUE), 2);
                 if (!flag1) {
-                    world.scheduleTick(pos, (Block) this, this.getDelay(state), TickPriority.VERY_HIGH);
+                    world.scheduleTick(pos, this, this.getDelay(state), TickPriority.VERY_HIGH);
                 }
             }
 
@@ -76,7 +76,7 @@ public abstract class DiodeBlock extends HorizontalDirectionalBlock {
 
     @Override
     public int getSignal(BlockState state, BlockGetter world, BlockPos pos, Direction direction) {
-        return !((Boolean) state.getValue(DiodeBlock.POWERED)).booleanValue() ? 0 : (state.getValue(DiodeBlock.FACING) == direction ? this.getOutputSignal(world, pos, state) : 0);
+        return !state.getValue(DiodeBlock.POWERED).booleanValue() ? 0 : (state.getValue(DiodeBlock.FACING) == direction ? this.getOutputSignal(world, pos, state) : 0);
     }
 
     @Override
@@ -102,7 +102,7 @@ public abstract class DiodeBlock extends HorizontalDirectionalBlock {
 
     protected void checkTickOnNeighbor(Level world, BlockPos pos, BlockState state) {
         if (!this.isLocked(world, pos, state)) {
-            boolean flag = ((Boolean) state.getValue(DiodeBlock.POWERED)).booleanValue();
+            boolean flag = state.getValue(DiodeBlock.POWERED).booleanValue();
             boolean flag1 = this.shouldTurnOn(world, pos, state);
 
             if (flag != flag1 && !world.getBlockTicks().willTickThisTick(pos, this)) {
@@ -114,7 +114,7 @@ public abstract class DiodeBlock extends HorizontalDirectionalBlock {
                     ticklistpriority = TickPriority.VERY_HIGH;
                 }
 
-                world.scheduleTick(pos, (Block) this, this.getDelay(state), ticklistpriority);
+                world.scheduleTick(pos, this, this.getDelay(state), ticklistpriority);
             }
 
         }
@@ -129,7 +129,7 @@ public abstract class DiodeBlock extends HorizontalDirectionalBlock {
     }
 
     protected int getInputSignal(Level world, BlockPos pos, BlockState state) {
-        Direction enumdirection = (Direction) state.getValue(DiodeBlock.FACING);
+        Direction enumdirection = state.getValue(DiodeBlock.FACING);
         BlockPos blockposition1 = pos.relative(enumdirection);
         int i = world.getSignal(blockposition1, enumdirection);
 
@@ -138,12 +138,12 @@ public abstract class DiodeBlock extends HorizontalDirectionalBlock {
         } else {
             BlockState iblockdata1 = world.getBlockState(blockposition1);
 
-            return Math.max(i, iblockdata1.is(Blocks.REDSTONE_WIRE) ? ((Integer) iblockdata1.getValue(RedStoneWireBlock.POWER)).intValue() : 0);
+            return Math.max(i, iblockdata1.is(Blocks.REDSTONE_WIRE) ? iblockdata1.getValue(RedStoneWireBlock.POWER).intValue() : 0);
         }
     }
 
     protected int getAlternateSignal(LevelReader world, BlockPos pos, BlockState state) {
-        Direction enumdirection = (Direction) state.getValue(DiodeBlock.FACING);
+        Direction enumdirection = state.getValue(DiodeBlock.FACING);
         Direction enumdirection1 = enumdirection.getClockWise();
         Direction enumdirection2 = enumdirection.getCounterClockWise();
 
@@ -153,7 +153,7 @@ public abstract class DiodeBlock extends HorizontalDirectionalBlock {
     protected int getAlternateSignalAt(LevelReader world, BlockPos pos, Direction dir) {
         BlockState iblockdata = world.getBlockState(pos);
 
-        return this.isAlternateInput(iblockdata) ? (iblockdata.is(Blocks.REDSTONE_BLOCK) ? 15 : (iblockdata.is(Blocks.REDSTONE_WIRE) ? ((Integer) iblockdata.getValue(RedStoneWireBlock.POWER)).intValue() : world.getDirectSignal(pos, dir))) : 0;
+        return this.isAlternateInput(iblockdata) ? (iblockdata.is(Blocks.REDSTONE_BLOCK) ? 15 : (iblockdata.is(Blocks.REDSTONE_WIRE) ? iblockdata.getValue(RedStoneWireBlock.POWER).intValue() : world.getDirectSignal(pos, dir))) : 0;
     }
 
     @Override
@@ -163,13 +163,13 @@ public abstract class DiodeBlock extends HorizontalDirectionalBlock {
 
     @Override
     public @Nullable BlockState getStateForPlacement(BlockPlaceContext ctx) {
-        return (BlockState) this.defaultBlockState().setValue(DiodeBlock.FACING, ctx.getHorizontalDirection().getOpposite());
+        return this.defaultBlockState().setValue(DiodeBlock.FACING, ctx.getHorizontalDirection().getOpposite());
     }
 
     @Override
     public void setPlacedBy(Level world, BlockPos pos, BlockState state, LivingEntity placer, ItemStack itemStack) {
         if (this.shouldTurnOn(world, pos, state)) {
-            world.scheduleTick(pos, (Block) this, 1);
+            world.scheduleTick(pos, this, 1);
         }
 
     }
@@ -188,7 +188,7 @@ public abstract class DiodeBlock extends HorizontalDirectionalBlock {
     }
 
     protected void updateNeighborsInFront(Level world, BlockPos pos, BlockState state) {
-        Direction enumdirection = (Direction) state.getValue(DiodeBlock.FACING);
+        Direction enumdirection = state.getValue(DiodeBlock.FACING);
         BlockPos blockposition1 = pos.relative(enumdirection.getOpposite());
 
         world.neighborChanged(blockposition1, this, pos);
@@ -208,7 +208,7 @@ public abstract class DiodeBlock extends HorizontalDirectionalBlock {
     }
 
     public boolean shouldPrioritize(BlockGetter world, BlockPos pos, BlockState state) {
-        Direction enumdirection = ((Direction) state.getValue(DiodeBlock.FACING)).getOpposite();
+        Direction enumdirection = state.getValue(DiodeBlock.FACING).getOpposite();
         BlockState iblockdata1 = world.getBlockState(pos.relative(enumdirection));
 
         return DiodeBlock.isDiode(iblockdata1) && iblockdata1.getValue(DiodeBlock.FACING) != enumdirection;
diff --git a/src/main/java/net/minecraft/world/level/block/DirtPathBlock.java b/src/main/java/net/minecraft/world/level/block/DirtPathBlock.java
index 3e4dc3b72ff14face0b9a7744ea74ae1c6d23a9a..631b9c0e55a263082931e901075d4a995385f63a 100644
--- a/src/main/java/net/minecraft/world/level/block/DirtPathBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/DirtPathBlock.java
@@ -35,7 +35,7 @@ public class DirtPathBlock extends Block {
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
         if (direction == Direction.UP && !state.canSurvive(world, pos)) {
-            world.scheduleTick(pos, (Block) this, 1);
+            world.scheduleTick(pos, this, 1);
         }
 
         return super.updateShape(state, direction, neighborState, world, pos, neighborPos);
diff --git a/src/main/java/net/minecraft/world/level/block/DispenserBlock.java b/src/main/java/net/minecraft/world/level/block/DispenserBlock.java
index 56ee81967c87eac917fc3e00b2671106e9a3dd16..78dec62e80c4e5effcd1b9c09d37e8a12a486b64 100644
--- a/src/main/java/net/minecraft/world/level/block/DispenserBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/DispenserBlock.java
@@ -57,7 +57,7 @@ public class DispenserBlock extends BaseEntityBlock {
 
     protected DispenserBlock(BlockBehaviour.Properties settings) {
         super(settings);
-        this.registerDefaultState((BlockState) ((BlockState) ((BlockState) this.stateDefinition.any()).setValue(DispenserBlock.FACING, Direction.NORTH)).setValue(DispenserBlock.TRIGGERED, Boolean.FALSE));
+        this.registerDefaultState(this.stateDefinition.any().setValue(DispenserBlock.FACING, Direction.NORTH).setValue(DispenserBlock.TRIGGERED, Boolean.FALSE));
     }
 
     @Override
@@ -82,13 +82,13 @@ public class DispenserBlock extends BaseEntityBlock {
 
     public void dispenseFrom(ServerLevel world, BlockPos pos) {
         BlockSourceImpl sourceblock = new BlockSourceImpl(world, pos);
-        DispenserBlockEntity tileentitydispenser = (DispenserBlockEntity) sourceblock.getEntity();
+        DispenserBlockEntity tileentitydispenser = sourceblock.getEntity();
         int i = tileentitydispenser.getRandomSlot(world.random);
 
         if (i < 0) {
             if (org.bukkit.craftbukkit.event.CraftEventFactory.handleBlockFailedDispenseEvent(world, pos)) {// Paper - BlockFailedDispenseEvent is called here
             world.levelEvent(1001, pos, 0);
-            world.gameEvent((Entity) null, GameEvent.DISPENSE_FAIL, pos);
+            world.gameEvent(null, GameEvent.DISPENSE_FAIL, pos);
             } // Paper
         } else {
             ItemStack itemstack = tileentitydispenser.getItem(i);
@@ -104,19 +104,19 @@ public class DispenserBlock extends BaseEntityBlock {
     }
 
     protected DispenseItemBehavior getDispenseMethod(ItemStack stack) {
-        return (DispenseItemBehavior) DispenserBlock.DISPENSER_REGISTRY.get(stack.getItem());
+        return DispenserBlock.DISPENSER_REGISTRY.get(stack.getItem());
     }
 
     @Override
     public void neighborChanged(BlockState state, Level world, BlockPos pos, Block sourceBlock, BlockPos sourcePos, boolean notify) {
         boolean flag1 = world.hasNeighborSignal(pos) || world.hasNeighborSignal(pos.above());
-        boolean flag2 = ((Boolean) state.getValue(DispenserBlock.TRIGGERED)).booleanValue();
+        boolean flag2 = state.getValue(DispenserBlock.TRIGGERED).booleanValue();
 
         if (flag1 && !flag2) {
-            world.scheduleTick(pos, (Block) this, 4);
-            world.setBlock(pos, (BlockState) state.setValue(DispenserBlock.TRIGGERED, Boolean.TRUE), 4);
+            world.scheduleTick(pos, this, 4);
+            world.setBlock(pos, state.setValue(DispenserBlock.TRIGGERED, Boolean.TRUE), 4);
         } else if (!flag1 && flag2) {
-            world.setBlock(pos, (BlockState) state.setValue(DispenserBlock.TRIGGERED, Boolean.FALSE), 4);
+            world.setBlock(pos, state.setValue(DispenserBlock.TRIGGERED, Boolean.FALSE), 4);
         }
 
     }
@@ -133,7 +133,7 @@ public class DispenserBlock extends BaseEntityBlock {
 
     @Override
     public BlockState getStateForPlacement(BlockPlaceContext ctx) {
-        return (BlockState) this.defaultBlockState().setValue(DispenserBlock.FACING, ctx.getNearestLookingDirection().getOpposite());
+        return this.defaultBlockState().setValue(DispenserBlock.FACING, ctx.getNearestLookingDirection().getOpposite());
     }
 
     @Override
@@ -154,7 +154,7 @@ public class DispenserBlock extends BaseEntityBlock {
             BlockEntity tileentity = world.getBlockEntity(pos);
 
             if (tileentity instanceof DispenserBlockEntity) {
-                Containers.dropContents(world, pos, (Container) ((DispenserBlockEntity) tileentity));
+                Containers.dropContents(world, pos, tileentity);
                 world.updateNeighbourForOutputSignal(pos, this);
             }
 
@@ -163,7 +163,7 @@ public class DispenserBlock extends BaseEntityBlock {
     }
 
     public static Position getDispensePosition(BlockSource pointer) {
-        Direction enumdirection = (Direction) pointer.getBlockState().getValue(DispenserBlock.FACING);
+        Direction enumdirection = pointer.getBlockState().getValue(DispenserBlock.FACING);
         double d0 = pointer.x() + 0.7D * (double) enumdirection.getStepX();
         double d1 = pointer.y() + 0.7D * (double) enumdirection.getStepY();
         double d2 = pointer.z() + 0.7D * (double) enumdirection.getStepZ();
@@ -188,12 +188,12 @@ public class DispenserBlock extends BaseEntityBlock {
 
     @Override
     public BlockState rotate(BlockState state, Rotation rotation) {
-        return (BlockState) state.setValue(DispenserBlock.FACING, rotation.rotate((Direction) state.getValue(DispenserBlock.FACING)));
+        return state.setValue(DispenserBlock.FACING, rotation.rotate(state.getValue(DispenserBlock.FACING)));
     }
 
     @Override
     public BlockState mirror(BlockState state, Mirror mirror) {
-        return state.rotate(mirror.getRotation((Direction) state.getValue(DispenserBlock.FACING)));
+        return state.rotate(mirror.getRotation(state.getValue(DispenserBlock.FACING)));
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/DoorBlock.java b/src/main/java/net/minecraft/world/level/block/DoorBlock.java
index 7151e45abe0ec4b5b5b417740aabab89ff9a175e..97701884fd78cee0edb30d1f753fb1e4bb906efa 100644
--- a/src/main/java/net/minecraft/world/level/block/DoorBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/DoorBlock.java
@@ -53,15 +53,15 @@ public class DoorBlock extends Block {
 
     protected DoorBlock(BlockBehaviour.Properties settings, SoundEvent closeSound, SoundEvent openSound) {
         super(settings);
-        this.registerDefaultState((BlockState) ((BlockState) ((BlockState) ((BlockState) ((BlockState) ((BlockState) this.stateDefinition.any()).setValue(DoorBlock.FACING, Direction.NORTH)).setValue(DoorBlock.OPEN, Boolean.FALSE)).setValue(DoorBlock.HINGE, DoorHingeSide.LEFT)).setValue(DoorBlock.POWERED, Boolean.FALSE)).setValue(DoorBlock.HALF, DoubleBlockHalf.LOWER));
+        this.registerDefaultState(this.stateDefinition.any().setValue(DoorBlock.FACING, Direction.NORTH).setValue(DoorBlock.OPEN, Boolean.FALSE).setValue(DoorBlock.HINGE, DoorHingeSide.LEFT).setValue(DoorBlock.POWERED, Boolean.FALSE).setValue(DoorBlock.HALF, DoubleBlockHalf.LOWER));
         this.closeSound = closeSound;
         this.openSound = openSound;
     }
 
     @Override
     public VoxelShape getShape(BlockState state, BlockGetter world, BlockPos pos, CollisionContext context) {
-        Direction enumdirection = (Direction) state.getValue(DoorBlock.FACING);
-        boolean flag = !((Boolean) state.getValue(DoorBlock.OPEN)).booleanValue();
+        Direction enumdirection = state.getValue(DoorBlock.FACING);
+        boolean flag = !state.getValue(DoorBlock.OPEN).booleanValue();
         boolean flag1 = state.getValue(DoorBlock.HINGE) == DoorHingeSide.RIGHT;
 
         switch (enumdirection) {
@@ -79,9 +79,9 @@ public class DoorBlock extends Block {
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
-        DoubleBlockHalf blockpropertydoubleblockhalf = (DoubleBlockHalf) state.getValue(DoorBlock.HALF);
+        DoubleBlockHalf blockpropertydoubleblockhalf = state.getValue(DoorBlock.HALF);
 
-        return direction.getAxis() == Direction.Axis.Y && blockpropertydoubleblockhalf == DoubleBlockHalf.LOWER == (direction == Direction.UP) ? (neighborState.is((Block) this) && neighborState.getValue(DoorBlock.HALF) != blockpropertydoubleblockhalf ? (BlockState) ((BlockState) ((BlockState) ((BlockState) state.setValue(DoorBlock.FACING, (Direction) neighborState.getValue(DoorBlock.FACING))).setValue(DoorBlock.OPEN, (Boolean) neighborState.getValue(DoorBlock.OPEN))).setValue(DoorBlock.HINGE, (DoorHingeSide) neighborState.getValue(DoorBlock.HINGE))).setValue(DoorBlock.POWERED, (Boolean) neighborState.getValue(DoorBlock.POWERED)) : Blocks.AIR.defaultBlockState()) : (blockpropertydoubleblockhalf == DoubleBlockHalf.LOWER && direction == Direction.DOWN && !state.canSurvive(world, pos) ? Blocks.AIR.defaultBlockState() : super.updateShape(state, direction, neighborState, world, pos, neighborPos));
+        return direction.getAxis() == Direction.Axis.Y && blockpropertydoubleblockhalf == DoubleBlockHalf.LOWER == (direction == Direction.UP) ? (neighborState.is(this) && neighborState.getValue(DoorBlock.HALF) != blockpropertydoubleblockhalf ? state.setValue(DoorBlock.FACING, neighborState.getValue(DoorBlock.FACING)).setValue(DoorBlock.OPEN, neighborState.getValue(DoorBlock.OPEN)).setValue(DoorBlock.HINGE, neighborState.getValue(DoorBlock.HINGE)).setValue(DoorBlock.POWERED, neighborState.getValue(DoorBlock.POWERED)) : Blocks.AIR.defaultBlockState()) : (blockpropertydoubleblockhalf == DoubleBlockHalf.LOWER && direction == Direction.DOWN && !state.canSurvive(world, pos) ? Blocks.AIR.defaultBlockState() : super.updateShape(state, direction, neighborState, world, pos, neighborPos));
     }
 
     @Override
@@ -97,11 +97,11 @@ public class DoorBlock extends Block {
     public boolean isPathfindable(BlockState state, BlockGetter world, BlockPos pos, PathComputationType type) {
         switch (type) {
             case LAND:
-                return ((Boolean) state.getValue(DoorBlock.OPEN)).booleanValue();
+                return state.getValue(DoorBlock.OPEN).booleanValue();
             case WATER:
                 return false;
             case AIR:
-                return ((Boolean) state.getValue(DoorBlock.OPEN)).booleanValue();
+                return state.getValue(DoorBlock.OPEN).booleanValue();
             default:
                 return false;
         }
@@ -116,7 +116,7 @@ public class DoorBlock extends Block {
         if (blockposition.getY() < world.getMaxBuildHeight() - 1 && world.getBlockState(blockposition.above()).canBeReplaced(ctx)) {
             boolean flag = world.hasNeighborSignal(blockposition) || world.hasNeighborSignal(blockposition.above());
 
-            return (BlockState) ((BlockState) ((BlockState) ((BlockState) ((BlockState) this.defaultBlockState().setValue(DoorBlock.FACING, ctx.getHorizontalDirection())).setValue(DoorBlock.HINGE, this.getHinge(ctx))).setValue(DoorBlock.POWERED, Boolean.valueOf(flag))).setValue(DoorBlock.OPEN, Boolean.valueOf(flag))).setValue(DoorBlock.HALF, DoubleBlockHalf.LOWER);
+            return this.defaultBlockState().setValue(DoorBlock.FACING, ctx.getHorizontalDirection()).setValue(DoorBlock.HINGE, this.getHinge(ctx)).setValue(DoorBlock.POWERED, Boolean.valueOf(flag)).setValue(DoorBlock.OPEN, Boolean.valueOf(flag)).setValue(DoorBlock.HALF, DoubleBlockHalf.LOWER);
         } else {
             return null;
         }
@@ -124,7 +124,7 @@ public class DoorBlock extends Block {
 
     @Override
     public void setPlacedBy(Level world, BlockPos pos, BlockState state, LivingEntity placer, ItemStack itemStack) {
-        world.setBlock(pos.above(), (BlockState) state.setValue(DoorBlock.HALF, DoubleBlockHalf.UPPER), 3);
+        world.setBlock(pos.above(), state.setValue(DoorBlock.HALF, DoubleBlockHalf.UPPER), 3);
     }
 
     private DoorHingeSide getHinge(BlockPlaceContext ctx) {
@@ -143,8 +143,8 @@ public class DoorBlock extends Block {
         BlockPos blockposition5 = blockposition1.relative(enumdirection2);
         BlockState iblockdata3 = world.getBlockState(blockposition5);
         int i = (iblockdata.isCollisionShapeFullBlock(world, blockposition2) ? -1 : 0) + (iblockdata1.isCollisionShapeFullBlock(world, blockposition3) ? -1 : 0) + (iblockdata2.isCollisionShapeFullBlock(world, blockposition4) ? 1 : 0) + (iblockdata3.isCollisionShapeFullBlock(world, blockposition5) ? 1 : 0);
-        boolean flag = iblockdata.is((Block) this) && iblockdata.getValue(DoorBlock.HALF) == DoubleBlockHalf.LOWER;
-        boolean flag1 = iblockdata2.is((Block) this) && iblockdata2.getValue(DoorBlock.HALF) == DoubleBlockHalf.LOWER;
+        boolean flag = iblockdata.is(this) && iblockdata.getValue(DoorBlock.HALF) == DoubleBlockHalf.LOWER;
+        boolean flag1 = iblockdata2.is(this) && iblockdata2.getValue(DoorBlock.HALF) == DoubleBlockHalf.LOWER;
 
         if ((!flag || flag1) && i <= 0) {
             if ((!flag1 || flag) && i >= 0) {
@@ -168,7 +168,7 @@ public class DoorBlock extends Block {
         if (this.material == Material.METAL) {
             return InteractionResult.PASS;
         } else {
-            state = (BlockState) state.cycle(DoorBlock.OPEN);
+            state = state.cycle(DoorBlock.OPEN);
             world.setBlock(pos, state, 10);
             this.playSound(player, world, pos, (Boolean) state.getValue(DoorBlock.OPEN));
             world.gameEvent((Entity) player, this.isOpen(state) ? GameEvent.BLOCK_OPEN : GameEvent.BLOCK_CLOSE, pos);
@@ -177,12 +177,12 @@ public class DoorBlock extends Block {
     }
 
     public boolean isOpen(BlockState state) {
-        return ((Boolean) state.getValue(DoorBlock.OPEN)).booleanValue();
+        return state.getValue(DoorBlock.OPEN).booleanValue();
     }
 
     public void setOpen(@Nullable Entity entity, Level world, BlockState state, BlockPos pos, boolean open) {
-        if (state.is((Block) this) && ((Boolean) state.getValue(DoorBlock.OPEN)).booleanValue() != open) {
-            world.setBlock(pos, (BlockState) state.setValue(DoorBlock.OPEN, Boolean.valueOf(open)), 10);
+        if (state.is(this) && state.getValue(DoorBlock.OPEN).booleanValue() != open) {
+            world.setBlock(pos, state.setValue(DoorBlock.OPEN, Boolean.valueOf(open)), 10);
             this.playSound(entity, world, pos, open);
             world.gameEvent(entity, open ? GameEvent.BLOCK_OPEN : GameEvent.BLOCK_CLOSE, pos);
         }
@@ -200,7 +200,7 @@ public class DoorBlock extends Block {
         int power = bukkitBlock.getBlockPower();
         int powerTop = blockTop.getBlockPower();
         if (powerTop > power) power = powerTop;
-        int oldPower = ((Boolean) state.getValue(DoorBlock.POWERED)).booleanValue() ? 15 : 0;
+        int oldPower = state.getValue(DoorBlock.POWERED).booleanValue() ? 15 : 0;
 
         if (oldPower == 0 ^ power == 0) {
             BlockRedstoneEvent eventRedstone = new BlockRedstoneEvent(bukkitBlock, oldPower, power);
@@ -208,12 +208,12 @@ public class DoorBlock extends Block {
 
             boolean flag1 = eventRedstone.getNewCurrent() > 0;
             // CraftBukkit end
-            if (flag1 != ((Boolean) state.getValue(DoorBlock.OPEN)).booleanValue()) {
+            if (flag1 != state.getValue(DoorBlock.OPEN).booleanValue()) {
                 this.playSound((Entity) null, world, pos, flag1);
-                world.gameEvent((Entity) null, flag1 ? GameEvent.BLOCK_OPEN : GameEvent.BLOCK_CLOSE, pos);
+                world.gameEvent(null, flag1 ? GameEvent.BLOCK_OPEN : GameEvent.BLOCK_CLOSE, pos);
             }
 
-            world.setBlock(pos, (BlockState) ((BlockState) state.setValue(DoorBlock.POWERED, Boolean.valueOf(flag1))).setValue(DoorBlock.OPEN, Boolean.valueOf(flag1)), 2);
+            world.setBlock(pos, state.setValue(DoorBlock.POWERED, Boolean.valueOf(flag1)).setValue(DoorBlock.OPEN, Boolean.valueOf(flag1)), 2);
         }
 
     }
@@ -223,7 +223,7 @@ public class DoorBlock extends Block {
         BlockPos blockposition1 = pos.below();
         BlockState iblockdata1 = world.getBlockState(blockposition1);
 
-        return state.getValue(DoorBlock.HALF) == DoubleBlockHalf.LOWER ? iblockdata1.isFaceSturdy(world, blockposition1, Direction.UP) : iblockdata1.is((Block) this);
+        return state.getValue(DoorBlock.HALF) == DoubleBlockHalf.LOWER ? iblockdata1.isFaceSturdy(world, blockposition1, Direction.UP) : iblockdata1.is(this);
     }
 
     private void playSound(@Nullable Entity entity, Level world, BlockPos pos, boolean open) {
@@ -237,12 +237,12 @@ public class DoorBlock extends Block {
 
     @Override
     public BlockState rotate(BlockState state, Rotation rotation) {
-        return (BlockState) state.setValue(DoorBlock.FACING, rotation.rotate((Direction) state.getValue(DoorBlock.FACING)));
+        return state.setValue(DoorBlock.FACING, rotation.rotate(state.getValue(DoorBlock.FACING)));
     }
 
     @Override
     public BlockState mirror(BlockState state, Mirror mirror) {
-        return mirror == Mirror.NONE ? state : (BlockState) state.rotate(mirror.getRotation((Direction) state.getValue(DoorBlock.FACING))).cycle(DoorBlock.HINGE);
+        return mirror == Mirror.NONE ? state : state.rotate(mirror.getRotation(state.getValue(DoorBlock.FACING))).cycle(DoorBlock.HINGE);
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/DoublePlantBlock.java b/src/main/java/net/minecraft/world/level/block/DoublePlantBlock.java
index e6876ccf3d96c3bc6f4d2f8f9b1a1b3384bbb928..1ada0ff96326d46882897eec467f52ecf6dc5ad2 100644
--- a/src/main/java/net/minecraft/world/level/block/DoublePlantBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/DoublePlantBlock.java
@@ -27,14 +27,14 @@ public class DoublePlantBlock extends BushBlock {
 
     public DoublePlantBlock(BlockBehaviour.Properties settings) {
         super(settings);
-        this.registerDefaultState((BlockState) ((BlockState) this.stateDefinition.any()).setValue(DoublePlantBlock.HALF, DoubleBlockHalf.LOWER));
+        this.registerDefaultState(this.stateDefinition.any().setValue(DoublePlantBlock.HALF, DoubleBlockHalf.LOWER));
     }
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
-        DoubleBlockHalf blockpropertydoubleblockhalf = (DoubleBlockHalf) state.getValue(DoublePlantBlock.HALF);
+        DoubleBlockHalf blockpropertydoubleblockhalf = state.getValue(DoublePlantBlock.HALF);
 
-        return direction.getAxis() == Direction.Axis.Y && blockpropertydoubleblockhalf == DoubleBlockHalf.LOWER == (direction == Direction.UP) && (!neighborState.is((Block) this) || neighborState.getValue(DoublePlantBlock.HALF) == blockpropertydoubleblockhalf) ? Blocks.AIR.defaultBlockState() : (blockpropertydoubleblockhalf == DoubleBlockHalf.LOWER && direction == Direction.DOWN && !state.canSurvive(world, pos) ? Blocks.AIR.defaultBlockState() : super.updateShape(state, direction, neighborState, world, pos, neighborPos));
+        return direction.getAxis() == Direction.Axis.Y && blockpropertydoubleblockhalf == DoubleBlockHalf.LOWER == (direction == Direction.UP) && (!neighborState.is(this) || neighborState.getValue(DoublePlantBlock.HALF) == blockpropertydoubleblockhalf) ? Blocks.AIR.defaultBlockState() : (blockpropertydoubleblockhalf == DoubleBlockHalf.LOWER && direction == Direction.DOWN && !state.canSurvive(world, pos) ? Blocks.AIR.defaultBlockState() : super.updateShape(state, direction, neighborState, world, pos, neighborPos));
     }
 
     @Nullable
@@ -50,7 +50,7 @@ public class DoublePlantBlock extends BushBlock {
     public void setPlacedBy(Level world, BlockPos pos, BlockState state, LivingEntity placer, ItemStack itemStack) {
         BlockPos blockposition1 = pos.above();
 
-        world.setBlock(blockposition1, DoublePlantBlock.copyWaterloggedFrom(world, blockposition1, (BlockState) this.defaultBlockState().setValue(DoublePlantBlock.HALF, DoubleBlockHalf.UPPER)), 3);
+        world.setBlock(blockposition1, DoublePlantBlock.copyWaterloggedFrom(world, blockposition1, this.defaultBlockState().setValue(DoublePlantBlock.HALF, DoubleBlockHalf.UPPER)), 3);
     }
 
     @Override
@@ -60,19 +60,19 @@ public class DoublePlantBlock extends BushBlock {
         } else {
             BlockState iblockdata1 = world.getBlockState(pos.below());
 
-            return iblockdata1.is((Block) this) && iblockdata1.getValue(DoublePlantBlock.HALF) == DoubleBlockHalf.LOWER;
+            return iblockdata1.is(this) && iblockdata1.getValue(DoublePlantBlock.HALF) == DoubleBlockHalf.LOWER;
         }
     }
 
     public static void placeAt(LevelAccessor world, BlockState state, BlockPos pos, int flags) {
         BlockPos blockposition1 = pos.above();
 
-        world.setBlock(pos, DoublePlantBlock.copyWaterloggedFrom(world, pos, (BlockState) state.setValue(DoublePlantBlock.HALF, DoubleBlockHalf.LOWER)), flags);
-        world.setBlock(blockposition1, DoublePlantBlock.copyWaterloggedFrom(world, blockposition1, (BlockState) state.setValue(DoublePlantBlock.HALF, DoubleBlockHalf.UPPER)), flags);
+        world.setBlock(pos, DoublePlantBlock.copyWaterloggedFrom(world, pos, state.setValue(DoublePlantBlock.HALF, DoubleBlockHalf.LOWER)), flags);
+        world.setBlock(blockposition1, DoublePlantBlock.copyWaterloggedFrom(world, blockposition1, state.setValue(DoublePlantBlock.HALF, DoubleBlockHalf.UPPER)), flags);
     }
 
     public static BlockState copyWaterloggedFrom(LevelReader world, BlockPos pos, BlockState state) {
-        return state.hasProperty(BlockStateProperties.WATERLOGGED) ? (BlockState) state.setValue(BlockStateProperties.WATERLOGGED, Boolean.valueOf(world.isWaterAt(pos))) : state;
+        return state.hasProperty(BlockStateProperties.WATERLOGGED) ? state.setValue(BlockStateProperties.WATERLOGGED, Boolean.valueOf(world.isWaterAt(pos))) : state;
     }
 
     @Override
@@ -81,7 +81,7 @@ public class DoublePlantBlock extends BushBlock {
             if (player.isCreative()) {
                 DoublePlantBlock.preventCreativeDropFromBottomPart(world, pos, state, player);
             } else {
-                dropResources(state, world, pos, (BlockEntity) null, player, player.getMainHandItem());
+                dropResources(state, world, pos, null, player, player.getMainHandItem());
             }
         }
 
@@ -99,7 +99,7 @@ public class DoublePlantBlock extends BushBlock {
             return;
         }
         // CraftBukkit end
-        DoubleBlockHalf blockpropertydoubleblockhalf = (DoubleBlockHalf) state.getValue(DoublePlantBlock.HALF);
+        DoubleBlockHalf blockpropertydoubleblockhalf = state.getValue(DoublePlantBlock.HALF);
 
         if (blockpropertydoubleblockhalf == DoubleBlockHalf.UPPER) {
             BlockPos blockposition1 = pos.below();
diff --git a/src/main/java/net/minecraft/world/level/block/DragonEggBlock.java b/src/main/java/net/minecraft/world/level/block/DragonEggBlock.java
index 7e1edcc7b9f170b7c649437c2f0dd78c0bab9be4..6b3d1391fe053014277c51eb6934e3874a3a45c7 100644
--- a/src/main/java/net/minecraft/world/level/block/DragonEggBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/DragonEggBlock.java
@@ -66,11 +66,11 @@ public class DragonEggBlock extends FallingBlock {
                         float f = (world.random.nextFloat() - 0.5F) * 0.2F;
                         float f1 = (world.random.nextFloat() - 0.5F) * 0.2F;
                         float f2 = (world.random.nextFloat() - 0.5F) * 0.2F;
-                        double d1 = Mth.lerp(d0, (double) blockposition1.getX(), (double) pos.getX()) + (world.random.nextDouble() - 0.5D) + 0.5D;
-                        double d2 = Mth.lerp(d0, (double) blockposition1.getY(), (double) pos.getY()) + world.random.nextDouble() - 0.5D;
-                        double d3 = Mth.lerp(d0, (double) blockposition1.getZ(), (double) pos.getZ()) + (world.random.nextDouble() - 0.5D) + 0.5D;
+                        double d1 = Mth.lerp(d0, blockposition1.getX(), pos.getX()) + (world.random.nextDouble() - 0.5D) + 0.5D;
+                        double d2 = Mth.lerp(d0, blockposition1.getY(), pos.getY()) + world.random.nextDouble() - 0.5D;
+                        double d3 = Mth.lerp(d0, blockposition1.getZ(), pos.getZ()) + (world.random.nextDouble() - 0.5D) + 0.5D;
 
-                        world.addParticle(ParticleTypes.PORTAL, d1, d2, d3, (double) f, (double) f1, (double) f2);
+                        world.addParticle(ParticleTypes.PORTAL, d1, d2, d3, f, f1, f2);
                     }
                 } else {
                     world.setBlock(blockposition1, state, 2);
diff --git a/src/main/java/net/minecraft/world/level/block/DropperBlock.java b/src/main/java/net/minecraft/world/level/block/DropperBlock.java
index 801c4c120e98584bcf218a4ef9bd66d7d18c1097..884e38b07a5df64dd597e4ad7e010ad7e38a7127 100644
--- a/src/main/java/net/minecraft/world/level/block/DropperBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/DropperBlock.java
@@ -40,7 +40,7 @@ public class DropperBlock extends DispenserBlock {
     @Override
     public void dispenseFrom(ServerLevel world, BlockPos pos) {
         BlockSourceImpl sourceblock = new BlockSourceImpl(world, pos);
-        DispenserBlockEntity tileentitydispenser = (DispenserBlockEntity) sourceblock.getEntity();
+        DispenserBlockEntity tileentitydispenser = sourceblock.getEntity();
         int i = tileentitydispenser.getRandomSlot(world.random);
 
         if (i < 0) {
@@ -50,7 +50,7 @@ public class DropperBlock extends DispenserBlock {
             ItemStack itemstack = tileentitydispenser.getItem(i);
 
             if (!itemstack.isEmpty()) {
-                Direction enumdirection = (Direction) world.getBlockState(pos).getValue(DropperBlock.FACING);
+                Direction enumdirection = world.getBlockState(pos).getValue(DropperBlock.FACING);
                 Container iinventory = HopperBlockEntity.getContainerAt(world, pos.relative(enumdirection));
                 ItemStack itemstack1;
 
diff --git a/src/main/java/net/minecraft/world/level/block/EndPortalBlock.java b/src/main/java/net/minecraft/world/level/block/EndPortalBlock.java
index a170c3abdd14184c7dc6bee17299c7c632191e16..6d336756e067f13eff385eba6874f3820aebd018 100644
--- a/src/main/java/net/minecraft/world/level/block/EndPortalBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/EndPortalBlock.java
@@ -42,7 +42,7 @@ public class EndPortalBlock extends BaseEntityBlock {
     @Override
     public void entityInside(BlockState state, Level world, BlockPos pos, Entity entity) {
         if (!new io.papermc.paper.event.entity.EntityInsideBlockEvent(entity.getBukkitEntity(), org.bukkit.craftbukkit.block.CraftBlock.at(world, pos)).callEvent()) { return; } // Paper
-        if (world instanceof ServerLevel && !entity.isPassenger() && !entity.isVehicle() && entity.canChangeDimensions() && Shapes.joinIsNotEmpty(Shapes.create(entity.getBoundingBox().move((double) (-pos.getX()), (double) (-pos.getY()), (double) (-pos.getZ()))), state.getShape(world, pos), BooleanOp.AND)) {
+        if (world instanceof ServerLevel && !entity.isPassenger() && !entity.isVehicle() && entity.canChangeDimensions() && Shapes.joinIsNotEmpty(Shapes.create(entity.getBoundingBox().move(-pos.getX(), -pos.getY(), -pos.getZ())), state.getShape(world, pos), BooleanOp.AND)) {
             ResourceKey<Level> resourcekey = world.getTypeKey() == LevelStem.END ? Level.OVERWORLD : Level.END; // CraftBukkit - SPIGOT-6152: send back to main overworld in custom ends
             ServerLevel worldserver = ((ServerLevel) world).getServer().getLevel(resourcekey);
 
diff --git a/src/main/java/net/minecraft/world/level/block/FarmBlock.java b/src/main/java/net/minecraft/world/level/block/FarmBlock.java
index 4792a8ba076a24c8874efd92764aa3233ae79c48..33b9b96b480400e65f3225671ef77aa6369b1aef 100644
--- a/src/main/java/net/minecraft/world/level/block/FarmBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/FarmBlock.java
@@ -37,13 +37,13 @@ public class FarmBlock extends Block {
 
     protected FarmBlock(BlockBehaviour.Properties settings) {
         super(settings);
-        this.registerDefaultState((BlockState) ((BlockState) this.stateDefinition.any()).setValue(FarmBlock.MOISTURE, Integer.valueOf(0)));
+        this.registerDefaultState(this.stateDefinition.any().setValue(FarmBlock.MOISTURE, Integer.valueOf(0)));
     }
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
         if (direction == Direction.UP && !state.canSurvive(world, pos)) {
-            world.scheduleTick(pos, (Block) this, 1);
+            world.scheduleTick(pos, this, 1);
         }
 
         return super.updateShape(state, direction, neighborState, world, pos, neighborPos);
@@ -81,16 +81,16 @@ public class FarmBlock extends Block {
 
     @Override
     public void randomTick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
-        int i = ((Integer) state.getValue(FarmBlock.MOISTURE)).intValue();
+        int i = state.getValue(FarmBlock.MOISTURE).intValue();
 
         if (!FarmBlock.isNearWater(world, pos) && !world.isRainingAt(pos.above())) {
             if (i > 0) {
-                org.bukkit.craftbukkit.event.CraftEventFactory.handleMoistureChangeEvent(world, pos, (BlockState) state.setValue(FarmBlock.MOISTURE, Integer.valueOf(i - 1)), 2); // CraftBukkit
+                org.bukkit.craftbukkit.event.CraftEventFactory.handleMoistureChangeEvent(world, pos, state.setValue(FarmBlock.MOISTURE, Integer.valueOf(i - 1)), 2); // CraftBukkit
             } else if (!FarmBlock.isUnderCrops(world, pos)) {
                 FarmBlock.turnToDirt(state, world, pos);
             }
         } else if (i < 7) {
-            org.bukkit.craftbukkit.event.CraftEventFactory.handleMoistureChangeEvent(world, pos, (BlockState) state.setValue(FarmBlock.MOISTURE, Integer.valueOf(7)), 2); // CraftBukkit
+            org.bukkit.craftbukkit.event.CraftEventFactory.handleMoistureChangeEvent(world, pos, state.setValue(FarmBlock.MOISTURE, Integer.valueOf(7)), 2); // CraftBukkit
         }
 
     }
diff --git a/src/main/java/net/minecraft/world/level/block/FenceGateBlock.java b/src/main/java/net/minecraft/world/level/block/FenceGateBlock.java
index 5ca8e03d4653231fc48a4342cc16dfa8019c5985..7d036cd6f3e3d80c02d6cb850807e1a5c4c80c56 100644
--- a/src/main/java/net/minecraft/world/level/block/FenceGateBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/FenceGateBlock.java
@@ -47,26 +47,26 @@ public class FenceGateBlock extends HorizontalDirectionalBlock {
 
     public FenceGateBlock(BlockBehaviour.Properties settings, SoundEvent closeSound, SoundEvent openSound) {
         super(settings);
-        this.registerDefaultState((BlockState) ((BlockState) ((BlockState) ((BlockState) this.stateDefinition.any()).setValue(FenceGateBlock.OPEN, Boolean.FALSE)).setValue(FenceGateBlock.POWERED, Boolean.FALSE)).setValue(FenceGateBlock.IN_WALL, Boolean.FALSE));
+        this.registerDefaultState(this.stateDefinition.any().setValue(FenceGateBlock.OPEN, Boolean.FALSE).setValue(FenceGateBlock.POWERED, Boolean.FALSE).setValue(FenceGateBlock.IN_WALL, Boolean.FALSE));
         this.closeSound = closeSound;
         this.openSound = openSound;
     }
 
     @Override
     public VoxelShape getShape(BlockState state, BlockGetter world, BlockPos pos, CollisionContext context) {
-        return ((Boolean) state.getValue(FenceGateBlock.IN_WALL)).booleanValue() ? (((Direction) state.getValue(FenceGateBlock.FACING)).getAxis() == Direction.Axis.X ? FenceGateBlock.X_SHAPE_LOW : FenceGateBlock.Z_SHAPE_LOW) : (((Direction) state.getValue(FenceGateBlock.FACING)).getAxis() == Direction.Axis.X ? FenceGateBlock.X_SHAPE : FenceGateBlock.Z_SHAPE);
+        return state.getValue(FenceGateBlock.IN_WALL).booleanValue() ? (state.getValue(FenceGateBlock.FACING).getAxis() == Direction.Axis.X ? FenceGateBlock.X_SHAPE_LOW : FenceGateBlock.Z_SHAPE_LOW) : (state.getValue(FenceGateBlock.FACING).getAxis() == Direction.Axis.X ? FenceGateBlock.X_SHAPE : FenceGateBlock.Z_SHAPE);
     }
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
         Direction.Axis enumdirection_enumaxis = direction.getAxis();
 
-        if (((Direction) state.getValue(FenceGateBlock.FACING)).getClockWise().getAxis() != enumdirection_enumaxis) {
+        if (state.getValue(FenceGateBlock.FACING).getClockWise().getAxis() != enumdirection_enumaxis) {
             return super.updateShape(state, direction, neighborState, world, pos, neighborPos);
         } else {
             boolean flag = this.isWall(neighborState) || this.isWall(world.getBlockState(pos.relative(direction.getOpposite())));
 
-            return (BlockState) state.setValue(FenceGateBlock.IN_WALL, Boolean.valueOf(flag));
+            return state.setValue(FenceGateBlock.IN_WALL, Boolean.valueOf(flag));
         }
     }
 
@@ -77,23 +77,23 @@ public class FenceGateBlock extends HorizontalDirectionalBlock {
 
     @Override
     public VoxelShape getCollisionShape(BlockState state, BlockGetter world, BlockPos pos, CollisionContext context) {
-        return ((Boolean) state.getValue(FenceGateBlock.OPEN)).booleanValue() ? Shapes.empty() : (((Direction) state.getValue(FenceGateBlock.FACING)).getAxis() == Direction.Axis.Z ? FenceGateBlock.Z_COLLISION_SHAPE : FenceGateBlock.X_COLLISION_SHAPE);
+        return state.getValue(FenceGateBlock.OPEN).booleanValue() ? Shapes.empty() : (state.getValue(FenceGateBlock.FACING).getAxis() == Direction.Axis.Z ? FenceGateBlock.Z_COLLISION_SHAPE : FenceGateBlock.X_COLLISION_SHAPE);
     }
 
     @Override
     public VoxelShape getOcclusionShape(BlockState state, BlockGetter world, BlockPos pos) {
-        return ((Boolean) state.getValue(FenceGateBlock.IN_WALL)).booleanValue() ? (((Direction) state.getValue(FenceGateBlock.FACING)).getAxis() == Direction.Axis.X ? FenceGateBlock.X_OCCLUSION_SHAPE_LOW : FenceGateBlock.Z_OCCLUSION_SHAPE_LOW) : (((Direction) state.getValue(FenceGateBlock.FACING)).getAxis() == Direction.Axis.X ? FenceGateBlock.X_OCCLUSION_SHAPE : FenceGateBlock.Z_OCCLUSION_SHAPE);
+        return state.getValue(FenceGateBlock.IN_WALL).booleanValue() ? (state.getValue(FenceGateBlock.FACING).getAxis() == Direction.Axis.X ? FenceGateBlock.X_OCCLUSION_SHAPE_LOW : FenceGateBlock.Z_OCCLUSION_SHAPE_LOW) : (state.getValue(FenceGateBlock.FACING).getAxis() == Direction.Axis.X ? FenceGateBlock.X_OCCLUSION_SHAPE : FenceGateBlock.Z_OCCLUSION_SHAPE);
     }
 
     @Override
     public boolean isPathfindable(BlockState state, BlockGetter world, BlockPos pos, PathComputationType type) {
         switch (type) {
             case LAND:
-                return ((Boolean) state.getValue(FenceGateBlock.OPEN)).booleanValue();
+                return state.getValue(FenceGateBlock.OPEN).booleanValue();
             case WATER:
                 return false;
             case AIR:
-                return ((Boolean) state.getValue(FenceGateBlock.OPEN)).booleanValue();
+                return state.getValue(FenceGateBlock.OPEN).booleanValue();
             default:
                 return false;
         }
@@ -108,7 +108,7 @@ public class FenceGateBlock extends HorizontalDirectionalBlock {
         Direction.Axis enumdirection_enumaxis = enumdirection.getAxis();
         boolean flag1 = enumdirection_enumaxis == Direction.Axis.Z && (this.isWall(world.getBlockState(blockposition.west())) || this.isWall(world.getBlockState(blockposition.east()))) || enumdirection_enumaxis == Direction.Axis.X && (this.isWall(world.getBlockState(blockposition.north())) || this.isWall(world.getBlockState(blockposition.south())));
 
-        return (BlockState) ((BlockState) ((BlockState) ((BlockState) this.defaultBlockState().setValue(FenceGateBlock.FACING, enumdirection)).setValue(FenceGateBlock.OPEN, Boolean.valueOf(flag))).setValue(FenceGateBlock.POWERED, Boolean.valueOf(flag))).setValue(FenceGateBlock.IN_WALL, Boolean.valueOf(flag1));
+        return this.defaultBlockState().setValue(FenceGateBlock.FACING, enumdirection).setValue(FenceGateBlock.OPEN, Boolean.valueOf(flag)).setValue(FenceGateBlock.POWERED, Boolean.valueOf(flag)).setValue(FenceGateBlock.IN_WALL, Boolean.valueOf(flag1));
     }
 
     private boolean isWall(BlockState state) {
@@ -117,24 +117,24 @@ public class FenceGateBlock extends HorizontalDirectionalBlock {
 
     @Override
     public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
-        if (((Boolean) state.getValue(FenceGateBlock.OPEN)).booleanValue()) {
-            state = (BlockState) state.setValue(FenceGateBlock.OPEN, Boolean.FALSE);
+        if (state.getValue(FenceGateBlock.OPEN).booleanValue()) {
+            state = state.setValue(FenceGateBlock.OPEN, Boolean.FALSE);
             world.setBlock(pos, state, 10);
         } else {
             Direction enumdirection = player.getDirection();
 
             if (state.getValue(FenceGateBlock.FACING) == enumdirection.getOpposite()) {
-                state = (BlockState) state.setValue(FenceGateBlock.FACING, enumdirection);
+                state = state.setValue(FenceGateBlock.FACING, enumdirection);
             }
 
-            state = (BlockState) state.setValue(FenceGateBlock.OPEN, Boolean.TRUE);
+            state = state.setValue(FenceGateBlock.OPEN, Boolean.TRUE);
             world.setBlock(pos, state, 10);
         }
 
-        boolean flag = ((Boolean) state.getValue(FenceGateBlock.OPEN)).booleanValue();
+        boolean flag = state.getValue(FenceGateBlock.OPEN).booleanValue();
 
         world.playSound(player, pos, flag ? this.openSound : this.closeSound, SoundSource.BLOCKS, 1.0F, world.getRandom().nextFloat() * 0.1F + 0.9F);
-        world.gameEvent((Entity) player, flag ? GameEvent.BLOCK_OPEN : GameEvent.BLOCK_CLOSE, pos);
+        world.gameEvent(player, flag ? GameEvent.BLOCK_OPEN : GameEvent.BLOCK_CLOSE, pos);
         return InteractionResult.sidedSuccess(world.isClientSide);
     }
 
@@ -154,11 +154,11 @@ public class FenceGateBlock extends HorizontalDirectionalBlock {
             }
             // CraftBukkit end
 
-            if (((Boolean) state.getValue(FenceGateBlock.POWERED)).booleanValue() != flag1) {
-                world.setBlock(pos, (BlockState) ((BlockState) state.setValue(FenceGateBlock.POWERED, Boolean.valueOf(flag1))).setValue(FenceGateBlock.OPEN, Boolean.valueOf(flag1)), 2);
-                if (((Boolean) state.getValue(FenceGateBlock.OPEN)).booleanValue() != flag1) {
-                    world.playSound((Player) null, pos, flag1 ? this.openSound : this.closeSound, SoundSource.BLOCKS, 1.0F, world.getRandom().nextFloat() * 0.1F + 0.9F);
-                    world.gameEvent((Entity) null, flag1 ? GameEvent.BLOCK_OPEN : GameEvent.BLOCK_CLOSE, pos);
+            if (state.getValue(FenceGateBlock.POWERED).booleanValue() != flag1) {
+                world.setBlock(pos, state.setValue(FenceGateBlock.POWERED, Boolean.valueOf(flag1)).setValue(FenceGateBlock.OPEN, Boolean.valueOf(flag1)), 2);
+                if (state.getValue(FenceGateBlock.OPEN).booleanValue() != flag1) {
+                    world.playSound(null, pos, flag1 ? this.openSound : this.closeSound, SoundSource.BLOCKS, 1.0F, world.getRandom().nextFloat() * 0.1F + 0.9F);
+                    world.gameEvent(null, flag1 ? GameEvent.BLOCK_OPEN : GameEvent.BLOCK_CLOSE, pos);
                 }
             }
 
@@ -171,6 +171,6 @@ public class FenceGateBlock extends HorizontalDirectionalBlock {
     }
 
     public static boolean connectsToDirection(BlockState state, Direction side) {
-        return ((Direction) state.getValue(FenceGateBlock.FACING)).getAxis() == side.getClockWise().getAxis();
+        return state.getValue(FenceGateBlock.FACING).getAxis() == side.getClockWise().getAxis();
     }
 }
diff --git a/src/main/java/net/minecraft/world/level/block/FireBlock.java b/src/main/java/net/minecraft/world/level/block/FireBlock.java
index d109831b45244ff046f10ecf36549696026db174..0d2b055027ade3b91dd3de1c5bfed09932b8efc6 100644
--- a/src/main/java/net/minecraft/world/level/block/FireBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/FireBlock.java
@@ -44,7 +44,7 @@ public class FireBlock extends BaseFireBlock {
     public static final BooleanProperty SOUTH = PipeBlock.SOUTH;
     public static final BooleanProperty WEST = PipeBlock.WEST;
     public static final BooleanProperty UP = PipeBlock.UP;
-    private static final Map<Direction, BooleanProperty> PROPERTY_BY_DIRECTION = (Map) PipeBlock.PROPERTY_BY_DIRECTION.entrySet().stream().filter((entry) -> {
+    private static final Map<Direction, BooleanProperty> PROPERTY_BY_DIRECTION = PipeBlock.PROPERTY_BY_DIRECTION.entrySet().stream().filter((entry) -> {
         return entry.getKey() != Direction.DOWN;
     }).collect(Util.toMap());
     private static final VoxelShape UP_AABB = Block.box(0.0D, 15.0D, 0.0D, 16.0D, 16.0D, 16.0D);
@@ -66,32 +66,32 @@ public class FireBlock extends BaseFireBlock {
 
     public FireBlock(BlockBehaviour.Properties settings) {
         super(settings, 1.0F);
-        this.registerDefaultState((BlockState) ((BlockState) ((BlockState) ((BlockState) ((BlockState) ((BlockState) ((BlockState) this.stateDefinition.any()).setValue(FireBlock.AGE, Integer.valueOf(0))).setValue(FireBlock.NORTH, Boolean.FALSE)).setValue(FireBlock.EAST, Boolean.FALSE)).setValue(FireBlock.SOUTH, Boolean.FALSE)).setValue(FireBlock.WEST, Boolean.FALSE)).setValue(FireBlock.UP, Boolean.FALSE));
+        this.registerDefaultState(this.stateDefinition.any().setValue(FireBlock.AGE, Integer.valueOf(0)).setValue(FireBlock.NORTH, Boolean.FALSE).setValue(FireBlock.EAST, Boolean.FALSE).setValue(FireBlock.SOUTH, Boolean.FALSE).setValue(FireBlock.WEST, Boolean.FALSE).setValue(FireBlock.UP, Boolean.FALSE));
         this.shapesCache = ImmutableMap.copyOf((Map) this.stateDefinition.getPossibleStates().stream().filter((iblockdata) -> {
-            return ((Integer) iblockdata.getValue(FireBlock.AGE)).intValue() == 0;
+            return iblockdata.getValue(FireBlock.AGE).intValue() == 0;
         }).collect(Collectors.toMap(Function.identity(), FireBlock::calculateShape)));
     }
 
     private static VoxelShape calculateShape(BlockState state) {
         VoxelShape voxelshape = Shapes.empty();
 
-        if (((Boolean) state.getValue(FireBlock.UP)).booleanValue()) {
+        if (state.getValue(FireBlock.UP).booleanValue()) {
             voxelshape = FireBlock.UP_AABB;
         }
 
-        if (((Boolean) state.getValue(FireBlock.NORTH)).booleanValue()) {
+        if (state.getValue(FireBlock.NORTH).booleanValue()) {
             voxelshape = Shapes.or(voxelshape, FireBlock.NORTH_AABB);
         }
 
-        if (((Boolean) state.getValue(FireBlock.SOUTH)).booleanValue()) {
+        if (state.getValue(FireBlock.SOUTH).booleanValue()) {
             voxelshape = Shapes.or(voxelshape, FireBlock.SOUTH_AABB);
         }
 
-        if (((Boolean) state.getValue(FireBlock.EAST)).booleanValue()) {
+        if (state.getValue(FireBlock.EAST).booleanValue()) {
             voxelshape = Shapes.or(voxelshape, FireBlock.EAST_AABB);
         }
 
-        if (((Boolean) state.getValue(FireBlock.WEST)).booleanValue()) {
+        if (state.getValue(FireBlock.WEST).booleanValue()) {
             voxelshape = Shapes.or(voxelshape, FireBlock.WEST_AABB);
         }
 
@@ -101,7 +101,7 @@ public class FireBlock extends BaseFireBlock {
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
         // CraftBukkit start
-        if (!(world instanceof ServerLevel)) return this.canSurvive(state, world, pos) ? (BlockState) this.getStateWithAge(world, pos, ((Integer) state.getValue(FireBlock.AGE)).intValue()) : Blocks.AIR.defaultBlockState(); // Paper - don't fire events in world generation
+        if (!(world instanceof ServerLevel)) return this.canSurvive(state, world, pos) ? this.getStateWithAge(world, pos, state.getValue(FireBlock.AGE).intValue()) : Blocks.AIR.defaultBlockState(); // Paper - don't fire events in world generation
         if (!this.canSurvive(state, world, pos)) {
             // Suppress during worldgen
             if (!(world instanceof Level)) {
@@ -117,13 +117,13 @@ public class FireBlock extends BaseFireBlock {
                 return blockState.getHandle();
             }
         }
-        return this.getStateWithAge(world, pos, ((Integer) state.getValue(FireBlock.AGE)).intValue()); // Paper - diff on change, see "don't fire events in world generation"
+        return this.getStateWithAge(world, pos, state.getValue(FireBlock.AGE).intValue()); // Paper - diff on change, see "don't fire events in world generation"
         // CraftBukkit end
     }
 
     @Override
     public VoxelShape getShape(BlockState state, BlockGetter world, BlockPos pos, CollisionContext context) {
-        return (VoxelShape) this.shapesCache.get(state.setValue(FireBlock.AGE, Integer.valueOf(0)));
+        return this.shapesCache.get(state.setValue(FireBlock.AGE, Integer.valueOf(0)));
     }
 
     @Override
@@ -142,10 +142,10 @@ public class FireBlock extends BaseFireBlock {
 
             for (int j = 0; j < i; ++j) {
                 Direction enumdirection = aenumdirection[j];
-                BooleanProperty blockstateboolean = (BooleanProperty) FireBlock.PROPERTY_BY_DIRECTION.get(enumdirection);
+                BooleanProperty blockstateboolean = FireBlock.PROPERTY_BY_DIRECTION.get(enumdirection);
 
                 if (blockstateboolean != null) {
-                    iblockdata1 = (BlockState) iblockdata1.setValue(blockstateboolean, Boolean.valueOf(this.canBurn(world.getBlockState(pos.relative(enumdirection)))));
+                    iblockdata1 = iblockdata1.setValue(blockstateboolean, Boolean.valueOf(this.canBurn(world.getBlockState(pos.relative(enumdirection)))));
                 }
             }
 
@@ -164,7 +164,7 @@ public class FireBlock extends BaseFireBlock {
 
     @Override
     public void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
-        world.scheduleTick(pos, (Block) this, FireBlock.getFireTickDelay(world)); // Paper
+        world.scheduleTick(pos, this, FireBlock.getFireTickDelay(world)); // Paper
         if (world.getGameRules().getBoolean(GameRules.RULE_DOFIRETICK)) {
             if (!state.canSurvive(world, pos)) {
                 fireExtinguished(world, pos); // CraftBukkit - invalid place location
@@ -172,7 +172,7 @@ public class FireBlock extends BaseFireBlock {
 
             BlockState iblockdata1 = world.getBlockState(pos.below());
             boolean flag = iblockdata1.is(world.dimensionType().infiniburn());
-            int i = ((Integer) state.getValue(FireBlock.AGE)).intValue();
+            int i = state.getValue(FireBlock.AGE).intValue();
 
             if (!flag && world.isRaining() && this.isNearRain(world, pos) && random.nextFloat() < 0.2F + (float) i * 0.03F) {
                 fireExtinguished(world, pos); // CraftBukkit - extinguished by rain
@@ -180,7 +180,7 @@ public class FireBlock extends BaseFireBlock {
                 int j = Math.min(15, i + random.nextInt(3) / 2);
 
                 if (i != j) {
-                    state = (BlockState) state.setValue(FireBlock.AGE, Integer.valueOf(j));
+                    state = state.setValue(FireBlock.AGE, Integer.valueOf(j));
                     world.setBlock(pos, state, 4);
                 }
 
@@ -262,11 +262,11 @@ public class FireBlock extends BaseFireBlock {
     }
 
     private int getBurnOdds(BlockState state) {
-        return state.hasProperty(BlockStateProperties.WATERLOGGED) && ((Boolean) state.getValue(BlockStateProperties.WATERLOGGED)).booleanValue() ? 0 : this.burnOdds.getInt(state.getBlock());
+        return state.hasProperty(BlockStateProperties.WATERLOGGED) && state.getValue(BlockStateProperties.WATERLOGGED).booleanValue() ? 0 : this.burnOdds.getInt(state.getBlock());
     }
 
     private int getIgniteOdds(BlockState state) {
-        return state.hasProperty(BlockStateProperties.WATERLOGGED) && ((Boolean) state.getValue(BlockStateProperties.WATERLOGGED)).booleanValue() ? 0 : this.igniteOdds.getInt(state.getBlock());
+        return state.hasProperty(BlockStateProperties.WATERLOGGED) && state.getValue(BlockStateProperties.WATERLOGGED).booleanValue() ? 0 : this.igniteOdds.getInt(state.getBlock());
     }
 
     private void trySpread(Level world, BlockPos blockposition, int i, RandomSource randomsource, int j, BlockPos sourceposition) { // CraftBukkit add sourceposition
@@ -314,7 +314,7 @@ public class FireBlock extends BaseFireBlock {
     private BlockState getStateWithAge(LevelAccessor world, BlockPos pos, int age) {
         BlockState iblockdata = getState(world, pos);
 
-        return iblockdata.is(Blocks.FIRE) ? (BlockState) iblockdata.setValue(FireBlock.AGE, Integer.valueOf(age)) : iblockdata;
+        return iblockdata.is(Blocks.FIRE) ? iblockdata.setValue(FireBlock.AGE, Integer.valueOf(age)) : iblockdata;
     }
 
     private boolean isValidFireLocation(BlockGetter world, BlockPos pos) {
diff --git a/src/main/java/net/minecraft/world/level/block/FrogspawnBlock.java b/src/main/java/net/minecraft/world/level/block/FrogspawnBlock.java
index bebcdc70c4cb01764428836fff76f03b94f2eae8..87e93145aba2132b4841cd5763ca00c9d34231f2 100644
--- a/src/main/java/net/minecraft/world/level/block/FrogspawnBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/FrogspawnBlock.java
@@ -91,7 +91,7 @@ public class FrogspawnBlock extends Block {
         }
         // Paper end
         this.destroyBlock(world, pos);
-        world.playSound((Player)null, pos, SoundEvents.FROGSPAWN_HATCH, SoundSource.BLOCKS, 1.0F, 1.0F);
+        world.playSound(null, pos, SoundEvents.FROGSPAWN_HATCH, SoundSource.BLOCKS, 1.0F, 1.0F);
         this.spawnTadpoles(world, pos, random);
     }
 
@@ -117,7 +117,7 @@ public class FrogspawnBlock extends Block {
     }
 
     private double getRandomTadpolePositionOffset(RandomSource random) {
-        double d = (double)(Tadpole.HITBOX_WIDTH / 2.0F);
+        double d = Tadpole.HITBOX_WIDTH / 2.0F;
         return Mth.clamp(random.nextDouble(), d, 1.0D - d);
     }
 
diff --git a/src/main/java/net/minecraft/world/level/block/GrowingPlantHeadBlock.java b/src/main/java/net/minecraft/world/level/block/GrowingPlantHeadBlock.java
index 9bba5ea3f203d6e2823331142fa602f839c2e12f..fef80a489a9b179d5285d5c16c87ab51c712459c 100644
--- a/src/main/java/net/minecraft/world/level/block/GrowingPlantHeadBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/GrowingPlantHeadBlock.java
@@ -25,17 +25,17 @@ public abstract class GrowingPlantHeadBlock extends GrowingPlantBlock implements
     protected GrowingPlantHeadBlock(BlockBehaviour.Properties settings, Direction growthDirection, VoxelShape outlineShape, boolean tickWater, double growthChance) {
         super(settings, growthDirection, outlineShape, tickWater);
         this.growPerTickProbability = growthChance;
-        this.registerDefaultState((BlockState) ((BlockState) this.stateDefinition.any()).setValue(GrowingPlantHeadBlock.AGE, Integer.valueOf(0)));
+        this.registerDefaultState(this.stateDefinition.any().setValue(GrowingPlantHeadBlock.AGE, Integer.valueOf(0)));
     }
 
     @Override
     public BlockState getStateForPlacement(LevelAccessor world) {
-        return (BlockState) this.defaultBlockState().setValue(GrowingPlantHeadBlock.AGE, Integer.valueOf(world.getRandom().nextInt(25)));
+        return this.defaultBlockState().setValue(GrowingPlantHeadBlock.AGE, Integer.valueOf(world.getRandom().nextInt(25)));
     }
 
     @Override
     public boolean isRandomlyTicking(BlockState state) {
-        return ((Integer) state.getValue(GrowingPlantHeadBlock.AGE)).intValue() < 25;
+        return state.getValue(GrowingPlantHeadBlock.AGE).intValue() < 25;
     }
 
     @Override
@@ -51,7 +51,7 @@ public abstract class GrowingPlantHeadBlock extends GrowingPlantBlock implements
         } else {
             modifier = world.spigotConfig.caveVinesModifier;
         }
-        if (((Integer) state.getValue(GrowingPlantHeadBlock.AGE)).intValue() < 25 && random.nextDouble() < ((modifier / 100.0D) * this.growPerTickProbability)) { // Spigot - SPIGOT-7159: Better modifier resolution
+        if (state.getValue(GrowingPlantHeadBlock.AGE).intValue() < 25 && random.nextDouble() < ((modifier / 100.0D) * this.growPerTickProbability)) { // Spigot - SPIGOT-7159: Better modifier resolution
             // Spigot end
             BlockPos blockposition1 = pos.relative(this.growthDirection);
 
@@ -69,15 +69,15 @@ public abstract class GrowingPlantHeadBlock extends GrowingPlantBlock implements
     // Paper end
 
     protected BlockState getGrowIntoState(BlockState state, RandomSource random) {
-        return (BlockState) state.cycle(GrowingPlantHeadBlock.AGE);
+        return state.cycle(GrowingPlantHeadBlock.AGE);
     }
 
     public BlockState getMaxAgeState(BlockState state) {
-        return (BlockState) state.setValue(GrowingPlantHeadBlock.AGE, Integer.valueOf(25));
+        return state.setValue(GrowingPlantHeadBlock.AGE, Integer.valueOf(25));
     }
 
     public boolean isMaxAge(BlockState state) {
-        return ((Integer) state.getValue(GrowingPlantHeadBlock.AGE)).intValue() == 25;
+        return state.getValue(GrowingPlantHeadBlock.AGE).intValue() == 25;
     }
 
     protected BlockState updateBodyAfterConvertedFromHead(BlockState from, BlockState to) {
@@ -87,14 +87,14 @@ public abstract class GrowingPlantHeadBlock extends GrowingPlantBlock implements
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
         if (direction == this.growthDirection.getOpposite() && !state.canSurvive(world, pos)) {
-            world.scheduleTick(pos, (Block) this, 1);
+            world.scheduleTick(pos, this, 1);
         }
 
-        if (direction == this.growthDirection && (neighborState.is((Block) this) || neighborState.is(this.getBodyBlock()))) {
+        if (direction == this.growthDirection && (neighborState.is(this) || neighborState.is(this.getBodyBlock()))) {
             return this.updateBodyAfterConvertedFromHead(state, this.getBodyBlock().defaultBlockState());
         } else {
             if (this.scheduleFluidTicks) {
-                world.scheduleTick(pos, (Fluid) Fluids.WATER, Fluids.WATER.getTickDelay(world));
+                world.scheduleTick(pos, Fluids.WATER, Fluids.WATER.getTickDelay(world));
             }
 
             return super.updateShape(state, direction, neighborState, world, pos, neighborPos);
@@ -119,11 +119,11 @@ public abstract class GrowingPlantHeadBlock extends GrowingPlantBlock implements
     @Override
     public void performBonemeal(ServerLevel world, RandomSource random, BlockPos pos, BlockState state) {
         BlockPos blockposition1 = pos.relative(this.growthDirection);
-        int i = Math.min(((Integer) state.getValue(GrowingPlantHeadBlock.AGE)).intValue() + 1, 25);
+        int i = Math.min(state.getValue(GrowingPlantHeadBlock.AGE).intValue() + 1, 25);
         int j = this.getBlocksToGrowWhenBonemealed(random);
 
         for (int k = 0; k < j && this.canGrowInto(world.getBlockState(blockposition1)); ++k) {
-            world.setBlockAndUpdate(blockposition1, (BlockState) state.setValue(GrowingPlantHeadBlock.AGE, Integer.valueOf(i)));
+            world.setBlockAndUpdate(blockposition1, state.setValue(GrowingPlantHeadBlock.AGE, Integer.valueOf(i)));
             blockposition1 = blockposition1.relative(this.growthDirection);
             i = Math.min(i + 1, 25);
         }
diff --git a/src/main/java/net/minecraft/world/level/block/HopperBlock.java b/src/main/java/net/minecraft/world/level/block/HopperBlock.java
index fa7f8afefca850689e9c6303b9d7d2144a2aa209..2e61c279c1919fa58230886a111aa2d3cdd7b10a 100644
--- a/src/main/java/net/minecraft/world/level/block/HopperBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/HopperBlock.java
@@ -58,7 +58,7 @@ public class HopperBlock extends BaseEntityBlock {
 
     @Override
     public VoxelShape getShape(BlockState state, BlockGetter world, BlockPos pos, CollisionContext context) {
-        switch ((Direction)state.getValue(FACING)) {
+        switch (state.getValue(FACING)) {
             case DOWN:
                 return DOWN_SHAPE;
             case NORTH:
@@ -76,7 +76,7 @@ public class HopperBlock extends BaseEntityBlock {
 
     @Override
     public VoxelShape getInteractionShape(BlockState state, BlockGetter world, BlockPos pos) {
-        switch ((Direction)state.getValue(FACING)) {
+        switch (state.getValue(FACING)) {
             case DOWN:
                 return DOWN_INTERACTION_SHAPE;
             case NORTH:
diff --git a/src/main/java/net/minecraft/world/level/block/InfestedBlock.java b/src/main/java/net/minecraft/world/level/block/InfestedBlock.java
index acbcd3653d85e38a45247e8aa24c607a6d01f56c..a75520cfb0f7d2759264699ee93b299e8325cb7b 100644
--- a/src/main/java/net/minecraft/world/level/block/InfestedBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/InfestedBlock.java
@@ -39,10 +39,10 @@ public class InfestedBlock extends Block {
     }
 
     private void spawnInfestation(ServerLevel world, BlockPos pos) {
-        Silverfish entitysilverfish = (Silverfish) EntityType.SILVERFISH.create(world);
+        Silverfish entitysilverfish = EntityType.SILVERFISH.create(world);
 
         if (entitysilverfish != null) {
-            entitysilverfish.moveTo((double) pos.getX() + 0.5D, (double) pos.getY(), (double) pos.getZ() + 0.5D, 0.0F, 0.0F);
+            entitysilverfish.moveTo((double) pos.getX() + 0.5D, pos.getY(), (double) pos.getZ() + 0.5D, 0.0F, 0.0F);
             world.addFreshEntity(entitysilverfish, SpawnReason.SILVERFISH_BLOCK); // CraftBukkit - add SpawnReason
             entitysilverfish.spawnAnim();
         }
@@ -60,7 +60,7 @@ public class InfestedBlock extends Block {
 
     public static BlockState infestedStateByHost(BlockState regularState) {
         return InfestedBlock.getNewStateWithProperties(InfestedBlock.HOST_TO_INFESTED_STATES, regularState, () -> {
-            return ((Block) InfestedBlock.BLOCK_BY_HOST_BLOCK.get(regularState.getBlock())).defaultBlockState();
+            return InfestedBlock.BLOCK_BY_HOST_BLOCK.get(regularState.getBlock()).defaultBlockState();
         });
     }
 
@@ -71,12 +71,12 @@ public class InfestedBlock extends Block {
     }
 
     private static BlockState getNewStateWithProperties(Map<BlockState, BlockState> stateMap, BlockState fromState, Supplier<BlockState> toStateSupplier) {
-        return (BlockState) stateMap.computeIfAbsent(fromState, (iblockdata1) -> {
-            BlockState iblockdata2 = (BlockState) toStateSupplier.get();
+        return stateMap.computeIfAbsent(fromState, (iblockdata1) -> {
+            BlockState iblockdata2 = toStateSupplier.get();
 
             Property iblockstate;
 
-            for (Iterator iterator = iblockdata1.getProperties().iterator(); iterator.hasNext(); iblockdata2 = iblockdata2.hasProperty(iblockstate) ? (BlockState) iblockdata2.setValue(iblockstate, iblockdata1.getValue(iblockstate)) : iblockdata2) {
+            for (Iterator iterator = iblockdata1.getProperties().iterator(); iterator.hasNext(); iblockdata2 = iblockdata2.hasProperty(iblockstate) ? iblockdata2.setValue(iblockstate, iblockdata1.getValue(iblockstate)) : iblockdata2) {
                 iblockstate = (Property) iterator.next();
             }
 
diff --git a/src/main/java/net/minecraft/world/level/block/JukeboxBlock.java b/src/main/java/net/minecraft/world/level/block/JukeboxBlock.java
index 3c5d241b073a2b4a7a6a123c05d7dd74fee28abd..0241914529f40ff9d1b043a5af87ca038c8f7f5e 100644
--- a/src/main/java/net/minecraft/world/level/block/JukeboxBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/JukeboxBlock.java
@@ -33,7 +33,7 @@ public class JukeboxBlock extends BaseEntityBlock {
 
     protected JukeboxBlock(BlockBehaviour.Properties settings) {
         super(settings);
-        this.registerDefaultState((BlockState) ((BlockState) this.stateDefinition.any()).setValue(JukeboxBlock.HAS_RECORD, Boolean.FALSE));
+        this.registerDefaultState(this.stateDefinition.any().setValue(JukeboxBlock.HAS_RECORD, Boolean.FALSE));
     }
 
     @Override
@@ -42,16 +42,16 @@ public class JukeboxBlock extends BaseEntityBlock {
         CompoundTag nbttagcompound = BlockItem.getBlockEntityData(itemStack);
 
         if (nbttagcompound != null && nbttagcompound.contains("RecordItem")) {
-            world.setBlock(pos, (BlockState) state.setValue(JukeboxBlock.HAS_RECORD, Boolean.TRUE), 2);
+            world.setBlock(pos, state.setValue(JukeboxBlock.HAS_RECORD, Boolean.TRUE), 2);
         }
 
     }
 
     @Override
     public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
-        if (((Boolean) state.getValue(JukeboxBlock.HAS_RECORD)).booleanValue()) {
+        if (state.getValue(JukeboxBlock.HAS_RECORD).booleanValue()) {
             this.dropRecording(world, pos);
-            state = (BlockState) state.setValue(JukeboxBlock.HAS_RECORD, Boolean.FALSE);
+            state = state.setValue(JukeboxBlock.HAS_RECORD, Boolean.FALSE);
             world.gameEvent(GameEvent.JUKEBOX_STOP_PLAY, pos, GameEvent.Context.of(state));
             world.setBlock(pos, state, 2);
             world.gameEvent(GameEvent.BLOCK_CHANGE, pos, GameEvent.Context.of(player, state));
@@ -75,7 +75,7 @@ public class JukeboxBlock extends BaseEntityBlock {
             tileentityjukebox.setRecord(stack);
             // CraftBukkit end
             tileentityjukebox.playRecord();
-            world.setBlock(pos, (BlockState) state.setValue(JukeboxBlock.HAS_RECORD, Boolean.TRUE), 2);
+            world.setBlock(pos, state.setValue(JukeboxBlock.HAS_RECORD, Boolean.TRUE), 2);
             world.gameEvent(GameEvent.BLOCK_CHANGE, pos, GameEvent.Context.of(user, state));
         }
 
@@ -152,6 +152,6 @@ public class JukeboxBlock extends BaseEntityBlock {
     @Nullable
     @Override
     public <T extends BlockEntity> BlockEntityTicker<T> getTicker(Level world, BlockState state, BlockEntityType<T> type) {
-        return ((Boolean) state.getValue(JukeboxBlock.HAS_RECORD)).booleanValue() ? createTickerHelper(type, BlockEntityType.JUKEBOX, JukeboxBlockEntity::playRecordTick) : null;
+        return state.getValue(JukeboxBlock.HAS_RECORD).booleanValue() ? createTickerHelper(type, BlockEntityType.JUKEBOX, JukeboxBlockEntity::playRecordTick) : null;
     }
 }
diff --git a/src/main/java/net/minecraft/world/level/block/LayeredCauldronBlock.java b/src/main/java/net/minecraft/world/level/block/LayeredCauldronBlock.java
index 34f07bc5637b3676c63f122aca91cd0f4fdc7ea8..6faf1fd3df18d139c15550a32614842590d602a6 100644
--- a/src/main/java/net/minecraft/world/level/block/LayeredCauldronBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/LayeredCauldronBlock.java
@@ -40,12 +40,12 @@ public class LayeredCauldronBlock extends AbstractCauldronBlock {
     public LayeredCauldronBlock(BlockBehaviour.Properties settings, Predicate<Biome.Precipitation> precipitationPredicate, Map<Item, CauldronInteraction> behaviorMap) {
         super(settings, behaviorMap);
         this.fillPredicate = precipitationPredicate;
-        this.registerDefaultState((BlockState) ((BlockState) this.stateDefinition.any()).setValue(LayeredCauldronBlock.LEVEL, Integer.valueOf(1)));
+        this.registerDefaultState(this.stateDefinition.any().setValue(LayeredCauldronBlock.LEVEL, Integer.valueOf(1)));
     }
 
     @Override
     public boolean isFull(BlockState state) {
-        return ((Integer) state.getValue(LayeredCauldronBlock.LEVEL)).intValue() == 3;
+        return state.getValue(LayeredCauldronBlock.LEVEL).intValue() == 3;
     }
 
     @Override
@@ -55,7 +55,7 @@ public class LayeredCauldronBlock extends AbstractCauldronBlock {
 
     @Override
     protected double getContentHeight(BlockState state) {
-        return (6.0D + ((Integer) state.getValue(LayeredCauldronBlock.LEVEL)).doubleValue() * 3.0D) / 16.0D;
+        return (6.0D + state.getValue(LayeredCauldronBlock.LEVEL).doubleValue() * 3.0D) / 16.0D;
     }
 
     @Override
@@ -90,8 +90,8 @@ public class LayeredCauldronBlock extends AbstractCauldronBlock {
     }
 
     public static boolean lowerFillLevel(BlockState iblockdata, Level world, BlockPos blockposition, Entity entity, CauldronLevelChangeEvent.ChangeReason reason) {
-        int i = ((Integer) iblockdata.getValue(LayeredCauldronBlock.LEVEL)).intValue() - 1;
-        BlockState iblockdata1 = i == 0 ? Blocks.CAULDRON.defaultBlockState() : (BlockState) iblockdata.setValue(LayeredCauldronBlock.LEVEL, Integer.valueOf(i));
+        int i = iblockdata.getValue(LayeredCauldronBlock.LEVEL).intValue() - 1;
+        BlockState iblockdata1 = i == 0 ? Blocks.CAULDRON.defaultBlockState() : iblockdata.setValue(LayeredCauldronBlock.LEVEL, Integer.valueOf(i));
 
         return LayeredCauldronBlock.changeLevel(iblockdata, world, blockposition, iblockdata1, entity, reason);
     }
@@ -117,8 +117,8 @@ public class LayeredCauldronBlock extends AbstractCauldronBlock {
 
     @Override
     public void handlePrecipitation(BlockState state, Level world, BlockPos pos, Biome.Precipitation precipitation) {
-        if (CauldronBlock.shouldHandlePrecipitation(world, precipitation) && ((Integer) state.getValue(LayeredCauldronBlock.LEVEL)).intValue() != 3 && this.fillPredicate.test(precipitation)) {
-            BlockState iblockdata1 = (BlockState) state.cycle(LayeredCauldronBlock.LEVEL);
+        if (CauldronBlock.shouldHandlePrecipitation(world, precipitation) && state.getValue(LayeredCauldronBlock.LEVEL).intValue() != 3 && this.fillPredicate.test(precipitation)) {
+            BlockState iblockdata1 = state.cycle(LayeredCauldronBlock.LEVEL);
 
             LayeredCauldronBlock.changeLevel(state, world, pos, iblockdata1, null, CauldronLevelChangeEvent.ChangeReason.NATURAL_FILL); // CraftBukkit
         }
@@ -126,7 +126,7 @@ public class LayeredCauldronBlock extends AbstractCauldronBlock {
 
     @Override
     public int getAnalogOutputSignal(BlockState state, Level world, BlockPos pos) {
-        return ((Integer) state.getValue(LayeredCauldronBlock.LEVEL)).intValue();
+        return state.getValue(LayeredCauldronBlock.LEVEL).intValue();
     }
 
     @Override
@@ -137,7 +137,7 @@ public class LayeredCauldronBlock extends AbstractCauldronBlock {
     @Override
     protected void receiveStalactiteDrip(BlockState state, Level world, BlockPos pos, Fluid fluid) {
         if (!this.isFull(state)) {
-            BlockState iblockdata1 = (BlockState) state.setValue(LayeredCauldronBlock.LEVEL, Integer.valueOf((Integer) state.getValue(LayeredCauldronBlock.LEVEL) + 1));
+            BlockState iblockdata1 = state.setValue(LayeredCauldronBlock.LEVEL, Integer.valueOf(state.getValue(LayeredCauldronBlock.LEVEL) + 1));
 
             // CraftBukkit start
             if (!LayeredCauldronBlock.changeLevel(state, world, pos, iblockdata1, null, CauldronLevelChangeEvent.ChangeReason.NATURAL_FILL)) {
diff --git a/src/main/java/net/minecraft/world/level/block/LeavesBlock.java b/src/main/java/net/minecraft/world/level/block/LeavesBlock.java
index e67a77c790af14509f3a3bf3aa2b5012511b3c7e..90aad7d37312635d9951b1e530e429154f7f2c74 100644
--- a/src/main/java/net/minecraft/world/level/block/LeavesBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/LeavesBlock.java
@@ -33,7 +33,7 @@ public class LeavesBlock extends Block implements SimpleWaterloggedBlock {
 
     public LeavesBlock(BlockBehaviour.Properties settings) {
         super(settings);
-        this.registerDefaultState((BlockState) ((BlockState) ((BlockState) ((BlockState) this.stateDefinition.any()).setValue(LeavesBlock.DISTANCE, Integer.valueOf(7))).setValue(LeavesBlock.PERSISTENT, Boolean.FALSE)).setValue(LeavesBlock.WATERLOGGED, Boolean.FALSE));
+        this.registerDefaultState(this.stateDefinition.any().setValue(LeavesBlock.DISTANCE, Integer.valueOf(7)).setValue(LeavesBlock.PERSISTENT, Boolean.FALSE).setValue(LeavesBlock.WATERLOGGED, Boolean.FALSE));
     }
 
     @Override
@@ -43,7 +43,7 @@ public class LeavesBlock extends Block implements SimpleWaterloggedBlock {
 
     @Override
     public boolean isRandomlyTicking(BlockState state) {
-        return ((Integer) state.getValue(LeavesBlock.DISTANCE)).intValue() == 7 && !((Boolean) state.getValue(LeavesBlock.PERSISTENT)).booleanValue();
+        return state.getValue(LeavesBlock.DISTANCE).intValue() == 7 && !state.getValue(LeavesBlock.PERSISTENT).booleanValue();
     }
 
     @Override
@@ -64,7 +64,7 @@ public class LeavesBlock extends Block implements SimpleWaterloggedBlock {
     }
 
     protected boolean decaying(BlockState state) {
-        return !((Boolean) state.getValue(LeavesBlock.PERSISTENT)).booleanValue() && ((Integer) state.getValue(LeavesBlock.DISTANCE)).intValue() == 7;
+        return !state.getValue(LeavesBlock.PERSISTENT).booleanValue() && state.getValue(LeavesBlock.DISTANCE).intValue() == 7;
     }
 
     @Override
@@ -79,14 +79,14 @@ public class LeavesBlock extends Block implements SimpleWaterloggedBlock {
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
-        if (((Boolean) state.getValue(LeavesBlock.WATERLOGGED)).booleanValue()) {
-            world.scheduleTick(pos, (Fluid) Fluids.WATER, Fluids.WATER.getTickDelay(world));
+        if (state.getValue(LeavesBlock.WATERLOGGED).booleanValue()) {
+            world.scheduleTick(pos, Fluids.WATER, Fluids.WATER.getTickDelay(world));
         }
 
         int i = LeavesBlock.getDistanceAt(neighborState) + 1;
 
-        if (i != 1 || ((Integer) state.getValue(LeavesBlock.DISTANCE)).intValue() != i) {
-            world.scheduleTick(pos, (Block) this, 1);
+        if (i != 1 || state.getValue(LeavesBlock.DISTANCE).intValue() != i) {
+            world.scheduleTick(pos, this, 1);
         }
 
         return state;
@@ -108,16 +108,16 @@ public class LeavesBlock extends Block implements SimpleWaterloggedBlock {
             }
         }
 
-        return (BlockState) state.setValue(LeavesBlock.DISTANCE, Integer.valueOf(i));
+        return state.setValue(LeavesBlock.DISTANCE, Integer.valueOf(i));
     }
 
     private static int getDistanceAt(BlockState state) {
-        return state.is(BlockTags.LOGS) ? 0 : (state.getBlock() instanceof LeavesBlock ? ((Integer) state.getValue(LeavesBlock.DISTANCE)).intValue() : 7);
+        return state.is(BlockTags.LOGS) ? 0 : (state.getBlock() instanceof LeavesBlock ? state.getValue(LeavesBlock.DISTANCE).intValue() : 7);
     }
 
     @Override
     public FluidState getFluidState(BlockState state) {
-        return ((Boolean) state.getValue(LeavesBlock.WATERLOGGED)).booleanValue() ? Fluids.WATER.getSource(false) : super.getFluidState(state);
+        return state.getValue(LeavesBlock.WATERLOGGED).booleanValue() ? Fluids.WATER.getSource(false) : super.getFluidState(state);
     }
 
     @Override
@@ -146,7 +146,7 @@ public class LeavesBlock extends Block implements SimpleWaterloggedBlock {
     @Override
     public BlockState getStateForPlacement(BlockPlaceContext ctx) {
         FluidState fluid = ctx.getLevel().getFluidState(ctx.getClickedPos());
-        BlockState iblockdata = (BlockState) ((BlockState) this.defaultBlockState().setValue(LeavesBlock.PERSISTENT, Boolean.TRUE)).setValue(LeavesBlock.WATERLOGGED, Boolean.valueOf(fluid.getType() == Fluids.WATER));
+        BlockState iblockdata = this.defaultBlockState().setValue(LeavesBlock.PERSISTENT, Boolean.TRUE).setValue(LeavesBlock.WATERLOGGED, Boolean.valueOf(fluid.getType() == Fluids.WATER));
 
         return LeavesBlock.updateDistance(iblockdata, ctx.getLevel(), ctx.getClickedPos());
     }
diff --git a/src/main/java/net/minecraft/world/level/block/LecternBlock.java b/src/main/java/net/minecraft/world/level/block/LecternBlock.java
index 612845a2d5242664b69e60ea761535d5ed207b76..9a43f1bca340b8881a81b4433c6bf45e7337a844 100644
--- a/src/main/java/net/minecraft/world/level/block/LecternBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/LecternBlock.java
@@ -54,7 +54,7 @@ public class LecternBlock extends BaseEntityBlock {
 
     protected LecternBlock(BlockBehaviour.Properties settings) {
         super(settings);
-        this.registerDefaultState((BlockState) ((BlockState) ((BlockState) ((BlockState) this.stateDefinition.any()).setValue(LecternBlock.FACING, Direction.NORTH)).setValue(LecternBlock.POWERED, Boolean.FALSE)).setValue(LecternBlock.HAS_BOOK, Boolean.FALSE));
+        this.registerDefaultState(this.stateDefinition.any().setValue(LecternBlock.FACING, Direction.NORTH).setValue(LecternBlock.POWERED, Boolean.FALSE).setValue(LecternBlock.HAS_BOOK, Boolean.FALSE));
     }
 
     @Override
@@ -87,7 +87,7 @@ public class LecternBlock extends BaseEntityBlock {
             }
         }
 
-        return (BlockState) ((BlockState) this.defaultBlockState().setValue(LecternBlock.FACING, ctx.getHorizontalDirection().getOpposite())).setValue(LecternBlock.HAS_BOOK, Boolean.valueOf(flag));
+        return this.defaultBlockState().setValue(LecternBlock.FACING, ctx.getHorizontalDirection().getOpposite()).setValue(LecternBlock.HAS_BOOK, Boolean.valueOf(flag));
     }
 
     @Override
@@ -97,7 +97,7 @@ public class LecternBlock extends BaseEntityBlock {
 
     @Override
     public VoxelShape getShape(BlockState state, BlockGetter world, BlockPos pos, CollisionContext context) {
-        switch ((Direction) state.getValue(LecternBlock.FACING)) {
+        switch (state.getValue(LecternBlock.FACING)) {
             case NORTH:
                 return LecternBlock.SHAPE_NORTH;
             case SOUTH:
@@ -113,12 +113,12 @@ public class LecternBlock extends BaseEntityBlock {
 
     @Override
     public BlockState rotate(BlockState state, Rotation rotation) {
-        return (BlockState) state.setValue(LecternBlock.FACING, rotation.rotate((Direction) state.getValue(LecternBlock.FACING)));
+        return state.setValue(LecternBlock.FACING, rotation.rotate(state.getValue(LecternBlock.FACING)));
     }
 
     @Override
     public BlockState mirror(BlockState state, Mirror mirror) {
-        return state.rotate(mirror.getRotation((Direction) state.getValue(LecternBlock.FACING)));
+        return state.rotate(mirror.getRotation(state.getValue(LecternBlock.FACING)));
     }
 
     @Override
@@ -132,7 +132,7 @@ public class LecternBlock extends BaseEntityBlock {
     }
 
     public static boolean tryPlaceBook(@Nullable Player player, Level world, BlockPos pos, BlockState state, ItemStack stack) {
-        if (!((Boolean) state.getValue(LecternBlock.HAS_BOOK)).booleanValue()) {
+        if (!state.getValue(LecternBlock.HAS_BOOK).booleanValue()) {
             if (!world.isClientSide) {
                 LecternBlock.placeBook(player, world, pos, state, stack);
             }
@@ -151,14 +151,14 @@ public class LecternBlock extends BaseEntityBlock {
 
             tileentitylectern.setBook(stack.split(1));
             LecternBlock.resetBookState(world, pos, state, true);
-            world.playSound((Player) null, pos, SoundEvents.BOOK_PUT, SoundSource.BLOCKS, 1.0F, 1.0F);
-            world.gameEvent((Entity) player, GameEvent.BLOCK_CHANGE, pos);
+            world.playSound(null, pos, SoundEvents.BOOK_PUT, SoundSource.BLOCKS, 1.0F, 1.0F);
+            world.gameEvent(player, GameEvent.BLOCK_CHANGE, pos);
         }
 
     }
 
     public static void resetBookState(Level world, BlockPos pos, BlockState state, boolean hasBook) {
-        world.setBlock(pos, (BlockState) ((BlockState) state.setValue(LecternBlock.POWERED, Boolean.FALSE)).setValue(LecternBlock.HAS_BOOK, Boolean.valueOf(hasBook)), 3);
+        world.setBlock(pos, state.setValue(LecternBlock.POWERED, Boolean.FALSE).setValue(LecternBlock.HAS_BOOK, Boolean.valueOf(hasBook)), 3);
         LecternBlock.updateBelow(world, pos, state);
     }
 
@@ -169,7 +169,7 @@ public class LecternBlock extends BaseEntityBlock {
     }
 
     private static void changePowered(Level world, BlockPos pos, BlockState state, boolean powered) {
-        world.setBlock(pos, (BlockState) state.setValue(LecternBlock.POWERED, Boolean.valueOf(powered)), 3);
+        world.setBlock(pos, state.setValue(LecternBlock.POWERED, Boolean.valueOf(powered)), 3);
         LecternBlock.updateBelow(world, pos, state);
     }
 
@@ -185,11 +185,11 @@ public class LecternBlock extends BaseEntityBlock {
     @Override
     public void onRemove(BlockState state, Level world, BlockPos pos, BlockState newState, boolean moved) {
         if (!state.is(newState.getBlock())) {
-            if (((Boolean) state.getValue(LecternBlock.HAS_BOOK)).booleanValue()) {
+            if (state.getValue(LecternBlock.HAS_BOOK).booleanValue()) {
                 this.popBook(state, world, pos);
             }
 
-            if (((Boolean) state.getValue(LecternBlock.POWERED)).booleanValue()) {
+            if (state.getValue(LecternBlock.POWERED).booleanValue()) {
                 world.updateNeighborsAt(pos.below(), this);
             }
 
@@ -202,12 +202,12 @@ public class LecternBlock extends BaseEntityBlock {
 
         if (tileentity instanceof LecternBlockEntity) {
             LecternBlockEntity tileentitylectern = (LecternBlockEntity) tileentity;
-            Direction enumdirection = (Direction) state.getValue(LecternBlock.FACING);
+            Direction enumdirection = state.getValue(LecternBlock.FACING);
             ItemStack itemstack = tileentitylectern.getBook().copy();
             if (itemstack.isEmpty()) return; // CraftBukkit - SPIGOT-5500
             float f = 0.25F * (float) enumdirection.getStepX();
             float f1 = 0.25F * (float) enumdirection.getStepZ();
-            ItemEntity entityitem = new ItemEntity(world, (double) pos.getX() + 0.5D + (double) f, (double) (pos.getY() + 1), (double) pos.getZ() + 0.5D + (double) f1, itemstack);
+            ItemEntity entityitem = new ItemEntity(world, (double) pos.getX() + 0.5D + (double) f, pos.getY() + 1, (double) pos.getZ() + 0.5D + (double) f1, itemstack);
 
             entityitem.setDefaultPickUpDelay();
             world.addFreshEntity(entityitem);
@@ -223,12 +223,12 @@ public class LecternBlock extends BaseEntityBlock {
 
     @Override
     public int getSignal(BlockState state, BlockGetter world, BlockPos pos, Direction direction) {
-        return ((Boolean) state.getValue(LecternBlock.POWERED)).booleanValue() ? 15 : 0;
+        return state.getValue(LecternBlock.POWERED).booleanValue() ? 15 : 0;
     }
 
     @Override
     public int getDirectSignal(BlockState state, BlockGetter world, BlockPos pos, Direction direction) {
-        return direction == Direction.UP && ((Boolean) state.getValue(LecternBlock.POWERED)).booleanValue() ? 15 : 0;
+        return direction == Direction.UP && state.getValue(LecternBlock.POWERED).booleanValue() ? 15 : 0;
     }
 
     @Override
@@ -238,7 +238,7 @@ public class LecternBlock extends BaseEntityBlock {
 
     @Override
     public int getAnalogOutputSignal(BlockState state, Level world, BlockPos pos) {
-        if (((Boolean) state.getValue(LecternBlock.HAS_BOOK)).booleanValue()) {
+        if (state.getValue(LecternBlock.HAS_BOOK).booleanValue()) {
             BlockEntity tileentity = world.getBlockEntity(pos);
 
             if (tileentity instanceof LecternBlockEntity) {
@@ -251,7 +251,7 @@ public class LecternBlock extends BaseEntityBlock {
 
     @Override
     public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
-        if (((Boolean) state.getValue(LecternBlock.HAS_BOOK)).booleanValue()) {
+        if (state.getValue(LecternBlock.HAS_BOOK).booleanValue()) {
             if (!world.isClientSide) {
                 this.openScreen(world, pos, player);
             }
@@ -267,7 +267,7 @@ public class LecternBlock extends BaseEntityBlock {
     @Nullable
     @Override
     public MenuProvider getMenuProvider(BlockState state, Level world, BlockPos pos) {
-        return !((Boolean) state.getValue(LecternBlock.HAS_BOOK)).booleanValue() ? null : super.getMenuProvider(state, world, pos);
+        return !state.getValue(LecternBlock.HAS_BOOK).booleanValue() ? null : super.getMenuProvider(state, world, pos);
     }
 
     private void openScreen(Level world, BlockPos pos, Player player) {
diff --git a/src/main/java/net/minecraft/world/level/block/LeverBlock.java b/src/main/java/net/minecraft/world/level/block/LeverBlock.java
index 4306bb0270e73f248b3264a4df98add4d11a3b14..4248ea361a087516812f62a0b06c623015243373 100644
--- a/src/main/java/net/minecraft/world/level/block/LeverBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/LeverBlock.java
@@ -42,14 +42,14 @@ public class LeverBlock extends FaceAttachedHorizontalDirectionalBlock {
 
     protected LeverBlock(BlockBehaviour.Properties settings) {
         super(settings);
-        this.registerDefaultState((BlockState) ((BlockState) ((BlockState) ((BlockState) this.stateDefinition.any()).setValue(LeverBlock.FACING, Direction.NORTH)).setValue(LeverBlock.POWERED, Boolean.FALSE)).setValue(LeverBlock.FACE, AttachFace.WALL));
+        this.registerDefaultState(this.stateDefinition.any().setValue(LeverBlock.FACING, Direction.NORTH).setValue(LeverBlock.POWERED, Boolean.FALSE).setValue(LeverBlock.FACE, AttachFace.WALL));
     }
 
     @Override
     public VoxelShape getShape(BlockState state, BlockGetter world, BlockPos pos, CollisionContext context) {
-        switch ((AttachFace) state.getValue(LeverBlock.FACE)) {
+        switch (state.getValue(LeverBlock.FACE)) {
             case FLOOR:
-                switch (((Direction) state.getValue(LeverBlock.FACING)).getAxis()) {
+                switch (state.getValue(LeverBlock.FACING).getAxis()) {
                     case X:
                         return LeverBlock.UP_AABB_X;
                     case Z:
@@ -57,7 +57,7 @@ public class LeverBlock extends FaceAttachedHorizontalDirectionalBlock {
                         return LeverBlock.UP_AABB_Z;
                 }
             case WALL:
-                switch ((Direction) state.getValue(LeverBlock.FACING)) {
+                switch (state.getValue(LeverBlock.FACING)) {
                     case EAST:
                         return LeverBlock.EAST_AABB;
                     case WEST:
@@ -70,7 +70,7 @@ public class LeverBlock extends FaceAttachedHorizontalDirectionalBlock {
                 }
             case CEILING:
             default:
-                switch (((Direction) state.getValue(LeverBlock.FACING)).getAxis()) {
+                switch (state.getValue(LeverBlock.FACING).getAxis()) {
                     case X:
                         return LeverBlock.DOWN_AABB_X;
                     case Z:
@@ -85,8 +85,8 @@ public class LeverBlock extends FaceAttachedHorizontalDirectionalBlock {
         BlockState iblockdata1;
 
         if (world.isClientSide) {
-            iblockdata1 = (BlockState) state.cycle(LeverBlock.POWERED);
-            if (((Boolean) iblockdata1.getValue(LeverBlock.POWERED)).booleanValue()) {
+            iblockdata1 = state.cycle(LeverBlock.POWERED);
+            if (iblockdata1.getValue(LeverBlock.POWERED).booleanValue()) {
                 LeverBlock.makeParticle(iblockdata1, world, pos, 1.0F);
             }
 
@@ -107,23 +107,23 @@ public class LeverBlock extends FaceAttachedHorizontalDirectionalBlock {
             // CraftBukkit end
 
             iblockdata1 = this.pull(state, world, pos);
-            float f = ((Boolean) iblockdata1.getValue(LeverBlock.POWERED)).booleanValue() ? 0.6F : 0.5F;
+            float f = iblockdata1.getValue(LeverBlock.POWERED).booleanValue() ? 0.6F : 0.5F;
 
-            world.playSound((Player) null, pos, SoundEvents.LEVER_CLICK, SoundSource.BLOCKS, 0.3F, f);
-            world.gameEvent((Entity) player, ((Boolean) iblockdata1.getValue(LeverBlock.POWERED)).booleanValue() ? GameEvent.BLOCK_ACTIVATE : GameEvent.BLOCK_DEACTIVATE, pos);
+            world.playSound(null, pos, SoundEvents.LEVER_CLICK, SoundSource.BLOCKS, 0.3F, f);
+            world.gameEvent(player, iblockdata1.getValue(LeverBlock.POWERED).booleanValue() ? GameEvent.BLOCK_ACTIVATE : GameEvent.BLOCK_DEACTIVATE, pos);
             return InteractionResult.CONSUME;
         }
     }
 
     public BlockState pull(BlockState state, Level world, BlockPos pos) {
-        state = (BlockState) state.cycle(LeverBlock.POWERED);
+        state = state.cycle(LeverBlock.POWERED);
         world.setBlock(pos, state, 3);
         this.updateNeighbours(state, world, pos);
         return state;
     }
 
     private static void makeParticle(BlockState state, LevelAccessor world, BlockPos pos, float alpha) {
-        Direction enumdirection = ((Direction) state.getValue(LeverBlock.FACING)).getOpposite();
+        Direction enumdirection = state.getValue(LeverBlock.FACING).getOpposite();
         Direction enumdirection1 = getConnectedDirection(state).getOpposite();
         double d0 = (double) pos.getX() + 0.5D + 0.1D * (double) enumdirection.getStepX() + 0.2D * (double) enumdirection1.getStepX();
         double d1 = (double) pos.getY() + 0.5D + 0.1D * (double) enumdirection.getStepY() + 0.2D * (double) enumdirection1.getStepY();
@@ -134,7 +134,7 @@ public class LeverBlock extends FaceAttachedHorizontalDirectionalBlock {
 
     @Override
     public void animateTick(BlockState state, Level world, BlockPos pos, RandomSource random) {
-        if (((Boolean) state.getValue(LeverBlock.POWERED)).booleanValue() && random.nextFloat() < 0.25F) {
+        if (state.getValue(LeverBlock.POWERED).booleanValue() && random.nextFloat() < 0.25F) {
             LeverBlock.makeParticle(state, world, pos, 0.5F);
         }
 
@@ -143,7 +143,7 @@ public class LeverBlock extends FaceAttachedHorizontalDirectionalBlock {
     @Override
     public void onRemove(BlockState state, Level world, BlockPos pos, BlockState newState, boolean moved) {
         if (!moved && !state.is(newState.getBlock())) {
-            if (((Boolean) state.getValue(LeverBlock.POWERED)).booleanValue()) {
+            if (state.getValue(LeverBlock.POWERED).booleanValue()) {
                 this.updateNeighbours(state, world, pos);
             }
 
@@ -153,12 +153,12 @@ public class LeverBlock extends FaceAttachedHorizontalDirectionalBlock {
 
     @Override
     public int getSignal(BlockState state, BlockGetter world, BlockPos pos, Direction direction) {
-        return ((Boolean) state.getValue(LeverBlock.POWERED)).booleanValue() ? 15 : 0;
+        return state.getValue(LeverBlock.POWERED).booleanValue() ? 15 : 0;
     }
 
     @Override
     public int getDirectSignal(BlockState state, BlockGetter world, BlockPos pos, Direction direction) {
-        return ((Boolean) state.getValue(LeverBlock.POWERED)).booleanValue() && getConnectedDirection(state) == direction ? 15 : 0;
+        return state.getValue(LeverBlock.POWERED).booleanValue() && getConnectedDirection(state) == direction ? 15 : 0;
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/LightningRodBlock.java b/src/main/java/net/minecraft/world/level/block/LightningRodBlock.java
index 50b9ac39487e02c0020d894ea47d02c4061f2756..a8b972ae36f13a09bfd72e9cdbdbe30c0296a6b9 100644
--- a/src/main/java/net/minecraft/world/level/block/LightningRodBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/LightningRodBlock.java
@@ -46,7 +46,7 @@ public class LightningRodBlock extends RodBlock implements SimpleWaterloggedBloc
 
     public LightningRodBlock(BlockBehaviour.Properties settings) {
         super(settings);
-        this.registerDefaultState((BlockState) ((BlockState) ((BlockState) ((BlockState) this.stateDefinition.any()).setValue(LightningRodBlock.FACING, Direction.UP)).setValue(LightningRodBlock.WATERLOGGED, Boolean.FALSE)).setValue(LightningRodBlock.POWERED, Boolean.FALSE));
+        this.registerDefaultState(this.stateDefinition.any().setValue(LightningRodBlock.FACING, Direction.UP).setValue(LightningRodBlock.WATERLOGGED, Boolean.FALSE).setValue(LightningRodBlock.POWERED, Boolean.FALSE));
     }
 
     @Override
@@ -54,13 +54,13 @@ public class LightningRodBlock extends RodBlock implements SimpleWaterloggedBloc
         FluidState fluid = ctx.getLevel().getFluidState(ctx.getClickedPos());
         boolean flag = fluid.getType() == Fluids.WATER;
 
-        return (BlockState) ((BlockState) this.defaultBlockState().setValue(LightningRodBlock.FACING, ctx.getClickedFace())).setValue(LightningRodBlock.WATERLOGGED, Boolean.valueOf(flag));
+        return this.defaultBlockState().setValue(LightningRodBlock.FACING, ctx.getClickedFace()).setValue(LightningRodBlock.WATERLOGGED, Boolean.valueOf(flag));
     }
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
-        if (((Boolean) state.getValue(LightningRodBlock.WATERLOGGED)).booleanValue()) {
-            world.scheduleTick(pos, (Fluid) Fluids.WATER, Fluids.WATER.getTickDelay(world));
+        if (state.getValue(LightningRodBlock.WATERLOGGED).booleanValue()) {
+            world.scheduleTick(pos, Fluids.WATER, Fluids.WATER.getTickDelay(world));
         }
 
         return super.updateShape(state, direction, neighborState, world, pos, neighborPos);
@@ -68,17 +68,17 @@ public class LightningRodBlock extends RodBlock implements SimpleWaterloggedBloc
 
     @Override
     public FluidState getFluidState(BlockState state) {
-        return ((Boolean) state.getValue(LightningRodBlock.WATERLOGGED)).booleanValue() ? Fluids.WATER.getSource(false) : super.getFluidState(state);
+        return state.getValue(LightningRodBlock.WATERLOGGED).booleanValue() ? Fluids.WATER.getSource(false) : super.getFluidState(state);
     }
 
     @Override
     public int getSignal(BlockState state, BlockGetter world, BlockPos pos, Direction direction) {
-        return ((Boolean) state.getValue(LightningRodBlock.POWERED)).booleanValue() ? 15 : 0;
+        return state.getValue(LightningRodBlock.POWERED).booleanValue() ? 15 : 0;
     }
 
     @Override
     public int getDirectSignal(BlockState state, BlockGetter world, BlockPos pos, Direction direction) {
-        return ((Boolean) state.getValue(LightningRodBlock.POWERED)).booleanValue() && state.getValue(LightningRodBlock.FACING) == direction ? 15 : 0;
+        return state.getValue(LightningRodBlock.POWERED).booleanValue() && state.getValue(LightningRodBlock.FACING) == direction ? 15 : 0;
     }
 
     public void onLightningStrike(BlockState state, Level world, BlockPos pos) {
@@ -94,33 +94,33 @@ public class LightningRodBlock extends RodBlock implements SimpleWaterloggedBloc
             return;
         }
         // CraftBukkit end
-        world.setBlock(pos, (BlockState) state.setValue(LightningRodBlock.POWERED, Boolean.TRUE), 3);
+        world.setBlock(pos, state.setValue(LightningRodBlock.POWERED, Boolean.TRUE), 3);
         this.updateNeighbours(state, world, pos);
-        world.scheduleTick(pos, (Block) this, 8);
-        world.levelEvent(3002, pos, ((Direction) state.getValue(LightningRodBlock.FACING)).getAxis().ordinal());
+        world.scheduleTick(pos, this, 8);
+        world.levelEvent(3002, pos, state.getValue(LightningRodBlock.FACING).getAxis().ordinal());
     }
 
     private void updateNeighbours(BlockState state, Level world, BlockPos pos) {
-        world.updateNeighborsAt(pos.relative(((Direction) state.getValue(LightningRodBlock.FACING)).getOpposite()), this);
+        world.updateNeighborsAt(pos.relative(state.getValue(LightningRodBlock.FACING).getOpposite()), this);
     }
 
     @Override
     public void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
-        world.setBlock(pos, (BlockState) state.setValue(LightningRodBlock.POWERED, Boolean.FALSE), 3);
+        world.setBlock(pos, state.setValue(LightningRodBlock.POWERED, Boolean.FALSE), 3);
         this.updateNeighbours(state, world, pos);
     }
 
     @Override
     public void animateTick(BlockState state, Level world, BlockPos pos, RandomSource random) {
         if (world.isThundering() && (long) world.random.nextInt(200) <= world.getGameTime() % 200L && pos.getY() == world.getHeight(Heightmap.Types.WORLD_SURFACE, pos.getX(), pos.getZ()) - 1) {
-            ParticleUtils.spawnParticlesAlongAxis(((Direction) state.getValue(LightningRodBlock.FACING)).getAxis(), world, pos, 0.125D, ParticleTypes.ELECTRIC_SPARK, UniformInt.of(1, 2));
+            ParticleUtils.spawnParticlesAlongAxis(state.getValue(LightningRodBlock.FACING).getAxis(), world, pos, 0.125D, ParticleTypes.ELECTRIC_SPARK, UniformInt.of(1, 2));
         }
     }
 
     @Override
     public void onRemove(BlockState state, Level world, BlockPos pos, BlockState newState, boolean moved) {
         if (!state.is(newState.getBlock())) {
-            if (((Boolean) state.getValue(LightningRodBlock.POWERED)).booleanValue()) {
+            if (state.getValue(LightningRodBlock.POWERED).booleanValue()) {
                 this.updateNeighbours(state, world, pos);
             }
 
@@ -131,8 +131,8 @@ public class LightningRodBlock extends RodBlock implements SimpleWaterloggedBloc
     @Override
     public void onPlace(BlockState state, Level world, BlockPos pos, BlockState oldState, boolean notify) {
         if (!state.is(oldState.getBlock())) {
-            if (((Boolean) state.getValue(LightningRodBlock.POWERED)).booleanValue() && !world.getBlockTicks().hasScheduledTick(pos, this)) {
-                world.setBlock(pos, (BlockState) state.setValue(LightningRodBlock.POWERED, Boolean.FALSE), 18);
+            if (state.getValue(LightningRodBlock.POWERED).booleanValue() && !world.getBlockTicks().hasScheduledTick(pos, this)) {
+                world.setBlock(pos, state.setValue(LightningRodBlock.POWERED, Boolean.FALSE), 18);
             }
 
         }
@@ -144,7 +144,7 @@ public class LightningRodBlock extends RodBlock implements SimpleWaterloggedBloc
             BlockPos blockposition = hit.getBlockPos();
 
             if (world.canSeeSky(blockposition)) {
-                LightningBolt entitylightning = (LightningBolt) EntityType.LIGHTNING_BOLT.create(world);
+                LightningBolt entitylightning = EntityType.LIGHTNING_BOLT.create(world);
 
                 if (entitylightning != null) {
                     entitylightning.moveTo(Vec3.atBottomCenterOf(blockposition.above()));
@@ -154,7 +154,7 @@ public class LightningRodBlock extends RodBlock implements SimpleWaterloggedBloc
                     ((ServerLevel) world).strikeLightning(entitylightning, org.bukkit.event.weather.LightningStrikeEvent.Cause.TRIDENT); // CraftBukkit
                 }
 
-                world.playSound((Player) null, blockposition, SoundEvents.TRIDENT_THUNDER, SoundSource.WEATHER, 5.0F, 1.0F);
+                world.playSound(null, blockposition, SoundEvents.TRIDENT_THUNDER, SoundSource.WEATHER, 5.0F, 1.0F);
             }
         }
 
diff --git a/src/main/java/net/minecraft/world/level/block/LiquidBlock.java b/src/main/java/net/minecraft/world/level/block/LiquidBlock.java
index 01054d3819d6e0ad7ba723efb7bc31069e059c04..734b149d690adeba62b65fd8af108bf22586f63b 100644
--- a/src/main/java/net/minecraft/world/level/block/LiquidBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/LiquidBlock.java
@@ -48,12 +48,12 @@ public class LiquidBlock extends Block implements BucketPickup {
         }
 
         this.stateCache.add(fluid.getFlowing(8, true));
-        this.registerDefaultState((BlockState) ((BlockState) this.stateDefinition.any()).setValue(LiquidBlock.LEVEL, Integer.valueOf(0)));
+        this.registerDefaultState(this.stateDefinition.any().setValue(LiquidBlock.LEVEL, Integer.valueOf(0)));
     }
 
     @Override
     public VoxelShape getCollisionShape(BlockState state, BlockGetter world, BlockPos pos, CollisionContext context) {
-        return context.isAbove(LiquidBlock.STABLE_SHAPE, pos, true) && ((Integer) state.getValue(LiquidBlock.LEVEL)).intValue() == 0 && context.canStandOnFluid(world.getFluidState(pos.above()), state.getFluidState()) ? LiquidBlock.STABLE_SHAPE : Shapes.empty();
+        return context.isAbove(LiquidBlock.STABLE_SHAPE, pos, true) && state.getValue(LiquidBlock.LEVEL).intValue() == 0 && context.canStandOnFluid(world.getFluidState(pos.above()), state.getFluidState()) ? LiquidBlock.STABLE_SHAPE : Shapes.empty();
     }
 
     @Override
@@ -78,9 +78,9 @@ public class LiquidBlock extends Block implements BucketPickup {
 
     @Override
     public FluidState getFluidState(BlockState state) {
-        int i = ((Integer) state.getValue(LiquidBlock.LEVEL)).intValue();
+        int i = state.getValue(LiquidBlock.LEVEL).intValue();
 
-        return (FluidState) this.stateCache.get(Math.min(i, 8));
+        return this.stateCache.get(Math.min(i, 8));
     }
 
     @Override
@@ -189,7 +189,7 @@ public class LiquidBlock extends Block implements BucketPickup {
 
     @Override
     public ItemStack pickupBlock(LevelAccessor world, BlockPos pos, BlockState state) {
-        if (((Integer) state.getValue(LiquidBlock.LEVEL)).intValue() == 0) {
+        if (state.getValue(LiquidBlock.LEVEL).intValue() == 0) {
             world.setBlock(pos, Blocks.AIR.defaultBlockState(), 11);
             return new ItemStack(this.fluid.getBucket());
         } else {
diff --git a/src/main/java/net/minecraft/world/level/block/MagmaBlock.java b/src/main/java/net/minecraft/world/level/block/MagmaBlock.java
index d3540a4daaa8021ae009bfd4d9ef4f1172ab4c56..091d048ab69d71316d06929147fe7d4e771c7142 100644
--- a/src/main/java/net/minecraft/world/level/block/MagmaBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/MagmaBlock.java
@@ -45,7 +45,7 @@ public class MagmaBlock extends Block {
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
         if (direction == Direction.UP && neighborState.is(Blocks.WATER)) {
-            world.scheduleTick(pos, (Block) this, 20);
+            world.scheduleTick(pos, this, 20);
         }
 
         return super.updateShape(state, direction, neighborState, world, pos, neighborPos);
@@ -56,7 +56,7 @@ public class MagmaBlock extends Block {
         BlockPos blockposition1 = pos.above();
 
         if (world.getFluidState(pos).is(FluidTags.WATER)) {
-            world.playSound((Player) null, pos, SoundEvents.FIRE_EXTINGUISH, SoundSource.BLOCKS, 0.5F, 2.6F + (world.random.nextFloat() - world.random.nextFloat()) * 0.8F);
+            world.playSound(null, pos, SoundEvents.FIRE_EXTINGUISH, SoundSource.BLOCKS, 0.5F, 2.6F + (world.random.nextFloat() - world.random.nextFloat()) * 0.8F);
             world.sendParticles(ParticleTypes.LARGE_SMOKE, (double) blockposition1.getX() + 0.5D, (double) blockposition1.getY() + 0.25D, (double) blockposition1.getZ() + 0.5D, 8, 0.5D, 0.25D, 0.5D, 0.0D);
         }
 
@@ -64,6 +64,6 @@ public class MagmaBlock extends Block {
 
     @Override
     public void onPlace(BlockState state, Level world, BlockPos pos, BlockState oldState, boolean notify) {
-        world.scheduleTick(pos, (Block) this, 20);
+        world.scheduleTick(pos, this, 20);
     }
 }
diff --git a/src/main/java/net/minecraft/world/level/block/MultifaceSpreader.java b/src/main/java/net/minecraft/world/level/block/MultifaceSpreader.java
index 46bb3eade972119bd42ad8add63db0383051a940..8abb20cdb50aa920b7be0e443f67810960690d69 100644
--- a/src/main/java/net/minecraft/world/level/block/MultifaceSpreader.java
+++ b/src/main/java/net/minecraft/world/level/block/MultifaceSpreader.java
@@ -17,7 +17,7 @@ public class MultifaceSpreader {
     private final MultifaceSpreader.SpreadConfig config;
 
     public MultifaceSpreader(MultifaceBlock lichen) {
-        this((MultifaceSpreader.SpreadConfig) (new MultifaceSpreader.DefaultSpreaderConfig(lichen)));
+        this(new DefaultSpreaderConfig(lichen));
     }
 
     public MultifaceSpreader(MultifaceSpreader.SpreadConfig growChecker) {
@@ -34,7 +34,7 @@ public class MultifaceSpreader {
     }
 
     public Optional<MultifaceSpreader.SpreadPos> spreadFromRandomFaceTowardRandomDirection(BlockState state, LevelAccessor world, BlockPos pos, RandomSource random) {
-        return (Optional) Direction.allShuffled(random).stream().filter((enumdirection) -> {
+        return Direction.allShuffled(random).stream().filter((enumdirection) -> {
             return this.config.canSpreadFrom(state, enumdirection);
         }).map((enumdirection) -> {
             return this.spreadFromFaceTowardRandomDirection(state, world, pos, enumdirection, random, false);
@@ -42,15 +42,15 @@ public class MultifaceSpreader {
     }
 
     public long spreadAll(BlockState state, LevelAccessor world, BlockPos pos, boolean markForPostProcessing) {
-        return ((Long) Direction.stream().filter((enumdirection) -> {
+        return Direction.stream().filter((enumdirection) -> {
             return this.config.canSpreadFrom(state, enumdirection);
         }).map((enumdirection) -> {
             return Long.valueOf(this.spreadFromFaceTowardAllDirections(state, world, pos, enumdirection, markForPostProcessing));
-        }).reduce(Long.valueOf(0L), Long::sum)).longValue();
+        }).reduce(Long.valueOf(0L), Long::sum).longValue();
     }
 
     public Optional<MultifaceSpreader.SpreadPos> spreadFromFaceTowardRandomDirection(BlockState state, LevelAccessor world, BlockPos pos, Direction direction, RandomSource random, boolean markForPostProcessing) {
-        return (Optional) Direction.allShuffled(random).stream().map((enumdirection1) -> {
+        return Direction.allShuffled(random).stream().map((enumdirection1) -> {
             return this.spreadFromFaceTowardDirection(state, world, pos, direction, enumdirection1, markForPostProcessing);
         }).filter(Optional::isPresent).findFirst().orElse(Optional.empty());
     }
@@ -114,7 +114,7 @@ public class MultifaceSpreader {
         }
 
         protected boolean stateCanBeReplaced(BlockGetter world, BlockPos pos, BlockPos growPos, Direction direction, BlockState state) {
-            return state.isAir() || state.is((Block) this.block) || state.is(Blocks.WATER) && state.getFluidState().isSource();
+            return state.isAir() || state.is(this.block) || state.is(Blocks.WATER) && state.getFluidState().isSource();
         }
 
         @Override
diff --git a/src/main/java/net/minecraft/world/level/block/MushroomBlock.java b/src/main/java/net/minecraft/world/level/block/MushroomBlock.java
index f6f8e155223cba10c4073ddca602d1aa3aa872d7..9e4c69140b271114704dad84444b428934ea0993 100644
--- a/src/main/java/net/minecraft/world/level/block/MushroomBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/MushroomBlock.java
@@ -47,7 +47,7 @@ public class MushroomBlock extends BushBlock implements BonemealableBlock {
             while (iterator.hasNext()) {
                 BlockPos blockposition1 = (BlockPos) iterator.next();
 
-                if (world.getBlockState(blockposition1).is((Block) this)) {
+                if (world.getBlockState(blockposition1).is(this)) {
                     --i;
                     if (i <= 0) {
                         return;
diff --git a/src/main/java/net/minecraft/world/level/block/NetherPortalBlock.java b/src/main/java/net/minecraft/world/level/block/NetherPortalBlock.java
index 192689be9dfc9373876921bd4da0715d58f9421c..f71fc4d448dca8d3234e4ae2077cd5490487a195 100644
--- a/src/main/java/net/minecraft/world/level/block/NetherPortalBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/NetherPortalBlock.java
@@ -36,12 +36,12 @@ public class NetherPortalBlock extends Block {
 
     public NetherPortalBlock(BlockBehaviour.Properties settings) {
         super(settings);
-        this.registerDefaultState((BlockState) ((BlockState) this.stateDefinition.any()).setValue(NetherPortalBlock.AXIS, Direction.Axis.X));
+        this.registerDefaultState(this.stateDefinition.any().setValue(NetherPortalBlock.AXIS, Direction.Axis.X));
     }
 
     @Override
     public VoxelShape getShape(BlockState state, BlockGetter world, BlockPos pos, CollisionContext context) {
-        switch ((Direction.Axis) state.getValue(NetherPortalBlock.AXIS)) {
+        switch (state.getValue(NetherPortalBlock.AXIS)) {
             case Z:
                 return NetherPortalBlock.Z_AXIS_AABB;
             case X:
@@ -53,7 +53,7 @@ public class NetherPortalBlock extends Block {
     @Override
     public void randomTick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
         if (world.spigotConfig.enableZombiePigmenPortalSpawns && world.dimensionType().natural() && world.getGameRules().getBoolean(GameRules.RULE_DOMOBSPAWNING) && random.nextInt(2000) < world.getDifficulty().getId()) { // Spigot
-            while (world.getBlockState(pos).is((Block) this)) {
+            while (world.getBlockState(pos).is(this)) {
                 pos = pos.below();
             }
 
@@ -74,10 +74,10 @@ public class NetherPortalBlock extends Block {
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
         Direction.Axis enumdirection_enumaxis = direction.getAxis();
-        Direction.Axis enumdirection_enumaxis1 = (Direction.Axis) state.getValue(NetherPortalBlock.AXIS);
+        Direction.Axis enumdirection_enumaxis1 = state.getValue(NetherPortalBlock.AXIS);
         boolean flag = enumdirection_enumaxis1 != enumdirection_enumaxis && enumdirection_enumaxis.isHorizontal();
 
-        return !flag && !neighborState.is((Block) this) && !(new PortalShape(world, pos, enumdirection_enumaxis1)).isComplete() ? Blocks.AIR.defaultBlockState() : super.updateShape(state, direction, neighborState, world, pos, neighborPos);
+        return !flag && !neighborState.is(this) && !(new PortalShape(world, pos, enumdirection_enumaxis1)).isComplete() ? Blocks.AIR.defaultBlockState() : super.updateShape(state, direction, neighborState, world, pos, neighborPos);
     }
 
     @Override
@@ -108,12 +108,12 @@ public class NetherPortalBlock extends Block {
             double d5 = ((double) random.nextFloat() - 0.5D) * 0.5D;
             int j = random.nextInt(2) * 2 - 1;
 
-            if (!world.getBlockState(pos.west()).is((Block) this) && !world.getBlockState(pos.east()).is((Block) this)) {
+            if (!world.getBlockState(pos.west()).is(this) && !world.getBlockState(pos.east()).is(this)) {
                 d0 = (double) pos.getX() + 0.5D + 0.25D * (double) j;
-                d3 = (double) (random.nextFloat() * 2.0F * (float) j);
+                d3 = random.nextFloat() * 2.0F * (float) j;
             } else {
                 d2 = (double) pos.getZ() + 0.5D + 0.25D * (double) j;
-                d5 = (double) (random.nextFloat() * 2.0F * (float) j);
+                d5 = random.nextFloat() * 2.0F * (float) j;
             }
 
             world.addParticle(ParticleTypes.PORTAL, d0, d1, d2, d3, d4, d5);
@@ -131,11 +131,11 @@ public class NetherPortalBlock extends Block {
         switch (rotation) {
             case COUNTERCLOCKWISE_90:
             case CLOCKWISE_90:
-                switch ((Direction.Axis) state.getValue(NetherPortalBlock.AXIS)) {
+                switch (state.getValue(NetherPortalBlock.AXIS)) {
                     case Z:
-                        return (BlockState) state.setValue(NetherPortalBlock.AXIS, Direction.Axis.X);
+                        return state.setValue(NetherPortalBlock.AXIS, Direction.Axis.X);
                     case X:
-                        return (BlockState) state.setValue(NetherPortalBlock.AXIS, Direction.Axis.Z);
+                        return state.setValue(NetherPortalBlock.AXIS, Direction.Axis.Z);
                     default:
                         return state;
                 }
diff --git a/src/main/java/net/minecraft/world/level/block/NetherWartBlock.java b/src/main/java/net/minecraft/world/level/block/NetherWartBlock.java
index 0e2e961fac06c6f55bbcddbdbcc245683cb2113a..ad85745014d33b5a6e1a3f69c89cb6dde6d869c1 100644
--- a/src/main/java/net/minecraft/world/level/block/NetherWartBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/NetherWartBlock.java
@@ -22,12 +22,12 @@ public class NetherWartBlock extends BushBlock {
 
     protected NetherWartBlock(BlockBehaviour.Properties settings) {
         super(settings);
-        this.registerDefaultState((BlockState) ((BlockState) this.stateDefinition.any()).setValue(NetherWartBlock.AGE, Integer.valueOf(0)));
+        this.registerDefaultState(this.stateDefinition.any().setValue(NetherWartBlock.AGE, Integer.valueOf(0)));
     }
 
     @Override
     public VoxelShape getShape(BlockState state, BlockGetter world, BlockPos pos, CollisionContext context) {
-        return NetherWartBlock.SHAPE_BY_AGE[((Integer) state.getValue(NetherWartBlock.AGE)).intValue()];
+        return NetherWartBlock.SHAPE_BY_AGE[state.getValue(NetherWartBlock.AGE).intValue()];
     }
 
     @Override
@@ -37,15 +37,15 @@ public class NetherWartBlock extends BushBlock {
 
     @Override
     public boolean isRandomlyTicking(BlockState state) {
-        return ((Integer) state.getValue(NetherWartBlock.AGE)).intValue() < 3;
+        return state.getValue(NetherWartBlock.AGE).intValue() < 3;
     }
 
     @Override
     public void randomTick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
-        int i = ((Integer) state.getValue(NetherWartBlock.AGE)).intValue();
+        int i = state.getValue(NetherWartBlock.AGE).intValue();
 
         if (i < 3 && random.nextFloat() < (world.spigotConfig.wartModifier / (100.0f * 10))) { // Spigot - SPIGOT-7159: Better modifier resolution
-            state = (BlockState) state.setValue(NetherWartBlock.AGE, Integer.valueOf(i + 1));
+            state = state.setValue(NetherWartBlock.AGE, Integer.valueOf(i + 1));
             org.bukkit.craftbukkit.event.CraftEventFactory.handleBlockGrowEvent(world, pos, state, 2); // CraftBukkit
         }
 
diff --git a/src/main/java/net/minecraft/world/level/block/NoteBlock.java b/src/main/java/net/minecraft/world/level/block/NoteBlock.java
index 407b1f2c67965f5321738446bc4dc3a69a7b4ded..48a85c201cbd32a49d36c5823392f6354afd5f6f 100644
--- a/src/main/java/net/minecraft/world/level/block/NoteBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/NoteBlock.java
@@ -39,7 +39,7 @@ public class NoteBlock extends Block {
 
     public NoteBlock(BlockBehaviour.Properties settings) {
         super(settings);
-        this.registerDefaultState((BlockState) ((BlockState) ((BlockState) ((BlockState) this.stateDefinition.any()).setValue(NoteBlock.INSTRUMENT, NoteBlockInstrument.HARP)).setValue(NoteBlock.NOTE, Integer.valueOf(0))).setValue(NoteBlock.POWERED, Boolean.FALSE));
+        this.registerDefaultState(this.stateDefinition.any().setValue(NoteBlock.INSTRUMENT, NoteBlockInstrument.HARP).setValue(NoteBlock.NOTE, Integer.valueOf(0)).setValue(NoteBlock.POWERED, Boolean.FALSE));
     }
 
     private static boolean isFeatureFlagEnabled(LevelAccessor world) {
@@ -74,13 +74,13 @@ public class NoteBlock extends Block {
     public void neighborChanged(BlockState state, Level world, BlockPos pos, Block sourceBlock, BlockPos sourcePos, boolean notify) {
         boolean flag1 = world.hasNeighborSignal(pos);
 
-        if (flag1 != ((Boolean) state.getValue(NoteBlock.POWERED)).booleanValue()) {
+        if (flag1 != state.getValue(NoteBlock.POWERED).booleanValue()) {
             if (flag1) {
-                this.playNote((Entity) null, state, world, pos);
+                this.playNote(null, state, world, pos);
                 state = world.getBlockState(pos); // CraftBukkit - SPIGOT-5617: update in case changed in event
             }
 
-            world.setBlock(pos, (BlockState) state.setValue(NoteBlock.POWERED, Boolean.valueOf(flag1)), 3);
+            world.setBlock(pos, state.setValue(NoteBlock.POWERED, Boolean.valueOf(flag1)), 3);
         }
 
     }
@@ -105,7 +105,7 @@ public class NoteBlock extends Block {
         if (world.isClientSide) {
             return InteractionResult.SUCCESS;
         } else {
-            state = (BlockState) state.cycle(NoteBlock.NOTE);
+            state = state.cycle(NoteBlock.NOTE);
             world.setBlock(pos, state, 3);
             this.playNote(player, state, world, pos);
             player.awardStat(Stats.TUNE_NOTEBLOCK);
diff --git a/src/main/java/net/minecraft/world/level/block/ObserverBlock.java b/src/main/java/net/minecraft/world/level/block/ObserverBlock.java
index 1e304735b1ae1daffc4fc492efe78cadf7aca238..d5684e12f92027ea729aec8d215cfffd915d168d 100644
--- a/src/main/java/net/minecraft/world/level/block/ObserverBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/ObserverBlock.java
@@ -21,7 +21,7 @@ public class ObserverBlock extends DirectionalBlock {
 
     public ObserverBlock(BlockBehaviour.Properties settings) {
         super(settings);
-        this.registerDefaultState((BlockState) ((BlockState) ((BlockState) this.stateDefinition.any()).setValue(ObserverBlock.FACING, Direction.SOUTH)).setValue(ObserverBlock.POWERED, Boolean.FALSE));
+        this.registerDefaultState(this.stateDefinition.any().setValue(ObserverBlock.FACING, Direction.SOUTH).setValue(ObserverBlock.POWERED, Boolean.FALSE));
     }
 
     @Override
@@ -31,31 +31,31 @@ public class ObserverBlock extends DirectionalBlock {
 
     @Override
     public BlockState rotate(BlockState state, Rotation rotation) {
-        return (BlockState) state.setValue(ObserverBlock.FACING, rotation.rotate((Direction) state.getValue(ObserverBlock.FACING)));
+        return state.setValue(ObserverBlock.FACING, rotation.rotate(state.getValue(ObserverBlock.FACING)));
     }
 
     @Override
     public BlockState mirror(BlockState state, Mirror mirror) {
-        return state.rotate(mirror.getRotation((Direction) state.getValue(ObserverBlock.FACING)));
+        return state.rotate(mirror.getRotation(state.getValue(ObserverBlock.FACING)));
     }
 
     @Override
     public void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
-        if (((Boolean) state.getValue(ObserverBlock.POWERED)).booleanValue()) {
+        if (state.getValue(ObserverBlock.POWERED).booleanValue()) {
             // CraftBukkit start
             if (CraftEventFactory.callRedstoneChange(world, pos, 15, 0).getNewCurrent() != 0) {
                 return;
             }
             // CraftBukkit end
-            world.setBlock(pos, (BlockState) state.setValue(ObserverBlock.POWERED, Boolean.FALSE), 2);
+            world.setBlock(pos, state.setValue(ObserverBlock.POWERED, Boolean.FALSE), 2);
         } else {
             // CraftBukkit start
             if (CraftEventFactory.callRedstoneChange(world, pos, 0, 15).getNewCurrent() != 15) {
                 return;
             }
             // CraftBukkit end
-            world.setBlock(pos, (BlockState) state.setValue(ObserverBlock.POWERED, Boolean.TRUE), 2);
-            world.scheduleTick(pos, (Block) this, 2);
+            world.setBlock(pos, state.setValue(ObserverBlock.POWERED, Boolean.TRUE), 2);
+            world.scheduleTick(pos, this, 2);
         }
 
         this.updateNeighborsInFront(world, pos, state);
@@ -63,7 +63,7 @@ public class ObserverBlock extends DirectionalBlock {
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
-        if (state.getValue(ObserverBlock.FACING) == direction && !((Boolean) state.getValue(ObserverBlock.POWERED)).booleanValue()) {
+        if (state.getValue(ObserverBlock.FACING) == direction && !state.getValue(ObserverBlock.POWERED).booleanValue()) {
             this.startSignal(world, pos);
         }
 
@@ -72,13 +72,13 @@ public class ObserverBlock extends DirectionalBlock {
 
     private void startSignal(LevelAccessor world, BlockPos pos) {
         if (!world.isClientSide() && !world.getBlockTicks().hasScheduledTick(pos, this)) {
-            world.scheduleTick(pos, (Block) this, 2);
+            world.scheduleTick(pos, this, 2);
         }
 
     }
 
     protected void updateNeighborsInFront(Level world, BlockPos pos, BlockState state) {
-        Direction enumdirection = (Direction) state.getValue(ObserverBlock.FACING);
+        Direction enumdirection = state.getValue(ObserverBlock.FACING);
         BlockPos blockposition1 = pos.relative(enumdirection.getOpposite());
 
         world.neighborChanged(blockposition1, this, pos);
@@ -97,14 +97,14 @@ public class ObserverBlock extends DirectionalBlock {
 
     @Override
     public int getSignal(BlockState state, BlockGetter world, BlockPos pos, Direction direction) {
-        return ((Boolean) state.getValue(ObserverBlock.POWERED)).booleanValue() && state.getValue(ObserverBlock.FACING) == direction ? 15 : 0;
+        return state.getValue(ObserverBlock.POWERED).booleanValue() && state.getValue(ObserverBlock.FACING) == direction ? 15 : 0;
     }
 
     @Override
     public void onPlace(BlockState state, Level world, BlockPos pos, BlockState oldState, boolean notify) {
         if (!state.is(oldState.getBlock())) {
-            if (!world.isClientSide() && ((Boolean) state.getValue(ObserverBlock.POWERED)).booleanValue() && !world.getBlockTicks().hasScheduledTick(pos, this)) {
-                BlockState iblockdata2 = (BlockState) state.setValue(ObserverBlock.POWERED, Boolean.FALSE);
+            if (!world.isClientSide() && state.getValue(ObserverBlock.POWERED).booleanValue() && !world.getBlockTicks().hasScheduledTick(pos, this)) {
+                BlockState iblockdata2 = state.setValue(ObserverBlock.POWERED, Boolean.FALSE);
 
                 world.setBlock(pos, iblockdata2, 18);
                 this.updateNeighborsInFront(world, pos, iblockdata2);
@@ -116,8 +116,8 @@ public class ObserverBlock extends DirectionalBlock {
     @Override
     public void onRemove(BlockState state, Level world, BlockPos pos, BlockState newState, boolean moved) {
         if (!state.is(newState.getBlock())) {
-            if (!world.isClientSide && ((Boolean) state.getValue(ObserverBlock.POWERED)).booleanValue() && world.getBlockTicks().hasScheduledTick(pos, this)) {
-                this.updateNeighborsInFront(world, pos, (BlockState) state.setValue(ObserverBlock.POWERED, Boolean.FALSE));
+            if (!world.isClientSide && state.getValue(ObserverBlock.POWERED).booleanValue() && world.getBlockTicks().hasScheduledTick(pos, this)) {
+                this.updateNeighborsInFront(world, pos, state.setValue(ObserverBlock.POWERED, Boolean.FALSE));
             }
 
         }
@@ -125,6 +125,6 @@ public class ObserverBlock extends DirectionalBlock {
 
     @Override
     public BlockState getStateForPlacement(BlockPlaceContext ctx) {
-        return (BlockState) this.defaultBlockState().setValue(ObserverBlock.FACING, ctx.getNearestLookingDirection().getOpposite().getOpposite());
+        return this.defaultBlockState().setValue(ObserverBlock.FACING, ctx.getNearestLookingDirection().getOpposite().getOpposite());
     }
 }
diff --git a/src/main/java/net/minecraft/world/level/block/PointedDripstoneBlock.java b/src/main/java/net/minecraft/world/level/block/PointedDripstoneBlock.java
index 1058df6cc9be11bb81489e4b145044b197e6783e..fd0bff9a54382a80aaee333844a38318e82a2c1b 100644
--- a/src/main/java/net/minecraft/world/level/block/PointedDripstoneBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/PointedDripstoneBlock.java
@@ -82,7 +82,7 @@ public class PointedDripstoneBlock extends Block implements Fallable, SimpleWate
 
     public PointedDripstoneBlock(BlockBehaviour.Properties settings) {
         super(settings);
-        this.registerDefaultState((BlockState) ((BlockState) ((BlockState) ((BlockState) this.stateDefinition.any()).setValue(PointedDripstoneBlock.TIP_DIRECTION, Direction.UP)).setValue(PointedDripstoneBlock.THICKNESS, DripstoneThickness.TIP)).setValue(PointedDripstoneBlock.WATERLOGGED, Boolean.FALSE));
+        this.registerDefaultState(this.stateDefinition.any().setValue(PointedDripstoneBlock.TIP_DIRECTION, Direction.UP).setValue(PointedDripstoneBlock.THICKNESS, DripstoneThickness.TIP).setValue(PointedDripstoneBlock.WATERLOGGED, Boolean.FALSE));
     }
 
     @Override
@@ -92,27 +92,27 @@ public class PointedDripstoneBlock extends Block implements Fallable, SimpleWate
 
     @Override
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
-        return PointedDripstoneBlock.isValidPointedDripstonePlacement(world, pos, (Direction) state.getValue(PointedDripstoneBlock.TIP_DIRECTION));
+        return PointedDripstoneBlock.isValidPointedDripstonePlacement(world, pos, state.getValue(PointedDripstoneBlock.TIP_DIRECTION));
     }
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
-        if (((Boolean) state.getValue(PointedDripstoneBlock.WATERLOGGED)).booleanValue()) {
-            world.scheduleTick(pos, (Fluid) Fluids.WATER, Fluids.WATER.getTickDelay(world));
+        if (state.getValue(PointedDripstoneBlock.WATERLOGGED).booleanValue()) {
+            world.scheduleTick(pos, Fluids.WATER, Fluids.WATER.getTickDelay(world));
         }
 
         if (direction != Direction.UP && direction != Direction.DOWN) {
             return state;
         } else {
-            Direction enumdirection1 = (Direction) state.getValue(PointedDripstoneBlock.TIP_DIRECTION);
+            Direction enumdirection1 = state.getValue(PointedDripstoneBlock.TIP_DIRECTION);
 
             if (enumdirection1 == Direction.DOWN && world.getBlockTicks().hasScheduledTick(pos, this)) {
                 return state;
             } else if (direction == enumdirection1.getOpposite() && !this.canSurvive(state, world, pos)) {
                 if (enumdirection1 == Direction.DOWN) {
-                    world.scheduleTick(pos, (Block) this, 2);
+                    world.scheduleTick(pos, this, 2);
                 } else {
-                    world.scheduleTick(pos, (Block) this, 1);
+                    world.scheduleTick(pos, this, 1);
                 }
 
                 return state;
@@ -120,7 +120,7 @@ public class PointedDripstoneBlock extends Block implements Fallable, SimpleWate
                 boolean flag = state.getValue(PointedDripstoneBlock.THICKNESS) == DripstoneThickness.TIP_MERGE;
                 DripstoneThickness dripstonethickness = PointedDripstoneBlock.calculateDripstoneThickness(world, pos, enumdirection1, flag);
 
-                return (BlockState) state.setValue(PointedDripstoneBlock.THICKNESS, dripstonethickness);
+                return state.setValue(PointedDripstoneBlock.THICKNESS, dripstonethickness);
             }
         }
     }
@@ -193,7 +193,7 @@ public class PointedDripstoneBlock extends Block implements Fallable, SimpleWate
                 Optional<PointedDripstoneBlock.FluidInfo> optional = PointedDripstoneBlock.getFluidAboveStalactite(world, pos, state);
 
                 if (optional.isPresent()) {
-                    Fluid fluidtype = ((PointedDripstoneBlock.FluidInfo) optional.get()).fluid;
+                    Fluid fluidtype = optional.get().fluid;
                     float f1;
 
                     if (fluidtype == Fluids.WATER) {
@@ -210,13 +210,13 @@ public class PointedDripstoneBlock extends Block implements Fallable, SimpleWate
                         BlockPos blockposition1 = PointedDripstoneBlock.findTip(state, world, pos, 11, false);
 
                         if (blockposition1 != null) {
-                            if (((PointedDripstoneBlock.FluidInfo) optional.get()).sourceState.is(Blocks.MUD) && fluidtype == Fluids.WATER) {
+                            if (optional.get().sourceState.is(Blocks.MUD) && fluidtype == Fluids.WATER) {
                                 BlockState iblockdata1 = Blocks.CLAY.defaultBlockState();
 
                                 // Paper start
-                                if (org.bukkit.craftbukkit.event.CraftEventFactory.handleBlockFormEvent(world, ((PointedDripstoneBlock.FluidInfo) optional.get()).pos, iblockdata1)) {
-                                Block.pushEntitiesUp(((PointedDripstoneBlock.FluidInfo) optional.get()).sourceState, iblockdata1, world, ((PointedDripstoneBlock.FluidInfo) optional.get()).pos);
-                                world.gameEvent(GameEvent.BLOCK_CHANGE, ((PointedDripstoneBlock.FluidInfo) optional.get()).pos, GameEvent.Context.of(iblockdata1));
+                                if (org.bukkit.craftbukkit.event.CraftEventFactory.handleBlockFormEvent(world, optional.get().pos, iblockdata1)) {
+                                Block.pushEntitiesUp(optional.get().sourceState, iblockdata1, world, optional.get().pos);
+                                world.gameEvent(GameEvent.BLOCK_CHANGE, optional.get().pos, GameEvent.Context.of(iblockdata1));
                                 world.levelEvent(1504, blockposition1, 0);
                                 }
                                 //Paper end
@@ -258,13 +258,13 @@ public class PointedDripstoneBlock extends Block implements Fallable, SimpleWate
             boolean flag = !ctx.isSecondaryUseActive();
             DripstoneThickness dripstonethickness = PointedDripstoneBlock.calculateDripstoneThickness(world, blockposition, enumdirection1, flag);
 
-            return dripstonethickness == null ? null : (BlockState) ((BlockState) ((BlockState) this.defaultBlockState().setValue(PointedDripstoneBlock.TIP_DIRECTION, enumdirection1)).setValue(PointedDripstoneBlock.THICKNESS, dripstonethickness)).setValue(PointedDripstoneBlock.WATERLOGGED, Boolean.valueOf(world.getFluidState(blockposition).getType() == Fluids.WATER));
+            return dripstonethickness == null ? null : this.defaultBlockState().setValue(PointedDripstoneBlock.TIP_DIRECTION, enumdirection1).setValue(PointedDripstoneBlock.THICKNESS, dripstonethickness).setValue(PointedDripstoneBlock.WATERLOGGED, Boolean.valueOf(world.getFluidState(blockposition).getType() == Fluids.WATER));
         }
     }
 
     @Override
     public FluidState getFluidState(BlockState state) {
-        return ((Boolean) state.getValue(PointedDripstoneBlock.WATERLOGGED)).booleanValue() ? Fluids.WATER.getSource(false) : super.getFluidState(state);
+        return state.getValue(PointedDripstoneBlock.WATERLOGGED).booleanValue() ? Fluids.WATER.getSource(false) : super.getFluidState(state);
     }
 
     @Override
@@ -274,7 +274,7 @@ public class PointedDripstoneBlock extends Block implements Fallable, SimpleWate
 
     @Override
     public VoxelShape getShape(BlockState state, BlockGetter world, BlockPos pos, CollisionContext context) {
-        DripstoneThickness dripstonethickness = (DripstoneThickness) state.getValue(PointedDripstoneBlock.THICKNESS);
+        DripstoneThickness dripstonethickness = state.getValue(PointedDripstoneBlock.THICKNESS);
         VoxelShape voxelshape;
 
         if (dripstonethickness == DripstoneThickness.TIP_MERGE) {
@@ -409,7 +409,7 @@ public class PointedDripstoneBlock extends Block implements Fallable, SimpleWate
     }
 
     private static void createDripstone(LevelAccessor generatoraccess, BlockPos blockposition, Direction enumdirection, DripstoneThickness dripstonethickness, BlockPos source) { // CraftBukkit
-        BlockState iblockdata = (BlockState) ((BlockState) ((BlockState) Blocks.POINTED_DRIPSTONE.defaultBlockState().setValue(PointedDripstoneBlock.TIP_DIRECTION, enumdirection)).setValue(PointedDripstoneBlock.THICKNESS, dripstonethickness)).setValue(PointedDripstoneBlock.WATERLOGGED, Boolean.valueOf(generatoraccess.getFluidState(blockposition).getType() == Fluids.WATER));
+        BlockState iblockdata = Blocks.POINTED_DRIPSTONE.defaultBlockState().setValue(PointedDripstoneBlock.TIP_DIRECTION, enumdirection).setValue(PointedDripstoneBlock.THICKNESS, dripstonethickness).setValue(PointedDripstoneBlock.WATERLOGGED, Boolean.valueOf(generatoraccess.getFluidState(blockposition).getType() == Fluids.WATER));
 
         org.bukkit.craftbukkit.event.CraftEventFactory.handleBlockSpreadEvent(generatoraccess, source, blockposition, iblockdata, 3); // CraftBukkit
     }
@@ -453,12 +453,12 @@ public class PointedDripstoneBlock extends Block implements Fallable, SimpleWate
         if (PointedDripstoneBlock.isTip(state, allowMerged)) {
             return pos;
         } else {
-            Direction enumdirection = (Direction) state.getValue(PointedDripstoneBlock.TIP_DIRECTION);
+            Direction enumdirection = state.getValue(PointedDripstoneBlock.TIP_DIRECTION);
             BiPredicate<BlockPos, BlockState> bipredicate = (blockposition1, iblockdata1) -> {
                 return iblockdata1.is(Blocks.POINTED_DRIPSTONE) && iblockdata1.getValue(PointedDripstoneBlock.TIP_DIRECTION) == enumdirection;
             };
 
-            return (BlockPos) PointedDripstoneBlock.findBlockVertical(world, pos, enumdirection.getAxisDirection(), bipredicate, (iblockdata1) -> {
+            return PointedDripstoneBlock.findBlockVertical(world, pos, enumdirection.getAxisDirection(), bipredicate, (iblockdata1) -> {
                 return PointedDripstoneBlock.isTip(iblockdata1, allowMerged);
             }, range).orElse(null); // CraftBukkit - decompile error
         }
@@ -490,7 +490,7 @@ public class PointedDripstoneBlock extends Block implements Fallable, SimpleWate
         } else if (!PointedDripstoneBlock.isPointedDripstoneWithDirection(iblockdata, direction)) {
             return DripstoneThickness.TIP;
         } else {
-            DripstoneThickness dripstonethickness = (DripstoneThickness) iblockdata.getValue(PointedDripstoneBlock.THICKNESS);
+            DripstoneThickness dripstonethickness = iblockdata.getValue(PointedDripstoneBlock.THICKNESS);
 
             if (dripstonethickness != DripstoneThickness.TIP && dripstonethickness != DripstoneThickness.TIP_MERGE) {
                 BlockState iblockdata1 = world.getBlockState(pos.relative(enumdirection1));
@@ -503,11 +503,11 @@ public class PointedDripstoneBlock extends Block implements Fallable, SimpleWate
     }
 
     public static boolean canDrip(BlockState state) {
-        return PointedDripstoneBlock.isStalactite(state) && state.getValue(PointedDripstoneBlock.THICKNESS) == DripstoneThickness.TIP && !((Boolean) state.getValue(PointedDripstoneBlock.WATERLOGGED)).booleanValue();
+        return PointedDripstoneBlock.isStalactite(state) && state.getValue(PointedDripstoneBlock.THICKNESS) == DripstoneThickness.TIP && !state.getValue(PointedDripstoneBlock.WATERLOGGED).booleanValue();
     }
 
     private static boolean canTipGrow(BlockState state, ServerLevel world, BlockPos pos) {
-        Direction enumdirection = (Direction) state.getValue(PointedDripstoneBlock.TIP_DIRECTION);
+        Direction enumdirection = state.getValue(PointedDripstoneBlock.TIP_DIRECTION);
         BlockPos blockposition1 = pos.relative(enumdirection);
         BlockState iblockdata1 = world.getBlockState(blockposition1);
 
@@ -515,7 +515,7 @@ public class PointedDripstoneBlock extends Block implements Fallable, SimpleWate
     }
 
     private static Optional<BlockPos> findRootBlock(Level world, BlockPos pos, BlockState state, int range) {
-        Direction enumdirection = (Direction) state.getValue(PointedDripstoneBlock.TIP_DIRECTION);
+        Direction enumdirection = state.getValue(PointedDripstoneBlock.TIP_DIRECTION);
         BiPredicate<BlockPos, BlockState> bipredicate = (blockposition1, iblockdata1) -> {
             return iblockdata1.is(Blocks.POINTED_DRIPSTONE) && iblockdata1.getValue(PointedDripstoneBlock.TIP_DIRECTION) == enumdirection;
         };
@@ -536,7 +536,7 @@ public class PointedDripstoneBlock extends Block implements Fallable, SimpleWate
         if (!state.is(Blocks.POINTED_DRIPSTONE)) {
             return false;
         } else {
-            DripstoneThickness dripstonethickness = (DripstoneThickness) state.getValue(PointedDripstoneBlock.THICKNESS);
+            DripstoneThickness dripstonethickness = state.getValue(PointedDripstoneBlock.THICKNESS);
 
             return dripstonethickness == DripstoneThickness.TIP || allowMerged && dripstonethickness == DripstoneThickness.TIP_MERGE;
         }
@@ -576,7 +576,7 @@ public class PointedDripstoneBlock extends Block implements Fallable, SimpleWate
             return PointedDripstoneBlock.canDripThrough(world, blockposition1, iblockdata);
         };
 
-        return (BlockPos) PointedDripstoneBlock.findBlockVertical(world, pos, Direction.DOWN.getAxisDirection(), bipredicate, predicate, 11).orElse(null); // CraftBukkit - decompile error
+        return PointedDripstoneBlock.findBlockVertical(world, pos, Direction.DOWN.getAxisDirection(), bipredicate, predicate, 11).orElse(null); // CraftBukkit - decompile error
     }
 
     @Nullable
@@ -585,11 +585,11 @@ public class PointedDripstoneBlock extends Block implements Fallable, SimpleWate
             return PointedDripstoneBlock.canDripThrough(world, blockposition1, iblockdata);
         };
 
-        return (BlockPos) PointedDripstoneBlock.findBlockVertical(world, pos, Direction.UP.getAxisDirection(), bipredicate, PointedDripstoneBlock::canDrip, 11).orElse(null); // CraftBukkit - decompile error
+        return PointedDripstoneBlock.findBlockVertical(world, pos, Direction.UP.getAxisDirection(), bipredicate, PointedDripstoneBlock::canDrip, 11).orElse(null); // CraftBukkit - decompile error
     }
 
     public static Fluid getCauldronFillFluidType(ServerLevel world, BlockPos pos) {
-        return (Fluid) PointedDripstoneBlock.getFluidAboveStalactite(world, pos, world.getBlockState(pos)).map((pointeddripstoneblock_a) -> {
+        return PointedDripstoneBlock.getFluidAboveStalactite(world, pos, world.getBlockState(pos)).map((pointeddripstoneblock_a) -> {
             return pointeddripstoneblock_a.fluid;
         }).filter(PointedDripstoneBlock::canFillCauldron).orElse(Fluids.EMPTY);
     }
@@ -619,7 +619,7 @@ public class PointedDripstoneBlock extends Block implements Fallable, SimpleWate
     }
 
     private static Fluid getDripFluid(Level world, Fluid fluid) {
-        return (Fluid) (fluid.isSame(Fluids.EMPTY) ? (world.dimensionType().ultraWarm() ? Fluids.LAVA : Fluids.WATER) : fluid);
+        return fluid.isSame(Fluids.EMPTY) ? (world.dimensionType().ultraWarm() ? Fluids.LAVA : Fluids.WATER) : fluid;
     }
 
     private static Optional<BlockPos> findBlockVertical(LevelAccessor world, BlockPos pos, Direction.AxisDirection direction, BiPredicate<BlockPos, BlockState> continuePredicate, Predicate<BlockState> stopPredicate, int range) {
diff --git a/src/main/java/net/minecraft/world/level/block/PowderSnowBlock.java b/src/main/java/net/minecraft/world/level/block/PowderSnowBlock.java
index 518d3832c36c9ecf1ed9267ffc1f926dc84b7989..49f48f9ebee69968d6075fdee01b14d33ab90edc 100644
--- a/src/main/java/net/minecraft/world/level/block/PowderSnowBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/PowderSnowBlock.java
@@ -45,7 +45,7 @@ public class PowderSnowBlock extends Block implements BucketPickup {
 
     @Override
     public boolean skipRendering(BlockState state, BlockState stateFrom, Direction direction) {
-        return stateFrom.is((Block) this) ? true : super.skipRendering(state, stateFrom, direction);
+        return stateFrom.is(this) ? true : super.skipRendering(state, stateFrom, direction);
     }
 
     @Override
@@ -56,14 +56,14 @@ public class PowderSnowBlock extends Block implements BucketPickup {
     @Override
     public void entityInside(BlockState state, Level world, BlockPos pos, Entity entity) {
         if (!new io.papermc.paper.event.entity.EntityInsideBlockEvent(entity.getBukkitEntity(), org.bukkit.craftbukkit.block.CraftBlock.at(world, pos)).callEvent()) { return; } // Paper
-        if (!(entity instanceof LivingEntity) || entity.getFeetBlockState().is((Block) this)) {
+        if (!(entity instanceof LivingEntity) || entity.getFeetBlockState().is(this)) {
             entity.makeStuckInBlock(state, new Vec3(0.8999999761581421D, 1.5D, 0.8999999761581421D));
             if (world.isClientSide) {
                 RandomSource randomsource = world.getRandom();
                 boolean flag = entity.xOld != entity.getX() || entity.zOld != entity.getZ();
 
                 if (flag && randomsource.nextBoolean()) {
-                    world.addParticle(ParticleTypes.SNOWFLAKE, entity.getX(), (double) (pos.getY() + 1), entity.getZ(), (double) (Mth.randomBetween(randomsource, -1.0F, 1.0F) * 0.083333336F), 0.05000000074505806D, (double) (Mth.randomBetween(randomsource, -1.0F, 1.0F) * 0.083333336F));
+                    world.addParticle(ParticleTypes.SNOWFLAKE, entity.getX(), pos.getY() + 1, entity.getZ(), Mth.randomBetween(randomsource, -1.0F, 1.0F) * 0.083333336F, 0.05000000074505806D, Mth.randomBetween(randomsource, -1.0F, 1.0F) * 0.083333336F);
                 }
             }
         }
diff --git a/src/main/java/net/minecraft/world/level/block/PoweredRailBlock.java b/src/main/java/net/minecraft/world/level/block/PoweredRailBlock.java
index 6819d3cb7a91887e733b1490473f3d0c95f4df3d..9a13a3c9430681cf33cb8a19a861bf026a9cd4ae 100644
--- a/src/main/java/net/minecraft/world/level/block/PoweredRailBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/PoweredRailBlock.java
@@ -19,7 +19,7 @@ public class PoweredRailBlock extends BaseRailBlock {
 
     protected PoweredRailBlock(BlockBehaviour.Properties settings) {
         super(true, settings);
-        this.registerDefaultState((BlockState) ((BlockState) ((BlockState) ((BlockState) this.stateDefinition.any()).setValue(PoweredRailBlock.SHAPE, RailShape.NORTH_SOUTH)).setValue(PoweredRailBlock.POWERED, Boolean.FALSE)).setValue(PoweredRailBlock.WATERLOGGED, Boolean.FALSE));
+        this.registerDefaultState(this.stateDefinition.any().setValue(PoweredRailBlock.SHAPE, RailShape.NORTH_SOUTH).setValue(PoweredRailBlock.POWERED, Boolean.FALSE).setValue(PoweredRailBlock.WATERLOGGED, Boolean.FALSE));
     }
 
     protected boolean findPoweredRailSignal(Level world, BlockPos pos, BlockState state, boolean flag, int distance) {
@@ -30,7 +30,7 @@ public class PoweredRailBlock extends BaseRailBlock {
             int k = pos.getY();
             int l = pos.getZ();
             boolean flag1 = true;
-            RailShape blockpropertytrackposition = (RailShape) state.getValue(PoweredRailBlock.SHAPE);
+            RailShape blockpropertytrackposition = state.getValue(PoweredRailBlock.SHAPE);
 
             switch (blockpropertytrackposition) {
                 case NORTH_SOUTH:
@@ -99,18 +99,18 @@ public class PoweredRailBlock extends BaseRailBlock {
     protected boolean isSameRailWithPower(Level world, BlockPos pos, boolean flag, int distance, RailShape shape) {
         BlockState iblockdata = world.getBlockState(pos);
 
-        if (!iblockdata.is((Block) this)) {
+        if (!iblockdata.is(this)) {
             return false;
         } else {
-            RailShape blockpropertytrackposition1 = (RailShape) iblockdata.getValue(PoweredRailBlock.SHAPE);
+            RailShape blockpropertytrackposition1 = iblockdata.getValue(PoweredRailBlock.SHAPE);
 
-            return shape == RailShape.EAST_WEST && (blockpropertytrackposition1 == RailShape.NORTH_SOUTH || blockpropertytrackposition1 == RailShape.ASCENDING_NORTH || blockpropertytrackposition1 == RailShape.ASCENDING_SOUTH) ? false : (shape == RailShape.NORTH_SOUTH && (blockpropertytrackposition1 == RailShape.EAST_WEST || blockpropertytrackposition1 == RailShape.ASCENDING_EAST || blockpropertytrackposition1 == RailShape.ASCENDING_WEST) ? false : (((Boolean) iblockdata.getValue(PoweredRailBlock.POWERED)).booleanValue() ? (world.hasNeighborSignal(pos) ? true : this.findPoweredRailSignal(world, pos, iblockdata, flag, distance + 1)) : false));
+            return shape == RailShape.EAST_WEST && (blockpropertytrackposition1 == RailShape.NORTH_SOUTH || blockpropertytrackposition1 == RailShape.ASCENDING_NORTH || blockpropertytrackposition1 == RailShape.ASCENDING_SOUTH) ? false : (shape == RailShape.NORTH_SOUTH && (blockpropertytrackposition1 == RailShape.EAST_WEST || blockpropertytrackposition1 == RailShape.ASCENDING_EAST || blockpropertytrackposition1 == RailShape.ASCENDING_WEST) ? false : (iblockdata.getValue(PoweredRailBlock.POWERED).booleanValue() ? (world.hasNeighborSignal(pos) ? true : this.findPoweredRailSignal(world, pos, iblockdata, flag, distance + 1)) : false));
         }
     }
 
     @Override
     protected void updateState(BlockState state, Level world, BlockPos pos, Block neighbor) {
-        boolean flag = ((Boolean) state.getValue(PoweredRailBlock.POWERED)).booleanValue();
+        boolean flag = state.getValue(PoweredRailBlock.POWERED).booleanValue();
         boolean flag1 = world.hasNeighborSignal(pos) || this.findPoweredRailSignal(world, pos, state, true, 0) || this.findPoweredRailSignal(world, pos, state, false, 0);
 
         if (flag1 != flag) {
@@ -121,9 +121,9 @@ public class PoweredRailBlock extends BaseRailBlock {
                 return;
             }
             // CraftBukkit end
-            world.setBlock(pos, (BlockState) state.setValue(PoweredRailBlock.POWERED, Boolean.valueOf(flag1)), 3);
+            world.setBlock(pos, state.setValue(PoweredRailBlock.POWERED, Boolean.valueOf(flag1)), 3);
             world.updateNeighborsAt(pos.below(), this);
-            if (((RailShape) state.getValue(PoweredRailBlock.SHAPE)).isAscending()) {
+            if (state.getValue(PoweredRailBlock.SHAPE).isAscending()) {
                 world.updateNeighborsAt(pos.above(), this);
             }
         }
@@ -139,69 +139,69 @@ public class PoweredRailBlock extends BaseRailBlock {
     public BlockState rotate(BlockState state, Rotation rotation) {
         switch (rotation) {
             case CLOCKWISE_180:
-                switch ((RailShape) state.getValue(PoweredRailBlock.SHAPE)) {
+                switch (state.getValue(PoweredRailBlock.SHAPE)) {
                     case ASCENDING_EAST:
-                        return (BlockState) state.setValue(PoweredRailBlock.SHAPE, RailShape.ASCENDING_WEST);
+                        return state.setValue(PoweredRailBlock.SHAPE, RailShape.ASCENDING_WEST);
                     case ASCENDING_WEST:
-                        return (BlockState) state.setValue(PoweredRailBlock.SHAPE, RailShape.ASCENDING_EAST);
+                        return state.setValue(PoweredRailBlock.SHAPE, RailShape.ASCENDING_EAST);
                     case ASCENDING_NORTH:
-                        return (BlockState) state.setValue(PoweredRailBlock.SHAPE, RailShape.ASCENDING_SOUTH);
+                        return state.setValue(PoweredRailBlock.SHAPE, RailShape.ASCENDING_SOUTH);
                     case ASCENDING_SOUTH:
-                        return (BlockState) state.setValue(PoweredRailBlock.SHAPE, RailShape.ASCENDING_NORTH);
+                        return state.setValue(PoweredRailBlock.SHAPE, RailShape.ASCENDING_NORTH);
                     case SOUTH_EAST:
-                        return (BlockState) state.setValue(PoweredRailBlock.SHAPE, RailShape.NORTH_WEST);
+                        return state.setValue(PoweredRailBlock.SHAPE, RailShape.NORTH_WEST);
                     case SOUTH_WEST:
-                        return (BlockState) state.setValue(PoweredRailBlock.SHAPE, RailShape.NORTH_EAST);
+                        return state.setValue(PoweredRailBlock.SHAPE, RailShape.NORTH_EAST);
                     case NORTH_WEST:
-                        return (BlockState) state.setValue(PoweredRailBlock.SHAPE, RailShape.SOUTH_EAST);
+                        return state.setValue(PoweredRailBlock.SHAPE, RailShape.SOUTH_EAST);
                     case NORTH_EAST:
-                        return (BlockState) state.setValue(PoweredRailBlock.SHAPE, RailShape.SOUTH_WEST);
+                        return state.setValue(PoweredRailBlock.SHAPE, RailShape.SOUTH_WEST);
                 }
             case COUNTERCLOCKWISE_90:
-                switch ((RailShape) state.getValue(PoweredRailBlock.SHAPE)) {
+                switch (state.getValue(PoweredRailBlock.SHAPE)) {
                     case NORTH_SOUTH:
-                        return (BlockState) state.setValue(PoweredRailBlock.SHAPE, RailShape.EAST_WEST);
+                        return state.setValue(PoweredRailBlock.SHAPE, RailShape.EAST_WEST);
                     case EAST_WEST:
-                        return (BlockState) state.setValue(PoweredRailBlock.SHAPE, RailShape.NORTH_SOUTH);
+                        return state.setValue(PoweredRailBlock.SHAPE, RailShape.NORTH_SOUTH);
                     case ASCENDING_EAST:
-                        return (BlockState) state.setValue(PoweredRailBlock.SHAPE, RailShape.ASCENDING_NORTH);
+                        return state.setValue(PoweredRailBlock.SHAPE, RailShape.ASCENDING_NORTH);
                     case ASCENDING_WEST:
-                        return (BlockState) state.setValue(PoweredRailBlock.SHAPE, RailShape.ASCENDING_SOUTH);
+                        return state.setValue(PoweredRailBlock.SHAPE, RailShape.ASCENDING_SOUTH);
                     case ASCENDING_NORTH:
-                        return (BlockState) state.setValue(PoweredRailBlock.SHAPE, RailShape.ASCENDING_WEST);
+                        return state.setValue(PoweredRailBlock.SHAPE, RailShape.ASCENDING_WEST);
                     case ASCENDING_SOUTH:
-                        return (BlockState) state.setValue(PoweredRailBlock.SHAPE, RailShape.ASCENDING_EAST);
+                        return state.setValue(PoweredRailBlock.SHAPE, RailShape.ASCENDING_EAST);
                     case SOUTH_EAST:
-                        return (BlockState) state.setValue(PoweredRailBlock.SHAPE, RailShape.NORTH_EAST);
+                        return state.setValue(PoweredRailBlock.SHAPE, RailShape.NORTH_EAST);
                     case SOUTH_WEST:
-                        return (BlockState) state.setValue(PoweredRailBlock.SHAPE, RailShape.SOUTH_EAST);
+                        return state.setValue(PoweredRailBlock.SHAPE, RailShape.SOUTH_EAST);
                     case NORTH_WEST:
-                        return (BlockState) state.setValue(PoweredRailBlock.SHAPE, RailShape.SOUTH_WEST);
+                        return state.setValue(PoweredRailBlock.SHAPE, RailShape.SOUTH_WEST);
                     case NORTH_EAST:
-                        return (BlockState) state.setValue(PoweredRailBlock.SHAPE, RailShape.NORTH_WEST);
+                        return state.setValue(PoweredRailBlock.SHAPE, RailShape.NORTH_WEST);
                 }
             case CLOCKWISE_90:
-                switch ((RailShape) state.getValue(PoweredRailBlock.SHAPE)) {
+                switch (state.getValue(PoweredRailBlock.SHAPE)) {
                     case NORTH_SOUTH:
-                        return (BlockState) state.setValue(PoweredRailBlock.SHAPE, RailShape.EAST_WEST);
+                        return state.setValue(PoweredRailBlock.SHAPE, RailShape.EAST_WEST);
                     case EAST_WEST:
-                        return (BlockState) state.setValue(PoweredRailBlock.SHAPE, RailShape.NORTH_SOUTH);
+                        return state.setValue(PoweredRailBlock.SHAPE, RailShape.NORTH_SOUTH);
                     case ASCENDING_EAST:
-                        return (BlockState) state.setValue(PoweredRailBlock.SHAPE, RailShape.ASCENDING_SOUTH);
+                        return state.setValue(PoweredRailBlock.SHAPE, RailShape.ASCENDING_SOUTH);
                     case ASCENDING_WEST:
-                        return (BlockState) state.setValue(PoweredRailBlock.SHAPE, RailShape.ASCENDING_NORTH);
+                        return state.setValue(PoweredRailBlock.SHAPE, RailShape.ASCENDING_NORTH);
                     case ASCENDING_NORTH:
-                        return (BlockState) state.setValue(PoweredRailBlock.SHAPE, RailShape.ASCENDING_EAST);
+                        return state.setValue(PoweredRailBlock.SHAPE, RailShape.ASCENDING_EAST);
                     case ASCENDING_SOUTH:
-                        return (BlockState) state.setValue(PoweredRailBlock.SHAPE, RailShape.ASCENDING_WEST);
+                        return state.setValue(PoweredRailBlock.SHAPE, RailShape.ASCENDING_WEST);
                     case SOUTH_EAST:
-                        return (BlockState) state.setValue(PoweredRailBlock.SHAPE, RailShape.SOUTH_WEST);
+                        return state.setValue(PoweredRailBlock.SHAPE, RailShape.SOUTH_WEST);
                     case SOUTH_WEST:
-                        return (BlockState) state.setValue(PoweredRailBlock.SHAPE, RailShape.NORTH_WEST);
+                        return state.setValue(PoweredRailBlock.SHAPE, RailShape.NORTH_WEST);
                     case NORTH_WEST:
-                        return (BlockState) state.setValue(PoweredRailBlock.SHAPE, RailShape.NORTH_EAST);
+                        return state.setValue(PoweredRailBlock.SHAPE, RailShape.NORTH_EAST);
                     case NORTH_EAST:
-                        return (BlockState) state.setValue(PoweredRailBlock.SHAPE, RailShape.SOUTH_EAST);
+                        return state.setValue(PoweredRailBlock.SHAPE, RailShape.SOUTH_EAST);
                 }
             default:
                 return state;
@@ -210,44 +210,44 @@ public class PoweredRailBlock extends BaseRailBlock {
 
     @Override
     public BlockState mirror(BlockState state, Mirror mirror) {
-        RailShape blockpropertytrackposition = (RailShape) state.getValue(PoweredRailBlock.SHAPE);
+        RailShape blockpropertytrackposition = state.getValue(PoweredRailBlock.SHAPE);
 
         switch (mirror) {
             case LEFT_RIGHT:
                 switch (blockpropertytrackposition) {
                     case ASCENDING_NORTH:
-                        return (BlockState) state.setValue(PoweredRailBlock.SHAPE, RailShape.ASCENDING_SOUTH);
+                        return state.setValue(PoweredRailBlock.SHAPE, RailShape.ASCENDING_SOUTH);
                     case ASCENDING_SOUTH:
-                        return (BlockState) state.setValue(PoweredRailBlock.SHAPE, RailShape.ASCENDING_NORTH);
+                        return state.setValue(PoweredRailBlock.SHAPE, RailShape.ASCENDING_NORTH);
                     case SOUTH_EAST:
-                        return (BlockState) state.setValue(PoweredRailBlock.SHAPE, RailShape.NORTH_EAST);
+                        return state.setValue(PoweredRailBlock.SHAPE, RailShape.NORTH_EAST);
                     case SOUTH_WEST:
-                        return (BlockState) state.setValue(PoweredRailBlock.SHAPE, RailShape.NORTH_WEST);
+                        return state.setValue(PoweredRailBlock.SHAPE, RailShape.NORTH_WEST);
                     case NORTH_WEST:
-                        return (BlockState) state.setValue(PoweredRailBlock.SHAPE, RailShape.SOUTH_WEST);
+                        return state.setValue(PoweredRailBlock.SHAPE, RailShape.SOUTH_WEST);
                     case NORTH_EAST:
-                        return (BlockState) state.setValue(PoweredRailBlock.SHAPE, RailShape.SOUTH_EAST);
+                        return state.setValue(PoweredRailBlock.SHAPE, RailShape.SOUTH_EAST);
                     default:
                         return super.mirror(state, mirror);
                 }
             case FRONT_BACK:
                 switch (blockpropertytrackposition) {
                     case ASCENDING_EAST:
-                        return (BlockState) state.setValue(PoweredRailBlock.SHAPE, RailShape.ASCENDING_WEST);
+                        return state.setValue(PoweredRailBlock.SHAPE, RailShape.ASCENDING_WEST);
                     case ASCENDING_WEST:
-                        return (BlockState) state.setValue(PoweredRailBlock.SHAPE, RailShape.ASCENDING_EAST);
+                        return state.setValue(PoweredRailBlock.SHAPE, RailShape.ASCENDING_EAST);
                     case ASCENDING_NORTH:
                     case ASCENDING_SOUTH:
                     default:
                         break;
                     case SOUTH_EAST:
-                        return (BlockState) state.setValue(PoweredRailBlock.SHAPE, RailShape.SOUTH_WEST);
+                        return state.setValue(PoweredRailBlock.SHAPE, RailShape.SOUTH_WEST);
                     case SOUTH_WEST:
-                        return (BlockState) state.setValue(PoweredRailBlock.SHAPE, RailShape.SOUTH_EAST);
+                        return state.setValue(PoweredRailBlock.SHAPE, RailShape.SOUTH_EAST);
                     case NORTH_WEST:
-                        return (BlockState) state.setValue(PoweredRailBlock.SHAPE, RailShape.NORTH_EAST);
+                        return state.setValue(PoweredRailBlock.SHAPE, RailShape.NORTH_EAST);
                     case NORTH_EAST:
-                        return (BlockState) state.setValue(PoweredRailBlock.SHAPE, RailShape.NORTH_WEST);
+                        return state.setValue(PoweredRailBlock.SHAPE, RailShape.NORTH_WEST);
                 }
         }
 
diff --git a/src/main/java/net/minecraft/world/level/block/PressurePlateBlock.java b/src/main/java/net/minecraft/world/level/block/PressurePlateBlock.java
index ab274e7b9faef014ce15766defb3813a7f71f4da..852c2273bd2c19231fdd99c28e470cf2f026db0f 100644
--- a/src/main/java/net/minecraft/world/level/block/PressurePlateBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/PressurePlateBlock.java
@@ -27,7 +27,7 @@ public class PressurePlateBlock extends BasePressurePlateBlock {
 
     protected PressurePlateBlock(PressurePlateBlock.Sensitivity type, BlockBehaviour.Properties settings, SoundEvent depressSound, SoundEvent pressSound) {
         super(settings);
-        this.registerDefaultState((BlockState) ((BlockState) this.stateDefinition.any()).setValue(PressurePlateBlock.POWERED, Boolean.FALSE));
+        this.registerDefaultState(this.stateDefinition.any().setValue(PressurePlateBlock.POWERED, Boolean.FALSE));
         this.sensitivity = type;
         this.soundOff = depressSound;
         this.soundOn = pressSound;
@@ -35,12 +35,12 @@ public class PressurePlateBlock extends BasePressurePlateBlock {
 
     @Override
     protected int getSignalForState(BlockState state) {
-        return ((Boolean) state.getValue(PressurePlateBlock.POWERED)).booleanValue() ? 15 : 0;
+        return state.getValue(PressurePlateBlock.POWERED).booleanValue() ? 15 : 0;
     }
 
     @Override
     protected BlockState setSignalForState(BlockState state, int rsOut) {
-        return (BlockState) state.setValue(PressurePlateBlock.POWERED, Boolean.valueOf(rsOut > 0));
+        return state.setValue(PressurePlateBlock.POWERED, Boolean.valueOf(rsOut > 0));
     }
 
     @Override
@@ -60,7 +60,7 @@ public class PressurePlateBlock extends BasePressurePlateBlock {
 
         switch (this.sensitivity) {
             case EVERYTHING:
-                list = world.getEntities((Entity) null, axisalignedbb);
+                list = world.getEntities(null, axisalignedbb);
                 break;
             case MOBS:
                 list = world.getEntitiesOfClass(LivingEntity.class, axisalignedbb);
diff --git a/src/main/java/net/minecraft/world/level/block/PumpkinBlock.java b/src/main/java/net/minecraft/world/level/block/PumpkinBlock.java
index 4568d1659dda897de5f6c2059629a4718d401e63..0b962e3722e18e93c11cc69c248b95aef3d2c474 100644
--- a/src/main/java/net/minecraft/world/level/block/PumpkinBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/PumpkinBlock.java
@@ -36,7 +36,7 @@ public class PumpkinBlock extends StemGrownBlock {
                 // Paper end
                 Direction direction = hit.getDirection();
                 Direction direction2 = direction.getAxis() == Direction.Axis.Y ? player.getDirection().getOpposite() : direction;
-                world.playSound((Player)null, pos, SoundEvents.PUMPKIN_CARVE, SoundSource.BLOCKS, 1.0F, 1.0F);
+                world.playSound(null, pos, SoundEvents.PUMPKIN_CARVE, SoundSource.BLOCKS, 1.0F, 1.0F);
                 world.setBlock(pos, Blocks.CARVED_PUMPKIN.defaultBlockState().setValue(CarvedPumpkinBlock.FACING, direction2), 11);
                 // Paper start - Add PlayerShearBlockEvent
                 for (org.bukkit.inventory.ItemStack item : event.getDrops()) {
diff --git a/src/main/java/net/minecraft/world/level/block/RedStoneOreBlock.java b/src/main/java/net/minecraft/world/level/block/RedStoneOreBlock.java
index a6121bc6b1db1ec37dd68f14ab8db7c41faccb77..1419a228aa1ce1fabec803831444f71db1bcd4da 100644
--- a/src/main/java/net/minecraft/world/level/block/RedStoneOreBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/RedStoneOreBlock.java
@@ -31,7 +31,7 @@ public class RedStoneOreBlock extends Block {
 
     public RedStoneOreBlock(BlockBehaviour.Properties settings) {
         super(settings);
-        this.registerDefaultState((BlockState) this.defaultBlockState().setValue(RedStoneOreBlock.LIT, Boolean.FALSE));
+        this.registerDefaultState(this.defaultBlockState().setValue(RedStoneOreBlock.LIT, Boolean.FALSE));
     }
 
     @Override
@@ -77,31 +77,31 @@ public class RedStoneOreBlock extends Block {
 
     private static void interact(BlockState iblockdata, Level world, BlockPos blockposition, Entity entity) { // CraftBukkit - add Entity
         RedStoneOreBlock.spawnParticles(world, blockposition);
-        if (!((Boolean) iblockdata.getValue(RedStoneOreBlock.LIT)).booleanValue()) {
+        if (!iblockdata.getValue(RedStoneOreBlock.LIT).booleanValue()) {
             // CraftBukkit start
             if (CraftEventFactory.callEntityChangeBlockEvent(entity, blockposition, iblockdata.setValue(RedStoneOreBlock.LIT, Boolean.TRUE)).isCancelled()) {
                 return;
             }
             // CraftBukkit end
-            world.setBlock(blockposition, (BlockState) iblockdata.setValue(RedStoneOreBlock.LIT, Boolean.TRUE), 3);
+            world.setBlock(blockposition, iblockdata.setValue(RedStoneOreBlock.LIT, Boolean.TRUE), 3);
         }
 
     }
 
     @Override
     public boolean isRandomlyTicking(BlockState state) {
-        return ((Boolean) state.getValue(RedStoneOreBlock.LIT)).booleanValue();
+        return state.getValue(RedStoneOreBlock.LIT).booleanValue();
     }
 
     @Override
     public void randomTick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
-        if (((Boolean) state.getValue(RedStoneOreBlock.LIT)).booleanValue()) {
+        if (state.getValue(RedStoneOreBlock.LIT).booleanValue()) {
             // CraftBukkit start
             if (CraftEventFactory.callBlockFadeEvent(world, pos, state.setValue(RedStoneOreBlock.LIT, Boolean.FALSE)).isCancelled()) {
                 return;
             }
             // CraftBukkit end
-            world.setBlock(pos, (BlockState) state.setValue(RedStoneOreBlock.LIT, Boolean.FALSE), 3);
+            world.setBlock(pos, state.setValue(RedStoneOreBlock.LIT, Boolean.FALSE), 3);
         }
 
     }
@@ -127,7 +127,7 @@ public class RedStoneOreBlock extends Block {
 
     @Override
     public void animateTick(BlockState state, Level world, BlockPos pos, RandomSource random) {
-        if (((Boolean) state.getValue(RedStoneOreBlock.LIT)).booleanValue()) {
+        if (state.getValue(RedStoneOreBlock.LIT).booleanValue()) {
             RedStoneOreBlock.spawnParticles(world, pos);
         }
 
diff --git a/src/main/java/net/minecraft/world/level/block/RedStoneWireBlock.java b/src/main/java/net/minecraft/world/level/block/RedStoneWireBlock.java
index ed836873c2f3f49259606369a92c7baba3d35631..b4bfd7b8a55be6f6e4371900ed97e9b89d63a8d7 100644
--- a/src/main/java/net/minecraft/world/level/block/RedStoneWireBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/RedStoneWireBlock.java
@@ -52,16 +52,16 @@ public class RedStoneWireBlock extends Block {
     protected static final int S = 13;
     private static final VoxelShape SHAPE_DOT = Block.box(3.0D, 0.0D, 3.0D, 13.0D, 1.0D, 13.0D);
     private static final Map<Direction, VoxelShape> SHAPES_FLOOR = Maps.newEnumMap(ImmutableMap.of(Direction.NORTH, Block.box(3.0D, 0.0D, 0.0D, 13.0D, 1.0D, 13.0D), Direction.SOUTH, Block.box(3.0D, 0.0D, 3.0D, 13.0D, 1.0D, 16.0D), Direction.EAST, Block.box(3.0D, 0.0D, 3.0D, 16.0D, 1.0D, 13.0D), Direction.WEST, Block.box(0.0D, 0.0D, 3.0D, 13.0D, 1.0D, 13.0D)));
-    private static final Map<Direction, VoxelShape> SHAPES_UP = Maps.newEnumMap(ImmutableMap.of(Direction.NORTH, Shapes.or((VoxelShape) RedStoneWireBlock.SHAPES_FLOOR.get(Direction.NORTH), Block.box(3.0D, 0.0D, 0.0D, 13.0D, 16.0D, 1.0D)), Direction.SOUTH, Shapes.or((VoxelShape) RedStoneWireBlock.SHAPES_FLOOR.get(Direction.SOUTH), Block.box(3.0D, 0.0D, 15.0D, 13.0D, 16.0D, 16.0D)), Direction.EAST, Shapes.or((VoxelShape) RedStoneWireBlock.SHAPES_FLOOR.get(Direction.EAST), Block.box(15.0D, 0.0D, 3.0D, 16.0D, 16.0D, 13.0D)), Direction.WEST, Shapes.or((VoxelShape) RedStoneWireBlock.SHAPES_FLOOR.get(Direction.WEST), Block.box(0.0D, 0.0D, 3.0D, 1.0D, 16.0D, 13.0D))));
+    private static final Map<Direction, VoxelShape> SHAPES_UP = Maps.newEnumMap(ImmutableMap.of(Direction.NORTH, Shapes.or(RedStoneWireBlock.SHAPES_FLOOR.get(Direction.NORTH), Block.box(3.0D, 0.0D, 0.0D, 13.0D, 16.0D, 1.0D)), Direction.SOUTH, Shapes.or(RedStoneWireBlock.SHAPES_FLOOR.get(Direction.SOUTH), Block.box(3.0D, 0.0D, 15.0D, 13.0D, 16.0D, 16.0D)), Direction.EAST, Shapes.or(RedStoneWireBlock.SHAPES_FLOOR.get(Direction.EAST), Block.box(15.0D, 0.0D, 3.0D, 16.0D, 16.0D, 13.0D)), Direction.WEST, Shapes.or(RedStoneWireBlock.SHAPES_FLOOR.get(Direction.WEST), Block.box(0.0D, 0.0D, 3.0D, 1.0D, 16.0D, 13.0D))));
     private static final Map<BlockState, VoxelShape> SHAPES_CACHE = Maps.newHashMap();
-    private static final Vec3[] COLORS = (Vec3[]) Util.make(new Vec3[16], (avec3d) -> {
+    private static final Vec3[] COLORS = Util.make(new Vec3[16], (avec3d) -> {
         for (int i = 0; i <= 15; ++i) {
             float f = (float) i / 15.0F;
             float f1 = f * 0.6F + (f > 0.0F ? 0.4F : 0.3F);
             float f2 = Mth.clamp(f * f * 0.7F - 0.5F, 0.0F, 1.0F);
             float f3 = Mth.clamp(f * f * 0.6F - 0.7F, 0.0F, 1.0F);
 
-            avec3d[i] = new Vec3((double) f1, (double) f2, (double) f3);
+            avec3d[i] = new Vec3(f1, f2, f3);
         }
 
     });
@@ -71,14 +71,14 @@ public class RedStoneWireBlock extends Block {
 
     public RedStoneWireBlock(BlockBehaviour.Properties settings) {
         super(settings);
-        this.registerDefaultState((BlockState) ((BlockState) ((BlockState) ((BlockState) ((BlockState) ((BlockState) this.stateDefinition.any()).setValue(RedStoneWireBlock.NORTH, RedstoneSide.NONE)).setValue(RedStoneWireBlock.EAST, RedstoneSide.NONE)).setValue(RedStoneWireBlock.SOUTH, RedstoneSide.NONE)).setValue(RedStoneWireBlock.WEST, RedstoneSide.NONE)).setValue(RedStoneWireBlock.POWER, Integer.valueOf(0)));
-        this.crossState = (BlockState) ((BlockState) ((BlockState) ((BlockState) this.defaultBlockState().setValue(RedStoneWireBlock.NORTH, RedstoneSide.SIDE)).setValue(RedStoneWireBlock.EAST, RedstoneSide.SIDE)).setValue(RedStoneWireBlock.SOUTH, RedstoneSide.SIDE)).setValue(RedStoneWireBlock.WEST, RedstoneSide.SIDE);
+        this.registerDefaultState(this.stateDefinition.any().setValue(RedStoneWireBlock.NORTH, RedstoneSide.NONE).setValue(RedStoneWireBlock.EAST, RedstoneSide.NONE).setValue(RedStoneWireBlock.SOUTH, RedstoneSide.NONE).setValue(RedStoneWireBlock.WEST, RedstoneSide.NONE).setValue(RedStoneWireBlock.POWER, Integer.valueOf(0)));
+        this.crossState = this.defaultBlockState().setValue(RedStoneWireBlock.NORTH, RedstoneSide.SIDE).setValue(RedStoneWireBlock.EAST, RedstoneSide.SIDE).setValue(RedStoneWireBlock.SOUTH, RedstoneSide.SIDE).setValue(RedStoneWireBlock.WEST, RedstoneSide.SIDE);
         UnmodifiableIterator unmodifiableiterator = this.getStateDefinition().getPossibleStates().iterator();
 
         while (unmodifiableiterator.hasNext()) {
             BlockState iblockdata = (BlockState) unmodifiableiterator.next();
 
-            if (((Integer) iblockdata.getValue(RedStoneWireBlock.POWER)).intValue() == 0) {
+            if (iblockdata.getValue(RedStoneWireBlock.POWER).intValue() == 0) {
                 RedStoneWireBlock.SHAPES_CACHE.put(iblockdata, this.calculateShape(iblockdata));
             }
         }
@@ -94,9 +94,9 @@ public class RedStoneWireBlock extends Block {
             RedstoneSide blockpropertyredstoneside = (RedstoneSide) state.getValue((Property) RedStoneWireBlock.PROPERTY_BY_DIRECTION.get(enumdirection));
 
             if (blockpropertyredstoneside == RedstoneSide.SIDE) {
-                voxelshape = Shapes.or(voxelshape, (VoxelShape) RedStoneWireBlock.SHAPES_FLOOR.get(enumdirection));
+                voxelshape = Shapes.or(voxelshape, RedStoneWireBlock.SHAPES_FLOOR.get(enumdirection));
             } else if (blockpropertyredstoneside == RedstoneSide.UP) {
-                voxelshape = Shapes.or(voxelshape, (VoxelShape) RedStoneWireBlock.SHAPES_UP.get(enumdirection));
+                voxelshape = Shapes.or(voxelshape, RedStoneWireBlock.SHAPES_UP.get(enumdirection));
             }
         }
 
@@ -105,7 +105,7 @@ public class RedStoneWireBlock extends Block {
 
     @Override
     public VoxelShape getShape(BlockState state, BlockGetter world, BlockPos pos, CollisionContext context) {
-        return (VoxelShape) RedStoneWireBlock.SHAPES_CACHE.get(state.setValue(RedStoneWireBlock.POWER, Integer.valueOf(0)));
+        return RedStoneWireBlock.SHAPES_CACHE.get(state.setValue(RedStoneWireBlock.POWER, Integer.valueOf(0)));
     }
 
     @Override
@@ -116,31 +116,31 @@ public class RedStoneWireBlock extends Block {
     private BlockState getConnectionState(BlockGetter world, BlockState state, BlockPos pos) {
         boolean flag = RedStoneWireBlock.isDot(state);
 
-        state = this.getMissingConnections(world, (BlockState) this.defaultBlockState().setValue(RedStoneWireBlock.POWER, (Integer) state.getValue(RedStoneWireBlock.POWER)), pos);
+        state = this.getMissingConnections(world, this.defaultBlockState().setValue(RedStoneWireBlock.POWER, state.getValue(RedStoneWireBlock.POWER)), pos);
         if (flag && RedStoneWireBlock.isDot(state)) {
             return state;
         } else {
-            boolean flag1 = ((RedstoneSide) state.getValue(RedStoneWireBlock.NORTH)).isConnected();
-            boolean flag2 = ((RedstoneSide) state.getValue(RedStoneWireBlock.SOUTH)).isConnected();
-            boolean flag3 = ((RedstoneSide) state.getValue(RedStoneWireBlock.EAST)).isConnected();
-            boolean flag4 = ((RedstoneSide) state.getValue(RedStoneWireBlock.WEST)).isConnected();
+            boolean flag1 = state.getValue(RedStoneWireBlock.NORTH).isConnected();
+            boolean flag2 = state.getValue(RedStoneWireBlock.SOUTH).isConnected();
+            boolean flag3 = state.getValue(RedStoneWireBlock.EAST).isConnected();
+            boolean flag4 = state.getValue(RedStoneWireBlock.WEST).isConnected();
             boolean flag5 = !flag1 && !flag2;
             boolean flag6 = !flag3 && !flag4;
 
             if (!flag4 && flag5) {
-                state = (BlockState) state.setValue(RedStoneWireBlock.WEST, RedstoneSide.SIDE);
+                state = state.setValue(RedStoneWireBlock.WEST, RedstoneSide.SIDE);
             }
 
             if (!flag3 && flag5) {
-                state = (BlockState) state.setValue(RedStoneWireBlock.EAST, RedstoneSide.SIDE);
+                state = state.setValue(RedStoneWireBlock.EAST, RedstoneSide.SIDE);
             }
 
             if (!flag1 && flag6) {
-                state = (BlockState) state.setValue(RedStoneWireBlock.NORTH, RedstoneSide.SIDE);
+                state = state.setValue(RedStoneWireBlock.NORTH, RedstoneSide.SIDE);
             }
 
             if (!flag2 && flag6) {
-                state = (BlockState) state.setValue(RedStoneWireBlock.SOUTH, RedstoneSide.SIDE);
+                state = state.setValue(RedStoneWireBlock.SOUTH, RedstoneSide.SIDE);
             }
 
             return state;
@@ -157,7 +157,7 @@ public class RedStoneWireBlock extends Block {
             if (!((RedstoneSide) state.getValue((Property) RedStoneWireBlock.PROPERTY_BY_DIRECTION.get(enumdirection))).isConnected()) {
                 RedstoneSide blockpropertyredstoneside = this.getConnectingSide(world, pos, enumdirection, flag);
 
-                state = (BlockState) state.setValue((Property) RedStoneWireBlock.PROPERTY_BY_DIRECTION.get(enumdirection), blockpropertyredstoneside);
+                state = state.setValue(RedStoneWireBlock.PROPERTY_BY_DIRECTION.get(enumdirection), blockpropertyredstoneside);
             }
         }
 
@@ -173,16 +173,16 @@ public class RedStoneWireBlock extends Block {
         } else {
             RedstoneSide blockpropertyredstoneside = this.getConnectingSide(world, pos, direction);
 
-            return blockpropertyredstoneside.isConnected() == ((RedstoneSide) state.getValue((Property) RedStoneWireBlock.PROPERTY_BY_DIRECTION.get(direction))).isConnected() && !RedStoneWireBlock.isCross(state) ? (BlockState) state.setValue((Property) RedStoneWireBlock.PROPERTY_BY_DIRECTION.get(direction), blockpropertyredstoneside) : this.getConnectionState(world, (BlockState) ((BlockState) this.crossState.setValue(RedStoneWireBlock.POWER, (Integer) state.getValue(RedStoneWireBlock.POWER))).setValue((Property) RedStoneWireBlock.PROPERTY_BY_DIRECTION.get(direction), blockpropertyredstoneside), pos);
+            return blockpropertyredstoneside.isConnected() == ((RedstoneSide) state.getValue((Property) RedStoneWireBlock.PROPERTY_BY_DIRECTION.get(direction))).isConnected() && !RedStoneWireBlock.isCross(state) ? state.setValue(RedStoneWireBlock.PROPERTY_BY_DIRECTION.get(direction), blockpropertyredstoneside) : this.getConnectionState(world, this.crossState.setValue(RedStoneWireBlock.POWER, state.getValue(RedStoneWireBlock.POWER)).setValue(RedStoneWireBlock.PROPERTY_BY_DIRECTION.get(direction), blockpropertyredstoneside), pos);
         }
     }
 
     private static boolean isCross(BlockState state) {
-        return ((RedstoneSide) state.getValue(RedStoneWireBlock.NORTH)).isConnected() && ((RedstoneSide) state.getValue(RedStoneWireBlock.SOUTH)).isConnected() && ((RedstoneSide) state.getValue(RedStoneWireBlock.EAST)).isConnected() && ((RedstoneSide) state.getValue(RedStoneWireBlock.WEST)).isConnected();
+        return state.getValue(RedStoneWireBlock.NORTH).isConnected() && state.getValue(RedStoneWireBlock.SOUTH).isConnected() && state.getValue(RedStoneWireBlock.EAST).isConnected() && state.getValue(RedStoneWireBlock.WEST).isConnected();
     }
 
     private static boolean isDot(BlockState state) {
-        return !((RedstoneSide) state.getValue(RedStoneWireBlock.NORTH)).isConnected() && !((RedstoneSide) state.getValue(RedStoneWireBlock.SOUTH)).isConnected() && !((RedstoneSide) state.getValue(RedStoneWireBlock.EAST)).isConnected() && !((RedstoneSide) state.getValue(RedStoneWireBlock.WEST)).isConnected();
+        return !state.getValue(RedStoneWireBlock.NORTH).isConnected() && !state.getValue(RedStoneWireBlock.SOUTH).isConnected() && !state.getValue(RedStoneWireBlock.EAST).isConnected() && !state.getValue(RedStoneWireBlock.WEST).isConnected();
     }
 
     @Override
@@ -194,11 +194,11 @@ public class RedStoneWireBlock extends Block {
             Direction enumdirection = (Direction) iterator.next();
             RedstoneSide blockpropertyredstoneside = (RedstoneSide) state.getValue((Property) RedStoneWireBlock.PROPERTY_BY_DIRECTION.get(enumdirection));
 
-            if (blockpropertyredstoneside != RedstoneSide.NONE && !world.getBlockState(blockposition_mutableblockposition.setWithOffset(pos, enumdirection)).is((Block) this)) {
+            if (blockpropertyredstoneside != RedstoneSide.NONE && !world.getBlockState(blockposition_mutableblockposition.setWithOffset(pos, enumdirection)).is(this)) {
                 blockposition_mutableblockposition.move(Direction.DOWN);
                 BlockState iblockdata1 = world.getBlockState(blockposition_mutableblockposition);
 
-                if (iblockdata1.is((Block) this)) {
+                if (iblockdata1.is(this)) {
                     BlockPos blockposition1 = blockposition_mutableblockposition.relative(enumdirection.getOpposite());
 
                     world.neighborShapeChanged(enumdirection.getOpposite(), world.getBlockState(blockposition1), blockposition_mutableblockposition, blockposition1, flags, maxUpdateDepth);
@@ -207,7 +207,7 @@ public class RedStoneWireBlock extends Block {
                 blockposition_mutableblockposition.setWithOffset(pos, enumdirection).move(Direction.UP);
                 BlockState iblockdata2 = world.getBlockState(blockposition_mutableblockposition);
 
-                if (iblockdata2.is((Block) this)) {
+                if (iblockdata2.is(this)) {
                     BlockPos blockposition2 = blockposition_mutableblockposition.relative(enumdirection.getOpposite());
 
                     world.neighborShapeChanged(enumdirection.getOpposite(), world.getBlockState(blockposition2), blockposition_mutableblockposition, blockposition2, flags, maxUpdateDepth);
@@ -366,7 +366,7 @@ public class RedStoneWireBlock extends Block {
         int i = this.calculateTargetStrength(world, pos);
 
         // CraftBukkit start
-        int oldPower = ((Integer) state.getValue(RedStoneWireBlock.POWER)).intValue();
+        int oldPower = state.getValue(RedStoneWireBlock.POWER).intValue();
         if (oldPower != i) {
             BlockRedstoneEvent event = new BlockRedstoneEvent(world.getWorld().getBlockAt(pos.getX(), pos.getY(), pos.getZ()), oldPower, i);
             world.getCraftServer().getPluginManager().callEvent(event);
@@ -376,7 +376,7 @@ public class RedStoneWireBlock extends Block {
         if (oldPower != i) {
             // CraftBukkit end
             if (world.getBlockState(pos) == state) {
-                world.setBlock(pos, (BlockState) state.setValue(RedStoneWireBlock.POWER, Integer.valueOf(i)), 2);
+                world.setBlock(pos, state.setValue(RedStoneWireBlock.POWER, Integer.valueOf(i)), 2);
             }
 
             Set<BlockPos> set = Sets.newHashSet();
@@ -433,11 +433,11 @@ public class RedStoneWireBlock extends Block {
 
     private int getPower(int min, BlockState iblockdata) { return Math.max(min, getWireSignal(iblockdata)); } // Paper - Optimize redstone
     private int getWireSignal(BlockState state) {
-        return state.is((Block) this) ? ((Integer) state.getValue(RedStoneWireBlock.POWER)).intValue() : 0;
+        return state.is(this) ? state.getValue(RedStoneWireBlock.POWER).intValue() : 0;
     }
 
     private void checkCornerChangeAt(Level world, BlockPos pos) {
-        if (world.getBlockState(pos).is((Block) this)) {
+        if (world.getBlockState(pos).is(this)) {
             world.updateNeighborsAt(pos, this);
             Direction[] aenumdirection = Direction.values();
             int i = aenumdirection.length;
@@ -551,7 +551,7 @@ public class RedStoneWireBlock extends Block {
     @Override
     public int getSignal(BlockState state, BlockGetter world, BlockPos pos, Direction direction) {
         if (this.shouldSignal && direction != Direction.DOWN) {
-            int i = ((Integer) state.getValue(RedStoneWireBlock.POWER)).intValue();
+            int i = state.getValue(RedStoneWireBlock.POWER).intValue();
 
             return i == 0 ? 0 : (direction != Direction.UP && !((RedstoneSide) this.getConnectionState(world, state, pos).getValue((Property) RedStoneWireBlock.PROPERTY_BY_DIRECTION.get(direction.getOpposite()))).isConnected() ? 0 : i);
         } else {
@@ -560,14 +560,14 @@ public class RedStoneWireBlock extends Block {
     }
 
     protected static boolean shouldConnectTo(BlockState state) {
-        return RedStoneWireBlock.shouldConnectTo(state, (Direction) null);
+        return RedStoneWireBlock.shouldConnectTo(state, null);
     }
 
     protected static boolean shouldConnectTo(BlockState state, @Nullable Direction dir) {
         if (state.is(Blocks.REDSTONE_WIRE)) {
             return true;
         } else if (state.is(Blocks.REPEATER)) {
-            Direction enumdirection1 = (Direction) state.getValue(RepeaterBlock.FACING);
+            Direction enumdirection1 = state.getValue(RepeaterBlock.FACING);
 
             return enumdirection1 == dir || enumdirection1.getOpposite() == dir;
         } else {
@@ -602,7 +602,7 @@ public class RedStoneWireBlock extends Block {
 
     @Override
     public void animateTick(BlockState state, Level world, BlockPos pos, RandomSource random) {
-        int i = ((Integer) state.getValue(RedStoneWireBlock.POWER)).intValue();
+        int i = state.getValue(RedStoneWireBlock.POWER).intValue();
 
         if (i != 0) {
             Iterator iterator = Direction.Plane.HORIZONTAL.iterator();
@@ -630,11 +630,11 @@ public class RedStoneWireBlock extends Block {
     public BlockState rotate(BlockState state, Rotation rotation) {
         switch (rotation) {
             case CLOCKWISE_180:
-                return (BlockState) ((BlockState) ((BlockState) ((BlockState) state.setValue(RedStoneWireBlock.NORTH, (RedstoneSide) state.getValue(RedStoneWireBlock.SOUTH))).setValue(RedStoneWireBlock.EAST, (RedstoneSide) state.getValue(RedStoneWireBlock.WEST))).setValue(RedStoneWireBlock.SOUTH, (RedstoneSide) state.getValue(RedStoneWireBlock.NORTH))).setValue(RedStoneWireBlock.WEST, (RedstoneSide) state.getValue(RedStoneWireBlock.EAST));
+                return state.setValue(RedStoneWireBlock.NORTH, state.getValue(RedStoneWireBlock.SOUTH)).setValue(RedStoneWireBlock.EAST, state.getValue(RedStoneWireBlock.WEST)).setValue(RedStoneWireBlock.SOUTH, state.getValue(RedStoneWireBlock.NORTH)).setValue(RedStoneWireBlock.WEST, state.getValue(RedStoneWireBlock.EAST));
             case COUNTERCLOCKWISE_90:
-                return (BlockState) ((BlockState) ((BlockState) ((BlockState) state.setValue(RedStoneWireBlock.NORTH, (RedstoneSide) state.getValue(RedStoneWireBlock.EAST))).setValue(RedStoneWireBlock.EAST, (RedstoneSide) state.getValue(RedStoneWireBlock.SOUTH))).setValue(RedStoneWireBlock.SOUTH, (RedstoneSide) state.getValue(RedStoneWireBlock.WEST))).setValue(RedStoneWireBlock.WEST, (RedstoneSide) state.getValue(RedStoneWireBlock.NORTH));
+                return state.setValue(RedStoneWireBlock.NORTH, state.getValue(RedStoneWireBlock.EAST)).setValue(RedStoneWireBlock.EAST, state.getValue(RedStoneWireBlock.SOUTH)).setValue(RedStoneWireBlock.SOUTH, state.getValue(RedStoneWireBlock.WEST)).setValue(RedStoneWireBlock.WEST, state.getValue(RedStoneWireBlock.NORTH));
             case CLOCKWISE_90:
-                return (BlockState) ((BlockState) ((BlockState) ((BlockState) state.setValue(RedStoneWireBlock.NORTH, (RedstoneSide) state.getValue(RedStoneWireBlock.WEST))).setValue(RedStoneWireBlock.EAST, (RedstoneSide) state.getValue(RedStoneWireBlock.NORTH))).setValue(RedStoneWireBlock.SOUTH, (RedstoneSide) state.getValue(RedStoneWireBlock.EAST))).setValue(RedStoneWireBlock.WEST, (RedstoneSide) state.getValue(RedStoneWireBlock.SOUTH));
+                return state.setValue(RedStoneWireBlock.NORTH, state.getValue(RedStoneWireBlock.WEST)).setValue(RedStoneWireBlock.EAST, state.getValue(RedStoneWireBlock.NORTH)).setValue(RedStoneWireBlock.SOUTH, state.getValue(RedStoneWireBlock.EAST)).setValue(RedStoneWireBlock.WEST, state.getValue(RedStoneWireBlock.SOUTH));
             default:
                 return state;
         }
@@ -644,9 +644,9 @@ public class RedStoneWireBlock extends Block {
     public BlockState mirror(BlockState state, Mirror mirror) {
         switch (mirror) {
             case LEFT_RIGHT:
-                return (BlockState) ((BlockState) state.setValue(RedStoneWireBlock.NORTH, (RedstoneSide) state.getValue(RedStoneWireBlock.SOUTH))).setValue(RedStoneWireBlock.SOUTH, (RedstoneSide) state.getValue(RedStoneWireBlock.NORTH));
+                return state.setValue(RedStoneWireBlock.NORTH, state.getValue(RedStoneWireBlock.SOUTH)).setValue(RedStoneWireBlock.SOUTH, state.getValue(RedStoneWireBlock.NORTH));
             case FRONT_BACK:
-                return (BlockState) ((BlockState) state.setValue(RedStoneWireBlock.EAST, (RedstoneSide) state.getValue(RedStoneWireBlock.WEST))).setValue(RedStoneWireBlock.WEST, (RedstoneSide) state.getValue(RedStoneWireBlock.EAST));
+                return state.setValue(RedStoneWireBlock.EAST, state.getValue(RedStoneWireBlock.WEST)).setValue(RedStoneWireBlock.WEST, state.getValue(RedStoneWireBlock.EAST));
             default:
                 return super.mirror(state, mirror);
         }
@@ -665,7 +665,7 @@ public class RedStoneWireBlock extends Block {
             if (RedStoneWireBlock.isCross(state) || RedStoneWireBlock.isDot(state)) {
                 BlockState iblockdata1 = RedStoneWireBlock.isCross(state) ? this.defaultBlockState() : this.crossState;
 
-                iblockdata1 = (BlockState) iblockdata1.setValue(RedStoneWireBlock.POWER, (Integer) state.getValue(RedStoneWireBlock.POWER));
+                iblockdata1 = iblockdata1.setValue(RedStoneWireBlock.POWER, state.getValue(RedStoneWireBlock.POWER));
                 iblockdata1 = this.getConnectionState(world, iblockdata1, pos);
                 if (iblockdata1 != state) {
                     world.setBlock(pos, iblockdata1, 3);
diff --git a/src/main/java/net/minecraft/world/level/block/RedstoneLampBlock.java b/src/main/java/net/minecraft/world/level/block/RedstoneLampBlock.java
index a007f38f6a746791a433c7d390346b33020fad26..bda0716928a693683a8028861e77d9d8bb6c4fbc 100644
--- a/src/main/java/net/minecraft/world/level/block/RedstoneLampBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/RedstoneLampBlock.java
@@ -18,30 +18,30 @@ public class RedstoneLampBlock extends Block {
 
     public RedstoneLampBlock(BlockBehaviour.Properties settings) {
         super(settings);
-        this.registerDefaultState((BlockState) this.defaultBlockState().setValue(RedstoneLampBlock.LIT, Boolean.FALSE));
+        this.registerDefaultState(this.defaultBlockState().setValue(RedstoneLampBlock.LIT, Boolean.FALSE));
     }
 
     @Nullable
     @Override
     public BlockState getStateForPlacement(BlockPlaceContext ctx) {
-        return (BlockState) this.defaultBlockState().setValue(RedstoneLampBlock.LIT, Boolean.valueOf(ctx.getLevel().hasNeighborSignal(ctx.getClickedPos())));
+        return this.defaultBlockState().setValue(RedstoneLampBlock.LIT, Boolean.valueOf(ctx.getLevel().hasNeighborSignal(ctx.getClickedPos())));
     }
 
     @Override
     public void neighborChanged(BlockState state, Level world, BlockPos pos, Block sourceBlock, BlockPos sourcePos, boolean notify) {
         if (!world.isClientSide) {
-            boolean flag1 = ((Boolean) state.getValue(RedstoneLampBlock.LIT)).booleanValue();
+            boolean flag1 = state.getValue(RedstoneLampBlock.LIT).booleanValue();
 
             if (flag1 != world.hasNeighborSignal(pos)) {
                 if (flag1) {
-                    world.scheduleTick(pos, (Block) this, 4);
+                    world.scheduleTick(pos, this, 4);
                 } else {
                     // CraftBukkit start
                     if (CraftEventFactory.callRedstoneChange(world, pos, 0, 15).getNewCurrent() != 15) {
                         return;
                     }
                     // CraftBukkit end
-                    world.setBlock(pos, (BlockState) state.cycle(RedstoneLampBlock.LIT), 2);
+                    world.setBlock(pos, state.cycle(RedstoneLampBlock.LIT), 2);
                 }
             }
 
@@ -50,13 +50,13 @@ public class RedstoneLampBlock extends Block {
 
     @Override
     public void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
-        if (((Boolean) state.getValue(RedstoneLampBlock.LIT)).booleanValue() && !world.hasNeighborSignal(pos)) {
+        if (state.getValue(RedstoneLampBlock.LIT).booleanValue() && !world.hasNeighborSignal(pos)) {
             // CraftBukkit start
             if (CraftEventFactory.callRedstoneChange(world, pos, 15, 0).getNewCurrent() != 0) {
                 return;
             }
             // CraftBukkit end
-            world.setBlock(pos, (BlockState) state.cycle(RedstoneLampBlock.LIT), 2);
+            world.setBlock(pos, state.cycle(RedstoneLampBlock.LIT), 2);
         }
 
     }
diff --git a/src/main/java/net/minecraft/world/level/block/RedstoneTorchBlock.java b/src/main/java/net/minecraft/world/level/block/RedstoneTorchBlock.java
index 790ba42638790924cec9faa0e81339f0fba06b61..b9b88c9f718cc2a6cc4185e61f1e3658c8a78ab7 100644
--- a/src/main/java/net/minecraft/world/level/block/RedstoneTorchBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/RedstoneTorchBlock.java
@@ -29,7 +29,7 @@ public class RedstoneTorchBlock extends TorchBlock {
 
     protected RedstoneTorchBlock(BlockBehaviour.Properties settings) {
         super(settings, DustParticleOptions.REDSTONE);
-        this.registerDefaultState((BlockState) ((BlockState) this.stateDefinition.any()).setValue(RedstoneTorchBlock.LIT, Boolean.TRUE));
+        this.registerDefaultState(this.stateDefinition.any().setValue(RedstoneTorchBlock.LIT, Boolean.TRUE));
     }
 
     @Override
@@ -62,7 +62,7 @@ public class RedstoneTorchBlock extends TorchBlock {
 
     @Override
     public int getSignal(BlockState state, BlockGetter world, BlockPos pos, Direction direction) {
-        return ((Boolean) state.getValue(RedstoneTorchBlock.LIT)).booleanValue() && Direction.UP != direction ? 15 : 0;
+        return state.getValue(RedstoneTorchBlock.LIT).booleanValue() && Direction.UP != direction ? 15 : 0;
     }
 
     protected boolean hasNeighborSignal(Level world, BlockPos pos, BlockState state) {
@@ -85,11 +85,11 @@ public class RedstoneTorchBlock extends TorchBlock {
         // CraftBukkit start
         org.bukkit.plugin.PluginManager manager = world.getCraftServer().getPluginManager();
         org.bukkit.block.Block block = world.getWorld().getBlockAt(pos.getX(), pos.getY(), pos.getZ());
-        int oldCurrent = ((Boolean) state.getValue(RedstoneTorchBlock.LIT)).booleanValue() ? 15 : 0;
+        int oldCurrent = state.getValue(RedstoneTorchBlock.LIT).booleanValue() ? 15 : 0;
 
         BlockRedstoneEvent event = new BlockRedstoneEvent(block, oldCurrent, oldCurrent);
         // CraftBukkit end
-        if (((Boolean) state.getValue(RedstoneTorchBlock.LIT)).booleanValue()) {
+        if (state.getValue(RedstoneTorchBlock.LIT).booleanValue()) {
             if (flag) {
                 // CraftBukkit start
                 if (oldCurrent != 0) {
@@ -100,7 +100,7 @@ public class RedstoneTorchBlock extends TorchBlock {
                     }
                 }
                 // CraftBukkit end
-                world.setBlock(pos, (BlockState) state.setValue(RedstoneTorchBlock.LIT, Boolean.FALSE), 3);
+                world.setBlock(pos, state.setValue(RedstoneTorchBlock.LIT, Boolean.FALSE), 3);
                 if (RedstoneTorchBlock.isToggledTooFrequently(world, pos, true)) {
                     world.levelEvent(1502, pos, 0);
                     world.scheduleTick(pos, world.getBlockState(pos).getBlock(), 160);
@@ -116,15 +116,15 @@ public class RedstoneTorchBlock extends TorchBlock {
                 }
             }
             // CraftBukkit end
-            world.setBlock(pos, (BlockState) state.setValue(RedstoneTorchBlock.LIT, Boolean.TRUE), 3);
+            world.setBlock(pos, state.setValue(RedstoneTorchBlock.LIT, Boolean.TRUE), 3);
         }
 
     }
 
     @Override
     public void neighborChanged(BlockState state, Level world, BlockPos pos, Block sourceBlock, BlockPos sourcePos, boolean notify) {
-        if (((Boolean) state.getValue(RedstoneTorchBlock.LIT)).booleanValue() == this.hasNeighborSignal(world, pos, state) && !world.getBlockTicks().willTickThisTick(pos, this)) {
-            world.scheduleTick(pos, (Block) this, 2);
+        if (state.getValue(RedstoneTorchBlock.LIT).booleanValue() == this.hasNeighborSignal(world, pos, state) && !world.getBlockTicks().willTickThisTick(pos, this)) {
+            world.scheduleTick(pos, this, 2);
         }
 
     }
@@ -141,7 +141,7 @@ public class RedstoneTorchBlock extends TorchBlock {
 
     @Override
     public void animateTick(BlockState state, Level world, BlockPos pos, RandomSource random) {
-        if (((Boolean) state.getValue(RedstoneTorchBlock.LIT)).booleanValue()) {
+        if (state.getValue(RedstoneTorchBlock.LIT).booleanValue()) {
             double d0 = (double) pos.getX() + 0.5D + (random.nextDouble() - 0.5D) * 0.2D;
             double d1 = (double) pos.getY() + 0.7D + (random.nextDouble() - 0.5D) * 0.2D;
             double d2 = (double) pos.getZ() + 0.5D + (random.nextDouble() - 0.5D) * 0.2D;
diff --git a/src/main/java/net/minecraft/world/level/block/RespawnAnchorBlock.java b/src/main/java/net/minecraft/world/level/block/RespawnAnchorBlock.java
index 7edf54cba74779b875b004a8a9928a88f786edd6..3731922a2d6d02d318d677edb9f447c228e32cf7 100644
--- a/src/main/java/net/minecraft/world/level/block/RespawnAnchorBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/RespawnAnchorBlock.java
@@ -73,7 +73,7 @@ public class RespawnAnchorBlock extends Block {
                 ServerPlayer serverPlayer = (ServerPlayer)player;
                 if (serverPlayer.getRespawnDimension() != world.dimension() || !pos.equals(serverPlayer.getRespawnPosition())) {
                     if (serverPlayer.setRespawnPosition(world.dimension(), pos, 0.0F, false, true, com.destroystokyo.paper.event.player.PlayerSetSpawnEvent.Cause.RESPAWN_ANCHOR)) { // Paper - PlayerSetSpawnEvent
-                    world.playSound((Player)null, (double)pos.getX() + 0.5D, (double)pos.getY() + 0.5D, (double)pos.getZ() + 0.5D, SoundEvents.RESPAWN_ANCHOR_SET_SPAWN, SoundSource.BLOCKS, 1.0F, 1.0F);
+                    world.playSound(null, (double)pos.getX() + 0.5D, (double)pos.getY() + 0.5D, (double)pos.getZ() + 0.5D, SoundEvents.RESPAWN_ANCHOR_SET_SPAWN, SoundSource.BLOCKS, 1.0F, 1.0F);
                     return InteractionResult.SUCCESS;
                     // Paper start - handle failed set spawn
                     } else {
@@ -126,7 +126,7 @@ public class RespawnAnchorBlock extends Block {
             }
         };
         Vec3 vec3 = explodedPos.getCenter();
-        world.explode((Entity)null, DamageSource.badRespawnPointExplosion(vec3, explodedBlockState), explosionDamageCalculator, vec3, 5.0F, true, Level.ExplosionInteraction.BLOCK); // Paper - exploded block state
+        world.explode(null, DamageSource.badRespawnPointExplosion(vec3, explodedBlockState), explosionDamageCalculator, vec3, 5.0F, true, Level.ExplosionInteraction.BLOCK); // Paper - exploded block state
     }
 
     public static boolean canSetSpawn(Level world) {
@@ -135,14 +135,14 @@ public class RespawnAnchorBlock extends Block {
 
     public static void charge(Level world, BlockPos pos, BlockState state) {
         world.setBlock(pos, state.setValue(CHARGE, Integer.valueOf(state.<Integer>getValue(CHARGE).intValue() + 1)), 3);
-        world.playSound((Player)null, (double)pos.getX() + 0.5D, (double)pos.getY() + 0.5D, (double)pos.getZ() + 0.5D, SoundEvents.RESPAWN_ANCHOR_CHARGE, SoundSource.BLOCKS, 1.0F, 1.0F);
+        world.playSound(null, (double)pos.getX() + 0.5D, (double)pos.getY() + 0.5D, (double)pos.getZ() + 0.5D, SoundEvents.RESPAWN_ANCHOR_CHARGE, SoundSource.BLOCKS, 1.0F, 1.0F);
     }
 
     @Override
     public void animateTick(BlockState state, Level world, BlockPos pos, RandomSource random) {
         if (state.<Integer>getValue(CHARGE).intValue() != 0) {
             if (random.nextInt(100) == 0) {
-                world.playSound((Player)null, (double)pos.getX() + 0.5D, (double)pos.getY() + 0.5D, (double)pos.getZ() + 0.5D, SoundEvents.RESPAWN_ANCHOR_AMBIENT, SoundSource.BLOCKS, 1.0F, 1.0F);
+                world.playSound(null, (double)pos.getX() + 0.5D, (double)pos.getY() + 0.5D, (double)pos.getZ() + 0.5D, SoundEvents.RESPAWN_ANCHOR_AMBIENT, SoundSource.BLOCKS, 1.0F, 1.0F);
             }
 
             double d = (double)pos.getX() + 0.5D + (0.5D - random.nextDouble());
diff --git a/src/main/java/net/minecraft/world/level/block/SaplingBlock.java b/src/main/java/net/minecraft/world/level/block/SaplingBlock.java
index d92e44db224b28492fa5e6af231812d6d2cd3b67..50433f6d9f0492db70295770718fd51ef416b0dc 100644
--- a/src/main/java/net/minecraft/world/level/block/SaplingBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/SaplingBlock.java
@@ -31,7 +31,7 @@ public class SaplingBlock extends BushBlock implements BonemealableBlock {
     protected SaplingBlock(AbstractTreeGrower generator, BlockBehaviour.Properties settings) {
         super(settings);
         this.treeGrower = generator;
-        this.registerDefaultState((net.minecraft.world.level.block.state.BlockState) ((net.minecraft.world.level.block.state.BlockState) this.stateDefinition.any()).setValue(SaplingBlock.STAGE, Integer.valueOf(0)));
+        this.registerDefaultState(this.stateDefinition.any().setValue(SaplingBlock.STAGE, Integer.valueOf(0)));
     }
 
     @Override
@@ -48,8 +48,8 @@ public class SaplingBlock extends BushBlock implements BonemealableBlock {
     }
 
     public void advanceTree(ServerLevel world, BlockPos pos, net.minecraft.world.level.block.state.BlockState state, RandomSource random) {
-        if (((Integer) state.getValue(SaplingBlock.STAGE)).intValue() == 0) {
-            world.setBlock(pos, (net.minecraft.world.level.block.state.BlockState) state.cycle(SaplingBlock.STAGE), 4);
+        if (state.getValue(SaplingBlock.STAGE).intValue() == 0) {
+            world.setBlock(pos, state.cycle(SaplingBlock.STAGE), 4);
         } else {
             // CraftBukkit start
             if (world.captureTreeGeneration) {
diff --git a/src/main/java/net/minecraft/world/level/block/ScaffoldingBlock.java b/src/main/java/net/minecraft/world/level/block/ScaffoldingBlock.java
index b562277251c4ca02abe990e8e7be462966de6d55..6a7370e2153ff83089b89574a8f0ebc2b4eadb15 100644
--- a/src/main/java/net/minecraft/world/level/block/ScaffoldingBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/ScaffoldingBlock.java
@@ -38,7 +38,7 @@ public class ScaffoldingBlock extends Block implements SimpleWaterloggedBlock {
 
     protected ScaffoldingBlock(BlockBehaviour.Properties settings) {
         super(settings);
-        this.registerDefaultState((BlockState) ((BlockState) ((BlockState) ((BlockState) this.stateDefinition.any()).setValue(ScaffoldingBlock.DISTANCE, Integer.valueOf(7))).setValue(ScaffoldingBlock.WATERLOGGED, Boolean.FALSE)).setValue(ScaffoldingBlock.BOTTOM, Boolean.FALSE));
+        this.registerDefaultState(this.stateDefinition.any().setValue(ScaffoldingBlock.DISTANCE, Integer.valueOf(7)).setValue(ScaffoldingBlock.WATERLOGGED, Boolean.FALSE).setValue(ScaffoldingBlock.BOTTOM, Boolean.FALSE));
     }
 
     @Override
@@ -48,7 +48,7 @@ public class ScaffoldingBlock extends Block implements SimpleWaterloggedBlock {
 
     @Override
     public VoxelShape getShape(BlockState state, BlockGetter world, BlockPos pos, CollisionContext context) {
-        return !context.isHoldingItem(state.getBlock().asItem()) ? (((Boolean) state.getValue(ScaffoldingBlock.BOTTOM)).booleanValue() ? ScaffoldingBlock.UNSTABLE_SHAPE : ScaffoldingBlock.STABLE_SHAPE) : Shapes.block();
+        return !context.isHoldingItem(state.getBlock().asItem()) ? (state.getValue(ScaffoldingBlock.BOTTOM).booleanValue() ? ScaffoldingBlock.UNSTABLE_SHAPE : ScaffoldingBlock.STABLE_SHAPE) : Shapes.block();
     }
 
     @Override
@@ -67,25 +67,25 @@ public class ScaffoldingBlock extends Block implements SimpleWaterloggedBlock {
         Level world = ctx.getLevel();
         int i = ScaffoldingBlock.getDistance(world, blockposition);
 
-        return (BlockState) ((BlockState) ((BlockState) this.defaultBlockState().setValue(ScaffoldingBlock.WATERLOGGED, Boolean.valueOf(world.getFluidState(blockposition).getType() == Fluids.WATER))).setValue(ScaffoldingBlock.DISTANCE, Integer.valueOf(i))).setValue(ScaffoldingBlock.BOTTOM, Boolean.valueOf(this.isBottom(world, blockposition, i)));
+        return this.defaultBlockState().setValue(ScaffoldingBlock.WATERLOGGED, Boolean.valueOf(world.getFluidState(blockposition).getType() == Fluids.WATER)).setValue(ScaffoldingBlock.DISTANCE, Integer.valueOf(i)).setValue(ScaffoldingBlock.BOTTOM, Boolean.valueOf(this.isBottom(world, blockposition, i)));
     }
 
     @Override
     public void onPlace(BlockState state, Level world, BlockPos pos, BlockState oldState, boolean notify) {
         if (!world.isClientSide) {
-            world.scheduleTick(pos, (Block) this, 1);
+            world.scheduleTick(pos, this, 1);
         }
 
     }
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
-        if (((Boolean) state.getValue(ScaffoldingBlock.WATERLOGGED)).booleanValue()) {
-            world.scheduleTick(pos, (Fluid) Fluids.WATER, Fluids.WATER.getTickDelay(world));
+        if (state.getValue(ScaffoldingBlock.WATERLOGGED).booleanValue()) {
+            world.scheduleTick(pos, Fluids.WATER, Fluids.WATER.getTickDelay(world));
         }
 
         if (!world.isClientSide()) {
-            world.scheduleTick(pos, (Block) this, 1);
+            world.scheduleTick(pos, this, 1);
         }
 
         return state;
@@ -94,10 +94,10 @@ public class ScaffoldingBlock extends Block implements SimpleWaterloggedBlock {
     @Override
     public void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
         int i = ScaffoldingBlock.getDistance(world, pos);
-        BlockState iblockdata1 = (BlockState) ((BlockState) state.setValue(ScaffoldingBlock.DISTANCE, Integer.valueOf(i))).setValue(ScaffoldingBlock.BOTTOM, Boolean.valueOf(this.isBottom(world, pos, i)));
+        BlockState iblockdata1 = state.setValue(ScaffoldingBlock.DISTANCE, Integer.valueOf(i)).setValue(ScaffoldingBlock.BOTTOM, Boolean.valueOf(this.isBottom(world, pos, i)));
 
-        if (((Integer) iblockdata1.getValue(ScaffoldingBlock.DISTANCE)).intValue() == 7 && !org.bukkit.craftbukkit.event.CraftEventFactory.callBlockFadeEvent(world, pos, Blocks.AIR.defaultBlockState()).isCancelled()) { // CraftBukkit - BlockFadeEvent
-            if (((Integer) state.getValue(ScaffoldingBlock.DISTANCE)).intValue() == 7) {
+        if (iblockdata1.getValue(ScaffoldingBlock.DISTANCE).intValue() == 7 && !org.bukkit.craftbukkit.event.CraftEventFactory.callBlockFadeEvent(world, pos, Blocks.AIR.defaultBlockState()).isCancelled()) { // CraftBukkit - BlockFadeEvent
+            if (state.getValue(ScaffoldingBlock.DISTANCE).intValue() == 7) {
                 FallingBlockEntity.fall(world, pos, iblockdata1);
             } else {
                 world.destroyBlock(pos, true);
@@ -115,16 +115,16 @@ public class ScaffoldingBlock extends Block implements SimpleWaterloggedBlock {
 
     @Override
     public VoxelShape getCollisionShape(BlockState state, BlockGetter world, BlockPos pos, CollisionContext context) {
-        return context.isAbove(Shapes.block(), pos, true) && !context.isDescending() ? ScaffoldingBlock.STABLE_SHAPE : (((Integer) state.getValue(ScaffoldingBlock.DISTANCE)).intValue() != 0 && ((Boolean) state.getValue(ScaffoldingBlock.BOTTOM)).booleanValue() && context.isAbove(ScaffoldingBlock.BELOW_BLOCK, pos, true) ? ScaffoldingBlock.UNSTABLE_SHAPE_BOTTOM : Shapes.empty());
+        return context.isAbove(Shapes.block(), pos, true) && !context.isDescending() ? ScaffoldingBlock.STABLE_SHAPE : (state.getValue(ScaffoldingBlock.DISTANCE).intValue() != 0 && state.getValue(ScaffoldingBlock.BOTTOM).booleanValue() && context.isAbove(ScaffoldingBlock.BELOW_BLOCK, pos, true) ? ScaffoldingBlock.UNSTABLE_SHAPE_BOTTOM : Shapes.empty());
     }
 
     @Override
     public FluidState getFluidState(BlockState state) {
-        return ((Boolean) state.getValue(ScaffoldingBlock.WATERLOGGED)).booleanValue() ? Fluids.WATER.getSource(false) : super.getFluidState(state);
+        return state.getValue(ScaffoldingBlock.WATERLOGGED).booleanValue() ? Fluids.WATER.getSource(false) : super.getFluidState(state);
     }
 
     private boolean isBottom(BlockGetter world, BlockPos pos, int distance) {
-        return distance > 0 && !world.getBlockState(pos.below()).is((Block) this);
+        return distance > 0 && !world.getBlockState(pos.below()).is(this);
     }
 
     public static int getDistance(BlockGetter world, BlockPos pos) {
@@ -133,7 +133,7 @@ public class ScaffoldingBlock extends Block implements SimpleWaterloggedBlock {
         int i = 7;
 
         if (iblockdata.is(Blocks.SCAFFOLDING)) {
-            i = ((Integer) iblockdata.getValue(ScaffoldingBlock.DISTANCE)).intValue();
+            i = iblockdata.getValue(ScaffoldingBlock.DISTANCE).intValue();
         } else if (iblockdata.isFaceSturdy(world, blockposition_mutableblockposition, Direction.UP)) {
             return 0;
         }
@@ -145,7 +145,7 @@ public class ScaffoldingBlock extends Block implements SimpleWaterloggedBlock {
             BlockState iblockdata1 = world.getBlockState(blockposition_mutableblockposition.setWithOffset(pos, enumdirection));
 
             if (iblockdata1.is(Blocks.SCAFFOLDING)) {
-                i = Math.min(i, ((Integer) iblockdata1.getValue(ScaffoldingBlock.DISTANCE)).intValue() + 1);
+                i = Math.min(i, iblockdata1.getValue(ScaffoldingBlock.DISTANCE).intValue() + 1);
                 if (i == 1) {
                     break;
                 }
diff --git a/src/main/java/net/minecraft/world/level/block/SculkBlock.java b/src/main/java/net/minecraft/world/level/block/SculkBlock.java
index 3a29984a0fed6b57456de25d4d98cb7ddb526780..517cb2cfd20a97549748c21bcb6f83acc02b3279 100644
--- a/src/main/java/net/minecraft/world/level/block/SculkBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/SculkBlock.java
@@ -26,7 +26,7 @@ public class SculkBlock extends DropExperienceBlock implements SculkBehaviour {
 
         if (i != 0 && random.nextInt(spreadManager.chargeDecayRate()) == 0) {
             BlockPos blockposition1 = cursor.getPos();
-            boolean flag1 = blockposition1.closerThan(catalystPos, (double) spreadManager.noGrowthRadius());
+            boolean flag1 = blockposition1.closerThan(catalystPos, spreadManager.noGrowthRadius());
 
             if (!flag1 && SculkBlock.canPlaceGrowth(world, blockposition1)) {
                 int j = spreadManager.growthSpawnCost();
@@ -37,7 +37,7 @@ public class SculkBlock extends DropExperienceBlock implements SculkBehaviour {
 
                     // CraftBukkit start - Call BlockSpreadEvent
                     if (org.bukkit.craftbukkit.event.CraftEventFactory.handleBlockSpreadEvent(world, catalystPos, blockposition2, iblockdata, 3)) {
-                        world.playSound((Player) null, blockposition1, iblockdata.getSoundType().getPlaceSound(), SoundSource.BLOCKS, 1.0F, 1.0F);
+                        world.playSound(null, blockposition1, iblockdata.getSoundType().getPlaceSound(), SoundSource.BLOCKS, 1.0F, 1.0F);
                     }
                     // CraftBukkit end
                 }
@@ -64,18 +64,18 @@ public class SculkBlock extends DropExperienceBlock implements SculkBehaviour {
         BlockState iblockdata;
 
         if (random.nextInt(11) == 0) {
-            iblockdata = (BlockState) Blocks.SCULK_SHRIEKER.defaultBlockState().setValue(SculkShriekerBlock.CAN_SUMMON, Boolean.valueOf(allowShrieker));
+            iblockdata = Blocks.SCULK_SHRIEKER.defaultBlockState().setValue(SculkShriekerBlock.CAN_SUMMON, Boolean.valueOf(allowShrieker));
         } else {
             iblockdata = Blocks.SCULK_SENSOR.defaultBlockState();
         }
 
-        return iblockdata.hasProperty(BlockStateProperties.WATERLOGGED) && !world.getFluidState(pos).isEmpty() ? (BlockState) iblockdata.setValue(BlockStateProperties.WATERLOGGED, Boolean.TRUE) : iblockdata;
+        return iblockdata.hasProperty(BlockStateProperties.WATERLOGGED) && !world.getFluidState(pos).isEmpty() ? iblockdata.setValue(BlockStateProperties.WATERLOGGED, Boolean.TRUE) : iblockdata;
     }
 
     private static boolean canPlaceGrowth(LevelAccessor world, BlockPos pos) {
         BlockState iblockdata = world.getBlockState(pos.above());
 
-        if (!iblockdata.isAir() && (!iblockdata.is(Blocks.WATER) || !iblockdata.getFluidState().is((Fluid) Fluids.WATER))) {
+        if (!iblockdata.isAir() && (!iblockdata.is(Blocks.WATER) || !iblockdata.getFluidState().is(Fluids.WATER))) {
             return false;
         } else {
             int i = 0;
diff --git a/src/main/java/net/minecraft/world/level/block/SculkCatalystBlock.java b/src/main/java/net/minecraft/world/level/block/SculkCatalystBlock.java
index 613dbbbf57cca2e748507ea651bfcf192bcb75b1..8e487304f87b3695656699d4f325acf46651a68d 100644
--- a/src/main/java/net/minecraft/world/level/block/SculkCatalystBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/SculkCatalystBlock.java
@@ -31,7 +31,7 @@ public class SculkCatalystBlock extends BaseEntityBlock {
 
     public SculkCatalystBlock(BlockBehaviour.Properties settings) {
         super(settings);
-        this.registerDefaultState((BlockState) ((BlockState) this.stateDefinition.any()).setValue(SculkCatalystBlock.PULSE, Boolean.FALSE));
+        this.registerDefaultState(this.stateDefinition.any().setValue(SculkCatalystBlock.PULSE, Boolean.FALSE));
     }
 
     @Override
@@ -41,17 +41,17 @@ public class SculkCatalystBlock extends BaseEntityBlock {
 
     @Override
     public void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
-        if (((Boolean) state.getValue(SculkCatalystBlock.PULSE)).booleanValue()) {
-            world.setBlock(pos, (BlockState) state.setValue(SculkCatalystBlock.PULSE, Boolean.FALSE), 3);
+        if (state.getValue(SculkCatalystBlock.PULSE).booleanValue()) {
+            world.setBlock(pos, state.setValue(SculkCatalystBlock.PULSE, Boolean.FALSE), 3);
         }
 
     }
 
     public static void bloom(ServerLevel world, BlockPos pos, BlockState state, RandomSource random) {
-        world.setBlock(pos, (BlockState) state.setValue(SculkCatalystBlock.PULSE, Boolean.TRUE), 3);
+        world.setBlock(pos, state.setValue(SculkCatalystBlock.PULSE, Boolean.TRUE), 3);
         world.scheduleTick(pos, state.getBlock(), 8);
         world.sendParticles(ParticleTypes.SCULK_SOUL, (double) pos.getX() + 0.5D, (double) pos.getY() + 1.15D, (double) pos.getZ() + 0.5D, 2, 0.2D, 0.0D, 0.2D, 0.0D);
-        world.playSound((Player) null, pos, SoundEvents.SCULK_CATALYST_BLOOM, SoundSource.BLOCKS, 2.0F, 0.6F + random.nextFloat() * 0.4F);
+        world.playSound(null, pos, SoundEvents.SCULK_CATALYST_BLOOM, SoundSource.BLOCKS, 2.0F, 0.6F + random.nextFloat() * 0.4F);
     }
 
     @Nullable
diff --git a/src/main/java/net/minecraft/world/level/block/SculkSensorBlock.java b/src/main/java/net/minecraft/world/level/block/SculkSensorBlock.java
index 66d318607ed4477a1f34ed7cb5b8d89d80666605..2a933308be65a81c77c7aa311555ced9c158c87f 100644
--- a/src/main/java/net/minecraft/world/level/block/SculkSensorBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/SculkSensorBlock.java
@@ -54,7 +54,7 @@ public class SculkSensorBlock extends BaseEntityBlock implements SimpleWaterlogg
 
     public SculkSensorBlock(BlockBehaviour.Properties settings, int range) {
         super(settings);
-        this.registerDefaultState((BlockState) ((BlockState) ((BlockState) ((BlockState) this.stateDefinition.any()).setValue(SculkSensorBlock.PHASE, SculkSensorPhase.INACTIVE)).setValue(SculkSensorBlock.POWER, Integer.valueOf(0))).setValue(SculkSensorBlock.WATERLOGGED, Boolean.FALSE));
+        this.registerDefaultState(this.stateDefinition.any().setValue(SculkSensorBlock.PHASE, SculkSensorPhase.INACTIVE).setValue(SculkSensorBlock.POWER, Integer.valueOf(0)).setValue(SculkSensorBlock.WATERLOGGED, Boolean.FALSE));
         this.listenerRange = range;
     }
 
@@ -68,19 +68,19 @@ public class SculkSensorBlock extends BaseEntityBlock implements SimpleWaterlogg
         BlockPos blockposition = ctx.getClickedPos();
         FluidState fluid = ctx.getLevel().getFluidState(blockposition);
 
-        return (BlockState) this.defaultBlockState().setValue(SculkSensorBlock.WATERLOGGED, Boolean.valueOf(fluid.getType() == Fluids.WATER));
+        return this.defaultBlockState().setValue(SculkSensorBlock.WATERLOGGED, Boolean.valueOf(fluid.getType() == Fluids.WATER));
     }
 
     @Override
     public FluidState getFluidState(BlockState state) {
-        return ((Boolean) state.getValue(SculkSensorBlock.WATERLOGGED)).booleanValue() ? Fluids.WATER.getSource(false) : super.getFluidState(state);
+        return state.getValue(SculkSensorBlock.WATERLOGGED).booleanValue() ? Fluids.WATER.getSource(false) : super.getFluidState(state);
     }
 
     @Override
     public void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
         if (SculkSensorBlock.getPhase(state) != SculkSensorPhase.ACTIVE) {
             if (SculkSensorBlock.getPhase(state) == SculkSensorPhase.COOLDOWN) {
-                world.setBlock(pos, (BlockState) state.setValue(SculkSensorBlock.PHASE, SculkSensorPhase.INACTIVE), 3);
+                world.setBlock(pos, state.setValue(SculkSensorBlock.PHASE, SculkSensorPhase.INACTIVE), 3);
             }
 
         } else {
@@ -122,8 +122,8 @@ public class SculkSensorBlock extends BaseEntityBlock implements SimpleWaterlogg
     @Override
     public void onPlace(BlockState state, Level world, BlockPos pos, BlockState oldState, boolean notify) {
         if (!world.isClientSide() && !state.is(oldState.getBlock())) {
-            if (((Integer) state.getValue(SculkSensorBlock.POWER)).intValue() > 0 && !world.getBlockTicks().hasScheduledTick(pos, this)) {
-                world.setBlock(pos, (BlockState) state.setValue(SculkSensorBlock.POWER, Integer.valueOf(0)), 18);
+            if (state.getValue(SculkSensorBlock.POWER).intValue() > 0 && !world.getBlockTicks().hasScheduledTick(pos, this)) {
+                world.setBlock(pos, state.setValue(SculkSensorBlock.POWER, Integer.valueOf(0)), 18);
             }
 
             world.scheduleTick(new BlockPos(pos), state.getBlock(), 1);
@@ -143,8 +143,8 @@ public class SculkSensorBlock extends BaseEntityBlock implements SimpleWaterlogg
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
-        if (((Boolean) state.getValue(SculkSensorBlock.WATERLOGGED)).booleanValue()) {
-            world.scheduleTick(pos, (Fluid) Fluids.WATER, Fluids.WATER.getTickDelay(world));
+        if (state.getValue(SculkSensorBlock.WATERLOGGED).booleanValue()) {
+            world.scheduleTick(pos, Fluids.WATER, Fluids.WATER.getTickDelay(world));
         }
 
         return super.updateShape(state, direction, neighborState, world, pos, neighborPos);
@@ -192,11 +192,11 @@ public class SculkSensorBlock extends BaseEntityBlock implements SimpleWaterlogg
 
     @Override
     public int getSignal(BlockState state, BlockGetter world, BlockPos pos, Direction direction) {
-        return ((Integer) state.getValue(SculkSensorBlock.POWER)).intValue();
+        return state.getValue(SculkSensorBlock.POWER).intValue();
     }
 
     public static SculkSensorPhase getPhase(BlockState state) {
-        return (SculkSensorPhase) state.getValue(SculkSensorBlock.PHASE);
+        return state.getValue(SculkSensorBlock.PHASE);
     }
 
     public static boolean canActivate(BlockState state) {
@@ -213,10 +213,10 @@ public class SculkSensorBlock extends BaseEntityBlock implements SimpleWaterlogg
             return;
         }
         // CraftBukkit end
-        world.setBlock(pos, (BlockState) ((BlockState) state.setValue(SculkSensorBlock.PHASE, SculkSensorPhase.COOLDOWN)).setValue(SculkSensorBlock.POWER, Integer.valueOf(0)), 3);
+        world.setBlock(pos, state.setValue(SculkSensorBlock.PHASE, SculkSensorPhase.COOLDOWN).setValue(SculkSensorBlock.POWER, Integer.valueOf(0)), 3);
         world.scheduleTick(pos, state.getBlock(), 1);
-        if (!((Boolean) state.getValue(SculkSensorBlock.WATERLOGGED)).booleanValue()) {
-            world.playSound((Player) null, pos, SoundEvents.SCULK_CLICKING_STOP, SoundSource.BLOCKS, 1.0F, world.random.nextFloat() * 0.2F + 0.8F);
+        if (!state.getValue(SculkSensorBlock.WATERLOGGED).booleanValue()) {
+            world.playSound(null, pos, SoundEvents.SCULK_CLICKING_STOP, SoundSource.BLOCKS, 1.0F, world.random.nextFloat() * 0.2F + 0.8F);
         }
 
         SculkSensorBlock.updateNeighbours(world, pos);
@@ -232,12 +232,12 @@ public class SculkSensorBlock extends BaseEntityBlock implements SimpleWaterlogg
         }
         power = eventRedstone.getNewCurrent();
         // CraftBukkit end
-        world.setBlock(pos, (BlockState) ((BlockState) state.setValue(SculkSensorBlock.PHASE, SculkSensorPhase.ACTIVE)).setValue(SculkSensorBlock.POWER, Integer.valueOf(power)), 3);
+        world.setBlock(pos, state.setValue(SculkSensorBlock.PHASE, SculkSensorPhase.ACTIVE).setValue(SculkSensorBlock.POWER, Integer.valueOf(power)), 3);
         world.scheduleTick(pos, state.getBlock(), 40);
         SculkSensorBlock.updateNeighbours(world, pos);
         world.gameEvent(entity, GameEvent.SCULK_SENSOR_TENDRILS_CLICKING, pos);
-        if (!((Boolean) state.getValue(SculkSensorBlock.WATERLOGGED)).booleanValue()) {
-            world.playSound((Player) null, (double) pos.getX() + 0.5D, (double) pos.getY() + 0.5D, (double) pos.getZ() + 0.5D, SoundEvents.SCULK_CLICKING, SoundSource.BLOCKS, 1.0F, world.random.nextFloat() * 0.2F + 0.8F);
+        if (!state.getValue(SculkSensorBlock.WATERLOGGED).booleanValue()) {
+            world.playSound(null, (double) pos.getX() + 0.5D, (double) pos.getY() + 0.5D, (double) pos.getZ() + 0.5D, SoundEvents.SCULK_CLICKING, SoundSource.BLOCKS, 1.0F, world.random.nextFloat() * 0.2F + 0.8F);
         }
 
     }
diff --git a/src/main/java/net/minecraft/world/level/block/SculkShriekerBlock.java b/src/main/java/net/minecraft/world/level/block/SculkShriekerBlock.java
index c4d1f9266372488a07269957d000e9b6151304b9..cedb8243ec6b61cba0b13622e0b482bcc5db5ee8 100644
--- a/src/main/java/net/minecraft/world/level/block/SculkShriekerBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/SculkShriekerBlock.java
@@ -39,7 +39,7 @@ public class SculkShriekerBlock extends BaseEntityBlock implements SimpleWaterlo
 
     public SculkShriekerBlock(BlockBehaviour.Properties settings) {
         super(settings);
-        this.registerDefaultState((BlockState) ((BlockState) ((BlockState) ((BlockState) this.stateDefinition.any()).setValue(SculkShriekerBlock.SHRIEKING, Boolean.FALSE)).setValue(SculkShriekerBlock.WATERLOGGED, Boolean.FALSE)).setValue(SculkShriekerBlock.CAN_SUMMON, Boolean.FALSE));
+        this.registerDefaultState(this.stateDefinition.any().setValue(SculkShriekerBlock.SHRIEKING, Boolean.FALSE).setValue(SculkShriekerBlock.WATERLOGGED, Boolean.FALSE).setValue(SculkShriekerBlock.CAN_SUMMON, Boolean.FALSE));
     }
 
     @Override
@@ -71,7 +71,7 @@ public class SculkShriekerBlock extends BaseEntityBlock implements SimpleWaterlo
         if (world instanceof ServerLevel) {
             ServerLevel worldserver = (ServerLevel) world;
 
-            if (((Boolean) state.getValue(SculkShriekerBlock.SHRIEKING)).booleanValue() && !state.is(newState.getBlock())) {
+            if (state.getValue(SculkShriekerBlock.SHRIEKING).booleanValue() && !state.is(newState.getBlock())) {
                 worldserver.getBlockEntity(pos, BlockEntityType.SCULK_SHRIEKER).ifPresent((sculkshriekerblockentity) -> {
                     sculkshriekerblockentity.tryRespond(worldserver);
                 });
@@ -83,8 +83,8 @@ public class SculkShriekerBlock extends BaseEntityBlock implements SimpleWaterlo
 
     @Override
     public void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
-        if (((Boolean) state.getValue(SculkShriekerBlock.SHRIEKING)).booleanValue()) {
-            world.setBlock(pos, (BlockState) state.setValue(SculkShriekerBlock.SHRIEKING, Boolean.FALSE), 3);
+        if (state.getValue(SculkShriekerBlock.SHRIEKING).booleanValue()) {
+            world.setBlock(pos, state.setValue(SculkShriekerBlock.SHRIEKING, Boolean.FALSE), 3);
             world.getBlockEntity(pos, BlockEntityType.SCULK_SHRIEKER).ifPresent((sculkshriekerblockentity) -> {
                 sculkshriekerblockentity.tryRespond(world);
             });
@@ -120,8 +120,8 @@ public class SculkShriekerBlock extends BaseEntityBlock implements SimpleWaterlo
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
-        if (((Boolean) state.getValue(SculkShriekerBlock.WATERLOGGED)).booleanValue()) {
-            world.scheduleTick(pos, (Fluid) Fluids.WATER, Fluids.WATER.getTickDelay(world));
+        if (state.getValue(SculkShriekerBlock.WATERLOGGED).booleanValue()) {
+            world.scheduleTick(pos, Fluids.WATER, Fluids.WATER.getTickDelay(world));
         }
 
         return super.updateShape(state, direction, neighborState, world, pos, neighborPos);
@@ -130,12 +130,12 @@ public class SculkShriekerBlock extends BaseEntityBlock implements SimpleWaterlo
     @Nullable
     @Override
     public BlockState getStateForPlacement(BlockPlaceContext ctx) {
-        return (BlockState) this.defaultBlockState().setValue(SculkShriekerBlock.WATERLOGGED, Boolean.valueOf(ctx.getLevel().getFluidState(ctx.getClickedPos()).getType() == Fluids.WATER));
+        return this.defaultBlockState().setValue(SculkShriekerBlock.WATERLOGGED, Boolean.valueOf(ctx.getLevel().getFluidState(ctx.getClickedPos()).getType() == Fluids.WATER));
     }
 
     @Override
     public FluidState getFluidState(BlockState state) {
-        return ((Boolean) state.getValue(SculkShriekerBlock.WATERLOGGED)).booleanValue() ? Fluids.WATER.getSource(false) : super.getFluidState(state);
+        return state.getValue(SculkShriekerBlock.WATERLOGGED).booleanValue() ? Fluids.WATER.getSource(false) : super.getFluidState(state);
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/SculkVeinBlock.java b/src/main/java/net/minecraft/world/level/block/SculkVeinBlock.java
index d4246eca514b00bb4c5f35a478936ed9a443362b..03b65954de0d31aec6338ed96256d85c684e3b3a 100644
--- a/src/main/java/net/minecraft/world/level/block/SculkVeinBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/SculkVeinBlock.java
@@ -36,7 +36,7 @@ public class SculkVeinBlock extends MultifaceBlock implements SculkBehaviour, Si
         super(settings);
         this.veinSpreader = new MultifaceSpreader(new SculkVeinBlock.SculkVeinSpreaderConfig(MultifaceSpreader.DEFAULT_SPREAD_ORDER));
         this.sameSpaceSpreader = new MultifaceSpreader(new SculkVeinBlock.SculkVeinSpreaderConfig(MultifaceSpreader.SpreadType.SAME_POSITION));
-        this.registerDefaultState((BlockState) this.defaultBlockState().setValue(SculkVeinBlock.WATERLOGGED, Boolean.FALSE));
+        this.registerDefaultState(this.defaultBlockState().setValue(SculkVeinBlock.WATERLOGGED, Boolean.FALSE));
     }
 
     @Override
@@ -58,7 +58,7 @@ public class SculkVeinBlock extends MultifaceBlock implements SculkBehaviour, Si
             BlockPos blockposition1 = pos.relative(enumdirection);
 
             if (canAttachTo(world, enumdirection, blockposition1, world.getBlockState(blockposition1))) {
-                iblockdata1 = (BlockState) iblockdata1.setValue(getFaceProperty(enumdirection), Boolean.TRUE);
+                iblockdata1 = iblockdata1.setValue(getFaceProperty(enumdirection), Boolean.TRUE);
                 flag = true;
             }
         }
@@ -67,7 +67,7 @@ public class SculkVeinBlock extends MultifaceBlock implements SculkBehaviour, Si
             return false;
         } else {
             if (!state.getFluidState().isEmpty()) {
-                iblockdata1 = (BlockState) iblockdata1.setValue(SculkVeinBlock.WATERLOGGED, Boolean.TRUE);
+                iblockdata1 = iblockdata1.setValue(SculkVeinBlock.WATERLOGGED, Boolean.TRUE);
             }
 
             world.setBlock(pos, iblockdata1, 3);
@@ -77,7 +77,7 @@ public class SculkVeinBlock extends MultifaceBlock implements SculkBehaviour, Si
 
     @Override
     public void onDischarged(LevelAccessor world, BlockState state, BlockPos pos, RandomSource random) {
-        if (state.is((Block) this)) {
+        if (state.is(this)) {
             Direction[] aenumdirection = SculkVeinBlock.DIRECTIONS;
             int i = aenumdirection.length;
 
@@ -85,8 +85,8 @@ public class SculkVeinBlock extends MultifaceBlock implements SculkBehaviour, Si
                 Direction enumdirection = aenumdirection[j];
                 BooleanProperty blockstateboolean = getFaceProperty(enumdirection);
 
-                if (((Boolean) state.getValue(blockstateboolean)).booleanValue() && world.getBlockState(pos.relative(enumdirection)).is(Blocks.SCULK)) {
-                    state = (BlockState) state.setValue(blockstateboolean, Boolean.FALSE);
+                if (state.getValue(blockstateboolean).booleanValue() && world.getBlockState(pos.relative(enumdirection)).is(Blocks.SCULK)) {
+                    state = state.setValue(blockstateboolean, Boolean.FALSE);
                 }
             }
 
@@ -128,7 +128,7 @@ public class SculkVeinBlock extends MultifaceBlock implements SculkBehaviour, Si
                     }
                     // CraftBukkit end
                     Block.pushEntitiesUp(iblockdata1, iblockdata2, generatoraccess, blockposition1);
-                    generatoraccess.playSound((Player) null, blockposition1, SoundEvents.SCULK_BLOCK_SPREAD, SoundSource.BLOCKS, 1.0F, 1.0F);
+                    generatoraccess.playSound(null, blockposition1, SoundEvents.SCULK_BLOCK_SPREAD, SoundSource.BLOCKS, 1.0F, 1.0F);
                     this.veinSpreader.spreadAll(iblockdata2, generatoraccess, blockposition1, sculkspreader.isWorldGeneration());
                     Direction enumdirection1 = enumdirection.getOpposite();
                     Direction[] aenumdirection = SculkVeinBlock.DIRECTIONS;
@@ -141,7 +141,7 @@ public class SculkVeinBlock extends MultifaceBlock implements SculkBehaviour, Si
                             BlockPos blockposition2 = blockposition1.relative(enumdirection2);
                             BlockState iblockdata3 = generatoraccess.getBlockState(blockposition2);
 
-                            if (iblockdata3.is((Block) this)) {
+                            if (iblockdata3.is(this)) {
                                 this.onDischarged(generatoraccess, iblockdata3, blockposition2, randomsource);
                             }
                         }
@@ -176,8 +176,8 @@ public class SculkVeinBlock extends MultifaceBlock implements SculkBehaviour, Si
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
-        if (((Boolean) state.getValue(SculkVeinBlock.WATERLOGGED)).booleanValue()) {
-            world.scheduleTick(pos, (Fluid) Fluids.WATER, Fluids.WATER.getTickDelay(world));
+        if (state.getValue(SculkVeinBlock.WATERLOGGED).booleanValue()) {
+            world.scheduleTick(pos, Fluids.WATER, Fluids.WATER.getTickDelay(world));
         }
 
         return super.updateShape(state, direction, neighborState, world, pos, neighborPos);
@@ -196,7 +196,7 @@ public class SculkVeinBlock extends MultifaceBlock implements SculkBehaviour, Si
 
     @Override
     public FluidState getFluidState(BlockState state) {
-        return ((Boolean) state.getValue(SculkVeinBlock.WATERLOGGED)).booleanValue() ? Fluids.WATER.getSource(false) : super.getFluidState(state);
+        return state.getValue(SculkVeinBlock.WATERLOGGED).booleanValue() ? Fluids.WATER.getSource(false) : super.getFluidState(state);
     }
 
     @Override
@@ -228,7 +228,7 @@ public class SculkVeinBlock extends MultifaceBlock implements SculkBehaviour, Si
 
                 FluidState fluid = state.getFluidState();
 
-                if (!fluid.isEmpty() && !fluid.is((Fluid) Fluids.WATER)) {
+                if (!fluid.isEmpty() && !fluid.is(Fluids.WATER)) {
                     return false;
                 } else {
                     Material material = state.getMaterial();
diff --git a/src/main/java/net/minecraft/world/level/block/SnowLayerBlock.java b/src/main/java/net/minecraft/world/level/block/SnowLayerBlock.java
index 1c228b44019da74aa7e9bdf7fcd825844eb1cb7d..4c8c6ec3e8a3c16c62d7c0b38a39f96007803328 100644
--- a/src/main/java/net/minecraft/world/level/block/SnowLayerBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/SnowLayerBlock.java
@@ -30,14 +30,14 @@ public class SnowLayerBlock extends Block {
 
     protected SnowLayerBlock(BlockBehaviour.Properties settings) {
         super(settings);
-        this.registerDefaultState((BlockState) ((BlockState) this.stateDefinition.any()).setValue(SnowLayerBlock.LAYERS, Integer.valueOf(1)));
+        this.registerDefaultState(this.stateDefinition.any().setValue(SnowLayerBlock.LAYERS, Integer.valueOf(1)));
     }
 
     @Override
     public boolean isPathfindable(BlockState state, BlockGetter world, BlockPos pos, PathComputationType type) {
         switch (type) {
             case LAND:
-                return ((Integer) state.getValue(SnowLayerBlock.LAYERS)).intValue() < 5;
+                return state.getValue(SnowLayerBlock.LAYERS).intValue() < 5;
             case WATER:
                 return false;
             case AIR:
@@ -49,22 +49,22 @@ public class SnowLayerBlock extends Block {
 
     @Override
     public VoxelShape getShape(BlockState state, BlockGetter world, BlockPos pos, CollisionContext context) {
-        return SnowLayerBlock.SHAPE_BY_LAYER[((Integer) state.getValue(SnowLayerBlock.LAYERS)).intValue()];
+        return SnowLayerBlock.SHAPE_BY_LAYER[state.getValue(SnowLayerBlock.LAYERS).intValue()];
     }
 
     @Override
     public VoxelShape getCollisionShape(BlockState state, BlockGetter world, BlockPos pos, CollisionContext context) {
-        return SnowLayerBlock.SHAPE_BY_LAYER[((Integer) state.getValue(SnowLayerBlock.LAYERS)).intValue() - 1];
+        return SnowLayerBlock.SHAPE_BY_LAYER[state.getValue(SnowLayerBlock.LAYERS).intValue() - 1];
     }
 
     @Override
     public VoxelShape getBlockSupportShape(BlockState state, BlockGetter world, BlockPos pos) {
-        return SnowLayerBlock.SHAPE_BY_LAYER[((Integer) state.getValue(SnowLayerBlock.LAYERS)).intValue()];
+        return SnowLayerBlock.SHAPE_BY_LAYER[state.getValue(SnowLayerBlock.LAYERS).intValue()];
     }
 
     @Override
     public VoxelShape getVisualShape(BlockState state, BlockGetter world, BlockPos pos, CollisionContext context) {
-        return SnowLayerBlock.SHAPE_BY_LAYER[((Integer) state.getValue(SnowLayerBlock.LAYERS)).intValue()];
+        return SnowLayerBlock.SHAPE_BY_LAYER[state.getValue(SnowLayerBlock.LAYERS).intValue()];
     }
 
     @Override
@@ -74,14 +74,14 @@ public class SnowLayerBlock extends Block {
 
     @Override
     public float getShadeBrightness(BlockState state, BlockGetter world, BlockPos pos) {
-        return ((Integer) state.getValue(SnowLayerBlock.LAYERS)).intValue() == 8 ? 0.2F : 1.0F;
+        return state.getValue(SnowLayerBlock.LAYERS).intValue() == 8 ? 0.2F : 1.0F;
     }
 
     @Override
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
         BlockState iblockdata1 = world.getBlockState(pos.below());
 
-        return iblockdata1.is(BlockTags.SNOW_LAYER_CANNOT_SURVIVE_ON) ? false : (iblockdata1.is(BlockTags.SNOW_LAYER_CAN_SURVIVE_ON) ? true : Block.isFaceFull(iblockdata1.getCollisionShape(world, pos.below()), Direction.UP) || iblockdata1.is((Block) this) && ((Integer) iblockdata1.getValue(SnowLayerBlock.LAYERS)).intValue() == 8);
+        return iblockdata1.is(BlockTags.SNOW_LAYER_CANNOT_SURVIVE_ON) ? false : (iblockdata1.is(BlockTags.SNOW_LAYER_CAN_SURVIVE_ON) ? true : Block.isFaceFull(iblockdata1.getCollisionShape(world, pos.below()), Direction.UP) || iblockdata1.is(this) && iblockdata1.getValue(SnowLayerBlock.LAYERS).intValue() == 8);
     }
 
     @Override
@@ -105,7 +105,7 @@ public class SnowLayerBlock extends Block {
 
     @Override
     public boolean canBeReplaced(BlockState state, BlockPlaceContext context) {
-        int i = ((Integer) state.getValue(SnowLayerBlock.LAYERS)).intValue();
+        int i = state.getValue(SnowLayerBlock.LAYERS).intValue();
 
         return context.getItemInHand().is(this.asItem()) && i < 8 ? (context.replacingClickedOnBlock() ? context.getClickedFace() == Direction.UP : true) : i == 1;
     }
@@ -115,10 +115,10 @@ public class SnowLayerBlock extends Block {
     public BlockState getStateForPlacement(BlockPlaceContext ctx) {
         BlockState iblockdata = ctx.getLevel().getBlockState(ctx.getClickedPos());
 
-        if (iblockdata.is((Block) this)) {
-            int i = ((Integer) iblockdata.getValue(SnowLayerBlock.LAYERS)).intValue();
+        if (iblockdata.is(this)) {
+            int i = iblockdata.getValue(SnowLayerBlock.LAYERS).intValue();
 
-            return (BlockState) iblockdata.setValue(SnowLayerBlock.LAYERS, Integer.valueOf(Math.min(8, i + 1)));
+            return iblockdata.setValue(SnowLayerBlock.LAYERS, Integer.valueOf(Math.min(8, i + 1)));
         } else {
             return super.getStateForPlacement(ctx);
         }
diff --git a/src/main/java/net/minecraft/world/level/block/SpongeBlock.java b/src/main/java/net/minecraft/world/level/block/SpongeBlock.java
index 88ff8a835abde98b63875b1406aebfc6dde853ae..fd4d3d88b76de484125b02bced2424073df3863e 100644
--- a/src/main/java/net/minecraft/world/level/block/SpongeBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/SpongeBlock.java
@@ -58,9 +58,9 @@ public class SpongeBlock extends Block {
         BlockStateListPopulator blockList = new BlockStateListPopulator(world); // CraftBukkit - Use BlockStateListPopulator
 
         while (!queue.isEmpty()) {
-            Tuple<BlockPos, Integer> tuple = (Tuple) queue.poll();
-            BlockPos blockposition1 = (BlockPos) tuple.getA();
-            int j = ((Integer) tuple.getB()).intValue();
+            Tuple<BlockPos, Integer> tuple = queue.poll();
+            BlockPos blockposition1 = tuple.getA();
+            int j = tuple.getB().intValue();
             Direction[] aenumdirection = Direction.values();
             int k = aenumdirection.length;
 
diff --git a/src/main/java/net/minecraft/world/level/block/SpreadingSnowyDirtBlock.java b/src/main/java/net/minecraft/world/level/block/SpreadingSnowyDirtBlock.java
index c3de7825d1f61c3bc40ef326279febbc5ae601e6..d2dd441d5e4336b43b22a07639361ead32d04f16 100644
--- a/src/main/java/net/minecraft/world/level/block/SpreadingSnowyDirtBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/SpreadingSnowyDirtBlock.java
@@ -26,7 +26,7 @@ public abstract class SpreadingSnowyDirtBlock extends SnowyDirtBlock {
         BlockPos blockposition1 = pos.above();
         BlockState iblockdata1 = chunk.getBlockState(blockposition1); // Paper
 
-        if (iblockdata1.is(Blocks.SNOW) && ((Integer) iblockdata1.getValue(SnowLayerBlock.LAYERS)).intValue() == 1) {
+        if (iblockdata1.is(Blocks.SNOW) && iblockdata1.getValue(SnowLayerBlock.LAYERS).intValue() == 1) {
             return true;
         } else if (iblockdata1.getFluidState().getAmount() == 8) {
             return false;
diff --git a/src/main/java/net/minecraft/world/level/block/StemBlock.java b/src/main/java/net/minecraft/world/level/block/StemBlock.java
index 9c05879c7d98ae068109a836d79f069dd4bc8dbd..cd8e52afe3498c3ae908e0c1b1b93042dc5932ba 100644
--- a/src/main/java/net/minecraft/world/level/block/StemBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/StemBlock.java
@@ -35,12 +35,12 @@ public class StemBlock extends BushBlock implements BonemealableBlock {
         super(settings);
         this.fruit = gourdBlock;
         this.seedSupplier = pickBlockItem;
-        this.registerDefaultState((BlockState) ((BlockState) this.stateDefinition.any()).setValue(StemBlock.AGE, Integer.valueOf(0)));
+        this.registerDefaultState(this.stateDefinition.any().setValue(StemBlock.AGE, Integer.valueOf(0)));
     }
 
     @Override
     public VoxelShape getShape(BlockState state, BlockGetter world, BlockPos pos, CollisionContext context) {
-        return StemBlock.SHAPE_BY_AGE[((Integer) state.getValue(StemBlock.AGE)).intValue()];
+        return StemBlock.SHAPE_BY_AGE[state.getValue(StemBlock.AGE).intValue()];
     }
 
     @Override
@@ -54,10 +54,10 @@ public class StemBlock extends BushBlock implements BonemealableBlock {
             float f = CropBlock.getGrowthSpeed(this, world, pos);
 
             if (random.nextFloat() < ((this == Blocks.PUMPKIN_STEM ? world.spigotConfig.pumpkinModifier : world.spigotConfig.melonModifier) / (100.0f * (Math.floor((25.0F / f) + 1))))) { // Spigot - SPIGOT-7159: Better modifier resolution
-                int i = ((Integer) state.getValue(StemBlock.AGE)).intValue();
+                int i = state.getValue(StemBlock.AGE).intValue();
 
                 if (i < 7) {
-                    state = (BlockState) state.setValue(StemBlock.AGE, Integer.valueOf(i + 1));
+                    state = state.setValue(StemBlock.AGE, Integer.valueOf(i + 1));
                     CraftEventFactory.handleBlockGrowEvent(world, pos, state, 2); // CraftBukkit
                 } else {
                     Direction enumdirection = Direction.Plane.HORIZONTAL.getRandomDirection(random);
@@ -70,7 +70,7 @@ public class StemBlock extends BushBlock implements BonemealableBlock {
                             return;
                         }
                         // CraftBukkit end
-                        world.setBlockAndUpdate(pos, (BlockState) this.fruit.getAttachedStem().defaultBlockState().setValue(HorizontalDirectionalBlock.FACING, enumdirection));
+                        world.setBlockAndUpdate(pos, this.fruit.getAttachedStem().defaultBlockState().setValue(HorizontalDirectionalBlock.FACING, enumdirection));
                     }
                 }
             }
@@ -80,12 +80,12 @@ public class StemBlock extends BushBlock implements BonemealableBlock {
 
     @Override
     public ItemStack getCloneItemStack(BlockGetter world, BlockPos pos, BlockState state) {
-        return new ItemStack((ItemLike) this.seedSupplier.get());
+        return new ItemStack(this.seedSupplier.get());
     }
 
     @Override
     public boolean isValidBonemealTarget(LevelReader world, BlockPos pos, BlockState state, boolean isClient) {
-        return ((Integer) state.getValue(StemBlock.AGE)).intValue() != 7;
+        return state.getValue(StemBlock.AGE).intValue() != 7;
     }
 
     @Override
@@ -95,8 +95,8 @@ public class StemBlock extends BushBlock implements BonemealableBlock {
 
     @Override
     public void performBonemeal(ServerLevel world, RandomSource random, BlockPos pos, BlockState state) {
-        int i = Math.min(7, ((Integer) state.getValue(StemBlock.AGE)).intValue() + Mth.nextInt(world.random, 2, 5));
-        BlockState iblockdata1 = (BlockState) state.setValue(StemBlock.AGE, Integer.valueOf(i));
+        int i = Math.min(7, state.getValue(StemBlock.AGE).intValue() + Mth.nextInt(world.random, 2, 5));
+        BlockState iblockdata1 = state.setValue(StemBlock.AGE, Integer.valueOf(i));
 
         CraftEventFactory.handleBlockGrowEvent(world, pos, iblockdata1, 2); // CraftBukkit
         if (i == 7) {
diff --git a/src/main/java/net/minecraft/world/level/block/SugarCaneBlock.java b/src/main/java/net/minecraft/world/level/block/SugarCaneBlock.java
index f8bb8c1d5ecab58957219db0255ef68c80babf32..66e949420bbc65d78d3ee69e868ca2ad61494e0d 100644
--- a/src/main/java/net/minecraft/world/level/block/SugarCaneBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/SugarCaneBlock.java
@@ -27,7 +27,7 @@ public class SugarCaneBlock extends Block {
 
     protected SugarCaneBlock(BlockBehaviour.Properties settings) {
         super(settings);
-        this.registerDefaultState((BlockState) ((BlockState) this.stateDefinition.any()).setValue(SugarCaneBlock.AGE, Integer.valueOf(0)));
+        this.registerDefaultState(this.stateDefinition.any().setValue(SugarCaneBlock.AGE, Integer.valueOf(0)));
     }
 
     @Override
@@ -48,19 +48,19 @@ public class SugarCaneBlock extends Block {
         if (world.isEmptyBlock(pos.above())) {
             int i;
 
-            for (i = 1; world.getBlockState(pos.below(i)).is((Block) this); ++i) {
+            for (i = 1; world.getBlockState(pos.below(i)).is(this); ++i) {
                 ;
             }
 
             if (i < world.paperConfig().maxGrowthHeight.reeds) { // Paper - Configurable growth height
-                int j = ((Integer) state.getValue(SugarCaneBlock.AGE)).intValue();
+                int j = state.getValue(SugarCaneBlock.AGE).intValue();
 
                 int modifier = world.spigotConfig.caneModifier; // Spigot - SPIGOT-7159: Better modifier resolution
                 if (j >= 15 || (modifier != 100 && random.nextFloat() < (modifier / (100.0f * 16)))) { // Spigot - SPIGOT-7159: Better modifier resolution
                     org.bukkit.craftbukkit.event.CraftEventFactory.handleBlockGrowEvent(world, pos.above(), this.defaultBlockState()); // CraftBukkit
-                    world.setBlock(pos, (BlockState) state.setValue(SugarCaneBlock.AGE, Integer.valueOf(0)), 4);
+                    world.setBlock(pos, state.setValue(SugarCaneBlock.AGE, Integer.valueOf(0)), 4);
                 } else if (modifier == 100 || random.nextFloat() < (modifier / (100.0f * 16))) { // Spigot - SPIGOT-7159: Better modifier resolution
-                    world.setBlock(pos, (BlockState) state.setValue(SugarCaneBlock.AGE, Integer.valueOf(j + 1)), 4);
+                    world.setBlock(pos, state.setValue(SugarCaneBlock.AGE, Integer.valueOf(j + 1)), 4);
                 }
             }
         }
@@ -70,7 +70,7 @@ public class SugarCaneBlock extends Block {
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
         if (!state.canSurvive(world, pos)) {
-            world.scheduleTick(pos, (Block) this, 1);
+            world.scheduleTick(pos, this, 1);
         }
 
         return super.updateShape(state, direction, neighborState, world, pos, neighborPos);
@@ -80,7 +80,7 @@ public class SugarCaneBlock extends Block {
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
         BlockState iblockdata1 = world.getBlockState(pos.below());
 
-        if (iblockdata1.is((Block) this)) {
+        if (iblockdata1.is(this)) {
             return true;
         } else {
             if (iblockdata1.is(BlockTags.DIRT) || iblockdata1.is(Blocks.SAND) || iblockdata1.is(Blocks.RED_SAND)) {
diff --git a/src/main/java/net/minecraft/world/level/block/SweetBerryBushBlock.java b/src/main/java/net/minecraft/world/level/block/SweetBerryBushBlock.java
index 3b905e2fb65cfb27fdd9f2fca6cb75ea69d0b935..d56ea3343a579d98acf4ebf3bf8d153488c5d768 100644
--- a/src/main/java/net/minecraft/world/level/block/SweetBerryBushBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/SweetBerryBushBlock.java
@@ -45,7 +45,7 @@ public class SweetBerryBushBlock extends BushBlock implements BonemealableBlock
 
     public SweetBerryBushBlock(BlockBehaviour.Properties settings) {
         super(settings);
-        this.registerDefaultState((BlockState) ((BlockState) this.stateDefinition.any()).setValue(SweetBerryBushBlock.AGE, Integer.valueOf(0)));
+        this.registerDefaultState(this.stateDefinition.any().setValue(SweetBerryBushBlock.AGE, Integer.valueOf(0)));
     }
 
     @Override
@@ -55,20 +55,20 @@ public class SweetBerryBushBlock extends BushBlock implements BonemealableBlock
 
     @Override
     public VoxelShape getShape(BlockState state, BlockGetter world, BlockPos pos, CollisionContext context) {
-        return ((Integer) state.getValue(SweetBerryBushBlock.AGE)).intValue() == 0 ? SweetBerryBushBlock.SAPLING_SHAPE : (((Integer) state.getValue(SweetBerryBushBlock.AGE)).intValue() < 3 ? SweetBerryBushBlock.MID_GROWTH_SHAPE : super.getShape(state, world, pos, context));
+        return state.getValue(SweetBerryBushBlock.AGE).intValue() == 0 ? SweetBerryBushBlock.SAPLING_SHAPE : (state.getValue(SweetBerryBushBlock.AGE).intValue() < 3 ? SweetBerryBushBlock.MID_GROWTH_SHAPE : super.getShape(state, world, pos, context));
     }
 
     @Override
     public boolean isRandomlyTicking(BlockState state) {
-        return ((Integer) state.getValue(SweetBerryBushBlock.AGE)).intValue() < 3;
+        return state.getValue(SweetBerryBushBlock.AGE).intValue() < 3;
     }
 
     @Override
     public void randomTick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
-        int i = ((Integer) state.getValue(SweetBerryBushBlock.AGE)).intValue();
+        int i = state.getValue(SweetBerryBushBlock.AGE).intValue();
 
         if (i < 3 && random.nextFloat() < (world.spigotConfig.sweetBerryModifier / (100.0f * 5)) && world.getRawBrightness(pos.above(), 0) >= 9) { // Spigot - SPIGOT-7159: Better modifier resolution
-            BlockState iblockdata1 = (BlockState) state.setValue(SweetBerryBushBlock.AGE, Integer.valueOf(i + 1));
+            BlockState iblockdata1 = state.setValue(SweetBerryBushBlock.AGE, Integer.valueOf(i + 1));
 
             if (!CraftEventFactory.handleBlockGrowEvent(world, pos, iblockdata1, 2)) return; // CraftBukkit
             world.gameEvent(GameEvent.BLOCK_CHANGE, pos, GameEvent.Context.of(iblockdata1));
@@ -81,7 +81,7 @@ public class SweetBerryBushBlock extends BushBlock implements BonemealableBlock
         if (!new io.papermc.paper.event.entity.EntityInsideBlockEvent(entity.getBukkitEntity(), org.bukkit.craftbukkit.block.CraftBlock.at(world, pos)).callEvent()) { return; } // Paper
         if (entity instanceof LivingEntity && entity.getType() != EntityType.FOX && entity.getType() != EntityType.BEE) {
             entity.makeStuckInBlock(state, new Vec3(0.800000011920929D, 0.75D, 0.800000011920929D));
-            if (!world.isClientSide && ((Integer) state.getValue(SweetBerryBushBlock.AGE)).intValue() > 0 && (entity.xOld != entity.getX() || entity.zOld != entity.getZ())) {
+            if (!world.isClientSide && state.getValue(SweetBerryBushBlock.AGE).intValue() > 0 && (entity.xOld != entity.getX() || entity.zOld != entity.getZ())) {
                 double d0 = Math.abs(entity.getX() - entity.xOld);
                 double d1 = Math.abs(entity.getZ() - entity.zOld);
 
@@ -97,7 +97,7 @@ public class SweetBerryBushBlock extends BushBlock implements BonemealableBlock
 
     @Override
     public InteractionResult use(BlockState state, Level world, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hit) {
-        int i = ((Integer) state.getValue(SweetBerryBushBlock.AGE)).intValue();
+        int i = state.getValue(SweetBerryBushBlock.AGE).intValue();
         boolean flag = i == 3;
 
         if (!flag && player.getItemInHand(hand).is(Items.BONE_MEAL)) {
@@ -114,8 +114,8 @@ public class SweetBerryBushBlock extends BushBlock implements BonemealableBlock
                 popResource(world, pos, CraftItemStack.asNMSCopy(itemStack));
             }
             // CraftBukkit end
-            world.playSound((Player) null, pos, SoundEvents.SWEET_BERRY_BUSH_PICK_BERRIES, SoundSource.BLOCKS, 1.0F, 0.8F + world.random.nextFloat() * 0.4F);
-            BlockState iblockdata1 = (BlockState) state.setValue(SweetBerryBushBlock.AGE, Integer.valueOf(1));
+            world.playSound(null, pos, SoundEvents.SWEET_BERRY_BUSH_PICK_BERRIES, SoundSource.BLOCKS, 1.0F, 0.8F + world.random.nextFloat() * 0.4F);
+            BlockState iblockdata1 = state.setValue(SweetBerryBushBlock.AGE, Integer.valueOf(1));
 
             world.setBlock(pos, iblockdata1, 2);
             world.gameEvent(GameEvent.BLOCK_CHANGE, pos, GameEvent.Context.of(player, iblockdata1));
@@ -132,7 +132,7 @@ public class SweetBerryBushBlock extends BushBlock implements BonemealableBlock
 
     @Override
     public boolean isValidBonemealTarget(LevelReader world, BlockPos pos, BlockState state, boolean isClient) {
-        return ((Integer) state.getValue(SweetBerryBushBlock.AGE)).intValue() < 3;
+        return state.getValue(SweetBerryBushBlock.AGE).intValue() < 3;
     }
 
     @Override
@@ -142,8 +142,8 @@ public class SweetBerryBushBlock extends BushBlock implements BonemealableBlock
 
     @Override
     public void performBonemeal(ServerLevel world, RandomSource random, BlockPos pos, BlockState state) {
-        int i = Math.min(3, ((Integer) state.getValue(SweetBerryBushBlock.AGE)).intValue() + 1);
+        int i = Math.min(3, state.getValue(SweetBerryBushBlock.AGE).intValue() + 1);
 
-        world.setBlock(pos, (BlockState) state.setValue(SweetBerryBushBlock.AGE, Integer.valueOf(i)), 2);
+        world.setBlock(pos, state.setValue(SweetBerryBushBlock.AGE, Integer.valueOf(i)), 2);
     }
 }
diff --git a/src/main/java/net/minecraft/world/level/block/TntBlock.java b/src/main/java/net/minecraft/world/level/block/TntBlock.java
index 356abdce4a581debd67c857ba3ebb19485f10e7c..79614269f2d97b6b6403e79207d13c3c981399bc 100644
--- a/src/main/java/net/minecraft/world/level/block/TntBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/TntBlock.java
@@ -31,7 +31,7 @@ public class TntBlock extends Block {
 
     public TntBlock(BlockBehaviour.Properties settings) {
         super(settings);
-        this.registerDefaultState((BlockState) this.defaultBlockState().setValue(TntBlock.UNSTABLE, Boolean.FALSE));
+        this.registerDefaultState(this.defaultBlockState().setValue(TntBlock.UNSTABLE, Boolean.FALSE));
     }
 
     @Override
@@ -66,7 +66,7 @@ public class TntBlock extends Block {
 
     @Override
     public void playerWillDestroy(Level world, BlockPos pos, BlockState state, Player player) {
-        if (!world.isClientSide() && !player.isCreative() && ((Boolean) state.getValue(TntBlock.UNSTABLE)).booleanValue()) {
+        if (!world.isClientSide() && !player.isCreative() && state.getValue(TntBlock.UNSTABLE).booleanValue()) {
             TntBlock.explode(world, pos);
         }
 
@@ -82,7 +82,7 @@ public class TntBlock extends Block {
             if(!new com.destroystokyo.paper.event.block.TNTPrimeEvent(tntBlock, com.destroystokyo.paper.event.block.TNTPrimeEvent.PrimeReason.EXPLOSION, source).callEvent())
                 return;
             // Paper end
-            PrimedTnt entitytntprimed = new PrimedTnt(world, (double) pos.getX() + 0.5D, (double) pos.getY(), (double) pos.getZ() + 0.5D, explosion.getIndirectSourceEntity());
+            PrimedTnt entitytntprimed = new PrimedTnt(world, (double) pos.getX() + 0.5D, pos.getY(), (double) pos.getZ() + 0.5D, explosion.getIndirectSourceEntity());
             int i = entitytntprimed.getFuse();
 
             entitytntprimed.setFuse((short) (world.random.nextInt(i / 4) + i / 8));
@@ -91,16 +91,16 @@ public class TntBlock extends Block {
     }
 
     public static void explode(Level world, BlockPos pos) {
-        TntBlock.explode(world, pos, (LivingEntity) null);
+        TntBlock.explode(world, pos, null);
     }
 
     private static void explode(Level world, BlockPos pos, @Nullable LivingEntity igniter) {
         if (!world.isClientSide) {
-            PrimedTnt entitytntprimed = new PrimedTnt(world, (double) pos.getX() + 0.5D, (double) pos.getY(), (double) pos.getZ() + 0.5D, igniter);
+            PrimedTnt entitytntprimed = new PrimedTnt(world, (double) pos.getX() + 0.5D, pos.getY(), (double) pos.getZ() + 0.5D, igniter);
 
             world.addFreshEntity(entitytntprimed);
-            world.playSound((Player) null, entitytntprimed.getX(), entitytntprimed.getY(), entitytntprimed.getZ(), SoundEvents.TNT_PRIMED, SoundSource.BLOCKS, 1.0F, 1.0F);
-            world.gameEvent((Entity) igniter, GameEvent.PRIME_FUSE, pos);
+            world.playSound(null, entitytntprimed.getX(), entitytntprimed.getY(), entitytntprimed.getZ(), SoundEvents.TNT_PRIMED, SoundSource.BLOCKS, 1.0F, 1.0F);
+            world.gameEvent(igniter, GameEvent.PRIME_FUSE, pos);
         }
     }
 
diff --git a/src/main/java/net/minecraft/world/level/block/TrapDoorBlock.java b/src/main/java/net/minecraft/world/level/block/TrapDoorBlock.java
index 474f0def50430c7ae682c1cfa5f667d9f05e1128..dda51a72434f781c71b5ead523a9c63d4bab3626 100644
--- a/src/main/java/net/minecraft/world/level/block/TrapDoorBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/TrapDoorBlock.java
@@ -49,17 +49,17 @@ public class TrapDoorBlock extends HorizontalDirectionalBlock implements SimpleW
 
     protected TrapDoorBlock(BlockBehaviour.Properties settings, SoundEvent closeSound, SoundEvent openSound) {
         super(settings);
-        this.registerDefaultState((BlockState) ((BlockState) ((BlockState) ((BlockState) ((BlockState) ((BlockState) this.stateDefinition.any()).setValue(TrapDoorBlock.FACING, Direction.NORTH)).setValue(TrapDoorBlock.OPEN, Boolean.FALSE)).setValue(TrapDoorBlock.HALF, Half.BOTTOM)).setValue(TrapDoorBlock.POWERED, Boolean.FALSE)).setValue(TrapDoorBlock.WATERLOGGED, Boolean.FALSE));
+        this.registerDefaultState(this.stateDefinition.any().setValue(TrapDoorBlock.FACING, Direction.NORTH).setValue(TrapDoorBlock.OPEN, Boolean.FALSE).setValue(TrapDoorBlock.HALF, Half.BOTTOM).setValue(TrapDoorBlock.POWERED, Boolean.FALSE).setValue(TrapDoorBlock.WATERLOGGED, Boolean.FALSE));
         this.closeSound = closeSound;
         this.openSound = openSound;
     }
 
     @Override
     public VoxelShape getShape(BlockState state, BlockGetter world, BlockPos pos, CollisionContext context) {
-        if (!((Boolean) state.getValue(TrapDoorBlock.OPEN)).booleanValue()) {
+        if (!state.getValue(TrapDoorBlock.OPEN).booleanValue()) {
             return state.getValue(TrapDoorBlock.HALF) == Half.TOP ? TrapDoorBlock.TOP_AABB : TrapDoorBlock.BOTTOM_AABB;
         } else {
-            switch ((Direction) state.getValue(TrapDoorBlock.FACING)) {
+            switch (state.getValue(TrapDoorBlock.FACING)) {
                 case NORTH:
                 default:
                     return TrapDoorBlock.NORTH_OPEN_AABB;
@@ -77,11 +77,11 @@ public class TrapDoorBlock extends HorizontalDirectionalBlock implements SimpleW
     public boolean isPathfindable(BlockState state, BlockGetter world, BlockPos pos, PathComputationType type) {
         switch (type) {
             case LAND:
-                return ((Boolean) state.getValue(TrapDoorBlock.OPEN)).booleanValue();
+                return state.getValue(TrapDoorBlock.OPEN).booleanValue();
             case WATER:
-                return ((Boolean) state.getValue(TrapDoorBlock.WATERLOGGED)).booleanValue();
+                return state.getValue(TrapDoorBlock.WATERLOGGED).booleanValue();
             case AIR:
-                return ((Boolean) state.getValue(TrapDoorBlock.OPEN)).booleanValue();
+                return state.getValue(TrapDoorBlock.OPEN).booleanValue();
             default:
                 return false;
         }
@@ -92,20 +92,20 @@ public class TrapDoorBlock extends HorizontalDirectionalBlock implements SimpleW
         if (this.material == Material.METAL) {
             return InteractionResult.PASS;
         } else {
-            state = (BlockState) state.cycle(TrapDoorBlock.OPEN);
+            state = state.cycle(TrapDoorBlock.OPEN);
             world.setBlock(pos, state, 2);
-            if (((Boolean) state.getValue(TrapDoorBlock.WATERLOGGED)).booleanValue()) {
-                world.scheduleTick(pos, (Fluid) Fluids.WATER, Fluids.WATER.getTickDelay(world));
+            if (state.getValue(TrapDoorBlock.WATERLOGGED).booleanValue()) {
+                world.scheduleTick(pos, Fluids.WATER, Fluids.WATER.getTickDelay(world));
             }
 
-            this.playSound(player, world, pos, ((Boolean) state.getValue(TrapDoorBlock.OPEN)).booleanValue());
+            this.playSound(player, world, pos, state.getValue(TrapDoorBlock.OPEN).booleanValue());
             return InteractionResult.sidedSuccess(world.isClientSide);
         }
     }
 
     protected void playSound(@Nullable Player player, Level world, BlockPos pos, boolean open) {
         world.playSound(player, pos, open ? this.openSound : this.closeSound, SoundSource.BLOCKS, 1.0F, world.getRandom().nextFloat() * 0.1F + 0.9F);
-        world.gameEvent((Entity) player, open ? GameEvent.BLOCK_OPEN : GameEvent.BLOCK_CLOSE, pos);
+        world.gameEvent(player, open ? GameEvent.BLOCK_OPEN : GameEvent.BLOCK_CLOSE, pos);
     }
 
     @Override
@@ -113,13 +113,13 @@ public class TrapDoorBlock extends HorizontalDirectionalBlock implements SimpleW
         if (!world.isClientSide) {
             boolean flag1 = world.hasNeighborSignal(pos);
 
-            if (flag1 != ((Boolean) state.getValue(TrapDoorBlock.POWERED)).booleanValue()) {
+            if (flag1 != state.getValue(TrapDoorBlock.POWERED).booleanValue()) {
                 // CraftBukkit start
                 org.bukkit.World bworld = world.getWorld();
                 org.bukkit.block.Block bblock = bworld.getBlockAt(pos.getX(), pos.getY(), pos.getZ());
 
                 int power = bblock.getBlockPower();
-                int oldPower = ((Boolean) state.getValue(OPEN)).booleanValue() ? 15 : 0;
+                int oldPower = state.getValue(OPEN).booleanValue() ? 15 : 0;
 
                 if (oldPower == 0 ^ power == 0 || sourceBlock.defaultBlockState().isSignalSource()) {
                     BlockRedstoneEvent eventRedstone = new BlockRedstoneEvent(bblock, oldPower, power);
@@ -127,14 +127,14 @@ public class TrapDoorBlock extends HorizontalDirectionalBlock implements SimpleW
                     flag1 = eventRedstone.getNewCurrent() > 0;
                 }
                 // CraftBukkit end
-                if (((Boolean) state.getValue(TrapDoorBlock.OPEN)).booleanValue() != flag1) {
-                    state = (BlockState) state.setValue(TrapDoorBlock.OPEN, Boolean.valueOf(flag1));
-                    this.playSound((Player) null, world, pos, flag1);
+                if (state.getValue(TrapDoorBlock.OPEN).booleanValue() != flag1) {
+                    state = state.setValue(TrapDoorBlock.OPEN, Boolean.valueOf(flag1));
+                    this.playSound(null, world, pos, flag1);
                 }
 
-                world.setBlock(pos, (BlockState) state.setValue(TrapDoorBlock.POWERED, Boolean.valueOf(flag1)), 2);
-                if (((Boolean) state.getValue(TrapDoorBlock.WATERLOGGED)).booleanValue()) {
-                    world.scheduleTick(pos, (Fluid) Fluids.WATER, Fluids.WATER.getTickDelay(world));
+                world.setBlock(pos, state.setValue(TrapDoorBlock.POWERED, Boolean.valueOf(flag1)), 2);
+                if (state.getValue(TrapDoorBlock.WATERLOGGED).booleanValue()) {
+                    world.scheduleTick(pos, Fluids.WATER, Fluids.WATER.getTickDelay(world));
                 }
             }
 
@@ -148,16 +148,16 @@ public class TrapDoorBlock extends HorizontalDirectionalBlock implements SimpleW
         Direction enumdirection = ctx.getClickedFace();
 
         if (!ctx.replacingClickedOnBlock() && enumdirection.getAxis().isHorizontal()) {
-            iblockdata = (BlockState) ((BlockState) iblockdata.setValue(TrapDoorBlock.FACING, enumdirection)).setValue(TrapDoorBlock.HALF, ctx.getClickLocation().y - (double) ctx.getClickedPos().getY() > 0.5D ? Half.TOP : Half.BOTTOM);
+            iblockdata = iblockdata.setValue(TrapDoorBlock.FACING, enumdirection).setValue(TrapDoorBlock.HALF, ctx.getClickLocation().y - (double) ctx.getClickedPos().getY() > 0.5D ? Half.TOP : Half.BOTTOM);
         } else {
-            iblockdata = (BlockState) ((BlockState) iblockdata.setValue(TrapDoorBlock.FACING, ctx.getHorizontalDirection().getOpposite())).setValue(TrapDoorBlock.HALF, enumdirection == Direction.UP ? Half.BOTTOM : Half.TOP);
+            iblockdata = iblockdata.setValue(TrapDoorBlock.FACING, ctx.getHorizontalDirection().getOpposite()).setValue(TrapDoorBlock.HALF, enumdirection == Direction.UP ? Half.BOTTOM : Half.TOP);
         }
 
         if (ctx.getLevel().hasNeighborSignal(ctx.getClickedPos())) {
-            iblockdata = (BlockState) ((BlockState) iblockdata.setValue(TrapDoorBlock.OPEN, Boolean.TRUE)).setValue(TrapDoorBlock.POWERED, Boolean.TRUE);
+            iblockdata = iblockdata.setValue(TrapDoorBlock.OPEN, Boolean.TRUE).setValue(TrapDoorBlock.POWERED, Boolean.TRUE);
         }
 
-        return (BlockState) iblockdata.setValue(TrapDoorBlock.WATERLOGGED, Boolean.valueOf(fluid.getType() == Fluids.WATER));
+        return iblockdata.setValue(TrapDoorBlock.WATERLOGGED, Boolean.valueOf(fluid.getType() == Fluids.WATER));
     }
 
     @Override
@@ -167,13 +167,13 @@ public class TrapDoorBlock extends HorizontalDirectionalBlock implements SimpleW
 
     @Override
     public FluidState getFluidState(BlockState state) {
-        return ((Boolean) state.getValue(TrapDoorBlock.WATERLOGGED)).booleanValue() ? Fluids.WATER.getSource(false) : super.getFluidState(state);
+        return state.getValue(TrapDoorBlock.WATERLOGGED).booleanValue() ? Fluids.WATER.getSource(false) : super.getFluidState(state);
     }
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
-        if (((Boolean) state.getValue(TrapDoorBlock.WATERLOGGED)).booleanValue()) {
-            world.scheduleTick(pos, (Fluid) Fluids.WATER, Fluids.WATER.getTickDelay(world));
+        if (state.getValue(TrapDoorBlock.WATERLOGGED).booleanValue()) {
+            world.scheduleTick(pos, Fluids.WATER, Fluids.WATER.getTickDelay(world));
         }
 
         return super.updateShape(state, direction, neighborState, world, pos, neighborPos);
diff --git a/src/main/java/net/minecraft/world/level/block/TripWireBlock.java b/src/main/java/net/minecraft/world/level/block/TripWireBlock.java
index 8a4010a7da1705034bf816494b1d6697449c78c7..53cd35aeea31118c4941e74eb2444e384958e523 100644
--- a/src/main/java/net/minecraft/world/level/block/TripWireBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/TripWireBlock.java
@@ -42,13 +42,13 @@ public class TripWireBlock extends Block {
 
     public TripWireBlock(TripWireHookBlock hookBlock, BlockBehaviour.Properties settings) {
         super(settings);
-        this.registerDefaultState((BlockState) ((BlockState) ((BlockState) ((BlockState) ((BlockState) ((BlockState) ((BlockState) ((BlockState) this.stateDefinition.any()).setValue(TripWireBlock.POWERED, Boolean.FALSE)).setValue(TripWireBlock.ATTACHED, Boolean.FALSE)).setValue(TripWireBlock.DISARMED, Boolean.FALSE)).setValue(TripWireBlock.NORTH, Boolean.FALSE)).setValue(TripWireBlock.EAST, Boolean.FALSE)).setValue(TripWireBlock.SOUTH, Boolean.FALSE)).setValue(TripWireBlock.WEST, Boolean.FALSE));
+        this.registerDefaultState(this.stateDefinition.any().setValue(TripWireBlock.POWERED, Boolean.FALSE).setValue(TripWireBlock.ATTACHED, Boolean.FALSE).setValue(TripWireBlock.DISARMED, Boolean.FALSE).setValue(TripWireBlock.NORTH, Boolean.FALSE).setValue(TripWireBlock.EAST, Boolean.FALSE).setValue(TripWireBlock.SOUTH, Boolean.FALSE).setValue(TripWireBlock.WEST, Boolean.FALSE));
         this.hook = hookBlock;
     }
 
     @Override
     public VoxelShape getShape(BlockState state, BlockGetter world, BlockPos pos, CollisionContext context) {
-        return ((Boolean) state.getValue(TripWireBlock.ATTACHED)).booleanValue() ? TripWireBlock.AABB : TripWireBlock.NOT_ATTACHED_AABB;
+        return state.getValue(TripWireBlock.ATTACHED).booleanValue() ? TripWireBlock.AABB : TripWireBlock.NOT_ATTACHED_AABB;
     }
 
     @Override
@@ -56,12 +56,12 @@ public class TripWireBlock extends Block {
         Level world = ctx.getLevel();
         BlockPos blockposition = ctx.getClickedPos();
 
-        return (BlockState) ((BlockState) ((BlockState) ((BlockState) this.defaultBlockState().setValue(TripWireBlock.NORTH, Boolean.valueOf(this.shouldConnectTo(world.getBlockState(blockposition.north()), Direction.NORTH)))).setValue(TripWireBlock.EAST, Boolean.valueOf(this.shouldConnectTo(world.getBlockState(blockposition.east()), Direction.EAST)))).setValue(TripWireBlock.SOUTH, Boolean.valueOf(this.shouldConnectTo(world.getBlockState(blockposition.south()), Direction.SOUTH)))).setValue(TripWireBlock.WEST, Boolean.valueOf(this.shouldConnectTo(world.getBlockState(blockposition.west()), Direction.WEST)));
+        return this.defaultBlockState().setValue(TripWireBlock.NORTH, Boolean.valueOf(this.shouldConnectTo(world.getBlockState(blockposition.north()), Direction.NORTH))).setValue(TripWireBlock.EAST, Boolean.valueOf(this.shouldConnectTo(world.getBlockState(blockposition.east()), Direction.EAST))).setValue(TripWireBlock.SOUTH, Boolean.valueOf(this.shouldConnectTo(world.getBlockState(blockposition.south()), Direction.SOUTH))).setValue(TripWireBlock.WEST, Boolean.valueOf(this.shouldConnectTo(world.getBlockState(blockposition.west()), Direction.WEST)));
     }
 
     @Override
     public BlockState updateShape(BlockState state, Direction direction, BlockState neighborState, LevelAccessor world, BlockPos pos, BlockPos neighborPos) {
-        return direction.getAxis().isHorizontal() ? (BlockState) state.setValue((Property) TripWireBlock.PROPERTY_BY_DIRECTION.get(direction), Boolean.valueOf(this.shouldConnectTo(neighborState, direction))) : super.updateShape(state, direction, neighborState, world, pos, neighborPos);
+        return direction.getAxis().isHorizontal() ? state.setValue(TripWireBlock.PROPERTY_BY_DIRECTION.get(direction), Boolean.valueOf(this.shouldConnectTo(neighborState, direction))) : super.updateShape(state, direction, neighborState, world, pos, neighborPos);
     }
 
     @Override
@@ -74,15 +74,15 @@ public class TripWireBlock extends Block {
     @Override
     public void onRemove(BlockState state, Level world, BlockPos pos, BlockState newState, boolean moved) {
         if (!moved && !state.is(newState.getBlock())) {
-            this.updateSource(world, pos, (BlockState) state.setValue(TripWireBlock.POWERED, Boolean.TRUE), true); // Paper - fix state inconsistency
+            this.updateSource(world, pos, state.setValue(TripWireBlock.POWERED, Boolean.TRUE), true); // Paper - fix state inconsistency
         }
     }
 
     @Override
     public void playerWillDestroy(Level world, BlockPos pos, BlockState state, Player player) {
         if (!world.isClientSide && !player.getMainHandItem().isEmpty() && player.getMainHandItem().is(Items.SHEARS)) {
-            world.setBlock(pos, (BlockState) state.setValue(TripWireBlock.DISARMED, Boolean.TRUE), 4);
-            world.gameEvent((Entity) player, GameEvent.SHEAR, pos);
+            world.setBlock(pos, state.setValue(TripWireBlock.DISARMED, Boolean.TRUE), 4);
+            world.gameEvent(player, GameEvent.SHEAR, pos);
         }
 
         super.playerWillDestroy(world, pos, state, player);
@@ -108,11 +108,11 @@ public class TripWireBlock extends Block {
                     BlockPos blockposition1 = pos.relative(enumdirection, k);
                     BlockState iblockdata1 = world.getBlockState(blockposition1);
 
-                    if (iblockdata1.is((Block) this.hook)) {
+                    if (iblockdata1.is(this.hook)) {
                         if (iblockdata1.getValue(TripWireHookBlock.FACING) == enumdirection.getOpposite()) {
                             this.hook.calculateState(world, blockposition1, iblockdata1, false, true, k, state, beingRemoved); // Paper - fix state inconsistency
                         }
-                    } else if (iblockdata1.is((Block) this)) {
+                    } else if (iblockdata1.is(this)) {
                         ++k;
                         continue;
                     }
@@ -129,7 +129,7 @@ public class TripWireBlock extends Block {
     public void entityInside(BlockState state, Level world, BlockPos pos, Entity entity) {
         if (!new io.papermc.paper.event.entity.EntityInsideBlockEvent(entity.getBukkitEntity(), org.bukkit.craftbukkit.block.CraftBlock.at(world, pos)).callEvent()) { return; } // Paper
         if (!world.isClientSide) {
-            if (!((Boolean) state.getValue(TripWireBlock.POWERED)).booleanValue()) {
+            if (!state.getValue(TripWireBlock.POWERED).booleanValue()) {
                 this.checkPressed(world, pos);
             }
         }
@@ -137,16 +137,16 @@ public class TripWireBlock extends Block {
 
     @Override
     public void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
-        if (((Boolean) world.getBlockState(pos).getValue(TripWireBlock.POWERED)).booleanValue()) {
+        if (world.getBlockState(pos).getValue(TripWireBlock.POWERED).booleanValue()) {
             this.checkPressed(world, pos);
         }
     }
 
     private void checkPressed(Level world, BlockPos pos) {
         BlockState iblockdata = world.getBlockState(pos);
-        boolean flag = ((Boolean) iblockdata.getValue(TripWireBlock.POWERED)).booleanValue();
+        boolean flag = iblockdata.getValue(TripWireBlock.POWERED).booleanValue();
         boolean flag1 = false;
-        List<? extends Entity> list = world.getEntities((Entity) null, iblockdata.getShape(world, pos).bounds().move(pos));
+        List<? extends Entity> list = world.getEntities(null, iblockdata.getShape(world, pos).bounds().move(pos));
 
         if (!list.isEmpty()) {
             Iterator iterator = list.iterator();
@@ -162,7 +162,7 @@ public class TripWireBlock extends Block {
         }
 
         // CraftBukkit start - Call interact even when triggering connected tripwire
-        if (flag != flag1 && flag1 && ((Boolean) iblockdata.getValue(ATTACHED)).booleanValue()) {
+        if (flag != flag1 && flag1 && iblockdata.getValue(ATTACHED).booleanValue()) {
             org.bukkit.World bworld = world.getWorld();
             org.bukkit.plugin.PluginManager manager = world.getCraftServer().getPluginManager();
             org.bukkit.block.Block block = bworld.getBlockAt(pos.getX(), pos.getY(), pos.getZ());
@@ -196,30 +196,30 @@ public class TripWireBlock extends Block {
         // CraftBukkit end
 
         if (flag1 != flag) {
-            iblockdata = (BlockState) iblockdata.setValue(TripWireBlock.POWERED, Boolean.valueOf(flag1));
+            iblockdata = iblockdata.setValue(TripWireBlock.POWERED, Boolean.valueOf(flag1));
             world.setBlock(pos, iblockdata, 3);
             this.updateSource(world, pos, iblockdata);
         }
 
         if (flag1) {
-            world.scheduleTick(new BlockPos(pos), (Block) this, 10);
+            world.scheduleTick(new BlockPos(pos), this, 10);
         }
 
     }
 
     public boolean shouldConnectTo(BlockState state, Direction facing) {
-        return state.is((Block) this.hook) ? state.getValue(TripWireHookBlock.FACING) == facing.getOpposite() : state.is((Block) this);
+        return state.is(this.hook) ? state.getValue(TripWireHookBlock.FACING) == facing.getOpposite() : state.is(this);
     }
 
     @Override
     public BlockState rotate(BlockState state, Rotation rotation) {
         switch (rotation) {
             case CLOCKWISE_180:
-                return (BlockState) ((BlockState) ((BlockState) ((BlockState) state.setValue(TripWireBlock.NORTH, (Boolean) state.getValue(TripWireBlock.SOUTH))).setValue(TripWireBlock.EAST, (Boolean) state.getValue(TripWireBlock.WEST))).setValue(TripWireBlock.SOUTH, (Boolean) state.getValue(TripWireBlock.NORTH))).setValue(TripWireBlock.WEST, (Boolean) state.getValue(TripWireBlock.EAST));
+                return state.setValue(TripWireBlock.NORTH, state.getValue(TripWireBlock.SOUTH)).setValue(TripWireBlock.EAST, state.getValue(TripWireBlock.WEST)).setValue(TripWireBlock.SOUTH, state.getValue(TripWireBlock.NORTH)).setValue(TripWireBlock.WEST, state.getValue(TripWireBlock.EAST));
             case COUNTERCLOCKWISE_90:
-                return (BlockState) ((BlockState) ((BlockState) ((BlockState) state.setValue(TripWireBlock.NORTH, (Boolean) state.getValue(TripWireBlock.EAST))).setValue(TripWireBlock.EAST, (Boolean) state.getValue(TripWireBlock.SOUTH))).setValue(TripWireBlock.SOUTH, (Boolean) state.getValue(TripWireBlock.WEST))).setValue(TripWireBlock.WEST, (Boolean) state.getValue(TripWireBlock.NORTH));
+                return state.setValue(TripWireBlock.NORTH, state.getValue(TripWireBlock.EAST)).setValue(TripWireBlock.EAST, state.getValue(TripWireBlock.SOUTH)).setValue(TripWireBlock.SOUTH, state.getValue(TripWireBlock.WEST)).setValue(TripWireBlock.WEST, state.getValue(TripWireBlock.NORTH));
             case CLOCKWISE_90:
-                return (BlockState) ((BlockState) ((BlockState) ((BlockState) state.setValue(TripWireBlock.NORTH, (Boolean) state.getValue(TripWireBlock.WEST))).setValue(TripWireBlock.EAST, (Boolean) state.getValue(TripWireBlock.NORTH))).setValue(TripWireBlock.SOUTH, (Boolean) state.getValue(TripWireBlock.EAST))).setValue(TripWireBlock.WEST, (Boolean) state.getValue(TripWireBlock.SOUTH));
+                return state.setValue(TripWireBlock.NORTH, state.getValue(TripWireBlock.WEST)).setValue(TripWireBlock.EAST, state.getValue(TripWireBlock.NORTH)).setValue(TripWireBlock.SOUTH, state.getValue(TripWireBlock.EAST)).setValue(TripWireBlock.WEST, state.getValue(TripWireBlock.SOUTH));
             default:
                 return state;
         }
@@ -229,9 +229,9 @@ public class TripWireBlock extends Block {
     public BlockState mirror(BlockState state, Mirror mirror) {
         switch (mirror) {
             case LEFT_RIGHT:
-                return (BlockState) ((BlockState) state.setValue(TripWireBlock.NORTH, (Boolean) state.getValue(TripWireBlock.SOUTH))).setValue(TripWireBlock.SOUTH, (Boolean) state.getValue(TripWireBlock.NORTH));
+                return state.setValue(TripWireBlock.NORTH, state.getValue(TripWireBlock.SOUTH)).setValue(TripWireBlock.SOUTH, state.getValue(TripWireBlock.NORTH));
             case FRONT_BACK:
-                return (BlockState) ((BlockState) state.setValue(TripWireBlock.EAST, (Boolean) state.getValue(TripWireBlock.WEST))).setValue(TripWireBlock.WEST, (Boolean) state.getValue(TripWireBlock.EAST));
+                return state.setValue(TripWireBlock.EAST, state.getValue(TripWireBlock.WEST)).setValue(TripWireBlock.WEST, state.getValue(TripWireBlock.EAST));
             default:
                 return super.mirror(state, mirror);
         }
diff --git a/src/main/java/net/minecraft/world/level/block/TripWireHookBlock.java b/src/main/java/net/minecraft/world/level/block/TripWireHookBlock.java
index a12b84a0a053e240e620b5547a43d59e19ab6efe..56348ec4df850a46c9f4baec78324399dc1907af 100644
--- a/src/main/java/net/minecraft/world/level/block/TripWireHookBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/TripWireHookBlock.java
@@ -44,12 +44,12 @@ public class TripWireHookBlock extends Block {
 
     public TripWireHookBlock(BlockBehaviour.Properties settings) {
         super(settings);
-        this.registerDefaultState((BlockState) ((BlockState) ((BlockState) ((BlockState) this.stateDefinition.any()).setValue(TripWireHookBlock.FACING, Direction.NORTH)).setValue(TripWireHookBlock.POWERED, Boolean.FALSE)).setValue(TripWireHookBlock.ATTACHED, Boolean.FALSE));
+        this.registerDefaultState(this.stateDefinition.any().setValue(TripWireHookBlock.FACING, Direction.NORTH).setValue(TripWireHookBlock.POWERED, Boolean.FALSE).setValue(TripWireHookBlock.ATTACHED, Boolean.FALSE));
     }
 
     @Override
     public VoxelShape getShape(BlockState state, BlockGetter world, BlockPos pos, CollisionContext context) {
-        switch ((Direction) state.getValue(TripWireHookBlock.FACING)) {
+        switch (state.getValue(TripWireHookBlock.FACING)) {
             case EAST:
             default:
                 return TripWireHookBlock.EAST_AABB;
@@ -64,7 +64,7 @@ public class TripWireHookBlock extends Block {
 
     @Override
     public boolean canSurvive(BlockState state, LevelReader world, BlockPos pos) {
-        Direction enumdirection = (Direction) state.getValue(TripWireHookBlock.FACING);
+        Direction enumdirection = state.getValue(TripWireHookBlock.FACING);
         BlockPos blockposition1 = pos.relative(enumdirection.getOpposite());
         BlockState iblockdata1 = world.getBlockState(blockposition1);
 
@@ -79,7 +79,7 @@ public class TripWireHookBlock extends Block {
     @Nullable
     @Override
     public BlockState getStateForPlacement(BlockPlaceContext ctx) {
-        BlockState iblockdata = (BlockState) ((BlockState) this.defaultBlockState().setValue(TripWireHookBlock.POWERED, Boolean.FALSE)).setValue(TripWireHookBlock.ATTACHED, Boolean.FALSE);
+        BlockState iblockdata = this.defaultBlockState().setValue(TripWireHookBlock.POWERED, Boolean.FALSE).setValue(TripWireHookBlock.ATTACHED, Boolean.FALSE);
         Level world = ctx.getLevel();
         BlockPos blockposition = ctx.getClickedPos();
         Direction[] aenumdirection = ctx.getNearestLookingDirections();
@@ -92,7 +92,7 @@ public class TripWireHookBlock extends Block {
             if (enumdirection.getAxis().isHorizontal()) {
                 Direction enumdirection1 = enumdirection.getOpposite();
 
-                iblockdata = (BlockState) iblockdata.setValue(TripWireHookBlock.FACING, enumdirection1);
+                iblockdata = iblockdata.setValue(TripWireHookBlock.FACING, enumdirection1);
                 if (iblockdata.canSurvive(world, blockposition)) {
                     return iblockdata;
                 }
@@ -104,7 +104,7 @@ public class TripWireHookBlock extends Block {
 
     @Override
     public void setPlacedBy(Level world, BlockPos pos, BlockState state, LivingEntity placer, ItemStack itemStack) {
-        this.calculateState(world, pos, state, false, false, -1, (BlockState) null);
+        this.calculateState(world, pos, state, false, false, -1, null);
     }
 
     public void calculateState(Level world, BlockPos pos, BlockState state, boolean beingRemoved, boolean flag1, int i, @Nullable BlockState iblockdata1) {
@@ -114,9 +114,9 @@ public class TripWireHookBlock extends Block {
 
     public void calculateState(Level world, BlockPos pos, BlockState state, boolean beingRemoved, boolean flag1, int i, @Nullable BlockState iblockdata1, boolean tripWireBeingRemoved) {
         // Paper end
-        Direction enumdirection = (Direction) state.getValue(TripWireHookBlock.FACING);
-        boolean flag2 = ((Boolean) state.getValue(TripWireHookBlock.ATTACHED)).booleanValue();
-        boolean flag3 = ((Boolean) state.getValue(TripWireHookBlock.POWERED)).booleanValue();
+        Direction enumdirection = state.getValue(TripWireHookBlock.FACING);
+        boolean flag2 = state.getValue(TripWireHookBlock.ATTACHED).booleanValue();
+        boolean flag3 = state.getValue(TripWireHookBlock.POWERED).booleanValue();
         boolean flag4 = !beingRemoved;
         boolean flag5 = false;
         int j = 0;
@@ -140,17 +140,17 @@ public class TripWireHookBlock extends Block {
                 flag4 = false;
             } else {
                 if (k == i) {
-                    iblockdata2 = (BlockState) MoreObjects.firstNonNull(iblockdata1, iblockdata2);
+                    iblockdata2 = MoreObjects.firstNonNull(iblockdata1, iblockdata2);
                 }
 
-                boolean flag6 = !((Boolean) iblockdata2.getValue(TripWireBlock.DISARMED)).booleanValue();
-                boolean flag7 = ((Boolean) iblockdata2.getValue(TripWireBlock.POWERED)).booleanValue();
+                boolean flag6 = !iblockdata2.getValue(TripWireBlock.DISARMED).booleanValue();
+                boolean flag7 = iblockdata2.getValue(TripWireBlock.POWERED).booleanValue();
 
                 flag5 |= flag6 && flag7;
                 if (k != i || !tripWireBeingRemoved || !flag6) // Paper - don't update the tripwire again if being removed and not disarmed
                 aiblockdata[k] = iblockdata2;
                 if (k == i) {
-                    world.scheduleTick(pos, (Block) this, 10);
+                    world.scheduleTick(pos, this, 10);
                     flag4 &= flag6;
                 }
             }
@@ -158,13 +158,13 @@ public class TripWireHookBlock extends Block {
 
         flag4 &= j > 1;
         flag5 &= flag4;
-        BlockState iblockdata3 = (BlockState) ((BlockState) this.defaultBlockState().setValue(TripWireHookBlock.ATTACHED, Boolean.valueOf(flag4))).setValue(TripWireHookBlock.POWERED, Boolean.valueOf(flag5));
+        BlockState iblockdata3 = this.defaultBlockState().setValue(TripWireHookBlock.ATTACHED, Boolean.valueOf(flag4)).setValue(TripWireHookBlock.POWERED, Boolean.valueOf(flag5));
 
         if (j > 0) {
             blockposition1 = pos.relative(enumdirection, j);
             Direction enumdirection1 = enumdirection.getOpposite();
 
-            world.setBlock(blockposition1, (BlockState) iblockdata3.setValue(TripWireHookBlock.FACING, enumdirection1), 3);
+            world.setBlock(blockposition1, iblockdata3.setValue(TripWireHookBlock.FACING, enumdirection1), 3);
             this.notifyNeighbors(world, blockposition1, enumdirection1);
             this.emitState(world, blockposition1, flag4, flag5, flag2, flag3);
         }
@@ -183,7 +183,7 @@ public class TripWireHookBlock extends Block {
         this.emitState(world, pos, flag4, flag5, flag2, flag3);
         if (!beingRemoved) {
             if (world.getBlockState(pos).getBlock() == Blocks.TRIPWIRE_HOOK) // Paper - validate
-            world.setBlock(pos, (BlockState) iblockdata3.setValue(TripWireHookBlock.FACING, enumdirection), 3);
+            world.setBlock(pos, iblockdata3.setValue(TripWireHookBlock.FACING, enumdirection), 3);
             if (flag1) {
                 this.notifyNeighbors(world, pos, enumdirection);
             }
@@ -195,7 +195,7 @@ public class TripWireHookBlock extends Block {
                 BlockState iblockdata4 = aiblockdata[l];
 
                 if (iblockdata4 != null) {
-                    world.setBlock(blockposition2, (BlockState) iblockdata4.setValue(TripWireHookBlock.ATTACHED, Boolean.valueOf(flag4)), 3);
+                    world.setBlock(blockposition2, iblockdata4.setValue(TripWireHookBlock.ATTACHED, Boolean.valueOf(flag4)), 3);
                     if (!world.getBlockState(blockposition2).isAir()) {
                         ;
                     }
@@ -207,22 +207,22 @@ public class TripWireHookBlock extends Block {
 
     @Override
     public void tick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
-        this.calculateState(world, pos, state, false, true, -1, (BlockState) null);
+        this.calculateState(world, pos, state, false, true, -1, null);
     }
 
     private void emitState(Level world, BlockPos pos, boolean attached, boolean on, boolean detached, boolean off) {
         if (on && !off) {
-            world.playSound((Player) null, pos, SoundEvents.TRIPWIRE_CLICK_ON, SoundSource.BLOCKS, 0.4F, 0.6F);
-            world.gameEvent((Entity) null, GameEvent.BLOCK_ACTIVATE, pos);
+            world.playSound(null, pos, SoundEvents.TRIPWIRE_CLICK_ON, SoundSource.BLOCKS, 0.4F, 0.6F);
+            world.gameEvent(null, GameEvent.BLOCK_ACTIVATE, pos);
         } else if (!on && off) {
-            world.playSound((Player) null, pos, SoundEvents.TRIPWIRE_CLICK_OFF, SoundSource.BLOCKS, 0.4F, 0.5F);
-            world.gameEvent((Entity) null, GameEvent.BLOCK_DEACTIVATE, pos);
+            world.playSound(null, pos, SoundEvents.TRIPWIRE_CLICK_OFF, SoundSource.BLOCKS, 0.4F, 0.5F);
+            world.gameEvent(null, GameEvent.BLOCK_DEACTIVATE, pos);
         } else if (attached && !detached) {
-            world.playSound((Player) null, pos, SoundEvents.TRIPWIRE_ATTACH, SoundSource.BLOCKS, 0.4F, 0.7F);
-            world.gameEvent((Entity) null, GameEvent.BLOCK_ATTACH, pos);
+            world.playSound(null, pos, SoundEvents.TRIPWIRE_ATTACH, SoundSource.BLOCKS, 0.4F, 0.7F);
+            world.gameEvent(null, GameEvent.BLOCK_ATTACH, pos);
         } else if (!attached && detached) {
-            world.playSound((Player) null, pos, SoundEvents.TRIPWIRE_DETACH, SoundSource.BLOCKS, 0.4F, 1.2F / (world.random.nextFloat() * 0.2F + 0.9F));
-            world.gameEvent((Entity) null, GameEvent.BLOCK_DETACH, pos);
+            world.playSound(null, pos, SoundEvents.TRIPWIRE_DETACH, SoundSource.BLOCKS, 0.4F, 1.2F / (world.random.nextFloat() * 0.2F + 0.9F));
+            world.gameEvent(null, GameEvent.BLOCK_DETACH, pos);
         }
 
     }
@@ -235,16 +235,16 @@ public class TripWireHookBlock extends Block {
     @Override
     public void onRemove(BlockState state, Level world, BlockPos pos, BlockState newState, boolean moved) {
         if (!moved && !state.is(newState.getBlock())) {
-            boolean flag1 = ((Boolean) state.getValue(TripWireHookBlock.ATTACHED)).booleanValue();
-            boolean flag2 = ((Boolean) state.getValue(TripWireHookBlock.POWERED)).booleanValue();
+            boolean flag1 = state.getValue(TripWireHookBlock.ATTACHED).booleanValue();
+            boolean flag2 = state.getValue(TripWireHookBlock.POWERED).booleanValue();
 
             if (flag1 || flag2) {
-                this.calculateState(world, pos, state, true, false, -1, (BlockState) null);
+                this.calculateState(world, pos, state, true, false, -1, null);
             }
 
             if (flag2) {
                 world.updateNeighborsAt(pos, this);
-                world.updateNeighborsAt(pos.relative(((Direction) state.getValue(TripWireHookBlock.FACING)).getOpposite()), this);
+                world.updateNeighborsAt(pos.relative(state.getValue(TripWireHookBlock.FACING).getOpposite()), this);
             }
 
             super.onRemove(state, world, pos, newState, moved);
@@ -253,12 +253,12 @@ public class TripWireHookBlock extends Block {
 
     @Override
     public int getSignal(BlockState state, BlockGetter world, BlockPos pos, Direction direction) {
-        return ((Boolean) state.getValue(TripWireHookBlock.POWERED)).booleanValue() ? 15 : 0;
+        return state.getValue(TripWireHookBlock.POWERED).booleanValue() ? 15 : 0;
     }
 
     @Override
     public int getDirectSignal(BlockState state, BlockGetter world, BlockPos pos, Direction direction) {
-        return !((Boolean) state.getValue(TripWireHookBlock.POWERED)).booleanValue() ? 0 : (state.getValue(TripWireHookBlock.FACING) == direction ? 15 : 0);
+        return !state.getValue(TripWireHookBlock.POWERED).booleanValue() ? 0 : (state.getValue(TripWireHookBlock.FACING) == direction ? 15 : 0);
     }
 
     @Override
@@ -268,12 +268,12 @@ public class TripWireHookBlock extends Block {
 
     @Override
     public BlockState rotate(BlockState state, Rotation rotation) {
-        return (BlockState) state.setValue(TripWireHookBlock.FACING, rotation.rotate((Direction) state.getValue(TripWireHookBlock.FACING)));
+        return state.setValue(TripWireHookBlock.FACING, rotation.rotate(state.getValue(TripWireHookBlock.FACING)));
     }
 
     @Override
     public BlockState mirror(BlockState state, Mirror mirror) {
-        return state.rotate(mirror.getRotation((Direction) state.getValue(TripWireHookBlock.FACING)));
+        return state.rotate(mirror.getRotation(state.getValue(TripWireHookBlock.FACING)));
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/TurtleEggBlock.java b/src/main/java/net/minecraft/world/level/block/TurtleEggBlock.java
index ed3a7ba8ab4cdf47508bec0a3bc4c9fc8ae473c4..1d6ea34ea751cc6090cc73c9bb1e6873293481d9 100644
--- a/src/main/java/net/minecraft/world/level/block/TurtleEggBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/TurtleEggBlock.java
@@ -46,7 +46,7 @@ public class TurtleEggBlock extends Block {
 
     public TurtleEggBlock(BlockBehaviour.Properties settings) {
         super(settings);
-        this.registerDefaultState((BlockState) ((BlockState) ((BlockState) this.stateDefinition.any()).setValue(TurtleEggBlock.HATCH, Integer.valueOf(0))).setValue(TurtleEggBlock.EGGS, Integer.valueOf(1)));
+        this.registerDefaultState(this.stateDefinition.any().setValue(TurtleEggBlock.HATCH, Integer.valueOf(0)).setValue(TurtleEggBlock.EGGS, Integer.valueOf(1)));
     }
 
     @Override
@@ -90,13 +90,13 @@ public class TurtleEggBlock extends Block {
     }
 
     public void decreaseEggs(Level world, BlockPos pos, BlockState state) {
-        world.playSound((Player) null, pos, SoundEvents.TURTLE_EGG_BREAK, SoundSource.BLOCKS, 0.7F, 0.9F + world.random.nextFloat() * 0.2F);
-        int i = ((Integer) state.getValue(TurtleEggBlock.EGGS)).intValue();
+        world.playSound(null, pos, SoundEvents.TURTLE_EGG_BREAK, SoundSource.BLOCKS, 0.7F, 0.9F + world.random.nextFloat() * 0.2F);
+        int i = state.getValue(TurtleEggBlock.EGGS).intValue();
 
         if (i <= 1) {
             world.destroyBlock(pos, false);
         } else {
-            world.setBlock(pos, (BlockState) state.setValue(TurtleEggBlock.EGGS, Integer.valueOf(i - 1)), 2);
+            world.setBlock(pos, state.setValue(TurtleEggBlock.EGGS, Integer.valueOf(i - 1)), 2);
             world.gameEvent(GameEvent.BLOCK_DESTROY, pos, GameEvent.Context.of(state));
             world.levelEvent(2001, pos, Block.getId(state));
         }
@@ -106,7 +106,7 @@ public class TurtleEggBlock extends Block {
     @Override
     public void randomTick(BlockState state, ServerLevel world, BlockPos pos, RandomSource random) {
         if (this.shouldUpdateHatchLevel(world) && TurtleEggBlock.onSand(world, pos)) {
-            int i = ((Integer) state.getValue(TurtleEggBlock.HATCH)).intValue();
+            int i = state.getValue(TurtleEggBlock.HATCH).intValue();
 
             if (i < 2) {
                 // CraftBukkit start - Call BlockGrowEvent
@@ -114,7 +114,7 @@ public class TurtleEggBlock extends Block {
                     return;
                 }
                 // CraftBukkit end
-                world.playSound((Player) null, pos, SoundEvents.TURTLE_EGG_CRACK, SoundSource.BLOCKS, 0.7F, 0.9F + random.nextFloat() * 0.2F);
+                world.playSound(null, pos, SoundEvents.TURTLE_EGG_CRACK, SoundSource.BLOCKS, 0.7F, 0.9F + random.nextFloat() * 0.2F);
                 // worldserver.setBlock(blockposition, (IBlockData) iblockdata.setValue(BlockTurtleEgg.HATCH, i + 1), 2); // CraftBukkit - handled above
             } else {
                 // CraftBukkit start - Call BlockFadeEvent
@@ -122,17 +122,17 @@ public class TurtleEggBlock extends Block {
                     return;
                 }
                 // CraftBukkit end
-                world.playSound((Player) null, pos, SoundEvents.TURTLE_EGG_HATCH, SoundSource.BLOCKS, 0.7F, 0.9F + random.nextFloat() * 0.2F);
+                world.playSound(null, pos, SoundEvents.TURTLE_EGG_HATCH, SoundSource.BLOCKS, 0.7F, 0.9F + random.nextFloat() * 0.2F);
                 world.removeBlock(pos, false);
 
-                for (int j = 0; j < ((Integer) state.getValue(TurtleEggBlock.EGGS)).intValue(); ++j) {
+                for (int j = 0; j < state.getValue(TurtleEggBlock.EGGS).intValue(); ++j) {
                     world.levelEvent(2001, pos, Block.getId(state));
-                    Turtle entityturtle = (Turtle) EntityType.TURTLE.create(world);
+                    Turtle entityturtle = EntityType.TURTLE.create(world);
 
                     if (entityturtle != null) {
                         entityturtle.setAge(-24000);
                         entityturtle.setHomePos(pos);
-                        entityturtle.moveTo((double) pos.getX() + 0.3D + (double) j * 0.2D, (double) pos.getY(), (double) pos.getZ() + 0.3D, 0.0F, 0.0F);
+                        entityturtle.moveTo((double) pos.getX() + 0.3D + (double) j * 0.2D, pos.getY(), (double) pos.getZ() + 0.3D, 0.0F, 0.0F);
                         world.addFreshEntity(entityturtle, org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason.EGG); // CraftBukkit
                     }
                 }
@@ -171,7 +171,7 @@ public class TurtleEggBlock extends Block {
 
     @Override
     public boolean canBeReplaced(BlockState state, BlockPlaceContext context) {
-        return !context.isSecondaryUseActive() && context.getItemInHand().is(this.asItem()) && ((Integer) state.getValue(TurtleEggBlock.EGGS)).intValue() < 4 ? true : super.canBeReplaced(state, context);
+        return !context.isSecondaryUseActive() && context.getItemInHand().is(this.asItem()) && state.getValue(TurtleEggBlock.EGGS).intValue() < 4 ? true : super.canBeReplaced(state, context);
     }
 
     @Nullable
@@ -179,12 +179,12 @@ public class TurtleEggBlock extends Block {
     public BlockState getStateForPlacement(BlockPlaceContext ctx) {
         BlockState iblockdata = ctx.getLevel().getBlockState(ctx.getClickedPos());
 
-        return iblockdata.is((Block) this) ? (BlockState) iblockdata.setValue(TurtleEggBlock.EGGS, Integer.valueOf(Math.min(4, (Integer) iblockdata.getValue(TurtleEggBlock.EGGS) + 1))) : super.getStateForPlacement(ctx);
+        return iblockdata.is(this) ? iblockdata.setValue(TurtleEggBlock.EGGS, Integer.valueOf(Math.min(4, iblockdata.getValue(TurtleEggBlock.EGGS) + 1))) : super.getStateForPlacement(ctx);
     }
 
     @Override
     public VoxelShape getShape(BlockState state, BlockGetter world, BlockPos pos, CollisionContext context) {
-        return ((Integer) state.getValue(TurtleEggBlock.EGGS)).intValue() > 1 ? TurtleEggBlock.MULTIPLE_EGGS_AABB : TurtleEggBlock.ONE_EGG_AABB;
+        return state.getValue(TurtleEggBlock.EGGS).intValue() > 1 ? TurtleEggBlock.MULTIPLE_EGGS_AABB : TurtleEggBlock.ONE_EGG_AABB;
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/VineBlock.java b/src/main/java/net/minecraft/world/level/block/VineBlock.java
index ee94680513a04b0226adc07f2022f8d47df22fb3..c4a11cb9f2703e395fa4f11b603b039cf57c25ef 100644
--- a/src/main/java/net/minecraft/world/level/block/VineBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/VineBlock.java
@@ -31,7 +31,7 @@ public class VineBlock extends Block {
     public static final BooleanProperty EAST = PipeBlock.EAST;
     public static final BooleanProperty SOUTH = PipeBlock.SOUTH;
     public static final BooleanProperty WEST = PipeBlock.WEST;
-    public static final Map<Direction, BooleanProperty> PROPERTY_BY_DIRECTION = (Map) PipeBlock.PROPERTY_BY_DIRECTION.entrySet().stream().filter((entry) -> {
+    public static final Map<Direction, BooleanProperty> PROPERTY_BY_DIRECTION = PipeBlock.PROPERTY_BY_DIRECTION.entrySet().stream().filter((entry) -> {
         return entry.getKey() != Direction.DOWN;
     }).collect(Util.toMap());
     protected static final float AABB_OFFSET = 1.0F;
@@ -44,30 +44,30 @@ public class VineBlock extends Block {
 
     public VineBlock(BlockBehaviour.Properties settings) {
         super(settings);
-        this.registerDefaultState((BlockState) ((BlockState) ((BlockState) ((BlockState) ((BlockState) ((BlockState) this.stateDefinition.any()).setValue(VineBlock.UP, Boolean.FALSE)).setValue(VineBlock.NORTH, Boolean.FALSE)).setValue(VineBlock.EAST, Boolean.FALSE)).setValue(VineBlock.SOUTH, Boolean.FALSE)).setValue(VineBlock.WEST, Boolean.FALSE));
+        this.registerDefaultState(this.stateDefinition.any().setValue(VineBlock.UP, Boolean.FALSE).setValue(VineBlock.NORTH, Boolean.FALSE).setValue(VineBlock.EAST, Boolean.FALSE).setValue(VineBlock.SOUTH, Boolean.FALSE).setValue(VineBlock.WEST, Boolean.FALSE));
         this.shapesCache = ImmutableMap.copyOf((Map) this.stateDefinition.getPossibleStates().stream().collect(Collectors.toMap(Function.identity(), VineBlock::calculateShape)));
     }
 
     private static VoxelShape calculateShape(BlockState state) {
         VoxelShape voxelshape = Shapes.empty();
 
-        if (((Boolean) state.getValue(VineBlock.UP)).booleanValue()) {
+        if (state.getValue(VineBlock.UP).booleanValue()) {
             voxelshape = VineBlock.UP_AABB;
         }
 
-        if (((Boolean) state.getValue(VineBlock.NORTH)).booleanValue()) {
+        if (state.getValue(VineBlock.NORTH).booleanValue()) {
             voxelshape = Shapes.or(voxelshape, VineBlock.NORTH_AABB);
         }
 
-        if (((Boolean) state.getValue(VineBlock.SOUTH)).booleanValue()) {
+        if (state.getValue(VineBlock.SOUTH).booleanValue()) {
             voxelshape = Shapes.or(voxelshape, VineBlock.SOUTH_AABB);
         }
 
-        if (((Boolean) state.getValue(VineBlock.EAST)).booleanValue()) {
+        if (state.getValue(VineBlock.EAST).booleanValue()) {
             voxelshape = Shapes.or(voxelshape, VineBlock.EAST_AABB);
         }
 
-        if (((Boolean) state.getValue(VineBlock.WEST)).booleanValue()) {
+        if (state.getValue(VineBlock.WEST).booleanValue()) {
             voxelshape = Shapes.or(voxelshape, VineBlock.WEST_AABB);
         }
 
@@ -76,7 +76,7 @@ public class VineBlock extends Block {
 
     @Override
     public VoxelShape getShape(BlockState state, BlockGetter world, BlockPos pos, CollisionContext context) {
-        return (VoxelShape) this.shapesCache.get(state);
+        return this.shapesCache.get(state);
     }
 
     @Override
@@ -100,7 +100,7 @@ public class VineBlock extends Block {
         while (iterator.hasNext()) {
             BooleanProperty blockstateboolean = (BooleanProperty) iterator.next();
 
-            if (((Boolean) state.getValue(blockstateboolean)).booleanValue()) {
+            if (state.getValue(blockstateboolean).booleanValue()) {
                 ++i;
             }
         }
@@ -119,10 +119,10 @@ public class VineBlock extends Block {
             } else if (side.getAxis() == Direction.Axis.Y) {
                 return false;
             } else {
-                BooleanProperty blockstateboolean = (BooleanProperty) VineBlock.PROPERTY_BY_DIRECTION.get(side);
+                BooleanProperty blockstateboolean = VineBlock.PROPERTY_BY_DIRECTION.get(side);
                 BlockState iblockdata = world.getBlockState(pos.above());
 
-                return iblockdata.is((Block) this) && ((Boolean) iblockdata.getValue(blockstateboolean)).booleanValue();
+                return iblockdata.is(this) && iblockdata.getValue(blockstateboolean).booleanValue();
             }
         }
     }
@@ -134,8 +134,8 @@ public class VineBlock extends Block {
     private BlockState getUpdatedState(BlockState state, BlockGetter world, BlockPos pos) {
         BlockPos blockposition1 = pos.above();
 
-        if (((Boolean) state.getValue(VineBlock.UP)).booleanValue()) {
-            state = (BlockState) state.setValue(VineBlock.UP, Boolean.valueOf(VineBlock.isAcceptableNeighbour(world, blockposition1, Direction.DOWN)));
+        if (state.getValue(VineBlock.UP).booleanValue()) {
+            state = state.setValue(VineBlock.UP, Boolean.valueOf(VineBlock.isAcceptableNeighbour(world, blockposition1, Direction.DOWN)));
         }
 
         BlockState iblockdata1 = null;
@@ -145,7 +145,7 @@ public class VineBlock extends Block {
             Direction enumdirection = (Direction) iterator.next();
             BooleanProperty blockstateboolean = VineBlock.getPropertyForFace(enumdirection);
 
-            if (((Boolean) state.getValue(blockstateboolean)).booleanValue()) {
+            if (state.getValue(blockstateboolean).booleanValue()) {
                 boolean flag = this.canSupportAtFace(world, pos, enumdirection);
 
                 if (!flag) {
@@ -153,10 +153,10 @@ public class VineBlock extends Block {
                         iblockdata1 = world.getBlockState(blockposition1);
                     }
 
-                    flag = iblockdata1.is((Block) this) && ((Boolean) iblockdata1.getValue(blockstateboolean)).booleanValue();
+                    flag = iblockdata1.is(this) && iblockdata1.getValue(blockstateboolean).booleanValue();
                 }
 
-                state = (BlockState) state.setValue(blockstateboolean, Boolean.valueOf(flag));
+                state = state.setValue(blockstateboolean, Boolean.valueOf(flag));
             }
         }
 
@@ -183,15 +183,15 @@ public class VineBlock extends Block {
             BlockState iblockdata1;
             Direction enumdirection1;
 
-            if (enumdirection.getAxis().isHorizontal() && !((Boolean) state.getValue(VineBlock.getPropertyForFace(enumdirection))).booleanValue()) {
+            if (enumdirection.getAxis().isHorizontal() && !state.getValue(VineBlock.getPropertyForFace(enumdirection)).booleanValue()) {
                 if (this.canSpread(world, pos)) {
                     blockposition2 = pos.relative(enumdirection);
                     iblockdata1 = world.getBlockState(blockposition2);
                     if (iblockdata1.isAir()) {
                         enumdirection1 = enumdirection.getClockWise();
                         Direction enumdirection2 = enumdirection.getCounterClockWise();
-                        boolean flag = ((Boolean) state.getValue(VineBlock.getPropertyForFace(enumdirection1))).booleanValue();
-                        boolean flag1 = ((Boolean) state.getValue(VineBlock.getPropertyForFace(enumdirection2))).booleanValue();
+                        boolean flag = state.getValue(VineBlock.getPropertyForFace(enumdirection1)).booleanValue();
+                        boolean flag1 = state.getValue(VineBlock.getPropertyForFace(enumdirection2)).booleanValue();
                         BlockPos blockposition3 = blockposition2.relative(enumdirection1);
                         BlockPos blockposition4 = blockposition2.relative(enumdirection2);
 
@@ -199,30 +199,30 @@ public class VineBlock extends Block {
                         BlockPos source = pos;
 
                         if (flag && VineBlock.isAcceptableNeighbour(world, blockposition3, enumdirection1)) {
-                            CraftEventFactory.handleBlockSpreadEvent(world, source, blockposition2, (BlockState) this.defaultBlockState().setValue(VineBlock.getPropertyForFace(enumdirection1), Boolean.TRUE), 2);
+                            CraftEventFactory.handleBlockSpreadEvent(world, source, blockposition2, this.defaultBlockState().setValue(VineBlock.getPropertyForFace(enumdirection1), Boolean.TRUE), 2);
                         } else if (flag1 && VineBlock.isAcceptableNeighbour(world, blockposition4, enumdirection2)) {
-                            CraftEventFactory.handleBlockSpreadEvent(world, source, blockposition2, (BlockState) this.defaultBlockState().setValue(VineBlock.getPropertyForFace(enumdirection2), Boolean.TRUE), 2);
+                            CraftEventFactory.handleBlockSpreadEvent(world, source, blockposition2, this.defaultBlockState().setValue(VineBlock.getPropertyForFace(enumdirection2), Boolean.TRUE), 2);
                         } else {
                             Direction enumdirection3 = enumdirection.getOpposite();
 
                             if (flag && world.isEmptyBlock(blockposition3) && VineBlock.isAcceptableNeighbour(world, pos.relative(enumdirection1), enumdirection3)) {
-                                CraftEventFactory.handleBlockSpreadEvent(world, source, blockposition3, (BlockState) this.defaultBlockState().setValue(VineBlock.getPropertyForFace(enumdirection3), Boolean.TRUE), 2);
+                                CraftEventFactory.handleBlockSpreadEvent(world, source, blockposition3, this.defaultBlockState().setValue(VineBlock.getPropertyForFace(enumdirection3), Boolean.TRUE), 2);
                             } else if (flag1 && world.isEmptyBlock(blockposition4) && VineBlock.isAcceptableNeighbour(world, pos.relative(enumdirection2), enumdirection3)) {
-                                CraftEventFactory.handleBlockSpreadEvent(world, source, blockposition4, (BlockState) this.defaultBlockState().setValue(VineBlock.getPropertyForFace(enumdirection3), Boolean.TRUE), 2);
+                                CraftEventFactory.handleBlockSpreadEvent(world, source, blockposition4, this.defaultBlockState().setValue(VineBlock.getPropertyForFace(enumdirection3), Boolean.TRUE), 2);
                             } else if ((double) random.nextFloat() < 0.05D && VineBlock.isAcceptableNeighbour(world, blockposition2.above(), Direction.UP)) {
-                                CraftEventFactory.handleBlockSpreadEvent(world, source, blockposition2, (BlockState) this.defaultBlockState().setValue(VineBlock.UP, Boolean.TRUE), 2);
+                                CraftEventFactory.handleBlockSpreadEvent(world, source, blockposition2, this.defaultBlockState().setValue(VineBlock.UP, Boolean.TRUE), 2);
                             }
                             // CraftBukkit end
                         }
                     } else if (VineBlock.isAcceptableNeighbour(world, blockposition2, enumdirection)) {
-                        world.setBlock(pos, (BlockState) state.setValue(VineBlock.getPropertyForFace(enumdirection), Boolean.TRUE), 2);
+                        world.setBlock(pos, state.setValue(VineBlock.getPropertyForFace(enumdirection), Boolean.TRUE), 2);
                     }
 
                 }
             } else {
                 if (enumdirection == Direction.UP && pos.getY() < world.getMaxBuildHeight() - 1) {
                     if (this.canSupportAtFace(world, pos, enumdirection)) {
-                        world.setBlock(pos, (BlockState) state.setValue(VineBlock.UP, Boolean.TRUE), 2);
+                        world.setBlock(pos, state.setValue(VineBlock.UP, Boolean.TRUE), 2);
                         return;
                     }
 
@@ -237,7 +237,7 @@ public class VineBlock extends Block {
                         while (iterator.hasNext()) {
                             enumdirection1 = (Direction) iterator.next();
                             if (random.nextBoolean() || !VineBlock.isAcceptableNeighbour(world, blockposition1.relative(enumdirection1), enumdirection1)) {
-                                iblockdata2 = (BlockState) iblockdata2.setValue(VineBlock.getPropertyForFace(enumdirection1), Boolean.FALSE);
+                                iblockdata2 = iblockdata2.setValue(VineBlock.getPropertyForFace(enumdirection1), Boolean.FALSE);
                             }
                         }
 
@@ -252,7 +252,7 @@ public class VineBlock extends Block {
                 if (pos.getY() > world.getMinBuildHeight()) {
                     blockposition2 = pos.below();
                     iblockdata1 = world.getBlockState(blockposition2);
-                    if (iblockdata1.isAir() || iblockdata1.is((Block) this)) {
+                    if (iblockdata1.isAir() || iblockdata1.is(this)) {
                         BlockState iblockdata3 = iblockdata1.isAir() ? this.defaultBlockState() : iblockdata1;
                         BlockState iblockdata4 = this.copyRandomFaces(state, iblockdata3, random);
 
@@ -275,8 +275,8 @@ public class VineBlock extends Block {
             if (random.nextBoolean()) {
                 BooleanProperty blockstateboolean = VineBlock.getPropertyForFace(enumdirection);
 
-                if (((Boolean) above.getValue(blockstateboolean)).booleanValue()) {
-                    state = (BlockState) state.setValue(blockstateboolean, Boolean.TRUE);
+                if (above.getValue(blockstateboolean).booleanValue()) {
+                    state = state.setValue(blockstateboolean, Boolean.TRUE);
                 }
             }
         }
@@ -285,7 +285,7 @@ public class VineBlock extends Block {
     }
 
     private boolean hasHorizontalConnection(BlockState state) {
-        return ((Boolean) state.getValue(VineBlock.NORTH)).booleanValue() || ((Boolean) state.getValue(VineBlock.EAST)).booleanValue() || ((Boolean) state.getValue(VineBlock.SOUTH)).booleanValue() || ((Boolean) state.getValue(VineBlock.WEST)).booleanValue();
+        return state.getValue(VineBlock.NORTH).booleanValue() || state.getValue(VineBlock.EAST).booleanValue() || state.getValue(VineBlock.SOUTH).booleanValue() || state.getValue(VineBlock.WEST).booleanValue();
     }
 
     private boolean canSpread(BlockGetter world, BlockPos pos) {
@@ -297,7 +297,7 @@ public class VineBlock extends Block {
         while (iterator.hasNext()) {
             BlockPos blockposition1 = (BlockPos) iterator.next();
 
-            if (world.getBlockState(blockposition1).is((Block) this)) {
+            if (world.getBlockState(blockposition1).is(this)) {
                 --i;
                 if (i <= 0) {
                     return false;
@@ -312,14 +312,14 @@ public class VineBlock extends Block {
     public boolean canBeReplaced(BlockState state, BlockPlaceContext context) {
         BlockState iblockdata1 = context.getLevel().getBlockState(context.getClickedPos());
 
-        return iblockdata1.is((Block) this) ? this.countFaces(iblockdata1) < VineBlock.PROPERTY_BY_DIRECTION.size() : super.canBeReplaced(state, context);
+        return iblockdata1.is(this) ? this.countFaces(iblockdata1) < VineBlock.PROPERTY_BY_DIRECTION.size() : super.canBeReplaced(state, context);
     }
 
     @Nullable
     @Override
     public BlockState getStateForPlacement(BlockPlaceContext ctx) {
         BlockState iblockdata = ctx.getLevel().getBlockState(ctx.getClickedPos());
-        boolean flag = iblockdata.is((Block) this);
+        boolean flag = iblockdata.is(this);
         BlockState iblockdata1 = flag ? iblockdata : this.defaultBlockState();
         Direction[] aenumdirection = ctx.getNearestLookingDirections();
         int i = aenumdirection.length;
@@ -329,10 +329,10 @@ public class VineBlock extends Block {
 
             if (enumdirection != Direction.DOWN) {
                 BooleanProperty blockstateboolean = VineBlock.getPropertyForFace(enumdirection);
-                boolean flag1 = flag && ((Boolean) iblockdata.getValue(blockstateboolean)).booleanValue();
+                boolean flag1 = flag && iblockdata.getValue(blockstateboolean).booleanValue();
 
                 if (!flag1 && this.canSupportAtFace(ctx.getLevel(), ctx.getClickedPos(), enumdirection)) {
-                    return (BlockState) iblockdata1.setValue(blockstateboolean, Boolean.TRUE);
+                    return iblockdata1.setValue(blockstateboolean, Boolean.TRUE);
                 }
             }
         }
@@ -349,11 +349,11 @@ public class VineBlock extends Block {
     public BlockState rotate(BlockState state, Rotation rotation) {
         switch (rotation) {
             case CLOCKWISE_180:
-                return (BlockState) ((BlockState) ((BlockState) ((BlockState) state.setValue(VineBlock.NORTH, (Boolean) state.getValue(VineBlock.SOUTH))).setValue(VineBlock.EAST, (Boolean) state.getValue(VineBlock.WEST))).setValue(VineBlock.SOUTH, (Boolean) state.getValue(VineBlock.NORTH))).setValue(VineBlock.WEST, (Boolean) state.getValue(VineBlock.EAST));
+                return state.setValue(VineBlock.NORTH, state.getValue(VineBlock.SOUTH)).setValue(VineBlock.EAST, state.getValue(VineBlock.WEST)).setValue(VineBlock.SOUTH, state.getValue(VineBlock.NORTH)).setValue(VineBlock.WEST, state.getValue(VineBlock.EAST));
             case COUNTERCLOCKWISE_90:
-                return (BlockState) ((BlockState) ((BlockState) ((BlockState) state.setValue(VineBlock.NORTH, (Boolean) state.getValue(VineBlock.EAST))).setValue(VineBlock.EAST, (Boolean) state.getValue(VineBlock.SOUTH))).setValue(VineBlock.SOUTH, (Boolean) state.getValue(VineBlock.WEST))).setValue(VineBlock.WEST, (Boolean) state.getValue(VineBlock.NORTH));
+                return state.setValue(VineBlock.NORTH, state.getValue(VineBlock.EAST)).setValue(VineBlock.EAST, state.getValue(VineBlock.SOUTH)).setValue(VineBlock.SOUTH, state.getValue(VineBlock.WEST)).setValue(VineBlock.WEST, state.getValue(VineBlock.NORTH));
             case CLOCKWISE_90:
-                return (BlockState) ((BlockState) ((BlockState) ((BlockState) state.setValue(VineBlock.NORTH, (Boolean) state.getValue(VineBlock.WEST))).setValue(VineBlock.EAST, (Boolean) state.getValue(VineBlock.NORTH))).setValue(VineBlock.SOUTH, (Boolean) state.getValue(VineBlock.EAST))).setValue(VineBlock.WEST, (Boolean) state.getValue(VineBlock.SOUTH));
+                return state.setValue(VineBlock.NORTH, state.getValue(VineBlock.WEST)).setValue(VineBlock.EAST, state.getValue(VineBlock.NORTH)).setValue(VineBlock.SOUTH, state.getValue(VineBlock.EAST)).setValue(VineBlock.WEST, state.getValue(VineBlock.SOUTH));
             default:
                 return state;
         }
@@ -363,15 +363,15 @@ public class VineBlock extends Block {
     public BlockState mirror(BlockState state, Mirror mirror) {
         switch (mirror) {
             case LEFT_RIGHT:
-                return (BlockState) ((BlockState) state.setValue(VineBlock.NORTH, (Boolean) state.getValue(VineBlock.SOUTH))).setValue(VineBlock.SOUTH, (Boolean) state.getValue(VineBlock.NORTH));
+                return state.setValue(VineBlock.NORTH, state.getValue(VineBlock.SOUTH)).setValue(VineBlock.SOUTH, state.getValue(VineBlock.NORTH));
             case FRONT_BACK:
-                return (BlockState) ((BlockState) state.setValue(VineBlock.EAST, (Boolean) state.getValue(VineBlock.WEST))).setValue(VineBlock.WEST, (Boolean) state.getValue(VineBlock.EAST));
+                return state.setValue(VineBlock.EAST, state.getValue(VineBlock.WEST)).setValue(VineBlock.WEST, state.getValue(VineBlock.EAST));
             default:
                 return super.mirror(state, mirror);
         }
     }
 
     public static BooleanProperty getPropertyForFace(Direction direction) {
-        return (BooleanProperty) VineBlock.PROPERTY_BY_DIRECTION.get(direction);
+        return VineBlock.PROPERTY_BY_DIRECTION.get(direction);
     }
 }
diff --git a/src/main/java/net/minecraft/world/level/block/WebBlock.java b/src/main/java/net/minecraft/world/level/block/WebBlock.java
index 763fa221c562e96c2abd09c7055e91a86ac03d43..e63ea315872021308d14c4d83a1022ea64730862 100644
--- a/src/main/java/net/minecraft/world/level/block/WebBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/WebBlock.java
@@ -15,6 +15,6 @@ public class WebBlock extends Block {
     @Override
     public void entityInside(BlockState state, Level world, BlockPos pos, Entity entity) {
         if (!new io.papermc.paper.event.entity.EntityInsideBlockEvent(entity.getBukkitEntity(), org.bukkit.craftbukkit.block.CraftBlock.at(world, pos)).callEvent()) { return; } // Paper
-        entity.makeStuckInBlock(state, new Vec3(0.25D, (double)0.05F, 0.25D));
+        entity.makeStuckInBlock(state, new Vec3(0.25D, 0.05F, 0.25D));
     }
 }
diff --git a/src/main/java/net/minecraft/world/level/block/WeightedPressurePlateBlock.java b/src/main/java/net/minecraft/world/level/block/WeightedPressurePlateBlock.java
index 6ea2fab19b73fa9679cf187d5fda93132f9d955e..7949bd8f8f5ebd71a4f3e0250dc4276c8b0850b3 100644
--- a/src/main/java/net/minecraft/world/level/block/WeightedPressurePlateBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/WeightedPressurePlateBlock.java
@@ -24,7 +24,7 @@ public class WeightedPressurePlateBlock extends BasePressurePlateBlock {
 
     protected WeightedPressurePlateBlock(int weight, BlockBehaviour.Properties settings, SoundEvent depressSound, SoundEvent pressSound) {
         super(settings);
-        this.registerDefaultState((BlockState) ((BlockState) this.stateDefinition.any()).setValue(WeightedPressurePlateBlock.POWER, Integer.valueOf(0)));
+        this.registerDefaultState(this.stateDefinition.any().setValue(WeightedPressurePlateBlock.POWER, Integer.valueOf(0)));
         this.maxWeight = weight;
         this.soundOff = depressSound;
         this.soundOn = pressSound;
@@ -69,22 +69,22 @@ public class WeightedPressurePlateBlock extends BasePressurePlateBlock {
 
     @Override
     protected void playOnSound(LevelAccessor world, BlockPos pos) {
-        world.playSound((Player) null, pos, this.soundOn, SoundSource.BLOCKS);
+        world.playSound(null, pos, this.soundOn, SoundSource.BLOCKS);
     }
 
     @Override
     protected void playOffSound(LevelAccessor world, BlockPos pos) {
-        world.playSound((Player) null, pos, this.soundOff, SoundSource.BLOCKS);
+        world.playSound(null, pos, this.soundOff, SoundSource.BLOCKS);
     }
 
     @Override
     protected int getSignalForState(BlockState state) {
-        return ((Integer) state.getValue(WeightedPressurePlateBlock.POWER)).intValue();
+        return state.getValue(WeightedPressurePlateBlock.POWER).intValue();
     }
 
     @Override
     protected BlockState setSignalForState(BlockState state, int rsOut) {
-        return (BlockState) state.setValue(WeightedPressurePlateBlock.POWER, Integer.valueOf(rsOut));
+        return state.setValue(WeightedPressurePlateBlock.POWER, Integer.valueOf(rsOut));
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/WitherSkullBlock.java b/src/main/java/net/minecraft/world/level/block/WitherSkullBlock.java
index b91effe91dad2e1aeea0ea31140f7432833b343f..0d31551db062e7f88b02026710f1865c67ae4e0d 100644
--- a/src/main/java/net/minecraft/world/level/block/WitherSkullBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/WitherSkullBlock.java
@@ -62,7 +62,7 @@ public class WitherSkullBlock extends SkullBlock {
                 BlockPattern.BlockPatternMatch shapedetector_shapedetectorcollection = WitherSkullBlock.getOrCreateWitherFull().find(world, pos);
 
                 if (shapedetector_shapedetectorcollection != null) {
-                    WitherBoss entitywither = (WitherBoss) EntityType.WITHER.create(world);
+                    WitherBoss entitywither = EntityType.WITHER.create(world);
 
                     if (entitywither != null) {
                         // BlockPumpkinCarved.clearPatternBlocks(world, shapedetector_shapedetectorcollection); // CraftBukkit - move down
@@ -82,7 +82,7 @@ public class WitherSkullBlock extends SkullBlock {
                         while (iterator.hasNext()) {
                             ServerPlayer entityplayer = (ServerPlayer) iterator.next();
 
-                            CriteriaTriggers.SUMMONED_ENTITY.trigger(entityplayer, (Entity) entitywither);
+                            CriteriaTriggers.SUMMONED_ENTITY.trigger(entityplayer, entitywither);
                         }
 
                         // world.addFreshEntity(entitywither); // CraftBukkit - moved up
diff --git a/src/main/java/net/minecraft/world/level/block/entity/AbstractFurnaceBlockEntity.java b/src/main/java/net/minecraft/world/level/block/entity/AbstractFurnaceBlockEntity.java
index 4415424206dcc1c4692ebab7daece792a9a61c83..1535625204036abd3a69c06e372bc65535bd951b 100644
--- a/src/main/java/net/minecraft/world/level/block/entity/AbstractFurnaceBlockEntity.java
+++ b/src/main/java/net/minecraft/world/level/block/entity/AbstractFurnaceBlockEntity.java
@@ -141,11 +141,11 @@ public abstract class AbstractFurnaceBlockEntity extends BaseContainerBlockEntit
         // Paper end
         Map<Item, Integer> map = Maps.newLinkedHashMap();
 
-        AbstractFurnaceBlockEntity.add(map, (ItemLike) Items.LAVA_BUCKET, 20000);
-        AbstractFurnaceBlockEntity.add(map, (ItemLike) Blocks.COAL_BLOCK, 16000);
-        AbstractFurnaceBlockEntity.add(map, (ItemLike) Items.BLAZE_ROD, 2400);
-        AbstractFurnaceBlockEntity.add(map, (ItemLike) Items.COAL, 1600);
-        AbstractFurnaceBlockEntity.add(map, (ItemLike) Items.CHARCOAL, 1600);
+        AbstractFurnaceBlockEntity.add(map, Items.LAVA_BUCKET, 20000);
+        AbstractFurnaceBlockEntity.add(map, Blocks.COAL_BLOCK, 16000);
+        AbstractFurnaceBlockEntity.add(map, Items.BLAZE_ROD, 2400);
+        AbstractFurnaceBlockEntity.add(map, Items.COAL, 1600);
+        AbstractFurnaceBlockEntity.add(map, Items.CHARCOAL, 1600);
         AbstractFurnaceBlockEntity.add(map, ItemTags.LOGS, 300);
         AbstractFurnaceBlockEntity.add(map, ItemTags.BAMBOO_BLOCKS, 300);
         AbstractFurnaceBlockEntity.add(map, ItemTags.PLANKS, 300);
@@ -168,38 +168,38 @@ public abstract class AbstractFurnaceBlockEntity extends BaseContainerBlockEntit
         AbstractFurnaceBlockEntity.add(map, (ItemLike) Blocks.CRAFTING_TABLE, 300);
         AbstractFurnaceBlockEntity.add(map, (ItemLike) Blocks.DAYLIGHT_DETECTOR, 300);
         AbstractFurnaceBlockEntity.add(map, ItemTags.BANNERS, 300);
-        AbstractFurnaceBlockEntity.add(map, (ItemLike) Items.BOW, 300);
-        AbstractFurnaceBlockEntity.add(map, (ItemLike) Items.FISHING_ROD, 300);
-        AbstractFurnaceBlockEntity.add(map, (ItemLike) Blocks.LADDER, 300);
+        AbstractFurnaceBlockEntity.add(map, Items.BOW, 300);
+        AbstractFurnaceBlockEntity.add(map, Items.FISHING_ROD, 300);
+        AbstractFurnaceBlockEntity.add(map, Blocks.LADDER, 300);
         AbstractFurnaceBlockEntity.add(map, ItemTags.SIGNS, 200);
         AbstractFurnaceBlockEntity.add(map, ItemTags.HANGING_SIGNS, 800);
-        AbstractFurnaceBlockEntity.add(map, (ItemLike) Items.WOODEN_SHOVEL, 200);
-        AbstractFurnaceBlockEntity.add(map, (ItemLike) Items.WOODEN_SWORD, 200);
-        AbstractFurnaceBlockEntity.add(map, (ItemLike) Items.WOODEN_HOE, 200);
-        AbstractFurnaceBlockEntity.add(map, (ItemLike) Items.WOODEN_AXE, 200);
-        AbstractFurnaceBlockEntity.add(map, (ItemLike) Items.WOODEN_PICKAXE, 200);
+        AbstractFurnaceBlockEntity.add(map, Items.WOODEN_SHOVEL, 200);
+        AbstractFurnaceBlockEntity.add(map, Items.WOODEN_SWORD, 200);
+        AbstractFurnaceBlockEntity.add(map, Items.WOODEN_HOE, 200);
+        AbstractFurnaceBlockEntity.add(map, Items.WOODEN_AXE, 200);
+        AbstractFurnaceBlockEntity.add(map, Items.WOODEN_PICKAXE, 200);
         AbstractFurnaceBlockEntity.add(map, ItemTags.WOODEN_DOORS, 200);
         AbstractFurnaceBlockEntity.add(map, ItemTags.BOATS, 1200);
         AbstractFurnaceBlockEntity.add(map, ItemTags.WOOL, 100);
         AbstractFurnaceBlockEntity.add(map, ItemTags.WOODEN_BUTTONS, 100);
-        AbstractFurnaceBlockEntity.add(map, (ItemLike) Items.STICK, 100);
+        AbstractFurnaceBlockEntity.add(map, Items.STICK, 100);
         AbstractFurnaceBlockEntity.add(map, ItemTags.SAPLINGS, 100);
-        AbstractFurnaceBlockEntity.add(map, (ItemLike) Items.BOWL, 100);
+        AbstractFurnaceBlockEntity.add(map, Items.BOWL, 100);
         AbstractFurnaceBlockEntity.add(map, ItemTags.WOOL_CARPETS, 67);
-        AbstractFurnaceBlockEntity.add(map, (ItemLike) Blocks.DRIED_KELP_BLOCK, 4001);
-        AbstractFurnaceBlockEntity.add(map, (ItemLike) Items.CROSSBOW, 300);
-        AbstractFurnaceBlockEntity.add(map, (ItemLike) Blocks.BAMBOO, 50);
-        AbstractFurnaceBlockEntity.add(map, (ItemLike) Blocks.DEAD_BUSH, 100);
-        AbstractFurnaceBlockEntity.add(map, (ItemLike) Blocks.SCAFFOLDING, 50);
-        AbstractFurnaceBlockEntity.add(map, (ItemLike) Blocks.LOOM, 300);
-        AbstractFurnaceBlockEntity.add(map, (ItemLike) Blocks.BARREL, 300);
-        AbstractFurnaceBlockEntity.add(map, (ItemLike) Blocks.CARTOGRAPHY_TABLE, 300);
-        AbstractFurnaceBlockEntity.add(map, (ItemLike) Blocks.FLETCHING_TABLE, 300);
-        AbstractFurnaceBlockEntity.add(map, (ItemLike) Blocks.SMITHING_TABLE, 300);
-        AbstractFurnaceBlockEntity.add(map, (ItemLike) Blocks.COMPOSTER, 300);
-        AbstractFurnaceBlockEntity.add(map, (ItemLike) Blocks.AZALEA, 100);
-        AbstractFurnaceBlockEntity.add(map, (ItemLike) Blocks.FLOWERING_AZALEA, 100);
-        AbstractFurnaceBlockEntity.add(map, (ItemLike) Blocks.MANGROVE_ROOTS, 300);
+        AbstractFurnaceBlockEntity.add(map, Blocks.DRIED_KELP_BLOCK, 4001);
+        AbstractFurnaceBlockEntity.add(map, Items.CROSSBOW, 300);
+        AbstractFurnaceBlockEntity.add(map, Blocks.BAMBOO, 50);
+        AbstractFurnaceBlockEntity.add(map, Blocks.DEAD_BUSH, 100);
+        AbstractFurnaceBlockEntity.add(map, Blocks.SCAFFOLDING, 50);
+        AbstractFurnaceBlockEntity.add(map, Blocks.LOOM, 300);
+        AbstractFurnaceBlockEntity.add(map, Blocks.BARREL, 300);
+        AbstractFurnaceBlockEntity.add(map, Blocks.CARTOGRAPHY_TABLE, 300);
+        AbstractFurnaceBlockEntity.add(map, Blocks.FLETCHING_TABLE, 300);
+        AbstractFurnaceBlockEntity.add(map, Blocks.SMITHING_TABLE, 300);
+        AbstractFurnaceBlockEntity.add(map, Blocks.COMPOSTER, 300);
+        AbstractFurnaceBlockEntity.add(map, Blocks.AZALEA, 100);
+        AbstractFurnaceBlockEntity.add(map, Blocks.FLOWERING_AZALEA, 100);
+        AbstractFurnaceBlockEntity.add(map, Blocks.MANGROVE_ROOTS, 300);
         // Paper start - cache burn durations
         cachedBurnDurations = com.google.common.collect.ImmutableMap.copyOf(map);
         return cachedBurnDurations;
@@ -250,8 +250,8 @@ public abstract class AbstractFurnaceBlockEntity extends BaseContainerBlockEntit
         while (iterator.hasNext()) {
             Holder<Item> holder = (Holder) iterator.next();
 
-            if (!AbstractFurnaceBlockEntity.isNeverAFurnaceFuel((Item) holder.value())) {
-                fuelTimes.put((Item) holder.value(), Integer.valueOf(fuelTime));
+            if (!AbstractFurnaceBlockEntity.isNeverAFurnaceFuel(holder.value())) {
+                fuelTimes.put(holder.value(), Integer.valueOf(fuelTime));
             }
         }
 
@@ -262,7 +262,7 @@ public abstract class AbstractFurnaceBlockEntity extends BaseContainerBlockEntit
 
         if (AbstractFurnaceBlockEntity.isNeverAFurnaceFuel(item1)) {
             if (SharedConstants.IS_RUNNING_IN_IDE) {
-                throw (IllegalStateException) Util.pauseInIde(new IllegalStateException("A developer tried to explicitly make fire resistant item " + item1.getName((ItemStack) null).getString() + " a furnace fuel. That will not work!"));
+                throw Util.pauseInIde(new IllegalStateException("A developer tried to explicitly make fire resistant item " + item1.getName(null).getString() + " a furnace fuel. That will not work!"));
             }
         } else {
             fuelTimes.put(item1, Integer.valueOf(fuelTime));
@@ -281,7 +281,7 @@ public abstract class AbstractFurnaceBlockEntity extends BaseContainerBlockEntit
         this.litTime = nbt.getShort("BurnTime");
         this.cookingProgress = nbt.getShort("CookTime");
         this.cookingTotalTime = nbt.getShort("CookTimeTotal");
-        this.litDuration = this.getBurnDuration((ItemStack) this.items.get(1));
+        this.litDuration = this.getBurnDuration(this.items.get(1));
         CompoundTag nbttagcompound1 = nbt.getCompound("RecipesUsed");
         Iterator iterator = nbttagcompound1.getAllKeys().iterator();
 
@@ -322,19 +322,19 @@ public abstract class AbstractFurnaceBlockEntity extends BaseContainerBlockEntit
             --blockEntity.litTime;
         }
 
-        ItemStack itemstack = (ItemStack) blockEntity.items.get(1);
-        boolean flag2 = !((ItemStack) blockEntity.items.get(0)).isEmpty();
+        ItemStack itemstack = blockEntity.items.get(1);
+        boolean flag2 = !blockEntity.items.get(0).isEmpty();
         boolean flag3 = !itemstack.isEmpty();
 
         if (!blockEntity.isLit() && (!flag3 || !flag2)) {
             if (!blockEntity.isLit() && blockEntity.cookingProgress > 0) {
-                blockEntity.cookingProgress = Mth.clamp(blockEntity.cookingProgress - 2, (int) 0, blockEntity.cookingTotalTime);
+                blockEntity.cookingProgress = Mth.clamp(blockEntity.cookingProgress - 2, 0, blockEntity.cookingTotalTime);
             }
         } else {
             Recipe irecipe;
 
             if (flag2) {
-                irecipe = (Recipe) blockEntity.quickCheck.getRecipeFor(blockEntity, world).orElse(null); // CraftBukkit - decompile error
+                irecipe = blockEntity.quickCheck.getRecipeFor(blockEntity, world).orElse(null); // CraftBukkit - decompile error
             } else {
                 irecipe = null;
             }
@@ -400,7 +400,7 @@ public abstract class AbstractFurnaceBlockEntity extends BaseContainerBlockEntit
 
         if (flag != blockEntity.isLit()) {
             flag1 = true;
-            state = (BlockState) state.setValue(AbstractFurnaceBlock.LIT, Boolean.valueOf(blockEntity.isLit()));
+            state = state.setValue(AbstractFurnaceBlock.LIT, Boolean.valueOf(blockEntity.isLit()));
             world.setBlock(pos, state, 3);
         }
 
@@ -411,13 +411,13 @@ public abstract class AbstractFurnaceBlockEntity extends BaseContainerBlockEntit
     }
 
     private static boolean canBurn(@Nullable Recipe<?> recipe, NonNullList<ItemStack> slots, int count) {
-        if (!((ItemStack) slots.get(0)).isEmpty() && recipe != null) {
+        if (!slots.get(0).isEmpty() && recipe != null) {
             ItemStack itemstack = recipe.getResultItem();
 
             if (itemstack.isEmpty()) {
                 return false;
             } else {
-                ItemStack itemstack1 = (ItemStack) slots.get(2);
+                ItemStack itemstack1 = slots.get(2);
 
                 return itemstack1.isEmpty() ? true : (!itemstack1.sameItem(itemstack) ? false : (itemstack1.getCount() < count && itemstack1.getCount() < itemstack1.getMaxStackSize() ? true : itemstack1.getCount() < itemstack.getMaxStackSize()));
             }
@@ -428,9 +428,9 @@ public abstract class AbstractFurnaceBlockEntity extends BaseContainerBlockEntit
 
     private static boolean burn(Level world, BlockPos blockposition, @Nullable Recipe<?> irecipe, NonNullList<ItemStack> nonnulllist, int i) { // CraftBukkit
         if (irecipe != null && AbstractFurnaceBlockEntity.canBurn(irecipe, nonnulllist, i)) {
-            ItemStack itemstack = (ItemStack) nonnulllist.get(0);
+            ItemStack itemstack = nonnulllist.get(0);
             ItemStack itemstack1 = irecipe.getResultItem();
-            ItemStack itemstack2 = (ItemStack) nonnulllist.get(2);
+            ItemStack itemstack2 = nonnulllist.get(2);
 
             // CraftBukkit start - fire FurnaceSmeltEvent
             CraftItemStack source = CraftItemStack.asCraftMirror(itemstack);
@@ -465,7 +465,7 @@ public abstract class AbstractFurnaceBlockEntity extends BaseContainerBlockEntit
             */
             // CraftBukkit end
 
-            if (itemstack.is(Blocks.WET_SPONGE.asItem()) && !((ItemStack) nonnulllist.get(1)).isEmpty() && ((ItemStack) nonnulllist.get(1)).is(Items.BUCKET)) {
+            if (itemstack.is(Blocks.WET_SPONGE.asItem()) && !nonnulllist.get(1).isEmpty() && nonnulllist.get(1).is(Items.BUCKET)) {
                 nonnulllist.set(1, new ItemStack(Items.WATER_BUCKET));
             }
 
@@ -482,7 +482,7 @@ public abstract class AbstractFurnaceBlockEntity extends BaseContainerBlockEntit
         } else {
             Item item = fuel.getItem();
 
-            return ((Integer) AbstractFurnaceBlockEntity.getFuel().getOrDefault(item, Integer.valueOf(0))).intValue();
+            return AbstractFurnaceBlockEntity.getFuel().getOrDefault(item, Integer.valueOf(0)).intValue();
         }
     }
 
@@ -537,7 +537,7 @@ public abstract class AbstractFurnaceBlockEntity extends BaseContainerBlockEntit
 
     @Override
     public ItemStack getItem(int slot) {
-        return (ItemStack) this.items.get(slot);
+        return this.items.get(slot);
     }
 
     @Override
@@ -552,7 +552,7 @@ public abstract class AbstractFurnaceBlockEntity extends BaseContainerBlockEntit
 
     @Override
     public void setItem(int slot, ItemStack stack) {
-        ItemStack itemstack1 = (ItemStack) this.items.get(slot);
+        ItemStack itemstack1 = this.items.get(slot);
         boolean flag = !stack.isEmpty() && stack.sameItem(itemstack1) && ItemStack.tagMatches(stack, itemstack1);
 
         this.items.set(slot, stack);
@@ -580,7 +580,7 @@ public abstract class AbstractFurnaceBlockEntity extends BaseContainerBlockEntit
         } else if (slot != 1) {
             return true;
         } else {
-            ItemStack itemstack1 = (ItemStack) this.items.get(1);
+            ItemStack itemstack1 = this.items.get(1);
 
             return AbstractFurnaceBlockEntity.isFuel(stack) || stack.is(Items.BUCKET) && !itemstack1.is(Items.BUCKET);
         }
@@ -630,7 +630,7 @@ public abstract class AbstractFurnaceBlockEntity extends BaseContainerBlockEntit
         while (objectiterator.hasNext()) {
             Entry<ResourceLocation> entry = (Entry) objectiterator.next();
 
-            worldserver.getRecipeManager().byKey((ResourceLocation) entry.getKey()).ifPresent((irecipe) -> {
+            worldserver.getRecipeManager().byKey(entry.getKey()).ifPresent((irecipe) -> {
                 list.add(irecipe);
                 AbstractFurnaceBlockEntity.createExperience(worldserver, vec3d, entry.getIntValue(), ((AbstractCookingRecipe) irecipe).getExperience(), blockposition, entityplayer, itemstack, amount); // CraftBukkit
             });
diff --git a/src/main/java/net/minecraft/world/level/block/entity/BannerBlockEntity.java b/src/main/java/net/minecraft/world/level/block/entity/BannerBlockEntity.java
index 66e2137f9379e885294f2b9f67f7e35296792770..2d08d111eca5de3f4da61e061da48bdd95e23ee7 100644
--- a/src/main/java/net/minecraft/world/level/block/entity/BannerBlockEntity.java
+++ b/src/main/java/net/minecraft/world/level/block/entity/BannerBlockEntity.java
@@ -68,7 +68,7 @@ public class BannerBlockEntity extends BlockEntity implements Nameable {
 
     @Override
     public Component getName() {
-        return (Component) (this.name != null ? this.name : Component.translatable("block.minecraft.banner"));
+        return this.name != null ? this.name : Component.translatable("block.minecraft.banner");
     }
 
     @Nullable
diff --git a/src/main/java/net/minecraft/world/level/block/entity/BarrelBlockEntity.java b/src/main/java/net/minecraft/world/level/block/entity/BarrelBlockEntity.java
index d70c45e11183d8263544041a5ee2e9ca98c9e0e0..d40cd6b2ca3f4154a2c789cd6d694ba41e828c0e 100644
--- a/src/main/java/net/minecraft/world/level/block/entity/BarrelBlockEntity.java
+++ b/src/main/java/net/minecraft/world/level/block/entity/BarrelBlockEntity.java
@@ -165,15 +165,15 @@ public class BarrelBlockEntity extends RandomizableContainerBlockEntity {
     }
 
     public void updateBlockState(BlockState state, boolean open) {
-        this.level.setBlock(this.getBlockPos(), (BlockState) state.setValue(BarrelBlock.OPEN, Boolean.valueOf(open)), 3);
+        this.level.setBlock(this.getBlockPos(), state.setValue(BarrelBlock.OPEN, Boolean.valueOf(open)), 3);
     }
 
     public void playSound(BlockState state, SoundEvent soundEvent) {
-        Vec3i baseblockposition = ((Direction) state.getValue(BarrelBlock.FACING)).getNormal();
+        Vec3i baseblockposition = state.getValue(BarrelBlock.FACING).getNormal();
         double d0 = (double) this.worldPosition.getX() + 0.5D + (double) baseblockposition.getX() / 2.0D;
         double d1 = (double) this.worldPosition.getY() + 0.5D + (double) baseblockposition.getY() / 2.0D;
         double d2 = (double) this.worldPosition.getZ() + 0.5D + (double) baseblockposition.getZ() / 2.0D;
 
-        this.level.playSound((Player) null, d0, d1, d2, soundEvent, SoundSource.BLOCKS, 0.5F, this.level.random.nextFloat() * 0.1F + 0.9F);
+        this.level.playSound(null, d0, d1, d2, soundEvent, SoundSource.BLOCKS, 0.5F, this.level.random.nextFloat() * 0.1F + 0.9F);
     }
 }
diff --git a/src/main/java/net/minecraft/world/level/block/entity/BeaconBlockEntity.java b/src/main/java/net/minecraft/world/level/block/entity/BeaconBlockEntity.java
index 928625b5ab054ffa412be8a438f58291cc7a3cc0..9bf4855afac3e056db3d41ec3f2a11467e7f38b2 100644
--- a/src/main/java/net/minecraft/world/level/block/entity/BeaconBlockEntity.java
+++ b/src/main/java/net/minecraft/world/level/block/entity/BeaconBlockEntity.java
@@ -50,7 +50,7 @@ public class BeaconBlockEntity extends BlockEntity implements MenuProvider, Name
 
     private static final int MAX_LEVELS = 4;
     public static final MobEffect[][] BEACON_EFFECTS = new MobEffect[][]{{MobEffects.MOVEMENT_SPEED, MobEffects.DIG_SPEED}, {MobEffects.DAMAGE_RESISTANCE, MobEffects.JUMP}, {MobEffects.DAMAGE_BOOST}, {MobEffects.REGENERATION}};
-    private static final Set<MobEffect> VALID_EFFECTS = (Set) Arrays.stream(BeaconBlockEntity.BEACON_EFFECTS).flatMap(Arrays::stream).collect(Collectors.toSet());
+    private static final Set<MobEffect> VALID_EFFECTS = Arrays.stream(BeaconBlockEntity.BEACON_EFFECTS).flatMap(Arrays::stream).collect(Collectors.toSet());
     public static final int DATA_LEVELS = 0;
     public static final int DATA_PRIMARY = 1;
     public static final int DATA_SECONDARY = 2;
@@ -164,7 +164,7 @@ public class BeaconBlockEntity extends BlockEntity implements MenuProvider, Name
             blockposition1 = new BlockPos(i, blockEntity.lastCheckY + 1, k);
         }
 
-        BeaconBlockEntity.BeaconBeamSection tileentitybeacon_beaconcolortracker = blockEntity.checkingBeamSections.isEmpty() ? null : (BeaconBlockEntity.BeaconBeamSection) blockEntity.checkingBeamSections.get(blockEntity.checkingBeamSections.size() - 1);
+        BeaconBlockEntity.BeaconBeamSection tileentitybeacon_beaconcolortracker = blockEntity.checkingBeamSections.isEmpty() ? null : blockEntity.checkingBeamSections.get(blockEntity.checkingBeamSections.size() - 1);
         int l = world.getHeight(Heightmap.Types.WORLD_SURFACE, i, k);
 
         int i1;
@@ -232,7 +232,7 @@ public class BeaconBlockEntity extends BlockEntity implements MenuProvider, Name
 
                 if (!flag && flag1) {
                     BeaconBlockEntity.playSound(world, pos, SoundEvents.BEACON_ACTIVATE);
-                    Iterator iterator = world.getEntitiesOfClass(ServerPlayer.class, (new AABB((double) i, (double) j, (double) k, (double) i, (double) (j - 4), (double) k)).inflate(10.0D, 5.0D, 10.0D)).iterator();
+                    Iterator iterator = world.getEntitiesOfClass(ServerPlayer.class, (new AABB(i, j, k, i, j - 4, k)).inflate(10.0D, 5.0D, 10.0D)).iterator();
 
                     while (iterator.hasNext()) {
                         ServerPlayer entityplayer = (ServerPlayer) iterator.next();
@@ -315,7 +315,7 @@ public class BeaconBlockEntity extends BlockEntity implements MenuProvider, Name
         {
             double d0 = blockEntity != null ? blockEntity.getEffectRange() : (i * 10 + 10);// Paper - custom beacon ranges
 
-            AABB axisalignedbb = (new AABB(blockposition)).inflate(d0).expandTowards(0.0D, (double) world.getHeight(), 0.0D);
+            AABB axisalignedbb = (new AABB(blockposition)).inflate(d0).expandTowards(0.0D, world.getHeight(), 0.0D);
             List<Player> list = world.getEntitiesOfClass(Player.class, axisalignedbb);
 
             return list;
@@ -360,7 +360,7 @@ public class BeaconBlockEntity extends BlockEntity implements MenuProvider, Name
     private static void applyEffects(Level world, BlockPos pos, int beaconLevel, @Nullable MobEffect primaryEffect, @Nullable MobEffect secondaryEffect, @Nullable BeaconBlockEntity blockEntity) {
         // Paper end
         if (!world.isClientSide && primaryEffect != null) {
-            double d0 = (double) (beaconLevel * 10 + 10);
+            double d0 = beaconLevel * 10 + 10;
             byte b0 = BeaconBlockEntity.getAmplification(beaconLevel, primaryEffect, secondaryEffect);
 
             int j = BeaconBlockEntity.getLevel(beaconLevel);
@@ -377,11 +377,11 @@ public class BeaconBlockEntity extends BlockEntity implements MenuProvider, Name
     // CraftBukkit end
 
     public static void playSound(Level world, BlockPos pos, SoundEvent sound) {
-        world.playSound((Player) null, pos, sound, SoundSource.BLOCKS, 1.0F, 1.0F);
+        world.playSound(null, pos, sound, SoundSource.BLOCKS, 1.0F, 1.0F);
     }
 
     public List<BeaconBlockEntity.BeaconBeamSection> getBeamSections() {
-        return (List) (this.levels == 0 ? ImmutableList.of() : this.beamSections);
+        return this.levels == 0 ? ImmutableList.of() : this.beamSections;
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/entity/BeehiveBlockEntity.java b/src/main/java/net/minecraft/world/level/block/entity/BeehiveBlockEntity.java
index e2ba7cee5bbfcd07238e76682c9443cff268d8f5..94caad95216df9365124aad2dc53beef742a3a80 100644
--- a/src/main/java/net/minecraft/world/level/block/entity/BeehiveBlockEntity.java
+++ b/src/main/java/net/minecraft/world/level/block/entity/BeehiveBlockEntity.java
@@ -52,7 +52,7 @@ public class BeehiveBlockEntity extends BlockEntity {
     @Override
     public void setChanged() {
         if (this.isFireNearby()) {
-            this.emptyAllLivingFromHive((Player) null, this.level.getBlockState(this.getBlockPos()), BeehiveBlockEntity.BeeReleaseStatus.EMERGENCY);
+            this.emptyAllLivingFromHive(null, this.level.getBlockState(this.getBlockPos()), BeehiveBlockEntity.BeeReleaseStatus.EMERGENCY);
         }
 
         super.setChanged();
@@ -145,7 +145,7 @@ public class BeehiveBlockEntity extends BlockEntity {
     }
     // Paper end
     public static int getHoneyLevel(BlockState state) {
-        return ((Integer) state.getValue(BeehiveBlock.HONEY_LEVEL)).intValue();
+        return state.getValue(BeehiveBlock.HONEY_LEVEL).intValue();
     }
 
     @VisibleForDebug
@@ -184,7 +184,7 @@ public class BeehiveBlockEntity extends BlockEntity {
 
                 BlockPos blockposition = this.getBlockPos();
 
-                this.level.playSound((Player) null, (double) blockposition.getX(), (double) blockposition.getY(), (double) blockposition.getZ(), SoundEvents.BEEHIVE_ENTER, SoundSource.BLOCKS, 1.0F, 1.0F);
+                this.level.playSound(null, blockposition.getX(), blockposition.getY(), blockposition.getZ(), SoundEvents.BEEHIVE_ENTER, SoundSource.BLOCKS, 1.0F, 1.0F);
                 this.level.gameEvent(GameEvent.BLOCK_CHANGE, blockposition, GameEvent.Context.of(entity, this.getBlockState()));
             }
 
@@ -212,7 +212,7 @@ public class BeehiveBlockEntity extends BlockEntity {
             BeehiveBlockEntity.removeIgnoredBeeTags(nbttagcompound);
             nbttagcompound.put("HivePos", NbtUtils.writeBlockPos(blockposition));
             nbttagcompound.putBoolean("NoGravity", true);
-            Direction enumdirection = (Direction) iblockdata.getValue(BeehiveBlock.FACING);
+            Direction enumdirection = iblockdata.getValue(BeehiveBlock.FACING);
             BlockPos blockposition2 = blockposition.relative(enumdirection);
             boolean flag = !world.getBlockState(blockposition2).getCollisionShape(world, blockposition2).isEmpty();
 
@@ -260,7 +260,7 @@ public class BeehiveBlockEntity extends BlockEntity {
                                             --j;
                                         }
 
-                                        world.setBlockAndUpdate(blockposition, (BlockState) iblockdata.setValue(BeehiveBlock.HONEY_LEVEL, Integer.valueOf(i + j)));
+                                        world.setBlockAndUpdate(blockposition, iblockdata.setValue(BeehiveBlock.HONEY_LEVEL, Integer.valueOf(i + j)));
                                     }
                                 }
                             }
@@ -281,7 +281,7 @@ public class BeehiveBlockEntity extends BlockEntity {
                              */ // CraftBukkit end
                         }
 
-                        world.playSound((Player) null, blockposition, SoundEvents.BEEHIVE_EXIT, SoundSource.BLOCKS, 1.0F, 1.0F);
+                        world.playSound(null, blockposition, SoundEvents.BEEHIVE_EXIT, SoundSource.BLOCKS, 1.0F, 1.0F);
                         world.gameEvent(GameEvent.BLOCK_CHANGE, blockposition, GameEvent.Context.of(entity, world.getBlockState(blockposition)));
                         return true; // return this.world.addFreshEntity(entity); // CraftBukkit - moved up
                     }
@@ -331,7 +331,7 @@ public class BeehiveBlockEntity extends BlockEntity {
             if (tileentitybeehive_hivebee.exitTickCounter > tileentitybeehive_hivebee.minOccupationTicks) { // Paper - use exitTickCounter
                 BeehiveBlockEntity.BeeReleaseStatus tileentitybeehive_releasestatus = tileentitybeehive_hivebee.entityData.getBoolean("HasNectar") ? BeehiveBlockEntity.BeeReleaseStatus.HONEY_DELIVERED : BeehiveBlockEntity.BeeReleaseStatus.BEE_RELEASED;
 
-                if (BeehiveBlockEntity.releaseOccupant(world, pos, state, tileentitybeehive_hivebee, (List) null, tileentitybeehive_releasestatus, flowerPos)) {
+                if (BeehiveBlockEntity.releaseOccupant(world, pos, state, tileentitybeehive_hivebee, null, tileentitybeehive_releasestatus, flowerPos)) {
                     flag = true;
                     iterator.remove();
                     // CraftBukkit start
@@ -353,10 +353,10 @@ public class BeehiveBlockEntity extends BlockEntity {
         BeehiveBlockEntity.tickOccupants(world, pos, state, blockEntity.stored, blockEntity.savedFlowerPos);
         if (!blockEntity.stored.isEmpty() && world.getRandom().nextDouble() < 0.005D) {
             double d0 = (double) pos.getX() + 0.5D;
-            double d1 = (double) pos.getY();
+            double d1 = pos.getY();
             double d2 = (double) pos.getZ() + 0.5D;
 
-            world.playSound((Player) null, d0, d1, d2, SoundEvents.BEEHIVE_WORK, SoundSource.BLOCKS, 1.0F, 1.0F);
+            world.playSound(null, d0, d1, d2, SoundEvents.BEEHIVE_WORK, SoundSource.BLOCKS, 1.0F, 1.0F);
         }
 
         DebugPackets.sendHiveInfo(world, pos, state, blockEntity);
diff --git a/src/main/java/net/minecraft/world/level/block/entity/BellBlockEntity.java b/src/main/java/net/minecraft/world/level/block/entity/BellBlockEntity.java
index 4cc44b51afeb526fe968b8e21a2c83389de63443..cd15e3052cc5fdf595be5596fa541251759ccfb8 100644
--- a/src/main/java/net/minecraft/world/level/block/entity/BellBlockEntity.java
+++ b/src/main/java/net/minecraft/world/level/block/entity/BellBlockEntity.java
@@ -71,7 +71,7 @@ public class BellBlockEntity extends BlockEntity {
 
         if (blockEntity.ticks >= 5 && blockEntity.resonationTicks == 0 && areRaidersNearby(pos, blockEntity.nearbyEntities)) {
             blockEntity.resonating = true;
-            world.playSound((Player)null, pos, SoundEvents.BELL_RESONATE, SoundSource.BLOCKS, 1.0F, 1.0F);
+            world.playSound(null, pos, SoundEvents.BELL_RESONATE, SoundSource.BLOCKS, 1.0F, 1.0F);
         }
 
         if (blockEntity.resonating) {
@@ -160,7 +160,7 @@ public class BellBlockEntity extends BlockEntity {
                 double h = (double)FastColor.ARGB32.red(l) / 255.0D;
                 double m = (double)FastColor.ARGB32.green(l) / 255.0D;
                 double n = (double)FastColor.ARGB32.blue(l) / 255.0D;
-                world.addParticle(ParticleTypes.ENTITY_EFFECT, e, (double)((float)pos.getY() + 0.5F), g, h, m, n);
+                world.addParticle(ParticleTypes.ENTITY_EFFECT, e, (float)pos.getY() + 0.5F, g, h, m, n);
             }
 
         });
diff --git a/src/main/java/net/minecraft/world/level/block/entity/BrewingStandBlockEntity.java b/src/main/java/net/minecraft/world/level/block/entity/BrewingStandBlockEntity.java
index 6c17d2fcd82f36216c932b7af05d4be6d5b12f49..c983362554445255cb10f52cae59920c768cdeef 100644
--- a/src/main/java/net/minecraft/world/level/block/entity/BrewingStandBlockEntity.java
+++ b/src/main/java/net/minecraft/world/level/block/entity/BrewingStandBlockEntity.java
@@ -147,7 +147,7 @@ public class BrewingStandBlockEntity extends BaseContainerBlockEntity implements
     }
 
     public static void serverTick(Level world, BlockPos pos, BlockState state, BrewingStandBlockEntity blockEntity) {
-        ItemStack itemstack = (ItemStack) blockEntity.items.get(4);
+        ItemStack itemstack = blockEntity.items.get(4);
 
         if (blockEntity.fuel <= 0 && itemstack.is(Items.BLAZE_POWDER)) {
             // CraftBukkit start
@@ -168,7 +168,7 @@ public class BrewingStandBlockEntity extends BaseContainerBlockEntity implements
 
         boolean flag = BrewingStandBlockEntity.isBrewable(blockEntity.items);
         boolean flag1 = blockEntity.brewTime > 0;
-        ItemStack itemstack1 = (ItemStack) blockEntity.items.get(3);
+        ItemStack itemstack1 = blockEntity.items.get(3);
 
         // CraftBukkit start - Use wall time instead of ticks for brewing
         int elapsedTicks = MinecraftServer.currentTick - blockEntity.lastTick;
@@ -204,7 +204,7 @@ public class BrewingStandBlockEntity extends BaseContainerBlockEntity implements
             }
 
             for (int i = 0; i < BrewingStandBlock.HAS_BOTTLE.length; ++i) {
-                iblockdata1 = (BlockState) iblockdata1.setValue(BrewingStandBlock.HAS_BOTTLE[i], Boolean.valueOf(aboolean[i]));
+                iblockdata1 = iblockdata1.setValue(BrewingStandBlock.HAS_BOTTLE[i], Boolean.valueOf(aboolean[i]));
             }
 
             world.setBlock(pos, iblockdata1, 2);
@@ -216,7 +216,7 @@ public class BrewingStandBlockEntity extends BaseContainerBlockEntity implements
         boolean[] aboolean = new boolean[3];
 
         for (int i = 0; i < 3; ++i) {
-            if (!((ItemStack) this.items.get(i)).isEmpty()) {
+            if (!this.items.get(i).isEmpty()) {
                 aboolean[i] = true;
             }
         }
@@ -225,7 +225,7 @@ public class BrewingStandBlockEntity extends BaseContainerBlockEntity implements
     }
 
     private static boolean isBrewable(NonNullList<ItemStack> slots) {
-        ItemStack itemstack = (ItemStack) slots.get(3);
+        ItemStack itemstack = slots.get(3);
 
         if (itemstack.isEmpty()) {
             return false;
@@ -233,7 +233,7 @@ public class BrewingStandBlockEntity extends BaseContainerBlockEntity implements
             return false;
         } else {
             for (int i = 0; i < 3; ++i) {
-                ItemStack itemstack1 = (ItemStack) slots.get(i);
+                ItemStack itemstack1 = slots.get(i);
 
                 if (!itemstack1.isEmpty() && PotionBrewing.hasMix(itemstack1, itemstack)) {
                     return true;
@@ -246,12 +246,12 @@ public class BrewingStandBlockEntity extends BaseContainerBlockEntity implements
 
     // CraftBukkit start
     private static void doBrew(Level world, BlockPos blockposition, NonNullList<ItemStack> nonnulllist, BrewingStandBlockEntity tileentitybrewingstand) {
-        ItemStack itemstack = (ItemStack) nonnulllist.get(3);
+        ItemStack itemstack = nonnulllist.get(3);
         InventoryHolder owner = tileentitybrewingstand.getOwner();
         List<org.bukkit.inventory.ItemStack> brewResults = new ArrayList<>(3);
 
         for (int i = 0; i < 3; ++i) {
-            brewResults.add(i, CraftItemStack.asCraftMirror(PotionBrewing.mix(itemstack, (ItemStack) nonnulllist.get(i))));
+            brewResults.add(i, CraftItemStack.asCraftMirror(PotionBrewing.mix(itemstack, nonnulllist.get(i))));
         }
 
         if (owner != null) {
@@ -280,7 +280,7 @@ public class BrewingStandBlockEntity extends BaseContainerBlockEntity implements
             if (itemstack.isEmpty()) {
                 itemstack = itemstack1;
             } else {
-                Containers.dropItemStack(world, (double) blockposition.getX(), (double) blockposition.getY(), (double) blockposition.getZ(), itemstack1);
+                Containers.dropItemStack(world, blockposition.getX(), blockposition.getY(), blockposition.getZ(), itemstack1);
             }
         }
 
@@ -307,7 +307,7 @@ public class BrewingStandBlockEntity extends BaseContainerBlockEntity implements
 
     @Override
     public ItemStack getItem(int slot) {
-        return slot >= 0 && slot < this.items.size() ? (ItemStack) this.items.get(slot) : ItemStack.EMPTY;
+        return slot >= 0 && slot < this.items.size() ? this.items.get(slot) : ItemStack.EMPTY;
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/entity/CampfireBlockEntity.java b/src/main/java/net/minecraft/world/level/block/entity/CampfireBlockEntity.java
index 87f58212026df00f28fb45334e7a1c0e1e4bb684..05dd74508fdc466ffac965634687146d2858f630 100644
--- a/src/main/java/net/minecraft/world/level/block/entity/CampfireBlockEntity.java
+++ b/src/main/java/net/minecraft/world/level/block/entity/CampfireBlockEntity.java
@@ -54,7 +54,7 @@ public class CampfireBlockEntity extends BlockEntity implements Clearable {
         boolean flag = false;
 
         for (int i = 0; i < campfire.items.size(); ++i) {
-            ItemStack itemstack = (ItemStack) campfire.items.get(i);
+            ItemStack itemstack = campfire.items.get(i);
 
             if (!itemstack.isEmpty()) {
                 flag = true;
@@ -65,7 +65,7 @@ public class CampfireBlockEntity extends BlockEntity implements Clearable {
                 if (campfire.cookingProgress[i] >= campfire.cookingTime[i]) {
                     SimpleContainer inventorysubcontainer = new SimpleContainer(itemstack);
                     Optional<CampfireCookingRecipe> recipe = campfire.quickCheck.getRecipeFor( inventorysubcontainer, world);
-                    ItemStack itemstack1 = (ItemStack) recipe.map((recipecampfire) -> {
+                    ItemStack itemstack1 = recipe.map((recipecampfire) -> {
                         // Paper end
                         return recipecampfire.assemble(inventorysubcontainer);
                     }).orElse(itemstack);
@@ -110,7 +110,7 @@ public class CampfireBlockEntity extends BlockEntity implements Clearable {
         for (int i = 0; i < campfire.items.size(); ++i) {
             if (campfire.cookingProgress[i] > 0) {
                 flag = true;
-                campfire.cookingProgress[i] = Mth.clamp(campfire.cookingProgress[i] - 2, (int) 0, campfire.cookingTime[i]);
+                campfire.cookingProgress[i] = Mth.clamp(campfire.cookingProgress[i] - 2, 0, campfire.cookingTime[i]);
             }
         }
 
@@ -126,14 +126,14 @@ public class CampfireBlockEntity extends BlockEntity implements Clearable {
 
         if (randomsource.nextFloat() < 0.11F) {
             for (i = 0; i < randomsource.nextInt(2) + 2; ++i) {
-                CampfireBlock.makeParticles(world, pos, ((Boolean) state.getValue(CampfireBlock.SIGNAL_FIRE)).booleanValue(), false);
+                CampfireBlock.makeParticles(world, pos, state.getValue(CampfireBlock.SIGNAL_FIRE).booleanValue(), false);
             }
         }
 
-        i = ((Direction) state.getValue(CampfireBlock.FACING)).get2DDataValue();
+        i = state.getValue(CampfireBlock.FACING).get2DDataValue();
 
         for (int j = 0; j < campfire.items.size(); ++j) {
-            if (!((ItemStack) campfire.items.get(j)).isEmpty() && randomsource.nextFloat() < 0.2F) {
+            if (!campfire.items.get(j).isEmpty() && randomsource.nextFloat() < 0.2F) {
                 Direction enumdirection = Direction.from2DDataValue(Math.floorMod(j + i, 4));
                 float f = 0.3125F;
                 double d0 = (double) pos.getX() + 0.5D - (double) ((float) enumdirection.getStepX() * 0.3125F) + (double) ((float) enumdirection.getClockWise().getStepX() * 0.3125F);
@@ -215,7 +215,7 @@ public class CampfireBlockEntity extends BlockEntity implements Clearable {
 
     public boolean placeFood(@Nullable Entity user, ItemStack stack, int cookTime) {
         for (int j = 0; j < this.items.size(); ++j) {
-            ItemStack itemstack1 = (ItemStack) this.items.get(j);
+            ItemStack itemstack1 = this.items.get(j);
 
             if (itemstack1.isEmpty()) {
                 this.cookingTime[j] = cookTime;
diff --git a/src/main/java/net/minecraft/world/level/block/entity/ChestBlockEntity.java b/src/main/java/net/minecraft/world/level/block/entity/ChestBlockEntity.java
index a71414397bd45ee7bcacfeef0041d80dfa25f114..2631c0eb2fe0f444711aadd7f76f77cf5a9c629d 100644
--- a/src/main/java/net/minecraft/world/level/block/entity/ChestBlockEntity.java
+++ b/src/main/java/net/minecraft/world/level/block/entity/ChestBlockEntity.java
@@ -136,7 +136,7 @@ public class ChestBlockEntity extends RandomizableContainerBlockEntity implement
     }
 
     public static void playSound(Level world, BlockPos pos, BlockState state, SoundEvent soundEvent) {
-        ChestType blockpropertychesttype = (ChestType) state.getValue(ChestBlock.TYPE);
+        ChestType blockpropertychesttype = state.getValue(ChestBlock.TYPE);
 
         if (blockpropertychesttype != ChestType.LEFT) {
             double d0 = (double) pos.getX() + 0.5D;
@@ -150,7 +150,7 @@ public class ChestBlockEntity extends RandomizableContainerBlockEntity implement
                 d2 += (double) enumdirection.getStepZ() * 0.5D;
             }
 
-            world.playSound((Player) null, d0, d1, d2, soundEvent, SoundSource.BLOCKS, 0.5F, world.random.nextFloat() * 0.1F + 0.9F);
+            world.playSound(null, d0, d1, d2, soundEvent, SoundSource.BLOCKS, 0.5F, world.random.nextFloat() * 0.1F + 0.9F);
         }
     }
 
diff --git a/src/main/java/net/minecraft/world/level/block/entity/CommandBlockEntity.java b/src/main/java/net/minecraft/world/level/block/entity/CommandBlockEntity.java
index b05fbc201ebc03df2ca8943b947f7c75aa1b7213..cdf9228b31754029171d7861eb543fcd91d4c294 100644
--- a/src/main/java/net/minecraft/world/level/block/entity/CommandBlockEntity.java
+++ b/src/main/java/net/minecraft/world/level/block/entity/CommandBlockEntity.java
@@ -52,7 +52,7 @@ public class CommandBlockEntity extends BlockEntity {
 
         @Override
         public CommandSourceStack createCommandSourceStack() {
-            return new CommandSourceStack(this, Vec3.atCenterOf(CommandBlockEntity.this.worldPosition), Vec2.ZERO, this.getLevel(), 2, this.getName().getString(), this.getName(), this.getLevel().getServer(), (Entity) null);
+            return new CommandSourceStack(this, Vec3.atCenterOf(CommandBlockEntity.this.worldPosition), Vec2.ZERO, this.getLevel(), 2, this.getName().getString(), this.getName(), this.getLevel().getServer(), null);
         }
     };
 
@@ -135,7 +135,7 @@ public class CommandBlockEntity extends BlockEntity {
     public boolean markConditionMet() {
         this.conditionMet = true;
         if (this.isConditional()) {
-            BlockPos blockposition = this.worldPosition.relative(((Direction) this.level.getBlockState(this.worldPosition).getValue(CommandBlock.FACING)).getOpposite());
+            BlockPos blockposition = this.worldPosition.relative(this.level.getBlockState(this.worldPosition).getValue(CommandBlock.FACING).getOpposite());
 
             if (this.level.getBlockState(blockposition).getBlock() instanceof CommandBlock) {
                 BlockEntity tileentity = this.level.getBlockEntity(blockposition);
@@ -158,7 +158,7 @@ public class CommandBlockEntity extends BlockEntity {
     public boolean isConditional() {
         BlockState iblockdata = this.level.getBlockState(this.getBlockPos());
 
-        return iblockdata.getBlock() instanceof CommandBlock ? ((Boolean) iblockdata.getValue(CommandBlock.CONDITIONAL)).booleanValue() : false;
+        return iblockdata.getBlock() instanceof CommandBlock ? iblockdata.getValue(CommandBlock.CONDITIONAL).booleanValue() : false;
     }
 
     public static enum Mode {
diff --git a/src/main/java/net/minecraft/world/level/block/entity/ConduitBlockEntity.java b/src/main/java/net/minecraft/world/level/block/entity/ConduitBlockEntity.java
index 68703fdfd17f3295dd37ea276f1cfcf9afee06e3..7eac6bd8ec6945679db4c3a02c0be6dab3a07030 100644
--- a/src/main/java/net/minecraft/world/level/block/entity/ConduitBlockEntity.java
+++ b/src/main/java/net/minecraft/world/level/block/entity/ConduitBlockEntity.java
@@ -115,7 +115,7 @@ public class ConduitBlockEntity extends BlockEntity {
             if (flag != blockEntity.isActive) {
                 SoundEvent soundeffect = flag ? SoundEvents.CONDUIT_ACTIVATE : SoundEvents.CONDUIT_DEACTIVATE;
 
-                world.playSound((Player) null, pos, soundeffect, SoundSource.BLOCKS, 1.0F, 1.0F);
+                world.playSound(null, pos, soundeffect, SoundSource.BLOCKS, 1.0F, 1.0F);
             }
 
             blockEntity.isActive = flag;
@@ -128,12 +128,12 @@ public class ConduitBlockEntity extends BlockEntity {
 
         if (blockEntity.isActive()) {
             if (i % 80L == 0L) {
-                world.playSound((Player) null, pos, SoundEvents.CONDUIT_AMBIENT, SoundSource.BLOCKS, 1.0F, 1.0F);
+                world.playSound(null, pos, SoundEvents.CONDUIT_AMBIENT, SoundSource.BLOCKS, 1.0F, 1.0F);
             }
 
             if (i > blockEntity.nextAmbientSoundActivation) {
                 blockEntity.nextAmbientSoundActivation = i + 60L + (long) world.getRandom().nextInt(40);
-                world.playSound((Player) null, pos, SoundEvents.CONDUIT_AMBIENT_SHORT, SoundSource.BLOCKS, 1.0F, 1.0F);
+                world.playSound(null, pos, SoundEvents.CONDUIT_AMBIENT_SHORT, SoundSource.BLOCKS, 1.0F, 1.0F);
             }
         }
 
@@ -196,7 +196,7 @@ public class ConduitBlockEntity extends BlockEntity {
         int k = pos.getX();
         int l = pos.getY();
         int i1 = pos.getZ();
-        AABB axisalignedbb = (new AABB((double) k, (double) l, (double) i1, (double) (k + 1), (double) (l + 1), (double) (i1 + 1))).inflate((double) j).expandTowards(0.0D, (double) world.getHeight(), 0.0D);
+        AABB axisalignedbb = (new AABB(k, l, i1, k + 1, l + 1, i1 + 1)).inflate(j).expandTowards(0.0D, world.getHeight(), 0.0D);
         List<Player> list1 = world.getEntitiesOfClass(Player.class, axisalignedbb);
 
         if (!list1.isEmpty()) {
@@ -205,7 +205,7 @@ public class ConduitBlockEntity extends BlockEntity {
             while (iterator.hasNext()) {
                 Player entityhuman = (Player) iterator.next();
 
-                if (pos.closerThan(entityhuman.blockPosition(), (double) j) && entityhuman.isInWaterOrRain()) {
+                if (pos.closerThan(entityhuman.blockPosition(), j) && entityhuman.isInWaterOrRain()) {
                     entityhuman.addEffect(new MobEffectInstance(MobEffects.CONDUIT_POWER, 260, 0, true, true), org.bukkit.event.entity.EntityPotionEffectEvent.Cause.CONDUIT); // CraftBukkit
                 }
             }
@@ -228,7 +228,7 @@ public class ConduitBlockEntity extends BlockEntity {
             });
 
             if (!list1.isEmpty()) {
-                blockEntity.destroyTarget = (LivingEntity) list1.get(world.random.nextInt(list1.size()));
+                blockEntity.destroyTarget = list1.get(world.random.nextInt(list1.size()));
             }
         } else if (!blockEntity.destroyTarget.isAlive() || !pos.closerThan(blockEntity.destroyTarget.blockPosition(), 8.0D)) {
             blockEntity.destroyTarget = null;
@@ -238,7 +238,7 @@ public class ConduitBlockEntity extends BlockEntity {
             // CraftBukkit start
             CraftEventFactory.blockDamage = CraftBlock.at(world, pos);
             if (blockEntity.destroyTarget.hurt(DamageSource.MAGIC, 4.0F)) {
-                world.playSound((Player) null, blockEntity.destroyTarget.getX(), blockEntity.destroyTarget.getY(), blockEntity.destroyTarget.getZ(), SoundEvents.CONDUIT_ATTACK_TARGET, SoundSource.BLOCKS, 1.0F, 1.0F);
+                world.playSound(null, blockEntity.destroyTarget.getX(), blockEntity.destroyTarget.getY(), blockEntity.destroyTarget.getZ(), SoundEvents.CONDUIT_ATTACK_TARGET, SoundSource.BLOCKS, 1.0F, 1.0F);
             }
             CraftEventFactory.blockDamage = null;
             // CraftBukkit end
@@ -267,7 +267,7 @@ public class ConduitBlockEntity extends BlockEntity {
         int j = pos.getY();
         int k = pos.getZ();
 
-        return (new AABB((double) i, (double) j, (double) k, (double) (i + 1), (double) (j + 1), (double) (k + 1))).inflate(8.0D);
+        return (new AABB(i, j, k, i + 1, j + 1, k + 1)).inflate(8.0D);
     }
 
     @Nullable
@@ -276,12 +276,12 @@ public class ConduitBlockEntity extends BlockEntity {
             return entityliving.getUUID().equals(uuid);
         });
 
-        return list.size() == 1 ? (LivingEntity) list.get(0) : null;
+        return list.size() == 1 ? list.get(0) : null;
     }
 
     private static void animationTick(Level world, BlockPos pos, List<BlockPos> activatingBlocks, @Nullable Entity entity, int ticks) {
         RandomSource randomsource = world.random;
-        double d0 = (double) (Mth.sin((float) (ticks + 35) * 0.1F) / 2.0F + 0.5F);
+        double d0 = Mth.sin((float) (ticks + 35) * 0.1F) / 2.0F + 0.5F;
 
         d0 = (d0 * d0 + d0) * 0.30000001192092896D;
         Vec3 vec3d = new Vec3((double) pos.getX() + 0.5D, (double) pos.getY() + 1.5D + d0, (double) pos.getZ() + 0.5D);
@@ -299,7 +299,7 @@ public class ConduitBlockEntity extends BlockEntity {
                 float f1 = -2.0F + randomsource.nextFloat() + (float) blockposition2.getY();
                 float f2 = -0.5F + randomsource.nextFloat() + (float) blockposition2.getZ();
 
-                world.addParticle(ParticleTypes.NAUTILUS, vec3d.x, vec3d.y, vec3d.z, (double) f, (double) f1, (double) f2);
+                world.addParticle(ParticleTypes.NAUTILUS, vec3d.x, vec3d.y, vec3d.z, f, f1, f2);
             }
         }
 
@@ -309,7 +309,7 @@ public class ConduitBlockEntity extends BlockEntity {
             float f4 = -1.0F + randomsource.nextFloat() * entity.getBbHeight();
 
             f = (-0.5F + randomsource.nextFloat()) * (3.0F + entity.getBbWidth());
-            Vec3 vec3d2 = new Vec3((double) f3, (double) f4, (double) f);
+            Vec3 vec3d2 = new Vec3(f3, f4, f);
 
             world.addParticle(ParticleTypes.NAUTILUS, vec3d1.x, vec3d1.y, vec3d1.z, vec3d2.x, vec3d2.y, vec3d2.z);
         }
diff --git a/src/main/java/net/minecraft/world/level/block/entity/ContainerOpenersCounter.java b/src/main/java/net/minecraft/world/level/block/entity/ContainerOpenersCounter.java
index 3e4b3eecc788c564f81b7929bfab7d2fdb6e307d..a83d1e29c55de799513abb02258f66bcb9979bf0 100644
--- a/src/main/java/net/minecraft/world/level/block/entity/ContainerOpenersCounter.java
+++ b/src/main/java/net/minecraft/world/level/block/entity/ContainerOpenersCounter.java
@@ -55,7 +55,7 @@ public abstract class ContainerOpenersCounter {
 
         if (i == 0) {
             this.onOpen(world, pos, state);
-            world.gameEvent((Entity) player, GameEvent.CONTAINER_OPEN, pos);
+            world.gameEvent(player, GameEvent.CONTAINER_OPEN, pos);
             ContainerOpenersCounter.scheduleRecheck(world, pos, state);
         }
 
@@ -79,7 +79,7 @@ public abstract class ContainerOpenersCounter {
 
         if (this.openCount == 0) {
             this.onClose(world, pos, state);
-            world.gameEvent((Entity) player, GameEvent.CONTAINER_CLOSE, pos);
+            world.gameEvent(player, GameEvent.CONTAINER_CLOSE, pos);
         }
 
         this.openerCountChanged(world, pos, state, i, this.openCount);
@@ -90,7 +90,7 @@ public abstract class ContainerOpenersCounter {
         int j = pos.getY();
         int k = pos.getZ();
         float f = 5.0F;
-        AABB axisalignedbb = new AABB((double) ((float) i - 5.0F), (double) ((float) j - 5.0F), (double) ((float) k - 5.0F), (double) ((float) (i + 1) + 5.0F), (double) ((float) (j + 1) + 5.0F), (double) ((float) (k + 1) + 5.0F));
+        AABB axisalignedbb = new AABB((float) i - 5.0F, (float) j - 5.0F, (float) k - 5.0F, (float) (i + 1) + 5.0F, (float) (j + 1) + 5.0F, (float) (k + 1) + 5.0F);
 
         return world.getEntities(EntityTypeTest.forClass(Player.class), axisalignedbb, this::isOwnContainer).size();
     }
@@ -106,10 +106,10 @@ public abstract class ContainerOpenersCounter {
 
             if (flag && !flag1) {
                 this.onOpen(world, pos, state);
-                world.gameEvent((Entity) null, GameEvent.CONTAINER_OPEN, pos);
+                world.gameEvent(null, GameEvent.CONTAINER_OPEN, pos);
             } else if (!flag) {
                 this.onClose(world, pos, state);
-                world.gameEvent((Entity) null, GameEvent.CONTAINER_CLOSE, pos);
+                world.gameEvent(null, GameEvent.CONTAINER_CLOSE, pos);
             }
 
             this.openCount = i;
diff --git a/src/main/java/net/minecraft/world/level/block/entity/DispenserBlockEntity.java b/src/main/java/net/minecraft/world/level/block/entity/DispenserBlockEntity.java
index 881379681c39230a00b3a1f11cd87498984396c7..f2fc2a80c401921db78fc20a62d1187f8474d38c 100644
--- a/src/main/java/net/minecraft/world/level/block/entity/DispenserBlockEntity.java
+++ b/src/main/java/net/minecraft/world/level/block/entity/DispenserBlockEntity.java
@@ -68,12 +68,12 @@ public class DispenserBlockEntity extends RandomizableContainerBlockEntity {
     }
 
     public int getRandomSlot(RandomSource random) {
-        this.unpackLootTable((Player) null);
+        this.unpackLootTable(null);
         int i = -1;
         int j = 1;
 
         for (int k = 0; k < this.items.size(); ++k) {
-            if (!((ItemStack) this.items.get(k)).isEmpty() && random.nextInt(j++) == 0) {
+            if (!this.items.get(k).isEmpty() && random.nextInt(j++) == 0) {
                 i = k;
             }
         }
@@ -83,7 +83,7 @@ public class DispenserBlockEntity extends RandomizableContainerBlockEntity {
 
     public int addItem(ItemStack stack) {
         for (int i = 0; i < this.items.size(); ++i) {
-            if (((ItemStack) this.items.get(i)).isEmpty()) {
+            if (this.items.get(i).isEmpty()) {
                 this.setItem(i, stack);
                 return i;
             }
diff --git a/src/main/java/net/minecraft/world/level/block/entity/EnchantmentTableBlockEntity.java b/src/main/java/net/minecraft/world/level/block/entity/EnchantmentTableBlockEntity.java
index 65e1381bb2d10bd212463feb602c60f8fdb9ade1..da2e1b889f04e53c4db98c03402efe1e440d3f3f 100644
--- a/src/main/java/net/minecraft/world/level/block/entity/EnchantmentTableBlockEntity.java
+++ b/src/main/java/net/minecraft/world/level/block/entity/EnchantmentTableBlockEntity.java
@@ -105,7 +105,7 @@ public class EnchantmentTableBlockEntity extends BlockEntity implements Nameable
 
     @Override
     public Component getName() {
-        return (Component)(this.name != null ? this.name : Component.translatable("container.enchant"));
+        return this.name != null ? this.name : Component.translatable("container.enchant");
     }
 
     public void setCustomName(@Nullable Component customName) {
diff --git a/src/main/java/net/minecraft/world/level/block/entity/HopperBlockEntity.java b/src/main/java/net/minecraft/world/level/block/entity/HopperBlockEntity.java
index 3e1e7fa63edf7d672454360f7b71ed9b0d47496f..30b62f7eb2ccd38a584fed97740c3b8ffd9a3df3 100644
--- a/src/main/java/net/minecraft/world/level/block/entity/HopperBlockEntity.java
+++ b/src/main/java/net/minecraft/world/level/block/entity/HopperBlockEntity.java
@@ -111,13 +111,13 @@ public class HopperBlockEntity extends RandomizableContainerBlockEntity implemen
 
     @Override
     public ItemStack removeItem(int slot, int amount) {
-        this.unpackLootTable((Player) null);
+        this.unpackLootTable(null);
         return ContainerHelper.removeItem(this.getItems(), slot, amount);
     }
 
     @Override
     public void setItem(int slot, ItemStack stack) {
-        this.unpackLootTable((Player) null);
+        this.unpackLootTable(null);
         this.getItems().set(slot, stack);
         if (stack.getCount() > this.getMaxStackSize()) {
             stack.setCount(this.getMaxStackSize());
@@ -151,11 +151,11 @@ public class HopperBlockEntity extends RandomizableContainerBlockEntity implemen
         if (world.isClientSide) {
             return false;
         } else {
-            if (!blockEntity.isOnCooldown() && ((Boolean) state.getValue(HopperBlock.ENABLED)).booleanValue()) {
+            if (!blockEntity.isOnCooldown() && state.getValue(HopperBlock.ENABLED).booleanValue()) {
                 boolean flag = false;
 
                 if (!blockEntity.isEmpty()) {
-                    flag = HopperBlockEntity.ejectItems(world, pos, state, (Container) blockEntity, blockEntity); // CraftBukkit
+                    flag = HopperBlockEntity.ejectItems(world, pos, state, blockEntity, blockEntity); // CraftBukkit
                 }
 
                 if (!blockEntity.inventoryFull()) {
@@ -347,7 +347,7 @@ public class HopperBlockEntity extends RandomizableContainerBlockEntity implemen
         if (iinventory1 == null) {
             return false;
         } else {
-            Direction enumdirection = ((Direction) iblockdata.getValue(HopperBlock.FACING)).getOpposite();
+            Direction enumdirection = iblockdata.getValue(HopperBlock.FACING).getOpposite();
 
             if (HopperBlockEntity.isFullContainer(iinventory1, enumdirection)) {
                 return false;
@@ -538,7 +538,7 @@ public class HopperBlockEntity extends RandomizableContainerBlockEntity implemen
         }
         // CraftBukkit end
         ItemStack itemstack = itemEntity.getItem().copy();
-        ItemStack itemstack1 = HopperBlockEntity.addItem((Container) null, inventory, itemstack, (Direction) null);
+        ItemStack itemstack1 = HopperBlockEntity.addItem(null, inventory, itemstack, null);
 
         if (itemstack1.isEmpty()) {
             flag = true;
@@ -634,7 +634,7 @@ public class HopperBlockEntity extends RandomizableContainerBlockEntity implemen
 
     @Nullable
     private static Container getAttachedContainer(Level world, BlockPos pos, BlockState state) {
-        Direction enumdirection = (Direction) state.getValue(HopperBlock.FACING);
+        Direction enumdirection = state.getValue(HopperBlock.FACING);
 
         return HopperBlockEntity.getContainerAt(world, pos.relative(enumdirection));
     }
@@ -674,7 +674,7 @@ public class HopperBlockEntity extends RandomizableContainerBlockEntity implemen
             BlockEntity tileentity = world.getBlockEntity(blockposition);
 
             if (tileentity instanceof Container) {
-                object = (Container) tileentity;
+                object = tileentity;
                 if (object instanceof ChestBlockEntity && block instanceof ChestBlock) {
                     object = ChestBlock.getContainer((ChestBlock) block, iblockdata, world, blockposition, true);
                 }
@@ -685,7 +685,7 @@ public class HopperBlockEntity extends RandomizableContainerBlockEntity implemen
             List<Entity> list = world.getEntities((Entity) null, new AABB(x - 0.5D, y - 0.5D, z - 0.5D, x + 0.5D, y + 0.5D, z + 0.5D), EntitySelector.CONTAINER_ENTITY_SELECTOR);
 
             if (!list.isEmpty()) {
-                object = (Container) list.get(world.random.nextInt(list.size()));
+                object = list.get(world.random.nextInt(list.size()));
             }
         }
 
@@ -734,7 +734,7 @@ public class HopperBlockEntity extends RandomizableContainerBlockEntity implemen
     }
 
     public static void entityInside(Level world, BlockPos pos, BlockState state, Entity entity, HopperBlockEntity blockEntity) {
-        if (entity instanceof ItemEntity && Shapes.joinIsNotEmpty(Shapes.create(entity.getBoundingBox().move((double) (-pos.getX()), (double) (-pos.getY()), (double) (-pos.getZ()))), blockEntity.getSuckShape(), BooleanOp.AND)) {
+        if (entity instanceof ItemEntity && Shapes.joinIsNotEmpty(Shapes.create(entity.getBoundingBox().move(-pos.getX(), -pos.getY(), -pos.getZ())), blockEntity.getSuckShape(), BooleanOp.AND)) {
             HopperBlockEntity.tryMoveItems(world, pos, state, blockEntity, () -> {
                 return HopperBlockEntity.addItem(blockEntity, (ItemEntity) entity);
             });
diff --git a/src/main/java/net/minecraft/world/level/block/entity/LecternBlockEntity.java b/src/main/java/net/minecraft/world/level/block/entity/LecternBlockEntity.java
index fb6fa3b6e09679dc2407173171c083b97157a6cb..1a7ea604b9fe730d08f93cf7c7717a18df38c9d2 100644
--- a/src/main/java/net/minecraft/world/level/block/entity/LecternBlockEntity.java
+++ b/src/main/java/net/minecraft/world/level/block/entity/LecternBlockEntity.java
@@ -79,7 +79,7 @@ public class LecternBlockEntity extends BlockEntity implements Clearable, MenuPr
 
         @Override
         public InventoryHolder getOwner() {
-            return (Lectern) LecternBlockEntity.this.getOwner();
+            return LecternBlockEntity.this.getOwner();
         }
 
         public LecternBlockEntity getLectern() {
@@ -202,7 +202,7 @@ public class LecternBlockEntity extends BlockEntity implements Clearable, MenuPr
     }
 
     public void setBook(ItemStack book) {
-        this.setBook(book, (Player) null);
+        this.setBook(book, null);
     }
 
     void onBookItemRemove() {
@@ -219,7 +219,7 @@ public class LecternBlockEntity extends BlockEntity implements Clearable, MenuPr
     }
 
     public void setPage(int currentPage) {
-        int j = Mth.clamp(currentPage, (int) 0, this.pageCount - 1);
+        int j = Mth.clamp(currentPage, 0, this.pageCount - 1);
 
         if (j != this.page) {
             this.page = j;
@@ -300,13 +300,13 @@ public class LecternBlockEntity extends BlockEntity implements Clearable, MenuPr
     public void load(CompoundTag nbt) {
         super.load(nbt);
         if (nbt.contains("Book", 10)) {
-            this.book = this.resolveBook(ItemStack.of(nbt.getCompound("Book")), (Player) null);
+            this.book = this.resolveBook(ItemStack.of(nbt.getCompound("Book")), null);
         } else {
             this.book = ItemStack.EMPTY;
         }
 
         this.pageCount = WrittenBookItem.getPageCount(this.book);
-        this.page = Mth.clamp(nbt.getInt("Page"), (int) 0, this.pageCount - 1);
+        this.page = Mth.clamp(nbt.getInt("Page"), 0, this.pageCount - 1);
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/entity/RandomizableContainerBlockEntity.java b/src/main/java/net/minecraft/world/level/block/entity/RandomizableContainerBlockEntity.java
index d559f93a9a09bac414dd5d58afccad42c127f09b..6ded626666c263f015503d8987009e2f49047bf6 100644
--- a/src/main/java/net/minecraft/world/level/block/entity/RandomizableContainerBlockEntity.java
+++ b/src/main/java/net/minecraft/world/level/block/entity/RandomizableContainerBlockEntity.java
@@ -94,7 +94,7 @@ public abstract class RandomizableContainerBlockEntity extends BaseContainerBloc
 
     @Override
     public boolean isEmpty() {
-        this.unpackLootTable((Player)null);
+        this.unpackLootTable(null);
         // Paper start
         for (ItemStack itemStack : this.getItems()) {
             if (!itemStack.isEmpty()) {
@@ -107,13 +107,13 @@ public abstract class RandomizableContainerBlockEntity extends BaseContainerBloc
 
     @Override
     public ItemStack getItem(int slot) {
-        if (slot == 0) this.unpackLootTable((Player) null); // Paper
+        if (slot == 0) this.unpackLootTable(null); // Paper
         return this.getItems().get(slot);
     }
 
     @Override
     public ItemStack removeItem(int slot, int amount) {
-        this.unpackLootTable((Player)null);
+        this.unpackLootTable(null);
         ItemStack itemStack = ContainerHelper.removeItem(this.getItems(), slot, amount);
         if (!itemStack.isEmpty()) {
             this.setChanged();
@@ -124,13 +124,13 @@ public abstract class RandomizableContainerBlockEntity extends BaseContainerBloc
 
     @Override
     public ItemStack removeItemNoUpdate(int slot) {
-        this.unpackLootTable((Player)null);
+        this.unpackLootTable(null);
         return ContainerHelper.takeItem(this.getItems(), slot);
     }
 
     @Override
     public void setItem(int slot, ItemStack stack) {
-        this.unpackLootTable((Player)null);
+        this.unpackLootTable(null);
         this.getItems().set(slot, stack);
         if (stack.getCount() > this.getMaxStackSize()) {
             stack.setCount(this.getMaxStackSize());
diff --git a/src/main/java/net/minecraft/world/level/block/entity/ShulkerBoxBlockEntity.java b/src/main/java/net/minecraft/world/level/block/entity/ShulkerBoxBlockEntity.java
index b7686fd63b7c5d88c3a12ec4ee9bc01a17f997e0..5d61fda7d5e0f382e9efe54dfd2ed5c15fffca86 100644
--- a/src/main/java/net/minecraft/world/level/block/entity/ShulkerBoxBlockEntity.java
+++ b/src/main/java/net/minecraft/world/level/block/entity/ShulkerBoxBlockEntity.java
@@ -138,18 +138,18 @@ public class ShulkerBoxBlockEntity extends RandomizableContainerBlockEntity impl
     }
 
     public AABB getBoundingBox(BlockState state) {
-        return Shulker.getProgressAabb((Direction) state.getValue(ShulkerBoxBlock.FACING), 0.5F * this.getProgress(1.0F));
+        return Shulker.getProgressAabb(state.getValue(ShulkerBoxBlock.FACING), 0.5F * this.getProgress(1.0F));
     }
 
     private void moveCollidedEntities(Level world, BlockPos pos, BlockState state) {
         if (state.getBlock() instanceof ShulkerBoxBlock) {
-            Direction enumdirection = (Direction) state.getValue(ShulkerBoxBlock.FACING);
+            Direction enumdirection = state.getValue(ShulkerBoxBlock.FACING);
             AABB axisalignedbb = Shulker.getProgressDeltaAabb(enumdirection, this.progressOld, this.progress).move(pos);
-            List<Entity> list = world.getEntities((Entity) null, axisalignedbb);
+            List<Entity> list = world.getEntities(null, axisalignedbb);
 
             if (!list.isEmpty()) {
                 for (int i = 0; i < list.size(); ++i) {
-                    Entity entity = (Entity) list.get(i);
+                    Entity entity = list.get(i);
 
                     if (entity.getPistonPushReaction() != PushReaction.IGNORE) {
                         entity.move(MoverType.SHULKER_BOX, new Vec3((axisalignedbb.getXsize() + 0.01D) * (double) enumdirection.getStepX(), (axisalignedbb.getYsize() + 0.01D) * (double) enumdirection.getStepY(), (axisalignedbb.getZsize() + 0.01D) * (double) enumdirection.getStepZ()));
@@ -200,8 +200,8 @@ public class ShulkerBoxBlockEntity extends RandomizableContainerBlockEntity impl
             if (this.opened) return; // CraftBukkit - only animate if the ShulkerBox hasn't been forced open already by an API call.
             this.level.blockEvent(this.worldPosition, this.getBlockState().getBlock(), 1, this.openCount);
             if (this.openCount == 1) {
-                this.level.gameEvent((Entity) player, GameEvent.CONTAINER_OPEN, this.worldPosition);
-                this.level.playSound((Player) null, this.worldPosition, SoundEvents.SHULKER_BOX_OPEN, SoundSource.BLOCKS, 0.5F, this.level.random.nextFloat() * 0.1F + 0.9F);
+                this.level.gameEvent(player, GameEvent.CONTAINER_OPEN, this.worldPosition);
+                this.level.playSound(null, this.worldPosition, SoundEvents.SHULKER_BOX_OPEN, SoundSource.BLOCKS, 0.5F, this.level.random.nextFloat() * 0.1F + 0.9F);
             }
         }
 
@@ -214,8 +214,8 @@ public class ShulkerBoxBlockEntity extends RandomizableContainerBlockEntity impl
             if (this.opened) return; // CraftBukkit - only animate if the ShulkerBox hasn't been forced open already by an API call.
             this.level.blockEvent(this.worldPosition, this.getBlockState().getBlock(), 1, this.openCount);
             if (this.openCount <= 0) {
-                this.level.gameEvent((Entity) player, GameEvent.CONTAINER_CLOSE, this.worldPosition);
-                this.level.playSound((Player) null, this.worldPosition, SoundEvents.SHULKER_BOX_CLOSE, SoundSource.BLOCKS, 0.5F, this.level.random.nextFloat() * 0.1F + 0.9F);
+                this.level.gameEvent(player, GameEvent.CONTAINER_CLOSE, this.worldPosition);
+                this.level.playSound(null, this.worldPosition, SoundEvents.SHULKER_BOX_CLOSE, SoundSource.BLOCKS, 0.5F, this.level.random.nextFloat() * 0.1F + 0.9F);
             }
         }
 
diff --git a/src/main/java/net/minecraft/world/level/block/entity/SignBlockEntity.java b/src/main/java/net/minecraft/world/level/block/entity/SignBlockEntity.java
index 4da4edae517a0efec6e03a719ec47b700509dab1..e9458e38164ad37daaa395a858aee4b215d77dd5 100644
--- a/src/main/java/net/minecraft/world/level/block/entity/SignBlockEntity.java
+++ b/src/main/java/net/minecraft/world/level/block/entity/SignBlockEntity.java
@@ -140,7 +140,7 @@ public class SignBlockEntity extends BlockEntity implements CommandSource { // C
 
         if (this.level instanceof ServerLevel) {
             try {
-                return ComponentUtils.updateForEntity(this.createCommandSourceStack((ServerPlayer) null), ichatbasecomponent, (Entity) null, 0);
+                return ComponentUtils.updateForEntity(this.createCommandSourceStack(null), ichatbasecomponent, null, 0);
             } catch (CommandSyntaxException commandsyntaxexception) {
                 ;
             }
@@ -187,7 +187,7 @@ public class SignBlockEntity extends BlockEntity implements CommandSource { // C
             this.renderMessages = new FormattedCharSequence[4];
 
             for (int i = 0; i < 4; ++i) {
-                this.renderMessages[i] = (FormattedCharSequence) textOrderingFunction.apply(this.getMessage(i, filterText));
+                this.renderMessages[i] = textOrderingFunction.apply(this.getMessage(i, filterText));
             }
         }
 
diff --git a/src/main/java/net/minecraft/world/level/block/entity/SkullBlockEntity.java b/src/main/java/net/minecraft/world/level/block/entity/SkullBlockEntity.java
index 28ce257b54f224b801a5206dd6d39cbae0ef248b..6c20a5c3c008bbe47543cc12b8c5475bec9f2d62 100644
--- a/src/main/java/net/minecraft/world/level/block/entity/SkullBlockEntity.java
+++ b/src/main/java/net/minecraft/world/level/block/entity/SkullBlockEntity.java
@@ -78,7 +78,7 @@ public class SkullBlockEntity extends BlockEntity {
             String s = nbt.getString("ExtraType");
 
             if (!StringUtil.isNullOrEmpty(s)) {
-                this.setOwner(new GameProfile((UUID) null, s));
+                this.setOwner(new GameProfile( null, s));
             }
         }
 
diff --git a/src/main/java/net/minecraft/world/level/block/entity/TheEndGatewayBlockEntity.java b/src/main/java/net/minecraft/world/level/block/entity/TheEndGatewayBlockEntity.java
index f80545f80948db27d1fbde77d0505c916eb504ed..ed882dcfa8969c41d9656159cf2f363ec831be1e 100644
--- a/src/main/java/net/minecraft/world/level/block/entity/TheEndGatewayBlockEntity.java
+++ b/src/main/java/net/minecraft/world/level/block/entity/TheEndGatewayBlockEntity.java
@@ -282,7 +282,7 @@ public class TheEndGatewayBlockEntity extends TheEndPortalBlockEntity {
     }
 
     private static Vec3 findExitPortalXZPosTentative(ServerLevel world, BlockPos pos) {
-        Vec3 vec3d = (new Vec3((double) pos.getX(), 0.0D, (double) pos.getZ())).normalize();
+        Vec3 vec3d = (new Vec3(pos.getX(), 0.0D, pos.getZ())).normalize();
         boolean flag = true;
         Vec3 vec3d1 = vec3d.scale(1024.0D);
 
diff --git a/src/main/java/net/minecraft/world/level/block/grower/AbstractMegaTreeGrower.java b/src/main/java/net/minecraft/world/level/block/grower/AbstractMegaTreeGrower.java
index 3decfca75ae1ace3da8ff47815a47d84c2a86105..15e416670d8344d491a88c7bd840ce0f4b3ad1da 100644
--- a/src/main/java/net/minecraft/world/level/block/grower/AbstractMegaTreeGrower.java
+++ b/src/main/java/net/minecraft/world/level/block/grower/AbstractMegaTreeGrower.java
@@ -46,7 +46,7 @@ public abstract class AbstractMegaTreeGrower extends AbstractTreeGrower {
                 return false;
             } else {
                 setTreeType(holder); // CraftBukkit
-                ConfiguredFeature<?, ?> worldgenfeatureconfigured = (ConfiguredFeature) holder.value();
+                ConfiguredFeature<?, ?> worldgenfeatureconfigured = holder.value();
                 BlockState iblockdata1 = Blocks.AIR.defaultBlockState();
 
                 world.setBlock(pos.offset(x, 0, z), iblockdata1, 4);
diff --git a/src/main/java/net/minecraft/world/level/block/grower/AbstractTreeGrower.java b/src/main/java/net/minecraft/world/level/block/grower/AbstractTreeGrower.java
index df41c210a0c06a2789fe4944fe1b9c2ba9509b61..cd304d39d096ac8e4f98b117cb9857971c79de70 100644
--- a/src/main/java/net/minecraft/world/level/block/grower/AbstractTreeGrower.java
+++ b/src/main/java/net/minecraft/world/level/block/grower/AbstractTreeGrower.java
@@ -38,7 +38,7 @@ public abstract class AbstractTreeGrower {
                 return false;
             } else {
                 this.setTreeType(holder); // CraftBukkit
-                ConfiguredFeature<?, ?> worldgenfeatureconfigured = (ConfiguredFeature) holder.value();
+                ConfiguredFeature<?, ?> worldgenfeatureconfigured = holder.value();
                 BlockState iblockdata1 = world.getFluidState(pos).createLegacyBlock();
 
                 world.setBlock(pos, iblockdata1, 4);
diff --git a/src/main/java/net/minecraft/world/level/block/piston/PistonBaseBlock.java b/src/main/java/net/minecraft/world/level/block/piston/PistonBaseBlock.java
index 61187e52e4d5226f6ce546012e9bfe46a53619d3..2c07c4f4c3ce7e48f6625053400eda1c3a95ae2c 100644
--- a/src/main/java/net/minecraft/world/level/block/piston/PistonBaseBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/piston/PistonBaseBlock.java
@@ -62,14 +62,14 @@ public class PistonBaseBlock extends DirectionalBlock {
 
     public PistonBaseBlock(boolean sticky, BlockBehaviour.Properties settings) {
         super(settings);
-        this.registerDefaultState((BlockState) ((BlockState) ((BlockState) this.stateDefinition.any()).setValue(PistonBaseBlock.FACING, Direction.NORTH)).setValue(PistonBaseBlock.EXTENDED, Boolean.FALSE));
+        this.registerDefaultState(this.stateDefinition.any().setValue(PistonBaseBlock.FACING, Direction.NORTH).setValue(PistonBaseBlock.EXTENDED, Boolean.FALSE));
         this.isSticky = sticky;
     }
 
     @Override
     public VoxelShape getShape(BlockState state, BlockGetter world, BlockPos pos, CollisionContext context) {
-        if (((Boolean) state.getValue(PistonBaseBlock.EXTENDED)).booleanValue()) {
-            switch ((Direction) state.getValue(PistonBaseBlock.FACING)) {
+        if (state.getValue(PistonBaseBlock.EXTENDED).booleanValue()) {
+            switch (state.getValue(PistonBaseBlock.FACING)) {
                 case DOWN:
                     return PistonBaseBlock.DOWN_AABB;
                 case UP:
@@ -117,18 +117,18 @@ public class PistonBaseBlock extends DirectionalBlock {
 
     @Override
     public BlockState getStateForPlacement(BlockPlaceContext ctx) {
-        return (BlockState) ((BlockState) this.defaultBlockState().setValue(PistonBaseBlock.FACING, ctx.getNearestLookingDirection().getOpposite())).setValue(PistonBaseBlock.EXTENDED, Boolean.FALSE);
+        return this.defaultBlockState().setValue(PistonBaseBlock.FACING, ctx.getNearestLookingDirection().getOpposite()).setValue(PistonBaseBlock.EXTENDED, Boolean.FALSE);
     }
 
     private void checkIfExtend(Level world, BlockPos pos, BlockState state) {
-        Direction enumdirection = (Direction) state.getValue(PistonBaseBlock.FACING);
+        Direction enumdirection = state.getValue(PistonBaseBlock.FACING);
         boolean flag = this.getNeighborSignal(world, pos, enumdirection);
 
-        if (flag && !((Boolean) state.getValue(PistonBaseBlock.EXTENDED)).booleanValue()) {
+        if (flag && !state.getValue(PistonBaseBlock.EXTENDED).booleanValue()) {
             if ((new PistonStructureResolver(world, pos, enumdirection, true)).resolve()) {
                 world.blockEvent(pos, this, 0, enumdirection.get3DDataValue());
             }
-        } else if (!flag && ((Boolean) state.getValue(PistonBaseBlock.EXTENDED)).booleanValue()) {
+        } else if (!flag && state.getValue(PistonBaseBlock.EXTENDED).booleanValue()) {
             BlockPos blockposition1 = pos.relative(enumdirection, 2);
             BlockState iblockdata1 = world.getBlockState(blockposition1);
             byte b0 = 1;
@@ -198,7 +198,7 @@ public class PistonBaseBlock extends DirectionalBlock {
 
     @Override
     public boolean triggerEvent(BlockState state, Level world, BlockPos pos, int type, int data) {
-        Direction enumdirection = (Direction) state.getValue(PistonBaseBlock.FACING);
+        Direction enumdirection = state.getValue(PistonBaseBlock.FACING);
         // Paper start - prevent retracting when we're facing the wrong way (we were replaced before retraction could occur)
         Direction directionQueuedAs = Direction.from3DDataValue(data & 7); // Paper - copied from below
         if (!io.papermc.paper.configuration.GlobalConfiguration.get().unsupportedSettings.allowPermanentBlockBreakExploits && enumdirection != directionQueuedAs) {
@@ -210,7 +210,7 @@ public class PistonBaseBlock extends DirectionalBlock {
             boolean flag = this.getNeighborSignal(world, pos, enumdirection);
 
             if (flag && (type == 1 || type == 2)) {
-                world.setBlock(pos, (BlockState) state.setValue(PistonBaseBlock.EXTENDED, Boolean.TRUE), 2);
+                world.setBlock(pos, state.setValue(PistonBaseBlock.EXTENDED, Boolean.TRUE), 2);
                 return false;
             }
 
@@ -224,9 +224,9 @@ public class PistonBaseBlock extends DirectionalBlock {
                 return false;
             }
 
-            world.setBlock(pos, (BlockState) state.setValue(PistonBaseBlock.EXTENDED, Boolean.TRUE), 67);
-            world.playSound((Player) null, pos, SoundEvents.PISTON_EXTEND, SoundSource.BLOCKS, 0.5F, world.random.nextFloat() * 0.25F + 0.6F);
-            world.gameEvent((Entity) null, GameEvent.PISTON_EXTEND, pos);
+            world.setBlock(pos, state.setValue(PistonBaseBlock.EXTENDED, Boolean.TRUE), 67);
+            world.playSound(null, pos, SoundEvents.PISTON_EXTEND, SoundSource.BLOCKS, 0.5F, world.random.nextFloat() * 0.25F + 0.6F);
+            world.gameEvent(null, GameEvent.PISTON_EXTEND, pos);
         } else if (type == 1 || type == 2) {
             BlockEntity tileentity = world.getBlockEntity(pos.relative(enumdirection));
 
@@ -234,7 +234,7 @@ public class PistonBaseBlock extends DirectionalBlock {
                 ((PistonMovingBlockEntity) tileentity).finalTick();
             }
 
-            BlockState iblockdata1 = (BlockState) ((BlockState) Blocks.MOVING_PISTON.defaultBlockState().setValue(MovingPistonBlock.FACING, enumdirection)).setValue(MovingPistonBlock.TYPE, this.isSticky ? PistonType.STICKY : PistonType.DEFAULT);
+            BlockState iblockdata1 = Blocks.MOVING_PISTON.defaultBlockState().setValue(MovingPistonBlock.FACING, enumdirection).setValue(MovingPistonBlock.TYPE, this.isSticky ? PistonType.STICKY : PistonType.DEFAULT);
 
             // Paper start - Move empty piston retract call to fix multiple event fires
             if (!this.isSticky) {
@@ -244,7 +244,7 @@ public class PistonBaseBlock extends DirectionalBlock {
             }
             // Paper end
             world.setBlock(pos, iblockdata1, 20);
-            world.setBlockEntity(MovingPistonBlock.newMovingBlockEntity(pos, iblockdata1, (BlockState) this.defaultBlockState().setValue(PistonBaseBlock.FACING, Direction.from3DDataValue(data & 7)), enumdirection, false, true)); // Paper - diff on change
+            world.setBlockEntity(MovingPistonBlock.newMovingBlockEntity(pos, iblockdata1, this.defaultBlockState().setValue(PistonBaseBlock.FACING, Direction.from3DDataValue(data & 7)), enumdirection, false, true)); // Paper - diff on change
             world.blockUpdated(pos, iblockdata1.getBlock());
             iblockdata1.updateNeighbourShapes(world, pos, 2);
             if (this.isSticky) {
@@ -290,8 +290,8 @@ public class PistonBaseBlock extends DirectionalBlock {
                 // Paper end - fix headless pistons breaking blocks
             }
 
-            world.playSound((Player) null, pos, SoundEvents.PISTON_CONTRACT, SoundSource.BLOCKS, 0.5F, world.random.nextFloat() * 0.15F + 0.6F);
-            world.gameEvent((Entity) null, GameEvent.PISTON_CONTRACT, pos);
+            world.playSound(null, pos, SoundEvents.PISTON_CONTRACT, SoundSource.BLOCKS, 0.5F, world.random.nextFloat() * 0.15F + 0.6F);
+            world.gameEvent(null, GameEvent.PISTON_CONTRACT, pos);
         }
 
         return true;
@@ -320,7 +320,7 @@ public class PistonBaseBlock extends DirectionalBlock {
                             case PUSH_ONLY:
                                 return direction == pistonDir;
                         }
-                    } else if (((Boolean) state.getValue(PistonBaseBlock.EXTENDED)).booleanValue()) {
+                    } else if (state.getValue(PistonBaseBlock.EXTENDED).booleanValue()) {
                         return false;
                     }
 
@@ -351,7 +351,7 @@ public class PistonBaseBlock extends DirectionalBlock {
             List<BlockState> list1 = Lists.newArrayList();
 
             for (int i = 0; i < list.size(); ++i) {
-                BlockPos blockposition2 = (BlockPos) list.get(i);
+                BlockPos blockposition2 = list.get(i);
                 BlockState iblockdata = world.getBlockState(blockposition2);
 
                 list1.add(iblockdata);
@@ -380,7 +380,7 @@ public class PistonBaseBlock extends DirectionalBlock {
                     if (index >= size() || index < 0) {
                         throw new ArrayIndexOutOfBoundsException(index);
                     }
-                    BlockPos pos = (BlockPos) (index < moved.size() ? moved.get(index) : broken.get(index - moved.size()));
+                    BlockPos pos = index < moved.size() ? moved.get(index) : broken.get(index - moved.size());
                     return bblock.getWorld().getBlockAt(pos.getX(), pos.getY(), pos.getZ());
                 }
             };
@@ -410,7 +410,7 @@ public class PistonBaseBlock extends DirectionalBlock {
             BlockState iblockdata1;
 
             for (k = list2.size() - 1; k >= 0; --k) {
-                blockposition3 = (BlockPos) list2.get(k);
+                blockposition3 = list2.get(k);
                 iblockdata1 = world.getBlockState(blockposition3);
                 BlockEntity tileentity = iblockdata1.hasBlockEntity() ? world.getBlockEntity(blockposition3) : null;
 
@@ -427,12 +427,12 @@ public class PistonBaseBlock extends DirectionalBlock {
             for (k = list.size() - 1; k >= 0; --k) {
                 // Paper start - fix a variety of piston desync dupes
                 boolean allowDesync = io.papermc.paper.configuration.GlobalConfiguration.get().unsupportedSettings.allowPistonDuplication;
-                BlockPos oldPos = blockposition3 = (BlockPos) list.get(k);
+                BlockPos oldPos = blockposition3 = list.get(k);
                 iblockdata1 = allowDesync ? world.getBlockState(oldPos) : null;
                 // Paper end - fix a variety of piston desync dupes
                 blockposition3 = blockposition3.relative(enumdirection1);
                 map.remove(blockposition3);
-                BlockState iblockdata2 = (BlockState) Blocks.MOVING_PISTON.defaultBlockState().setValue(PistonBaseBlock.FACING, dir);
+                BlockState iblockdata2 = Blocks.MOVING_PISTON.defaultBlockState().setValue(PistonBaseBlock.FACING, dir);
 
                 world.setBlock(blockposition3, iblockdata2, 68);
                 // Paper start - fix a variety of piston desync dupes
@@ -450,9 +450,9 @@ public class PistonBaseBlock extends DirectionalBlock {
 
             if (retract) {
                 PistonType blockpropertypistontype = this.isSticky ? PistonType.STICKY : PistonType.DEFAULT;
-                BlockState iblockdata3 = (BlockState) ((BlockState) Blocks.PISTON_HEAD.defaultBlockState().setValue(PistonHeadBlock.FACING, dir)).setValue(PistonHeadBlock.TYPE, blockpropertypistontype);
+                BlockState iblockdata3 = Blocks.PISTON_HEAD.defaultBlockState().setValue(PistonHeadBlock.FACING, dir).setValue(PistonHeadBlock.TYPE, blockpropertypistontype);
 
-                iblockdata1 = (BlockState) ((BlockState) Blocks.MOVING_PISTON.defaultBlockState().setValue(MovingPistonBlock.FACING, dir)).setValue(MovingPistonBlock.TYPE, this.isSticky ? PistonType.STICKY : PistonType.DEFAULT);
+                iblockdata1 = Blocks.MOVING_PISTON.defaultBlockState().setValue(MovingPistonBlock.FACING, dir).setValue(MovingPistonBlock.TYPE, this.isSticky ? PistonType.STICKY : PistonType.DEFAULT);
                 map.remove(blockposition1);
                 world.setBlock(blockposition1, iblockdata1, 68);
                 world.setBlockEntity(MovingPistonBlock.newMovingBlockEntity(blockposition1, iblockdata1, iblockdata3, dir, true, true));
@@ -474,8 +474,8 @@ public class PistonBaseBlock extends DirectionalBlock {
             while (iterator.hasNext()) {
                 Entry<BlockPos, BlockState> entry = (Entry) iterator.next();
 
-                blockposition5 = (BlockPos) entry.getKey();
-                BlockState iblockdata5 = (BlockState) entry.getValue();
+                blockposition5 = entry.getKey();
+                BlockState iblockdata5 = entry.getValue();
 
                 iblockdata5.updateIndirectNeighbourShapes(world, blockposition5, 2);
                 iblockdata4.updateNeighbourShapes(world, blockposition5, 2);
@@ -488,13 +488,13 @@ public class PistonBaseBlock extends DirectionalBlock {
 
             for (l = list2.size() - 1; l >= 0; --l) {
                 iblockdata1 = aiblockdata[j++];
-                blockposition5 = (BlockPos) list2.get(l);
+                blockposition5 = list2.get(l);
                 iblockdata1.updateIndirectNeighbourShapes(world, blockposition5, 2);
                 world.updateNeighborsAt(blockposition5, iblockdata1.getBlock());
             }
 
             for (l = list.size() - 1; l >= 0; --l) {
-                world.updateNeighborsAt((BlockPos) list.get(l), aiblockdata[j++].getBlock());
+                world.updateNeighborsAt(list.get(l), aiblockdata[j++].getBlock());
             }
 
             if (retract) {
@@ -507,12 +507,12 @@ public class PistonBaseBlock extends DirectionalBlock {
 
     @Override
     public BlockState rotate(BlockState state, Rotation rotation) {
-        return (BlockState) state.setValue(PistonBaseBlock.FACING, rotation.rotate((Direction) state.getValue(PistonBaseBlock.FACING)));
+        return state.setValue(PistonBaseBlock.FACING, rotation.rotate(state.getValue(PistonBaseBlock.FACING)));
     }
 
     @Override
     public BlockState mirror(BlockState state, Mirror mirror) {
-        return state.rotate(mirror.getRotation((Direction) state.getValue(PistonBaseBlock.FACING)));
+        return state.rotate(mirror.getRotation(state.getValue(PistonBaseBlock.FACING)));
     }
 
     @Override
@@ -522,7 +522,7 @@ public class PistonBaseBlock extends DirectionalBlock {
 
     @Override
     public boolean useShapeForLightOcclusion(BlockState state) {
-        return ((Boolean) state.getValue(PistonBaseBlock.EXTENDED)).booleanValue();
+        return state.getValue(PistonBaseBlock.EXTENDED).booleanValue();
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/piston/PistonMovingBlockEntity.java b/src/main/java/net/minecraft/world/level/block/piston/PistonMovingBlockEntity.java
index 7ca8af2b0dbcc79b71a6f5326c032f62d73e650a..777279cfb6b3c5fd5c15e95ccb9f7beb142615d5 100644
--- a/src/main/java/net/minecraft/world/level/block/piston/PistonMovingBlockEntity.java
+++ b/src/main/java/net/minecraft/world/level/block/piston/PistonMovingBlockEntity.java
@@ -103,11 +103,11 @@ public class PistonMovingBlockEntity extends BlockEntity {
 
     private static void moveCollidedEntities(Level world, BlockPos pos, float f, PistonMovingBlockEntity blockEntity) {
         Direction direction = blockEntity.getMovementDirection();
-        double d = (double)(f - blockEntity.progress);
+        double d = f - blockEntity.progress;
         VoxelShape voxelShape = blockEntity.getCollisionRelatedBlockState().getCollisionShape(world, pos);
         if (!voxelShape.isEmpty()) {
             AABB aABB = moveByPositionAndProgress(pos, voxelShape.bounds(), blockEntity);
-            List<Entity> list = world.getEntities((Entity)null, PistonMath.getMovementArea(aABB, direction, d).minmax(aABB));
+            List<Entity> list = world.getEntities(null, PistonMath.getMovementArea(aABB, direction, d).minmax(aABB));
             if (!list.isEmpty()) {
                 List<AABB> list2 = voxelShape.toAabbs();
                 boolean bl = blockEntity.movedState.is(Blocks.SLIME_BLOCK);
@@ -133,13 +133,13 @@ public class PistonMovingBlockEntity extends BlockEntity {
                                 double h = vec3.z;
                                 switch (direction.getAxis()) {
                                     case X:
-                                        e = (double)direction.getStepX();
+                                        e = direction.getStepX();
                                         break;
                                     case Y:
-                                        g = (double)direction.getStepY();
+                                        g = direction.getStepY();
                                         break;
                                     case Z:
-                                        h = (double)direction.getStepZ();
+                                        h = direction.getStepZ();
                                 }
 
                                 entity.setDeltaMovement(e, g, h);
@@ -180,7 +180,7 @@ public class PistonMovingBlockEntity extends BlockEntity {
     private static void moveEntityByPiston(Direction direction, Entity entity, double d, Direction movementDirection) {
         NOCLIP.set(direction);
         entity.move(MoverType.PISTON, new Vec3(d * (double)movementDirection.getStepX(), d * (double)movementDirection.getStepY(), d * (double)movementDirection.getStepZ()));
-        NOCLIP.set((Direction)null);
+        NOCLIP.set(null);
     }
 
     private static void moveStuckEntities(Level world, BlockPos pos, float f, PistonMovingBlockEntity blockEntity) {
@@ -189,7 +189,7 @@ public class PistonMovingBlockEntity extends BlockEntity {
             if (direction.getAxis().isHorizontal()) {
                 double d = blockEntity.movedState.getCollisionShape(world, pos).max(Direction.Axis.Y);
                 AABB aABB = moveByPositionAndProgress(pos, new AABB(0.0D, d, 0.0D, 1.0D, 1.5000000999999998D, 1.0D), blockEntity);
-                double e = (double)(f - blockEntity.progress);
+                double e = f - blockEntity.progress;
 
                 for(Entity entity : world.getEntities((Entity)null, aABB, (entityx) -> {
                     return matchesStickyCritera(aABB, entityx);
@@ -232,7 +232,7 @@ public class PistonMovingBlockEntity extends BlockEntity {
     }
 
     private static AABB moveByPositionAndProgress(BlockPos pos, AABB box, PistonMovingBlockEntity blockEntity) {
-        double d = (double)blockEntity.getExtendedProgress(blockEntity.progress);
+        double d = blockEntity.getExtendedProgress(blockEntity.progress);
         return box.move((double)pos.getX() + d * (double)blockEntity.direction.getStepX(), (double)pos.getY() + d * (double)blockEntity.direction.getStepY(), (double)pos.getZ() + d * (double)blockEntity.direction.getStepZ());
     }
 
@@ -355,9 +355,9 @@ public class PistonMovingBlockEntity extends BlockEntity {
             }
 
             float f = this.getExtendedProgress(this.progress);
-            double d = (double)((float)this.direction.getStepX() * f);
-            double e = (double)((float)this.direction.getStepY() * f);
-            double g = (double)((float)this.direction.getStepZ() * f);
+            double d = (float)this.direction.getStepX() * f;
+            double e = (float)this.direction.getStepY() * f;
+            double g = (float)this.direction.getStepZ() * f;
             return Shapes.or(voxelShape, blockState.getCollisionShape(world, pos).move(d, e, g));
         }
     }
diff --git a/src/main/java/net/minecraft/world/level/block/state/BlockBehaviour.java b/src/main/java/net/minecraft/world/level/block/state/BlockBehaviour.java
index 469c2bd12c7f132bea645b6bf0a9f7026d8a7dc8..862de1ae5e39fdcd61e96cc3d29545b1705f9c25 100644
--- a/src/main/java/net/minecraft/world/level/block/state/BlockBehaviour.java
+++ b/src/main/java/net/minecraft/world/level/block/state/BlockBehaviour.java
@@ -418,7 +418,7 @@ public abstract class BlockBehaviour implements FeatureElement {
     protected abstract Block asBlock();
 
     public MaterialColor defaultMaterialColor() {
-        return (MaterialColor) this.properties.materialColor.apply(this.asBlock().defaultBlockState());
+        return this.properties.materialColor.apply(this.asBlock().defaultBlockState());
     }
 
     public float defaultDestroyTime() {
@@ -722,7 +722,7 @@ public abstract class BlockBehaviour implements FeatureElement {
             this.useShapeForLightOcclusion = block.useShapeForLightOcclusion(this.asState());
             this.isAir = blockbase_info.isAir;
             this.material = blockbase_info.material;
-            this.materialColor = (MaterialColor) blockbase_info.materialColor.apply(this.asState());
+            this.materialColor = blockbase_info.materialColor.apply(this.asState());
             this.destroySpeed = blockbase_info.destroyTime;
             this.requiresCorrectToolForDrops = blockbase_info.requiresCorrectToolForDrops;
             this.canOcclude = blockbase_info.canOcclude;
@@ -731,7 +731,7 @@ public abstract class BlockBehaviour implements FeatureElement {
             this.isViewBlocking = blockbase_info.isViewBlocking;
             this.hasPostProcess = blockbase_info.hasPostProcess;
             this.emissiveRendering = blockbase_info.emissiveRendering;
-            this.offsetType = (BlockBehaviour.OffsetType) blockbase_info.offsetType.apply(this.asState());
+            this.offsetType = blockbase_info.offsetType.apply(this.asState());
             this.spawnParticlesOnBreak = blockbase_info.spawnParticlesOnBreak;
             this.conditionallyFullOpaque = this.isOpaque() & this.isTransparentOnSomeFaces(); // Paper
         }
@@ -810,11 +810,11 @@ public abstract class BlockBehaviour implements FeatureElement {
         }
 
         public Block getBlock() {
-            return (Block) this.owner;
+            return this.owner;
         }
 
         public Holder<Block> getBlockHolder() {
-            return ((Block) this.owner).builtInRegistryHolder();
+            return this.owner.builtInRegistryHolder();
         }
 
         // Paper start
@@ -984,9 +984,9 @@ public abstract class BlockBehaviour implements FeatureElement {
                 Block block = this.getBlock();
                 long i = Mth.getSeed(pos.getX(), 0, pos.getZ());
                 float f = block.getMaxHorizontalOffset();
-                double d0 = Mth.clamp(((double) ((float) (i & 15L) / 15.0F) - 0.5D) * 0.5D, (double) (-f), (double) f);
+                double d0 = Mth.clamp(((double) ((float) (i & 15L) / 15.0F) - 0.5D) * 0.5D, -f, f);
                 double d1 = this.offsetType == BlockBehaviour.OffsetType.XYZ ? ((double) ((float) (i >> 4 & 15L) / 15.0F) - 1.0D) * (double) block.getMaxVerticalOffset() : 0.0D;
-                double d2 = Mth.clamp(((double) ((float) (i >> 8 & 15L) / 15.0F) - 0.5D) * 0.5D, (double) (-f), (double) f);
+                double d2 = Mth.clamp(((double) ((float) (i >> 8 & 15L) / 15.0F) - 0.5D) * 0.5D, -f, f);
 
                 return new Vec3(d0, d1, d2);
             }
diff --git a/src/main/java/net/minecraft/world/level/block/state/StateHolder.java b/src/main/java/net/minecraft/world/level/block/state/StateHolder.java
index 170f5cb3f01a57ad76e3bbeacd5b7c7e52f29959..3fbc2d741e47fb7150343a76834fb258a20b93bf 100644
--- a/src/main/java/net/minecraft/world/level/block/state/StateHolder.java
+++ b/src/main/java/net/minecraft/world/level/block/state/StateHolder.java
@@ -143,7 +143,7 @@ public abstract class StateHolder<O, S> {
                 }
             }
 
-            this.neighbours = (Table<Property<?>, Comparable<?>, S>)(table.isEmpty() ? table : ArrayTable.create(table)); this.optimisedTable.loadInTable((Table)this.neighbours, this.values); // Paper - optimise state lookup
+            this.neighbours = table.isEmpty() ? table : ArrayTable.create(table); this.optimisedTable.loadInTable((Table)this.neighbours, this.values); // Paper - optimise state lookup
         }
     }
 
diff --git a/src/main/java/net/minecraft/world/level/border/WorldBorder.java b/src/main/java/net/minecraft/world/level/border/WorldBorder.java
index 7a12a4da4864306ec6589ca81368e84718825047..0e7948ccd92240de9434239facf468bb8ff22509 100644
--- a/src/main/java/net/minecraft/world/level/border/WorldBorder.java
+++ b/src/main/java/net/minecraft/world/level/border/WorldBorder.java
@@ -194,7 +194,7 @@ public class WorldBorder {
             time = event.getDuration();
         }
         // Paper end
-        this.extent = (WorldBorder.BorderExtent) (fromSize == toSize ? new WorldBorder.StaticBorderExtent(toSize) : new WorldBorder.MovingBorderExtent(fromSize, toSize, time));
+        this.extent = fromSize == toSize ? new StaticBorderExtent(toSize) : new MovingBorderExtent(fromSize, toSize, time);
         Iterator iterator = this.getListeners().iterator();
 
         while (iterator.hasNext()) {
@@ -377,10 +377,10 @@ public class WorldBorder {
         }
 
         private void updateBox() {
-            this.minX = Mth.clamp(WorldBorder.this.getCenterX() - this.size / 2.0D, (double) (-WorldBorder.this.absoluteMaxSize), (double) WorldBorder.this.absoluteMaxSize);
-            this.minZ = Mth.clamp(WorldBorder.this.getCenterZ() - this.size / 2.0D, (double) (-WorldBorder.this.absoluteMaxSize), (double) WorldBorder.this.absoluteMaxSize);
-            this.maxX = Mth.clamp(WorldBorder.this.getCenterX() + this.size / 2.0D, (double) (-WorldBorder.this.absoluteMaxSize), (double) WorldBorder.this.absoluteMaxSize);
-            this.maxZ = Mth.clamp(WorldBorder.this.getCenterZ() + this.size / 2.0D, (double) (-WorldBorder.this.absoluteMaxSize), (double) WorldBorder.this.absoluteMaxSize);
+            this.minX = Mth.clamp(WorldBorder.this.getCenterX() - this.size / 2.0D, -WorldBorder.this.absoluteMaxSize, WorldBorder.this.absoluteMaxSize);
+            this.minZ = Mth.clamp(WorldBorder.this.getCenterZ() - this.size / 2.0D, -WorldBorder.this.absoluteMaxSize, WorldBorder.this.absoluteMaxSize);
+            this.maxX = Mth.clamp(WorldBorder.this.getCenterX() + this.size / 2.0D, -WorldBorder.this.absoluteMaxSize, WorldBorder.this.absoluteMaxSize);
+            this.maxZ = Mth.clamp(WorldBorder.this.getCenterZ() + this.size / 2.0D, -WorldBorder.this.absoluteMaxSize, WorldBorder.this.absoluteMaxSize);
             this.shape = Shapes.join(Shapes.INFINITY, Shapes.box(Math.floor(this.getMinX()), Double.NEGATIVE_INFINITY, Math.floor(this.getMinZ()), Math.ceil(this.getMaxX()), Double.POSITIVE_INFINITY, Math.ceil(this.getMaxZ())), BooleanOp.ONLY_FIRST);
         }
 
@@ -452,22 +452,22 @@ public class WorldBorder {
 
         @Override
         public double getMinX() {
-            return Mth.clamp(WorldBorder.this.getCenterX() - this.getSize() / 2.0D, (double) (-WorldBorder.this.absoluteMaxSize), (double) WorldBorder.this.absoluteMaxSize);
+            return Mth.clamp(WorldBorder.this.getCenterX() - this.getSize() / 2.0D, -WorldBorder.this.absoluteMaxSize, WorldBorder.this.absoluteMaxSize);
         }
 
         @Override
         public double getMinZ() {
-            return Mth.clamp(WorldBorder.this.getCenterZ() - this.getSize() / 2.0D, (double) (-WorldBorder.this.absoluteMaxSize), (double) WorldBorder.this.absoluteMaxSize);
+            return Mth.clamp(WorldBorder.this.getCenterZ() - this.getSize() / 2.0D, -WorldBorder.this.absoluteMaxSize, WorldBorder.this.absoluteMaxSize);
         }
 
         @Override
         public double getMaxX() {
-            return Mth.clamp(WorldBorder.this.getCenterX() + this.getSize() / 2.0D, (double) (-WorldBorder.this.absoluteMaxSize), (double) WorldBorder.this.absoluteMaxSize);
+            return Mth.clamp(WorldBorder.this.getCenterX() + this.getSize() / 2.0D, -WorldBorder.this.absoluteMaxSize, WorldBorder.this.absoluteMaxSize);
         }
 
         @Override
         public double getMaxZ() {
-            return Mth.clamp(WorldBorder.this.getCenterZ() + this.getSize() / 2.0D, (double) (-WorldBorder.this.absoluteMaxSize), (double) WorldBorder.this.absoluteMaxSize);
+            return Mth.clamp(WorldBorder.this.getCenterZ() + this.getSize() / 2.0D, -WorldBorder.this.absoluteMaxSize, WorldBorder.this.absoluteMaxSize);
         }
 
         @Override
@@ -506,7 +506,7 @@ public class WorldBorder {
         @Override
         public WorldBorder.BorderExtent update() {
             if (world != null && this.getLerpRemainingTime() <= 0L) new io.papermc.paper.event.world.border.WorldBorderBoundsChangeFinishEvent(world.getWorld(), world.getWorld().getWorldBorder(), this.from, this.to, this.lerpDuration).callEvent(); // Paper
-            return (WorldBorder.BorderExtent) (this.getLerpRemainingTime() <= 0L ? WorldBorder.this.new StaticBorderExtent(this.to) : this);
+            return this.getLerpRemainingTime() <= 0L ? WorldBorder.this.new StaticBorderExtent(this.to) : this;
         }
 
         @Override
@@ -609,8 +609,8 @@ public class WorldBorder {
             nbt.putDouble("BorderSafeZone", this.safeZone);
             nbt.putDouble("BorderDamagePerBlock", this.damagePerBlock);
             nbt.putDouble("BorderSizeLerpTarget", this.sizeLerpTarget);
-            nbt.putDouble("BorderWarningBlocks", (double) this.warningBlocks);
-            nbt.putDouble("BorderWarningTime", (double) this.warningTime);
+            nbt.putDouble("BorderWarningBlocks", this.warningBlocks);
+            nbt.putDouble("BorderWarningTime", this.warningTime);
         }
     }
 }
diff --git a/src/main/java/net/minecraft/world/level/chunk/ChunkAccess.java b/src/main/java/net/minecraft/world/level/chunk/ChunkAccess.java
index 0bbdd47238546c2f84f2de0b3d1e94b43bec842f..978b9c0ba49053f721ee0dcd3568216c2331a16e 100644
--- a/src/main/java/net/minecraft/world/level/chunk/ChunkAccess.java
+++ b/src/main/java/net/minecraft/world/level/chunk/ChunkAccess.java
@@ -215,7 +215,7 @@ public abstract class ChunkAccess implements BlockGetter, BiomeManager.NoiseBiom
     }
 
     public Heightmap getOrCreateHeightmapUnprimed(Heightmap.Types type) {
-        return (Heightmap) this.heightmaps.computeIfAbsent(type, (heightmap_type1) -> {
+        return this.heightmaps.computeIfAbsent(type, (heightmap_type1) -> {
             return new Heightmap(this, heightmap_type1);
         });
     }
@@ -225,7 +225,7 @@ public abstract class ChunkAccess implements BlockGetter, BiomeManager.NoiseBiom
     }
 
     public int getHeight(Heightmap.Types type, int x, int z) {
-        Heightmap heightmap = (Heightmap) this.heightmaps.get(type);
+        Heightmap heightmap = this.heightmaps.get(type);
 
         if (heightmap == null) {
             if (SharedConstants.IS_RUNNING_IN_IDE && this instanceof LevelChunk) {
@@ -233,7 +233,7 @@ public abstract class ChunkAccess implements BlockGetter, BiomeManager.NoiseBiom
             }
 
             Heightmap.primeHeightmaps(this, EnumSet.of(type));
-            heightmap = (Heightmap) this.heightmaps.get(type);
+            heightmap = this.heightmaps.get(type);
         }
 
         return heightmap.getFirstAvailable(x & 15, z & 15) - 1;
@@ -246,7 +246,7 @@ public abstract class ChunkAccess implements BlockGetter, BiomeManager.NoiseBiom
     @Nullable
     @Override
     public @org.jetbrains.annotations.Nullable StructureStart getStartForStructure(Structure structure) {
-        return (StructureStart) this.structureStarts.get(structure);
+        return this.structureStarts.get(structure);
     }
 
     @Override
@@ -267,14 +267,14 @@ public abstract class ChunkAccess implements BlockGetter, BiomeManager.NoiseBiom
 
     @Override
     public LongSet getReferencesForStructure(Structure structure) {
-        return (LongSet) this.structuresRefences.getOrDefault(structure, ChunkAccess.EMPTY_REFERENCE_SET);
+        return this.structuresRefences.getOrDefault(structure, ChunkAccess.EMPTY_REFERENCE_SET);
     }
 
     @Override
     public void addReferenceForStructure(Structure structure, long reference) {
-        ((LongSet) this.structuresRefences.computeIfAbsent(structure, (structure1) -> {
+        this.structuresRefences.computeIfAbsent(structure, (structure1) -> {
             return new LongOpenHashSet();
-        })).add(reference);
+        }).add(reference);
         this.unsaved = true;
     }
 
@@ -339,7 +339,7 @@ public abstract class ChunkAccess implements BlockGetter, BiomeManager.NoiseBiom
 
     @Nullable
     public @org.jetbrains.annotations.Nullable CompoundTag getBlockEntityNbt(BlockPos pos) {
-        return (CompoundTag) this.pendingBlockEntities.get(pos);
+        return this.pendingBlockEntities.get(pos);
     }
 
     @Nullable
@@ -411,7 +411,7 @@ public abstract class ChunkAccess implements BlockGetter, BiomeManager.NoiseBiom
 
     public NoiseChunk getOrCreateNoiseChunk(Function<ChunkAccess, NoiseChunk> chunkNoiseSamplerCreator) {
         if (this.noiseChunk == null) {
-            this.noiseChunk = (NoiseChunk) chunkNoiseSamplerCreator.apply(this);
+            this.noiseChunk = chunkNoiseSamplerCreator.apply(this);
         }
 
         return this.noiseChunk;
@@ -421,7 +421,7 @@ public abstract class ChunkAccess implements BlockGetter, BiomeManager.NoiseBiom
     @Deprecated
     public BiomeGenerationSettings carverBiome(Supplier<BiomeGenerationSettings> generationSettingsCreator) {
         if (this.carverBiomeSettings == null) {
-            this.carverBiomeSettings = (BiomeGenerationSettings) generationSettingsCreator.get();
+            this.carverBiomeSettings = generationSettingsCreator.get();
         }
 
         return this.carverBiomeSettings;
diff --git a/src/main/java/net/minecraft/world/level/chunk/ChunkGenerator.java b/src/main/java/net/minecraft/world/level/chunk/ChunkGenerator.java
index 8037a64b22875ad5ebf22595ff67910180b715bf..bbf7326308fcfca669246ea0ba5ead27b13fea54 100644
--- a/src/main/java/net/minecraft/world/level/chunk/ChunkGenerator.java
+++ b/src/main/java/net/minecraft/world/level/chunk/ChunkGenerator.java
@@ -86,7 +86,7 @@ public abstract class ChunkGenerator {
 
     public ChunkGenerator(BiomeSource biomeSource) {
         this(biomeSource, (holder) -> {
-            return ((Biome) holder.value()).getGenerationSettings();
+            return holder.value().getGenerationSettings();
         });
     }
 
@@ -152,9 +152,9 @@ public abstract class ChunkGenerator {
             while (iterator1.hasNext()) {
                 StructurePlacement structureplacement = (StructurePlacement) iterator1.next();
 
-                ((Set) map.computeIfAbsent(structureplacement, (structureplacement1) -> {
+                map.computeIfAbsent(structureplacement, (structureplacement1) -> {
                     return new ObjectArraySet();
-                })).add(holder);
+                }).add(holder);
             }
         }
 
@@ -169,14 +169,14 @@ public abstract class ChunkGenerator {
 
             while (iterator2.hasNext()) {
                 Entry<StructurePlacement, Set<Holder<Structure>>> entry = (Entry) iterator2.next();
-                StructurePlacement structureplacement1 = (StructurePlacement) entry.getKey();
+                StructurePlacement structureplacement1 = entry.getKey();
 
                 if (structureplacement1 instanceof ConcentricRingsStructurePlacement) {
                     ConcentricRingsStructurePlacement concentricringsstructureplacement = (ConcentricRingsStructurePlacement) structureplacement1;
-                    Pair<BlockPos, Holder<Structure>> pair1 = this.getNearestGeneratedStructure((Set) entry.getValue(), world, structuremanager, center, skipReferencedStructures, concentricringsstructureplacement);
+                    Pair<BlockPos, Holder<Structure>> pair1 = this.getNearestGeneratedStructure(entry.getValue(), world, structuremanager, center, skipReferencedStructures, concentricringsstructureplacement);
 
                     if (pair1 != null) {
-                        BlockPos blockposition1 = (BlockPos) pair1.getFirst();
+                        BlockPos blockposition1 = pair1.getFirst();
                         double d1 = center.distSqr(blockposition1);
 
                         if (d1 < d0) {
@@ -200,11 +200,11 @@ public abstract class ChunkGenerator {
                     while (iterator3.hasNext()) {
                         Entry<StructurePlacement, Set<Holder<Structure>>> entry1 = (Entry) iterator3.next();
                         RandomSpreadStructurePlacement randomspreadstructureplacement = (RandomSpreadStructurePlacement) entry1.getKey();
-                        Pair<BlockPos, Holder<Structure>> pair2 = ChunkGenerator.getNearestGeneratedStructure((Set) entry1.getValue(), world, structuremanager, j, k, l, skipReferencedStructures, chunkgeneratorstructurestate.getLevelSeed(), randomspreadstructureplacement);
+                        Pair<BlockPos, Holder<Structure>> pair2 = ChunkGenerator.getNearestGeneratedStructure(entry1.getValue(), world, structuremanager, j, k, l, skipReferencedStructures, chunkgeneratorstructurestate.getLevelSeed(), randomspreadstructureplacement);
 
                         if (pair2 != null) {
                             flag1 = true;
-                            double d2 = center.distSqr((Vec3i) pair2.getFirst());
+                            double d2 = center.distSqr(pair2.getFirst());
 
                             if (d2 < d0) {
                                 d0 = d2;
@@ -334,10 +334,10 @@ public abstract class ChunkGenerator {
             SectionPos sectionposition = SectionPos.of(chunkcoordintpair, generatoraccessseed.getMinSection());
             BlockPos blockposition = sectionposition.origin();
             Registry<Structure> iregistry = generatoraccessseed.registryAccess().registryOrThrow(Registries.STRUCTURE);
-            Map<Integer, List<Structure>> map = (Map) iregistry.stream().collect(Collectors.groupingBy((structure) -> {
+            Map<Integer, List<Structure>> map = iregistry.stream().collect(Collectors.groupingBy((structure) -> {
                 return Integer.valueOf(structure.step().ordinal());
             }));
-            List<FeatureSorter.StepFeatureData> list = (List) this.featuresPerStep.get();
+            List<FeatureSorter.StepFeatureData> list = this.featuresPerStep.get();
             WorldgenRandom seededrandom = new WorldgenRandom(new XoroshiroRandomSource(RandomSupport.generateUniqueSeed()));
             long i = seededrandom.setDecorationSeed(generatoraccessseed.getSeed(), blockposition.getX(), blockposition.getZ());
             Set<Holder<Biome>> set = new ObjectArraySet();
@@ -369,7 +369,7 @@ public abstract class ChunkGenerator {
                     CrashReportCategory crashreportsystemdetails;
 
                     if (structuremanager.shouldGenerateStructures()) {
-                        List<Structure> list1 = (List) map.getOrDefault(Integer.valueOf(l), Collections.emptyList());
+                        List<Structure> list1 = map.getOrDefault(Integer.valueOf(l), Collections.emptyList());
 
                         for (iterator = list1.iterator(); iterator.hasNext(); ++i1) {
                             Structure structure = (Structure) iterator.next();
@@ -405,11 +405,11 @@ public abstract class ChunkGenerator {
 
                         while (iterator.hasNext()) {
                             Holder<Biome> holder = (Holder) iterator.next();
-                            List<HolderSet<PlacedFeature>> list2 = ((BiomeGenerationSettings) this.generationSettingsGetter.apply(holder)).features();
+                            List<HolderSet<PlacedFeature>> list2 = this.generationSettingsGetter.apply(holder).features();
 
                             if (l < list2.size()) {
-                                HolderSet<PlacedFeature> holderset = (HolderSet) list2.get(l);
-                                FeatureSorter.StepFeatureData featuresorter_b = (FeatureSorter.StepFeatureData) list.get(l);
+                                HolderSet<PlacedFeature> holderset = list2.get(l);
+                                FeatureSorter.StepFeatureData featuresorter_b = list.get(l);
 
                                 holderset.stream().map(Holder::value).forEach((placedfeature) -> {
                                     intarrayset.add(featuresorter_b.indexMapping().applyAsInt(placedfeature));
@@ -421,11 +421,11 @@ public abstract class ChunkGenerator {
                         int[] aint = intarrayset.toIntArray();
 
                         Arrays.sort(aint);
-                        FeatureSorter.StepFeatureData featuresorter_b1 = (FeatureSorter.StepFeatureData) list.get(l);
+                        FeatureSorter.StepFeatureData featuresorter_b1 = list.get(l);
 
                         for (int k1 = 0; k1 < j1; ++k1) {
                             int l1 = aint[k1];
-                            PlacedFeature placedfeature = (PlacedFeature) featuresorter_b1.features().get(l1);
+                            PlacedFeature placedfeature = featuresorter_b1.features().get(l1);
                             Supplier<String> supplier1 = () -> {
                                 Optional optional = iregistry1.getResourceKey(placedfeature).map(Object::toString);
 
@@ -457,7 +457,7 @@ public abstract class ChunkGenerator {
                     }
                 }
 
-                generatoraccessseed.setCurrentlyGenerating((Supplier) null);
+                generatoraccessseed.setCurrentlyGenerating(null);
             } catch (Exception exception2) {
                 CrashReport crashreport2 = CrashReport.forThrowable(exception2, "Biome decoration");
 
@@ -525,8 +525,8 @@ public abstract class ChunkGenerator {
 
         while (iterator.hasNext()) {
             Entry<Structure, LongSet> entry = (Entry) iterator.next();
-            Structure structure = (Structure) entry.getKey();
-            StructureSpawnOverride structurespawnoverride = (StructureSpawnOverride) structure.spawnOverrides().get(group);
+            Structure structure = entry.getKey();
+            StructureSpawnOverride structurespawnoverride = structure.spawnOverrides().get(group);
 
             if (structurespawnoverride != null) {
                 MutableBoolean mutableboolean = new MutableBoolean(false);
@@ -536,7 +536,7 @@ public abstract class ChunkGenerator {
                     return structurestart.getBoundingBox().isInside(pos);
                 };
 
-                accessor.fillStartsForStructure(structure, (LongSet) entry.getValue(), (structurestart) -> {
+                accessor.fillStartsForStructure(structure, entry.getValue(), (structurestart) -> {
                     if (mutableboolean.isFalse() && predicate.test(structurestart)) {
                         mutableboolean.setTrue();
                     }
@@ -548,7 +548,7 @@ public abstract class ChunkGenerator {
             }
         }
 
-        return ((Biome) biome.value()).getMobSettings().getMobs(group);
+        return biome.value().getMobSettings().getMobs(group);
     }
 
     public void createStructures(RegistryAccess registryManager, ChunkGeneratorStructureState placementCalculator, StructureManager structureAccessor, ChunkAccess chunk, StructureTemplateManager structureTemplateManager) {
@@ -563,7 +563,7 @@ public abstract class ChunkGenerator {
 
             while (iterator.hasNext()) {
                 StructureSet.StructureSelectionEntry structureset_a = (StructureSet.StructureSelectionEntry) iterator.next();
-                StructureStart structurestart = structureAccessor.getStartForStructure(sectionposition, (Structure) structureset_a.structure().value(), chunk);
+                StructureStart structurestart = structureAccessor.getStartForStructure(sectionposition, structureset_a.structure().value(), chunk);
 
                 if (structurestart != null && structurestart.isValid()) {
                     return;
@@ -572,7 +572,7 @@ public abstract class ChunkGenerator {
 
             if (structureplacement.isStructureChunk(placementCalculator, chunkcoordintpair.x, chunkcoordintpair.z, structureplacement instanceof net.minecraft.world.level.chunk.ChunkGeneratorStructureState.KeyedRandomSpreadStructurePlacement keyed ? keyed.key : null)) { // Paper - add missing structure set configs
                 if (list.size() == 1) {
-                    this.tryGenerateStructure((StructureSet.StructureSelectionEntry) list.get(0), structureAccessor, registryManager, randomstate, structureTemplateManager, placementCalculator.getLevelSeed(), chunk, chunkcoordintpair, sectionposition);
+                    this.tryGenerateStructure(list.get(0), structureAccessor, registryManager, randomstate, structureTemplateManager, placementCalculator.getLevelSeed(), chunk, chunkcoordintpair, sectionposition);
                 } else {
                     ArrayList<StructureSet.StructureSelectionEntry> arraylist = new ArrayList(list.size());
 
@@ -604,7 +604,7 @@ public abstract class ChunkGenerator {
                                 }
                             }
 
-                            StructureSet.StructureSelectionEntry structureset_a3 = (StructureSet.StructureSelectionEntry) arraylist.get(k);
+                            StructureSet.StructureSelectionEntry structureset_a3 = arraylist.get(k);
 
                             if (this.tryGenerateStructure(structureset_a3, structureAccessor, registryManager, randomstate, structureTemplateManager, placementCalculator.getLevelSeed(), chunk, chunkcoordintpair, sectionposition)) {
                                 return;
@@ -622,7 +622,7 @@ public abstract class ChunkGenerator {
     }
 
     private boolean tryGenerateStructure(StructureSet.StructureSelectionEntry weightedEntry, StructureManager structureAccessor, RegistryAccess dynamicRegistryManager, RandomState noiseConfig, StructureTemplateManager structureManager, long seed, ChunkAccess chunk, ChunkPos pos, SectionPos sectionPos) {
-        Structure structure = (Structure) weightedEntry.structure().value();
+        Structure structure = weightedEntry.structure().value();
         int j = ChunkGenerator.fetchReferences(structureAccessor, chunk, sectionPos, structure);
         HolderSet<Biome> holderset = structure.biomes();
 
@@ -672,7 +672,7 @@ public abstract class ChunkGenerator {
                         Optional<? extends Registry<Structure>> optional = world.registryAccess().registry(Registries.STRUCTURE);
 
                         crashreportsystemdetails.setDetail("Id", () -> {
-                            return (String) optional.map((iregistry) -> {
+                            return optional.map((iregistry) -> {
                                 return iregistry.getKey(structurestart.getStructure()).toString();
                             }).orElse("UNKNOWN");
                         });
@@ -713,6 +713,6 @@ public abstract class ChunkGenerator {
     /** @deprecated */
     @Deprecated
     public BiomeGenerationSettings getBiomeGenerationSettings(Holder<Biome> biomeEntry) {
-        return (BiomeGenerationSettings) this.generationSettingsGetter.apply(biomeEntry);
+        return this.generationSettingsGetter.apply(biomeEntry);
     }
 }
diff --git a/src/main/java/net/minecraft/world/level/chunk/ChunkStatus.java b/src/main/java/net/minecraft/world/level/chunk/ChunkStatus.java
index 7160dbf52a527259ce6cc308bd3d3c3444636836..437bccff40b0d8d9ff5d1e90053015bdab4d6ba2 100644
--- a/src/main/java/net/minecraft/world/level/chunk/ChunkStatus.java
+++ b/src/main/java/net/minecraft/world/level/chunk/ChunkStatus.java
@@ -68,7 +68,7 @@ public class ChunkStatus {
 
         return CompletableFuture.completedFuture(Either.left(ichunkaccess));
     };
-    public static final ChunkStatus EMPTY = ChunkStatus.registerSimple("empty", (ChunkStatus) null, -1, ChunkStatus.PRE_FEATURES, ChunkStatus.ChunkType.PROTOCHUNK, (chunkstatus, worldserver, chunkgenerator, list, ichunkaccess) -> {
+    public static final ChunkStatus EMPTY = ChunkStatus.registerSimple("empty", null, -1, ChunkStatus.PRE_FEATURES, ChunkStatus.ChunkType.PROTOCHUNK, (chunkstatus, worldserver, chunkgenerator, list, ichunkaccess) -> {
     });
     public static final ChunkStatus STRUCTURE_STARTS = ChunkStatus.register("structure_starts", ChunkStatus.EMPTY, 0, ChunkStatus.PRE_FEATURES, ChunkStatus.ChunkType.PROTOCHUNK, (chunkstatus, executor, worldserver, chunkgenerator, structuretemplatemanager, lightenginethreaded, function, list, ichunkaccess, flag) -> {
         if (!ichunkaccess.getStatus().isOrAfter(chunkstatus)) {
@@ -191,16 +191,16 @@ public class ChunkStatus {
     public static final ChunkStatus HEIGHTMAPS = ChunkStatus.registerSimple("heightmaps", ChunkStatus.SPAWN, 0, ChunkStatus.POST_FEATURES, ChunkStatus.ChunkType.PROTOCHUNK, (chunkstatus, worldserver, chunkgenerator, list, ichunkaccess) -> {
     });
     public static final ChunkStatus FULL = ChunkStatus.register("full", ChunkStatus.HEIGHTMAPS, 0, ChunkStatus.POST_FEATURES, ChunkStatus.ChunkType.LEVELCHUNK, (chunkstatus, executor, worldserver, chunkgenerator, structuretemplatemanager, lightenginethreaded, function, list, ichunkaccess, flag) -> {
-        return (CompletableFuture) function.apply(ichunkaccess);
+        return function.apply(ichunkaccess);
     }, (chunkstatus, worldserver, structuretemplatemanager, lightenginethreaded, function, ichunkaccess) -> {
-        return (CompletableFuture) function.apply(ichunkaccess);
+        return function.apply(ichunkaccess);
     });
     private static final List<ChunkStatus> STATUS_BY_RANGE = ImmutableList.of(ChunkStatus.FULL, ChunkStatus.FEATURES, ChunkStatus.LIQUID_CARVERS, ChunkStatus.BIOMES, ChunkStatus.STRUCTURE_STARTS, ChunkStatus.STRUCTURE_STARTS, ChunkStatus.STRUCTURE_STARTS, ChunkStatus.STRUCTURE_STARTS, ChunkStatus.STRUCTURE_STARTS, ChunkStatus.STRUCTURE_STARTS, ChunkStatus.STRUCTURE_STARTS, ChunkStatus.STRUCTURE_STARTS);
-    private static final IntList RANGE_BY_STATUS = (IntList) Util.make(new IntArrayList(ChunkStatus.getStatusList().size()), (intarraylist) -> {
+    private static final IntList RANGE_BY_STATUS = Util.make(new IntArrayList(ChunkStatus.getStatusList().size()), (intarraylist) -> {
         int i = 0;
 
         for (int j = ChunkStatus.getStatusList().size() - 1; j >= 0; --j) {
-            while (i + 1 < ChunkStatus.STATUS_BY_RANGE.size() && j <= ((ChunkStatus) ChunkStatus.STATUS_BY_RANGE.get(i + 1)).getIndex()) {
+            while (i + 1 < ChunkStatus.STATUS_BY_RANGE.size() && j <= ChunkStatus.STATUS_BY_RANGE.get(i + 1).getIndex()) {
                 ++i;
             }
 
@@ -236,7 +236,7 @@ public class ChunkStatus {
     }
 
     private static ChunkStatus register(String id, @Nullable ChunkStatus previous, int taskMargin, EnumSet<Heightmap.Types> heightMapTypes, ChunkStatus.ChunkType chunkType, ChunkStatus.GenerationTask task, ChunkStatus.LoadingTask loadTask) {
-        return (ChunkStatus) Registry.register(BuiltInRegistries.CHUNK_STATUS, id, new ChunkStatus(id, previous, taskMargin, heightMapTypes, chunkType, task, loadTask));
+        return Registry.register(BuiltInRegistries.CHUNK_STATUS, id, new ChunkStatus(id, previous, taskMargin, heightMapTypes, chunkType, task, loadTask));
     }
 
     public static List<ChunkStatus> getStatusList() {
@@ -258,7 +258,7 @@ public class ChunkStatus {
     }
 
     public static ChunkStatus getStatusAroundFullChunk(int level) {
-        return level >= ChunkStatus.STATUS_BY_RANGE.size() ? ChunkStatus.EMPTY : (level < 0 ? ChunkStatus.FULL : (ChunkStatus) ChunkStatus.STATUS_BY_RANGE.get(level));
+        return level >= ChunkStatus.STATUS_BY_RANGE.size() ? ChunkStatus.EMPTY : (level < 0 ? ChunkStatus.FULL : ChunkStatus.STATUS_BY_RANGE.get(level));
     }
 
     public static int maxDistance() {
@@ -300,7 +300,7 @@ public class ChunkStatus {
     }
 
     public CompletableFuture<Either<ChunkAccess, ChunkHolder.ChunkLoadingFailure>> generate(Executor executor, ServerLevel world, ChunkGenerator generator, StructureTemplateManager structureTemplateManager, ThreadedLevelLightEngine lightingProvider, Function<ChunkAccess, CompletableFuture<Either<ChunkAccess, ChunkHolder.ChunkLoadingFailure>>> fullChunkConverter, List<ChunkAccess> chunks, boolean regenerate) {
-        ChunkAccess ichunkaccess = (ChunkAccess) chunks.get(chunks.size() / 2);
+        ChunkAccess ichunkaccess = chunks.get(chunks.size() / 2);
         ProfiledDuration profiledduration = JvmProfiler.INSTANCE.onChunkGenerate(ichunkaccess.getPos(), world.dimension(), this.name);
         CompletableFuture<Either<ChunkAccess, ChunkHolder.ChunkLoadingFailure>> completablefuture = this.generationTask.doWork(this, executor, world, generator, structureTemplateManager, lightingProvider, fullChunkConverter, chunks, ichunkaccess, regenerate);
 
diff --git a/src/main/java/net/minecraft/world/level/chunk/DataLayer.java b/src/main/java/net/minecraft/world/level/chunk/DataLayer.java
index 0c527a8fe6a526a89fa65ba05afdbe554bc07e08..a40eb871441ef9e76232a8a67f496a23d395a0b1 100644
--- a/src/main/java/net/minecraft/world/level/chunk/DataLayer.java
+++ b/src/main/java/net/minecraft/world/level/chunk/DataLayer.java
@@ -19,7 +19,7 @@ public final class DataLayer {
     public DataLayer(byte[] bytes) {
         this.data = bytes;
         if (bytes.length != 2048) {
-            throw (IllegalArgumentException) Util.pauseInIde(new IllegalArgumentException("DataLayer should be 2048 bytes not: " + bytes.length));
+            throw Util.pauseInIde(new IllegalArgumentException("DataLayer should be 2048 bytes not: " + bytes.length));
         }
     }
 
@@ -80,7 +80,7 @@ public final class DataLayer {
     }
 
     public DataLayer copy() {
-        return this.data == null ? new DataLayer() : new DataLayer((byte[]) this.data.clone());
+        return this.data == null ? new DataLayer() : new DataLayer(this.data.clone());
     }
 
     public String toString() {
diff --git a/src/main/java/net/minecraft/world/level/chunk/ImposterProtoChunk.java b/src/main/java/net/minecraft/world/level/chunk/ImposterProtoChunk.java
index 9a1cffd51aaf97f759a9057aefbf50bd6f5ed028..21595ea481dfd5c96549fc29b770f2aeaf9070f9 100644
--- a/src/main/java/net/minecraft/world/level/chunk/ImposterProtoChunk.java
+++ b/src/main/java/net/minecraft/world/level/chunk/ImposterProtoChunk.java
@@ -290,7 +290,7 @@ public class ImposterProtoChunk extends ProtoChunk {
         if (this.allowWrites) {
             return super.getCarvingMask(step);
         } else {
-            throw (UnsupportedOperationException)Util.pauseInIde(new UnsupportedOperationException("Meaningless in this context"));
+            throw Util.pauseInIde(new UnsupportedOperationException("Meaningless in this context"));
         }
     }
 
@@ -299,7 +299,7 @@ public class ImposterProtoChunk extends ProtoChunk {
         if (this.allowWrites) {
             return super.getOrCreateCarvingMask(step);
         } else {
-            throw (UnsupportedOperationException)Util.pauseInIde(new UnsupportedOperationException("Meaningless in this context"));
+            throw Util.pauseInIde(new UnsupportedOperationException("Meaningless in this context"));
         }
     }
 
diff --git a/src/main/java/net/minecraft/world/level/chunk/LevelChunk.java b/src/main/java/net/minecraft/world/level/chunk/LevelChunk.java
index 02cc492a5402eec9985e67c38e0c2e39d63441ea..77d4c8971c90fdbf00f9c5319256ee971a3b45b9 100644
--- a/src/main/java/net/minecraft/world/level/chunk/LevelChunk.java
+++ b/src/main/java/net/minecraft/world/level/chunk/LevelChunk.java
@@ -89,7 +89,7 @@ public class LevelChunk extends ChunkAccess {
     private final LevelChunkTicks<Fluid> fluidTicks;
 
     public LevelChunk(Level world, ChunkPos pos) {
-        this(world, pos, UpgradeData.EMPTY, new LevelChunkTicks<>(), new LevelChunkTicks<>(), 0L, (LevelChunkSection[]) null, (LevelChunk.PostLoadProcessor) null, (BlendingData) null);
+        this(world, pos, UpgradeData.EMPTY, new LevelChunkTicks<>(), new LevelChunkTicks<>(), 0L, null, null, null);
     }
 
     public LevelChunk(Level world, ChunkPos pos, UpgradeData upgradeData, LevelChunkTicks<Block> blockTickScheduler, LevelChunkTicks<Fluid> fluidTickScheduler, long inhabitedTime, @Nullable LevelChunkSection[] sectionArrayInitializer, @Nullable LevelChunk.PostLoadProcessor entityLoader, @Nullable BlendingData blendingData) {
@@ -185,7 +185,7 @@ public class LevelChunk extends ChunkAccess {
     protected void onNeighbourChange(final long bitsetBefore, final long bitsetAfter) {
 
         // Paper start - no-tick view distance
-        ServerChunkCache chunkProviderServer = ((ServerLevel)this.level).getChunkSource();
+        ServerChunkCache chunkProviderServer = this.level.getChunkSource();
         net.minecraft.server.level.ChunkMap chunkMap = chunkProviderServer.chunkMap;
         // this code handles the addition of ticking tickets - the distance map handles the removal
         if (!areNeighboursLoaded(bitsetBefore, 2) && areNeighboursLoaded(bitsetAfter, 2)) {
@@ -281,7 +281,7 @@ public class LevelChunk extends ChunkAccess {
     }
 
     public void updateGeneralAreaCache() {
-        this.updateGeneralAreaCache(((ServerLevel)this.level).getChunkSource().chunkMap.playerGeneralAreaMap.getObjectsInRange(this.coordinateKey));
+        this.updateGeneralAreaCache(this.level.getChunkSource().chunkMap.playerGeneralAreaMap.getObjectsInRange(this.coordinateKey));
     }
 
     public void removeGeneralAreaCache() {
@@ -392,7 +392,7 @@ public class LevelChunk extends ChunkAccess {
             Entry<Heightmap.Types, Heightmap> entry = (Entry) iterator.next();
 
             if (ChunkStatus.FULL.heightmapsAfter().contains(entry.getKey())) {
-                this.setHeightmap((Heightmap.Types) entry.getKey(), ((Heightmap) entry.getValue()).getRawData());
+                this.setHeightmap(entry.getKey(), entry.getValue().getRawData());
             }
         }
 
@@ -572,10 +572,10 @@ public class LevelChunk extends ChunkAccess {
             } else {
                 Block block = iblockdata.getBlock();
 
-                ((Heightmap) this.heightmaps.get(Heightmap.Types.MOTION_BLOCKING)).update(j, i, l, iblockdata);
-                ((Heightmap) this.heightmaps.get(Heightmap.Types.MOTION_BLOCKING_NO_LEAVES)).update(j, i, l, iblockdata);
-                ((Heightmap) this.heightmaps.get(Heightmap.Types.OCEAN_FLOOR)).update(j, i, l, iblockdata);
-                ((Heightmap) this.heightmaps.get(Heightmap.Types.WORLD_SURFACE)).update(j, i, l, iblockdata);
+                this.heightmaps.get(Heightmap.Types.MOTION_BLOCKING).update(j, i, l, iblockdata);
+                this.heightmaps.get(Heightmap.Types.MOTION_BLOCKING_NO_LEAVES).update(j, i, l, iblockdata);
+                this.heightmaps.get(Heightmap.Types.OCEAN_FLOOR).update(j, i, l, iblockdata);
+                this.heightmaps.get(Heightmap.Types.WORLD_SURFACE).update(j, i, l, iblockdata);
                 boolean flag2 = chunksection.hasOnlyAir();
 
                 if (flag1 != flag2) {
@@ -643,12 +643,12 @@ public class LevelChunk extends ChunkAccess {
         // CraftBukkit start
         BlockEntity tileentity = level.capturedTileEntities.get(pos);
         if (tileentity == null) {
-            tileentity = (BlockEntity) this.blockEntities.get(pos);
+            tileentity = this.blockEntities.get(pos);
         }
         // CraftBukkit end
 
         if (tileentity == null) {
-            CompoundTag nbttagcompound = (CompoundTag) this.pendingBlockEntities.remove(pos);
+            CompoundTag nbttagcompound = this.pendingBlockEntities.remove(pos);
 
             if (nbttagcompound != null) {
                 BlockEntity tileentity1 = this.promotePendingBlockEntity(pos, nbttagcompound);
@@ -717,7 +717,7 @@ public class LevelChunk extends ChunkAccess {
         if (this.getBlockState(blockposition).hasBlockEntity()) {
             blockEntity.setLevel(this.level);
             blockEntity.clearRemoved();
-            BlockEntity tileentity1 = (BlockEntity) this.blockEntities.put(blockposition.immutable(), blockEntity);
+            BlockEntity tileentity1 = this.blockEntities.put(blockposition.immutable(), blockEntity);
 
             if (tileentity1 != null && tileentity1 != blockEntity) {
                 tileentity1.setRemoved();
@@ -750,7 +750,7 @@ public class LevelChunk extends ChunkAccess {
             nbttagcompound.putBoolean("keepPacked", false);
             return nbttagcompound;
         } else {
-            nbttagcompound = (CompoundTag) this.pendingBlockEntities.get(pos);
+            nbttagcompound = this.pendingBlockEntities.get(pos);
             if (nbttagcompound != null) {
                 nbttagcompound = nbttagcompound.copy();
                 nbttagcompound.putBoolean("keepPacked", true);
@@ -763,7 +763,7 @@ public class LevelChunk extends ChunkAccess {
     @Override
     public void removeBlockEntity(BlockPos pos) {
         if (this.isInLevel()) {
-            BlockEntity tileentity = (BlockEntity) this.blockEntities.remove(pos);
+            BlockEntity tileentity = this.blockEntities.remove(pos);
 
             // CraftBukkit start - SPIGOT-5561: Also remove from pending map
             if (!pendingBlockEntities.isEmpty()) {
@@ -807,7 +807,7 @@ public class LevelChunk extends ChunkAccess {
     }
 
     private void removeBlockEntityTicker(BlockPos pos) {
-        LevelChunk.RebindableTickingBlockEntityWrapper chunk_d = (LevelChunk.RebindableTickingBlockEntityWrapper) this.tickersInLevel.remove(pos);
+        LevelChunk.RebindableTickingBlockEntityWrapper chunk_d = this.tickersInLevel.remove(pos);
 
         if (chunk_d != null) {
             chunk_d.rebind(LevelChunk.NULL_TICKER);
@@ -906,7 +906,7 @@ public class LevelChunk extends ChunkAccess {
         // Paper - rewrite chunk system - move into separate callback
         org.bukkit.Server server = this.level.getCraftServer();
         // Paper - rewrite chunk system - move into separate callback
-        ((ServerLevel)this.level).getChunkSource().chunkMap.playerChunkManager.onChunkLoad(this.chunkPos.x, this.chunkPos.z); // Paper - rewrite player chunk management
+        this.level.getChunkSource().chunkMap.playerChunkManager.onChunkLoad(this.chunkPos.x, this.chunkPos.z); // Paper - rewrite player chunk management
         if (server != null) {
             /*
              * If it's a new world, the first few chunks are generated inside
@@ -1061,7 +1061,7 @@ public class LevelChunk extends ChunkAccess {
                 ShortListIterator shortlistiterator = this.postProcessing[i].iterator();
 
                 while (shortlistiterator.hasNext()) {
-                    Short oshort = (Short) shortlistiterator.next();
+                    Short oshort = shortlistiterator.next();
                     BlockPos blockposition = ProtoChunk.unpackOffsetCoordinates(oshort.shortValue(), this.getSectionYFromSectionIndex(i), chunkcoordintpair);
                     BlockState iblockdata = this.getBlockState(blockposition);
                     FluidState fluid = iblockdata.getFluidState();
diff --git a/src/main/java/net/minecraft/world/level/chunk/LevelChunkSection.java b/src/main/java/net/minecraft/world/level/chunk/LevelChunkSection.java
index b0c9fce9d4e06cac139e341d218d0b6aac1f1943..b978cdecc88c368d844f0662dc232ee82265ec21 100644
--- a/src/main/java/net/minecraft/world/level/chunk/LevelChunkSection.java
+++ b/src/main/java/net/minecraft/world/level/chunk/LevelChunkSection.java
@@ -155,7 +155,7 @@ public class LevelChunkSection {
     }
 
     public BlockState getBlockState(int x, int y, int z) {
-        return (BlockState) this.states.get(x, y, z);
+        return this.states.get(x, y, z);
     }
 
     public FluidState getFluidState(int x, int y, int z) {
@@ -178,9 +178,9 @@ public class LevelChunkSection {
         BlockState iblockdata1; // Paper - iblockdata1 -> oldState
 
         if (lock) {
-            iblockdata1 = (BlockState) this.states.getAndSet(x, y, z, state);
+            iblockdata1 = this.states.getAndSet(x, y, z, state);
         } else {
-            iblockdata1 = (BlockState) this.states.getAndSetUnchecked(x, y, z, state);
+            iblockdata1 = this.states.getAndSetUnchecked(x, y, z, state);
         }
 
         FluidState fluid = iblockdata1.getFluidState();
@@ -302,7 +302,7 @@ public class LevelChunkSection {
     }
 
     public Holder<Biome> getNoiseBiome(int x, int y, int z) {
-        return (Holder) this.biomes.get(x, y, z);
+        return this.biomes.get(x, y, z);
     }
 
     // CraftBukkit start
diff --git a/src/main/java/net/minecraft/world/level/chunk/PalettedContainer.java b/src/main/java/net/minecraft/world/level/chunk/PalettedContainer.java
index de21a690012c3f3044e23eb564fba7230677339b..c6133483165aa477526e6c2fe29b2fc7bdef1c28 100644
--- a/src/main/java/net/minecraft/world/level/chunk/PalettedContainer.java
+++ b/src/main/java/net/minecraft/world/level/chunk/PalettedContainer.java
@@ -118,7 +118,7 @@ public class PalettedContainer<T> implements PaletteResize<T>, PalettedContainer
         // Paper end
         this.strategy = paletteProvider;
         this.registry = idList;
-        this.data = this.createOrReuseData((PalettedContainer.Data<T>)null, 0);
+        this.data = this.createOrReuseData(null, 0);
         this.data.palette.idFor(object);
     }
 
@@ -376,7 +376,7 @@ public class PalettedContainer<T> implements PaletteResize<T>, PalettedContainer
 
     static record Configuration<T>(Palette.Factory factory, int bits) {
         public PalettedContainer.Data<T> createData(IdMap<T> idList, PaletteResize<T> listener, int size) {
-            BitStorage bitStorage = (BitStorage)(this.bits == 0 ? new ZeroBitStorage(size) : new SimpleBitStorage(this.bits, size));
+            BitStorage bitStorage = this.bits == 0 ? new ZeroBitStorage(size) : new SimpleBitStorage(this.bits, size);
             Palette<T> palette = this.factory.create(this.bits, idList, listener, List.of());
             return new PalettedContainer.Data<>(this, bitStorage, palette);
         }
diff --git a/src/main/java/net/minecraft/world/level/chunk/ProtoChunk.java b/src/main/java/net/minecraft/world/level/chunk/ProtoChunk.java
index cf8e0b230529480e04d90011f5f37e4c80a46f35..ee82d8906475e811c97d7e483020f10cad9d5afa 100644
--- a/src/main/java/net/minecraft/world/level/chunk/ProtoChunk.java
+++ b/src/main/java/net/minecraft/world/level/chunk/ProtoChunk.java
@@ -47,7 +47,7 @@ public class ProtoChunk extends ChunkAccess {
     private final ProtoChunkTicks<Fluid> fluidTicks;
 
     public ProtoChunk(ChunkPos pos, UpgradeData upgradeData, LevelHeightAccessor world, Registry<Biome> biomeRegistry, @Nullable BlendingData blendingData) {
-        this(pos, upgradeData, (LevelChunkSection[])null, new ProtoChunkTicks<>(), new ProtoChunkTicks<>(), world, biomeRegistry, blendingData);
+        this(pos, upgradeData, null, new ProtoChunkTicks<>(), new ProtoChunkTicks<>(), world, biomeRegistry, blendingData);
     }
 
     public ProtoChunk(ChunkPos pos, UpgradeData upgradeData, @Nullable LevelChunkSection[] sections, ProtoChunkTicks<Block> blockTickScheduler, ProtoChunkTicks<Fluid> fluidTickScheduler, LevelHeightAccessor world, Registry<Biome> biomeRegistry, @Nullable BlendingData blendingData) {
@@ -242,7 +242,7 @@ public class ProtoChunk extends ChunkAccess {
     public void setStatus(ChunkStatus status) {
         this.status = status;
         if (this.belowZeroRetrogen != null && status.isOrAfter(this.belowZeroRetrogen.targetStatus())) {
-            this.setBelowZeroRetrogen((BelowZeroRetrogen)null);
+            this.setBelowZeroRetrogen(null);
         }
 
         this.setUnsaved(true);
@@ -347,6 +347,6 @@ public class ProtoChunk extends ChunkAccess {
 
     @Override
     public LevelHeightAccessor getHeightAccessorForGeneration() {
-        return (LevelHeightAccessor)(this.isUpgrading() ? BelowZeroRetrogen.UPGRADE_HEIGHT_ACCESSOR : this);
+        return this.isUpgrading() ? BelowZeroRetrogen.UPGRADE_HEIGHT_ACCESSOR : this;
     }
 }
diff --git a/src/main/java/net/minecraft/world/level/chunk/storage/ChunkSerializer.java b/src/main/java/net/minecraft/world/level/chunk/storage/ChunkSerializer.java
index fdfca5b4aaed2e94a014153de83d5074b47b005c..53fd507190e714550cc10f134418ea28e45c2fbf 100644
--- a/src/main/java/net/minecraft/world/level/chunk/storage/ChunkSerializer.java
+++ b/src/main/java/net/minecraft/world/level/chunk/storage/ChunkSerializer.java
@@ -199,7 +199,7 @@ public class ChunkSerializer {
                     });
                     logger = ChunkSerializer.LOGGER;
                     Objects.requireNonNull(logger);
-                    datapaletteblock = (PalettedContainer) ((DataResult<PalettedContainer<BlockState>>) dataresult).getOrThrow(false, logger::error); // CraftBukkit - decompile error
+                    datapaletteblock = ((DataResult<PalettedContainer<BlockState>>) dataresult).getOrThrow(false, logger::error); // CraftBukkit - decompile error
                 } else {
                     datapaletteblock = new PalettedContainer<>(Block.BLOCK_STATE_REGISTRY, Blocks.AIR.defaultBlockState(), PalettedContainer.Strategy.SECTION_STATES, presetBlockStates);
                     // Paper end
@@ -218,7 +218,7 @@ public class ChunkSerializer {
                     object = new PalettedContainer<>(iregistry.asHolderIdMap(), iregistry.getHolderOrThrow(Biomes.PLAINS), PalettedContainer.Strategy.SECTION_BIOMES, null); // Paper - Anti-Xray - Add preset biomes
                 }
 
-                LevelChunkSection chunksection = new LevelChunkSection(b0, datapaletteblock, (PalettedContainer) object); // CraftBukkit - read/write
+                LevelChunkSection chunksection = new LevelChunkSection(b0, datapaletteblock, object); // CraftBukkit - read/write
 
                 achunksection[k] = chunksection;
                 tasksToExecuteOnMain.add(() -> { // Paper - delay this task since we're executing off-main
@@ -274,7 +274,7 @@ public class ChunkSerializer {
             dataresult = BlendingData.CODEC.parse(new Dynamic(NbtOps.INSTANCE, nbt.getCompound("blending_data")));
             logger1 = ChunkSerializer.LOGGER;
             Objects.requireNonNull(logger1);
-            blendingdata = (BlendingData) ((DataResult<BlendingData>) dataresult).resultOrPartial(logger1::error).orElse(null); // CraftBukkit - decompile error
+            blendingdata = ((DataResult<BlendingData>) dataresult).resultOrPartial(logger1::error).orElse(null); // CraftBukkit - decompile error
         } else {
             blendingdata = null;
         }
@@ -571,11 +571,11 @@ public class ChunkSerializer {
                     Logger logger1 = ChunkSerializer.LOGGER;
 
                     Objects.requireNonNull(logger1);
-                    nbttagcompound1.put("block_states", (Tag) dataresult1.getOrThrow(false, logger1::error));
+                    nbttagcompound1.put("block_states", dataresult1.getOrThrow(false, logger1::error));
                     dataresult1 = codec.encodeStart(NbtOps.INSTANCE, chunksection.getBiomes());
                     logger1 = ChunkSerializer.LOGGER;
                     Objects.requireNonNull(logger1);
-                    nbttagcompound1.put("biomes", (Tag) dataresult1.getOrThrow(false, logger1::error));
+                    nbttagcompound1.put("biomes", dataresult1.getOrThrow(false, logger1::error));
                 }
 
                 // Paper start
@@ -628,7 +628,7 @@ public class ChunkSerializer {
         CompoundTag nbttagcompound2;
 
         while (iterator.hasNext()) {
-            BlockPos blockposition = (BlockPos) iterator.next();
+            BlockPos blockposition = iterator.next();
 
             nbttagcompound2 = chunk.getBlockEntityNbtForSaving(blockposition);
             if (nbttagcompound2 != null) {
@@ -676,7 +676,7 @@ public class ChunkSerializer {
             Entry<Heightmap.Types, Heightmap> entry = (Entry) iterator1.next();
 
             if (chunk.getStatus().heightmapsAfter().contains(entry.getKey())) {
-                nbttagcompound3.put(((Heightmap.Types) entry.getKey()).getSerializationKey(), new LongArrayTag(((Heightmap) entry.getValue()).getRawData()));
+                nbttagcompound3.put(entry.getKey().getSerializationKey(), new LongArrayTag(entry.getValue().getRawData()));
             }
         }
 
@@ -762,9 +762,9 @@ public class ChunkSerializer {
 
         while (iterator.hasNext()) {
             Entry<Structure, StructureStart> entry = (Entry) iterator.next();
-            ResourceLocation minecraftkey = iregistry.getKey((Structure) entry.getKey());
+            ResourceLocation minecraftkey = iregistry.getKey(entry.getKey());
 
-            nbttagcompound1.put(minecraftkey.toString(), ((StructureStart) entry.getValue()).createTag(context, pos));
+            nbttagcompound1.put(minecraftkey.toString(), entry.getValue().createTag(context, pos));
         }
 
         nbttagcompound.put("starts", nbttagcompound1);
@@ -774,10 +774,10 @@ public class ChunkSerializer {
         while (iterator1.hasNext()) {
             Entry<Structure, LongSet> entry1 = (Entry) iterator1.next();
 
-            if (!((LongSet) entry1.getValue()).isEmpty()) {
-                ResourceLocation minecraftkey1 = iregistry.getKey((Structure) entry1.getKey());
+            if (!entry1.getValue().isEmpty()) {
+                ResourceLocation minecraftkey1 = iregistry.getKey(entry1.getKey());
 
-                nbttagcompound2.put(minecraftkey1.toString(), new LongArrayTag((LongSet) entry1.getValue()));
+                nbttagcompound2.put(minecraftkey1.toString(), new LongArrayTag(entry1.getValue()));
             }
         }
 
@@ -794,7 +794,7 @@ public class ChunkSerializer {
         while (iterator.hasNext()) {
             String s = (String) iterator.next();
             ResourceLocation minecraftkey = ResourceLocation.tryParse(s);
-            Structure structure = (Structure) iregistry.get(minecraftkey);
+            Structure structure = iregistry.get(minecraftkey);
 
             if (structure == null) {
                 ChunkSerializer.LOGGER.error("Unknown structure start: {}", minecraftkey);
@@ -819,7 +819,7 @@ public class ChunkSerializer {
         while (iterator.hasNext()) {
             String s = (String) iterator.next();
             ResourceLocation minecraftkey = ResourceLocation.tryParse(s);
-            Structure structure = (Structure) iregistry.get(minecraftkey);
+            Structure structure = iregistry.get(minecraftkey);
 
             if (structure == null) {
                 ChunkSerializer.LOGGER.warn("Found reference to unknown structure '{}' in chunk {}, discarding", minecraftkey, pos);
@@ -857,7 +857,7 @@ public class ChunkSerializer {
                 ShortListIterator shortlistiterator = shortlist.iterator();
 
                 while (shortlistiterator.hasNext()) {
-                    Short oshort = (Short) shortlistiterator.next();
+                    Short oshort = shortlistiterator.next();
 
                     nbttaglist1.add(ShortTag.valueOf(oshort.shortValue()));
                 }
diff --git a/src/main/java/net/minecraft/world/level/chunk/storage/ChunkStorage.java b/src/main/java/net/minecraft/world/level/chunk/storage/ChunkStorage.java
index 04323b462530906f4d506b46644a3273453affd6..96c2b141d11f0979c5b10d387a3ddfb3d03f3715 100644
--- a/src/main/java/net/minecraft/world/level/chunk/storage/ChunkStorage.java
+++ b/src/main/java/net/minecraft/world/level/chunk/storage/ChunkStorage.java
@@ -141,7 +141,7 @@ public class ChunkStorage implements AutoCloseable {
             synchronized (this.persistentDataLock) { // Paper - async chunk loading
                 persistentstructurelegacy = this.legacyStructureHandler;
                 if (persistentstructurelegacy == null) {
-                    this.legacyStructureHandler = persistentstructurelegacy = LegacyStructureDataHandler.getLegacyStructureHandler(worldKey, (DimensionDataStorage) stateManagerGetter.get());
+                    this.legacyStructureHandler = persistentstructurelegacy = LegacyStructureDataHandler.getLegacyStructureHandler(worldKey, stateManagerGetter.get());
                 }
             }
         }
diff --git a/src/main/java/net/minecraft/world/level/chunk/storage/RegionFile.java b/src/main/java/net/minecraft/world/level/chunk/storage/RegionFile.java
index 470ebc41fb334e3edf73066e41389ac6d4abdc3a..55b81a70f78c89089a5345eb24533b88653a92a5 100644
--- a/src/main/java/net/minecraft/world/level/chunk/storage/RegionFile.java
+++ b/src/main/java/net/minecraft/world/level/chunk/storage/RegionFile.java
@@ -154,7 +154,7 @@ public class RegionFile implements AutoCloseable {
 
             // search the regionfile from start to finish for the most up-to-date chunk data
 
-            for (long i = 2, maxSector = Math.min((long)(Integer.MAX_VALUE >>> 8), totalSectors); i < maxSector; ++i) { // first two sectors are header, skip
+            for (long i = 2, maxSector = Math.min(Integer.MAX_VALUE >>> 8, totalSectors); i < maxSector; ++i) { // first two sectors are header, skip
                 int chunkDataLength = this.getLength(i);
                 CompoundTag compound = this.attemptRead(i, chunkDataLength, fileLength);
                 if (compound == null || compound == OVERSIZED_COMPOUND) {
@@ -245,7 +245,7 @@ public class RegionFile implements AutoCloseable {
                     for (RegionFileVersion compressionType : RegionFileVersion.VERSIONS.values()) {
                         try {
                             DataInputStream in = new DataInputStream(compressionType.wrap(new ByteArrayInputStream(chunkData))); // typical java
-                            compound = NbtIo.read((java.io.DataInput)in);
+                            compound = NbtIo.read(in);
                             compression = compressionType;
                             break; // reaches here iff readNBT does not throw
                         } catch (Exception ex) {
@@ -601,7 +601,7 @@ public class RegionFile implements AutoCloseable {
             int l = k * 4096;
             ByteBuffer bytebuffer = ByteBuffer.allocate(l);
 
-            this.file.read(bytebuffer, (long) (j * 4096));
+            this.file.read(bytebuffer, j * 4096);
             ((java.nio.Buffer) bytebuffer).flip(); // CraftBukkit - decompile error
             if (bytebuffer.remaining() < 5) {
                 RegionFile.LOGGER.error("Chunk {} header is truncated: expected {} but read {}", pos, Integer.valueOf(l), Integer.valueOf(bytebuffer.remaining()));
@@ -740,7 +740,7 @@ public class RegionFile implements AutoCloseable {
             ByteBuffer bytebuffer = ByteBuffer.allocate(5);
 
             try {
-                this.file.read(bytebuffer, (long) (j * 4096));
+                this.file.read(bytebuffer, j * 4096);
                 ((java.nio.Buffer) bytebuffer).flip(); // CraftBukkit - decompile error
                 if (bytebuffer.remaining() != 5) {
                     return false;
@@ -782,7 +782,7 @@ public class RegionFile implements AutoCloseable {
     }
 
     public DataOutputStream getChunkDataOutputStream(ChunkPos pos) throws IOException {
-        return new DataOutputStream(this.version.wrap((OutputStream) (new RegionFile.ChunkBuffer(pos))));
+        return new DataOutputStream(this.version.wrap(new ChunkBuffer(pos)));
     }
 
     public void flush() throws IOException {
@@ -821,13 +821,13 @@ public class RegionFile implements AutoCloseable {
             regionfile_b = this.writeToExternalFile(path, buf);
             ByteBuffer bytebuffer1 = this.createExternalStub();
 
-            this.file.write(bytebuffer1, (long) (k1 * 4096));
+            this.file.write(bytebuffer1, k1 * 4096);
         } else {
             k1 = this.usedSectors.allocate(j1);
             regionfile_b = () -> {
                 Files.deleteIfExists(this.getExternalChunkPath(pos));
             };
-            this.file.write(buf, (long) (k1 * 4096));
+            this.file.write(buf, k1 * 4096);
         }
 
         this.offsets.put(i, this.packSectorOffset(k1, j1));
@@ -855,7 +855,7 @@ public class RegionFile implements AutoCloseable {
     }
 
     private RegionFile.CommitOp writeToExternalFile(Path path, ByteBuffer buf) throws IOException {
-        Path path1 = Files.createTempFile(this.externalFileDir, "tmp", (String) null);
+        Path path1 = Files.createTempFile(this.externalFileDir, "tmp", null);
         FileChannel filechannel = FileChannel.open(path1, StandardOpenOption.CREATE, StandardOpenOption.WRITE);
 
         try {
@@ -932,7 +932,7 @@ public class RegionFile implements AutoCloseable {
             ByteBuffer bytebuffer = RegionFile.PADDING_BUFFER.duplicate();
 
             ((java.nio.Buffer) bytebuffer).position(0); // CraftBukkit - decompile error
-            this.file.write(bytebuffer, (long) (j - 1));
+            this.file.write(bytebuffer, j - 1);
         }
 
     }
@@ -1000,7 +1000,7 @@ public class RegionFile implements AutoCloseable {
     synchronized CompoundTag getOversizedData(int x, int z) throws IOException {
         Path file = getOversizedFile(x, z);
         try (DataInputStream out = new DataInputStream(new java.io.BufferedInputStream(new InflaterInputStream(Files.newInputStream(file))))) {
-            return NbtIo.read((java.io.DataInput) out);
+            return NbtIo.read(out);
         }
 
     }
diff --git a/src/main/java/net/minecraft/world/level/chunk/storage/RegionFileStorage.java b/src/main/java/net/minecraft/world/level/chunk/storage/RegionFileStorage.java
index eae02b93f03ac191ad839c92abb05c48391e636b..2d705a5d512a8565cdb2bd2c79c2c2811d7c553c 100644
--- a/src/main/java/net/minecraft/world/level/chunk/storage/RegionFileStorage.java
+++ b/src/main/java/net/minecraft/world/level/chunk/storage/RegionFileStorage.java
@@ -78,7 +78,7 @@ public class RegionFileStorage implements AutoCloseable {
     public synchronized RegionFile getRegionFile(ChunkPos chunkcoordintpair, boolean existingOnly, boolean lock) throws IOException {
         // Paper end
         long i = ChunkPos.asLong(chunkcoordintpair.getRegionX(), chunkcoordintpair.getRegionZ());
-        RegionFile regionfile = (RegionFile) this.regionCache.getAndMoveToFirst(i);
+        RegionFile regionfile = this.regionCache.getAndMoveToFirst(i);
 
         if (regionfile != null) {
             // Paper start
@@ -90,7 +90,7 @@ public class RegionFileStorage implements AutoCloseable {
             return regionfile;
         } else {
             if (this.regionCache.size() >= io.papermc.paper.configuration.GlobalConfiguration.get().misc.regionFileCacheSize) { // Paper - configurable
-                ((RegionFile) this.regionCache.removeLast()).close();
+                this.regionCache.removeLast().close();
             }
 
             FileUtil.createDirectoriesSafe(this.folder);
@@ -136,7 +136,7 @@ public class RegionFileStorage implements AutoCloseable {
         synchronized (regionfile) {
             try (DataInputStream datainputstream = regionfile.getChunkDataInputStream(chunkCoordinate)) {
                 CompoundTag oversizedData = regionfile.getOversizedData(chunkCoordinate.x, chunkCoordinate.z);
-                CompoundTag chunk = NbtIo.read((DataInput) datainputstream);
+                CompoundTag chunk = NbtIo.read(datainputstream);
                 if (oversizedData == null) {
                     return chunk;
                 }
@@ -205,7 +205,7 @@ public class RegionFileStorage implements AutoCloseable {
         {
             try {
                 if (datainputstream != null) {
-                    nbttagcompound = NbtIo.read((DataInput) datainputstream);
+                    nbttagcompound = NbtIo.read(datainputstream);
                     // Paper start - recover from corrupt regionfile header
                     if (this.isChunkData) {
                         ChunkPos chunkPos = ChunkSerializer.getChunkCoordinate(nbttagcompound);
@@ -299,7 +299,7 @@ public class RegionFileStorage implements AutoCloseable {
             DataOutputStream dataoutputstream = regionfile.getChunkDataOutputStream(pos);
 
             try {
-                NbtIo.write(nbt, (DataOutput) dataoutputstream);
+                NbtIo.write(nbt, dataoutputstream);
                 regionfile.setStatus(pos.x, pos.z, ChunkSerializer.getStatus(nbt)); // Paper - cache status on disk
                 regionfile.setOversized(pos.x, pos.z, false); // Paper - We don't do this anymore, mojang stores differently, but clear old meta flag if it exists to get rid of our own meta file once last oversized is gone
                 dataoutputstream.close(); // Paper - only write if successful
diff --git a/src/main/java/net/minecraft/world/level/chunk/storage/SectionStorage.java b/src/main/java/net/minecraft/world/level/chunk/storage/SectionStorage.java
index f015d4164a7b137686658ae0ad7174857a4bcb94..584129c7dc2af018b4f407b1ad89a7cf91a5b8d1 100644
--- a/src/main/java/net/minecraft/world/level/chunk/storage/SectionStorage.java
+++ b/src/main/java/net/minecraft/world/level/chunk/storage/SectionStorage.java
@@ -85,7 +85,7 @@ public class SectionStorage<R> extends RegionFileStorage implements AutoCloseabl
                 this.readColumn(SectionPos.of(pos).chunk());
                 optional = this.get(pos);
                 if (optional == null) {
-                    throw (IllegalStateException)Util.pauseInIde(new IllegalStateException());
+                    throw Util.pauseInIde(new IllegalStateException());
                 } else {
                     return optional;
                 }
@@ -100,7 +100,7 @@ public class SectionStorage<R> extends RegionFileStorage implements AutoCloseabl
 
     protected R getOrCreate(long pos) {
         if (this.outsideStoredRange(pos)) {
-            throw (IllegalArgumentException)Util.pauseInIde(new IllegalArgumentException("sectionPos out of bounds"));
+            throw Util.pauseInIde(new IllegalArgumentException("sectionPos out of bounds"));
         } else {
             Optional<R> optional = this.getOrLoad(pos);
             if (optional.isPresent()) {
@@ -177,7 +177,7 @@ public class SectionStorage<R> extends RegionFileStorage implements AutoCloseabl
         if (tag instanceof CompoundTag) {
             try { this.write(pos, (CompoundTag)tag); } catch (IOException ioexception) { SectionStorage.LOGGER.error("Error writing data to disk", ioexception); } // Paper - nuke IOWorker
         } else {
-            LOGGER.error("Expected compound tag, got {}", (Object)tag);
+            LOGGER.error("Expected compound tag, got {}", tag);
         }
 
     }
@@ -215,7 +215,7 @@ public class SectionStorage<R> extends RegionFileStorage implements AutoCloseabl
         if (optional != null && optional.isPresent()) {
             this.dirty.add(pos);
         } else {
-            LOGGER.warn("No data for position: {}", (Object)SectionPos.of(pos));
+            LOGGER.warn("No data for position: {}", SectionPos.of(pos));
         }
     }
 
diff --git a/src/main/java/net/minecraft/world/level/dimension/end/EndDragonFight.java b/src/main/java/net/minecraft/world/level/dimension/end/EndDragonFight.java
index ddfd3d90ad3a4a70ead58f906fc64e7ea1000644..5777593190b587379610c941cf7970f0f65c9dda 100644
--- a/src/main/java/net/minecraft/world/level/dimension/end/EndDragonFight.java
+++ b/src/main/java/net/minecraft/world/level/dimension/end/EndDragonFight.java
@@ -219,7 +219,7 @@ public class EndDragonFight {
         } else {
             EnderDragon enderDragon = list.get(0);
             this.dragonUUID = enderDragon.getUUID();
-            LOGGER.info("Found that there's a dragon still alive ({})", (Object)enderDragon);
+            LOGGER.info("Found that there's a dragon still alive ({})", enderDragon);
             this.dragonKilled = false;
             if (!bl && this.level.paperConfig().entities.behavior.shouldRemoveDragon) {
                 LOGGER.info("But we didn't have a portal, let's remove it.");
@@ -364,7 +364,7 @@ public class EndDragonFight {
             this.crystalsAlive += this.level.getEntitiesOfClass(EndCrystal.class, endSpike.getTopBoundingBox()).size();
         }
 
-        LOGGER.debug("Found {} end crystals still alive", Integer.valueOf((int) this.crystalsAlive));
+        LOGGER.debug("Found {} end crystals still alive", Integer.valueOf(this.crystalsAlive));
     }
 
     public void setDragonKilled(EnderDragon dragon) {
@@ -546,7 +546,7 @@ public class EndDragonFight {
         for(SpikeFeature.EndSpike endSpike : SpikeFeature.getSpikesForLevel(this.level)) {
             for(EndCrystal endCrystal : this.level.getEntitiesOfClass(EndCrystal.class, endSpike.getTopBoundingBox())) {
                 endCrystal.setInvulnerable(false);
-                endCrystal.setBeamTarget((BlockPos)null);
+                endCrystal.setBeamTarget(null);
             }
         }
 
diff --git a/src/main/java/net/minecraft/world/level/entity/EntityLookup.java b/src/main/java/net/minecraft/world/level/entity/EntityLookup.java
index d45d832232be5017dde53816191c2b1830a0da32..5f8e6094dd41ededc97cacd06310f1ff21e4e664 100644
--- a/src/main/java/net/minecraft/world/level/entity/EntityLookup.java
+++ b/src/main/java/net/minecraft/world/level/entity/EntityLookup.java
@@ -18,7 +18,7 @@ public class EntityLookup<T extends EntityAccess> {
 
     public <U extends T> void getEntities(EntityTypeTest<T, U> filter, AbortableIterationConsumer<U> consumer) {
         for(T entityAccess : this.byId.values()) {
-            U entityAccess2 = (U)((EntityAccess)filter.tryCast(entityAccess));
+            U entityAccess2 = filter.tryCast(entityAccess);
             if (entityAccess2 != null && consumer.accept(entityAccess2).shouldAbort()) { // Paper - decompile fix
                 return;
             }
diff --git a/src/main/java/net/minecraft/world/level/entity/EntitySection.java b/src/main/java/net/minecraft/world/level/entity/EntitySection.java
index 5dcb7f9cab097990148f5a7c4ccbe1556afdd514..e5f87b89c2bdb372f727eb3e8ebd22809244f930 100644
--- a/src/main/java/net/minecraft/world/level/entity/EntitySection.java
+++ b/src/main/java/net/minecraft/world/level/entity/EntitySection.java
@@ -43,7 +43,7 @@ public class EntitySection<T extends EntityAccess> {
             return AbortableIterationConsumer.Continuation.CONTINUE;
         } else {
             for(T entityAccess : collection) {
-                U entityAccess2 = (U)((EntityAccess)type.tryCast(entityAccess));
+                U entityAccess2 = type.tryCast(entityAccess);
                 if (entityAccess2 != null && entityAccess.getBoundingBox().intersects(box) && consumer.accept(entityAccess2).shouldAbort()) { // Paper - decompile fix
                     return AbortableIterationConsumer.Continuation.ABORT;
                 }
diff --git a/src/main/java/net/minecraft/world/level/entity/PersistentEntitySectionManager.java b/src/main/java/net/minecraft/world/level/entity/PersistentEntitySectionManager.java
index 8b713cca746716a15c42f361b982a28a2d4c0379..60fa5c0d17304e42db05f6d8933134a1d6c9536d 100644
--- a/src/main/java/net/minecraft/world/level/entity/PersistentEntitySectionManager.java
+++ b/src/main/java/net/minecraft/world/level/entity/PersistentEntitySectionManager.java
@@ -221,7 +221,7 @@ public class PersistentEntitySectionManager<T extends EntityAccess> implements A
 
     public void ensureChunkQueuedForLoad(long chunkPos) {
         org.spigotmc.AsyncCatcher.catchOp("Entity chunk save"); // Paper
-        PersistentEntitySectionManager.ChunkLoadStatus persistententitysectionmanager_b = (PersistentEntitySectionManager.ChunkLoadStatus) this.chunkLoadStatuses.get(chunkPos);
+        PersistentEntitySectionManager.ChunkLoadStatus persistententitysectionmanager_b = this.chunkLoadStatuses.get(chunkPos);
 
         if (persistententitysectionmanager_b == PersistentEntitySectionManager.ChunkLoadStatus.FRESH) {
             this.requestChunkLoad(chunkPos);
@@ -236,12 +236,12 @@ public class PersistentEntitySectionManager<T extends EntityAccess> implements A
 
     private boolean storeChunkSections(long i, Consumer<T> consumer, boolean callEvent) {
         // CraftBukkit end
-        PersistentEntitySectionManager.ChunkLoadStatus persistententitysectionmanager_b = (PersistentEntitySectionManager.ChunkLoadStatus) this.chunkLoadStatuses.get(i);
+        PersistentEntitySectionManager.ChunkLoadStatus persistententitysectionmanager_b = this.chunkLoadStatuses.get(i);
 
         if (persistententitysectionmanager_b == PersistentEntitySectionManager.ChunkLoadStatus.PENDING) {
             return false;
         } else {
-            List<T> list = (List) this.sectionStorage.getExistingSectionsInChunk(i).flatMap((entitysection) -> {
+            List<T> list = this.sectionStorage.getExistingSectionsInChunk(i).flatMap((entitysection) -> {
                 return entitysection.getEntities().filter(EntityAccess::shouldBeSaved);
             }).collect(Collectors.toList());
 
@@ -307,7 +307,7 @@ public class PersistentEntitySectionManager<T extends EntityAccess> implements A
         org.spigotmc.AsyncCatcher.catchOp("Entity chunk process pending loads"); // Paper
         ChunkEntities<T> chunkentities; // CraftBukkit - decompile error
 
-        while ((chunkentities = (ChunkEntities) this.loadingInbox.poll()) != null) {
+        while ((chunkentities = this.loadingInbox.poll()) != null) {
             chunkentities.getEntities().forEach((entityaccess) -> {
                 this.addEntity(entityaccess, true);
             });
@@ -396,11 +396,11 @@ public class PersistentEntitySectionManager<T extends EntityAccess> implements A
     }
 
     public boolean canPositionTick(BlockPos pos) {
-        return ((Visibility) this.chunkVisibility.get(ChunkPos.asLong(pos))).isTicking();
+        return this.chunkVisibility.get(ChunkPos.asLong(pos)).isTicking();
     }
 
     public boolean canPositionTick(ChunkPos pos) {
-        return ((Visibility) this.chunkVisibility.get(pos.toLong())).isTicking();
+        return this.chunkVisibility.get(pos.toLong()).isTicking();
     }
 
     public boolean areEntitiesLoaded(long chunkPos) {
@@ -411,7 +411,7 @@ public class PersistentEntitySectionManager<T extends EntityAccess> implements A
         CsvOutput csvwriter = CsvOutput.builder().addColumn("x").addColumn("y").addColumn("z").addColumn("visibility").addColumn("load_status").addColumn("entity_count").build(writer);
 
         this.sectionStorage.getAllChunksWithExistingSections().forEach((java.util.function.LongConsumer) (i) -> { // CraftBukkit - decompile error
-            PersistentEntitySectionManager.ChunkLoadStatus persistententitysectionmanager_b = (PersistentEntitySectionManager.ChunkLoadStatus) this.chunkLoadStatuses.get(i);
+            PersistentEntitySectionManager.ChunkLoadStatus persistententitysectionmanager_b = this.chunkLoadStatuses.get(i);
 
             this.sectionStorage.getExistingSectionPositionsInChunk(i).forEach((j) -> {
                 EntitySection<T> entitysection = this.sectionStorage.getSection(j);
diff --git a/src/main/java/net/minecraft/world/level/gameevent/vibrations/VibrationListener.java b/src/main/java/net/minecraft/world/level/gameevent/vibrations/VibrationListener.java
index 3288837a406539c4a22464524ffb2e727c6ad32b..feab4644fefec174ff36119c39cd75536321254c 100644
--- a/src/main/java/net/minecraft/world/level/gameevent/vibrations/VibrationListener.java
+++ b/src/main/java/net/minecraft/world/level/gameevent/vibrations/VibrationListener.java
@@ -144,7 +144,7 @@ public class VibrationListener implements GameEventListener {
                 --this.travelTimeInTicks;
                 if (this.travelTimeInTicks <= 0) {
                     this.travelTimeInTicks = 0;
-                    this.config.onSignalReceive(worldserver, this, new BlockPos(this.currentVibration.pos()), this.currentVibration.gameEvent(), (Entity) this.currentVibration.getEntity(worldserver).orElse(null), (Entity) this.currentVibration.getProjectileOwner(worldserver).orElse(null), this.currentVibration.distance()); // CraftBukkit - decompile error
+                    this.config.onSignalReceive(worldserver, this, new BlockPos(this.currentVibration.pos()), this.currentVibration.gameEvent(), this.currentVibration.getEntity(worldserver).orElse(null), this.currentVibration.getProjectileOwner(worldserver).orElse(null), this.currentVibration.distance()); // CraftBukkit - decompile error
                     this.currentVibration = null;
                 }
             }
@@ -174,7 +174,7 @@ public class VibrationListener implements GameEventListener {
             if (optional.isEmpty()) {
                 return false;
             } else {
-                Vec3 vec3d1 = (Vec3) optional.get();
+                Vec3 vec3d1 = optional.get();
 
                 // CraftBukkit start
                 boolean defaultCancel = !this.config.shouldListen(world, this, new BlockPos(emitterPos), event, emitter);
diff --git a/src/main/java/net/minecraft/world/level/levelgen/Beardifier.java b/src/main/java/net/minecraft/world/level/levelgen/Beardifier.java
index af63ad44103e0ca1dfe17d468e41531728c957aa..d79fe00b347ba3f217955b93b0d3a4f78c5c850a 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/Beardifier.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/Beardifier.java
@@ -150,7 +150,7 @@ public class Beardifier implements DensityFunctions.BeardifierOrMarker {
     }
 
     private static double getBuryContribution(int x, int y, int z) {
-        double d = Mth.length((double)x, (double)y / 2.0D, (double)z);
+        double d = Mth.length(x, (double)y / 2.0D, z);
         return Mth.clampedMap(d, 0.0D, 6.0D, 1.0D, 0.0D);
     }
 
@@ -160,7 +160,7 @@ public class Beardifier implements DensityFunctions.BeardifierOrMarker {
         int l = z + 12;
         if (isInKernelRange(j) && isInKernelRange(k) && isInKernelRange(l)) {
             double d = (double)i + 0.5D;
-            double e = Mth.lengthSquared((double)x, d, (double)z);
+            double e = Mth.lengthSquared(x, d, z);
             double f = -d * Mth.fastInvSqrt(e / 2.0D) / 2.0D;
             return f * (double)BEARD_KERNEL[l * 24 * 24 + j * 24 + k];
         } else {
@@ -177,7 +177,7 @@ public class Beardifier implements DensityFunctions.BeardifierOrMarker {
     }
 
     private static double computeBeardContribution(int i, double d, int j) {
-        double e = Mth.lengthSquared((double)i, d, (double)j);
+        double e = Mth.lengthSquared(i, d, j);
         return Math.pow(Math.E, -e / 16.0D);
     }
 
diff --git a/src/main/java/net/minecraft/world/level/levelgen/DensityFunctions.java b/src/main/java/net/minecraft/world/level/levelgen/DensityFunctions.java
index 42b3846f5dc75273899bd2fc7e9adbde78ad7848..37d0bbe063efc1521987a12d28fb11f4935d3290 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/DensityFunctions.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/DensityFunctions.java
@@ -518,8 +518,8 @@ public final class DensityFunctions {
             NoiseCache cache = noiseCache.get().computeIfAbsent(sampler, noiseKey -> new NoiseCache()); // Paper
             for(int m = -12; m <= 12; ++m) {
                 for(int n = -12; n <= 12; ++n) {
-                    long o = (long)(i + m);
-                    long p = (long)(j + n);
+                    long o = i + m;
+                    long p = j + n;
                     // Paper start - Significantly improve end generation performance by using a noise cache
                     long key = net.minecraft.world.level.ChunkPos.asLong((int) o, (int) p);
                     int index = (int) it.unimi.dsi.fastutil.HashCommon.mix(key) & 8191;
@@ -908,7 +908,7 @@ public final class DensityFunctions {
 
         @Override
         public double compute(DensityFunction.FunctionContext pos) {
-            return this.compute((double)pos.blockX(), (double)pos.blockY(), (double)pos.blockZ());
+            return this.compute(pos.blockX(), pos.blockY(), pos.blockZ());
         }
 
         @Override
@@ -927,7 +927,7 @@ public final class DensityFunctions {
 
         @Override
         public double compute(DensityFunction.FunctionContext pos) {
-            return this.compute((double)pos.blockX(), 0.0D, (double)pos.blockZ());
+            return this.compute(pos.blockX(), 0.0D, pos.blockZ());
         }
 
         @Override
@@ -946,7 +946,7 @@ public final class DensityFunctions {
 
         @Override
         public double compute(DensityFunction.FunctionContext pos) {
-            return this.compute((double)pos.blockZ(), (double)pos.blockX(), 0.0D);
+            return this.compute(pos.blockZ(), pos.blockX(), 0.0D);
         }
 
         @Override
@@ -1030,17 +1030,17 @@ public final class DensityFunctions {
 
         @Override
         public double compute(DensityFunction.FunctionContext pos) {
-            return (double)this.spline.apply(new DensityFunctions.Spline.Point(pos));
+            return this.spline.apply(new Point(pos));
         }
 
         @Override
         public double minValue() {
-            return (double)this.spline.minValue();
+            return this.spline.minValue();
         }
 
         @Override
         public double maxValue() {
-            return (double)this.spline.maxValue();
+            return this.spline.maxValue();
         }
 
         @Override
@@ -1296,7 +1296,7 @@ public final class DensityFunctions {
 
         @Override
         public double compute(DensityFunction.FunctionContext pos) {
-            return Mth.clampedMap((double)pos.blockY(), (double)this.fromY, (double)this.toY, this.fromValue, this.toValue);
+            return Mth.clampedMap(pos.blockY(), this.fromY, this.toY, this.fromValue, this.toValue);
         }
 
         @Override
diff --git a/src/main/java/net/minecraft/world/level/levelgen/FlatLevelSource.java b/src/main/java/net/minecraft/world/level/levelgen/FlatLevelSource.java
index 95ceb69fa1ab13a6700e7afffe04e03786eaa6f9..ad3ab6464fdb4b367fad0b3f2e45dbe0d79224ae 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/FlatLevelSource.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/FlatLevelSource.java
@@ -84,7 +84,7 @@ public class FlatLevelSource extends ChunkGenerator {
         Heightmap heightmap1 = chunk.getOrCreateHeightmapUnprimed(Heightmap.Types.WORLD_SURFACE_WG);
 
         for (int i = 0; i < Math.min(chunk.getHeight(), list.size()); ++i) {
-            BlockState iblockdata = (BlockState) list.get(i);
+            BlockState iblockdata = list.get(i);
 
             if (iblockdata != null) {
                 int j = chunk.getMinBuildHeight() + i;
@@ -107,7 +107,7 @@ public class FlatLevelSource extends ChunkGenerator {
         List<BlockState> list = this.settings.getLayers();
 
         for (int k = Math.min(list.size(), world.getMaxBuildHeight()) - 1; k >= 0; --k) {
-            BlockState iblockdata = (BlockState) list.get(k);
+            BlockState iblockdata = list.get(k);
 
             if (iblockdata != null && heightmap.isOpaque().test(iblockdata)) {
                 return world.getMinBuildHeight() + k + 1;
@@ -119,7 +119,7 @@ public class FlatLevelSource extends ChunkGenerator {
 
     @Override
     public NoiseColumn getBaseColumn(int x, int z, LevelHeightAccessor world, RandomState noiseConfig) {
-        return new NoiseColumn(world.getMinBuildHeight(), (BlockState[]) this.settings.getLayers().stream().limit((long) world.getHeight()).map((iblockdata) -> {
+        return new NoiseColumn(world.getMinBuildHeight(), this.settings.getLayers().stream().limit(world.getHeight()).map((iblockdata) -> {
             return iblockdata == null ? Blocks.AIR.defaultBlockState() : iblockdata;
         }).toArray((k) -> {
             return new BlockState[k];
diff --git a/src/main/java/net/minecraft/world/level/levelgen/NoiseBasedChunkGenerator.java b/src/main/java/net/minecraft/world/level/levelgen/NoiseBasedChunkGenerator.java
index 6b84633bf6956406d2e2c5dd32fa358f41ccc890..2657b9945ea7d6c82996fee52e2520c926cc95bf 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/NoiseBasedChunkGenerator.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/NoiseBasedChunkGenerator.java
@@ -96,11 +96,11 @@ public final class NoiseBasedChunkGenerator extends ChunkGenerator {
         });
         BiomeResolver biomeresolver = BelowZeroRetrogen.getBiomeResolver(blender.getBiomeResolver(this.biomeSource), chunk);
 
-        chunk.fillBiomesFromNoise(biomeresolver, noisechunk.cachedClimateSampler(noiseConfig.router(), ((NoiseGeneratorSettings) this.settings.value()).spawnTarget()));
+        chunk.fillBiomesFromNoise(biomeresolver, noisechunk.cachedClimateSampler(noiseConfig.router(), this.settings.value().spawnTarget()));
     }
 
     private NoiseChunk createNoiseChunk(ChunkAccess chunk, StructureManager world, Blender blender, RandomState noiseConfig) {
-        return NoiseChunk.forChunk(chunk, noiseConfig, Beardifier.forStructuresInChunk(world, chunk.getPos()), (NoiseGeneratorSettings) this.settings.value(), (Aquifer.FluidPicker) this.globalFluidPicker.get(), blender);
+        return NoiseChunk.forChunk(chunk, noiseConfig, Beardifier.forStructuresInChunk(world, chunk.getPos()), this.settings.value(), (Aquifer.FluidPicker) this.globalFluidPicker.get(), blender);
     }
 
     @Override
@@ -118,15 +118,15 @@ public final class NoiseBasedChunkGenerator extends ChunkGenerator {
 
     @Override
     public int getBaseHeight(int x, int z, Heightmap.Types heightmap, LevelHeightAccessor world, RandomState noiseConfig) {
-        return this.iterateNoiseColumn(world, noiseConfig, x, z, (MutableObject) null, heightmap.isOpaque()).orElse(world.getMinBuildHeight());
+        return this.iterateNoiseColumn(world, noiseConfig, x, z, null, heightmap.isOpaque()).orElse(world.getMinBuildHeight());
     }
 
     @Override
     public NoiseColumn getBaseColumn(int x, int z, LevelHeightAccessor world, RandomState noiseConfig) {
         MutableObject<NoiseColumn> mutableobject = new MutableObject();
 
-        this.iterateNoiseColumn(world, noiseConfig, x, z, mutableobject, (Predicate) null);
-        return (NoiseColumn) mutableobject.getValue();
+        this.iterateNoiseColumn(world, noiseConfig, x, z, mutableobject, null);
+        return mutableobject.getValue();
     }
 
     @Override
@@ -137,11 +137,11 @@ public final class NoiseBasedChunkGenerator extends ChunkGenerator {
         double d0 = noiserouter.ridges().compute(densityfunction_e);
         String s = decimalformat.format(noiserouter.temperature().compute(densityfunction_e));
 
-        text.add("NoiseRouter T: " + s + " V: " + decimalformat.format(noiserouter.vegetation().compute(densityfunction_e)) + " C: " + decimalformat.format(noiserouter.continents().compute(densityfunction_e)) + " E: " + decimalformat.format(noiserouter.erosion().compute(densityfunction_e)) + " D: " + decimalformat.format(noiserouter.depth().compute(densityfunction_e)) + " W: " + decimalformat.format(d0) + " PV: " + decimalformat.format((double) NoiseRouterData.peaksAndValleys((float) d0)) + " AS: " + decimalformat.format(noiserouter.initialDensityWithoutJaggedness().compute(densityfunction_e)) + " N: " + decimalformat.format(noiserouter.finalDensity().compute(densityfunction_e)));
+        text.add("NoiseRouter T: " + s + " V: " + decimalformat.format(noiserouter.vegetation().compute(densityfunction_e)) + " C: " + decimalformat.format(noiserouter.continents().compute(densityfunction_e)) + " E: " + decimalformat.format(noiserouter.erosion().compute(densityfunction_e)) + " D: " + decimalformat.format(noiserouter.depth().compute(densityfunction_e)) + " W: " + decimalformat.format(d0) + " PV: " + decimalformat.format(NoiseRouterData.peaksAndValleys((float) d0)) + " AS: " + decimalformat.format(noiserouter.initialDensityWithoutJaggedness().compute(densityfunction_e)) + " N: " + decimalformat.format(noiserouter.finalDensity().compute(densityfunction_e)));
     }
 
     private OptionalInt iterateNoiseColumn(LevelHeightAccessor world, RandomState noiseConfig, int x, int z, @Nullable MutableObject<NoiseColumn> columnSample, @Nullable Predicate<BlockState> stopPredicate) {
-        NoiseSettings noisesettings = ((NoiseGeneratorSettings) this.settings.value()).noiseSettings().clampToHeightAccessor(world);
+        NoiseSettings noisesettings = this.settings.value().noiseSettings().clampToHeightAccessor(world);
         int k = noisesettings.getCellHeight();
         int l = noisesettings.minY();
         int i1 = Mth.intFloorDiv(l, k);
@@ -168,7 +168,7 @@ public final class NoiseBasedChunkGenerator extends ChunkGenerator {
             int i3 = i2 * k1;
             double d0 = (double) j2 / (double) k1;
             double d1 = (double) k2 / (double) k1;
-            NoiseChunk noisechunk = new NoiseChunk(1, noiseConfig, l2, i3, noisesettings, DensityFunctions.BeardifierMarker.INSTANCE, (NoiseGeneratorSettings) this.settings.value(), (Aquifer.FluidPicker) this.globalFluidPicker.get(), Blender.empty());
+            NoiseChunk noisechunk = new NoiseChunk(1, noiseConfig, l2, i3, noisesettings, DensityFunctions.BeardifierMarker.INSTANCE, this.settings.value(), (Aquifer.FluidPicker) this.globalFluidPicker.get(), Blender.empty());
 
             noisechunk.initializeForFirstCellX();
             noisechunk.advanceCellX(0);
@@ -218,7 +218,7 @@ public final class NoiseBasedChunkGenerator extends ChunkGenerator {
         NoiseChunk noisechunk = chunk.getOrCreateNoiseChunk((ichunkaccess1) -> {
             return this.createNoiseChunk(ichunkaccess1, structureAccessor, blender, noiseConfig);
         });
-        NoiseGeneratorSettings generatorsettingbase = (NoiseGeneratorSettings) this.settings.value();
+        NoiseGeneratorSettings generatorsettingbase = this.settings.value();
 
         noiseConfig.surfaceSystem().buildSurface(noiseConfig, biomeAccess, biomeRegistry, generatorsettingbase.useLegacyRandomSource(), heightContext, chunk, noisechunk, generatorsettingbase.surfaceRule());
     }
@@ -235,7 +235,7 @@ public final class NoiseBasedChunkGenerator extends ChunkGenerator {
             return this.createNoiseChunk(ichunkaccess1, structureAccessor, Blender.of(chunkRegion), noiseConfig);
         });
         Aquifer aquifer = noisechunk.aquifer();
-        CarvingContext carvingcontext = new CarvingContext(this, chunkRegion.registryAccess(), chunk.getHeightAccessorForGeneration(), noisechunk, noiseConfig, ((NoiseGeneratorSettings) this.settings.value()).surfaceRule(), chunkRegion.getMinecraftWorld()); // Paper
+        CarvingContext carvingcontext = new CarvingContext(this, chunkRegion.registryAccess(), chunk.getHeightAccessorForGeneration(), noisechunk, noiseConfig, this.settings.value().surfaceRule(), chunkRegion.getMinecraftWorld()); // Paper
         CarvingMask carvingmask = ((ProtoChunk) chunk).getOrCreateCarvingMask(carverStep);
 
         for (int j = -8; j <= 8; ++j) {
@@ -250,7 +250,7 @@ public final class NoiseBasedChunkGenerator extends ChunkGenerator {
 
                 for (Iterator iterator = iterable.iterator(); iterator.hasNext(); ++l) {
                     Holder<ConfiguredWorldCarver<?>> holder = (Holder) iterator.next();
-                    ConfiguredWorldCarver<?> worldgencarverwrapper = (ConfiguredWorldCarver) holder.value();
+                    ConfiguredWorldCarver<?> worldgencarverwrapper = holder.value();
 
                     seededrandom.setLargeFeatureSeed(seed + (long) l, chunkcoordintpair1.x, chunkcoordintpair1.z);
                     if (worldgencarverwrapper.isStartChunk(seededrandom)) {
@@ -265,7 +265,7 @@ public final class NoiseBasedChunkGenerator extends ChunkGenerator {
 
     @Override
     public CompletableFuture<ChunkAccess> fillFromNoise(Executor executor, Blender blender, RandomState noiseConfig, StructureManager structureAccessor, ChunkAccess chunk) {
-        NoiseSettings noisesettings = ((NoiseGeneratorSettings) this.settings.value()).noiseSettings().clampToHeightAccessor(chunk.getHeightAccessorForGeneration());
+        NoiseSettings noisesettings = this.settings.value().noiseSettings().clampToHeightAccessor(chunk.getHeightAccessorForGeneration());
         int i = noisesettings.minY();
         int j = Mth.intFloorDiv(i, noisesettings.getCellHeight());
         int k = Mth.intFloorDiv(noisesettings.height(), noisesettings.getCellHeight());
@@ -392,22 +392,22 @@ public final class NoiseBasedChunkGenerator extends ChunkGenerator {
 
     @Override
     public int getGenDepth() {
-        return ((NoiseGeneratorSettings) this.settings.value()).noiseSettings().height();
+        return this.settings.value().noiseSettings().height();
     }
 
     @Override
     public int getSeaLevel() {
-        return ((NoiseGeneratorSettings) this.settings.value()).seaLevel();
+        return this.settings.value().seaLevel();
     }
 
     @Override
     public int getMinY() {
-        return ((NoiseGeneratorSettings) this.settings.value()).noiseSettings().minY();
+        return this.settings.value().noiseSettings().minY();
     }
 
     @Override
     public void spawnOriginalMobs(WorldGenRegion region) {
-        if (!((NoiseGeneratorSettings) this.settings.value()).disableMobGeneration()) {
+        if (!this.settings.value().disableMobGeneration()) {
             ChunkPos chunkcoordintpair = region.getCenter();
             Holder<Biome> holder = region.getBiome(chunkcoordintpair.getWorldPosition().atY(region.getMaxBuildHeight() - 1));
             WorldgenRandom seededrandom = new WorldgenRandom(new LegacyRandomSource(RandomSupport.generateUniqueSeed()));
diff --git a/src/main/java/net/minecraft/world/level/levelgen/PatrolSpawner.java b/src/main/java/net/minecraft/world/level/levelgen/PatrolSpawner.java
index a908652f1ebb426d265ef614746f70cd1e538268..a6b90efe1fd5ec70b27730dcfe19a6f8566bf9c7 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/PatrolSpawner.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/PatrolSpawner.java
@@ -98,7 +98,7 @@ public class PatrolSpawner implements CustomSpawner {
                                         return 0;
                                     } else {
                                         int i1 = 0;
-                                        int j1 = (int) Math.ceil((double) world.getCurrentDifficultyAt(blockposition_mutableblockposition).getEffectiveDifficulty()) + 1;
+                                        int j1 = (int) Math.ceil(world.getCurrentDifficultyAt(blockposition_mutableblockposition).getEffectiveDifficulty()) + 1;
 
                                         for (int k1 = 0; k1 < j1; ++k1) {
                                             ++i1;
@@ -136,7 +136,7 @@ public class PatrolSpawner implements CustomSpawner {
         } else if (!PatrollingMonster.checkPatrollingMonsterSpawnRules(EntityType.PILLAGER, world, MobSpawnType.PATROL, pos, random)) {
             return false;
         } else {
-            PatrollingMonster entitymonsterpatrolling = (PatrollingMonster) EntityType.PILLAGER.create(world);
+            PatrollingMonster entitymonsterpatrolling = EntityType.PILLAGER.create(world);
 
             if (entitymonsterpatrolling != null) {
                 if (captain) {
@@ -144,8 +144,8 @@ public class PatrolSpawner implements CustomSpawner {
                     entitymonsterpatrolling.findPatrolTarget();
                 }
 
-                entitymonsterpatrolling.setPos((double) pos.getX(), (double) pos.getY(), (double) pos.getZ());
-                entitymonsterpatrolling.finalizeSpawn(world, world.getCurrentDifficultyAt(pos), MobSpawnType.PATROL, (SpawnGroupData) null, (CompoundTag) null);
+                entitymonsterpatrolling.setPos(pos.getX(), pos.getY(), pos.getZ());
+                entitymonsterpatrolling.finalizeSpawn(world, world.getCurrentDifficultyAt(pos), MobSpawnType.PATROL, null, null);
                 world.addFreshEntityWithPassengers(entitymonsterpatrolling, org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason.PATROL); // CraftBukkit
                 return true;
             } else {
diff --git a/src/main/java/net/minecraft/world/level/levelgen/PhantomSpawner.java b/src/main/java/net/minecraft/world/level/levelgen/PhantomSpawner.java
index 1c3718d9244513d9fc795dceb564a81375734557..25b358ebf287002bb12893681b3d0d55effd9033 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/PhantomSpawner.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/PhantomSpawner.java
@@ -68,7 +68,7 @@ public class PhantomSpawner implements CustomSpawner {
 
                                 if (difficultydamagescaler.isHarderThan(randomsource.nextFloat() * 3.0F)) {
                                     ServerStatsCounter serverstatisticmanager = ((ServerPlayer) entityhuman).getStats();
-                                    int j = Mth.clamp(serverstatisticmanager.getValue(Stats.CUSTOM.get(Stats.TIME_SINCE_REST)), (int) 1, Integer.MAX_VALUE);
+                                    int j = Mth.clamp(serverstatisticmanager.getValue(Stats.CUSTOM.get(Stats.TIME_SINCE_REST)), 1, Integer.MAX_VALUE);
                                     boolean flag2 = true;
 
                                     if (randomsource.nextInt(j) >= world.paperConfig().entities.behavior.playerInsomniaStartTicks) { // Paper
@@ -90,12 +90,12 @@ public class PhantomSpawner implements CustomSpawner {
                                                     continue;
                                                 }
                                                 // Paper end
-                                                Phantom entityphantom = (Phantom) EntityType.PHANTOM.create(world);
+                                                Phantom entityphantom = EntityType.PHANTOM.create(world);
 
                                                 if (entityphantom != null) {
                                                     entityphantom.setSpawningEntity(entityhuman.getUUID()); // Paper
                                                     entityphantom.moveTo(blockposition1, 0.0F, 0.0F);
-                                                    groupdataentity = entityphantom.finalizeSpawn(world, difficultydamagescaler, MobSpawnType.NATURAL, groupdataentity, (CompoundTag) null);
+                                                    groupdataentity = entityphantom.finalizeSpawn(world, difficultydamagescaler, MobSpawnType.NATURAL, groupdataentity, null);
                                                     world.addFreshEntityWithPassengers(entityphantom, org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason.NATURAL); // CraftBukkit
                                                     ++i;
                                                 }
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/SpikeFeature.java b/src/main/java/net/minecraft/world/level/levelgen/feature/SpikeFeature.java
index 45c717fd3e81864b5ad0ae46872f36eb7f03416f..3c732375dcfed0d22bdef2d575d867abf7e057d9 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/SpikeFeature.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/SpikeFeature.java
@@ -65,7 +65,7 @@ public class SpikeFeature extends Feature<SpikeConfiguration> {
         int i = spike.getRadius();
 
         for(BlockPos blockPos : BlockPos.betweenClosed(new BlockPos(spike.getCenterX() - i, world.getMinBuildHeight(), spike.getCenterZ() - i), new BlockPos(spike.getCenterX() + i, spike.getHeight() + 10, spike.getCenterZ() + i))) {
-            if (blockPos.distToLowCornerSqr((double)spike.getCenterX(), (double)blockPos.getY(), (double)spike.getCenterZ()) <= (double)(i * i + 1) && blockPos.getY() < spike.getHeight()) {
+            if (blockPos.distToLowCornerSqr(spike.getCenterX(), blockPos.getY(), spike.getCenterZ()) <= (double)(i * i + 1) && blockPos.getY() < spike.getHeight()) {
                 this.setBlock(world, blockPos, Blocks.OBSIDIAN.defaultBlockState());
             } else if (blockPos.getY() > 65) {
                 this.setBlock(world, blockPos, Blocks.AIR.defaultBlockState());
@@ -99,7 +99,7 @@ public class SpikeFeature extends Feature<SpikeConfiguration> {
         if (endCrystal != null) {
             endCrystal.setBeamTarget(config.getCrystalBeamTarget());
             endCrystal.setInvulnerable(config.isCrystalInvulnerable());
-            endCrystal.moveTo((double)spike.getCenterX() + 0.5D, (double)(spike.getHeight() + 1), (double)spike.getCenterZ() + 0.5D, random.nextFloat() * 360.0F, 0.0F);
+            endCrystal.moveTo((double)spike.getCenterX() + 0.5D, spike.getHeight() + 1, (double)spike.getCenterZ() + 0.5D, random.nextFloat() * 360.0F, 0.0F);
         endCrystal.generatedByDragonFight = true; // Paper
             world.addFreshEntity(endCrystal);
             this.setBlock(world, new BlockPos(spike.getCenterX(), spike.getHeight(), spike.getCenterZ()), Blocks.BEDROCK.defaultBlockState());
@@ -134,7 +134,7 @@ public class SpikeFeature extends Feature<SpikeConfiguration> {
             this.radius = radius;
             this.height = height;
             this.guarded = guarded;
-            this.topBoundingBox = new AABB((double)(centerX - radius), (double)DimensionType.MIN_Y, (double)(centerZ - radius), (double)(centerX + radius), (double)DimensionType.MAX_Y, (double)(centerZ + radius));
+            this.topBoundingBox = new AABB(centerX - radius, DimensionType.MIN_Y, centerZ - radius, centerX + radius, DimensionType.MAX_Y, centerZ + radius);
         }
 
         public boolean isCenterWithinChunk(BlockPos pos) {
diff --git a/src/main/java/net/minecraft/world/level/levelgen/structure/LegacyStructureDataHandler.java b/src/main/java/net/minecraft/world/level/levelgen/structure/LegacyStructureDataHandler.java
index 3b2df0411f9ef85445a53292a65f805a80218979..0f344222af0c0310896205d3c23b85026d8171fc 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/structure/LegacyStructureDataHandler.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/structure/LegacyStructureDataHandler.java
@@ -22,7 +22,7 @@ import net.minecraft.world.level.storage.DimensionDataStorage;
 
 public class LegacyStructureDataHandler {
 
-    private static final Map<String, String> CURRENT_TO_LEGACY_MAP = (Map) Util.make(Maps.newHashMap(), (hashmap) -> {
+    private static final Map<String, String> CURRENT_TO_LEGACY_MAP = Util.make(Maps.newHashMap(), (hashmap) -> {
         hashmap.put("Village", "Village");
         hashmap.put("Mineshaft", "Mineshaft");
         hashmap.put("Mansion", "Mansion");
@@ -35,7 +35,7 @@ public class LegacyStructureDataHandler {
         hashmap.put("Fortress", "Fortress");
         hashmap.put("EndCity", "EndCity");
     });
-    private static final Map<String, String> LEGACY_TO_CURRENT_MAP = (Map) Util.make(Maps.newHashMap(), (hashmap) -> {
+    private static final Map<String, String> LEGACY_TO_CURRENT_MAP = Util.make(Maps.newHashMap(), (hashmap) -> {
         hashmap.put("Iglu", "Igloo");
         hashmap.put("TeDP", "Desert_Pyramid");
         hashmap.put("TeJP", "Jungle_Pyramid");
@@ -68,7 +68,7 @@ public class LegacyStructureDataHandler {
 
         while (iterator.hasNext()) {
             String s = (String) iterator.next();
-            StructureFeatureIndexSavedData persistentindexed = (StructureFeatureIndexSavedData) this.indexMap.get(s);
+            StructureFeatureIndexSavedData persistentindexed = this.indexMap.get(s);
 
             if (persistentindexed != null && persistentindexed.hasUnhandledIndex(i)) {
                 persistentindexed.removeIndex(i);
@@ -106,7 +106,7 @@ public class LegacyStructureDataHandler {
                     }
                 }
 
-                nbttagcompound3.putLongArray(s, (List) longarraylist);
+                nbttagcompound3.putLongArray(s, longarraylist);
             }
         }
 
@@ -117,7 +117,7 @@ public class LegacyStructureDataHandler {
     }
 
     private boolean hasLegacyStart(int chunkX, int chunkZ, String id) {
-        return !this.hasLegacyData ? false : this.dataMap.get(id) != null && ((StructureFeatureIndexSavedData) this.indexMap.get(LegacyStructureDataHandler.CURRENT_TO_LEGACY_MAP.get(id))).hasStartIndex(ChunkPos.asLong(chunkX, chunkZ));
+        return !this.hasLegacyData ? false : this.dataMap.get(id) != null && this.indexMap.get(LegacyStructureDataHandler.CURRENT_TO_LEGACY_MAP.get(id)).hasStartIndex(ChunkPos.asLong(chunkX, chunkZ));
     }
 
     private boolean isUnhandledStructureStart(int chunkX, int chunkZ) {
@@ -134,7 +134,7 @@ public class LegacyStructureDataHandler {
                 }
 
                 s = (String) iterator.next();
-            } while (this.dataMap.get(s) == null || !((StructureFeatureIndexSavedData) this.indexMap.get(LegacyStructureDataHandler.CURRENT_TO_LEGACY_MAP.get(s))).hasUnhandledIndex(ChunkPos.asLong(chunkX, chunkZ)));
+            } while (this.dataMap.get(s) == null || !this.indexMap.get(LegacyStructureDataHandler.CURRENT_TO_LEGACY_MAP.get(s)).hasUnhandledIndex(ChunkPos.asLong(chunkX, chunkZ)));
 
             return true;
         }
@@ -148,13 +148,13 @@ public class LegacyStructureDataHandler {
 
         while (iterator.hasNext()) {
             String s = (String) iterator.next();
-            Long2ObjectMap<CompoundTag> long2objectmap = (Long2ObjectMap) this.dataMap.get(s);
+            Long2ObjectMap<CompoundTag> long2objectmap = this.dataMap.get(s);
 
             if (long2objectmap != null) {
                 long i = pos.toLong();
 
-                if (((StructureFeatureIndexSavedData) this.indexMap.get(LegacyStructureDataHandler.CURRENT_TO_LEGACY_MAP.get(s))).hasUnhandledIndex(i)) {
-                    CompoundTag nbttagcompound4 = (CompoundTag) long2objectmap.get(i);
+                if (this.indexMap.get(LegacyStructureDataHandler.CURRENT_TO_LEGACY_MAP.get(s)).hasUnhandledIndex(i)) {
+                    CompoundTag nbttagcompound4 = long2objectmap.get(i);
 
                     if (nbttagcompound4 != null) {
                         nbttagcompound3.put(s, nbttagcompound4);
@@ -197,7 +197,7 @@ public class LegacyStructureDataHandler {
 
                     if (!nbttaglist.isEmpty()) {
                         s2 = nbttaglist.getCompound(0).getString("id");
-                        String s3 = (String) LegacyStructureDataHandler.LEGACY_TO_CURRENT_MAP.get(s2);
+                        String s3 = LegacyStructureDataHandler.LEGACY_TO_CURRENT_MAP.get(s2);
 
                         if (s3 != null) {
                             nbttagcompound1.putString("id", s3);
@@ -211,7 +211,7 @@ public class LegacyStructureDataHandler {
                 }
 
                 String s4 = s + "_index";
-                StructureFeatureIndexSavedData persistentindexed = (StructureFeatureIndexSavedData) persistentStateManager.computeIfAbsent(StructureFeatureIndexSavedData::load, StructureFeatureIndexSavedData::new, s4);
+                StructureFeatureIndexSavedData persistentindexed = persistentStateManager.computeIfAbsent(StructureFeatureIndexSavedData::load, StructureFeatureIndexSavedData::new, s4);
 
                 if (!persistentindexed.getAll().isEmpty()) {
                     this.indexMap.put(s, persistentindexed);
diff --git a/src/main/java/net/minecraft/world/level/levelgen/structure/structures/SwampHutPiece.java b/src/main/java/net/minecraft/world/level/levelgen/structure/structures/SwampHutPiece.java
index 20d406b4753c6edc7e7108dea53bbd79aecfaf23..545f4f8eb6cc1b7730adfc3c065a7bed57b9be7f 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/structure/structures/SwampHutPiece.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/structure/structures/SwampHutPiece.java
@@ -69,19 +69,19 @@ public class SwampHutPiece extends ScatteredFeaturePiece {
             this.placeBlock(world, Blocks.CAULDRON.defaultBlockState(), 4, 2, 6, chunkBox);
             this.placeBlock(world, Blocks.OAK_FENCE.defaultBlockState(), 1, 2, 1, chunkBox);
             this.placeBlock(world, Blocks.OAK_FENCE.defaultBlockState(), 5, 2, 1, chunkBox);
-            BlockState iblockdata = (BlockState) Blocks.SPRUCE_STAIRS.defaultBlockState().setValue(StairBlock.FACING, Direction.NORTH);
-            BlockState iblockdata1 = (BlockState) Blocks.SPRUCE_STAIRS.defaultBlockState().setValue(StairBlock.FACING, Direction.EAST);
-            BlockState iblockdata2 = (BlockState) Blocks.SPRUCE_STAIRS.defaultBlockState().setValue(StairBlock.FACING, Direction.WEST);
-            BlockState iblockdata3 = (BlockState) Blocks.SPRUCE_STAIRS.defaultBlockState().setValue(StairBlock.FACING, Direction.SOUTH);
+            BlockState iblockdata = Blocks.SPRUCE_STAIRS.defaultBlockState().setValue(StairBlock.FACING, Direction.NORTH);
+            BlockState iblockdata1 = Blocks.SPRUCE_STAIRS.defaultBlockState().setValue(StairBlock.FACING, Direction.EAST);
+            BlockState iblockdata2 = Blocks.SPRUCE_STAIRS.defaultBlockState().setValue(StairBlock.FACING, Direction.WEST);
+            BlockState iblockdata3 = Blocks.SPRUCE_STAIRS.defaultBlockState().setValue(StairBlock.FACING, Direction.SOUTH);
 
             this.generateBox(world, chunkBox, 0, 4, 1, 6, 4, 1, iblockdata, iblockdata, false);
             this.generateBox(world, chunkBox, 0, 4, 2, 0, 4, 7, iblockdata1, iblockdata1, false);
             this.generateBox(world, chunkBox, 6, 4, 2, 6, 4, 7, iblockdata2, iblockdata2, false);
             this.generateBox(world, chunkBox, 0, 4, 8, 6, 4, 8, iblockdata3, iblockdata3, false);
-            this.placeBlock(world, (BlockState) iblockdata.setValue(StairBlock.SHAPE, StairsShape.OUTER_RIGHT), 0, 4, 1, chunkBox);
-            this.placeBlock(world, (BlockState) iblockdata.setValue(StairBlock.SHAPE, StairsShape.OUTER_LEFT), 6, 4, 1, chunkBox);
-            this.placeBlock(world, (BlockState) iblockdata3.setValue(StairBlock.SHAPE, StairsShape.OUTER_LEFT), 0, 4, 8, chunkBox);
-            this.placeBlock(world, (BlockState) iblockdata3.setValue(StairBlock.SHAPE, StairsShape.OUTER_RIGHT), 6, 4, 8, chunkBox);
+            this.placeBlock(world, iblockdata.setValue(StairBlock.SHAPE, StairsShape.OUTER_RIGHT), 0, 4, 1, chunkBox);
+            this.placeBlock(world, iblockdata.setValue(StairBlock.SHAPE, StairsShape.OUTER_LEFT), 6, 4, 1, chunkBox);
+            this.placeBlock(world, iblockdata3.setValue(StairBlock.SHAPE, StairsShape.OUTER_LEFT), 0, 4, 8, chunkBox);
+            this.placeBlock(world, iblockdata3.setValue(StairBlock.SHAPE, StairsShape.OUTER_RIGHT), 6, 4, 8, chunkBox);
 
             for (int i = 2; i <= 7; i += 5) {
                 for (int j = 1; j <= 5; j += 4) {
@@ -94,12 +94,12 @@ public class SwampHutPiece extends ScatteredFeaturePiece {
 
                 if (chunkBox.isInside(blockposition_mutableblockposition)) {
                     this.spawnedWitch = true;
-                    Witch entitywitch = (Witch) EntityType.WITCH.create(world.getLevel());
+                    Witch entitywitch = EntityType.WITCH.create(world.getLevel());
 
                     if (entitywitch != null) {
                         entitywitch.setPersistenceRequired();
-                        entitywitch.moveTo((double) blockposition_mutableblockposition.getX() + 0.5D, (double) blockposition_mutableblockposition.getY(), (double) blockposition_mutableblockposition.getZ() + 0.5D, 0.0F, 0.0F);
-                        entitywitch.finalizeSpawn(world, world.getCurrentDifficultyAt(blockposition_mutableblockposition), MobSpawnType.STRUCTURE, (SpawnGroupData) null, (CompoundTag) null);
+                        entitywitch.moveTo((double) blockposition_mutableblockposition.getX() + 0.5D, blockposition_mutableblockposition.getY(), (double) blockposition_mutableblockposition.getZ() + 0.5D, 0.0F, 0.0F);
+                        entitywitch.finalizeSpawn(world, world.getCurrentDifficultyAt(blockposition_mutableblockposition), MobSpawnType.STRUCTURE, null, null);
                         world.addFreshEntityWithPassengers(entitywitch, org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason.CHUNK_GEN); // CraftBukkit - add SpawnReason
                     }
                 }
@@ -115,12 +115,12 @@ public class SwampHutPiece extends ScatteredFeaturePiece {
 
             if (box.isInside(blockposition_mutableblockposition)) {
                 this.spawnedCat = true;
-                Cat entitycat = (Cat) EntityType.CAT.create(world.getLevel());
+                Cat entitycat = EntityType.CAT.create(world.getLevel());
 
                 if (entitycat != null) {
                     entitycat.setPersistenceRequired();
-                    entitycat.moveTo((double) blockposition_mutableblockposition.getX() + 0.5D, (double) blockposition_mutableblockposition.getY(), (double) blockposition_mutableblockposition.getZ() + 0.5D, 0.0F, 0.0F);
-                    entitycat.finalizeSpawn(world, world.getCurrentDifficultyAt(blockposition_mutableblockposition), MobSpawnType.STRUCTURE, (SpawnGroupData) null, (CompoundTag) null);
+                    entitycat.moveTo((double) blockposition_mutableblockposition.getX() + 0.5D, blockposition_mutableblockposition.getY(), (double) blockposition_mutableblockposition.getZ() + 0.5D, 0.0F, 0.0F);
+                    entitycat.finalizeSpawn(world, world.getCurrentDifficultyAt(blockposition_mutableblockposition), MobSpawnType.STRUCTURE, null, null);
                     world.addFreshEntityWithPassengers(entitycat, org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason.CHUNK_GEN); // CraftBukkit - add SpawnReason
                 }
             }
diff --git a/src/main/java/net/minecraft/world/level/levelgen/structure/templatesystem/StructureTemplate.java b/src/main/java/net/minecraft/world/level/levelgen/structure/templatesystem/StructureTemplate.java
index 5fe01819e39af1942857f4a1d35d6d70783c440f..99c81638fa4db6066229b5dc41051c71d1ace0ab 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/structure/templatesystem/StructureTemplate.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/structure/templatesystem/StructureTemplate.java
@@ -122,7 +122,7 @@ public class StructureTemplate {
                     if (tileentity != null) {
                         definedstructure_blockinfo = new StructureTemplate.StructureBlockInfo(blockposition5, iblockdata, tileentity.saveWithId());
                     } else {
-                        definedstructure_blockinfo = new StructureTemplate.StructureBlockInfo(blockposition5, iblockdata, (CompoundTag) null);
+                        definedstructure_blockinfo = new StructureTemplate.StructureBlockInfo(blockposition5, iblockdata, null);
                     }
 
                     StructureTemplate.addToLists(definedstructure_blockinfo, list, list1, list2);
@@ -359,7 +359,7 @@ public class StructureTemplate {
 
                         while (iterator2.hasNext()) {
                             Pair<BlockPos, CompoundTag> pair = (Pair) iterator2.next();
-                            BlockPos blockposition5 = (BlockPos) pair.getFirst();
+                            BlockPos blockposition5 = pair.getFirst();
 
                             voxelshapebitset.fill(blockposition5.getX() - i2, blockposition5.getY() - j2, blockposition5.getZ() - l1);
                         }
@@ -371,7 +371,7 @@ public class StructureTemplate {
 
                     while (iterator1.hasNext()) {
                         Pair<BlockPos, CompoundTag> pair1 = (Pair) iterator1.next();
-                        BlockPos blockposition6 = (BlockPos) pair1.getFirst();
+                        BlockPos blockposition6 = pair1.getFirst();
 
                         if (!placementData.getKnownShape()) {
                             iblockdata1 = world.getBlockState(blockposition6);
@@ -460,7 +460,7 @@ public class StructureTemplate {
             if (area == null || area.isInside(blockposition2)) {
                 CompoundTag nbttagcompound = definedstructure_entityinfo.nbt.copy();
                 Vec3 vec3d = StructureTemplate.transform(definedstructure_entityinfo.pos, mirror, rotation, pivot);
-                Vec3 vec3d1 = vec3d.add((double) pos.getX(), (double) pos.getY(), (double) pos.getZ());
+                Vec3 vec3d1 = vec3d.add(pos.getX(), pos.getY(), pos.getZ());
                 ListTag nbttaglist = new ListTag();
 
                 nbttaglist.add(DoubleTag.valueOf(vec3d1.x));
@@ -474,7 +474,7 @@ public class StructureTemplate {
                     f += entity.mirror(mirror) - entity.getYRot();
                     entity.moveTo(vec3d1.x, vec3d1.y, vec3d1.z, f, entity.getXRot());
                     if (initializeMobs && entity instanceof Mob) {
-                        ((Mob) entity).finalizeSpawn(world, world.getCurrentDifficultyAt(new BlockPos(vec3d1)), MobSpawnType.STRUCTURE, (SpawnGroupData) null, nbttagcompound);
+                        ((Mob) entity).finalizeSpawn(world, world.getCurrentDifficultyAt(new BlockPos(vec3d1)), MobSpawnType.STRUCTURE, null, nbttagcompound);
                     }
 
                     world.addFreshEntityWithPassengers(entity);
@@ -628,10 +628,10 @@ public class StructureTemplate {
             }
 
             ListTag nbttaglist = new ListTag();
-            List<StructureTemplate.StructureBlockInfo> list1 = ((StructureTemplate.Palette) this.palettes.get(0)).blocks();
+            List<StructureTemplate.StructureBlockInfo> list1 = this.palettes.get(0).blocks();
 
             for (int j = 0; j < list1.size(); ++j) {
-                StructureTemplate.StructureBlockInfo definedstructure_blockinfo = (StructureTemplate.StructureBlockInfo) list1.get(j);
+                StructureTemplate.StructureBlockInfo definedstructure_blockinfo = list1.get(j);
                 CompoundTag nbttagcompound1 = new CompoundTag();
 
                 nbttagcompound1.put("pos", this.newIntegerList(definedstructure_blockinfo.pos.getX(), definedstructure_blockinfo.pos.getY(), definedstructure_blockinfo.pos.getZ()));
@@ -645,9 +645,9 @@ public class StructureTemplate {
                 nbttaglist.add(nbttagcompound1);
 
                 for (int l = 1; l < this.palettes.size(); ++l) {
-                    StructureTemplate.SimplePalette definedstructure_b1 = (StructureTemplate.SimplePalette) list.get(l);
+                    StructureTemplate.SimplePalette definedstructure_b1 = list.get(l);
 
-                    definedstructure_b1.addMapping(((StructureTemplate.StructureBlockInfo) ((StructureTemplate.Palette) this.palettes.get(l)).blocks().get(j)).state, k);
+                    definedstructure_b1.addMapping(this.palettes.get(l).blocks().get(j).state, k);
                 }
             }
 
@@ -853,8 +853,8 @@ public class StructureTemplate {
         }
 
         public List<StructureTemplate.StructureBlockInfo> blocks(Block block) {
-            return (List) this.cache.computeIfAbsent(block, (block1) -> {
-                return (List) this.blocks.stream().filter((definedstructure_blockinfo) -> {
+            return this.cache.computeIfAbsent(block, (block1) -> {
+                return this.blocks.stream().filter((definedstructure_blockinfo) -> {
                     return definedstructure_blockinfo.state.is(block1);
                 }).collect(Collectors.toList());
             });
@@ -895,7 +895,7 @@ public class StructureTemplate {
 
         @Nullable
         public BlockState stateFor(int id) {
-            BlockState iblockdata = (BlockState) this.ids.byId(id);
+            BlockState iblockdata = this.ids.byId(id);
 
             return iblockdata == null ? SimplePalette.DEFAULT_BLOCK_STATE : iblockdata; // CraftBukkit - decompile error
         }
diff --git a/src/main/java/net/minecraft/world/level/lighting/BlockLightEngine.java b/src/main/java/net/minecraft/world/level/lighting/BlockLightEngine.java
index 981e723e40f8777ca3f162bcf8a25fc2b8e6fd89..905efd2fc982c29e515f52ebd4254286992dc3ab 100644
--- a/src/main/java/net/minecraft/world/level/lighting/BlockLightEngine.java
+++ b/src/main/java/net/minecraft/world/level/lighting/BlockLightEngine.java
@@ -50,7 +50,7 @@ public final class BlockLightEngine extends LayerLightEngine<BlockLightSectionSt
                 if (mutableInt.getValue().intValue() >= 15) {
                     return 15;
                 } else {
-                    BlockState blockState2 = this.getStateAndOpacity(sourceId, (MutableInt)null);
+                    BlockState blockState2 = this.getStateAndOpacity(sourceId, null);
                     VoxelShape voxelShape = this.getShape(blockState2, sourceId, direction);
                     VoxelShape voxelShape2 = this.getShape(blockState, targetId, direction.getOpposite());
                     return Shapes.faceShapeOccludes(voxelShape, voxelShape2) ? 15 : level + Math.max(1, mutableInt.getValue().intValue());
diff --git a/src/main/java/net/minecraft/world/level/lighting/DataLayerStorageMap.java b/src/main/java/net/minecraft/world/level/lighting/DataLayerStorageMap.java
index bd0cfb138fe5cde22eafcd548139394991d0ede7..91fbb6b9eccd095e5f76de22511d24fd4c162f57 100644
--- a/src/main/java/net/minecraft/world/level/lighting/DataLayerStorageMap.java
+++ b/src/main/java/net/minecraft/world/level/lighting/DataLayerStorageMap.java
@@ -33,7 +33,7 @@ public abstract class DataLayerStorageMap<M extends DataLayerStorageMap<M>> {
 
     public void copyDataLayer(long pos) {
         if (this.isVisible) { throw new IllegalStateException("writing to visible data"); } // Paper - avoid copying light data
-        this.data.queueUpdate(pos, ((DataLayer) this.data.getUpdating(pos)).copy()); // Paper - avoid copying light data
+        this.data.queueUpdate(pos, this.data.getUpdating(pos).copy()); // Paper - avoid copying light data
         this.clearCache();
     }
 
@@ -72,7 +72,7 @@ public abstract class DataLayerStorageMap<M extends DataLayerStorageMap<M>> {
     @Nullable
     public DataLayer removeLayer(long chunkPos) {
         if (this.isVisible) { throw new IllegalStateException("writing to visible data"); } // Paper - avoid copying light data
-        return (DataLayer) this.data.queueRemove(chunkPos); // Paper - avoid copying light data
+        return this.data.queueRemove(chunkPos); // Paper - avoid copying light data
     }
 
     public void setLayer(long pos, DataLayer data) {
diff --git a/src/main/java/net/minecraft/world/level/lighting/SkyLightEngine.java b/src/main/java/net/minecraft/world/level/lighting/SkyLightEngine.java
index 685ce5bc39b75cc75456a41269b1f3788c2f92b0..8d1a44db699ecb6f71aafac968cc1b8b6f49864f 100644
--- a/src/main/java/net/minecraft/world/level/lighting/SkyLightEngine.java
+++ b/src/main/java/net/minecraft/world/level/lighting/SkyLightEngine.java
@@ -45,7 +45,7 @@ public final class SkyLightEngine extends LayerLightEngine<SkyLightSectionStorag
                     if (direction == null) {
                         throw new IllegalStateException(String.format(Locale.ROOT, "Light was spread in illegal direction %d, %d, %d", Integer.valueOf(o), Integer.valueOf(p), Integer.valueOf(q)));
                     } else {
-                        BlockState blockState2 = this.getStateAndOpacity(sourceId, (MutableInt)null);
+                        BlockState blockState2 = this.getStateAndOpacity(sourceId, null);
                         VoxelShape voxelShape = this.getShape(blockState2, sourceId, direction);
                         VoxelShape voxelShape2 = this.getShape(blockState, targetId, direction.getOpposite());
                         if (Shapes.faceShapeOccludes(voxelShape, voxelShape2)) {
diff --git a/src/main/java/net/minecraft/world/level/lighting/SkyLightSectionStorage.java b/src/main/java/net/minecraft/world/level/lighting/SkyLightSectionStorage.java
index e6c857c8b4e4e65e3cf6a75ce6d844ff61acb566..89162803eb9f58673fac0630bcae326be0592677 100644
--- a/src/main/java/net/minecraft/world/level/lighting/SkyLightSectionStorage.java
+++ b/src/main/java/net/minecraft/world/level/lighting/SkyLightSectionStorage.java
@@ -33,7 +33,7 @@ public class SkyLightSectionStorage extends LayerLightSectionStorage<SkyLightSec
         long l = SectionPos.blockToSection(blockPos);
         int i = SectionPos.y(l);
         synchronized (this.visibleUpdateLock) { // Paper - avoid copying light data
-        SkyLightSectionStorage.SkyDataLayerStorageMap skyDataLayerStorageMap = (SkyLightSectionStorage.SkyDataLayerStorageMap) this.e_visible; // Paper - avoid copying light data - must be after lock acquire
+        SkyLightSectionStorage.SkyDataLayerStorageMap skyDataLayerStorageMap = this.e_visible; // Paper - avoid copying light data - must be after lock acquire
         int j = skyDataLayerStorageMap.otherData.getVisibleAsync(SectionPos.getZeroNode(l)); // Paper - avoid copying light data
         if (j != skyDataLayerStorageMap.currentLowestY && i < j) {
             DataLayer dataLayer = this.getDataLayer(skyDataLayerStorageMap, l);
diff --git a/src/main/java/net/minecraft/world/level/material/FlowingFluid.java b/src/main/java/net/minecraft/world/level/material/FlowingFluid.java
index 51122db1ba84b1b67f60a41d1ca9e64ad225af41..ffe6ad6b0e9bfe53e5116f90d3b608f97159f204 100644
--- a/src/main/java/net/minecraft/world/level/material/FlowingFluid.java
+++ b/src/main/java/net/minecraft/world/level/material/FlowingFluid.java
@@ -94,15 +94,15 @@ public abstract class FlowingFluid extends Fluid {
                 }
 
                 if (f1 != 0.0F) {
-                    d0 += (double) ((float) enumdirection.getStepX() * f1);
-                    d1 += (double) ((float) enumdirection.getStepZ() * f1);
+                    d0 += (float) enumdirection.getStepX() * f1;
+                    d1 += (float) enumdirection.getStepZ() * f1;
                 }
             }
         }
 
         Vec3 vec3d = new Vec3(d0, 0.0D, d1);
 
-        if (((Boolean) state.getValue(FlowingFluid.FALLING)).booleanValue()) {
+        if (state.getValue(FlowingFluid.FALLING).booleanValue()) {
             Iterator iterator1 = Direction.Plane.HORIZONTAL.iterator();
 
             while (iterator1.hasNext()) {
@@ -161,7 +161,7 @@ public abstract class FlowingFluid extends Fluid {
     private void spreadToSides(Level world, BlockPos pos, FluidState fluidState, BlockState blockState) {
         int i = fluidState.getAmount() - this.getDropOff(world);
 
-        if (((Boolean) fluidState.getValue(FlowingFluid.FALLING)).booleanValue()) {
+        if (fluidState.getValue(FlowingFluid.FALLING).booleanValue()) {
             i = 7;
         }
 
@@ -171,8 +171,8 @@ public abstract class FlowingFluid extends Fluid {
 
             while (iterator.hasNext()) {
                 Entry<Direction, FluidState> entry = (Entry) iterator.next();
-                Direction enumdirection = (Direction) entry.getKey();
-                FluidState fluid1 = (FluidState) entry.getValue();
+                Direction enumdirection = entry.getKey();
+                FluidState fluid1 = entry.getValue();
                 BlockPos blockposition1 = pos.relative(enumdirection);
                 BlockState iblockdata1 = world.getBlockStateIfLoaded(blockposition1); // Paper
                 if (iblockdata1 == null) continue; // Paper
@@ -242,7 +242,7 @@ public abstract class FlowingFluid extends Fluid {
         Object2ByteLinkedOpenHashMap object2bytelinkedopenhashmap;
 
         if (!state.getBlock().hasDynamicShape() && !fromState.getBlock().hasDynamicShape()) {
-            object2bytelinkedopenhashmap = (Object2ByteLinkedOpenHashMap) FlowingFluid.OCCLUSION_CACHE.get();
+            object2bytelinkedopenhashmap = FlowingFluid.OCCLUSION_CACHE.get();
         } else {
             object2bytelinkedopenhashmap = null;
         }
@@ -278,13 +278,13 @@ public abstract class FlowingFluid extends Fluid {
     public abstract Fluid getFlowing();
 
     public FluidState getFlowing(int level, boolean falling) {
-        return (FluidState) ((FluidState) this.getFlowing().defaultFluidState().setValue(FlowingFluid.LEVEL, Integer.valueOf(level))).setValue(FlowingFluid.FALLING, Boolean.valueOf(falling));
+        return this.getFlowing().defaultFluidState().setValue(FlowingFluid.LEVEL, Integer.valueOf(level)).setValue(FlowingFluid.FALLING, Boolean.valueOf(falling));
     }
 
     public abstract Fluid getSource();
 
     public FluidState getSource(boolean falling) {
-        return (FluidState) this.getSource().defaultFluidState().setValue(FlowingFluid.FALLING, Boolean.valueOf(falling));
+        return this.getSource().defaultFluidState().setValue(FlowingFluid.FALLING, Boolean.valueOf(falling));
     }
 
     protected abstract boolean canConvertToSource(Level world);
@@ -334,8 +334,8 @@ public abstract class FlowingFluid extends Fluid {
                     short2objectmap.put(short0, pair);
                 }
                 // Paper end
-                BlockState iblockdata1 = (BlockState) pair.getFirst();
-                FluidState fluid = (FluidState) pair.getSecond();
+                BlockState iblockdata1 = pair.getFirst();
+                FluidState fluid = pair.getSecond();
 
                 if (this.canPassThrough(world, this.getFlowing(), blockposition, iblockdata, enumdirection1, blockposition2, iblockdata1, fluid)) {
                     boolean flag = short2booleanmap.computeIfAbsent(short0, (short1) -> {
@@ -406,7 +406,7 @@ public abstract class FlowingFluid extends Fluid {
             BlockPos blockposition1 = pos.relative(enumdirection);
             short short0 = FlowingFluid.getCacheKey(pos, blockposition1);
             // Paper start
-            Pair pair = (Pair) short2objectmap.get(short0);
+            Pair pair = short2objectmap.get(short0);
             if (pair == null) {
                 BlockState iblockdatax = world.getBlockStateIfLoaded(blockposition1);
                 if (iblockdatax == null) continue;
@@ -506,7 +506,7 @@ public abstract class FlowingFluid extends Fluid {
     }
 
     protected static int getLegacyLevel(FluidState state) {
-        return state.isSource() ? 0 : 8 - Math.min(state.getAmount(), 8) + (((Boolean) state.getValue(FlowingFluid.FALLING)).booleanValue() ? 8 : 0);
+        return state.isSource() ? 0 : 8 - Math.min(state.getAmount(), 8) + (state.getValue(FlowingFluid.FALLING).booleanValue() ? 8 : 0);
     }
 
     private static boolean hasSameAbove(FluidState state, BlockGetter world, BlockPos pos) {
@@ -528,8 +528,8 @@ public abstract class FlowingFluid extends Fluid {
 
     @Override
     public VoxelShape getShape(FluidState state, BlockGetter world, BlockPos pos) {
-        return state.getAmount() == 9 && FlowingFluid.hasSameAbove(state, world, pos) ? Shapes.block() : (VoxelShape) this.shapes.computeIfAbsent(state, (fluid1) -> {
-            return Shapes.box(0.0D, 0.0D, 0.0D, 1.0D, (double) fluid1.getHeight(world, pos), 1.0D);
+        return state.getAmount() == 9 && FlowingFluid.hasSameAbove(state, world, pos) ? Shapes.block() : this.shapes.computeIfAbsent(state, (fluid1) -> {
+            return Shapes.box(0.0D, 0.0D, 0.0D, 1.0D, fluid1.getHeight(world, pos), 1.0D);
         });
     }
 }
diff --git a/src/main/java/net/minecraft/world/level/material/LavaFluid.java b/src/main/java/net/minecraft/world/level/material/LavaFluid.java
index 7cf103c4fc6390a32d781cf462f91fc78e4f81fb..4bf1c47029504237e85b6558138e91be8fac7d55 100644
--- a/src/main/java/net/minecraft/world/level/material/LavaFluid.java
+++ b/src/main/java/net/minecraft/world/level/material/LavaFluid.java
@@ -60,7 +60,7 @@ public abstract class LavaFluid extends FlowingFluid {
             }
 
             if (random.nextInt(200) == 0) {
-                world.playLocalSound((double) pos.getX(), (double) pos.getY(), (double) pos.getZ(), SoundEvents.LAVA_AMBIENT, SoundSource.BLOCKS, 0.2F + random.nextFloat() * 0.2F, 0.9F + random.nextFloat() * 0.15F, false);
+                world.playLocalSound(pos.getX(), pos.getY(), pos.getZ(), SoundEvents.LAVA_AMBIENT, SoundSource.BLOCKS, 0.2F + random.nextFloat() * 0.2F, 0.9F + random.nextFloat() * 0.15F, false);
             }
         }
 
@@ -160,7 +160,7 @@ public abstract class LavaFluid extends FlowingFluid {
 
     @Override
     public BlockState createLegacyBlock(FluidState state) {
-        return (BlockState) Blocks.LAVA.defaultBlockState().setValue(LiquidBlock.LEVEL, Integer.valueOf(getLegacyLevel(state)));
+        return Blocks.LAVA.defaultBlockState().setValue(LiquidBlock.LEVEL, Integer.valueOf(getLegacyLevel(state)));
     }
 
     @Override
@@ -187,7 +187,7 @@ public abstract class LavaFluid extends FlowingFluid {
     public int getSpreadDelay(Level world, BlockPos pos, FluidState oldState, FluidState newState) {
         int i = this.getTickDelay(world);
 
-        if (!oldState.isEmpty() && !newState.isEmpty() && !((Boolean) oldState.getValue(LavaFluid.FALLING)).booleanValue() && !((Boolean) newState.getValue(LavaFluid.FALLING)).booleanValue() && newState.getHeight(world, pos) > oldState.getHeight(world, pos) && world.getRandom().nextInt(4) != 0) {
+        if (!oldState.isEmpty() && !newState.isEmpty() && !oldState.getValue(LavaFluid.FALLING).booleanValue() && !newState.getValue(LavaFluid.FALLING).booleanValue() && newState.getHeight(world, pos) > oldState.getHeight(world, pos) && world.getRandom().nextInt(4) != 0) {
             i *= 4;
         }
 
@@ -252,7 +252,7 @@ public abstract class LavaFluid extends FlowingFluid {
 
         @Override
         public int getAmount(FluidState state) {
-            return ((Integer) state.getValue(Flowing.LEVEL)).intValue();
+            return state.getValue(Flowing.LEVEL).intValue();
         }
 
         @Override
diff --git a/src/main/java/net/minecraft/world/level/pathfinder/Path.java b/src/main/java/net/minecraft/world/level/pathfinder/Path.java
index 2a335f277bd0e4b8ad0f60d8226eb8aaa80a871f..701c568baeaca533fbcffa7b1ace6e2fc93d796c 100644
--- a/src/main/java/net/minecraft/world/level/pathfinder/Path.java
+++ b/src/main/java/net/minecraft/world/level/pathfinder/Path.java
@@ -77,7 +77,7 @@ public class Path {
     public Vec3 getEntityPosAtNode(Entity entity, int index) {
         Node node = this.nodes.get(index);
         double d = (double)node.x + (double)((int)(entity.getBbWidth() + 1.0F)) * 0.5D;
-        double e = (double)node.y;
+        double e = node.y;
         double f = (double)node.z + (double)((int)(entity.getBbWidth() + 1.0F)) * 0.5D;
         return new Vec3(d, e, f);
     }
diff --git a/src/main/java/net/minecraft/world/level/pathfinder/WalkNodeEvaluator.java b/src/main/java/net/minecraft/world/level/pathfinder/WalkNodeEvaluator.java
index 1e179292584a4cfb4a32cbad508348a6e15060b8..85e8e26b20919336cc6d390183deb8510646e14f 100644
--- a/src/main/java/net/minecraft/world/level/pathfinder/WalkNodeEvaluator.java
+++ b/src/main/java/net/minecraft/world/level/pathfinder/WalkNodeEvaluator.java
@@ -54,7 +54,7 @@ public class WalkNodeEvaluator extends NodeEvaluator {
     public @org.jetbrains.annotations.Nullable Node getStart() {
         BlockPos.MutableBlockPos mutableBlockPos = new BlockPos.MutableBlockPos();
         int i = this.mob.getBlockY();
-        BlockState blockState = this.level.getBlockState(mutableBlockPos.set(this.mob.getX(), (double)i, this.mob.getZ()));
+        BlockState blockState = this.level.getBlockState(mutableBlockPos.set(this.mob.getX(), i, this.mob.getZ()));
         if (!this.mob.canStandOnFluid(blockState.getFluidState())) {
             if (this.canFloat() && this.mob.isInWater()) {
                 while(true) {
@@ -64,7 +64,7 @@ public class WalkNodeEvaluator extends NodeEvaluator {
                     }
 
                     ++i;
-                    blockState = this.level.getBlockState(mutableBlockPos.set(this.mob.getX(), (double)i, this.mob.getZ()));
+                    blockState = this.level.getBlockState(mutableBlockPos.set(this.mob.getX(), i, this.mob.getZ()));
                 }
             } else if (this.mob.isOnGround()) {
                 i = Mth.floor(this.mob.getY() + 0.5D);
@@ -78,7 +78,7 @@ public class WalkNodeEvaluator extends NodeEvaluator {
         } else {
             while(this.mob.canStandOnFluid(blockState.getFluidState())) {
                 ++i;
-                blockState = this.level.getBlockState(mutableBlockPos.set(this.mob.getX(), (double)i, this.mob.getZ()));
+                blockState = this.level.getBlockState(mutableBlockPos.set(this.mob.getX(), i, this.mob.getZ()));
             }
 
             --i;
@@ -87,7 +87,7 @@ public class WalkNodeEvaluator extends NodeEvaluator {
         BlockPos blockPos2 = this.mob.blockPosition();
         if (!this.canStartAt(mutableBlockPos.set(blockPos2.getX(), i, blockPos2.getZ()))) {
             AABB aABB = this.mob.getBoundingBox();
-            if (this.canStartAt(mutableBlockPos.set(aABB.minX, (double)i, aABB.minZ)) || this.canStartAt(mutableBlockPos.set(aABB.minX, (double)i, aABB.maxZ)) || this.canStartAt(mutableBlockPos.set(aABB.maxX, (double)i, aABB.minZ)) || this.canStartAt(mutableBlockPos.set(aABB.maxX, (double)i, aABB.maxZ))) {
+            if (this.canStartAt(mutableBlockPos.set(aABB.minX, i, aABB.minZ)) || this.canStartAt(mutableBlockPos.set(aABB.minX, i, aABB.maxZ)) || this.canStartAt(mutableBlockPos.set(aABB.maxX, i, aABB.minZ)) || this.canStartAt(mutableBlockPos.set(aABB.maxX, i, aABB.maxZ))) {
                 return this.getStartNode(mutableBlockPos);
             }
         }
@@ -197,7 +197,7 @@ public class WalkNodeEvaluator extends NodeEvaluator {
         AABB aABB = this.mob.getBoundingBox();
         Vec3 vec3 = new Vec3((double)node.x - this.mob.getX() + aABB.getXsize() / 2.0D, (double)node.y - this.mob.getY() + aABB.getYsize() / 2.0D, (double)node.z - this.mob.getZ() + aABB.getZsize() / 2.0D);
         int i = Mth.ceil(vec3.length() / aABB.getSize());
-        vec3 = vec3.scale((double)(1.0F / (float)i));
+        vec3 = vec3.scale(1.0F / (float)i);
 
         for(int j = 1; j <= i; ++j) {
             aABB = aABB.move(vec3);
@@ -248,7 +248,7 @@ public class WalkNodeEvaluator extends NodeEvaluator {
                     if (node != null && (node.type == BlockPathTypes.OPEN || node.type == BlockPathTypes.WALKABLE) && this.mob.getBbWidth() < 1.0F) {
                         double g = (double)(x - direction.getStepX()) + 0.5D;
                         double h = (double)(z - direction.getStepZ()) + 0.5D;
-                        AABB aABB = new AABB(g - e, this.getFloorLevel(mutableBlockPos.set(g, (double)(y + 1), h)) + 0.001D, h - e, g + e, (double)this.mob.getBbHeight() + this.getFloorLevel(mutableBlockPos.set((double)node.x, (double)node.y, (double)node.z)) - 0.002D, h + e);
+                        AABB aABB = new AABB(g - e, this.getFloorLevel(mutableBlockPos.set(g, y + 1, h)) + 0.001D, h - e, g + e, (double)this.mob.getBbHeight() + this.getFloorLevel(mutableBlockPos.set(node.x, node.y, (double)node.z)) - 0.002D, h + e);
                         if (this.hasCollisions(aABB)) {
                             node = null;
                         }
diff --git a/src/main/java/net/minecraft/world/level/portal/PortalForcer.java b/src/main/java/net/minecraft/world/level/portal/PortalForcer.java
index 92d13c9f1ec1e5ff72c1d68f924a8d1c86c91565..875179c96738db9f06c2b1b83972d05916e1a9eb 100644
--- a/src/main/java/net/minecraft/world/level/portal/PortalForcer.java
+++ b/src/main/java/net/minecraft/world/level/portal/PortalForcer.java
@@ -91,7 +91,7 @@ public class PortalForcer {
             this.level.getChunkSource().addRegionTicket(TicketType.PORTAL, new ChunkPos(blockposition1), 3, blockposition1);
             BlockState iblockdata = this.level.getBlockState(blockposition1);
 
-            return BlockUtil.getLargestRectangleAround(blockposition1, (Direction.Axis) iblockdata.getValue(BlockStateProperties.HORIZONTAL_AXIS), 21, Direction.Axis.Y, 21, (blockposition2) -> {
+            return BlockUtil.getLargestRectangleAround(blockposition1, iblockdata.getValue(BlockStateProperties.HORIZONTAL_AXIS), 21, Direction.Axis.Y, 21, (blockposition2) -> {
                 return this.level.getBlockState(blockposition2) == iblockdata;
             });
         });
@@ -129,7 +129,7 @@ public class PortalForcer {
             j = Math.min(i, this.level.getHeight(Heightmap.Types.MOTION_BLOCKING, blockposition_mutableblockposition1.getX(), blockposition_mutableblockposition1.getZ()));
             boolean flag = true;
 
-            if (worldborder.isWithinBounds((BlockPos) blockposition_mutableblockposition1) && worldborder.isWithinBounds((BlockPos) blockposition_mutableblockposition1.move(enumdirection, 1))) {
+            if (worldborder.isWithinBounds(blockposition_mutableblockposition1) && worldborder.isWithinBounds(blockposition_mutableblockposition1.move(enumdirection, 1))) {
                 blockposition_mutableblockposition1.move(enumdirection.getOpposite(), 1);
 
                 for (k = j; k >= this.level.getMinBuildHeight(); --k) {
@@ -208,7 +208,7 @@ public class PortalForcer {
             }
         }
 
-        BlockState iblockdata1 = (BlockState) Blocks.NETHER_PORTAL.defaultBlockState().setValue(NetherPortalBlock.AXIS, enumdirection_enumaxis);
+        BlockState iblockdata1 = Blocks.NETHER_PORTAL.defaultBlockState().setValue(NetherPortalBlock.AXIS, enumdirection_enumaxis);
 
         for (k1 = 0; k1 < 2; ++k1) {
             for (j = 0; j < 3; ++j) {
diff --git a/src/main/java/net/minecraft/world/level/portal/PortalShape.java b/src/main/java/net/minecraft/world/level/portal/PortalShape.java
index c461e0d04047db9c0c5ecc04063cebd38bf96ec2..554170a363f680d39fea974e4cc02fc8df68a462 100644
--- a/src/main/java/net/minecraft/world/level/portal/PortalShape.java
+++ b/src/main/java/net/minecraft/world/level/portal/PortalShape.java
@@ -198,7 +198,7 @@ public class PortalShape {
         org.bukkit.World bworld = this.level.getMinecraftWorld().getWorld();
 
         // Copy below for loop
-        BlockState iblockdata = (BlockState) Blocks.NETHER_PORTAL.defaultBlockState().setValue(NetherPortalBlock.AXIS, this.axis);
+        BlockState iblockdata = Blocks.NETHER_PORTAL.defaultBlockState().setValue(NetherPortalBlock.AXIS, this.axis);
 
         BlockPos.betweenClosed(this.bottomLeft, this.bottomLeft.relative(Direction.UP, this.height - 1).relative(this.rightDir, this.width - 1)).forEach((blockposition) -> {
             this.blocks.setBlock(blockposition, iblockdata, 18);
@@ -254,9 +254,9 @@ public class PortalShape {
     public static PortalInfo createPortalInfo(ServerLevel worldserver, BlockUtil.FoundRectangle blockutil_rectangle, Direction.Axis enumdirection_enumaxis, Vec3 vec3d, Entity entity, Vec3 vec3d1, float f, float f1, CraftPortalEvent portalEventInfo) { // CraftBukkit
         BlockPos blockposition = blockutil_rectangle.minCorner;
         BlockState iblockdata = worldserver.getBlockState(blockposition);
-        Direction.Axis enumdirection_enumaxis1 = (Direction.Axis) iblockdata.getOptionalValue(BlockStateProperties.HORIZONTAL_AXIS).orElse(Direction.Axis.X);
-        double d0 = (double) blockutil_rectangle.axis1Size;
-        double d1 = (double) blockutil_rectangle.axis2Size;
+        Direction.Axis enumdirection_enumaxis1 = iblockdata.getOptionalValue(BlockStateProperties.HORIZONTAL_AXIS).orElse(Direction.Axis.X);
+        double d0 = blockutil_rectangle.axis1Size;
+        double d1 = blockutil_rectangle.axis2Size;
         EntityDimensions entitysize = entity.getDimensions(entity.getPose());
         int i = enumdirection_enumaxis == enumdirection_enumaxis1 ? 0 : 90;
         Vec3 vec3d2 = enumdirection_enumaxis == enumdirection_enumaxis1 ? vec3d1 : new Vec3(vec3d1.z, vec3d1.y, -vec3d1.x);
diff --git a/src/main/java/net/minecraft/world/level/redstone/NeighborUpdater.java b/src/main/java/net/minecraft/world/level/redstone/NeighborUpdater.java
index 19faa8f5f891c1ffbed0af8391dee8202433c447..32d2fc77e4b4eedbf3622e154c329d332ecb7af6 100644
--- a/src/main/java/net/minecraft/world/level/redstone/NeighborUpdater.java
+++ b/src/main/java/net/minecraft/world/level/redstone/NeighborUpdater.java
@@ -53,7 +53,7 @@ public interface NeighborUpdater {
     static void executeUpdate(Level world, BlockState state, BlockPos pos, Block sourceBlock, BlockPos sourcePos, boolean notify) {
         try {
             // CraftBukkit start
-            CraftWorld cworld = ((ServerLevel) world).getWorld();
+            CraftWorld cworld = world.getWorld();
             if (cworld != null) {
                 BlockPhysicsEvent event = new BlockPhysicsEvent(CraftBlock.at(world, pos), CraftBlockData.fromData(state), CraftBlock.at(world, sourcePos));
                 ((ServerLevel) world).getCraftServer().getPluginManager().callEvent(event);
diff --git a/src/main/java/net/minecraft/world/level/saveddata/maps/MapItemSavedData.java b/src/main/java/net/minecraft/world/level/saveddata/maps/MapItemSavedData.java
index a18958844dc7ecf2f953baa12436e5b5bb9e739a..efc69245e18d2c29026f148691902882d6ac7f48 100644
--- a/src/main/java/net/minecraft/world/level/saveddata/maps/MapItemSavedData.java
+++ b/src/main/java/net/minecraft/world/level/saveddata/maps/MapItemSavedData.java
@@ -150,7 +150,7 @@ public class MapItemSavedData extends SavedData {
         });
         int i = nbt.getInt("xCenter");
         int j = nbt.getInt("zCenter");
-        byte b0 = (byte) Mth.clamp((int) nbt.getByte("scale"), (int) 0, (int) 4);
+        byte b0 = (byte) Mth.clamp(nbt.getByte("scale"), 0, 4);
         boolean flag = !nbt.contains("trackingPosition", 1) || nbt.getBoolean("trackingPosition");
         boolean flag1 = nbt.getBoolean("unlimitedTracking");
         boolean flag2 = nbt.getBoolean("locked");
@@ -168,7 +168,7 @@ public class MapItemSavedData extends SavedData {
             MapBanner mapiconbanner = MapBanner.load(nbttaglist.getCompound(k));
 
             worldmap.bannerMarkers.put(mapiconbanner.getId(), mapiconbanner);
-            worldmap.addDecoration(mapiconbanner.getDecoration(), (LevelAccessor) null, mapiconbanner.getId(), (double) mapiconbanner.getPos().getX(), (double) mapiconbanner.getPos().getZ(), 180.0D, mapiconbanner.getName());
+            worldmap.addDecoration(mapiconbanner.getDecoration(), null, mapiconbanner.getId(), mapiconbanner.getPos().getX(), mapiconbanner.getPos().getZ(), 180.0D, mapiconbanner.getName());
         }
 
         ListTag nbttaglist1 = nbt.getList("frames", 10);
@@ -177,7 +177,7 @@ public class MapItemSavedData extends SavedData {
             MapFrame worldmapframe = MapFrame.load(nbttaglist1.getCompound(l));
 
             worldmap.frameMarkers.put(worldmapframe.getId(), worldmapframe);
-            worldmap.addDecoration(MapDecoration.Type.FRAME, (LevelAccessor) null, "frame-" + worldmapframe.getEntityId(), (double) worldmapframe.getPos().getX(), (double) worldmapframe.getPos().getZ(), (double) worldmapframe.getRotation(), (Component) null);
+            worldmap.addDecoration(MapDecoration.Type.FRAME, null, "frame-" + worldmapframe.getEntityId(), worldmapframe.getPos().getX(), worldmapframe.getPos().getZ(), worldmapframe.getRotation(), null);
         }
 
         return worldmap;
@@ -253,7 +253,7 @@ public class MapItemSavedData extends SavedData {
     }
 
     public MapItemSavedData scaled(int zoomOutScale) {
-        return MapItemSavedData.createFresh((double) this.centerX, (double) this.centerZ, (byte) Mth.clamp(this.scale + zoomOutScale, (int) 0, (int) 4), this.trackingPosition, this.unlimitedTracking, this.dimension);
+        return MapItemSavedData.createFresh(this.centerX, this.centerZ, (byte) Mth.clamp(this.scale + zoomOutScale, 0, 4), this.trackingPosition, this.unlimitedTracking, this.dimension);
     }
 
     public void tickCarriedBy(Player player, ItemStack stack) {
@@ -269,12 +269,12 @@ public class MapItemSavedData extends SavedData {
         }
 
         for (int i = 0; i < this.carriedBy.size(); ++i) {
-            MapItemSavedData.HoldingPlayer worldmap_worldmaphumantracker1 = (MapItemSavedData.HoldingPlayer) this.carriedBy.get(i);
+            MapItemSavedData.HoldingPlayer worldmap_worldmaphumantracker1 = this.carriedBy.get(i);
             String s = worldmap_worldmaphumantracker1.player.getName().getString();
 
             if (!worldmap_worldmaphumantracker1.player.isRemoved() && (worldmap_worldmaphumantracker1.player.getInventory().contains(stack) || stack.isFramed())) {
                 if (!stack.isFramed() && worldmap_worldmaphumantracker1.player.level.dimension() == this.dimension && this.trackingPosition) {
-                    this.addDecoration(MapDecoration.Type.PLAYER, worldmap_worldmaphumantracker1.player.level, s, worldmap_worldmaphumantracker1.player.getX(), worldmap_worldmaphumantracker1.player.getZ(), (double) worldmap_worldmaphumantracker1.player.getYRot(), (Component) null);
+                    this.addDecoration(MapDecoration.Type.PLAYER, worldmap_worldmaphumantracker1.player.level, s, worldmap_worldmaphumantracker1.player.getX(), worldmap_worldmaphumantracker1.player.getZ(), worldmap_worldmaphumantracker1.player.getYRot(), null);
                 }
             } else {
                 this.carriedByPlayers.remove(worldmap_worldmaphumantracker1.player);
@@ -286,7 +286,7 @@ public class MapItemSavedData extends SavedData {
         if (stack.isFramed() && this.trackingPosition) {
             ItemFrame entityitemframe = stack.getFrame();
             BlockPos blockposition = entityitemframe.getPos();
-            MapFrame worldmapframe = (MapFrame) this.frameMarkers.get(MapFrame.frameId(blockposition));
+            MapFrame worldmapframe = this.frameMarkers.get(MapFrame.frameId(blockposition));
 
             if (worldmapframe != null && entityitemframe.getId() != worldmapframe.getEntityId() && this.frameMarkers.containsKey(worldmapframe.getId())) {
                 this.removeDecoration("frame-" + worldmapframe.getEntityId());
@@ -296,7 +296,7 @@ public class MapItemSavedData extends SavedData {
 
             // Paper start
             if (this.decorations.size() < player.level.paperConfig().maps.itemFrameCursorLimit) {
-            this.addDecoration(MapDecoration.Type.FRAME, player.level, "frame-" + entityitemframe.getId(), (double) blockposition.getX(), (double) blockposition.getZ(), (double) (entityitemframe.getDirection().get2DDataValue() * 90), (Component) null);
+            this.addDecoration(MapDecoration.Type.FRAME, player.level, "frame-" + entityitemframe.getId(), blockposition.getX(), blockposition.getZ(), entityitemframe.getDirection().get2DDataValue() * 90, null);
             this.frameMarkers.put(worldmapframe1.getId(), worldmapframe1);
             }
             // Paper end
@@ -311,7 +311,7 @@ public class MapItemSavedData extends SavedData {
                 CompoundTag nbttagcompound1 = nbttaglist.getCompound(j);
 
                 if (!this.decorations.containsKey(nbttagcompound1.getString("id"))) {
-                    this.addDecoration(MapDecoration.Type.byIcon(nbttagcompound1.getByte("type")), player.level, nbttagcompound1.getString("id"), nbttagcompound1.getDouble("x"), nbttagcompound1.getDouble("z"), nbttagcompound1.getDouble("rot"), (Component) null);
+                    this.addDecoration(MapDecoration.Type.byIcon(nbttagcompound1.getByte("type")), player.level, nbttagcompound1.getString("id"), nbttagcompound1.getDouble("x"), nbttagcompound1.getDouble("z"), nbttagcompound1.getDouble("rot"), null);
                 }
             }
         }
@@ -319,7 +319,7 @@ public class MapItemSavedData extends SavedData {
     }
 
     private void removeDecoration(String id) {
-        MapDecoration mapicon = (MapDecoration) this.decorations.remove(id);
+        MapDecoration mapicon = this.decorations.remove(id);
 
         if (mapicon != null && mapicon.getType().shouldTrackCount()) {
             --this.trackedDecorationCount;
@@ -342,8 +342,8 @@ public class MapItemSavedData extends SavedData {
 
         nbttagcompound.putByte("type", type.getIcon());
         nbttagcompound.putString("id", id);
-        nbttagcompound.putDouble("x", (double) pos.getX());
-        nbttagcompound.putDouble("z", (double) pos.getZ());
+        nbttagcompound.putDouble("x", pos.getX());
+        nbttagcompound.putDouble("z", pos.getZ());
         nbttagcompound.putDouble("rot", 180.0D);
         nbttaglist.add(nbttagcompound);
         if (type.hasMapColor()) {
@@ -409,7 +409,7 @@ public class MapItemSavedData extends SavedData {
         }
 
         MapDecoration mapicon = new MapDecoration(type, b0, b1, b2, text);
-        MapDecoration mapicon1 = (MapDecoration) this.decorations.put(key, mapicon);
+        MapDecoration mapicon1 = this.decorations.put(key, mapicon);
 
         if (!mapicon.equals(mapicon1)) {
             if (mapicon1 != null && mapicon1.getType().shouldTrackCount()) {
@@ -427,7 +427,7 @@ public class MapItemSavedData extends SavedData {
 
     @Nullable
     public Packet<?> getUpdatePacket(int id, Player player) {
-        MapItemSavedData.HoldingPlayer worldmap_worldmaphumantracker = (MapItemSavedData.HoldingPlayer) this.carriedByPlayers.get(player);
+        MapItemSavedData.HoldingPlayer worldmap_worldmaphumantracker = this.carriedByPlayers.get(player);
 
         return worldmap_worldmaphumantracker == null ? null : worldmap_worldmaphumantracker.nextUpdatePacket(id);
     }
@@ -450,7 +450,7 @@ public class MapItemSavedData extends SavedData {
     }
 
     public MapItemSavedData.HoldingPlayer getHoldingPlayer(Player player) {
-        MapItemSavedData.HoldingPlayer worldmap_worldmaphumantracker = (MapItemSavedData.HoldingPlayer) this.carriedByPlayers.get(player);
+        MapItemSavedData.HoldingPlayer worldmap_worldmaphumantracker = this.carriedByPlayers.get(player);
 
         if (worldmap_worldmaphumantracker == null) {
             worldmap_worldmaphumantracker = new MapItemSavedData.HoldingPlayer(player);
@@ -555,7 +555,7 @@ public class MapItemSavedData extends SavedData {
         this.trackedDecorationCount = 0;
 
         for (int i = 0; i < icons.size(); ++i) {
-            MapDecoration mapicon = (MapDecoration) icons.get(i);
+            MapDecoration mapicon = icons.get(i);
 
             this.decorations.put("icon-" + i, mapicon);
             if (mapicon.getType().shouldTrackCount()) {
diff --git a/src/main/java/net/minecraft/world/level/storage/DimensionDataStorage.java b/src/main/java/net/minecraft/world/level/storage/DimensionDataStorage.java
index 2da78bc43af715fe399eac1d83b3bf6e8fb8afac..6fd466bc2c5fe490502d09747cb84fd8ae0a39b2 100644
--- a/src/main/java/net/minecraft/world/level/storage/DimensionDataStorage.java
+++ b/src/main/java/net/minecraft/world/level/storage/DimensionDataStorage.java
@@ -69,7 +69,7 @@ public class DimensionDataStorage {
             LOGGER.error("Error loading saved data: {}", id, var5);
         }
 
-        return (T)null;
+        return null;
     }
 
     public void set(String id, SavedData state) {
diff --git a/src/main/java/net/minecraft/world/level/storage/LevelStorageSource.java b/src/main/java/net/minecraft/world/level/storage/LevelStorageSource.java
index 4e9f1630675a5a5170faecada415472f0a68a668..bd40acfae73a2ca0fd7933711cabfc93dc719e2f 100644
--- a/src/main/java/net/minecraft/world/level/storage/LevelStorageSource.java
+++ b/src/main/java/net/minecraft/world/level/storage/LevelStorageSource.java
@@ -105,7 +105,7 @@ public class LevelStorageSource {
             Optional<? extends Dynamic<?>> optional = levelData.get(s).result();
 
             if (optional.isPresent()) {
-                dynamic1 = dynamic1.set(s, (Dynamic) optional.get());
+                dynamic1 = dynamic1.set(s, optional.get());
             }
         }
 
@@ -162,7 +162,7 @@ public class LevelStorageSource {
                 }
 
                 try {
-                    LevelSummary worldinfo = (LevelSummary) this.readLevelData(convertable_b, this.levelSummaryReader(convertable_b, flag));
+                    LevelSummary worldinfo = this.readLevelData(convertable_b, this.levelSummaryReader(convertable_b, flag));
 
                     return worldinfo != null ? worldinfo : null;
                 } catch (OutOfMemoryError outofmemoryerror) {
@@ -424,7 +424,7 @@ public class LevelStorageSource {
             LevelStorageSource.LevelDirectory convertable_b = this.levelDirectory;
 
             Objects.requireNonNull(this.levelDirectory);
-            return (Path) map.computeIfAbsent(savePath, convertable_b::resourcePath);
+            return map.computeIfAbsent(savePath, convertable_b::resourcePath);
         }
 
         public Path getDimensionPath(ResourceKey<Level> key) {
@@ -445,7 +445,7 @@ public class LevelStorageSource {
         @Nullable
         public LevelSummary getSummary() {
             this.checkLock();
-            return (LevelSummary) LevelStorageSource.this.readLevelData(this.levelDirectory, LevelStorageSource.this.levelSummaryReader(this.levelDirectory, false));
+            return LevelStorageSource.this.readLevelData(this.levelDirectory, LevelStorageSource.this.levelSummaryReader(this.levelDirectory, false));
         }
 
         @Nullable
@@ -461,7 +461,7 @@ public class LevelStorageSource {
         }
 
         public void saveDataTag(RegistryAccess registryManager, WorldData saveProperties) {
-            this.saveDataTag(registryManager, saveProperties, (CompoundTag) null);
+            this.saveDataTag(registryManager, saveProperties, null);
         }
 
         public void saveDataTag(RegistryAccess registryManager, WorldData saveProperties, @Nullable CompoundTag nbt) {
diff --git a/src/main/java/net/minecraft/world/level/storage/PlayerDataStorage.java b/src/main/java/net/minecraft/world/level/storage/PlayerDataStorage.java
index 68a137f75f87f2edb978f0bf42415001169649a1..b64b44a2cb8a5ea50a5c9b1421c74bec8cb9e5bf 100644
--- a/src/main/java/net/minecraft/world/level/storage/PlayerDataStorage.java
+++ b/src/main/java/net/minecraft/world/level/storage/PlayerDataStorage.java
@@ -103,7 +103,7 @@ public class PlayerDataStorage {
             File file1 = new File(this.playerDir, s + ".dat");
 
             if (file1.exists()) {
-                return NbtIo.readCompressed((InputStream) (new FileInputStream(file1)));
+                return NbtIo.readCompressed(new FileInputStream(file1));
             }
         } catch (Exception exception) {
             PlayerDataStorage.LOGGER.warn("Failed to load player data for " + s);
diff --git a/src/main/java/net/minecraft/world/level/storage/PrimaryLevelData.java b/src/main/java/net/minecraft/world/level/storage/PrimaryLevelData.java
index b6218626bad7f8ddfba91b216ac1e10647f04df5..2be67b5b429232075ecbd7956beceb54e4936e6c 100644
--- a/src/main/java/net/minecraft/world/level/storage/PrimaryLevelData.java
+++ b/src/main/java/net/minecraft/world/level/storage/PrimaryLevelData.java
@@ -143,19 +143,19 @@ public class PrimaryLevelData implements ServerLevelData, WorldData {
     }
 
     public PrimaryLevelData(LevelSettings levelInfo, WorldOptions generatorOptions, PrimaryLevelData.SpecialWorldProperty worlddataserver_a, Lifecycle lifecycle) {
-        this((DataFixer) null, SharedConstants.getCurrentVersion().getWorldVersion(), (CompoundTag) null, false, 0, 0, 0, 0.0F, 0L, 0L, 19133, 0, 0, false, 0, false, false, false, WorldBorder.DEFAULT_SETTINGS, 0, 0, (UUID) null, Sets.newLinkedHashSet(), new TimerQueue<>(TimerCallbacks.SERVER_CALLBACKS), (CompoundTag) null, new CompoundTag(), levelInfo.copy(), generatorOptions, worlddataserver_a, lifecycle);
+        this(null, SharedConstants.getCurrentVersion().getWorldVersion(), null, false, 0, 0, 0, 0.0F, 0L, 0L, 19133, 0, 0, false, 0, false, false, false, WorldBorder.DEFAULT_SETTINGS, 0, 0, null, Sets.newLinkedHashSet(), new TimerQueue<>(TimerCallbacks.SERVER_CALLBACKS), null, new CompoundTag(), levelInfo.copy(), generatorOptions, worlddataserver_a, lifecycle);
     }
 
     public static PrimaryLevelData parse(Dynamic<Tag> dynamic, DataFixer dataFixer, int dataVersion, @Nullable CompoundTag playerData, LevelSettings levelInfo, LevelVersion saveVersionInfo, PrimaryLevelData.SpecialWorldProperty specialProperty, WorldOptions generatorOptions, Lifecycle lifecycle) {
         long j = dynamic.get("Time").asLong(0L);
         CompoundTag nbttagcompound1 = (CompoundTag) dynamic.get("DragonFight").result().map(Dynamic::getValue).orElseGet(() -> {
-            return (Tag) dynamic.get("DimensionData").get("1").get("DragonFight").orElseEmptyMap().getValue();
+            return dynamic.get("DimensionData").get("1").get("DragonFight").orElseEmptyMap().getValue();
         });
 
         // CraftBukkit - decompile error
-        return new PrimaryLevelData(dataFixer, dataVersion, playerData, dynamic.get("WasModded").asBoolean(false), dynamic.get("SpawnX").asInt(0), dynamic.get("SpawnY").asInt(0), dynamic.get("SpawnZ").asInt(0), dynamic.get("SpawnAngle").asFloat(0.0F), j, dynamic.get("DayTime").asLong(j), saveVersionInfo.levelDataVersion(), dynamic.get("clearWeatherTime").asInt(0), dynamic.get("rainTime").asInt(0), dynamic.get("raining").asBoolean(false), dynamic.get("thunderTime").asInt(0), dynamic.get("thundering").asBoolean(false), dynamic.get("initialized").asBoolean(true), dynamic.get("DifficultyLocked").asBoolean(false), WorldBorder.Settings.read(dynamic, WorldBorder.DEFAULT_SETTINGS), dynamic.get("WanderingTraderSpawnDelay").asInt(0), dynamic.get("WanderingTraderSpawnChance").asInt(0), (UUID) dynamic.get("WanderingTraderId").read(UUIDUtil.CODEC).result().orElse(null), (Set) dynamic.get("ServerBrands").asStream().flatMap((dynamic1) -> {
-            return dynamic1.asString().result().stream();
-        }).collect(Collectors.toCollection(Sets::newLinkedHashSet)), new TimerQueue<>(TimerCallbacks.SERVER_CALLBACKS, dynamic.get("ScheduledEvents").asStream()), (CompoundTag) dynamic.get("CustomBossEvents").orElseEmptyMap().getValue(), nbttagcompound1, levelInfo, generatorOptions, specialProperty, lifecycle);
+        return new PrimaryLevelData(dataFixer, dataVersion, playerData, dynamic.get("WasModded").asBoolean(false), dynamic.get("SpawnX").asInt(0), dynamic.get("SpawnY").asInt(0), dynamic.get("SpawnZ").asInt(0), dynamic.get("SpawnAngle").asFloat(0.0F), j, dynamic.get("DayTime").asLong(j), saveVersionInfo.levelDataVersion(), dynamic.get("clearWeatherTime").asInt(0), dynamic.get("rainTime").asInt(0), dynamic.get("raining").asBoolean(false), dynamic.get("thunderTime").asInt(0), dynamic.get("thundering").asBoolean(false), dynamic.get("initialized").asBoolean(true), dynamic.get("DifficultyLocked").asBoolean(false), WorldBorder.Settings.read(dynamic, WorldBorder.DEFAULT_SETTINGS), dynamic.get("WanderingTraderSpawnDelay").asInt(0), dynamic.get("WanderingTraderSpawnChance").asInt(0), dynamic.get("WanderingTraderId").read(UUIDUtil.CODEC).result().orElse(null), dynamic.get("ServerBrands").asStream().flatMap((dynamic1) -> {
+                    return dynamic1.asString().result().stream();
+                }).collect(Collectors.toCollection(Sets::newLinkedHashSet)), new TimerQueue<>(TimerCallbacks.SERVER_CALLBACKS, dynamic.get("ScheduledEvents").asStream()), (CompoundTag) dynamic.get("CustomBossEvents").orElseEmptyMap().getValue(), nbttagcompound1, levelInfo, generatorOptions, specialProperty, lifecycle);
     }
 
     @Override
@@ -278,7 +278,7 @@ public class PrimaryLevelData implements ServerLevelData, WorldData {
         if (!this.upgradedPlayerTag && this.loadedPlayerTag != null) {
             if (this.playerDataVersion < SharedConstants.getCurrentVersion().getWorldVersion()) {
                 if (this.fixerUpper == null) {
-                    throw (NullPointerException) Util.pauseInIde(new NullPointerException("Fixer Upper not set inside LevelData, and the player tag is not upgraded."));
+                    throw Util.pauseInIde(new NullPointerException("Fixer Upper not set inside LevelData, and the player tag is not upgraded."));
                 }
 
                 this.loadedPlayerTag = NbtUtils.update(this.fixerUpper, DataFixTypes.PLAYER, this.loadedPlayerTag, this.playerDataVersion);
@@ -486,7 +486,7 @@ public class PrimaryLevelData implements ServerLevelData, WorldData {
         this.settings = this.settings.withDifficulty(difficulty);
         // CraftBukkit start
         ClientboundChangeDifficultyPacket packet = new ClientboundChangeDifficultyPacket(this.getDifficulty(), this.isDifficultyLocked());
-        for (ServerPlayer player : (java.util.List<ServerPlayer>) (java.util.List) this.world.players()) {
+        for (ServerPlayer player : (java.util.List<ServerPlayer>) this.world.players()) {
             player.connection.send(packet);
         }
         // CraftBukkit end
diff --git a/src/main/java/net/minecraft/world/level/storage/loot/LootTable.java b/src/main/java/net/minecraft/world/level/storage/loot/LootTable.java
index 08387b748df84ce288e369b6b3ac0cb968ea13fd..7d60cf29682846a8dbb9bdc0c08adab94d22e7e0 100644
--- a/src/main/java/net/minecraft/world/level/storage/loot/LootTable.java
+++ b/src/main/java/net/minecraft/world/level/storage/loot/LootTable.java
@@ -163,9 +163,9 @@ public class LootTable {
             }
 
             if (itemstack.isEmpty()) {
-                iinventory.setItem(((Integer) list.remove(list.size() - 1)).intValue(), ItemStack.EMPTY);
+                iinventory.setItem(list.remove(list.size() - 1).intValue(), ItemStack.EMPTY);
             } else {
-                iinventory.setItem(((Integer) list.remove(list.size() - 1)).intValue(), itemstack);
+                iinventory.setItem(list.remove(list.size() - 1).intValue(), itemstack);
             }
         }
 
@@ -187,7 +187,7 @@ public class LootTable {
         }
 
         while (freeSlots - drops.size() - list.size() > 0 && !list.isEmpty()) {
-            ItemStack itemstack1 = (ItemStack) list.remove(Mth.nextInt(random, 0, list.size() - 1));
+            ItemStack itemstack1 = list.remove(Mth.nextInt(random, 0, list.size() - 1));
             int j = Mth.nextInt(random, 1, itemstack1.getCount() / 2);
             ItemStack itemstack2 = itemstack1.split(j);
 
@@ -257,7 +257,7 @@ public class LootTable {
         }
 
         public LootTable build() {
-            return new LootTable(this.paramSet, (LootPool[]) this.pools.toArray(new LootPool[0]), (LootItemFunction[]) this.functions.toArray(new LootItemFunction[0]));
+            return new LootTable(this.paramSet, this.pools.toArray(new LootPool[0]), this.functions.toArray(new LootItemFunction[0]));
         }
     }
 
@@ -267,7 +267,7 @@ public class LootTable {
 
         public LootTable deserialize(JsonElement jsonelement, Type type, JsonDeserializationContext jsondeserializationcontext) throws JsonParseException {
             JsonObject jsonobject = GsonHelper.convertToJsonObject(jsonelement, "loot table");
-            LootPool[] alootselector = (LootPool[]) GsonHelper.getAsObject(jsonobject, "pools", new LootPool[0], jsondeserializationcontext, LootPool[].class);
+            LootPool[] alootselector = GsonHelper.getAsObject(jsonobject, "pools", new LootPool[0], jsondeserializationcontext, LootPool[].class);
             LootContextParamSet lootcontextparameterset = null;
 
             if (jsonobject.has("type")) {
@@ -276,7 +276,7 @@ public class LootTable {
                 lootcontextparameterset = LootContextParamSets.get(new ResourceLocation(s));
             }
 
-            LootItemFunction[] alootitemfunction = (LootItemFunction[]) GsonHelper.getAsObject(jsonobject, "functions", new LootItemFunction[0], jsondeserializationcontext, LootItemFunction[].class);
+            LootItemFunction[] alootitemfunction = GsonHelper.getAsObject(jsonobject, "functions", new LootItemFunction[0], jsondeserializationcontext, LootItemFunction[].class);
 
             return new LootTable(lootcontextparameterset != null ? lootcontextparameterset : LootContextParamSets.ALL_PARAMS, alootselector, alootitemfunction);
         }
diff --git a/src/main/java/net/minecraft/world/level/storage/loot/LootTables.java b/src/main/java/net/minecraft/world/level/storage/loot/LootTables.java
index aef7198ca8b781d02204098811086b25050ab262..c960df5b32205342f828f075c5c2364940077a3d 100644
--- a/src/main/java/net/minecraft/world/level/storage/loot/LootTables.java
+++ b/src/main/java/net/minecraft/world/level/storage/loot/LootTables.java
@@ -31,12 +31,12 @@ public class LootTables extends SimpleJsonResourceReloadListener {
     }
 
     public LootTable get(ResourceLocation id) {
-        return (LootTable) this.tables.getOrDefault(id, LootTable.EMPTY);
+        return this.tables.getOrDefault(id, LootTable.EMPTY);
     }
 
     protected void apply(Map<ResourceLocation, JsonElement> prepared, ResourceManager manager, ProfilerFiller profiler) {
         Builder<ResourceLocation, LootTable> builder = ImmutableMap.builder();
-        JsonElement jsonelement = (JsonElement) prepared.remove(BuiltInLootTables.EMPTY);
+        JsonElement jsonelement = prepared.remove(BuiltInLootTables.EMPTY);
 
         if (jsonelement != null) {
             LootTables.LOGGER.warn("Datapack tried to redefine {} loot table, ignoring", BuiltInLootTables.EMPTY);
@@ -44,7 +44,7 @@ public class LootTables extends SimpleJsonResourceReloadListener {
 
         prepared.forEach((minecraftkey, jsonelement1) -> {
             try {
-                LootTable loottable = (LootTable) LootTables.GSON.fromJson(jsonelement1, LootTable.class);
+                LootTable loottable = LootTables.GSON.fromJson(jsonelement1, LootTable.class);
 
                 builder.put(minecraftkey, loottable);
             } catch (Exception exception) {
diff --git a/src/main/java/net/minecraft/world/level/storage/loot/entries/LootPoolSingletonContainer.java b/src/main/java/net/minecraft/world/level/storage/loot/entries/LootPoolSingletonContainer.java
index 0357a5c32f2b3ac9b3e46a7e3934c5bf0a81b2c1..b47082a87e7d4b00079c62ff9dae13b2e705f41c 100644
--- a/src/main/java/net/minecraft/world/level/storage/loot/entries/LootPoolSingletonContainer.java
+++ b/src/main/java/net/minecraft/world/level/storage/loot/entries/LootPoolSingletonContainer.java
@@ -158,7 +158,7 @@ public abstract class LootPoolSingletonContainer extends LootPoolEntryContainer
                 json.addProperty("quality", Integer.valueOf(entry.quality));
             }
 
-            if (!ArrayUtils.isEmpty((Object[])entry.functions)) {
+            if (!ArrayUtils.isEmpty(entry.functions)) {
                 json.add("functions", context.serialize(entry.functions));
             }
 
diff --git a/src/main/java/net/minecraft/world/level/storage/loot/functions/LootingEnchantFunction.java b/src/main/java/net/minecraft/world/level/storage/loot/functions/LootingEnchantFunction.java
index 1d83136d9e60859d5f9d5bca8ea6ac6957089776..bbe3d4770ad2c768b9ad417a971287ba4a82f65e 100644
--- a/src/main/java/net/minecraft/world/level/storage/loot/functions/LootingEnchantFunction.java
+++ b/src/main/java/net/minecraft/world/level/storage/loot/functions/LootingEnchantFunction.java
@@ -45,7 +45,7 @@ public class LootingEnchantFunction extends LootItemConditionalFunction {
 
     @Override
     public ItemStack run(ItemStack stack, LootContext context) {
-        Entity entity = (Entity) context.getParamOrNull(LootContextParams.KILLER_ENTITY);
+        Entity entity = context.getParamOrNull(LootContextParams.KILLER_ENTITY);
 
         if (entity instanceof LivingEntity) {
             int i = EnchantmentHelper.getMobLooting((LivingEntity) entity);
@@ -116,7 +116,7 @@ public class LootingEnchantFunction extends LootItemConditionalFunction {
         public LootingEnchantFunction deserialize(JsonObject json, JsonDeserializationContext context, LootItemCondition[] conditions) {
             int i = GsonHelper.getAsInt(json, "limit", 0);
 
-            return new LootingEnchantFunction(conditions, (NumberProvider) GsonHelper.getAsObject(json, "count", context, NumberProvider.class), i);
+            return new LootingEnchantFunction(conditions, GsonHelper.getAsObject(json, "count", context, NumberProvider.class), i);
         }
     }
 }
diff --git a/src/main/java/net/minecraft/world/level/storage/loot/predicates/ExplosionCondition.java b/src/main/java/net/minecraft/world/level/storage/loot/predicates/ExplosionCondition.java
index e210329e9eb78c2460226c66211c038b7e617cb3..6c4c2a231dc8789b485aa9d2951cf92036c63041 100644
--- a/src/main/java/net/minecraft/world/level/storage/loot/predicates/ExplosionCondition.java
+++ b/src/main/java/net/minecraft/world/level/storage/loot/predicates/ExplosionCondition.java
@@ -27,7 +27,7 @@ public class ExplosionCondition implements LootItemCondition {
     }
 
     public boolean test(LootContext loottableinfo) {
-        Float ofloat = (Float) loottableinfo.getParamOrNull(LootContextParams.EXPLOSION_RADIUS);
+        Float ofloat = loottableinfo.getParamOrNull(LootContextParams.EXPLOSION_RADIUS);
 
         if (ofloat != null) {
             RandomSource randomsource = loottableinfo.getRandom();
diff --git a/src/main/java/net/minecraft/world/level/storage/loot/predicates/LootItemRandomChanceWithLootingCondition.java b/src/main/java/net/minecraft/world/level/storage/loot/predicates/LootItemRandomChanceWithLootingCondition.java
index b08444058c412c90b47f7deccda4f29a211cacd9..3eeb6ee9bf667907d2b2e275ea5d321b4d6d73d7 100644
--- a/src/main/java/net/minecraft/world/level/storage/loot/predicates/LootItemRandomChanceWithLootingCondition.java
+++ b/src/main/java/net/minecraft/world/level/storage/loot/predicates/LootItemRandomChanceWithLootingCondition.java
@@ -34,7 +34,7 @@ public class LootItemRandomChanceWithLootingCondition implements LootItemConditi
     }
 
     public boolean test(LootContext loottableinfo) {
-        Entity entity = (Entity) loottableinfo.getParamOrNull(LootContextParams.KILLER_ENTITY);
+        Entity entity = loottableinfo.getParamOrNull(LootContextParams.KILLER_ENTITY);
         int i = 0;
 
         if (entity instanceof LivingEntity) {
diff --git a/src/main/java/net/minecraft/world/phys/AABB.java b/src/main/java/net/minecraft/world/phys/AABB.java
index 68cc6f2a78a06293a29317fda72ab3ee79b3533a..fd22faddb6ed7c50cd83c1a043c16e50e2b2c500 100644
--- a/src/main/java/net/minecraft/world/phys/AABB.java
+++ b/src/main/java/net/minecraft/world/phys/AABB.java
@@ -37,11 +37,11 @@ public class AABB {
     // Paper end
 
     public AABB(BlockPos pos) {
-        this((double)pos.getX(), (double)pos.getY(), (double)pos.getZ(), (double)(pos.getX() + 1), (double)(pos.getY() + 1), (double)(pos.getZ() + 1));
+        this(pos.getX(), pos.getY(), pos.getZ(), pos.getX() + 1, pos.getY() + 1, pos.getZ() + 1);
     }
 
     public AABB(BlockPos pos1, BlockPos pos2) {
-        this((double)pos1.getX(), (double)pos1.getY(), (double)pos1.getZ(), (double)pos2.getX(), (double)pos2.getY(), (double)pos2.getZ());
+        this(pos1.getX(), pos1.getY(), pos1.getZ(), pos2.getX(), pos2.getY(), pos2.getZ());
     }
 
     public AABB(Vec3 pos1, Vec3 pos2) {
@@ -49,7 +49,7 @@ public class AABB {
     }
 
     public static AABB of(BoundingBox mutable) {
-        return new AABB((double)mutable.minX(), (double)mutable.minY(), (double)mutable.minZ(), (double)(mutable.maxX() + 1), (double)(mutable.maxY() + 1), (double)(mutable.maxZ() + 1));
+        return new AABB(mutable.minX(), mutable.minY(), mutable.minZ(), mutable.maxX() + 1, mutable.maxY() + 1, mutable.maxZ() + 1);
     }
 
     public static AABB unitCubeFromLowerCorner(Vec3 pos) {
@@ -286,7 +286,7 @@ public class AABB {
         double d = max.x - min.x;
         double e = max.y - min.y;
         double f = max.z - min.z;
-        Direction direction = getDirection(this, min, ds, (Direction)null, d, e, f);
+        Direction direction = getDirection(this, min, ds, null, d, e, f);
         if (direction == null) {
             return Optional.empty();
         } else {
diff --git a/src/main/java/net/minecraft/world/phys/shapes/ArrayVoxelShape.java b/src/main/java/net/minecraft/world/phys/shapes/ArrayVoxelShape.java
index ca5f01be5d5ccfcc56780ff93cca3824409ffc0d..69cab8f1ecdca1b7222e309002121dc1e9464d81 100644
--- a/src/main/java/net/minecraft/world/phys/shapes/ArrayVoxelShape.java
+++ b/src/main/java/net/minecraft/world/phys/shapes/ArrayVoxelShape.java
@@ -15,7 +15,7 @@ public class ArrayVoxelShape extends VoxelShape {
     private final DoubleList zs;
 
     protected ArrayVoxelShape(DiscreteVoxelShape shape, double[] xPoints, double[] yPoints, double[] zPoints) {
-        this(shape, (DoubleList)DoubleArrayList.wrap(Arrays.copyOf(xPoints, shape.getXSize() + 1)), (DoubleList)DoubleArrayList.wrap(Arrays.copyOf(yPoints, shape.getYSize() + 1)), (DoubleList)DoubleArrayList.wrap(Arrays.copyOf(zPoints, shape.getZSize() + 1)));
+        this(shape, DoubleArrayList.wrap(Arrays.copyOf(xPoints, shape.getXSize() + 1)), DoubleArrayList.wrap(Arrays.copyOf(yPoints, shape.getYSize() + 1)), DoubleArrayList.wrap(Arrays.copyOf(zPoints, shape.getZSize() + 1)));
     }
 
     ArrayVoxelShape(DiscreteVoxelShape shape, DoubleList xPoints, DoubleList yPoints, DoubleList zPoints) {
@@ -33,7 +33,7 @@ public class ArrayVoxelShape extends VoxelShape {
             this.ys = yPoints;
             this.zs = zPoints;
         } else {
-            throw (IllegalArgumentException)Util.pauseInIde(new IllegalArgumentException("Lengths of point arrays must be consistent with the size of the VoxelShape."));
+            throw Util.pauseInIde(new IllegalArgumentException("Lengths of point arrays must be consistent with the size of the VoxelShape."));
         }
         // Paper start - optimise multi-aabb shapes
         this.boundingBoxesRepresentation = boundingBoxesRepresentation == null ? this.toAabbs().toArray(EMPTY) : boundingBoxesRepresentation;
diff --git a/src/main/java/net/minecraft/world/phys/shapes/IndirectMerger.java b/src/main/java/net/minecraft/world/phys/shapes/IndirectMerger.java
index 2214a3198c712deaac0f3d3478c85352185761d4..9400ec8c54c14cc1aaab156cf73648ee286542fc 100644
--- a/src/main/java/net/minecraft/world/phys/shapes/IndirectMerger.java
+++ b/src/main/java/net/minecraft/world/phys/shapes/IndirectMerger.java
@@ -103,6 +103,6 @@ public class IndirectMerger implements IndexMerger {
 
     @Override
     public DoubleList getList() {
-        return (DoubleList)(this.resultLength <= 1 ? EMPTY : DoubleArrayList.wrap(this.result, this.resultLength));
+        return this.resultLength <= 1 ? EMPTY : DoubleArrayList.wrap(this.result, this.resultLength);
     }
 }
diff --git a/src/main/java/net/minecraft/world/phys/shapes/Shapes.java b/src/main/java/net/minecraft/world/phys/shapes/Shapes.java
index 731c7dd15f131dc124be6af8f342b122cb89491b..6ad3db69fec868907040913810db63932ee32c2a 100644
--- a/src/main/java/net/minecraft/world/phys/shapes/Shapes.java
+++ b/src/main/java/net/minecraft/world/phys/shapes/Shapes.java
@@ -21,7 +21,7 @@ public final class Shapes {
         return new CubeVoxelShape(discreteVoxelShape);
     }); public static VoxelShape getFullUnoptimisedCube() { return BLOCK; } // Paper - OBFHELPER
     public static final VoxelShape INFINITY = box(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
-    private static final VoxelShape EMPTY = new ArrayVoxelShape(new BitSetDiscreteVoxelShape(0, 0, 0), (DoubleList)(new DoubleArrayList(new double[]{0.0D})), (DoubleList)(new DoubleArrayList(new double[]{0.0D})), (DoubleList)(new DoubleArrayList(new double[]{0.0D})));
+    private static final VoxelShape EMPTY = new ArrayVoxelShape(new BitSetDiscreteVoxelShape(0, 0, 0), new DoubleArrayList(new double[]{0.0D}), new DoubleArrayList(new double[]{0.0D}), new DoubleArrayList(new double[]{0.0D}));
     public static final io.papermc.paper.voxel.AABBVoxelShape BLOCK_OPTIMISED = new io.papermc.paper.voxel.AABBVoxelShape(new AABB(0.0, 0.0, 0.0, 1.0, 1.0, 1.0)); // Paper
 
     public static VoxelShape empty() {
@@ -90,7 +90,7 @@ public final class Shapes {
 
     public static VoxelShape joinUnoptimized(VoxelShape one, VoxelShape two, BooleanOp function) {
         if (function.apply(false, false)) {
-            throw (IllegalArgumentException)Util.pauseInIde(new IllegalArgumentException());
+            throw Util.pauseInIde(new IllegalArgumentException());
         } else if (one == two) {
             return function.apply(true, true) ? one : empty();
         } else {
@@ -105,7 +105,7 @@ public final class Shapes {
                 IndexMerger indexMerger2 = createIndexMerger(indexMerger.size() - 1, one.getCoords(Direction.Axis.Y), two.getCoords(Direction.Axis.Y), bl, bl2);
                 IndexMerger indexMerger3 = createIndexMerger((indexMerger.size() - 1) * (indexMerger2.size() - 1), one.getCoords(Direction.Axis.Z), two.getCoords(Direction.Axis.Z), bl, bl2);
                 BitSetDiscreteVoxelShape bitSetDiscreteVoxelShape = BitSetDiscreteVoxelShape.join(one.shape, two.shape, indexMerger, indexMerger2, indexMerger3, function);
-                return (VoxelShape)(indexMerger instanceof DiscreteCubeMerger && indexMerger2 instanceof DiscreteCubeMerger && indexMerger3 instanceof DiscreteCubeMerger ? new CubeVoxelShape(bitSetDiscreteVoxelShape) : new ArrayVoxelShape(bitSetDiscreteVoxelShape, indexMerger.getList(), indexMerger2.getList(), indexMerger3.getList()));
+                return indexMerger instanceof DiscreteCubeMerger && indexMerger2 instanceof DiscreteCubeMerger && indexMerger3 instanceof DiscreteCubeMerger ? new CubeVoxelShape(bitSetDiscreteVoxelShape) : new ArrayVoxelShape(bitSetDiscreteVoxelShape, indexMerger.getList(), indexMerger2.getList(), indexMerger3.getList());
             }
         }
     }
@@ -116,9 +116,9 @@ public final class Shapes {
             if (shape1 instanceof io.papermc.paper.voxel.AABBVoxelShape && shape2 instanceof io.papermc.paper.voxel.AABBVoxelShape) {
                 return io.papermc.paper.util.CollisionUtil.voxelShapeIntersect(((io.papermc.paper.voxel.AABBVoxelShape)shape1).aabb, ((io.papermc.paper.voxel.AABBVoxelShape)shape2).aabb);
             } else if (shape1 instanceof io.papermc.paper.voxel.AABBVoxelShape && shape2 instanceof ArrayVoxelShape) {
-                return ((ArrayVoxelShape)shape2).intersects(((io.papermc.paper.voxel.AABBVoxelShape)shape1).aabb);
+                return shape2.intersects(((io.papermc.paper.voxel.AABBVoxelShape)shape1).aabb);
             } else if (shape2 instanceof io.papermc.paper.voxel.AABBVoxelShape && shape1 instanceof ArrayVoxelShape) {
-                return ((ArrayVoxelShape)shape1).intersects(((io.papermc.paper.voxel.AABBVoxelShape)shape2).aabb);
+                return shape1.intersects(((io.papermc.paper.voxel.AABBVoxelShape)shape2).aabb);
             }
         }
         return joinIsNotEmptyVanilla(shape1, shape2, predicate);
@@ -126,7 +126,7 @@ public final class Shapes {
     public static boolean joinIsNotEmptyVanilla(VoxelShape shape1, VoxelShape shape2, BooleanOp predicate) {
         // Paper end - optimise voxelshape
         if (predicate.apply(false, false)) {
-            throw (IllegalArgumentException)Util.pauseInIde(new IllegalArgumentException());
+            throw Util.pauseInIde(new IllegalArgumentException());
         } else {
             boolean bl = shape1.isEmpty();
             boolean bl2 = shape2.isEmpty();
@@ -247,7 +247,7 @@ public final class Shapes {
                 i = 0;
             }
 
-            return (VoxelShape)(!bl ? empty() : new SliceShape(shape, axis, i).optimize().optimize()); // Paper - first optimize converts to ArrayVoxelShape, second optimize could convert to AABBVoxelShape
+            return !bl ? empty() : new SliceShape(shape, axis, i).optimize().optimize(); // Paper - first optimize converts to ArrayVoxelShape, second optimize could convert to AABBVoxelShape
         }
     }
 
diff --git a/src/main/java/net/minecraft/world/phys/shapes/VoxelShape.java b/src/main/java/net/minecraft/world/phys/shapes/VoxelShape.java
index 2182afd1b95acf14c55bddfeec17dae0a63e1f00..a7ce7c6a36821adab361561cb3193b56e8b6a23f 100644
--- a/src/main/java/net/minecraft/world/phys/shapes/VoxelShape.java
+++ b/src/main/java/net/minecraft/world/phys/shapes/VoxelShape.java
@@ -42,7 +42,7 @@ public abstract class VoxelShape {
 
     public AABB bounds() {
         if (this.isEmpty()) {
-            throw (UnsupportedOperationException)Util.pauseInIde(new UnsupportedOperationException("No bounds for empty shape."));
+            throw Util.pauseInIde(new UnsupportedOperationException("No bounds for empty shape."));
         } else {
             return new AABB(this.min(Direction.Axis.X), this.min(Direction.Axis.Y), this.min(Direction.Axis.Z), this.max(Direction.Axis.X), this.max(Direction.Axis.Y), this.max(Direction.Axis.Z));
         }
@@ -59,7 +59,7 @@ public abstract class VoxelShape {
     }
 
     public VoxelShape move(double x, double y, double z) {
-        return (VoxelShape)(this.isEmpty() ? Shapes.empty() : new ArrayVoxelShape(this.shape, (DoubleList)(new OffsetDoubleList(this.getCoords(Direction.Axis.X), x)), (DoubleList)(new OffsetDoubleList(this.getCoords(Direction.Axis.Y), y)), (DoubleList)(new OffsetDoubleList(this.getCoords(Direction.Axis.Z), z))));
+        return this.isEmpty() ? Shapes.empty() : new ArrayVoxelShape(this.shape, new OffsetDoubleList(this.getCoords(Direction.Axis.X), x), new OffsetDoubleList(this.getCoords(Direction.Axis.Y), y), new OffsetDoubleList(this.getCoords(Direction.Axis.Z), z));
     }
 
     public VoxelShape optimize() {
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftChunk.java b/src/main/java/org/bukkit/craftbukkit/CraftChunk.java
index b7e4b8aa44f460e3dea16b18bf8c3da9c972bd41..3cc97ad814c809ae70e688d32aceba9384e9ffca 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftChunk.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftChunk.java
@@ -52,7 +52,7 @@ public class CraftChunk implements Chunk {
     public CraftChunk(net.minecraft.world.level.chunk.LevelChunk chunk) {
         this.weakChunk = new WeakReference<net.minecraft.world.level.chunk.LevelChunk>(chunk);
 
-        this.worldServer = (ServerLevel) this.getHandle().level;
+        this.worldServer = this.getHandle().level;
         this.x = this.getHandle().getPos().x;
         this.z = this.getHandle().getPos().z;
     }
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftIpBanList.java b/src/main/java/org/bukkit/craftbukkit/CraftIpBanList.java
index 2e40d5d5190bdc410918205688920968983bea22..8897f2b07e71a0a42fbe82b3b46f35fbe5d0b53a 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftIpBanList.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftIpBanList.java
@@ -25,7 +25,7 @@ public class CraftIpBanList implements org.bukkit.BanList {
     public org.bukkit.BanEntry getBanEntry(@NotNull String target) {
         Validate.notNull(target, "Target cannot be null");
 
-        IpBanListEntry entry = (IpBanListEntry) this.list.get(target);
+        IpBanListEntry entry = this.list.get(target);
         if (entry == null) {
             return null;
         }
@@ -56,7 +56,7 @@ public class CraftIpBanList implements org.bukkit.BanList {
     public @NotNull Set<org.bukkit.BanEntry> getBanEntries() {
         ImmutableSet.Builder<org.bukkit.BanEntry> builder = ImmutableSet.builder();
         for (String target : this.list.getUserList()) {
-            builder.add(new CraftIpBanEntry(target, (IpBanListEntry) this.list.get(target), this.list));
+            builder.add(new CraftIpBanEntry(target, this.list.get(target), this.list));
         }
 
         return builder.build();
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftProfileBanList.java b/src/main/java/org/bukkit/craftbukkit/CraftProfileBanList.java
index ed2f27061fe220122458e16733e9ed1dc175a6b9..31392659d0ae352fece7777d089fa3cdd32d40a1 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftProfileBanList.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftProfileBanList.java
@@ -34,7 +34,7 @@ public class CraftProfileBanList implements org.bukkit.BanList {
             return null;
         }
 
-        UserBanListEntry entry = (UserBanListEntry) this.list.get(profile);
+        UserBanListEntry entry = this.list.get(profile);
         if (entry == null) {
             return null;
         }
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftRegionAccessor.java b/src/main/java/org/bukkit/craftbukkit/CraftRegionAccessor.java
index 4a63332a743cbaff8359007dbfff7e9cdc6920d9..6579c1734945f672a6c73e064989c209d52c37dd 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftRegionAccessor.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftRegionAccessor.java
@@ -529,7 +529,7 @@ public abstract class CraftRegionAccessor implements RegionAccessor {
         Preconditions.checkArgument(entity != null, "Cannot spawn null entity");
 
         if (randomizeData && entity instanceof Mob) {
-            ((Mob) entity).finalizeSpawn(this.getHandle(), this.getHandle().getCurrentDifficultyAt(entity.blockPosition()), MobSpawnType.COMMAND, (SpawnGroupData) null, null);
+            ((Mob) entity).finalizeSpawn(this.getHandle(), this.getHandle().getCurrentDifficultyAt(entity.blockPosition()), MobSpawnType.COMMAND, null, null);
         }
 
         if (!this.isNormalWorld()) {
@@ -892,7 +892,7 @@ public abstract class CraftRegionAccessor implements RegionAccessor {
                         AABB bb = (ItemFrame.class.isAssignableFrom(clazz))
                                 ? net.minecraft.world.entity.decoration.ItemFrame.calculateBoundingBox(null, pos, CraftBlock.blockFaceToNotch(dir).getOpposite(), width, height)
                                 : HangingEntity.calculateBoundingBox(null, pos, CraftBlock.blockFaceToNotch(dir).getOpposite(), width, height);
-                        List<net.minecraft.world.entity.Entity> list = (List<net.minecraft.world.entity.Entity>) this.getHandle().getEntities(null, bb);
+                        List<net.minecraft.world.entity.Entity> list = this.getHandle().getEntities(null, bb);
                         for (Iterator<net.minecraft.world.entity.Entity> it = list.iterator(); !taken && it.hasNext(); ) {
                             net.minecraft.world.entity.Entity e = it.next();
                             if (e instanceof HangingEntity) {
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index 1c254519e27a0977ee857c046276e13a9888d923..5cd4ca2bc6d51f5907c59bdb76a903aabbd77aa1 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -1105,7 +1105,7 @@ public final class CraftServer implements Server {
         Map<String, Map<String, Object>> perms;
 
         try {
-            perms = (Map<String, Map<String, Object>>) this.yaml.load(stream);
+            perms = this.yaml.load(stream);
         } catch (MarkedYAMLException ex) {
             this.getLogger().log(Level.WARNING, "Server permissions file " + file + " is not valid YAML: " + ex);
             return;
@@ -1269,7 +1269,7 @@ public final class CraftServer implements Server {
             worldKey = ResourceKey.create(Registries.DIMENSION, new net.minecraft.resources.ResourceLocation(creator.key().getNamespace().toLowerCase(java.util.Locale.ENGLISH), creator.key().getKey().toLowerCase(java.util.Locale.ENGLISH))); // Paper
         }
 
-        ServerLevel internal = (ServerLevel) new ServerLevel(this.console, console.executor, worldSession, worlddata, worldKey, worlddimension, this.getServer().progressListenerFactory.create(11),
+        ServerLevel internal = new ServerLevel(this.console, console.executor, worldSession, worlddata, worldKey, worlddimension, this.getServer().progressListenerFactory.create(11),
                 worlddata.isDebugWorld(), j, creator.environment() == Environment.NORMAL ? list : ImmutableList.of(), true, creator.environment(), generator, biomeProvider);
 
         if (!(this.worlds.containsKey(name.toLowerCase(java.util.Locale.ENGLISH)))) {
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftWorld.java b/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
index 7688ce3b9796fd845ed3f3c8791470f020547b01..2ed35d06ae5043e3b5d591b4692e6aaca9f6f4bc 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
@@ -1685,7 +1685,7 @@ public class CraftWorld extends CraftRegionAccessor implements World {
         Validate.notNull(spawnCategory, "SpawnCategory cannot be null");
         Validate.isTrue(CraftSpawnCategory.isValidForLimits(spawnCategory), "SpawnCategory." + spawnCategory + " are not supported.");
 
-        world.ticksPerSpawnCategory.put(spawnCategory, (long) ticksPerCategorySpawn);
+        world.ticksPerSpawnCategory.put(spawnCategory, ticksPerCategorySpawn);
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/block/CraftBlock.java b/src/main/java/org/bukkit/craftbukkit/block/CraftBlock.java
index 30958b002c296050cda577c85e1446ef61ceb42a..a1003502305251b3bfe0fa9a1c506ffbce72a973 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/CraftBlock.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/CraftBlock.java
@@ -619,7 +619,7 @@ public class CraftBlock implements Block {
 
         // Modelled off EntityHuman#hasBlock
         if (item == null || this.isPreferredTool(iblockdata, nms)) {
-            return net.minecraft.world.level.block.Block.getDrops(iblockdata, (ServerLevel) this.world.getMinecraftWorld(), position, this.world.getBlockEntity(position), entity == null ? null : ((CraftEntity) entity).getHandle(), nms)
+            return net.minecraft.world.level.block.Block.getDrops(iblockdata, this.world.getMinecraftWorld(), position, this.world.getBlockEntity(position), entity == null ? null : ((CraftEntity) entity).getHandle(), nms)
                     .stream().map(CraftItemStack::asBukkitCopy).collect(Collectors.toList());
         } else {
             return Collections.emptyList();
diff --git a/src/main/java/org/bukkit/craftbukkit/block/CraftLootable.java b/src/main/java/org/bukkit/craftbukkit/block/CraftLootable.java
index af3edb1742aebb5bc1ce57f8bb4fe15b66f115a2..5558d1c273cf780d7c9bbaccd0b82d02d07cc0e1 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/CraftLootable.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/CraftLootable.java
@@ -23,7 +23,7 @@ public abstract class CraftLootable<T extends RandomizableContainerBlockEntity>
         super.applyTo(lootable);
 
         if (this.getSnapshot().lootTable == null) {
-            lootable.setLootTable((ResourceLocation) null, 0L);
+            lootable.setLootTable(null, 0L);
         }
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/block/data/CraftBlockData.java b/src/main/java/org/bukkit/craftbukkit/block/data/CraftBlockData.java
index e93369e63ce83291bc8e8a8e47d128efdf30ca9a..d80ee8d026a3d533cd39366b28af40b5476fb6b8 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/data/CraftBlockData.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/data/CraftBlockData.java
@@ -245,7 +245,7 @@ public class CraftBlockData implements BlockData {
         CompoundTag compound = new CompoundTag();
 
         for (Map.Entry<Property<?>, Comparable<?>> entry : this.state.getValues().entrySet()) {
-            Property iblockstate = (Property) entry.getKey();
+            Property iblockstate = entry.getKey();
 
             compound.putString(iblockstate.getName(), iblockstate.getName(entry.getValue()));
         }
diff --git a/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftNoteBlock.java b/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftNoteBlock.java
index bf48b45cf5aa61bb763a35cffc8567d28a8bbb98..0828ba2335de4d8339deec8ca924b3dbdc552259 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftNoteBlock.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/data/type/CraftNoteBlock.java
@@ -27,6 +27,6 @@ public abstract class CraftNoteBlock extends CraftBlockData implements NoteBlock
 
     @Override
     public void setNote(org.bukkit.@NotNull Note note) {
-        set(CraftNoteBlock.NOTE, Integer.valueOf((int) note.getId()));
+        set(CraftNoteBlock.NOTE, Integer.valueOf(note.getId()));
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftNote.java b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftNote.java
index 50077375611d6bf1addfa802478f20df28ee8d27..f53e02506790e223fa112c58d139d8588460fef6 100644
--- a/src/main/java/org/bukkit/craftbukkit/block/impl/CraftNote.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/impl/CraftNote.java
@@ -38,7 +38,7 @@ public final class CraftNote extends org.bukkit.craftbukkit.block.data.CraftBloc
 
     @Override
     public void setNote(org.bukkit.@NotNull Note note) {
-        set(CraftNote.NOTE, Integer.valueOf((int) note.getId()));
+        set(CraftNote.NOTE, Integer.valueOf(note.getId()));
     }
 
     // org.bukkit.craftbukkit.block.data.CraftPowerable
diff --git a/src/main/java/org/bukkit/craftbukkit/command/VanillaCommandWrapper.java b/src/main/java/org/bukkit/craftbukkit/command/VanillaCommandWrapper.java
index e8fe6609406ea2a44ee9847f3956f6260ceef9ac..b38092140abc26d1dea661853235efb502402747 100644
--- a/src/main/java/org/bukkit/craftbukkit/command/VanillaCommandWrapper.java
+++ b/src/main/java/org/bukkit/craftbukkit/command/VanillaCommandWrapper.java
@@ -75,7 +75,7 @@ public final class VanillaCommandWrapper extends BukkitCommand {
             return ((CraftBlockCommandSender) sender).getWrapper();
         }
         if (sender instanceof CommandMinecart) {
-            return ((MinecartCommandBlock) ((CraftMinecartCommand) sender).getHandle()).getCommandBlock().createCommandSourceStack();
+            return ((CraftMinecartCommand) sender).getHandle().getCommandBlock().createCommandSourceStack();
         }
         if (sender instanceof RemoteConsoleCommandSender) {
             return ((DedicatedServer) MinecraftServer.getServer()).rconConsoleSource.createCommandSourceStack();
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftAreaEffectCloud.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftAreaEffectCloud.java
index 6bc9cfde9abc7d65f3bd7f2f041a152b68d404c5..804c0c26687cae0e6b07572b06bfe9dd9604f253 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftAreaEffectCloud.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftAreaEffectCloud.java
@@ -223,9 +223,9 @@ public class CraftAreaEffectCloud extends CraftEntity implements AreaEffectCloud
     @Override
     public void setSource(ProjectileSource shooter) {
         if (shooter instanceof CraftLivingEntity) {
-            this.getHandle().setOwner((net.minecraft.world.entity.LivingEntity) ((CraftLivingEntity) shooter).getHandle());
+            this.getHandle().setOwner(((CraftLivingEntity) shooter).getHandle());
         } else {
-            this.getHandle().setOwner((net.minecraft.world.entity.LivingEntity) null);
+            this.getHandle().setOwner(null);
         }
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftComplexPart.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftComplexPart.java
index f31691f94cb2b02eaa4dc721a9366f108d2137bd..f12549cad3a837f05884ab0ddc7d8c6f89f28fd2 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftComplexPart.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftComplexPart.java
@@ -17,7 +17,7 @@ public class CraftComplexPart extends CraftEntity implements ComplexEntityPart {
 
     @Override
     public @NotNull ComplexLivingEntity getParent() {
-        return (ComplexLivingEntity) ((EnderDragon) this.getHandle().parentMob).getBukkitEntity();
+        return (ComplexLivingEntity) this.getHandle().parentMob.getBukkitEntity();
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftEnderCrystal.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftEnderCrystal.java
index fcda10b24cdab1a7f58573c5ffd5e357d3fc1789..c59b7597c4b16d7e650ab2621bbc847e358a2c0b 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftEnderCrystal.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftEnderCrystal.java
@@ -34,7 +34,7 @@ public class CraftEnderCrystal extends CraftEntity implements EnderCrystal {
     @Override
     public void setBeamTarget(@Nullable Location location) {
         if (location == null) {
-            this.getHandle().setBeamTarget((BlockPos) null);
+            this.getHandle().setBeamTarget(null);
         } else if (location.getWorld() != getWorld()) {
             throw new IllegalArgumentException("Cannot set beam target location to different world");
         } else {
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftHumanEntity.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftHumanEntity.java
index d698c09d2146d6ecab141fde44f91659f49d60a4..ad0ec98f8d4425a31546e143214f8afc4b554c8e 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftHumanEntity.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftHumanEntity.java
@@ -179,7 +179,7 @@ public class CraftHumanEntity extends CraftLivingEntity implements HumanEntity {
         }
 
         // From BlockBed
-        iblockdata = (BlockState) iblockdata.setValue(BedBlock.OCCUPIED, Boolean.TRUE);
+        iblockdata = iblockdata.setValue(BedBlock.OCCUPIED, Boolean.TRUE);
         this.getHandle().level.setBlock(blockposition, iblockdata, 4);
 
         return true;
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftItem.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftItem.java
index d704543cd13406b716120d52711052716423a86b..c473224fd4352ed9ce929b2b8d96fb2e2697ae4f 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftItem.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftItem.java
@@ -14,8 +14,8 @@ import org.jetbrains.annotations.NotNull;
 public class CraftItem extends CraftEntity implements Item {
 
     // Paper start
-    private final static int NO_AGE_TIME = (int) Short.MIN_VALUE;
-    private final static int NO_PICKUP_TIME = (int) Short.MAX_VALUE;
+    private final static int NO_AGE_TIME = Short.MIN_VALUE;
+    private final static int NO_PICKUP_TIME = Short.MAX_VALUE;
     // Paper end
 
     private final ItemEntity item;
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftLivingEntity.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftLivingEntity.java
index 6b6c1ea8842160843a2c4b28b01c447bd73a1539..6fe1866b57f1fe69571a739555e72c7d30969553 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftLivingEntity.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftLivingEntity.java
@@ -559,7 +559,7 @@ public class CraftLivingEntity extends CraftEntity implements LivingEntity {
                 launch = new LargeFireball(world, this.getHandle(), direction.getX(), direction.getY(), direction.getZ(), 1);
             }
 
-            ((AbstractHurtingProjectile) launch).projectileSource = this;
+            launch.projectileSource = this;
             launch.moveTo(location.getX(), location.getY(), location.getZ(), location.getYaw(), location.getPitch());
         } else if (LlamaSpit.class.isAssignableFrom(projectile)) {
             Location location = this.getEyeLocation();
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftMinecartHopper.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftMinecartHopper.java
index d05e3e09d59fe88cb0b7b8d1af1de2e41722cdaa..9bac3b0735da1a2e47755bdedba6b9419fce8328 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftMinecartHopper.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftMinecartHopper.java
@@ -34,12 +34,12 @@ public final class CraftMinecartHopper extends CraftMinecartContainer implements
 
     @Override
     public boolean isEnabled() {
-        return ((MinecartHopper) getHandle()).isEnabled();
+        return getHandle().isEnabled();
     }
 
     @Override
     public void setEnabled(boolean enabled) {
-        ((MinecartHopper) getHandle()).setEnabled(enabled);
+        getHandle().setEnabled(enabled);
     }
     // Paper start
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
index 6707740173541ca556055b4556400209a7cc96f7..d6a971791b52b7d4dc5bebc56bde850c5626ebdf 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
@@ -528,7 +528,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
             name = getName();
         }
         this.getHandle().listName = name.equals(getName()) ? null : CraftChatMessage.fromStringOrNull(name);
-        for (ServerPlayer player : (List<ServerPlayer>) server.getHandle().players) {
+        for (ServerPlayer player : server.getHandle().players) {
             if (player.getBukkitEntity().canSee(this)) {
                 player.connection.send(new ClientboundPlayerInfoUpdatePacket(ClientboundPlayerInfoUpdatePacket.Action.UPDATE_DISPLAY_NAME, this.getHandle()));
             }
@@ -2202,7 +2202,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
 
     @Override
     public float getFlySpeed() {
-        return (float) this.getHandle().getAbilities().flyingSpeed * 2f;
+        return this.getHandle().getAbilities().flyingSpeed * 2f;
     }
 
     @Override
@@ -2310,7 +2310,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
                 this.sendHealthUpdate();
             }
         }
-        this.getHandle().getEntityData().set(net.minecraft.world.entity.LivingEntity.DATA_HEALTH_ID, Float.valueOf((float) this.getScaledHealth()));
+        this.getHandle().getEntityData().set(net.minecraft.world.entity.LivingEntity.DATA_HEALTH_ID, Float.valueOf(this.getScaledHealth()));
 
         this.getHandle().maxHealthCache = getMaxHealth();
     }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftProjectile.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftProjectile.java
index 9a68f4ef68870d0baab5b6464d6c0a82a8fd105d..c18395cc7271b5e1cf5f71147a299fd5fa0261ef 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftProjectile.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftProjectile.java
@@ -18,7 +18,7 @@ public abstract class CraftProjectile extends AbstractProjectile implements Proj
     @Override
     public void setShooter(ProjectileSource shooter) {
         if (shooter instanceof CraftLivingEntity) {
-            this.getHandle().setOwner((LivingEntity) ((CraftLivingEntity) shooter).entity);
+            this.getHandle().setOwner(((CraftLivingEntity) shooter).entity);
         } else {
             this.getHandle().setOwner(null);
         }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftRaider.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftRaider.java
index 6a4feb487a101bf6d1631e71dc349d5fd2a18894..7c62f840e87626c9da809a936db93ae01dcb3f23 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftRaider.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftRaider.java
@@ -36,7 +36,7 @@ public abstract class CraftRaider extends CraftMonster implements Raider {
     @Override
     public void setPatrolTarget(@Nullable Block block) {
         if (block == null) {
-            this.getHandle().setPatrolTarget((BlockPos) null);
+            this.getHandle().setPatrolTarget(null);
         } else {
             Preconditions.checkArgument(block.getWorld().equals(this.getWorld()), "Block must be in same world");
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftVillagerZombie.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftVillagerZombie.java
index 5ff330206e08f22aba009b8c169c5cee058ea775..483100e4ec372597bab2d6f0c790bb8cc9a4174f 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftVillagerZombie.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftVillagerZombie.java
@@ -88,7 +88,7 @@ public class CraftVillagerZombie extends CraftZombie implements ZombieVillager {
             this.getHandle().conversionStarter = null;
             this.getHandle().removeEffect(MobEffects.DAMAGE_BOOST, org.bukkit.event.entity.EntityPotionEffectEvent.Cause.CONVERSION);
         } else {
-            this.getHandle().startConverting((UUID) null, time, broadcastEntityEvent); // Paper - missing entity behaviour api - converting without entity event
+            this.getHandle().startConverting(null, time, broadcastEntityEvent); // Paper - missing entity behaviour api - converting without entity event
         }
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/memory/CraftMemoryMapper.java b/src/main/java/org/bukkit/craftbukkit/entity/memory/CraftMemoryMapper.java
index 6515b157b87b99addc96910dd356ae827b90e368..d25a9ec7aaf26e03a12875de7cfd6eed168e34db 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/memory/CraftMemoryMapper.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/memory/CraftMemoryMapper.java
@@ -19,13 +19,13 @@ public final class CraftMemoryMapper {
         if (object instanceof GlobalPos) {
             return CraftMemoryMapper.fromNms((GlobalPos) object);
         } else if (object instanceof Long) {
-            return (Long) object;
+            return object;
         } else if (object instanceof UUID) {
-            return (UUID) object;
+            return object;
         } else if (object instanceof Boolean) {
-            return (Boolean) object;
+            return object;
         } else if (object instanceof Integer) {
-            return (Integer) object;
+            return object;
         }
 
         throw new UnsupportedOperationException("Do not know how to map " + object);
@@ -37,13 +37,13 @@ public final class CraftMemoryMapper {
         } else if (object instanceof Location) {
             return CraftMemoryMapper.toNms((Location) object);
         } else if (object instanceof Long) {
-            return (Long) object;
+            return object;
         } else if (object instanceof UUID) {
-            return (UUID) object;
+            return object;
         } else if (object instanceof Boolean) {
-            return (Boolean) object;
+            return object;
         } else if (object instanceof Integer) {
-            return (Integer) object;
+            return object;
         }
 
         throw new UnsupportedOperationException("Do not know how to map " + object);
diff --git a/src/main/java/org/bukkit/craftbukkit/event/CraftEventFactory.java b/src/main/java/org/bukkit/craftbukkit/event/CraftEventFactory.java
index 28e4ac19b2b25bd127e056dbfbd91de88356cf24..69ec3294de693083f15e6fea58a0201f563639c2 100644
--- a/src/main/java/org/bukkit/craftbukkit/event/CraftEventFactory.java
+++ b/src/main/java/org/bukkit/craftbukkit/event/CraftEventFactory.java
@@ -296,7 +296,7 @@ public class CraftEventFactory {
      * Entity Enter Love Mode Event
      */
     public static @NotNull EntityEnterLoveModeEvent callEntityEnterLoveModeEvent(net.minecraft.world.entity.player.@org.jetbrains.annotations.Nullable Player entityHuman, @NotNull Animal entityAnimal, int loveTicks) {
-        EntityEnterLoveModeEvent entityEnterLoveModeEvent = new EntityEnterLoveModeEvent((Animals) entityAnimal.getBukkitEntity(), entityHuman != null ? (HumanEntity) entityHuman.getBukkitEntity() : null, loveTicks);
+        EntityEnterLoveModeEvent entityEnterLoveModeEvent = new EntityEnterLoveModeEvent((Animals) entityAnimal.getBukkitEntity(), entityHuman != null ? entityHuman.getBukkitEntity() : null, loveTicks);
         Bukkit.getPluginManager().callEvent(entityEnterLoveModeEvent);
         return entityEnterLoveModeEvent;
     }
@@ -1750,7 +1750,7 @@ public class CraftEventFactory {
         BlockPhysicsEvent event = new BlockPhysicsEvent(block, block.getBlockData());
         // Suppress during worldgen
         if (world instanceof Level) {
-            ((Level) world).getServer().server.getPluginManager().callEvent(event);
+            world.getServer().server.getPluginManager().callEvent(event);
         }
         return event;
     }
diff --git a/src/main/java/org/bukkit/craftbukkit/map/CraftMapRenderer.java b/src/main/java/org/bukkit/craftbukkit/map/CraftMapRenderer.java
index 8590efbf2b27c9007cbdd6e9a74d43fcc7221996..83b89316891f248decdbdf60acd813a452b383ef 100644
--- a/src/main/java/org/bukkit/craftbukkit/map/CraftMapRenderer.java
+++ b/src/main/java/org/bukkit/craftbukkit/map/CraftMapRenderer.java
@@ -39,7 +39,7 @@ public class CraftMapRenderer extends MapRenderer {
 
         for (final Map.Entry<String, MapDecoration> entry : worldMap.decorations.entrySet()) {
             // If this cursor is for a player check visibility with vanish system
-            Player other = Bukkit.getPlayerExact((String) entry.getKey());
+            Player other = Bukkit.getPlayerExact(entry.getKey());
             if (other != null && !player.canSee(other)) {
                 continue;
             }
diff --git a/src/main/java/org/bukkit/craftbukkit/projectiles/CraftBlockProjectileSource.java b/src/main/java/org/bukkit/craftbukkit/projectiles/CraftBlockProjectileSource.java
index 6e0bd0da4bf99b7376255c77ed24144569cc7c7d..39b61a83dd8b21e8c7e234ddc5db5c394735e5c1 100644
--- a/src/main/java/org/bukkit/craftbukkit/projectiles/CraftBlockProjectileSource.java
+++ b/src/main/java/org/bukkit/craftbukkit/projectiles/CraftBlockProjectileSource.java
@@ -72,7 +72,7 @@ public class CraftBlockProjectileSource implements BlockProjectileSource {
         BlockSourceImpl isourceblock = new BlockSourceImpl((ServerLevel) this.dispenserBlock.getLevel(), this.dispenserBlock.getBlockPos());
         // Copied from DispenseBehaviorProjectile
         Position iposition = DispenserBlock.getDispensePosition(isourceblock);
-        Direction enumdirection = (Direction) isourceblock.getBlockState().getValue(DispenserBlock.FACING);
+        Direction enumdirection = isourceblock.getBlockState().getValue(DispenserBlock.FACING);
         net.minecraft.world.level.Level world = this.dispenserBlock.getLevel();
         net.minecraft.world.entity.Entity launch = null;
 
@@ -103,7 +103,7 @@ public class CraftBlockProjectileSource implements BlockProjectileSource {
                 launch = new Arrow(world, iposition.x(), iposition.y(), iposition.z());
             }
             ((net.minecraft.world.entity.projectile.AbstractArrow) launch).pickup = net.minecraft.world.entity.projectile.AbstractArrow.Pickup.ALLOWED;
-            ((net.minecraft.world.entity.projectile.AbstractArrow) launch).projectileSource = this;
+            launch.projectileSource = this;
         } else if (Fireball.class.isAssignableFrom(projectile)) {
             double d0 = iposition.x() + (double) ((float) enumdirection.getStepX() * 0.3F);
             double d1 = iposition.y() + (double) ((float) enumdirection.getStepY() * 0.3F);
@@ -133,14 +133,14 @@ public class CraftBlockProjectileSource implements BlockProjectileSource {
                 ((AbstractHurtingProjectile) launch).zPower = d5 / d6 * 0.1D;
             }
 
-            ((AbstractHurtingProjectile) launch).projectileSource = this;
+            launch.projectileSource = this;
         }
 
         Validate.notNull(launch, "Projectile not supported");
 
         if (launch instanceof net.minecraft.world.entity.projectile.Projectile) {
             if (launch instanceof ThrowableProjectile) {
-                ((ThrowableProjectile) launch).projectileSource = this;
+                launch.projectileSource = this;
             }
             // Values from DispenseBehaviorProjectile
             float a = 6.0F;
@@ -151,7 +151,7 @@ public class CraftBlockProjectileSource implements BlockProjectileSource {
                 b *= 1.25F;
             }
             // Copied from DispenseBehaviorProjectile
-            ((net.minecraft.world.entity.projectile.Projectile) launch).shoot((double) enumdirection.getStepX(), (double) ((float) enumdirection.getStepY() + 0.1F), (double) enumdirection.getStepZ(), b, a);
+            ((net.minecraft.world.entity.projectile.Projectile) launch).shoot(enumdirection.getStepX(), (float) enumdirection.getStepY() + 0.1F, enumdirection.getStepZ(), b, a);
         }
 
         if (velocity != null) {
diff --git a/src/main/java/org/bukkit/craftbukkit/scoreboard/CraftScoreboard.java b/src/main/java/org/bukkit/craftbukkit/scoreboard/CraftScoreboard.java
index 66d0ae1190d8d79b63c037baa569778aa1e2307d..b30f78037385daed2c4ac3cc3ffa51483bbcca24 100644
--- a/src/main/java/org/bukkit/craftbukkit/scoreboard/CraftScoreboard.java
+++ b/src/main/java/org/bukkit/craftbukkit/scoreboard/CraftScoreboard.java
@@ -98,7 +98,7 @@ public final class CraftScoreboard implements org.bukkit.scoreboard.Scoreboard {
         Validate.notNull(criteria, "Criteria cannot be null");
 
         ImmutableSet.Builder<Objective> objectives = ImmutableSet.builder();
-        for (net.minecraft.world.scores.Objective netObjective : (Collection<net.minecraft.world.scores.Objective>) this.board.getObjectives()) {
+        for (net.minecraft.world.scores.Objective netObjective : this.board.getObjectives()) {
             CraftObjective objective = new CraftObjective(this, netObjective);
             if (objective.getCriteria().equals(criteria)) {
                 objectives.add(objective);
@@ -124,7 +124,7 @@ public final class CraftScoreboard implements org.bukkit.scoreboard.Scoreboard {
 
     @Override
     public @NotNull ImmutableSet<Objective> getObjectives() {
-        return ImmutableSet.copyOf(Iterables.transform((Collection<net.minecraft.world.scores.Objective>) this.board.getObjectives(), new Function<net.minecraft.world.scores.Objective, Objective>() {
+        return ImmutableSet.copyOf(Iterables.transform(this.board.getObjectives(), new Function<net.minecraft.world.scores.Objective, Objective>() {
 
             @Override
             public @NotNull Objective apply(net.minecraft.world.scores.@NotNull Objective input) {
@@ -155,7 +155,7 @@ public final class CraftScoreboard implements org.bukkit.scoreboard.Scoreboard {
         Validate.notNull(entry, "Entry cannot be null");
 
         ImmutableSet.Builder<Score> scores = ImmutableSet.builder();
-        for (net.minecraft.world.scores.Objective objective : (Collection<net.minecraft.world.scores.Objective>) this.board.getObjectives()) {
+        for (net.minecraft.world.scores.Objective objective : this.board.getObjectives()) {
             scores.add(new CraftScore(new CraftObjective(this, objective), entry));
         }
         return scores.build();
@@ -172,7 +172,7 @@ public final class CraftScoreboard implements org.bukkit.scoreboard.Scoreboard {
     public void resetScores(@NotNull String entry) throws IllegalArgumentException {
         Validate.notNull(entry, "Entry cannot be null");
 
-        for (net.minecraft.world.scores.Objective objective : (Collection<net.minecraft.world.scores.Objective>) this.board.getObjectives()) {
+        for (net.minecraft.world.scores.Objective objective : this.board.getObjectives()) {
             this.board.resetPlayerScore(entry, objective);
         }
     }
@@ -203,7 +203,7 @@ public final class CraftScoreboard implements org.bukkit.scoreboard.Scoreboard {
 
     @Override
     public @NotNull ImmutableSet<Team> getTeams() {
-        return ImmutableSet.copyOf(Iterables.transform((Collection<PlayerTeam>) this.board.getPlayerTeams(), new Function<PlayerTeam, Team>() {
+        return ImmutableSet.copyOf(Iterables.transform(this.board.getPlayerTeams(), new Function<PlayerTeam, Team>() {
 
             @Override
             public @NotNull Team apply(PlayerTeam input) {
diff --git a/src/main/java/org/bukkit/craftbukkit/scoreboard/CraftTeam.java b/src/main/java/org/bukkit/craftbukkit/scoreboard/CraftTeam.java
index c21a3d2871e741e37c0078ed1d5c564a1efca0d8..dff3b12d2ee3fe1a2085ddc908fd3daf80ed3564 100644
--- a/src/main/java/org/bukkit/craftbukkit/scoreboard/CraftTeam.java
+++ b/src/main/java/org/bukkit/craftbukkit/scoreboard/CraftTeam.java
@@ -76,7 +76,7 @@ final class CraftTeam extends CraftScoreboardComponent implements Team {
         if (team.getColor().getColor() == null) throw new IllegalStateException("Team colors must have hex values");
         net.kyori.adventure.text.format.TextColor color = net.kyori.adventure.text.format.TextColor.color(team.getColor().getColor().intValue());
         if (!(color instanceof net.kyori.adventure.text.format.NamedTextColor)) throw new IllegalStateException("Team doesn't have a NamedTextColor");
-        return (net.kyori.adventure.text.format.NamedTextColor) color;
+        return color;
     }
     @Override
     public void color(net.kyori.adventure.text.format.@Nullable NamedTextColor color) {
diff --git a/src/main/java/org/bukkit/craftbukkit/util/Commodore.java b/src/main/java/org/bukkit/craftbukkit/util/Commodore.java
index 18788abd108972e0177dc61cbefcb88e01812bda..93ef6c9b6833c94703446c6124217affca0539e4 100644
--- a/src/main/java/org/bukkit/craftbukkit/util/Commodore.java
+++ b/src/main/java/org/bukkit/craftbukkit/util/Commodore.java
@@ -548,7 +548,7 @@ public class Commodore
                             }
                         }
                         // Paper end
-                        if ( value instanceof String && ( (String) value ).equals( "com.mysql.jdbc.Driver" ) )
+                        if ( value instanceof String && value.equals( "com.mysql.jdbc.Driver" ) )
                         {
                             super.visitLdcInsn( "com.mysql.cj.jdbc.Driver" );
                             return;
diff --git a/src/main/java/org/bukkit/craftbukkit/util/CraftChatMessage.java b/src/main/java/org/bukkit/craftbukkit/util/CraftChatMessage.java
index 3a61a0f59c6c44b82b7a5a8349c4ef04326d72f2..875a99a7c676ecbff72d06ba5edfa3bf5e829bc3 100644
--- a/src/main/java/org/bukkit/craftbukkit/util/CraftChatMessage.java
+++ b/src/main/java/org/bukkit/craftbukkit/util/CraftChatMessage.java
@@ -150,7 +150,7 @@ public final class CraftChatMessage {
                         }
                         this.modifier = this.modifier.withClickEvent(new ClickEvent(Action.OPEN_URL, match));
                         this.appendNewComponent(matcher.end(groupId));
-                        this.modifier = this.modifier.withClickEvent((ClickEvent) null);
+                        this.modifier = this.modifier.withClickEvent(null);
                     }
                     break;
                 case 3:
diff --git a/src/main/java/org/bukkit/craftbukkit/util/CraftMagicNumbers.java b/src/main/java/org/bukkit/craftbukkit/util/CraftMagicNumbers.java
index 891387ea27e6679259301c5fff34a721219b25c4..555a2d489cf44482ccd87c0ff4cf873d06e7bf46 100644
--- a/src/main/java/org/bukkit/craftbukkit/util/CraftMagicNumbers.java
+++ b/src/main/java/org/bukkit/craftbukkit/util/CraftMagicNumbers.java
@@ -305,7 +305,7 @@ public final class CraftMagicNumbers implements UnsafeValues {
         net.minecraft.world.item.ItemStack nmsStack = CraftItemStack.asNMSCopy(stack);
 
         try {
-            nmsStack.setTag((CompoundTag) TagParser.parseTag(arguments));
+            nmsStack.setTag(TagParser.parseTag(arguments));
         } catch (CommandSyntaxException ex) {
             Logger.getLogger(CraftMagicNumbers.class.getName()).log(Level.SEVERE, null, ex);
         }
diff --git a/src/main/java/org/spigotmc/SpigotConfig.java b/src/main/java/org/spigotmc/SpigotConfig.java
index dc034652663064051ec669a27c05e88470d270f8..20a5203a8540a9a0383f91c5ca55f1e1ff9eff42 100644
--- a/src/main/java/org/spigotmc/SpigotConfig.java
+++ b/src/main/java/org/spigotmc/SpigotConfig.java
@@ -157,7 +157,7 @@ public class SpigotConfig
     private static <T> @Nullable List getList(@NotNull String path, T def)
     {
         SpigotConfig.config.addDefault( path, def );
-        return (List<T>) SpigotConfig.config.getList( path, SpigotConfig.config.getList( path ) );
+        return SpigotConfig.config.getList( path, SpigotConfig.config.getList( path ) );
     }
 
     private static @Nullable String getString(@NotNull String path, String def)
diff --git a/src/main/java/org/spigotmc/SpigotWorldConfig.java b/src/main/java/org/spigotmc/SpigotWorldConfig.java
index b340f66db696f8b72754b6ae1d572289fbcfd49c..60c4ca973370124e8bdf09c370ee0d9a6ef170c0 100644
--- a/src/main/java/org/spigotmc/SpigotWorldConfig.java
+++ b/src/main/java/org/spigotmc/SpigotWorldConfig.java
@@ -74,7 +74,7 @@ public class SpigotWorldConfig
     public <T> @Nullable List getList(String path, T def)
     {
         this.config.addDefault( "world-settings.default." + path, def );
-        return (List<T>) this.config.getList( "world-settings." + this.worldName + "." + path, this.config.getList( "world-settings.default." + path ) );
+        return this.config.getList( "world-settings." + this.worldName + "." + path, this.config.getList( "world-settings.default." + path ) );
     }
 
     public @Nullable String getString(String path, String def)
