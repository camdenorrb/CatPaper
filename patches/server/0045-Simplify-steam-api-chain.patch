From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: camdenorrb <me@12oclock.dev>
Date: Sat, 22 Oct 2022 04:12:28 -0500
Subject: [PATCH] Simplify steam api chain


diff --git a/src/main/java/ca/spottedleaf/starlight/common/light/BlockStarLightEngine.java b/src/main/java/ca/spottedleaf/starlight/common/light/BlockStarLightEngine.java
index e6e91ef20e78a213a377bf3d2bb8b2c3e02c611a..f1acb5bb30156848b5442eef21218555c09b7c2d 100644
--- a/src/main/java/ca/spottedleaf/starlight/common/light/BlockStarLightEngine.java
+++ b/src/main/java/ca/spottedleaf/starlight/common/light/BlockStarLightEngine.java
@@ -241,7 +241,7 @@ public final class BlockStarLightEngine extends StarLightEngine {
             // the missing sources from checkBlock.
             for (;;) {
                 try {
-                    return chunk.getLights().collect(Collectors.toList()).iterator();
+                    return chunk.getLights().toList().iterator();
                 } catch (final Exception cme) {
                     continue;
                 }
diff --git a/src/main/java/com/mojang/brigadier/CommandDispatcher.java b/src/main/java/com/mojang/brigadier/CommandDispatcher.java
index 494131fdca607dc14eb24c974af89082b8eced90..5174eb4d16b20b751ce583735f707af8a268580d 100644
--- a/src/main/java/com/mojang/brigadier/CommandDispatcher.java
+++ b/src/main/java/com/mojang/brigadier/CommandDispatcher.java
@@ -525,7 +525,7 @@ public class CommandDispatcher<S> {
                 final String redirect = node.getRedirect() == this.root ? "..." : "-> " + node.getRedirect().getUsageText();
                 return self + CommandDispatcher.ARGUMENT_SEPARATOR + redirect;
             } else {
-                final Collection<CommandNode<S>> children = node.getChildren().stream().filter(c -> c.canUse(source)).collect(Collectors.toList());
+                final Collection<CommandNode<S>> children = node.getChildren().stream().filter(c -> c.canUse(source)).toList();
                 if (children.size() == 1) {
                     final String usage = this.getSmartUsage(children.iterator().next(), source, childOptional, childOptional);
                     if (usage != null) {
diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index bd0c403d7ece0482f3d28f9b066e943f1e75bb27..fcbee958cb35273363aa63d4eac7ee8df8456f7b 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -620,7 +620,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
 
         // Paper start - Handle collideRule team for player collision toggle
         final ServerScoreboard scoreboard = this.getScoreboard();
-        final java.util.Collection<String> toRemove = scoreboard.getPlayerTeams().stream().filter(team -> team.getName().startsWith("collideRule_")).map(net.minecraft.world.scores.PlayerTeam::getName).collect(java.util.stream.Collectors.toList());
+        final java.util.Collection<String> toRemove = scoreboard.getPlayerTeams().stream().map(net.minecraft.world.scores.PlayerTeam::getName).filter(name -> name.startsWith("collideRule_")).toList();
         for (String teamName : toRemove) {
             scoreboard.removePlayerTeam(scoreboard.getPlayerTeam(teamName)); // Clean up after ourselves
         }
diff --git a/src/main/java/net/minecraft/server/PlayerAdvancements.java b/src/main/java/net/minecraft/server/PlayerAdvancements.java
index 09ac53cfd77a97a932f90857559b3892dad6c7db..1498f17e3349929e43dad914d6a49211d406ff42 100644
--- a/src/main/java/net/minecraft/server/PlayerAdvancements.java
+++ b/src/main/java/net/minecraft/server/PlayerAdvancements.java
@@ -174,7 +174,7 @@ public class PlayerAdvancements {
                     }
 
                     Stream<Entry<ResourceLocation, AdvancementProgress>> stream = map.entrySet().stream().sorted(Entry.comparingByValue());
-                    Iterator iterator = ((List) stream.collect(Collectors.toList())).iterator();
+                    Iterator iterator = ((List) stream.toList()).iterator();
 
                     while (iterator.hasNext()) {
                         Entry<ResourceLocation, AdvancementProgress> entry = (Entry) iterator.next();
diff --git a/src/main/java/net/minecraft/server/level/ServerLevel.java b/src/main/java/net/minecraft/server/level/ServerLevel.java
index 69163d500c855d04b9f6ee54b33f76f29c9b36fb..75b3dbdb1c6b6bf9f4cba89586428599b3b6896f 100644
--- a/src/main/java/net/minecraft/server/level/ServerLevel.java
+++ b/src/main/java/net/minecraft/server/level/ServerLevel.java
@@ -789,7 +789,7 @@ public class ServerLevel extends Level implements WorldGenLevel {
 
     private void wakeUpAllPlayers() {
         this.sleepStatus.removeAllSleepers();
-        (this.players.stream().filter(LivingEntity::isSleeping).collect(Collectors.toList())).forEach((entityplayer) -> { // CraftBukkit - decompile error
+        (this.players.stream().filter(LivingEntity::isSleeping).toList()).forEach((entityplayer) -> { // CraftBukkit - decompile error
             entityplayer.stopSleepInBed(false, false);
         });
     }
diff --git a/src/main/java/net/minecraft/world/entity/Mob.java b/src/main/java/net/minecraft/world/entity/Mob.java
index b2d09e709571ac5b5e965eb72d3e4ac91010a26c..d7062815d9e34f9d5168883b3a47dc6e6cb38548 100644
--- a/src/main/java/net/minecraft/world/entity/Mob.java
+++ b/src/main/java/net/minecraft/world/entity/Mob.java
@@ -796,7 +796,7 @@ public abstract class Mob extends LivingEntity {
     public boolean canReplaceEqualItem(ItemStack newStack, ItemStack oldStack) {
         return newStack.getDamageValue() >= oldStack.getDamageValue() && (!newStack.hasTag() || oldStack.hasTag()) ? (newStack.hasTag() && oldStack.hasTag() ? newStack.getTag().getAllKeys().stream().anyMatch((s) -> {
             return !s.equals("Damage");
-        }) && !oldStack.getTag().getAllKeys().stream().anyMatch((s) -> {
+        }) && oldStack.getTag().getAllKeys().stream().noneMatch((s) -> {
             return !s.equals("Damage");
         }) : false) : true;
     }
diff --git a/src/main/java/net/minecraft/world/entity/ai/sensing/TemptingSensor.java b/src/main/java/net/minecraft/world/entity/ai/sensing/TemptingSensor.java
index 9c5fef6a0d6a1597c13ef63ad39f0bef5adddf7f..1ec44433a59a1c3bbdb66bbeffc8737320476270 100644
--- a/src/main/java/net/minecraft/world/entity/ai/sensing/TemptingSensor.java
+++ b/src/main/java/net/minecraft/world/entity/ai/sensing/TemptingSensor.java
@@ -46,7 +46,7 @@ public class TemptingSensor extends Sensor<PathfinderMob> {
         });
 
         Objects.requireNonNull(entity);
-        List<Player> list = stream.sorted(Comparator.comparingDouble(entity::distanceToSqr)).collect(Collectors.toList());
+        List<Player> list = stream.sorted(Comparator.comparingDouble(entity::distanceToSqr)).toList();
 
         if (!list.isEmpty()) {
             Player entityhuman = list.get(0);
diff --git a/src/main/java/net/minecraft/world/entity/npc/Villager.java b/src/main/java/net/minecraft/world/entity/npc/Villager.java
index 0b18218bcd10dbc0a0001d636ce56cbbb2b5f4b8..c1a7ba65e2bb5bfe5327e6def1045ed59e5fd380 100644
--- a/src/main/java/net/minecraft/world/entity/npc/Villager.java
+++ b/src/main/java/net/minecraft/world/entity/npc/Villager.java
@@ -971,7 +971,7 @@ public class Villager extends AbstractVillager implements ReputationEventHandler
             List<Villager> list = world.getEntitiesOfClass(Villager.class, axisalignedbb);
             List<Villager> list1 = list.stream().filter((entityvillager) -> {
                 return entityvillager.wantsToSpawnGolem(time);
-            }).limit(5L).collect(Collectors.toList());
+            }).limit(5L).toList();
 
             if (list1.size() >= requiredCount) {
                 if (SpawnUtil.trySpawnMob(EntityType.IRON_GOLEM, MobSpawnType.MOB_SUMMONED, world, this.blockPosition(), 10, 8, 6, SpawnUtil.Strategy.LEGACY_IRON_GOLEM, org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason.VILLAGE_DEFENSE, () -> {GolemSensor.golemDetected(this);}).isPresent()) { // CraftBukkit // Paper - Set Golem Last Seen to stop it from spawning another one
diff --git a/src/main/java/net/minecraft/world/entity/npc/VillagerTrades.java b/src/main/java/net/minecraft/world/entity/npc/VillagerTrades.java
index 1fcf0b61bf4ed43da41c96a83e63b1632028c854..8e698bad9aaed2fdddf621ed38af836e50e41247 100644
--- a/src/main/java/net/minecraft/world/entity/npc/VillagerTrades.java
+++ b/src/main/java/net/minecraft/world/entity/npc/VillagerTrades.java
@@ -185,7 +185,7 @@ public class VillagerTrades {
 
         @Override
         public MerchantOffer getOffer(Entity entity, RandomSource random) {
-            List<Enchantment> list = BuiltInRegistries.ENCHANTMENT.stream().filter(Enchantment::isTradeable).collect(Collectors.toList());
+            List<Enchantment> list = BuiltInRegistries.ENCHANTMENT.stream().filter(Enchantment::isTradeable).toList();
             Enchantment enchantment = list.get(random.nextInt(list.size()));
             int i = Mth.nextInt(random, enchantment.getMinLevel(), enchantment.getMaxLevel());
             ItemStack itemStack = EnchantedBookItem.createForEnchantment(new EnchantmentInstance(enchantment, i));
@@ -355,8 +355,8 @@ public class VillagerTrades {
         public MerchantOffer getOffer(Entity entity, RandomSource random) {
             ItemStack itemStack = new ItemStack(Items.EMERALD, this.emeraldCost);
             List<Potion> list = BuiltInRegistries.POTION.stream().filter((potionx) -> {
-                return !potionx.getEffects().isEmpty() && PotionBrewing.isBrewablePotion(potionx);
-            }).collect(Collectors.toList());
+	            return !potionx.getEffects().isEmpty() && PotionBrewing.isBrewablePotion(potionx);
+            }).toList();
             Potion potion = list.get(random.nextInt(list.size()));
             ItemStack itemStack2 = PotionUtils.setPotion(new ItemStack(this.toItem.getItem(), this.toCount), potion);
             return new MerchantOffer(itemStack, new ItemStack(this.fromItem, this.fromCount), itemStack2, this.maxUses, this.villagerXp, this.priceMultiplier);
