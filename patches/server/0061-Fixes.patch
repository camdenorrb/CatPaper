From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: camdenorrb <me@12oclock.dev>
Date: Sat, 17 Dec 2022 01:20:05 -0600
Subject: [PATCH] Fixes


diff --git a/src/main/java/net/minecraft/resources/ResourceKey.java b/src/main/java/net/minecraft/resources/ResourceKey.java
index 9a62b29160d9aab12d76ba10b72e139240cac52d..dd0e73edf72a8879f4af4542e11bed039edac5ee 100644
--- a/src/main/java/net/minecraft/resources/ResourceKey.java
+++ b/src/main/java/net/minecraft/resources/ResourceKey.java
@@ -48,7 +48,7 @@ public class ResourceKey<T> {
     }
 
     public <E> Optional<ResourceKey<E>> cast(final ResourceKey<? extends Registry<E>> registryRef) {
-        return this.isFor(registryRef) ? (Optional<ResourceKey<E>>) Optional.of(this) : Optional.empty();
+        return this.isFor(registryRef) ? Optional.of((ResourceKey<E>) this) : Optional.empty();
     }
 
     public ResourceLocation location() {
diff --git a/src/main/java/net/minecraft/server/Main.java b/src/main/java/net/minecraft/server/Main.java
index 99c1a54fbf38b50e914527d3b9fc85b71298c9fa..27b08e38aa6cfb54237838eb3eddedfdddc82823 100644
--- a/src/main/java/net/minecraft/server/Main.java
+++ b/src/main/java/net/minecraft/server/Main.java
@@ -1,18 +1,12 @@
 package net.minecraft.server;
 
 import com.google.common.base.Charsets;
+import com.mojang.bridge.game.PackType;
 import com.mojang.datafixers.DataFixer;
 import com.mojang.datafixers.util.Pair;
 import com.mojang.logging.LogUtils;
 import com.mojang.serialization.DynamicOps;
-
-import java.awt.GraphicsEnvironment;
-import java.io.File;
-import java.net.Proxy;
-import java.nio.file.Path;
-import java.nio.file.Paths;
-import java.util.Optional;
-import java.util.function.BooleanSupplier;
+import com.mojang.serialization.Lifecycle;
 import io.papermc.paper.world.ThreadedWorldUpgrader;
 import joptsimple.OptionSet;
 import net.minecraft.CrashReport;
@@ -28,6 +22,7 @@ import net.minecraft.network.chat.Component;
 import net.minecraft.obfuscate.DontObfuscate;
 import net.minecraft.resources.RegistryOps;
 import net.minecraft.server.dedicated.DedicatedServer;
+import net.minecraft.server.dedicated.DedicatedServerProperties;
 import net.minecraft.server.dedicated.DedicatedServerSettings;
 import net.minecraft.server.level.progress.LoggerChunkProgressListener;
 import net.minecraft.server.packs.repository.PackRepository;
@@ -41,25 +36,20 @@ import net.minecraft.world.flag.FeatureFlags;
 import net.minecraft.world.level.GameRules;
 import net.minecraft.world.level.LevelSettings;
 import net.minecraft.world.level.WorldDataConfiguration;
-import net.minecraft.world.level.DataPackConfig;
 import net.minecraft.world.level.dimension.LevelStem;
 import net.minecraft.world.level.levelgen.WorldDimensions;
 import net.minecraft.world.level.levelgen.WorldOptions;
-import net.minecraft.world.level.storage.LevelResource;
-import net.minecraft.world.level.storage.LevelStorageSource;
-import net.minecraft.world.level.storage.LevelSummary;
-import net.minecraft.world.level.storage.PrimaryLevelData;
-import net.minecraft.world.level.storage.WorldData;
+import net.minecraft.world.level.levelgen.presets.WorldPresets;
+import net.minecraft.world.level.storage.*;
+import org.bukkit.configuration.file.YamlConfiguration;
 import org.slf4j.Logger;
 
 import java.awt.*;
 import java.io.File;
-import com.mojang.bridge.game.PackType;
 import java.io.InputStreamReader;
 import java.net.Proxy;
 import java.nio.file.Path;
 import java.nio.file.Paths;
-import java.util.Objects;
 import java.util.Optional;
 import java.util.concurrent.atomic.AtomicReference;
 import java.util.function.BooleanSupplier;
diff --git a/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java b/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
index 778f4d2b6e00a5b56e5c4109ffc0b8c345558067..b36b117ea95e6bd43516160481f78caa5eac0236 100644
--- a/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
+++ b/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
@@ -1,10 +1,8 @@
 package net.minecraft.server.dedicated;
 
-import co.aikar.timings.MinecraftTimings;
 import com.mojang.authlib.GameProfile;
 import com.mojang.datafixers.DataFixer;
 import com.mojang.logging.LogUtils;
-import com.mojang.serialization.DynamicOps;
 import net.minecraft.*;
 import net.minecraft.commands.CommandSourceStack;
 import net.minecraft.core.BlockPos;
@@ -28,10 +26,6 @@ import net.minecraft.world.level.GameRules;
 import net.minecraft.world.level.GameType;
 import net.minecraft.world.level.block.entity.SkullBlockEntity;
 import net.minecraft.world.level.storage.LevelStorageSource;
-import org.slf4j.Logger;
-
-// CraftBukkit start
-import net.minecraft.server.WorldLoader;
 import org.apache.logging.log4j.Level;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.io.IoBuilder;
diff --git a/src/main/java/net/minecraft/world/entity/EntityType.java b/src/main/java/net/minecraft/world/entity/EntityType.java
index ce51931762980d0cea75cc2d9ad78e0dec6b8b33..d4d94f35deaa469eb475c7c8adc98da23acf8120 100644
--- a/src/main/java/net/minecraft/world/entity/EntityType.java
+++ b/src/main/java/net/minecraft/world/entity/EntityType.java
@@ -59,7 +59,6 @@ import net.minecraft.world.level.pathfinder.WalkNodeEvaluator;
 import net.minecraft.world.phys.AABB;
 import net.minecraft.world.phys.shapes.Shapes;
 import net.minecraft.world.phys.shapes.VoxelShape;
-import org.bukkit.event.entity.CreatureSpawnEvent;
 import org.slf4j.Logger;
 
 import javax.annotation.Nullable;
@@ -232,10 +231,14 @@ public class EntityType<T extends Entity> implements FeatureElement, EntityTypeT
         this(factory, spawnGroup, saveable, summonable, fireImmune, spawnableFarFromPlayer, canSpawnInside, dimensions, maxTrackDistance, trackTickInterval, requiredFeatures, "custom");
     }
     public EntityType(EntityType.EntityFactory<T> factory, MobCategory spawnGroup, boolean saveable, boolean summonable, boolean fireImmune, boolean spawnableFarFromPlayer, ImmutableSet<Block> canSpawnInside, EntityDimensions dimensions, int maxTrackDistance, int trackTickInterval, FeatureFlagSet requiredFeatures, String id) {
+
+        /*
         this.tickTimer = co.aikar.timings.MinecraftTimings.getEntityTimings(id, "tick");
         this.inactiveTickTimer = co.aikar.timings.MinecraftTimings.getEntityTimings(id, "inactiveTick");
         this.passengerTickTimer = co.aikar.timings.MinecraftTimings.getEntityTimings(id, "passengerTick");
         this.passengerInactiveTickTimer = co.aikar.timings.MinecraftTimings.getEntityTimings(id, "passengerInactiveTick");
+        */
+
         // Paper end
         this.builtInRegistryHolder = BuiltInRegistries.ENTITY_TYPE.createIntrusiveHolder(this);
         this.factory = factory;
diff --git a/src/main/java/net/minecraft/world/entity/animal/Cow.java b/src/main/java/net/minecraft/world/entity/animal/Cow.java
index 04171849310591cebd93f9b6f106fe279bea7f96..9acf1c94f6549d0c2d55d5d980710d2fd1e74a93 100644
--- a/src/main/java/net/minecraft/world/entity/animal/Cow.java
+++ b/src/main/java/net/minecraft/world/entity/animal/Cow.java
@@ -1,6 +1,5 @@
 package net.minecraft.world.entity.animal;
 
-import javax.annotation.Nullable;
 import net.minecraft.core.BlockPos;
 import net.minecraft.server.level.ServerLevel;
 import net.minecraft.sounds.SoundEvent;
@@ -8,21 +7,10 @@ import net.minecraft.sounds.SoundEvents;
 import net.minecraft.world.InteractionHand;
 import net.minecraft.world.InteractionResult;
 import net.minecraft.world.damagesource.DamageSource;
-import net.minecraft.world.entity.AgeableMob;
-import net.minecraft.world.entity.EntityDimensions;
-import net.minecraft.world.entity.EntityType;
-import net.minecraft.world.entity.Mob;
-import net.minecraft.world.entity.Pose;
+import net.minecraft.world.entity.*;
 import net.minecraft.world.entity.ai.attributes.AttributeSupplier;
 import net.minecraft.world.entity.ai.attributes.Attributes;
-import net.minecraft.world.entity.ai.goal.BreedGoal;
-import net.minecraft.world.entity.ai.goal.FloatGoal;
-import net.minecraft.world.entity.ai.goal.FollowParentGoal;
-import net.minecraft.world.entity.ai.goal.LookAtPlayerGoal;
-import net.minecraft.world.entity.ai.goal.PanicGoal;
-import net.minecraft.world.entity.ai.goal.RandomLookAroundGoal;
-import net.minecraft.world.entity.ai.goal.TemptGoal;
-import net.minecraft.world.entity.ai.goal.WaterAvoidingRandomStrollGoal;
+import net.minecraft.world.entity.ai.goal.*;
 import net.minecraft.world.entity.player.Player;
 import net.minecraft.world.item.ItemStack;
 import net.minecraft.world.item.ItemUtils;
@@ -30,10 +18,10 @@ import net.minecraft.world.item.Items;
 import net.minecraft.world.item.crafting.Ingredient;
 import net.minecraft.world.level.Level;
 import net.minecraft.world.level.block.state.BlockState;
-// CraftBukkit start
 import org.bukkit.craftbukkit.event.CraftEventFactory;
 import org.bukkit.craftbukkit.inventory.CraftItemStack;
-import org.jetbrains.annotations.Nullable;
+
+import javax.annotation.Nullable;
 // CraftBukkit end
 
 public class Cow extends Animal {
@@ -106,7 +94,6 @@ public class Cow extends Animal {
         }
     }
 
-    @Nullable
     @Override
     public @Nullable Cow getBreedOffspring(final ServerLevel world, final AgeableMob entity) {
         return EntityType.COW.create(world);
diff --git a/src/main/java/net/minecraft/world/level/block/NyliumBlock.java b/src/main/java/net/minecraft/world/level/block/NyliumBlock.java
index bd01d754cdf69298b69479ab5a3b0440330df0a7..9c31601aac10e6ec8eac4da8d70cc8a925ccbfd6 100644
--- a/src/main/java/net/minecraft/world/level/block/NyliumBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/NyliumBlock.java
@@ -13,6 +13,7 @@ import net.minecraft.world.level.LevelReader;
 import net.minecraft.world.level.block.state.BlockBehaviour;
 import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.world.level.chunk.ChunkGenerator;
+import net.minecraft.world.level.levelgen.feature.ConfiguredFeature;
 import net.minecraft.world.level.lighting.LayerLightEngine;
 
 public class NyliumBlock extends Block implements BonemealableBlock {
diff --git a/src/main/java/net/minecraft/world/level/block/entity/BlockEntity.java b/src/main/java/net/minecraft/world/level/block/entity/BlockEntity.java
index 1da136421a3991c5c5ce3d47ac3d7cbc1539235e..516747f9b769cab75723cb7506fbd1a7f442e3ad 100644
--- a/src/main/java/net/minecraft/world/level/block/entity/BlockEntity.java
+++ b/src/main/java/net/minecraft/world/level/block/entity/BlockEntity.java
@@ -1,7 +1,5 @@
 package net.minecraft.world.level.block.entity;
 
-import co.aikar.timings.MinecraftTimings;
-import co.aikar.timings.Timing;
 import com.mojang.logging.LogUtils;
 import net.minecraft.CrashReportCategory;
 import net.minecraft.core.BlockPos;
diff --git a/src/main/java/net/minecraft/world/level/block/entity/TheEndGatewayBlockEntity.java b/src/main/java/net/minecraft/world/level/block/entity/TheEndGatewayBlockEntity.java
index 6dc89df70ee7fc14c10667c16d4dd4907e04cae6..5a3c7275a5c9be9503710b2266ca764f45bb4c9f 100644
--- a/src/main/java/net/minecraft/world/level/block/entity/TheEndGatewayBlockEntity.java
+++ b/src/main/java/net/minecraft/world/level/block/entity/TheEndGatewayBlockEntity.java
@@ -270,7 +270,7 @@ public class TheEndGatewayBlockEntity extends TheEndPortalBlockEntity {
             world.registryAccess().registry(Registries.CONFIGURED_FEATURE).flatMap((iregistry) -> {
                 return iregistry.getHolder(EndFeatures.END_ISLAND);
             }).ifPresent((holder_c) -> {
-                ((ConfiguredFeature) holder_c.value()).place(world, world.getChunkSource().getGenerator(), RandomSource.create(blockposition2.asLong()), blockposition2);
+                holder_c.value().place(world, world.getChunkSource().getGenerator(), RandomSource.create(blockposition2.asLong()), blockposition2);
             });
             blockposition1 = blockposition2;
         } else {
diff --git a/src/main/java/net/minecraft/world/level/chunk/ChunkGenerator.java b/src/main/java/net/minecraft/world/level/chunk/ChunkGenerator.java
index c9993f9339feee1920da2985e9a85a2000fb563f..0d5ac40e606d5cc1d8350f28aa6363c8859fcda0 100644
--- a/src/main/java/net/minecraft/world/level/chunk/ChunkGenerator.java
+++ b/src/main/java/net/minecraft/world/level/chunk/ChunkGenerator.java
@@ -34,12 +34,10 @@ import java.util.*;
 import java.util.Map.Entry;
 import java.util.concurrent.CompletableFuture;
 import java.util.concurrent.Executor;
-import java.util.concurrent.TimeUnit;
 import java.util.function.Function;
 import java.util.function.Predicate;
 import java.util.function.Supplier;
 import java.util.stream.Collectors;
-import java.util.stream.Stream;
 
 public abstract class ChunkGenerator {
 
@@ -64,169 +62,6 @@ public abstract class ChunkGenerator {
         });
     }
 
-    public Stream<Holder<StructureSet>> possibleStructureSets() {
-        return this.structureOverrides.isPresent() ? ((HolderSet) this.structureOverrides.get()).stream() : this.structureSets.holders().map(Holder::hackyErase);
-    }
-
-    // Spigot start
-    private Stream<StructureSet> possibleStructureSetsSpigot() {
-        return this.possibleStructureSets().map(Holder::value).map((structureset) -> {
-            if (structureset.placement() instanceof RandomSpreadStructurePlacement randomConfig && this.structureSets.getKey(structureset).getNamespace().equals(net.minecraft.resources.ResourceLocation.DEFAULT_NAMESPACE)) { // Paper - check namespace cause datapacks could add structure sets with the same path
-                final String name = this.structureSets.getKey(structureset).getPath();
-                int seed = randomConfig.salt;
-
-                switch (name) {
-                    case "desert_pyramids":
-                        seed = conf.desertSeed;
-                        break;
-                    case "end_cities":
-                        seed = conf.endCitySeed;
-                        break;
-                    case "nether_complexes":
-                        seed = conf.netherSeed;
-                        break;
-                    case "igloos":
-                        seed = conf.iglooSeed;
-                        break;
-                    case "jungle_temples":
-                        seed = conf.jungleSeed;
-                        break;
-                    case "woodland_mansions":
-                        seed = conf.mansionSeed;
-                        break;
-                    case "ocean_monuments":
-                        seed = conf.monumentSeed;
-                        break;
-                    case "nether_fossils":
-                        seed = conf.fossilSeed;
-                        break;
-                    case "ocean_ruins":
-                        seed = conf.oceanSeed;
-                        break;
-                    case "pillager_outposts":
-                        seed = conf.outpostSeed;
-                        break;
-                    case "ruined_portals":
-                        seed = conf.portalSeed;
-                        break;
-                    case "shipwrecks":
-                        seed = conf.shipwreckSeed;
-                        break;
-                    case "swamp_huts":
-                        seed = conf.swampSeed;
-                        break;
-                    case "villages":
-                        seed = conf.villageSeed;
-                        break;
-                        // Paper start
-                    case "ancient_cities":
-                        seed = conf.ancientCitySeed;
-                        break;
-                        // Paper end
-                }
-
-                structureset = new StructureSet(structureset.structures(), new RandomSpreadStructurePlacement(randomConfig.locateOffset, randomConfig.frequencyReductionMethod, randomConfig.frequency, seed, randomConfig.exclusionZone, randomConfig.spacing(), randomConfig.separation(), randomConfig.spreadType()));
-            }
-            return structureset;
-        });
-    }
-    // Spigot end
-
-    private void generatePositions(final RandomState noiseConfig) {
-        final Set<Holder<Biome>> set = this.biomeSource.possibleBiomes();
-
-        // Spigot start
-        this.possibleStructureSetsSpigot().forEach((holder) -> {
-            final StructureSet structureset = holder;
-            // Spigot end
-            boolean flag = false;
-            final Iterator iterator = structureset.structures().iterator();
-
-            while (iterator.hasNext()) {
-                final StructureSet.StructureSelectionEntry structureset_a = (StructureSet.StructureSelectionEntry) iterator.next();
-                final Structure structure = structureset_a.structure().value();
-                final Stream stream = structure.biomes().stream();
-
-                Objects.requireNonNull(set);
-                if (stream.anyMatch(set::contains)) {
-                    this.placementsForStructure.computeIfAbsent(structure, (structure1) -> {
-                        return new ArrayList();
-                    }).add(structureset.placement());
-                    flag = true;
-                }
-            }
-
-            if (flag) {
-                final StructurePlacement structureplacement = structureset.placement();
-
-                if (structureplacement instanceof ConcentricRingsStructurePlacement) {
-                    final ConcentricRingsStructurePlacement concentricringsstructureplacement = (ConcentricRingsStructurePlacement) structureplacement;
-
-                    this.ringPositions.put(concentricringsstructureplacement, this.generateRingPositions(holder, noiseConfig, concentricringsstructureplacement));
-                }
-            }
-
-        });
-    }
-
-    private CompletableFuture<List<ChunkPos>> generateRingPositions(final StructureSet holder, final RandomState randomstate, final ConcentricRingsStructurePlacement concentricringsstructureplacement) { // Spigot
-        return concentricringsstructureplacement.count() == 0 ? CompletableFuture.completedFuture(List.of()) : CompletableFuture.supplyAsync(Util.wrapThreadWithTaskName("placement calculation", () -> {
-            final Stopwatch stopwatch = Stopwatch.createStarted(Util.TICKER);
-            final List<ChunkPos> list = new ArrayList();
-            final int i = concentricringsstructureplacement.distance();
-            final int j = concentricringsstructureplacement.count();
-            int k = concentricringsstructureplacement.spread();
-            final HolderSet<Biome> holderset = concentricringsstructureplacement.preferredBiomes();
-            final RandomSource randomsource = RandomSource.create();
-
-            // Paper start
-            if (this.conf.strongholdSeed != null && this.structureSets.getResourceKey(holder).orElse(null) == net.minecraft.world.level.levelgen.structure.BuiltinStructureSets.STRONGHOLDS) {
-                randomsource.setSeed(this.conf.strongholdSeed.longValue());
-            } else {
-            randomsource.setSeed(this instanceof FlatLevelSource ? 0L : randomstate.legacyLevelSeed());
-            }
-            // Paper end
-            double d0 = randomsource.nextDouble() * 3.141592653589793D * 2.0D;
-            int l = 0;
-            int i1 = 0;
-
-            for (int j1 = 0; j1 < j; ++j1) {
-                final double d1 = (double) (4 * i + i * i1 * 6) + (randomsource.nextDouble() - 0.5D) * (double) i * 2.5D;
-                int k1 = (int) Math.round(Math.cos(d0) * d1);
-                int l1 = (int) Math.round(Math.sin(d0) * d1);
-                final BiomeSource worldchunkmanager = this.biomeSource;
-                final int i2 = SectionPos.sectionToBlockCoord(k1, 8);
-                final int j2 = SectionPos.sectionToBlockCoord(l1, 8);
-
-                Objects.requireNonNull(holderset);
-                final Pair<BlockPos, Holder<Biome>> pair = worldchunkmanager.findBiomeHorizontal(i2, 0, j2, 112, holderset::contains, randomsource, randomstate.sampler());
-
-                if (pair != null) {
-                    final BlockPos blockposition = pair.getFirst();
-
-                    k1 = SectionPos.blockToSectionCoord(blockposition.getX());
-                    l1 = SectionPos.blockToSectionCoord(blockposition.getZ());
-                }
-
-                list.add(new ChunkPos(k1, l1));
-                d0 += 6.283185307179586D / (double) k;
-                ++l;
-                if (l == k) {
-                    ++i1;
-                    l = 0;
-                    k += 2 * k / (i1 + 1);
-                    k = Math.min(k, j - j1);
-                    d0 += randomsource.nextDouble() * 3.141592653589793D * 2.0D;
-                }
-            }
-
-            final double d2 = (double) stopwatch.stop().elapsed(TimeUnit.MILLISECONDS) / 1000.0D;
-
-            ChunkGenerator.LOGGER.debug("Calculation for {} took {}s", holder, Double.valueOf(d2));
-            return list;
-        }), Util.backgroundExecutor());
-    }
-
     protected abstract Codec<? extends ChunkGenerator> codec();
 
     public ChunkGeneratorStructureState createState(HolderLookup<StructureSet> holderlookup, RandomState randomstate, long i, org.spigotmc.SpigotWorldConfig conf) { // Spigot
diff --git a/src/main/java/org/bukkit/craftbukkit/util/CraftMagicNumbers.java b/src/main/java/org/bukkit/craftbukkit/util/CraftMagicNumbers.java
index a82e6bd2546cf73361e2a3843c503743e491860a..f1755d4d6305f27b7b1a59997756f101e4fba760 100644
--- a/src/main/java/org/bukkit/craftbukkit/util/CraftMagicNumbers.java
+++ b/src/main/java/org/bukkit/craftbukkit/util/CraftMagicNumbers.java
@@ -12,6 +12,7 @@ import com.mojang.brigadier.exceptions.CommandSyntaxException;
 import com.mojang.serialization.Dynamic;
 import net.minecraft.SharedConstants;
 import net.minecraft.advancements.critereon.DeserializationContext;
+import net.minecraft.core.registries.BuiltInRegistries;
 import net.minecraft.nbt.Tag;
 import net.minecraft.nbt.*;
 import net.minecraft.resources.ResourceLocation;
